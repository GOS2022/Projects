
GOS2022_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026618  080201d0  080201d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004040  080467e8  080467e8  000367e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804a828  0804a828  000436cc  2**0
                  CONTENTS
  4 .ARM          00000008  0804a828  0804a828  0003a828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804a830  0804a830  000436cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804a830  0804a830  0003a830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804a834  0804a834  0003a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000036cc  20000000  0804a838  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c978  200036cc  0804df04  000436cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20010044  0804df04  00050044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000436cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000436fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00043d91  00000000  00000000  0004373f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000e0e5  00000000  00000000  000874d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000033a0  00000000  00000000  000955b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000025ee  00000000  00000000  00098958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00059f93  00000000  00000000  0009af46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000683ca  00000000  00000000  000f4ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7b26  00000000  00000000  0015d2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000d778  00000000  00000000  00254dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00262544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201d0 <__do_global_dtors_aux>:
 80201d0:	b510      	push	{r4, lr}
 80201d2:	4c05      	ldr	r4, [pc, #20]	; (80201e8 <__do_global_dtors_aux+0x18>)
 80201d4:	7823      	ldrb	r3, [r4, #0]
 80201d6:	b933      	cbnz	r3, 80201e6 <__do_global_dtors_aux+0x16>
 80201d8:	4b04      	ldr	r3, [pc, #16]	; (80201ec <__do_global_dtors_aux+0x1c>)
 80201da:	b113      	cbz	r3, 80201e2 <__do_global_dtors_aux+0x12>
 80201dc:	4804      	ldr	r0, [pc, #16]	; (80201f0 <__do_global_dtors_aux+0x20>)
 80201de:	f3af 8000 	nop.w
 80201e2:	2301      	movs	r3, #1
 80201e4:	7023      	strb	r3, [r4, #0]
 80201e6:	bd10      	pop	{r4, pc}
 80201e8:	200036cc 	.word	0x200036cc
 80201ec:	00000000 	.word	0x00000000
 80201f0:	080467d0 	.word	0x080467d0

080201f4 <frame_dummy>:
 80201f4:	b508      	push	{r3, lr}
 80201f6:	4b03      	ldr	r3, [pc, #12]	; (8020204 <frame_dummy+0x10>)
 80201f8:	b11b      	cbz	r3, 8020202 <frame_dummy+0xe>
 80201fa:	4903      	ldr	r1, [pc, #12]	; (8020208 <frame_dummy+0x14>)
 80201fc:	4803      	ldr	r0, [pc, #12]	; (802020c <frame_dummy+0x18>)
 80201fe:	f3af 8000 	nop.w
 8020202:	bd08      	pop	{r3, pc}
 8020204:	00000000 	.word	0x00000000
 8020208:	200036d0 	.word	0x200036d0
 802020c:	080467d0 	.word	0x080467d0

08020210 <strcmp>:
 8020210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020218:	2a01      	cmp	r2, #1
 802021a:	bf28      	it	cs
 802021c:	429a      	cmpcs	r2, r3
 802021e:	d0f7      	beq.n	8020210 <strcmp>
 8020220:	1ad0      	subs	r0, r2, r3
 8020222:	4770      	bx	lr
	...

08020230 <memchr>:
 8020230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020234:	2a10      	cmp	r2, #16
 8020236:	db2b      	blt.n	8020290 <memchr+0x60>
 8020238:	f010 0f07 	tst.w	r0, #7
 802023c:	d008      	beq.n	8020250 <memchr+0x20>
 802023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020242:	3a01      	subs	r2, #1
 8020244:	428b      	cmp	r3, r1
 8020246:	d02d      	beq.n	80202a4 <memchr+0x74>
 8020248:	f010 0f07 	tst.w	r0, #7
 802024c:	b342      	cbz	r2, 80202a0 <memchr+0x70>
 802024e:	d1f6      	bne.n	802023e <memchr+0xe>
 8020250:	b4f0      	push	{r4, r5, r6, r7}
 8020252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802025a:	f022 0407 	bic.w	r4, r2, #7
 802025e:	f07f 0700 	mvns.w	r7, #0
 8020262:	2300      	movs	r3, #0
 8020264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020268:	3c08      	subs	r4, #8
 802026a:	ea85 0501 	eor.w	r5, r5, r1
 802026e:	ea86 0601 	eor.w	r6, r6, r1
 8020272:	fa85 f547 	uadd8	r5, r5, r7
 8020276:	faa3 f587 	sel	r5, r3, r7
 802027a:	fa86 f647 	uadd8	r6, r6, r7
 802027e:	faa5 f687 	sel	r6, r5, r7
 8020282:	b98e      	cbnz	r6, 80202a8 <memchr+0x78>
 8020284:	d1ee      	bne.n	8020264 <memchr+0x34>
 8020286:	bcf0      	pop	{r4, r5, r6, r7}
 8020288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802028c:	f002 0207 	and.w	r2, r2, #7
 8020290:	b132      	cbz	r2, 80202a0 <memchr+0x70>
 8020292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020296:	3a01      	subs	r2, #1
 8020298:	ea83 0301 	eor.w	r3, r3, r1
 802029c:	b113      	cbz	r3, 80202a4 <memchr+0x74>
 802029e:	d1f8      	bne.n	8020292 <memchr+0x62>
 80202a0:	2000      	movs	r0, #0
 80202a2:	4770      	bx	lr
 80202a4:	3801      	subs	r0, #1
 80202a6:	4770      	bx	lr
 80202a8:	2d00      	cmp	r5, #0
 80202aa:	bf06      	itte	eq
 80202ac:	4635      	moveq	r5, r6
 80202ae:	3803      	subeq	r0, #3
 80202b0:	3807      	subne	r0, #7
 80202b2:	f015 0f01 	tst.w	r5, #1
 80202b6:	d107      	bne.n	80202c8 <memchr+0x98>
 80202b8:	3001      	adds	r0, #1
 80202ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80202be:	bf02      	ittt	eq
 80202c0:	3001      	addeq	r0, #1
 80202c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80202c6:	3001      	addeq	r0, #1
 80202c8:	bcf0      	pop	{r4, r5, r6, r7}
 80202ca:	3801      	subs	r0, #1
 80202cc:	4770      	bx	lr
 80202ce:	bf00      	nop

080202d0 <strlen>:
 80202d0:	4603      	mov	r3, r0
 80202d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80202d6:	2a00      	cmp	r2, #0
 80202d8:	d1fb      	bne.n	80202d2 <strlen+0x2>
 80202da:	1a18      	subs	r0, r3, r0
 80202dc:	3801      	subs	r0, #1
 80202de:	4770      	bx	lr

080202e0 <__aeabi_drsub>:
 80202e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80202e4:	e002      	b.n	80202ec <__adddf3>
 80202e6:	bf00      	nop

080202e8 <__aeabi_dsub>:
 80202e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080202ec <__adddf3>:
 80202ec:	b530      	push	{r4, r5, lr}
 80202ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80202f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80202f6:	ea94 0f05 	teq	r4, r5
 80202fa:	bf08      	it	eq
 80202fc:	ea90 0f02 	teqeq	r0, r2
 8020300:	bf1f      	itttt	ne
 8020302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020306:	ea55 0c02 	orrsne.w	ip, r5, r2
 802030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020312:	f000 80e2 	beq.w	80204da <__adddf3+0x1ee>
 8020316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802031e:	bfb8      	it	lt
 8020320:	426d      	neglt	r5, r5
 8020322:	dd0c      	ble.n	802033e <__adddf3+0x52>
 8020324:	442c      	add	r4, r5
 8020326:	ea80 0202 	eor.w	r2, r0, r2
 802032a:	ea81 0303 	eor.w	r3, r1, r3
 802032e:	ea82 0000 	eor.w	r0, r2, r0
 8020332:	ea83 0101 	eor.w	r1, r3, r1
 8020336:	ea80 0202 	eor.w	r2, r0, r2
 802033a:	ea81 0303 	eor.w	r3, r1, r3
 802033e:	2d36      	cmp	r5, #54	; 0x36
 8020340:	bf88      	it	hi
 8020342:	bd30      	pophi	{r4, r5, pc}
 8020344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020354:	d002      	beq.n	802035c <__adddf3+0x70>
 8020356:	4240      	negs	r0, r0
 8020358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020368:	d002      	beq.n	8020370 <__adddf3+0x84>
 802036a:	4252      	negs	r2, r2
 802036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020370:	ea94 0f05 	teq	r4, r5
 8020374:	f000 80a7 	beq.w	80204c6 <__adddf3+0x1da>
 8020378:	f1a4 0401 	sub.w	r4, r4, #1
 802037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020380:	db0d      	blt.n	802039e <__adddf3+0xb2>
 8020382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020386:	fa22 f205 	lsr.w	r2, r2, r5
 802038a:	1880      	adds	r0, r0, r2
 802038c:	f141 0100 	adc.w	r1, r1, #0
 8020390:	fa03 f20e 	lsl.w	r2, r3, lr
 8020394:	1880      	adds	r0, r0, r2
 8020396:	fa43 f305 	asr.w	r3, r3, r5
 802039a:	4159      	adcs	r1, r3
 802039c:	e00e      	b.n	80203bc <__adddf3+0xd0>
 802039e:	f1a5 0520 	sub.w	r5, r5, #32
 80203a2:	f10e 0e20 	add.w	lr, lr, #32
 80203a6:	2a01      	cmp	r2, #1
 80203a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80203ac:	bf28      	it	cs
 80203ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80203b2:	fa43 f305 	asr.w	r3, r3, r5
 80203b6:	18c0      	adds	r0, r0, r3
 80203b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80203bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80203c0:	d507      	bpl.n	80203d2 <__adddf3+0xe6>
 80203c2:	f04f 0e00 	mov.w	lr, #0
 80203c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80203ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80203ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80203d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80203d6:	d31b      	bcc.n	8020410 <__adddf3+0x124>
 80203d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80203dc:	d30c      	bcc.n	80203f8 <__adddf3+0x10c>
 80203de:	0849      	lsrs	r1, r1, #1
 80203e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80203e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80203e8:	f104 0401 	add.w	r4, r4, #1
 80203ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80203f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80203f4:	f080 809a 	bcs.w	802052c <__adddf3+0x240>
 80203f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80203fc:	bf08      	it	eq
 80203fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020402:	f150 0000 	adcs.w	r0, r0, #0
 8020406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802040a:	ea41 0105 	orr.w	r1, r1, r5
 802040e:	bd30      	pop	{r4, r5, pc}
 8020410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020414:	4140      	adcs	r0, r0
 8020416:	eb41 0101 	adc.w	r1, r1, r1
 802041a:	3c01      	subs	r4, #1
 802041c:	bf28      	it	cs
 802041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8020422:	d2e9      	bcs.n	80203f8 <__adddf3+0x10c>
 8020424:	f091 0f00 	teq	r1, #0
 8020428:	bf04      	itt	eq
 802042a:	4601      	moveq	r1, r0
 802042c:	2000      	moveq	r0, #0
 802042e:	fab1 f381 	clz	r3, r1
 8020432:	bf08      	it	eq
 8020434:	3320      	addeq	r3, #32
 8020436:	f1a3 030b 	sub.w	r3, r3, #11
 802043a:	f1b3 0220 	subs.w	r2, r3, #32
 802043e:	da0c      	bge.n	802045a <__adddf3+0x16e>
 8020440:	320c      	adds	r2, #12
 8020442:	dd08      	ble.n	8020456 <__adddf3+0x16a>
 8020444:	f102 0c14 	add.w	ip, r2, #20
 8020448:	f1c2 020c 	rsb	r2, r2, #12
 802044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020450:	fa21 f102 	lsr.w	r1, r1, r2
 8020454:	e00c      	b.n	8020470 <__adddf3+0x184>
 8020456:	f102 0214 	add.w	r2, r2, #20
 802045a:	bfd8      	it	le
 802045c:	f1c2 0c20 	rsble	ip, r2, #32
 8020460:	fa01 f102 	lsl.w	r1, r1, r2
 8020464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020468:	bfdc      	itt	le
 802046a:	ea41 010c 	orrle.w	r1, r1, ip
 802046e:	4090      	lslle	r0, r2
 8020470:	1ae4      	subs	r4, r4, r3
 8020472:	bfa2      	ittt	ge
 8020474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020478:	4329      	orrge	r1, r5
 802047a:	bd30      	popge	{r4, r5, pc}
 802047c:	ea6f 0404 	mvn.w	r4, r4
 8020480:	3c1f      	subs	r4, #31
 8020482:	da1c      	bge.n	80204be <__adddf3+0x1d2>
 8020484:	340c      	adds	r4, #12
 8020486:	dc0e      	bgt.n	80204a6 <__adddf3+0x1ba>
 8020488:	f104 0414 	add.w	r4, r4, #20
 802048c:	f1c4 0220 	rsb	r2, r4, #32
 8020490:	fa20 f004 	lsr.w	r0, r0, r4
 8020494:	fa01 f302 	lsl.w	r3, r1, r2
 8020498:	ea40 0003 	orr.w	r0, r0, r3
 802049c:	fa21 f304 	lsr.w	r3, r1, r4
 80204a0:	ea45 0103 	orr.w	r1, r5, r3
 80204a4:	bd30      	pop	{r4, r5, pc}
 80204a6:	f1c4 040c 	rsb	r4, r4, #12
 80204aa:	f1c4 0220 	rsb	r2, r4, #32
 80204ae:	fa20 f002 	lsr.w	r0, r0, r2
 80204b2:	fa01 f304 	lsl.w	r3, r1, r4
 80204b6:	ea40 0003 	orr.w	r0, r0, r3
 80204ba:	4629      	mov	r1, r5
 80204bc:	bd30      	pop	{r4, r5, pc}
 80204be:	fa21 f004 	lsr.w	r0, r1, r4
 80204c2:	4629      	mov	r1, r5
 80204c4:	bd30      	pop	{r4, r5, pc}
 80204c6:	f094 0f00 	teq	r4, #0
 80204ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80204ce:	bf06      	itte	eq
 80204d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80204d4:	3401      	addeq	r4, #1
 80204d6:	3d01      	subne	r5, #1
 80204d8:	e74e      	b.n	8020378 <__adddf3+0x8c>
 80204da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204de:	bf18      	it	ne
 80204e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80204e4:	d029      	beq.n	802053a <__adddf3+0x24e>
 80204e6:	ea94 0f05 	teq	r4, r5
 80204ea:	bf08      	it	eq
 80204ec:	ea90 0f02 	teqeq	r0, r2
 80204f0:	d005      	beq.n	80204fe <__adddf3+0x212>
 80204f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80204f6:	bf04      	itt	eq
 80204f8:	4619      	moveq	r1, r3
 80204fa:	4610      	moveq	r0, r2
 80204fc:	bd30      	pop	{r4, r5, pc}
 80204fe:	ea91 0f03 	teq	r1, r3
 8020502:	bf1e      	ittt	ne
 8020504:	2100      	movne	r1, #0
 8020506:	2000      	movne	r0, #0
 8020508:	bd30      	popne	{r4, r5, pc}
 802050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802050e:	d105      	bne.n	802051c <__adddf3+0x230>
 8020510:	0040      	lsls	r0, r0, #1
 8020512:	4149      	adcs	r1, r1
 8020514:	bf28      	it	cs
 8020516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802051a:	bd30      	pop	{r4, r5, pc}
 802051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020520:	bf3c      	itt	cc
 8020522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020526:	bd30      	popcc	{r4, r5, pc}
 8020528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020534:	f04f 0000 	mov.w	r0, #0
 8020538:	bd30      	pop	{r4, r5, pc}
 802053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802053e:	bf1a      	itte	ne
 8020540:	4619      	movne	r1, r3
 8020542:	4610      	movne	r0, r2
 8020544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020548:	bf1c      	itt	ne
 802054a:	460b      	movne	r3, r1
 802054c:	4602      	movne	r2, r0
 802054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020552:	bf06      	itte	eq
 8020554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020558:	ea91 0f03 	teqeq	r1, r3
 802055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020560:	bd30      	pop	{r4, r5, pc}
 8020562:	bf00      	nop

08020564 <__aeabi_ui2d>:
 8020564:	f090 0f00 	teq	r0, #0
 8020568:	bf04      	itt	eq
 802056a:	2100      	moveq	r1, #0
 802056c:	4770      	bxeq	lr
 802056e:	b530      	push	{r4, r5, lr}
 8020570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020578:	f04f 0500 	mov.w	r5, #0
 802057c:	f04f 0100 	mov.w	r1, #0
 8020580:	e750      	b.n	8020424 <__adddf3+0x138>
 8020582:	bf00      	nop

08020584 <__aeabi_i2d>:
 8020584:	f090 0f00 	teq	r0, #0
 8020588:	bf04      	itt	eq
 802058a:	2100      	moveq	r1, #0
 802058c:	4770      	bxeq	lr
 802058e:	b530      	push	{r4, r5, lr}
 8020590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802059c:	bf48      	it	mi
 802059e:	4240      	negmi	r0, r0
 80205a0:	f04f 0100 	mov.w	r1, #0
 80205a4:	e73e      	b.n	8020424 <__adddf3+0x138>
 80205a6:	bf00      	nop

080205a8 <__aeabi_f2d>:
 80205a8:	0042      	lsls	r2, r0, #1
 80205aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80205ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80205b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80205b6:	bf1f      	itttt	ne
 80205b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80205bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80205c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80205c4:	4770      	bxne	lr
 80205c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80205ca:	bf08      	it	eq
 80205cc:	4770      	bxeq	lr
 80205ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80205d2:	bf04      	itt	eq
 80205d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80205d8:	4770      	bxeq	lr
 80205da:	b530      	push	{r4, r5, lr}
 80205dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80205e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80205e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80205e8:	e71c      	b.n	8020424 <__adddf3+0x138>
 80205ea:	bf00      	nop

080205ec <__aeabi_ul2d>:
 80205ec:	ea50 0201 	orrs.w	r2, r0, r1
 80205f0:	bf08      	it	eq
 80205f2:	4770      	bxeq	lr
 80205f4:	b530      	push	{r4, r5, lr}
 80205f6:	f04f 0500 	mov.w	r5, #0
 80205fa:	e00a      	b.n	8020612 <__aeabi_l2d+0x16>

080205fc <__aeabi_l2d>:
 80205fc:	ea50 0201 	orrs.w	r2, r0, r1
 8020600:	bf08      	it	eq
 8020602:	4770      	bxeq	lr
 8020604:	b530      	push	{r4, r5, lr}
 8020606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802060a:	d502      	bpl.n	8020612 <__aeabi_l2d+0x16>
 802060c:	4240      	negs	r0, r0
 802060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802061e:	f43f aed8 	beq.w	80203d2 <__adddf3+0xe6>
 8020622:	f04f 0203 	mov.w	r2, #3
 8020626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802062a:	bf18      	it	ne
 802062c:	3203      	addne	r2, #3
 802062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020632:	bf18      	it	ne
 8020634:	3203      	addne	r2, #3
 8020636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802063a:	f1c2 0320 	rsb	r3, r2, #32
 802063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020642:	fa20 f002 	lsr.w	r0, r0, r2
 8020646:	fa01 fe03 	lsl.w	lr, r1, r3
 802064a:	ea40 000e 	orr.w	r0, r0, lr
 802064e:	fa21 f102 	lsr.w	r1, r1, r2
 8020652:	4414      	add	r4, r2
 8020654:	e6bd      	b.n	80203d2 <__adddf3+0xe6>
 8020656:	bf00      	nop

08020658 <__aeabi_dmul>:
 8020658:	b570      	push	{r4, r5, r6, lr}
 802065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020666:	bf1d      	ittte	ne
 8020668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802066c:	ea94 0f0c 	teqne	r4, ip
 8020670:	ea95 0f0c 	teqne	r5, ip
 8020674:	f000 f8de 	bleq	8020834 <__aeabi_dmul+0x1dc>
 8020678:	442c      	add	r4, r5
 802067a:	ea81 0603 	eor.w	r6, r1, r3
 802067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802068a:	bf18      	it	ne
 802068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020698:	d038      	beq.n	802070c <__aeabi_dmul+0xb4>
 802069a:	fba0 ce02 	umull	ip, lr, r0, r2
 802069e:	f04f 0500 	mov.w	r5, #0
 80206a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80206a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80206aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80206ae:	f04f 0600 	mov.w	r6, #0
 80206b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80206b6:	f09c 0f00 	teq	ip, #0
 80206ba:	bf18      	it	ne
 80206bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80206c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80206c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80206c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80206cc:	d204      	bcs.n	80206d8 <__aeabi_dmul+0x80>
 80206ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80206d2:	416d      	adcs	r5, r5
 80206d4:	eb46 0606 	adc.w	r6, r6, r6
 80206d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80206dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80206e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80206e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80206e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80206ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80206f0:	bf88      	it	hi
 80206f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80206f6:	d81e      	bhi.n	8020736 <__aeabi_dmul+0xde>
 80206f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80206fc:	bf08      	it	eq
 80206fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020702:	f150 0000 	adcs.w	r0, r0, #0
 8020706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802070a:	bd70      	pop	{r4, r5, r6, pc}
 802070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020710:	ea46 0101 	orr.w	r1, r6, r1
 8020714:	ea40 0002 	orr.w	r0, r0, r2
 8020718:	ea81 0103 	eor.w	r1, r1, r3
 802071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020720:	bfc2      	ittt	gt
 8020722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802072a:	bd70      	popgt	{r4, r5, r6, pc}
 802072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020730:	f04f 0e00 	mov.w	lr, #0
 8020734:	3c01      	subs	r4, #1
 8020736:	f300 80ab 	bgt.w	8020890 <__aeabi_dmul+0x238>
 802073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802073e:	bfde      	ittt	le
 8020740:	2000      	movle	r0, #0
 8020742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8020746:	bd70      	pople	{r4, r5, r6, pc}
 8020748:	f1c4 0400 	rsb	r4, r4, #0
 802074c:	3c20      	subs	r4, #32
 802074e:	da35      	bge.n	80207bc <__aeabi_dmul+0x164>
 8020750:	340c      	adds	r4, #12
 8020752:	dc1b      	bgt.n	802078c <__aeabi_dmul+0x134>
 8020754:	f104 0414 	add.w	r4, r4, #20
 8020758:	f1c4 0520 	rsb	r5, r4, #32
 802075c:	fa00 f305 	lsl.w	r3, r0, r5
 8020760:	fa20 f004 	lsr.w	r0, r0, r4
 8020764:	fa01 f205 	lsl.w	r2, r1, r5
 8020768:	ea40 0002 	orr.w	r0, r0, r2
 802076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020778:	fa21 f604 	lsr.w	r6, r1, r4
 802077c:	eb42 0106 	adc.w	r1, r2, r6
 8020780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020784:	bf08      	it	eq
 8020786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802078a:	bd70      	pop	{r4, r5, r6, pc}
 802078c:	f1c4 040c 	rsb	r4, r4, #12
 8020790:	f1c4 0520 	rsb	r5, r4, #32
 8020794:	fa00 f304 	lsl.w	r3, r0, r4
 8020798:	fa20 f005 	lsr.w	r0, r0, r5
 802079c:	fa01 f204 	lsl.w	r2, r1, r4
 80207a0:	ea40 0002 	orr.w	r0, r0, r2
 80207a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80207ac:	f141 0100 	adc.w	r1, r1, #0
 80207b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207b4:	bf08      	it	eq
 80207b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207ba:	bd70      	pop	{r4, r5, r6, pc}
 80207bc:	f1c4 0520 	rsb	r5, r4, #32
 80207c0:	fa00 f205 	lsl.w	r2, r0, r5
 80207c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80207c8:	fa20 f304 	lsr.w	r3, r0, r4
 80207cc:	fa01 f205 	lsl.w	r2, r1, r5
 80207d0:	ea43 0302 	orr.w	r3, r3, r2
 80207d4:	fa21 f004 	lsr.w	r0, r1, r4
 80207d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207dc:	fa21 f204 	lsr.w	r2, r1, r4
 80207e0:	ea20 0002 	bic.w	r0, r0, r2
 80207e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80207e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207ec:	bf08      	it	eq
 80207ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207f2:	bd70      	pop	{r4, r5, r6, pc}
 80207f4:	f094 0f00 	teq	r4, #0
 80207f8:	d10f      	bne.n	802081a <__aeabi_dmul+0x1c2>
 80207fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80207fe:	0040      	lsls	r0, r0, #1
 8020800:	eb41 0101 	adc.w	r1, r1, r1
 8020804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020808:	bf08      	it	eq
 802080a:	3c01      	subeq	r4, #1
 802080c:	d0f7      	beq.n	80207fe <__aeabi_dmul+0x1a6>
 802080e:	ea41 0106 	orr.w	r1, r1, r6
 8020812:	f095 0f00 	teq	r5, #0
 8020816:	bf18      	it	ne
 8020818:	4770      	bxne	lr
 802081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802081e:	0052      	lsls	r2, r2, #1
 8020820:	eb43 0303 	adc.w	r3, r3, r3
 8020824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020828:	bf08      	it	eq
 802082a:	3d01      	subeq	r5, #1
 802082c:	d0f7      	beq.n	802081e <__aeabi_dmul+0x1c6>
 802082e:	ea43 0306 	orr.w	r3, r3, r6
 8020832:	4770      	bx	lr
 8020834:	ea94 0f0c 	teq	r4, ip
 8020838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802083c:	bf18      	it	ne
 802083e:	ea95 0f0c 	teqne	r5, ip
 8020842:	d00c      	beq.n	802085e <__aeabi_dmul+0x206>
 8020844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020848:	bf18      	it	ne
 802084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802084e:	d1d1      	bne.n	80207f4 <__aeabi_dmul+0x19c>
 8020850:	ea81 0103 	eor.w	r1, r1, r3
 8020854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020858:	f04f 0000 	mov.w	r0, #0
 802085c:	bd70      	pop	{r4, r5, r6, pc}
 802085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020862:	bf06      	itte	eq
 8020864:	4610      	moveq	r0, r2
 8020866:	4619      	moveq	r1, r3
 8020868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802086c:	d019      	beq.n	80208a2 <__aeabi_dmul+0x24a>
 802086e:	ea94 0f0c 	teq	r4, ip
 8020872:	d102      	bne.n	802087a <__aeabi_dmul+0x222>
 8020874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020878:	d113      	bne.n	80208a2 <__aeabi_dmul+0x24a>
 802087a:	ea95 0f0c 	teq	r5, ip
 802087e:	d105      	bne.n	802088c <__aeabi_dmul+0x234>
 8020880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020884:	bf1c      	itt	ne
 8020886:	4610      	movne	r0, r2
 8020888:	4619      	movne	r1, r3
 802088a:	d10a      	bne.n	80208a2 <__aeabi_dmul+0x24a>
 802088c:	ea81 0103 	eor.w	r1, r1, r3
 8020890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802089c:	f04f 0000 	mov.w	r0, #0
 80208a0:	bd70      	pop	{r4, r5, r6, pc}
 80208a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80208a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80208aa:	bd70      	pop	{r4, r5, r6, pc}

080208ac <__aeabi_ddiv>:
 80208ac:	b570      	push	{r4, r5, r6, lr}
 80208ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80208b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80208b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80208ba:	bf1d      	ittte	ne
 80208bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80208c0:	ea94 0f0c 	teqne	r4, ip
 80208c4:	ea95 0f0c 	teqne	r5, ip
 80208c8:	f000 f8a7 	bleq	8020a1a <__aeabi_ddiv+0x16e>
 80208cc:	eba4 0405 	sub.w	r4, r4, r5
 80208d0:	ea81 0e03 	eor.w	lr, r1, r3
 80208d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80208dc:	f000 8088 	beq.w	80209f0 <__aeabi_ddiv+0x144>
 80208e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80208e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80208e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80208ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80208f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80208f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80208f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80208fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020904:	429d      	cmp	r5, r3
 8020906:	bf08      	it	eq
 8020908:	4296      	cmpeq	r6, r2
 802090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020912:	d202      	bcs.n	802091a <__aeabi_ddiv+0x6e>
 8020914:	085b      	lsrs	r3, r3, #1
 8020916:	ea4f 0232 	mov.w	r2, r2, rrx
 802091a:	1ab6      	subs	r6, r6, r2
 802091c:	eb65 0503 	sbc.w	r5, r5, r3
 8020920:	085b      	lsrs	r3, r3, #1
 8020922:	ea4f 0232 	mov.w	r2, r2, rrx
 8020926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020936:	bf22      	ittt	cs
 8020938:	1ab6      	subcs	r6, r6, r2
 802093a:	4675      	movcs	r5, lr
 802093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020940:	085b      	lsrs	r3, r3, #1
 8020942:	ea4f 0232 	mov.w	r2, r2, rrx
 8020946:	ebb6 0e02 	subs.w	lr, r6, r2
 802094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802094e:	bf22      	ittt	cs
 8020950:	1ab6      	subcs	r6, r6, r2
 8020952:	4675      	movcs	r5, lr
 8020954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020958:	085b      	lsrs	r3, r3, #1
 802095a:	ea4f 0232 	mov.w	r2, r2, rrx
 802095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020966:	bf22      	ittt	cs
 8020968:	1ab6      	subcs	r6, r6, r2
 802096a:	4675      	movcs	r5, lr
 802096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020970:	085b      	lsrs	r3, r3, #1
 8020972:	ea4f 0232 	mov.w	r2, r2, rrx
 8020976:	ebb6 0e02 	subs.w	lr, r6, r2
 802097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802097e:	bf22      	ittt	cs
 8020980:	1ab6      	subcs	r6, r6, r2
 8020982:	4675      	movcs	r5, lr
 8020984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020988:	ea55 0e06 	orrs.w	lr, r5, r6
 802098c:	d018      	beq.n	80209c0 <__aeabi_ddiv+0x114>
 802098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80209a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80209a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80209aa:	d1c0      	bne.n	802092e <__aeabi_ddiv+0x82>
 80209ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80209b0:	d10b      	bne.n	80209ca <__aeabi_ddiv+0x11e>
 80209b2:	ea41 0100 	orr.w	r1, r1, r0
 80209b6:	f04f 0000 	mov.w	r0, #0
 80209ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80209be:	e7b6      	b.n	802092e <__aeabi_ddiv+0x82>
 80209c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80209c4:	bf04      	itt	eq
 80209c6:	4301      	orreq	r1, r0
 80209c8:	2000      	moveq	r0, #0
 80209ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80209ce:	bf88      	it	hi
 80209d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80209d4:	f63f aeaf 	bhi.w	8020736 <__aeabi_dmul+0xde>
 80209d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80209dc:	bf04      	itt	eq
 80209de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80209e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80209e6:	f150 0000 	adcs.w	r0, r0, #0
 80209ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80209ee:	bd70      	pop	{r4, r5, r6, pc}
 80209f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80209f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80209f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80209fc:	bfc2      	ittt	gt
 80209fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020a06:	bd70      	popgt	{r4, r5, r6, pc}
 8020a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020a0c:	f04f 0e00 	mov.w	lr, #0
 8020a10:	3c01      	subs	r4, #1
 8020a12:	e690      	b.n	8020736 <__aeabi_dmul+0xde>
 8020a14:	ea45 0e06 	orr.w	lr, r5, r6
 8020a18:	e68d      	b.n	8020736 <__aeabi_dmul+0xde>
 8020a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8020a1e:	ea94 0f0c 	teq	r4, ip
 8020a22:	bf08      	it	eq
 8020a24:	ea95 0f0c 	teqeq	r5, ip
 8020a28:	f43f af3b 	beq.w	80208a2 <__aeabi_dmul+0x24a>
 8020a2c:	ea94 0f0c 	teq	r4, ip
 8020a30:	d10a      	bne.n	8020a48 <__aeabi_ddiv+0x19c>
 8020a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020a36:	f47f af34 	bne.w	80208a2 <__aeabi_dmul+0x24a>
 8020a3a:	ea95 0f0c 	teq	r5, ip
 8020a3e:	f47f af25 	bne.w	802088c <__aeabi_dmul+0x234>
 8020a42:	4610      	mov	r0, r2
 8020a44:	4619      	mov	r1, r3
 8020a46:	e72c      	b.n	80208a2 <__aeabi_dmul+0x24a>
 8020a48:	ea95 0f0c 	teq	r5, ip
 8020a4c:	d106      	bne.n	8020a5c <__aeabi_ddiv+0x1b0>
 8020a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020a52:	f43f aefd 	beq.w	8020850 <__aeabi_dmul+0x1f8>
 8020a56:	4610      	mov	r0, r2
 8020a58:	4619      	mov	r1, r3
 8020a5a:	e722      	b.n	80208a2 <__aeabi_dmul+0x24a>
 8020a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a60:	bf18      	it	ne
 8020a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a66:	f47f aec5 	bne.w	80207f4 <__aeabi_dmul+0x19c>
 8020a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a6e:	f47f af0d 	bne.w	802088c <__aeabi_dmul+0x234>
 8020a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a76:	f47f aeeb 	bne.w	8020850 <__aeabi_dmul+0x1f8>
 8020a7a:	e712      	b.n	80208a2 <__aeabi_dmul+0x24a>

08020a7c <__gedf2>:
 8020a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8020a80:	e006      	b.n	8020a90 <__cmpdf2+0x4>
 8020a82:	bf00      	nop

08020a84 <__ledf2>:
 8020a84:	f04f 0c01 	mov.w	ip, #1
 8020a88:	e002      	b.n	8020a90 <__cmpdf2+0x4>
 8020a8a:	bf00      	nop

08020a8c <__cmpdf2>:
 8020a8c:	f04f 0c01 	mov.w	ip, #1
 8020a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020aa0:	bf18      	it	ne
 8020aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020aa6:	d01b      	beq.n	8020ae0 <__cmpdf2+0x54>
 8020aa8:	b001      	add	sp, #4
 8020aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020aae:	bf0c      	ite	eq
 8020ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020ab4:	ea91 0f03 	teqne	r1, r3
 8020ab8:	bf02      	ittt	eq
 8020aba:	ea90 0f02 	teqeq	r0, r2
 8020abe:	2000      	moveq	r0, #0
 8020ac0:	4770      	bxeq	lr
 8020ac2:	f110 0f00 	cmn.w	r0, #0
 8020ac6:	ea91 0f03 	teq	r1, r3
 8020aca:	bf58      	it	pl
 8020acc:	4299      	cmppl	r1, r3
 8020ace:	bf08      	it	eq
 8020ad0:	4290      	cmpeq	r0, r2
 8020ad2:	bf2c      	ite	cs
 8020ad4:	17d8      	asrcs	r0, r3, #31
 8020ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020ada:	f040 0001 	orr.w	r0, r0, #1
 8020ade:	4770      	bx	lr
 8020ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ae8:	d102      	bne.n	8020af0 <__cmpdf2+0x64>
 8020aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020aee:	d107      	bne.n	8020b00 <__cmpdf2+0x74>
 8020af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020af8:	d1d6      	bne.n	8020aa8 <__cmpdf2+0x1c>
 8020afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020afe:	d0d3      	beq.n	8020aa8 <__cmpdf2+0x1c>
 8020b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020b04:	4770      	bx	lr
 8020b06:	bf00      	nop

08020b08 <__aeabi_cdrcmple>:
 8020b08:	4684      	mov	ip, r0
 8020b0a:	4610      	mov	r0, r2
 8020b0c:	4662      	mov	r2, ip
 8020b0e:	468c      	mov	ip, r1
 8020b10:	4619      	mov	r1, r3
 8020b12:	4663      	mov	r3, ip
 8020b14:	e000      	b.n	8020b18 <__aeabi_cdcmpeq>
 8020b16:	bf00      	nop

08020b18 <__aeabi_cdcmpeq>:
 8020b18:	b501      	push	{r0, lr}
 8020b1a:	f7ff ffb7 	bl	8020a8c <__cmpdf2>
 8020b1e:	2800      	cmp	r0, #0
 8020b20:	bf48      	it	mi
 8020b22:	f110 0f00 	cmnmi.w	r0, #0
 8020b26:	bd01      	pop	{r0, pc}

08020b28 <__aeabi_dcmpeq>:
 8020b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b2c:	f7ff fff4 	bl	8020b18 <__aeabi_cdcmpeq>
 8020b30:	bf0c      	ite	eq
 8020b32:	2001      	moveq	r0, #1
 8020b34:	2000      	movne	r0, #0
 8020b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b3a:	bf00      	nop

08020b3c <__aeabi_dcmplt>:
 8020b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b40:	f7ff ffea 	bl	8020b18 <__aeabi_cdcmpeq>
 8020b44:	bf34      	ite	cc
 8020b46:	2001      	movcc	r0, #1
 8020b48:	2000      	movcs	r0, #0
 8020b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b4e:	bf00      	nop

08020b50 <__aeabi_dcmple>:
 8020b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b54:	f7ff ffe0 	bl	8020b18 <__aeabi_cdcmpeq>
 8020b58:	bf94      	ite	ls
 8020b5a:	2001      	movls	r0, #1
 8020b5c:	2000      	movhi	r0, #0
 8020b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b62:	bf00      	nop

08020b64 <__aeabi_dcmpge>:
 8020b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b68:	f7ff ffce 	bl	8020b08 <__aeabi_cdrcmple>
 8020b6c:	bf94      	ite	ls
 8020b6e:	2001      	movls	r0, #1
 8020b70:	2000      	movhi	r0, #0
 8020b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b76:	bf00      	nop

08020b78 <__aeabi_dcmpgt>:
 8020b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b7c:	f7ff ffc4 	bl	8020b08 <__aeabi_cdrcmple>
 8020b80:	bf34      	ite	cc
 8020b82:	2001      	movcc	r0, #1
 8020b84:	2000      	movcs	r0, #0
 8020b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b8a:	bf00      	nop

08020b8c <__aeabi_dcmpun>:
 8020b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b94:	d102      	bne.n	8020b9c <__aeabi_dcmpun+0x10>
 8020b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b9a:	d10a      	bne.n	8020bb2 <__aeabi_dcmpun+0x26>
 8020b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ba4:	d102      	bne.n	8020bac <__aeabi_dcmpun+0x20>
 8020ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020baa:	d102      	bne.n	8020bb2 <__aeabi_dcmpun+0x26>
 8020bac:	f04f 0000 	mov.w	r0, #0
 8020bb0:	4770      	bx	lr
 8020bb2:	f04f 0001 	mov.w	r0, #1
 8020bb6:	4770      	bx	lr

08020bb8 <__aeabi_d2iz>:
 8020bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020bc0:	d215      	bcs.n	8020bee <__aeabi_d2iz+0x36>
 8020bc2:	d511      	bpl.n	8020be8 <__aeabi_d2iz+0x30>
 8020bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bcc:	d912      	bls.n	8020bf4 <__aeabi_d2iz+0x3c>
 8020bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020bde:	fa23 f002 	lsr.w	r0, r3, r2
 8020be2:	bf18      	it	ne
 8020be4:	4240      	negne	r0, r0
 8020be6:	4770      	bx	lr
 8020be8:	f04f 0000 	mov.w	r0, #0
 8020bec:	4770      	bx	lr
 8020bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020bf2:	d105      	bne.n	8020c00 <__aeabi_d2iz+0x48>
 8020bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020bf8:	bf08      	it	eq
 8020bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020bfe:	4770      	bx	lr
 8020c00:	f04f 0000 	mov.w	r0, #0
 8020c04:	4770      	bx	lr
 8020c06:	bf00      	nop

08020c08 <__aeabi_d2uiz>:
 8020c08:	004a      	lsls	r2, r1, #1
 8020c0a:	d211      	bcs.n	8020c30 <__aeabi_d2uiz+0x28>
 8020c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020c10:	d211      	bcs.n	8020c36 <__aeabi_d2uiz+0x2e>
 8020c12:	d50d      	bpl.n	8020c30 <__aeabi_d2uiz+0x28>
 8020c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020c1c:	d40e      	bmi.n	8020c3c <__aeabi_d2uiz+0x34>
 8020c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8020c2e:	4770      	bx	lr
 8020c30:	f04f 0000 	mov.w	r0, #0
 8020c34:	4770      	bx	lr
 8020c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020c3a:	d102      	bne.n	8020c42 <__aeabi_d2uiz+0x3a>
 8020c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8020c40:	4770      	bx	lr
 8020c42:	f04f 0000 	mov.w	r0, #0
 8020c46:	4770      	bx	lr

08020c48 <__aeabi_d2f>:
 8020c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020c50:	bf24      	itt	cs
 8020c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020c5a:	d90d      	bls.n	8020c78 <__aeabi_d2f+0x30>
 8020c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020c70:	bf08      	it	eq
 8020c72:	f020 0001 	biceq.w	r0, r0, #1
 8020c76:	4770      	bx	lr
 8020c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020c7c:	d121      	bne.n	8020cc2 <__aeabi_d2f+0x7a>
 8020c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020c82:	bfbc      	itt	lt
 8020c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020c88:	4770      	bxlt	lr
 8020c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020c92:	f1c2 0218 	rsb	r2, r2, #24
 8020c96:	f1c2 0c20 	rsb	ip, r2, #32
 8020c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8020c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8020ca2:	bf18      	it	ne
 8020ca4:	f040 0001 	orrne.w	r0, r0, #1
 8020ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020cb4:	ea40 000c 	orr.w	r0, r0, ip
 8020cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8020cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020cc0:	e7cc      	b.n	8020c5c <__aeabi_d2f+0x14>
 8020cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020cc6:	d107      	bne.n	8020cd8 <__aeabi_d2f+0x90>
 8020cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020ccc:	bf1e      	ittt	ne
 8020cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020cd6:	4770      	bxne	lr
 8020cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020ce4:	4770      	bx	lr
 8020ce6:	bf00      	nop

08020ce8 <__aeabi_uldivmod>:
 8020ce8:	b953      	cbnz	r3, 8020d00 <__aeabi_uldivmod+0x18>
 8020cea:	b94a      	cbnz	r2, 8020d00 <__aeabi_uldivmod+0x18>
 8020cec:	2900      	cmp	r1, #0
 8020cee:	bf08      	it	eq
 8020cf0:	2800      	cmpeq	r0, #0
 8020cf2:	bf1c      	itt	ne
 8020cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8020cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8020cfc:	f000 b9a6 	b.w	802104c <__aeabi_idiv0>
 8020d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8020d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020d08:	f000 f83c 	bl	8020d84 <__udivmoddi4>
 8020d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020d14:	b004      	add	sp, #16
 8020d16:	4770      	bx	lr

08020d18 <__aeabi_d2lz>:
 8020d18:	b538      	push	{r3, r4, r5, lr}
 8020d1a:	2200      	movs	r2, #0
 8020d1c:	2300      	movs	r3, #0
 8020d1e:	4604      	mov	r4, r0
 8020d20:	460d      	mov	r5, r1
 8020d22:	f7ff ff0b 	bl	8020b3c <__aeabi_dcmplt>
 8020d26:	b928      	cbnz	r0, 8020d34 <__aeabi_d2lz+0x1c>
 8020d28:	4620      	mov	r0, r4
 8020d2a:	4629      	mov	r1, r5
 8020d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020d30:	f000 b80a 	b.w	8020d48 <__aeabi_d2ulz>
 8020d34:	4620      	mov	r0, r4
 8020d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8020d3a:	f000 f805 	bl	8020d48 <__aeabi_d2ulz>
 8020d3e:	4240      	negs	r0, r0
 8020d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020d44:	bd38      	pop	{r3, r4, r5, pc}
 8020d46:	bf00      	nop

08020d48 <__aeabi_d2ulz>:
 8020d48:	b5d0      	push	{r4, r6, r7, lr}
 8020d4a:	4b0c      	ldr	r3, [pc, #48]	; (8020d7c <__aeabi_d2ulz+0x34>)
 8020d4c:	2200      	movs	r2, #0
 8020d4e:	4606      	mov	r6, r0
 8020d50:	460f      	mov	r7, r1
 8020d52:	f7ff fc81 	bl	8020658 <__aeabi_dmul>
 8020d56:	f7ff ff57 	bl	8020c08 <__aeabi_d2uiz>
 8020d5a:	4604      	mov	r4, r0
 8020d5c:	f7ff fc02 	bl	8020564 <__aeabi_ui2d>
 8020d60:	4b07      	ldr	r3, [pc, #28]	; (8020d80 <__aeabi_d2ulz+0x38>)
 8020d62:	2200      	movs	r2, #0
 8020d64:	f7ff fc78 	bl	8020658 <__aeabi_dmul>
 8020d68:	4602      	mov	r2, r0
 8020d6a:	460b      	mov	r3, r1
 8020d6c:	4630      	mov	r0, r6
 8020d6e:	4639      	mov	r1, r7
 8020d70:	f7ff faba 	bl	80202e8 <__aeabi_dsub>
 8020d74:	f7ff ff48 	bl	8020c08 <__aeabi_d2uiz>
 8020d78:	4621      	mov	r1, r4
 8020d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8020d7c:	3df00000 	.word	0x3df00000
 8020d80:	41f00000 	.word	0x41f00000

08020d84 <__udivmoddi4>:
 8020d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d88:	9e08      	ldr	r6, [sp, #32]
 8020d8a:	460d      	mov	r5, r1
 8020d8c:	4604      	mov	r4, r0
 8020d8e:	460f      	mov	r7, r1
 8020d90:	2b00      	cmp	r3, #0
 8020d92:	d14a      	bne.n	8020e2a <__udivmoddi4+0xa6>
 8020d94:	428a      	cmp	r2, r1
 8020d96:	4694      	mov	ip, r2
 8020d98:	d965      	bls.n	8020e66 <__udivmoddi4+0xe2>
 8020d9a:	fab2 f382 	clz	r3, r2
 8020d9e:	b143      	cbz	r3, 8020db2 <__udivmoddi4+0x2e>
 8020da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8020da4:	f1c3 0220 	rsb	r2, r3, #32
 8020da8:	409f      	lsls	r7, r3
 8020daa:	fa20 f202 	lsr.w	r2, r0, r2
 8020dae:	4317      	orrs	r7, r2
 8020db0:	409c      	lsls	r4, r3
 8020db2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8020db6:	fa1f f58c 	uxth.w	r5, ip
 8020dba:	fbb7 f1fe 	udiv	r1, r7, lr
 8020dbe:	0c22      	lsrs	r2, r4, #16
 8020dc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8020dc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8020dc8:	fb01 f005 	mul.w	r0, r1, r5
 8020dcc:	4290      	cmp	r0, r2
 8020dce:	d90a      	bls.n	8020de6 <__udivmoddi4+0x62>
 8020dd0:	eb1c 0202 	adds.w	r2, ip, r2
 8020dd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8020dd8:	f080 811c 	bcs.w	8021014 <__udivmoddi4+0x290>
 8020ddc:	4290      	cmp	r0, r2
 8020dde:	f240 8119 	bls.w	8021014 <__udivmoddi4+0x290>
 8020de2:	3902      	subs	r1, #2
 8020de4:	4462      	add	r2, ip
 8020de6:	1a12      	subs	r2, r2, r0
 8020de8:	b2a4      	uxth	r4, r4
 8020dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8020dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8020df2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020df6:	fb00 f505 	mul.w	r5, r0, r5
 8020dfa:	42a5      	cmp	r5, r4
 8020dfc:	d90a      	bls.n	8020e14 <__udivmoddi4+0x90>
 8020dfe:	eb1c 0404 	adds.w	r4, ip, r4
 8020e02:	f100 32ff 	add.w	r2, r0, #4294967295
 8020e06:	f080 8107 	bcs.w	8021018 <__udivmoddi4+0x294>
 8020e0a:	42a5      	cmp	r5, r4
 8020e0c:	f240 8104 	bls.w	8021018 <__udivmoddi4+0x294>
 8020e10:	4464      	add	r4, ip
 8020e12:	3802      	subs	r0, #2
 8020e14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8020e18:	1b64      	subs	r4, r4, r5
 8020e1a:	2100      	movs	r1, #0
 8020e1c:	b11e      	cbz	r6, 8020e26 <__udivmoddi4+0xa2>
 8020e1e:	40dc      	lsrs	r4, r3
 8020e20:	2300      	movs	r3, #0
 8020e22:	e9c6 4300 	strd	r4, r3, [r6]
 8020e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e2a:	428b      	cmp	r3, r1
 8020e2c:	d908      	bls.n	8020e40 <__udivmoddi4+0xbc>
 8020e2e:	2e00      	cmp	r6, #0
 8020e30:	f000 80ed 	beq.w	802100e <__udivmoddi4+0x28a>
 8020e34:	2100      	movs	r1, #0
 8020e36:	e9c6 0500 	strd	r0, r5, [r6]
 8020e3a:	4608      	mov	r0, r1
 8020e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e40:	fab3 f183 	clz	r1, r3
 8020e44:	2900      	cmp	r1, #0
 8020e46:	d149      	bne.n	8020edc <__udivmoddi4+0x158>
 8020e48:	42ab      	cmp	r3, r5
 8020e4a:	d302      	bcc.n	8020e52 <__udivmoddi4+0xce>
 8020e4c:	4282      	cmp	r2, r0
 8020e4e:	f200 80f8 	bhi.w	8021042 <__udivmoddi4+0x2be>
 8020e52:	1a84      	subs	r4, r0, r2
 8020e54:	eb65 0203 	sbc.w	r2, r5, r3
 8020e58:	2001      	movs	r0, #1
 8020e5a:	4617      	mov	r7, r2
 8020e5c:	2e00      	cmp	r6, #0
 8020e5e:	d0e2      	beq.n	8020e26 <__udivmoddi4+0xa2>
 8020e60:	e9c6 4700 	strd	r4, r7, [r6]
 8020e64:	e7df      	b.n	8020e26 <__udivmoddi4+0xa2>
 8020e66:	b902      	cbnz	r2, 8020e6a <__udivmoddi4+0xe6>
 8020e68:	deff      	udf	#255	; 0xff
 8020e6a:	fab2 f382 	clz	r3, r2
 8020e6e:	2b00      	cmp	r3, #0
 8020e70:	f040 8090 	bne.w	8020f94 <__udivmoddi4+0x210>
 8020e74:	1a8a      	subs	r2, r1, r2
 8020e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020e7a:	fa1f fe8c 	uxth.w	lr, ip
 8020e7e:	2101      	movs	r1, #1
 8020e80:	fbb2 f5f7 	udiv	r5, r2, r7
 8020e84:	fb07 2015 	mls	r0, r7, r5, r2
 8020e88:	0c22      	lsrs	r2, r4, #16
 8020e8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8020e8e:	fb0e f005 	mul.w	r0, lr, r5
 8020e92:	4290      	cmp	r0, r2
 8020e94:	d908      	bls.n	8020ea8 <__udivmoddi4+0x124>
 8020e96:	eb1c 0202 	adds.w	r2, ip, r2
 8020e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8020e9e:	d202      	bcs.n	8020ea6 <__udivmoddi4+0x122>
 8020ea0:	4290      	cmp	r0, r2
 8020ea2:	f200 80cb 	bhi.w	802103c <__udivmoddi4+0x2b8>
 8020ea6:	4645      	mov	r5, r8
 8020ea8:	1a12      	subs	r2, r2, r0
 8020eaa:	b2a4      	uxth	r4, r4
 8020eac:	fbb2 f0f7 	udiv	r0, r2, r7
 8020eb0:	fb07 2210 	mls	r2, r7, r0, r2
 8020eb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8020eb8:	fb0e fe00 	mul.w	lr, lr, r0
 8020ebc:	45a6      	cmp	lr, r4
 8020ebe:	d908      	bls.n	8020ed2 <__udivmoddi4+0x14e>
 8020ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8020ec4:	f100 32ff 	add.w	r2, r0, #4294967295
 8020ec8:	d202      	bcs.n	8020ed0 <__udivmoddi4+0x14c>
 8020eca:	45a6      	cmp	lr, r4
 8020ecc:	f200 80bb 	bhi.w	8021046 <__udivmoddi4+0x2c2>
 8020ed0:	4610      	mov	r0, r2
 8020ed2:	eba4 040e 	sub.w	r4, r4, lr
 8020ed6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8020eda:	e79f      	b.n	8020e1c <__udivmoddi4+0x98>
 8020edc:	f1c1 0720 	rsb	r7, r1, #32
 8020ee0:	408b      	lsls	r3, r1
 8020ee2:	fa22 fc07 	lsr.w	ip, r2, r7
 8020ee6:	ea4c 0c03 	orr.w	ip, ip, r3
 8020eea:	fa05 f401 	lsl.w	r4, r5, r1
 8020eee:	fa20 f307 	lsr.w	r3, r0, r7
 8020ef2:	40fd      	lsrs	r5, r7
 8020ef4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8020ef8:	4323      	orrs	r3, r4
 8020efa:	fbb5 f8f9 	udiv	r8, r5, r9
 8020efe:	fa1f fe8c 	uxth.w	lr, ip
 8020f02:	fb09 5518 	mls	r5, r9, r8, r5
 8020f06:	0c1c      	lsrs	r4, r3, #16
 8020f08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8020f0c:	fb08 f50e 	mul.w	r5, r8, lr
 8020f10:	42a5      	cmp	r5, r4
 8020f12:	fa02 f201 	lsl.w	r2, r2, r1
 8020f16:	fa00 f001 	lsl.w	r0, r0, r1
 8020f1a:	d90b      	bls.n	8020f34 <__udivmoddi4+0x1b0>
 8020f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8020f20:	f108 3aff 	add.w	sl, r8, #4294967295
 8020f24:	f080 8088 	bcs.w	8021038 <__udivmoddi4+0x2b4>
 8020f28:	42a5      	cmp	r5, r4
 8020f2a:	f240 8085 	bls.w	8021038 <__udivmoddi4+0x2b4>
 8020f2e:	f1a8 0802 	sub.w	r8, r8, #2
 8020f32:	4464      	add	r4, ip
 8020f34:	1b64      	subs	r4, r4, r5
 8020f36:	b29d      	uxth	r5, r3
 8020f38:	fbb4 f3f9 	udiv	r3, r4, r9
 8020f3c:	fb09 4413 	mls	r4, r9, r3, r4
 8020f40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8020f44:	fb03 fe0e 	mul.w	lr, r3, lr
 8020f48:	45a6      	cmp	lr, r4
 8020f4a:	d908      	bls.n	8020f5e <__udivmoddi4+0x1da>
 8020f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8020f50:	f103 35ff 	add.w	r5, r3, #4294967295
 8020f54:	d26c      	bcs.n	8021030 <__udivmoddi4+0x2ac>
 8020f56:	45a6      	cmp	lr, r4
 8020f58:	d96a      	bls.n	8021030 <__udivmoddi4+0x2ac>
 8020f5a:	3b02      	subs	r3, #2
 8020f5c:	4464      	add	r4, ip
 8020f5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020f62:	fba3 9502 	umull	r9, r5, r3, r2
 8020f66:	eba4 040e 	sub.w	r4, r4, lr
 8020f6a:	42ac      	cmp	r4, r5
 8020f6c:	46c8      	mov	r8, r9
 8020f6e:	46ae      	mov	lr, r5
 8020f70:	d356      	bcc.n	8021020 <__udivmoddi4+0x29c>
 8020f72:	d053      	beq.n	802101c <__udivmoddi4+0x298>
 8020f74:	b156      	cbz	r6, 8020f8c <__udivmoddi4+0x208>
 8020f76:	ebb0 0208 	subs.w	r2, r0, r8
 8020f7a:	eb64 040e 	sbc.w	r4, r4, lr
 8020f7e:	fa04 f707 	lsl.w	r7, r4, r7
 8020f82:	40ca      	lsrs	r2, r1
 8020f84:	40cc      	lsrs	r4, r1
 8020f86:	4317      	orrs	r7, r2
 8020f88:	e9c6 7400 	strd	r7, r4, [r6]
 8020f8c:	4618      	mov	r0, r3
 8020f8e:	2100      	movs	r1, #0
 8020f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f94:	f1c3 0120 	rsb	r1, r3, #32
 8020f98:	fa02 fc03 	lsl.w	ip, r2, r3
 8020f9c:	fa20 f201 	lsr.w	r2, r0, r1
 8020fa0:	fa25 f101 	lsr.w	r1, r5, r1
 8020fa4:	409d      	lsls	r5, r3
 8020fa6:	432a      	orrs	r2, r5
 8020fa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020fac:	fa1f fe8c 	uxth.w	lr, ip
 8020fb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8020fb4:	fb07 1510 	mls	r5, r7, r0, r1
 8020fb8:	0c11      	lsrs	r1, r2, #16
 8020fba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8020fbe:	fb00 f50e 	mul.w	r5, r0, lr
 8020fc2:	428d      	cmp	r5, r1
 8020fc4:	fa04 f403 	lsl.w	r4, r4, r3
 8020fc8:	d908      	bls.n	8020fdc <__udivmoddi4+0x258>
 8020fca:	eb1c 0101 	adds.w	r1, ip, r1
 8020fce:	f100 38ff 	add.w	r8, r0, #4294967295
 8020fd2:	d22f      	bcs.n	8021034 <__udivmoddi4+0x2b0>
 8020fd4:	428d      	cmp	r5, r1
 8020fd6:	d92d      	bls.n	8021034 <__udivmoddi4+0x2b0>
 8020fd8:	3802      	subs	r0, #2
 8020fda:	4461      	add	r1, ip
 8020fdc:	1b49      	subs	r1, r1, r5
 8020fde:	b292      	uxth	r2, r2
 8020fe0:	fbb1 f5f7 	udiv	r5, r1, r7
 8020fe4:	fb07 1115 	mls	r1, r7, r5, r1
 8020fe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8020fec:	fb05 f10e 	mul.w	r1, r5, lr
 8020ff0:	4291      	cmp	r1, r2
 8020ff2:	d908      	bls.n	8021006 <__udivmoddi4+0x282>
 8020ff4:	eb1c 0202 	adds.w	r2, ip, r2
 8020ff8:	f105 38ff 	add.w	r8, r5, #4294967295
 8020ffc:	d216      	bcs.n	802102c <__udivmoddi4+0x2a8>
 8020ffe:	4291      	cmp	r1, r2
 8021000:	d914      	bls.n	802102c <__udivmoddi4+0x2a8>
 8021002:	3d02      	subs	r5, #2
 8021004:	4462      	add	r2, ip
 8021006:	1a52      	subs	r2, r2, r1
 8021008:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 802100c:	e738      	b.n	8020e80 <__udivmoddi4+0xfc>
 802100e:	4631      	mov	r1, r6
 8021010:	4630      	mov	r0, r6
 8021012:	e708      	b.n	8020e26 <__udivmoddi4+0xa2>
 8021014:	4639      	mov	r1, r7
 8021016:	e6e6      	b.n	8020de6 <__udivmoddi4+0x62>
 8021018:	4610      	mov	r0, r2
 802101a:	e6fb      	b.n	8020e14 <__udivmoddi4+0x90>
 802101c:	4548      	cmp	r0, r9
 802101e:	d2a9      	bcs.n	8020f74 <__udivmoddi4+0x1f0>
 8021020:	ebb9 0802 	subs.w	r8, r9, r2
 8021024:	eb65 0e0c 	sbc.w	lr, r5, ip
 8021028:	3b01      	subs	r3, #1
 802102a:	e7a3      	b.n	8020f74 <__udivmoddi4+0x1f0>
 802102c:	4645      	mov	r5, r8
 802102e:	e7ea      	b.n	8021006 <__udivmoddi4+0x282>
 8021030:	462b      	mov	r3, r5
 8021032:	e794      	b.n	8020f5e <__udivmoddi4+0x1da>
 8021034:	4640      	mov	r0, r8
 8021036:	e7d1      	b.n	8020fdc <__udivmoddi4+0x258>
 8021038:	46d0      	mov	r8, sl
 802103a:	e77b      	b.n	8020f34 <__udivmoddi4+0x1b0>
 802103c:	3d02      	subs	r5, #2
 802103e:	4462      	add	r2, ip
 8021040:	e732      	b.n	8020ea8 <__udivmoddi4+0x124>
 8021042:	4608      	mov	r0, r1
 8021044:	e70a      	b.n	8020e5c <__udivmoddi4+0xd8>
 8021046:	4464      	add	r4, ip
 8021048:	3802      	subs	r0, #2
 802104a:	e742      	b.n	8020ed2 <__udivmoddi4+0x14e>

0802104c <__aeabi_idiv0>:
 802104c:	4770      	bx	lr
 802104e:	bf00      	nop

08021050 <gos_platformDriverInit>:

/*
 * Function: gos_platformDriverInit
 */
gos_result_t gos_platformDriverInit (void_t)
{
 8021050:	b580      	push	{r7, lr}
 8021052:	b082      	sub	sp, #8
 8021054:	af00      	add	r7, sp, #0
	// Platform driver initialization result.
	gos_result_t platformDriverInitResult = GOS_SUCCESS;
 8021056:	2355      	movs	r3, #85	; 0x55
 8021058:	71fb      	strb	r3, [r7, #7]
		.sysmonDriverReceive             = drv_sysmonReceive,
		.timerDriverSysTimerGetValue     = drv_systimerGetValue,
	};

	// Driver init.
	if (HAL_Init() != HAL_OK)
 802105a:	f007 f9f1 	bl	8028440 <HAL_Init>
 802105e:	4603      	mov	r3, r0
 8021060:	2b00      	cmp	r3, #0
 8021062:	d001      	beq.n	8021068 <gos_platformDriverInit+0x18>
	{
		platformDriverInitResult = GOS_ERROR;
 8021064:	23ae      	movs	r3, #174	; 0xae
 8021066:	71fb      	strb	r3, [r7, #7]
	}

	platformDriverInitResult = driver_init();
 8021068:	f003 ff5e 	bl	8024f28 <driver_init>
 802106c:	4603      	mov	r3, r0
 802106e:	71fb      	strb	r3, [r7, #7]

	// Register kernel drivers.
	platformDriverInitResult &= gos_driverInit(&driverFunctions);
 8021070:	480c      	ldr	r0, [pc, #48]	; (80210a4 <gos_platformDriverInit+0x54>)
 8021072:	f019 f8df 	bl	803a234 <gos_driverInit>
 8021076:	4603      	mov	r3, r0
 8021078:	461a      	mov	r2, r3
 802107a:	79fb      	ldrb	r3, [r7, #7]
 802107c:	4013      	ands	r3, r2
 802107e:	71fb      	strb	r3, [r7, #7]

    if (platformDriverInitResult != GOS_SUCCESS)
 8021080:	79fb      	ldrb	r3, [r7, #7]
 8021082:	2b55      	cmp	r3, #85	; 0x55
 8021084:	d001      	beq.n	802108a <gos_platformDriverInit+0x3a>
	{
    	platformDriverInitResult = GOS_ERROR;
 8021086:	23ae      	movs	r3, #174	; 0xae
 8021088:	71fb      	strb	r3, [r7, #7]
	}

    SysTick->VAL = 0;
 802108a:	4b07      	ldr	r3, [pc, #28]	; (80210a8 <gos_platformDriverInit+0x58>)
 802108c:	2200      	movs	r2, #0
 802108e:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 8021090:	4b05      	ldr	r3, [pc, #20]	; (80210a8 <gos_platformDriverInit+0x58>)
 8021092:	2207      	movs	r2, #7
 8021094:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8021096:	b662      	cpsie	i
}
 8021098:	bf00      	nop

    __enable_irq();

	return platformDriverInitResult;
 802109a:	79fb      	ldrb	r3, [r7, #7]
}
 802109c:	4618      	mov	r0, r3
 802109e:	3708      	adds	r7, #8
 80210a0:	46bd      	mov	sp, r7
 80210a2:	bd80      	pop	{r7, pc}
 80210a4:	20000000 	.word	0x20000000
 80210a8:	e000e010 	.word	0xe000e010

080210ac <gos_userApplicationInit>:

/*
 * Function: gos_userApplicationInit
 */
gos_result_t gos_userApplicationInit (void_t)
{
 80210ac:	b580      	push	{r7, lr}
 80210ae:	b082      	sub	sp, #8
 80210b0:	af00      	add	r7, sp, #0
	gos_result_t appInitResult = GOS_SUCCESS;
 80210b2:	2355      	movs	r3, #85	; 0x55
 80210b4:	71fb      	strb	r3, [r7, #7]

	// Initialize device state manager for startup.
	appInitResult &= svl_dsmInit();
 80210b6:	f018 f8ff 	bl	80392b8 <svl_dsmInit>
 80210ba:	4603      	mov	r3, r0
 80210bc:	461a      	mov	r2, r3
 80210be:	79fb      	ldrb	r3, [r7, #7]
 80210c0:	4013      	ands	r3, r2
 80210c2:	71fb      	strb	r3, [r7, #7]

	// Create signals.
	appInitResult &= gos_signalCreate(&buttonPressedSignal);
 80210c4:	480f      	ldr	r0, [pc, #60]	; (8021104 <gos_userApplicationInit+0x58>)
 80210c6:	f01e fac5 	bl	803f654 <gos_signalCreate>
 80210ca:	4603      	mov	r3, r0
 80210cc:	461a      	mov	r2, r3
 80210ce:	79fb      	ldrb	r3, [r7, #7]
 80210d0:	4013      	ands	r3, r2
 80210d2:	71fb      	strb	r3, [r7, #7]

	// Subscribe to task delete signal.
	appInitResult &= gos_taskSubscribeDeleteSignal(APP_TaskDeleteSignalHandler);
 80210d4:	480c      	ldr	r0, [pc, #48]	; (8021108 <gos_userApplicationInit+0x5c>)
 80210d6:	f01c f89b 	bl	803d210 <gos_taskSubscribeDeleteSignal>
 80210da:	4603      	mov	r3, r0
 80210dc:	461a      	mov	r2, r3
 80210de:	79fb      	ldrb	r3, [r7, #7]
 80210e0:	4013      	ands	r3, r2
 80210e2:	71fb      	strb	r3, [r7, #7]

	// Test user-level warning.
	gos_errorHandler(GOS_ERROR_LEVEL_USER_WARNING, __func__, __LINE__, "Test user-level warning. Starting OS...");
 80210e4:	4b09      	ldr	r3, [pc, #36]	; (802110c <gos_userApplicationInit+0x60>)
 80210e6:	2250      	movs	r2, #80	; 0x50
 80210e8:	4909      	ldr	r1, [pc, #36]	; (8021110 <gos_userApplicationInit+0x64>)
 80210ea:	203a      	movs	r0, #58	; 0x3a
 80210ec:	f01c fa54 	bl	803d598 <gos_errorHandler>

	if (appInitResult != GOS_SUCCESS)
 80210f0:	79fb      	ldrb	r3, [r7, #7]
 80210f2:	2b55      	cmp	r3, #85	; 0x55
 80210f4:	d001      	beq.n	80210fa <gos_userApplicationInit+0x4e>
	{
		appInitResult = GOS_ERROR;
 80210f6:	23ae      	movs	r3, #174	; 0xae
 80210f8:	71fb      	strb	r3, [r7, #7]
	}

	return appInitResult;
 80210fa:	79fb      	ldrb	r3, [r7, #7]
}
 80210fc:	4618      	mov	r0, r3
 80210fe:	3708      	adds	r7, #8
 8021100:	46bd      	mov	sp, r7
 8021102:	bd80      	pop	{r7, pc}
 8021104:	200036e8 	.word	0x200036e8
 8021108:	08021115 	.word	0x08021115
 802110c:	080467e8 	.word	0x080467e8
 8021110:	08048b48 	.word	0x08048b48

08021114 <APP_TaskDeleteSignalHandler>:

/*
 * Function: APP_TaskDeleteSignalHandler
 */
GOS_STATIC void_t APP_TaskDeleteSignalHandler (gos_tid_t taskId)
{
 8021114:	b580      	push	{r7, lr}
 8021116:	b082      	sub	sp, #8
 8021118:	af00      	add	r7, sp, #0
 802111a:	4603      	mov	r3, r0
 802111c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Function code.
	 */
	if (gos_taskGetName(taskId, taskName) == GOS_SUCCESS)
 802111e:	88fb      	ldrh	r3, [r7, #6]
 8021120:	4907      	ldr	r1, [pc, #28]	; (8021140 <APP_TaskDeleteSignalHandler+0x2c>)
 8021122:	4618      	mov	r0, r3
 8021124:	f01b fe9c 	bl	803ce60 <gos_taskGetName>
 8021128:	4603      	mov	r3, r0
 802112a:	2b55      	cmp	r3, #85	; 0x55
 802112c:	d104      	bne.n	8021138 <APP_TaskDeleteSignalHandler+0x24>
	{
		gos_traceTraceFormatted(GOS_TRUE, "%s deleted!\r\n", taskName);
 802112e:	4a04      	ldr	r2, [pc, #16]	; (8021140 <APP_TaskDeleteSignalHandler+0x2c>)
 8021130:	4904      	ldr	r1, [pc, #16]	; (8021144 <APP_TaskDeleteSignalHandler+0x30>)
 8021132:	2036      	movs	r0, #54	; 0x36
 8021134:	f01f fd4c 	bl	8040bd0 <gos_traceTraceFormatted>
	}
}
 8021138:	bf00      	nop
 802113a:	3708      	adds	r7, #8
 802113c:	46bd      	mov	sp, r7
 802113e:	bd80      	pop	{r7, pc}
 8021140:	200036ec 	.word	0x200036ec
 8021144:	08046810 	.word	0x08046810

08021148 <APP_ButtonInit>:

/*
 * Function: APP_ButtonInit
 */
gos_result_t APP_ButtonInit (void_t)
{
 8021148:	b580      	push	{r7, lr}
 802114a:	b082      	sub	sp, #8
 802114c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t buttonInitResult = GOS_SUCCESS;
 802114e:	2355      	movs	r3, #85	; 0x55
 8021150:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	buttonInitResult = gos_taskRegister(&buttonTaskDesc, NULL);
 8021152:	2100      	movs	r1, #0
 8021154:	4804      	ldr	r0, [pc, #16]	; (8021168 <APP_ButtonInit+0x20>)
 8021156:	f01a fae9 	bl	803b72c <gos_taskRegister>
 802115a:	4603      	mov	r3, r0
 802115c:	71fb      	strb	r3, [r7, #7]

	return buttonInitResult;
 802115e:	79fb      	ldrb	r3, [r7, #7]
}
 8021160:	4618      	mov	r0, r3
 8021162:	3708      	adds	r7, #8
 8021164:	46bd      	mov	sp, r7
 8021166:	bd80      	pop	{r7, pc}
 8021168:	20000020 	.word	0x20000020

0802116c <APP_ButtonTask>:

/*
 * Function: APP_ButtonTask
 */
GOS_STATIC void_t APP_ButtonTask (void_t)
{
 802116c:	b580      	push	{r7, lr}
 802116e:	af00      	add	r7, sp, #0
	/*
	 * Function code.
	 */
	(void_t) gos_kernelSubscribeDumpReadySignal(APP_DumpReadySignalHandler);
 8021170:	4827      	ldr	r0, [pc, #156]	; (8021210 <APP_ButtonTask+0xa4>)
 8021172:	f019 fa2d 	bl	803a5d0 <gos_kernelSubscribeDumpReadySignal>

	/*
	 * Register interrupt callback for the user, menu, and X button.
	 */
	(void_t) APP_EX_IO_RegisterCallback(GPIO_EX_PIN_0, GPIO_EX_EDGE_RISING, APP_MenuButtonPressedInterruptCallback);
 8021176:	4a27      	ldr	r2, [pc, #156]	; (8021214 <APP_ButtonTask+0xa8>)
 8021178:	2101      	movs	r1, #1
 802117a:	2001      	movs	r0, #1
 802117c:	f000 ffc6 	bl	802210c <APP_EX_IO_RegisterCallback>
	(void_t) bsp_ioRegisterXButtonCallback(APP_XButtonPressedInterruptCallback);
 8021180:	4825      	ldr	r0, [pc, #148]	; (8021218 <APP_ButtonTask+0xac>)
 8021182:	f003 f9d1 	bl	8024528 <bsp_ioRegisterXButtonCallback>
	(void_t) bsp_ioRegisterUserButtonCallback(APP_ButtonPressedInterruptCallback);
 8021186:	4825      	ldr	r0, [pc, #148]	; (802121c <APP_ButtonTask+0xb0>)
 8021188:	f003 f9e8 	bl	802455c <bsp_ioRegisterUserButtonCallback>

	/*
	 * Suspend task.
	 */
	(void_t) gos_taskSuspend(buttonTaskDesc.taskId);
 802118c:	4b24      	ldr	r3, [pc, #144]	; (8021220 <APP_ButtonTask+0xb4>)
 802118e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021190:	4618      	mov	r0, r3
 8021192:	f01a fda9 	bl	803bce8 <gos_taskSuspend>

	for(;;)
	{
		if (buttonPressed == GOS_TRUE)
 8021196:	4b23      	ldr	r3, [pc, #140]	; (8021224 <APP_ButtonTask+0xb8>)
 8021198:	781b      	ldrb	r3, [r3, #0]
 802119a:	2b36      	cmp	r3, #54	; 0x36
 802119c:	d122      	bne.n	80211e4 <APP_ButtonTask+0x78>
		{
			buttonPressed = GOS_FALSE;
 802119e:	4b21      	ldr	r3, [pc, #132]	; (8021224 <APP_ButtonTask+0xb8>)
 80211a0:	2249      	movs	r2, #73	; 0x49
 80211a2:	701a      	strb	r2, [r3, #0]
			/*
			 * This point is reached when the task is resumed from
			 * the interrupt callback.
			 */
			if (progStat == 0)
 80211a4:	4b20      	ldr	r3, [pc, #128]	; (8021228 <APP_ButtonTask+0xbc>)
 80211a6:	781b      	ldrb	r3, [r3, #0]
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d111      	bne.n	80211d0 <APP_ButtonTask+0x64>
			{
				/*
				 * Invoke button pressed signal to notify other tasks
				 * that they should suspend their activity.
				 */
				(void_t) gos_signalInvoke(buttonPressedSignal, BUTTON_PRESSED_SIGNAL_SUSPEND);
 80211ac:	4b1f      	ldr	r3, [pc, #124]	; (802122c <APP_ButtonTask+0xc0>)
 80211ae:	781b      	ldrb	r3, [r3, #0]
 80211b0:	2100      	movs	r1, #0
 80211b2:	4618      	mov	r0, r3
 80211b4:	f01e fae4 	bl	803f780 <gos_signalInvoke>
				(void_t) gos_taskSleep(15);
 80211b8:	200f      	movs	r0, #15
 80211ba:	f01a fc49 	bl	803ba50 <gos_taskSleep>

				/*
				 * Block button during kernel dump to prevent
				 * restart before all the data is dumped on the screen.
				 */
				buttonBlocked = GOS_TRUE;
 80211be:	4b1c      	ldr	r3, [pc, #112]	; (8021230 <APP_ButtonTask+0xc4>)
 80211c0:	2236      	movs	r2, #54	; 0x36
 80211c2:	701a      	strb	r2, [r3, #0]

				/*
				 * Invoke kernel dump.
				 */
				gos_Dump();
 80211c4:	f01c f8e6 	bl	803d394 <gos_Dump>

				progStat = 1;
 80211c8:	4b17      	ldr	r3, [pc, #92]	; (8021228 <APP_ButtonTask+0xbc>)
 80211ca:	2201      	movs	r2, #1
 80211cc:	701a      	strb	r2, [r3, #0]
 80211ce:	e018      	b.n	8021202 <APP_ButtonTask+0x96>
			{
				/*
				 * Resume task activities by sending out the
				 * button pressed signal with a different sender ID.
				 */
				(void_t) gos_signalInvoke(buttonPressedSignal, BUTTON_PRESSED_SIGNAL_RESUME);
 80211d0:	4b16      	ldr	r3, [pc, #88]	; (802122c <APP_ButtonTask+0xc0>)
 80211d2:	781b      	ldrb	r3, [r3, #0]
 80211d4:	2101      	movs	r1, #1
 80211d6:	4618      	mov	r0, r3
 80211d8:	f01e fad2 	bl	803f780 <gos_signalInvoke>
				progStat = 0;
 80211dc:	4b12      	ldr	r3, [pc, #72]	; (8021228 <APP_ButtonTask+0xbc>)
 80211de:	2200      	movs	r2, #0
 80211e0:	701a      	strb	r2, [r3, #0]
 80211e2:	e00e      	b.n	8021202 <APP_ButtonTask+0x96>
			}
		}
		else
		{
			if (gos_triggerWait(&xButtonTrigger, 1, 0u) == GOS_SUCCESS)
 80211e4:	2200      	movs	r2, #0
 80211e6:	2101      	movs	r1, #1
 80211e8:	4812      	ldr	r0, [pc, #72]	; (8021234 <APP_ButtonTask+0xc8>)
 80211ea:	f01f feed 	bl	8040fc8 <gos_triggerWait>
 80211ee:	4603      	mov	r3, r0
 80211f0:	2b55      	cmp	r3, #85	; 0x55
 80211f2:	d106      	bne.n	8021202 <APP_ButtonTask+0x96>
			{
				(void_t) gos_traceTraceFormatted(GOS_TRUE, "X button pressed!\r\n");
 80211f4:	4910      	ldr	r1, [pc, #64]	; (8021238 <APP_ButtonTask+0xcc>)
 80211f6:	2036      	movs	r0, #54	; 0x36
 80211f8:	f01f fcea 	bl	8040bd0 <gos_traceTraceFormatted>
				(void_t) gos_triggerReset(&xButtonTrigger);
 80211fc:	480d      	ldr	r0, [pc, #52]	; (8021234 <APP_ButtonTask+0xc8>)
 80211fe:	f01f fe8b 	bl	8040f18 <gos_triggerReset>
			else
			{
				// Button was not pressed.
			}
		}
		(void_t) gos_taskSuspend(buttonTaskDesc.taskId);
 8021202:	4b07      	ldr	r3, [pc, #28]	; (8021220 <APP_ButtonTask+0xb4>)
 8021204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021206:	4618      	mov	r0, r3
 8021208:	f01a fd6e 	bl	803bce8 <gos_taskSuspend>
		if (buttonPressed == GOS_TRUE)
 802120c:	e7c3      	b.n	8021196 <APP_ButtonTask+0x2a>
 802120e:	bf00      	nop
 8021210:	0802123d 	.word	0x0802123d
 8021214:	080212b1 	.word	0x080212b1
 8021218:	080212c5 	.word	0x080212c5
 802121c:	0802125d 	.word	0x0802125d
 8021220:	20000020 	.word	0x20000020
 8021224:	2000001d 	.word	0x2000001d
 8021228:	2000370c 	.word	0x2000370c
 802122c:	200036e8 	.word	0x200036e8
 8021230:	2000001c 	.word	0x2000001c
 8021234:	20003710 	.word	0x20003710
 8021238:	08046820 	.word	0x08046820

0802123c <APP_DumpReadySignalHandler>:

/*
 * Function: APP_DumpReadySignalHandler
 */
GOS_STATIC void_t APP_DumpReadySignalHandler (gos_signalSenderId_t sender)
{
 802123c:	b480      	push	{r7}
 802123e:	b083      	sub	sp, #12
 8021240:	af00      	add	r7, sp, #0
 8021242:	4603      	mov	r3, r0
 8021244:	80fb      	strh	r3, [r7, #6]
	/*
	 * The last dump task invoked is the
	 * queue dump. When it is suspended,
	 * the button can be unblocked.
	 */
	buttonBlocked = GOS_FALSE;
 8021246:	4b04      	ldr	r3, [pc, #16]	; (8021258 <APP_DumpReadySignalHandler+0x1c>)
 8021248:	2249      	movs	r2, #73	; 0x49
 802124a:	701a      	strb	r2, [r3, #0]
}
 802124c:	bf00      	nop
 802124e:	370c      	adds	r7, #12
 8021250:	46bd      	mov	sp, r7
 8021252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021256:	4770      	bx	lr
 8021258:	2000001c 	.word	0x2000001c

0802125c <APP_ButtonPressedInterruptCallback>:

/*
 * Function: APP_ButtonPressedInterruptCallback
 */
GOS_STATIC void_t APP_ButtonPressedInterruptCallback (void_t)
{
 802125c:	b580      	push	{r7, lr}
 802125e:	af00      	add	r7, sp, #0
	/* Interrupt is privileged */
	/*
	 * Resume button task.
	 */
	if (buttonBlock.userButtonBlocked == GOS_FALSE)
 8021260:	4b0e      	ldr	r3, [pc, #56]	; (802129c <APP_ButtonPressedInterruptCallback+0x40>)
 8021262:	791b      	ldrb	r3, [r3, #4]
 8021264:	2b49      	cmp	r3, #73	; 0x49
 8021266:	d116      	bne.n	8021296 <APP_ButtonPressedInterruptCallback+0x3a>
	{
		buttonBlock.userButtonBlocked = GOS_TRUE;
 8021268:	4b0c      	ldr	r3, [pc, #48]	; (802129c <APP_ButtonPressedInterruptCallback+0x40>)
 802126a:	2236      	movs	r2, #54	; 0x36
 802126c:	711a      	strb	r2, [r3, #4]
		gos_taskResume(debouncerTaskId);
 802126e:	4b0c      	ldr	r3, [pc, #48]	; (80212a0 <APP_ButtonPressedInterruptCallback+0x44>)
 8021270:	881b      	ldrh	r3, [r3, #0]
 8021272:	4618      	mov	r0, r3
 8021274:	f01a fe5a 	bl	803bf2c <gos_taskResume>

		if (buttonBlocked == GOS_FALSE &&
 8021278:	4b0a      	ldr	r3, [pc, #40]	; (80212a4 <APP_ButtonPressedInterruptCallback+0x48>)
 802127a:	781b      	ldrb	r3, [r3, #0]
 802127c:	2b49      	cmp	r3, #73	; 0x49
 802127e:	d10a      	bne.n	8021296 <APP_ButtonPressedInterruptCallback+0x3a>
			gos_taskResume(buttonTaskDesc.taskId) == GOS_SUCCESS)
 8021280:	4b09      	ldr	r3, [pc, #36]	; (80212a8 <APP_ButtonPressedInterruptCallback+0x4c>)
 8021282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021284:	4618      	mov	r0, r3
 8021286:	f01a fe51 	bl	803bf2c <gos_taskResume>
 802128a:	4603      	mov	r3, r0
		if (buttonBlocked == GOS_FALSE &&
 802128c:	2b55      	cmp	r3, #85	; 0x55
 802128e:	d102      	bne.n	8021296 <APP_ButtonPressedInterruptCallback+0x3a>
		{
			buttonPressed = GOS_TRUE;
 8021290:	4b06      	ldr	r3, [pc, #24]	; (80212ac <APP_ButtonPressedInterruptCallback+0x50>)
 8021292:	2236      	movs	r2, #54	; 0x36
 8021294:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8021296:	bf00      	nop
 8021298:	bd80      	pop	{r7, pc}
 802129a:	bf00      	nop
 802129c:	200002cc 	.word	0x200002cc
 80212a0:	20003bf4 	.word	0x20003bf4
 80212a4:	2000001c 	.word	0x2000001c
 80212a8:	20000020 	.word	0x20000020
 80212ac:	2000001d 	.word	0x2000001d

080212b0 <APP_MenuButtonPressedInterruptCallback>:

/*
 * Function: APP_MenuButtonPressedInterruptCallback
 */
GOS_STATIC void_t APP_MenuButtonPressedInterruptCallback (void_t)
{
 80212b0:	b580      	push	{r7, lr}
 80212b2:	af00      	add	r7, sp, #0
	/*
	 * Function code.
	 */
	(void_t) gos_traceTraceFormatted(GOS_TRUE, "Menu button pressed!\r\n");
 80212b4:	4902      	ldr	r1, [pc, #8]	; (80212c0 <APP_MenuButtonPressedInterruptCallback+0x10>)
 80212b6:	2036      	movs	r0, #54	; 0x36
 80212b8:	f01f fc8a 	bl	8040bd0 <gos_traceTraceFormatted>
}
 80212bc:	bf00      	nop
 80212be:	bd80      	pop	{r7, pc}
 80212c0:	08046834 	.word	0x08046834

080212c4 <APP_XButtonPressedInterruptCallback>:

/*
 * Function: APP_XButtonPressedInterruptCallback
 */
GOS_STATIC void_t APP_XButtonPressedInterruptCallback (void_t)
{
 80212c4:	b580      	push	{r7, lr}
 80212c6:	af00      	add	r7, sp, #0
	/*
	 * Function code.
	 */
	if (buttonBlock.button1Blocked == GOS_FALSE)
 80212c8:	4b17      	ldr	r3, [pc, #92]	; (8021328 <APP_XButtonPressedInterruptCallback+0x64>)
 80212ca:	781b      	ldrb	r3, [r3, #0]
 80212cc:	2b49      	cmp	r3, #73	; 0x49
 80212ce:	d128      	bne.n	8021322 <APP_XButtonPressedInterruptCallback+0x5e>
	{
		buttonBlock.button1Blocked = GOS_TRUE;
 80212d0:	4b15      	ldr	r3, [pc, #84]	; (8021328 <APP_XButtonPressedInterruptCallback+0x64>)
 80212d2:	2236      	movs	r2, #54	; 0x36
 80212d4:	701a      	strb	r2, [r3, #0]
		(void_t) gos_taskResume(debouncerTaskId);
 80212d6:	4b15      	ldr	r3, [pc, #84]	; (802132c <APP_XButtonPressedInterruptCallback+0x68>)
 80212d8:	881b      	ldrh	r3, [r3, #0]
 80212da:	4618      	mov	r0, r3
 80212dc:	f01a fe26 	bl	803bf2c <gos_taskResume>
		(void_t) gos_triggerIncrement(&xButtonTrigger);
 80212e0:	4813      	ldr	r0, [pc, #76]	; (8021330 <APP_XButtonPressedInterruptCallback+0x6c>)
 80212e2:	f01f ff21 	bl	8041128 <gos_triggerIncrement>
		(void_t) gos_taskResume(buttonTaskDesc.taskId);
 80212e6:	4b13      	ldr	r3, [pc, #76]	; (8021334 <APP_XButtonPressedInterruptCallback+0x70>)
 80212e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80212ea:	4618      	mov	r0, r3
 80212ec:	f01a fe1e 	bl	803bf2c <gos_taskResume>

		if (cntr == 0)
 80212f0:	4b11      	ldr	r3, [pc, #68]	; (8021338 <APP_XButtonPressedInterruptCallback+0x74>)
 80212f2:	781b      	ldrb	r3, [r3, #0]
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d103      	bne.n	8021300 <APP_XButtonPressedInterruptCallback+0x3c>
		{
			svl_dsmSetState(DSM_STATE_NORMAL);
 80212f8:	2002      	movs	r0, #2
 80212fa:	f018 f9c5 	bl	8039688 <svl_dsmSetState>
 80212fe:	e00a      	b.n	8021316 <APP_XButtonPressedInterruptCallback+0x52>
		}
		else if (cntr == 1)
 8021300:	4b0d      	ldr	r3, [pc, #52]	; (8021338 <APP_XButtonPressedInterruptCallback+0x74>)
 8021302:	781b      	ldrb	r3, [r3, #0]
 8021304:	2b01      	cmp	r3, #1
 8021306:	d103      	bne.n	8021310 <APP_XButtonPressedInterruptCallback+0x4c>
		{
			svl_dsmSetState(DSM_STATE_REDUCED);
 8021308:	2005      	movs	r0, #5
 802130a:	f018 f9bd 	bl	8039688 <svl_dsmSetState>
 802130e:	e002      	b.n	8021316 <APP_XButtonPressedInterruptCallback+0x52>
		}
		else
		{
			svl_dsmSetState(DSM_STATE_FATAL);
 8021310:	2004      	movs	r0, #4
 8021312:	f018 f9b9 	bl	8039688 <svl_dsmSetState>
		}

		cntr++;
 8021316:	4b08      	ldr	r3, [pc, #32]	; (8021338 <APP_XButtonPressedInterruptCallback+0x74>)
 8021318:	781b      	ldrb	r3, [r3, #0]
 802131a:	3301      	adds	r3, #1
 802131c:	b2da      	uxtb	r2, r3
 802131e:	4b06      	ldr	r3, [pc, #24]	; (8021338 <APP_XButtonPressedInterruptCallback+0x74>)
 8021320:	701a      	strb	r2, [r3, #0]
	}
}
 8021322:	bf00      	nop
 8021324:	bd80      	pop	{r7, pc}
 8021326:	bf00      	nop
 8021328:	200002cc 	.word	0x200002cc
 802132c:	20003bf4 	.word	0x20003bf4
 8021330:	20003710 	.word	0x20003710
 8021334:	20000020 	.word	0x20000020
 8021338:	2000371c 	.word	0x2000371c

0802133c <APP_CounterInit>:

/*
 * Function: APP_CounterInit
 */
gos_result_t APP_CounterInit (void_t)
{
 802133c:	b580      	push	{r7, lr}
 802133e:	b082      	sub	sp, #8
 8021340:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t counterInitResult = GOS_SUCCESS;
 8021342:	2355      	movs	r3, #85	; 0x55
 8021344:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	counterInitResult &= gos_taskRegister(&counterTaskDesc, &counterTaskId);
 8021346:	4909      	ldr	r1, [pc, #36]	; (802136c <APP_CounterInit+0x30>)
 8021348:	4809      	ldr	r0, [pc, #36]	; (8021370 <APP_CounterInit+0x34>)
 802134a:	f01a f9ef 	bl	803b72c <gos_taskRegister>
 802134e:	4603      	mov	r3, r0
 8021350:	461a      	mov	r2, r3
 8021352:	79fb      	ldrb	r3, [r7, #7]
 8021354:	4013      	ands	r3, r2
 8021356:	71fb      	strb	r3, [r7, #7]

	if (counterInitResult != GOS_SUCCESS)
 8021358:	79fb      	ldrb	r3, [r7, #7]
 802135a:	2b55      	cmp	r3, #85	; 0x55
 802135c:	d001      	beq.n	8021362 <APP_CounterInit+0x26>
	{
		counterInitResult = GOS_ERROR;
 802135e:	23ae      	movs	r3, #174	; 0xae
 8021360:	71fb      	strb	r3, [r7, #7]
	}

	return counterInitResult;
 8021362:	79fb      	ldrb	r3, [r7, #7]
}
 8021364:	4618      	mov	r0, r3
 8021366:	3708      	adds	r7, #8
 8021368:	46bd      	mov	sp, r7
 802136a:	bd80      	pop	{r7, pc}
 802136c:	2000371e 	.word	0x2000371e
 8021370:	2000008c 	.word	0x2000008c

08021374 <APP_CounterTask>:

/*
 * Function: APP_CounterTask
 */
GOS_STATIC void_t APP_CounterTask (void_t)
{
 8021374:	b580      	push	{r7, lr}
 8021376:	b082      	sub	sp, #8
 8021378:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u16_t counter = 0;
 802137a:	2300      	movs	r3, #0
 802137c:	80fb      	strh	r3, [r7, #6]
	 * Function code.
	 */
	/*
	 * Subscribe to the button pressed signal to suspend the counter task and process.
	 */
	(void_t) gos_signalSubscribe(buttonPressedSignal, APP_ButtonPressedSignalHandler, GOS_PRIV_TASK_MANIPULATE);
 802137e:	4b0c      	ldr	r3, [pc, #48]	; (80213b0 <APP_CounterTask+0x3c>)
 8021380:	781b      	ldrb	r3, [r3, #0]
 8021382:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8021386:	490b      	ldr	r1, [pc, #44]	; (80213b4 <APP_CounterTask+0x40>)
 8021388:	4618      	mov	r0, r3
 802138a:	f01e f9a1 	bl	803f6d0 <gos_signalSubscribe>

	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 802138e:	2001      	movs	r0, #1
 8021390:	f018 f964 	bl	803965c <svl_dsmWaitForState>
	for(;;)
	{
		/*
		 * Increase the counter variable and print the current value to the log output.
		 */
		(void_t) gos_traceTraceFormatted(GOS_TRUE, "Counter task: %u\r\n", counter++);
 8021394:	88fb      	ldrh	r3, [r7, #6]
 8021396:	1c5a      	adds	r2, r3, #1
 8021398:	80fa      	strh	r2, [r7, #6]
 802139a:	461a      	mov	r2, r3
 802139c:	4906      	ldr	r1, [pc, #24]	; (80213b8 <APP_CounterTask+0x44>)
 802139e:	2036      	movs	r0, #54	; 0x36
 80213a0:	f01f fc16 	bl	8040bd0 <gos_traceTraceFormatted>
		(void_t) gos_taskSleep(COUNTER_TASK_PERIOD);
 80213a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80213a8:	f01a fb52 	bl	803ba50 <gos_taskSleep>
		(void_t) gos_traceTraceFormatted(GOS_TRUE, "Counter task: %u\r\n", counter++);
 80213ac:	e7f2      	b.n	8021394 <APP_CounterTask+0x20>
 80213ae:	bf00      	nop
 80213b0:	200036e8 	.word	0x200036e8
 80213b4:	080213bd 	.word	0x080213bd
 80213b8:	0804684c 	.word	0x0804684c

080213bc <APP_ButtonPressedSignalHandler>:

/*
 * Function: APP_ButtonPressedSignalHandler
 */
GOS_STATIC void_t APP_ButtonPressedSignalHandler (gos_signalSenderId_t senderId)
{
 80213bc:	b580      	push	{r7, lr}
 80213be:	b082      	sub	sp, #8
 80213c0:	af00      	add	r7, sp, #0
 80213c2:	4603      	mov	r3, r0
 80213c4:	80fb      	strh	r3, [r7, #6]
	 * Function code.
	 */
	/*
	 * Suspend or resume the counter task and process based on the program state.
	 */
	if (senderId == BUTTON_PRESSED_SIGNAL_SUSPEND)
 80213c6:	88fb      	ldrh	r3, [r7, #6]
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	d105      	bne.n	80213d8 <APP_ButtonPressedSignalHandler+0x1c>
	{
		(void_t) gos_taskSuspend(counterTaskId);
 80213cc:	4b07      	ldr	r3, [pc, #28]	; (80213ec <APP_ButtonPressedSignalHandler+0x30>)
 80213ce:	881b      	ldrh	r3, [r3, #0]
 80213d0:	4618      	mov	r0, r3
 80213d2:	f01a fc89 	bl	803bce8 <gos_taskSuspend>
	}
	else
	{
		(void_t) gos_taskResume(counterTaskId);
	}
}
 80213d6:	e004      	b.n	80213e2 <APP_ButtonPressedSignalHandler+0x26>
		(void_t) gos_taskResume(counterTaskId);
 80213d8:	4b04      	ldr	r3, [pc, #16]	; (80213ec <APP_ButtonPressedSignalHandler+0x30>)
 80213da:	881b      	ldrh	r3, [r3, #0]
 80213dc:	4618      	mov	r0, r3
 80213de:	f01a fda5 	bl	803bf2c <gos_taskResume>
}
 80213e2:	bf00      	nop
 80213e4:	3708      	adds	r7, #8
 80213e6:	46bd      	mov	sp, r7
 80213e8:	bd80      	pop	{r7, pc}
 80213ea:	bf00      	nop
 80213ec:	2000371e 	.word	0x2000371e

080213f0 <APP_DACInit>:

/*
 * Function: APP_DACInit
 */
gos_result_t APP_DACInit (void_t)
{
 80213f0:	b580      	push	{r7, lr}
 80213f2:	b082      	sub	sp, #8
 80213f4:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t dacInitResult = GOS_SUCCESS;
 80213f6:	2355      	movs	r3, #85	; 0x55
 80213f8:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	dacInitResult &= gos_taskRegister(&dacTaskDesc, NULL);
 80213fa:	2100      	movs	r1, #0
 80213fc:	480d      	ldr	r0, [pc, #52]	; (8021434 <APP_DACInit+0x44>)
 80213fe:	f01a f995 	bl	803b72c <gos_taskRegister>
 8021402:	4603      	mov	r3, r0
 8021404:	461a      	mov	r2, r3
 8021406:	79fb      	ldrb	r3, [r7, #7]
 8021408:	4013      	ands	r3, r2
 802140a:	71fb      	strb	r3, [r7, #7]
	dacInitResult &= gos_taskRegister(&modulateTaskDesc, NULL);
 802140c:	2100      	movs	r1, #0
 802140e:	480a      	ldr	r0, [pc, #40]	; (8021438 <APP_DACInit+0x48>)
 8021410:	f01a f98c 	bl	803b72c <gos_taskRegister>
 8021414:	4603      	mov	r3, r0
 8021416:	461a      	mov	r2, r3
 8021418:	79fb      	ldrb	r3, [r7, #7]
 802141a:	4013      	ands	r3, r2
 802141c:	71fb      	strb	r3, [r7, #7]

	if (dacInitResult != GOS_SUCCESS)
 802141e:	79fb      	ldrb	r3, [r7, #7]
 8021420:	2b55      	cmp	r3, #85	; 0x55
 8021422:	d001      	beq.n	8021428 <APP_DACInit+0x38>
	{
		dacInitResult = GOS_ERROR;
 8021424:	23ae      	movs	r3, #174	; 0xae
 8021426:	71fb      	strb	r3, [r7, #7]
	}

	return dacInitResult;
 8021428:	79fb      	ldrb	r3, [r7, #7]
}
 802142a:	4618      	mov	r0, r3
 802142c:	3708      	adds	r7, #8
 802142e:	46bd      	mov	sp, r7
 8021430:	bd80      	pop	{r7, pc}
 8021432:	bf00      	nop
 8021434:	200000fc 	.word	0x200000fc
 8021438:	20000168 	.word	0x20000168

0802143c <APP_DAC_ChangeFrequency>:

/*
 * Function: APP_DAC_ChangeFrequency
 */
gos_result_t APP_DAC_ChangeFrequency (u32_t freq)
{
 802143c:	b580      	push	{r7, lr}
 802143e:	b082      	sub	sp, #8
 8021440:	af00      	add	r7, sp, #0
 8021442:	6078      	str	r0, [r7, #4]
	tmrConfig[TMR_CFG_DAC1].period = FREQ_TO_PERIOD(freq);
 8021444:	687b      	ldr	r3, [r7, #4]
 8021446:	ee07 3a90 	vmov	s15, r3
 802144a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802144e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8021474 <APP_DAC_ChangeFrequency+0x38>
 8021452:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802145a:	ee17 3a90 	vmov	r3, s15
 802145e:	3b01      	subs	r3, #1
 8021460:	4a05      	ldr	r2, [pc, #20]	; (8021478 <APP_DAC_ChangeFrequency+0x3c>)
 8021462:	6113      	str	r3, [r2, #16]
	return drv_tmrInitInstance(TMR_CFG_DAC1);
 8021464:	2000      	movs	r0, #0
 8021466:	f016 fcb3 	bl	8037dd0 <drv_tmrInitInstance>
 802146a:	4603      	mov	r3, r0
}
 802146c:	4618      	mov	r0, r3
 802146e:	3708      	adds	r7, #8
 8021470:	46bd      	mov	sp, r7
 8021472:	bd80      	pop	{r7, pc}
 8021474:	4b189680 	.word	0x4b189680
 8021478:	20001880 	.word	0x20001880

0802147c <APP_DAC_PlayBeep>:

/*
 * Function: APP_DAC_PlayBeep
 */
void_t APP_DAC_PlayBeep (void_t)
{
 802147c:	b580      	push	{r7, lr}
 802147e:	af00      	add	r7, sp, #0
	APP_DAC_ChangeFrequency(1600 * ARRAY_SIZE);
 8021480:	4805      	ldr	r0, [pc, #20]	; (8021498 <APP_DAC_PlayBeep+0x1c>)
 8021482:	f7ff ffdb 	bl	802143c <APP_DAC_ChangeFrequency>
	gos_taskSleep(100);
 8021486:	2064      	movs	r0, #100	; 0x64
 8021488:	f01a fae2 	bl	803ba50 <gos_taskSleep>
	APP_DAC_ChangeFrequency(0);
 802148c:	2000      	movs	r0, #0
 802148e:	f7ff ffd5 	bl	802143c <APP_DAC_ChangeFrequency>
}
 8021492:	bf00      	nop
 8021494:	bd80      	pop	{r7, pc}
 8021496:	bf00      	nop
 8021498:	00027100 	.word	0x00027100

0802149c <APP_DAC_Task>:

/*
 * Function: APP_DAC_Task
 */
GOS_STATIC void_t APP_DAC_Task (void_t)
{
 802149c:	b580      	push	{r7, lr}
 802149e:	b082      	sub	sp, #8
 80214a0:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_messageId_t selector [] = { MSG_READ_READY, 0 };
 80214a2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80214a6:	803b      	strh	r3, [r7, #0]
 80214a8:	2300      	movs	r3, #0
 80214aa:	807b      	strh	r3, [r7, #2]
	 * Function code.
	 */
	/*
	 * Register shell commands.
	 */
	(void_t) gos_shellRegisterCommands(commands, sizeof(commands));
 80214ac:	218c      	movs	r1, #140	; 0x8c
 80214ae:	4821      	ldr	r0, [pc, #132]	; (8021534 <APP_DAC_Task+0x98>)
 80214b0:	f01d fc46 	bl	803ed40 <gos_shellRegisterCommands>

	/*
	 * Start DAC and set frequency to 0 (turn the sound off).
	 */
	(void_t) drv_dacStart(DRV_DAC_INSTANCE_1, sound_lut, ARRAY_SIZE);
 80214b4:	2264      	movs	r2, #100	; 0x64
 80214b6:	4920      	ldr	r1, [pc, #128]	; (8021538 <APP_DAC_Task+0x9c>)
 80214b8:	2000      	movs	r0, #0
 80214ba:	f014 f96d 	bl	8035798 <drv_dacStart>
	APP_DAC_ChangeFrequency(0);
 80214be:	2000      	movs	r0, #0
 80214c0:	f7ff ffbc 	bl	802143c <APP_DAC_ChangeFrequency>

	/*
	 * Default sound.
	 */
	APP_DAC_GetSquareVal();
 80214c4:	f000 f9e0 	bl	8021888 <APP_DAC_GetSquareVal>

	/*
	 *  Subscribe to task delete signal.
	 */
	(void_t) gos_taskSubscribeDeleteSignal(APP_DAC_TaskDeleteSignalHandler);
 80214c8:	481c      	ldr	r0, [pc, #112]	; (802153c <APP_DAC_Task+0xa0>)
 80214ca:	f01b fea1 	bl	803d210 <gos_taskSubscribeDeleteSignal>
	memcpy(songSaveMsg.messageBytes, &songSave, sizeof(songSave));

	gos_messageTx(&songSaveMsg);
#endif

	APP_DAC_PlayBeep();
 80214ce:	f7ff ffd5 	bl	802147c <APP_DAC_PlayBeep>
	{
		/*
		 * Wait for a read ready message. When that message is received the song is ready
		 * for playing. Play it with all sounds.
		 */
		if (gos_messageRx(selector, &readReadyMsg, GOS_MESSAGE_ENDLESS_TMO) == GOS_SUCCESS)
 80214d2:	463b      	mov	r3, r7
 80214d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80214d8:	4919      	ldr	r1, [pc, #100]	; (8021540 <APP_DAC_Task+0xa4>)
 80214da:	4618      	mov	r0, r3
 80214dc:	f01c fcb4 	bl	803de48 <gos_messageRx>
 80214e0:	4603      	mov	r3, r0
 80214e2:	2b55      	cmp	r3, #85	; 0x55
 80214e4:	d1f5      	bne.n	80214d2 <APP_DAC_Task+0x36>
		{
			playing = GOS_TRUE;
 80214e6:	4b17      	ldr	r3, [pc, #92]	; (8021544 <APP_DAC_Task+0xa8>)
 80214e8:	2236      	movs	r2, #54	; 0x36
 80214ea:	701a      	strb	r2, [r3, #0]
			do
			{
				for (int i = 0; i < readSong.songSize; i++)
 80214ec:	2300      	movs	r3, #0
 80214ee:	607b      	str	r3, [r7, #4]
 80214f0:	e013      	b.n	802151a <APP_DAC_Task+0x7e>
				{
					//dac_driver_set_freq((u32_t)(freqLut[readSong.notes[i]]));
					APP_DAC_ChangeFrequency((u32_t)(freqLut[readSong.notes[i]]));
 80214f2:	4a15      	ldr	r2, [pc, #84]	; (8021548 <APP_DAC_Task+0xac>)
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	4413      	add	r3, r2
 80214f8:	3308      	adds	r3, #8
 80214fa:	781b      	ldrb	r3, [r3, #0]
 80214fc:	461a      	mov	r2, r3
 80214fe:	4b13      	ldr	r3, [pc, #76]	; (802154c <APP_DAC_Task+0xb0>)
 8021500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021504:	4618      	mov	r0, r3
 8021506:	f7ff ff99 	bl	802143c <APP_DAC_ChangeFrequency>
					gos_taskSleep(readSong.tempo);
 802150a:	4b0f      	ldr	r3, [pc, #60]	; (8021548 <APP_DAC_Task+0xac>)
 802150c:	681b      	ldr	r3, [r3, #0]
 802150e:	4618      	mov	r0, r3
 8021510:	f01a fa9e 	bl	803ba50 <gos_taskSleep>
				for (int i = 0; i < readSong.songSize; i++)
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	3301      	adds	r3, #1
 8021518:	607b      	str	r3, [r7, #4]
 802151a:	4b0b      	ldr	r3, [pc, #44]	; (8021548 <APP_DAC_Task+0xac>)
 802151c:	685a      	ldr	r2, [r3, #4]
 802151e:	687b      	ldr	r3, [r7, #4]
 8021520:	429a      	cmp	r2, r3
 8021522:	d8e6      	bhi.n	80214f2 <APP_DAC_Task+0x56>
				}
			}
			while (loopPlay == GOS_TRUE);
 8021524:	4b0a      	ldr	r3, [pc, #40]	; (8021550 <APP_DAC_Task+0xb4>)
 8021526:	781b      	ldrb	r3, [r3, #0]
 8021528:	2b36      	cmp	r3, #54	; 0x36
 802152a:	d0df      	beq.n	80214ec <APP_DAC_Task+0x50>
			playing = GOS_FALSE;
 802152c:	4b05      	ldr	r3, [pc, #20]	; (8021544 <APP_DAC_Task+0xa8>)
 802152e:	2249      	movs	r2, #73	; 0x49
 8021530:	701a      	strb	r2, [r3, #0]
		if (gos_messageRx(selector, &readReadyMsg, GOS_MESSAGE_ENDLESS_TMO) == GOS_SUCCESS)
 8021532:	e7ce      	b.n	80214d2 <APP_DAC_Task+0x36>
 8021534:	200001d4 	.word	0x200001d4
 8021538:	20003720 	.word	0x20003720
 802153c:	0802195d 	.word	0x0802195d
 8021540:	20003b4c 	.word	0x20003b4c
 8021544:	200000f7 	.word	0x200000f7
 8021548:	20003a40 	.word	0x20003a40
 802154c:	08048b60 	.word	0x08048b60
 8021550:	200000f6 	.word	0x200000f6
 8021554:	00000000 	.word	0x00000000

08021558 <APP_DAC_ModulateTask>:

/*
 * Function: APP_DAC_ModulateTask
 */
GOS_STATIC void_t APP_DAC_ModulateTask (void_t)
{
 8021558:	b580      	push	{r7, lr}
 802155a:	b084      	sub	sp, #16
 802155c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u32_t   index = 0u;
 802155e:	2300      	movs	r3, #0
 8021560:	60fb      	str	r3, [r7, #12]
	u16_t   x     = 0u;
 8021562:	2300      	movs	r3, #0
 8021564:	817b      	strh	r3, [r7, #10]
	float_t mul   = 0;
 8021566:	f04f 0300 	mov.w	r3, #0
 802156a:	607b      	str	r3, [r7, #4]
	u8_t    dir   = 0;
 802156c:	2300      	movs	r3, #0
 802156e:	727b      	strb	r3, [r7, #9]

	/*
	 * Function code.
	 */
	(void_t) gos_taskSuspend(modulateTaskDesc.taskId);
 8021570:	4b69      	ldr	r3, [pc, #420]	; (8021718 <APP_DAC_ModulateTask+0x1c0>)
 8021572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021574:	4618      	mov	r0, r3
 8021576:	f01a fbb7 	bl	803bce8 <gos_taskSuspend>

	for (;;)
	{
		if (modType == MOD_SINE)
 802157a:	4b68      	ldr	r3, [pc, #416]	; (802171c <APP_DAC_ModulateTask+0x1c4>)
 802157c:	781b      	ldrb	r3, [r3, #0]
 802157e:	2b00      	cmp	r3, #0
 8021580:	d15a      	bne.n	8021638 <APP_DAC_ModulateTask+0xe0>
		{
			mul = 0.3 * (sin(x * PI / 180) + 1.35);
 8021582:	897b      	ldrh	r3, [r7, #10]
 8021584:	4618      	mov	r0, r3
 8021586:	f7fe fffd 	bl	8020584 <__aeabi_i2d>
 802158a:	a35b      	add	r3, pc, #364	; (adr r3, 80216f8 <APP_DAC_ModulateTask+0x1a0>)
 802158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021590:	f7ff f862 	bl	8020658 <__aeabi_dmul>
 8021594:	4602      	mov	r2, r0
 8021596:	460b      	mov	r3, r1
 8021598:	4610      	mov	r0, r2
 802159a:	4619      	mov	r1, r3
 802159c:	f04f 0200 	mov.w	r2, #0
 80215a0:	4b5f      	ldr	r3, [pc, #380]	; (8021720 <APP_DAC_ModulateTask+0x1c8>)
 80215a2:	f7ff f983 	bl	80208ac <__aeabi_ddiv>
 80215a6:	4602      	mov	r2, r0
 80215a8:	460b      	mov	r3, r1
 80215aa:	ec43 2b17 	vmov	d7, r2, r3
 80215ae:	eeb0 0a47 	vmov.f32	s0, s14
 80215b2:	eef0 0a67 	vmov.f32	s1, s15
 80215b6:	f024 f8cb 	bl	8045750 <sin>
 80215ba:	ec51 0b10 	vmov	r0, r1, d0
 80215be:	a350      	add	r3, pc, #320	; (adr r3, 8021700 <APP_DAC_ModulateTask+0x1a8>)
 80215c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215c4:	f7fe fe92 	bl	80202ec <__adddf3>
 80215c8:	4602      	mov	r2, r0
 80215ca:	460b      	mov	r3, r1
 80215cc:	4610      	mov	r0, r2
 80215ce:	4619      	mov	r1, r3
 80215d0:	a34d      	add	r3, pc, #308	; (adr r3, 8021708 <APP_DAC_ModulateTask+0x1b0>)
 80215d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80215d6:	f7ff f83f 	bl	8020658 <__aeabi_dmul>
 80215da:	4602      	mov	r2, r0
 80215dc:	460b      	mov	r3, r1
 80215de:	4610      	mov	r0, r2
 80215e0:	4619      	mov	r1, r3
 80215e2:	f7ff fb31 	bl	8020c48 <__aeabi_d2f>
 80215e6:	4603      	mov	r3, r0
 80215e8:	607b      	str	r3, [r7, #4]
			for (index = 0u; index < ARRAY_SIZE; index++)
 80215ea:	2300      	movs	r3, #0
 80215ec:	60fb      	str	r3, [r7, #12]
 80215ee:	e016      	b.n	802161e <APP_DAC_ModulateTask+0xc6>
			{
				sound_lut[index] = (u32_t)((float_t)sound_lut2[index] * mul);
 80215f0:	4a4c      	ldr	r2, [pc, #304]	; (8021724 <APP_DAC_ModulateTask+0x1cc>)
 80215f2:	68fb      	ldr	r3, [r7, #12]
 80215f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80215f8:	ee07 3a90 	vmov	s15, r3
 80215fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8021600:	edd7 7a01 	vldr	s15, [r7, #4]
 8021604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802160c:	ee17 1a90 	vmov	r1, s15
 8021610:	4a45      	ldr	r2, [pc, #276]	; (8021728 <APP_DAC_ModulateTask+0x1d0>)
 8021612:	68fb      	ldr	r3, [r7, #12]
 8021614:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (index = 0u; index < ARRAY_SIZE; index++)
 8021618:	68fb      	ldr	r3, [r7, #12]
 802161a:	3301      	adds	r3, #1
 802161c:	60fb      	str	r3, [r7, #12]
 802161e:	68fb      	ldr	r3, [r7, #12]
 8021620:	2b63      	cmp	r3, #99	; 0x63
 8021622:	d9e5      	bls.n	80215f0 <APP_DAC_ModulateTask+0x98>
			}

			x+=20;
 8021624:	897b      	ldrh	r3, [r7, #10]
 8021626:	3314      	adds	r3, #20
 8021628:	817b      	strh	r3, [r7, #10]

			if (x >= 360)
 802162a:	897b      	ldrh	r3, [r7, #10]
 802162c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8021630:	d35b      	bcc.n	80216ea <APP_DAC_ModulateTask+0x192>
			{
				x = 0u;
 8021632:	2300      	movs	r3, #0
 8021634:	817b      	strh	r3, [r7, #10]
 8021636:	e058      	b.n	80216ea <APP_DAC_ModulateTask+0x192>
			}
		}
		else if (modType == MOD_TRIANGLE)
 8021638:	4b38      	ldr	r3, [pc, #224]	; (802171c <APP_DAC_ModulateTask+0x1c4>)
 802163a:	781b      	ldrb	r3, [r3, #0]
 802163c:	2b01      	cmp	r3, #1
 802163e:	d154      	bne.n	80216ea <APP_DAC_ModulateTask+0x192>
		{
			mul = 0.4 * (((float_t)x / 360) + 1.35);
 8021640:	897b      	ldrh	r3, [r7, #10]
 8021642:	ee07 3a90 	vmov	s15, r3
 8021646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802164a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 802172c <APP_DAC_ModulateTask+0x1d4>
 802164e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8021652:	ee16 0a90 	vmov	r0, s13
 8021656:	f7fe ffa7 	bl	80205a8 <__aeabi_f2d>
 802165a:	a329      	add	r3, pc, #164	; (adr r3, 8021700 <APP_DAC_ModulateTask+0x1a8>)
 802165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021660:	f7fe fe44 	bl	80202ec <__adddf3>
 8021664:	4602      	mov	r2, r0
 8021666:	460b      	mov	r3, r1
 8021668:	4610      	mov	r0, r2
 802166a:	4619      	mov	r1, r3
 802166c:	a328      	add	r3, pc, #160	; (adr r3, 8021710 <APP_DAC_ModulateTask+0x1b8>)
 802166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021672:	f7fe fff1 	bl	8020658 <__aeabi_dmul>
 8021676:	4602      	mov	r2, r0
 8021678:	460b      	mov	r3, r1
 802167a:	4610      	mov	r0, r2
 802167c:	4619      	mov	r1, r3
 802167e:	f7ff fae3 	bl	8020c48 <__aeabi_d2f>
 8021682:	4603      	mov	r3, r0
 8021684:	607b      	str	r3, [r7, #4]
			for (index = 0u; index < ARRAY_SIZE; index++)
 8021686:	2300      	movs	r3, #0
 8021688:	60fb      	str	r3, [r7, #12]
 802168a:	e016      	b.n	80216ba <APP_DAC_ModulateTask+0x162>
			{
				sound_lut[index] = (u32_t)((float_t)sound_lut2[index] * mul);
 802168c:	4a25      	ldr	r2, [pc, #148]	; (8021724 <APP_DAC_ModulateTask+0x1cc>)
 802168e:	68fb      	ldr	r3, [r7, #12]
 8021690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021694:	ee07 3a90 	vmov	s15, r3
 8021698:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802169c:	edd7 7a01 	vldr	s15, [r7, #4]
 80216a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80216a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80216a8:	ee17 1a90 	vmov	r1, s15
 80216ac:	4a1e      	ldr	r2, [pc, #120]	; (8021728 <APP_DAC_ModulateTask+0x1d0>)
 80216ae:	68fb      	ldr	r3, [r7, #12]
 80216b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (index = 0u; index < ARRAY_SIZE; index++)
 80216b4:	68fb      	ldr	r3, [r7, #12]
 80216b6:	3301      	adds	r3, #1
 80216b8:	60fb      	str	r3, [r7, #12]
 80216ba:	68fb      	ldr	r3, [r7, #12]
 80216bc:	2b63      	cmp	r3, #99	; 0x63
 80216be:	d9e5      	bls.n	802168c <APP_DAC_ModulateTask+0x134>
			}


			if (dir == 0)
 80216c0:	7a7b      	ldrb	r3, [r7, #9]
 80216c2:	2b00      	cmp	r3, #0
 80216c4:	d109      	bne.n	80216da <APP_DAC_ModulateTask+0x182>
			{
				x+=20;
 80216c6:	897b      	ldrh	r3, [r7, #10]
 80216c8:	3314      	adds	r3, #20
 80216ca:	817b      	strh	r3, [r7, #10]
				if (x == 360)
 80216cc:	897b      	ldrh	r3, [r7, #10]
 80216ce:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80216d2:	d10a      	bne.n	80216ea <APP_DAC_ModulateTask+0x192>
				{
					dir = 1;
 80216d4:	2301      	movs	r3, #1
 80216d6:	727b      	strb	r3, [r7, #9]
 80216d8:	e007      	b.n	80216ea <APP_DAC_ModulateTask+0x192>
				}
			}
			else
			{
				x -= 20;
 80216da:	897b      	ldrh	r3, [r7, #10]
 80216dc:	3b14      	subs	r3, #20
 80216de:	817b      	strh	r3, [r7, #10]
				if (x == 0)
 80216e0:	897b      	ldrh	r3, [r7, #10]
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d101      	bne.n	80216ea <APP_DAC_ModulateTask+0x192>
				{
					dir = 0;
 80216e6:	2300      	movs	r3, #0
 80216e8:	727b      	strb	r3, [r7, #9]
				}
			}
		}

		(void_t) gos_taskSleep(sleepVal);
 80216ea:	4b11      	ldr	r3, [pc, #68]	; (8021730 <APP_DAC_ModulateTask+0x1d8>)
 80216ec:	681b      	ldr	r3, [r3, #0]
 80216ee:	4618      	mov	r0, r3
 80216f0:	f01a f9ae 	bl	803ba50 <gos_taskSleep>
		if (modType == MOD_SINE)
 80216f4:	e741      	b.n	802157a <APP_DAC_ModulateTask+0x22>
 80216f6:	bf00      	nop
 80216f8:	4d12d84a 	.word	0x4d12d84a
 80216fc:	400921fb 	.word	0x400921fb
 8021700:	9999999a 	.word	0x9999999a
 8021704:	3ff59999 	.word	0x3ff59999
 8021708:	33333333 	.word	0x33333333
 802170c:	3fd33333 	.word	0x3fd33333
 8021710:	9999999a 	.word	0x9999999a
 8021714:	3fd99999 	.word	0x3fd99999
 8021718:	20000168 	.word	0x20000168
 802171c:	20003b48 	.word	0x20003b48
 8021720:	40668000 	.word	0x40668000
 8021724:	200038b0 	.word	0x200038b0
 8021728:	20003720 	.word	0x20003720
 802172c:	43b40000 	.word	0x43b40000
 8021730:	200000f8 	.word	0x200000f8
 8021734:	00000000 	.word	0x00000000

08021738 <APP_DAC_GetSineVal>:

/*
 * Function: APP_DAC_GetSineVal
 */
GOS_STATIC void_t APP_DAC_GetSineVal (void_t)
{
 8021738:	b580      	push	{r7, lr}
 802173a:	b082      	sub	sp, #8
 802173c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u32_t index = 0u;
 802173e:	2300      	movs	r3, #0
 8021740:	607b      	str	r3, [r7, #4]

	/*
	 * Function code.
	 */
	for (index = 0u; index < ARRAY_SIZE; index++)
 8021742:	2300      	movs	r3, #0
 8021744:	607b      	str	r3, [r7, #4]
 8021746:	e042      	b.n	80217ce <APP_DAC_GetSineVal+0x96>
	{
		sound_lut[index] = ((sin(index * 2 * PI / ARRAY_SIZE) + 1) * (MAX_VAL / 2));
 8021748:	687b      	ldr	r3, [r7, #4]
 802174a:	005b      	lsls	r3, r3, #1
 802174c:	4618      	mov	r0, r3
 802174e:	f7fe ff09 	bl	8020564 <__aeabi_ui2d>
 8021752:	a328      	add	r3, pc, #160	; (adr r3, 80217f4 <APP_DAC_GetSineVal+0xbc>)
 8021754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021758:	f7fe ff7e 	bl	8020658 <__aeabi_dmul>
 802175c:	4602      	mov	r2, r0
 802175e:	460b      	mov	r3, r1
 8021760:	4610      	mov	r0, r2
 8021762:	4619      	mov	r1, r3
 8021764:	f04f 0200 	mov.w	r2, #0
 8021768:	4b1d      	ldr	r3, [pc, #116]	; (80217e0 <APP_DAC_GetSineVal+0xa8>)
 802176a:	f7ff f89f 	bl	80208ac <__aeabi_ddiv>
 802176e:	4602      	mov	r2, r0
 8021770:	460b      	mov	r3, r1
 8021772:	ec43 2b17 	vmov	d7, r2, r3
 8021776:	eeb0 0a47 	vmov.f32	s0, s14
 802177a:	eef0 0a67 	vmov.f32	s1, s15
 802177e:	f023 ffe7 	bl	8045750 <sin>
 8021782:	ec51 0b10 	vmov	r0, r1, d0
 8021786:	f04f 0200 	mov.w	r2, #0
 802178a:	4b16      	ldr	r3, [pc, #88]	; (80217e4 <APP_DAC_GetSineVal+0xac>)
 802178c:	f7fe fdae 	bl	80202ec <__adddf3>
 8021790:	4602      	mov	r2, r0
 8021792:	460b      	mov	r3, r1
 8021794:	4610      	mov	r0, r2
 8021796:	4619      	mov	r1, r3
 8021798:	f04f 0200 	mov.w	r2, #0
 802179c:	4b12      	ldr	r3, [pc, #72]	; (80217e8 <APP_DAC_GetSineVal+0xb0>)
 802179e:	f7fe ff5b 	bl	8020658 <__aeabi_dmul>
 80217a2:	4602      	mov	r2, r0
 80217a4:	460b      	mov	r3, r1
 80217a6:	4610      	mov	r0, r2
 80217a8:	4619      	mov	r1, r3
 80217aa:	f7ff fa2d 	bl	8020c08 <__aeabi_d2uiz>
 80217ae:	4602      	mov	r2, r0
 80217b0:	490e      	ldr	r1, [pc, #56]	; (80217ec <APP_DAC_GetSineVal+0xb4>)
 80217b2:	687b      	ldr	r3, [r7, #4]
 80217b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sound_lut2[index] = sound_lut[index];
 80217b8:	4a0c      	ldr	r2, [pc, #48]	; (80217ec <APP_DAC_GetSineVal+0xb4>)
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80217c0:	490b      	ldr	r1, [pc, #44]	; (80217f0 <APP_DAC_GetSineVal+0xb8>)
 80217c2:	687b      	ldr	r3, [r7, #4]
 80217c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (index = 0u; index < ARRAY_SIZE; index++)
 80217c8:	687b      	ldr	r3, [r7, #4]
 80217ca:	3301      	adds	r3, #1
 80217cc:	607b      	str	r3, [r7, #4]
 80217ce:	687b      	ldr	r3, [r7, #4]
 80217d0:	2b63      	cmp	r3, #99	; 0x63
 80217d2:	d9b9      	bls.n	8021748 <APP_DAC_GetSineVal+0x10>
	}
}
 80217d4:	bf00      	nop
 80217d6:	bf00      	nop
 80217d8:	3708      	adds	r7, #8
 80217da:	46bd      	mov	sp, r7
 80217dc:	bd80      	pop	{r7, pc}
 80217de:	bf00      	nop
 80217e0:	40590000 	.word	0x40590000
 80217e4:	3ff00000 	.word	0x3ff00000
 80217e8:	40a00000 	.word	0x40a00000
 80217ec:	20003720 	.word	0x20003720
 80217f0:	200038b0 	.word	0x200038b0
 80217f4:	4d12d84a 	.word	0x4d12d84a
 80217f8:	400921fb 	.word	0x400921fb

080217fc <APP_DAC_GetTriangleVal>:

/*
 * Function: APP_DAC_GetTriangleVal
 */
GOS_STATIC void_t APP_DAC_GetTriangleVal (void_t)
{
 80217fc:	b480      	push	{r7}
 80217fe:	b083      	sub	sp, #12
 8021800:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u32_t index = 0u;
 8021802:	2300      	movs	r3, #0
 8021804:	607b      	str	r3, [r7, #4]
	u32_t step  = MAX_VAL / (ARRAY_SIZE / 2);
 8021806:	2351      	movs	r3, #81	; 0x51
 8021808:	603b      	str	r3, [r7, #0]

	/*
	 * Function code.
	 */
	for (index = 0u; index < (ARRAY_SIZE / 2); index++)
 802180a:	2300      	movs	r3, #0
 802180c:	607b      	str	r3, [r7, #4]
 802180e:	e012      	b.n	8021836 <APP_DAC_GetTriangleVal+0x3a>
	{
		sound_lut[index] = index * step;
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	683a      	ldr	r2, [r7, #0]
 8021814:	fb03 f202 	mul.w	r2, r3, r2
 8021818:	4919      	ldr	r1, [pc, #100]	; (8021880 <APP_DAC_GetTriangleVal+0x84>)
 802181a:	687b      	ldr	r3, [r7, #4]
 802181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sound_lut2[index] = sound_lut[index];
 8021820:	4a17      	ldr	r2, [pc, #92]	; (8021880 <APP_DAC_GetTriangleVal+0x84>)
 8021822:	687b      	ldr	r3, [r7, #4]
 8021824:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021828:	4916      	ldr	r1, [pc, #88]	; (8021884 <APP_DAC_GetTriangleVal+0x88>)
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (index = 0u; index < (ARRAY_SIZE / 2); index++)
 8021830:	687b      	ldr	r3, [r7, #4]
 8021832:	3301      	adds	r3, #1
 8021834:	607b      	str	r3, [r7, #4]
 8021836:	687b      	ldr	r3, [r7, #4]
 8021838:	2b31      	cmp	r3, #49	; 0x31
 802183a:	d9e9      	bls.n	8021810 <APP_DAC_GetTriangleVal+0x14>
	}

	for (index = (ARRAY_SIZE / 2); index < ARRAY_SIZE; index++)
 802183c:	2332      	movs	r3, #50	; 0x32
 802183e:	607b      	str	r3, [r7, #4]
 8021840:	e014      	b.n	802186c <APP_DAC_GetTriangleVal+0x70>
	{
		sound_lut[index] = (ARRAY_SIZE - index) * step;
 8021842:	687b      	ldr	r3, [r7, #4]
 8021844:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8021848:	683a      	ldr	r2, [r7, #0]
 802184a:	fb03 f202 	mul.w	r2, r3, r2
 802184e:	490c      	ldr	r1, [pc, #48]	; (8021880 <APP_DAC_GetTriangleVal+0x84>)
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sound_lut2[index] = sound_lut[index];
 8021856:	4a0a      	ldr	r2, [pc, #40]	; (8021880 <APP_DAC_GetTriangleVal+0x84>)
 8021858:	687b      	ldr	r3, [r7, #4]
 802185a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802185e:	4909      	ldr	r1, [pc, #36]	; (8021884 <APP_DAC_GetTriangleVal+0x88>)
 8021860:	687b      	ldr	r3, [r7, #4]
 8021862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (index = (ARRAY_SIZE / 2); index < ARRAY_SIZE; index++)
 8021866:	687b      	ldr	r3, [r7, #4]
 8021868:	3301      	adds	r3, #1
 802186a:	607b      	str	r3, [r7, #4]
 802186c:	687b      	ldr	r3, [r7, #4]
 802186e:	2b63      	cmp	r3, #99	; 0x63
 8021870:	d9e7      	bls.n	8021842 <APP_DAC_GetTriangleVal+0x46>
	}
}
 8021872:	bf00      	nop
 8021874:	bf00      	nop
 8021876:	370c      	adds	r7, #12
 8021878:	46bd      	mov	sp, r7
 802187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802187e:	4770      	bx	lr
 8021880:	20003720 	.word	0x20003720
 8021884:	200038b0 	.word	0x200038b0

08021888 <APP_DAC_GetSquareVal>:

/*
 * Function: APP_DAC_GetSquareVal
 */
GOS_STATIC void_t APP_DAC_GetSquareVal (void_t)
{
 8021888:	b480      	push	{r7}
 802188a:	b083      	sub	sp, #12
 802188c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u32_t index = 0u;
 802188e:	2300      	movs	r3, #0
 8021890:	607b      	str	r3, [r7, #4]

	/*
	 * Function code.
	 */
	for (index = 0u; index < (ARRAY_SIZE / 2); index++ )
 8021892:	2300      	movs	r3, #0
 8021894:	607b      	str	r3, [r7, #4]
 8021896:	e010      	b.n	80218ba <APP_DAC_GetSquareVal+0x32>
	{
		sound_lut[index] = MAX_VAL - 1;
 8021898:	4a18      	ldr	r2, [pc, #96]	; (80218fc <APP_DAC_GetSquareVal+0x74>)
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	f640 71ff 	movw	r1, #4095	; 0xfff
 80218a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sound_lut2[index] = sound_lut[index];
 80218a4:	4a15      	ldr	r2, [pc, #84]	; (80218fc <APP_DAC_GetSquareVal+0x74>)
 80218a6:	687b      	ldr	r3, [r7, #4]
 80218a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80218ac:	4914      	ldr	r1, [pc, #80]	; (8021900 <APP_DAC_GetSquareVal+0x78>)
 80218ae:	687b      	ldr	r3, [r7, #4]
 80218b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (index = 0u; index < (ARRAY_SIZE / 2); index++ )
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	3301      	adds	r3, #1
 80218b8:	607b      	str	r3, [r7, #4]
 80218ba:	687b      	ldr	r3, [r7, #4]
 80218bc:	2b31      	cmp	r3, #49	; 0x31
 80218be:	d9eb      	bls.n	8021898 <APP_DAC_GetSquareVal+0x10>
	}

	for (index = (ARRAY_SIZE / 2); index < ARRAY_SIZE; index++)
 80218c0:	2332      	movs	r3, #50	; 0x32
 80218c2:	607b      	str	r3, [r7, #4]
 80218c4:	e00f      	b.n	80218e6 <APP_DAC_GetSquareVal+0x5e>
	{
		sound_lut[index] = 0;
 80218c6:	4a0d      	ldr	r2, [pc, #52]	; (80218fc <APP_DAC_GetSquareVal+0x74>)
 80218c8:	687b      	ldr	r3, [r7, #4]
 80218ca:	2100      	movs	r1, #0
 80218cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sound_lut2[index] = sound_lut[index];
 80218d0:	4a0a      	ldr	r2, [pc, #40]	; (80218fc <APP_DAC_GetSquareVal+0x74>)
 80218d2:	687b      	ldr	r3, [r7, #4]
 80218d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80218d8:	4909      	ldr	r1, [pc, #36]	; (8021900 <APP_DAC_GetSquareVal+0x78>)
 80218da:	687b      	ldr	r3, [r7, #4]
 80218dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (index = (ARRAY_SIZE / 2); index < ARRAY_SIZE; index++)
 80218e0:	687b      	ldr	r3, [r7, #4]
 80218e2:	3301      	adds	r3, #1
 80218e4:	607b      	str	r3, [r7, #4]
 80218e6:	687b      	ldr	r3, [r7, #4]
 80218e8:	2b63      	cmp	r3, #99	; 0x63
 80218ea:	d9ec      	bls.n	80218c6 <APP_DAC_GetSquareVal+0x3e>
	}
}
 80218ec:	bf00      	nop
 80218ee:	bf00      	nop
 80218f0:	370c      	adds	r7, #12
 80218f2:	46bd      	mov	sp, r7
 80218f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218f8:	4770      	bx	lr
 80218fa:	bf00      	nop
 80218fc:	20003720 	.word	0x20003720
 8021900:	200038b0 	.word	0x200038b0

08021904 <APP_DAC_GetSawtoothVal>:

/*
 * Function: APP_DAC_GetSawtoothVal
 */
GOS_STATIC void_t APP_DAC_GetSawtoothVal (void_t)
{
 8021904:	b480      	push	{r7}
 8021906:	b083      	sub	sp, #12
 8021908:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u32_t index = 0u;
 802190a:	2300      	movs	r3, #0
 802190c:	607b      	str	r3, [r7, #4]
	u32_t step  = MAX_VAL / ARRAY_SIZE;
 802190e:	2328      	movs	r3, #40	; 0x28
 8021910:	603b      	str	r3, [r7, #0]

	/*
	 * Function code.
	 */
	for (index = 0u; index < ARRAY_SIZE; index++)
 8021912:	2300      	movs	r3, #0
 8021914:	607b      	str	r3, [r7, #4]
 8021916:	e012      	b.n	802193e <APP_DAC_GetSawtoothVal+0x3a>
	{
		sound_lut[index] = index * step;
 8021918:	687b      	ldr	r3, [r7, #4]
 802191a:	683a      	ldr	r2, [r7, #0]
 802191c:	fb03 f202 	mul.w	r2, r3, r2
 8021920:	490c      	ldr	r1, [pc, #48]	; (8021954 <APP_DAC_GetSawtoothVal+0x50>)
 8021922:	687b      	ldr	r3, [r7, #4]
 8021924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		sound_lut2[index] = sound_lut[index];
 8021928:	4a0a      	ldr	r2, [pc, #40]	; (8021954 <APP_DAC_GetSawtoothVal+0x50>)
 802192a:	687b      	ldr	r3, [r7, #4]
 802192c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8021930:	4909      	ldr	r1, [pc, #36]	; (8021958 <APP_DAC_GetSawtoothVal+0x54>)
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (index = 0u; index < ARRAY_SIZE; index++)
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	3301      	adds	r3, #1
 802193c:	607b      	str	r3, [r7, #4]
 802193e:	687b      	ldr	r3, [r7, #4]
 8021940:	2b63      	cmp	r3, #99	; 0x63
 8021942:	d9e9      	bls.n	8021918 <APP_DAC_GetSawtoothVal+0x14>
	}
}
 8021944:	bf00      	nop
 8021946:	bf00      	nop
 8021948:	370c      	adds	r7, #12
 802194a:	46bd      	mov	sp, r7
 802194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021950:	4770      	bx	lr
 8021952:	bf00      	nop
 8021954:	20003720 	.word	0x20003720
 8021958:	200038b0 	.word	0x200038b0

0802195c <APP_DAC_TaskDeleteSignalHandler>:

/*
 * Function: APP_DAC_TaskDeleteSignalHandler
 */
GOS_STATIC void_t APP_DAC_TaskDeleteSignalHandler (gos_tid_t taskId)
{
 802195c:	b580      	push	{r7, lr}
 802195e:	b082      	sub	sp, #8
 8021960:	af00      	add	r7, sp, #0
 8021962:	4603      	mov	r3, r0
 8021964:	80fb      	strh	r3, [r7, #6]
	/*
	 * Function code.
	 */
	if (taskId == dacTaskDesc.taskId)
 8021966:	4b06      	ldr	r3, [pc, #24]	; (8021980 <APP_DAC_TaskDeleteSignalHandler+0x24>)
 8021968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802196a:	88fa      	ldrh	r2, [r7, #6]
 802196c:	429a      	cmp	r2, r3
 802196e:	d102      	bne.n	8021976 <APP_DAC_TaskDeleteSignalHandler+0x1a>
	{
		//(void_t) dac_driver_set_freq(0);
		APP_DAC_ChangeFrequency(0);
 8021970:	2000      	movs	r0, #0
 8021972:	f7ff fd63 	bl	802143c <APP_DAC_ChangeFrequency>
	}
}
 8021976:	bf00      	nop
 8021978:	3708      	adds	r7, #8
 802197a:	46bd      	mov	sp, r7
 802197c:	bd80      	pop	{r7, pc}
 802197e:	bf00      	nop
 8021980:	200000fc 	.word	0x200000fc

08021984 <APP_DAC_ShellSongPlayHandler>:

/*
 * Function: APP_DAC_ShellSongPlayHandler
 */
GOS_STATIC void_t APP_DAC_ShellSongPlayHandler (char_t* param)
{
 8021984:	b580      	push	{r7, lr}
 8021986:	b086      	sub	sp, #24
 8021988:	af00      	add	r7, sp, #0
 802198a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	sd_read_write_file_t readFileReq =
 802198c:	f107 030c 	add.w	r3, r7, #12
 8021990:	2200      	movs	r2, #0
 8021992:	601a      	str	r2, [r3, #0]
 8021994:	605a      	str	r2, [r3, #4]
 8021996:	609a      	str	r2, [r3, #8]
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	60fb      	str	r3, [r7, #12]
 802199c:	4b0e      	ldr	r3, [pc, #56]	; (80219d8 <APP_DAC_ShellSongPlayHandler+0x54>)
 802199e:	613b      	str	r3, [r7, #16]
	};

	/*
	 * Function code.
	 */
	playReadFileMsg.messageId   = MSG_READ_FILE;
 80219a0:	4b0e      	ldr	r3, [pc, #56]	; (80219dc <APP_DAC_ShellSongPlayHandler+0x58>)
 80219a2:	f240 1217 	movw	r2, #279	; 0x117
 80219a6:	801a      	strh	r2, [r3, #0]
	playReadFileMsg.messageSize = sizeof(readFileReq);
 80219a8:	4b0c      	ldr	r3, [pc, #48]	; (80219dc <APP_DAC_ShellSongPlayHandler+0x58>)
 80219aa:	220c      	movs	r2, #12
 80219ac:	709a      	strb	r2, [r3, #2]

	if (playing == GOS_FALSE)
 80219ae:	4b0c      	ldr	r3, [pc, #48]	; (80219e0 <APP_DAC_ShellSongPlayHandler+0x5c>)
 80219b0:	781b      	ldrb	r3, [r3, #0]
 80219b2:	2b49      	cmp	r3, #73	; 0x49
 80219b4:	d101      	bne.n	80219ba <APP_DAC_ShellSongPlayHandler+0x36>
	{
		readFileReq.responseRequired = GOS_TRUE;
 80219b6:	2336      	movs	r3, #54	; 0x36
 80219b8:	75bb      	strb	r3, [r7, #22]
	}

	(void_t) memcpy((void_t*)&playReadFileMsg.messageBytes, (void_t*)&readFileReq, sizeof(readFileReq));
 80219ba:	f107 030c 	add.w	r3, r7, #12
 80219be:	220c      	movs	r2, #12
 80219c0:	4619      	mov	r1, r3
 80219c2:	4808      	ldr	r0, [pc, #32]	; (80219e4 <APP_DAC_ShellSongPlayHandler+0x60>)
 80219c4:	f021 f9b9 	bl	8042d3a <memcpy>
	(void_t) gos_messageTx(&playReadFileMsg);
 80219c8:	4804      	ldr	r0, [pc, #16]	; (80219dc <APP_DAC_ShellSongPlayHandler+0x58>)
 80219ca:	f01c fb3d 	bl	803e048 <gos_messageTx>
}
 80219ce:	bf00      	nop
 80219d0:	3718      	adds	r7, #24
 80219d2:	46bd      	mov	sp, r7
 80219d4:	bd80      	pop	{r7, pc}
 80219d6:	bf00      	nop
 80219d8:	20003a40 	.word	0x20003a40
 80219dc:	20003ba0 	.word	0x20003ba0
 80219e0:	200000f7 	.word	0x200000f7
 80219e4:	20003ba3 	.word	0x20003ba3

080219e8 <APP_DAC_ShellSongSoundHandler>:

/*
 * Function: APP_DAC_ShellSongSoundHandler
 */
GOS_STATIC void_t APP_DAC_ShellSongSoundHandler (char_t* param)
{
 80219e8:	b580      	push	{r7, lr}
 80219ea:	b082      	sub	sp, #8
 80219ec:	af00      	add	r7, sp, #0
 80219ee:	6078      	str	r0, [r7, #4]
	/*
	 * Function code.
	 */
	if (strcmp(param, "sine") == 0)
 80219f0:	4915      	ldr	r1, [pc, #84]	; (8021a48 <APP_DAC_ShellSongSoundHandler+0x60>)
 80219f2:	6878      	ldr	r0, [r7, #4]
 80219f4:	f7fe fc0c 	bl	8020210 <strcmp>
 80219f8:	4603      	mov	r3, r0
 80219fa:	2b00      	cmp	r3, #0
 80219fc:	d102      	bne.n	8021a04 <APP_DAC_ShellSongSoundHandler+0x1c>
	{
		APP_DAC_GetSineVal();
 80219fe:	f7ff fe9b 	bl	8021738 <APP_DAC_GetSineVal>
	}
	else if (strcmp(param, "sawtooth") == 0)
	{
		APP_DAC_GetSawtoothVal();
	}
}
 8021a02:	e01c      	b.n	8021a3e <APP_DAC_ShellSongSoundHandler+0x56>
	else if (strcmp(param, "square") == 0)
 8021a04:	4911      	ldr	r1, [pc, #68]	; (8021a4c <APP_DAC_ShellSongSoundHandler+0x64>)
 8021a06:	6878      	ldr	r0, [r7, #4]
 8021a08:	f7fe fc02 	bl	8020210 <strcmp>
 8021a0c:	4603      	mov	r3, r0
 8021a0e:	2b00      	cmp	r3, #0
 8021a10:	d102      	bne.n	8021a18 <APP_DAC_ShellSongSoundHandler+0x30>
		APP_DAC_GetSquareVal();
 8021a12:	f7ff ff39 	bl	8021888 <APP_DAC_GetSquareVal>
}
 8021a16:	e012      	b.n	8021a3e <APP_DAC_ShellSongSoundHandler+0x56>
	else if (strcmp(param, "triangle") == 0)
 8021a18:	490d      	ldr	r1, [pc, #52]	; (8021a50 <APP_DAC_ShellSongSoundHandler+0x68>)
 8021a1a:	6878      	ldr	r0, [r7, #4]
 8021a1c:	f7fe fbf8 	bl	8020210 <strcmp>
 8021a20:	4603      	mov	r3, r0
 8021a22:	2b00      	cmp	r3, #0
 8021a24:	d102      	bne.n	8021a2c <APP_DAC_ShellSongSoundHandler+0x44>
		APP_DAC_GetTriangleVal();
 8021a26:	f7ff fee9 	bl	80217fc <APP_DAC_GetTriangleVal>
}
 8021a2a:	e008      	b.n	8021a3e <APP_DAC_ShellSongSoundHandler+0x56>
	else if (strcmp(param, "sawtooth") == 0)
 8021a2c:	4909      	ldr	r1, [pc, #36]	; (8021a54 <APP_DAC_ShellSongSoundHandler+0x6c>)
 8021a2e:	6878      	ldr	r0, [r7, #4]
 8021a30:	f7fe fbee 	bl	8020210 <strcmp>
 8021a34:	4603      	mov	r3, r0
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d101      	bne.n	8021a3e <APP_DAC_ShellSongSoundHandler+0x56>
		APP_DAC_GetSawtoothVal();
 8021a3a:	f7ff ff63 	bl	8021904 <APP_DAC_GetSawtoothVal>
}
 8021a3e:	bf00      	nop
 8021a40:	3708      	adds	r7, #8
 8021a42:	46bd      	mov	sp, r7
 8021a44:	bd80      	pop	{r7, pc}
 8021a46:	bf00      	nop
 8021a48:	08046860 	.word	0x08046860
 8021a4c:	08046868 	.word	0x08046868
 8021a50:	08046870 	.word	0x08046870
 8021a54:	0804687c 	.word	0x0804687c

08021a58 <APP_DAC_ShellLoopHandler>:

/*
 * Function: APP_DAC_ShellLoopHandler
 */
GOS_STATIC void_t APP_DAC_ShellLoopHandler (char_t* param)
{
 8021a58:	b580      	push	{r7, lr}
 8021a5a:	b082      	sub	sp, #8
 8021a5c:	af00      	add	r7, sp, #0
 8021a5e:	6078      	str	r0, [r7, #4]
	/*
	 * Function code.
	 */
	if (strcmp(param, "on") == 0)
 8021a60:	490c      	ldr	r1, [pc, #48]	; (8021a94 <APP_DAC_ShellLoopHandler+0x3c>)
 8021a62:	6878      	ldr	r0, [r7, #4]
 8021a64:	f7fe fbd4 	bl	8020210 <strcmp>
 8021a68:	4603      	mov	r3, r0
 8021a6a:	2b00      	cmp	r3, #0
 8021a6c:	d103      	bne.n	8021a76 <APP_DAC_ShellLoopHandler+0x1e>
	{
		loopPlay = GOS_TRUE;
 8021a6e:	4b0a      	ldr	r3, [pc, #40]	; (8021a98 <APP_DAC_ShellLoopHandler+0x40>)
 8021a70:	2236      	movs	r2, #54	; 0x36
 8021a72:	701a      	strb	r2, [r3, #0]
	}
	else if (strcmp(param, "off") == 0)
	{
		loopPlay = GOS_FALSE;
	}
}
 8021a74:	e009      	b.n	8021a8a <APP_DAC_ShellLoopHandler+0x32>
	else if (strcmp(param, "off") == 0)
 8021a76:	4909      	ldr	r1, [pc, #36]	; (8021a9c <APP_DAC_ShellLoopHandler+0x44>)
 8021a78:	6878      	ldr	r0, [r7, #4]
 8021a7a:	f7fe fbc9 	bl	8020210 <strcmp>
 8021a7e:	4603      	mov	r3, r0
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	d102      	bne.n	8021a8a <APP_DAC_ShellLoopHandler+0x32>
		loopPlay = GOS_FALSE;
 8021a84:	4b04      	ldr	r3, [pc, #16]	; (8021a98 <APP_DAC_ShellLoopHandler+0x40>)
 8021a86:	2249      	movs	r2, #73	; 0x49
 8021a88:	701a      	strb	r2, [r3, #0]
}
 8021a8a:	bf00      	nop
 8021a8c:	3708      	adds	r7, #8
 8021a8e:	46bd      	mov	sp, r7
 8021a90:	bd80      	pop	{r7, pc}
 8021a92:	bf00      	nop
 8021a94:	08046888 	.word	0x08046888
 8021a98:	200000f6 	.word	0x200000f6
 8021a9c:	0804688c 	.word	0x0804688c

08021aa0 <APP_DAC_ShellModulateHandler>:

/*
 * Function: APP_DAC_ShellModulateHandler
 */
GOS_STATIC void_t APP_DAC_ShellModulateHandler (char_t* param)
{
 8021aa0:	b580      	push	{r7, lr}
 8021aa2:	b082      	sub	sp, #8
 8021aa4:	af00      	add	r7, sp, #0
 8021aa6:	6078      	str	r0, [r7, #4]
	if (strcmp(param, "on") == 0)
 8021aa8:	4919      	ldr	r1, [pc, #100]	; (8021b10 <APP_DAC_ShellModulateHandler+0x70>)
 8021aaa:	6878      	ldr	r0, [r7, #4]
 8021aac:	f7fe fbb0 	bl	8020210 <strcmp>
 8021ab0:	4603      	mov	r3, r0
 8021ab2:	2b00      	cmp	r3, #0
 8021ab4:	d105      	bne.n	8021ac2 <APP_DAC_ShellModulateHandler+0x22>
	{
		(void_t) gos_taskResume(modulateTaskDesc.taskId);
 8021ab6:	4b17      	ldr	r3, [pc, #92]	; (8021b14 <APP_DAC_ShellModulateHandler+0x74>)
 8021ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021aba:	4618      	mov	r0, r3
 8021abc:	f01a fa36 	bl	803bf2c <gos_taskResume>
	}
	else if (strcmp(param, "triangle") == 0)
	{
		modType = MOD_TRIANGLE;
	}
}
 8021ac0:	e021      	b.n	8021b06 <APP_DAC_ShellModulateHandler+0x66>
	else if (strcmp(param, "off") == 0)
 8021ac2:	4915      	ldr	r1, [pc, #84]	; (8021b18 <APP_DAC_ShellModulateHandler+0x78>)
 8021ac4:	6878      	ldr	r0, [r7, #4]
 8021ac6:	f7fe fba3 	bl	8020210 <strcmp>
 8021aca:	4603      	mov	r3, r0
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	d105      	bne.n	8021adc <APP_DAC_ShellModulateHandler+0x3c>
		(void_t) gos_taskSuspend(modulateTaskDesc.taskId);
 8021ad0:	4b10      	ldr	r3, [pc, #64]	; (8021b14 <APP_DAC_ShellModulateHandler+0x74>)
 8021ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021ad4:	4618      	mov	r0, r3
 8021ad6:	f01a f907 	bl	803bce8 <gos_taskSuspend>
}
 8021ada:	e014      	b.n	8021b06 <APP_DAC_ShellModulateHandler+0x66>
	else if (strcmp(param, "sine") == 0)
 8021adc:	490f      	ldr	r1, [pc, #60]	; (8021b1c <APP_DAC_ShellModulateHandler+0x7c>)
 8021ade:	6878      	ldr	r0, [r7, #4]
 8021ae0:	f7fe fb96 	bl	8020210 <strcmp>
 8021ae4:	4603      	mov	r3, r0
 8021ae6:	2b00      	cmp	r3, #0
 8021ae8:	d103      	bne.n	8021af2 <APP_DAC_ShellModulateHandler+0x52>
		modType = MOD_SINE;
 8021aea:	4b0d      	ldr	r3, [pc, #52]	; (8021b20 <APP_DAC_ShellModulateHandler+0x80>)
 8021aec:	2200      	movs	r2, #0
 8021aee:	701a      	strb	r2, [r3, #0]
}
 8021af0:	e009      	b.n	8021b06 <APP_DAC_ShellModulateHandler+0x66>
	else if (strcmp(param, "triangle") == 0)
 8021af2:	490c      	ldr	r1, [pc, #48]	; (8021b24 <APP_DAC_ShellModulateHandler+0x84>)
 8021af4:	6878      	ldr	r0, [r7, #4]
 8021af6:	f7fe fb8b 	bl	8020210 <strcmp>
 8021afa:	4603      	mov	r3, r0
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	d102      	bne.n	8021b06 <APP_DAC_ShellModulateHandler+0x66>
		modType = MOD_TRIANGLE;
 8021b00:	4b07      	ldr	r3, [pc, #28]	; (8021b20 <APP_DAC_ShellModulateHandler+0x80>)
 8021b02:	2201      	movs	r2, #1
 8021b04:	701a      	strb	r2, [r3, #0]
}
 8021b06:	bf00      	nop
 8021b08:	3708      	adds	r7, #8
 8021b0a:	46bd      	mov	sp, r7
 8021b0c:	bd80      	pop	{r7, pc}
 8021b0e:	bf00      	nop
 8021b10:	08046888 	.word	0x08046888
 8021b14:	20000168 	.word	0x20000168
 8021b18:	0804688c 	.word	0x0804688c
 8021b1c:	08046860 	.word	0x08046860
 8021b20:	20003b48 	.word	0x20003b48
 8021b24:	08046870 	.word	0x08046870

08021b28 <APP_DAC_ShellModulateSpeedHandler>:

/*
 * Function: APP_DAC_ShellModulateSpeedHandler
 */
GOS_STATIC void_t APP_DAC_ShellModulateSpeedHandler (char_t* param)
{
 8021b28:	b580      	push	{r7, lr}
 8021b2a:	b082      	sub	sp, #8
 8021b2c:	af00      	add	r7, sp, #0
 8021b2e:	6078      	str	r0, [r7, #4]
	sleepVal = (u32_t)atoi(param);
 8021b30:	6878      	ldr	r0, [r7, #4]
 8021b32:	f01f fc14 	bl	804135e <atoi>
 8021b36:	4603      	mov	r3, r0
 8021b38:	461a      	mov	r2, r3
 8021b3a:	4b03      	ldr	r3, [pc, #12]	; (8021b48 <APP_DAC_ShellModulateSpeedHandler+0x20>)
 8021b3c:	601a      	str	r2, [r3, #0]
}
 8021b3e:	bf00      	nop
 8021b40:	3708      	adds	r7, #8
 8021b42:	46bd      	mov	sp, r7
 8021b44:	bd80      	pop	{r7, pc}
 8021b46:	bf00      	nop
 8021b48:	200000f8 	.word	0x200000f8

08021b4c <APP_DeadLockInit>:

/*
 * Function: APP_DeadLockInit
 */
gos_result_t APP_DeadLockInit (void_t)
{
 8021b4c:	b580      	push	{r7, lr}
 8021b4e:	b082      	sub	sp, #8
 8021b50:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t deadLockInitResult = GOS_SUCCESS;
 8021b52:	2355      	movs	r3, #85	; 0x55
 8021b54:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	deadLockInitResult &= gos_taskRegister(&deadLockTaskDesc, NULL);
 8021b56:	2100      	movs	r1, #0
 8021b58:	4808      	ldr	r0, [pc, #32]	; (8021b7c <APP_DeadLockInit+0x30>)
 8021b5a:	f019 fde7 	bl	803b72c <gos_taskRegister>
 8021b5e:	4603      	mov	r3, r0
 8021b60:	461a      	mov	r2, r3
 8021b62:	79fb      	ldrb	r3, [r7, #7]
 8021b64:	4013      	ands	r3, r2
 8021b66:	71fb      	strb	r3, [r7, #7]

	if (deadLockInitResult != GOS_SUCCESS)
 8021b68:	79fb      	ldrb	r3, [r7, #7]
 8021b6a:	2b55      	cmp	r3, #85	; 0x55
 8021b6c:	d001      	beq.n	8021b72 <APP_DeadLockInit+0x26>
	{
		deadLockInitResult = GOS_ERROR;
 8021b6e:	23ae      	movs	r3, #174	; 0xae
 8021b70:	71fb      	strb	r3, [r7, #7]
	}

	return deadLockInitResult;
 8021b72:	79fb      	ldrb	r3, [r7, #7]
}
 8021b74:	4618      	mov	r0, r3
 8021b76:	3708      	adds	r7, #8
 8021b78:	46bd      	mov	sp, r7
 8021b7a:	bd80      	pop	{r7, pc}
 8021b7c:	20000260 	.word	0x20000260

08021b80 <APP_DeadLockTask>:

/*
 * Function: APP_DeadLockTask
 */
GOS_STATIC void_t APP_DeadLockTask (void_t)
{
 8021b80:	b580      	push	{r7, lr}
 8021b82:	b082      	sub	sp, #8
 8021b84:	af00      	add	r7, sp, #0
	 * Function code.
	 */
	/*
	 * Create mutexes.
	 */
	(void_t) gos_mutexInit(&lock1);
 8021b86:	1d3b      	adds	r3, r7, #4
 8021b88:	4618      	mov	r0, r3
 8021b8a:	f01c fbbb 	bl	803e304 <gos_mutexInit>
	(void_t) gos_mutexInit(&lock2);
 8021b8e:	463b      	mov	r3, r7
 8021b90:	4618      	mov	r0, r3
 8021b92:	f01c fbb7 	bl	803e304 <gos_mutexInit>
	for (;;)
	{
		/*
		 * Lock lock1 and lock2.
		 */
		(void_t) gos_mutexLock(&lock1, GOS_MUTEX_ENDLESS_TMO);
 8021b96:	1d3b      	adds	r3, r7, #4
 8021b98:	f04f 31ff 	mov.w	r1, #4294967295
 8021b9c:	4618      	mov	r0, r3
 8021b9e:	f01c fbcb 	bl	803e338 <gos_mutexLock>
		(void_t) gos_mutexLock(&lock2, GOS_MUTEX_ENDLESS_TMO);
 8021ba2:	463b      	mov	r3, r7
 8021ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8021ba8:	4618      	mov	r0, r3
 8021baa:	f01c fbc5 	bl	803e338 <gos_mutexLock>

		/*
		 * Lock lock1 again without unlocking it first -> deadlock.
		 */
		(void_t) gos_mutexLock(&lock1, GOS_MUTEX_ENDLESS_TMO);
 8021bae:	1d3b      	adds	r3, r7, #4
 8021bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8021bb4:	4618      	mov	r0, r3
 8021bb6:	f01c fbbf 	bl	803e338 <gos_mutexLock>

		(void_t) gos_mutexUnlock(&lock1);
 8021bba:	1d3b      	adds	r3, r7, #4
 8021bbc:	4618      	mov	r0, r3
 8021bbe:	f01c fcc1 	bl	803e544 <gos_mutexUnlock>
		(void_t) gos_mutexUnlock(&lock2);
 8021bc2:	463b      	mov	r3, r7
 8021bc4:	4618      	mov	r0, r3
 8021bc6:	f01c fcbd 	bl	803e544 <gos_mutexUnlock>
		(void_t) gos_taskSleep(100);
 8021bca:	2064      	movs	r0, #100	; 0x64
 8021bcc:	f019 ff40 	bl	803ba50 <gos_taskSleep>
		(void_t) gos_mutexLock(&lock1, GOS_MUTEX_ENDLESS_TMO);
 8021bd0:	e7e1      	b.n	8021b96 <APP_DeadLockTask+0x16>
	...

08021bd4 <APP_DebouncerInit>:

/*
 * Function: APP_DebouncerInit
 */
gos_result_t APP_DebouncerInit (void_t)
{
 8021bd4:	b580      	push	{r7, lr}
 8021bd6:	b082      	sub	sp, #8
 8021bd8:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t debouncerInitResult = GOS_SUCCESS;
 8021bda:	2355      	movs	r3, #85	; 0x55
 8021bdc:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	debouncerInitResult &= gos_taskRegister(&debouncerTaskDesc, &debouncerTaskId);
 8021bde:	4909      	ldr	r1, [pc, #36]	; (8021c04 <APP_DebouncerInit+0x30>)
 8021be0:	4809      	ldr	r0, [pc, #36]	; (8021c08 <APP_DebouncerInit+0x34>)
 8021be2:	f019 fda3 	bl	803b72c <gos_taskRegister>
 8021be6:	4603      	mov	r3, r0
 8021be8:	461a      	mov	r2, r3
 8021bea:	79fb      	ldrb	r3, [r7, #7]
 8021bec:	4013      	ands	r3, r2
 8021bee:	71fb      	strb	r3, [r7, #7]

	if (debouncerInitResult != GOS_SUCCESS)
 8021bf0:	79fb      	ldrb	r3, [r7, #7]
 8021bf2:	2b55      	cmp	r3, #85	; 0x55
 8021bf4:	d001      	beq.n	8021bfa <APP_DebouncerInit+0x26>
	{
		debouncerInitResult = GOS_ERROR;
 8021bf6:	23ae      	movs	r3, #174	; 0xae
 8021bf8:	71fb      	strb	r3, [r7, #7]
	}

	return debouncerInitResult;
 8021bfa:	79fb      	ldrb	r3, [r7, #7]
}
 8021bfc:	4618      	mov	r0, r3
 8021bfe:	3708      	adds	r7, #8
 8021c00:	46bd      	mov	sp, r7
 8021c02:	bd80      	pop	{r7, pc}
 8021c04:	20003bf4 	.word	0x20003bf4
 8021c08:	200002dc 	.word	0x200002dc

08021c0c <APP_DebouncerTask>:

/*
 * Function: APP_DebouncerTask
 */
GOS_STATIC void_t APP_DebouncerTask (void_t)
{
 8021c0c:	b580      	push	{r7, lr}
 8021c0e:	af00      	add	r7, sp, #0
	 * Function code.
	 */
	/*
	 * Suspend task (will be resumed when debouncing is required.
	 */
	(void_t) gos_taskSuspend(debouncerTaskDesc.taskId);
 8021c10:	4b3e      	ldr	r3, [pc, #248]	; (8021d0c <APP_DebouncerTask+0x100>)
 8021c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021c14:	4618      	mov	r0, r3
 8021c16:	f01a f867 	bl	803bce8 <gos_taskSuspend>
			 * Check each button whether they are blocked.
			 * If so, increase their block counter every millisecond.
			 * When the debounce time has elapsed, unblock the button, and
			 * clear the block counter.
			 */
			if (buttonBlock.button1Blocked == GOS_TRUE)
 8021c1a:	4b3d      	ldr	r3, [pc, #244]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c1c:	781b      	ldrb	r3, [r3, #0]
 8021c1e:	2b36      	cmp	r3, #54	; 0x36
 8021c20:	d111      	bne.n	8021c46 <APP_DebouncerTask+0x3a>
			{
				if (++buttonBlock.button1BlockCounter == DEBOUNCE_TIME_MS)
 8021c22:	4b3b      	ldr	r3, [pc, #236]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c24:	88db      	ldrh	r3, [r3, #6]
 8021c26:	3301      	adds	r3, #1
 8021c28:	b29a      	uxth	r2, r3
 8021c2a:	4b39      	ldr	r3, [pc, #228]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c2c:	80da      	strh	r2, [r3, #6]
 8021c2e:	4b38      	ldr	r3, [pc, #224]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c30:	88db      	ldrh	r3, [r3, #6]
 8021c32:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8021c36:	d15d      	bne.n	8021cf4 <APP_DebouncerTask+0xe8>
				{
					buttonBlock.button1Blocked = GOS_FALSE;
 8021c38:	4b35      	ldr	r3, [pc, #212]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c3a:	2249      	movs	r2, #73	; 0x49
 8021c3c:	701a      	strb	r2, [r3, #0]
					buttonBlock.button1BlockCounter = 0u;
 8021c3e:	4b34      	ldr	r3, [pc, #208]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c40:	2200      	movs	r2, #0
 8021c42:	80da      	strh	r2, [r3, #6]
 8021c44:	e056      	b.n	8021cf4 <APP_DebouncerTask+0xe8>
				}

			}
			else if (buttonBlock.button2Blocked == GOS_TRUE)
 8021c46:	4b32      	ldr	r3, [pc, #200]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c48:	785b      	ldrb	r3, [r3, #1]
 8021c4a:	2b36      	cmp	r3, #54	; 0x36
 8021c4c:	d111      	bne.n	8021c72 <APP_DebouncerTask+0x66>
			{
				if (++buttonBlock.button2BlockCounter == DEBOUNCE_TIME_MS)
 8021c4e:	4b30      	ldr	r3, [pc, #192]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c50:	891b      	ldrh	r3, [r3, #8]
 8021c52:	3301      	adds	r3, #1
 8021c54:	b29a      	uxth	r2, r3
 8021c56:	4b2e      	ldr	r3, [pc, #184]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c58:	811a      	strh	r2, [r3, #8]
 8021c5a:	4b2d      	ldr	r3, [pc, #180]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c5c:	891b      	ldrh	r3, [r3, #8]
 8021c5e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8021c62:	d147      	bne.n	8021cf4 <APP_DebouncerTask+0xe8>
				{
					buttonBlock.button2Blocked = GOS_FALSE;
 8021c64:	4b2a      	ldr	r3, [pc, #168]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c66:	2249      	movs	r2, #73	; 0x49
 8021c68:	705a      	strb	r2, [r3, #1]
					buttonBlock.button2BlockCounter = 0u;
 8021c6a:	4b29      	ldr	r3, [pc, #164]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c6c:	2200      	movs	r2, #0
 8021c6e:	811a      	strh	r2, [r3, #8]
 8021c70:	e040      	b.n	8021cf4 <APP_DebouncerTask+0xe8>
				}

			}
			else if (buttonBlock.button3Blocked == GOS_TRUE)
 8021c72:	4b27      	ldr	r3, [pc, #156]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c74:	789b      	ldrb	r3, [r3, #2]
 8021c76:	2b36      	cmp	r3, #54	; 0x36
 8021c78:	d111      	bne.n	8021c9e <APP_DebouncerTask+0x92>
			{
				if (++buttonBlock.button3BlockCounter == DEBOUNCE_TIME_MS)
 8021c7a:	4b25      	ldr	r3, [pc, #148]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c7c:	895b      	ldrh	r3, [r3, #10]
 8021c7e:	3301      	adds	r3, #1
 8021c80:	b29a      	uxth	r2, r3
 8021c82:	4b23      	ldr	r3, [pc, #140]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c84:	815a      	strh	r2, [r3, #10]
 8021c86:	4b22      	ldr	r3, [pc, #136]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c88:	895b      	ldrh	r3, [r3, #10]
 8021c8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8021c8e:	d131      	bne.n	8021cf4 <APP_DebouncerTask+0xe8>
				{
					buttonBlock.button3Blocked = GOS_FALSE;
 8021c90:	4b1f      	ldr	r3, [pc, #124]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c92:	2249      	movs	r2, #73	; 0x49
 8021c94:	709a      	strb	r2, [r3, #2]
					buttonBlock.button3BlockCounter = 0u;
 8021c96:	4b1e      	ldr	r3, [pc, #120]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021c98:	2200      	movs	r2, #0
 8021c9a:	815a      	strh	r2, [r3, #10]
 8021c9c:	e02a      	b.n	8021cf4 <APP_DebouncerTask+0xe8>
				}
			}
			else if (buttonBlock.button4Blocked == GOS_TRUE)
 8021c9e:	4b1c      	ldr	r3, [pc, #112]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021ca0:	78db      	ldrb	r3, [r3, #3]
 8021ca2:	2b36      	cmp	r3, #54	; 0x36
 8021ca4:	d111      	bne.n	8021cca <APP_DebouncerTask+0xbe>
			{
				if (++buttonBlock.button4BlockCounter == DEBOUNCE_TIME_MS)
 8021ca6:	4b1a      	ldr	r3, [pc, #104]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021ca8:	899b      	ldrh	r3, [r3, #12]
 8021caa:	3301      	adds	r3, #1
 8021cac:	b29a      	uxth	r2, r3
 8021cae:	4b18      	ldr	r3, [pc, #96]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021cb0:	819a      	strh	r2, [r3, #12]
 8021cb2:	4b17      	ldr	r3, [pc, #92]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021cb4:	899b      	ldrh	r3, [r3, #12]
 8021cb6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8021cba:	d11b      	bne.n	8021cf4 <APP_DebouncerTask+0xe8>
				{
					buttonBlock.button4Blocked = GOS_FALSE;
 8021cbc:	4b14      	ldr	r3, [pc, #80]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021cbe:	2249      	movs	r2, #73	; 0x49
 8021cc0:	70da      	strb	r2, [r3, #3]
					buttonBlock.button4BlockCounter = 0u;
 8021cc2:	4b13      	ldr	r3, [pc, #76]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021cc4:	2200      	movs	r2, #0
 8021cc6:	819a      	strh	r2, [r3, #12]
 8021cc8:	e014      	b.n	8021cf4 <APP_DebouncerTask+0xe8>
				}
			}
			else if (buttonBlock.userButtonBlocked == GOS_TRUE)
 8021cca:	4b11      	ldr	r3, [pc, #68]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021ccc:	791b      	ldrb	r3, [r3, #4]
 8021cce:	2b36      	cmp	r3, #54	; 0x36
 8021cd0:	d114      	bne.n	8021cfc <APP_DebouncerTask+0xf0>
			{
				if (++buttonBlock.userButtonBlockCounter == DEBOUNCE_TIME_MS)
 8021cd2:	4b0f      	ldr	r3, [pc, #60]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021cd4:	89db      	ldrh	r3, [r3, #14]
 8021cd6:	3301      	adds	r3, #1
 8021cd8:	b29a      	uxth	r2, r3
 8021cda:	4b0d      	ldr	r3, [pc, #52]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021cdc:	81da      	strh	r2, [r3, #14]
 8021cde:	4b0c      	ldr	r3, [pc, #48]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021ce0:	89db      	ldrh	r3, [r3, #14]
 8021ce2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8021ce6:	d105      	bne.n	8021cf4 <APP_DebouncerTask+0xe8>
				{
					buttonBlock.userButtonBlocked = GOS_FALSE;
 8021ce8:	4b09      	ldr	r3, [pc, #36]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021cea:	2249      	movs	r2, #73	; 0x49
 8021cec:	711a      	strb	r2, [r3, #4]
					buttonBlock.userButtonBlockCounter = 0u;
 8021cee:	4b08      	ldr	r3, [pc, #32]	; (8021d10 <APP_DebouncerTask+0x104>)
 8021cf0:	2200      	movs	r2, #0
 8021cf2:	81da      	strh	r2, [r3, #14]
				break;
			}
			/*
			 * Non-blocking delay one millisecond.
			 */
			(void_t) gos_taskSleep(1);
 8021cf4:	2001      	movs	r0, #1
 8021cf6:	f019 feab 	bl	803ba50 <gos_taskSleep>
			if (buttonBlock.button1Blocked == GOS_TRUE)
 8021cfa:	e78e      	b.n	8021c1a <APP_DebouncerTask+0xe>
				break;
 8021cfc:	bf00      	nop
		}

		/*
		 * No debouncing is required at this point, suspend task.
		 */
		(void_t) gos_taskSuspend(debouncerTaskDesc.taskId);
 8021cfe:	4b03      	ldr	r3, [pc, #12]	; (8021d0c <APP_DebouncerTask+0x100>)
 8021d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8021d02:	4618      	mov	r0, r3
 8021d04:	f019 fff0 	bl	803bce8 <gos_taskSuspend>
	for (;;)
 8021d08:	e787      	b.n	8021c1a <APP_DebouncerTask+0xe>
 8021d0a:	bf00      	nop
 8021d0c:	200002dc 	.word	0x200002dc
 8021d10:	200002cc 	.word	0x200002cc

08021d14 <APP_EmptyInit>:
	.readFunction = frsRead,
	.writeFunction = frsWrite
};

gos_result_t APP_EmptyInit (void_t)
{
 8021d14:	b580      	push	{r7, lr}
 8021d16:	af00      	add	r7, sp, #0
	return gos_taskRegister(&emptyTaskDesc, NULL);;
 8021d18:	2100      	movs	r1, #0
 8021d1a:	4803      	ldr	r0, [pc, #12]	; (8021d28 <APP_EmptyInit+0x14>)
 8021d1c:	f019 fd06 	bl	803b72c <gos_taskRegister>
 8021d20:	4603      	mov	r3, r0
}
 8021d22:	4618      	mov	r0, r3
 8021d24:	bd80      	pop	{r7, pc}
 8021d26:	bf00      	nop
 8021d28:	2000036c 	.word	0x2000036c

08021d2c <APP_EmptyTask>:

GOS_STATIC void_t APP_EmptyTask (void_t)
{
 8021d2c:	b580      	push	{r7, lr}
 8021d2e:	b082      	sub	sp, #8
 8021d30:	af00      	add	r7, sp, #0
	float_t otsTemp = 0;
 8021d32:	f04f 0300 	mov.w	r3, #0
 8021d36:	607b      	str	r3, [r7, #4]
	u32_t uartErrorFlags = 0;
 8021d38:	2300      	movs	r3, #0
 8021d3a:	603b      	str	r3, [r7, #0]

	//svl_frsFault_t readBackFault2 = {0};
	svl_frsInit(&frsInit);
 8021d3c:	4829      	ldr	r0, [pc, #164]	; (8021de4 <APP_EmptyTask+0xb8>)
 8021d3e:	f017 fd1b 	bl	8039778 <svl_frsInit>

	gos_taskSleep(2000u);
 8021d42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8021d46:	f019 fe83 	bl	803ba50 <gos_taskSleep>

	fault.source = 16;
 8021d4a:	4b27      	ldr	r3, [pc, #156]	; (8021de8 <APP_EmptyTask+0xbc>)
 8021d4c:	2210      	movs	r2, #16
 8021d4e:	605a      	str	r2, [r3, #4]
	fault.trigger = 64;
 8021d50:	4b25      	ldr	r3, [pc, #148]	; (8021de8 <APP_EmptyTask+0xbc>)
 8021d52:	2240      	movs	r2, #64	; 0x40
 8021d54:	601a      	str	r2, [r3, #0]
	memcpy((void_t*)fault.data, (void_t*)&dummyData, sizeof(dummyData));
 8021d56:	2224      	movs	r2, #36	; 0x24
 8021d58:	4924      	ldr	r1, [pc, #144]	; (8021dec <APP_EmptyTask+0xc0>)
 8021d5a:	4825      	ldr	r0, [pc, #148]	; (8021df0 <APP_EmptyTask+0xc4>)
 8021d5c:	f020 ffed 	bl	8042d3a <memcpy>
	gos_timeGet(&fault.timeStamp);
 8021d60:	4824      	ldr	r0, [pc, #144]	; (8021df4 <APP_EmptyTask+0xc8>)
 8021d62:	f01e fa95 	bl	8040290 <gos_timeGet>
	svl_frsCreate(&fault);
 8021d66:	4820      	ldr	r0, [pc, #128]	; (8021de8 <APP_EmptyTask+0xbc>)
 8021d68:	f017 fd30 	bl	80397cc <svl_frsCreate>
	//svl_frsGetFaultByIndex(0, &readBackFault);

	gos_taskSleep(152);
 8021d6c:	2098      	movs	r0, #152	; 0x98
 8021d6e:	f019 fe6f 	bl	803ba50 <gos_taskSleep>
	fault.source = 8;
 8021d72:	4b1d      	ldr	r3, [pc, #116]	; (8021de8 <APP_EmptyTask+0xbc>)
 8021d74:	2208      	movs	r2, #8
 8021d76:	605a      	str	r2, [r3, #4]
	fault.trigger = 1560;
 8021d78:	4b1b      	ldr	r3, [pc, #108]	; (8021de8 <APP_EmptyTask+0xbc>)
 8021d7a:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8021d7e:	601a      	str	r2, [r3, #0]
	gos_timeGet(&fault.timeStamp);
 8021d80:	481c      	ldr	r0, [pc, #112]	; (8021df4 <APP_EmptyTask+0xc8>)
 8021d82:	f01e fa85 	bl	8040290 <gos_timeGet>
	svl_frsCreate(&fault);
 8021d86:	4818      	ldr	r0, [pc, #96]	; (8021de8 <APP_EmptyTask+0xbc>)
 8021d88:	f017 fd20 	bl	80397cc <svl_frsCreate>
	//svl_frsGetFaultByIndex(1, &readBackFault2);

	svl_frsGetAllFaults(readBackFaults, sizeof(readBackFaults));
 8021d8c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8021d90:	4819      	ldr	r0, [pc, #100]	; (8021df8 <APP_EmptyTask+0xcc>)
 8021d92:	f017 fd89 	bl	80398a8 <svl_frsGetAllFaults>

	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 8021d96:	2001      	movs	r0, #1
 8021d98:	f017 fc60 	bl	803965c <svl_dsmWaitForState>

	for (;;)
	{
		lm75_get_temperature(&otsTemp);
 8021d9c:	1d3b      	adds	r3, r7, #4
 8021d9e:	4618      	mov	r0, r3
 8021da0:	f004 faa8 	bl	80262f4 <lm75_get_temperature>
		gos_traceTraceFormatted(GOS_TRUE, "OTS: %.2f °C\r\n", otsTemp);
 8021da4:	687b      	ldr	r3, [r7, #4]
 8021da6:	4618      	mov	r0, r3
 8021da8:	f7fe fbfe 	bl	80205a8 <__aeabi_f2d>
 8021dac:	4602      	mov	r2, r0
 8021dae:	460b      	mov	r3, r1
 8021db0:	4912      	ldr	r1, [pc, #72]	; (8021dfc <APP_EmptyTask+0xd0>)
 8021db2:	2036      	movs	r0, #54	; 0x36
 8021db4:	f01e ff0c 	bl	8040bd0 <gos_traceTraceFormatted>

		if (drv_uartGetErrorFlags(&uartErrorFlags) == GOS_SUCCESS &&
 8021db8:	463b      	mov	r3, r7
 8021dba:	4618      	mov	r0, r3
 8021dbc:	f016 fca4 	bl	8038708 <drv_uartGetErrorFlags>
 8021dc0:	4603      	mov	r3, r0
 8021dc2:	2b55      	cmp	r3, #85	; 0x55
 8021dc4:	d108      	bne.n	8021dd8 <APP_EmptyTask+0xac>
			uartErrorFlags != 0u)
 8021dc6:	683b      	ldr	r3, [r7, #0]
		if (drv_uartGetErrorFlags(&uartErrorFlags) == GOS_SUCCESS &&
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d005      	beq.n	8021dd8 <APP_EmptyTask+0xac>
		{
			gos_traceTraceFormatted(GOS_TRUE, "UART error code: %u\r\n", uartErrorFlags);
 8021dcc:	683b      	ldr	r3, [r7, #0]
 8021dce:	461a      	mov	r2, r3
 8021dd0:	490b      	ldr	r1, [pc, #44]	; (8021e00 <APP_EmptyTask+0xd4>)
 8021dd2:	2036      	movs	r0, #54	; 0x36
 8021dd4:	f01e fefc 	bl	8040bd0 <gos_traceTraceFormatted>
		}

		gos_taskSleep(1000);
 8021dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8021ddc:	f019 fe38 	bl	803ba50 <gos_taskSleep>
		lm75_get_temperature(&otsTemp);
 8021de0:	e7dc      	b.n	8021d9c <APP_EmptyTask+0x70>
 8021de2:	bf00      	nop
 8021de4:	200003d8 	.word	0x200003d8
 8021de8:	20003df8 	.word	0x20003df8
 8021dec:	20000348 	.word	0x20000348
 8021df0:	20003e0a 	.word	0x20003e0a
 8021df4:	20003e00 	.word	0x20003e00
 8021df8:	20003e4c 	.word	0x20003e4c
 8021dfc:	08046890 	.word	0x08046890
 8021e00:	080468a0 	.word	0x080468a0

08021e04 <APP_StateChangeToReduced>:
	}
}

void_t APP_StateChangeToReduced (void_t)
{
 8021e04:	b580      	push	{r7, lr}
 8021e06:	af00      	add	r7, sp, #0
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_0, GPIO_STATE_HIGH);
 8021e08:	2101      	movs	r1, #1
 8021e0a:	2001      	movs	r0, #1
 8021e0c:	f000 f9be 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_1, GPIO_STATE_LOW);
 8021e10:	2100      	movs	r1, #0
 8021e12:	2002      	movs	r0, #2
 8021e14:	f000 f9ba 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_2, GPIO_STATE_LOW);
 8021e18:	2100      	movs	r1, #0
 8021e1a:	2004      	movs	r0, #4
 8021e1c:	f000 f9b6 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_3, GPIO_STATE_LOW);
 8021e20:	2100      	movs	r1, #0
 8021e22:	2008      	movs	r0, #8
 8021e24:	f000 f9b2 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_4, GPIO_STATE_LOW);
 8021e28:	2100      	movs	r1, #0
 8021e2a:	2010      	movs	r0, #16
 8021e2c:	f000 f9ae 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_5, GPIO_STATE_LOW);
 8021e30:	2100      	movs	r1, #0
 8021e32:	2020      	movs	r0, #32
 8021e34:	f000 f9aa 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_6, GPIO_STATE_LOW);
 8021e38:	2100      	movs	r1, #0
 8021e3a:	2040      	movs	r0, #64	; 0x40
 8021e3c:	f000 f9a6 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_7, GPIO_STATE_LOW);
 8021e40:	2100      	movs	r1, #0
 8021e42:	2080      	movs	r0, #128	; 0x80
 8021e44:	f000 f9a2 	bl	802218c <APP_EX_IO_RequestPinState>

	APP_DAC_PlayBeep();
 8021e48:	f7ff fb18 	bl	802147c <APP_DAC_PlayBeep>
}
 8021e4c:	bf00      	nop
 8021e4e:	bd80      	pop	{r7, pc}

08021e50 <APP_StateChangeToNormal>:

void_t APP_StateChangeToNormal (void_t)
{
 8021e50:	b580      	push	{r7, lr}
 8021e52:	af00      	add	r7, sp, #0
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_0, GPIO_STATE_LOW);
 8021e54:	2100      	movs	r1, #0
 8021e56:	2001      	movs	r0, #1
 8021e58:	f000 f998 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_1, GPIO_STATE_LOW);
 8021e5c:	2100      	movs	r1, #0
 8021e5e:	2002      	movs	r0, #2
 8021e60:	f000 f994 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_2, GPIO_STATE_LOW);
 8021e64:	2100      	movs	r1, #0
 8021e66:	2004      	movs	r0, #4
 8021e68:	f000 f990 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_3, GPIO_STATE_LOW);
 8021e6c:	2100      	movs	r1, #0
 8021e6e:	2008      	movs	r0, #8
 8021e70:	f000 f98c 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_4, GPIO_STATE_LOW);
 8021e74:	2100      	movs	r1, #0
 8021e76:	2010      	movs	r0, #16
 8021e78:	f000 f988 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_5, GPIO_STATE_LOW);
 8021e7c:	2100      	movs	r1, #0
 8021e7e:	2020      	movs	r0, #32
 8021e80:	f000 f984 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_6, GPIO_STATE_LOW);
 8021e84:	2100      	movs	r1, #0
 8021e86:	2040      	movs	r0, #64	; 0x40
 8021e88:	f000 f980 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_7, GPIO_STATE_HIGH);
 8021e8c:	2101      	movs	r1, #1
 8021e8e:	2080      	movs	r0, #128	; 0x80
 8021e90:	f000 f97c 	bl	802218c <APP_EX_IO_RequestPinState>
}
 8021e94:	bf00      	nop
 8021e96:	bd80      	pop	{r7, pc}

08021e98 <APP_StateChangeToStartupReady>:

void_t APP_StateChangeToStartupReady (void_t)
{
 8021e98:	b580      	push	{r7, lr}
 8021e9a:	af00      	add	r7, sp, #0
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_0, GPIO_STATE_LOW);
 8021e9c:	2100      	movs	r1, #0
 8021e9e:	2001      	movs	r0, #1
 8021ea0:	f000 f974 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_1, GPIO_STATE_LOW);
 8021ea4:	2100      	movs	r1, #0
 8021ea6:	2002      	movs	r0, #2
 8021ea8:	f000 f970 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_2, GPIO_STATE_LOW);
 8021eac:	2100      	movs	r1, #0
 8021eae:	2004      	movs	r0, #4
 8021eb0:	f000 f96c 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_3, GPIO_STATE_HIGH);
 8021eb4:	2101      	movs	r1, #1
 8021eb6:	2008      	movs	r0, #8
 8021eb8:	f000 f968 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_4, GPIO_STATE_LOW);
 8021ebc:	2100      	movs	r1, #0
 8021ebe:	2010      	movs	r0, #16
 8021ec0:	f000 f964 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_5, GPIO_STATE_LOW);
 8021ec4:	2100      	movs	r1, #0
 8021ec6:	2020      	movs	r0, #32
 8021ec8:	f000 f960 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_6, GPIO_STATE_LOW);
 8021ecc:	2100      	movs	r1, #0
 8021ece:	2040      	movs	r0, #64	; 0x40
 8021ed0:	f000 f95c 	bl	802218c <APP_EX_IO_RequestPinState>
	APP_EX_IO_RequestPinState(GPIO_EX_PIN_7, GPIO_STATE_HIGH);
 8021ed4:	2101      	movs	r1, #1
 8021ed6:	2080      	movs	r0, #128	; 0x80
 8021ed8:	f000 f958 	bl	802218c <APP_EX_IO_RequestPinState>
}
 8021edc:	bf00      	nop
 8021ede:	bd80      	pop	{r7, pc}

08021ee0 <APP_StateChangeToFatal>:

void_t APP_StateChangeToFatal (void_t)
{
 8021ee0:	b580      	push	{r7, lr}
 8021ee2:	b082      	sub	sp, #8
 8021ee4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++)
 8021ee6:	2300      	movs	r3, #0
 8021ee8:	607b      	str	r3, [r7, #4]
 8021eea:	e04c      	b.n	8021f86 <APP_StateChangeToFatal+0xa6>
	{
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_0, GPIO_STATE_HIGH);
 8021eec:	2101      	movs	r1, #1
 8021eee:	2001      	movs	r0, #1
 8021ef0:	f000 f94c 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_1, GPIO_STATE_HIGH);
 8021ef4:	2101      	movs	r1, #1
 8021ef6:	2002      	movs	r0, #2
 8021ef8:	f000 f948 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_2, GPIO_STATE_HIGH);
 8021efc:	2101      	movs	r1, #1
 8021efe:	2004      	movs	r0, #4
 8021f00:	f000 f944 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_3, GPIO_STATE_HIGH);
 8021f04:	2101      	movs	r1, #1
 8021f06:	2008      	movs	r0, #8
 8021f08:	f000 f940 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_4, GPIO_STATE_HIGH);
 8021f0c:	2101      	movs	r1, #1
 8021f0e:	2010      	movs	r0, #16
 8021f10:	f000 f93c 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_5, GPIO_STATE_HIGH);
 8021f14:	2101      	movs	r1, #1
 8021f16:	2020      	movs	r0, #32
 8021f18:	f000 f938 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_6, GPIO_STATE_HIGH);
 8021f1c:	2101      	movs	r1, #1
 8021f1e:	2040      	movs	r0, #64	; 0x40
 8021f20:	f000 f934 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_7, GPIO_STATE_HIGH);
 8021f24:	2101      	movs	r1, #1
 8021f26:	2080      	movs	r0, #128	; 0x80
 8021f28:	f000 f930 	bl	802218c <APP_EX_IO_RequestPinState>

		APP_DAC_PlayBeep();
 8021f2c:	f7ff faa6 	bl	802147c <APP_DAC_PlayBeep>
		gos_taskSleep(100);
 8021f30:	2064      	movs	r0, #100	; 0x64
 8021f32:	f019 fd8d 	bl	803ba50 <gos_taskSleep>

		APP_EX_IO_RequestPinState(GPIO_EX_PIN_0, GPIO_STATE_LOW);
 8021f36:	2100      	movs	r1, #0
 8021f38:	2001      	movs	r0, #1
 8021f3a:	f000 f927 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_1, GPIO_STATE_LOW);
 8021f3e:	2100      	movs	r1, #0
 8021f40:	2002      	movs	r0, #2
 8021f42:	f000 f923 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_2, GPIO_STATE_LOW);
 8021f46:	2100      	movs	r1, #0
 8021f48:	2004      	movs	r0, #4
 8021f4a:	f000 f91f 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_3, GPIO_STATE_LOW);
 8021f4e:	2100      	movs	r1, #0
 8021f50:	2008      	movs	r0, #8
 8021f52:	f000 f91b 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_4, GPIO_STATE_LOW);
 8021f56:	2100      	movs	r1, #0
 8021f58:	2010      	movs	r0, #16
 8021f5a:	f000 f917 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_5, GPIO_STATE_LOW);
 8021f5e:	2100      	movs	r1, #0
 8021f60:	2020      	movs	r0, #32
 8021f62:	f000 f913 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_6, GPIO_STATE_LOW);
 8021f66:	2100      	movs	r1, #0
 8021f68:	2040      	movs	r0, #64	; 0x40
 8021f6a:	f000 f90f 	bl	802218c <APP_EX_IO_RequestPinState>
		APP_EX_IO_RequestPinState(GPIO_EX_PIN_7, GPIO_STATE_LOW);
 8021f6e:	2100      	movs	r1, #0
 8021f70:	2080      	movs	r0, #128	; 0x80
 8021f72:	f000 f90b 	bl	802218c <APP_EX_IO_RequestPinState>

		APP_DAC_PlayBeep();
 8021f76:	f7ff fa81 	bl	802147c <APP_DAC_PlayBeep>
		gos_taskSleep(100);
 8021f7a:	2064      	movs	r0, #100	; 0x64
 8021f7c:	f019 fd68 	bl	803ba50 <gos_taskSleep>
	for (int i = 0; i < 4; i++)
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	3301      	adds	r3, #1
 8021f84:	607b      	str	r3, [r7, #4]
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	2b03      	cmp	r3, #3
 8021f8a:	ddaf      	ble.n	8021eec <APP_StateChangeToFatal+0xc>
	}

	gos_kernelReset();
 8021f8c:	f018 fb90 	bl	803a6b0 <gos_kernelReset>
}
 8021f90:	bf00      	nop
 8021f92:	3708      	adds	r7, #8
 8021f94:	46bd      	mov	sp, r7
 8021f96:	bd80      	pop	{r7, pc}

08021f98 <frsWrite>:

GOS_STATIC gos_result_t frsWrite (u32_t addr, u8_t* pData, u16_t size)
{
 8021f98:	b480      	push	{r7}
 8021f9a:	b087      	sub	sp, #28
 8021f9c:	af00      	add	r7, sp, #0
 8021f9e:	60f8      	str	r0, [r7, #12]
 8021fa0:	60b9      	str	r1, [r7, #8]
 8021fa2:	4613      	mov	r3, r2
 8021fa4:	80fb      	strh	r3, [r7, #6]
	if (pData != NULL && addr < SIMULATED_MEM_SIZE_BYTES && (addr + size) < SIMULATED_MEM_SIZE_BYTES)
 8021fa6:	68bb      	ldr	r3, [r7, #8]
 8021fa8:	2b00      	cmp	r3, #0
 8021faa:	d01e      	beq.n	8021fea <frsWrite+0x52>
 8021fac:	68fb      	ldr	r3, [r7, #12]
 8021fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021fb2:	d21a      	bcs.n	8021fea <frsWrite+0x52>
 8021fb4:	88fa      	ldrh	r2, [r7, #6]
 8021fb6:	68fb      	ldr	r3, [r7, #12]
 8021fb8:	4413      	add	r3, r2
 8021fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021fbe:	d214      	bcs.n	8021fea <frsWrite+0x52>
	{
		for (int i = 0; i < size; i++)
 8021fc0:	2300      	movs	r3, #0
 8021fc2:	617b      	str	r3, [r7, #20]
 8021fc4:	e00b      	b.n	8021fde <frsWrite+0x46>
		{
			simulatedMemory[addr + i] = pData[i];
 8021fc6:	697b      	ldr	r3, [r7, #20]
 8021fc8:	68ba      	ldr	r2, [r7, #8]
 8021fca:	441a      	add	r2, r3
 8021fcc:	6979      	ldr	r1, [r7, #20]
 8021fce:	68fb      	ldr	r3, [r7, #12]
 8021fd0:	440b      	add	r3, r1
 8021fd2:	7811      	ldrb	r1, [r2, #0]
 8021fd4:	4a08      	ldr	r2, [pc, #32]	; (8021ff8 <frsWrite+0x60>)
 8021fd6:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < size; i++)
 8021fd8:	697b      	ldr	r3, [r7, #20]
 8021fda:	3301      	adds	r3, #1
 8021fdc:	617b      	str	r3, [r7, #20]
 8021fde:	88fb      	ldrh	r3, [r7, #6]
 8021fe0:	697a      	ldr	r2, [r7, #20]
 8021fe2:	429a      	cmp	r2, r3
 8021fe4:	dbef      	blt.n	8021fc6 <frsWrite+0x2e>
		}

		return GOS_SUCCESS;
 8021fe6:	2355      	movs	r3, #85	; 0x55
 8021fe8:	e000      	b.n	8021fec <frsWrite+0x54>
	}
	else
	{
		return GOS_ERROR;
 8021fea:	23ae      	movs	r3, #174	; 0xae
	}
}
 8021fec:	4618      	mov	r0, r3
 8021fee:	371c      	adds	r7, #28
 8021ff0:	46bd      	mov	sp, r7
 8021ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff6:	4770      	bx	lr
 8021ff8:	20003bf8 	.word	0x20003bf8

08021ffc <frsRead>:

GOS_STATIC gos_result_t frsRead  (u32_t addr, u8_t* pData, u16_t size)
{
 8021ffc:	b480      	push	{r7}
 8021ffe:	b087      	sub	sp, #28
 8022000:	af00      	add	r7, sp, #0
 8022002:	60f8      	str	r0, [r7, #12]
 8022004:	60b9      	str	r1, [r7, #8]
 8022006:	4613      	mov	r3, r2
 8022008:	80fb      	strh	r3, [r7, #6]
	if (pData != NULL && addr < SIMULATED_MEM_SIZE_BYTES && (addr + size) < SIMULATED_MEM_SIZE_BYTES)
 802200a:	68bb      	ldr	r3, [r7, #8]
 802200c:	2b00      	cmp	r3, #0
 802200e:	d01e      	beq.n	802204e <frsRead+0x52>
 8022010:	68fb      	ldr	r3, [r7, #12]
 8022012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022016:	d21a      	bcs.n	802204e <frsRead+0x52>
 8022018:	88fa      	ldrh	r2, [r7, #6]
 802201a:	68fb      	ldr	r3, [r7, #12]
 802201c:	4413      	add	r3, r2
 802201e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022022:	d214      	bcs.n	802204e <frsRead+0x52>
	{
		for (int i = 0; i < size; i++)
 8022024:	2300      	movs	r3, #0
 8022026:	617b      	str	r3, [r7, #20]
 8022028:	e00b      	b.n	8022042 <frsRead+0x46>
		{
			pData[i] = simulatedMemory[addr + i];
 802202a:	697a      	ldr	r2, [r7, #20]
 802202c:	68fb      	ldr	r3, [r7, #12]
 802202e:	441a      	add	r2, r3
 8022030:	697b      	ldr	r3, [r7, #20]
 8022032:	68b9      	ldr	r1, [r7, #8]
 8022034:	440b      	add	r3, r1
 8022036:	4909      	ldr	r1, [pc, #36]	; (802205c <frsRead+0x60>)
 8022038:	5c8a      	ldrb	r2, [r1, r2]
 802203a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < size; i++)
 802203c:	697b      	ldr	r3, [r7, #20]
 802203e:	3301      	adds	r3, #1
 8022040:	617b      	str	r3, [r7, #20]
 8022042:	88fb      	ldrh	r3, [r7, #6]
 8022044:	697a      	ldr	r2, [r7, #20]
 8022046:	429a      	cmp	r2, r3
 8022048:	dbef      	blt.n	802202a <frsRead+0x2e>
		}

		return GOS_SUCCESS;
 802204a:	2355      	movs	r3, #85	; 0x55
 802204c:	e000      	b.n	8022050 <frsRead+0x54>
	}
	else
	{
		return GOS_ERROR;
 802204e:	23ae      	movs	r3, #174	; 0xae
	}
}
 8022050:	4618      	mov	r0, r3
 8022052:	371c      	adds	r7, #28
 8022054:	46bd      	mov	sp, r7
 8022056:	f85d 7b04 	ldr.w	r7, [sp], #4
 802205a:	4770      	bx	lr
 802205c:	20003bf8 	.word	0x20003bf8

08022060 <APP_EX_IO_Init>:

GOS_STATIC ex_io_desc_t exIoDescriptors [DRV_MCP23017_NUM_OF_PINS];
GOS_STATIC ex_io_it_desc_t exIoItDescriptors [EX_IO_IT_MAX_NUM];

gos_result_t APP_EX_IO_Init (void_t)
{
 8022060:	b580      	push	{r7, lr}
 8022062:	b082      	sub	sp, #8
 8022064:	af00      	add	r7, sp, #0
	gos_result_t exIoInitResult = GOS_SUCCESS;
 8022066:	2355      	movs	r3, #85	; 0x55
 8022068:	71fb      	strb	r3, [r7, #7]

	exIoInitResult &= gos_taskRegister(&exIoTaskDesc, NULL);
 802206a:	2100      	movs	r1, #0
 802206c:	4824      	ldr	r0, [pc, #144]	; (8022100 <APP_EX_IO_Init+0xa0>)
 802206e:	f019 fb5d 	bl	803b72c <gos_taskRegister>
 8022072:	4603      	mov	r3, r0
 8022074:	461a      	mov	r2, r3
 8022076:	79fb      	ldrb	r3, [r7, #7]
 8022078:	4013      	ands	r3, r2
 802207a:	71fb      	strb	r3, [r7, #7]

	exIoDescriptors[0].masterPin = GPIO_EX_PIN_0;
 802207c:	4b21      	ldr	r3, [pc, #132]	; (8022104 <APP_EX_IO_Init+0xa4>)
 802207e:	2201      	movs	r2, #1
 8022080:	705a      	strb	r2, [r3, #1]
	exIoDescriptors[0].pin       = GPIO_EX_PIN_3;
 8022082:	4b20      	ldr	r3, [pc, #128]	; (8022104 <APP_EX_IO_Init+0xa4>)
 8022084:	2208      	movs	r2, #8
 8022086:	701a      	strb	r2, [r3, #0]
	exIoDescriptors[1].masterPin = GPIO_EX_PIN_1;
 8022088:	4b1e      	ldr	r3, [pc, #120]	; (8022104 <APP_EX_IO_Init+0xa4>)
 802208a:	2202      	movs	r2, #2
 802208c:	711a      	strb	r2, [r3, #4]
	exIoDescriptors[1].pin       = GPIO_EX_PIN_2;
 802208e:	4b1d      	ldr	r3, [pc, #116]	; (8022104 <APP_EX_IO_Init+0xa4>)
 8022090:	2204      	movs	r2, #4
 8022092:	70da      	strb	r2, [r3, #3]
	exIoDescriptors[2].masterPin = GPIO_EX_PIN_2;
 8022094:	4b1b      	ldr	r3, [pc, #108]	; (8022104 <APP_EX_IO_Init+0xa4>)
 8022096:	2204      	movs	r2, #4
 8022098:	71da      	strb	r2, [r3, #7]
	exIoDescriptors[2].pin       = GPIO_EX_PIN_1;
 802209a:	4b1a      	ldr	r3, [pc, #104]	; (8022104 <APP_EX_IO_Init+0xa4>)
 802209c:	2202      	movs	r2, #2
 802209e:	719a      	strb	r2, [r3, #6]
	exIoDescriptors[3].masterPin = GPIO_EX_PIN_3;
 80220a0:	4b18      	ldr	r3, [pc, #96]	; (8022104 <APP_EX_IO_Init+0xa4>)
 80220a2:	2208      	movs	r2, #8
 80220a4:	729a      	strb	r2, [r3, #10]
	exIoDescriptors[3].pin       = GPIO_EX_PIN_0;
 80220a6:	4b17      	ldr	r3, [pc, #92]	; (8022104 <APP_EX_IO_Init+0xa4>)
 80220a8:	2201      	movs	r2, #1
 80220aa:	725a      	strb	r2, [r3, #9]

	exIoDescriptors[4].masterPin = GPIO_EX_PIN_4;
 80220ac:	4b15      	ldr	r3, [pc, #84]	; (8022104 <APP_EX_IO_Init+0xa4>)
 80220ae:	2210      	movs	r2, #16
 80220b0:	735a      	strb	r2, [r3, #13]
	exIoDescriptors[4].pin       = GPIO_EX_PIN_7;
 80220b2:	4b14      	ldr	r3, [pc, #80]	; (8022104 <APP_EX_IO_Init+0xa4>)
 80220b4:	2280      	movs	r2, #128	; 0x80
 80220b6:	731a      	strb	r2, [r3, #12]
	exIoDescriptors[5].masterPin = GPIO_EX_PIN_5;
 80220b8:	4b12      	ldr	r3, [pc, #72]	; (8022104 <APP_EX_IO_Init+0xa4>)
 80220ba:	2220      	movs	r2, #32
 80220bc:	741a      	strb	r2, [r3, #16]
	exIoDescriptors[5].pin       = GPIO_EX_PIN_6;
 80220be:	4b11      	ldr	r3, [pc, #68]	; (8022104 <APP_EX_IO_Init+0xa4>)
 80220c0:	2240      	movs	r2, #64	; 0x40
 80220c2:	73da      	strb	r2, [r3, #15]
	exIoDescriptors[6].masterPin = GPIO_EX_PIN_6;
 80220c4:	4b0f      	ldr	r3, [pc, #60]	; (8022104 <APP_EX_IO_Init+0xa4>)
 80220c6:	2240      	movs	r2, #64	; 0x40
 80220c8:	74da      	strb	r2, [r3, #19]
	exIoDescriptors[6].pin       = GPIO_EX_PIN_4;
 80220ca:	4b0e      	ldr	r3, [pc, #56]	; (8022104 <APP_EX_IO_Init+0xa4>)
 80220cc:	2210      	movs	r2, #16
 80220ce:	749a      	strb	r2, [r3, #18]
	exIoDescriptors[7].masterPin = GPIO_EX_PIN_7;
 80220d0:	4b0c      	ldr	r3, [pc, #48]	; (8022104 <APP_EX_IO_Init+0xa4>)
 80220d2:	2280      	movs	r2, #128	; 0x80
 80220d4:	759a      	strb	r2, [r3, #22]
	exIoDescriptors[7].pin       = GPIO_EX_PIN_5;
 80220d6:	4b0b      	ldr	r3, [pc, #44]	; (8022104 <APP_EX_IO_Init+0xa4>)
 80220d8:	2220      	movs	r2, #32
 80220da:	755a      	strb	r2, [r3, #21]

	exIoInitResult &= gos_mutexInit(&exIoMutex);
 80220dc:	480a      	ldr	r0, [pc, #40]	; (8022108 <APP_EX_IO_Init+0xa8>)
 80220de:	f01c f911 	bl	803e304 <gos_mutexInit>
 80220e2:	4603      	mov	r3, r0
 80220e4:	461a      	mov	r2, r3
 80220e6:	79fb      	ldrb	r3, [r7, #7]
 80220e8:	4013      	ands	r3, r2
 80220ea:	71fb      	strb	r3, [r7, #7]
	//exIoInitResult &= svl_dhsRegisterDevice(&exIoDeviceHandlerDesc);

	if (exIoInitResult != GOS_SUCCESS)
 80220ec:	79fb      	ldrb	r3, [r7, #7]
 80220ee:	2b55      	cmp	r3, #85	; 0x55
 80220f0:	d001      	beq.n	80220f6 <APP_EX_IO_Init+0x96>
	{
		exIoInitResult = GOS_ERROR;
 80220f2:	23ae      	movs	r3, #174	; 0xae
 80220f4:	71fb      	strb	r3, [r7, #7]
	}

	return exIoInitResult;
 80220f6:	79fb      	ldrb	r3, [r7, #7]
}
 80220f8:	4618      	mov	r0, r3
 80220fa:	3708      	adds	r7, #8
 80220fc:	46bd      	mov	sp, r7
 80220fe:	bd80      	pop	{r7, pc}
 8022100:	200003e0 	.word	0x200003e0
 8022104:	20003fa0 	.word	0x20003fa0
 8022108:	20003f9c 	.word	0x20003f9c

0802210c <APP_EX_IO_RegisterCallback>:

gos_result_t APP_EX_IO_RegisterCallback (drv_mcp23017Pin_t pin, ex_io_edge_t edge, ex_io_callback_t callback)
{
 802210c:	b480      	push	{r7}
 802210e:	b085      	sub	sp, #20
 8022110:	af00      	add	r7, sp, #0
 8022112:	4603      	mov	r3, r0
 8022114:	603a      	str	r2, [r7, #0]
 8022116:	71fb      	strb	r3, [r7, #7]
 8022118:	460b      	mov	r3, r1
 802211a:	71bb      	strb	r3, [r7, #6]
	u8_t index = 0u;
 802211c:	2300      	movs	r3, #0
 802211e:	73fb      	strb	r3, [r7, #15]
	gos_result_t registerResult = GOS_ERROR;
 8022120:	23ae      	movs	r3, #174	; 0xae
 8022122:	73bb      	strb	r3, [r7, #14]

	if (pin <= GPIO_EX_PIN_7 && callback != NULL)
 8022124:	79fb      	ldrb	r3, [r7, #7]
 8022126:	2b80      	cmp	r3, #128	; 0x80
 8022128:	d826      	bhi.n	8022178 <APP_EX_IO_RegisterCallback+0x6c>
 802212a:	683b      	ldr	r3, [r7, #0]
 802212c:	2b00      	cmp	r3, #0
 802212e:	d023      	beq.n	8022178 <APP_EX_IO_RegisterCallback+0x6c>
	{
		for (index = 0u; index < EX_IO_IT_MAX_NUM; index++)
 8022130:	2300      	movs	r3, #0
 8022132:	73fb      	strb	r3, [r7, #15]
 8022134:	e01d      	b.n	8022172 <APP_EX_IO_RegisterCallback+0x66>
		{
			if (exIoItDescriptors[index].callback == NULL)
 8022136:	7bfb      	ldrb	r3, [r7, #15]
 8022138:	4a13      	ldr	r2, [pc, #76]	; (8022188 <APP_EX_IO_RegisterCallback+0x7c>)
 802213a:	00db      	lsls	r3, r3, #3
 802213c:	4413      	add	r3, r2
 802213e:	685b      	ldr	r3, [r3, #4]
 8022140:	2b00      	cmp	r3, #0
 8022142:	d113      	bne.n	802216c <APP_EX_IO_RegisterCallback+0x60>
			{
				exIoItDescriptors[index].pin = pin;
 8022144:	7bfb      	ldrb	r3, [r7, #15]
 8022146:	4910      	ldr	r1, [pc, #64]	; (8022188 <APP_EX_IO_RegisterCallback+0x7c>)
 8022148:	79fa      	ldrb	r2, [r7, #7]
 802214a:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
				exIoItDescriptors[index].edge = edge;
 802214e:	7bfb      	ldrb	r3, [r7, #15]
 8022150:	4a0d      	ldr	r2, [pc, #52]	; (8022188 <APP_EX_IO_RegisterCallback+0x7c>)
 8022152:	00db      	lsls	r3, r3, #3
 8022154:	4413      	add	r3, r2
 8022156:	79ba      	ldrb	r2, [r7, #6]
 8022158:	705a      	strb	r2, [r3, #1]
				exIoItDescriptors[index].callback = callback;
 802215a:	7bfb      	ldrb	r3, [r7, #15]
 802215c:	4a0a      	ldr	r2, [pc, #40]	; (8022188 <APP_EX_IO_RegisterCallback+0x7c>)
 802215e:	00db      	lsls	r3, r3, #3
 8022160:	4413      	add	r3, r2
 8022162:	683a      	ldr	r2, [r7, #0]
 8022164:	605a      	str	r2, [r3, #4]
				registerResult = GOS_SUCCESS;
 8022166:	2355      	movs	r3, #85	; 0x55
 8022168:	73bb      	strb	r3, [r7, #14]
				break;
 802216a:	e005      	b.n	8022178 <APP_EX_IO_RegisterCallback+0x6c>
		for (index = 0u; index < EX_IO_IT_MAX_NUM; index++)
 802216c:	7bfb      	ldrb	r3, [r7, #15]
 802216e:	3301      	adds	r3, #1
 8022170:	73fb      	strb	r3, [r7, #15]
 8022172:	7bfb      	ldrb	r3, [r7, #15]
 8022174:	2b07      	cmp	r3, #7
 8022176:	d9de      	bls.n	8022136 <APP_EX_IO_RegisterCallback+0x2a>
			}
		}
	}

	return registerResult;
 8022178:	7bbb      	ldrb	r3, [r7, #14]
}
 802217a:	4618      	mov	r0, r3
 802217c:	3714      	adds	r7, #20
 802217e:	46bd      	mov	sp, r7
 8022180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022184:	4770      	bx	lr
 8022186:	bf00      	nop
 8022188:	20003fb8 	.word	0x20003fb8

0802218c <APP_EX_IO_RequestPinState>:

	return requestResult;
}

gos_result_t APP_EX_IO_RequestPinState (drv_mcp23017Pin_t pin, drv_gpioState_t state)
{
 802218c:	b580      	push	{r7, lr}
 802218e:	b082      	sub	sp, #8
 8022190:	af00      	add	r7, sp, #0
 8022192:	4603      	mov	r3, r0
 8022194:	460a      	mov	r2, r1
 8022196:	71fb      	strb	r3, [r7, #7]
 8022198:	4613      	mov	r3, r2
 802219a:	71bb      	strb	r3, [r7, #6]
	return drv_mcp23017WritePin(&exIoDevice, MCP23017_PORTB, pin, state);
 802219c:	79bb      	ldrb	r3, [r7, #6]
 802219e:	79fa      	ldrb	r2, [r7, #7]
 80221a0:	2101      	movs	r1, #1
 80221a2:	4804      	ldr	r0, [pc, #16]	; (80221b4 <APP_EX_IO_RequestPinState+0x28>)
 80221a4:	f014 ff91 	bl	80370ca <drv_mcp23017WritePin>
 80221a8:	4603      	mov	r3, r0
}
 80221aa:	4618      	mov	r0, r3
 80221ac:	3708      	adds	r7, #8
 80221ae:	46bd      	mov	sp, r7
 80221b0:	bd80      	pop	{r7, pc}
 80221b2:	bf00      	nop
 80221b4:	2000044c 	.word	0x2000044c

080221b8 <APP_EX_IO_Task>:

GOS_STATIC void_t APP_EX_IO_Task (void_t)
{
 80221b8:	b580      	push	{r7, lr}
 80221ba:	b084      	sub	sp, #16
 80221bc:	af00      	add	r7, sp, #0
	drv_gpioState_t ioState = GPIO_STATE_LOW;
 80221be:	2300      	movs	r3, #0
 80221c0:	71fb      	strb	r3, [r7, #7]
	drv_mcp23017Init((void_t*)&exIoDevice);
 80221c2:	4846      	ldr	r0, [pc, #280]	; (80222dc <APP_EX_IO_Task+0x124>)
 80221c4:	f014 ff34 	bl	8037030 <drv_mcp23017Init>
	drv_mcp23017Init((void_t*)&onBoardExtender);
 80221c8:	4845      	ldr	r0, [pc, #276]	; (80222e0 <APP_EX_IO_Task+0x128>)
 80221ca:	f014 ff31 	bl	8037030 <drv_mcp23017Init>
	drv_mcp23017Init((void_t*)&onBoardExtender2);
 80221ce:	4845      	ldr	r0, [pc, #276]	; (80222e4 <APP_EX_IO_Task+0x12c>)
 80221d0:	f014 ff2e 	bl	8037030 <drv_mcp23017Init>

	for (;;)
	{
		for (int i = 0; i < DRV_MCP23017_NUM_OF_PINS; i++)
 80221d4:	2300      	movs	r3, #0
 80221d6:	60fb      	str	r3, [r7, #12]
 80221d8:	e078      	b.n	80222cc <APP_EX_IO_Task+0x114>
		{
			(void_t) gos_mutexLock(&exIoMutex, GOS_MUTEX_ENDLESS_TMO);
 80221da:	f04f 31ff 	mov.w	r1, #4294967295
 80221de:	4842      	ldr	r0, [pc, #264]	; (80222e8 <APP_EX_IO_Task+0x130>)
 80221e0:	f01c f8aa 	bl	803e338 <gos_mutexLock>
			(void_t) drv_mcp23017ReadPin(&exIoDevice, MCP23017_PORTA, exIoDescriptors[i].masterPin, &ioState);
 80221e4:	4941      	ldr	r1, [pc, #260]	; (80222ec <APP_EX_IO_Task+0x134>)
 80221e6:	68fa      	ldr	r2, [r7, #12]
 80221e8:	4613      	mov	r3, r2
 80221ea:	005b      	lsls	r3, r3, #1
 80221ec:	4413      	add	r3, r2
 80221ee:	440b      	add	r3, r1
 80221f0:	3301      	adds	r3, #1
 80221f2:	781a      	ldrb	r2, [r3, #0]
 80221f4:	1dfb      	adds	r3, r7, #7
 80221f6:	2100      	movs	r1, #0
 80221f8:	4838      	ldr	r0, [pc, #224]	; (80222dc <APP_EX_IO_Task+0x124>)
 80221fa:	f014 ff32 	bl	8037062 <drv_mcp23017ReadPin>
			(void_t) gos_mutexUnlock(&exIoMutex);
 80221fe:	483a      	ldr	r0, [pc, #232]	; (80222e8 <APP_EX_IO_Task+0x130>)
 8022200:	f01c f9a0 	bl	803e544 <gos_mutexUnlock>

			if (ioState != exIoDescriptors[i].prevState)
 8022204:	4939      	ldr	r1, [pc, #228]	; (80222ec <APP_EX_IO_Task+0x134>)
 8022206:	68fa      	ldr	r2, [r7, #12]
 8022208:	4613      	mov	r3, r2
 802220a:	005b      	lsls	r3, r3, #1
 802220c:	4413      	add	r3, r2
 802220e:	440b      	add	r3, r1
 8022210:	3302      	adds	r3, #2
 8022212:	781a      	ldrb	r2, [r3, #0]
 8022214:	79fb      	ldrb	r3, [r7, #7]
 8022216:	429a      	cmp	r2, r3
 8022218:	d055      	beq.n	80222c6 <APP_EX_IO_Task+0x10e>
			{
				(void_t) gos_mutexLock(&exIoMutex, GOS_MUTEX_ENDLESS_TMO);
 802221a:	f04f 31ff 	mov.w	r1, #4294967295
 802221e:	4832      	ldr	r0, [pc, #200]	; (80222e8 <APP_EX_IO_Task+0x130>)
 8022220:	f01c f88a 	bl	803e338 <gos_mutexLock>
				(void_t) drv_mcp23017WritePin(&exIoDevice, MCP23017_PORTB, exIoDescriptors[i].pin, ioState);
 8022224:	4931      	ldr	r1, [pc, #196]	; (80222ec <APP_EX_IO_Task+0x134>)
 8022226:	68fa      	ldr	r2, [r7, #12]
 8022228:	4613      	mov	r3, r2
 802222a:	005b      	lsls	r3, r3, #1
 802222c:	4413      	add	r3, r2
 802222e:	440b      	add	r3, r1
 8022230:	781a      	ldrb	r2, [r3, #0]
 8022232:	79fb      	ldrb	r3, [r7, #7]
 8022234:	2101      	movs	r1, #1
 8022236:	4829      	ldr	r0, [pc, #164]	; (80222dc <APP_EX_IO_Task+0x124>)
 8022238:	f014 ff47 	bl	80370ca <drv_mcp23017WritePin>
				(void_t) gos_mutexUnlock(&exIoMutex);
 802223c:	482a      	ldr	r0, [pc, #168]	; (80222e8 <APP_EX_IO_Task+0x130>)
 802223e:	f01c f981 	bl	803e544 <gos_mutexUnlock>

				for (int j = 0; j < EX_IO_IT_MAX_NUM; j++)
 8022242:	2300      	movs	r3, #0
 8022244:	60bb      	str	r3, [r7, #8]
 8022246:	e031      	b.n	80222ac <APP_EX_IO_Task+0xf4>
				{
					if (exIoItDescriptors[j].pin == exIoDescriptors[i].masterPin &&
 8022248:	4a29      	ldr	r2, [pc, #164]	; (80222f0 <APP_EX_IO_Task+0x138>)
 802224a:	68bb      	ldr	r3, [r7, #8]
 802224c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 8022250:	4826      	ldr	r0, [pc, #152]	; (80222ec <APP_EX_IO_Task+0x134>)
 8022252:	68fa      	ldr	r2, [r7, #12]
 8022254:	4613      	mov	r3, r2
 8022256:	005b      	lsls	r3, r3, #1
 8022258:	4413      	add	r3, r2
 802225a:	4403      	add	r3, r0
 802225c:	3301      	adds	r3, #1
 802225e:	781b      	ldrb	r3, [r3, #0]
 8022260:	4299      	cmp	r1, r3
 8022262:	d120      	bne.n	80222a6 <APP_EX_IO_Task+0xee>
						((exIoItDescriptors[j].edge == GPIO_EX_EDGE_BOTH) ||
 8022264:	4a22      	ldr	r2, [pc, #136]	; (80222f0 <APP_EX_IO_Task+0x138>)
 8022266:	68bb      	ldr	r3, [r7, #8]
 8022268:	00db      	lsls	r3, r3, #3
 802226a:	4413      	add	r3, r2
 802226c:	785b      	ldrb	r3, [r3, #1]
					if (exIoItDescriptors[j].pin == exIoDescriptors[i].masterPin &&
 802226e:	2b02      	cmp	r3, #2
 8022270:	d013      	beq.n	802229a <APP_EX_IO_Task+0xe2>
						(ioState == GPIO_STATE_HIGH && exIoItDescriptors[j].edge == GPIO_EX_EDGE_RISING) ||
 8022272:	79fb      	ldrb	r3, [r7, #7]
						((exIoItDescriptors[j].edge == GPIO_EX_EDGE_BOTH) ||
 8022274:	2b01      	cmp	r3, #1
 8022276:	d106      	bne.n	8022286 <APP_EX_IO_Task+0xce>
						(ioState == GPIO_STATE_HIGH && exIoItDescriptors[j].edge == GPIO_EX_EDGE_RISING) ||
 8022278:	4a1d      	ldr	r2, [pc, #116]	; (80222f0 <APP_EX_IO_Task+0x138>)
 802227a:	68bb      	ldr	r3, [r7, #8]
 802227c:	00db      	lsls	r3, r3, #3
 802227e:	4413      	add	r3, r2
 8022280:	785b      	ldrb	r3, [r3, #1]
 8022282:	2b01      	cmp	r3, #1
 8022284:	d009      	beq.n	802229a <APP_EX_IO_Task+0xe2>
						(ioState == GPIO_STATE_LOW && exIoItDescriptors[j].edge == GPIO_EX_EDGE_FALLING)))
 8022286:	79fb      	ldrb	r3, [r7, #7]
						(ioState == GPIO_STATE_HIGH && exIoItDescriptors[j].edge == GPIO_EX_EDGE_RISING) ||
 8022288:	2b00      	cmp	r3, #0
 802228a:	d10c      	bne.n	80222a6 <APP_EX_IO_Task+0xee>
						(ioState == GPIO_STATE_LOW && exIoItDescriptors[j].edge == GPIO_EX_EDGE_FALLING)))
 802228c:	4a18      	ldr	r2, [pc, #96]	; (80222f0 <APP_EX_IO_Task+0x138>)
 802228e:	68bb      	ldr	r3, [r7, #8]
 8022290:	00db      	lsls	r3, r3, #3
 8022292:	4413      	add	r3, r2
 8022294:	785b      	ldrb	r3, [r3, #1]
 8022296:	2b00      	cmp	r3, #0
 8022298:	d105      	bne.n	80222a6 <APP_EX_IO_Task+0xee>
					{
						exIoItDescriptors[j].callback();
 802229a:	4a15      	ldr	r2, [pc, #84]	; (80222f0 <APP_EX_IO_Task+0x138>)
 802229c:	68bb      	ldr	r3, [r7, #8]
 802229e:	00db      	lsls	r3, r3, #3
 80222a0:	4413      	add	r3, r2
 80222a2:	685b      	ldr	r3, [r3, #4]
 80222a4:	4798      	blx	r3
				for (int j = 0; j < EX_IO_IT_MAX_NUM; j++)
 80222a6:	68bb      	ldr	r3, [r7, #8]
 80222a8:	3301      	adds	r3, #1
 80222aa:	60bb      	str	r3, [r7, #8]
 80222ac:	68bb      	ldr	r3, [r7, #8]
 80222ae:	2b07      	cmp	r3, #7
 80222b0:	d9ca      	bls.n	8022248 <APP_EX_IO_Task+0x90>
					}
				}

				exIoDescriptors[i].prevState = ioState;
 80222b2:	79f8      	ldrb	r0, [r7, #7]
 80222b4:	490d      	ldr	r1, [pc, #52]	; (80222ec <APP_EX_IO_Task+0x134>)
 80222b6:	68fa      	ldr	r2, [r7, #12]
 80222b8:	4613      	mov	r3, r2
 80222ba:	005b      	lsls	r3, r3, #1
 80222bc:	4413      	add	r3, r2
 80222be:	440b      	add	r3, r1
 80222c0:	3302      	adds	r3, #2
 80222c2:	4602      	mov	r2, r0
 80222c4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < DRV_MCP23017_NUM_OF_PINS; i++)
 80222c6:	68fb      	ldr	r3, [r7, #12]
 80222c8:	3301      	adds	r3, #1
 80222ca:	60fb      	str	r3, [r7, #12]
 80222cc:	68fb      	ldr	r3, [r7, #12]
 80222ce:	2b07      	cmp	r3, #7
 80222d0:	dd83      	ble.n	80221da <APP_EX_IO_Task+0x22>
			}
		}

		gos_taskSleep(100);
 80222d2:	2064      	movs	r0, #100	; 0x64
 80222d4:	f019 fbbc 	bl	803ba50 <gos_taskSleep>
		for (int i = 0; i < DRV_MCP23017_NUM_OF_PINS; i++)
 80222d8:	e77c      	b.n	80221d4 <APP_EX_IO_Task+0x1c>
 80222da:	bf00      	nop
 80222dc:	2000044c 	.word	0x2000044c
 80222e0:	20000464 	.word	0x20000464
 80222e4:	2000047c 	.word	0x2000047c
 80222e8:	20003f9c 	.word	0x20003f9c
 80222ec:	20003fa0 	.word	0x20003fa0
 80222f0:	20003fb8 	.word	0x20003fb8

080222f4 <APP_GcpInit>:
	/* External task ID	*/
	/* Privilege level	*/	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGED_USER
};

gos_result_t APP_GcpInit (void_t)
{
 80222f4:	b580      	push	{r7, lr}
 80222f6:	b082      	sub	sp, #8
 80222f8:	af00      	add	r7, sp, #0
	gos_result_t gcpInitResult = GOS_SUCCESS;
 80222fa:	2355      	movs	r3, #85	; 0x55
 80222fc:	71fb      	strb	r3, [r7, #7]

	gcpInitResult &= gos_taskRegister(&gcpTransmitTaskDesc, NULL);
 80222fe:	2100      	movs	r1, #0
 8022300:	4811      	ldr	r0, [pc, #68]	; (8022348 <APP_GcpInit+0x54>)
 8022302:	f019 fa13 	bl	803b72c <gos_taskRegister>
 8022306:	4603      	mov	r3, r0
 8022308:	461a      	mov	r2, r3
 802230a:	79fb      	ldrb	r3, [r7, #7]
 802230c:	4013      	ands	r3, r2
 802230e:	71fb      	strb	r3, [r7, #7]
	gcpInitResult &= gos_taskRegister(&gcpReceiveTaskDesc, NULL);
 8022310:	2100      	movs	r1, #0
 8022312:	480e      	ldr	r0, [pc, #56]	; (802234c <APP_GcpInit+0x58>)
 8022314:	f019 fa0a 	bl	803b72c <gos_taskRegister>
 8022318:	4603      	mov	r3, r0
 802231a:	461a      	mov	r2, r3
 802231c:	79fb      	ldrb	r3, [r7, #7]
 802231e:	4013      	ands	r3, r2
 8022320:	71fb      	strb	r3, [r7, #7]
	gcpInitResult &= gos_mutexInit(&bufferMutex);
 8022322:	480b      	ldr	r0, [pc, #44]	; (8022350 <APP_GcpInit+0x5c>)
 8022324:	f01b ffee 	bl	803e304 <gos_mutexInit>
 8022328:	4603      	mov	r3, r0
 802232a:	461a      	mov	r2, r3
 802232c:	79fb      	ldrb	r3, [r7, #7]
 802232e:	4013      	ands	r3, r2
 8022330:	71fb      	strb	r3, [r7, #7]

	if (gcpInitResult != GOS_SUCCESS)
 8022332:	79fb      	ldrb	r3, [r7, #7]
 8022334:	2b55      	cmp	r3, #85	; 0x55
 8022336:	d001      	beq.n	802233c <APP_GcpInit+0x48>
	{
		gcpInitResult = GOS_ERROR;
 8022338:	23ae      	movs	r3, #174	; 0xae
 802233a:	71fb      	strb	r3, [r7, #7]
	}

	return gcpInitResult;
 802233c:	79fb      	ldrb	r3, [r7, #7]
}
 802233e:	4618      	mov	r0, r3
 8022340:	3708      	adds	r7, #8
 8022342:	46bd      	mov	sp, r7
 8022344:	bd80      	pop	{r7, pc}
 8022346:	bf00      	nop
 8022348:	200004b0 	.word	0x200004b0
 802234c:	2000051c 	.word	0x2000051c
 8022350:	200041fc 	.word	0x200041fc

08022354 <APP_GcpTransmitTask>:

/*
 * Function: APP_GcpTransmitTask
 */
GOS_STATIC void_t APP_GcpTransmitTask (void_t)
{
 8022354:	b5b0      	push	{r4, r5, r7, lr}
 8022356:	b096      	sub	sp, #88	; 0x58
 8022358:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	app_gcp_message_t queueTestMessage =
 802235a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802235e:	2224      	movs	r2, #36	; 0x24
 8022360:	2100      	movs	r1, #0
 8022362:	4618      	mov	r0, r3
 8022364:	f020 fc50 	bl	8042c08 <memset>
 8022368:	4b68      	ldr	r3, [pc, #416]	; (802250c <APP_GcpTransmitTask+0x1b8>)
 802236a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 802236e:	461d      	mov	r5, r3
 8022370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022374:	e895 0003 	ldmia.w	r5, {r0, r1}
 8022378:	6020      	str	r0, [r4, #0]
 802237a:	3404      	adds	r4, #4
 802237c:	8021      	strh	r1, [r4, #0]
 802237e:	3402      	adds	r4, #2
 8022380:	0c0b      	lsrs	r3, r1, #16
 8022382:	7023      	strb	r3, [r4, #0]
 8022384:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8022388:	2200      	movs	r2, #0
 802238a:	601a      	str	r2, [r3, #0]
 802238c:	605a      	str	r2, [r3, #4]
 802238e:	721a      	strb	r2, [r3, #8]
	{
		.stringMessage = "GCP queue test string.",
	};
	u16_t queueTestMsgId = 0xA;
 8022390:	230a      	movs	r3, #10
 8022392:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	u16_t queueTestMsgPayloadSize = sizeof(queueTestMessage);
 8022396:	2324      	movs	r3, #36	; 0x24
 8022398:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	app_gcp_message_t bufferTestMessage =
 802239c:	463b      	mov	r3, r7
 802239e:	2224      	movs	r2, #36	; 0x24
 80223a0:	2100      	movs	r1, #0
 80223a2:	4618      	mov	r0, r3
 80223a4:	f020 fc30 	bl	8042c08 <memset>
 80223a8:	4b59      	ldr	r3, [pc, #356]	; (8022510 <APP_GcpTransmitTask+0x1bc>)
 80223aa:	463c      	mov	r4, r7
 80223ac:	461d      	mov	r5, r3
 80223ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80223b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80223b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80223b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80223ba:	f107 0318 	add.w	r3, r7, #24
 80223be:	2200      	movs	r2, #0
 80223c0:	601a      	str	r2, [r3, #0]
 80223c2:	605a      	str	r2, [r3, #4]
	{
		.stringMessage = "GCP buffer test string.",
	};
	u16_t bufferTestMsgId = 0xB;
 80223c4:	230b      	movs	r3, #11
 80223c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	u16_t bufferTestMsgPayloadSize = sizeof(bufferTestMessage);
 80223ca:	2324      	movs	r3, #36	; 0x24
 80223cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	};*/

	/*
	 * Function code.
	 */
	gos_signalSubscribe(buttonPressedSignal, APP_ButtonPressedSignalHandler, GOS_PRIV_TASK_MANIPULATE);
 80223d0:	4b50      	ldr	r3, [pc, #320]	; (8022514 <APP_GcpTransmitTask+0x1c0>)
 80223d2:	781b      	ldrb	r3, [r3, #0]
 80223d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80223d8:	494f      	ldr	r1, [pc, #316]	; (8022518 <APP_GcpTransmitTask+0x1c4>)
 80223da:	4618      	mov	r0, r3
 80223dc:	f01d f978 	bl	803f6d0 <gos_signalSubscribe>
	gos_gcpRegisterPhysicalDriver(APP_GCP_QUEUE_CHANNEL, APP_GCP_QueueTransmitter, APP_GCP_QueueReceiver);
 80223e0:	4a4e      	ldr	r2, [pc, #312]	; (802251c <APP_GcpTransmitTask+0x1c8>)
 80223e2:	494f      	ldr	r1, [pc, #316]	; (8022520 <APP_GcpTransmitTask+0x1cc>)
 80223e4:	2001      	movs	r0, #1
 80223e6:	f01b f9d9 	bl	803d79c <gos_gcpRegisterPhysicalDriver>
	gos_gcpRegisterPhysicalDriver(APP_GCP_BUFFER_CHANNEL, APP_GCP_BufferTransmitter, APP_GCP_BufferReceiver);
 80223ea:	4a4e      	ldr	r2, [pc, #312]	; (8022524 <APP_GcpTransmitTask+0x1d0>)
 80223ec:	494e      	ldr	r1, [pc, #312]	; (8022528 <APP_GcpTransmitTask+0x1d4>)
 80223ee:	2002      	movs	r0, #2
 80223f0:	f01b f9d4 	bl	803d79c <gos_gcpRegisterPhysicalDriver>

	if (gos_queueCreate(&gcpQueue) != GOS_SUCCESS)
 80223f4:	484d      	ldr	r0, [pc, #308]	; (802252c <APP_GcpTransmitTask+0x1d8>)
 80223f6:	f01c f963 	bl	803e6c0 <gos_queueCreate>
 80223fa:	4603      	mov	r3, r0
 80223fc:	2b55      	cmp	r3, #85	; 0x55
 80223fe:	d005      	beq.n	802240c <APP_GcpTransmitTask+0xb8>
	{
		gos_errorHandler(GOS_ERROR_LEVEL_USER_FATAL, __func__, __LINE__, "GCP queue creation error.");
 8022400:	4b4b      	ldr	r3, [pc, #300]	; (8022530 <APP_GcpTransmitTask+0x1dc>)
 8022402:	227f      	movs	r2, #127	; 0x7f
 8022404:	494b      	ldr	r1, [pc, #300]	; (8022534 <APP_GcpTransmitTask+0x1e0>)
 8022406:	201a      	movs	r0, #26
 8022408:	f01b f8c6 	bl	803d598 <gos_errorHandler>
	}

	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 802240c:	2001      	movs	r0, #1
 802240e:	f017 f925 	bl	803965c <svl_dsmWaitForState>

	for(;;)
	{
		queueTestMessage.timeStamp = gos_kernelGetSysTicks();
 8022412:	f018 f92f 	bl	803a674 <gos_kernelGetSysTicks>
 8022416:	4603      	mov	r3, r0
 8022418:	647b      	str	r3, [r7, #68]	; 0x44

		if (gos_gcpTransmitMessage(APP_GCP_QUEUE_CHANNEL, queueTestMsgId, &queueTestMessage, queueTestMsgPayloadSize, 8) == GOS_SUCCESS)
 802241a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 802241e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8022422:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8022426:	2008      	movs	r0, #8
 8022428:	9000      	str	r0, [sp, #0]
 802242a:	2001      	movs	r0, #1
 802242c:	f01b f9de 	bl	803d7ec <gos_gcpTransmitMessage>
 8022430:	4603      	mov	r3, r0
 8022432:	2b55      	cmp	r3, #85	; 0x55
 8022434:	d121      	bne.n	802247a <APP_GcpTransmitTask+0x126>
		{
			gos_traceTrace(GOS_TRUE, "-----------------------------\r\n");
 8022436:	4940      	ldr	r1, [pc, #256]	; (8022538 <APP_GcpTransmitTask+0x1e4>)
 8022438:	2036      	movs	r0, #54	; 0x36
 802243a:	f01e faad 	bl	8040998 <gos_traceTrace>
			gos_traceTraceFormatted(GOS_TRUE, "Channel:              %u\r\n", APP_GCP_QUEUE_CHANNEL);
 802243e:	2201      	movs	r2, #1
 8022440:	493e      	ldr	r1, [pc, #248]	; (802253c <APP_GcpTransmitTask+0x1e8>)
 8022442:	2036      	movs	r0, #54	; 0x36
 8022444:	f01e fbc4 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Message sent via GCP: %s\r\n", queueTestMessage.stringMessage);
 8022448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802244c:	461a      	mov	r2, r3
 802244e:	493c      	ldr	r1, [pc, #240]	; (8022540 <APP_GcpTransmitTask+0x1ec>)
 8022450:	2036      	movs	r0, #54	; 0x36
 8022452:	f01e fbbd 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Tick:                 %lu\r\n", queueTestMessage.timeStamp);
 8022456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022458:	461a      	mov	r2, r3
 802245a:	493a      	ldr	r1, [pc, #232]	; (8022544 <APP_GcpTransmitTask+0x1f0>)
 802245c:	2036      	movs	r0, #54	; 0x36
 802245e:	f01e fbb7 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Message ID:           0x%X\r\n", queueTestMsgId);
 8022462:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8022466:	461a      	mov	r2, r3
 8022468:	4937      	ldr	r1, [pc, #220]	; (8022548 <APP_GcpTransmitTask+0x1f4>)
 802246a:	2036      	movs	r0, #54	; 0x36
 802246c:	f01e fbb0 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTrace(GOS_TRUE, "-----------------------------\r\n");
 8022470:	4931      	ldr	r1, [pc, #196]	; (8022538 <APP_GcpTransmitTask+0x1e4>)
 8022472:	2036      	movs	r0, #54	; 0x36
 8022474:	f01e fa90 	bl	8040998 <gos_traceTrace>
 8022478:	e005      	b.n	8022486 <APP_GcpTransmitTask+0x132>
		}
		else
		{
			gos_errorHandler(GOS_ERROR_LEVEL_USER_WARNING, __func__, __LINE__, "GCP message TX0 error.");
 802247a:	4b34      	ldr	r3, [pc, #208]	; (802254c <APP_GcpTransmitTask+0x1f8>)
 802247c:	2293      	movs	r2, #147	; 0x93
 802247e:	492d      	ldr	r1, [pc, #180]	; (8022534 <APP_GcpTransmitTask+0x1e0>)
 8022480:	203a      	movs	r0, #58	; 0x3a
 8022482:	f01b f889 	bl	803d598 <gos_errorHandler>
		}

		gos_taskSleep(1000);
 8022486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802248a:	f019 fae1 	bl	803ba50 <gos_taskSleep>

		bufferTestMessage.timeStamp = gos_kernelGetSysTicks();
 802248e:	f018 f8f1 	bl	803a674 <gos_kernelGetSysTicks>
 8022492:	4603      	mov	r3, r0
 8022494:	623b      	str	r3, [r7, #32]

		if (gos_gcpTransmitMessage(APP_GCP_BUFFER_CHANNEL, bufferTestMsgId, (void_t*)&bufferTestMessage, bufferTestMsgPayloadSize, 8) == GOS_SUCCESS)
 8022496:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802249a:	463a      	mov	r2, r7
 802249c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80224a0:	2008      	movs	r0, #8
 80224a2:	9000      	str	r0, [sp, #0]
 80224a4:	2002      	movs	r0, #2
 80224a6:	f01b f9a1 	bl	803d7ec <gos_gcpTransmitMessage>
 80224aa:	4603      	mov	r3, r0
 80224ac:	2b55      	cmp	r3, #85	; 0x55
 80224ae:	d120      	bne.n	80224f2 <APP_GcpTransmitTask+0x19e>
		{

			gos_traceTrace(GOS_TRUE, "-----------------------------\r\n");
 80224b0:	4921      	ldr	r1, [pc, #132]	; (8022538 <APP_GcpTransmitTask+0x1e4>)
 80224b2:	2036      	movs	r0, #54	; 0x36
 80224b4:	f01e fa70 	bl	8040998 <gos_traceTrace>
			gos_traceTraceFormatted(GOS_TRUE, "Channel:              %u\r\n", APP_GCP_BUFFER_CHANNEL);
 80224b8:	2202      	movs	r2, #2
 80224ba:	4920      	ldr	r1, [pc, #128]	; (802253c <APP_GcpTransmitTask+0x1e8>)
 80224bc:	2036      	movs	r0, #54	; 0x36
 80224be:	f01e fb87 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Message sent via GCP: %s\r\n", bufferTestMessage.stringMessage);
 80224c2:	463b      	mov	r3, r7
 80224c4:	461a      	mov	r2, r3
 80224c6:	491e      	ldr	r1, [pc, #120]	; (8022540 <APP_GcpTransmitTask+0x1ec>)
 80224c8:	2036      	movs	r0, #54	; 0x36
 80224ca:	f01e fb81 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Tick:                 %lu\r\n", bufferTestMessage.timeStamp);
 80224ce:	6a3b      	ldr	r3, [r7, #32]
 80224d0:	461a      	mov	r2, r3
 80224d2:	491c      	ldr	r1, [pc, #112]	; (8022544 <APP_GcpTransmitTask+0x1f0>)
 80224d4:	2036      	movs	r0, #54	; 0x36
 80224d6:	f01e fb7b 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Message ID:           0x%X\r\n", bufferTestMsgId);
 80224da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80224de:	461a      	mov	r2, r3
 80224e0:	4919      	ldr	r1, [pc, #100]	; (8022548 <APP_GcpTransmitTask+0x1f4>)
 80224e2:	2036      	movs	r0, #54	; 0x36
 80224e4:	f01e fb74 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTrace(GOS_TRUE, "-----------------------------\r\n");
 80224e8:	4913      	ldr	r1, [pc, #76]	; (8022538 <APP_GcpTransmitTask+0x1e4>)
 80224ea:	2036      	movs	r0, #54	; 0x36
 80224ec:	f01e fa54 	bl	8040998 <gos_traceTrace>
 80224f0:	e006      	b.n	8022500 <APP_GcpTransmitTask+0x1ac>
		}
		else
		{
			gos_errorHandler(GOS_ERROR_LEVEL_USER_WARNING, __func__, __LINE__, "GCP message TX1 error.");
 80224f2:	4b17      	ldr	r3, [pc, #92]	; (8022550 <APP_GcpTransmitTask+0x1fc>)
 80224f4:	22a6      	movs	r2, #166	; 0xa6
 80224f6:	490f      	ldr	r1, [pc, #60]	; (8022534 <APP_GcpTransmitTask+0x1e0>)
 80224f8:	203a      	movs	r0, #58	; 0x3a
 80224fa:	f01b f84d 	bl	803d598 <gos_errorHandler>
			GOS_NOP;
 80224fe:	bf00      	nop
		}

		gos_taskSleep(1000);
 8022500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022504:	f019 faa4 	bl	803ba50 <gos_taskSleep>
		queueTestMessage.timeStamp = gos_kernelGetSysTicks();
 8022508:	e783      	b.n	8022412 <APP_GcpTransmitTask+0xbe>
 802250a:	bf00      	nop
 802250c:	08046998 	.word	0x08046998
 8022510:	080469b8 	.word	0x080469b8
 8022514:	200036e8 	.word	0x200036e8
 8022518:	0802281d 	.word	0x0802281d
 802251c:	0802266d 	.word	0x0802266d
 8022520:	080226c1 	.word	0x080226c1
 8022524:	08022715 	.word	0x08022715
 8022528:	08022799 	.word	0x08022799
 802252c:	20000494 	.word	0x20000494
 8022530:	080468b8 	.word	0x080468b8
 8022534:	08048bf4 	.word	0x08048bf4
 8022538:	080468d4 	.word	0x080468d4
 802253c:	080468f4 	.word	0x080468f4
 8022540:	08046910 	.word	0x08046910
 8022544:	0804692c 	.word	0x0804692c
 8022548:	08046948 	.word	0x08046948
 802254c:	08046968 	.word	0x08046968
 8022550:	08046980 	.word	0x08046980

08022554 <APP_GcpReceiveTask>:

/*
 * Function: APP_GcpReceiveTask
 */
GOS_STATIC void_t APP_GcpReceiveTask (void_t)
{
 8022554:	b580      	push	{r7, lr}
 8022556:	b08c      	sub	sp, #48	; 0x30
 8022558:	af02      	add	r7, sp, #8


	/*
	 * Function code.
	 */
	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 802255a:	2001      	movs	r0, #1
 802255c:	f017 f87e 	bl	803965c <svl_dsmWaitForState>

	for (;;)
	{
		if (gos_gcpReceiveMessage(APP_GCP_QUEUE_CHANNEL, &receivedMsgId, (void_t*)&receivedMessage, sizeof(receivedMessage), 8) == GOS_SUCCESS)
 8022560:	1d3a      	adds	r2, r7, #4
 8022562:	1cb9      	adds	r1, r7, #2
 8022564:	2308      	movs	r3, #8
 8022566:	9300      	str	r3, [sp, #0]
 8022568:	2324      	movs	r3, #36	; 0x24
 802256a:	2001      	movs	r0, #1
 802256c:	f01b fa70 	bl	803da50 <gos_gcpReceiveMessage>
 8022570:	4603      	mov	r3, r0
 8022572:	2b55      	cmp	r3, #85	; 0x55
 8022574:	d11f      	bne.n	80225b6 <APP_GcpReceiveTask+0x62>
		{
			gos_traceTrace(GOS_TRUE, "-----------------------------\r\n");
 8022576:	4933      	ldr	r1, [pc, #204]	; (8022644 <APP_GcpReceiveTask+0xf0>)
 8022578:	2036      	movs	r0, #54	; 0x36
 802257a:	f01e fa0d 	bl	8040998 <gos_traceTrace>
			gos_traceTraceFormatted(GOS_TRUE, "Channel:                  %u\r\n", APP_GCP_QUEUE_CHANNEL);
 802257e:	2201      	movs	r2, #1
 8022580:	4931      	ldr	r1, [pc, #196]	; (8022648 <APP_GcpReceiveTask+0xf4>)
 8022582:	2036      	movs	r0, #54	; 0x36
 8022584:	f01e fb24 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Message received via GCP: %s\r\n", receivedMessage.stringMessage);
 8022588:	1d3b      	adds	r3, r7, #4
 802258a:	461a      	mov	r2, r3
 802258c:	492f      	ldr	r1, [pc, #188]	; (802264c <APP_GcpReceiveTask+0xf8>)
 802258e:	2036      	movs	r0, #54	; 0x36
 8022590:	f01e fb1e 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Tick:                     %lu\r\n", receivedMessage.timeStamp);
 8022594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022596:	461a      	mov	r2, r3
 8022598:	492d      	ldr	r1, [pc, #180]	; (8022650 <APP_GcpReceiveTask+0xfc>)
 802259a:	2036      	movs	r0, #54	; 0x36
 802259c:	f01e fb18 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Message ID:               0x%X\r\n", receivedMsgId);
 80225a0:	887b      	ldrh	r3, [r7, #2]
 80225a2:	461a      	mov	r2, r3
 80225a4:	492b      	ldr	r1, [pc, #172]	; (8022654 <APP_GcpReceiveTask+0x100>)
 80225a6:	2036      	movs	r0, #54	; 0x36
 80225a8:	f01e fb12 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTrace(GOS_TRUE, "-----------------------------\r\n");
 80225ac:	4925      	ldr	r1, [pc, #148]	; (8022644 <APP_GcpReceiveTask+0xf0>)
 80225ae:	2036      	movs	r0, #54	; 0x36
 80225b0:	f01e f9f2 	bl	8040998 <gos_traceTrace>
 80225b4:	e005      	b.n	80225c2 <APP_GcpReceiveTask+0x6e>
		}
		else
		{
			gos_errorHandler(GOS_ERROR_LEVEL_USER_WARNING, __func__, __LINE__, "GCP message RX0 error.");
 80225b6:	4b28      	ldr	r3, [pc, #160]	; (8022658 <APP_GcpReceiveTask+0x104>)
 80225b8:	22cc      	movs	r2, #204	; 0xcc
 80225ba:	4928      	ldr	r1, [pc, #160]	; (802265c <APP_GcpReceiveTask+0x108>)
 80225bc:	203a      	movs	r0, #58	; 0x3a
 80225be:	f01a ffeb 	bl	803d598 <gos_errorHandler>
		}

		gos_taskSleep(1000);
 80225c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80225c6:	f019 fa43 	bl	803ba50 <gos_taskSleep>


		if (gos_gcpReceiveMessage(APP_GCP_BUFFER_CHANNEL, &receivedMsgId, (void_t*)&receivedMessage, sizeof(receivedMessage), 8) == GOS_SUCCESS)
 80225ca:	1d3a      	adds	r2, r7, #4
 80225cc:	1cb9      	adds	r1, r7, #2
 80225ce:	2308      	movs	r3, #8
 80225d0:	9300      	str	r3, [sp, #0]
 80225d2:	2324      	movs	r3, #36	; 0x24
 80225d4:	2002      	movs	r0, #2
 80225d6:	f01b fa3b 	bl	803da50 <gos_gcpReceiveMessage>
 80225da:	4603      	mov	r3, r0
 80225dc:	2b55      	cmp	r3, #85	; 0x55
 80225de:	d11f      	bne.n	8022620 <APP_GcpReceiveTask+0xcc>
		{
			gos_traceTrace(GOS_TRUE, "-----------------------------\r\n");
 80225e0:	4918      	ldr	r1, [pc, #96]	; (8022644 <APP_GcpReceiveTask+0xf0>)
 80225e2:	2036      	movs	r0, #54	; 0x36
 80225e4:	f01e f9d8 	bl	8040998 <gos_traceTrace>
			gos_traceTraceFormatted(GOS_TRUE, "Channel:                  %u\r\n", APP_GCP_BUFFER_CHANNEL);
 80225e8:	2202      	movs	r2, #2
 80225ea:	4917      	ldr	r1, [pc, #92]	; (8022648 <APP_GcpReceiveTask+0xf4>)
 80225ec:	2036      	movs	r0, #54	; 0x36
 80225ee:	f01e faef 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Message received via GCP: %s\r\n", receivedMessage.stringMessage);
 80225f2:	1d3b      	adds	r3, r7, #4
 80225f4:	461a      	mov	r2, r3
 80225f6:	4915      	ldr	r1, [pc, #84]	; (802264c <APP_GcpReceiveTask+0xf8>)
 80225f8:	2036      	movs	r0, #54	; 0x36
 80225fa:	f01e fae9 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Tick:                     %lu\r\n", receivedMessage.timeStamp);
 80225fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022600:	461a      	mov	r2, r3
 8022602:	4913      	ldr	r1, [pc, #76]	; (8022650 <APP_GcpReceiveTask+0xfc>)
 8022604:	2036      	movs	r0, #54	; 0x36
 8022606:	f01e fae3 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTraceFormatted(GOS_TRUE, "Message ID:               0x%X\r\n", receivedMsgId);
 802260a:	887b      	ldrh	r3, [r7, #2]
 802260c:	461a      	mov	r2, r3
 802260e:	4911      	ldr	r1, [pc, #68]	; (8022654 <APP_GcpReceiveTask+0x100>)
 8022610:	2036      	movs	r0, #54	; 0x36
 8022612:	f01e fadd 	bl	8040bd0 <gos_traceTraceFormatted>
			gos_traceTrace(GOS_TRUE, "-----------------------------\r\n");
 8022616:	490b      	ldr	r1, [pc, #44]	; (8022644 <APP_GcpReceiveTask+0xf0>)
 8022618:	2036      	movs	r0, #54	; 0x36
 802261a:	f01e f9bd 	bl	8040998 <gos_traceTrace>
 802261e:	e005      	b.n	802262c <APP_GcpReceiveTask+0xd8>
		}
		else
		{
			gos_errorHandler(GOS_ERROR_LEVEL_USER_WARNING, __func__, __LINE__, "GCP message RX1 error.");
 8022620:	4b0f      	ldr	r3, [pc, #60]	; (8022660 <APP_GcpReceiveTask+0x10c>)
 8022622:	22dd      	movs	r2, #221	; 0xdd
 8022624:	490d      	ldr	r1, [pc, #52]	; (802265c <APP_GcpReceiveTask+0x108>)
 8022626:	203a      	movs	r0, #58	; 0x3a
 8022628:	f01a ffb6 	bl	803d598 <gos_errorHandler>
		}

		gcpBufferReadIdx = 0u;
 802262c:	4b0d      	ldr	r3, [pc, #52]	; (8022664 <APP_GcpReceiveTask+0x110>)
 802262e:	2200      	movs	r2, #0
 8022630:	701a      	strb	r2, [r3, #0]
		gcpBufferWriteIdx = 0u;
 8022632:	4b0d      	ldr	r3, [pc, #52]	; (8022668 <APP_GcpReceiveTask+0x114>)
 8022634:	2200      	movs	r2, #0
 8022636:	701a      	strb	r2, [r3, #0]

		gos_taskSleep(1000);
 8022638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802263c:	f019 fa08 	bl	803ba50 <gos_taskSleep>
		if (gos_gcpReceiveMessage(APP_GCP_QUEUE_CHANNEL, &receivedMsgId, (void_t*)&receivedMessage, sizeof(receivedMessage), 8) == GOS_SUCCESS)
 8022640:	e78e      	b.n	8022560 <APP_GcpReceiveTask+0xc>
 8022642:	bf00      	nop
 8022644:	080468d4 	.word	0x080468d4
 8022648:	080469d8 	.word	0x080469d8
 802264c:	080469f8 	.word	0x080469f8
 8022650:	08046a18 	.word	0x08046a18
 8022654:	08046a38 	.word	0x08046a38
 8022658:	08046a5c 	.word	0x08046a5c
 802265c:	08048c08 	.word	0x08048c08
 8022660:	08046a74 	.word	0x08046a74
 8022664:	200041f9 	.word	0x200041f9
 8022668:	200041f8 	.word	0x200041f8

0802266c <APP_GCP_QueueReceiver>:

/*
 * Function: APP_GCP_QueueReceiver
 */
GOS_STATIC gos_result_t APP_GCP_QueueReceiver (u8_t* pTarget, u16_t targetSize)
{
 802266c:	b580      	push	{r7, lr}
 802266e:	b084      	sub	sp, #16
 8022670:	af00      	add	r7, sp, #0
 8022672:	6078      	str	r0, [r7, #4]
 8022674:	460b      	mov	r3, r1
 8022676:	807b      	strh	r3, [r7, #2]
	 */
	gos_queueIndex_t elementNum;

	do
	{
		gos_queueGetElementNumber(gcpQueue.queueId, &elementNum);
 8022678:	4b10      	ldr	r3, [pc, #64]	; (80226bc <APP_GCP_QueueReceiver+0x50>)
 802267a:	881b      	ldrh	r3, [r3, #0]
 802267c:	f107 020e 	add.w	r2, r7, #14
 8022680:	4611      	mov	r1, r2
 8022682:	4618      	mov	r0, r3
 8022684:	f01c fa7e 	bl	803eb84 <gos_queueGetElementNumber>
		gos_taskSleep(10);
 8022688:	200a      	movs	r0, #10
 802268a:	f019 f9e1 	bl	803ba50 <gos_taskSleep>
	}
	while(elementNum == 0);
 802268e:	7bbb      	ldrb	r3, [r7, #14]
 8022690:	2b00      	cmp	r3, #0
 8022692:	d0f1      	beq.n	8022678 <APP_GCP_QueueReceiver+0xc>

	gos_result_t res = gos_queueGet(gcpQueue.queueId, (void_t*)pTarget, targetSize, 10000);
 8022694:	4b09      	ldr	r3, [pc, #36]	; (80226bc <APP_GCP_QueueReceiver+0x50>)
 8022696:	8818      	ldrh	r0, [r3, #0]
 8022698:	887b      	ldrh	r3, [r7, #2]
 802269a:	b2da      	uxtb	r2, r3
 802269c:	f242 7310 	movw	r3, #10000	; 0x2710
 80226a0:	6879      	ldr	r1, [r7, #4]
 80226a2:	f01c f937 	bl	803e914 <gos_queueGet>
 80226a6:	4603      	mov	r3, r0
 80226a8:	73fb      	strb	r3, [r7, #15]

	gos_taskSleep(100);
 80226aa:	2064      	movs	r0, #100	; 0x64
 80226ac:	f019 f9d0 	bl	803ba50 <gos_taskSleep>
	return res;
 80226b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80226b2:	4618      	mov	r0, r3
 80226b4:	3710      	adds	r7, #16
 80226b6:	46bd      	mov	sp, r7
 80226b8:	bd80      	pop	{r7, pc}
 80226ba:	bf00      	nop
 80226bc:	20000494 	.word	0x20000494

080226c0 <APP_GCP_QueueTransmitter>:

/*
 * Function: APP_GCP_QueueTransmitter
 */
GOS_STATIC gos_result_t APP_GCP_QueueTransmitter (u8_t* pMessage, u16_t messageSize)
{
 80226c0:	b580      	push	{r7, lr}
 80226c2:	b084      	sub	sp, #16
 80226c4:	af00      	add	r7, sp, #0
 80226c6:	6078      	str	r0, [r7, #4]
 80226c8:	460b      	mov	r3, r1
 80226ca:	807b      	strh	r3, [r7, #2]
	 */
	gos_queueIndex_t elementNum;

	do
	{
		gos_queueGetElementNumber(gcpQueue.queueId, &elementNum);
 80226cc:	4b10      	ldr	r3, [pc, #64]	; (8022710 <APP_GCP_QueueTransmitter+0x50>)
 80226ce:	881b      	ldrh	r3, [r3, #0]
 80226d0:	f107 020e 	add.w	r2, r7, #14
 80226d4:	4611      	mov	r1, r2
 80226d6:	4618      	mov	r0, r3
 80226d8:	f01c fa54 	bl	803eb84 <gos_queueGetElementNumber>
		gos_taskSleep(10);
 80226dc:	200a      	movs	r0, #10
 80226de:	f019 f9b7 	bl	803ba50 <gos_taskSleep>
	}
	while(elementNum != 0);
 80226e2:	7bbb      	ldrb	r3, [r7, #14]
 80226e4:	2b00      	cmp	r3, #0
 80226e6:	d1f1      	bne.n	80226cc <APP_GCP_QueueTransmitter+0xc>

	gos_result_t res = gos_queuePut(gcpQueue.queueId, (void_t*)pMessage, messageSize, 10000);
 80226e8:	4b09      	ldr	r3, [pc, #36]	; (8022710 <APP_GCP_QueueTransmitter+0x50>)
 80226ea:	8818      	ldrh	r0, [r3, #0]
 80226ec:	887b      	ldrh	r3, [r7, #2]
 80226ee:	b2da      	uxtb	r2, r3
 80226f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80226f4:	6879      	ldr	r1, [r7, #4]
 80226f6:	f01c f83f 	bl	803e778 <gos_queuePut>
 80226fa:	4603      	mov	r3, r0
 80226fc:	73fb      	strb	r3, [r7, #15]

	gos_taskSleep(100);
 80226fe:	2064      	movs	r0, #100	; 0x64
 8022700:	f019 f9a6 	bl	803ba50 <gos_taskSleep>
	return res;
 8022704:	7bfb      	ldrb	r3, [r7, #15]
}
 8022706:	4618      	mov	r0, r3
 8022708:	3710      	adds	r7, #16
 802270a:	46bd      	mov	sp, r7
 802270c:	bd80      	pop	{r7, pc}
 802270e:	bf00      	nop
 8022710:	20000494 	.word	0x20000494

08022714 <APP_GCP_BufferReceiver>:

/*
 * Function: APP_GCP_BufferReceiver
 */
GOS_STATIC gos_result_t APP_GCP_BufferReceiver (u8_t* pTarget, u16_t targetSize)
{
 8022714:	b580      	push	{r7, lr}
 8022716:	b084      	sub	sp, #16
 8022718:	af00      	add	r7, sp, #0
 802271a:	6078      	str	r0, [r7, #4]
 802271c:	460b      	mov	r3, r1
 802271e:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u16_t idx = 0u;
 8022720:	2300      	movs	r3, #0
 8022722:	81fb      	strh	r3, [r7, #14]

	/*
	 * Function code.
	 */
	while (gcpBufferReadIdx == gcpBufferWriteIdx){ gos_taskSleep(10);}
 8022724:	e002      	b.n	802272c <APP_GCP_BufferReceiver+0x18>
 8022726:	200a      	movs	r0, #10
 8022728:	f019 f992 	bl	803ba50 <gos_taskSleep>
 802272c:	4b16      	ldr	r3, [pc, #88]	; (8022788 <APP_GCP_BufferReceiver+0x74>)
 802272e:	781a      	ldrb	r2, [r3, #0]
 8022730:	4b16      	ldr	r3, [pc, #88]	; (802278c <APP_GCP_BufferReceiver+0x78>)
 8022732:	781b      	ldrb	r3, [r3, #0]
 8022734:	429a      	cmp	r2, r3
 8022736:	d0f6      	beq.n	8022726 <APP_GCP_BufferReceiver+0x12>

	gos_mutexLock(&bufferMutex, GOS_MUTEX_ENDLESS_TMO);
 8022738:	f04f 31ff 	mov.w	r1, #4294967295
 802273c:	4814      	ldr	r0, [pc, #80]	; (8022790 <APP_GCP_BufferReceiver+0x7c>)
 802273e:	f01b fdfb 	bl	803e338 <gos_mutexLock>

	for (idx = 0u; idx < targetSize; idx++)
 8022742:	2300      	movs	r3, #0
 8022744:	81fb      	strh	r3, [r7, #14]
 8022746:	e00f      	b.n	8022768 <APP_GCP_BufferReceiver+0x54>
	{
		pTarget[idx] = gcpBuffer[gcpBufferReadIdx++];
 8022748:	4b0f      	ldr	r3, [pc, #60]	; (8022788 <APP_GCP_BufferReceiver+0x74>)
 802274a:	781b      	ldrb	r3, [r3, #0]
 802274c:	1c5a      	adds	r2, r3, #1
 802274e:	b2d1      	uxtb	r1, r2
 8022750:	4a0d      	ldr	r2, [pc, #52]	; (8022788 <APP_GCP_BufferReceiver+0x74>)
 8022752:	7011      	strb	r1, [r2, #0]
 8022754:	4619      	mov	r1, r3
 8022756:	89fb      	ldrh	r3, [r7, #14]
 8022758:	687a      	ldr	r2, [r7, #4]
 802275a:	4413      	add	r3, r2
 802275c:	4a0d      	ldr	r2, [pc, #52]	; (8022794 <APP_GCP_BufferReceiver+0x80>)
 802275e:	5c52      	ldrb	r2, [r2, r1]
 8022760:	701a      	strb	r2, [r3, #0]
	for (idx = 0u; idx < targetSize; idx++)
 8022762:	89fb      	ldrh	r3, [r7, #14]
 8022764:	3301      	adds	r3, #1
 8022766:	81fb      	strh	r3, [r7, #14]
 8022768:	89fa      	ldrh	r2, [r7, #14]
 802276a:	887b      	ldrh	r3, [r7, #2]
 802276c:	429a      	cmp	r2, r3
 802276e:	d3eb      	bcc.n	8022748 <APP_GCP_BufferReceiver+0x34>
		{
			gcpBufferReadIdx = 0u;
		}
	}

	gos_mutexUnlock(&bufferMutex);
 8022770:	4807      	ldr	r0, [pc, #28]	; (8022790 <APP_GCP_BufferReceiver+0x7c>)
 8022772:	f01b fee7 	bl	803e544 <gos_mutexUnlock>

	gos_taskSleep(100);
 8022776:	2064      	movs	r0, #100	; 0x64
 8022778:	f019 f96a 	bl	803ba50 <gos_taskSleep>

	return GOS_SUCCESS;
 802277c:	2355      	movs	r3, #85	; 0x55
}
 802277e:	4618      	mov	r0, r3
 8022780:	3710      	adds	r7, #16
 8022782:	46bd      	mov	sp, r7
 8022784:	bd80      	pop	{r7, pc}
 8022786:	bf00      	nop
 8022788:	200041f9 	.word	0x200041f9
 802278c:	200041f8 	.word	0x200041f8
 8022790:	200041fc 	.word	0x200041fc
 8022794:	20003ff8 	.word	0x20003ff8

08022798 <APP_GCP_BufferTransmitter>:

/*
 * Function: APP_GCP_BufferTransmitter
 */
GOS_STATIC gos_result_t APP_GCP_BufferTransmitter (u8_t* pMessage, u16_t messageSize)
{
 8022798:	b580      	push	{r7, lr}
 802279a:	b084      	sub	sp, #16
 802279c:	af00      	add	r7, sp, #0
 802279e:	6078      	str	r0, [r7, #4]
 80227a0:	460b      	mov	r3, r1
 80227a2:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u16_t idx = 0u;
 80227a4:	2300      	movs	r3, #0
 80227a6:	81fb      	strh	r3, [r7, #14]

	/*
	 * Function code.
	 */
	while (gcpBufferReadIdx != gcpBufferWriteIdx){gos_taskSleep(10);}
 80227a8:	e002      	b.n	80227b0 <APP_GCP_BufferTransmitter+0x18>
 80227aa:	200a      	movs	r0, #10
 80227ac:	f019 f950 	bl	803ba50 <gos_taskSleep>
 80227b0:	4b16      	ldr	r3, [pc, #88]	; (802280c <APP_GCP_BufferTransmitter+0x74>)
 80227b2:	781a      	ldrb	r2, [r3, #0]
 80227b4:	4b16      	ldr	r3, [pc, #88]	; (8022810 <APP_GCP_BufferTransmitter+0x78>)
 80227b6:	781b      	ldrb	r3, [r3, #0]
 80227b8:	429a      	cmp	r2, r3
 80227ba:	d1f6      	bne.n	80227aa <APP_GCP_BufferTransmitter+0x12>

	gos_mutexLock(&bufferMutex, GOS_MUTEX_ENDLESS_TMO);
 80227bc:	f04f 31ff 	mov.w	r1, #4294967295
 80227c0:	4814      	ldr	r0, [pc, #80]	; (8022814 <APP_GCP_BufferTransmitter+0x7c>)
 80227c2:	f01b fdb9 	bl	803e338 <gos_mutexLock>
	for (idx = 0u; idx < messageSize; idx++)
 80227c6:	2300      	movs	r3, #0
 80227c8:	81fb      	strh	r3, [r7, #14]
 80227ca:	e00f      	b.n	80227ec <APP_GCP_BufferTransmitter+0x54>
	{
		gcpBuffer[gcpBufferWriteIdx++] = pMessage[idx];
 80227cc:	89fb      	ldrh	r3, [r7, #14]
 80227ce:	687a      	ldr	r2, [r7, #4]
 80227d0:	441a      	add	r2, r3
 80227d2:	4b0f      	ldr	r3, [pc, #60]	; (8022810 <APP_GCP_BufferTransmitter+0x78>)
 80227d4:	781b      	ldrb	r3, [r3, #0]
 80227d6:	1c59      	adds	r1, r3, #1
 80227d8:	b2c8      	uxtb	r0, r1
 80227da:	490d      	ldr	r1, [pc, #52]	; (8022810 <APP_GCP_BufferTransmitter+0x78>)
 80227dc:	7008      	strb	r0, [r1, #0]
 80227de:	4619      	mov	r1, r3
 80227e0:	7812      	ldrb	r2, [r2, #0]
 80227e2:	4b0d      	ldr	r3, [pc, #52]	; (8022818 <APP_GCP_BufferTransmitter+0x80>)
 80227e4:	545a      	strb	r2, [r3, r1]
	for (idx = 0u; idx < messageSize; idx++)
 80227e6:	89fb      	ldrh	r3, [r7, #14]
 80227e8:	3301      	adds	r3, #1
 80227ea:	81fb      	strh	r3, [r7, #14]
 80227ec:	89fa      	ldrh	r2, [r7, #14]
 80227ee:	887b      	ldrh	r3, [r7, #2]
 80227f0:	429a      	cmp	r2, r3
 80227f2:	d3eb      	bcc.n	80227cc <APP_GCP_BufferTransmitter+0x34>
		{
			gcpBufferWriteIdx = 0u;
		}
	}

	gos_mutexUnlock(&bufferMutex);
 80227f4:	4807      	ldr	r0, [pc, #28]	; (8022814 <APP_GCP_BufferTransmitter+0x7c>)
 80227f6:	f01b fea5 	bl	803e544 <gos_mutexUnlock>

	gos_taskSleep(100);
 80227fa:	2064      	movs	r0, #100	; 0x64
 80227fc:	f019 f928 	bl	803ba50 <gos_taskSleep>

	return GOS_SUCCESS;
 8022800:	2355      	movs	r3, #85	; 0x55
}
 8022802:	4618      	mov	r0, r3
 8022804:	3710      	adds	r7, #16
 8022806:	46bd      	mov	sp, r7
 8022808:	bd80      	pop	{r7, pc}
 802280a:	bf00      	nop
 802280c:	200041f9 	.word	0x200041f9
 8022810:	200041f8 	.word	0x200041f8
 8022814:	200041fc 	.word	0x200041fc
 8022818:	20003ff8 	.word	0x20003ff8

0802281c <APP_ButtonPressedSignalHandler>:

/*
 * Function: APP_ButtonPressedSignalHandler
 */
GOS_STATIC void_t APP_ButtonPressedSignalHandler (gos_signalSenderId_t senderId)
{
 802281c:	b580      	push	{r7, lr}
 802281e:	b082      	sub	sp, #8
 8022820:	af00      	add	r7, sp, #0
 8022822:	4603      	mov	r3, r0
 8022824:	80fb      	strh	r3, [r7, #6]
	/*
	 * Function code.
	 */
	if (senderId == BUTTON_PRESSED_SIGNAL_SUSPEND)
 8022826:	88fb      	ldrh	r3, [r7, #6]
 8022828:	2b00      	cmp	r3, #0
 802282a:	d10a      	bne.n	8022842 <APP_ButtonPressedSignalHandler+0x26>
	{
		gos_taskSuspend(gcpReceiveTaskDesc.taskId);
 802282c:	4b0c      	ldr	r3, [pc, #48]	; (8022860 <APP_ButtonPressedSignalHandler+0x44>)
 802282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022830:	4618      	mov	r0, r3
 8022832:	f019 fa59 	bl	803bce8 <gos_taskSuspend>
		gos_taskSuspend(gcpTransmitTaskDesc.taskId);
 8022836:	4b0b      	ldr	r3, [pc, #44]	; (8022864 <APP_ButtonPressedSignalHandler+0x48>)
 8022838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802283a:	4618      	mov	r0, r3
 802283c:	f019 fa54 	bl	803bce8 <gos_taskSuspend>
	else
	{
		gos_taskResume(gcpReceiveTaskDesc.taskId);
		gos_taskResume(gcpTransmitTaskDesc.taskId);
	}
}
 8022840:	e009      	b.n	8022856 <APP_ButtonPressedSignalHandler+0x3a>
		gos_taskResume(gcpReceiveTaskDesc.taskId);
 8022842:	4b07      	ldr	r3, [pc, #28]	; (8022860 <APP_ButtonPressedSignalHandler+0x44>)
 8022844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022846:	4618      	mov	r0, r3
 8022848:	f019 fb70 	bl	803bf2c <gos_taskResume>
		gos_taskResume(gcpTransmitTaskDesc.taskId);
 802284c:	4b05      	ldr	r3, [pc, #20]	; (8022864 <APP_ButtonPressedSignalHandler+0x48>)
 802284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022850:	4618      	mov	r0, r3
 8022852:	f019 fb6b 	bl	803bf2c <gos_taskResume>
}
 8022856:	bf00      	nop
 8022858:	3708      	adds	r7, #8
 802285a:	46bd      	mov	sp, r7
 802285c:	bd80      	pop	{r7, pc}
 802285e:	bf00      	nop
 8022860:	2000051c 	.word	0x2000051c
 8022864:	200004b0 	.word	0x200004b0

08022868 <APP_LedInit>:
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER,
	.taskStackSize      = 0x300
};

gos_result_t APP_LedInit (void_t)
{
 8022868:	b580      	push	{r7, lr}
 802286a:	b082      	sub	sp, #8
 802286c:	af00      	add	r7, sp, #0
	gos_result_t ledInitResult = GOS_SUCCESS;
 802286e:	2355      	movs	r3, #85	; 0x55
 8022870:	71fb      	strb	r3, [r7, #7]

	ledInitResult &= gos_taskRegister(&ledTaskDesc, NULL);
 8022872:	2100      	movs	r1, #0
 8022874:	4808      	ldr	r0, [pc, #32]	; (8022898 <APP_LedInit+0x30>)
 8022876:	f018 ff59 	bl	803b72c <gos_taskRegister>
 802287a:	4603      	mov	r3, r0
 802287c:	461a      	mov	r2, r3
 802287e:	79fb      	ldrb	r3, [r7, #7]
 8022880:	4013      	ands	r3, r2
 8022882:	71fb      	strb	r3, [r7, #7]

	if (ledInitResult != GOS_SUCCESS)
 8022884:	79fb      	ldrb	r3, [r7, #7]
 8022886:	2b55      	cmp	r3, #85	; 0x55
 8022888:	d001      	beq.n	802288e <APP_LedInit+0x26>
	{
		ledInitResult = GOS_ERROR;
 802288a:	23ae      	movs	r3, #174	; 0xae
 802288c:	71fb      	strb	r3, [r7, #7]
	}

	return ledInitResult;
 802288e:	79fb      	ldrb	r3, [r7, #7]
}
 8022890:	4618      	mov	r0, r3
 8022892:	3708      	adds	r7, #8
 8022894:	46bd      	mov	sp, r7
 8022896:	bd80      	pop	{r7, pc}
 8022898:	20000588 	.word	0x20000588

0802289c <APP_LedTask>:

GOS_STATIC void_t APP_LedTask (void_t)
{
 802289c:	b580      	push	{r7, lr}
 802289e:	af00      	add	r7, sp, #0
	for (;;)
	{
		drv_gpioTgglePin(IO_USER_LED);
 80228a0:	2000      	movs	r0, #0
 80228a2:	f013 fe01 	bl	80364a8 <drv_gpioTgglePin>
		//APP_EX_IO_RequestPinToggle (GPIO_EX_PIN_5);
		gos_taskSleep(LED_TASK_PERIOD);
 80228a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80228aa:	f019 f8d1 	bl	803ba50 <gos_taskSleep>
		drv_gpioTgglePin(IO_USER_LED);
 80228ae:	e7f7      	b.n	80228a0 <APP_LedTask+0x4>

080228b0 <APP_MenuInit>:
	/* Task priority	*/	.taskPriority 	= 16,
	/* Privilege level	*/	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGE_USER | GOS_PRIV_TASK_MANIPULATE
};

gos_result_t APP_MenuInit (void_t)
{
 80228b0:	b580      	push	{r7, lr}
 80228b2:	b082      	sub	sp, #8
 80228b4:	af00      	add	r7, sp, #0
	gos_result_t menuInitResult = GOS_SUCCESS;
 80228b6:	2355      	movs	r3, #85	; 0x55
 80228b8:	71fb      	strb	r3, [r7, #7]

	menuInitResult = gos_taskRegister(&menuTaskDesc, NULL);
 80228ba:	2100      	movs	r1, #0
 80228bc:	4807      	ldr	r0, [pc, #28]	; (80228dc <APP_MenuInit+0x2c>)
 80228be:	f018 ff35 	bl	803b72c <gos_taskRegister>
 80228c2:	4603      	mov	r3, r0
 80228c4:	71fb      	strb	r3, [r7, #7]

	if (menuInitResult != GOS_SUCCESS)
 80228c6:	79fb      	ldrb	r3, [r7, #7]
 80228c8:	2b55      	cmp	r3, #85	; 0x55
 80228ca:	d001      	beq.n	80228d0 <APP_MenuInit+0x20>
	{
		menuInitResult = GOS_ERROR;
 80228cc:	23ae      	movs	r3, #174	; 0xae
 80228ce:	71fb      	strb	r3, [r7, #7]
	}

	return menuInitResult;
 80228d0:	79fb      	ldrb	r3, [r7, #7]
}
 80228d2:	4618      	mov	r0, r3
 80228d4:	3708      	adds	r7, #8
 80228d6:	46bd      	mov	sp, r7
 80228d8:	bd80      	pop	{r7, pc}
 80228da:	bf00      	nop
 80228dc:	200005f4 	.word	0x200005f4

080228e0 <APP_MenuTask>:

/*
 * Function: APP_MenuTask
 */
GOS_STATIC void_t APP_MenuTask (void_t)
{
 80228e0:	b590      	push	{r4, r7, lr}
 80228e2:	b095      	sub	sp, #84	; 0x54
 80228e4:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	lcd_display_cfg_t flashingConfig =
 80228e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80228ea:	2200      	movs	r2, #0
 80228ec:	601a      	str	r2, [r3, #0]
 80228ee:	605a      	str	r2, [r3, #4]
 80228f0:	609a      	str	r2, [r3, #8]
 80228f2:	60da      	str	r2, [r3, #12]
 80228f4:	611a      	str	r2, [r3, #16]
 80228f6:	2305      	movs	r3, #5
 80228f8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80228fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8022900:	637b      	str	r3, [r7, #52]	; 0x34
 8022902:	230f      	movs	r3, #15
 8022904:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8022908:	2301      	movs	r3, #1
 802290a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		.blinkState      = LCD_BLINK_STATE_OFF,
		.line            = 0,
		.periodMs        = 500
	};

	lcd_display_cfg_t normalConfig =
 802290e:	f107 031c 	add.w	r3, r7, #28
 8022912:	2200      	movs	r2, #0
 8022914:	601a      	str	r2, [r3, #0]
 8022916:	605a      	str	r2, [r3, #4]
 8022918:	609a      	str	r2, [r3, #8]
 802291a:	60da      	str	r2, [r3, #12]
 802291c:	611a      	str	r2, [r3, #16]
 802291e:	230f      	movs	r3, #15
 8022920:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8022924:	2301      	movs	r3, #1
 8022926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		.blinkState      = LCD_BLINK_STATE_OFF,
		.line            = 0,
		.periodMs        = 0
	};

	lcd_display_cfg_t shiftConfig =
 802292a:	f107 0308 	add.w	r3, r7, #8
 802292e:	2200      	movs	r2, #0
 8022930:	601a      	str	r2, [r3, #0]
 8022932:	605a      	str	r2, [r3, #4]
 8022934:	609a      	str	r2, [r3, #8]
 8022936:	60da      	str	r2, [r3, #12]
 8022938:	611a      	str	r2, [r3, #16]
 802293a:	2302      	movs	r3, #2
 802293c:	727b      	strb	r3, [r7, #9]
 802293e:	2364      	movs	r3, #100	; 0x64
 8022940:	60fb      	str	r3, [r7, #12]
 8022942:	230f      	movs	r3, #15
 8022944:	767b      	strb	r3, [r7, #25]
 8022946:	2301      	movs	r3, #1
 8022948:	76fb      	strb	r3, [r7, #27]
		.blinkState      = LCD_BLINK_STATE_OFF,
		.line            = 0,
		.periodMs        = 100
	};

	u16_t adcValue         = 0u;
 802294a:	2300      	movs	r3, #0
 802294c:	80fb      	strh	r3, [r7, #6]
	u16_t temperatureValue = 0u;
 802294e:	2300      	movs	r3, #0
 8022950:	80bb      	strh	r3, [r7, #4]
	u16_t cpuUse           = 0u;
 8022952:	2300      	movs	r3, #0
 8022954:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	 * Function code.
	 */
	/*
	 * Initialize LCD driver.
	 */
	lcd_driver_init();
 8022958:	f003 fb86 	bl	8026068 <lcd_driver_init>

	/*
	 * Register interrupt callback for the user button.
	 */
	APP_EX_IO_RegisterCallback(GPIO_EX_PIN_0, GPIO_EX_EDGE_RISING, APP_MainButtonPressedInterruptCallback);
 802295c:	4ac4      	ldr	r2, [pc, #784]	; (8022c70 <APP_MenuTask+0x390>)
 802295e:	2101      	movs	r1, #1
 8022960:	2001      	movs	r0, #1
 8022962:	f7ff fbd3 	bl	802210c <APP_EX_IO_RegisterCallback>

	/*
	 * Subscribe to time signal.
	 */

	buttonBlocked = GOS_FALSE;
 8022966:	4bc3      	ldr	r3, [pc, #780]	; (8022c74 <APP_MenuTask+0x394>)
 8022968:	2249      	movs	r2, #73	; 0x49
 802296a:	701a      	strb	r2, [r3, #0]

	for (;;)
	{
		switch (programState)
 802296c:	4bc2      	ldr	r3, [pc, #776]	; (8022c78 <APP_MenuTask+0x398>)
 802296e:	781b      	ldrb	r3, [r3, #0]
 8022970:	2b0a      	cmp	r3, #10
 8022972:	f200 817b 	bhi.w	8022c6c <APP_MenuTask+0x38c>
 8022976:	a201      	add	r2, pc, #4	; (adr r2, 802297c <APP_MenuTask+0x9c>)
 8022978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802297c:	080229a9 	.word	0x080229a9
 8022980:	080229e9 	.word	0x080229e9
 8022984:	08022a15 	.word	0x08022a15
 8022988:	08022a6d 	.word	0x08022a6d
 802298c:	08022ac1 	.word	0x08022ac1
 8022990:	08022aff 	.word	0x08022aff
 8022994:	08022b21 	.word	0x08022b21
 8022998:	08022b89 	.word	0x08022b89
 802299c:	08022bab 	.word	0x08022bab
 80229a0:	08022c03 	.word	0x08022c03
 80229a4:	08022c25 	.word	0x08022c25
		{
			case PROGRAM_INIT_LOG:
			{
				programState = PROGRAM_TIME_PRINT; //PROGRAM_MAIN_IDLE;
 80229a8:	4bb3      	ldr	r3, [pc, #716]	; (8022c78 <APP_MenuTask+0x398>)
 80229aa:	2202      	movs	r2, #2
 80229ac:	701a      	strb	r2, [r3, #0]

				lcd_driver_write_string(0, "Hello from GOS!");
 80229ae:	49b3      	ldr	r1, [pc, #716]	; (8022c7c <APP_MenuTask+0x39c>)
 80229b0:	2000      	movs	r0, #0
 80229b2:	f003 fb9b 	bl	80260ec <lcd_driver_write_string>

				for (u8_t i = 0; i < 16; i++)
 80229b6:	2300      	movs	r3, #0
 80229b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80229bc:	e00b      	b.n	80229d6 <APP_MenuTask+0xf6>
				{
					BSP_LCD_HandlerWriteNextString(1, "#");
 80229be:	49b0      	ldr	r1, [pc, #704]	; (8022c80 <APP_MenuTask+0x3a0>)
 80229c0:	2001      	movs	r0, #1
 80229c2:	f001 fe99 	bl	80246f8 <BSP_LCD_HandlerWriteNextString>
					gos_taskSleep(200);
 80229c6:	20c8      	movs	r0, #200	; 0xc8
 80229c8:	f019 f842 	bl	803ba50 <gos_taskSleep>
				for (u8_t i = 0; i < 16; i++)
 80229cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80229d0:	3301      	adds	r3, #1
 80229d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80229d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80229da:	2b0f      	cmp	r3, #15
 80229dc:	d9ef      	bls.n	80229be <APP_MenuTask+0xde>
				}

				gos_taskSleep(1000);
 80229de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80229e2:	f019 f835 	bl	803ba50 <gos_taskSleep>
				break;
 80229e6:	e142      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			case PROGRAM_MAIN_IDLE:
			{
				normalConfig.line = 0;
 80229e8:	2300      	movs	r3, #0
 80229ea:	773b      	strb	r3, [r7, #28]
				BSP_LCD_HandlerDisplayText(&normalConfig, "GOS2022 test    ");
 80229ec:	f107 031c 	add.w	r3, r7, #28
 80229f0:	49a4      	ldr	r1, [pc, #656]	; (8022c84 <APP_MenuTask+0x3a4>)
 80229f2:	4618      	mov	r0, r3
 80229f4:	f001 fe0c 	bl	8024610 <BSP_LCD_HandlerDisplayText>
				normalConfig.line = 1;
 80229f8:	2301      	movs	r3, #1
 80229fa:	773b      	strb	r3, [r7, #28]
				BSP_LCD_HandlerDisplayText(&normalConfig, "project         ");
 80229fc:	f107 031c 	add.w	r3, r7, #28
 8022a00:	49a1      	ldr	r1, [pc, #644]	; (8022c88 <APP_MenuTask+0x3a8>)
 8022a02:	4618      	mov	r0, r3
 8022a04:	f001 fe04 	bl	8024610 <BSP_LCD_HandlerDisplayText>

				gos_taskSuspend(menuTaskDesc.taskId);
 8022a08:	4ba0      	ldr	r3, [pc, #640]	; (8022c8c <APP_MenuTask+0x3ac>)
 8022a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022a0c:	4618      	mov	r0, r3
 8022a0e:	f019 f96b 	bl	803bce8 <gos_taskSuspend>
				break;
 8022a12:	e12c      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			case PROGRAM_TIME_PRINT:
			{
				gos_timeGet(&actualTime);
 8022a14:	489e      	ldr	r0, [pc, #632]	; (8022c90 <APP_MenuTask+0x3b0>)
 8022a16:	f01d fc3b 	bl	8040290 <gos_timeGet>
				normalConfig.line = 0;
 8022a1a:	2300      	movs	r3, #0
 8022a1c:	773b      	strb	r3, [r7, #28]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%4d/%02d/%02d      ",
						actualTime.years,
 8022a1e:	4b9c      	ldr	r3, [pc, #624]	; (8022c90 <APP_MenuTask+0x3b0>)
 8022a20:	891b      	ldrh	r3, [r3, #8]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%4d/%02d/%02d      ",
 8022a22:	461a      	mov	r2, r3
						actualTime.months,
 8022a24:	4b9a      	ldr	r3, [pc, #616]	; (8022c90 <APP_MenuTask+0x3b0>)
 8022a26:	79db      	ldrb	r3, [r3, #7]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%4d/%02d/%02d      ",
 8022a28:	4619      	mov	r1, r3
						actualTime.days
 8022a2a:	4b99      	ldr	r3, [pc, #612]	; (8022c90 <APP_MenuTask+0x3b0>)
 8022a2c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8022a30:	b29b      	uxth	r3, r3
				BSP_LCD_HandlerDisplayText(&normalConfig, "%4d/%02d/%02d      ",
 8022a32:	f107 001c 	add.w	r0, r7, #28
 8022a36:	9300      	str	r3, [sp, #0]
 8022a38:	460b      	mov	r3, r1
 8022a3a:	4996      	ldr	r1, [pc, #600]	; (8022c94 <APP_MenuTask+0x3b4>)
 8022a3c:	f001 fde8 	bl	8024610 <BSP_LCD_HandlerDisplayText>
						);
				normalConfig.line = 1;
 8022a40:	2301      	movs	r3, #1
 8022a42:	773b      	strb	r3, [r7, #28]

				BSP_LCD_HandlerDisplayText(&normalConfig, "%02d:%02d:%02d        ",
						actualTime.hours,
 8022a44:	4b92      	ldr	r3, [pc, #584]	; (8022c90 <APP_MenuTask+0x3b0>)
 8022a46:	791b      	ldrb	r3, [r3, #4]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%02d:%02d:%02d        ",
 8022a48:	461a      	mov	r2, r3
						actualTime.minutes,
 8022a4a:	4b91      	ldr	r3, [pc, #580]	; (8022c90 <APP_MenuTask+0x3b0>)
 8022a4c:	78db      	ldrb	r3, [r3, #3]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%02d:%02d:%02d        ",
 8022a4e:	4619      	mov	r1, r3
						actualTime.seconds
 8022a50:	4b8f      	ldr	r3, [pc, #572]	; (8022c90 <APP_MenuTask+0x3b0>)
 8022a52:	789b      	ldrb	r3, [r3, #2]
				BSP_LCD_HandlerDisplayText(&normalConfig, "%02d:%02d:%02d        ",
 8022a54:	f107 001c 	add.w	r0, r7, #28
 8022a58:	9300      	str	r3, [sp, #0]
 8022a5a:	460b      	mov	r3, r1
 8022a5c:	498e      	ldr	r1, [pc, #568]	; (8022c98 <APP_MenuTask+0x3b8>)
 8022a5e:	f001 fdd7 	bl	8024610 <BSP_LCD_HandlerDisplayText>
						);

				gos_taskSleep(1000);
 8022a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022a66:	f018 fff3 	bl	803ba50 <gos_taskSleep>
				break;
 8022a6a:	e100      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			case PROGRAM_FLASHING_TEXT:
			{
				flashingConfig.line = 0;
 8022a6c:	2300      	movs	r3, #0
 8022a6e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				flashingConfig.periodMs = 500;
 8022a72:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8022a76:	637b      	str	r3, [r7, #52]	; 0x34
				flashingConfig.blinkStartIndex = 1;
 8022a78:	2301      	movs	r3, #1
 8022a7a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				flashingConfig.blinkEndIndex = 9;
 8022a7e:	2309      	movs	r3, #9
 8022a80:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

				BSP_LCD_HandlerDisplayText(&flashingConfig, " Flashing test! ");
 8022a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022a88:	4984      	ldr	r1, [pc, #528]	; (8022c9c <APP_MenuTask+0x3bc>)
 8022a8a:	4618      	mov	r0, r3
 8022a8c:	f001 fdc0 	bl	8024610 <BSP_LCD_HandlerDisplayText>

				flashingConfig.line = 1;
 8022a90:	2301      	movs	r3, #1
 8022a92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				flashingConfig.periodMs = 350;
 8022a96:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8022a9a:	637b      	str	r3, [r7, #52]	; 0x34
				flashingConfig.blinkStartIndex = 0;
 8022a9c:	2300      	movs	r3, #0
 8022a9e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				flashingConfig.blinkEndIndex = 15;
 8022aa2:	230f      	movs	r3, #15
 8022aa4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

				BSP_LCD_HandlerDisplayText(&flashingConfig, "    GOS2022     ");
 8022aa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022aac:	497c      	ldr	r1, [pc, #496]	; (8022ca0 <APP_MenuTask+0x3c0>)
 8022aae:	4618      	mov	r0, r3
 8022ab0:	f001 fdae 	bl	8024610 <BSP_LCD_HandlerDisplayText>

				gos_taskSuspend(menuTaskDesc.taskId);
 8022ab4:	4b75      	ldr	r3, [pc, #468]	; (8022c8c <APP_MenuTask+0x3ac>)
 8022ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022ab8:	4618      	mov	r0, r3
 8022aba:	f019 f915 	bl	803bce8 <gos_taskSuspend>
				break;
 8022abe:	e0d6      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			case PROGRAM_SHIFTING_TEXT:
			{
				shiftConfig.line = 0;
 8022ac0:	2300      	movs	r3, #0
 8022ac2:	723b      	strb	r3, [r7, #8]
				shiftConfig.periodMs = 100;
 8022ac4:	2364      	movs	r3, #100	; 0x64
 8022ac6:	60fb      	str	r3, [r7, #12]
				shiftConfig.displayMode = LCD_DISPLAY_SHIFT_LEFT;
 8022ac8:	2302      	movs	r3, #2
 8022aca:	727b      	strb	r3, [r7, #9]
				BSP_LCD_HandlerDisplayText(&shiftConfig, "This is a normal shifting text example.");
 8022acc:	f107 0308 	add.w	r3, r7, #8
 8022ad0:	4974      	ldr	r1, [pc, #464]	; (8022ca4 <APP_MenuTask+0x3c4>)
 8022ad2:	4618      	mov	r0, r3
 8022ad4:	f001 fd9c 	bl	8024610 <BSP_LCD_HandlerDisplayText>

				shiftConfig.line = 1;
 8022ad8:	2301      	movs	r3, #1
 8022ada:	723b      	strb	r3, [r7, #8]
				shiftConfig.periodMs = 400;
 8022adc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8022ae0:	60fb      	str	r3, [r7, #12]
				shiftConfig.displayMode = LCD_DISPLAY_CYCLIC_LEFT;
 8022ae2:	2304      	movs	r3, #4
 8022ae4:	727b      	strb	r3, [r7, #9]
				BSP_LCD_HandlerDisplayText(&shiftConfig, "This is a cyclic shifting text example. The text is rotating continuously. ");
 8022ae6:	f107 0308 	add.w	r3, r7, #8
 8022aea:	496f      	ldr	r1, [pc, #444]	; (8022ca8 <APP_MenuTask+0x3c8>)
 8022aec:	4618      	mov	r0, r3
 8022aee:	f001 fd8f 	bl	8024610 <BSP_LCD_HandlerDisplayText>

				gos_taskSuspend(menuTaskDesc.taskId);
 8022af2:	4b66      	ldr	r3, [pc, #408]	; (8022c8c <APP_MenuTask+0x3ac>)
 8022af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022af6:	4618      	mov	r0, r3
 8022af8:	f019 f8f6 	bl	803bce8 <gos_taskSuspend>
				break;
 8022afc:	e0b7      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			case PROGRAM_ADC_DISPLAY_INIT:
			{
				shiftConfig.line = 1;
 8022afe:	2301      	movs	r3, #1
 8022b00:	723b      	strb	r3, [r7, #8]
				shiftConfig.periodMs = 300;
 8022b02:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8022b06:	60fb      	str	r3, [r7, #12]
				shiftConfig.displayMode = LCD_DISPLAY_SHIFT_LEFT;
 8022b08:	2302      	movs	r3, #2
 8022b0a:	727b      	strb	r3, [r7, #9]
				BSP_LCD_HandlerDisplayText(&shiftConfig, "The ADC driver is under development.");
 8022b0c:	f107 0308 	add.w	r3, r7, #8
 8022b10:	4966      	ldr	r1, [pc, #408]	; (8022cac <APP_MenuTask+0x3cc>)
 8022b12:	4618      	mov	r0, r3
 8022b14:	f001 fd7c 	bl	8024610 <BSP_LCD_HandlerDisplayText>

				programState = PROGRAM_ADC_VALUE_DISPLAY;
 8022b18:	4b57      	ldr	r3, [pc, #348]	; (8022c78 <APP_MenuTask+0x398>)
 8022b1a:	2206      	movs	r2, #6
 8022b1c:	701a      	strb	r2, [r3, #0]
				break;
 8022b1e:	e0a6      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			case PROGRAM_ADC_VALUE_DISPLAY:
			{
				normalConfig.line = 0;
 8022b20:	2300      	movs	r3, #0
 8022b22:	773b      	strb	r3, [r7, #28]
				adcValue = 0u;
 8022b24:	2300      	movs	r3, #0
 8022b26:	80fb      	strh	r3, [r7, #6]
				BSP_ADC_HandlerGetValue(&adcValue);
 8022b28:	1dbb      	adds	r3, r7, #6
 8022b2a:	4618      	mov	r0, r3
 8022b2c:	f001 fcd4 	bl	80244d8 <BSP_ADC_HandlerGetValue>
				BSP_LCD_HandlerDisplayText(&normalConfig, "ADC value: %u.%02uV   ", ((330 * adcValue / 4096) / 100), ((330 * adcValue / 4096) % 100));
 8022b30:	88fb      	ldrh	r3, [r7, #6]
 8022b32:	461a      	mov	r2, r3
 8022b34:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8022b38:	fb02 f303 	mul.w	r3, r2, r3
 8022b3c:	4a5c      	ldr	r2, [pc, #368]	; (8022cb0 <APP_MenuTask+0x3d0>)
 8022b3e:	fb82 1203 	smull	r1, r2, r2, r3
 8022b42:	1452      	asrs	r2, r2, #17
 8022b44:	17db      	asrs	r3, r3, #31
 8022b46:	1ad4      	subs	r4, r2, r3
 8022b48:	88fb      	ldrh	r3, [r7, #6]
 8022b4a:	461a      	mov	r2, r3
 8022b4c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8022b50:	fb02 f303 	mul.w	r3, r2, r3
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	da01      	bge.n	8022b5c <APP_MenuTask+0x27c>
 8022b58:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8022b5c:	131b      	asrs	r3, r3, #12
 8022b5e:	461a      	mov	r2, r3
 8022b60:	4b53      	ldr	r3, [pc, #332]	; (8022cb0 <APP_MenuTask+0x3d0>)
 8022b62:	fb83 1302 	smull	r1, r3, r3, r2
 8022b66:	1159      	asrs	r1, r3, #5
 8022b68:	17d3      	asrs	r3, r2, #31
 8022b6a:	1acb      	subs	r3, r1, r3
 8022b6c:	2164      	movs	r1, #100	; 0x64
 8022b6e:	fb01 f303 	mul.w	r3, r1, r3
 8022b72:	1ad3      	subs	r3, r2, r3
 8022b74:	f107 001c 	add.w	r0, r7, #28
 8022b78:	4622      	mov	r2, r4
 8022b7a:	494e      	ldr	r1, [pc, #312]	; (8022cb4 <APP_MenuTask+0x3d4>)
 8022b7c:	f001 fd48 	bl	8024610 <BSP_LCD_HandlerDisplayText>

				gos_taskSleep(200);
 8022b80:	20c8      	movs	r0, #200	; 0xc8
 8022b82:	f018 ff65 	bl	803ba50 <gos_taskSleep>
				break;
 8022b86:	e072      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			case PROGRAM_TEMP_DISPLAY_INIT:
			{
				shiftConfig.line = 1;
 8022b88:	2301      	movs	r3, #1
 8022b8a:	723b      	strb	r3, [r7, #8]
				shiftConfig.periodMs = 300;
 8022b8c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8022b90:	60fb      	str	r3, [r7, #12]
				shiftConfig.displayMode = LCD_DISPLAY_SHIFT_LEFT;
 8022b92:	2302      	movs	r3, #2
 8022b94:	727b      	strb	r3, [r7, #9]
				BSP_LCD_HandlerDisplayText(&shiftConfig, "The temperature shown here is measured by the RTC module.");
 8022b96:	f107 0308 	add.w	r3, r7, #8
 8022b9a:	4947      	ldr	r1, [pc, #284]	; (8022cb8 <APP_MenuTask+0x3d8>)
 8022b9c:	4618      	mov	r0, r3
 8022b9e:	f001 fd37 	bl	8024610 <BSP_LCD_HandlerDisplayText>

				programState = PROGRAM_TEMP_VALUE_DISPLAY;
 8022ba2:	4b35      	ldr	r3, [pc, #212]	; (8022c78 <APP_MenuTask+0x398>)
 8022ba4:	2208      	movs	r2, #8
 8022ba6:	701a      	strb	r2, [r3, #0]
				break;
 8022ba8:	e061      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			case PROGRAM_TEMP_VALUE_DISPLAY:
			{
				normalConfig.line = 0;
 8022baa:	2300      	movs	r3, #0
 8022bac:	773b      	strb	r3, [r7, #28]
				if (BSP_Temperature_HandlerGetValue(&temperatureValue) == GOS_SUCCESS)
 8022bae:	1d3b      	adds	r3, r7, #4
 8022bb0:	4618      	mov	r0, r3
 8022bb2:	f002 f893 	bl	8024cdc <BSP_Temperature_HandlerGetValue>
 8022bb6:	4603      	mov	r3, r0
 8022bb8:	2b55      	cmp	r3, #85	; 0x55
 8022bba:	d117      	bne.n	8022bec <APP_MenuTask+0x30c>
				{
					BSP_LCD_HandlerDisplayText(&normalConfig, "Temp.: %u.%02u C  ", (temperatureValue / 100), (temperatureValue % 100));
 8022bbc:	88bb      	ldrh	r3, [r7, #4]
 8022bbe:	4a3c      	ldr	r2, [pc, #240]	; (8022cb0 <APP_MenuTask+0x3d0>)
 8022bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8022bc4:	095b      	lsrs	r3, r3, #5
 8022bc6:	b29b      	uxth	r3, r3
 8022bc8:	461c      	mov	r4, r3
 8022bca:	88bb      	ldrh	r3, [r7, #4]
 8022bcc:	4a38      	ldr	r2, [pc, #224]	; (8022cb0 <APP_MenuTask+0x3d0>)
 8022bce:	fba2 1203 	umull	r1, r2, r2, r3
 8022bd2:	0952      	lsrs	r2, r2, #5
 8022bd4:	2164      	movs	r1, #100	; 0x64
 8022bd6:	fb01 f202 	mul.w	r2, r1, r2
 8022bda:	1a9b      	subs	r3, r3, r2
 8022bdc:	b29b      	uxth	r3, r3
 8022bde:	f107 001c 	add.w	r0, r7, #28
 8022be2:	4622      	mov	r2, r4
 8022be4:	4935      	ldr	r1, [pc, #212]	; (8022cbc <APP_MenuTask+0x3dc>)
 8022be6:	f001 fd13 	bl	8024610 <BSP_LCD_HandlerDisplayText>
 8022bea:	e005      	b.n	8022bf8 <APP_MenuTask+0x318>
				}
				else
				{
					BSP_LCD_HandlerDisplayText(&normalConfig, "Err. reading temp.");
 8022bec:	f107 031c 	add.w	r3, r7, #28
 8022bf0:	4933      	ldr	r1, [pc, #204]	; (8022cc0 <APP_MenuTask+0x3e0>)
 8022bf2:	4618      	mov	r0, r3
 8022bf4:	f001 fd0c 	bl	8024610 <BSP_LCD_HandlerDisplayText>
				}

				gos_taskSleep(1000);
 8022bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8022bfc:	f018 ff28 	bl	803ba50 <gos_taskSleep>
				break;
 8022c00:	e035      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			case PROGRAM_CPU_USAGE_DISPLAY_INIT:
			{
				shiftConfig.line = 1;
 8022c02:	2301      	movs	r3, #1
 8022c04:	723b      	strb	r3, [r7, #8]
				shiftConfig.periodMs = 300;
 8022c06:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8022c0a:	60fb      	str	r3, [r7, #12]
				shiftConfig.displayMode = LCD_DISPLAY_SHIFT_LEFT;
 8022c0c:	2302      	movs	r3, #2
 8022c0e:	727b      	strb	r3, [r7, #9]
				BSP_LCD_HandlerDisplayText(&shiftConfig, "Overall system CPU usage at the moment.");
 8022c10:	f107 0308 	add.w	r3, r7, #8
 8022c14:	492b      	ldr	r1, [pc, #172]	; (8022cc4 <APP_MenuTask+0x3e4>)
 8022c16:	4618      	mov	r0, r3
 8022c18:	f001 fcfa 	bl	8024610 <BSP_LCD_HandlerDisplayText>

				programState = PROGRAM_CPU_USAGE_VALUE_DISPLAY;
 8022c1c:	4b16      	ldr	r3, [pc, #88]	; (8022c78 <APP_MenuTask+0x398>)
 8022c1e:	220a      	movs	r2, #10
 8022c20:	701a      	strb	r2, [r3, #0]
				break;
 8022c22:	e024      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			case PROGRAM_CPU_USAGE_VALUE_DISPLAY:
			{
				normalConfig.line = 0;
 8022c24:	2300      	movs	r3, #0
 8022c26:	773b      	strb	r3, [r7, #28]
				cpuUse = gos_kernelGetCpuUsage();
 8022c28:	f017 fd30 	bl	803a68c <gos_kernelGetCpuUsage>
 8022c2c:	4603      	mov	r3, r0
 8022c2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				BSP_LCD_HandlerDisplayText(&normalConfig, "CPU: %u.%02u %%   ", (cpuUse / 100), (cpuUse % 100));
 8022c32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022c36:	4a1e      	ldr	r2, [pc, #120]	; (8022cb0 <APP_MenuTask+0x3d0>)
 8022c38:	fba2 2303 	umull	r2, r3, r2, r3
 8022c3c:	095b      	lsrs	r3, r3, #5
 8022c3e:	b29b      	uxth	r3, r3
 8022c40:	461c      	mov	r4, r3
 8022c42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022c46:	4a1a      	ldr	r2, [pc, #104]	; (8022cb0 <APP_MenuTask+0x3d0>)
 8022c48:	fba2 1203 	umull	r1, r2, r2, r3
 8022c4c:	0952      	lsrs	r2, r2, #5
 8022c4e:	2164      	movs	r1, #100	; 0x64
 8022c50:	fb01 f202 	mul.w	r2, r1, r2
 8022c54:	1a9b      	subs	r3, r3, r2
 8022c56:	b29b      	uxth	r3, r3
 8022c58:	f107 001c 	add.w	r0, r7, #28
 8022c5c:	4622      	mov	r2, r4
 8022c5e:	491a      	ldr	r1, [pc, #104]	; (8022cc8 <APP_MenuTask+0x3e8>)
 8022c60:	f001 fcd6 	bl	8024610 <BSP_LCD_HandlerDisplayText>
				gos_taskSleep(250);
 8022c64:	20fa      	movs	r0, #250	; 0xfa
 8022c66:	f018 fef3 	bl	803ba50 <gos_taskSleep>
				break;
 8022c6a:	e000      	b.n	8022c6e <APP_MenuTask+0x38e>
			}
			default:
			{
				break;
 8022c6c:	bf00      	nop
		switch (programState)
 8022c6e:	e67d      	b.n	802296c <APP_MenuTask+0x8c>
 8022c70:	08022ccd 	.word	0x08022ccd
 8022c74:	2000420e 	.word	0x2000420e
 8022c78:	20004200 	.word	0x20004200
 8022c7c:	08046a8c 	.word	0x08046a8c
 8022c80:	08046a9c 	.word	0x08046a9c
 8022c84:	08046aa0 	.word	0x08046aa0
 8022c88:	08046ab4 	.word	0x08046ab4
 8022c8c:	200005f4 	.word	0x200005f4
 8022c90:	20004204 	.word	0x20004204
 8022c94:	08046ac8 	.word	0x08046ac8
 8022c98:	08046adc 	.word	0x08046adc
 8022c9c:	08046af4 	.word	0x08046af4
 8022ca0:	08046b08 	.word	0x08046b08
 8022ca4:	08046b1c 	.word	0x08046b1c
 8022ca8:	08046b44 	.word	0x08046b44
 8022cac:	08046b90 	.word	0x08046b90
 8022cb0:	51eb851f 	.word	0x51eb851f
 8022cb4:	08046bb8 	.word	0x08046bb8
 8022cb8:	08046bd0 	.word	0x08046bd0
 8022cbc:	08046c0c 	.word	0x08046c0c
 8022cc0:	08046c20 	.word	0x08046c20
 8022cc4:	08046c34 	.word	0x08046c34
 8022cc8:	08046c5c 	.word	0x08046c5c

08022ccc <APP_MainButtonPressedInterruptCallback>:

/*
 * Function: APP_MainButtonPressedInterruptCallback
 */
GOS_STATIC void_t APP_MainButtonPressedInterruptCallback (void_t)
{
 8022ccc:	b580      	push	{r7, lr}
 8022cce:	af00      	add	r7, sp, #0
	/*
	 * Function code.
	 */
	/* Interrupt is privileged */
	if (buttonBlock.button1Blocked == GOS_FALSE)
 8022cd0:	4b15      	ldr	r3, [pc, #84]	; (8022d28 <APP_MainButtonPressedInterruptCallback+0x5c>)
 8022cd2:	781b      	ldrb	r3, [r3, #0]
 8022cd4:	2b49      	cmp	r3, #73	; 0x49
 8022cd6:	d125      	bne.n	8022d24 <APP_MainButtonPressedInterruptCallback+0x58>
	{
		buttonBlock.button1Blocked = GOS_TRUE;
 8022cd8:	4b13      	ldr	r3, [pc, #76]	; (8022d28 <APP_MainButtonPressedInterruptCallback+0x5c>)
 8022cda:	2236      	movs	r2, #54	; 0x36
 8022cdc:	701a      	strb	r2, [r3, #0]

		if (++programState == PROGRAM_STATE_MAX_NUM)
 8022cde:	4b13      	ldr	r3, [pc, #76]	; (8022d2c <APP_MainButtonPressedInterruptCallback+0x60>)
 8022ce0:	781b      	ldrb	r3, [r3, #0]
 8022ce2:	3301      	adds	r3, #1
 8022ce4:	b2da      	uxtb	r2, r3
 8022ce6:	4b11      	ldr	r3, [pc, #68]	; (8022d2c <APP_MainButtonPressedInterruptCallback+0x60>)
 8022ce8:	701a      	strb	r2, [r3, #0]
 8022cea:	4b10      	ldr	r3, [pc, #64]	; (8022d2c <APP_MainButtonPressedInterruptCallback+0x60>)
 8022cec:	781b      	ldrb	r3, [r3, #0]
 8022cee:	2b0b      	cmp	r3, #11
 8022cf0:	d102      	bne.n	8022cf8 <APP_MainButtonPressedInterruptCallback+0x2c>
		{
			programState = PROGRAM_MAIN_IDLE;
 8022cf2:	4b0e      	ldr	r3, [pc, #56]	; (8022d2c <APP_MainButtonPressedInterruptCallback+0x60>)
 8022cf4:	2201      	movs	r2, #1
 8022cf6:	701a      	strb	r2, [r3, #0]
		}

		gos_taskUnblock(menuTaskDesc.taskId);
 8022cf8:	4b0d      	ldr	r3, [pc, #52]	; (8022d30 <APP_MainButtonPressedInterruptCallback+0x64>)
 8022cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022cfc:	4618      	mov	r0, r3
 8022cfe:	f019 fad5 	bl	803c2ac <gos_taskUnblock>
		gos_taskWakeup(menuTaskDesc.taskId);
 8022d02:	4b0b      	ldr	r3, [pc, #44]	; (8022d30 <APP_MainButtonPressedInterruptCallback+0x64>)
 8022d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022d06:	4618      	mov	r0, r3
 8022d08:	f018 ff28 	bl	803bb5c <gos_taskWakeup>
		gos_taskResume(menuTaskDesc.taskId);
 8022d0c:	4b08      	ldr	r3, [pc, #32]	; (8022d30 <APP_MainButtonPressedInterruptCallback+0x64>)
 8022d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022d10:	4618      	mov	r0, r3
 8022d12:	f019 f90b 	bl	803bf2c <gos_taskResume>

		gos_taskResume(debouncerTaskId);
 8022d16:	4b07      	ldr	r3, [pc, #28]	; (8022d34 <APP_MainButtonPressedInterruptCallback+0x68>)
 8022d18:	881b      	ldrh	r3, [r3, #0]
 8022d1a:	4618      	mov	r0, r3
 8022d1c:	f019 f906 	bl	803bf2c <gos_taskResume>
		APP_DAC_PlayBeep();
 8022d20:	f7fe fbac 	bl	802147c <APP_DAC_PlayBeep>
	}
}
 8022d24:	bf00      	nop
 8022d26:	bd80      	pop	{r7, pc}
 8022d28:	200002cc 	.word	0x200002cc
 8022d2c:	20004200 	.word	0x20004200
 8022d30:	200005f4 	.word	0x200005f4
 8022d34:	20003bf4 	.word	0x20003bf4

08022d38 <APP_MessageInit>:
	/* External task ID	*/
	/* Privilege level	*/	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGED_USER
};

gos_result_t APP_MessageInit (void_t)
{
 8022d38:	b580      	push	{r7, lr}
 8022d3a:	b082      	sub	sp, #8
 8022d3c:	af00      	add	r7, sp, #0
	gos_result_t messageInitResult = GOS_SUCCESS;
 8022d3e:	2355      	movs	r3, #85	; 0x55
 8022d40:	71fb      	strb	r3, [r7, #7]

	messageInitResult &= gos_taskRegister(&messageTask1Desc, NULL);
 8022d42:	2100      	movs	r1, #0
 8022d44:	4811      	ldr	r0, [pc, #68]	; (8022d8c <APP_MessageInit+0x54>)
 8022d46:	f018 fcf1 	bl	803b72c <gos_taskRegister>
 8022d4a:	4603      	mov	r3, r0
 8022d4c:	461a      	mov	r2, r3
 8022d4e:	79fb      	ldrb	r3, [r7, #7]
 8022d50:	4013      	ands	r3, r2
 8022d52:	71fb      	strb	r3, [r7, #7]
	messageInitResult &= gos_taskRegister(&messageTask2Desc, NULL);
 8022d54:	2100      	movs	r1, #0
 8022d56:	480e      	ldr	r0, [pc, #56]	; (8022d90 <APP_MessageInit+0x58>)
 8022d58:	f018 fce8 	bl	803b72c <gos_taskRegister>
 8022d5c:	4603      	mov	r3, r0
 8022d5e:	461a      	mov	r2, r3
 8022d60:	79fb      	ldrb	r3, [r7, #7]
 8022d62:	4013      	ands	r3, r2
 8022d64:	71fb      	strb	r3, [r7, #7]
	messageInitResult &= gos_taskRegister(&messageTask3Desc, NULL);
 8022d66:	2100      	movs	r1, #0
 8022d68:	480a      	ldr	r0, [pc, #40]	; (8022d94 <APP_MessageInit+0x5c>)
 8022d6a:	f018 fcdf 	bl	803b72c <gos_taskRegister>
 8022d6e:	4603      	mov	r3, r0
 8022d70:	461a      	mov	r2, r3
 8022d72:	79fb      	ldrb	r3, [r7, #7]
 8022d74:	4013      	ands	r3, r2
 8022d76:	71fb      	strb	r3, [r7, #7]

	if (messageInitResult != GOS_SUCCESS)
 8022d78:	79fb      	ldrb	r3, [r7, #7]
 8022d7a:	2b55      	cmp	r3, #85	; 0x55
 8022d7c:	d001      	beq.n	8022d82 <APP_MessageInit+0x4a>
	{
		messageInitResult = GOS_ERROR;
 8022d7e:	23ae      	movs	r3, #174	; 0xae
 8022d80:	71fb      	strb	r3, [r7, #7]
	}

	return messageInitResult;
 8022d82:	79fb      	ldrb	r3, [r7, #7]
}
 8022d84:	4618      	mov	r0, r3
 8022d86:	3708      	adds	r7, #8
 8022d88:	46bd      	mov	sp, r7
 8022d8a:	bd80      	pop	{r7, pc}
 8022d8c:	200007b0 	.word	0x200007b0
 8022d90:	2000081c 	.word	0x2000081c
 8022d94:	20000888 	.word	0x20000888

08022d98 <APP_MessageTask1>:

/*
 * Function: APP_MessageTask1
 */
GOS_STATIC void_t APP_MessageTask1 (void_t)
{
 8022d98:	b580      	push	{r7, lr}
 8022d9a:	b096      	sub	sp, #88	; 0x58
 8022d9c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_messageId_t selector3 [] = { MSG_MESSAGE_3, 0 };
 8022d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8022da2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8022da6:	2300      	movs	r3, #0
 8022da8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	gos_message_t receivedMessage1;

	/*
	 * Function code.
	 */
	gos_signalSubscribe(buttonPressedSignal, APP_ButtonPressedSignalHandler, GOS_PRIV_TASK_MANIPULATE);
 8022dac:	4b13      	ldr	r3, [pc, #76]	; (8022dfc <APP_MessageTask1+0x64>)
 8022dae:	781b      	ldrb	r3, [r3, #0]
 8022db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8022db4:	4912      	ldr	r1, [pc, #72]	; (8022e00 <APP_MessageTask1+0x68>)
 8022db6:	4618      	mov	r0, r3
 8022db8:	f01c fc8a 	bl	803f6d0 <gos_signalSubscribe>

	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 8022dbc:	2001      	movs	r0, #1
 8022dbe:	f016 fc4d 	bl	803965c <svl_dsmWaitForState>

	for (;;)
	{
		gos_messageTx(&message1);
 8022dc2:	4810      	ldr	r0, [pc, #64]	; (8022e04 <APP_MessageTask1+0x6c>)
 8022dc4:	f01b f940 	bl	803e048 <gos_messageTx>
		gos_messageTx(&message4);
 8022dc8:	480f      	ldr	r0, [pc, #60]	; (8022e08 <APP_MessageTask1+0x70>)
 8022dca:	f01b f93d 	bl	803e048 <gos_messageTx>

		if (gos_messageRx(selector3, &receivedMessage1, MESSAGE_RX_TMO_MS) == GOS_SUCCESS)
 8022dce:	4639      	mov	r1, r7
 8022dd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8022dd4:	f242 7210 	movw	r2, #10000	; 0x2710
 8022dd8:	4618      	mov	r0, r3
 8022dda:	f01b f835 	bl	803de48 <gos_messageRx>
 8022dde:	4603      	mov	r3, r0
 8022de0:	2b55      	cmp	r3, #85	; 0x55
 8022de2:	d105      	bne.n	8022df0 <APP_MessageTask1+0x58>
		{
			gos_traceTrace(GOS_TRUE, (char_t*)receivedMessage1.messageBytes);
 8022de4:	463b      	mov	r3, r7
 8022de6:	3303      	adds	r3, #3
 8022de8:	4619      	mov	r1, r3
 8022dea:	2036      	movs	r0, #54	; 0x36
 8022dec:	f01d fdd4 	bl	8040998 <gos_traceTrace>
		}
		gos_taskSleep(2000);
 8022df0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8022df4:	f018 fe2c 	bl	803ba50 <gos_taskSleep>
		gos_messageTx(&message1);
 8022df8:	e7e3      	b.n	8022dc2 <APP_MessageTask1+0x2a>
 8022dfa:	bf00      	nop
 8022dfc:	200036e8 	.word	0x200036e8
 8022e00:	08022ebd 	.word	0x08022ebd
 8022e04:	20000660 	.word	0x20000660
 8022e08:	2000075c 	.word	0x2000075c

08022e0c <APP_MessageTask2>:

/*
 * Function: APP_MessageTask2
 */
GOS_STATIC void_t APP_MessageTask2 (void_t)
{
 8022e0c:	b580      	push	{r7, lr}
 8022e0e:	b098      	sub	sp, #96	; 0x60
 8022e10:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_messageId_t selector1 [] = { MSG_MESSAGE_1, MSG_EXTRA_MESSAGE, 0 };
 8022e12:	4a14      	ldr	r2, [pc, #80]	; (8022e64 <APP_MessageTask2+0x58>)
 8022e14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8022e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022e1c:	6018      	str	r0, [r3, #0]
 8022e1e:	3304      	adds	r3, #4
 8022e20:	8019      	strh	r1, [r3, #0]

	/*
	 * Function code.
	 */

	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 8022e22:	2001      	movs	r0, #1
 8022e24:	f016 fc1a 	bl	803965c <svl_dsmWaitForState>

	for (;;)
	{
		if (gos_messageRx(selector1, &receivedMessage2, MESSAGE_RX_TMO_MS) == GOS_SUCCESS)
 8022e28:	1d39      	adds	r1, r7, #4
 8022e2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8022e2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8022e32:	4618      	mov	r0, r3
 8022e34:	f01b f808 	bl	803de48 <gos_messageRx>
 8022e38:	4603      	mov	r3, r0
 8022e3a:	2b55      	cmp	r3, #85	; 0x55
 8022e3c:	d10d      	bne.n	8022e5a <APP_MessageTask2+0x4e>
		{
			gos_traceTrace(GOS_TRUE, (char_t*)receivedMessage2.messageBytes);
 8022e3e:	1d3b      	adds	r3, r7, #4
 8022e40:	3303      	adds	r3, #3
 8022e42:	4619      	mov	r1, r3
 8022e44:	2036      	movs	r0, #54	; 0x36
 8022e46:	f01d fda7 	bl	8040998 <gos_traceTrace>

			if (receivedMessage2.messageId != MSG_EXTRA_MESSAGE)
 8022e4a:	88bb      	ldrh	r3, [r7, #4]
 8022e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022e50:	d0ea      	beq.n	8022e28 <APP_MessageTask2+0x1c>
			{
				gos_messageTx(&message2);
 8022e52:	4805      	ldr	r0, [pc, #20]	; (8022e68 <APP_MessageTask2+0x5c>)
 8022e54:	f01b f8f8 	bl	803e048 <gos_messageTx>
 8022e58:	e7e6      	b.n	8022e28 <APP_MessageTask2+0x1c>
			}
		}
		else
		{
			gos_taskSleep(10);
 8022e5a:	200a      	movs	r0, #10
 8022e5c:	f018 fdf8 	bl	803ba50 <gos_taskSleep>
		if (gos_messageRx(selector1, &receivedMessage2, MESSAGE_RX_TMO_MS) == GOS_SUCCESS)
 8022e60:	e7e2      	b.n	8022e28 <APP_MessageTask2+0x1c>
 8022e62:	bf00      	nop
 8022e64:	08046c70 	.word	0x08046c70
 8022e68:	200006b4 	.word	0x200006b4

08022e6c <APP_MessageTask3>:

/*
 * Function: APP_MessageTask3
 */
GOS_STATIC void_t APP_MessageTask3 (void_t)
{
 8022e6c:	b580      	push	{r7, lr}
 8022e6e:	b096      	sub	sp, #88	; 0x58
 8022e70:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_messageId_t selector2 [] = { MSG_MESSAGE_2, 0 };
 8022e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022e76:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8022e7a:	2300      	movs	r3, #0
 8022e7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	/*
	 * Function code.
	 */

	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 8022e80:	2001      	movs	r0, #1
 8022e82:	f016 fbeb 	bl	803965c <svl_dsmWaitForState>

	for (;;)
	{
		if (gos_messageRx(selector2, &receivedMessage3, MESSAGE_RX_TMO_MS) == GOS_SUCCESS)
 8022e86:	4639      	mov	r1, r7
 8022e88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8022e8c:	f242 7210 	movw	r2, #10000	; 0x2710
 8022e90:	4618      	mov	r0, r3
 8022e92:	f01a ffd9 	bl	803de48 <gos_messageRx>
 8022e96:	4603      	mov	r3, r0
 8022e98:	2b55      	cmp	r3, #85	; 0x55
 8022e9a:	d109      	bne.n	8022eb0 <APP_MessageTask3+0x44>
		{
			gos_traceTrace(GOS_TRUE, (char_t*)receivedMessage3.messageBytes);
 8022e9c:	463b      	mov	r3, r7
 8022e9e:	3303      	adds	r3, #3
 8022ea0:	4619      	mov	r1, r3
 8022ea2:	2036      	movs	r0, #54	; 0x36
 8022ea4:	f01d fd78 	bl	8040998 <gos_traceTrace>
			gos_messageTx(&message3);
 8022ea8:	4803      	ldr	r0, [pc, #12]	; (8022eb8 <APP_MessageTask3+0x4c>)
 8022eaa:	f01b f8cd 	bl	803e048 <gos_messageTx>
 8022eae:	e7ea      	b.n	8022e86 <APP_MessageTask3+0x1a>
		}
		else
		{
			gos_taskSleep(10);
 8022eb0:	200a      	movs	r0, #10
 8022eb2:	f018 fdcd 	bl	803ba50 <gos_taskSleep>
		if (gos_messageRx(selector2, &receivedMessage3, MESSAGE_RX_TMO_MS) == GOS_SUCCESS)
 8022eb6:	e7e6      	b.n	8022e86 <APP_MessageTask3+0x1a>
 8022eb8:	20000708 	.word	0x20000708

08022ebc <APP_ButtonPressedSignalHandler>:

/*
 * Function: APP_ButtonPressedSignalHandler
 */
GOS_STATIC void_t APP_ButtonPressedSignalHandler (gos_signalSenderId_t senderId)
{
 8022ebc:	b580      	push	{r7, lr}
 8022ebe:	b082      	sub	sp, #8
 8022ec0:	af00      	add	r7, sp, #0
 8022ec2:	4603      	mov	r3, r0
 8022ec4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Function code.
	 */
	if (senderId == BUTTON_PRESSED_SIGNAL_SUSPEND)
 8022ec6:	88fb      	ldrh	r3, [r7, #6]
 8022ec8:	2b00      	cmp	r3, #0
 8022eca:	d10f      	bne.n	8022eec <APP_ButtonPressedSignalHandler+0x30>
	{
		gos_taskSuspend(messageTask1Desc.taskId);
 8022ecc:	4b11      	ldr	r3, [pc, #68]	; (8022f14 <APP_ButtonPressedSignalHandler+0x58>)
 8022ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022ed0:	4618      	mov	r0, r3
 8022ed2:	f018 ff09 	bl	803bce8 <gos_taskSuspend>
		gos_taskSuspend(messageTask2Desc.taskId);
 8022ed6:	4b10      	ldr	r3, [pc, #64]	; (8022f18 <APP_ButtonPressedSignalHandler+0x5c>)
 8022ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022eda:	4618      	mov	r0, r3
 8022edc:	f018 ff04 	bl	803bce8 <gos_taskSuspend>
		gos_taskSuspend(messageTask3Desc.taskId);
 8022ee0:	4b0e      	ldr	r3, [pc, #56]	; (8022f1c <APP_ButtonPressedSignalHandler+0x60>)
 8022ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022ee4:	4618      	mov	r0, r3
 8022ee6:	f018 feff 	bl	803bce8 <gos_taskSuspend>
	{
		gos_taskResume(messageTask1Desc.taskId);
		gos_taskResume(messageTask2Desc.taskId);
		gos_taskResume(messageTask3Desc.taskId);
	}
}
 8022eea:	e00e      	b.n	8022f0a <APP_ButtonPressedSignalHandler+0x4e>
		gos_taskResume(messageTask1Desc.taskId);
 8022eec:	4b09      	ldr	r3, [pc, #36]	; (8022f14 <APP_ButtonPressedSignalHandler+0x58>)
 8022eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022ef0:	4618      	mov	r0, r3
 8022ef2:	f019 f81b 	bl	803bf2c <gos_taskResume>
		gos_taskResume(messageTask2Desc.taskId);
 8022ef6:	4b08      	ldr	r3, [pc, #32]	; (8022f18 <APP_ButtonPressedSignalHandler+0x5c>)
 8022ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022efa:	4618      	mov	r0, r3
 8022efc:	f019 f816 	bl	803bf2c <gos_taskResume>
		gos_taskResume(messageTask3Desc.taskId);
 8022f00:	4b06      	ldr	r3, [pc, #24]	; (8022f1c <APP_ButtonPressedSignalHandler+0x60>)
 8022f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8022f04:	4618      	mov	r0, r3
 8022f06:	f019 f811 	bl	803bf2c <gos_taskResume>
}
 8022f0a:	bf00      	nop
 8022f0c:	3708      	adds	r7, #8
 8022f0e:	46bd      	mov	sp, r7
 8022f10:	bd80      	pop	{r7, pc}
 8022f12:	bf00      	nop
 8022f14:	200007b0 	.word	0x200007b0
 8022f18:	2000081c 	.word	0x2000081c
 8022f1c:	20000888 	.word	0x20000888

08022f20 <APP_PrioInversionInit>:
	/* Privilege level	*/	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGE_USER,
	.taskCpuUsageLimit = 2500
};

gos_result_t APP_PrioInversionInit (void_t)
{
 8022f20:	b580      	push	{r7, lr}
 8022f22:	b082      	sub	sp, #8
 8022f24:	af00      	add	r7, sp, #0
	gos_result_t prioInversionInitResult = GOS_SUCCESS;
 8022f26:	2355      	movs	r3, #85	; 0x55
 8022f28:	71fb      	strb	r3, [r7, #7]

	prioInversionInitResult &= gos_taskRegister(&highPrioTaskDesc, NULL);
 8022f2a:	2100      	movs	r1, #0
 8022f2c:	4811      	ldr	r0, [pc, #68]	; (8022f74 <APP_PrioInversionInit+0x54>)
 8022f2e:	f018 fbfd 	bl	803b72c <gos_taskRegister>
 8022f32:	4603      	mov	r3, r0
 8022f34:	461a      	mov	r2, r3
 8022f36:	79fb      	ldrb	r3, [r7, #7]
 8022f38:	4013      	ands	r3, r2
 8022f3a:	71fb      	strb	r3, [r7, #7]
	prioInversionInitResult &= gos_taskRegister(&mediumPrioTaskDesc, NULL);
 8022f3c:	2100      	movs	r1, #0
 8022f3e:	480e      	ldr	r0, [pc, #56]	; (8022f78 <APP_PrioInversionInit+0x58>)
 8022f40:	f018 fbf4 	bl	803b72c <gos_taskRegister>
 8022f44:	4603      	mov	r3, r0
 8022f46:	461a      	mov	r2, r3
 8022f48:	79fb      	ldrb	r3, [r7, #7]
 8022f4a:	4013      	ands	r3, r2
 8022f4c:	71fb      	strb	r3, [r7, #7]
	prioInversionInitResult &= gos_taskRegister(&lowPrioTaskDesc, NULL);
 8022f4e:	2100      	movs	r1, #0
 8022f50:	480a      	ldr	r0, [pc, #40]	; (8022f7c <APP_PrioInversionInit+0x5c>)
 8022f52:	f018 fbeb 	bl	803b72c <gos_taskRegister>
 8022f56:	4603      	mov	r3, r0
 8022f58:	461a      	mov	r2, r3
 8022f5a:	79fb      	ldrb	r3, [r7, #7]
 8022f5c:	4013      	ands	r3, r2
 8022f5e:	71fb      	strb	r3, [r7, #7]

	if (prioInversionInitResult != GOS_SUCCESS)
 8022f60:	79fb      	ldrb	r3, [r7, #7]
 8022f62:	2b55      	cmp	r3, #85	; 0x55
 8022f64:	d001      	beq.n	8022f6a <APP_PrioInversionInit+0x4a>
	{
		prioInversionInitResult = GOS_ERROR;
 8022f66:	23ae      	movs	r3, #174	; 0xae
 8022f68:	71fb      	strb	r3, [r7, #7]
	}

	return prioInversionInitResult;
 8022f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8022f6c:	4618      	mov	r0, r3
 8022f6e:	3708      	adds	r7, #8
 8022f70:	46bd      	mov	sp, r7
 8022f72:	bd80      	pop	{r7, pc}
 8022f74:	200008f4 	.word	0x200008f4
 8022f78:	20000960 	.word	0x20000960
 8022f7c:	200009cc 	.word	0x200009cc

08022f80 <APP_HighPriorityTask>:

/*
 * Function: APP_HighPriorityTask
 */
GOS_STATIC void_t APP_HighPriorityTask (void_t)
{
 8022f80:	b580      	push	{r7, lr}
 8022f82:	b082      	sub	sp, #8
 8022f84:	af00      	add	r7, sp, #0
	 * Function code.
	 */
	/*
	 * Subscribe to button pressed signal.
	 */
	gos_signalSubscribe(buttonPressedSignal, APP_ButtonPressedSignalHandler, GOS_PRIV_TASK_MANIPULATE);
 8022f86:	4b22      	ldr	r3, [pc, #136]	; (8023010 <APP_HighPriorityTask+0x90>)
 8022f88:	781b      	ldrb	r3, [r3, #0]
 8022f8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8022f8e:	4921      	ldr	r1, [pc, #132]	; (8023014 <APP_HighPriorityTask+0x94>)
 8022f90:	4618      	mov	r0, r3
 8022f92:	f01c fb9d 	bl	803f6d0 <gos_signalSubscribe>

	/*
	 * Create lock.
	 */
	gos_mutexInit(&prioLockId);
 8022f96:	4820      	ldr	r0, [pc, #128]	; (8023018 <APP_HighPriorityTask+0x98>)
 8022f98:	f01b f9b4 	bl	803e304 <gos_mutexInit>

	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 8022f9c:	2001      	movs	r0, #1
 8022f9e:	f016 fb5d 	bl	803965c <svl_dsmWaitForState>

	/*
	 * Delay task.
	 */
	gos_taskSleep(56);
 8022fa2:	2038      	movs	r0, #56	; 0x38
 8022fa4:	f018 fd54 	bl	803ba50 <gos_taskSleep>
	for(;;)
	{
	    /*
	     * Take lock.
	     */
	    gos_traceTrace(GOS_TRUE, "Task H trying to take lock...\r\n");
 8022fa8:	491c      	ldr	r1, [pc, #112]	; (802301c <APP_HighPriorityTask+0x9c>)
 8022faa:	2036      	movs	r0, #54	; 0x36
 8022fac:	f01d fcf4 	bl	8040998 <gos_traceTrace>
	    time = gos_kernelGetSysTicks();
 8022fb0:	f017 fb60 	bl	803a674 <gos_kernelGetSysTicks>
 8022fb4:	6078      	str	r0, [r7, #4]

	    if (gos_mutexLock(&prioLockId, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8022fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8022fba:	4817      	ldr	r0, [pc, #92]	; (8023018 <APP_HighPriorityTask+0x98>)
 8022fbc:	f01b f9bc 	bl	803e338 <gos_mutexLock>
 8022fc0:	4603      	mov	r3, r0
 8022fc2:	2b55      	cmp	r3, #85	; 0x55
 8022fc4:	d11e      	bne.n	8023004 <APP_HighPriorityTask+0x84>
	    {
		    time = gos_kernelGetSysTicks() - time;
 8022fc6:	f017 fb55 	bl	803a674 <gos_kernelGetSysTicks>
 8022fca:	4602      	mov	r2, r0
 8022fcc:	687b      	ldr	r3, [r7, #4]
 8022fce:	1ad3      	subs	r3, r2, r3
 8022fd0:	607b      	str	r3, [r7, #4]
		    gos_traceTraceFormatted(GOS_TRUE, "Task H got lock. Time: %d ms. Do some work now...\r\n", time);
 8022fd2:	687a      	ldr	r2, [r7, #4]
 8022fd4:	4912      	ldr	r1, [pc, #72]	; (8023020 <APP_HighPriorityTask+0xa0>)
 8022fd6:	2036      	movs	r0, #54	; 0x36
 8022fd8:	f01d fdfa 	bl	8040bd0 <gos_traceTraceFormatted>

		    /*
		     * Do something short.
		     */
		    time = gos_kernelGetSysTicks();
 8022fdc:	f017 fb4a 	bl	803a674 <gos_kernelGetSysTicks>
 8022fe0:	6078      	str	r0, [r7, #4]
		    gos_kernelDelayMs(10);
 8022fe2:	200a      	movs	r0, #10
 8022fe4:	f017 fba2 	bl	803a72c <gos_kernelDelayMs>
		    time = gos_kernelGetSysTicks() - time;
 8022fe8:	f017 fb44 	bl	803a674 <gos_kernelGetSysTicks>
 8022fec:	4602      	mov	r2, r0
 8022fee:	687b      	ldr	r3, [r7, #4]
 8022ff0:	1ad3      	subs	r3, r2, r3
 8022ff2:	607b      	str	r3, [r7, #4]

		    /*
		     * Release lock.
		     */
		    gos_traceTraceFormatted(GOS_TRUE, "Task H releasing lock. H had lock for: %d ms\r\n", time);
 8022ff4:	687a      	ldr	r2, [r7, #4]
 8022ff6:	490b      	ldr	r1, [pc, #44]	; (8023024 <APP_HighPriorityTask+0xa4>)
 8022ff8:	2036      	movs	r0, #54	; 0x36
 8022ffa:	f01d fde9 	bl	8040bd0 <gos_traceTraceFormatted>
		    gos_mutexUnlock(&prioLockId);
 8022ffe:	4806      	ldr	r0, [pc, #24]	; (8023018 <APP_HighPriorityTask+0x98>)
 8023000:	f01b faa0 	bl	803e544 <gos_mutexUnlock>
	    }

	    /*
	     * Go to sleep.
	     */
	    gos_taskSleep(1020);
 8023004:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 8023008:	f018 fd22 	bl	803ba50 <gos_taskSleep>
	    gos_traceTrace(GOS_TRUE, "Task H trying to take lock...\r\n");
 802300c:	e7cc      	b.n	8022fa8 <APP_HighPriorityTask+0x28>
 802300e:	bf00      	nop
 8023010:	200036e8 	.word	0x200036e8
 8023014:	080230fd 	.word	0x080230fd
 8023018:	20004210 	.word	0x20004210
 802301c:	08046c78 	.word	0x08046c78
 8023020:	08046c98 	.word	0x08046c98
 8023024:	08046ccc 	.word	0x08046ccc

08023028 <APP_MediumPriorityTask>:

/*
 * Function: APP_MediumPriorityTask
 */
GOS_STATIC void_t APP_MediumPriorityTask (void_t)
{
 8023028:	b580      	push	{r7, lr}
 802302a:	b082      	sub	sp, #8
 802302c:	af00      	add	r7, sp, #0
	 * Function code.
	 */
	/*
	 * Delay task.
	 */
	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 802302e:	2001      	movs	r0, #1
 8023030:	f016 fb14 	bl	803965c <svl_dsmWaitForState>

	gos_taskSleep(56);
 8023034:	2038      	movs	r0, #56	; 0x38
 8023036:	f018 fd0b 	bl	803ba50 <gos_taskSleep>
	for (;;)
	{
		/*
		 * This task runs when low-priority task has the lock.
		 */
		gos_traceTrace(GOS_TRUE, "Medium priority task doing some work...\r\n");
 802303a:	490d      	ldr	r1, [pc, #52]	; (8023070 <APP_MediumPriorityTask+0x48>)
 802303c:	2036      	movs	r0, #54	; 0x36
 802303e:	f01d fcab 	bl	8040998 <gos_traceTrace>
		time = gos_kernelGetSysTicks();
 8023042:	f017 fb17 	bl	803a674 <gos_kernelGetSysTicks>
 8023046:	6078      	str	r0, [r7, #4]

		/*
		 * Do something time consuming.
		 */
#if CFG_SCHED_COOPERATIVE == 0
		gos_kernelDelayMs(1000);
 8023048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 802304c:	f017 fb6e 	bl	803a72c <gos_kernelDelayMs>
#endif
	    /*
	     * Go to sleep.
	     */

	    time = gos_kernelGetSysTicks() - time;
 8023050:	f017 fb10 	bl	803a674 <gos_kernelGetSysTicks>
 8023054:	4602      	mov	r2, r0
 8023056:	687b      	ldr	r3, [r7, #4]
 8023058:	1ad3      	subs	r3, r2, r3
 802305a:	607b      	str	r3, [r7, #4]
	    gos_traceTraceFormatted(GOS_TRUE, "Medium prio task finished work. Time taken: %d ms\r\n", time);
 802305c:	687a      	ldr	r2, [r7, #4]
 802305e:	4905      	ldr	r1, [pc, #20]	; (8023074 <APP_MediumPriorityTask+0x4c>)
 8023060:	2036      	movs	r0, #54	; 0x36
 8023062:	f01d fdb5 	bl	8040bd0 <gos_traceTraceFormatted>
		gos_taskSleep(507);
 8023066:	f240 10fb 	movw	r0, #507	; 0x1fb
 802306a:	f018 fcf1 	bl	803ba50 <gos_taskSleep>
		gos_traceTrace(GOS_TRUE, "Medium priority task doing some work...\r\n");
 802306e:	e7e4      	b.n	802303a <APP_MediumPriorityTask+0x12>
 8023070:	08046cfc 	.word	0x08046cfc
 8023074:	08046d28 	.word	0x08046d28

08023078 <APP_LowPriorityTask>:

/*
 * Function: APP_LowPriorityTask
 */
GOS_STATIC void_t APP_LowPriorityTask (void_t)
{
 8023078:	b580      	push	{r7, lr}
 802307a:	b082      	sub	sp, #8
 802307c:	af00      	add	r7, sp, #0
	u32_t time;

	/*
	 * Function code.
	 */
	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 802307e:	2001      	movs	r0, #1
 8023080:	f016 faec 	bl	803965c <svl_dsmWaitForState>
	for (;;)
	{
	    /*
	     * Take lock.
	     */
		gos_traceTrace(GOS_TRUE, "Task L trying to take lock...\r\n");
 8023084:	4919      	ldr	r1, [pc, #100]	; (80230ec <APP_LowPriorityTask+0x74>)
 8023086:	2036      	movs	r0, #54	; 0x36
 8023088:	f01d fc86 	bl	8040998 <gos_traceTrace>
		time =  gos_kernelGetSysTicks();
 802308c:	f017 faf2 	bl	803a674 <gos_kernelGetSysTicks>
 8023090:	6078      	str	r0, [r7, #4]

		if (gos_mutexLock(&prioLockId, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8023092:	f04f 31ff 	mov.w	r1, #4294967295
 8023096:	4816      	ldr	r0, [pc, #88]	; (80230f0 <APP_LowPriorityTask+0x78>)
 8023098:	f01b f94e 	bl	803e338 <gos_mutexLock>
 802309c:	4603      	mov	r3, r0
 802309e:	2b55      	cmp	r3, #85	; 0x55
 80230a0:	d11f      	bne.n	80230e2 <APP_LowPriorityTask+0x6a>
		{
			time = gos_kernelGetSysTicks() - time;
 80230a2:	f017 fae7 	bl	803a674 <gos_kernelGetSysTicks>
 80230a6:	4602      	mov	r2, r0
 80230a8:	687b      	ldr	r3, [r7, #4]
 80230aa:	1ad3      	subs	r3, r2, r3
 80230ac:	607b      	str	r3, [r7, #4]

			gos_traceTraceFormatted(GOS_TRUE, "Task L got lock. Time: %d ms. Do some work now...\r\n", time);
 80230ae:	687a      	ldr	r2, [r7, #4]
 80230b0:	4910      	ldr	r1, [pc, #64]	; (80230f4 <APP_LowPriorityTask+0x7c>)
 80230b2:	2036      	movs	r0, #54	; 0x36
 80230b4:	f01d fd8c 	bl	8040bd0 <gos_traceTraceFormatted>

			/*
			 * Do something time consuming.
			 */
			time = gos_kernelGetSysTicks();
 80230b8:	f017 fadc 	bl	803a674 <gos_kernelGetSysTicks>
 80230bc:	6078      	str	r0, [r7, #4]
	#if CFG_SCHED_COOPERATIVE == 0
		    gos_kernelDelayMs(1000);
 80230be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80230c2:	f017 fb33 	bl	803a72c <gos_kernelDelayMs>
		    {
		    	gos_kernelDelayMs(1);
		    	gos_kernelTaskYield();
		    }
	#endif
		    time = gos_kernelGetSysTicks() - time;
 80230c6:	f017 fad5 	bl	803a674 <gos_kernelGetSysTicks>
 80230ca:	4602      	mov	r2, r0
 80230cc:	687b      	ldr	r3, [r7, #4]
 80230ce:	1ad3      	subs	r3, r2, r3
 80230d0:	607b      	str	r3, [r7, #4]

		    /*
		     * Release lock.
		     */
		    gos_traceTraceFormatted(GOS_TRUE, "Task L releasing lock. L had lock for: %d ms\r\n", time);
 80230d2:	687a      	ldr	r2, [r7, #4]
 80230d4:	4908      	ldr	r1, [pc, #32]	; (80230f8 <APP_LowPriorityTask+0x80>)
 80230d6:	2036      	movs	r0, #54	; 0x36
 80230d8:	f01d fd7a 	bl	8040bd0 <gos_traceTraceFormatted>
		    gos_mutexUnlock(&prioLockId);
 80230dc:	4804      	ldr	r0, [pc, #16]	; (80230f0 <APP_LowPriorityTask+0x78>)
 80230de:	f01b fa31 	bl	803e544 <gos_mutexUnlock>
		}

	    /*
	     * Go to sleep.
	     */
	    gos_taskSleep(504);
 80230e2:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 80230e6:	f018 fcb3 	bl	803ba50 <gos_taskSleep>
		gos_traceTrace(GOS_TRUE, "Task L trying to take lock...\r\n");
 80230ea:	e7cb      	b.n	8023084 <APP_LowPriorityTask+0xc>
 80230ec:	08046d5c 	.word	0x08046d5c
 80230f0:	20004210 	.word	0x20004210
 80230f4:	08046d7c 	.word	0x08046d7c
 80230f8:	08046db0 	.word	0x08046db0

080230fc <APP_ButtonPressedSignalHandler>:

/*
 * Function: APP_ButtonSignalHandler
 */
GOS_STATIC void_t APP_ButtonPressedSignalHandler (gos_signalSenderId_t senderId)
{
 80230fc:	b580      	push	{r7, lr}
 80230fe:	b082      	sub	sp, #8
 8023100:	af00      	add	r7, sp, #0
 8023102:	4603      	mov	r3, r0
 8023104:	80fb      	strh	r3, [r7, #6]
	/*
	 * Function code.
	 */
	if (senderId == BUTTON_PRESSED_SIGNAL_SUSPEND)
 8023106:	88fb      	ldrh	r3, [r7, #6]
 8023108:	2b00      	cmp	r3, #0
 802310a:	d10f      	bne.n	802312c <APP_ButtonPressedSignalHandler+0x30>
	{
		gos_taskSuspend(highPrioTaskDesc.taskId);
 802310c:	4b11      	ldr	r3, [pc, #68]	; (8023154 <APP_ButtonPressedSignalHandler+0x58>)
 802310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023110:	4618      	mov	r0, r3
 8023112:	f018 fde9 	bl	803bce8 <gos_taskSuspend>
		gos_taskSuspend(mediumPrioTaskDesc.taskId);
 8023116:	4b10      	ldr	r3, [pc, #64]	; (8023158 <APP_ButtonPressedSignalHandler+0x5c>)
 8023118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802311a:	4618      	mov	r0, r3
 802311c:	f018 fde4 	bl	803bce8 <gos_taskSuspend>
		gos_taskSuspend(lowPrioTaskDesc.taskId);
 8023120:	4b0e      	ldr	r3, [pc, #56]	; (802315c <APP_ButtonPressedSignalHandler+0x60>)
 8023122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023124:	4618      	mov	r0, r3
 8023126:	f018 fddf 	bl	803bce8 <gos_taskSuspend>
	{
		gos_taskResume(lowPrioTaskDesc.taskId);
		gos_taskResume(mediumPrioTaskDesc.taskId);
		gos_taskResume(highPrioTaskDesc.taskId);
	}
}
 802312a:	e00e      	b.n	802314a <APP_ButtonPressedSignalHandler+0x4e>
		gos_taskResume(lowPrioTaskDesc.taskId);
 802312c:	4b0b      	ldr	r3, [pc, #44]	; (802315c <APP_ButtonPressedSignalHandler+0x60>)
 802312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023130:	4618      	mov	r0, r3
 8023132:	f018 fefb 	bl	803bf2c <gos_taskResume>
		gos_taskResume(mediumPrioTaskDesc.taskId);
 8023136:	4b08      	ldr	r3, [pc, #32]	; (8023158 <APP_ButtonPressedSignalHandler+0x5c>)
 8023138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802313a:	4618      	mov	r0, r3
 802313c:	f018 fef6 	bl	803bf2c <gos_taskResume>
		gos_taskResume(highPrioTaskDesc.taskId);
 8023140:	4b04      	ldr	r3, [pc, #16]	; (8023154 <APP_ButtonPressedSignalHandler+0x58>)
 8023142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023144:	4618      	mov	r0, r3
 8023146:	f018 fef1 	bl	803bf2c <gos_taskResume>
}
 802314a:	bf00      	nop
 802314c:	3708      	adds	r7, #8
 802314e:	46bd      	mov	sp, r7
 8023150:	bd80      	pop	{r7, pc}
 8023152:	bf00      	nop
 8023154:	200008f4 	.word	0x200008f4
 8023158:	20000960 	.word	0x20000960
 802315c:	200009cc 	.word	0x200009cc

08023160 <APP_PwmLedInit>:
	/* External task ID	*/
	/* Privilege level	*/	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGE_USER
};

gos_result_t APP_PwmLedInit (void_t)
{
 8023160:	b580      	push	{r7, lr}
 8023162:	b082      	sub	sp, #8
 8023164:	af00      	add	r7, sp, #0
	gos_result_t pwmLedInitResult = GOS_SUCCESS;
 8023166:	2355      	movs	r3, #85	; 0x55
 8023168:	71fb      	strb	r3, [r7, #7]

	pwmLedInitResult &= gos_taskRegister(&pwmLedTaskDesc, NULL);
 802316a:	2100      	movs	r1, #0
 802316c:	4808      	ldr	r0, [pc, #32]	; (8023190 <APP_PwmLedInit+0x30>)
 802316e:	f018 fadd 	bl	803b72c <gos_taskRegister>
 8023172:	4603      	mov	r3, r0
 8023174:	461a      	mov	r2, r3
 8023176:	79fb      	ldrb	r3, [r7, #7]
 8023178:	4013      	ands	r3, r2
 802317a:	71fb      	strb	r3, [r7, #7]

	if (pwmLedInitResult != GOS_SUCCESS)
 802317c:	79fb      	ldrb	r3, [r7, #7]
 802317e:	2b55      	cmp	r3, #85	; 0x55
 8023180:	d001      	beq.n	8023186 <APP_PwmLedInit+0x26>
	{
		pwmLedInitResult = GOS_ERROR;
 8023182:	23ae      	movs	r3, #174	; 0xae
 8023184:	71fb      	strb	r3, [r7, #7]
	}

	return pwmLedInitResult;
 8023186:	79fb      	ldrb	r3, [r7, #7]
}
 8023188:	4618      	mov	r0, r3
 802318a:	3708      	adds	r7, #8
 802318c:	46bd      	mov	sp, r7
 802318e:	bd80      	pop	{r7, pc}
 8023190:	20000a38 	.word	0x20000a38

08023194 <APP_PwmLedTask>:

/*
 * Function: APP_PwmLedTask
 */
GOS_STATIC void_t APP_PwmLedTask (void_t)
{
 8023194:	b580      	push	{r7, lr}
 8023196:	b082      	sub	sp, #8
 8023198:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t duty = 0u;
 802319a:	2300      	movs	r3, #0
 802319c:	71fb      	strb	r3, [r7, #7]
	u8_t dir = 0u;
 802319e:	2300      	movs	r3, #0
 80231a0:	71bb      	strb	r3, [r7, #6]
	/*
	 * Function code.
	 */
	for(;;)
	{
		if (dir == 0)
 80231a2:	79bb      	ldrb	r3, [r7, #6]
 80231a4:	2b00      	cmp	r3, #0
 80231a6:	d10c      	bne.n	80231c2 <APP_PwmLedTask+0x2e>
		{
			pwm_driver_set_duty(duty);
 80231a8:	79fb      	ldrb	r3, [r7, #7]
 80231aa:	4618      	mov	r0, r3
 80231ac:	f003 f95c 	bl	8026468 <pwm_driver_set_duty>

			duty += 1;
 80231b0:	79fb      	ldrb	r3, [r7, #7]
 80231b2:	3301      	adds	r3, #1
 80231b4:	71fb      	strb	r3, [r7, #7]

			if (duty == 100)
 80231b6:	79fb      	ldrb	r3, [r7, #7]
 80231b8:	2b64      	cmp	r3, #100	; 0x64
 80231ba:	d10e      	bne.n	80231da <APP_PwmLedTask+0x46>
			{
				dir = 1u;
 80231bc:	2301      	movs	r3, #1
 80231be:	71bb      	strb	r3, [r7, #6]
 80231c0:	e00b      	b.n	80231da <APP_PwmLedTask+0x46>
			}
		}
		else
		{
			pwm_driver_set_duty(duty);
 80231c2:	79fb      	ldrb	r3, [r7, #7]
 80231c4:	4618      	mov	r0, r3
 80231c6:	f003 f94f 	bl	8026468 <pwm_driver_set_duty>
			duty -= 1;
 80231ca:	79fb      	ldrb	r3, [r7, #7]
 80231cc:	3b01      	subs	r3, #1
 80231ce:	71fb      	strb	r3, [r7, #7]
			if (duty == 0)
 80231d0:	79fb      	ldrb	r3, [r7, #7]
 80231d2:	2b00      	cmp	r3, #0
 80231d4:	d101      	bne.n	80231da <APP_PwmLedTask+0x46>
			{
				dir = 0u;
 80231d6:	2300      	movs	r3, #0
 80231d8:	71bb      	strb	r3, [r7, #6]
			}
		}

		gos_taskSleep(10);
 80231da:	200a      	movs	r0, #10
 80231dc:	f018 fc38 	bl	803ba50 <gos_taskSleep>
		if (dir == 0)
 80231e0:	e7df      	b.n	80231a2 <APP_PwmLedTask+0xe>
	...

080231e4 <APP_QueueObserverInit>:
	/* External task ID	*/
	/* Privilege level	*/	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGED_USER
};

gos_result_t APP_QueueObserverInit (void_t)
{
 80231e4:	b580      	push	{r7, lr}
 80231e6:	b082      	sub	sp, #8
 80231e8:	af00      	add	r7, sp, #0
	gos_result_t queueObserverInitResult = GOS_SUCCESS;
 80231ea:	2355      	movs	r3, #85	; 0x55
 80231ec:	71fb      	strb	r3, [r7, #7]

	queueObserverInitResult &= gos_taskRegister(&queueObserverTaskDesc, NULL);
 80231ee:	2100      	movs	r1, #0
 80231f0:	4808      	ldr	r0, [pc, #32]	; (8023214 <APP_QueueObserverInit+0x30>)
 80231f2:	f018 fa9b 	bl	803b72c <gos_taskRegister>
 80231f6:	4603      	mov	r3, r0
 80231f8:	461a      	mov	r2, r3
 80231fa:	79fb      	ldrb	r3, [r7, #7]
 80231fc:	4013      	ands	r3, r2
 80231fe:	71fb      	strb	r3, [r7, #7]

	if (queueObserverInitResult != GOS_SUCCESS)
 8023200:	79fb      	ldrb	r3, [r7, #7]
 8023202:	2b55      	cmp	r3, #85	; 0x55
 8023204:	d001      	beq.n	802320a <APP_QueueObserverInit+0x26>
	{
		queueObserverInitResult = GOS_ERROR;
 8023206:	23ae      	movs	r3, #174	; 0xae
 8023208:	71fb      	strb	r3, [r7, #7]
	}

	return queueObserverInitResult;
 802320a:	79fb      	ldrb	r3, [r7, #7]
}
 802320c:	4618      	mov	r0, r3
 802320e:	3708      	adds	r7, #8
 8023210:	46bd      	mov	sp, r7
 8023212:	bd80      	pop	{r7, pc}
 8023214:	20000ac0 	.word	0x20000ac0

08023218 <APP_QueueObserverTask>:

/*
 * Function: APP_QueueObserverTask
 */
GOS_STATIC void_t APP_QueueObserverTask (void_t)
{
 8023218:	b580      	push	{r7, lr}
 802321a:	b082      	sub	sp, #8
 802321c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u16_t           dummyCounter = 0u;
 802321e:	2300      	movs	r3, #0
 8023220:	80fb      	strh	r3, [r7, #6]
	 * Function code.
	 */
	/*
	 * Register queue full hook.
	 */
	gos_queueRegisterFullHook(APP_QueueFullHook);
 8023222:	480b      	ldr	r0, [pc, #44]	; (8023250 <APP_QueueObserverTask+0x38>)
 8023224:	f01b fc58 	bl	803ead8 <gos_queueRegisterFullHook>

	/*
	 * Create dummy queue.
	 */
	gos_queueCreate(&dummyQueueDesc);
 8023228:	480a      	ldr	r0, [pc, #40]	; (8023254 <APP_QueueObserverTask+0x3c>)
 802322a:	f01b fa49 	bl	803e6c0 <gos_queueCreate>
	for(;;)
	{
		/*
		 * Put a dummy element in the dummy queue.
		 */
		gos_queuePut(dummyQueueDesc.queueId, &dummyCounter, sizeof(dummyCounter), 1000);
 802322e:	4b09      	ldr	r3, [pc, #36]	; (8023254 <APP_QueueObserverTask+0x3c>)
 8023230:	8818      	ldrh	r0, [r3, #0]
 8023232:	1db9      	adds	r1, r7, #6
 8023234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8023238:	2202      	movs	r2, #2
 802323a:	f01b fa9d 	bl	803e778 <gos_queuePut>
		dummyCounter++;
 802323e:	88fb      	ldrh	r3, [r7, #6]
 8023240:	3301      	adds	r3, #1
 8023242:	b29b      	uxth	r3, r3
 8023244:	80fb      	strh	r3, [r7, #6]
		gos_taskSleep(50);
 8023246:	2032      	movs	r0, #50	; 0x32
 8023248:	f018 fc02 	bl	803ba50 <gos_taskSleep>
		gos_queuePut(dummyQueueDesc.queueId, &dummyCounter, sizeof(dummyCounter), 1000);
 802324c:	e7ef      	b.n	802322e <APP_QueueObserverTask+0x16>
 802324e:	bf00      	nop
 8023250:	08023259 	.word	0x08023259
 8023254:	20000aa4 	.word	0x20000aa4

08023258 <APP_QueueFullHook>:

/*
 * Function: APP_QueueFullHook
 */
GOS_STATIC void_t APP_QueueFullHook (gos_queueId_t queueId)
{
 8023258:	b580      	push	{r7, lr}
 802325a:	b088      	sub	sp, #32
 802325c:	af00      	add	r7, sp, #0
 802325e:	4603      	mov	r3, r0
 8023260:	80fb      	strh	r3, [r7, #6]
	 */
	/*
	 * Get queue name, and receive the print message with the
	 * queue name in it.
	 */
	gos_queueGetName(queueId, queueName);
 8023262:	f107 0208 	add.w	r2, r7, #8
 8023266:	88fb      	ldrh	r3, [r7, #6]
 8023268:	4611      	mov	r1, r2
 802326a:	4618      	mov	r0, r3
 802326c:	f01b fc50 	bl	803eb10 <gos_queueGetName>
	gos_traceTraceFormatted(GOS_TRUE, "%s is full!\r\n", queueName);
 8023270:	f107 0308 	add.w	r3, r7, #8
 8023274:	461a      	mov	r2, r3
 8023276:	4904      	ldr	r1, [pc, #16]	; (8023288 <APP_QueueFullHook+0x30>)
 8023278:	2036      	movs	r0, #54	; 0x36
 802327a:	f01d fca9 	bl	8040bd0 <gos_traceTraceFormatted>
}
 802327e:	bf00      	nop
 8023280:	3720      	adds	r7, #32
 8023282:	46bd      	mov	sp, r7
 8023284:	bd80      	pop	{r7, pc}
 8023286:	bf00      	nop
 8023288:	08046de0 	.word	0x08046de0

0802328c <APP_RandomInit>:
	/* Task priority	*/	.taskPriority	= 98,
	/* Privilege level	*/	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGE_USER
};

gos_result_t APP_RandomInit (void_t)
{
 802328c:	b580      	push	{r7, lr}
 802328e:	b082      	sub	sp, #8
 8023290:	af00      	add	r7, sp, #0
	gos_result_t initResult = GOS_SUCCESS;
 8023292:	2355      	movs	r3, #85	; 0x55
 8023294:	71fb      	strb	r3, [r7, #7]

	initResult &= gos_taskRegister(&randomTask1Desc, NULL);
 8023296:	2100      	movs	r1, #0
 8023298:	480d      	ldr	r0, [pc, #52]	; (80232d0 <APP_RandomInit+0x44>)
 802329a:	f018 fa47 	bl	803b72c <gos_taskRegister>
 802329e:	4603      	mov	r3, r0
 80232a0:	461a      	mov	r2, r3
 80232a2:	79fb      	ldrb	r3, [r7, #7]
 80232a4:	4013      	ands	r3, r2
 80232a6:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_taskRegister(&randomTask2Desc, NULL);
 80232a8:	2100      	movs	r1, #0
 80232aa:	480a      	ldr	r0, [pc, #40]	; (80232d4 <APP_RandomInit+0x48>)
 80232ac:	f018 fa3e 	bl	803b72c <gos_taskRegister>
 80232b0:	4603      	mov	r3, r0
 80232b2:	461a      	mov	r2, r3
 80232b4:	79fb      	ldrb	r3, [r7, #7]
 80232b6:	4013      	ands	r3, r2
 80232b8:	71fb      	strb	r3, [r7, #7]

	if (initResult != GOS_SUCCESS)
 80232ba:	79fb      	ldrb	r3, [r7, #7]
 80232bc:	2b55      	cmp	r3, #85	; 0x55
 80232be:	d001      	beq.n	80232c4 <APP_RandomInit+0x38>
	{
		initResult = GOS_ERROR;
 80232c0:	23ae      	movs	r3, #174	; 0xae
 80232c2:	71fb      	strb	r3, [r7, #7]
	}

	return initResult;
 80232c4:	79fb      	ldrb	r3, [r7, #7]
}
 80232c6:	4618      	mov	r0, r3
 80232c8:	3708      	adds	r7, #8
 80232ca:	46bd      	mov	sp, r7
 80232cc:	bd80      	pop	{r7, pc}
 80232ce:	bf00      	nop
 80232d0:	20000b2c 	.word	0x20000b2c
 80232d4:	20000b98 	.word	0x20000b98

080232d8 <APP_RandomTask1>:

GOS_STATIC void_t APP_RandomTask1 (void_t)
{
 80232d8:	b580      	push	{r7, lr}
 80232da:	af00      	add	r7, sp, #0

	/*
	 * Function code.
	 */
	// TODO: move to appropriate task.
	(void_t) svl_ipcConfigure(3, APP_IPC_Transmitter, APP_IPC_Receiver);
 80232dc:	4a04      	ldr	r2, [pc, #16]	; (80232f0 <APP_RandomTask1+0x18>)
 80232de:	4905      	ldr	r1, [pc, #20]	; (80232f4 <APP_RandomTask1+0x1c>)
 80232e0:	2003      	movs	r0, #3
 80232e2:	f016 fb87 	bl	80399f4 <svl_ipcConfigure>

	for (;;)
	{
		gos_taskSleep(100);
 80232e6:	2064      	movs	r0, #100	; 0x64
 80232e8:	f018 fbb2 	bl	803ba50 <gos_taskSleep>
 80232ec:	e7fb      	b.n	80232e6 <APP_RandomTask1+0xe>
 80232ee:	bf00      	nop
 80232f0:	0802333f 	.word	0x0802333f
 80232f4:	0802336d 	.word	0x0802336d

080232f8 <APP_RandomTask2>:
	}
}

GOS_STATIC void_t APP_RandomTask2 (void_t)
{
 80232f8:	b580      	push	{r7, lr}
 80232fa:	b082      	sub	sp, #8
 80232fc:	af00      	add	r7, sp, #0
	u16_t delay = 100;
 80232fe:	2364      	movs	r3, #100	; 0x64
 8023300:	80fb      	strh	r3, [r7, #6]
	u8_t  dir   = 0;
 8023302:	2300      	movs	r3, #0
 8023304:	717b      	strb	r3, [r7, #5]

	for (;;)
	{
		if (dir == 0)
 8023306:	797b      	ldrb	r3, [r7, #5]
 8023308:	2b00      	cmp	r3, #0
 802330a:	d10a      	bne.n	8023322 <APP_RandomTask2+0x2a>
		{
			if (delay < 355)
 802330c:	88fb      	ldrh	r3, [r7, #6]
 802330e:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
 8023312:	d803      	bhi.n	802331c <APP_RandomTask2+0x24>
				delay+=15;
 8023314:	88fb      	ldrh	r3, [r7, #6]
 8023316:	330f      	adds	r3, #15
 8023318:	80fb      	strh	r3, [r7, #6]
 802331a:	e00b      	b.n	8023334 <APP_RandomTask2+0x3c>
			else
				dir = 1;
 802331c:	2301      	movs	r3, #1
 802331e:	717b      	strb	r3, [r7, #5]
 8023320:	e008      	b.n	8023334 <APP_RandomTask2+0x3c>
		}
		else
		{
			if (delay > 100)
 8023322:	88fb      	ldrh	r3, [r7, #6]
 8023324:	2b64      	cmp	r3, #100	; 0x64
 8023326:	d903      	bls.n	8023330 <APP_RandomTask2+0x38>
				delay-=15;
 8023328:	88fb      	ldrh	r3, [r7, #6]
 802332a:	3b0f      	subs	r3, #15
 802332c:	80fb      	strh	r3, [r7, #6]
 802332e:	e001      	b.n	8023334 <APP_RandomTask2+0x3c>
			else
				dir = 0;
 8023330:	2300      	movs	r3, #0
 8023332:	717b      	strb	r3, [r7, #5]
		}

		gos_taskSleep(delay);
 8023334:	88fb      	ldrh	r3, [r7, #6]
 8023336:	4618      	mov	r0, r3
 8023338:	f018 fb8a 	bl	803ba50 <gos_taskSleep>
		if (dir == 0)
 802333c:	e7e3      	b.n	8023306 <APP_RandomTask2+0xe>

0802333e <APP_IPC_Receiver>:
	}
}

GOS_STATIC gos_result_t APP_IPC_Receiver    (u8_t* pTarget, u16_t targetSize)
{
 802333e:	b580      	push	{r7, lr}
 8023340:	b086      	sub	sp, #24
 8023342:	af02      	add	r7, sp, #8
 8023344:	6078      	str	r0, [r7, #4]
 8023346:	460b      	mov	r3, r1
 8023348:	807b      	strh	r3, [r7, #2]
	gos_result_t res = drv_uartReceiveDMA(DRV_UART_INSTANCE_4, pTarget, targetSize, 2000u, GOS_TRIGGER_ENDLESS_TMO);
 802334a:	887a      	ldrh	r2, [r7, #2]
 802334c:	f04f 33ff 	mov.w	r3, #4294967295
 8023350:	9300      	str	r3, [sp, #0]
 8023352:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8023356:	6879      	ldr	r1, [r7, #4]
 8023358:	2003      	movs	r0, #3
 802335a:	f015 faa9 	bl	80388b0 <drv_uartReceiveDMA>
 802335e:	4603      	mov	r3, r0
 8023360:	73fb      	strb	r3, [r7, #15]

	return res;
 8023362:	7bfb      	ldrb	r3, [r7, #15]
}
 8023364:	4618      	mov	r0, r3
 8023366:	3710      	adds	r7, #16
 8023368:	46bd      	mov	sp, r7
 802336a:	bd80      	pop	{r7, pc}

0802336c <APP_IPC_Transmitter>:

GOS_STATIC gos_result_t APP_IPC_Transmitter (u8_t* pMessage, u16_t messageSize)
{
 802336c:	b580      	push	{r7, lr}
 802336e:	b086      	sub	sp, #24
 8023370:	af02      	add	r7, sp, #8
 8023372:	6078      	str	r0, [r7, #4]
 8023374:	460b      	mov	r3, r1
 8023376:	807b      	strh	r3, [r7, #2]
	gos_result_t res = drv_uartTransmitIT(DRV_UART_INSTANCE_4, pMessage, messageSize, 2000u, 2000u);
 8023378:	887a      	ldrh	r2, [r7, #2]
 802337a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 802337e:	9300      	str	r3, [sp, #0]
 8023380:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8023384:	6879      	ldr	r1, [r7, #4]
 8023386:	2003      	movs	r0, #3
 8023388:	f015 fb02 	bl	8038990 <drv_uartTransmitIT>
 802338c:	4603      	mov	r3, r0
 802338e:	73fb      	strb	r3, [r7, #15]

	return res;
 8023390:	7bfb      	ldrb	r3, [r7, #15]
}
 8023392:	4618      	mov	r0, r3
 8023394:	3710      	adds	r7, #16
 8023396:	46bd      	mov	sp, r7
 8023398:	bd80      	pop	{r7, pc}
	...

0802339c <APP_SDInit>:
	/* Privilege level	*/	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGED_USER | GOS_PRIV_TASK_MANIPULATE | GOS_PRIV_SIGNALING,
	.taskCpuUsageLimit = 6000
};

gos_result_t APP_SDInit (void_t)
{
 802339c:	b580      	push	{r7, lr}
 802339e:	b082      	sub	sp, #8
 80233a0:	af00      	add	r7, sp, #0
	gos_result_t sdInitResult = GOS_SUCCESS;
 80233a2:	2355      	movs	r3, #85	; 0x55
 80233a4:	71fb      	strb	r3, [r7, #7]

	sdInitResult &= gos_taskRegister(&sdTaskDesc, &sdTaskId);
 80233a6:	4911      	ldr	r1, [pc, #68]	; (80233ec <APP_SDInit+0x50>)
 80233a8:	4811      	ldr	r0, [pc, #68]	; (80233f0 <APP_SDInit+0x54>)
 80233aa:	f018 f9bf 	bl	803b72c <gos_taskRegister>
 80233ae:	4603      	mov	r3, r0
 80233b0:	461a      	mov	r2, r3
 80233b2:	79fb      	ldrb	r3, [r7, #7]
 80233b4:	4013      	ands	r3, r2
 80233b6:	71fb      	strb	r3, [r7, #7]
	sdInitResult &= gos_signalCreate(&sdDataGetSignal);
 80233b8:	480e      	ldr	r0, [pc, #56]	; (80233f4 <APP_SDInit+0x58>)
 80233ba:	f01c f94b 	bl	803f654 <gos_signalCreate>
 80233be:	4603      	mov	r3, r0
 80233c0:	461a      	mov	r2, r3
 80233c2:	79fb      	ldrb	r3, [r7, #7]
 80233c4:	4013      	ands	r3, r2
 80233c6:	71fb      	strb	r3, [r7, #7]
	sdInitResult &= gos_signalCreate(&sdReadReadySignal);
 80233c8:	480b      	ldr	r0, [pc, #44]	; (80233f8 <APP_SDInit+0x5c>)
 80233ca:	f01c f943 	bl	803f654 <gos_signalCreate>
 80233ce:	4603      	mov	r3, r0
 80233d0:	461a      	mov	r2, r3
 80233d2:	79fb      	ldrb	r3, [r7, #7]
 80233d4:	4013      	ands	r3, r2
 80233d6:	71fb      	strb	r3, [r7, #7]

	if (sdInitResult != GOS_SUCCESS)
 80233d8:	79fb      	ldrb	r3, [r7, #7]
 80233da:	2b55      	cmp	r3, #85	; 0x55
 80233dc:	d001      	beq.n	80233e2 <APP_SDInit+0x46>
	{
		sdInitResult = GOS_ERROR;
 80233de:	23ae      	movs	r3, #174	; 0xae
 80233e0:	71fb      	strb	r3, [r7, #7]
	}

	return sdInitResult;
 80233e2:	79fb      	ldrb	r3, [r7, #7]
}
 80233e4:	4618      	mov	r0, r3
 80233e6:	3708      	adds	r7, #8
 80233e8:	46bd      	mov	sp, r7
 80233ea:	bd80      	pop	{r7, pc}
 80233ec:	20004214 	.word	0x20004214
 80233f0:	20000c60 	.word	0x20000c60
 80233f4:	20004284 	.word	0x20004284
 80233f8:	20004285 	.word	0x20004285

080233fc <APP_SD_GetData>:

app_sd_data_t APP_SD_GetData (void_t)
{
 80233fc:	b480      	push	{r7}
 80233fe:	b083      	sub	sp, #12
 8023400:	af00      	add	r7, sp, #0
 8023402:	6078      	str	r0, [r7, #4]
	return sdData;
 8023404:	687b      	ldr	r3, [r7, #4]
 8023406:	4a05      	ldr	r2, [pc, #20]	; (802341c <APP_SD_GetData+0x20>)
 8023408:	ca07      	ldmia	r2, {r0, r1, r2}
 802340a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 802340e:	6878      	ldr	r0, [r7, #4]
 8023410:	370c      	adds	r7, #12
 8023412:	46bd      	mov	sp, r7
 8023414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023418:	4770      	bx	lr
 802341a:	bf00      	nop
 802341c:	20004278 	.word	0x20004278

08023420 <APP_SD_DataSignalSubscribe>:

gos_result_t APP_SD_DataSignalSubscribe (gos_signalHandler_t signalHandler, gos_taskPrivilegeLevel_t privileges)
{
 8023420:	b580      	push	{r7, lr}
 8023422:	b082      	sub	sp, #8
 8023424:	af00      	add	r7, sp, #0
 8023426:	6078      	str	r0, [r7, #4]
 8023428:	460b      	mov	r3, r1
 802342a:	807b      	strh	r3, [r7, #2]
	return gos_signalSubscribe(sdDataGetSignal, signalHandler, privileges);
 802342c:	4b05      	ldr	r3, [pc, #20]	; (8023444 <APP_SD_DataSignalSubscribe+0x24>)
 802342e:	781b      	ldrb	r3, [r3, #0]
 8023430:	887a      	ldrh	r2, [r7, #2]
 8023432:	6879      	ldr	r1, [r7, #4]
 8023434:	4618      	mov	r0, r3
 8023436:	f01c f94b 	bl	803f6d0 <gos_signalSubscribe>
 802343a:	4603      	mov	r3, r0
}
 802343c:	4618      	mov	r0, r3
 802343e:	3708      	adds	r7, #8
 8023440:	46bd      	mov	sp, r7
 8023442:	bd80      	pop	{r7, pc}
 8023444:	20004284 	.word	0x20004284

08023448 <APP_SD_Task>:

/*
 * Function: APP_SD_Task
 */
GOS_STATIC void_t APP_SD_Task (void_t)
{
 8023448:	b580      	push	{r7, lr}
 802344a:	b086      	sub	sp, #24
 802344c:	af00      	add	r7, sp, #0
	u32_t total, free_space;

	/*
	 * Initialize file system
	 */
	gos_taskSleep(5000);
 802344e:	f241 3088 	movw	r0, #5000	; 0x1388
 8023452:	f018 fafd 	bl	803ba50 <gos_taskSleep>
	MX_FATFS_Init();
 8023456:	f00e f961 	bl	803171c <MX_FATFS_Init>

	/*
	 * Mount SD card
	 */
	fresult = f_mount(&fs, "", 0);
 802345a:	2200      	movs	r2, #0
 802345c:	4966      	ldr	r1, [pc, #408]	; (80235f8 <APP_SD_Task+0x1b0>)
 802345e:	4867      	ldr	r0, [pc, #412]	; (80235fc <APP_SD_Task+0x1b4>)
 8023460:	f010 fba6 	bl	8033bb0 <f_mount>
 8023464:	4603      	mov	r3, r0
 8023466:	75fb      	strb	r3, [r7, #23]

	if (fresult != FR_OK)
 8023468:	7dfb      	ldrb	r3, [r7, #23]
 802346a:	2b00      	cmp	r3, #0
 802346c:	d004      	beq.n	8023478 <APP_SD_Task+0x30>
	{
		gos_traceTrace(GOS_TRUE, "Error mounting SD card!\r\n");
 802346e:	4964      	ldr	r1, [pc, #400]	; (8023600 <APP_SD_Task+0x1b8>)
 8023470:	2036      	movs	r0, #54	; 0x36
 8023472:	f01d fa91 	bl	8040998 <gos_traceTrace>
 8023476:	e003      	b.n	8023480 <APP_SD_Task+0x38>
	}
	else
	{
		gos_traceTrace(GOS_TRUE, "SD card mounted successfully!\r\n");
 8023478:	4962      	ldr	r1, [pc, #392]	; (8023604 <APP_SD_Task+0x1bc>)
 802347a:	2036      	movs	r0, #54	; 0x36
 802347c:	f01d fa8c 	bl	8040998 <gos_traceTrace>
	}

	/*
	 * Card capacity details
	 */
	f_getfree("", &fre_clust, &pfs);
 8023480:	f107 0208 	add.w	r2, r7, #8
 8023484:	1d3b      	adds	r3, r7, #4
 8023486:	4619      	mov	r1, r3
 8023488:	485b      	ldr	r0, [pc, #364]	; (80235f8 <APP_SD_Task+0x1b0>)
 802348a:	f011 f93e 	bl	803470a <f_getfree>

	total = (u32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 802348e:	68bb      	ldr	r3, [r7, #8]
 8023490:	69db      	ldr	r3, [r3, #28]
 8023492:	3b02      	subs	r3, #2
 8023494:	68ba      	ldr	r2, [r7, #8]
 8023496:	8952      	ldrh	r2, [r2, #10]
 8023498:	fb02 f303 	mul.w	r3, r2, r3
 802349c:	4618      	mov	r0, r3
 802349e:	f7fd f861 	bl	8020564 <__aeabi_ui2d>
 80234a2:	f04f 0200 	mov.w	r2, #0
 80234a6:	4b58      	ldr	r3, [pc, #352]	; (8023608 <APP_SD_Task+0x1c0>)
 80234a8:	f7fd f8d6 	bl	8020658 <__aeabi_dmul>
 80234ac:	4602      	mov	r2, r0
 80234ae:	460b      	mov	r3, r1
 80234b0:	4610      	mov	r0, r2
 80234b2:	4619      	mov	r1, r3
 80234b4:	f7fd fba8 	bl	8020c08 <__aeabi_d2uiz>
 80234b8:	4603      	mov	r3, r0
 80234ba:	613b      	str	r3, [r7, #16]
	free_space = (u32_t)(fre_clust * pfs->csize * 0.5);
 80234bc:	68bb      	ldr	r3, [r7, #8]
 80234be:	895b      	ldrh	r3, [r3, #10]
 80234c0:	461a      	mov	r2, r3
 80234c2:	687b      	ldr	r3, [r7, #4]
 80234c4:	fb02 f303 	mul.w	r3, r2, r3
 80234c8:	4618      	mov	r0, r3
 80234ca:	f7fd f84b 	bl	8020564 <__aeabi_ui2d>
 80234ce:	f04f 0200 	mov.w	r2, #0
 80234d2:	4b4d      	ldr	r3, [pc, #308]	; (8023608 <APP_SD_Task+0x1c0>)
 80234d4:	f7fd f8c0 	bl	8020658 <__aeabi_dmul>
 80234d8:	4602      	mov	r2, r0
 80234da:	460b      	mov	r3, r1
 80234dc:	4610      	mov	r0, r2
 80234de:	4619      	mov	r1, r3
 80234e0:	f7fd fb92 	bl	8020c08 <__aeabi_d2uiz>
 80234e4:	4603      	mov	r3, r0
 80234e6:	60fb      	str	r3, [r7, #12]

	//gos_traceTraceFormatted("SD total:\t%lu kB\r\nSD free:\t%lu kB\r\nSD used:\t%lu kB\r\n", total, free_space, (total - free_space));
	gos_traceTraceFormatted(GOS_TRUE, "SD total:\t%lu kB\r\n", total);
 80234e8:	693a      	ldr	r2, [r7, #16]
 80234ea:	4948      	ldr	r1, [pc, #288]	; (802360c <APP_SD_Task+0x1c4>)
 80234ec:	2036      	movs	r0, #54	; 0x36
 80234ee:	f01d fb6f 	bl	8040bd0 <gos_traceTraceFormatted>
	gos_traceTraceFormatted(GOS_TRUE, "SD free:\t%lu kB\r\n", free_space);
 80234f2:	68fa      	ldr	r2, [r7, #12]
 80234f4:	4946      	ldr	r1, [pc, #280]	; (8023610 <APP_SD_Task+0x1c8>)
 80234f6:	2036      	movs	r0, #54	; 0x36
 80234f8:	f01d fb6a 	bl	8040bd0 <gos_traceTraceFormatted>
	gos_traceTraceFormatted(GOS_TRUE, "SD used:\t%lu kB\r\n", (total - free_space));
 80234fc:	693a      	ldr	r2, [r7, #16]
 80234fe:	68fb      	ldr	r3, [r7, #12]
 8023500:	1ad3      	subs	r3, r2, r3
 8023502:	461a      	mov	r2, r3
 8023504:	4943      	ldr	r1, [pc, #268]	; (8023614 <APP_SD_Task+0x1cc>)
 8023506:	2036      	movs	r0, #54	; 0x36
 8023508:	f01d fb62 	bl	8040bd0 <gos_traceTraceFormatted>

	sdData.total = total;
 802350c:	4a42      	ldr	r2, [pc, #264]	; (8023618 <APP_SD_Task+0x1d0>)
 802350e:	693b      	ldr	r3, [r7, #16]
 8023510:	6013      	str	r3, [r2, #0]
	sdData.free = free_space;
 8023512:	4a41      	ldr	r2, [pc, #260]	; (8023618 <APP_SD_Task+0x1d0>)
 8023514:	68fb      	ldr	r3, [r7, #12]
 8023516:	6053      	str	r3, [r2, #4]
	sdData.used = (total - free_space);
 8023518:	693a      	ldr	r2, [r7, #16]
 802351a:	68fb      	ldr	r3, [r7, #12]
 802351c:	1ad3      	subs	r3, r2, r3
 802351e:	4a3e      	ldr	r2, [pc, #248]	; (8023618 <APP_SD_Task+0x1d0>)
 8023520:	6093      	str	r3, [r2, #8]

	//memcpy((void_t*)sdDataMsg.messageBytes, (void_t*)&sdData, sizeof(sdData));
	//sdDataMsg.messageSize = sizeof(sdData);
	//gos_messageTx(&sdDataMsg);
	gos_signalInvoke(sdDataGetSignal, 0);
 8023522:	4b3e      	ldr	r3, [pc, #248]	; (802361c <APP_SD_Task+0x1d4>)
 8023524:	781b      	ldrb	r3, [r3, #0]
 8023526:	2100      	movs	r1, #0
 8023528:	4618      	mov	r0, r3
 802352a:	f01c f929 	bl	803f780 <gos_signalInvoke>
		/*
		 * Wait for a message to perform any SD-car related activity.
		 */
		//GOS_PRIVILEGED_ACCESS
		//gos_kernelTaskSuspend(sdTaskDesc.taskId);
		if (gos_messageRx(selector, &receivedMessage, GOS_MESSAGE_ENDLESS_TMO) == GOS_SUCCESS)
 802352e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023532:	493b      	ldr	r1, [pc, #236]	; (8023620 <APP_SD_Task+0x1d8>)
 8023534:	483b      	ldr	r0, [pc, #236]	; (8023624 <APP_SD_Task+0x1dc>)
 8023536:	f01a fc87 	bl	803de48 <gos_messageRx>
 802353a:	4603      	mov	r3, r0
 802353c:	2b55      	cmp	r3, #85	; 0x55
 802353e:	d1f6      	bne.n	802352e <APP_SD_Task+0xe6>
		{
			switch (receivedMessage.messageId)
 8023540:	4b37      	ldr	r3, [pc, #220]	; (8023620 <APP_SD_Task+0x1d8>)
 8023542:	881b      	ldrh	r3, [r3, #0]
 8023544:	f240 1217 	movw	r2, #279	; 0x117
 8023548:	4293      	cmp	r3, r2
 802354a:	d02f      	beq.n	80235ac <APP_SD_Task+0x164>
 802354c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8023550:	daed      	bge.n	802352e <APP_SD_Task+0xe6>
 8023552:	f240 1215 	movw	r2, #277	; 0x115
 8023556:	4293      	cmp	r3, r2
 8023558:	d003      	beq.n	8023562 <APP_SD_Task+0x11a>
 802355a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 802355e:	d00c      	beq.n	802357a <APP_SD_Task+0x132>
 8023560:	e049      	b.n	80235f6 <APP_SD_Task+0x1ae>
				/*
				 * File creation request.
				 */
				case MSG_CREATE_FILE:
				{
					if (file_driver_create_file((char_t*)receivedMessage.messageBytes) != GOS_SUCCESS)
 8023562:	4831      	ldr	r0, [pc, #196]	; (8023628 <APP_SD_Task+0x1e0>)
 8023564:	f001 fd50 	bl	8025008 <file_driver_create_file>
 8023568:	4603      	mov	r3, r0
 802356a:	2b55      	cmp	r3, #85	; 0x55
 802356c:	d03e      	beq.n	80235ec <APP_SD_Task+0x1a4>
					{
						gos_traceTraceFormatted(GOS_TRUE, "Error creating file: %s!\r\n", (char_t*)receivedMessage.messageBytes);
 802356e:	4a2e      	ldr	r2, [pc, #184]	; (8023628 <APP_SD_Task+0x1e0>)
 8023570:	492e      	ldr	r1, [pc, #184]	; (802362c <APP_SD_Task+0x1e4>)
 8023572:	2036      	movs	r0, #54	; 0x36
 8023574:	f01d fb2c 	bl	8040bd0 <gos_traceTraceFormatted>
					}
					break;
 8023578:	e038      	b.n	80235ec <APP_SD_Task+0x1a4>
				/*
				 * File writing request.
				 */
				case MSG_WRITE_FILE:
				{
					memcpy((void_t*)&readWriteFileRequest, (void_t*)receivedMessage.messageBytes, sizeof(readWriteFileRequest));
 802357a:	220c      	movs	r2, #12
 802357c:	492a      	ldr	r1, [pc, #168]	; (8023628 <APP_SD_Task+0x1e0>)
 802357e:	482c      	ldr	r0, [pc, #176]	; (8023630 <APP_SD_Task+0x1e8>)
 8023580:	f01f fbdb 	bl	8042d3a <memcpy>
					if (file_driver_write_file(readWriteFileRequest.fileName, readWriteFileRequest.pData, readWriteFileRequest.dataSize) != GOS_SUCCESS)
 8023584:	4b2a      	ldr	r3, [pc, #168]	; (8023630 <APP_SD_Task+0x1e8>)
 8023586:	681b      	ldr	r3, [r3, #0]
 8023588:	4a29      	ldr	r2, [pc, #164]	; (8023630 <APP_SD_Task+0x1e8>)
 802358a:	6851      	ldr	r1, [r2, #4]
 802358c:	4a28      	ldr	r2, [pc, #160]	; (8023630 <APP_SD_Task+0x1e8>)
 802358e:	8912      	ldrh	r2, [r2, #8]
 8023590:	4618      	mov	r0, r3
 8023592:	f001 fd72 	bl	802507a <file_driver_write_file>
 8023596:	4603      	mov	r3, r0
 8023598:	2b55      	cmp	r3, #85	; 0x55
 802359a:	d029      	beq.n	80235f0 <APP_SD_Task+0x1a8>
					{
						gos_traceTraceFormatted(GOS_TRUE, "Error writing file: %s!\r\n", readWriteFileRequest.fileName);
 802359c:	4b24      	ldr	r3, [pc, #144]	; (8023630 <APP_SD_Task+0x1e8>)
 802359e:	681b      	ldr	r3, [r3, #0]
 80235a0:	461a      	mov	r2, r3
 80235a2:	4924      	ldr	r1, [pc, #144]	; (8023634 <APP_SD_Task+0x1ec>)
 80235a4:	2036      	movs	r0, #54	; 0x36
 80235a6:	f01d fb13 	bl	8040bd0 <gos_traceTraceFormatted>
					}
					break;
 80235aa:	e021      	b.n	80235f0 <APP_SD_Task+0x1a8>
				/*
				 * File reading request.
				 */
				case MSG_READ_FILE:
				{
					memcpy((void_t*)&readWriteFileRequest, (void_t*)receivedMessage.messageBytes, sizeof(readWriteFileRequest));
 80235ac:	220c      	movs	r2, #12
 80235ae:	491e      	ldr	r1, [pc, #120]	; (8023628 <APP_SD_Task+0x1e0>)
 80235b0:	481f      	ldr	r0, [pc, #124]	; (8023630 <APP_SD_Task+0x1e8>)
 80235b2:	f01f fbc2 	bl	8042d3a <memcpy>
					if (file_driver_read_file(readWriteFileRequest.fileName, readWriteFileRequest.pData) == GOS_SUCCESS)
 80235b6:	4b1e      	ldr	r3, [pc, #120]	; (8023630 <APP_SD_Task+0x1e8>)
 80235b8:	681b      	ldr	r3, [r3, #0]
 80235ba:	4a1d      	ldr	r2, [pc, #116]	; (8023630 <APP_SD_Task+0x1e8>)
 80235bc:	6852      	ldr	r2, [r2, #4]
 80235be:	4611      	mov	r1, r2
 80235c0:	4618      	mov	r0, r3
 80235c2:	f001 fdb5 	bl	8025130 <file_driver_read_file>
 80235c6:	4603      	mov	r3, r0
 80235c8:	2b55      	cmp	r3, #85	; 0x55
 80235ca:	d107      	bne.n	80235dc <APP_SD_Task+0x194>
					{
						if (readWriteFileRequest.responseRequired == GOS_TRUE)
 80235cc:	4b18      	ldr	r3, [pc, #96]	; (8023630 <APP_SD_Task+0x1e8>)
 80235ce:	7a9b      	ldrb	r3, [r3, #10]
 80235d0:	2b36      	cmp	r3, #54	; 0x36
 80235d2:	d10f      	bne.n	80235f4 <APP_SD_Task+0x1ac>
						{
							gos_messageTx(&readReadyMessage);
 80235d4:	4818      	ldr	r0, [pc, #96]	; (8023638 <APP_SD_Task+0x1f0>)
 80235d6:	f01a fd37 	bl	803e048 <gos_messageTx>
					}
					else
					{
						gos_traceTraceFormatted(GOS_TRUE, "Error reading file: %s\r\n", readWriteFileRequest.fileName);
					}
					break;
 80235da:	e00b      	b.n	80235f4 <APP_SD_Task+0x1ac>
						gos_traceTraceFormatted(GOS_TRUE, "Error reading file: %s\r\n", readWriteFileRequest.fileName);
 80235dc:	4b14      	ldr	r3, [pc, #80]	; (8023630 <APP_SD_Task+0x1e8>)
 80235de:	681b      	ldr	r3, [r3, #0]
 80235e0:	461a      	mov	r2, r3
 80235e2:	4916      	ldr	r1, [pc, #88]	; (802363c <APP_SD_Task+0x1f4>)
 80235e4:	2036      	movs	r0, #54	; 0x36
 80235e6:	f01d faf3 	bl	8040bd0 <gos_traceTraceFormatted>
					break;
 80235ea:	e003      	b.n	80235f4 <APP_SD_Task+0x1ac>
					break;
 80235ec:	bf00      	nop
 80235ee:	e79e      	b.n	802352e <APP_SD_Task+0xe6>
					break;
 80235f0:	bf00      	nop
 80235f2:	e79c      	b.n	802352e <APP_SD_Task+0xe6>
					break;
 80235f4:	bf00      	nop
		if (gos_messageRx(selector, &receivedMessage, GOS_MESSAGE_ENDLESS_TMO) == GOS_SUCCESS)
 80235f6:	e79a      	b.n	802352e <APP_SD_Task+0xe6>
 80235f8:	08046df0 	.word	0x08046df0
 80235fc:	20004288 	.word	0x20004288
 8023600:	08046df4 	.word	0x08046df4
 8023604:	08046e10 	.word	0x08046e10
 8023608:	3fe00000 	.word	0x3fe00000
 802360c:	08046e30 	.word	0x08046e30
 8023610:	08046e44 	.word	0x08046e44
 8023614:	08046e58 	.word	0x08046e58
 8023618:	20004278 	.word	0x20004278
 802361c:	20004284 	.word	0x20004284
 8023620:	20004218 	.word	0x20004218
 8023624:	20000c58 	.word	0x20000c58
 8023628:	2000421b 	.word	0x2000421b
 802362c:	08046e6c 	.word	0x08046e6c
 8023630:	2000426c 	.word	0x2000426c
 8023634:	08046e88 	.word	0x08046e88
 8023638:	20000c04 	.word	0x20000c04
 802363c:	08046ea4 	.word	0x08046ea4

08023640 <APP_ShellInit>:
		.commandHandlerPrivileges = GOS_TASK_PRIVILEGED_USER
	}
};

gos_result_t APP_ShellInit (void_t)
{
 8023640:	b580      	push	{r7, lr}
 8023642:	b082      	sub	sp, #8
 8023644:	af00      	add	r7, sp, #0
	gos_result_t shellInitResult = GOS_SUCCESS;
 8023646:	2355      	movs	r3, #85	; 0x55
 8023648:	71fb      	strb	r3, [r7, #7]

	shellInitResult &= gos_shellRegisterCommands(commands, sizeof(commands));
 802364a:	21c4      	movs	r1, #196	; 0xc4
 802364c:	4808      	ldr	r0, [pc, #32]	; (8023670 <APP_ShellInit+0x30>)
 802364e:	f01b fb77 	bl	803ed40 <gos_shellRegisterCommands>
 8023652:	4603      	mov	r3, r0
 8023654:	461a      	mov	r2, r3
 8023656:	79fb      	ldrb	r3, [r7, #7]
 8023658:	4013      	ands	r3, r2
 802365a:	71fb      	strb	r3, [r7, #7]

	if (shellInitResult != GOS_SUCCESS)
 802365c:	79fb      	ldrb	r3, [r7, #7]
 802365e:	2b55      	cmp	r3, #85	; 0x55
 8023660:	d001      	beq.n	8023666 <APP_ShellInit+0x26>
	{
		shellInitResult = GOS_ERROR;
 8023662:	23ae      	movs	r3, #174	; 0xae
 8023664:	71fb      	strb	r3, [r7, #7]
	}

	return shellInitResult;
 8023666:	79fb      	ldrb	r3, [r7, #7]
}
 8023668:	4618      	mov	r0, r3
 802366a:	3708      	adds	r7, #8
 802366c:	46bd      	mov	sp, r7
 802366e:	bd80      	pop	{r7, pc}
 8023670:	20000ccc 	.word	0x20000ccc

08023674 <APP_ShellLedHandler>:

/*
 * Function: APP_ShellLedHandler
 */
GOS_STATIC void_t APP_ShellLedHandler (char_t* param)
{
 8023674:	b580      	push	{r7, lr}
 8023676:	b082      	sub	sp, #8
 8023678:	af00      	add	r7, sp, #0
 802367a:	6078      	str	r0, [r7, #4]
	/*
	 * Function code.
	 */
	if (strcmp(param, "on") == 0)
 802367c:	4914      	ldr	r1, [pc, #80]	; (80236d0 <APP_ShellLedHandler+0x5c>)
 802367e:	6878      	ldr	r0, [r7, #4]
 8023680:	f7fc fdc6 	bl	8020210 <strcmp>
 8023684:	4603      	mov	r3, r0
 8023686:	2b00      	cmp	r3, #0
 8023688:	d104      	bne.n	8023694 <APP_ShellLedHandler+0x20>
	{
		drv_gpioWritePin(IO_USER_LED, GPIO_STATE_HIGH);
 802368a:	2101      	movs	r1, #1
 802368c:	2000      	movs	r0, #0
 802368e:	f012 fed3 	bl	8036438 <drv_gpioWritePin>
	}
	else
	{
		gos_shellDriverTransmitString("Unrecognized parameter for _led_ command!\r\n");
	}
}
 8023692:	e019      	b.n	80236c8 <APP_ShellLedHandler+0x54>
	else if (strcmp(param, "off") == 0)
 8023694:	490f      	ldr	r1, [pc, #60]	; (80236d4 <APP_ShellLedHandler+0x60>)
 8023696:	6878      	ldr	r0, [r7, #4]
 8023698:	f7fc fdba 	bl	8020210 <strcmp>
 802369c:	4603      	mov	r3, r0
 802369e:	2b00      	cmp	r3, #0
 80236a0:	d104      	bne.n	80236ac <APP_ShellLedHandler+0x38>
		drv_gpioWritePin(IO_USER_LED, GPIO_STATE_LOW);
 80236a2:	2100      	movs	r1, #0
 80236a4:	2000      	movs	r0, #0
 80236a6:	f012 fec7 	bl	8036438 <drv_gpioWritePin>
}
 80236aa:	e00d      	b.n	80236c8 <APP_ShellLedHandler+0x54>
	else if (strcmp(param, "toggle") == 0)
 80236ac:	490a      	ldr	r1, [pc, #40]	; (80236d8 <APP_ShellLedHandler+0x64>)
 80236ae:	6878      	ldr	r0, [r7, #4]
 80236b0:	f7fc fdae 	bl	8020210 <strcmp>
 80236b4:	4603      	mov	r3, r0
 80236b6:	2b00      	cmp	r3, #0
 80236b8:	d103      	bne.n	80236c2 <APP_ShellLedHandler+0x4e>
		drv_gpioTgglePin(IO_USER_LED);
 80236ba:	2000      	movs	r0, #0
 80236bc:	f012 fef4 	bl	80364a8 <drv_gpioTgglePin>
}
 80236c0:	e002      	b.n	80236c8 <APP_ShellLedHandler+0x54>
		gos_shellDriverTransmitString("Unrecognized parameter for _led_ command!\r\n");
 80236c2:	4806      	ldr	r0, [pc, #24]	; (80236dc <APP_ShellLedHandler+0x68>)
 80236c4:	f016 fde6 	bl	803a294 <gos_shellDriverTransmitString>
}
 80236c8:	bf00      	nop
 80236ca:	3708      	adds	r7, #8
 80236cc:	46bd      	mov	sp, r7
 80236ce:	bd80      	pop	{r7, pc}
 80236d0:	08046ec0 	.word	0x08046ec0
 80236d4:	08046ec4 	.word	0x08046ec4
 80236d8:	08046ec8 	.word	0x08046ec8
 80236dc:	08046ed0 	.word	0x08046ed0

080236e0 <APP_ShellEchoHandler>:

/*
 * Function: APP_ShellEchoHandler
 */
GOS_STATIC void_t APP_ShellEchoHandler (char_t* param)
{
 80236e0:	b580      	push	{r7, lr}
 80236e2:	b082      	sub	sp, #8
 80236e4:	af00      	add	r7, sp, #0
 80236e6:	6078      	str	r0, [r7, #4]
	/*
	 * Function code.
	 */
	if (strcmp(param, "on") == 0)
 80236e8:	4910      	ldr	r1, [pc, #64]	; (802372c <APP_ShellEchoHandler+0x4c>)
 80236ea:	6878      	ldr	r0, [r7, #4]
 80236ec:	f7fc fd90 	bl	8020210 <strcmp>
 80236f0:	4603      	mov	r3, r0
 80236f2:	2b00      	cmp	r3, #0
 80236f4:	d105      	bne.n	8023702 <APP_ShellEchoHandler+0x22>
	{
		gos_shellEchoOn();
 80236f6:	f01b fbd7 	bl	803eea8 <gos_shellEchoOn>
		gos_shellDriverTransmitString("Echo is on!\r\n");
 80236fa:	480d      	ldr	r0, [pc, #52]	; (8023730 <APP_ShellEchoHandler+0x50>)
 80236fc:	f016 fdca 	bl	803a294 <gos_shellDriverTransmitString>
	}
	else
	{
		gos_shellDriverTransmitString("Unrecognized parameter for _echo_ command!\r\n");
	}
}
 8023700:	e00f      	b.n	8023722 <APP_ShellEchoHandler+0x42>
	else if (strcmp(param, "off") == 0)
 8023702:	490c      	ldr	r1, [pc, #48]	; (8023734 <APP_ShellEchoHandler+0x54>)
 8023704:	6878      	ldr	r0, [r7, #4]
 8023706:	f7fc fd83 	bl	8020210 <strcmp>
 802370a:	4603      	mov	r3, r0
 802370c:	2b00      	cmp	r3, #0
 802370e:	d105      	bne.n	802371c <APP_ShellEchoHandler+0x3c>
		gos_shellEchoOff();
 8023710:	f01b fbdc 	bl	803eecc <gos_shellEchoOff>
		gos_shellDriverTransmitString("Echo is off!\r\n");
 8023714:	4808      	ldr	r0, [pc, #32]	; (8023738 <APP_ShellEchoHandler+0x58>)
 8023716:	f016 fdbd 	bl	803a294 <gos_shellDriverTransmitString>
}
 802371a:	e002      	b.n	8023722 <APP_ShellEchoHandler+0x42>
		gos_shellDriverTransmitString("Unrecognized parameter for _echo_ command!\r\n");
 802371c:	4807      	ldr	r0, [pc, #28]	; (802373c <APP_ShellEchoHandler+0x5c>)
 802371e:	f016 fdb9 	bl	803a294 <gos_shellDriverTransmitString>
}
 8023722:	bf00      	nop
 8023724:	3708      	adds	r7, #8
 8023726:	46bd      	mov	sp, r7
 8023728:	bd80      	pop	{r7, pc}
 802372a:	bf00      	nop
 802372c:	08046ec0 	.word	0x08046ec0
 8023730:	08046efc 	.word	0x08046efc
 8023734:	08046ec4 	.word	0x08046ec4
 8023738:	08046f0c 	.word	0x08046f0c
 802373c:	08046f1c 	.word	0x08046f1c

08023740 <APP_ShellControlHandler>:

/*
 * Function: APP_ShellControlHandler
 */
GOS_STATIC void_t APP_ShellControlHandler (char_t* param)
{
 8023740:	b580      	push	{r7, lr}
 8023742:	b082      	sub	sp, #8
 8023744:	af00      	add	r7, sp, #0
 8023746:	6078      	str	r0, [r7, #4]
	/*
	 * Function code.
	 */
	if (strcmp(param, "continue") == 0)
 8023748:	491d      	ldr	r1, [pc, #116]	; (80237c0 <APP_ShellControlHandler+0x80>)
 802374a:	6878      	ldr	r0, [r7, #4]
 802374c:	f7fc fd60 	bl	8020210 <strcmp>
 8023750:	4603      	mov	r3, r0
 8023752:	2b00      	cmp	r3, #0
 8023754:	d106      	bne.n	8023764 <APP_ShellControlHandler+0x24>
	{
		gos_signalInvoke(buttonPressedSignal, 1);
 8023756:	4b1b      	ldr	r3, [pc, #108]	; (80237c4 <APP_ShellControlHandler+0x84>)
 8023758:	781b      	ldrb	r3, [r3, #0]
 802375a:	2101      	movs	r1, #1
 802375c:	4618      	mov	r0, r3
 802375e:	f01c f80f 	bl	803f780 <gos_signalInvoke>
	else
	{
		gos_traceTrace(GOS_TRUE, "Unrecognized parameter for _control_ command!\r\n");
		gos_shellDriverTransmitString("Unrecognized parameter for _control_ command!\r\n");
	}
}
 8023762:	e028      	b.n	80237b6 <APP_ShellControlHandler+0x76>
	else if (strcmp(param, "reset") == 0)
 8023764:	4918      	ldr	r1, [pc, #96]	; (80237c8 <APP_ShellControlHandler+0x88>)
 8023766:	6878      	ldr	r0, [r7, #4]
 8023768:	f7fc fd52 	bl	8020210 <strcmp>
 802376c:	4603      	mov	r3, r0
 802376e:	2b00      	cmp	r3, #0
 8023770:	d102      	bne.n	8023778 <APP_ShellControlHandler+0x38>
		gos_kernelReset();
 8023772:	f016 ff9d 	bl	803a6b0 <gos_kernelReset>
}
 8023776:	e01e      	b.n	80237b6 <APP_ShellControlHandler+0x76>
	else if (strcmp(param, "pause") == 0)
 8023778:	4914      	ldr	r1, [pc, #80]	; (80237cc <APP_ShellControlHandler+0x8c>)
 802377a:	6878      	ldr	r0, [r7, #4]
 802377c:	f7fc fd48 	bl	8020210 <strcmp>
 8023780:	4603      	mov	r3, r0
 8023782:	2b00      	cmp	r3, #0
 8023784:	d106      	bne.n	8023794 <APP_ShellControlHandler+0x54>
		gos_signalInvoke(buttonPressedSignal, 0);
 8023786:	4b0f      	ldr	r3, [pc, #60]	; (80237c4 <APP_ShellControlHandler+0x84>)
 8023788:	781b      	ldrb	r3, [r3, #0]
 802378a:	2100      	movs	r1, #0
 802378c:	4618      	mov	r0, r3
 802378e:	f01b fff7 	bl	803f780 <gos_signalInvoke>
}
 8023792:	e010      	b.n	80237b6 <APP_ShellControlHandler+0x76>
	else if (strcmp(param, "dump") == 0)
 8023794:	490e      	ldr	r1, [pc, #56]	; (80237d0 <APP_ShellControlHandler+0x90>)
 8023796:	6878      	ldr	r0, [r7, #4]
 8023798:	f7fc fd3a 	bl	8020210 <strcmp>
 802379c:	4603      	mov	r3, r0
 802379e:	2b00      	cmp	r3, #0
 80237a0:	d102      	bne.n	80237a8 <APP_ShellControlHandler+0x68>
		gos_Dump();
 80237a2:	f019 fdf7 	bl	803d394 <gos_Dump>
}
 80237a6:	e006      	b.n	80237b6 <APP_ShellControlHandler+0x76>
		gos_traceTrace(GOS_TRUE, "Unrecognized parameter for _control_ command!\r\n");
 80237a8:	490a      	ldr	r1, [pc, #40]	; (80237d4 <APP_ShellControlHandler+0x94>)
 80237aa:	2036      	movs	r0, #54	; 0x36
 80237ac:	f01d f8f4 	bl	8040998 <gos_traceTrace>
		gos_shellDriverTransmitString("Unrecognized parameter for _control_ command!\r\n");
 80237b0:	4808      	ldr	r0, [pc, #32]	; (80237d4 <APP_ShellControlHandler+0x94>)
 80237b2:	f016 fd6f 	bl	803a294 <gos_shellDriverTransmitString>
}
 80237b6:	bf00      	nop
 80237b8:	3708      	adds	r7, #8
 80237ba:	46bd      	mov	sp, r7
 80237bc:	bd80      	pop	{r7, pc}
 80237be:	bf00      	nop
 80237c0:	08046f4c 	.word	0x08046f4c
 80237c4:	200036e8 	.word	0x200036e8
 80237c8:	08046f58 	.word	0x08046f58
 80237cc:	08046f60 	.word	0x08046f60
 80237d0:	08046f68 	.word	0x08046f68
 80237d4:	08046f70 	.word	0x08046f70

080237d8 <APP_ShellTimeSetHandler>:

/*
 * Function: APP_ShellTimeSetHandler
 */
GOS_STATIC void_t APP_ShellTimeSetHandler (char_t* params)
{
 80237d8:	b5b0      	push	{r4, r5, r7, lr}
 80237da:	b08a      	sub	sp, #40	; 0x28
 80237dc:	af04      	add	r7, sp, #16
 80237de:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t index  = 0u;
 80237e0:	2300      	movs	r3, #0
 80237e2:	75fb      	strb	r3, [r7, #23]
	u8_t dow;

	/*
	 * Function code.
	 */
	rtc_driver_get_time(&time, &dow);
 80237e4:	f107 020b 	add.w	r2, r7, #11
 80237e8:	f107 030c 	add.w	r3, r7, #12
 80237ec:	4611      	mov	r1, r2
 80237ee:	4618      	mov	r0, r3
 80237f0:	f003 f859 	bl	80268a6 <rtc_driver_get_time>

	while (params[index] != ' ' && params[index])
 80237f4:	e002      	b.n	80237fc <APP_ShellTimeSetHandler+0x24>
	{
		index++;
 80237f6:	7dfb      	ldrb	r3, [r7, #23]
 80237f8:	3301      	adds	r3, #1
 80237fa:	75fb      	strb	r3, [r7, #23]
	while (params[index] != ' ' && params[index])
 80237fc:	7dfb      	ldrb	r3, [r7, #23]
 80237fe:	687a      	ldr	r2, [r7, #4]
 8023800:	4413      	add	r3, r2
 8023802:	781b      	ldrb	r3, [r3, #0]
 8023804:	2b20      	cmp	r3, #32
 8023806:	d005      	beq.n	8023814 <APP_ShellTimeSetHandler+0x3c>
 8023808:	7dfb      	ldrb	r3, [r7, #23]
 802380a:	687a      	ldr	r2, [r7, #4]
 802380c:	4413      	add	r3, r2
 802380e:	781b      	ldrb	r3, [r3, #0]
 8023810:	2b00      	cmp	r3, #0
 8023812:	d1f0      	bne.n	80237f6 <APP_ShellTimeSetHandler+0x1e>
	}

	params[index] = '\0';
 8023814:	7dfb      	ldrb	r3, [r7, #23]
 8023816:	687a      	ldr	r2, [r7, #4]
 8023818:	4413      	add	r3, r2
 802381a:	2200      	movs	r2, #0
 802381c:	701a      	strb	r2, [r3, #0]

	if (strcmp(params, "year") == 0)
 802381e:	494f      	ldr	r1, [pc, #316]	; (802395c <APP_ShellTimeSetHandler+0x184>)
 8023820:	6878      	ldr	r0, [r7, #4]
 8023822:	f7fc fcf5 	bl	8020210 <strcmp>
 8023826:	4603      	mov	r3, r0
 8023828:	2b00      	cmp	r3, #0
 802382a:	d10c      	bne.n	8023846 <APP_ShellTimeSetHandler+0x6e>
	{
		time.years = (u16_t)atoi(&params[++index]);
 802382c:	7dfb      	ldrb	r3, [r7, #23]
 802382e:	3301      	adds	r3, #1
 8023830:	75fb      	strb	r3, [r7, #23]
 8023832:	7dfb      	ldrb	r3, [r7, #23]
 8023834:	687a      	ldr	r2, [r7, #4]
 8023836:	4413      	add	r3, r2
 8023838:	4618      	mov	r0, r3
 802383a:	f01d fd90 	bl	804135e <atoi>
 802383e:	4603      	mov	r3, r0
 8023840:	b29b      	uxth	r3, r3
 8023842:	82bb      	strh	r3, [r7, #20]
 8023844:	e063      	b.n	802390e <APP_ShellTimeSetHandler+0x136>
	}
	else if (strcmp(params, "month") == 0)
 8023846:	4946      	ldr	r1, [pc, #280]	; (8023960 <APP_ShellTimeSetHandler+0x188>)
 8023848:	6878      	ldr	r0, [r7, #4]
 802384a:	f7fc fce1 	bl	8020210 <strcmp>
 802384e:	4603      	mov	r3, r0
 8023850:	2b00      	cmp	r3, #0
 8023852:	d10c      	bne.n	802386e <APP_ShellTimeSetHandler+0x96>
	{
		time.months = (u16_t)atoi(&params[++index]);
 8023854:	7dfb      	ldrb	r3, [r7, #23]
 8023856:	3301      	adds	r3, #1
 8023858:	75fb      	strb	r3, [r7, #23]
 802385a:	7dfb      	ldrb	r3, [r7, #23]
 802385c:	687a      	ldr	r2, [r7, #4]
 802385e:	4413      	add	r3, r2
 8023860:	4618      	mov	r0, r3
 8023862:	f01d fd7c 	bl	804135e <atoi>
 8023866:	4603      	mov	r3, r0
 8023868:	b2db      	uxtb	r3, r3
 802386a:	74fb      	strb	r3, [r7, #19]
 802386c:	e04f      	b.n	802390e <APP_ShellTimeSetHandler+0x136>
	}
	else if (strcmp(params, "day") == 0)
 802386e:	493d      	ldr	r1, [pc, #244]	; (8023964 <APP_ShellTimeSetHandler+0x18c>)
 8023870:	6878      	ldr	r0, [r7, #4]
 8023872:	f7fc fccd 	bl	8020210 <strcmp>
 8023876:	4603      	mov	r3, r0
 8023878:	2b00      	cmp	r3, #0
 802387a:	d10d      	bne.n	8023898 <APP_ShellTimeSetHandler+0xc0>
	{
		time.days = (u16_t)atoi(&params[++index]);
 802387c:	7dfb      	ldrb	r3, [r7, #23]
 802387e:	3301      	adds	r3, #1
 8023880:	75fb      	strb	r3, [r7, #23]
 8023882:	7dfb      	ldrb	r3, [r7, #23]
 8023884:	687a      	ldr	r2, [r7, #4]
 8023886:	4413      	add	r3, r2
 8023888:	4618      	mov	r0, r3
 802388a:	f01d fd68 	bl	804135e <atoi>
 802388e:	4603      	mov	r3, r0
 8023890:	b29b      	uxth	r3, r3
 8023892:	f8a7 3011 	strh.w	r3, [r7, #17]
 8023896:	e03a      	b.n	802390e <APP_ShellTimeSetHandler+0x136>
	}
	else if (strcmp(params, "hour") == 0)
 8023898:	4933      	ldr	r1, [pc, #204]	; (8023968 <APP_ShellTimeSetHandler+0x190>)
 802389a:	6878      	ldr	r0, [r7, #4]
 802389c:	f7fc fcb8 	bl	8020210 <strcmp>
 80238a0:	4603      	mov	r3, r0
 80238a2:	2b00      	cmp	r3, #0
 80238a4:	d10c      	bne.n	80238c0 <APP_ShellTimeSetHandler+0xe8>
	{
		time.hours = (u16_t)atoi(&params[++index]);
 80238a6:	7dfb      	ldrb	r3, [r7, #23]
 80238a8:	3301      	adds	r3, #1
 80238aa:	75fb      	strb	r3, [r7, #23]
 80238ac:	7dfb      	ldrb	r3, [r7, #23]
 80238ae:	687a      	ldr	r2, [r7, #4]
 80238b0:	4413      	add	r3, r2
 80238b2:	4618      	mov	r0, r3
 80238b4:	f01d fd53 	bl	804135e <atoi>
 80238b8:	4603      	mov	r3, r0
 80238ba:	b2db      	uxtb	r3, r3
 80238bc:	743b      	strb	r3, [r7, #16]
 80238be:	e026      	b.n	802390e <APP_ShellTimeSetHandler+0x136>
	}
	else if (strcmp(params, "minute") == 0)
 80238c0:	492a      	ldr	r1, [pc, #168]	; (802396c <APP_ShellTimeSetHandler+0x194>)
 80238c2:	6878      	ldr	r0, [r7, #4]
 80238c4:	f7fc fca4 	bl	8020210 <strcmp>
 80238c8:	4603      	mov	r3, r0
 80238ca:	2b00      	cmp	r3, #0
 80238cc:	d10c      	bne.n	80238e8 <APP_ShellTimeSetHandler+0x110>
	{
		time.minutes = (u16_t)atoi(&params[++index]);
 80238ce:	7dfb      	ldrb	r3, [r7, #23]
 80238d0:	3301      	adds	r3, #1
 80238d2:	75fb      	strb	r3, [r7, #23]
 80238d4:	7dfb      	ldrb	r3, [r7, #23]
 80238d6:	687a      	ldr	r2, [r7, #4]
 80238d8:	4413      	add	r3, r2
 80238da:	4618      	mov	r0, r3
 80238dc:	f01d fd3f 	bl	804135e <atoi>
 80238e0:	4603      	mov	r3, r0
 80238e2:	b2db      	uxtb	r3, r3
 80238e4:	73fb      	strb	r3, [r7, #15]
 80238e6:	e012      	b.n	802390e <APP_ShellTimeSetHandler+0x136>
	}
	else if (strcmp(params, "second") == 0)
 80238e8:	4921      	ldr	r1, [pc, #132]	; (8023970 <APP_ShellTimeSetHandler+0x198>)
 80238ea:	6878      	ldr	r0, [r7, #4]
 80238ec:	f7fc fc90 	bl	8020210 <strcmp>
 80238f0:	4603      	mov	r3, r0
 80238f2:	2b00      	cmp	r3, #0
 80238f4:	d10b      	bne.n	802390e <APP_ShellTimeSetHandler+0x136>
	{
		time.seconds = (u16_t)atoi(&params[++index]);
 80238f6:	7dfb      	ldrb	r3, [r7, #23]
 80238f8:	3301      	adds	r3, #1
 80238fa:	75fb      	strb	r3, [r7, #23]
 80238fc:	7dfb      	ldrb	r3, [r7, #23]
 80238fe:	687a      	ldr	r2, [r7, #4]
 8023900:	4413      	add	r3, r2
 8023902:	4618      	mov	r0, r3
 8023904:	f01d fd2b 	bl	804135e <atoi>
 8023908:	4603      	mov	r3, r0
 802390a:	b2db      	uxtb	r3, r3
 802390c:	73bb      	strb	r3, [r7, #14]
	}

	rtc_driver_set_time(&time, dow);
 802390e:	7afa      	ldrb	r2, [r7, #11]
 8023910:	f107 030c 	add.w	r3, r7, #12
 8023914:	4611      	mov	r1, r2
 8023916:	4618      	mov	r0, r3
 8023918:	f002 ff70 	bl	80267fc <rtc_driver_set_time>

	rtc_driver_get_time(&time, &dow);
 802391c:	f107 020b 	add.w	r2, r7, #11
 8023920:	f107 030c 	add.w	r3, r7, #12
 8023924:	4611      	mov	r1, r2
 8023926:	4618      	mov	r0, r3
 8023928:	f002 ffbd 	bl	80268a6 <rtc_driver_get_time>

	gos_shellDriverTransmitString(
			"RTC time: %04d-%02d-%02d %02d:%02d:%02d\r\n",
			time.years,
 802392c:	8abb      	ldrh	r3, [r7, #20]
	gos_shellDriverTransmitString(
 802392e:	4618      	mov	r0, r3
			time.months,
 8023930:	7cfb      	ldrb	r3, [r7, #19]
	gos_shellDriverTransmitString(
 8023932:	461c      	mov	r4, r3
			time.days,
 8023934:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8023938:	b29b      	uxth	r3, r3
	gos_shellDriverTransmitString(
 802393a:	461d      	mov	r5, r3
			time.hours,
 802393c:	7c3b      	ldrb	r3, [r7, #16]
			time.minutes,
 802393e:	7bfa      	ldrb	r2, [r7, #15]
			time.seconds
 8023940:	7bb9      	ldrb	r1, [r7, #14]
	gos_shellDriverTransmitString(
 8023942:	9102      	str	r1, [sp, #8]
 8023944:	9201      	str	r2, [sp, #4]
 8023946:	9300      	str	r3, [sp, #0]
 8023948:	462b      	mov	r3, r5
 802394a:	4622      	mov	r2, r4
 802394c:	4601      	mov	r1, r0
 802394e:	4809      	ldr	r0, [pc, #36]	; (8023974 <APP_ShellTimeSetHandler+0x19c>)
 8023950:	f016 fca0 	bl	803a294 <gos_shellDriverTransmitString>
			);
}
 8023954:	bf00      	nop
 8023956:	3718      	adds	r7, #24
 8023958:	46bd      	mov	sp, r7
 802395a:	bdb0      	pop	{r4, r5, r7, pc}
 802395c:	08046fa0 	.word	0x08046fa0
 8023960:	08046fa8 	.word	0x08046fa8
 8023964:	08046fb0 	.word	0x08046fb0
 8023968:	08046fb4 	.word	0x08046fb4
 802396c:	08046fbc 	.word	0x08046fbc
 8023970:	08046fc4 	.word	0x08046fc4
 8023974:	08046fcc 	.word	0x08046fcc

08023978 <APP_ShellDacSetHandler>:

/*
 * Function: APP_ShellDacSetHandler
 */
GOS_STATIC void_t APP_ShellDacSetHandler (char_t* params)
{
 8023978:	b580      	push	{r7, lr}
 802397a:	b082      	sub	sp, #8
 802397c:	af00      	add	r7, sp, #0
 802397e:	6078      	str	r0, [r7, #4]
	//dac_driver_set_freq((u32_t)atoi(params) * 100);
	(void_t) APP_DAC_ChangeFrequency((u32_t)atoi(params) * 100);
 8023980:	6878      	ldr	r0, [r7, #4]
 8023982:	f01d fcec 	bl	804135e <atoi>
 8023986:	4603      	mov	r3, r0
 8023988:	461a      	mov	r2, r3
 802398a:	2364      	movs	r3, #100	; 0x64
 802398c:	fb02 f303 	mul.w	r3, r2, r3
 8023990:	4618      	mov	r0, r3
 8023992:	f7fd fd53 	bl	802143c <APP_DAC_ChangeFrequency>
}
 8023996:	bf00      	nop
 8023998:	3708      	adds	r7, #8
 802399a:	46bd      	mov	sp, r7
 802399c:	bd80      	pop	{r7, pc}
	...

080239a0 <APP_ShellMaxCpuLoadSetHandler>:

/*
 * Function: APP_ShellMaxCpuLoadSetHandler
 */
GOS_STATIC void_t APP_ShellMaxCpuLoadSetHandler (char_t* params)
{
 80239a0:	b580      	push	{r7, lr}
 80239a2:	b082      	sub	sp, #8
 80239a4:	af00      	add	r7, sp, #0
 80239a6:	6078      	str	r0, [r7, #4]
	gos_kernelSetMaxCpuLoad((u16_t)(atof(params)*100));
 80239a8:	6878      	ldr	r0, [r7, #4]
 80239aa:	f01d fcd5 	bl	8041358 <atof>
 80239ae:	ec51 0b10 	vmov	r0, r1, d0
 80239b2:	f04f 0200 	mov.w	r2, #0
 80239b6:	4b09      	ldr	r3, [pc, #36]	; (80239dc <APP_ShellMaxCpuLoadSetHandler+0x3c>)
 80239b8:	f7fc fe4e 	bl	8020658 <__aeabi_dmul>
 80239bc:	4602      	mov	r2, r0
 80239be:	460b      	mov	r3, r1
 80239c0:	4610      	mov	r0, r2
 80239c2:	4619      	mov	r1, r3
 80239c4:	f7fd f920 	bl	8020c08 <__aeabi_d2uiz>
 80239c8:	4603      	mov	r3, r0
 80239ca:	b29b      	uxth	r3, r3
 80239cc:	4618      	mov	r0, r3
 80239ce:	f017 fb6f 	bl	803b0b0 <gos_kernelSetMaxCpuLoad>
}
 80239d2:	bf00      	nop
 80239d4:	3708      	adds	r7, #8
 80239d6:	46bd      	mov	sp, r7
 80239d8:	bd80      	pop	{r7, pc}
 80239da:	bf00      	nop
 80239dc:	40590000 	.word	0x40590000

080239e0 <APP_ShellPrintSysData>:

/*
 * Function: APP_ShellPrintSysData
 */
GOS_STATIC void_t APP_ShellPrintSysData (char_t* params)
{
 80239e0:	b580      	push	{r7, lr}
 80239e2:	b0aa      	sub	sp, #168	; 0xa8
 80239e4:	af00      	add	r7, sp, #0
 80239e6:	6078      	str	r0, [r7, #4]
	gos_libVersion_t libVer;

	(void_t) gos_libGetVersion(&libVer);
 80239e8:	f107 0308 	add.w	r3, r7, #8
 80239ec:	4618      	mov	r0, r3
 80239ee:	f011 f863 	bl	8034ab8 <gos_libGetVersion>

	gos_shellDriverTransmitString(TRACE_BG_BLUE_START"Library information"TRACE_FORMAT_RESET"\r\n");
 80239f2:	481b      	ldr	r0, [pc, #108]	; (8023a60 <APP_ShellPrintSysData+0x80>)
 80239f4:	f016 fc4e 	bl	803a294 <gos_shellDriverTransmitString>
	gos_shellDriverTransmitString("Library name:        \t%s\r\n", libVer.name);
 80239f8:	f107 0308 	add.w	r3, r7, #8
 80239fc:	3310      	adds	r3, #16
 80239fe:	4619      	mov	r1, r3
 8023a00:	4818      	ldr	r0, [pc, #96]	; (8023a64 <APP_ShellPrintSysData+0x84>)
 8023a02:	f016 fc47 	bl	803a294 <gos_shellDriverTransmitString>
	gos_shellDriverTransmitString("Library description: \t%s\r\n", libVer.description);
 8023a06:	f107 0308 	add.w	r3, r7, #8
 8023a0a:	3340      	adds	r3, #64	; 0x40
 8023a0c:	4619      	mov	r1, r3
 8023a0e:	4816      	ldr	r0, [pc, #88]	; (8023a68 <APP_ShellPrintSysData+0x88>)
 8023a10:	f016 fc40 	bl	803a294 <gos_shellDriverTransmitString>
	gos_shellDriverTransmitString("Library version:     \t%02u.%02u.%02u\r\n", libVer.major, libVer.minor, libVer.build);
 8023a14:	893b      	ldrh	r3, [r7, #8]
 8023a16:	4619      	mov	r1, r3
 8023a18:	897b      	ldrh	r3, [r7, #10]
 8023a1a:	461a      	mov	r2, r3
 8023a1c:	89bb      	ldrh	r3, [r7, #12]
 8023a1e:	4813      	ldr	r0, [pc, #76]	; (8023a6c <APP_ShellPrintSysData+0x8c>)
 8023a20:	f016 fc38 	bl	803a294 <gos_shellDriverTransmitString>
	gos_shellDriverTransmitString("Library date:        \t%4u-%02u-%02u\r\n", libVer.date.years, libVer.date.months, libVer.date.days);
 8023a24:	8afb      	ldrh	r3, [r7, #22]
 8023a26:	4619      	mov	r1, r3
 8023a28:	7d7b      	ldrb	r3, [r7, #21]
 8023a2a:	461a      	mov	r2, r3
 8023a2c:	f8b7 3013 	ldrh.w	r3, [r7, #19]
 8023a30:	b29b      	uxth	r3, r3
 8023a32:	480f      	ldr	r0, [pc, #60]	; (8023a70 <APP_ShellPrintSysData+0x90>)
 8023a34:	f016 fc2e 	bl	803a294 <gos_shellDriverTransmitString>
	gos_shellDriverTransmitString("Library author:      \t%s\r\n", libVer.author);
 8023a38:	f107 0308 	add.w	r3, r7, #8
 8023a3c:	3380      	adds	r3, #128	; 0x80
 8023a3e:	4619      	mov	r1, r3
 8023a40:	480c      	ldr	r0, [pc, #48]	; (8023a74 <APP_ShellPrintSysData+0x94>)
 8023a42:	f016 fc27 	bl	803a294 <gos_shellDriverTransmitString>

	gos_shellDriverTransmitString("\r\n"TRACE_BG_BLUE_START"OS information"TRACE_FORMAT_RESET"\r\n");
 8023a46:	480c      	ldr	r0, [pc, #48]	; (8023a78 <APP_ShellPrintSysData+0x98>)
 8023a48:	f016 fc24 	bl	803a294 <gos_shellDriverTransmitString>
	gos_shellDriverTransmitString("OS version:         \t%02u.%02u\r\n", GOS_VERSION_MAJOR, GOS_VERSION_MINOR);
 8023a4c:	220b      	movs	r2, #11
 8023a4e:	2100      	movs	r1, #0
 8023a50:	480a      	ldr	r0, [pc, #40]	; (8023a7c <APP_ShellPrintSysData+0x9c>)
 8023a52:	f016 fc1f 	bl	803a294 <gos_shellDriverTransmitString>

}
 8023a56:	bf00      	nop
 8023a58:	37a8      	adds	r7, #168	; 0xa8
 8023a5a:	46bd      	mov	sp, r7
 8023a5c:	bd80      	pop	{r7, pc}
 8023a5e:	bf00      	nop
 8023a60:	08046ff8 	.word	0x08046ff8
 8023a64:	08047018 	.word	0x08047018
 8023a68:	08047034 	.word	0x08047034
 8023a6c:	08047050 	.word	0x08047050
 8023a70:	08047078 	.word	0x08047078
 8023a74:	080470a0 	.word	0x080470a0
 8023a78:	080470bc 	.word	0x080470bc
 8023a7c:	080470d8 	.word	0x080470d8

08023a80 <APP_SingleShotInit>:
	.readFunction  = hwiRead,
	.writeFunction = hwiWrite
};

gos_result_t APP_SingleShotInit (void_t)
{
 8023a80:	b580      	push	{r7, lr}
 8023a82:	b082      	sub	sp, #8
 8023a84:	af00      	add	r7, sp, #0
	gos_result_t singleShotInitResult = GOS_SUCCESS;
 8023a86:	2355      	movs	r3, #85	; 0x55
 8023a88:	71fb      	strb	r3, [r7, #7]

	singleShotInitResult &= gos_taskRegister(&singleShotTaskDesc, NULL);
 8023a8a:	2100      	movs	r1, #0
 8023a8c:	4810      	ldr	r0, [pc, #64]	; (8023ad0 <APP_SingleShotInit+0x50>)
 8023a8e:	f017 fe4d 	bl	803b72c <gos_taskRegister>
 8023a92:	4603      	mov	r3, r0
 8023a94:	461a      	mov	r2, r3
 8023a96:	79fb      	ldrb	r3, [r7, #7]
 8023a98:	4013      	ands	r3, r2
 8023a9a:	71fb      	strb	r3, [r7, #7]
	singleShotInitResult &= drv_24lc256Init((void_t*)&eeprom);
 8023a9c:	480d      	ldr	r0, [pc, #52]	; (8023ad4 <APP_SingleShotInit+0x54>)
 8023a9e:	f011 f869 	bl	8034b74 <drv_24lc256Init>
 8023aa2:	4603      	mov	r3, r0
 8023aa4:	461a      	mov	r2, r3
 8023aa6:	79fb      	ldrb	r3, [r7, #7]
 8023aa8:	4013      	ands	r3, r2
 8023aaa:	71fb      	strb	r3, [r7, #7]
	singleShotInitResult &= svl_hwiInit(&hwiInit);
 8023aac:	480a      	ldr	r0, [pc, #40]	; (8023ad8 <APP_SingleShotInit+0x58>)
 8023aae:	f015 ff4d 	bl	803994c <svl_hwiInit>
 8023ab2:	4603      	mov	r3, r0
 8023ab4:	461a      	mov	r2, r3
 8023ab6:	79fb      	ldrb	r3, [r7, #7]
 8023ab8:	4013      	ands	r3, r2
 8023aba:	71fb      	strb	r3, [r7, #7]

	if (singleShotInitResult != GOS_SUCCESS)
 8023abc:	79fb      	ldrb	r3, [r7, #7]
 8023abe:	2b55      	cmp	r3, #85	; 0x55
 8023ac0:	d001      	beq.n	8023ac6 <APP_SingleShotInit+0x46>
	{
		singleShotInitResult = GOS_ERROR;
 8023ac2:	23ae      	movs	r3, #174	; 0xae
 8023ac4:	71fb      	strb	r3, [r7, #7]
	}

	return singleShotInitResult;
 8023ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8023ac8:	4618      	mov	r0, r3
 8023aca:	3708      	adds	r7, #8
 8023acc:	46bd      	mov	sp, r7
 8023ace:	bd80      	pop	{r7, pc}
 8023ad0:	20000dac 	.word	0x20000dac
 8023ad4:	20000d90 	.word	0x20000d90
 8023ad8:	20000e18 	.word	0x20000e18

08023adc <APP_SingleShotTask>:

/*
 * Function: APP_SingleShotTask
 */
GOS_STATIC void_t APP_SingleShotTask (void_t)
{
 8023adc:	b580      	push	{r7, lr}
 8023ade:	af00      	add	r7, sp, #0
	(void_t) drv_24lc256Read((void_t*)&eeprom2, 0, (u8_t*)&testCfg, sizeof(testCfg));*/

	/*
	 * Check if it is a first startup (EEPROM empty).
	 */
	if (appConfig.firstStartup != GOS_FALSE  ||
 8023ae0:	4b16      	ldr	r3, [pc, #88]	; (8023b3c <APP_SingleShotTask+0x60>)
 8023ae2:	781b      	ldrb	r3, [r3, #0]
 8023ae4:	2b49      	cmp	r3, #73	; 0x49
 8023ae6:	d109      	bne.n	8023afc <APP_SingleShotTask+0x20>
		drv_crcCheckCrc32((u8_t*)&appConfig, sizeof(appConfig) - sizeof(appConfig.configCrc), appConfig.configCrc, NULL) == DRV_CRC_CHECK_ERROR)
 8023ae8:	4b14      	ldr	r3, [pc, #80]	; (8023b3c <APP_SingleShotTask+0x60>)
 8023aea:	691a      	ldr	r2, [r3, #16]
 8023aec:	2300      	movs	r3, #0
 8023aee:	2110      	movs	r1, #16
 8023af0:	4812      	ldr	r0, [pc, #72]	; (8023b3c <APP_SingleShotTask+0x60>)
 8023af2:	f011 fd5d 	bl	80355b0 <drv_crcCheckCrc32>
 8023af6:	4603      	mov	r3, r0
	if (appConfig.firstStartup != GOS_FALSE  ||
 8023af8:	2b9c      	cmp	r3, #156	; 0x9c
 8023afa:	d117      	bne.n	8023b2c <APP_SingleShotTask+0x50>
	{
		/*
		 * Save default configuration.
		 */
		appConfig.firstStartup = GOS_FALSE;
 8023afc:	4b0f      	ldr	r3, [pc, #60]	; (8023b3c <APP_SingleShotTask+0x60>)
 8023afe:	2249      	movs	r2, #73	; 0x49
 8023b00:	701a      	strb	r2, [r3, #0]
		appConfig.projectVersionMajor = 2;
 8023b02:	4b0e      	ldr	r3, [pc, #56]	; (8023b3c <APP_SingleShotTask+0x60>)
 8023b04:	2202      	movs	r2, #2
 8023b06:	705a      	strb	r2, [r3, #1]
		appConfig.projectVersionMinor = 0;
 8023b08:	4b0c      	ldr	r3, [pc, #48]	; (8023b3c <APP_SingleShotTask+0x60>)
 8023b0a:	2200      	movs	r2, #0
 8023b0c:	709a      	strb	r2, [r3, #2]
		rtc_driver_get_time(&appConfig.projectDate, NULL);
 8023b0e:	2100      	movs	r1, #0
 8023b10:	480b      	ldr	r0, [pc, #44]	; (8023b40 <APP_SingleShotTask+0x64>)
 8023b12:	f002 fec8 	bl	80268a6 <rtc_driver_get_time>
		drv_crcGetCrc32((u8_t*)&appConfig, sizeof(appConfig) - sizeof(appConfig.configCrc), &appConfig.configCrc);
 8023b16:	4a0b      	ldr	r2, [pc, #44]	; (8023b44 <APP_SingleShotTask+0x68>)
 8023b18:	2110      	movs	r1, #16
 8023b1a:	4808      	ldr	r0, [pc, #32]	; (8023b3c <APP_SingleShotTask+0x60>)
 8023b1c:	f011 fcfc 	bl	8035518 <drv_crcGetCrc32>
		(void_t) drv_24lc256Write((void_t*)&eeprom, 0, (u8_t*)&appConfig, sizeof(appConfig));
 8023b20:	2314      	movs	r3, #20
 8023b22:	4a06      	ldr	r2, [pc, #24]	; (8023b3c <APP_SingleShotTask+0x60>)
 8023b24:	2100      	movs	r1, #0
 8023b26:	4808      	ldr	r0, [pc, #32]	; (8023b48 <APP_SingleShotTask+0x6c>)
 8023b28:	f011 f92d 	bl	8034d86 <drv_24lc256Write>
				);*/
	}
	/*
	 * Delete single shot task.
	 */
	gos_taskDelete(singleShotTaskDesc.taskId);
 8023b2c:	4b07      	ldr	r3, [pc, #28]	; (8023b4c <APP_SingleShotTask+0x70>)
 8023b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8023b30:	4618      	mov	r0, r3
 8023b32:	f018 fca5 	bl	803c480 <gos_taskDelete>
}
 8023b36:	bf00      	nop
 8023b38:	bd80      	pop	{r7, pc}
 8023b3a:	bf00      	nop
 8023b3c:	200052c0 	.word	0x200052c0
 8023b40:	200052c3 	.word	0x200052c3
 8023b44:	200052d0 	.word	0x200052d0
 8023b48:	20000d90 	.word	0x20000d90
 8023b4c:	20000dac 	.word	0x20000dac

08023b50 <hwiRead>:

GOS_STATIC gos_result_t hwiRead (u32_t addr, u8_t* pData, u16_t dataSize)
{
 8023b50:	b580      	push	{r7, lr}
 8023b52:	b084      	sub	sp, #16
 8023b54:	af00      	add	r7, sp, #0
 8023b56:	60f8      	str	r0, [r7, #12]
 8023b58:	60b9      	str	r1, [r7, #8]
 8023b5a:	4613      	mov	r3, r2
 8023b5c:	80fb      	strh	r3, [r7, #6]
	return drv_24lc256Read((void_t*)&eeprom, sizeof(appConfig) + (u16_t)addr, pData, dataSize);
 8023b5e:	68fb      	ldr	r3, [r7, #12]
 8023b60:	b29b      	uxth	r3, r3
 8023b62:	3314      	adds	r3, #20
 8023b64:	b299      	uxth	r1, r3
 8023b66:	88fb      	ldrh	r3, [r7, #6]
 8023b68:	68ba      	ldr	r2, [r7, #8]
 8023b6a:	4804      	ldr	r0, [pc, #16]	; (8023b7c <hwiRead+0x2c>)
 8023b6c:	f011 f830 	bl	8034bd0 <drv_24lc256Read>
 8023b70:	4603      	mov	r3, r0
}
 8023b72:	4618      	mov	r0, r3
 8023b74:	3710      	adds	r7, #16
 8023b76:	46bd      	mov	sp, r7
 8023b78:	bd80      	pop	{r7, pc}
 8023b7a:	bf00      	nop
 8023b7c:	20000d90 	.word	0x20000d90

08023b80 <hwiWrite>:

GOS_STATIC gos_result_t hwiWrite (u32_t addr, u8_t* pData, u16_t dataSize)
{
 8023b80:	b580      	push	{r7, lr}
 8023b82:	b084      	sub	sp, #16
 8023b84:	af00      	add	r7, sp, #0
 8023b86:	60f8      	str	r0, [r7, #12]
 8023b88:	60b9      	str	r1, [r7, #8]
 8023b8a:	4613      	mov	r3, r2
 8023b8c:	80fb      	strh	r3, [r7, #6]
	return drv_24lc256Write((void_t*)&eeprom, sizeof(appConfig) + (u16_t)addr, pData, dataSize);
 8023b8e:	68fb      	ldr	r3, [r7, #12]
 8023b90:	b29b      	uxth	r3, r3
 8023b92:	3314      	adds	r3, #20
 8023b94:	b299      	uxth	r1, r3
 8023b96:	88fb      	ldrh	r3, [r7, #6]
 8023b98:	68ba      	ldr	r2, [r7, #8]
 8023b9a:	4804      	ldr	r0, [pc, #16]	; (8023bac <hwiWrite+0x2c>)
 8023b9c:	f011 f8f3 	bl	8034d86 <drv_24lc256Write>
 8023ba0:	4603      	mov	r3, r0
}
 8023ba2:	4618      	mov	r0, r3
 8023ba4:	3710      	adds	r7, #16
 8023ba6:	46bd      	mov	sp, r7
 8023ba8:	bd80      	pop	{r7, pc}
 8023baa:	bf00      	nop
 8023bac:	20000d90 	.word	0x20000d90

08023bb0 <APP_TFTInit>:
	.taskPriority 	    = 80,
	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGE_USER
};

gos_result_t APP_TFTInit (void_t)
{
 8023bb0:	b580      	push	{r7, lr}
 8023bb2:	b082      	sub	sp, #8
 8023bb4:	af00      	add	r7, sp, #0
	gos_result_t tftInitResult = GOS_SUCCESS;
 8023bb6:	2355      	movs	r3, #85	; 0x55
 8023bb8:	71fb      	strb	r3, [r7, #7]

	tftInitResult &= gos_taskRegister(&tftTaskDesc, NULL);
 8023bba:	2100      	movs	r1, #0
 8023bbc:	4808      	ldr	r0, [pc, #32]	; (8023be0 <APP_TFTInit+0x30>)
 8023bbe:	f017 fdb5 	bl	803b72c <gos_taskRegister>
 8023bc2:	4603      	mov	r3, r0
 8023bc4:	461a      	mov	r2, r3
 8023bc6:	79fb      	ldrb	r3, [r7, #7]
 8023bc8:	4013      	ands	r3, r2
 8023bca:	71fb      	strb	r3, [r7, #7]

	if (tftInitResult != GOS_SUCCESS)
 8023bcc:	79fb      	ldrb	r3, [r7, #7]
 8023bce:	2b55      	cmp	r3, #85	; 0x55
 8023bd0:	d001      	beq.n	8023bd6 <APP_TFTInit+0x26>
	{
		tftInitResult = GOS_ERROR;
 8023bd2:	23ae      	movs	r3, #174	; 0xae
 8023bd4:	71fb      	strb	r3, [r7, #7]
	}

	return tftInitResult;
 8023bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8023bd8:	4618      	mov	r0, r3
 8023bda:	3708      	adds	r7, #8
 8023bdc:	46bd      	mov	sp, r7
 8023bde:	bd80      	pop	{r7, pc}
 8023be0:	2000124c 	.word	0x2000124c

08023be4 <APP_TFT_Task>:


GOS_STATIC void_t APP_TFT_Task (void_t)
{
 8023be4:	b5b0      	push	{r4, r5, r7, lr}
 8023be6:	b08e      	sub	sp, #56	; 0x38
 8023be8:	af04      	add	r7, sp, #16
	app_sd_data_t sdData;
	u32_t lastTempTick = 0;
 8023bea:	2300      	movs	r3, #0
 8023bec:	627b      	str	r3, [r7, #36]	; 0x24
	u32_t lastAdcTick = 0;
 8023bee:	2300      	movs	r3, #0
 8023bf0:	623b      	str	r3, [r7, #32]
	u32_t lastTimeTick = 0;
 8023bf2:	2300      	movs	r3, #0
 8023bf4:	61fb      	str	r3, [r7, #28]
	u32_t lastCpuTick  = 0;
 8023bf6:	2300      	movs	r3, #0
 8023bf8:	61bb      	str	r3, [r7, #24]

	ili9341_init(
 8023bfa:	2201      	movs	r2, #1
 8023bfc:	2101      	movs	r1, #1
 8023bfe:	2001      	movs	r0, #1
 8023c00:	f001 faec 	bl	80251dc <ili9341_init>
			isoLandscape,
		    itsSupported,
		    itnNormalized
			);

	g_initGraphicsDriver();
 8023c04:	f003 fe3c 	bl	8027880 <g_initGraphicsDriver>

	label.backColor = ILI9341_WHITE;
 8023c08:	4b8f      	ldr	r3, [pc, #572]	; (8023e48 <APP_TFT_Task+0x264>)
 8023c0a:	881a      	ldrh	r2, [r3, #0]
 8023c0c:	4b8f      	ldr	r3, [pc, #572]	; (8023e4c <APP_TFT_Task+0x268>)
 8023c0e:	815a      	strh	r2, [r3, #10]
	label.foreColor = ILI9341_BLACK;
 8023c10:	4b8f      	ldr	r3, [pc, #572]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023c12:	881a      	ldrh	r2, [r3, #0]
 8023c14:	4b8d      	ldr	r3, [pc, #564]	; (8023e4c <APP_TFT_Task+0x268>)
 8023c16:	811a      	strh	r2, [r3, #8]

	okButton.backColor = ILI9341_WHITE;
 8023c18:	4b8b      	ldr	r3, [pc, #556]	; (8023e48 <APP_TFT_Task+0x264>)
 8023c1a:	881a      	ldrh	r2, [r3, #0]
 8023c1c:	4b8d      	ldr	r3, [pc, #564]	; (8023e54 <APP_TFT_Task+0x270>)
 8023c1e:	815a      	strh	r2, [r3, #10]
	okButton.foreColor = ILI9341_BLACK;
 8023c20:	4b8b      	ldr	r3, [pc, #556]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023c22:	881a      	ldrh	r2, [r3, #0]
 8023c24:	4b8b      	ldr	r3, [pc, #556]	; (8023e54 <APP_TFT_Task+0x270>)
 8023c26:	811a      	strh	r2, [r3, #8]

	resetButton.backColor = ILI9341_WHITE;
 8023c28:	4b87      	ldr	r3, [pc, #540]	; (8023e48 <APP_TFT_Task+0x264>)
 8023c2a:	881a      	ldrh	r2, [r3, #0]
 8023c2c:	4b8a      	ldr	r3, [pc, #552]	; (8023e58 <APP_TFT_Task+0x274>)
 8023c2e:	815a      	strh	r2, [r3, #10]
	resetButton.foreColor = ILI9341_BLACK;
 8023c30:	4b87      	ldr	r3, [pc, #540]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023c32:	881a      	ldrh	r2, [r3, #0]
 8023c34:	4b88      	ldr	r3, [pc, #544]	; (8023e58 <APP_TFT_Task+0x274>)
 8023c36:	811a      	strh	r2, [r3, #8]

	projVerLabel.backColor = ILI9341_OLIVE;
 8023c38:	4b88      	ldr	r3, [pc, #544]	; (8023e5c <APP_TFT_Task+0x278>)
 8023c3a:	881a      	ldrh	r2, [r3, #0]
 8023c3c:	4b88      	ldr	r3, [pc, #544]	; (8023e60 <APP_TFT_Task+0x27c>)
 8023c3e:	815a      	strh	r2, [r3, #10]
	projVerLabel.foreColor = ILI9341_BLACK;
 8023c40:	4b83      	ldr	r3, [pc, #524]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023c42:	881a      	ldrh	r2, [r3, #0]
 8023c44:	4b86      	ldr	r3, [pc, #536]	; (8023e60 <APP_TFT_Task+0x27c>)
 8023c46:	811a      	strh	r2, [r3, #8]
	projVerLabel.yTop = 20 + 10;
 8023c48:	4b85      	ldr	r3, [pc, #532]	; (8023e60 <APP_TFT_Task+0x27c>)
 8023c4a:	221e      	movs	r2, #30
 8023c4c:	805a      	strh	r2, [r3, #2]

	projDateLabel.backColor = ILI9341_OLIVE;
 8023c4e:	4b83      	ldr	r3, [pc, #524]	; (8023e5c <APP_TFT_Task+0x278>)
 8023c50:	881a      	ldrh	r2, [r3, #0]
 8023c52:	4b84      	ldr	r3, [pc, #528]	; (8023e64 <APP_TFT_Task+0x280>)
 8023c54:	815a      	strh	r2, [r3, #10]
	projDateLabel.foreColor = ILI9341_BLACK;
 8023c56:	4b7e      	ldr	r3, [pc, #504]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023c58:	881a      	ldrh	r2, [r3, #0]
 8023c5a:	4b82      	ldr	r3, [pc, #520]	; (8023e64 <APP_TFT_Task+0x280>)
 8023c5c:	811a      	strh	r2, [r3, #8]
	projDateLabel.yTop = projVerLabel.yTop + 15;
 8023c5e:	4b80      	ldr	r3, [pc, #512]	; (8023e60 <APP_TFT_Task+0x27c>)
 8023c60:	885b      	ldrh	r3, [r3, #2]
 8023c62:	330f      	adds	r3, #15
 8023c64:	b29a      	uxth	r2, r3
 8023c66:	4b7f      	ldr	r3, [pc, #508]	; (8023e64 <APP_TFT_Task+0x280>)
 8023c68:	805a      	strh	r2, [r3, #2]

	timeLabel.backColor = ILI9341_OLIVE;
 8023c6a:	4b7c      	ldr	r3, [pc, #496]	; (8023e5c <APP_TFT_Task+0x278>)
 8023c6c:	881a      	ldrh	r2, [r3, #0]
 8023c6e:	4b7e      	ldr	r3, [pc, #504]	; (8023e68 <APP_TFT_Task+0x284>)
 8023c70:	815a      	strh	r2, [r3, #10]
	timeLabel.foreColor = ILI9341_BLACK;
 8023c72:	4b77      	ldr	r3, [pc, #476]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023c74:	881a      	ldrh	r2, [r3, #0]
 8023c76:	4b7c      	ldr	r3, [pc, #496]	; (8023e68 <APP_TFT_Task+0x284>)
 8023c78:	811a      	strh	r2, [r3, #8]
	timeLabel.yTop = projDateLabel.yTop + 15;
 8023c7a:	4b7a      	ldr	r3, [pc, #488]	; (8023e64 <APP_TFT_Task+0x280>)
 8023c7c:	885b      	ldrh	r3, [r3, #2]
 8023c7e:	330f      	adds	r3, #15
 8023c80:	b29a      	uxth	r2, r3
 8023c82:	4b79      	ldr	r3, [pc, #484]	; (8023e68 <APP_TFT_Task+0x284>)
 8023c84:	805a      	strh	r2, [r3, #2]

	upTimeLabel.backColor = ILI9341_OLIVE;
 8023c86:	4b75      	ldr	r3, [pc, #468]	; (8023e5c <APP_TFT_Task+0x278>)
 8023c88:	881a      	ldrh	r2, [r3, #0]
 8023c8a:	4b78      	ldr	r3, [pc, #480]	; (8023e6c <APP_TFT_Task+0x288>)
 8023c8c:	815a      	strh	r2, [r3, #10]
	upTimeLabel.foreColor = ILI9341_BLACK;
 8023c8e:	4b70      	ldr	r3, [pc, #448]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023c90:	881a      	ldrh	r2, [r3, #0]
 8023c92:	4b76      	ldr	r3, [pc, #472]	; (8023e6c <APP_TFT_Task+0x288>)
 8023c94:	811a      	strh	r2, [r3, #8]
	upTimeLabel.yTop = timeLabel.yTop + 15;
 8023c96:	4b74      	ldr	r3, [pc, #464]	; (8023e68 <APP_TFT_Task+0x284>)
 8023c98:	885b      	ldrh	r3, [r3, #2]
 8023c9a:	330f      	adds	r3, #15
 8023c9c:	b29a      	uxth	r2, r3
 8023c9e:	4b73      	ldr	r3, [pc, #460]	; (8023e6c <APP_TFT_Task+0x288>)
 8023ca0:	805a      	strh	r2, [r3, #2]

	adcLabel.backColor = ILI9341_OLIVE;
 8023ca2:	4b6e      	ldr	r3, [pc, #440]	; (8023e5c <APP_TFT_Task+0x278>)
 8023ca4:	881a      	ldrh	r2, [r3, #0]
 8023ca6:	4b72      	ldr	r3, [pc, #456]	; (8023e70 <APP_TFT_Task+0x28c>)
 8023ca8:	815a      	strh	r2, [r3, #10]
	adcLabel.foreColor = ILI9341_BLACK;
 8023caa:	4b69      	ldr	r3, [pc, #420]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023cac:	881a      	ldrh	r2, [r3, #0]
 8023cae:	4b70      	ldr	r3, [pc, #448]	; (8023e70 <APP_TFT_Task+0x28c>)
 8023cb0:	811a      	strh	r2, [r3, #8]
	adcLabel.yTop = upTimeLabel.yTop + 15;
 8023cb2:	4b6e      	ldr	r3, [pc, #440]	; (8023e6c <APP_TFT_Task+0x288>)
 8023cb4:	885b      	ldrh	r3, [r3, #2]
 8023cb6:	330f      	adds	r3, #15
 8023cb8:	b29a      	uxth	r2, r3
 8023cba:	4b6d      	ldr	r3, [pc, #436]	; (8023e70 <APP_TFT_Task+0x28c>)
 8023cbc:	805a      	strh	r2, [r3, #2]

	tempLabel.backColor = ILI9341_OLIVE;
 8023cbe:	4b67      	ldr	r3, [pc, #412]	; (8023e5c <APP_TFT_Task+0x278>)
 8023cc0:	881a      	ldrh	r2, [r3, #0]
 8023cc2:	4b6c      	ldr	r3, [pc, #432]	; (8023e74 <APP_TFT_Task+0x290>)
 8023cc4:	815a      	strh	r2, [r3, #10]
	tempLabel.foreColor = ILI9341_BLACK;
 8023cc6:	4b62      	ldr	r3, [pc, #392]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023cc8:	881a      	ldrh	r2, [r3, #0]
 8023cca:	4b6a      	ldr	r3, [pc, #424]	; (8023e74 <APP_TFT_Task+0x290>)
 8023ccc:	811a      	strh	r2, [r3, #8]
	tempLabel.yTop = adcLabel.yTop + 15;
 8023cce:	4b68      	ldr	r3, [pc, #416]	; (8023e70 <APP_TFT_Task+0x28c>)
 8023cd0:	885b      	ldrh	r3, [r3, #2]
 8023cd2:	330f      	adds	r3, #15
 8023cd4:	b29a      	uxth	r2, r3
 8023cd6:	4b67      	ldr	r3, [pc, #412]	; (8023e74 <APP_TFT_Task+0x290>)
 8023cd8:	805a      	strh	r2, [r3, #2]

	cpuLabel.backColor = ILI9341_OLIVE;
 8023cda:	4b60      	ldr	r3, [pc, #384]	; (8023e5c <APP_TFT_Task+0x278>)
 8023cdc:	881a      	ldrh	r2, [r3, #0]
 8023cde:	4b66      	ldr	r3, [pc, #408]	; (8023e78 <APP_TFT_Task+0x294>)
 8023ce0:	815a      	strh	r2, [r3, #10]
	cpuLabel.foreColor = ILI9341_BLACK;
 8023ce2:	4b5b      	ldr	r3, [pc, #364]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023ce4:	881a      	ldrh	r2, [r3, #0]
 8023ce6:	4b64      	ldr	r3, [pc, #400]	; (8023e78 <APP_TFT_Task+0x294>)
 8023ce8:	811a      	strh	r2, [r3, #8]
	cpuLabel.yTop = tempLabel.yTop + 15;
 8023cea:	4b62      	ldr	r3, [pc, #392]	; (8023e74 <APP_TFT_Task+0x290>)
 8023cec:	885b      	ldrh	r3, [r3, #2]
 8023cee:	330f      	adds	r3, #15
 8023cf0:	b29a      	uxth	r2, r3
 8023cf2:	4b61      	ldr	r3, [pc, #388]	; (8023e78 <APP_TFT_Task+0x294>)
 8023cf4:	805a      	strh	r2, [r3, #2]

	sdUsedLabel.backColor = ILI9341_OLIVE;
 8023cf6:	4b59      	ldr	r3, [pc, #356]	; (8023e5c <APP_TFT_Task+0x278>)
 8023cf8:	881a      	ldrh	r2, [r3, #0]
 8023cfa:	4b60      	ldr	r3, [pc, #384]	; (8023e7c <APP_TFT_Task+0x298>)
 8023cfc:	815a      	strh	r2, [r3, #10]
	sdUsedLabel.foreColor = ILI9341_BLACK;
 8023cfe:	4b54      	ldr	r3, [pc, #336]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023d00:	881a      	ldrh	r2, [r3, #0]
 8023d02:	4b5e      	ldr	r3, [pc, #376]	; (8023e7c <APP_TFT_Task+0x298>)
 8023d04:	811a      	strh	r2, [r3, #8]
	sdUsedLabel.yTop = cpuLabel.yTop + 15;
 8023d06:	4b5c      	ldr	r3, [pc, #368]	; (8023e78 <APP_TFT_Task+0x294>)
 8023d08:	885b      	ldrh	r3, [r3, #2]
 8023d0a:	330f      	adds	r3, #15
 8023d0c:	b29a      	uxth	r2, r3
 8023d0e:	4b5b      	ldr	r3, [pc, #364]	; (8023e7c <APP_TFT_Task+0x298>)
 8023d10:	805a      	strh	r2, [r3, #2]

	sdFreeLabel.backColor = ILI9341_OLIVE;
 8023d12:	4b52      	ldr	r3, [pc, #328]	; (8023e5c <APP_TFT_Task+0x278>)
 8023d14:	881a      	ldrh	r2, [r3, #0]
 8023d16:	4b5a      	ldr	r3, [pc, #360]	; (8023e80 <APP_TFT_Task+0x29c>)
 8023d18:	815a      	strh	r2, [r3, #10]
	sdFreeLabel.foreColor = ILI9341_BLACK;
 8023d1a:	4b4d      	ldr	r3, [pc, #308]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023d1c:	881a      	ldrh	r2, [r3, #0]
 8023d1e:	4b58      	ldr	r3, [pc, #352]	; (8023e80 <APP_TFT_Task+0x29c>)
 8023d20:	811a      	strh	r2, [r3, #8]
	sdFreeLabel.yTop = sdUsedLabel.yTop + 15;
 8023d22:	4b56      	ldr	r3, [pc, #344]	; (8023e7c <APP_TFT_Task+0x298>)
 8023d24:	885b      	ldrh	r3, [r3, #2]
 8023d26:	330f      	adds	r3, #15
 8023d28:	b29a      	uxth	r2, r3
 8023d2a:	4b55      	ldr	r3, [pc, #340]	; (8023e80 <APP_TFT_Task+0x29c>)
 8023d2c:	805a      	strh	r2, [r3, #2]

	sdTotalLabel.backColor = ILI9341_OLIVE;
 8023d2e:	4b4b      	ldr	r3, [pc, #300]	; (8023e5c <APP_TFT_Task+0x278>)
 8023d30:	881a      	ldrh	r2, [r3, #0]
 8023d32:	4b54      	ldr	r3, [pc, #336]	; (8023e84 <APP_TFT_Task+0x2a0>)
 8023d34:	815a      	strh	r2, [r3, #10]
	sdTotalLabel.foreColor = ILI9341_BLACK;
 8023d36:	4b46      	ldr	r3, [pc, #280]	; (8023e50 <APP_TFT_Task+0x26c>)
 8023d38:	881a      	ldrh	r2, [r3, #0]
 8023d3a:	4b52      	ldr	r3, [pc, #328]	; (8023e84 <APP_TFT_Task+0x2a0>)
 8023d3c:	811a      	strh	r2, [r3, #8]
	sdTotalLabel.yTop = sdFreeLabel.yTop + 15;
 8023d3e:	4b50      	ldr	r3, [pc, #320]	; (8023e80 <APP_TFT_Task+0x29c>)
 8023d40:	885b      	ldrh	r3, [r3, #2]
 8023d42:	330f      	adds	r3, #15
 8023d44:	b29a      	uxth	r2, r3
 8023d46:	4b4f      	ldr	r3, [pc, #316]	; (8023e84 <APP_TFT_Task+0x2a0>)
 8023d48:	805a      	strh	r2, [r3, #2]

	popupWindow.backColor = ILI9341_WHITE;
 8023d4a:	4b3f      	ldr	r3, [pc, #252]	; (8023e48 <APP_TFT_Task+0x264>)
 8023d4c:	881a      	ldrh	r2, [r3, #0]
 8023d4e:	4b4e      	ldr	r3, [pc, #312]	; (8023e88 <APP_TFT_Task+0x2a4>)
 8023d50:	815a      	strh	r2, [r3, #10]
	statusWindow.backColor = ILI9341_OLIVE;
 8023d52:	4b42      	ldr	r3, [pc, #264]	; (8023e5c <APP_TFT_Task+0x278>)
 8023d54:	881a      	ldrh	r2, [r3, #0]
 8023d56:	4b4d      	ldr	r3, [pc, #308]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023d58:	815a      	strh	r2, [r3, #10]

	// Add buttons to popupWindow.
	g_windowAddButton(&popupWindow, &okButton);
 8023d5a:	493e      	ldr	r1, [pc, #248]	; (8023e54 <APP_TFT_Task+0x270>)
 8023d5c:	484a      	ldr	r0, [pc, #296]	; (8023e88 <APP_TFT_Task+0x2a4>)
 8023d5e:	f004 f9eb 	bl	8028138 <g_windowAddButton>
	g_windowAddButton(&popupWindow, &resetButton);
 8023d62:	493d      	ldr	r1, [pc, #244]	; (8023e58 <APP_TFT_Task+0x274>)
 8023d64:	4848      	ldr	r0, [pc, #288]	; (8023e88 <APP_TFT_Task+0x2a4>)
 8023d66:	f004 f9e7 	bl	8028138 <g_windowAddButton>

	// Add label to popupWindow.
	g_windowAddLabel(&popupWindow, &label);
 8023d6a:	4938      	ldr	r1, [pc, #224]	; (8023e4c <APP_TFT_Task+0x268>)
 8023d6c:	4846      	ldr	r0, [pc, #280]	; (8023e88 <APP_TFT_Task+0x2a4>)
 8023d6e:	f004 fa09 	bl	8028184 <g_windowAddLabel>

	// Register popupWindow.
	g_registerWindow(&popupWindow);
 8023d72:	4845      	ldr	r0, [pc, #276]	; (8023e88 <APP_TFT_Task+0x2a4>)
 8023d74:	f003 fd9c 	bl	80278b0 <g_registerWindow>

	// Add labels to status window.
	g_windowAddLabel(&statusWindow, &projVerLabel);
 8023d78:	4939      	ldr	r1, [pc, #228]	; (8023e60 <APP_TFT_Task+0x27c>)
 8023d7a:	4844      	ldr	r0, [pc, #272]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023d7c:	f004 fa02 	bl	8028184 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &projDateLabel);
 8023d80:	4938      	ldr	r1, [pc, #224]	; (8023e64 <APP_TFT_Task+0x280>)
 8023d82:	4842      	ldr	r0, [pc, #264]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023d84:	f004 f9fe 	bl	8028184 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &timeLabel);
 8023d88:	4937      	ldr	r1, [pc, #220]	; (8023e68 <APP_TFT_Task+0x284>)
 8023d8a:	4840      	ldr	r0, [pc, #256]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023d8c:	f004 f9fa 	bl	8028184 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &upTimeLabel);
 8023d90:	4936      	ldr	r1, [pc, #216]	; (8023e6c <APP_TFT_Task+0x288>)
 8023d92:	483e      	ldr	r0, [pc, #248]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023d94:	f004 f9f6 	bl	8028184 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &adcLabel);
 8023d98:	4935      	ldr	r1, [pc, #212]	; (8023e70 <APP_TFT_Task+0x28c>)
 8023d9a:	483c      	ldr	r0, [pc, #240]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023d9c:	f004 f9f2 	bl	8028184 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &tempLabel);
 8023da0:	4934      	ldr	r1, [pc, #208]	; (8023e74 <APP_TFT_Task+0x290>)
 8023da2:	483a      	ldr	r0, [pc, #232]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023da4:	f004 f9ee 	bl	8028184 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &cpuLabel);
 8023da8:	4933      	ldr	r1, [pc, #204]	; (8023e78 <APP_TFT_Task+0x294>)
 8023daa:	4838      	ldr	r0, [pc, #224]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023dac:	f004 f9ea 	bl	8028184 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &sdUsedLabel);
 8023db0:	4932      	ldr	r1, [pc, #200]	; (8023e7c <APP_TFT_Task+0x298>)
 8023db2:	4836      	ldr	r0, [pc, #216]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023db4:	f004 f9e6 	bl	8028184 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &sdFreeLabel);
 8023db8:	4931      	ldr	r1, [pc, #196]	; (8023e80 <APP_TFT_Task+0x29c>)
 8023dba:	4834      	ldr	r0, [pc, #208]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023dbc:	f004 f9e2 	bl	8028184 <g_windowAddLabel>
	g_windowAddLabel(&statusWindow, &sdTotalLabel);
 8023dc0:	4930      	ldr	r1, [pc, #192]	; (8023e84 <APP_TFT_Task+0x2a0>)
 8023dc2:	4832      	ldr	r0, [pc, #200]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023dc4:	f004 f9de 	bl	8028184 <g_windowAddLabel>

	// Register status window.
	g_registerWindow(&statusWindow);
 8023dc8:	4830      	ldr	r0, [pc, #192]	; (8023e8c <APP_TFT_Task+0x2a8>)
 8023dca:	f003 fd71 	bl	80278b0 <g_registerWindow>

	//eeprom_driver_read_ex(0, 0, (u8_t*)&appConfig, sizeof(appConfig));
	(void_t) drv_24lc256Read((void_t*)&eeprom, 0, (u8_t*)&appConfig, sizeof(appConfig));
 8023dce:	2314      	movs	r3, #20
 8023dd0:	4a2f      	ldr	r2, [pc, #188]	; (8023e90 <APP_TFT_Task+0x2ac>)
 8023dd2:	2100      	movs	r1, #0
 8023dd4:	482f      	ldr	r0, [pc, #188]	; (8023e94 <APP_TFT_Task+0x2b0>)
 8023dd6:	f010 fefb 	bl	8034bd0 <drv_24lc256Read>
	sprintf(labelText, "Project version: %02d.%02d",
			appConfig.projectVersionMajor,
 8023dda:	4b2d      	ldr	r3, [pc, #180]	; (8023e90 <APP_TFT_Task+0x2ac>)
 8023ddc:	785b      	ldrb	r3, [r3, #1]
	sprintf(labelText, "Project version: %02d.%02d",
 8023dde:	461a      	mov	r2, r3
			appConfig.projectVersionMinor
 8023de0:	4b2b      	ldr	r3, [pc, #172]	; (8023e90 <APP_TFT_Task+0x2ac>)
 8023de2:	789b      	ldrb	r3, [r3, #2]
	sprintf(labelText, "Project version: %02d.%02d",
 8023de4:	492c      	ldr	r1, [pc, #176]	; (8023e98 <APP_TFT_Task+0x2b4>)
 8023de6:	482d      	ldr	r0, [pc, #180]	; (8023e9c <APP_TFT_Task+0x2b8>)
 8023de8:	f01e fe8a 	bl	8042b00 <siprintf>
		);
	g_labelSetText(&projVerLabel, labelText);
 8023dec:	492b      	ldr	r1, [pc, #172]	; (8023e9c <APP_TFT_Task+0x2b8>)
 8023dee:	481c      	ldr	r0, [pc, #112]	; (8023e60 <APP_TFT_Task+0x27c>)
 8023df0:	f003 ff7c 	bl	8027cec <g_labelSetText>

	sprintf(labelText, "Project date: %04d-%02d-%02d %02d:%02d:%02d",
			appConfig.projectDate.years,
 8023df4:	4b26      	ldr	r3, [pc, #152]	; (8023e90 <APP_TFT_Task+0x2ac>)
 8023df6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8023dfa:	b29b      	uxth	r3, r3
	sprintf(labelText, "Project date: %04d-%02d-%02d %02d:%02d:%02d",
 8023dfc:	461c      	mov	r4, r3
			appConfig.projectDate.months,
 8023dfe:	4b24      	ldr	r3, [pc, #144]	; (8023e90 <APP_TFT_Task+0x2ac>)
 8023e00:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(labelText, "Project date: %04d-%02d-%02d %02d:%02d:%02d",
 8023e02:	461d      	mov	r5, r3
			appConfig.projectDate.days,
 8023e04:	4b22      	ldr	r3, [pc, #136]	; (8023e90 <APP_TFT_Task+0x2ac>)
 8023e06:	891b      	ldrh	r3, [r3, #8]
	sprintf(labelText, "Project date: %04d-%02d-%02d %02d:%02d:%02d",
 8023e08:	461a      	mov	r2, r3
			appConfig.projectDate.hours,
 8023e0a:	4b21      	ldr	r3, [pc, #132]	; (8023e90 <APP_TFT_Task+0x2ac>)
 8023e0c:	79db      	ldrb	r3, [r3, #7]
	sprintf(labelText, "Project date: %04d-%02d-%02d %02d:%02d:%02d",
 8023e0e:	4619      	mov	r1, r3
			appConfig.projectDate.minutes,
 8023e10:	4b1f      	ldr	r3, [pc, #124]	; (8023e90 <APP_TFT_Task+0x2ac>)
 8023e12:	799b      	ldrb	r3, [r3, #6]
	sprintf(labelText, "Project date: %04d-%02d-%02d %02d:%02d:%02d",
 8023e14:	4618      	mov	r0, r3
			appConfig.projectDate.seconds
 8023e16:	4b1e      	ldr	r3, [pc, #120]	; (8023e90 <APP_TFT_Task+0x2ac>)
 8023e18:	795b      	ldrb	r3, [r3, #5]
	sprintf(labelText, "Project date: %04d-%02d-%02d %02d:%02d:%02d",
 8023e1a:	9303      	str	r3, [sp, #12]
 8023e1c:	9002      	str	r0, [sp, #8]
 8023e1e:	9101      	str	r1, [sp, #4]
 8023e20:	9200      	str	r2, [sp, #0]
 8023e22:	462b      	mov	r3, r5
 8023e24:	4622      	mov	r2, r4
 8023e26:	491e      	ldr	r1, [pc, #120]	; (8023ea0 <APP_TFT_Task+0x2bc>)
 8023e28:	481c      	ldr	r0, [pc, #112]	; (8023e9c <APP_TFT_Task+0x2b8>)
 8023e2a:	f01e fe69 	bl	8042b00 <siprintf>
		);
	g_labelSetText(&projDateLabel, labelText);
 8023e2e:	491b      	ldr	r1, [pc, #108]	; (8023e9c <APP_TFT_Task+0x2b8>)
 8023e30:	480c      	ldr	r0, [pc, #48]	; (8023e64 <APP_TFT_Task+0x280>)
 8023e32:	f003 ff5b 	bl	8027cec <g_labelSetText>

	g_labelSetText(&sdUsedLabel, "SD used:  ? kB");
 8023e36:	491b      	ldr	r1, [pc, #108]	; (8023ea4 <APP_TFT_Task+0x2c0>)
 8023e38:	4810      	ldr	r0, [pc, #64]	; (8023e7c <APP_TFT_Task+0x298>)
 8023e3a:	f003 ff57 	bl	8027cec <g_labelSetText>
	g_labelSetText(&sdFreeLabel, "SD free:  ? kB");
 8023e3e:	491a      	ldr	r1, [pc, #104]	; (8023ea8 <APP_TFT_Task+0x2c4>)
 8023e40:	480f      	ldr	r0, [pc, #60]	; (8023e80 <APP_TFT_Task+0x29c>)
 8023e42:	f003 ff53 	bl	8027cec <g_labelSetText>
 8023e46:	e031      	b.n	8023eac <APP_TFT_Task+0x2c8>
 8023e48:	08049c12 	.word	0x08049c12
 8023e4c:	20000e90 	.word	0x20000e90
 8023e50:	08049c06 	.word	0x08049c06
 8023e54:	20000e20 	.word	0x20000e20
 8023e58:	20000e58 	.word	0x20000e58
 8023e5c:	08049c08 	.word	0x08049c08
 8023e60:	20000ff4 	.word	0x20000ff4
 8023e64:	20001030 	.word	0x20001030
 8023e68:	2000106c 	.word	0x2000106c
 8023e6c:	200010a8 	.word	0x200010a8
 8023e70:	200010e4 	.word	0x200010e4
 8023e74:	20001120 	.word	0x20001120
 8023e78:	2000115c 	.word	0x2000115c
 8023e7c:	20001198 	.word	0x20001198
 8023e80:	200011d4 	.word	0x200011d4
 8023e84:	20001210 	.word	0x20001210
 8023e88:	20000ecc 	.word	0x20000ecc
 8023e8c:	20000f60 	.word	0x20000f60
 8023e90:	200053ec 	.word	0x200053ec
 8023e94:	20000d90 	.word	0x20000d90
 8023e98:	080470fc 	.word	0x080470fc
 8023e9c:	20005400 	.word	0x20005400
 8023ea0:	08047118 	.word	0x08047118
 8023ea4:	08047144 	.word	0x08047144
 8023ea8:	08047154 	.word	0x08047154
	g_labelSetText(&sdTotalLabel, "SD total: ? kB");
 8023eac:	49af      	ldr	r1, [pc, #700]	; (802416c <APP_TFT_Task+0x588>)
 8023eae:	48b0      	ldr	r0, [pc, #704]	; (8024170 <APP_TFT_Task+0x58c>)
 8023eb0:	f003 ff1c 	bl	8027cec <g_labelSetText>

	gos_triggerInit(&exIoTrigger);
 8023eb4:	48af      	ldr	r0, [pc, #700]	; (8024174 <APP_TFT_Task+0x590>)
 8023eb6:	f01d f813 	bl	8040ee0 <gos_triggerInit>
	gos_triggerInit(&exIoPressedTrigger);
 8023eba:	48af      	ldr	r0, [pc, #700]	; (8024178 <APP_TFT_Task+0x594>)
 8023ebc:	f01d f810 	bl	8040ee0 <gos_triggerInit>
	gos_triggerInit(&exIoReleasedTrigger);
 8023ec0:	48ae      	ldr	r0, [pc, #696]	; (802417c <APP_TFT_Task+0x598>)
 8023ec2:	f01d f80d 	bl	8040ee0 <gos_triggerInit>
	gos_triggerInit(&sdReadyTrigger);
 8023ec6:	48ae      	ldr	r0, [pc, #696]	; (8024180 <APP_TFT_Task+0x59c>)
 8023ec8:	f01d f80a 	bl	8040ee0 <gos_triggerInit>

	APP_EX_IO_RegisterCallback(GPIO_EX_PIN_6, GPIO_EX_EDGE_RISING, APP_TFT_StepButtonPressed);
 8023ecc:	4aad      	ldr	r2, [pc, #692]	; (8024184 <APP_TFT_Task+0x5a0>)
 8023ece:	2101      	movs	r1, #1
 8023ed0:	2040      	movs	r0, #64	; 0x40
 8023ed2:	f7fe f91b 	bl	802210c <APP_EX_IO_RegisterCallback>
	APP_EX_IO_RegisterCallback(GPIO_EX_PIN_4, GPIO_EX_EDGE_RISING, APP_TFT_ExIoPressed);
 8023ed6:	4aac      	ldr	r2, [pc, #688]	; (8024188 <APP_TFT_Task+0x5a4>)
 8023ed8:	2101      	movs	r1, #1
 8023eda:	2010      	movs	r0, #16
 8023edc:	f7fe f916 	bl	802210c <APP_EX_IO_RegisterCallback>
	APP_EX_IO_RegisterCallback(GPIO_EX_PIN_5, GPIO_EX_EDGE_RISING, APP_TFT_OkButtonPressed);
 8023ee0:	4aaa      	ldr	r2, [pc, #680]	; (802418c <APP_TFT_Task+0x5a8>)
 8023ee2:	2101      	movs	r1, #1
 8023ee4:	2020      	movs	r0, #32
 8023ee6:	f7fe f911 	bl	802210c <APP_EX_IO_RegisterCallback>
	APP_EX_IO_RegisterCallback(GPIO_EX_PIN_5, GPIO_EX_EDGE_FALLING, APP_TFT_OkButtonReleased);
 8023eea:	4aa9      	ldr	r2, [pc, #676]	; (8024190 <APP_TFT_Task+0x5ac>)
 8023eec:	2100      	movs	r1, #0
 8023eee:	2020      	movs	r0, #32
 8023ef0:	f7fe f90c 	bl	802210c <APP_EX_IO_RegisterCallback>

	g_windowInit(&popupWindow, &popWindowCloseButton, &popWindowTitleLabel);
 8023ef4:	4aa7      	ldr	r2, [pc, #668]	; (8024194 <APP_TFT_Task+0x5b0>)
 8023ef6:	49a8      	ldr	r1, [pc, #672]	; (8024198 <APP_TFT_Task+0x5b4>)
 8023ef8:	48a8      	ldr	r0, [pc, #672]	; (802419c <APP_TFT_Task+0x5b8>)
 8023efa:	f003 ff35 	bl	8027d68 <g_windowInit>
	g_windowInit(&statusWindow, &statusWindowCloseButton, &statusWindowTitleLabel);
 8023efe:	4aa8      	ldr	r2, [pc, #672]	; (80241a0 <APP_TFT_Task+0x5bc>)
 8023f00:	49a8      	ldr	r1, [pc, #672]	; (80241a4 <APP_TFT_Task+0x5c0>)
 8023f02:	48a9      	ldr	r0, [pc, #676]	; (80241a8 <APP_TFT_Task+0x5c4>)
 8023f04:	f003 ff30 	bl	8027d68 <g_windowInit>

	APP_SD_DataSignalSubscribe(APP_SD_DataReadySignalHandler, GOS_TASK_PRIVILEGE_USER);
 8023f08:	21ff      	movs	r1, #255	; 0xff
 8023f0a:	48a8      	ldr	r0, [pc, #672]	; (80241ac <APP_TFT_Task+0x5c8>)
 8023f0c:	f7ff fa88 	bl	8023420 <APP_SD_DataSignalSubscribe>

	for (;;)
	{
		if (gos_triggerWait(&sdReadyTrigger, 1, 0) == GOS_SUCCESS)
 8023f10:	2200      	movs	r2, #0
 8023f12:	2101      	movs	r1, #1
 8023f14:	489a      	ldr	r0, [pc, #616]	; (8024180 <APP_TFT_Task+0x59c>)
 8023f16:	f01d f857 	bl	8040fc8 <gos_triggerWait>
 8023f1a:	4603      	mov	r3, r0
 8023f1c:	2b55      	cmp	r3, #85	; 0x55
 8023f1e:	d124      	bne.n	8023f6a <APP_TFT_Task+0x386>
		{
			sdData = APP_SD_GetData();
 8023f20:	1d3b      	adds	r3, r7, #4
 8023f22:	4618      	mov	r0, r3
 8023f24:	f7ff fa6a 	bl	80233fc <APP_SD_GetData>
			sprintf(labelText, "SD used:  %lu kB",
 8023f28:	68fb      	ldr	r3, [r7, #12]
 8023f2a:	461a      	mov	r2, r3
 8023f2c:	49a0      	ldr	r1, [pc, #640]	; (80241b0 <APP_TFT_Task+0x5cc>)
 8023f2e:	48a1      	ldr	r0, [pc, #644]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8023f30:	f01e fde6 	bl	8042b00 <siprintf>
					sdData.used
				);
			g_labelSetText(&sdUsedLabel, labelText);
 8023f34:	499f      	ldr	r1, [pc, #636]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8023f36:	48a0      	ldr	r0, [pc, #640]	; (80241b8 <APP_TFT_Task+0x5d4>)
 8023f38:	f003 fed8 	bl	8027cec <g_labelSetText>

			sprintf(labelText, "SD free:  %lu kB",
 8023f3c:	68bb      	ldr	r3, [r7, #8]
 8023f3e:	461a      	mov	r2, r3
 8023f40:	499e      	ldr	r1, [pc, #632]	; (80241bc <APP_TFT_Task+0x5d8>)
 8023f42:	489c      	ldr	r0, [pc, #624]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8023f44:	f01e fddc 	bl	8042b00 <siprintf>
					sdData.free
				);
			g_labelSetText(&sdFreeLabel, labelText);
 8023f48:	499a      	ldr	r1, [pc, #616]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8023f4a:	489d      	ldr	r0, [pc, #628]	; (80241c0 <APP_TFT_Task+0x5dc>)
 8023f4c:	f003 fece 	bl	8027cec <g_labelSetText>

			sprintf(labelText, "SD total: %lu kB",
 8023f50:	687b      	ldr	r3, [r7, #4]
 8023f52:	461a      	mov	r2, r3
 8023f54:	499b      	ldr	r1, [pc, #620]	; (80241c4 <APP_TFT_Task+0x5e0>)
 8023f56:	4897      	ldr	r0, [pc, #604]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8023f58:	f01e fdd2 	bl	8042b00 <siprintf>
					sdData.total
				);
			g_labelSetText(&sdTotalLabel, labelText);
 8023f5c:	4995      	ldr	r1, [pc, #596]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8023f5e:	4884      	ldr	r0, [pc, #528]	; (8024170 <APP_TFT_Task+0x58c>)
 8023f60:	f003 fec4 	bl	8027cec <g_labelSetText>
			gos_triggerReset(&sdReadyTrigger);
 8023f64:	4886      	ldr	r0, [pc, #536]	; (8024180 <APP_TFT_Task+0x59c>)
 8023f66:	f01c ffd7 	bl	8040f18 <gos_triggerReset>
		}

		/* TIME */
		if ((gos_kernelGetSysTicks() - lastTimeTick) > 250)
 8023f6a:	f016 fb83 	bl	803a674 <gos_kernelGetSysTicks>
 8023f6e:	4602      	mov	r2, r0
 8023f70:	69fb      	ldr	r3, [r7, #28]
 8023f72:	1ad3      	subs	r3, r2, r3
 8023f74:	2bfa      	cmp	r3, #250	; 0xfa
 8023f76:	d942      	bls.n	8023ffe <APP_TFT_Task+0x41a>
		{
			// Update time label.
			gos_timeGet(&actualTime);
 8023f78:	4893      	ldr	r0, [pc, #588]	; (80241c8 <APP_TFT_Task+0x5e4>)
 8023f7a:	f01c f989 	bl	8040290 <gos_timeGet>
			sprintf(labelText, "Actual time: %04d-%02d-%02d %02d:%02d:%02d",
					actualTime.years,
 8023f7e:	4b92      	ldr	r3, [pc, #584]	; (80241c8 <APP_TFT_Task+0x5e4>)
 8023f80:	891b      	ldrh	r3, [r3, #8]
			sprintf(labelText, "Actual time: %04d-%02d-%02d %02d:%02d:%02d",
 8023f82:	461c      	mov	r4, r3
					actualTime.months,
 8023f84:	4b90      	ldr	r3, [pc, #576]	; (80241c8 <APP_TFT_Task+0x5e4>)
 8023f86:	79db      	ldrb	r3, [r3, #7]
			sprintf(labelText, "Actual time: %04d-%02d-%02d %02d:%02d:%02d",
 8023f88:	461d      	mov	r5, r3
					actualTime.days,
 8023f8a:	4b8f      	ldr	r3, [pc, #572]	; (80241c8 <APP_TFT_Task+0x5e4>)
 8023f8c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8023f90:	b29b      	uxth	r3, r3
			sprintf(labelText, "Actual time: %04d-%02d-%02d %02d:%02d:%02d",
 8023f92:	461a      	mov	r2, r3
					actualTime.hours,
 8023f94:	4b8c      	ldr	r3, [pc, #560]	; (80241c8 <APP_TFT_Task+0x5e4>)
 8023f96:	791b      	ldrb	r3, [r3, #4]
			sprintf(labelText, "Actual time: %04d-%02d-%02d %02d:%02d:%02d",
 8023f98:	4619      	mov	r1, r3
					actualTime.minutes,
 8023f9a:	4b8b      	ldr	r3, [pc, #556]	; (80241c8 <APP_TFT_Task+0x5e4>)
 8023f9c:	78db      	ldrb	r3, [r3, #3]
			sprintf(labelText, "Actual time: %04d-%02d-%02d %02d:%02d:%02d",
 8023f9e:	4618      	mov	r0, r3
					actualTime.seconds
 8023fa0:	4b89      	ldr	r3, [pc, #548]	; (80241c8 <APP_TFT_Task+0x5e4>)
 8023fa2:	789b      	ldrb	r3, [r3, #2]
			sprintf(labelText, "Actual time: %04d-%02d-%02d %02d:%02d:%02d",
 8023fa4:	9303      	str	r3, [sp, #12]
 8023fa6:	9002      	str	r0, [sp, #8]
 8023fa8:	9101      	str	r1, [sp, #4]
 8023faa:	9200      	str	r2, [sp, #0]
 8023fac:	462b      	mov	r3, r5
 8023fae:	4622      	mov	r2, r4
 8023fb0:	4986      	ldr	r1, [pc, #536]	; (80241cc <APP_TFT_Task+0x5e8>)
 8023fb2:	4880      	ldr	r0, [pc, #512]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8023fb4:	f01e fda4 	bl	8042b00 <siprintf>
				);
			g_labelSetText(&timeLabel, labelText);
 8023fb8:	497e      	ldr	r1, [pc, #504]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8023fba:	4885      	ldr	r0, [pc, #532]	; (80241d0 <APP_TFT_Task+0x5ec>)
 8023fbc:	f003 fe96 	bl	8027cec <g_labelSetText>

			// Update uptime label
			gos_runTimeGet(&runTime);
 8023fc0:	4884      	ldr	r0, [pc, #528]	; (80241d4 <APP_TFT_Task+0x5f0>)
 8023fc2:	f01c f99f 	bl	8040304 <gos_runTimeGet>
			sprintf(labelText, "System runtime: %02d days %02d:%02d:%02d",
					runTime.days,
 8023fc6:	4b83      	ldr	r3, [pc, #524]	; (80241d4 <APP_TFT_Task+0x5f0>)
 8023fc8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8023fcc:	b29b      	uxth	r3, r3
			sprintf(labelText, "System runtime: %02d days %02d:%02d:%02d",
 8023fce:	4619      	mov	r1, r3
					runTime.hours,
 8023fd0:	4b80      	ldr	r3, [pc, #512]	; (80241d4 <APP_TFT_Task+0x5f0>)
 8023fd2:	799b      	ldrb	r3, [r3, #6]
			sprintf(labelText, "System runtime: %02d days %02d:%02d:%02d",
 8023fd4:	4618      	mov	r0, r3
					runTime.minutes,
 8023fd6:	4b7f      	ldr	r3, [pc, #508]	; (80241d4 <APP_TFT_Task+0x5f0>)
 8023fd8:	795b      	ldrb	r3, [r3, #5]
			sprintf(labelText, "System runtime: %02d days %02d:%02d:%02d",
 8023fda:	461a      	mov	r2, r3
					runTime.seconds
 8023fdc:	4b7d      	ldr	r3, [pc, #500]	; (80241d4 <APP_TFT_Task+0x5f0>)
 8023fde:	791b      	ldrb	r3, [r3, #4]
			sprintf(labelText, "System runtime: %02d days %02d:%02d:%02d",
 8023fe0:	9301      	str	r3, [sp, #4]
 8023fe2:	9200      	str	r2, [sp, #0]
 8023fe4:	4603      	mov	r3, r0
 8023fe6:	460a      	mov	r2, r1
 8023fe8:	497b      	ldr	r1, [pc, #492]	; (80241d8 <APP_TFT_Task+0x5f4>)
 8023fea:	4872      	ldr	r0, [pc, #456]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8023fec:	f01e fd88 	bl	8042b00 <siprintf>
				);
			g_labelSetText(&upTimeLabel, labelText);
 8023ff0:	4970      	ldr	r1, [pc, #448]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8023ff2:	487a      	ldr	r0, [pc, #488]	; (80241dc <APP_TFT_Task+0x5f8>)
 8023ff4:	f003 fe7a 	bl	8027cec <g_labelSetText>

			lastTimeTick = gos_kernelGetSysTicks();
 8023ff8:	f016 fb3c 	bl	803a674 <gos_kernelGetSysTicks>
 8023ffc:	61f8      	str	r0, [r7, #28]
		}


		/* ADC */
		if ((gos_kernelGetSysTicks() - lastAdcTick) > 300)
 8023ffe:	f016 fb39 	bl	803a674 <gos_kernelGetSysTicks>
 8024002:	4602      	mov	r2, r0
 8024004:	6a3b      	ldr	r3, [r7, #32]
 8024006:	1ad3      	subs	r3, r2, r3
 8024008:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 802400c:	d932      	bls.n	8024074 <APP_TFT_Task+0x490>
		{
			// Update adc label.
			BSP_ADC_HandlerGetValue(&adcValue);
 802400e:	4874      	ldr	r0, [pc, #464]	; (80241e0 <APP_TFT_Task+0x5fc>)
 8024010:	f000 fa62 	bl	80244d8 <BSP_ADC_HandlerGetValue>
			sprintf(labelText, "ADC value: %u.%02uV",
					((330 * adcValue / 4096) / 100), ((330 * adcValue / 4096) % 100)
 8024014:	4b72      	ldr	r3, [pc, #456]	; (80241e0 <APP_TFT_Task+0x5fc>)
 8024016:	881b      	ldrh	r3, [r3, #0]
 8024018:	461a      	mov	r2, r3
 802401a:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 802401e:	fb02 f303 	mul.w	r3, r2, r3
			sprintf(labelText, "ADC value: %u.%02uV",
 8024022:	4a70      	ldr	r2, [pc, #448]	; (80241e4 <APP_TFT_Task+0x600>)
 8024024:	fb82 1203 	smull	r1, r2, r2, r3
 8024028:	1452      	asrs	r2, r2, #17
 802402a:	17db      	asrs	r3, r3, #31
 802402c:	1ad0      	subs	r0, r2, r3
					((330 * adcValue / 4096) / 100), ((330 * adcValue / 4096) % 100)
 802402e:	4b6c      	ldr	r3, [pc, #432]	; (80241e0 <APP_TFT_Task+0x5fc>)
 8024030:	881b      	ldrh	r3, [r3, #0]
 8024032:	461a      	mov	r2, r3
 8024034:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8024038:	fb02 f303 	mul.w	r3, r2, r3
 802403c:	2b00      	cmp	r3, #0
 802403e:	da01      	bge.n	8024044 <APP_TFT_Task+0x460>
 8024040:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8024044:	131b      	asrs	r3, r3, #12
 8024046:	461a      	mov	r2, r3
			sprintf(labelText, "ADC value: %u.%02uV",
 8024048:	4b66      	ldr	r3, [pc, #408]	; (80241e4 <APP_TFT_Task+0x600>)
 802404a:	fb83 1302 	smull	r1, r3, r3, r2
 802404e:	1159      	asrs	r1, r3, #5
 8024050:	17d3      	asrs	r3, r2, #31
 8024052:	1acb      	subs	r3, r1, r3
 8024054:	2164      	movs	r1, #100	; 0x64
 8024056:	fb01 f303 	mul.w	r3, r1, r3
 802405a:	1ad3      	subs	r3, r2, r3
 802405c:	4602      	mov	r2, r0
 802405e:	4962      	ldr	r1, [pc, #392]	; (80241e8 <APP_TFT_Task+0x604>)
 8024060:	4854      	ldr	r0, [pc, #336]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8024062:	f01e fd4d 	bl	8042b00 <siprintf>
				);
			g_labelSetText(&adcLabel, labelText);
 8024066:	4953      	ldr	r1, [pc, #332]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8024068:	4860      	ldr	r0, [pc, #384]	; (80241ec <APP_TFT_Task+0x608>)
 802406a:	f003 fe3f 	bl	8027cec <g_labelSetText>

			lastAdcTick = gos_kernelGetSysTicks();
 802406e:	f016 fb01 	bl	803a674 <gos_kernelGetSysTicks>
 8024072:	6238      	str	r0, [r7, #32]
		}


		/* TEMPERATURE */
		if ((gos_kernelGetSysTicks() - lastTempTick) > 1000)
 8024074:	f016 fafe 	bl	803a674 <gos_kernelGetSysTicks>
 8024078:	4602      	mov	r2, r0
 802407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802407c:	1ad3      	subs	r3, r2, r3
 802407e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8024082:	d921      	bls.n	80240c8 <APP_TFT_Task+0x4e4>
		{
			// Update temperature label.
			BSP_Temperature_HandlerGetValue(&temperatureValue);
 8024084:	485a      	ldr	r0, [pc, #360]	; (80241f0 <APP_TFT_Task+0x60c>)
 8024086:	f000 fe29 	bl	8024cdc <BSP_Temperature_HandlerGetValue>
			sprintf(labelText, "Temp.: %u.%02u C  ",
 802408a:	4b59      	ldr	r3, [pc, #356]	; (80241f0 <APP_TFT_Task+0x60c>)
 802408c:	881b      	ldrh	r3, [r3, #0]
 802408e:	4a55      	ldr	r2, [pc, #340]	; (80241e4 <APP_TFT_Task+0x600>)
 8024090:	fba2 2303 	umull	r2, r3, r2, r3
 8024094:	095b      	lsrs	r3, r3, #5
 8024096:	b29b      	uxth	r3, r3
 8024098:	4618      	mov	r0, r3
 802409a:	4b55      	ldr	r3, [pc, #340]	; (80241f0 <APP_TFT_Task+0x60c>)
 802409c:	881b      	ldrh	r3, [r3, #0]
 802409e:	4a51      	ldr	r2, [pc, #324]	; (80241e4 <APP_TFT_Task+0x600>)
 80240a0:	fba2 1203 	umull	r1, r2, r2, r3
 80240a4:	0952      	lsrs	r2, r2, #5
 80240a6:	2164      	movs	r1, #100	; 0x64
 80240a8:	fb01 f202 	mul.w	r2, r1, r2
 80240ac:	1a9b      	subs	r3, r3, r2
 80240ae:	b29b      	uxth	r3, r3
 80240b0:	4602      	mov	r2, r0
 80240b2:	4950      	ldr	r1, [pc, #320]	; (80241f4 <APP_TFT_Task+0x610>)
 80240b4:	483f      	ldr	r0, [pc, #252]	; (80241b4 <APP_TFT_Task+0x5d0>)
 80240b6:	f01e fd23 	bl	8042b00 <siprintf>
					(temperatureValue / 100), (temperatureValue % 100)
				);
			g_labelSetText(&tempLabel, labelText);
 80240ba:	493e      	ldr	r1, [pc, #248]	; (80241b4 <APP_TFT_Task+0x5d0>)
 80240bc:	484e      	ldr	r0, [pc, #312]	; (80241f8 <APP_TFT_Task+0x614>)
 80240be:	f003 fe15 	bl	8027cec <g_labelSetText>

			lastTempTick = gos_kernelGetSysTicks();
 80240c2:	f016 fad7 	bl	803a674 <gos_kernelGetSysTicks>
 80240c6:	6278      	str	r0, [r7, #36]	; 0x24
		}

		// Update CPU load label.
		cpuLoadArray[(cpuLoadIdx++ % CPU_LOAD_AVG_SAMPLES)] = gos_kernelGetCpuUsage();
 80240c8:	4b4c      	ldr	r3, [pc, #304]	; (80241fc <APP_TFT_Task+0x618>)
 80240ca:	881b      	ldrh	r3, [r3, #0]
 80240cc:	1c5a      	adds	r2, r3, #1
 80240ce:	b291      	uxth	r1, r2
 80240d0:	4a4a      	ldr	r2, [pc, #296]	; (80241fc <APP_TFT_Task+0x618>)
 80240d2:	8011      	strh	r1, [r2, #0]
 80240d4:	f003 040f 	and.w	r4, r3, #15
 80240d8:	f016 fad8 	bl	803a68c <gos_kernelGetCpuUsage>
 80240dc:	4603      	mov	r3, r0
 80240de:	461a      	mov	r2, r3
 80240e0:	4b47      	ldr	r3, [pc, #284]	; (8024200 <APP_TFT_Task+0x61c>)
 80240e2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		u32_t cpuSum = 0u;
 80240e6:	2300      	movs	r3, #0
 80240e8:	617b      	str	r3, [r7, #20]
		for (u8_t i = 0; i < CPU_LOAD_AVG_SAMPLES; i++)
 80240ea:	2300      	movs	r3, #0
 80240ec:	74fb      	strb	r3, [r7, #19]
 80240ee:	e00a      	b.n	8024106 <APP_TFT_Task+0x522>
		{
			cpuSum += cpuLoadArray[i];
 80240f0:	7cfb      	ldrb	r3, [r7, #19]
 80240f2:	4a43      	ldr	r2, [pc, #268]	; (8024200 <APP_TFT_Task+0x61c>)
 80240f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80240f8:	461a      	mov	r2, r3
 80240fa:	697b      	ldr	r3, [r7, #20]
 80240fc:	4413      	add	r3, r2
 80240fe:	617b      	str	r3, [r7, #20]
		for (u8_t i = 0; i < CPU_LOAD_AVG_SAMPLES; i++)
 8024100:	7cfb      	ldrb	r3, [r7, #19]
 8024102:	3301      	adds	r3, #1
 8024104:	74fb      	strb	r3, [r7, #19]
 8024106:	7cfb      	ldrb	r3, [r7, #19]
 8024108:	2b0f      	cmp	r3, #15
 802410a:	d9f1      	bls.n	80240f0 <APP_TFT_Task+0x50c>
		}
		cpuLoad = cpuSum / CPU_LOAD_AVG_SAMPLES;
 802410c:	697b      	ldr	r3, [r7, #20]
 802410e:	091b      	lsrs	r3, r3, #4
 8024110:	b29a      	uxth	r2, r3
 8024112:	4b3c      	ldr	r3, [pc, #240]	; (8024204 <APP_TFT_Task+0x620>)
 8024114:	801a      	strh	r2, [r3, #0]

		if ((gos_kernelGetSysTicks() - lastCpuTick) > 500)
 8024116:	f016 faad 	bl	803a674 <gos_kernelGetSysTicks>
 802411a:	4602      	mov	r2, r0
 802411c:	69bb      	ldr	r3, [r7, #24]
 802411e:	1ad3      	subs	r3, r2, r3
 8024120:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8024124:	d91e      	bls.n	8024164 <APP_TFT_Task+0x580>
		{
			sprintf(labelText, "CPU load: %3u.%02u %%",
 8024126:	4b37      	ldr	r3, [pc, #220]	; (8024204 <APP_TFT_Task+0x620>)
 8024128:	881b      	ldrh	r3, [r3, #0]
 802412a:	4a2e      	ldr	r2, [pc, #184]	; (80241e4 <APP_TFT_Task+0x600>)
 802412c:	fba2 2303 	umull	r2, r3, r2, r3
 8024130:	095b      	lsrs	r3, r3, #5
 8024132:	b29b      	uxth	r3, r3
 8024134:	4618      	mov	r0, r3
 8024136:	4b33      	ldr	r3, [pc, #204]	; (8024204 <APP_TFT_Task+0x620>)
 8024138:	881b      	ldrh	r3, [r3, #0]
 802413a:	4a2a      	ldr	r2, [pc, #168]	; (80241e4 <APP_TFT_Task+0x600>)
 802413c:	fba2 1203 	umull	r1, r2, r2, r3
 8024140:	0952      	lsrs	r2, r2, #5
 8024142:	2164      	movs	r1, #100	; 0x64
 8024144:	fb01 f202 	mul.w	r2, r1, r2
 8024148:	1a9b      	subs	r3, r3, r2
 802414a:	b29b      	uxth	r3, r3
 802414c:	4602      	mov	r2, r0
 802414e:	492e      	ldr	r1, [pc, #184]	; (8024208 <APP_TFT_Task+0x624>)
 8024150:	4818      	ldr	r0, [pc, #96]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8024152:	f01e fcd5 	bl	8042b00 <siprintf>
					(cpuLoad / 100), (cpuLoad % 100)
				);
			g_labelSetText(&cpuLabel, labelText);
 8024156:	4917      	ldr	r1, [pc, #92]	; (80241b4 <APP_TFT_Task+0x5d0>)
 8024158:	482c      	ldr	r0, [pc, #176]	; (802420c <APP_TFT_Task+0x628>)
 802415a:	f003 fdc7 	bl	8027cec <g_labelSetText>

			lastCpuTick = gos_kernelGetSysTicks();
 802415e:	f016 fa89 	bl	803a674 <gos_kernelGetSysTicks>
 8024162:	61b8      	str	r0, [r7, #24]
		}

		gos_taskSleep(100);
 8024164:	2064      	movs	r0, #100	; 0x64
 8024166:	f017 fc73 	bl	803ba50 <gos_taskSleep>
	{
 802416a:	e6d1      	b.n	8023f10 <APP_TFT_Task+0x32c>
 802416c:	08047164 	.word	0x08047164
 8024170:	20001210 	.word	0x20001210
 8024174:	200052d4 	.word	0x200052d4
 8024178:	200052e0 	.word	0x200052e0
 802417c:	200052ec 	.word	0x200052ec
 8024180:	200052f8 	.word	0x200052f8
 8024184:	0802425d 	.word	0x0802425d
 8024188:	08024275 	.word	0x08024275
 802418c:	0802428d 	.word	0x0802428d
 8024190:	080242a1 	.word	0x080242a1
 8024194:	20005304 	.word	0x20005304
 8024198:	2000537c 	.word	0x2000537c
 802419c:	20000ecc 	.word	0x20000ecc
 80241a0:	20005340 	.word	0x20005340
 80241a4:	200053b4 	.word	0x200053b4
 80241a8:	20000f60 	.word	0x20000f60
 80241ac:	08024211 	.word	0x08024211
 80241b0:	08047174 	.word	0x08047174
 80241b4:	20005400 	.word	0x20005400
 80241b8:	20001198 	.word	0x20001198
 80241bc:	08047188 	.word	0x08047188
 80241c0:	200011d4 	.word	0x200011d4
 80241c4:	0804719c 	.word	0x0804719c
 80241c8:	20005428 	.word	0x20005428
 80241cc:	080471b0 	.word	0x080471b0
 80241d0:	2000106c 	.word	0x2000106c
 80241d4:	20005434 	.word	0x20005434
 80241d8:	080471dc 	.word	0x080471dc
 80241dc:	200010a8 	.word	0x200010a8
 80241e0:	2000543e 	.word	0x2000543e
 80241e4:	51eb851f 	.word	0x51eb851f
 80241e8:	08047208 	.word	0x08047208
 80241ec:	200010e4 	.word	0x200010e4
 80241f0:	20005440 	.word	0x20005440
 80241f4:	0804721c 	.word	0x0804721c
 80241f8:	20001120 	.word	0x20001120
 80241fc:	20005544 	.word	0x20005544
 8024200:	20005444 	.word	0x20005444
 8024204:	20005442 	.word	0x20005442
 8024208:	08047230 	.word	0x08047230
 802420c:	2000115c 	.word	0x2000115c

08024210 <APP_SD_DataReadySignalHandler>:
	}
}

GOS_STATIC void_t APP_SD_DataReadySignalHandler (gos_signalSenderId_t senderId)
{
 8024210:	b580      	push	{r7, lr}
 8024212:	b082      	sub	sp, #8
 8024214:	af00      	add	r7, sp, #0
 8024216:	4603      	mov	r3, r0
 8024218:	80fb      	strh	r3, [r7, #6]
	gos_triggerIncrement(&sdReadyTrigger);
 802421a:	4803      	ldr	r0, [pc, #12]	; (8024228 <APP_SD_DataReadySignalHandler+0x18>)
 802421c:	f01c ff84 	bl	8041128 <gos_triggerIncrement>
}
 8024220:	bf00      	nop
 8024222:	3708      	adds	r7, #8
 8024224:	46bd      	mov	sp, r7
 8024226:	bd80      	pop	{r7, pc}
 8024228:	200052f8 	.word	0x200052f8

0802422c <APP_TFT_PopUpWindowOkClick>:

GOS_STATIC void_t APP_TFT_PopUpWindowOkClick (g_button_t* pButton)
{
 802422c:	b580      	push	{r7, lr}
 802422e:	b082      	sub	sp, #8
 8024230:	af00      	add	r7, sp, #0
 8024232:	6078      	str	r0, [r7, #4]
	g_windowHide(&popupWindow);
 8024234:	4803      	ldr	r0, [pc, #12]	; (8024244 <APP_TFT_PopUpWindowOkClick+0x18>)
 8024236:	f003 ffe5 	bl	8028204 <g_windowHide>
}
 802423a:	bf00      	nop
 802423c:	3708      	adds	r7, #8
 802423e:	46bd      	mov	sp, r7
 8024240:	bd80      	pop	{r7, pc}
 8024242:	bf00      	nop
 8024244:	20000ecc 	.word	0x20000ecc

08024248 <APP_TFT_PopUpWindowResetClick>:

GOS_STATIC void_t APP_TFT_PopUpWindowResetClick (g_button_t* pButton)
{
 8024248:	b580      	push	{r7, lr}
 802424a:	b082      	sub	sp, #8
 802424c:	af00      	add	r7, sp, #0
 802424e:	6078      	str	r0, [r7, #4]
	gos_kernelReset();
 8024250:	f016 fa2e 	bl	803a6b0 <gos_kernelReset>
}
 8024254:	bf00      	nop
 8024256:	3708      	adds	r7, #8
 8024258:	46bd      	mov	sp, r7
 802425a:	bd80      	pop	{r7, pc}

0802425c <APP_TFT_StepButtonPressed>:

GOS_STATIC void_t APP_TFT_StepButtonPressed (void_t)
{
 802425c:	b580      	push	{r7, lr}
 802425e:	af00      	add	r7, sp, #0
	g_windowTabStep(&popupWindow);
 8024260:	4803      	ldr	r0, [pc, #12]	; (8024270 <APP_TFT_StepButtonPressed+0x14>)
 8024262:	f004 f804 	bl	802826e <g_windowTabStep>
	APP_DAC_PlayBeep();
 8024266:	f7fd f909 	bl	802147c <APP_DAC_PlayBeep>
}
 802426a:	bf00      	nop
 802426c:	bd80      	pop	{r7, pc}
 802426e:	bf00      	nop
 8024270:	20000ecc 	.word	0x20000ecc

08024274 <APP_TFT_ExIoPressed>:

GOS_STATIC void_t APP_TFT_ExIoPressed (void_t)
{
 8024274:	b580      	push	{r7, lr}
 8024276:	af00      	add	r7, sp, #0
	g_windowShow(&popupWindow);
 8024278:	4803      	ldr	r0, [pc, #12]	; (8024288 <APP_TFT_ExIoPressed+0x14>)
 802427a:	f003 ffab 	bl	80281d4 <g_windowShow>
	APP_DAC_PlayBeep();
 802427e:	f7fd f8fd 	bl	802147c <APP_DAC_PlayBeep>
}
 8024282:	bf00      	nop
 8024284:	bd80      	pop	{r7, pc}
 8024286:	bf00      	nop
 8024288:	20000ecc 	.word	0x20000ecc

0802428c <APP_TFT_OkButtonPressed>:

GOS_STATIC void_t APP_TFT_OkButtonPressed (void_t)
{
 802428c:	b580      	push	{r7, lr}
 802428e:	af00      	add	r7, sp, #0
	g_windowPressFocused(&popupWindow);
 8024290:	4802      	ldr	r0, [pc, #8]	; (802429c <APP_TFT_OkButtonPressed+0x10>)
 8024292:	f004 f851 	bl	8028338 <g_windowPressFocused>
}
 8024296:	bf00      	nop
 8024298:	bd80      	pop	{r7, pc}
 802429a:	bf00      	nop
 802429c:	20000ecc 	.word	0x20000ecc

080242a0 <APP_TFT_OkButtonReleased>:

GOS_STATIC void_t APP_TFT_OkButtonReleased (void_t)
{
 80242a0:	b580      	push	{r7, lr}
 80242a2:	af00      	add	r7, sp, #0
	g_windowReleaseFocused(&popupWindow);
 80242a4:	4803      	ldr	r0, [pc, #12]	; (80242b4 <APP_TFT_OkButtonReleased+0x14>)
 80242a6:	f004 f889 	bl	80283bc <g_windowReleaseFocused>
	APP_DAC_PlayBeep();
 80242aa:	f7fd f8e7 	bl	802147c <APP_DAC_PlayBeep>
}
 80242ae:	bf00      	nop
 80242b0:	bd80      	pop	{r7, pc}
 80242b2:	bf00      	nop
 80242b4:	20000ecc 	.word	0x20000ecc

080242b8 <APP_TimeInit>:
	.payloadSize = sizeof(timeSyncMsg),
	.protocolVersion = 1
};

gos_result_t APP_TimeInit (void_t)
{
 80242b8:	b580      	push	{r7, lr}
 80242ba:	b082      	sub	sp, #8
 80242bc:	af00      	add	r7, sp, #0
	gos_result_t timeInitResult = GOS_SUCCESS;
 80242be:	2355      	movs	r3, #85	; 0x55
 80242c0:	71fb      	strb	r3, [r7, #7]

	timeInitResult &= gos_taskRegister(&timeTaskDesc, NULL);
 80242c2:	2100      	movs	r1, #0
 80242c4:	4808      	ldr	r0, [pc, #32]	; (80242e8 <APP_TimeInit+0x30>)
 80242c6:	f017 fa31 	bl	803b72c <gos_taskRegister>
 80242ca:	4603      	mov	r3, r0
 80242cc:	461a      	mov	r2, r3
 80242ce:	79fb      	ldrb	r3, [r7, #7]
 80242d0:	4013      	ands	r3, r2
 80242d2:	71fb      	strb	r3, [r7, #7]

	if (timeInitResult != GOS_SUCCESS)
 80242d4:	79fb      	ldrb	r3, [r7, #7]
 80242d6:	2b55      	cmp	r3, #85	; 0x55
 80242d8:	d001      	beq.n	80242de <APP_TimeInit+0x26>
	{
		timeInitResult = GOS_ERROR;
 80242da:	23ae      	movs	r3, #174	; 0xae
 80242dc:	71fb      	strb	r3, [r7, #7]
	}

	return timeInitResult;
 80242de:	79fb      	ldrb	r3, [r7, #7]
}
 80242e0:	4618      	mov	r0, r3
 80242e2:	3708      	adds	r7, #8
 80242e4:	46bd      	mov	sp, r7
 80242e6:	bd80      	pop	{r7, pc}
 80242e8:	200012b8 	.word	0x200012b8

080242ec <APP_TimeTask>:

/*
 * Function: APP_TimeTask
 */
GOS_STATIC void_t APP_TimeTask (void_t)
{
 80242ec:	b580      	push	{r7, lr}
 80242ee:	b084      	sub	sp, #16
 80242f0:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_time_t sysTime = {.years = 2022, .months = 11, .days = 05, .hours = 0, .minutes = 0, .seconds = 0};
 80242f2:	1d3b      	adds	r3, r7, #4
 80242f4:	2200      	movs	r2, #0
 80242f6:	601a      	str	r2, [r3, #0]
 80242f8:	605a      	str	r2, [r3, #4]
 80242fa:	811a      	strh	r2, [r3, #8]
 80242fc:	2300      	movs	r3, #0
 80242fe:	f043 0305 	orr.w	r3, r3, #5
 8024302:	727b      	strb	r3, [r7, #9]
 8024304:	2300      	movs	r3, #0
 8024306:	72bb      	strb	r3, [r7, #10]
 8024308:	230b      	movs	r3, #11
 802430a:	72fb      	strb	r3, [r7, #11]
 802430c:	f240 73e6 	movw	r3, #2022	; 0x7e6
 8024310:	81bb      	strh	r3, [r7, #12]
	 * Function code.
	 */
	/*
	 * Set system time.
	 */
	rtc_driver_get_time(&sysTime, NULL);
 8024312:	1d3b      	adds	r3, r7, #4
 8024314:	2100      	movs	r1, #0
 8024316:	4618      	mov	r0, r3
 8024318:	f002 fac5 	bl	80268a6 <rtc_driver_get_time>
	gos_timeSet(&sysTime);
 802431c:	1d3b      	adds	r3, r7, #4
 802431e:	4618      	mov	r0, r3
 8024320:	f01b ffd4 	bl	80402cc <gos_timeSet>
	gos_sysmonRegisterUserMessage(&timeSyncMsgDesc);
 8024324:	4811      	ldr	r0, [pc, #68]	; (802436c <APP_TimeTask+0x80>)
 8024326:	f01b fb69 	bl	803f9fc <gos_sysmonRegisterUserMessage>

	svl_dsmWaitForState(DSM_STATE_STARTUP_READY);
 802432a:	2001      	movs	r0, #1
 802432c:	f015 f996 	bl	803965c <svl_dsmWaitForState>

	/*
	 * Subscribe to time and button pressed signals.
	 */
	GOS_EXTERN gos_signalId_t timeSignalId;
	gos_signalSubscribe(timeSignalId, APP_SecondElapsedSignalHandler, GOS_PRIV_TASK_MANIPULATE | GOS_PRIV_TRACE);
 8024330:	4b0f      	ldr	r3, [pc, #60]	; (8024370 <APP_TimeTask+0x84>)
 8024332:	781b      	ldrb	r3, [r3, #0]
 8024334:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8024338:	490e      	ldr	r1, [pc, #56]	; (8024374 <APP_TimeTask+0x88>)
 802433a:	4618      	mov	r0, r3
 802433c:	f01b f9c8 	bl	803f6d0 <gos_signalSubscribe>
	gos_signalSubscribe(buttonPressedSignal, APP_ButtonPressedSignalHandler, GOS_TASK_PRIVILEGE_USER);
 8024340:	4b0d      	ldr	r3, [pc, #52]	; (8024378 <APP_TimeTask+0x8c>)
 8024342:	781b      	ldrb	r3, [r3, #0]
 8024344:	22ff      	movs	r2, #255	; 0xff
 8024346:	490d      	ldr	r1, [pc, #52]	; (802437c <APP_TimeTask+0x90>)
 8024348:	4618      	mov	r0, r3
 802434a:	f01b f9c1 	bl	803f6d0 <gos_signalSubscribe>
	for (;;)
	{
		/*
		 * Update time.
		 */
		rtc_driver_get_time(&sysTime, NULL);
 802434e:	1d3b      	adds	r3, r7, #4
 8024350:	2100      	movs	r1, #0
 8024352:	4618      	mov	r0, r3
 8024354:	f002 faa7 	bl	80268a6 <rtc_driver_get_time>
		gos_timeSet(&sysTime);
 8024358:	1d3b      	adds	r3, r7, #4
 802435a:	4618      	mov	r0, r3
 802435c:	f01b ffb6 	bl	80402cc <gos_timeSet>

		gos_taskSleep(10000);
 8024360:	f242 7010 	movw	r0, #10000	; 0x2710
 8024364:	f017 fb74 	bl	803ba50 <gos_taskSleep>
		rtc_driver_get_time(&sysTime, NULL);
 8024368:	e7f1      	b.n	802434e <APP_TimeTask+0x62>
 802436a:	bf00      	nop
 802436c:	20001324 	.word	0x20001324
 8024370:	2000fd34 	.word	0x2000fd34
 8024374:	08024381 	.word	0x08024381
 8024378:	200036e8 	.word	0x200036e8
 802437c:	080243e1 	.word	0x080243e1

08024380 <APP_SecondElapsedSignalHandler>:

/*
 * Function: APP_SecondElapsedSignalHandler
 */
GOS_STATIC void_t APP_SecondElapsedSignalHandler (gos_signalSenderId_t senderId)
{
 8024380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024382:	b08d      	sub	sp, #52	; 0x34
 8024384:	af06      	add	r7, sp, #24
 8024386:	4603      	mov	r3, r0
 8024388:	80fb      	strh	r3, [r7, #6]
	gos_time_t sysTime;
	gos_timeGet(&sysTime);
 802438a:	f107 030c 	add.w	r3, r7, #12
 802438e:	4618      	mov	r0, r3
 8024390:	f01b ff7e 	bl	8040290 <gos_timeGet>

	/*
	 * Function code.
	 */
	if (senderId == GOS_TIME_SECOND_ELAPSED_SENDER_ID && printRequired == GOS_TRUE)
 8024394:	88fb      	ldrh	r3, [r7, #6]
 8024396:	2b00      	cmp	r3, #0
 8024398:	d119      	bne.n	80243ce <APP_SecondElapsedSignalHandler+0x4e>
 802439a:	4b0f      	ldr	r3, [pc, #60]	; (80243d8 <APP_SecondElapsedSignalHandler+0x58>)
 802439c:	781b      	ldrb	r3, [r3, #0]
 802439e:	2b36      	cmp	r3, #54	; 0x36
 80243a0:	d115      	bne.n	80243ce <APP_SecondElapsedSignalHandler+0x4e>
		 * Print actual time to the log output.
		 */
		gos_traceTraceFormatted(
				GOS_TRUE,
				"Actual time: %04d/%02d/%02d %02d:%02d:%02d.%03d\r\n",
				sysTime.years,
 80243a2:	8abb      	ldrh	r3, [r7, #20]
		gos_traceTraceFormatted(
 80243a4:	461d      	mov	r5, r3
				sysTime.months,
 80243a6:	7cfb      	ldrb	r3, [r7, #19]
		gos_traceTraceFormatted(
 80243a8:	461e      	mov	r6, r3
				sysTime.days,
 80243aa:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80243ae:	b29b      	uxth	r3, r3
				sysTime.hours,
 80243b0:	7c3a      	ldrb	r2, [r7, #16]
				sysTime.minutes,
 80243b2:	7bf9      	ldrb	r1, [r7, #15]
				sysTime.seconds,
 80243b4:	7bb8      	ldrb	r0, [r7, #14]
				sysTime.milliseconds
 80243b6:	89bc      	ldrh	r4, [r7, #12]
		gos_traceTraceFormatted(
 80243b8:	9404      	str	r4, [sp, #16]
 80243ba:	9003      	str	r0, [sp, #12]
 80243bc:	9102      	str	r1, [sp, #8]
 80243be:	9201      	str	r2, [sp, #4]
 80243c0:	9300      	str	r3, [sp, #0]
 80243c2:	4633      	mov	r3, r6
 80243c4:	462a      	mov	r2, r5
 80243c6:	4905      	ldr	r1, [pc, #20]	; (80243dc <APP_SecondElapsedSignalHandler+0x5c>)
 80243c8:	2036      	movs	r0, #54	; 0x36
 80243ca:	f01c fc01 	bl	8040bd0 <gos_traceTraceFormatted>
				);
	}
}
 80243ce:	bf00      	nop
 80243d0:	371c      	adds	r7, #28
 80243d2:	46bd      	mov	sp, r7
 80243d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80243d6:	bf00      	nop
 80243d8:	200012b6 	.word	0x200012b6
 80243dc:	08047248 	.word	0x08047248

080243e0 <APP_ButtonPressedSignalHandler>:

/*
 * Function: APP_ButtonPressedSignalHandler
 */
GOS_STATIC void_t APP_ButtonPressedSignalHandler (gos_signalSenderId_t senderId)
{
 80243e0:	b480      	push	{r7}
 80243e2:	b083      	sub	sp, #12
 80243e4:	af00      	add	r7, sp, #0
 80243e6:	4603      	mov	r3, r0
 80243e8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Function code.
	 */
	if (senderId == BUTTON_PRESSED_SIGNAL_SUSPEND)
 80243ea:	88fb      	ldrh	r3, [r7, #6]
 80243ec:	2b00      	cmp	r3, #0
 80243ee:	d103      	bne.n	80243f8 <APP_ButtonPressedSignalHandler+0x18>
	{
		printRequired = GOS_FALSE;
 80243f0:	4b06      	ldr	r3, [pc, #24]	; (802440c <APP_ButtonPressedSignalHandler+0x2c>)
 80243f2:	2249      	movs	r2, #73	; 0x49
 80243f4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		printRequired = GOS_TRUE;
	}
}
 80243f6:	e002      	b.n	80243fe <APP_ButtonPressedSignalHandler+0x1e>
		printRequired = GOS_TRUE;
 80243f8:	4b04      	ldr	r3, [pc, #16]	; (802440c <APP_ButtonPressedSignalHandler+0x2c>)
 80243fa:	2236      	movs	r2, #54	; 0x36
 80243fc:	701a      	strb	r2, [r3, #0]
}
 80243fe:	bf00      	nop
 8024400:	370c      	adds	r7, #12
 8024402:	46bd      	mov	sp, r7
 8024404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024408:	4770      	bx	lr
 802440a:	bf00      	nop
 802440c:	200012b6 	.word	0x200012b6

08024410 <APP_TimeSyncMessageReceived>:

GOS_STATIC void_t APP_TimeSyncMessageReceived (void_t)
{
 8024410:	b580      	push	{r7, lr}
 8024412:	af00      	add	r7, sp, #0
	rtc_driver_set_time(&timeSyncMsg.requestedTime, 0);
 8024414:	2100      	movs	r1, #0
 8024416:	4802      	ldr	r0, [pc, #8]	; (8024420 <APP_TimeSyncMessageReceived+0x10>)
 8024418:	f002 f9f0 	bl	80267fc <rtc_driver_set_time>
}
 802441c:	bf00      	nop
 802441e:	bd80      	pop	{r7, pc}
 8024420:	20005548 	.word	0x20005548

08024424 <APP_TimedInit>:
	/* External task ID	*/
	/* Privilege level	*/	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGE_USER
};

gos_result_t APP_TimedInit (void_t)
{
 8024424:	b580      	push	{r7, lr}
 8024426:	b082      	sub	sp, #8
 8024428:	af00      	add	r7, sp, #0
	gos_result_t timedInitResult = GOS_SUCCESS;
 802442a:	2355      	movs	r3, #85	; 0x55
 802442c:	71fb      	strb	r3, [r7, #7]

	timedInitResult &= gos_taskRegister(&timedTaskDesc, NULL);
 802442e:	2100      	movs	r1, #0
 8024430:	4808      	ldr	r0, [pc, #32]	; (8024454 <APP_TimedInit+0x30>)
 8024432:	f017 f97b 	bl	803b72c <gos_taskRegister>
 8024436:	4603      	mov	r3, r0
 8024438:	461a      	mov	r2, r3
 802443a:	79fb      	ldrb	r3, [r7, #7]
 802443c:	4013      	ands	r3, r2
 802443e:	71fb      	strb	r3, [r7, #7]

	if (timedInitResult != GOS_SUCCESS)
 8024440:	79fb      	ldrb	r3, [r7, #7]
 8024442:	2b55      	cmp	r3, #85	; 0x55
 8024444:	d001      	beq.n	802444a <APP_TimedInit+0x26>
	{
		timedInitResult = GOS_ERROR;
 8024446:	23ae      	movs	r3, #174	; 0xae
 8024448:	71fb      	strb	r3, [r7, #7]
	}

	return timedInitResult;
 802444a:	79fb      	ldrb	r3, [r7, #7]
}
 802444c:	4618      	mov	r0, r3
 802444e:	3708      	adds	r7, #8
 8024450:	46bd      	mov	sp, r7
 8024452:	bd80      	pop	{r7, pc}
 8024454:	20001334 	.word	0x20001334

08024458 <APP_TimedTask>:

/*
 * Function: APP_TimedTask
 */
GOS_STATIC void_t APP_TimedTask (void_t)
{
 8024458:	b580      	push	{r7, lr}
 802445a:	af00      	add	r7, sp, #0
	/*
	 * Function code.
	 */
	gos_signalSubscribe(buttonPressedSignal, APP_ButtonPressedSignalHandler, GOS_PRIV_TASK_MANIPULATE);
 802445c:	4b08      	ldr	r3, [pc, #32]	; (8024480 <APP_TimedTask+0x28>)
 802445e:	781b      	ldrb	r3, [r3, #0]
 8024460:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8024464:	4907      	ldr	r1, [pc, #28]	; (8024484 <APP_TimedTask+0x2c>)
 8024466:	4618      	mov	r0, r3
 8024468:	f01b f932 	bl	803f6d0 <gos_signalSubscribe>

	for (;;)
	{
		gos_traceTrace(GOS_TRUE, "Timed task called!\r\n");
 802446c:	4906      	ldr	r1, [pc, #24]	; (8024488 <APP_TimedTask+0x30>)
 802446e:	2036      	movs	r0, #54	; 0x36
 8024470:	f01c fa92 	bl	8040998 <gos_traceTrace>
		gos_taskSleep(TIMED_TASK_PERIOD);
 8024474:	f240 5014 	movw	r0, #1300	; 0x514
 8024478:	f017 faea 	bl	803ba50 <gos_taskSleep>
		gos_traceTrace(GOS_TRUE, "Timed task called!\r\n");
 802447c:	e7f6      	b.n	802446c <APP_TimedTask+0x14>
 802447e:	bf00      	nop
 8024480:	200036e8 	.word	0x200036e8
 8024484:	0802448d 	.word	0x0802448d
 8024488:	0804727c 	.word	0x0804727c

0802448c <APP_ButtonPressedSignalHandler>:

/*
 * Function: APP_ButtonPressedSignalHandler
 */
GOS_STATIC void_t APP_ButtonPressedSignalHandler (gos_signalSenderId_t senderId)
{
 802448c:	b580      	push	{r7, lr}
 802448e:	b082      	sub	sp, #8
 8024490:	af00      	add	r7, sp, #0
 8024492:	4603      	mov	r3, r0
 8024494:	80fb      	strh	r3, [r7, #6]
	/*
	 * Function code.
	 */
	if (senderId == BUTTON_PRESSED_SIGNAL_SUSPEND)
 8024496:	88fb      	ldrh	r3, [r7, #6]
 8024498:	2b00      	cmp	r3, #0
 802449a:	d105      	bne.n	80244a8 <APP_ButtonPressedSignalHandler+0x1c>
	{
		gos_taskSuspend(timedTaskDesc.taskId);
 802449c:	4b07      	ldr	r3, [pc, #28]	; (80244bc <APP_ButtonPressedSignalHandler+0x30>)
 802449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80244a0:	4618      	mov	r0, r3
 80244a2:	f017 fc21 	bl	803bce8 <gos_taskSuspend>
	}
	else
	{
		gos_taskResume(timedTaskDesc.taskId);
	}
}
 80244a6:	e004      	b.n	80244b2 <APP_ButtonPressedSignalHandler+0x26>
		gos_taskResume(timedTaskDesc.taskId);
 80244a8:	4b04      	ldr	r3, [pc, #16]	; (80244bc <APP_ButtonPressedSignalHandler+0x30>)
 80244aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80244ac:	4618      	mov	r0, r3
 80244ae:	f017 fd3d 	bl	803bf2c <gos_taskResume>
}
 80244b2:	bf00      	nop
 80244b4:	3708      	adds	r7, #8
 80244b6:	46bd      	mov	sp, r7
 80244b8:	bd80      	pop	{r7, pc}
 80244ba:	bf00      	nop
 80244bc:	20001334 	.word	0x20001334

080244c0 <BSP_ADC_HandlerInit>:
	.taskStackSize      = 0x200,
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER
};

gos_result_t BSP_ADC_HandlerInit (void_t)
{
 80244c0:	b580      	push	{r7, lr}
 80244c2:	af00      	add	r7, sp, #0
	return gos_taskRegister(&adcHandlerTaskDesc, NULL);
 80244c4:	2100      	movs	r1, #0
 80244c6:	4803      	ldr	r0, [pc, #12]	; (80244d4 <BSP_ADC_HandlerInit+0x14>)
 80244c8:	f017 f930 	bl	803b72c <gos_taskRegister>
 80244cc:	4603      	mov	r3, r0
}
 80244ce:	4618      	mov	r0, r3
 80244d0:	bd80      	pop	{r7, pc}
 80244d2:	bf00      	nop
 80244d4:	200013a0 	.word	0x200013a0

080244d8 <BSP_ADC_HandlerGetValue>:

gos_result_t BSP_ADC_HandlerGetValue (u16_t* value)
{
 80244d8:	b480      	push	{r7}
 80244da:	b085      	sub	sp, #20
 80244dc:	af00      	add	r7, sp, #0
 80244de:	6078      	str	r0, [r7, #4]
	gos_result_t getValueResult = GOS_ERROR;
 80244e0:	23ae      	movs	r3, #174	; 0xae
 80244e2:	73fb      	strb	r3, [r7, #15]

	if (value != NULL)
 80244e4:	687b      	ldr	r3, [r7, #4]
 80244e6:	2b00      	cmp	r3, #0
 80244e8:	d005      	beq.n	80244f6 <BSP_ADC_HandlerGetValue+0x1e>
	{
		*value = adcValue;
 80244ea:	4b06      	ldr	r3, [pc, #24]	; (8024504 <BSP_ADC_HandlerGetValue+0x2c>)
 80244ec:	881a      	ldrh	r2, [r3, #0]
 80244ee:	687b      	ldr	r3, [r7, #4]
 80244f0:	801a      	strh	r2, [r3, #0]
		getValueResult = GOS_SUCCESS;
 80244f2:	2355      	movs	r3, #85	; 0x55
 80244f4:	73fb      	strb	r3, [r7, #15]
	}

	return getValueResult;
 80244f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80244f8:	4618      	mov	r0, r3
 80244fa:	3714      	adds	r7, #20
 80244fc:	46bd      	mov	sp, r7
 80244fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024502:	4770      	bx	lr
 8024504:	20005552 	.word	0x20005552

08024508 <BSP_ADC_HandlerTask>:

GOS_STATIC void_t BSP_ADC_HandlerTask (void_t)
{
 8024508:	b580      	push	{r7, lr}
 802450a:	af00      	add	r7, sp, #0
	for (;;)
	{
		//adc_driver_get_value(&adcValue);
		drv_adcGetValueBlocking(DRV_ADC_INSTANCE_1, &adcValue, 2000u, 200);
 802450c:	23c8      	movs	r3, #200	; 0xc8
 802450e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8024512:	4904      	ldr	r1, [pc, #16]	; (8024524 <BSP_ADC_HandlerTask+0x1c>)
 8024514:	2000      	movs	r0, #0
 8024516:	f010 fec3 	bl	80352a0 <drv_adcGetValueBlocking>
		gos_taskSleep(250);
 802451a:	20fa      	movs	r0, #250	; 0xfa
 802451c:	f017 fa98 	bl	803ba50 <gos_taskSleep>
		drv_adcGetValueBlocking(DRV_ADC_INSTANCE_1, &adcValue, 2000u, 200);
 8024520:	e7f4      	b.n	802450c <BSP_ADC_HandlerTask+0x4>
 8024522:	bf00      	nop
 8024524:	20005552 	.word	0x20005552

08024528 <bsp_ioRegisterXButtonCallback>:

GOS_STATIC drv_gpioItCallback_t cfgButton1Callback;
GOS_STATIC drv_gpioItCallback_t cfgUserButtonCallback;

gos_result_t bsp_ioRegisterXButtonCallback (drv_gpioItCallback_t callback)
{
 8024528:	b480      	push	{r7}
 802452a:	b083      	sub	sp, #12
 802452c:	af00      	add	r7, sp, #0
 802452e:	6078      	str	r0, [r7, #4]
	if (callback != NULL && cfgButton1Callback == NULL)
 8024530:	687b      	ldr	r3, [r7, #4]
 8024532:	2b00      	cmp	r3, #0
 8024534:	d008      	beq.n	8024548 <bsp_ioRegisterXButtonCallback+0x20>
 8024536:	4b08      	ldr	r3, [pc, #32]	; (8024558 <bsp_ioRegisterXButtonCallback+0x30>)
 8024538:	681b      	ldr	r3, [r3, #0]
 802453a:	2b00      	cmp	r3, #0
 802453c:	d104      	bne.n	8024548 <bsp_ioRegisterXButtonCallback+0x20>
	{
		cfgButton1Callback = callback;
 802453e:	4a06      	ldr	r2, [pc, #24]	; (8024558 <bsp_ioRegisterXButtonCallback+0x30>)
 8024540:	687b      	ldr	r3, [r7, #4]
 8024542:	6013      	str	r3, [r2, #0]
		return GOS_SUCCESS;
 8024544:	2355      	movs	r3, #85	; 0x55
 8024546:	e000      	b.n	802454a <bsp_ioRegisterXButtonCallback+0x22>
	}
	else
		return GOS_ERROR;
 8024548:	23ae      	movs	r3, #174	; 0xae
}
 802454a:	4618      	mov	r0, r3
 802454c:	370c      	adds	r7, #12
 802454e:	46bd      	mov	sp, r7
 8024550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024554:	4770      	bx	lr
 8024556:	bf00      	nop
 8024558:	20005554 	.word	0x20005554

0802455c <bsp_ioRegisterUserButtonCallback>:

gos_result_t bsp_ioRegisterUserButtonCallback (drv_gpioItCallback_t callback)
{
 802455c:	b480      	push	{r7}
 802455e:	b083      	sub	sp, #12
 8024560:	af00      	add	r7, sp, #0
 8024562:	6078      	str	r0, [r7, #4]
	if (callback != NULL && cfgUserButtonCallback == NULL)
 8024564:	687b      	ldr	r3, [r7, #4]
 8024566:	2b00      	cmp	r3, #0
 8024568:	d008      	beq.n	802457c <bsp_ioRegisterUserButtonCallback+0x20>
 802456a:	4b08      	ldr	r3, [pc, #32]	; (802458c <bsp_ioRegisterUserButtonCallback+0x30>)
 802456c:	681b      	ldr	r3, [r3, #0]
 802456e:	2b00      	cmp	r3, #0
 8024570:	d104      	bne.n	802457c <bsp_ioRegisterUserButtonCallback+0x20>
	{
		cfgUserButtonCallback = callback;
 8024572:	4a06      	ldr	r2, [pc, #24]	; (802458c <bsp_ioRegisterUserButtonCallback+0x30>)
 8024574:	687b      	ldr	r3, [r7, #4]
 8024576:	6013      	str	r3, [r2, #0]
		return GOS_SUCCESS;
 8024578:	2355      	movs	r3, #85	; 0x55
 802457a:	e000      	b.n	802457e <bsp_ioRegisterUserButtonCallback+0x22>
	}
	else
		return GOS_ERROR;
 802457c:	23ae      	movs	r3, #174	; 0xae
}
 802457e:	4618      	mov	r0, r3
 8024580:	370c      	adds	r7, #12
 8024582:	46bd      	mov	sp, r7
 8024584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024588:	4770      	bx	lr
 802458a:	bf00      	nop
 802458c:	20005558 	.word	0x20005558

08024590 <gpio_cfgButton1Callback>:

void_t gpio_cfgButton1Callback (void_t)
{
 8024590:	b580      	push	{r7, lr}
 8024592:	af00      	add	r7, sp, #0
	if (cfgButton1Callback != NULL)
 8024594:	4b04      	ldr	r3, [pc, #16]	; (80245a8 <gpio_cfgButton1Callback+0x18>)
 8024596:	681b      	ldr	r3, [r3, #0]
 8024598:	2b00      	cmp	r3, #0
 802459a:	d002      	beq.n	80245a2 <gpio_cfgButton1Callback+0x12>
	{
		cfgButton1Callback();
 802459c:	4b02      	ldr	r3, [pc, #8]	; (80245a8 <gpio_cfgButton1Callback+0x18>)
 802459e:	681b      	ldr	r3, [r3, #0]
 80245a0:	4798      	blx	r3
	}
}
 80245a2:	bf00      	nop
 80245a4:	bd80      	pop	{r7, pc}
 80245a6:	bf00      	nop
 80245a8:	20005554 	.word	0x20005554

080245ac <gpio_cfgUserButtonCallback>:

void_t gpio_cfgUserButtonCallback (void_t)
{
 80245ac:	b580      	push	{r7, lr}
 80245ae:	af00      	add	r7, sp, #0
	if (cfgUserButtonCallback != NULL)
 80245b0:	4b04      	ldr	r3, [pc, #16]	; (80245c4 <gpio_cfgUserButtonCallback+0x18>)
 80245b2:	681b      	ldr	r3, [r3, #0]
 80245b4:	2b00      	cmp	r3, #0
 80245b6:	d002      	beq.n	80245be <gpio_cfgUserButtonCallback+0x12>
	{
		cfgUserButtonCallback();
 80245b8:	4b02      	ldr	r3, [pc, #8]	; (80245c4 <gpio_cfgUserButtonCallback+0x18>)
 80245ba:	681b      	ldr	r3, [r3, #0]
 80245bc:	4798      	blx	r3
	}
}
 80245be:	bf00      	nop
 80245c0:	bd80      	pop	{r7, pc}
 80245c2:	bf00      	nop
 80245c4:	20005558 	.word	0x20005558

080245c8 <BSP_LCD_HandlerInit>:
	.taskPriority = 22,
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER
};

gos_result_t BSP_LCD_HandlerInit (void_t)
{
 80245c8:	b580      	push	{r7, lr}
 80245ca:	b082      	sub	sp, #8
 80245cc:	af00      	add	r7, sp, #0
	gos_result_t initResult = GOS_SUCCESS;
 80245ce:	2355      	movs	r3, #85	; 0x55
 80245d0:	71fb      	strb	r3, [r7, #7]

	initResult &= gos_mutexInit(&lcdMutex);
 80245d2:	480d      	ldr	r0, [pc, #52]	; (8024608 <BSP_LCD_HandlerInit+0x40>)
 80245d4:	f019 fe96 	bl	803e304 <gos_mutexInit>
 80245d8:	4603      	mov	r3, r0
 80245da:	461a      	mov	r2, r3
 80245dc:	79fb      	ldrb	r3, [r7, #7]
 80245de:	4013      	ands	r3, r2
 80245e0:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_taskRegister(&lcdHandlerTaskDesc, NULL);
 80245e2:	2100      	movs	r1, #0
 80245e4:	4809      	ldr	r0, [pc, #36]	; (802460c <BSP_LCD_HandlerInit+0x44>)
 80245e6:	f017 f8a1 	bl	803b72c <gos_taskRegister>
 80245ea:	4603      	mov	r3, r0
 80245ec:	461a      	mov	r2, r3
 80245ee:	79fb      	ldrb	r3, [r7, #7]
 80245f0:	4013      	ands	r3, r2
 80245f2:	71fb      	strb	r3, [r7, #7]

	if (initResult != GOS_SUCCESS)
 80245f4:	79fb      	ldrb	r3, [r7, #7]
 80245f6:	2b55      	cmp	r3, #85	; 0x55
 80245f8:	d001      	beq.n	80245fe <BSP_LCD_HandlerInit+0x36>
	{
		initResult = GOS_ERROR;
 80245fa:	23ae      	movs	r3, #174	; 0xae
 80245fc:	71fb      	strb	r3, [r7, #7]
	}

	return initResult;
 80245fe:	79fb      	ldrb	r3, [r7, #7]
}
 8024600:	4618      	mov	r0, r3
 8024602:	3708      	adds	r7, #8
 8024604:	46bd      	mov	sp, r7
 8024606:	bd80      	pop	{r7, pc}
 8024608:	20005784 	.word	0x20005784
 802460c:	2000140c 	.word	0x2000140c

08024610 <BSP_LCD_HandlerDisplayText>:

gos_result_t BSP_LCD_HandlerDisplayText (lcd_display_cfg_t* config,  const char_t* text, ...)
{
 8024610:	b40e      	push	{r1, r2, r3}
 8024612:	b580      	push	{r7, lr}
 8024614:	b085      	sub	sp, #20
 8024616:	af00      	add	r7, sp, #0
 8024618:	6078      	str	r0, [r7, #4]
	gos_result_t displayTextResult = GOS_ERROR;
 802461a:	23ae      	movs	r3, #174	; 0xae
 802461c:	73fb      	strb	r3, [r7, #15]
	va_list args;

	if (gos_mutexLock(&lcdMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 802461e:	f04f 31ff 	mov.w	r1, #4294967295
 8024622:	482e      	ldr	r0, [pc, #184]	; (80246dc <BSP_LCD_HandlerDisplayText+0xcc>)
 8024624:	f019 fe88 	bl	803e338 <gos_mutexLock>
 8024628:	4603      	mov	r3, r0
 802462a:	2b55      	cmp	r3, #85	; 0x55
 802462c:	d14b      	bne.n	80246c6 <BSP_LCD_HandlerDisplayText+0xb6>
	{
		if (config != NULL && text != NULL &&
 802462e:	687b      	ldr	r3, [r7, #4]
 8024630:	2b00      	cmp	r3, #0
 8024632:	d048      	beq.n	80246c6 <BSP_LCD_HandlerDisplayText+0xb6>
 8024634:	69fb      	ldr	r3, [r7, #28]
 8024636:	2b00      	cmp	r3, #0
 8024638:	d045      	beq.n	80246c6 <BSP_LCD_HandlerDisplayText+0xb6>
			config->line < 3 && config->blinkStartIndex < 16 &&
 802463a:	687b      	ldr	r3, [r7, #4]
 802463c:	781b      	ldrb	r3, [r3, #0]
		if (config != NULL && text != NULL &&
 802463e:	2b02      	cmp	r3, #2
 8024640:	d841      	bhi.n	80246c6 <BSP_LCD_HandlerDisplayText+0xb6>
			config->line < 3 && config->blinkStartIndex < 16 &&
 8024642:	687b      	ldr	r3, [r7, #4]
 8024644:	7c1b      	ldrb	r3, [r3, #16]
 8024646:	2b0f      	cmp	r3, #15
 8024648:	d83d      	bhi.n	80246c6 <BSP_LCD_HandlerDisplayText+0xb6>
			config->blinkEndIndex < 16 && config->blinkStartIndex < config->blinkEndIndex)
 802464a:	687b      	ldr	r3, [r7, #4]
 802464c:	7c5b      	ldrb	r3, [r3, #17]
			config->line < 3 && config->blinkStartIndex < 16 &&
 802464e:	2b0f      	cmp	r3, #15
 8024650:	d839      	bhi.n	80246c6 <BSP_LCD_HandlerDisplayText+0xb6>
			config->blinkEndIndex < 16 && config->blinkStartIndex < config->blinkEndIndex)
 8024652:	687b      	ldr	r3, [r7, #4]
 8024654:	7c1a      	ldrb	r2, [r3, #16]
 8024656:	687b      	ldr	r3, [r7, #4]
 8024658:	7c5b      	ldrb	r3, [r3, #17]
 802465a:	429a      	cmp	r2, r3
 802465c:	d233      	bcs.n	80246c6 <BSP_LCD_HandlerDisplayText+0xb6>
		{
			va_start(args, text);
 802465e:	f107 0320 	add.w	r3, r7, #32
 8024662:	60bb      	str	r3, [r7, #8]

			if (config->line == 0)
 8024664:	687b      	ldr	r3, [r7, #4]
 8024666:	781b      	ldrb	r3, [r3, #0]
 8024668:	2b00      	cmp	r3, #0
 802466a:	d115      	bne.n	8024698 <BSP_LCD_HandlerDisplayText+0x88>
			{
				memcpy((void*)&firstLineConfig, (const void*)config, sizeof(*config));
 802466c:	2214      	movs	r2, #20
 802466e:	6879      	ldr	r1, [r7, #4]
 8024670:	481b      	ldr	r0, [pc, #108]	; (80246e0 <BSP_LCD_HandlerDisplayText+0xd0>)
 8024672:	f01e fb62 	bl	8042d3a <memcpy>
				vsprintf(firstLine, text, args);
 8024676:	68ba      	ldr	r2, [r7, #8]
 8024678:	69f9      	ldr	r1, [r7, #28]
 802467a:	481a      	ldr	r0, [pc, #104]	; (80246e4 <BSP_LCD_HandlerDisplayText+0xd4>)
 802467c:	f01e faba 	bl	8042bf4 <vsiprintf>
				firstLineShiftCounter = 0u;
 8024680:	4b19      	ldr	r3, [pc, #100]	; (80246e8 <BSP_LCD_HandlerDisplayText+0xd8>)
 8024682:	2200      	movs	r2, #0
 8024684:	801a      	strh	r2, [r3, #0]
				if (firstLineConfig.displayMode == LCD_DISPLAY_NORMAL)
 8024686:	4b16      	ldr	r3, [pc, #88]	; (80246e0 <BSP_LCD_HandlerDisplayText+0xd0>)
 8024688:	785b      	ldrb	r3, [r3, #1]
 802468a:	2b00      	cmp	r3, #0
 802468c:	d119      	bne.n	80246c2 <BSP_LCD_HandlerDisplayText+0xb2>
					lcd_driver_write_string(0, firstLine);
 802468e:	4915      	ldr	r1, [pc, #84]	; (80246e4 <BSP_LCD_HandlerDisplayText+0xd4>)
 8024690:	2000      	movs	r0, #0
 8024692:	f001 fd2b 	bl	80260ec <lcd_driver_write_string>
 8024696:	e014      	b.n	80246c2 <BSP_LCD_HandlerDisplayText+0xb2>
			}
			else
			{
				memcpy((void*)&secondLineConfig, (const void*)config, sizeof(*config));
 8024698:	2214      	movs	r2, #20
 802469a:	6879      	ldr	r1, [r7, #4]
 802469c:	4813      	ldr	r0, [pc, #76]	; (80246ec <BSP_LCD_HandlerDisplayText+0xdc>)
 802469e:	f01e fb4c 	bl	8042d3a <memcpy>
				vsprintf(secondLine, text, args);
 80246a2:	68ba      	ldr	r2, [r7, #8]
 80246a4:	69f9      	ldr	r1, [r7, #28]
 80246a6:	4812      	ldr	r0, [pc, #72]	; (80246f0 <BSP_LCD_HandlerDisplayText+0xe0>)
 80246a8:	f01e faa4 	bl	8042bf4 <vsiprintf>
				secondLineShiftCounter = 0u;
 80246ac:	4b11      	ldr	r3, [pc, #68]	; (80246f4 <BSP_LCD_HandlerDisplayText+0xe4>)
 80246ae:	2200      	movs	r2, #0
 80246b0:	801a      	strh	r2, [r3, #0]
				if (secondLineConfig.displayMode == LCD_DISPLAY_NORMAL)
 80246b2:	4b0e      	ldr	r3, [pc, #56]	; (80246ec <BSP_LCD_HandlerDisplayText+0xdc>)
 80246b4:	785b      	ldrb	r3, [r3, #1]
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	d103      	bne.n	80246c2 <BSP_LCD_HandlerDisplayText+0xb2>
					lcd_driver_write_string(1, secondLine);
 80246ba:	490d      	ldr	r1, [pc, #52]	; (80246f0 <BSP_LCD_HandlerDisplayText+0xe0>)
 80246bc:	2001      	movs	r0, #1
 80246be:	f001 fd15 	bl	80260ec <lcd_driver_write_string>
			}
			va_end(args);

			displayTextResult = GOS_SUCCESS;
 80246c2:	2355      	movs	r3, #85	; 0x55
 80246c4:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	(void_t) gos_mutexUnlock(&lcdMutex);
 80246c6:	4805      	ldr	r0, [pc, #20]	; (80246dc <BSP_LCD_HandlerDisplayText+0xcc>)
 80246c8:	f019 ff3c 	bl	803e544 <gos_mutexUnlock>

	return displayTextResult;
 80246cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80246ce:	4618      	mov	r0, r3
 80246d0:	3714      	adds	r7, #20
 80246d2:	46bd      	mov	sp, r7
 80246d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80246d8:	b003      	add	sp, #12
 80246da:	4770      	bx	lr
 80246dc:	20005784 	.word	0x20005784
 80246e0:	2000575c 	.word	0x2000575c
 80246e4:	2000555c 	.word	0x2000555c
 80246e8:	20005788 	.word	0x20005788
 80246ec:	20005770 	.word	0x20005770
 80246f0:	200055dc 	.word	0x200055dc
 80246f4:	2000578a 	.word	0x2000578a

080246f8 <BSP_LCD_HandlerWriteNextString>:

gos_result_t BSP_LCD_HandlerWriteNextString (u8_t line, char_t* str)
{
 80246f8:	b580      	push	{r7, lr}
 80246fa:	b084      	sub	sp, #16
 80246fc:	af00      	add	r7, sp, #0
 80246fe:	4603      	mov	r3, r0
 8024700:	6039      	str	r1, [r7, #0]
 8024702:	71fb      	strb	r3, [r7, #7]
	gos_result_t writeStringResult = GOS_ERROR;
 8024704:	23ae      	movs	r3, #174	; 0xae
 8024706:	73fb      	strb	r3, [r7, #15]
	u8_t lineLength = 0u;
 8024708:	2300      	movs	r3, #0
 802470a:	73bb      	strb	r3, [r7, #14]

	if (line == 0)
 802470c:	79fb      	ldrb	r3, [r7, #7]
 802470e:	2b00      	cmp	r3, #0
 8024710:	d112      	bne.n	8024738 <BSP_LCD_HandlerWriteNextString+0x40>
	{
		lineLength = strlen(firstLine);
 8024712:	4816      	ldr	r0, [pc, #88]	; (802476c <BSP_LCD_HandlerWriteNextString+0x74>)
 8024714:	f7fb fddc 	bl	80202d0 <strlen>
 8024718:	4603      	mov	r3, r0
 802471a:	73bb      	strb	r3, [r7, #14]
		strcpy((char_t*)(firstLine + lineLength), str);
 802471c:	7bbb      	ldrb	r3, [r7, #14]
 802471e:	4a13      	ldr	r2, [pc, #76]	; (802476c <BSP_LCD_HandlerWriteNextString+0x74>)
 8024720:	4413      	add	r3, r2
 8024722:	6839      	ldr	r1, [r7, #0]
 8024724:	4618      	mov	r0, r3
 8024726:	f01e fb00 	bl	8042d2a <strcpy>
		writeStringResult = lcd_driver_write_string(0, firstLine);
 802472a:	4910      	ldr	r1, [pc, #64]	; (802476c <BSP_LCD_HandlerWriteNextString+0x74>)
 802472c:	2000      	movs	r0, #0
 802472e:	f001 fcdd 	bl	80260ec <lcd_driver_write_string>
 8024732:	4603      	mov	r3, r0
 8024734:	73fb      	strb	r3, [r7, #15]
 8024736:	e014      	b.n	8024762 <BSP_LCD_HandlerWriteNextString+0x6a>
	}
	else if (line == 1)
 8024738:	79fb      	ldrb	r3, [r7, #7]
 802473a:	2b01      	cmp	r3, #1
 802473c:	d111      	bne.n	8024762 <BSP_LCD_HandlerWriteNextString+0x6a>
	{
		lineLength = strlen(secondLine);
 802473e:	480c      	ldr	r0, [pc, #48]	; (8024770 <BSP_LCD_HandlerWriteNextString+0x78>)
 8024740:	f7fb fdc6 	bl	80202d0 <strlen>
 8024744:	4603      	mov	r3, r0
 8024746:	73bb      	strb	r3, [r7, #14]
		strcpy((char_t*)(secondLine + lineLength), str);
 8024748:	7bbb      	ldrb	r3, [r7, #14]
 802474a:	4a09      	ldr	r2, [pc, #36]	; (8024770 <BSP_LCD_HandlerWriteNextString+0x78>)
 802474c:	4413      	add	r3, r2
 802474e:	6839      	ldr	r1, [r7, #0]
 8024750:	4618      	mov	r0, r3
 8024752:	f01e faea 	bl	8042d2a <strcpy>

		writeStringResult = lcd_driver_write_string(1, secondLine);
 8024756:	4906      	ldr	r1, [pc, #24]	; (8024770 <BSP_LCD_HandlerWriteNextString+0x78>)
 8024758:	2001      	movs	r0, #1
 802475a:	f001 fcc7 	bl	80260ec <lcd_driver_write_string>
 802475e:	4603      	mov	r3, r0
 8024760:	73fb      	strb	r3, [r7, #15]
	}

	return writeStringResult;
 8024762:	7bfb      	ldrb	r3, [r7, #15]
}
 8024764:	4618      	mov	r0, r3
 8024766:	3710      	adds	r7, #16
 8024768:	46bd      	mov	sp, r7
 802476a:	bd80      	pop	{r7, pc}
 802476c:	2000555c 	.word	0x2000555c
 8024770:	200055dc 	.word	0x200055dc

08024774 <BSP_LCD_HandlerTask>:

GOS_STATIC void_t BSP_LCD_HandlerTask (void_t)
{
 8024774:	b590      	push	{r4, r7, lr}
 8024776:	b083      	sub	sp, #12
 8024778:	af00      	add	r7, sp, #0
	for (;;)
	{
		switch (firstLineConfig.displayMode)
 802477a:	4ba0      	ldr	r3, [pc, #640]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 802477c:	785b      	ldrb	r3, [r3, #1]
 802477e:	2b07      	cmp	r3, #7
 8024780:	f200 80d3 	bhi.w	802492a <BSP_LCD_HandlerTask+0x1b6>
 8024784:	a201      	add	r2, pc, #4	; (adr r2, 802478c <BSP_LCD_HandlerTask+0x18>)
 8024786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802478a:	bf00      	nop
 802478c:	0802492b 	.word	0x0802492b
 8024790:	0802486f 	.word	0x0802486f
 8024794:	0802486f 	.word	0x0802486f
 8024798:	08024839 	.word	0x08024839
 802479c:	08024839 	.word	0x08024839
 80247a0:	080247ad 	.word	0x080247ad
 80247a4:	080248c9 	.word	0x080248c9
 80247a8:	08024905 	.word	0x08024905
			{
				break;
			}
			case LCD_DISPLAY_BLINK:
			{
				if ((gos_kernelGetSysTicks() - firstLineConfig.lastTick) > firstLineConfig.periodMs)
 80247ac:	f015 ff62 	bl	803a674 <gos_kernelGetSysTicks>
 80247b0:	4602      	mov	r2, r0
 80247b2:	4b92      	ldr	r3, [pc, #584]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80247b4:	689b      	ldr	r3, [r3, #8]
 80247b6:	1ad2      	subs	r2, r2, r3
 80247b8:	4b90      	ldr	r3, [pc, #576]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80247ba:	685b      	ldr	r3, [r3, #4]
 80247bc:	429a      	cmp	r2, r3
 80247be:	f240 80b6 	bls.w	802492e <BSP_LCD_HandlerTask+0x1ba>
				{
					firstLineConfig.lastTick = gos_kernelGetSysTicks();
 80247c2:	f015 ff57 	bl	803a674 <gos_kernelGetSysTicks>
 80247c6:	4603      	mov	r3, r0
 80247c8:	4a8c      	ldr	r2, [pc, #560]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80247ca:	6093      	str	r3, [r2, #8]
					if (firstLineConfig.blinkState)
 80247cc:	4b8b      	ldr	r3, [pc, #556]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80247ce:	7cdb      	ldrb	r3, [r3, #19]
 80247d0:	2b00      	cmp	r3, #0
 80247d2:	d01e      	beq.n	8024812 <BSP_LCD_HandlerTask+0x9e>
					{
						strcpy(firstLineTempBuffer, firstLine);
 80247d4:	498a      	ldr	r1, [pc, #552]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 80247d6:	488b      	ldr	r0, [pc, #556]	; (8024a04 <BSP_LCD_HandlerTask+0x290>)
 80247d8:	f01e faa7 	bl	8042d2a <strcpy>

						for (u8_t index = firstLineConfig.blinkStartIndex; index < firstLineConfig.blinkEndIndex; index++)
 80247dc:	4b87      	ldr	r3, [pc, #540]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80247de:	7c1b      	ldrb	r3, [r3, #16]
 80247e0:	71fb      	strb	r3, [r7, #7]
 80247e2:	e006      	b.n	80247f2 <BSP_LCD_HandlerTask+0x7e>
						{
							firstLine[index] = ' ';
 80247e4:	79fb      	ldrb	r3, [r7, #7]
 80247e6:	4a86      	ldr	r2, [pc, #536]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 80247e8:	2120      	movs	r1, #32
 80247ea:	54d1      	strb	r1, [r2, r3]
						for (u8_t index = firstLineConfig.blinkStartIndex; index < firstLineConfig.blinkEndIndex; index++)
 80247ec:	79fb      	ldrb	r3, [r7, #7]
 80247ee:	3301      	adds	r3, #1
 80247f0:	71fb      	strb	r3, [r7, #7]
 80247f2:	4b82      	ldr	r3, [pc, #520]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80247f4:	7c5b      	ldrb	r3, [r3, #17]
 80247f6:	79fa      	ldrb	r2, [r7, #7]
 80247f8:	429a      	cmp	r2, r3
 80247fa:	d3f3      	bcc.n	80247e4 <BSP_LCD_HandlerTask+0x70>
						}

						firstLineConfig.blinkState = !firstLineConfig.blinkState;
 80247fc:	4b7f      	ldr	r3, [pc, #508]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80247fe:	7cdb      	ldrb	r3, [r3, #19]
 8024800:	2b00      	cmp	r3, #0
 8024802:	bf0c      	ite	eq
 8024804:	2301      	moveq	r3, #1
 8024806:	2300      	movne	r3, #0
 8024808:	b2db      	uxtb	r3, r3
 802480a:	461a      	mov	r2, r3
 802480c:	4b7b      	ldr	r3, [pc, #492]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 802480e:	74da      	strb	r2, [r3, #19]
 8024810:	e00d      	b.n	802482e <BSP_LCD_HandlerTask+0xba>
					}
					else
					{
						strcpy(firstLine, firstLineTempBuffer);
 8024812:	497c      	ldr	r1, [pc, #496]	; (8024a04 <BSP_LCD_HandlerTask+0x290>)
 8024814:	487a      	ldr	r0, [pc, #488]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 8024816:	f01e fa88 	bl	8042d2a <strcpy>
						firstLineConfig.blinkState = !firstLineConfig.blinkState;
 802481a:	4b78      	ldr	r3, [pc, #480]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 802481c:	7cdb      	ldrb	r3, [r3, #19]
 802481e:	2b00      	cmp	r3, #0
 8024820:	bf0c      	ite	eq
 8024822:	2301      	moveq	r3, #1
 8024824:	2300      	movne	r3, #0
 8024826:	b2db      	uxtb	r3, r3
 8024828:	461a      	mov	r2, r3
 802482a:	4b74      	ldr	r3, [pc, #464]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 802482c:	74da      	strb	r2, [r3, #19]
					}

					lcd_driver_write_string(0, firstLine);
 802482e:	4974      	ldr	r1, [pc, #464]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 8024830:	2000      	movs	r0, #0
 8024832:	f001 fc5b 	bl	80260ec <lcd_driver_write_string>
				}
				break;
 8024836:	e07a      	b.n	802492e <BSP_LCD_HandlerTask+0x1ba>
			}
			case LCD_DISPLAY_CYCLIC_RIGHT:
			case LCD_DISPLAY_CYCLIC_LEFT:
			{
				if ((gos_kernelGetSysTicks() - firstLineConfig.lastTick) > firstLineConfig.periodMs)
 8024838:	f015 ff1c 	bl	803a674 <gos_kernelGetSysTicks>
 802483c:	4602      	mov	r2, r0
 802483e:	4b6f      	ldr	r3, [pc, #444]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 8024840:	689b      	ldr	r3, [r3, #8]
 8024842:	1ad2      	subs	r2, r2, r3
 8024844:	4b6d      	ldr	r3, [pc, #436]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 8024846:	685b      	ldr	r3, [r3, #4]
 8024848:	429a      	cmp	r2, r3
 802484a:	d972      	bls.n	8024932 <BSP_LCD_HandlerTask+0x1be>
				{
					firstLineConfig.lastTick = gos_kernelGetSysTicks();
 802484c:	f015 ff12 	bl	803a674 <gos_kernelGetSysTicks>
 8024850:	4603      	mov	r3, r0
 8024852:	4a6a      	ldr	r2, [pc, #424]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 8024854:	6093      	str	r3, [r2, #8]
					BSP_LCD_HandlerShiftBuffer(firstLine, &firstLineShiftCounter, firstLineConfig.displayMode);
 8024856:	4b69      	ldr	r3, [pc, #420]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 8024858:	785b      	ldrb	r3, [r3, #1]
 802485a:	461a      	mov	r2, r3
 802485c:	496a      	ldr	r1, [pc, #424]	; (8024a08 <BSP_LCD_HandlerTask+0x294>)
 802485e:	4868      	ldr	r0, [pc, #416]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 8024860:	f000 f9b6 	bl	8024bd0 <BSP_LCD_HandlerShiftBuffer>
					lcd_driver_write_string(0, firstLine);
 8024864:	4966      	ldr	r1, [pc, #408]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 8024866:	2000      	movs	r0, #0
 8024868:	f001 fc40 	bl	80260ec <lcd_driver_write_string>
				}
				break;
 802486c:	e061      	b.n	8024932 <BSP_LCD_HandlerTask+0x1be>
			}
			case LCD_DISPLAY_SHIFT_RIGHT:
			case LCD_DISPLAY_SHIFT_LEFT:
			{
				if ((gos_kernelGetSysTicks() - firstLineConfig.lastTick) > firstLineConfig.periodMs)
 802486e:	f015 ff01 	bl	803a674 <gos_kernelGetSysTicks>
 8024872:	4602      	mov	r2, r0
 8024874:	4b61      	ldr	r3, [pc, #388]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 8024876:	689b      	ldr	r3, [r3, #8]
 8024878:	1ad2      	subs	r2, r2, r3
 802487a:	4b60      	ldr	r3, [pc, #384]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 802487c:	685b      	ldr	r3, [r3, #4]
 802487e:	429a      	cmp	r2, r3
 8024880:	d959      	bls.n	8024936 <BSP_LCD_HandlerTask+0x1c2>
				{
					firstLineConfig.lastTick = gos_kernelGetSysTicks();
 8024882:	f015 fef7 	bl	803a674 <gos_kernelGetSysTicks>
 8024886:	4603      	mov	r3, r0
 8024888:	4a5c      	ldr	r2, [pc, #368]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 802488a:	6093      	str	r3, [r2, #8]
					if (firstLineShiftCounter == strlen(firstLine) - 16u)
 802488c:	4b5e      	ldr	r3, [pc, #376]	; (8024a08 <BSP_LCD_HandlerTask+0x294>)
 802488e:	881b      	ldrh	r3, [r3, #0]
 8024890:	461c      	mov	r4, r3
 8024892:	485b      	ldr	r0, [pc, #364]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 8024894:	f7fb fd1c 	bl	80202d0 <strlen>
 8024898:	4603      	mov	r3, r0
 802489a:	3b10      	subs	r3, #16
 802489c:	429c      	cmp	r4, r3
 802489e:	d107      	bne.n	80248b0 <BSP_LCD_HandlerTask+0x13c>
					{
						firstLineConfig.originalDisplayMode = firstLineConfig.displayMode;
 80248a0:	4b56      	ldr	r3, [pc, #344]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80248a2:	785a      	ldrb	r2, [r3, #1]
 80248a4:	4b55      	ldr	r3, [pc, #340]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80248a6:	709a      	strb	r2, [r3, #2]
						firstLineConfig.displayMode = LCD_DISPLAY_SHIFT_WAIT_1500;
 80248a8:	4b54      	ldr	r3, [pc, #336]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80248aa:	2206      	movs	r2, #6
 80248ac:	705a      	strb	r2, [r3, #1]
					{
						BSP_LCD_HandlerShiftBuffer(firstLine, &firstLineShiftCounter, firstLineConfig.displayMode);
						lcd_driver_write_string(0, firstLine);
					}
				}
				break;
 80248ae:	e042      	b.n	8024936 <BSP_LCD_HandlerTask+0x1c2>
						BSP_LCD_HandlerShiftBuffer(firstLine, &firstLineShiftCounter, firstLineConfig.displayMode);
 80248b0:	4b52      	ldr	r3, [pc, #328]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80248b2:	785b      	ldrb	r3, [r3, #1]
 80248b4:	461a      	mov	r2, r3
 80248b6:	4954      	ldr	r1, [pc, #336]	; (8024a08 <BSP_LCD_HandlerTask+0x294>)
 80248b8:	4851      	ldr	r0, [pc, #324]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 80248ba:	f000 f989 	bl	8024bd0 <BSP_LCD_HandlerShiftBuffer>
						lcd_driver_write_string(0, firstLine);
 80248be:	4950      	ldr	r1, [pc, #320]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 80248c0:	2000      	movs	r0, #0
 80248c2:	f001 fc13 	bl	80260ec <lcd_driver_write_string>
				break;
 80248c6:	e036      	b.n	8024936 <BSP_LCD_HandlerTask+0x1c2>
			}
			case LCD_DISPLAY_SHIFT_WAIT_1500:
			{
				if ((gos_kernelGetSysTicks() - firstLineConfig.lastTick) > 1500)
 80248c8:	f015 fed4 	bl	803a674 <gos_kernelGetSysTicks>
 80248cc:	4602      	mov	r2, r0
 80248ce:	4b4b      	ldr	r3, [pc, #300]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80248d0:	689b      	ldr	r3, [r3, #8]
 80248d2:	1ad3      	subs	r3, r2, r3
 80248d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80248d8:	4293      	cmp	r3, r2
 80248da:	d92e      	bls.n	802493a <BSP_LCD_HandlerTask+0x1c6>
				{
					firstLineConfig.lastTick = gos_kernelGetSysTicks();
 80248dc:	f015 feca 	bl	803a674 <gos_kernelGetSysTicks>
 80248e0:	4603      	mov	r3, r0
 80248e2:	4a46      	ldr	r2, [pc, #280]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80248e4:	6093      	str	r3, [r2, #8]
					BSP_LCD_HandlerShiftReset(firstLine, &firstLineShiftCounter, firstLineConfig.originalDisplayMode);
 80248e6:	4b45      	ldr	r3, [pc, #276]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80248e8:	789b      	ldrb	r3, [r3, #2]
 80248ea:	461a      	mov	r2, r3
 80248ec:	4946      	ldr	r1, [pc, #280]	; (8024a08 <BSP_LCD_HandlerTask+0x294>)
 80248ee:	4844      	ldr	r0, [pc, #272]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 80248f0:	f000 f920 	bl	8024b34 <BSP_LCD_HandlerShiftReset>
					lcd_driver_write_string(0, firstLine);
 80248f4:	4942      	ldr	r1, [pc, #264]	; (8024a00 <BSP_LCD_HandlerTask+0x28c>)
 80248f6:	2000      	movs	r0, #0
 80248f8:	f001 fbf8 	bl	80260ec <lcd_driver_write_string>
					firstLineConfig.displayMode = LCD_DISPLAY_SHIFT_WAIT_500;
 80248fc:	4b3f      	ldr	r3, [pc, #252]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 80248fe:	2207      	movs	r2, #7
 8024900:	705a      	strb	r2, [r3, #1]
				}
				break;
 8024902:	e01a      	b.n	802493a <BSP_LCD_HandlerTask+0x1c6>
			}
			case LCD_DISPLAY_SHIFT_WAIT_500:
			{
				if ((gos_kernelGetSysTicks() - firstLineConfig.lastTick) > 500)
 8024904:	f015 feb6 	bl	803a674 <gos_kernelGetSysTicks>
 8024908:	4602      	mov	r2, r0
 802490a:	4b3c      	ldr	r3, [pc, #240]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 802490c:	689b      	ldr	r3, [r3, #8]
 802490e:	1ad3      	subs	r3, r2, r3
 8024910:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8024914:	d913      	bls.n	802493e <BSP_LCD_HandlerTask+0x1ca>
				{
					firstLineConfig.lastTick = gos_kernelGetSysTicks();
 8024916:	f015 fead 	bl	803a674 <gos_kernelGetSysTicks>
 802491a:	4603      	mov	r3, r0
 802491c:	4a37      	ldr	r2, [pc, #220]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 802491e:	6093      	str	r3, [r2, #8]
					firstLineConfig.displayMode = firstLineConfig.originalDisplayMode;
 8024920:	4b36      	ldr	r3, [pc, #216]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 8024922:	789a      	ldrb	r2, [r3, #2]
 8024924:	4b35      	ldr	r3, [pc, #212]	; (80249fc <BSP_LCD_HandlerTask+0x288>)
 8024926:	705a      	strb	r2, [r3, #1]
				}
				break;
 8024928:	e009      	b.n	802493e <BSP_LCD_HandlerTask+0x1ca>
			}
			default: break;
 802492a:	bf00      	nop
 802492c:	e008      	b.n	8024940 <BSP_LCD_HandlerTask+0x1cc>
				break;
 802492e:	bf00      	nop
 8024930:	e006      	b.n	8024940 <BSP_LCD_HandlerTask+0x1cc>
				break;
 8024932:	bf00      	nop
 8024934:	e004      	b.n	8024940 <BSP_LCD_HandlerTask+0x1cc>
				break;
 8024936:	bf00      	nop
 8024938:	e002      	b.n	8024940 <BSP_LCD_HandlerTask+0x1cc>
				break;
 802493a:	bf00      	nop
 802493c:	e000      	b.n	8024940 <BSP_LCD_HandlerTask+0x1cc>
				break;
 802493e:	bf00      	nop
		}

		switch (secondLineConfig.displayMode)
 8024940:	4b32      	ldr	r3, [pc, #200]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 8024942:	785b      	ldrb	r3, [r3, #1]
 8024944:	2b07      	cmp	r3, #7
 8024946:	f200 80e0 	bhi.w	8024b0a <BSP_LCD_HandlerTask+0x396>
 802494a:	a201      	add	r2, pc, #4	; (adr r2, 8024950 <BSP_LCD_HandlerTask+0x1dc>)
 802494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024950:	08024b0b 	.word	0x08024b0b
 8024954:	08024a4f 	.word	0x08024a4f
 8024958:	08024a4f 	.word	0x08024a4f
 802495c:	08024a19 	.word	0x08024a19
 8024960:	08024a19 	.word	0x08024a19
 8024964:	08024971 	.word	0x08024971
 8024968:	08024aa9 	.word	0x08024aa9
 802496c:	08024ae5 	.word	0x08024ae5
			{
				break;
			}
			case LCD_DISPLAY_BLINK:
			{
				if ((gos_kernelGetSysTicks() - secondLineConfig.lastTick) > secondLineConfig.periodMs)
 8024970:	f015 fe80 	bl	803a674 <gos_kernelGetSysTicks>
 8024974:	4602      	mov	r2, r0
 8024976:	4b25      	ldr	r3, [pc, #148]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 8024978:	689b      	ldr	r3, [r3, #8]
 802497a:	1ad2      	subs	r2, r2, r3
 802497c:	4b23      	ldr	r3, [pc, #140]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 802497e:	685b      	ldr	r3, [r3, #4]
 8024980:	429a      	cmp	r2, r3
 8024982:	f240 80c4 	bls.w	8024b0e <BSP_LCD_HandlerTask+0x39a>
				{
					secondLineConfig.lastTick = gos_kernelGetSysTicks();
 8024986:	f015 fe75 	bl	803a674 <gos_kernelGetSysTicks>
 802498a:	4603      	mov	r3, r0
 802498c:	4a1f      	ldr	r2, [pc, #124]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 802498e:	6093      	str	r3, [r2, #8]
					if (secondLineConfig.blinkState)
 8024990:	4b1e      	ldr	r3, [pc, #120]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 8024992:	7cdb      	ldrb	r3, [r3, #19]
 8024994:	2b00      	cmp	r3, #0
 8024996:	d01e      	beq.n	80249d6 <BSP_LCD_HandlerTask+0x262>
					{
						strcpy(secondLineTempBuffer, secondLine);
 8024998:	491d      	ldr	r1, [pc, #116]	; (8024a10 <BSP_LCD_HandlerTask+0x29c>)
 802499a:	481e      	ldr	r0, [pc, #120]	; (8024a14 <BSP_LCD_HandlerTask+0x2a0>)
 802499c:	f01e f9c5 	bl	8042d2a <strcpy>

						for (u8_t index = secondLineConfig.blinkStartIndex; index < secondLineConfig.blinkEndIndex; index++)
 80249a0:	4b1a      	ldr	r3, [pc, #104]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 80249a2:	7c1b      	ldrb	r3, [r3, #16]
 80249a4:	71bb      	strb	r3, [r7, #6]
 80249a6:	e006      	b.n	80249b6 <BSP_LCD_HandlerTask+0x242>
						{
							secondLine[index] = ' ';
 80249a8:	79bb      	ldrb	r3, [r7, #6]
 80249aa:	4a19      	ldr	r2, [pc, #100]	; (8024a10 <BSP_LCD_HandlerTask+0x29c>)
 80249ac:	2120      	movs	r1, #32
 80249ae:	54d1      	strb	r1, [r2, r3]
						for (u8_t index = secondLineConfig.blinkStartIndex; index < secondLineConfig.blinkEndIndex; index++)
 80249b0:	79bb      	ldrb	r3, [r7, #6]
 80249b2:	3301      	adds	r3, #1
 80249b4:	71bb      	strb	r3, [r7, #6]
 80249b6:	4b15      	ldr	r3, [pc, #84]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 80249b8:	7c5b      	ldrb	r3, [r3, #17]
 80249ba:	79ba      	ldrb	r2, [r7, #6]
 80249bc:	429a      	cmp	r2, r3
 80249be:	d3f3      	bcc.n	80249a8 <BSP_LCD_HandlerTask+0x234>
						}

						secondLineConfig.blinkState = !secondLineConfig.blinkState;
 80249c0:	4b12      	ldr	r3, [pc, #72]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 80249c2:	7cdb      	ldrb	r3, [r3, #19]
 80249c4:	2b00      	cmp	r3, #0
 80249c6:	bf0c      	ite	eq
 80249c8:	2301      	moveq	r3, #1
 80249ca:	2300      	movne	r3, #0
 80249cc:	b2db      	uxtb	r3, r3
 80249ce:	461a      	mov	r2, r3
 80249d0:	4b0e      	ldr	r3, [pc, #56]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 80249d2:	74da      	strb	r2, [r3, #19]
 80249d4:	e00d      	b.n	80249f2 <BSP_LCD_HandlerTask+0x27e>
					}
					else
					{
						strcpy(secondLine, secondLineTempBuffer);
 80249d6:	490f      	ldr	r1, [pc, #60]	; (8024a14 <BSP_LCD_HandlerTask+0x2a0>)
 80249d8:	480d      	ldr	r0, [pc, #52]	; (8024a10 <BSP_LCD_HandlerTask+0x29c>)
 80249da:	f01e f9a6 	bl	8042d2a <strcpy>
						secondLineConfig.blinkState = !secondLineConfig.blinkState;
 80249de:	4b0b      	ldr	r3, [pc, #44]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 80249e0:	7cdb      	ldrb	r3, [r3, #19]
 80249e2:	2b00      	cmp	r3, #0
 80249e4:	bf0c      	ite	eq
 80249e6:	2301      	moveq	r3, #1
 80249e8:	2300      	movne	r3, #0
 80249ea:	b2db      	uxtb	r3, r3
 80249ec:	461a      	mov	r2, r3
 80249ee:	4b07      	ldr	r3, [pc, #28]	; (8024a0c <BSP_LCD_HandlerTask+0x298>)
 80249f0:	74da      	strb	r2, [r3, #19]
					}

					lcd_driver_write_string(1, secondLine);
 80249f2:	4907      	ldr	r1, [pc, #28]	; (8024a10 <BSP_LCD_HandlerTask+0x29c>)
 80249f4:	2001      	movs	r0, #1
 80249f6:	f001 fb79 	bl	80260ec <lcd_driver_write_string>
				}
				break;
 80249fa:	e088      	b.n	8024b0e <BSP_LCD_HandlerTask+0x39a>
 80249fc:	2000575c 	.word	0x2000575c
 8024a00:	2000555c 	.word	0x2000555c
 8024a04:	2000565c 	.word	0x2000565c
 8024a08:	20005788 	.word	0x20005788
 8024a0c:	20005770 	.word	0x20005770
 8024a10:	200055dc 	.word	0x200055dc
 8024a14:	200056dc 	.word	0x200056dc
			}
			case LCD_DISPLAY_CYCLIC_RIGHT:
			case LCD_DISPLAY_CYCLIC_LEFT:
			{
				if ((gos_kernelGetSysTicks() - secondLineConfig.lastTick) > secondLineConfig.periodMs)
 8024a18:	f015 fe2c 	bl	803a674 <gos_kernelGetSysTicks>
 8024a1c:	4602      	mov	r2, r0
 8024a1e:	4b42      	ldr	r3, [pc, #264]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a20:	689b      	ldr	r3, [r3, #8]
 8024a22:	1ad2      	subs	r2, r2, r3
 8024a24:	4b40      	ldr	r3, [pc, #256]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a26:	685b      	ldr	r3, [r3, #4]
 8024a28:	429a      	cmp	r2, r3
 8024a2a:	d972      	bls.n	8024b12 <BSP_LCD_HandlerTask+0x39e>
				{
					secondLineConfig.lastTick = gos_kernelGetSysTicks();
 8024a2c:	f015 fe22 	bl	803a674 <gos_kernelGetSysTicks>
 8024a30:	4603      	mov	r3, r0
 8024a32:	4a3d      	ldr	r2, [pc, #244]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a34:	6093      	str	r3, [r2, #8]
					BSP_LCD_HandlerShiftBuffer(secondLine, &secondLineShiftCounter, secondLineConfig.displayMode);
 8024a36:	4b3c      	ldr	r3, [pc, #240]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a38:	785b      	ldrb	r3, [r3, #1]
 8024a3a:	461a      	mov	r2, r3
 8024a3c:	493b      	ldr	r1, [pc, #236]	; (8024b2c <BSP_LCD_HandlerTask+0x3b8>)
 8024a3e:	483c      	ldr	r0, [pc, #240]	; (8024b30 <BSP_LCD_HandlerTask+0x3bc>)
 8024a40:	f000 f8c6 	bl	8024bd0 <BSP_LCD_HandlerShiftBuffer>
					lcd_driver_write_string(1, secondLine);
 8024a44:	493a      	ldr	r1, [pc, #232]	; (8024b30 <BSP_LCD_HandlerTask+0x3bc>)
 8024a46:	2001      	movs	r0, #1
 8024a48:	f001 fb50 	bl	80260ec <lcd_driver_write_string>
				}
				break;
 8024a4c:	e061      	b.n	8024b12 <BSP_LCD_HandlerTask+0x39e>
			}
			case LCD_DISPLAY_SHIFT_RIGHT:
			case LCD_DISPLAY_SHIFT_LEFT:
			{
				if ((gos_kernelGetSysTicks() - secondLineConfig.lastTick) > secondLineConfig.periodMs)
 8024a4e:	f015 fe11 	bl	803a674 <gos_kernelGetSysTicks>
 8024a52:	4602      	mov	r2, r0
 8024a54:	4b34      	ldr	r3, [pc, #208]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a56:	689b      	ldr	r3, [r3, #8]
 8024a58:	1ad2      	subs	r2, r2, r3
 8024a5a:	4b33      	ldr	r3, [pc, #204]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a5c:	685b      	ldr	r3, [r3, #4]
 8024a5e:	429a      	cmp	r2, r3
 8024a60:	d959      	bls.n	8024b16 <BSP_LCD_HandlerTask+0x3a2>
				{
					secondLineConfig.lastTick = gos_kernelGetSysTicks();
 8024a62:	f015 fe07 	bl	803a674 <gos_kernelGetSysTicks>
 8024a66:	4603      	mov	r3, r0
 8024a68:	4a2f      	ldr	r2, [pc, #188]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a6a:	6093      	str	r3, [r2, #8]
					if (secondLineShiftCounter == strlen(secondLine) - 16u)
 8024a6c:	4b2f      	ldr	r3, [pc, #188]	; (8024b2c <BSP_LCD_HandlerTask+0x3b8>)
 8024a6e:	881b      	ldrh	r3, [r3, #0]
 8024a70:	461c      	mov	r4, r3
 8024a72:	482f      	ldr	r0, [pc, #188]	; (8024b30 <BSP_LCD_HandlerTask+0x3bc>)
 8024a74:	f7fb fc2c 	bl	80202d0 <strlen>
 8024a78:	4603      	mov	r3, r0
 8024a7a:	3b10      	subs	r3, #16
 8024a7c:	429c      	cmp	r4, r3
 8024a7e:	d107      	bne.n	8024a90 <BSP_LCD_HandlerTask+0x31c>
					{
						secondLineConfig.originalDisplayMode = secondLineConfig.displayMode;
 8024a80:	4b29      	ldr	r3, [pc, #164]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a82:	785a      	ldrb	r2, [r3, #1]
 8024a84:	4b28      	ldr	r3, [pc, #160]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a86:	709a      	strb	r2, [r3, #2]
						secondLineConfig.displayMode = LCD_DISPLAY_SHIFT_WAIT_1500;
 8024a88:	4b27      	ldr	r3, [pc, #156]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a8a:	2206      	movs	r2, #6
 8024a8c:	705a      	strb	r2, [r3, #1]
					{
						BSP_LCD_HandlerShiftBuffer(secondLine, &secondLineShiftCounter, secondLineConfig.displayMode);
						lcd_driver_write_string(1, secondLine);
					}
				}
				break;
 8024a8e:	e042      	b.n	8024b16 <BSP_LCD_HandlerTask+0x3a2>
						BSP_LCD_HandlerShiftBuffer(secondLine, &secondLineShiftCounter, secondLineConfig.displayMode);
 8024a90:	4b25      	ldr	r3, [pc, #148]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024a92:	785b      	ldrb	r3, [r3, #1]
 8024a94:	461a      	mov	r2, r3
 8024a96:	4925      	ldr	r1, [pc, #148]	; (8024b2c <BSP_LCD_HandlerTask+0x3b8>)
 8024a98:	4825      	ldr	r0, [pc, #148]	; (8024b30 <BSP_LCD_HandlerTask+0x3bc>)
 8024a9a:	f000 f899 	bl	8024bd0 <BSP_LCD_HandlerShiftBuffer>
						lcd_driver_write_string(1, secondLine);
 8024a9e:	4924      	ldr	r1, [pc, #144]	; (8024b30 <BSP_LCD_HandlerTask+0x3bc>)
 8024aa0:	2001      	movs	r0, #1
 8024aa2:	f001 fb23 	bl	80260ec <lcd_driver_write_string>
				break;
 8024aa6:	e036      	b.n	8024b16 <BSP_LCD_HandlerTask+0x3a2>
			}
			case LCD_DISPLAY_SHIFT_WAIT_1500:
			{
				if ((gos_kernelGetSysTicks() - secondLineConfig.lastTick) > 1500)
 8024aa8:	f015 fde4 	bl	803a674 <gos_kernelGetSysTicks>
 8024aac:	4602      	mov	r2, r0
 8024aae:	4b1e      	ldr	r3, [pc, #120]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024ab0:	689b      	ldr	r3, [r3, #8]
 8024ab2:	1ad3      	subs	r3, r2, r3
 8024ab4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8024ab8:	4293      	cmp	r3, r2
 8024aba:	d92e      	bls.n	8024b1a <BSP_LCD_HandlerTask+0x3a6>
				{
					secondLineConfig.lastTick = gos_kernelGetSysTicks();
 8024abc:	f015 fdda 	bl	803a674 <gos_kernelGetSysTicks>
 8024ac0:	4603      	mov	r3, r0
 8024ac2:	4a19      	ldr	r2, [pc, #100]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024ac4:	6093      	str	r3, [r2, #8]
					BSP_LCD_HandlerShiftReset(secondLine, &secondLineShiftCounter, secondLineConfig.originalDisplayMode);
 8024ac6:	4b18      	ldr	r3, [pc, #96]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024ac8:	789b      	ldrb	r3, [r3, #2]
 8024aca:	461a      	mov	r2, r3
 8024acc:	4917      	ldr	r1, [pc, #92]	; (8024b2c <BSP_LCD_HandlerTask+0x3b8>)
 8024ace:	4818      	ldr	r0, [pc, #96]	; (8024b30 <BSP_LCD_HandlerTask+0x3bc>)
 8024ad0:	f000 f830 	bl	8024b34 <BSP_LCD_HandlerShiftReset>
					lcd_driver_write_string(1, secondLine);
 8024ad4:	4916      	ldr	r1, [pc, #88]	; (8024b30 <BSP_LCD_HandlerTask+0x3bc>)
 8024ad6:	2001      	movs	r0, #1
 8024ad8:	f001 fb08 	bl	80260ec <lcd_driver_write_string>
					secondLineConfig.displayMode = LCD_DISPLAY_SHIFT_WAIT_500;
 8024adc:	4b12      	ldr	r3, [pc, #72]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024ade:	2207      	movs	r2, #7
 8024ae0:	705a      	strb	r2, [r3, #1]
				}
				break;
 8024ae2:	e01a      	b.n	8024b1a <BSP_LCD_HandlerTask+0x3a6>
			}
			case LCD_DISPLAY_SHIFT_WAIT_500:
			{
				if ((gos_kernelGetSysTicks() - secondLineConfig.lastTick) > 500)
 8024ae4:	f015 fdc6 	bl	803a674 <gos_kernelGetSysTicks>
 8024ae8:	4602      	mov	r2, r0
 8024aea:	4b0f      	ldr	r3, [pc, #60]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024aec:	689b      	ldr	r3, [r3, #8]
 8024aee:	1ad3      	subs	r3, r2, r3
 8024af0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8024af4:	d913      	bls.n	8024b1e <BSP_LCD_HandlerTask+0x3aa>
				{
					secondLineConfig.lastTick = gos_kernelGetSysTicks();
 8024af6:	f015 fdbd 	bl	803a674 <gos_kernelGetSysTicks>
 8024afa:	4603      	mov	r3, r0
 8024afc:	4a0a      	ldr	r2, [pc, #40]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024afe:	6093      	str	r3, [r2, #8]
					secondLineConfig.displayMode = secondLineConfig.originalDisplayMode;
 8024b00:	4b09      	ldr	r3, [pc, #36]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024b02:	789a      	ldrb	r2, [r3, #2]
 8024b04:	4b08      	ldr	r3, [pc, #32]	; (8024b28 <BSP_LCD_HandlerTask+0x3b4>)
 8024b06:	705a      	strb	r2, [r3, #1]
				}
				break;
 8024b08:	e009      	b.n	8024b1e <BSP_LCD_HandlerTask+0x3aa>
			}
			default: break;
 8024b0a:	bf00      	nop
 8024b0c:	e008      	b.n	8024b20 <BSP_LCD_HandlerTask+0x3ac>
				break;
 8024b0e:	bf00      	nop
 8024b10:	e006      	b.n	8024b20 <BSP_LCD_HandlerTask+0x3ac>
				break;
 8024b12:	bf00      	nop
 8024b14:	e004      	b.n	8024b20 <BSP_LCD_HandlerTask+0x3ac>
				break;
 8024b16:	bf00      	nop
 8024b18:	e002      	b.n	8024b20 <BSP_LCD_HandlerTask+0x3ac>
				break;
 8024b1a:	bf00      	nop
 8024b1c:	e000      	b.n	8024b20 <BSP_LCD_HandlerTask+0x3ac>
				break;
 8024b1e:	bf00      	nop
		}
		gos_taskSleep(10);
 8024b20:	200a      	movs	r0, #10
 8024b22:	f016 ff95 	bl	803ba50 <gos_taskSleep>
		switch (firstLineConfig.displayMode)
 8024b26:	e628      	b.n	802477a <BSP_LCD_HandlerTask+0x6>
 8024b28:	20005770 	.word	0x20005770
 8024b2c:	2000578a 	.word	0x2000578a
 8024b30:	200055dc 	.word	0x200055dc

08024b34 <BSP_LCD_HandlerShiftReset>:
	}
}

GOS_STATIC void_t BSP_LCD_HandlerShiftReset (char_t* pBuffer, u16_t* pShiftCounter, lcd_display_mode_t direction)
{
 8024b34:	b580      	push	{r7, lr}
 8024b36:	b086      	sub	sp, #24
 8024b38:	af00      	add	r7, sp, #0
 8024b3a:	60f8      	str	r0, [r7, #12]
 8024b3c:	60b9      	str	r1, [r7, #8]
 8024b3e:	4613      	mov	r3, r2
 8024b40:	71fb      	strb	r3, [r7, #7]
	u16_t index = 0u;
 8024b42:	2300      	movs	r3, #0
 8024b44:	82fb      	strh	r3, [r7, #22]
	u16_t cntr  = 0u;
 8024b46:	2300      	movs	r3, #0
 8024b48:	827b      	strh	r3, [r7, #18]
	u16_t resetCycles = *pShiftCounter;
 8024b4a:	68bb      	ldr	r3, [r7, #8]
 8024b4c:	881b      	ldrh	r3, [r3, #0]
 8024b4e:	82bb      	strh	r3, [r7, #20]
	switch (direction)
 8024b50:	79fb      	ldrb	r3, [r7, #7]
 8024b52:	3b01      	subs	r3, #1
 8024b54:	2b03      	cmp	r3, #3
 8024b56:	d835      	bhi.n	8024bc4 <BSP_LCD_HandlerShiftReset+0x90>
 8024b58:	a201      	add	r2, pc, #4	; (adr r2, 8024b60 <BSP_LCD_HandlerShiftReset+0x2c>)
 8024b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024b5e:	bf00      	nop
 8024b60:	08024b9b 	.word	0x08024b9b
 8024b64:	08024b71 	.word	0x08024b71
 8024b68:	08024b9b 	.word	0x08024b9b
 8024b6c:	08024b71 	.word	0x08024b71
	{
		case LCD_DISPLAY_CYCLIC_LEFT:
		case LCD_DISPLAY_SHIFT_LEFT:
		{
			for (index = 0u; index < resetCycles; index++)
 8024b70:	2300      	movs	r3, #0
 8024b72:	82fb      	strh	r3, [r7, #22]
 8024b74:	e009      	b.n	8024b8a <BSP_LCD_HandlerShiftReset+0x56>
			{
				BSP_LCD_HandlerShiftBuffer(pBuffer, &cntr, LCD_DISPLAY_SHIFT_RIGHT);
 8024b76:	f107 0312 	add.w	r3, r7, #18
 8024b7a:	2201      	movs	r2, #1
 8024b7c:	4619      	mov	r1, r3
 8024b7e:	68f8      	ldr	r0, [r7, #12]
 8024b80:	f000 f826 	bl	8024bd0 <BSP_LCD_HandlerShiftBuffer>
			for (index = 0u; index < resetCycles; index++)
 8024b84:	8afb      	ldrh	r3, [r7, #22]
 8024b86:	3301      	adds	r3, #1
 8024b88:	82fb      	strh	r3, [r7, #22]
 8024b8a:	8afa      	ldrh	r2, [r7, #22]
 8024b8c:	8abb      	ldrh	r3, [r7, #20]
 8024b8e:	429a      	cmp	r2, r3
 8024b90:	d3f1      	bcc.n	8024b76 <BSP_LCD_HandlerShiftReset+0x42>
			}
			*pShiftCounter = 0U;
 8024b92:	68bb      	ldr	r3, [r7, #8]
 8024b94:	2200      	movs	r2, #0
 8024b96:	801a      	strh	r2, [r3, #0]
			break;
 8024b98:	e015      	b.n	8024bc6 <BSP_LCD_HandlerShiftReset+0x92>
		}
		case LCD_DISPLAY_CYCLIC_RIGHT:
		case LCD_DISPLAY_SHIFT_RIGHT:
		{
			for (index = 0u; index < resetCycles; index++)
 8024b9a:	2300      	movs	r3, #0
 8024b9c:	82fb      	strh	r3, [r7, #22]
 8024b9e:	e009      	b.n	8024bb4 <BSP_LCD_HandlerShiftReset+0x80>
			{
				BSP_LCD_HandlerShiftBuffer(pBuffer, &cntr, LCD_DISPLAY_SHIFT_LEFT);
 8024ba0:	f107 0312 	add.w	r3, r7, #18
 8024ba4:	2202      	movs	r2, #2
 8024ba6:	4619      	mov	r1, r3
 8024ba8:	68f8      	ldr	r0, [r7, #12]
 8024baa:	f000 f811 	bl	8024bd0 <BSP_LCD_HandlerShiftBuffer>
			for (index = 0u; index < resetCycles; index++)
 8024bae:	8afb      	ldrh	r3, [r7, #22]
 8024bb0:	3301      	adds	r3, #1
 8024bb2:	82fb      	strh	r3, [r7, #22]
 8024bb4:	8afa      	ldrh	r2, [r7, #22]
 8024bb6:	8abb      	ldrh	r3, [r7, #20]
 8024bb8:	429a      	cmp	r2, r3
 8024bba:	d3f1      	bcc.n	8024ba0 <BSP_LCD_HandlerShiftReset+0x6c>
			}
			*pShiftCounter = 0U;
 8024bbc:	68bb      	ldr	r3, [r7, #8]
 8024bbe:	2200      	movs	r2, #0
 8024bc0:	801a      	strh	r2, [r3, #0]
			break;
 8024bc2:	e000      	b.n	8024bc6 <BSP_LCD_HandlerShiftReset+0x92>
		}
		default: break;
 8024bc4:	bf00      	nop
	}
}
 8024bc6:	bf00      	nop
 8024bc8:	3718      	adds	r7, #24
 8024bca:	46bd      	mov	sp, r7
 8024bcc:	bd80      	pop	{r7, pc}
 8024bce:	bf00      	nop

08024bd0 <BSP_LCD_HandlerShiftBuffer>:

GOS_STATIC void_t BSP_LCD_HandlerShiftBuffer (char_t* pBuffer, u16_t* pShiftCounter, lcd_display_mode_t direction)
{
 8024bd0:	b590      	push	{r4, r7, lr}
 8024bd2:	b087      	sub	sp, #28
 8024bd4:	af00      	add	r7, sp, #0
 8024bd6:	60f8      	str	r0, [r7, #12]
 8024bd8:	60b9      	str	r1, [r7, #8]
 8024bda:	4613      	mov	r3, r2
 8024bdc:	71fb      	strb	r3, [r7, #7]
	u16_t index = 0u;
 8024bde:	2300      	movs	r3, #0
 8024be0:	82fb      	strh	r3, [r7, #22]

	switch (direction)
 8024be2:	79fb      	ldrb	r3, [r7, #7]
 8024be4:	3b01      	subs	r3, #1
 8024be6:	2b03      	cmp	r3, #3
 8024be8:	d867      	bhi.n	8024cba <BSP_LCD_HandlerShiftBuffer+0xea>
 8024bea:	a201      	add	r2, pc, #4	; (adr r2, 8024bf0 <BSP_LCD_HandlerShiftBuffer+0x20>)
 8024bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024bf0:	08024c53 	.word	0x08024c53
 8024bf4:	08024c01 	.word	0x08024c01
 8024bf8:	08024c53 	.word	0x08024c53
 8024bfc:	08024c01 	.word	0x08024c01
	{
		case LCD_DISPLAY_CYCLIC_LEFT:
		case LCD_DISPLAY_SHIFT_LEFT:
		{
			char_t firstChar = pBuffer[0];
 8024c00:	68fb      	ldr	r3, [r7, #12]
 8024c02:	781b      	ldrb	r3, [r3, #0]
 8024c04:	757b      	strb	r3, [r7, #21]
			for (index = 1u; index < strlen(pBuffer); index++)
 8024c06:	2301      	movs	r3, #1
 8024c08:	82fb      	strh	r3, [r7, #22]
 8024c0a:	e00b      	b.n	8024c24 <BSP_LCD_HandlerShiftBuffer+0x54>
			{
				pBuffer[index - 1] = pBuffer[index];
 8024c0c:	8afb      	ldrh	r3, [r7, #22]
 8024c0e:	68fa      	ldr	r2, [r7, #12]
 8024c10:	441a      	add	r2, r3
 8024c12:	8afb      	ldrh	r3, [r7, #22]
 8024c14:	3b01      	subs	r3, #1
 8024c16:	68f9      	ldr	r1, [r7, #12]
 8024c18:	440b      	add	r3, r1
 8024c1a:	7812      	ldrb	r2, [r2, #0]
 8024c1c:	701a      	strb	r2, [r3, #0]
			for (index = 1u; index < strlen(pBuffer); index++)
 8024c1e:	8afb      	ldrh	r3, [r7, #22]
 8024c20:	3301      	adds	r3, #1
 8024c22:	82fb      	strh	r3, [r7, #22]
 8024c24:	8afc      	ldrh	r4, [r7, #22]
 8024c26:	68f8      	ldr	r0, [r7, #12]
 8024c28:	f7fb fb52 	bl	80202d0 <strlen>
 8024c2c:	4603      	mov	r3, r0
 8024c2e:	429c      	cmp	r4, r3
 8024c30:	d3ec      	bcc.n	8024c0c <BSP_LCD_HandlerShiftBuffer+0x3c>
			}
			pBuffer[strlen(pBuffer) - 1] = firstChar;
 8024c32:	68f8      	ldr	r0, [r7, #12]
 8024c34:	f7fb fb4c 	bl	80202d0 <strlen>
 8024c38:	4603      	mov	r3, r0
 8024c3a:	3b01      	subs	r3, #1
 8024c3c:	68fa      	ldr	r2, [r7, #12]
 8024c3e:	4413      	add	r3, r2
 8024c40:	7d7a      	ldrb	r2, [r7, #21]
 8024c42:	701a      	strb	r2, [r3, #0]
			(*pShiftCounter)++;
 8024c44:	68bb      	ldr	r3, [r7, #8]
 8024c46:	881b      	ldrh	r3, [r3, #0]
 8024c48:	3301      	adds	r3, #1
 8024c4a:	b29a      	uxth	r2, r3
 8024c4c:	68bb      	ldr	r3, [r7, #8]
 8024c4e:	801a      	strh	r2, [r3, #0]
			break;
 8024c50:	e034      	b.n	8024cbc <BSP_LCD_HandlerShiftBuffer+0xec>
		}
		case LCD_DISPLAY_CYCLIC_RIGHT:
		case LCD_DISPLAY_SHIFT_RIGHT:
		{
			u16_t length = (u8_t)strlen(pBuffer);
 8024c52:	68f8      	ldr	r0, [r7, #12]
 8024c54:	f7fb fb3c 	bl	80202d0 <strlen>
 8024c58:	4603      	mov	r3, r0
 8024c5a:	b2db      	uxtb	r3, r3
 8024c5c:	827b      	strh	r3, [r7, #18]
			char_t lastChar = pBuffer[strlen(pBuffer) - 1];
 8024c5e:	68f8      	ldr	r0, [r7, #12]
 8024c60:	f7fb fb36 	bl	80202d0 <strlen>
 8024c64:	4603      	mov	r3, r0
 8024c66:	3b01      	subs	r3, #1
 8024c68:	68fa      	ldr	r2, [r7, #12]
 8024c6a:	4413      	add	r3, r2
 8024c6c:	781b      	ldrb	r3, [r3, #0]
 8024c6e:	747b      	strb	r3, [r7, #17]

			for (index = 1u; index < strlen(pBuffer); index++)
 8024c70:	2301      	movs	r3, #1
 8024c72:	82fb      	strh	r3, [r7, #22]
 8024c74:	e010      	b.n	8024c98 <BSP_LCD_HandlerShiftBuffer+0xc8>
			{
				pBuffer[length - index] = pBuffer[length - index - 1];
 8024c76:	8a7a      	ldrh	r2, [r7, #18]
 8024c78:	8afb      	ldrh	r3, [r7, #22]
 8024c7a:	1ad3      	subs	r3, r2, r3
 8024c7c:	3b01      	subs	r3, #1
 8024c7e:	68fa      	ldr	r2, [r7, #12]
 8024c80:	441a      	add	r2, r3
 8024c82:	8a79      	ldrh	r1, [r7, #18]
 8024c84:	8afb      	ldrh	r3, [r7, #22]
 8024c86:	1acb      	subs	r3, r1, r3
 8024c88:	4619      	mov	r1, r3
 8024c8a:	68fb      	ldr	r3, [r7, #12]
 8024c8c:	440b      	add	r3, r1
 8024c8e:	7812      	ldrb	r2, [r2, #0]
 8024c90:	701a      	strb	r2, [r3, #0]
			for (index = 1u; index < strlen(pBuffer); index++)
 8024c92:	8afb      	ldrh	r3, [r7, #22]
 8024c94:	3301      	adds	r3, #1
 8024c96:	82fb      	strh	r3, [r7, #22]
 8024c98:	8afc      	ldrh	r4, [r7, #22]
 8024c9a:	68f8      	ldr	r0, [r7, #12]
 8024c9c:	f7fb fb18 	bl	80202d0 <strlen>
 8024ca0:	4603      	mov	r3, r0
 8024ca2:	429c      	cmp	r4, r3
 8024ca4:	d3e7      	bcc.n	8024c76 <BSP_LCD_HandlerShiftBuffer+0xa6>
			}
			pBuffer[0] = lastChar;
 8024ca6:	68fb      	ldr	r3, [r7, #12]
 8024ca8:	7c7a      	ldrb	r2, [r7, #17]
 8024caa:	701a      	strb	r2, [r3, #0]
			(*pShiftCounter)++;
 8024cac:	68bb      	ldr	r3, [r7, #8]
 8024cae:	881b      	ldrh	r3, [r3, #0]
 8024cb0:	3301      	adds	r3, #1
 8024cb2:	b29a      	uxth	r2, r3
 8024cb4:	68bb      	ldr	r3, [r7, #8]
 8024cb6:	801a      	strh	r2, [r3, #0]
			break;
 8024cb8:	e000      	b.n	8024cbc <BSP_LCD_HandlerShiftBuffer+0xec>
		}
		default: break;
 8024cba:	bf00      	nop
	}
}
 8024cbc:	bf00      	nop
 8024cbe:	371c      	adds	r7, #28
 8024cc0:	46bd      	mov	sp, r7
 8024cc2:	bd90      	pop	{r4, r7, pc}

08024cc4 <BSP_Temperature_HandlerInit>:
	.taskStackSize      = 0x200,
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER
};

gos_result_t BSP_Temperature_HandlerInit (void_t)
{
 8024cc4:	b580      	push	{r7, lr}
 8024cc6:	af00      	add	r7, sp, #0
	return gos_taskRegister(&tempHandlerTaskDesc, NULL);
 8024cc8:	2100      	movs	r1, #0
 8024cca:	4803      	ldr	r0, [pc, #12]	; (8024cd8 <BSP_Temperature_HandlerInit+0x14>)
 8024ccc:	f016 fd2e 	bl	803b72c <gos_taskRegister>
 8024cd0:	4603      	mov	r3, r0
}
 8024cd2:	4618      	mov	r0, r3
 8024cd4:	bd80      	pop	{r7, pc}
 8024cd6:	bf00      	nop
 8024cd8:	20001478 	.word	0x20001478

08024cdc <BSP_Temperature_HandlerGetValue>:

gos_result_t BSP_Temperature_HandlerGetValue (u16_t* value)
{
 8024cdc:	b480      	push	{r7}
 8024cde:	b085      	sub	sp, #20
 8024ce0:	af00      	add	r7, sp, #0
 8024ce2:	6078      	str	r0, [r7, #4]
	gos_result_t getValueResult = GOS_ERROR;
 8024ce4:	23ae      	movs	r3, #174	; 0xae
 8024ce6:	73fb      	strb	r3, [r7, #15]

	if (value != NULL)
 8024ce8:	687b      	ldr	r3, [r7, #4]
 8024cea:	2b00      	cmp	r3, #0
 8024cec:	d005      	beq.n	8024cfa <BSP_Temperature_HandlerGetValue+0x1e>
	{
		*value = tempValue;
 8024cee:	4b06      	ldr	r3, [pc, #24]	; (8024d08 <BSP_Temperature_HandlerGetValue+0x2c>)
 8024cf0:	881a      	ldrh	r2, [r3, #0]
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	801a      	strh	r2, [r3, #0]
		getValueResult = GOS_SUCCESS;
 8024cf6:	2355      	movs	r3, #85	; 0x55
 8024cf8:	73fb      	strb	r3, [r7, #15]
	}

	return getValueResult;
 8024cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8024cfc:	4618      	mov	r0, r3
 8024cfe:	3714      	adds	r7, #20
 8024d00:	46bd      	mov	sp, r7
 8024d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d06:	4770      	bx	lr
 8024d08:	2000578c 	.word	0x2000578c

08024d0c <BSP_Temperature_HandlerTask>:

GOS_STATIC void_t BSP_Temperature_HandlerTask (void_t)
{
 8024d0c:	b580      	push	{r7, lr}
 8024d0e:	af00      	add	r7, sp, #0
	for (;;)
	{
		temperature_driver_get_temp(&tempValue);
 8024d10:	4803      	ldr	r0, [pc, #12]	; (8024d20 <BSP_Temperature_HandlerTask+0x14>)
 8024d12:	f002 fb5b 	bl	80273cc <temperature_driver_get_temp>
		gos_taskSleep(1000);
 8024d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8024d1a:	f016 fe99 	bl	803ba50 <gos_taskSleep>
		temperature_driver_get_temp(&tempValue);
 8024d1e:	e7f7      	b.n	8024d10 <BSP_Temperature_HandlerTask+0x4>
 8024d20:	2000578c 	.word	0x2000578c

08024d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8024d24:	b480      	push	{r7}
 8024d26:	af00      	add	r7, sp, #0
	return 1;
 8024d28:	2301      	movs	r3, #1
}
 8024d2a:	4618      	mov	r0, r3
 8024d2c:	46bd      	mov	sp, r7
 8024d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d32:	4770      	bx	lr

08024d34 <_kill>:

int _kill(int pid, int sig)
{
 8024d34:	b580      	push	{r7, lr}
 8024d36:	b082      	sub	sp, #8
 8024d38:	af00      	add	r7, sp, #0
 8024d3a:	6078      	str	r0, [r7, #4]
 8024d3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8024d3e:	f01d ffc7 	bl	8042cd0 <__errno>
 8024d42:	4603      	mov	r3, r0
 8024d44:	2216      	movs	r2, #22
 8024d46:	601a      	str	r2, [r3, #0]
	return -1;
 8024d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8024d4c:	4618      	mov	r0, r3
 8024d4e:	3708      	adds	r7, #8
 8024d50:	46bd      	mov	sp, r7
 8024d52:	bd80      	pop	{r7, pc}

08024d54 <_exit>:

void _exit (int status)
{
 8024d54:	b580      	push	{r7, lr}
 8024d56:	b082      	sub	sp, #8
 8024d58:	af00      	add	r7, sp, #0
 8024d5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8024d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8024d60:	6878      	ldr	r0, [r7, #4]
 8024d62:	f7ff ffe7 	bl	8024d34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8024d66:	e7fe      	b.n	8024d66 <_exit+0x12>

08024d68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8024d68:	b580      	push	{r7, lr}
 8024d6a:	b086      	sub	sp, #24
 8024d6c:	af00      	add	r7, sp, #0
 8024d6e:	60f8      	str	r0, [r7, #12]
 8024d70:	60b9      	str	r1, [r7, #8]
 8024d72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8024d74:	2300      	movs	r3, #0
 8024d76:	617b      	str	r3, [r7, #20]
 8024d78:	e00a      	b.n	8024d90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8024d7a:	f3af 8000 	nop.w
 8024d7e:	4601      	mov	r1, r0
 8024d80:	68bb      	ldr	r3, [r7, #8]
 8024d82:	1c5a      	adds	r2, r3, #1
 8024d84:	60ba      	str	r2, [r7, #8]
 8024d86:	b2ca      	uxtb	r2, r1
 8024d88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8024d8a:	697b      	ldr	r3, [r7, #20]
 8024d8c:	3301      	adds	r3, #1
 8024d8e:	617b      	str	r3, [r7, #20]
 8024d90:	697a      	ldr	r2, [r7, #20]
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	429a      	cmp	r2, r3
 8024d96:	dbf0      	blt.n	8024d7a <_read+0x12>
	}

return len;
 8024d98:	687b      	ldr	r3, [r7, #4]
}
 8024d9a:	4618      	mov	r0, r3
 8024d9c:	3718      	adds	r7, #24
 8024d9e:	46bd      	mov	sp, r7
 8024da0:	bd80      	pop	{r7, pc}

08024da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8024da2:	b580      	push	{r7, lr}
 8024da4:	b086      	sub	sp, #24
 8024da6:	af00      	add	r7, sp, #0
 8024da8:	60f8      	str	r0, [r7, #12]
 8024daa:	60b9      	str	r1, [r7, #8]
 8024dac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8024dae:	2300      	movs	r3, #0
 8024db0:	617b      	str	r3, [r7, #20]
 8024db2:	e009      	b.n	8024dc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8024db4:	68bb      	ldr	r3, [r7, #8]
 8024db6:	1c5a      	adds	r2, r3, #1
 8024db8:	60ba      	str	r2, [r7, #8]
 8024dba:	781b      	ldrb	r3, [r3, #0]
 8024dbc:	4618      	mov	r0, r3
 8024dbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8024dc2:	697b      	ldr	r3, [r7, #20]
 8024dc4:	3301      	adds	r3, #1
 8024dc6:	617b      	str	r3, [r7, #20]
 8024dc8:	697a      	ldr	r2, [r7, #20]
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	429a      	cmp	r2, r3
 8024dce:	dbf1      	blt.n	8024db4 <_write+0x12>
	}
	return len;
 8024dd0:	687b      	ldr	r3, [r7, #4]
}
 8024dd2:	4618      	mov	r0, r3
 8024dd4:	3718      	adds	r7, #24
 8024dd6:	46bd      	mov	sp, r7
 8024dd8:	bd80      	pop	{r7, pc}

08024dda <_close>:

int _close(int file)
{
 8024dda:	b480      	push	{r7}
 8024ddc:	b083      	sub	sp, #12
 8024dde:	af00      	add	r7, sp, #0
 8024de0:	6078      	str	r0, [r7, #4]
	return -1;
 8024de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8024de6:	4618      	mov	r0, r3
 8024de8:	370c      	adds	r7, #12
 8024dea:	46bd      	mov	sp, r7
 8024dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024df0:	4770      	bx	lr

08024df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8024df2:	b480      	push	{r7}
 8024df4:	b083      	sub	sp, #12
 8024df6:	af00      	add	r7, sp, #0
 8024df8:	6078      	str	r0, [r7, #4]
 8024dfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8024dfc:	683b      	ldr	r3, [r7, #0]
 8024dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8024e02:	605a      	str	r2, [r3, #4]
	return 0;
 8024e04:	2300      	movs	r3, #0
}
 8024e06:	4618      	mov	r0, r3
 8024e08:	370c      	adds	r7, #12
 8024e0a:	46bd      	mov	sp, r7
 8024e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e10:	4770      	bx	lr

08024e12 <_isatty>:

int _isatty(int file)
{
 8024e12:	b480      	push	{r7}
 8024e14:	b083      	sub	sp, #12
 8024e16:	af00      	add	r7, sp, #0
 8024e18:	6078      	str	r0, [r7, #4]
	return 1;
 8024e1a:	2301      	movs	r3, #1
}
 8024e1c:	4618      	mov	r0, r3
 8024e1e:	370c      	adds	r7, #12
 8024e20:	46bd      	mov	sp, r7
 8024e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e26:	4770      	bx	lr

08024e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8024e28:	b480      	push	{r7}
 8024e2a:	b085      	sub	sp, #20
 8024e2c:	af00      	add	r7, sp, #0
 8024e2e:	60f8      	str	r0, [r7, #12]
 8024e30:	60b9      	str	r1, [r7, #8]
 8024e32:	607a      	str	r2, [r7, #4]
	return 0;
 8024e34:	2300      	movs	r3, #0
}
 8024e36:	4618      	mov	r0, r3
 8024e38:	3714      	adds	r7, #20
 8024e3a:	46bd      	mov	sp, r7
 8024e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e40:	4770      	bx	lr
	...

08024e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8024e44:	b580      	push	{r7, lr}
 8024e46:	b086      	sub	sp, #24
 8024e48:	af00      	add	r7, sp, #0
 8024e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8024e4c:	4a14      	ldr	r2, [pc, #80]	; (8024ea0 <_sbrk+0x5c>)
 8024e4e:	4b15      	ldr	r3, [pc, #84]	; (8024ea4 <_sbrk+0x60>)
 8024e50:	1ad3      	subs	r3, r2, r3
 8024e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8024e54:	697b      	ldr	r3, [r7, #20]
 8024e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8024e58:	4b13      	ldr	r3, [pc, #76]	; (8024ea8 <_sbrk+0x64>)
 8024e5a:	681b      	ldr	r3, [r3, #0]
 8024e5c:	2b00      	cmp	r3, #0
 8024e5e:	d102      	bne.n	8024e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8024e60:	4b11      	ldr	r3, [pc, #68]	; (8024ea8 <_sbrk+0x64>)
 8024e62:	4a12      	ldr	r2, [pc, #72]	; (8024eac <_sbrk+0x68>)
 8024e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8024e66:	4b10      	ldr	r3, [pc, #64]	; (8024ea8 <_sbrk+0x64>)
 8024e68:	681a      	ldr	r2, [r3, #0]
 8024e6a:	687b      	ldr	r3, [r7, #4]
 8024e6c:	4413      	add	r3, r2
 8024e6e:	693a      	ldr	r2, [r7, #16]
 8024e70:	429a      	cmp	r2, r3
 8024e72:	d207      	bcs.n	8024e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8024e74:	f01d ff2c 	bl	8042cd0 <__errno>
 8024e78:	4603      	mov	r3, r0
 8024e7a:	220c      	movs	r2, #12
 8024e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8024e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8024e82:	e009      	b.n	8024e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8024e84:	4b08      	ldr	r3, [pc, #32]	; (8024ea8 <_sbrk+0x64>)
 8024e86:	681b      	ldr	r3, [r3, #0]
 8024e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8024e8a:	4b07      	ldr	r3, [pc, #28]	; (8024ea8 <_sbrk+0x64>)
 8024e8c:	681a      	ldr	r2, [r3, #0]
 8024e8e:	687b      	ldr	r3, [r7, #4]
 8024e90:	4413      	add	r3, r2
 8024e92:	4a05      	ldr	r2, [pc, #20]	; (8024ea8 <_sbrk+0x64>)
 8024e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8024e96:	68fb      	ldr	r3, [r7, #12]
}
 8024e98:	4618      	mov	r0, r3
 8024e9a:	3718      	adds	r7, #24
 8024e9c:	46bd      	mov	sp, r7
 8024e9e:	bd80      	pop	{r7, pc}
 8024ea0:	20020000 	.word	0x20020000
 8024ea4:	00000400 	.word	0x00000400
 8024ea8:	20005790 	.word	0x20005790
 8024eac:	20010048 	.word	0x20010048

08024eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8024eb0:	b480      	push	{r7}
 8024eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8024eb4:	4b06      	ldr	r3, [pc, #24]	; (8024ed0 <SystemInit+0x20>)
 8024eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8024eba:	4a05      	ldr	r2, [pc, #20]	; (8024ed0 <SystemInit+0x20>)
 8024ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8024ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8024ec4:	bf00      	nop
 8024ec6:	46bd      	mov	sp, r7
 8024ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ecc:	4770      	bx	lr
 8024ece:	bf00      	nop
 8024ed0:	e000ed00 	.word	0xe000ed00

08024ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8024ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8024f0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8024ed8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8024eda:	e003      	b.n	8024ee4 <LoopCopyDataInit>

08024edc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8024edc:	4b0c      	ldr	r3, [pc, #48]	; (8024f10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8024ede:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8024ee0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8024ee2:	3104      	adds	r1, #4

08024ee4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8024ee4:	480b      	ldr	r0, [pc, #44]	; (8024f14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8024ee6:	4b0c      	ldr	r3, [pc, #48]	; (8024f18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8024ee8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8024eea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8024eec:	d3f6      	bcc.n	8024edc <CopyDataInit>
  ldr  r2, =_sbss
 8024eee:	4a0b      	ldr	r2, [pc, #44]	; (8024f1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8024ef0:	e002      	b.n	8024ef8 <LoopFillZerobss>

08024ef2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8024ef2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8024ef4:	f842 3b04 	str.w	r3, [r2], #4

08024ef8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8024ef8:	4b09      	ldr	r3, [pc, #36]	; (8024f20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8024efa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8024efc:	d3f9      	bcc.n	8024ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8024efe:	f7ff ffd7 	bl	8024eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8024f02:	f01d feeb 	bl	8042cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8024f06:	f018 f9f7 	bl	803d2f8 <main>
  bx  lr    
 8024f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8024f0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8024f10:	0804a838 	.word	0x0804a838
  ldr  r0, =_sdata
 8024f14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8024f18:	200036cc 	.word	0x200036cc
  ldr  r2, =_sbss
 8024f1c:	200036cc 	.word	0x200036cc
  ldr  r3, = _ebss
 8024f20:	20010044 	.word	0x20010044

08024f24 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8024f24:	e7fe      	b.n	8024f24 <CAN1_RX0_IRQHandler>
	...

08024f28 <driver_init>:
#include "drv_uart.h"

GOS_STATIC void_t sysTickHook (void_t);

gos_result_t driver_init (void_t)
{
 8024f28:	b580      	push	{r7, lr}
 8024f2a:	b082      	sub	sp, #8
 8024f2c:	af00      	add	r7, sp, #0
	gos_result_t driverInitResult = GOS_SUCCESS;
 8024f2e:	2355      	movs	r3, #85	; 0x55
 8024f30:	71fb      	strb	r3, [r7, #7]


	driverInitResult &= rcc_driver_init();
 8024f32:	f001 fab5 	bl	80264a0 <rcc_driver_init>
 8024f36:	4603      	mov	r3, r0
 8024f38:	461a      	mov	r2, r3
 8024f3a:	79fb      	ldrb	r3, [r7, #7]
 8024f3c:	4013      	ands	r3, r2
 8024f3e:	71fb      	strb	r3, [r7, #7]
	//driverInitResult &= timer_driver_systimer_init();
	driverInitResult &= drv_tmrInit();
 8024f40:	f012 ff1a 	bl	8037d78 <drv_tmrInit>
 8024f44:	4603      	mov	r3, r0
 8024f46:	461a      	mov	r2, r3
 8024f48:	79fb      	ldrb	r3, [r7, #7]
 8024f4a:	4013      	ands	r3, r2
 8024f4c:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_systimerStart();
 8024f4e:	f012 fed5 	bl	8037cfc <drv_systimerStart>
 8024f52:	4603      	mov	r3, r0
 8024f54:	461a      	mov	r2, r3
 8024f56:	79fb      	ldrb	r3, [r7, #7]
 8024f58:	4013      	ands	r3, r2
 8024f5a:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= drv_gpioInit();
 8024f5c:	f011 f9da 	bl	8036314 <drv_gpioInit>
 8024f60:	4603      	mov	r3, r0
 8024f62:	461a      	mov	r2, r3
 8024f64:	79fb      	ldrb	r3, [r7, #7]
 8024f66:	4013      	ands	r3, r2
 8024f68:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= drv_i2cInit();
 8024f6a:	f011 fbb5 	bl	80366d8 <drv_i2cInit>
 8024f6e:	4603      	mov	r3, r0
 8024f70:	461a      	mov	r2, r3
 8024f72:	79fb      	ldrb	r3, [r7, #7]
 8024f74:	4013      	ands	r3, r2
 8024f76:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= pwm_driver_init();
 8024f78:	f001 f9fe 	bl	8026378 <pwm_driver_init>
 8024f7c:	4603      	mov	r3, r0
 8024f7e:	461a      	mov	r2, r3
 8024f80:	79fb      	ldrb	r3, [r7, #7]
 8024f82:	4013      	ands	r3, r2
 8024f84:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_adcInit();
 8024f86:	f00f ffdd 	bl	8034f44 <drv_adcInit>
 8024f8a:	4603      	mov	r3, r0
 8024f8c:	461a      	mov	r2, r3
 8024f8e:	79fb      	ldrb	r3, [r7, #7]
 8024f90:	4013      	ands	r3, r2
 8024f92:	71fb      	strb	r3, [r7, #7]

	//driverInitResult &= dac_driver_init();
	driverInitResult &= drv_dacInit();
 8024f94:	f010 fb36 	bl	8035604 <drv_dacInit>
 8024f98:	4603      	mov	r3, r0
 8024f9a:	461a      	mov	r2, r3
 8024f9c:	79fb      	ldrb	r3, [r7, #7]
 8024f9e:	4013      	ands	r3, r2
 8024fa0:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= drv_dmaInit();
 8024fa2:	f010 fcd3 	bl	803594c <drv_dmaInit>
 8024fa6:	4603      	mov	r3, r0
 8024fa8:	461a      	mov	r2, r3
 8024faa:	79fb      	ldrb	r3, [r7, #7]
 8024fac:	4013      	ands	r3, r2
 8024fae:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_spiInit();
 8024fb0:	f012 f9a2 	bl	80372f8 <drv_spiInit>
 8024fb4:	4603      	mov	r3, r0
 8024fb6:	461a      	mov	r2, r3
 8024fb8:	79fb      	ldrb	r3, [r7, #7]
 8024fba:	4013      	ands	r3, r2
 8024fbc:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_uartInit();
 8024fbe:	f013 fa53 	bl	8038468 <drv_uartInit>
 8024fc2:	4603      	mov	r3, r0
 8024fc4:	461a      	mov	r2, r3
 8024fc6:	79fb      	ldrb	r3, [r7, #7]
 8024fc8:	4013      	ands	r3, r2
 8024fca:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_itInit();
 8024fcc:	f011 ffe2 	bl	8036f94 <drv_itInit>
 8024fd0:	4603      	mov	r3, r0
 8024fd2:	461a      	mov	r2, r3
 8024fd4:	79fb      	ldrb	r3, [r7, #7]
 8024fd6:	4013      	ands	r3, r2
 8024fd8:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= lm75_driver_init();
 8024fda:	f001 f972 	bl	80262c2 <lm75_driver_init>
 8024fde:	4603      	mov	r3, r0
 8024fe0:	461a      	mov	r2, r3
 8024fe2:	79fb      	ldrb	r3, [r7, #7]
 8024fe4:	4013      	ands	r3, r2
 8024fe6:	71fb      	strb	r3, [r7, #7]

	gos_kernelRegisterSysTickHook(sysTickHook);
 8024fe8:	4803      	ldr	r0, [pc, #12]	; (8024ff8 <driver_init+0xd0>)
 8024fea:	f015 fad5 	bl	803a598 <gos_kernelRegisterSysTickHook>

	return driverInitResult;
 8024fee:	79fb      	ldrb	r3, [r7, #7]
}
 8024ff0:	4618      	mov	r0, r3
 8024ff2:	3708      	adds	r7, #8
 8024ff4:	46bd      	mov	sp, r7
 8024ff6:	bd80      	pop	{r7, pc}
 8024ff8:	08024ffd 	.word	0x08024ffd

08024ffc <sysTickHook>:

GOS_STATIC void_t sysTickHook (void_t)
{
 8024ffc:	b580      	push	{r7, lr}
 8024ffe:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8025000:	f003 fa78 	bl	80284f4 <HAL_IncTick>
}
 8025004:	bf00      	nop
 8025006:	bd80      	pop	{r7, pc}

08025008 <file_driver_create_file>:
 *      Author: Gabor
 */
#include "file_driver.h"

gos_result_t file_driver_create_file (char_t* fileName)
{
 8025008:	b580      	push	{r7, lr}
 802500a:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 802500e:	af00      	add	r7, sp, #0
 8025010:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025014:	f843 0c3c 	str.w	r0, [r3, #-60]
	gos_result_t createFileResult = GOS_ERROR;
 8025018:	23ae      	movs	r3, #174	; 0xae
 802501a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 802501e:	f102 021f 	add.w	r2, r2, #31
 8025022:	7013      	strb	r3, [r2, #0]
	FIL fil;

	/* Open file */
	if (fileName != NULL &&
 8025024:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025028:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 802502c:	2b00      	cmp	r3, #0
 802502e:	d014      	beq.n	802505a <file_driver_create_file+0x52>
		f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE) == FR_OK)
 8025030:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025034:	4619      	mov	r1, r3
 8025036:	f107 0320 	add.w	r3, r7, #32
 802503a:	3b14      	subs	r3, #20
 802503c:	2213      	movs	r2, #19
 802503e:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8025042:	4618      	mov	r0, r3
 8025044:	f00e fdfa 	bl	8033c3c <f_open>
 8025048:	4603      	mov	r3, r0
	if (fileName != NULL &&
 802504a:	2b00      	cmp	r3, #0
 802504c:	d105      	bne.n	802505a <file_driver_create_file+0x52>
	{
		createFileResult = GOS_SUCCESS;
 802504e:	2355      	movs	r3, #85	; 0x55
 8025050:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8025054:	f102 021f 	add.w	r2, r2, #31
 8025058:	7013      	strb	r3, [r2, #0]
	}

	/* Close file */
	(void_t) f_close(&fil);
 802505a:	f107 0320 	add.w	r3, r7, #32
 802505e:	3b14      	subs	r3, #20
 8025060:	4618      	mov	r0, r3
 8025062:	f00f fb28 	bl	80346b6 <f_close>

	return createFileResult;
 8025066:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 802506a:	f103 031f 	add.w	r3, r3, #31
 802506e:	781b      	ldrb	r3, [r3, #0]
}
 8025070:	4618      	mov	r0, r3
 8025072:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8025076:	46bd      	mov	sp, r7
 8025078:	bd80      	pop	{r7, pc}

0802507a <file_driver_write_file>:

gos_result_t file_driver_write_file (char_t* fileName, void_t* pData, u16_t dataSize)
{
 802507a:	b580      	push	{r7, lr}
 802507c:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8025080:	b082      	sub	sp, #8
 8025082:	af00      	add	r7, sp, #0
 8025084:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8025088:	f843 0c3c 	str.w	r0, [r3, #-60]
 802508c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8025090:	f843 1c40 	str.w	r1, [r3, #-64]
 8025094:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8025098:	f823 2c42 	strh.w	r2, [r3, #-66]
	gos_result_t writeFileResult = GOS_ERROR;
 802509c:	23ae      	movs	r3, #174	; 0xae
 802509e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80250a2:	f102 0207 	add.w	r2, r2, #7
 80250a6:	7013      	strb	r3, [r2, #0]
	UINT bw;
	FIL fil;

	/* Create file with read and write access and open it */
	if (fileName != NULL && pData != NULL &&
 80250a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80250ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80250b0:	2b00      	cmp	r3, #0
 80250b2:	d02c      	beq.n	802510e <file_driver_write_file+0x94>
 80250b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80250b8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80250bc:	2b00      	cmp	r3, #0
 80250be:	d026      	beq.n	802510e <file_driver_write_file+0x94>
		f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE) == FR_OK &&
 80250c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80250c4:	4619      	mov	r1, r3
 80250c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80250ca:	3b18      	subs	r3, #24
 80250cc:	2213      	movs	r2, #19
 80250ce:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 80250d2:	4618      	mov	r0, r3
 80250d4:	f00e fdb2 	bl	8033c3c <f_open>
 80250d8:	4603      	mov	r3, r0
	if (fileName != NULL && pData != NULL &&
 80250da:	2b00      	cmp	r3, #0
 80250dc:	d117      	bne.n	802510e <file_driver_write_file+0x94>
		f_write(&fil, pData, (UINT)dataSize, &bw) == FR_OK)
 80250de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80250e2:	f833 2c42 	ldrh.w	r2, [r3, #-66]
 80250e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80250ea:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80250ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80250f2:	3818      	subs	r0, #24
 80250f4:	f851 1c40 	ldr.w	r1, [r1, #-64]
 80250f8:	f00f f8cb 	bl	8034292 <f_write>
 80250fc:	4603      	mov	r3, r0
		f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE) == FR_OK &&
 80250fe:	2b00      	cmp	r3, #0
 8025100:	d105      	bne.n	802510e <file_driver_write_file+0x94>
	{
		writeFileResult = GOS_SUCCESS;
 8025102:	2355      	movs	r3, #85	; 0x55
 8025104:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8025108:	f102 0207 	add.w	r2, r2, #7
 802510c:	7013      	strb	r3, [r2, #0]
	}
	/* Close file */
	f_close(&fil);
 802510e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025112:	3b18      	subs	r3, #24
 8025114:	4618      	mov	r0, r3
 8025116:	f00f face 	bl	80346b6 <f_close>

	return writeFileResult;
 802511a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 802511e:	f103 0307 	add.w	r3, r3, #7
 8025122:	781b      	ldrb	r3, [r3, #0]
}
 8025124:	4618      	mov	r0, r3
 8025126:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 802512a:	3708      	adds	r7, #8
 802512c:	46bd      	mov	sp, r7
 802512e:	bd80      	pop	{r7, pc}

08025130 <file_driver_read_file>:

gos_result_t file_driver_read_file (char_t* fileName, void_t* pBuffer)
{
 8025130:	b580      	push	{r7, lr}
 8025132:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8025136:	af00      	add	r7, sp, #0
 8025138:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802513c:	f843 0c3c 	str.w	r0, [r3, #-60]
 8025140:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025144:	f843 1c40 	str.w	r1, [r3, #-64]
	gos_result_t readFileResult = GOS_ERROR;
 8025148:	23ae      	movs	r3, #174	; 0xae
 802514a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 802514e:	f102 021f 	add.w	r2, r2, #31
 8025152:	7013      	strb	r3, [r2, #0]
	FIL fil;
	UINT br;

	/* Open file to read */
	/* Read data from the file */
	if (fileName != NULL && pBuffer != NULL &&
 8025154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025158:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 802515c:	2b00      	cmp	r3, #0
 802515e:	d02d      	beq.n	80251bc <file_driver_read_file+0x8c>
 8025160:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025164:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8025168:	2b00      	cmp	r3, #0
 802516a:	d027      	beq.n	80251bc <file_driver_read_file+0x8c>
		f_open(&fil, fileName, FA_READ) == FR_OK &&
 802516c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8025170:	4619      	mov	r1, r3
 8025172:	f107 0320 	add.w	r3, r7, #32
 8025176:	3b14      	subs	r3, #20
 8025178:	2201      	movs	r2, #1
 802517a:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 802517e:	4618      	mov	r0, r3
 8025180:	f00e fd5c 	bl	8033c3c <f_open>
 8025184:	4603      	mov	r3, r0
	if (fileName != NULL && pBuffer != NULL &&
 8025186:	2b00      	cmp	r3, #0
 8025188:	d118      	bne.n	80251bc <file_driver_read_file+0x8c>
		f_read(&fil, pBuffer, fil.obj.objsize, &br) == FR_OK)
 802518a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802518e:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8025192:	f107 0320 	add.w	r3, r7, #32
 8025196:	3b18      	subs	r3, #24
 8025198:	f107 0140 	add.w	r1, r7, #64	; 0x40
 802519c:	f107 0020 	add.w	r0, r7, #32
 80251a0:	3814      	subs	r0, #20
 80251a2:	f851 1c40 	ldr.w	r1, [r1, #-64]
 80251a6:	f00e ff15 	bl	8033fd4 <f_read>
 80251aa:	4603      	mov	r3, r0
		f_open(&fil, fileName, FA_READ) == FR_OK &&
 80251ac:	2b00      	cmp	r3, #0
 80251ae:	d105      	bne.n	80251bc <file_driver_read_file+0x8c>
	{
		readFileResult = GOS_SUCCESS;
 80251b0:	2355      	movs	r3, #85	; 0x55
 80251b2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80251b6:	f102 021f 	add.w	r2, r2, #31
 80251ba:	7013      	strb	r3, [r2, #0]
	}
	/* Close file */
	f_close(&fil);
 80251bc:	f107 0320 	add.w	r3, r7, #32
 80251c0:	3b14      	subs	r3, #20
 80251c2:	4618      	mov	r0, r3
 80251c4:	f00f fa77 	bl	80346b6 <f_close>

	return readFileResult;
 80251c8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80251cc:	f103 031f 	add.w	r3, r3, #31
 80251d0:	781b      	ldrb	r3, [r3, #0]
}
 80251d2:	4618      	mov	r0, r3
 80251d4:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80251d8:	46bd      	mov	sp, r7
 80251da:	bd80      	pop	{r7, pc}

080251dc <ili9341_init>:
#endif
void_t ili9341_init(
		ili9341_screen_orientation_t orientation,
		ili9341_touch_support_t   touch_support,
		ili9341_touch_normalize_t touch_normalize)
{
 80251dc:	b590      	push	{r4, r7, lr}
 80251de:	b097      	sub	sp, #92	; 0x5c
 80251e0:	af00      	add	r7, sp, #0
 80251e2:	4603      	mov	r3, r0
 80251e4:	71fb      	strb	r3, [r7, #7]
 80251e6:	460b      	mov	r3, r1
 80251e8:	71bb      	strb	r3, [r7, #6]
 80251ea:	4613      	mov	r3, r2
 80251ec:	717b      	strb	r3, [r7, #5]
  //ili9341_t *lcd = NULL;
	gos_mutexInit(&ili9341Mutex);
 80251ee:	483a      	ldr	r0, [pc, #232]	; (80252d8 <ili9341_init+0xfc>)
 80251f0:	f019 f888 	bl	803e304 <gos_mutexInit>

  //if (NULL != spi_hal) {
	{

    if ( //(NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 80251f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80251f8:	2b00      	cmp	r3, #0
 80251fa:	db69      	blt.n	80252d0 <ili9341_init+0xf4>
         //(NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
         //(NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 80251fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025200:	2b03      	cmp	r3, #3
 8025202:	dc65      	bgt.n	80252d0 <ili9341_init+0xf4>
          //lcd->tft_select_port      = tft_select_port;
          //lcd->tft_select_pin       = tft_select_pin;
          //lcd->data_command_port    = data_command_port;
          //lcd->data_command_pin     = data_command_pin;

          lcd.orientation          = orientation;
 8025204:	4a35      	ldr	r2, [pc, #212]	; (80252dc <ili9341_init+0x100>)
 8025206:	79fb      	ldrb	r3, [r7, #7]
 8025208:	7013      	strb	r3, [r2, #0]
          lcd.screen_size          = ili9341_screen_size(orientation);
 802520a:	4c34      	ldr	r4, [pc, #208]	; (80252dc <ili9341_init+0x100>)
 802520c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025210:	4618      	mov	r0, r3
 8025212:	f000 fa93 	bl	802573c <ili9341_screen_size>
 8025216:	4603      	mov	r3, r0
 8025218:	461a      	mov	r2, r3
 802521a:	8062      	strh	r2, [r4, #2]
 802521c:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8025220:	80a3      	strh	r3, [r4, #4]

          if (touch_support) {
 8025222:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8025226:	2b00      	cmp	r3, #0
 8025228:	d028      	beq.n	802527c <ili9341_init+0xa0>
            //lcd->touch_select_port    = touch_select_port;
            //lcd->touch_select_pin     = touch_select_pin;
            //lcd->touch_irq_port       = touch_irq_port;
            //lcd->touch_irq_pin        = touch_irq_pin;

            lcd.touch_support        = touch_support;
 802522a:	4a2c      	ldr	r2, [pc, #176]	; (80252dc <ili9341_init+0x100>)
 802522c:	79bb      	ldrb	r3, [r7, #6]
 802522e:	7193      	strb	r3, [r2, #6]
            lcd.touch_normalize      = touch_normalize;
 8025230:	4a2a      	ldr	r2, [pc, #168]	; (80252dc <ili9341_init+0x100>)
 8025232:	797b      	ldrb	r3, [r7, #5]
 8025234:	71d3      	strb	r3, [r2, #7]
            lcd.touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8025236:	4b29      	ldr	r3, [pc, #164]	; (80252dc <ili9341_init+0x100>)
 8025238:	2200      	movs	r2, #0
 802523a:	811a      	strh	r2, [r3, #8]
 802523c:	4b27      	ldr	r3, [pc, #156]	; (80252dc <ili9341_init+0x100>)
 802523e:	2200      	movs	r2, #0
 8025240:	815a      	strh	r2, [r3, #10]
            lcd.touch_calibration    = itcNONE;
 8025242:	4b26      	ldr	r3, [pc, #152]	; (80252dc <ili9341_init+0x100>)
 8025244:	22ff      	movs	r2, #255	; 0xff
 8025246:	731a      	strb	r2, [r3, #12]
            lcd.touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8025248:	4b24      	ldr	r3, [pc, #144]	; (80252dc <ili9341_init+0x100>)
 802524a:	330e      	adds	r3, #14
 802524c:	2200      	movs	r2, #0
 802524e:	601a      	str	r2, [r3, #0]
 8025250:	605a      	str	r2, [r3, #4]
            lcd.touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 8025252:	4b22      	ldr	r3, [pc, #136]	; (80252dc <ili9341_init+0x100>)
 8025254:	3318      	adds	r3, #24
 8025256:	2200      	movs	r2, #0
 8025258:	601a      	str	r2, [r3, #0]
 802525a:	605a      	str	r2, [r3, #4]
 802525c:	609a      	str	r2, [r3, #8]
 802525e:	60da      	str	r2, [r3, #12]
 8025260:	611a      	str	r2, [r3, #16]
 8025262:	615a      	str	r2, [r3, #20]
 8025264:	619a      	str	r2, [r3, #24]

            lcd.touch_pressed        = itpNotPressed;
 8025266:	4b1d      	ldr	r3, [pc, #116]	; (80252dc <ili9341_init+0x100>)
 8025268:	2200      	movs	r2, #0
 802526a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            lcd.touch_pressed_begin  = NULL;
 802526e:	4b1b      	ldr	r3, [pc, #108]	; (80252dc <ili9341_init+0x100>)
 8025270:	2200      	movs	r2, #0
 8025272:	639a      	str	r2, [r3, #56]	; 0x38
            lcd.touch_pressed_end    = NULL;
 8025274:	4b19      	ldr	r3, [pc, #100]	; (80252dc <ili9341_init+0x100>)
 8025276:	2200      	movs	r2, #0
 8025278:	63da      	str	r2, [r3, #60]	; 0x3c
 802527a:	e027      	b.n	80252cc <ili9341_init+0xf0>
            //lcd->touch_select_port    = NULL;
            //lcd->touch_select_pin     = 0;
            //lcd->touch_irq_port       = NULL;
            //lcd->touch_irq_pin        = 0;

            lcd.touch_support        = touch_support;
 802527c:	4a17      	ldr	r2, [pc, #92]	; (80252dc <ili9341_init+0x100>)
 802527e:	79bb      	ldrb	r3, [r7, #6]
 8025280:	7193      	strb	r3, [r2, #6]
            lcd.touch_normalize      = itnNONE;
 8025282:	4b16      	ldr	r3, [pc, #88]	; (80252dc <ili9341_init+0x100>)
 8025284:	22ff      	movs	r2, #255	; 0xff
 8025286:	71da      	strb	r2, [r3, #7]
            lcd.touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8025288:	4b14      	ldr	r3, [pc, #80]	; (80252dc <ili9341_init+0x100>)
 802528a:	2200      	movs	r2, #0
 802528c:	811a      	strh	r2, [r3, #8]
 802528e:	4b13      	ldr	r3, [pc, #76]	; (80252dc <ili9341_init+0x100>)
 8025290:	2200      	movs	r2, #0
 8025292:	815a      	strh	r2, [r3, #10]
            lcd.touch_calibration    = itcNONE;
 8025294:	4b11      	ldr	r3, [pc, #68]	; (80252dc <ili9341_init+0x100>)
 8025296:	22ff      	movs	r2, #255	; 0xff
 8025298:	731a      	strb	r2, [r3, #12]
            lcd.touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 802529a:	4b10      	ldr	r3, [pc, #64]	; (80252dc <ili9341_init+0x100>)
 802529c:	330e      	adds	r3, #14
 802529e:	2200      	movs	r2, #0
 80252a0:	601a      	str	r2, [r3, #0]
 80252a2:	605a      	str	r2, [r3, #4]
            lcd.touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 80252a4:	4b0d      	ldr	r3, [pc, #52]	; (80252dc <ili9341_init+0x100>)
 80252a6:	3318      	adds	r3, #24
 80252a8:	2200      	movs	r2, #0
 80252aa:	601a      	str	r2, [r3, #0]
 80252ac:	605a      	str	r2, [r3, #4]
 80252ae:	609a      	str	r2, [r3, #8]
 80252b0:	60da      	str	r2, [r3, #12]
 80252b2:	611a      	str	r2, [r3, #16]
 80252b4:	615a      	str	r2, [r3, #20]
 80252b6:	619a      	str	r2, [r3, #24]

            lcd.touch_pressed        = itpNONE;
 80252b8:	4b08      	ldr	r3, [pc, #32]	; (80252dc <ili9341_init+0x100>)
 80252ba:	22ff      	movs	r2, #255	; 0xff
 80252bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            lcd.touch_pressed_begin  = NULL;
 80252c0:	4b06      	ldr	r3, [pc, #24]	; (80252dc <ili9341_init+0x100>)
 80252c2:	2200      	movs	r2, #0
 80252c4:	639a      	str	r2, [r3, #56]	; 0x38
            lcd.touch_pressed_end    = NULL;
 80252c6:	4b05      	ldr	r3, [pc, #20]	; (80252dc <ili9341_init+0x100>)
 80252c8:	2200      	movs	r2, #0
 80252ca:	63da      	str	r2, [r3, #60]	; 0x3c
          }

          ili9341_initialize();
 80252cc:	f000 f904 	bl	80254d8 <ili9341_initialize>
      }
    }
  }

  //return lcd;
}
 80252d0:	bf00      	nop
 80252d2:	375c      	adds	r7, #92	; 0x5c
 80252d4:	46bd      	mov	sp, r7
 80252d6:	bd90      	pop	{r4, r7, pc}
 80252d8:	200057d4 	.word	0x200057d4
 80252dc:	20005794 	.word	0x20005794

080252e0 <ili9341_spi_tft_select>:
              * (touch_a_x * touch_b_y - touch_b_x * touch_a_y) ) )
      ) / delta + 0.5;
}

void ili9341_spi_tft_select()
{
 80252e0:	b580      	push	{r7, lr}
 80252e2:	af00      	add	r7, sp, #0
  // clear bit indicates the TFT is -active- slave SPI device
  //HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_CLR__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_CS), __GPIO_PIN_CLR__);
  drv_gpioWritePin(IO_DISPL_CS, __GPIO_PIN_CLR__);
 80252e4:	2100      	movs	r1, #0
 80252e6:	2008      	movs	r0, #8
 80252e8:	f011 f8a6 	bl	8036438 <drv_gpioWritePin>
}
 80252ec:	bf00      	nop
 80252ee:	bd80      	pop	{r7, pc}

080252f0 <ili9341_spi_tft_release>:

void ili9341_spi_tft_release()
{
 80252f0:	b580      	push	{r7, lr}
 80252f2:	af00      	add	r7, sp, #0
  // set bit indicates the TFT is -inactive- slave SPI device
  //HAL_GPIO_WritePin(lcd->tft_select_port, lcd->tft_select_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_CS), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_CS, __GPIO_PIN_SET__);
 80252f4:	2101      	movs	r1, #1
 80252f6:	2008      	movs	r0, #8
 80252f8:	f011 f89e 	bl	8036438 <drv_gpioWritePin>
}
 80252fc:	bf00      	nop
 80252fe:	bd80      	pop	{r7, pc}

08025300 <ili9341_spi_touch_select>:

void ili9341_spi_touch_select()
{
 8025300:	b580      	push	{r7, lr}
 8025302:	af00      	add	r7, sp, #0
  // clear bit indicates the touch screen is -active- slave SPI device
  //HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_CLR__);
  //drv_gpio_write_pin(iodef_get(IO_TOUCH_CS), __GPIO_PIN_CLR__);
  drv_gpioWritePin(IO_TOUCH_CS, __GPIO_PIN_CLR__);
 8025304:	2100      	movs	r1, #0
 8025306:	200b      	movs	r0, #11
 8025308:	f011 f896 	bl	8036438 <drv_gpioWritePin>
}
 802530c:	bf00      	nop
 802530e:	bd80      	pop	{r7, pc}

08025310 <ili9341_spi_touch_release>:

void ili9341_spi_touch_release()
{
 8025310:	b580      	push	{r7, lr}
 8025312:	af00      	add	r7, sp, #0
  // set bit indicates the touch screen is -inactive- slave SPI device
  //HAL_GPIO_WritePin(lcd->touch_select_port, lcd->touch_select_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_TOUCH_CS), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_TOUCH_CS, __GPIO_PIN_SET__);
 8025314:	2101      	movs	r1, #1
 8025316:	200b      	movs	r0, #11
 8025318:	f011 f88e 	bl	8036438 <drv_gpioWritePin>
}
 802531c:	bf00      	nop
 802531e:	bd80      	pop	{r7, pc}

08025320 <ili9341_spi_slave_select>:

void ili9341_spi_slave_select(ili9341_spi_slave_t spi_slave)
{
 8025320:	b580      	push	{r7, lr}
 8025322:	b082      	sub	sp, #8
 8025324:	af00      	add	r7, sp, #0
 8025326:	4603      	mov	r3, r0
 8025328:	71fb      	strb	r3, [r7, #7]
  switch (spi_slave) {
 802532a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802532e:	2b00      	cmp	r3, #0
 8025330:	d002      	beq.n	8025338 <ili9341_spi_slave_select+0x18>
 8025332:	2b01      	cmp	r3, #1
 8025334:	d003      	beq.n	802533e <ili9341_spi_slave_select+0x1e>
    case issDisplayTFT:  ili9341_spi_tft_select();   break;
    case issTouchScreen: ili9341_spi_touch_select(); break;
    default: break;
 8025336:	e005      	b.n	8025344 <ili9341_spi_slave_select+0x24>
    case issDisplayTFT:  ili9341_spi_tft_select();   break;
 8025338:	f7ff ffd2 	bl	80252e0 <ili9341_spi_tft_select>
 802533c:	e002      	b.n	8025344 <ili9341_spi_slave_select+0x24>
    case issTouchScreen: ili9341_spi_touch_select(); break;
 802533e:	f7ff ffdf 	bl	8025300 <ili9341_spi_touch_select>
 8025342:	bf00      	nop
  }
}
 8025344:	bf00      	nop
 8025346:	3708      	adds	r7, #8
 8025348:	46bd      	mov	sp, r7
 802534a:	bd80      	pop	{r7, pc}

0802534c <ili9341_spi_slave_release>:

void ili9341_spi_slave_release(ili9341_spi_slave_t spi_slave)
{
 802534c:	b580      	push	{r7, lr}
 802534e:	b082      	sub	sp, #8
 8025350:	af00      	add	r7, sp, #0
 8025352:	4603      	mov	r3, r0
 8025354:	71fb      	strb	r3, [r7, #7]
  switch (spi_slave) {
 8025356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802535a:	2b00      	cmp	r3, #0
 802535c:	d002      	beq.n	8025364 <ili9341_spi_slave_release+0x18>
 802535e:	2b01      	cmp	r3, #1
 8025360:	d003      	beq.n	802536a <ili9341_spi_slave_release+0x1e>

    case issDisplayTFT:  ili9341_spi_tft_release();   break;
    case issTouchScreen: ili9341_spi_touch_release(); break;
    default: break;
 8025362:	e005      	b.n	8025370 <ili9341_spi_slave_release+0x24>
    case issDisplayTFT:  ili9341_spi_tft_release();   break;
 8025364:	f7ff ffc4 	bl	80252f0 <ili9341_spi_tft_release>
 8025368:	e002      	b.n	8025370 <ili9341_spi_slave_release+0x24>
    case issTouchScreen: ili9341_spi_touch_release(); break;
 802536a:	f7ff ffd1 	bl	8025310 <ili9341_spi_touch_release>
 802536e:	bf00      	nop
  }
}
 8025370:	bf00      	nop
 8025372:	3708      	adds	r7, #8
 8025374:	46bd      	mov	sp, r7
 8025376:	bd80      	pop	{r7, pc}

08025378 <ili9341_spi_write_command>:

void ili9341_spi_write_command(ili9341_spi_slave_t spi_slave, uint8_t command)
{
 8025378:	b580      	push	{r7, lr}
 802537a:	b084      	sub	sp, #16
 802537c:	af02      	add	r7, sp, #8
 802537e:	4603      	mov	r3, r0
 8025380:	460a      	mov	r2, r1
 8025382:	71fb      	strb	r3, [r7, #7]
 8025384:	4613      	mov	r3, r2
 8025386:	71bb      	strb	r3, [r7, #6]
  __SLAVE_SELECT(spi_slave);
 8025388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802538c:	2b00      	cmp	r3, #0
 802538e:	db08      	blt.n	80253a2 <ili9341_spi_write_command+0x2a>
 8025390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025394:	2b01      	cmp	r3, #1
 8025396:	dc04      	bgt.n	80253a2 <ili9341_spi_write_command+0x2a>
 8025398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802539c:	4618      	mov	r0, r3
 802539e:	f7ff ffbf 	bl	8025320 <ili9341_spi_slave_select>

  //HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_CLR__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_DC), __GPIO_PIN_CLR__);
  drv_gpioWritePin(IO_DISPL_DC, __GPIO_PIN_CLR__);
 80253a2:	2100      	movs	r1, #0
 80253a4:	2009      	movs	r0, #9
 80253a6:	f011 f847 	bl	8036438 <drv_gpioWritePin>
  //HAL_SPI_Transmit(lcd->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
  //spi_driver_transmit_blocking(&command, sizeof(command));
  drv_spiTransmitBlocking(DRV_SPI_INSTANCE_3, &command, sizeof(command), /*GOS_MUTEX_ENDLESS_TMO*/3000, 5000);
 80253aa:	1db9      	adds	r1, r7, #6
 80253ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80253b0:	9300      	str	r3, [sp, #0]
 80253b2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80253b6:	2201      	movs	r2, #1
 80253b8:	2002      	movs	r0, #2
 80253ba:	f012 f929 	bl	8037610 <drv_spiTransmitBlocking>
  //drv_spiTransmitDMA(DRV_SPI_INSTANCE_3, &command, sizeof(command), GOS_MUTEX_ENDLESS_TMO, 1000);

  __SLAVE_RELEASE(spi_slave);
 80253be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80253c2:	2b00      	cmp	r3, #0
 80253c4:	db08      	blt.n	80253d8 <ili9341_spi_write_command+0x60>
 80253c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80253ca:	2b01      	cmp	r3, #1
 80253cc:	dc04      	bgt.n	80253d8 <ili9341_spi_write_command+0x60>
 80253ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80253d2:	4618      	mov	r0, r3
 80253d4:	f7ff ffba 	bl	802534c <ili9341_spi_slave_release>
}
 80253d8:	bf00      	nop
 80253da:	3708      	adds	r7, #8
 80253dc:	46bd      	mov	sp, r7
 80253de:	bd80      	pop	{r7, pc}

080253e0 <ili9341_spi_write_data>:

void ili9341_spi_write_data(ili9341_spi_slave_t spi_slave, uint16_t data_sz, uint8_t data[])
{
 80253e0:	b580      	push	{r7, lr}
 80253e2:	b084      	sub	sp, #16
 80253e4:	af02      	add	r7, sp, #8
 80253e6:	4603      	mov	r3, r0
 80253e8:	603a      	str	r2, [r7, #0]
 80253ea:	71fb      	strb	r3, [r7, #7]
 80253ec:	460b      	mov	r3, r1
 80253ee:	80bb      	strh	r3, [r7, #4]
  __SLAVE_SELECT(spi_slave);
 80253f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80253f4:	2b00      	cmp	r3, #0
 80253f6:	db08      	blt.n	802540a <ili9341_spi_write_data+0x2a>
 80253f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80253fc:	2b01      	cmp	r3, #1
 80253fe:	dc04      	bgt.n	802540a <ili9341_spi_write_data+0x2a>
 8025400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025404:	4618      	mov	r0, r3
 8025406:	f7ff ff8b 	bl	8025320 <ili9341_spi_slave_select>

  //HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_DC), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_DC, __GPIO_PIN_SET__);
 802540a:	2101      	movs	r1, #1
 802540c:	2009      	movs	r0, #9
 802540e:	f011 f813 	bl	8036438 <drv_gpioWritePin>
  //HAL_SPI_Transmit(lcd->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
  //spi_driver_transmit_blocking(data, data_sz);
  drv_spiTransmitBlocking(DRV_SPI_INSTANCE_3, data, data_sz, /*GOS_MUTEX_ENDLESS_TMO*/3000, 5000);
 8025412:	88ba      	ldrh	r2, [r7, #4]
 8025414:	f241 3388 	movw	r3, #5000	; 0x1388
 8025418:	9300      	str	r3, [sp, #0]
 802541a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 802541e:	6839      	ldr	r1, [r7, #0]
 8025420:	2002      	movs	r0, #2
 8025422:	f012 f8f5 	bl	8037610 <drv_spiTransmitBlocking>
  //drv_spiTransmitDMA(DRV_SPI_INSTANCE_3, data, data_sz, GOS_MUTEX_ENDLESS_TMO, 1000);


  __SLAVE_RELEASE(spi_slave);
 8025426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802542a:	2b00      	cmp	r3, #0
 802542c:	db08      	blt.n	8025440 <ili9341_spi_write_data+0x60>
 802542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025432:	2b01      	cmp	r3, #1
 8025434:	dc04      	bgt.n	8025440 <ili9341_spi_write_data+0x60>
 8025436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802543a:	4618      	mov	r0, r3
 802543c:	f7ff ff86 	bl	802534c <ili9341_spi_slave_release>
}
 8025440:	bf00      	nop
 8025442:	3708      	adds	r7, #8
 8025444:	46bd      	mov	sp, r7
 8025446:	bd80      	pop	{r7, pc}

08025448 <ili9341_spi_write_command_data>:
  __SLAVE_RELEASE(spi_slave);
}

void ili9341_spi_write_command_data(
    ili9341_spi_slave_t spi_slave, uint8_t command, uint16_t data_sz, uint8_t data[])
{
 8025448:	b580      	push	{r7, lr}
 802544a:	b082      	sub	sp, #8
 802544c:	af00      	add	r7, sp, #0
 802544e:	603b      	str	r3, [r7, #0]
 8025450:	4603      	mov	r3, r0
 8025452:	71fb      	strb	r3, [r7, #7]
 8025454:	460b      	mov	r3, r1
 8025456:	71bb      	strb	r3, [r7, #6]
 8025458:	4613      	mov	r3, r2
 802545a:	80bb      	strh	r3, [r7, #4]
  __SLAVE_SELECT(spi_slave);
 802545c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025460:	2b00      	cmp	r3, #0
 8025462:	db08      	blt.n	8025476 <ili9341_spi_write_command_data+0x2e>
 8025464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025468:	2b01      	cmp	r3, #1
 802546a:	dc04      	bgt.n	8025476 <ili9341_spi_write_command_data+0x2e>
 802546c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025470:	4618      	mov	r0, r3
 8025472:	f7ff ff55 	bl	8025320 <ili9341_spi_slave_select>

  ili9341_spi_write_command(issNONE, command);
 8025476:	79bb      	ldrb	r3, [r7, #6]
 8025478:	4619      	mov	r1, r3
 802547a:	f04f 30ff 	mov.w	r0, #4294967295
 802547e:	f7ff ff7b 	bl	8025378 <ili9341_spi_write_command>
  ili9341_spi_write_data(issNONE, data_sz, data);
 8025482:	88bb      	ldrh	r3, [r7, #4]
 8025484:	683a      	ldr	r2, [r7, #0]
 8025486:	4619      	mov	r1, r3
 8025488:	f04f 30ff 	mov.w	r0, #4294967295
 802548c:	f7ff ffa8 	bl	80253e0 <ili9341_spi_write_data>

  __SLAVE_RELEASE(spi_slave);
 8025490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8025494:	2b00      	cmp	r3, #0
 8025496:	db08      	blt.n	80254aa <ili9341_spi_write_command_data+0x62>
 8025498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802549c:	2b01      	cmp	r3, #1
 802549e:	dc04      	bgt.n	80254aa <ili9341_spi_write_command_data+0x62>
 80254a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80254a4:	4618      	mov	r0, r3
 80254a6:	f7ff ff51 	bl	802534c <ili9341_spi_slave_release>
}
 80254aa:	bf00      	nop
 80254ac:	3708      	adds	r7, #8
 80254ae:	46bd      	mov	sp, r7
 80254b0:	bd80      	pop	{r7, pc}

080254b2 <ili9341_reset>:

// -------------------------------------------------------- private functions --

static void ili9341_reset()
{
 80254b2:	b580      	push	{r7, lr}
 80254b4:	af00      	add	r7, sp, #0
  // the reset pin on ILI9341 is active low, so driving low temporarily will
  // reset the device (also resets the touch screen peripheral)
  //HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_CLR__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_RST), __GPIO_PIN_CLR__);
  drv_gpioWritePin(IO_DISPL_RST, __GPIO_PIN_CLR__);
 80254b6:	2100      	movs	r1, #0
 80254b8:	2007      	movs	r0, #7
 80254ba:	f010 ffbd 	bl	8036438 <drv_gpioWritePin>
  gos_taskSleep(200);
 80254be:	20c8      	movs	r0, #200	; 0xc8
 80254c0:	f016 fac6 	bl	803ba50 <gos_taskSleep>
  //HAL_GPIO_WritePin(lcd->reset_port, lcd->reset_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_RST), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_RST, __GPIO_PIN_SET__);
 80254c4:	2101      	movs	r1, #1
 80254c6:	2007      	movs	r0, #7
 80254c8:	f010 ffb6 	bl	8036438 <drv_gpioWritePin>

  // ensure both slave lines are open
  ili9341_spi_tft_release();
 80254cc:	f7ff ff10 	bl	80252f0 <ili9341_spi_tft_release>
  ili9341_spi_touch_release();
 80254d0:	f7ff ff1e 	bl	8025310 <ili9341_spi_touch_release>
}
 80254d4:	bf00      	nop
 80254d6:	bd80      	pop	{r7, pc}

080254d8 <ili9341_initialize>:

static void ili9341_initialize()
{
 80254d8:	b590      	push	{r4, r7, lr}
 80254da:	b09b      	sub	sp, #108	; 0x6c
 80254dc:	af00      	add	r7, sp, #0
  ili9341_reset();
 80254de:	f7ff ffe8 	bl	80254b2 <ili9341_reset>
  ili9341_spi_tft_select();
 80254e2:	f7ff fefd 	bl	80252e0 <ili9341_spi_tft_select>

  // command list is based on https://github.com/martnak/STM32-ILI9341

  // SOFTWARE RESET
  ili9341_spi_write_command(issNONE, 0x01);
 80254e6:	2101      	movs	r1, #1
 80254e8:	f04f 30ff 	mov.w	r0, #4294967295
 80254ec:	f7ff ff44 	bl	8025378 <ili9341_spi_write_command>
  gos_taskSleep(1000);
 80254f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80254f4:	f016 faac 	bl	803ba50 <gos_taskSleep>

  // POWER CONTROL A
  ili9341_spi_write_command_data(issNONE,
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 80254f8:	4a87      	ldr	r2, [pc, #540]	; (8025718 <ili9341_initialize+0x240>)
 80254fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80254fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025502:	6018      	str	r0, [r3, #0]
 8025504:	3304      	adds	r3, #4
 8025506:	7019      	strb	r1, [r3, #0]
  ili9341_spi_write_command_data(issNONE,
 8025508:	f107 0360 	add.w	r3, r7, #96	; 0x60
 802550c:	2205      	movs	r2, #5
 802550e:	21cb      	movs	r1, #203	; 0xcb
 8025510:	f04f 30ff 	mov.w	r0, #4294967295
 8025514:	f7ff ff98 	bl	8025448 <ili9341_spi_write_command_data>

  // POWER CONTROL B
  ili9341_spi_write_command_data(issNONE,
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 8025518:	4a80      	ldr	r2, [pc, #512]	; (802571c <ili9341_initialize+0x244>)
 802551a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802551e:	6812      	ldr	r2, [r2, #0]
 8025520:	4611      	mov	r1, r2
 8025522:	8019      	strh	r1, [r3, #0]
 8025524:	3302      	adds	r3, #2
 8025526:	0c12      	lsrs	r2, r2, #16
 8025528:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(issNONE,
 802552a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802552e:	2203      	movs	r2, #3
 8025530:	21cf      	movs	r1, #207	; 0xcf
 8025532:	f04f 30ff 	mov.w	r0, #4294967295
 8025536:	f7ff ff87 	bl	8025448 <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL A
  ili9341_spi_write_command_data(issNONE,
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 802553a:	4a79      	ldr	r2, [pc, #484]	; (8025720 <ili9341_initialize+0x248>)
 802553c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025540:	6812      	ldr	r2, [r2, #0]
 8025542:	4611      	mov	r1, r2
 8025544:	8019      	strh	r1, [r3, #0]
 8025546:	3302      	adds	r3, #2
 8025548:	0c12      	lsrs	r2, r2, #16
 802554a:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(issNONE,
 802554c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8025550:	2203      	movs	r2, #3
 8025552:	21e8      	movs	r1, #232	; 0xe8
 8025554:	f04f 30ff 	mov.w	r0, #4294967295
 8025558:	f7ff ff76 	bl	8025448 <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL B
  ili9341_spi_write_command_data(issNONE,
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 802555c:	2300      	movs	r3, #0
 802555e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8025562:	2300      	movs	r3, #0
 8025564:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  ili9341_spi_write_command_data(issNONE,
 8025568:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802556c:	2202      	movs	r2, #2
 802556e:	21ea      	movs	r1, #234	; 0xea
 8025570:	f04f 30ff 	mov.w	r0, #4294967295
 8025574:	f7ff ff68 	bl	8025448 <ili9341_spi_write_command_data>

  // POWER ON SEQUENCE CONTROL
  ili9341_spi_write_command_data(issNONE,
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 8025578:	4b6a      	ldr	r3, [pc, #424]	; (8025724 <ili9341_initialize+0x24c>)
 802557a:	681b      	ldr	r3, [r3, #0]
 802557c:	653b      	str	r3, [r7, #80]	; 0x50
  ili9341_spi_write_command_data(issNONE,
 802557e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8025582:	2204      	movs	r2, #4
 8025584:	21ed      	movs	r1, #237	; 0xed
 8025586:	f04f 30ff 	mov.w	r0, #4294967295
 802558a:	f7ff ff5d 	bl	8025448 <ili9341_spi_write_command_data>

  // PUMP RATIO CONTROL
  ili9341_spi_write_command_data(issNONE,
      0xF7, 1, (uint8_t[]){ 0x20 });
 802558e:	2320      	movs	r3, #32
 8025590:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  ili9341_spi_write_command_data(issNONE,
 8025594:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8025598:	2201      	movs	r2, #1
 802559a:	21f7      	movs	r1, #247	; 0xf7
 802559c:	f04f 30ff 	mov.w	r0, #4294967295
 80255a0:	f7ff ff52 	bl	8025448 <ili9341_spi_write_command_data>

  // POWER CONTROL,VRH[5:0]
  ili9341_spi_write_command_data(issNONE,
      0xC0, 1, (uint8_t[]){ 0x23 });
 80255a4:	2323      	movs	r3, #35	; 0x23
 80255a6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  ili9341_spi_write_command_data(issNONE,
 80255aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80255ae:	2201      	movs	r2, #1
 80255b0:	21c0      	movs	r1, #192	; 0xc0
 80255b2:	f04f 30ff 	mov.w	r0, #4294967295
 80255b6:	f7ff ff47 	bl	8025448 <ili9341_spi_write_command_data>

  // POWER CONTROL,SAP[2:0];BT[3:0]
  ili9341_spi_write_command_data(issNONE,
      0xC1, 1, (uint8_t[]){ 0x10 });
 80255ba:	2310      	movs	r3, #16
 80255bc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  ili9341_spi_write_command_data(issNONE,
 80255c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80255c4:	2201      	movs	r2, #1
 80255c6:	21c1      	movs	r1, #193	; 0xc1
 80255c8:	f04f 30ff 	mov.w	r0, #4294967295
 80255cc:	f7ff ff3c 	bl	8025448 <ili9341_spi_write_command_data>

  // VCM CONTROL
  ili9341_spi_write_command_data(issNONE,
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 80255d0:	4b55      	ldr	r3, [pc, #340]	; (8025728 <ili9341_initialize+0x250>)
 80255d2:	881b      	ldrh	r3, [r3, #0]
 80255d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  ili9341_spi_write_command_data(issNONE,
 80255d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80255dc:	2202      	movs	r2, #2
 80255de:	21c5      	movs	r1, #197	; 0xc5
 80255e0:	f04f 30ff 	mov.w	r0, #4294967295
 80255e4:	f7ff ff30 	bl	8025448 <ili9341_spi_write_command_data>

  // VCM CONTROL 2
  ili9341_spi_write_command_data(issNONE,
      0xC7, 1, (uint8_t[]){ 0x86 });
 80255e8:	2386      	movs	r3, #134	; 0x86
 80255ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  ili9341_spi_write_command_data(issNONE,
 80255ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80255f2:	2201      	movs	r2, #1
 80255f4:	21c7      	movs	r1, #199	; 0xc7
 80255f6:	f04f 30ff 	mov.w	r0, #4294967295
 80255fa:	f7ff ff25 	bl	8025448 <ili9341_spi_write_command_data>

  // MEMORY ACCESS CONTROL
  ili9341_spi_write_command_data(issNONE,
      0x36, 1, (uint8_t[]){ 0x48 });
 80255fe:	2348      	movs	r3, #72	; 0x48
 8025600:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  ili9341_spi_write_command_data(issNONE,
 8025604:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8025608:	2201      	movs	r2, #1
 802560a:	2136      	movs	r1, #54	; 0x36
 802560c:	f04f 30ff 	mov.w	r0, #4294967295
 8025610:	f7ff ff1a 	bl	8025448 <ili9341_spi_write_command_data>

  // PIXEL FORMAT
  ili9341_spi_write_command_data(issNONE,
      0x3A, 1, (uint8_t[]){ 0x55 });
 8025614:	2355      	movs	r3, #85	; 0x55
 8025616:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  ili9341_spi_write_command_data(issNONE,
 802561a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802561e:	2201      	movs	r2, #1
 8025620:	213a      	movs	r1, #58	; 0x3a
 8025622:	f04f 30ff 	mov.w	r0, #4294967295
 8025626:	f7ff ff0f 	bl	8025448 <ili9341_spi_write_command_data>

  // FRAME RATIO CONTROL, STANDARD RGB COLOR
  ili9341_spi_write_command_data(issNONE,
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 802562a:	2300      	movs	r3, #0
 802562c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8025630:	2318      	movs	r3, #24
 8025632:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  ili9341_spi_write_command_data(issNONE,
 8025636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802563a:	2202      	movs	r2, #2
 802563c:	21b1      	movs	r1, #177	; 0xb1
 802563e:	f04f 30ff 	mov.w	r0, #4294967295
 8025642:	f7ff ff01 	bl	8025448 <ili9341_spi_write_command_data>

  // DISPLAY FUNCTION CONTROL
  ili9341_spi_write_command_data(issNONE,
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 8025646:	4a39      	ldr	r2, [pc, #228]	; (802572c <ili9341_initialize+0x254>)
 8025648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802564c:	6812      	ldr	r2, [r2, #0]
 802564e:	4611      	mov	r1, r2
 8025650:	8019      	strh	r1, [r3, #0]
 8025652:	3302      	adds	r3, #2
 8025654:	0c12      	lsrs	r2, r2, #16
 8025656:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(issNONE,
 8025658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802565c:	2203      	movs	r2, #3
 802565e:	21b6      	movs	r1, #182	; 0xb6
 8025660:	f04f 30ff 	mov.w	r0, #4294967295
 8025664:	f7ff fef0 	bl	8025448 <ili9341_spi_write_command_data>

  // 3GAMMA FUNCTION DISABLE
  ili9341_spi_write_command_data(issNONE,
      0xF2, 1, (uint8_t[]){ 0x00 });
 8025668:	2300      	movs	r3, #0
 802566a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  ili9341_spi_write_command_data(issNONE,
 802566e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025672:	2201      	movs	r2, #1
 8025674:	21f2      	movs	r1, #242	; 0xf2
 8025676:	f04f 30ff 	mov.w	r0, #4294967295
 802567a:	f7ff fee5 	bl	8025448 <ili9341_spi_write_command_data>

  // GAMMA CURVE SELECTED
  ili9341_spi_write_command_data(issNONE,
      0x26, 1, (uint8_t[]){ 0x01 });
 802567e:	2301      	movs	r3, #1
 8025680:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  ili9341_spi_write_command_data(issNONE,
 8025684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8025688:	2201      	movs	r2, #1
 802568a:	2126      	movs	r1, #38	; 0x26
 802568c:	f04f 30ff 	mov.w	r0, #4294967295
 8025690:	f7ff feda 	bl	8025448 <ili9341_spi_write_command_data>

  // POSITIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(issNONE,
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8025694:	4b26      	ldr	r3, [pc, #152]	; (8025730 <ili9341_initialize+0x258>)
 8025696:	f107 0414 	add.w	r4, r7, #20
 802569a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802569c:	c407      	stmia	r4!, {r0, r1, r2}
 802569e:	8023      	strh	r3, [r4, #0]
 80256a0:	3402      	adds	r4, #2
 80256a2:	0c1b      	lsrs	r3, r3, #16
 80256a4:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(issNONE,
 80256a6:	f107 0314 	add.w	r3, r7, #20
 80256aa:	220f      	movs	r2, #15
 80256ac:	21e0      	movs	r1, #224	; 0xe0
 80256ae:	f04f 30ff 	mov.w	r0, #4294967295
 80256b2:	f7ff fec9 	bl	8025448 <ili9341_spi_write_command_data>
                             0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 });

  // NEGATIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(issNONE,
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80256b6:	4b1f      	ldr	r3, [pc, #124]	; (8025734 <ili9341_initialize+0x25c>)
 80256b8:	1d3c      	adds	r4, r7, #4
 80256ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80256bc:	c407      	stmia	r4!, {r0, r1, r2}
 80256be:	8023      	strh	r3, [r4, #0]
 80256c0:	3402      	adds	r4, #2
 80256c2:	0c1b      	lsrs	r3, r3, #16
 80256c4:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(issNONE,
 80256c6:	1d3b      	adds	r3, r7, #4
 80256c8:	220f      	movs	r2, #15
 80256ca:	21e1      	movs	r1, #225	; 0xe1
 80256cc:	f04f 30ff 	mov.w	r0, #4294967295
 80256d0:	f7ff feba 	bl	8025448 <ili9341_spi_write_command_data>
                             0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F });

  // EXIT SLEEP
  ili9341_spi_write_command(issNONE, 0x11);
 80256d4:	2111      	movs	r1, #17
 80256d6:	f04f 30ff 	mov.w	r0, #4294967295
 80256da:	f7ff fe4d 	bl	8025378 <ili9341_spi_write_command>
  gos_taskSleep(120);
 80256de:	2078      	movs	r0, #120	; 0x78
 80256e0:	f016 f9b6 	bl	803ba50 <gos_taskSleep>

  // TURN ON DISPLAY
  ili9341_spi_write_command(issNONE, 0x29);
 80256e4:	2129      	movs	r1, #41	; 0x29
 80256e6:	f04f 30ff 	mov.w	r0, #4294967295
 80256ea:	f7ff fe45 	bl	8025378 <ili9341_spi_write_command>

  // MADCTL
  ili9341_spi_write_command_data(issNONE,
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(lcd.orientation) });
 80256ee:	4b12      	ldr	r3, [pc, #72]	; (8025738 <ili9341_initialize+0x260>)
 80256f0:	f993 3000 	ldrsb.w	r3, [r3]
 80256f4:	4618      	mov	r0, r3
 80256f6:	f000 f851 	bl	802579c <ili9341_screen_rotation>
 80256fa:	4603      	mov	r3, r0
 80256fc:	703b      	strb	r3, [r7, #0]
  ili9341_spi_write_command_data(issNONE,
 80256fe:	463b      	mov	r3, r7
 8025700:	2201      	movs	r2, #1
 8025702:	2136      	movs	r1, #54	; 0x36
 8025704:	f04f 30ff 	mov.w	r0, #4294967295
 8025708:	f7ff fe9e 	bl	8025448 <ili9341_spi_write_command_data>

  ili9341_spi_tft_release();
 802570c:	f7ff fdf0 	bl	80252f0 <ili9341_spi_tft_release>
}
 8025710:	bf00      	nop
 8025712:	376c      	adds	r7, #108	; 0x6c
 8025714:	46bd      	mov	sp, r7
 8025716:	bd90      	pop	{r4, r7, pc}
 8025718:	08047588 	.word	0x08047588
 802571c:	08047590 	.word	0x08047590
 8025720:	08047594 	.word	0x08047594
 8025724:	08047598 	.word	0x08047598
 8025728:	0804759c 	.word	0x0804759c
 802572c:	080475a0 	.word	0x080475a0
 8025730:	080475a4 	.word	0x080475a4
 8025734:	080475b4 	.word	0x080475b4
 8025738:	20005794 	.word	0x20005794

0802573c <ili9341_screen_size>:

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
 802573c:	b480      	push	{r7}
 802573e:	b089      	sub	sp, #36	; 0x24
 8025740:	af00      	add	r7, sp, #0
 8025742:	4603      	mov	r3, r0
 8025744:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 8025746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802574a:	2b03      	cmp	r3, #3
 802574c:	d011      	beq.n	8025772 <ili9341_screen_size+0x36>
 802574e:	2b03      	cmp	r3, #3
 8025750:	dc03      	bgt.n	802575a <ili9341_screen_size+0x1e>
 8025752:	2b01      	cmp	r3, #1
 8025754:	d005      	beq.n	8025762 <ili9341_screen_size+0x26>
 8025756:	2b02      	cmp	r3, #2
 8025758:	d007      	beq.n	802576a <ili9341_screen_size+0x2e>
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 480U } };
 802575a:	4b0e      	ldr	r3, [pc, #56]	; (8025794 <ili9341_screen_size+0x58>)
 802575c:	681b      	ldr	r3, [r3, #0]
 802575e:	61fb      	str	r3, [r7, #28]
 8025760:	e00a      	b.n	8025778 <ili9341_screen_size+0x3c>
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 480U }, { .height = 320U } };
 8025762:	4b0d      	ldr	r3, [pc, #52]	; (8025798 <ili9341_screen_size+0x5c>)
 8025764:	681b      	ldr	r3, [r3, #0]
 8025766:	61fb      	str	r3, [r7, #28]
 8025768:	e006      	b.n	8025778 <ili9341_screen_size+0x3c>
    case isoUp:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 480U } };
 802576a:	4b0a      	ldr	r3, [pc, #40]	; (8025794 <ili9341_screen_size+0x58>)
 802576c:	681b      	ldr	r3, [r3, #0]
 802576e:	61fb      	str	r3, [r7, #28]
 8025770:	e002      	b.n	8025778 <ili9341_screen_size+0x3c>
    case isoLeft:
      return (ili9341_two_dimension_t){ { .width = 480U }, { .height = 320U } };
 8025772:	4b09      	ldr	r3, [pc, #36]	; (8025798 <ili9341_screen_size+0x5c>)
 8025774:	681b      	ldr	r3, [r3, #0]
 8025776:	61fb      	str	r3, [r7, #28]
  }
}
 8025778:	2300      	movs	r3, #0
 802577a:	8bba      	ldrh	r2, [r7, #28]
 802577c:	f362 030f 	bfi	r3, r2, #0, #16
 8025780:	8bfa      	ldrh	r2, [r7, #30]
 8025782:	f362 431f 	bfi	r3, r2, #16, #16
 8025786:	4618      	mov	r0, r3
 8025788:	3724      	adds	r7, #36	; 0x24
 802578a:	46bd      	mov	sp, r7
 802578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025790:	4770      	bx	lr
 8025792:	bf00      	nop
 8025794:	080475c4 	.word	0x080475c4
 8025798:	080475c8 	.word	0x080475c8

0802579c <ili9341_screen_rotation>:

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
 802579c:	b480      	push	{r7}
 802579e:	b083      	sub	sp, #12
 80257a0:	af00      	add	r7, sp, #0
 80257a2:	4603      	mov	r3, r0
 80257a4:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 80257a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80257aa:	2b03      	cmp	r3, #3
 80257ac:	d00b      	beq.n	80257c6 <ili9341_screen_rotation+0x2a>
 80257ae:	2b03      	cmp	r3, #3
 80257b0:	dc03      	bgt.n	80257ba <ili9341_screen_rotation+0x1e>
 80257b2:	2b01      	cmp	r3, #1
 80257b4:	d003      	beq.n	80257be <ili9341_screen_rotation+0x22>
 80257b6:	2b02      	cmp	r3, #2
 80257b8:	d003      	beq.n	80257c2 <ili9341_screen_rotation+0x26>
    default:
    case isoDown:
      return 0x40 | 0x08;
 80257ba:	2348      	movs	r3, #72	; 0x48
 80257bc:	e004      	b.n	80257c8 <ili9341_screen_rotation+0x2c>
    case isoRight:
      return 0x40 | 0x80 | 0x20 | 0x08;
 80257be:	23e8      	movs	r3, #232	; 0xe8
 80257c0:	e002      	b.n	80257c8 <ili9341_screen_rotation+0x2c>
    case isoUp:
      return 0x80 | 0x08;
 80257c2:	2388      	movs	r3, #136	; 0x88
 80257c4:	e000      	b.n	80257c8 <ili9341_screen_rotation+0x2c>
    case isoLeft:
      return 0x20 | 0x08;
 80257c6:	2328      	movs	r3, #40	; 0x28
  }
}
 80257c8:	4618      	mov	r0, r3
 80257ca:	370c      	adds	r7, #12
 80257cc:	46bd      	mov	sp, r7
 80257ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257d2:	4770      	bx	lr

080257d4 <glyph_index>:
/* nothing */

// ------------------------------------------------------- exported functions --

uint8_t glyph_index(unsigned char glyph)
{
 80257d4:	b480      	push	{r7}
 80257d6:	b083      	sub	sp, #12
 80257d8:	af00      	add	r7, sp, #0
 80257da:	4603      	mov	r3, r0
 80257dc:	71fb      	strb	r3, [r7, #7]
  if ((glyph >= __ILI9341_FONT_FIRST_GLYPH__) &&
 80257de:	79fb      	ldrb	r3, [r7, #7]
 80257e0:	2b1f      	cmp	r3, #31
 80257e2:	d906      	bls.n	80257f2 <glyph_index+0x1e>
 80257e4:	79fb      	ldrb	r3, [r7, #7]
 80257e6:	2b7e      	cmp	r3, #126	; 0x7e
 80257e8:	d803      	bhi.n	80257f2 <glyph_index+0x1e>
      (glyph <= __ILI9341_FONT_LAST_GLYPH__)) {
    return glyph - __ILI9341_FONT_FIRST_GLYPH__;
 80257ea:	79fb      	ldrb	r3, [r7, #7]
 80257ec:	3b20      	subs	r3, #32
 80257ee:	b2db      	uxtb	r3, r3
 80257f0:	e000      	b.n	80257f4 <glyph_index+0x20>
  }
  return 0; // on error, return index of ASCII space (0x20)
 80257f2:	2300      	movs	r3, #0
}
 80257f4:	4618      	mov	r0, r3
 80257f6:	370c      	adds	r7, #12
 80257f8:	46bd      	mov	sp, r7
 80257fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257fe:	4770      	bx	lr

08025800 <ili9341_spi_tft_set_address_rect>:
  return __ILI9341_COLOR565_RGB(rgb);
}

void ili9341_spi_tft_set_address_rect(
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8025800:	b590      	push	{r4, r7, lr}
 8025802:	b085      	sub	sp, #20
 8025804:	af00      	add	r7, sp, #0
 8025806:	4604      	mov	r4, r0
 8025808:	4608      	mov	r0, r1
 802580a:	4611      	mov	r1, r2
 802580c:	461a      	mov	r2, r3
 802580e:	4623      	mov	r3, r4
 8025810:	80fb      	strh	r3, [r7, #6]
 8025812:	4603      	mov	r3, r0
 8025814:	80bb      	strh	r3, [r7, #4]
 8025816:	460b      	mov	r3, r1
 8025818:	807b      	strh	r3, [r7, #2]
 802581a:	4613      	mov	r3, r2
 802581c:	803b      	strh	r3, [r7, #0]
  ili9341_spi_tft_select();
 802581e:	f7ff fd5f 	bl	80252e0 <ili9341_spi_tft_select>

  // column address set
  ili9341_spi_write_command_data(issNONE,
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 8025822:	88fb      	ldrh	r3, [r7, #6]
 8025824:	0a1b      	lsrs	r3, r3, #8
 8025826:	b29b      	uxth	r3, r3
 8025828:	b2db      	uxtb	r3, r3
 802582a:	733b      	strb	r3, [r7, #12]
 802582c:	88fb      	ldrh	r3, [r7, #6]
 802582e:	b2db      	uxtb	r3, r3
 8025830:	737b      	strb	r3, [r7, #13]
 8025832:	887b      	ldrh	r3, [r7, #2]
 8025834:	0a1b      	lsrs	r3, r3, #8
 8025836:	b29b      	uxth	r3, r3
 8025838:	b2db      	uxtb	r3, r3
 802583a:	73bb      	strb	r3, [r7, #14]
 802583c:	887b      	ldrh	r3, [r7, #2]
 802583e:	b2db      	uxtb	r3, r3
 8025840:	73fb      	strb	r3, [r7, #15]
  ili9341_spi_write_command_data(issNONE,
 8025842:	f107 030c 	add.w	r3, r7, #12
 8025846:	2204      	movs	r2, #4
 8025848:	212a      	movs	r1, #42	; 0x2a
 802584a:	f04f 30ff 	mov.w	r0, #4294967295
 802584e:	f7ff fdfb 	bl	8025448 <ili9341_spi_write_command_data>
                            (x1 >> 8) & 0xFF, x1 & 0xFF });

  // row address set
  ili9341_spi_write_command_data(issNONE,
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 8025852:	88bb      	ldrh	r3, [r7, #4]
 8025854:	0a1b      	lsrs	r3, r3, #8
 8025856:	b29b      	uxth	r3, r3
 8025858:	b2db      	uxtb	r3, r3
 802585a:	723b      	strb	r3, [r7, #8]
 802585c:	88bb      	ldrh	r3, [r7, #4]
 802585e:	b2db      	uxtb	r3, r3
 8025860:	727b      	strb	r3, [r7, #9]
 8025862:	883b      	ldrh	r3, [r7, #0]
 8025864:	0a1b      	lsrs	r3, r3, #8
 8025866:	b29b      	uxth	r3, r3
 8025868:	b2db      	uxtb	r3, r3
 802586a:	72bb      	strb	r3, [r7, #10]
 802586c:	883b      	ldrh	r3, [r7, #0]
 802586e:	b2db      	uxtb	r3, r3
 8025870:	72fb      	strb	r3, [r7, #11]
  ili9341_spi_write_command_data(issNONE,
 8025872:	f107 0308 	add.w	r3, r7, #8
 8025876:	2204      	movs	r2, #4
 8025878:	212b      	movs	r1, #43	; 0x2b
 802587a:	f04f 30ff 	mov.w	r0, #4294967295
 802587e:	f7ff fde3 	bl	8025448 <ili9341_spi_write_command_data>
                            (y1 >> 8) & 0xFF, y1 & 0xFF });

  // write to RAM
  ili9341_spi_write_command(issNONE, 0x2C);
 8025882:	212c      	movs	r1, #44	; 0x2c
 8025884:	f04f 30ff 	mov.w	r0, #4294967295
 8025888:	f7ff fd76 	bl	8025378 <ili9341_spi_write_command>

  ili9341_spi_tft_release();
 802588c:	f7ff fd30 	bl	80252f0 <ili9341_spi_tft_release>
}
 8025890:	bf00      	nop
 8025892:	3714      	adds	r7, #20
 8025894:	46bd      	mov	sp, r7
 8025896:	bd90      	pop	{r4, r7, pc}

08025898 <ili9341_transmit_wait>:

void ili9341_transmit_wait()
{
 8025898:	b580      	push	{r7, lr}
 802589a:	af00      	add	r7, sp, #0
  //  { return; }

  //while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(lcd->spi_hal->hdmatx))
  //while(spi_driver_is_dma_busy() == GOS_TRUE)
  //  { continue; }
	while (drv_dmaIsBusy(spiConfig[1].dmaConfigTx) == GOS_TRUE)
 802589c:	e000      	b.n	80258a0 <ili9341_transmit_wait+0x8>
	{
		continue;
 802589e:	bf00      	nop
	while (drv_dmaIsBusy(spiConfig[1].dmaConfigTx) == GOS_TRUE)
 80258a0:	4b05      	ldr	r3, [pc, #20]	; (80258b8 <ili9341_transmit_wait+0x20>)
 80258a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80258a4:	4618      	mov	r0, r3
 80258a6:	f010 f93d 	bl	8035b24 <drv_dmaIsBusy>
 80258aa:	4603      	mov	r3, r0
 80258ac:	2b36      	cmp	r3, #54	; 0x36
 80258ae:	d0f6      	beq.n	802589e <ili9341_transmit_wait+0x6>
	}
}
 80258b0:	bf00      	nop
 80258b2:	bf00      	nop
 80258b4:	bd80      	pop	{r7, pc}
 80258b6:	bf00      	nop
 80258b8:	08049380 	.word	0x08049380

080258bc <ili9341_transmit_color>:

void ili9341_transmit_color(uint16_t size,
    uint16_t color[]/* already byte-swapped (LE) */, ili9341_bool_t wait)
{
 80258bc:	b580      	push	{r7, lr}
 80258be:	b084      	sub	sp, #16
 80258c0:	af02      	add	r7, sp, #8
 80258c2:	4603      	mov	r3, r0
 80258c4:	6039      	str	r1, [r7, #0]
 80258c6:	80fb      	strh	r3, [r7, #6]
 80258c8:	4613      	mov	r3, r2
 80258ca:	717b      	strb	r3, [r7, #5]
  if (/*(NULL == lcd) ||*/ (0 == size) || (NULL == color))
 80258cc:	88fb      	ldrh	r3, [r7, #6]
 80258ce:	2b00      	cmp	r3, #0
 80258d0:	d011      	beq.n	80258f6 <ili9341_transmit_color+0x3a>
 80258d2:	683b      	ldr	r3, [r7, #0]
 80258d4:	2b00      	cmp	r3, #0
 80258d6:	d00e      	beq.n	80258f6 <ili9341_transmit_color+0x3a>
  //drv_spiTransmitIT(DRV_SPI_INSTANCE_3, (uint8_t *)color, size, GOS_MUTEX_ENDLESS_TMO, 1000);

  /*
   * Trigger timeout is 0 -> trigger is unused.
   */
  drv_spiTransmitDMA(DRV_SPI_INSTANCE_3, (uint8_t *)color, size, 2000u, 0u);
 80258d8:	88fa      	ldrh	r2, [r7, #6]
 80258da:	2300      	movs	r3, #0
 80258dc:	9300      	str	r3, [sp, #0]
 80258de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80258e2:	6839      	ldr	r1, [r7, #0]
 80258e4:	2002      	movs	r0, #2
 80258e6:	f011 ff23 	bl	8037730 <drv_spiTransmitDMA>


  if (ibOK(wait))
 80258ea:	797b      	ldrb	r3, [r7, #5]
 80258ec:	2b00      	cmp	r3, #0
 80258ee:	d003      	beq.n	80258f8 <ili9341_transmit_color+0x3c>
    { ili9341_transmit_wait(); }
 80258f0:	f7ff ffd2 	bl	8025898 <ili9341_transmit_wait>
 80258f4:	e000      	b.n	80258f8 <ili9341_transmit_color+0x3c>
    { return; }
 80258f6:	bf00      	nop
}
 80258f8:	3708      	adds	r7, #8
 80258fa:	46bd      	mov	sp, r7
 80258fc:	bd80      	pop	{r7, pc}

080258fe <ili9341_draw_pixel>:

void ili9341_draw_pixel(ili9341_color_t color,
    int16_t x, int16_t y)
{
 80258fe:	b580      	push	{r7, lr}
 8025900:	b086      	sub	sp, #24
 8025902:	af02      	add	r7, sp, #8
 8025904:	4603      	mov	r3, r0
 8025906:	80fb      	strh	r3, [r7, #6]
 8025908:	460b      	mov	r3, r1
 802590a:	80bb      	strh	r3, [r7, #4]
 802590c:	4613      	mov	r3, r2
 802590e:	807b      	strh	r3, [r7, #2]
//if (gos_mutexLock(&ili9341Mutex, 1000) == GOS_SUCCESS)
{
  if (ibNOT(ili9341_clip_rect(&x, &y, NULL, NULL)))
 8025910:	1cb9      	adds	r1, r7, #2
 8025912:	1d38      	adds	r0, r7, #4
 8025914:	2300      	movs	r3, #0
 8025916:	2200      	movs	r2, #0
 8025918:	f000 fb04 	bl	8025f24 <ili9341_clip_rect>
 802591c:	4603      	mov	r3, r0
 802591e:	2b00      	cmp	r3, #0
 8025920:	d031      	beq.n	8025986 <ili9341_draw_pixel+0x88>
    { return; }

  uint16_t color_le = __LEu16(&color);
 8025922:	1dbb      	adds	r3, r7, #6
 8025924:	3301      	adds	r3, #1
 8025926:	781b      	ldrb	r3, [r3, #0]
 8025928:	b21a      	sxth	r2, r3
 802592a:	1dbb      	adds	r3, r7, #6
 802592c:	781b      	ldrb	r3, [r3, #0]
 802592e:	021b      	lsls	r3, r3, #8
 8025930:	b21b      	sxth	r3, r3
 8025932:	4313      	orrs	r3, r2
 8025934:	b21b      	sxth	r3, r3
 8025936:	b29b      	uxth	r3, r3
 8025938:	81fb      	strh	r3, [r7, #14]

  // select target region
  ili9341_spi_tft_set_address_rect(x, y, x + 1, y + 1);
 802593a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 802593e:	b298      	uxth	r0, r3
 8025940:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8025944:	b299      	uxth	r1, r3
 8025946:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 802594a:	b29b      	uxth	r3, r3
 802594c:	3301      	adds	r3, #1
 802594e:	b29a      	uxth	r2, r3
 8025950:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8025954:	b29b      	uxth	r3, r3
 8025956:	3301      	adds	r3, #1
 8025958:	b29b      	uxth	r3, r3
 802595a:	f7ff ff51 	bl	8025800 <ili9341_spi_tft_set_address_rect>

  ili9341_spi_tft_select();
 802595e:	f7ff fcbf 	bl	80252e0 <ili9341_spi_tft_select>

  //HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_DC), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_DC, __GPIO_PIN_SET__);
 8025962:	2101      	movs	r1, #1
 8025964:	2009      	movs	r0, #9
 8025966:	f010 fd67 	bl	8036438 <drv_gpioWritePin>
  //HAL_SPI_Transmit(lcd->spi_hal, (uint8_t *)&color_le, 2U, __SPI_MAX_DELAY__);
  //spi_driver_transmit_blocking((uint8_t *)&color_le, 2U);
  drv_spiTransmitBlocking(DRV_SPI_INSTANCE_3, (uint8_t *)&color_le, 2u, 2000, 5000);
 802596a:	f107 010e 	add.w	r1, r7, #14
 802596e:	f241 3388 	movw	r3, #5000	; 0x1388
 8025972:	9300      	str	r3, [sp, #0]
 8025974:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8025978:	2202      	movs	r2, #2
 802597a:	2002      	movs	r0, #2
 802597c:	f011 fe48 	bl	8037610 <drv_spiTransmitBlocking>
  //drv_spiTransmitDMA(DRV_SPI_INSTANCE_3, (uint8_t *)&color_le, 2u, GOS_MUTEX_ENDLESS_TMO, 1000);

  ili9341_spi_tft_release();
 8025980:	f7ff fcb6 	bl	80252f0 <ili9341_spi_tft_release>
 8025984:	e000      	b.n	8025988 <ili9341_draw_pixel+0x8a>
    { return; }
 8025986:	bf00      	nop
}
//gos_mutexUnlock(&ili9341Mutex);
}
 8025988:	3710      	adds	r7, #16
 802598a:	46bd      	mov	sp, r7
 802598c:	bd80      	pop	{r7, pc}
	...

08025990 <ili9341_draw_line>:

void ili9341_draw_line(ili9341_color_t color,
    int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8025990:	b590      	push	{r4, r7, lr}
 8025992:	b08b      	sub	sp, #44	; 0x2c
 8025994:	af02      	add	r7, sp, #8
 8025996:	4604      	mov	r4, r0
 8025998:	4608      	mov	r0, r1
 802599a:	4611      	mov	r1, r2
 802599c:	461a      	mov	r2, r3
 802599e:	4623      	mov	r3, r4
 80259a0:	80fb      	strh	r3, [r7, #6]
 80259a2:	4603      	mov	r3, r0
 80259a4:	80bb      	strh	r3, [r7, #4]
 80259a6:	460b      	mov	r3, r1
 80259a8:	807b      	strh	r3, [r7, #2]
 80259aa:	4613      	mov	r3, r2
 80259ac:	803b      	strh	r3, [r7, #0]
  int16_t dx = x1 - x0;
 80259ae:	883a      	ldrh	r2, [r7, #0]
 80259b0:	88bb      	ldrh	r3, [r7, #4]
 80259b2:	1ad3      	subs	r3, r2, r3
 80259b4:	b29b      	uxth	r3, r3
 80259b6:	82fb      	strh	r3, [r7, #22]
  int16_t dy = y1 - y0;
 80259b8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80259ba:	887b      	ldrh	r3, [r7, #2]
 80259bc:	1ad3      	subs	r3, r2, r3
 80259be:	b29b      	uxth	r3, r3
 80259c0:	82bb      	strh	r3, [r7, #20]

  int16_t x, y;
  int16_t err;
  int16_t step;

  if (0 == dx) {
 80259c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	d114      	bne.n	80259f4 <ili9341_draw_line+0x64>
    // vertical line
    if (0 == dy)
 80259ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80259ce:	2b00      	cmp	r3, #0
 80259d0:	f000 80c1 	beq.w	8025b56 <ili9341_draw_line+0x1c6>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(color, x0, y0, 1, abs(dy));
 80259d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80259d8:	2b00      	cmp	r3, #0
 80259da:	bfb8      	it	lt
 80259dc:	425b      	neglt	r3, r3
 80259de:	b29b      	uxth	r3, r3
 80259e0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80259e4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80259e8:	88f8      	ldrh	r0, [r7, #6]
 80259ea:	9300      	str	r3, [sp, #0]
 80259ec:	2301      	movs	r3, #1
 80259ee:	f000 f923 	bl	8025c38 <ili9341_fill_rect>
    return;
 80259f2:	e0b3      	b.n	8025b5c <ili9341_draw_line+0x1cc>
  }
  else if (0 == dy) {
 80259f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80259f8:	2b00      	cmp	r3, #0
 80259fa:	d114      	bne.n	8025a26 <ili9341_draw_line+0x96>
    // horizontal line
    if (0 == dx)
 80259fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025a00:	2b00      	cmp	r3, #0
 8025a02:	f000 80aa 	beq.w	8025b5a <ili9341_draw_line+0x1ca>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(color, x0, y0, abs(dx), 1);
 8025a06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025a0a:	2b00      	cmp	r3, #0
 8025a0c:	bfb8      	it	lt
 8025a0e:	425b      	neglt	r3, r3
 8025a10:	b29b      	uxth	r3, r3
 8025a12:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8025a16:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8025a1a:	88f8      	ldrh	r0, [r7, #6]
 8025a1c:	2401      	movs	r4, #1
 8025a1e:	9400      	str	r4, [sp, #0]
 8025a20:	f000 f90a 	bl	8025c38 <ili9341_fill_rect>
    return;
 8025a24:	e09a      	b.n	8025b5c <ili9341_draw_line+0x1cc>
  }

  ili9341_bool_t is_steep = abs(dy) > abs(dx);
 8025a26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8025a2a:	2b00      	cmp	r3, #0
 8025a2c:	bfb8      	it	lt
 8025a2e:	425b      	neglt	r3, r3
 8025a30:	b29a      	uxth	r2, r3
 8025a32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025a36:	2b00      	cmp	r3, #0
 8025a38:	bfb8      	it	lt
 8025a3a:	425b      	neglt	r3, r3
 8025a3c:	b29b      	uxth	r3, r3
 8025a3e:	429a      	cmp	r2, r3
 8025a40:	bf8c      	ite	hi
 8025a42:	2301      	movhi	r3, #1
 8025a44:	2300      	movls	r3, #0
 8025a46:	b2db      	uxtb	r3, r3
 8025a48:	74fb      	strb	r3, [r7, #19]
  if (is_steep) {
 8025a4a:	7cfb      	ldrb	r3, [r7, #19]
 8025a4c:	2b00      	cmp	r3, #0
 8025a4e:	d00b      	beq.n	8025a68 <ili9341_draw_line+0xd8>
    __SWAP(int16_t, x0, y0);
 8025a50:	88bb      	ldrh	r3, [r7, #4]
 8025a52:	823b      	strh	r3, [r7, #16]
 8025a54:	887b      	ldrh	r3, [r7, #2]
 8025a56:	80bb      	strh	r3, [r7, #4]
 8025a58:	8a3b      	ldrh	r3, [r7, #16]
 8025a5a:	807b      	strh	r3, [r7, #2]
    __SWAP(int16_t, x1, y1);
 8025a5c:	883b      	ldrh	r3, [r7, #0]
 8025a5e:	81fb      	strh	r3, [r7, #14]
 8025a60:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8025a62:	803b      	strh	r3, [r7, #0]
 8025a64:	89fb      	ldrh	r3, [r7, #14]
 8025a66:	863b      	strh	r3, [r7, #48]	; 0x30
  }

  if (x0 > x1) {
 8025a68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8025a6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8025a70:	429a      	cmp	r2, r3
 8025a72:	dd0b      	ble.n	8025a8c <ili9341_draw_line+0xfc>
    __SWAP(int16_t, x0, x1);
 8025a74:	88bb      	ldrh	r3, [r7, #4]
 8025a76:	81bb      	strh	r3, [r7, #12]
 8025a78:	883b      	ldrh	r3, [r7, #0]
 8025a7a:	80bb      	strh	r3, [r7, #4]
 8025a7c:	89bb      	ldrh	r3, [r7, #12]
 8025a7e:	803b      	strh	r3, [r7, #0]
    __SWAP(int16_t, y0, y1);
 8025a80:	887b      	ldrh	r3, [r7, #2]
 8025a82:	817b      	strh	r3, [r7, #10]
 8025a84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8025a86:	807b      	strh	r3, [r7, #2]
 8025a88:	897b      	ldrh	r3, [r7, #10]
 8025a8a:	863b      	strh	r3, [r7, #48]	; 0x30
  }

  dx = x1 - x0;
 8025a8c:	883a      	ldrh	r2, [r7, #0]
 8025a8e:	88bb      	ldrh	r3, [r7, #4]
 8025a90:	1ad3      	subs	r3, r2, r3
 8025a92:	b29b      	uxth	r3, r3
 8025a94:	82fb      	strh	r3, [r7, #22]
  dy = abs(y1 - y0);
 8025a96:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8025a9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8025a9e:	1ad3      	subs	r3, r2, r3
 8025aa0:	2b00      	cmp	r3, #0
 8025aa2:	bfb8      	it	lt
 8025aa4:	425b      	neglt	r3, r3
 8025aa6:	82bb      	strh	r3, [r7, #20]
  err = dx >> 1;
 8025aa8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8025aac:	105b      	asrs	r3, r3, #1
 8025aae:	837b      	strh	r3, [r7, #26]

  if (y0 < y1)
 8025ab0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8025ab4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8025ab8:	429a      	cmp	r2, r3
 8025aba:	da02      	bge.n	8025ac2 <ili9341_draw_line+0x132>
    { step = 1; }
 8025abc:	2301      	movs	r3, #1
 8025abe:	833b      	strh	r3, [r7, #24]
 8025ac0:	e042      	b.n	8025b48 <ili9341_draw_line+0x1b8>
  else
    { step = -1; }
 8025ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025ac6:	833b      	strh	r3, [r7, #24]

  while (x0 <= x1) {
 8025ac8:	e03e      	b.n	8025b48 <ili9341_draw_line+0x1b8>

    if (is_steep)
 8025aca:	7cfb      	ldrb	r3, [r7, #19]
 8025acc:	2b00      	cmp	r3, #0
 8025ace:	d004      	beq.n	8025ada <ili9341_draw_line+0x14a>
      { x = y0; y = x0; }
 8025ad0:	887b      	ldrh	r3, [r7, #2]
 8025ad2:	83fb      	strh	r3, [r7, #30]
 8025ad4:	88bb      	ldrh	r3, [r7, #4]
 8025ad6:	83bb      	strh	r3, [r7, #28]
 8025ad8:	e003      	b.n	8025ae2 <ili9341_draw_line+0x152>
    else
      { x = x0; y = y0; }
 8025ada:	88bb      	ldrh	r3, [r7, #4]
 8025adc:	83fb      	strh	r3, [r7, #30]
 8025ade:	887b      	ldrh	r3, [r7, #2]
 8025ae0:	83bb      	strh	r3, [r7, #28]

    // continue algorithm even if current pixel is outside of screen
    // bounds, so that the line is drawn at correct position once
    // it actually enters screen bounds (if ever).
    if ( (x >= 0) && (x <= lcd.screen_size.width) &&
 8025ae2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8025ae6:	2b00      	cmp	r3, #0
 8025ae8:	db17      	blt.n	8025b1a <ili9341_draw_line+0x18a>
 8025aea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8025aee:	4a1d      	ldr	r2, [pc, #116]	; (8025b64 <ili9341_draw_line+0x1d4>)
 8025af0:	8852      	ldrh	r2, [r2, #2]
 8025af2:	4293      	cmp	r3, r2
 8025af4:	dc11      	bgt.n	8025b1a <ili9341_draw_line+0x18a>
 8025af6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8025afa:	2b00      	cmp	r3, #0
 8025afc:	db0d      	blt.n	8025b1a <ili9341_draw_line+0x18a>
         (y >= 0) && (y <= lcd.screen_size.height) ) {
 8025afe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8025b02:	4a18      	ldr	r2, [pc, #96]	; (8025b64 <ili9341_draw_line+0x1d4>)
 8025b04:	8892      	ldrh	r2, [r2, #4]
 8025b06:	4293      	cmp	r3, r2
 8025b08:	dc07      	bgt.n	8025b1a <ili9341_draw_line+0x18a>
      ili9341_draw_pixel(color, x, y);
 8025b0a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8025b0e:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8025b12:	88fb      	ldrh	r3, [r7, #6]
 8025b14:	4618      	mov	r0, r3
 8025b16:	f7ff fef2 	bl	80258fe <ili9341_draw_pixel>
    }

    err -= dy;
 8025b1a:	8b7a      	ldrh	r2, [r7, #26]
 8025b1c:	8abb      	ldrh	r3, [r7, #20]
 8025b1e:	1ad3      	subs	r3, r2, r3
 8025b20:	b29b      	uxth	r3, r3
 8025b22:	837b      	strh	r3, [r7, #26]
    if (err < 0) {
 8025b24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8025b28:	2b00      	cmp	r3, #0
 8025b2a:	da09      	bge.n	8025b40 <ili9341_draw_line+0x1b0>
      y0 += step;
 8025b2c:	887a      	ldrh	r2, [r7, #2]
 8025b2e:	8b3b      	ldrh	r3, [r7, #24]
 8025b30:	4413      	add	r3, r2
 8025b32:	b29b      	uxth	r3, r3
 8025b34:	807b      	strh	r3, [r7, #2]
      err += dx;
 8025b36:	8b7a      	ldrh	r2, [r7, #26]
 8025b38:	8afb      	ldrh	r3, [r7, #22]
 8025b3a:	4413      	add	r3, r2
 8025b3c:	b29b      	uxth	r3, r3
 8025b3e:	837b      	strh	r3, [r7, #26]
    }

    ++x0;
 8025b40:	88bb      	ldrh	r3, [r7, #4]
 8025b42:	3301      	adds	r3, #1
 8025b44:	b29b      	uxth	r3, r3
 8025b46:	80bb      	strh	r3, [r7, #4]
  while (x0 <= x1) {
 8025b48:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8025b4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8025b50:	429a      	cmp	r2, r3
 8025b52:	ddba      	ble.n	8025aca <ili9341_draw_line+0x13a>
 8025b54:	e002      	b.n	8025b5c <ili9341_draw_line+0x1cc>
      { return; } // distance = 0, no line to draw
 8025b56:	bf00      	nop
 8025b58:	e000      	b.n	8025b5c <ili9341_draw_line+0x1cc>
      { return; } // distance = 0, no line to draw
 8025b5a:	bf00      	nop
  }
}
 8025b5c:	3724      	adds	r7, #36	; 0x24
 8025b5e:	46bd      	mov	sp, r7
 8025b60:	bd90      	pop	{r4, r7, pc}
 8025b62:	bf00      	nop
 8025b64:	20005794 	.word	0x20005794

08025b68 <ili9341_draw_rect>:

void ili9341_draw_rect(ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8025b68:	b5b0      	push	{r4, r5, r7, lr}
 8025b6a:	b084      	sub	sp, #16
 8025b6c:	af02      	add	r7, sp, #8
 8025b6e:	4604      	mov	r4, r0
 8025b70:	4608      	mov	r0, r1
 8025b72:	4611      	mov	r1, r2
 8025b74:	461a      	mov	r2, r3
 8025b76:	4623      	mov	r3, r4
 8025b78:	80fb      	strh	r3, [r7, #6]
 8025b7a:	4603      	mov	r3, r0
 8025b7c:	80bb      	strh	r3, [r7, #4]
 8025b7e:	460b      	mov	r3, r1
 8025b80:	807b      	strh	r3, [r7, #2]
 8025b82:	4613      	mov	r3, r2
 8025b84:	803b      	strh	r3, [r7, #0]
	//if (gos_mutexLock(&ili9341Mutex, 1000) == GOS_SUCCESS){

  ili9341_draw_line(color,     x,     y,   x+w,     y );
 8025b86:	88ba      	ldrh	r2, [r7, #4]
 8025b88:	883b      	ldrh	r3, [r7, #0]
 8025b8a:	4413      	add	r3, r2
 8025b8c:	b29b      	uxth	r3, r3
 8025b8e:	b21c      	sxth	r4, r3
 8025b90:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8025b94:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8025b98:	88f8      	ldrh	r0, [r7, #6]
 8025b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8025b9e:	9300      	str	r3, [sp, #0]
 8025ba0:	4623      	mov	r3, r4
 8025ba2:	f7ff fef5 	bl	8025990 <ili9341_draw_line>
  ili9341_draw_line(color,     x, y+h-1,   x+w, y+h-1 );
 8025ba6:	887a      	ldrh	r2, [r7, #2]
 8025ba8:	8b3b      	ldrh	r3, [r7, #24]
 8025baa:	4413      	add	r3, r2
 8025bac:	b29b      	uxth	r3, r3
 8025bae:	3b01      	subs	r3, #1
 8025bb0:	b29b      	uxth	r3, r3
 8025bb2:	b21c      	sxth	r4, r3
 8025bb4:	88ba      	ldrh	r2, [r7, #4]
 8025bb6:	883b      	ldrh	r3, [r7, #0]
 8025bb8:	4413      	add	r3, r2
 8025bba:	b29b      	uxth	r3, r3
 8025bbc:	b21d      	sxth	r5, r3
 8025bbe:	887a      	ldrh	r2, [r7, #2]
 8025bc0:	8b3b      	ldrh	r3, [r7, #24]
 8025bc2:	4413      	add	r3, r2
 8025bc4:	b29b      	uxth	r3, r3
 8025bc6:	3b01      	subs	r3, #1
 8025bc8:	b29b      	uxth	r3, r3
 8025bca:	b21b      	sxth	r3, r3
 8025bcc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8025bd0:	88f8      	ldrh	r0, [r7, #6]
 8025bd2:	9300      	str	r3, [sp, #0]
 8025bd4:	462b      	mov	r3, r5
 8025bd6:	4622      	mov	r2, r4
 8025bd8:	f7ff feda 	bl	8025990 <ili9341_draw_line>
  ili9341_draw_line(color,     x,     y,     x,   y+h );
 8025bdc:	887a      	ldrh	r2, [r7, #2]
 8025bde:	8b3b      	ldrh	r3, [r7, #24]
 8025be0:	4413      	add	r3, r2
 8025be2:	b29b      	uxth	r3, r3
 8025be4:	b21b      	sxth	r3, r3
 8025be6:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8025bea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8025bee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8025bf2:	88f8      	ldrh	r0, [r7, #6]
 8025bf4:	9300      	str	r3, [sp, #0]
 8025bf6:	4623      	mov	r3, r4
 8025bf8:	f7ff feca 	bl	8025990 <ili9341_draw_line>
  ili9341_draw_line(color, x+w-1,     y, x+w-1,   y+h );
 8025bfc:	88ba      	ldrh	r2, [r7, #4]
 8025bfe:	883b      	ldrh	r3, [r7, #0]
 8025c00:	4413      	add	r3, r2
 8025c02:	b29b      	uxth	r3, r3
 8025c04:	3b01      	subs	r3, #1
 8025c06:	b29b      	uxth	r3, r3
 8025c08:	b219      	sxth	r1, r3
 8025c0a:	88ba      	ldrh	r2, [r7, #4]
 8025c0c:	883b      	ldrh	r3, [r7, #0]
 8025c0e:	4413      	add	r3, r2
 8025c10:	b29b      	uxth	r3, r3
 8025c12:	3b01      	subs	r3, #1
 8025c14:	b29b      	uxth	r3, r3
 8025c16:	b21c      	sxth	r4, r3
 8025c18:	887a      	ldrh	r2, [r7, #2]
 8025c1a:	8b3b      	ldrh	r3, [r7, #24]
 8025c1c:	4413      	add	r3, r2
 8025c1e:	b29b      	uxth	r3, r3
 8025c20:	b21b      	sxth	r3, r3
 8025c22:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8025c26:	88f8      	ldrh	r0, [r7, #6]
 8025c28:	9300      	str	r3, [sp, #0]
 8025c2a:	4623      	mov	r3, r4
 8025c2c:	f7ff feb0 	bl	8025990 <ili9341_draw_line>
	//}
	//gos_mutexUnlock(&ili9341Mutex);
}
 8025c30:	bf00      	nop
 8025c32:	3708      	adds	r7, #8
 8025c34:	46bd      	mov	sp, r7
 8025c36:	bdb0      	pop	{r4, r5, r7, pc}

08025c38 <ili9341_fill_rect>:

void ili9341_fill_rect(ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8025c38:	b590      	push	{r4, r7, lr}
 8025c3a:	b089      	sub	sp, #36	; 0x24
 8025c3c:	af00      	add	r7, sp, #0
 8025c3e:	4604      	mov	r4, r0
 8025c40:	4608      	mov	r0, r1
 8025c42:	4611      	mov	r1, r2
 8025c44:	461a      	mov	r2, r3
 8025c46:	4623      	mov	r3, r4
 8025c48:	80fb      	strh	r3, [r7, #6]
 8025c4a:	4603      	mov	r3, r0
 8025c4c:	80bb      	strh	r3, [r7, #4]
 8025c4e:	460b      	mov	r3, r1
 8025c50:	807b      	strh	r3, [r7, #2]
 8025c52:	4613      	mov	r3, r2
 8025c54:	803b      	strh	r3, [r7, #0]
  // verify we have something within screen dimensions to be drawn
  if (ibNOT(ili9341_clip_rect(&x, &y, &w, &h)))
 8025c56:	463a      	mov	r2, r7
 8025c58:	1cb9      	adds	r1, r7, #2
 8025c5a:	1d38      	adds	r0, r7, #4
 8025c5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8025c60:	f000 f960 	bl	8025f24 <ili9341_clip_rect>
 8025c64:	4603      	mov	r3, r0
 8025c66:	2b00      	cmp	r3, #0
 8025c68:	d064      	beq.n	8025d34 <ili9341_fill_rect+0xfc>
    { return; }
  //if (gos_mutexLock(&ili9341Mutex, 1000) == GOS_SUCCESS){
  uint32_t num_pixels = w * h;
 8025c6a:	883b      	ldrh	r3, [r7, #0]
 8025c6c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8025c6e:	fb02 f303 	mul.w	r3, r2, r3
 8025c72:	60fb      	str	r3, [r7, #12]
  uint32_t rect_wc    = num_pixels;
 8025c74:	68fb      	ldr	r3, [r7, #12]
 8025c76:	61fb      	str	r3, [r7, #28]

  uint32_t block_wc = rect_wc;
 8025c78:	69fb      	ldr	r3, [r7, #28]
 8025c7a:	61bb      	str	r3, [r7, #24]
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8025c7c:	69bb      	ldr	r3, [r7, #24]
 8025c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025c82:	d902      	bls.n	8025c8a <ili9341_fill_rect+0x52>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8025c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025c88:	61bb      	str	r3, [r7, #24]

  // fill entire block with ordered color data
  uint16_t color_le = __LEu16(&color);
 8025c8a:	1dbb      	adds	r3, r7, #6
 8025c8c:	3301      	adds	r3, #1
 8025c8e:	781b      	ldrb	r3, [r3, #0]
 8025c90:	b21a      	sxth	r2, r3
 8025c92:	1dbb      	adds	r3, r7, #6
 8025c94:	781b      	ldrb	r3, [r3, #0]
 8025c96:	021b      	lsls	r3, r3, #8
 8025c98:	b21b      	sxth	r3, r3
 8025c9a:	4313      	orrs	r3, r2
 8025c9c:	b21b      	sxth	r3, r3
 8025c9e:	817b      	strh	r3, [r7, #10]
  for (uint16_t i = 0; i < block_wc; ++i)
 8025ca0:	2300      	movs	r3, #0
 8025ca2:	82fb      	strh	r3, [r7, #22]
 8025ca4:	e007      	b.n	8025cb6 <ili9341_fill_rect+0x7e>
    { spi_tx_block[i] = color_le; }
 8025ca6:	8afb      	ldrh	r3, [r7, #22]
 8025ca8:	4924      	ldr	r1, [pc, #144]	; (8025d3c <ili9341_fill_rect+0x104>)
 8025caa:	897a      	ldrh	r2, [r7, #10]
 8025cac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < block_wc; ++i)
 8025cb0:	8afb      	ldrh	r3, [r7, #22]
 8025cb2:	3301      	adds	r3, #1
 8025cb4:	82fb      	strh	r3, [r7, #22]
 8025cb6:	8afb      	ldrh	r3, [r7, #22]
 8025cb8:	69ba      	ldr	r2, [r7, #24]
 8025cba:	429a      	cmp	r2, r3
 8025cbc:	d8f3      	bhi.n	8025ca6 <ili9341_fill_rect+0x6e>

  // select target region
  ili9341_spi_tft_set_address_rect(x, y, (x + w - 1), (y + h - 1));
 8025cbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8025cc2:	b298      	uxth	r0, r3
 8025cc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8025cc8:	b299      	uxth	r1, r3
 8025cca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8025cce:	b29a      	uxth	r2, r3
 8025cd0:	883b      	ldrh	r3, [r7, #0]
 8025cd2:	4413      	add	r3, r2
 8025cd4:	b29b      	uxth	r3, r3
 8025cd6:	3b01      	subs	r3, #1
 8025cd8:	b29c      	uxth	r4, r3
 8025cda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8025cde:	b29a      	uxth	r2, r3
 8025ce0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8025ce2:	4413      	add	r3, r2
 8025ce4:	b29b      	uxth	r3, r3
 8025ce6:	3b01      	subs	r3, #1
 8025ce8:	b29b      	uxth	r3, r3
 8025cea:	4622      	mov	r2, r4
 8025cec:	f7ff fd88 	bl	8025800 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select();
 8025cf0:	f7ff faf6 	bl	80252e0 <ili9341_spi_tft_select>

  //HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_DC), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_DC, __GPIO_PIN_SET__);
 8025cf4:	2101      	movs	r1, #1
 8025cf6:	2009      	movs	r0, #9
 8025cf8:	f010 fb9e 	bl	8036438 <drv_gpioWritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8025cfc:	e014      	b.n	8025d28 <ili9341_fill_rect+0xf0>
    curr_wc = rect_wc;
 8025cfe:	69fb      	ldr	r3, [r7, #28]
 8025d00:	613b      	str	r3, [r7, #16]
    if (curr_wc > block_wc)
 8025d02:	693a      	ldr	r2, [r7, #16]
 8025d04:	69bb      	ldr	r3, [r7, #24]
 8025d06:	429a      	cmp	r2, r3
 8025d08:	d901      	bls.n	8025d0e <ili9341_fill_rect+0xd6>
      { curr_wc = block_wc; }
 8025d0a:	69bb      	ldr	r3, [r7, #24]
 8025d0c:	613b      	str	r3, [r7, #16]
    ili9341_transmit_color(curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8025d0e:	693b      	ldr	r3, [r7, #16]
 8025d10:	b29b      	uxth	r3, r3
 8025d12:	005b      	lsls	r3, r3, #1
 8025d14:	b29b      	uxth	r3, r3
 8025d16:	2201      	movs	r2, #1
 8025d18:	4908      	ldr	r1, [pc, #32]	; (8025d3c <ili9341_fill_rect+0x104>)
 8025d1a:	4618      	mov	r0, r3
 8025d1c:	f7ff fdce 	bl	80258bc <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8025d20:	69fa      	ldr	r2, [r7, #28]
 8025d22:	693b      	ldr	r3, [r7, #16]
 8025d24:	1ad3      	subs	r3, r2, r3
 8025d26:	61fb      	str	r3, [r7, #28]
  while (rect_wc > 0) {
 8025d28:	69fb      	ldr	r3, [r7, #28]
 8025d2a:	2b00      	cmp	r3, #0
 8025d2c:	d1e7      	bne.n	8025cfe <ili9341_fill_rect+0xc6>
  }

  ili9341_spi_tft_release();
 8025d2e:	f7ff fadf 	bl	80252f0 <ili9341_spi_tft_release>
 8025d32:	e000      	b.n	8025d36 <ili9341_fill_rect+0xfe>
    { return; }
 8025d34:	bf00      	nop
  //}
  //gos_mutexUnlock(&ili9341Mutex);
}
 8025d36:	3724      	adds	r7, #36	; 0x24
 8025d38:	46bd      	mov	sp, r7
 8025d3a:	bd90      	pop	{r4, r7, pc}
 8025d3c:	200057d8 	.word	0x200057d8

08025d40 <ili9341_fill_screen>:
  ili9341_draw_line(color, x, y - r, x, (y - r) + (2 * r) + 1);
  ili9341_fill_quarter_circle(color, x, y, r, 3, 0);
}

void ili9341_fill_screen(ili9341_color_t color)
{
 8025d40:	b580      	push	{r7, lr}
 8025d42:	b084      	sub	sp, #16
 8025d44:	af02      	add	r7, sp, #8
 8025d46:	4603      	mov	r3, r0
 8025d48:	80fb      	strh	r3, [r7, #6]
  ili9341_fill_rect(color,
 8025d4a:	4b07      	ldr	r3, [pc, #28]	; (8025d68 <ili9341_fill_screen+0x28>)
 8025d4c:	885a      	ldrh	r2, [r3, #2]
 8025d4e:	4b06      	ldr	r3, [pc, #24]	; (8025d68 <ili9341_fill_screen+0x28>)
 8025d50:	889b      	ldrh	r3, [r3, #4]
 8025d52:	88f8      	ldrh	r0, [r7, #6]
 8025d54:	9300      	str	r3, [sp, #0]
 8025d56:	4613      	mov	r3, r2
 8025d58:	2200      	movs	r2, #0
 8025d5a:	2100      	movs	r1, #0
 8025d5c:	f7ff ff6c 	bl	8025c38 <ili9341_fill_rect>
      0, 0, lcd.screen_size.width, lcd.screen_size.height);
}
 8025d60:	bf00      	nop
 8025d62:	3708      	adds	r7, #8
 8025d64:	46bd      	mov	sp, r7
 8025d66:	bd80      	pop	{r7, pc}
 8025d68:	20005794 	.word	0x20005794

08025d6c <ili9341_draw_char>:
  ili9341_spi_tft_release();
  ili9341_transmit_wait();
}

void ili9341_draw_char(ili9341_text_attr_t attr, char ch)
{
 8025d6c:	b590      	push	{r4, r7, lr}
 8025d6e:	b091      	sub	sp, #68	; 0x44
 8025d70:	af00      	add	r7, sp, #0
 8025d72:	1d3c      	adds	r4, r7, #4
 8025d74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8025d78:	70fb      	strb	r3, [r7, #3]
  // verify we have something within screen dimensions to be drawn
  int16_t  _x = attr.origin_x;
 8025d7a:	89bb      	ldrh	r3, [r7, #12]
 8025d7c:	b21b      	sxth	r3, r3
 8025d7e:	837b      	strh	r3, [r7, #26]
  int16_t  _y = attr.origin_y;
 8025d80:	89fb      	ldrh	r3, [r7, #14]
 8025d82:	b21b      	sxth	r3, r3
 8025d84:	833b      	strh	r3, [r7, #24]
  uint16_t _w = attr.font->width;
 8025d86:	687b      	ldr	r3, [r7, #4]
 8025d88:	781b      	ldrb	r3, [r3, #0]
 8025d8a:	b29b      	uxth	r3, r3
 8025d8c:	82fb      	strh	r3, [r7, #22]
  uint16_t _h = attr.font->height;
 8025d8e:	687b      	ldr	r3, [r7, #4]
 8025d90:	785b      	ldrb	r3, [r3, #1]
 8025d92:	b29b      	uxth	r3, r3
 8025d94:	82bb      	strh	r3, [r7, #20]
  if (ibNOT(ili9341_clip_rect(&_x, &_y, &_w, &_h)))
 8025d96:	f107 0314 	add.w	r3, r7, #20
 8025d9a:	f107 0216 	add.w	r2, r7, #22
 8025d9e:	f107 0118 	add.w	r1, r7, #24
 8025da2:	f107 001a 	add.w	r0, r7, #26
 8025da6:	f000 f8bd 	bl	8025f24 <ili9341_clip_rect>
 8025daa:	4603      	mov	r3, r0
 8025dac:	2b00      	cmp	r3, #0
 8025dae:	f000 80b2 	beq.w	8025f16 <ili9341_draw_char+0x1aa>
    { return; }

  //if (gos_mutexLock(&ili9341Mutex, 1000) == GOS_SUCCESS){

  // 16-bit color, so need 2 bytes for each pixel being filled
  uint32_t num_pixels = attr.font->width * attr.font->height;
 8025db2:	687b      	ldr	r3, [r7, #4]
 8025db4:	781b      	ldrb	r3, [r3, #0]
 8025db6:	461a      	mov	r2, r3
 8025db8:	687b      	ldr	r3, [r7, #4]
 8025dba:	785b      	ldrb	r3, [r3, #1]
 8025dbc:	fb02 f303 	mul.w	r3, r2, r3
 8025dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rect_wc    = num_pixels;
 8025dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025dc4:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint16_t fg_le = __LEu16(&(attr.fg_color));
 8025dc6:	1d3b      	adds	r3, r7, #4
 8025dc8:	3304      	adds	r3, #4
 8025dca:	3301      	adds	r3, #1
 8025dcc:	781b      	ldrb	r3, [r3, #0]
 8025dce:	b21a      	sxth	r2, r3
 8025dd0:	1d3b      	adds	r3, r7, #4
 8025dd2:	3304      	adds	r3, #4
 8025dd4:	781b      	ldrb	r3, [r3, #0]
 8025dd6:	021b      	lsls	r3, r3, #8
 8025dd8:	b21b      	sxth	r3, r3
 8025dda:	4313      	orrs	r3, r2
 8025ddc:	b21b      	sxth	r3, r3
 8025dde:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t bg_le = __LEu16(&(attr.bg_color));
 8025de0:	1d3b      	adds	r3, r7, #4
 8025de2:	3306      	adds	r3, #6
 8025de4:	3301      	adds	r3, #1
 8025de6:	781b      	ldrb	r3, [r3, #0]
 8025de8:	b21a      	sxth	r2, r3
 8025dea:	1d3b      	adds	r3, r7, #4
 8025dec:	3306      	adds	r3, #6
 8025dee:	781b      	ldrb	r3, [r3, #0]
 8025df0:	021b      	lsls	r3, r3, #8
 8025df2:	b21b      	sxth	r3, r3
 8025df4:	4313      	orrs	r3, r2
 8025df6:	b21b      	sxth	r3, r3
 8025df8:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint32_t block_wc = rect_wc;
 8025dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8025dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025e04:	d902      	bls.n	8025e0c <ili9341_draw_char+0xa0>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8025e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025e0a:	63bb      	str	r3, [r7, #56]	; 0x38

  // initialize the buffer with glyph from selected font
  uint8_t ch_index = glyph_index(ch);
 8025e0c:	78fb      	ldrb	r3, [r7, #3]
 8025e0e:	4618      	mov	r0, r3
 8025e10:	f7ff fce0 	bl	80257d4 <glyph_index>
 8025e14:	4603      	mov	r3, r0
 8025e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8025e1a:	2300      	movs	r3, #0
 8025e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8025e1e:	e03d      	b.n	8025e9c <ili9341_draw_char+0x130>
    uint32_t gl = (uint32_t)attr.font->glyph[ch_index * attr.font->height + yi];
 8025e20:	687a      	ldr	r2, [r7, #4]
 8025e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025e26:	6879      	ldr	r1, [r7, #4]
 8025e28:	7849      	ldrb	r1, [r1, #1]
 8025e2a:	fb01 f303 	mul.w	r3, r1, r3
 8025e2e:	4619      	mov	r1, r3
 8025e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e32:	440b      	add	r3, r1
 8025e34:	005b      	lsls	r3, r3, #1
 8025e36:	4413      	add	r3, r2
 8025e38:	885b      	ldrh	r3, [r3, #2]
 8025e3a:	61fb      	str	r3, [r7, #28]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8025e3c:	2300      	movs	r3, #0
 8025e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8025e40:	e023      	b.n	8025e8a <ili9341_draw_char+0x11e>
      if ((gl << xi) & 0x8000)
 8025e42:	69fa      	ldr	r2, [r7, #28]
 8025e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e46:	fa02 f303 	lsl.w	r3, r2, r3
 8025e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025e4e:	2b00      	cmp	r3, #0
 8025e50:	d00c      	beq.n	8025e6c <ili9341_draw_char+0x100>
        { spi_tx_block[yi * attr.font->width + xi] = fg_le; }
 8025e52:	687b      	ldr	r3, [r7, #4]
 8025e54:	781b      	ldrb	r3, [r3, #0]
 8025e56:	461a      	mov	r2, r3
 8025e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e5a:	fb03 f202 	mul.w	r2, r3, r2
 8025e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e60:	4413      	add	r3, r2
 8025e62:	492f      	ldr	r1, [pc, #188]	; (8025f20 <ili9341_draw_char+0x1b4>)
 8025e64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025e66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8025e6a:	e00b      	b.n	8025e84 <ili9341_draw_char+0x118>
      else
        { spi_tx_block[yi * attr.font->width + xi] = bg_le; }
 8025e6c:	687b      	ldr	r3, [r7, #4]
 8025e6e:	781b      	ldrb	r3, [r3, #0]
 8025e70:	461a      	mov	r2, r3
 8025e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e74:	fb03 f202 	mul.w	r2, r3, r2
 8025e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e7a:	4413      	add	r3, r2
 8025e7c:	4928      	ldr	r1, [pc, #160]	; (8025f20 <ili9341_draw_char+0x1b4>)
 8025e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025e80:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint32_t xi = 0; xi < attr.font->width; ++xi) {
 8025e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e86:	3301      	adds	r3, #1
 8025e88:	633b      	str	r3, [r7, #48]	; 0x30
 8025e8a:	687b      	ldr	r3, [r7, #4]
 8025e8c:	781b      	ldrb	r3, [r3, #0]
 8025e8e:	461a      	mov	r2, r3
 8025e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025e92:	4293      	cmp	r3, r2
 8025e94:	d3d5      	bcc.n	8025e42 <ili9341_draw_char+0xd6>
  for (uint32_t yi = 0; yi < attr.font->height; ++yi) {
 8025e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e98:	3301      	adds	r3, #1
 8025e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8025e9c:	687b      	ldr	r3, [r7, #4]
 8025e9e:	785b      	ldrb	r3, [r3, #1]
 8025ea0:	461a      	mov	r2, r3
 8025ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025ea4:	4293      	cmp	r3, r2
 8025ea6:	d3bb      	bcc.n	8025e20 <ili9341_draw_char+0xb4>
    }
  }

  // select target region
  ili9341_spi_tft_set_address_rect(
 8025ea8:	89b8      	ldrh	r0, [r7, #12]
 8025eaa:	89f9      	ldrh	r1, [r7, #14]
      attr.origin_x, attr.origin_y,
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 8025eac:	89ba      	ldrh	r2, [r7, #12]
 8025eae:	687b      	ldr	r3, [r7, #4]
 8025eb0:	781b      	ldrb	r3, [r3, #0]
 8025eb2:	b29b      	uxth	r3, r3
 8025eb4:	4413      	add	r3, r2
 8025eb6:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(
 8025eb8:	3b01      	subs	r3, #1
 8025eba:	b29c      	uxth	r4, r3
      attr.origin_x + attr.font->width - 1, attr.origin_y + attr.font->height - 1);
 8025ebc:	89fa      	ldrh	r2, [r7, #14]
 8025ebe:	687b      	ldr	r3, [r7, #4]
 8025ec0:	785b      	ldrb	r3, [r3, #1]
 8025ec2:	b29b      	uxth	r3, r3
 8025ec4:	4413      	add	r3, r2
 8025ec6:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(
 8025ec8:	3b01      	subs	r3, #1
 8025eca:	b29b      	uxth	r3, r3
 8025ecc:	4622      	mov	r2, r4
 8025ece:	f7ff fc97 	bl	8025800 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select();
 8025ed2:	f7ff fa05 	bl	80252e0 <ili9341_spi_tft_select>

  //HAL_GPIO_WritePin(lcd->data_command_port, lcd->data_command_pin, __GPIO_PIN_SET__);
  //drv_gpio_write_pin(iodef_get(IO_DISPL_DC), __GPIO_PIN_SET__);
  drv_gpioWritePin(IO_DISPL_DC, __GPIO_PIN_SET__);
 8025ed6:	2101      	movs	r1, #1
 8025ed8:	2009      	movs	r0, #9
 8025eda:	f010 faad 	bl	8036438 <drv_gpioWritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8025ede:	e014      	b.n	8025f0a <ili9341_draw_char+0x19e>
    curr_wc = rect_wc;
 8025ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (curr_wc > block_wc)
 8025ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025ee8:	429a      	cmp	r2, r3
 8025eea:	d901      	bls.n	8025ef0 <ili9341_draw_char+0x184>
      { curr_wc = block_wc; }
 8025eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    ili9341_transmit_color(curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8025ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ef2:	b29b      	uxth	r3, r3
 8025ef4:	005b      	lsls	r3, r3, #1
 8025ef6:	b29b      	uxth	r3, r3
 8025ef8:	2201      	movs	r2, #1
 8025efa:	4909      	ldr	r1, [pc, #36]	; (8025f20 <ili9341_draw_char+0x1b4>)
 8025efc:	4618      	mov	r0, r3
 8025efe:	f7ff fcdd 	bl	80258bc <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8025f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f06:	1ad3      	subs	r3, r2, r3
 8025f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (rect_wc > 0) {
 8025f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025f0c:	2b00      	cmp	r3, #0
 8025f0e:	d1e7      	bne.n	8025ee0 <ili9341_draw_char+0x174>
  }

  ili9341_spi_tft_release();
 8025f10:	f7ff f9ee 	bl	80252f0 <ili9341_spi_tft_release>
 8025f14:	e000      	b.n	8025f18 <ili9341_draw_char+0x1ac>
    { return; }
 8025f16:	bf00      	nop
  //}
  //gos_mutexUnlock(&ili9341Mutex);
}
 8025f18:	3744      	adds	r7, #68	; 0x44
 8025f1a:	46bd      	mov	sp, r7
 8025f1c:	bd90      	pop	{r4, r7, pc}
 8025f1e:	bf00      	nop
 8025f20:	200057d8 	.word	0x200057d8

08025f24 <ili9341_clip_rect>:

// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(
    int16_t *x, int16_t *y, uint16_t *w, uint16_t *h)
{
 8025f24:	b480      	push	{r7}
 8025f26:	b085      	sub	sp, #20
 8025f28:	af00      	add	r7, sp, #0
 8025f2a:	60f8      	str	r0, [r7, #12]
 8025f2c:	60b9      	str	r1, [r7, #8]
 8025f2e:	607a      	str	r2, [r7, #4]
 8025f30:	603b      	str	r3, [r7, #0]
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
 8025f32:	68fb      	ldr	r3, [r7, #12]
 8025f34:	2b00      	cmp	r3, #0
 8025f36:	d002      	beq.n	8025f3e <ili9341_clip_rect+0x1a>
 8025f38:	68bb      	ldr	r3, [r7, #8]
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	d101      	bne.n	8025f42 <ili9341_clip_rect+0x1e>
    { return ibFalse; }
 8025f3e:	2300      	movs	r3, #0
 8025f40:	e089      	b.n	8026056 <ili9341_clip_rect+0x132>

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= lcd.screen_size.width) || (*y >= lcd.screen_size.height))
 8025f42:	68fb      	ldr	r3, [r7, #12]
 8025f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025f48:	461a      	mov	r2, r3
 8025f4a:	4b46      	ldr	r3, [pc, #280]	; (8026064 <ili9341_clip_rect+0x140>)
 8025f4c:	885b      	ldrh	r3, [r3, #2]
 8025f4e:	429a      	cmp	r2, r3
 8025f50:	da07      	bge.n	8025f62 <ili9341_clip_rect+0x3e>
 8025f52:	68bb      	ldr	r3, [r7, #8]
 8025f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025f58:	461a      	mov	r2, r3
 8025f5a:	4b42      	ldr	r3, [pc, #264]	; (8026064 <ili9341_clip_rect+0x140>)
 8025f5c:	889b      	ldrh	r3, [r3, #4]
 8025f5e:	429a      	cmp	r2, r3
 8025f60:	db01      	blt.n	8025f66 <ili9341_clip_rect+0x42>
    { return ibFalse; }
 8025f62:	2300      	movs	r3, #0
 8025f64:	e077      	b.n	8026056 <ili9341_clip_rect+0x132>

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 8025f66:	687b      	ldr	r3, [r7, #4]
 8025f68:	2b00      	cmp	r3, #0
 8025f6a:	d00c      	beq.n	8025f86 <ili9341_clip_rect+0x62>
 8025f6c:	683b      	ldr	r3, [r7, #0]
 8025f6e:	2b00      	cmp	r3, #0
 8025f70:	d009      	beq.n	8025f86 <ili9341_clip_rect+0x62>
    if ((0U == *w) || (0U == *h))
 8025f72:	687b      	ldr	r3, [r7, #4]
 8025f74:	881b      	ldrh	r3, [r3, #0]
 8025f76:	2b00      	cmp	r3, #0
 8025f78:	d003      	beq.n	8025f82 <ili9341_clip_rect+0x5e>
 8025f7a:	683b      	ldr	r3, [r7, #0]
 8025f7c:	881b      	ldrh	r3, [r3, #0]
 8025f7e:	2b00      	cmp	r3, #0
 8025f80:	d101      	bne.n	8025f86 <ili9341_clip_rect+0x62>
      { return ibFalse; }
 8025f82:	2300      	movs	r3, #0
 8025f84:	e067      	b.n	8026056 <ili9341_clip_rect+0x132>
  }

  // 3. rect origin has negative component, adjust origin and dimensions
  if (*x < 0) {
 8025f86:	68fb      	ldr	r3, [r7, #12]
 8025f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025f8c:	2b00      	cmp	r3, #0
 8025f8e:	da0f      	bge.n	8025fb0 <ili9341_clip_rect+0x8c>
    if (NULL != w)
 8025f90:	687b      	ldr	r3, [r7, #4]
 8025f92:	2b00      	cmp	r3, #0
 8025f94:	d009      	beq.n	8025faa <ili9341_clip_rect+0x86>
      { *w -= *x; }
 8025f96:	687b      	ldr	r3, [r7, #4]
 8025f98:	881a      	ldrh	r2, [r3, #0]
 8025f9a:	68fb      	ldr	r3, [r7, #12]
 8025f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025fa0:	b29b      	uxth	r3, r3
 8025fa2:	1ad3      	subs	r3, r2, r3
 8025fa4:	b29a      	uxth	r2, r3
 8025fa6:	687b      	ldr	r3, [r7, #4]
 8025fa8:	801a      	strh	r2, [r3, #0]
    *x = 0;
 8025faa:	68fb      	ldr	r3, [r7, #12]
 8025fac:	2200      	movs	r2, #0
 8025fae:	801a      	strh	r2, [r3, #0]
  }
  if (*y < 0) {
 8025fb0:	68bb      	ldr	r3, [r7, #8]
 8025fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025fb6:	2b00      	cmp	r3, #0
 8025fb8:	da0f      	bge.n	8025fda <ili9341_clip_rect+0xb6>
    if (NULL != h)
 8025fba:	683b      	ldr	r3, [r7, #0]
 8025fbc:	2b00      	cmp	r3, #0
 8025fbe:	d009      	beq.n	8025fd4 <ili9341_clip_rect+0xb0>
      { *h -= *y; }
 8025fc0:	683b      	ldr	r3, [r7, #0]
 8025fc2:	881a      	ldrh	r2, [r3, #0]
 8025fc4:	68bb      	ldr	r3, [r7, #8]
 8025fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025fca:	b29b      	uxth	r3, r3
 8025fcc:	1ad3      	subs	r3, r2, r3
 8025fce:	b29a      	uxth	r2, r3
 8025fd0:	683b      	ldr	r3, [r7, #0]
 8025fd2:	801a      	strh	r2, [r3, #0]
    *y = 0;
 8025fd4:	68bb      	ldr	r3, [r7, #8]
 8025fd6:	2200      	movs	r2, #0
 8025fd8:	801a      	strh	r2, [r3, #0]
  }

  if ((NULL != w) && (NULL != h)) {
 8025fda:	687b      	ldr	r3, [r7, #4]
 8025fdc:	2b00      	cmp	r3, #0
 8025fde:	d039      	beq.n	8026054 <ili9341_clip_rect+0x130>
 8025fe0:	683b      	ldr	r3, [r7, #0]
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	d036      	beq.n	8026054 <ili9341_clip_rect+0x130>

    //  4. rect width beyond screen width, reduce rect width
    if ((*x + *w - 1) >= lcd.screen_size.width)
 8025fe6:	68fb      	ldr	r3, [r7, #12]
 8025fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8025fec:	461a      	mov	r2, r3
 8025fee:	687b      	ldr	r3, [r7, #4]
 8025ff0:	881b      	ldrh	r3, [r3, #0]
 8025ff2:	4413      	add	r3, r2
 8025ff4:	4a1b      	ldr	r2, [pc, #108]	; (8026064 <ili9341_clip_rect+0x140>)
 8025ff6:	8852      	ldrh	r2, [r2, #2]
 8025ff8:	4293      	cmp	r3, r2
 8025ffa:	dd09      	ble.n	8026010 <ili9341_clip_rect+0xec>
      { *w = lcd.screen_size.width - *x; }
 8025ffc:	4b19      	ldr	r3, [pc, #100]	; (8026064 <ili9341_clip_rect+0x140>)
 8025ffe:	885a      	ldrh	r2, [r3, #2]
 8026000:	68fb      	ldr	r3, [r7, #12]
 8026002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8026006:	b29b      	uxth	r3, r3
 8026008:	1ad3      	subs	r3, r2, r3
 802600a:	b29a      	uxth	r2, r3
 802600c:	687b      	ldr	r3, [r7, #4]
 802600e:	801a      	strh	r2, [r3, #0]

    //  5. rect height beyond screen height, reduce rect height
    if ((*y + *h - 1) >= lcd.screen_size.height)
 8026010:	68bb      	ldr	r3, [r7, #8]
 8026012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8026016:	461a      	mov	r2, r3
 8026018:	683b      	ldr	r3, [r7, #0]
 802601a:	881b      	ldrh	r3, [r3, #0]
 802601c:	4413      	add	r3, r2
 802601e:	4a11      	ldr	r2, [pc, #68]	; (8026064 <ili9341_clip_rect+0x140>)
 8026020:	8892      	ldrh	r2, [r2, #4]
 8026022:	4293      	cmp	r3, r2
 8026024:	dd09      	ble.n	802603a <ili9341_clip_rect+0x116>
      { *h = lcd.screen_size.height - *y; }
 8026026:	4b0f      	ldr	r3, [pc, #60]	; (8026064 <ili9341_clip_rect+0x140>)
 8026028:	889a      	ldrh	r2, [r3, #4]
 802602a:	68bb      	ldr	r3, [r7, #8]
 802602c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8026030:	b29b      	uxth	r3, r3
 8026032:	1ad3      	subs	r3, r2, r3
 8026034:	b29a      	uxth	r2, r3
 8026036:	683b      	ldr	r3, [r7, #0]
 8026038:	801a      	strh	r2, [r3, #0]

    return (*w > 0U) && (*h > 0U);
 802603a:	687b      	ldr	r3, [r7, #4]
 802603c:	881b      	ldrh	r3, [r3, #0]
 802603e:	2b00      	cmp	r3, #0
 8026040:	d005      	beq.n	802604e <ili9341_clip_rect+0x12a>
 8026042:	683b      	ldr	r3, [r7, #0]
 8026044:	881b      	ldrh	r3, [r3, #0]
 8026046:	2b00      	cmp	r3, #0
 8026048:	d001      	beq.n	802604e <ili9341_clip_rect+0x12a>
 802604a:	2301      	movs	r3, #1
 802604c:	e000      	b.n	8026050 <ili9341_clip_rect+0x12c>
 802604e:	2300      	movs	r3, #0
 8026050:	b2db      	uxtb	r3, r3
 8026052:	e000      	b.n	8026056 <ili9341_clip_rect+0x132>
  }

  return ibTrue;
 8026054:	2301      	movs	r3, #1
}
 8026056:	4618      	mov	r0, r3
 8026058:	3714      	adds	r7, #20
 802605a:	46bd      	mov	sp, r7
 802605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026060:	4770      	bx	lr
 8026062:	bf00      	nop
 8026064:	20005794 	.word	0x20005794

08026068 <lcd_driver_init>:

GOS_STATIC void_t clear (void_t);


gos_result_t lcd_driver_init (void_t)
{
 8026068:	b580      	push	{r7, lr}
 802606a:	b082      	sub	sp, #8
 802606c:	af00      	add	r7, sp, #0
	gos_result_t lcdDriverInitResult = GOS_SUCCESS;
 802606e:	2355      	movs	r3, #85	; 0x55
 8026070:	71fb      	strb	r3, [r7, #7]
	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();
#else
	gos_kernelDelayMs(20);
 8026072:	2014      	movs	r0, #20
 8026074:	f014 fb5a 	bl	803a72c <gos_kernelDelayMs>
	lcd_driver_send_cmd(0x3);
 8026078:	2003      	movs	r0, #3
 802607a:	f000 f8ab 	bl	80261d4 <lcd_driver_send_cmd>
	gos_kernelDelayMs(5);
 802607e:	2005      	movs	r0, #5
 8026080:	f014 fb54 	bl	803a72c <gos_kernelDelayMs>
	lcd_driver_send_cmd(0x3);
 8026084:	2003      	movs	r0, #3
 8026086:	f000 f8a5 	bl	80261d4 <lcd_driver_send_cmd>
	gos_kernelDelayMs(1);
 802608a:	2001      	movs	r0, #1
 802608c:	f014 fb4e 	bl	803a72c <gos_kernelDelayMs>
	lcd_driver_send_cmd(0x3);
 8026090:	2003      	movs	r0, #3
 8026092:	f000 f89f 	bl	80261d4 <lcd_driver_send_cmd>
	gos_kernelDelayMs(1);
 8026096:	2001      	movs	r0, #1
 8026098:	f014 fb48 	bl	803a72c <gos_kernelDelayMs>
	lcd_driver_send_cmd(0x2);
 802609c:	2002      	movs	r0, #2
 802609e:	f000 f899 	bl	80261d4 <lcd_driver_send_cmd>
	gos_kernelDelayMs(1);
 80260a2:	2001      	movs	r0, #1
 80260a4:	f014 fb42 	bl	803a72c <gos_kernelDelayMs>

	// set # lines, font size, etc.
	lcd_driver_send_cmd(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS | LCD_2LINE);
 80260a8:	2028      	movs	r0, #40	; 0x28
 80260aa:	f000 f893 	bl	80261d4 <lcd_driver_send_cmd>

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80260ae:	4b0e      	ldr	r3, [pc, #56]	; (80260e8 <lcd_driver_init+0x80>)
 80260b0:	2204      	movs	r2, #4
 80260b2:	701a      	strb	r2, [r3, #0]
	lcd_driver_send_cmd(LCD_DISPLAYCONTROL | _displaycontrol);
 80260b4:	4b0c      	ldr	r3, [pc, #48]	; (80260e8 <lcd_driver_init+0x80>)
 80260b6:	781b      	ldrb	r3, [r3, #0]
 80260b8:	f043 0308 	orr.w	r3, r3, #8
 80260bc:	b2db      	uxtb	r3, r3
 80260be:	4618      	mov	r0, r3
 80260c0:	f000 f888 	bl	80261d4 <lcd_driver_send_cmd>

	// clear it off
	clear();
 80260c4:	f000 f8f2 	bl	80262ac <clear>

	// Initialize to default text direction (for roman languages).
	lcd_driver_send_cmd(LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 80260c8:	2006      	movs	r0, #6
 80260ca:	f000 f883 	bl	80261d4 <lcd_driver_send_cmd>

	lcd_driver_send_cmd(LCD_RETURNHOME);  // set cursor position to zero
 80260ce:	2002      	movs	r0, #2
 80260d0:	f000 f880 	bl	80261d4 <lcd_driver_send_cmd>
	gos_kernelDelayUs(2000);
 80260d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80260d8:	f014 fb08 	bl	803a6ec <gos_kernelDelayUs>
#endif

	return lcdDriverInitResult;
 80260dc:	79fb      	ldrb	r3, [r7, #7]
}
 80260de:	4618      	mov	r0, r3
 80260e0:	3708      	adds	r7, #8
 80260e2:	46bd      	mov	sp, r7
 80260e4:	bd80      	pop	{r7, pc}
 80260e6:	bf00      	nop
 80260e8:	20005fd8 	.word	0x20005fd8

080260ec <lcd_driver_write_string>:

GOS_STATIC bool_t writeStringReady = GOS_TRUE;

GOS_INLINE gos_result_t lcd_driver_write_string (u8_t line, const char_t* str)
{
 80260ec:	b580      	push	{r7, lr}
 80260ee:	b084      	sub	sp, #16
 80260f0:	af00      	add	r7, sp, #0
 80260f2:	4603      	mov	r3, r0
 80260f4:	6039      	str	r1, [r7, #0]
 80260f6:	71fb      	strb	r3, [r7, #7]
	gos_result_t lcdDriverWriteStringResult = GOS_ERROR;
 80260f8:	23ae      	movs	r3, #174	; 0xae
 80260fa:	73fb      	strb	r3, [r7, #15]
	u8_t index = 0u;
 80260fc:	2300      	movs	r3, #0
 80260fe:	73bb      	strb	r3, [r7, #14]
	writeStringReady = GOS_FALSE;
#endif

	//if (gos_mutexLock(&lcdMutex, 500) == GOS_SUCCESS)
	{
		if (line < 2)
 8026100:	79fb      	ldrb	r3, [r7, #7]
 8026102:	2b01      	cmp	r3, #1
 8026104:	d854      	bhi.n	80261b0 <lcd_driver_write_string+0xc4>
		{
			lcdDriverWriteStringResult = GOS_SUCCESS;
 8026106:	2355      	movs	r3, #85	; 0x55
 8026108:	73fb      	strb	r3, [r7, #15]
 802610a:	79fb      	ldrb	r3, [r7, #7]
 802610c:	737b      	strb	r3, [r7, #13]
 802610e:	2300      	movs	r3, #0
 8026110:	733b      	strb	r3, [r7, #12]

GOS_STATIC bool_t setCursorReady = GOS_TRUE;

GOS_INLINE gos_result_t lcd_driver_set_cursor (u8_t row, u8_t col)
{
	gos_result_t lcdDriverSetCursorResult = GOS_SUCCESS;
 8026112:	2355      	movs	r3, #85	; 0x55
 8026114:	72fb      	strb	r3, [r7, #11]
	u8_t maskData = (col) & 0x0F;
 8026116:	7b3b      	ldrb	r3, [r7, #12]
 8026118:	f003 030f 	and.w	r3, r3, #15
 802611c:	72bb      	strb	r3, [r7, #10]
	}

	setCursorReady = GOS_FALSE;
#endif

	switch (row)
 802611e:	7b7b      	ldrb	r3, [r7, #13]
 8026120:	2b00      	cmp	r3, #0
 8026122:	d002      	beq.n	802612a <lcd_driver_write_string+0x3e>
 8026124:	2b01      	cmp	r3, #1
 8026126:	d00b      	beq.n	8026140 <lcd_driver_write_string+0x54>
			lcdDriverSetCursorResult = lcd_driver_send_cmd(maskData);
			break;
		}
		default:
		{
			break;
 8026128:	e015      	b.n	8026156 <lcd_driver_write_string+0x6a>
			maskData |= 0x80;
 802612a:	7abb      	ldrb	r3, [r7, #10]
 802612c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8026130:	72bb      	strb	r3, [r7, #10]
			lcdDriverSetCursorResult = lcd_driver_send_cmd(maskData);
 8026132:	7abb      	ldrb	r3, [r7, #10]
 8026134:	4618      	mov	r0, r3
 8026136:	f000 f84d 	bl	80261d4 <lcd_driver_send_cmd>
 802613a:	4603      	mov	r3, r0
 802613c:	72fb      	strb	r3, [r7, #11]
			break;
 802613e:	e00a      	b.n	8026156 <lcd_driver_write_string+0x6a>
			maskData |= 0xC0;
 8026140:	7abb      	ldrb	r3, [r7, #10]
 8026142:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8026146:	72bb      	strb	r3, [r7, #10]
			lcdDriverSetCursorResult = lcd_driver_send_cmd(maskData);
 8026148:	7abb      	ldrb	r3, [r7, #10]
 802614a:	4618      	mov	r0, r3
 802614c:	f000 f842 	bl	80261d4 <lcd_driver_send_cmd>
 8026150:	4603      	mov	r3, r0
 8026152:	72fb      	strb	r3, [r7, #11]
			break;
 8026154:	bf00      	nop
		}
	}

	//gos_taskSleep(1);

	actualRow = row;
 8026156:	4a1a      	ldr	r2, [pc, #104]	; (80261c0 <lcd_driver_write_string+0xd4>)
 8026158:	7b7b      	ldrb	r3, [r7, #13]
 802615a:	7013      	strb	r3, [r2, #0]

	if (actualRow == 0)
 802615c:	4b18      	ldr	r3, [pc, #96]	; (80261c0 <lcd_driver_write_string+0xd4>)
 802615e:	781b      	ldrb	r3, [r3, #0]
 8026160:	2b00      	cmp	r3, #0
 8026162:	d103      	bne.n	802616c <lcd_driver_write_string+0x80>
	{
		actualCol1 = col;
 8026164:	4a17      	ldr	r2, [pc, #92]	; (80261c4 <lcd_driver_write_string+0xd8>)
 8026166:	7b3b      	ldrb	r3, [r7, #12]
 8026168:	7013      	strb	r3, [r2, #0]
 802616a:	e002      	b.n	8026172 <lcd_driver_write_string+0x86>
	}
	else
	{
		actualCol2 = col;
 802616c:	4a16      	ldr	r2, [pc, #88]	; (80261c8 <lcd_driver_write_string+0xdc>)
 802616e:	7b3b      	ldrb	r3, [r7, #12]
 8026170:	7013      	strb	r3, [r2, #0]
	}

	setCursorReady = GOS_TRUE;
 8026172:	4b16      	ldr	r3, [pc, #88]	; (80261cc <lcd_driver_write_string+0xe0>)
 8026174:	2236      	movs	r2, #54	; 0x36
 8026176:	701a      	strb	r2, [r3, #0]
			for (index = 0u; index < 16u && str[index]; index++)
 8026178:	2300      	movs	r3, #0
 802617a:	73bb      	strb	r3, [r7, #14]
 802617c:	e00f      	b.n	802619e <lcd_driver_write_string+0xb2>
				if (lcd_driver_send_data((u8_t)str[index]) != GOS_SUCCESS)
 802617e:	7bbb      	ldrb	r3, [r7, #14]
 8026180:	683a      	ldr	r2, [r7, #0]
 8026182:	4413      	add	r3, r2
 8026184:	781b      	ldrb	r3, [r3, #0]
 8026186:	4618      	mov	r0, r3
 8026188:	f000 f85a 	bl	8026240 <lcd_driver_send_data>
 802618c:	4603      	mov	r3, r0
 802618e:	2b55      	cmp	r3, #85	; 0x55
 8026190:	d002      	beq.n	8026198 <lcd_driver_write_string+0xac>
					lcdDriverWriteStringResult = GOS_ERROR;
 8026192:	23ae      	movs	r3, #174	; 0xae
 8026194:	73fb      	strb	r3, [r7, #15]
					break;
 8026196:	e00b      	b.n	80261b0 <lcd_driver_write_string+0xc4>
			for (index = 0u; index < 16u && str[index]; index++)
 8026198:	7bbb      	ldrb	r3, [r7, #14]
 802619a:	3301      	adds	r3, #1
 802619c:	73bb      	strb	r3, [r7, #14]
 802619e:	7bbb      	ldrb	r3, [r7, #14]
 80261a0:	2b0f      	cmp	r3, #15
 80261a2:	d805      	bhi.n	80261b0 <lcd_driver_write_string+0xc4>
 80261a4:	7bbb      	ldrb	r3, [r7, #14]
 80261a6:	683a      	ldr	r2, [r7, #0]
 80261a8:	4413      	add	r3, r2
 80261aa:	781b      	ldrb	r3, [r3, #0]
 80261ac:	2b00      	cmp	r3, #0
 80261ae:	d1e6      	bne.n	802617e <lcd_driver_write_string+0x92>
	writeStringReady = GOS_TRUE;
 80261b0:	4b07      	ldr	r3, [pc, #28]	; (80261d0 <lcd_driver_write_string+0xe4>)
 80261b2:	2236      	movs	r2, #54	; 0x36
 80261b4:	701a      	strb	r2, [r3, #0]
	return lcdDriverWriteStringResult;
 80261b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80261b8:	4618      	mov	r0, r3
 80261ba:	3710      	adds	r7, #16
 80261bc:	46bd      	mov	sp, r7
 80261be:	bd80      	pop	{r7, pc}
 80261c0:	20005fd9 	.word	0x20005fd9
 80261c4:	20005fda 	.word	0x20005fda
 80261c8:	20005fdb 	.word	0x20005fdb
 80261cc:	20001951 	.word	0x20001951
 80261d0:	20001950 	.word	0x20001950

080261d4 <lcd_driver_send_cmd>:

	return lcdDriverClearDisplayResult;
}

GOS_STATIC gos_result_t lcd_driver_send_cmd (u8_t cmd)
{
 80261d4:	b580      	push	{r7, lr}
 80261d6:	b086      	sub	sp, #24
 80261d8:	af02      	add	r7, sp, #8
 80261da:	4603      	mov	r3, r0
 80261dc:	71fb      	strb	r3, [r7, #7]
	gos_result_t lcdDriverSendCmdResult = GOS_ERROR;
 80261de:	23ae      	movs	r3, #174	; 0xae
 80261e0:	73fb      	strb	r3, [r7, #15]
	u8_t data_u, data_l;
	u8_t data_t [4];

	data_u = ( cmd & 0xF0 );
 80261e2:	79fb      	ldrb	r3, [r7, #7]
 80261e4:	f023 030f 	bic.w	r3, r3, #15
 80261e8:	73bb      	strb	r3, [r7, #14]
	data_l = ( ( cmd << 4 ) & 0xF0 );
 80261ea:	79fb      	ldrb	r3, [r7, #7]
 80261ec:	011b      	lsls	r3, r3, #4
 80261ee:	737b      	strb	r3, [r7, #13]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 80261f0:	7bbb      	ldrb	r3, [r7, #14]
 80261f2:	f043 030c 	orr.w	r3, r3, #12
 80261f6:	b2db      	uxtb	r3, r3
 80261f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 80261fa:	7bbb      	ldrb	r3, [r7, #14]
 80261fc:	f043 0308 	orr.w	r3, r3, #8
 8026200:	b2db      	uxtb	r3, r3
 8026202:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 8026204:	7b7b      	ldrb	r3, [r7, #13]
 8026206:	f043 030c 	orr.w	r3, r3, #12
 802620a:	b2db      	uxtb	r3, r3
 802620c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 802620e:	7b7b      	ldrb	r3, [r7, #13]
 8026210:	f043 0308 	orr.w	r3, r3, #8
 8026214:	b2db      	uxtb	r3, r3
 8026216:	72fb      	strb	r3, [r7, #11]

	//lcdDriverSendCmdResult = i2c_driver_transmit(LCD_ADDRESS, data_t, 4);
	lcdDriverSendCmdResult = drv_i2cTransmitIT(DRV_I2C_INSTANCE_1, LCD_ADDRESS, data_t, 4, GOS_MUTEX_ENDLESS_TMO, 1000);
 8026218:	f107 0208 	add.w	r2, r7, #8
 802621c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026220:	9301      	str	r3, [sp, #4]
 8026222:	f04f 33ff 	mov.w	r3, #4294967295
 8026226:	9300      	str	r3, [sp, #0]
 8026228:	2304      	movs	r3, #4
 802622a:	2144      	movs	r1, #68	; 0x44
 802622c:	2000      	movs	r0, #0
 802622e:	f010 fcdb 	bl	8036be8 <drv_i2cTransmitIT>
 8026232:	4603      	mov	r3, r0
 8026234:	73fb      	strb	r3, [r7, #15]

	//gos_taskSleep(1);

	return lcdDriverSendCmdResult;
 8026236:	7bfb      	ldrb	r3, [r7, #15]
}
 8026238:	4618      	mov	r0, r3
 802623a:	3710      	adds	r7, #16
 802623c:	46bd      	mov	sp, r7
 802623e:	bd80      	pop	{r7, pc}

08026240 <lcd_driver_send_data>:

GOS_STATIC gos_result_t lcd_driver_send_data (u8_t data)
{
 8026240:	b580      	push	{r7, lr}
 8026242:	b086      	sub	sp, #24
 8026244:	af02      	add	r7, sp, #8
 8026246:	4603      	mov	r3, r0
 8026248:	71fb      	strb	r3, [r7, #7]
	gos_result_t lcdDriverSendDataResult = GOS_ERROR;
 802624a:	23ae      	movs	r3, #174	; 0xae
 802624c:	73fb      	strb	r3, [r7, #15]
	u8_t data_u, data_l;
	u8_t data_t [4];

	data_u = ( data & 0xF0 );
 802624e:	79fb      	ldrb	r3, [r7, #7]
 8026250:	f023 030f 	bic.w	r3, r3, #15
 8026254:	73bb      	strb	r3, [r7, #14]
	data_l = ( ( data << 4 ) & 0xF0 );
 8026256:	79fb      	ldrb	r3, [r7, #7]
 8026258:	011b      	lsls	r3, r3, #4
 802625a:	737b      	strb	r3, [r7, #13]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 802625c:	7bbb      	ldrb	r3, [r7, #14]
 802625e:	f043 030d 	orr.w	r3, r3, #13
 8026262:	b2db      	uxtb	r3, r3
 8026264:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 8026266:	7bbb      	ldrb	r3, [r7, #14]
 8026268:	f043 0309 	orr.w	r3, r3, #9
 802626c:	b2db      	uxtb	r3, r3
 802626e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8026270:	7b7b      	ldrb	r3, [r7, #13]
 8026272:	f043 030d 	orr.w	r3, r3, #13
 8026276:	b2db      	uxtb	r3, r3
 8026278:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 802627a:	7b7b      	ldrb	r3, [r7, #13]
 802627c:	f043 0309 	orr.w	r3, r3, #9
 8026280:	b2db      	uxtb	r3, r3
 8026282:	72fb      	strb	r3, [r7, #11]

	//lcdDriverSendDataResult = i2c_driver_transmit(LCD_ADDRESS, data_t, 4);
	lcdDriverSendDataResult = drv_i2cTransmitBlocking(DRV_I2C_INSTANCE_1, LCD_ADDRESS, data_t, 4, GOS_MUTEX_ENDLESS_TMO, 1000);
 8026284:	f107 0208 	add.w	r2, r7, #8
 8026288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802628c:	9301      	str	r3, [sp, #4]
 802628e:	f04f 33ff 	mov.w	r3, #4294967295
 8026292:	9300      	str	r3, [sp, #0]
 8026294:	2304      	movs	r3, #4
 8026296:	2144      	movs	r1, #68	; 0x44
 8026298:	2000      	movs	r0, #0
 802629a:	f010 fc2d 	bl	8036af8 <drv_i2cTransmitBlocking>
 802629e:	4603      	mov	r3, r0
 80262a0:	73fb      	strb	r3, [r7, #15]


	//gos_taskSleep(1);

	return lcdDriverSendDataResult;
 80262a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80262a4:	4618      	mov	r0, r3
 80262a6:	3710      	adds	r7, #16
 80262a8:	46bd      	mov	sp, r7
 80262aa:	bd80      	pop	{r7, pc}

080262ac <clear>:

/********** high level commands, for the user! */
GOS_STATIC void_t clear (void_t)
{
 80262ac:	b580      	push	{r7, lr}
 80262ae:	af00      	add	r7, sp, #0
	lcd_driver_send_cmd(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 80262b0:	2001      	movs	r0, #1
 80262b2:	f7ff ff8f 	bl	80261d4 <lcd_driver_send_cmd>
	gos_kernelDelayUs(2000);
 80262b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80262ba:	f014 fa17 	bl	803a6ec <gos_kernelDelayUs>
}
 80262be:	bf00      	nop
 80262c0:	bd80      	pop	{r7, pc}

080262c2 <lm75_driver_init>:
#define LM75_REG_CONF (0x01) // Configuration Register
#define LM75_ADDR     (0x90) // LM75 address


gos_result_t lm75_driver_init (void_t)
{
 80262c2:	b580      	push	{r7, lr}
 80262c4:	b084      	sub	sp, #16
 80262c6:	af02      	add	r7, sp, #8

    /* Configure the Temperature sensor device STLM75:
    - Thermostat mode Interrupt
    - Fault tolerance: 0
    */
    data_write[0] = LM75_REG_CONF;
 80262c8:	2301      	movs	r3, #1
 80262ca:	713b      	strb	r3, [r7, #4]
    data_write[1] = 0x02;
 80262cc:	2302      	movs	r3, #2
 80262ce:	717b      	strb	r3, [r7, #5]

    //return drv_i2cMemWrite(DRV_I2C_INSTANCE_1, LM75_ADDR, &data_write[0], 1, &data_write[1], 1, 1000, 1000);
    return drv_i2cTransmitBlocking(DRV_I2C_INSTANCE_1, LM75_ADDR, data_write, 2, 1000, 1000);
 80262d0:	1d3a      	adds	r2, r7, #4
 80262d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80262d6:	9301      	str	r3, [sp, #4]
 80262d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80262dc:	9300      	str	r3, [sp, #0]
 80262de:	2302      	movs	r3, #2
 80262e0:	2190      	movs	r1, #144	; 0x90
 80262e2:	2000      	movs	r0, #0
 80262e4:	f010 fc08 	bl	8036af8 <drv_i2cTransmitBlocking>
 80262e8:	4603      	mov	r3, r0
}
 80262ea:	4618      	mov	r0, r3
 80262ec:	3708      	adds	r7, #8
 80262ee:	46bd      	mov	sp, r7
 80262f0:	bd80      	pop	{r7, pc}
	...

080262f4 <lm75_get_temperature>:

gos_result_t lm75_get_temperature (float_t* pTemp)
{
 80262f4:	b580      	push	{r7, lr}
 80262f6:	b086      	sub	sp, #24
 80262f8:	af02      	add	r7, sp, #8
 80262fa:	6078      	str	r0, [r7, #4]
	u8_t data_write[2];
	u8_t data_read[2];

    // Read temperature register
    data_write[0] = LM75_REG_TEMP;
 80262fc:	2300      	movs	r3, #0
 80262fe:	733b      	strb	r3, [r7, #12]
    //i2c.write(LM75_ADDR, data_write, 1, 1); // no stop
    //i2c.read(LM75_ADDR, data_read, 2, 0);

    drv_i2cTransmitBlocking(DRV_I2C_INSTANCE_1, LM75_ADDR, data_write, 1, 1000, 1000);
 8026300:	f107 020c 	add.w	r2, r7, #12
 8026304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026308:	9301      	str	r3, [sp, #4]
 802630a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802630e:	9300      	str	r3, [sp, #0]
 8026310:	2301      	movs	r3, #1
 8026312:	2190      	movs	r1, #144	; 0x90
 8026314:	2000      	movs	r0, #0
 8026316:	f010 fbef 	bl	8036af8 <drv_i2cTransmitBlocking>
    drv_i2cReceiveBlocking(DRV_I2C_INSTANCE_1, LM75_ADDR, data_read, 2, 1000, 1000);
 802631a:	f107 0208 	add.w	r2, r7, #8
 802631e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026322:	9301      	str	r3, [sp, #4]
 8026324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026328:	9300      	str	r3, [sp, #0]
 802632a:	2302      	movs	r3, #2
 802632c:	2190      	movs	r1, #144	; 0x90
 802632e:	2000      	movs	r0, #0
 8026330:	f010 fc1e 	bl	8036b70 <drv_i2cReceiveBlocking>

    // Calculate temperature value in Celcius
    int16_t i16 = (data_read[0] << 8) | data_read[1];
 8026334:	7a3b      	ldrb	r3, [r7, #8]
 8026336:	021b      	lsls	r3, r3, #8
 8026338:	b21a      	sxth	r2, r3
 802633a:	7a7b      	ldrb	r3, [r7, #9]
 802633c:	b21b      	sxth	r3, r3
 802633e:	4313      	orrs	r3, r2
 8026340:	81fb      	strh	r3, [r7, #14]
    // Read data as twos complement integer so sign is correct
    *pTemp = i16 / 256.0;
 8026342:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8026346:	4618      	mov	r0, r3
 8026348:	f7fa f91c 	bl	8020584 <__aeabi_i2d>
 802634c:	f04f 0200 	mov.w	r2, #0
 8026350:	4b08      	ldr	r3, [pc, #32]	; (8026374 <lm75_get_temperature+0x80>)
 8026352:	f7fa faab 	bl	80208ac <__aeabi_ddiv>
 8026356:	4602      	mov	r2, r0
 8026358:	460b      	mov	r3, r1
 802635a:	4610      	mov	r0, r2
 802635c:	4619      	mov	r1, r3
 802635e:	f7fa fc73 	bl	8020c48 <__aeabi_d2f>
 8026362:	4602      	mov	r2, r0
 8026364:	687b      	ldr	r3, [r7, #4]
 8026366:	601a      	str	r2, [r3, #0]

    return GOS_SUCCESS;
 8026368:	2355      	movs	r3, #85	; 0x55
}
 802636a:	4618      	mov	r0, r3
 802636c:	3710      	adds	r7, #16
 802636e:	46bd      	mov	sp, r7
 8026370:	bd80      	pop	{r7, pc}
 8026372:	bf00      	nop
 8026374:	40700000 	.word	0x40700000

08026378 <pwm_driver_init>:
#include "stm32f4xx.h"

GOS_STATIC TIM_HandleTypeDef htim3;

gos_result_t pwm_driver_init (void_t)
{
 8026378:	b580      	push	{r7, lr}
 802637a:	b08e      	sub	sp, #56	; 0x38
 802637c:	af00      	add	r7, sp, #0
	gos_result_t pwmDriverInitResult = GOS_ERROR;
 802637e:	23ae      	movs	r3, #174	; 0xae
 8026380:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8026384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026388:	2200      	movs	r2, #0
 802638a:	601a      	str	r2, [r3, #0]
 802638c:	605a      	str	r2, [r3, #4]
 802638e:	609a      	str	r2, [r3, #8]
 8026390:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8026392:	f107 031c 	add.w	r3, r7, #28
 8026396:	2200      	movs	r2, #0
 8026398:	601a      	str	r2, [r3, #0]
 802639a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 802639c:	463b      	mov	r3, r7
 802639e:	2200      	movs	r2, #0
 80263a0:	601a      	str	r2, [r3, #0]
 80263a2:	605a      	str	r2, [r3, #4]
 80263a4:	609a      	str	r2, [r3, #8]
 80263a6:	60da      	str	r2, [r3, #12]
 80263a8:	611a      	str	r2, [r3, #16]
 80263aa:	615a      	str	r2, [r3, #20]
 80263ac:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 80263ae:	4b2c      	ldr	r3, [pc, #176]	; (8026460 <pwm_driver_init+0xe8>)
 80263b0:	4a2c      	ldr	r2, [pc, #176]	; (8026464 <pwm_driver_init+0xec>)
 80263b2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80263b4:	4b2a      	ldr	r3, [pc, #168]	; (8026460 <pwm_driver_init+0xe8>)
 80263b6:	2200      	movs	r2, #0
 80263b8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80263ba:	4b29      	ldr	r3, [pc, #164]	; (8026460 <pwm_driver_init+0xe8>)
 80263bc:	2200      	movs	r2, #0
 80263be:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65536-1;
 80263c0:	4b27      	ldr	r3, [pc, #156]	; (8026460 <pwm_driver_init+0xe8>)
 80263c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80263c6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80263c8:	4b25      	ldr	r3, [pc, #148]	; (8026460 <pwm_driver_init+0xe8>)
 80263ca:	2200      	movs	r2, #0
 80263cc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80263ce:	4b24      	ldr	r3, [pc, #144]	; (8026460 <pwm_driver_init+0xe8>)
 80263d0:	2200      	movs	r2, #0
 80263d2:	619a      	str	r2, [r3, #24]

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80263d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80263d8:	627b      	str	r3, [r7, #36]	; 0x24

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80263da:	2300      	movs	r3, #0
 80263dc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80263de:	2300      	movs	r3, #0
 80263e0:	623b      	str	r3, [r7, #32]

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80263e2:	2360      	movs	r3, #96	; 0x60
 80263e4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80263e6:	2300      	movs	r3, #0
 80263e8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80263ea:	2300      	movs	r3, #0
 80263ec:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80263ee:	2300      	movs	r3, #0
 80263f0:	613b      	str	r3, [r7, #16]

	if (HAL_TIM_Base_Init(&htim3) == HAL_OK &&
 80263f2:	481b      	ldr	r0, [pc, #108]	; (8026460 <pwm_driver_init+0xe8>)
 80263f4:	f008 fc74 	bl	802ece0 <HAL_TIM_Base_Init>
 80263f8:	4603      	mov	r3, r0
 80263fa:	2b00      	cmp	r3, #0
 80263fc:	d12a      	bne.n	8026454 <pwm_driver_init+0xdc>
		HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) == HAL_OK &&
 80263fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8026402:	4619      	mov	r1, r3
 8026404:	4816      	ldr	r0, [pc, #88]	; (8026460 <pwm_driver_init+0xe8>)
 8026406:	f008 ff05 	bl	802f214 <HAL_TIM_ConfigClockSource>
 802640a:	4603      	mov	r3, r0
	if (HAL_TIM_Base_Init(&htim3) == HAL_OK &&
 802640c:	2b00      	cmp	r3, #0
 802640e:	d121      	bne.n	8026454 <pwm_driver_init+0xdc>
		HAL_TIM_PWM_Init(&htim3) == HAL_OK &&
 8026410:	4813      	ldr	r0, [pc, #76]	; (8026460 <pwm_driver_init+0xe8>)
 8026412:	f008 fcbe 	bl	802ed92 <HAL_TIM_PWM_Init>
 8026416:	4603      	mov	r3, r0
		HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) == HAL_OK &&
 8026418:	2b00      	cmp	r3, #0
 802641a:	d11b      	bne.n	8026454 <pwm_driver_init+0xdc>
		HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) == HAL_OK &&
 802641c:	f107 031c 	add.w	r3, r7, #28
 8026420:	4619      	mov	r1, r3
 8026422:	480f      	ldr	r0, [pc, #60]	; (8026460 <pwm_driver_init+0xe8>)
 8026424:	f009 faf2 	bl	802fa0c <HAL_TIMEx_MasterConfigSynchronization>
 8026428:	4603      	mov	r3, r0
		HAL_TIM_PWM_Init(&htim3) == HAL_OK &&
 802642a:	2b00      	cmp	r3, #0
 802642c:	d112      	bne.n	8026454 <pwm_driver_init+0xdc>
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) == HAL_OK &&
 802642e:	463b      	mov	r3, r7
 8026430:	2200      	movs	r2, #0
 8026432:	4619      	mov	r1, r3
 8026434:	480a      	ldr	r0, [pc, #40]	; (8026460 <pwm_driver_init+0xe8>)
 8026436:	f008 fe27 	bl	802f088 <HAL_TIM_PWM_ConfigChannel>
 802643a:	4603      	mov	r3, r0
		HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) == HAL_OK &&
 802643c:	2b00      	cmp	r3, #0
 802643e:	d109      	bne.n	8026454 <pwm_driver_init+0xdc>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) == HAL_OK
 8026440:	2100      	movs	r1, #0
 8026442:	4807      	ldr	r0, [pc, #28]	; (8026460 <pwm_driver_init+0xe8>)
 8026444:	f008 fcda 	bl	802edfc <HAL_TIM_PWM_Start>
 8026448:	4603      	mov	r3, r0
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) == HAL_OK &&
 802644a:	2b00      	cmp	r3, #0
 802644c:	d102      	bne.n	8026454 <pwm_driver_init+0xdc>
		)
	{
		pwmDriverInitResult = GOS_SUCCESS;
 802644e:	2355      	movs	r3, #85	; 0x55
 8026450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	return pwmDriverInitResult;
 8026454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8026458:	4618      	mov	r0, r3
 802645a:	3738      	adds	r7, #56	; 0x38
 802645c:	46bd      	mov	sp, r7
 802645e:	bd80      	pop	{r7, pc}
 8026460:	20005fdc 	.word	0x20005fdc
 8026464:	40000400 	.word	0x40000400

08026468 <pwm_driver_set_duty>:

void_t pwm_driver_set_duty (u8_t duty)
{
 8026468:	b480      	push	{r7}
 802646a:	b083      	sub	sp, #12
 802646c:	af00      	add	r7, sp, #0
 802646e:	4603      	mov	r3, r0
 8026470:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR1 = 65535 * duty / 100;
 8026472:	79fa      	ldrb	r2, [r7, #7]
 8026474:	4613      	mov	r3, r2
 8026476:	041b      	lsls	r3, r3, #16
 8026478:	1a9b      	subs	r3, r3, r2
 802647a:	4a07      	ldr	r2, [pc, #28]	; (8026498 <pwm_driver_set_duty+0x30>)
 802647c:	fb82 1203 	smull	r1, r2, r2, r3
 8026480:	1152      	asrs	r2, r2, #5
 8026482:	17db      	asrs	r3, r3, #31
 8026484:	1ad2      	subs	r2, r2, r3
 8026486:	4b05      	ldr	r3, [pc, #20]	; (802649c <pwm_driver_set_duty+0x34>)
 8026488:	635a      	str	r2, [r3, #52]	; 0x34
}
 802648a:	bf00      	nop
 802648c:	370c      	adds	r7, #12
 802648e:	46bd      	mov	sp, r7
 8026490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026494:	4770      	bx	lr
 8026496:	bf00      	nop
 8026498:	51eb851f 	.word	0x51eb851f
 802649c:	40000400 	.word	0x40000400

080264a0 <rcc_driver_init>:
#include "rcc_driver.h"
//#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"

gos_result_t rcc_driver_init (void_t)
{
 80264a0:	b580      	push	{r7, lr}
 80264a2:	b0ac      	sub	sp, #176	; 0xb0
 80264a4:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 80264a6:	23ae      	movs	r3, #174	; 0xae
 80264a8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80264ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80264b0:	2234      	movs	r2, #52	; 0x34
 80264b2:	2100      	movs	r1, #0
 80264b4:	4618      	mov	r0, r3
 80264b6:	f01c fba7 	bl	8042c08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80264ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80264be:	2200      	movs	r2, #0
 80264c0:	601a      	str	r2, [r3, #0]
 80264c2:	605a      	str	r2, [r3, #4]
 80264c4:	609a      	str	r2, [r3, #8]
 80264c6:	60da      	str	r2, [r3, #12]
 80264c8:	611a      	str	r2, [r3, #16]

	/*
	 * Function code.
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80264ca:	2300      	movs	r3, #0
 80264cc:	663b      	str	r3, [r7, #96]	; 0x60
 80264ce:	4ba3      	ldr	r3, [pc, #652]	; (802675c <rcc_driver_init+0x2bc>)
 80264d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264d2:	4aa2      	ldr	r2, [pc, #648]	; (802675c <rcc_driver_init+0x2bc>)
 80264d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80264d8:	6413      	str	r3, [r2, #64]	; 0x40
 80264da:	4ba0      	ldr	r3, [pc, #640]	; (802675c <rcc_driver_init+0x2bc>)
 80264dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80264e2:	663b      	str	r3, [r7, #96]	; 0x60
 80264e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80264e6:	2300      	movs	r3, #0
 80264e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80264ea:	4b9d      	ldr	r3, [pc, #628]	; (8026760 <rcc_driver_init+0x2c0>)
 80264ec:	681b      	ldr	r3, [r3, #0]
 80264ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80264f2:	4a9b      	ldr	r2, [pc, #620]	; (8026760 <rcc_driver_init+0x2c0>)
 80264f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80264f8:	6013      	str	r3, [r2, #0]
 80264fa:	4b99      	ldr	r3, [pc, #612]	; (8026760 <rcc_driver_init+0x2c0>)
 80264fc:	681b      	ldr	r3, [r3, #0]
 80264fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8026502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLM = 16;
	RCC_OscInitStruct.PLL.PLLN = 336;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	RCC_OscInitStruct.PLL.PLLR = 2;*/
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8026506:	2301      	movs	r3, #1
 8026508:	67bb      	str	r3, [r7, #120]	; 0x78
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802650a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802650e:	67fb      	str	r3, [r7, #124]	; 0x7c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8026510:	2302      	movs	r3, #2
 8026512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8026516:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802651a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  RCC_OscInitStruct.PLL.PLLM = 4;
 802651e:	2304      	movs	r3, #4
 8026520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  RCC_OscInitStruct.PLL.PLLN = 50;
 8026524:	2332      	movs	r3, #50	; 0x32
 8026526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802652a:	2302      	movs	r3, #2
 802652c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 8026530:	2302      	movs	r3, #2
 8026532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  RCC_OscInitStruct.PLL.PLLR = 2;
 8026536:	2302      	movs	r3, #2
 8026538:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 802653c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8026540:	4618      	mov	r0, r3
 8026542:	f007 f9f1 	bl	802d928 <HAL_RCC_OscConfig>
 8026546:	4603      	mov	r3, r0
 8026548:	2b00      	cmp	r3, #0
 802654a:	d116      	bne.n	802657a <rcc_driver_init+0xda>
	{
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802654c:	230f      	movs	r3, #15
 802654e:	667b      	str	r3, [r7, #100]	; 0x64
		                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8026550:	2302      	movs	r3, #2
 8026552:	66bb      	str	r3, [r7, #104]	; 0x68
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8026554:	2300      	movs	r3, #0
 8026556:	66fb      	str	r3, [r7, #108]	; 0x6c
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8026558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802655c:	673b      	str	r3, [r7, #112]	; 0x70
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 802655e:	2300      	movs	r3, #0
 8026560:	677b      	str	r3, [r7, #116]	; 0x74

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, /*FLASH_LATENCY_2*/ FLASH_LATENCY_1) == HAL_OK)
 8026562:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026566:	2101      	movs	r1, #1
 8026568:	4618      	mov	r0, r3
 802656a:	f006 fe93 	bl	802d294 <HAL_RCC_ClockConfig>
 802656e:	4603      	mov	r3, r0
 8026570:	2b00      	cmp	r3, #0
 8026572:	d102      	bne.n	802657a <rcc_driver_init+0xda>
		{
			initResult = GOS_SUCCESS;
 8026574:	2355      	movs	r3, #85	; 0x55
 8026576:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		}
	}

	// TODO
	__HAL_RCC_GPIOA_CLK_ENABLE();
 802657a:	2300      	movs	r3, #0
 802657c:	65bb      	str	r3, [r7, #88]	; 0x58
 802657e:	4b77      	ldr	r3, [pc, #476]	; (802675c <rcc_driver_init+0x2bc>)
 8026580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026582:	4a76      	ldr	r2, [pc, #472]	; (802675c <rcc_driver_init+0x2bc>)
 8026584:	f043 0301 	orr.w	r3, r3, #1
 8026588:	6313      	str	r3, [r2, #48]	; 0x30
 802658a:	4b74      	ldr	r3, [pc, #464]	; (802675c <rcc_driver_init+0x2bc>)
 802658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802658e:	f003 0301 	and.w	r3, r3, #1
 8026592:	65bb      	str	r3, [r7, #88]	; 0x58
 8026594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8026596:	2300      	movs	r3, #0
 8026598:	657b      	str	r3, [r7, #84]	; 0x54
 802659a:	4b70      	ldr	r3, [pc, #448]	; (802675c <rcc_driver_init+0x2bc>)
 802659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802659e:	4a6f      	ldr	r2, [pc, #444]	; (802675c <rcc_driver_init+0x2bc>)
 80265a0:	f043 0302 	orr.w	r3, r3, #2
 80265a4:	6313      	str	r3, [r2, #48]	; 0x30
 80265a6:	4b6d      	ldr	r3, [pc, #436]	; (802675c <rcc_driver_init+0x2bc>)
 80265a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80265aa:	f003 0302 	and.w	r3, r3, #2
 80265ae:	657b      	str	r3, [r7, #84]	; 0x54
 80265b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80265b2:	2300      	movs	r3, #0
 80265b4:	653b      	str	r3, [r7, #80]	; 0x50
 80265b6:	4b69      	ldr	r3, [pc, #420]	; (802675c <rcc_driver_init+0x2bc>)
 80265b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80265ba:	4a68      	ldr	r2, [pc, #416]	; (802675c <rcc_driver_init+0x2bc>)
 80265bc:	f043 0304 	orr.w	r3, r3, #4
 80265c0:	6313      	str	r3, [r2, #48]	; 0x30
 80265c2:	4b66      	ldr	r3, [pc, #408]	; (802675c <rcc_driver_init+0x2bc>)
 80265c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80265c6:	f003 0304 	and.w	r3, r3, #4
 80265ca:	653b      	str	r3, [r7, #80]	; 0x50
 80265cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80265ce:	2300      	movs	r3, #0
 80265d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80265d2:	4b62      	ldr	r3, [pc, #392]	; (802675c <rcc_driver_init+0x2bc>)
 80265d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80265d6:	4a61      	ldr	r2, [pc, #388]	; (802675c <rcc_driver_init+0x2bc>)
 80265d8:	f043 0308 	orr.w	r3, r3, #8
 80265dc:	6313      	str	r3, [r2, #48]	; 0x30
 80265de:	4b5f      	ldr	r3, [pc, #380]	; (802675c <rcc_driver_init+0x2bc>)
 80265e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80265e2:	f003 0308 	and.w	r3, r3, #8
 80265e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80265e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80265ea:	2300      	movs	r3, #0
 80265ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80265ee:	4b5b      	ldr	r3, [pc, #364]	; (802675c <rcc_driver_init+0x2bc>)
 80265f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80265f2:	4a5a      	ldr	r2, [pc, #360]	; (802675c <rcc_driver_init+0x2bc>)
 80265f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80265f8:	6313      	str	r3, [r2, #48]	; 0x30
 80265fa:	4b58      	ldr	r3, [pc, #352]	; (802675c <rcc_driver_init+0x2bc>)
 80265fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80265fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026602:	64bb      	str	r3, [r7, #72]	; 0x48
 8026604:	6cbb      	ldr	r3, [r7, #72]	; 0x48

	__HAL_RCC_ADC1_CLK_ENABLE();
 8026606:	2300      	movs	r3, #0
 8026608:	647b      	str	r3, [r7, #68]	; 0x44
 802660a:	4b54      	ldr	r3, [pc, #336]	; (802675c <rcc_driver_init+0x2bc>)
 802660c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802660e:	4a53      	ldr	r2, [pc, #332]	; (802675c <rcc_driver_init+0x2bc>)
 8026610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026614:	6453      	str	r3, [r2, #68]	; 0x44
 8026616:	4b51      	ldr	r3, [pc, #324]	; (802675c <rcc_driver_init+0x2bc>)
 8026618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802661a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802661e:	647b      	str	r3, [r7, #68]	; 0x44
 8026620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	__HAL_RCC_DMA1_CLK_ENABLE();
 8026622:	2300      	movs	r3, #0
 8026624:	643b      	str	r3, [r7, #64]	; 0x40
 8026626:	4b4d      	ldr	r3, [pc, #308]	; (802675c <rcc_driver_init+0x2bc>)
 8026628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802662a:	4a4c      	ldr	r2, [pc, #304]	; (802675c <rcc_driver_init+0x2bc>)
 802662c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8026630:	6313      	str	r3, [r2, #48]	; 0x30
 8026632:	4b4a      	ldr	r3, [pc, #296]	; (802675c <rcc_driver_init+0x2bc>)
 8026634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802663a:	643b      	str	r3, [r7, #64]	; 0x40
 802663c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	__HAL_RCC_DMA2_CLK_ENABLE();
 802663e:	2300      	movs	r3, #0
 8026640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026642:	4b46      	ldr	r3, [pc, #280]	; (802675c <rcc_driver_init+0x2bc>)
 8026644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026646:	4a45      	ldr	r2, [pc, #276]	; (802675c <rcc_driver_init+0x2bc>)
 8026648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802664c:	6313      	str	r3, [r2, #48]	; 0x30
 802664e:	4b43      	ldr	r3, [pc, #268]	; (802675c <rcc_driver_init+0x2bc>)
 8026650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	__HAL_RCC_I2C1_CLK_ENABLE();
 802665a:	2300      	movs	r3, #0
 802665c:	63bb      	str	r3, [r7, #56]	; 0x38
 802665e:	4b3f      	ldr	r3, [pc, #252]	; (802675c <rcc_driver_init+0x2bc>)
 8026660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026662:	4a3e      	ldr	r2, [pc, #248]	; (802675c <rcc_driver_init+0x2bc>)
 8026664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8026668:	6413      	str	r3, [r2, #64]	; 0x40
 802666a:	4b3c      	ldr	r3, [pc, #240]	; (802675c <rcc_driver_init+0x2bc>)
 802666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802666e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8026672:	63bb      	str	r3, [r7, #56]	; 0x38
 8026674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	__HAL_RCC_I2C2_CLK_ENABLE();
 8026676:	2300      	movs	r3, #0
 8026678:	637b      	str	r3, [r7, #52]	; 0x34
 802667a:	4b38      	ldr	r3, [pc, #224]	; (802675c <rcc_driver_init+0x2bc>)
 802667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802667e:	4a37      	ldr	r2, [pc, #220]	; (802675c <rcc_driver_init+0x2bc>)
 8026680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8026684:	6413      	str	r3, [r2, #64]	; 0x40
 8026686:	4b35      	ldr	r3, [pc, #212]	; (802675c <rcc_driver_init+0x2bc>)
 8026688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802668a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802668e:	637b      	str	r3, [r7, #52]	; 0x34
 8026690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	__HAL_RCC_SPI2_CLK_ENABLE();
 8026692:	2300      	movs	r3, #0
 8026694:	633b      	str	r3, [r7, #48]	; 0x30
 8026696:	4b31      	ldr	r3, [pc, #196]	; (802675c <rcc_driver_init+0x2bc>)
 8026698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802669a:	4a30      	ldr	r2, [pc, #192]	; (802675c <rcc_driver_init+0x2bc>)
 802669c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80266a0:	6413      	str	r3, [r2, #64]	; 0x40
 80266a2:	4b2e      	ldr	r3, [pc, #184]	; (802675c <rcc_driver_init+0x2bc>)
 80266a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80266aa:	633b      	str	r3, [r7, #48]	; 0x30
 80266ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	__HAL_RCC_SPI3_CLK_ENABLE();
 80266ae:	2300      	movs	r3, #0
 80266b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80266b2:	4b2a      	ldr	r3, [pc, #168]	; (802675c <rcc_driver_init+0x2bc>)
 80266b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266b6:	4a29      	ldr	r2, [pc, #164]	; (802675c <rcc_driver_init+0x2bc>)
 80266b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80266bc:	6413      	str	r3, [r2, #64]	; 0x40
 80266be:	4b27      	ldr	r3, [pc, #156]	; (802675c <rcc_driver_init+0x2bc>)
 80266c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80266c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80266c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	__HAL_RCC_TIM2_CLK_ENABLE();
 80266ca:	2300      	movs	r3, #0
 80266cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80266ce:	4b23      	ldr	r3, [pc, #140]	; (802675c <rcc_driver_init+0x2bc>)
 80266d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266d2:	4a22      	ldr	r2, [pc, #136]	; (802675c <rcc_driver_init+0x2bc>)
 80266d4:	f043 0301 	orr.w	r3, r3, #1
 80266d8:	6413      	str	r3, [r2, #64]	; 0x40
 80266da:	4b20      	ldr	r3, [pc, #128]	; (802675c <rcc_driver_init+0x2bc>)
 80266dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266de:	f003 0301 	and.w	r3, r3, #1
 80266e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80266e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_TIM3_CLK_ENABLE();
 80266e6:	2300      	movs	r3, #0
 80266e8:	627b      	str	r3, [r7, #36]	; 0x24
 80266ea:	4b1c      	ldr	r3, [pc, #112]	; (802675c <rcc_driver_init+0x2bc>)
 80266ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266ee:	4a1b      	ldr	r2, [pc, #108]	; (802675c <rcc_driver_init+0x2bc>)
 80266f0:	f043 0302 	orr.w	r3, r3, #2
 80266f4:	6413      	str	r3, [r2, #64]	; 0x40
 80266f6:	4b19      	ldr	r3, [pc, #100]	; (802675c <rcc_driver_init+0x2bc>)
 80266f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80266fa:	f003 0302 	and.w	r3, r3, #2
 80266fe:	627b      	str	r3, [r7, #36]	; 0x24
 8026700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_TIM12_CLK_ENABLE();
 8026702:	2300      	movs	r3, #0
 8026704:	623b      	str	r3, [r7, #32]
 8026706:	4b15      	ldr	r3, [pc, #84]	; (802675c <rcc_driver_init+0x2bc>)
 8026708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802670a:	4a14      	ldr	r2, [pc, #80]	; (802675c <rcc_driver_init+0x2bc>)
 802670c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026710:	6413      	str	r3, [r2, #64]	; 0x40
 8026712:	4b12      	ldr	r3, [pc, #72]	; (802675c <rcc_driver_init+0x2bc>)
 8026714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802671a:	623b      	str	r3, [r7, #32]
 802671c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DAC_CLK_ENABLE();
 802671e:	2300      	movs	r3, #0
 8026720:	61fb      	str	r3, [r7, #28]
 8026722:	4b0e      	ldr	r3, [pc, #56]	; (802675c <rcc_driver_init+0x2bc>)
 8026724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026726:	4a0d      	ldr	r2, [pc, #52]	; (802675c <rcc_driver_init+0x2bc>)
 8026728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802672c:	6413      	str	r3, [r2, #64]	; 0x40
 802672e:	4b0b      	ldr	r3, [pc, #44]	; (802675c <rcc_driver_init+0x2bc>)
 8026730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8026736:	61fb      	str	r3, [r7, #28]
 8026738:	69fb      	ldr	r3, [r7, #28]

	__HAL_RCC_USART1_CLK_ENABLE();
 802673a:	2300      	movs	r3, #0
 802673c:	61bb      	str	r3, [r7, #24]
 802673e:	4b07      	ldr	r3, [pc, #28]	; (802675c <rcc_driver_init+0x2bc>)
 8026740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026742:	4a06      	ldr	r2, [pc, #24]	; (802675c <rcc_driver_init+0x2bc>)
 8026744:	f043 0310 	orr.w	r3, r3, #16
 8026748:	6453      	str	r3, [r2, #68]	; 0x44
 802674a:	4b04      	ldr	r3, [pc, #16]	; (802675c <rcc_driver_init+0x2bc>)
 802674c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802674e:	f003 0310 	and.w	r3, r3, #16
 8026752:	61bb      	str	r3, [r7, #24]
 8026754:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_USART2_CLK_ENABLE();
 8026756:	2300      	movs	r3, #0
 8026758:	617b      	str	r3, [r7, #20]
 802675a:	e003      	b.n	8026764 <rcc_driver_init+0x2c4>
 802675c:	40023800 	.word	0x40023800
 8026760:	40007000 	.word	0x40007000
 8026764:	4b24      	ldr	r3, [pc, #144]	; (80267f8 <rcc_driver_init+0x358>)
 8026766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026768:	4a23      	ldr	r2, [pc, #140]	; (80267f8 <rcc_driver_init+0x358>)
 802676a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802676e:	6413      	str	r3, [r2, #64]	; 0x40
 8026770:	4b21      	ldr	r3, [pc, #132]	; (80267f8 <rcc_driver_init+0x358>)
 8026772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026778:	617b      	str	r3, [r7, #20]
 802677a:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART3_CLK_ENABLE();
 802677c:	2300      	movs	r3, #0
 802677e:	613b      	str	r3, [r7, #16]
 8026780:	4b1d      	ldr	r3, [pc, #116]	; (80267f8 <rcc_driver_init+0x358>)
 8026782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026784:	4a1c      	ldr	r2, [pc, #112]	; (80267f8 <rcc_driver_init+0x358>)
 8026786:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802678a:	6413      	str	r3, [r2, #64]	; 0x40
 802678c:	4b1a      	ldr	r3, [pc, #104]	; (80267f8 <rcc_driver_init+0x358>)
 802678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026790:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026794:	613b      	str	r3, [r7, #16]
 8026796:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_UART4_CLK_ENABLE();
 8026798:	2300      	movs	r3, #0
 802679a:	60fb      	str	r3, [r7, #12]
 802679c:	4b16      	ldr	r3, [pc, #88]	; (80267f8 <rcc_driver_init+0x358>)
 802679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80267a0:	4a15      	ldr	r2, [pc, #84]	; (80267f8 <rcc_driver_init+0x358>)
 80267a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80267a6:	6413      	str	r3, [r2, #64]	; 0x40
 80267a8:	4b13      	ldr	r3, [pc, #76]	; (80267f8 <rcc_driver_init+0x358>)
 80267aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80267ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80267b0:	60fb      	str	r3, [r7, #12]
 80267b2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_UART5_CLK_ENABLE();
 80267b4:	2300      	movs	r3, #0
 80267b6:	60bb      	str	r3, [r7, #8]
 80267b8:	4b0f      	ldr	r3, [pc, #60]	; (80267f8 <rcc_driver_init+0x358>)
 80267ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80267bc:	4a0e      	ldr	r2, [pc, #56]	; (80267f8 <rcc_driver_init+0x358>)
 80267be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80267c2:	6413      	str	r3, [r2, #64]	; 0x40
 80267c4:	4b0c      	ldr	r3, [pc, #48]	; (80267f8 <rcc_driver_init+0x358>)
 80267c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80267c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80267cc:	60bb      	str	r3, [r7, #8]
 80267ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART6_CLK_ENABLE();
 80267d0:	2300      	movs	r3, #0
 80267d2:	607b      	str	r3, [r7, #4]
 80267d4:	4b08      	ldr	r3, [pc, #32]	; (80267f8 <rcc_driver_init+0x358>)
 80267d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80267d8:	4a07      	ldr	r2, [pc, #28]	; (80267f8 <rcc_driver_init+0x358>)
 80267da:	f043 0320 	orr.w	r3, r3, #32
 80267de:	6453      	str	r3, [r2, #68]	; 0x44
 80267e0:	4b05      	ldr	r3, [pc, #20]	; (80267f8 <rcc_driver_init+0x358>)
 80267e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80267e4:	f003 0320 	and.w	r3, r3, #32
 80267e8:	607b      	str	r3, [r7, #4]
 80267ea:	687b      	ldr	r3, [r7, #4]

	return initResult;
 80267ec:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 80267f0:	4618      	mov	r0, r3
 80267f2:	37b0      	adds	r7, #176	; 0xb0
 80267f4:	46bd      	mov	sp, r7
 80267f6:	bd80      	pop	{r7, pc}
 80267f8:	40023800 	.word	0x40023800

080267fc <rtc_driver_set_time>:

GOS_STATIC u8_t rtc_driver_dec2bcd (u32_t dec);
GOS_STATIC u32_t rtc_driver_bcd2dec (u8_t bcd);

gos_result_t rtc_driver_set_time (gos_time_t* pTime, u8_t dow)
{
 80267fc:	b580      	push	{r7, lr}
 80267fe:	b088      	sub	sp, #32
 8026800:	af04      	add	r7, sp, #16
 8026802:	6078      	str	r0, [r7, #4]
 8026804:	460b      	mov	r3, r1
 8026806:	70fb      	strb	r3, [r7, #3]
	u8_t time [7];
	gos_result_t setTimeResult = GOS_ERROR;
 8026808:	23ae      	movs	r3, #174	; 0xae
 802680a:	73fb      	strb	r3, [r7, #15]

	time[0] = rtc_driver_dec2bcd(pTime->seconds);
 802680c:	687b      	ldr	r3, [r7, #4]
 802680e:	789b      	ldrb	r3, [r3, #2]
 8026810:	4618      	mov	r0, r3
 8026812:	f000 f8ad 	bl	8026970 <rtc_driver_dec2bcd>
 8026816:	4603      	mov	r3, r0
 8026818:	723b      	strb	r3, [r7, #8]
	time[1] = rtc_driver_dec2bcd(pTime->minutes);
 802681a:	687b      	ldr	r3, [r7, #4]
 802681c:	78db      	ldrb	r3, [r3, #3]
 802681e:	4618      	mov	r0, r3
 8026820:	f000 f8a6 	bl	8026970 <rtc_driver_dec2bcd>
 8026824:	4603      	mov	r3, r0
 8026826:	727b      	strb	r3, [r7, #9]
	time[2] = rtc_driver_dec2bcd(pTime->hours);
 8026828:	687b      	ldr	r3, [r7, #4]
 802682a:	791b      	ldrb	r3, [r3, #4]
 802682c:	4618      	mov	r0, r3
 802682e:	f000 f89f 	bl	8026970 <rtc_driver_dec2bcd>
 8026832:	4603      	mov	r3, r0
 8026834:	72bb      	strb	r3, [r7, #10]
	time[3] = rtc_driver_dec2bcd(dow);
 8026836:	78fb      	ldrb	r3, [r7, #3]
 8026838:	4618      	mov	r0, r3
 802683a:	f000 f899 	bl	8026970 <rtc_driver_dec2bcd>
 802683e:	4603      	mov	r3, r0
 8026840:	72fb      	strb	r3, [r7, #11]
	time[4] = rtc_driver_dec2bcd(pTime->days);
 8026842:	687b      	ldr	r3, [r7, #4]
 8026844:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8026848:	b29b      	uxth	r3, r3
 802684a:	4618      	mov	r0, r3
 802684c:	f000 f890 	bl	8026970 <rtc_driver_dec2bcd>
 8026850:	4603      	mov	r3, r0
 8026852:	733b      	strb	r3, [r7, #12]
	time[5] = rtc_driver_dec2bcd(pTime->months);
 8026854:	687b      	ldr	r3, [r7, #4]
 8026856:	79db      	ldrb	r3, [r3, #7]
 8026858:	4618      	mov	r0, r3
 802685a:	f000 f889 	bl	8026970 <rtc_driver_dec2bcd>
 802685e:	4603      	mov	r3, r0
 8026860:	737b      	strb	r3, [r7, #13]
	time[6] = rtc_driver_dec2bcd(pTime->years - 2000);
 8026862:	687b      	ldr	r3, [r7, #4]
 8026864:	891b      	ldrh	r3, [r3, #8]
 8026866:	b29b      	uxth	r3, r3
 8026868:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 802686c:	4618      	mov	r0, r3
 802686e:	f000 f87f 	bl	8026970 <rtc_driver_dec2bcd>
 8026872:	4603      	mov	r3, r0
 8026874:	73bb      	strb	r3, [r7, #14]

	//setTimeResult = i2c_driver_mem_write(RTC_ADDRESS, 0x00, 1, time, 7);
	setTimeResult = drv_i2cMemWrite(DRV_I2C_INSTANCE_1, RTC_ADDRESS, 0x00, 1, time, 7, GOS_MUTEX_ENDLESS_TMO, 1000);
 8026876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802687a:	9303      	str	r3, [sp, #12]
 802687c:	f04f 33ff 	mov.w	r3, #4294967295
 8026880:	9302      	str	r3, [sp, #8]
 8026882:	2307      	movs	r3, #7
 8026884:	9301      	str	r3, [sp, #4]
 8026886:	f107 0308 	add.w	r3, r7, #8
 802688a:	9300      	str	r3, [sp, #0]
 802688c:	2301      	movs	r3, #1
 802688e:	2200      	movs	r2, #0
 8026890:	21d0      	movs	r1, #208	; 0xd0
 8026892:	2000      	movs	r0, #0
 8026894:	f010 f858 	bl	8036948 <drv_i2cMemWrite>
 8026898:	4603      	mov	r3, r0
 802689a:	73fb      	strb	r3, [r7, #15]

	return setTimeResult;
 802689c:	7bfb      	ldrb	r3, [r7, #15]
}
 802689e:	4618      	mov	r0, r3
 80268a0:	3710      	adds	r7, #16
 80268a2:	46bd      	mov	sp, r7
 80268a4:	bd80      	pop	{r7, pc}

080268a6 <rtc_driver_get_time>:

gos_result_t rtc_driver_get_time (gos_time_t* pTime, u8_t* dow)
{
 80268a6:	b580      	push	{r7, lr}
 80268a8:	b088      	sub	sp, #32
 80268aa:	af04      	add	r7, sp, #16
 80268ac:	6078      	str	r0, [r7, #4]
 80268ae:	6039      	str	r1, [r7, #0]
	u8_t time [7];
	gos_result_t getTimeResult = GOS_ERROR;
 80268b0:	23ae      	movs	r3, #174	; 0xae
 80268b2:	73fb      	strb	r3, [r7, #15]

	if (pTime != NULL)
 80268b4:	687b      	ldr	r3, [r7, #4]
 80268b6:	2b00      	cmp	r3, #0
 80268b8:	d054      	beq.n	8026964 <rtc_driver_get_time+0xbe>
	{
		//if (i2c_driver_mem_read(RTC_ADDRESS, 0x00, 1, time, 7) == GOS_SUCCESS)
		if (drv_i2cMemRead(DRV_I2C_INSTANCE_1, RTC_ADDRESS, 0x00, 1, time, 7, GOS_MUTEX_ENDLESS_TMO, 1000) == GOS_SUCCESS)
 80268ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80268be:	9303      	str	r3, [sp, #12]
 80268c0:	f04f 33ff 	mov.w	r3, #4294967295
 80268c4:	9302      	str	r3, [sp, #8]
 80268c6:	2307      	movs	r3, #7
 80268c8:	9301      	str	r3, [sp, #4]
 80268ca:	f107 0308 	add.w	r3, r7, #8
 80268ce:	9300      	str	r3, [sp, #0]
 80268d0:	2301      	movs	r3, #1
 80268d2:	2200      	movs	r2, #0
 80268d4:	21d0      	movs	r1, #208	; 0xd0
 80268d6:	2000      	movs	r0, #0
 80268d8:	f010 f8a2 	bl	8036a20 <drv_i2cMemRead>
 80268dc:	4603      	mov	r3, r0
 80268de:	2b55      	cmp	r3, #85	; 0x55
 80268e0:	d140      	bne.n	8026964 <rtc_driver_get_time+0xbe>
		{
			pTime->seconds = rtc_driver_bcd2dec(time[0]);
 80268e2:	7a3b      	ldrb	r3, [r7, #8]
 80268e4:	4618      	mov	r0, r3
 80268e6:	f000 f865 	bl	80269b4 <rtc_driver_bcd2dec>
 80268ea:	4603      	mov	r3, r0
 80268ec:	b2da      	uxtb	r2, r3
 80268ee:	687b      	ldr	r3, [r7, #4]
 80268f0:	709a      	strb	r2, [r3, #2]
			pTime->minutes = rtc_driver_bcd2dec(time[1]);
 80268f2:	7a7b      	ldrb	r3, [r7, #9]
 80268f4:	4618      	mov	r0, r3
 80268f6:	f000 f85d 	bl	80269b4 <rtc_driver_bcd2dec>
 80268fa:	4603      	mov	r3, r0
 80268fc:	b2da      	uxtb	r2, r3
 80268fe:	687b      	ldr	r3, [r7, #4]
 8026900:	70da      	strb	r2, [r3, #3]
			pTime->hours = rtc_driver_bcd2dec(time[2]);
 8026902:	7abb      	ldrb	r3, [r7, #10]
 8026904:	4618      	mov	r0, r3
 8026906:	f000 f855 	bl	80269b4 <rtc_driver_bcd2dec>
 802690a:	4603      	mov	r3, r0
 802690c:	b2da      	uxtb	r2, r3
 802690e:	687b      	ldr	r3, [r7, #4]
 8026910:	711a      	strb	r2, [r3, #4]
			if (dow != NULL)
 8026912:	683b      	ldr	r3, [r7, #0]
 8026914:	2b00      	cmp	r3, #0
 8026916:	d007      	beq.n	8026928 <rtc_driver_get_time+0x82>
			{
				*dow = rtc_driver_bcd2dec(time[3]);
 8026918:	7afb      	ldrb	r3, [r7, #11]
 802691a:	4618      	mov	r0, r3
 802691c:	f000 f84a 	bl	80269b4 <rtc_driver_bcd2dec>
 8026920:	4603      	mov	r3, r0
 8026922:	b2da      	uxtb	r2, r3
 8026924:	683b      	ldr	r3, [r7, #0]
 8026926:	701a      	strb	r2, [r3, #0]
			}
			pTime->days = rtc_driver_bcd2dec(time[4]);
 8026928:	7b3b      	ldrb	r3, [r7, #12]
 802692a:	4618      	mov	r0, r3
 802692c:	f000 f842 	bl	80269b4 <rtc_driver_bcd2dec>
 8026930:	4603      	mov	r3, r0
 8026932:	b29a      	uxth	r2, r3
 8026934:	687b      	ldr	r3, [r7, #4]
 8026936:	f8a3 2005 	strh.w	r2, [r3, #5]
			pTime->months = rtc_driver_bcd2dec(time[5]);
 802693a:	7b7b      	ldrb	r3, [r7, #13]
 802693c:	4618      	mov	r0, r3
 802693e:	f000 f839 	bl	80269b4 <rtc_driver_bcd2dec>
 8026942:	4603      	mov	r3, r0
 8026944:	b2da      	uxtb	r2, r3
 8026946:	687b      	ldr	r3, [r7, #4]
 8026948:	71da      	strb	r2, [r3, #7]
			pTime->years = 2000 + rtc_driver_bcd2dec(time[6]);
 802694a:	7bbb      	ldrb	r3, [r7, #14]
 802694c:	4618      	mov	r0, r3
 802694e:	f000 f831 	bl	80269b4 <rtc_driver_bcd2dec>
 8026952:	4603      	mov	r3, r0
 8026954:	b29b      	uxth	r3, r3
 8026956:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 802695a:	b29a      	uxth	r2, r3
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	811a      	strh	r2, [r3, #8]

			getTimeResult = GOS_SUCCESS;
 8026960:	2355      	movs	r3, #85	; 0x55
 8026962:	73fb      	strb	r3, [r7, #15]
		}
	}

	return getTimeResult;
 8026964:	7bfb      	ldrb	r3, [r7, #15]
}
 8026966:	4618      	mov	r0, r3
 8026968:	3710      	adds	r7, #16
 802696a:	46bd      	mov	sp, r7
 802696c:	bd80      	pop	{r7, pc}
	...

08026970 <rtc_driver_dec2bcd>:

GOS_STATIC u8_t rtc_driver_dec2bcd (u32_t dec)
{
 8026970:	b480      	push	{r7}
 8026972:	b083      	sub	sp, #12
 8026974:	af00      	add	r7, sp, #0
 8026976:	6078      	str	r0, [r7, #4]
	return (u8_t)((dec / 10 * 16) + (dec % 10));
 8026978:	687b      	ldr	r3, [r7, #4]
 802697a:	4a0d      	ldr	r2, [pc, #52]	; (80269b0 <rtc_driver_dec2bcd+0x40>)
 802697c:	fba2 2303 	umull	r2, r3, r2, r3
 8026980:	08db      	lsrs	r3, r3, #3
 8026982:	b2db      	uxtb	r3, r3
 8026984:	011b      	lsls	r3, r3, #4
 8026986:	b2d8      	uxtb	r0, r3
 8026988:	6879      	ldr	r1, [r7, #4]
 802698a:	4b09      	ldr	r3, [pc, #36]	; (80269b0 <rtc_driver_dec2bcd+0x40>)
 802698c:	fba3 2301 	umull	r2, r3, r3, r1
 8026990:	08da      	lsrs	r2, r3, #3
 8026992:	4613      	mov	r3, r2
 8026994:	009b      	lsls	r3, r3, #2
 8026996:	4413      	add	r3, r2
 8026998:	005b      	lsls	r3, r3, #1
 802699a:	1aca      	subs	r2, r1, r3
 802699c:	b2d3      	uxtb	r3, r2
 802699e:	4403      	add	r3, r0
 80269a0:	b2db      	uxtb	r3, r3
}
 80269a2:	4618      	mov	r0, r3
 80269a4:	370c      	adds	r7, #12
 80269a6:	46bd      	mov	sp, r7
 80269a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269ac:	4770      	bx	lr
 80269ae:	bf00      	nop
 80269b0:	cccccccd 	.word	0xcccccccd

080269b4 <rtc_driver_bcd2dec>:

GOS_STATIC u32_t rtc_driver_bcd2dec (u8_t bcd)
{
 80269b4:	b480      	push	{r7}
 80269b6:	b083      	sub	sp, #12
 80269b8:	af00      	add	r7, sp, #0
 80269ba:	4603      	mov	r3, r0
 80269bc:	71fb      	strb	r3, [r7, #7]
	return (u32_t)((bcd / 16 * 10) + (bcd % 16));
 80269be:	79fb      	ldrb	r3, [r7, #7]
 80269c0:	091b      	lsrs	r3, r3, #4
 80269c2:	b2db      	uxtb	r3, r3
 80269c4:	461a      	mov	r2, r3
 80269c6:	4613      	mov	r3, r2
 80269c8:	009b      	lsls	r3, r3, #2
 80269ca:	4413      	add	r3, r2
 80269cc:	005b      	lsls	r3, r3, #1
 80269ce:	461a      	mov	r2, r3
 80269d0:	79fb      	ldrb	r3, [r7, #7]
 80269d2:	f003 030f 	and.w	r3, r3, #15
 80269d6:	4413      	add	r3, r2
}
 80269d8:	4618      	mov	r0, r3
 80269da:	370c      	adds	r7, #12
 80269dc:	46bd      	mov	sp, r7
 80269de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80269e2:	4770      	bx	lr

080269e4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
GOS_STATIC void_t SELECT(void_t)
{
 80269e4:	b580      	push	{r7, lr}
 80269e6:	af00      	add	r7, sp, #0
	//drv_gpio_write_pin(iodef_get(IO_SD_CS), GPIO_STATE_LOW);
	drv_gpioWritePin(IO_SD_CS, GPIO_STATE_LOW);
 80269e8:	2100      	movs	r1, #0
 80269ea:	200f      	movs	r0, #15
 80269ec:	f00f fd24 	bl	8036438 <drv_gpioWritePin>
	gos_kernelDelayMs(1);
 80269f0:	2001      	movs	r0, #1
 80269f2:	f013 fe9b 	bl	803a72c <gos_kernelDelayMs>
}
 80269f6:	bf00      	nop
 80269f8:	bd80      	pop	{r7, pc}

080269fa <DESELECT>:

/* slave deselect */
GOS_STATIC void_t DESELECT(void_t)
{
 80269fa:	b580      	push	{r7, lr}
 80269fc:	af00      	add	r7, sp, #0
	//drv_gpio_write_pin(iodef_get(IO_SD_CS), GPIO_STATE_HIGH);
	drv_gpioWritePin(IO_SD_CS, GPIO_STATE_HIGH);
 80269fe:	2101      	movs	r1, #1
 8026a00:	200f      	movs	r0, #15
 8026a02:	f00f fd19 	bl	8036438 <drv_gpioWritePin>
	gos_kernelDelayMs(1);
 8026a06:	2001      	movs	r0, #1
 8026a08:	f013 fe90 	bl	803a72c <gos_kernelDelayMs>
}
 8026a0c:	bf00      	nop
 8026a0e:	bd80      	pop	{r7, pc}

08026a10 <SPI_RxByte>:

/* SPI receive a byte */
GOS_STATIC u8_t SPI_RxByte(void_t)
{
 8026a10:	b580      	push	{r7, lr}
 8026a12:	b084      	sub	sp, #16
 8026a14:	af02      	add	r7, sp, #8
	u8_t dummy, data;
	dummy = 0xFF;
 8026a16:	23ff      	movs	r3, #255	; 0xff
 8026a18:	71fb      	strb	r3, [r7, #7]

	//spi_driver_transmit_receive(&dummy, &data, sizeof(data));
	drv_spiTransmitReceiveIT(DRV_SPI_INSTANCE_2, &dummy, &data, sizeof(data), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026a1a:	1dba      	adds	r2, r7, #6
 8026a1c:	1df9      	adds	r1, r7, #7
 8026a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026a22:	9301      	str	r3, [sp, #4]
 8026a24:	f04f 33ff 	mov.w	r3, #4294967295
 8026a28:	9300      	str	r3, [sp, #0]
 8026a2a:	2301      	movs	r3, #1
 8026a2c:	2001      	movs	r0, #1
 8026a2e:	f010 fed9 	bl	80377e4 <drv_spiTransmitReceiveIT>

	return data;
 8026a32:	79bb      	ldrb	r3, [r7, #6]
}
 8026a34:	4618      	mov	r0, r3
 8026a36:	3708      	adds	r7, #8
 8026a38:	46bd      	mov	sp, r7
 8026a3a:	bd80      	pop	{r7, pc}

08026a3c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
GOS_STATIC void_t SPI_RxBytePtr(u8_t *buff)
{
 8026a3c:	b580      	push	{r7, lr}
 8026a3e:	b082      	sub	sp, #8
 8026a40:	af00      	add	r7, sp, #0
 8026a42:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8026a44:	f7ff ffe4 	bl	8026a10 <SPI_RxByte>
 8026a48:	4603      	mov	r3, r0
 8026a4a:	461a      	mov	r2, r3
 8026a4c:	687b      	ldr	r3, [r7, #4]
 8026a4e:	701a      	strb	r2, [r3, #0]
}
 8026a50:	bf00      	nop
 8026a52:	3708      	adds	r7, #8
 8026a54:	46bd      	mov	sp, r7
 8026a56:	bd80      	pop	{r7, pc}

08026a58 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
GOS_STATIC u8_t SD_ReadyWait(void_t)
{
 8026a58:	b580      	push	{r7, lr}
 8026a5a:	b084      	sub	sp, #16
 8026a5c:	af00      	add	r7, sp, #0
	u8_t res;
	u32_t timeout = 500;
 8026a5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8026a62:	60fb      	str	r3, [r7, #12]
	u32_t systick = gos_kernelGetSysTicks();
 8026a64:	f013 fe06 	bl	803a674 <gos_kernelGetSysTicks>
 8026a68:	60b8      	str	r0, [r7, #8]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8026a6a:	f7ff ffd1 	bl	8026a10 <SPI_RxByte>
 8026a6e:	4603      	mov	r3, r0
 8026a70:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && ((gos_kernelGetSysTicks() - systick) < timeout));
 8026a72:	79fb      	ldrb	r3, [r7, #7]
 8026a74:	2bff      	cmp	r3, #255	; 0xff
 8026a76:	d007      	beq.n	8026a88 <SD_ReadyWait+0x30>
 8026a78:	f013 fdfc 	bl	803a674 <gos_kernelGetSysTicks>
 8026a7c:	4602      	mov	r2, r0
 8026a7e:	68bb      	ldr	r3, [r7, #8]
 8026a80:	1ad3      	subs	r3, r2, r3
 8026a82:	68fa      	ldr	r2, [r7, #12]
 8026a84:	429a      	cmp	r2, r3
 8026a86:	d8f0      	bhi.n	8026a6a <SD_ReadyWait+0x12>

	return res;
 8026a88:	79fb      	ldrb	r3, [r7, #7]
}
 8026a8a:	4618      	mov	r0, r3
 8026a8c:	3710      	adds	r7, #16
 8026a8e:	46bd      	mov	sp, r7
 8026a90:	bd80      	pop	{r7, pc}
	...

08026a94 <SD_PowerOn>:

/* power on */
GOS_STATIC void_t SD_PowerOn(void_t)
{
 8026a94:	b580      	push	{r7, lr}
 8026a96:	b088      	sub	sp, #32
 8026a98:	af02      	add	r7, sp, #8
	u8_t args[6];
	uint32_t cnt = 0x1FFF;
 8026a9a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8026a9e:	617b      	str	r3, [r7, #20]
	u8_t ffByte = 0xFF;
 8026aa0:	23ff      	movs	r3, #255	; 0xff
 8026aa2:	71fb      	strb	r3, [r7, #7]

	/* transmit bytes to wake up */
	DESELECT();
 8026aa4:	f7ff ffa9 	bl	80269fa <DESELECT>
	for(int i = 0; i < 10; i++)
 8026aa8:	2300      	movs	r3, #0
 8026aaa:	613b      	str	r3, [r7, #16]
 8026aac:	e00c      	b.n	8026ac8 <SD_PowerOn+0x34>
	{
		//SPI_TxByte(0xFF);
		//spi_driver_transmit(&ffByte, sizeof(ffByte));
		drv_spiTransmitIT(DRV_SPI_INSTANCE_2, &ffByte, sizeof(ffByte), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026aae:	1df9      	adds	r1, r7, #7
 8026ab0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026ab4:	9300      	str	r3, [sp, #0]
 8026ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8026aba:	2201      	movs	r2, #1
 8026abc:	2001      	movs	r0, #1
 8026abe:	f010 fddd 	bl	803767c <drv_spiTransmitIT>
	for(int i = 0; i < 10; i++)
 8026ac2:	693b      	ldr	r3, [r7, #16]
 8026ac4:	3301      	adds	r3, #1
 8026ac6:	613b      	str	r3, [r7, #16]
 8026ac8:	693b      	ldr	r3, [r7, #16]
 8026aca:	2b09      	cmp	r3, #9
 8026acc:	ddef      	ble.n	8026aae <SD_PowerOn+0x1a>
	}

	/* slave select */
	SELECT();
 8026ace:	f7ff ff89 	bl	80269e4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8026ad2:	2340      	movs	r3, #64	; 0x40
 8026ad4:	723b      	strb	r3, [r7, #8]
	args[1] = 0;
 8026ad6:	2300      	movs	r3, #0
 8026ad8:	727b      	strb	r3, [r7, #9]
	args[2] = 0;
 8026ada:	2300      	movs	r3, #0
 8026adc:	72bb      	strb	r3, [r7, #10]
	args[3] = 0;
 8026ade:	2300      	movs	r3, #0
 8026ae0:	72fb      	strb	r3, [r7, #11]
	args[4] = 0;
 8026ae2:	2300      	movs	r3, #0
 8026ae4:	733b      	strb	r3, [r7, #12]
	args[5] = 0x95;		/* CRC */
 8026ae6:	2395      	movs	r3, #149	; 0x95
 8026ae8:	737b      	strb	r3, [r7, #13]

	//SPI_TxBuffer(args, sizeof(args));
	//spi_driver_transmit(args, sizeof(args));
	drv_spiTransmitIT(DRV_SPI_INSTANCE_2, args, sizeof(args), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026aea:	f107 0108 	add.w	r1, r7, #8
 8026aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026af2:	9300      	str	r3, [sp, #0]
 8026af4:	f04f 33ff 	mov.w	r3, #4294967295
 8026af8:	2206      	movs	r2, #6
 8026afa:	2001      	movs	r0, #1
 8026afc:	f010 fdbe 	bl	803767c <drv_spiTransmitIT>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8026b00:	e002      	b.n	8026b08 <SD_PowerOn+0x74>
	{
		cnt--;
 8026b02:	697b      	ldr	r3, [r7, #20]
 8026b04:	3b01      	subs	r3, #1
 8026b06:	617b      	str	r3, [r7, #20]
	while ((SPI_RxByte() != 0x01) && cnt)
 8026b08:	f7ff ff82 	bl	8026a10 <SPI_RxByte>
 8026b0c:	4603      	mov	r3, r0
 8026b0e:	2b01      	cmp	r3, #1
 8026b10:	d002      	beq.n	8026b18 <SD_PowerOn+0x84>
 8026b12:	697b      	ldr	r3, [r7, #20]
 8026b14:	2b00      	cmp	r3, #0
 8026b16:	d1f4      	bne.n	8026b02 <SD_PowerOn+0x6e>
	}

	DESELECT();
 8026b18:	f7ff ff6f 	bl	80269fa <DESELECT>
	//spi_driver_transmit(&ffByte, sizeof(ffByte));
	drv_spiTransmitIT(DRV_SPI_INSTANCE_2, &ffByte, sizeof(ffByte), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026b1c:	1df9      	adds	r1, r7, #7
 8026b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026b22:	9300      	str	r3, [sp, #0]
 8026b24:	f04f 33ff 	mov.w	r3, #4294967295
 8026b28:	2201      	movs	r2, #1
 8026b2a:	2001      	movs	r0, #1
 8026b2c:	f010 fda6 	bl	803767c <drv_spiTransmitIT>

	PowerFlag = 1;
 8026b30:	4b03      	ldr	r3, [pc, #12]	; (8026b40 <SD_PowerOn+0xac>)
 8026b32:	2201      	movs	r2, #1
 8026b34:	701a      	strb	r2, [r3, #0]
}
 8026b36:	bf00      	nop
 8026b38:	3718      	adds	r7, #24
 8026b3a:	46bd      	mov	sp, r7
 8026b3c:	bd80      	pop	{r7, pc}
 8026b3e:	bf00      	nop
 8026b40:	2000601d 	.word	0x2000601d

08026b44 <SD_PowerOff>:

/* power off */
GOS_STATIC void_t SD_PowerOff(void_t)
{
 8026b44:	b480      	push	{r7}
 8026b46:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8026b48:	4b03      	ldr	r3, [pc, #12]	; (8026b58 <SD_PowerOff+0x14>)
 8026b4a:	2200      	movs	r2, #0
 8026b4c:	701a      	strb	r2, [r3, #0]
}
 8026b4e:	bf00      	nop
 8026b50:	46bd      	mov	sp, r7
 8026b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b56:	4770      	bx	lr
 8026b58:	2000601d 	.word	0x2000601d

08026b5c <SD_CheckPower>:

/* check power flag */
GOS_STATIC u8_t SD_CheckPower(void_t)
{
 8026b5c:	b480      	push	{r7}
 8026b5e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8026b60:	4b03      	ldr	r3, [pc, #12]	; (8026b70 <SD_CheckPower+0x14>)
 8026b62:	781b      	ldrb	r3, [r3, #0]
}
 8026b64:	4618      	mov	r0, r3
 8026b66:	46bd      	mov	sp, r7
 8026b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b6c:	4770      	bx	lr
 8026b6e:	bf00      	nop
 8026b70:	2000601d 	.word	0x2000601d

08026b74 <SD_RxDataBlock>:

/* receive data block */
GOS_STATIC bool SD_RxDataBlock(u8_t *buff, UINT len)
{
 8026b74:	b580      	push	{r7, lr}
 8026b76:	b086      	sub	sp, #24
 8026b78:	af00      	add	r7, sp, #0
 8026b7a:	6078      	str	r0, [r7, #4]
 8026b7c:	6039      	str	r1, [r7, #0]
	u8_t token;
	u32_t timeout = 200;
 8026b7e:	23c8      	movs	r3, #200	; 0xc8
 8026b80:	617b      	str	r3, [r7, #20]
	u32_t systick = gos_kernelGetSysTicks();
 8026b82:	f013 fd77 	bl	803a674 <gos_kernelGetSysTicks>
 8026b86:	6138      	str	r0, [r7, #16]


	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8026b88:	f7ff ff42 	bl	8026a10 <SPI_RxByte>
 8026b8c:	4603      	mov	r3, r0
 8026b8e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && ((gos_kernelGetSysTicks() - systick) < timeout));
 8026b90:	7bfb      	ldrb	r3, [r7, #15]
 8026b92:	2bff      	cmp	r3, #255	; 0xff
 8026b94:	d107      	bne.n	8026ba6 <SD_RxDataBlock+0x32>
 8026b96:	f013 fd6d 	bl	803a674 <gos_kernelGetSysTicks>
 8026b9a:	4602      	mov	r2, r0
 8026b9c:	693b      	ldr	r3, [r7, #16]
 8026b9e:	1ad3      	subs	r3, r2, r3
 8026ba0:	697a      	ldr	r2, [r7, #20]
 8026ba2:	429a      	cmp	r2, r3
 8026ba4:	d8f0      	bhi.n	8026b88 <SD_RxDataBlock+0x14>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8026ba6:	7bfb      	ldrb	r3, [r7, #15]
 8026ba8:	2bfe      	cmp	r3, #254	; 0xfe
 8026baa:	d001      	beq.n	8026bb0 <SD_RxDataBlock+0x3c>
 8026bac:	2300      	movs	r3, #0
 8026bae:	e00f      	b.n	8026bd0 <SD_RxDataBlock+0x5c>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8026bb0:	687b      	ldr	r3, [r7, #4]
 8026bb2:	1c5a      	adds	r2, r3, #1
 8026bb4:	607a      	str	r2, [r7, #4]
 8026bb6:	4618      	mov	r0, r3
 8026bb8:	f7ff ff40 	bl	8026a3c <SPI_RxBytePtr>
	} while(len--);
 8026bbc:	683b      	ldr	r3, [r7, #0]
 8026bbe:	1e5a      	subs	r2, r3, #1
 8026bc0:	603a      	str	r2, [r7, #0]
 8026bc2:	2b00      	cmp	r3, #0
 8026bc4:	d1f4      	bne.n	8026bb0 <SD_RxDataBlock+0x3c>

	/* discard CRC */
	SPI_RxByte();
 8026bc6:	f7ff ff23 	bl	8026a10 <SPI_RxByte>
	SPI_RxByte();
 8026bca:	f7ff ff21 	bl	8026a10 <SPI_RxByte>

	return TRUE;
 8026bce:	2301      	movs	r3, #1
}
 8026bd0:	4618      	mov	r0, r3
 8026bd2:	3718      	adds	r7, #24
 8026bd4:	46bd      	mov	sp, r7
 8026bd6:	bd80      	pop	{r7, pc}

08026bd8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
GOS_STATIC bool SD_TxDataBlock(const u8_t *buff, u8_t token)
{
 8026bd8:	b580      	push	{r7, lr}
 8026bda:	b086      	sub	sp, #24
 8026bdc:	af02      	add	r7, sp, #8
 8026bde:	6078      	str	r0, [r7, #4]
 8026be0:	460b      	mov	r3, r1
 8026be2:	70fb      	strb	r3, [r7, #3]
	u8_t resp;
	u8_t i = 0;
 8026be4:	2300      	movs	r3, #0
 8026be6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8026be8:	f7ff ff36 	bl	8026a58 <SD_ReadyWait>
 8026bec:	4603      	mov	r3, r0
 8026bee:	2bff      	cmp	r3, #255	; 0xff
 8026bf0:	d001      	beq.n	8026bf6 <SD_TxDataBlock+0x1e>
 8026bf2:	2300      	movs	r3, #0
 8026bf4:	e03b      	b.n	8026c6e <SD_TxDataBlock+0x96>

	/* transmit token */
	//spi_driver_transmit(&token, sizeof(token));
	drv_spiTransmitIT(DRV_SPI_INSTANCE_2, &token, sizeof(token), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026bf6:	1cf9      	adds	r1, r7, #3
 8026bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026bfc:	9300      	str	r3, [sp, #0]
 8026bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8026c02:	2201      	movs	r2, #1
 8026c04:	2001      	movs	r0, #1
 8026c06:	f010 fd39 	bl	803767c <drv_spiTransmitIT>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8026c0a:	78fb      	ldrb	r3, [r7, #3]
 8026c0c:	2bfd      	cmp	r3, #253	; 0xfd
 8026c0e:	d026      	beq.n	8026c5e <SD_TxDataBlock+0x86>
	{
		//SPI_TxBuffer((u8_t*)buff, 512);
		//spi_driver_transmit((u8_t*)buff, 512);
		drv_spiTransmitIT(DRV_SPI_INSTANCE_2, (u8_t*)buff, 512, GOS_MUTEX_ENDLESS_TMO, 1000);
 8026c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026c14:	9300      	str	r3, [sp, #0]
 8026c16:	f04f 33ff 	mov.w	r3, #4294967295
 8026c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8026c1e:	6879      	ldr	r1, [r7, #4]
 8026c20:	2001      	movs	r0, #1
 8026c22:	f010 fd2b 	bl	803767c <drv_spiTransmitIT>


		/* discard CRC */
		SPI_RxByte();
 8026c26:	f7ff fef3 	bl	8026a10 <SPI_RxByte>
		SPI_RxByte();
 8026c2a:	f7ff fef1 	bl	8026a10 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8026c2e:	e00b      	b.n	8026c48 <SD_TxDataBlock+0x70>
		{
			resp = SPI_RxByte();
 8026c30:	f7ff feee 	bl	8026a10 <SPI_RxByte>
 8026c34:	4603      	mov	r3, r0
 8026c36:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8026c38:	7bfb      	ldrb	r3, [r7, #15]
 8026c3a:	f003 031f 	and.w	r3, r3, #31
 8026c3e:	2b05      	cmp	r3, #5
 8026c40:	d006      	beq.n	8026c50 <SD_TxDataBlock+0x78>
			i++;
 8026c42:	7bbb      	ldrb	r3, [r7, #14]
 8026c44:	3301      	adds	r3, #1
 8026c46:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8026c48:	7bbb      	ldrb	r3, [r7, #14]
 8026c4a:	2b40      	cmp	r3, #64	; 0x40
 8026c4c:	d9f0      	bls.n	8026c30 <SD_TxDataBlock+0x58>
 8026c4e:	e000      	b.n	8026c52 <SD_TxDataBlock+0x7a>
			if ((resp & 0x1F) == 0x05) break;
 8026c50:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8026c52:	bf00      	nop
 8026c54:	f7ff fedc 	bl	8026a10 <SPI_RxByte>
 8026c58:	4603      	mov	r3, r0
 8026c5a:	2b00      	cmp	r3, #0
 8026c5c:	d0fa      	beq.n	8026c54 <SD_TxDataBlock+0x7c>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8026c5e:	7bfb      	ldrb	r3, [r7, #15]
 8026c60:	f003 031f 	and.w	r3, r3, #31
 8026c64:	2b05      	cmp	r3, #5
 8026c66:	d101      	bne.n	8026c6c <SD_TxDataBlock+0x94>
 8026c68:	2301      	movs	r3, #1
 8026c6a:	e000      	b.n	8026c6e <SD_TxDataBlock+0x96>

	return FALSE;
 8026c6c:	2300      	movs	r3, #0
}
 8026c6e:	4618      	mov	r0, r3
 8026c70:	3710      	adds	r7, #16
 8026c72:	46bd      	mov	sp, r7
 8026c74:	bd80      	pop	{r7, pc}

08026c76 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
GOS_STATIC u8_t SD_SendCmd(u8_t cmd, u32_t arg)
{
 8026c76:	b580      	push	{r7, lr}
 8026c78:	b086      	sub	sp, #24
 8026c7a:	af02      	add	r7, sp, #8
 8026c7c:	4603      	mov	r3, r0
 8026c7e:	6039      	str	r1, [r7, #0]
 8026c80:	71fb      	strb	r3, [r7, #7]
	u8_t /*crc,*/ res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8026c82:	f7ff fee9 	bl	8026a58 <SD_ReadyWait>
 8026c86:	4603      	mov	r3, r0
 8026c88:	2bff      	cmp	r3, #255	; 0xff
 8026c8a:	d001      	beq.n	8026c90 <SD_SendCmd+0x1a>
 8026c8c:	23ff      	movs	r3, #255	; 0xff
 8026c8e:	e065      	b.n	8026d5c <SD_SendCmd+0xe6>

	/* transmit command */
	//SPI_TxByte(cmd); 					/* Command */
	//spi_driver_transmit(&cmd, sizeof(cmd));
	drv_spiTransmitIT(DRV_SPI_INSTANCE_2, &cmd, sizeof(cmd), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026c90:	1df9      	adds	r1, r7, #7
 8026c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026c96:	9300      	str	r3, [sp, #0]
 8026c98:	f04f 33ff 	mov.w	r3, #4294967295
 8026c9c:	2201      	movs	r2, #1
 8026c9e:	2001      	movs	r0, #1
 8026ca0:	f010 fcec 	bl	803767c <drv_spiTransmitIT>

	//SPI_TxByte((u8_t)(arg >> 24)); 	/* Argument[31..24] */
	//SPI_TxByte((u8_t)(arg >> 16)); 	/* Argument[23..16] */
	//SPI_TxByte((u8_t)(arg >> 8)); 	/* Argument[15..8] */
	//SPI_TxByte((u8_t)arg); 			/* Argument[7..0] */
	u8_t temp = (u8_t)(arg >> 24);
 8026ca4:	683b      	ldr	r3, [r7, #0]
 8026ca6:	0e1b      	lsrs	r3, r3, #24
 8026ca8:	b2db      	uxtb	r3, r3
 8026caa:	737b      	strb	r3, [r7, #13]
	//spi_driver_transmit(&temp, sizeof(temp));
	drv_spiTransmitIT(DRV_SPI_INSTANCE_2, &temp, sizeof(temp), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026cac:	f107 010d 	add.w	r1, r7, #13
 8026cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026cb4:	9300      	str	r3, [sp, #0]
 8026cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8026cba:	2201      	movs	r2, #1
 8026cbc:	2001      	movs	r0, #1
 8026cbe:	f010 fcdd 	bl	803767c <drv_spiTransmitIT>
	temp = (u8_t)(arg >> 16);
 8026cc2:	683b      	ldr	r3, [r7, #0]
 8026cc4:	0c1b      	lsrs	r3, r3, #16
 8026cc6:	b2db      	uxtb	r3, r3
 8026cc8:	737b      	strb	r3, [r7, #13]
	//spi_driver_transmit(&temp, sizeof(temp));
	drv_spiTransmitIT(DRV_SPI_INSTANCE_2, &temp, sizeof(temp), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026cca:	f107 010d 	add.w	r1, r7, #13
 8026cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026cd2:	9300      	str	r3, [sp, #0]
 8026cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8026cd8:	2201      	movs	r2, #1
 8026cda:	2001      	movs	r0, #1
 8026cdc:	f010 fcce 	bl	803767c <drv_spiTransmitIT>

	temp = (u8_t)(arg >> 8);
 8026ce0:	683b      	ldr	r3, [r7, #0]
 8026ce2:	0a1b      	lsrs	r3, r3, #8
 8026ce4:	b2db      	uxtb	r3, r3
 8026ce6:	737b      	strb	r3, [r7, #13]
	//spi_driver_transmit(&temp, sizeof(temp));
	drv_spiTransmitIT(DRV_SPI_INSTANCE_2, &temp, sizeof(temp), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026ce8:	f107 010d 	add.w	r1, r7, #13
 8026cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026cf0:	9300      	str	r3, [sp, #0]
 8026cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8026cf6:	2201      	movs	r2, #1
 8026cf8:	2001      	movs	r0, #1
 8026cfa:	f010 fcbf 	bl	803767c <drv_spiTransmitIT>

	temp = (u8_t)(arg);
 8026cfe:	683b      	ldr	r3, [r7, #0]
 8026d00:	b2db      	uxtb	r3, r3
 8026d02:	737b      	strb	r3, [r7, #13]
	//spi_driver_transmit(&temp, sizeof(temp));
	drv_spiTransmitIT(DRV_SPI_INSTANCE_2, &temp, sizeof(temp), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026d04:	f107 010d 	add.w	r1, r7, #13
 8026d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026d0c:	9300      	str	r3, [sp, #0]
 8026d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8026d12:	2201      	movs	r2, #1
 8026d14:	2001      	movs	r0, #1
 8026d16:	f010 fcb1 	bl	803767c <drv_spiTransmitIT>
	//else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
	//else crc = 1;

	/* transmit CRC */
//	spi_driver_transmit(&crc, sizeof(crc));
	drv_spiTransmitIT(DRV_SPI_INSTANCE_2, &temp, sizeof(temp), GOS_MUTEX_ENDLESS_TMO, 1000);
 8026d1a:	f107 010d 	add.w	r1, r7, #13
 8026d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026d22:	9300      	str	r3, [sp, #0]
 8026d24:	f04f 33ff 	mov.w	r3, #4294967295
 8026d28:	2201      	movs	r2, #1
 8026d2a:	2001      	movs	r0, #1
 8026d2c:	f010 fca6 	bl	803767c <drv_spiTransmitIT>


	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8026d30:	79fb      	ldrb	r3, [r7, #7]
 8026d32:	2b4c      	cmp	r3, #76	; 0x4c
 8026d34:	d101      	bne.n	8026d3a <SD_SendCmd+0xc4>
 8026d36:	f7ff fe6b 	bl	8026a10 <SPI_RxByte>

	/* receive response */
	u8_t n = 10;
 8026d3a:	230a      	movs	r3, #10
 8026d3c:	73fb      	strb	r3, [r7, #15]
	do {
		res = SPI_RxByte();
 8026d3e:	f7ff fe67 	bl	8026a10 <SPI_RxByte>
 8026d42:	4603      	mov	r3, r0
 8026d44:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8026d46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8026d4a:	2b00      	cmp	r3, #0
 8026d4c:	da05      	bge.n	8026d5a <SD_SendCmd+0xe4>
 8026d4e:	7bfb      	ldrb	r3, [r7, #15]
 8026d50:	3b01      	subs	r3, #1
 8026d52:	73fb      	strb	r3, [r7, #15]
 8026d54:	7bfb      	ldrb	r3, [r7, #15]
 8026d56:	2b00      	cmp	r3, #0
 8026d58:	d1f1      	bne.n	8026d3e <SD_SendCmd+0xc8>

	return res;
 8026d5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8026d5c:	4618      	mov	r0, r3
 8026d5e:	3710      	adds	r7, #16
 8026d60:	46bd      	mov	sp, r7
 8026d62:	bd80      	pop	{r7, pc}

08026d64 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(u8_t drv)
{
 8026d64:	b590      	push	{r4, r7, lr}
 8026d66:	b089      	sub	sp, #36	; 0x24
 8026d68:	af00      	add	r7, sp, #0
 8026d6a:	4603      	mov	r3, r0
 8026d6c:	71fb      	strb	r3, [r7, #7]
	u8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8026d6e:	79fb      	ldrb	r3, [r7, #7]
 8026d70:	2b00      	cmp	r3, #0
 8026d72:	d001      	beq.n	8026d78 <SD_disk_initialize+0x14>
 8026d74:	2301      	movs	r3, #1
 8026d76:	e0eb      	b.n	8026f50 <SD_disk_initialize+0x1ec>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8026d78:	4b77      	ldr	r3, [pc, #476]	; (8026f58 <SD_disk_initialize+0x1f4>)
 8026d7a:	781b      	ldrb	r3, [r3, #0]
 8026d7c:	b2db      	uxtb	r3, r3
 8026d7e:	f003 0302 	and.w	r3, r3, #2
 8026d82:	2b00      	cmp	r3, #0
 8026d84:	d003      	beq.n	8026d8e <SD_disk_initialize+0x2a>
 8026d86:	4b74      	ldr	r3, [pc, #464]	; (8026f58 <SD_disk_initialize+0x1f4>)
 8026d88:	781b      	ldrb	r3, [r3, #0]
 8026d8a:	b2db      	uxtb	r3, r3
 8026d8c:	e0e0      	b.n	8026f50 <SD_disk_initialize+0x1ec>

	/* power on */
	SD_PowerOn();
 8026d8e:	f7ff fe81 	bl	8026a94 <SD_PowerOn>

	/* slave select */
	SELECT();
 8026d92:	f7ff fe27 	bl	80269e4 <SELECT>

	/* check disk type */
	type = 0;
 8026d96:	2300      	movs	r3, #0
 8026d98:	77bb      	strb	r3, [r7, #30]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8026d9a:	2100      	movs	r1, #0
 8026d9c:	2040      	movs	r0, #64	; 0x40
 8026d9e:	f7ff ff6a 	bl	8026c76 <SD_SendCmd>
 8026da2:	4603      	mov	r3, r0
 8026da4:	2b01      	cmp	r3, #1
 8026da6:	f040 80bb 	bne.w	8026f20 <SD_disk_initialize+0x1bc>
	{
		/* timeout 1 sec */
		//Timer1 = 1000;
		u32_t timeout = 1000;
 8026daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026dae:	61bb      	str	r3, [r7, #24]
		u32_t systick = gos_kernelGetSysTicks();
 8026db0:	f013 fc60 	bl	803a674 <gos_kernelGetSysTicks>
 8026db4:	6178      	str	r0, [r7, #20]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8026db6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8026dba:	2048      	movs	r0, #72	; 0x48
 8026dbc:	f7ff ff5b 	bl	8026c76 <SD_SendCmd>
 8026dc0:	4603      	mov	r3, r0
 8026dc2:	2b01      	cmp	r3, #1
 8026dc4:	d15f      	bne.n	8026e86 <SD_disk_initialize+0x122>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8026dc6:	2300      	movs	r3, #0
 8026dc8:	77fb      	strb	r3, [r7, #31]
 8026dca:	e00c      	b.n	8026de6 <SD_disk_initialize+0x82>
			{
				ocr[n] = SPI_RxByte();
 8026dcc:	7ffc      	ldrb	r4, [r7, #31]
 8026dce:	f7ff fe1f 	bl	8026a10 <SPI_RxByte>
 8026dd2:	4603      	mov	r3, r0
 8026dd4:	461a      	mov	r2, r3
 8026dd6:	f104 0320 	add.w	r3, r4, #32
 8026dda:	443b      	add	r3, r7
 8026ddc:	f803 2c18 	strb.w	r2, [r3, #-24]
			for (n = 0; n < 4; n++)
 8026de0:	7ffb      	ldrb	r3, [r7, #31]
 8026de2:	3301      	adds	r3, #1
 8026de4:	77fb      	strb	r3, [r7, #31]
 8026de6:	7ffb      	ldrb	r3, [r7, #31]
 8026de8:	2b03      	cmp	r3, #3
 8026dea:	d9ef      	bls.n	8026dcc <SD_disk_initialize+0x68>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8026dec:	7abb      	ldrb	r3, [r7, #10]
 8026dee:	2b01      	cmp	r3, #1
 8026df0:	f040 8096 	bne.w	8026f20 <SD_disk_initialize+0x1bc>
 8026df4:	7afb      	ldrb	r3, [r7, #11]
 8026df6:	2baa      	cmp	r3, #170	; 0xaa
 8026df8:	f040 8092 	bne.w	8026f20 <SD_disk_initialize+0x1bc>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8026dfc:	2100      	movs	r1, #0
 8026dfe:	2077      	movs	r0, #119	; 0x77
 8026e00:	f7ff ff39 	bl	8026c76 <SD_SendCmd>
 8026e04:	4603      	mov	r3, r0
 8026e06:	2b01      	cmp	r3, #1
 8026e08:	d807      	bhi.n	8026e1a <SD_disk_initialize+0xb6>
 8026e0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8026e0e:	2069      	movs	r0, #105	; 0x69
 8026e10:	f7ff ff31 	bl	8026c76 <SD_SendCmd>
 8026e14:	4603      	mov	r3, r0
 8026e16:	2b00      	cmp	r3, #0
 8026e18:	d008      	beq.n	8026e2c <SD_disk_initialize+0xc8>
				} while (((gos_kernelGetSysTicks() - systick) < timeout));
 8026e1a:	f013 fc2b 	bl	803a674 <gos_kernelGetSysTicks>
 8026e1e:	4602      	mov	r2, r0
 8026e20:	697b      	ldr	r3, [r7, #20]
 8026e22:	1ad3      	subs	r3, r2, r3
 8026e24:	69ba      	ldr	r2, [r7, #24]
 8026e26:	429a      	cmp	r2, r3
 8026e28:	d8e8      	bhi.n	8026dfc <SD_disk_initialize+0x98>
 8026e2a:	e000      	b.n	8026e2e <SD_disk_initialize+0xca>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8026e2c:	bf00      	nop

				/* READ_OCR */
				if (((gos_kernelGetSysTicks() - systick) < timeout) && SD_SendCmd(CMD58, 0) == 0)
 8026e2e:	f013 fc21 	bl	803a674 <gos_kernelGetSysTicks>
 8026e32:	4602      	mov	r2, r0
 8026e34:	697b      	ldr	r3, [r7, #20]
 8026e36:	1ad3      	subs	r3, r2, r3
 8026e38:	69ba      	ldr	r2, [r7, #24]
 8026e3a:	429a      	cmp	r2, r3
 8026e3c:	d970      	bls.n	8026f20 <SD_disk_initialize+0x1bc>
 8026e3e:	2100      	movs	r1, #0
 8026e40:	207a      	movs	r0, #122	; 0x7a
 8026e42:	f7ff ff18 	bl	8026c76 <SD_SendCmd>
 8026e46:	4603      	mov	r3, r0
 8026e48:	2b00      	cmp	r3, #0
 8026e4a:	d169      	bne.n	8026f20 <SD_disk_initialize+0x1bc>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8026e4c:	2300      	movs	r3, #0
 8026e4e:	77fb      	strb	r3, [r7, #31]
 8026e50:	e00c      	b.n	8026e6c <SD_disk_initialize+0x108>
					{
						ocr[n] = SPI_RxByte();
 8026e52:	7ffc      	ldrb	r4, [r7, #31]
 8026e54:	f7ff fddc 	bl	8026a10 <SPI_RxByte>
 8026e58:	4603      	mov	r3, r0
 8026e5a:	461a      	mov	r2, r3
 8026e5c:	f104 0320 	add.w	r3, r4, #32
 8026e60:	443b      	add	r3, r7
 8026e62:	f803 2c18 	strb.w	r2, [r3, #-24]
					for (n = 0; n < 4; n++)
 8026e66:	7ffb      	ldrb	r3, [r7, #31]
 8026e68:	3301      	adds	r3, #1
 8026e6a:	77fb      	strb	r3, [r7, #31]
 8026e6c:	7ffb      	ldrb	r3, [r7, #31]
 8026e6e:	2b03      	cmp	r3, #3
 8026e70:	d9ef      	bls.n	8026e52 <SD_disk_initialize+0xee>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8026e72:	7a3b      	ldrb	r3, [r7, #8]
 8026e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026e78:	2b00      	cmp	r3, #0
 8026e7a:	d001      	beq.n	8026e80 <SD_disk_initialize+0x11c>
 8026e7c:	230c      	movs	r3, #12
 8026e7e:	e000      	b.n	8026e82 <SD_disk_initialize+0x11e>
 8026e80:	2304      	movs	r3, #4
 8026e82:	77bb      	strb	r3, [r7, #30]
 8026e84:	e04c      	b.n	8026f20 <SD_disk_initialize+0x1bc>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8026e86:	2100      	movs	r1, #0
 8026e88:	2077      	movs	r0, #119	; 0x77
 8026e8a:	f7ff fef4 	bl	8026c76 <SD_SendCmd>
 8026e8e:	4603      	mov	r3, r0
 8026e90:	2b01      	cmp	r3, #1
 8026e92:	d808      	bhi.n	8026ea6 <SD_disk_initialize+0x142>
 8026e94:	2100      	movs	r1, #0
 8026e96:	2069      	movs	r0, #105	; 0x69
 8026e98:	f7ff feed 	bl	8026c76 <SD_SendCmd>
 8026e9c:	4603      	mov	r3, r0
 8026e9e:	2b01      	cmp	r3, #1
 8026ea0:	d801      	bhi.n	8026ea6 <SD_disk_initialize+0x142>
 8026ea2:	2302      	movs	r3, #2
 8026ea4:	e000      	b.n	8026ea8 <SD_disk_initialize+0x144>
 8026ea6:	2301      	movs	r3, #1
 8026ea8:	77bb      	strb	r3, [r7, #30]

			u32_t timeout = 1000;
 8026eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026eae:	613b      	str	r3, [r7, #16]
			u32_t systick = gos_kernelGetSysTicks();
 8026eb0:	f013 fbe0 	bl	803a674 <gos_kernelGetSysTicks>
 8026eb4:	60f8      	str	r0, [r7, #12]

			do
			{
				if (type == CT_SD1)
 8026eb6:	7fbb      	ldrb	r3, [r7, #30]
 8026eb8:	2b02      	cmp	r3, #2
 8026eba:	d10e      	bne.n	8026eda <SD_disk_initialize+0x176>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8026ebc:	2100      	movs	r1, #0
 8026ebe:	2077      	movs	r0, #119	; 0x77
 8026ec0:	f7ff fed9 	bl	8026c76 <SD_SendCmd>
 8026ec4:	4603      	mov	r3, r0
 8026ec6:	2b01      	cmp	r3, #1
 8026ec8:	d80e      	bhi.n	8026ee8 <SD_disk_initialize+0x184>
 8026eca:	2100      	movs	r1, #0
 8026ecc:	2069      	movs	r0, #105	; 0x69
 8026ece:	f7ff fed2 	bl	8026c76 <SD_SendCmd>
 8026ed2:	4603      	mov	r3, r0
 8026ed4:	2b00      	cmp	r3, #0
 8026ed6:	d107      	bne.n	8026ee8 <SD_disk_initialize+0x184>
 8026ed8:	e010      	b.n	8026efc <SD_disk_initialize+0x198>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8026eda:	2100      	movs	r1, #0
 8026edc:	2041      	movs	r0, #65	; 0x41
 8026ede:	f7ff feca 	bl	8026c76 <SD_SendCmd>
 8026ee2:	4603      	mov	r3, r0
 8026ee4:	2b00      	cmp	r3, #0
 8026ee6:	d008      	beq.n	8026efa <SD_disk_initialize+0x196>
				}

			} while (((gos_kernelGetSysTicks() - systick) < timeout));
 8026ee8:	f013 fbc4 	bl	803a674 <gos_kernelGetSysTicks>
 8026eec:	4602      	mov	r2, r0
 8026eee:	68fb      	ldr	r3, [r7, #12]
 8026ef0:	1ad3      	subs	r3, r2, r3
 8026ef2:	693a      	ldr	r2, [r7, #16]
 8026ef4:	429a      	cmp	r2, r3
 8026ef6:	d8de      	bhi.n	8026eb6 <SD_disk_initialize+0x152>
 8026ef8:	e000      	b.n	8026efc <SD_disk_initialize+0x198>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8026efa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!((gos_kernelGetSysTicks() - systick) < timeout) || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8026efc:	f013 fbba 	bl	803a674 <gos_kernelGetSysTicks>
 8026f00:	4602      	mov	r2, r0
 8026f02:	68fb      	ldr	r3, [r7, #12]
 8026f04:	1ad3      	subs	r3, r2, r3
 8026f06:	693a      	ldr	r2, [r7, #16]
 8026f08:	429a      	cmp	r2, r3
 8026f0a:	d907      	bls.n	8026f1c <SD_disk_initialize+0x1b8>
 8026f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8026f10:	2050      	movs	r0, #80	; 0x50
 8026f12:	f7ff feb0 	bl	8026c76 <SD_SendCmd>
 8026f16:	4603      	mov	r3, r0
 8026f18:	2b00      	cmp	r3, #0
 8026f1a:	d001      	beq.n	8026f20 <SD_disk_initialize+0x1bc>
 8026f1c:	2300      	movs	r3, #0
 8026f1e:	77bb      	strb	r3, [r7, #30]
		}
	}

	CardType = type;
 8026f20:	4a0e      	ldr	r2, [pc, #56]	; (8026f5c <SD_disk_initialize+0x1f8>)
 8026f22:	7fbb      	ldrb	r3, [r7, #30]
 8026f24:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8026f26:	f7ff fd68 	bl	80269fa <DESELECT>
	SPI_RxByte();
 8026f2a:	f7ff fd71 	bl	8026a10 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8026f2e:	7fbb      	ldrb	r3, [r7, #30]
 8026f30:	2b00      	cmp	r3, #0
 8026f32:	d008      	beq.n	8026f46 <SD_disk_initialize+0x1e2>
	{
		Stat &= ~STA_NOINIT;
 8026f34:	4b08      	ldr	r3, [pc, #32]	; (8026f58 <SD_disk_initialize+0x1f4>)
 8026f36:	781b      	ldrb	r3, [r3, #0]
 8026f38:	b2db      	uxtb	r3, r3
 8026f3a:	f023 0301 	bic.w	r3, r3, #1
 8026f3e:	b2da      	uxtb	r2, r3
 8026f40:	4b05      	ldr	r3, [pc, #20]	; (8026f58 <SD_disk_initialize+0x1f4>)
 8026f42:	701a      	strb	r2, [r3, #0]
 8026f44:	e001      	b.n	8026f4a <SD_disk_initialize+0x1e6>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8026f46:	f7ff fdfd 	bl	8026b44 <SD_PowerOff>
	}

	return Stat;
 8026f4a:	4b03      	ldr	r3, [pc, #12]	; (8026f58 <SD_disk_initialize+0x1f4>)
 8026f4c:	781b      	ldrb	r3, [r3, #0]
 8026f4e:	b2db      	uxtb	r3, r3
}
 8026f50:	4618      	mov	r0, r3
 8026f52:	3724      	adds	r7, #36	; 0x24
 8026f54:	46bd      	mov	sp, r7
 8026f56:	bd90      	pop	{r4, r7, pc}
 8026f58:	20001952 	.word	0x20001952
 8026f5c:	2000601c 	.word	0x2000601c

08026f60 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(u8_t drv)
{
 8026f60:	b480      	push	{r7}
 8026f62:	b083      	sub	sp, #12
 8026f64:	af00      	add	r7, sp, #0
 8026f66:	4603      	mov	r3, r0
 8026f68:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8026f6a:	79fb      	ldrb	r3, [r7, #7]
 8026f6c:	2b00      	cmp	r3, #0
 8026f6e:	d001      	beq.n	8026f74 <SD_disk_status+0x14>
 8026f70:	2301      	movs	r3, #1
 8026f72:	e002      	b.n	8026f7a <SD_disk_status+0x1a>
	return Stat;
 8026f74:	4b04      	ldr	r3, [pc, #16]	; (8026f88 <SD_disk_status+0x28>)
 8026f76:	781b      	ldrb	r3, [r3, #0]
 8026f78:	b2db      	uxtb	r3, r3
}
 8026f7a:	4618      	mov	r0, r3
 8026f7c:	370c      	adds	r7, #12
 8026f7e:	46bd      	mov	sp, r7
 8026f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f84:	4770      	bx	lr
 8026f86:	bf00      	nop
 8026f88:	20001952 	.word	0x20001952

08026f8c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(u8_t pdrv, u8_t* buff, u32_t sector, u16_t count)
{
 8026f8c:	b580      	push	{r7, lr}
 8026f8e:	b084      	sub	sp, #16
 8026f90:	af00      	add	r7, sp, #0
 8026f92:	60b9      	str	r1, [r7, #8]
 8026f94:	607a      	str	r2, [r7, #4]
 8026f96:	461a      	mov	r2, r3
 8026f98:	4603      	mov	r3, r0
 8026f9a:	73fb      	strb	r3, [r7, #15]
 8026f9c:	4613      	mov	r3, r2
 8026f9e:	81bb      	strh	r3, [r7, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8026fa0:	7bfb      	ldrb	r3, [r7, #15]
 8026fa2:	2b00      	cmp	r3, #0
 8026fa4:	d102      	bne.n	8026fac <SD_disk_read+0x20>
 8026fa6:	89bb      	ldrh	r3, [r7, #12]
 8026fa8:	2b00      	cmp	r3, #0
 8026faa:	d101      	bne.n	8026fb0 <SD_disk_read+0x24>
 8026fac:	2304      	movs	r3, #4
 8026fae:	e051      	b.n	8027054 <SD_disk_read+0xc8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8026fb0:	4b2a      	ldr	r3, [pc, #168]	; (802705c <SD_disk_read+0xd0>)
 8026fb2:	781b      	ldrb	r3, [r3, #0]
 8026fb4:	b2db      	uxtb	r3, r3
 8026fb6:	f003 0301 	and.w	r3, r3, #1
 8026fba:	2b00      	cmp	r3, #0
 8026fbc:	d001      	beq.n	8026fc2 <SD_disk_read+0x36>
 8026fbe:	2303      	movs	r3, #3
 8026fc0:	e048      	b.n	8027054 <SD_disk_read+0xc8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8026fc2:	4b27      	ldr	r3, [pc, #156]	; (8027060 <SD_disk_read+0xd4>)
 8026fc4:	781b      	ldrb	r3, [r3, #0]
 8026fc6:	f003 0304 	and.w	r3, r3, #4
 8026fca:	2b00      	cmp	r3, #0
 8026fcc:	d102      	bne.n	8026fd4 <SD_disk_read+0x48>
 8026fce:	687b      	ldr	r3, [r7, #4]
 8026fd0:	025b      	lsls	r3, r3, #9
 8026fd2:	607b      	str	r3, [r7, #4]

	SELECT();
 8026fd4:	f7ff fd06 	bl	80269e4 <SELECT>

	if (count == 1)
 8026fd8:	89bb      	ldrh	r3, [r7, #12]
 8026fda:	2b01      	cmp	r3, #1
 8026fdc:	d111      	bne.n	8027002 <SD_disk_read+0x76>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8026fde:	6879      	ldr	r1, [r7, #4]
 8026fe0:	2051      	movs	r0, #81	; 0x51
 8026fe2:	f7ff fe48 	bl	8026c76 <SD_SendCmd>
 8026fe6:	4603      	mov	r3, r0
 8026fe8:	2b00      	cmp	r3, #0
 8026fea:	d129      	bne.n	8027040 <SD_disk_read+0xb4>
 8026fec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8026ff0:	68b8      	ldr	r0, [r7, #8]
 8026ff2:	f7ff fdbf 	bl	8026b74 <SD_RxDataBlock>
 8026ff6:	4603      	mov	r3, r0
 8026ff8:	2b00      	cmp	r3, #0
 8026ffa:	d021      	beq.n	8027040 <SD_disk_read+0xb4>
 8026ffc:	2300      	movs	r3, #0
 8026ffe:	81bb      	strh	r3, [r7, #12]
 8027000:	e01e      	b.n	8027040 <SD_disk_read+0xb4>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8027002:	6879      	ldr	r1, [r7, #4]
 8027004:	2052      	movs	r0, #82	; 0x52
 8027006:	f7ff fe36 	bl	8026c76 <SD_SendCmd>
 802700a:	4603      	mov	r3, r0
 802700c:	2b00      	cmp	r3, #0
 802700e:	d117      	bne.n	8027040 <SD_disk_read+0xb4>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8027010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8027014:	68b8      	ldr	r0, [r7, #8]
 8027016:	f7ff fdad 	bl	8026b74 <SD_RxDataBlock>
 802701a:	4603      	mov	r3, r0
 802701c:	2b00      	cmp	r3, #0
 802701e:	d00a      	beq.n	8027036 <SD_disk_read+0xaa>
				buff += 512;
 8027020:	68bb      	ldr	r3, [r7, #8]
 8027022:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8027026:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8027028:	89bb      	ldrh	r3, [r7, #12]
 802702a:	3b01      	subs	r3, #1
 802702c:	81bb      	strh	r3, [r7, #12]
 802702e:	89bb      	ldrh	r3, [r7, #12]
 8027030:	2b00      	cmp	r3, #0
 8027032:	d1ed      	bne.n	8027010 <SD_disk_read+0x84>
 8027034:	e000      	b.n	8027038 <SD_disk_read+0xac>
				if (!SD_RxDataBlock(buff, 512)) break;
 8027036:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8027038:	2100      	movs	r1, #0
 802703a:	204c      	movs	r0, #76	; 0x4c
 802703c:	f7ff fe1b 	bl	8026c76 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8027040:	f7ff fcdb 	bl	80269fa <DESELECT>
	SPI_RxByte();
 8027044:	f7ff fce4 	bl	8026a10 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8027048:	89bb      	ldrh	r3, [r7, #12]
 802704a:	2b00      	cmp	r3, #0
 802704c:	bf14      	ite	ne
 802704e:	2301      	movne	r3, #1
 8027050:	2300      	moveq	r3, #0
 8027052:	b2db      	uxtb	r3, r3
}
 8027054:	4618      	mov	r0, r3
 8027056:	3710      	adds	r7, #16
 8027058:	46bd      	mov	sp, r7
 802705a:	bd80      	pop	{r7, pc}
 802705c:	20001952 	.word	0x20001952
 8027060:	2000601c 	.word	0x2000601c

08027064 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(u8_t pdrv, const u8_t* buff, u32_t sector, u16_t count)
{
 8027064:	b580      	push	{r7, lr}
 8027066:	b084      	sub	sp, #16
 8027068:	af00      	add	r7, sp, #0
 802706a:	60b9      	str	r1, [r7, #8]
 802706c:	607a      	str	r2, [r7, #4]
 802706e:	461a      	mov	r2, r3
 8027070:	4603      	mov	r3, r0
 8027072:	73fb      	strb	r3, [r7, #15]
 8027074:	4613      	mov	r3, r2
 8027076:	81bb      	strh	r3, [r7, #12]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8027078:	7bfb      	ldrb	r3, [r7, #15]
 802707a:	2b00      	cmp	r3, #0
 802707c:	d102      	bne.n	8027084 <SD_disk_write+0x20>
 802707e:	89bb      	ldrh	r3, [r7, #12]
 8027080:	2b00      	cmp	r3, #0
 8027082:	d101      	bne.n	8027088 <SD_disk_write+0x24>
 8027084:	2304      	movs	r3, #4
 8027086:	e06c      	b.n	8027162 <SD_disk_write+0xfe>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8027088:	4b38      	ldr	r3, [pc, #224]	; (802716c <SD_disk_write+0x108>)
 802708a:	781b      	ldrb	r3, [r3, #0]
 802708c:	b2db      	uxtb	r3, r3
 802708e:	f003 0301 	and.w	r3, r3, #1
 8027092:	2b00      	cmp	r3, #0
 8027094:	d001      	beq.n	802709a <SD_disk_write+0x36>
 8027096:	2303      	movs	r3, #3
 8027098:	e063      	b.n	8027162 <SD_disk_write+0xfe>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 802709a:	4b34      	ldr	r3, [pc, #208]	; (802716c <SD_disk_write+0x108>)
 802709c:	781b      	ldrb	r3, [r3, #0]
 802709e:	b2db      	uxtb	r3, r3
 80270a0:	f003 0304 	and.w	r3, r3, #4
 80270a4:	2b00      	cmp	r3, #0
 80270a6:	d001      	beq.n	80270ac <SD_disk_write+0x48>
 80270a8:	2302      	movs	r3, #2
 80270aa:	e05a      	b.n	8027162 <SD_disk_write+0xfe>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80270ac:	4b30      	ldr	r3, [pc, #192]	; (8027170 <SD_disk_write+0x10c>)
 80270ae:	781b      	ldrb	r3, [r3, #0]
 80270b0:	f003 0304 	and.w	r3, r3, #4
 80270b4:	2b00      	cmp	r3, #0
 80270b6:	d102      	bne.n	80270be <SD_disk_write+0x5a>
 80270b8:	687b      	ldr	r3, [r7, #4]
 80270ba:	025b      	lsls	r3, r3, #9
 80270bc:	607b      	str	r3, [r7, #4]

	SELECT();
 80270be:	f7ff fc91 	bl	80269e4 <SELECT>

	if (count == 1)
 80270c2:	89bb      	ldrh	r3, [r7, #12]
 80270c4:	2b01      	cmp	r3, #1
 80270c6:	d110      	bne.n	80270ea <SD_disk_write+0x86>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80270c8:	6879      	ldr	r1, [r7, #4]
 80270ca:	2058      	movs	r0, #88	; 0x58
 80270cc:	f7ff fdd3 	bl	8026c76 <SD_SendCmd>
 80270d0:	4603      	mov	r3, r0
 80270d2:	2b00      	cmp	r3, #0
 80270d4:	d13b      	bne.n	802714e <SD_disk_write+0xea>
 80270d6:	21fe      	movs	r1, #254	; 0xfe
 80270d8:	68b8      	ldr	r0, [r7, #8]
 80270da:	f7ff fd7d 	bl	8026bd8 <SD_TxDataBlock>
 80270de:	4603      	mov	r3, r0
 80270e0:	2b00      	cmp	r3, #0
 80270e2:	d034      	beq.n	802714e <SD_disk_write+0xea>
			count = 0;
 80270e4:	2300      	movs	r3, #0
 80270e6:	81bb      	strh	r3, [r7, #12]
 80270e8:	e031      	b.n	802714e <SD_disk_write+0xea>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80270ea:	4b21      	ldr	r3, [pc, #132]	; (8027170 <SD_disk_write+0x10c>)
 80270ec:	781b      	ldrb	r3, [r3, #0]
 80270ee:	f003 0302 	and.w	r3, r3, #2
 80270f2:	2b00      	cmp	r3, #0
 80270f4:	d008      	beq.n	8027108 <SD_disk_write+0xa4>
		{
			SD_SendCmd(CMD55, 0);
 80270f6:	2100      	movs	r1, #0
 80270f8:	2077      	movs	r0, #119	; 0x77
 80270fa:	f7ff fdbc 	bl	8026c76 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80270fe:	89bb      	ldrh	r3, [r7, #12]
 8027100:	4619      	mov	r1, r3
 8027102:	2057      	movs	r0, #87	; 0x57
 8027104:	f7ff fdb7 	bl	8026c76 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8027108:	6879      	ldr	r1, [r7, #4]
 802710a:	2059      	movs	r0, #89	; 0x59
 802710c:	f7ff fdb3 	bl	8026c76 <SD_SendCmd>
 8027110:	4603      	mov	r3, r0
 8027112:	2b00      	cmp	r3, #0
 8027114:	d11b      	bne.n	802714e <SD_disk_write+0xea>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8027116:	21fc      	movs	r1, #252	; 0xfc
 8027118:	68b8      	ldr	r0, [r7, #8]
 802711a:	f7ff fd5d 	bl	8026bd8 <SD_TxDataBlock>
 802711e:	4603      	mov	r3, r0
 8027120:	2b00      	cmp	r3, #0
 8027122:	d00a      	beq.n	802713a <SD_disk_write+0xd6>
				buff += 512;
 8027124:	68bb      	ldr	r3, [r7, #8]
 8027126:	f503 7300 	add.w	r3, r3, #512	; 0x200
 802712a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 802712c:	89bb      	ldrh	r3, [r7, #12]
 802712e:	3b01      	subs	r3, #1
 8027130:	81bb      	strh	r3, [r7, #12]
 8027132:	89bb      	ldrh	r3, [r7, #12]
 8027134:	2b00      	cmp	r3, #0
 8027136:	d1ee      	bne.n	8027116 <SD_disk_write+0xb2>
 8027138:	e000      	b.n	802713c <SD_disk_write+0xd8>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 802713a:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 802713c:	21fd      	movs	r1, #253	; 0xfd
 802713e:	2000      	movs	r0, #0
 8027140:	f7ff fd4a 	bl	8026bd8 <SD_TxDataBlock>
 8027144:	4603      	mov	r3, r0
 8027146:	2b00      	cmp	r3, #0
 8027148:	d101      	bne.n	802714e <SD_disk_write+0xea>
			{
				count = 1;
 802714a:	2301      	movs	r3, #1
 802714c:	81bb      	strh	r3, [r7, #12]
			}
		}
	}

	/* Idle */
	DESELECT();
 802714e:	f7ff fc54 	bl	80269fa <DESELECT>
	SPI_RxByte();
 8027152:	f7ff fc5d 	bl	8026a10 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8027156:	89bb      	ldrh	r3, [r7, #12]
 8027158:	2b00      	cmp	r3, #0
 802715a:	bf14      	ite	ne
 802715c:	2301      	movne	r3, #1
 802715e:	2300      	moveq	r3, #0
 8027160:	b2db      	uxtb	r3, r3
}
 8027162:	4618      	mov	r0, r3
 8027164:	3710      	adds	r7, #16
 8027166:	46bd      	mov	sp, r7
 8027168:	bd80      	pop	{r7, pc}
 802716a:	bf00      	nop
 802716c:	20001952 	.word	0x20001952
 8027170:	2000601c 	.word	0x2000601c

08027174 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(u8_t drv, u8_t ctrl, void_t *buff)
{
 8027174:	b590      	push	{r4, r7, lr}
 8027176:	b08b      	sub	sp, #44	; 0x2c
 8027178:	af00      	add	r7, sp, #0
 802717a:	4603      	mov	r3, r0
 802717c:	603a      	str	r2, [r7, #0]
 802717e:	71fb      	strb	r3, [r7, #7]
 8027180:	460b      	mov	r3, r1
 8027182:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	u8_t n, csd[16], *ptr = buff;
 8027184:	683b      	ldr	r3, [r7, #0]
 8027186:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8027188:	79fb      	ldrb	r3, [r7, #7]
 802718a:	2b00      	cmp	r3, #0
 802718c:	d001      	beq.n	8027192 <SD_disk_ioctl+0x1e>
 802718e:	2304      	movs	r3, #4
 8027190:	e115      	b.n	80273be <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8027192:	2301      	movs	r3, #1
 8027194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8027198:	79bb      	ldrb	r3, [r7, #6]
 802719a:	2b05      	cmp	r3, #5
 802719c:	d124      	bne.n	80271e8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 802719e:	6a3b      	ldr	r3, [r7, #32]
 80271a0:	781b      	ldrb	r3, [r3, #0]
 80271a2:	2b02      	cmp	r3, #2
 80271a4:	d012      	beq.n	80271cc <SD_disk_ioctl+0x58>
 80271a6:	2b02      	cmp	r3, #2
 80271a8:	dc1a      	bgt.n	80271e0 <SD_disk_ioctl+0x6c>
 80271aa:	2b00      	cmp	r3, #0
 80271ac:	d002      	beq.n	80271b4 <SD_disk_ioctl+0x40>
 80271ae:	2b01      	cmp	r3, #1
 80271b0:	d006      	beq.n	80271c0 <SD_disk_ioctl+0x4c>
 80271b2:	e015      	b.n	80271e0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80271b4:	f7ff fcc6 	bl	8026b44 <SD_PowerOff>
			res = RES_OK;
 80271b8:	2300      	movs	r3, #0
 80271ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80271be:	e0fc      	b.n	80273ba <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80271c0:	f7ff fc68 	bl	8026a94 <SD_PowerOn>
			res = RES_OK;
 80271c4:	2300      	movs	r3, #0
 80271c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80271ca:	e0f6      	b.n	80273ba <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80271cc:	6a3b      	ldr	r3, [r7, #32]
 80271ce:	1c5c      	adds	r4, r3, #1
 80271d0:	f7ff fcc4 	bl	8026b5c <SD_CheckPower>
 80271d4:	4603      	mov	r3, r0
 80271d6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80271d8:	2300      	movs	r3, #0
 80271da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80271de:	e0ec      	b.n	80273ba <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80271e0:	2304      	movs	r3, #4
 80271e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80271e6:	e0e8      	b.n	80273ba <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80271e8:	4b77      	ldr	r3, [pc, #476]	; (80273c8 <SD_disk_ioctl+0x254>)
 80271ea:	781b      	ldrb	r3, [r3, #0]
 80271ec:	b2db      	uxtb	r3, r3
 80271ee:	f003 0301 	and.w	r3, r3, #1
 80271f2:	2b00      	cmp	r3, #0
 80271f4:	d001      	beq.n	80271fa <SD_disk_ioctl+0x86>
 80271f6:	2303      	movs	r3, #3
 80271f8:	e0e1      	b.n	80273be <SD_disk_ioctl+0x24a>

		SELECT();
 80271fa:	f7ff fbf3 	bl	80269e4 <SELECT>

		switch (ctrl)
 80271fe:	79bb      	ldrb	r3, [r7, #6]
 8027200:	2b0d      	cmp	r3, #13
 8027202:	f200 80cb 	bhi.w	802739c <SD_disk_ioctl+0x228>
 8027206:	a201      	add	r2, pc, #4	; (adr r2, 802720c <SD_disk_ioctl+0x98>)
 8027208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802720c:	08027307 	.word	0x08027307
 8027210:	08027245 	.word	0x08027245
 8027214:	080272f7 	.word	0x080272f7
 8027218:	0802739d 	.word	0x0802739d
 802721c:	0802739d 	.word	0x0802739d
 8027220:	0802739d 	.word	0x0802739d
 8027224:	0802739d 	.word	0x0802739d
 8027228:	0802739d 	.word	0x0802739d
 802722c:	0802739d 	.word	0x0802739d
 8027230:	0802739d 	.word	0x0802739d
 8027234:	0802739d 	.word	0x0802739d
 8027238:	08027319 	.word	0x08027319
 802723c:	0802733d 	.word	0x0802733d
 8027240:	08027361 	.word	0x08027361
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8027244:	2100      	movs	r1, #0
 8027246:	2049      	movs	r0, #73	; 0x49
 8027248:	f7ff fd15 	bl	8026c76 <SD_SendCmd>
 802724c:	4603      	mov	r3, r0
 802724e:	2b00      	cmp	r3, #0
 8027250:	f040 80a8 	bne.w	80273a4 <SD_disk_ioctl+0x230>
 8027254:	f107 030c 	add.w	r3, r7, #12
 8027258:	2110      	movs	r1, #16
 802725a:	4618      	mov	r0, r3
 802725c:	f7ff fc8a 	bl	8026b74 <SD_RxDataBlock>
 8027260:	4603      	mov	r3, r0
 8027262:	2b00      	cmp	r3, #0
 8027264:	f000 809e 	beq.w	80273a4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8027268:	7b3b      	ldrb	r3, [r7, #12]
 802726a:	099b      	lsrs	r3, r3, #6
 802726c:	b2db      	uxtb	r3, r3
 802726e:	2b01      	cmp	r3, #1
 8027270:	d10e      	bne.n	8027290 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8027272:	7d7b      	ldrb	r3, [r7, #21]
 8027274:	b29a      	uxth	r2, r3
 8027276:	7d3b      	ldrb	r3, [r7, #20]
 8027278:	b29b      	uxth	r3, r3
 802727a:	021b      	lsls	r3, r3, #8
 802727c:	b29b      	uxth	r3, r3
 802727e:	4413      	add	r3, r2
 8027280:	b29b      	uxth	r3, r3
 8027282:	3301      	adds	r3, #1
 8027284:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8027286:	8bfb      	ldrh	r3, [r7, #30]
 8027288:	029a      	lsls	r2, r3, #10
 802728a:	683b      	ldr	r3, [r7, #0]
 802728c:	601a      	str	r2, [r3, #0]
 802728e:	e02e      	b.n	80272ee <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8027290:	7c7b      	ldrb	r3, [r7, #17]
 8027292:	f003 030f 	and.w	r3, r3, #15
 8027296:	b2da      	uxtb	r2, r3
 8027298:	7dbb      	ldrb	r3, [r7, #22]
 802729a:	09db      	lsrs	r3, r3, #7
 802729c:	b2db      	uxtb	r3, r3
 802729e:	4413      	add	r3, r2
 80272a0:	b2da      	uxtb	r2, r3
 80272a2:	7d7b      	ldrb	r3, [r7, #21]
 80272a4:	005b      	lsls	r3, r3, #1
 80272a6:	b2db      	uxtb	r3, r3
 80272a8:	f003 0306 	and.w	r3, r3, #6
 80272ac:	b2db      	uxtb	r3, r3
 80272ae:	4413      	add	r3, r2
 80272b0:	b2db      	uxtb	r3, r3
 80272b2:	3302      	adds	r3, #2
 80272b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80272b8:	7d3b      	ldrb	r3, [r7, #20]
 80272ba:	099b      	lsrs	r3, r3, #6
 80272bc:	b2db      	uxtb	r3, r3
 80272be:	b29a      	uxth	r2, r3
 80272c0:	7cfb      	ldrb	r3, [r7, #19]
 80272c2:	b29b      	uxth	r3, r3
 80272c4:	009b      	lsls	r3, r3, #2
 80272c6:	b29b      	uxth	r3, r3
 80272c8:	4413      	add	r3, r2
 80272ca:	b29a      	uxth	r2, r3
 80272cc:	7cbb      	ldrb	r3, [r7, #18]
 80272ce:	029b      	lsls	r3, r3, #10
 80272d0:	b29b      	uxth	r3, r3
 80272d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80272d6:	b29b      	uxth	r3, r3
 80272d8:	4413      	add	r3, r2
 80272da:	b29b      	uxth	r3, r3
 80272dc:	3301      	adds	r3, #1
 80272de:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80272e0:	8bfa      	ldrh	r2, [r7, #30]
 80272e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80272e6:	3b09      	subs	r3, #9
 80272e8:	409a      	lsls	r2, r3
 80272ea:	683b      	ldr	r3, [r7, #0]
 80272ec:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80272ee:	2300      	movs	r3, #0
 80272f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80272f4:	e056      	b.n	80273a4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80272f6:	683b      	ldr	r3, [r7, #0]
 80272f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80272fc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80272fe:	2300      	movs	r3, #0
 8027300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8027304:	e055      	b.n	80273b2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8027306:	f7ff fba7 	bl	8026a58 <SD_ReadyWait>
 802730a:	4603      	mov	r3, r0
 802730c:	2bff      	cmp	r3, #255	; 0xff
 802730e:	d14b      	bne.n	80273a8 <SD_disk_ioctl+0x234>
 8027310:	2300      	movs	r3, #0
 8027312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8027316:	e047      	b.n	80273a8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8027318:	2100      	movs	r1, #0
 802731a:	2049      	movs	r0, #73	; 0x49
 802731c:	f7ff fcab 	bl	8026c76 <SD_SendCmd>
 8027320:	4603      	mov	r3, r0
 8027322:	2b00      	cmp	r3, #0
 8027324:	d142      	bne.n	80273ac <SD_disk_ioctl+0x238>
 8027326:	2110      	movs	r1, #16
 8027328:	6a38      	ldr	r0, [r7, #32]
 802732a:	f7ff fc23 	bl	8026b74 <SD_RxDataBlock>
 802732e:	4603      	mov	r3, r0
 8027330:	2b00      	cmp	r3, #0
 8027332:	d03b      	beq.n	80273ac <SD_disk_ioctl+0x238>
 8027334:	2300      	movs	r3, #0
 8027336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 802733a:	e037      	b.n	80273ac <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 802733c:	2100      	movs	r1, #0
 802733e:	204a      	movs	r0, #74	; 0x4a
 8027340:	f7ff fc99 	bl	8026c76 <SD_SendCmd>
 8027344:	4603      	mov	r3, r0
 8027346:	2b00      	cmp	r3, #0
 8027348:	d132      	bne.n	80273b0 <SD_disk_ioctl+0x23c>
 802734a:	2110      	movs	r1, #16
 802734c:	6a38      	ldr	r0, [r7, #32]
 802734e:	f7ff fc11 	bl	8026b74 <SD_RxDataBlock>
 8027352:	4603      	mov	r3, r0
 8027354:	2b00      	cmp	r3, #0
 8027356:	d02b      	beq.n	80273b0 <SD_disk_ioctl+0x23c>
 8027358:	2300      	movs	r3, #0
 802735a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 802735e:	e027      	b.n	80273b0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8027360:	2100      	movs	r1, #0
 8027362:	207a      	movs	r0, #122	; 0x7a
 8027364:	f7ff fc87 	bl	8026c76 <SD_SendCmd>
 8027368:	4603      	mov	r3, r0
 802736a:	2b00      	cmp	r3, #0
 802736c:	d116      	bne.n	802739c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 802736e:	2300      	movs	r3, #0
 8027370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8027374:	e00b      	b.n	802738e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8027376:	6a3c      	ldr	r4, [r7, #32]
 8027378:	1c63      	adds	r3, r4, #1
 802737a:	623b      	str	r3, [r7, #32]
 802737c:	f7ff fb48 	bl	8026a10 <SPI_RxByte>
 8027380:	4603      	mov	r3, r0
 8027382:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8027384:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8027388:	3301      	adds	r3, #1
 802738a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802738e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8027392:	2b03      	cmp	r3, #3
 8027394:	d9ef      	bls.n	8027376 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8027396:	2300      	movs	r3, #0
 8027398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 802739c:	2304      	movs	r3, #4
 802739e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80273a2:	e006      	b.n	80273b2 <SD_disk_ioctl+0x23e>
			break;
 80273a4:	bf00      	nop
 80273a6:	e004      	b.n	80273b2 <SD_disk_ioctl+0x23e>
			break;
 80273a8:	bf00      	nop
 80273aa:	e002      	b.n	80273b2 <SD_disk_ioctl+0x23e>
			break;
 80273ac:	bf00      	nop
 80273ae:	e000      	b.n	80273b2 <SD_disk_ioctl+0x23e>
			break;
 80273b0:	bf00      	nop
		}

		DESELECT();
 80273b2:	f7ff fb22 	bl	80269fa <DESELECT>
		SPI_RxByte();
 80273b6:	f7ff fb2b 	bl	8026a10 <SPI_RxByte>
	}

	return res;
 80273ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80273be:	4618      	mov	r0, r3
 80273c0:	372c      	adds	r7, #44	; 0x2c
 80273c2:	46bd      	mov	sp, r7
 80273c4:	bd90      	pop	{r4, r7, pc}
 80273c6:	bf00      	nop
 80273c8:	20001952 	.word	0x20001952

080273cc <temperature_driver_get_temp>:

/*
 * Function: temperature_driver_get_temp
 */
/*GOS_INLINE*/ gos_result_t temperature_driver_get_temp (u16_t* temp)
{
 80273cc:	b5b0      	push	{r4, r5, r7, lr}
 80273ce:	b088      	sub	sp, #32
 80273d0:	af04      	add	r7, sp, #16
 80273d2:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t temp8 [2];
	u8_t status = 0u;
 80273d4:	2300      	movs	r3, #0
 80273d6:	72fb      	strb	r3, [r7, #11]
	u8_t control = 0u;
 80273d8:	2300      	movs	r3, #0
 80273da:	72bb      	strb	r3, [r7, #10]
	gos_result_t getTempResult = GOS_SUCCESS;
 80273dc:	2355      	movs	r3, #85	; 0x55
 80273de:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (temp != NULL)
 80273e0:	687b      	ldr	r3, [r7, #4]
 80273e2:	2b00      	cmp	r3, #0
 80273e4:	f000 8097 	beq.w	8027516 <temperature_driver_get_temp+0x14a>
	{
		//getTempResult &= i2c_driver_mem_read(TEMP_SENSOR_ADDR, 0x0F, 1, &status, 1);
		getTempResult &= drv_i2cMemRead(DRV_I2C_INSTANCE_1, TEMP_SENSOR_ADDR, 0x0F, 1, &status, 1, GOS_MUTEX_ENDLESS_TMO, 1000);
 80273e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80273ec:	9303      	str	r3, [sp, #12]
 80273ee:	f04f 33ff 	mov.w	r3, #4294967295
 80273f2:	9302      	str	r3, [sp, #8]
 80273f4:	2301      	movs	r3, #1
 80273f6:	9301      	str	r3, [sp, #4]
 80273f8:	f107 030b 	add.w	r3, r7, #11
 80273fc:	9300      	str	r3, [sp, #0]
 80273fe:	2301      	movs	r3, #1
 8027400:	220f      	movs	r2, #15
 8027402:	21d0      	movs	r1, #208	; 0xd0
 8027404:	2000      	movs	r0, #0
 8027406:	f00f fb0b 	bl	8036a20 <drv_i2cMemRead>
 802740a:	4603      	mov	r3, r0
 802740c:	461a      	mov	r2, r3
 802740e:	7bfb      	ldrb	r3, [r7, #15]
 8027410:	4013      	ands	r3, r2
 8027412:	73fb      	strb	r3, [r7, #15]

		if (!(status & 0x04) && getTempResult == GOS_SUCCESS)
 8027414:	7afb      	ldrb	r3, [r7, #11]
 8027416:	f003 0304 	and.w	r3, r3, #4
 802741a:	2b00      	cmp	r3, #0
 802741c:	d178      	bne.n	8027510 <temperature_driver_get_temp+0x144>
 802741e:	7bfb      	ldrb	r3, [r7, #15]
 8027420:	2b55      	cmp	r3, #85	; 0x55
 8027422:	d175      	bne.n	8027510 <temperature_driver_get_temp+0x144>
		{

			getTempResult &= drv_i2cMemRead(DRV_I2C_INSTANCE_1, TEMP_SENSOR_ADDR, 0x0E, 1, &control, 1, GOS_MUTEX_ENDLESS_TMO, 1000);
 8027424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8027428:	9303      	str	r3, [sp, #12]
 802742a:	f04f 33ff 	mov.w	r3, #4294967295
 802742e:	9302      	str	r3, [sp, #8]
 8027430:	2301      	movs	r3, #1
 8027432:	9301      	str	r3, [sp, #4]
 8027434:	f107 030a 	add.w	r3, r7, #10
 8027438:	9300      	str	r3, [sp, #0]
 802743a:	2301      	movs	r3, #1
 802743c:	220e      	movs	r2, #14
 802743e:	21d0      	movs	r1, #208	; 0xd0
 8027440:	2000      	movs	r0, #0
 8027442:	f00f faed 	bl	8036a20 <drv_i2cMemRead>
 8027446:	4603      	mov	r3, r0
 8027448:	461a      	mov	r2, r3
 802744a:	7bfb      	ldrb	r3, [r7, #15]
 802744c:	4013      	ands	r3, r2
 802744e:	73fb      	strb	r3, [r7, #15]
			getTempResult &= drv_i2cMemWrite(DRV_I2C_INSTANCE_1, TEMP_SENSOR_ADDR, 0x0E, 1, (u8_t*)(control | 0x20), 1, GOS_MUTEX_ENDLESS_TMO, 1000);
 8027450:	7abb      	ldrb	r3, [r7, #10]
 8027452:	f043 0320 	orr.w	r3, r3, #32
 8027456:	b2db      	uxtb	r3, r3
 8027458:	461a      	mov	r2, r3
 802745a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802745e:	9303      	str	r3, [sp, #12]
 8027460:	f04f 33ff 	mov.w	r3, #4294967295
 8027464:	9302      	str	r3, [sp, #8]
 8027466:	2301      	movs	r3, #1
 8027468:	9301      	str	r3, [sp, #4]
 802746a:	9200      	str	r2, [sp, #0]
 802746c:	2301      	movs	r3, #1
 802746e:	220e      	movs	r2, #14
 8027470:	21d0      	movs	r1, #208	; 0xd0
 8027472:	2000      	movs	r0, #0
 8027474:	f00f fa68 	bl	8036948 <drv_i2cMemWrite>
 8027478:	4603      	mov	r3, r0
 802747a:	461a      	mov	r2, r3
 802747c:	7bfb      	ldrb	r3, [r7, #15]
 802747e:	4013      	ands	r3, r2
 8027480:	73fb      	strb	r3, [r7, #15]
			getTempResult &= drv_i2cMemRead(DRV_I2C_INSTANCE_1, TEMP_SENSOR_ADDR, 0x11, 1, temp8, 2, GOS_MUTEX_ENDLESS_TMO, 1000);
 8027482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8027486:	9303      	str	r3, [sp, #12]
 8027488:	f04f 33ff 	mov.w	r3, #4294967295
 802748c:	9302      	str	r3, [sp, #8]
 802748e:	2302      	movs	r3, #2
 8027490:	9301      	str	r3, [sp, #4]
 8027492:	f107 030c 	add.w	r3, r7, #12
 8027496:	9300      	str	r3, [sp, #0]
 8027498:	2301      	movs	r3, #1
 802749a:	2211      	movs	r2, #17
 802749c:	21d0      	movs	r1, #208	; 0xd0
 802749e:	2000      	movs	r0, #0
 80274a0:	f00f fabe 	bl	8036a20 <drv_i2cMemRead>
 80274a4:	4603      	mov	r3, r0
 80274a6:	461a      	mov	r2, r3
 80274a8:	7bfb      	ldrb	r3, [r7, #15]
 80274aa:	4013      	ands	r3, r2
 80274ac:	73fb      	strb	r3, [r7, #15]


			if (getTempResult == GOS_SUCCESS)
 80274ae:	7bfb      	ldrb	r3, [r7, #15]
 80274b0:	2b55      	cmp	r3, #85	; 0x55
 80274b2:	d12a      	bne.n	802750a <temperature_driver_get_temp+0x13e>
			{
				*temp = (u16_t)(((temp8[0]) + (temp8[1] >> 6) / 4.0) * 100);
 80274b4:	7b3b      	ldrb	r3, [r7, #12]
 80274b6:	4618      	mov	r0, r3
 80274b8:	f7f9 f864 	bl	8020584 <__aeabi_i2d>
 80274bc:	4604      	mov	r4, r0
 80274be:	460d      	mov	r5, r1
 80274c0:	7b7b      	ldrb	r3, [r7, #13]
 80274c2:	099b      	lsrs	r3, r3, #6
 80274c4:	b2db      	uxtb	r3, r3
 80274c6:	4618      	mov	r0, r3
 80274c8:	f7f9 f85c 	bl	8020584 <__aeabi_i2d>
 80274cc:	f04f 0200 	mov.w	r2, #0
 80274d0:	4b14      	ldr	r3, [pc, #80]	; (8027524 <temperature_driver_get_temp+0x158>)
 80274d2:	f7f9 f9eb 	bl	80208ac <__aeabi_ddiv>
 80274d6:	4602      	mov	r2, r0
 80274d8:	460b      	mov	r3, r1
 80274da:	4620      	mov	r0, r4
 80274dc:	4629      	mov	r1, r5
 80274de:	f7f8 ff05 	bl	80202ec <__adddf3>
 80274e2:	4602      	mov	r2, r0
 80274e4:	460b      	mov	r3, r1
 80274e6:	4610      	mov	r0, r2
 80274e8:	4619      	mov	r1, r3
 80274ea:	f04f 0200 	mov.w	r2, #0
 80274ee:	4b0e      	ldr	r3, [pc, #56]	; (8027528 <temperature_driver_get_temp+0x15c>)
 80274f0:	f7f9 f8b2 	bl	8020658 <__aeabi_dmul>
 80274f4:	4602      	mov	r2, r0
 80274f6:	460b      	mov	r3, r1
 80274f8:	4610      	mov	r0, r2
 80274fa:	4619      	mov	r1, r3
 80274fc:	f7f9 fb84 	bl	8020c08 <__aeabi_d2uiz>
 8027500:	4603      	mov	r3, r0
 8027502:	b29a      	uxth	r2, r3
 8027504:	687b      	ldr	r3, [r7, #4]
 8027506:	801a      	strh	r2, [r3, #0]
			if (getTempResult == GOS_SUCCESS)
 8027508:	e007      	b.n	802751a <temperature_driver_get_temp+0x14e>
			}
			else
			{
				getTempResult = GOS_ERROR;
 802750a:	23ae      	movs	r3, #174	; 0xae
 802750c:	73fb      	strb	r3, [r7, #15]
			if (getTempResult == GOS_SUCCESS)
 802750e:	e004      	b.n	802751a <temperature_driver_get_temp+0x14e>
			}
		}
		else
		{
			getTempResult = GOS_ERROR;
 8027510:	23ae      	movs	r3, #174	; 0xae
 8027512:	73fb      	strb	r3, [r7, #15]
 8027514:	e001      	b.n	802751a <temperature_driver_get_temp+0x14e>
		}
	}
	else
	{
		getTempResult = GOS_ERROR;
 8027516:	23ae      	movs	r3, #174	; 0xae
 8027518:	73fb      	strb	r3, [r7, #15]
	}

	return getTempResult;
 802751a:	7bfb      	ldrb	r3, [r7, #15]
}
 802751c:	4618      	mov	r0, r3
 802751e:	3710      	adds	r7, #16
 8027520:	46bd      	mov	sp, r7
 8027522:	bdb0      	pop	{r4, r5, r7, pc}
 8027524:	40100000 	.word	0x40100000
 8027528:	40590000 	.word	0x40590000

0802752c <g_buttonDraw>:
#include "string.h"

GOS_EXTERN gos_mutex_t g_mutex;

void_t g_buttonDraw (g_button_t* pButton)
{
 802752c:	b5b0      	push	{r4, r5, r7, lr}
 802752e:	b08a      	sub	sp, #40	; 0x28
 8027530:	af02      	add	r7, sp, #8
 8027532:	6078      	str	r0, [r7, #4]
	u16_t textIndex = 0u;
 8027534:	2300      	movs	r3, #0
 8027536:	83fb      	strh	r3, [r7, #30]
	u16_t btnWidth  = 0u;
 8027538:	2300      	movs	r3, #0
 802753a:	83bb      	strh	r3, [r7, #28]
	u16_t btnHeight = 0u;
 802753c:	2300      	movs	r3, #0
 802753e:	837b      	strh	r3, [r7, #26]

	if (pButton->width == BUTTON_AUTO_WIDTH)
 8027540:	687b      	ldr	r3, [r7, #4]
 8027542:	889b      	ldrh	r3, [r3, #4]
 8027544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027548:	4293      	cmp	r3, r2
 802754a:	d10f      	bne.n	802756c <g_buttonDraw+0x40>
	{
		btnWidth = strlen(pButton->text) * ili9341_font_7x10.width + 6;
 802754c:	687b      	ldr	r3, [r7, #4]
 802754e:	3312      	adds	r3, #18
 8027550:	4618      	mov	r0, r3
 8027552:	f7f8 febd 	bl	80202d0 <strlen>
 8027556:	4603      	mov	r3, r0
 8027558:	b29a      	uxth	r2, r3
 802755a:	4b53      	ldr	r3, [pc, #332]	; (80276a8 <g_buttonDraw+0x17c>)
 802755c:	781b      	ldrb	r3, [r3, #0]
 802755e:	b29b      	uxth	r3, r3
 8027560:	fb12 f303 	smulbb	r3, r2, r3
 8027564:	b29b      	uxth	r3, r3
 8027566:	3306      	adds	r3, #6
 8027568:	83bb      	strh	r3, [r7, #28]
 802756a:	e002      	b.n	8027572 <g_buttonDraw+0x46>
	}
	else
	{
		btnWidth = pButton->width;
 802756c:	687b      	ldr	r3, [r7, #4]
 802756e:	889b      	ldrh	r3, [r3, #4]
 8027570:	83bb      	strh	r3, [r7, #28]
	}

	if (pButton->height == BUTTON_AUTO_HEIGHT)
 8027572:	687b      	ldr	r3, [r7, #4]
 8027574:	88db      	ldrh	r3, [r3, #6]
 8027576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802757a:	4293      	cmp	r3, r2
 802757c:	d105      	bne.n	802758a <g_buttonDraw+0x5e>
	{
		btnHeight = ili9341_font_7x10.height + 4;
 802757e:	4b4a      	ldr	r3, [pc, #296]	; (80276a8 <g_buttonDraw+0x17c>)
 8027580:	785b      	ldrb	r3, [r3, #1]
 8027582:	b29b      	uxth	r3, r3
 8027584:	3304      	adds	r3, #4
 8027586:	837b      	strh	r3, [r7, #26]
 8027588:	e002      	b.n	8027590 <g_buttonDraw+0x64>
	}
	else
	{
		btnHeight = pButton->height;
 802758a:	687b      	ldr	r3, [r7, #4]
 802758c:	88db      	ldrh	r3, [r3, #6]
 802758e:	837b      	strh	r3, [r7, #26]
	}

	ili9341_fill_rect(pButton->backColor, pButton->xTop, pButton->yTop, btnWidth, btnHeight);
 8027590:	687b      	ldr	r3, [r7, #4]
 8027592:	8958      	ldrh	r0, [r3, #10]
 8027594:	687b      	ldr	r3, [r7, #4]
 8027596:	881b      	ldrh	r3, [r3, #0]
 8027598:	b219      	sxth	r1, r3
 802759a:	687b      	ldr	r3, [r7, #4]
 802759c:	885b      	ldrh	r3, [r3, #2]
 802759e:	b21a      	sxth	r2, r3
 80275a0:	8bbc      	ldrh	r4, [r7, #28]
 80275a2:	8b7b      	ldrh	r3, [r7, #26]
 80275a4:	9300      	str	r3, [sp, #0]
 80275a6:	4623      	mov	r3, r4
 80275a8:	f7fe fb46 	bl	8025c38 <ili9341_fill_rect>
	ili9341_draw_rect(ILI9341_BLACK, pButton->xTop, pButton->yTop, btnWidth, btnHeight);
 80275ac:	4b3f      	ldr	r3, [pc, #252]	; (80276ac <g_buttonDraw+0x180>)
 80275ae:	8818      	ldrh	r0, [r3, #0]
 80275b0:	687b      	ldr	r3, [r7, #4]
 80275b2:	881b      	ldrh	r3, [r3, #0]
 80275b4:	b219      	sxth	r1, r3
 80275b6:	687b      	ldr	r3, [r7, #4]
 80275b8:	885b      	ldrh	r3, [r3, #2]
 80275ba:	b21a      	sxth	r2, r3
 80275bc:	8bbc      	ldrh	r4, [r7, #28]
 80275be:	8b7b      	ldrh	r3, [r7, #26]
 80275c0:	9300      	str	r3, [sp, #0]
 80275c2:	4623      	mov	r3, r4
 80275c4:	f7fe fad0 	bl	8025b68 <ili9341_draw_rect>

	if (pButton->isFocused == GOS_TRUE)
 80275c8:	687b      	ldr	r3, [r7, #4]
 80275ca:	7b9b      	ldrb	r3, [r3, #14]
 80275cc:	2b36      	cmp	r3, #54	; 0x36
 80275ce:	d115      	bne.n	80275fc <g_buttonDraw+0xd0>
	{
		ili9341_draw_rect(ILI9341_YELLOW, pButton->xTop + 3, pButton->yTop + 3, btnWidth - 6, btnHeight - 6);
 80275d0:	4b37      	ldr	r3, [pc, #220]	; (80276b0 <g_buttonDraw+0x184>)
 80275d2:	8818      	ldrh	r0, [r3, #0]
 80275d4:	687b      	ldr	r3, [r7, #4]
 80275d6:	881b      	ldrh	r3, [r3, #0]
 80275d8:	3303      	adds	r3, #3
 80275da:	b29b      	uxth	r3, r3
 80275dc:	b219      	sxth	r1, r3
 80275de:	687b      	ldr	r3, [r7, #4]
 80275e0:	885b      	ldrh	r3, [r3, #2]
 80275e2:	3303      	adds	r3, #3
 80275e4:	b29b      	uxth	r3, r3
 80275e6:	b21a      	sxth	r2, r3
 80275e8:	8bbb      	ldrh	r3, [r7, #28]
 80275ea:	3b06      	subs	r3, #6
 80275ec:	b29c      	uxth	r4, r3
 80275ee:	8b7b      	ldrh	r3, [r7, #26]
 80275f0:	3b06      	subs	r3, #6
 80275f2:	b29b      	uxth	r3, r3
 80275f4:	9300      	str	r3, [sp, #0]
 80275f6:	4623      	mov	r3, r4
 80275f8:	f7fe fab6 	bl	8025b68 <ili9341_draw_rect>
	}

	ili9341_text_attr_t attr =
 80275fc:	4b2a      	ldr	r3, [pc, #168]	; (80276a8 <g_buttonDraw+0x17c>)
 80275fe:	60fb      	str	r3, [r7, #12]
	{
		.bg_color = pButton->backColor,
		.fg_color = pButton->foreColor,
 8027600:	687b      	ldr	r3, [r7, #4]
 8027602:	891b      	ldrh	r3, [r3, #8]
	ili9341_text_attr_t attr =
 8027604:	823b      	strh	r3, [r7, #16]
		.bg_color = pButton->backColor,
 8027606:	687b      	ldr	r3, [r7, #4]
 8027608:	895b      	ldrh	r3, [r3, #10]
	ili9341_text_attr_t attr =
 802760a:	827b      	strh	r3, [r7, #18]
		.font = &ili9341_font_7x10,
		.origin_x = pButton->xTop + ((btnWidth - strlen(pButton->text) * ili9341_font_7x10.width) / 2),
 802760c:	687b      	ldr	r3, [r7, #4]
 802760e:	881c      	ldrh	r4, [r3, #0]
 8027610:	8bbd      	ldrh	r5, [r7, #28]
 8027612:	687b      	ldr	r3, [r7, #4]
 8027614:	3312      	adds	r3, #18
 8027616:	4618      	mov	r0, r3
 8027618:	f7f8 fe5a 	bl	80202d0 <strlen>
 802761c:	4603      	mov	r3, r0
 802761e:	4a22      	ldr	r2, [pc, #136]	; (80276a8 <g_buttonDraw+0x17c>)
 8027620:	7812      	ldrb	r2, [r2, #0]
 8027622:	fb02 f303 	mul.w	r3, r2, r3
 8027626:	1aeb      	subs	r3, r5, r3
 8027628:	085b      	lsrs	r3, r3, #1
 802762a:	b29b      	uxth	r3, r3
 802762c:	4423      	add	r3, r4
 802762e:	b29b      	uxth	r3, r3
	ili9341_text_attr_t attr =
 8027630:	82bb      	strh	r3, [r7, #20]
		.origin_y = pButton->yTop + ((btnHeight - ili9341_font_7x10.height) / 2)
 8027632:	687b      	ldr	r3, [r7, #4]
 8027634:	885a      	ldrh	r2, [r3, #2]
 8027636:	8b7b      	ldrh	r3, [r7, #26]
 8027638:	491b      	ldr	r1, [pc, #108]	; (80276a8 <g_buttonDraw+0x17c>)
 802763a:	7849      	ldrb	r1, [r1, #1]
 802763c:	1a5b      	subs	r3, r3, r1
 802763e:	0fd9      	lsrs	r1, r3, #31
 8027640:	440b      	add	r3, r1
 8027642:	105b      	asrs	r3, r3, #1
 8027644:	b29b      	uxth	r3, r3
 8027646:	4413      	add	r3, r2
 8027648:	b29b      	uxth	r3, r3
	ili9341_text_attr_t attr =
 802764a:	82fb      	strh	r3, [r7, #22]
	};

	while ((attr.origin_x + attr.font->width + 1) < (pButton->xTop + btnWidth) &&
 802764c:	e012      	b.n	8027674 <g_buttonDraw+0x148>
			textIndex < BUTTON_TEXT_MAX_LENGTH &&
			pButton->text[textIndex] != '\0')
	{
		ili9341_draw_char(attr, pButton->text[textIndex++]);
 802764e:	8bfb      	ldrh	r3, [r7, #30]
 8027650:	1c5a      	adds	r2, r3, #1
 8027652:	83fa      	strh	r2, [r7, #30]
 8027654:	461a      	mov	r2, r3
 8027656:	687b      	ldr	r3, [r7, #4]
 8027658:	4413      	add	r3, r2
 802765a:	7c9b      	ldrb	r3, [r3, #18]
 802765c:	f107 020c 	add.w	r2, r7, #12
 8027660:	ca07      	ldmia	r2, {r0, r1, r2}
 8027662:	f7fe fb83 	bl	8025d6c <ili9341_draw_char>
		attr.origin_x += attr.font->width;
 8027666:	8aba      	ldrh	r2, [r7, #20]
 8027668:	68fb      	ldr	r3, [r7, #12]
 802766a:	781b      	ldrb	r3, [r3, #0]
 802766c:	b29b      	uxth	r3, r3
 802766e:	4413      	add	r3, r2
 8027670:	b29b      	uxth	r3, r3
 8027672:	82bb      	strh	r3, [r7, #20]
	while ((attr.origin_x + attr.font->width + 1) < (pButton->xTop + btnWidth) &&
 8027674:	8abb      	ldrh	r3, [r7, #20]
 8027676:	461a      	mov	r2, r3
 8027678:	68fb      	ldr	r3, [r7, #12]
 802767a:	781b      	ldrb	r3, [r3, #0]
 802767c:	4413      	add	r3, r2
 802767e:	1c5a      	adds	r2, r3, #1
 8027680:	687b      	ldr	r3, [r7, #4]
 8027682:	881b      	ldrh	r3, [r3, #0]
 8027684:	4619      	mov	r1, r3
 8027686:	8bbb      	ldrh	r3, [r7, #28]
 8027688:	440b      	add	r3, r1
			textIndex < BUTTON_TEXT_MAX_LENGTH &&
 802768a:	429a      	cmp	r2, r3
 802768c:	da08      	bge.n	80276a0 <g_buttonDraw+0x174>
	while ((attr.origin_x + attr.font->width + 1) < (pButton->xTop + btnWidth) &&
 802768e:	8bfb      	ldrh	r3, [r7, #30]
 8027690:	2b17      	cmp	r3, #23
 8027692:	d805      	bhi.n	80276a0 <g_buttonDraw+0x174>
			pButton->text[textIndex] != '\0')
 8027694:	8bfb      	ldrh	r3, [r7, #30]
 8027696:	687a      	ldr	r2, [r7, #4]
 8027698:	4413      	add	r3, r2
 802769a:	7c9b      	ldrb	r3, [r3, #18]
			textIndex < BUTTON_TEXT_MAX_LENGTH &&
 802769c:	2b00      	cmp	r3, #0
 802769e:	d1d6      	bne.n	802764e <g_buttonDraw+0x122>
	}
}
 80276a0:	bf00      	nop
 80276a2:	3720      	adds	r7, #32
 80276a4:	46bd      	mov	sp, r7
 80276a6:	bdb0      	pop	{r4, r5, r7, pc}
 80276a8:	08049498 	.word	0x08049498
 80276ac:	08049c06 	.word	0x08049c06
 80276b0:	08049c10 	.word	0x08049c10

080276b4 <g_buttonDrawClick>:

void_t g_buttonDrawClick (g_button_t* pButton)
{
 80276b4:	b5b0      	push	{r4, r5, r7, lr}
 80276b6:	b08a      	sub	sp, #40	; 0x28
 80276b8:	af02      	add	r7, sp, #8
 80276ba:	6078      	str	r0, [r7, #4]
	u16_t textIndex = 0u;
 80276bc:	2300      	movs	r3, #0
 80276be:	83fb      	strh	r3, [r7, #30]
	u16_t btnWidth  = 0u;
 80276c0:	2300      	movs	r3, #0
 80276c2:	83bb      	strh	r3, [r7, #28]
	u16_t btnHeight = 0u;
 80276c4:	2300      	movs	r3, #0
 80276c6:	837b      	strh	r3, [r7, #26]

	if (pButton->width == BUTTON_AUTO_WIDTH)
 80276c8:	687b      	ldr	r3, [r7, #4]
 80276ca:	889b      	ldrh	r3, [r3, #4]
 80276cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80276d0:	4293      	cmp	r3, r2
 80276d2:	d10f      	bne.n	80276f4 <g_buttonDrawClick+0x40>
	{
		btnWidth = strlen(pButton->text) * ili9341_font_7x10.width + 6;
 80276d4:	687b      	ldr	r3, [r7, #4]
 80276d6:	3312      	adds	r3, #18
 80276d8:	4618      	mov	r0, r3
 80276da:	f7f8 fdf9 	bl	80202d0 <strlen>
 80276de:	4603      	mov	r3, r0
 80276e0:	b29a      	uxth	r2, r3
 80276e2:	4b46      	ldr	r3, [pc, #280]	; (80277fc <g_buttonDrawClick+0x148>)
 80276e4:	781b      	ldrb	r3, [r3, #0]
 80276e6:	b29b      	uxth	r3, r3
 80276e8:	fb12 f303 	smulbb	r3, r2, r3
 80276ec:	b29b      	uxth	r3, r3
 80276ee:	3306      	adds	r3, #6
 80276f0:	83bb      	strh	r3, [r7, #28]
 80276f2:	e002      	b.n	80276fa <g_buttonDrawClick+0x46>
	}
	else
	{
		btnWidth = pButton->width;
 80276f4:	687b      	ldr	r3, [r7, #4]
 80276f6:	889b      	ldrh	r3, [r3, #4]
 80276f8:	83bb      	strh	r3, [r7, #28]
	}

	if (pButton->height == BUTTON_AUTO_HEIGHT)
 80276fa:	687b      	ldr	r3, [r7, #4]
 80276fc:	88db      	ldrh	r3, [r3, #6]
 80276fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027702:	4293      	cmp	r3, r2
 8027704:	d105      	bne.n	8027712 <g_buttonDrawClick+0x5e>
	{
		btnHeight = ili9341_font_7x10.height + 4;
 8027706:	4b3d      	ldr	r3, [pc, #244]	; (80277fc <g_buttonDrawClick+0x148>)
 8027708:	785b      	ldrb	r3, [r3, #1]
 802770a:	b29b      	uxth	r3, r3
 802770c:	3304      	adds	r3, #4
 802770e:	837b      	strh	r3, [r7, #26]
 8027710:	e002      	b.n	8027718 <g_buttonDrawClick+0x64>
	}
	else
	{
		btnHeight = pButton->height;
 8027712:	687b      	ldr	r3, [r7, #4]
 8027714:	88db      	ldrh	r3, [r3, #6]
 8027716:	837b      	strh	r3, [r7, #26]
	}

	ili9341_fill_rect(ILI9341_DARKGREY, pButton->xTop, pButton->yTop, btnWidth, btnHeight);
 8027718:	4b39      	ldr	r3, [pc, #228]	; (8027800 <g_buttonDrawClick+0x14c>)
 802771a:	8818      	ldrh	r0, [r3, #0]
 802771c:	687b      	ldr	r3, [r7, #4]
 802771e:	881b      	ldrh	r3, [r3, #0]
 8027720:	b219      	sxth	r1, r3
 8027722:	687b      	ldr	r3, [r7, #4]
 8027724:	885b      	ldrh	r3, [r3, #2]
 8027726:	b21a      	sxth	r2, r3
 8027728:	8bbc      	ldrh	r4, [r7, #28]
 802772a:	8b7b      	ldrh	r3, [r7, #26]
 802772c:	9300      	str	r3, [sp, #0]
 802772e:	4623      	mov	r3, r4
 8027730:	f7fe fa82 	bl	8025c38 <ili9341_fill_rect>
	ili9341_draw_rect(ILI9341_BLACK, pButton->xTop, pButton->yTop, btnWidth, btnHeight);
 8027734:	4b33      	ldr	r3, [pc, #204]	; (8027804 <g_buttonDrawClick+0x150>)
 8027736:	8818      	ldrh	r0, [r3, #0]
 8027738:	687b      	ldr	r3, [r7, #4]
 802773a:	881b      	ldrh	r3, [r3, #0]
 802773c:	b219      	sxth	r1, r3
 802773e:	687b      	ldr	r3, [r7, #4]
 8027740:	885b      	ldrh	r3, [r3, #2]
 8027742:	b21a      	sxth	r2, r3
 8027744:	8bbc      	ldrh	r4, [r7, #28]
 8027746:	8b7b      	ldrh	r3, [r7, #26]
 8027748:	9300      	str	r3, [sp, #0]
 802774a:	4623      	mov	r3, r4
 802774c:	f7fe fa0c 	bl	8025b68 <ili9341_draw_rect>

	ili9341_text_attr_t attr =
 8027750:	4b2a      	ldr	r3, [pc, #168]	; (80277fc <g_buttonDrawClick+0x148>)
 8027752:	60fb      	str	r3, [r7, #12]
	{
		.bg_color = pButton->backColor,
		.fg_color = pButton->foreColor,
 8027754:	687b      	ldr	r3, [r7, #4]
 8027756:	891b      	ldrh	r3, [r3, #8]
	ili9341_text_attr_t attr =
 8027758:	823b      	strh	r3, [r7, #16]
		.bg_color = pButton->backColor,
 802775a:	687b      	ldr	r3, [r7, #4]
 802775c:	895b      	ldrh	r3, [r3, #10]
	ili9341_text_attr_t attr =
 802775e:	827b      	strh	r3, [r7, #18]
		.font = &ili9341_font_7x10,
		.origin_x = pButton->xTop + ((btnWidth - strlen(pButton->text) * ili9341_font_7x10.width) / 2),
 8027760:	687b      	ldr	r3, [r7, #4]
 8027762:	881c      	ldrh	r4, [r3, #0]
 8027764:	8bbd      	ldrh	r5, [r7, #28]
 8027766:	687b      	ldr	r3, [r7, #4]
 8027768:	3312      	adds	r3, #18
 802776a:	4618      	mov	r0, r3
 802776c:	f7f8 fdb0 	bl	80202d0 <strlen>
 8027770:	4603      	mov	r3, r0
 8027772:	4a22      	ldr	r2, [pc, #136]	; (80277fc <g_buttonDrawClick+0x148>)
 8027774:	7812      	ldrb	r2, [r2, #0]
 8027776:	fb02 f303 	mul.w	r3, r2, r3
 802777a:	1aeb      	subs	r3, r5, r3
 802777c:	085b      	lsrs	r3, r3, #1
 802777e:	b29b      	uxth	r3, r3
 8027780:	4423      	add	r3, r4
 8027782:	b29b      	uxth	r3, r3
	ili9341_text_attr_t attr =
 8027784:	82bb      	strh	r3, [r7, #20]
		.origin_y = pButton->yTop + ((btnHeight - ili9341_font_7x10.height) / 2)
 8027786:	687b      	ldr	r3, [r7, #4]
 8027788:	885a      	ldrh	r2, [r3, #2]
 802778a:	8b7b      	ldrh	r3, [r7, #26]
 802778c:	491b      	ldr	r1, [pc, #108]	; (80277fc <g_buttonDrawClick+0x148>)
 802778e:	7849      	ldrb	r1, [r1, #1]
 8027790:	1a5b      	subs	r3, r3, r1
 8027792:	0fd9      	lsrs	r1, r3, #31
 8027794:	440b      	add	r3, r1
 8027796:	105b      	asrs	r3, r3, #1
 8027798:	b29b      	uxth	r3, r3
 802779a:	4413      	add	r3, r2
 802779c:	b29b      	uxth	r3, r3
	ili9341_text_attr_t attr =
 802779e:	82fb      	strh	r3, [r7, #22]
	};

	while ((attr.origin_x + attr.font->width + 1) < (pButton->xTop + btnWidth) &&
 80277a0:	e012      	b.n	80277c8 <g_buttonDrawClick+0x114>
			textIndex < BUTTON_TEXT_MAX_LENGTH &&
			pButton->text[textIndex] != '\0')
	{
		ili9341_draw_char(attr, pButton->text[textIndex++]);
 80277a2:	8bfb      	ldrh	r3, [r7, #30]
 80277a4:	1c5a      	adds	r2, r3, #1
 80277a6:	83fa      	strh	r2, [r7, #30]
 80277a8:	461a      	mov	r2, r3
 80277aa:	687b      	ldr	r3, [r7, #4]
 80277ac:	4413      	add	r3, r2
 80277ae:	7c9b      	ldrb	r3, [r3, #18]
 80277b0:	f107 020c 	add.w	r2, r7, #12
 80277b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80277b6:	f7fe fad9 	bl	8025d6c <ili9341_draw_char>
		attr.origin_x += attr.font->width;
 80277ba:	8aba      	ldrh	r2, [r7, #20]
 80277bc:	68fb      	ldr	r3, [r7, #12]
 80277be:	781b      	ldrb	r3, [r3, #0]
 80277c0:	b29b      	uxth	r3, r3
 80277c2:	4413      	add	r3, r2
 80277c4:	b29b      	uxth	r3, r3
 80277c6:	82bb      	strh	r3, [r7, #20]
	while ((attr.origin_x + attr.font->width + 1) < (pButton->xTop + btnWidth) &&
 80277c8:	8abb      	ldrh	r3, [r7, #20]
 80277ca:	461a      	mov	r2, r3
 80277cc:	68fb      	ldr	r3, [r7, #12]
 80277ce:	781b      	ldrb	r3, [r3, #0]
 80277d0:	4413      	add	r3, r2
 80277d2:	1c5a      	adds	r2, r3, #1
 80277d4:	687b      	ldr	r3, [r7, #4]
 80277d6:	881b      	ldrh	r3, [r3, #0]
 80277d8:	4619      	mov	r1, r3
 80277da:	8bbb      	ldrh	r3, [r7, #28]
 80277dc:	440b      	add	r3, r1
			textIndex < BUTTON_TEXT_MAX_LENGTH &&
 80277de:	429a      	cmp	r2, r3
 80277e0:	da08      	bge.n	80277f4 <g_buttonDrawClick+0x140>
	while ((attr.origin_x + attr.font->width + 1) < (pButton->xTop + btnWidth) &&
 80277e2:	8bfb      	ldrh	r3, [r7, #30]
 80277e4:	2b17      	cmp	r3, #23
 80277e6:	d805      	bhi.n	80277f4 <g_buttonDrawClick+0x140>
			pButton->text[textIndex] != '\0')
 80277e8:	8bfb      	ldrh	r3, [r7, #30]
 80277ea:	687a      	ldr	r2, [r7, #4]
 80277ec:	4413      	add	r3, r2
 80277ee:	7c9b      	ldrb	r3, [r3, #18]
			textIndex < BUTTON_TEXT_MAX_LENGTH &&
 80277f0:	2b00      	cmp	r3, #0
 80277f2:	d1d6      	bne.n	80277a2 <g_buttonDrawClick+0xee>
	}
}
 80277f4:	bf00      	nop
 80277f6:	3720      	adds	r7, #32
 80277f8:	46bd      	mov	sp, r7
 80277fa:	bdb0      	pop	{r4, r5, r7, pc}
 80277fc:	08049498 	.word	0x08049498
 8027800:	08049c0a 	.word	0x08049c0a
 8027804:	08049c06 	.word	0x08049c06

08027808 <g_buttonFocus>:
		}
	}
}

void_t g_buttonFocus (g_button_t* pButton)
{
 8027808:	b580      	push	{r7, lr}
 802780a:	b082      	sub	sp, #8
 802780c:	af00      	add	r7, sp, #0
 802780e:	6078      	str	r0, [r7, #4]
	if (pButton->isEnabled == GOS_TRUE &&
 8027810:	687b      	ldr	r3, [r7, #4]
 8027812:	7b1b      	ldrb	r3, [r3, #12]
 8027814:	2b36      	cmp	r3, #54	; 0x36
 8027816:	d111      	bne.n	802783c <g_buttonFocus+0x34>
		pButton->isVisible == GOS_TRUE &&
 8027818:	687b      	ldr	r3, [r7, #4]
 802781a:	7b5b      	ldrb	r3, [r3, #13]
	if (pButton->isEnabled == GOS_TRUE &&
 802781c:	2b36      	cmp	r3, #54	; 0x36
 802781e:	d10d      	bne.n	802783c <g_buttonFocus+0x34>
		pButton->tabStop == GOS_TRUE &&
 8027820:	687b      	ldr	r3, [r7, #4]
 8027822:	7bdb      	ldrb	r3, [r3, #15]
		pButton->isVisible == GOS_TRUE &&
 8027824:	2b36      	cmp	r3, #54	; 0x36
 8027826:	d109      	bne.n	802783c <g_buttonFocus+0x34>
		pButton->isFocused != GOS_TRUE)
 8027828:	687b      	ldr	r3, [r7, #4]
 802782a:	7b9b      	ldrb	r3, [r3, #14]
		pButton->tabStop == GOS_TRUE &&
 802782c:	2b36      	cmp	r3, #54	; 0x36
 802782e:	d005      	beq.n	802783c <g_buttonFocus+0x34>
	{
		pButton->isFocused = GOS_TRUE;
 8027830:	687b      	ldr	r3, [r7, #4]
 8027832:	2236      	movs	r2, #54	; 0x36
 8027834:	739a      	strb	r2, [r3, #14]
		g_buttonDraw(pButton);
 8027836:	6878      	ldr	r0, [r7, #4]
 8027838:	f7ff fe78 	bl	802752c <g_buttonDraw>
	}
}
 802783c:	bf00      	nop
 802783e:	3708      	adds	r7, #8
 8027840:	46bd      	mov	sp, r7
 8027842:	bd80      	pop	{r7, pc}

08027844 <g_buttonDeFocus>:

void_t g_buttonDeFocus (g_button_t* pButton)
{
 8027844:	b580      	push	{r7, lr}
 8027846:	b082      	sub	sp, #8
 8027848:	af00      	add	r7, sp, #0
 802784a:	6078      	str	r0, [r7, #4]
	if (pButton->isEnabled == GOS_TRUE &&
 802784c:	687b      	ldr	r3, [r7, #4]
 802784e:	7b1b      	ldrb	r3, [r3, #12]
 8027850:	2b36      	cmp	r3, #54	; 0x36
 8027852:	d111      	bne.n	8027878 <g_buttonDeFocus+0x34>
		pButton->isVisible == GOS_TRUE &&
 8027854:	687b      	ldr	r3, [r7, #4]
 8027856:	7b5b      	ldrb	r3, [r3, #13]
	if (pButton->isEnabled == GOS_TRUE &&
 8027858:	2b36      	cmp	r3, #54	; 0x36
 802785a:	d10d      	bne.n	8027878 <g_buttonDeFocus+0x34>
		pButton->tabStop == GOS_TRUE &&
 802785c:	687b      	ldr	r3, [r7, #4]
 802785e:	7bdb      	ldrb	r3, [r3, #15]
		pButton->isVisible == GOS_TRUE &&
 8027860:	2b36      	cmp	r3, #54	; 0x36
 8027862:	d109      	bne.n	8027878 <g_buttonDeFocus+0x34>
		pButton->isFocused == GOS_TRUE)
 8027864:	687b      	ldr	r3, [r7, #4]
 8027866:	7b9b      	ldrb	r3, [r3, #14]
		pButton->tabStop == GOS_TRUE &&
 8027868:	2b36      	cmp	r3, #54	; 0x36
 802786a:	d105      	bne.n	8027878 <g_buttonDeFocus+0x34>
	{
		pButton->isFocused = GOS_FALSE;
 802786c:	687b      	ldr	r3, [r7, #4]
 802786e:	2249      	movs	r2, #73	; 0x49
 8027870:	739a      	strb	r2, [r3, #14]
		g_buttonDraw(pButton);
 8027872:	6878      	ldr	r0, [r7, #4]
 8027874:	f7ff fe5a 	bl	802752c <g_buttonDraw>
	}
}
 8027878:	bf00      	nop
 802787a:	3708      	adds	r7, #8
 802787c:	46bd      	mov	sp, r7
 802787e:	bd80      	pop	{r7, pc}

08027880 <g_initGraphicsDriver>:
	.taskPriority = 200,//85,
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER
};

gos_result_t g_initGraphicsDriver (/*ili9341_t* lcd*/)
{
 8027880:	b580      	push	{r7, lr}
 8027882:	af00      	add	r7, sp, #0
		.callback = g_touchItCallback,
		.pin = iodef_get(IO_TOUCH_INT)->pin
	};*/

	//screen = lcd;
	numOfWindows = 0u;
 8027884:	4b06      	ldr	r3, [pc, #24]	; (80278a0 <g_initGraphicsDriver+0x20>)
 8027886:	2200      	movs	r2, #0
 8027888:	701a      	strb	r2, [r3, #0]
	gos_mutexInit(&g_mutex);
 802788a:	4806      	ldr	r0, [pc, #24]	; (80278a4 <g_initGraphicsDriver+0x24>)
 802788c:	f016 fd3a 	bl	803e304 <gos_mutexInit>
	//drv_gpio_registerItCallback(&touchInterruptDesc);

	//ili9341_set_touch_pressed_begin(g_screenTouchBegin);
	//ili9341_set_touch_pressed_end(g_screenTouchEnd);

	return gos_taskRegister(&g_taskDescriptor, &g_driverTaskId);
 8027890:	4905      	ldr	r1, [pc, #20]	; (80278a8 <g_initGraphicsDriver+0x28>)
 8027892:	4806      	ldr	r0, [pc, #24]	; (80278ac <g_initGraphicsDriver+0x2c>)
 8027894:	f013 ff4a 	bl	803b72c <gos_taskRegister>
 8027898:	4603      	mov	r3, r0
}
 802789a:	4618      	mov	r0, r3
 802789c:	bd80      	pop	{r7, pc}
 802789e:	bf00      	nop
 80278a0:	20006044 	.word	0x20006044
 80278a4:	20006020 	.word	0x20006020
 80278a8:	2000601e 	.word	0x2000601e
 80278ac:	20001954 	.word	0x20001954

080278b0 <g_registerWindow>:

gos_result_t g_registerWindow (g_window_t* pWindow)
{
 80278b0:	b480      	push	{r7}
 80278b2:	b085      	sub	sp, #20
 80278b4:	af00      	add	r7, sp, #0
 80278b6:	6078      	str	r0, [r7, #4]
	u16_t windowIndex = 0u;
 80278b8:	2300      	movs	r3, #0
 80278ba:	81fb      	strh	r3, [r7, #14]

	for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 80278bc:	2300      	movs	r3, #0
 80278be:	81fb      	strh	r3, [r7, #14]
 80278c0:	e020      	b.n	8027904 <g_registerWindow+0x54>
	{
		if (pWindows[windowIndex] == NULL)
 80278c2:	89fb      	ldrh	r3, [r7, #14]
 80278c4:	4a14      	ldr	r2, [pc, #80]	; (8027918 <g_registerWindow+0x68>)
 80278c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80278ca:	2b00      	cmp	r3, #0
 80278cc:	d10f      	bne.n	80278ee <g_registerWindow+0x3e>
		{
			pWindows[windowIndex] = pWindow;
 80278ce:	89fb      	ldrh	r3, [r7, #14]
 80278d0:	4911      	ldr	r1, [pc, #68]	; (8027918 <g_registerWindow+0x68>)
 80278d2:	687a      	ldr	r2, [r7, #4]
 80278d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pWindow->zIndex = 0u;
 80278d8:	687b      	ldr	r3, [r7, #4]
 80278da:	2200      	movs	r2, #0
 80278dc:	811a      	strh	r2, [r3, #8]
			numOfWindows++;
 80278de:	4b0f      	ldr	r3, [pc, #60]	; (802791c <g_registerWindow+0x6c>)
 80278e0:	781b      	ldrb	r3, [r3, #0]
 80278e2:	3301      	adds	r3, #1
 80278e4:	b2da      	uxtb	r2, r3
 80278e6:	4b0d      	ldr	r3, [pc, #52]	; (802791c <g_registerWindow+0x6c>)
 80278e8:	701a      	strb	r2, [r3, #0]
			return GOS_SUCCESS;
 80278ea:	2355      	movs	r3, #85	; 0x55
 80278ec:	e00e      	b.n	802790c <g_registerWindow+0x5c>
		}
		else
		{
			pWindows[windowIndex]->zIndex++;
 80278ee:	89fb      	ldrh	r3, [r7, #14]
 80278f0:	4a09      	ldr	r2, [pc, #36]	; (8027918 <g_registerWindow+0x68>)
 80278f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80278f6:	891a      	ldrh	r2, [r3, #8]
 80278f8:	3201      	adds	r2, #1
 80278fa:	b292      	uxth	r2, r2
 80278fc:	811a      	strh	r2, [r3, #8]
	for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 80278fe:	89fb      	ldrh	r3, [r7, #14]
 8027900:	3301      	adds	r3, #1
 8027902:	81fb      	strh	r3, [r7, #14]
 8027904:	89fb      	ldrh	r3, [r7, #14]
 8027906:	2b07      	cmp	r3, #7
 8027908:	d9db      	bls.n	80278c2 <g_registerWindow+0x12>
		}
	}

	return GOS_ERROR;
 802790a:	23ae      	movs	r3, #174	; 0xae
}
 802790c:	4618      	mov	r0, r3
 802790e:	3714      	adds	r7, #20
 8027910:	46bd      	mov	sp, r7
 8027912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027916:	4770      	bx	lr
 8027918:	20006024 	.word	0x20006024
 802791c:	20006044 	.word	0x20006044

08027920 <g_activateWindow>:

void_t g_activateWindow (g_window_t* pWindow)
{
 8027920:	b480      	push	{r7}
 8027922:	b085      	sub	sp, #20
 8027924:	af00      	add	r7, sp, #0
 8027926:	6078      	str	r0, [r7, #4]
	u16_t windowIndex = 0;
 8027928:	2300      	movs	r3, #0
 802792a:	81fb      	strh	r3, [r7, #14]
	u16_t lastZIndex = pWindow->zIndex;
 802792c:	687b      	ldr	r3, [r7, #4]
 802792e:	891b      	ldrh	r3, [r3, #8]
 8027930:	81bb      	strh	r3, [r7, #12]

	for (windowIndex = 0; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8027932:	2300      	movs	r3, #0
 8027934:	81fb      	strh	r3, [r7, #14]
 8027936:	e018      	b.n	802796a <g_activateWindow+0x4a>
	{
		if (pWindows[windowIndex] != NULL)
 8027938:	89fb      	ldrh	r3, [r7, #14]
 802793a:	4a13      	ldr	r2, [pc, #76]	; (8027988 <g_activateWindow+0x68>)
 802793c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027940:	2b00      	cmp	r3, #0
 8027942:	d016      	beq.n	8027972 <g_activateWindow+0x52>
		{
			if (pWindows[windowIndex]->zIndex < lastZIndex)
 8027944:	89fb      	ldrh	r3, [r7, #14]
 8027946:	4a10      	ldr	r2, [pc, #64]	; (8027988 <g_activateWindow+0x68>)
 8027948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802794c:	891b      	ldrh	r3, [r3, #8]
 802794e:	89ba      	ldrh	r2, [r7, #12]
 8027950:	429a      	cmp	r2, r3
 8027952:	d907      	bls.n	8027964 <g_activateWindow+0x44>
			{
				pWindows[windowIndex]->zIndex++;
 8027954:	89fb      	ldrh	r3, [r7, #14]
 8027956:	4a0c      	ldr	r2, [pc, #48]	; (8027988 <g_activateWindow+0x68>)
 8027958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802795c:	891a      	ldrh	r2, [r3, #8]
 802795e:	3201      	adds	r2, #1
 8027960:	b292      	uxth	r2, r2
 8027962:	811a      	strh	r2, [r3, #8]
	for (windowIndex = 0; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8027964:	89fb      	ldrh	r3, [r7, #14]
 8027966:	3301      	adds	r3, #1
 8027968:	81fb      	strh	r3, [r7, #14]
 802796a:	89fb      	ldrh	r3, [r7, #14]
 802796c:	2b07      	cmp	r3, #7
 802796e:	d9e3      	bls.n	8027938 <g_activateWindow+0x18>
 8027970:	e000      	b.n	8027974 <g_activateWindow+0x54>
			}
		}
		else
		{
			break;
 8027972:	bf00      	nop
		}
	}

	pWindow->zIndex = 0u;
 8027974:	687b      	ldr	r3, [r7, #4]
 8027976:	2200      	movs	r2, #0
 8027978:	811a      	strh	r2, [r3, #8]
}
 802797a:	bf00      	nop
 802797c:	3714      	adds	r7, #20
 802797e:	46bd      	mov	sp, r7
 8027980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027984:	4770      	bx	lr
 8027986:	bf00      	nop
 8027988:	20006024 	.word	0x20006024

0802798c <g_inactivateWindow>:

void_t g_inactivateWindow (g_window_t* pWindow)
{
 802798c:	b480      	push	{r7}
 802798e:	b085      	sub	sp, #20
 8027990:	af00      	add	r7, sp, #0
 8027992:	6078      	str	r0, [r7, #4]
	u16_t windowIndex = 0;
 8027994:	2300      	movs	r3, #0
 8027996:	81fb      	strh	r3, [r7, #14]

	if (pWindow->zIndex == 0u)
 8027998:	687b      	ldr	r3, [r7, #4]
 802799a:	891b      	ldrh	r3, [r3, #8]
 802799c:	2b00      	cmp	r3, #0
 802799e:	d118      	bne.n	80279d2 <g_inactivateWindow+0x46>
	{
		for (windowIndex = 0; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 80279a0:	2300      	movs	r3, #0
 80279a2:	81fb      	strh	r3, [r7, #14]
 80279a4:	e010      	b.n	80279c8 <g_inactivateWindow+0x3c>
		{
			if (pWindows[windowIndex] != NULL)
 80279a6:	89fb      	ldrh	r3, [r7, #14]
 80279a8:	4a10      	ldr	r2, [pc, #64]	; (80279ec <g_inactivateWindow+0x60>)
 80279aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80279ae:	2b00      	cmp	r3, #0
 80279b0:	d00e      	beq.n	80279d0 <g_inactivateWindow+0x44>
			{
				pWindows[windowIndex]->zIndex--;
 80279b2:	89fb      	ldrh	r3, [r7, #14]
 80279b4:	4a0d      	ldr	r2, [pc, #52]	; (80279ec <g_inactivateWindow+0x60>)
 80279b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80279ba:	891a      	ldrh	r2, [r3, #8]
 80279bc:	3a01      	subs	r2, #1
 80279be:	b292      	uxth	r2, r2
 80279c0:	811a      	strh	r2, [r3, #8]
		for (windowIndex = 0; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 80279c2:	89fb      	ldrh	r3, [r7, #14]
 80279c4:	3301      	adds	r3, #1
 80279c6:	81fb      	strh	r3, [r7, #14]
 80279c8:	89fb      	ldrh	r3, [r7, #14]
 80279ca:	2b07      	cmp	r3, #7
 80279cc:	d9eb      	bls.n	80279a6 <g_inactivateWindow+0x1a>
 80279ce:	e000      	b.n	80279d2 <g_inactivateWindow+0x46>
			}
			else
			{
				break;
 80279d0:	bf00      	nop
			}
		}
	}

	pWindow->zIndex = numOfWindows - 1;
 80279d2:	4b07      	ldr	r3, [pc, #28]	; (80279f0 <g_inactivateWindow+0x64>)
 80279d4:	781b      	ldrb	r3, [r3, #0]
 80279d6:	b29b      	uxth	r3, r3
 80279d8:	3b01      	subs	r3, #1
 80279da:	b29a      	uxth	r2, r3
 80279dc:	687b      	ldr	r3, [r7, #4]
 80279de:	811a      	strh	r2, [r3, #8]
}
 80279e0:	bf00      	nop
 80279e2:	3714      	adds	r7, #20
 80279e4:	46bd      	mov	sp, r7
 80279e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80279ea:	4770      	bx	lr
 80279ec:	20006024 	.word	0x20006024
 80279f0:	20006044 	.word	0x20006044

080279f4 <g_task>:

GOS_STATIC void_t g_task (void_t)
{
 80279f4:	b580      	push	{r7, lr}
 80279f6:	b096      	sub	sp, #88	; 0x58
 80279f8:	af00      	add	r7, sp, #0
	gos_messageId_t selector [] = { WINDOW_EVENT_MSG_ID, 0 };
 80279fa:	f64a 4320 	movw	r3, #44064	; 0xac20
 80279fe:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8027a02:	2300      	movs	r3, #0
 8027a04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	gos_message_t eventMessage;
	ili9341_fill_screen(ILI9341_BLACK);
 8027a08:	4b0d      	ldr	r3, [pc, #52]	; (8027a40 <g_task+0x4c>)
 8027a0a:	881b      	ldrh	r3, [r3, #0]
 8027a0c:	4618      	mov	r0, r3
 8027a0e:	f7fe f997 	bl	8025d40 <ili9341_fill_screen>

	// Draw at startup.
	g_redrawHandler(EVENT_STARTUP, &eventMessage);
 8027a12:	463b      	mov	r3, r7
 8027a14:	4619      	mov	r1, r3
 8027a16:	2000      	movs	r0, #0
 8027a18:	f000 f814 	bl	8027a44 <g_redrawHandler>

	for (;;)
	{
		if (gos_messageRx(selector, &eventMessage, GOS_MESSAGE_ENDLESS_TMO) == GOS_SUCCESS)
 8027a1c:	4639      	mov	r1, r7
 8027a1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8027a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027a26:	4618      	mov	r0, r3
 8027a28:	f016 fa0e 	bl	803de48 <gos_messageRx>
 8027a2c:	4603      	mov	r3, r0
 8027a2e:	2b55      	cmp	r3, #85	; 0x55
 8027a30:	d1f4      	bne.n	8027a1c <g_task+0x28>
		{
			g_redrawHandler((g_windowEvent_t)eventMessage.messageBytes[0], &eventMessage);
 8027a32:	78fb      	ldrb	r3, [r7, #3]
 8027a34:	463a      	mov	r2, r7
 8027a36:	4611      	mov	r1, r2
 8027a38:	4618      	mov	r0, r3
 8027a3a:	f000 f803 	bl	8027a44 <g_redrawHandler>
		if (gos_messageRx(selector, &eventMessage, GOS_MESSAGE_ENDLESS_TMO) == GOS_SUCCESS)
 8027a3e:	e7ed      	b.n	8027a1c <g_task+0x28>
 8027a40:	08049c06 	.word	0x08049c06

08027a44 <g_redrawHandler>:
		}
	}
}

GOS_STATIC void_t g_redrawHandler (g_windowEvent_t event, gos_message_t* pEventMessage)
{
 8027a44:	b590      	push	{r4, r7, lr}
 8027a46:	b089      	sub	sp, #36	; 0x24
 8027a48:	af02      	add	r7, sp, #8
 8027a4a:	4603      	mov	r3, r0
 8027a4c:	6039      	str	r1, [r7, #0]
 8027a4e:	71fb      	strb	r3, [r7, #7]
	u16_t windowIndex = 0u;
 8027a50:	2300      	movs	r3, #0
 8027a52:	82fb      	strh	r3, [r7, #22]
	u8_t idx, zIndex;
	bool_t breakLoop = GOS_FALSE;
 8027a54:	2349      	movs	r3, #73	; 0x49
 8027a56:	74fb      	strb	r3, [r7, #19]

	switch (event)
 8027a58:	79fb      	ldrb	r3, [r7, #7]
 8027a5a:	2b02      	cmp	r3, #2
 8027a5c:	d046      	beq.n	8027aec <g_redrawHandler+0xa8>
 8027a5e:	2b02      	cmp	r3, #2
 8027a60:	f300 80bf 	bgt.w	8027be2 <g_redrawHandler+0x19e>
 8027a64:	2b00      	cmp	r3, #0
 8027a66:	d003      	beq.n	8027a70 <g_redrawHandler+0x2c>
 8027a68:	2b01      	cmp	r3, #1
 8027a6a:	f000 808b 	beq.w	8027b84 <g_redrawHandler+0x140>
			}
		}
		break;
	}
	}
}
 8027a6e:	e0b8      	b.n	8027be2 <g_redrawHandler+0x19e>
		zIndex = numOfWindows - 1;
 8027a70:	4b5e      	ldr	r3, [pc, #376]	; (8027bec <g_redrawHandler+0x1a8>)
 8027a72:	781b      	ldrb	r3, [r3, #0]
 8027a74:	3b01      	subs	r3, #1
 8027a76:	753b      	strb	r3, [r7, #20]
		for (idx = 0u; idx < numOfWindows; idx++)
 8027a78:	2300      	movs	r3, #0
 8027a7a:	757b      	strb	r3, [r7, #21]
 8027a7c:	e030      	b.n	8027ae0 <g_redrawHandler+0x9c>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8027a7e:	2300      	movs	r3, #0
 8027a80:	82fb      	strh	r3, [r7, #22]
 8027a82:	e020      	b.n	8027ac6 <g_redrawHandler+0x82>
				if (pWindows[windowIndex] == NULL)
 8027a84:	8afb      	ldrh	r3, [r7, #22]
 8027a86:	4a5a      	ldr	r2, [pc, #360]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027a8c:	2b00      	cmp	r3, #0
 8027a8e:	d01e      	beq.n	8027ace <g_redrawHandler+0x8a>
					if (pWindows[windowIndex]->zIndex == zIndex)
 8027a90:	8afb      	ldrh	r3, [r7, #22]
 8027a92:	4a57      	ldr	r2, [pc, #348]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027a98:	891a      	ldrh	r2, [r3, #8]
 8027a9a:	7d3b      	ldrb	r3, [r7, #20]
 8027a9c:	b29b      	uxth	r3, r3
 8027a9e:	429a      	cmp	r2, r3
 8027aa0:	d10e      	bne.n	8027ac0 <g_redrawHandler+0x7c>
						if (pWindows[windowIndex]->isVisible == GOS_TRUE)
 8027aa2:	8afb      	ldrh	r3, [r7, #22]
 8027aa4:	4a52      	ldr	r2, [pc, #328]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027aaa:	7b5b      	ldrb	r3, [r3, #13]
 8027aac:	2b36      	cmp	r3, #54	; 0x36
 8027aae:	d110      	bne.n	8027ad2 <g_redrawHandler+0x8e>
							g_windowDraw(pWindows[windowIndex]);
 8027ab0:	8afb      	ldrh	r3, [r7, #22]
 8027ab2:	4a4f      	ldr	r2, [pc, #316]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027ab8:	4618      	mov	r0, r3
 8027aba:	f000 f9d1 	bl	8027e60 <g_windowDraw>
						break;
 8027abe:	e008      	b.n	8027ad2 <g_redrawHandler+0x8e>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8027ac0:	8afb      	ldrh	r3, [r7, #22]
 8027ac2:	3301      	adds	r3, #1
 8027ac4:	82fb      	strh	r3, [r7, #22]
 8027ac6:	8afb      	ldrh	r3, [r7, #22]
 8027ac8:	2b07      	cmp	r3, #7
 8027aca:	d9db      	bls.n	8027a84 <g_redrawHandler+0x40>
 8027acc:	e002      	b.n	8027ad4 <g_redrawHandler+0x90>
					break;
 8027ace:	bf00      	nop
 8027ad0:	e000      	b.n	8027ad4 <g_redrawHandler+0x90>
						break;
 8027ad2:	bf00      	nop
			zIndex--;
 8027ad4:	7d3b      	ldrb	r3, [r7, #20]
 8027ad6:	3b01      	subs	r3, #1
 8027ad8:	753b      	strb	r3, [r7, #20]
		for (idx = 0u; idx < numOfWindows; idx++)
 8027ada:	7d7b      	ldrb	r3, [r7, #21]
 8027adc:	3301      	adds	r3, #1
 8027ade:	757b      	strb	r3, [r7, #21]
 8027ae0:	4b42      	ldr	r3, [pc, #264]	; (8027bec <g_redrawHandler+0x1a8>)
 8027ae2:	781b      	ldrb	r3, [r3, #0]
 8027ae4:	7d7a      	ldrb	r2, [r7, #21]
 8027ae6:	429a      	cmp	r2, r3
 8027ae8:	d3c9      	bcc.n	8027a7e <g_redrawHandler+0x3a>
		break;
 8027aea:	e07a      	b.n	8027be2 <g_redrawHandler+0x19e>
		memcpy((void_t*)&pWindow, (void_t*)&pEventMessage->messageBytes[1], sizeof(pWindow));
 8027aec:	683b      	ldr	r3, [r7, #0]
 8027aee:	3304      	adds	r3, #4
 8027af0:	681b      	ldr	r3, [r3, #0]
 8027af2:	60fb      	str	r3, [r7, #12]
		GOS_NOP;
 8027af4:	bf00      	nop
		zIndex = numOfWindows - 1;
 8027af6:	4b3d      	ldr	r3, [pc, #244]	; (8027bec <g_redrawHandler+0x1a8>)
 8027af8:	781b      	ldrb	r3, [r3, #0]
 8027afa:	3b01      	subs	r3, #1
 8027afc:	753b      	strb	r3, [r7, #20]
		for (idx = 0u; idx < numOfWindows; idx++)
 8027afe:	2300      	movs	r3, #0
 8027b00:	757b      	strb	r3, [r7, #21]
 8027b02:	e039      	b.n	8027b78 <g_redrawHandler+0x134>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8027b04:	2300      	movs	r3, #0
 8027b06:	82fb      	strh	r3, [r7, #22]
 8027b08:	e029      	b.n	8027b5e <g_redrawHandler+0x11a>
				if (pWindows[windowIndex] == NULL)
 8027b0a:	8afb      	ldrh	r3, [r7, #22]
 8027b0c:	4a38      	ldr	r2, [pc, #224]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027b12:	2b00      	cmp	r3, #0
 8027b14:	d027      	beq.n	8027b66 <g_redrawHandler+0x122>
					if (pWindows[windowIndex]->zIndex == zIndex)
 8027b16:	8afb      	ldrh	r3, [r7, #22]
 8027b18:	4a35      	ldr	r2, [pc, #212]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027b1e:	891a      	ldrh	r2, [r3, #8]
 8027b20:	7d3b      	ldrb	r3, [r7, #20]
 8027b22:	b29b      	uxth	r3, r3
 8027b24:	429a      	cmp	r2, r3
 8027b26:	d117      	bne.n	8027b58 <g_redrawHandler+0x114>
						if (pWindows[windowIndex]->isVisible == GOS_TRUE)
 8027b28:	8afb      	ldrh	r3, [r7, #22]
 8027b2a:	4a31      	ldr	r2, [pc, #196]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027b30:	7b5b      	ldrb	r3, [r3, #13]
 8027b32:	2b36      	cmp	r3, #54	; 0x36
 8027b34:	d119      	bne.n	8027b6a <g_redrawHandler+0x126>
							g_windowRefreshArea(pWindows[windowIndex], pWindow->xTop, pWindow->yTop, pWindow->width, pWindow->height);
 8027b36:	8afb      	ldrh	r3, [r7, #22]
 8027b38:	4a2d      	ldr	r2, [pc, #180]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027b3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8027b3e:	68fb      	ldr	r3, [r7, #12]
 8027b40:	8819      	ldrh	r1, [r3, #0]
 8027b42:	68fb      	ldr	r3, [r7, #12]
 8027b44:	885a      	ldrh	r2, [r3, #2]
 8027b46:	68fb      	ldr	r3, [r7, #12]
 8027b48:	889c      	ldrh	r4, [r3, #4]
 8027b4a:	68fb      	ldr	r3, [r7, #12]
 8027b4c:	88db      	ldrh	r3, [r3, #6]
 8027b4e:	9300      	str	r3, [sp, #0]
 8027b50:	4623      	mov	r3, r4
 8027b52:	f000 fa17 	bl	8027f84 <g_windowRefreshArea>
						break;
 8027b56:	e008      	b.n	8027b6a <g_redrawHandler+0x126>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8027b58:	8afb      	ldrh	r3, [r7, #22]
 8027b5a:	3301      	adds	r3, #1
 8027b5c:	82fb      	strh	r3, [r7, #22]
 8027b5e:	8afb      	ldrh	r3, [r7, #22]
 8027b60:	2b07      	cmp	r3, #7
 8027b62:	d9d2      	bls.n	8027b0a <g_redrawHandler+0xc6>
 8027b64:	e002      	b.n	8027b6c <g_redrawHandler+0x128>
					break;
 8027b66:	bf00      	nop
 8027b68:	e000      	b.n	8027b6c <g_redrawHandler+0x128>
						break;
 8027b6a:	bf00      	nop
			zIndex--;
 8027b6c:	7d3b      	ldrb	r3, [r7, #20]
 8027b6e:	3b01      	subs	r3, #1
 8027b70:	753b      	strb	r3, [r7, #20]
		for (idx = 0u; idx < numOfWindows; idx++)
 8027b72:	7d7b      	ldrb	r3, [r7, #21]
 8027b74:	3301      	adds	r3, #1
 8027b76:	757b      	strb	r3, [r7, #21]
 8027b78:	4b1c      	ldr	r3, [pc, #112]	; (8027bec <g_redrawHandler+0x1a8>)
 8027b7a:	781b      	ldrb	r3, [r3, #0]
 8027b7c:	7d7a      	ldrb	r2, [r7, #21]
 8027b7e:	429a      	cmp	r2, r3
 8027b80:	d3c0      	bcc.n	8027b04 <g_redrawHandler+0xc0>
		break;
 8027b82:	e02e      	b.n	8027be2 <g_redrawHandler+0x19e>
		zIndex = 0;
 8027b84:	2300      	movs	r3, #0
 8027b86:	753b      	strb	r3, [r7, #20]
		while (zIndex < numOfWindows && breakLoop == GOS_FALSE)
 8027b88:	e022      	b.n	8027bd0 <g_redrawHandler+0x18c>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8027b8a:	2300      	movs	r3, #0
 8027b8c:	82fb      	strh	r3, [r7, #22]
 8027b8e:	e01c      	b.n	8027bca <g_redrawHandler+0x186>
				if (pWindows[windowIndex]->zIndex == zIndex &&
 8027b90:	8afb      	ldrh	r3, [r7, #22]
 8027b92:	4a17      	ldr	r2, [pc, #92]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027b98:	891a      	ldrh	r2, [r3, #8]
 8027b9a:	7d3b      	ldrb	r3, [r7, #20]
 8027b9c:	b29b      	uxth	r3, r3
 8027b9e:	429a      	cmp	r2, r3
 8027ba0:	d110      	bne.n	8027bc4 <g_redrawHandler+0x180>
					pWindows[windowIndex]->isVisible == GOS_TRUE)
 8027ba2:	8afb      	ldrh	r3, [r7, #22]
 8027ba4:	4a12      	ldr	r2, [pc, #72]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027baa:	7b5b      	ldrb	r3, [r3, #13]
				if (pWindows[windowIndex]->zIndex == zIndex &&
 8027bac:	2b36      	cmp	r3, #54	; 0x36
 8027bae:	d109      	bne.n	8027bc4 <g_redrawHandler+0x180>
					g_windowDraw(pWindows[windowIndex]);
 8027bb0:	8afb      	ldrh	r3, [r7, #22]
 8027bb2:	4a0f      	ldr	r2, [pc, #60]	; (8027bf0 <g_redrawHandler+0x1ac>)
 8027bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027bb8:	4618      	mov	r0, r3
 8027bba:	f000 f951 	bl	8027e60 <g_windowDraw>
					breakLoop = GOS_TRUE;
 8027bbe:	2336      	movs	r3, #54	; 0x36
 8027bc0:	74fb      	strb	r3, [r7, #19]
					break;
 8027bc2:	e005      	b.n	8027bd0 <g_redrawHandler+0x18c>
			for (windowIndex = 0u; windowIndex < G_DRIVER_WINDOW_MAX_NUM; windowIndex++)
 8027bc4:	8afb      	ldrh	r3, [r7, #22]
 8027bc6:	3301      	adds	r3, #1
 8027bc8:	82fb      	strh	r3, [r7, #22]
 8027bca:	8afb      	ldrh	r3, [r7, #22]
 8027bcc:	2b07      	cmp	r3, #7
 8027bce:	d9df      	bls.n	8027b90 <g_redrawHandler+0x14c>
		while (zIndex < numOfWindows && breakLoop == GOS_FALSE)
 8027bd0:	4b06      	ldr	r3, [pc, #24]	; (8027bec <g_redrawHandler+0x1a8>)
 8027bd2:	781b      	ldrb	r3, [r3, #0]
 8027bd4:	7d3a      	ldrb	r2, [r7, #20]
 8027bd6:	429a      	cmp	r2, r3
 8027bd8:	d202      	bcs.n	8027be0 <g_redrawHandler+0x19c>
 8027bda:	7cfb      	ldrb	r3, [r7, #19]
 8027bdc:	2b49      	cmp	r3, #73	; 0x49
 8027bde:	d0d4      	beq.n	8027b8a <g_redrawHandler+0x146>
		break;
 8027be0:	bf00      	nop
}
 8027be2:	bf00      	nop
 8027be4:	371c      	adds	r7, #28
 8027be6:	46bd      	mov	sp, r7
 8027be8:	bd90      	pop	{r4, r7, pc}
 8027bea:	bf00      	nop
 8027bec:	20006044 	.word	0x20006044
 8027bf0:	20006024 	.word	0x20006024

08027bf4 <g_labelDraw>:
#define LABEL_DRAW_MUTEX_TMO_MS ( 3000u )

GOS_EXTERN gos_mutex_t g_mutex;

void_t g_labelDraw (g_label_t* pLabel)
{
 8027bf4:	b580      	push	{r7, lr}
 8027bf6:	b088      	sub	sp, #32
 8027bf8:	af00      	add	r7, sp, #0
 8027bfa:	6078      	str	r0, [r7, #4]
	//if (gos_mutexLock(&g_mutex, LABEL_DRAW_MUTEX_TMO_MS) == GOS_SUCCESS)
	{
		u16_t textIndex = 0u;
 8027bfc:	2300      	movs	r3, #0
 8027bfe:	83fb      	strh	r3, [r7, #30]
		u16_t lblWidth  = 0u;
 8027c00:	2300      	movs	r3, #0
 8027c02:	83bb      	strh	r3, [r7, #28]
		u16_t lblHeight = 0u;
 8027c04:	2300      	movs	r3, #0
 8027c06:	837b      	strh	r3, [r7, #26]

		if (pLabel->width == LABEL_AUTO_WIDTH)
 8027c08:	687b      	ldr	r3, [r7, #4]
 8027c0a:	889b      	ldrh	r3, [r3, #4]
 8027c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027c10:	4293      	cmp	r3, r2
 8027c12:	d10f      	bne.n	8027c34 <g_labelDraw+0x40>
		{
			lblWidth = strlen(pLabel->text) * ili9341_font_7x10.width + 6;
 8027c14:	687b      	ldr	r3, [r7, #4]
 8027c16:	330e      	adds	r3, #14
 8027c18:	4618      	mov	r0, r3
 8027c1a:	f7f8 fb59 	bl	80202d0 <strlen>
 8027c1e:	4603      	mov	r3, r0
 8027c20:	b29a      	uxth	r2, r3
 8027c22:	4b31      	ldr	r3, [pc, #196]	; (8027ce8 <g_labelDraw+0xf4>)
 8027c24:	781b      	ldrb	r3, [r3, #0]
 8027c26:	b29b      	uxth	r3, r3
 8027c28:	fb12 f303 	smulbb	r3, r2, r3
 8027c2c:	b29b      	uxth	r3, r3
 8027c2e:	3306      	adds	r3, #6
 8027c30:	83bb      	strh	r3, [r7, #28]
 8027c32:	e002      	b.n	8027c3a <g_labelDraw+0x46>
		}
		else
		{
			lblWidth = pLabel->width;
 8027c34:	687b      	ldr	r3, [r7, #4]
 8027c36:	889b      	ldrh	r3, [r3, #4]
 8027c38:	83bb      	strh	r3, [r7, #28]
		}

		if (pLabel->height == LABEL_AUTO_HEIGHT)
 8027c3a:	687b      	ldr	r3, [r7, #4]
 8027c3c:	88db      	ldrh	r3, [r3, #6]
 8027c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027c42:	4293      	cmp	r3, r2
 8027c44:	d105      	bne.n	8027c52 <g_labelDraw+0x5e>
		{
			lblHeight = ili9341_font_7x10.height + 4;
 8027c46:	4b28      	ldr	r3, [pc, #160]	; (8027ce8 <g_labelDraw+0xf4>)
 8027c48:	785b      	ldrb	r3, [r3, #1]
 8027c4a:	b29b      	uxth	r3, r3
 8027c4c:	3304      	adds	r3, #4
 8027c4e:	837b      	strh	r3, [r7, #26]
 8027c50:	e002      	b.n	8027c58 <g_labelDraw+0x64>
		}
		else
		{
			lblHeight = pLabel->height;
 8027c52:	687b      	ldr	r3, [r7, #4]
 8027c54:	88db      	ldrh	r3, [r3, #6]
 8027c56:	837b      	strh	r3, [r7, #26]
		}

		ili9341_text_attr_t attr =
 8027c58:	4b23      	ldr	r3, [pc, #140]	; (8027ce8 <g_labelDraw+0xf4>)
 8027c5a:	60fb      	str	r3, [r7, #12]
		{
			.bg_color = pLabel->backColor,
			.fg_color = pLabel->foreColor,
 8027c5c:	687b      	ldr	r3, [r7, #4]
 8027c5e:	891b      	ldrh	r3, [r3, #8]
		ili9341_text_attr_t attr =
 8027c60:	823b      	strh	r3, [r7, #16]
			.bg_color = pLabel->backColor,
 8027c62:	687b      	ldr	r3, [r7, #4]
 8027c64:	895b      	ldrh	r3, [r3, #10]
		ili9341_text_attr_t attr =
 8027c66:	827b      	strh	r3, [r7, #18]
			.font = &ili9341_font_7x10,
			.origin_x = pLabel->xTop + 3,
 8027c68:	687b      	ldr	r3, [r7, #4]
 8027c6a:	881b      	ldrh	r3, [r3, #0]
 8027c6c:	3303      	adds	r3, #3
 8027c6e:	b29b      	uxth	r3, r3
		ili9341_text_attr_t attr =
 8027c70:	82bb      	strh	r3, [r7, #20]
			.origin_y = pLabel->yTop + ((lblHeight - ili9341_font_7x10.height) / 2)
 8027c72:	687b      	ldr	r3, [r7, #4]
 8027c74:	885a      	ldrh	r2, [r3, #2]
 8027c76:	8b7b      	ldrh	r3, [r7, #26]
 8027c78:	491b      	ldr	r1, [pc, #108]	; (8027ce8 <g_labelDraw+0xf4>)
 8027c7a:	7849      	ldrb	r1, [r1, #1]
 8027c7c:	1a5b      	subs	r3, r3, r1
 8027c7e:	0fd9      	lsrs	r1, r3, #31
 8027c80:	440b      	add	r3, r1
 8027c82:	105b      	asrs	r3, r3, #1
 8027c84:	b29b      	uxth	r3, r3
 8027c86:	4413      	add	r3, r2
 8027c88:	b29b      	uxth	r3, r3
		ili9341_text_attr_t attr =
 8027c8a:	82fb      	strh	r3, [r7, #22]
		};

		while ((attr.origin_x + attr.font->width + 1) < (pLabel->xTop + lblWidth) &&
 8027c8c:	e012      	b.n	8027cb4 <g_labelDraw+0xc0>
				textIndex < LABEL_TEXT_MAX_LENGTH &&
				pLabel->text[textIndex] != '\0')
		{
			ili9341_draw_char(attr, pLabel->text[textIndex++]);
 8027c8e:	8bfb      	ldrh	r3, [r7, #30]
 8027c90:	1c5a      	adds	r2, r3, #1
 8027c92:	83fa      	strh	r2, [r7, #30]
 8027c94:	461a      	mov	r2, r3
 8027c96:	687b      	ldr	r3, [r7, #4]
 8027c98:	4413      	add	r3, r2
 8027c9a:	7b9b      	ldrb	r3, [r3, #14]
 8027c9c:	f107 020c 	add.w	r2, r7, #12
 8027ca0:	ca07      	ldmia	r2, {r0, r1, r2}
 8027ca2:	f7fe f863 	bl	8025d6c <ili9341_draw_char>
			attr.origin_x += attr.font->width;
 8027ca6:	8aba      	ldrh	r2, [r7, #20]
 8027ca8:	68fb      	ldr	r3, [r7, #12]
 8027caa:	781b      	ldrb	r3, [r3, #0]
 8027cac:	b29b      	uxth	r3, r3
 8027cae:	4413      	add	r3, r2
 8027cb0:	b29b      	uxth	r3, r3
 8027cb2:	82bb      	strh	r3, [r7, #20]
		while ((attr.origin_x + attr.font->width + 1) < (pLabel->xTop + lblWidth) &&
 8027cb4:	8abb      	ldrh	r3, [r7, #20]
 8027cb6:	461a      	mov	r2, r3
 8027cb8:	68fb      	ldr	r3, [r7, #12]
 8027cba:	781b      	ldrb	r3, [r3, #0]
 8027cbc:	4413      	add	r3, r2
 8027cbe:	1c5a      	adds	r2, r3, #1
 8027cc0:	687b      	ldr	r3, [r7, #4]
 8027cc2:	881b      	ldrh	r3, [r3, #0]
 8027cc4:	4619      	mov	r1, r3
 8027cc6:	8bbb      	ldrh	r3, [r7, #28]
 8027cc8:	440b      	add	r3, r1
				textIndex < LABEL_TEXT_MAX_LENGTH &&
 8027cca:	429a      	cmp	r2, r3
 8027ccc:	da08      	bge.n	8027ce0 <g_labelDraw+0xec>
		while ((attr.origin_x + attr.font->width + 1) < (pLabel->xTop + lblWidth) &&
 8027cce:	8bfb      	ldrh	r3, [r7, #30]
 8027cd0:	2b27      	cmp	r3, #39	; 0x27
 8027cd2:	d805      	bhi.n	8027ce0 <g_labelDraw+0xec>
				pLabel->text[textIndex] != '\0')
 8027cd4:	8bfb      	ldrh	r3, [r7, #30]
 8027cd6:	687a      	ldr	r2, [r7, #4]
 8027cd8:	4413      	add	r3, r2
 8027cda:	7b9b      	ldrb	r3, [r3, #14]
				textIndex < LABEL_TEXT_MAX_LENGTH &&
 8027cdc:	2b00      	cmp	r3, #0
 8027cde:	d1d6      	bne.n	8027c8e <g_labelDraw+0x9a>
		}
	}
	//(void_t) gos_mutexUnlock(&g_mutex);
}
 8027ce0:	bf00      	nop
 8027ce2:	3720      	adds	r7, #32
 8027ce4:	46bd      	mov	sp, r7
 8027ce6:	bd80      	pop	{r7, pc}
 8027ce8:	08049498 	.word	0x08049498

08027cec <g_labelSetText>:

void_t g_labelSetText (g_label_t* pLabel, char_t* text)
{
 8027cec:	b580      	push	{r7, lr}
 8027cee:	b082      	sub	sp, #8
 8027cf0:	af00      	add	r7, sp, #0
 8027cf2:	6078      	str	r0, [r7, #4]
 8027cf4:	6039      	str	r1, [r7, #0]
	if (pLabel != NULL && text != NULL && pLabel->text != NULL)
 8027cf6:	687b      	ldr	r3, [r7, #4]
 8027cf8:	2b00      	cmp	r3, #0
 8027cfa:	d02e      	beq.n	8027d5a <g_labelSetText+0x6e>
 8027cfc:	683b      	ldr	r3, [r7, #0]
 8027cfe:	2b00      	cmp	r3, #0
 8027d00:	d02b      	beq.n	8027d5a <g_labelSetText+0x6e>
 8027d02:	687b      	ldr	r3, [r7, #4]
 8027d04:	330e      	adds	r3, #14
 8027d06:	2b00      	cmp	r3, #0
 8027d08:	d027      	beq.n	8027d5a <g_labelSetText+0x6e>
	{
		if (strcmp(text, pLabel->text) != 0)
 8027d0a:	687b      	ldr	r3, [r7, #4]
 8027d0c:	330e      	adds	r3, #14
 8027d0e:	4619      	mov	r1, r3
 8027d10:	6838      	ldr	r0, [r7, #0]
 8027d12:	f7f8 fa7d 	bl	8020210 <strcmp>
 8027d16:	4603      	mov	r3, r0
 8027d18:	2b00      	cmp	r3, #0
 8027d1a:	d01e      	beq.n	8027d5a <g_labelSetText+0x6e>
		{
			if (strlen(text) < LABEL_TEXT_MAX_LENGTH)
 8027d1c:	6838      	ldr	r0, [r7, #0]
 8027d1e:	f7f8 fad7 	bl	80202d0 <strlen>
 8027d22:	4603      	mov	r3, r0
 8027d24:	2b27      	cmp	r3, #39	; 0x27
 8027d26:	d818      	bhi.n	8027d5a <g_labelSetText+0x6e>
			{
				strcpy(pLabel->text, text);
 8027d28:	687b      	ldr	r3, [r7, #4]
 8027d2a:	330e      	adds	r3, #14
 8027d2c:	6839      	ldr	r1, [r7, #0]
 8027d2e:	4618      	mov	r0, r3
 8027d30:	f01a fffb 	bl	8042d2a <strcpy>
#include "g_window.h"
				if (((g_window_t*)(pLabel->pOwner))->zIndex == 0u)
 8027d34:	687b      	ldr	r3, [r7, #4]
 8027d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027d38:	891b      	ldrh	r3, [r3, #8]
 8027d3a:	2b00      	cmp	r3, #0
 8027d3c:	d10d      	bne.n	8027d5a <g_labelSetText+0x6e>
				{
					if (gos_mutexLock(&g_mutex, LABEL_DRAW_MUTEX_TMO_MS) == GOS_SUCCESS)
 8027d3e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8027d42:	4808      	ldr	r0, [pc, #32]	; (8027d64 <g_labelSetText+0x78>)
 8027d44:	f016 faf8 	bl	803e338 <gos_mutexLock>
 8027d48:	4603      	mov	r3, r0
 8027d4a:	2b55      	cmp	r3, #85	; 0x55
 8027d4c:	d102      	bne.n	8027d54 <g_labelSetText+0x68>
					{
						g_labelDraw(pLabel);
 8027d4e:	6878      	ldr	r0, [r7, #4]
 8027d50:	f7ff ff50 	bl	8027bf4 <g_labelDraw>
					}
					(void_t) gos_mutexUnlock(&g_mutex);
 8027d54:	4803      	ldr	r0, [pc, #12]	; (8027d64 <g_labelSetText+0x78>)
 8027d56:	f016 fbf5 	bl	803e544 <gos_mutexUnlock>
				}
			}
		}
	}
}
 8027d5a:	bf00      	nop
 8027d5c:	3708      	adds	r7, #8
 8027d5e:	46bd      	mov	sp, r7
 8027d60:	bd80      	pop	{r7, pc}
 8027d62:	bf00      	nop
 8027d64:	20006020 	.word	0x20006020

08027d68 <g_windowInit>:

GOS_STATIC void_t g_windowCloseButtonPressedCallback (g_button_t* pButton);
GOS_STATIC void_t g_windowCloseButtonReleasedCallback (g_button_t* pButton);

void_t g_windowInit (g_window_t* pWindow, g_button_t* pCloseButton, g_label_t* pTitleLabel)
{
 8027d68:	b580      	push	{r7, lr}
 8027d6a:	b084      	sub	sp, #16
 8027d6c:	af00      	add	r7, sp, #0
 8027d6e:	60f8      	str	r0, [r7, #12]
 8027d70:	60b9      	str	r1, [r7, #8]
 8027d72:	607a      	str	r2, [r7, #4]
	pCloseButton->backColor = ILI9341_RED;
 8027d74:	4b34      	ldr	r3, [pc, #208]	; (8027e48 <g_windowInit+0xe0>)
 8027d76:	881a      	ldrh	r2, [r3, #0]
 8027d78:	68bb      	ldr	r3, [r7, #8]
 8027d7a:	815a      	strh	r2, [r3, #10]
	pCloseButton->foreColor = ILI9341_WHITE;
 8027d7c:	4b33      	ldr	r3, [pc, #204]	; (8027e4c <g_windowInit+0xe4>)
 8027d7e:	881a      	ldrh	r2, [r3, #0]
 8027d80:	68bb      	ldr	r3, [r7, #8]
 8027d82:	811a      	strh	r2, [r3, #8]
	pCloseButton->xTop = pWindow->xTop + pWindow->width - CLOSE_BUTTON_WIDTH;
 8027d84:	68fb      	ldr	r3, [r7, #12]
 8027d86:	881a      	ldrh	r2, [r3, #0]
 8027d88:	68fb      	ldr	r3, [r7, #12]
 8027d8a:	889b      	ldrh	r3, [r3, #4]
 8027d8c:	4413      	add	r3, r2
 8027d8e:	b29b      	uxth	r3, r3
 8027d90:	3b14      	subs	r3, #20
 8027d92:	b29a      	uxth	r2, r3
 8027d94:	68bb      	ldr	r3, [r7, #8]
 8027d96:	801a      	strh	r2, [r3, #0]
	pCloseButton->yTop = pWindow->yTop;
 8027d98:	68fb      	ldr	r3, [r7, #12]
 8027d9a:	885a      	ldrh	r2, [r3, #2]
 8027d9c:	68bb      	ldr	r3, [r7, #8]
 8027d9e:	805a      	strh	r2, [r3, #2]
	pCloseButton->height = CLOSE_BUTTON_HEIGHT;
 8027da0:	68bb      	ldr	r3, [r7, #8]
 8027da2:	2214      	movs	r2, #20
 8027da4:	80da      	strh	r2, [r3, #6]
	pCloseButton->width  = CLOSE_BUTTON_WIDTH;
 8027da6:	68bb      	ldr	r3, [r7, #8]
 8027da8:	2214      	movs	r2, #20
 8027daa:	809a      	strh	r2, [r3, #4]
	pCloseButton->pressed = g_windowCloseButtonPressedCallback;
 8027dac:	68bb      	ldr	r3, [r7, #8]
 8027dae:	4a28      	ldr	r2, [pc, #160]	; (8027e50 <g_windowInit+0xe8>)
 8027db0:	631a      	str	r2, [r3, #48]	; 0x30
	pCloseButton->released = g_windowCloseButtonReleasedCallback;
 8027db2:	68bb      	ldr	r3, [r7, #8]
 8027db4:	4a27      	ldr	r2, [pc, #156]	; (8027e54 <g_windowInit+0xec>)
 8027db6:	635a      	str	r2, [r3, #52]	; 0x34
	pCloseButton->tabIndex = 255;
 8027db8:	68bb      	ldr	r3, [r7, #8]
 8027dba:	22ff      	movs	r2, #255	; 0xff
 8027dbc:	821a      	strh	r2, [r3, #16]
	pCloseButton->tabStop = GOS_TRUE;
 8027dbe:	68bb      	ldr	r3, [r7, #8]
 8027dc0:	2236      	movs	r2, #54	; 0x36
 8027dc2:	73da      	strb	r2, [r3, #15]
	pCloseButton->isEnabled = GOS_TRUE;
 8027dc4:	68bb      	ldr	r3, [r7, #8]
 8027dc6:	2236      	movs	r2, #54	; 0x36
 8027dc8:	731a      	strb	r2, [r3, #12]
	pCloseButton->isFocused = GOS_FALSE;
 8027dca:	68bb      	ldr	r3, [r7, #8]
 8027dcc:	2249      	movs	r2, #73	; 0x49
 8027dce:	739a      	strb	r2, [r3, #14]
	pCloseButton->isVisible = GOS_TRUE;
 8027dd0:	68bb      	ldr	r3, [r7, #8]
 8027dd2:	2236      	movs	r2, #54	; 0x36
 8027dd4:	735a      	strb	r2, [r3, #13]
	strcpy(pCloseButton->text, "X");
 8027dd6:	68bb      	ldr	r3, [r7, #8]
 8027dd8:	3312      	adds	r3, #18
 8027dda:	491f      	ldr	r1, [pc, #124]	; (8027e58 <g_windowInit+0xf0>)
 8027ddc:	461a      	mov	r2, r3
 8027dde:	460b      	mov	r3, r1
 8027de0:	881b      	ldrh	r3, [r3, #0]
 8027de2:	8013      	strh	r3, [r2, #0]
	g_windowAddButton(pWindow, pCloseButton);
 8027de4:	68b9      	ldr	r1, [r7, #8]
 8027de6:	68f8      	ldr	r0, [r7, #12]
 8027de8:	f000 f9a6 	bl	8028138 <g_windowAddButton>

	pTitleLabel->foreColor = ILI9341_WHITE;
 8027dec:	4b17      	ldr	r3, [pc, #92]	; (8027e4c <g_windowInit+0xe4>)
 8027dee:	881a      	ldrh	r2, [r3, #0]
 8027df0:	687b      	ldr	r3, [r7, #4]
 8027df2:	811a      	strh	r2, [r3, #8]
	pTitleLabel->backColor = ILI9341_BLUE;
 8027df4:	4b19      	ldr	r3, [pc, #100]	; (8027e5c <g_windowInit+0xf4>)
 8027df6:	881a      	ldrh	r2, [r3, #0]
 8027df8:	687b      	ldr	r3, [r7, #4]
 8027dfa:	815a      	strh	r2, [r3, #10]
	pTitleLabel->xTop = pWindow->xTop + 3;
 8027dfc:	68fb      	ldr	r3, [r7, #12]
 8027dfe:	881b      	ldrh	r3, [r3, #0]
 8027e00:	3303      	adds	r3, #3
 8027e02:	b29a      	uxth	r2, r3
 8027e04:	687b      	ldr	r3, [r7, #4]
 8027e06:	801a      	strh	r2, [r3, #0]
	pTitleLabel->yTop = pWindow->yTop + 3;
 8027e08:	68fb      	ldr	r3, [r7, #12]
 8027e0a:	885b      	ldrh	r3, [r3, #2]
 8027e0c:	3303      	adds	r3, #3
 8027e0e:	b29a      	uxth	r2, r3
 8027e10:	687b      	ldr	r3, [r7, #4]
 8027e12:	805a      	strh	r2, [r3, #2]
	pTitleLabel->height = LABEL_AUTO_HEIGHT;
 8027e14:	687b      	ldr	r3, [r7, #4]
 8027e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027e1a:	80da      	strh	r2, [r3, #6]
	pTitleLabel->width  = LABEL_AUTO_WIDTH;
 8027e1c:	687b      	ldr	r3, [r7, #4]
 8027e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8027e22:	809a      	strh	r2, [r3, #4]
	strcpy(pTitleLabel->text, pWindow->title);
 8027e24:	687b      	ldr	r3, [r7, #4]
 8027e26:	f103 020e 	add.w	r2, r3, #14
 8027e2a:	68fb      	ldr	r3, [r7, #12]
 8027e2c:	330e      	adds	r3, #14
 8027e2e:	4619      	mov	r1, r3
 8027e30:	4610      	mov	r0, r2
 8027e32:	f01a ff7a 	bl	8042d2a <strcpy>
	g_windowAddLabel(pWindow, pTitleLabel);
 8027e36:	6879      	ldr	r1, [r7, #4]
 8027e38:	68f8      	ldr	r0, [r7, #12]
 8027e3a:	f000 f9a3 	bl	8028184 <g_windowAddLabel>
}
 8027e3e:	bf00      	nop
 8027e40:	3710      	adds	r7, #16
 8027e42:	46bd      	mov	sp, r7
 8027e44:	bd80      	pop	{r7, pc}
 8027e46:	bf00      	nop
 8027e48:	08049c0e 	.word	0x08049c0e
 8027e4c:	08049c12 	.word	0x08049c12
 8027e50:	08028241 	.word	0x08028241
 8027e54:	08028255 	.word	0x08028255
 8027e58:	080475cc 	.word	0x080475cc
 8027e5c:	08049c0c 	.word	0x08049c0c

08027e60 <g_windowDraw>:

void_t g_windowDraw (g_window_t* pWindow)
{
 8027e60:	b590      	push	{r4, r7, lr}
 8027e62:	b087      	sub	sp, #28
 8027e64:	af02      	add	r7, sp, #8
 8027e66:	6078      	str	r0, [r7, #4]
	if (gos_mutexLock(&g_mutex, G_MUTEX_TMO_MS) == GOS_SUCCESS)
 8027e68:	f241 3188 	movw	r1, #5000	; 0x1388
 8027e6c:	4842      	ldr	r0, [pc, #264]	; (8027f78 <g_windowDraw+0x118>)
 8027e6e:	f016 fa63 	bl	803e338 <gos_mutexLock>
 8027e72:	4603      	mov	r3, r0
 8027e74:	2b55      	cmp	r3, #85	; 0x55
 8027e76:	d17a      	bne.n	8027f6e <g_windowDraw+0x10e>
	{
		//u16_t textIndex = 0u;
		u8_t controlIndex = 0u;
 8027e78:	2300      	movs	r3, #0
 8027e7a:	73fb      	strb	r3, [r7, #15]

		// Draw header line.
		ili9341_fill_rect(ILI9341_BLUE, pWindow->xTop, pWindow->yTop, pWindow->width, CLOSE_BUTTON_HEIGHT);
 8027e7c:	4b3f      	ldr	r3, [pc, #252]	; (8027f7c <g_windowDraw+0x11c>)
 8027e7e:	8818      	ldrh	r0, [r3, #0]
 8027e80:	687b      	ldr	r3, [r7, #4]
 8027e82:	881b      	ldrh	r3, [r3, #0]
 8027e84:	b219      	sxth	r1, r3
 8027e86:	687b      	ldr	r3, [r7, #4]
 8027e88:	885b      	ldrh	r3, [r3, #2]
 8027e8a:	b21a      	sxth	r2, r3
 8027e8c:	687b      	ldr	r3, [r7, #4]
 8027e8e:	889b      	ldrh	r3, [r3, #4]
 8027e90:	2414      	movs	r4, #20
 8027e92:	9400      	str	r4, [sp, #0]
 8027e94:	f7fd fed0 	bl	8025c38 <ili9341_fill_rect>
		ili9341_draw_rect(ILI9341_BLACK, pWindow->xTop, pWindow->yTop, pWindow->width, CLOSE_BUTTON_HEIGHT);
 8027e98:	4b39      	ldr	r3, [pc, #228]	; (8027f80 <g_windowDraw+0x120>)
 8027e9a:	8818      	ldrh	r0, [r3, #0]
 8027e9c:	687b      	ldr	r3, [r7, #4]
 8027e9e:	881b      	ldrh	r3, [r3, #0]
 8027ea0:	b219      	sxth	r1, r3
 8027ea2:	687b      	ldr	r3, [r7, #4]
 8027ea4:	885b      	ldrh	r3, [r3, #2]
 8027ea6:	b21a      	sxth	r2, r3
 8027ea8:	687b      	ldr	r3, [r7, #4]
 8027eaa:	889b      	ldrh	r3, [r3, #4]
 8027eac:	2414      	movs	r4, #20
 8027eae:	9400      	str	r4, [sp, #0]
 8027eb0:	f7fd fe5a 	bl	8025b68 <ili9341_draw_rect>

		// Draw window frame.
		ili9341_fill_rect(pWindow->backColor, pWindow->xTop, pWindow->yTop + CLOSE_BUTTON_HEIGHT, pWindow->width, pWindow->height);
 8027eb4:	687b      	ldr	r3, [r7, #4]
 8027eb6:	8958      	ldrh	r0, [r3, #10]
 8027eb8:	687b      	ldr	r3, [r7, #4]
 8027eba:	881b      	ldrh	r3, [r3, #0]
 8027ebc:	b219      	sxth	r1, r3
 8027ebe:	687b      	ldr	r3, [r7, #4]
 8027ec0:	885b      	ldrh	r3, [r3, #2]
 8027ec2:	3314      	adds	r3, #20
 8027ec4:	b29b      	uxth	r3, r3
 8027ec6:	b21a      	sxth	r2, r3
 8027ec8:	687b      	ldr	r3, [r7, #4]
 8027eca:	889c      	ldrh	r4, [r3, #4]
 8027ecc:	687b      	ldr	r3, [r7, #4]
 8027ece:	88db      	ldrh	r3, [r3, #6]
 8027ed0:	9300      	str	r3, [sp, #0]
 8027ed2:	4623      	mov	r3, r4
 8027ed4:	f7fd feb0 	bl	8025c38 <ili9341_fill_rect>
		ili9341_draw_rect(ILI9341_BLACK, pWindow->xTop, pWindow->yTop + CLOSE_BUTTON_HEIGHT, pWindow->width, pWindow->height);
 8027ed8:	4b29      	ldr	r3, [pc, #164]	; (8027f80 <g_windowDraw+0x120>)
 8027eda:	8818      	ldrh	r0, [r3, #0]
 8027edc:	687b      	ldr	r3, [r7, #4]
 8027ede:	881b      	ldrh	r3, [r3, #0]
 8027ee0:	b219      	sxth	r1, r3
 8027ee2:	687b      	ldr	r3, [r7, #4]
 8027ee4:	885b      	ldrh	r3, [r3, #2]
 8027ee6:	3314      	adds	r3, #20
 8027ee8:	b29b      	uxth	r3, r3
 8027eea:	b21a      	sxth	r2, r3
 8027eec:	687b      	ldr	r3, [r7, #4]
 8027eee:	889c      	ldrh	r4, [r3, #4]
 8027ef0:	687b      	ldr	r3, [r7, #4]
 8027ef2:	88db      	ldrh	r3, [r3, #6]
 8027ef4:	9300      	str	r3, [sp, #0]
 8027ef6:	4623      	mov	r3, r4
 8027ef8:	f7fd fe36 	bl	8025b68 <ili9341_draw_rect>

		// Draw buttons.
		for (controlIndex = 0u; controlIndex < WINDOW_BUTTONS_MAX_NUMBER; controlIndex++)
 8027efc:	2300      	movs	r3, #0
 8027efe:	73fb      	strb	r3, [r7, #15]
 8027f00:	e011      	b.n	8027f26 <g_windowDraw+0xc6>
		{
			if (pWindow->pButtons[controlIndex] != NULL)
 8027f02:	7bfa      	ldrb	r2, [r7, #15]
 8027f04:	687b      	ldr	r3, [r7, #4]
 8027f06:	320a      	adds	r2, #10
 8027f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027f0c:	2b00      	cmp	r3, #0
 8027f0e:	d00e      	beq.n	8027f2e <g_windowDraw+0xce>
			{
				g_buttonDraw(pWindow->pButtons[controlIndex]);
 8027f10:	7bfa      	ldrb	r2, [r7, #15]
 8027f12:	687b      	ldr	r3, [r7, #4]
 8027f14:	320a      	adds	r2, #10
 8027f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027f1a:	4618      	mov	r0, r3
 8027f1c:	f7ff fb06 	bl	802752c <g_buttonDraw>
		for (controlIndex = 0u; controlIndex < WINDOW_BUTTONS_MAX_NUMBER; controlIndex++)
 8027f20:	7bfb      	ldrb	r3, [r7, #15]
 8027f22:	3301      	adds	r3, #1
 8027f24:	73fb      	strb	r3, [r7, #15]
 8027f26:	7bfb      	ldrb	r3, [r7, #15]
 8027f28:	2b04      	cmp	r3, #4
 8027f2a:	d9ea      	bls.n	8027f02 <g_windowDraw+0xa2>
 8027f2c:	e000      	b.n	8027f30 <g_windowDraw+0xd0>
			}
			else
			{
				break;
 8027f2e:	bf00      	nop
			}
		}

		// Draw labels.
		for (controlIndex = 0u; controlIndex < WINDOW_LABELS_MAX_NUMBER; controlIndex++)
 8027f30:	2300      	movs	r3, #0
 8027f32:	73fb      	strb	r3, [r7, #15]
 8027f34:	e013      	b.n	8027f5e <g_windowDraw+0xfe>
		{
			if (pWindow->pLabels[controlIndex] != NULL)
 8027f36:	7bfb      	ldrb	r3, [r7, #15]
 8027f38:	687a      	ldr	r2, [r7, #4]
 8027f3a:	330e      	adds	r3, #14
 8027f3c:	009b      	lsls	r3, r3, #2
 8027f3e:	4413      	add	r3, r2
 8027f40:	685b      	ldr	r3, [r3, #4]
 8027f42:	2b00      	cmp	r3, #0
 8027f44:	d00f      	beq.n	8027f66 <g_windowDraw+0x106>
			{
				g_labelDraw(pWindow->pLabels[controlIndex]);
 8027f46:	7bfb      	ldrb	r3, [r7, #15]
 8027f48:	687a      	ldr	r2, [r7, #4]
 8027f4a:	330e      	adds	r3, #14
 8027f4c:	009b      	lsls	r3, r3, #2
 8027f4e:	4413      	add	r3, r2
 8027f50:	685b      	ldr	r3, [r3, #4]
 8027f52:	4618      	mov	r0, r3
 8027f54:	f7ff fe4e 	bl	8027bf4 <g_labelDraw>
		for (controlIndex = 0u; controlIndex < WINDOW_LABELS_MAX_NUMBER; controlIndex++)
 8027f58:	7bfb      	ldrb	r3, [r7, #15]
 8027f5a:	3301      	adds	r3, #1
 8027f5c:	73fb      	strb	r3, [r7, #15]
 8027f5e:	7bfb      	ldrb	r3, [r7, #15]
 8027f60:	2b13      	cmp	r3, #19
 8027f62:	d9e8      	bls.n	8027f36 <g_windowDraw+0xd6>
 8027f64:	e000      	b.n	8027f68 <g_windowDraw+0x108>
			}
			else
			{
				break;
 8027f66:	bf00      	nop
			}
		}

		(void_t) gos_mutexUnlock(&g_mutex);
 8027f68:	4803      	ldr	r0, [pc, #12]	; (8027f78 <g_windowDraw+0x118>)
 8027f6a:	f016 faeb 	bl	803e544 <gos_mutexUnlock>
	}
}
 8027f6e:	bf00      	nop
 8027f70:	3714      	adds	r7, #20
 8027f72:	46bd      	mov	sp, r7
 8027f74:	bd90      	pop	{r4, r7, pc}
 8027f76:	bf00      	nop
 8027f78:	20006020 	.word	0x20006020
 8027f7c:	08049c0c 	.word	0x08049c0c
 8027f80:	08049c06 	.word	0x08049c06

08027f84 <g_windowRefreshArea>:

void_t g_windowRefreshArea(g_window_t* pWindow, u16_t xTop, u16_t yTop, u16_t width, u16_t height)
{
 8027f84:	b590      	push	{r4, r7, lr}
 8027f86:	b089      	sub	sp, #36	; 0x24
 8027f88:	af02      	add	r7, sp, #8
 8027f8a:	60f8      	str	r0, [r7, #12]
 8027f8c:	4608      	mov	r0, r1
 8027f8e:	4611      	mov	r1, r2
 8027f90:	461a      	mov	r2, r3
 8027f92:	4603      	mov	r3, r0
 8027f94:	817b      	strh	r3, [r7, #10]
 8027f96:	460b      	mov	r3, r1
 8027f98:	813b      	strh	r3, [r7, #8]
 8027f9a:	4613      	mov	r3, r2
 8027f9c:	80fb      	strh	r3, [r7, #6]
	if (gos_mutexLock(&g_mutex, G_MUTEX_TMO_MS) == GOS_SUCCESS)
 8027f9e:	f241 3188 	movw	r1, #5000	; 0x1388
 8027fa2:	4862      	ldr	r0, [pc, #392]	; (802812c <g_windowRefreshArea+0x1a8>)
 8027fa4:	f016 f9c8 	bl	803e338 <gos_mutexLock>
 8027fa8:	4603      	mov	r3, r0
 8027faa:	2b55      	cmp	r3, #85	; 0x55
 8027fac:	f040 80b9 	bne.w	8028122 <g_windowRefreshArea+0x19e>
	{
		//u16_t textIndex = 0u;
		u8_t controlIndex = 0u;
 8027fb0:	2300      	movs	r3, #0
 8027fb2:	75fb      	strb	r3, [r7, #23]

		if (yTop < CLOSE_BUTTON_HEIGHT)
 8027fb4:	893b      	ldrh	r3, [r7, #8]
 8027fb6:	2b13      	cmp	r3, #19
 8027fb8:	d83e      	bhi.n	8028038 <g_windowRefreshArea+0xb4>
		{
			// Draw header line.
			ili9341_fill_rect(ILI9341_BLUE, pWindow->xTop, pWindow->yTop, pWindow->width, CLOSE_BUTTON_HEIGHT);
 8027fba:	4b5d      	ldr	r3, [pc, #372]	; (8028130 <g_windowRefreshArea+0x1ac>)
 8027fbc:	8818      	ldrh	r0, [r3, #0]
 8027fbe:	68fb      	ldr	r3, [r7, #12]
 8027fc0:	881b      	ldrh	r3, [r3, #0]
 8027fc2:	b219      	sxth	r1, r3
 8027fc4:	68fb      	ldr	r3, [r7, #12]
 8027fc6:	885b      	ldrh	r3, [r3, #2]
 8027fc8:	b21a      	sxth	r2, r3
 8027fca:	68fb      	ldr	r3, [r7, #12]
 8027fcc:	889b      	ldrh	r3, [r3, #4]
 8027fce:	2414      	movs	r4, #20
 8027fd0:	9400      	str	r4, [sp, #0]
 8027fd2:	f7fd fe31 	bl	8025c38 <ili9341_fill_rect>
			ili9341_draw_rect(ILI9341_BLACK, pWindow->xTop, pWindow->yTop, pWindow->width, CLOSE_BUTTON_HEIGHT);
 8027fd6:	4b57      	ldr	r3, [pc, #348]	; (8028134 <g_windowRefreshArea+0x1b0>)
 8027fd8:	8818      	ldrh	r0, [r3, #0]
 8027fda:	68fb      	ldr	r3, [r7, #12]
 8027fdc:	881b      	ldrh	r3, [r3, #0]
 8027fde:	b219      	sxth	r1, r3
 8027fe0:	68fb      	ldr	r3, [r7, #12]
 8027fe2:	885b      	ldrh	r3, [r3, #2]
 8027fe4:	b21a      	sxth	r2, r3
 8027fe6:	68fb      	ldr	r3, [r7, #12]
 8027fe8:	889b      	ldrh	r3, [r3, #4]
 8027fea:	2414      	movs	r4, #20
 8027fec:	9400      	str	r4, [sp, #0]
 8027fee:	f7fd fdbb 	bl	8025b68 <ili9341_draw_rect>

			// Draw window frame.
			ili9341_fill_rect(pWindow->backColor, xTop, CLOSE_BUTTON_HEIGHT, width, height - (CLOSE_BUTTON_HEIGHT - yTop));
 8027ff2:	68fb      	ldr	r3, [r7, #12]
 8027ff4:	8958      	ldrh	r0, [r3, #10]
 8027ff6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8027ffa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8027ffc:	893b      	ldrh	r3, [r7, #8]
 8027ffe:	4413      	add	r3, r2
 8028000:	b29b      	uxth	r3, r3
 8028002:	3b14      	subs	r3, #20
 8028004:	b29b      	uxth	r3, r3
 8028006:	88fa      	ldrh	r2, [r7, #6]
 8028008:	9300      	str	r3, [sp, #0]
 802800a:	4613      	mov	r3, r2
 802800c:	2214      	movs	r2, #20
 802800e:	f7fd fe13 	bl	8025c38 <ili9341_fill_rect>
			ili9341_draw_rect(ILI9341_BLACK, pWindow->xTop, pWindow->yTop + CLOSE_BUTTON_HEIGHT, pWindow->width, pWindow->height);
 8028012:	4b48      	ldr	r3, [pc, #288]	; (8028134 <g_windowRefreshArea+0x1b0>)
 8028014:	8818      	ldrh	r0, [r3, #0]
 8028016:	68fb      	ldr	r3, [r7, #12]
 8028018:	881b      	ldrh	r3, [r3, #0]
 802801a:	b219      	sxth	r1, r3
 802801c:	68fb      	ldr	r3, [r7, #12]
 802801e:	885b      	ldrh	r3, [r3, #2]
 8028020:	3314      	adds	r3, #20
 8028022:	b29b      	uxth	r3, r3
 8028024:	b21a      	sxth	r2, r3
 8028026:	68fb      	ldr	r3, [r7, #12]
 8028028:	889c      	ldrh	r4, [r3, #4]
 802802a:	68fb      	ldr	r3, [r7, #12]
 802802c:	88db      	ldrh	r3, [r3, #6]
 802802e:	9300      	str	r3, [sp, #0]
 8028030:	4623      	mov	r3, r4
 8028032:	f7fd fd99 	bl	8025b68 <ili9341_draw_rect>
 8028036:	e00d      	b.n	8028054 <g_windowRefreshArea+0xd0>
			}*/
		}
		else
		{
			// Redraw background.
			ili9341_fill_rect(pWindow->backColor, xTop, yTop, width, height + CLOSE_BUTTON_HEIGHT);
 8028038:	68fb      	ldr	r3, [r7, #12]
 802803a:	8958      	ldrh	r0, [r3, #10]
 802803c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8028040:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8028044:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8028046:	3314      	adds	r3, #20
 8028048:	b29b      	uxth	r3, r3
 802804a:	88fc      	ldrh	r4, [r7, #6]
 802804c:	9300      	str	r3, [sp, #0]
 802804e:	4623      	mov	r3, r4
 8028050:	f7fd fdf2 	bl	8025c38 <ili9341_fill_rect>
		}

		// Draw buttons.
		for (controlIndex = 0u; controlIndex < WINDOW_BUTTONS_MAX_NUMBER; controlIndex++)
 8028054:	2300      	movs	r3, #0
 8028056:	75fb      	strb	r3, [r7, #23]
 8028058:	e029      	b.n	80280ae <g_windowRefreshArea+0x12a>
		{
			if (pWindow->pButtons[controlIndex] != NULL &&
 802805a:	7dfa      	ldrb	r2, [r7, #23]
 802805c:	68fb      	ldr	r3, [r7, #12]
 802805e:	320a      	adds	r2, #10
 8028060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028064:	2b00      	cmp	r3, #0
 8028066:	d025      	beq.n	80280b4 <g_windowRefreshArea+0x130>
			   ((pWindow->pButtons[controlIndex]->xTop < (xTop + width)) ||
 8028068:	7dfa      	ldrb	r2, [r7, #23]
 802806a:	68fb      	ldr	r3, [r7, #12]
 802806c:	320a      	adds	r2, #10
 802806e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028072:	881b      	ldrh	r3, [r3, #0]
 8028074:	4619      	mov	r1, r3
 8028076:	897a      	ldrh	r2, [r7, #10]
 8028078:	88fb      	ldrh	r3, [r7, #6]
 802807a:	4413      	add	r3, r2
			if (pWindow->pButtons[controlIndex] != NULL &&
 802807c:	4299      	cmp	r1, r3
 802807e:	db0b      	blt.n	8028098 <g_windowRefreshArea+0x114>
		       ((pWindow->pButtons[controlIndex]->xTop + width) > xTop)
 8028080:	7dfa      	ldrb	r2, [r7, #23]
 8028082:	68fb      	ldr	r3, [r7, #12]
 8028084:	320a      	adds	r2, #10
 8028086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802808a:	881b      	ldrh	r3, [r3, #0]
 802808c:	461a      	mov	r2, r3
 802808e:	88fb      	ldrh	r3, [r7, #6]
 8028090:	441a      	add	r2, r3
 8028092:	897b      	ldrh	r3, [r7, #10]
			   ((pWindow->pButtons[controlIndex]->xTop < (xTop + width)) ||
 8028094:	429a      	cmp	r2, r3
 8028096:	dd0d      	ble.n	80280b4 <g_windowRefreshArea+0x130>
			   ))
			{
				// TODO y-axis check is missing.
				g_buttonDraw(pWindow->pButtons[controlIndex]);
 8028098:	7dfa      	ldrb	r2, [r7, #23]
 802809a:	68fb      	ldr	r3, [r7, #12]
 802809c:	320a      	adds	r2, #10
 802809e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80280a2:	4618      	mov	r0, r3
 80280a4:	f7ff fa42 	bl	802752c <g_buttonDraw>
		for (controlIndex = 0u; controlIndex < WINDOW_BUTTONS_MAX_NUMBER; controlIndex++)
 80280a8:	7dfb      	ldrb	r3, [r7, #23]
 80280aa:	3301      	adds	r3, #1
 80280ac:	75fb      	strb	r3, [r7, #23]
 80280ae:	7dfb      	ldrb	r3, [r7, #23]
 80280b0:	2b04      	cmp	r3, #4
 80280b2:	d9d2      	bls.n	802805a <g_windowRefreshArea+0xd6>
				break;
			}
		}

		// Draw labels.
		for (controlIndex = 0u; controlIndex < WINDOW_LABELS_MAX_NUMBER; controlIndex++)
 80280b4:	2300      	movs	r3, #0
 80280b6:	75fb      	strb	r3, [r7, #23]
 80280b8:	e02d      	b.n	8028116 <g_windowRefreshArea+0x192>
		{
			if (pWindow->pLabels[controlIndex] != NULL &&
 80280ba:	7dfb      	ldrb	r3, [r7, #23]
 80280bc:	68fa      	ldr	r2, [r7, #12]
 80280be:	330e      	adds	r3, #14
 80280c0:	009b      	lsls	r3, r3, #2
 80280c2:	4413      	add	r3, r2
 80280c4:	685b      	ldr	r3, [r3, #4]
 80280c6:	2b00      	cmp	r3, #0
 80280c8:	d028      	beq.n	802811c <g_windowRefreshArea+0x198>
		       ((pWindow->pLabels[controlIndex]->xTop < (xTop + width)) ||
 80280ca:	7dfb      	ldrb	r3, [r7, #23]
 80280cc:	68fa      	ldr	r2, [r7, #12]
 80280ce:	330e      	adds	r3, #14
 80280d0:	009b      	lsls	r3, r3, #2
 80280d2:	4413      	add	r3, r2
 80280d4:	685b      	ldr	r3, [r3, #4]
 80280d6:	881b      	ldrh	r3, [r3, #0]
 80280d8:	4619      	mov	r1, r3
 80280da:	897a      	ldrh	r2, [r7, #10]
 80280dc:	88fb      	ldrh	r3, [r7, #6]
 80280de:	4413      	add	r3, r2
			if (pWindow->pLabels[controlIndex] != NULL &&
 80280e0:	4299      	cmp	r1, r3
 80280e2:	db0c      	blt.n	80280fe <g_windowRefreshArea+0x17a>
			   ((pWindow->pLabels[controlIndex]->xTop + width) > xTop)
 80280e4:	7dfb      	ldrb	r3, [r7, #23]
 80280e6:	68fa      	ldr	r2, [r7, #12]
 80280e8:	330e      	adds	r3, #14
 80280ea:	009b      	lsls	r3, r3, #2
 80280ec:	4413      	add	r3, r2
 80280ee:	685b      	ldr	r3, [r3, #4]
 80280f0:	881b      	ldrh	r3, [r3, #0]
 80280f2:	461a      	mov	r2, r3
 80280f4:	88fb      	ldrh	r3, [r7, #6]
 80280f6:	441a      	add	r2, r3
 80280f8:	897b      	ldrh	r3, [r7, #10]
		       ((pWindow->pLabels[controlIndex]->xTop < (xTop + width)) ||
 80280fa:	429a      	cmp	r2, r3
 80280fc:	dd0e      	ble.n	802811c <g_windowRefreshArea+0x198>
			   ))
			{
				g_labelDraw(pWindow->pLabels[controlIndex]);
 80280fe:	7dfb      	ldrb	r3, [r7, #23]
 8028100:	68fa      	ldr	r2, [r7, #12]
 8028102:	330e      	adds	r3, #14
 8028104:	009b      	lsls	r3, r3, #2
 8028106:	4413      	add	r3, r2
 8028108:	685b      	ldr	r3, [r3, #4]
 802810a:	4618      	mov	r0, r3
 802810c:	f7ff fd72 	bl	8027bf4 <g_labelDraw>
		for (controlIndex = 0u; controlIndex < WINDOW_LABELS_MAX_NUMBER; controlIndex++)
 8028110:	7dfb      	ldrb	r3, [r7, #23]
 8028112:	3301      	adds	r3, #1
 8028114:	75fb      	strb	r3, [r7, #23]
 8028116:	7dfb      	ldrb	r3, [r7, #23]
 8028118:	2b13      	cmp	r3, #19
 802811a:	d9ce      	bls.n	80280ba <g_windowRefreshArea+0x136>
			{
				break;
			}
		}

		(void_t) gos_mutexUnlock(&g_mutex);
 802811c:	4803      	ldr	r0, [pc, #12]	; (802812c <g_windowRefreshArea+0x1a8>)
 802811e:	f016 fa11 	bl	803e544 <gos_mutexUnlock>
	}
}
 8028122:	bf00      	nop
 8028124:	371c      	adds	r7, #28
 8028126:	46bd      	mov	sp, r7
 8028128:	bd90      	pop	{r4, r7, pc}
 802812a:	bf00      	nop
 802812c:	20006020 	.word	0x20006020
 8028130:	08049c0c 	.word	0x08049c0c
 8028134:	08049c06 	.word	0x08049c06

08028138 <g_windowAddButton>:

void_t g_windowAddButton (g_window_t* pWindow, g_button_t* pButton)
{
 8028138:	b480      	push	{r7}
 802813a:	b085      	sub	sp, #20
 802813c:	af00      	add	r7, sp, #0
 802813e:	6078      	str	r0, [r7, #4]
 8028140:	6039      	str	r1, [r7, #0]
	u8_t buttonIndex = 0u;
 8028142:	2300      	movs	r3, #0
 8028144:	73fb      	strb	r3, [r7, #15]
	// TODO check if button is within window

	for (buttonIndex = 0u; buttonIndex < WINDOW_BUTTONS_MAX_NUMBER; buttonIndex++)
 8028146:	2300      	movs	r3, #0
 8028148:	73fb      	strb	r3, [r7, #15]
 802814a:	e013      	b.n	8028174 <g_windowAddButton+0x3c>
	{
		if (pWindow->pButtons[buttonIndex] == NULL)
 802814c:	7bfa      	ldrb	r2, [r7, #15]
 802814e:	687b      	ldr	r3, [r7, #4]
 8028150:	320a      	adds	r2, #10
 8028152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028156:	2b00      	cmp	r3, #0
 8028158:	d109      	bne.n	802816e <g_windowAddButton+0x36>
		{
			pWindow->pButtons[buttonIndex] = pButton;
 802815a:	7bfa      	ldrb	r2, [r7, #15]
 802815c:	687b      	ldr	r3, [r7, #4]
 802815e:	320a      	adds	r2, #10
 8028160:	6839      	ldr	r1, [r7, #0]
 8028162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pButton->pOwner = (void_t*)pWindow;
 8028166:	683b      	ldr	r3, [r7, #0]
 8028168:	687a      	ldr	r2, [r7, #4]
 802816a:	62da      	str	r2, [r3, #44]	; 0x2c
			return;
 802816c:	e005      	b.n	802817a <g_windowAddButton+0x42>
	for (buttonIndex = 0u; buttonIndex < WINDOW_BUTTONS_MAX_NUMBER; buttonIndex++)
 802816e:	7bfb      	ldrb	r3, [r7, #15]
 8028170:	3301      	adds	r3, #1
 8028172:	73fb      	strb	r3, [r7, #15]
 8028174:	7bfb      	ldrb	r3, [r7, #15]
 8028176:	2b04      	cmp	r3, #4
 8028178:	d9e8      	bls.n	802814c <g_windowAddButton+0x14>
		}
	}
}
 802817a:	3714      	adds	r7, #20
 802817c:	46bd      	mov	sp, r7
 802817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028182:	4770      	bx	lr

08028184 <g_windowAddLabel>:

void_t g_windowAddLabel (g_window_t* pWindow, g_label_t* pLabel)
{
 8028184:	b480      	push	{r7}
 8028186:	b085      	sub	sp, #20
 8028188:	af00      	add	r7, sp, #0
 802818a:	6078      	str	r0, [r7, #4]
 802818c:	6039      	str	r1, [r7, #0]
	u8_t labelIndex = 0u;
 802818e:	2300      	movs	r3, #0
 8028190:	73fb      	strb	r3, [r7, #15]
	// TODO check if button is within window

	for (labelIndex = 0u; labelIndex < WINDOW_LABELS_MAX_NUMBER; labelIndex++)
 8028192:	2300      	movs	r3, #0
 8028194:	73fb      	strb	r3, [r7, #15]
 8028196:	e015      	b.n	80281c4 <g_windowAddLabel+0x40>
	{
		if (pWindow->pLabels[labelIndex] == NULL)
 8028198:	7bfb      	ldrb	r3, [r7, #15]
 802819a:	687a      	ldr	r2, [r7, #4]
 802819c:	330e      	adds	r3, #14
 802819e:	009b      	lsls	r3, r3, #2
 80281a0:	4413      	add	r3, r2
 80281a2:	685b      	ldr	r3, [r3, #4]
 80281a4:	2b00      	cmp	r3, #0
 80281a6:	d10a      	bne.n	80281be <g_windowAddLabel+0x3a>
		{
			pWindow->pLabels[labelIndex] = pLabel;
 80281a8:	7bfb      	ldrb	r3, [r7, #15]
 80281aa:	687a      	ldr	r2, [r7, #4]
 80281ac:	330e      	adds	r3, #14
 80281ae:	009b      	lsls	r3, r3, #2
 80281b0:	4413      	add	r3, r2
 80281b2:	683a      	ldr	r2, [r7, #0]
 80281b4:	605a      	str	r2, [r3, #4]
			pLabel->pOwner = (void_t*)pWindow;
 80281b6:	683b      	ldr	r3, [r7, #0]
 80281b8:	687a      	ldr	r2, [r7, #4]
 80281ba:	639a      	str	r2, [r3, #56]	; 0x38
			return;
 80281bc:	e005      	b.n	80281ca <g_windowAddLabel+0x46>
	for (labelIndex = 0u; labelIndex < WINDOW_LABELS_MAX_NUMBER; labelIndex++)
 80281be:	7bfb      	ldrb	r3, [r7, #15]
 80281c0:	3301      	adds	r3, #1
 80281c2:	73fb      	strb	r3, [r7, #15]
 80281c4:	7bfb      	ldrb	r3, [r7, #15]
 80281c6:	2b13      	cmp	r3, #19
 80281c8:	d9e6      	bls.n	8028198 <g_windowAddLabel+0x14>
		}
	}
}
 80281ca:	3714      	adds	r7, #20
 80281cc:	46bd      	mov	sp, r7
 80281ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80281d2:	4770      	bx	lr

080281d4 <g_windowShow>:

void_t g_windowShow (g_window_t* pWindow)
{
 80281d4:	b580      	push	{r7, lr}
 80281d6:	b082      	sub	sp, #8
 80281d8:	af00      	add	r7, sp, #0
 80281da:	6078      	str	r0, [r7, #4]
	if (pWindow->isVisible == GOS_FALSE)
 80281dc:	687b      	ldr	r3, [r7, #4]
 80281de:	7b5b      	ldrb	r3, [r3, #13]
 80281e0:	2b49      	cmp	r3, #73	; 0x49
 80281e2:	d108      	bne.n	80281f6 <g_windowShow+0x22>
	{
		pWindow->isVisible = GOS_TRUE;
 80281e4:	687b      	ldr	r3, [r7, #4]
 80281e6:	2236      	movs	r2, #54	; 0x36
 80281e8:	735a      	strb	r2, [r3, #13]
		g_activateWindow(pWindow);
 80281ea:	6878      	ldr	r0, [r7, #4]
 80281ec:	f7ff fb98 	bl	8027920 <g_activateWindow>
		gos_messageTx(&windowShownMessage);
 80281f0:	4803      	ldr	r0, [pc, #12]	; (8028200 <g_windowShow+0x2c>)
 80281f2:	f015 ff29 	bl	803e048 <gos_messageTx>
	}
}
 80281f6:	bf00      	nop
 80281f8:	3708      	adds	r7, #8
 80281fa:	46bd      	mov	sp, r7
 80281fc:	bd80      	pop	{r7, pc}
 80281fe:	bf00      	nop
 8028200:	200019c0 	.word	0x200019c0

08028204 <g_windowHide>:

void_t g_windowHide (g_window_t* pWindow)
{
 8028204:	b580      	push	{r7, lr}
 8028206:	b082      	sub	sp, #8
 8028208:	af00      	add	r7, sp, #0
 802820a:	6078      	str	r0, [r7, #4]
	if (pWindow->isVisible == GOS_TRUE)
 802820c:	687b      	ldr	r3, [r7, #4]
 802820e:	7b5b      	ldrb	r3, [r3, #13]
 8028210:	2b36      	cmp	r3, #54	; 0x36
 8028212:	d10f      	bne.n	8028234 <g_windowHide+0x30>
	{
		pWindow->isVisible = GOS_FALSE;
 8028214:	687b      	ldr	r3, [r7, #4]
 8028216:	2249      	movs	r2, #73	; 0x49
 8028218:	735a      	strb	r2, [r3, #13]
		g_inactivateWindow(pWindow);
 802821a:	687b      	ldr	r3, [r7, #4]
 802821c:	4618      	mov	r0, r3
 802821e:	f7ff fbb5 	bl	802798c <g_inactivateWindow>
 8028222:	687b      	ldr	r3, [r7, #4]
		(void_t) memcpy((void_t*)&windowHiddenMessage.messageBytes[1], (void_t*)&pWindow, sizeof(pWindow));
 8028224:	4a05      	ldr	r2, [pc, #20]	; (802823c <g_windowHide+0x38>)
 8028226:	6053      	str	r3, [r2, #4]
		windowHiddenMessage.messageSize = 1 + sizeof(pWindow);
 8028228:	4b04      	ldr	r3, [pc, #16]	; (802823c <g_windowHide+0x38>)
 802822a:	2205      	movs	r2, #5
 802822c:	709a      	strb	r2, [r3, #2]
		gos_messageTx(&windowHiddenMessage);
 802822e:	4803      	ldr	r0, [pc, #12]	; (802823c <g_windowHide+0x38>)
 8028230:	f015 ff0a 	bl	803e048 <gos_messageTx>
	}
}
 8028234:	bf00      	nop
 8028236:	3708      	adds	r7, #8
 8028238:	46bd      	mov	sp, r7
 802823a:	bd80      	pop	{r7, pc}
 802823c:	20001a14 	.word	0x20001a14

08028240 <g_windowCloseButtonPressedCallback>:

GOS_STATIC void_t g_windowCloseButtonPressedCallback (g_button_t* pButton)
{
 8028240:	b480      	push	{r7}
 8028242:	b083      	sub	sp, #12
 8028244:	af00      	add	r7, sp, #0
 8028246:	6078      	str	r0, [r7, #4]
	//g_buttonDrawClick(pButton);
}
 8028248:	bf00      	nop
 802824a:	370c      	adds	r7, #12
 802824c:	46bd      	mov	sp, r7
 802824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028252:	4770      	bx	lr

08028254 <g_windowCloseButtonReleasedCallback>:

GOS_STATIC void_t g_windowCloseButtonReleasedCallback (g_button_t* pButton)
{
 8028254:	b580      	push	{r7, lr}
 8028256:	b082      	sub	sp, #8
 8028258:	af00      	add	r7, sp, #0
 802825a:	6078      	str	r0, [r7, #4]
	//g_buttonDraw(pButton);
	g_windowHide((g_window_t*)pButton->pOwner);
 802825c:	687b      	ldr	r3, [r7, #4]
 802825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028260:	4618      	mov	r0, r3
 8028262:	f7ff ffcf 	bl	8028204 <g_windowHide>
}
 8028266:	bf00      	nop
 8028268:	3708      	adds	r7, #8
 802826a:	46bd      	mov	sp, r7
 802826c:	bd80      	pop	{r7, pc}

0802826e <g_windowTabStep>:

void_t g_windowTabStep (g_window_t* pWindow)
{
 802826e:	b580      	push	{r7, lr}
 8028270:	b084      	sub	sp, #16
 8028272:	af00      	add	r7, sp, #0
 8028274:	6078      	str	r0, [r7, #4]
	u8_t focusedTabIdx = 0;
 8028276:	2300      	movs	r3, #0
 8028278:	73bb      	strb	r3, [r7, #14]
	u8_t focusedIdx = 0;
 802827a:	2300      	movs	r3, #0
 802827c:	737b      	strb	r3, [r7, #13]
	u8_t nextTabIdx = 0;
 802827e:	2300      	movs	r3, #0
 8028280:	733b      	strb	r3, [r7, #12]
	u8_t idx = 0u;
 8028282:	2300      	movs	r3, #0
 8028284:	73fb      	strb	r3, [r7, #15]

	if (pWindow->isEnabled == GOS_TRUE && pWindow->isVisible == GOS_TRUE)
 8028286:	687b      	ldr	r3, [r7, #4]
 8028288:	7b1b      	ldrb	r3, [r3, #12]
 802828a:	2b36      	cmp	r3, #54	; 0x36
 802828c:	d151      	bne.n	8028332 <g_windowTabStep+0xc4>
 802828e:	687b      	ldr	r3, [r7, #4]
 8028290:	7b5b      	ldrb	r3, [r3, #13]
 8028292:	2b36      	cmp	r3, #54	; 0x36
 8028294:	d14d      	bne.n	8028332 <g_windowTabStep+0xc4>
	{
		for (idx = 0u; idx < WINDOW_BUTTONS_MAX_NUMBER; idx++)
 8028296:	2300      	movs	r3, #0
 8028298:	73fb      	strb	r3, [r7, #15]
 802829a:	e014      	b.n	80282c6 <g_windowTabStep+0x58>
		{
			if (pWindow->pButtons[idx]->isFocused == GOS_TRUE)
 802829c:	7bfa      	ldrb	r2, [r7, #15]
 802829e:	687b      	ldr	r3, [r7, #4]
 80282a0:	320a      	adds	r2, #10
 80282a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80282a6:	7b9b      	ldrb	r3, [r3, #14]
 80282a8:	2b36      	cmp	r3, #54	; 0x36
 80282aa:	d109      	bne.n	80282c0 <g_windowTabStep+0x52>
			{
				focusedTabIdx = pWindow->pButtons[idx]->tabIndex;
 80282ac:	7bfa      	ldrb	r2, [r7, #15]
 80282ae:	687b      	ldr	r3, [r7, #4]
 80282b0:	320a      	adds	r2, #10
 80282b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80282b6:	8a1b      	ldrh	r3, [r3, #16]
 80282b8:	73bb      	strb	r3, [r7, #14]
				focusedIdx = idx;
 80282ba:	7bfb      	ldrb	r3, [r7, #15]
 80282bc:	737b      	strb	r3, [r7, #13]
				break;
 80282be:	e005      	b.n	80282cc <g_windowTabStep+0x5e>
		for (idx = 0u; idx < WINDOW_BUTTONS_MAX_NUMBER; idx++)
 80282c0:	7bfb      	ldrb	r3, [r7, #15]
 80282c2:	3301      	adds	r3, #1
 80282c4:	73fb      	strb	r3, [r7, #15]
 80282c6:	7bfb      	ldrb	r3, [r7, #15]
 80282c8:	2b04      	cmp	r3, #4
 80282ca:	d9e7      	bls.n	802829c <g_windowTabStep+0x2e>
			}
		}

		for (nextTabIdx = focusedTabIdx + 1; nextTabIdx <= 255; nextTabIdx++)
 80282cc:	7bbb      	ldrb	r3, [r7, #14]
 80282ce:	3301      	adds	r3, #1
 80282d0:	733b      	strb	r3, [r7, #12]
		{
			for (idx = 0u; idx < WINDOW_BUTTONS_MAX_NUMBER; idx++)
 80282d2:	2300      	movs	r3, #0
 80282d4:	73fb      	strb	r3, [r7, #15]
 80282d6:	e025      	b.n	8028324 <g_windowTabStep+0xb6>
			{
				if (pWindow->pButtons[idx]->tabStop == GOS_TRUE &&
 80282d8:	7bfa      	ldrb	r2, [r7, #15]
 80282da:	687b      	ldr	r3, [r7, #4]
 80282dc:	320a      	adds	r2, #10
 80282de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80282e2:	7bdb      	ldrb	r3, [r3, #15]
 80282e4:	2b36      	cmp	r3, #54	; 0x36
 80282e6:	d11a      	bne.n	802831e <g_windowTabStep+0xb0>
					pWindow->pButtons[idx]->tabIndex == nextTabIdx)
 80282e8:	7bfa      	ldrb	r2, [r7, #15]
 80282ea:	687b      	ldr	r3, [r7, #4]
 80282ec:	320a      	adds	r2, #10
 80282ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80282f2:	8a1a      	ldrh	r2, [r3, #16]
 80282f4:	7b3b      	ldrb	r3, [r7, #12]
 80282f6:	b29b      	uxth	r3, r3
				if (pWindow->pButtons[idx]->tabStop == GOS_TRUE &&
 80282f8:	429a      	cmp	r2, r3
 80282fa:	d110      	bne.n	802831e <g_windowTabStep+0xb0>
				{
					g_buttonDeFocus(pWindow->pButtons[focusedIdx]);
 80282fc:	7b7a      	ldrb	r2, [r7, #13]
 80282fe:	687b      	ldr	r3, [r7, #4]
 8028300:	320a      	adds	r2, #10
 8028302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028306:	4618      	mov	r0, r3
 8028308:	f7ff fa9c 	bl	8027844 <g_buttonDeFocus>
					g_buttonFocus(pWindow->pButtons[idx]);
 802830c:	7bfa      	ldrb	r2, [r7, #15]
 802830e:	687b      	ldr	r3, [r7, #4]
 8028310:	320a      	adds	r2, #10
 8028312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028316:	4618      	mov	r0, r3
 8028318:	f7ff fa76 	bl	8027808 <g_buttonFocus>
					return;
 802831c:	e009      	b.n	8028332 <g_windowTabStep+0xc4>
			for (idx = 0u; idx < WINDOW_BUTTONS_MAX_NUMBER; idx++)
 802831e:	7bfb      	ldrb	r3, [r7, #15]
 8028320:	3301      	adds	r3, #1
 8028322:	73fb      	strb	r3, [r7, #15]
 8028324:	7bfb      	ldrb	r3, [r7, #15]
 8028326:	2b04      	cmp	r3, #4
 8028328:	d9d6      	bls.n	80282d8 <g_windowTabStep+0x6a>
		for (nextTabIdx = focusedTabIdx + 1; nextTabIdx <= 255; nextTabIdx++)
 802832a:	7b3b      	ldrb	r3, [r7, #12]
 802832c:	3301      	adds	r3, #1
 802832e:	733b      	strb	r3, [r7, #12]
			for (idx = 0u; idx < WINDOW_BUTTONS_MAX_NUMBER; idx++)
 8028330:	e7cf      	b.n	80282d2 <g_windowTabStep+0x64>
					return;
				}
			}
		}
	}
}
 8028332:	3710      	adds	r7, #16
 8028334:	46bd      	mov	sp, r7
 8028336:	bd80      	pop	{r7, pc}

08028338 <g_windowPressFocused>:

void_t g_windowPressFocused (g_window_t* pWindow)
{
 8028338:	b580      	push	{r7, lr}
 802833a:	b084      	sub	sp, #16
 802833c:	af00      	add	r7, sp, #0
 802833e:	6078      	str	r0, [r7, #4]
	u8_t idx = 0u;
 8028340:	2300      	movs	r3, #0
 8028342:	73fb      	strb	r3, [r7, #15]

	if (pWindow->isEnabled == GOS_TRUE && pWindow->isVisible == GOS_TRUE)
 8028344:	687b      	ldr	r3, [r7, #4]
 8028346:	7b1b      	ldrb	r3, [r3, #12]
 8028348:	2b36      	cmp	r3, #54	; 0x36
 802834a:	d134      	bne.n	80283b6 <g_windowPressFocused+0x7e>
 802834c:	687b      	ldr	r3, [r7, #4]
 802834e:	7b5b      	ldrb	r3, [r3, #13]
 8028350:	2b36      	cmp	r3, #54	; 0x36
 8028352:	d130      	bne.n	80283b6 <g_windowPressFocused+0x7e>
	{
		for (idx = 0u; idx < WINDOW_BUTTONS_MAX_NUMBER; idx++)
 8028354:	2300      	movs	r3, #0
 8028356:	73fb      	strb	r3, [r7, #15]
 8028358:	e028      	b.n	80283ac <g_windowPressFocused+0x74>
		{
			if (pWindow->pButtons[idx]->isFocused == GOS_TRUE)
 802835a:	7bfa      	ldrb	r2, [r7, #15]
 802835c:	687b      	ldr	r3, [r7, #4]
 802835e:	320a      	adds	r2, #10
 8028360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028364:	7b9b      	ldrb	r3, [r3, #14]
 8028366:	2b36      	cmp	r3, #54	; 0x36
 8028368:	d11d      	bne.n	80283a6 <g_windowPressFocused+0x6e>
			{
				g_buttonDrawClick(pWindow->pButtons[idx]);
 802836a:	7bfa      	ldrb	r2, [r7, #15]
 802836c:	687b      	ldr	r3, [r7, #4]
 802836e:	320a      	adds	r2, #10
 8028370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028374:	4618      	mov	r0, r3
 8028376:	f7ff f99d 	bl	80276b4 <g_buttonDrawClick>
				if (pWindow->pButtons[idx]->pressed != NULL)
 802837a:	7bfa      	ldrb	r2, [r7, #15]
 802837c:	687b      	ldr	r3, [r7, #4]
 802837e:	320a      	adds	r2, #10
 8028380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028386:	2b00      	cmp	r3, #0
 8028388:	d014      	beq.n	80283b4 <g_windowPressFocused+0x7c>
				{
					pWindow->pButtons[idx]->pressed(pWindow->pButtons[idx]);
 802838a:	7bfa      	ldrb	r2, [r7, #15]
 802838c:	687b      	ldr	r3, [r7, #4]
 802838e:	320a      	adds	r2, #10
 8028390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028396:	7bf9      	ldrb	r1, [r7, #15]
 8028398:	687a      	ldr	r2, [r7, #4]
 802839a:	310a      	adds	r1, #10
 802839c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80283a0:	4610      	mov	r0, r2
 80283a2:	4798      	blx	r3
				}
				return;
 80283a4:	e006      	b.n	80283b4 <g_windowPressFocused+0x7c>
		for (idx = 0u; idx < WINDOW_BUTTONS_MAX_NUMBER; idx++)
 80283a6:	7bfb      	ldrb	r3, [r7, #15]
 80283a8:	3301      	adds	r3, #1
 80283aa:	73fb      	strb	r3, [r7, #15]
 80283ac:	7bfb      	ldrb	r3, [r7, #15]
 80283ae:	2b04      	cmp	r3, #4
 80283b0:	d9d3      	bls.n	802835a <g_windowPressFocused+0x22>
 80283b2:	e000      	b.n	80283b6 <g_windowPressFocused+0x7e>
				return;
 80283b4:	bf00      	nop
			}
		}
	}
}
 80283b6:	3710      	adds	r7, #16
 80283b8:	46bd      	mov	sp, r7
 80283ba:	bd80      	pop	{r7, pc}

080283bc <g_windowReleaseFocused>:

void_t g_windowReleaseFocused (g_window_t* pWindow)
{
 80283bc:	b580      	push	{r7, lr}
 80283be:	b084      	sub	sp, #16
 80283c0:	af00      	add	r7, sp, #0
 80283c2:	6078      	str	r0, [r7, #4]
	u8_t idx = 0u;
 80283c4:	2300      	movs	r3, #0
 80283c6:	73fb      	strb	r3, [r7, #15]

	if (pWindow->isEnabled == GOS_TRUE && pWindow->isVisible == GOS_TRUE)
 80283c8:	687b      	ldr	r3, [r7, #4]
 80283ca:	7b1b      	ldrb	r3, [r3, #12]
 80283cc:	2b36      	cmp	r3, #54	; 0x36
 80283ce:	d134      	bne.n	802843a <g_windowReleaseFocused+0x7e>
 80283d0:	687b      	ldr	r3, [r7, #4]
 80283d2:	7b5b      	ldrb	r3, [r3, #13]
 80283d4:	2b36      	cmp	r3, #54	; 0x36
 80283d6:	d130      	bne.n	802843a <g_windowReleaseFocused+0x7e>
	{
		for (idx = 0u; idx < WINDOW_BUTTONS_MAX_NUMBER; idx++)
 80283d8:	2300      	movs	r3, #0
 80283da:	73fb      	strb	r3, [r7, #15]
 80283dc:	e028      	b.n	8028430 <g_windowReleaseFocused+0x74>
		{
			if (pWindow->pButtons[idx]->isFocused == GOS_TRUE)
 80283de:	7bfa      	ldrb	r2, [r7, #15]
 80283e0:	687b      	ldr	r3, [r7, #4]
 80283e2:	320a      	adds	r2, #10
 80283e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80283e8:	7b9b      	ldrb	r3, [r3, #14]
 80283ea:	2b36      	cmp	r3, #54	; 0x36
 80283ec:	d11d      	bne.n	802842a <g_windowReleaseFocused+0x6e>
			{
				g_buttonDraw(pWindow->pButtons[idx]);
 80283ee:	7bfa      	ldrb	r2, [r7, #15]
 80283f0:	687b      	ldr	r3, [r7, #4]
 80283f2:	320a      	adds	r2, #10
 80283f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80283f8:	4618      	mov	r0, r3
 80283fa:	f7ff f897 	bl	802752c <g_buttonDraw>

				if (pWindow->pButtons[idx]->released != NULL)
 80283fe:	7bfa      	ldrb	r2, [r7, #15]
 8028400:	687b      	ldr	r3, [r7, #4]
 8028402:	320a      	adds	r2, #10
 8028404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802840a:	2b00      	cmp	r3, #0
 802840c:	d014      	beq.n	8028438 <g_windowReleaseFocused+0x7c>
				{
					pWindow->pButtons[idx]->released(pWindow->pButtons[idx]);
 802840e:	7bfa      	ldrb	r2, [r7, #15]
 8028410:	687b      	ldr	r3, [r7, #4]
 8028412:	320a      	adds	r2, #10
 8028414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802841a:	7bf9      	ldrb	r1, [r7, #15]
 802841c:	687a      	ldr	r2, [r7, #4]
 802841e:	310a      	adds	r1, #10
 8028420:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8028424:	4610      	mov	r0, r2
 8028426:	4798      	blx	r3
				}
				return;
 8028428:	e006      	b.n	8028438 <g_windowReleaseFocused+0x7c>
		for (idx = 0u; idx < WINDOW_BUTTONS_MAX_NUMBER; idx++)
 802842a:	7bfb      	ldrb	r3, [r7, #15]
 802842c:	3301      	adds	r3, #1
 802842e:	73fb      	strb	r3, [r7, #15]
 8028430:	7bfb      	ldrb	r3, [r7, #15]
 8028432:	2b04      	cmp	r3, #4
 8028434:	d9d3      	bls.n	80283de <g_windowReleaseFocused+0x22>
 8028436:	e000      	b.n	802843a <g_windowReleaseFocused+0x7e>
				return;
 8028438:	bf00      	nop
			}
		}
	}
}
 802843a:	3710      	adds	r7, #16
 802843c:	46bd      	mov	sp, r7
 802843e:	bd80      	pop	{r7, pc}

08028440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8028440:	b580      	push	{r7, lr}
 8028442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8028444:	4b0e      	ldr	r3, [pc, #56]	; (8028480 <HAL_Init+0x40>)
 8028446:	681b      	ldr	r3, [r3, #0]
 8028448:	4a0d      	ldr	r2, [pc, #52]	; (8028480 <HAL_Init+0x40>)
 802844a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802844e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8028450:	4b0b      	ldr	r3, [pc, #44]	; (8028480 <HAL_Init+0x40>)
 8028452:	681b      	ldr	r3, [r3, #0]
 8028454:	4a0a      	ldr	r2, [pc, #40]	; (8028480 <HAL_Init+0x40>)
 8028456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802845a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802845c:	4b08      	ldr	r3, [pc, #32]	; (8028480 <HAL_Init+0x40>)
 802845e:	681b      	ldr	r3, [r3, #0]
 8028460:	4a07      	ldr	r2, [pc, #28]	; (8028480 <HAL_Init+0x40>)
 8028462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8028468:	2003      	movs	r0, #3
 802846a:	f000 fe8f 	bl	802918c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802846e:	2000      	movs	r0, #0
 8028470:	f000 f810 	bl	8028494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8028474:	f000 f806 	bl	8028484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8028478:	2300      	movs	r3, #0
}
 802847a:	4618      	mov	r0, r3
 802847c:	bd80      	pop	{r7, pc}
 802847e:	bf00      	nop
 8028480:	40023c00 	.word	0x40023c00

08028484 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8028484:	b480      	push	{r7}
 8028486:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8028488:	bf00      	nop
 802848a:	46bd      	mov	sp, r7
 802848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028490:	4770      	bx	lr
	...

08028494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8028494:	b580      	push	{r7, lr}
 8028496:	b082      	sub	sp, #8
 8028498:	af00      	add	r7, sp, #0
 802849a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 802849c:	4b12      	ldr	r3, [pc, #72]	; (80284e8 <HAL_InitTick+0x54>)
 802849e:	681a      	ldr	r2, [r3, #0]
 80284a0:	4b12      	ldr	r3, [pc, #72]	; (80284ec <HAL_InitTick+0x58>)
 80284a2:	781b      	ldrb	r3, [r3, #0]
 80284a4:	4619      	mov	r1, r3
 80284a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80284aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80284ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80284b2:	4618      	mov	r0, r3
 80284b4:	f000 fe9f 	bl	80291f6 <HAL_SYSTICK_Config>
 80284b8:	4603      	mov	r3, r0
 80284ba:	2b00      	cmp	r3, #0
 80284bc:	d001      	beq.n	80284c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80284be:	2301      	movs	r3, #1
 80284c0:	e00e      	b.n	80284e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80284c2:	687b      	ldr	r3, [r7, #4]
 80284c4:	2b0f      	cmp	r3, #15
 80284c6:	d80a      	bhi.n	80284de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80284c8:	2200      	movs	r2, #0
 80284ca:	6879      	ldr	r1, [r7, #4]
 80284cc:	f04f 30ff 	mov.w	r0, #4294967295
 80284d0:	f000 fe67 	bl	80291a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80284d4:	4a06      	ldr	r2, [pc, #24]	; (80284f0 <HAL_InitTick+0x5c>)
 80284d6:	687b      	ldr	r3, [r7, #4]
 80284d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80284da:	2300      	movs	r3, #0
 80284dc:	e000      	b.n	80284e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80284de:	2301      	movs	r3, #1
}
 80284e0:	4618      	mov	r0, r3
 80284e2:	3708      	adds	r7, #8
 80284e4:	46bd      	mov	sp, r7
 80284e6:	bd80      	pop	{r7, pc}
 80284e8:	200014e4 	.word	0x200014e4
 80284ec:	20001a6c 	.word	0x20001a6c
 80284f0:	20001a68 	.word	0x20001a68

080284f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80284f4:	b480      	push	{r7}
 80284f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80284f8:	4b06      	ldr	r3, [pc, #24]	; (8028514 <HAL_IncTick+0x20>)
 80284fa:	781b      	ldrb	r3, [r3, #0]
 80284fc:	461a      	mov	r2, r3
 80284fe:	4b06      	ldr	r3, [pc, #24]	; (8028518 <HAL_IncTick+0x24>)
 8028500:	681b      	ldr	r3, [r3, #0]
 8028502:	4413      	add	r3, r2
 8028504:	4a04      	ldr	r2, [pc, #16]	; (8028518 <HAL_IncTick+0x24>)
 8028506:	6013      	str	r3, [r2, #0]
}
 8028508:	bf00      	nop
 802850a:	46bd      	mov	sp, r7
 802850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028510:	4770      	bx	lr
 8028512:	bf00      	nop
 8028514:	20001a6c 	.word	0x20001a6c
 8028518:	20006048 	.word	0x20006048

0802851c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802851c:	b480      	push	{r7}
 802851e:	af00      	add	r7, sp, #0
  return uwTick;
 8028520:	4b03      	ldr	r3, [pc, #12]	; (8028530 <HAL_GetTick+0x14>)
 8028522:	681b      	ldr	r3, [r3, #0]
}
 8028524:	4618      	mov	r0, r3
 8028526:	46bd      	mov	sp, r7
 8028528:	f85d 7b04 	ldr.w	r7, [sp], #4
 802852c:	4770      	bx	lr
 802852e:	bf00      	nop
 8028530:	20006048 	.word	0x20006048

08028534 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8028534:	b580      	push	{r7, lr}
 8028536:	b084      	sub	sp, #16
 8028538:	af00      	add	r7, sp, #0
 802853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 802853c:	2300      	movs	r3, #0
 802853e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8028540:	687b      	ldr	r3, [r7, #4]
 8028542:	2b00      	cmp	r3, #0
 8028544:	d101      	bne.n	802854a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8028546:	2301      	movs	r3, #1
 8028548:	e033      	b.n	80285b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 802854a:	687b      	ldr	r3, [r7, #4]
 802854c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802854e:	2b00      	cmp	r3, #0
 8028550:	d109      	bne.n	8028566 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8028552:	6878      	ldr	r0, [r7, #4]
 8028554:	f00c ff7c 	bl	8035450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8028558:	687b      	ldr	r3, [r7, #4]
 802855a:	2200      	movs	r2, #0
 802855c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 802855e:	687b      	ldr	r3, [r7, #4]
 8028560:	2200      	movs	r2, #0
 8028562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8028566:	687b      	ldr	r3, [r7, #4]
 8028568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802856a:	f003 0310 	and.w	r3, r3, #16
 802856e:	2b00      	cmp	r3, #0
 8028570:	d118      	bne.n	80285a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8028572:	687b      	ldr	r3, [r7, #4]
 8028574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028576:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 802857a:	f023 0302 	bic.w	r3, r3, #2
 802857e:	f043 0202 	orr.w	r2, r3, #2
 8028582:	687b      	ldr	r3, [r7, #4]
 8028584:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8028586:	6878      	ldr	r0, [r7, #4]
 8028588:	f000 fc2a 	bl	8028de0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 802858c:	687b      	ldr	r3, [r7, #4]
 802858e:	2200      	movs	r2, #0
 8028590:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8028592:	687b      	ldr	r3, [r7, #4]
 8028594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028596:	f023 0303 	bic.w	r3, r3, #3
 802859a:	f043 0201 	orr.w	r2, r3, #1
 802859e:	687b      	ldr	r3, [r7, #4]
 80285a0:	641a      	str	r2, [r3, #64]	; 0x40
 80285a2:	e001      	b.n	80285a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80285a4:	2301      	movs	r3, #1
 80285a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80285a8:	687b      	ldr	r3, [r7, #4]
 80285aa:	2200      	movs	r2, #0
 80285ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80285b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80285b2:	4618      	mov	r0, r3
 80285b4:	3710      	adds	r7, #16
 80285b6:	46bd      	mov	sp, r7
 80285b8:	bd80      	pop	{r7, pc}
	...

080285bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80285bc:	b480      	push	{r7}
 80285be:	b085      	sub	sp, #20
 80285c0:	af00      	add	r7, sp, #0
 80285c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80285c4:	2300      	movs	r3, #0
 80285c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80285c8:	687b      	ldr	r3, [r7, #4]
 80285ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80285ce:	2b01      	cmp	r3, #1
 80285d0:	d101      	bne.n	80285d6 <HAL_ADC_Start+0x1a>
 80285d2:	2302      	movs	r3, #2
 80285d4:	e0a5      	b.n	8028722 <HAL_ADC_Start+0x166>
 80285d6:	687b      	ldr	r3, [r7, #4]
 80285d8:	2201      	movs	r2, #1
 80285da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80285de:	687b      	ldr	r3, [r7, #4]
 80285e0:	681b      	ldr	r3, [r3, #0]
 80285e2:	689b      	ldr	r3, [r3, #8]
 80285e4:	f003 0301 	and.w	r3, r3, #1
 80285e8:	2b01      	cmp	r3, #1
 80285ea:	d018      	beq.n	802861e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80285ec:	687b      	ldr	r3, [r7, #4]
 80285ee:	681b      	ldr	r3, [r3, #0]
 80285f0:	689a      	ldr	r2, [r3, #8]
 80285f2:	687b      	ldr	r3, [r7, #4]
 80285f4:	681b      	ldr	r3, [r3, #0]
 80285f6:	f042 0201 	orr.w	r2, r2, #1
 80285fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80285fc:	4b4c      	ldr	r3, [pc, #304]	; (8028730 <HAL_ADC_Start+0x174>)
 80285fe:	681b      	ldr	r3, [r3, #0]
 8028600:	4a4c      	ldr	r2, [pc, #304]	; (8028734 <HAL_ADC_Start+0x178>)
 8028602:	fba2 2303 	umull	r2, r3, r2, r3
 8028606:	0c9a      	lsrs	r2, r3, #18
 8028608:	4613      	mov	r3, r2
 802860a:	005b      	lsls	r3, r3, #1
 802860c:	4413      	add	r3, r2
 802860e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8028610:	e002      	b.n	8028618 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8028612:	68bb      	ldr	r3, [r7, #8]
 8028614:	3b01      	subs	r3, #1
 8028616:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8028618:	68bb      	ldr	r3, [r7, #8]
 802861a:	2b00      	cmp	r3, #0
 802861c:	d1f9      	bne.n	8028612 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 802861e:	687b      	ldr	r3, [r7, #4]
 8028620:	681b      	ldr	r3, [r3, #0]
 8028622:	689b      	ldr	r3, [r3, #8]
 8028624:	f003 0301 	and.w	r3, r3, #1
 8028628:	2b01      	cmp	r3, #1
 802862a:	d179      	bne.n	8028720 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 802862c:	687b      	ldr	r3, [r7, #4]
 802862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028630:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8028634:	f023 0301 	bic.w	r3, r3, #1
 8028638:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802863c:	687b      	ldr	r3, [r7, #4]
 802863e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8028640:	687b      	ldr	r3, [r7, #4]
 8028642:	681b      	ldr	r3, [r3, #0]
 8028644:	685b      	ldr	r3, [r3, #4]
 8028646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802864a:	2b00      	cmp	r3, #0
 802864c:	d007      	beq.n	802865e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 802864e:	687b      	ldr	r3, [r7, #4]
 8028650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028652:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8028656:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 802865a:	687b      	ldr	r3, [r7, #4]
 802865c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802865e:	687b      	ldr	r3, [r7, #4]
 8028660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028662:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8028666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802866a:	d106      	bne.n	802867a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 802866c:	687b      	ldr	r3, [r7, #4]
 802866e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028670:	f023 0206 	bic.w	r2, r3, #6
 8028674:	687b      	ldr	r3, [r7, #4]
 8028676:	645a      	str	r2, [r3, #68]	; 0x44
 8028678:	e002      	b.n	8028680 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 802867a:	687b      	ldr	r3, [r7, #4]
 802867c:	2200      	movs	r2, #0
 802867e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8028680:	687b      	ldr	r3, [r7, #4]
 8028682:	2200      	movs	r2, #0
 8028684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8028688:	4b2b      	ldr	r3, [pc, #172]	; (8028738 <HAL_ADC_Start+0x17c>)
 802868a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802868c:	687b      	ldr	r3, [r7, #4]
 802868e:	681b      	ldr	r3, [r3, #0]
 8028690:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8028694:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8028696:	68fb      	ldr	r3, [r7, #12]
 8028698:	685b      	ldr	r3, [r3, #4]
 802869a:	f003 031f 	and.w	r3, r3, #31
 802869e:	2b00      	cmp	r3, #0
 80286a0:	d12a      	bne.n	80286f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80286a2:	687b      	ldr	r3, [r7, #4]
 80286a4:	681b      	ldr	r3, [r3, #0]
 80286a6:	4a25      	ldr	r2, [pc, #148]	; (802873c <HAL_ADC_Start+0x180>)
 80286a8:	4293      	cmp	r3, r2
 80286aa:	d015      	beq.n	80286d8 <HAL_ADC_Start+0x11c>
 80286ac:	687b      	ldr	r3, [r7, #4]
 80286ae:	681b      	ldr	r3, [r3, #0]
 80286b0:	4a23      	ldr	r2, [pc, #140]	; (8028740 <HAL_ADC_Start+0x184>)
 80286b2:	4293      	cmp	r3, r2
 80286b4:	d105      	bne.n	80286c2 <HAL_ADC_Start+0x106>
 80286b6:	4b20      	ldr	r3, [pc, #128]	; (8028738 <HAL_ADC_Start+0x17c>)
 80286b8:	685b      	ldr	r3, [r3, #4]
 80286ba:	f003 031f 	and.w	r3, r3, #31
 80286be:	2b00      	cmp	r3, #0
 80286c0:	d00a      	beq.n	80286d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80286c2:	687b      	ldr	r3, [r7, #4]
 80286c4:	681b      	ldr	r3, [r3, #0]
 80286c6:	4a1f      	ldr	r2, [pc, #124]	; (8028744 <HAL_ADC_Start+0x188>)
 80286c8:	4293      	cmp	r3, r2
 80286ca:	d129      	bne.n	8028720 <HAL_ADC_Start+0x164>
 80286cc:	4b1a      	ldr	r3, [pc, #104]	; (8028738 <HAL_ADC_Start+0x17c>)
 80286ce:	685b      	ldr	r3, [r3, #4]
 80286d0:	f003 0310 	and.w	r3, r3, #16
 80286d4:	2b00      	cmp	r3, #0
 80286d6:	d123      	bne.n	8028720 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80286d8:	687b      	ldr	r3, [r7, #4]
 80286da:	681b      	ldr	r3, [r3, #0]
 80286dc:	689b      	ldr	r3, [r3, #8]
 80286de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80286e2:	2b00      	cmp	r3, #0
 80286e4:	d11c      	bne.n	8028720 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80286e6:	687b      	ldr	r3, [r7, #4]
 80286e8:	681b      	ldr	r3, [r3, #0]
 80286ea:	689a      	ldr	r2, [r3, #8]
 80286ec:	687b      	ldr	r3, [r7, #4]
 80286ee:	681b      	ldr	r3, [r3, #0]
 80286f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80286f4:	609a      	str	r2, [r3, #8]
 80286f6:	e013      	b.n	8028720 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80286f8:	687b      	ldr	r3, [r7, #4]
 80286fa:	681b      	ldr	r3, [r3, #0]
 80286fc:	4a0f      	ldr	r2, [pc, #60]	; (802873c <HAL_ADC_Start+0x180>)
 80286fe:	4293      	cmp	r3, r2
 8028700:	d10e      	bne.n	8028720 <HAL_ADC_Start+0x164>
 8028702:	687b      	ldr	r3, [r7, #4]
 8028704:	681b      	ldr	r3, [r3, #0]
 8028706:	689b      	ldr	r3, [r3, #8]
 8028708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802870c:	2b00      	cmp	r3, #0
 802870e:	d107      	bne.n	8028720 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8028710:	687b      	ldr	r3, [r7, #4]
 8028712:	681b      	ldr	r3, [r3, #0]
 8028714:	689a      	ldr	r2, [r3, #8]
 8028716:	687b      	ldr	r3, [r7, #4]
 8028718:	681b      	ldr	r3, [r3, #0]
 802871a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802871e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8028720:	2300      	movs	r3, #0
}
 8028722:	4618      	mov	r0, r3
 8028724:	3714      	adds	r7, #20
 8028726:	46bd      	mov	sp, r7
 8028728:	f85d 7b04 	ldr.w	r7, [sp], #4
 802872c:	4770      	bx	lr
 802872e:	bf00      	nop
 8028730:	200014e4 	.word	0x200014e4
 8028734:	431bde83 	.word	0x431bde83
 8028738:	40012300 	.word	0x40012300
 802873c:	40012000 	.word	0x40012000
 8028740:	40012100 	.word	0x40012100
 8028744:	40012200 	.word	0x40012200

08028748 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8028748:	b480      	push	{r7}
 802874a:	b083      	sub	sp, #12
 802874c:	af00      	add	r7, sp, #0
 802874e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8028750:	687b      	ldr	r3, [r7, #4]
 8028752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028756:	2b01      	cmp	r3, #1
 8028758:	d101      	bne.n	802875e <HAL_ADC_Stop+0x16>
 802875a:	2302      	movs	r3, #2
 802875c:	e021      	b.n	80287a2 <HAL_ADC_Stop+0x5a>
 802875e:	687b      	ldr	r3, [r7, #4]
 8028760:	2201      	movs	r2, #1
 8028762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8028766:	687b      	ldr	r3, [r7, #4]
 8028768:	681b      	ldr	r3, [r3, #0]
 802876a:	689a      	ldr	r2, [r3, #8]
 802876c:	687b      	ldr	r3, [r7, #4]
 802876e:	681b      	ldr	r3, [r3, #0]
 8028770:	f022 0201 	bic.w	r2, r2, #1
 8028774:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8028776:	687b      	ldr	r3, [r7, #4]
 8028778:	681b      	ldr	r3, [r3, #0]
 802877a:	689b      	ldr	r3, [r3, #8]
 802877c:	f003 0301 	and.w	r3, r3, #1
 8028780:	2b00      	cmp	r3, #0
 8028782:	d109      	bne.n	8028798 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8028784:	687b      	ldr	r3, [r7, #4]
 8028786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028788:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 802878c:	f023 0301 	bic.w	r3, r3, #1
 8028790:	f043 0201 	orr.w	r2, r3, #1
 8028794:	687b      	ldr	r3, [r7, #4]
 8028796:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8028798:	687b      	ldr	r3, [r7, #4]
 802879a:	2200      	movs	r2, #0
 802879c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80287a0:	2300      	movs	r3, #0
}
 80287a2:	4618      	mov	r0, r3
 80287a4:	370c      	adds	r7, #12
 80287a6:	46bd      	mov	sp, r7
 80287a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287ac:	4770      	bx	lr

080287ae <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80287ae:	b580      	push	{r7, lr}
 80287b0:	b084      	sub	sp, #16
 80287b2:	af00      	add	r7, sp, #0
 80287b4:	6078      	str	r0, [r7, #4]
 80287b6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80287b8:	2300      	movs	r3, #0
 80287ba:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80287bc:	687b      	ldr	r3, [r7, #4]
 80287be:	681b      	ldr	r3, [r3, #0]
 80287c0:	689b      	ldr	r3, [r3, #8]
 80287c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80287c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80287ca:	d113      	bne.n	80287f4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80287cc:	687b      	ldr	r3, [r7, #4]
 80287ce:	681b      	ldr	r3, [r3, #0]
 80287d0:	689b      	ldr	r3, [r3, #8]
 80287d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80287d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80287da:	d10b      	bne.n	80287f4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80287dc:	687b      	ldr	r3, [r7, #4]
 80287de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80287e0:	f043 0220 	orr.w	r2, r3, #32
 80287e4:	687b      	ldr	r3, [r7, #4]
 80287e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80287e8:	687b      	ldr	r3, [r7, #4]
 80287ea:	2200      	movs	r2, #0
 80287ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80287f0:	2301      	movs	r3, #1
 80287f2:	e05c      	b.n	80288ae <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80287f4:	f7ff fe92 	bl	802851c <HAL_GetTick>
 80287f8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80287fa:	e01a      	b.n	8028832 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80287fc:	683b      	ldr	r3, [r7, #0]
 80287fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028802:	d016      	beq.n	8028832 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8028804:	683b      	ldr	r3, [r7, #0]
 8028806:	2b00      	cmp	r3, #0
 8028808:	d007      	beq.n	802881a <HAL_ADC_PollForConversion+0x6c>
 802880a:	f7ff fe87 	bl	802851c <HAL_GetTick>
 802880e:	4602      	mov	r2, r0
 8028810:	68fb      	ldr	r3, [r7, #12]
 8028812:	1ad3      	subs	r3, r2, r3
 8028814:	683a      	ldr	r2, [r7, #0]
 8028816:	429a      	cmp	r2, r3
 8028818:	d20b      	bcs.n	8028832 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 802881a:	687b      	ldr	r3, [r7, #4]
 802881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802881e:	f043 0204 	orr.w	r2, r3, #4
 8028822:	687b      	ldr	r3, [r7, #4]
 8028824:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8028826:	687b      	ldr	r3, [r7, #4]
 8028828:	2200      	movs	r2, #0
 802882a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 802882e:	2303      	movs	r3, #3
 8028830:	e03d      	b.n	80288ae <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8028832:	687b      	ldr	r3, [r7, #4]
 8028834:	681b      	ldr	r3, [r3, #0]
 8028836:	681b      	ldr	r3, [r3, #0]
 8028838:	f003 0302 	and.w	r3, r3, #2
 802883c:	2b02      	cmp	r3, #2
 802883e:	d1dd      	bne.n	80287fc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8028840:	687b      	ldr	r3, [r7, #4]
 8028842:	681b      	ldr	r3, [r3, #0]
 8028844:	f06f 0212 	mvn.w	r2, #18
 8028848:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 802884a:	687b      	ldr	r3, [r7, #4]
 802884c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802884e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8028852:	687b      	ldr	r3, [r7, #4]
 8028854:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8028856:	687b      	ldr	r3, [r7, #4]
 8028858:	681b      	ldr	r3, [r3, #0]
 802885a:	689b      	ldr	r3, [r3, #8]
 802885c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8028860:	2b00      	cmp	r3, #0
 8028862:	d123      	bne.n	80288ac <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8028864:	687b      	ldr	r3, [r7, #4]
 8028866:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8028868:	2b00      	cmp	r3, #0
 802886a:	d11f      	bne.n	80288ac <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 802886c:	687b      	ldr	r3, [r7, #4]
 802886e:	681b      	ldr	r3, [r3, #0]
 8028870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028872:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8028876:	2b00      	cmp	r3, #0
 8028878:	d006      	beq.n	8028888 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 802887a:	687b      	ldr	r3, [r7, #4]
 802887c:	681b      	ldr	r3, [r3, #0]
 802887e:	689b      	ldr	r3, [r3, #8]
 8028880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8028884:	2b00      	cmp	r3, #0
 8028886:	d111      	bne.n	80288ac <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8028888:	687b      	ldr	r3, [r7, #4]
 802888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802888c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8028890:	687b      	ldr	r3, [r7, #4]
 8028892:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8028894:	687b      	ldr	r3, [r7, #4]
 8028896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802889c:	2b00      	cmp	r3, #0
 802889e:	d105      	bne.n	80288ac <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80288a0:	687b      	ldr	r3, [r7, #4]
 80288a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80288a4:	f043 0201 	orr.w	r2, r3, #1
 80288a8:	687b      	ldr	r3, [r7, #4]
 80288aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80288ac:	2300      	movs	r3, #0
}
 80288ae:	4618      	mov	r0, r3
 80288b0:	3710      	adds	r7, #16
 80288b2:	46bd      	mov	sp, r7
 80288b4:	bd80      	pop	{r7, pc}

080288b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80288b6:	b580      	push	{r7, lr}
 80288b8:	b084      	sub	sp, #16
 80288ba:	af00      	add	r7, sp, #0
 80288bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80288be:	2300      	movs	r3, #0
 80288c0:	60fb      	str	r3, [r7, #12]
 80288c2:	2300      	movs	r3, #0
 80288c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80288c6:	687b      	ldr	r3, [r7, #4]
 80288c8:	681b      	ldr	r3, [r3, #0]
 80288ca:	681b      	ldr	r3, [r3, #0]
 80288cc:	f003 0302 	and.w	r3, r3, #2
 80288d0:	2b02      	cmp	r3, #2
 80288d2:	bf0c      	ite	eq
 80288d4:	2301      	moveq	r3, #1
 80288d6:	2300      	movne	r3, #0
 80288d8:	b2db      	uxtb	r3, r3
 80288da:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80288dc:	687b      	ldr	r3, [r7, #4]
 80288de:	681b      	ldr	r3, [r3, #0]
 80288e0:	685b      	ldr	r3, [r3, #4]
 80288e2:	f003 0320 	and.w	r3, r3, #32
 80288e6:	2b20      	cmp	r3, #32
 80288e8:	bf0c      	ite	eq
 80288ea:	2301      	moveq	r3, #1
 80288ec:	2300      	movne	r3, #0
 80288ee:	b2db      	uxtb	r3, r3
 80288f0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80288f2:	68fb      	ldr	r3, [r7, #12]
 80288f4:	2b00      	cmp	r3, #0
 80288f6:	d049      	beq.n	802898c <HAL_ADC_IRQHandler+0xd6>
 80288f8:	68bb      	ldr	r3, [r7, #8]
 80288fa:	2b00      	cmp	r3, #0
 80288fc:	d046      	beq.n	802898c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80288fe:	687b      	ldr	r3, [r7, #4]
 8028900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028902:	f003 0310 	and.w	r3, r3, #16
 8028906:	2b00      	cmp	r3, #0
 8028908:	d105      	bne.n	8028916 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 802890a:	687b      	ldr	r3, [r7, #4]
 802890c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802890e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8028912:	687b      	ldr	r3, [r7, #4]
 8028914:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8028916:	687b      	ldr	r3, [r7, #4]
 8028918:	681b      	ldr	r3, [r3, #0]
 802891a:	689b      	ldr	r3, [r3, #8]
 802891c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8028920:	2b00      	cmp	r3, #0
 8028922:	d12b      	bne.n	802897c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8028924:	687b      	ldr	r3, [r7, #4]
 8028926:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8028928:	2b00      	cmp	r3, #0
 802892a:	d127      	bne.n	802897c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 802892c:	687b      	ldr	r3, [r7, #4]
 802892e:	681b      	ldr	r3, [r3, #0]
 8028930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028932:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8028936:	2b00      	cmp	r3, #0
 8028938:	d006      	beq.n	8028948 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 802893a:	687b      	ldr	r3, [r7, #4]
 802893c:	681b      	ldr	r3, [r3, #0]
 802893e:	689b      	ldr	r3, [r3, #8]
 8028940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8028944:	2b00      	cmp	r3, #0
 8028946:	d119      	bne.n	802897c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8028948:	687b      	ldr	r3, [r7, #4]
 802894a:	681b      	ldr	r3, [r3, #0]
 802894c:	685a      	ldr	r2, [r3, #4]
 802894e:	687b      	ldr	r3, [r7, #4]
 8028950:	681b      	ldr	r3, [r3, #0]
 8028952:	f022 0220 	bic.w	r2, r2, #32
 8028956:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8028958:	687b      	ldr	r3, [r7, #4]
 802895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802895c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8028960:	687b      	ldr	r3, [r7, #4]
 8028962:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8028964:	687b      	ldr	r3, [r7, #4]
 8028966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802896c:	2b00      	cmp	r3, #0
 802896e:	d105      	bne.n	802897c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8028970:	687b      	ldr	r3, [r7, #4]
 8028972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028974:	f043 0201 	orr.w	r2, r3, #1
 8028978:	687b      	ldr	r3, [r7, #4]
 802897a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 802897c:	6878      	ldr	r0, [r7, #4]
 802897e:	f00c fcef 	bl	8035360 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8028982:	687b      	ldr	r3, [r7, #4]
 8028984:	681b      	ldr	r3, [r3, #0]
 8028986:	f06f 0212 	mvn.w	r2, #18
 802898a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 802898c:	687b      	ldr	r3, [r7, #4]
 802898e:	681b      	ldr	r3, [r3, #0]
 8028990:	681b      	ldr	r3, [r3, #0]
 8028992:	f003 0304 	and.w	r3, r3, #4
 8028996:	2b04      	cmp	r3, #4
 8028998:	bf0c      	ite	eq
 802899a:	2301      	moveq	r3, #1
 802899c:	2300      	movne	r3, #0
 802899e:	b2db      	uxtb	r3, r3
 80289a0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80289a2:	687b      	ldr	r3, [r7, #4]
 80289a4:	681b      	ldr	r3, [r3, #0]
 80289a6:	685b      	ldr	r3, [r3, #4]
 80289a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80289ac:	2b80      	cmp	r3, #128	; 0x80
 80289ae:	bf0c      	ite	eq
 80289b0:	2301      	moveq	r3, #1
 80289b2:	2300      	movne	r3, #0
 80289b4:	b2db      	uxtb	r3, r3
 80289b6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80289b8:	68fb      	ldr	r3, [r7, #12]
 80289ba:	2b00      	cmp	r3, #0
 80289bc:	d057      	beq.n	8028a6e <HAL_ADC_IRQHandler+0x1b8>
 80289be:	68bb      	ldr	r3, [r7, #8]
 80289c0:	2b00      	cmp	r3, #0
 80289c2:	d054      	beq.n	8028a6e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80289c4:	687b      	ldr	r3, [r7, #4]
 80289c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80289c8:	f003 0310 	and.w	r3, r3, #16
 80289cc:	2b00      	cmp	r3, #0
 80289ce:	d105      	bne.n	80289dc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80289d0:	687b      	ldr	r3, [r7, #4]
 80289d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80289d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80289d8:	687b      	ldr	r3, [r7, #4]
 80289da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80289dc:	687b      	ldr	r3, [r7, #4]
 80289de:	681b      	ldr	r3, [r3, #0]
 80289e0:	689b      	ldr	r3, [r3, #8]
 80289e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80289e6:	2b00      	cmp	r3, #0
 80289e8:	d139      	bne.n	8028a5e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80289ea:	687b      	ldr	r3, [r7, #4]
 80289ec:	681b      	ldr	r3, [r3, #0]
 80289ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80289f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80289f4:	2b00      	cmp	r3, #0
 80289f6:	d006      	beq.n	8028a06 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80289f8:	687b      	ldr	r3, [r7, #4]
 80289fa:	681b      	ldr	r3, [r3, #0]
 80289fc:	689b      	ldr	r3, [r3, #8]
 80289fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8028a02:	2b00      	cmp	r3, #0
 8028a04:	d12b      	bne.n	8028a5e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8028a06:	687b      	ldr	r3, [r7, #4]
 8028a08:	681b      	ldr	r3, [r3, #0]
 8028a0a:	685b      	ldr	r3, [r3, #4]
 8028a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8028a10:	2b00      	cmp	r3, #0
 8028a12:	d124      	bne.n	8028a5e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8028a14:	687b      	ldr	r3, [r7, #4]
 8028a16:	681b      	ldr	r3, [r3, #0]
 8028a18:	689b      	ldr	r3, [r3, #8]
 8028a1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8028a1e:	2b00      	cmp	r3, #0
 8028a20:	d11d      	bne.n	8028a5e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8028a22:	687b      	ldr	r3, [r7, #4]
 8028a24:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8028a26:	2b00      	cmp	r3, #0
 8028a28:	d119      	bne.n	8028a5e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8028a2a:	687b      	ldr	r3, [r7, #4]
 8028a2c:	681b      	ldr	r3, [r3, #0]
 8028a2e:	685a      	ldr	r2, [r3, #4]
 8028a30:	687b      	ldr	r3, [r7, #4]
 8028a32:	681b      	ldr	r3, [r3, #0]
 8028a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8028a38:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8028a3a:	687b      	ldr	r3, [r7, #4]
 8028a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8028a42:	687b      	ldr	r3, [r7, #4]
 8028a44:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8028a46:	687b      	ldr	r3, [r7, #4]
 8028a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028a4e:	2b00      	cmp	r3, #0
 8028a50:	d105      	bne.n	8028a5e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8028a52:	687b      	ldr	r3, [r7, #4]
 8028a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028a56:	f043 0201 	orr.w	r2, r3, #1
 8028a5a:	687b      	ldr	r3, [r7, #4]
 8028a5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8028a5e:	6878      	ldr	r0, [r7, #4]
 8028a60:	f000 faba 	bl	8028fd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8028a64:	687b      	ldr	r3, [r7, #4]
 8028a66:	681b      	ldr	r3, [r3, #0]
 8028a68:	f06f 020c 	mvn.w	r2, #12
 8028a6c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8028a6e:	687b      	ldr	r3, [r7, #4]
 8028a70:	681b      	ldr	r3, [r3, #0]
 8028a72:	681b      	ldr	r3, [r3, #0]
 8028a74:	f003 0301 	and.w	r3, r3, #1
 8028a78:	2b01      	cmp	r3, #1
 8028a7a:	bf0c      	ite	eq
 8028a7c:	2301      	moveq	r3, #1
 8028a7e:	2300      	movne	r3, #0
 8028a80:	b2db      	uxtb	r3, r3
 8028a82:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8028a84:	687b      	ldr	r3, [r7, #4]
 8028a86:	681b      	ldr	r3, [r3, #0]
 8028a88:	685b      	ldr	r3, [r3, #4]
 8028a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028a8e:	2b40      	cmp	r3, #64	; 0x40
 8028a90:	bf0c      	ite	eq
 8028a92:	2301      	moveq	r3, #1
 8028a94:	2300      	movne	r3, #0
 8028a96:	b2db      	uxtb	r3, r3
 8028a98:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8028a9a:	68fb      	ldr	r3, [r7, #12]
 8028a9c:	2b00      	cmp	r3, #0
 8028a9e:	d017      	beq.n	8028ad0 <HAL_ADC_IRQHandler+0x21a>
 8028aa0:	68bb      	ldr	r3, [r7, #8]
 8028aa2:	2b00      	cmp	r3, #0
 8028aa4:	d014      	beq.n	8028ad0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8028aa6:	687b      	ldr	r3, [r7, #4]
 8028aa8:	681b      	ldr	r3, [r3, #0]
 8028aaa:	681b      	ldr	r3, [r3, #0]
 8028aac:	f003 0301 	and.w	r3, r3, #1
 8028ab0:	2b01      	cmp	r3, #1
 8028ab2:	d10d      	bne.n	8028ad0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8028ab4:	687b      	ldr	r3, [r7, #4]
 8028ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028ab8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8028abc:	687b      	ldr	r3, [r7, #4]
 8028abe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8028ac0:	6878      	ldr	r0, [r7, #4]
 8028ac2:	f000 f846 	bl	8028b52 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8028ac6:	687b      	ldr	r3, [r7, #4]
 8028ac8:	681b      	ldr	r3, [r3, #0]
 8028aca:	f06f 0201 	mvn.w	r2, #1
 8028ace:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8028ad0:	687b      	ldr	r3, [r7, #4]
 8028ad2:	681b      	ldr	r3, [r3, #0]
 8028ad4:	681b      	ldr	r3, [r3, #0]
 8028ad6:	f003 0320 	and.w	r3, r3, #32
 8028ada:	2b20      	cmp	r3, #32
 8028adc:	bf0c      	ite	eq
 8028ade:	2301      	moveq	r3, #1
 8028ae0:	2300      	movne	r3, #0
 8028ae2:	b2db      	uxtb	r3, r3
 8028ae4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8028ae6:	687b      	ldr	r3, [r7, #4]
 8028ae8:	681b      	ldr	r3, [r3, #0]
 8028aea:	685b      	ldr	r3, [r3, #4]
 8028aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8028af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8028af4:	bf0c      	ite	eq
 8028af6:	2301      	moveq	r3, #1
 8028af8:	2300      	movne	r3, #0
 8028afa:	b2db      	uxtb	r3, r3
 8028afc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8028afe:	68fb      	ldr	r3, [r7, #12]
 8028b00:	2b00      	cmp	r3, #0
 8028b02:	d015      	beq.n	8028b30 <HAL_ADC_IRQHandler+0x27a>
 8028b04:	68bb      	ldr	r3, [r7, #8]
 8028b06:	2b00      	cmp	r3, #0
 8028b08:	d012      	beq.n	8028b30 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8028b0a:	687b      	ldr	r3, [r7, #4]
 8028b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028b0e:	f043 0202 	orr.w	r2, r3, #2
 8028b12:	687b      	ldr	r3, [r7, #4]
 8028b14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8028b16:	687b      	ldr	r3, [r7, #4]
 8028b18:	681b      	ldr	r3, [r3, #0]
 8028b1a:	f06f 0220 	mvn.w	r2, #32
 8028b1e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8028b20:	6878      	ldr	r0, [r7, #4]
 8028b22:	f000 f820 	bl	8028b66 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8028b26:	687b      	ldr	r3, [r7, #4]
 8028b28:	681b      	ldr	r3, [r3, #0]
 8028b2a:	f06f 0220 	mvn.w	r2, #32
 8028b2e:	601a      	str	r2, [r3, #0]
  }
}
 8028b30:	bf00      	nop
 8028b32:	3710      	adds	r7, #16
 8028b34:	46bd      	mov	sp, r7
 8028b36:	bd80      	pop	{r7, pc}

08028b38 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8028b38:	b480      	push	{r7}
 8028b3a:	b083      	sub	sp, #12
 8028b3c:	af00      	add	r7, sp, #0
 8028b3e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8028b40:	687b      	ldr	r3, [r7, #4]
 8028b42:	681b      	ldr	r3, [r3, #0]
 8028b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8028b46:	4618      	mov	r0, r3
 8028b48:	370c      	adds	r7, #12
 8028b4a:	46bd      	mov	sp, r7
 8028b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b50:	4770      	bx	lr

08028b52 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8028b52:	b480      	push	{r7}
 8028b54:	b083      	sub	sp, #12
 8028b56:	af00      	add	r7, sp, #0
 8028b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8028b5a:	bf00      	nop
 8028b5c:	370c      	adds	r7, #12
 8028b5e:	46bd      	mov	sp, r7
 8028b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b64:	4770      	bx	lr

08028b66 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8028b66:	b480      	push	{r7}
 8028b68:	b083      	sub	sp, #12
 8028b6a:	af00      	add	r7, sp, #0
 8028b6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8028b6e:	bf00      	nop
 8028b70:	370c      	adds	r7, #12
 8028b72:	46bd      	mov	sp, r7
 8028b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b78:	4770      	bx	lr
	...

08028b7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8028b7c:	b480      	push	{r7}
 8028b7e:	b085      	sub	sp, #20
 8028b80:	af00      	add	r7, sp, #0
 8028b82:	6078      	str	r0, [r7, #4]
 8028b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8028b86:	2300      	movs	r3, #0
 8028b88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8028b8a:	687b      	ldr	r3, [r7, #4]
 8028b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028b90:	2b01      	cmp	r3, #1
 8028b92:	d101      	bne.n	8028b98 <HAL_ADC_ConfigChannel+0x1c>
 8028b94:	2302      	movs	r3, #2
 8028b96:	e113      	b.n	8028dc0 <HAL_ADC_ConfigChannel+0x244>
 8028b98:	687b      	ldr	r3, [r7, #4]
 8028b9a:	2201      	movs	r2, #1
 8028b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8028ba0:	683b      	ldr	r3, [r7, #0]
 8028ba2:	681b      	ldr	r3, [r3, #0]
 8028ba4:	2b09      	cmp	r3, #9
 8028ba6:	d925      	bls.n	8028bf4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8028ba8:	687b      	ldr	r3, [r7, #4]
 8028baa:	681b      	ldr	r3, [r3, #0]
 8028bac:	68d9      	ldr	r1, [r3, #12]
 8028bae:	683b      	ldr	r3, [r7, #0]
 8028bb0:	681b      	ldr	r3, [r3, #0]
 8028bb2:	b29b      	uxth	r3, r3
 8028bb4:	461a      	mov	r2, r3
 8028bb6:	4613      	mov	r3, r2
 8028bb8:	005b      	lsls	r3, r3, #1
 8028bba:	4413      	add	r3, r2
 8028bbc:	3b1e      	subs	r3, #30
 8028bbe:	2207      	movs	r2, #7
 8028bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8028bc4:	43da      	mvns	r2, r3
 8028bc6:	687b      	ldr	r3, [r7, #4]
 8028bc8:	681b      	ldr	r3, [r3, #0]
 8028bca:	400a      	ands	r2, r1
 8028bcc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8028bce:	687b      	ldr	r3, [r7, #4]
 8028bd0:	681b      	ldr	r3, [r3, #0]
 8028bd2:	68d9      	ldr	r1, [r3, #12]
 8028bd4:	683b      	ldr	r3, [r7, #0]
 8028bd6:	689a      	ldr	r2, [r3, #8]
 8028bd8:	683b      	ldr	r3, [r7, #0]
 8028bda:	681b      	ldr	r3, [r3, #0]
 8028bdc:	b29b      	uxth	r3, r3
 8028bde:	4618      	mov	r0, r3
 8028be0:	4603      	mov	r3, r0
 8028be2:	005b      	lsls	r3, r3, #1
 8028be4:	4403      	add	r3, r0
 8028be6:	3b1e      	subs	r3, #30
 8028be8:	409a      	lsls	r2, r3
 8028bea:	687b      	ldr	r3, [r7, #4]
 8028bec:	681b      	ldr	r3, [r3, #0]
 8028bee:	430a      	orrs	r2, r1
 8028bf0:	60da      	str	r2, [r3, #12]
 8028bf2:	e022      	b.n	8028c3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8028bf4:	687b      	ldr	r3, [r7, #4]
 8028bf6:	681b      	ldr	r3, [r3, #0]
 8028bf8:	6919      	ldr	r1, [r3, #16]
 8028bfa:	683b      	ldr	r3, [r7, #0]
 8028bfc:	681b      	ldr	r3, [r3, #0]
 8028bfe:	b29b      	uxth	r3, r3
 8028c00:	461a      	mov	r2, r3
 8028c02:	4613      	mov	r3, r2
 8028c04:	005b      	lsls	r3, r3, #1
 8028c06:	4413      	add	r3, r2
 8028c08:	2207      	movs	r2, #7
 8028c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8028c0e:	43da      	mvns	r2, r3
 8028c10:	687b      	ldr	r3, [r7, #4]
 8028c12:	681b      	ldr	r3, [r3, #0]
 8028c14:	400a      	ands	r2, r1
 8028c16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8028c18:	687b      	ldr	r3, [r7, #4]
 8028c1a:	681b      	ldr	r3, [r3, #0]
 8028c1c:	6919      	ldr	r1, [r3, #16]
 8028c1e:	683b      	ldr	r3, [r7, #0]
 8028c20:	689a      	ldr	r2, [r3, #8]
 8028c22:	683b      	ldr	r3, [r7, #0]
 8028c24:	681b      	ldr	r3, [r3, #0]
 8028c26:	b29b      	uxth	r3, r3
 8028c28:	4618      	mov	r0, r3
 8028c2a:	4603      	mov	r3, r0
 8028c2c:	005b      	lsls	r3, r3, #1
 8028c2e:	4403      	add	r3, r0
 8028c30:	409a      	lsls	r2, r3
 8028c32:	687b      	ldr	r3, [r7, #4]
 8028c34:	681b      	ldr	r3, [r3, #0]
 8028c36:	430a      	orrs	r2, r1
 8028c38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8028c3a:	683b      	ldr	r3, [r7, #0]
 8028c3c:	685b      	ldr	r3, [r3, #4]
 8028c3e:	2b06      	cmp	r3, #6
 8028c40:	d824      	bhi.n	8028c8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8028c42:	687b      	ldr	r3, [r7, #4]
 8028c44:	681b      	ldr	r3, [r3, #0]
 8028c46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8028c48:	683b      	ldr	r3, [r7, #0]
 8028c4a:	685a      	ldr	r2, [r3, #4]
 8028c4c:	4613      	mov	r3, r2
 8028c4e:	009b      	lsls	r3, r3, #2
 8028c50:	4413      	add	r3, r2
 8028c52:	3b05      	subs	r3, #5
 8028c54:	221f      	movs	r2, #31
 8028c56:	fa02 f303 	lsl.w	r3, r2, r3
 8028c5a:	43da      	mvns	r2, r3
 8028c5c:	687b      	ldr	r3, [r7, #4]
 8028c5e:	681b      	ldr	r3, [r3, #0]
 8028c60:	400a      	ands	r2, r1
 8028c62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8028c64:	687b      	ldr	r3, [r7, #4]
 8028c66:	681b      	ldr	r3, [r3, #0]
 8028c68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8028c6a:	683b      	ldr	r3, [r7, #0]
 8028c6c:	681b      	ldr	r3, [r3, #0]
 8028c6e:	b29b      	uxth	r3, r3
 8028c70:	4618      	mov	r0, r3
 8028c72:	683b      	ldr	r3, [r7, #0]
 8028c74:	685a      	ldr	r2, [r3, #4]
 8028c76:	4613      	mov	r3, r2
 8028c78:	009b      	lsls	r3, r3, #2
 8028c7a:	4413      	add	r3, r2
 8028c7c:	3b05      	subs	r3, #5
 8028c7e:	fa00 f203 	lsl.w	r2, r0, r3
 8028c82:	687b      	ldr	r3, [r7, #4]
 8028c84:	681b      	ldr	r3, [r3, #0]
 8028c86:	430a      	orrs	r2, r1
 8028c88:	635a      	str	r2, [r3, #52]	; 0x34
 8028c8a:	e04c      	b.n	8028d26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8028c8c:	683b      	ldr	r3, [r7, #0]
 8028c8e:	685b      	ldr	r3, [r3, #4]
 8028c90:	2b0c      	cmp	r3, #12
 8028c92:	d824      	bhi.n	8028cde <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8028c94:	687b      	ldr	r3, [r7, #4]
 8028c96:	681b      	ldr	r3, [r3, #0]
 8028c98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8028c9a:	683b      	ldr	r3, [r7, #0]
 8028c9c:	685a      	ldr	r2, [r3, #4]
 8028c9e:	4613      	mov	r3, r2
 8028ca0:	009b      	lsls	r3, r3, #2
 8028ca2:	4413      	add	r3, r2
 8028ca4:	3b23      	subs	r3, #35	; 0x23
 8028ca6:	221f      	movs	r2, #31
 8028ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8028cac:	43da      	mvns	r2, r3
 8028cae:	687b      	ldr	r3, [r7, #4]
 8028cb0:	681b      	ldr	r3, [r3, #0]
 8028cb2:	400a      	ands	r2, r1
 8028cb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8028cb6:	687b      	ldr	r3, [r7, #4]
 8028cb8:	681b      	ldr	r3, [r3, #0]
 8028cba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8028cbc:	683b      	ldr	r3, [r7, #0]
 8028cbe:	681b      	ldr	r3, [r3, #0]
 8028cc0:	b29b      	uxth	r3, r3
 8028cc2:	4618      	mov	r0, r3
 8028cc4:	683b      	ldr	r3, [r7, #0]
 8028cc6:	685a      	ldr	r2, [r3, #4]
 8028cc8:	4613      	mov	r3, r2
 8028cca:	009b      	lsls	r3, r3, #2
 8028ccc:	4413      	add	r3, r2
 8028cce:	3b23      	subs	r3, #35	; 0x23
 8028cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8028cd4:	687b      	ldr	r3, [r7, #4]
 8028cd6:	681b      	ldr	r3, [r3, #0]
 8028cd8:	430a      	orrs	r2, r1
 8028cda:	631a      	str	r2, [r3, #48]	; 0x30
 8028cdc:	e023      	b.n	8028d26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8028cde:	687b      	ldr	r3, [r7, #4]
 8028ce0:	681b      	ldr	r3, [r3, #0]
 8028ce2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8028ce4:	683b      	ldr	r3, [r7, #0]
 8028ce6:	685a      	ldr	r2, [r3, #4]
 8028ce8:	4613      	mov	r3, r2
 8028cea:	009b      	lsls	r3, r3, #2
 8028cec:	4413      	add	r3, r2
 8028cee:	3b41      	subs	r3, #65	; 0x41
 8028cf0:	221f      	movs	r2, #31
 8028cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8028cf6:	43da      	mvns	r2, r3
 8028cf8:	687b      	ldr	r3, [r7, #4]
 8028cfa:	681b      	ldr	r3, [r3, #0]
 8028cfc:	400a      	ands	r2, r1
 8028cfe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8028d00:	687b      	ldr	r3, [r7, #4]
 8028d02:	681b      	ldr	r3, [r3, #0]
 8028d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8028d06:	683b      	ldr	r3, [r7, #0]
 8028d08:	681b      	ldr	r3, [r3, #0]
 8028d0a:	b29b      	uxth	r3, r3
 8028d0c:	4618      	mov	r0, r3
 8028d0e:	683b      	ldr	r3, [r7, #0]
 8028d10:	685a      	ldr	r2, [r3, #4]
 8028d12:	4613      	mov	r3, r2
 8028d14:	009b      	lsls	r3, r3, #2
 8028d16:	4413      	add	r3, r2
 8028d18:	3b41      	subs	r3, #65	; 0x41
 8028d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8028d1e:	687b      	ldr	r3, [r7, #4]
 8028d20:	681b      	ldr	r3, [r3, #0]
 8028d22:	430a      	orrs	r2, r1
 8028d24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8028d26:	4b29      	ldr	r3, [pc, #164]	; (8028dcc <HAL_ADC_ConfigChannel+0x250>)
 8028d28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8028d2a:	687b      	ldr	r3, [r7, #4]
 8028d2c:	681b      	ldr	r3, [r3, #0]
 8028d2e:	4a28      	ldr	r2, [pc, #160]	; (8028dd0 <HAL_ADC_ConfigChannel+0x254>)
 8028d30:	4293      	cmp	r3, r2
 8028d32:	d10f      	bne.n	8028d54 <HAL_ADC_ConfigChannel+0x1d8>
 8028d34:	683b      	ldr	r3, [r7, #0]
 8028d36:	681b      	ldr	r3, [r3, #0]
 8028d38:	2b12      	cmp	r3, #18
 8028d3a:	d10b      	bne.n	8028d54 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8028d3c:	68fb      	ldr	r3, [r7, #12]
 8028d3e:	685b      	ldr	r3, [r3, #4]
 8028d40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8028d44:	68fb      	ldr	r3, [r7, #12]
 8028d46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8028d48:	68fb      	ldr	r3, [r7, #12]
 8028d4a:	685b      	ldr	r3, [r3, #4]
 8028d4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8028d50:	68fb      	ldr	r3, [r7, #12]
 8028d52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8028d54:	687b      	ldr	r3, [r7, #4]
 8028d56:	681b      	ldr	r3, [r3, #0]
 8028d58:	4a1d      	ldr	r2, [pc, #116]	; (8028dd0 <HAL_ADC_ConfigChannel+0x254>)
 8028d5a:	4293      	cmp	r3, r2
 8028d5c:	d12b      	bne.n	8028db6 <HAL_ADC_ConfigChannel+0x23a>
 8028d5e:	683b      	ldr	r3, [r7, #0]
 8028d60:	681b      	ldr	r3, [r3, #0]
 8028d62:	4a1c      	ldr	r2, [pc, #112]	; (8028dd4 <HAL_ADC_ConfigChannel+0x258>)
 8028d64:	4293      	cmp	r3, r2
 8028d66:	d003      	beq.n	8028d70 <HAL_ADC_ConfigChannel+0x1f4>
 8028d68:	683b      	ldr	r3, [r7, #0]
 8028d6a:	681b      	ldr	r3, [r3, #0]
 8028d6c:	2b11      	cmp	r3, #17
 8028d6e:	d122      	bne.n	8028db6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8028d70:	68fb      	ldr	r3, [r7, #12]
 8028d72:	685b      	ldr	r3, [r3, #4]
 8028d74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8028d78:	68fb      	ldr	r3, [r7, #12]
 8028d7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8028d7c:	68fb      	ldr	r3, [r7, #12]
 8028d7e:	685b      	ldr	r3, [r3, #4]
 8028d80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8028d84:	68fb      	ldr	r3, [r7, #12]
 8028d86:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8028d88:	683b      	ldr	r3, [r7, #0]
 8028d8a:	681b      	ldr	r3, [r3, #0]
 8028d8c:	4a11      	ldr	r2, [pc, #68]	; (8028dd4 <HAL_ADC_ConfigChannel+0x258>)
 8028d8e:	4293      	cmp	r3, r2
 8028d90:	d111      	bne.n	8028db6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8028d92:	4b11      	ldr	r3, [pc, #68]	; (8028dd8 <HAL_ADC_ConfigChannel+0x25c>)
 8028d94:	681b      	ldr	r3, [r3, #0]
 8028d96:	4a11      	ldr	r2, [pc, #68]	; (8028ddc <HAL_ADC_ConfigChannel+0x260>)
 8028d98:	fba2 2303 	umull	r2, r3, r2, r3
 8028d9c:	0c9a      	lsrs	r2, r3, #18
 8028d9e:	4613      	mov	r3, r2
 8028da0:	009b      	lsls	r3, r3, #2
 8028da2:	4413      	add	r3, r2
 8028da4:	005b      	lsls	r3, r3, #1
 8028da6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8028da8:	e002      	b.n	8028db0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8028daa:	68bb      	ldr	r3, [r7, #8]
 8028dac:	3b01      	subs	r3, #1
 8028dae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8028db0:	68bb      	ldr	r3, [r7, #8]
 8028db2:	2b00      	cmp	r3, #0
 8028db4:	d1f9      	bne.n	8028daa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8028db6:	687b      	ldr	r3, [r7, #4]
 8028db8:	2200      	movs	r2, #0
 8028dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8028dbe:	2300      	movs	r3, #0
}
 8028dc0:	4618      	mov	r0, r3
 8028dc2:	3714      	adds	r7, #20
 8028dc4:	46bd      	mov	sp, r7
 8028dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028dca:	4770      	bx	lr
 8028dcc:	40012300 	.word	0x40012300
 8028dd0:	40012000 	.word	0x40012000
 8028dd4:	10000012 	.word	0x10000012
 8028dd8:	200014e4 	.word	0x200014e4
 8028ddc:	431bde83 	.word	0x431bde83

08028de0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8028de0:	b480      	push	{r7}
 8028de2:	b085      	sub	sp, #20
 8028de4:	af00      	add	r7, sp, #0
 8028de6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8028de8:	4b79      	ldr	r3, [pc, #484]	; (8028fd0 <ADC_Init+0x1f0>)
 8028dea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8028dec:	68fb      	ldr	r3, [r7, #12]
 8028dee:	685b      	ldr	r3, [r3, #4]
 8028df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8028df4:	68fb      	ldr	r3, [r7, #12]
 8028df6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8028df8:	68fb      	ldr	r3, [r7, #12]
 8028dfa:	685a      	ldr	r2, [r3, #4]
 8028dfc:	687b      	ldr	r3, [r7, #4]
 8028dfe:	685b      	ldr	r3, [r3, #4]
 8028e00:	431a      	orrs	r2, r3
 8028e02:	68fb      	ldr	r3, [r7, #12]
 8028e04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8028e06:	687b      	ldr	r3, [r7, #4]
 8028e08:	681b      	ldr	r3, [r3, #0]
 8028e0a:	685a      	ldr	r2, [r3, #4]
 8028e0c:	687b      	ldr	r3, [r7, #4]
 8028e0e:	681b      	ldr	r3, [r3, #0]
 8028e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8028e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8028e16:	687b      	ldr	r3, [r7, #4]
 8028e18:	681b      	ldr	r3, [r3, #0]
 8028e1a:	6859      	ldr	r1, [r3, #4]
 8028e1c:	687b      	ldr	r3, [r7, #4]
 8028e1e:	691b      	ldr	r3, [r3, #16]
 8028e20:	021a      	lsls	r2, r3, #8
 8028e22:	687b      	ldr	r3, [r7, #4]
 8028e24:	681b      	ldr	r3, [r3, #0]
 8028e26:	430a      	orrs	r2, r1
 8028e28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8028e2a:	687b      	ldr	r3, [r7, #4]
 8028e2c:	681b      	ldr	r3, [r3, #0]
 8028e2e:	685a      	ldr	r2, [r3, #4]
 8028e30:	687b      	ldr	r3, [r7, #4]
 8028e32:	681b      	ldr	r3, [r3, #0]
 8028e34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8028e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8028e3a:	687b      	ldr	r3, [r7, #4]
 8028e3c:	681b      	ldr	r3, [r3, #0]
 8028e3e:	6859      	ldr	r1, [r3, #4]
 8028e40:	687b      	ldr	r3, [r7, #4]
 8028e42:	689a      	ldr	r2, [r3, #8]
 8028e44:	687b      	ldr	r3, [r7, #4]
 8028e46:	681b      	ldr	r3, [r3, #0]
 8028e48:	430a      	orrs	r2, r1
 8028e4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8028e4c:	687b      	ldr	r3, [r7, #4]
 8028e4e:	681b      	ldr	r3, [r3, #0]
 8028e50:	689a      	ldr	r2, [r3, #8]
 8028e52:	687b      	ldr	r3, [r7, #4]
 8028e54:	681b      	ldr	r3, [r3, #0]
 8028e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8028e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8028e5c:	687b      	ldr	r3, [r7, #4]
 8028e5e:	681b      	ldr	r3, [r3, #0]
 8028e60:	6899      	ldr	r1, [r3, #8]
 8028e62:	687b      	ldr	r3, [r7, #4]
 8028e64:	68da      	ldr	r2, [r3, #12]
 8028e66:	687b      	ldr	r3, [r7, #4]
 8028e68:	681b      	ldr	r3, [r3, #0]
 8028e6a:	430a      	orrs	r2, r1
 8028e6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8028e6e:	687b      	ldr	r3, [r7, #4]
 8028e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028e72:	4a58      	ldr	r2, [pc, #352]	; (8028fd4 <ADC_Init+0x1f4>)
 8028e74:	4293      	cmp	r3, r2
 8028e76:	d022      	beq.n	8028ebe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8028e78:	687b      	ldr	r3, [r7, #4]
 8028e7a:	681b      	ldr	r3, [r3, #0]
 8028e7c:	689a      	ldr	r2, [r3, #8]
 8028e7e:	687b      	ldr	r3, [r7, #4]
 8028e80:	681b      	ldr	r3, [r3, #0]
 8028e82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8028e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8028e88:	687b      	ldr	r3, [r7, #4]
 8028e8a:	681b      	ldr	r3, [r3, #0]
 8028e8c:	6899      	ldr	r1, [r3, #8]
 8028e8e:	687b      	ldr	r3, [r7, #4]
 8028e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8028e92:	687b      	ldr	r3, [r7, #4]
 8028e94:	681b      	ldr	r3, [r3, #0]
 8028e96:	430a      	orrs	r2, r1
 8028e98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8028e9a:	687b      	ldr	r3, [r7, #4]
 8028e9c:	681b      	ldr	r3, [r3, #0]
 8028e9e:	689a      	ldr	r2, [r3, #8]
 8028ea0:	687b      	ldr	r3, [r7, #4]
 8028ea2:	681b      	ldr	r3, [r3, #0]
 8028ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8028ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8028eaa:	687b      	ldr	r3, [r7, #4]
 8028eac:	681b      	ldr	r3, [r3, #0]
 8028eae:	6899      	ldr	r1, [r3, #8]
 8028eb0:	687b      	ldr	r3, [r7, #4]
 8028eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028eb4:	687b      	ldr	r3, [r7, #4]
 8028eb6:	681b      	ldr	r3, [r3, #0]
 8028eb8:	430a      	orrs	r2, r1
 8028eba:	609a      	str	r2, [r3, #8]
 8028ebc:	e00f      	b.n	8028ede <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8028ebe:	687b      	ldr	r3, [r7, #4]
 8028ec0:	681b      	ldr	r3, [r3, #0]
 8028ec2:	689a      	ldr	r2, [r3, #8]
 8028ec4:	687b      	ldr	r3, [r7, #4]
 8028ec6:	681b      	ldr	r3, [r3, #0]
 8028ec8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8028ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8028ece:	687b      	ldr	r3, [r7, #4]
 8028ed0:	681b      	ldr	r3, [r3, #0]
 8028ed2:	689a      	ldr	r2, [r3, #8]
 8028ed4:	687b      	ldr	r3, [r7, #4]
 8028ed6:	681b      	ldr	r3, [r3, #0]
 8028ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8028edc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8028ede:	687b      	ldr	r3, [r7, #4]
 8028ee0:	681b      	ldr	r3, [r3, #0]
 8028ee2:	689a      	ldr	r2, [r3, #8]
 8028ee4:	687b      	ldr	r3, [r7, #4]
 8028ee6:	681b      	ldr	r3, [r3, #0]
 8028ee8:	f022 0202 	bic.w	r2, r2, #2
 8028eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8028eee:	687b      	ldr	r3, [r7, #4]
 8028ef0:	681b      	ldr	r3, [r3, #0]
 8028ef2:	6899      	ldr	r1, [r3, #8]
 8028ef4:	687b      	ldr	r3, [r7, #4]
 8028ef6:	7e1b      	ldrb	r3, [r3, #24]
 8028ef8:	005a      	lsls	r2, r3, #1
 8028efa:	687b      	ldr	r3, [r7, #4]
 8028efc:	681b      	ldr	r3, [r3, #0]
 8028efe:	430a      	orrs	r2, r1
 8028f00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8028f02:	687b      	ldr	r3, [r7, #4]
 8028f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8028f08:	2b00      	cmp	r3, #0
 8028f0a:	d01b      	beq.n	8028f44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	681b      	ldr	r3, [r3, #0]
 8028f10:	685a      	ldr	r2, [r3, #4]
 8028f12:	687b      	ldr	r3, [r7, #4]
 8028f14:	681b      	ldr	r3, [r3, #0]
 8028f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8028f1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8028f1c:	687b      	ldr	r3, [r7, #4]
 8028f1e:	681b      	ldr	r3, [r3, #0]
 8028f20:	685a      	ldr	r2, [r3, #4]
 8028f22:	687b      	ldr	r3, [r7, #4]
 8028f24:	681b      	ldr	r3, [r3, #0]
 8028f26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8028f2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8028f2c:	687b      	ldr	r3, [r7, #4]
 8028f2e:	681b      	ldr	r3, [r3, #0]
 8028f30:	6859      	ldr	r1, [r3, #4]
 8028f32:	687b      	ldr	r3, [r7, #4]
 8028f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028f36:	3b01      	subs	r3, #1
 8028f38:	035a      	lsls	r2, r3, #13
 8028f3a:	687b      	ldr	r3, [r7, #4]
 8028f3c:	681b      	ldr	r3, [r3, #0]
 8028f3e:	430a      	orrs	r2, r1
 8028f40:	605a      	str	r2, [r3, #4]
 8028f42:	e007      	b.n	8028f54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8028f44:	687b      	ldr	r3, [r7, #4]
 8028f46:	681b      	ldr	r3, [r3, #0]
 8028f48:	685a      	ldr	r2, [r3, #4]
 8028f4a:	687b      	ldr	r3, [r7, #4]
 8028f4c:	681b      	ldr	r3, [r3, #0]
 8028f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8028f52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8028f54:	687b      	ldr	r3, [r7, #4]
 8028f56:	681b      	ldr	r3, [r3, #0]
 8028f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028f5a:	687b      	ldr	r3, [r7, #4]
 8028f5c:	681b      	ldr	r3, [r3, #0]
 8028f5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8028f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8028f64:	687b      	ldr	r3, [r7, #4]
 8028f66:	681b      	ldr	r3, [r3, #0]
 8028f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8028f6a:	687b      	ldr	r3, [r7, #4]
 8028f6c:	69db      	ldr	r3, [r3, #28]
 8028f6e:	3b01      	subs	r3, #1
 8028f70:	051a      	lsls	r2, r3, #20
 8028f72:	687b      	ldr	r3, [r7, #4]
 8028f74:	681b      	ldr	r3, [r3, #0]
 8028f76:	430a      	orrs	r2, r1
 8028f78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8028f7a:	687b      	ldr	r3, [r7, #4]
 8028f7c:	681b      	ldr	r3, [r3, #0]
 8028f7e:	689a      	ldr	r2, [r3, #8]
 8028f80:	687b      	ldr	r3, [r7, #4]
 8028f82:	681b      	ldr	r3, [r3, #0]
 8028f84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8028f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8028f8a:	687b      	ldr	r3, [r7, #4]
 8028f8c:	681b      	ldr	r3, [r3, #0]
 8028f8e:	6899      	ldr	r1, [r3, #8]
 8028f90:	687b      	ldr	r3, [r7, #4]
 8028f92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8028f96:	025a      	lsls	r2, r3, #9
 8028f98:	687b      	ldr	r3, [r7, #4]
 8028f9a:	681b      	ldr	r3, [r3, #0]
 8028f9c:	430a      	orrs	r2, r1
 8028f9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8028fa0:	687b      	ldr	r3, [r7, #4]
 8028fa2:	681b      	ldr	r3, [r3, #0]
 8028fa4:	689a      	ldr	r2, [r3, #8]
 8028fa6:	687b      	ldr	r3, [r7, #4]
 8028fa8:	681b      	ldr	r3, [r3, #0]
 8028faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8028fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8028fb0:	687b      	ldr	r3, [r7, #4]
 8028fb2:	681b      	ldr	r3, [r3, #0]
 8028fb4:	6899      	ldr	r1, [r3, #8]
 8028fb6:	687b      	ldr	r3, [r7, #4]
 8028fb8:	695b      	ldr	r3, [r3, #20]
 8028fba:	029a      	lsls	r2, r3, #10
 8028fbc:	687b      	ldr	r3, [r7, #4]
 8028fbe:	681b      	ldr	r3, [r3, #0]
 8028fc0:	430a      	orrs	r2, r1
 8028fc2:	609a      	str	r2, [r3, #8]
}
 8028fc4:	bf00      	nop
 8028fc6:	3714      	adds	r7, #20
 8028fc8:	46bd      	mov	sp, r7
 8028fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fce:	4770      	bx	lr
 8028fd0:	40012300 	.word	0x40012300
 8028fd4:	0f000001 	.word	0x0f000001

08028fd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8028fd8:	b480      	push	{r7}
 8028fda:	b083      	sub	sp, #12
 8028fdc:	af00      	add	r7, sp, #0
 8028fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8028fe0:	bf00      	nop
 8028fe2:	370c      	adds	r7, #12
 8028fe4:	46bd      	mov	sp, r7
 8028fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fea:	4770      	bx	lr

08028fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8028fec:	b480      	push	{r7}
 8028fee:	b085      	sub	sp, #20
 8028ff0:	af00      	add	r7, sp, #0
 8028ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8028ff4:	687b      	ldr	r3, [r7, #4]
 8028ff6:	f003 0307 	and.w	r3, r3, #7
 8028ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8028ffc:	4b0c      	ldr	r3, [pc, #48]	; (8029030 <__NVIC_SetPriorityGrouping+0x44>)
 8028ffe:	68db      	ldr	r3, [r3, #12]
 8029000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8029002:	68ba      	ldr	r2, [r7, #8]
 8029004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8029008:	4013      	ands	r3, r2
 802900a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802900c:	68fb      	ldr	r3, [r7, #12]
 802900e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8029010:	68bb      	ldr	r3, [r7, #8]
 8029012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8029014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8029018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 802901c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802901e:	4a04      	ldr	r2, [pc, #16]	; (8029030 <__NVIC_SetPriorityGrouping+0x44>)
 8029020:	68bb      	ldr	r3, [r7, #8]
 8029022:	60d3      	str	r3, [r2, #12]
}
 8029024:	bf00      	nop
 8029026:	3714      	adds	r7, #20
 8029028:	46bd      	mov	sp, r7
 802902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802902e:	4770      	bx	lr
 8029030:	e000ed00 	.word	0xe000ed00

08029034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8029034:	b480      	push	{r7}
 8029036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8029038:	4b04      	ldr	r3, [pc, #16]	; (802904c <__NVIC_GetPriorityGrouping+0x18>)
 802903a:	68db      	ldr	r3, [r3, #12]
 802903c:	0a1b      	lsrs	r3, r3, #8
 802903e:	f003 0307 	and.w	r3, r3, #7
}
 8029042:	4618      	mov	r0, r3
 8029044:	46bd      	mov	sp, r7
 8029046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802904a:	4770      	bx	lr
 802904c:	e000ed00 	.word	0xe000ed00

08029050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8029050:	b480      	push	{r7}
 8029052:	b083      	sub	sp, #12
 8029054:	af00      	add	r7, sp, #0
 8029056:	4603      	mov	r3, r0
 8029058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802905a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802905e:	2b00      	cmp	r3, #0
 8029060:	db0b      	blt.n	802907a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8029062:	79fb      	ldrb	r3, [r7, #7]
 8029064:	f003 021f 	and.w	r2, r3, #31
 8029068:	4907      	ldr	r1, [pc, #28]	; (8029088 <__NVIC_EnableIRQ+0x38>)
 802906a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802906e:	095b      	lsrs	r3, r3, #5
 8029070:	2001      	movs	r0, #1
 8029072:	fa00 f202 	lsl.w	r2, r0, r2
 8029076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802907a:	bf00      	nop
 802907c:	370c      	adds	r7, #12
 802907e:	46bd      	mov	sp, r7
 8029080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029084:	4770      	bx	lr
 8029086:	bf00      	nop
 8029088:	e000e100 	.word	0xe000e100

0802908c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802908c:	b480      	push	{r7}
 802908e:	b083      	sub	sp, #12
 8029090:	af00      	add	r7, sp, #0
 8029092:	4603      	mov	r3, r0
 8029094:	6039      	str	r1, [r7, #0]
 8029096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8029098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802909c:	2b00      	cmp	r3, #0
 802909e:	db0a      	blt.n	80290b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80290a0:	683b      	ldr	r3, [r7, #0]
 80290a2:	b2da      	uxtb	r2, r3
 80290a4:	490c      	ldr	r1, [pc, #48]	; (80290d8 <__NVIC_SetPriority+0x4c>)
 80290a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80290aa:	0112      	lsls	r2, r2, #4
 80290ac:	b2d2      	uxtb	r2, r2
 80290ae:	440b      	add	r3, r1
 80290b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80290b4:	e00a      	b.n	80290cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80290b6:	683b      	ldr	r3, [r7, #0]
 80290b8:	b2da      	uxtb	r2, r3
 80290ba:	4908      	ldr	r1, [pc, #32]	; (80290dc <__NVIC_SetPriority+0x50>)
 80290bc:	79fb      	ldrb	r3, [r7, #7]
 80290be:	f003 030f 	and.w	r3, r3, #15
 80290c2:	3b04      	subs	r3, #4
 80290c4:	0112      	lsls	r2, r2, #4
 80290c6:	b2d2      	uxtb	r2, r2
 80290c8:	440b      	add	r3, r1
 80290ca:	761a      	strb	r2, [r3, #24]
}
 80290cc:	bf00      	nop
 80290ce:	370c      	adds	r7, #12
 80290d0:	46bd      	mov	sp, r7
 80290d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80290d6:	4770      	bx	lr
 80290d8:	e000e100 	.word	0xe000e100
 80290dc:	e000ed00 	.word	0xe000ed00

080290e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80290e0:	b480      	push	{r7}
 80290e2:	b089      	sub	sp, #36	; 0x24
 80290e4:	af00      	add	r7, sp, #0
 80290e6:	60f8      	str	r0, [r7, #12]
 80290e8:	60b9      	str	r1, [r7, #8]
 80290ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80290ec:	68fb      	ldr	r3, [r7, #12]
 80290ee:	f003 0307 	and.w	r3, r3, #7
 80290f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80290f4:	69fb      	ldr	r3, [r7, #28]
 80290f6:	f1c3 0307 	rsb	r3, r3, #7
 80290fa:	2b04      	cmp	r3, #4
 80290fc:	bf28      	it	cs
 80290fe:	2304      	movcs	r3, #4
 8029100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8029102:	69fb      	ldr	r3, [r7, #28]
 8029104:	3304      	adds	r3, #4
 8029106:	2b06      	cmp	r3, #6
 8029108:	d902      	bls.n	8029110 <NVIC_EncodePriority+0x30>
 802910a:	69fb      	ldr	r3, [r7, #28]
 802910c:	3b03      	subs	r3, #3
 802910e:	e000      	b.n	8029112 <NVIC_EncodePriority+0x32>
 8029110:	2300      	movs	r3, #0
 8029112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8029114:	f04f 32ff 	mov.w	r2, #4294967295
 8029118:	69bb      	ldr	r3, [r7, #24]
 802911a:	fa02 f303 	lsl.w	r3, r2, r3
 802911e:	43da      	mvns	r2, r3
 8029120:	68bb      	ldr	r3, [r7, #8]
 8029122:	401a      	ands	r2, r3
 8029124:	697b      	ldr	r3, [r7, #20]
 8029126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8029128:	f04f 31ff 	mov.w	r1, #4294967295
 802912c:	697b      	ldr	r3, [r7, #20]
 802912e:	fa01 f303 	lsl.w	r3, r1, r3
 8029132:	43d9      	mvns	r1, r3
 8029134:	687b      	ldr	r3, [r7, #4]
 8029136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8029138:	4313      	orrs	r3, r2
         );
}
 802913a:	4618      	mov	r0, r3
 802913c:	3724      	adds	r7, #36	; 0x24
 802913e:	46bd      	mov	sp, r7
 8029140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029144:	4770      	bx	lr
	...

08029148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8029148:	b580      	push	{r7, lr}
 802914a:	b082      	sub	sp, #8
 802914c:	af00      	add	r7, sp, #0
 802914e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8029150:	687b      	ldr	r3, [r7, #4]
 8029152:	3b01      	subs	r3, #1
 8029154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8029158:	d301      	bcc.n	802915e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802915a:	2301      	movs	r3, #1
 802915c:	e00f      	b.n	802917e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802915e:	4a0a      	ldr	r2, [pc, #40]	; (8029188 <SysTick_Config+0x40>)
 8029160:	687b      	ldr	r3, [r7, #4]
 8029162:	3b01      	subs	r3, #1
 8029164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8029166:	210f      	movs	r1, #15
 8029168:	f04f 30ff 	mov.w	r0, #4294967295
 802916c:	f7ff ff8e 	bl	802908c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8029170:	4b05      	ldr	r3, [pc, #20]	; (8029188 <SysTick_Config+0x40>)
 8029172:	2200      	movs	r2, #0
 8029174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8029176:	4b04      	ldr	r3, [pc, #16]	; (8029188 <SysTick_Config+0x40>)
 8029178:	2207      	movs	r2, #7
 802917a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802917c:	2300      	movs	r3, #0
}
 802917e:	4618      	mov	r0, r3
 8029180:	3708      	adds	r7, #8
 8029182:	46bd      	mov	sp, r7
 8029184:	bd80      	pop	{r7, pc}
 8029186:	bf00      	nop
 8029188:	e000e010 	.word	0xe000e010

0802918c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802918c:	b580      	push	{r7, lr}
 802918e:	b082      	sub	sp, #8
 8029190:	af00      	add	r7, sp, #0
 8029192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8029194:	6878      	ldr	r0, [r7, #4]
 8029196:	f7ff ff29 	bl	8028fec <__NVIC_SetPriorityGrouping>
}
 802919a:	bf00      	nop
 802919c:	3708      	adds	r7, #8
 802919e:	46bd      	mov	sp, r7
 80291a0:	bd80      	pop	{r7, pc}

080291a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80291a2:	b580      	push	{r7, lr}
 80291a4:	b086      	sub	sp, #24
 80291a6:	af00      	add	r7, sp, #0
 80291a8:	4603      	mov	r3, r0
 80291aa:	60b9      	str	r1, [r7, #8]
 80291ac:	607a      	str	r2, [r7, #4]
 80291ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80291b0:	2300      	movs	r3, #0
 80291b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80291b4:	f7ff ff3e 	bl	8029034 <__NVIC_GetPriorityGrouping>
 80291b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80291ba:	687a      	ldr	r2, [r7, #4]
 80291bc:	68b9      	ldr	r1, [r7, #8]
 80291be:	6978      	ldr	r0, [r7, #20]
 80291c0:	f7ff ff8e 	bl	80290e0 <NVIC_EncodePriority>
 80291c4:	4602      	mov	r2, r0
 80291c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80291ca:	4611      	mov	r1, r2
 80291cc:	4618      	mov	r0, r3
 80291ce:	f7ff ff5d 	bl	802908c <__NVIC_SetPriority>
}
 80291d2:	bf00      	nop
 80291d4:	3718      	adds	r7, #24
 80291d6:	46bd      	mov	sp, r7
 80291d8:	bd80      	pop	{r7, pc}

080291da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80291da:	b580      	push	{r7, lr}
 80291dc:	b082      	sub	sp, #8
 80291de:	af00      	add	r7, sp, #0
 80291e0:	4603      	mov	r3, r0
 80291e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80291e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80291e8:	4618      	mov	r0, r3
 80291ea:	f7ff ff31 	bl	8029050 <__NVIC_EnableIRQ>
}
 80291ee:	bf00      	nop
 80291f0:	3708      	adds	r7, #8
 80291f2:	46bd      	mov	sp, r7
 80291f4:	bd80      	pop	{r7, pc}

080291f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80291f6:	b580      	push	{r7, lr}
 80291f8:	b082      	sub	sp, #8
 80291fa:	af00      	add	r7, sp, #0
 80291fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80291fe:	6878      	ldr	r0, [r7, #4]
 8029200:	f7ff ffa2 	bl	8029148 <SysTick_Config>
 8029204:	4603      	mov	r3, r0
}
 8029206:	4618      	mov	r0, r3
 8029208:	3708      	adds	r7, #8
 802920a:	46bd      	mov	sp, r7
 802920c:	bd80      	pop	{r7, pc}

0802920e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 802920e:	b580      	push	{r7, lr}
 8029210:	b082      	sub	sp, #8
 8029212:	af00      	add	r7, sp, #0
 8029214:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8029216:	687b      	ldr	r3, [r7, #4]
 8029218:	2b00      	cmp	r3, #0
 802921a:	d101      	bne.n	8029220 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 802921c:	2301      	movs	r3, #1
 802921e:	e014      	b.n	802924a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8029220:	687b      	ldr	r3, [r7, #4]
 8029222:	791b      	ldrb	r3, [r3, #4]
 8029224:	b2db      	uxtb	r3, r3
 8029226:	2b00      	cmp	r3, #0
 8029228:	d105      	bne.n	8029236 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	2200      	movs	r2, #0
 802922e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8029230:	6878      	ldr	r0, [r7, #4]
 8029232:	f00c fb27 	bl	8035884 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8029236:	687b      	ldr	r3, [r7, #4]
 8029238:	2202      	movs	r2, #2
 802923a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 802923c:	687b      	ldr	r3, [r7, #4]
 802923e:	2200      	movs	r2, #0
 8029240:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8029242:	687b      	ldr	r3, [r7, #4]
 8029244:	2201      	movs	r2, #1
 8029246:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8029248:	2300      	movs	r3, #0
}
 802924a:	4618      	mov	r0, r3
 802924c:	3708      	adds	r7, #8
 802924e:	46bd      	mov	sp, r7
 8029250:	bd80      	pop	{r7, pc}
	...

08029254 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8029254:	b580      	push	{r7, lr}
 8029256:	b086      	sub	sp, #24
 8029258:	af00      	add	r7, sp, #0
 802925a:	60f8      	str	r0, [r7, #12]
 802925c:	60b9      	str	r1, [r7, #8]
 802925e:	607a      	str	r2, [r7, #4]
 8029260:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8029262:	2300      	movs	r3, #0
 8029264:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8029266:	68fb      	ldr	r3, [r7, #12]
 8029268:	795b      	ldrb	r3, [r3, #5]
 802926a:	2b01      	cmp	r3, #1
 802926c:	d101      	bne.n	8029272 <HAL_DAC_Start_DMA+0x1e>
 802926e:	2302      	movs	r3, #2
 8029270:	e09b      	b.n	80293aa <HAL_DAC_Start_DMA+0x156>
 8029272:	68fb      	ldr	r3, [r7, #12]
 8029274:	2201      	movs	r2, #1
 8029276:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8029278:	68fb      	ldr	r3, [r7, #12]
 802927a:	2202      	movs	r2, #2
 802927c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 802927e:	68bb      	ldr	r3, [r7, #8]
 8029280:	2b00      	cmp	r3, #0
 8029282:	d12f      	bne.n	80292e4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8029284:	68fb      	ldr	r3, [r7, #12]
 8029286:	689b      	ldr	r3, [r3, #8]
 8029288:	4a4a      	ldr	r2, [pc, #296]	; (80293b4 <HAL_DAC_Start_DMA+0x160>)
 802928a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 802928c:	68fb      	ldr	r3, [r7, #12]
 802928e:	689b      	ldr	r3, [r3, #8]
 8029290:	4a49      	ldr	r2, [pc, #292]	; (80293b8 <HAL_DAC_Start_DMA+0x164>)
 8029292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8029294:	68fb      	ldr	r3, [r7, #12]
 8029296:	689b      	ldr	r3, [r3, #8]
 8029298:	4a48      	ldr	r2, [pc, #288]	; (80293bc <HAL_DAC_Start_DMA+0x168>)
 802929a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 802929c:	68fb      	ldr	r3, [r7, #12]
 802929e:	681b      	ldr	r3, [r3, #0]
 80292a0:	681a      	ldr	r2, [r3, #0]
 80292a2:	68fb      	ldr	r3, [r7, #12]
 80292a4:	681b      	ldr	r3, [r3, #0]
 80292a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80292aa:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80292ac:	6a3b      	ldr	r3, [r7, #32]
 80292ae:	2b08      	cmp	r3, #8
 80292b0:	d013      	beq.n	80292da <HAL_DAC_Start_DMA+0x86>
 80292b2:	6a3b      	ldr	r3, [r7, #32]
 80292b4:	2b08      	cmp	r3, #8
 80292b6:	d845      	bhi.n	8029344 <HAL_DAC_Start_DMA+0xf0>
 80292b8:	6a3b      	ldr	r3, [r7, #32]
 80292ba:	2b00      	cmp	r3, #0
 80292bc:	d003      	beq.n	80292c6 <HAL_DAC_Start_DMA+0x72>
 80292be:	6a3b      	ldr	r3, [r7, #32]
 80292c0:	2b04      	cmp	r3, #4
 80292c2:	d005      	beq.n	80292d0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80292c4:	e03e      	b.n	8029344 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80292c6:	68fb      	ldr	r3, [r7, #12]
 80292c8:	681b      	ldr	r3, [r3, #0]
 80292ca:	3308      	adds	r3, #8
 80292cc:	617b      	str	r3, [r7, #20]
        break;
 80292ce:	e03c      	b.n	802934a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80292d0:	68fb      	ldr	r3, [r7, #12]
 80292d2:	681b      	ldr	r3, [r3, #0]
 80292d4:	330c      	adds	r3, #12
 80292d6:	617b      	str	r3, [r7, #20]
        break;
 80292d8:	e037      	b.n	802934a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80292da:	68fb      	ldr	r3, [r7, #12]
 80292dc:	681b      	ldr	r3, [r3, #0]
 80292de:	3310      	adds	r3, #16
 80292e0:	617b      	str	r3, [r7, #20]
        break;
 80292e2:	e032      	b.n	802934a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80292e4:	68fb      	ldr	r3, [r7, #12]
 80292e6:	68db      	ldr	r3, [r3, #12]
 80292e8:	4a35      	ldr	r2, [pc, #212]	; (80293c0 <HAL_DAC_Start_DMA+0x16c>)
 80292ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80292ec:	68fb      	ldr	r3, [r7, #12]
 80292ee:	68db      	ldr	r3, [r3, #12]
 80292f0:	4a34      	ldr	r2, [pc, #208]	; (80293c4 <HAL_DAC_Start_DMA+0x170>)
 80292f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80292f4:	68fb      	ldr	r3, [r7, #12]
 80292f6:	68db      	ldr	r3, [r3, #12]
 80292f8:	4a33      	ldr	r2, [pc, #204]	; (80293c8 <HAL_DAC_Start_DMA+0x174>)
 80292fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80292fc:	68fb      	ldr	r3, [r7, #12]
 80292fe:	681b      	ldr	r3, [r3, #0]
 8029300:	681a      	ldr	r2, [r3, #0]
 8029302:	68fb      	ldr	r3, [r7, #12]
 8029304:	681b      	ldr	r3, [r3, #0]
 8029306:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802930a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 802930c:	6a3b      	ldr	r3, [r7, #32]
 802930e:	2b08      	cmp	r3, #8
 8029310:	d013      	beq.n	802933a <HAL_DAC_Start_DMA+0xe6>
 8029312:	6a3b      	ldr	r3, [r7, #32]
 8029314:	2b08      	cmp	r3, #8
 8029316:	d817      	bhi.n	8029348 <HAL_DAC_Start_DMA+0xf4>
 8029318:	6a3b      	ldr	r3, [r7, #32]
 802931a:	2b00      	cmp	r3, #0
 802931c:	d003      	beq.n	8029326 <HAL_DAC_Start_DMA+0xd2>
 802931e:	6a3b      	ldr	r3, [r7, #32]
 8029320:	2b04      	cmp	r3, #4
 8029322:	d005      	beq.n	8029330 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8029324:	e010      	b.n	8029348 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8029326:	68fb      	ldr	r3, [r7, #12]
 8029328:	681b      	ldr	r3, [r3, #0]
 802932a:	3314      	adds	r3, #20
 802932c:	617b      	str	r3, [r7, #20]
        break;
 802932e:	e00c      	b.n	802934a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8029330:	68fb      	ldr	r3, [r7, #12]
 8029332:	681b      	ldr	r3, [r3, #0]
 8029334:	3318      	adds	r3, #24
 8029336:	617b      	str	r3, [r7, #20]
        break;
 8029338:	e007      	b.n	802934a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 802933a:	68fb      	ldr	r3, [r7, #12]
 802933c:	681b      	ldr	r3, [r3, #0]
 802933e:	331c      	adds	r3, #28
 8029340:	617b      	str	r3, [r7, #20]
        break;
 8029342:	e002      	b.n	802934a <HAL_DAC_Start_DMA+0xf6>
        break;
 8029344:	bf00      	nop
 8029346:	e000      	b.n	802934a <HAL_DAC_Start_DMA+0xf6>
        break;
 8029348:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 802934a:	68bb      	ldr	r3, [r7, #8]
 802934c:	2b00      	cmp	r3, #0
 802934e:	d10f      	bne.n	8029370 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8029350:	68fb      	ldr	r3, [r7, #12]
 8029352:	681b      	ldr	r3, [r3, #0]
 8029354:	681a      	ldr	r2, [r3, #0]
 8029356:	68fb      	ldr	r3, [r7, #12]
 8029358:	681b      	ldr	r3, [r3, #0]
 802935a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802935e:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8029360:	68fb      	ldr	r3, [r7, #12]
 8029362:	6898      	ldr	r0, [r3, #8]
 8029364:	6879      	ldr	r1, [r7, #4]
 8029366:	683b      	ldr	r3, [r7, #0]
 8029368:	697a      	ldr	r2, [r7, #20]
 802936a:	f000 f9d3 	bl	8029714 <HAL_DMA_Start_IT>
 802936e:	e00e      	b.n	802938e <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8029370:	68fb      	ldr	r3, [r7, #12]
 8029372:	681b      	ldr	r3, [r3, #0]
 8029374:	681a      	ldr	r2, [r3, #0]
 8029376:	68fb      	ldr	r3, [r7, #12]
 8029378:	681b      	ldr	r3, [r3, #0]
 802937a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 802937e:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8029380:	68fb      	ldr	r3, [r7, #12]
 8029382:	68d8      	ldr	r0, [r3, #12]
 8029384:	6879      	ldr	r1, [r7, #4]
 8029386:	683b      	ldr	r3, [r7, #0]
 8029388:	697a      	ldr	r2, [r7, #20]
 802938a:	f000 f9c3 	bl	8029714 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 802938e:	68fb      	ldr	r3, [r7, #12]
 8029390:	681b      	ldr	r3, [r3, #0]
 8029392:	6819      	ldr	r1, [r3, #0]
 8029394:	2201      	movs	r2, #1
 8029396:	68bb      	ldr	r3, [r7, #8]
 8029398:	409a      	lsls	r2, r3
 802939a:	68fb      	ldr	r3, [r7, #12]
 802939c:	681b      	ldr	r3, [r3, #0]
 802939e:	430a      	orrs	r2, r1
 80293a0:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80293a2:	68fb      	ldr	r3, [r7, #12]
 80293a4:	2200      	movs	r2, #0
 80293a6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80293a8:	2300      	movs	r3, #0
}
 80293aa:	4618      	mov	r0, r3
 80293ac:	3718      	adds	r7, #24
 80293ae:	46bd      	mov	sp, r7
 80293b0:	bd80      	pop	{r7, pc}
 80293b2:	bf00      	nop
 80293b4:	080294a3 	.word	0x080294a3
 80293b8:	080294c5 	.word	0x080294c5
 80293bc:	080294e1 	.word	0x080294e1
 80293c0:	0802954b 	.word	0x0802954b
 80293c4:	0802956d 	.word	0x0802956d
 80293c8:	08029589 	.word	0x08029589

080293cc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80293cc:	b480      	push	{r7}
 80293ce:	b083      	sub	sp, #12
 80293d0:	af00      	add	r7, sp, #0
 80293d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80293d4:	bf00      	nop
 80293d6:	370c      	adds	r7, #12
 80293d8:	46bd      	mov	sp, r7
 80293da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293de:	4770      	bx	lr

080293e0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80293e0:	b480      	push	{r7}
 80293e2:	b083      	sub	sp, #12
 80293e4:	af00      	add	r7, sp, #0
 80293e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80293e8:	bf00      	nop
 80293ea:	370c      	adds	r7, #12
 80293ec:	46bd      	mov	sp, r7
 80293ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293f2:	4770      	bx	lr

080293f4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80293f4:	b480      	push	{r7}
 80293f6:	b083      	sub	sp, #12
 80293f8:	af00      	add	r7, sp, #0
 80293fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80293fc:	bf00      	nop
 80293fe:	370c      	adds	r7, #12
 8029400:	46bd      	mov	sp, r7
 8029402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029406:	4770      	bx	lr

08029408 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8029408:	b480      	push	{r7}
 802940a:	b087      	sub	sp, #28
 802940c:	af00      	add	r7, sp, #0
 802940e:	60f8      	str	r0, [r7, #12]
 8029410:	60b9      	str	r1, [r7, #8]
 8029412:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8029414:	2300      	movs	r3, #0
 8029416:	617b      	str	r3, [r7, #20]
 8029418:	2300      	movs	r3, #0
 802941a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 802941c:	68fb      	ldr	r3, [r7, #12]
 802941e:	795b      	ldrb	r3, [r3, #5]
 8029420:	2b01      	cmp	r3, #1
 8029422:	d101      	bne.n	8029428 <HAL_DAC_ConfigChannel+0x20>
 8029424:	2302      	movs	r3, #2
 8029426:	e036      	b.n	8029496 <HAL_DAC_ConfigChannel+0x8e>
 8029428:	68fb      	ldr	r3, [r7, #12]
 802942a:	2201      	movs	r2, #1
 802942c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 802942e:	68fb      	ldr	r3, [r7, #12]
 8029430:	2202      	movs	r2, #2
 8029432:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8029434:	68fb      	ldr	r3, [r7, #12]
 8029436:	681b      	ldr	r3, [r3, #0]
 8029438:	681b      	ldr	r3, [r3, #0]
 802943a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 802943c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8029440:	687b      	ldr	r3, [r7, #4]
 8029442:	fa02 f303 	lsl.w	r3, r2, r3
 8029446:	43db      	mvns	r3, r3
 8029448:	697a      	ldr	r2, [r7, #20]
 802944a:	4013      	ands	r3, r2
 802944c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 802944e:	68bb      	ldr	r3, [r7, #8]
 8029450:	681a      	ldr	r2, [r3, #0]
 8029452:	68bb      	ldr	r3, [r7, #8]
 8029454:	685b      	ldr	r3, [r3, #4]
 8029456:	4313      	orrs	r3, r2
 8029458:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 802945a:	693a      	ldr	r2, [r7, #16]
 802945c:	687b      	ldr	r3, [r7, #4]
 802945e:	fa02 f303 	lsl.w	r3, r2, r3
 8029462:	697a      	ldr	r2, [r7, #20]
 8029464:	4313      	orrs	r3, r2
 8029466:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8029468:	68fb      	ldr	r3, [r7, #12]
 802946a:	681b      	ldr	r3, [r3, #0]
 802946c:	697a      	ldr	r2, [r7, #20]
 802946e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8029470:	68fb      	ldr	r3, [r7, #12]
 8029472:	681b      	ldr	r3, [r3, #0]
 8029474:	6819      	ldr	r1, [r3, #0]
 8029476:	22c0      	movs	r2, #192	; 0xc0
 8029478:	687b      	ldr	r3, [r7, #4]
 802947a:	fa02 f303 	lsl.w	r3, r2, r3
 802947e:	43da      	mvns	r2, r3
 8029480:	68fb      	ldr	r3, [r7, #12]
 8029482:	681b      	ldr	r3, [r3, #0]
 8029484:	400a      	ands	r2, r1
 8029486:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8029488:	68fb      	ldr	r3, [r7, #12]
 802948a:	2201      	movs	r2, #1
 802948c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 802948e:	68fb      	ldr	r3, [r7, #12]
 8029490:	2200      	movs	r2, #0
 8029492:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8029494:	2300      	movs	r3, #0
}
 8029496:	4618      	mov	r0, r3
 8029498:	371c      	adds	r7, #28
 802949a:	46bd      	mov	sp, r7
 802949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294a0:	4770      	bx	lr

080294a2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80294a2:	b580      	push	{r7, lr}
 80294a4:	b084      	sub	sp, #16
 80294a6:	af00      	add	r7, sp, #0
 80294a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80294aa:	687b      	ldr	r3, [r7, #4]
 80294ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80294ae:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80294b0:	68f8      	ldr	r0, [r7, #12]
 80294b2:	f7ff ff8b 	bl	80293cc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80294b6:	68fb      	ldr	r3, [r7, #12]
 80294b8:	2201      	movs	r2, #1
 80294ba:	711a      	strb	r2, [r3, #4]
}
 80294bc:	bf00      	nop
 80294be:	3710      	adds	r7, #16
 80294c0:	46bd      	mov	sp, r7
 80294c2:	bd80      	pop	{r7, pc}

080294c4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80294c4:	b580      	push	{r7, lr}
 80294c6:	b084      	sub	sp, #16
 80294c8:	af00      	add	r7, sp, #0
 80294ca:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80294cc:	687b      	ldr	r3, [r7, #4]
 80294ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80294d0:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80294d2:	68f8      	ldr	r0, [r7, #12]
 80294d4:	f7ff ff84 	bl	80293e0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80294d8:	bf00      	nop
 80294da:	3710      	adds	r7, #16
 80294dc:	46bd      	mov	sp, r7
 80294de:	bd80      	pop	{r7, pc}

080294e0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80294e0:	b580      	push	{r7, lr}
 80294e2:	b084      	sub	sp, #16
 80294e4:	af00      	add	r7, sp, #0
 80294e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80294e8:	687b      	ldr	r3, [r7, #4]
 80294ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80294ec:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80294ee:	68fb      	ldr	r3, [r7, #12]
 80294f0:	691b      	ldr	r3, [r3, #16]
 80294f2:	f043 0204 	orr.w	r2, r3, #4
 80294f6:	68fb      	ldr	r3, [r7, #12]
 80294f8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80294fa:	68f8      	ldr	r0, [r7, #12]
 80294fc:	f7ff ff7a 	bl	80293f4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8029500:	68fb      	ldr	r3, [r7, #12]
 8029502:	2201      	movs	r2, #1
 8029504:	711a      	strb	r2, [r3, #4]
}
 8029506:	bf00      	nop
 8029508:	3710      	adds	r7, #16
 802950a:	46bd      	mov	sp, r7
 802950c:	bd80      	pop	{r7, pc}

0802950e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 802950e:	b480      	push	{r7}
 8029510:	b083      	sub	sp, #12
 8029512:	af00      	add	r7, sp, #0
 8029514:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8029516:	bf00      	nop
 8029518:	370c      	adds	r7, #12
 802951a:	46bd      	mov	sp, r7
 802951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029520:	4770      	bx	lr

08029522 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8029522:	b480      	push	{r7}
 8029524:	b083      	sub	sp, #12
 8029526:	af00      	add	r7, sp, #0
 8029528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 802952a:	bf00      	nop
 802952c:	370c      	adds	r7, #12
 802952e:	46bd      	mov	sp, r7
 8029530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029534:	4770      	bx	lr

08029536 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8029536:	b480      	push	{r7}
 8029538:	b083      	sub	sp, #12
 802953a:	af00      	add	r7, sp, #0
 802953c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 802953e:	bf00      	nop
 8029540:	370c      	adds	r7, #12
 8029542:	46bd      	mov	sp, r7
 8029544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029548:	4770      	bx	lr

0802954a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 802954a:	b580      	push	{r7, lr}
 802954c:	b084      	sub	sp, #16
 802954e:	af00      	add	r7, sp, #0
 8029550:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8029552:	687b      	ldr	r3, [r7, #4]
 8029554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029556:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8029558:	68f8      	ldr	r0, [r7, #12]
 802955a:	f7ff ffd8 	bl	802950e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 802955e:	68fb      	ldr	r3, [r7, #12]
 8029560:	2201      	movs	r2, #1
 8029562:	711a      	strb	r2, [r3, #4]
}
 8029564:	bf00      	nop
 8029566:	3710      	adds	r7, #16
 8029568:	46bd      	mov	sp, r7
 802956a:	bd80      	pop	{r7, pc}

0802956c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 802956c:	b580      	push	{r7, lr}
 802956e:	b084      	sub	sp, #16
 8029570:	af00      	add	r7, sp, #0
 8029572:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8029574:	687b      	ldr	r3, [r7, #4]
 8029576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029578:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 802957a:	68f8      	ldr	r0, [r7, #12]
 802957c:	f7ff ffd1 	bl	8029522 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8029580:	bf00      	nop
 8029582:	3710      	adds	r7, #16
 8029584:	46bd      	mov	sp, r7
 8029586:	bd80      	pop	{r7, pc}

08029588 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8029588:	b580      	push	{r7, lr}
 802958a:	b084      	sub	sp, #16
 802958c:	af00      	add	r7, sp, #0
 802958e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8029590:	687b      	ldr	r3, [r7, #4]
 8029592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029594:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8029596:	68fb      	ldr	r3, [r7, #12]
 8029598:	691b      	ldr	r3, [r3, #16]
 802959a:	f043 0204 	orr.w	r2, r3, #4
 802959e:	68fb      	ldr	r3, [r7, #12]
 80295a0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80295a2:	68f8      	ldr	r0, [r7, #12]
 80295a4:	f7ff ffc7 	bl	8029536 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80295a8:	68fb      	ldr	r3, [r7, #12]
 80295aa:	2201      	movs	r2, #1
 80295ac:	711a      	strb	r2, [r3, #4]
}
 80295ae:	bf00      	nop
 80295b0:	3710      	adds	r7, #16
 80295b2:	46bd      	mov	sp, r7
 80295b4:	bd80      	pop	{r7, pc}
	...

080295b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80295b8:	b580      	push	{r7, lr}
 80295ba:	b086      	sub	sp, #24
 80295bc:	af00      	add	r7, sp, #0
 80295be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80295c0:	2300      	movs	r3, #0
 80295c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80295c4:	f7fe ffaa 	bl	802851c <HAL_GetTick>
 80295c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80295ca:	687b      	ldr	r3, [r7, #4]
 80295cc:	2b00      	cmp	r3, #0
 80295ce:	d101      	bne.n	80295d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80295d0:	2301      	movs	r3, #1
 80295d2:	e099      	b.n	8029708 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80295d4:	687b      	ldr	r3, [r7, #4]
 80295d6:	2200      	movs	r2, #0
 80295d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80295dc:	687b      	ldr	r3, [r7, #4]
 80295de:	2202      	movs	r2, #2
 80295e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80295e4:	687b      	ldr	r3, [r7, #4]
 80295e6:	681b      	ldr	r3, [r3, #0]
 80295e8:	681a      	ldr	r2, [r3, #0]
 80295ea:	687b      	ldr	r3, [r7, #4]
 80295ec:	681b      	ldr	r3, [r3, #0]
 80295ee:	f022 0201 	bic.w	r2, r2, #1
 80295f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80295f4:	e00f      	b.n	8029616 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80295f6:	f7fe ff91 	bl	802851c <HAL_GetTick>
 80295fa:	4602      	mov	r2, r0
 80295fc:	693b      	ldr	r3, [r7, #16]
 80295fe:	1ad3      	subs	r3, r2, r3
 8029600:	2b05      	cmp	r3, #5
 8029602:	d908      	bls.n	8029616 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8029604:	687b      	ldr	r3, [r7, #4]
 8029606:	2220      	movs	r2, #32
 8029608:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802960a:	687b      	ldr	r3, [r7, #4]
 802960c:	2203      	movs	r2, #3
 802960e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8029612:	2303      	movs	r3, #3
 8029614:	e078      	b.n	8029708 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8029616:	687b      	ldr	r3, [r7, #4]
 8029618:	681b      	ldr	r3, [r3, #0]
 802961a:	681b      	ldr	r3, [r3, #0]
 802961c:	f003 0301 	and.w	r3, r3, #1
 8029620:	2b00      	cmp	r3, #0
 8029622:	d1e8      	bne.n	80295f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8029624:	687b      	ldr	r3, [r7, #4]
 8029626:	681b      	ldr	r3, [r3, #0]
 8029628:	681b      	ldr	r3, [r3, #0]
 802962a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802962c:	697a      	ldr	r2, [r7, #20]
 802962e:	4b38      	ldr	r3, [pc, #224]	; (8029710 <HAL_DMA_Init+0x158>)
 8029630:	4013      	ands	r3, r2
 8029632:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8029634:	687b      	ldr	r3, [r7, #4]
 8029636:	685a      	ldr	r2, [r3, #4]
 8029638:	687b      	ldr	r3, [r7, #4]
 802963a:	689b      	ldr	r3, [r3, #8]
 802963c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802963e:	687b      	ldr	r3, [r7, #4]
 8029640:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8029642:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	691b      	ldr	r3, [r3, #16]
 8029648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802964a:	687b      	ldr	r3, [r7, #4]
 802964c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802964e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8029650:	687b      	ldr	r3, [r7, #4]
 8029652:	699b      	ldr	r3, [r3, #24]
 8029654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8029656:	687b      	ldr	r3, [r7, #4]
 8029658:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802965a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802965c:	687b      	ldr	r3, [r7, #4]
 802965e:	6a1b      	ldr	r3, [r3, #32]
 8029660:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8029662:	697a      	ldr	r2, [r7, #20]
 8029664:	4313      	orrs	r3, r2
 8029666:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8029668:	687b      	ldr	r3, [r7, #4]
 802966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802966c:	2b04      	cmp	r3, #4
 802966e:	d107      	bne.n	8029680 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8029670:	687b      	ldr	r3, [r7, #4]
 8029672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8029674:	687b      	ldr	r3, [r7, #4]
 8029676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029678:	4313      	orrs	r3, r2
 802967a:	697a      	ldr	r2, [r7, #20]
 802967c:	4313      	orrs	r3, r2
 802967e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8029680:	687b      	ldr	r3, [r7, #4]
 8029682:	681b      	ldr	r3, [r3, #0]
 8029684:	697a      	ldr	r2, [r7, #20]
 8029686:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8029688:	687b      	ldr	r3, [r7, #4]
 802968a:	681b      	ldr	r3, [r3, #0]
 802968c:	695b      	ldr	r3, [r3, #20]
 802968e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8029690:	697b      	ldr	r3, [r7, #20]
 8029692:	f023 0307 	bic.w	r3, r3, #7
 8029696:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8029698:	687b      	ldr	r3, [r7, #4]
 802969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802969c:	697a      	ldr	r2, [r7, #20]
 802969e:	4313      	orrs	r3, r2
 80296a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80296a2:	687b      	ldr	r3, [r7, #4]
 80296a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80296a6:	2b04      	cmp	r3, #4
 80296a8:	d117      	bne.n	80296da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80296aa:	687b      	ldr	r3, [r7, #4]
 80296ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80296ae:	697a      	ldr	r2, [r7, #20]
 80296b0:	4313      	orrs	r3, r2
 80296b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80296b4:	687b      	ldr	r3, [r7, #4]
 80296b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80296b8:	2b00      	cmp	r3, #0
 80296ba:	d00e      	beq.n	80296da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80296bc:	6878      	ldr	r0, [r7, #4]
 80296be:	f000 fb1b 	bl	8029cf8 <DMA_CheckFifoParam>
 80296c2:	4603      	mov	r3, r0
 80296c4:	2b00      	cmp	r3, #0
 80296c6:	d008      	beq.n	80296da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80296c8:	687b      	ldr	r3, [r7, #4]
 80296ca:	2240      	movs	r2, #64	; 0x40
 80296cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80296ce:	687b      	ldr	r3, [r7, #4]
 80296d0:	2201      	movs	r2, #1
 80296d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80296d6:	2301      	movs	r3, #1
 80296d8:	e016      	b.n	8029708 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80296da:	687b      	ldr	r3, [r7, #4]
 80296dc:	681b      	ldr	r3, [r3, #0]
 80296de:	697a      	ldr	r2, [r7, #20]
 80296e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80296e2:	6878      	ldr	r0, [r7, #4]
 80296e4:	f000 fad2 	bl	8029c8c <DMA_CalcBaseAndBitshift>
 80296e8:	4603      	mov	r3, r0
 80296ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80296ec:	687b      	ldr	r3, [r7, #4]
 80296ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80296f0:	223f      	movs	r2, #63	; 0x3f
 80296f2:	409a      	lsls	r2, r3
 80296f4:	68fb      	ldr	r3, [r7, #12]
 80296f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80296f8:	687b      	ldr	r3, [r7, #4]
 80296fa:	2200      	movs	r2, #0
 80296fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80296fe:	687b      	ldr	r3, [r7, #4]
 8029700:	2201      	movs	r2, #1
 8029702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8029706:	2300      	movs	r3, #0
}
 8029708:	4618      	mov	r0, r3
 802970a:	3718      	adds	r7, #24
 802970c:	46bd      	mov	sp, r7
 802970e:	bd80      	pop	{r7, pc}
 8029710:	f010803f 	.word	0xf010803f

08029714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8029714:	b580      	push	{r7, lr}
 8029716:	b086      	sub	sp, #24
 8029718:	af00      	add	r7, sp, #0
 802971a:	60f8      	str	r0, [r7, #12]
 802971c:	60b9      	str	r1, [r7, #8]
 802971e:	607a      	str	r2, [r7, #4]
 8029720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8029722:	2300      	movs	r3, #0
 8029724:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8029726:	68fb      	ldr	r3, [r7, #12]
 8029728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802972a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 802972c:	68fb      	ldr	r3, [r7, #12]
 802972e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8029732:	2b01      	cmp	r3, #1
 8029734:	d101      	bne.n	802973a <HAL_DMA_Start_IT+0x26>
 8029736:	2302      	movs	r3, #2
 8029738:	e040      	b.n	80297bc <HAL_DMA_Start_IT+0xa8>
 802973a:	68fb      	ldr	r3, [r7, #12]
 802973c:	2201      	movs	r2, #1
 802973e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8029742:	68fb      	ldr	r3, [r7, #12]
 8029744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8029748:	b2db      	uxtb	r3, r3
 802974a:	2b01      	cmp	r3, #1
 802974c:	d12f      	bne.n	80297ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802974e:	68fb      	ldr	r3, [r7, #12]
 8029750:	2202      	movs	r2, #2
 8029752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8029756:	68fb      	ldr	r3, [r7, #12]
 8029758:	2200      	movs	r2, #0
 802975a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802975c:	683b      	ldr	r3, [r7, #0]
 802975e:	687a      	ldr	r2, [r7, #4]
 8029760:	68b9      	ldr	r1, [r7, #8]
 8029762:	68f8      	ldr	r0, [r7, #12]
 8029764:	f000 fa64 	bl	8029c30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8029768:	68fb      	ldr	r3, [r7, #12]
 802976a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802976c:	223f      	movs	r2, #63	; 0x3f
 802976e:	409a      	lsls	r2, r3
 8029770:	693b      	ldr	r3, [r7, #16]
 8029772:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8029774:	68fb      	ldr	r3, [r7, #12]
 8029776:	681b      	ldr	r3, [r3, #0]
 8029778:	681a      	ldr	r2, [r3, #0]
 802977a:	68fb      	ldr	r3, [r7, #12]
 802977c:	681b      	ldr	r3, [r3, #0]
 802977e:	f042 0216 	orr.w	r2, r2, #22
 8029782:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8029784:	68fb      	ldr	r3, [r7, #12]
 8029786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029788:	2b00      	cmp	r3, #0
 802978a:	d007      	beq.n	802979c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 802978c:	68fb      	ldr	r3, [r7, #12]
 802978e:	681b      	ldr	r3, [r3, #0]
 8029790:	681a      	ldr	r2, [r3, #0]
 8029792:	68fb      	ldr	r3, [r7, #12]
 8029794:	681b      	ldr	r3, [r3, #0]
 8029796:	f042 0208 	orr.w	r2, r2, #8
 802979a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802979c:	68fb      	ldr	r3, [r7, #12]
 802979e:	681b      	ldr	r3, [r3, #0]
 80297a0:	681a      	ldr	r2, [r3, #0]
 80297a2:	68fb      	ldr	r3, [r7, #12]
 80297a4:	681b      	ldr	r3, [r3, #0]
 80297a6:	f042 0201 	orr.w	r2, r2, #1
 80297aa:	601a      	str	r2, [r3, #0]
 80297ac:	e005      	b.n	80297ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80297ae:	68fb      	ldr	r3, [r7, #12]
 80297b0:	2200      	movs	r2, #0
 80297b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80297b6:	2302      	movs	r3, #2
 80297b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80297ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80297bc:	4618      	mov	r0, r3
 80297be:	3718      	adds	r7, #24
 80297c0:	46bd      	mov	sp, r7
 80297c2:	bd80      	pop	{r7, pc}

080297c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80297c4:	b580      	push	{r7, lr}
 80297c6:	b084      	sub	sp, #16
 80297c8:	af00      	add	r7, sp, #0
 80297ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80297cc:	687b      	ldr	r3, [r7, #4]
 80297ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80297d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80297d2:	f7fe fea3 	bl	802851c <HAL_GetTick>
 80297d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80297d8:	687b      	ldr	r3, [r7, #4]
 80297da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80297de:	b2db      	uxtb	r3, r3
 80297e0:	2b02      	cmp	r3, #2
 80297e2:	d008      	beq.n	80297f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80297e4:	687b      	ldr	r3, [r7, #4]
 80297e6:	2280      	movs	r2, #128	; 0x80
 80297e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80297ea:	687b      	ldr	r3, [r7, #4]
 80297ec:	2200      	movs	r2, #0
 80297ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80297f2:	2301      	movs	r3, #1
 80297f4:	e052      	b.n	802989c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80297f6:	687b      	ldr	r3, [r7, #4]
 80297f8:	681b      	ldr	r3, [r3, #0]
 80297fa:	681a      	ldr	r2, [r3, #0]
 80297fc:	687b      	ldr	r3, [r7, #4]
 80297fe:	681b      	ldr	r3, [r3, #0]
 8029800:	f022 0216 	bic.w	r2, r2, #22
 8029804:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8029806:	687b      	ldr	r3, [r7, #4]
 8029808:	681b      	ldr	r3, [r3, #0]
 802980a:	695a      	ldr	r2, [r3, #20]
 802980c:	687b      	ldr	r3, [r7, #4]
 802980e:	681b      	ldr	r3, [r3, #0]
 8029810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8029814:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8029816:	687b      	ldr	r3, [r7, #4]
 8029818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802981a:	2b00      	cmp	r3, #0
 802981c:	d103      	bne.n	8029826 <HAL_DMA_Abort+0x62>
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8029822:	2b00      	cmp	r3, #0
 8029824:	d007      	beq.n	8029836 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8029826:	687b      	ldr	r3, [r7, #4]
 8029828:	681b      	ldr	r3, [r3, #0]
 802982a:	681a      	ldr	r2, [r3, #0]
 802982c:	687b      	ldr	r3, [r7, #4]
 802982e:	681b      	ldr	r3, [r3, #0]
 8029830:	f022 0208 	bic.w	r2, r2, #8
 8029834:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8029836:	687b      	ldr	r3, [r7, #4]
 8029838:	681b      	ldr	r3, [r3, #0]
 802983a:	681a      	ldr	r2, [r3, #0]
 802983c:	687b      	ldr	r3, [r7, #4]
 802983e:	681b      	ldr	r3, [r3, #0]
 8029840:	f022 0201 	bic.w	r2, r2, #1
 8029844:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8029846:	e013      	b.n	8029870 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8029848:	f7fe fe68 	bl	802851c <HAL_GetTick>
 802984c:	4602      	mov	r2, r0
 802984e:	68bb      	ldr	r3, [r7, #8]
 8029850:	1ad3      	subs	r3, r2, r3
 8029852:	2b05      	cmp	r3, #5
 8029854:	d90c      	bls.n	8029870 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8029856:	687b      	ldr	r3, [r7, #4]
 8029858:	2220      	movs	r2, #32
 802985a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802985c:	687b      	ldr	r3, [r7, #4]
 802985e:	2200      	movs	r2, #0
 8029860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8029864:	687b      	ldr	r3, [r7, #4]
 8029866:	2203      	movs	r2, #3
 8029868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 802986c:	2303      	movs	r3, #3
 802986e:	e015      	b.n	802989c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8029870:	687b      	ldr	r3, [r7, #4]
 8029872:	681b      	ldr	r3, [r3, #0]
 8029874:	681b      	ldr	r3, [r3, #0]
 8029876:	f003 0301 	and.w	r3, r3, #1
 802987a:	2b00      	cmp	r3, #0
 802987c:	d1e4      	bne.n	8029848 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802987e:	687b      	ldr	r3, [r7, #4]
 8029880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029882:	223f      	movs	r2, #63	; 0x3f
 8029884:	409a      	lsls	r2, r3
 8029886:	68fb      	ldr	r3, [r7, #12]
 8029888:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802988a:	687b      	ldr	r3, [r7, #4]
 802988c:	2200      	movs	r2, #0
 802988e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8029892:	687b      	ldr	r3, [r7, #4]
 8029894:	2201      	movs	r2, #1
 8029896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 802989a:	2300      	movs	r3, #0
}
 802989c:	4618      	mov	r0, r3
 802989e:	3710      	adds	r7, #16
 80298a0:	46bd      	mov	sp, r7
 80298a2:	bd80      	pop	{r7, pc}

080298a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80298a4:	b480      	push	{r7}
 80298a6:	b083      	sub	sp, #12
 80298a8:	af00      	add	r7, sp, #0
 80298aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80298ac:	687b      	ldr	r3, [r7, #4]
 80298ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80298b2:	b2db      	uxtb	r3, r3
 80298b4:	2b02      	cmp	r3, #2
 80298b6:	d004      	beq.n	80298c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80298b8:	687b      	ldr	r3, [r7, #4]
 80298ba:	2280      	movs	r2, #128	; 0x80
 80298bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80298be:	2301      	movs	r3, #1
 80298c0:	e00c      	b.n	80298dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80298c2:	687b      	ldr	r3, [r7, #4]
 80298c4:	2205      	movs	r2, #5
 80298c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80298ca:	687b      	ldr	r3, [r7, #4]
 80298cc:	681b      	ldr	r3, [r3, #0]
 80298ce:	681a      	ldr	r2, [r3, #0]
 80298d0:	687b      	ldr	r3, [r7, #4]
 80298d2:	681b      	ldr	r3, [r3, #0]
 80298d4:	f022 0201 	bic.w	r2, r2, #1
 80298d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80298da:	2300      	movs	r3, #0
}
 80298dc:	4618      	mov	r0, r3
 80298de:	370c      	adds	r7, #12
 80298e0:	46bd      	mov	sp, r7
 80298e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298e6:	4770      	bx	lr

080298e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80298e8:	b580      	push	{r7, lr}
 80298ea:	b086      	sub	sp, #24
 80298ec:	af00      	add	r7, sp, #0
 80298ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80298f0:	2300      	movs	r3, #0
 80298f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80298f4:	4b8e      	ldr	r3, [pc, #568]	; (8029b30 <HAL_DMA_IRQHandler+0x248>)
 80298f6:	681b      	ldr	r3, [r3, #0]
 80298f8:	4a8e      	ldr	r2, [pc, #568]	; (8029b34 <HAL_DMA_IRQHandler+0x24c>)
 80298fa:	fba2 2303 	umull	r2, r3, r2, r3
 80298fe:	0a9b      	lsrs	r3, r3, #10
 8029900:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8029902:	687b      	ldr	r3, [r7, #4]
 8029904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8029906:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8029908:	693b      	ldr	r3, [r7, #16]
 802990a:	681b      	ldr	r3, [r3, #0]
 802990c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802990e:	687b      	ldr	r3, [r7, #4]
 8029910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029912:	2208      	movs	r2, #8
 8029914:	409a      	lsls	r2, r3
 8029916:	68fb      	ldr	r3, [r7, #12]
 8029918:	4013      	ands	r3, r2
 802991a:	2b00      	cmp	r3, #0
 802991c:	d01a      	beq.n	8029954 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802991e:	687b      	ldr	r3, [r7, #4]
 8029920:	681b      	ldr	r3, [r3, #0]
 8029922:	681b      	ldr	r3, [r3, #0]
 8029924:	f003 0304 	and.w	r3, r3, #4
 8029928:	2b00      	cmp	r3, #0
 802992a:	d013      	beq.n	8029954 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 802992c:	687b      	ldr	r3, [r7, #4]
 802992e:	681b      	ldr	r3, [r3, #0]
 8029930:	681a      	ldr	r2, [r3, #0]
 8029932:	687b      	ldr	r3, [r7, #4]
 8029934:	681b      	ldr	r3, [r3, #0]
 8029936:	f022 0204 	bic.w	r2, r2, #4
 802993a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802993c:	687b      	ldr	r3, [r7, #4]
 802993e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029940:	2208      	movs	r2, #8
 8029942:	409a      	lsls	r2, r3
 8029944:	693b      	ldr	r3, [r7, #16]
 8029946:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8029948:	687b      	ldr	r3, [r7, #4]
 802994a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802994c:	f043 0201 	orr.w	r2, r3, #1
 8029950:	687b      	ldr	r3, [r7, #4]
 8029952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8029954:	687b      	ldr	r3, [r7, #4]
 8029956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029958:	2201      	movs	r2, #1
 802995a:	409a      	lsls	r2, r3
 802995c:	68fb      	ldr	r3, [r7, #12]
 802995e:	4013      	ands	r3, r2
 8029960:	2b00      	cmp	r3, #0
 8029962:	d012      	beq.n	802998a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8029964:	687b      	ldr	r3, [r7, #4]
 8029966:	681b      	ldr	r3, [r3, #0]
 8029968:	695b      	ldr	r3, [r3, #20]
 802996a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802996e:	2b00      	cmp	r3, #0
 8029970:	d00b      	beq.n	802998a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8029972:	687b      	ldr	r3, [r7, #4]
 8029974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029976:	2201      	movs	r2, #1
 8029978:	409a      	lsls	r2, r3
 802997a:	693b      	ldr	r3, [r7, #16]
 802997c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802997e:	687b      	ldr	r3, [r7, #4]
 8029980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029982:	f043 0202 	orr.w	r2, r3, #2
 8029986:	687b      	ldr	r3, [r7, #4]
 8029988:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802998a:	687b      	ldr	r3, [r7, #4]
 802998c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802998e:	2204      	movs	r2, #4
 8029990:	409a      	lsls	r2, r3
 8029992:	68fb      	ldr	r3, [r7, #12]
 8029994:	4013      	ands	r3, r2
 8029996:	2b00      	cmp	r3, #0
 8029998:	d012      	beq.n	80299c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 802999a:	687b      	ldr	r3, [r7, #4]
 802999c:	681b      	ldr	r3, [r3, #0]
 802999e:	681b      	ldr	r3, [r3, #0]
 80299a0:	f003 0302 	and.w	r3, r3, #2
 80299a4:	2b00      	cmp	r3, #0
 80299a6:	d00b      	beq.n	80299c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80299a8:	687b      	ldr	r3, [r7, #4]
 80299aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80299ac:	2204      	movs	r2, #4
 80299ae:	409a      	lsls	r2, r3
 80299b0:	693b      	ldr	r3, [r7, #16]
 80299b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80299b4:	687b      	ldr	r3, [r7, #4]
 80299b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80299b8:	f043 0204 	orr.w	r2, r3, #4
 80299bc:	687b      	ldr	r3, [r7, #4]
 80299be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80299c0:	687b      	ldr	r3, [r7, #4]
 80299c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80299c4:	2210      	movs	r2, #16
 80299c6:	409a      	lsls	r2, r3
 80299c8:	68fb      	ldr	r3, [r7, #12]
 80299ca:	4013      	ands	r3, r2
 80299cc:	2b00      	cmp	r3, #0
 80299ce:	d043      	beq.n	8029a58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80299d0:	687b      	ldr	r3, [r7, #4]
 80299d2:	681b      	ldr	r3, [r3, #0]
 80299d4:	681b      	ldr	r3, [r3, #0]
 80299d6:	f003 0308 	and.w	r3, r3, #8
 80299da:	2b00      	cmp	r3, #0
 80299dc:	d03c      	beq.n	8029a58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80299de:	687b      	ldr	r3, [r7, #4]
 80299e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80299e2:	2210      	movs	r2, #16
 80299e4:	409a      	lsls	r2, r3
 80299e6:	693b      	ldr	r3, [r7, #16]
 80299e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80299ea:	687b      	ldr	r3, [r7, #4]
 80299ec:	681b      	ldr	r3, [r3, #0]
 80299ee:	681b      	ldr	r3, [r3, #0]
 80299f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80299f4:	2b00      	cmp	r3, #0
 80299f6:	d018      	beq.n	8029a2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80299f8:	687b      	ldr	r3, [r7, #4]
 80299fa:	681b      	ldr	r3, [r3, #0]
 80299fc:	681b      	ldr	r3, [r3, #0]
 80299fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8029a02:	2b00      	cmp	r3, #0
 8029a04:	d108      	bne.n	8029a18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8029a06:	687b      	ldr	r3, [r7, #4]
 8029a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a0a:	2b00      	cmp	r3, #0
 8029a0c:	d024      	beq.n	8029a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8029a0e:	687b      	ldr	r3, [r7, #4]
 8029a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a12:	6878      	ldr	r0, [r7, #4]
 8029a14:	4798      	blx	r3
 8029a16:	e01f      	b.n	8029a58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8029a18:	687b      	ldr	r3, [r7, #4]
 8029a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8029a1c:	2b00      	cmp	r3, #0
 8029a1e:	d01b      	beq.n	8029a58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8029a20:	687b      	ldr	r3, [r7, #4]
 8029a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8029a24:	6878      	ldr	r0, [r7, #4]
 8029a26:	4798      	blx	r3
 8029a28:	e016      	b.n	8029a58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8029a2a:	687b      	ldr	r3, [r7, #4]
 8029a2c:	681b      	ldr	r3, [r3, #0]
 8029a2e:	681b      	ldr	r3, [r3, #0]
 8029a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029a34:	2b00      	cmp	r3, #0
 8029a36:	d107      	bne.n	8029a48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8029a38:	687b      	ldr	r3, [r7, #4]
 8029a3a:	681b      	ldr	r3, [r3, #0]
 8029a3c:	681a      	ldr	r2, [r3, #0]
 8029a3e:	687b      	ldr	r3, [r7, #4]
 8029a40:	681b      	ldr	r3, [r3, #0]
 8029a42:	f022 0208 	bic.w	r2, r2, #8
 8029a46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8029a48:	687b      	ldr	r3, [r7, #4]
 8029a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a4c:	2b00      	cmp	r3, #0
 8029a4e:	d003      	beq.n	8029a58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8029a50:	687b      	ldr	r3, [r7, #4]
 8029a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a54:	6878      	ldr	r0, [r7, #4]
 8029a56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8029a58:	687b      	ldr	r3, [r7, #4]
 8029a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029a5c:	2220      	movs	r2, #32
 8029a5e:	409a      	lsls	r2, r3
 8029a60:	68fb      	ldr	r3, [r7, #12]
 8029a62:	4013      	ands	r3, r2
 8029a64:	2b00      	cmp	r3, #0
 8029a66:	f000 808f 	beq.w	8029b88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8029a6a:	687b      	ldr	r3, [r7, #4]
 8029a6c:	681b      	ldr	r3, [r3, #0]
 8029a6e:	681b      	ldr	r3, [r3, #0]
 8029a70:	f003 0310 	and.w	r3, r3, #16
 8029a74:	2b00      	cmp	r3, #0
 8029a76:	f000 8087 	beq.w	8029b88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8029a7a:	687b      	ldr	r3, [r7, #4]
 8029a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029a7e:	2220      	movs	r2, #32
 8029a80:	409a      	lsls	r2, r3
 8029a82:	693b      	ldr	r3, [r7, #16]
 8029a84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8029a86:	687b      	ldr	r3, [r7, #4]
 8029a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8029a8c:	b2db      	uxtb	r3, r3
 8029a8e:	2b05      	cmp	r3, #5
 8029a90:	d136      	bne.n	8029b00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8029a92:	687b      	ldr	r3, [r7, #4]
 8029a94:	681b      	ldr	r3, [r3, #0]
 8029a96:	681a      	ldr	r2, [r3, #0]
 8029a98:	687b      	ldr	r3, [r7, #4]
 8029a9a:	681b      	ldr	r3, [r3, #0]
 8029a9c:	f022 0216 	bic.w	r2, r2, #22
 8029aa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8029aa2:	687b      	ldr	r3, [r7, #4]
 8029aa4:	681b      	ldr	r3, [r3, #0]
 8029aa6:	695a      	ldr	r2, [r3, #20]
 8029aa8:	687b      	ldr	r3, [r7, #4]
 8029aaa:	681b      	ldr	r3, [r3, #0]
 8029aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8029ab0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8029ab2:	687b      	ldr	r3, [r7, #4]
 8029ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029ab6:	2b00      	cmp	r3, #0
 8029ab8:	d103      	bne.n	8029ac2 <HAL_DMA_IRQHandler+0x1da>
 8029aba:	687b      	ldr	r3, [r7, #4]
 8029abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8029abe:	2b00      	cmp	r3, #0
 8029ac0:	d007      	beq.n	8029ad2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8029ac2:	687b      	ldr	r3, [r7, #4]
 8029ac4:	681b      	ldr	r3, [r3, #0]
 8029ac6:	681a      	ldr	r2, [r3, #0]
 8029ac8:	687b      	ldr	r3, [r7, #4]
 8029aca:	681b      	ldr	r3, [r3, #0]
 8029acc:	f022 0208 	bic.w	r2, r2, #8
 8029ad0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8029ad2:	687b      	ldr	r3, [r7, #4]
 8029ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029ad6:	223f      	movs	r2, #63	; 0x3f
 8029ad8:	409a      	lsls	r2, r3
 8029ada:	693b      	ldr	r3, [r7, #16]
 8029adc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8029ade:	687b      	ldr	r3, [r7, #4]
 8029ae0:	2200      	movs	r2, #0
 8029ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8029ae6:	687b      	ldr	r3, [r7, #4]
 8029ae8:	2201      	movs	r2, #1
 8029aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8029aee:	687b      	ldr	r3, [r7, #4]
 8029af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029af2:	2b00      	cmp	r3, #0
 8029af4:	d07e      	beq.n	8029bf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8029af6:	687b      	ldr	r3, [r7, #4]
 8029af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029afa:	6878      	ldr	r0, [r7, #4]
 8029afc:	4798      	blx	r3
        }
        return;
 8029afe:	e079      	b.n	8029bf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8029b00:	687b      	ldr	r3, [r7, #4]
 8029b02:	681b      	ldr	r3, [r3, #0]
 8029b04:	681b      	ldr	r3, [r3, #0]
 8029b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8029b0a:	2b00      	cmp	r3, #0
 8029b0c:	d01d      	beq.n	8029b4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8029b0e:	687b      	ldr	r3, [r7, #4]
 8029b10:	681b      	ldr	r3, [r3, #0]
 8029b12:	681b      	ldr	r3, [r3, #0]
 8029b14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8029b18:	2b00      	cmp	r3, #0
 8029b1a:	d10d      	bne.n	8029b38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8029b1c:	687b      	ldr	r3, [r7, #4]
 8029b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029b20:	2b00      	cmp	r3, #0
 8029b22:	d031      	beq.n	8029b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8029b24:	687b      	ldr	r3, [r7, #4]
 8029b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029b28:	6878      	ldr	r0, [r7, #4]
 8029b2a:	4798      	blx	r3
 8029b2c:	e02c      	b.n	8029b88 <HAL_DMA_IRQHandler+0x2a0>
 8029b2e:	bf00      	nop
 8029b30:	200014e4 	.word	0x200014e4
 8029b34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8029b38:	687b      	ldr	r3, [r7, #4]
 8029b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029b3c:	2b00      	cmp	r3, #0
 8029b3e:	d023      	beq.n	8029b88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8029b40:	687b      	ldr	r3, [r7, #4]
 8029b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029b44:	6878      	ldr	r0, [r7, #4]
 8029b46:	4798      	blx	r3
 8029b48:	e01e      	b.n	8029b88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8029b4a:	687b      	ldr	r3, [r7, #4]
 8029b4c:	681b      	ldr	r3, [r3, #0]
 8029b4e:	681b      	ldr	r3, [r3, #0]
 8029b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029b54:	2b00      	cmp	r3, #0
 8029b56:	d10f      	bne.n	8029b78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8029b58:	687b      	ldr	r3, [r7, #4]
 8029b5a:	681b      	ldr	r3, [r3, #0]
 8029b5c:	681a      	ldr	r2, [r3, #0]
 8029b5e:	687b      	ldr	r3, [r7, #4]
 8029b60:	681b      	ldr	r3, [r3, #0]
 8029b62:	f022 0210 	bic.w	r2, r2, #16
 8029b66:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8029b68:	687b      	ldr	r3, [r7, #4]
 8029b6a:	2200      	movs	r2, #0
 8029b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8029b70:	687b      	ldr	r3, [r7, #4]
 8029b72:	2201      	movs	r2, #1
 8029b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8029b78:	687b      	ldr	r3, [r7, #4]
 8029b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029b7c:	2b00      	cmp	r3, #0
 8029b7e:	d003      	beq.n	8029b88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8029b80:	687b      	ldr	r3, [r7, #4]
 8029b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029b84:	6878      	ldr	r0, [r7, #4]
 8029b86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8029b88:	687b      	ldr	r3, [r7, #4]
 8029b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029b8c:	2b00      	cmp	r3, #0
 8029b8e:	d032      	beq.n	8029bf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8029b90:	687b      	ldr	r3, [r7, #4]
 8029b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029b94:	f003 0301 	and.w	r3, r3, #1
 8029b98:	2b00      	cmp	r3, #0
 8029b9a:	d022      	beq.n	8029be2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8029b9c:	687b      	ldr	r3, [r7, #4]
 8029b9e:	2205      	movs	r2, #5
 8029ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8029ba4:	687b      	ldr	r3, [r7, #4]
 8029ba6:	681b      	ldr	r3, [r3, #0]
 8029ba8:	681a      	ldr	r2, [r3, #0]
 8029baa:	687b      	ldr	r3, [r7, #4]
 8029bac:	681b      	ldr	r3, [r3, #0]
 8029bae:	f022 0201 	bic.w	r2, r2, #1
 8029bb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8029bb4:	68bb      	ldr	r3, [r7, #8]
 8029bb6:	3301      	adds	r3, #1
 8029bb8:	60bb      	str	r3, [r7, #8]
 8029bba:	697a      	ldr	r2, [r7, #20]
 8029bbc:	429a      	cmp	r2, r3
 8029bbe:	d307      	bcc.n	8029bd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8029bc0:	687b      	ldr	r3, [r7, #4]
 8029bc2:	681b      	ldr	r3, [r3, #0]
 8029bc4:	681b      	ldr	r3, [r3, #0]
 8029bc6:	f003 0301 	and.w	r3, r3, #1
 8029bca:	2b00      	cmp	r3, #0
 8029bcc:	d1f2      	bne.n	8029bb4 <HAL_DMA_IRQHandler+0x2cc>
 8029bce:	e000      	b.n	8029bd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8029bd0:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8029bd2:	687b      	ldr	r3, [r7, #4]
 8029bd4:	2200      	movs	r2, #0
 8029bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8029bda:	687b      	ldr	r3, [r7, #4]
 8029bdc:	2201      	movs	r2, #1
 8029bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8029be2:	687b      	ldr	r3, [r7, #4]
 8029be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8029be6:	2b00      	cmp	r3, #0
 8029be8:	d005      	beq.n	8029bf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8029bea:	687b      	ldr	r3, [r7, #4]
 8029bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8029bee:	6878      	ldr	r0, [r7, #4]
 8029bf0:	4798      	blx	r3
 8029bf2:	e000      	b.n	8029bf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8029bf4:	bf00      	nop
    }
  }
}
 8029bf6:	3718      	adds	r7, #24
 8029bf8:	46bd      	mov	sp, r7
 8029bfa:	bd80      	pop	{r7, pc}

08029bfc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8029bfc:	b480      	push	{r7}
 8029bfe:	b083      	sub	sp, #12
 8029c00:	af00      	add	r7, sp, #0
 8029c02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8029c04:	687b      	ldr	r3, [r7, #4]
 8029c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8029c0a:	b2db      	uxtb	r3, r3
}
 8029c0c:	4618      	mov	r0, r3
 8029c0e:	370c      	adds	r7, #12
 8029c10:	46bd      	mov	sp, r7
 8029c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c16:	4770      	bx	lr

08029c18 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8029c18:	b480      	push	{r7}
 8029c1a:	b083      	sub	sp, #12
 8029c1c:	af00      	add	r7, sp, #0
 8029c1e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8029c20:	687b      	ldr	r3, [r7, #4]
 8029c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8029c24:	4618      	mov	r0, r3
 8029c26:	370c      	adds	r7, #12
 8029c28:	46bd      	mov	sp, r7
 8029c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c2e:	4770      	bx	lr

08029c30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8029c30:	b480      	push	{r7}
 8029c32:	b085      	sub	sp, #20
 8029c34:	af00      	add	r7, sp, #0
 8029c36:	60f8      	str	r0, [r7, #12]
 8029c38:	60b9      	str	r1, [r7, #8]
 8029c3a:	607a      	str	r2, [r7, #4]
 8029c3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8029c3e:	68fb      	ldr	r3, [r7, #12]
 8029c40:	681b      	ldr	r3, [r3, #0]
 8029c42:	681a      	ldr	r2, [r3, #0]
 8029c44:	68fb      	ldr	r3, [r7, #12]
 8029c46:	681b      	ldr	r3, [r3, #0]
 8029c48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8029c4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8029c4e:	68fb      	ldr	r3, [r7, #12]
 8029c50:	681b      	ldr	r3, [r3, #0]
 8029c52:	683a      	ldr	r2, [r7, #0]
 8029c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8029c56:	68fb      	ldr	r3, [r7, #12]
 8029c58:	689b      	ldr	r3, [r3, #8]
 8029c5a:	2b40      	cmp	r3, #64	; 0x40
 8029c5c:	d108      	bne.n	8029c70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8029c5e:	68fb      	ldr	r3, [r7, #12]
 8029c60:	681b      	ldr	r3, [r3, #0]
 8029c62:	687a      	ldr	r2, [r7, #4]
 8029c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8029c66:	68fb      	ldr	r3, [r7, #12]
 8029c68:	681b      	ldr	r3, [r3, #0]
 8029c6a:	68ba      	ldr	r2, [r7, #8]
 8029c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8029c6e:	e007      	b.n	8029c80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8029c70:	68fb      	ldr	r3, [r7, #12]
 8029c72:	681b      	ldr	r3, [r3, #0]
 8029c74:	68ba      	ldr	r2, [r7, #8]
 8029c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8029c78:	68fb      	ldr	r3, [r7, #12]
 8029c7a:	681b      	ldr	r3, [r3, #0]
 8029c7c:	687a      	ldr	r2, [r7, #4]
 8029c7e:	60da      	str	r2, [r3, #12]
}
 8029c80:	bf00      	nop
 8029c82:	3714      	adds	r7, #20
 8029c84:	46bd      	mov	sp, r7
 8029c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c8a:	4770      	bx	lr

08029c8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8029c8c:	b480      	push	{r7}
 8029c8e:	b085      	sub	sp, #20
 8029c90:	af00      	add	r7, sp, #0
 8029c92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8029c94:	687b      	ldr	r3, [r7, #4]
 8029c96:	681b      	ldr	r3, [r3, #0]
 8029c98:	b2db      	uxtb	r3, r3
 8029c9a:	3b10      	subs	r3, #16
 8029c9c:	4a14      	ldr	r2, [pc, #80]	; (8029cf0 <DMA_CalcBaseAndBitshift+0x64>)
 8029c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8029ca2:	091b      	lsrs	r3, r3, #4
 8029ca4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8029ca6:	4a13      	ldr	r2, [pc, #76]	; (8029cf4 <DMA_CalcBaseAndBitshift+0x68>)
 8029ca8:	68fb      	ldr	r3, [r7, #12]
 8029caa:	4413      	add	r3, r2
 8029cac:	781b      	ldrb	r3, [r3, #0]
 8029cae:	461a      	mov	r2, r3
 8029cb0:	687b      	ldr	r3, [r7, #4]
 8029cb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8029cb4:	68fb      	ldr	r3, [r7, #12]
 8029cb6:	2b03      	cmp	r3, #3
 8029cb8:	d909      	bls.n	8029cce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8029cba:	687b      	ldr	r3, [r7, #4]
 8029cbc:	681b      	ldr	r3, [r3, #0]
 8029cbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8029cc2:	f023 0303 	bic.w	r3, r3, #3
 8029cc6:	1d1a      	adds	r2, r3, #4
 8029cc8:	687b      	ldr	r3, [r7, #4]
 8029cca:	659a      	str	r2, [r3, #88]	; 0x58
 8029ccc:	e007      	b.n	8029cde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8029cce:	687b      	ldr	r3, [r7, #4]
 8029cd0:	681b      	ldr	r3, [r3, #0]
 8029cd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8029cd6:	f023 0303 	bic.w	r3, r3, #3
 8029cda:	687a      	ldr	r2, [r7, #4]
 8029cdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8029cde:	687b      	ldr	r3, [r7, #4]
 8029ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8029ce2:	4618      	mov	r0, r3
 8029ce4:	3714      	adds	r7, #20
 8029ce6:	46bd      	mov	sp, r7
 8029ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cec:	4770      	bx	lr
 8029cee:	bf00      	nop
 8029cf0:	aaaaaaab 	.word	0xaaaaaaab
 8029cf4:	08049c14 	.word	0x08049c14

08029cf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8029cf8:	b480      	push	{r7}
 8029cfa:	b085      	sub	sp, #20
 8029cfc:	af00      	add	r7, sp, #0
 8029cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8029d00:	2300      	movs	r3, #0
 8029d02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8029d04:	687b      	ldr	r3, [r7, #4]
 8029d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029d08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8029d0a:	687b      	ldr	r3, [r7, #4]
 8029d0c:	699b      	ldr	r3, [r3, #24]
 8029d0e:	2b00      	cmp	r3, #0
 8029d10:	d11f      	bne.n	8029d52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8029d12:	68bb      	ldr	r3, [r7, #8]
 8029d14:	2b03      	cmp	r3, #3
 8029d16:	d856      	bhi.n	8029dc6 <DMA_CheckFifoParam+0xce>
 8029d18:	a201      	add	r2, pc, #4	; (adr r2, 8029d20 <DMA_CheckFifoParam+0x28>)
 8029d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029d1e:	bf00      	nop
 8029d20:	08029d31 	.word	0x08029d31
 8029d24:	08029d43 	.word	0x08029d43
 8029d28:	08029d31 	.word	0x08029d31
 8029d2c:	08029dc7 	.word	0x08029dc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8029d30:	687b      	ldr	r3, [r7, #4]
 8029d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8029d38:	2b00      	cmp	r3, #0
 8029d3a:	d046      	beq.n	8029dca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8029d3c:	2301      	movs	r3, #1
 8029d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8029d40:	e043      	b.n	8029dca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8029d42:	687b      	ldr	r3, [r7, #4]
 8029d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029d46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8029d4a:	d140      	bne.n	8029dce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8029d4c:	2301      	movs	r3, #1
 8029d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8029d50:	e03d      	b.n	8029dce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8029d52:	687b      	ldr	r3, [r7, #4]
 8029d54:	699b      	ldr	r3, [r3, #24]
 8029d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029d5a:	d121      	bne.n	8029da0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8029d5c:	68bb      	ldr	r3, [r7, #8]
 8029d5e:	2b03      	cmp	r3, #3
 8029d60:	d837      	bhi.n	8029dd2 <DMA_CheckFifoParam+0xda>
 8029d62:	a201      	add	r2, pc, #4	; (adr r2, 8029d68 <DMA_CheckFifoParam+0x70>)
 8029d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029d68:	08029d79 	.word	0x08029d79
 8029d6c:	08029d7f 	.word	0x08029d7f
 8029d70:	08029d79 	.word	0x08029d79
 8029d74:	08029d91 	.word	0x08029d91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8029d78:	2301      	movs	r3, #1
 8029d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8029d7c:	e030      	b.n	8029de0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8029d7e:	687b      	ldr	r3, [r7, #4]
 8029d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8029d86:	2b00      	cmp	r3, #0
 8029d88:	d025      	beq.n	8029dd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8029d8a:	2301      	movs	r3, #1
 8029d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8029d8e:	e022      	b.n	8029dd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8029d90:	687b      	ldr	r3, [r7, #4]
 8029d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029d94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8029d98:	d11f      	bne.n	8029dda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8029d9a:	2301      	movs	r3, #1
 8029d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8029d9e:	e01c      	b.n	8029dda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8029da0:	68bb      	ldr	r3, [r7, #8]
 8029da2:	2b02      	cmp	r3, #2
 8029da4:	d903      	bls.n	8029dae <DMA_CheckFifoParam+0xb6>
 8029da6:	68bb      	ldr	r3, [r7, #8]
 8029da8:	2b03      	cmp	r3, #3
 8029daa:	d003      	beq.n	8029db4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8029dac:	e018      	b.n	8029de0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8029dae:	2301      	movs	r3, #1
 8029db0:	73fb      	strb	r3, [r7, #15]
      break;
 8029db2:	e015      	b.n	8029de0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8029db4:	687b      	ldr	r3, [r7, #4]
 8029db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8029dbc:	2b00      	cmp	r3, #0
 8029dbe:	d00e      	beq.n	8029dde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8029dc0:	2301      	movs	r3, #1
 8029dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8029dc4:	e00b      	b.n	8029dde <DMA_CheckFifoParam+0xe6>
      break;
 8029dc6:	bf00      	nop
 8029dc8:	e00a      	b.n	8029de0 <DMA_CheckFifoParam+0xe8>
      break;
 8029dca:	bf00      	nop
 8029dcc:	e008      	b.n	8029de0 <DMA_CheckFifoParam+0xe8>
      break;
 8029dce:	bf00      	nop
 8029dd0:	e006      	b.n	8029de0 <DMA_CheckFifoParam+0xe8>
      break;
 8029dd2:	bf00      	nop
 8029dd4:	e004      	b.n	8029de0 <DMA_CheckFifoParam+0xe8>
      break;
 8029dd6:	bf00      	nop
 8029dd8:	e002      	b.n	8029de0 <DMA_CheckFifoParam+0xe8>
      break;   
 8029dda:	bf00      	nop
 8029ddc:	e000      	b.n	8029de0 <DMA_CheckFifoParam+0xe8>
      break;
 8029dde:	bf00      	nop
    }
  } 
  
  return status; 
 8029de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8029de2:	4618      	mov	r0, r3
 8029de4:	3714      	adds	r7, #20
 8029de6:	46bd      	mov	sp, r7
 8029de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dec:	4770      	bx	lr
 8029dee:	bf00      	nop

08029df0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8029df0:	b580      	push	{r7, lr}
 8029df2:	b086      	sub	sp, #24
 8029df4:	af00      	add	r7, sp, #0
 8029df6:	60f8      	str	r0, [r7, #12]
 8029df8:	60b9      	str	r1, [r7, #8]
 8029dfa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8029dfe:	2301      	movs	r3, #1
 8029e00:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8029e02:	4b23      	ldr	r3, [pc, #140]	; (8029e90 <HAL_FLASH_Program+0xa0>)
 8029e04:	7e1b      	ldrb	r3, [r3, #24]
 8029e06:	2b01      	cmp	r3, #1
 8029e08:	d101      	bne.n	8029e0e <HAL_FLASH_Program+0x1e>
 8029e0a:	2302      	movs	r3, #2
 8029e0c:	e03b      	b.n	8029e86 <HAL_FLASH_Program+0x96>
 8029e0e:	4b20      	ldr	r3, [pc, #128]	; (8029e90 <HAL_FLASH_Program+0xa0>)
 8029e10:	2201      	movs	r2, #1
 8029e12:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8029e14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8029e18:	f000 f870 	bl	8029efc <FLASH_WaitForLastOperation>
 8029e1c:	4603      	mov	r3, r0
 8029e1e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8029e20:	7dfb      	ldrb	r3, [r7, #23]
 8029e22:	2b00      	cmp	r3, #0
 8029e24:	d12b      	bne.n	8029e7e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8029e26:	68fb      	ldr	r3, [r7, #12]
 8029e28:	2b00      	cmp	r3, #0
 8029e2a:	d105      	bne.n	8029e38 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8029e2c:	783b      	ldrb	r3, [r7, #0]
 8029e2e:	4619      	mov	r1, r3
 8029e30:	68b8      	ldr	r0, [r7, #8]
 8029e32:	f000 f91b 	bl	802a06c <FLASH_Program_Byte>
 8029e36:	e016      	b.n	8029e66 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8029e38:	68fb      	ldr	r3, [r7, #12]
 8029e3a:	2b01      	cmp	r3, #1
 8029e3c:	d105      	bne.n	8029e4a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8029e3e:	883b      	ldrh	r3, [r7, #0]
 8029e40:	4619      	mov	r1, r3
 8029e42:	68b8      	ldr	r0, [r7, #8]
 8029e44:	f000 f8ee 	bl	802a024 <FLASH_Program_HalfWord>
 8029e48:	e00d      	b.n	8029e66 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8029e4a:	68fb      	ldr	r3, [r7, #12]
 8029e4c:	2b02      	cmp	r3, #2
 8029e4e:	d105      	bne.n	8029e5c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8029e50:	683b      	ldr	r3, [r7, #0]
 8029e52:	4619      	mov	r1, r3
 8029e54:	68b8      	ldr	r0, [r7, #8]
 8029e56:	f000 f8c3 	bl	8029fe0 <FLASH_Program_Word>
 8029e5a:	e004      	b.n	8029e66 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8029e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8029e60:	68b8      	ldr	r0, [r7, #8]
 8029e62:	f000 f88b 	bl	8029f7c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8029e66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8029e6a:	f000 f847 	bl	8029efc <FLASH_WaitForLastOperation>
 8029e6e:	4603      	mov	r3, r0
 8029e70:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8029e72:	4b08      	ldr	r3, [pc, #32]	; (8029e94 <HAL_FLASH_Program+0xa4>)
 8029e74:	691b      	ldr	r3, [r3, #16]
 8029e76:	4a07      	ldr	r2, [pc, #28]	; (8029e94 <HAL_FLASH_Program+0xa4>)
 8029e78:	f023 0301 	bic.w	r3, r3, #1
 8029e7c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8029e7e:	4b04      	ldr	r3, [pc, #16]	; (8029e90 <HAL_FLASH_Program+0xa0>)
 8029e80:	2200      	movs	r2, #0
 8029e82:	761a      	strb	r2, [r3, #24]
  
  return status;
 8029e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8029e86:	4618      	mov	r0, r3
 8029e88:	3718      	adds	r7, #24
 8029e8a:	46bd      	mov	sp, r7
 8029e8c:	bd80      	pop	{r7, pc}
 8029e8e:	bf00      	nop
 8029e90:	2000604c 	.word	0x2000604c
 8029e94:	40023c00 	.word	0x40023c00

08029e98 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8029e98:	b480      	push	{r7}
 8029e9a:	b083      	sub	sp, #12
 8029e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8029e9e:	2300      	movs	r3, #0
 8029ea0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8029ea2:	4b0b      	ldr	r3, [pc, #44]	; (8029ed0 <HAL_FLASH_Unlock+0x38>)
 8029ea4:	691b      	ldr	r3, [r3, #16]
 8029ea6:	2b00      	cmp	r3, #0
 8029ea8:	da0b      	bge.n	8029ec2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8029eaa:	4b09      	ldr	r3, [pc, #36]	; (8029ed0 <HAL_FLASH_Unlock+0x38>)
 8029eac:	4a09      	ldr	r2, [pc, #36]	; (8029ed4 <HAL_FLASH_Unlock+0x3c>)
 8029eae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8029eb0:	4b07      	ldr	r3, [pc, #28]	; (8029ed0 <HAL_FLASH_Unlock+0x38>)
 8029eb2:	4a09      	ldr	r2, [pc, #36]	; (8029ed8 <HAL_FLASH_Unlock+0x40>)
 8029eb4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8029eb6:	4b06      	ldr	r3, [pc, #24]	; (8029ed0 <HAL_FLASH_Unlock+0x38>)
 8029eb8:	691b      	ldr	r3, [r3, #16]
 8029eba:	2b00      	cmp	r3, #0
 8029ebc:	da01      	bge.n	8029ec2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8029ebe:	2301      	movs	r3, #1
 8029ec0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8029ec2:	79fb      	ldrb	r3, [r7, #7]
}
 8029ec4:	4618      	mov	r0, r3
 8029ec6:	370c      	adds	r7, #12
 8029ec8:	46bd      	mov	sp, r7
 8029eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ece:	4770      	bx	lr
 8029ed0:	40023c00 	.word	0x40023c00
 8029ed4:	45670123 	.word	0x45670123
 8029ed8:	cdef89ab 	.word	0xcdef89ab

08029edc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8029edc:	b480      	push	{r7}
 8029ede:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8029ee0:	4b05      	ldr	r3, [pc, #20]	; (8029ef8 <HAL_FLASH_Lock+0x1c>)
 8029ee2:	691b      	ldr	r3, [r3, #16]
 8029ee4:	4a04      	ldr	r2, [pc, #16]	; (8029ef8 <HAL_FLASH_Lock+0x1c>)
 8029ee6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8029eea:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8029eec:	2300      	movs	r3, #0
}
 8029eee:	4618      	mov	r0, r3
 8029ef0:	46bd      	mov	sp, r7
 8029ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ef6:	4770      	bx	lr
 8029ef8:	40023c00 	.word	0x40023c00

08029efc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8029efc:	b580      	push	{r7, lr}
 8029efe:	b084      	sub	sp, #16
 8029f00:	af00      	add	r7, sp, #0
 8029f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8029f04:	2300      	movs	r3, #0
 8029f06:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8029f08:	4b1a      	ldr	r3, [pc, #104]	; (8029f74 <FLASH_WaitForLastOperation+0x78>)
 8029f0a:	2200      	movs	r2, #0
 8029f0c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8029f0e:	f7fe fb05 	bl	802851c <HAL_GetTick>
 8029f12:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8029f14:	e010      	b.n	8029f38 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8029f16:	687b      	ldr	r3, [r7, #4]
 8029f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029f1c:	d00c      	beq.n	8029f38 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8029f1e:	687b      	ldr	r3, [r7, #4]
 8029f20:	2b00      	cmp	r3, #0
 8029f22:	d007      	beq.n	8029f34 <FLASH_WaitForLastOperation+0x38>
 8029f24:	f7fe fafa 	bl	802851c <HAL_GetTick>
 8029f28:	4602      	mov	r2, r0
 8029f2a:	68fb      	ldr	r3, [r7, #12]
 8029f2c:	1ad3      	subs	r3, r2, r3
 8029f2e:	687a      	ldr	r2, [r7, #4]
 8029f30:	429a      	cmp	r2, r3
 8029f32:	d201      	bcs.n	8029f38 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8029f34:	2303      	movs	r3, #3
 8029f36:	e019      	b.n	8029f6c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8029f38:	4b0f      	ldr	r3, [pc, #60]	; (8029f78 <FLASH_WaitForLastOperation+0x7c>)
 8029f3a:	68db      	ldr	r3, [r3, #12]
 8029f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029f40:	2b00      	cmp	r3, #0
 8029f42:	d1e8      	bne.n	8029f16 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8029f44:	4b0c      	ldr	r3, [pc, #48]	; (8029f78 <FLASH_WaitForLastOperation+0x7c>)
 8029f46:	68db      	ldr	r3, [r3, #12]
 8029f48:	f003 0301 	and.w	r3, r3, #1
 8029f4c:	2b00      	cmp	r3, #0
 8029f4e:	d002      	beq.n	8029f56 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8029f50:	4b09      	ldr	r3, [pc, #36]	; (8029f78 <FLASH_WaitForLastOperation+0x7c>)
 8029f52:	2201      	movs	r2, #1
 8029f54:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8029f56:	4b08      	ldr	r3, [pc, #32]	; (8029f78 <FLASH_WaitForLastOperation+0x7c>)
 8029f58:	68db      	ldr	r3, [r3, #12]
 8029f5a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8029f5e:	2b00      	cmp	r3, #0
 8029f60:	d003      	beq.n	8029f6a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8029f62:	f000 f8a5 	bl	802a0b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8029f66:	2301      	movs	r3, #1
 8029f68:	e000      	b.n	8029f6c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8029f6a:	2300      	movs	r3, #0
  
}  
 8029f6c:	4618      	mov	r0, r3
 8029f6e:	3710      	adds	r7, #16
 8029f70:	46bd      	mov	sp, r7
 8029f72:	bd80      	pop	{r7, pc}
 8029f74:	2000604c 	.word	0x2000604c
 8029f78:	40023c00 	.word	0x40023c00

08029f7c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8029f7c:	b480      	push	{r7}
 8029f7e:	b085      	sub	sp, #20
 8029f80:	af00      	add	r7, sp, #0
 8029f82:	60f8      	str	r0, [r7, #12]
 8029f84:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8029f88:	4b14      	ldr	r3, [pc, #80]	; (8029fdc <FLASH_Program_DoubleWord+0x60>)
 8029f8a:	691b      	ldr	r3, [r3, #16]
 8029f8c:	4a13      	ldr	r2, [pc, #76]	; (8029fdc <FLASH_Program_DoubleWord+0x60>)
 8029f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029f92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8029f94:	4b11      	ldr	r3, [pc, #68]	; (8029fdc <FLASH_Program_DoubleWord+0x60>)
 8029f96:	691b      	ldr	r3, [r3, #16]
 8029f98:	4a10      	ldr	r2, [pc, #64]	; (8029fdc <FLASH_Program_DoubleWord+0x60>)
 8029f9a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8029f9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8029fa0:	4b0e      	ldr	r3, [pc, #56]	; (8029fdc <FLASH_Program_DoubleWord+0x60>)
 8029fa2:	691b      	ldr	r3, [r3, #16]
 8029fa4:	4a0d      	ldr	r2, [pc, #52]	; (8029fdc <FLASH_Program_DoubleWord+0x60>)
 8029fa6:	f043 0301 	orr.w	r3, r3, #1
 8029faa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8029fac:	68fb      	ldr	r3, [r7, #12]
 8029fae:	683a      	ldr	r2, [r7, #0]
 8029fb0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8029fb2:	f3bf 8f6f 	isb	sy
}
 8029fb6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8029fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8029fbc:	f04f 0200 	mov.w	r2, #0
 8029fc0:	f04f 0300 	mov.w	r3, #0
 8029fc4:	000a      	movs	r2, r1
 8029fc6:	2300      	movs	r3, #0
 8029fc8:	68f9      	ldr	r1, [r7, #12]
 8029fca:	3104      	adds	r1, #4
 8029fcc:	4613      	mov	r3, r2
 8029fce:	600b      	str	r3, [r1, #0]
}
 8029fd0:	bf00      	nop
 8029fd2:	3714      	adds	r7, #20
 8029fd4:	46bd      	mov	sp, r7
 8029fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fda:	4770      	bx	lr
 8029fdc:	40023c00 	.word	0x40023c00

08029fe0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8029fe0:	b480      	push	{r7}
 8029fe2:	b083      	sub	sp, #12
 8029fe4:	af00      	add	r7, sp, #0
 8029fe6:	6078      	str	r0, [r7, #4]
 8029fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8029fea:	4b0d      	ldr	r3, [pc, #52]	; (802a020 <FLASH_Program_Word+0x40>)
 8029fec:	691b      	ldr	r3, [r3, #16]
 8029fee:	4a0c      	ldr	r2, [pc, #48]	; (802a020 <FLASH_Program_Word+0x40>)
 8029ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029ff4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8029ff6:	4b0a      	ldr	r3, [pc, #40]	; (802a020 <FLASH_Program_Word+0x40>)
 8029ff8:	691b      	ldr	r3, [r3, #16]
 8029ffa:	4a09      	ldr	r2, [pc, #36]	; (802a020 <FLASH_Program_Word+0x40>)
 8029ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802a000:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802a002:	4b07      	ldr	r3, [pc, #28]	; (802a020 <FLASH_Program_Word+0x40>)
 802a004:	691b      	ldr	r3, [r3, #16]
 802a006:	4a06      	ldr	r2, [pc, #24]	; (802a020 <FLASH_Program_Word+0x40>)
 802a008:	f043 0301 	orr.w	r3, r3, #1
 802a00c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802a00e:	687b      	ldr	r3, [r7, #4]
 802a010:	683a      	ldr	r2, [r7, #0]
 802a012:	601a      	str	r2, [r3, #0]
}
 802a014:	bf00      	nop
 802a016:	370c      	adds	r7, #12
 802a018:	46bd      	mov	sp, r7
 802a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a01e:	4770      	bx	lr
 802a020:	40023c00 	.word	0x40023c00

0802a024 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 802a024:	b480      	push	{r7}
 802a026:	b083      	sub	sp, #12
 802a028:	af00      	add	r7, sp, #0
 802a02a:	6078      	str	r0, [r7, #4]
 802a02c:	460b      	mov	r3, r1
 802a02e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802a030:	4b0d      	ldr	r3, [pc, #52]	; (802a068 <FLASH_Program_HalfWord+0x44>)
 802a032:	691b      	ldr	r3, [r3, #16]
 802a034:	4a0c      	ldr	r2, [pc, #48]	; (802a068 <FLASH_Program_HalfWord+0x44>)
 802a036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a03a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 802a03c:	4b0a      	ldr	r3, [pc, #40]	; (802a068 <FLASH_Program_HalfWord+0x44>)
 802a03e:	691b      	ldr	r3, [r3, #16]
 802a040:	4a09      	ldr	r2, [pc, #36]	; (802a068 <FLASH_Program_HalfWord+0x44>)
 802a042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a046:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802a048:	4b07      	ldr	r3, [pc, #28]	; (802a068 <FLASH_Program_HalfWord+0x44>)
 802a04a:	691b      	ldr	r3, [r3, #16]
 802a04c:	4a06      	ldr	r2, [pc, #24]	; (802a068 <FLASH_Program_HalfWord+0x44>)
 802a04e:	f043 0301 	orr.w	r3, r3, #1
 802a052:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 802a054:	687b      	ldr	r3, [r7, #4]
 802a056:	887a      	ldrh	r2, [r7, #2]
 802a058:	801a      	strh	r2, [r3, #0]
}
 802a05a:	bf00      	nop
 802a05c:	370c      	adds	r7, #12
 802a05e:	46bd      	mov	sp, r7
 802a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a064:	4770      	bx	lr
 802a066:	bf00      	nop
 802a068:	40023c00 	.word	0x40023c00

0802a06c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 802a06c:	b480      	push	{r7}
 802a06e:	b083      	sub	sp, #12
 802a070:	af00      	add	r7, sp, #0
 802a072:	6078      	str	r0, [r7, #4]
 802a074:	460b      	mov	r3, r1
 802a076:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802a078:	4b0c      	ldr	r3, [pc, #48]	; (802a0ac <FLASH_Program_Byte+0x40>)
 802a07a:	691b      	ldr	r3, [r3, #16]
 802a07c:	4a0b      	ldr	r2, [pc, #44]	; (802a0ac <FLASH_Program_Byte+0x40>)
 802a07e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a082:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 802a084:	4b09      	ldr	r3, [pc, #36]	; (802a0ac <FLASH_Program_Byte+0x40>)
 802a086:	4a09      	ldr	r2, [pc, #36]	; (802a0ac <FLASH_Program_Byte+0x40>)
 802a088:	691b      	ldr	r3, [r3, #16]
 802a08a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802a08c:	4b07      	ldr	r3, [pc, #28]	; (802a0ac <FLASH_Program_Byte+0x40>)
 802a08e:	691b      	ldr	r3, [r3, #16]
 802a090:	4a06      	ldr	r2, [pc, #24]	; (802a0ac <FLASH_Program_Byte+0x40>)
 802a092:	f043 0301 	orr.w	r3, r3, #1
 802a096:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 802a098:	687b      	ldr	r3, [r7, #4]
 802a09a:	78fa      	ldrb	r2, [r7, #3]
 802a09c:	701a      	strb	r2, [r3, #0]
}
 802a09e:	bf00      	nop
 802a0a0:	370c      	adds	r7, #12
 802a0a2:	46bd      	mov	sp, r7
 802a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0a8:	4770      	bx	lr
 802a0aa:	bf00      	nop
 802a0ac:	40023c00 	.word	0x40023c00

0802a0b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 802a0b0:	b480      	push	{r7}
 802a0b2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 802a0b4:	4b2f      	ldr	r3, [pc, #188]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a0b6:	68db      	ldr	r3, [r3, #12]
 802a0b8:	f003 0310 	and.w	r3, r3, #16
 802a0bc:	2b00      	cmp	r3, #0
 802a0be:	d008      	beq.n	802a0d2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 802a0c0:	4b2d      	ldr	r3, [pc, #180]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a0c2:	69db      	ldr	r3, [r3, #28]
 802a0c4:	f043 0310 	orr.w	r3, r3, #16
 802a0c8:	4a2b      	ldr	r2, [pc, #172]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a0ca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 802a0cc:	4b29      	ldr	r3, [pc, #164]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a0ce:	2210      	movs	r2, #16
 802a0d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 802a0d2:	4b28      	ldr	r3, [pc, #160]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a0d4:	68db      	ldr	r3, [r3, #12]
 802a0d6:	f003 0320 	and.w	r3, r3, #32
 802a0da:	2b00      	cmp	r3, #0
 802a0dc:	d008      	beq.n	802a0f0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802a0de:	4b26      	ldr	r3, [pc, #152]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a0e0:	69db      	ldr	r3, [r3, #28]
 802a0e2:	f043 0308 	orr.w	r3, r3, #8
 802a0e6:	4a24      	ldr	r2, [pc, #144]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a0e8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 802a0ea:	4b22      	ldr	r3, [pc, #136]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a0ec:	2220      	movs	r2, #32
 802a0ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 802a0f0:	4b20      	ldr	r3, [pc, #128]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a0f2:	68db      	ldr	r3, [r3, #12]
 802a0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802a0f8:	2b00      	cmp	r3, #0
 802a0fa:	d008      	beq.n	802a10e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 802a0fc:	4b1e      	ldr	r3, [pc, #120]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a0fe:	69db      	ldr	r3, [r3, #28]
 802a100:	f043 0304 	orr.w	r3, r3, #4
 802a104:	4a1c      	ldr	r2, [pc, #112]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a106:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 802a108:	4b1a      	ldr	r3, [pc, #104]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a10a:	2240      	movs	r2, #64	; 0x40
 802a10c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802a10e:	4b19      	ldr	r3, [pc, #100]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a110:	68db      	ldr	r3, [r3, #12]
 802a112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802a116:	2b00      	cmp	r3, #0
 802a118:	d008      	beq.n	802a12c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 802a11a:	4b17      	ldr	r3, [pc, #92]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a11c:	69db      	ldr	r3, [r3, #28]
 802a11e:	f043 0302 	orr.w	r3, r3, #2
 802a122:	4a15      	ldr	r2, [pc, #84]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a124:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 802a126:	4b13      	ldr	r3, [pc, #76]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a128:	2280      	movs	r2, #128	; 0x80
 802a12a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 802a12c:	4b11      	ldr	r3, [pc, #68]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a12e:	68db      	ldr	r3, [r3, #12]
 802a130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a134:	2b00      	cmp	r3, #0
 802a136:	d009      	beq.n	802a14c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 802a138:	4b0f      	ldr	r3, [pc, #60]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a13a:	69db      	ldr	r3, [r3, #28]
 802a13c:	f043 0301 	orr.w	r3, r3, #1
 802a140:	4a0d      	ldr	r2, [pc, #52]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a142:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 802a144:	4b0b      	ldr	r3, [pc, #44]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a146:	f44f 7280 	mov.w	r2, #256	; 0x100
 802a14a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 802a14c:	4b09      	ldr	r3, [pc, #36]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a14e:	68db      	ldr	r3, [r3, #12]
 802a150:	f003 0302 	and.w	r3, r3, #2
 802a154:	2b00      	cmp	r3, #0
 802a156:	d008      	beq.n	802a16a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 802a158:	4b07      	ldr	r3, [pc, #28]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a15a:	69db      	ldr	r3, [r3, #28]
 802a15c:	f043 0320 	orr.w	r3, r3, #32
 802a160:	4a05      	ldr	r2, [pc, #20]	; (802a178 <FLASH_SetErrorCode+0xc8>)
 802a162:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 802a164:	4b03      	ldr	r3, [pc, #12]	; (802a174 <FLASH_SetErrorCode+0xc4>)
 802a166:	2202      	movs	r2, #2
 802a168:	60da      	str	r2, [r3, #12]
  }
}
 802a16a:	bf00      	nop
 802a16c:	46bd      	mov	sp, r7
 802a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a172:	4770      	bx	lr
 802a174:	40023c00 	.word	0x40023c00
 802a178:	2000604c 	.word	0x2000604c

0802a17c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 802a17c:	b580      	push	{r7, lr}
 802a17e:	b084      	sub	sp, #16
 802a180:	af00      	add	r7, sp, #0
 802a182:	6078      	str	r0, [r7, #4]
 802a184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 802a186:	2301      	movs	r3, #1
 802a188:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 802a18a:	2300      	movs	r3, #0
 802a18c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802a18e:	4b31      	ldr	r3, [pc, #196]	; (802a254 <HAL_FLASHEx_Erase+0xd8>)
 802a190:	7e1b      	ldrb	r3, [r3, #24]
 802a192:	2b01      	cmp	r3, #1
 802a194:	d101      	bne.n	802a19a <HAL_FLASHEx_Erase+0x1e>
 802a196:	2302      	movs	r3, #2
 802a198:	e058      	b.n	802a24c <HAL_FLASHEx_Erase+0xd0>
 802a19a:	4b2e      	ldr	r3, [pc, #184]	; (802a254 <HAL_FLASHEx_Erase+0xd8>)
 802a19c:	2201      	movs	r2, #1
 802a19e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802a1a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 802a1a4:	f7ff feaa 	bl	8029efc <FLASH_WaitForLastOperation>
 802a1a8:	4603      	mov	r3, r0
 802a1aa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 802a1ac:	7bfb      	ldrb	r3, [r7, #15]
 802a1ae:	2b00      	cmp	r3, #0
 802a1b0:	d148      	bne.n	802a244 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802a1b2:	683b      	ldr	r3, [r7, #0]
 802a1b4:	f04f 32ff 	mov.w	r2, #4294967295
 802a1b8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 802a1ba:	687b      	ldr	r3, [r7, #4]
 802a1bc:	681b      	ldr	r3, [r3, #0]
 802a1be:	2b01      	cmp	r3, #1
 802a1c0:	d115      	bne.n	802a1ee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802a1c2:	687b      	ldr	r3, [r7, #4]
 802a1c4:	691b      	ldr	r3, [r3, #16]
 802a1c6:	b2da      	uxtb	r2, r3
 802a1c8:	687b      	ldr	r3, [r7, #4]
 802a1ca:	685b      	ldr	r3, [r3, #4]
 802a1cc:	4619      	mov	r1, r3
 802a1ce:	4610      	mov	r0, r2
 802a1d0:	f000 f844 	bl	802a25c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802a1d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 802a1d8:	f7ff fe90 	bl	8029efc <FLASH_WaitForLastOperation>
 802a1dc:	4603      	mov	r3, r0
 802a1de:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 802a1e0:	4b1d      	ldr	r3, [pc, #116]	; (802a258 <HAL_FLASHEx_Erase+0xdc>)
 802a1e2:	691b      	ldr	r3, [r3, #16]
 802a1e4:	4a1c      	ldr	r2, [pc, #112]	; (802a258 <HAL_FLASHEx_Erase+0xdc>)
 802a1e6:	f023 0304 	bic.w	r3, r3, #4
 802a1ea:	6113      	str	r3, [r2, #16]
 802a1ec:	e028      	b.n	802a240 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802a1ee:	687b      	ldr	r3, [r7, #4]
 802a1f0:	689b      	ldr	r3, [r3, #8]
 802a1f2:	60bb      	str	r3, [r7, #8]
 802a1f4:	e01c      	b.n	802a230 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 802a1f6:	687b      	ldr	r3, [r7, #4]
 802a1f8:	691b      	ldr	r3, [r3, #16]
 802a1fa:	b2db      	uxtb	r3, r3
 802a1fc:	4619      	mov	r1, r3
 802a1fe:	68b8      	ldr	r0, [r7, #8]
 802a200:	f000 f850 	bl	802a2a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802a204:	f24c 3050 	movw	r0, #50000	; 0xc350
 802a208:	f7ff fe78 	bl	8029efc <FLASH_WaitForLastOperation>
 802a20c:	4603      	mov	r3, r0
 802a20e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 802a210:	4b11      	ldr	r3, [pc, #68]	; (802a258 <HAL_FLASHEx_Erase+0xdc>)
 802a212:	691b      	ldr	r3, [r3, #16]
 802a214:	4a10      	ldr	r2, [pc, #64]	; (802a258 <HAL_FLASHEx_Erase+0xdc>)
 802a216:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802a21a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 802a21c:	7bfb      	ldrb	r3, [r7, #15]
 802a21e:	2b00      	cmp	r3, #0
 802a220:	d003      	beq.n	802a22a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802a222:	683b      	ldr	r3, [r7, #0]
 802a224:	68ba      	ldr	r2, [r7, #8]
 802a226:	601a      	str	r2, [r3, #0]
          break;
 802a228:	e00a      	b.n	802a240 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802a22a:	68bb      	ldr	r3, [r7, #8]
 802a22c:	3301      	adds	r3, #1
 802a22e:	60bb      	str	r3, [r7, #8]
 802a230:	687b      	ldr	r3, [r7, #4]
 802a232:	68da      	ldr	r2, [r3, #12]
 802a234:	687b      	ldr	r3, [r7, #4]
 802a236:	689b      	ldr	r3, [r3, #8]
 802a238:	4413      	add	r3, r2
 802a23a:	68ba      	ldr	r2, [r7, #8]
 802a23c:	429a      	cmp	r2, r3
 802a23e:	d3da      	bcc.n	802a1f6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 802a240:	f000 f878 	bl	802a334 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802a244:	4b03      	ldr	r3, [pc, #12]	; (802a254 <HAL_FLASHEx_Erase+0xd8>)
 802a246:	2200      	movs	r2, #0
 802a248:	761a      	strb	r2, [r3, #24]

  return status;
 802a24a:	7bfb      	ldrb	r3, [r7, #15]
}
 802a24c:	4618      	mov	r0, r3
 802a24e:	3710      	adds	r7, #16
 802a250:	46bd      	mov	sp, r7
 802a252:	bd80      	pop	{r7, pc}
 802a254:	2000604c 	.word	0x2000604c
 802a258:	40023c00 	.word	0x40023c00

0802a25c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 802a25c:	b480      	push	{r7}
 802a25e:	b083      	sub	sp, #12
 802a260:	af00      	add	r7, sp, #0
 802a262:	4603      	mov	r3, r0
 802a264:	6039      	str	r1, [r7, #0]
 802a266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802a268:	4b0d      	ldr	r3, [pc, #52]	; (802a2a0 <FLASH_MassErase+0x44>)
 802a26a:	691b      	ldr	r3, [r3, #16]
 802a26c:	4a0c      	ldr	r2, [pc, #48]	; (802a2a0 <FLASH_MassErase+0x44>)
 802a26e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a272:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 802a274:	4b0a      	ldr	r3, [pc, #40]	; (802a2a0 <FLASH_MassErase+0x44>)
 802a276:	691b      	ldr	r3, [r3, #16]
 802a278:	4a09      	ldr	r2, [pc, #36]	; (802a2a0 <FLASH_MassErase+0x44>)
 802a27a:	f043 0304 	orr.w	r3, r3, #4
 802a27e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 802a280:	4b07      	ldr	r3, [pc, #28]	; (802a2a0 <FLASH_MassErase+0x44>)
 802a282:	691a      	ldr	r2, [r3, #16]
 802a284:	79fb      	ldrb	r3, [r7, #7]
 802a286:	021b      	lsls	r3, r3, #8
 802a288:	4313      	orrs	r3, r2
 802a28a:	4a05      	ldr	r2, [pc, #20]	; (802a2a0 <FLASH_MassErase+0x44>)
 802a28c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a290:	6113      	str	r3, [r2, #16]
}
 802a292:	bf00      	nop
 802a294:	370c      	adds	r7, #12
 802a296:	46bd      	mov	sp, r7
 802a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a29c:	4770      	bx	lr
 802a29e:	bf00      	nop
 802a2a0:	40023c00 	.word	0x40023c00

0802a2a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 802a2a4:	b480      	push	{r7}
 802a2a6:	b085      	sub	sp, #20
 802a2a8:	af00      	add	r7, sp, #0
 802a2aa:	6078      	str	r0, [r7, #4]
 802a2ac:	460b      	mov	r3, r1
 802a2ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 802a2b0:	2300      	movs	r3, #0
 802a2b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 802a2b4:	78fb      	ldrb	r3, [r7, #3]
 802a2b6:	2b00      	cmp	r3, #0
 802a2b8:	d102      	bne.n	802a2c0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 802a2ba:	2300      	movs	r3, #0
 802a2bc:	60fb      	str	r3, [r7, #12]
 802a2be:	e010      	b.n	802a2e2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 802a2c0:	78fb      	ldrb	r3, [r7, #3]
 802a2c2:	2b01      	cmp	r3, #1
 802a2c4:	d103      	bne.n	802a2ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 802a2c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 802a2ca:	60fb      	str	r3, [r7, #12]
 802a2cc:	e009      	b.n	802a2e2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 802a2ce:	78fb      	ldrb	r3, [r7, #3]
 802a2d0:	2b02      	cmp	r3, #2
 802a2d2:	d103      	bne.n	802a2dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 802a2d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 802a2d8:	60fb      	str	r3, [r7, #12]
 802a2da:	e002      	b.n	802a2e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 802a2dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 802a2e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802a2e2:	4b13      	ldr	r3, [pc, #76]	; (802a330 <FLASH_Erase_Sector+0x8c>)
 802a2e4:	691b      	ldr	r3, [r3, #16]
 802a2e6:	4a12      	ldr	r2, [pc, #72]	; (802a330 <FLASH_Erase_Sector+0x8c>)
 802a2e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a2ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 802a2ee:	4b10      	ldr	r3, [pc, #64]	; (802a330 <FLASH_Erase_Sector+0x8c>)
 802a2f0:	691a      	ldr	r2, [r3, #16]
 802a2f2:	490f      	ldr	r1, [pc, #60]	; (802a330 <FLASH_Erase_Sector+0x8c>)
 802a2f4:	68fb      	ldr	r3, [r7, #12]
 802a2f6:	4313      	orrs	r3, r2
 802a2f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 802a2fa:	4b0d      	ldr	r3, [pc, #52]	; (802a330 <FLASH_Erase_Sector+0x8c>)
 802a2fc:	691b      	ldr	r3, [r3, #16]
 802a2fe:	4a0c      	ldr	r2, [pc, #48]	; (802a330 <FLASH_Erase_Sector+0x8c>)
 802a300:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 802a304:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 802a306:	4b0a      	ldr	r3, [pc, #40]	; (802a330 <FLASH_Erase_Sector+0x8c>)
 802a308:	691a      	ldr	r2, [r3, #16]
 802a30a:	687b      	ldr	r3, [r7, #4]
 802a30c:	00db      	lsls	r3, r3, #3
 802a30e:	4313      	orrs	r3, r2
 802a310:	4a07      	ldr	r2, [pc, #28]	; (802a330 <FLASH_Erase_Sector+0x8c>)
 802a312:	f043 0302 	orr.w	r3, r3, #2
 802a316:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 802a318:	4b05      	ldr	r3, [pc, #20]	; (802a330 <FLASH_Erase_Sector+0x8c>)
 802a31a:	691b      	ldr	r3, [r3, #16]
 802a31c:	4a04      	ldr	r2, [pc, #16]	; (802a330 <FLASH_Erase_Sector+0x8c>)
 802a31e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802a322:	6113      	str	r3, [r2, #16]
}
 802a324:	bf00      	nop
 802a326:	3714      	adds	r7, #20
 802a328:	46bd      	mov	sp, r7
 802a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a32e:	4770      	bx	lr
 802a330:	40023c00 	.word	0x40023c00

0802a334 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 802a334:	b480      	push	{r7}
 802a336:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 802a338:	4b20      	ldr	r3, [pc, #128]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a33a:	681b      	ldr	r3, [r3, #0]
 802a33c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802a340:	2b00      	cmp	r3, #0
 802a342:	d017      	beq.n	802a374 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 802a344:	4b1d      	ldr	r3, [pc, #116]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a346:	681b      	ldr	r3, [r3, #0]
 802a348:	4a1c      	ldr	r2, [pc, #112]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a34a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802a34e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 802a350:	4b1a      	ldr	r3, [pc, #104]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a352:	681b      	ldr	r3, [r3, #0]
 802a354:	4a19      	ldr	r2, [pc, #100]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a356:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802a35a:	6013      	str	r3, [r2, #0]
 802a35c:	4b17      	ldr	r3, [pc, #92]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a35e:	681b      	ldr	r3, [r3, #0]
 802a360:	4a16      	ldr	r2, [pc, #88]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802a366:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802a368:	4b14      	ldr	r3, [pc, #80]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a36a:	681b      	ldr	r3, [r3, #0]
 802a36c:	4a13      	ldr	r2, [pc, #76]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a36e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802a372:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 802a374:	4b11      	ldr	r3, [pc, #68]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a376:	681b      	ldr	r3, [r3, #0]
 802a378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802a37c:	2b00      	cmp	r3, #0
 802a37e:	d017      	beq.n	802a3b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 802a380:	4b0e      	ldr	r3, [pc, #56]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a382:	681b      	ldr	r3, [r3, #0]
 802a384:	4a0d      	ldr	r2, [pc, #52]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802a38a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 802a38c:	4b0b      	ldr	r3, [pc, #44]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a38e:	681b      	ldr	r3, [r3, #0]
 802a390:	4a0a      	ldr	r2, [pc, #40]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a392:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802a396:	6013      	str	r3, [r2, #0]
 802a398:	4b08      	ldr	r3, [pc, #32]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a39a:	681b      	ldr	r3, [r3, #0]
 802a39c:	4a07      	ldr	r2, [pc, #28]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a39e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a3a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 802a3a4:	4b05      	ldr	r3, [pc, #20]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a3a6:	681b      	ldr	r3, [r3, #0]
 802a3a8:	4a04      	ldr	r2, [pc, #16]	; (802a3bc <FLASH_FlushCaches+0x88>)
 802a3aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802a3ae:	6013      	str	r3, [r2, #0]
  }
}
 802a3b0:	bf00      	nop
 802a3b2:	46bd      	mov	sp, r7
 802a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3b8:	4770      	bx	lr
 802a3ba:	bf00      	nop
 802a3bc:	40023c00 	.word	0x40023c00

0802a3c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802a3c0:	b480      	push	{r7}
 802a3c2:	b089      	sub	sp, #36	; 0x24
 802a3c4:	af00      	add	r7, sp, #0
 802a3c6:	6078      	str	r0, [r7, #4]
 802a3c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802a3ca:	2300      	movs	r3, #0
 802a3cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802a3ce:	2300      	movs	r3, #0
 802a3d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802a3d2:	2300      	movs	r3, #0
 802a3d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802a3d6:	2300      	movs	r3, #0
 802a3d8:	61fb      	str	r3, [r7, #28]
 802a3da:	e165      	b.n	802a6a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802a3dc:	2201      	movs	r2, #1
 802a3de:	69fb      	ldr	r3, [r7, #28]
 802a3e0:	fa02 f303 	lsl.w	r3, r2, r3
 802a3e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802a3e6:	683b      	ldr	r3, [r7, #0]
 802a3e8:	681b      	ldr	r3, [r3, #0]
 802a3ea:	697a      	ldr	r2, [r7, #20]
 802a3ec:	4013      	ands	r3, r2
 802a3ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802a3f0:	693a      	ldr	r2, [r7, #16]
 802a3f2:	697b      	ldr	r3, [r7, #20]
 802a3f4:	429a      	cmp	r2, r3
 802a3f6:	f040 8154 	bne.w	802a6a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802a3fa:	683b      	ldr	r3, [r7, #0]
 802a3fc:	685b      	ldr	r3, [r3, #4]
 802a3fe:	2b01      	cmp	r3, #1
 802a400:	d00b      	beq.n	802a41a <HAL_GPIO_Init+0x5a>
 802a402:	683b      	ldr	r3, [r7, #0]
 802a404:	685b      	ldr	r3, [r3, #4]
 802a406:	2b02      	cmp	r3, #2
 802a408:	d007      	beq.n	802a41a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802a40a:	683b      	ldr	r3, [r7, #0]
 802a40c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802a40e:	2b11      	cmp	r3, #17
 802a410:	d003      	beq.n	802a41a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802a412:	683b      	ldr	r3, [r7, #0]
 802a414:	685b      	ldr	r3, [r3, #4]
 802a416:	2b12      	cmp	r3, #18
 802a418:	d130      	bne.n	802a47c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802a41a:	687b      	ldr	r3, [r7, #4]
 802a41c:	689b      	ldr	r3, [r3, #8]
 802a41e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 802a420:	69fb      	ldr	r3, [r7, #28]
 802a422:	005b      	lsls	r3, r3, #1
 802a424:	2203      	movs	r2, #3
 802a426:	fa02 f303 	lsl.w	r3, r2, r3
 802a42a:	43db      	mvns	r3, r3
 802a42c:	69ba      	ldr	r2, [r7, #24]
 802a42e:	4013      	ands	r3, r2
 802a430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802a432:	683b      	ldr	r3, [r7, #0]
 802a434:	68da      	ldr	r2, [r3, #12]
 802a436:	69fb      	ldr	r3, [r7, #28]
 802a438:	005b      	lsls	r3, r3, #1
 802a43a:	fa02 f303 	lsl.w	r3, r2, r3
 802a43e:	69ba      	ldr	r2, [r7, #24]
 802a440:	4313      	orrs	r3, r2
 802a442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802a444:	687b      	ldr	r3, [r7, #4]
 802a446:	69ba      	ldr	r2, [r7, #24]
 802a448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802a44a:	687b      	ldr	r3, [r7, #4]
 802a44c:	685b      	ldr	r3, [r3, #4]
 802a44e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802a450:	2201      	movs	r2, #1
 802a452:	69fb      	ldr	r3, [r7, #28]
 802a454:	fa02 f303 	lsl.w	r3, r2, r3
 802a458:	43db      	mvns	r3, r3
 802a45a:	69ba      	ldr	r2, [r7, #24]
 802a45c:	4013      	ands	r3, r2
 802a45e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 802a460:	683b      	ldr	r3, [r7, #0]
 802a462:	685b      	ldr	r3, [r3, #4]
 802a464:	091b      	lsrs	r3, r3, #4
 802a466:	f003 0201 	and.w	r2, r3, #1
 802a46a:	69fb      	ldr	r3, [r7, #28]
 802a46c:	fa02 f303 	lsl.w	r3, r2, r3
 802a470:	69ba      	ldr	r2, [r7, #24]
 802a472:	4313      	orrs	r3, r2
 802a474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802a476:	687b      	ldr	r3, [r7, #4]
 802a478:	69ba      	ldr	r2, [r7, #24]
 802a47a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802a47c:	687b      	ldr	r3, [r7, #4]
 802a47e:	68db      	ldr	r3, [r3, #12]
 802a480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 802a482:	69fb      	ldr	r3, [r7, #28]
 802a484:	005b      	lsls	r3, r3, #1
 802a486:	2203      	movs	r2, #3
 802a488:	fa02 f303 	lsl.w	r3, r2, r3
 802a48c:	43db      	mvns	r3, r3
 802a48e:	69ba      	ldr	r2, [r7, #24]
 802a490:	4013      	ands	r3, r2
 802a492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 802a494:	683b      	ldr	r3, [r7, #0]
 802a496:	689a      	ldr	r2, [r3, #8]
 802a498:	69fb      	ldr	r3, [r7, #28]
 802a49a:	005b      	lsls	r3, r3, #1
 802a49c:	fa02 f303 	lsl.w	r3, r2, r3
 802a4a0:	69ba      	ldr	r2, [r7, #24]
 802a4a2:	4313      	orrs	r3, r2
 802a4a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802a4a6:	687b      	ldr	r3, [r7, #4]
 802a4a8:	69ba      	ldr	r2, [r7, #24]
 802a4aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802a4ac:	683b      	ldr	r3, [r7, #0]
 802a4ae:	685b      	ldr	r3, [r3, #4]
 802a4b0:	2b02      	cmp	r3, #2
 802a4b2:	d003      	beq.n	802a4bc <HAL_GPIO_Init+0xfc>
 802a4b4:	683b      	ldr	r3, [r7, #0]
 802a4b6:	685b      	ldr	r3, [r3, #4]
 802a4b8:	2b12      	cmp	r3, #18
 802a4ba:	d123      	bne.n	802a504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802a4bc:	69fb      	ldr	r3, [r7, #28]
 802a4be:	08da      	lsrs	r2, r3, #3
 802a4c0:	687b      	ldr	r3, [r7, #4]
 802a4c2:	3208      	adds	r2, #8
 802a4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802a4c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802a4ca:	69fb      	ldr	r3, [r7, #28]
 802a4cc:	f003 0307 	and.w	r3, r3, #7
 802a4d0:	009b      	lsls	r3, r3, #2
 802a4d2:	220f      	movs	r2, #15
 802a4d4:	fa02 f303 	lsl.w	r3, r2, r3
 802a4d8:	43db      	mvns	r3, r3
 802a4da:	69ba      	ldr	r2, [r7, #24]
 802a4dc:	4013      	ands	r3, r2
 802a4de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802a4e0:	683b      	ldr	r3, [r7, #0]
 802a4e2:	691a      	ldr	r2, [r3, #16]
 802a4e4:	69fb      	ldr	r3, [r7, #28]
 802a4e6:	f003 0307 	and.w	r3, r3, #7
 802a4ea:	009b      	lsls	r3, r3, #2
 802a4ec:	fa02 f303 	lsl.w	r3, r2, r3
 802a4f0:	69ba      	ldr	r2, [r7, #24]
 802a4f2:	4313      	orrs	r3, r2
 802a4f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802a4f6:	69fb      	ldr	r3, [r7, #28]
 802a4f8:	08da      	lsrs	r2, r3, #3
 802a4fa:	687b      	ldr	r3, [r7, #4]
 802a4fc:	3208      	adds	r2, #8
 802a4fe:	69b9      	ldr	r1, [r7, #24]
 802a500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802a504:	687b      	ldr	r3, [r7, #4]
 802a506:	681b      	ldr	r3, [r3, #0]
 802a508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802a50a:	69fb      	ldr	r3, [r7, #28]
 802a50c:	005b      	lsls	r3, r3, #1
 802a50e:	2203      	movs	r2, #3
 802a510:	fa02 f303 	lsl.w	r3, r2, r3
 802a514:	43db      	mvns	r3, r3
 802a516:	69ba      	ldr	r2, [r7, #24]
 802a518:	4013      	ands	r3, r2
 802a51a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802a51c:	683b      	ldr	r3, [r7, #0]
 802a51e:	685b      	ldr	r3, [r3, #4]
 802a520:	f003 0203 	and.w	r2, r3, #3
 802a524:	69fb      	ldr	r3, [r7, #28]
 802a526:	005b      	lsls	r3, r3, #1
 802a528:	fa02 f303 	lsl.w	r3, r2, r3
 802a52c:	69ba      	ldr	r2, [r7, #24]
 802a52e:	4313      	orrs	r3, r2
 802a530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802a532:	687b      	ldr	r3, [r7, #4]
 802a534:	69ba      	ldr	r2, [r7, #24]
 802a536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 802a538:	683b      	ldr	r3, [r7, #0]
 802a53a:	685b      	ldr	r3, [r3, #4]
 802a53c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802a540:	2b00      	cmp	r3, #0
 802a542:	f000 80ae 	beq.w	802a6a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802a546:	2300      	movs	r3, #0
 802a548:	60fb      	str	r3, [r7, #12]
 802a54a:	4b5d      	ldr	r3, [pc, #372]	; (802a6c0 <HAL_GPIO_Init+0x300>)
 802a54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802a54e:	4a5c      	ldr	r2, [pc, #368]	; (802a6c0 <HAL_GPIO_Init+0x300>)
 802a550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802a554:	6453      	str	r3, [r2, #68]	; 0x44
 802a556:	4b5a      	ldr	r3, [pc, #360]	; (802a6c0 <HAL_GPIO_Init+0x300>)
 802a558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802a55a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802a55e:	60fb      	str	r3, [r7, #12]
 802a560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802a562:	4a58      	ldr	r2, [pc, #352]	; (802a6c4 <HAL_GPIO_Init+0x304>)
 802a564:	69fb      	ldr	r3, [r7, #28]
 802a566:	089b      	lsrs	r3, r3, #2
 802a568:	3302      	adds	r3, #2
 802a56a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802a56e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802a570:	69fb      	ldr	r3, [r7, #28]
 802a572:	f003 0303 	and.w	r3, r3, #3
 802a576:	009b      	lsls	r3, r3, #2
 802a578:	220f      	movs	r2, #15
 802a57a:	fa02 f303 	lsl.w	r3, r2, r3
 802a57e:	43db      	mvns	r3, r3
 802a580:	69ba      	ldr	r2, [r7, #24]
 802a582:	4013      	ands	r3, r2
 802a584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802a586:	687b      	ldr	r3, [r7, #4]
 802a588:	4a4f      	ldr	r2, [pc, #316]	; (802a6c8 <HAL_GPIO_Init+0x308>)
 802a58a:	4293      	cmp	r3, r2
 802a58c:	d025      	beq.n	802a5da <HAL_GPIO_Init+0x21a>
 802a58e:	687b      	ldr	r3, [r7, #4]
 802a590:	4a4e      	ldr	r2, [pc, #312]	; (802a6cc <HAL_GPIO_Init+0x30c>)
 802a592:	4293      	cmp	r3, r2
 802a594:	d01f      	beq.n	802a5d6 <HAL_GPIO_Init+0x216>
 802a596:	687b      	ldr	r3, [r7, #4]
 802a598:	4a4d      	ldr	r2, [pc, #308]	; (802a6d0 <HAL_GPIO_Init+0x310>)
 802a59a:	4293      	cmp	r3, r2
 802a59c:	d019      	beq.n	802a5d2 <HAL_GPIO_Init+0x212>
 802a59e:	687b      	ldr	r3, [r7, #4]
 802a5a0:	4a4c      	ldr	r2, [pc, #304]	; (802a6d4 <HAL_GPIO_Init+0x314>)
 802a5a2:	4293      	cmp	r3, r2
 802a5a4:	d013      	beq.n	802a5ce <HAL_GPIO_Init+0x20e>
 802a5a6:	687b      	ldr	r3, [r7, #4]
 802a5a8:	4a4b      	ldr	r2, [pc, #300]	; (802a6d8 <HAL_GPIO_Init+0x318>)
 802a5aa:	4293      	cmp	r3, r2
 802a5ac:	d00d      	beq.n	802a5ca <HAL_GPIO_Init+0x20a>
 802a5ae:	687b      	ldr	r3, [r7, #4]
 802a5b0:	4a4a      	ldr	r2, [pc, #296]	; (802a6dc <HAL_GPIO_Init+0x31c>)
 802a5b2:	4293      	cmp	r3, r2
 802a5b4:	d007      	beq.n	802a5c6 <HAL_GPIO_Init+0x206>
 802a5b6:	687b      	ldr	r3, [r7, #4]
 802a5b8:	4a49      	ldr	r2, [pc, #292]	; (802a6e0 <HAL_GPIO_Init+0x320>)
 802a5ba:	4293      	cmp	r3, r2
 802a5bc:	d101      	bne.n	802a5c2 <HAL_GPIO_Init+0x202>
 802a5be:	2306      	movs	r3, #6
 802a5c0:	e00c      	b.n	802a5dc <HAL_GPIO_Init+0x21c>
 802a5c2:	2307      	movs	r3, #7
 802a5c4:	e00a      	b.n	802a5dc <HAL_GPIO_Init+0x21c>
 802a5c6:	2305      	movs	r3, #5
 802a5c8:	e008      	b.n	802a5dc <HAL_GPIO_Init+0x21c>
 802a5ca:	2304      	movs	r3, #4
 802a5cc:	e006      	b.n	802a5dc <HAL_GPIO_Init+0x21c>
 802a5ce:	2303      	movs	r3, #3
 802a5d0:	e004      	b.n	802a5dc <HAL_GPIO_Init+0x21c>
 802a5d2:	2302      	movs	r3, #2
 802a5d4:	e002      	b.n	802a5dc <HAL_GPIO_Init+0x21c>
 802a5d6:	2301      	movs	r3, #1
 802a5d8:	e000      	b.n	802a5dc <HAL_GPIO_Init+0x21c>
 802a5da:	2300      	movs	r3, #0
 802a5dc:	69fa      	ldr	r2, [r7, #28]
 802a5de:	f002 0203 	and.w	r2, r2, #3
 802a5e2:	0092      	lsls	r2, r2, #2
 802a5e4:	4093      	lsls	r3, r2
 802a5e6:	69ba      	ldr	r2, [r7, #24]
 802a5e8:	4313      	orrs	r3, r2
 802a5ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802a5ec:	4935      	ldr	r1, [pc, #212]	; (802a6c4 <HAL_GPIO_Init+0x304>)
 802a5ee:	69fb      	ldr	r3, [r7, #28]
 802a5f0:	089b      	lsrs	r3, r3, #2
 802a5f2:	3302      	adds	r3, #2
 802a5f4:	69ba      	ldr	r2, [r7, #24]
 802a5f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802a5fa:	4b3a      	ldr	r3, [pc, #232]	; (802a6e4 <HAL_GPIO_Init+0x324>)
 802a5fc:	681b      	ldr	r3, [r3, #0]
 802a5fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802a600:	693b      	ldr	r3, [r7, #16]
 802a602:	43db      	mvns	r3, r3
 802a604:	69ba      	ldr	r2, [r7, #24]
 802a606:	4013      	ands	r3, r2
 802a608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802a60a:	683b      	ldr	r3, [r7, #0]
 802a60c:	685b      	ldr	r3, [r3, #4]
 802a60e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802a612:	2b00      	cmp	r3, #0
 802a614:	d003      	beq.n	802a61e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 802a616:	69ba      	ldr	r2, [r7, #24]
 802a618:	693b      	ldr	r3, [r7, #16]
 802a61a:	4313      	orrs	r3, r2
 802a61c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802a61e:	4a31      	ldr	r2, [pc, #196]	; (802a6e4 <HAL_GPIO_Init+0x324>)
 802a620:	69bb      	ldr	r3, [r7, #24]
 802a622:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 802a624:	4b2f      	ldr	r3, [pc, #188]	; (802a6e4 <HAL_GPIO_Init+0x324>)
 802a626:	685b      	ldr	r3, [r3, #4]
 802a628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802a62a:	693b      	ldr	r3, [r7, #16]
 802a62c:	43db      	mvns	r3, r3
 802a62e:	69ba      	ldr	r2, [r7, #24]
 802a630:	4013      	ands	r3, r2
 802a632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 802a634:	683b      	ldr	r3, [r7, #0]
 802a636:	685b      	ldr	r3, [r3, #4]
 802a638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a63c:	2b00      	cmp	r3, #0
 802a63e:	d003      	beq.n	802a648 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 802a640:	69ba      	ldr	r2, [r7, #24]
 802a642:	693b      	ldr	r3, [r7, #16]
 802a644:	4313      	orrs	r3, r2
 802a646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802a648:	4a26      	ldr	r2, [pc, #152]	; (802a6e4 <HAL_GPIO_Init+0x324>)
 802a64a:	69bb      	ldr	r3, [r7, #24]
 802a64c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802a64e:	4b25      	ldr	r3, [pc, #148]	; (802a6e4 <HAL_GPIO_Init+0x324>)
 802a650:	689b      	ldr	r3, [r3, #8]
 802a652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802a654:	693b      	ldr	r3, [r7, #16]
 802a656:	43db      	mvns	r3, r3
 802a658:	69ba      	ldr	r2, [r7, #24]
 802a65a:	4013      	ands	r3, r2
 802a65c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 802a65e:	683b      	ldr	r3, [r7, #0]
 802a660:	685b      	ldr	r3, [r3, #4]
 802a662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802a666:	2b00      	cmp	r3, #0
 802a668:	d003      	beq.n	802a672 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 802a66a:	69ba      	ldr	r2, [r7, #24]
 802a66c:	693b      	ldr	r3, [r7, #16]
 802a66e:	4313      	orrs	r3, r2
 802a670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802a672:	4a1c      	ldr	r2, [pc, #112]	; (802a6e4 <HAL_GPIO_Init+0x324>)
 802a674:	69bb      	ldr	r3, [r7, #24]
 802a676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 802a678:	4b1a      	ldr	r3, [pc, #104]	; (802a6e4 <HAL_GPIO_Init+0x324>)
 802a67a:	68db      	ldr	r3, [r3, #12]
 802a67c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802a67e:	693b      	ldr	r3, [r7, #16]
 802a680:	43db      	mvns	r3, r3
 802a682:	69ba      	ldr	r2, [r7, #24]
 802a684:	4013      	ands	r3, r2
 802a686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 802a688:	683b      	ldr	r3, [r7, #0]
 802a68a:	685b      	ldr	r3, [r3, #4]
 802a68c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802a690:	2b00      	cmp	r3, #0
 802a692:	d003      	beq.n	802a69c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 802a694:	69ba      	ldr	r2, [r7, #24]
 802a696:	693b      	ldr	r3, [r7, #16]
 802a698:	4313      	orrs	r3, r2
 802a69a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802a69c:	4a11      	ldr	r2, [pc, #68]	; (802a6e4 <HAL_GPIO_Init+0x324>)
 802a69e:	69bb      	ldr	r3, [r7, #24]
 802a6a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802a6a2:	69fb      	ldr	r3, [r7, #28]
 802a6a4:	3301      	adds	r3, #1
 802a6a6:	61fb      	str	r3, [r7, #28]
 802a6a8:	69fb      	ldr	r3, [r7, #28]
 802a6aa:	2b0f      	cmp	r3, #15
 802a6ac:	f67f ae96 	bls.w	802a3dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 802a6b0:	bf00      	nop
 802a6b2:	bf00      	nop
 802a6b4:	3724      	adds	r7, #36	; 0x24
 802a6b6:	46bd      	mov	sp, r7
 802a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6bc:	4770      	bx	lr
 802a6be:	bf00      	nop
 802a6c0:	40023800 	.word	0x40023800
 802a6c4:	40013800 	.word	0x40013800
 802a6c8:	40020000 	.word	0x40020000
 802a6cc:	40020400 	.word	0x40020400
 802a6d0:	40020800 	.word	0x40020800
 802a6d4:	40020c00 	.word	0x40020c00
 802a6d8:	40021000 	.word	0x40021000
 802a6dc:	40021400 	.word	0x40021400
 802a6e0:	40021800 	.word	0x40021800
 802a6e4:	40013c00 	.word	0x40013c00

0802a6e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802a6e8:	b480      	push	{r7}
 802a6ea:	b083      	sub	sp, #12
 802a6ec:	af00      	add	r7, sp, #0
 802a6ee:	6078      	str	r0, [r7, #4]
 802a6f0:	460b      	mov	r3, r1
 802a6f2:	807b      	strh	r3, [r7, #2]
 802a6f4:	4613      	mov	r3, r2
 802a6f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802a6f8:	787b      	ldrb	r3, [r7, #1]
 802a6fa:	2b00      	cmp	r3, #0
 802a6fc:	d003      	beq.n	802a706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802a6fe:	887a      	ldrh	r2, [r7, #2]
 802a700:	687b      	ldr	r3, [r7, #4]
 802a702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 802a704:	e003      	b.n	802a70e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802a706:	887b      	ldrh	r3, [r7, #2]
 802a708:	041a      	lsls	r2, r3, #16
 802a70a:	687b      	ldr	r3, [r7, #4]
 802a70c:	619a      	str	r2, [r3, #24]
}
 802a70e:	bf00      	nop
 802a710:	370c      	adds	r7, #12
 802a712:	46bd      	mov	sp, r7
 802a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a718:	4770      	bx	lr

0802a71a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 802a71a:	b480      	push	{r7}
 802a71c:	b083      	sub	sp, #12
 802a71e:	af00      	add	r7, sp, #0
 802a720:	6078      	str	r0, [r7, #4]
 802a722:	460b      	mov	r3, r1
 802a724:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 802a726:	687b      	ldr	r3, [r7, #4]
 802a728:	695a      	ldr	r2, [r3, #20]
 802a72a:	887b      	ldrh	r3, [r7, #2]
 802a72c:	401a      	ands	r2, r3
 802a72e:	887b      	ldrh	r3, [r7, #2]
 802a730:	429a      	cmp	r2, r3
 802a732:	d104      	bne.n	802a73e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 802a734:	887b      	ldrh	r3, [r7, #2]
 802a736:	041a      	lsls	r2, r3, #16
 802a738:	687b      	ldr	r3, [r7, #4]
 802a73a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 802a73c:	e002      	b.n	802a744 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 802a73e:	887a      	ldrh	r2, [r7, #2]
 802a740:	687b      	ldr	r3, [r7, #4]
 802a742:	619a      	str	r2, [r3, #24]
}
 802a744:	bf00      	nop
 802a746:	370c      	adds	r7, #12
 802a748:	46bd      	mov	sp, r7
 802a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a74e:	4770      	bx	lr

0802a750 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 802a750:	b580      	push	{r7, lr}
 802a752:	b082      	sub	sp, #8
 802a754:	af00      	add	r7, sp, #0
 802a756:	4603      	mov	r3, r0
 802a758:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 802a75a:	4b08      	ldr	r3, [pc, #32]	; (802a77c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 802a75c:	695a      	ldr	r2, [r3, #20]
 802a75e:	88fb      	ldrh	r3, [r7, #6]
 802a760:	4013      	ands	r3, r2
 802a762:	2b00      	cmp	r3, #0
 802a764:	d006      	beq.n	802a774 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 802a766:	4a05      	ldr	r2, [pc, #20]	; (802a77c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 802a768:	88fb      	ldrh	r3, [r7, #6]
 802a76a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 802a76c:	88fb      	ldrh	r3, [r7, #6]
 802a76e:	4618      	mov	r0, r3
 802a770:	f00b ff56 	bl	8036620 <HAL_GPIO_EXTI_Callback>
  }
}
 802a774:	bf00      	nop
 802a776:	3708      	adds	r7, #8
 802a778:	46bd      	mov	sp, r7
 802a77a:	bd80      	pop	{r7, pc}
 802a77c:	40013c00 	.word	0x40013c00

0802a780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802a780:	b580      	push	{r7, lr}
 802a782:	b084      	sub	sp, #16
 802a784:	af00      	add	r7, sp, #0
 802a786:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802a788:	687b      	ldr	r3, [r7, #4]
 802a78a:	2b00      	cmp	r3, #0
 802a78c:	d101      	bne.n	802a792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802a78e:	2301      	movs	r3, #1
 802a790:	e12b      	b.n	802a9ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802a792:	687b      	ldr	r3, [r7, #4]
 802a794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802a798:	b2db      	uxtb	r3, r3
 802a79a:	2b00      	cmp	r3, #0
 802a79c:	d106      	bne.n	802a7ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802a79e:	687b      	ldr	r3, [r7, #4]
 802a7a0:	2200      	movs	r2, #0
 802a7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 802a7a6:	6878      	ldr	r0, [r7, #4]
 802a7a8:	f00c fb74 	bl	8036e94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802a7ac:	687b      	ldr	r3, [r7, #4]
 802a7ae:	2224      	movs	r2, #36	; 0x24
 802a7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802a7b4:	687b      	ldr	r3, [r7, #4]
 802a7b6:	681b      	ldr	r3, [r3, #0]
 802a7b8:	681a      	ldr	r2, [r3, #0]
 802a7ba:	687b      	ldr	r3, [r7, #4]
 802a7bc:	681b      	ldr	r3, [r3, #0]
 802a7be:	f022 0201 	bic.w	r2, r2, #1
 802a7c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 802a7c4:	687b      	ldr	r3, [r7, #4]
 802a7c6:	681b      	ldr	r3, [r3, #0]
 802a7c8:	681a      	ldr	r2, [r3, #0]
 802a7ca:	687b      	ldr	r3, [r7, #4]
 802a7cc:	681b      	ldr	r3, [r3, #0]
 802a7ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802a7d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 802a7d4:	687b      	ldr	r3, [r7, #4]
 802a7d6:	681b      	ldr	r3, [r3, #0]
 802a7d8:	681a      	ldr	r2, [r3, #0]
 802a7da:	687b      	ldr	r3, [r7, #4]
 802a7dc:	681b      	ldr	r3, [r3, #0]
 802a7de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802a7e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 802a7e4:	f002 fe48 	bl	802d478 <HAL_RCC_GetPCLK1Freq>
 802a7e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802a7ea:	687b      	ldr	r3, [r7, #4]
 802a7ec:	685b      	ldr	r3, [r3, #4]
 802a7ee:	4a81      	ldr	r2, [pc, #516]	; (802a9f4 <HAL_I2C_Init+0x274>)
 802a7f0:	4293      	cmp	r3, r2
 802a7f2:	d807      	bhi.n	802a804 <HAL_I2C_Init+0x84>
 802a7f4:	68fb      	ldr	r3, [r7, #12]
 802a7f6:	4a80      	ldr	r2, [pc, #512]	; (802a9f8 <HAL_I2C_Init+0x278>)
 802a7f8:	4293      	cmp	r3, r2
 802a7fa:	bf94      	ite	ls
 802a7fc:	2301      	movls	r3, #1
 802a7fe:	2300      	movhi	r3, #0
 802a800:	b2db      	uxtb	r3, r3
 802a802:	e006      	b.n	802a812 <HAL_I2C_Init+0x92>
 802a804:	68fb      	ldr	r3, [r7, #12]
 802a806:	4a7d      	ldr	r2, [pc, #500]	; (802a9fc <HAL_I2C_Init+0x27c>)
 802a808:	4293      	cmp	r3, r2
 802a80a:	bf94      	ite	ls
 802a80c:	2301      	movls	r3, #1
 802a80e:	2300      	movhi	r3, #0
 802a810:	b2db      	uxtb	r3, r3
 802a812:	2b00      	cmp	r3, #0
 802a814:	d001      	beq.n	802a81a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 802a816:	2301      	movs	r3, #1
 802a818:	e0e7      	b.n	802a9ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802a81a:	68fb      	ldr	r3, [r7, #12]
 802a81c:	4a78      	ldr	r2, [pc, #480]	; (802aa00 <HAL_I2C_Init+0x280>)
 802a81e:	fba2 2303 	umull	r2, r3, r2, r3
 802a822:	0c9b      	lsrs	r3, r3, #18
 802a824:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802a826:	687b      	ldr	r3, [r7, #4]
 802a828:	681b      	ldr	r3, [r3, #0]
 802a82a:	685b      	ldr	r3, [r3, #4]
 802a82c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 802a830:	687b      	ldr	r3, [r7, #4]
 802a832:	681b      	ldr	r3, [r3, #0]
 802a834:	68ba      	ldr	r2, [r7, #8]
 802a836:	430a      	orrs	r2, r1
 802a838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802a83a:	687b      	ldr	r3, [r7, #4]
 802a83c:	681b      	ldr	r3, [r3, #0]
 802a83e:	6a1b      	ldr	r3, [r3, #32]
 802a840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 802a844:	687b      	ldr	r3, [r7, #4]
 802a846:	685b      	ldr	r3, [r3, #4]
 802a848:	4a6a      	ldr	r2, [pc, #424]	; (802a9f4 <HAL_I2C_Init+0x274>)
 802a84a:	4293      	cmp	r3, r2
 802a84c:	d802      	bhi.n	802a854 <HAL_I2C_Init+0xd4>
 802a84e:	68bb      	ldr	r3, [r7, #8]
 802a850:	3301      	adds	r3, #1
 802a852:	e009      	b.n	802a868 <HAL_I2C_Init+0xe8>
 802a854:	68bb      	ldr	r3, [r7, #8]
 802a856:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802a85a:	fb02 f303 	mul.w	r3, r2, r3
 802a85e:	4a69      	ldr	r2, [pc, #420]	; (802aa04 <HAL_I2C_Init+0x284>)
 802a860:	fba2 2303 	umull	r2, r3, r2, r3
 802a864:	099b      	lsrs	r3, r3, #6
 802a866:	3301      	adds	r3, #1
 802a868:	687a      	ldr	r2, [r7, #4]
 802a86a:	6812      	ldr	r2, [r2, #0]
 802a86c:	430b      	orrs	r3, r1
 802a86e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 802a870:	687b      	ldr	r3, [r7, #4]
 802a872:	681b      	ldr	r3, [r3, #0]
 802a874:	69db      	ldr	r3, [r3, #28]
 802a876:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 802a87a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 802a87e:	687b      	ldr	r3, [r7, #4]
 802a880:	685b      	ldr	r3, [r3, #4]
 802a882:	495c      	ldr	r1, [pc, #368]	; (802a9f4 <HAL_I2C_Init+0x274>)
 802a884:	428b      	cmp	r3, r1
 802a886:	d819      	bhi.n	802a8bc <HAL_I2C_Init+0x13c>
 802a888:	68fb      	ldr	r3, [r7, #12]
 802a88a:	1e59      	subs	r1, r3, #1
 802a88c:	687b      	ldr	r3, [r7, #4]
 802a88e:	685b      	ldr	r3, [r3, #4]
 802a890:	005b      	lsls	r3, r3, #1
 802a892:	fbb1 f3f3 	udiv	r3, r1, r3
 802a896:	1c59      	adds	r1, r3, #1
 802a898:	f640 73fc 	movw	r3, #4092	; 0xffc
 802a89c:	400b      	ands	r3, r1
 802a89e:	2b00      	cmp	r3, #0
 802a8a0:	d00a      	beq.n	802a8b8 <HAL_I2C_Init+0x138>
 802a8a2:	68fb      	ldr	r3, [r7, #12]
 802a8a4:	1e59      	subs	r1, r3, #1
 802a8a6:	687b      	ldr	r3, [r7, #4]
 802a8a8:	685b      	ldr	r3, [r3, #4]
 802a8aa:	005b      	lsls	r3, r3, #1
 802a8ac:	fbb1 f3f3 	udiv	r3, r1, r3
 802a8b0:	3301      	adds	r3, #1
 802a8b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a8b6:	e051      	b.n	802a95c <HAL_I2C_Init+0x1dc>
 802a8b8:	2304      	movs	r3, #4
 802a8ba:	e04f      	b.n	802a95c <HAL_I2C_Init+0x1dc>
 802a8bc:	687b      	ldr	r3, [r7, #4]
 802a8be:	689b      	ldr	r3, [r3, #8]
 802a8c0:	2b00      	cmp	r3, #0
 802a8c2:	d111      	bne.n	802a8e8 <HAL_I2C_Init+0x168>
 802a8c4:	68fb      	ldr	r3, [r7, #12]
 802a8c6:	1e58      	subs	r0, r3, #1
 802a8c8:	687b      	ldr	r3, [r7, #4]
 802a8ca:	6859      	ldr	r1, [r3, #4]
 802a8cc:	460b      	mov	r3, r1
 802a8ce:	005b      	lsls	r3, r3, #1
 802a8d0:	440b      	add	r3, r1
 802a8d2:	fbb0 f3f3 	udiv	r3, r0, r3
 802a8d6:	3301      	adds	r3, #1
 802a8d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a8dc:	2b00      	cmp	r3, #0
 802a8de:	bf0c      	ite	eq
 802a8e0:	2301      	moveq	r3, #1
 802a8e2:	2300      	movne	r3, #0
 802a8e4:	b2db      	uxtb	r3, r3
 802a8e6:	e012      	b.n	802a90e <HAL_I2C_Init+0x18e>
 802a8e8:	68fb      	ldr	r3, [r7, #12]
 802a8ea:	1e58      	subs	r0, r3, #1
 802a8ec:	687b      	ldr	r3, [r7, #4]
 802a8ee:	6859      	ldr	r1, [r3, #4]
 802a8f0:	460b      	mov	r3, r1
 802a8f2:	009b      	lsls	r3, r3, #2
 802a8f4:	440b      	add	r3, r1
 802a8f6:	0099      	lsls	r1, r3, #2
 802a8f8:	440b      	add	r3, r1
 802a8fa:	fbb0 f3f3 	udiv	r3, r0, r3
 802a8fe:	3301      	adds	r3, #1
 802a900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a904:	2b00      	cmp	r3, #0
 802a906:	bf0c      	ite	eq
 802a908:	2301      	moveq	r3, #1
 802a90a:	2300      	movne	r3, #0
 802a90c:	b2db      	uxtb	r3, r3
 802a90e:	2b00      	cmp	r3, #0
 802a910:	d001      	beq.n	802a916 <HAL_I2C_Init+0x196>
 802a912:	2301      	movs	r3, #1
 802a914:	e022      	b.n	802a95c <HAL_I2C_Init+0x1dc>
 802a916:	687b      	ldr	r3, [r7, #4]
 802a918:	689b      	ldr	r3, [r3, #8]
 802a91a:	2b00      	cmp	r3, #0
 802a91c:	d10e      	bne.n	802a93c <HAL_I2C_Init+0x1bc>
 802a91e:	68fb      	ldr	r3, [r7, #12]
 802a920:	1e58      	subs	r0, r3, #1
 802a922:	687b      	ldr	r3, [r7, #4]
 802a924:	6859      	ldr	r1, [r3, #4]
 802a926:	460b      	mov	r3, r1
 802a928:	005b      	lsls	r3, r3, #1
 802a92a:	440b      	add	r3, r1
 802a92c:	fbb0 f3f3 	udiv	r3, r0, r3
 802a930:	3301      	adds	r3, #1
 802a932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802a93a:	e00f      	b.n	802a95c <HAL_I2C_Init+0x1dc>
 802a93c:	68fb      	ldr	r3, [r7, #12]
 802a93e:	1e58      	subs	r0, r3, #1
 802a940:	687b      	ldr	r3, [r7, #4]
 802a942:	6859      	ldr	r1, [r3, #4]
 802a944:	460b      	mov	r3, r1
 802a946:	009b      	lsls	r3, r3, #2
 802a948:	440b      	add	r3, r1
 802a94a:	0099      	lsls	r1, r3, #2
 802a94c:	440b      	add	r3, r1
 802a94e:	fbb0 f3f3 	udiv	r3, r0, r3
 802a952:	3301      	adds	r3, #1
 802a954:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802a958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802a95c:	6879      	ldr	r1, [r7, #4]
 802a95e:	6809      	ldr	r1, [r1, #0]
 802a960:	4313      	orrs	r3, r2
 802a962:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 802a964:	687b      	ldr	r3, [r7, #4]
 802a966:	681b      	ldr	r3, [r3, #0]
 802a968:	681b      	ldr	r3, [r3, #0]
 802a96a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 802a96e:	687b      	ldr	r3, [r7, #4]
 802a970:	69da      	ldr	r2, [r3, #28]
 802a972:	687b      	ldr	r3, [r7, #4]
 802a974:	6a1b      	ldr	r3, [r3, #32]
 802a976:	431a      	orrs	r2, r3
 802a978:	687b      	ldr	r3, [r7, #4]
 802a97a:	681b      	ldr	r3, [r3, #0]
 802a97c:	430a      	orrs	r2, r1
 802a97e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 802a980:	687b      	ldr	r3, [r7, #4]
 802a982:	681b      	ldr	r3, [r3, #0]
 802a984:	689b      	ldr	r3, [r3, #8]
 802a986:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 802a98a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 802a98e:	687a      	ldr	r2, [r7, #4]
 802a990:	6911      	ldr	r1, [r2, #16]
 802a992:	687a      	ldr	r2, [r7, #4]
 802a994:	68d2      	ldr	r2, [r2, #12]
 802a996:	4311      	orrs	r1, r2
 802a998:	687a      	ldr	r2, [r7, #4]
 802a99a:	6812      	ldr	r2, [r2, #0]
 802a99c:	430b      	orrs	r3, r1
 802a99e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 802a9a0:	687b      	ldr	r3, [r7, #4]
 802a9a2:	681b      	ldr	r3, [r3, #0]
 802a9a4:	68db      	ldr	r3, [r3, #12]
 802a9a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 802a9aa:	687b      	ldr	r3, [r7, #4]
 802a9ac:	695a      	ldr	r2, [r3, #20]
 802a9ae:	687b      	ldr	r3, [r7, #4]
 802a9b0:	699b      	ldr	r3, [r3, #24]
 802a9b2:	431a      	orrs	r2, r3
 802a9b4:	687b      	ldr	r3, [r7, #4]
 802a9b6:	681b      	ldr	r3, [r3, #0]
 802a9b8:	430a      	orrs	r2, r1
 802a9ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802a9bc:	687b      	ldr	r3, [r7, #4]
 802a9be:	681b      	ldr	r3, [r3, #0]
 802a9c0:	681a      	ldr	r2, [r3, #0]
 802a9c2:	687b      	ldr	r3, [r7, #4]
 802a9c4:	681b      	ldr	r3, [r3, #0]
 802a9c6:	f042 0201 	orr.w	r2, r2, #1
 802a9ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802a9cc:	687b      	ldr	r3, [r7, #4]
 802a9ce:	2200      	movs	r2, #0
 802a9d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 802a9d2:	687b      	ldr	r3, [r7, #4]
 802a9d4:	2220      	movs	r2, #32
 802a9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802a9da:	687b      	ldr	r3, [r7, #4]
 802a9dc:	2200      	movs	r2, #0
 802a9de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 802a9e0:	687b      	ldr	r3, [r7, #4]
 802a9e2:	2200      	movs	r2, #0
 802a9e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802a9e8:	2300      	movs	r3, #0
}
 802a9ea:	4618      	mov	r0, r3
 802a9ec:	3710      	adds	r7, #16
 802a9ee:	46bd      	mov	sp, r7
 802a9f0:	bd80      	pop	{r7, pc}
 802a9f2:	bf00      	nop
 802a9f4:	000186a0 	.word	0x000186a0
 802a9f8:	001e847f 	.word	0x001e847f
 802a9fc:	003d08ff 	.word	0x003d08ff
 802aa00:	431bde83 	.word	0x431bde83
 802aa04:	10624dd3 	.word	0x10624dd3

0802aa08 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 802aa08:	b580      	push	{r7, lr}
 802aa0a:	b082      	sub	sp, #8
 802aa0c:	af00      	add	r7, sp, #0
 802aa0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802aa10:	687b      	ldr	r3, [r7, #4]
 802aa12:	2b00      	cmp	r3, #0
 802aa14:	d101      	bne.n	802aa1a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 802aa16:	2301      	movs	r3, #1
 802aa18:	e021      	b.n	802aa5e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 802aa1a:	687b      	ldr	r3, [r7, #4]
 802aa1c:	2224      	movs	r2, #36	; 0x24
 802aa1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 802aa22:	687b      	ldr	r3, [r7, #4]
 802aa24:	681b      	ldr	r3, [r3, #0]
 802aa26:	681a      	ldr	r2, [r3, #0]
 802aa28:	687b      	ldr	r3, [r7, #4]
 802aa2a:	681b      	ldr	r3, [r3, #0]
 802aa2c:	f022 0201 	bic.w	r2, r2, #1
 802aa30:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 802aa32:	6878      	ldr	r0, [r7, #4]
 802aa34:	f000 f817 	bl	802aa66 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 802aa38:	687b      	ldr	r3, [r7, #4]
 802aa3a:	2200      	movs	r2, #0
 802aa3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 802aa3e:	687b      	ldr	r3, [r7, #4]
 802aa40:	2200      	movs	r2, #0
 802aa42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802aa46:	687b      	ldr	r3, [r7, #4]
 802aa48:	2200      	movs	r2, #0
 802aa4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 802aa4c:	687b      	ldr	r3, [r7, #4]
 802aa4e:	2200      	movs	r2, #0
 802aa50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 802aa54:	687b      	ldr	r3, [r7, #4]
 802aa56:	2200      	movs	r2, #0
 802aa58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802aa5c:	2300      	movs	r3, #0
}
 802aa5e:	4618      	mov	r0, r3
 802aa60:	3708      	adds	r7, #8
 802aa62:	46bd      	mov	sp, r7
 802aa64:	bd80      	pop	{r7, pc}

0802aa66 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 802aa66:	b480      	push	{r7}
 802aa68:	b083      	sub	sp, #12
 802aa6a:	af00      	add	r7, sp, #0
 802aa6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 802aa6e:	bf00      	nop
 802aa70:	370c      	adds	r7, #12
 802aa72:	46bd      	mov	sp, r7
 802aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa78:	4770      	bx	lr
	...

0802aa7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802aa7c:	b580      	push	{r7, lr}
 802aa7e:	b088      	sub	sp, #32
 802aa80:	af02      	add	r7, sp, #8
 802aa82:	60f8      	str	r0, [r7, #12]
 802aa84:	607a      	str	r2, [r7, #4]
 802aa86:	461a      	mov	r2, r3
 802aa88:	460b      	mov	r3, r1
 802aa8a:	817b      	strh	r3, [r7, #10]
 802aa8c:	4613      	mov	r3, r2
 802aa8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 802aa90:	f7fd fd44 	bl	802851c <HAL_GetTick>
 802aa94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 802aa96:	68fb      	ldr	r3, [r7, #12]
 802aa98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802aa9c:	b2db      	uxtb	r3, r3
 802aa9e:	2b20      	cmp	r3, #32
 802aaa0:	f040 80e0 	bne.w	802ac64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 802aaa4:	697b      	ldr	r3, [r7, #20]
 802aaa6:	9300      	str	r3, [sp, #0]
 802aaa8:	2319      	movs	r3, #25
 802aaaa:	2201      	movs	r2, #1
 802aaac:	4970      	ldr	r1, [pc, #448]	; (802ac70 <HAL_I2C_Master_Transmit+0x1f4>)
 802aaae:	68f8      	ldr	r0, [r7, #12]
 802aab0:	f002 f9c6 	bl	802ce40 <I2C_WaitOnFlagUntilTimeout>
 802aab4:	4603      	mov	r3, r0
 802aab6:	2b00      	cmp	r3, #0
 802aab8:	d001      	beq.n	802aabe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 802aaba:	2302      	movs	r3, #2
 802aabc:	e0d3      	b.n	802ac66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 802aabe:	68fb      	ldr	r3, [r7, #12]
 802aac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802aac4:	2b01      	cmp	r3, #1
 802aac6:	d101      	bne.n	802aacc <HAL_I2C_Master_Transmit+0x50>
 802aac8:	2302      	movs	r3, #2
 802aaca:	e0cc      	b.n	802ac66 <HAL_I2C_Master_Transmit+0x1ea>
 802aacc:	68fb      	ldr	r3, [r7, #12]
 802aace:	2201      	movs	r2, #1
 802aad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802aad4:	68fb      	ldr	r3, [r7, #12]
 802aad6:	681b      	ldr	r3, [r3, #0]
 802aad8:	681b      	ldr	r3, [r3, #0]
 802aada:	f003 0301 	and.w	r3, r3, #1
 802aade:	2b01      	cmp	r3, #1
 802aae0:	d007      	beq.n	802aaf2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 802aae2:	68fb      	ldr	r3, [r7, #12]
 802aae4:	681b      	ldr	r3, [r3, #0]
 802aae6:	681a      	ldr	r2, [r3, #0]
 802aae8:	68fb      	ldr	r3, [r7, #12]
 802aaea:	681b      	ldr	r3, [r3, #0]
 802aaec:	f042 0201 	orr.w	r2, r2, #1
 802aaf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802aaf2:	68fb      	ldr	r3, [r7, #12]
 802aaf4:	681b      	ldr	r3, [r3, #0]
 802aaf6:	681a      	ldr	r2, [r3, #0]
 802aaf8:	68fb      	ldr	r3, [r7, #12]
 802aafa:	681b      	ldr	r3, [r3, #0]
 802aafc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802ab00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 802ab02:	68fb      	ldr	r3, [r7, #12]
 802ab04:	2221      	movs	r2, #33	; 0x21
 802ab06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 802ab0a:	68fb      	ldr	r3, [r7, #12]
 802ab0c:	2210      	movs	r2, #16
 802ab0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 802ab12:	68fb      	ldr	r3, [r7, #12]
 802ab14:	2200      	movs	r2, #0
 802ab16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 802ab18:	68fb      	ldr	r3, [r7, #12]
 802ab1a:	687a      	ldr	r2, [r7, #4]
 802ab1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 802ab1e:	68fb      	ldr	r3, [r7, #12]
 802ab20:	893a      	ldrh	r2, [r7, #8]
 802ab22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 802ab24:	68fb      	ldr	r3, [r7, #12]
 802ab26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ab28:	b29a      	uxth	r2, r3
 802ab2a:	68fb      	ldr	r3, [r7, #12]
 802ab2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802ab2e:	68fb      	ldr	r3, [r7, #12]
 802ab30:	4a50      	ldr	r2, [pc, #320]	; (802ac74 <HAL_I2C_Master_Transmit+0x1f8>)
 802ab32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 802ab34:	8979      	ldrh	r1, [r7, #10]
 802ab36:	697b      	ldr	r3, [r7, #20]
 802ab38:	6a3a      	ldr	r2, [r7, #32]
 802ab3a:	68f8      	ldr	r0, [r7, #12]
 802ab3c:	f001 ff88 	bl	802ca50 <I2C_MasterRequestWrite>
 802ab40:	4603      	mov	r3, r0
 802ab42:	2b00      	cmp	r3, #0
 802ab44:	d001      	beq.n	802ab4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 802ab46:	2301      	movs	r3, #1
 802ab48:	e08d      	b.n	802ac66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802ab4a:	2300      	movs	r3, #0
 802ab4c:	613b      	str	r3, [r7, #16]
 802ab4e:	68fb      	ldr	r3, [r7, #12]
 802ab50:	681b      	ldr	r3, [r3, #0]
 802ab52:	695b      	ldr	r3, [r3, #20]
 802ab54:	613b      	str	r3, [r7, #16]
 802ab56:	68fb      	ldr	r3, [r7, #12]
 802ab58:	681b      	ldr	r3, [r3, #0]
 802ab5a:	699b      	ldr	r3, [r3, #24]
 802ab5c:	613b      	str	r3, [r7, #16]
 802ab5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 802ab60:	e066      	b.n	802ac30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802ab62:	697a      	ldr	r2, [r7, #20]
 802ab64:	6a39      	ldr	r1, [r7, #32]
 802ab66:	68f8      	ldr	r0, [r7, #12]
 802ab68:	f002 fa40 	bl	802cfec <I2C_WaitOnTXEFlagUntilTimeout>
 802ab6c:	4603      	mov	r3, r0
 802ab6e:	2b00      	cmp	r3, #0
 802ab70:	d00d      	beq.n	802ab8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802ab72:	68fb      	ldr	r3, [r7, #12]
 802ab74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ab76:	2b04      	cmp	r3, #4
 802ab78:	d107      	bne.n	802ab8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802ab7a:	68fb      	ldr	r3, [r7, #12]
 802ab7c:	681b      	ldr	r3, [r3, #0]
 802ab7e:	681a      	ldr	r2, [r3, #0]
 802ab80:	68fb      	ldr	r3, [r7, #12]
 802ab82:	681b      	ldr	r3, [r3, #0]
 802ab84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ab88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 802ab8a:	2301      	movs	r3, #1
 802ab8c:	e06b      	b.n	802ac66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802ab8e:	68fb      	ldr	r3, [r7, #12]
 802ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ab92:	781a      	ldrb	r2, [r3, #0]
 802ab94:	68fb      	ldr	r3, [r7, #12]
 802ab96:	681b      	ldr	r3, [r3, #0]
 802ab98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802ab9a:	68fb      	ldr	r3, [r7, #12]
 802ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ab9e:	1c5a      	adds	r2, r3, #1
 802aba0:	68fb      	ldr	r3, [r7, #12]
 802aba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 802aba4:	68fb      	ldr	r3, [r7, #12]
 802aba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802aba8:	b29b      	uxth	r3, r3
 802abaa:	3b01      	subs	r3, #1
 802abac:	b29a      	uxth	r2, r3
 802abae:	68fb      	ldr	r3, [r7, #12]
 802abb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 802abb2:	68fb      	ldr	r3, [r7, #12]
 802abb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802abb6:	3b01      	subs	r3, #1
 802abb8:	b29a      	uxth	r2, r3
 802abba:	68fb      	ldr	r3, [r7, #12]
 802abbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 802abbe:	68fb      	ldr	r3, [r7, #12]
 802abc0:	681b      	ldr	r3, [r3, #0]
 802abc2:	695b      	ldr	r3, [r3, #20]
 802abc4:	f003 0304 	and.w	r3, r3, #4
 802abc8:	2b04      	cmp	r3, #4
 802abca:	d11b      	bne.n	802ac04 <HAL_I2C_Master_Transmit+0x188>
 802abcc:	68fb      	ldr	r3, [r7, #12]
 802abce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802abd0:	2b00      	cmp	r3, #0
 802abd2:	d017      	beq.n	802ac04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 802abd4:	68fb      	ldr	r3, [r7, #12]
 802abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802abd8:	781a      	ldrb	r2, [r3, #0]
 802abda:	68fb      	ldr	r3, [r7, #12]
 802abdc:	681b      	ldr	r3, [r3, #0]
 802abde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 802abe0:	68fb      	ldr	r3, [r7, #12]
 802abe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802abe4:	1c5a      	adds	r2, r3, #1
 802abe6:	68fb      	ldr	r3, [r7, #12]
 802abe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 802abea:	68fb      	ldr	r3, [r7, #12]
 802abec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802abee:	b29b      	uxth	r3, r3
 802abf0:	3b01      	subs	r3, #1
 802abf2:	b29a      	uxth	r2, r3
 802abf4:	68fb      	ldr	r3, [r7, #12]
 802abf6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 802abf8:	68fb      	ldr	r3, [r7, #12]
 802abfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802abfc:	3b01      	subs	r3, #1
 802abfe:	b29a      	uxth	r2, r3
 802ac00:	68fb      	ldr	r3, [r7, #12]
 802ac02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802ac04:	697a      	ldr	r2, [r7, #20]
 802ac06:	6a39      	ldr	r1, [r7, #32]
 802ac08:	68f8      	ldr	r0, [r7, #12]
 802ac0a:	f002 fa30 	bl	802d06e <I2C_WaitOnBTFFlagUntilTimeout>
 802ac0e:	4603      	mov	r3, r0
 802ac10:	2b00      	cmp	r3, #0
 802ac12:	d00d      	beq.n	802ac30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 802ac14:	68fb      	ldr	r3, [r7, #12]
 802ac16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ac18:	2b04      	cmp	r3, #4
 802ac1a:	d107      	bne.n	802ac2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802ac1c:	68fb      	ldr	r3, [r7, #12]
 802ac1e:	681b      	ldr	r3, [r3, #0]
 802ac20:	681a      	ldr	r2, [r3, #0]
 802ac22:	68fb      	ldr	r3, [r7, #12]
 802ac24:	681b      	ldr	r3, [r3, #0]
 802ac26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ac2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 802ac2c:	2301      	movs	r3, #1
 802ac2e:	e01a      	b.n	802ac66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 802ac30:	68fb      	ldr	r3, [r7, #12]
 802ac32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ac34:	2b00      	cmp	r3, #0
 802ac36:	d194      	bne.n	802ab62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802ac38:	68fb      	ldr	r3, [r7, #12]
 802ac3a:	681b      	ldr	r3, [r3, #0]
 802ac3c:	681a      	ldr	r2, [r3, #0]
 802ac3e:	68fb      	ldr	r3, [r7, #12]
 802ac40:	681b      	ldr	r3, [r3, #0]
 802ac42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ac46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 802ac48:	68fb      	ldr	r3, [r7, #12]
 802ac4a:	2220      	movs	r2, #32
 802ac4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 802ac50:	68fb      	ldr	r3, [r7, #12]
 802ac52:	2200      	movs	r2, #0
 802ac54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802ac58:	68fb      	ldr	r3, [r7, #12]
 802ac5a:	2200      	movs	r2, #0
 802ac5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 802ac60:	2300      	movs	r3, #0
 802ac62:	e000      	b.n	802ac66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 802ac64:	2302      	movs	r3, #2
  }
}
 802ac66:	4618      	mov	r0, r3
 802ac68:	3718      	adds	r7, #24
 802ac6a:	46bd      	mov	sp, r7
 802ac6c:	bd80      	pop	{r7, pc}
 802ac6e:	bf00      	nop
 802ac70:	00100002 	.word	0x00100002
 802ac74:	ffff0000 	.word	0xffff0000

0802ac78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802ac78:	b580      	push	{r7, lr}
 802ac7a:	b08c      	sub	sp, #48	; 0x30
 802ac7c:	af02      	add	r7, sp, #8
 802ac7e:	60f8      	str	r0, [r7, #12]
 802ac80:	607a      	str	r2, [r7, #4]
 802ac82:	461a      	mov	r2, r3
 802ac84:	460b      	mov	r3, r1
 802ac86:	817b      	strh	r3, [r7, #10]
 802ac88:	4613      	mov	r3, r2
 802ac8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 802ac8c:	f7fd fc46 	bl	802851c <HAL_GetTick>
 802ac90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 802ac92:	68fb      	ldr	r3, [r7, #12]
 802ac94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802ac98:	b2db      	uxtb	r3, r3
 802ac9a:	2b20      	cmp	r3, #32
 802ac9c:	f040 820b 	bne.w	802b0b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 802aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802aca2:	9300      	str	r3, [sp, #0]
 802aca4:	2319      	movs	r3, #25
 802aca6:	2201      	movs	r2, #1
 802aca8:	497c      	ldr	r1, [pc, #496]	; (802ae9c <HAL_I2C_Master_Receive+0x224>)
 802acaa:	68f8      	ldr	r0, [r7, #12]
 802acac:	f002 f8c8 	bl	802ce40 <I2C_WaitOnFlagUntilTimeout>
 802acb0:	4603      	mov	r3, r0
 802acb2:	2b00      	cmp	r3, #0
 802acb4:	d001      	beq.n	802acba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 802acb6:	2302      	movs	r3, #2
 802acb8:	e1fe      	b.n	802b0b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 802acba:	68fb      	ldr	r3, [r7, #12]
 802acbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802acc0:	2b01      	cmp	r3, #1
 802acc2:	d101      	bne.n	802acc8 <HAL_I2C_Master_Receive+0x50>
 802acc4:	2302      	movs	r3, #2
 802acc6:	e1f7      	b.n	802b0b8 <HAL_I2C_Master_Receive+0x440>
 802acc8:	68fb      	ldr	r3, [r7, #12]
 802acca:	2201      	movs	r2, #1
 802accc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802acd0:	68fb      	ldr	r3, [r7, #12]
 802acd2:	681b      	ldr	r3, [r3, #0]
 802acd4:	681b      	ldr	r3, [r3, #0]
 802acd6:	f003 0301 	and.w	r3, r3, #1
 802acda:	2b01      	cmp	r3, #1
 802acdc:	d007      	beq.n	802acee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 802acde:	68fb      	ldr	r3, [r7, #12]
 802ace0:	681b      	ldr	r3, [r3, #0]
 802ace2:	681a      	ldr	r2, [r3, #0]
 802ace4:	68fb      	ldr	r3, [r7, #12]
 802ace6:	681b      	ldr	r3, [r3, #0]
 802ace8:	f042 0201 	orr.w	r2, r2, #1
 802acec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802acee:	68fb      	ldr	r3, [r7, #12]
 802acf0:	681b      	ldr	r3, [r3, #0]
 802acf2:	681a      	ldr	r2, [r3, #0]
 802acf4:	68fb      	ldr	r3, [r7, #12]
 802acf6:	681b      	ldr	r3, [r3, #0]
 802acf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802acfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 802acfe:	68fb      	ldr	r3, [r7, #12]
 802ad00:	2222      	movs	r2, #34	; 0x22
 802ad02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 802ad06:	68fb      	ldr	r3, [r7, #12]
 802ad08:	2210      	movs	r2, #16
 802ad0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 802ad0e:	68fb      	ldr	r3, [r7, #12]
 802ad10:	2200      	movs	r2, #0
 802ad12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 802ad14:	68fb      	ldr	r3, [r7, #12]
 802ad16:	687a      	ldr	r2, [r7, #4]
 802ad18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 802ad1a:	68fb      	ldr	r3, [r7, #12]
 802ad1c:	893a      	ldrh	r2, [r7, #8]
 802ad1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 802ad20:	68fb      	ldr	r3, [r7, #12]
 802ad22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ad24:	b29a      	uxth	r2, r3
 802ad26:	68fb      	ldr	r3, [r7, #12]
 802ad28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802ad2a:	68fb      	ldr	r3, [r7, #12]
 802ad2c:	4a5c      	ldr	r2, [pc, #368]	; (802aea0 <HAL_I2C_Master_Receive+0x228>)
 802ad2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 802ad30:	8979      	ldrh	r1, [r7, #10]
 802ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802ad36:	68f8      	ldr	r0, [r7, #12]
 802ad38:	f001 ff0c 	bl	802cb54 <I2C_MasterRequestRead>
 802ad3c:	4603      	mov	r3, r0
 802ad3e:	2b00      	cmp	r3, #0
 802ad40:	d001      	beq.n	802ad46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 802ad42:	2301      	movs	r3, #1
 802ad44:	e1b8      	b.n	802b0b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 802ad46:	68fb      	ldr	r3, [r7, #12]
 802ad48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ad4a:	2b00      	cmp	r3, #0
 802ad4c:	d113      	bne.n	802ad76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802ad4e:	2300      	movs	r3, #0
 802ad50:	623b      	str	r3, [r7, #32]
 802ad52:	68fb      	ldr	r3, [r7, #12]
 802ad54:	681b      	ldr	r3, [r3, #0]
 802ad56:	695b      	ldr	r3, [r3, #20]
 802ad58:	623b      	str	r3, [r7, #32]
 802ad5a:	68fb      	ldr	r3, [r7, #12]
 802ad5c:	681b      	ldr	r3, [r3, #0]
 802ad5e:	699b      	ldr	r3, [r3, #24]
 802ad60:	623b      	str	r3, [r7, #32]
 802ad62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802ad64:	68fb      	ldr	r3, [r7, #12]
 802ad66:	681b      	ldr	r3, [r3, #0]
 802ad68:	681a      	ldr	r2, [r3, #0]
 802ad6a:	68fb      	ldr	r3, [r7, #12]
 802ad6c:	681b      	ldr	r3, [r3, #0]
 802ad6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ad72:	601a      	str	r2, [r3, #0]
 802ad74:	e18c      	b.n	802b090 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 802ad76:	68fb      	ldr	r3, [r7, #12]
 802ad78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ad7a:	2b01      	cmp	r3, #1
 802ad7c:	d11b      	bne.n	802adb6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802ad7e:	68fb      	ldr	r3, [r7, #12]
 802ad80:	681b      	ldr	r3, [r3, #0]
 802ad82:	681a      	ldr	r2, [r3, #0]
 802ad84:	68fb      	ldr	r3, [r7, #12]
 802ad86:	681b      	ldr	r3, [r3, #0]
 802ad88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802ad8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802ad8e:	2300      	movs	r3, #0
 802ad90:	61fb      	str	r3, [r7, #28]
 802ad92:	68fb      	ldr	r3, [r7, #12]
 802ad94:	681b      	ldr	r3, [r3, #0]
 802ad96:	695b      	ldr	r3, [r3, #20]
 802ad98:	61fb      	str	r3, [r7, #28]
 802ad9a:	68fb      	ldr	r3, [r7, #12]
 802ad9c:	681b      	ldr	r3, [r3, #0]
 802ad9e:	699b      	ldr	r3, [r3, #24]
 802ada0:	61fb      	str	r3, [r7, #28]
 802ada2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802ada4:	68fb      	ldr	r3, [r7, #12]
 802ada6:	681b      	ldr	r3, [r3, #0]
 802ada8:	681a      	ldr	r2, [r3, #0]
 802adaa:	68fb      	ldr	r3, [r7, #12]
 802adac:	681b      	ldr	r3, [r3, #0]
 802adae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802adb2:	601a      	str	r2, [r3, #0]
 802adb4:	e16c      	b.n	802b090 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 802adb6:	68fb      	ldr	r3, [r7, #12]
 802adb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802adba:	2b02      	cmp	r3, #2
 802adbc:	d11b      	bne.n	802adf6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802adbe:	68fb      	ldr	r3, [r7, #12]
 802adc0:	681b      	ldr	r3, [r3, #0]
 802adc2:	681a      	ldr	r2, [r3, #0]
 802adc4:	68fb      	ldr	r3, [r7, #12]
 802adc6:	681b      	ldr	r3, [r3, #0]
 802adc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802adcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802adce:	68fb      	ldr	r3, [r7, #12]
 802add0:	681b      	ldr	r3, [r3, #0]
 802add2:	681a      	ldr	r2, [r3, #0]
 802add4:	68fb      	ldr	r3, [r7, #12]
 802add6:	681b      	ldr	r3, [r3, #0]
 802add8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802addc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802adde:	2300      	movs	r3, #0
 802ade0:	61bb      	str	r3, [r7, #24]
 802ade2:	68fb      	ldr	r3, [r7, #12]
 802ade4:	681b      	ldr	r3, [r3, #0]
 802ade6:	695b      	ldr	r3, [r3, #20]
 802ade8:	61bb      	str	r3, [r7, #24]
 802adea:	68fb      	ldr	r3, [r7, #12]
 802adec:	681b      	ldr	r3, [r3, #0]
 802adee:	699b      	ldr	r3, [r3, #24]
 802adf0:	61bb      	str	r3, [r7, #24]
 802adf2:	69bb      	ldr	r3, [r7, #24]
 802adf4:	e14c      	b.n	802b090 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802adf6:	68fb      	ldr	r3, [r7, #12]
 802adf8:	681b      	ldr	r3, [r3, #0]
 802adfa:	681a      	ldr	r2, [r3, #0]
 802adfc:	68fb      	ldr	r3, [r7, #12]
 802adfe:	681b      	ldr	r3, [r3, #0]
 802ae00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802ae04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802ae06:	2300      	movs	r3, #0
 802ae08:	617b      	str	r3, [r7, #20]
 802ae0a:	68fb      	ldr	r3, [r7, #12]
 802ae0c:	681b      	ldr	r3, [r3, #0]
 802ae0e:	695b      	ldr	r3, [r3, #20]
 802ae10:	617b      	str	r3, [r7, #20]
 802ae12:	68fb      	ldr	r3, [r7, #12]
 802ae14:	681b      	ldr	r3, [r3, #0]
 802ae16:	699b      	ldr	r3, [r3, #24]
 802ae18:	617b      	str	r3, [r7, #20]
 802ae1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 802ae1c:	e138      	b.n	802b090 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 802ae1e:	68fb      	ldr	r3, [r7, #12]
 802ae20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ae22:	2b03      	cmp	r3, #3
 802ae24:	f200 80f1 	bhi.w	802b00a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 802ae28:	68fb      	ldr	r3, [r7, #12]
 802ae2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ae2c:	2b01      	cmp	r3, #1
 802ae2e:	d123      	bne.n	802ae78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802ae30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802ae32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802ae34:	68f8      	ldr	r0, [r7, #12]
 802ae36:	f002 f98d 	bl	802d154 <I2C_WaitOnRXNEFlagUntilTimeout>
 802ae3a:	4603      	mov	r3, r0
 802ae3c:	2b00      	cmp	r3, #0
 802ae3e:	d001      	beq.n	802ae44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 802ae40:	2301      	movs	r3, #1
 802ae42:	e139      	b.n	802b0b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802ae44:	68fb      	ldr	r3, [r7, #12]
 802ae46:	681b      	ldr	r3, [r3, #0]
 802ae48:	691a      	ldr	r2, [r3, #16]
 802ae4a:	68fb      	ldr	r3, [r7, #12]
 802ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ae4e:	b2d2      	uxtb	r2, r2
 802ae50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802ae52:	68fb      	ldr	r3, [r7, #12]
 802ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ae56:	1c5a      	adds	r2, r3, #1
 802ae58:	68fb      	ldr	r3, [r7, #12]
 802ae5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 802ae5c:	68fb      	ldr	r3, [r7, #12]
 802ae5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ae60:	3b01      	subs	r3, #1
 802ae62:	b29a      	uxth	r2, r3
 802ae64:	68fb      	ldr	r3, [r7, #12]
 802ae66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 802ae68:	68fb      	ldr	r3, [r7, #12]
 802ae6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ae6c:	b29b      	uxth	r3, r3
 802ae6e:	3b01      	subs	r3, #1
 802ae70:	b29a      	uxth	r2, r3
 802ae72:	68fb      	ldr	r3, [r7, #12]
 802ae74:	855a      	strh	r2, [r3, #42]	; 0x2a
 802ae76:	e10b      	b.n	802b090 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 802ae78:	68fb      	ldr	r3, [r7, #12]
 802ae7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802ae7c:	2b02      	cmp	r3, #2
 802ae7e:	d14e      	bne.n	802af1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 802ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ae82:	9300      	str	r3, [sp, #0]
 802ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ae86:	2200      	movs	r2, #0
 802ae88:	4906      	ldr	r1, [pc, #24]	; (802aea4 <HAL_I2C_Master_Receive+0x22c>)
 802ae8a:	68f8      	ldr	r0, [r7, #12]
 802ae8c:	f001 ffd8 	bl	802ce40 <I2C_WaitOnFlagUntilTimeout>
 802ae90:	4603      	mov	r3, r0
 802ae92:	2b00      	cmp	r3, #0
 802ae94:	d008      	beq.n	802aea8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 802ae96:	2301      	movs	r3, #1
 802ae98:	e10e      	b.n	802b0b8 <HAL_I2C_Master_Receive+0x440>
 802ae9a:	bf00      	nop
 802ae9c:	00100002 	.word	0x00100002
 802aea0:	ffff0000 	.word	0xffff0000
 802aea4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802aea8:	68fb      	ldr	r3, [r7, #12]
 802aeaa:	681b      	ldr	r3, [r3, #0]
 802aeac:	681a      	ldr	r2, [r3, #0]
 802aeae:	68fb      	ldr	r3, [r7, #12]
 802aeb0:	681b      	ldr	r3, [r3, #0]
 802aeb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802aeb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802aeb8:	68fb      	ldr	r3, [r7, #12]
 802aeba:	681b      	ldr	r3, [r3, #0]
 802aebc:	691a      	ldr	r2, [r3, #16]
 802aebe:	68fb      	ldr	r3, [r7, #12]
 802aec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aec2:	b2d2      	uxtb	r2, r2
 802aec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802aec6:	68fb      	ldr	r3, [r7, #12]
 802aec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aeca:	1c5a      	adds	r2, r3, #1
 802aecc:	68fb      	ldr	r3, [r7, #12]
 802aece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 802aed0:	68fb      	ldr	r3, [r7, #12]
 802aed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802aed4:	3b01      	subs	r3, #1
 802aed6:	b29a      	uxth	r2, r3
 802aed8:	68fb      	ldr	r3, [r7, #12]
 802aeda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 802aedc:	68fb      	ldr	r3, [r7, #12]
 802aede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802aee0:	b29b      	uxth	r3, r3
 802aee2:	3b01      	subs	r3, #1
 802aee4:	b29a      	uxth	r2, r3
 802aee6:	68fb      	ldr	r3, [r7, #12]
 802aee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802aeea:	68fb      	ldr	r3, [r7, #12]
 802aeec:	681b      	ldr	r3, [r3, #0]
 802aeee:	691a      	ldr	r2, [r3, #16]
 802aef0:	68fb      	ldr	r3, [r7, #12]
 802aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aef4:	b2d2      	uxtb	r2, r2
 802aef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802aef8:	68fb      	ldr	r3, [r7, #12]
 802aefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aefc:	1c5a      	adds	r2, r3, #1
 802aefe:	68fb      	ldr	r3, [r7, #12]
 802af00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 802af02:	68fb      	ldr	r3, [r7, #12]
 802af04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802af06:	3b01      	subs	r3, #1
 802af08:	b29a      	uxth	r2, r3
 802af0a:	68fb      	ldr	r3, [r7, #12]
 802af0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 802af0e:	68fb      	ldr	r3, [r7, #12]
 802af10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802af12:	b29b      	uxth	r3, r3
 802af14:	3b01      	subs	r3, #1
 802af16:	b29a      	uxth	r2, r3
 802af18:	68fb      	ldr	r3, [r7, #12]
 802af1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 802af1c:	e0b8      	b.n	802b090 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 802af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802af20:	9300      	str	r3, [sp, #0]
 802af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802af24:	2200      	movs	r2, #0
 802af26:	4966      	ldr	r1, [pc, #408]	; (802b0c0 <HAL_I2C_Master_Receive+0x448>)
 802af28:	68f8      	ldr	r0, [r7, #12]
 802af2a:	f001 ff89 	bl	802ce40 <I2C_WaitOnFlagUntilTimeout>
 802af2e:	4603      	mov	r3, r0
 802af30:	2b00      	cmp	r3, #0
 802af32:	d001      	beq.n	802af38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 802af34:	2301      	movs	r3, #1
 802af36:	e0bf      	b.n	802b0b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802af38:	68fb      	ldr	r3, [r7, #12]
 802af3a:	681b      	ldr	r3, [r3, #0]
 802af3c:	681a      	ldr	r2, [r3, #0]
 802af3e:	68fb      	ldr	r3, [r7, #12]
 802af40:	681b      	ldr	r3, [r3, #0]
 802af42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802af46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802af48:	68fb      	ldr	r3, [r7, #12]
 802af4a:	681b      	ldr	r3, [r3, #0]
 802af4c:	691a      	ldr	r2, [r3, #16]
 802af4e:	68fb      	ldr	r3, [r7, #12]
 802af50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802af52:	b2d2      	uxtb	r2, r2
 802af54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802af56:	68fb      	ldr	r3, [r7, #12]
 802af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802af5a:	1c5a      	adds	r2, r3, #1
 802af5c:	68fb      	ldr	r3, [r7, #12]
 802af5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 802af60:	68fb      	ldr	r3, [r7, #12]
 802af62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802af64:	3b01      	subs	r3, #1
 802af66:	b29a      	uxth	r2, r3
 802af68:	68fb      	ldr	r3, [r7, #12]
 802af6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 802af6c:	68fb      	ldr	r3, [r7, #12]
 802af6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802af70:	b29b      	uxth	r3, r3
 802af72:	3b01      	subs	r3, #1
 802af74:	b29a      	uxth	r2, r3
 802af76:	68fb      	ldr	r3, [r7, #12]
 802af78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 802af7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802af7c:	9300      	str	r3, [sp, #0]
 802af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802af80:	2200      	movs	r2, #0
 802af82:	494f      	ldr	r1, [pc, #316]	; (802b0c0 <HAL_I2C_Master_Receive+0x448>)
 802af84:	68f8      	ldr	r0, [r7, #12]
 802af86:	f001 ff5b 	bl	802ce40 <I2C_WaitOnFlagUntilTimeout>
 802af8a:	4603      	mov	r3, r0
 802af8c:	2b00      	cmp	r3, #0
 802af8e:	d001      	beq.n	802af94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 802af90:	2301      	movs	r3, #1
 802af92:	e091      	b.n	802b0b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802af94:	68fb      	ldr	r3, [r7, #12]
 802af96:	681b      	ldr	r3, [r3, #0]
 802af98:	681a      	ldr	r2, [r3, #0]
 802af9a:	68fb      	ldr	r3, [r7, #12]
 802af9c:	681b      	ldr	r3, [r3, #0]
 802af9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802afa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802afa4:	68fb      	ldr	r3, [r7, #12]
 802afa6:	681b      	ldr	r3, [r3, #0]
 802afa8:	691a      	ldr	r2, [r3, #16]
 802afaa:	68fb      	ldr	r3, [r7, #12]
 802afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802afae:	b2d2      	uxtb	r2, r2
 802afb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802afb2:	68fb      	ldr	r3, [r7, #12]
 802afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802afb6:	1c5a      	adds	r2, r3, #1
 802afb8:	68fb      	ldr	r3, [r7, #12]
 802afba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 802afbc:	68fb      	ldr	r3, [r7, #12]
 802afbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802afc0:	3b01      	subs	r3, #1
 802afc2:	b29a      	uxth	r2, r3
 802afc4:	68fb      	ldr	r3, [r7, #12]
 802afc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 802afc8:	68fb      	ldr	r3, [r7, #12]
 802afca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802afcc:	b29b      	uxth	r3, r3
 802afce:	3b01      	subs	r3, #1
 802afd0:	b29a      	uxth	r2, r3
 802afd2:	68fb      	ldr	r3, [r7, #12]
 802afd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802afd6:	68fb      	ldr	r3, [r7, #12]
 802afd8:	681b      	ldr	r3, [r3, #0]
 802afda:	691a      	ldr	r2, [r3, #16]
 802afdc:	68fb      	ldr	r3, [r7, #12]
 802afde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802afe0:	b2d2      	uxtb	r2, r2
 802afe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802afe4:	68fb      	ldr	r3, [r7, #12]
 802afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802afe8:	1c5a      	adds	r2, r3, #1
 802afea:	68fb      	ldr	r3, [r7, #12]
 802afec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 802afee:	68fb      	ldr	r3, [r7, #12]
 802aff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802aff2:	3b01      	subs	r3, #1
 802aff4:	b29a      	uxth	r2, r3
 802aff6:	68fb      	ldr	r3, [r7, #12]
 802aff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 802affa:	68fb      	ldr	r3, [r7, #12]
 802affc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802affe:	b29b      	uxth	r3, r3
 802b000:	3b01      	subs	r3, #1
 802b002:	b29a      	uxth	r2, r3
 802b004:	68fb      	ldr	r3, [r7, #12]
 802b006:	855a      	strh	r2, [r3, #42]	; 0x2a
 802b008:	e042      	b.n	802b090 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 802b00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b00c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802b00e:	68f8      	ldr	r0, [r7, #12]
 802b010:	f002 f8a0 	bl	802d154 <I2C_WaitOnRXNEFlagUntilTimeout>
 802b014:	4603      	mov	r3, r0
 802b016:	2b00      	cmp	r3, #0
 802b018:	d001      	beq.n	802b01e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 802b01a:	2301      	movs	r3, #1
 802b01c:	e04c      	b.n	802b0b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802b01e:	68fb      	ldr	r3, [r7, #12]
 802b020:	681b      	ldr	r3, [r3, #0]
 802b022:	691a      	ldr	r2, [r3, #16]
 802b024:	68fb      	ldr	r3, [r7, #12]
 802b026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b028:	b2d2      	uxtb	r2, r2
 802b02a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 802b02c:	68fb      	ldr	r3, [r7, #12]
 802b02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b030:	1c5a      	adds	r2, r3, #1
 802b032:	68fb      	ldr	r3, [r7, #12]
 802b034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 802b036:	68fb      	ldr	r3, [r7, #12]
 802b038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b03a:	3b01      	subs	r3, #1
 802b03c:	b29a      	uxth	r2, r3
 802b03e:	68fb      	ldr	r3, [r7, #12]
 802b040:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 802b042:	68fb      	ldr	r3, [r7, #12]
 802b044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b046:	b29b      	uxth	r3, r3
 802b048:	3b01      	subs	r3, #1
 802b04a:	b29a      	uxth	r2, r3
 802b04c:	68fb      	ldr	r3, [r7, #12]
 802b04e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 802b050:	68fb      	ldr	r3, [r7, #12]
 802b052:	681b      	ldr	r3, [r3, #0]
 802b054:	695b      	ldr	r3, [r3, #20]
 802b056:	f003 0304 	and.w	r3, r3, #4
 802b05a:	2b04      	cmp	r3, #4
 802b05c:	d118      	bne.n	802b090 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802b05e:	68fb      	ldr	r3, [r7, #12]
 802b060:	681b      	ldr	r3, [r3, #0]
 802b062:	691a      	ldr	r2, [r3, #16]
 802b064:	68fb      	ldr	r3, [r7, #12]
 802b066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b068:	b2d2      	uxtb	r2, r2
 802b06a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802b06c:	68fb      	ldr	r3, [r7, #12]
 802b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b070:	1c5a      	adds	r2, r3, #1
 802b072:	68fb      	ldr	r3, [r7, #12]
 802b074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 802b076:	68fb      	ldr	r3, [r7, #12]
 802b078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b07a:	3b01      	subs	r3, #1
 802b07c:	b29a      	uxth	r2, r3
 802b07e:	68fb      	ldr	r3, [r7, #12]
 802b080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 802b082:	68fb      	ldr	r3, [r7, #12]
 802b084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b086:	b29b      	uxth	r3, r3
 802b088:	3b01      	subs	r3, #1
 802b08a:	b29a      	uxth	r2, r3
 802b08c:	68fb      	ldr	r3, [r7, #12]
 802b08e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 802b090:	68fb      	ldr	r3, [r7, #12]
 802b092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b094:	2b00      	cmp	r3, #0
 802b096:	f47f aec2 	bne.w	802ae1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 802b09a:	68fb      	ldr	r3, [r7, #12]
 802b09c:	2220      	movs	r2, #32
 802b09e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 802b0a2:	68fb      	ldr	r3, [r7, #12]
 802b0a4:	2200      	movs	r2, #0
 802b0a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802b0aa:	68fb      	ldr	r3, [r7, #12]
 802b0ac:	2200      	movs	r2, #0
 802b0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 802b0b2:	2300      	movs	r3, #0
 802b0b4:	e000      	b.n	802b0b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 802b0b6:	2302      	movs	r3, #2
  }
}
 802b0b8:	4618      	mov	r0, r3
 802b0ba:	3728      	adds	r7, #40	; 0x28
 802b0bc:	46bd      	mov	sp, r7
 802b0be:	bd80      	pop	{r7, pc}
 802b0c0:	00010004 	.word	0x00010004

0802b0c4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 802b0c4:	b480      	push	{r7}
 802b0c6:	b087      	sub	sp, #28
 802b0c8:	af00      	add	r7, sp, #0
 802b0ca:	60f8      	str	r0, [r7, #12]
 802b0cc:	607a      	str	r2, [r7, #4]
 802b0ce:	461a      	mov	r2, r3
 802b0d0:	460b      	mov	r3, r1
 802b0d2:	817b      	strh	r3, [r7, #10]
 802b0d4:	4613      	mov	r3, r2
 802b0d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 802b0d8:	2300      	movs	r3, #0
 802b0da:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 802b0dc:	68fb      	ldr	r3, [r7, #12]
 802b0de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802b0e2:	b2db      	uxtb	r3, r3
 802b0e4:	2b20      	cmp	r3, #32
 802b0e6:	f040 8085 	bne.w	802b1f4 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 802b0ea:	4b46      	ldr	r3, [pc, #280]	; (802b204 <HAL_I2C_Master_Transmit_IT+0x140>)
 802b0ec:	681b      	ldr	r3, [r3, #0]
 802b0ee:	08db      	lsrs	r3, r3, #3
 802b0f0:	4a45      	ldr	r2, [pc, #276]	; (802b208 <HAL_I2C_Master_Transmit_IT+0x144>)
 802b0f2:	fba2 2303 	umull	r2, r3, r2, r3
 802b0f6:	0a1a      	lsrs	r2, r3, #8
 802b0f8:	4613      	mov	r3, r2
 802b0fa:	009b      	lsls	r3, r3, #2
 802b0fc:	4413      	add	r3, r2
 802b0fe:	009a      	lsls	r2, r3, #2
 802b100:	4413      	add	r3, r2
 802b102:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 802b104:	697b      	ldr	r3, [r7, #20]
 802b106:	3b01      	subs	r3, #1
 802b108:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 802b10a:	697b      	ldr	r3, [r7, #20]
 802b10c:	2b00      	cmp	r3, #0
 802b10e:	d116      	bne.n	802b13e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802b110:	68fb      	ldr	r3, [r7, #12]
 802b112:	2200      	movs	r2, #0
 802b114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802b116:	68fb      	ldr	r3, [r7, #12]
 802b118:	2220      	movs	r2, #32
 802b11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802b11e:	68fb      	ldr	r3, [r7, #12]
 802b120:	2200      	movs	r2, #0
 802b122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802b126:	68fb      	ldr	r3, [r7, #12]
 802b128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b12a:	f043 0220 	orr.w	r2, r3, #32
 802b12e:	68fb      	ldr	r3, [r7, #12]
 802b130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802b132:	68fb      	ldr	r3, [r7, #12]
 802b134:	2200      	movs	r2, #0
 802b136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802b13a:	2301      	movs	r3, #1
 802b13c:	e05b      	b.n	802b1f6 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 802b13e:	68fb      	ldr	r3, [r7, #12]
 802b140:	681b      	ldr	r3, [r3, #0]
 802b142:	699b      	ldr	r3, [r3, #24]
 802b144:	f003 0302 	and.w	r3, r3, #2
 802b148:	2b02      	cmp	r3, #2
 802b14a:	d0db      	beq.n	802b104 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 802b14c:	68fb      	ldr	r3, [r7, #12]
 802b14e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802b152:	2b01      	cmp	r3, #1
 802b154:	d101      	bne.n	802b15a <HAL_I2C_Master_Transmit_IT+0x96>
 802b156:	2302      	movs	r3, #2
 802b158:	e04d      	b.n	802b1f6 <HAL_I2C_Master_Transmit_IT+0x132>
 802b15a:	68fb      	ldr	r3, [r7, #12]
 802b15c:	2201      	movs	r2, #1
 802b15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802b162:	68fb      	ldr	r3, [r7, #12]
 802b164:	681b      	ldr	r3, [r3, #0]
 802b166:	681b      	ldr	r3, [r3, #0]
 802b168:	f003 0301 	and.w	r3, r3, #1
 802b16c:	2b01      	cmp	r3, #1
 802b16e:	d007      	beq.n	802b180 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 802b170:	68fb      	ldr	r3, [r7, #12]
 802b172:	681b      	ldr	r3, [r3, #0]
 802b174:	681a      	ldr	r2, [r3, #0]
 802b176:	68fb      	ldr	r3, [r7, #12]
 802b178:	681b      	ldr	r3, [r3, #0]
 802b17a:	f042 0201 	orr.w	r2, r2, #1
 802b17e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802b180:	68fb      	ldr	r3, [r7, #12]
 802b182:	681b      	ldr	r3, [r3, #0]
 802b184:	681a      	ldr	r2, [r3, #0]
 802b186:	68fb      	ldr	r3, [r7, #12]
 802b188:	681b      	ldr	r3, [r3, #0]
 802b18a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802b18e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 802b190:	68fb      	ldr	r3, [r7, #12]
 802b192:	2221      	movs	r2, #33	; 0x21
 802b194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 802b198:	68fb      	ldr	r3, [r7, #12]
 802b19a:	2210      	movs	r2, #16
 802b19c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802b1a0:	68fb      	ldr	r3, [r7, #12]
 802b1a2:	2200      	movs	r2, #0
 802b1a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 802b1a6:	68fb      	ldr	r3, [r7, #12]
 802b1a8:	687a      	ldr	r2, [r7, #4]
 802b1aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 802b1ac:	68fb      	ldr	r3, [r7, #12]
 802b1ae:	893a      	ldrh	r2, [r7, #8]
 802b1b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 802b1b2:	68fb      	ldr	r3, [r7, #12]
 802b1b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b1b6:	b29a      	uxth	r2, r3
 802b1b8:	68fb      	ldr	r3, [r7, #12]
 802b1ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802b1bc:	68fb      	ldr	r3, [r7, #12]
 802b1be:	4a13      	ldr	r2, [pc, #76]	; (802b20c <HAL_I2C_Master_Transmit_IT+0x148>)
 802b1c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 802b1c2:	897a      	ldrh	r2, [r7, #10]
 802b1c4:	68fb      	ldr	r3, [r7, #12]
 802b1c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802b1c8:	68fb      	ldr	r3, [r7, #12]
 802b1ca:	681b      	ldr	r3, [r3, #0]
 802b1cc:	681a      	ldr	r2, [r3, #0]
 802b1ce:	68fb      	ldr	r3, [r7, #12]
 802b1d0:	681b      	ldr	r3, [r3, #0]
 802b1d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802b1d6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802b1d8:	68fb      	ldr	r3, [r7, #12]
 802b1da:	2200      	movs	r2, #0
 802b1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802b1e0:	68fb      	ldr	r3, [r7, #12]
 802b1e2:	681b      	ldr	r3, [r3, #0]
 802b1e4:	685a      	ldr	r2, [r3, #4]
 802b1e6:	68fb      	ldr	r3, [r7, #12]
 802b1e8:	681b      	ldr	r3, [r3, #0]
 802b1ea:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 802b1ee:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 802b1f0:	2300      	movs	r3, #0
 802b1f2:	e000      	b.n	802b1f6 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 802b1f4:	2302      	movs	r3, #2
  }
}
 802b1f6:	4618      	mov	r0, r3
 802b1f8:	371c      	adds	r7, #28
 802b1fa:	46bd      	mov	sp, r7
 802b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b200:	4770      	bx	lr
 802b202:	bf00      	nop
 802b204:	200014e4 	.word	0x200014e4
 802b208:	14f8b589 	.word	0x14f8b589
 802b20c:	ffff0000 	.word	0xffff0000

0802b210 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 802b210:	b480      	push	{r7}
 802b212:	b087      	sub	sp, #28
 802b214:	af00      	add	r7, sp, #0
 802b216:	60f8      	str	r0, [r7, #12]
 802b218:	4608      	mov	r0, r1
 802b21a:	4611      	mov	r1, r2
 802b21c:	461a      	mov	r2, r3
 802b21e:	4603      	mov	r3, r0
 802b220:	817b      	strh	r3, [r7, #10]
 802b222:	460b      	mov	r3, r1
 802b224:	813b      	strh	r3, [r7, #8]
 802b226:	4613      	mov	r3, r2
 802b228:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 802b22a:	2300      	movs	r3, #0
 802b22c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802b22e:	68fb      	ldr	r3, [r7, #12]
 802b230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802b234:	b2db      	uxtb	r3, r3
 802b236:	2b20      	cmp	r3, #32
 802b238:	f040 808e 	bne.w	802b358 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 802b23c:	4b4a      	ldr	r3, [pc, #296]	; (802b368 <HAL_I2C_Mem_Write_IT+0x158>)
 802b23e:	681b      	ldr	r3, [r3, #0]
 802b240:	08db      	lsrs	r3, r3, #3
 802b242:	4a4a      	ldr	r2, [pc, #296]	; (802b36c <HAL_I2C_Mem_Write_IT+0x15c>)
 802b244:	fba2 2303 	umull	r2, r3, r2, r3
 802b248:	0a1a      	lsrs	r2, r3, #8
 802b24a:	4613      	mov	r3, r2
 802b24c:	009b      	lsls	r3, r3, #2
 802b24e:	4413      	add	r3, r2
 802b250:	009a      	lsls	r2, r3, #2
 802b252:	4413      	add	r3, r2
 802b254:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 802b256:	697b      	ldr	r3, [r7, #20]
 802b258:	3b01      	subs	r3, #1
 802b25a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 802b25c:	697b      	ldr	r3, [r7, #20]
 802b25e:	2b00      	cmp	r3, #0
 802b260:	d116      	bne.n	802b290 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802b262:	68fb      	ldr	r3, [r7, #12]
 802b264:	2200      	movs	r2, #0
 802b266:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802b268:	68fb      	ldr	r3, [r7, #12]
 802b26a:	2220      	movs	r2, #32
 802b26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802b270:	68fb      	ldr	r3, [r7, #12]
 802b272:	2200      	movs	r2, #0
 802b274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802b278:	68fb      	ldr	r3, [r7, #12]
 802b27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b27c:	f043 0220 	orr.w	r2, r3, #32
 802b280:	68fb      	ldr	r3, [r7, #12]
 802b282:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802b284:	68fb      	ldr	r3, [r7, #12]
 802b286:	2200      	movs	r2, #0
 802b288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802b28c:	2301      	movs	r3, #1
 802b28e:	e064      	b.n	802b35a <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 802b290:	68fb      	ldr	r3, [r7, #12]
 802b292:	681b      	ldr	r3, [r3, #0]
 802b294:	699b      	ldr	r3, [r3, #24]
 802b296:	f003 0302 	and.w	r3, r3, #2
 802b29a:	2b02      	cmp	r3, #2
 802b29c:	d0db      	beq.n	802b256 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 802b29e:	68fb      	ldr	r3, [r7, #12]
 802b2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802b2a4:	2b01      	cmp	r3, #1
 802b2a6:	d101      	bne.n	802b2ac <HAL_I2C_Mem_Write_IT+0x9c>
 802b2a8:	2302      	movs	r3, #2
 802b2aa:	e056      	b.n	802b35a <HAL_I2C_Mem_Write_IT+0x14a>
 802b2ac:	68fb      	ldr	r3, [r7, #12]
 802b2ae:	2201      	movs	r2, #1
 802b2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802b2b4:	68fb      	ldr	r3, [r7, #12]
 802b2b6:	681b      	ldr	r3, [r3, #0]
 802b2b8:	681b      	ldr	r3, [r3, #0]
 802b2ba:	f003 0301 	and.w	r3, r3, #1
 802b2be:	2b01      	cmp	r3, #1
 802b2c0:	d007      	beq.n	802b2d2 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 802b2c2:	68fb      	ldr	r3, [r7, #12]
 802b2c4:	681b      	ldr	r3, [r3, #0]
 802b2c6:	681a      	ldr	r2, [r3, #0]
 802b2c8:	68fb      	ldr	r3, [r7, #12]
 802b2ca:	681b      	ldr	r3, [r3, #0]
 802b2cc:	f042 0201 	orr.w	r2, r2, #1
 802b2d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802b2d2:	68fb      	ldr	r3, [r7, #12]
 802b2d4:	681b      	ldr	r3, [r3, #0]
 802b2d6:	681a      	ldr	r2, [r3, #0]
 802b2d8:	68fb      	ldr	r3, [r7, #12]
 802b2da:	681b      	ldr	r3, [r3, #0]
 802b2dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802b2e0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 802b2e2:	68fb      	ldr	r3, [r7, #12]
 802b2e4:	2221      	movs	r2, #33	; 0x21
 802b2e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 802b2ea:	68fb      	ldr	r3, [r7, #12]
 802b2ec:	2240      	movs	r2, #64	; 0x40
 802b2ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802b2f2:	68fb      	ldr	r3, [r7, #12]
 802b2f4:	2200      	movs	r2, #0
 802b2f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 802b2f8:	68fb      	ldr	r3, [r7, #12]
 802b2fa:	6a3a      	ldr	r2, [r7, #32]
 802b2fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 802b2fe:	68fb      	ldr	r3, [r7, #12]
 802b300:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802b302:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 802b304:	68fb      	ldr	r3, [r7, #12]
 802b306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b308:	b29a      	uxth	r2, r3
 802b30a:	68fb      	ldr	r3, [r7, #12]
 802b30c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802b30e:	68fb      	ldr	r3, [r7, #12]
 802b310:	4a17      	ldr	r2, [pc, #92]	; (802b370 <HAL_I2C_Mem_Write_IT+0x160>)
 802b312:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 802b314:	897a      	ldrh	r2, [r7, #10]
 802b316:	68fb      	ldr	r3, [r7, #12]
 802b318:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 802b31a:	893a      	ldrh	r2, [r7, #8]
 802b31c:	68fb      	ldr	r3, [r7, #12]
 802b31e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 802b320:	88fa      	ldrh	r2, [r7, #6]
 802b322:	68fb      	ldr	r3, [r7, #12]
 802b324:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 802b326:	68fb      	ldr	r3, [r7, #12]
 802b328:	2200      	movs	r2, #0
 802b32a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802b32c:	68fb      	ldr	r3, [r7, #12]
 802b32e:	681b      	ldr	r3, [r3, #0]
 802b330:	681a      	ldr	r2, [r3, #0]
 802b332:	68fb      	ldr	r3, [r7, #12]
 802b334:	681b      	ldr	r3, [r3, #0]
 802b336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802b33a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802b33c:	68fb      	ldr	r3, [r7, #12]
 802b33e:	2200      	movs	r2, #0
 802b340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802b344:	68fb      	ldr	r3, [r7, #12]
 802b346:	681b      	ldr	r3, [r3, #0]
 802b348:	685a      	ldr	r2, [r3, #4]
 802b34a:	68fb      	ldr	r3, [r7, #12]
 802b34c:	681b      	ldr	r3, [r3, #0]
 802b34e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 802b352:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 802b354:	2300      	movs	r3, #0
 802b356:	e000      	b.n	802b35a <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 802b358:	2302      	movs	r3, #2
  }
}
 802b35a:	4618      	mov	r0, r3
 802b35c:	371c      	adds	r7, #28
 802b35e:	46bd      	mov	sp, r7
 802b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b364:	4770      	bx	lr
 802b366:	bf00      	nop
 802b368:	200014e4 	.word	0x200014e4
 802b36c:	14f8b589 	.word	0x14f8b589
 802b370:	ffff0000 	.word	0xffff0000

0802b374 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 802b374:	b480      	push	{r7}
 802b376:	b087      	sub	sp, #28
 802b378:	af00      	add	r7, sp, #0
 802b37a:	60f8      	str	r0, [r7, #12]
 802b37c:	4608      	mov	r0, r1
 802b37e:	4611      	mov	r1, r2
 802b380:	461a      	mov	r2, r3
 802b382:	4603      	mov	r3, r0
 802b384:	817b      	strh	r3, [r7, #10]
 802b386:	460b      	mov	r3, r1
 802b388:	813b      	strh	r3, [r7, #8]
 802b38a:	4613      	mov	r3, r2
 802b38c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 802b38e:	2300      	movs	r3, #0
 802b390:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 802b392:	68fb      	ldr	r3, [r7, #12]
 802b394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802b398:	b2db      	uxtb	r3, r3
 802b39a:	2b20      	cmp	r3, #32
 802b39c:	f040 809a 	bne.w	802b4d4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 802b3a0:	4b50      	ldr	r3, [pc, #320]	; (802b4e4 <HAL_I2C_Mem_Read_IT+0x170>)
 802b3a2:	681b      	ldr	r3, [r3, #0]
 802b3a4:	08db      	lsrs	r3, r3, #3
 802b3a6:	4a50      	ldr	r2, [pc, #320]	; (802b4e8 <HAL_I2C_Mem_Read_IT+0x174>)
 802b3a8:	fba2 2303 	umull	r2, r3, r2, r3
 802b3ac:	0a1a      	lsrs	r2, r3, #8
 802b3ae:	4613      	mov	r3, r2
 802b3b0:	009b      	lsls	r3, r3, #2
 802b3b2:	4413      	add	r3, r2
 802b3b4:	009a      	lsls	r2, r3, #2
 802b3b6:	4413      	add	r3, r2
 802b3b8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 802b3ba:	697b      	ldr	r3, [r7, #20]
 802b3bc:	3b01      	subs	r3, #1
 802b3be:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 802b3c0:	697b      	ldr	r3, [r7, #20]
 802b3c2:	2b00      	cmp	r3, #0
 802b3c4:	d116      	bne.n	802b3f4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802b3c6:	68fb      	ldr	r3, [r7, #12]
 802b3c8:	2200      	movs	r2, #0
 802b3ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802b3cc:	68fb      	ldr	r3, [r7, #12]
 802b3ce:	2220      	movs	r2, #32
 802b3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802b3d4:	68fb      	ldr	r3, [r7, #12]
 802b3d6:	2200      	movs	r2, #0
 802b3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802b3dc:	68fb      	ldr	r3, [r7, #12]
 802b3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b3e0:	f043 0220 	orr.w	r2, r3, #32
 802b3e4:	68fb      	ldr	r3, [r7, #12]
 802b3e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802b3e8:	68fb      	ldr	r3, [r7, #12]
 802b3ea:	2200      	movs	r2, #0
 802b3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802b3f0:	2301      	movs	r3, #1
 802b3f2:	e070      	b.n	802b4d6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 802b3f4:	68fb      	ldr	r3, [r7, #12]
 802b3f6:	681b      	ldr	r3, [r3, #0]
 802b3f8:	699b      	ldr	r3, [r3, #24]
 802b3fa:	f003 0302 	and.w	r3, r3, #2
 802b3fe:	2b02      	cmp	r3, #2
 802b400:	d0db      	beq.n	802b3ba <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 802b402:	68fb      	ldr	r3, [r7, #12]
 802b404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802b408:	2b01      	cmp	r3, #1
 802b40a:	d101      	bne.n	802b410 <HAL_I2C_Mem_Read_IT+0x9c>
 802b40c:	2302      	movs	r3, #2
 802b40e:	e062      	b.n	802b4d6 <HAL_I2C_Mem_Read_IT+0x162>
 802b410:	68fb      	ldr	r3, [r7, #12]
 802b412:	2201      	movs	r2, #1
 802b414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 802b418:	68fb      	ldr	r3, [r7, #12]
 802b41a:	681b      	ldr	r3, [r3, #0]
 802b41c:	681b      	ldr	r3, [r3, #0]
 802b41e:	f003 0301 	and.w	r3, r3, #1
 802b422:	2b01      	cmp	r3, #1
 802b424:	d007      	beq.n	802b436 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 802b426:	68fb      	ldr	r3, [r7, #12]
 802b428:	681b      	ldr	r3, [r3, #0]
 802b42a:	681a      	ldr	r2, [r3, #0]
 802b42c:	68fb      	ldr	r3, [r7, #12]
 802b42e:	681b      	ldr	r3, [r3, #0]
 802b430:	f042 0201 	orr.w	r2, r2, #1
 802b434:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802b436:	68fb      	ldr	r3, [r7, #12]
 802b438:	681b      	ldr	r3, [r3, #0]
 802b43a:	681a      	ldr	r2, [r3, #0]
 802b43c:	68fb      	ldr	r3, [r7, #12]
 802b43e:	681b      	ldr	r3, [r3, #0]
 802b440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802b444:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 802b446:	68fb      	ldr	r3, [r7, #12]
 802b448:	2222      	movs	r2, #34	; 0x22
 802b44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 802b44e:	68fb      	ldr	r3, [r7, #12]
 802b450:	2240      	movs	r2, #64	; 0x40
 802b452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802b456:	68fb      	ldr	r3, [r7, #12]
 802b458:	2200      	movs	r2, #0
 802b45a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 802b45c:	68fb      	ldr	r3, [r7, #12]
 802b45e:	6a3a      	ldr	r2, [r7, #32]
 802b460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 802b462:	68fb      	ldr	r3, [r7, #12]
 802b464:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802b466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 802b468:	68fb      	ldr	r3, [r7, #12]
 802b46a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b46c:	b29a      	uxth	r2, r3
 802b46e:	68fb      	ldr	r3, [r7, #12]
 802b470:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802b472:	68fb      	ldr	r3, [r7, #12]
 802b474:	4a1d      	ldr	r2, [pc, #116]	; (802b4ec <HAL_I2C_Mem_Read_IT+0x178>)
 802b476:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 802b478:	897a      	ldrh	r2, [r7, #10]
 802b47a:	68fb      	ldr	r3, [r7, #12]
 802b47c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 802b47e:	893a      	ldrh	r2, [r7, #8]
 802b480:	68fb      	ldr	r3, [r7, #12]
 802b482:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 802b484:	88fa      	ldrh	r2, [r7, #6]
 802b486:	68fb      	ldr	r3, [r7, #12]
 802b488:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 802b48a:	68fb      	ldr	r3, [r7, #12]
 802b48c:	2200      	movs	r2, #0
 802b48e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802b490:	68fb      	ldr	r3, [r7, #12]
 802b492:	681b      	ldr	r3, [r3, #0]
 802b494:	681a      	ldr	r2, [r3, #0]
 802b496:	68fb      	ldr	r3, [r7, #12]
 802b498:	681b      	ldr	r3, [r3, #0]
 802b49a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802b49e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802b4a0:	68fb      	ldr	r3, [r7, #12]
 802b4a2:	681b      	ldr	r3, [r3, #0]
 802b4a4:	681a      	ldr	r2, [r3, #0]
 802b4a6:	68fb      	ldr	r3, [r7, #12]
 802b4a8:	681b      	ldr	r3, [r3, #0]
 802b4aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802b4ae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802b4b0:	68fb      	ldr	r3, [r7, #12]
 802b4b2:	2200      	movs	r2, #0
 802b4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 802b4b8:	68fb      	ldr	r3, [r7, #12]
 802b4ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b4bc:	2b00      	cmp	r3, #0
 802b4be:	d007      	beq.n	802b4d0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802b4c0:	68fb      	ldr	r3, [r7, #12]
 802b4c2:	681b      	ldr	r3, [r3, #0]
 802b4c4:	685a      	ldr	r2, [r3, #4]
 802b4c6:	68fb      	ldr	r3, [r7, #12]
 802b4c8:	681b      	ldr	r3, [r3, #0]
 802b4ca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 802b4ce:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 802b4d0:	2300      	movs	r3, #0
 802b4d2:	e000      	b.n	802b4d6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 802b4d4:	2302      	movs	r3, #2
  }
}
 802b4d6:	4618      	mov	r0, r3
 802b4d8:	371c      	adds	r7, #28
 802b4da:	46bd      	mov	sp, r7
 802b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b4e0:	4770      	bx	lr
 802b4e2:	bf00      	nop
 802b4e4:	200014e4 	.word	0x200014e4
 802b4e8:	14f8b589 	.word	0x14f8b589
 802b4ec:	ffff0000 	.word	0xffff0000

0802b4f0 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 802b4f0:	b580      	push	{r7, lr}
 802b4f2:	b084      	sub	sp, #16
 802b4f4:	af00      	add	r7, sp, #0
 802b4f6:	6078      	str	r0, [r7, #4]
 802b4f8:	460b      	mov	r3, r1
 802b4fa:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 802b4fc:	687b      	ldr	r3, [r7, #4]
 802b4fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802b502:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 802b504:	687b      	ldr	r3, [r7, #4]
 802b506:	681b      	ldr	r3, [r3, #0]
 802b508:	699b      	ldr	r3, [r3, #24]
 802b50a:	f003 0302 	and.w	r3, r3, #2
 802b50e:	2b02      	cmp	r3, #2
 802b510:	d138      	bne.n	802b584 <HAL_I2C_Master_Abort_IT+0x94>
 802b512:	7bfb      	ldrb	r3, [r7, #15]
 802b514:	2b10      	cmp	r3, #16
 802b516:	d135      	bne.n	802b584 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 802b518:	687b      	ldr	r3, [r7, #4]
 802b51a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802b51e:	2b01      	cmp	r3, #1
 802b520:	d101      	bne.n	802b526 <HAL_I2C_Master_Abort_IT+0x36>
 802b522:	2302      	movs	r3, #2
 802b524:	e02f      	b.n	802b586 <HAL_I2C_Master_Abort_IT+0x96>
 802b526:	687b      	ldr	r3, [r7, #4]
 802b528:	2201      	movs	r2, #1
 802b52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 802b52e:	687b      	ldr	r3, [r7, #4]
 802b530:	2200      	movs	r2, #0
 802b532:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 802b534:	687b      	ldr	r3, [r7, #4]
 802b536:	2260      	movs	r2, #96	; 0x60
 802b538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802b53c:	687b      	ldr	r3, [r7, #4]
 802b53e:	681b      	ldr	r3, [r3, #0]
 802b540:	681a      	ldr	r2, [r3, #0]
 802b542:	687b      	ldr	r3, [r7, #4]
 802b544:	681b      	ldr	r3, [r3, #0]
 802b546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802b54a:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802b54c:	687b      	ldr	r3, [r7, #4]
 802b54e:	681b      	ldr	r3, [r3, #0]
 802b550:	681a      	ldr	r2, [r3, #0]
 802b552:	687b      	ldr	r3, [r7, #4]
 802b554:	681b      	ldr	r3, [r3, #0]
 802b556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b55a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 802b55c:	687b      	ldr	r3, [r7, #4]
 802b55e:	2200      	movs	r2, #0
 802b560:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802b562:	687b      	ldr	r3, [r7, #4]
 802b564:	681b      	ldr	r3, [r3, #0]
 802b566:	685a      	ldr	r2, [r3, #4]
 802b568:	687b      	ldr	r3, [r7, #4]
 802b56a:	681b      	ldr	r3, [r3, #0]
 802b56c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802b570:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802b572:	687b      	ldr	r3, [r7, #4]
 802b574:	2200      	movs	r2, #0
 802b576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 802b57a:	6878      	ldr	r0, [r7, #4]
 802b57c:	f001 f936 	bl	802c7ec <I2C_ITError>

    return HAL_OK;
 802b580:	2300      	movs	r3, #0
 802b582:	e000      	b.n	802b586 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 802b584:	2301      	movs	r3, #1
  }
}
 802b586:	4618      	mov	r0, r3
 802b588:	3710      	adds	r7, #16
 802b58a:	46bd      	mov	sp, r7
 802b58c:	bd80      	pop	{r7, pc}

0802b58e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 802b58e:	b580      	push	{r7, lr}
 802b590:	b088      	sub	sp, #32
 802b592:	af00      	add	r7, sp, #0
 802b594:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 802b596:	2300      	movs	r3, #0
 802b598:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 802b59a:	687b      	ldr	r3, [r7, #4]
 802b59c:	681b      	ldr	r3, [r3, #0]
 802b59e:	685b      	ldr	r3, [r3, #4]
 802b5a0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 802b5a2:	687b      	ldr	r3, [r7, #4]
 802b5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b5a6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 802b5a8:	687b      	ldr	r3, [r7, #4]
 802b5aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802b5ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802b5b0:	687b      	ldr	r3, [r7, #4]
 802b5b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802b5b6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 802b5b8:	7bfb      	ldrb	r3, [r7, #15]
 802b5ba:	2b10      	cmp	r3, #16
 802b5bc:	d003      	beq.n	802b5c6 <HAL_I2C_EV_IRQHandler+0x38>
 802b5be:	7bfb      	ldrb	r3, [r7, #15]
 802b5c0:	2b40      	cmp	r3, #64	; 0x40
 802b5c2:	f040 80ad 	bne.w	802b720 <HAL_I2C_EV_IRQHandler+0x192>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 802b5c6:	687b      	ldr	r3, [r7, #4]
 802b5c8:	681b      	ldr	r3, [r3, #0]
 802b5ca:	699b      	ldr	r3, [r3, #24]
 802b5cc:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 802b5ce:	687b      	ldr	r3, [r7, #4]
 802b5d0:	681b      	ldr	r3, [r3, #0]
 802b5d2:	695b      	ldr	r3, [r3, #20]
 802b5d4:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 802b5d6:	69fb      	ldr	r3, [r7, #28]
 802b5d8:	f003 0301 	and.w	r3, r3, #1
 802b5dc:	2b00      	cmp	r3, #0
 802b5de:	d10d      	bne.n	802b5fc <HAL_I2C_EV_IRQHandler+0x6e>
 802b5e0:	693b      	ldr	r3, [r7, #16]
 802b5e2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 802b5e6:	d003      	beq.n	802b5f0 <HAL_I2C_EV_IRQHandler+0x62>
 802b5e8:	693b      	ldr	r3, [r7, #16]
 802b5ea:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 802b5ee:	d101      	bne.n	802b5f4 <HAL_I2C_EV_IRQHandler+0x66>
 802b5f0:	2301      	movs	r3, #1
 802b5f2:	e000      	b.n	802b5f6 <HAL_I2C_EV_IRQHandler+0x68>
 802b5f4:	2300      	movs	r3, #0
 802b5f6:	2b01      	cmp	r3, #1
 802b5f8:	f000 8110 	beq.w	802b81c <HAL_I2C_EV_IRQHandler+0x28e>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b5fc:	69fb      	ldr	r3, [r7, #28]
 802b5fe:	f003 0301 	and.w	r3, r3, #1
 802b602:	2b00      	cmp	r3, #0
 802b604:	d00b      	beq.n	802b61e <HAL_I2C_EV_IRQHandler+0x90>
 802b606:	697b      	ldr	r3, [r7, #20]
 802b608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b60c:	2b00      	cmp	r3, #0
 802b60e:	d006      	beq.n	802b61e <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 802b610:	6878      	ldr	r0, [r7, #4]
 802b612:	f001 fe24 	bl	802d25e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 802b616:	6878      	ldr	r0, [r7, #4]
 802b618:	f000 fc76 	bl	802bf08 <I2C_Master_SB>
 802b61c:	e07f      	b.n	802b71e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b61e:	69fb      	ldr	r3, [r7, #28]
 802b620:	f003 0308 	and.w	r3, r3, #8
 802b624:	2b00      	cmp	r3, #0
 802b626:	d008      	beq.n	802b63a <HAL_I2C_EV_IRQHandler+0xac>
 802b628:	697b      	ldr	r3, [r7, #20]
 802b62a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b62e:	2b00      	cmp	r3, #0
 802b630:	d003      	beq.n	802b63a <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 802b632:	6878      	ldr	r0, [r7, #4]
 802b634:	f000 fcee 	bl	802c014 <I2C_Master_ADD10>
 802b638:	e071      	b.n	802b71e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b63a:	69fb      	ldr	r3, [r7, #28]
 802b63c:	f003 0302 	and.w	r3, r3, #2
 802b640:	2b00      	cmp	r3, #0
 802b642:	d008      	beq.n	802b656 <HAL_I2C_EV_IRQHandler+0xc8>
 802b644:	697b      	ldr	r3, [r7, #20]
 802b646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b64a:	2b00      	cmp	r3, #0
 802b64c:	d003      	beq.n	802b656 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 802b64e:	6878      	ldr	r0, [r7, #4]
 802b650:	f000 fd0a 	bl	802c068 <I2C_Master_ADDR>
 802b654:	e063      	b.n	802b71e <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 802b656:	69bb      	ldr	r3, [r7, #24]
 802b658:	f003 0304 	and.w	r3, r3, #4
 802b65c:	2b00      	cmp	r3, #0
 802b65e:	d032      	beq.n	802b6c6 <HAL_I2C_EV_IRQHandler+0x138>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 802b660:	687b      	ldr	r3, [r7, #4]
 802b662:	681b      	ldr	r3, [r3, #0]
 802b664:	685b      	ldr	r3, [r3, #4]
 802b666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802b66a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802b66e:	f000 80d7 	beq.w	802b820 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802b672:	69fb      	ldr	r3, [r7, #28]
 802b674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b678:	2b00      	cmp	r3, #0
 802b67a:	d00d      	beq.n	802b698 <HAL_I2C_EV_IRQHandler+0x10a>
 802b67c:	697b      	ldr	r3, [r7, #20]
 802b67e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802b682:	2b00      	cmp	r3, #0
 802b684:	d008      	beq.n	802b698 <HAL_I2C_EV_IRQHandler+0x10a>
 802b686:	69fb      	ldr	r3, [r7, #28]
 802b688:	f003 0304 	and.w	r3, r3, #4
 802b68c:	2b00      	cmp	r3, #0
 802b68e:	d103      	bne.n	802b698 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 802b690:	6878      	ldr	r0, [r7, #4]
 802b692:	f000 f90b 	bl	802b8ac <I2C_MasterTransmit_TXE>
 802b696:	e042      	b.n	802b71e <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b698:	69fb      	ldr	r3, [r7, #28]
 802b69a:	f003 0304 	and.w	r3, r3, #4
 802b69e:	2b00      	cmp	r3, #0
 802b6a0:	f000 80be 	beq.w	802b820 <HAL_I2C_EV_IRQHandler+0x292>
 802b6a4:	697b      	ldr	r3, [r7, #20]
 802b6a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b6aa:	2b00      	cmp	r3, #0
 802b6ac:	f000 80b8 	beq.w	802b820 <HAL_I2C_EV_IRQHandler+0x292>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 802b6b0:	7bfb      	ldrb	r3, [r7, #15]
 802b6b2:	2b10      	cmp	r3, #16
 802b6b4:	d103      	bne.n	802b6be <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 802b6b6:	6878      	ldr	r0, [r7, #4]
 802b6b8:	f000 f994 	bl	802b9e4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b6bc:	e0b0      	b.n	802b820 <HAL_I2C_EV_IRQHandler+0x292>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 802b6be:	6878      	ldr	r0, [r7, #4]
 802b6c0:	f000 f9f8 	bl	802bab4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b6c4:	e0ac      	b.n	802b820 <HAL_I2C_EV_IRQHandler+0x292>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 802b6c6:	687b      	ldr	r3, [r7, #4]
 802b6c8:	681b      	ldr	r3, [r3, #0]
 802b6ca:	685b      	ldr	r3, [r3, #4]
 802b6cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802b6d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802b6d4:	f000 80a4 	beq.w	802b820 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802b6d8:	69fb      	ldr	r3, [r7, #28]
 802b6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b6de:	2b00      	cmp	r3, #0
 802b6e0:	d00d      	beq.n	802b6fe <HAL_I2C_EV_IRQHandler+0x170>
 802b6e2:	697b      	ldr	r3, [r7, #20]
 802b6e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802b6e8:	2b00      	cmp	r3, #0
 802b6ea:	d008      	beq.n	802b6fe <HAL_I2C_EV_IRQHandler+0x170>
 802b6ec:	69fb      	ldr	r3, [r7, #28]
 802b6ee:	f003 0304 	and.w	r3, r3, #4
 802b6f2:	2b00      	cmp	r3, #0
 802b6f4:	d103      	bne.n	802b6fe <HAL_I2C_EV_IRQHandler+0x170>
        {
          I2C_MasterReceive_RXNE(hi2c);
 802b6f6:	6878      	ldr	r0, [r7, #4]
 802b6f8:	f000 fa6b 	bl	802bbd2 <I2C_MasterReceive_RXNE>
 802b6fc:	e00f      	b.n	802b71e <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b6fe:	69fb      	ldr	r3, [r7, #28]
 802b700:	f003 0304 	and.w	r3, r3, #4
 802b704:	2b00      	cmp	r3, #0
 802b706:	f000 808b 	beq.w	802b820 <HAL_I2C_EV_IRQHandler+0x292>
 802b70a:	697b      	ldr	r3, [r7, #20]
 802b70c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b710:	2b00      	cmp	r3, #0
 802b712:	f000 8085 	beq.w	802b820 <HAL_I2C_EV_IRQHandler+0x292>
        {
          I2C_MasterReceive_BTF(hi2c);
 802b716:	6878      	ldr	r0, [r7, #4]
 802b718:	f000 fb0c 	bl	802bd34 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b71c:	e080      	b.n	802b820 <HAL_I2C_EV_IRQHandler+0x292>
 802b71e:	e07f      	b.n	802b820 <HAL_I2C_EV_IRQHandler+0x292>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802b720:	687b      	ldr	r3, [r7, #4]
 802b722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b724:	2b00      	cmp	r3, #0
 802b726:	d004      	beq.n	802b732 <HAL_I2C_EV_IRQHandler+0x1a4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 802b728:	687b      	ldr	r3, [r7, #4]
 802b72a:	681b      	ldr	r3, [r3, #0]
 802b72c:	695b      	ldr	r3, [r3, #20]
 802b72e:	61fb      	str	r3, [r7, #28]
 802b730:	e007      	b.n	802b742 <HAL_I2C_EV_IRQHandler+0x1b4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 802b732:	687b      	ldr	r3, [r7, #4]
 802b734:	681b      	ldr	r3, [r3, #0]
 802b736:	699b      	ldr	r3, [r3, #24]
 802b738:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 802b73a:	687b      	ldr	r3, [r7, #4]
 802b73c:	681b      	ldr	r3, [r3, #0]
 802b73e:	695b      	ldr	r3, [r3, #20]
 802b740:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b742:	69fb      	ldr	r3, [r7, #28]
 802b744:	f003 0302 	and.w	r3, r3, #2
 802b748:	2b00      	cmp	r3, #0
 802b74a:	d011      	beq.n	802b770 <HAL_I2C_EV_IRQHandler+0x1e2>
 802b74c:	697b      	ldr	r3, [r7, #20]
 802b74e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b752:	2b00      	cmp	r3, #0
 802b754:	d00c      	beq.n	802b770 <HAL_I2C_EV_IRQHandler+0x1e2>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802b756:	687b      	ldr	r3, [r7, #4]
 802b758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b75a:	2b00      	cmp	r3, #0
 802b75c:	d003      	beq.n	802b766 <HAL_I2C_EV_IRQHandler+0x1d8>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 802b75e:	687b      	ldr	r3, [r7, #4]
 802b760:	681b      	ldr	r3, [r3, #0]
 802b762:	699b      	ldr	r3, [r3, #24]
 802b764:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 802b766:	69b9      	ldr	r1, [r7, #24]
 802b768:	6878      	ldr	r0, [r7, #4]
 802b76a:	f000 fecc 	bl	802c506 <I2C_Slave_ADDR>
 802b76e:	e05a      	b.n	802b826 <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b770:	69fb      	ldr	r3, [r7, #28]
 802b772:	f003 0310 	and.w	r3, r3, #16
 802b776:	2b00      	cmp	r3, #0
 802b778:	d008      	beq.n	802b78c <HAL_I2C_EV_IRQHandler+0x1fe>
 802b77a:	697b      	ldr	r3, [r7, #20]
 802b77c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b780:	2b00      	cmp	r3, #0
 802b782:	d003      	beq.n	802b78c <HAL_I2C_EV_IRQHandler+0x1fe>
    {
      I2C_Slave_STOPF(hi2c);
 802b784:	6878      	ldr	r0, [r7, #4]
 802b786:	f000 ff01 	bl	802c58c <I2C_Slave_STOPF>
 802b78a:	e04c      	b.n	802b826 <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802b78c:	7bbb      	ldrb	r3, [r7, #14]
 802b78e:	2b21      	cmp	r3, #33	; 0x21
 802b790:	d002      	beq.n	802b798 <HAL_I2C_EV_IRQHandler+0x20a>
 802b792:	7bbb      	ldrb	r3, [r7, #14]
 802b794:	2b29      	cmp	r3, #41	; 0x29
 802b796:	d120      	bne.n	802b7da <HAL_I2C_EV_IRQHandler+0x24c>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802b798:	69fb      	ldr	r3, [r7, #28]
 802b79a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b79e:	2b00      	cmp	r3, #0
 802b7a0:	d00d      	beq.n	802b7be <HAL_I2C_EV_IRQHandler+0x230>
 802b7a2:	697b      	ldr	r3, [r7, #20]
 802b7a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802b7a8:	2b00      	cmp	r3, #0
 802b7aa:	d008      	beq.n	802b7be <HAL_I2C_EV_IRQHandler+0x230>
 802b7ac:	69fb      	ldr	r3, [r7, #28]
 802b7ae:	f003 0304 	and.w	r3, r3, #4
 802b7b2:	2b00      	cmp	r3, #0
 802b7b4:	d103      	bne.n	802b7be <HAL_I2C_EV_IRQHandler+0x230>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 802b7b6:	6878      	ldr	r0, [r7, #4]
 802b7b8:	f000 fde7 	bl	802c38a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802b7bc:	e032      	b.n	802b824 <HAL_I2C_EV_IRQHandler+0x296>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b7be:	69fb      	ldr	r3, [r7, #28]
 802b7c0:	f003 0304 	and.w	r3, r3, #4
 802b7c4:	2b00      	cmp	r3, #0
 802b7c6:	d02d      	beq.n	802b824 <HAL_I2C_EV_IRQHandler+0x296>
 802b7c8:	697b      	ldr	r3, [r7, #20]
 802b7ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b7ce:	2b00      	cmp	r3, #0
 802b7d0:	d028      	beq.n	802b824 <HAL_I2C_EV_IRQHandler+0x296>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 802b7d2:	6878      	ldr	r0, [r7, #4]
 802b7d4:	f000 fe16 	bl	802c404 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802b7d8:	e024      	b.n	802b824 <HAL_I2C_EV_IRQHandler+0x296>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802b7da:	69fb      	ldr	r3, [r7, #28]
 802b7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802b7e0:	2b00      	cmp	r3, #0
 802b7e2:	d00d      	beq.n	802b800 <HAL_I2C_EV_IRQHandler+0x272>
 802b7e4:	697b      	ldr	r3, [r7, #20]
 802b7e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802b7ea:	2b00      	cmp	r3, #0
 802b7ec:	d008      	beq.n	802b800 <HAL_I2C_EV_IRQHandler+0x272>
 802b7ee:	69fb      	ldr	r3, [r7, #28]
 802b7f0:	f003 0304 	and.w	r3, r3, #4
 802b7f4:	2b00      	cmp	r3, #0
 802b7f6:	d103      	bne.n	802b800 <HAL_I2C_EV_IRQHandler+0x272>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 802b7f8:	6878      	ldr	r0, [r7, #4]
 802b7fa:	f000 fe24 	bl	802c446 <I2C_SlaveReceive_RXNE>
 802b7fe:	e012      	b.n	802b826 <HAL_I2C_EV_IRQHandler+0x298>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b800:	69fb      	ldr	r3, [r7, #28]
 802b802:	f003 0304 	and.w	r3, r3, #4
 802b806:	2b00      	cmp	r3, #0
 802b808:	d00d      	beq.n	802b826 <HAL_I2C_EV_IRQHandler+0x298>
 802b80a:	697b      	ldr	r3, [r7, #20]
 802b80c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802b810:	2b00      	cmp	r3, #0
 802b812:	d008      	beq.n	802b826 <HAL_I2C_EV_IRQHandler+0x298>
      {
        I2C_SlaveReceive_BTF(hi2c);
 802b814:	6878      	ldr	r0, [r7, #4]
 802b816:	f000 fe54 	bl	802c4c2 <I2C_SlaveReceive_BTF>
 802b81a:	e004      	b.n	802b826 <HAL_I2C_EV_IRQHandler+0x298>
      return;
 802b81c:	bf00      	nop
 802b81e:	e002      	b.n	802b826 <HAL_I2C_EV_IRQHandler+0x298>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 802b820:	bf00      	nop
 802b822:	e000      	b.n	802b826 <HAL_I2C_EV_IRQHandler+0x298>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 802b824:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 802b826:	3720      	adds	r7, #32
 802b828:	46bd      	mov	sp, r7
 802b82a:	bd80      	pop	{r7, pc}

0802b82c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802b82c:	b480      	push	{r7}
 802b82e:	b083      	sub	sp, #12
 802b830:	af00      	add	r7, sp, #0
 802b832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 802b834:	bf00      	nop
 802b836:	370c      	adds	r7, #12
 802b838:	46bd      	mov	sp, r7
 802b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b83e:	4770      	bx	lr

0802b840 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802b840:	b480      	push	{r7}
 802b842:	b083      	sub	sp, #12
 802b844:	af00      	add	r7, sp, #0
 802b846:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 802b848:	bf00      	nop
 802b84a:	370c      	adds	r7, #12
 802b84c:	46bd      	mov	sp, r7
 802b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b852:	4770      	bx	lr

0802b854 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 802b854:	b480      	push	{r7}
 802b856:	b083      	sub	sp, #12
 802b858:	af00      	add	r7, sp, #0
 802b85a:	6078      	str	r0, [r7, #4]
 802b85c:	460b      	mov	r3, r1
 802b85e:	70fb      	strb	r3, [r7, #3]
 802b860:	4613      	mov	r3, r2
 802b862:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 802b864:	bf00      	nop
 802b866:	370c      	adds	r7, #12
 802b868:	46bd      	mov	sp, r7
 802b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b86e:	4770      	bx	lr

0802b870 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802b870:	b480      	push	{r7}
 802b872:	b083      	sub	sp, #12
 802b874:	af00      	add	r7, sp, #0
 802b876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 802b878:	bf00      	nop
 802b87a:	370c      	adds	r7, #12
 802b87c:	46bd      	mov	sp, r7
 802b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b882:	4770      	bx	lr

0802b884 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 802b884:	b480      	push	{r7}
 802b886:	b083      	sub	sp, #12
 802b888:	af00      	add	r7, sp, #0
 802b88a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 802b88c:	bf00      	nop
 802b88e:	370c      	adds	r7, #12
 802b890:	46bd      	mov	sp, r7
 802b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b896:	4770      	bx	lr

0802b898 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802b898:	b480      	push	{r7}
 802b89a:	b083      	sub	sp, #12
 802b89c:	af00      	add	r7, sp, #0
 802b89e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 802b8a0:	bf00      	nop
 802b8a2:	370c      	adds	r7, #12
 802b8a4:	46bd      	mov	sp, r7
 802b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8aa:	4770      	bx	lr

0802b8ac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 802b8ac:	b580      	push	{r7, lr}
 802b8ae:	b084      	sub	sp, #16
 802b8b0:	af00      	add	r7, sp, #0
 802b8b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802b8b4:	687b      	ldr	r3, [r7, #4]
 802b8b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802b8ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 802b8bc:	687b      	ldr	r3, [r7, #4]
 802b8be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802b8c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 802b8c4:	687b      	ldr	r3, [r7, #4]
 802b8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b8c8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 802b8ca:	687b      	ldr	r3, [r7, #4]
 802b8cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802b8ce:	2b00      	cmp	r3, #0
 802b8d0:	d150      	bne.n	802b974 <I2C_MasterTransmit_TXE+0xc8>
 802b8d2:	7bfb      	ldrb	r3, [r7, #15]
 802b8d4:	2b21      	cmp	r3, #33	; 0x21
 802b8d6:	d14d      	bne.n	802b974 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802b8d8:	68bb      	ldr	r3, [r7, #8]
 802b8da:	2b08      	cmp	r3, #8
 802b8dc:	d01d      	beq.n	802b91a <I2C_MasterTransmit_TXE+0x6e>
 802b8de:	68bb      	ldr	r3, [r7, #8]
 802b8e0:	2b20      	cmp	r3, #32
 802b8e2:	d01a      	beq.n	802b91a <I2C_MasterTransmit_TXE+0x6e>
 802b8e4:	68bb      	ldr	r3, [r7, #8]
 802b8e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802b8ea:	d016      	beq.n	802b91a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802b8ec:	687b      	ldr	r3, [r7, #4]
 802b8ee:	681b      	ldr	r3, [r3, #0]
 802b8f0:	685a      	ldr	r2, [r3, #4]
 802b8f2:	687b      	ldr	r3, [r7, #4]
 802b8f4:	681b      	ldr	r3, [r3, #0]
 802b8f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802b8fa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 802b8fc:	687b      	ldr	r3, [r7, #4]
 802b8fe:	2211      	movs	r2, #17
 802b900:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802b902:	687b      	ldr	r3, [r7, #4]
 802b904:	2200      	movs	r2, #0
 802b906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 802b90a:	687b      	ldr	r3, [r7, #4]
 802b90c:	2220      	movs	r2, #32
 802b90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 802b912:	6878      	ldr	r0, [r7, #4]
 802b914:	f00b f9ca 	bl	8036cac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802b918:	e060      	b.n	802b9dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802b91a:	687b      	ldr	r3, [r7, #4]
 802b91c:	681b      	ldr	r3, [r3, #0]
 802b91e:	685a      	ldr	r2, [r3, #4]
 802b920:	687b      	ldr	r3, [r7, #4]
 802b922:	681b      	ldr	r3, [r3, #0]
 802b924:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802b928:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802b92a:	687b      	ldr	r3, [r7, #4]
 802b92c:	681b      	ldr	r3, [r3, #0]
 802b92e:	681a      	ldr	r2, [r3, #0]
 802b930:	687b      	ldr	r3, [r7, #4]
 802b932:	681b      	ldr	r3, [r3, #0]
 802b934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b938:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 802b93a:	687b      	ldr	r3, [r7, #4]
 802b93c:	2200      	movs	r2, #0
 802b93e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 802b940:	687b      	ldr	r3, [r7, #4]
 802b942:	2220      	movs	r2, #32
 802b944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802b948:	687b      	ldr	r3, [r7, #4]
 802b94a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802b94e:	b2db      	uxtb	r3, r3
 802b950:	2b40      	cmp	r3, #64	; 0x40
 802b952:	d107      	bne.n	802b964 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802b954:	687b      	ldr	r3, [r7, #4]
 802b956:	2200      	movs	r2, #0
 802b958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 802b95c:	6878      	ldr	r0, [r7, #4]
 802b95e:	f00b f9c7 	bl	8036cf0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802b962:	e03b      	b.n	802b9dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802b964:	687b      	ldr	r3, [r7, #4]
 802b966:	2200      	movs	r2, #0
 802b968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 802b96c:	6878      	ldr	r0, [r7, #4]
 802b96e:	f00b f99d 	bl	8036cac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802b972:	e033      	b.n	802b9dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 802b974:	7bfb      	ldrb	r3, [r7, #15]
 802b976:	2b21      	cmp	r3, #33	; 0x21
 802b978:	d005      	beq.n	802b986 <I2C_MasterTransmit_TXE+0xda>
 802b97a:	7bbb      	ldrb	r3, [r7, #14]
 802b97c:	2b40      	cmp	r3, #64	; 0x40
 802b97e:	d12d      	bne.n	802b9dc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 802b980:	7bfb      	ldrb	r3, [r7, #15]
 802b982:	2b22      	cmp	r3, #34	; 0x22
 802b984:	d12a      	bne.n	802b9dc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 802b986:	687b      	ldr	r3, [r7, #4]
 802b988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b98a:	b29b      	uxth	r3, r3
 802b98c:	2b00      	cmp	r3, #0
 802b98e:	d108      	bne.n	802b9a2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802b990:	687b      	ldr	r3, [r7, #4]
 802b992:	681b      	ldr	r3, [r3, #0]
 802b994:	685a      	ldr	r2, [r3, #4]
 802b996:	687b      	ldr	r3, [r7, #4]
 802b998:	681b      	ldr	r3, [r3, #0]
 802b99a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802b99e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 802b9a0:	e01c      	b.n	802b9dc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802b9a2:	687b      	ldr	r3, [r7, #4]
 802b9a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802b9a8:	b2db      	uxtb	r3, r3
 802b9aa:	2b40      	cmp	r3, #64	; 0x40
 802b9ac:	d103      	bne.n	802b9b6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 802b9ae:	6878      	ldr	r0, [r7, #4]
 802b9b0:	f000 f880 	bl	802bab4 <I2C_MemoryTransmit_TXE_BTF>
}
 802b9b4:	e012      	b.n	802b9dc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 802b9b6:	687b      	ldr	r3, [r7, #4]
 802b9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b9ba:	781a      	ldrb	r2, [r3, #0]
 802b9bc:	687b      	ldr	r3, [r7, #4]
 802b9be:	681b      	ldr	r3, [r3, #0]
 802b9c0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 802b9c2:	687b      	ldr	r3, [r7, #4]
 802b9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b9c6:	1c5a      	adds	r2, r3, #1
 802b9c8:	687b      	ldr	r3, [r7, #4]
 802b9ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 802b9cc:	687b      	ldr	r3, [r7, #4]
 802b9ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802b9d0:	b29b      	uxth	r3, r3
 802b9d2:	3b01      	subs	r3, #1
 802b9d4:	b29a      	uxth	r2, r3
 802b9d6:	687b      	ldr	r3, [r7, #4]
 802b9d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 802b9da:	e7ff      	b.n	802b9dc <I2C_MasterTransmit_TXE+0x130>
 802b9dc:	bf00      	nop
 802b9de:	3710      	adds	r7, #16
 802b9e0:	46bd      	mov	sp, r7
 802b9e2:	bd80      	pop	{r7, pc}

0802b9e4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 802b9e4:	b580      	push	{r7, lr}
 802b9e6:	b084      	sub	sp, #16
 802b9e8:	af00      	add	r7, sp, #0
 802b9ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 802b9ec:	687b      	ldr	r3, [r7, #4]
 802b9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b9f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 802b9f2:	687b      	ldr	r3, [r7, #4]
 802b9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802b9f8:	b2db      	uxtb	r3, r3
 802b9fa:	2b21      	cmp	r3, #33	; 0x21
 802b9fc:	d156      	bne.n	802baac <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 802b9fe:	687b      	ldr	r3, [r7, #4]
 802ba00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ba02:	b29b      	uxth	r3, r3
 802ba04:	2b00      	cmp	r3, #0
 802ba06:	d012      	beq.n	802ba2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802ba08:	687b      	ldr	r3, [r7, #4]
 802ba0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ba0c:	781a      	ldrb	r2, [r3, #0]
 802ba0e:	687b      	ldr	r3, [r7, #4]
 802ba10:	681b      	ldr	r3, [r3, #0]
 802ba12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802ba14:	687b      	ldr	r3, [r7, #4]
 802ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802ba18:	1c5a      	adds	r2, r3, #1
 802ba1a:	687b      	ldr	r3, [r7, #4]
 802ba1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 802ba1e:	687b      	ldr	r3, [r7, #4]
 802ba20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802ba22:	b29b      	uxth	r3, r3
 802ba24:	3b01      	subs	r3, #1
 802ba26:	b29a      	uxth	r2, r3
 802ba28:	687b      	ldr	r3, [r7, #4]
 802ba2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 802ba2c:	e03e      	b.n	802baac <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 802ba2e:	68fb      	ldr	r3, [r7, #12]
 802ba30:	2b08      	cmp	r3, #8
 802ba32:	d01d      	beq.n	802ba70 <I2C_MasterTransmit_BTF+0x8c>
 802ba34:	68fb      	ldr	r3, [r7, #12]
 802ba36:	2b20      	cmp	r3, #32
 802ba38:	d01a      	beq.n	802ba70 <I2C_MasterTransmit_BTF+0x8c>
 802ba3a:	68fb      	ldr	r3, [r7, #12]
 802ba3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802ba40:	d016      	beq.n	802ba70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802ba42:	687b      	ldr	r3, [r7, #4]
 802ba44:	681b      	ldr	r3, [r3, #0]
 802ba46:	685a      	ldr	r2, [r3, #4]
 802ba48:	687b      	ldr	r3, [r7, #4]
 802ba4a:	681b      	ldr	r3, [r3, #0]
 802ba4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802ba50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 802ba52:	687b      	ldr	r3, [r7, #4]
 802ba54:	2211      	movs	r2, #17
 802ba56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802ba58:	687b      	ldr	r3, [r7, #4]
 802ba5a:	2200      	movs	r2, #0
 802ba5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 802ba60:	687b      	ldr	r3, [r7, #4]
 802ba62:	2220      	movs	r2, #32
 802ba64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 802ba68:	6878      	ldr	r0, [r7, #4]
 802ba6a:	f00b f91f 	bl	8036cac <HAL_I2C_MasterTxCpltCallback>
}
 802ba6e:	e01d      	b.n	802baac <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802ba70:	687b      	ldr	r3, [r7, #4]
 802ba72:	681b      	ldr	r3, [r3, #0]
 802ba74:	685a      	ldr	r2, [r3, #4]
 802ba76:	687b      	ldr	r3, [r7, #4]
 802ba78:	681b      	ldr	r3, [r3, #0]
 802ba7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802ba7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802ba80:	687b      	ldr	r3, [r7, #4]
 802ba82:	681b      	ldr	r3, [r3, #0]
 802ba84:	681a      	ldr	r2, [r3, #0]
 802ba86:	687b      	ldr	r3, [r7, #4]
 802ba88:	681b      	ldr	r3, [r3, #0]
 802ba8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ba8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 802ba90:	687b      	ldr	r3, [r7, #4]
 802ba92:	2200      	movs	r2, #0
 802ba94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 802ba96:	687b      	ldr	r3, [r7, #4]
 802ba98:	2220      	movs	r2, #32
 802ba9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802ba9e:	687b      	ldr	r3, [r7, #4]
 802baa0:	2200      	movs	r2, #0
 802baa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 802baa6:	6878      	ldr	r0, [r7, #4]
 802baa8:	f00b f900 	bl	8036cac <HAL_I2C_MasterTxCpltCallback>
}
 802baac:	bf00      	nop
 802baae:	3710      	adds	r7, #16
 802bab0:	46bd      	mov	sp, r7
 802bab2:	bd80      	pop	{r7, pc}

0802bab4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 802bab4:	b580      	push	{r7, lr}
 802bab6:	b084      	sub	sp, #16
 802bab8:	af00      	add	r7, sp, #0
 802baba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802babc:	687b      	ldr	r3, [r7, #4]
 802babe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bac2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 802bac4:	687b      	ldr	r3, [r7, #4]
 802bac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802bac8:	2b00      	cmp	r3, #0
 802baca:	d11d      	bne.n	802bb08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 802bacc:	687b      	ldr	r3, [r7, #4]
 802bace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802bad0:	2b01      	cmp	r3, #1
 802bad2:	d10b      	bne.n	802baec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 802bad4:	687b      	ldr	r3, [r7, #4]
 802bad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bad8:	b2da      	uxtb	r2, r3
 802bada:	687b      	ldr	r3, [r7, #4]
 802badc:	681b      	ldr	r3, [r3, #0]
 802bade:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 802bae0:	687b      	ldr	r3, [r7, #4]
 802bae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802bae4:	1c9a      	adds	r2, r3, #2
 802bae6:	687b      	ldr	r3, [r7, #4]
 802bae8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 802baea:	e06e      	b.n	802bbca <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 802baec:	687b      	ldr	r3, [r7, #4]
 802baee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802baf0:	b29b      	uxth	r3, r3
 802baf2:	121b      	asrs	r3, r3, #8
 802baf4:	b2da      	uxtb	r2, r3
 802baf6:	687b      	ldr	r3, [r7, #4]
 802baf8:	681b      	ldr	r3, [r3, #0]
 802bafa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 802bafc:	687b      	ldr	r3, [r7, #4]
 802bafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802bb00:	1c5a      	adds	r2, r3, #1
 802bb02:	687b      	ldr	r3, [r7, #4]
 802bb04:	651a      	str	r2, [r3, #80]	; 0x50
}
 802bb06:	e060      	b.n	802bbca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 802bb08:	687b      	ldr	r3, [r7, #4]
 802bb0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802bb0c:	2b01      	cmp	r3, #1
 802bb0e:	d10b      	bne.n	802bb28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 802bb10:	687b      	ldr	r3, [r7, #4]
 802bb12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bb14:	b2da      	uxtb	r2, r3
 802bb16:	687b      	ldr	r3, [r7, #4]
 802bb18:	681b      	ldr	r3, [r3, #0]
 802bb1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 802bb1c:	687b      	ldr	r3, [r7, #4]
 802bb1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802bb20:	1c5a      	adds	r2, r3, #1
 802bb22:	687b      	ldr	r3, [r7, #4]
 802bb24:	651a      	str	r2, [r3, #80]	; 0x50
}
 802bb26:	e050      	b.n	802bbca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 802bb28:	687b      	ldr	r3, [r7, #4]
 802bb2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802bb2c:	2b02      	cmp	r3, #2
 802bb2e:	d14c      	bne.n	802bbca <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 802bb30:	7bfb      	ldrb	r3, [r7, #15]
 802bb32:	2b22      	cmp	r3, #34	; 0x22
 802bb34:	d108      	bne.n	802bb48 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 802bb36:	687b      	ldr	r3, [r7, #4]
 802bb38:	681b      	ldr	r3, [r3, #0]
 802bb3a:	681a      	ldr	r2, [r3, #0]
 802bb3c:	687b      	ldr	r3, [r7, #4]
 802bb3e:	681b      	ldr	r3, [r3, #0]
 802bb40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802bb44:	601a      	str	r2, [r3, #0]
}
 802bb46:	e040      	b.n	802bbca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 802bb48:	687b      	ldr	r3, [r7, #4]
 802bb4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bb4c:	b29b      	uxth	r3, r3
 802bb4e:	2b00      	cmp	r3, #0
 802bb50:	d015      	beq.n	802bb7e <I2C_MemoryTransmit_TXE_BTF+0xca>
 802bb52:	7bfb      	ldrb	r3, [r7, #15]
 802bb54:	2b21      	cmp	r3, #33	; 0x21
 802bb56:	d112      	bne.n	802bb7e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 802bb58:	687b      	ldr	r3, [r7, #4]
 802bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bb5c:	781a      	ldrb	r2, [r3, #0]
 802bb5e:	687b      	ldr	r3, [r7, #4]
 802bb60:	681b      	ldr	r3, [r3, #0]
 802bb62:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 802bb64:	687b      	ldr	r3, [r7, #4]
 802bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bb68:	1c5a      	adds	r2, r3, #1
 802bb6a:	687b      	ldr	r3, [r7, #4]
 802bb6c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 802bb6e:	687b      	ldr	r3, [r7, #4]
 802bb70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bb72:	b29b      	uxth	r3, r3
 802bb74:	3b01      	subs	r3, #1
 802bb76:	b29a      	uxth	r2, r3
 802bb78:	687b      	ldr	r3, [r7, #4]
 802bb7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 802bb7c:	e025      	b.n	802bbca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 802bb7e:	687b      	ldr	r3, [r7, #4]
 802bb80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bb82:	b29b      	uxth	r3, r3
 802bb84:	2b00      	cmp	r3, #0
 802bb86:	d120      	bne.n	802bbca <I2C_MemoryTransmit_TXE_BTF+0x116>
 802bb88:	7bfb      	ldrb	r3, [r7, #15]
 802bb8a:	2b21      	cmp	r3, #33	; 0x21
 802bb8c:	d11d      	bne.n	802bbca <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802bb8e:	687b      	ldr	r3, [r7, #4]
 802bb90:	681b      	ldr	r3, [r3, #0]
 802bb92:	685a      	ldr	r2, [r3, #4]
 802bb94:	687b      	ldr	r3, [r7, #4]
 802bb96:	681b      	ldr	r3, [r3, #0]
 802bb98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802bb9c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802bb9e:	687b      	ldr	r3, [r7, #4]
 802bba0:	681b      	ldr	r3, [r3, #0]
 802bba2:	681a      	ldr	r2, [r3, #0]
 802bba4:	687b      	ldr	r3, [r7, #4]
 802bba6:	681b      	ldr	r3, [r3, #0]
 802bba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802bbac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 802bbae:	687b      	ldr	r3, [r7, #4]
 802bbb0:	2200      	movs	r2, #0
 802bbb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 802bbb4:	687b      	ldr	r3, [r7, #4]
 802bbb6:	2220      	movs	r2, #32
 802bbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802bbbc:	687b      	ldr	r3, [r7, #4]
 802bbbe:	2200      	movs	r2, #0
 802bbc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 802bbc4:	6878      	ldr	r0, [r7, #4]
 802bbc6:	f00b f893 	bl	8036cf0 <HAL_I2C_MemTxCpltCallback>
}
 802bbca:	bf00      	nop
 802bbcc:	3710      	adds	r7, #16
 802bbce:	46bd      	mov	sp, r7
 802bbd0:	bd80      	pop	{r7, pc}

0802bbd2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 802bbd2:	b580      	push	{r7, lr}
 802bbd4:	b084      	sub	sp, #16
 802bbd6:	af00      	add	r7, sp, #0
 802bbd8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 802bbda:	687b      	ldr	r3, [r7, #4]
 802bbdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bbe0:	b2db      	uxtb	r3, r3
 802bbe2:	2b22      	cmp	r3, #34	; 0x22
 802bbe4:	f040 80a2 	bne.w	802bd2c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 802bbe8:	687b      	ldr	r3, [r7, #4]
 802bbea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bbec:	b29b      	uxth	r3, r3
 802bbee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 802bbf0:	68fb      	ldr	r3, [r7, #12]
 802bbf2:	2b03      	cmp	r3, #3
 802bbf4:	d921      	bls.n	802bc3a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802bbf6:	687b      	ldr	r3, [r7, #4]
 802bbf8:	681b      	ldr	r3, [r3, #0]
 802bbfa:	691a      	ldr	r2, [r3, #16]
 802bbfc:	687b      	ldr	r3, [r7, #4]
 802bbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bc00:	b2d2      	uxtb	r2, r2
 802bc02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802bc04:	687b      	ldr	r3, [r7, #4]
 802bc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bc08:	1c5a      	adds	r2, r3, #1
 802bc0a:	687b      	ldr	r3, [r7, #4]
 802bc0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 802bc0e:	687b      	ldr	r3, [r7, #4]
 802bc10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bc12:	b29b      	uxth	r3, r3
 802bc14:	3b01      	subs	r3, #1
 802bc16:	b29a      	uxth	r2, r3
 802bc18:	687b      	ldr	r3, [r7, #4]
 802bc1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 802bc1c:	687b      	ldr	r3, [r7, #4]
 802bc1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bc20:	b29b      	uxth	r3, r3
 802bc22:	2b03      	cmp	r3, #3
 802bc24:	f040 8082 	bne.w	802bd2c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802bc28:	687b      	ldr	r3, [r7, #4]
 802bc2a:	681b      	ldr	r3, [r3, #0]
 802bc2c:	685a      	ldr	r2, [r3, #4]
 802bc2e:	687b      	ldr	r3, [r7, #4]
 802bc30:	681b      	ldr	r3, [r3, #0]
 802bc32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802bc36:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 802bc38:	e078      	b.n	802bd2c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 802bc3a:	687b      	ldr	r3, [r7, #4]
 802bc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bc3e:	2b02      	cmp	r3, #2
 802bc40:	d074      	beq.n	802bd2c <I2C_MasterReceive_RXNE+0x15a>
 802bc42:	68fb      	ldr	r3, [r7, #12]
 802bc44:	2b01      	cmp	r3, #1
 802bc46:	d002      	beq.n	802bc4e <I2C_MasterReceive_RXNE+0x7c>
 802bc48:	68fb      	ldr	r3, [r7, #12]
 802bc4a:	2b00      	cmp	r3, #0
 802bc4c:	d16e      	bne.n	802bd2c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 802bc4e:	6878      	ldr	r0, [r7, #4]
 802bc50:	f001 fa4e 	bl	802d0f0 <I2C_WaitOnSTOPRequestThroughIT>
 802bc54:	4603      	mov	r3, r0
 802bc56:	2b00      	cmp	r3, #0
 802bc58:	d142      	bne.n	802bce0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802bc5a:	687b      	ldr	r3, [r7, #4]
 802bc5c:	681b      	ldr	r3, [r3, #0]
 802bc5e:	681a      	ldr	r2, [r3, #0]
 802bc60:	687b      	ldr	r3, [r7, #4]
 802bc62:	681b      	ldr	r3, [r3, #0]
 802bc64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802bc68:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802bc6a:	687b      	ldr	r3, [r7, #4]
 802bc6c:	681b      	ldr	r3, [r3, #0]
 802bc6e:	685a      	ldr	r2, [r3, #4]
 802bc70:	687b      	ldr	r3, [r7, #4]
 802bc72:	681b      	ldr	r3, [r3, #0]
 802bc74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802bc78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802bc7a:	687b      	ldr	r3, [r7, #4]
 802bc7c:	681b      	ldr	r3, [r3, #0]
 802bc7e:	691a      	ldr	r2, [r3, #16]
 802bc80:	687b      	ldr	r3, [r7, #4]
 802bc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bc84:	b2d2      	uxtb	r2, r2
 802bc86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 802bc88:	687b      	ldr	r3, [r7, #4]
 802bc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bc8c:	1c5a      	adds	r2, r3, #1
 802bc8e:	687b      	ldr	r3, [r7, #4]
 802bc90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 802bc92:	687b      	ldr	r3, [r7, #4]
 802bc94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bc96:	b29b      	uxth	r3, r3
 802bc98:	3b01      	subs	r3, #1
 802bc9a:	b29a      	uxth	r2, r3
 802bc9c:	687b      	ldr	r3, [r7, #4]
 802bc9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 802bca0:	687b      	ldr	r3, [r7, #4]
 802bca2:	2220      	movs	r2, #32
 802bca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802bca8:	687b      	ldr	r3, [r7, #4]
 802bcaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802bcae:	b2db      	uxtb	r3, r3
 802bcb0:	2b40      	cmp	r3, #64	; 0x40
 802bcb2:	d10a      	bne.n	802bcca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 802bcb4:	687b      	ldr	r3, [r7, #4]
 802bcb6:	2200      	movs	r2, #0
 802bcb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 802bcbc:	687b      	ldr	r3, [r7, #4]
 802bcbe:	2200      	movs	r2, #0
 802bcc0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 802bcc2:	6878      	ldr	r0, [r7, #4]
 802bcc4:	f00b f858 	bl	8036d78 <HAL_I2C_MemRxCpltCallback>
}
 802bcc8:	e030      	b.n	802bd2c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 802bcca:	687b      	ldr	r3, [r7, #4]
 802bccc:	2200      	movs	r2, #0
 802bcce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 802bcd2:	687b      	ldr	r3, [r7, #4]
 802bcd4:	2212      	movs	r2, #18
 802bcd6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 802bcd8:	6878      	ldr	r0, [r7, #4]
 802bcda:	f00b f82b 	bl	8036d34 <HAL_I2C_MasterRxCpltCallback>
}
 802bcde:	e025      	b.n	802bd2c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802bce0:	687b      	ldr	r3, [r7, #4]
 802bce2:	681b      	ldr	r3, [r3, #0]
 802bce4:	685a      	ldr	r2, [r3, #4]
 802bce6:	687b      	ldr	r3, [r7, #4]
 802bce8:	681b      	ldr	r3, [r3, #0]
 802bcea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802bcee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802bcf0:	687b      	ldr	r3, [r7, #4]
 802bcf2:	681b      	ldr	r3, [r3, #0]
 802bcf4:	691a      	ldr	r2, [r3, #16]
 802bcf6:	687b      	ldr	r3, [r7, #4]
 802bcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bcfa:	b2d2      	uxtb	r2, r2
 802bcfc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 802bcfe:	687b      	ldr	r3, [r7, #4]
 802bd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bd02:	1c5a      	adds	r2, r3, #1
 802bd04:	687b      	ldr	r3, [r7, #4]
 802bd06:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 802bd08:	687b      	ldr	r3, [r7, #4]
 802bd0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bd0c:	b29b      	uxth	r3, r3
 802bd0e:	3b01      	subs	r3, #1
 802bd10:	b29a      	uxth	r2, r3
 802bd12:	687b      	ldr	r3, [r7, #4]
 802bd14:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 802bd16:	687b      	ldr	r3, [r7, #4]
 802bd18:	2220      	movs	r2, #32
 802bd1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802bd1e:	687b      	ldr	r3, [r7, #4]
 802bd20:	2200      	movs	r2, #0
 802bd22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 802bd26:	6878      	ldr	r0, [r7, #4]
 802bd28:	f7ff fdac 	bl	802b884 <HAL_I2C_ErrorCallback>
}
 802bd2c:	bf00      	nop
 802bd2e:	3710      	adds	r7, #16
 802bd30:	46bd      	mov	sp, r7
 802bd32:	bd80      	pop	{r7, pc}

0802bd34 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 802bd34:	b580      	push	{r7, lr}
 802bd36:	b084      	sub	sp, #16
 802bd38:	af00      	add	r7, sp, #0
 802bd3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 802bd3c:	687b      	ldr	r3, [r7, #4]
 802bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802bd40:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 802bd42:	687b      	ldr	r3, [r7, #4]
 802bd44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bd46:	b29b      	uxth	r3, r3
 802bd48:	2b04      	cmp	r3, #4
 802bd4a:	d11b      	bne.n	802bd84 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802bd4c:	687b      	ldr	r3, [r7, #4]
 802bd4e:	681b      	ldr	r3, [r3, #0]
 802bd50:	685a      	ldr	r2, [r3, #4]
 802bd52:	687b      	ldr	r3, [r7, #4]
 802bd54:	681b      	ldr	r3, [r3, #0]
 802bd56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802bd5a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802bd5c:	687b      	ldr	r3, [r7, #4]
 802bd5e:	681b      	ldr	r3, [r3, #0]
 802bd60:	691a      	ldr	r2, [r3, #16]
 802bd62:	687b      	ldr	r3, [r7, #4]
 802bd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bd66:	b2d2      	uxtb	r2, r2
 802bd68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802bd6a:	687b      	ldr	r3, [r7, #4]
 802bd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bd6e:	1c5a      	adds	r2, r3, #1
 802bd70:	687b      	ldr	r3, [r7, #4]
 802bd72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 802bd74:	687b      	ldr	r3, [r7, #4]
 802bd76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bd78:	b29b      	uxth	r3, r3
 802bd7a:	3b01      	subs	r3, #1
 802bd7c:	b29a      	uxth	r2, r3
 802bd7e:	687b      	ldr	r3, [r7, #4]
 802bd80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 802bd82:	e0bd      	b.n	802bf00 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 802bd84:	687b      	ldr	r3, [r7, #4]
 802bd86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bd88:	b29b      	uxth	r3, r3
 802bd8a:	2b03      	cmp	r3, #3
 802bd8c:	d129      	bne.n	802bde2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802bd8e:	687b      	ldr	r3, [r7, #4]
 802bd90:	681b      	ldr	r3, [r3, #0]
 802bd92:	685a      	ldr	r2, [r3, #4]
 802bd94:	687b      	ldr	r3, [r7, #4]
 802bd96:	681b      	ldr	r3, [r3, #0]
 802bd98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802bd9c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 802bd9e:	68fb      	ldr	r3, [r7, #12]
 802bda0:	2b04      	cmp	r3, #4
 802bda2:	d00a      	beq.n	802bdba <I2C_MasterReceive_BTF+0x86>
 802bda4:	68fb      	ldr	r3, [r7, #12]
 802bda6:	2b02      	cmp	r3, #2
 802bda8:	d007      	beq.n	802bdba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802bdaa:	687b      	ldr	r3, [r7, #4]
 802bdac:	681b      	ldr	r3, [r3, #0]
 802bdae:	681a      	ldr	r2, [r3, #0]
 802bdb0:	687b      	ldr	r3, [r7, #4]
 802bdb2:	681b      	ldr	r3, [r3, #0]
 802bdb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802bdb8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802bdba:	687b      	ldr	r3, [r7, #4]
 802bdbc:	681b      	ldr	r3, [r3, #0]
 802bdbe:	691a      	ldr	r2, [r3, #16]
 802bdc0:	687b      	ldr	r3, [r7, #4]
 802bdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bdc4:	b2d2      	uxtb	r2, r2
 802bdc6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 802bdc8:	687b      	ldr	r3, [r7, #4]
 802bdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bdcc:	1c5a      	adds	r2, r3, #1
 802bdce:	687b      	ldr	r3, [r7, #4]
 802bdd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 802bdd2:	687b      	ldr	r3, [r7, #4]
 802bdd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bdd6:	b29b      	uxth	r3, r3
 802bdd8:	3b01      	subs	r3, #1
 802bdda:	b29a      	uxth	r2, r3
 802bddc:	687b      	ldr	r3, [r7, #4]
 802bdde:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 802bde0:	e08e      	b.n	802bf00 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 802bde2:	687b      	ldr	r3, [r7, #4]
 802bde4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bde6:	b29b      	uxth	r3, r3
 802bde8:	2b02      	cmp	r3, #2
 802bdea:	d176      	bne.n	802beda <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 802bdec:	68fb      	ldr	r3, [r7, #12]
 802bdee:	2b01      	cmp	r3, #1
 802bdf0:	d002      	beq.n	802bdf8 <I2C_MasterReceive_BTF+0xc4>
 802bdf2:	68fb      	ldr	r3, [r7, #12]
 802bdf4:	2b10      	cmp	r3, #16
 802bdf6:	d108      	bne.n	802be0a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802bdf8:	687b      	ldr	r3, [r7, #4]
 802bdfa:	681b      	ldr	r3, [r3, #0]
 802bdfc:	681a      	ldr	r2, [r3, #0]
 802bdfe:	687b      	ldr	r3, [r7, #4]
 802be00:	681b      	ldr	r3, [r3, #0]
 802be02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802be06:	601a      	str	r2, [r3, #0]
 802be08:	e019      	b.n	802be3e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 802be0a:	68fb      	ldr	r3, [r7, #12]
 802be0c:	2b04      	cmp	r3, #4
 802be0e:	d002      	beq.n	802be16 <I2C_MasterReceive_BTF+0xe2>
 802be10:	68fb      	ldr	r3, [r7, #12]
 802be12:	2b02      	cmp	r3, #2
 802be14:	d108      	bne.n	802be28 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802be16:	687b      	ldr	r3, [r7, #4]
 802be18:	681b      	ldr	r3, [r3, #0]
 802be1a:	681a      	ldr	r2, [r3, #0]
 802be1c:	687b      	ldr	r3, [r7, #4]
 802be1e:	681b      	ldr	r3, [r3, #0]
 802be20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802be24:	601a      	str	r2, [r3, #0]
 802be26:	e00a      	b.n	802be3e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 802be28:	68fb      	ldr	r3, [r7, #12]
 802be2a:	2b10      	cmp	r3, #16
 802be2c:	d007      	beq.n	802be3e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802be2e:	687b      	ldr	r3, [r7, #4]
 802be30:	681b      	ldr	r3, [r3, #0]
 802be32:	681a      	ldr	r2, [r3, #0]
 802be34:	687b      	ldr	r3, [r7, #4]
 802be36:	681b      	ldr	r3, [r3, #0]
 802be38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802be3c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802be3e:	687b      	ldr	r3, [r7, #4]
 802be40:	681b      	ldr	r3, [r3, #0]
 802be42:	691a      	ldr	r2, [r3, #16]
 802be44:	687b      	ldr	r3, [r7, #4]
 802be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802be48:	b2d2      	uxtb	r2, r2
 802be4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 802be4c:	687b      	ldr	r3, [r7, #4]
 802be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802be50:	1c5a      	adds	r2, r3, #1
 802be52:	687b      	ldr	r3, [r7, #4]
 802be54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 802be56:	687b      	ldr	r3, [r7, #4]
 802be58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802be5a:	b29b      	uxth	r3, r3
 802be5c:	3b01      	subs	r3, #1
 802be5e:	b29a      	uxth	r2, r3
 802be60:	687b      	ldr	r3, [r7, #4]
 802be62:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802be64:	687b      	ldr	r3, [r7, #4]
 802be66:	681b      	ldr	r3, [r3, #0]
 802be68:	691a      	ldr	r2, [r3, #16]
 802be6a:	687b      	ldr	r3, [r7, #4]
 802be6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802be6e:	b2d2      	uxtb	r2, r2
 802be70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 802be72:	687b      	ldr	r3, [r7, #4]
 802be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802be76:	1c5a      	adds	r2, r3, #1
 802be78:	687b      	ldr	r3, [r7, #4]
 802be7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 802be7c:	687b      	ldr	r3, [r7, #4]
 802be7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802be80:	b29b      	uxth	r3, r3
 802be82:	3b01      	subs	r3, #1
 802be84:	b29a      	uxth	r2, r3
 802be86:	687b      	ldr	r3, [r7, #4]
 802be88:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 802be8a:	687b      	ldr	r3, [r7, #4]
 802be8c:	681b      	ldr	r3, [r3, #0]
 802be8e:	685a      	ldr	r2, [r3, #4]
 802be90:	687b      	ldr	r3, [r7, #4]
 802be92:	681b      	ldr	r3, [r3, #0]
 802be94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 802be98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 802be9a:	687b      	ldr	r3, [r7, #4]
 802be9c:	2220      	movs	r2, #32
 802be9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802bea2:	687b      	ldr	r3, [r7, #4]
 802bea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802bea8:	b2db      	uxtb	r3, r3
 802beaa:	2b40      	cmp	r3, #64	; 0x40
 802beac:	d10a      	bne.n	802bec4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802beae:	687b      	ldr	r3, [r7, #4]
 802beb0:	2200      	movs	r2, #0
 802beb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 802beb6:	687b      	ldr	r3, [r7, #4]
 802beb8:	2200      	movs	r2, #0
 802beba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 802bebc:	6878      	ldr	r0, [r7, #4]
 802bebe:	f00a ff5b 	bl	8036d78 <HAL_I2C_MemRxCpltCallback>
}
 802bec2:	e01d      	b.n	802bf00 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802bec4:	687b      	ldr	r3, [r7, #4]
 802bec6:	2200      	movs	r2, #0
 802bec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 802becc:	687b      	ldr	r3, [r7, #4]
 802bece:	2212      	movs	r2, #18
 802bed0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 802bed2:	6878      	ldr	r0, [r7, #4]
 802bed4:	f00a ff2e 	bl	8036d34 <HAL_I2C_MasterRxCpltCallback>
}
 802bed8:	e012      	b.n	802bf00 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802beda:	687b      	ldr	r3, [r7, #4]
 802bedc:	681b      	ldr	r3, [r3, #0]
 802bede:	691a      	ldr	r2, [r3, #16]
 802bee0:	687b      	ldr	r3, [r7, #4]
 802bee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bee4:	b2d2      	uxtb	r2, r2
 802bee6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 802bee8:	687b      	ldr	r3, [r7, #4]
 802beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802beec:	1c5a      	adds	r2, r3, #1
 802beee:	687b      	ldr	r3, [r7, #4]
 802bef0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 802bef2:	687b      	ldr	r3, [r7, #4]
 802bef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802bef6:	b29b      	uxth	r3, r3
 802bef8:	3b01      	subs	r3, #1
 802befa:	b29a      	uxth	r2, r3
 802befc:	687b      	ldr	r3, [r7, #4]
 802befe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 802bf00:	bf00      	nop
 802bf02:	3710      	adds	r7, #16
 802bf04:	46bd      	mov	sp, r7
 802bf06:	bd80      	pop	{r7, pc}

0802bf08 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 802bf08:	b480      	push	{r7}
 802bf0a:	b083      	sub	sp, #12
 802bf0c:	af00      	add	r7, sp, #0
 802bf0e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 802bf10:	687b      	ldr	r3, [r7, #4]
 802bf12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802bf16:	b2db      	uxtb	r3, r3
 802bf18:	2b40      	cmp	r3, #64	; 0x40
 802bf1a:	d117      	bne.n	802bf4c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 802bf1c:	687b      	ldr	r3, [r7, #4]
 802bf1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802bf20:	2b00      	cmp	r3, #0
 802bf22:	d109      	bne.n	802bf38 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 802bf24:	687b      	ldr	r3, [r7, #4]
 802bf26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bf28:	b2db      	uxtb	r3, r3
 802bf2a:	461a      	mov	r2, r3
 802bf2c:	687b      	ldr	r3, [r7, #4]
 802bf2e:	681b      	ldr	r3, [r3, #0]
 802bf30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 802bf34:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 802bf36:	e067      	b.n	802c008 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 802bf38:	687b      	ldr	r3, [r7, #4]
 802bf3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bf3c:	b2db      	uxtb	r3, r3
 802bf3e:	f043 0301 	orr.w	r3, r3, #1
 802bf42:	b2da      	uxtb	r2, r3
 802bf44:	687b      	ldr	r3, [r7, #4]
 802bf46:	681b      	ldr	r3, [r3, #0]
 802bf48:	611a      	str	r2, [r3, #16]
}
 802bf4a:	e05d      	b.n	802c008 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802bf4c:	687b      	ldr	r3, [r7, #4]
 802bf4e:	691b      	ldr	r3, [r3, #16]
 802bf50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802bf54:	d133      	bne.n	802bfbe <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 802bf56:	687b      	ldr	r3, [r7, #4]
 802bf58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802bf5c:	b2db      	uxtb	r3, r3
 802bf5e:	2b21      	cmp	r3, #33	; 0x21
 802bf60:	d109      	bne.n	802bf76 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 802bf62:	687b      	ldr	r3, [r7, #4]
 802bf64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bf66:	b2db      	uxtb	r3, r3
 802bf68:	461a      	mov	r2, r3
 802bf6a:	687b      	ldr	r3, [r7, #4]
 802bf6c:	681b      	ldr	r3, [r3, #0]
 802bf6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 802bf72:	611a      	str	r2, [r3, #16]
 802bf74:	e008      	b.n	802bf88 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 802bf76:	687b      	ldr	r3, [r7, #4]
 802bf78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bf7a:	b2db      	uxtb	r3, r3
 802bf7c:	f043 0301 	orr.w	r3, r3, #1
 802bf80:	b2da      	uxtb	r2, r3
 802bf82:	687b      	ldr	r3, [r7, #4]
 802bf84:	681b      	ldr	r3, [r3, #0]
 802bf86:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 802bf88:	687b      	ldr	r3, [r7, #4]
 802bf8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bf8c:	2b00      	cmp	r3, #0
 802bf8e:	d004      	beq.n	802bf9a <I2C_Master_SB+0x92>
 802bf90:	687b      	ldr	r3, [r7, #4]
 802bf92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802bf94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802bf96:	2b00      	cmp	r3, #0
 802bf98:	d108      	bne.n	802bfac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 802bf9a:	687b      	ldr	r3, [r7, #4]
 802bf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bf9e:	2b00      	cmp	r3, #0
 802bfa0:	d032      	beq.n	802c008 <I2C_Master_SB+0x100>
 802bfa2:	687b      	ldr	r3, [r7, #4]
 802bfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802bfa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802bfa8:	2b00      	cmp	r3, #0
 802bfaa:	d02d      	beq.n	802c008 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802bfac:	687b      	ldr	r3, [r7, #4]
 802bfae:	681b      	ldr	r3, [r3, #0]
 802bfb0:	685a      	ldr	r2, [r3, #4]
 802bfb2:	687b      	ldr	r3, [r7, #4]
 802bfb4:	681b      	ldr	r3, [r3, #0]
 802bfb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802bfba:	605a      	str	r2, [r3, #4]
}
 802bfbc:	e024      	b.n	802c008 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 802bfbe:	687b      	ldr	r3, [r7, #4]
 802bfc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802bfc2:	2b00      	cmp	r3, #0
 802bfc4:	d10e      	bne.n	802bfe4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 802bfc6:	687b      	ldr	r3, [r7, #4]
 802bfc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bfca:	b29b      	uxth	r3, r3
 802bfcc:	11db      	asrs	r3, r3, #7
 802bfce:	b2db      	uxtb	r3, r3
 802bfd0:	f003 0306 	and.w	r3, r3, #6
 802bfd4:	b2db      	uxtb	r3, r3
 802bfd6:	f063 030f 	orn	r3, r3, #15
 802bfda:	b2da      	uxtb	r2, r3
 802bfdc:	687b      	ldr	r3, [r7, #4]
 802bfde:	681b      	ldr	r3, [r3, #0]
 802bfe0:	611a      	str	r2, [r3, #16]
}
 802bfe2:	e011      	b.n	802c008 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 802bfe4:	687b      	ldr	r3, [r7, #4]
 802bfe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802bfe8:	2b01      	cmp	r3, #1
 802bfea:	d10d      	bne.n	802c008 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 802bfec:	687b      	ldr	r3, [r7, #4]
 802bfee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802bff0:	b29b      	uxth	r3, r3
 802bff2:	11db      	asrs	r3, r3, #7
 802bff4:	b2db      	uxtb	r3, r3
 802bff6:	f003 0306 	and.w	r3, r3, #6
 802bffa:	b2db      	uxtb	r3, r3
 802bffc:	f063 030e 	orn	r3, r3, #14
 802c000:	b2da      	uxtb	r2, r3
 802c002:	687b      	ldr	r3, [r7, #4]
 802c004:	681b      	ldr	r3, [r3, #0]
 802c006:	611a      	str	r2, [r3, #16]
}
 802c008:	bf00      	nop
 802c00a:	370c      	adds	r7, #12
 802c00c:	46bd      	mov	sp, r7
 802c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c012:	4770      	bx	lr

0802c014 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 802c014:	b480      	push	{r7}
 802c016:	b083      	sub	sp, #12
 802c018:	af00      	add	r7, sp, #0
 802c01a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 802c01c:	687b      	ldr	r3, [r7, #4]
 802c01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802c020:	b2da      	uxtb	r2, r3
 802c022:	687b      	ldr	r3, [r7, #4]
 802c024:	681b      	ldr	r3, [r3, #0]
 802c026:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 802c028:	687b      	ldr	r3, [r7, #4]
 802c02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c02c:	2b00      	cmp	r3, #0
 802c02e:	d103      	bne.n	802c038 <I2C_Master_ADD10+0x24>
 802c030:	687b      	ldr	r3, [r7, #4]
 802c032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c034:	2b00      	cmp	r3, #0
 802c036:	d011      	beq.n	802c05c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 802c038:	687b      	ldr	r3, [r7, #4]
 802c03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802c03e:	2b00      	cmp	r3, #0
 802c040:	d104      	bne.n	802c04c <I2C_Master_ADD10+0x38>
 802c042:	687b      	ldr	r3, [r7, #4]
 802c044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802c048:	2b00      	cmp	r3, #0
 802c04a:	d007      	beq.n	802c05c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802c04c:	687b      	ldr	r3, [r7, #4]
 802c04e:	681b      	ldr	r3, [r3, #0]
 802c050:	685a      	ldr	r2, [r3, #4]
 802c052:	687b      	ldr	r3, [r7, #4]
 802c054:	681b      	ldr	r3, [r3, #0]
 802c056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802c05a:	605a      	str	r2, [r3, #4]
    }
  }
}
 802c05c:	bf00      	nop
 802c05e:	370c      	adds	r7, #12
 802c060:	46bd      	mov	sp, r7
 802c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c066:	4770      	bx	lr

0802c068 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 802c068:	b480      	push	{r7}
 802c06a:	b091      	sub	sp, #68	; 0x44
 802c06c:	af00      	add	r7, sp, #0
 802c06e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 802c070:	687b      	ldr	r3, [r7, #4]
 802c072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802c076:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 802c07a:	687b      	ldr	r3, [r7, #4]
 802c07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c07e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 802c080:	687b      	ldr	r3, [r7, #4]
 802c082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c084:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 802c086:	687b      	ldr	r3, [r7, #4]
 802c088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c08c:	b2db      	uxtb	r3, r3
 802c08e:	2b22      	cmp	r3, #34	; 0x22
 802c090:	f040 8169 	bne.w	802c366 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 802c094:	687b      	ldr	r3, [r7, #4]
 802c096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c098:	2b00      	cmp	r3, #0
 802c09a:	d10f      	bne.n	802c0bc <I2C_Master_ADDR+0x54>
 802c09c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 802c0a0:	2b40      	cmp	r3, #64	; 0x40
 802c0a2:	d10b      	bne.n	802c0bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802c0a4:	2300      	movs	r3, #0
 802c0a6:	633b      	str	r3, [r7, #48]	; 0x30
 802c0a8:	687b      	ldr	r3, [r7, #4]
 802c0aa:	681b      	ldr	r3, [r3, #0]
 802c0ac:	695b      	ldr	r3, [r3, #20]
 802c0ae:	633b      	str	r3, [r7, #48]	; 0x30
 802c0b0:	687b      	ldr	r3, [r7, #4]
 802c0b2:	681b      	ldr	r3, [r3, #0]
 802c0b4:	699b      	ldr	r3, [r3, #24]
 802c0b6:	633b      	str	r3, [r7, #48]	; 0x30
 802c0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c0ba:	e160      	b.n	802c37e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 802c0bc:	687b      	ldr	r3, [r7, #4]
 802c0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c0c0:	2b00      	cmp	r3, #0
 802c0c2:	d11d      	bne.n	802c100 <I2C_Master_ADDR+0x98>
 802c0c4:	687b      	ldr	r3, [r7, #4]
 802c0c6:	691b      	ldr	r3, [r3, #16]
 802c0c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 802c0cc:	d118      	bne.n	802c100 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802c0ce:	2300      	movs	r3, #0
 802c0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c0d2:	687b      	ldr	r3, [r7, #4]
 802c0d4:	681b      	ldr	r3, [r3, #0]
 802c0d6:	695b      	ldr	r3, [r3, #20]
 802c0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c0da:	687b      	ldr	r3, [r7, #4]
 802c0dc:	681b      	ldr	r3, [r3, #0]
 802c0de:	699b      	ldr	r3, [r3, #24]
 802c0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 802c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802c0e4:	687b      	ldr	r3, [r7, #4]
 802c0e6:	681b      	ldr	r3, [r3, #0]
 802c0e8:	681a      	ldr	r2, [r3, #0]
 802c0ea:	687b      	ldr	r3, [r7, #4]
 802c0ec:	681b      	ldr	r3, [r3, #0]
 802c0ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802c0f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 802c0f4:	687b      	ldr	r3, [r7, #4]
 802c0f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c0f8:	1c5a      	adds	r2, r3, #1
 802c0fa:	687b      	ldr	r3, [r7, #4]
 802c0fc:	651a      	str	r2, [r3, #80]	; 0x50
 802c0fe:	e13e      	b.n	802c37e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 802c100:	687b      	ldr	r3, [r7, #4]
 802c102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c104:	b29b      	uxth	r3, r3
 802c106:	2b00      	cmp	r3, #0
 802c108:	d113      	bne.n	802c132 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802c10a:	2300      	movs	r3, #0
 802c10c:	62bb      	str	r3, [r7, #40]	; 0x28
 802c10e:	687b      	ldr	r3, [r7, #4]
 802c110:	681b      	ldr	r3, [r3, #0]
 802c112:	695b      	ldr	r3, [r3, #20]
 802c114:	62bb      	str	r3, [r7, #40]	; 0x28
 802c116:	687b      	ldr	r3, [r7, #4]
 802c118:	681b      	ldr	r3, [r3, #0]
 802c11a:	699b      	ldr	r3, [r3, #24]
 802c11c:	62bb      	str	r3, [r7, #40]	; 0x28
 802c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802c120:	687b      	ldr	r3, [r7, #4]
 802c122:	681b      	ldr	r3, [r3, #0]
 802c124:	681a      	ldr	r2, [r3, #0]
 802c126:	687b      	ldr	r3, [r7, #4]
 802c128:	681b      	ldr	r3, [r3, #0]
 802c12a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802c12e:	601a      	str	r2, [r3, #0]
 802c130:	e115      	b.n	802c35e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 802c132:	687b      	ldr	r3, [r7, #4]
 802c134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c136:	b29b      	uxth	r3, r3
 802c138:	2b01      	cmp	r3, #1
 802c13a:	f040 808a 	bne.w	802c252 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 802c13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802c144:	d137      	bne.n	802c1b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802c146:	687b      	ldr	r3, [r7, #4]
 802c148:	681b      	ldr	r3, [r3, #0]
 802c14a:	681a      	ldr	r2, [r3, #0]
 802c14c:	687b      	ldr	r3, [r7, #4]
 802c14e:	681b      	ldr	r3, [r3, #0]
 802c150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c154:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 802c156:	687b      	ldr	r3, [r7, #4]
 802c158:	681b      	ldr	r3, [r3, #0]
 802c15a:	685b      	ldr	r3, [r3, #4]
 802c15c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802c160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802c164:	d113      	bne.n	802c18e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802c166:	687b      	ldr	r3, [r7, #4]
 802c168:	681b      	ldr	r3, [r3, #0]
 802c16a:	681a      	ldr	r2, [r3, #0]
 802c16c:	687b      	ldr	r3, [r7, #4]
 802c16e:	681b      	ldr	r3, [r3, #0]
 802c170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c174:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802c176:	2300      	movs	r3, #0
 802c178:	627b      	str	r3, [r7, #36]	; 0x24
 802c17a:	687b      	ldr	r3, [r7, #4]
 802c17c:	681b      	ldr	r3, [r3, #0]
 802c17e:	695b      	ldr	r3, [r3, #20]
 802c180:	627b      	str	r3, [r7, #36]	; 0x24
 802c182:	687b      	ldr	r3, [r7, #4]
 802c184:	681b      	ldr	r3, [r3, #0]
 802c186:	699b      	ldr	r3, [r3, #24]
 802c188:	627b      	str	r3, [r7, #36]	; 0x24
 802c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c18c:	e0e7      	b.n	802c35e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802c18e:	2300      	movs	r3, #0
 802c190:	623b      	str	r3, [r7, #32]
 802c192:	687b      	ldr	r3, [r7, #4]
 802c194:	681b      	ldr	r3, [r3, #0]
 802c196:	695b      	ldr	r3, [r3, #20]
 802c198:	623b      	str	r3, [r7, #32]
 802c19a:	687b      	ldr	r3, [r7, #4]
 802c19c:	681b      	ldr	r3, [r3, #0]
 802c19e:	699b      	ldr	r3, [r3, #24]
 802c1a0:	623b      	str	r3, [r7, #32]
 802c1a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802c1a4:	687b      	ldr	r3, [r7, #4]
 802c1a6:	681b      	ldr	r3, [r3, #0]
 802c1a8:	681a      	ldr	r2, [r3, #0]
 802c1aa:	687b      	ldr	r3, [r7, #4]
 802c1ac:	681b      	ldr	r3, [r3, #0]
 802c1ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802c1b2:	601a      	str	r2, [r3, #0]
 802c1b4:	e0d3      	b.n	802c35e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 802c1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c1b8:	2b08      	cmp	r3, #8
 802c1ba:	d02e      	beq.n	802c21a <I2C_Master_ADDR+0x1b2>
 802c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c1be:	2b20      	cmp	r3, #32
 802c1c0:	d02b      	beq.n	802c21a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 802c1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c1c4:	2b12      	cmp	r3, #18
 802c1c6:	d102      	bne.n	802c1ce <I2C_Master_ADDR+0x166>
 802c1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c1ca:	2b01      	cmp	r3, #1
 802c1cc:	d125      	bne.n	802c21a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 802c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c1d0:	2b04      	cmp	r3, #4
 802c1d2:	d00e      	beq.n	802c1f2 <I2C_Master_ADDR+0x18a>
 802c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c1d6:	2b02      	cmp	r3, #2
 802c1d8:	d00b      	beq.n	802c1f2 <I2C_Master_ADDR+0x18a>
 802c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c1dc:	2b10      	cmp	r3, #16
 802c1de:	d008      	beq.n	802c1f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802c1e0:	687b      	ldr	r3, [r7, #4]
 802c1e2:	681b      	ldr	r3, [r3, #0]
 802c1e4:	681a      	ldr	r2, [r3, #0]
 802c1e6:	687b      	ldr	r3, [r7, #4]
 802c1e8:	681b      	ldr	r3, [r3, #0]
 802c1ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c1ee:	601a      	str	r2, [r3, #0]
 802c1f0:	e007      	b.n	802c202 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802c1f2:	687b      	ldr	r3, [r7, #4]
 802c1f4:	681b      	ldr	r3, [r3, #0]
 802c1f6:	681a      	ldr	r2, [r3, #0]
 802c1f8:	687b      	ldr	r3, [r7, #4]
 802c1fa:	681b      	ldr	r3, [r3, #0]
 802c1fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802c200:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802c202:	2300      	movs	r3, #0
 802c204:	61fb      	str	r3, [r7, #28]
 802c206:	687b      	ldr	r3, [r7, #4]
 802c208:	681b      	ldr	r3, [r3, #0]
 802c20a:	695b      	ldr	r3, [r3, #20]
 802c20c:	61fb      	str	r3, [r7, #28]
 802c20e:	687b      	ldr	r3, [r7, #4]
 802c210:	681b      	ldr	r3, [r3, #0]
 802c212:	699b      	ldr	r3, [r3, #24]
 802c214:	61fb      	str	r3, [r7, #28]
 802c216:	69fb      	ldr	r3, [r7, #28]
 802c218:	e0a1      	b.n	802c35e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802c21a:	687b      	ldr	r3, [r7, #4]
 802c21c:	681b      	ldr	r3, [r3, #0]
 802c21e:	681a      	ldr	r2, [r3, #0]
 802c220:	687b      	ldr	r3, [r7, #4]
 802c222:	681b      	ldr	r3, [r3, #0]
 802c224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c228:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802c22a:	2300      	movs	r3, #0
 802c22c:	61bb      	str	r3, [r7, #24]
 802c22e:	687b      	ldr	r3, [r7, #4]
 802c230:	681b      	ldr	r3, [r3, #0]
 802c232:	695b      	ldr	r3, [r3, #20]
 802c234:	61bb      	str	r3, [r7, #24]
 802c236:	687b      	ldr	r3, [r7, #4]
 802c238:	681b      	ldr	r3, [r3, #0]
 802c23a:	699b      	ldr	r3, [r3, #24]
 802c23c:	61bb      	str	r3, [r7, #24]
 802c23e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802c240:	687b      	ldr	r3, [r7, #4]
 802c242:	681b      	ldr	r3, [r3, #0]
 802c244:	681a      	ldr	r2, [r3, #0]
 802c246:	687b      	ldr	r3, [r7, #4]
 802c248:	681b      	ldr	r3, [r3, #0]
 802c24a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802c24e:	601a      	str	r2, [r3, #0]
 802c250:	e085      	b.n	802c35e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 802c252:	687b      	ldr	r3, [r7, #4]
 802c254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c256:	b29b      	uxth	r3, r3
 802c258:	2b02      	cmp	r3, #2
 802c25a:	d14d      	bne.n	802c2f8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 802c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c25e:	2b04      	cmp	r3, #4
 802c260:	d016      	beq.n	802c290 <I2C_Master_ADDR+0x228>
 802c262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c264:	2b02      	cmp	r3, #2
 802c266:	d013      	beq.n	802c290 <I2C_Master_ADDR+0x228>
 802c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c26a:	2b10      	cmp	r3, #16
 802c26c:	d010      	beq.n	802c290 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802c26e:	687b      	ldr	r3, [r7, #4]
 802c270:	681b      	ldr	r3, [r3, #0]
 802c272:	681a      	ldr	r2, [r3, #0]
 802c274:	687b      	ldr	r3, [r7, #4]
 802c276:	681b      	ldr	r3, [r3, #0]
 802c278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c27c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 802c27e:	687b      	ldr	r3, [r7, #4]
 802c280:	681b      	ldr	r3, [r3, #0]
 802c282:	681a      	ldr	r2, [r3, #0]
 802c284:	687b      	ldr	r3, [r7, #4]
 802c286:	681b      	ldr	r3, [r3, #0]
 802c288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802c28c:	601a      	str	r2, [r3, #0]
 802c28e:	e007      	b.n	802c2a0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802c290:	687b      	ldr	r3, [r7, #4]
 802c292:	681b      	ldr	r3, [r3, #0]
 802c294:	681a      	ldr	r2, [r3, #0]
 802c296:	687b      	ldr	r3, [r7, #4]
 802c298:	681b      	ldr	r3, [r3, #0]
 802c29a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802c29e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 802c2a0:	687b      	ldr	r3, [r7, #4]
 802c2a2:	681b      	ldr	r3, [r3, #0]
 802c2a4:	685b      	ldr	r3, [r3, #4]
 802c2a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802c2aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802c2ae:	d117      	bne.n	802c2e0 <I2C_Master_ADDR+0x278>
 802c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c2b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802c2b6:	d00b      	beq.n	802c2d0 <I2C_Master_ADDR+0x268>
 802c2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c2ba:	2b01      	cmp	r3, #1
 802c2bc:	d008      	beq.n	802c2d0 <I2C_Master_ADDR+0x268>
 802c2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c2c0:	2b08      	cmp	r3, #8
 802c2c2:	d005      	beq.n	802c2d0 <I2C_Master_ADDR+0x268>
 802c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c2c6:	2b10      	cmp	r3, #16
 802c2c8:	d002      	beq.n	802c2d0 <I2C_Master_ADDR+0x268>
 802c2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c2cc:	2b20      	cmp	r3, #32
 802c2ce:	d107      	bne.n	802c2e0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 802c2d0:	687b      	ldr	r3, [r7, #4]
 802c2d2:	681b      	ldr	r3, [r3, #0]
 802c2d4:	685a      	ldr	r2, [r3, #4]
 802c2d6:	687b      	ldr	r3, [r7, #4]
 802c2d8:	681b      	ldr	r3, [r3, #0]
 802c2da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802c2de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802c2e0:	2300      	movs	r3, #0
 802c2e2:	617b      	str	r3, [r7, #20]
 802c2e4:	687b      	ldr	r3, [r7, #4]
 802c2e6:	681b      	ldr	r3, [r3, #0]
 802c2e8:	695b      	ldr	r3, [r3, #20]
 802c2ea:	617b      	str	r3, [r7, #20]
 802c2ec:	687b      	ldr	r3, [r7, #4]
 802c2ee:	681b      	ldr	r3, [r3, #0]
 802c2f0:	699b      	ldr	r3, [r3, #24]
 802c2f2:	617b      	str	r3, [r7, #20]
 802c2f4:	697b      	ldr	r3, [r7, #20]
 802c2f6:	e032      	b.n	802c35e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802c2f8:	687b      	ldr	r3, [r7, #4]
 802c2fa:	681b      	ldr	r3, [r3, #0]
 802c2fc:	681a      	ldr	r2, [r3, #0]
 802c2fe:	687b      	ldr	r3, [r7, #4]
 802c300:	681b      	ldr	r3, [r3, #0]
 802c302:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802c306:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 802c308:	687b      	ldr	r3, [r7, #4]
 802c30a:	681b      	ldr	r3, [r3, #0]
 802c30c:	685b      	ldr	r3, [r3, #4]
 802c30e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802c312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802c316:	d117      	bne.n	802c348 <I2C_Master_ADDR+0x2e0>
 802c318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c31a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802c31e:	d00b      	beq.n	802c338 <I2C_Master_ADDR+0x2d0>
 802c320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c322:	2b01      	cmp	r3, #1
 802c324:	d008      	beq.n	802c338 <I2C_Master_ADDR+0x2d0>
 802c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c328:	2b08      	cmp	r3, #8
 802c32a:	d005      	beq.n	802c338 <I2C_Master_ADDR+0x2d0>
 802c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c32e:	2b10      	cmp	r3, #16
 802c330:	d002      	beq.n	802c338 <I2C_Master_ADDR+0x2d0>
 802c332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c334:	2b20      	cmp	r3, #32
 802c336:	d107      	bne.n	802c348 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 802c338:	687b      	ldr	r3, [r7, #4]
 802c33a:	681b      	ldr	r3, [r3, #0]
 802c33c:	685a      	ldr	r2, [r3, #4]
 802c33e:	687b      	ldr	r3, [r7, #4]
 802c340:	681b      	ldr	r3, [r3, #0]
 802c342:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802c346:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802c348:	2300      	movs	r3, #0
 802c34a:	613b      	str	r3, [r7, #16]
 802c34c:	687b      	ldr	r3, [r7, #4]
 802c34e:	681b      	ldr	r3, [r3, #0]
 802c350:	695b      	ldr	r3, [r3, #20]
 802c352:	613b      	str	r3, [r7, #16]
 802c354:	687b      	ldr	r3, [r7, #4]
 802c356:	681b      	ldr	r3, [r3, #0]
 802c358:	699b      	ldr	r3, [r3, #24]
 802c35a:	613b      	str	r3, [r7, #16]
 802c35c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 802c35e:	687b      	ldr	r3, [r7, #4]
 802c360:	2200      	movs	r2, #0
 802c362:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 802c364:	e00b      	b.n	802c37e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802c366:	2300      	movs	r3, #0
 802c368:	60fb      	str	r3, [r7, #12]
 802c36a:	687b      	ldr	r3, [r7, #4]
 802c36c:	681b      	ldr	r3, [r3, #0]
 802c36e:	695b      	ldr	r3, [r3, #20]
 802c370:	60fb      	str	r3, [r7, #12]
 802c372:	687b      	ldr	r3, [r7, #4]
 802c374:	681b      	ldr	r3, [r3, #0]
 802c376:	699b      	ldr	r3, [r3, #24]
 802c378:	60fb      	str	r3, [r7, #12]
 802c37a:	68fb      	ldr	r3, [r7, #12]
}
 802c37c:	e7ff      	b.n	802c37e <I2C_Master_ADDR+0x316>
 802c37e:	bf00      	nop
 802c380:	3744      	adds	r7, #68	; 0x44
 802c382:	46bd      	mov	sp, r7
 802c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c388:	4770      	bx	lr

0802c38a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 802c38a:	b580      	push	{r7, lr}
 802c38c:	b084      	sub	sp, #16
 802c38e:	af00      	add	r7, sp, #0
 802c390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802c392:	687b      	ldr	r3, [r7, #4]
 802c394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c398:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 802c39a:	687b      	ldr	r3, [r7, #4]
 802c39c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c39e:	b29b      	uxth	r3, r3
 802c3a0:	2b00      	cmp	r3, #0
 802c3a2:	d02b      	beq.n	802c3fc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 802c3a4:	687b      	ldr	r3, [r7, #4]
 802c3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c3a8:	781a      	ldrb	r2, [r3, #0]
 802c3aa:	687b      	ldr	r3, [r7, #4]
 802c3ac:	681b      	ldr	r3, [r3, #0]
 802c3ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802c3b0:	687b      	ldr	r3, [r7, #4]
 802c3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c3b4:	1c5a      	adds	r2, r3, #1
 802c3b6:	687b      	ldr	r3, [r7, #4]
 802c3b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 802c3ba:	687b      	ldr	r3, [r7, #4]
 802c3bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c3be:	b29b      	uxth	r3, r3
 802c3c0:	3b01      	subs	r3, #1
 802c3c2:	b29a      	uxth	r2, r3
 802c3c4:	687b      	ldr	r3, [r7, #4]
 802c3c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 802c3c8:	687b      	ldr	r3, [r7, #4]
 802c3ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c3cc:	b29b      	uxth	r3, r3
 802c3ce:	2b00      	cmp	r3, #0
 802c3d0:	d114      	bne.n	802c3fc <I2C_SlaveTransmit_TXE+0x72>
 802c3d2:	7bfb      	ldrb	r3, [r7, #15]
 802c3d4:	2b29      	cmp	r3, #41	; 0x29
 802c3d6:	d111      	bne.n	802c3fc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802c3d8:	687b      	ldr	r3, [r7, #4]
 802c3da:	681b      	ldr	r3, [r3, #0]
 802c3dc:	685a      	ldr	r2, [r3, #4]
 802c3de:	687b      	ldr	r3, [r7, #4]
 802c3e0:	681b      	ldr	r3, [r3, #0]
 802c3e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c3e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 802c3e8:	687b      	ldr	r3, [r7, #4]
 802c3ea:	2221      	movs	r2, #33	; 0x21
 802c3ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 802c3ee:	687b      	ldr	r3, [r7, #4]
 802c3f0:	2228      	movs	r2, #40	; 0x28
 802c3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 802c3f6:	6878      	ldr	r0, [r7, #4]
 802c3f8:	f7ff fa18 	bl	802b82c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 802c3fc:	bf00      	nop
 802c3fe:	3710      	adds	r7, #16
 802c400:	46bd      	mov	sp, r7
 802c402:	bd80      	pop	{r7, pc}

0802c404 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 802c404:	b480      	push	{r7}
 802c406:	b083      	sub	sp, #12
 802c408:	af00      	add	r7, sp, #0
 802c40a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 802c40c:	687b      	ldr	r3, [r7, #4]
 802c40e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c410:	b29b      	uxth	r3, r3
 802c412:	2b00      	cmp	r3, #0
 802c414:	d011      	beq.n	802c43a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 802c416:	687b      	ldr	r3, [r7, #4]
 802c418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c41a:	781a      	ldrb	r2, [r3, #0]
 802c41c:	687b      	ldr	r3, [r7, #4]
 802c41e:	681b      	ldr	r3, [r3, #0]
 802c420:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802c422:	687b      	ldr	r3, [r7, #4]
 802c424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c426:	1c5a      	adds	r2, r3, #1
 802c428:	687b      	ldr	r3, [r7, #4]
 802c42a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 802c42c:	687b      	ldr	r3, [r7, #4]
 802c42e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c430:	b29b      	uxth	r3, r3
 802c432:	3b01      	subs	r3, #1
 802c434:	b29a      	uxth	r2, r3
 802c436:	687b      	ldr	r3, [r7, #4]
 802c438:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 802c43a:	bf00      	nop
 802c43c:	370c      	adds	r7, #12
 802c43e:	46bd      	mov	sp, r7
 802c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c444:	4770      	bx	lr

0802c446 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 802c446:	b580      	push	{r7, lr}
 802c448:	b084      	sub	sp, #16
 802c44a:	af00      	add	r7, sp, #0
 802c44c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802c44e:	687b      	ldr	r3, [r7, #4]
 802c450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c454:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 802c456:	687b      	ldr	r3, [r7, #4]
 802c458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c45a:	b29b      	uxth	r3, r3
 802c45c:	2b00      	cmp	r3, #0
 802c45e:	d02c      	beq.n	802c4ba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802c460:	687b      	ldr	r3, [r7, #4]
 802c462:	681b      	ldr	r3, [r3, #0]
 802c464:	691a      	ldr	r2, [r3, #16]
 802c466:	687b      	ldr	r3, [r7, #4]
 802c468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c46a:	b2d2      	uxtb	r2, r2
 802c46c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802c46e:	687b      	ldr	r3, [r7, #4]
 802c470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c472:	1c5a      	adds	r2, r3, #1
 802c474:	687b      	ldr	r3, [r7, #4]
 802c476:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 802c478:	687b      	ldr	r3, [r7, #4]
 802c47a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c47c:	b29b      	uxth	r3, r3
 802c47e:	3b01      	subs	r3, #1
 802c480:	b29a      	uxth	r2, r3
 802c482:	687b      	ldr	r3, [r7, #4]
 802c484:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802c486:	687b      	ldr	r3, [r7, #4]
 802c488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c48a:	b29b      	uxth	r3, r3
 802c48c:	2b00      	cmp	r3, #0
 802c48e:	d114      	bne.n	802c4ba <I2C_SlaveReceive_RXNE+0x74>
 802c490:	7bfb      	ldrb	r3, [r7, #15]
 802c492:	2b2a      	cmp	r3, #42	; 0x2a
 802c494:	d111      	bne.n	802c4ba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 802c496:	687b      	ldr	r3, [r7, #4]
 802c498:	681b      	ldr	r3, [r3, #0]
 802c49a:	685a      	ldr	r2, [r3, #4]
 802c49c:	687b      	ldr	r3, [r7, #4]
 802c49e:	681b      	ldr	r3, [r3, #0]
 802c4a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c4a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 802c4a6:	687b      	ldr	r3, [r7, #4]
 802c4a8:	2222      	movs	r2, #34	; 0x22
 802c4aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 802c4ac:	687b      	ldr	r3, [r7, #4]
 802c4ae:	2228      	movs	r2, #40	; 0x28
 802c4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 802c4b4:	6878      	ldr	r0, [r7, #4]
 802c4b6:	f7ff f9c3 	bl	802b840 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 802c4ba:	bf00      	nop
 802c4bc:	3710      	adds	r7, #16
 802c4be:	46bd      	mov	sp, r7
 802c4c0:	bd80      	pop	{r7, pc}

0802c4c2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 802c4c2:	b480      	push	{r7}
 802c4c4:	b083      	sub	sp, #12
 802c4c6:	af00      	add	r7, sp, #0
 802c4c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 802c4ca:	687b      	ldr	r3, [r7, #4]
 802c4cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c4ce:	b29b      	uxth	r3, r3
 802c4d0:	2b00      	cmp	r3, #0
 802c4d2:	d012      	beq.n	802c4fa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802c4d4:	687b      	ldr	r3, [r7, #4]
 802c4d6:	681b      	ldr	r3, [r3, #0]
 802c4d8:	691a      	ldr	r2, [r3, #16]
 802c4da:	687b      	ldr	r3, [r7, #4]
 802c4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c4de:	b2d2      	uxtb	r2, r2
 802c4e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 802c4e2:	687b      	ldr	r3, [r7, #4]
 802c4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c4e6:	1c5a      	adds	r2, r3, #1
 802c4e8:	687b      	ldr	r3, [r7, #4]
 802c4ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 802c4ec:	687b      	ldr	r3, [r7, #4]
 802c4ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c4f0:	b29b      	uxth	r3, r3
 802c4f2:	3b01      	subs	r3, #1
 802c4f4:	b29a      	uxth	r2, r3
 802c4f6:	687b      	ldr	r3, [r7, #4]
 802c4f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 802c4fa:	bf00      	nop
 802c4fc:	370c      	adds	r7, #12
 802c4fe:	46bd      	mov	sp, r7
 802c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c504:	4770      	bx	lr

0802c506 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 802c506:	b580      	push	{r7, lr}
 802c508:	b084      	sub	sp, #16
 802c50a:	af00      	add	r7, sp, #0
 802c50c:	6078      	str	r0, [r7, #4]
 802c50e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 802c510:	2300      	movs	r3, #0
 802c512:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802c514:	687b      	ldr	r3, [r7, #4]
 802c516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c51a:	b2db      	uxtb	r3, r3
 802c51c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802c520:	2b28      	cmp	r3, #40	; 0x28
 802c522:	d125      	bne.n	802c570 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 802c524:	687b      	ldr	r3, [r7, #4]
 802c526:	681b      	ldr	r3, [r3, #0]
 802c528:	685a      	ldr	r2, [r3, #4]
 802c52a:	687b      	ldr	r3, [r7, #4]
 802c52c:	681b      	ldr	r3, [r3, #0]
 802c52e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c532:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 802c534:	683b      	ldr	r3, [r7, #0]
 802c536:	f003 0304 	and.w	r3, r3, #4
 802c53a:	2b00      	cmp	r3, #0
 802c53c:	d101      	bne.n	802c542 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 802c53e:	2301      	movs	r3, #1
 802c540:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 802c542:	683b      	ldr	r3, [r7, #0]
 802c544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802c548:	2b00      	cmp	r3, #0
 802c54a:	d103      	bne.n	802c554 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 802c54c:	687b      	ldr	r3, [r7, #4]
 802c54e:	68db      	ldr	r3, [r3, #12]
 802c550:	81bb      	strh	r3, [r7, #12]
 802c552:	e002      	b.n	802c55a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 802c554:	687b      	ldr	r3, [r7, #4]
 802c556:	699b      	ldr	r3, [r3, #24]
 802c558:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802c55a:	687b      	ldr	r3, [r7, #4]
 802c55c:	2200      	movs	r2, #0
 802c55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 802c562:	89ba      	ldrh	r2, [r7, #12]
 802c564:	7bfb      	ldrb	r3, [r7, #15]
 802c566:	4619      	mov	r1, r3
 802c568:	6878      	ldr	r0, [r7, #4]
 802c56a:	f7ff f973 	bl	802b854 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 802c56e:	e008      	b.n	802c582 <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 802c570:	687b      	ldr	r3, [r7, #4]
 802c572:	681b      	ldr	r3, [r3, #0]
 802c574:	f06f 0202 	mvn.w	r2, #2
 802c578:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 802c57a:	687b      	ldr	r3, [r7, #4]
 802c57c:	2200      	movs	r2, #0
 802c57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 802c582:	bf00      	nop
 802c584:	3710      	adds	r7, #16
 802c586:	46bd      	mov	sp, r7
 802c588:	bd80      	pop	{r7, pc}
	...

0802c58c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 802c58c:	b580      	push	{r7, lr}
 802c58e:	b084      	sub	sp, #16
 802c590:	af00      	add	r7, sp, #0
 802c592:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802c594:	687b      	ldr	r3, [r7, #4]
 802c596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c59a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802c59c:	687b      	ldr	r3, [r7, #4]
 802c59e:	681b      	ldr	r3, [r3, #0]
 802c5a0:	685a      	ldr	r2, [r3, #4]
 802c5a2:	687b      	ldr	r3, [r7, #4]
 802c5a4:	681b      	ldr	r3, [r3, #0]
 802c5a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802c5aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 802c5ac:	2300      	movs	r3, #0
 802c5ae:	60bb      	str	r3, [r7, #8]
 802c5b0:	687b      	ldr	r3, [r7, #4]
 802c5b2:	681b      	ldr	r3, [r3, #0]
 802c5b4:	695b      	ldr	r3, [r3, #20]
 802c5b6:	60bb      	str	r3, [r7, #8]
 802c5b8:	687b      	ldr	r3, [r7, #4]
 802c5ba:	681b      	ldr	r3, [r3, #0]
 802c5bc:	681a      	ldr	r2, [r3, #0]
 802c5be:	687b      	ldr	r3, [r7, #4]
 802c5c0:	681b      	ldr	r3, [r3, #0]
 802c5c2:	f042 0201 	orr.w	r2, r2, #1
 802c5c6:	601a      	str	r2, [r3, #0]
 802c5c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802c5ca:	687b      	ldr	r3, [r7, #4]
 802c5cc:	681b      	ldr	r3, [r3, #0]
 802c5ce:	681a      	ldr	r2, [r3, #0]
 802c5d0:	687b      	ldr	r3, [r7, #4]
 802c5d2:	681b      	ldr	r3, [r3, #0]
 802c5d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802c5d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 802c5da:	687b      	ldr	r3, [r7, #4]
 802c5dc:	681b      	ldr	r3, [r3, #0]
 802c5de:	685b      	ldr	r3, [r3, #4]
 802c5e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802c5e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802c5e8:	d172      	bne.n	802c6d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 802c5ea:	7bfb      	ldrb	r3, [r7, #15]
 802c5ec:	2b22      	cmp	r3, #34	; 0x22
 802c5ee:	d002      	beq.n	802c5f6 <I2C_Slave_STOPF+0x6a>
 802c5f0:	7bfb      	ldrb	r3, [r7, #15]
 802c5f2:	2b2a      	cmp	r3, #42	; 0x2a
 802c5f4:	d135      	bne.n	802c662 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 802c5f6:	687b      	ldr	r3, [r7, #4]
 802c5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c5fa:	681b      	ldr	r3, [r3, #0]
 802c5fc:	685b      	ldr	r3, [r3, #4]
 802c5fe:	b29a      	uxth	r2, r3
 802c600:	687b      	ldr	r3, [r7, #4]
 802c602:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 802c604:	687b      	ldr	r3, [r7, #4]
 802c606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c608:	b29b      	uxth	r3, r3
 802c60a:	2b00      	cmp	r3, #0
 802c60c:	d005      	beq.n	802c61a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802c60e:	687b      	ldr	r3, [r7, #4]
 802c610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c612:	f043 0204 	orr.w	r2, r3, #4
 802c616:	687b      	ldr	r3, [r7, #4]
 802c618:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802c61a:	687b      	ldr	r3, [r7, #4]
 802c61c:	681b      	ldr	r3, [r3, #0]
 802c61e:	685a      	ldr	r2, [r3, #4]
 802c620:	687b      	ldr	r3, [r7, #4]
 802c622:	681b      	ldr	r3, [r3, #0]
 802c624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802c628:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802c62a:	687b      	ldr	r3, [r7, #4]
 802c62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c62e:	4618      	mov	r0, r3
 802c630:	f7fd fae4 	bl	8029bfc <HAL_DMA_GetState>
 802c634:	4603      	mov	r3, r0
 802c636:	2b01      	cmp	r3, #1
 802c638:	d049      	beq.n	802c6ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 802c63a:	687b      	ldr	r3, [r7, #4]
 802c63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c63e:	4a69      	ldr	r2, [pc, #420]	; (802c7e4 <I2C_Slave_STOPF+0x258>)
 802c640:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 802c642:	687b      	ldr	r3, [r7, #4]
 802c644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c646:	4618      	mov	r0, r3
 802c648:	f7fd f92c 	bl	80298a4 <HAL_DMA_Abort_IT>
 802c64c:	4603      	mov	r3, r0
 802c64e:	2b00      	cmp	r3, #0
 802c650:	d03d      	beq.n	802c6ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 802c652:	687b      	ldr	r3, [r7, #4]
 802c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c658:	687a      	ldr	r2, [r7, #4]
 802c65a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802c65c:	4610      	mov	r0, r2
 802c65e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802c660:	e035      	b.n	802c6ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 802c662:	687b      	ldr	r3, [r7, #4]
 802c664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c666:	681b      	ldr	r3, [r3, #0]
 802c668:	685b      	ldr	r3, [r3, #4]
 802c66a:	b29a      	uxth	r2, r3
 802c66c:	687b      	ldr	r3, [r7, #4]
 802c66e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 802c670:	687b      	ldr	r3, [r7, #4]
 802c672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c674:	b29b      	uxth	r3, r3
 802c676:	2b00      	cmp	r3, #0
 802c678:	d005      	beq.n	802c686 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802c67a:	687b      	ldr	r3, [r7, #4]
 802c67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c67e:	f043 0204 	orr.w	r2, r3, #4
 802c682:	687b      	ldr	r3, [r7, #4]
 802c684:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 802c686:	687b      	ldr	r3, [r7, #4]
 802c688:	681b      	ldr	r3, [r3, #0]
 802c68a:	685a      	ldr	r2, [r3, #4]
 802c68c:	687b      	ldr	r3, [r7, #4]
 802c68e:	681b      	ldr	r3, [r3, #0]
 802c690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802c694:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 802c696:	687b      	ldr	r3, [r7, #4]
 802c698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c69a:	4618      	mov	r0, r3
 802c69c:	f7fd faae 	bl	8029bfc <HAL_DMA_GetState>
 802c6a0:	4603      	mov	r3, r0
 802c6a2:	2b01      	cmp	r3, #1
 802c6a4:	d014      	beq.n	802c6d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 802c6a6:	687b      	ldr	r3, [r7, #4]
 802c6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c6aa:	4a4e      	ldr	r2, [pc, #312]	; (802c7e4 <I2C_Slave_STOPF+0x258>)
 802c6ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 802c6ae:	687b      	ldr	r3, [r7, #4]
 802c6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c6b2:	4618      	mov	r0, r3
 802c6b4:	f7fd f8f6 	bl	80298a4 <HAL_DMA_Abort_IT>
 802c6b8:	4603      	mov	r3, r0
 802c6ba:	2b00      	cmp	r3, #0
 802c6bc:	d008      	beq.n	802c6d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 802c6be:	687b      	ldr	r3, [r7, #4]
 802c6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c6c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c6c4:	687a      	ldr	r2, [r7, #4]
 802c6c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802c6c8:	4610      	mov	r0, r2
 802c6ca:	4798      	blx	r3
 802c6cc:	e000      	b.n	802c6d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 802c6ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 802c6d0:	687b      	ldr	r3, [r7, #4]
 802c6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c6d4:	b29b      	uxth	r3, r3
 802c6d6:	2b00      	cmp	r3, #0
 802c6d8:	d03e      	beq.n	802c758 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 802c6da:	687b      	ldr	r3, [r7, #4]
 802c6dc:	681b      	ldr	r3, [r3, #0]
 802c6de:	695b      	ldr	r3, [r3, #20]
 802c6e0:	f003 0304 	and.w	r3, r3, #4
 802c6e4:	2b04      	cmp	r3, #4
 802c6e6:	d112      	bne.n	802c70e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802c6e8:	687b      	ldr	r3, [r7, #4]
 802c6ea:	681b      	ldr	r3, [r3, #0]
 802c6ec:	691a      	ldr	r2, [r3, #16]
 802c6ee:	687b      	ldr	r3, [r7, #4]
 802c6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c6f2:	b2d2      	uxtb	r2, r2
 802c6f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802c6f6:	687b      	ldr	r3, [r7, #4]
 802c6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c6fa:	1c5a      	adds	r2, r3, #1
 802c6fc:	687b      	ldr	r3, [r7, #4]
 802c6fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 802c700:	687b      	ldr	r3, [r7, #4]
 802c702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c704:	b29b      	uxth	r3, r3
 802c706:	3b01      	subs	r3, #1
 802c708:	b29a      	uxth	r2, r3
 802c70a:	687b      	ldr	r3, [r7, #4]
 802c70c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 802c70e:	687b      	ldr	r3, [r7, #4]
 802c710:	681b      	ldr	r3, [r3, #0]
 802c712:	695b      	ldr	r3, [r3, #20]
 802c714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c718:	2b40      	cmp	r3, #64	; 0x40
 802c71a:	d112      	bne.n	802c742 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802c71c:	687b      	ldr	r3, [r7, #4]
 802c71e:	681b      	ldr	r3, [r3, #0]
 802c720:	691a      	ldr	r2, [r3, #16]
 802c722:	687b      	ldr	r3, [r7, #4]
 802c724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c726:	b2d2      	uxtb	r2, r2
 802c728:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802c72a:	687b      	ldr	r3, [r7, #4]
 802c72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c72e:	1c5a      	adds	r2, r3, #1
 802c730:	687b      	ldr	r3, [r7, #4]
 802c732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 802c734:	687b      	ldr	r3, [r7, #4]
 802c736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c738:	b29b      	uxth	r3, r3
 802c73a:	3b01      	subs	r3, #1
 802c73c:	b29a      	uxth	r2, r3
 802c73e:	687b      	ldr	r3, [r7, #4]
 802c740:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 802c742:	687b      	ldr	r3, [r7, #4]
 802c744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 802c746:	b29b      	uxth	r3, r3
 802c748:	2b00      	cmp	r3, #0
 802c74a:	d005      	beq.n	802c758 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 802c74c:	687b      	ldr	r3, [r7, #4]
 802c74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c750:	f043 0204 	orr.w	r2, r3, #4
 802c754:	687b      	ldr	r3, [r7, #4]
 802c756:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 802c758:	687b      	ldr	r3, [r7, #4]
 802c75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c75c:	2b00      	cmp	r3, #0
 802c75e:	d003      	beq.n	802c768 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 802c760:	6878      	ldr	r0, [r7, #4]
 802c762:	f000 f843 	bl	802c7ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 802c766:	e039      	b.n	802c7dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 802c768:	7bfb      	ldrb	r3, [r7, #15]
 802c76a:	2b2a      	cmp	r3, #42	; 0x2a
 802c76c:	d109      	bne.n	802c782 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 802c76e:	687b      	ldr	r3, [r7, #4]
 802c770:	2200      	movs	r2, #0
 802c772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 802c774:	687b      	ldr	r3, [r7, #4]
 802c776:	2228      	movs	r2, #40	; 0x28
 802c778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 802c77c:	6878      	ldr	r0, [r7, #4]
 802c77e:	f7ff f85f 	bl	802b840 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 802c782:	687b      	ldr	r3, [r7, #4]
 802c784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c788:	b2db      	uxtb	r3, r3
 802c78a:	2b28      	cmp	r3, #40	; 0x28
 802c78c:	d111      	bne.n	802c7b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 802c78e:	687b      	ldr	r3, [r7, #4]
 802c790:	4a15      	ldr	r2, [pc, #84]	; (802c7e8 <I2C_Slave_STOPF+0x25c>)
 802c792:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 802c794:	687b      	ldr	r3, [r7, #4]
 802c796:	2200      	movs	r2, #0
 802c798:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 802c79a:	687b      	ldr	r3, [r7, #4]
 802c79c:	2220      	movs	r2, #32
 802c79e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802c7a2:	687b      	ldr	r3, [r7, #4]
 802c7a4:	2200      	movs	r2, #0
 802c7a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 802c7aa:	6878      	ldr	r0, [r7, #4]
 802c7ac:	f7ff f860 	bl	802b870 <HAL_I2C_ListenCpltCallback>
}
 802c7b0:	e014      	b.n	802c7dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 802c7b2:	687b      	ldr	r3, [r7, #4]
 802c7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c7b6:	2b22      	cmp	r3, #34	; 0x22
 802c7b8:	d002      	beq.n	802c7c0 <I2C_Slave_STOPF+0x234>
 802c7ba:	7bfb      	ldrb	r3, [r7, #15]
 802c7bc:	2b22      	cmp	r3, #34	; 0x22
 802c7be:	d10d      	bne.n	802c7dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 802c7c0:	687b      	ldr	r3, [r7, #4]
 802c7c2:	2200      	movs	r2, #0
 802c7c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 802c7c6:	687b      	ldr	r3, [r7, #4]
 802c7c8:	2220      	movs	r2, #32
 802c7ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 802c7ce:	687b      	ldr	r3, [r7, #4]
 802c7d0:	2200      	movs	r2, #0
 802c7d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 802c7d6:	6878      	ldr	r0, [r7, #4]
 802c7d8:	f7ff f832 	bl	802b840 <HAL_I2C_SlaveRxCpltCallback>
}
 802c7dc:	bf00      	nop
 802c7de:	3710      	adds	r7, #16
 802c7e0:	46bd      	mov	sp, r7
 802c7e2:	bd80      	pop	{r7, pc}
 802c7e4:	0802ccf1 	.word	0x0802ccf1
 802c7e8:	ffff0000 	.word	0xffff0000

0802c7ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 802c7ec:	b580      	push	{r7, lr}
 802c7ee:	b084      	sub	sp, #16
 802c7f0:	af00      	add	r7, sp, #0
 802c7f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802c7f4:	687b      	ldr	r3, [r7, #4]
 802c7f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c7fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 802c7fc:	687b      	ldr	r3, [r7, #4]
 802c7fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802c802:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 802c804:	7bbb      	ldrb	r3, [r7, #14]
 802c806:	2b10      	cmp	r3, #16
 802c808:	d002      	beq.n	802c810 <I2C_ITError+0x24>
 802c80a:	7bbb      	ldrb	r3, [r7, #14]
 802c80c:	2b40      	cmp	r3, #64	; 0x40
 802c80e:	d10a      	bne.n	802c826 <I2C_ITError+0x3a>
 802c810:	7bfb      	ldrb	r3, [r7, #15]
 802c812:	2b22      	cmp	r3, #34	; 0x22
 802c814:	d107      	bne.n	802c826 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 802c816:	687b      	ldr	r3, [r7, #4]
 802c818:	681b      	ldr	r3, [r3, #0]
 802c81a:	681a      	ldr	r2, [r3, #0]
 802c81c:	687b      	ldr	r3, [r7, #4]
 802c81e:	681b      	ldr	r3, [r3, #0]
 802c820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802c824:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802c826:	7bfb      	ldrb	r3, [r7, #15]
 802c828:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802c82c:	2b28      	cmp	r3, #40	; 0x28
 802c82e:	d107      	bne.n	802c840 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 802c830:	687b      	ldr	r3, [r7, #4]
 802c832:	2200      	movs	r2, #0
 802c834:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 802c836:	687b      	ldr	r3, [r7, #4]
 802c838:	2228      	movs	r2, #40	; 0x28
 802c83a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802c83e:	e015      	b.n	802c86c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 802c840:	687b      	ldr	r3, [r7, #4]
 802c842:	681b      	ldr	r3, [r3, #0]
 802c844:	685b      	ldr	r3, [r3, #4]
 802c846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802c84a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802c84e:	d00a      	beq.n	802c866 <I2C_ITError+0x7a>
 802c850:	7bfb      	ldrb	r3, [r7, #15]
 802c852:	2b60      	cmp	r3, #96	; 0x60
 802c854:	d007      	beq.n	802c866 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 802c856:	687b      	ldr	r3, [r7, #4]
 802c858:	2220      	movs	r2, #32
 802c85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802c85e:	687b      	ldr	r3, [r7, #4]
 802c860:	2200      	movs	r2, #0
 802c862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 802c866:	687b      	ldr	r3, [r7, #4]
 802c868:	2200      	movs	r2, #0
 802c86a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 802c86c:	687b      	ldr	r3, [r7, #4]
 802c86e:	681b      	ldr	r3, [r3, #0]
 802c870:	685b      	ldr	r3, [r3, #4]
 802c872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802c876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802c87a:	d162      	bne.n	802c942 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 802c87c:	687b      	ldr	r3, [r7, #4]
 802c87e:	681b      	ldr	r3, [r3, #0]
 802c880:	685a      	ldr	r2, [r3, #4]
 802c882:	687b      	ldr	r3, [r7, #4]
 802c884:	681b      	ldr	r3, [r3, #0]
 802c886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802c88a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 802c88c:	687b      	ldr	r3, [r7, #4]
 802c88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802c894:	b2db      	uxtb	r3, r3
 802c896:	2b01      	cmp	r3, #1
 802c898:	d020      	beq.n	802c8dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 802c89a:	687b      	ldr	r3, [r7, #4]
 802c89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c89e:	4a6a      	ldr	r2, [pc, #424]	; (802ca48 <I2C_ITError+0x25c>)
 802c8a0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 802c8a2:	687b      	ldr	r3, [r7, #4]
 802c8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c8a6:	4618      	mov	r0, r3
 802c8a8:	f7fc fffc 	bl	80298a4 <HAL_DMA_Abort_IT>
 802c8ac:	4603      	mov	r3, r0
 802c8ae:	2b00      	cmp	r3, #0
 802c8b0:	f000 8089 	beq.w	802c9c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 802c8b4:	687b      	ldr	r3, [r7, #4]
 802c8b6:	681b      	ldr	r3, [r3, #0]
 802c8b8:	681a      	ldr	r2, [r3, #0]
 802c8ba:	687b      	ldr	r3, [r7, #4]
 802c8bc:	681b      	ldr	r3, [r3, #0]
 802c8be:	f022 0201 	bic.w	r2, r2, #1
 802c8c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 802c8c4:	687b      	ldr	r3, [r7, #4]
 802c8c6:	2220      	movs	r2, #32
 802c8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 802c8cc:	687b      	ldr	r3, [r7, #4]
 802c8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802c8d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c8d2:	687a      	ldr	r2, [r7, #4]
 802c8d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802c8d6:	4610      	mov	r0, r2
 802c8d8:	4798      	blx	r3
 802c8da:	e074      	b.n	802c9c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 802c8dc:	687b      	ldr	r3, [r7, #4]
 802c8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c8e0:	4a59      	ldr	r2, [pc, #356]	; (802ca48 <I2C_ITError+0x25c>)
 802c8e2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 802c8e4:	687b      	ldr	r3, [r7, #4]
 802c8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c8e8:	4618      	mov	r0, r3
 802c8ea:	f7fc ffdb 	bl	80298a4 <HAL_DMA_Abort_IT>
 802c8ee:	4603      	mov	r3, r0
 802c8f0:	2b00      	cmp	r3, #0
 802c8f2:	d068      	beq.n	802c9c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 802c8f4:	687b      	ldr	r3, [r7, #4]
 802c8f6:	681b      	ldr	r3, [r3, #0]
 802c8f8:	695b      	ldr	r3, [r3, #20]
 802c8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c8fe:	2b40      	cmp	r3, #64	; 0x40
 802c900:	d10b      	bne.n	802c91a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802c902:	687b      	ldr	r3, [r7, #4]
 802c904:	681b      	ldr	r3, [r3, #0]
 802c906:	691a      	ldr	r2, [r3, #16]
 802c908:	687b      	ldr	r3, [r7, #4]
 802c90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c90c:	b2d2      	uxtb	r2, r2
 802c90e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 802c910:	687b      	ldr	r3, [r7, #4]
 802c912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c914:	1c5a      	adds	r2, r3, #1
 802c916:	687b      	ldr	r3, [r7, #4]
 802c918:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 802c91a:	687b      	ldr	r3, [r7, #4]
 802c91c:	681b      	ldr	r3, [r3, #0]
 802c91e:	681a      	ldr	r2, [r3, #0]
 802c920:	687b      	ldr	r3, [r7, #4]
 802c922:	681b      	ldr	r3, [r3, #0]
 802c924:	f022 0201 	bic.w	r2, r2, #1
 802c928:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 802c92a:	687b      	ldr	r3, [r7, #4]
 802c92c:	2220      	movs	r2, #32
 802c92e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 802c932:	687b      	ldr	r3, [r7, #4]
 802c934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802c936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802c938:	687a      	ldr	r2, [r7, #4]
 802c93a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 802c93c:	4610      	mov	r0, r2
 802c93e:	4798      	blx	r3
 802c940:	e041      	b.n	802c9c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 802c942:	687b      	ldr	r3, [r7, #4]
 802c944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802c948:	b2db      	uxtb	r3, r3
 802c94a:	2b60      	cmp	r3, #96	; 0x60
 802c94c:	d125      	bne.n	802c99a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 802c94e:	687b      	ldr	r3, [r7, #4]
 802c950:	2220      	movs	r2, #32
 802c952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802c956:	687b      	ldr	r3, [r7, #4]
 802c958:	2200      	movs	r2, #0
 802c95a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 802c95c:	687b      	ldr	r3, [r7, #4]
 802c95e:	681b      	ldr	r3, [r3, #0]
 802c960:	695b      	ldr	r3, [r3, #20]
 802c962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c966:	2b40      	cmp	r3, #64	; 0x40
 802c968:	d10b      	bne.n	802c982 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802c96a:	687b      	ldr	r3, [r7, #4]
 802c96c:	681b      	ldr	r3, [r3, #0]
 802c96e:	691a      	ldr	r2, [r3, #16]
 802c970:	687b      	ldr	r3, [r7, #4]
 802c972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c974:	b2d2      	uxtb	r2, r2
 802c976:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802c978:	687b      	ldr	r3, [r7, #4]
 802c97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c97c:	1c5a      	adds	r2, r3, #1
 802c97e:	687b      	ldr	r3, [r7, #4]
 802c980:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 802c982:	687b      	ldr	r3, [r7, #4]
 802c984:	681b      	ldr	r3, [r3, #0]
 802c986:	681a      	ldr	r2, [r3, #0]
 802c988:	687b      	ldr	r3, [r7, #4]
 802c98a:	681b      	ldr	r3, [r3, #0]
 802c98c:	f022 0201 	bic.w	r2, r2, #1
 802c990:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802c992:	6878      	ldr	r0, [r7, #4]
 802c994:	f7fe ff80 	bl	802b898 <HAL_I2C_AbortCpltCallback>
 802c998:	e015      	b.n	802c9c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 802c99a:	687b      	ldr	r3, [r7, #4]
 802c99c:	681b      	ldr	r3, [r3, #0]
 802c99e:	695b      	ldr	r3, [r3, #20]
 802c9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802c9a4:	2b40      	cmp	r3, #64	; 0x40
 802c9a6:	d10b      	bne.n	802c9c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 802c9a8:	687b      	ldr	r3, [r7, #4]
 802c9aa:	681b      	ldr	r3, [r3, #0]
 802c9ac:	691a      	ldr	r2, [r3, #16]
 802c9ae:	687b      	ldr	r3, [r7, #4]
 802c9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c9b2:	b2d2      	uxtb	r2, r2
 802c9b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 802c9b6:	687b      	ldr	r3, [r7, #4]
 802c9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c9ba:	1c5a      	adds	r2, r3, #1
 802c9bc:	687b      	ldr	r3, [r7, #4]
 802c9be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 802c9c0:	6878      	ldr	r0, [r7, #4]
 802c9c2:	f7fe ff5f 	bl	802b884 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 802c9c6:	687b      	ldr	r3, [r7, #4]
 802c9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802c9ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 802c9cc:	68bb      	ldr	r3, [r7, #8]
 802c9ce:	f003 0301 	and.w	r3, r3, #1
 802c9d2:	2b00      	cmp	r3, #0
 802c9d4:	d10e      	bne.n	802c9f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 802c9d6:	68bb      	ldr	r3, [r7, #8]
 802c9d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 802c9dc:	2b00      	cmp	r3, #0
 802c9de:	d109      	bne.n	802c9f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 802c9e0:	68bb      	ldr	r3, [r7, #8]
 802c9e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 802c9e6:	2b00      	cmp	r3, #0
 802c9e8:	d104      	bne.n	802c9f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 802c9ea:	68bb      	ldr	r3, [r7, #8]
 802c9ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 802c9f0:	2b00      	cmp	r3, #0
 802c9f2:	d007      	beq.n	802ca04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 802c9f4:	687b      	ldr	r3, [r7, #4]
 802c9f6:	681b      	ldr	r3, [r3, #0]
 802c9f8:	685a      	ldr	r2, [r3, #4]
 802c9fa:	687b      	ldr	r3, [r7, #4]
 802c9fc:	681b      	ldr	r3, [r3, #0]
 802c9fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 802ca02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 802ca04:	687b      	ldr	r3, [r7, #4]
 802ca06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802ca0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 802ca0c:	687b      	ldr	r3, [r7, #4]
 802ca0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ca10:	f003 0304 	and.w	r3, r3, #4
 802ca14:	2b04      	cmp	r3, #4
 802ca16:	d113      	bne.n	802ca40 <I2C_ITError+0x254>
 802ca18:	7bfb      	ldrb	r3, [r7, #15]
 802ca1a:	2b28      	cmp	r3, #40	; 0x28
 802ca1c:	d110      	bne.n	802ca40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 802ca1e:	687b      	ldr	r3, [r7, #4]
 802ca20:	4a0a      	ldr	r2, [pc, #40]	; (802ca4c <I2C_ITError+0x260>)
 802ca22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 802ca24:	687b      	ldr	r3, [r7, #4]
 802ca26:	2200      	movs	r2, #0
 802ca28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 802ca2a:	687b      	ldr	r3, [r7, #4]
 802ca2c:	2220      	movs	r2, #32
 802ca2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 802ca32:	687b      	ldr	r3, [r7, #4]
 802ca34:	2200      	movs	r2, #0
 802ca36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 802ca3a:	6878      	ldr	r0, [r7, #4]
 802ca3c:	f7fe ff18 	bl	802b870 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802ca40:	bf00      	nop
 802ca42:	3710      	adds	r7, #16
 802ca44:	46bd      	mov	sp, r7
 802ca46:	bd80      	pop	{r7, pc}
 802ca48:	0802ccf1 	.word	0x0802ccf1
 802ca4c:	ffff0000 	.word	0xffff0000

0802ca50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 802ca50:	b580      	push	{r7, lr}
 802ca52:	b088      	sub	sp, #32
 802ca54:	af02      	add	r7, sp, #8
 802ca56:	60f8      	str	r0, [r7, #12]
 802ca58:	607a      	str	r2, [r7, #4]
 802ca5a:	603b      	str	r3, [r7, #0]
 802ca5c:	460b      	mov	r3, r1
 802ca5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 802ca60:	68fb      	ldr	r3, [r7, #12]
 802ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ca64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 802ca66:	697b      	ldr	r3, [r7, #20]
 802ca68:	2b08      	cmp	r3, #8
 802ca6a:	d006      	beq.n	802ca7a <I2C_MasterRequestWrite+0x2a>
 802ca6c:	697b      	ldr	r3, [r7, #20]
 802ca6e:	2b01      	cmp	r3, #1
 802ca70:	d003      	beq.n	802ca7a <I2C_MasterRequestWrite+0x2a>
 802ca72:	697b      	ldr	r3, [r7, #20]
 802ca74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802ca78:	d108      	bne.n	802ca8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802ca7a:	68fb      	ldr	r3, [r7, #12]
 802ca7c:	681b      	ldr	r3, [r3, #0]
 802ca7e:	681a      	ldr	r2, [r3, #0]
 802ca80:	68fb      	ldr	r3, [r7, #12]
 802ca82:	681b      	ldr	r3, [r3, #0]
 802ca84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802ca88:	601a      	str	r2, [r3, #0]
 802ca8a:	e00b      	b.n	802caa4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 802ca8c:	68fb      	ldr	r3, [r7, #12]
 802ca8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ca90:	2b12      	cmp	r3, #18
 802ca92:	d107      	bne.n	802caa4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802ca94:	68fb      	ldr	r3, [r7, #12]
 802ca96:	681b      	ldr	r3, [r3, #0]
 802ca98:	681a      	ldr	r2, [r3, #0]
 802ca9a:	68fb      	ldr	r3, [r7, #12]
 802ca9c:	681b      	ldr	r3, [r3, #0]
 802ca9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802caa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802caa4:	683b      	ldr	r3, [r7, #0]
 802caa6:	9300      	str	r3, [sp, #0]
 802caa8:	687b      	ldr	r3, [r7, #4]
 802caaa:	2200      	movs	r2, #0
 802caac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802cab0:	68f8      	ldr	r0, [r7, #12]
 802cab2:	f000 f9c5 	bl	802ce40 <I2C_WaitOnFlagUntilTimeout>
 802cab6:	4603      	mov	r3, r0
 802cab8:	2b00      	cmp	r3, #0
 802caba:	d00d      	beq.n	802cad8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802cabc:	68fb      	ldr	r3, [r7, #12]
 802cabe:	681b      	ldr	r3, [r3, #0]
 802cac0:	681b      	ldr	r3, [r3, #0]
 802cac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802cac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802caca:	d103      	bne.n	802cad4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802cacc:	68fb      	ldr	r3, [r7, #12]
 802cace:	f44f 7200 	mov.w	r2, #512	; 0x200
 802cad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 802cad4:	2303      	movs	r3, #3
 802cad6:	e035      	b.n	802cb44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802cad8:	68fb      	ldr	r3, [r7, #12]
 802cada:	691b      	ldr	r3, [r3, #16]
 802cadc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802cae0:	d108      	bne.n	802caf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 802cae2:	897b      	ldrh	r3, [r7, #10]
 802cae4:	b2db      	uxtb	r3, r3
 802cae6:	461a      	mov	r2, r3
 802cae8:	68fb      	ldr	r3, [r7, #12]
 802caea:	681b      	ldr	r3, [r3, #0]
 802caec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 802caf0:	611a      	str	r2, [r3, #16]
 802caf2:	e01b      	b.n	802cb2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 802caf4:	897b      	ldrh	r3, [r7, #10]
 802caf6:	11db      	asrs	r3, r3, #7
 802caf8:	b2db      	uxtb	r3, r3
 802cafa:	f003 0306 	and.w	r3, r3, #6
 802cafe:	b2db      	uxtb	r3, r3
 802cb00:	f063 030f 	orn	r3, r3, #15
 802cb04:	b2da      	uxtb	r2, r3
 802cb06:	68fb      	ldr	r3, [r7, #12]
 802cb08:	681b      	ldr	r3, [r3, #0]
 802cb0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 802cb0c:	683b      	ldr	r3, [r7, #0]
 802cb0e:	687a      	ldr	r2, [r7, #4]
 802cb10:	490e      	ldr	r1, [pc, #56]	; (802cb4c <I2C_MasterRequestWrite+0xfc>)
 802cb12:	68f8      	ldr	r0, [r7, #12]
 802cb14:	f000 f9eb 	bl	802ceee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802cb18:	4603      	mov	r3, r0
 802cb1a:	2b00      	cmp	r3, #0
 802cb1c:	d001      	beq.n	802cb22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 802cb1e:	2301      	movs	r3, #1
 802cb20:	e010      	b.n	802cb44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 802cb22:	897b      	ldrh	r3, [r7, #10]
 802cb24:	b2da      	uxtb	r2, r3
 802cb26:	68fb      	ldr	r3, [r7, #12]
 802cb28:	681b      	ldr	r3, [r3, #0]
 802cb2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 802cb2c:	683b      	ldr	r3, [r7, #0]
 802cb2e:	687a      	ldr	r2, [r7, #4]
 802cb30:	4907      	ldr	r1, [pc, #28]	; (802cb50 <I2C_MasterRequestWrite+0x100>)
 802cb32:	68f8      	ldr	r0, [r7, #12]
 802cb34:	f000 f9db 	bl	802ceee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802cb38:	4603      	mov	r3, r0
 802cb3a:	2b00      	cmp	r3, #0
 802cb3c:	d001      	beq.n	802cb42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 802cb3e:	2301      	movs	r3, #1
 802cb40:	e000      	b.n	802cb44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 802cb42:	2300      	movs	r3, #0
}
 802cb44:	4618      	mov	r0, r3
 802cb46:	3718      	adds	r7, #24
 802cb48:	46bd      	mov	sp, r7
 802cb4a:	bd80      	pop	{r7, pc}
 802cb4c:	00010008 	.word	0x00010008
 802cb50:	00010002 	.word	0x00010002

0802cb54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 802cb54:	b580      	push	{r7, lr}
 802cb56:	b088      	sub	sp, #32
 802cb58:	af02      	add	r7, sp, #8
 802cb5a:	60f8      	str	r0, [r7, #12]
 802cb5c:	607a      	str	r2, [r7, #4]
 802cb5e:	603b      	str	r3, [r7, #0]
 802cb60:	460b      	mov	r3, r1
 802cb62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 802cb64:	68fb      	ldr	r3, [r7, #12]
 802cb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802cb68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802cb6a:	68fb      	ldr	r3, [r7, #12]
 802cb6c:	681b      	ldr	r3, [r3, #0]
 802cb6e:	681a      	ldr	r2, [r3, #0]
 802cb70:	68fb      	ldr	r3, [r7, #12]
 802cb72:	681b      	ldr	r3, [r3, #0]
 802cb74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802cb78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 802cb7a:	697b      	ldr	r3, [r7, #20]
 802cb7c:	2b08      	cmp	r3, #8
 802cb7e:	d006      	beq.n	802cb8e <I2C_MasterRequestRead+0x3a>
 802cb80:	697b      	ldr	r3, [r7, #20]
 802cb82:	2b01      	cmp	r3, #1
 802cb84:	d003      	beq.n	802cb8e <I2C_MasterRequestRead+0x3a>
 802cb86:	697b      	ldr	r3, [r7, #20]
 802cb88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 802cb8c:	d108      	bne.n	802cba0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802cb8e:	68fb      	ldr	r3, [r7, #12]
 802cb90:	681b      	ldr	r3, [r3, #0]
 802cb92:	681a      	ldr	r2, [r3, #0]
 802cb94:	68fb      	ldr	r3, [r7, #12]
 802cb96:	681b      	ldr	r3, [r3, #0]
 802cb98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802cb9c:	601a      	str	r2, [r3, #0]
 802cb9e:	e00b      	b.n	802cbb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 802cba0:	68fb      	ldr	r3, [r7, #12]
 802cba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cba4:	2b11      	cmp	r3, #17
 802cba6:	d107      	bne.n	802cbb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802cba8:	68fb      	ldr	r3, [r7, #12]
 802cbaa:	681b      	ldr	r3, [r3, #0]
 802cbac:	681a      	ldr	r2, [r3, #0]
 802cbae:	68fb      	ldr	r3, [r7, #12]
 802cbb0:	681b      	ldr	r3, [r3, #0]
 802cbb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802cbb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802cbb8:	683b      	ldr	r3, [r7, #0]
 802cbba:	9300      	str	r3, [sp, #0]
 802cbbc:	687b      	ldr	r3, [r7, #4]
 802cbbe:	2200      	movs	r2, #0
 802cbc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802cbc4:	68f8      	ldr	r0, [r7, #12]
 802cbc6:	f000 f93b 	bl	802ce40 <I2C_WaitOnFlagUntilTimeout>
 802cbca:	4603      	mov	r3, r0
 802cbcc:	2b00      	cmp	r3, #0
 802cbce:	d00d      	beq.n	802cbec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802cbd0:	68fb      	ldr	r3, [r7, #12]
 802cbd2:	681b      	ldr	r3, [r3, #0]
 802cbd4:	681b      	ldr	r3, [r3, #0]
 802cbd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802cbda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802cbde:	d103      	bne.n	802cbe8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802cbe0:	68fb      	ldr	r3, [r7, #12]
 802cbe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 802cbe6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 802cbe8:	2303      	movs	r3, #3
 802cbea:	e079      	b.n	802cce0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 802cbec:	68fb      	ldr	r3, [r7, #12]
 802cbee:	691b      	ldr	r3, [r3, #16]
 802cbf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802cbf4:	d108      	bne.n	802cc08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 802cbf6:	897b      	ldrh	r3, [r7, #10]
 802cbf8:	b2db      	uxtb	r3, r3
 802cbfa:	f043 0301 	orr.w	r3, r3, #1
 802cbfe:	b2da      	uxtb	r2, r3
 802cc00:	68fb      	ldr	r3, [r7, #12]
 802cc02:	681b      	ldr	r3, [r3, #0]
 802cc04:	611a      	str	r2, [r3, #16]
 802cc06:	e05f      	b.n	802ccc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 802cc08:	897b      	ldrh	r3, [r7, #10]
 802cc0a:	11db      	asrs	r3, r3, #7
 802cc0c:	b2db      	uxtb	r3, r3
 802cc0e:	f003 0306 	and.w	r3, r3, #6
 802cc12:	b2db      	uxtb	r3, r3
 802cc14:	f063 030f 	orn	r3, r3, #15
 802cc18:	b2da      	uxtb	r2, r3
 802cc1a:	68fb      	ldr	r3, [r7, #12]
 802cc1c:	681b      	ldr	r3, [r3, #0]
 802cc1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 802cc20:	683b      	ldr	r3, [r7, #0]
 802cc22:	687a      	ldr	r2, [r7, #4]
 802cc24:	4930      	ldr	r1, [pc, #192]	; (802cce8 <I2C_MasterRequestRead+0x194>)
 802cc26:	68f8      	ldr	r0, [r7, #12]
 802cc28:	f000 f961 	bl	802ceee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802cc2c:	4603      	mov	r3, r0
 802cc2e:	2b00      	cmp	r3, #0
 802cc30:	d001      	beq.n	802cc36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 802cc32:	2301      	movs	r3, #1
 802cc34:	e054      	b.n	802cce0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 802cc36:	897b      	ldrh	r3, [r7, #10]
 802cc38:	b2da      	uxtb	r2, r3
 802cc3a:	68fb      	ldr	r3, [r7, #12]
 802cc3c:	681b      	ldr	r3, [r3, #0]
 802cc3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 802cc40:	683b      	ldr	r3, [r7, #0]
 802cc42:	687a      	ldr	r2, [r7, #4]
 802cc44:	4929      	ldr	r1, [pc, #164]	; (802ccec <I2C_MasterRequestRead+0x198>)
 802cc46:	68f8      	ldr	r0, [r7, #12]
 802cc48:	f000 f951 	bl	802ceee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802cc4c:	4603      	mov	r3, r0
 802cc4e:	2b00      	cmp	r3, #0
 802cc50:	d001      	beq.n	802cc56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 802cc52:	2301      	movs	r3, #1
 802cc54:	e044      	b.n	802cce0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 802cc56:	2300      	movs	r3, #0
 802cc58:	613b      	str	r3, [r7, #16]
 802cc5a:	68fb      	ldr	r3, [r7, #12]
 802cc5c:	681b      	ldr	r3, [r3, #0]
 802cc5e:	695b      	ldr	r3, [r3, #20]
 802cc60:	613b      	str	r3, [r7, #16]
 802cc62:	68fb      	ldr	r3, [r7, #12]
 802cc64:	681b      	ldr	r3, [r3, #0]
 802cc66:	699b      	ldr	r3, [r3, #24]
 802cc68:	613b      	str	r3, [r7, #16]
 802cc6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 802cc6c:	68fb      	ldr	r3, [r7, #12]
 802cc6e:	681b      	ldr	r3, [r3, #0]
 802cc70:	681a      	ldr	r2, [r3, #0]
 802cc72:	68fb      	ldr	r3, [r7, #12]
 802cc74:	681b      	ldr	r3, [r3, #0]
 802cc76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802cc7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 802cc7c:	683b      	ldr	r3, [r7, #0]
 802cc7e:	9300      	str	r3, [sp, #0]
 802cc80:	687b      	ldr	r3, [r7, #4]
 802cc82:	2200      	movs	r2, #0
 802cc84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 802cc88:	68f8      	ldr	r0, [r7, #12]
 802cc8a:	f000 f8d9 	bl	802ce40 <I2C_WaitOnFlagUntilTimeout>
 802cc8e:	4603      	mov	r3, r0
 802cc90:	2b00      	cmp	r3, #0
 802cc92:	d00d      	beq.n	802ccb0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 802cc94:	68fb      	ldr	r3, [r7, #12]
 802cc96:	681b      	ldr	r3, [r3, #0]
 802cc98:	681b      	ldr	r3, [r3, #0]
 802cc9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802cc9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802cca2:	d103      	bne.n	802ccac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 802cca4:	68fb      	ldr	r3, [r7, #12]
 802cca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 802ccaa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 802ccac:	2303      	movs	r3, #3
 802ccae:	e017      	b.n	802cce0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 802ccb0:	897b      	ldrh	r3, [r7, #10]
 802ccb2:	11db      	asrs	r3, r3, #7
 802ccb4:	b2db      	uxtb	r3, r3
 802ccb6:	f003 0306 	and.w	r3, r3, #6
 802ccba:	b2db      	uxtb	r3, r3
 802ccbc:	f063 030e 	orn	r3, r3, #14
 802ccc0:	b2da      	uxtb	r2, r3
 802ccc2:	68fb      	ldr	r3, [r7, #12]
 802ccc4:	681b      	ldr	r3, [r3, #0]
 802ccc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 802ccc8:	683b      	ldr	r3, [r7, #0]
 802ccca:	687a      	ldr	r2, [r7, #4]
 802cccc:	4907      	ldr	r1, [pc, #28]	; (802ccec <I2C_MasterRequestRead+0x198>)
 802ccce:	68f8      	ldr	r0, [r7, #12]
 802ccd0:	f000 f90d 	bl	802ceee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 802ccd4:	4603      	mov	r3, r0
 802ccd6:	2b00      	cmp	r3, #0
 802ccd8:	d001      	beq.n	802ccde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 802ccda:	2301      	movs	r3, #1
 802ccdc:	e000      	b.n	802cce0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 802ccde:	2300      	movs	r3, #0
}
 802cce0:	4618      	mov	r0, r3
 802cce2:	3718      	adds	r7, #24
 802cce4:	46bd      	mov	sp, r7
 802cce6:	bd80      	pop	{r7, pc}
 802cce8:	00010008 	.word	0x00010008
 802ccec:	00010002 	.word	0x00010002

0802ccf0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 802ccf0:	b580      	push	{r7, lr}
 802ccf2:	b086      	sub	sp, #24
 802ccf4:	af00      	add	r7, sp, #0
 802ccf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802ccf8:	2300      	movs	r3, #0
 802ccfa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 802ccfc:	687b      	ldr	r3, [r7, #4]
 802ccfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cd00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 802cd02:	697b      	ldr	r3, [r7, #20]
 802cd04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802cd08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 802cd0a:	4b4b      	ldr	r3, [pc, #300]	; (802ce38 <I2C_DMAAbort+0x148>)
 802cd0c:	681b      	ldr	r3, [r3, #0]
 802cd0e:	08db      	lsrs	r3, r3, #3
 802cd10:	4a4a      	ldr	r2, [pc, #296]	; (802ce3c <I2C_DMAAbort+0x14c>)
 802cd12:	fba2 2303 	umull	r2, r3, r2, r3
 802cd16:	0a1a      	lsrs	r2, r3, #8
 802cd18:	4613      	mov	r3, r2
 802cd1a:	009b      	lsls	r3, r3, #2
 802cd1c:	4413      	add	r3, r2
 802cd1e:	00da      	lsls	r2, r3, #3
 802cd20:	1ad3      	subs	r3, r2, r3
 802cd22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 802cd24:	68fb      	ldr	r3, [r7, #12]
 802cd26:	2b00      	cmp	r3, #0
 802cd28:	d106      	bne.n	802cd38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 802cd2a:	697b      	ldr	r3, [r7, #20]
 802cd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802cd2e:	f043 0220 	orr.w	r2, r3, #32
 802cd32:	697b      	ldr	r3, [r7, #20]
 802cd34:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 802cd36:	e00a      	b.n	802cd4e <I2C_DMAAbort+0x5e>
    }
    count--;
 802cd38:	68fb      	ldr	r3, [r7, #12]
 802cd3a:	3b01      	subs	r3, #1
 802cd3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 802cd3e:	697b      	ldr	r3, [r7, #20]
 802cd40:	681b      	ldr	r3, [r3, #0]
 802cd42:	681b      	ldr	r3, [r3, #0]
 802cd44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802cd48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802cd4c:	d0ea      	beq.n	802cd24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 802cd4e:	697b      	ldr	r3, [r7, #20]
 802cd50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802cd52:	2b00      	cmp	r3, #0
 802cd54:	d003      	beq.n	802cd5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 802cd56:	697b      	ldr	r3, [r7, #20]
 802cd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802cd5a:	2200      	movs	r2, #0
 802cd5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 802cd5e:	697b      	ldr	r3, [r7, #20]
 802cd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cd62:	2b00      	cmp	r3, #0
 802cd64:	d003      	beq.n	802cd6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 802cd66:	697b      	ldr	r3, [r7, #20]
 802cd68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cd6a:	2200      	movs	r2, #0
 802cd6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802cd6e:	697b      	ldr	r3, [r7, #20]
 802cd70:	681b      	ldr	r3, [r3, #0]
 802cd72:	681a      	ldr	r2, [r3, #0]
 802cd74:	697b      	ldr	r3, [r7, #20]
 802cd76:	681b      	ldr	r3, [r3, #0]
 802cd78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802cd7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 802cd7e:	697b      	ldr	r3, [r7, #20]
 802cd80:	2200      	movs	r2, #0
 802cd82:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 802cd84:	697b      	ldr	r3, [r7, #20]
 802cd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802cd88:	2b00      	cmp	r3, #0
 802cd8a:	d003      	beq.n	802cd94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 802cd8c:	697b      	ldr	r3, [r7, #20]
 802cd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802cd90:	2200      	movs	r2, #0
 802cd92:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 802cd94:	697b      	ldr	r3, [r7, #20]
 802cd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cd98:	2b00      	cmp	r3, #0
 802cd9a:	d003      	beq.n	802cda4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 802cd9c:	697b      	ldr	r3, [r7, #20]
 802cd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802cda0:	2200      	movs	r2, #0
 802cda2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 802cda4:	697b      	ldr	r3, [r7, #20]
 802cda6:	681b      	ldr	r3, [r3, #0]
 802cda8:	681a      	ldr	r2, [r3, #0]
 802cdaa:	697b      	ldr	r3, [r7, #20]
 802cdac:	681b      	ldr	r3, [r3, #0]
 802cdae:	f022 0201 	bic.w	r2, r2, #1
 802cdb2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 802cdb4:	697b      	ldr	r3, [r7, #20]
 802cdb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802cdba:	b2db      	uxtb	r3, r3
 802cdbc:	2b60      	cmp	r3, #96	; 0x60
 802cdbe:	d10e      	bne.n	802cdde <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 802cdc0:	697b      	ldr	r3, [r7, #20]
 802cdc2:	2220      	movs	r2, #32
 802cdc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 802cdc8:	697b      	ldr	r3, [r7, #20]
 802cdca:	2200      	movs	r2, #0
 802cdcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 802cdd0:	697b      	ldr	r3, [r7, #20]
 802cdd2:	2200      	movs	r2, #0
 802cdd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 802cdd6:	6978      	ldr	r0, [r7, #20]
 802cdd8:	f7fe fd5e 	bl	802b898 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 802cddc:	e027      	b.n	802ce2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 802cdde:	7cfb      	ldrb	r3, [r7, #19]
 802cde0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 802cde4:	2b28      	cmp	r3, #40	; 0x28
 802cde6:	d117      	bne.n	802ce18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 802cde8:	697b      	ldr	r3, [r7, #20]
 802cdea:	681b      	ldr	r3, [r3, #0]
 802cdec:	681a      	ldr	r2, [r3, #0]
 802cdee:	697b      	ldr	r3, [r7, #20]
 802cdf0:	681b      	ldr	r3, [r3, #0]
 802cdf2:	f042 0201 	orr.w	r2, r2, #1
 802cdf6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 802cdf8:	697b      	ldr	r3, [r7, #20]
 802cdfa:	681b      	ldr	r3, [r3, #0]
 802cdfc:	681a      	ldr	r2, [r3, #0]
 802cdfe:	697b      	ldr	r3, [r7, #20]
 802ce00:	681b      	ldr	r3, [r3, #0]
 802ce02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802ce06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 802ce08:	697b      	ldr	r3, [r7, #20]
 802ce0a:	2200      	movs	r2, #0
 802ce0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 802ce0e:	697b      	ldr	r3, [r7, #20]
 802ce10:	2228      	movs	r2, #40	; 0x28
 802ce12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 802ce16:	e007      	b.n	802ce28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 802ce18:	697b      	ldr	r3, [r7, #20]
 802ce1a:	2220      	movs	r2, #32
 802ce1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 802ce20:	697b      	ldr	r3, [r7, #20]
 802ce22:	2200      	movs	r2, #0
 802ce24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 802ce28:	6978      	ldr	r0, [r7, #20]
 802ce2a:	f7fe fd2b 	bl	802b884 <HAL_I2C_ErrorCallback>
}
 802ce2e:	bf00      	nop
 802ce30:	3718      	adds	r7, #24
 802ce32:	46bd      	mov	sp, r7
 802ce34:	bd80      	pop	{r7, pc}
 802ce36:	bf00      	nop
 802ce38:	200014e4 	.word	0x200014e4
 802ce3c:	14f8b589 	.word	0x14f8b589

0802ce40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 802ce40:	b580      	push	{r7, lr}
 802ce42:	b084      	sub	sp, #16
 802ce44:	af00      	add	r7, sp, #0
 802ce46:	60f8      	str	r0, [r7, #12]
 802ce48:	60b9      	str	r1, [r7, #8]
 802ce4a:	603b      	str	r3, [r7, #0]
 802ce4c:	4613      	mov	r3, r2
 802ce4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 802ce50:	e025      	b.n	802ce9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802ce52:	683b      	ldr	r3, [r7, #0]
 802ce54:	f1b3 3fff 	cmp.w	r3, #4294967295
 802ce58:	d021      	beq.n	802ce9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802ce5a:	f7fb fb5f 	bl	802851c <HAL_GetTick>
 802ce5e:	4602      	mov	r2, r0
 802ce60:	69bb      	ldr	r3, [r7, #24]
 802ce62:	1ad3      	subs	r3, r2, r3
 802ce64:	683a      	ldr	r2, [r7, #0]
 802ce66:	429a      	cmp	r2, r3
 802ce68:	d302      	bcc.n	802ce70 <I2C_WaitOnFlagUntilTimeout+0x30>
 802ce6a:	683b      	ldr	r3, [r7, #0]
 802ce6c:	2b00      	cmp	r3, #0
 802ce6e:	d116      	bne.n	802ce9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 802ce70:	68fb      	ldr	r3, [r7, #12]
 802ce72:	2200      	movs	r2, #0
 802ce74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 802ce76:	68fb      	ldr	r3, [r7, #12]
 802ce78:	2220      	movs	r2, #32
 802ce7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 802ce7e:	68fb      	ldr	r3, [r7, #12]
 802ce80:	2200      	movs	r2, #0
 802ce82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 802ce86:	68fb      	ldr	r3, [r7, #12]
 802ce88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ce8a:	f043 0220 	orr.w	r2, r3, #32
 802ce8e:	68fb      	ldr	r3, [r7, #12]
 802ce90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802ce92:	68fb      	ldr	r3, [r7, #12]
 802ce94:	2200      	movs	r2, #0
 802ce96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802ce9a:	2301      	movs	r3, #1
 802ce9c:	e023      	b.n	802cee6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 802ce9e:	68bb      	ldr	r3, [r7, #8]
 802cea0:	0c1b      	lsrs	r3, r3, #16
 802cea2:	b2db      	uxtb	r3, r3
 802cea4:	2b01      	cmp	r3, #1
 802cea6:	d10d      	bne.n	802cec4 <I2C_WaitOnFlagUntilTimeout+0x84>
 802cea8:	68fb      	ldr	r3, [r7, #12]
 802ceaa:	681b      	ldr	r3, [r3, #0]
 802ceac:	695b      	ldr	r3, [r3, #20]
 802ceae:	43da      	mvns	r2, r3
 802ceb0:	68bb      	ldr	r3, [r7, #8]
 802ceb2:	4013      	ands	r3, r2
 802ceb4:	b29b      	uxth	r3, r3
 802ceb6:	2b00      	cmp	r3, #0
 802ceb8:	bf0c      	ite	eq
 802ceba:	2301      	moveq	r3, #1
 802cebc:	2300      	movne	r3, #0
 802cebe:	b2db      	uxtb	r3, r3
 802cec0:	461a      	mov	r2, r3
 802cec2:	e00c      	b.n	802cede <I2C_WaitOnFlagUntilTimeout+0x9e>
 802cec4:	68fb      	ldr	r3, [r7, #12]
 802cec6:	681b      	ldr	r3, [r3, #0]
 802cec8:	699b      	ldr	r3, [r3, #24]
 802ceca:	43da      	mvns	r2, r3
 802cecc:	68bb      	ldr	r3, [r7, #8]
 802cece:	4013      	ands	r3, r2
 802ced0:	b29b      	uxth	r3, r3
 802ced2:	2b00      	cmp	r3, #0
 802ced4:	bf0c      	ite	eq
 802ced6:	2301      	moveq	r3, #1
 802ced8:	2300      	movne	r3, #0
 802ceda:	b2db      	uxtb	r3, r3
 802cedc:	461a      	mov	r2, r3
 802cede:	79fb      	ldrb	r3, [r7, #7]
 802cee0:	429a      	cmp	r2, r3
 802cee2:	d0b6      	beq.n	802ce52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802cee4:	2300      	movs	r3, #0
}
 802cee6:	4618      	mov	r0, r3
 802cee8:	3710      	adds	r7, #16
 802ceea:	46bd      	mov	sp, r7
 802ceec:	bd80      	pop	{r7, pc}

0802ceee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 802ceee:	b580      	push	{r7, lr}
 802cef0:	b084      	sub	sp, #16
 802cef2:	af00      	add	r7, sp, #0
 802cef4:	60f8      	str	r0, [r7, #12]
 802cef6:	60b9      	str	r1, [r7, #8]
 802cef8:	607a      	str	r2, [r7, #4]
 802cefa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 802cefc:	e051      	b.n	802cfa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 802cefe:	68fb      	ldr	r3, [r7, #12]
 802cf00:	681b      	ldr	r3, [r3, #0]
 802cf02:	695b      	ldr	r3, [r3, #20]
 802cf04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802cf08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802cf0c:	d123      	bne.n	802cf56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 802cf0e:	68fb      	ldr	r3, [r7, #12]
 802cf10:	681b      	ldr	r3, [r3, #0]
 802cf12:	681a      	ldr	r2, [r3, #0]
 802cf14:	68fb      	ldr	r3, [r7, #12]
 802cf16:	681b      	ldr	r3, [r3, #0]
 802cf18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802cf1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802cf1e:	68fb      	ldr	r3, [r7, #12]
 802cf20:	681b      	ldr	r3, [r3, #0]
 802cf22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 802cf26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 802cf28:	68fb      	ldr	r3, [r7, #12]
 802cf2a:	2200      	movs	r2, #0
 802cf2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 802cf2e:	68fb      	ldr	r3, [r7, #12]
 802cf30:	2220      	movs	r2, #32
 802cf32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 802cf36:	68fb      	ldr	r3, [r7, #12]
 802cf38:	2200      	movs	r2, #0
 802cf3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 802cf3e:	68fb      	ldr	r3, [r7, #12]
 802cf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802cf42:	f043 0204 	orr.w	r2, r3, #4
 802cf46:	68fb      	ldr	r3, [r7, #12]
 802cf48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802cf4a:	68fb      	ldr	r3, [r7, #12]
 802cf4c:	2200      	movs	r2, #0
 802cf4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 802cf52:	2301      	movs	r3, #1
 802cf54:	e046      	b.n	802cfe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802cf56:	687b      	ldr	r3, [r7, #4]
 802cf58:	f1b3 3fff 	cmp.w	r3, #4294967295
 802cf5c:	d021      	beq.n	802cfa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802cf5e:	f7fb fadd 	bl	802851c <HAL_GetTick>
 802cf62:	4602      	mov	r2, r0
 802cf64:	683b      	ldr	r3, [r7, #0]
 802cf66:	1ad3      	subs	r3, r2, r3
 802cf68:	687a      	ldr	r2, [r7, #4]
 802cf6a:	429a      	cmp	r2, r3
 802cf6c:	d302      	bcc.n	802cf74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 802cf6e:	687b      	ldr	r3, [r7, #4]
 802cf70:	2b00      	cmp	r3, #0
 802cf72:	d116      	bne.n	802cfa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802cf74:	68fb      	ldr	r3, [r7, #12]
 802cf76:	2200      	movs	r2, #0
 802cf78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802cf7a:	68fb      	ldr	r3, [r7, #12]
 802cf7c:	2220      	movs	r2, #32
 802cf7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802cf82:	68fb      	ldr	r3, [r7, #12]
 802cf84:	2200      	movs	r2, #0
 802cf86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802cf8a:	68fb      	ldr	r3, [r7, #12]
 802cf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802cf8e:	f043 0220 	orr.w	r2, r3, #32
 802cf92:	68fb      	ldr	r3, [r7, #12]
 802cf94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802cf96:	68fb      	ldr	r3, [r7, #12]
 802cf98:	2200      	movs	r2, #0
 802cf9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802cf9e:	2301      	movs	r3, #1
 802cfa0:	e020      	b.n	802cfe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 802cfa2:	68bb      	ldr	r3, [r7, #8]
 802cfa4:	0c1b      	lsrs	r3, r3, #16
 802cfa6:	b2db      	uxtb	r3, r3
 802cfa8:	2b01      	cmp	r3, #1
 802cfaa:	d10c      	bne.n	802cfc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 802cfac:	68fb      	ldr	r3, [r7, #12]
 802cfae:	681b      	ldr	r3, [r3, #0]
 802cfb0:	695b      	ldr	r3, [r3, #20]
 802cfb2:	43da      	mvns	r2, r3
 802cfb4:	68bb      	ldr	r3, [r7, #8]
 802cfb6:	4013      	ands	r3, r2
 802cfb8:	b29b      	uxth	r3, r3
 802cfba:	2b00      	cmp	r3, #0
 802cfbc:	bf14      	ite	ne
 802cfbe:	2301      	movne	r3, #1
 802cfc0:	2300      	moveq	r3, #0
 802cfc2:	b2db      	uxtb	r3, r3
 802cfc4:	e00b      	b.n	802cfde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 802cfc6:	68fb      	ldr	r3, [r7, #12]
 802cfc8:	681b      	ldr	r3, [r3, #0]
 802cfca:	699b      	ldr	r3, [r3, #24]
 802cfcc:	43da      	mvns	r2, r3
 802cfce:	68bb      	ldr	r3, [r7, #8]
 802cfd0:	4013      	ands	r3, r2
 802cfd2:	b29b      	uxth	r3, r3
 802cfd4:	2b00      	cmp	r3, #0
 802cfd6:	bf14      	ite	ne
 802cfd8:	2301      	movne	r3, #1
 802cfda:	2300      	moveq	r3, #0
 802cfdc:	b2db      	uxtb	r3, r3
 802cfde:	2b00      	cmp	r3, #0
 802cfe0:	d18d      	bne.n	802cefe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 802cfe2:	2300      	movs	r3, #0
}
 802cfe4:	4618      	mov	r0, r3
 802cfe6:	3710      	adds	r7, #16
 802cfe8:	46bd      	mov	sp, r7
 802cfea:	bd80      	pop	{r7, pc}

0802cfec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 802cfec:	b580      	push	{r7, lr}
 802cfee:	b084      	sub	sp, #16
 802cff0:	af00      	add	r7, sp, #0
 802cff2:	60f8      	str	r0, [r7, #12]
 802cff4:	60b9      	str	r1, [r7, #8]
 802cff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802cff8:	e02d      	b.n	802d056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 802cffa:	68f8      	ldr	r0, [r7, #12]
 802cffc:	f000 f900 	bl	802d200 <I2C_IsAcknowledgeFailed>
 802d000:	4603      	mov	r3, r0
 802d002:	2b00      	cmp	r3, #0
 802d004:	d001      	beq.n	802d00a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 802d006:	2301      	movs	r3, #1
 802d008:	e02d      	b.n	802d066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802d00a:	68bb      	ldr	r3, [r7, #8]
 802d00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802d010:	d021      	beq.n	802d056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802d012:	f7fb fa83 	bl	802851c <HAL_GetTick>
 802d016:	4602      	mov	r2, r0
 802d018:	687b      	ldr	r3, [r7, #4]
 802d01a:	1ad3      	subs	r3, r2, r3
 802d01c:	68ba      	ldr	r2, [r7, #8]
 802d01e:	429a      	cmp	r2, r3
 802d020:	d302      	bcc.n	802d028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 802d022:	68bb      	ldr	r3, [r7, #8]
 802d024:	2b00      	cmp	r3, #0
 802d026:	d116      	bne.n	802d056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802d028:	68fb      	ldr	r3, [r7, #12]
 802d02a:	2200      	movs	r2, #0
 802d02c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802d02e:	68fb      	ldr	r3, [r7, #12]
 802d030:	2220      	movs	r2, #32
 802d032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802d036:	68fb      	ldr	r3, [r7, #12]
 802d038:	2200      	movs	r2, #0
 802d03a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802d03e:	68fb      	ldr	r3, [r7, #12]
 802d040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d042:	f043 0220 	orr.w	r2, r3, #32
 802d046:	68fb      	ldr	r3, [r7, #12]
 802d048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802d04a:	68fb      	ldr	r3, [r7, #12]
 802d04c:	2200      	movs	r2, #0
 802d04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802d052:	2301      	movs	r3, #1
 802d054:	e007      	b.n	802d066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 802d056:	68fb      	ldr	r3, [r7, #12]
 802d058:	681b      	ldr	r3, [r3, #0]
 802d05a:	695b      	ldr	r3, [r3, #20]
 802d05c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802d060:	2b80      	cmp	r3, #128	; 0x80
 802d062:	d1ca      	bne.n	802cffa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 802d064:	2300      	movs	r3, #0
}
 802d066:	4618      	mov	r0, r3
 802d068:	3710      	adds	r7, #16
 802d06a:	46bd      	mov	sp, r7
 802d06c:	bd80      	pop	{r7, pc}

0802d06e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 802d06e:	b580      	push	{r7, lr}
 802d070:	b084      	sub	sp, #16
 802d072:	af00      	add	r7, sp, #0
 802d074:	60f8      	str	r0, [r7, #12]
 802d076:	60b9      	str	r1, [r7, #8]
 802d078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 802d07a:	e02d      	b.n	802d0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 802d07c:	68f8      	ldr	r0, [r7, #12]
 802d07e:	f000 f8bf 	bl	802d200 <I2C_IsAcknowledgeFailed>
 802d082:	4603      	mov	r3, r0
 802d084:	2b00      	cmp	r3, #0
 802d086:	d001      	beq.n	802d08c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 802d088:	2301      	movs	r3, #1
 802d08a:	e02d      	b.n	802d0e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802d08c:	68bb      	ldr	r3, [r7, #8]
 802d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 802d092:	d021      	beq.n	802d0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802d094:	f7fb fa42 	bl	802851c <HAL_GetTick>
 802d098:	4602      	mov	r2, r0
 802d09a:	687b      	ldr	r3, [r7, #4]
 802d09c:	1ad3      	subs	r3, r2, r3
 802d09e:	68ba      	ldr	r2, [r7, #8]
 802d0a0:	429a      	cmp	r2, r3
 802d0a2:	d302      	bcc.n	802d0aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 802d0a4:	68bb      	ldr	r3, [r7, #8]
 802d0a6:	2b00      	cmp	r3, #0
 802d0a8:	d116      	bne.n	802d0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 802d0aa:	68fb      	ldr	r3, [r7, #12]
 802d0ac:	2200      	movs	r2, #0
 802d0ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 802d0b0:	68fb      	ldr	r3, [r7, #12]
 802d0b2:	2220      	movs	r2, #32
 802d0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 802d0b8:	68fb      	ldr	r3, [r7, #12]
 802d0ba:	2200      	movs	r2, #0
 802d0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802d0c0:	68fb      	ldr	r3, [r7, #12]
 802d0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d0c4:	f043 0220 	orr.w	r2, r3, #32
 802d0c8:	68fb      	ldr	r3, [r7, #12]
 802d0ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 802d0cc:	68fb      	ldr	r3, [r7, #12]
 802d0ce:	2200      	movs	r2, #0
 802d0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 802d0d4:	2301      	movs	r3, #1
 802d0d6:	e007      	b.n	802d0e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 802d0d8:	68fb      	ldr	r3, [r7, #12]
 802d0da:	681b      	ldr	r3, [r3, #0]
 802d0dc:	695b      	ldr	r3, [r3, #20]
 802d0de:	f003 0304 	and.w	r3, r3, #4
 802d0e2:	2b04      	cmp	r3, #4
 802d0e4:	d1ca      	bne.n	802d07c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 802d0e6:	2300      	movs	r3, #0
}
 802d0e8:	4618      	mov	r0, r3
 802d0ea:	3710      	adds	r7, #16
 802d0ec:	46bd      	mov	sp, r7
 802d0ee:	bd80      	pop	{r7, pc}

0802d0f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 802d0f0:	b480      	push	{r7}
 802d0f2:	b085      	sub	sp, #20
 802d0f4:	af00      	add	r7, sp, #0
 802d0f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802d0f8:	2300      	movs	r3, #0
 802d0fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 802d0fc:	4b13      	ldr	r3, [pc, #76]	; (802d14c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 802d0fe:	681b      	ldr	r3, [r3, #0]
 802d100:	08db      	lsrs	r3, r3, #3
 802d102:	4a13      	ldr	r2, [pc, #76]	; (802d150 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 802d104:	fba2 2303 	umull	r2, r3, r2, r3
 802d108:	0a1a      	lsrs	r2, r3, #8
 802d10a:	4613      	mov	r3, r2
 802d10c:	009b      	lsls	r3, r3, #2
 802d10e:	4413      	add	r3, r2
 802d110:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 802d112:	68fb      	ldr	r3, [r7, #12]
 802d114:	3b01      	subs	r3, #1
 802d116:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 802d118:	68fb      	ldr	r3, [r7, #12]
 802d11a:	2b00      	cmp	r3, #0
 802d11c:	d107      	bne.n	802d12e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802d11e:	687b      	ldr	r3, [r7, #4]
 802d120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d122:	f043 0220 	orr.w	r2, r3, #32
 802d126:	687b      	ldr	r3, [r7, #4]
 802d128:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 802d12a:	2301      	movs	r3, #1
 802d12c:	e008      	b.n	802d140 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 802d12e:	687b      	ldr	r3, [r7, #4]
 802d130:	681b      	ldr	r3, [r3, #0]
 802d132:	681b      	ldr	r3, [r3, #0]
 802d134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802d138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d13c:	d0e9      	beq.n	802d112 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 802d13e:	2300      	movs	r3, #0
}
 802d140:	4618      	mov	r0, r3
 802d142:	3714      	adds	r7, #20
 802d144:	46bd      	mov	sp, r7
 802d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d14a:	4770      	bx	lr
 802d14c:	200014e4 	.word	0x200014e4
 802d150:	14f8b589 	.word	0x14f8b589

0802d154 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 802d154:	b580      	push	{r7, lr}
 802d156:	b084      	sub	sp, #16
 802d158:	af00      	add	r7, sp, #0
 802d15a:	60f8      	str	r0, [r7, #12]
 802d15c:	60b9      	str	r1, [r7, #8]
 802d15e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 802d160:	e042      	b.n	802d1e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 802d162:	68fb      	ldr	r3, [r7, #12]
 802d164:	681b      	ldr	r3, [r3, #0]
 802d166:	695b      	ldr	r3, [r3, #20]
 802d168:	f003 0310 	and.w	r3, r3, #16
 802d16c:	2b10      	cmp	r3, #16
 802d16e:	d119      	bne.n	802d1a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 802d170:	68fb      	ldr	r3, [r7, #12]
 802d172:	681b      	ldr	r3, [r3, #0]
 802d174:	f06f 0210 	mvn.w	r2, #16
 802d178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 802d17a:	68fb      	ldr	r3, [r7, #12]
 802d17c:	2200      	movs	r2, #0
 802d17e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 802d180:	68fb      	ldr	r3, [r7, #12]
 802d182:	2220      	movs	r2, #32
 802d184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 802d188:	68fb      	ldr	r3, [r7, #12]
 802d18a:	2200      	movs	r2, #0
 802d18c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 802d190:	68fb      	ldr	r3, [r7, #12]
 802d192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802d194:	68fb      	ldr	r3, [r7, #12]
 802d196:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802d198:	68fb      	ldr	r3, [r7, #12]
 802d19a:	2200      	movs	r2, #0
 802d19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 802d1a0:	2301      	movs	r3, #1
 802d1a2:	e029      	b.n	802d1f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802d1a4:	f7fb f9ba 	bl	802851c <HAL_GetTick>
 802d1a8:	4602      	mov	r2, r0
 802d1aa:	687b      	ldr	r3, [r7, #4]
 802d1ac:	1ad3      	subs	r3, r2, r3
 802d1ae:	68ba      	ldr	r2, [r7, #8]
 802d1b0:	429a      	cmp	r2, r3
 802d1b2:	d302      	bcc.n	802d1ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 802d1b4:	68bb      	ldr	r3, [r7, #8]
 802d1b6:	2b00      	cmp	r3, #0
 802d1b8:	d116      	bne.n	802d1e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 802d1ba:	68fb      	ldr	r3, [r7, #12]
 802d1bc:	2200      	movs	r2, #0
 802d1be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 802d1c0:	68fb      	ldr	r3, [r7, #12]
 802d1c2:	2220      	movs	r2, #32
 802d1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 802d1c8:	68fb      	ldr	r3, [r7, #12]
 802d1ca:	2200      	movs	r2, #0
 802d1cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 802d1d0:	68fb      	ldr	r3, [r7, #12]
 802d1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d1d4:	f043 0220 	orr.w	r2, r3, #32
 802d1d8:	68fb      	ldr	r3, [r7, #12]
 802d1da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 802d1dc:	68fb      	ldr	r3, [r7, #12]
 802d1de:	2200      	movs	r2, #0
 802d1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 802d1e4:	2301      	movs	r3, #1
 802d1e6:	e007      	b.n	802d1f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 802d1e8:	68fb      	ldr	r3, [r7, #12]
 802d1ea:	681b      	ldr	r3, [r3, #0]
 802d1ec:	695b      	ldr	r3, [r3, #20]
 802d1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802d1f2:	2b40      	cmp	r3, #64	; 0x40
 802d1f4:	d1b5      	bne.n	802d162 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 802d1f6:	2300      	movs	r3, #0
}
 802d1f8:	4618      	mov	r0, r3
 802d1fa:	3710      	adds	r7, #16
 802d1fc:	46bd      	mov	sp, r7
 802d1fe:	bd80      	pop	{r7, pc}

0802d200 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 802d200:	b480      	push	{r7}
 802d202:	b083      	sub	sp, #12
 802d204:	af00      	add	r7, sp, #0
 802d206:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 802d208:	687b      	ldr	r3, [r7, #4]
 802d20a:	681b      	ldr	r3, [r3, #0]
 802d20c:	695b      	ldr	r3, [r3, #20]
 802d20e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802d212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802d216:	d11b      	bne.n	802d250 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 802d218:	687b      	ldr	r3, [r7, #4]
 802d21a:	681b      	ldr	r3, [r3, #0]
 802d21c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 802d220:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 802d222:	687b      	ldr	r3, [r7, #4]
 802d224:	2200      	movs	r2, #0
 802d226:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 802d228:	687b      	ldr	r3, [r7, #4]
 802d22a:	2220      	movs	r2, #32
 802d22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 802d230:	687b      	ldr	r3, [r7, #4]
 802d232:	2200      	movs	r2, #0
 802d234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 802d238:	687b      	ldr	r3, [r7, #4]
 802d23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802d23c:	f043 0204 	orr.w	r2, r3, #4
 802d240:	687b      	ldr	r3, [r7, #4]
 802d242:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 802d244:	687b      	ldr	r3, [r7, #4]
 802d246:	2200      	movs	r2, #0
 802d248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 802d24c:	2301      	movs	r3, #1
 802d24e:	e000      	b.n	802d252 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 802d250:	2300      	movs	r3, #0
}
 802d252:	4618      	mov	r0, r3
 802d254:	370c      	adds	r7, #12
 802d256:	46bd      	mov	sp, r7
 802d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d25c:	4770      	bx	lr

0802d25e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 802d25e:	b480      	push	{r7}
 802d260:	b083      	sub	sp, #12
 802d262:	af00      	add	r7, sp, #0
 802d264:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 802d266:	687b      	ldr	r3, [r7, #4]
 802d268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d26a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 802d26e:	d103      	bne.n	802d278 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 802d270:	687b      	ldr	r3, [r7, #4]
 802d272:	2201      	movs	r2, #1
 802d274:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 802d276:	e007      	b.n	802d288 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 802d278:	687b      	ldr	r3, [r7, #4]
 802d27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d27c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 802d280:	d102      	bne.n	802d288 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 802d282:	687b      	ldr	r3, [r7, #4]
 802d284:	2208      	movs	r2, #8
 802d286:	62da      	str	r2, [r3, #44]	; 0x2c
}
 802d288:	bf00      	nop
 802d28a:	370c      	adds	r7, #12
 802d28c:	46bd      	mov	sp, r7
 802d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d292:	4770      	bx	lr

0802d294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802d294:	b580      	push	{r7, lr}
 802d296:	b084      	sub	sp, #16
 802d298:	af00      	add	r7, sp, #0
 802d29a:	6078      	str	r0, [r7, #4]
 802d29c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802d29e:	687b      	ldr	r3, [r7, #4]
 802d2a0:	2b00      	cmp	r3, #0
 802d2a2:	d101      	bne.n	802d2a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802d2a4:	2301      	movs	r3, #1
 802d2a6:	e0cc      	b.n	802d442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802d2a8:	4b68      	ldr	r3, [pc, #416]	; (802d44c <HAL_RCC_ClockConfig+0x1b8>)
 802d2aa:	681b      	ldr	r3, [r3, #0]
 802d2ac:	f003 030f 	and.w	r3, r3, #15
 802d2b0:	683a      	ldr	r2, [r7, #0]
 802d2b2:	429a      	cmp	r2, r3
 802d2b4:	d90c      	bls.n	802d2d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802d2b6:	4b65      	ldr	r3, [pc, #404]	; (802d44c <HAL_RCC_ClockConfig+0x1b8>)
 802d2b8:	683a      	ldr	r2, [r7, #0]
 802d2ba:	b2d2      	uxtb	r2, r2
 802d2bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802d2be:	4b63      	ldr	r3, [pc, #396]	; (802d44c <HAL_RCC_ClockConfig+0x1b8>)
 802d2c0:	681b      	ldr	r3, [r3, #0]
 802d2c2:	f003 030f 	and.w	r3, r3, #15
 802d2c6:	683a      	ldr	r2, [r7, #0]
 802d2c8:	429a      	cmp	r2, r3
 802d2ca:	d001      	beq.n	802d2d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802d2cc:	2301      	movs	r3, #1
 802d2ce:	e0b8      	b.n	802d442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802d2d0:	687b      	ldr	r3, [r7, #4]
 802d2d2:	681b      	ldr	r3, [r3, #0]
 802d2d4:	f003 0302 	and.w	r3, r3, #2
 802d2d8:	2b00      	cmp	r3, #0
 802d2da:	d020      	beq.n	802d31e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802d2dc:	687b      	ldr	r3, [r7, #4]
 802d2de:	681b      	ldr	r3, [r3, #0]
 802d2e0:	f003 0304 	and.w	r3, r3, #4
 802d2e4:	2b00      	cmp	r3, #0
 802d2e6:	d005      	beq.n	802d2f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802d2e8:	4b59      	ldr	r3, [pc, #356]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d2ea:	689b      	ldr	r3, [r3, #8]
 802d2ec:	4a58      	ldr	r2, [pc, #352]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d2ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802d2f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802d2f4:	687b      	ldr	r3, [r7, #4]
 802d2f6:	681b      	ldr	r3, [r3, #0]
 802d2f8:	f003 0308 	and.w	r3, r3, #8
 802d2fc:	2b00      	cmp	r3, #0
 802d2fe:	d005      	beq.n	802d30c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802d300:	4b53      	ldr	r3, [pc, #332]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d302:	689b      	ldr	r3, [r3, #8]
 802d304:	4a52      	ldr	r2, [pc, #328]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d306:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802d30a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802d30c:	4b50      	ldr	r3, [pc, #320]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d30e:	689b      	ldr	r3, [r3, #8]
 802d310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802d314:	687b      	ldr	r3, [r7, #4]
 802d316:	689b      	ldr	r3, [r3, #8]
 802d318:	494d      	ldr	r1, [pc, #308]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d31a:	4313      	orrs	r3, r2
 802d31c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802d31e:	687b      	ldr	r3, [r7, #4]
 802d320:	681b      	ldr	r3, [r3, #0]
 802d322:	f003 0301 	and.w	r3, r3, #1
 802d326:	2b00      	cmp	r3, #0
 802d328:	d044      	beq.n	802d3b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802d32a:	687b      	ldr	r3, [r7, #4]
 802d32c:	685b      	ldr	r3, [r3, #4]
 802d32e:	2b01      	cmp	r3, #1
 802d330:	d107      	bne.n	802d342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802d332:	4b47      	ldr	r3, [pc, #284]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d334:	681b      	ldr	r3, [r3, #0]
 802d336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802d33a:	2b00      	cmp	r3, #0
 802d33c:	d119      	bne.n	802d372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802d33e:	2301      	movs	r3, #1
 802d340:	e07f      	b.n	802d442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802d342:	687b      	ldr	r3, [r7, #4]
 802d344:	685b      	ldr	r3, [r3, #4]
 802d346:	2b02      	cmp	r3, #2
 802d348:	d003      	beq.n	802d352 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802d34a:	687b      	ldr	r3, [r7, #4]
 802d34c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802d34e:	2b03      	cmp	r3, #3
 802d350:	d107      	bne.n	802d362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802d352:	4b3f      	ldr	r3, [pc, #252]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d354:	681b      	ldr	r3, [r3, #0]
 802d356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802d35a:	2b00      	cmp	r3, #0
 802d35c:	d109      	bne.n	802d372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802d35e:	2301      	movs	r3, #1
 802d360:	e06f      	b.n	802d442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802d362:	4b3b      	ldr	r3, [pc, #236]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d364:	681b      	ldr	r3, [r3, #0]
 802d366:	f003 0302 	and.w	r3, r3, #2
 802d36a:	2b00      	cmp	r3, #0
 802d36c:	d101      	bne.n	802d372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802d36e:	2301      	movs	r3, #1
 802d370:	e067      	b.n	802d442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802d372:	4b37      	ldr	r3, [pc, #220]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d374:	689b      	ldr	r3, [r3, #8]
 802d376:	f023 0203 	bic.w	r2, r3, #3
 802d37a:	687b      	ldr	r3, [r7, #4]
 802d37c:	685b      	ldr	r3, [r3, #4]
 802d37e:	4934      	ldr	r1, [pc, #208]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d380:	4313      	orrs	r3, r2
 802d382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802d384:	f7fb f8ca 	bl	802851c <HAL_GetTick>
 802d388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802d38a:	e00a      	b.n	802d3a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802d38c:	f7fb f8c6 	bl	802851c <HAL_GetTick>
 802d390:	4602      	mov	r2, r0
 802d392:	68fb      	ldr	r3, [r7, #12]
 802d394:	1ad3      	subs	r3, r2, r3
 802d396:	f241 3288 	movw	r2, #5000	; 0x1388
 802d39a:	4293      	cmp	r3, r2
 802d39c:	d901      	bls.n	802d3a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802d39e:	2303      	movs	r3, #3
 802d3a0:	e04f      	b.n	802d442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802d3a2:	4b2b      	ldr	r3, [pc, #172]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d3a4:	689b      	ldr	r3, [r3, #8]
 802d3a6:	f003 020c 	and.w	r2, r3, #12
 802d3aa:	687b      	ldr	r3, [r7, #4]
 802d3ac:	685b      	ldr	r3, [r3, #4]
 802d3ae:	009b      	lsls	r3, r3, #2
 802d3b0:	429a      	cmp	r2, r3
 802d3b2:	d1eb      	bne.n	802d38c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 802d3b4:	4b25      	ldr	r3, [pc, #148]	; (802d44c <HAL_RCC_ClockConfig+0x1b8>)
 802d3b6:	681b      	ldr	r3, [r3, #0]
 802d3b8:	f003 030f 	and.w	r3, r3, #15
 802d3bc:	683a      	ldr	r2, [r7, #0]
 802d3be:	429a      	cmp	r2, r3
 802d3c0:	d20c      	bcs.n	802d3dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802d3c2:	4b22      	ldr	r3, [pc, #136]	; (802d44c <HAL_RCC_ClockConfig+0x1b8>)
 802d3c4:	683a      	ldr	r2, [r7, #0]
 802d3c6:	b2d2      	uxtb	r2, r2
 802d3c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802d3ca:	4b20      	ldr	r3, [pc, #128]	; (802d44c <HAL_RCC_ClockConfig+0x1b8>)
 802d3cc:	681b      	ldr	r3, [r3, #0]
 802d3ce:	f003 030f 	and.w	r3, r3, #15
 802d3d2:	683a      	ldr	r2, [r7, #0]
 802d3d4:	429a      	cmp	r2, r3
 802d3d6:	d001      	beq.n	802d3dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802d3d8:	2301      	movs	r3, #1
 802d3da:	e032      	b.n	802d442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802d3dc:	687b      	ldr	r3, [r7, #4]
 802d3de:	681b      	ldr	r3, [r3, #0]
 802d3e0:	f003 0304 	and.w	r3, r3, #4
 802d3e4:	2b00      	cmp	r3, #0
 802d3e6:	d008      	beq.n	802d3fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802d3e8:	4b19      	ldr	r3, [pc, #100]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d3ea:	689b      	ldr	r3, [r3, #8]
 802d3ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802d3f0:	687b      	ldr	r3, [r7, #4]
 802d3f2:	68db      	ldr	r3, [r3, #12]
 802d3f4:	4916      	ldr	r1, [pc, #88]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d3f6:	4313      	orrs	r3, r2
 802d3f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802d3fa:	687b      	ldr	r3, [r7, #4]
 802d3fc:	681b      	ldr	r3, [r3, #0]
 802d3fe:	f003 0308 	and.w	r3, r3, #8
 802d402:	2b00      	cmp	r3, #0
 802d404:	d009      	beq.n	802d41a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802d406:	4b12      	ldr	r3, [pc, #72]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d408:	689b      	ldr	r3, [r3, #8]
 802d40a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802d40e:	687b      	ldr	r3, [r7, #4]
 802d410:	691b      	ldr	r3, [r3, #16]
 802d412:	00db      	lsls	r3, r3, #3
 802d414:	490e      	ldr	r1, [pc, #56]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d416:	4313      	orrs	r3, r2
 802d418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802d41a:	f000 f855 	bl	802d4c8 <HAL_RCC_GetSysClockFreq>
 802d41e:	4602      	mov	r2, r0
 802d420:	4b0b      	ldr	r3, [pc, #44]	; (802d450 <HAL_RCC_ClockConfig+0x1bc>)
 802d422:	689b      	ldr	r3, [r3, #8]
 802d424:	091b      	lsrs	r3, r3, #4
 802d426:	f003 030f 	and.w	r3, r3, #15
 802d42a:	490a      	ldr	r1, [pc, #40]	; (802d454 <HAL_RCC_ClockConfig+0x1c0>)
 802d42c:	5ccb      	ldrb	r3, [r1, r3]
 802d42e:	fa22 f303 	lsr.w	r3, r2, r3
 802d432:	4a09      	ldr	r2, [pc, #36]	; (802d458 <HAL_RCC_ClockConfig+0x1c4>)
 802d434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802d436:	4b09      	ldr	r3, [pc, #36]	; (802d45c <HAL_RCC_ClockConfig+0x1c8>)
 802d438:	681b      	ldr	r3, [r3, #0]
 802d43a:	4618      	mov	r0, r3
 802d43c:	f7fb f82a 	bl	8028494 <HAL_InitTick>

  return HAL_OK;
 802d440:	2300      	movs	r3, #0
}
 802d442:	4618      	mov	r0, r3
 802d444:	3710      	adds	r7, #16
 802d446:	46bd      	mov	sp, r7
 802d448:	bd80      	pop	{r7, pc}
 802d44a:	bf00      	nop
 802d44c:	40023c00 	.word	0x40023c00
 802d450:	40023800 	.word	0x40023800
 802d454:	08048c1c 	.word	0x08048c1c
 802d458:	200014e4 	.word	0x200014e4
 802d45c:	20001a68 	.word	0x20001a68

0802d460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802d460:	b480      	push	{r7}
 802d462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802d464:	4b03      	ldr	r3, [pc, #12]	; (802d474 <HAL_RCC_GetHCLKFreq+0x14>)
 802d466:	681b      	ldr	r3, [r3, #0]
}
 802d468:	4618      	mov	r0, r3
 802d46a:	46bd      	mov	sp, r7
 802d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d470:	4770      	bx	lr
 802d472:	bf00      	nop
 802d474:	200014e4 	.word	0x200014e4

0802d478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802d478:	b580      	push	{r7, lr}
 802d47a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802d47c:	f7ff fff0 	bl	802d460 <HAL_RCC_GetHCLKFreq>
 802d480:	4602      	mov	r2, r0
 802d482:	4b05      	ldr	r3, [pc, #20]	; (802d498 <HAL_RCC_GetPCLK1Freq+0x20>)
 802d484:	689b      	ldr	r3, [r3, #8]
 802d486:	0a9b      	lsrs	r3, r3, #10
 802d488:	f003 0307 	and.w	r3, r3, #7
 802d48c:	4903      	ldr	r1, [pc, #12]	; (802d49c <HAL_RCC_GetPCLK1Freq+0x24>)
 802d48e:	5ccb      	ldrb	r3, [r1, r3]
 802d490:	fa22 f303 	lsr.w	r3, r2, r3
}
 802d494:	4618      	mov	r0, r3
 802d496:	bd80      	pop	{r7, pc}
 802d498:	40023800 	.word	0x40023800
 802d49c:	08048c2c 	.word	0x08048c2c

0802d4a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 802d4a0:	b580      	push	{r7, lr}
 802d4a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 802d4a4:	f7ff ffdc 	bl	802d460 <HAL_RCC_GetHCLKFreq>
 802d4a8:	4602      	mov	r2, r0
 802d4aa:	4b05      	ldr	r3, [pc, #20]	; (802d4c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 802d4ac:	689b      	ldr	r3, [r3, #8]
 802d4ae:	0b5b      	lsrs	r3, r3, #13
 802d4b0:	f003 0307 	and.w	r3, r3, #7
 802d4b4:	4903      	ldr	r1, [pc, #12]	; (802d4c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 802d4b6:	5ccb      	ldrb	r3, [r1, r3]
 802d4b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 802d4bc:	4618      	mov	r0, r3
 802d4be:	bd80      	pop	{r7, pc}
 802d4c0:	40023800 	.word	0x40023800
 802d4c4:	08048c2c 	.word	0x08048c2c

0802d4c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802d4c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802d4cc:	b0ae      	sub	sp, #184	; 0xb8
 802d4ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 802d4d0:	2300      	movs	r3, #0
 802d4d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 802d4d6:	2300      	movs	r3, #0
 802d4d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 802d4dc:	2300      	movs	r3, #0
 802d4de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 802d4e2:	2300      	movs	r3, #0
 802d4e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 802d4e8:	2300      	movs	r3, #0
 802d4ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802d4ee:	4bcb      	ldr	r3, [pc, #812]	; (802d81c <HAL_RCC_GetSysClockFreq+0x354>)
 802d4f0:	689b      	ldr	r3, [r3, #8]
 802d4f2:	f003 030c 	and.w	r3, r3, #12
 802d4f6:	2b0c      	cmp	r3, #12
 802d4f8:	f200 8206 	bhi.w	802d908 <HAL_RCC_GetSysClockFreq+0x440>
 802d4fc:	a201      	add	r2, pc, #4	; (adr r2, 802d504 <HAL_RCC_GetSysClockFreq+0x3c>)
 802d4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d502:	bf00      	nop
 802d504:	0802d539 	.word	0x0802d539
 802d508:	0802d909 	.word	0x0802d909
 802d50c:	0802d909 	.word	0x0802d909
 802d510:	0802d909 	.word	0x0802d909
 802d514:	0802d541 	.word	0x0802d541
 802d518:	0802d909 	.word	0x0802d909
 802d51c:	0802d909 	.word	0x0802d909
 802d520:	0802d909 	.word	0x0802d909
 802d524:	0802d549 	.word	0x0802d549
 802d528:	0802d909 	.word	0x0802d909
 802d52c:	0802d909 	.word	0x0802d909
 802d530:	0802d909 	.word	0x0802d909
 802d534:	0802d739 	.word	0x0802d739
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802d538:	4bb9      	ldr	r3, [pc, #740]	; (802d820 <HAL_RCC_GetSysClockFreq+0x358>)
 802d53a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 802d53e:	e1e7      	b.n	802d910 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802d540:	4bb8      	ldr	r3, [pc, #736]	; (802d824 <HAL_RCC_GetSysClockFreq+0x35c>)
 802d542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 802d546:	e1e3      	b.n	802d910 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802d548:	4bb4      	ldr	r3, [pc, #720]	; (802d81c <HAL_RCC_GetSysClockFreq+0x354>)
 802d54a:	685b      	ldr	r3, [r3, #4]
 802d54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802d550:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802d554:	4bb1      	ldr	r3, [pc, #708]	; (802d81c <HAL_RCC_GetSysClockFreq+0x354>)
 802d556:	685b      	ldr	r3, [r3, #4]
 802d558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802d55c:	2b00      	cmp	r3, #0
 802d55e:	d071      	beq.n	802d644 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802d560:	4bae      	ldr	r3, [pc, #696]	; (802d81c <HAL_RCC_GetSysClockFreq+0x354>)
 802d562:	685b      	ldr	r3, [r3, #4]
 802d564:	099b      	lsrs	r3, r3, #6
 802d566:	2200      	movs	r2, #0
 802d568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802d56c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 802d570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 802d574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d578:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802d57c:	2300      	movs	r3, #0
 802d57e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802d582:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802d586:	4622      	mov	r2, r4
 802d588:	462b      	mov	r3, r5
 802d58a:	f04f 0000 	mov.w	r0, #0
 802d58e:	f04f 0100 	mov.w	r1, #0
 802d592:	0159      	lsls	r1, r3, #5
 802d594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802d598:	0150      	lsls	r0, r2, #5
 802d59a:	4602      	mov	r2, r0
 802d59c:	460b      	mov	r3, r1
 802d59e:	4621      	mov	r1, r4
 802d5a0:	1a51      	subs	r1, r2, r1
 802d5a2:	6439      	str	r1, [r7, #64]	; 0x40
 802d5a4:	4629      	mov	r1, r5
 802d5a6:	eb63 0301 	sbc.w	r3, r3, r1
 802d5aa:	647b      	str	r3, [r7, #68]	; 0x44
 802d5ac:	f04f 0200 	mov.w	r2, #0
 802d5b0:	f04f 0300 	mov.w	r3, #0
 802d5b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 802d5b8:	4649      	mov	r1, r9
 802d5ba:	018b      	lsls	r3, r1, #6
 802d5bc:	4641      	mov	r1, r8
 802d5be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802d5c2:	4641      	mov	r1, r8
 802d5c4:	018a      	lsls	r2, r1, #6
 802d5c6:	4641      	mov	r1, r8
 802d5c8:	1a51      	subs	r1, r2, r1
 802d5ca:	63b9      	str	r1, [r7, #56]	; 0x38
 802d5cc:	4649      	mov	r1, r9
 802d5ce:	eb63 0301 	sbc.w	r3, r3, r1
 802d5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 802d5d4:	f04f 0200 	mov.w	r2, #0
 802d5d8:	f04f 0300 	mov.w	r3, #0
 802d5dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 802d5e0:	4649      	mov	r1, r9
 802d5e2:	00cb      	lsls	r3, r1, #3
 802d5e4:	4641      	mov	r1, r8
 802d5e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802d5ea:	4641      	mov	r1, r8
 802d5ec:	00ca      	lsls	r2, r1, #3
 802d5ee:	4610      	mov	r0, r2
 802d5f0:	4619      	mov	r1, r3
 802d5f2:	4603      	mov	r3, r0
 802d5f4:	4622      	mov	r2, r4
 802d5f6:	189b      	adds	r3, r3, r2
 802d5f8:	633b      	str	r3, [r7, #48]	; 0x30
 802d5fa:	462b      	mov	r3, r5
 802d5fc:	460a      	mov	r2, r1
 802d5fe:	eb42 0303 	adc.w	r3, r2, r3
 802d602:	637b      	str	r3, [r7, #52]	; 0x34
 802d604:	f04f 0200 	mov.w	r2, #0
 802d608:	f04f 0300 	mov.w	r3, #0
 802d60c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 802d610:	4629      	mov	r1, r5
 802d612:	024b      	lsls	r3, r1, #9
 802d614:	4621      	mov	r1, r4
 802d616:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 802d61a:	4621      	mov	r1, r4
 802d61c:	024a      	lsls	r2, r1, #9
 802d61e:	4610      	mov	r0, r2
 802d620:	4619      	mov	r1, r3
 802d622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802d626:	2200      	movs	r2, #0
 802d628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802d62c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802d630:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 802d634:	f7f3 fb58 	bl	8020ce8 <__aeabi_uldivmod>
 802d638:	4602      	mov	r2, r0
 802d63a:	460b      	mov	r3, r1
 802d63c:	4613      	mov	r3, r2
 802d63e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802d642:	e067      	b.n	802d714 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802d644:	4b75      	ldr	r3, [pc, #468]	; (802d81c <HAL_RCC_GetSysClockFreq+0x354>)
 802d646:	685b      	ldr	r3, [r3, #4]
 802d648:	099b      	lsrs	r3, r3, #6
 802d64a:	2200      	movs	r2, #0
 802d64c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802d650:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 802d654:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802d658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d65c:	67bb      	str	r3, [r7, #120]	; 0x78
 802d65e:	2300      	movs	r3, #0
 802d660:	67fb      	str	r3, [r7, #124]	; 0x7c
 802d662:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 802d666:	4622      	mov	r2, r4
 802d668:	462b      	mov	r3, r5
 802d66a:	f04f 0000 	mov.w	r0, #0
 802d66e:	f04f 0100 	mov.w	r1, #0
 802d672:	0159      	lsls	r1, r3, #5
 802d674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802d678:	0150      	lsls	r0, r2, #5
 802d67a:	4602      	mov	r2, r0
 802d67c:	460b      	mov	r3, r1
 802d67e:	4621      	mov	r1, r4
 802d680:	1a51      	subs	r1, r2, r1
 802d682:	62b9      	str	r1, [r7, #40]	; 0x28
 802d684:	4629      	mov	r1, r5
 802d686:	eb63 0301 	sbc.w	r3, r3, r1
 802d68a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802d68c:	f04f 0200 	mov.w	r2, #0
 802d690:	f04f 0300 	mov.w	r3, #0
 802d694:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 802d698:	4649      	mov	r1, r9
 802d69a:	018b      	lsls	r3, r1, #6
 802d69c:	4641      	mov	r1, r8
 802d69e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802d6a2:	4641      	mov	r1, r8
 802d6a4:	018a      	lsls	r2, r1, #6
 802d6a6:	4641      	mov	r1, r8
 802d6a8:	ebb2 0a01 	subs.w	sl, r2, r1
 802d6ac:	4649      	mov	r1, r9
 802d6ae:	eb63 0b01 	sbc.w	fp, r3, r1
 802d6b2:	f04f 0200 	mov.w	r2, #0
 802d6b6:	f04f 0300 	mov.w	r3, #0
 802d6ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802d6be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802d6c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802d6c6:	4692      	mov	sl, r2
 802d6c8:	469b      	mov	fp, r3
 802d6ca:	4623      	mov	r3, r4
 802d6cc:	eb1a 0303 	adds.w	r3, sl, r3
 802d6d0:	623b      	str	r3, [r7, #32]
 802d6d2:	462b      	mov	r3, r5
 802d6d4:	eb4b 0303 	adc.w	r3, fp, r3
 802d6d8:	627b      	str	r3, [r7, #36]	; 0x24
 802d6da:	f04f 0200 	mov.w	r2, #0
 802d6de:	f04f 0300 	mov.w	r3, #0
 802d6e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 802d6e6:	4629      	mov	r1, r5
 802d6e8:	028b      	lsls	r3, r1, #10
 802d6ea:	4621      	mov	r1, r4
 802d6ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802d6f0:	4621      	mov	r1, r4
 802d6f2:	028a      	lsls	r2, r1, #10
 802d6f4:	4610      	mov	r0, r2
 802d6f6:	4619      	mov	r1, r3
 802d6f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802d6fc:	2200      	movs	r2, #0
 802d6fe:	673b      	str	r3, [r7, #112]	; 0x70
 802d700:	677a      	str	r2, [r7, #116]	; 0x74
 802d702:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 802d706:	f7f3 faef 	bl	8020ce8 <__aeabi_uldivmod>
 802d70a:	4602      	mov	r2, r0
 802d70c:	460b      	mov	r3, r1
 802d70e:	4613      	mov	r3, r2
 802d710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802d714:	4b41      	ldr	r3, [pc, #260]	; (802d81c <HAL_RCC_GetSysClockFreq+0x354>)
 802d716:	685b      	ldr	r3, [r3, #4]
 802d718:	0c1b      	lsrs	r3, r3, #16
 802d71a:	f003 0303 	and.w	r3, r3, #3
 802d71e:	3301      	adds	r3, #1
 802d720:	005b      	lsls	r3, r3, #1
 802d722:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 802d726:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802d72a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802d72e:	fbb2 f3f3 	udiv	r3, r2, r3
 802d732:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 802d736:	e0eb      	b.n	802d910 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802d738:	4b38      	ldr	r3, [pc, #224]	; (802d81c <HAL_RCC_GetSysClockFreq+0x354>)
 802d73a:	685b      	ldr	r3, [r3, #4]
 802d73c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802d740:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802d744:	4b35      	ldr	r3, [pc, #212]	; (802d81c <HAL_RCC_GetSysClockFreq+0x354>)
 802d746:	685b      	ldr	r3, [r3, #4]
 802d748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802d74c:	2b00      	cmp	r3, #0
 802d74e:	d06b      	beq.n	802d828 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802d750:	4b32      	ldr	r3, [pc, #200]	; (802d81c <HAL_RCC_GetSysClockFreq+0x354>)
 802d752:	685b      	ldr	r3, [r3, #4]
 802d754:	099b      	lsrs	r3, r3, #6
 802d756:	2200      	movs	r2, #0
 802d758:	66bb      	str	r3, [r7, #104]	; 0x68
 802d75a:	66fa      	str	r2, [r7, #108]	; 0x6c
 802d75c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802d75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802d762:	663b      	str	r3, [r7, #96]	; 0x60
 802d764:	2300      	movs	r3, #0
 802d766:	667b      	str	r3, [r7, #100]	; 0x64
 802d768:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 802d76c:	4622      	mov	r2, r4
 802d76e:	462b      	mov	r3, r5
 802d770:	f04f 0000 	mov.w	r0, #0
 802d774:	f04f 0100 	mov.w	r1, #0
 802d778:	0159      	lsls	r1, r3, #5
 802d77a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802d77e:	0150      	lsls	r0, r2, #5
 802d780:	4602      	mov	r2, r0
 802d782:	460b      	mov	r3, r1
 802d784:	4621      	mov	r1, r4
 802d786:	1a51      	subs	r1, r2, r1
 802d788:	61b9      	str	r1, [r7, #24]
 802d78a:	4629      	mov	r1, r5
 802d78c:	eb63 0301 	sbc.w	r3, r3, r1
 802d790:	61fb      	str	r3, [r7, #28]
 802d792:	f04f 0200 	mov.w	r2, #0
 802d796:	f04f 0300 	mov.w	r3, #0
 802d79a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 802d79e:	4659      	mov	r1, fp
 802d7a0:	018b      	lsls	r3, r1, #6
 802d7a2:	4651      	mov	r1, sl
 802d7a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802d7a8:	4651      	mov	r1, sl
 802d7aa:	018a      	lsls	r2, r1, #6
 802d7ac:	4651      	mov	r1, sl
 802d7ae:	ebb2 0801 	subs.w	r8, r2, r1
 802d7b2:	4659      	mov	r1, fp
 802d7b4:	eb63 0901 	sbc.w	r9, r3, r1
 802d7b8:	f04f 0200 	mov.w	r2, #0
 802d7bc:	f04f 0300 	mov.w	r3, #0
 802d7c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802d7c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802d7c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802d7cc:	4690      	mov	r8, r2
 802d7ce:	4699      	mov	r9, r3
 802d7d0:	4623      	mov	r3, r4
 802d7d2:	eb18 0303 	adds.w	r3, r8, r3
 802d7d6:	613b      	str	r3, [r7, #16]
 802d7d8:	462b      	mov	r3, r5
 802d7da:	eb49 0303 	adc.w	r3, r9, r3
 802d7de:	617b      	str	r3, [r7, #20]
 802d7e0:	f04f 0200 	mov.w	r2, #0
 802d7e4:	f04f 0300 	mov.w	r3, #0
 802d7e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 802d7ec:	4629      	mov	r1, r5
 802d7ee:	024b      	lsls	r3, r1, #9
 802d7f0:	4621      	mov	r1, r4
 802d7f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 802d7f6:	4621      	mov	r1, r4
 802d7f8:	024a      	lsls	r2, r1, #9
 802d7fa:	4610      	mov	r0, r2
 802d7fc:	4619      	mov	r1, r3
 802d7fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802d802:	2200      	movs	r2, #0
 802d804:	65bb      	str	r3, [r7, #88]	; 0x58
 802d806:	65fa      	str	r2, [r7, #92]	; 0x5c
 802d808:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802d80c:	f7f3 fa6c 	bl	8020ce8 <__aeabi_uldivmod>
 802d810:	4602      	mov	r2, r0
 802d812:	460b      	mov	r3, r1
 802d814:	4613      	mov	r3, r2
 802d816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802d81a:	e065      	b.n	802d8e8 <HAL_RCC_GetSysClockFreq+0x420>
 802d81c:	40023800 	.word	0x40023800
 802d820:	00f42400 	.word	0x00f42400
 802d824:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802d828:	4b3d      	ldr	r3, [pc, #244]	; (802d920 <HAL_RCC_GetSysClockFreq+0x458>)
 802d82a:	685b      	ldr	r3, [r3, #4]
 802d82c:	099b      	lsrs	r3, r3, #6
 802d82e:	2200      	movs	r2, #0
 802d830:	4618      	mov	r0, r3
 802d832:	4611      	mov	r1, r2
 802d834:	f3c0 0308 	ubfx	r3, r0, #0, #9
 802d838:	653b      	str	r3, [r7, #80]	; 0x50
 802d83a:	2300      	movs	r3, #0
 802d83c:	657b      	str	r3, [r7, #84]	; 0x54
 802d83e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 802d842:	4642      	mov	r2, r8
 802d844:	464b      	mov	r3, r9
 802d846:	f04f 0000 	mov.w	r0, #0
 802d84a:	f04f 0100 	mov.w	r1, #0
 802d84e:	0159      	lsls	r1, r3, #5
 802d850:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802d854:	0150      	lsls	r0, r2, #5
 802d856:	4602      	mov	r2, r0
 802d858:	460b      	mov	r3, r1
 802d85a:	4641      	mov	r1, r8
 802d85c:	1a51      	subs	r1, r2, r1
 802d85e:	60b9      	str	r1, [r7, #8]
 802d860:	4649      	mov	r1, r9
 802d862:	eb63 0301 	sbc.w	r3, r3, r1
 802d866:	60fb      	str	r3, [r7, #12]
 802d868:	f04f 0200 	mov.w	r2, #0
 802d86c:	f04f 0300 	mov.w	r3, #0
 802d870:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 802d874:	4659      	mov	r1, fp
 802d876:	018b      	lsls	r3, r1, #6
 802d878:	4651      	mov	r1, sl
 802d87a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802d87e:	4651      	mov	r1, sl
 802d880:	018a      	lsls	r2, r1, #6
 802d882:	4651      	mov	r1, sl
 802d884:	1a54      	subs	r4, r2, r1
 802d886:	4659      	mov	r1, fp
 802d888:	eb63 0501 	sbc.w	r5, r3, r1
 802d88c:	f04f 0200 	mov.w	r2, #0
 802d890:	f04f 0300 	mov.w	r3, #0
 802d894:	00eb      	lsls	r3, r5, #3
 802d896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802d89a:	00e2      	lsls	r2, r4, #3
 802d89c:	4614      	mov	r4, r2
 802d89e:	461d      	mov	r5, r3
 802d8a0:	4643      	mov	r3, r8
 802d8a2:	18e3      	adds	r3, r4, r3
 802d8a4:	603b      	str	r3, [r7, #0]
 802d8a6:	464b      	mov	r3, r9
 802d8a8:	eb45 0303 	adc.w	r3, r5, r3
 802d8ac:	607b      	str	r3, [r7, #4]
 802d8ae:	f04f 0200 	mov.w	r2, #0
 802d8b2:	f04f 0300 	mov.w	r3, #0
 802d8b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 802d8ba:	4629      	mov	r1, r5
 802d8bc:	028b      	lsls	r3, r1, #10
 802d8be:	4621      	mov	r1, r4
 802d8c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802d8c4:	4621      	mov	r1, r4
 802d8c6:	028a      	lsls	r2, r1, #10
 802d8c8:	4610      	mov	r0, r2
 802d8ca:	4619      	mov	r1, r3
 802d8cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802d8d0:	2200      	movs	r2, #0
 802d8d2:	64bb      	str	r3, [r7, #72]	; 0x48
 802d8d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 802d8d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802d8da:	f7f3 fa05 	bl	8020ce8 <__aeabi_uldivmod>
 802d8de:	4602      	mov	r2, r0
 802d8e0:	460b      	mov	r3, r1
 802d8e2:	4613      	mov	r3, r2
 802d8e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 802d8e8:	4b0d      	ldr	r3, [pc, #52]	; (802d920 <HAL_RCC_GetSysClockFreq+0x458>)
 802d8ea:	685b      	ldr	r3, [r3, #4]
 802d8ec:	0f1b      	lsrs	r3, r3, #28
 802d8ee:	f003 0307 	and.w	r3, r3, #7
 802d8f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 802d8f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 802d8fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802d8fe:	fbb2 f3f3 	udiv	r3, r2, r3
 802d902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 802d906:	e003      	b.n	802d910 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802d908:	4b06      	ldr	r3, [pc, #24]	; (802d924 <HAL_RCC_GetSysClockFreq+0x45c>)
 802d90a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 802d90e:	bf00      	nop
    }
  }
  return sysclockfreq;
 802d910:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 802d914:	4618      	mov	r0, r3
 802d916:	37b8      	adds	r7, #184	; 0xb8
 802d918:	46bd      	mov	sp, r7
 802d91a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802d91e:	bf00      	nop
 802d920:	40023800 	.word	0x40023800
 802d924:	00f42400 	.word	0x00f42400

0802d928 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802d928:	b580      	push	{r7, lr}
 802d92a:	b086      	sub	sp, #24
 802d92c:	af00      	add	r7, sp, #0
 802d92e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 802d930:	2300      	movs	r3, #0
 802d932:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802d934:	687b      	ldr	r3, [r7, #4]
 802d936:	681b      	ldr	r3, [r3, #0]
 802d938:	f003 0301 	and.w	r3, r3, #1
 802d93c:	2b00      	cmp	r3, #0
 802d93e:	f000 8083 	beq.w	802da48 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 802d942:	4b95      	ldr	r3, [pc, #596]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d944:	689b      	ldr	r3, [r3, #8]
 802d946:	f003 030c 	and.w	r3, r3, #12
 802d94a:	2b04      	cmp	r3, #4
 802d94c:	d019      	beq.n	802d982 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 802d94e:	4b92      	ldr	r3, [pc, #584]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d950:	689b      	ldr	r3, [r3, #8]
 802d952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 802d956:	2b08      	cmp	r3, #8
 802d958:	d106      	bne.n	802d968 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 802d95a:	4b8f      	ldr	r3, [pc, #572]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d95c:	685b      	ldr	r3, [r3, #4]
 802d95e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802d962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802d966:	d00c      	beq.n	802d982 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802d968:	4b8b      	ldr	r3, [pc, #556]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d96a:	689b      	ldr	r3, [r3, #8]
 802d96c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 802d970:	2b0c      	cmp	r3, #12
 802d972:	d112      	bne.n	802d99a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802d974:	4b88      	ldr	r3, [pc, #544]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d976:	685b      	ldr	r3, [r3, #4]
 802d978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802d97c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802d980:	d10b      	bne.n	802d99a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802d982:	4b85      	ldr	r3, [pc, #532]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d984:	681b      	ldr	r3, [r3, #0]
 802d986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802d98a:	2b00      	cmp	r3, #0
 802d98c:	d05b      	beq.n	802da46 <HAL_RCC_OscConfig+0x11e>
 802d98e:	687b      	ldr	r3, [r7, #4]
 802d990:	685b      	ldr	r3, [r3, #4]
 802d992:	2b00      	cmp	r3, #0
 802d994:	d157      	bne.n	802da46 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 802d996:	2301      	movs	r3, #1
 802d998:	e216      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802d99a:	687b      	ldr	r3, [r7, #4]
 802d99c:	685b      	ldr	r3, [r3, #4]
 802d99e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802d9a2:	d106      	bne.n	802d9b2 <HAL_RCC_OscConfig+0x8a>
 802d9a4:	4b7c      	ldr	r3, [pc, #496]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d9a6:	681b      	ldr	r3, [r3, #0]
 802d9a8:	4a7b      	ldr	r2, [pc, #492]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d9aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802d9ae:	6013      	str	r3, [r2, #0]
 802d9b0:	e01d      	b.n	802d9ee <HAL_RCC_OscConfig+0xc6>
 802d9b2:	687b      	ldr	r3, [r7, #4]
 802d9b4:	685b      	ldr	r3, [r3, #4]
 802d9b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802d9ba:	d10c      	bne.n	802d9d6 <HAL_RCC_OscConfig+0xae>
 802d9bc:	4b76      	ldr	r3, [pc, #472]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d9be:	681b      	ldr	r3, [r3, #0]
 802d9c0:	4a75      	ldr	r2, [pc, #468]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d9c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802d9c6:	6013      	str	r3, [r2, #0]
 802d9c8:	4b73      	ldr	r3, [pc, #460]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d9ca:	681b      	ldr	r3, [r3, #0]
 802d9cc:	4a72      	ldr	r2, [pc, #456]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d9ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802d9d2:	6013      	str	r3, [r2, #0]
 802d9d4:	e00b      	b.n	802d9ee <HAL_RCC_OscConfig+0xc6>
 802d9d6:	4b70      	ldr	r3, [pc, #448]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d9d8:	681b      	ldr	r3, [r3, #0]
 802d9da:	4a6f      	ldr	r2, [pc, #444]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d9dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802d9e0:	6013      	str	r3, [r2, #0]
 802d9e2:	4b6d      	ldr	r3, [pc, #436]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d9e4:	681b      	ldr	r3, [r3, #0]
 802d9e6:	4a6c      	ldr	r2, [pc, #432]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802d9e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802d9ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802d9ee:	687b      	ldr	r3, [r7, #4]
 802d9f0:	685b      	ldr	r3, [r3, #4]
 802d9f2:	2b00      	cmp	r3, #0
 802d9f4:	d013      	beq.n	802da1e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802d9f6:	f7fa fd91 	bl	802851c <HAL_GetTick>
 802d9fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802d9fc:	e008      	b.n	802da10 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802d9fe:	f7fa fd8d 	bl	802851c <HAL_GetTick>
 802da02:	4602      	mov	r2, r0
 802da04:	693b      	ldr	r3, [r7, #16]
 802da06:	1ad3      	subs	r3, r2, r3
 802da08:	2b64      	cmp	r3, #100	; 0x64
 802da0a:	d901      	bls.n	802da10 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 802da0c:	2303      	movs	r3, #3
 802da0e:	e1db      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802da10:	4b61      	ldr	r3, [pc, #388]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802da12:	681b      	ldr	r3, [r3, #0]
 802da14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802da18:	2b00      	cmp	r3, #0
 802da1a:	d0f0      	beq.n	802d9fe <HAL_RCC_OscConfig+0xd6>
 802da1c:	e014      	b.n	802da48 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802da1e:	f7fa fd7d 	bl	802851c <HAL_GetTick>
 802da22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802da24:	e008      	b.n	802da38 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802da26:	f7fa fd79 	bl	802851c <HAL_GetTick>
 802da2a:	4602      	mov	r2, r0
 802da2c:	693b      	ldr	r3, [r7, #16]
 802da2e:	1ad3      	subs	r3, r2, r3
 802da30:	2b64      	cmp	r3, #100	; 0x64
 802da32:	d901      	bls.n	802da38 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 802da34:	2303      	movs	r3, #3
 802da36:	e1c7      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802da38:	4b57      	ldr	r3, [pc, #348]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802da3a:	681b      	ldr	r3, [r3, #0]
 802da3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802da40:	2b00      	cmp	r3, #0
 802da42:	d1f0      	bne.n	802da26 <HAL_RCC_OscConfig+0xfe>
 802da44:	e000      	b.n	802da48 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802da46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802da48:	687b      	ldr	r3, [r7, #4]
 802da4a:	681b      	ldr	r3, [r3, #0]
 802da4c:	f003 0302 	and.w	r3, r3, #2
 802da50:	2b00      	cmp	r3, #0
 802da52:	d06f      	beq.n	802db34 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 802da54:	4b50      	ldr	r3, [pc, #320]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802da56:	689b      	ldr	r3, [r3, #8]
 802da58:	f003 030c 	and.w	r3, r3, #12
 802da5c:	2b00      	cmp	r3, #0
 802da5e:	d017      	beq.n	802da90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 802da60:	4b4d      	ldr	r3, [pc, #308]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802da62:	689b      	ldr	r3, [r3, #8]
 802da64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 802da68:	2b08      	cmp	r3, #8
 802da6a:	d105      	bne.n	802da78 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 802da6c:	4b4a      	ldr	r3, [pc, #296]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802da6e:	685b      	ldr	r3, [r3, #4]
 802da70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802da74:	2b00      	cmp	r3, #0
 802da76:	d00b      	beq.n	802da90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802da78:	4b47      	ldr	r3, [pc, #284]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802da7a:	689b      	ldr	r3, [r3, #8]
 802da7c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 802da80:	2b0c      	cmp	r3, #12
 802da82:	d11c      	bne.n	802dabe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802da84:	4b44      	ldr	r3, [pc, #272]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802da86:	685b      	ldr	r3, [r3, #4]
 802da88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802da8c:	2b00      	cmp	r3, #0
 802da8e:	d116      	bne.n	802dabe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802da90:	4b41      	ldr	r3, [pc, #260]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802da92:	681b      	ldr	r3, [r3, #0]
 802da94:	f003 0302 	and.w	r3, r3, #2
 802da98:	2b00      	cmp	r3, #0
 802da9a:	d005      	beq.n	802daa8 <HAL_RCC_OscConfig+0x180>
 802da9c:	687b      	ldr	r3, [r7, #4]
 802da9e:	68db      	ldr	r3, [r3, #12]
 802daa0:	2b01      	cmp	r3, #1
 802daa2:	d001      	beq.n	802daa8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 802daa4:	2301      	movs	r3, #1
 802daa6:	e18f      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802daa8:	4b3b      	ldr	r3, [pc, #236]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802daaa:	681b      	ldr	r3, [r3, #0]
 802daac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802dab0:	687b      	ldr	r3, [r7, #4]
 802dab2:	691b      	ldr	r3, [r3, #16]
 802dab4:	00db      	lsls	r3, r3, #3
 802dab6:	4938      	ldr	r1, [pc, #224]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802dab8:	4313      	orrs	r3, r2
 802daba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802dabc:	e03a      	b.n	802db34 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802dabe:	687b      	ldr	r3, [r7, #4]
 802dac0:	68db      	ldr	r3, [r3, #12]
 802dac2:	2b00      	cmp	r3, #0
 802dac4:	d020      	beq.n	802db08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 802dac6:	4b35      	ldr	r3, [pc, #212]	; (802db9c <HAL_RCC_OscConfig+0x274>)
 802dac8:	2201      	movs	r2, #1
 802daca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802dacc:	f7fa fd26 	bl	802851c <HAL_GetTick>
 802dad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802dad2:	e008      	b.n	802dae6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802dad4:	f7fa fd22 	bl	802851c <HAL_GetTick>
 802dad8:	4602      	mov	r2, r0
 802dada:	693b      	ldr	r3, [r7, #16]
 802dadc:	1ad3      	subs	r3, r2, r3
 802dade:	2b02      	cmp	r3, #2
 802dae0:	d901      	bls.n	802dae6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 802dae2:	2303      	movs	r3, #3
 802dae4:	e170      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802dae6:	4b2c      	ldr	r3, [pc, #176]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802dae8:	681b      	ldr	r3, [r3, #0]
 802daea:	f003 0302 	and.w	r3, r3, #2
 802daee:	2b00      	cmp	r3, #0
 802daf0:	d0f0      	beq.n	802dad4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802daf2:	4b29      	ldr	r3, [pc, #164]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802daf4:	681b      	ldr	r3, [r3, #0]
 802daf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802dafa:	687b      	ldr	r3, [r7, #4]
 802dafc:	691b      	ldr	r3, [r3, #16]
 802dafe:	00db      	lsls	r3, r3, #3
 802db00:	4925      	ldr	r1, [pc, #148]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802db02:	4313      	orrs	r3, r2
 802db04:	600b      	str	r3, [r1, #0]
 802db06:	e015      	b.n	802db34 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802db08:	4b24      	ldr	r3, [pc, #144]	; (802db9c <HAL_RCC_OscConfig+0x274>)
 802db0a:	2200      	movs	r2, #0
 802db0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802db0e:	f7fa fd05 	bl	802851c <HAL_GetTick>
 802db12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802db14:	e008      	b.n	802db28 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802db16:	f7fa fd01 	bl	802851c <HAL_GetTick>
 802db1a:	4602      	mov	r2, r0
 802db1c:	693b      	ldr	r3, [r7, #16]
 802db1e:	1ad3      	subs	r3, r2, r3
 802db20:	2b02      	cmp	r3, #2
 802db22:	d901      	bls.n	802db28 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 802db24:	2303      	movs	r3, #3
 802db26:	e14f      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802db28:	4b1b      	ldr	r3, [pc, #108]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802db2a:	681b      	ldr	r3, [r3, #0]
 802db2c:	f003 0302 	and.w	r3, r3, #2
 802db30:	2b00      	cmp	r3, #0
 802db32:	d1f0      	bne.n	802db16 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802db34:	687b      	ldr	r3, [r7, #4]
 802db36:	681b      	ldr	r3, [r3, #0]
 802db38:	f003 0308 	and.w	r3, r3, #8
 802db3c:	2b00      	cmp	r3, #0
 802db3e:	d037      	beq.n	802dbb0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802db40:	687b      	ldr	r3, [r7, #4]
 802db42:	695b      	ldr	r3, [r3, #20]
 802db44:	2b00      	cmp	r3, #0
 802db46:	d016      	beq.n	802db76 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802db48:	4b15      	ldr	r3, [pc, #84]	; (802dba0 <HAL_RCC_OscConfig+0x278>)
 802db4a:	2201      	movs	r2, #1
 802db4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802db4e:	f7fa fce5 	bl	802851c <HAL_GetTick>
 802db52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802db54:	e008      	b.n	802db68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802db56:	f7fa fce1 	bl	802851c <HAL_GetTick>
 802db5a:	4602      	mov	r2, r0
 802db5c:	693b      	ldr	r3, [r7, #16]
 802db5e:	1ad3      	subs	r3, r2, r3
 802db60:	2b02      	cmp	r3, #2
 802db62:	d901      	bls.n	802db68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 802db64:	2303      	movs	r3, #3
 802db66:	e12f      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802db68:	4b0b      	ldr	r3, [pc, #44]	; (802db98 <HAL_RCC_OscConfig+0x270>)
 802db6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802db6c:	f003 0302 	and.w	r3, r3, #2
 802db70:	2b00      	cmp	r3, #0
 802db72:	d0f0      	beq.n	802db56 <HAL_RCC_OscConfig+0x22e>
 802db74:	e01c      	b.n	802dbb0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802db76:	4b0a      	ldr	r3, [pc, #40]	; (802dba0 <HAL_RCC_OscConfig+0x278>)
 802db78:	2200      	movs	r2, #0
 802db7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802db7c:	f7fa fcce 	bl	802851c <HAL_GetTick>
 802db80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802db82:	e00f      	b.n	802dba4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802db84:	f7fa fcca 	bl	802851c <HAL_GetTick>
 802db88:	4602      	mov	r2, r0
 802db8a:	693b      	ldr	r3, [r7, #16]
 802db8c:	1ad3      	subs	r3, r2, r3
 802db8e:	2b02      	cmp	r3, #2
 802db90:	d908      	bls.n	802dba4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 802db92:	2303      	movs	r3, #3
 802db94:	e118      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
 802db96:	bf00      	nop
 802db98:	40023800 	.word	0x40023800
 802db9c:	42470000 	.word	0x42470000
 802dba0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802dba4:	4b8a      	ldr	r3, [pc, #552]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802dba8:	f003 0302 	and.w	r3, r3, #2
 802dbac:	2b00      	cmp	r3, #0
 802dbae:	d1e9      	bne.n	802db84 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802dbb0:	687b      	ldr	r3, [r7, #4]
 802dbb2:	681b      	ldr	r3, [r3, #0]
 802dbb4:	f003 0304 	and.w	r3, r3, #4
 802dbb8:	2b00      	cmp	r3, #0
 802dbba:	f000 8097 	beq.w	802dcec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 802dbbe:	2300      	movs	r3, #0
 802dbc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802dbc2:	4b83      	ldr	r3, [pc, #524]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802dbc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802dbca:	2b00      	cmp	r3, #0
 802dbcc:	d10f      	bne.n	802dbee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802dbce:	2300      	movs	r3, #0
 802dbd0:	60fb      	str	r3, [r7, #12]
 802dbd2:	4b7f      	ldr	r3, [pc, #508]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802dbd6:	4a7e      	ldr	r2, [pc, #504]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dbd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802dbdc:	6413      	str	r3, [r2, #64]	; 0x40
 802dbde:	4b7c      	ldr	r3, [pc, #496]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dbe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802dbe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802dbe6:	60fb      	str	r3, [r7, #12]
 802dbe8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 802dbea:	2301      	movs	r3, #1
 802dbec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802dbee:	4b79      	ldr	r3, [pc, #484]	; (802ddd4 <HAL_RCC_OscConfig+0x4ac>)
 802dbf0:	681b      	ldr	r3, [r3, #0]
 802dbf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802dbf6:	2b00      	cmp	r3, #0
 802dbf8:	d118      	bne.n	802dc2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802dbfa:	4b76      	ldr	r3, [pc, #472]	; (802ddd4 <HAL_RCC_OscConfig+0x4ac>)
 802dbfc:	681b      	ldr	r3, [r3, #0]
 802dbfe:	4a75      	ldr	r2, [pc, #468]	; (802ddd4 <HAL_RCC_OscConfig+0x4ac>)
 802dc00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802dc04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802dc06:	f7fa fc89 	bl	802851c <HAL_GetTick>
 802dc0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802dc0c:	e008      	b.n	802dc20 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802dc0e:	f7fa fc85 	bl	802851c <HAL_GetTick>
 802dc12:	4602      	mov	r2, r0
 802dc14:	693b      	ldr	r3, [r7, #16]
 802dc16:	1ad3      	subs	r3, r2, r3
 802dc18:	2b02      	cmp	r3, #2
 802dc1a:	d901      	bls.n	802dc20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 802dc1c:	2303      	movs	r3, #3
 802dc1e:	e0d3      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802dc20:	4b6c      	ldr	r3, [pc, #432]	; (802ddd4 <HAL_RCC_OscConfig+0x4ac>)
 802dc22:	681b      	ldr	r3, [r3, #0]
 802dc24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802dc28:	2b00      	cmp	r3, #0
 802dc2a:	d0f0      	beq.n	802dc0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802dc2c:	687b      	ldr	r3, [r7, #4]
 802dc2e:	689b      	ldr	r3, [r3, #8]
 802dc30:	2b01      	cmp	r3, #1
 802dc32:	d106      	bne.n	802dc42 <HAL_RCC_OscConfig+0x31a>
 802dc34:	4b66      	ldr	r3, [pc, #408]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dc36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dc38:	4a65      	ldr	r2, [pc, #404]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dc3a:	f043 0301 	orr.w	r3, r3, #1
 802dc3e:	6713      	str	r3, [r2, #112]	; 0x70
 802dc40:	e01c      	b.n	802dc7c <HAL_RCC_OscConfig+0x354>
 802dc42:	687b      	ldr	r3, [r7, #4]
 802dc44:	689b      	ldr	r3, [r3, #8]
 802dc46:	2b05      	cmp	r3, #5
 802dc48:	d10c      	bne.n	802dc64 <HAL_RCC_OscConfig+0x33c>
 802dc4a:	4b61      	ldr	r3, [pc, #388]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dc4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dc4e:	4a60      	ldr	r2, [pc, #384]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dc50:	f043 0304 	orr.w	r3, r3, #4
 802dc54:	6713      	str	r3, [r2, #112]	; 0x70
 802dc56:	4b5e      	ldr	r3, [pc, #376]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dc58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dc5a:	4a5d      	ldr	r2, [pc, #372]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dc5c:	f043 0301 	orr.w	r3, r3, #1
 802dc60:	6713      	str	r3, [r2, #112]	; 0x70
 802dc62:	e00b      	b.n	802dc7c <HAL_RCC_OscConfig+0x354>
 802dc64:	4b5a      	ldr	r3, [pc, #360]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dc68:	4a59      	ldr	r2, [pc, #356]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dc6a:	f023 0301 	bic.w	r3, r3, #1
 802dc6e:	6713      	str	r3, [r2, #112]	; 0x70
 802dc70:	4b57      	ldr	r3, [pc, #348]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dc72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dc74:	4a56      	ldr	r2, [pc, #344]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dc76:	f023 0304 	bic.w	r3, r3, #4
 802dc7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 802dc7c:	687b      	ldr	r3, [r7, #4]
 802dc7e:	689b      	ldr	r3, [r3, #8]
 802dc80:	2b00      	cmp	r3, #0
 802dc82:	d015      	beq.n	802dcb0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802dc84:	f7fa fc4a 	bl	802851c <HAL_GetTick>
 802dc88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802dc8a:	e00a      	b.n	802dca2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802dc8c:	f7fa fc46 	bl	802851c <HAL_GetTick>
 802dc90:	4602      	mov	r2, r0
 802dc92:	693b      	ldr	r3, [r7, #16]
 802dc94:	1ad3      	subs	r3, r2, r3
 802dc96:	f241 3288 	movw	r2, #5000	; 0x1388
 802dc9a:	4293      	cmp	r3, r2
 802dc9c:	d901      	bls.n	802dca2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 802dc9e:	2303      	movs	r3, #3
 802dca0:	e092      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802dca2:	4b4b      	ldr	r3, [pc, #300]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dca6:	f003 0302 	and.w	r3, r3, #2
 802dcaa:	2b00      	cmp	r3, #0
 802dcac:	d0ee      	beq.n	802dc8c <HAL_RCC_OscConfig+0x364>
 802dcae:	e014      	b.n	802dcda <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802dcb0:	f7fa fc34 	bl	802851c <HAL_GetTick>
 802dcb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802dcb6:	e00a      	b.n	802dcce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802dcb8:	f7fa fc30 	bl	802851c <HAL_GetTick>
 802dcbc:	4602      	mov	r2, r0
 802dcbe:	693b      	ldr	r3, [r7, #16]
 802dcc0:	1ad3      	subs	r3, r2, r3
 802dcc2:	f241 3288 	movw	r2, #5000	; 0x1388
 802dcc6:	4293      	cmp	r3, r2
 802dcc8:	d901      	bls.n	802dcce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 802dcca:	2303      	movs	r3, #3
 802dccc:	e07c      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802dcce:	4b40      	ldr	r3, [pc, #256]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dcd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802dcd2:	f003 0302 	and.w	r3, r3, #2
 802dcd6:	2b00      	cmp	r3, #0
 802dcd8:	d1ee      	bne.n	802dcb8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 802dcda:	7dfb      	ldrb	r3, [r7, #23]
 802dcdc:	2b01      	cmp	r3, #1
 802dcde:	d105      	bne.n	802dcec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802dce0:	4b3b      	ldr	r3, [pc, #236]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802dce4:	4a3a      	ldr	r2, [pc, #232]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802dcea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802dcec:	687b      	ldr	r3, [r7, #4]
 802dcee:	699b      	ldr	r3, [r3, #24]
 802dcf0:	2b00      	cmp	r3, #0
 802dcf2:	d068      	beq.n	802ddc6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802dcf4:	4b36      	ldr	r3, [pc, #216]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dcf6:	689b      	ldr	r3, [r3, #8]
 802dcf8:	f003 030c 	and.w	r3, r3, #12
 802dcfc:	2b08      	cmp	r3, #8
 802dcfe:	d060      	beq.n	802ddc2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802dd00:	687b      	ldr	r3, [r7, #4]
 802dd02:	699b      	ldr	r3, [r3, #24]
 802dd04:	2b02      	cmp	r3, #2
 802dd06:	d145      	bne.n	802dd94 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802dd08:	4b33      	ldr	r3, [pc, #204]	; (802ddd8 <HAL_RCC_OscConfig+0x4b0>)
 802dd0a:	2200      	movs	r2, #0
 802dd0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802dd0e:	f7fa fc05 	bl	802851c <HAL_GetTick>
 802dd12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802dd14:	e008      	b.n	802dd28 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802dd16:	f7fa fc01 	bl	802851c <HAL_GetTick>
 802dd1a:	4602      	mov	r2, r0
 802dd1c:	693b      	ldr	r3, [r7, #16]
 802dd1e:	1ad3      	subs	r3, r2, r3
 802dd20:	2b02      	cmp	r3, #2
 802dd22:	d901      	bls.n	802dd28 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 802dd24:	2303      	movs	r3, #3
 802dd26:	e04f      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802dd28:	4b29      	ldr	r3, [pc, #164]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dd2a:	681b      	ldr	r3, [r3, #0]
 802dd2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802dd30:	2b00      	cmp	r3, #0
 802dd32:	d1f0      	bne.n	802dd16 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802dd34:	687b      	ldr	r3, [r7, #4]
 802dd36:	69da      	ldr	r2, [r3, #28]
 802dd38:	687b      	ldr	r3, [r7, #4]
 802dd3a:	6a1b      	ldr	r3, [r3, #32]
 802dd3c:	431a      	orrs	r2, r3
 802dd3e:	687b      	ldr	r3, [r7, #4]
 802dd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802dd42:	019b      	lsls	r3, r3, #6
 802dd44:	431a      	orrs	r2, r3
 802dd46:	687b      	ldr	r3, [r7, #4]
 802dd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802dd4a:	085b      	lsrs	r3, r3, #1
 802dd4c:	3b01      	subs	r3, #1
 802dd4e:	041b      	lsls	r3, r3, #16
 802dd50:	431a      	orrs	r2, r3
 802dd52:	687b      	ldr	r3, [r7, #4]
 802dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802dd56:	061b      	lsls	r3, r3, #24
 802dd58:	431a      	orrs	r2, r3
 802dd5a:	687b      	ldr	r3, [r7, #4]
 802dd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802dd5e:	071b      	lsls	r3, r3, #28
 802dd60:	491b      	ldr	r1, [pc, #108]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dd62:	4313      	orrs	r3, r2
 802dd64:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802dd66:	4b1c      	ldr	r3, [pc, #112]	; (802ddd8 <HAL_RCC_OscConfig+0x4b0>)
 802dd68:	2201      	movs	r2, #1
 802dd6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802dd6c:	f7fa fbd6 	bl	802851c <HAL_GetTick>
 802dd70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802dd72:	e008      	b.n	802dd86 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802dd74:	f7fa fbd2 	bl	802851c <HAL_GetTick>
 802dd78:	4602      	mov	r2, r0
 802dd7a:	693b      	ldr	r3, [r7, #16]
 802dd7c:	1ad3      	subs	r3, r2, r3
 802dd7e:	2b02      	cmp	r3, #2
 802dd80:	d901      	bls.n	802dd86 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 802dd82:	2303      	movs	r3, #3
 802dd84:	e020      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802dd86:	4b12      	ldr	r3, [pc, #72]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802dd88:	681b      	ldr	r3, [r3, #0]
 802dd8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802dd8e:	2b00      	cmp	r3, #0
 802dd90:	d0f0      	beq.n	802dd74 <HAL_RCC_OscConfig+0x44c>
 802dd92:	e018      	b.n	802ddc6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802dd94:	4b10      	ldr	r3, [pc, #64]	; (802ddd8 <HAL_RCC_OscConfig+0x4b0>)
 802dd96:	2200      	movs	r2, #0
 802dd98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802dd9a:	f7fa fbbf 	bl	802851c <HAL_GetTick>
 802dd9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802dda0:	e008      	b.n	802ddb4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802dda2:	f7fa fbbb 	bl	802851c <HAL_GetTick>
 802dda6:	4602      	mov	r2, r0
 802dda8:	693b      	ldr	r3, [r7, #16]
 802ddaa:	1ad3      	subs	r3, r2, r3
 802ddac:	2b02      	cmp	r3, #2
 802ddae:	d901      	bls.n	802ddb4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 802ddb0:	2303      	movs	r3, #3
 802ddb2:	e009      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802ddb4:	4b06      	ldr	r3, [pc, #24]	; (802ddd0 <HAL_RCC_OscConfig+0x4a8>)
 802ddb6:	681b      	ldr	r3, [r3, #0]
 802ddb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802ddbc:	2b00      	cmp	r3, #0
 802ddbe:	d1f0      	bne.n	802dda2 <HAL_RCC_OscConfig+0x47a>
 802ddc0:	e001      	b.n	802ddc6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 802ddc2:	2301      	movs	r3, #1
 802ddc4:	e000      	b.n	802ddc8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 802ddc6:	2300      	movs	r3, #0
}
 802ddc8:	4618      	mov	r0, r3
 802ddca:	3718      	adds	r7, #24
 802ddcc:	46bd      	mov	sp, r7
 802ddce:	bd80      	pop	{r7, pc}
 802ddd0:	40023800 	.word	0x40023800
 802ddd4:	40007000 	.word	0x40007000
 802ddd8:	42470060 	.word	0x42470060

0802dddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802dddc:	b580      	push	{r7, lr}
 802ddde:	b082      	sub	sp, #8
 802dde0:	af00      	add	r7, sp, #0
 802dde2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802dde4:	687b      	ldr	r3, [r7, #4]
 802dde6:	2b00      	cmp	r3, #0
 802dde8:	d101      	bne.n	802ddee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802ddea:	2301      	movs	r3, #1
 802ddec:	e056      	b.n	802de9c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802ddee:	687b      	ldr	r3, [r7, #4]
 802ddf0:	2200      	movs	r2, #0
 802ddf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 802ddf4:	687b      	ldr	r3, [r7, #4]
 802ddf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802ddfa:	b2db      	uxtb	r3, r3
 802ddfc:	2b00      	cmp	r3, #0
 802ddfe:	d106      	bne.n	802de0e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802de00:	687b      	ldr	r3, [r7, #4]
 802de02:	2200      	movs	r2, #0
 802de04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802de08:	6878      	ldr	r0, [r7, #4]
 802de0a:	f009 fea9 	bl	8037b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802de0e:	687b      	ldr	r3, [r7, #4]
 802de10:	2202      	movs	r2, #2
 802de12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802de16:	687b      	ldr	r3, [r7, #4]
 802de18:	681b      	ldr	r3, [r3, #0]
 802de1a:	681a      	ldr	r2, [r3, #0]
 802de1c:	687b      	ldr	r3, [r7, #4]
 802de1e:	681b      	ldr	r3, [r3, #0]
 802de20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802de24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 802de26:	687b      	ldr	r3, [r7, #4]
 802de28:	685a      	ldr	r2, [r3, #4]
 802de2a:	687b      	ldr	r3, [r7, #4]
 802de2c:	689b      	ldr	r3, [r3, #8]
 802de2e:	431a      	orrs	r2, r3
 802de30:	687b      	ldr	r3, [r7, #4]
 802de32:	68db      	ldr	r3, [r3, #12]
 802de34:	431a      	orrs	r2, r3
 802de36:	687b      	ldr	r3, [r7, #4]
 802de38:	691b      	ldr	r3, [r3, #16]
 802de3a:	431a      	orrs	r2, r3
 802de3c:	687b      	ldr	r3, [r7, #4]
 802de3e:	695b      	ldr	r3, [r3, #20]
 802de40:	431a      	orrs	r2, r3
 802de42:	687b      	ldr	r3, [r7, #4]
 802de44:	699b      	ldr	r3, [r3, #24]
 802de46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802de4a:	431a      	orrs	r2, r3
 802de4c:	687b      	ldr	r3, [r7, #4]
 802de4e:	69db      	ldr	r3, [r3, #28]
 802de50:	431a      	orrs	r2, r3
 802de52:	687b      	ldr	r3, [r7, #4]
 802de54:	6a1b      	ldr	r3, [r3, #32]
 802de56:	ea42 0103 	orr.w	r1, r2, r3
 802de5a:	687b      	ldr	r3, [r7, #4]
 802de5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802de5e:	687b      	ldr	r3, [r7, #4]
 802de60:	681b      	ldr	r3, [r3, #0]
 802de62:	430a      	orrs	r2, r1
 802de64:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 802de66:	687b      	ldr	r3, [r7, #4]
 802de68:	699b      	ldr	r3, [r3, #24]
 802de6a:	0c1b      	lsrs	r3, r3, #16
 802de6c:	f003 0104 	and.w	r1, r3, #4
 802de70:	687b      	ldr	r3, [r7, #4]
 802de72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802de74:	687b      	ldr	r3, [r7, #4]
 802de76:	681b      	ldr	r3, [r3, #0]
 802de78:	430a      	orrs	r2, r1
 802de7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802de7c:	687b      	ldr	r3, [r7, #4]
 802de7e:	681b      	ldr	r3, [r3, #0]
 802de80:	69da      	ldr	r2, [r3, #28]
 802de82:	687b      	ldr	r3, [r7, #4]
 802de84:	681b      	ldr	r3, [r3, #0]
 802de86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802de8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802de8c:	687b      	ldr	r3, [r7, #4]
 802de8e:	2200      	movs	r2, #0
 802de90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802de92:	687b      	ldr	r3, [r7, #4]
 802de94:	2201      	movs	r2, #1
 802de96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 802de9a:	2300      	movs	r3, #0
}
 802de9c:	4618      	mov	r0, r3
 802de9e:	3708      	adds	r7, #8
 802dea0:	46bd      	mov	sp, r7
 802dea2:	bd80      	pop	{r7, pc}

0802dea4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802dea4:	b580      	push	{r7, lr}
 802dea6:	b088      	sub	sp, #32
 802dea8:	af00      	add	r7, sp, #0
 802deaa:	60f8      	str	r0, [r7, #12]
 802deac:	60b9      	str	r1, [r7, #8]
 802deae:	603b      	str	r3, [r7, #0]
 802deb0:	4613      	mov	r3, r2
 802deb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802deb4:	2300      	movs	r3, #0
 802deb6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802deb8:	68fb      	ldr	r3, [r7, #12]
 802deba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802debe:	2b01      	cmp	r3, #1
 802dec0:	d101      	bne.n	802dec6 <HAL_SPI_Transmit+0x22>
 802dec2:	2302      	movs	r3, #2
 802dec4:	e11e      	b.n	802e104 <HAL_SPI_Transmit+0x260>
 802dec6:	68fb      	ldr	r3, [r7, #12]
 802dec8:	2201      	movs	r2, #1
 802deca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802dece:	f7fa fb25 	bl	802851c <HAL_GetTick>
 802ded2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 802ded4:	88fb      	ldrh	r3, [r7, #6]
 802ded6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 802ded8:	68fb      	ldr	r3, [r7, #12]
 802deda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802dede:	b2db      	uxtb	r3, r3
 802dee0:	2b01      	cmp	r3, #1
 802dee2:	d002      	beq.n	802deea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 802dee4:	2302      	movs	r3, #2
 802dee6:	77fb      	strb	r3, [r7, #31]
    goto error;
 802dee8:	e103      	b.n	802e0f2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 802deea:	68bb      	ldr	r3, [r7, #8]
 802deec:	2b00      	cmp	r3, #0
 802deee:	d002      	beq.n	802def6 <HAL_SPI_Transmit+0x52>
 802def0:	88fb      	ldrh	r3, [r7, #6]
 802def2:	2b00      	cmp	r3, #0
 802def4:	d102      	bne.n	802defc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802def6:	2301      	movs	r3, #1
 802def8:	77fb      	strb	r3, [r7, #31]
    goto error;
 802defa:	e0fa      	b.n	802e0f2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802defc:	68fb      	ldr	r3, [r7, #12]
 802defe:	2203      	movs	r2, #3
 802df00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802df04:	68fb      	ldr	r3, [r7, #12]
 802df06:	2200      	movs	r2, #0
 802df08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802df0a:	68fb      	ldr	r3, [r7, #12]
 802df0c:	68ba      	ldr	r2, [r7, #8]
 802df0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 802df10:	68fb      	ldr	r3, [r7, #12]
 802df12:	88fa      	ldrh	r2, [r7, #6]
 802df14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802df16:	68fb      	ldr	r3, [r7, #12]
 802df18:	88fa      	ldrh	r2, [r7, #6]
 802df1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802df1c:	68fb      	ldr	r3, [r7, #12]
 802df1e:	2200      	movs	r2, #0
 802df20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802df22:	68fb      	ldr	r3, [r7, #12]
 802df24:	2200      	movs	r2, #0
 802df26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 802df28:	68fb      	ldr	r3, [r7, #12]
 802df2a:	2200      	movs	r2, #0
 802df2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 802df2e:	68fb      	ldr	r3, [r7, #12]
 802df30:	2200      	movs	r2, #0
 802df32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802df34:	68fb      	ldr	r3, [r7, #12]
 802df36:	2200      	movs	r2, #0
 802df38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802df3a:	68fb      	ldr	r3, [r7, #12]
 802df3c:	689b      	ldr	r3, [r3, #8]
 802df3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802df42:	d107      	bne.n	802df54 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 802df44:	68fb      	ldr	r3, [r7, #12]
 802df46:	681b      	ldr	r3, [r3, #0]
 802df48:	681a      	ldr	r2, [r3, #0]
 802df4a:	68fb      	ldr	r3, [r7, #12]
 802df4c:	681b      	ldr	r3, [r3, #0]
 802df4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802df52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802df54:	68fb      	ldr	r3, [r7, #12]
 802df56:	681b      	ldr	r3, [r3, #0]
 802df58:	681b      	ldr	r3, [r3, #0]
 802df5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802df5e:	2b40      	cmp	r3, #64	; 0x40
 802df60:	d007      	beq.n	802df72 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802df62:	68fb      	ldr	r3, [r7, #12]
 802df64:	681b      	ldr	r3, [r3, #0]
 802df66:	681a      	ldr	r2, [r3, #0]
 802df68:	68fb      	ldr	r3, [r7, #12]
 802df6a:	681b      	ldr	r3, [r3, #0]
 802df6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802df70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802df72:	68fb      	ldr	r3, [r7, #12]
 802df74:	68db      	ldr	r3, [r3, #12]
 802df76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802df7a:	d14b      	bne.n	802e014 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802df7c:	68fb      	ldr	r3, [r7, #12]
 802df7e:	685b      	ldr	r3, [r3, #4]
 802df80:	2b00      	cmp	r3, #0
 802df82:	d002      	beq.n	802df8a <HAL_SPI_Transmit+0xe6>
 802df84:	8afb      	ldrh	r3, [r7, #22]
 802df86:	2b01      	cmp	r3, #1
 802df88:	d13e      	bne.n	802e008 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802df8a:	68fb      	ldr	r3, [r7, #12]
 802df8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802df8e:	881a      	ldrh	r2, [r3, #0]
 802df90:	68fb      	ldr	r3, [r7, #12]
 802df92:	681b      	ldr	r3, [r3, #0]
 802df94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802df96:	68fb      	ldr	r3, [r7, #12]
 802df98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802df9a:	1c9a      	adds	r2, r3, #2
 802df9c:	68fb      	ldr	r3, [r7, #12]
 802df9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802dfa0:	68fb      	ldr	r3, [r7, #12]
 802dfa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802dfa4:	b29b      	uxth	r3, r3
 802dfa6:	3b01      	subs	r3, #1
 802dfa8:	b29a      	uxth	r2, r3
 802dfaa:	68fb      	ldr	r3, [r7, #12]
 802dfac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 802dfae:	e02b      	b.n	802e008 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802dfb0:	68fb      	ldr	r3, [r7, #12]
 802dfb2:	681b      	ldr	r3, [r3, #0]
 802dfb4:	689b      	ldr	r3, [r3, #8]
 802dfb6:	f003 0302 	and.w	r3, r3, #2
 802dfba:	2b02      	cmp	r3, #2
 802dfbc:	d112      	bne.n	802dfe4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802dfbe:	68fb      	ldr	r3, [r7, #12]
 802dfc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802dfc2:	881a      	ldrh	r2, [r3, #0]
 802dfc4:	68fb      	ldr	r3, [r7, #12]
 802dfc6:	681b      	ldr	r3, [r3, #0]
 802dfc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802dfca:	68fb      	ldr	r3, [r7, #12]
 802dfcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802dfce:	1c9a      	adds	r2, r3, #2
 802dfd0:	68fb      	ldr	r3, [r7, #12]
 802dfd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802dfd4:	68fb      	ldr	r3, [r7, #12]
 802dfd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802dfd8:	b29b      	uxth	r3, r3
 802dfda:	3b01      	subs	r3, #1
 802dfdc:	b29a      	uxth	r2, r3
 802dfde:	68fb      	ldr	r3, [r7, #12]
 802dfe0:	86da      	strh	r2, [r3, #54]	; 0x36
 802dfe2:	e011      	b.n	802e008 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802dfe4:	f7fa fa9a 	bl	802851c <HAL_GetTick>
 802dfe8:	4602      	mov	r2, r0
 802dfea:	69bb      	ldr	r3, [r7, #24]
 802dfec:	1ad3      	subs	r3, r2, r3
 802dfee:	683a      	ldr	r2, [r7, #0]
 802dff0:	429a      	cmp	r2, r3
 802dff2:	d803      	bhi.n	802dffc <HAL_SPI_Transmit+0x158>
 802dff4:	683b      	ldr	r3, [r7, #0]
 802dff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 802dffa:	d102      	bne.n	802e002 <HAL_SPI_Transmit+0x15e>
 802dffc:	683b      	ldr	r3, [r7, #0]
 802dffe:	2b00      	cmp	r3, #0
 802e000:	d102      	bne.n	802e008 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 802e002:	2303      	movs	r3, #3
 802e004:	77fb      	strb	r3, [r7, #31]
          goto error;
 802e006:	e074      	b.n	802e0f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 802e008:	68fb      	ldr	r3, [r7, #12]
 802e00a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e00c:	b29b      	uxth	r3, r3
 802e00e:	2b00      	cmp	r3, #0
 802e010:	d1ce      	bne.n	802dfb0 <HAL_SPI_Transmit+0x10c>
 802e012:	e04c      	b.n	802e0ae <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802e014:	68fb      	ldr	r3, [r7, #12]
 802e016:	685b      	ldr	r3, [r3, #4]
 802e018:	2b00      	cmp	r3, #0
 802e01a:	d002      	beq.n	802e022 <HAL_SPI_Transmit+0x17e>
 802e01c:	8afb      	ldrh	r3, [r7, #22]
 802e01e:	2b01      	cmp	r3, #1
 802e020:	d140      	bne.n	802e0a4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802e022:	68fb      	ldr	r3, [r7, #12]
 802e024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e026:	68fb      	ldr	r3, [r7, #12]
 802e028:	681b      	ldr	r3, [r3, #0]
 802e02a:	330c      	adds	r3, #12
 802e02c:	7812      	ldrb	r2, [r2, #0]
 802e02e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802e030:	68fb      	ldr	r3, [r7, #12]
 802e032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e034:	1c5a      	adds	r2, r3, #1
 802e036:	68fb      	ldr	r3, [r7, #12]
 802e038:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802e03a:	68fb      	ldr	r3, [r7, #12]
 802e03c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e03e:	b29b      	uxth	r3, r3
 802e040:	3b01      	subs	r3, #1
 802e042:	b29a      	uxth	r2, r3
 802e044:	68fb      	ldr	r3, [r7, #12]
 802e046:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 802e048:	e02c      	b.n	802e0a4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802e04a:	68fb      	ldr	r3, [r7, #12]
 802e04c:	681b      	ldr	r3, [r3, #0]
 802e04e:	689b      	ldr	r3, [r3, #8]
 802e050:	f003 0302 	and.w	r3, r3, #2
 802e054:	2b02      	cmp	r3, #2
 802e056:	d113      	bne.n	802e080 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802e058:	68fb      	ldr	r3, [r7, #12]
 802e05a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e05c:	68fb      	ldr	r3, [r7, #12]
 802e05e:	681b      	ldr	r3, [r3, #0]
 802e060:	330c      	adds	r3, #12
 802e062:	7812      	ldrb	r2, [r2, #0]
 802e064:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802e066:	68fb      	ldr	r3, [r7, #12]
 802e068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e06a:	1c5a      	adds	r2, r3, #1
 802e06c:	68fb      	ldr	r3, [r7, #12]
 802e06e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802e070:	68fb      	ldr	r3, [r7, #12]
 802e072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e074:	b29b      	uxth	r3, r3
 802e076:	3b01      	subs	r3, #1
 802e078:	b29a      	uxth	r2, r3
 802e07a:	68fb      	ldr	r3, [r7, #12]
 802e07c:	86da      	strh	r2, [r3, #54]	; 0x36
 802e07e:	e011      	b.n	802e0a4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802e080:	f7fa fa4c 	bl	802851c <HAL_GetTick>
 802e084:	4602      	mov	r2, r0
 802e086:	69bb      	ldr	r3, [r7, #24]
 802e088:	1ad3      	subs	r3, r2, r3
 802e08a:	683a      	ldr	r2, [r7, #0]
 802e08c:	429a      	cmp	r2, r3
 802e08e:	d803      	bhi.n	802e098 <HAL_SPI_Transmit+0x1f4>
 802e090:	683b      	ldr	r3, [r7, #0]
 802e092:	f1b3 3fff 	cmp.w	r3, #4294967295
 802e096:	d102      	bne.n	802e09e <HAL_SPI_Transmit+0x1fa>
 802e098:	683b      	ldr	r3, [r7, #0]
 802e09a:	2b00      	cmp	r3, #0
 802e09c:	d102      	bne.n	802e0a4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 802e09e:	2303      	movs	r3, #3
 802e0a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 802e0a2:	e026      	b.n	802e0f2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 802e0a4:	68fb      	ldr	r3, [r7, #12]
 802e0a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e0a8:	b29b      	uxth	r3, r3
 802e0aa:	2b00      	cmp	r3, #0
 802e0ac:	d1cd      	bne.n	802e04a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802e0ae:	69ba      	ldr	r2, [r7, #24]
 802e0b0:	6839      	ldr	r1, [r7, #0]
 802e0b2:	68f8      	ldr	r0, [r7, #12]
 802e0b4:	f000 fcfc 	bl	802eab0 <SPI_EndRxTxTransaction>
 802e0b8:	4603      	mov	r3, r0
 802e0ba:	2b00      	cmp	r3, #0
 802e0bc:	d002      	beq.n	802e0c4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802e0be:	68fb      	ldr	r3, [r7, #12]
 802e0c0:	2220      	movs	r2, #32
 802e0c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802e0c4:	68fb      	ldr	r3, [r7, #12]
 802e0c6:	689b      	ldr	r3, [r3, #8]
 802e0c8:	2b00      	cmp	r3, #0
 802e0ca:	d10a      	bne.n	802e0e2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802e0cc:	2300      	movs	r3, #0
 802e0ce:	613b      	str	r3, [r7, #16]
 802e0d0:	68fb      	ldr	r3, [r7, #12]
 802e0d2:	681b      	ldr	r3, [r3, #0]
 802e0d4:	68db      	ldr	r3, [r3, #12]
 802e0d6:	613b      	str	r3, [r7, #16]
 802e0d8:	68fb      	ldr	r3, [r7, #12]
 802e0da:	681b      	ldr	r3, [r3, #0]
 802e0dc:	689b      	ldr	r3, [r3, #8]
 802e0de:	613b      	str	r3, [r7, #16]
 802e0e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802e0e2:	68fb      	ldr	r3, [r7, #12]
 802e0e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e0e6:	2b00      	cmp	r3, #0
 802e0e8:	d002      	beq.n	802e0f0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 802e0ea:	2301      	movs	r3, #1
 802e0ec:	77fb      	strb	r3, [r7, #31]
 802e0ee:	e000      	b.n	802e0f2 <HAL_SPI_Transmit+0x24e>
  }

error:
 802e0f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802e0f2:	68fb      	ldr	r3, [r7, #12]
 802e0f4:	2201      	movs	r2, #1
 802e0f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802e0fa:	68fb      	ldr	r3, [r7, #12]
 802e0fc:	2200      	movs	r2, #0
 802e0fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802e102:	7ffb      	ldrb	r3, [r7, #31]
}
 802e104:	4618      	mov	r0, r3
 802e106:	3720      	adds	r7, #32
 802e108:	46bd      	mov	sp, r7
 802e10a:	bd80      	pop	{r7, pc}

0802e10c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 802e10c:	b480      	push	{r7}
 802e10e:	b087      	sub	sp, #28
 802e110:	af00      	add	r7, sp, #0
 802e112:	60f8      	str	r0, [r7, #12]
 802e114:	60b9      	str	r1, [r7, #8]
 802e116:	4613      	mov	r3, r2
 802e118:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 802e11a:	2300      	movs	r3, #0
 802e11c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802e11e:	68fb      	ldr	r3, [r7, #12]
 802e120:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802e124:	2b01      	cmp	r3, #1
 802e126:	d101      	bne.n	802e12c <HAL_SPI_Transmit_IT+0x20>
 802e128:	2302      	movs	r3, #2
 802e12a:	e067      	b.n	802e1fc <HAL_SPI_Transmit_IT+0xf0>
 802e12c:	68fb      	ldr	r3, [r7, #12]
 802e12e:	2201      	movs	r2, #1
 802e130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 802e134:	68bb      	ldr	r3, [r7, #8]
 802e136:	2b00      	cmp	r3, #0
 802e138:	d002      	beq.n	802e140 <HAL_SPI_Transmit_IT+0x34>
 802e13a:	88fb      	ldrh	r3, [r7, #6]
 802e13c:	2b00      	cmp	r3, #0
 802e13e:	d102      	bne.n	802e146 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 802e140:	2301      	movs	r3, #1
 802e142:	75fb      	strb	r3, [r7, #23]
    goto error;
 802e144:	e055      	b.n	802e1f2 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 802e146:	68fb      	ldr	r3, [r7, #12]
 802e148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802e14c:	b2db      	uxtb	r3, r3
 802e14e:	2b01      	cmp	r3, #1
 802e150:	d002      	beq.n	802e158 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 802e152:	2302      	movs	r3, #2
 802e154:	75fb      	strb	r3, [r7, #23]
    goto error;
 802e156:	e04c      	b.n	802e1f2 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802e158:	68fb      	ldr	r3, [r7, #12]
 802e15a:	2203      	movs	r2, #3
 802e15c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802e160:	68fb      	ldr	r3, [r7, #12]
 802e162:	2200      	movs	r2, #0
 802e164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802e166:	68fb      	ldr	r3, [r7, #12]
 802e168:	68ba      	ldr	r2, [r7, #8]
 802e16a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 802e16c:	68fb      	ldr	r3, [r7, #12]
 802e16e:	88fa      	ldrh	r2, [r7, #6]
 802e170:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802e172:	68fb      	ldr	r3, [r7, #12]
 802e174:	88fa      	ldrh	r2, [r7, #6]
 802e176:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802e178:	68fb      	ldr	r3, [r7, #12]
 802e17a:	2200      	movs	r2, #0
 802e17c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802e17e:	68fb      	ldr	r3, [r7, #12]
 802e180:	2200      	movs	r2, #0
 802e182:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 802e184:	68fb      	ldr	r3, [r7, #12]
 802e186:	2200      	movs	r2, #0
 802e188:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 802e18a:	68fb      	ldr	r3, [r7, #12]
 802e18c:	2200      	movs	r2, #0
 802e18e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802e190:	68fb      	ldr	r3, [r7, #12]
 802e192:	68db      	ldr	r3, [r3, #12]
 802e194:	2b00      	cmp	r3, #0
 802e196:	d003      	beq.n	802e1a0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 802e198:	68fb      	ldr	r3, [r7, #12]
 802e19a:	4a1b      	ldr	r2, [pc, #108]	; (802e208 <HAL_SPI_Transmit_IT+0xfc>)
 802e19c:	645a      	str	r2, [r3, #68]	; 0x44
 802e19e:	e002      	b.n	802e1a6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 802e1a0:	68fb      	ldr	r3, [r7, #12]
 802e1a2:	4a1a      	ldr	r2, [pc, #104]	; (802e20c <HAL_SPI_Transmit_IT+0x100>)
 802e1a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802e1a6:	68fb      	ldr	r3, [r7, #12]
 802e1a8:	689b      	ldr	r3, [r3, #8]
 802e1aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802e1ae:	d107      	bne.n	802e1c0 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 802e1b0:	68fb      	ldr	r3, [r7, #12]
 802e1b2:	681b      	ldr	r3, [r3, #0]
 802e1b4:	681a      	ldr	r2, [r3, #0]
 802e1b6:	68fb      	ldr	r3, [r7, #12]
 802e1b8:	681b      	ldr	r3, [r3, #0]
 802e1ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802e1be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 802e1c0:	68fb      	ldr	r3, [r7, #12]
 802e1c2:	681b      	ldr	r3, [r3, #0]
 802e1c4:	685a      	ldr	r2, [r3, #4]
 802e1c6:	68fb      	ldr	r3, [r7, #12]
 802e1c8:	681b      	ldr	r3, [r3, #0]
 802e1ca:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 802e1ce:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802e1d0:	68fb      	ldr	r3, [r7, #12]
 802e1d2:	681b      	ldr	r3, [r3, #0]
 802e1d4:	681b      	ldr	r3, [r3, #0]
 802e1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e1da:	2b40      	cmp	r3, #64	; 0x40
 802e1dc:	d008      	beq.n	802e1f0 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802e1de:	68fb      	ldr	r3, [r7, #12]
 802e1e0:	681b      	ldr	r3, [r3, #0]
 802e1e2:	681a      	ldr	r2, [r3, #0]
 802e1e4:	68fb      	ldr	r3, [r7, #12]
 802e1e6:	681b      	ldr	r3, [r3, #0]
 802e1e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802e1ec:	601a      	str	r2, [r3, #0]
 802e1ee:	e000      	b.n	802e1f2 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 802e1f0:	bf00      	nop
  __HAL_UNLOCK(hspi);
 802e1f2:	68fb      	ldr	r3, [r7, #12]
 802e1f4:	2200      	movs	r2, #0
 802e1f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802e1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 802e1fc:	4618      	mov	r0, r3
 802e1fe:	371c      	adds	r7, #28
 802e200:	46bd      	mov	sp, r7
 802e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e206:	4770      	bx	lr
 802e208:	0802e999 	.word	0x0802e999
 802e20c:	0802e953 	.word	0x0802e953

0802e210 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 802e210:	b480      	push	{r7}
 802e212:	b087      	sub	sp, #28
 802e214:	af00      	add	r7, sp, #0
 802e216:	60f8      	str	r0, [r7, #12]
 802e218:	60b9      	str	r1, [r7, #8]
 802e21a:	607a      	str	r2, [r7, #4]
 802e21c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 802e21e:	2300      	movs	r3, #0
 802e220:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 802e222:	68fb      	ldr	r3, [r7, #12]
 802e224:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802e228:	2b01      	cmp	r3, #1
 802e22a:	d101      	bne.n	802e230 <HAL_SPI_TransmitReceive_IT+0x20>
 802e22c:	2302      	movs	r3, #2
 802e22e:	e075      	b.n	802e31c <HAL_SPI_TransmitReceive_IT+0x10c>
 802e230:	68fb      	ldr	r3, [r7, #12]
 802e232:	2201      	movs	r2, #1
 802e234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802e238:	68fb      	ldr	r3, [r7, #12]
 802e23a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802e23e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 802e240:	68fb      	ldr	r3, [r7, #12]
 802e242:	685b      	ldr	r3, [r3, #4]
 802e244:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802e246:	7dbb      	ldrb	r3, [r7, #22]
 802e248:	2b01      	cmp	r3, #1
 802e24a:	d00d      	beq.n	802e268 <HAL_SPI_TransmitReceive_IT+0x58>
 802e24c:	693b      	ldr	r3, [r7, #16]
 802e24e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802e252:	d106      	bne.n	802e262 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802e254:	68fb      	ldr	r3, [r7, #12]
 802e256:	689b      	ldr	r3, [r3, #8]
 802e258:	2b00      	cmp	r3, #0
 802e25a:	d102      	bne.n	802e262 <HAL_SPI_TransmitReceive_IT+0x52>
 802e25c:	7dbb      	ldrb	r3, [r7, #22]
 802e25e:	2b04      	cmp	r3, #4
 802e260:	d002      	beq.n	802e268 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 802e262:	2302      	movs	r3, #2
 802e264:	75fb      	strb	r3, [r7, #23]
    goto error;
 802e266:	e054      	b.n	802e312 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 802e268:	68bb      	ldr	r3, [r7, #8]
 802e26a:	2b00      	cmp	r3, #0
 802e26c:	d005      	beq.n	802e27a <HAL_SPI_TransmitReceive_IT+0x6a>
 802e26e:	687b      	ldr	r3, [r7, #4]
 802e270:	2b00      	cmp	r3, #0
 802e272:	d002      	beq.n	802e27a <HAL_SPI_TransmitReceive_IT+0x6a>
 802e274:	887b      	ldrh	r3, [r7, #2]
 802e276:	2b00      	cmp	r3, #0
 802e278:	d102      	bne.n	802e280 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 802e27a:	2301      	movs	r3, #1
 802e27c:	75fb      	strb	r3, [r7, #23]
    goto error;
 802e27e:	e048      	b.n	802e312 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802e280:	68fb      	ldr	r3, [r7, #12]
 802e282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802e286:	b2db      	uxtb	r3, r3
 802e288:	2b04      	cmp	r3, #4
 802e28a:	d003      	beq.n	802e294 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802e28c:	68fb      	ldr	r3, [r7, #12]
 802e28e:	2205      	movs	r2, #5
 802e290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802e294:	68fb      	ldr	r3, [r7, #12]
 802e296:	2200      	movs	r2, #0
 802e298:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802e29a:	68fb      	ldr	r3, [r7, #12]
 802e29c:	68ba      	ldr	r2, [r7, #8]
 802e29e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 802e2a0:	68fb      	ldr	r3, [r7, #12]
 802e2a2:	887a      	ldrh	r2, [r7, #2]
 802e2a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802e2a6:	68fb      	ldr	r3, [r7, #12]
 802e2a8:	887a      	ldrh	r2, [r7, #2]
 802e2aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802e2ac:	68fb      	ldr	r3, [r7, #12]
 802e2ae:	687a      	ldr	r2, [r7, #4]
 802e2b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 802e2b2:	68fb      	ldr	r3, [r7, #12]
 802e2b4:	887a      	ldrh	r2, [r7, #2]
 802e2b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802e2b8:	68fb      	ldr	r3, [r7, #12]
 802e2ba:	887a      	ldrh	r2, [r7, #2]
 802e2bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 802e2be:	68fb      	ldr	r3, [r7, #12]
 802e2c0:	68db      	ldr	r3, [r3, #12]
 802e2c2:	2b00      	cmp	r3, #0
 802e2c4:	d006      	beq.n	802e2d4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 802e2c6:	68fb      	ldr	r3, [r7, #12]
 802e2c8:	4a17      	ldr	r2, [pc, #92]	; (802e328 <HAL_SPI_TransmitReceive_IT+0x118>)
 802e2ca:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 802e2cc:	68fb      	ldr	r3, [r7, #12]
 802e2ce:	4a17      	ldr	r2, [pc, #92]	; (802e32c <HAL_SPI_TransmitReceive_IT+0x11c>)
 802e2d0:	645a      	str	r2, [r3, #68]	; 0x44
 802e2d2:	e005      	b.n	802e2e0 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 802e2d4:	68fb      	ldr	r3, [r7, #12]
 802e2d6:	4a16      	ldr	r2, [pc, #88]	; (802e330 <HAL_SPI_TransmitReceive_IT+0x120>)
 802e2d8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 802e2da:	68fb      	ldr	r3, [r7, #12]
 802e2dc:	4a15      	ldr	r2, [pc, #84]	; (802e334 <HAL_SPI_TransmitReceive_IT+0x124>)
 802e2de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802e2e0:	68fb      	ldr	r3, [r7, #12]
 802e2e2:	681b      	ldr	r3, [r3, #0]
 802e2e4:	685a      	ldr	r2, [r3, #4]
 802e2e6:	68fb      	ldr	r3, [r7, #12]
 802e2e8:	681b      	ldr	r3, [r3, #0]
 802e2ea:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 802e2ee:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802e2f0:	68fb      	ldr	r3, [r7, #12]
 802e2f2:	681b      	ldr	r3, [r3, #0]
 802e2f4:	681b      	ldr	r3, [r3, #0]
 802e2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e2fa:	2b40      	cmp	r3, #64	; 0x40
 802e2fc:	d008      	beq.n	802e310 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802e2fe:	68fb      	ldr	r3, [r7, #12]
 802e300:	681b      	ldr	r3, [r3, #0]
 802e302:	681a      	ldr	r2, [r3, #0]
 802e304:	68fb      	ldr	r3, [r7, #12]
 802e306:	681b      	ldr	r3, [r3, #0]
 802e308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802e30c:	601a      	str	r2, [r3, #0]
 802e30e:	e000      	b.n	802e312 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 802e310:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802e312:	68fb      	ldr	r3, [r7, #12]
 802e314:	2200      	movs	r2, #0
 802e316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802e31a:	7dfb      	ldrb	r3, [r7, #23]
}
 802e31c:	4618      	mov	r0, r3
 802e31e:	371c      	adds	r7, #28
 802e320:	46bd      	mov	sp, r7
 802e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e326:	4770      	bx	lr
 802e328:	0802e895 	.word	0x0802e895
 802e32c:	0802e8f5 	.word	0x0802e8f5
 802e330:	0802e7d1 	.word	0x0802e7d1
 802e334:	0802e835 	.word	0x0802e835

0802e338 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 802e338:	b580      	push	{r7, lr}
 802e33a:	b086      	sub	sp, #24
 802e33c:	af00      	add	r7, sp, #0
 802e33e:	60f8      	str	r0, [r7, #12]
 802e340:	60b9      	str	r1, [r7, #8]
 802e342:	4613      	mov	r3, r2
 802e344:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 802e346:	2300      	movs	r3, #0
 802e348:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802e34a:	68fb      	ldr	r3, [r7, #12]
 802e34c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802e350:	2b01      	cmp	r3, #1
 802e352:	d101      	bne.n	802e358 <HAL_SPI_Transmit_DMA+0x20>
 802e354:	2302      	movs	r3, #2
 802e356:	e093      	b.n	802e480 <HAL_SPI_Transmit_DMA+0x148>
 802e358:	68fb      	ldr	r3, [r7, #12]
 802e35a:	2201      	movs	r2, #1
 802e35c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 802e360:	68fb      	ldr	r3, [r7, #12]
 802e362:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802e366:	b2db      	uxtb	r3, r3
 802e368:	2b01      	cmp	r3, #1
 802e36a:	d002      	beq.n	802e372 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 802e36c:	2302      	movs	r3, #2
 802e36e:	75fb      	strb	r3, [r7, #23]
    goto error;
 802e370:	e081      	b.n	802e476 <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 802e372:	68bb      	ldr	r3, [r7, #8]
 802e374:	2b00      	cmp	r3, #0
 802e376:	d002      	beq.n	802e37e <HAL_SPI_Transmit_DMA+0x46>
 802e378:	88fb      	ldrh	r3, [r7, #6]
 802e37a:	2b00      	cmp	r3, #0
 802e37c:	d102      	bne.n	802e384 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 802e37e:	2301      	movs	r3, #1
 802e380:	75fb      	strb	r3, [r7, #23]
    goto error;
 802e382:	e078      	b.n	802e476 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 802e384:	68fb      	ldr	r3, [r7, #12]
 802e386:	2203      	movs	r2, #3
 802e388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802e38c:	68fb      	ldr	r3, [r7, #12]
 802e38e:	2200      	movs	r2, #0
 802e390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802e392:	68fb      	ldr	r3, [r7, #12]
 802e394:	68ba      	ldr	r2, [r7, #8]
 802e396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 802e398:	68fb      	ldr	r3, [r7, #12]
 802e39a:	88fa      	ldrh	r2, [r7, #6]
 802e39c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802e39e:	68fb      	ldr	r3, [r7, #12]
 802e3a0:	88fa      	ldrh	r2, [r7, #6]
 802e3a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802e3a4:	68fb      	ldr	r3, [r7, #12]
 802e3a6:	2200      	movs	r2, #0
 802e3a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 802e3aa:	68fb      	ldr	r3, [r7, #12]
 802e3ac:	2200      	movs	r2, #0
 802e3ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802e3b0:	68fb      	ldr	r3, [r7, #12]
 802e3b2:	2200      	movs	r2, #0
 802e3b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 802e3b6:	68fb      	ldr	r3, [r7, #12]
 802e3b8:	2200      	movs	r2, #0
 802e3ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 802e3bc:	68fb      	ldr	r3, [r7, #12]
 802e3be:	2200      	movs	r2, #0
 802e3c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802e3c2:	68fb      	ldr	r3, [r7, #12]
 802e3c4:	689b      	ldr	r3, [r3, #8]
 802e3c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802e3ca:	d107      	bne.n	802e3dc <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 802e3cc:	68fb      	ldr	r3, [r7, #12]
 802e3ce:	681b      	ldr	r3, [r3, #0]
 802e3d0:	681a      	ldr	r2, [r3, #0]
 802e3d2:	68fb      	ldr	r3, [r7, #12]
 802e3d4:	681b      	ldr	r3, [r3, #0]
 802e3d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802e3da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 802e3dc:	68fb      	ldr	r3, [r7, #12]
 802e3de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e3e0:	4a29      	ldr	r2, [pc, #164]	; (802e488 <HAL_SPI_Transmit_DMA+0x150>)
 802e3e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 802e3e4:	68fb      	ldr	r3, [r7, #12]
 802e3e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e3e8:	4a28      	ldr	r2, [pc, #160]	; (802e48c <HAL_SPI_Transmit_DMA+0x154>)
 802e3ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 802e3ec:	68fb      	ldr	r3, [r7, #12]
 802e3ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e3f0:	4a27      	ldr	r2, [pc, #156]	; (802e490 <HAL_SPI_Transmit_DMA+0x158>)
 802e3f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 802e3f4:	68fb      	ldr	r3, [r7, #12]
 802e3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e3f8:	2200      	movs	r2, #0
 802e3fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 802e3fc:	68fb      	ldr	r3, [r7, #12]
 802e3fe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 802e400:	68fb      	ldr	r3, [r7, #12]
 802e402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e404:	4619      	mov	r1, r3
 802e406:	68fb      	ldr	r3, [r7, #12]
 802e408:	681b      	ldr	r3, [r3, #0]
 802e40a:	330c      	adds	r3, #12
 802e40c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 802e40e:	68fb      	ldr	r3, [r7, #12]
 802e410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e412:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 802e414:	f7fb f97e 	bl	8029714 <HAL_DMA_Start_IT>
 802e418:	4603      	mov	r3, r0
 802e41a:	2b00      	cmp	r3, #0
 802e41c:	d00c      	beq.n	802e438 <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 802e41e:	68fb      	ldr	r3, [r7, #12]
 802e420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e422:	f043 0210 	orr.w	r2, r3, #16
 802e426:	68fb      	ldr	r3, [r7, #12]
 802e428:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 802e42a:	2301      	movs	r3, #1
 802e42c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 802e42e:	68fb      	ldr	r3, [r7, #12]
 802e430:	2201      	movs	r2, #1
 802e432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 802e436:	e01e      	b.n	802e476 <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802e438:	68fb      	ldr	r3, [r7, #12]
 802e43a:	681b      	ldr	r3, [r3, #0]
 802e43c:	681b      	ldr	r3, [r3, #0]
 802e43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e442:	2b40      	cmp	r3, #64	; 0x40
 802e444:	d007      	beq.n	802e456 <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802e446:	68fb      	ldr	r3, [r7, #12]
 802e448:	681b      	ldr	r3, [r3, #0]
 802e44a:	681a      	ldr	r2, [r3, #0]
 802e44c:	68fb      	ldr	r3, [r7, #12]
 802e44e:	681b      	ldr	r3, [r3, #0]
 802e450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802e454:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 802e456:	68fb      	ldr	r3, [r7, #12]
 802e458:	681b      	ldr	r3, [r3, #0]
 802e45a:	685a      	ldr	r2, [r3, #4]
 802e45c:	68fb      	ldr	r3, [r7, #12]
 802e45e:	681b      	ldr	r3, [r3, #0]
 802e460:	f042 0220 	orr.w	r2, r2, #32
 802e464:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 802e466:	68fb      	ldr	r3, [r7, #12]
 802e468:	681b      	ldr	r3, [r3, #0]
 802e46a:	685a      	ldr	r2, [r3, #4]
 802e46c:	68fb      	ldr	r3, [r7, #12]
 802e46e:	681b      	ldr	r3, [r3, #0]
 802e470:	f042 0202 	orr.w	r2, r2, #2
 802e474:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802e476:	68fb      	ldr	r3, [r7, #12]
 802e478:	2200      	movs	r2, #0
 802e47a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802e47e:	7dfb      	ldrb	r3, [r7, #23]
}
 802e480:	4618      	mov	r0, r3
 802e482:	3718      	adds	r7, #24
 802e484:	46bd      	mov	sp, r7
 802e486:	bd80      	pop	{r7, pc}
 802e488:	0802e74d 	.word	0x0802e74d
 802e48c:	0802e6a5 	.word	0x0802e6a5
 802e490:	0802e769 	.word	0x0802e769

0802e494 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 802e494:	b580      	push	{r7, lr}
 802e496:	b088      	sub	sp, #32
 802e498:	af00      	add	r7, sp, #0
 802e49a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 802e49c:	687b      	ldr	r3, [r7, #4]
 802e49e:	681b      	ldr	r3, [r3, #0]
 802e4a0:	685b      	ldr	r3, [r3, #4]
 802e4a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 802e4a4:	687b      	ldr	r3, [r7, #4]
 802e4a6:	681b      	ldr	r3, [r3, #0]
 802e4a8:	689b      	ldr	r3, [r3, #8]
 802e4aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802e4ac:	69bb      	ldr	r3, [r7, #24]
 802e4ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e4b2:	2b00      	cmp	r3, #0
 802e4b4:	d10e      	bne.n	802e4d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802e4b6:	69bb      	ldr	r3, [r7, #24]
 802e4b8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 802e4bc:	2b00      	cmp	r3, #0
 802e4be:	d009      	beq.n	802e4d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 802e4c0:	69fb      	ldr	r3, [r7, #28]
 802e4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e4c6:	2b00      	cmp	r3, #0
 802e4c8:	d004      	beq.n	802e4d4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 802e4ca:	687b      	ldr	r3, [r7, #4]
 802e4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802e4ce:	6878      	ldr	r0, [r7, #4]
 802e4d0:	4798      	blx	r3
    return;
 802e4d2:	e0ce      	b.n	802e672 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 802e4d4:	69bb      	ldr	r3, [r7, #24]
 802e4d6:	f003 0302 	and.w	r3, r3, #2
 802e4da:	2b00      	cmp	r3, #0
 802e4dc:	d009      	beq.n	802e4f2 <HAL_SPI_IRQHandler+0x5e>
 802e4de:	69fb      	ldr	r3, [r7, #28]
 802e4e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802e4e4:	2b00      	cmp	r3, #0
 802e4e6:	d004      	beq.n	802e4f2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 802e4e8:	687b      	ldr	r3, [r7, #4]
 802e4ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802e4ec:	6878      	ldr	r0, [r7, #4]
 802e4ee:	4798      	blx	r3
    return;
 802e4f0:	e0bf      	b.n	802e672 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802e4f2:	69bb      	ldr	r3, [r7, #24]
 802e4f4:	f003 0320 	and.w	r3, r3, #32
 802e4f8:	2b00      	cmp	r3, #0
 802e4fa:	d10a      	bne.n	802e512 <HAL_SPI_IRQHandler+0x7e>
 802e4fc:	69bb      	ldr	r3, [r7, #24]
 802e4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e502:	2b00      	cmp	r3, #0
 802e504:	d105      	bne.n	802e512 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 802e506:	69bb      	ldr	r3, [r7, #24]
 802e508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e50c:	2b00      	cmp	r3, #0
 802e50e:	f000 80b0 	beq.w	802e672 <HAL_SPI_IRQHandler+0x1de>
 802e512:	69fb      	ldr	r3, [r7, #28]
 802e514:	f003 0320 	and.w	r3, r3, #32
 802e518:	2b00      	cmp	r3, #0
 802e51a:	f000 80aa 	beq.w	802e672 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 802e51e:	69bb      	ldr	r3, [r7, #24]
 802e520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802e524:	2b00      	cmp	r3, #0
 802e526:	d023      	beq.n	802e570 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802e528:	687b      	ldr	r3, [r7, #4]
 802e52a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802e52e:	b2db      	uxtb	r3, r3
 802e530:	2b03      	cmp	r3, #3
 802e532:	d011      	beq.n	802e558 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802e534:	687b      	ldr	r3, [r7, #4]
 802e536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e538:	f043 0204 	orr.w	r2, r3, #4
 802e53c:	687b      	ldr	r3, [r7, #4]
 802e53e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802e540:	2300      	movs	r3, #0
 802e542:	617b      	str	r3, [r7, #20]
 802e544:	687b      	ldr	r3, [r7, #4]
 802e546:	681b      	ldr	r3, [r3, #0]
 802e548:	68db      	ldr	r3, [r3, #12]
 802e54a:	617b      	str	r3, [r7, #20]
 802e54c:	687b      	ldr	r3, [r7, #4]
 802e54e:	681b      	ldr	r3, [r3, #0]
 802e550:	689b      	ldr	r3, [r3, #8]
 802e552:	617b      	str	r3, [r7, #20]
 802e554:	697b      	ldr	r3, [r7, #20]
 802e556:	e00b      	b.n	802e570 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802e558:	2300      	movs	r3, #0
 802e55a:	613b      	str	r3, [r7, #16]
 802e55c:	687b      	ldr	r3, [r7, #4]
 802e55e:	681b      	ldr	r3, [r3, #0]
 802e560:	68db      	ldr	r3, [r3, #12]
 802e562:	613b      	str	r3, [r7, #16]
 802e564:	687b      	ldr	r3, [r7, #4]
 802e566:	681b      	ldr	r3, [r3, #0]
 802e568:	689b      	ldr	r3, [r3, #8]
 802e56a:	613b      	str	r3, [r7, #16]
 802e56c:	693b      	ldr	r3, [r7, #16]
        return;
 802e56e:	e080      	b.n	802e672 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 802e570:	69bb      	ldr	r3, [r7, #24]
 802e572:	f003 0320 	and.w	r3, r3, #32
 802e576:	2b00      	cmp	r3, #0
 802e578:	d014      	beq.n	802e5a4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802e57a:	687b      	ldr	r3, [r7, #4]
 802e57c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e57e:	f043 0201 	orr.w	r2, r3, #1
 802e582:	687b      	ldr	r3, [r7, #4]
 802e584:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 802e586:	2300      	movs	r3, #0
 802e588:	60fb      	str	r3, [r7, #12]
 802e58a:	687b      	ldr	r3, [r7, #4]
 802e58c:	681b      	ldr	r3, [r3, #0]
 802e58e:	689b      	ldr	r3, [r3, #8]
 802e590:	60fb      	str	r3, [r7, #12]
 802e592:	687b      	ldr	r3, [r7, #4]
 802e594:	681b      	ldr	r3, [r3, #0]
 802e596:	681a      	ldr	r2, [r3, #0]
 802e598:	687b      	ldr	r3, [r7, #4]
 802e59a:	681b      	ldr	r3, [r3, #0]
 802e59c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802e5a0:	601a      	str	r2, [r3, #0]
 802e5a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 802e5a4:	69bb      	ldr	r3, [r7, #24]
 802e5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e5aa:	2b00      	cmp	r3, #0
 802e5ac:	d00c      	beq.n	802e5c8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802e5ae:	687b      	ldr	r3, [r7, #4]
 802e5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e5b2:	f043 0208 	orr.w	r2, r3, #8
 802e5b6:	687b      	ldr	r3, [r7, #4]
 802e5b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 802e5ba:	2300      	movs	r3, #0
 802e5bc:	60bb      	str	r3, [r7, #8]
 802e5be:	687b      	ldr	r3, [r7, #4]
 802e5c0:	681b      	ldr	r3, [r3, #0]
 802e5c2:	689b      	ldr	r3, [r3, #8]
 802e5c4:	60bb      	str	r3, [r7, #8]
 802e5c6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802e5c8:	687b      	ldr	r3, [r7, #4]
 802e5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e5cc:	2b00      	cmp	r3, #0
 802e5ce:	d04f      	beq.n	802e670 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 802e5d0:	687b      	ldr	r3, [r7, #4]
 802e5d2:	681b      	ldr	r3, [r3, #0]
 802e5d4:	685a      	ldr	r2, [r3, #4]
 802e5d6:	687b      	ldr	r3, [r7, #4]
 802e5d8:	681b      	ldr	r3, [r3, #0]
 802e5da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802e5de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 802e5e0:	687b      	ldr	r3, [r7, #4]
 802e5e2:	2201      	movs	r2, #1
 802e5e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 802e5e8:	69fb      	ldr	r3, [r7, #28]
 802e5ea:	f003 0302 	and.w	r3, r3, #2
 802e5ee:	2b00      	cmp	r3, #0
 802e5f0:	d104      	bne.n	802e5fc <HAL_SPI_IRQHandler+0x168>
 802e5f2:	69fb      	ldr	r3, [r7, #28]
 802e5f4:	f003 0301 	and.w	r3, r3, #1
 802e5f8:	2b00      	cmp	r3, #0
 802e5fa:	d034      	beq.n	802e666 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 802e5fc:	687b      	ldr	r3, [r7, #4]
 802e5fe:	681b      	ldr	r3, [r3, #0]
 802e600:	685a      	ldr	r2, [r3, #4]
 802e602:	687b      	ldr	r3, [r7, #4]
 802e604:	681b      	ldr	r3, [r3, #0]
 802e606:	f022 0203 	bic.w	r2, r2, #3
 802e60a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 802e60c:	687b      	ldr	r3, [r7, #4]
 802e60e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802e610:	2b00      	cmp	r3, #0
 802e612:	d011      	beq.n	802e638 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802e614:	687b      	ldr	r3, [r7, #4]
 802e616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802e618:	4a17      	ldr	r2, [pc, #92]	; (802e678 <HAL_SPI_IRQHandler+0x1e4>)
 802e61a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 802e61c:	687b      	ldr	r3, [r7, #4]
 802e61e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802e620:	4618      	mov	r0, r3
 802e622:	f7fb f93f 	bl	80298a4 <HAL_DMA_Abort_IT>
 802e626:	4603      	mov	r3, r0
 802e628:	2b00      	cmp	r3, #0
 802e62a:	d005      	beq.n	802e638 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802e62c:	687b      	ldr	r3, [r7, #4]
 802e62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e630:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802e634:	687b      	ldr	r3, [r7, #4]
 802e636:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 802e638:	687b      	ldr	r3, [r7, #4]
 802e63a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e63c:	2b00      	cmp	r3, #0
 802e63e:	d016      	beq.n	802e66e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802e640:	687b      	ldr	r3, [r7, #4]
 802e642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e644:	4a0c      	ldr	r2, [pc, #48]	; (802e678 <HAL_SPI_IRQHandler+0x1e4>)
 802e646:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 802e648:	687b      	ldr	r3, [r7, #4]
 802e64a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802e64c:	4618      	mov	r0, r3
 802e64e:	f7fb f929 	bl	80298a4 <HAL_DMA_Abort_IT>
 802e652:	4603      	mov	r3, r0
 802e654:	2b00      	cmp	r3, #0
 802e656:	d00a      	beq.n	802e66e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 802e658:	687b      	ldr	r3, [r7, #4]
 802e65a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e65c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802e660:	687b      	ldr	r3, [r7, #4]
 802e662:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 802e664:	e003      	b.n	802e66e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 802e666:	6878      	ldr	r0, [r7, #4]
 802e668:	f000 f812 	bl	802e690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 802e66c:	e000      	b.n	802e670 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 802e66e:	bf00      	nop
    return;
 802e670:	bf00      	nop
  }
}
 802e672:	3720      	adds	r7, #32
 802e674:	46bd      	mov	sp, r7
 802e676:	bd80      	pop	{r7, pc}
 802e678:	0802e7a9 	.word	0x0802e7a9

0802e67c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 802e67c:	b480      	push	{r7}
 802e67e:	b083      	sub	sp, #12
 802e680:	af00      	add	r7, sp, #0
 802e682:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 802e684:	bf00      	nop
 802e686:	370c      	adds	r7, #12
 802e688:	46bd      	mov	sp, r7
 802e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e68e:	4770      	bx	lr

0802e690 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 802e690:	b480      	push	{r7}
 802e692:	b083      	sub	sp, #12
 802e694:	af00      	add	r7, sp, #0
 802e696:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 802e698:	bf00      	nop
 802e69a:	370c      	adds	r7, #12
 802e69c:	46bd      	mov	sp, r7
 802e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e6a2:	4770      	bx	lr

0802e6a4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 802e6a4:	b580      	push	{r7, lr}
 802e6a6:	b086      	sub	sp, #24
 802e6a8:	af00      	add	r7, sp, #0
 802e6aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802e6ac:	687b      	ldr	r3, [r7, #4]
 802e6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e6b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802e6b2:	f7f9 ff33 	bl	802851c <HAL_GetTick>
 802e6b6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 802e6b8:	687b      	ldr	r3, [r7, #4]
 802e6ba:	681b      	ldr	r3, [r3, #0]
 802e6bc:	681b      	ldr	r3, [r3, #0]
 802e6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802e6c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802e6c6:	d03b      	beq.n	802e740 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 802e6c8:	697b      	ldr	r3, [r7, #20]
 802e6ca:	681b      	ldr	r3, [r3, #0]
 802e6cc:	685a      	ldr	r2, [r3, #4]
 802e6ce:	697b      	ldr	r3, [r7, #20]
 802e6d0:	681b      	ldr	r3, [r3, #0]
 802e6d2:	f022 0220 	bic.w	r2, r2, #32
 802e6d6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 802e6d8:	697b      	ldr	r3, [r7, #20]
 802e6da:	681b      	ldr	r3, [r3, #0]
 802e6dc:	685a      	ldr	r2, [r3, #4]
 802e6de:	697b      	ldr	r3, [r7, #20]
 802e6e0:	681b      	ldr	r3, [r3, #0]
 802e6e2:	f022 0202 	bic.w	r2, r2, #2
 802e6e6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 802e6e8:	693a      	ldr	r2, [r7, #16]
 802e6ea:	2164      	movs	r1, #100	; 0x64
 802e6ec:	6978      	ldr	r0, [r7, #20]
 802e6ee:	f000 f9df 	bl	802eab0 <SPI_EndRxTxTransaction>
 802e6f2:	4603      	mov	r3, r0
 802e6f4:	2b00      	cmp	r3, #0
 802e6f6:	d005      	beq.n	802e704 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802e6f8:	697b      	ldr	r3, [r7, #20]
 802e6fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e6fc:	f043 0220 	orr.w	r2, r3, #32
 802e700:	697b      	ldr	r3, [r7, #20]
 802e702:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802e704:	697b      	ldr	r3, [r7, #20]
 802e706:	689b      	ldr	r3, [r3, #8]
 802e708:	2b00      	cmp	r3, #0
 802e70a:	d10a      	bne.n	802e722 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802e70c:	2300      	movs	r3, #0
 802e70e:	60fb      	str	r3, [r7, #12]
 802e710:	697b      	ldr	r3, [r7, #20]
 802e712:	681b      	ldr	r3, [r3, #0]
 802e714:	68db      	ldr	r3, [r3, #12]
 802e716:	60fb      	str	r3, [r7, #12]
 802e718:	697b      	ldr	r3, [r7, #20]
 802e71a:	681b      	ldr	r3, [r3, #0]
 802e71c:	689b      	ldr	r3, [r3, #8]
 802e71e:	60fb      	str	r3, [r7, #12]
 802e720:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 802e722:	697b      	ldr	r3, [r7, #20]
 802e724:	2200      	movs	r2, #0
 802e726:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 802e728:	697b      	ldr	r3, [r7, #20]
 802e72a:	2201      	movs	r2, #1
 802e72c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802e730:	697b      	ldr	r3, [r7, #20]
 802e732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e734:	2b00      	cmp	r3, #0
 802e736:	d003      	beq.n	802e740 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 802e738:	6978      	ldr	r0, [r7, #20]
 802e73a:	f7ff ffa9 	bl	802e690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 802e73e:	e002      	b.n	802e746 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 802e740:	6978      	ldr	r0, [r7, #20]
 802e742:	f009 f8ab 	bl	803789c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802e746:	3718      	adds	r7, #24
 802e748:	46bd      	mov	sp, r7
 802e74a:	bd80      	pop	{r7, pc}

0802e74c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 802e74c:	b580      	push	{r7, lr}
 802e74e:	b084      	sub	sp, #16
 802e750:	af00      	add	r7, sp, #0
 802e752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802e754:	687b      	ldr	r3, [r7, #4]
 802e756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e758:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 802e75a:	68f8      	ldr	r0, [r7, #12]
 802e75c:	f7ff ff8e 	bl	802e67c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802e760:	bf00      	nop
 802e762:	3710      	adds	r7, #16
 802e764:	46bd      	mov	sp, r7
 802e766:	bd80      	pop	{r7, pc}

0802e768 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 802e768:	b580      	push	{r7, lr}
 802e76a:	b084      	sub	sp, #16
 802e76c:	af00      	add	r7, sp, #0
 802e76e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802e770:	687b      	ldr	r3, [r7, #4]
 802e772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e774:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 802e776:	68fb      	ldr	r3, [r7, #12]
 802e778:	681b      	ldr	r3, [r3, #0]
 802e77a:	685a      	ldr	r2, [r3, #4]
 802e77c:	68fb      	ldr	r3, [r7, #12]
 802e77e:	681b      	ldr	r3, [r3, #0]
 802e780:	f022 0203 	bic.w	r2, r2, #3
 802e784:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 802e786:	68fb      	ldr	r3, [r7, #12]
 802e788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802e78a:	f043 0210 	orr.w	r2, r3, #16
 802e78e:	68fb      	ldr	r3, [r7, #12]
 802e790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 802e792:	68fb      	ldr	r3, [r7, #12]
 802e794:	2201      	movs	r2, #1
 802e796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802e79a:	68f8      	ldr	r0, [r7, #12]
 802e79c:	f7ff ff78 	bl	802e690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802e7a0:	bf00      	nop
 802e7a2:	3710      	adds	r7, #16
 802e7a4:	46bd      	mov	sp, r7
 802e7a6:	bd80      	pop	{r7, pc}

0802e7a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802e7a8:	b580      	push	{r7, lr}
 802e7aa:	b084      	sub	sp, #16
 802e7ac:	af00      	add	r7, sp, #0
 802e7ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802e7b0:	687b      	ldr	r3, [r7, #4]
 802e7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e7b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 802e7b6:	68fb      	ldr	r3, [r7, #12]
 802e7b8:	2200      	movs	r2, #0
 802e7ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 802e7bc:	68fb      	ldr	r3, [r7, #12]
 802e7be:	2200      	movs	r2, #0
 802e7c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 802e7c2:	68f8      	ldr	r0, [r7, #12]
 802e7c4:	f7ff ff64 	bl	802e690 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 802e7c8:	bf00      	nop
 802e7ca:	3710      	adds	r7, #16
 802e7cc:	46bd      	mov	sp, r7
 802e7ce:	bd80      	pop	{r7, pc}

0802e7d0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802e7d0:	b580      	push	{r7, lr}
 802e7d2:	b082      	sub	sp, #8
 802e7d4:	af00      	add	r7, sp, #0
 802e7d6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 802e7d8:	687b      	ldr	r3, [r7, #4]
 802e7da:	681b      	ldr	r3, [r3, #0]
 802e7dc:	f103 020c 	add.w	r2, r3, #12
 802e7e0:	687b      	ldr	r3, [r7, #4]
 802e7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e7e4:	7812      	ldrb	r2, [r2, #0]
 802e7e6:	b2d2      	uxtb	r2, r2
 802e7e8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 802e7ea:	687b      	ldr	r3, [r7, #4]
 802e7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e7ee:	1c5a      	adds	r2, r3, #1
 802e7f0:	687b      	ldr	r3, [r7, #4]
 802e7f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 802e7f4:	687b      	ldr	r3, [r7, #4]
 802e7f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e7f8:	b29b      	uxth	r3, r3
 802e7fa:	3b01      	subs	r3, #1
 802e7fc:	b29a      	uxth	r2, r3
 802e7fe:	687b      	ldr	r3, [r7, #4]
 802e800:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 802e802:	687b      	ldr	r3, [r7, #4]
 802e804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e806:	b29b      	uxth	r3, r3
 802e808:	2b00      	cmp	r3, #0
 802e80a:	d10f      	bne.n	802e82c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 802e80c:	687b      	ldr	r3, [r7, #4]
 802e80e:	681b      	ldr	r3, [r3, #0]
 802e810:	685a      	ldr	r2, [r3, #4]
 802e812:	687b      	ldr	r3, [r7, #4]
 802e814:	681b      	ldr	r3, [r3, #0]
 802e816:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 802e81a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 802e81c:	687b      	ldr	r3, [r7, #4]
 802e81e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e820:	b29b      	uxth	r3, r3
 802e822:	2b00      	cmp	r3, #0
 802e824:	d102      	bne.n	802e82c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 802e826:	6878      	ldr	r0, [r7, #4]
 802e828:	f000 f984 	bl	802eb34 <SPI_CloseRxTx_ISR>
    }
  }
}
 802e82c:	bf00      	nop
 802e82e:	3708      	adds	r7, #8
 802e830:	46bd      	mov	sp, r7
 802e832:	bd80      	pop	{r7, pc}

0802e834 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802e834:	b580      	push	{r7, lr}
 802e836:	b082      	sub	sp, #8
 802e838:	af00      	add	r7, sp, #0
 802e83a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802e83c:	687b      	ldr	r3, [r7, #4]
 802e83e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e840:	687b      	ldr	r3, [r7, #4]
 802e842:	681b      	ldr	r3, [r3, #0]
 802e844:	330c      	adds	r3, #12
 802e846:	7812      	ldrb	r2, [r2, #0]
 802e848:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 802e84a:	687b      	ldr	r3, [r7, #4]
 802e84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e84e:	1c5a      	adds	r2, r3, #1
 802e850:	687b      	ldr	r3, [r7, #4]
 802e852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 802e854:	687b      	ldr	r3, [r7, #4]
 802e856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e858:	b29b      	uxth	r3, r3
 802e85a:	3b01      	subs	r3, #1
 802e85c:	b29a      	uxth	r2, r3
 802e85e:	687b      	ldr	r3, [r7, #4]
 802e860:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 802e862:	687b      	ldr	r3, [r7, #4]
 802e864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e866:	b29b      	uxth	r3, r3
 802e868:	2b00      	cmp	r3, #0
 802e86a:	d10f      	bne.n	802e88c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 802e86c:	687b      	ldr	r3, [r7, #4]
 802e86e:	681b      	ldr	r3, [r3, #0]
 802e870:	685a      	ldr	r2, [r3, #4]
 802e872:	687b      	ldr	r3, [r7, #4]
 802e874:	681b      	ldr	r3, [r3, #0]
 802e876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802e87a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 802e87c:	687b      	ldr	r3, [r7, #4]
 802e87e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e880:	b29b      	uxth	r3, r3
 802e882:	2b00      	cmp	r3, #0
 802e884:	d102      	bne.n	802e88c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 802e886:	6878      	ldr	r0, [r7, #4]
 802e888:	f000 f954 	bl	802eb34 <SPI_CloseRxTx_ISR>
    }
  }
}
 802e88c:	bf00      	nop
 802e88e:	3708      	adds	r7, #8
 802e890:	46bd      	mov	sp, r7
 802e892:	bd80      	pop	{r7, pc}

0802e894 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802e894:	b580      	push	{r7, lr}
 802e896:	b082      	sub	sp, #8
 802e898:	af00      	add	r7, sp, #0
 802e89a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 802e89c:	687b      	ldr	r3, [r7, #4]
 802e89e:	681b      	ldr	r3, [r3, #0]
 802e8a0:	68da      	ldr	r2, [r3, #12]
 802e8a2:	687b      	ldr	r3, [r7, #4]
 802e8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e8a6:	b292      	uxth	r2, r2
 802e8a8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 802e8aa:	687b      	ldr	r3, [r7, #4]
 802e8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802e8ae:	1c9a      	adds	r2, r3, #2
 802e8b0:	687b      	ldr	r3, [r7, #4]
 802e8b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 802e8b4:	687b      	ldr	r3, [r7, #4]
 802e8b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e8b8:	b29b      	uxth	r3, r3
 802e8ba:	3b01      	subs	r3, #1
 802e8bc:	b29a      	uxth	r2, r3
 802e8be:	687b      	ldr	r3, [r7, #4]
 802e8c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 802e8c2:	687b      	ldr	r3, [r7, #4]
 802e8c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e8c6:	b29b      	uxth	r3, r3
 802e8c8:	2b00      	cmp	r3, #0
 802e8ca:	d10f      	bne.n	802e8ec <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 802e8cc:	687b      	ldr	r3, [r7, #4]
 802e8ce:	681b      	ldr	r3, [r3, #0]
 802e8d0:	685a      	ldr	r2, [r3, #4]
 802e8d2:	687b      	ldr	r3, [r7, #4]
 802e8d4:	681b      	ldr	r3, [r3, #0]
 802e8d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802e8da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 802e8dc:	687b      	ldr	r3, [r7, #4]
 802e8de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e8e0:	b29b      	uxth	r3, r3
 802e8e2:	2b00      	cmp	r3, #0
 802e8e4:	d102      	bne.n	802e8ec <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 802e8e6:	6878      	ldr	r0, [r7, #4]
 802e8e8:	f000 f924 	bl	802eb34 <SPI_CloseRxTx_ISR>
    }
  }
}
 802e8ec:	bf00      	nop
 802e8ee:	3708      	adds	r7, #8
 802e8f0:	46bd      	mov	sp, r7
 802e8f2:	bd80      	pop	{r7, pc}

0802e8f4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802e8f4:	b580      	push	{r7, lr}
 802e8f6:	b082      	sub	sp, #8
 802e8f8:	af00      	add	r7, sp, #0
 802e8fa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802e8fc:	687b      	ldr	r3, [r7, #4]
 802e8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e900:	881a      	ldrh	r2, [r3, #0]
 802e902:	687b      	ldr	r3, [r7, #4]
 802e904:	681b      	ldr	r3, [r3, #0]
 802e906:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 802e908:	687b      	ldr	r3, [r7, #4]
 802e90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e90c:	1c9a      	adds	r2, r3, #2
 802e90e:	687b      	ldr	r3, [r7, #4]
 802e910:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 802e912:	687b      	ldr	r3, [r7, #4]
 802e914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e916:	b29b      	uxth	r3, r3
 802e918:	3b01      	subs	r3, #1
 802e91a:	b29a      	uxth	r2, r3
 802e91c:	687b      	ldr	r3, [r7, #4]
 802e91e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 802e920:	687b      	ldr	r3, [r7, #4]
 802e922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e924:	b29b      	uxth	r3, r3
 802e926:	2b00      	cmp	r3, #0
 802e928:	d10f      	bne.n	802e94a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 802e92a:	687b      	ldr	r3, [r7, #4]
 802e92c:	681b      	ldr	r3, [r3, #0]
 802e92e:	685a      	ldr	r2, [r3, #4]
 802e930:	687b      	ldr	r3, [r7, #4]
 802e932:	681b      	ldr	r3, [r3, #0]
 802e934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802e938:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 802e93a:	687b      	ldr	r3, [r7, #4]
 802e93c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802e93e:	b29b      	uxth	r3, r3
 802e940:	2b00      	cmp	r3, #0
 802e942:	d102      	bne.n	802e94a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 802e944:	6878      	ldr	r0, [r7, #4]
 802e946:	f000 f8f5 	bl	802eb34 <SPI_CloseRxTx_ISR>
    }
  }
}
 802e94a:	bf00      	nop
 802e94c:	3708      	adds	r7, #8
 802e94e:	46bd      	mov	sp, r7
 802e950:	bd80      	pop	{r7, pc}

0802e952 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 802e952:	b580      	push	{r7, lr}
 802e954:	b082      	sub	sp, #8
 802e956:	af00      	add	r7, sp, #0
 802e958:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802e95a:	687b      	ldr	r3, [r7, #4]
 802e95c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802e95e:	687b      	ldr	r3, [r7, #4]
 802e960:	681b      	ldr	r3, [r3, #0]
 802e962:	330c      	adds	r3, #12
 802e964:	7812      	ldrb	r2, [r2, #0]
 802e966:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 802e968:	687b      	ldr	r3, [r7, #4]
 802e96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e96c:	1c5a      	adds	r2, r3, #1
 802e96e:	687b      	ldr	r3, [r7, #4]
 802e970:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 802e972:	687b      	ldr	r3, [r7, #4]
 802e974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e976:	b29b      	uxth	r3, r3
 802e978:	3b01      	subs	r3, #1
 802e97a:	b29a      	uxth	r2, r3
 802e97c:	687b      	ldr	r3, [r7, #4]
 802e97e:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 802e980:	687b      	ldr	r3, [r7, #4]
 802e982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e984:	b29b      	uxth	r3, r3
 802e986:	2b00      	cmp	r3, #0
 802e988:	d102      	bne.n	802e990 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 802e98a:	6878      	ldr	r0, [r7, #4]
 802e98c:	f000 f946 	bl	802ec1c <SPI_CloseTx_ISR>
  }
}
 802e990:	bf00      	nop
 802e992:	3708      	adds	r7, #8
 802e994:	46bd      	mov	sp, r7
 802e996:	bd80      	pop	{r7, pc}

0802e998 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 802e998:	b580      	push	{r7, lr}
 802e99a:	b082      	sub	sp, #8
 802e99c:	af00      	add	r7, sp, #0
 802e99e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802e9a0:	687b      	ldr	r3, [r7, #4]
 802e9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e9a4:	881a      	ldrh	r2, [r3, #0]
 802e9a6:	687b      	ldr	r3, [r7, #4]
 802e9a8:	681b      	ldr	r3, [r3, #0]
 802e9aa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 802e9ac:	687b      	ldr	r3, [r7, #4]
 802e9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802e9b0:	1c9a      	adds	r2, r3, #2
 802e9b2:	687b      	ldr	r3, [r7, #4]
 802e9b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 802e9b6:	687b      	ldr	r3, [r7, #4]
 802e9b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e9ba:	b29b      	uxth	r3, r3
 802e9bc:	3b01      	subs	r3, #1
 802e9be:	b29a      	uxth	r2, r3
 802e9c0:	687b      	ldr	r3, [r7, #4]
 802e9c2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 802e9c4:	687b      	ldr	r3, [r7, #4]
 802e9c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802e9c8:	b29b      	uxth	r3, r3
 802e9ca:	2b00      	cmp	r3, #0
 802e9cc:	d102      	bne.n	802e9d4 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 802e9ce:	6878      	ldr	r0, [r7, #4]
 802e9d0:	f000 f924 	bl	802ec1c <SPI_CloseTx_ISR>
  }
}
 802e9d4:	bf00      	nop
 802e9d6:	3708      	adds	r7, #8
 802e9d8:	46bd      	mov	sp, r7
 802e9da:	bd80      	pop	{r7, pc}

0802e9dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802e9dc:	b580      	push	{r7, lr}
 802e9de:	b084      	sub	sp, #16
 802e9e0:	af00      	add	r7, sp, #0
 802e9e2:	60f8      	str	r0, [r7, #12]
 802e9e4:	60b9      	str	r1, [r7, #8]
 802e9e6:	603b      	str	r3, [r7, #0]
 802e9e8:	4613      	mov	r3, r2
 802e9ea:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802e9ec:	e04c      	b.n	802ea88 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 802e9ee:	683b      	ldr	r3, [r7, #0]
 802e9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 802e9f4:	d048      	beq.n	802ea88 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 802e9f6:	f7f9 fd91 	bl	802851c <HAL_GetTick>
 802e9fa:	4602      	mov	r2, r0
 802e9fc:	69bb      	ldr	r3, [r7, #24]
 802e9fe:	1ad3      	subs	r3, r2, r3
 802ea00:	683a      	ldr	r2, [r7, #0]
 802ea02:	429a      	cmp	r2, r3
 802ea04:	d902      	bls.n	802ea0c <SPI_WaitFlagStateUntilTimeout+0x30>
 802ea06:	683b      	ldr	r3, [r7, #0]
 802ea08:	2b00      	cmp	r3, #0
 802ea0a:	d13d      	bne.n	802ea88 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802ea0c:	68fb      	ldr	r3, [r7, #12]
 802ea0e:	681b      	ldr	r3, [r3, #0]
 802ea10:	685a      	ldr	r2, [r3, #4]
 802ea12:	68fb      	ldr	r3, [r7, #12]
 802ea14:	681b      	ldr	r3, [r3, #0]
 802ea16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802ea1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802ea1c:	68fb      	ldr	r3, [r7, #12]
 802ea1e:	685b      	ldr	r3, [r3, #4]
 802ea20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802ea24:	d111      	bne.n	802ea4a <SPI_WaitFlagStateUntilTimeout+0x6e>
 802ea26:	68fb      	ldr	r3, [r7, #12]
 802ea28:	689b      	ldr	r3, [r3, #8]
 802ea2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802ea2e:	d004      	beq.n	802ea3a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802ea30:	68fb      	ldr	r3, [r7, #12]
 802ea32:	689b      	ldr	r3, [r3, #8]
 802ea34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802ea38:	d107      	bne.n	802ea4a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802ea3a:	68fb      	ldr	r3, [r7, #12]
 802ea3c:	681b      	ldr	r3, [r3, #0]
 802ea3e:	681a      	ldr	r2, [r3, #0]
 802ea40:	68fb      	ldr	r3, [r7, #12]
 802ea42:	681b      	ldr	r3, [r3, #0]
 802ea44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802ea48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802ea4a:	68fb      	ldr	r3, [r7, #12]
 802ea4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ea4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802ea52:	d10f      	bne.n	802ea74 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 802ea54:	68fb      	ldr	r3, [r7, #12]
 802ea56:	681b      	ldr	r3, [r3, #0]
 802ea58:	681a      	ldr	r2, [r3, #0]
 802ea5a:	68fb      	ldr	r3, [r7, #12]
 802ea5c:	681b      	ldr	r3, [r3, #0]
 802ea5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802ea62:	601a      	str	r2, [r3, #0]
 802ea64:	68fb      	ldr	r3, [r7, #12]
 802ea66:	681b      	ldr	r3, [r3, #0]
 802ea68:	681a      	ldr	r2, [r3, #0]
 802ea6a:	68fb      	ldr	r3, [r7, #12]
 802ea6c:	681b      	ldr	r3, [r3, #0]
 802ea6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802ea72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802ea74:	68fb      	ldr	r3, [r7, #12]
 802ea76:	2201      	movs	r2, #1
 802ea78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802ea7c:	68fb      	ldr	r3, [r7, #12]
 802ea7e:	2200      	movs	r2, #0
 802ea80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 802ea84:	2303      	movs	r3, #3
 802ea86:	e00f      	b.n	802eaa8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802ea88:	68fb      	ldr	r3, [r7, #12]
 802ea8a:	681b      	ldr	r3, [r3, #0]
 802ea8c:	689a      	ldr	r2, [r3, #8]
 802ea8e:	68bb      	ldr	r3, [r7, #8]
 802ea90:	4013      	ands	r3, r2
 802ea92:	68ba      	ldr	r2, [r7, #8]
 802ea94:	429a      	cmp	r2, r3
 802ea96:	bf0c      	ite	eq
 802ea98:	2301      	moveq	r3, #1
 802ea9a:	2300      	movne	r3, #0
 802ea9c:	b2db      	uxtb	r3, r3
 802ea9e:	461a      	mov	r2, r3
 802eaa0:	79fb      	ldrb	r3, [r7, #7]
 802eaa2:	429a      	cmp	r2, r3
 802eaa4:	d1a3      	bne.n	802e9ee <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 802eaa6:	2300      	movs	r3, #0
}
 802eaa8:	4618      	mov	r0, r3
 802eaaa:	3710      	adds	r7, #16
 802eaac:	46bd      	mov	sp, r7
 802eaae:	bd80      	pop	{r7, pc}

0802eab0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802eab0:	b580      	push	{r7, lr}
 802eab2:	b088      	sub	sp, #32
 802eab4:	af02      	add	r7, sp, #8
 802eab6:	60f8      	str	r0, [r7, #12]
 802eab8:	60b9      	str	r1, [r7, #8]
 802eaba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 802eabc:	4b1b      	ldr	r3, [pc, #108]	; (802eb2c <SPI_EndRxTxTransaction+0x7c>)
 802eabe:	681b      	ldr	r3, [r3, #0]
 802eac0:	4a1b      	ldr	r2, [pc, #108]	; (802eb30 <SPI_EndRxTxTransaction+0x80>)
 802eac2:	fba2 2303 	umull	r2, r3, r2, r3
 802eac6:	0d5b      	lsrs	r3, r3, #21
 802eac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 802eacc:	fb02 f303 	mul.w	r3, r2, r3
 802ead0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802ead2:	68fb      	ldr	r3, [r7, #12]
 802ead4:	685b      	ldr	r3, [r3, #4]
 802ead6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802eada:	d112      	bne.n	802eb02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 802eadc:	687b      	ldr	r3, [r7, #4]
 802eade:	9300      	str	r3, [sp, #0]
 802eae0:	68bb      	ldr	r3, [r7, #8]
 802eae2:	2200      	movs	r2, #0
 802eae4:	2180      	movs	r1, #128	; 0x80
 802eae6:	68f8      	ldr	r0, [r7, #12]
 802eae8:	f7ff ff78 	bl	802e9dc <SPI_WaitFlagStateUntilTimeout>
 802eaec:	4603      	mov	r3, r0
 802eaee:	2b00      	cmp	r3, #0
 802eaf0:	d016      	beq.n	802eb20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802eaf2:	68fb      	ldr	r3, [r7, #12]
 802eaf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802eaf6:	f043 0220 	orr.w	r2, r3, #32
 802eafa:	68fb      	ldr	r3, [r7, #12]
 802eafc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802eafe:	2303      	movs	r3, #3
 802eb00:	e00f      	b.n	802eb22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802eb02:	697b      	ldr	r3, [r7, #20]
 802eb04:	2b00      	cmp	r3, #0
 802eb06:	d00a      	beq.n	802eb1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802eb08:	697b      	ldr	r3, [r7, #20]
 802eb0a:	3b01      	subs	r3, #1
 802eb0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802eb0e:	68fb      	ldr	r3, [r7, #12]
 802eb10:	681b      	ldr	r3, [r3, #0]
 802eb12:	689b      	ldr	r3, [r3, #8]
 802eb14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802eb18:	2b80      	cmp	r3, #128	; 0x80
 802eb1a:	d0f2      	beq.n	802eb02 <SPI_EndRxTxTransaction+0x52>
 802eb1c:	e000      	b.n	802eb20 <SPI_EndRxTxTransaction+0x70>
        break;
 802eb1e:	bf00      	nop
  }

  return HAL_OK;
 802eb20:	2300      	movs	r3, #0
}
 802eb22:	4618      	mov	r0, r3
 802eb24:	3718      	adds	r7, #24
 802eb26:	46bd      	mov	sp, r7
 802eb28:	bd80      	pop	{r7, pc}
 802eb2a:	bf00      	nop
 802eb2c:	200014e4 	.word	0x200014e4
 802eb30:	165e9f81 	.word	0x165e9f81

0802eb34 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 802eb34:	b580      	push	{r7, lr}
 802eb36:	b086      	sub	sp, #24
 802eb38:	af00      	add	r7, sp, #0
 802eb3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 802eb3c:	4b35      	ldr	r3, [pc, #212]	; (802ec14 <SPI_CloseRxTx_ISR+0xe0>)
 802eb3e:	681b      	ldr	r3, [r3, #0]
 802eb40:	4a35      	ldr	r2, [pc, #212]	; (802ec18 <SPI_CloseRxTx_ISR+0xe4>)
 802eb42:	fba2 2303 	umull	r2, r3, r2, r3
 802eb46:	0a5b      	lsrs	r3, r3, #9
 802eb48:	2264      	movs	r2, #100	; 0x64
 802eb4a:	fb02 f303 	mul.w	r3, r2, r3
 802eb4e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 802eb50:	f7f9 fce4 	bl	802851c <HAL_GetTick>
 802eb54:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 802eb56:	687b      	ldr	r3, [r7, #4]
 802eb58:	681b      	ldr	r3, [r3, #0]
 802eb5a:	685a      	ldr	r2, [r3, #4]
 802eb5c:	687b      	ldr	r3, [r7, #4]
 802eb5e:	681b      	ldr	r3, [r3, #0]
 802eb60:	f022 0220 	bic.w	r2, r2, #32
 802eb64:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 802eb66:	693b      	ldr	r3, [r7, #16]
 802eb68:	2b00      	cmp	r3, #0
 802eb6a:	d106      	bne.n	802eb7a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802eb6c:	687b      	ldr	r3, [r7, #4]
 802eb6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802eb70:	f043 0220 	orr.w	r2, r3, #32
 802eb74:	687b      	ldr	r3, [r7, #4]
 802eb76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 802eb78:	e009      	b.n	802eb8e <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 802eb7a:	693b      	ldr	r3, [r7, #16]
 802eb7c:	3b01      	subs	r3, #1
 802eb7e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 802eb80:	687b      	ldr	r3, [r7, #4]
 802eb82:	681b      	ldr	r3, [r3, #0]
 802eb84:	689b      	ldr	r3, [r3, #8]
 802eb86:	f003 0302 	and.w	r3, r3, #2
 802eb8a:	2b00      	cmp	r3, #0
 802eb8c:	d0eb      	beq.n	802eb66 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 802eb8e:	697a      	ldr	r2, [r7, #20]
 802eb90:	2164      	movs	r1, #100	; 0x64
 802eb92:	6878      	ldr	r0, [r7, #4]
 802eb94:	f7ff ff8c 	bl	802eab0 <SPI_EndRxTxTransaction>
 802eb98:	4603      	mov	r3, r0
 802eb9a:	2b00      	cmp	r3, #0
 802eb9c:	d005      	beq.n	802ebaa <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802eb9e:	687b      	ldr	r3, [r7, #4]
 802eba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802eba2:	f043 0220 	orr.w	r2, r3, #32
 802eba6:	687b      	ldr	r3, [r7, #4]
 802eba8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802ebaa:	687b      	ldr	r3, [r7, #4]
 802ebac:	689b      	ldr	r3, [r3, #8]
 802ebae:	2b00      	cmp	r3, #0
 802ebb0:	d10a      	bne.n	802ebc8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802ebb2:	2300      	movs	r3, #0
 802ebb4:	60fb      	str	r3, [r7, #12]
 802ebb6:	687b      	ldr	r3, [r7, #4]
 802ebb8:	681b      	ldr	r3, [r3, #0]
 802ebba:	68db      	ldr	r3, [r3, #12]
 802ebbc:	60fb      	str	r3, [r7, #12]
 802ebbe:	687b      	ldr	r3, [r7, #4]
 802ebc0:	681b      	ldr	r3, [r3, #0]
 802ebc2:	689b      	ldr	r3, [r3, #8]
 802ebc4:	60fb      	str	r3, [r7, #12]
 802ebc6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 802ebc8:	687b      	ldr	r3, [r7, #4]
 802ebca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ebcc:	2b00      	cmp	r3, #0
 802ebce:	d115      	bne.n	802ebfc <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 802ebd0:	687b      	ldr	r3, [r7, #4]
 802ebd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802ebd6:	b2db      	uxtb	r3, r3
 802ebd8:	2b04      	cmp	r3, #4
 802ebda:	d107      	bne.n	802ebec <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 802ebdc:	687b      	ldr	r3, [r7, #4]
 802ebde:	2201      	movs	r2, #1
 802ebe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 802ebe4:	6878      	ldr	r0, [r7, #4]
 802ebe6:	f008 fe87 	bl	80378f8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 802ebea:	e00e      	b.n	802ec0a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 802ebec:	687b      	ldr	r3, [r7, #4]
 802ebee:	2201      	movs	r2, #1
 802ebf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 802ebf4:	6878      	ldr	r0, [r7, #4]
 802ebf6:	f008 fead 	bl	8037954 <HAL_SPI_TxRxCpltCallback>
}
 802ebfa:	e006      	b.n	802ec0a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 802ebfc:	687b      	ldr	r3, [r7, #4]
 802ebfe:	2201      	movs	r2, #1
 802ec00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 802ec04:	6878      	ldr	r0, [r7, #4]
 802ec06:	f7ff fd43 	bl	802e690 <HAL_SPI_ErrorCallback>
}
 802ec0a:	bf00      	nop
 802ec0c:	3718      	adds	r7, #24
 802ec0e:	46bd      	mov	sp, r7
 802ec10:	bd80      	pop	{r7, pc}
 802ec12:	bf00      	nop
 802ec14:	200014e4 	.word	0x200014e4
 802ec18:	057619f1 	.word	0x057619f1

0802ec1c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 802ec1c:	b580      	push	{r7, lr}
 802ec1e:	b086      	sub	sp, #24
 802ec20:	af00      	add	r7, sp, #0
 802ec22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 802ec24:	4b2c      	ldr	r3, [pc, #176]	; (802ecd8 <SPI_CloseTx_ISR+0xbc>)
 802ec26:	681b      	ldr	r3, [r3, #0]
 802ec28:	4a2c      	ldr	r2, [pc, #176]	; (802ecdc <SPI_CloseTx_ISR+0xc0>)
 802ec2a:	fba2 2303 	umull	r2, r3, r2, r3
 802ec2e:	0a5b      	lsrs	r3, r3, #9
 802ec30:	2264      	movs	r2, #100	; 0x64
 802ec32:	fb02 f303 	mul.w	r3, r2, r3
 802ec36:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802ec38:	f7f9 fc70 	bl	802851c <HAL_GetTick>
 802ec3c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 802ec3e:	693b      	ldr	r3, [r7, #16]
 802ec40:	2b00      	cmp	r3, #0
 802ec42:	d106      	bne.n	802ec52 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802ec44:	687b      	ldr	r3, [r7, #4]
 802ec46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ec48:	f043 0220 	orr.w	r2, r3, #32
 802ec4c:	687b      	ldr	r3, [r7, #4]
 802ec4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 802ec50:	e009      	b.n	802ec66 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 802ec52:	693b      	ldr	r3, [r7, #16]
 802ec54:	3b01      	subs	r3, #1
 802ec56:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 802ec58:	687b      	ldr	r3, [r7, #4]
 802ec5a:	681b      	ldr	r3, [r3, #0]
 802ec5c:	689b      	ldr	r3, [r3, #8]
 802ec5e:	f003 0302 	and.w	r3, r3, #2
 802ec62:	2b00      	cmp	r3, #0
 802ec64:	d0eb      	beq.n	802ec3e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 802ec66:	687b      	ldr	r3, [r7, #4]
 802ec68:	681b      	ldr	r3, [r3, #0]
 802ec6a:	685a      	ldr	r2, [r3, #4]
 802ec6c:	687b      	ldr	r3, [r7, #4]
 802ec6e:	681b      	ldr	r3, [r3, #0]
 802ec70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 802ec74:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 802ec76:	697a      	ldr	r2, [r7, #20]
 802ec78:	2164      	movs	r1, #100	; 0x64
 802ec7a:	6878      	ldr	r0, [r7, #4]
 802ec7c:	f7ff ff18 	bl	802eab0 <SPI_EndRxTxTransaction>
 802ec80:	4603      	mov	r3, r0
 802ec82:	2b00      	cmp	r3, #0
 802ec84:	d005      	beq.n	802ec92 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802ec86:	687b      	ldr	r3, [r7, #4]
 802ec88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ec8a:	f043 0220 	orr.w	r2, r3, #32
 802ec8e:	687b      	ldr	r3, [r7, #4]
 802ec90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802ec92:	687b      	ldr	r3, [r7, #4]
 802ec94:	689b      	ldr	r3, [r3, #8]
 802ec96:	2b00      	cmp	r3, #0
 802ec98:	d10a      	bne.n	802ecb0 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802ec9a:	2300      	movs	r3, #0
 802ec9c:	60fb      	str	r3, [r7, #12]
 802ec9e:	687b      	ldr	r3, [r7, #4]
 802eca0:	681b      	ldr	r3, [r3, #0]
 802eca2:	68db      	ldr	r3, [r3, #12]
 802eca4:	60fb      	str	r3, [r7, #12]
 802eca6:	687b      	ldr	r3, [r7, #4]
 802eca8:	681b      	ldr	r3, [r3, #0]
 802ecaa:	689b      	ldr	r3, [r3, #8]
 802ecac:	60fb      	str	r3, [r7, #12]
 802ecae:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 802ecb0:	687b      	ldr	r3, [r7, #4]
 802ecb2:	2201      	movs	r2, #1
 802ecb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802ecb8:	687b      	ldr	r3, [r7, #4]
 802ecba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802ecbc:	2b00      	cmp	r3, #0
 802ecbe:	d003      	beq.n	802ecc8 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 802ecc0:	6878      	ldr	r0, [r7, #4]
 802ecc2:	f7ff fce5 	bl	802e690 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 802ecc6:	e002      	b.n	802ecce <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 802ecc8:	6878      	ldr	r0, [r7, #4]
 802ecca:	f008 fde7 	bl	803789c <HAL_SPI_TxCpltCallback>
}
 802ecce:	bf00      	nop
 802ecd0:	3718      	adds	r7, #24
 802ecd2:	46bd      	mov	sp, r7
 802ecd4:	bd80      	pop	{r7, pc}
 802ecd6:	bf00      	nop
 802ecd8:	200014e4 	.word	0x200014e4
 802ecdc:	057619f1 	.word	0x057619f1

0802ece0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802ece0:	b580      	push	{r7, lr}
 802ece2:	b082      	sub	sp, #8
 802ece4:	af00      	add	r7, sp, #0
 802ece6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802ece8:	687b      	ldr	r3, [r7, #4]
 802ecea:	2b00      	cmp	r3, #0
 802ecec:	d101      	bne.n	802ecf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802ecee:	2301      	movs	r3, #1
 802ecf0:	e01d      	b.n	802ed2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802ecf2:	687b      	ldr	r3, [r7, #4]
 802ecf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802ecf8:	b2db      	uxtb	r3, r3
 802ecfa:	2b00      	cmp	r3, #0
 802ecfc:	d106      	bne.n	802ed0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802ecfe:	687b      	ldr	r3, [r7, #4]
 802ed00:	2200      	movs	r2, #0
 802ed02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802ed06:	6878      	ldr	r0, [r7, #4]
 802ed08:	f000 f815 	bl	802ed36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802ed0c:	687b      	ldr	r3, [r7, #4]
 802ed0e:	2202      	movs	r2, #2
 802ed10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802ed14:	687b      	ldr	r3, [r7, #4]
 802ed16:	681a      	ldr	r2, [r3, #0]
 802ed18:	687b      	ldr	r3, [r7, #4]
 802ed1a:	3304      	adds	r3, #4
 802ed1c:	4619      	mov	r1, r3
 802ed1e:	4610      	mov	r0, r2
 802ed20:	f000 fb64 	bl	802f3ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802ed24:	687b      	ldr	r3, [r7, #4]
 802ed26:	2201      	movs	r2, #1
 802ed28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802ed2c:	2300      	movs	r3, #0
}
 802ed2e:	4618      	mov	r0, r3
 802ed30:	3708      	adds	r7, #8
 802ed32:	46bd      	mov	sp, r7
 802ed34:	bd80      	pop	{r7, pc}

0802ed36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 802ed36:	b480      	push	{r7}
 802ed38:	b083      	sub	sp, #12
 802ed3a:	af00      	add	r7, sp, #0
 802ed3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 802ed3e:	bf00      	nop
 802ed40:	370c      	adds	r7, #12
 802ed42:	46bd      	mov	sp, r7
 802ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed48:	4770      	bx	lr

0802ed4a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 802ed4a:	b480      	push	{r7}
 802ed4c:	b085      	sub	sp, #20
 802ed4e:	af00      	add	r7, sp, #0
 802ed50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802ed52:	687b      	ldr	r3, [r7, #4]
 802ed54:	2202      	movs	r2, #2
 802ed56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802ed5a:	687b      	ldr	r3, [r7, #4]
 802ed5c:	681b      	ldr	r3, [r3, #0]
 802ed5e:	689b      	ldr	r3, [r3, #8]
 802ed60:	f003 0307 	and.w	r3, r3, #7
 802ed64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802ed66:	68fb      	ldr	r3, [r7, #12]
 802ed68:	2b06      	cmp	r3, #6
 802ed6a:	d007      	beq.n	802ed7c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 802ed6c:	687b      	ldr	r3, [r7, #4]
 802ed6e:	681b      	ldr	r3, [r3, #0]
 802ed70:	681a      	ldr	r2, [r3, #0]
 802ed72:	687b      	ldr	r3, [r7, #4]
 802ed74:	681b      	ldr	r3, [r3, #0]
 802ed76:	f042 0201 	orr.w	r2, r2, #1
 802ed7a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802ed7c:	687b      	ldr	r3, [r7, #4]
 802ed7e:	2201      	movs	r2, #1
 802ed80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 802ed84:	2300      	movs	r3, #0
}
 802ed86:	4618      	mov	r0, r3
 802ed88:	3714      	adds	r7, #20
 802ed8a:	46bd      	mov	sp, r7
 802ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ed90:	4770      	bx	lr

0802ed92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 802ed92:	b580      	push	{r7, lr}
 802ed94:	b082      	sub	sp, #8
 802ed96:	af00      	add	r7, sp, #0
 802ed98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802ed9a:	687b      	ldr	r3, [r7, #4]
 802ed9c:	2b00      	cmp	r3, #0
 802ed9e:	d101      	bne.n	802eda4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 802eda0:	2301      	movs	r3, #1
 802eda2:	e01d      	b.n	802ede0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802eda4:	687b      	ldr	r3, [r7, #4]
 802eda6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802edaa:	b2db      	uxtb	r3, r3
 802edac:	2b00      	cmp	r3, #0
 802edae:	d106      	bne.n	802edbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802edb0:	687b      	ldr	r3, [r7, #4]
 802edb2:	2200      	movs	r2, #0
 802edb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 802edb8:	6878      	ldr	r0, [r7, #4]
 802edba:	f000 f815 	bl	802ede8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802edbe:	687b      	ldr	r3, [r7, #4]
 802edc0:	2202      	movs	r2, #2
 802edc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802edc6:	687b      	ldr	r3, [r7, #4]
 802edc8:	681a      	ldr	r2, [r3, #0]
 802edca:	687b      	ldr	r3, [r7, #4]
 802edcc:	3304      	adds	r3, #4
 802edce:	4619      	mov	r1, r3
 802edd0:	4610      	mov	r0, r2
 802edd2:	f000 fb0b 	bl	802f3ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802edd6:	687b      	ldr	r3, [r7, #4]
 802edd8:	2201      	movs	r2, #1
 802edda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802edde:	2300      	movs	r3, #0
}
 802ede0:	4618      	mov	r0, r3
 802ede2:	3708      	adds	r7, #8
 802ede4:	46bd      	mov	sp, r7
 802ede6:	bd80      	pop	{r7, pc}

0802ede8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 802ede8:	b480      	push	{r7}
 802edea:	b083      	sub	sp, #12
 802edec:	af00      	add	r7, sp, #0
 802edee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 802edf0:	bf00      	nop
 802edf2:	370c      	adds	r7, #12
 802edf4:	46bd      	mov	sp, r7
 802edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802edfa:	4770      	bx	lr

0802edfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 802edfc:	b580      	push	{r7, lr}
 802edfe:	b084      	sub	sp, #16
 802ee00:	af00      	add	r7, sp, #0
 802ee02:	6078      	str	r0, [r7, #4]
 802ee04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802ee06:	687b      	ldr	r3, [r7, #4]
 802ee08:	681b      	ldr	r3, [r3, #0]
 802ee0a:	2201      	movs	r2, #1
 802ee0c:	6839      	ldr	r1, [r7, #0]
 802ee0e:	4618      	mov	r0, r3
 802ee10:	f000 fdd6 	bl	802f9c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 802ee14:	687b      	ldr	r3, [r7, #4]
 802ee16:	681b      	ldr	r3, [r3, #0]
 802ee18:	4a15      	ldr	r2, [pc, #84]	; (802ee70 <HAL_TIM_PWM_Start+0x74>)
 802ee1a:	4293      	cmp	r3, r2
 802ee1c:	d004      	beq.n	802ee28 <HAL_TIM_PWM_Start+0x2c>
 802ee1e:	687b      	ldr	r3, [r7, #4]
 802ee20:	681b      	ldr	r3, [r3, #0]
 802ee22:	4a14      	ldr	r2, [pc, #80]	; (802ee74 <HAL_TIM_PWM_Start+0x78>)
 802ee24:	4293      	cmp	r3, r2
 802ee26:	d101      	bne.n	802ee2c <HAL_TIM_PWM_Start+0x30>
 802ee28:	2301      	movs	r3, #1
 802ee2a:	e000      	b.n	802ee2e <HAL_TIM_PWM_Start+0x32>
 802ee2c:	2300      	movs	r3, #0
 802ee2e:	2b00      	cmp	r3, #0
 802ee30:	d007      	beq.n	802ee42 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802ee32:	687b      	ldr	r3, [r7, #4]
 802ee34:	681b      	ldr	r3, [r3, #0]
 802ee36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802ee38:	687b      	ldr	r3, [r7, #4]
 802ee3a:	681b      	ldr	r3, [r3, #0]
 802ee3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802ee40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802ee42:	687b      	ldr	r3, [r7, #4]
 802ee44:	681b      	ldr	r3, [r3, #0]
 802ee46:	689b      	ldr	r3, [r3, #8]
 802ee48:	f003 0307 	and.w	r3, r3, #7
 802ee4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802ee4e:	68fb      	ldr	r3, [r7, #12]
 802ee50:	2b06      	cmp	r3, #6
 802ee52:	d007      	beq.n	802ee64 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 802ee54:	687b      	ldr	r3, [r7, #4]
 802ee56:	681b      	ldr	r3, [r3, #0]
 802ee58:	681a      	ldr	r2, [r3, #0]
 802ee5a:	687b      	ldr	r3, [r7, #4]
 802ee5c:	681b      	ldr	r3, [r3, #0]
 802ee5e:	f042 0201 	orr.w	r2, r2, #1
 802ee62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802ee64:	2300      	movs	r3, #0
}
 802ee66:	4618      	mov	r0, r3
 802ee68:	3710      	adds	r7, #16
 802ee6a:	46bd      	mov	sp, r7
 802ee6c:	bd80      	pop	{r7, pc}
 802ee6e:	bf00      	nop
 802ee70:	40010000 	.word	0x40010000
 802ee74:	40010400 	.word	0x40010400

0802ee78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802ee78:	b580      	push	{r7, lr}
 802ee7a:	b082      	sub	sp, #8
 802ee7c:	af00      	add	r7, sp, #0
 802ee7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802ee80:	687b      	ldr	r3, [r7, #4]
 802ee82:	681b      	ldr	r3, [r3, #0]
 802ee84:	691b      	ldr	r3, [r3, #16]
 802ee86:	f003 0302 	and.w	r3, r3, #2
 802ee8a:	2b02      	cmp	r3, #2
 802ee8c:	d122      	bne.n	802eed4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802ee8e:	687b      	ldr	r3, [r7, #4]
 802ee90:	681b      	ldr	r3, [r3, #0]
 802ee92:	68db      	ldr	r3, [r3, #12]
 802ee94:	f003 0302 	and.w	r3, r3, #2
 802ee98:	2b02      	cmp	r3, #2
 802ee9a:	d11b      	bne.n	802eed4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802ee9c:	687b      	ldr	r3, [r7, #4]
 802ee9e:	681b      	ldr	r3, [r3, #0]
 802eea0:	f06f 0202 	mvn.w	r2, #2
 802eea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802eea6:	687b      	ldr	r3, [r7, #4]
 802eea8:	2201      	movs	r2, #1
 802eeaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802eeac:	687b      	ldr	r3, [r7, #4]
 802eeae:	681b      	ldr	r3, [r3, #0]
 802eeb0:	699b      	ldr	r3, [r3, #24]
 802eeb2:	f003 0303 	and.w	r3, r3, #3
 802eeb6:	2b00      	cmp	r3, #0
 802eeb8:	d003      	beq.n	802eec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802eeba:	6878      	ldr	r0, [r7, #4]
 802eebc:	f000 fa78 	bl	802f3b0 <HAL_TIM_IC_CaptureCallback>
 802eec0:	e005      	b.n	802eece <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802eec2:	6878      	ldr	r0, [r7, #4]
 802eec4:	f000 fa6a 	bl	802f39c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802eec8:	6878      	ldr	r0, [r7, #4]
 802eeca:	f000 fa7b 	bl	802f3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802eece:	687b      	ldr	r3, [r7, #4]
 802eed0:	2200      	movs	r2, #0
 802eed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802eed4:	687b      	ldr	r3, [r7, #4]
 802eed6:	681b      	ldr	r3, [r3, #0]
 802eed8:	691b      	ldr	r3, [r3, #16]
 802eeda:	f003 0304 	and.w	r3, r3, #4
 802eede:	2b04      	cmp	r3, #4
 802eee0:	d122      	bne.n	802ef28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802eee2:	687b      	ldr	r3, [r7, #4]
 802eee4:	681b      	ldr	r3, [r3, #0]
 802eee6:	68db      	ldr	r3, [r3, #12]
 802eee8:	f003 0304 	and.w	r3, r3, #4
 802eeec:	2b04      	cmp	r3, #4
 802eeee:	d11b      	bne.n	802ef28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802eef0:	687b      	ldr	r3, [r7, #4]
 802eef2:	681b      	ldr	r3, [r3, #0]
 802eef4:	f06f 0204 	mvn.w	r2, #4
 802eef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802eefa:	687b      	ldr	r3, [r7, #4]
 802eefc:	2202      	movs	r2, #2
 802eefe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802ef00:	687b      	ldr	r3, [r7, #4]
 802ef02:	681b      	ldr	r3, [r3, #0]
 802ef04:	699b      	ldr	r3, [r3, #24]
 802ef06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802ef0a:	2b00      	cmp	r3, #0
 802ef0c:	d003      	beq.n	802ef16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802ef0e:	6878      	ldr	r0, [r7, #4]
 802ef10:	f000 fa4e 	bl	802f3b0 <HAL_TIM_IC_CaptureCallback>
 802ef14:	e005      	b.n	802ef22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802ef16:	6878      	ldr	r0, [r7, #4]
 802ef18:	f000 fa40 	bl	802f39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802ef1c:	6878      	ldr	r0, [r7, #4]
 802ef1e:	f000 fa51 	bl	802f3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802ef22:	687b      	ldr	r3, [r7, #4]
 802ef24:	2200      	movs	r2, #0
 802ef26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802ef28:	687b      	ldr	r3, [r7, #4]
 802ef2a:	681b      	ldr	r3, [r3, #0]
 802ef2c:	691b      	ldr	r3, [r3, #16]
 802ef2e:	f003 0308 	and.w	r3, r3, #8
 802ef32:	2b08      	cmp	r3, #8
 802ef34:	d122      	bne.n	802ef7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802ef36:	687b      	ldr	r3, [r7, #4]
 802ef38:	681b      	ldr	r3, [r3, #0]
 802ef3a:	68db      	ldr	r3, [r3, #12]
 802ef3c:	f003 0308 	and.w	r3, r3, #8
 802ef40:	2b08      	cmp	r3, #8
 802ef42:	d11b      	bne.n	802ef7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802ef44:	687b      	ldr	r3, [r7, #4]
 802ef46:	681b      	ldr	r3, [r3, #0]
 802ef48:	f06f 0208 	mvn.w	r2, #8
 802ef4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802ef4e:	687b      	ldr	r3, [r7, #4]
 802ef50:	2204      	movs	r2, #4
 802ef52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802ef54:	687b      	ldr	r3, [r7, #4]
 802ef56:	681b      	ldr	r3, [r3, #0]
 802ef58:	69db      	ldr	r3, [r3, #28]
 802ef5a:	f003 0303 	and.w	r3, r3, #3
 802ef5e:	2b00      	cmp	r3, #0
 802ef60:	d003      	beq.n	802ef6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802ef62:	6878      	ldr	r0, [r7, #4]
 802ef64:	f000 fa24 	bl	802f3b0 <HAL_TIM_IC_CaptureCallback>
 802ef68:	e005      	b.n	802ef76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802ef6a:	6878      	ldr	r0, [r7, #4]
 802ef6c:	f000 fa16 	bl	802f39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802ef70:	6878      	ldr	r0, [r7, #4]
 802ef72:	f000 fa27 	bl	802f3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802ef76:	687b      	ldr	r3, [r7, #4]
 802ef78:	2200      	movs	r2, #0
 802ef7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802ef7c:	687b      	ldr	r3, [r7, #4]
 802ef7e:	681b      	ldr	r3, [r3, #0]
 802ef80:	691b      	ldr	r3, [r3, #16]
 802ef82:	f003 0310 	and.w	r3, r3, #16
 802ef86:	2b10      	cmp	r3, #16
 802ef88:	d122      	bne.n	802efd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802ef8a:	687b      	ldr	r3, [r7, #4]
 802ef8c:	681b      	ldr	r3, [r3, #0]
 802ef8e:	68db      	ldr	r3, [r3, #12]
 802ef90:	f003 0310 	and.w	r3, r3, #16
 802ef94:	2b10      	cmp	r3, #16
 802ef96:	d11b      	bne.n	802efd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802ef98:	687b      	ldr	r3, [r7, #4]
 802ef9a:	681b      	ldr	r3, [r3, #0]
 802ef9c:	f06f 0210 	mvn.w	r2, #16
 802efa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802efa2:	687b      	ldr	r3, [r7, #4]
 802efa4:	2208      	movs	r2, #8
 802efa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802efa8:	687b      	ldr	r3, [r7, #4]
 802efaa:	681b      	ldr	r3, [r3, #0]
 802efac:	69db      	ldr	r3, [r3, #28]
 802efae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802efb2:	2b00      	cmp	r3, #0
 802efb4:	d003      	beq.n	802efbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802efb6:	6878      	ldr	r0, [r7, #4]
 802efb8:	f000 f9fa 	bl	802f3b0 <HAL_TIM_IC_CaptureCallback>
 802efbc:	e005      	b.n	802efca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802efbe:	6878      	ldr	r0, [r7, #4]
 802efc0:	f000 f9ec 	bl	802f39c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802efc4:	6878      	ldr	r0, [r7, #4]
 802efc6:	f000 f9fd 	bl	802f3c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802efca:	687b      	ldr	r3, [r7, #4]
 802efcc:	2200      	movs	r2, #0
 802efce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802efd0:	687b      	ldr	r3, [r7, #4]
 802efd2:	681b      	ldr	r3, [r3, #0]
 802efd4:	691b      	ldr	r3, [r3, #16]
 802efd6:	f003 0301 	and.w	r3, r3, #1
 802efda:	2b01      	cmp	r3, #1
 802efdc:	d10e      	bne.n	802effc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802efde:	687b      	ldr	r3, [r7, #4]
 802efe0:	681b      	ldr	r3, [r3, #0]
 802efe2:	68db      	ldr	r3, [r3, #12]
 802efe4:	f003 0301 	and.w	r3, r3, #1
 802efe8:	2b01      	cmp	r3, #1
 802efea:	d107      	bne.n	802effc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802efec:	687b      	ldr	r3, [r7, #4]
 802efee:	681b      	ldr	r3, [r3, #0]
 802eff0:	f06f 0201 	mvn.w	r2, #1
 802eff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802eff6:	6878      	ldr	r0, [r7, #4]
 802eff8:	f009 f886 	bl	8038108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802effc:	687b      	ldr	r3, [r7, #4]
 802effe:	681b      	ldr	r3, [r3, #0]
 802f000:	691b      	ldr	r3, [r3, #16]
 802f002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802f006:	2b80      	cmp	r3, #128	; 0x80
 802f008:	d10e      	bne.n	802f028 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802f00a:	687b      	ldr	r3, [r7, #4]
 802f00c:	681b      	ldr	r3, [r3, #0]
 802f00e:	68db      	ldr	r3, [r3, #12]
 802f010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802f014:	2b80      	cmp	r3, #128	; 0x80
 802f016:	d107      	bne.n	802f028 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802f018:	687b      	ldr	r3, [r7, #4]
 802f01a:	681b      	ldr	r3, [r3, #0]
 802f01c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802f020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802f022:	6878      	ldr	r0, [r7, #4]
 802f024:	f000 fd78 	bl	802fb18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802f028:	687b      	ldr	r3, [r7, #4]
 802f02a:	681b      	ldr	r3, [r3, #0]
 802f02c:	691b      	ldr	r3, [r3, #16]
 802f02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802f032:	2b40      	cmp	r3, #64	; 0x40
 802f034:	d10e      	bne.n	802f054 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802f036:	687b      	ldr	r3, [r7, #4]
 802f038:	681b      	ldr	r3, [r3, #0]
 802f03a:	68db      	ldr	r3, [r3, #12]
 802f03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802f040:	2b40      	cmp	r3, #64	; 0x40
 802f042:	d107      	bne.n	802f054 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802f044:	687b      	ldr	r3, [r7, #4]
 802f046:	681b      	ldr	r3, [r3, #0]
 802f048:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802f04c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802f04e:	6878      	ldr	r0, [r7, #4]
 802f050:	f000 f9c2 	bl	802f3d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802f054:	687b      	ldr	r3, [r7, #4]
 802f056:	681b      	ldr	r3, [r3, #0]
 802f058:	691b      	ldr	r3, [r3, #16]
 802f05a:	f003 0320 	and.w	r3, r3, #32
 802f05e:	2b20      	cmp	r3, #32
 802f060:	d10e      	bne.n	802f080 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802f062:	687b      	ldr	r3, [r7, #4]
 802f064:	681b      	ldr	r3, [r3, #0]
 802f066:	68db      	ldr	r3, [r3, #12]
 802f068:	f003 0320 	and.w	r3, r3, #32
 802f06c:	2b20      	cmp	r3, #32
 802f06e:	d107      	bne.n	802f080 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802f070:	687b      	ldr	r3, [r7, #4]
 802f072:	681b      	ldr	r3, [r3, #0]
 802f074:	f06f 0220 	mvn.w	r2, #32
 802f078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802f07a:	6878      	ldr	r0, [r7, #4]
 802f07c:	f000 fd42 	bl	802fb04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802f080:	bf00      	nop
 802f082:	3708      	adds	r7, #8
 802f084:	46bd      	mov	sp, r7
 802f086:	bd80      	pop	{r7, pc}

0802f088 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802f088:	b580      	push	{r7, lr}
 802f08a:	b084      	sub	sp, #16
 802f08c:	af00      	add	r7, sp, #0
 802f08e:	60f8      	str	r0, [r7, #12]
 802f090:	60b9      	str	r1, [r7, #8]
 802f092:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 802f094:	68fb      	ldr	r3, [r7, #12]
 802f096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802f09a:	2b01      	cmp	r3, #1
 802f09c:	d101      	bne.n	802f0a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 802f09e:	2302      	movs	r3, #2
 802f0a0:	e0b4      	b.n	802f20c <HAL_TIM_PWM_ConfigChannel+0x184>
 802f0a2:	68fb      	ldr	r3, [r7, #12]
 802f0a4:	2201      	movs	r2, #1
 802f0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802f0aa:	68fb      	ldr	r3, [r7, #12]
 802f0ac:	2202      	movs	r2, #2
 802f0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 802f0b2:	687b      	ldr	r3, [r7, #4]
 802f0b4:	2b0c      	cmp	r3, #12
 802f0b6:	f200 809f 	bhi.w	802f1f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 802f0ba:	a201      	add	r2, pc, #4	; (adr r2, 802f0c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 802f0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802f0c0:	0802f0f5 	.word	0x0802f0f5
 802f0c4:	0802f1f9 	.word	0x0802f1f9
 802f0c8:	0802f1f9 	.word	0x0802f1f9
 802f0cc:	0802f1f9 	.word	0x0802f1f9
 802f0d0:	0802f135 	.word	0x0802f135
 802f0d4:	0802f1f9 	.word	0x0802f1f9
 802f0d8:	0802f1f9 	.word	0x0802f1f9
 802f0dc:	0802f1f9 	.word	0x0802f1f9
 802f0e0:	0802f177 	.word	0x0802f177
 802f0e4:	0802f1f9 	.word	0x0802f1f9
 802f0e8:	0802f1f9 	.word	0x0802f1f9
 802f0ec:	0802f1f9 	.word	0x0802f1f9
 802f0f0:	0802f1b7 	.word	0x0802f1b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 802f0f4:	68fb      	ldr	r3, [r7, #12]
 802f0f6:	681b      	ldr	r3, [r3, #0]
 802f0f8:	68b9      	ldr	r1, [r7, #8]
 802f0fa:	4618      	mov	r0, r3
 802f0fc:	f000 fa16 	bl	802f52c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 802f100:	68fb      	ldr	r3, [r7, #12]
 802f102:	681b      	ldr	r3, [r3, #0]
 802f104:	699a      	ldr	r2, [r3, #24]
 802f106:	68fb      	ldr	r3, [r7, #12]
 802f108:	681b      	ldr	r3, [r3, #0]
 802f10a:	f042 0208 	orr.w	r2, r2, #8
 802f10e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 802f110:	68fb      	ldr	r3, [r7, #12]
 802f112:	681b      	ldr	r3, [r3, #0]
 802f114:	699a      	ldr	r2, [r3, #24]
 802f116:	68fb      	ldr	r3, [r7, #12]
 802f118:	681b      	ldr	r3, [r3, #0]
 802f11a:	f022 0204 	bic.w	r2, r2, #4
 802f11e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 802f120:	68fb      	ldr	r3, [r7, #12]
 802f122:	681b      	ldr	r3, [r3, #0]
 802f124:	6999      	ldr	r1, [r3, #24]
 802f126:	68bb      	ldr	r3, [r7, #8]
 802f128:	691a      	ldr	r2, [r3, #16]
 802f12a:	68fb      	ldr	r3, [r7, #12]
 802f12c:	681b      	ldr	r3, [r3, #0]
 802f12e:	430a      	orrs	r2, r1
 802f130:	619a      	str	r2, [r3, #24]
      break;
 802f132:	e062      	b.n	802f1fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 802f134:	68fb      	ldr	r3, [r7, #12]
 802f136:	681b      	ldr	r3, [r3, #0]
 802f138:	68b9      	ldr	r1, [r7, #8]
 802f13a:	4618      	mov	r0, r3
 802f13c:	f000 fa66 	bl	802f60c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 802f140:	68fb      	ldr	r3, [r7, #12]
 802f142:	681b      	ldr	r3, [r3, #0]
 802f144:	699a      	ldr	r2, [r3, #24]
 802f146:	68fb      	ldr	r3, [r7, #12]
 802f148:	681b      	ldr	r3, [r3, #0]
 802f14a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802f14e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 802f150:	68fb      	ldr	r3, [r7, #12]
 802f152:	681b      	ldr	r3, [r3, #0]
 802f154:	699a      	ldr	r2, [r3, #24]
 802f156:	68fb      	ldr	r3, [r7, #12]
 802f158:	681b      	ldr	r3, [r3, #0]
 802f15a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802f15e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 802f160:	68fb      	ldr	r3, [r7, #12]
 802f162:	681b      	ldr	r3, [r3, #0]
 802f164:	6999      	ldr	r1, [r3, #24]
 802f166:	68bb      	ldr	r3, [r7, #8]
 802f168:	691b      	ldr	r3, [r3, #16]
 802f16a:	021a      	lsls	r2, r3, #8
 802f16c:	68fb      	ldr	r3, [r7, #12]
 802f16e:	681b      	ldr	r3, [r3, #0]
 802f170:	430a      	orrs	r2, r1
 802f172:	619a      	str	r2, [r3, #24]
      break;
 802f174:	e041      	b.n	802f1fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802f176:	68fb      	ldr	r3, [r7, #12]
 802f178:	681b      	ldr	r3, [r3, #0]
 802f17a:	68b9      	ldr	r1, [r7, #8]
 802f17c:	4618      	mov	r0, r3
 802f17e:	f000 fabb 	bl	802f6f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 802f182:	68fb      	ldr	r3, [r7, #12]
 802f184:	681b      	ldr	r3, [r3, #0]
 802f186:	69da      	ldr	r2, [r3, #28]
 802f188:	68fb      	ldr	r3, [r7, #12]
 802f18a:	681b      	ldr	r3, [r3, #0]
 802f18c:	f042 0208 	orr.w	r2, r2, #8
 802f190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 802f192:	68fb      	ldr	r3, [r7, #12]
 802f194:	681b      	ldr	r3, [r3, #0]
 802f196:	69da      	ldr	r2, [r3, #28]
 802f198:	68fb      	ldr	r3, [r7, #12]
 802f19a:	681b      	ldr	r3, [r3, #0]
 802f19c:	f022 0204 	bic.w	r2, r2, #4
 802f1a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 802f1a2:	68fb      	ldr	r3, [r7, #12]
 802f1a4:	681b      	ldr	r3, [r3, #0]
 802f1a6:	69d9      	ldr	r1, [r3, #28]
 802f1a8:	68bb      	ldr	r3, [r7, #8]
 802f1aa:	691a      	ldr	r2, [r3, #16]
 802f1ac:	68fb      	ldr	r3, [r7, #12]
 802f1ae:	681b      	ldr	r3, [r3, #0]
 802f1b0:	430a      	orrs	r2, r1
 802f1b2:	61da      	str	r2, [r3, #28]
      break;
 802f1b4:	e021      	b.n	802f1fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802f1b6:	68fb      	ldr	r3, [r7, #12]
 802f1b8:	681b      	ldr	r3, [r3, #0]
 802f1ba:	68b9      	ldr	r1, [r7, #8]
 802f1bc:	4618      	mov	r0, r3
 802f1be:	f000 fb0f 	bl	802f7e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 802f1c2:	68fb      	ldr	r3, [r7, #12]
 802f1c4:	681b      	ldr	r3, [r3, #0]
 802f1c6:	69da      	ldr	r2, [r3, #28]
 802f1c8:	68fb      	ldr	r3, [r7, #12]
 802f1ca:	681b      	ldr	r3, [r3, #0]
 802f1cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802f1d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 802f1d2:	68fb      	ldr	r3, [r7, #12]
 802f1d4:	681b      	ldr	r3, [r3, #0]
 802f1d6:	69da      	ldr	r2, [r3, #28]
 802f1d8:	68fb      	ldr	r3, [r7, #12]
 802f1da:	681b      	ldr	r3, [r3, #0]
 802f1dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802f1e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802f1e2:	68fb      	ldr	r3, [r7, #12]
 802f1e4:	681b      	ldr	r3, [r3, #0]
 802f1e6:	69d9      	ldr	r1, [r3, #28]
 802f1e8:	68bb      	ldr	r3, [r7, #8]
 802f1ea:	691b      	ldr	r3, [r3, #16]
 802f1ec:	021a      	lsls	r2, r3, #8
 802f1ee:	68fb      	ldr	r3, [r7, #12]
 802f1f0:	681b      	ldr	r3, [r3, #0]
 802f1f2:	430a      	orrs	r2, r1
 802f1f4:	61da      	str	r2, [r3, #28]
      break;
 802f1f6:	e000      	b.n	802f1fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 802f1f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 802f1fa:	68fb      	ldr	r3, [r7, #12]
 802f1fc:	2201      	movs	r2, #1
 802f1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802f202:	68fb      	ldr	r3, [r7, #12]
 802f204:	2200      	movs	r2, #0
 802f206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802f20a:	2300      	movs	r3, #0
}
 802f20c:	4618      	mov	r0, r3
 802f20e:	3710      	adds	r7, #16
 802f210:	46bd      	mov	sp, r7
 802f212:	bd80      	pop	{r7, pc}

0802f214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 802f214:	b580      	push	{r7, lr}
 802f216:	b084      	sub	sp, #16
 802f218:	af00      	add	r7, sp, #0
 802f21a:	6078      	str	r0, [r7, #4]
 802f21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802f21e:	687b      	ldr	r3, [r7, #4]
 802f220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802f224:	2b01      	cmp	r3, #1
 802f226:	d101      	bne.n	802f22c <HAL_TIM_ConfigClockSource+0x18>
 802f228:	2302      	movs	r3, #2
 802f22a:	e0b3      	b.n	802f394 <HAL_TIM_ConfigClockSource+0x180>
 802f22c:	687b      	ldr	r3, [r7, #4]
 802f22e:	2201      	movs	r2, #1
 802f230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802f234:	687b      	ldr	r3, [r7, #4]
 802f236:	2202      	movs	r2, #2
 802f238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802f23c:	687b      	ldr	r3, [r7, #4]
 802f23e:	681b      	ldr	r3, [r3, #0]
 802f240:	689b      	ldr	r3, [r3, #8]
 802f242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802f244:	68fb      	ldr	r3, [r7, #12]
 802f246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802f24a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802f24c:	68fb      	ldr	r3, [r7, #12]
 802f24e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802f252:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 802f254:	687b      	ldr	r3, [r7, #4]
 802f256:	681b      	ldr	r3, [r3, #0]
 802f258:	68fa      	ldr	r2, [r7, #12]
 802f25a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802f25c:	683b      	ldr	r3, [r7, #0]
 802f25e:	681b      	ldr	r3, [r3, #0]
 802f260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802f264:	d03e      	beq.n	802f2e4 <HAL_TIM_ConfigClockSource+0xd0>
 802f266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802f26a:	f200 8087 	bhi.w	802f37c <HAL_TIM_ConfigClockSource+0x168>
 802f26e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802f272:	f000 8085 	beq.w	802f380 <HAL_TIM_ConfigClockSource+0x16c>
 802f276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802f27a:	d87f      	bhi.n	802f37c <HAL_TIM_ConfigClockSource+0x168>
 802f27c:	2b70      	cmp	r3, #112	; 0x70
 802f27e:	d01a      	beq.n	802f2b6 <HAL_TIM_ConfigClockSource+0xa2>
 802f280:	2b70      	cmp	r3, #112	; 0x70
 802f282:	d87b      	bhi.n	802f37c <HAL_TIM_ConfigClockSource+0x168>
 802f284:	2b60      	cmp	r3, #96	; 0x60
 802f286:	d050      	beq.n	802f32a <HAL_TIM_ConfigClockSource+0x116>
 802f288:	2b60      	cmp	r3, #96	; 0x60
 802f28a:	d877      	bhi.n	802f37c <HAL_TIM_ConfigClockSource+0x168>
 802f28c:	2b50      	cmp	r3, #80	; 0x50
 802f28e:	d03c      	beq.n	802f30a <HAL_TIM_ConfigClockSource+0xf6>
 802f290:	2b50      	cmp	r3, #80	; 0x50
 802f292:	d873      	bhi.n	802f37c <HAL_TIM_ConfigClockSource+0x168>
 802f294:	2b40      	cmp	r3, #64	; 0x40
 802f296:	d058      	beq.n	802f34a <HAL_TIM_ConfigClockSource+0x136>
 802f298:	2b40      	cmp	r3, #64	; 0x40
 802f29a:	d86f      	bhi.n	802f37c <HAL_TIM_ConfigClockSource+0x168>
 802f29c:	2b30      	cmp	r3, #48	; 0x30
 802f29e:	d064      	beq.n	802f36a <HAL_TIM_ConfigClockSource+0x156>
 802f2a0:	2b30      	cmp	r3, #48	; 0x30
 802f2a2:	d86b      	bhi.n	802f37c <HAL_TIM_ConfigClockSource+0x168>
 802f2a4:	2b20      	cmp	r3, #32
 802f2a6:	d060      	beq.n	802f36a <HAL_TIM_ConfigClockSource+0x156>
 802f2a8:	2b20      	cmp	r3, #32
 802f2aa:	d867      	bhi.n	802f37c <HAL_TIM_ConfigClockSource+0x168>
 802f2ac:	2b00      	cmp	r3, #0
 802f2ae:	d05c      	beq.n	802f36a <HAL_TIM_ConfigClockSource+0x156>
 802f2b0:	2b10      	cmp	r3, #16
 802f2b2:	d05a      	beq.n	802f36a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 802f2b4:	e062      	b.n	802f37c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 802f2b6:	687b      	ldr	r3, [r7, #4]
 802f2b8:	6818      	ldr	r0, [r3, #0]
 802f2ba:	683b      	ldr	r3, [r7, #0]
 802f2bc:	6899      	ldr	r1, [r3, #8]
 802f2be:	683b      	ldr	r3, [r7, #0]
 802f2c0:	685a      	ldr	r2, [r3, #4]
 802f2c2:	683b      	ldr	r3, [r7, #0]
 802f2c4:	68db      	ldr	r3, [r3, #12]
 802f2c6:	f000 fb5b 	bl	802f980 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 802f2ca:	687b      	ldr	r3, [r7, #4]
 802f2cc:	681b      	ldr	r3, [r3, #0]
 802f2ce:	689b      	ldr	r3, [r3, #8]
 802f2d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802f2d2:	68fb      	ldr	r3, [r7, #12]
 802f2d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802f2d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 802f2da:	687b      	ldr	r3, [r7, #4]
 802f2dc:	681b      	ldr	r3, [r3, #0]
 802f2de:	68fa      	ldr	r2, [r7, #12]
 802f2e0:	609a      	str	r2, [r3, #8]
      break;
 802f2e2:	e04e      	b.n	802f382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 802f2e4:	687b      	ldr	r3, [r7, #4]
 802f2e6:	6818      	ldr	r0, [r3, #0]
 802f2e8:	683b      	ldr	r3, [r7, #0]
 802f2ea:	6899      	ldr	r1, [r3, #8]
 802f2ec:	683b      	ldr	r3, [r7, #0]
 802f2ee:	685a      	ldr	r2, [r3, #4]
 802f2f0:	683b      	ldr	r3, [r7, #0]
 802f2f2:	68db      	ldr	r3, [r3, #12]
 802f2f4:	f000 fb44 	bl	802f980 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802f2f8:	687b      	ldr	r3, [r7, #4]
 802f2fa:	681b      	ldr	r3, [r3, #0]
 802f2fc:	689a      	ldr	r2, [r3, #8]
 802f2fe:	687b      	ldr	r3, [r7, #4]
 802f300:	681b      	ldr	r3, [r3, #0]
 802f302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802f306:	609a      	str	r2, [r3, #8]
      break;
 802f308:	e03b      	b.n	802f382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802f30a:	687b      	ldr	r3, [r7, #4]
 802f30c:	6818      	ldr	r0, [r3, #0]
 802f30e:	683b      	ldr	r3, [r7, #0]
 802f310:	6859      	ldr	r1, [r3, #4]
 802f312:	683b      	ldr	r3, [r7, #0]
 802f314:	68db      	ldr	r3, [r3, #12]
 802f316:	461a      	mov	r2, r3
 802f318:	f000 fab8 	bl	802f88c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802f31c:	687b      	ldr	r3, [r7, #4]
 802f31e:	681b      	ldr	r3, [r3, #0]
 802f320:	2150      	movs	r1, #80	; 0x50
 802f322:	4618      	mov	r0, r3
 802f324:	f000 fb11 	bl	802f94a <TIM_ITRx_SetConfig>
      break;
 802f328:	e02b      	b.n	802f382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 802f32a:	687b      	ldr	r3, [r7, #4]
 802f32c:	6818      	ldr	r0, [r3, #0]
 802f32e:	683b      	ldr	r3, [r7, #0]
 802f330:	6859      	ldr	r1, [r3, #4]
 802f332:	683b      	ldr	r3, [r7, #0]
 802f334:	68db      	ldr	r3, [r3, #12]
 802f336:	461a      	mov	r2, r3
 802f338:	f000 fad7 	bl	802f8ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802f33c:	687b      	ldr	r3, [r7, #4]
 802f33e:	681b      	ldr	r3, [r3, #0]
 802f340:	2160      	movs	r1, #96	; 0x60
 802f342:	4618      	mov	r0, r3
 802f344:	f000 fb01 	bl	802f94a <TIM_ITRx_SetConfig>
      break;
 802f348:	e01b      	b.n	802f382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802f34a:	687b      	ldr	r3, [r7, #4]
 802f34c:	6818      	ldr	r0, [r3, #0]
 802f34e:	683b      	ldr	r3, [r7, #0]
 802f350:	6859      	ldr	r1, [r3, #4]
 802f352:	683b      	ldr	r3, [r7, #0]
 802f354:	68db      	ldr	r3, [r3, #12]
 802f356:	461a      	mov	r2, r3
 802f358:	f000 fa98 	bl	802f88c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802f35c:	687b      	ldr	r3, [r7, #4]
 802f35e:	681b      	ldr	r3, [r3, #0]
 802f360:	2140      	movs	r1, #64	; 0x40
 802f362:	4618      	mov	r0, r3
 802f364:	f000 faf1 	bl	802f94a <TIM_ITRx_SetConfig>
      break;
 802f368:	e00b      	b.n	802f382 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802f36a:	687b      	ldr	r3, [r7, #4]
 802f36c:	681a      	ldr	r2, [r3, #0]
 802f36e:	683b      	ldr	r3, [r7, #0]
 802f370:	681b      	ldr	r3, [r3, #0]
 802f372:	4619      	mov	r1, r3
 802f374:	4610      	mov	r0, r2
 802f376:	f000 fae8 	bl	802f94a <TIM_ITRx_SetConfig>
      break;
 802f37a:	e002      	b.n	802f382 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 802f37c:	bf00      	nop
 802f37e:	e000      	b.n	802f382 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 802f380:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802f382:	687b      	ldr	r3, [r7, #4]
 802f384:	2201      	movs	r2, #1
 802f386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802f38a:	687b      	ldr	r3, [r7, #4]
 802f38c:	2200      	movs	r2, #0
 802f38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802f392:	2300      	movs	r3, #0
}
 802f394:	4618      	mov	r0, r3
 802f396:	3710      	adds	r7, #16
 802f398:	46bd      	mov	sp, r7
 802f39a:	bd80      	pop	{r7, pc}

0802f39c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802f39c:	b480      	push	{r7}
 802f39e:	b083      	sub	sp, #12
 802f3a0:	af00      	add	r7, sp, #0
 802f3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802f3a4:	bf00      	nop
 802f3a6:	370c      	adds	r7, #12
 802f3a8:	46bd      	mov	sp, r7
 802f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f3ae:	4770      	bx	lr

0802f3b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802f3b0:	b480      	push	{r7}
 802f3b2:	b083      	sub	sp, #12
 802f3b4:	af00      	add	r7, sp, #0
 802f3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802f3b8:	bf00      	nop
 802f3ba:	370c      	adds	r7, #12
 802f3bc:	46bd      	mov	sp, r7
 802f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f3c2:	4770      	bx	lr

0802f3c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802f3c4:	b480      	push	{r7}
 802f3c6:	b083      	sub	sp, #12
 802f3c8:	af00      	add	r7, sp, #0
 802f3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802f3cc:	bf00      	nop
 802f3ce:	370c      	adds	r7, #12
 802f3d0:	46bd      	mov	sp, r7
 802f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f3d6:	4770      	bx	lr

0802f3d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802f3d8:	b480      	push	{r7}
 802f3da:	b083      	sub	sp, #12
 802f3dc:	af00      	add	r7, sp, #0
 802f3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802f3e0:	bf00      	nop
 802f3e2:	370c      	adds	r7, #12
 802f3e4:	46bd      	mov	sp, r7
 802f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f3ea:	4770      	bx	lr

0802f3ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802f3ec:	b480      	push	{r7}
 802f3ee:	b085      	sub	sp, #20
 802f3f0:	af00      	add	r7, sp, #0
 802f3f2:	6078      	str	r0, [r7, #4]
 802f3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802f3f6:	687b      	ldr	r3, [r7, #4]
 802f3f8:	681b      	ldr	r3, [r3, #0]
 802f3fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802f3fc:	687b      	ldr	r3, [r7, #4]
 802f3fe:	4a40      	ldr	r2, [pc, #256]	; (802f500 <TIM_Base_SetConfig+0x114>)
 802f400:	4293      	cmp	r3, r2
 802f402:	d013      	beq.n	802f42c <TIM_Base_SetConfig+0x40>
 802f404:	687b      	ldr	r3, [r7, #4]
 802f406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802f40a:	d00f      	beq.n	802f42c <TIM_Base_SetConfig+0x40>
 802f40c:	687b      	ldr	r3, [r7, #4]
 802f40e:	4a3d      	ldr	r2, [pc, #244]	; (802f504 <TIM_Base_SetConfig+0x118>)
 802f410:	4293      	cmp	r3, r2
 802f412:	d00b      	beq.n	802f42c <TIM_Base_SetConfig+0x40>
 802f414:	687b      	ldr	r3, [r7, #4]
 802f416:	4a3c      	ldr	r2, [pc, #240]	; (802f508 <TIM_Base_SetConfig+0x11c>)
 802f418:	4293      	cmp	r3, r2
 802f41a:	d007      	beq.n	802f42c <TIM_Base_SetConfig+0x40>
 802f41c:	687b      	ldr	r3, [r7, #4]
 802f41e:	4a3b      	ldr	r2, [pc, #236]	; (802f50c <TIM_Base_SetConfig+0x120>)
 802f420:	4293      	cmp	r3, r2
 802f422:	d003      	beq.n	802f42c <TIM_Base_SetConfig+0x40>
 802f424:	687b      	ldr	r3, [r7, #4]
 802f426:	4a3a      	ldr	r2, [pc, #232]	; (802f510 <TIM_Base_SetConfig+0x124>)
 802f428:	4293      	cmp	r3, r2
 802f42a:	d108      	bne.n	802f43e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802f42c:	68fb      	ldr	r3, [r7, #12]
 802f42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802f432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802f434:	683b      	ldr	r3, [r7, #0]
 802f436:	685b      	ldr	r3, [r3, #4]
 802f438:	68fa      	ldr	r2, [r7, #12]
 802f43a:	4313      	orrs	r3, r2
 802f43c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802f43e:	687b      	ldr	r3, [r7, #4]
 802f440:	4a2f      	ldr	r2, [pc, #188]	; (802f500 <TIM_Base_SetConfig+0x114>)
 802f442:	4293      	cmp	r3, r2
 802f444:	d02b      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f446:	687b      	ldr	r3, [r7, #4]
 802f448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802f44c:	d027      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f44e:	687b      	ldr	r3, [r7, #4]
 802f450:	4a2c      	ldr	r2, [pc, #176]	; (802f504 <TIM_Base_SetConfig+0x118>)
 802f452:	4293      	cmp	r3, r2
 802f454:	d023      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f456:	687b      	ldr	r3, [r7, #4]
 802f458:	4a2b      	ldr	r2, [pc, #172]	; (802f508 <TIM_Base_SetConfig+0x11c>)
 802f45a:	4293      	cmp	r3, r2
 802f45c:	d01f      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f45e:	687b      	ldr	r3, [r7, #4]
 802f460:	4a2a      	ldr	r2, [pc, #168]	; (802f50c <TIM_Base_SetConfig+0x120>)
 802f462:	4293      	cmp	r3, r2
 802f464:	d01b      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f466:	687b      	ldr	r3, [r7, #4]
 802f468:	4a29      	ldr	r2, [pc, #164]	; (802f510 <TIM_Base_SetConfig+0x124>)
 802f46a:	4293      	cmp	r3, r2
 802f46c:	d017      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f46e:	687b      	ldr	r3, [r7, #4]
 802f470:	4a28      	ldr	r2, [pc, #160]	; (802f514 <TIM_Base_SetConfig+0x128>)
 802f472:	4293      	cmp	r3, r2
 802f474:	d013      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f476:	687b      	ldr	r3, [r7, #4]
 802f478:	4a27      	ldr	r2, [pc, #156]	; (802f518 <TIM_Base_SetConfig+0x12c>)
 802f47a:	4293      	cmp	r3, r2
 802f47c:	d00f      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f47e:	687b      	ldr	r3, [r7, #4]
 802f480:	4a26      	ldr	r2, [pc, #152]	; (802f51c <TIM_Base_SetConfig+0x130>)
 802f482:	4293      	cmp	r3, r2
 802f484:	d00b      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f486:	687b      	ldr	r3, [r7, #4]
 802f488:	4a25      	ldr	r2, [pc, #148]	; (802f520 <TIM_Base_SetConfig+0x134>)
 802f48a:	4293      	cmp	r3, r2
 802f48c:	d007      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f48e:	687b      	ldr	r3, [r7, #4]
 802f490:	4a24      	ldr	r2, [pc, #144]	; (802f524 <TIM_Base_SetConfig+0x138>)
 802f492:	4293      	cmp	r3, r2
 802f494:	d003      	beq.n	802f49e <TIM_Base_SetConfig+0xb2>
 802f496:	687b      	ldr	r3, [r7, #4]
 802f498:	4a23      	ldr	r2, [pc, #140]	; (802f528 <TIM_Base_SetConfig+0x13c>)
 802f49a:	4293      	cmp	r3, r2
 802f49c:	d108      	bne.n	802f4b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802f49e:	68fb      	ldr	r3, [r7, #12]
 802f4a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802f4a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802f4a6:	683b      	ldr	r3, [r7, #0]
 802f4a8:	68db      	ldr	r3, [r3, #12]
 802f4aa:	68fa      	ldr	r2, [r7, #12]
 802f4ac:	4313      	orrs	r3, r2
 802f4ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802f4b0:	68fb      	ldr	r3, [r7, #12]
 802f4b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802f4b6:	683b      	ldr	r3, [r7, #0]
 802f4b8:	695b      	ldr	r3, [r3, #20]
 802f4ba:	4313      	orrs	r3, r2
 802f4bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802f4be:	687b      	ldr	r3, [r7, #4]
 802f4c0:	68fa      	ldr	r2, [r7, #12]
 802f4c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802f4c4:	683b      	ldr	r3, [r7, #0]
 802f4c6:	689a      	ldr	r2, [r3, #8]
 802f4c8:	687b      	ldr	r3, [r7, #4]
 802f4ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802f4cc:	683b      	ldr	r3, [r7, #0]
 802f4ce:	681a      	ldr	r2, [r3, #0]
 802f4d0:	687b      	ldr	r3, [r7, #4]
 802f4d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802f4d4:	687b      	ldr	r3, [r7, #4]
 802f4d6:	4a0a      	ldr	r2, [pc, #40]	; (802f500 <TIM_Base_SetConfig+0x114>)
 802f4d8:	4293      	cmp	r3, r2
 802f4da:	d003      	beq.n	802f4e4 <TIM_Base_SetConfig+0xf8>
 802f4dc:	687b      	ldr	r3, [r7, #4]
 802f4de:	4a0c      	ldr	r2, [pc, #48]	; (802f510 <TIM_Base_SetConfig+0x124>)
 802f4e0:	4293      	cmp	r3, r2
 802f4e2:	d103      	bne.n	802f4ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802f4e4:	683b      	ldr	r3, [r7, #0]
 802f4e6:	691a      	ldr	r2, [r3, #16]
 802f4e8:	687b      	ldr	r3, [r7, #4]
 802f4ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802f4ec:	687b      	ldr	r3, [r7, #4]
 802f4ee:	2201      	movs	r2, #1
 802f4f0:	615a      	str	r2, [r3, #20]
}
 802f4f2:	bf00      	nop
 802f4f4:	3714      	adds	r7, #20
 802f4f6:	46bd      	mov	sp, r7
 802f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f4fc:	4770      	bx	lr
 802f4fe:	bf00      	nop
 802f500:	40010000 	.word	0x40010000
 802f504:	40000400 	.word	0x40000400
 802f508:	40000800 	.word	0x40000800
 802f50c:	40000c00 	.word	0x40000c00
 802f510:	40010400 	.word	0x40010400
 802f514:	40014000 	.word	0x40014000
 802f518:	40014400 	.word	0x40014400
 802f51c:	40014800 	.word	0x40014800
 802f520:	40001800 	.word	0x40001800
 802f524:	40001c00 	.word	0x40001c00
 802f528:	40002000 	.word	0x40002000

0802f52c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802f52c:	b480      	push	{r7}
 802f52e:	b087      	sub	sp, #28
 802f530:	af00      	add	r7, sp, #0
 802f532:	6078      	str	r0, [r7, #4]
 802f534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802f536:	687b      	ldr	r3, [r7, #4]
 802f538:	6a1b      	ldr	r3, [r3, #32]
 802f53a:	f023 0201 	bic.w	r2, r3, #1
 802f53e:	687b      	ldr	r3, [r7, #4]
 802f540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802f542:	687b      	ldr	r3, [r7, #4]
 802f544:	6a1b      	ldr	r3, [r3, #32]
 802f546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802f548:	687b      	ldr	r3, [r7, #4]
 802f54a:	685b      	ldr	r3, [r3, #4]
 802f54c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802f54e:	687b      	ldr	r3, [r7, #4]
 802f550:	699b      	ldr	r3, [r3, #24]
 802f552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802f554:	68fb      	ldr	r3, [r7, #12]
 802f556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802f55a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 802f55c:	68fb      	ldr	r3, [r7, #12]
 802f55e:	f023 0303 	bic.w	r3, r3, #3
 802f562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802f564:	683b      	ldr	r3, [r7, #0]
 802f566:	681b      	ldr	r3, [r3, #0]
 802f568:	68fa      	ldr	r2, [r7, #12]
 802f56a:	4313      	orrs	r3, r2
 802f56c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802f56e:	697b      	ldr	r3, [r7, #20]
 802f570:	f023 0302 	bic.w	r3, r3, #2
 802f574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802f576:	683b      	ldr	r3, [r7, #0]
 802f578:	689b      	ldr	r3, [r3, #8]
 802f57a:	697a      	ldr	r2, [r7, #20]
 802f57c:	4313      	orrs	r3, r2
 802f57e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 802f580:	687b      	ldr	r3, [r7, #4]
 802f582:	4a20      	ldr	r2, [pc, #128]	; (802f604 <TIM_OC1_SetConfig+0xd8>)
 802f584:	4293      	cmp	r3, r2
 802f586:	d003      	beq.n	802f590 <TIM_OC1_SetConfig+0x64>
 802f588:	687b      	ldr	r3, [r7, #4]
 802f58a:	4a1f      	ldr	r2, [pc, #124]	; (802f608 <TIM_OC1_SetConfig+0xdc>)
 802f58c:	4293      	cmp	r3, r2
 802f58e:	d10c      	bne.n	802f5aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 802f590:	697b      	ldr	r3, [r7, #20]
 802f592:	f023 0308 	bic.w	r3, r3, #8
 802f596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802f598:	683b      	ldr	r3, [r7, #0]
 802f59a:	68db      	ldr	r3, [r3, #12]
 802f59c:	697a      	ldr	r2, [r7, #20]
 802f59e:	4313      	orrs	r3, r2
 802f5a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 802f5a2:	697b      	ldr	r3, [r7, #20]
 802f5a4:	f023 0304 	bic.w	r3, r3, #4
 802f5a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802f5aa:	687b      	ldr	r3, [r7, #4]
 802f5ac:	4a15      	ldr	r2, [pc, #84]	; (802f604 <TIM_OC1_SetConfig+0xd8>)
 802f5ae:	4293      	cmp	r3, r2
 802f5b0:	d003      	beq.n	802f5ba <TIM_OC1_SetConfig+0x8e>
 802f5b2:	687b      	ldr	r3, [r7, #4]
 802f5b4:	4a14      	ldr	r2, [pc, #80]	; (802f608 <TIM_OC1_SetConfig+0xdc>)
 802f5b6:	4293      	cmp	r3, r2
 802f5b8:	d111      	bne.n	802f5de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802f5ba:	693b      	ldr	r3, [r7, #16]
 802f5bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802f5c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802f5c2:	693b      	ldr	r3, [r7, #16]
 802f5c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802f5c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802f5ca:	683b      	ldr	r3, [r7, #0]
 802f5cc:	695b      	ldr	r3, [r3, #20]
 802f5ce:	693a      	ldr	r2, [r7, #16]
 802f5d0:	4313      	orrs	r3, r2
 802f5d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 802f5d4:	683b      	ldr	r3, [r7, #0]
 802f5d6:	699b      	ldr	r3, [r3, #24]
 802f5d8:	693a      	ldr	r2, [r7, #16]
 802f5da:	4313      	orrs	r3, r2
 802f5dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802f5de:	687b      	ldr	r3, [r7, #4]
 802f5e0:	693a      	ldr	r2, [r7, #16]
 802f5e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802f5e4:	687b      	ldr	r3, [r7, #4]
 802f5e6:	68fa      	ldr	r2, [r7, #12]
 802f5e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802f5ea:	683b      	ldr	r3, [r7, #0]
 802f5ec:	685a      	ldr	r2, [r3, #4]
 802f5ee:	687b      	ldr	r3, [r7, #4]
 802f5f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802f5f2:	687b      	ldr	r3, [r7, #4]
 802f5f4:	697a      	ldr	r2, [r7, #20]
 802f5f6:	621a      	str	r2, [r3, #32]
}
 802f5f8:	bf00      	nop
 802f5fa:	371c      	adds	r7, #28
 802f5fc:	46bd      	mov	sp, r7
 802f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f602:	4770      	bx	lr
 802f604:	40010000 	.word	0x40010000
 802f608:	40010400 	.word	0x40010400

0802f60c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802f60c:	b480      	push	{r7}
 802f60e:	b087      	sub	sp, #28
 802f610:	af00      	add	r7, sp, #0
 802f612:	6078      	str	r0, [r7, #4]
 802f614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802f616:	687b      	ldr	r3, [r7, #4]
 802f618:	6a1b      	ldr	r3, [r3, #32]
 802f61a:	f023 0210 	bic.w	r2, r3, #16
 802f61e:	687b      	ldr	r3, [r7, #4]
 802f620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802f622:	687b      	ldr	r3, [r7, #4]
 802f624:	6a1b      	ldr	r3, [r3, #32]
 802f626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802f628:	687b      	ldr	r3, [r7, #4]
 802f62a:	685b      	ldr	r3, [r3, #4]
 802f62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802f62e:	687b      	ldr	r3, [r7, #4]
 802f630:	699b      	ldr	r3, [r3, #24]
 802f632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802f634:	68fb      	ldr	r3, [r7, #12]
 802f636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802f63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 802f63c:	68fb      	ldr	r3, [r7, #12]
 802f63e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802f642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802f644:	683b      	ldr	r3, [r7, #0]
 802f646:	681b      	ldr	r3, [r3, #0]
 802f648:	021b      	lsls	r3, r3, #8
 802f64a:	68fa      	ldr	r2, [r7, #12]
 802f64c:	4313      	orrs	r3, r2
 802f64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 802f650:	697b      	ldr	r3, [r7, #20]
 802f652:	f023 0320 	bic.w	r3, r3, #32
 802f656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 802f658:	683b      	ldr	r3, [r7, #0]
 802f65a:	689b      	ldr	r3, [r3, #8]
 802f65c:	011b      	lsls	r3, r3, #4
 802f65e:	697a      	ldr	r2, [r7, #20]
 802f660:	4313      	orrs	r3, r2
 802f662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802f664:	687b      	ldr	r3, [r7, #4]
 802f666:	4a22      	ldr	r2, [pc, #136]	; (802f6f0 <TIM_OC2_SetConfig+0xe4>)
 802f668:	4293      	cmp	r3, r2
 802f66a:	d003      	beq.n	802f674 <TIM_OC2_SetConfig+0x68>
 802f66c:	687b      	ldr	r3, [r7, #4]
 802f66e:	4a21      	ldr	r2, [pc, #132]	; (802f6f4 <TIM_OC2_SetConfig+0xe8>)
 802f670:	4293      	cmp	r3, r2
 802f672:	d10d      	bne.n	802f690 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802f674:	697b      	ldr	r3, [r7, #20]
 802f676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802f67a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 802f67c:	683b      	ldr	r3, [r7, #0]
 802f67e:	68db      	ldr	r3, [r3, #12]
 802f680:	011b      	lsls	r3, r3, #4
 802f682:	697a      	ldr	r2, [r7, #20]
 802f684:	4313      	orrs	r3, r2
 802f686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 802f688:	697b      	ldr	r3, [r7, #20]
 802f68a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802f68e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802f690:	687b      	ldr	r3, [r7, #4]
 802f692:	4a17      	ldr	r2, [pc, #92]	; (802f6f0 <TIM_OC2_SetConfig+0xe4>)
 802f694:	4293      	cmp	r3, r2
 802f696:	d003      	beq.n	802f6a0 <TIM_OC2_SetConfig+0x94>
 802f698:	687b      	ldr	r3, [r7, #4]
 802f69a:	4a16      	ldr	r2, [pc, #88]	; (802f6f4 <TIM_OC2_SetConfig+0xe8>)
 802f69c:	4293      	cmp	r3, r2
 802f69e:	d113      	bne.n	802f6c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 802f6a0:	693b      	ldr	r3, [r7, #16]
 802f6a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802f6a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 802f6a8:	693b      	ldr	r3, [r7, #16]
 802f6aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802f6ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 802f6b0:	683b      	ldr	r3, [r7, #0]
 802f6b2:	695b      	ldr	r3, [r3, #20]
 802f6b4:	009b      	lsls	r3, r3, #2
 802f6b6:	693a      	ldr	r2, [r7, #16]
 802f6b8:	4313      	orrs	r3, r2
 802f6ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 802f6bc:	683b      	ldr	r3, [r7, #0]
 802f6be:	699b      	ldr	r3, [r3, #24]
 802f6c0:	009b      	lsls	r3, r3, #2
 802f6c2:	693a      	ldr	r2, [r7, #16]
 802f6c4:	4313      	orrs	r3, r2
 802f6c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802f6c8:	687b      	ldr	r3, [r7, #4]
 802f6ca:	693a      	ldr	r2, [r7, #16]
 802f6cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802f6ce:	687b      	ldr	r3, [r7, #4]
 802f6d0:	68fa      	ldr	r2, [r7, #12]
 802f6d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 802f6d4:	683b      	ldr	r3, [r7, #0]
 802f6d6:	685a      	ldr	r2, [r3, #4]
 802f6d8:	687b      	ldr	r3, [r7, #4]
 802f6da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802f6dc:	687b      	ldr	r3, [r7, #4]
 802f6de:	697a      	ldr	r2, [r7, #20]
 802f6e0:	621a      	str	r2, [r3, #32]
}
 802f6e2:	bf00      	nop
 802f6e4:	371c      	adds	r7, #28
 802f6e6:	46bd      	mov	sp, r7
 802f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f6ec:	4770      	bx	lr
 802f6ee:	bf00      	nop
 802f6f0:	40010000 	.word	0x40010000
 802f6f4:	40010400 	.word	0x40010400

0802f6f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802f6f8:	b480      	push	{r7}
 802f6fa:	b087      	sub	sp, #28
 802f6fc:	af00      	add	r7, sp, #0
 802f6fe:	6078      	str	r0, [r7, #4]
 802f700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802f702:	687b      	ldr	r3, [r7, #4]
 802f704:	6a1b      	ldr	r3, [r3, #32]
 802f706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802f70a:	687b      	ldr	r3, [r7, #4]
 802f70c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802f70e:	687b      	ldr	r3, [r7, #4]
 802f710:	6a1b      	ldr	r3, [r3, #32]
 802f712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802f714:	687b      	ldr	r3, [r7, #4]
 802f716:	685b      	ldr	r3, [r3, #4]
 802f718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802f71a:	687b      	ldr	r3, [r7, #4]
 802f71c:	69db      	ldr	r3, [r3, #28]
 802f71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 802f720:	68fb      	ldr	r3, [r7, #12]
 802f722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802f726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 802f728:	68fb      	ldr	r3, [r7, #12]
 802f72a:	f023 0303 	bic.w	r3, r3, #3
 802f72e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802f730:	683b      	ldr	r3, [r7, #0]
 802f732:	681b      	ldr	r3, [r3, #0]
 802f734:	68fa      	ldr	r2, [r7, #12]
 802f736:	4313      	orrs	r3, r2
 802f738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802f73a:	697b      	ldr	r3, [r7, #20]
 802f73c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802f740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802f742:	683b      	ldr	r3, [r7, #0]
 802f744:	689b      	ldr	r3, [r3, #8]
 802f746:	021b      	lsls	r3, r3, #8
 802f748:	697a      	ldr	r2, [r7, #20]
 802f74a:	4313      	orrs	r3, r2
 802f74c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802f74e:	687b      	ldr	r3, [r7, #4]
 802f750:	4a21      	ldr	r2, [pc, #132]	; (802f7d8 <TIM_OC3_SetConfig+0xe0>)
 802f752:	4293      	cmp	r3, r2
 802f754:	d003      	beq.n	802f75e <TIM_OC3_SetConfig+0x66>
 802f756:	687b      	ldr	r3, [r7, #4]
 802f758:	4a20      	ldr	r2, [pc, #128]	; (802f7dc <TIM_OC3_SetConfig+0xe4>)
 802f75a:	4293      	cmp	r3, r2
 802f75c:	d10d      	bne.n	802f77a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802f75e:	697b      	ldr	r3, [r7, #20]
 802f760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802f764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802f766:	683b      	ldr	r3, [r7, #0]
 802f768:	68db      	ldr	r3, [r3, #12]
 802f76a:	021b      	lsls	r3, r3, #8
 802f76c:	697a      	ldr	r2, [r7, #20]
 802f76e:	4313      	orrs	r3, r2
 802f770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802f772:	697b      	ldr	r3, [r7, #20]
 802f774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802f778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802f77a:	687b      	ldr	r3, [r7, #4]
 802f77c:	4a16      	ldr	r2, [pc, #88]	; (802f7d8 <TIM_OC3_SetConfig+0xe0>)
 802f77e:	4293      	cmp	r3, r2
 802f780:	d003      	beq.n	802f78a <TIM_OC3_SetConfig+0x92>
 802f782:	687b      	ldr	r3, [r7, #4]
 802f784:	4a15      	ldr	r2, [pc, #84]	; (802f7dc <TIM_OC3_SetConfig+0xe4>)
 802f786:	4293      	cmp	r3, r2
 802f788:	d113      	bne.n	802f7b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802f78a:	693b      	ldr	r3, [r7, #16]
 802f78c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802f790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802f792:	693b      	ldr	r3, [r7, #16]
 802f794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802f798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802f79a:	683b      	ldr	r3, [r7, #0]
 802f79c:	695b      	ldr	r3, [r3, #20]
 802f79e:	011b      	lsls	r3, r3, #4
 802f7a0:	693a      	ldr	r2, [r7, #16]
 802f7a2:	4313      	orrs	r3, r2
 802f7a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802f7a6:	683b      	ldr	r3, [r7, #0]
 802f7a8:	699b      	ldr	r3, [r3, #24]
 802f7aa:	011b      	lsls	r3, r3, #4
 802f7ac:	693a      	ldr	r2, [r7, #16]
 802f7ae:	4313      	orrs	r3, r2
 802f7b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802f7b2:	687b      	ldr	r3, [r7, #4]
 802f7b4:	693a      	ldr	r2, [r7, #16]
 802f7b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802f7b8:	687b      	ldr	r3, [r7, #4]
 802f7ba:	68fa      	ldr	r2, [r7, #12]
 802f7bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802f7be:	683b      	ldr	r3, [r7, #0]
 802f7c0:	685a      	ldr	r2, [r3, #4]
 802f7c2:	687b      	ldr	r3, [r7, #4]
 802f7c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802f7c6:	687b      	ldr	r3, [r7, #4]
 802f7c8:	697a      	ldr	r2, [r7, #20]
 802f7ca:	621a      	str	r2, [r3, #32]
}
 802f7cc:	bf00      	nop
 802f7ce:	371c      	adds	r7, #28
 802f7d0:	46bd      	mov	sp, r7
 802f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f7d6:	4770      	bx	lr
 802f7d8:	40010000 	.word	0x40010000
 802f7dc:	40010400 	.word	0x40010400

0802f7e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802f7e0:	b480      	push	{r7}
 802f7e2:	b087      	sub	sp, #28
 802f7e4:	af00      	add	r7, sp, #0
 802f7e6:	6078      	str	r0, [r7, #4]
 802f7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802f7ea:	687b      	ldr	r3, [r7, #4]
 802f7ec:	6a1b      	ldr	r3, [r3, #32]
 802f7ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802f7f2:	687b      	ldr	r3, [r7, #4]
 802f7f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802f7f6:	687b      	ldr	r3, [r7, #4]
 802f7f8:	6a1b      	ldr	r3, [r3, #32]
 802f7fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802f7fc:	687b      	ldr	r3, [r7, #4]
 802f7fe:	685b      	ldr	r3, [r3, #4]
 802f800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802f802:	687b      	ldr	r3, [r7, #4]
 802f804:	69db      	ldr	r3, [r3, #28]
 802f806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802f808:	68fb      	ldr	r3, [r7, #12]
 802f80a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802f80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802f810:	68fb      	ldr	r3, [r7, #12]
 802f812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802f816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802f818:	683b      	ldr	r3, [r7, #0]
 802f81a:	681b      	ldr	r3, [r3, #0]
 802f81c:	021b      	lsls	r3, r3, #8
 802f81e:	68fa      	ldr	r2, [r7, #12]
 802f820:	4313      	orrs	r3, r2
 802f822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802f824:	693b      	ldr	r3, [r7, #16]
 802f826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802f82a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802f82c:	683b      	ldr	r3, [r7, #0]
 802f82e:	689b      	ldr	r3, [r3, #8]
 802f830:	031b      	lsls	r3, r3, #12
 802f832:	693a      	ldr	r2, [r7, #16]
 802f834:	4313      	orrs	r3, r2
 802f836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802f838:	687b      	ldr	r3, [r7, #4]
 802f83a:	4a12      	ldr	r2, [pc, #72]	; (802f884 <TIM_OC4_SetConfig+0xa4>)
 802f83c:	4293      	cmp	r3, r2
 802f83e:	d003      	beq.n	802f848 <TIM_OC4_SetConfig+0x68>
 802f840:	687b      	ldr	r3, [r7, #4]
 802f842:	4a11      	ldr	r2, [pc, #68]	; (802f888 <TIM_OC4_SetConfig+0xa8>)
 802f844:	4293      	cmp	r3, r2
 802f846:	d109      	bne.n	802f85c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802f848:	697b      	ldr	r3, [r7, #20]
 802f84a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802f84e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802f850:	683b      	ldr	r3, [r7, #0]
 802f852:	695b      	ldr	r3, [r3, #20]
 802f854:	019b      	lsls	r3, r3, #6
 802f856:	697a      	ldr	r2, [r7, #20]
 802f858:	4313      	orrs	r3, r2
 802f85a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802f85c:	687b      	ldr	r3, [r7, #4]
 802f85e:	697a      	ldr	r2, [r7, #20]
 802f860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802f862:	687b      	ldr	r3, [r7, #4]
 802f864:	68fa      	ldr	r2, [r7, #12]
 802f866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802f868:	683b      	ldr	r3, [r7, #0]
 802f86a:	685a      	ldr	r2, [r3, #4]
 802f86c:	687b      	ldr	r3, [r7, #4]
 802f86e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802f870:	687b      	ldr	r3, [r7, #4]
 802f872:	693a      	ldr	r2, [r7, #16]
 802f874:	621a      	str	r2, [r3, #32]
}
 802f876:	bf00      	nop
 802f878:	371c      	adds	r7, #28
 802f87a:	46bd      	mov	sp, r7
 802f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f880:	4770      	bx	lr
 802f882:	bf00      	nop
 802f884:	40010000 	.word	0x40010000
 802f888:	40010400 	.word	0x40010400

0802f88c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802f88c:	b480      	push	{r7}
 802f88e:	b087      	sub	sp, #28
 802f890:	af00      	add	r7, sp, #0
 802f892:	60f8      	str	r0, [r7, #12]
 802f894:	60b9      	str	r1, [r7, #8]
 802f896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802f898:	68fb      	ldr	r3, [r7, #12]
 802f89a:	6a1b      	ldr	r3, [r3, #32]
 802f89c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802f89e:	68fb      	ldr	r3, [r7, #12]
 802f8a0:	6a1b      	ldr	r3, [r3, #32]
 802f8a2:	f023 0201 	bic.w	r2, r3, #1
 802f8a6:	68fb      	ldr	r3, [r7, #12]
 802f8a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802f8aa:	68fb      	ldr	r3, [r7, #12]
 802f8ac:	699b      	ldr	r3, [r3, #24]
 802f8ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802f8b0:	693b      	ldr	r3, [r7, #16]
 802f8b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802f8b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802f8b8:	687b      	ldr	r3, [r7, #4]
 802f8ba:	011b      	lsls	r3, r3, #4
 802f8bc:	693a      	ldr	r2, [r7, #16]
 802f8be:	4313      	orrs	r3, r2
 802f8c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802f8c2:	697b      	ldr	r3, [r7, #20]
 802f8c4:	f023 030a 	bic.w	r3, r3, #10
 802f8c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802f8ca:	697a      	ldr	r2, [r7, #20]
 802f8cc:	68bb      	ldr	r3, [r7, #8]
 802f8ce:	4313      	orrs	r3, r2
 802f8d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802f8d2:	68fb      	ldr	r3, [r7, #12]
 802f8d4:	693a      	ldr	r2, [r7, #16]
 802f8d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802f8d8:	68fb      	ldr	r3, [r7, #12]
 802f8da:	697a      	ldr	r2, [r7, #20]
 802f8dc:	621a      	str	r2, [r3, #32]
}
 802f8de:	bf00      	nop
 802f8e0:	371c      	adds	r7, #28
 802f8e2:	46bd      	mov	sp, r7
 802f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f8e8:	4770      	bx	lr

0802f8ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802f8ea:	b480      	push	{r7}
 802f8ec:	b087      	sub	sp, #28
 802f8ee:	af00      	add	r7, sp, #0
 802f8f0:	60f8      	str	r0, [r7, #12]
 802f8f2:	60b9      	str	r1, [r7, #8]
 802f8f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802f8f6:	68fb      	ldr	r3, [r7, #12]
 802f8f8:	6a1b      	ldr	r3, [r3, #32]
 802f8fa:	f023 0210 	bic.w	r2, r3, #16
 802f8fe:	68fb      	ldr	r3, [r7, #12]
 802f900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802f902:	68fb      	ldr	r3, [r7, #12]
 802f904:	699b      	ldr	r3, [r3, #24]
 802f906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802f908:	68fb      	ldr	r3, [r7, #12]
 802f90a:	6a1b      	ldr	r3, [r3, #32]
 802f90c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802f90e:	697b      	ldr	r3, [r7, #20]
 802f910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802f914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802f916:	687b      	ldr	r3, [r7, #4]
 802f918:	031b      	lsls	r3, r3, #12
 802f91a:	697a      	ldr	r2, [r7, #20]
 802f91c:	4313      	orrs	r3, r2
 802f91e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802f920:	693b      	ldr	r3, [r7, #16]
 802f922:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802f926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802f928:	68bb      	ldr	r3, [r7, #8]
 802f92a:	011b      	lsls	r3, r3, #4
 802f92c:	693a      	ldr	r2, [r7, #16]
 802f92e:	4313      	orrs	r3, r2
 802f930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802f932:	68fb      	ldr	r3, [r7, #12]
 802f934:	697a      	ldr	r2, [r7, #20]
 802f936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802f938:	68fb      	ldr	r3, [r7, #12]
 802f93a:	693a      	ldr	r2, [r7, #16]
 802f93c:	621a      	str	r2, [r3, #32]
}
 802f93e:	bf00      	nop
 802f940:	371c      	adds	r7, #28
 802f942:	46bd      	mov	sp, r7
 802f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f948:	4770      	bx	lr

0802f94a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802f94a:	b480      	push	{r7}
 802f94c:	b085      	sub	sp, #20
 802f94e:	af00      	add	r7, sp, #0
 802f950:	6078      	str	r0, [r7, #4]
 802f952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802f954:	687b      	ldr	r3, [r7, #4]
 802f956:	689b      	ldr	r3, [r3, #8]
 802f958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802f95a:	68fb      	ldr	r3, [r7, #12]
 802f95c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802f960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802f962:	683a      	ldr	r2, [r7, #0]
 802f964:	68fb      	ldr	r3, [r7, #12]
 802f966:	4313      	orrs	r3, r2
 802f968:	f043 0307 	orr.w	r3, r3, #7
 802f96c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802f96e:	687b      	ldr	r3, [r7, #4]
 802f970:	68fa      	ldr	r2, [r7, #12]
 802f972:	609a      	str	r2, [r3, #8]
}
 802f974:	bf00      	nop
 802f976:	3714      	adds	r7, #20
 802f978:	46bd      	mov	sp, r7
 802f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f97e:	4770      	bx	lr

0802f980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802f980:	b480      	push	{r7}
 802f982:	b087      	sub	sp, #28
 802f984:	af00      	add	r7, sp, #0
 802f986:	60f8      	str	r0, [r7, #12]
 802f988:	60b9      	str	r1, [r7, #8]
 802f98a:	607a      	str	r2, [r7, #4]
 802f98c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802f98e:	68fb      	ldr	r3, [r7, #12]
 802f990:	689b      	ldr	r3, [r3, #8]
 802f992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802f994:	697b      	ldr	r3, [r7, #20]
 802f996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802f99a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802f99c:	683b      	ldr	r3, [r7, #0]
 802f99e:	021a      	lsls	r2, r3, #8
 802f9a0:	687b      	ldr	r3, [r7, #4]
 802f9a2:	431a      	orrs	r2, r3
 802f9a4:	68bb      	ldr	r3, [r7, #8]
 802f9a6:	4313      	orrs	r3, r2
 802f9a8:	697a      	ldr	r2, [r7, #20]
 802f9aa:	4313      	orrs	r3, r2
 802f9ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802f9ae:	68fb      	ldr	r3, [r7, #12]
 802f9b0:	697a      	ldr	r2, [r7, #20]
 802f9b2:	609a      	str	r2, [r3, #8]
}
 802f9b4:	bf00      	nop
 802f9b6:	371c      	adds	r7, #28
 802f9b8:	46bd      	mov	sp, r7
 802f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f9be:	4770      	bx	lr

0802f9c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802f9c0:	b480      	push	{r7}
 802f9c2:	b087      	sub	sp, #28
 802f9c4:	af00      	add	r7, sp, #0
 802f9c6:	60f8      	str	r0, [r7, #12]
 802f9c8:	60b9      	str	r1, [r7, #8]
 802f9ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802f9cc:	68bb      	ldr	r3, [r7, #8]
 802f9ce:	f003 031f 	and.w	r3, r3, #31
 802f9d2:	2201      	movs	r2, #1
 802f9d4:	fa02 f303 	lsl.w	r3, r2, r3
 802f9d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802f9da:	68fb      	ldr	r3, [r7, #12]
 802f9dc:	6a1a      	ldr	r2, [r3, #32]
 802f9de:	697b      	ldr	r3, [r7, #20]
 802f9e0:	43db      	mvns	r3, r3
 802f9e2:	401a      	ands	r2, r3
 802f9e4:	68fb      	ldr	r3, [r7, #12]
 802f9e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802f9e8:	68fb      	ldr	r3, [r7, #12]
 802f9ea:	6a1a      	ldr	r2, [r3, #32]
 802f9ec:	68bb      	ldr	r3, [r7, #8]
 802f9ee:	f003 031f 	and.w	r3, r3, #31
 802f9f2:	6879      	ldr	r1, [r7, #4]
 802f9f4:	fa01 f303 	lsl.w	r3, r1, r3
 802f9f8:	431a      	orrs	r2, r3
 802f9fa:	68fb      	ldr	r3, [r7, #12]
 802f9fc:	621a      	str	r2, [r3, #32]
}
 802f9fe:	bf00      	nop
 802fa00:	371c      	adds	r7, #28
 802fa02:	46bd      	mov	sp, r7
 802fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fa08:	4770      	bx	lr
	...

0802fa0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802fa0c:	b480      	push	{r7}
 802fa0e:	b085      	sub	sp, #20
 802fa10:	af00      	add	r7, sp, #0
 802fa12:	6078      	str	r0, [r7, #4]
 802fa14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802fa16:	687b      	ldr	r3, [r7, #4]
 802fa18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802fa1c:	2b01      	cmp	r3, #1
 802fa1e:	d101      	bne.n	802fa24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802fa20:	2302      	movs	r3, #2
 802fa22:	e05a      	b.n	802fada <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802fa24:	687b      	ldr	r3, [r7, #4]
 802fa26:	2201      	movs	r2, #1
 802fa28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802fa2c:	687b      	ldr	r3, [r7, #4]
 802fa2e:	2202      	movs	r2, #2
 802fa30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802fa34:	687b      	ldr	r3, [r7, #4]
 802fa36:	681b      	ldr	r3, [r3, #0]
 802fa38:	685b      	ldr	r3, [r3, #4]
 802fa3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802fa3c:	687b      	ldr	r3, [r7, #4]
 802fa3e:	681b      	ldr	r3, [r3, #0]
 802fa40:	689b      	ldr	r3, [r3, #8]
 802fa42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802fa44:	68fb      	ldr	r3, [r7, #12]
 802fa46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802fa4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802fa4c:	683b      	ldr	r3, [r7, #0]
 802fa4e:	681b      	ldr	r3, [r3, #0]
 802fa50:	68fa      	ldr	r2, [r7, #12]
 802fa52:	4313      	orrs	r3, r2
 802fa54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802fa56:	687b      	ldr	r3, [r7, #4]
 802fa58:	681b      	ldr	r3, [r3, #0]
 802fa5a:	68fa      	ldr	r2, [r7, #12]
 802fa5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802fa5e:	687b      	ldr	r3, [r7, #4]
 802fa60:	681b      	ldr	r3, [r3, #0]
 802fa62:	4a21      	ldr	r2, [pc, #132]	; (802fae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802fa64:	4293      	cmp	r3, r2
 802fa66:	d022      	beq.n	802faae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802fa68:	687b      	ldr	r3, [r7, #4]
 802fa6a:	681b      	ldr	r3, [r3, #0]
 802fa6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802fa70:	d01d      	beq.n	802faae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802fa72:	687b      	ldr	r3, [r7, #4]
 802fa74:	681b      	ldr	r3, [r3, #0]
 802fa76:	4a1d      	ldr	r2, [pc, #116]	; (802faec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802fa78:	4293      	cmp	r3, r2
 802fa7a:	d018      	beq.n	802faae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802fa7c:	687b      	ldr	r3, [r7, #4]
 802fa7e:	681b      	ldr	r3, [r3, #0]
 802fa80:	4a1b      	ldr	r2, [pc, #108]	; (802faf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802fa82:	4293      	cmp	r3, r2
 802fa84:	d013      	beq.n	802faae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802fa86:	687b      	ldr	r3, [r7, #4]
 802fa88:	681b      	ldr	r3, [r3, #0]
 802fa8a:	4a1a      	ldr	r2, [pc, #104]	; (802faf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802fa8c:	4293      	cmp	r3, r2
 802fa8e:	d00e      	beq.n	802faae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802fa90:	687b      	ldr	r3, [r7, #4]
 802fa92:	681b      	ldr	r3, [r3, #0]
 802fa94:	4a18      	ldr	r2, [pc, #96]	; (802faf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802fa96:	4293      	cmp	r3, r2
 802fa98:	d009      	beq.n	802faae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802fa9a:	687b      	ldr	r3, [r7, #4]
 802fa9c:	681b      	ldr	r3, [r3, #0]
 802fa9e:	4a17      	ldr	r2, [pc, #92]	; (802fafc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802faa0:	4293      	cmp	r3, r2
 802faa2:	d004      	beq.n	802faae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802faa4:	687b      	ldr	r3, [r7, #4]
 802faa6:	681b      	ldr	r3, [r3, #0]
 802faa8:	4a15      	ldr	r2, [pc, #84]	; (802fb00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802faaa:	4293      	cmp	r3, r2
 802faac:	d10c      	bne.n	802fac8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802faae:	68bb      	ldr	r3, [r7, #8]
 802fab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802fab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802fab6:	683b      	ldr	r3, [r7, #0]
 802fab8:	685b      	ldr	r3, [r3, #4]
 802faba:	68ba      	ldr	r2, [r7, #8]
 802fabc:	4313      	orrs	r3, r2
 802fabe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802fac0:	687b      	ldr	r3, [r7, #4]
 802fac2:	681b      	ldr	r3, [r3, #0]
 802fac4:	68ba      	ldr	r2, [r7, #8]
 802fac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802fac8:	687b      	ldr	r3, [r7, #4]
 802faca:	2201      	movs	r2, #1
 802facc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802fad0:	687b      	ldr	r3, [r7, #4]
 802fad2:	2200      	movs	r2, #0
 802fad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802fad8:	2300      	movs	r3, #0
}
 802fada:	4618      	mov	r0, r3
 802fadc:	3714      	adds	r7, #20
 802fade:	46bd      	mov	sp, r7
 802fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fae4:	4770      	bx	lr
 802fae6:	bf00      	nop
 802fae8:	40010000 	.word	0x40010000
 802faec:	40000400 	.word	0x40000400
 802faf0:	40000800 	.word	0x40000800
 802faf4:	40000c00 	.word	0x40000c00
 802faf8:	40010400 	.word	0x40010400
 802fafc:	40014000 	.word	0x40014000
 802fb00:	40001800 	.word	0x40001800

0802fb04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802fb04:	b480      	push	{r7}
 802fb06:	b083      	sub	sp, #12
 802fb08:	af00      	add	r7, sp, #0
 802fb0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802fb0c:	bf00      	nop
 802fb0e:	370c      	adds	r7, #12
 802fb10:	46bd      	mov	sp, r7
 802fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fb16:	4770      	bx	lr

0802fb18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802fb18:	b480      	push	{r7}
 802fb1a:	b083      	sub	sp, #12
 802fb1c:	af00      	add	r7, sp, #0
 802fb1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802fb20:	bf00      	nop
 802fb22:	370c      	adds	r7, #12
 802fb24:	46bd      	mov	sp, r7
 802fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fb2a:	4770      	bx	lr

0802fb2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802fb2c:	b580      	push	{r7, lr}
 802fb2e:	b082      	sub	sp, #8
 802fb30:	af00      	add	r7, sp, #0
 802fb32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802fb34:	687b      	ldr	r3, [r7, #4]
 802fb36:	2b00      	cmp	r3, #0
 802fb38:	d101      	bne.n	802fb3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802fb3a:	2301      	movs	r3, #1
 802fb3c:	e03f      	b.n	802fbbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802fb3e:	687b      	ldr	r3, [r7, #4]
 802fb40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802fb44:	b2db      	uxtb	r3, r3
 802fb46:	2b00      	cmp	r3, #0
 802fb48:	d106      	bne.n	802fb58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802fb4a:	687b      	ldr	r3, [r7, #4]
 802fb4c:	2200      	movs	r2, #0
 802fb4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802fb52:	6878      	ldr	r0, [r7, #4]
 802fb54:	f009 f9ae 	bl	8038eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802fb58:	687b      	ldr	r3, [r7, #4]
 802fb5a:	2224      	movs	r2, #36	; 0x24
 802fb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802fb60:	687b      	ldr	r3, [r7, #4]
 802fb62:	681b      	ldr	r3, [r3, #0]
 802fb64:	68da      	ldr	r2, [r3, #12]
 802fb66:	687b      	ldr	r3, [r7, #4]
 802fb68:	681b      	ldr	r3, [r3, #0]
 802fb6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802fb6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802fb70:	6878      	ldr	r0, [r7, #4]
 802fb72:	f001 fb5f 	bl	8031234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802fb76:	687b      	ldr	r3, [r7, #4]
 802fb78:	681b      	ldr	r3, [r3, #0]
 802fb7a:	691a      	ldr	r2, [r3, #16]
 802fb7c:	687b      	ldr	r3, [r7, #4]
 802fb7e:	681b      	ldr	r3, [r3, #0]
 802fb80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 802fb84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802fb86:	687b      	ldr	r3, [r7, #4]
 802fb88:	681b      	ldr	r3, [r3, #0]
 802fb8a:	695a      	ldr	r2, [r3, #20]
 802fb8c:	687b      	ldr	r3, [r7, #4]
 802fb8e:	681b      	ldr	r3, [r3, #0]
 802fb90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 802fb94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802fb96:	687b      	ldr	r3, [r7, #4]
 802fb98:	681b      	ldr	r3, [r3, #0]
 802fb9a:	68da      	ldr	r2, [r3, #12]
 802fb9c:	687b      	ldr	r3, [r7, #4]
 802fb9e:	681b      	ldr	r3, [r3, #0]
 802fba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802fba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802fba6:	687b      	ldr	r3, [r7, #4]
 802fba8:	2200      	movs	r2, #0
 802fbaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 802fbac:	687b      	ldr	r3, [r7, #4]
 802fbae:	2220      	movs	r2, #32
 802fbb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 802fbb4:	687b      	ldr	r3, [r7, #4]
 802fbb6:	2220      	movs	r2, #32
 802fbb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802fbbc:	2300      	movs	r3, #0
}
 802fbbe:	4618      	mov	r0, r3
 802fbc0:	3708      	adds	r7, #8
 802fbc2:	46bd      	mov	sp, r7
 802fbc4:	bd80      	pop	{r7, pc}

0802fbc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802fbc6:	b580      	push	{r7, lr}
 802fbc8:	b08a      	sub	sp, #40	; 0x28
 802fbca:	af02      	add	r7, sp, #8
 802fbcc:	60f8      	str	r0, [r7, #12]
 802fbce:	60b9      	str	r1, [r7, #8]
 802fbd0:	603b      	str	r3, [r7, #0]
 802fbd2:	4613      	mov	r3, r2
 802fbd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802fbd6:	2300      	movs	r3, #0
 802fbd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802fbda:	68fb      	ldr	r3, [r7, #12]
 802fbdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802fbe0:	b2db      	uxtb	r3, r3
 802fbe2:	2b20      	cmp	r3, #32
 802fbe4:	d17c      	bne.n	802fce0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 802fbe6:	68bb      	ldr	r3, [r7, #8]
 802fbe8:	2b00      	cmp	r3, #0
 802fbea:	d002      	beq.n	802fbf2 <HAL_UART_Transmit+0x2c>
 802fbec:	88fb      	ldrh	r3, [r7, #6]
 802fbee:	2b00      	cmp	r3, #0
 802fbf0:	d101      	bne.n	802fbf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802fbf2:	2301      	movs	r3, #1
 802fbf4:	e075      	b.n	802fce2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802fbf6:	68fb      	ldr	r3, [r7, #12]
 802fbf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802fbfc:	2b01      	cmp	r3, #1
 802fbfe:	d101      	bne.n	802fc04 <HAL_UART_Transmit+0x3e>
 802fc00:	2302      	movs	r3, #2
 802fc02:	e06e      	b.n	802fce2 <HAL_UART_Transmit+0x11c>
 802fc04:	68fb      	ldr	r3, [r7, #12]
 802fc06:	2201      	movs	r2, #1
 802fc08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802fc0c:	68fb      	ldr	r3, [r7, #12]
 802fc0e:	2200      	movs	r2, #0
 802fc10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802fc12:	68fb      	ldr	r3, [r7, #12]
 802fc14:	2221      	movs	r2, #33	; 0x21
 802fc16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802fc1a:	f7f8 fc7f 	bl	802851c <HAL_GetTick>
 802fc1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802fc20:	68fb      	ldr	r3, [r7, #12]
 802fc22:	88fa      	ldrh	r2, [r7, #6]
 802fc24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802fc26:	68fb      	ldr	r3, [r7, #12]
 802fc28:	88fa      	ldrh	r2, [r7, #6]
 802fc2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802fc2c:	68fb      	ldr	r3, [r7, #12]
 802fc2e:	689b      	ldr	r3, [r3, #8]
 802fc30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802fc34:	d108      	bne.n	802fc48 <HAL_UART_Transmit+0x82>
 802fc36:	68fb      	ldr	r3, [r7, #12]
 802fc38:	691b      	ldr	r3, [r3, #16]
 802fc3a:	2b00      	cmp	r3, #0
 802fc3c:	d104      	bne.n	802fc48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802fc3e:	2300      	movs	r3, #0
 802fc40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802fc42:	68bb      	ldr	r3, [r7, #8]
 802fc44:	61bb      	str	r3, [r7, #24]
 802fc46:	e003      	b.n	802fc50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 802fc48:	68bb      	ldr	r3, [r7, #8]
 802fc4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802fc4c:	2300      	movs	r3, #0
 802fc4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802fc50:	68fb      	ldr	r3, [r7, #12]
 802fc52:	2200      	movs	r2, #0
 802fc54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 802fc58:	e02a      	b.n	802fcb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802fc5a:	683b      	ldr	r3, [r7, #0]
 802fc5c:	9300      	str	r3, [sp, #0]
 802fc5e:	697b      	ldr	r3, [r7, #20]
 802fc60:	2200      	movs	r2, #0
 802fc62:	2180      	movs	r1, #128	; 0x80
 802fc64:	68f8      	ldr	r0, [r7, #12]
 802fc66:	f000 ff78 	bl	8030b5a <UART_WaitOnFlagUntilTimeout>
 802fc6a:	4603      	mov	r3, r0
 802fc6c:	2b00      	cmp	r3, #0
 802fc6e:	d001      	beq.n	802fc74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 802fc70:	2303      	movs	r3, #3
 802fc72:	e036      	b.n	802fce2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 802fc74:	69fb      	ldr	r3, [r7, #28]
 802fc76:	2b00      	cmp	r3, #0
 802fc78:	d10b      	bne.n	802fc92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802fc7a:	69bb      	ldr	r3, [r7, #24]
 802fc7c:	881b      	ldrh	r3, [r3, #0]
 802fc7e:	461a      	mov	r2, r3
 802fc80:	68fb      	ldr	r3, [r7, #12]
 802fc82:	681b      	ldr	r3, [r3, #0]
 802fc84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802fc88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802fc8a:	69bb      	ldr	r3, [r7, #24]
 802fc8c:	3302      	adds	r3, #2
 802fc8e:	61bb      	str	r3, [r7, #24]
 802fc90:	e007      	b.n	802fca2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802fc92:	69fb      	ldr	r3, [r7, #28]
 802fc94:	781a      	ldrb	r2, [r3, #0]
 802fc96:	68fb      	ldr	r3, [r7, #12]
 802fc98:	681b      	ldr	r3, [r3, #0]
 802fc9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802fc9c:	69fb      	ldr	r3, [r7, #28]
 802fc9e:	3301      	adds	r3, #1
 802fca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802fca2:	68fb      	ldr	r3, [r7, #12]
 802fca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802fca6:	b29b      	uxth	r3, r3
 802fca8:	3b01      	subs	r3, #1
 802fcaa:	b29a      	uxth	r2, r3
 802fcac:	68fb      	ldr	r3, [r7, #12]
 802fcae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 802fcb0:	68fb      	ldr	r3, [r7, #12]
 802fcb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802fcb4:	b29b      	uxth	r3, r3
 802fcb6:	2b00      	cmp	r3, #0
 802fcb8:	d1cf      	bne.n	802fc5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802fcba:	683b      	ldr	r3, [r7, #0]
 802fcbc:	9300      	str	r3, [sp, #0]
 802fcbe:	697b      	ldr	r3, [r7, #20]
 802fcc0:	2200      	movs	r2, #0
 802fcc2:	2140      	movs	r1, #64	; 0x40
 802fcc4:	68f8      	ldr	r0, [r7, #12]
 802fcc6:	f000 ff48 	bl	8030b5a <UART_WaitOnFlagUntilTimeout>
 802fcca:	4603      	mov	r3, r0
 802fccc:	2b00      	cmp	r3, #0
 802fcce:	d001      	beq.n	802fcd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 802fcd0:	2303      	movs	r3, #3
 802fcd2:	e006      	b.n	802fce2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802fcd4:	68fb      	ldr	r3, [r7, #12]
 802fcd6:	2220      	movs	r2, #32
 802fcd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 802fcdc:	2300      	movs	r3, #0
 802fcde:	e000      	b.n	802fce2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 802fce0:	2302      	movs	r3, #2
  }
}
 802fce2:	4618      	mov	r0, r3
 802fce4:	3720      	adds	r7, #32
 802fce6:	46bd      	mov	sp, r7
 802fce8:	bd80      	pop	{r7, pc}

0802fcea <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 802fcea:	b480      	push	{r7}
 802fcec:	b085      	sub	sp, #20
 802fcee:	af00      	add	r7, sp, #0
 802fcf0:	60f8      	str	r0, [r7, #12]
 802fcf2:	60b9      	str	r1, [r7, #8]
 802fcf4:	4613      	mov	r3, r2
 802fcf6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802fcf8:	68fb      	ldr	r3, [r7, #12]
 802fcfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802fcfe:	b2db      	uxtb	r3, r3
 802fd00:	2b20      	cmp	r3, #32
 802fd02:	d130      	bne.n	802fd66 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 802fd04:	68bb      	ldr	r3, [r7, #8]
 802fd06:	2b00      	cmp	r3, #0
 802fd08:	d002      	beq.n	802fd10 <HAL_UART_Transmit_IT+0x26>
 802fd0a:	88fb      	ldrh	r3, [r7, #6]
 802fd0c:	2b00      	cmp	r3, #0
 802fd0e:	d101      	bne.n	802fd14 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 802fd10:	2301      	movs	r3, #1
 802fd12:	e029      	b.n	802fd68 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802fd14:	68fb      	ldr	r3, [r7, #12]
 802fd16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802fd1a:	2b01      	cmp	r3, #1
 802fd1c:	d101      	bne.n	802fd22 <HAL_UART_Transmit_IT+0x38>
 802fd1e:	2302      	movs	r3, #2
 802fd20:	e022      	b.n	802fd68 <HAL_UART_Transmit_IT+0x7e>
 802fd22:	68fb      	ldr	r3, [r7, #12]
 802fd24:	2201      	movs	r2, #1
 802fd26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 802fd2a:	68fb      	ldr	r3, [r7, #12]
 802fd2c:	68ba      	ldr	r2, [r7, #8]
 802fd2e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 802fd30:	68fb      	ldr	r3, [r7, #12]
 802fd32:	88fa      	ldrh	r2, [r7, #6]
 802fd34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802fd36:	68fb      	ldr	r3, [r7, #12]
 802fd38:	88fa      	ldrh	r2, [r7, #6]
 802fd3a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802fd3c:	68fb      	ldr	r3, [r7, #12]
 802fd3e:	2200      	movs	r2, #0
 802fd40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802fd42:	68fb      	ldr	r3, [r7, #12]
 802fd44:	2221      	movs	r2, #33	; 0x21
 802fd46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802fd4a:	68fb      	ldr	r3, [r7, #12]
 802fd4c:	2200      	movs	r2, #0
 802fd4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 802fd52:	68fb      	ldr	r3, [r7, #12]
 802fd54:	681b      	ldr	r3, [r3, #0]
 802fd56:	68da      	ldr	r2, [r3, #12]
 802fd58:	68fb      	ldr	r3, [r7, #12]
 802fd5a:	681b      	ldr	r3, [r3, #0]
 802fd5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802fd60:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 802fd62:	2300      	movs	r3, #0
 802fd64:	e000      	b.n	802fd68 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 802fd66:	2302      	movs	r3, #2
  }
}
 802fd68:	4618      	mov	r0, r3
 802fd6a:	3714      	adds	r7, #20
 802fd6c:	46bd      	mov	sp, r7
 802fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802fd72:	4770      	bx	lr

0802fd74 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802fd74:	b580      	push	{r7, lr}
 802fd76:	b084      	sub	sp, #16
 802fd78:	af00      	add	r7, sp, #0
 802fd7a:	60f8      	str	r0, [r7, #12]
 802fd7c:	60b9      	str	r1, [r7, #8]
 802fd7e:	4613      	mov	r3, r2
 802fd80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802fd82:	68fb      	ldr	r3, [r7, #12]
 802fd84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802fd88:	b2db      	uxtb	r3, r3
 802fd8a:	2b20      	cmp	r3, #32
 802fd8c:	d11d      	bne.n	802fdca <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 802fd8e:	68bb      	ldr	r3, [r7, #8]
 802fd90:	2b00      	cmp	r3, #0
 802fd92:	d002      	beq.n	802fd9a <HAL_UART_Receive_IT+0x26>
 802fd94:	88fb      	ldrh	r3, [r7, #6]
 802fd96:	2b00      	cmp	r3, #0
 802fd98:	d101      	bne.n	802fd9e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 802fd9a:	2301      	movs	r3, #1
 802fd9c:	e016      	b.n	802fdcc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802fd9e:	68fb      	ldr	r3, [r7, #12]
 802fda0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802fda4:	2b01      	cmp	r3, #1
 802fda6:	d101      	bne.n	802fdac <HAL_UART_Receive_IT+0x38>
 802fda8:	2302      	movs	r3, #2
 802fdaa:	e00f      	b.n	802fdcc <HAL_UART_Receive_IT+0x58>
 802fdac:	68fb      	ldr	r3, [r7, #12]
 802fdae:	2201      	movs	r2, #1
 802fdb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802fdb4:	68fb      	ldr	r3, [r7, #12]
 802fdb6:	2200      	movs	r2, #0
 802fdb8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 802fdba:	88fb      	ldrh	r3, [r7, #6]
 802fdbc:	461a      	mov	r2, r3
 802fdbe:	68b9      	ldr	r1, [r7, #8]
 802fdc0:	68f8      	ldr	r0, [r7, #12]
 802fdc2:	f000 ff38 	bl	8030c36 <UART_Start_Receive_IT>
 802fdc6:	4603      	mov	r3, r0
 802fdc8:	e000      	b.n	802fdcc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 802fdca:	2302      	movs	r3, #2
  }
}
 802fdcc:	4618      	mov	r0, r3
 802fdce:	3710      	adds	r7, #16
 802fdd0:	46bd      	mov	sp, r7
 802fdd2:	bd80      	pop	{r7, pc}

0802fdd4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 802fdd4:	b580      	push	{r7, lr}
 802fdd6:	b08c      	sub	sp, #48	; 0x30
 802fdd8:	af00      	add	r7, sp, #0
 802fdda:	60f8      	str	r0, [r7, #12]
 802fddc:	60b9      	str	r1, [r7, #8]
 802fdde:	4613      	mov	r3, r2
 802fde0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802fde2:	68fb      	ldr	r3, [r7, #12]
 802fde4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802fde8:	b2db      	uxtb	r3, r3
 802fdea:	2b20      	cmp	r3, #32
 802fdec:	d165      	bne.n	802feba <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 802fdee:	68bb      	ldr	r3, [r7, #8]
 802fdf0:	2b00      	cmp	r3, #0
 802fdf2:	d002      	beq.n	802fdfa <HAL_UART_Transmit_DMA+0x26>
 802fdf4:	88fb      	ldrh	r3, [r7, #6]
 802fdf6:	2b00      	cmp	r3, #0
 802fdf8:	d101      	bne.n	802fdfe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 802fdfa:	2301      	movs	r3, #1
 802fdfc:	e05e      	b.n	802febc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802fdfe:	68fb      	ldr	r3, [r7, #12]
 802fe00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802fe04:	2b01      	cmp	r3, #1
 802fe06:	d101      	bne.n	802fe0c <HAL_UART_Transmit_DMA+0x38>
 802fe08:	2302      	movs	r3, #2
 802fe0a:	e057      	b.n	802febc <HAL_UART_Transmit_DMA+0xe8>
 802fe0c:	68fb      	ldr	r3, [r7, #12]
 802fe0e:	2201      	movs	r2, #1
 802fe10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 802fe14:	68ba      	ldr	r2, [r7, #8]
 802fe16:	68fb      	ldr	r3, [r7, #12]
 802fe18:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 802fe1a:	68fb      	ldr	r3, [r7, #12]
 802fe1c:	88fa      	ldrh	r2, [r7, #6]
 802fe1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802fe20:	68fb      	ldr	r3, [r7, #12]
 802fe22:	88fa      	ldrh	r2, [r7, #6]
 802fe24:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802fe26:	68fb      	ldr	r3, [r7, #12]
 802fe28:	2200      	movs	r2, #0
 802fe2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802fe2c:	68fb      	ldr	r3, [r7, #12]
 802fe2e:	2221      	movs	r2, #33	; 0x21
 802fe30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 802fe34:	68fb      	ldr	r3, [r7, #12]
 802fe36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802fe38:	4a22      	ldr	r2, [pc, #136]	; (802fec4 <HAL_UART_Transmit_DMA+0xf0>)
 802fe3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 802fe3c:	68fb      	ldr	r3, [r7, #12]
 802fe3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802fe40:	4a21      	ldr	r2, [pc, #132]	; (802fec8 <HAL_UART_Transmit_DMA+0xf4>)
 802fe42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 802fe44:	68fb      	ldr	r3, [r7, #12]
 802fe46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802fe48:	4a20      	ldr	r2, [pc, #128]	; (802fecc <HAL_UART_Transmit_DMA+0xf8>)
 802fe4a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 802fe4c:	68fb      	ldr	r3, [r7, #12]
 802fe4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802fe50:	2200      	movs	r2, #0
 802fe52:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 802fe54:	f107 0308 	add.w	r3, r7, #8
 802fe58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 802fe5a:	68fb      	ldr	r3, [r7, #12]
 802fe5c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 802fe5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802fe60:	6819      	ldr	r1, [r3, #0]
 802fe62:	68fb      	ldr	r3, [r7, #12]
 802fe64:	681b      	ldr	r3, [r3, #0]
 802fe66:	3304      	adds	r3, #4
 802fe68:	461a      	mov	r2, r3
 802fe6a:	88fb      	ldrh	r3, [r7, #6]
 802fe6c:	f7f9 fc52 	bl	8029714 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 802fe70:	68fb      	ldr	r3, [r7, #12]
 802fe72:	681b      	ldr	r3, [r3, #0]
 802fe74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802fe78:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802fe7a:	68fb      	ldr	r3, [r7, #12]
 802fe7c:	2200      	movs	r2, #0
 802fe7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 802fe82:	68fb      	ldr	r3, [r7, #12]
 802fe84:	681b      	ldr	r3, [r3, #0]
 802fe86:	3314      	adds	r3, #20
 802fe88:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802fe8a:	69bb      	ldr	r3, [r7, #24]
 802fe8c:	e853 3f00 	ldrex	r3, [r3]
 802fe90:	617b      	str	r3, [r7, #20]
   return(result);
 802fe92:	697b      	ldr	r3, [r7, #20]
 802fe94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802fe98:	62bb      	str	r3, [r7, #40]	; 0x28
 802fe9a:	68fb      	ldr	r3, [r7, #12]
 802fe9c:	681b      	ldr	r3, [r3, #0]
 802fe9e:	3314      	adds	r3, #20
 802fea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802fea2:	627a      	str	r2, [r7, #36]	; 0x24
 802fea4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802fea6:	6a39      	ldr	r1, [r7, #32]
 802fea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802feaa:	e841 2300 	strex	r3, r2, [r1]
 802feae:	61fb      	str	r3, [r7, #28]
   return(result);
 802feb0:	69fb      	ldr	r3, [r7, #28]
 802feb2:	2b00      	cmp	r3, #0
 802feb4:	d1e5      	bne.n	802fe82 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 802feb6:	2300      	movs	r3, #0
 802feb8:	e000      	b.n	802febc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 802feba:	2302      	movs	r3, #2
  }
}
 802febc:	4618      	mov	r0, r3
 802febe:	3730      	adds	r7, #48	; 0x30
 802fec0:	46bd      	mov	sp, r7
 802fec2:	bd80      	pop	{r7, pc}
 802fec4:	080308b5 	.word	0x080308b5
 802fec8:	0803094f 	.word	0x0803094f
 802fecc:	08030ac7 	.word	0x08030ac7

0802fed0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802fed0:	b580      	push	{r7, lr}
 802fed2:	b084      	sub	sp, #16
 802fed4:	af00      	add	r7, sp, #0
 802fed6:	60f8      	str	r0, [r7, #12]
 802fed8:	60b9      	str	r1, [r7, #8]
 802feda:	4613      	mov	r3, r2
 802fedc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802fede:	68fb      	ldr	r3, [r7, #12]
 802fee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802fee4:	b2db      	uxtb	r3, r3
 802fee6:	2b20      	cmp	r3, #32
 802fee8:	d11d      	bne.n	802ff26 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 802feea:	68bb      	ldr	r3, [r7, #8]
 802feec:	2b00      	cmp	r3, #0
 802feee:	d002      	beq.n	802fef6 <HAL_UART_Receive_DMA+0x26>
 802fef0:	88fb      	ldrh	r3, [r7, #6]
 802fef2:	2b00      	cmp	r3, #0
 802fef4:	d101      	bne.n	802fefa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 802fef6:	2301      	movs	r3, #1
 802fef8:	e016      	b.n	802ff28 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802fefa:	68fb      	ldr	r3, [r7, #12]
 802fefc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802ff00:	2b01      	cmp	r3, #1
 802ff02:	d101      	bne.n	802ff08 <HAL_UART_Receive_DMA+0x38>
 802ff04:	2302      	movs	r3, #2
 802ff06:	e00f      	b.n	802ff28 <HAL_UART_Receive_DMA+0x58>
 802ff08:	68fb      	ldr	r3, [r7, #12]
 802ff0a:	2201      	movs	r2, #1
 802ff0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802ff10:	68fb      	ldr	r3, [r7, #12]
 802ff12:	2200      	movs	r2, #0
 802ff14:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 802ff16:	88fb      	ldrh	r3, [r7, #6]
 802ff18:	461a      	mov	r2, r3
 802ff1a:	68b9      	ldr	r1, [r7, #8]
 802ff1c:	68f8      	ldr	r0, [r7, #12]
 802ff1e:	f000 fec9 	bl	8030cb4 <UART_Start_Receive_DMA>
 802ff22:	4603      	mov	r3, r0
 802ff24:	e000      	b.n	802ff28 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 802ff26:	2302      	movs	r3, #2
  }
}
 802ff28:	4618      	mov	r0, r3
 802ff2a:	3710      	adds	r7, #16
 802ff2c:	46bd      	mov	sp, r7
 802ff2e:	bd80      	pop	{r7, pc}

0802ff30 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 802ff30:	b580      	push	{r7, lr}
 802ff32:	b0a0      	sub	sp, #128	; 0x80
 802ff34:	af00      	add	r7, sp, #0
 802ff36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 802ff38:	687b      	ldr	r3, [r7, #4]
 802ff3a:	681b      	ldr	r3, [r3, #0]
 802ff3c:	330c      	adds	r3, #12
 802ff3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ff40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802ff42:	e853 3f00 	ldrex	r3, [r3]
 802ff46:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 802ff48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802ff4a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 802ff4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 802ff50:	687b      	ldr	r3, [r7, #4]
 802ff52:	681b      	ldr	r3, [r3, #0]
 802ff54:	330c      	adds	r3, #12
 802ff56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 802ff58:	66ba      	str	r2, [r7, #104]	; 0x68
 802ff5a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ff5c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 802ff5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 802ff60:	e841 2300 	strex	r3, r2, [r1]
 802ff64:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 802ff66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802ff68:	2b00      	cmp	r3, #0
 802ff6a:	d1e5      	bne.n	802ff38 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802ff6c:	687b      	ldr	r3, [r7, #4]
 802ff6e:	681b      	ldr	r3, [r3, #0]
 802ff70:	3314      	adds	r3, #20
 802ff72:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ff74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ff76:	e853 3f00 	ldrex	r3, [r3]
 802ff7a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 802ff7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802ff7e:	f023 0301 	bic.w	r3, r3, #1
 802ff82:	67bb      	str	r3, [r7, #120]	; 0x78
 802ff84:	687b      	ldr	r3, [r7, #4]
 802ff86:	681b      	ldr	r3, [r3, #0]
 802ff88:	3314      	adds	r3, #20
 802ff8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802ff8c:	657a      	str	r2, [r7, #84]	; 0x54
 802ff8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ff90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802ff92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ff94:	e841 2300 	strex	r3, r2, [r1]
 802ff98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 802ff9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ff9c:	2b00      	cmp	r3, #0
 802ff9e:	d1e5      	bne.n	802ff6c <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802ffa0:	687b      	ldr	r3, [r7, #4]
 802ffa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ffa4:	2b01      	cmp	r3, #1
 802ffa6:	d119      	bne.n	802ffdc <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 802ffa8:	687b      	ldr	r3, [r7, #4]
 802ffaa:	681b      	ldr	r3, [r3, #0]
 802ffac:	330c      	adds	r3, #12
 802ffae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802ffb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802ffb2:	e853 3f00 	ldrex	r3, [r3]
 802ffb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802ffb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802ffba:	f023 0310 	bic.w	r3, r3, #16
 802ffbe:	677b      	str	r3, [r7, #116]	; 0x74
 802ffc0:	687b      	ldr	r3, [r7, #4]
 802ffc2:	681b      	ldr	r3, [r3, #0]
 802ffc4:	330c      	adds	r3, #12
 802ffc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 802ffc8:	643a      	str	r2, [r7, #64]	; 0x40
 802ffca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802ffcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802ffce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802ffd0:	e841 2300 	strex	r3, r2, [r1]
 802ffd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802ffd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802ffd8:	2b00      	cmp	r3, #0
 802ffda:	d1e5      	bne.n	802ffa8 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 802ffdc:	687b      	ldr	r3, [r7, #4]
 802ffde:	681b      	ldr	r3, [r3, #0]
 802ffe0:	695b      	ldr	r3, [r3, #20]
 802ffe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ffe6:	2b80      	cmp	r3, #128	; 0x80
 802ffe8:	d136      	bne.n	8030058 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 802ffea:	687b      	ldr	r3, [r7, #4]
 802ffec:	681b      	ldr	r3, [r3, #0]
 802ffee:	3314      	adds	r3, #20
 802fff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802fff2:	6a3b      	ldr	r3, [r7, #32]
 802fff4:	e853 3f00 	ldrex	r3, [r3]
 802fff8:	61fb      	str	r3, [r7, #28]
   return(result);
 802fffa:	69fb      	ldr	r3, [r7, #28]
 802fffc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8030000:	673b      	str	r3, [r7, #112]	; 0x70
 8030002:	687b      	ldr	r3, [r7, #4]
 8030004:	681b      	ldr	r3, [r3, #0]
 8030006:	3314      	adds	r3, #20
 8030008:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 803000a:	62fa      	str	r2, [r7, #44]	; 0x2c
 803000c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803000e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8030010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8030012:	e841 2300 	strex	r3, r2, [r1]
 8030016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8030018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803001a:	2b00      	cmp	r3, #0
 803001c:	d1e5      	bne.n	802ffea <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 803001e:	687b      	ldr	r3, [r7, #4]
 8030020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030022:	2b00      	cmp	r3, #0
 8030024:	d018      	beq.n	8030058 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8030026:	687b      	ldr	r3, [r7, #4]
 8030028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803002a:	2200      	movs	r2, #0
 803002c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 803002e:	687b      	ldr	r3, [r7, #4]
 8030030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030032:	4618      	mov	r0, r3
 8030034:	f7f9 fbc6 	bl	80297c4 <HAL_DMA_Abort>
 8030038:	4603      	mov	r3, r0
 803003a:	2b00      	cmp	r3, #0
 803003c:	d00c      	beq.n	8030058 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 803003e:	687b      	ldr	r3, [r7, #4]
 8030040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030042:	4618      	mov	r0, r3
 8030044:	f7f9 fde8 	bl	8029c18 <HAL_DMA_GetError>
 8030048:	4603      	mov	r3, r0
 803004a:	2b20      	cmp	r3, #32
 803004c:	d104      	bne.n	8030058 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 803004e:	687b      	ldr	r3, [r7, #4]
 8030050:	2210      	movs	r2, #16
 8030052:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8030054:	2303      	movs	r3, #3
 8030056:	e052      	b.n	80300fe <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8030058:	687b      	ldr	r3, [r7, #4]
 803005a:	681b      	ldr	r3, [r3, #0]
 803005c:	695b      	ldr	r3, [r3, #20]
 803005e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8030062:	2b40      	cmp	r3, #64	; 0x40
 8030064:	d136      	bne.n	80300d4 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8030066:	687b      	ldr	r3, [r7, #4]
 8030068:	681b      	ldr	r3, [r3, #0]
 803006a:	3314      	adds	r3, #20
 803006c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803006e:	68fb      	ldr	r3, [r7, #12]
 8030070:	e853 3f00 	ldrex	r3, [r3]
 8030074:	60bb      	str	r3, [r7, #8]
   return(result);
 8030076:	68bb      	ldr	r3, [r7, #8]
 8030078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803007c:	66fb      	str	r3, [r7, #108]	; 0x6c
 803007e:	687b      	ldr	r3, [r7, #4]
 8030080:	681b      	ldr	r3, [r3, #0]
 8030082:	3314      	adds	r3, #20
 8030084:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8030086:	61ba      	str	r2, [r7, #24]
 8030088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803008a:	6979      	ldr	r1, [r7, #20]
 803008c:	69ba      	ldr	r2, [r7, #24]
 803008e:	e841 2300 	strex	r3, r2, [r1]
 8030092:	613b      	str	r3, [r7, #16]
   return(result);
 8030094:	693b      	ldr	r3, [r7, #16]
 8030096:	2b00      	cmp	r3, #0
 8030098:	d1e5      	bne.n	8030066 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 803009a:	687b      	ldr	r3, [r7, #4]
 803009c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803009e:	2b00      	cmp	r3, #0
 80300a0:	d018      	beq.n	80300d4 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80300a2:	687b      	ldr	r3, [r7, #4]
 80300a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80300a6:	2200      	movs	r2, #0
 80300a8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80300aa:	687b      	ldr	r3, [r7, #4]
 80300ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80300ae:	4618      	mov	r0, r3
 80300b0:	f7f9 fb88 	bl	80297c4 <HAL_DMA_Abort>
 80300b4:	4603      	mov	r3, r0
 80300b6:	2b00      	cmp	r3, #0
 80300b8:	d00c      	beq.n	80300d4 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80300ba:	687b      	ldr	r3, [r7, #4]
 80300bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80300be:	4618      	mov	r0, r3
 80300c0:	f7f9 fdaa 	bl	8029c18 <HAL_DMA_GetError>
 80300c4:	4603      	mov	r3, r0
 80300c6:	2b20      	cmp	r3, #32
 80300c8:	d104      	bne.n	80300d4 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80300ca:	687b      	ldr	r3, [r7, #4]
 80300cc:	2210      	movs	r2, #16
 80300ce:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80300d0:	2303      	movs	r3, #3
 80300d2:	e014      	b.n	80300fe <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 80300d4:	687b      	ldr	r3, [r7, #4]
 80300d6:	2200      	movs	r2, #0
 80300d8:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80300da:	687b      	ldr	r3, [r7, #4]
 80300dc:	2200      	movs	r2, #0
 80300de:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80300e0:	687b      	ldr	r3, [r7, #4]
 80300e2:	2200      	movs	r2, #0
 80300e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80300e6:	687b      	ldr	r3, [r7, #4]
 80300e8:	2220      	movs	r2, #32
 80300ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 80300ee:	687b      	ldr	r3, [r7, #4]
 80300f0:	2220      	movs	r2, #32
 80300f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80300f6:	687b      	ldr	r3, [r7, #4]
 80300f8:	2200      	movs	r2, #0
 80300fa:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80300fc:	2300      	movs	r3, #0
}
 80300fe:	4618      	mov	r0, r3
 8030100:	3780      	adds	r7, #128	; 0x80
 8030102:	46bd      	mov	sp, r7
 8030104:	bd80      	pop	{r7, pc}
	...

08030108 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8030108:	b580      	push	{r7, lr}
 803010a:	b0a2      	sub	sp, #136	; 0x88
 803010c:	af00      	add	r7, sp, #0
 803010e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8030110:	2301      	movs	r3, #1
 8030112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8030116:	687b      	ldr	r3, [r7, #4]
 8030118:	681b      	ldr	r3, [r3, #0]
 803011a:	330c      	adds	r3, #12
 803011c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803011e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8030120:	e853 3f00 	ldrex	r3, [r3]
 8030124:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8030126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8030128:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 803012c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8030130:	687b      	ldr	r3, [r7, #4]
 8030132:	681b      	ldr	r3, [r3, #0]
 8030134:	330c      	adds	r3, #12
 8030136:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 803013a:	66fa      	str	r2, [r7, #108]	; 0x6c
 803013c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803013e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8030140:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8030142:	e841 2300 	strex	r3, r2, [r1]
 8030146:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8030148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803014a:	2b00      	cmp	r3, #0
 803014c:	d1e3      	bne.n	8030116 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803014e:	687b      	ldr	r3, [r7, #4]
 8030150:	681b      	ldr	r3, [r3, #0]
 8030152:	3314      	adds	r3, #20
 8030154:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8030158:	e853 3f00 	ldrex	r3, [r3]
 803015c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 803015e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8030160:	f023 0301 	bic.w	r3, r3, #1
 8030164:	67fb      	str	r3, [r7, #124]	; 0x7c
 8030166:	687b      	ldr	r3, [r7, #4]
 8030168:	681b      	ldr	r3, [r3, #0]
 803016a:	3314      	adds	r3, #20
 803016c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 803016e:	65ba      	str	r2, [r7, #88]	; 0x58
 8030170:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030172:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8030174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8030176:	e841 2300 	strex	r3, r2, [r1]
 803017a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 803017c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803017e:	2b00      	cmp	r3, #0
 8030180:	d1e5      	bne.n	803014e <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8030182:	687b      	ldr	r3, [r7, #4]
 8030184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030186:	2b01      	cmp	r3, #1
 8030188:	d119      	bne.n	80301be <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 803018a:	687b      	ldr	r3, [r7, #4]
 803018c:	681b      	ldr	r3, [r3, #0]
 803018e:	330c      	adds	r3, #12
 8030190:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030194:	e853 3f00 	ldrex	r3, [r3]
 8030198:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 803019a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803019c:	f023 0310 	bic.w	r3, r3, #16
 80301a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80301a2:	687b      	ldr	r3, [r7, #4]
 80301a4:	681b      	ldr	r3, [r3, #0]
 80301a6:	330c      	adds	r3, #12
 80301a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80301aa:	647a      	str	r2, [r7, #68]	; 0x44
 80301ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80301ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80301b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80301b2:	e841 2300 	strex	r3, r2, [r1]
 80301b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80301b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80301ba:	2b00      	cmp	r3, #0
 80301bc:	d1e5      	bne.n	803018a <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80301be:	687b      	ldr	r3, [r7, #4]
 80301c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80301c2:	2b00      	cmp	r3, #0
 80301c4:	d00f      	beq.n	80301e6 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80301c6:	687b      	ldr	r3, [r7, #4]
 80301c8:	681b      	ldr	r3, [r3, #0]
 80301ca:	695b      	ldr	r3, [r3, #20]
 80301cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80301d0:	2b80      	cmp	r3, #128	; 0x80
 80301d2:	d104      	bne.n	80301de <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80301d4:	687b      	ldr	r3, [r7, #4]
 80301d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80301d8:	4a53      	ldr	r2, [pc, #332]	; (8030328 <HAL_UART_Abort_IT+0x220>)
 80301da:	651a      	str	r2, [r3, #80]	; 0x50
 80301dc:	e003      	b.n	80301e6 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80301de:	687b      	ldr	r3, [r7, #4]
 80301e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80301e2:	2200      	movs	r2, #0
 80301e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80301e6:	687b      	ldr	r3, [r7, #4]
 80301e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80301ea:	2b00      	cmp	r3, #0
 80301ec:	d00f      	beq.n	803020e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80301ee:	687b      	ldr	r3, [r7, #4]
 80301f0:	681b      	ldr	r3, [r3, #0]
 80301f2:	695b      	ldr	r3, [r3, #20]
 80301f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80301f8:	2b40      	cmp	r3, #64	; 0x40
 80301fa:	d104      	bne.n	8030206 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80301fc:	687b      	ldr	r3, [r7, #4]
 80301fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030200:	4a4a      	ldr	r2, [pc, #296]	; (803032c <HAL_UART_Abort_IT+0x224>)
 8030202:	651a      	str	r2, [r3, #80]	; 0x50
 8030204:	e003      	b.n	803020e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8030206:	687b      	ldr	r3, [r7, #4]
 8030208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803020a:	2200      	movs	r2, #0
 803020c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 803020e:	687b      	ldr	r3, [r7, #4]
 8030210:	681b      	ldr	r3, [r3, #0]
 8030212:	695b      	ldr	r3, [r3, #20]
 8030214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8030218:	2b80      	cmp	r3, #128	; 0x80
 803021a:	d12d      	bne.n	8030278 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 803021c:	687b      	ldr	r3, [r7, #4]
 803021e:	681b      	ldr	r3, [r3, #0]
 8030220:	3314      	adds	r3, #20
 8030222:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030226:	e853 3f00 	ldrex	r3, [r3]
 803022a:	623b      	str	r3, [r7, #32]
   return(result);
 803022c:	6a3b      	ldr	r3, [r7, #32]
 803022e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8030232:	677b      	str	r3, [r7, #116]	; 0x74
 8030234:	687b      	ldr	r3, [r7, #4]
 8030236:	681b      	ldr	r3, [r3, #0]
 8030238:	3314      	adds	r3, #20
 803023a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 803023c:	633a      	str	r2, [r7, #48]	; 0x30
 803023e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8030242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8030244:	e841 2300 	strex	r3, r2, [r1]
 8030248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 803024a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803024c:	2b00      	cmp	r3, #0
 803024e:	d1e5      	bne.n	803021c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8030250:	687b      	ldr	r3, [r7, #4]
 8030252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030254:	2b00      	cmp	r3, #0
 8030256:	d00f      	beq.n	8030278 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8030258:	687b      	ldr	r3, [r7, #4]
 803025a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803025c:	4618      	mov	r0, r3
 803025e:	f7f9 fb21 	bl	80298a4 <HAL_DMA_Abort_IT>
 8030262:	4603      	mov	r3, r0
 8030264:	2b00      	cmp	r3, #0
 8030266:	d004      	beq.n	8030272 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8030268:	687b      	ldr	r3, [r7, #4]
 803026a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803026c:	2200      	movs	r2, #0
 803026e:	651a      	str	r2, [r3, #80]	; 0x50
 8030270:	e002      	b.n	8030278 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8030272:	2300      	movs	r3, #0
 8030274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8030278:	687b      	ldr	r3, [r7, #4]
 803027a:	681b      	ldr	r3, [r3, #0]
 803027c:	695b      	ldr	r3, [r3, #20]
 803027e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8030282:	2b40      	cmp	r3, #64	; 0x40
 8030284:	d130      	bne.n	80302e8 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8030286:	687b      	ldr	r3, [r7, #4]
 8030288:	681b      	ldr	r3, [r3, #0]
 803028a:	3314      	adds	r3, #20
 803028c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803028e:	693b      	ldr	r3, [r7, #16]
 8030290:	e853 3f00 	ldrex	r3, [r3]
 8030294:	60fb      	str	r3, [r7, #12]
   return(result);
 8030296:	68fb      	ldr	r3, [r7, #12]
 8030298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803029c:	673b      	str	r3, [r7, #112]	; 0x70
 803029e:	687b      	ldr	r3, [r7, #4]
 80302a0:	681b      	ldr	r3, [r3, #0]
 80302a2:	3314      	adds	r3, #20
 80302a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80302a6:	61fa      	str	r2, [r7, #28]
 80302a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80302aa:	69b9      	ldr	r1, [r7, #24]
 80302ac:	69fa      	ldr	r2, [r7, #28]
 80302ae:	e841 2300 	strex	r3, r2, [r1]
 80302b2:	617b      	str	r3, [r7, #20]
   return(result);
 80302b4:	697b      	ldr	r3, [r7, #20]
 80302b6:	2b00      	cmp	r3, #0
 80302b8:	d1e5      	bne.n	8030286 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80302ba:	687b      	ldr	r3, [r7, #4]
 80302bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302be:	2b00      	cmp	r3, #0
 80302c0:	d012      	beq.n	80302e8 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80302c2:	687b      	ldr	r3, [r7, #4]
 80302c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302c6:	4618      	mov	r0, r3
 80302c8:	f7f9 faec 	bl	80298a4 <HAL_DMA_Abort_IT>
 80302cc:	4603      	mov	r3, r0
 80302ce:	2b00      	cmp	r3, #0
 80302d0:	d007      	beq.n	80302e2 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80302d2:	687b      	ldr	r3, [r7, #4]
 80302d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80302d6:	2200      	movs	r2, #0
 80302d8:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 80302da:	2301      	movs	r3, #1
 80302dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80302e0:	e002      	b.n	80302e8 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80302e2:	2300      	movs	r3, #0
 80302e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80302e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80302ec:	2b01      	cmp	r3, #1
 80302ee:	d116      	bne.n	803031e <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80302f0:	687b      	ldr	r3, [r7, #4]
 80302f2:	2200      	movs	r2, #0
 80302f4:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80302f6:	687b      	ldr	r3, [r7, #4]
 80302f8:	2200      	movs	r2, #0
 80302fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80302fc:	687b      	ldr	r3, [r7, #4]
 80302fe:	2200      	movs	r2, #0
 8030300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8030302:	687b      	ldr	r3, [r7, #4]
 8030304:	2220      	movs	r2, #32
 8030306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 803030a:	687b      	ldr	r3, [r7, #4]
 803030c:	2220      	movs	r2, #32
 803030e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8030312:	687b      	ldr	r3, [r7, #4]
 8030314:	2200      	movs	r2, #0
 8030316:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8030318:	6878      	ldr	r0, [r7, #4]
 803031a:	f000 fab5 	bl	8030888 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 803031e:	2300      	movs	r3, #0
}
 8030320:	4618      	mov	r0, r3
 8030322:	3788      	adds	r7, #136	; 0x88
 8030324:	46bd      	mov	sp, r7
 8030326:	bd80      	pop	{r7, pc}
 8030328:	08030f2f 	.word	0x08030f2f
 803032c:	08030f8f 	.word	0x08030f8f

08030330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8030330:	b580      	push	{r7, lr}
 8030332:	b0ba      	sub	sp, #232	; 0xe8
 8030334:	af00      	add	r7, sp, #0
 8030336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8030338:	687b      	ldr	r3, [r7, #4]
 803033a:	681b      	ldr	r3, [r3, #0]
 803033c:	681b      	ldr	r3, [r3, #0]
 803033e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8030342:	687b      	ldr	r3, [r7, #4]
 8030344:	681b      	ldr	r3, [r3, #0]
 8030346:	68db      	ldr	r3, [r3, #12]
 8030348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 803034c:	687b      	ldr	r3, [r7, #4]
 803034e:	681b      	ldr	r3, [r3, #0]
 8030350:	695b      	ldr	r3, [r3, #20]
 8030352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8030356:	2300      	movs	r3, #0
 8030358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 803035c:	2300      	movs	r3, #0
 803035e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8030362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8030366:	f003 030f 	and.w	r3, r3, #15
 803036a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 803036e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8030372:	2b00      	cmp	r3, #0
 8030374:	d10f      	bne.n	8030396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8030376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803037a:	f003 0320 	and.w	r3, r3, #32
 803037e:	2b00      	cmp	r3, #0
 8030380:	d009      	beq.n	8030396 <HAL_UART_IRQHandler+0x66>
 8030382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8030386:	f003 0320 	and.w	r3, r3, #32
 803038a:	2b00      	cmp	r3, #0
 803038c:	d003      	beq.n	8030396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 803038e:	6878      	ldr	r0, [r7, #4]
 8030390:	f000 fe95 	bl	80310be <UART_Receive_IT>
      return;
 8030394:	e256      	b.n	8030844 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8030396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 803039a:	2b00      	cmp	r3, #0
 803039c:	f000 80de 	beq.w	803055c <HAL_UART_IRQHandler+0x22c>
 80303a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80303a4:	f003 0301 	and.w	r3, r3, #1
 80303a8:	2b00      	cmp	r3, #0
 80303aa:	d106      	bne.n	80303ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80303ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80303b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80303b4:	2b00      	cmp	r3, #0
 80303b6:	f000 80d1 	beq.w	803055c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80303ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80303be:	f003 0301 	and.w	r3, r3, #1
 80303c2:	2b00      	cmp	r3, #0
 80303c4:	d00b      	beq.n	80303de <HAL_UART_IRQHandler+0xae>
 80303c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80303ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80303ce:	2b00      	cmp	r3, #0
 80303d0:	d005      	beq.n	80303de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80303d2:	687b      	ldr	r3, [r7, #4]
 80303d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80303d6:	f043 0201 	orr.w	r2, r3, #1
 80303da:	687b      	ldr	r3, [r7, #4]
 80303dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80303de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80303e2:	f003 0304 	and.w	r3, r3, #4
 80303e6:	2b00      	cmp	r3, #0
 80303e8:	d00b      	beq.n	8030402 <HAL_UART_IRQHandler+0xd2>
 80303ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80303ee:	f003 0301 	and.w	r3, r3, #1
 80303f2:	2b00      	cmp	r3, #0
 80303f4:	d005      	beq.n	8030402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80303f6:	687b      	ldr	r3, [r7, #4]
 80303f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80303fa:	f043 0202 	orr.w	r2, r3, #2
 80303fe:	687b      	ldr	r3, [r7, #4]
 8030400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8030402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8030406:	f003 0302 	and.w	r3, r3, #2
 803040a:	2b00      	cmp	r3, #0
 803040c:	d00b      	beq.n	8030426 <HAL_UART_IRQHandler+0xf6>
 803040e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8030412:	f003 0301 	and.w	r3, r3, #1
 8030416:	2b00      	cmp	r3, #0
 8030418:	d005      	beq.n	8030426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 803041a:	687b      	ldr	r3, [r7, #4]
 803041c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803041e:	f043 0204 	orr.w	r2, r3, #4
 8030422:	687b      	ldr	r3, [r7, #4]
 8030424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8030426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803042a:	f003 0308 	and.w	r3, r3, #8
 803042e:	2b00      	cmp	r3, #0
 8030430:	d011      	beq.n	8030456 <HAL_UART_IRQHandler+0x126>
 8030432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8030436:	f003 0320 	and.w	r3, r3, #32
 803043a:	2b00      	cmp	r3, #0
 803043c:	d105      	bne.n	803044a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 803043e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8030442:	f003 0301 	and.w	r3, r3, #1
 8030446:	2b00      	cmp	r3, #0
 8030448:	d005      	beq.n	8030456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 803044a:	687b      	ldr	r3, [r7, #4]
 803044c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803044e:	f043 0208 	orr.w	r2, r3, #8
 8030452:	687b      	ldr	r3, [r7, #4]
 8030454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8030456:	687b      	ldr	r3, [r7, #4]
 8030458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803045a:	2b00      	cmp	r3, #0
 803045c:	f000 81ed 	beq.w	803083a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8030460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8030464:	f003 0320 	and.w	r3, r3, #32
 8030468:	2b00      	cmp	r3, #0
 803046a:	d008      	beq.n	803047e <HAL_UART_IRQHandler+0x14e>
 803046c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8030470:	f003 0320 	and.w	r3, r3, #32
 8030474:	2b00      	cmp	r3, #0
 8030476:	d002      	beq.n	803047e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8030478:	6878      	ldr	r0, [r7, #4]
 803047a:	f000 fe20 	bl	80310be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 803047e:	687b      	ldr	r3, [r7, #4]
 8030480:	681b      	ldr	r3, [r3, #0]
 8030482:	695b      	ldr	r3, [r3, #20]
 8030484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8030488:	2b40      	cmp	r3, #64	; 0x40
 803048a:	bf0c      	ite	eq
 803048c:	2301      	moveq	r3, #1
 803048e:	2300      	movne	r3, #0
 8030490:	b2db      	uxtb	r3, r3
 8030492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8030496:	687b      	ldr	r3, [r7, #4]
 8030498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803049a:	f003 0308 	and.w	r3, r3, #8
 803049e:	2b00      	cmp	r3, #0
 80304a0:	d103      	bne.n	80304aa <HAL_UART_IRQHandler+0x17a>
 80304a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80304a6:	2b00      	cmp	r3, #0
 80304a8:	d04f      	beq.n	803054a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80304aa:	6878      	ldr	r0, [r7, #4]
 80304ac:	f000 fcc8 	bl	8030e40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80304b0:	687b      	ldr	r3, [r7, #4]
 80304b2:	681b      	ldr	r3, [r3, #0]
 80304b4:	695b      	ldr	r3, [r3, #20]
 80304b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80304ba:	2b40      	cmp	r3, #64	; 0x40
 80304bc:	d141      	bne.n	8030542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80304be:	687b      	ldr	r3, [r7, #4]
 80304c0:	681b      	ldr	r3, [r3, #0]
 80304c2:	3314      	adds	r3, #20
 80304c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80304c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80304cc:	e853 3f00 	ldrex	r3, [r3]
 80304d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80304d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80304d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80304dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80304e0:	687b      	ldr	r3, [r7, #4]
 80304e2:	681b      	ldr	r3, [r3, #0]
 80304e4:	3314      	adds	r3, #20
 80304e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80304ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80304ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80304f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80304f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80304fa:	e841 2300 	strex	r3, r2, [r1]
 80304fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8030502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8030506:	2b00      	cmp	r3, #0
 8030508:	d1d9      	bne.n	80304be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 803050a:	687b      	ldr	r3, [r7, #4]
 803050c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803050e:	2b00      	cmp	r3, #0
 8030510:	d013      	beq.n	803053a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8030512:	687b      	ldr	r3, [r7, #4]
 8030514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030516:	4a7d      	ldr	r2, [pc, #500]	; (803070c <HAL_UART_IRQHandler+0x3dc>)
 8030518:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 803051a:	687b      	ldr	r3, [r7, #4]
 803051c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803051e:	4618      	mov	r0, r3
 8030520:	f7f9 f9c0 	bl	80298a4 <HAL_DMA_Abort_IT>
 8030524:	4603      	mov	r3, r0
 8030526:	2b00      	cmp	r3, #0
 8030528:	d016      	beq.n	8030558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 803052a:	687b      	ldr	r3, [r7, #4]
 803052c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803052e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8030530:	687a      	ldr	r2, [r7, #4]
 8030532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8030534:	4610      	mov	r0, r2
 8030536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8030538:	e00e      	b.n	8030558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 803053a:	6878      	ldr	r0, [r7, #4]
 803053c:	f000 f99a 	bl	8030874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8030540:	e00a      	b.n	8030558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8030542:	6878      	ldr	r0, [r7, #4]
 8030544:	f000 f996 	bl	8030874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8030548:	e006      	b.n	8030558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 803054a:	6878      	ldr	r0, [r7, #4]
 803054c:	f000 f992 	bl	8030874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8030550:	687b      	ldr	r3, [r7, #4]
 8030552:	2200      	movs	r2, #0
 8030554:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8030556:	e170      	b.n	803083a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8030558:	bf00      	nop
    return;
 803055a:	e16e      	b.n	803083a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 803055c:	687b      	ldr	r3, [r7, #4]
 803055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030560:	2b01      	cmp	r3, #1
 8030562:	f040 814a 	bne.w	80307fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8030566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803056a:	f003 0310 	and.w	r3, r3, #16
 803056e:	2b00      	cmp	r3, #0
 8030570:	f000 8143 	beq.w	80307fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8030574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8030578:	f003 0310 	and.w	r3, r3, #16
 803057c:	2b00      	cmp	r3, #0
 803057e:	f000 813c 	beq.w	80307fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8030582:	2300      	movs	r3, #0
 8030584:	60bb      	str	r3, [r7, #8]
 8030586:	687b      	ldr	r3, [r7, #4]
 8030588:	681b      	ldr	r3, [r3, #0]
 803058a:	681b      	ldr	r3, [r3, #0]
 803058c:	60bb      	str	r3, [r7, #8]
 803058e:	687b      	ldr	r3, [r7, #4]
 8030590:	681b      	ldr	r3, [r3, #0]
 8030592:	685b      	ldr	r3, [r3, #4]
 8030594:	60bb      	str	r3, [r7, #8]
 8030596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8030598:	687b      	ldr	r3, [r7, #4]
 803059a:	681b      	ldr	r3, [r3, #0]
 803059c:	695b      	ldr	r3, [r3, #20]
 803059e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80305a2:	2b40      	cmp	r3, #64	; 0x40
 80305a4:	f040 80b4 	bne.w	8030710 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80305a8:	687b      	ldr	r3, [r7, #4]
 80305aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80305ac:	681b      	ldr	r3, [r3, #0]
 80305ae:	685b      	ldr	r3, [r3, #4]
 80305b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80305b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80305b8:	2b00      	cmp	r3, #0
 80305ba:	f000 8140 	beq.w	803083e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80305be:	687b      	ldr	r3, [r7, #4]
 80305c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80305c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80305c6:	429a      	cmp	r2, r3
 80305c8:	f080 8139 	bcs.w	803083e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80305cc:	687b      	ldr	r3, [r7, #4]
 80305ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80305d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80305d4:	687b      	ldr	r3, [r7, #4]
 80305d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80305d8:	69db      	ldr	r3, [r3, #28]
 80305da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80305de:	f000 8088 	beq.w	80306f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80305e2:	687b      	ldr	r3, [r7, #4]
 80305e4:	681b      	ldr	r3, [r3, #0]
 80305e6:	330c      	adds	r3, #12
 80305e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80305ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80305f0:	e853 3f00 	ldrex	r3, [r3]
 80305f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80305f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80305fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8030600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8030604:	687b      	ldr	r3, [r7, #4]
 8030606:	681b      	ldr	r3, [r3, #0]
 8030608:	330c      	adds	r3, #12
 803060a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 803060e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8030612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 803061a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 803061e:	e841 2300 	strex	r3, r2, [r1]
 8030622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8030626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 803062a:	2b00      	cmp	r3, #0
 803062c:	d1d9      	bne.n	80305e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803062e:	687b      	ldr	r3, [r7, #4]
 8030630:	681b      	ldr	r3, [r3, #0]
 8030632:	3314      	adds	r3, #20
 8030634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8030638:	e853 3f00 	ldrex	r3, [r3]
 803063c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 803063e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8030640:	f023 0301 	bic.w	r3, r3, #1
 8030644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8030648:	687b      	ldr	r3, [r7, #4]
 803064a:	681b      	ldr	r3, [r3, #0]
 803064c:	3314      	adds	r3, #20
 803064e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8030652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8030656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 803065a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 803065e:	e841 2300 	strex	r3, r2, [r1]
 8030662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8030664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8030666:	2b00      	cmp	r3, #0
 8030668:	d1e1      	bne.n	803062e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 803066a:	687b      	ldr	r3, [r7, #4]
 803066c:	681b      	ldr	r3, [r3, #0]
 803066e:	3314      	adds	r3, #20
 8030670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8030674:	e853 3f00 	ldrex	r3, [r3]
 8030678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 803067a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 803067c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8030680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8030684:	687b      	ldr	r3, [r7, #4]
 8030686:	681b      	ldr	r3, [r3, #0]
 8030688:	3314      	adds	r3, #20
 803068a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 803068e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8030690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8030694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8030696:	e841 2300 	strex	r3, r2, [r1]
 803069a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 803069c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 803069e:	2b00      	cmp	r3, #0
 80306a0:	d1e3      	bne.n	803066a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80306a2:	687b      	ldr	r3, [r7, #4]
 80306a4:	2220      	movs	r2, #32
 80306a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80306aa:	687b      	ldr	r3, [r7, #4]
 80306ac:	2200      	movs	r2, #0
 80306ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80306b0:	687b      	ldr	r3, [r7, #4]
 80306b2:	681b      	ldr	r3, [r3, #0]
 80306b4:	330c      	adds	r3, #12
 80306b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80306b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80306ba:	e853 3f00 	ldrex	r3, [r3]
 80306be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80306c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80306c2:	f023 0310 	bic.w	r3, r3, #16
 80306c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80306ca:	687b      	ldr	r3, [r7, #4]
 80306cc:	681b      	ldr	r3, [r3, #0]
 80306ce:	330c      	adds	r3, #12
 80306d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80306d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80306d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80306d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80306da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80306dc:	e841 2300 	strex	r3, r2, [r1]
 80306e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80306e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80306e4:	2b00      	cmp	r3, #0
 80306e6:	d1e3      	bne.n	80306b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80306e8:	687b      	ldr	r3, [r7, #4]
 80306ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80306ec:	4618      	mov	r0, r3
 80306ee:	f7f9 f869 	bl	80297c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80306f2:	687b      	ldr	r3, [r7, #4]
 80306f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80306f6:	687b      	ldr	r3, [r7, #4]
 80306f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80306fa:	b29b      	uxth	r3, r3
 80306fc:	1ad3      	subs	r3, r2, r3
 80306fe:	b29b      	uxth	r3, r3
 8030700:	4619      	mov	r1, r3
 8030702:	6878      	ldr	r0, [r7, #4]
 8030704:	f000 f8ca 	bl	803089c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8030708:	e099      	b.n	803083e <HAL_UART_IRQHandler+0x50e>
 803070a:	bf00      	nop
 803070c:	08030f07 	.word	0x08030f07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8030710:	687b      	ldr	r3, [r7, #4]
 8030712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8030714:	687b      	ldr	r3, [r7, #4]
 8030716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8030718:	b29b      	uxth	r3, r3
 803071a:	1ad3      	subs	r3, r2, r3
 803071c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8030720:	687b      	ldr	r3, [r7, #4]
 8030722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8030724:	b29b      	uxth	r3, r3
 8030726:	2b00      	cmp	r3, #0
 8030728:	f000 808b 	beq.w	8030842 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 803072c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8030730:	2b00      	cmp	r3, #0
 8030732:	f000 8086 	beq.w	8030842 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8030736:	687b      	ldr	r3, [r7, #4]
 8030738:	681b      	ldr	r3, [r3, #0]
 803073a:	330c      	adds	r3, #12
 803073c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803073e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030740:	e853 3f00 	ldrex	r3, [r3]
 8030744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8030746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 803074c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8030750:	687b      	ldr	r3, [r7, #4]
 8030752:	681b      	ldr	r3, [r3, #0]
 8030754:	330c      	adds	r3, #12
 8030756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 803075a:	647a      	str	r2, [r7, #68]	; 0x44
 803075c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803075e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8030760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8030762:	e841 2300 	strex	r3, r2, [r1]
 8030766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8030768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803076a:	2b00      	cmp	r3, #0
 803076c:	d1e3      	bne.n	8030736 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803076e:	687b      	ldr	r3, [r7, #4]
 8030770:	681b      	ldr	r3, [r3, #0]
 8030772:	3314      	adds	r3, #20
 8030774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030778:	e853 3f00 	ldrex	r3, [r3]
 803077c:	623b      	str	r3, [r7, #32]
   return(result);
 803077e:	6a3b      	ldr	r3, [r7, #32]
 8030780:	f023 0301 	bic.w	r3, r3, #1
 8030784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8030788:	687b      	ldr	r3, [r7, #4]
 803078a:	681b      	ldr	r3, [r3, #0]
 803078c:	3314      	adds	r3, #20
 803078e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8030792:	633a      	str	r2, [r7, #48]	; 0x30
 8030794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8030798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803079a:	e841 2300 	strex	r3, r2, [r1]
 803079e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80307a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80307a2:	2b00      	cmp	r3, #0
 80307a4:	d1e3      	bne.n	803076e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80307a6:	687b      	ldr	r3, [r7, #4]
 80307a8:	2220      	movs	r2, #32
 80307aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80307ae:	687b      	ldr	r3, [r7, #4]
 80307b0:	2200      	movs	r2, #0
 80307b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80307b4:	687b      	ldr	r3, [r7, #4]
 80307b6:	681b      	ldr	r3, [r3, #0]
 80307b8:	330c      	adds	r3, #12
 80307ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80307bc:	693b      	ldr	r3, [r7, #16]
 80307be:	e853 3f00 	ldrex	r3, [r3]
 80307c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80307c4:	68fb      	ldr	r3, [r7, #12]
 80307c6:	f023 0310 	bic.w	r3, r3, #16
 80307ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80307ce:	687b      	ldr	r3, [r7, #4]
 80307d0:	681b      	ldr	r3, [r3, #0]
 80307d2:	330c      	adds	r3, #12
 80307d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80307d8:	61fa      	str	r2, [r7, #28]
 80307da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80307dc:	69b9      	ldr	r1, [r7, #24]
 80307de:	69fa      	ldr	r2, [r7, #28]
 80307e0:	e841 2300 	strex	r3, r2, [r1]
 80307e4:	617b      	str	r3, [r7, #20]
   return(result);
 80307e6:	697b      	ldr	r3, [r7, #20]
 80307e8:	2b00      	cmp	r3, #0
 80307ea:	d1e3      	bne.n	80307b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80307ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80307f0:	4619      	mov	r1, r3
 80307f2:	6878      	ldr	r0, [r7, #4]
 80307f4:	f000 f852 	bl	803089c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80307f8:	e023      	b.n	8030842 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80307fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80307fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8030802:	2b00      	cmp	r3, #0
 8030804:	d009      	beq.n	803081a <HAL_UART_IRQHandler+0x4ea>
 8030806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803080e:	2b00      	cmp	r3, #0
 8030810:	d003      	beq.n	803081a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8030812:	6878      	ldr	r0, [r7, #4]
 8030814:	f000 fbeb 	bl	8030fee <UART_Transmit_IT>
    return;
 8030818:	e014      	b.n	8030844 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 803081a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8030822:	2b00      	cmp	r3, #0
 8030824:	d00e      	beq.n	8030844 <HAL_UART_IRQHandler+0x514>
 8030826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803082a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803082e:	2b00      	cmp	r3, #0
 8030830:	d008      	beq.n	8030844 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8030832:	6878      	ldr	r0, [r7, #4]
 8030834:	f000 fc2b 	bl	803108e <UART_EndTransmit_IT>
    return;
 8030838:	e004      	b.n	8030844 <HAL_UART_IRQHandler+0x514>
    return;
 803083a:	bf00      	nop
 803083c:	e002      	b.n	8030844 <HAL_UART_IRQHandler+0x514>
      return;
 803083e:	bf00      	nop
 8030840:	e000      	b.n	8030844 <HAL_UART_IRQHandler+0x514>
      return;
 8030842:	bf00      	nop
  }
}
 8030844:	37e8      	adds	r7, #232	; 0xe8
 8030846:	46bd      	mov	sp, r7
 8030848:	bd80      	pop	{r7, pc}
 803084a:	bf00      	nop

0803084c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 803084c:	b480      	push	{r7}
 803084e:	b083      	sub	sp, #12
 8030850:	af00      	add	r7, sp, #0
 8030852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8030854:	bf00      	nop
 8030856:	370c      	adds	r7, #12
 8030858:	46bd      	mov	sp, r7
 803085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803085e:	4770      	bx	lr

08030860 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8030860:	b480      	push	{r7}
 8030862:	b083      	sub	sp, #12
 8030864:	af00      	add	r7, sp, #0
 8030866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8030868:	bf00      	nop
 803086a:	370c      	adds	r7, #12
 803086c:	46bd      	mov	sp, r7
 803086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030872:	4770      	bx	lr

08030874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8030874:	b480      	push	{r7}
 8030876:	b083      	sub	sp, #12
 8030878:	af00      	add	r7, sp, #0
 803087a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 803087c:	bf00      	nop
 803087e:	370c      	adds	r7, #12
 8030880:	46bd      	mov	sp, r7
 8030882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030886:	4770      	bx	lr

08030888 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8030888:	b480      	push	{r7}
 803088a:	b083      	sub	sp, #12
 803088c:	af00      	add	r7, sp, #0
 803088e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8030890:	bf00      	nop
 8030892:	370c      	adds	r7, #12
 8030894:	46bd      	mov	sp, r7
 8030896:	f85d 7b04 	ldr.w	r7, [sp], #4
 803089a:	4770      	bx	lr

0803089c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 803089c:	b480      	push	{r7}
 803089e:	b083      	sub	sp, #12
 80308a0:	af00      	add	r7, sp, #0
 80308a2:	6078      	str	r0, [r7, #4]
 80308a4:	460b      	mov	r3, r1
 80308a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80308a8:	bf00      	nop
 80308aa:	370c      	adds	r7, #12
 80308ac:	46bd      	mov	sp, r7
 80308ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80308b2:	4770      	bx	lr

080308b4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80308b4:	b580      	push	{r7, lr}
 80308b6:	b090      	sub	sp, #64	; 0x40
 80308b8:	af00      	add	r7, sp, #0
 80308ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80308bc:	687b      	ldr	r3, [r7, #4]
 80308be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80308c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80308c2:	687b      	ldr	r3, [r7, #4]
 80308c4:	681b      	ldr	r3, [r3, #0]
 80308c6:	681b      	ldr	r3, [r3, #0]
 80308c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80308cc:	2b00      	cmp	r3, #0
 80308ce:	d137      	bne.n	8030940 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80308d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80308d2:	2200      	movs	r2, #0
 80308d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80308d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80308d8:	681b      	ldr	r3, [r3, #0]
 80308da:	3314      	adds	r3, #20
 80308dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80308de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80308e0:	e853 3f00 	ldrex	r3, [r3]
 80308e4:	623b      	str	r3, [r7, #32]
   return(result);
 80308e6:	6a3b      	ldr	r3, [r7, #32]
 80308e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80308ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80308ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80308f0:	681b      	ldr	r3, [r3, #0]
 80308f2:	3314      	adds	r3, #20
 80308f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80308f6:	633a      	str	r2, [r7, #48]	; 0x30
 80308f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80308fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80308fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80308fe:	e841 2300 	strex	r3, r2, [r1]
 8030902:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8030904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030906:	2b00      	cmp	r3, #0
 8030908:	d1e5      	bne.n	80308d6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 803090a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803090c:	681b      	ldr	r3, [r3, #0]
 803090e:	330c      	adds	r3, #12
 8030910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030912:	693b      	ldr	r3, [r7, #16]
 8030914:	e853 3f00 	ldrex	r3, [r3]
 8030918:	60fb      	str	r3, [r7, #12]
   return(result);
 803091a:	68fb      	ldr	r3, [r7, #12]
 803091c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030920:	637b      	str	r3, [r7, #52]	; 0x34
 8030922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8030924:	681b      	ldr	r3, [r3, #0]
 8030926:	330c      	adds	r3, #12
 8030928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803092a:	61fa      	str	r2, [r7, #28]
 803092c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803092e:	69b9      	ldr	r1, [r7, #24]
 8030930:	69fa      	ldr	r2, [r7, #28]
 8030932:	e841 2300 	strex	r3, r2, [r1]
 8030936:	617b      	str	r3, [r7, #20]
   return(result);
 8030938:	697b      	ldr	r3, [r7, #20]
 803093a:	2b00      	cmp	r3, #0
 803093c:	d1e5      	bne.n	803090a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 803093e:	e002      	b.n	8030946 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8030940:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8030942:	f008 fa5f 	bl	8038e04 <HAL_UART_TxCpltCallback>
}
 8030946:	bf00      	nop
 8030948:	3740      	adds	r7, #64	; 0x40
 803094a:	46bd      	mov	sp, r7
 803094c:	bd80      	pop	{r7, pc}

0803094e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 803094e:	b580      	push	{r7, lr}
 8030950:	b084      	sub	sp, #16
 8030952:	af00      	add	r7, sp, #0
 8030954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8030956:	687b      	ldr	r3, [r7, #4]
 8030958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803095a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 803095c:	68f8      	ldr	r0, [r7, #12]
 803095e:	f7ff ff75 	bl	803084c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8030962:	bf00      	nop
 8030964:	3710      	adds	r7, #16
 8030966:	46bd      	mov	sp, r7
 8030968:	bd80      	pop	{r7, pc}

0803096a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 803096a:	b580      	push	{r7, lr}
 803096c:	b09c      	sub	sp, #112	; 0x70
 803096e:	af00      	add	r7, sp, #0
 8030970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8030972:	687b      	ldr	r3, [r7, #4]
 8030974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030976:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8030978:	687b      	ldr	r3, [r7, #4]
 803097a:	681b      	ldr	r3, [r3, #0]
 803097c:	681b      	ldr	r3, [r3, #0]
 803097e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8030982:	2b00      	cmp	r3, #0
 8030984:	d172      	bne.n	8030a6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8030986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8030988:	2200      	movs	r2, #0
 803098a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803098c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803098e:	681b      	ldr	r3, [r3, #0]
 8030990:	330c      	adds	r3, #12
 8030992:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8030996:	e853 3f00 	ldrex	r3, [r3]
 803099a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 803099c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803099e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80309a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80309a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80309a6:	681b      	ldr	r3, [r3, #0]
 80309a8:	330c      	adds	r3, #12
 80309aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80309ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80309ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80309b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80309b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80309b4:	e841 2300 	strex	r3, r2, [r1]
 80309b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80309ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80309bc:	2b00      	cmp	r3, #0
 80309be:	d1e5      	bne.n	803098c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80309c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80309c2:	681b      	ldr	r3, [r3, #0]
 80309c4:	3314      	adds	r3, #20
 80309c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80309c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80309ca:	e853 3f00 	ldrex	r3, [r3]
 80309ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80309d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80309d2:	f023 0301 	bic.w	r3, r3, #1
 80309d6:	667b      	str	r3, [r7, #100]	; 0x64
 80309d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80309da:	681b      	ldr	r3, [r3, #0]
 80309dc:	3314      	adds	r3, #20
 80309de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80309e0:	647a      	str	r2, [r7, #68]	; 0x44
 80309e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80309e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80309e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80309e8:	e841 2300 	strex	r3, r2, [r1]
 80309ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80309ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80309f0:	2b00      	cmp	r3, #0
 80309f2:	d1e5      	bne.n	80309c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80309f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80309f6:	681b      	ldr	r3, [r3, #0]
 80309f8:	3314      	adds	r3, #20
 80309fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80309fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80309fe:	e853 3f00 	ldrex	r3, [r3]
 8030a02:	623b      	str	r3, [r7, #32]
   return(result);
 8030a04:	6a3b      	ldr	r3, [r7, #32]
 8030a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8030a0a:	663b      	str	r3, [r7, #96]	; 0x60
 8030a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8030a0e:	681b      	ldr	r3, [r3, #0]
 8030a10:	3314      	adds	r3, #20
 8030a12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8030a14:	633a      	str	r2, [r7, #48]	; 0x30
 8030a16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030a18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8030a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8030a1c:	e841 2300 	strex	r3, r2, [r1]
 8030a20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8030a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030a24:	2b00      	cmp	r3, #0
 8030a26:	d1e5      	bne.n	80309f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8030a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8030a2a:	2220      	movs	r2, #32
 8030a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8030a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8030a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030a34:	2b01      	cmp	r3, #1
 8030a36:	d119      	bne.n	8030a6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8030a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8030a3a:	681b      	ldr	r3, [r3, #0]
 8030a3c:	330c      	adds	r3, #12
 8030a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030a40:	693b      	ldr	r3, [r7, #16]
 8030a42:	e853 3f00 	ldrex	r3, [r3]
 8030a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8030a48:	68fb      	ldr	r3, [r7, #12]
 8030a4a:	f023 0310 	bic.w	r3, r3, #16
 8030a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8030a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8030a52:	681b      	ldr	r3, [r3, #0]
 8030a54:	330c      	adds	r3, #12
 8030a56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8030a58:	61fa      	str	r2, [r7, #28]
 8030a5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030a5c:	69b9      	ldr	r1, [r7, #24]
 8030a5e:	69fa      	ldr	r2, [r7, #28]
 8030a60:	e841 2300 	strex	r3, r2, [r1]
 8030a64:	617b      	str	r3, [r7, #20]
   return(result);
 8030a66:	697b      	ldr	r3, [r7, #20]
 8030a68:	2b00      	cmp	r3, #0
 8030a6a:	d1e5      	bne.n	8030a38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8030a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8030a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030a70:	2b01      	cmp	r3, #1
 8030a72:	d106      	bne.n	8030a82 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8030a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8030a76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8030a78:	4619      	mov	r1, r3
 8030a7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8030a7c:	f7ff ff0e 	bl	803089c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8030a80:	e002      	b.n	8030a88 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8030a82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8030a84:	f008 f9ea 	bl	8038e5c <HAL_UART_RxCpltCallback>
}
 8030a88:	bf00      	nop
 8030a8a:	3770      	adds	r7, #112	; 0x70
 8030a8c:	46bd      	mov	sp, r7
 8030a8e:	bd80      	pop	{r7, pc}

08030a90 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8030a90:	b580      	push	{r7, lr}
 8030a92:	b084      	sub	sp, #16
 8030a94:	af00      	add	r7, sp, #0
 8030a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8030a98:	687b      	ldr	r3, [r7, #4]
 8030a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030a9c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8030a9e:	68fb      	ldr	r3, [r7, #12]
 8030aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030aa2:	2b01      	cmp	r3, #1
 8030aa4:	d108      	bne.n	8030ab8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8030aa6:	68fb      	ldr	r3, [r7, #12]
 8030aa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8030aaa:	085b      	lsrs	r3, r3, #1
 8030aac:	b29b      	uxth	r3, r3
 8030aae:	4619      	mov	r1, r3
 8030ab0:	68f8      	ldr	r0, [r7, #12]
 8030ab2:	f7ff fef3 	bl	803089c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8030ab6:	e002      	b.n	8030abe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8030ab8:	68f8      	ldr	r0, [r7, #12]
 8030aba:	f7ff fed1 	bl	8030860 <HAL_UART_RxHalfCpltCallback>
}
 8030abe:	bf00      	nop
 8030ac0:	3710      	adds	r7, #16
 8030ac2:	46bd      	mov	sp, r7
 8030ac4:	bd80      	pop	{r7, pc}

08030ac6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8030ac6:	b580      	push	{r7, lr}
 8030ac8:	b084      	sub	sp, #16
 8030aca:	af00      	add	r7, sp, #0
 8030acc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8030ace:	2300      	movs	r3, #0
 8030ad0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8030ad2:	687b      	ldr	r3, [r7, #4]
 8030ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030ad6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8030ad8:	68bb      	ldr	r3, [r7, #8]
 8030ada:	681b      	ldr	r3, [r3, #0]
 8030adc:	695b      	ldr	r3, [r3, #20]
 8030ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8030ae2:	2b80      	cmp	r3, #128	; 0x80
 8030ae4:	bf0c      	ite	eq
 8030ae6:	2301      	moveq	r3, #1
 8030ae8:	2300      	movne	r3, #0
 8030aea:	b2db      	uxtb	r3, r3
 8030aec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8030aee:	68bb      	ldr	r3, [r7, #8]
 8030af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030af4:	b2db      	uxtb	r3, r3
 8030af6:	2b21      	cmp	r3, #33	; 0x21
 8030af8:	d108      	bne.n	8030b0c <UART_DMAError+0x46>
 8030afa:	68fb      	ldr	r3, [r7, #12]
 8030afc:	2b00      	cmp	r3, #0
 8030afe:	d005      	beq.n	8030b0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8030b00:	68bb      	ldr	r3, [r7, #8]
 8030b02:	2200      	movs	r2, #0
 8030b04:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8030b06:	68b8      	ldr	r0, [r7, #8]
 8030b08:	f000 f972 	bl	8030df0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8030b0c:	68bb      	ldr	r3, [r7, #8]
 8030b0e:	681b      	ldr	r3, [r3, #0]
 8030b10:	695b      	ldr	r3, [r3, #20]
 8030b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8030b16:	2b40      	cmp	r3, #64	; 0x40
 8030b18:	bf0c      	ite	eq
 8030b1a:	2301      	moveq	r3, #1
 8030b1c:	2300      	movne	r3, #0
 8030b1e:	b2db      	uxtb	r3, r3
 8030b20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8030b22:	68bb      	ldr	r3, [r7, #8]
 8030b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8030b28:	b2db      	uxtb	r3, r3
 8030b2a:	2b22      	cmp	r3, #34	; 0x22
 8030b2c:	d108      	bne.n	8030b40 <UART_DMAError+0x7a>
 8030b2e:	68fb      	ldr	r3, [r7, #12]
 8030b30:	2b00      	cmp	r3, #0
 8030b32:	d005      	beq.n	8030b40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8030b34:	68bb      	ldr	r3, [r7, #8]
 8030b36:	2200      	movs	r2, #0
 8030b38:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8030b3a:	68b8      	ldr	r0, [r7, #8]
 8030b3c:	f000 f980 	bl	8030e40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8030b40:	68bb      	ldr	r3, [r7, #8]
 8030b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8030b44:	f043 0210 	orr.w	r2, r3, #16
 8030b48:	68bb      	ldr	r3, [r7, #8]
 8030b4a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8030b4c:	68b8      	ldr	r0, [r7, #8]
 8030b4e:	f7ff fe91 	bl	8030874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8030b52:	bf00      	nop
 8030b54:	3710      	adds	r7, #16
 8030b56:	46bd      	mov	sp, r7
 8030b58:	bd80      	pop	{r7, pc}

08030b5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8030b5a:	b580      	push	{r7, lr}
 8030b5c:	b090      	sub	sp, #64	; 0x40
 8030b5e:	af00      	add	r7, sp, #0
 8030b60:	60f8      	str	r0, [r7, #12]
 8030b62:	60b9      	str	r1, [r7, #8]
 8030b64:	603b      	str	r3, [r7, #0]
 8030b66:	4613      	mov	r3, r2
 8030b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8030b6a:	e050      	b.n	8030c0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8030b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8030b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8030b72:	d04c      	beq.n	8030c0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8030b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8030b76:	2b00      	cmp	r3, #0
 8030b78:	d007      	beq.n	8030b8a <UART_WaitOnFlagUntilTimeout+0x30>
 8030b7a:	f7f7 fccf 	bl	802851c <HAL_GetTick>
 8030b7e:	4602      	mov	r2, r0
 8030b80:	683b      	ldr	r3, [r7, #0]
 8030b82:	1ad3      	subs	r3, r2, r3
 8030b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8030b86:	429a      	cmp	r2, r3
 8030b88:	d241      	bcs.n	8030c0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8030b8a:	68fb      	ldr	r3, [r7, #12]
 8030b8c:	681b      	ldr	r3, [r3, #0]
 8030b8e:	330c      	adds	r3, #12
 8030b90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030b94:	e853 3f00 	ldrex	r3, [r3]
 8030b98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8030b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030b9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8030ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8030ba2:	68fb      	ldr	r3, [r7, #12]
 8030ba4:	681b      	ldr	r3, [r3, #0]
 8030ba6:	330c      	adds	r3, #12
 8030ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8030baa:	637a      	str	r2, [r7, #52]	; 0x34
 8030bac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030bae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8030bb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8030bb2:	e841 2300 	strex	r3, r2, [r1]
 8030bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8030bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030bba:	2b00      	cmp	r3, #0
 8030bbc:	d1e5      	bne.n	8030b8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8030bbe:	68fb      	ldr	r3, [r7, #12]
 8030bc0:	681b      	ldr	r3, [r3, #0]
 8030bc2:	3314      	adds	r3, #20
 8030bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030bc6:	697b      	ldr	r3, [r7, #20]
 8030bc8:	e853 3f00 	ldrex	r3, [r3]
 8030bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8030bce:	693b      	ldr	r3, [r7, #16]
 8030bd0:	f023 0301 	bic.w	r3, r3, #1
 8030bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8030bd6:	68fb      	ldr	r3, [r7, #12]
 8030bd8:	681b      	ldr	r3, [r3, #0]
 8030bda:	3314      	adds	r3, #20
 8030bdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8030bde:	623a      	str	r2, [r7, #32]
 8030be0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030be2:	69f9      	ldr	r1, [r7, #28]
 8030be4:	6a3a      	ldr	r2, [r7, #32]
 8030be6:	e841 2300 	strex	r3, r2, [r1]
 8030bea:	61bb      	str	r3, [r7, #24]
   return(result);
 8030bec:	69bb      	ldr	r3, [r7, #24]
 8030bee:	2b00      	cmp	r3, #0
 8030bf0:	d1e5      	bne.n	8030bbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8030bf2:	68fb      	ldr	r3, [r7, #12]
 8030bf4:	2220      	movs	r2, #32
 8030bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8030bfa:	68fb      	ldr	r3, [r7, #12]
 8030bfc:	2220      	movs	r2, #32
 8030bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8030c02:	68fb      	ldr	r3, [r7, #12]
 8030c04:	2200      	movs	r2, #0
 8030c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8030c0a:	2303      	movs	r3, #3
 8030c0c:	e00f      	b.n	8030c2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8030c0e:	68fb      	ldr	r3, [r7, #12]
 8030c10:	681b      	ldr	r3, [r3, #0]
 8030c12:	681a      	ldr	r2, [r3, #0]
 8030c14:	68bb      	ldr	r3, [r7, #8]
 8030c16:	4013      	ands	r3, r2
 8030c18:	68ba      	ldr	r2, [r7, #8]
 8030c1a:	429a      	cmp	r2, r3
 8030c1c:	bf0c      	ite	eq
 8030c1e:	2301      	moveq	r3, #1
 8030c20:	2300      	movne	r3, #0
 8030c22:	b2db      	uxtb	r3, r3
 8030c24:	461a      	mov	r2, r3
 8030c26:	79fb      	ldrb	r3, [r7, #7]
 8030c28:	429a      	cmp	r2, r3
 8030c2a:	d09f      	beq.n	8030b6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8030c2c:	2300      	movs	r3, #0
}
 8030c2e:	4618      	mov	r0, r3
 8030c30:	3740      	adds	r7, #64	; 0x40
 8030c32:	46bd      	mov	sp, r7
 8030c34:	bd80      	pop	{r7, pc}

08030c36 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8030c36:	b480      	push	{r7}
 8030c38:	b085      	sub	sp, #20
 8030c3a:	af00      	add	r7, sp, #0
 8030c3c:	60f8      	str	r0, [r7, #12]
 8030c3e:	60b9      	str	r1, [r7, #8]
 8030c40:	4613      	mov	r3, r2
 8030c42:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8030c44:	68fb      	ldr	r3, [r7, #12]
 8030c46:	68ba      	ldr	r2, [r7, #8]
 8030c48:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8030c4a:	68fb      	ldr	r3, [r7, #12]
 8030c4c:	88fa      	ldrh	r2, [r7, #6]
 8030c4e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8030c50:	68fb      	ldr	r3, [r7, #12]
 8030c52:	88fa      	ldrh	r2, [r7, #6]
 8030c54:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8030c56:	68fb      	ldr	r3, [r7, #12]
 8030c58:	2200      	movs	r2, #0
 8030c5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8030c5c:	68fb      	ldr	r3, [r7, #12]
 8030c5e:	2222      	movs	r2, #34	; 0x22
 8030c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8030c64:	68fb      	ldr	r3, [r7, #12]
 8030c66:	2200      	movs	r2, #0
 8030c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8030c6c:	68fb      	ldr	r3, [r7, #12]
 8030c6e:	691b      	ldr	r3, [r3, #16]
 8030c70:	2b00      	cmp	r3, #0
 8030c72:	d007      	beq.n	8030c84 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8030c74:	68fb      	ldr	r3, [r7, #12]
 8030c76:	681b      	ldr	r3, [r3, #0]
 8030c78:	68da      	ldr	r2, [r3, #12]
 8030c7a:	68fb      	ldr	r3, [r7, #12]
 8030c7c:	681b      	ldr	r3, [r3, #0]
 8030c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8030c82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8030c84:	68fb      	ldr	r3, [r7, #12]
 8030c86:	681b      	ldr	r3, [r3, #0]
 8030c88:	695a      	ldr	r2, [r3, #20]
 8030c8a:	68fb      	ldr	r3, [r7, #12]
 8030c8c:	681b      	ldr	r3, [r3, #0]
 8030c8e:	f042 0201 	orr.w	r2, r2, #1
 8030c92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8030c94:	68fb      	ldr	r3, [r7, #12]
 8030c96:	681b      	ldr	r3, [r3, #0]
 8030c98:	68da      	ldr	r2, [r3, #12]
 8030c9a:	68fb      	ldr	r3, [r7, #12]
 8030c9c:	681b      	ldr	r3, [r3, #0]
 8030c9e:	f042 0220 	orr.w	r2, r2, #32
 8030ca2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8030ca4:	2300      	movs	r3, #0
}
 8030ca6:	4618      	mov	r0, r3
 8030ca8:	3714      	adds	r7, #20
 8030caa:	46bd      	mov	sp, r7
 8030cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030cb0:	4770      	bx	lr
	...

08030cb4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8030cb4:	b580      	push	{r7, lr}
 8030cb6:	b098      	sub	sp, #96	; 0x60
 8030cb8:	af00      	add	r7, sp, #0
 8030cba:	60f8      	str	r0, [r7, #12]
 8030cbc:	60b9      	str	r1, [r7, #8]
 8030cbe:	4613      	mov	r3, r2
 8030cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8030cc2:	68ba      	ldr	r2, [r7, #8]
 8030cc4:	68fb      	ldr	r3, [r7, #12]
 8030cc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8030cc8:	68fb      	ldr	r3, [r7, #12]
 8030cca:	88fa      	ldrh	r2, [r7, #6]
 8030ccc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8030cce:	68fb      	ldr	r3, [r7, #12]
 8030cd0:	2200      	movs	r2, #0
 8030cd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8030cd4:	68fb      	ldr	r3, [r7, #12]
 8030cd6:	2222      	movs	r2, #34	; 0x22
 8030cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8030cdc:	68fb      	ldr	r3, [r7, #12]
 8030cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030ce0:	4a40      	ldr	r2, [pc, #256]	; (8030de4 <UART_Start_Receive_DMA+0x130>)
 8030ce2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8030ce4:	68fb      	ldr	r3, [r7, #12]
 8030ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030ce8:	4a3f      	ldr	r2, [pc, #252]	; (8030de8 <UART_Start_Receive_DMA+0x134>)
 8030cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8030cec:	68fb      	ldr	r3, [r7, #12]
 8030cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030cf0:	4a3e      	ldr	r2, [pc, #248]	; (8030dec <UART_Start_Receive_DMA+0x138>)
 8030cf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8030cf4:	68fb      	ldr	r3, [r7, #12]
 8030cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030cf8:	2200      	movs	r2, #0
 8030cfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8030cfc:	f107 0308 	add.w	r3, r7, #8
 8030d00:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8030d02:	68fb      	ldr	r3, [r7, #12]
 8030d04:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8030d06:	68fb      	ldr	r3, [r7, #12]
 8030d08:	681b      	ldr	r3, [r3, #0]
 8030d0a:	3304      	adds	r3, #4
 8030d0c:	4619      	mov	r1, r3
 8030d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8030d10:	681a      	ldr	r2, [r3, #0]
 8030d12:	88fb      	ldrh	r3, [r7, #6]
 8030d14:	f7f8 fcfe 	bl	8029714 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8030d18:	2300      	movs	r3, #0
 8030d1a:	613b      	str	r3, [r7, #16]
 8030d1c:	68fb      	ldr	r3, [r7, #12]
 8030d1e:	681b      	ldr	r3, [r3, #0]
 8030d20:	681b      	ldr	r3, [r3, #0]
 8030d22:	613b      	str	r3, [r7, #16]
 8030d24:	68fb      	ldr	r3, [r7, #12]
 8030d26:	681b      	ldr	r3, [r3, #0]
 8030d28:	685b      	ldr	r3, [r3, #4]
 8030d2a:	613b      	str	r3, [r7, #16]
 8030d2c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8030d2e:	68fb      	ldr	r3, [r7, #12]
 8030d30:	2200      	movs	r2, #0
 8030d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8030d36:	68fb      	ldr	r3, [r7, #12]
 8030d38:	691b      	ldr	r3, [r3, #16]
 8030d3a:	2b00      	cmp	r3, #0
 8030d3c:	d019      	beq.n	8030d72 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8030d3e:	68fb      	ldr	r3, [r7, #12]
 8030d40:	681b      	ldr	r3, [r3, #0]
 8030d42:	330c      	adds	r3, #12
 8030d44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8030d48:	e853 3f00 	ldrex	r3, [r3]
 8030d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8030d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8030d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8030d54:	65bb      	str	r3, [r7, #88]	; 0x58
 8030d56:	68fb      	ldr	r3, [r7, #12]
 8030d58:	681b      	ldr	r3, [r3, #0]
 8030d5a:	330c      	adds	r3, #12
 8030d5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8030d5e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8030d60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030d62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8030d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8030d66:	e841 2300 	strex	r3, r2, [r1]
 8030d6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8030d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8030d6e:	2b00      	cmp	r3, #0
 8030d70:	d1e5      	bne.n	8030d3e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8030d72:	68fb      	ldr	r3, [r7, #12]
 8030d74:	681b      	ldr	r3, [r3, #0]
 8030d76:	3314      	adds	r3, #20
 8030d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8030d7c:	e853 3f00 	ldrex	r3, [r3]
 8030d80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8030d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8030d84:	f043 0301 	orr.w	r3, r3, #1
 8030d88:	657b      	str	r3, [r7, #84]	; 0x54
 8030d8a:	68fb      	ldr	r3, [r7, #12]
 8030d8c:	681b      	ldr	r3, [r3, #0]
 8030d8e:	3314      	adds	r3, #20
 8030d90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8030d92:	63ba      	str	r2, [r7, #56]	; 0x38
 8030d94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030d96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8030d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8030d9a:	e841 2300 	strex	r3, r2, [r1]
 8030d9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8030da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030da2:	2b00      	cmp	r3, #0
 8030da4:	d1e5      	bne.n	8030d72 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8030da6:	68fb      	ldr	r3, [r7, #12]
 8030da8:	681b      	ldr	r3, [r3, #0]
 8030daa:	3314      	adds	r3, #20
 8030dac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030dae:	69bb      	ldr	r3, [r7, #24]
 8030db0:	e853 3f00 	ldrex	r3, [r3]
 8030db4:	617b      	str	r3, [r7, #20]
   return(result);
 8030db6:	697b      	ldr	r3, [r7, #20]
 8030db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8030dbe:	68fb      	ldr	r3, [r7, #12]
 8030dc0:	681b      	ldr	r3, [r3, #0]
 8030dc2:	3314      	adds	r3, #20
 8030dc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8030dc6:	627a      	str	r2, [r7, #36]	; 0x24
 8030dc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030dca:	6a39      	ldr	r1, [r7, #32]
 8030dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8030dce:	e841 2300 	strex	r3, r2, [r1]
 8030dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8030dd4:	69fb      	ldr	r3, [r7, #28]
 8030dd6:	2b00      	cmp	r3, #0
 8030dd8:	d1e5      	bne.n	8030da6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8030dda:	2300      	movs	r3, #0
}
 8030ddc:	4618      	mov	r0, r3
 8030dde:	3760      	adds	r7, #96	; 0x60
 8030de0:	46bd      	mov	sp, r7
 8030de2:	bd80      	pop	{r7, pc}
 8030de4:	0803096b 	.word	0x0803096b
 8030de8:	08030a91 	.word	0x08030a91
 8030dec:	08030ac7 	.word	0x08030ac7

08030df0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8030df0:	b480      	push	{r7}
 8030df2:	b089      	sub	sp, #36	; 0x24
 8030df4:	af00      	add	r7, sp, #0
 8030df6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8030df8:	687b      	ldr	r3, [r7, #4]
 8030dfa:	681b      	ldr	r3, [r3, #0]
 8030dfc:	330c      	adds	r3, #12
 8030dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030e00:	68fb      	ldr	r3, [r7, #12]
 8030e02:	e853 3f00 	ldrex	r3, [r3]
 8030e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8030e08:	68bb      	ldr	r3, [r7, #8]
 8030e0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8030e0e:	61fb      	str	r3, [r7, #28]
 8030e10:	687b      	ldr	r3, [r7, #4]
 8030e12:	681b      	ldr	r3, [r3, #0]
 8030e14:	330c      	adds	r3, #12
 8030e16:	69fa      	ldr	r2, [r7, #28]
 8030e18:	61ba      	str	r2, [r7, #24]
 8030e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030e1c:	6979      	ldr	r1, [r7, #20]
 8030e1e:	69ba      	ldr	r2, [r7, #24]
 8030e20:	e841 2300 	strex	r3, r2, [r1]
 8030e24:	613b      	str	r3, [r7, #16]
   return(result);
 8030e26:	693b      	ldr	r3, [r7, #16]
 8030e28:	2b00      	cmp	r3, #0
 8030e2a:	d1e5      	bne.n	8030df8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8030e2c:	687b      	ldr	r3, [r7, #4]
 8030e2e:	2220      	movs	r2, #32
 8030e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8030e34:	bf00      	nop
 8030e36:	3724      	adds	r7, #36	; 0x24
 8030e38:	46bd      	mov	sp, r7
 8030e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030e3e:	4770      	bx	lr

08030e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8030e40:	b480      	push	{r7}
 8030e42:	b095      	sub	sp, #84	; 0x54
 8030e44:	af00      	add	r7, sp, #0
 8030e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8030e48:	687b      	ldr	r3, [r7, #4]
 8030e4a:	681b      	ldr	r3, [r3, #0]
 8030e4c:	330c      	adds	r3, #12
 8030e4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8030e52:	e853 3f00 	ldrex	r3, [r3]
 8030e56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8030e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8030e5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8030e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8030e60:	687b      	ldr	r3, [r7, #4]
 8030e62:	681b      	ldr	r3, [r3, #0]
 8030e64:	330c      	adds	r3, #12
 8030e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8030e68:	643a      	str	r2, [r7, #64]	; 0x40
 8030e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030e6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8030e6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8030e70:	e841 2300 	strex	r3, r2, [r1]
 8030e74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8030e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8030e78:	2b00      	cmp	r3, #0
 8030e7a:	d1e5      	bne.n	8030e48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8030e7c:	687b      	ldr	r3, [r7, #4]
 8030e7e:	681b      	ldr	r3, [r3, #0]
 8030e80:	3314      	adds	r3, #20
 8030e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030e84:	6a3b      	ldr	r3, [r7, #32]
 8030e86:	e853 3f00 	ldrex	r3, [r3]
 8030e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8030e8c:	69fb      	ldr	r3, [r7, #28]
 8030e8e:	f023 0301 	bic.w	r3, r3, #1
 8030e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8030e94:	687b      	ldr	r3, [r7, #4]
 8030e96:	681b      	ldr	r3, [r3, #0]
 8030e98:	3314      	adds	r3, #20
 8030e9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8030e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8030e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8030ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8030ea4:	e841 2300 	strex	r3, r2, [r1]
 8030ea8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8030eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8030eac:	2b00      	cmp	r3, #0
 8030eae:	d1e5      	bne.n	8030e7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8030eb0:	687b      	ldr	r3, [r7, #4]
 8030eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8030eb4:	2b01      	cmp	r3, #1
 8030eb6:	d119      	bne.n	8030eec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8030eb8:	687b      	ldr	r3, [r7, #4]
 8030eba:	681b      	ldr	r3, [r3, #0]
 8030ebc:	330c      	adds	r3, #12
 8030ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8030ec0:	68fb      	ldr	r3, [r7, #12]
 8030ec2:	e853 3f00 	ldrex	r3, [r3]
 8030ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8030ec8:	68bb      	ldr	r3, [r7, #8]
 8030eca:	f023 0310 	bic.w	r3, r3, #16
 8030ece:	647b      	str	r3, [r7, #68]	; 0x44
 8030ed0:	687b      	ldr	r3, [r7, #4]
 8030ed2:	681b      	ldr	r3, [r3, #0]
 8030ed4:	330c      	adds	r3, #12
 8030ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8030ed8:	61ba      	str	r2, [r7, #24]
 8030eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8030edc:	6979      	ldr	r1, [r7, #20]
 8030ede:	69ba      	ldr	r2, [r7, #24]
 8030ee0:	e841 2300 	strex	r3, r2, [r1]
 8030ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8030ee6:	693b      	ldr	r3, [r7, #16]
 8030ee8:	2b00      	cmp	r3, #0
 8030eea:	d1e5      	bne.n	8030eb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8030eec:	687b      	ldr	r3, [r7, #4]
 8030eee:	2220      	movs	r2, #32
 8030ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8030ef4:	687b      	ldr	r3, [r7, #4]
 8030ef6:	2200      	movs	r2, #0
 8030ef8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8030efa:	bf00      	nop
 8030efc:	3754      	adds	r7, #84	; 0x54
 8030efe:	46bd      	mov	sp, r7
 8030f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8030f04:	4770      	bx	lr

08030f06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8030f06:	b580      	push	{r7, lr}
 8030f08:	b084      	sub	sp, #16
 8030f0a:	af00      	add	r7, sp, #0
 8030f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8030f0e:	687b      	ldr	r3, [r7, #4]
 8030f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030f12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8030f14:	68fb      	ldr	r3, [r7, #12]
 8030f16:	2200      	movs	r2, #0
 8030f18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8030f1a:	68fb      	ldr	r3, [r7, #12]
 8030f1c:	2200      	movs	r2, #0
 8030f1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8030f20:	68f8      	ldr	r0, [r7, #12]
 8030f22:	f7ff fca7 	bl	8030874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8030f26:	bf00      	nop
 8030f28:	3710      	adds	r7, #16
 8030f2a:	46bd      	mov	sp, r7
 8030f2c:	bd80      	pop	{r7, pc}

08030f2e <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8030f2e:	b580      	push	{r7, lr}
 8030f30:	b084      	sub	sp, #16
 8030f32:	af00      	add	r7, sp, #0
 8030f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8030f36:	687b      	ldr	r3, [r7, #4]
 8030f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030f3a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8030f3c:	68fb      	ldr	r3, [r7, #12]
 8030f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030f40:	2200      	movs	r2, #0
 8030f42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8030f44:	68fb      	ldr	r3, [r7, #12]
 8030f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030f48:	2b00      	cmp	r3, #0
 8030f4a:	d004      	beq.n	8030f56 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8030f4c:	68fb      	ldr	r3, [r7, #12]
 8030f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8030f52:	2b00      	cmp	r3, #0
 8030f54:	d117      	bne.n	8030f86 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8030f56:	68fb      	ldr	r3, [r7, #12]
 8030f58:	2200      	movs	r2, #0
 8030f5a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8030f5c:	68fb      	ldr	r3, [r7, #12]
 8030f5e:	2200      	movs	r2, #0
 8030f60:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8030f62:	68fb      	ldr	r3, [r7, #12]
 8030f64:	2200      	movs	r2, #0
 8030f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8030f68:	68fb      	ldr	r3, [r7, #12]
 8030f6a:	2220      	movs	r2, #32
 8030f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8030f70:	68fb      	ldr	r3, [r7, #12]
 8030f72:	2220      	movs	r2, #32
 8030f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8030f78:	68fb      	ldr	r3, [r7, #12]
 8030f7a:	2200      	movs	r2, #0
 8030f7c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8030f7e:	68f8      	ldr	r0, [r7, #12]
 8030f80:	f7ff fc82 	bl	8030888 <HAL_UART_AbortCpltCallback>
 8030f84:	e000      	b.n	8030f88 <UART_DMATxAbortCallback+0x5a>
      return;
 8030f86:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8030f88:	3710      	adds	r7, #16
 8030f8a:	46bd      	mov	sp, r7
 8030f8c:	bd80      	pop	{r7, pc}

08030f8e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8030f8e:	b580      	push	{r7, lr}
 8030f90:	b084      	sub	sp, #16
 8030f92:	af00      	add	r7, sp, #0
 8030f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8030f96:	687b      	ldr	r3, [r7, #4]
 8030f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030f9a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8030f9c:	68fb      	ldr	r3, [r7, #12]
 8030f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8030fa0:	2200      	movs	r2, #0
 8030fa2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8030fa4:	68fb      	ldr	r3, [r7, #12]
 8030fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030fa8:	2b00      	cmp	r3, #0
 8030faa:	d004      	beq.n	8030fb6 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8030fac:	68fb      	ldr	r3, [r7, #12]
 8030fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8030fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8030fb2:	2b00      	cmp	r3, #0
 8030fb4:	d117      	bne.n	8030fe6 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8030fb6:	68fb      	ldr	r3, [r7, #12]
 8030fb8:	2200      	movs	r2, #0
 8030fba:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8030fbc:	68fb      	ldr	r3, [r7, #12]
 8030fbe:	2200      	movs	r2, #0
 8030fc0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8030fc2:	68fb      	ldr	r3, [r7, #12]
 8030fc4:	2200      	movs	r2, #0
 8030fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8030fc8:	68fb      	ldr	r3, [r7, #12]
 8030fca:	2220      	movs	r2, #32
 8030fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8030fd0:	68fb      	ldr	r3, [r7, #12]
 8030fd2:	2220      	movs	r2, #32
 8030fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8030fd8:	68fb      	ldr	r3, [r7, #12]
 8030fda:	2200      	movs	r2, #0
 8030fdc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8030fde:	68f8      	ldr	r0, [r7, #12]
 8030fe0:	f7ff fc52 	bl	8030888 <HAL_UART_AbortCpltCallback>
 8030fe4:	e000      	b.n	8030fe8 <UART_DMARxAbortCallback+0x5a>
      return;
 8030fe6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8030fe8:	3710      	adds	r7, #16
 8030fea:	46bd      	mov	sp, r7
 8030fec:	bd80      	pop	{r7, pc}

08030fee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8030fee:	b480      	push	{r7}
 8030ff0:	b085      	sub	sp, #20
 8030ff2:	af00      	add	r7, sp, #0
 8030ff4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8030ff6:	687b      	ldr	r3, [r7, #4]
 8030ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8030ffc:	b2db      	uxtb	r3, r3
 8030ffe:	2b21      	cmp	r3, #33	; 0x21
 8031000:	d13e      	bne.n	8031080 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8031002:	687b      	ldr	r3, [r7, #4]
 8031004:	689b      	ldr	r3, [r3, #8]
 8031006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803100a:	d114      	bne.n	8031036 <UART_Transmit_IT+0x48>
 803100c:	687b      	ldr	r3, [r7, #4]
 803100e:	691b      	ldr	r3, [r3, #16]
 8031010:	2b00      	cmp	r3, #0
 8031012:	d110      	bne.n	8031036 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8031014:	687b      	ldr	r3, [r7, #4]
 8031016:	6a1b      	ldr	r3, [r3, #32]
 8031018:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 803101a:	68fb      	ldr	r3, [r7, #12]
 803101c:	881b      	ldrh	r3, [r3, #0]
 803101e:	461a      	mov	r2, r3
 8031020:	687b      	ldr	r3, [r7, #4]
 8031022:	681b      	ldr	r3, [r3, #0]
 8031024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8031028:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 803102a:	687b      	ldr	r3, [r7, #4]
 803102c:	6a1b      	ldr	r3, [r3, #32]
 803102e:	1c9a      	adds	r2, r3, #2
 8031030:	687b      	ldr	r3, [r7, #4]
 8031032:	621a      	str	r2, [r3, #32]
 8031034:	e008      	b.n	8031048 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8031036:	687b      	ldr	r3, [r7, #4]
 8031038:	6a1b      	ldr	r3, [r3, #32]
 803103a:	1c59      	adds	r1, r3, #1
 803103c:	687a      	ldr	r2, [r7, #4]
 803103e:	6211      	str	r1, [r2, #32]
 8031040:	781a      	ldrb	r2, [r3, #0]
 8031042:	687b      	ldr	r3, [r7, #4]
 8031044:	681b      	ldr	r3, [r3, #0]
 8031046:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8031048:	687b      	ldr	r3, [r7, #4]
 803104a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 803104c:	b29b      	uxth	r3, r3
 803104e:	3b01      	subs	r3, #1
 8031050:	b29b      	uxth	r3, r3
 8031052:	687a      	ldr	r2, [r7, #4]
 8031054:	4619      	mov	r1, r3
 8031056:	84d1      	strh	r1, [r2, #38]	; 0x26
 8031058:	2b00      	cmp	r3, #0
 803105a:	d10f      	bne.n	803107c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 803105c:	687b      	ldr	r3, [r7, #4]
 803105e:	681b      	ldr	r3, [r3, #0]
 8031060:	68da      	ldr	r2, [r3, #12]
 8031062:	687b      	ldr	r3, [r7, #4]
 8031064:	681b      	ldr	r3, [r3, #0]
 8031066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 803106a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 803106c:	687b      	ldr	r3, [r7, #4]
 803106e:	681b      	ldr	r3, [r3, #0]
 8031070:	68da      	ldr	r2, [r3, #12]
 8031072:	687b      	ldr	r3, [r7, #4]
 8031074:	681b      	ldr	r3, [r3, #0]
 8031076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803107a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 803107c:	2300      	movs	r3, #0
 803107e:	e000      	b.n	8031082 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8031080:	2302      	movs	r3, #2
  }
}
 8031082:	4618      	mov	r0, r3
 8031084:	3714      	adds	r7, #20
 8031086:	46bd      	mov	sp, r7
 8031088:	f85d 7b04 	ldr.w	r7, [sp], #4
 803108c:	4770      	bx	lr

0803108e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 803108e:	b580      	push	{r7, lr}
 8031090:	b082      	sub	sp, #8
 8031092:	af00      	add	r7, sp, #0
 8031094:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8031096:	687b      	ldr	r3, [r7, #4]
 8031098:	681b      	ldr	r3, [r3, #0]
 803109a:	68da      	ldr	r2, [r3, #12]
 803109c:	687b      	ldr	r3, [r7, #4]
 803109e:	681b      	ldr	r3, [r3, #0]
 80310a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80310a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80310a6:	687b      	ldr	r3, [r7, #4]
 80310a8:	2220      	movs	r2, #32
 80310aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80310ae:	6878      	ldr	r0, [r7, #4]
 80310b0:	f007 fea8 	bl	8038e04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80310b4:	2300      	movs	r3, #0
}
 80310b6:	4618      	mov	r0, r3
 80310b8:	3708      	adds	r7, #8
 80310ba:	46bd      	mov	sp, r7
 80310bc:	bd80      	pop	{r7, pc}

080310be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80310be:	b580      	push	{r7, lr}
 80310c0:	b08c      	sub	sp, #48	; 0x30
 80310c2:	af00      	add	r7, sp, #0
 80310c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80310c6:	687b      	ldr	r3, [r7, #4]
 80310c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80310cc:	b2db      	uxtb	r3, r3
 80310ce:	2b22      	cmp	r3, #34	; 0x22
 80310d0:	f040 80ab 	bne.w	803122a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80310d4:	687b      	ldr	r3, [r7, #4]
 80310d6:	689b      	ldr	r3, [r3, #8]
 80310d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80310dc:	d117      	bne.n	803110e <UART_Receive_IT+0x50>
 80310de:	687b      	ldr	r3, [r7, #4]
 80310e0:	691b      	ldr	r3, [r3, #16]
 80310e2:	2b00      	cmp	r3, #0
 80310e4:	d113      	bne.n	803110e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80310e6:	2300      	movs	r3, #0
 80310e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80310ea:	687b      	ldr	r3, [r7, #4]
 80310ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80310ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80310f0:	687b      	ldr	r3, [r7, #4]
 80310f2:	681b      	ldr	r3, [r3, #0]
 80310f4:	685b      	ldr	r3, [r3, #4]
 80310f6:	b29b      	uxth	r3, r3
 80310f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80310fc:	b29a      	uxth	r2, r3
 80310fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8031100:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8031102:	687b      	ldr	r3, [r7, #4]
 8031104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031106:	1c9a      	adds	r2, r3, #2
 8031108:	687b      	ldr	r3, [r7, #4]
 803110a:	629a      	str	r2, [r3, #40]	; 0x28
 803110c:	e026      	b.n	803115c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 803110e:	687b      	ldr	r3, [r7, #4]
 8031110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031112:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8031114:	2300      	movs	r3, #0
 8031116:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8031118:	687b      	ldr	r3, [r7, #4]
 803111a:	689b      	ldr	r3, [r3, #8]
 803111c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8031120:	d007      	beq.n	8031132 <UART_Receive_IT+0x74>
 8031122:	687b      	ldr	r3, [r7, #4]
 8031124:	689b      	ldr	r3, [r3, #8]
 8031126:	2b00      	cmp	r3, #0
 8031128:	d10a      	bne.n	8031140 <UART_Receive_IT+0x82>
 803112a:	687b      	ldr	r3, [r7, #4]
 803112c:	691b      	ldr	r3, [r3, #16]
 803112e:	2b00      	cmp	r3, #0
 8031130:	d106      	bne.n	8031140 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8031132:	687b      	ldr	r3, [r7, #4]
 8031134:	681b      	ldr	r3, [r3, #0]
 8031136:	685b      	ldr	r3, [r3, #4]
 8031138:	b2da      	uxtb	r2, r3
 803113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803113c:	701a      	strb	r2, [r3, #0]
 803113e:	e008      	b.n	8031152 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8031140:	687b      	ldr	r3, [r7, #4]
 8031142:	681b      	ldr	r3, [r3, #0]
 8031144:	685b      	ldr	r3, [r3, #4]
 8031146:	b2db      	uxtb	r3, r3
 8031148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803114c:	b2da      	uxtb	r2, r3
 803114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8031150:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8031152:	687b      	ldr	r3, [r7, #4]
 8031154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031156:	1c5a      	adds	r2, r3, #1
 8031158:	687b      	ldr	r3, [r7, #4]
 803115a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 803115c:	687b      	ldr	r3, [r7, #4]
 803115e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8031160:	b29b      	uxth	r3, r3
 8031162:	3b01      	subs	r3, #1
 8031164:	b29b      	uxth	r3, r3
 8031166:	687a      	ldr	r2, [r7, #4]
 8031168:	4619      	mov	r1, r3
 803116a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 803116c:	2b00      	cmp	r3, #0
 803116e:	d15a      	bne.n	8031226 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8031170:	687b      	ldr	r3, [r7, #4]
 8031172:	681b      	ldr	r3, [r3, #0]
 8031174:	68da      	ldr	r2, [r3, #12]
 8031176:	687b      	ldr	r3, [r7, #4]
 8031178:	681b      	ldr	r3, [r3, #0]
 803117a:	f022 0220 	bic.w	r2, r2, #32
 803117e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8031180:	687b      	ldr	r3, [r7, #4]
 8031182:	681b      	ldr	r3, [r3, #0]
 8031184:	68da      	ldr	r2, [r3, #12]
 8031186:	687b      	ldr	r3, [r7, #4]
 8031188:	681b      	ldr	r3, [r3, #0]
 803118a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 803118e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8031190:	687b      	ldr	r3, [r7, #4]
 8031192:	681b      	ldr	r3, [r3, #0]
 8031194:	695a      	ldr	r2, [r3, #20]
 8031196:	687b      	ldr	r3, [r7, #4]
 8031198:	681b      	ldr	r3, [r3, #0]
 803119a:	f022 0201 	bic.w	r2, r2, #1
 803119e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80311a0:	687b      	ldr	r3, [r7, #4]
 80311a2:	2220      	movs	r2, #32
 80311a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80311a8:	687b      	ldr	r3, [r7, #4]
 80311aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80311ac:	2b01      	cmp	r3, #1
 80311ae:	d135      	bne.n	803121c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80311b0:	687b      	ldr	r3, [r7, #4]
 80311b2:	2200      	movs	r2, #0
 80311b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80311b6:	687b      	ldr	r3, [r7, #4]
 80311b8:	681b      	ldr	r3, [r3, #0]
 80311ba:	330c      	adds	r3, #12
 80311bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80311be:	697b      	ldr	r3, [r7, #20]
 80311c0:	e853 3f00 	ldrex	r3, [r3]
 80311c4:	613b      	str	r3, [r7, #16]
   return(result);
 80311c6:	693b      	ldr	r3, [r7, #16]
 80311c8:	f023 0310 	bic.w	r3, r3, #16
 80311cc:	627b      	str	r3, [r7, #36]	; 0x24
 80311ce:	687b      	ldr	r3, [r7, #4]
 80311d0:	681b      	ldr	r3, [r3, #0]
 80311d2:	330c      	adds	r3, #12
 80311d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80311d6:	623a      	str	r2, [r7, #32]
 80311d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80311da:	69f9      	ldr	r1, [r7, #28]
 80311dc:	6a3a      	ldr	r2, [r7, #32]
 80311de:	e841 2300 	strex	r3, r2, [r1]
 80311e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80311e4:	69bb      	ldr	r3, [r7, #24]
 80311e6:	2b00      	cmp	r3, #0
 80311e8:	d1e5      	bne.n	80311b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80311ea:	687b      	ldr	r3, [r7, #4]
 80311ec:	681b      	ldr	r3, [r3, #0]
 80311ee:	681b      	ldr	r3, [r3, #0]
 80311f0:	f003 0310 	and.w	r3, r3, #16
 80311f4:	2b10      	cmp	r3, #16
 80311f6:	d10a      	bne.n	803120e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80311f8:	2300      	movs	r3, #0
 80311fa:	60fb      	str	r3, [r7, #12]
 80311fc:	687b      	ldr	r3, [r7, #4]
 80311fe:	681b      	ldr	r3, [r3, #0]
 8031200:	681b      	ldr	r3, [r3, #0]
 8031202:	60fb      	str	r3, [r7, #12]
 8031204:	687b      	ldr	r3, [r7, #4]
 8031206:	681b      	ldr	r3, [r3, #0]
 8031208:	685b      	ldr	r3, [r3, #4]
 803120a:	60fb      	str	r3, [r7, #12]
 803120c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 803120e:	687b      	ldr	r3, [r7, #4]
 8031210:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8031212:	4619      	mov	r1, r3
 8031214:	6878      	ldr	r0, [r7, #4]
 8031216:	f7ff fb41 	bl	803089c <HAL_UARTEx_RxEventCallback>
 803121a:	e002      	b.n	8031222 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 803121c:	6878      	ldr	r0, [r7, #4]
 803121e:	f007 fe1d 	bl	8038e5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8031222:	2300      	movs	r3, #0
 8031224:	e002      	b.n	803122c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8031226:	2300      	movs	r3, #0
 8031228:	e000      	b.n	803122c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 803122a:	2302      	movs	r3, #2
  }
}
 803122c:	4618      	mov	r0, r3
 803122e:	3730      	adds	r7, #48	; 0x30
 8031230:	46bd      	mov	sp, r7
 8031232:	bd80      	pop	{r7, pc}

08031234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8031234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8031238:	b0c0      	sub	sp, #256	; 0x100
 803123a:	af00      	add	r7, sp, #0
 803123c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8031240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031244:	681b      	ldr	r3, [r3, #0]
 8031246:	691b      	ldr	r3, [r3, #16]
 8031248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 803124c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031250:	68d9      	ldr	r1, [r3, #12]
 8031252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031256:	681a      	ldr	r2, [r3, #0]
 8031258:	ea40 0301 	orr.w	r3, r0, r1
 803125c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 803125e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031262:	689a      	ldr	r2, [r3, #8]
 8031264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031268:	691b      	ldr	r3, [r3, #16]
 803126a:	431a      	orrs	r2, r3
 803126c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031270:	695b      	ldr	r3, [r3, #20]
 8031272:	431a      	orrs	r2, r3
 8031274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031278:	69db      	ldr	r3, [r3, #28]
 803127a:	4313      	orrs	r3, r2
 803127c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8031280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031284:	681b      	ldr	r3, [r3, #0]
 8031286:	68db      	ldr	r3, [r3, #12]
 8031288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 803128c:	f021 010c 	bic.w	r1, r1, #12
 8031290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031294:	681a      	ldr	r2, [r3, #0]
 8031296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 803129a:	430b      	orrs	r3, r1
 803129c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 803129e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80312a2:	681b      	ldr	r3, [r3, #0]
 80312a4:	695b      	ldr	r3, [r3, #20]
 80312a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80312aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80312ae:	6999      	ldr	r1, [r3, #24]
 80312b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80312b4:	681a      	ldr	r2, [r3, #0]
 80312b6:	ea40 0301 	orr.w	r3, r0, r1
 80312ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80312bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80312c0:	681a      	ldr	r2, [r3, #0]
 80312c2:	4b8f      	ldr	r3, [pc, #572]	; (8031500 <UART_SetConfig+0x2cc>)
 80312c4:	429a      	cmp	r2, r3
 80312c6:	d005      	beq.n	80312d4 <UART_SetConfig+0xa0>
 80312c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80312cc:	681a      	ldr	r2, [r3, #0]
 80312ce:	4b8d      	ldr	r3, [pc, #564]	; (8031504 <UART_SetConfig+0x2d0>)
 80312d0:	429a      	cmp	r2, r3
 80312d2:	d104      	bne.n	80312de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80312d4:	f7fc f8e4 	bl	802d4a0 <HAL_RCC_GetPCLK2Freq>
 80312d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80312dc:	e003      	b.n	80312e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80312de:	f7fc f8cb 	bl	802d478 <HAL_RCC_GetPCLK1Freq>
 80312e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80312e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80312ea:	69db      	ldr	r3, [r3, #28]
 80312ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80312f0:	f040 810c 	bne.w	803150c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80312f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80312f8:	2200      	movs	r2, #0
 80312fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80312fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8031302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8031306:	4622      	mov	r2, r4
 8031308:	462b      	mov	r3, r5
 803130a:	1891      	adds	r1, r2, r2
 803130c:	65b9      	str	r1, [r7, #88]	; 0x58
 803130e:	415b      	adcs	r3, r3
 8031310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8031312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8031316:	4621      	mov	r1, r4
 8031318:	eb12 0801 	adds.w	r8, r2, r1
 803131c:	4629      	mov	r1, r5
 803131e:	eb43 0901 	adc.w	r9, r3, r1
 8031322:	f04f 0200 	mov.w	r2, #0
 8031326:	f04f 0300 	mov.w	r3, #0
 803132a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 803132e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8031332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8031336:	4690      	mov	r8, r2
 8031338:	4699      	mov	r9, r3
 803133a:	4623      	mov	r3, r4
 803133c:	eb18 0303 	adds.w	r3, r8, r3
 8031340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8031344:	462b      	mov	r3, r5
 8031346:	eb49 0303 	adc.w	r3, r9, r3
 803134a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 803134e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031352:	685b      	ldr	r3, [r3, #4]
 8031354:	2200      	movs	r2, #0
 8031356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 803135a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 803135e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8031362:	460b      	mov	r3, r1
 8031364:	18db      	adds	r3, r3, r3
 8031366:	653b      	str	r3, [r7, #80]	; 0x50
 8031368:	4613      	mov	r3, r2
 803136a:	eb42 0303 	adc.w	r3, r2, r3
 803136e:	657b      	str	r3, [r7, #84]	; 0x54
 8031370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8031374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8031378:	f7ef fcb6 	bl	8020ce8 <__aeabi_uldivmod>
 803137c:	4602      	mov	r2, r0
 803137e:	460b      	mov	r3, r1
 8031380:	4b61      	ldr	r3, [pc, #388]	; (8031508 <UART_SetConfig+0x2d4>)
 8031382:	fba3 2302 	umull	r2, r3, r3, r2
 8031386:	095b      	lsrs	r3, r3, #5
 8031388:	011c      	lsls	r4, r3, #4
 803138a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 803138e:	2200      	movs	r2, #0
 8031390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8031394:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8031398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 803139c:	4642      	mov	r2, r8
 803139e:	464b      	mov	r3, r9
 80313a0:	1891      	adds	r1, r2, r2
 80313a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80313a4:	415b      	adcs	r3, r3
 80313a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80313a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80313ac:	4641      	mov	r1, r8
 80313ae:	eb12 0a01 	adds.w	sl, r2, r1
 80313b2:	4649      	mov	r1, r9
 80313b4:	eb43 0b01 	adc.w	fp, r3, r1
 80313b8:	f04f 0200 	mov.w	r2, #0
 80313bc:	f04f 0300 	mov.w	r3, #0
 80313c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80313c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80313c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80313cc:	4692      	mov	sl, r2
 80313ce:	469b      	mov	fp, r3
 80313d0:	4643      	mov	r3, r8
 80313d2:	eb1a 0303 	adds.w	r3, sl, r3
 80313d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80313da:	464b      	mov	r3, r9
 80313dc:	eb4b 0303 	adc.w	r3, fp, r3
 80313e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80313e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80313e8:	685b      	ldr	r3, [r3, #4]
 80313ea:	2200      	movs	r2, #0
 80313ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80313f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80313f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80313f8:	460b      	mov	r3, r1
 80313fa:	18db      	adds	r3, r3, r3
 80313fc:	643b      	str	r3, [r7, #64]	; 0x40
 80313fe:	4613      	mov	r3, r2
 8031400:	eb42 0303 	adc.w	r3, r2, r3
 8031404:	647b      	str	r3, [r7, #68]	; 0x44
 8031406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 803140a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 803140e:	f7ef fc6b 	bl	8020ce8 <__aeabi_uldivmod>
 8031412:	4602      	mov	r2, r0
 8031414:	460b      	mov	r3, r1
 8031416:	4611      	mov	r1, r2
 8031418:	4b3b      	ldr	r3, [pc, #236]	; (8031508 <UART_SetConfig+0x2d4>)
 803141a:	fba3 2301 	umull	r2, r3, r3, r1
 803141e:	095b      	lsrs	r3, r3, #5
 8031420:	2264      	movs	r2, #100	; 0x64
 8031422:	fb02 f303 	mul.w	r3, r2, r3
 8031426:	1acb      	subs	r3, r1, r3
 8031428:	00db      	lsls	r3, r3, #3
 803142a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 803142e:	4b36      	ldr	r3, [pc, #216]	; (8031508 <UART_SetConfig+0x2d4>)
 8031430:	fba3 2302 	umull	r2, r3, r3, r2
 8031434:	095b      	lsrs	r3, r3, #5
 8031436:	005b      	lsls	r3, r3, #1
 8031438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 803143c:	441c      	add	r4, r3
 803143e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8031442:	2200      	movs	r2, #0
 8031444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8031448:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 803144c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8031450:	4642      	mov	r2, r8
 8031452:	464b      	mov	r3, r9
 8031454:	1891      	adds	r1, r2, r2
 8031456:	63b9      	str	r1, [r7, #56]	; 0x38
 8031458:	415b      	adcs	r3, r3
 803145a:	63fb      	str	r3, [r7, #60]	; 0x3c
 803145c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8031460:	4641      	mov	r1, r8
 8031462:	1851      	adds	r1, r2, r1
 8031464:	6339      	str	r1, [r7, #48]	; 0x30
 8031466:	4649      	mov	r1, r9
 8031468:	414b      	adcs	r3, r1
 803146a:	637b      	str	r3, [r7, #52]	; 0x34
 803146c:	f04f 0200 	mov.w	r2, #0
 8031470:	f04f 0300 	mov.w	r3, #0
 8031474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8031478:	4659      	mov	r1, fp
 803147a:	00cb      	lsls	r3, r1, #3
 803147c:	4651      	mov	r1, sl
 803147e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8031482:	4651      	mov	r1, sl
 8031484:	00ca      	lsls	r2, r1, #3
 8031486:	4610      	mov	r0, r2
 8031488:	4619      	mov	r1, r3
 803148a:	4603      	mov	r3, r0
 803148c:	4642      	mov	r2, r8
 803148e:	189b      	adds	r3, r3, r2
 8031490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8031494:	464b      	mov	r3, r9
 8031496:	460a      	mov	r2, r1
 8031498:	eb42 0303 	adc.w	r3, r2, r3
 803149c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80314a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80314a4:	685b      	ldr	r3, [r3, #4]
 80314a6:	2200      	movs	r2, #0
 80314a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80314ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80314b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80314b4:	460b      	mov	r3, r1
 80314b6:	18db      	adds	r3, r3, r3
 80314b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80314ba:	4613      	mov	r3, r2
 80314bc:	eb42 0303 	adc.w	r3, r2, r3
 80314c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80314c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80314c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80314ca:	f7ef fc0d 	bl	8020ce8 <__aeabi_uldivmod>
 80314ce:	4602      	mov	r2, r0
 80314d0:	460b      	mov	r3, r1
 80314d2:	4b0d      	ldr	r3, [pc, #52]	; (8031508 <UART_SetConfig+0x2d4>)
 80314d4:	fba3 1302 	umull	r1, r3, r3, r2
 80314d8:	095b      	lsrs	r3, r3, #5
 80314da:	2164      	movs	r1, #100	; 0x64
 80314dc:	fb01 f303 	mul.w	r3, r1, r3
 80314e0:	1ad3      	subs	r3, r2, r3
 80314e2:	00db      	lsls	r3, r3, #3
 80314e4:	3332      	adds	r3, #50	; 0x32
 80314e6:	4a08      	ldr	r2, [pc, #32]	; (8031508 <UART_SetConfig+0x2d4>)
 80314e8:	fba2 2303 	umull	r2, r3, r2, r3
 80314ec:	095b      	lsrs	r3, r3, #5
 80314ee:	f003 0207 	and.w	r2, r3, #7
 80314f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80314f6:	681b      	ldr	r3, [r3, #0]
 80314f8:	4422      	add	r2, r4
 80314fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80314fc:	e106      	b.n	803170c <UART_SetConfig+0x4d8>
 80314fe:	bf00      	nop
 8031500:	40011000 	.word	0x40011000
 8031504:	40011400 	.word	0x40011400
 8031508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 803150c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8031510:	2200      	movs	r2, #0
 8031512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8031516:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 803151a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 803151e:	4642      	mov	r2, r8
 8031520:	464b      	mov	r3, r9
 8031522:	1891      	adds	r1, r2, r2
 8031524:	6239      	str	r1, [r7, #32]
 8031526:	415b      	adcs	r3, r3
 8031528:	627b      	str	r3, [r7, #36]	; 0x24
 803152a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 803152e:	4641      	mov	r1, r8
 8031530:	1854      	adds	r4, r2, r1
 8031532:	4649      	mov	r1, r9
 8031534:	eb43 0501 	adc.w	r5, r3, r1
 8031538:	f04f 0200 	mov.w	r2, #0
 803153c:	f04f 0300 	mov.w	r3, #0
 8031540:	00eb      	lsls	r3, r5, #3
 8031542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8031546:	00e2      	lsls	r2, r4, #3
 8031548:	4614      	mov	r4, r2
 803154a:	461d      	mov	r5, r3
 803154c:	4643      	mov	r3, r8
 803154e:	18e3      	adds	r3, r4, r3
 8031550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8031554:	464b      	mov	r3, r9
 8031556:	eb45 0303 	adc.w	r3, r5, r3
 803155a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 803155e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031562:	685b      	ldr	r3, [r3, #4]
 8031564:	2200      	movs	r2, #0
 8031566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 803156a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 803156e:	f04f 0200 	mov.w	r2, #0
 8031572:	f04f 0300 	mov.w	r3, #0
 8031576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 803157a:	4629      	mov	r1, r5
 803157c:	008b      	lsls	r3, r1, #2
 803157e:	4621      	mov	r1, r4
 8031580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8031584:	4621      	mov	r1, r4
 8031586:	008a      	lsls	r2, r1, #2
 8031588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 803158c:	f7ef fbac 	bl	8020ce8 <__aeabi_uldivmod>
 8031590:	4602      	mov	r2, r0
 8031592:	460b      	mov	r3, r1
 8031594:	4b60      	ldr	r3, [pc, #384]	; (8031718 <UART_SetConfig+0x4e4>)
 8031596:	fba3 2302 	umull	r2, r3, r3, r2
 803159a:	095b      	lsrs	r3, r3, #5
 803159c:	011c      	lsls	r4, r3, #4
 803159e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80315a2:	2200      	movs	r2, #0
 80315a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80315a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80315ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80315b0:	4642      	mov	r2, r8
 80315b2:	464b      	mov	r3, r9
 80315b4:	1891      	adds	r1, r2, r2
 80315b6:	61b9      	str	r1, [r7, #24]
 80315b8:	415b      	adcs	r3, r3
 80315ba:	61fb      	str	r3, [r7, #28]
 80315bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80315c0:	4641      	mov	r1, r8
 80315c2:	1851      	adds	r1, r2, r1
 80315c4:	6139      	str	r1, [r7, #16]
 80315c6:	4649      	mov	r1, r9
 80315c8:	414b      	adcs	r3, r1
 80315ca:	617b      	str	r3, [r7, #20]
 80315cc:	f04f 0200 	mov.w	r2, #0
 80315d0:	f04f 0300 	mov.w	r3, #0
 80315d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80315d8:	4659      	mov	r1, fp
 80315da:	00cb      	lsls	r3, r1, #3
 80315dc:	4651      	mov	r1, sl
 80315de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80315e2:	4651      	mov	r1, sl
 80315e4:	00ca      	lsls	r2, r1, #3
 80315e6:	4610      	mov	r0, r2
 80315e8:	4619      	mov	r1, r3
 80315ea:	4603      	mov	r3, r0
 80315ec:	4642      	mov	r2, r8
 80315ee:	189b      	adds	r3, r3, r2
 80315f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80315f4:	464b      	mov	r3, r9
 80315f6:	460a      	mov	r2, r1
 80315f8:	eb42 0303 	adc.w	r3, r2, r3
 80315fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8031600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031604:	685b      	ldr	r3, [r3, #4]
 8031606:	2200      	movs	r2, #0
 8031608:	67bb      	str	r3, [r7, #120]	; 0x78
 803160a:	67fa      	str	r2, [r7, #124]	; 0x7c
 803160c:	f04f 0200 	mov.w	r2, #0
 8031610:	f04f 0300 	mov.w	r3, #0
 8031614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8031618:	4649      	mov	r1, r9
 803161a:	008b      	lsls	r3, r1, #2
 803161c:	4641      	mov	r1, r8
 803161e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8031622:	4641      	mov	r1, r8
 8031624:	008a      	lsls	r2, r1, #2
 8031626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 803162a:	f7ef fb5d 	bl	8020ce8 <__aeabi_uldivmod>
 803162e:	4602      	mov	r2, r0
 8031630:	460b      	mov	r3, r1
 8031632:	4611      	mov	r1, r2
 8031634:	4b38      	ldr	r3, [pc, #224]	; (8031718 <UART_SetConfig+0x4e4>)
 8031636:	fba3 2301 	umull	r2, r3, r3, r1
 803163a:	095b      	lsrs	r3, r3, #5
 803163c:	2264      	movs	r2, #100	; 0x64
 803163e:	fb02 f303 	mul.w	r3, r2, r3
 8031642:	1acb      	subs	r3, r1, r3
 8031644:	011b      	lsls	r3, r3, #4
 8031646:	3332      	adds	r3, #50	; 0x32
 8031648:	4a33      	ldr	r2, [pc, #204]	; (8031718 <UART_SetConfig+0x4e4>)
 803164a:	fba2 2303 	umull	r2, r3, r2, r3
 803164e:	095b      	lsrs	r3, r3, #5
 8031650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8031654:	441c      	add	r4, r3
 8031656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 803165a:	2200      	movs	r2, #0
 803165c:	673b      	str	r3, [r7, #112]	; 0x70
 803165e:	677a      	str	r2, [r7, #116]	; 0x74
 8031660:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8031664:	4642      	mov	r2, r8
 8031666:	464b      	mov	r3, r9
 8031668:	1891      	adds	r1, r2, r2
 803166a:	60b9      	str	r1, [r7, #8]
 803166c:	415b      	adcs	r3, r3
 803166e:	60fb      	str	r3, [r7, #12]
 8031670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8031674:	4641      	mov	r1, r8
 8031676:	1851      	adds	r1, r2, r1
 8031678:	6039      	str	r1, [r7, #0]
 803167a:	4649      	mov	r1, r9
 803167c:	414b      	adcs	r3, r1
 803167e:	607b      	str	r3, [r7, #4]
 8031680:	f04f 0200 	mov.w	r2, #0
 8031684:	f04f 0300 	mov.w	r3, #0
 8031688:	e9d7 ab00 	ldrd	sl, fp, [r7]
 803168c:	4659      	mov	r1, fp
 803168e:	00cb      	lsls	r3, r1, #3
 8031690:	4651      	mov	r1, sl
 8031692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8031696:	4651      	mov	r1, sl
 8031698:	00ca      	lsls	r2, r1, #3
 803169a:	4610      	mov	r0, r2
 803169c:	4619      	mov	r1, r3
 803169e:	4603      	mov	r3, r0
 80316a0:	4642      	mov	r2, r8
 80316a2:	189b      	adds	r3, r3, r2
 80316a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80316a6:	464b      	mov	r3, r9
 80316a8:	460a      	mov	r2, r1
 80316aa:	eb42 0303 	adc.w	r3, r2, r3
 80316ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80316b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80316b4:	685b      	ldr	r3, [r3, #4]
 80316b6:	2200      	movs	r2, #0
 80316b8:	663b      	str	r3, [r7, #96]	; 0x60
 80316ba:	667a      	str	r2, [r7, #100]	; 0x64
 80316bc:	f04f 0200 	mov.w	r2, #0
 80316c0:	f04f 0300 	mov.w	r3, #0
 80316c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80316c8:	4649      	mov	r1, r9
 80316ca:	008b      	lsls	r3, r1, #2
 80316cc:	4641      	mov	r1, r8
 80316ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80316d2:	4641      	mov	r1, r8
 80316d4:	008a      	lsls	r2, r1, #2
 80316d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80316da:	f7ef fb05 	bl	8020ce8 <__aeabi_uldivmod>
 80316de:	4602      	mov	r2, r0
 80316e0:	460b      	mov	r3, r1
 80316e2:	4b0d      	ldr	r3, [pc, #52]	; (8031718 <UART_SetConfig+0x4e4>)
 80316e4:	fba3 1302 	umull	r1, r3, r3, r2
 80316e8:	095b      	lsrs	r3, r3, #5
 80316ea:	2164      	movs	r1, #100	; 0x64
 80316ec:	fb01 f303 	mul.w	r3, r1, r3
 80316f0:	1ad3      	subs	r3, r2, r3
 80316f2:	011b      	lsls	r3, r3, #4
 80316f4:	3332      	adds	r3, #50	; 0x32
 80316f6:	4a08      	ldr	r2, [pc, #32]	; (8031718 <UART_SetConfig+0x4e4>)
 80316f8:	fba2 2303 	umull	r2, r3, r2, r3
 80316fc:	095b      	lsrs	r3, r3, #5
 80316fe:	f003 020f 	and.w	r2, r3, #15
 8031702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8031706:	681b      	ldr	r3, [r3, #0]
 8031708:	4422      	add	r2, r4
 803170a:	609a      	str	r2, [r3, #8]
}
 803170c:	bf00      	nop
 803170e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8031712:	46bd      	mov	sp, r7
 8031714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8031718:	51eb851f 	.word	0x51eb851f

0803171c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 803171c:	b580      	push	{r7, lr}
 803171e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8031720:	4904      	ldr	r1, [pc, #16]	; (8031734 <MX_FATFS_Init+0x18>)
 8031722:	4805      	ldr	r0, [pc, #20]	; (8031738 <MX_FATFS_Init+0x1c>)
 8031724:	f003 f8f2 	bl	803490c <FATFS_LinkDriver>
 8031728:	4603      	mov	r3, r0
 803172a:	461a      	mov	r2, r3
 803172c:	4b03      	ldr	r3, [pc, #12]	; (803173c <MX_FATFS_Init+0x20>)
 803172e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8031730:	bf00      	nop
 8031732:	bd80      	pop	{r7, pc}
 8031734:	20006070 	.word	0x20006070
 8031738:	20001a70 	.word	0x20001a70
 803173c:	2000606c 	.word	0x2000606c

08031740 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8031740:	b480      	push	{r7}
 8031742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8031744:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8031746:	4618      	mov	r0, r3
 8031748:	46bd      	mov	sp, r7
 803174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803174e:	4770      	bx	lr

08031750 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8031750:	b580      	push	{r7, lr}
 8031752:	b082      	sub	sp, #8
 8031754:	af00      	add	r7, sp, #0
 8031756:	4603      	mov	r3, r0
 8031758:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 803175a:	79fb      	ldrb	r3, [r7, #7]
 803175c:	4618      	mov	r0, r3
 803175e:	f7f5 fb01 	bl	8026d64 <SD_disk_initialize>
 8031762:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8031764:	4618      	mov	r0, r3
 8031766:	3708      	adds	r7, #8
 8031768:	46bd      	mov	sp, r7
 803176a:	bd80      	pop	{r7, pc}

0803176c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 803176c:	b580      	push	{r7, lr}
 803176e:	b082      	sub	sp, #8
 8031770:	af00      	add	r7, sp, #0
 8031772:	4603      	mov	r3, r0
 8031774:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8031776:	79fb      	ldrb	r3, [r7, #7]
 8031778:	4618      	mov	r0, r3
 803177a:	f7f5 fbf1 	bl	8026f60 <SD_disk_status>
 803177e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8031780:	4618      	mov	r0, r3
 8031782:	3708      	adds	r7, #8
 8031784:	46bd      	mov	sp, r7
 8031786:	bd80      	pop	{r7, pc}

08031788 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8031788:	b580      	push	{r7, lr}
 803178a:	b084      	sub	sp, #16
 803178c:	af00      	add	r7, sp, #0
 803178e:	60b9      	str	r1, [r7, #8]
 8031790:	607a      	str	r2, [r7, #4]
 8031792:	603b      	str	r3, [r7, #0]
 8031794:	4603      	mov	r3, r0
 8031796:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8031798:	683b      	ldr	r3, [r7, #0]
 803179a:	b29b      	uxth	r3, r3
 803179c:	7bf8      	ldrb	r0, [r7, #15]
 803179e:	687a      	ldr	r2, [r7, #4]
 80317a0:	68b9      	ldr	r1, [r7, #8]
 80317a2:	f7f5 fbf3 	bl	8026f8c <SD_disk_read>
 80317a6:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80317a8:	4618      	mov	r0, r3
 80317aa:	3710      	adds	r7, #16
 80317ac:	46bd      	mov	sp, r7
 80317ae:	bd80      	pop	{r7, pc}

080317b0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80317b0:	b580      	push	{r7, lr}
 80317b2:	b084      	sub	sp, #16
 80317b4:	af00      	add	r7, sp, #0
 80317b6:	60b9      	str	r1, [r7, #8]
 80317b8:	607a      	str	r2, [r7, #4]
 80317ba:	603b      	str	r3, [r7, #0]
 80317bc:	4603      	mov	r3, r0
 80317be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80317c0:	683b      	ldr	r3, [r7, #0]
 80317c2:	b29b      	uxth	r3, r3
 80317c4:	7bf8      	ldrb	r0, [r7, #15]
 80317c6:	687a      	ldr	r2, [r7, #4]
 80317c8:	68b9      	ldr	r1, [r7, #8]
 80317ca:	f7f5 fc4b 	bl	8027064 <SD_disk_write>
 80317ce:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80317d0:	4618      	mov	r0, r3
 80317d2:	3710      	adds	r7, #16
 80317d4:	46bd      	mov	sp, r7
 80317d6:	bd80      	pop	{r7, pc}

080317d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80317d8:	b580      	push	{r7, lr}
 80317da:	b082      	sub	sp, #8
 80317dc:	af00      	add	r7, sp, #0
 80317de:	4603      	mov	r3, r0
 80317e0:	603a      	str	r2, [r7, #0]
 80317e2:	71fb      	strb	r3, [r7, #7]
 80317e4:	460b      	mov	r3, r1
 80317e6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80317e8:	79b9      	ldrb	r1, [r7, #6]
 80317ea:	79fb      	ldrb	r3, [r7, #7]
 80317ec:	683a      	ldr	r2, [r7, #0]
 80317ee:	4618      	mov	r0, r3
 80317f0:	f7f5 fcc0 	bl	8027174 <SD_disk_ioctl>
 80317f4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80317f6:	4618      	mov	r0, r3
 80317f8:	3708      	adds	r7, #8
 80317fa:	46bd      	mov	sp, r7
 80317fc:	bd80      	pop	{r7, pc}
	...

08031800 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8031800:	b580      	push	{r7, lr}
 8031802:	b084      	sub	sp, #16
 8031804:	af00      	add	r7, sp, #0
 8031806:	4603      	mov	r3, r0
 8031808:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 803180a:	79fb      	ldrb	r3, [r7, #7]
 803180c:	4a08      	ldr	r2, [pc, #32]	; (8031830 <disk_status+0x30>)
 803180e:	009b      	lsls	r3, r3, #2
 8031810:	4413      	add	r3, r2
 8031812:	685b      	ldr	r3, [r3, #4]
 8031814:	685b      	ldr	r3, [r3, #4]
 8031816:	79fa      	ldrb	r2, [r7, #7]
 8031818:	4905      	ldr	r1, [pc, #20]	; (8031830 <disk_status+0x30>)
 803181a:	440a      	add	r2, r1
 803181c:	7a12      	ldrb	r2, [r2, #8]
 803181e:	4610      	mov	r0, r2
 8031820:	4798      	blx	r3
 8031822:	4603      	mov	r3, r0
 8031824:	73fb      	strb	r3, [r7, #15]
  return stat;
 8031826:	7bfb      	ldrb	r3, [r7, #15]
}
 8031828:	4618      	mov	r0, r3
 803182a:	3710      	adds	r7, #16
 803182c:	46bd      	mov	sp, r7
 803182e:	bd80      	pop	{r7, pc}
 8031830:	2000629c 	.word	0x2000629c

08031834 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8031834:	b580      	push	{r7, lr}
 8031836:	b084      	sub	sp, #16
 8031838:	af00      	add	r7, sp, #0
 803183a:	4603      	mov	r3, r0
 803183c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 803183e:	2300      	movs	r3, #0
 8031840:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8031842:	79fb      	ldrb	r3, [r7, #7]
 8031844:	4a0d      	ldr	r2, [pc, #52]	; (803187c <disk_initialize+0x48>)
 8031846:	5cd3      	ldrb	r3, [r2, r3]
 8031848:	2b00      	cmp	r3, #0
 803184a:	d111      	bne.n	8031870 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 803184c:	79fb      	ldrb	r3, [r7, #7]
 803184e:	4a0b      	ldr	r2, [pc, #44]	; (803187c <disk_initialize+0x48>)
 8031850:	2101      	movs	r1, #1
 8031852:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8031854:	79fb      	ldrb	r3, [r7, #7]
 8031856:	4a09      	ldr	r2, [pc, #36]	; (803187c <disk_initialize+0x48>)
 8031858:	009b      	lsls	r3, r3, #2
 803185a:	4413      	add	r3, r2
 803185c:	685b      	ldr	r3, [r3, #4]
 803185e:	681b      	ldr	r3, [r3, #0]
 8031860:	79fa      	ldrb	r2, [r7, #7]
 8031862:	4906      	ldr	r1, [pc, #24]	; (803187c <disk_initialize+0x48>)
 8031864:	440a      	add	r2, r1
 8031866:	7a12      	ldrb	r2, [r2, #8]
 8031868:	4610      	mov	r0, r2
 803186a:	4798      	blx	r3
 803186c:	4603      	mov	r3, r0
 803186e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8031870:	7bfb      	ldrb	r3, [r7, #15]
}
 8031872:	4618      	mov	r0, r3
 8031874:	3710      	adds	r7, #16
 8031876:	46bd      	mov	sp, r7
 8031878:	bd80      	pop	{r7, pc}
 803187a:	bf00      	nop
 803187c:	2000629c 	.word	0x2000629c

08031880 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8031880:	b590      	push	{r4, r7, lr}
 8031882:	b087      	sub	sp, #28
 8031884:	af00      	add	r7, sp, #0
 8031886:	60b9      	str	r1, [r7, #8]
 8031888:	607a      	str	r2, [r7, #4]
 803188a:	603b      	str	r3, [r7, #0]
 803188c:	4603      	mov	r3, r0
 803188e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8031890:	7bfb      	ldrb	r3, [r7, #15]
 8031892:	4a0a      	ldr	r2, [pc, #40]	; (80318bc <disk_read+0x3c>)
 8031894:	009b      	lsls	r3, r3, #2
 8031896:	4413      	add	r3, r2
 8031898:	685b      	ldr	r3, [r3, #4]
 803189a:	689c      	ldr	r4, [r3, #8]
 803189c:	7bfb      	ldrb	r3, [r7, #15]
 803189e:	4a07      	ldr	r2, [pc, #28]	; (80318bc <disk_read+0x3c>)
 80318a0:	4413      	add	r3, r2
 80318a2:	7a18      	ldrb	r0, [r3, #8]
 80318a4:	683b      	ldr	r3, [r7, #0]
 80318a6:	687a      	ldr	r2, [r7, #4]
 80318a8:	68b9      	ldr	r1, [r7, #8]
 80318aa:	47a0      	blx	r4
 80318ac:	4603      	mov	r3, r0
 80318ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80318b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80318b2:	4618      	mov	r0, r3
 80318b4:	371c      	adds	r7, #28
 80318b6:	46bd      	mov	sp, r7
 80318b8:	bd90      	pop	{r4, r7, pc}
 80318ba:	bf00      	nop
 80318bc:	2000629c 	.word	0x2000629c

080318c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80318c0:	b590      	push	{r4, r7, lr}
 80318c2:	b087      	sub	sp, #28
 80318c4:	af00      	add	r7, sp, #0
 80318c6:	60b9      	str	r1, [r7, #8]
 80318c8:	607a      	str	r2, [r7, #4]
 80318ca:	603b      	str	r3, [r7, #0]
 80318cc:	4603      	mov	r3, r0
 80318ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80318d0:	7bfb      	ldrb	r3, [r7, #15]
 80318d2:	4a0a      	ldr	r2, [pc, #40]	; (80318fc <disk_write+0x3c>)
 80318d4:	009b      	lsls	r3, r3, #2
 80318d6:	4413      	add	r3, r2
 80318d8:	685b      	ldr	r3, [r3, #4]
 80318da:	68dc      	ldr	r4, [r3, #12]
 80318dc:	7bfb      	ldrb	r3, [r7, #15]
 80318de:	4a07      	ldr	r2, [pc, #28]	; (80318fc <disk_write+0x3c>)
 80318e0:	4413      	add	r3, r2
 80318e2:	7a18      	ldrb	r0, [r3, #8]
 80318e4:	683b      	ldr	r3, [r7, #0]
 80318e6:	687a      	ldr	r2, [r7, #4]
 80318e8:	68b9      	ldr	r1, [r7, #8]
 80318ea:	47a0      	blx	r4
 80318ec:	4603      	mov	r3, r0
 80318ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80318f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80318f2:	4618      	mov	r0, r3
 80318f4:	371c      	adds	r7, #28
 80318f6:	46bd      	mov	sp, r7
 80318f8:	bd90      	pop	{r4, r7, pc}
 80318fa:	bf00      	nop
 80318fc:	2000629c 	.word	0x2000629c

08031900 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8031900:	b580      	push	{r7, lr}
 8031902:	b084      	sub	sp, #16
 8031904:	af00      	add	r7, sp, #0
 8031906:	4603      	mov	r3, r0
 8031908:	603a      	str	r2, [r7, #0]
 803190a:	71fb      	strb	r3, [r7, #7]
 803190c:	460b      	mov	r3, r1
 803190e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8031910:	79fb      	ldrb	r3, [r7, #7]
 8031912:	4a09      	ldr	r2, [pc, #36]	; (8031938 <disk_ioctl+0x38>)
 8031914:	009b      	lsls	r3, r3, #2
 8031916:	4413      	add	r3, r2
 8031918:	685b      	ldr	r3, [r3, #4]
 803191a:	691b      	ldr	r3, [r3, #16]
 803191c:	79fa      	ldrb	r2, [r7, #7]
 803191e:	4906      	ldr	r1, [pc, #24]	; (8031938 <disk_ioctl+0x38>)
 8031920:	440a      	add	r2, r1
 8031922:	7a10      	ldrb	r0, [r2, #8]
 8031924:	79b9      	ldrb	r1, [r7, #6]
 8031926:	683a      	ldr	r2, [r7, #0]
 8031928:	4798      	blx	r3
 803192a:	4603      	mov	r3, r0
 803192c:	73fb      	strb	r3, [r7, #15]
  return res;
 803192e:	7bfb      	ldrb	r3, [r7, #15]
}
 8031930:	4618      	mov	r0, r3
 8031932:	3710      	adds	r7, #16
 8031934:	46bd      	mov	sp, r7
 8031936:	bd80      	pop	{r7, pc}
 8031938:	2000629c 	.word	0x2000629c

0803193c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 803193c:	b480      	push	{r7}
 803193e:	b085      	sub	sp, #20
 8031940:	af00      	add	r7, sp, #0
 8031942:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8031944:	687b      	ldr	r3, [r7, #4]
 8031946:	3301      	adds	r3, #1
 8031948:	781b      	ldrb	r3, [r3, #0]
 803194a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 803194c:	89fb      	ldrh	r3, [r7, #14]
 803194e:	021b      	lsls	r3, r3, #8
 8031950:	b21a      	sxth	r2, r3
 8031952:	687b      	ldr	r3, [r7, #4]
 8031954:	781b      	ldrb	r3, [r3, #0]
 8031956:	b21b      	sxth	r3, r3
 8031958:	4313      	orrs	r3, r2
 803195a:	b21b      	sxth	r3, r3
 803195c:	81fb      	strh	r3, [r7, #14]
	return rv;
 803195e:	89fb      	ldrh	r3, [r7, #14]
}
 8031960:	4618      	mov	r0, r3
 8031962:	3714      	adds	r7, #20
 8031964:	46bd      	mov	sp, r7
 8031966:	f85d 7b04 	ldr.w	r7, [sp], #4
 803196a:	4770      	bx	lr

0803196c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 803196c:	b480      	push	{r7}
 803196e:	b085      	sub	sp, #20
 8031970:	af00      	add	r7, sp, #0
 8031972:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8031974:	687b      	ldr	r3, [r7, #4]
 8031976:	3303      	adds	r3, #3
 8031978:	781b      	ldrb	r3, [r3, #0]
 803197a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 803197c:	68fb      	ldr	r3, [r7, #12]
 803197e:	021b      	lsls	r3, r3, #8
 8031980:	687a      	ldr	r2, [r7, #4]
 8031982:	3202      	adds	r2, #2
 8031984:	7812      	ldrb	r2, [r2, #0]
 8031986:	4313      	orrs	r3, r2
 8031988:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 803198a:	68fb      	ldr	r3, [r7, #12]
 803198c:	021b      	lsls	r3, r3, #8
 803198e:	687a      	ldr	r2, [r7, #4]
 8031990:	3201      	adds	r2, #1
 8031992:	7812      	ldrb	r2, [r2, #0]
 8031994:	4313      	orrs	r3, r2
 8031996:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8031998:	68fb      	ldr	r3, [r7, #12]
 803199a:	021b      	lsls	r3, r3, #8
 803199c:	687a      	ldr	r2, [r7, #4]
 803199e:	7812      	ldrb	r2, [r2, #0]
 80319a0:	4313      	orrs	r3, r2
 80319a2:	60fb      	str	r3, [r7, #12]
	return rv;
 80319a4:	68fb      	ldr	r3, [r7, #12]
}
 80319a6:	4618      	mov	r0, r3
 80319a8:	3714      	adds	r7, #20
 80319aa:	46bd      	mov	sp, r7
 80319ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80319b0:	4770      	bx	lr

080319b2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80319b2:	b480      	push	{r7}
 80319b4:	b083      	sub	sp, #12
 80319b6:	af00      	add	r7, sp, #0
 80319b8:	6078      	str	r0, [r7, #4]
 80319ba:	460b      	mov	r3, r1
 80319bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80319be:	687b      	ldr	r3, [r7, #4]
 80319c0:	1c5a      	adds	r2, r3, #1
 80319c2:	607a      	str	r2, [r7, #4]
 80319c4:	887a      	ldrh	r2, [r7, #2]
 80319c6:	b2d2      	uxtb	r2, r2
 80319c8:	701a      	strb	r2, [r3, #0]
 80319ca:	887b      	ldrh	r3, [r7, #2]
 80319cc:	0a1b      	lsrs	r3, r3, #8
 80319ce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80319d0:	687b      	ldr	r3, [r7, #4]
 80319d2:	1c5a      	adds	r2, r3, #1
 80319d4:	607a      	str	r2, [r7, #4]
 80319d6:	887a      	ldrh	r2, [r7, #2]
 80319d8:	b2d2      	uxtb	r2, r2
 80319da:	701a      	strb	r2, [r3, #0]
}
 80319dc:	bf00      	nop
 80319de:	370c      	adds	r7, #12
 80319e0:	46bd      	mov	sp, r7
 80319e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80319e6:	4770      	bx	lr

080319e8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80319e8:	b480      	push	{r7}
 80319ea:	b083      	sub	sp, #12
 80319ec:	af00      	add	r7, sp, #0
 80319ee:	6078      	str	r0, [r7, #4]
 80319f0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80319f2:	687b      	ldr	r3, [r7, #4]
 80319f4:	1c5a      	adds	r2, r3, #1
 80319f6:	607a      	str	r2, [r7, #4]
 80319f8:	683a      	ldr	r2, [r7, #0]
 80319fa:	b2d2      	uxtb	r2, r2
 80319fc:	701a      	strb	r2, [r3, #0]
 80319fe:	683b      	ldr	r3, [r7, #0]
 8031a00:	0a1b      	lsrs	r3, r3, #8
 8031a02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8031a04:	687b      	ldr	r3, [r7, #4]
 8031a06:	1c5a      	adds	r2, r3, #1
 8031a08:	607a      	str	r2, [r7, #4]
 8031a0a:	683a      	ldr	r2, [r7, #0]
 8031a0c:	b2d2      	uxtb	r2, r2
 8031a0e:	701a      	strb	r2, [r3, #0]
 8031a10:	683b      	ldr	r3, [r7, #0]
 8031a12:	0a1b      	lsrs	r3, r3, #8
 8031a14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8031a16:	687b      	ldr	r3, [r7, #4]
 8031a18:	1c5a      	adds	r2, r3, #1
 8031a1a:	607a      	str	r2, [r7, #4]
 8031a1c:	683a      	ldr	r2, [r7, #0]
 8031a1e:	b2d2      	uxtb	r2, r2
 8031a20:	701a      	strb	r2, [r3, #0]
 8031a22:	683b      	ldr	r3, [r7, #0]
 8031a24:	0a1b      	lsrs	r3, r3, #8
 8031a26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8031a28:	687b      	ldr	r3, [r7, #4]
 8031a2a:	1c5a      	adds	r2, r3, #1
 8031a2c:	607a      	str	r2, [r7, #4]
 8031a2e:	683a      	ldr	r2, [r7, #0]
 8031a30:	b2d2      	uxtb	r2, r2
 8031a32:	701a      	strb	r2, [r3, #0]
}
 8031a34:	bf00      	nop
 8031a36:	370c      	adds	r7, #12
 8031a38:	46bd      	mov	sp, r7
 8031a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031a3e:	4770      	bx	lr

08031a40 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8031a40:	b480      	push	{r7}
 8031a42:	b087      	sub	sp, #28
 8031a44:	af00      	add	r7, sp, #0
 8031a46:	60f8      	str	r0, [r7, #12]
 8031a48:	60b9      	str	r1, [r7, #8]
 8031a4a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8031a4c:	68fb      	ldr	r3, [r7, #12]
 8031a4e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8031a50:	68bb      	ldr	r3, [r7, #8]
 8031a52:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8031a54:	687b      	ldr	r3, [r7, #4]
 8031a56:	2b00      	cmp	r3, #0
 8031a58:	d00d      	beq.n	8031a76 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8031a5a:	693a      	ldr	r2, [r7, #16]
 8031a5c:	1c53      	adds	r3, r2, #1
 8031a5e:	613b      	str	r3, [r7, #16]
 8031a60:	697b      	ldr	r3, [r7, #20]
 8031a62:	1c59      	adds	r1, r3, #1
 8031a64:	6179      	str	r1, [r7, #20]
 8031a66:	7812      	ldrb	r2, [r2, #0]
 8031a68:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8031a6a:	687b      	ldr	r3, [r7, #4]
 8031a6c:	3b01      	subs	r3, #1
 8031a6e:	607b      	str	r3, [r7, #4]
 8031a70:	687b      	ldr	r3, [r7, #4]
 8031a72:	2b00      	cmp	r3, #0
 8031a74:	d1f1      	bne.n	8031a5a <mem_cpy+0x1a>
	}
}
 8031a76:	bf00      	nop
 8031a78:	371c      	adds	r7, #28
 8031a7a:	46bd      	mov	sp, r7
 8031a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031a80:	4770      	bx	lr

08031a82 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8031a82:	b480      	push	{r7}
 8031a84:	b087      	sub	sp, #28
 8031a86:	af00      	add	r7, sp, #0
 8031a88:	60f8      	str	r0, [r7, #12]
 8031a8a:	60b9      	str	r1, [r7, #8]
 8031a8c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8031a8e:	68fb      	ldr	r3, [r7, #12]
 8031a90:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8031a92:	697b      	ldr	r3, [r7, #20]
 8031a94:	1c5a      	adds	r2, r3, #1
 8031a96:	617a      	str	r2, [r7, #20]
 8031a98:	68ba      	ldr	r2, [r7, #8]
 8031a9a:	b2d2      	uxtb	r2, r2
 8031a9c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8031a9e:	687b      	ldr	r3, [r7, #4]
 8031aa0:	3b01      	subs	r3, #1
 8031aa2:	607b      	str	r3, [r7, #4]
 8031aa4:	687b      	ldr	r3, [r7, #4]
 8031aa6:	2b00      	cmp	r3, #0
 8031aa8:	d1f3      	bne.n	8031a92 <mem_set+0x10>
}
 8031aaa:	bf00      	nop
 8031aac:	bf00      	nop
 8031aae:	371c      	adds	r7, #28
 8031ab0:	46bd      	mov	sp, r7
 8031ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031ab6:	4770      	bx	lr

08031ab8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8031ab8:	b480      	push	{r7}
 8031aba:	b089      	sub	sp, #36	; 0x24
 8031abc:	af00      	add	r7, sp, #0
 8031abe:	60f8      	str	r0, [r7, #12]
 8031ac0:	60b9      	str	r1, [r7, #8]
 8031ac2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8031ac4:	68fb      	ldr	r3, [r7, #12]
 8031ac6:	61fb      	str	r3, [r7, #28]
 8031ac8:	68bb      	ldr	r3, [r7, #8]
 8031aca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8031acc:	2300      	movs	r3, #0
 8031ace:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8031ad0:	69fb      	ldr	r3, [r7, #28]
 8031ad2:	1c5a      	adds	r2, r3, #1
 8031ad4:	61fa      	str	r2, [r7, #28]
 8031ad6:	781b      	ldrb	r3, [r3, #0]
 8031ad8:	4619      	mov	r1, r3
 8031ada:	69bb      	ldr	r3, [r7, #24]
 8031adc:	1c5a      	adds	r2, r3, #1
 8031ade:	61ba      	str	r2, [r7, #24]
 8031ae0:	781b      	ldrb	r3, [r3, #0]
 8031ae2:	1acb      	subs	r3, r1, r3
 8031ae4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8031ae6:	687b      	ldr	r3, [r7, #4]
 8031ae8:	3b01      	subs	r3, #1
 8031aea:	607b      	str	r3, [r7, #4]
 8031aec:	687b      	ldr	r3, [r7, #4]
 8031aee:	2b00      	cmp	r3, #0
 8031af0:	d002      	beq.n	8031af8 <mem_cmp+0x40>
 8031af2:	697b      	ldr	r3, [r7, #20]
 8031af4:	2b00      	cmp	r3, #0
 8031af6:	d0eb      	beq.n	8031ad0 <mem_cmp+0x18>

	return r;
 8031af8:	697b      	ldr	r3, [r7, #20]
}
 8031afa:	4618      	mov	r0, r3
 8031afc:	3724      	adds	r7, #36	; 0x24
 8031afe:	46bd      	mov	sp, r7
 8031b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031b04:	4770      	bx	lr

08031b06 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8031b06:	b480      	push	{r7}
 8031b08:	b083      	sub	sp, #12
 8031b0a:	af00      	add	r7, sp, #0
 8031b0c:	6078      	str	r0, [r7, #4]
 8031b0e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8031b10:	e002      	b.n	8031b18 <chk_chr+0x12>
 8031b12:	687b      	ldr	r3, [r7, #4]
 8031b14:	3301      	adds	r3, #1
 8031b16:	607b      	str	r3, [r7, #4]
 8031b18:	687b      	ldr	r3, [r7, #4]
 8031b1a:	781b      	ldrb	r3, [r3, #0]
 8031b1c:	2b00      	cmp	r3, #0
 8031b1e:	d005      	beq.n	8031b2c <chk_chr+0x26>
 8031b20:	687b      	ldr	r3, [r7, #4]
 8031b22:	781b      	ldrb	r3, [r3, #0]
 8031b24:	461a      	mov	r2, r3
 8031b26:	683b      	ldr	r3, [r7, #0]
 8031b28:	4293      	cmp	r3, r2
 8031b2a:	d1f2      	bne.n	8031b12 <chk_chr+0xc>
	return *str;
 8031b2c:	687b      	ldr	r3, [r7, #4]
 8031b2e:	781b      	ldrb	r3, [r3, #0]
}
 8031b30:	4618      	mov	r0, r3
 8031b32:	370c      	adds	r7, #12
 8031b34:	46bd      	mov	sp, r7
 8031b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031b3a:	4770      	bx	lr

08031b3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8031b3c:	b480      	push	{r7}
 8031b3e:	b085      	sub	sp, #20
 8031b40:	af00      	add	r7, sp, #0
 8031b42:	6078      	str	r0, [r7, #4]
 8031b44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8031b46:	2300      	movs	r3, #0
 8031b48:	60bb      	str	r3, [r7, #8]
 8031b4a:	68bb      	ldr	r3, [r7, #8]
 8031b4c:	60fb      	str	r3, [r7, #12]
 8031b4e:	e029      	b.n	8031ba4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8031b50:	4a27      	ldr	r2, [pc, #156]	; (8031bf0 <chk_lock+0xb4>)
 8031b52:	68fb      	ldr	r3, [r7, #12]
 8031b54:	011b      	lsls	r3, r3, #4
 8031b56:	4413      	add	r3, r2
 8031b58:	681b      	ldr	r3, [r3, #0]
 8031b5a:	2b00      	cmp	r3, #0
 8031b5c:	d01d      	beq.n	8031b9a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8031b5e:	4a24      	ldr	r2, [pc, #144]	; (8031bf0 <chk_lock+0xb4>)
 8031b60:	68fb      	ldr	r3, [r7, #12]
 8031b62:	011b      	lsls	r3, r3, #4
 8031b64:	4413      	add	r3, r2
 8031b66:	681a      	ldr	r2, [r3, #0]
 8031b68:	687b      	ldr	r3, [r7, #4]
 8031b6a:	681b      	ldr	r3, [r3, #0]
 8031b6c:	429a      	cmp	r2, r3
 8031b6e:	d116      	bne.n	8031b9e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8031b70:	4a1f      	ldr	r2, [pc, #124]	; (8031bf0 <chk_lock+0xb4>)
 8031b72:	68fb      	ldr	r3, [r7, #12]
 8031b74:	011b      	lsls	r3, r3, #4
 8031b76:	4413      	add	r3, r2
 8031b78:	3304      	adds	r3, #4
 8031b7a:	681a      	ldr	r2, [r3, #0]
 8031b7c:	687b      	ldr	r3, [r7, #4]
 8031b7e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8031b80:	429a      	cmp	r2, r3
 8031b82:	d10c      	bne.n	8031b9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8031b84:	4a1a      	ldr	r2, [pc, #104]	; (8031bf0 <chk_lock+0xb4>)
 8031b86:	68fb      	ldr	r3, [r7, #12]
 8031b88:	011b      	lsls	r3, r3, #4
 8031b8a:	4413      	add	r3, r2
 8031b8c:	3308      	adds	r3, #8
 8031b8e:	681a      	ldr	r2, [r3, #0]
 8031b90:	687b      	ldr	r3, [r7, #4]
 8031b92:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8031b94:	429a      	cmp	r2, r3
 8031b96:	d102      	bne.n	8031b9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8031b98:	e007      	b.n	8031baa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8031b9a:	2301      	movs	r3, #1
 8031b9c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8031b9e:	68fb      	ldr	r3, [r7, #12]
 8031ba0:	3301      	adds	r3, #1
 8031ba2:	60fb      	str	r3, [r7, #12]
 8031ba4:	68fb      	ldr	r3, [r7, #12]
 8031ba6:	2b01      	cmp	r3, #1
 8031ba8:	d9d2      	bls.n	8031b50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8031baa:	68fb      	ldr	r3, [r7, #12]
 8031bac:	2b02      	cmp	r3, #2
 8031bae:	d109      	bne.n	8031bc4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8031bb0:	68bb      	ldr	r3, [r7, #8]
 8031bb2:	2b00      	cmp	r3, #0
 8031bb4:	d102      	bne.n	8031bbc <chk_lock+0x80>
 8031bb6:	683b      	ldr	r3, [r7, #0]
 8031bb8:	2b02      	cmp	r3, #2
 8031bba:	d101      	bne.n	8031bc0 <chk_lock+0x84>
 8031bbc:	2300      	movs	r3, #0
 8031bbe:	e010      	b.n	8031be2 <chk_lock+0xa6>
 8031bc0:	2312      	movs	r3, #18
 8031bc2:	e00e      	b.n	8031be2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8031bc4:	683b      	ldr	r3, [r7, #0]
 8031bc6:	2b00      	cmp	r3, #0
 8031bc8:	d108      	bne.n	8031bdc <chk_lock+0xa0>
 8031bca:	4a09      	ldr	r2, [pc, #36]	; (8031bf0 <chk_lock+0xb4>)
 8031bcc:	68fb      	ldr	r3, [r7, #12]
 8031bce:	011b      	lsls	r3, r3, #4
 8031bd0:	4413      	add	r3, r2
 8031bd2:	330c      	adds	r3, #12
 8031bd4:	881b      	ldrh	r3, [r3, #0]
 8031bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031bda:	d101      	bne.n	8031be0 <chk_lock+0xa4>
 8031bdc:	2310      	movs	r3, #16
 8031bde:	e000      	b.n	8031be2 <chk_lock+0xa6>
 8031be0:	2300      	movs	r3, #0
}
 8031be2:	4618      	mov	r0, r3
 8031be4:	3714      	adds	r7, #20
 8031be6:	46bd      	mov	sp, r7
 8031be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031bec:	4770      	bx	lr
 8031bee:	bf00      	nop
 8031bf0:	2000607c 	.word	0x2000607c

08031bf4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8031bf4:	b480      	push	{r7}
 8031bf6:	b083      	sub	sp, #12
 8031bf8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8031bfa:	2300      	movs	r3, #0
 8031bfc:	607b      	str	r3, [r7, #4]
 8031bfe:	e002      	b.n	8031c06 <enq_lock+0x12>
 8031c00:	687b      	ldr	r3, [r7, #4]
 8031c02:	3301      	adds	r3, #1
 8031c04:	607b      	str	r3, [r7, #4]
 8031c06:	687b      	ldr	r3, [r7, #4]
 8031c08:	2b01      	cmp	r3, #1
 8031c0a:	d806      	bhi.n	8031c1a <enq_lock+0x26>
 8031c0c:	4a09      	ldr	r2, [pc, #36]	; (8031c34 <enq_lock+0x40>)
 8031c0e:	687b      	ldr	r3, [r7, #4]
 8031c10:	011b      	lsls	r3, r3, #4
 8031c12:	4413      	add	r3, r2
 8031c14:	681b      	ldr	r3, [r3, #0]
 8031c16:	2b00      	cmp	r3, #0
 8031c18:	d1f2      	bne.n	8031c00 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8031c1a:	687b      	ldr	r3, [r7, #4]
 8031c1c:	2b02      	cmp	r3, #2
 8031c1e:	bf14      	ite	ne
 8031c20:	2301      	movne	r3, #1
 8031c22:	2300      	moveq	r3, #0
 8031c24:	b2db      	uxtb	r3, r3
}
 8031c26:	4618      	mov	r0, r3
 8031c28:	370c      	adds	r7, #12
 8031c2a:	46bd      	mov	sp, r7
 8031c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031c30:	4770      	bx	lr
 8031c32:	bf00      	nop
 8031c34:	2000607c 	.word	0x2000607c

08031c38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8031c38:	b480      	push	{r7}
 8031c3a:	b085      	sub	sp, #20
 8031c3c:	af00      	add	r7, sp, #0
 8031c3e:	6078      	str	r0, [r7, #4]
 8031c40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8031c42:	2300      	movs	r3, #0
 8031c44:	60fb      	str	r3, [r7, #12]
 8031c46:	e01f      	b.n	8031c88 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8031c48:	4a41      	ldr	r2, [pc, #260]	; (8031d50 <inc_lock+0x118>)
 8031c4a:	68fb      	ldr	r3, [r7, #12]
 8031c4c:	011b      	lsls	r3, r3, #4
 8031c4e:	4413      	add	r3, r2
 8031c50:	681a      	ldr	r2, [r3, #0]
 8031c52:	687b      	ldr	r3, [r7, #4]
 8031c54:	681b      	ldr	r3, [r3, #0]
 8031c56:	429a      	cmp	r2, r3
 8031c58:	d113      	bne.n	8031c82 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8031c5a:	4a3d      	ldr	r2, [pc, #244]	; (8031d50 <inc_lock+0x118>)
 8031c5c:	68fb      	ldr	r3, [r7, #12]
 8031c5e:	011b      	lsls	r3, r3, #4
 8031c60:	4413      	add	r3, r2
 8031c62:	3304      	adds	r3, #4
 8031c64:	681a      	ldr	r2, [r3, #0]
 8031c66:	687b      	ldr	r3, [r7, #4]
 8031c68:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8031c6a:	429a      	cmp	r2, r3
 8031c6c:	d109      	bne.n	8031c82 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8031c6e:	4a38      	ldr	r2, [pc, #224]	; (8031d50 <inc_lock+0x118>)
 8031c70:	68fb      	ldr	r3, [r7, #12]
 8031c72:	011b      	lsls	r3, r3, #4
 8031c74:	4413      	add	r3, r2
 8031c76:	3308      	adds	r3, #8
 8031c78:	681a      	ldr	r2, [r3, #0]
 8031c7a:	687b      	ldr	r3, [r7, #4]
 8031c7c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8031c7e:	429a      	cmp	r2, r3
 8031c80:	d006      	beq.n	8031c90 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8031c82:	68fb      	ldr	r3, [r7, #12]
 8031c84:	3301      	adds	r3, #1
 8031c86:	60fb      	str	r3, [r7, #12]
 8031c88:	68fb      	ldr	r3, [r7, #12]
 8031c8a:	2b01      	cmp	r3, #1
 8031c8c:	d9dc      	bls.n	8031c48 <inc_lock+0x10>
 8031c8e:	e000      	b.n	8031c92 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8031c90:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8031c92:	68fb      	ldr	r3, [r7, #12]
 8031c94:	2b02      	cmp	r3, #2
 8031c96:	d132      	bne.n	8031cfe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8031c98:	2300      	movs	r3, #0
 8031c9a:	60fb      	str	r3, [r7, #12]
 8031c9c:	e002      	b.n	8031ca4 <inc_lock+0x6c>
 8031c9e:	68fb      	ldr	r3, [r7, #12]
 8031ca0:	3301      	adds	r3, #1
 8031ca2:	60fb      	str	r3, [r7, #12]
 8031ca4:	68fb      	ldr	r3, [r7, #12]
 8031ca6:	2b01      	cmp	r3, #1
 8031ca8:	d806      	bhi.n	8031cb8 <inc_lock+0x80>
 8031caa:	4a29      	ldr	r2, [pc, #164]	; (8031d50 <inc_lock+0x118>)
 8031cac:	68fb      	ldr	r3, [r7, #12]
 8031cae:	011b      	lsls	r3, r3, #4
 8031cb0:	4413      	add	r3, r2
 8031cb2:	681b      	ldr	r3, [r3, #0]
 8031cb4:	2b00      	cmp	r3, #0
 8031cb6:	d1f2      	bne.n	8031c9e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8031cb8:	68fb      	ldr	r3, [r7, #12]
 8031cba:	2b02      	cmp	r3, #2
 8031cbc:	d101      	bne.n	8031cc2 <inc_lock+0x8a>
 8031cbe:	2300      	movs	r3, #0
 8031cc0:	e040      	b.n	8031d44 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8031cc2:	687b      	ldr	r3, [r7, #4]
 8031cc4:	681a      	ldr	r2, [r3, #0]
 8031cc6:	4922      	ldr	r1, [pc, #136]	; (8031d50 <inc_lock+0x118>)
 8031cc8:	68fb      	ldr	r3, [r7, #12]
 8031cca:	011b      	lsls	r3, r3, #4
 8031ccc:	440b      	add	r3, r1
 8031cce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8031cd0:	687b      	ldr	r3, [r7, #4]
 8031cd2:	689a      	ldr	r2, [r3, #8]
 8031cd4:	491e      	ldr	r1, [pc, #120]	; (8031d50 <inc_lock+0x118>)
 8031cd6:	68fb      	ldr	r3, [r7, #12]
 8031cd8:	011b      	lsls	r3, r3, #4
 8031cda:	440b      	add	r3, r1
 8031cdc:	3304      	adds	r3, #4
 8031cde:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8031ce0:	687b      	ldr	r3, [r7, #4]
 8031ce2:	695a      	ldr	r2, [r3, #20]
 8031ce4:	491a      	ldr	r1, [pc, #104]	; (8031d50 <inc_lock+0x118>)
 8031ce6:	68fb      	ldr	r3, [r7, #12]
 8031ce8:	011b      	lsls	r3, r3, #4
 8031cea:	440b      	add	r3, r1
 8031cec:	3308      	adds	r3, #8
 8031cee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8031cf0:	4a17      	ldr	r2, [pc, #92]	; (8031d50 <inc_lock+0x118>)
 8031cf2:	68fb      	ldr	r3, [r7, #12]
 8031cf4:	011b      	lsls	r3, r3, #4
 8031cf6:	4413      	add	r3, r2
 8031cf8:	330c      	adds	r3, #12
 8031cfa:	2200      	movs	r2, #0
 8031cfc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8031cfe:	683b      	ldr	r3, [r7, #0]
 8031d00:	2b00      	cmp	r3, #0
 8031d02:	d009      	beq.n	8031d18 <inc_lock+0xe0>
 8031d04:	4a12      	ldr	r2, [pc, #72]	; (8031d50 <inc_lock+0x118>)
 8031d06:	68fb      	ldr	r3, [r7, #12]
 8031d08:	011b      	lsls	r3, r3, #4
 8031d0a:	4413      	add	r3, r2
 8031d0c:	330c      	adds	r3, #12
 8031d0e:	881b      	ldrh	r3, [r3, #0]
 8031d10:	2b00      	cmp	r3, #0
 8031d12:	d001      	beq.n	8031d18 <inc_lock+0xe0>
 8031d14:	2300      	movs	r3, #0
 8031d16:	e015      	b.n	8031d44 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8031d18:	683b      	ldr	r3, [r7, #0]
 8031d1a:	2b00      	cmp	r3, #0
 8031d1c:	d108      	bne.n	8031d30 <inc_lock+0xf8>
 8031d1e:	4a0c      	ldr	r2, [pc, #48]	; (8031d50 <inc_lock+0x118>)
 8031d20:	68fb      	ldr	r3, [r7, #12]
 8031d22:	011b      	lsls	r3, r3, #4
 8031d24:	4413      	add	r3, r2
 8031d26:	330c      	adds	r3, #12
 8031d28:	881b      	ldrh	r3, [r3, #0]
 8031d2a:	3301      	adds	r3, #1
 8031d2c:	b29a      	uxth	r2, r3
 8031d2e:	e001      	b.n	8031d34 <inc_lock+0xfc>
 8031d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8031d34:	4906      	ldr	r1, [pc, #24]	; (8031d50 <inc_lock+0x118>)
 8031d36:	68fb      	ldr	r3, [r7, #12]
 8031d38:	011b      	lsls	r3, r3, #4
 8031d3a:	440b      	add	r3, r1
 8031d3c:	330c      	adds	r3, #12
 8031d3e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8031d40:	68fb      	ldr	r3, [r7, #12]
 8031d42:	3301      	adds	r3, #1
}
 8031d44:	4618      	mov	r0, r3
 8031d46:	3714      	adds	r7, #20
 8031d48:	46bd      	mov	sp, r7
 8031d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031d4e:	4770      	bx	lr
 8031d50:	2000607c 	.word	0x2000607c

08031d54 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8031d54:	b480      	push	{r7}
 8031d56:	b085      	sub	sp, #20
 8031d58:	af00      	add	r7, sp, #0
 8031d5a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8031d5c:	687b      	ldr	r3, [r7, #4]
 8031d5e:	3b01      	subs	r3, #1
 8031d60:	607b      	str	r3, [r7, #4]
 8031d62:	687b      	ldr	r3, [r7, #4]
 8031d64:	2b01      	cmp	r3, #1
 8031d66:	d825      	bhi.n	8031db4 <dec_lock+0x60>
		n = Files[i].ctr;
 8031d68:	4a17      	ldr	r2, [pc, #92]	; (8031dc8 <dec_lock+0x74>)
 8031d6a:	687b      	ldr	r3, [r7, #4]
 8031d6c:	011b      	lsls	r3, r3, #4
 8031d6e:	4413      	add	r3, r2
 8031d70:	330c      	adds	r3, #12
 8031d72:	881b      	ldrh	r3, [r3, #0]
 8031d74:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8031d76:	89fb      	ldrh	r3, [r7, #14]
 8031d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8031d7c:	d101      	bne.n	8031d82 <dec_lock+0x2e>
 8031d7e:	2300      	movs	r3, #0
 8031d80:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8031d82:	89fb      	ldrh	r3, [r7, #14]
 8031d84:	2b00      	cmp	r3, #0
 8031d86:	d002      	beq.n	8031d8e <dec_lock+0x3a>
 8031d88:	89fb      	ldrh	r3, [r7, #14]
 8031d8a:	3b01      	subs	r3, #1
 8031d8c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8031d8e:	4a0e      	ldr	r2, [pc, #56]	; (8031dc8 <dec_lock+0x74>)
 8031d90:	687b      	ldr	r3, [r7, #4]
 8031d92:	011b      	lsls	r3, r3, #4
 8031d94:	4413      	add	r3, r2
 8031d96:	330c      	adds	r3, #12
 8031d98:	89fa      	ldrh	r2, [r7, #14]
 8031d9a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8031d9c:	89fb      	ldrh	r3, [r7, #14]
 8031d9e:	2b00      	cmp	r3, #0
 8031da0:	d105      	bne.n	8031dae <dec_lock+0x5a>
 8031da2:	4a09      	ldr	r2, [pc, #36]	; (8031dc8 <dec_lock+0x74>)
 8031da4:	687b      	ldr	r3, [r7, #4]
 8031da6:	011b      	lsls	r3, r3, #4
 8031da8:	4413      	add	r3, r2
 8031daa:	2200      	movs	r2, #0
 8031dac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8031dae:	2300      	movs	r3, #0
 8031db0:	737b      	strb	r3, [r7, #13]
 8031db2:	e001      	b.n	8031db8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8031db4:	2302      	movs	r3, #2
 8031db6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8031db8:	7b7b      	ldrb	r3, [r7, #13]
}
 8031dba:	4618      	mov	r0, r3
 8031dbc:	3714      	adds	r7, #20
 8031dbe:	46bd      	mov	sp, r7
 8031dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031dc4:	4770      	bx	lr
 8031dc6:	bf00      	nop
 8031dc8:	2000607c 	.word	0x2000607c

08031dcc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8031dcc:	b480      	push	{r7}
 8031dce:	b085      	sub	sp, #20
 8031dd0:	af00      	add	r7, sp, #0
 8031dd2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8031dd4:	2300      	movs	r3, #0
 8031dd6:	60fb      	str	r3, [r7, #12]
 8031dd8:	e010      	b.n	8031dfc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8031dda:	4a0d      	ldr	r2, [pc, #52]	; (8031e10 <clear_lock+0x44>)
 8031ddc:	68fb      	ldr	r3, [r7, #12]
 8031dde:	011b      	lsls	r3, r3, #4
 8031de0:	4413      	add	r3, r2
 8031de2:	681b      	ldr	r3, [r3, #0]
 8031de4:	687a      	ldr	r2, [r7, #4]
 8031de6:	429a      	cmp	r2, r3
 8031de8:	d105      	bne.n	8031df6 <clear_lock+0x2a>
 8031dea:	4a09      	ldr	r2, [pc, #36]	; (8031e10 <clear_lock+0x44>)
 8031dec:	68fb      	ldr	r3, [r7, #12]
 8031dee:	011b      	lsls	r3, r3, #4
 8031df0:	4413      	add	r3, r2
 8031df2:	2200      	movs	r2, #0
 8031df4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8031df6:	68fb      	ldr	r3, [r7, #12]
 8031df8:	3301      	adds	r3, #1
 8031dfa:	60fb      	str	r3, [r7, #12]
 8031dfc:	68fb      	ldr	r3, [r7, #12]
 8031dfe:	2b01      	cmp	r3, #1
 8031e00:	d9eb      	bls.n	8031dda <clear_lock+0xe>
	}
}
 8031e02:	bf00      	nop
 8031e04:	bf00      	nop
 8031e06:	3714      	adds	r7, #20
 8031e08:	46bd      	mov	sp, r7
 8031e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031e0e:	4770      	bx	lr
 8031e10:	2000607c 	.word	0x2000607c

08031e14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8031e14:	b580      	push	{r7, lr}
 8031e16:	b086      	sub	sp, #24
 8031e18:	af00      	add	r7, sp, #0
 8031e1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8031e1c:	2300      	movs	r3, #0
 8031e1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8031e20:	687b      	ldr	r3, [r7, #4]
 8031e22:	78db      	ldrb	r3, [r3, #3]
 8031e24:	2b00      	cmp	r3, #0
 8031e26:	d034      	beq.n	8031e92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8031e28:	687b      	ldr	r3, [r7, #4]
 8031e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031e2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8031e2e:	687b      	ldr	r3, [r7, #4]
 8031e30:	7858      	ldrb	r0, [r3, #1]
 8031e32:	687b      	ldr	r3, [r7, #4]
 8031e34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8031e38:	2301      	movs	r3, #1
 8031e3a:	697a      	ldr	r2, [r7, #20]
 8031e3c:	f7ff fd40 	bl	80318c0 <disk_write>
 8031e40:	4603      	mov	r3, r0
 8031e42:	2b00      	cmp	r3, #0
 8031e44:	d002      	beq.n	8031e4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8031e46:	2301      	movs	r3, #1
 8031e48:	73fb      	strb	r3, [r7, #15]
 8031e4a:	e022      	b.n	8031e92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8031e4c:	687b      	ldr	r3, [r7, #4]
 8031e4e:	2200      	movs	r2, #0
 8031e50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8031e52:	687b      	ldr	r3, [r7, #4]
 8031e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8031e56:	697a      	ldr	r2, [r7, #20]
 8031e58:	1ad2      	subs	r2, r2, r3
 8031e5a:	687b      	ldr	r3, [r7, #4]
 8031e5c:	6a1b      	ldr	r3, [r3, #32]
 8031e5e:	429a      	cmp	r2, r3
 8031e60:	d217      	bcs.n	8031e92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8031e62:	687b      	ldr	r3, [r7, #4]
 8031e64:	789b      	ldrb	r3, [r3, #2]
 8031e66:	613b      	str	r3, [r7, #16]
 8031e68:	e010      	b.n	8031e8c <sync_window+0x78>
					wsect += fs->fsize;
 8031e6a:	687b      	ldr	r3, [r7, #4]
 8031e6c:	6a1b      	ldr	r3, [r3, #32]
 8031e6e:	697a      	ldr	r2, [r7, #20]
 8031e70:	4413      	add	r3, r2
 8031e72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8031e74:	687b      	ldr	r3, [r7, #4]
 8031e76:	7858      	ldrb	r0, [r3, #1]
 8031e78:	687b      	ldr	r3, [r7, #4]
 8031e7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8031e7e:	2301      	movs	r3, #1
 8031e80:	697a      	ldr	r2, [r7, #20]
 8031e82:	f7ff fd1d 	bl	80318c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8031e86:	693b      	ldr	r3, [r7, #16]
 8031e88:	3b01      	subs	r3, #1
 8031e8a:	613b      	str	r3, [r7, #16]
 8031e8c:	693b      	ldr	r3, [r7, #16]
 8031e8e:	2b01      	cmp	r3, #1
 8031e90:	d8eb      	bhi.n	8031e6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8031e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8031e94:	4618      	mov	r0, r3
 8031e96:	3718      	adds	r7, #24
 8031e98:	46bd      	mov	sp, r7
 8031e9a:	bd80      	pop	{r7, pc}

08031e9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8031e9c:	b580      	push	{r7, lr}
 8031e9e:	b084      	sub	sp, #16
 8031ea0:	af00      	add	r7, sp, #0
 8031ea2:	6078      	str	r0, [r7, #4]
 8031ea4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8031ea6:	2300      	movs	r3, #0
 8031ea8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8031eaa:	687b      	ldr	r3, [r7, #4]
 8031eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8031eae:	683a      	ldr	r2, [r7, #0]
 8031eb0:	429a      	cmp	r2, r3
 8031eb2:	d01b      	beq.n	8031eec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8031eb4:	6878      	ldr	r0, [r7, #4]
 8031eb6:	f7ff ffad 	bl	8031e14 <sync_window>
 8031eba:	4603      	mov	r3, r0
 8031ebc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8031ebe:	7bfb      	ldrb	r3, [r7, #15]
 8031ec0:	2b00      	cmp	r3, #0
 8031ec2:	d113      	bne.n	8031eec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8031ec4:	687b      	ldr	r3, [r7, #4]
 8031ec6:	7858      	ldrb	r0, [r3, #1]
 8031ec8:	687b      	ldr	r3, [r7, #4]
 8031eca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8031ece:	2301      	movs	r3, #1
 8031ed0:	683a      	ldr	r2, [r7, #0]
 8031ed2:	f7ff fcd5 	bl	8031880 <disk_read>
 8031ed6:	4603      	mov	r3, r0
 8031ed8:	2b00      	cmp	r3, #0
 8031eda:	d004      	beq.n	8031ee6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8031edc:	f04f 33ff 	mov.w	r3, #4294967295
 8031ee0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8031ee2:	2301      	movs	r3, #1
 8031ee4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8031ee6:	687b      	ldr	r3, [r7, #4]
 8031ee8:	683a      	ldr	r2, [r7, #0]
 8031eea:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8031eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8031eee:	4618      	mov	r0, r3
 8031ef0:	3710      	adds	r7, #16
 8031ef2:	46bd      	mov	sp, r7
 8031ef4:	bd80      	pop	{r7, pc}
	...

08031ef8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8031ef8:	b580      	push	{r7, lr}
 8031efa:	b084      	sub	sp, #16
 8031efc:	af00      	add	r7, sp, #0
 8031efe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8031f00:	6878      	ldr	r0, [r7, #4]
 8031f02:	f7ff ff87 	bl	8031e14 <sync_window>
 8031f06:	4603      	mov	r3, r0
 8031f08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8031f0a:	7bfb      	ldrb	r3, [r7, #15]
 8031f0c:	2b00      	cmp	r3, #0
 8031f0e:	d159      	bne.n	8031fc4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8031f10:	687b      	ldr	r3, [r7, #4]
 8031f12:	781b      	ldrb	r3, [r3, #0]
 8031f14:	2b03      	cmp	r3, #3
 8031f16:	d149      	bne.n	8031fac <sync_fs+0xb4>
 8031f18:	687b      	ldr	r3, [r7, #4]
 8031f1a:	791b      	ldrb	r3, [r3, #4]
 8031f1c:	2b01      	cmp	r3, #1
 8031f1e:	d145      	bne.n	8031fac <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8031f20:	687b      	ldr	r3, [r7, #4]
 8031f22:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8031f26:	687b      	ldr	r3, [r7, #4]
 8031f28:	899b      	ldrh	r3, [r3, #12]
 8031f2a:	461a      	mov	r2, r3
 8031f2c:	2100      	movs	r1, #0
 8031f2e:	f7ff fda8 	bl	8031a82 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8031f32:	687b      	ldr	r3, [r7, #4]
 8031f34:	3338      	adds	r3, #56	; 0x38
 8031f36:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8031f3a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8031f3e:	4618      	mov	r0, r3
 8031f40:	f7ff fd37 	bl	80319b2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8031f44:	687b      	ldr	r3, [r7, #4]
 8031f46:	3338      	adds	r3, #56	; 0x38
 8031f48:	4921      	ldr	r1, [pc, #132]	; (8031fd0 <sync_fs+0xd8>)
 8031f4a:	4618      	mov	r0, r3
 8031f4c:	f7ff fd4c 	bl	80319e8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8031f50:	687b      	ldr	r3, [r7, #4]
 8031f52:	3338      	adds	r3, #56	; 0x38
 8031f54:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8031f58:	491e      	ldr	r1, [pc, #120]	; (8031fd4 <sync_fs+0xdc>)
 8031f5a:	4618      	mov	r0, r3
 8031f5c:	f7ff fd44 	bl	80319e8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8031f60:	687b      	ldr	r3, [r7, #4]
 8031f62:	3338      	adds	r3, #56	; 0x38
 8031f64:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8031f68:	687b      	ldr	r3, [r7, #4]
 8031f6a:	699b      	ldr	r3, [r3, #24]
 8031f6c:	4619      	mov	r1, r3
 8031f6e:	4610      	mov	r0, r2
 8031f70:	f7ff fd3a 	bl	80319e8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8031f74:	687b      	ldr	r3, [r7, #4]
 8031f76:	3338      	adds	r3, #56	; 0x38
 8031f78:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8031f7c:	687b      	ldr	r3, [r7, #4]
 8031f7e:	695b      	ldr	r3, [r3, #20]
 8031f80:	4619      	mov	r1, r3
 8031f82:	4610      	mov	r0, r2
 8031f84:	f7ff fd30 	bl	80319e8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8031f88:	687b      	ldr	r3, [r7, #4]
 8031f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8031f8c:	1c5a      	adds	r2, r3, #1
 8031f8e:	687b      	ldr	r3, [r7, #4]
 8031f90:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8031f92:	687b      	ldr	r3, [r7, #4]
 8031f94:	7858      	ldrb	r0, [r3, #1]
 8031f96:	687b      	ldr	r3, [r7, #4]
 8031f98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8031f9c:	687b      	ldr	r3, [r7, #4]
 8031f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8031fa0:	2301      	movs	r3, #1
 8031fa2:	f7ff fc8d 	bl	80318c0 <disk_write>
			fs->fsi_flag = 0;
 8031fa6:	687b      	ldr	r3, [r7, #4]
 8031fa8:	2200      	movs	r2, #0
 8031faa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8031fac:	687b      	ldr	r3, [r7, #4]
 8031fae:	785b      	ldrb	r3, [r3, #1]
 8031fb0:	2200      	movs	r2, #0
 8031fb2:	2100      	movs	r1, #0
 8031fb4:	4618      	mov	r0, r3
 8031fb6:	f7ff fca3 	bl	8031900 <disk_ioctl>
 8031fba:	4603      	mov	r3, r0
 8031fbc:	2b00      	cmp	r3, #0
 8031fbe:	d001      	beq.n	8031fc4 <sync_fs+0xcc>
 8031fc0:	2301      	movs	r3, #1
 8031fc2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8031fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8031fc6:	4618      	mov	r0, r3
 8031fc8:	3710      	adds	r7, #16
 8031fca:	46bd      	mov	sp, r7
 8031fcc:	bd80      	pop	{r7, pc}
 8031fce:	bf00      	nop
 8031fd0:	41615252 	.word	0x41615252
 8031fd4:	61417272 	.word	0x61417272

08031fd8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8031fd8:	b480      	push	{r7}
 8031fda:	b083      	sub	sp, #12
 8031fdc:	af00      	add	r7, sp, #0
 8031fde:	6078      	str	r0, [r7, #4]
 8031fe0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8031fe2:	683b      	ldr	r3, [r7, #0]
 8031fe4:	3b02      	subs	r3, #2
 8031fe6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8031fe8:	687b      	ldr	r3, [r7, #4]
 8031fea:	69db      	ldr	r3, [r3, #28]
 8031fec:	3b02      	subs	r3, #2
 8031fee:	683a      	ldr	r2, [r7, #0]
 8031ff0:	429a      	cmp	r2, r3
 8031ff2:	d301      	bcc.n	8031ff8 <clust2sect+0x20>
 8031ff4:	2300      	movs	r3, #0
 8031ff6:	e008      	b.n	803200a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8031ff8:	687b      	ldr	r3, [r7, #4]
 8031ffa:	895b      	ldrh	r3, [r3, #10]
 8031ffc:	461a      	mov	r2, r3
 8031ffe:	683b      	ldr	r3, [r7, #0]
 8032000:	fb03 f202 	mul.w	r2, r3, r2
 8032004:	687b      	ldr	r3, [r7, #4]
 8032006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032008:	4413      	add	r3, r2
}
 803200a:	4618      	mov	r0, r3
 803200c:	370c      	adds	r7, #12
 803200e:	46bd      	mov	sp, r7
 8032010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032014:	4770      	bx	lr

08032016 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8032016:	b580      	push	{r7, lr}
 8032018:	b086      	sub	sp, #24
 803201a:	af00      	add	r7, sp, #0
 803201c:	6078      	str	r0, [r7, #4]
 803201e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8032020:	687b      	ldr	r3, [r7, #4]
 8032022:	681b      	ldr	r3, [r3, #0]
 8032024:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8032026:	683b      	ldr	r3, [r7, #0]
 8032028:	2b01      	cmp	r3, #1
 803202a:	d904      	bls.n	8032036 <get_fat+0x20>
 803202c:	693b      	ldr	r3, [r7, #16]
 803202e:	69db      	ldr	r3, [r3, #28]
 8032030:	683a      	ldr	r2, [r7, #0]
 8032032:	429a      	cmp	r2, r3
 8032034:	d302      	bcc.n	803203c <get_fat+0x26>
		val = 1;	/* Internal error */
 8032036:	2301      	movs	r3, #1
 8032038:	617b      	str	r3, [r7, #20]
 803203a:	e0bb      	b.n	80321b4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 803203c:	f04f 33ff 	mov.w	r3, #4294967295
 8032040:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8032042:	693b      	ldr	r3, [r7, #16]
 8032044:	781b      	ldrb	r3, [r3, #0]
 8032046:	2b03      	cmp	r3, #3
 8032048:	f000 8083 	beq.w	8032152 <get_fat+0x13c>
 803204c:	2b03      	cmp	r3, #3
 803204e:	f300 80a7 	bgt.w	80321a0 <get_fat+0x18a>
 8032052:	2b01      	cmp	r3, #1
 8032054:	d002      	beq.n	803205c <get_fat+0x46>
 8032056:	2b02      	cmp	r3, #2
 8032058:	d056      	beq.n	8032108 <get_fat+0xf2>
 803205a:	e0a1      	b.n	80321a0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 803205c:	683b      	ldr	r3, [r7, #0]
 803205e:	60fb      	str	r3, [r7, #12]
 8032060:	68fb      	ldr	r3, [r7, #12]
 8032062:	085b      	lsrs	r3, r3, #1
 8032064:	68fa      	ldr	r2, [r7, #12]
 8032066:	4413      	add	r3, r2
 8032068:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 803206a:	693b      	ldr	r3, [r7, #16]
 803206c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 803206e:	693b      	ldr	r3, [r7, #16]
 8032070:	899b      	ldrh	r3, [r3, #12]
 8032072:	4619      	mov	r1, r3
 8032074:	68fb      	ldr	r3, [r7, #12]
 8032076:	fbb3 f3f1 	udiv	r3, r3, r1
 803207a:	4413      	add	r3, r2
 803207c:	4619      	mov	r1, r3
 803207e:	6938      	ldr	r0, [r7, #16]
 8032080:	f7ff ff0c 	bl	8031e9c <move_window>
 8032084:	4603      	mov	r3, r0
 8032086:	2b00      	cmp	r3, #0
 8032088:	f040 808d 	bne.w	80321a6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 803208c:	68fb      	ldr	r3, [r7, #12]
 803208e:	1c5a      	adds	r2, r3, #1
 8032090:	60fa      	str	r2, [r7, #12]
 8032092:	693a      	ldr	r2, [r7, #16]
 8032094:	8992      	ldrh	r2, [r2, #12]
 8032096:	fbb3 f1f2 	udiv	r1, r3, r2
 803209a:	fb01 f202 	mul.w	r2, r1, r2
 803209e:	1a9b      	subs	r3, r3, r2
 80320a0:	693a      	ldr	r2, [r7, #16]
 80320a2:	4413      	add	r3, r2
 80320a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80320a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80320aa:	693b      	ldr	r3, [r7, #16]
 80320ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80320ae:	693b      	ldr	r3, [r7, #16]
 80320b0:	899b      	ldrh	r3, [r3, #12]
 80320b2:	4619      	mov	r1, r3
 80320b4:	68fb      	ldr	r3, [r7, #12]
 80320b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80320ba:	4413      	add	r3, r2
 80320bc:	4619      	mov	r1, r3
 80320be:	6938      	ldr	r0, [r7, #16]
 80320c0:	f7ff feec 	bl	8031e9c <move_window>
 80320c4:	4603      	mov	r3, r0
 80320c6:	2b00      	cmp	r3, #0
 80320c8:	d16f      	bne.n	80321aa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80320ca:	693b      	ldr	r3, [r7, #16]
 80320cc:	899b      	ldrh	r3, [r3, #12]
 80320ce:	461a      	mov	r2, r3
 80320d0:	68fb      	ldr	r3, [r7, #12]
 80320d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80320d6:	fb01 f202 	mul.w	r2, r1, r2
 80320da:	1a9b      	subs	r3, r3, r2
 80320dc:	693a      	ldr	r2, [r7, #16]
 80320de:	4413      	add	r3, r2
 80320e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80320e4:	021b      	lsls	r3, r3, #8
 80320e6:	461a      	mov	r2, r3
 80320e8:	68bb      	ldr	r3, [r7, #8]
 80320ea:	4313      	orrs	r3, r2
 80320ec:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80320ee:	683b      	ldr	r3, [r7, #0]
 80320f0:	f003 0301 	and.w	r3, r3, #1
 80320f4:	2b00      	cmp	r3, #0
 80320f6:	d002      	beq.n	80320fe <get_fat+0xe8>
 80320f8:	68bb      	ldr	r3, [r7, #8]
 80320fa:	091b      	lsrs	r3, r3, #4
 80320fc:	e002      	b.n	8032104 <get_fat+0xee>
 80320fe:	68bb      	ldr	r3, [r7, #8]
 8032100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8032104:	617b      	str	r3, [r7, #20]
			break;
 8032106:	e055      	b.n	80321b4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8032108:	693b      	ldr	r3, [r7, #16]
 803210a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 803210c:	693b      	ldr	r3, [r7, #16]
 803210e:	899b      	ldrh	r3, [r3, #12]
 8032110:	085b      	lsrs	r3, r3, #1
 8032112:	b29b      	uxth	r3, r3
 8032114:	4619      	mov	r1, r3
 8032116:	683b      	ldr	r3, [r7, #0]
 8032118:	fbb3 f3f1 	udiv	r3, r3, r1
 803211c:	4413      	add	r3, r2
 803211e:	4619      	mov	r1, r3
 8032120:	6938      	ldr	r0, [r7, #16]
 8032122:	f7ff febb 	bl	8031e9c <move_window>
 8032126:	4603      	mov	r3, r0
 8032128:	2b00      	cmp	r3, #0
 803212a:	d140      	bne.n	80321ae <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 803212c:	693b      	ldr	r3, [r7, #16]
 803212e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8032132:	683b      	ldr	r3, [r7, #0]
 8032134:	005b      	lsls	r3, r3, #1
 8032136:	693a      	ldr	r2, [r7, #16]
 8032138:	8992      	ldrh	r2, [r2, #12]
 803213a:	fbb3 f0f2 	udiv	r0, r3, r2
 803213e:	fb00 f202 	mul.w	r2, r0, r2
 8032142:	1a9b      	subs	r3, r3, r2
 8032144:	440b      	add	r3, r1
 8032146:	4618      	mov	r0, r3
 8032148:	f7ff fbf8 	bl	803193c <ld_word>
 803214c:	4603      	mov	r3, r0
 803214e:	617b      	str	r3, [r7, #20]
			break;
 8032150:	e030      	b.n	80321b4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8032152:	693b      	ldr	r3, [r7, #16]
 8032154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8032156:	693b      	ldr	r3, [r7, #16]
 8032158:	899b      	ldrh	r3, [r3, #12]
 803215a:	089b      	lsrs	r3, r3, #2
 803215c:	b29b      	uxth	r3, r3
 803215e:	4619      	mov	r1, r3
 8032160:	683b      	ldr	r3, [r7, #0]
 8032162:	fbb3 f3f1 	udiv	r3, r3, r1
 8032166:	4413      	add	r3, r2
 8032168:	4619      	mov	r1, r3
 803216a:	6938      	ldr	r0, [r7, #16]
 803216c:	f7ff fe96 	bl	8031e9c <move_window>
 8032170:	4603      	mov	r3, r0
 8032172:	2b00      	cmp	r3, #0
 8032174:	d11d      	bne.n	80321b2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8032176:	693b      	ldr	r3, [r7, #16]
 8032178:	f103 0138 	add.w	r1, r3, #56	; 0x38
 803217c:	683b      	ldr	r3, [r7, #0]
 803217e:	009b      	lsls	r3, r3, #2
 8032180:	693a      	ldr	r2, [r7, #16]
 8032182:	8992      	ldrh	r2, [r2, #12]
 8032184:	fbb3 f0f2 	udiv	r0, r3, r2
 8032188:	fb00 f202 	mul.w	r2, r0, r2
 803218c:	1a9b      	subs	r3, r3, r2
 803218e:	440b      	add	r3, r1
 8032190:	4618      	mov	r0, r3
 8032192:	f7ff fbeb 	bl	803196c <ld_dword>
 8032196:	4603      	mov	r3, r0
 8032198:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 803219c:	617b      	str	r3, [r7, #20]
			break;
 803219e:	e009      	b.n	80321b4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80321a0:	2301      	movs	r3, #1
 80321a2:	617b      	str	r3, [r7, #20]
 80321a4:	e006      	b.n	80321b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80321a6:	bf00      	nop
 80321a8:	e004      	b.n	80321b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80321aa:	bf00      	nop
 80321ac:	e002      	b.n	80321b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80321ae:	bf00      	nop
 80321b0:	e000      	b.n	80321b4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80321b2:	bf00      	nop
		}
	}

	return val;
 80321b4:	697b      	ldr	r3, [r7, #20]
}
 80321b6:	4618      	mov	r0, r3
 80321b8:	3718      	adds	r7, #24
 80321ba:	46bd      	mov	sp, r7
 80321bc:	bd80      	pop	{r7, pc}

080321be <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80321be:	b590      	push	{r4, r7, lr}
 80321c0:	b089      	sub	sp, #36	; 0x24
 80321c2:	af00      	add	r7, sp, #0
 80321c4:	60f8      	str	r0, [r7, #12]
 80321c6:	60b9      	str	r1, [r7, #8]
 80321c8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80321ca:	2302      	movs	r3, #2
 80321cc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80321ce:	68bb      	ldr	r3, [r7, #8]
 80321d0:	2b01      	cmp	r3, #1
 80321d2:	f240 8109 	bls.w	80323e8 <put_fat+0x22a>
 80321d6:	68fb      	ldr	r3, [r7, #12]
 80321d8:	69db      	ldr	r3, [r3, #28]
 80321da:	68ba      	ldr	r2, [r7, #8]
 80321dc:	429a      	cmp	r2, r3
 80321de:	f080 8103 	bcs.w	80323e8 <put_fat+0x22a>
		switch (fs->fs_type) {
 80321e2:	68fb      	ldr	r3, [r7, #12]
 80321e4:	781b      	ldrb	r3, [r3, #0]
 80321e6:	2b03      	cmp	r3, #3
 80321e8:	f000 80b6 	beq.w	8032358 <put_fat+0x19a>
 80321ec:	2b03      	cmp	r3, #3
 80321ee:	f300 80fb 	bgt.w	80323e8 <put_fat+0x22a>
 80321f2:	2b01      	cmp	r3, #1
 80321f4:	d003      	beq.n	80321fe <put_fat+0x40>
 80321f6:	2b02      	cmp	r3, #2
 80321f8:	f000 8083 	beq.w	8032302 <put_fat+0x144>
 80321fc:	e0f4      	b.n	80323e8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80321fe:	68bb      	ldr	r3, [r7, #8]
 8032200:	61bb      	str	r3, [r7, #24]
 8032202:	69bb      	ldr	r3, [r7, #24]
 8032204:	085b      	lsrs	r3, r3, #1
 8032206:	69ba      	ldr	r2, [r7, #24]
 8032208:	4413      	add	r3, r2
 803220a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 803220c:	68fb      	ldr	r3, [r7, #12]
 803220e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8032210:	68fb      	ldr	r3, [r7, #12]
 8032212:	899b      	ldrh	r3, [r3, #12]
 8032214:	4619      	mov	r1, r3
 8032216:	69bb      	ldr	r3, [r7, #24]
 8032218:	fbb3 f3f1 	udiv	r3, r3, r1
 803221c:	4413      	add	r3, r2
 803221e:	4619      	mov	r1, r3
 8032220:	68f8      	ldr	r0, [r7, #12]
 8032222:	f7ff fe3b 	bl	8031e9c <move_window>
 8032226:	4603      	mov	r3, r0
 8032228:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 803222a:	7ffb      	ldrb	r3, [r7, #31]
 803222c:	2b00      	cmp	r3, #0
 803222e:	f040 80d4 	bne.w	80323da <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8032232:	68fb      	ldr	r3, [r7, #12]
 8032234:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8032238:	69bb      	ldr	r3, [r7, #24]
 803223a:	1c5a      	adds	r2, r3, #1
 803223c:	61ba      	str	r2, [r7, #24]
 803223e:	68fa      	ldr	r2, [r7, #12]
 8032240:	8992      	ldrh	r2, [r2, #12]
 8032242:	fbb3 f0f2 	udiv	r0, r3, r2
 8032246:	fb00 f202 	mul.w	r2, r0, r2
 803224a:	1a9b      	subs	r3, r3, r2
 803224c:	440b      	add	r3, r1
 803224e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8032250:	68bb      	ldr	r3, [r7, #8]
 8032252:	f003 0301 	and.w	r3, r3, #1
 8032256:	2b00      	cmp	r3, #0
 8032258:	d00d      	beq.n	8032276 <put_fat+0xb8>
 803225a:	697b      	ldr	r3, [r7, #20]
 803225c:	781b      	ldrb	r3, [r3, #0]
 803225e:	b25b      	sxtb	r3, r3
 8032260:	f003 030f 	and.w	r3, r3, #15
 8032264:	b25a      	sxtb	r2, r3
 8032266:	687b      	ldr	r3, [r7, #4]
 8032268:	b2db      	uxtb	r3, r3
 803226a:	011b      	lsls	r3, r3, #4
 803226c:	b25b      	sxtb	r3, r3
 803226e:	4313      	orrs	r3, r2
 8032270:	b25b      	sxtb	r3, r3
 8032272:	b2db      	uxtb	r3, r3
 8032274:	e001      	b.n	803227a <put_fat+0xbc>
 8032276:	687b      	ldr	r3, [r7, #4]
 8032278:	b2db      	uxtb	r3, r3
 803227a:	697a      	ldr	r2, [r7, #20]
 803227c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 803227e:	68fb      	ldr	r3, [r7, #12]
 8032280:	2201      	movs	r2, #1
 8032282:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8032284:	68fb      	ldr	r3, [r7, #12]
 8032286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8032288:	68fb      	ldr	r3, [r7, #12]
 803228a:	899b      	ldrh	r3, [r3, #12]
 803228c:	4619      	mov	r1, r3
 803228e:	69bb      	ldr	r3, [r7, #24]
 8032290:	fbb3 f3f1 	udiv	r3, r3, r1
 8032294:	4413      	add	r3, r2
 8032296:	4619      	mov	r1, r3
 8032298:	68f8      	ldr	r0, [r7, #12]
 803229a:	f7ff fdff 	bl	8031e9c <move_window>
 803229e:	4603      	mov	r3, r0
 80322a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80322a2:	7ffb      	ldrb	r3, [r7, #31]
 80322a4:	2b00      	cmp	r3, #0
 80322a6:	f040 809a 	bne.w	80323de <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80322aa:	68fb      	ldr	r3, [r7, #12]
 80322ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80322b0:	68fb      	ldr	r3, [r7, #12]
 80322b2:	899b      	ldrh	r3, [r3, #12]
 80322b4:	461a      	mov	r2, r3
 80322b6:	69bb      	ldr	r3, [r7, #24]
 80322b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80322bc:	fb00 f202 	mul.w	r2, r0, r2
 80322c0:	1a9b      	subs	r3, r3, r2
 80322c2:	440b      	add	r3, r1
 80322c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80322c6:	68bb      	ldr	r3, [r7, #8]
 80322c8:	f003 0301 	and.w	r3, r3, #1
 80322cc:	2b00      	cmp	r3, #0
 80322ce:	d003      	beq.n	80322d8 <put_fat+0x11a>
 80322d0:	687b      	ldr	r3, [r7, #4]
 80322d2:	091b      	lsrs	r3, r3, #4
 80322d4:	b2db      	uxtb	r3, r3
 80322d6:	e00e      	b.n	80322f6 <put_fat+0x138>
 80322d8:	697b      	ldr	r3, [r7, #20]
 80322da:	781b      	ldrb	r3, [r3, #0]
 80322dc:	b25b      	sxtb	r3, r3
 80322de:	f023 030f 	bic.w	r3, r3, #15
 80322e2:	b25a      	sxtb	r2, r3
 80322e4:	687b      	ldr	r3, [r7, #4]
 80322e6:	0a1b      	lsrs	r3, r3, #8
 80322e8:	b25b      	sxtb	r3, r3
 80322ea:	f003 030f 	and.w	r3, r3, #15
 80322ee:	b25b      	sxtb	r3, r3
 80322f0:	4313      	orrs	r3, r2
 80322f2:	b25b      	sxtb	r3, r3
 80322f4:	b2db      	uxtb	r3, r3
 80322f6:	697a      	ldr	r2, [r7, #20]
 80322f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80322fa:	68fb      	ldr	r3, [r7, #12]
 80322fc:	2201      	movs	r2, #1
 80322fe:	70da      	strb	r2, [r3, #3]
			break;
 8032300:	e072      	b.n	80323e8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8032302:	68fb      	ldr	r3, [r7, #12]
 8032304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8032306:	68fb      	ldr	r3, [r7, #12]
 8032308:	899b      	ldrh	r3, [r3, #12]
 803230a:	085b      	lsrs	r3, r3, #1
 803230c:	b29b      	uxth	r3, r3
 803230e:	4619      	mov	r1, r3
 8032310:	68bb      	ldr	r3, [r7, #8]
 8032312:	fbb3 f3f1 	udiv	r3, r3, r1
 8032316:	4413      	add	r3, r2
 8032318:	4619      	mov	r1, r3
 803231a:	68f8      	ldr	r0, [r7, #12]
 803231c:	f7ff fdbe 	bl	8031e9c <move_window>
 8032320:	4603      	mov	r3, r0
 8032322:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8032324:	7ffb      	ldrb	r3, [r7, #31]
 8032326:	2b00      	cmp	r3, #0
 8032328:	d15b      	bne.n	80323e2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 803232a:	68fb      	ldr	r3, [r7, #12]
 803232c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8032330:	68bb      	ldr	r3, [r7, #8]
 8032332:	005b      	lsls	r3, r3, #1
 8032334:	68fa      	ldr	r2, [r7, #12]
 8032336:	8992      	ldrh	r2, [r2, #12]
 8032338:	fbb3 f0f2 	udiv	r0, r3, r2
 803233c:	fb00 f202 	mul.w	r2, r0, r2
 8032340:	1a9b      	subs	r3, r3, r2
 8032342:	440b      	add	r3, r1
 8032344:	687a      	ldr	r2, [r7, #4]
 8032346:	b292      	uxth	r2, r2
 8032348:	4611      	mov	r1, r2
 803234a:	4618      	mov	r0, r3
 803234c:	f7ff fb31 	bl	80319b2 <st_word>
			fs->wflag = 1;
 8032350:	68fb      	ldr	r3, [r7, #12]
 8032352:	2201      	movs	r2, #1
 8032354:	70da      	strb	r2, [r3, #3]
			break;
 8032356:	e047      	b.n	80323e8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8032358:	68fb      	ldr	r3, [r7, #12]
 803235a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 803235c:	68fb      	ldr	r3, [r7, #12]
 803235e:	899b      	ldrh	r3, [r3, #12]
 8032360:	089b      	lsrs	r3, r3, #2
 8032362:	b29b      	uxth	r3, r3
 8032364:	4619      	mov	r1, r3
 8032366:	68bb      	ldr	r3, [r7, #8]
 8032368:	fbb3 f3f1 	udiv	r3, r3, r1
 803236c:	4413      	add	r3, r2
 803236e:	4619      	mov	r1, r3
 8032370:	68f8      	ldr	r0, [r7, #12]
 8032372:	f7ff fd93 	bl	8031e9c <move_window>
 8032376:	4603      	mov	r3, r0
 8032378:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 803237a:	7ffb      	ldrb	r3, [r7, #31]
 803237c:	2b00      	cmp	r3, #0
 803237e:	d132      	bne.n	80323e6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8032380:	687b      	ldr	r3, [r7, #4]
 8032382:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8032386:	68fb      	ldr	r3, [r7, #12]
 8032388:	f103 0138 	add.w	r1, r3, #56	; 0x38
 803238c:	68bb      	ldr	r3, [r7, #8]
 803238e:	009b      	lsls	r3, r3, #2
 8032390:	68fa      	ldr	r2, [r7, #12]
 8032392:	8992      	ldrh	r2, [r2, #12]
 8032394:	fbb3 f0f2 	udiv	r0, r3, r2
 8032398:	fb00 f202 	mul.w	r2, r0, r2
 803239c:	1a9b      	subs	r3, r3, r2
 803239e:	440b      	add	r3, r1
 80323a0:	4618      	mov	r0, r3
 80323a2:	f7ff fae3 	bl	803196c <ld_dword>
 80323a6:	4603      	mov	r3, r0
 80323a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80323ac:	4323      	orrs	r3, r4
 80323ae:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80323b0:	68fb      	ldr	r3, [r7, #12]
 80323b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80323b6:	68bb      	ldr	r3, [r7, #8]
 80323b8:	009b      	lsls	r3, r3, #2
 80323ba:	68fa      	ldr	r2, [r7, #12]
 80323bc:	8992      	ldrh	r2, [r2, #12]
 80323be:	fbb3 f0f2 	udiv	r0, r3, r2
 80323c2:	fb00 f202 	mul.w	r2, r0, r2
 80323c6:	1a9b      	subs	r3, r3, r2
 80323c8:	440b      	add	r3, r1
 80323ca:	6879      	ldr	r1, [r7, #4]
 80323cc:	4618      	mov	r0, r3
 80323ce:	f7ff fb0b 	bl	80319e8 <st_dword>
			fs->wflag = 1;
 80323d2:	68fb      	ldr	r3, [r7, #12]
 80323d4:	2201      	movs	r2, #1
 80323d6:	70da      	strb	r2, [r3, #3]
			break;
 80323d8:	e006      	b.n	80323e8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80323da:	bf00      	nop
 80323dc:	e004      	b.n	80323e8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80323de:	bf00      	nop
 80323e0:	e002      	b.n	80323e8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80323e2:	bf00      	nop
 80323e4:	e000      	b.n	80323e8 <put_fat+0x22a>
			if (res != FR_OK) break;
 80323e6:	bf00      	nop
		}
	}
	return res;
 80323e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80323ea:	4618      	mov	r0, r3
 80323ec:	3724      	adds	r7, #36	; 0x24
 80323ee:	46bd      	mov	sp, r7
 80323f0:	bd90      	pop	{r4, r7, pc}

080323f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80323f2:	b580      	push	{r7, lr}
 80323f4:	b088      	sub	sp, #32
 80323f6:	af00      	add	r7, sp, #0
 80323f8:	60f8      	str	r0, [r7, #12]
 80323fa:	60b9      	str	r1, [r7, #8]
 80323fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80323fe:	2300      	movs	r3, #0
 8032400:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8032402:	68fb      	ldr	r3, [r7, #12]
 8032404:	681b      	ldr	r3, [r3, #0]
 8032406:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8032408:	68bb      	ldr	r3, [r7, #8]
 803240a:	2b01      	cmp	r3, #1
 803240c:	d904      	bls.n	8032418 <remove_chain+0x26>
 803240e:	69bb      	ldr	r3, [r7, #24]
 8032410:	69db      	ldr	r3, [r3, #28]
 8032412:	68ba      	ldr	r2, [r7, #8]
 8032414:	429a      	cmp	r2, r3
 8032416:	d301      	bcc.n	803241c <remove_chain+0x2a>
 8032418:	2302      	movs	r3, #2
 803241a:	e04b      	b.n	80324b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 803241c:	687b      	ldr	r3, [r7, #4]
 803241e:	2b00      	cmp	r3, #0
 8032420:	d00c      	beq.n	803243c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8032422:	f04f 32ff 	mov.w	r2, #4294967295
 8032426:	6879      	ldr	r1, [r7, #4]
 8032428:	69b8      	ldr	r0, [r7, #24]
 803242a:	f7ff fec8 	bl	80321be <put_fat>
 803242e:	4603      	mov	r3, r0
 8032430:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8032432:	7ffb      	ldrb	r3, [r7, #31]
 8032434:	2b00      	cmp	r3, #0
 8032436:	d001      	beq.n	803243c <remove_chain+0x4a>
 8032438:	7ffb      	ldrb	r3, [r7, #31]
 803243a:	e03b      	b.n	80324b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 803243c:	68b9      	ldr	r1, [r7, #8]
 803243e:	68f8      	ldr	r0, [r7, #12]
 8032440:	f7ff fde9 	bl	8032016 <get_fat>
 8032444:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8032446:	697b      	ldr	r3, [r7, #20]
 8032448:	2b00      	cmp	r3, #0
 803244a:	d031      	beq.n	80324b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 803244c:	697b      	ldr	r3, [r7, #20]
 803244e:	2b01      	cmp	r3, #1
 8032450:	d101      	bne.n	8032456 <remove_chain+0x64>
 8032452:	2302      	movs	r3, #2
 8032454:	e02e      	b.n	80324b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8032456:	697b      	ldr	r3, [r7, #20]
 8032458:	f1b3 3fff 	cmp.w	r3, #4294967295
 803245c:	d101      	bne.n	8032462 <remove_chain+0x70>
 803245e:	2301      	movs	r3, #1
 8032460:	e028      	b.n	80324b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8032462:	2200      	movs	r2, #0
 8032464:	68b9      	ldr	r1, [r7, #8]
 8032466:	69b8      	ldr	r0, [r7, #24]
 8032468:	f7ff fea9 	bl	80321be <put_fat>
 803246c:	4603      	mov	r3, r0
 803246e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8032470:	7ffb      	ldrb	r3, [r7, #31]
 8032472:	2b00      	cmp	r3, #0
 8032474:	d001      	beq.n	803247a <remove_chain+0x88>
 8032476:	7ffb      	ldrb	r3, [r7, #31]
 8032478:	e01c      	b.n	80324b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 803247a:	69bb      	ldr	r3, [r7, #24]
 803247c:	699a      	ldr	r2, [r3, #24]
 803247e:	69bb      	ldr	r3, [r7, #24]
 8032480:	69db      	ldr	r3, [r3, #28]
 8032482:	3b02      	subs	r3, #2
 8032484:	429a      	cmp	r2, r3
 8032486:	d20b      	bcs.n	80324a0 <remove_chain+0xae>
			fs->free_clst++;
 8032488:	69bb      	ldr	r3, [r7, #24]
 803248a:	699b      	ldr	r3, [r3, #24]
 803248c:	1c5a      	adds	r2, r3, #1
 803248e:	69bb      	ldr	r3, [r7, #24]
 8032490:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8032492:	69bb      	ldr	r3, [r7, #24]
 8032494:	791b      	ldrb	r3, [r3, #4]
 8032496:	f043 0301 	orr.w	r3, r3, #1
 803249a:	b2da      	uxtb	r2, r3
 803249c:	69bb      	ldr	r3, [r7, #24]
 803249e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80324a0:	697b      	ldr	r3, [r7, #20]
 80324a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80324a4:	69bb      	ldr	r3, [r7, #24]
 80324a6:	69db      	ldr	r3, [r3, #28]
 80324a8:	68ba      	ldr	r2, [r7, #8]
 80324aa:	429a      	cmp	r2, r3
 80324ac:	d3c6      	bcc.n	803243c <remove_chain+0x4a>
 80324ae:	e000      	b.n	80324b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80324b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80324b2:	2300      	movs	r3, #0
}
 80324b4:	4618      	mov	r0, r3
 80324b6:	3720      	adds	r7, #32
 80324b8:	46bd      	mov	sp, r7
 80324ba:	bd80      	pop	{r7, pc}

080324bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80324bc:	b580      	push	{r7, lr}
 80324be:	b088      	sub	sp, #32
 80324c0:	af00      	add	r7, sp, #0
 80324c2:	6078      	str	r0, [r7, #4]
 80324c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80324c6:	687b      	ldr	r3, [r7, #4]
 80324c8:	681b      	ldr	r3, [r3, #0]
 80324ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80324cc:	683b      	ldr	r3, [r7, #0]
 80324ce:	2b00      	cmp	r3, #0
 80324d0:	d10d      	bne.n	80324ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80324d2:	693b      	ldr	r3, [r7, #16]
 80324d4:	695b      	ldr	r3, [r3, #20]
 80324d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80324d8:	69bb      	ldr	r3, [r7, #24]
 80324da:	2b00      	cmp	r3, #0
 80324dc:	d004      	beq.n	80324e8 <create_chain+0x2c>
 80324de:	693b      	ldr	r3, [r7, #16]
 80324e0:	69db      	ldr	r3, [r3, #28]
 80324e2:	69ba      	ldr	r2, [r7, #24]
 80324e4:	429a      	cmp	r2, r3
 80324e6:	d31b      	bcc.n	8032520 <create_chain+0x64>
 80324e8:	2301      	movs	r3, #1
 80324ea:	61bb      	str	r3, [r7, #24]
 80324ec:	e018      	b.n	8032520 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80324ee:	6839      	ldr	r1, [r7, #0]
 80324f0:	6878      	ldr	r0, [r7, #4]
 80324f2:	f7ff fd90 	bl	8032016 <get_fat>
 80324f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80324f8:	68fb      	ldr	r3, [r7, #12]
 80324fa:	2b01      	cmp	r3, #1
 80324fc:	d801      	bhi.n	8032502 <create_chain+0x46>
 80324fe:	2301      	movs	r3, #1
 8032500:	e070      	b.n	80325e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8032502:	68fb      	ldr	r3, [r7, #12]
 8032504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8032508:	d101      	bne.n	803250e <create_chain+0x52>
 803250a:	68fb      	ldr	r3, [r7, #12]
 803250c:	e06a      	b.n	80325e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 803250e:	693b      	ldr	r3, [r7, #16]
 8032510:	69db      	ldr	r3, [r3, #28]
 8032512:	68fa      	ldr	r2, [r7, #12]
 8032514:	429a      	cmp	r2, r3
 8032516:	d201      	bcs.n	803251c <create_chain+0x60>
 8032518:	68fb      	ldr	r3, [r7, #12]
 803251a:	e063      	b.n	80325e4 <create_chain+0x128>
		scl = clst;
 803251c:	683b      	ldr	r3, [r7, #0]
 803251e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8032520:	69bb      	ldr	r3, [r7, #24]
 8032522:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8032524:	69fb      	ldr	r3, [r7, #28]
 8032526:	3301      	adds	r3, #1
 8032528:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 803252a:	693b      	ldr	r3, [r7, #16]
 803252c:	69db      	ldr	r3, [r3, #28]
 803252e:	69fa      	ldr	r2, [r7, #28]
 8032530:	429a      	cmp	r2, r3
 8032532:	d307      	bcc.n	8032544 <create_chain+0x88>
				ncl = 2;
 8032534:	2302      	movs	r3, #2
 8032536:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8032538:	69fa      	ldr	r2, [r7, #28]
 803253a:	69bb      	ldr	r3, [r7, #24]
 803253c:	429a      	cmp	r2, r3
 803253e:	d901      	bls.n	8032544 <create_chain+0x88>
 8032540:	2300      	movs	r3, #0
 8032542:	e04f      	b.n	80325e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8032544:	69f9      	ldr	r1, [r7, #28]
 8032546:	6878      	ldr	r0, [r7, #4]
 8032548:	f7ff fd65 	bl	8032016 <get_fat>
 803254c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 803254e:	68fb      	ldr	r3, [r7, #12]
 8032550:	2b00      	cmp	r3, #0
 8032552:	d00e      	beq.n	8032572 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8032554:	68fb      	ldr	r3, [r7, #12]
 8032556:	2b01      	cmp	r3, #1
 8032558:	d003      	beq.n	8032562 <create_chain+0xa6>
 803255a:	68fb      	ldr	r3, [r7, #12]
 803255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8032560:	d101      	bne.n	8032566 <create_chain+0xaa>
 8032562:	68fb      	ldr	r3, [r7, #12]
 8032564:	e03e      	b.n	80325e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8032566:	69fa      	ldr	r2, [r7, #28]
 8032568:	69bb      	ldr	r3, [r7, #24]
 803256a:	429a      	cmp	r2, r3
 803256c:	d1da      	bne.n	8032524 <create_chain+0x68>
 803256e:	2300      	movs	r3, #0
 8032570:	e038      	b.n	80325e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8032572:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8032574:	f04f 32ff 	mov.w	r2, #4294967295
 8032578:	69f9      	ldr	r1, [r7, #28]
 803257a:	6938      	ldr	r0, [r7, #16]
 803257c:	f7ff fe1f 	bl	80321be <put_fat>
 8032580:	4603      	mov	r3, r0
 8032582:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8032584:	7dfb      	ldrb	r3, [r7, #23]
 8032586:	2b00      	cmp	r3, #0
 8032588:	d109      	bne.n	803259e <create_chain+0xe2>
 803258a:	683b      	ldr	r3, [r7, #0]
 803258c:	2b00      	cmp	r3, #0
 803258e:	d006      	beq.n	803259e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8032590:	69fa      	ldr	r2, [r7, #28]
 8032592:	6839      	ldr	r1, [r7, #0]
 8032594:	6938      	ldr	r0, [r7, #16]
 8032596:	f7ff fe12 	bl	80321be <put_fat>
 803259a:	4603      	mov	r3, r0
 803259c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 803259e:	7dfb      	ldrb	r3, [r7, #23]
 80325a0:	2b00      	cmp	r3, #0
 80325a2:	d116      	bne.n	80325d2 <create_chain+0x116>
		fs->last_clst = ncl;
 80325a4:	693b      	ldr	r3, [r7, #16]
 80325a6:	69fa      	ldr	r2, [r7, #28]
 80325a8:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80325aa:	693b      	ldr	r3, [r7, #16]
 80325ac:	699a      	ldr	r2, [r3, #24]
 80325ae:	693b      	ldr	r3, [r7, #16]
 80325b0:	69db      	ldr	r3, [r3, #28]
 80325b2:	3b02      	subs	r3, #2
 80325b4:	429a      	cmp	r2, r3
 80325b6:	d804      	bhi.n	80325c2 <create_chain+0x106>
 80325b8:	693b      	ldr	r3, [r7, #16]
 80325ba:	699b      	ldr	r3, [r3, #24]
 80325bc:	1e5a      	subs	r2, r3, #1
 80325be:	693b      	ldr	r3, [r7, #16]
 80325c0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80325c2:	693b      	ldr	r3, [r7, #16]
 80325c4:	791b      	ldrb	r3, [r3, #4]
 80325c6:	f043 0301 	orr.w	r3, r3, #1
 80325ca:	b2da      	uxtb	r2, r3
 80325cc:	693b      	ldr	r3, [r7, #16]
 80325ce:	711a      	strb	r2, [r3, #4]
 80325d0:	e007      	b.n	80325e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80325d2:	7dfb      	ldrb	r3, [r7, #23]
 80325d4:	2b01      	cmp	r3, #1
 80325d6:	d102      	bne.n	80325de <create_chain+0x122>
 80325d8:	f04f 33ff 	mov.w	r3, #4294967295
 80325dc:	e000      	b.n	80325e0 <create_chain+0x124>
 80325de:	2301      	movs	r3, #1
 80325e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80325e2:	69fb      	ldr	r3, [r7, #28]
}
 80325e4:	4618      	mov	r0, r3
 80325e6:	3720      	adds	r7, #32
 80325e8:	46bd      	mov	sp, r7
 80325ea:	bd80      	pop	{r7, pc}

080325ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80325ec:	b480      	push	{r7}
 80325ee:	b087      	sub	sp, #28
 80325f0:	af00      	add	r7, sp, #0
 80325f2:	6078      	str	r0, [r7, #4]
 80325f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80325f6:	687b      	ldr	r3, [r7, #4]
 80325f8:	681b      	ldr	r3, [r3, #0]
 80325fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80325fc:	687b      	ldr	r3, [r7, #4]
 80325fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8032600:	3304      	adds	r3, #4
 8032602:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8032604:	68fb      	ldr	r3, [r7, #12]
 8032606:	899b      	ldrh	r3, [r3, #12]
 8032608:	461a      	mov	r2, r3
 803260a:	683b      	ldr	r3, [r7, #0]
 803260c:	fbb3 f3f2 	udiv	r3, r3, r2
 8032610:	68fa      	ldr	r2, [r7, #12]
 8032612:	8952      	ldrh	r2, [r2, #10]
 8032614:	fbb3 f3f2 	udiv	r3, r3, r2
 8032618:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 803261a:	693b      	ldr	r3, [r7, #16]
 803261c:	1d1a      	adds	r2, r3, #4
 803261e:	613a      	str	r2, [r7, #16]
 8032620:	681b      	ldr	r3, [r3, #0]
 8032622:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8032624:	68bb      	ldr	r3, [r7, #8]
 8032626:	2b00      	cmp	r3, #0
 8032628:	d101      	bne.n	803262e <clmt_clust+0x42>
 803262a:	2300      	movs	r3, #0
 803262c:	e010      	b.n	8032650 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 803262e:	697a      	ldr	r2, [r7, #20]
 8032630:	68bb      	ldr	r3, [r7, #8]
 8032632:	429a      	cmp	r2, r3
 8032634:	d307      	bcc.n	8032646 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8032636:	697a      	ldr	r2, [r7, #20]
 8032638:	68bb      	ldr	r3, [r7, #8]
 803263a:	1ad3      	subs	r3, r2, r3
 803263c:	617b      	str	r3, [r7, #20]
 803263e:	693b      	ldr	r3, [r7, #16]
 8032640:	3304      	adds	r3, #4
 8032642:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8032644:	e7e9      	b.n	803261a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8032646:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8032648:	693b      	ldr	r3, [r7, #16]
 803264a:	681a      	ldr	r2, [r3, #0]
 803264c:	697b      	ldr	r3, [r7, #20]
 803264e:	4413      	add	r3, r2
}
 8032650:	4618      	mov	r0, r3
 8032652:	371c      	adds	r7, #28
 8032654:	46bd      	mov	sp, r7
 8032656:	f85d 7b04 	ldr.w	r7, [sp], #4
 803265a:	4770      	bx	lr

0803265c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 803265c:	b580      	push	{r7, lr}
 803265e:	b086      	sub	sp, #24
 8032660:	af00      	add	r7, sp, #0
 8032662:	6078      	str	r0, [r7, #4]
 8032664:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8032666:	687b      	ldr	r3, [r7, #4]
 8032668:	681b      	ldr	r3, [r3, #0]
 803266a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 803266c:	683b      	ldr	r3, [r7, #0]
 803266e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8032672:	d204      	bcs.n	803267e <dir_sdi+0x22>
 8032674:	683b      	ldr	r3, [r7, #0]
 8032676:	f003 031f 	and.w	r3, r3, #31
 803267a:	2b00      	cmp	r3, #0
 803267c:	d001      	beq.n	8032682 <dir_sdi+0x26>
		return FR_INT_ERR;
 803267e:	2302      	movs	r3, #2
 8032680:	e071      	b.n	8032766 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8032682:	687b      	ldr	r3, [r7, #4]
 8032684:	683a      	ldr	r2, [r7, #0]
 8032686:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8032688:	687b      	ldr	r3, [r7, #4]
 803268a:	689b      	ldr	r3, [r3, #8]
 803268c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 803268e:	697b      	ldr	r3, [r7, #20]
 8032690:	2b00      	cmp	r3, #0
 8032692:	d106      	bne.n	80326a2 <dir_sdi+0x46>
 8032694:	693b      	ldr	r3, [r7, #16]
 8032696:	781b      	ldrb	r3, [r3, #0]
 8032698:	2b02      	cmp	r3, #2
 803269a:	d902      	bls.n	80326a2 <dir_sdi+0x46>
		clst = fs->dirbase;
 803269c:	693b      	ldr	r3, [r7, #16]
 803269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80326a0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80326a2:	697b      	ldr	r3, [r7, #20]
 80326a4:	2b00      	cmp	r3, #0
 80326a6:	d10c      	bne.n	80326c2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80326a8:	683b      	ldr	r3, [r7, #0]
 80326aa:	095b      	lsrs	r3, r3, #5
 80326ac:	693a      	ldr	r2, [r7, #16]
 80326ae:	8912      	ldrh	r2, [r2, #8]
 80326b0:	4293      	cmp	r3, r2
 80326b2:	d301      	bcc.n	80326b8 <dir_sdi+0x5c>
 80326b4:	2302      	movs	r3, #2
 80326b6:	e056      	b.n	8032766 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80326b8:	693b      	ldr	r3, [r7, #16]
 80326ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80326bc:	687b      	ldr	r3, [r7, #4]
 80326be:	61da      	str	r2, [r3, #28]
 80326c0:	e02d      	b.n	803271e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80326c2:	693b      	ldr	r3, [r7, #16]
 80326c4:	895b      	ldrh	r3, [r3, #10]
 80326c6:	461a      	mov	r2, r3
 80326c8:	693b      	ldr	r3, [r7, #16]
 80326ca:	899b      	ldrh	r3, [r3, #12]
 80326cc:	fb02 f303 	mul.w	r3, r2, r3
 80326d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80326d2:	e019      	b.n	8032708 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80326d4:	687b      	ldr	r3, [r7, #4]
 80326d6:	6979      	ldr	r1, [r7, #20]
 80326d8:	4618      	mov	r0, r3
 80326da:	f7ff fc9c 	bl	8032016 <get_fat>
 80326de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80326e0:	697b      	ldr	r3, [r7, #20]
 80326e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80326e6:	d101      	bne.n	80326ec <dir_sdi+0x90>
 80326e8:	2301      	movs	r3, #1
 80326ea:	e03c      	b.n	8032766 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80326ec:	697b      	ldr	r3, [r7, #20]
 80326ee:	2b01      	cmp	r3, #1
 80326f0:	d904      	bls.n	80326fc <dir_sdi+0xa0>
 80326f2:	693b      	ldr	r3, [r7, #16]
 80326f4:	69db      	ldr	r3, [r3, #28]
 80326f6:	697a      	ldr	r2, [r7, #20]
 80326f8:	429a      	cmp	r2, r3
 80326fa:	d301      	bcc.n	8032700 <dir_sdi+0xa4>
 80326fc:	2302      	movs	r3, #2
 80326fe:	e032      	b.n	8032766 <dir_sdi+0x10a>
			ofs -= csz;
 8032700:	683a      	ldr	r2, [r7, #0]
 8032702:	68fb      	ldr	r3, [r7, #12]
 8032704:	1ad3      	subs	r3, r2, r3
 8032706:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8032708:	683a      	ldr	r2, [r7, #0]
 803270a:	68fb      	ldr	r3, [r7, #12]
 803270c:	429a      	cmp	r2, r3
 803270e:	d2e1      	bcs.n	80326d4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8032710:	6979      	ldr	r1, [r7, #20]
 8032712:	6938      	ldr	r0, [r7, #16]
 8032714:	f7ff fc60 	bl	8031fd8 <clust2sect>
 8032718:	4602      	mov	r2, r0
 803271a:	687b      	ldr	r3, [r7, #4]
 803271c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 803271e:	687b      	ldr	r3, [r7, #4]
 8032720:	697a      	ldr	r2, [r7, #20]
 8032722:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8032724:	687b      	ldr	r3, [r7, #4]
 8032726:	69db      	ldr	r3, [r3, #28]
 8032728:	2b00      	cmp	r3, #0
 803272a:	d101      	bne.n	8032730 <dir_sdi+0xd4>
 803272c:	2302      	movs	r3, #2
 803272e:	e01a      	b.n	8032766 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8032730:	687b      	ldr	r3, [r7, #4]
 8032732:	69da      	ldr	r2, [r3, #28]
 8032734:	693b      	ldr	r3, [r7, #16]
 8032736:	899b      	ldrh	r3, [r3, #12]
 8032738:	4619      	mov	r1, r3
 803273a:	683b      	ldr	r3, [r7, #0]
 803273c:	fbb3 f3f1 	udiv	r3, r3, r1
 8032740:	441a      	add	r2, r3
 8032742:	687b      	ldr	r3, [r7, #4]
 8032744:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8032746:	693b      	ldr	r3, [r7, #16]
 8032748:	f103 0138 	add.w	r1, r3, #56	; 0x38
 803274c:	693b      	ldr	r3, [r7, #16]
 803274e:	899b      	ldrh	r3, [r3, #12]
 8032750:	461a      	mov	r2, r3
 8032752:	683b      	ldr	r3, [r7, #0]
 8032754:	fbb3 f0f2 	udiv	r0, r3, r2
 8032758:	fb00 f202 	mul.w	r2, r0, r2
 803275c:	1a9b      	subs	r3, r3, r2
 803275e:	18ca      	adds	r2, r1, r3
 8032760:	687b      	ldr	r3, [r7, #4]
 8032762:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8032764:	2300      	movs	r3, #0
}
 8032766:	4618      	mov	r0, r3
 8032768:	3718      	adds	r7, #24
 803276a:	46bd      	mov	sp, r7
 803276c:	bd80      	pop	{r7, pc}

0803276e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 803276e:	b580      	push	{r7, lr}
 8032770:	b086      	sub	sp, #24
 8032772:	af00      	add	r7, sp, #0
 8032774:	6078      	str	r0, [r7, #4]
 8032776:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8032778:	687b      	ldr	r3, [r7, #4]
 803277a:	681b      	ldr	r3, [r3, #0]
 803277c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 803277e:	687b      	ldr	r3, [r7, #4]
 8032780:	695b      	ldr	r3, [r3, #20]
 8032782:	3320      	adds	r3, #32
 8032784:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8032786:	687b      	ldr	r3, [r7, #4]
 8032788:	69db      	ldr	r3, [r3, #28]
 803278a:	2b00      	cmp	r3, #0
 803278c:	d003      	beq.n	8032796 <dir_next+0x28>
 803278e:	68bb      	ldr	r3, [r7, #8]
 8032790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8032794:	d301      	bcc.n	803279a <dir_next+0x2c>
 8032796:	2304      	movs	r3, #4
 8032798:	e0bb      	b.n	8032912 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 803279a:	68fb      	ldr	r3, [r7, #12]
 803279c:	899b      	ldrh	r3, [r3, #12]
 803279e:	461a      	mov	r2, r3
 80327a0:	68bb      	ldr	r3, [r7, #8]
 80327a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80327a6:	fb01 f202 	mul.w	r2, r1, r2
 80327aa:	1a9b      	subs	r3, r3, r2
 80327ac:	2b00      	cmp	r3, #0
 80327ae:	f040 809d 	bne.w	80328ec <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80327b2:	687b      	ldr	r3, [r7, #4]
 80327b4:	69db      	ldr	r3, [r3, #28]
 80327b6:	1c5a      	adds	r2, r3, #1
 80327b8:	687b      	ldr	r3, [r7, #4]
 80327ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80327bc:	687b      	ldr	r3, [r7, #4]
 80327be:	699b      	ldr	r3, [r3, #24]
 80327c0:	2b00      	cmp	r3, #0
 80327c2:	d10b      	bne.n	80327dc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80327c4:	68bb      	ldr	r3, [r7, #8]
 80327c6:	095b      	lsrs	r3, r3, #5
 80327c8:	68fa      	ldr	r2, [r7, #12]
 80327ca:	8912      	ldrh	r2, [r2, #8]
 80327cc:	4293      	cmp	r3, r2
 80327ce:	f0c0 808d 	bcc.w	80328ec <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80327d2:	687b      	ldr	r3, [r7, #4]
 80327d4:	2200      	movs	r2, #0
 80327d6:	61da      	str	r2, [r3, #28]
 80327d8:	2304      	movs	r3, #4
 80327da:	e09a      	b.n	8032912 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80327dc:	68fb      	ldr	r3, [r7, #12]
 80327de:	899b      	ldrh	r3, [r3, #12]
 80327e0:	461a      	mov	r2, r3
 80327e2:	68bb      	ldr	r3, [r7, #8]
 80327e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80327e8:	68fa      	ldr	r2, [r7, #12]
 80327ea:	8952      	ldrh	r2, [r2, #10]
 80327ec:	3a01      	subs	r2, #1
 80327ee:	4013      	ands	r3, r2
 80327f0:	2b00      	cmp	r3, #0
 80327f2:	d17b      	bne.n	80328ec <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80327f4:	687a      	ldr	r2, [r7, #4]
 80327f6:	687b      	ldr	r3, [r7, #4]
 80327f8:	699b      	ldr	r3, [r3, #24]
 80327fa:	4619      	mov	r1, r3
 80327fc:	4610      	mov	r0, r2
 80327fe:	f7ff fc0a 	bl	8032016 <get_fat>
 8032802:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8032804:	697b      	ldr	r3, [r7, #20]
 8032806:	2b01      	cmp	r3, #1
 8032808:	d801      	bhi.n	803280e <dir_next+0xa0>
 803280a:	2302      	movs	r3, #2
 803280c:	e081      	b.n	8032912 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 803280e:	697b      	ldr	r3, [r7, #20]
 8032810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8032814:	d101      	bne.n	803281a <dir_next+0xac>
 8032816:	2301      	movs	r3, #1
 8032818:	e07b      	b.n	8032912 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 803281a:	68fb      	ldr	r3, [r7, #12]
 803281c:	69db      	ldr	r3, [r3, #28]
 803281e:	697a      	ldr	r2, [r7, #20]
 8032820:	429a      	cmp	r2, r3
 8032822:	d359      	bcc.n	80328d8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8032824:	683b      	ldr	r3, [r7, #0]
 8032826:	2b00      	cmp	r3, #0
 8032828:	d104      	bne.n	8032834 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 803282a:	687b      	ldr	r3, [r7, #4]
 803282c:	2200      	movs	r2, #0
 803282e:	61da      	str	r2, [r3, #28]
 8032830:	2304      	movs	r3, #4
 8032832:	e06e      	b.n	8032912 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8032834:	687a      	ldr	r2, [r7, #4]
 8032836:	687b      	ldr	r3, [r7, #4]
 8032838:	699b      	ldr	r3, [r3, #24]
 803283a:	4619      	mov	r1, r3
 803283c:	4610      	mov	r0, r2
 803283e:	f7ff fe3d 	bl	80324bc <create_chain>
 8032842:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8032844:	697b      	ldr	r3, [r7, #20]
 8032846:	2b00      	cmp	r3, #0
 8032848:	d101      	bne.n	803284e <dir_next+0xe0>
 803284a:	2307      	movs	r3, #7
 803284c:	e061      	b.n	8032912 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 803284e:	697b      	ldr	r3, [r7, #20]
 8032850:	2b01      	cmp	r3, #1
 8032852:	d101      	bne.n	8032858 <dir_next+0xea>
 8032854:	2302      	movs	r3, #2
 8032856:	e05c      	b.n	8032912 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8032858:	697b      	ldr	r3, [r7, #20]
 803285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 803285e:	d101      	bne.n	8032864 <dir_next+0xf6>
 8032860:	2301      	movs	r3, #1
 8032862:	e056      	b.n	8032912 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8032864:	68f8      	ldr	r0, [r7, #12]
 8032866:	f7ff fad5 	bl	8031e14 <sync_window>
 803286a:	4603      	mov	r3, r0
 803286c:	2b00      	cmp	r3, #0
 803286e:	d001      	beq.n	8032874 <dir_next+0x106>
 8032870:	2301      	movs	r3, #1
 8032872:	e04e      	b.n	8032912 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8032874:	68fb      	ldr	r3, [r7, #12]
 8032876:	f103 0038 	add.w	r0, r3, #56	; 0x38
 803287a:	68fb      	ldr	r3, [r7, #12]
 803287c:	899b      	ldrh	r3, [r3, #12]
 803287e:	461a      	mov	r2, r3
 8032880:	2100      	movs	r1, #0
 8032882:	f7ff f8fe 	bl	8031a82 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8032886:	2300      	movs	r3, #0
 8032888:	613b      	str	r3, [r7, #16]
 803288a:	6979      	ldr	r1, [r7, #20]
 803288c:	68f8      	ldr	r0, [r7, #12]
 803288e:	f7ff fba3 	bl	8031fd8 <clust2sect>
 8032892:	4602      	mov	r2, r0
 8032894:	68fb      	ldr	r3, [r7, #12]
 8032896:	635a      	str	r2, [r3, #52]	; 0x34
 8032898:	e012      	b.n	80328c0 <dir_next+0x152>
						fs->wflag = 1;
 803289a:	68fb      	ldr	r3, [r7, #12]
 803289c:	2201      	movs	r2, #1
 803289e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80328a0:	68f8      	ldr	r0, [r7, #12]
 80328a2:	f7ff fab7 	bl	8031e14 <sync_window>
 80328a6:	4603      	mov	r3, r0
 80328a8:	2b00      	cmp	r3, #0
 80328aa:	d001      	beq.n	80328b0 <dir_next+0x142>
 80328ac:	2301      	movs	r3, #1
 80328ae:	e030      	b.n	8032912 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80328b0:	693b      	ldr	r3, [r7, #16]
 80328b2:	3301      	adds	r3, #1
 80328b4:	613b      	str	r3, [r7, #16]
 80328b6:	68fb      	ldr	r3, [r7, #12]
 80328b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80328ba:	1c5a      	adds	r2, r3, #1
 80328bc:	68fb      	ldr	r3, [r7, #12]
 80328be:	635a      	str	r2, [r3, #52]	; 0x34
 80328c0:	68fb      	ldr	r3, [r7, #12]
 80328c2:	895b      	ldrh	r3, [r3, #10]
 80328c4:	461a      	mov	r2, r3
 80328c6:	693b      	ldr	r3, [r7, #16]
 80328c8:	4293      	cmp	r3, r2
 80328ca:	d3e6      	bcc.n	803289a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80328cc:	68fb      	ldr	r3, [r7, #12]
 80328ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80328d0:	693b      	ldr	r3, [r7, #16]
 80328d2:	1ad2      	subs	r2, r2, r3
 80328d4:	68fb      	ldr	r3, [r7, #12]
 80328d6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80328d8:	687b      	ldr	r3, [r7, #4]
 80328da:	697a      	ldr	r2, [r7, #20]
 80328dc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80328de:	6979      	ldr	r1, [r7, #20]
 80328e0:	68f8      	ldr	r0, [r7, #12]
 80328e2:	f7ff fb79 	bl	8031fd8 <clust2sect>
 80328e6:	4602      	mov	r2, r0
 80328e8:	687b      	ldr	r3, [r7, #4]
 80328ea:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80328ec:	687b      	ldr	r3, [r7, #4]
 80328ee:	68ba      	ldr	r2, [r7, #8]
 80328f0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80328f2:	68fb      	ldr	r3, [r7, #12]
 80328f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80328f8:	68fb      	ldr	r3, [r7, #12]
 80328fa:	899b      	ldrh	r3, [r3, #12]
 80328fc:	461a      	mov	r2, r3
 80328fe:	68bb      	ldr	r3, [r7, #8]
 8032900:	fbb3 f0f2 	udiv	r0, r3, r2
 8032904:	fb00 f202 	mul.w	r2, r0, r2
 8032908:	1a9b      	subs	r3, r3, r2
 803290a:	18ca      	adds	r2, r1, r3
 803290c:	687b      	ldr	r3, [r7, #4]
 803290e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8032910:	2300      	movs	r3, #0
}
 8032912:	4618      	mov	r0, r3
 8032914:	3718      	adds	r7, #24
 8032916:	46bd      	mov	sp, r7
 8032918:	bd80      	pop	{r7, pc}

0803291a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 803291a:	b580      	push	{r7, lr}
 803291c:	b086      	sub	sp, #24
 803291e:	af00      	add	r7, sp, #0
 8032920:	6078      	str	r0, [r7, #4]
 8032922:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8032924:	687b      	ldr	r3, [r7, #4]
 8032926:	681b      	ldr	r3, [r3, #0]
 8032928:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 803292a:	2100      	movs	r1, #0
 803292c:	6878      	ldr	r0, [r7, #4]
 803292e:	f7ff fe95 	bl	803265c <dir_sdi>
 8032932:	4603      	mov	r3, r0
 8032934:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8032936:	7dfb      	ldrb	r3, [r7, #23]
 8032938:	2b00      	cmp	r3, #0
 803293a:	d12b      	bne.n	8032994 <dir_alloc+0x7a>
		n = 0;
 803293c:	2300      	movs	r3, #0
 803293e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8032940:	687b      	ldr	r3, [r7, #4]
 8032942:	69db      	ldr	r3, [r3, #28]
 8032944:	4619      	mov	r1, r3
 8032946:	68f8      	ldr	r0, [r7, #12]
 8032948:	f7ff faa8 	bl	8031e9c <move_window>
 803294c:	4603      	mov	r3, r0
 803294e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8032950:	7dfb      	ldrb	r3, [r7, #23]
 8032952:	2b00      	cmp	r3, #0
 8032954:	d11d      	bne.n	8032992 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8032956:	687b      	ldr	r3, [r7, #4]
 8032958:	6a1b      	ldr	r3, [r3, #32]
 803295a:	781b      	ldrb	r3, [r3, #0]
 803295c:	2be5      	cmp	r3, #229	; 0xe5
 803295e:	d004      	beq.n	803296a <dir_alloc+0x50>
 8032960:	687b      	ldr	r3, [r7, #4]
 8032962:	6a1b      	ldr	r3, [r3, #32]
 8032964:	781b      	ldrb	r3, [r3, #0]
 8032966:	2b00      	cmp	r3, #0
 8032968:	d107      	bne.n	803297a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 803296a:	693b      	ldr	r3, [r7, #16]
 803296c:	3301      	adds	r3, #1
 803296e:	613b      	str	r3, [r7, #16]
 8032970:	693a      	ldr	r2, [r7, #16]
 8032972:	683b      	ldr	r3, [r7, #0]
 8032974:	429a      	cmp	r2, r3
 8032976:	d102      	bne.n	803297e <dir_alloc+0x64>
 8032978:	e00c      	b.n	8032994 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 803297a:	2300      	movs	r3, #0
 803297c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 803297e:	2101      	movs	r1, #1
 8032980:	6878      	ldr	r0, [r7, #4]
 8032982:	f7ff fef4 	bl	803276e <dir_next>
 8032986:	4603      	mov	r3, r0
 8032988:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 803298a:	7dfb      	ldrb	r3, [r7, #23]
 803298c:	2b00      	cmp	r3, #0
 803298e:	d0d7      	beq.n	8032940 <dir_alloc+0x26>
 8032990:	e000      	b.n	8032994 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8032992:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8032994:	7dfb      	ldrb	r3, [r7, #23]
 8032996:	2b04      	cmp	r3, #4
 8032998:	d101      	bne.n	803299e <dir_alloc+0x84>
 803299a:	2307      	movs	r3, #7
 803299c:	75fb      	strb	r3, [r7, #23]
	return res;
 803299e:	7dfb      	ldrb	r3, [r7, #23]
}
 80329a0:	4618      	mov	r0, r3
 80329a2:	3718      	adds	r7, #24
 80329a4:	46bd      	mov	sp, r7
 80329a6:	bd80      	pop	{r7, pc}

080329a8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80329a8:	b580      	push	{r7, lr}
 80329aa:	b084      	sub	sp, #16
 80329ac:	af00      	add	r7, sp, #0
 80329ae:	6078      	str	r0, [r7, #4]
 80329b0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80329b2:	683b      	ldr	r3, [r7, #0]
 80329b4:	331a      	adds	r3, #26
 80329b6:	4618      	mov	r0, r3
 80329b8:	f7fe ffc0 	bl	803193c <ld_word>
 80329bc:	4603      	mov	r3, r0
 80329be:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80329c0:	687b      	ldr	r3, [r7, #4]
 80329c2:	781b      	ldrb	r3, [r3, #0]
 80329c4:	2b03      	cmp	r3, #3
 80329c6:	d109      	bne.n	80329dc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80329c8:	683b      	ldr	r3, [r7, #0]
 80329ca:	3314      	adds	r3, #20
 80329cc:	4618      	mov	r0, r3
 80329ce:	f7fe ffb5 	bl	803193c <ld_word>
 80329d2:	4603      	mov	r3, r0
 80329d4:	041b      	lsls	r3, r3, #16
 80329d6:	68fa      	ldr	r2, [r7, #12]
 80329d8:	4313      	orrs	r3, r2
 80329da:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80329dc:	68fb      	ldr	r3, [r7, #12]
}
 80329de:	4618      	mov	r0, r3
 80329e0:	3710      	adds	r7, #16
 80329e2:	46bd      	mov	sp, r7
 80329e4:	bd80      	pop	{r7, pc}

080329e6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80329e6:	b580      	push	{r7, lr}
 80329e8:	b084      	sub	sp, #16
 80329ea:	af00      	add	r7, sp, #0
 80329ec:	60f8      	str	r0, [r7, #12]
 80329ee:	60b9      	str	r1, [r7, #8]
 80329f0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80329f2:	68bb      	ldr	r3, [r7, #8]
 80329f4:	331a      	adds	r3, #26
 80329f6:	687a      	ldr	r2, [r7, #4]
 80329f8:	b292      	uxth	r2, r2
 80329fa:	4611      	mov	r1, r2
 80329fc:	4618      	mov	r0, r3
 80329fe:	f7fe ffd8 	bl	80319b2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8032a02:	68fb      	ldr	r3, [r7, #12]
 8032a04:	781b      	ldrb	r3, [r3, #0]
 8032a06:	2b03      	cmp	r3, #3
 8032a08:	d109      	bne.n	8032a1e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8032a0a:	68bb      	ldr	r3, [r7, #8]
 8032a0c:	f103 0214 	add.w	r2, r3, #20
 8032a10:	687b      	ldr	r3, [r7, #4]
 8032a12:	0c1b      	lsrs	r3, r3, #16
 8032a14:	b29b      	uxth	r3, r3
 8032a16:	4619      	mov	r1, r3
 8032a18:	4610      	mov	r0, r2
 8032a1a:	f7fe ffca 	bl	80319b2 <st_word>
	}
}
 8032a1e:	bf00      	nop
 8032a20:	3710      	adds	r7, #16
 8032a22:	46bd      	mov	sp, r7
 8032a24:	bd80      	pop	{r7, pc}
	...

08032a28 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8032a28:	b590      	push	{r4, r7, lr}
 8032a2a:	b087      	sub	sp, #28
 8032a2c:	af00      	add	r7, sp, #0
 8032a2e:	6078      	str	r0, [r7, #4]
 8032a30:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8032a32:	683b      	ldr	r3, [r7, #0]
 8032a34:	331a      	adds	r3, #26
 8032a36:	4618      	mov	r0, r3
 8032a38:	f7fe ff80 	bl	803193c <ld_word>
 8032a3c:	4603      	mov	r3, r0
 8032a3e:	2b00      	cmp	r3, #0
 8032a40:	d001      	beq.n	8032a46 <cmp_lfn+0x1e>
 8032a42:	2300      	movs	r3, #0
 8032a44:	e059      	b.n	8032afa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8032a46:	683b      	ldr	r3, [r7, #0]
 8032a48:	781b      	ldrb	r3, [r3, #0]
 8032a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032a4e:	1e5a      	subs	r2, r3, #1
 8032a50:	4613      	mov	r3, r2
 8032a52:	005b      	lsls	r3, r3, #1
 8032a54:	4413      	add	r3, r2
 8032a56:	009b      	lsls	r3, r3, #2
 8032a58:	4413      	add	r3, r2
 8032a5a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8032a5c:	2301      	movs	r3, #1
 8032a5e:	81fb      	strh	r3, [r7, #14]
 8032a60:	2300      	movs	r3, #0
 8032a62:	613b      	str	r3, [r7, #16]
 8032a64:	e033      	b.n	8032ace <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8032a66:	4a27      	ldr	r2, [pc, #156]	; (8032b04 <cmp_lfn+0xdc>)
 8032a68:	693b      	ldr	r3, [r7, #16]
 8032a6a:	4413      	add	r3, r2
 8032a6c:	781b      	ldrb	r3, [r3, #0]
 8032a6e:	461a      	mov	r2, r3
 8032a70:	683b      	ldr	r3, [r7, #0]
 8032a72:	4413      	add	r3, r2
 8032a74:	4618      	mov	r0, r3
 8032a76:	f7fe ff61 	bl	803193c <ld_word>
 8032a7a:	4603      	mov	r3, r0
 8032a7c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8032a7e:	89fb      	ldrh	r3, [r7, #14]
 8032a80:	2b00      	cmp	r3, #0
 8032a82:	d01a      	beq.n	8032aba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8032a84:	697b      	ldr	r3, [r7, #20]
 8032a86:	2bfe      	cmp	r3, #254	; 0xfe
 8032a88:	d812      	bhi.n	8032ab0 <cmp_lfn+0x88>
 8032a8a:	89bb      	ldrh	r3, [r7, #12]
 8032a8c:	4618      	mov	r0, r3
 8032a8e:	f001 ff89 	bl	80349a4 <ff_wtoupper>
 8032a92:	4603      	mov	r3, r0
 8032a94:	461c      	mov	r4, r3
 8032a96:	697b      	ldr	r3, [r7, #20]
 8032a98:	1c5a      	adds	r2, r3, #1
 8032a9a:	617a      	str	r2, [r7, #20]
 8032a9c:	005b      	lsls	r3, r3, #1
 8032a9e:	687a      	ldr	r2, [r7, #4]
 8032aa0:	4413      	add	r3, r2
 8032aa2:	881b      	ldrh	r3, [r3, #0]
 8032aa4:	4618      	mov	r0, r3
 8032aa6:	f001 ff7d 	bl	80349a4 <ff_wtoupper>
 8032aaa:	4603      	mov	r3, r0
 8032aac:	429c      	cmp	r4, r3
 8032aae:	d001      	beq.n	8032ab4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8032ab0:	2300      	movs	r3, #0
 8032ab2:	e022      	b.n	8032afa <cmp_lfn+0xd2>
			}
			wc = uc;
 8032ab4:	89bb      	ldrh	r3, [r7, #12]
 8032ab6:	81fb      	strh	r3, [r7, #14]
 8032ab8:	e006      	b.n	8032ac8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8032aba:	89bb      	ldrh	r3, [r7, #12]
 8032abc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8032ac0:	4293      	cmp	r3, r2
 8032ac2:	d001      	beq.n	8032ac8 <cmp_lfn+0xa0>
 8032ac4:	2300      	movs	r3, #0
 8032ac6:	e018      	b.n	8032afa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8032ac8:	693b      	ldr	r3, [r7, #16]
 8032aca:	3301      	adds	r3, #1
 8032acc:	613b      	str	r3, [r7, #16]
 8032ace:	693b      	ldr	r3, [r7, #16]
 8032ad0:	2b0c      	cmp	r3, #12
 8032ad2:	d9c8      	bls.n	8032a66 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8032ad4:	683b      	ldr	r3, [r7, #0]
 8032ad6:	781b      	ldrb	r3, [r3, #0]
 8032ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032adc:	2b00      	cmp	r3, #0
 8032ade:	d00b      	beq.n	8032af8 <cmp_lfn+0xd0>
 8032ae0:	89fb      	ldrh	r3, [r7, #14]
 8032ae2:	2b00      	cmp	r3, #0
 8032ae4:	d008      	beq.n	8032af8 <cmp_lfn+0xd0>
 8032ae6:	697b      	ldr	r3, [r7, #20]
 8032ae8:	005b      	lsls	r3, r3, #1
 8032aea:	687a      	ldr	r2, [r7, #4]
 8032aec:	4413      	add	r3, r2
 8032aee:	881b      	ldrh	r3, [r3, #0]
 8032af0:	2b00      	cmp	r3, #0
 8032af2:	d001      	beq.n	8032af8 <cmp_lfn+0xd0>
 8032af4:	2300      	movs	r3, #0
 8032af6:	e000      	b.n	8032afa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8032af8:	2301      	movs	r3, #1
}
 8032afa:	4618      	mov	r0, r3
 8032afc:	371c      	adds	r7, #28
 8032afe:	46bd      	mov	sp, r7
 8032b00:	bd90      	pop	{r4, r7, pc}
 8032b02:	bf00      	nop
 8032b04:	08049c9c 	.word	0x08049c9c

08032b08 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8032b08:	b580      	push	{r7, lr}
 8032b0a:	b088      	sub	sp, #32
 8032b0c:	af00      	add	r7, sp, #0
 8032b0e:	60f8      	str	r0, [r7, #12]
 8032b10:	60b9      	str	r1, [r7, #8]
 8032b12:	4611      	mov	r1, r2
 8032b14:	461a      	mov	r2, r3
 8032b16:	460b      	mov	r3, r1
 8032b18:	71fb      	strb	r3, [r7, #7]
 8032b1a:	4613      	mov	r3, r2
 8032b1c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8032b1e:	68bb      	ldr	r3, [r7, #8]
 8032b20:	330d      	adds	r3, #13
 8032b22:	79ba      	ldrb	r2, [r7, #6]
 8032b24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8032b26:	68bb      	ldr	r3, [r7, #8]
 8032b28:	330b      	adds	r3, #11
 8032b2a:	220f      	movs	r2, #15
 8032b2c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8032b2e:	68bb      	ldr	r3, [r7, #8]
 8032b30:	330c      	adds	r3, #12
 8032b32:	2200      	movs	r2, #0
 8032b34:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8032b36:	68bb      	ldr	r3, [r7, #8]
 8032b38:	331a      	adds	r3, #26
 8032b3a:	2100      	movs	r1, #0
 8032b3c:	4618      	mov	r0, r3
 8032b3e:	f7fe ff38 	bl	80319b2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8032b42:	79fb      	ldrb	r3, [r7, #7]
 8032b44:	1e5a      	subs	r2, r3, #1
 8032b46:	4613      	mov	r3, r2
 8032b48:	005b      	lsls	r3, r3, #1
 8032b4a:	4413      	add	r3, r2
 8032b4c:	009b      	lsls	r3, r3, #2
 8032b4e:	4413      	add	r3, r2
 8032b50:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8032b52:	2300      	movs	r3, #0
 8032b54:	82fb      	strh	r3, [r7, #22]
 8032b56:	2300      	movs	r3, #0
 8032b58:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8032b5a:	8afb      	ldrh	r3, [r7, #22]
 8032b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8032b60:	4293      	cmp	r3, r2
 8032b62:	d007      	beq.n	8032b74 <put_lfn+0x6c>
 8032b64:	69fb      	ldr	r3, [r7, #28]
 8032b66:	1c5a      	adds	r2, r3, #1
 8032b68:	61fa      	str	r2, [r7, #28]
 8032b6a:	005b      	lsls	r3, r3, #1
 8032b6c:	68fa      	ldr	r2, [r7, #12]
 8032b6e:	4413      	add	r3, r2
 8032b70:	881b      	ldrh	r3, [r3, #0]
 8032b72:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8032b74:	4a17      	ldr	r2, [pc, #92]	; (8032bd4 <put_lfn+0xcc>)
 8032b76:	69bb      	ldr	r3, [r7, #24]
 8032b78:	4413      	add	r3, r2
 8032b7a:	781b      	ldrb	r3, [r3, #0]
 8032b7c:	461a      	mov	r2, r3
 8032b7e:	68bb      	ldr	r3, [r7, #8]
 8032b80:	4413      	add	r3, r2
 8032b82:	8afa      	ldrh	r2, [r7, #22]
 8032b84:	4611      	mov	r1, r2
 8032b86:	4618      	mov	r0, r3
 8032b88:	f7fe ff13 	bl	80319b2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8032b8c:	8afb      	ldrh	r3, [r7, #22]
 8032b8e:	2b00      	cmp	r3, #0
 8032b90:	d102      	bne.n	8032b98 <put_lfn+0x90>
 8032b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8032b96:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8032b98:	69bb      	ldr	r3, [r7, #24]
 8032b9a:	3301      	adds	r3, #1
 8032b9c:	61bb      	str	r3, [r7, #24]
 8032b9e:	69bb      	ldr	r3, [r7, #24]
 8032ba0:	2b0c      	cmp	r3, #12
 8032ba2:	d9da      	bls.n	8032b5a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8032ba4:	8afb      	ldrh	r3, [r7, #22]
 8032ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8032baa:	4293      	cmp	r3, r2
 8032bac:	d006      	beq.n	8032bbc <put_lfn+0xb4>
 8032bae:	69fb      	ldr	r3, [r7, #28]
 8032bb0:	005b      	lsls	r3, r3, #1
 8032bb2:	68fa      	ldr	r2, [r7, #12]
 8032bb4:	4413      	add	r3, r2
 8032bb6:	881b      	ldrh	r3, [r3, #0]
 8032bb8:	2b00      	cmp	r3, #0
 8032bba:	d103      	bne.n	8032bc4 <put_lfn+0xbc>
 8032bbc:	79fb      	ldrb	r3, [r7, #7]
 8032bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8032bc2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8032bc4:	68bb      	ldr	r3, [r7, #8]
 8032bc6:	79fa      	ldrb	r2, [r7, #7]
 8032bc8:	701a      	strb	r2, [r3, #0]
}
 8032bca:	bf00      	nop
 8032bcc:	3720      	adds	r7, #32
 8032bce:	46bd      	mov	sp, r7
 8032bd0:	bd80      	pop	{r7, pc}
 8032bd2:	bf00      	nop
 8032bd4:	08049c9c 	.word	0x08049c9c

08032bd8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8032bd8:	b580      	push	{r7, lr}
 8032bda:	b08c      	sub	sp, #48	; 0x30
 8032bdc:	af00      	add	r7, sp, #0
 8032bde:	60f8      	str	r0, [r7, #12]
 8032be0:	60b9      	str	r1, [r7, #8]
 8032be2:	607a      	str	r2, [r7, #4]
 8032be4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8032be6:	220b      	movs	r2, #11
 8032be8:	68b9      	ldr	r1, [r7, #8]
 8032bea:	68f8      	ldr	r0, [r7, #12]
 8032bec:	f7fe ff28 	bl	8031a40 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8032bf0:	683b      	ldr	r3, [r7, #0]
 8032bf2:	2b05      	cmp	r3, #5
 8032bf4:	d92b      	bls.n	8032c4e <gen_numname+0x76>
		sr = seq;
 8032bf6:	683b      	ldr	r3, [r7, #0]
 8032bf8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8032bfa:	e022      	b.n	8032c42 <gen_numname+0x6a>
			wc = *lfn++;
 8032bfc:	687b      	ldr	r3, [r7, #4]
 8032bfe:	1c9a      	adds	r2, r3, #2
 8032c00:	607a      	str	r2, [r7, #4]
 8032c02:	881b      	ldrh	r3, [r3, #0]
 8032c04:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8032c06:	2300      	movs	r3, #0
 8032c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8032c0a:	e017      	b.n	8032c3c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8032c0c:	69fb      	ldr	r3, [r7, #28]
 8032c0e:	005a      	lsls	r2, r3, #1
 8032c10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8032c12:	f003 0301 	and.w	r3, r3, #1
 8032c16:	4413      	add	r3, r2
 8032c18:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8032c1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8032c1c:	085b      	lsrs	r3, r3, #1
 8032c1e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8032c20:	69fb      	ldr	r3, [r7, #28]
 8032c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8032c26:	2b00      	cmp	r3, #0
 8032c28:	d005      	beq.n	8032c36 <gen_numname+0x5e>
 8032c2a:	69fb      	ldr	r3, [r7, #28]
 8032c2c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8032c30:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8032c34:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8032c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032c38:	3301      	adds	r3, #1
 8032c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8032c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032c3e:	2b0f      	cmp	r3, #15
 8032c40:	d9e4      	bls.n	8032c0c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8032c42:	687b      	ldr	r3, [r7, #4]
 8032c44:	881b      	ldrh	r3, [r3, #0]
 8032c46:	2b00      	cmp	r3, #0
 8032c48:	d1d8      	bne.n	8032bfc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8032c4a:	69fb      	ldr	r3, [r7, #28]
 8032c4c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8032c4e:	2307      	movs	r3, #7
 8032c50:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8032c52:	683b      	ldr	r3, [r7, #0]
 8032c54:	b2db      	uxtb	r3, r3
 8032c56:	f003 030f 	and.w	r3, r3, #15
 8032c5a:	b2db      	uxtb	r3, r3
 8032c5c:	3330      	adds	r3, #48	; 0x30
 8032c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8032c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8032c66:	2b39      	cmp	r3, #57	; 0x39
 8032c68:	d904      	bls.n	8032c74 <gen_numname+0x9c>
 8032c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8032c6e:	3307      	adds	r3, #7
 8032c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8032c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032c76:	1e5a      	subs	r2, r3, #1
 8032c78:	62ba      	str	r2, [r7, #40]	; 0x28
 8032c7a:	3330      	adds	r3, #48	; 0x30
 8032c7c:	443b      	add	r3, r7
 8032c7e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8032c82:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8032c86:	683b      	ldr	r3, [r7, #0]
 8032c88:	091b      	lsrs	r3, r3, #4
 8032c8a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8032c8c:	683b      	ldr	r3, [r7, #0]
 8032c8e:	2b00      	cmp	r3, #0
 8032c90:	d1df      	bne.n	8032c52 <gen_numname+0x7a>
	ns[i] = '~';
 8032c92:	f107 0214 	add.w	r2, r7, #20
 8032c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032c98:	4413      	add	r3, r2
 8032c9a:	227e      	movs	r2, #126	; 0x7e
 8032c9c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8032c9e:	2300      	movs	r3, #0
 8032ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8032ca2:	e002      	b.n	8032caa <gen_numname+0xd2>
 8032ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032ca6:	3301      	adds	r3, #1
 8032ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8032caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8032cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032cae:	429a      	cmp	r2, r3
 8032cb0:	d205      	bcs.n	8032cbe <gen_numname+0xe6>
 8032cb2:	68fa      	ldr	r2, [r7, #12]
 8032cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cb6:	4413      	add	r3, r2
 8032cb8:	781b      	ldrb	r3, [r3, #0]
 8032cba:	2b20      	cmp	r3, #32
 8032cbc:	d1f2      	bne.n	8032ca4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8032cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032cc0:	2b07      	cmp	r3, #7
 8032cc2:	d807      	bhi.n	8032cd4 <gen_numname+0xfc>
 8032cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032cc6:	1c5a      	adds	r2, r3, #1
 8032cc8:	62ba      	str	r2, [r7, #40]	; 0x28
 8032cca:	3330      	adds	r3, #48	; 0x30
 8032ccc:	443b      	add	r3, r7
 8032cce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8032cd2:	e000      	b.n	8032cd6 <gen_numname+0xfe>
 8032cd4:	2120      	movs	r1, #32
 8032cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032cd8:	1c5a      	adds	r2, r3, #1
 8032cda:	627a      	str	r2, [r7, #36]	; 0x24
 8032cdc:	68fa      	ldr	r2, [r7, #12]
 8032cde:	4413      	add	r3, r2
 8032ce0:	460a      	mov	r2, r1
 8032ce2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8032ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032ce6:	2b07      	cmp	r3, #7
 8032ce8:	d9e9      	bls.n	8032cbe <gen_numname+0xe6>
}
 8032cea:	bf00      	nop
 8032cec:	bf00      	nop
 8032cee:	3730      	adds	r7, #48	; 0x30
 8032cf0:	46bd      	mov	sp, r7
 8032cf2:	bd80      	pop	{r7, pc}

08032cf4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8032cf4:	b480      	push	{r7}
 8032cf6:	b085      	sub	sp, #20
 8032cf8:	af00      	add	r7, sp, #0
 8032cfa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8032cfc:	2300      	movs	r3, #0
 8032cfe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8032d00:	230b      	movs	r3, #11
 8032d02:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8032d04:	7bfb      	ldrb	r3, [r7, #15]
 8032d06:	b2da      	uxtb	r2, r3
 8032d08:	0852      	lsrs	r2, r2, #1
 8032d0a:	01db      	lsls	r3, r3, #7
 8032d0c:	4313      	orrs	r3, r2
 8032d0e:	b2da      	uxtb	r2, r3
 8032d10:	687b      	ldr	r3, [r7, #4]
 8032d12:	1c59      	adds	r1, r3, #1
 8032d14:	6079      	str	r1, [r7, #4]
 8032d16:	781b      	ldrb	r3, [r3, #0]
 8032d18:	4413      	add	r3, r2
 8032d1a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8032d1c:	68bb      	ldr	r3, [r7, #8]
 8032d1e:	3b01      	subs	r3, #1
 8032d20:	60bb      	str	r3, [r7, #8]
 8032d22:	68bb      	ldr	r3, [r7, #8]
 8032d24:	2b00      	cmp	r3, #0
 8032d26:	d1ed      	bne.n	8032d04 <sum_sfn+0x10>
	return sum;
 8032d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8032d2a:	4618      	mov	r0, r3
 8032d2c:	3714      	adds	r7, #20
 8032d2e:	46bd      	mov	sp, r7
 8032d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d34:	4770      	bx	lr

08032d36 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8032d36:	b580      	push	{r7, lr}
 8032d38:	b086      	sub	sp, #24
 8032d3a:	af00      	add	r7, sp, #0
 8032d3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8032d3e:	687b      	ldr	r3, [r7, #4]
 8032d40:	681b      	ldr	r3, [r3, #0]
 8032d42:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8032d44:	2100      	movs	r1, #0
 8032d46:	6878      	ldr	r0, [r7, #4]
 8032d48:	f7ff fc88 	bl	803265c <dir_sdi>
 8032d4c:	4603      	mov	r3, r0
 8032d4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8032d50:	7dfb      	ldrb	r3, [r7, #23]
 8032d52:	2b00      	cmp	r3, #0
 8032d54:	d001      	beq.n	8032d5a <dir_find+0x24>
 8032d56:	7dfb      	ldrb	r3, [r7, #23]
 8032d58:	e0a9      	b.n	8032eae <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8032d5a:	23ff      	movs	r3, #255	; 0xff
 8032d5c:	753b      	strb	r3, [r7, #20]
 8032d5e:	7d3b      	ldrb	r3, [r7, #20]
 8032d60:	757b      	strb	r3, [r7, #21]
 8032d62:	687b      	ldr	r3, [r7, #4]
 8032d64:	f04f 32ff 	mov.w	r2, #4294967295
 8032d68:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8032d6a:	687b      	ldr	r3, [r7, #4]
 8032d6c:	69db      	ldr	r3, [r3, #28]
 8032d6e:	4619      	mov	r1, r3
 8032d70:	6938      	ldr	r0, [r7, #16]
 8032d72:	f7ff f893 	bl	8031e9c <move_window>
 8032d76:	4603      	mov	r3, r0
 8032d78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8032d7a:	7dfb      	ldrb	r3, [r7, #23]
 8032d7c:	2b00      	cmp	r3, #0
 8032d7e:	f040 8090 	bne.w	8032ea2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8032d82:	687b      	ldr	r3, [r7, #4]
 8032d84:	6a1b      	ldr	r3, [r3, #32]
 8032d86:	781b      	ldrb	r3, [r3, #0]
 8032d88:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8032d8a:	7dbb      	ldrb	r3, [r7, #22]
 8032d8c:	2b00      	cmp	r3, #0
 8032d8e:	d102      	bne.n	8032d96 <dir_find+0x60>
 8032d90:	2304      	movs	r3, #4
 8032d92:	75fb      	strb	r3, [r7, #23]
 8032d94:	e08a      	b.n	8032eac <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8032d96:	687b      	ldr	r3, [r7, #4]
 8032d98:	6a1b      	ldr	r3, [r3, #32]
 8032d9a:	330b      	adds	r3, #11
 8032d9c:	781b      	ldrb	r3, [r3, #0]
 8032d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8032da2:	73fb      	strb	r3, [r7, #15]
 8032da4:	687b      	ldr	r3, [r7, #4]
 8032da6:	7bfa      	ldrb	r2, [r7, #15]
 8032da8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8032daa:	7dbb      	ldrb	r3, [r7, #22]
 8032dac:	2be5      	cmp	r3, #229	; 0xe5
 8032dae:	d007      	beq.n	8032dc0 <dir_find+0x8a>
 8032db0:	7bfb      	ldrb	r3, [r7, #15]
 8032db2:	f003 0308 	and.w	r3, r3, #8
 8032db6:	2b00      	cmp	r3, #0
 8032db8:	d009      	beq.n	8032dce <dir_find+0x98>
 8032dba:	7bfb      	ldrb	r3, [r7, #15]
 8032dbc:	2b0f      	cmp	r3, #15
 8032dbe:	d006      	beq.n	8032dce <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8032dc0:	23ff      	movs	r3, #255	; 0xff
 8032dc2:	757b      	strb	r3, [r7, #21]
 8032dc4:	687b      	ldr	r3, [r7, #4]
 8032dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8032dca:	631a      	str	r2, [r3, #48]	; 0x30
 8032dcc:	e05e      	b.n	8032e8c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8032dce:	7bfb      	ldrb	r3, [r7, #15]
 8032dd0:	2b0f      	cmp	r3, #15
 8032dd2:	d136      	bne.n	8032e42 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8032dd4:	687b      	ldr	r3, [r7, #4]
 8032dd6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8032dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032dde:	2b00      	cmp	r3, #0
 8032de0:	d154      	bne.n	8032e8c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8032de2:	7dbb      	ldrb	r3, [r7, #22]
 8032de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8032de8:	2b00      	cmp	r3, #0
 8032dea:	d00d      	beq.n	8032e08 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8032dec:	687b      	ldr	r3, [r7, #4]
 8032dee:	6a1b      	ldr	r3, [r3, #32]
 8032df0:	7b5b      	ldrb	r3, [r3, #13]
 8032df2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8032df4:	7dbb      	ldrb	r3, [r7, #22]
 8032df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8032dfa:	75bb      	strb	r3, [r7, #22]
 8032dfc:	7dbb      	ldrb	r3, [r7, #22]
 8032dfe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8032e00:	687b      	ldr	r3, [r7, #4]
 8032e02:	695a      	ldr	r2, [r3, #20]
 8032e04:	687b      	ldr	r3, [r7, #4]
 8032e06:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8032e08:	7dba      	ldrb	r2, [r7, #22]
 8032e0a:	7d7b      	ldrb	r3, [r7, #21]
 8032e0c:	429a      	cmp	r2, r3
 8032e0e:	d115      	bne.n	8032e3c <dir_find+0x106>
 8032e10:	687b      	ldr	r3, [r7, #4]
 8032e12:	6a1b      	ldr	r3, [r3, #32]
 8032e14:	330d      	adds	r3, #13
 8032e16:	781b      	ldrb	r3, [r3, #0]
 8032e18:	7d3a      	ldrb	r2, [r7, #20]
 8032e1a:	429a      	cmp	r2, r3
 8032e1c:	d10e      	bne.n	8032e3c <dir_find+0x106>
 8032e1e:	693b      	ldr	r3, [r7, #16]
 8032e20:	691a      	ldr	r2, [r3, #16]
 8032e22:	687b      	ldr	r3, [r7, #4]
 8032e24:	6a1b      	ldr	r3, [r3, #32]
 8032e26:	4619      	mov	r1, r3
 8032e28:	4610      	mov	r0, r2
 8032e2a:	f7ff fdfd 	bl	8032a28 <cmp_lfn>
 8032e2e:	4603      	mov	r3, r0
 8032e30:	2b00      	cmp	r3, #0
 8032e32:	d003      	beq.n	8032e3c <dir_find+0x106>
 8032e34:	7d7b      	ldrb	r3, [r7, #21]
 8032e36:	3b01      	subs	r3, #1
 8032e38:	b2db      	uxtb	r3, r3
 8032e3a:	e000      	b.n	8032e3e <dir_find+0x108>
 8032e3c:	23ff      	movs	r3, #255	; 0xff
 8032e3e:	757b      	strb	r3, [r7, #21]
 8032e40:	e024      	b.n	8032e8c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8032e42:	7d7b      	ldrb	r3, [r7, #21]
 8032e44:	2b00      	cmp	r3, #0
 8032e46:	d109      	bne.n	8032e5c <dir_find+0x126>
 8032e48:	687b      	ldr	r3, [r7, #4]
 8032e4a:	6a1b      	ldr	r3, [r3, #32]
 8032e4c:	4618      	mov	r0, r3
 8032e4e:	f7ff ff51 	bl	8032cf4 <sum_sfn>
 8032e52:	4603      	mov	r3, r0
 8032e54:	461a      	mov	r2, r3
 8032e56:	7d3b      	ldrb	r3, [r7, #20]
 8032e58:	4293      	cmp	r3, r2
 8032e5a:	d024      	beq.n	8032ea6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8032e5c:	687b      	ldr	r3, [r7, #4]
 8032e5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8032e62:	f003 0301 	and.w	r3, r3, #1
 8032e66:	2b00      	cmp	r3, #0
 8032e68:	d10a      	bne.n	8032e80 <dir_find+0x14a>
 8032e6a:	687b      	ldr	r3, [r7, #4]
 8032e6c:	6a18      	ldr	r0, [r3, #32]
 8032e6e:	687b      	ldr	r3, [r7, #4]
 8032e70:	3324      	adds	r3, #36	; 0x24
 8032e72:	220b      	movs	r2, #11
 8032e74:	4619      	mov	r1, r3
 8032e76:	f7fe fe1f 	bl	8031ab8 <mem_cmp>
 8032e7a:	4603      	mov	r3, r0
 8032e7c:	2b00      	cmp	r3, #0
 8032e7e:	d014      	beq.n	8032eaa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8032e80:	23ff      	movs	r3, #255	; 0xff
 8032e82:	757b      	strb	r3, [r7, #21]
 8032e84:	687b      	ldr	r3, [r7, #4]
 8032e86:	f04f 32ff 	mov.w	r2, #4294967295
 8032e8a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8032e8c:	2100      	movs	r1, #0
 8032e8e:	6878      	ldr	r0, [r7, #4]
 8032e90:	f7ff fc6d 	bl	803276e <dir_next>
 8032e94:	4603      	mov	r3, r0
 8032e96:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8032e98:	7dfb      	ldrb	r3, [r7, #23]
 8032e9a:	2b00      	cmp	r3, #0
 8032e9c:	f43f af65 	beq.w	8032d6a <dir_find+0x34>
 8032ea0:	e004      	b.n	8032eac <dir_find+0x176>
		if (res != FR_OK) break;
 8032ea2:	bf00      	nop
 8032ea4:	e002      	b.n	8032eac <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8032ea6:	bf00      	nop
 8032ea8:	e000      	b.n	8032eac <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8032eaa:	bf00      	nop

	return res;
 8032eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8032eae:	4618      	mov	r0, r3
 8032eb0:	3718      	adds	r7, #24
 8032eb2:	46bd      	mov	sp, r7
 8032eb4:	bd80      	pop	{r7, pc}
	...

08032eb8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8032eb8:	b580      	push	{r7, lr}
 8032eba:	b08c      	sub	sp, #48	; 0x30
 8032ebc:	af00      	add	r7, sp, #0
 8032ebe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8032ec0:	687b      	ldr	r3, [r7, #4]
 8032ec2:	681b      	ldr	r3, [r3, #0]
 8032ec4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8032ec6:	687b      	ldr	r3, [r7, #4]
 8032ec8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8032ecc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8032ed0:	2b00      	cmp	r3, #0
 8032ed2:	d001      	beq.n	8032ed8 <dir_register+0x20>
 8032ed4:	2306      	movs	r3, #6
 8032ed6:	e0e0      	b.n	803309a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8032ed8:	2300      	movs	r3, #0
 8032eda:	627b      	str	r3, [r7, #36]	; 0x24
 8032edc:	e002      	b.n	8032ee4 <dir_register+0x2c>
 8032ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032ee0:	3301      	adds	r3, #1
 8032ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8032ee4:	69fb      	ldr	r3, [r7, #28]
 8032ee6:	691a      	ldr	r2, [r3, #16]
 8032ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032eea:	005b      	lsls	r3, r3, #1
 8032eec:	4413      	add	r3, r2
 8032eee:	881b      	ldrh	r3, [r3, #0]
 8032ef0:	2b00      	cmp	r3, #0
 8032ef2:	d1f4      	bne.n	8032ede <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8032ef4:	687b      	ldr	r3, [r7, #4]
 8032ef6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8032efa:	f107 030c 	add.w	r3, r7, #12
 8032efe:	220c      	movs	r2, #12
 8032f00:	4618      	mov	r0, r3
 8032f02:	f7fe fd9d 	bl	8031a40 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8032f06:	7dfb      	ldrb	r3, [r7, #23]
 8032f08:	f003 0301 	and.w	r3, r3, #1
 8032f0c:	2b00      	cmp	r3, #0
 8032f0e:	d032      	beq.n	8032f76 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8032f10:	687b      	ldr	r3, [r7, #4]
 8032f12:	2240      	movs	r2, #64	; 0x40
 8032f14:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8032f18:	2301      	movs	r3, #1
 8032f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8032f1c:	e016      	b.n	8032f4c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8032f1e:	687b      	ldr	r3, [r7, #4]
 8032f20:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8032f24:	69fb      	ldr	r3, [r7, #28]
 8032f26:	691a      	ldr	r2, [r3, #16]
 8032f28:	f107 010c 	add.w	r1, r7, #12
 8032f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032f2e:	f7ff fe53 	bl	8032bd8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8032f32:	6878      	ldr	r0, [r7, #4]
 8032f34:	f7ff feff 	bl	8032d36 <dir_find>
 8032f38:	4603      	mov	r3, r0
 8032f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8032f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8032f42:	2b00      	cmp	r3, #0
 8032f44:	d106      	bne.n	8032f54 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8032f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032f48:	3301      	adds	r3, #1
 8032f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8032f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032f4e:	2b63      	cmp	r3, #99	; 0x63
 8032f50:	d9e5      	bls.n	8032f1e <dir_register+0x66>
 8032f52:	e000      	b.n	8032f56 <dir_register+0x9e>
			if (res != FR_OK) break;
 8032f54:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8032f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8032f58:	2b64      	cmp	r3, #100	; 0x64
 8032f5a:	d101      	bne.n	8032f60 <dir_register+0xa8>
 8032f5c:	2307      	movs	r3, #7
 8032f5e:	e09c      	b.n	803309a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8032f60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8032f64:	2b04      	cmp	r3, #4
 8032f66:	d002      	beq.n	8032f6e <dir_register+0xb6>
 8032f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8032f6c:	e095      	b.n	803309a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8032f6e:	7dfa      	ldrb	r2, [r7, #23]
 8032f70:	687b      	ldr	r3, [r7, #4]
 8032f72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8032f76:	7dfb      	ldrb	r3, [r7, #23]
 8032f78:	f003 0302 	and.w	r3, r3, #2
 8032f7c:	2b00      	cmp	r3, #0
 8032f7e:	d007      	beq.n	8032f90 <dir_register+0xd8>
 8032f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8032f82:	330c      	adds	r3, #12
 8032f84:	4a47      	ldr	r2, [pc, #284]	; (80330a4 <dir_register+0x1ec>)
 8032f86:	fba2 2303 	umull	r2, r3, r2, r3
 8032f8a:	089b      	lsrs	r3, r3, #2
 8032f8c:	3301      	adds	r3, #1
 8032f8e:	e000      	b.n	8032f92 <dir_register+0xda>
 8032f90:	2301      	movs	r3, #1
 8032f92:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8032f94:	6a39      	ldr	r1, [r7, #32]
 8032f96:	6878      	ldr	r0, [r7, #4]
 8032f98:	f7ff fcbf 	bl	803291a <dir_alloc>
 8032f9c:	4603      	mov	r3, r0
 8032f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8032fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8032fa6:	2b00      	cmp	r3, #0
 8032fa8:	d148      	bne.n	803303c <dir_register+0x184>
 8032faa:	6a3b      	ldr	r3, [r7, #32]
 8032fac:	3b01      	subs	r3, #1
 8032fae:	623b      	str	r3, [r7, #32]
 8032fb0:	6a3b      	ldr	r3, [r7, #32]
 8032fb2:	2b00      	cmp	r3, #0
 8032fb4:	d042      	beq.n	803303c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8032fb6:	687b      	ldr	r3, [r7, #4]
 8032fb8:	695a      	ldr	r2, [r3, #20]
 8032fba:	6a3b      	ldr	r3, [r7, #32]
 8032fbc:	015b      	lsls	r3, r3, #5
 8032fbe:	1ad3      	subs	r3, r2, r3
 8032fc0:	4619      	mov	r1, r3
 8032fc2:	6878      	ldr	r0, [r7, #4]
 8032fc4:	f7ff fb4a 	bl	803265c <dir_sdi>
 8032fc8:	4603      	mov	r3, r0
 8032fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8032fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8032fd2:	2b00      	cmp	r3, #0
 8032fd4:	d132      	bne.n	803303c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8032fd6:	687b      	ldr	r3, [r7, #4]
 8032fd8:	3324      	adds	r3, #36	; 0x24
 8032fda:	4618      	mov	r0, r3
 8032fdc:	f7ff fe8a 	bl	8032cf4 <sum_sfn>
 8032fe0:	4603      	mov	r3, r0
 8032fe2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8032fe4:	687b      	ldr	r3, [r7, #4]
 8032fe6:	69db      	ldr	r3, [r3, #28]
 8032fe8:	4619      	mov	r1, r3
 8032fea:	69f8      	ldr	r0, [r7, #28]
 8032fec:	f7fe ff56 	bl	8031e9c <move_window>
 8032ff0:	4603      	mov	r3, r0
 8032ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8032ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8032ffa:	2b00      	cmp	r3, #0
 8032ffc:	d11d      	bne.n	803303a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8032ffe:	69fb      	ldr	r3, [r7, #28]
 8033000:	6918      	ldr	r0, [r3, #16]
 8033002:	687b      	ldr	r3, [r7, #4]
 8033004:	6a19      	ldr	r1, [r3, #32]
 8033006:	6a3b      	ldr	r3, [r7, #32]
 8033008:	b2da      	uxtb	r2, r3
 803300a:	7efb      	ldrb	r3, [r7, #27]
 803300c:	f7ff fd7c 	bl	8032b08 <put_lfn>
				fs->wflag = 1;
 8033010:	69fb      	ldr	r3, [r7, #28]
 8033012:	2201      	movs	r2, #1
 8033014:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8033016:	2100      	movs	r1, #0
 8033018:	6878      	ldr	r0, [r7, #4]
 803301a:	f7ff fba8 	bl	803276e <dir_next>
 803301e:	4603      	mov	r3, r0
 8033020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8033024:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8033028:	2b00      	cmp	r3, #0
 803302a:	d107      	bne.n	803303c <dir_register+0x184>
 803302c:	6a3b      	ldr	r3, [r7, #32]
 803302e:	3b01      	subs	r3, #1
 8033030:	623b      	str	r3, [r7, #32]
 8033032:	6a3b      	ldr	r3, [r7, #32]
 8033034:	2b00      	cmp	r3, #0
 8033036:	d1d5      	bne.n	8032fe4 <dir_register+0x12c>
 8033038:	e000      	b.n	803303c <dir_register+0x184>
				if (res != FR_OK) break;
 803303a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 803303c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8033040:	2b00      	cmp	r3, #0
 8033042:	d128      	bne.n	8033096 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8033044:	687b      	ldr	r3, [r7, #4]
 8033046:	69db      	ldr	r3, [r3, #28]
 8033048:	4619      	mov	r1, r3
 803304a:	69f8      	ldr	r0, [r7, #28]
 803304c:	f7fe ff26 	bl	8031e9c <move_window>
 8033050:	4603      	mov	r3, r0
 8033052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8033056:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 803305a:	2b00      	cmp	r3, #0
 803305c:	d11b      	bne.n	8033096 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 803305e:	687b      	ldr	r3, [r7, #4]
 8033060:	6a1b      	ldr	r3, [r3, #32]
 8033062:	2220      	movs	r2, #32
 8033064:	2100      	movs	r1, #0
 8033066:	4618      	mov	r0, r3
 8033068:	f7fe fd0b 	bl	8031a82 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 803306c:	687b      	ldr	r3, [r7, #4]
 803306e:	6a18      	ldr	r0, [r3, #32]
 8033070:	687b      	ldr	r3, [r7, #4]
 8033072:	3324      	adds	r3, #36	; 0x24
 8033074:	220b      	movs	r2, #11
 8033076:	4619      	mov	r1, r3
 8033078:	f7fe fce2 	bl	8031a40 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 803307c:	687b      	ldr	r3, [r7, #4]
 803307e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8033082:	687b      	ldr	r3, [r7, #4]
 8033084:	6a1b      	ldr	r3, [r3, #32]
 8033086:	330c      	adds	r3, #12
 8033088:	f002 0218 	and.w	r2, r2, #24
 803308c:	b2d2      	uxtb	r2, r2
 803308e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8033090:	69fb      	ldr	r3, [r7, #28]
 8033092:	2201      	movs	r2, #1
 8033094:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8033096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 803309a:	4618      	mov	r0, r3
 803309c:	3730      	adds	r7, #48	; 0x30
 803309e:	46bd      	mov	sp, r7
 80330a0:	bd80      	pop	{r7, pc}
 80330a2:	bf00      	nop
 80330a4:	4ec4ec4f 	.word	0x4ec4ec4f

080330a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80330a8:	b580      	push	{r7, lr}
 80330aa:	b08a      	sub	sp, #40	; 0x28
 80330ac:	af00      	add	r7, sp, #0
 80330ae:	6078      	str	r0, [r7, #4]
 80330b0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80330b2:	683b      	ldr	r3, [r7, #0]
 80330b4:	681b      	ldr	r3, [r3, #0]
 80330b6:	613b      	str	r3, [r7, #16]
 80330b8:	687b      	ldr	r3, [r7, #4]
 80330ba:	681b      	ldr	r3, [r3, #0]
 80330bc:	691b      	ldr	r3, [r3, #16]
 80330be:	60fb      	str	r3, [r7, #12]
 80330c0:	2300      	movs	r3, #0
 80330c2:	617b      	str	r3, [r7, #20]
 80330c4:	697b      	ldr	r3, [r7, #20]
 80330c6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80330c8:	69bb      	ldr	r3, [r7, #24]
 80330ca:	1c5a      	adds	r2, r3, #1
 80330cc:	61ba      	str	r2, [r7, #24]
 80330ce:	693a      	ldr	r2, [r7, #16]
 80330d0:	4413      	add	r3, r2
 80330d2:	781b      	ldrb	r3, [r3, #0]
 80330d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80330d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80330d8:	2b1f      	cmp	r3, #31
 80330da:	d940      	bls.n	803315e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80330dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80330de:	2b2f      	cmp	r3, #47	; 0x2f
 80330e0:	d006      	beq.n	80330f0 <create_name+0x48>
 80330e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80330e4:	2b5c      	cmp	r3, #92	; 0x5c
 80330e6:	d110      	bne.n	803310a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80330e8:	e002      	b.n	80330f0 <create_name+0x48>
 80330ea:	69bb      	ldr	r3, [r7, #24]
 80330ec:	3301      	adds	r3, #1
 80330ee:	61bb      	str	r3, [r7, #24]
 80330f0:	693a      	ldr	r2, [r7, #16]
 80330f2:	69bb      	ldr	r3, [r7, #24]
 80330f4:	4413      	add	r3, r2
 80330f6:	781b      	ldrb	r3, [r3, #0]
 80330f8:	2b2f      	cmp	r3, #47	; 0x2f
 80330fa:	d0f6      	beq.n	80330ea <create_name+0x42>
 80330fc:	693a      	ldr	r2, [r7, #16]
 80330fe:	69bb      	ldr	r3, [r7, #24]
 8033100:	4413      	add	r3, r2
 8033102:	781b      	ldrb	r3, [r3, #0]
 8033104:	2b5c      	cmp	r3, #92	; 0x5c
 8033106:	d0f0      	beq.n	80330ea <create_name+0x42>
			break;
 8033108:	e02a      	b.n	8033160 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 803310a:	697b      	ldr	r3, [r7, #20]
 803310c:	2bfe      	cmp	r3, #254	; 0xfe
 803310e:	d901      	bls.n	8033114 <create_name+0x6c>
 8033110:	2306      	movs	r3, #6
 8033112:	e17d      	b.n	8033410 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8033114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033116:	b2db      	uxtb	r3, r3
 8033118:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 803311a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803311c:	2101      	movs	r1, #1
 803311e:	4618      	mov	r0, r3
 8033120:	f001 fc04 	bl	803492c <ff_convert>
 8033124:	4603      	mov	r3, r0
 8033126:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8033128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803312a:	2b00      	cmp	r3, #0
 803312c:	d101      	bne.n	8033132 <create_name+0x8a>
 803312e:	2306      	movs	r3, #6
 8033130:	e16e      	b.n	8033410 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8033132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033134:	2b7f      	cmp	r3, #127	; 0x7f
 8033136:	d809      	bhi.n	803314c <create_name+0xa4>
 8033138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803313a:	4619      	mov	r1, r3
 803313c:	488d      	ldr	r0, [pc, #564]	; (8033374 <create_name+0x2cc>)
 803313e:	f7fe fce2 	bl	8031b06 <chk_chr>
 8033142:	4603      	mov	r3, r0
 8033144:	2b00      	cmp	r3, #0
 8033146:	d001      	beq.n	803314c <create_name+0xa4>
 8033148:	2306      	movs	r3, #6
 803314a:	e161      	b.n	8033410 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 803314c:	697b      	ldr	r3, [r7, #20]
 803314e:	1c5a      	adds	r2, r3, #1
 8033150:	617a      	str	r2, [r7, #20]
 8033152:	005b      	lsls	r3, r3, #1
 8033154:	68fa      	ldr	r2, [r7, #12]
 8033156:	4413      	add	r3, r2
 8033158:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 803315a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 803315c:	e7b4      	b.n	80330c8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 803315e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8033160:	693a      	ldr	r2, [r7, #16]
 8033162:	69bb      	ldr	r3, [r7, #24]
 8033164:	441a      	add	r2, r3
 8033166:	683b      	ldr	r3, [r7, #0]
 8033168:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 803316a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803316c:	2b1f      	cmp	r3, #31
 803316e:	d801      	bhi.n	8033174 <create_name+0xcc>
 8033170:	2304      	movs	r3, #4
 8033172:	e000      	b.n	8033176 <create_name+0xce>
 8033174:	2300      	movs	r3, #0
 8033176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 803317a:	e011      	b.n	80331a0 <create_name+0xf8>
		w = lfn[di - 1];
 803317c:	697b      	ldr	r3, [r7, #20]
 803317e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8033182:	3b01      	subs	r3, #1
 8033184:	005b      	lsls	r3, r3, #1
 8033186:	68fa      	ldr	r2, [r7, #12]
 8033188:	4413      	add	r3, r2
 803318a:	881b      	ldrh	r3, [r3, #0]
 803318c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 803318e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033190:	2b20      	cmp	r3, #32
 8033192:	d002      	beq.n	803319a <create_name+0xf2>
 8033194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033196:	2b2e      	cmp	r3, #46	; 0x2e
 8033198:	d106      	bne.n	80331a8 <create_name+0x100>
		di--;
 803319a:	697b      	ldr	r3, [r7, #20]
 803319c:	3b01      	subs	r3, #1
 803319e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80331a0:	697b      	ldr	r3, [r7, #20]
 80331a2:	2b00      	cmp	r3, #0
 80331a4:	d1ea      	bne.n	803317c <create_name+0xd4>
 80331a6:	e000      	b.n	80331aa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80331a8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80331aa:	697b      	ldr	r3, [r7, #20]
 80331ac:	005b      	lsls	r3, r3, #1
 80331ae:	68fa      	ldr	r2, [r7, #12]
 80331b0:	4413      	add	r3, r2
 80331b2:	2200      	movs	r2, #0
 80331b4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80331b6:	697b      	ldr	r3, [r7, #20]
 80331b8:	2b00      	cmp	r3, #0
 80331ba:	d101      	bne.n	80331c0 <create_name+0x118>
 80331bc:	2306      	movs	r3, #6
 80331be:	e127      	b.n	8033410 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80331c0:	687b      	ldr	r3, [r7, #4]
 80331c2:	3324      	adds	r3, #36	; 0x24
 80331c4:	220b      	movs	r2, #11
 80331c6:	2120      	movs	r1, #32
 80331c8:	4618      	mov	r0, r3
 80331ca:	f7fe fc5a 	bl	8031a82 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80331ce:	2300      	movs	r3, #0
 80331d0:	61bb      	str	r3, [r7, #24]
 80331d2:	e002      	b.n	80331da <create_name+0x132>
 80331d4:	69bb      	ldr	r3, [r7, #24]
 80331d6:	3301      	adds	r3, #1
 80331d8:	61bb      	str	r3, [r7, #24]
 80331da:	69bb      	ldr	r3, [r7, #24]
 80331dc:	005b      	lsls	r3, r3, #1
 80331de:	68fa      	ldr	r2, [r7, #12]
 80331e0:	4413      	add	r3, r2
 80331e2:	881b      	ldrh	r3, [r3, #0]
 80331e4:	2b20      	cmp	r3, #32
 80331e6:	d0f5      	beq.n	80331d4 <create_name+0x12c>
 80331e8:	69bb      	ldr	r3, [r7, #24]
 80331ea:	005b      	lsls	r3, r3, #1
 80331ec:	68fa      	ldr	r2, [r7, #12]
 80331ee:	4413      	add	r3, r2
 80331f0:	881b      	ldrh	r3, [r3, #0]
 80331f2:	2b2e      	cmp	r3, #46	; 0x2e
 80331f4:	d0ee      	beq.n	80331d4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80331f6:	69bb      	ldr	r3, [r7, #24]
 80331f8:	2b00      	cmp	r3, #0
 80331fa:	d009      	beq.n	8033210 <create_name+0x168>
 80331fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033200:	f043 0303 	orr.w	r3, r3, #3
 8033204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8033208:	e002      	b.n	8033210 <create_name+0x168>
 803320a:	697b      	ldr	r3, [r7, #20]
 803320c:	3b01      	subs	r3, #1
 803320e:	617b      	str	r3, [r7, #20]
 8033210:	697b      	ldr	r3, [r7, #20]
 8033212:	2b00      	cmp	r3, #0
 8033214:	d009      	beq.n	803322a <create_name+0x182>
 8033216:	697b      	ldr	r3, [r7, #20]
 8033218:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 803321c:	3b01      	subs	r3, #1
 803321e:	005b      	lsls	r3, r3, #1
 8033220:	68fa      	ldr	r2, [r7, #12]
 8033222:	4413      	add	r3, r2
 8033224:	881b      	ldrh	r3, [r3, #0]
 8033226:	2b2e      	cmp	r3, #46	; 0x2e
 8033228:	d1ef      	bne.n	803320a <create_name+0x162>

	i = b = 0; ni = 8;
 803322a:	2300      	movs	r3, #0
 803322c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8033230:	2300      	movs	r3, #0
 8033232:	623b      	str	r3, [r7, #32]
 8033234:	2308      	movs	r3, #8
 8033236:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8033238:	69bb      	ldr	r3, [r7, #24]
 803323a:	1c5a      	adds	r2, r3, #1
 803323c:	61ba      	str	r2, [r7, #24]
 803323e:	005b      	lsls	r3, r3, #1
 8033240:	68fa      	ldr	r2, [r7, #12]
 8033242:	4413      	add	r3, r2
 8033244:	881b      	ldrh	r3, [r3, #0]
 8033246:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8033248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803324a:	2b00      	cmp	r3, #0
 803324c:	f000 8090 	beq.w	8033370 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8033250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033252:	2b20      	cmp	r3, #32
 8033254:	d006      	beq.n	8033264 <create_name+0x1bc>
 8033256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033258:	2b2e      	cmp	r3, #46	; 0x2e
 803325a:	d10a      	bne.n	8033272 <create_name+0x1ca>
 803325c:	69ba      	ldr	r2, [r7, #24]
 803325e:	697b      	ldr	r3, [r7, #20]
 8033260:	429a      	cmp	r2, r3
 8033262:	d006      	beq.n	8033272 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8033264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033268:	f043 0303 	orr.w	r3, r3, #3
 803326c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8033270:	e07d      	b.n	803336e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8033272:	6a3a      	ldr	r2, [r7, #32]
 8033274:	69fb      	ldr	r3, [r7, #28]
 8033276:	429a      	cmp	r2, r3
 8033278:	d203      	bcs.n	8033282 <create_name+0x1da>
 803327a:	69ba      	ldr	r2, [r7, #24]
 803327c:	697b      	ldr	r3, [r7, #20]
 803327e:	429a      	cmp	r2, r3
 8033280:	d123      	bne.n	80332ca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8033282:	69fb      	ldr	r3, [r7, #28]
 8033284:	2b0b      	cmp	r3, #11
 8033286:	d106      	bne.n	8033296 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8033288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 803328c:	f043 0303 	orr.w	r3, r3, #3
 8033290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8033294:	e075      	b.n	8033382 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8033296:	69ba      	ldr	r2, [r7, #24]
 8033298:	697b      	ldr	r3, [r7, #20]
 803329a:	429a      	cmp	r2, r3
 803329c:	d005      	beq.n	80332aa <create_name+0x202>
 803329e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80332a2:	f043 0303 	orr.w	r3, r3, #3
 80332a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80332aa:	69ba      	ldr	r2, [r7, #24]
 80332ac:	697b      	ldr	r3, [r7, #20]
 80332ae:	429a      	cmp	r2, r3
 80332b0:	d866      	bhi.n	8033380 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80332b2:	697b      	ldr	r3, [r7, #20]
 80332b4:	61bb      	str	r3, [r7, #24]
 80332b6:	2308      	movs	r3, #8
 80332b8:	623b      	str	r3, [r7, #32]
 80332ba:	230b      	movs	r3, #11
 80332bc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80332be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80332c2:	009b      	lsls	r3, r3, #2
 80332c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80332c8:	e051      	b.n	803336e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80332ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80332cc:	2b7f      	cmp	r3, #127	; 0x7f
 80332ce:	d914      	bls.n	80332fa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80332d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80332d2:	2100      	movs	r1, #0
 80332d4:	4618      	mov	r0, r3
 80332d6:	f001 fb29 	bl	803492c <ff_convert>
 80332da:	4603      	mov	r3, r0
 80332dc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80332de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80332e0:	2b00      	cmp	r3, #0
 80332e2:	d004      	beq.n	80332ee <create_name+0x246>
 80332e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80332e6:	3b80      	subs	r3, #128	; 0x80
 80332e8:	4a23      	ldr	r2, [pc, #140]	; (8033378 <create_name+0x2d0>)
 80332ea:	5cd3      	ldrb	r3, [r2, r3]
 80332ec:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80332ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80332f2:	f043 0302 	orr.w	r3, r3, #2
 80332f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80332fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80332fc:	2b00      	cmp	r3, #0
 80332fe:	d007      	beq.n	8033310 <create_name+0x268>
 8033300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033302:	4619      	mov	r1, r3
 8033304:	481d      	ldr	r0, [pc, #116]	; (803337c <create_name+0x2d4>)
 8033306:	f7fe fbfe 	bl	8031b06 <chk_chr>
 803330a:	4603      	mov	r3, r0
 803330c:	2b00      	cmp	r3, #0
 803330e:	d008      	beq.n	8033322 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8033310:	235f      	movs	r3, #95	; 0x5f
 8033312:	84bb      	strh	r3, [r7, #36]	; 0x24
 8033314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8033318:	f043 0303 	orr.w	r3, r3, #3
 803331c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8033320:	e01b      	b.n	803335a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8033322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033324:	2b40      	cmp	r3, #64	; 0x40
 8033326:	d909      	bls.n	803333c <create_name+0x294>
 8033328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803332a:	2b5a      	cmp	r3, #90	; 0x5a
 803332c:	d806      	bhi.n	803333c <create_name+0x294>
					b |= 2;
 803332e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8033332:	f043 0302 	orr.w	r3, r3, #2
 8033336:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 803333a:	e00e      	b.n	803335a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 803333c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 803333e:	2b60      	cmp	r3, #96	; 0x60
 8033340:	d90b      	bls.n	803335a <create_name+0x2b2>
 8033342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033344:	2b7a      	cmp	r3, #122	; 0x7a
 8033346:	d808      	bhi.n	803335a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8033348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803334c:	f043 0301 	orr.w	r3, r3, #1
 8033350:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8033354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8033356:	3b20      	subs	r3, #32
 8033358:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 803335a:	6a3b      	ldr	r3, [r7, #32]
 803335c:	1c5a      	adds	r2, r3, #1
 803335e:	623a      	str	r2, [r7, #32]
 8033360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8033362:	b2d1      	uxtb	r1, r2
 8033364:	687a      	ldr	r2, [r7, #4]
 8033366:	4413      	add	r3, r2
 8033368:	460a      	mov	r2, r1
 803336a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 803336e:	e763      	b.n	8033238 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8033370:	bf00      	nop
 8033372:	e006      	b.n	8033382 <create_name+0x2da>
 8033374:	080475d0 	.word	0x080475d0
 8033378:	08049c1c 	.word	0x08049c1c
 803337c:	080475dc 	.word	0x080475dc
			if (si > di) break;			/* No extension */
 8033380:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8033382:	687b      	ldr	r3, [r7, #4]
 8033384:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8033388:	2be5      	cmp	r3, #229	; 0xe5
 803338a:	d103      	bne.n	8033394 <create_name+0x2ec>
 803338c:	687b      	ldr	r3, [r7, #4]
 803338e:	2205      	movs	r2, #5
 8033390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8033394:	69fb      	ldr	r3, [r7, #28]
 8033396:	2b08      	cmp	r3, #8
 8033398:	d104      	bne.n	80333a4 <create_name+0x2fc>
 803339a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 803339e:	009b      	lsls	r3, r3, #2
 80333a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80333a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80333a8:	f003 030c 	and.w	r3, r3, #12
 80333ac:	2b0c      	cmp	r3, #12
 80333ae:	d005      	beq.n	80333bc <create_name+0x314>
 80333b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80333b4:	f003 0303 	and.w	r3, r3, #3
 80333b8:	2b03      	cmp	r3, #3
 80333ba:	d105      	bne.n	80333c8 <create_name+0x320>
 80333bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80333c0:	f043 0302 	orr.w	r3, r3, #2
 80333c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80333c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80333cc:	f003 0302 	and.w	r3, r3, #2
 80333d0:	2b00      	cmp	r3, #0
 80333d2:	d117      	bne.n	8033404 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80333d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80333d8:	f003 0303 	and.w	r3, r3, #3
 80333dc:	2b01      	cmp	r3, #1
 80333de:	d105      	bne.n	80333ec <create_name+0x344>
 80333e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80333e4:	f043 0310 	orr.w	r3, r3, #16
 80333e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80333ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80333f0:	f003 030c 	and.w	r3, r3, #12
 80333f4:	2b04      	cmp	r3, #4
 80333f6:	d105      	bne.n	8033404 <create_name+0x35c>
 80333f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80333fc:	f043 0308 	orr.w	r3, r3, #8
 8033400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8033404:	687b      	ldr	r3, [r7, #4]
 8033406:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 803340a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 803340e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8033410:	4618      	mov	r0, r3
 8033412:	3728      	adds	r7, #40	; 0x28
 8033414:	46bd      	mov	sp, r7
 8033416:	bd80      	pop	{r7, pc}

08033418 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8033418:	b580      	push	{r7, lr}
 803341a:	b086      	sub	sp, #24
 803341c:	af00      	add	r7, sp, #0
 803341e:	6078      	str	r0, [r7, #4]
 8033420:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8033422:	687b      	ldr	r3, [r7, #4]
 8033424:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8033426:	693b      	ldr	r3, [r7, #16]
 8033428:	681b      	ldr	r3, [r3, #0]
 803342a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 803342c:	e002      	b.n	8033434 <follow_path+0x1c>
 803342e:	683b      	ldr	r3, [r7, #0]
 8033430:	3301      	adds	r3, #1
 8033432:	603b      	str	r3, [r7, #0]
 8033434:	683b      	ldr	r3, [r7, #0]
 8033436:	781b      	ldrb	r3, [r3, #0]
 8033438:	2b2f      	cmp	r3, #47	; 0x2f
 803343a:	d0f8      	beq.n	803342e <follow_path+0x16>
 803343c:	683b      	ldr	r3, [r7, #0]
 803343e:	781b      	ldrb	r3, [r3, #0]
 8033440:	2b5c      	cmp	r3, #92	; 0x5c
 8033442:	d0f4      	beq.n	803342e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8033444:	693b      	ldr	r3, [r7, #16]
 8033446:	2200      	movs	r2, #0
 8033448:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 803344a:	683b      	ldr	r3, [r7, #0]
 803344c:	781b      	ldrb	r3, [r3, #0]
 803344e:	2b1f      	cmp	r3, #31
 8033450:	d80a      	bhi.n	8033468 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8033452:	687b      	ldr	r3, [r7, #4]
 8033454:	2280      	movs	r2, #128	; 0x80
 8033456:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 803345a:	2100      	movs	r1, #0
 803345c:	6878      	ldr	r0, [r7, #4]
 803345e:	f7ff f8fd 	bl	803265c <dir_sdi>
 8033462:	4603      	mov	r3, r0
 8033464:	75fb      	strb	r3, [r7, #23]
 8033466:	e048      	b.n	80334fa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8033468:	463b      	mov	r3, r7
 803346a:	4619      	mov	r1, r3
 803346c:	6878      	ldr	r0, [r7, #4]
 803346e:	f7ff fe1b 	bl	80330a8 <create_name>
 8033472:	4603      	mov	r3, r0
 8033474:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8033476:	7dfb      	ldrb	r3, [r7, #23]
 8033478:	2b00      	cmp	r3, #0
 803347a:	d139      	bne.n	80334f0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 803347c:	6878      	ldr	r0, [r7, #4]
 803347e:	f7ff fc5a 	bl	8032d36 <dir_find>
 8033482:	4603      	mov	r3, r0
 8033484:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8033486:	687b      	ldr	r3, [r7, #4]
 8033488:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 803348c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 803348e:	7dfb      	ldrb	r3, [r7, #23]
 8033490:	2b00      	cmp	r3, #0
 8033492:	d00a      	beq.n	80334aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8033494:	7dfb      	ldrb	r3, [r7, #23]
 8033496:	2b04      	cmp	r3, #4
 8033498:	d12c      	bne.n	80334f4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 803349a:	7afb      	ldrb	r3, [r7, #11]
 803349c:	f003 0304 	and.w	r3, r3, #4
 80334a0:	2b00      	cmp	r3, #0
 80334a2:	d127      	bne.n	80334f4 <follow_path+0xdc>
 80334a4:	2305      	movs	r3, #5
 80334a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80334a8:	e024      	b.n	80334f4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80334aa:	7afb      	ldrb	r3, [r7, #11]
 80334ac:	f003 0304 	and.w	r3, r3, #4
 80334b0:	2b00      	cmp	r3, #0
 80334b2:	d121      	bne.n	80334f8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80334b4:	693b      	ldr	r3, [r7, #16]
 80334b6:	799b      	ldrb	r3, [r3, #6]
 80334b8:	f003 0310 	and.w	r3, r3, #16
 80334bc:	2b00      	cmp	r3, #0
 80334be:	d102      	bne.n	80334c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80334c0:	2305      	movs	r3, #5
 80334c2:	75fb      	strb	r3, [r7, #23]
 80334c4:	e019      	b.n	80334fa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80334c6:	68fb      	ldr	r3, [r7, #12]
 80334c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80334cc:	687b      	ldr	r3, [r7, #4]
 80334ce:	695b      	ldr	r3, [r3, #20]
 80334d0:	68fa      	ldr	r2, [r7, #12]
 80334d2:	8992      	ldrh	r2, [r2, #12]
 80334d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80334d8:	fb00 f202 	mul.w	r2, r0, r2
 80334dc:	1a9b      	subs	r3, r3, r2
 80334de:	440b      	add	r3, r1
 80334e0:	4619      	mov	r1, r3
 80334e2:	68f8      	ldr	r0, [r7, #12]
 80334e4:	f7ff fa60 	bl	80329a8 <ld_clust>
 80334e8:	4602      	mov	r2, r0
 80334ea:	693b      	ldr	r3, [r7, #16]
 80334ec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80334ee:	e7bb      	b.n	8033468 <follow_path+0x50>
			if (res != FR_OK) break;
 80334f0:	bf00      	nop
 80334f2:	e002      	b.n	80334fa <follow_path+0xe2>
				break;
 80334f4:	bf00      	nop
 80334f6:	e000      	b.n	80334fa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80334f8:	bf00      	nop
			}
		}
	}

	return res;
 80334fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80334fc:	4618      	mov	r0, r3
 80334fe:	3718      	adds	r7, #24
 8033500:	46bd      	mov	sp, r7
 8033502:	bd80      	pop	{r7, pc}

08033504 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8033504:	b480      	push	{r7}
 8033506:	b087      	sub	sp, #28
 8033508:	af00      	add	r7, sp, #0
 803350a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 803350c:	f04f 33ff 	mov.w	r3, #4294967295
 8033510:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8033512:	687b      	ldr	r3, [r7, #4]
 8033514:	681b      	ldr	r3, [r3, #0]
 8033516:	2b00      	cmp	r3, #0
 8033518:	d031      	beq.n	803357e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 803351a:	687b      	ldr	r3, [r7, #4]
 803351c:	681b      	ldr	r3, [r3, #0]
 803351e:	617b      	str	r3, [r7, #20]
 8033520:	e002      	b.n	8033528 <get_ldnumber+0x24>
 8033522:	697b      	ldr	r3, [r7, #20]
 8033524:	3301      	adds	r3, #1
 8033526:	617b      	str	r3, [r7, #20]
 8033528:	697b      	ldr	r3, [r7, #20]
 803352a:	781b      	ldrb	r3, [r3, #0]
 803352c:	2b1f      	cmp	r3, #31
 803352e:	d903      	bls.n	8033538 <get_ldnumber+0x34>
 8033530:	697b      	ldr	r3, [r7, #20]
 8033532:	781b      	ldrb	r3, [r3, #0]
 8033534:	2b3a      	cmp	r3, #58	; 0x3a
 8033536:	d1f4      	bne.n	8033522 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8033538:	697b      	ldr	r3, [r7, #20]
 803353a:	781b      	ldrb	r3, [r3, #0]
 803353c:	2b3a      	cmp	r3, #58	; 0x3a
 803353e:	d11c      	bne.n	803357a <get_ldnumber+0x76>
			tp = *path;
 8033540:	687b      	ldr	r3, [r7, #4]
 8033542:	681b      	ldr	r3, [r3, #0]
 8033544:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8033546:	68fb      	ldr	r3, [r7, #12]
 8033548:	1c5a      	adds	r2, r3, #1
 803354a:	60fa      	str	r2, [r7, #12]
 803354c:	781b      	ldrb	r3, [r3, #0]
 803354e:	3b30      	subs	r3, #48	; 0x30
 8033550:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8033552:	68bb      	ldr	r3, [r7, #8]
 8033554:	2b09      	cmp	r3, #9
 8033556:	d80e      	bhi.n	8033576 <get_ldnumber+0x72>
 8033558:	68fa      	ldr	r2, [r7, #12]
 803355a:	697b      	ldr	r3, [r7, #20]
 803355c:	429a      	cmp	r2, r3
 803355e:	d10a      	bne.n	8033576 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8033560:	68bb      	ldr	r3, [r7, #8]
 8033562:	2b00      	cmp	r3, #0
 8033564:	d107      	bne.n	8033576 <get_ldnumber+0x72>
					vol = (int)i;
 8033566:	68bb      	ldr	r3, [r7, #8]
 8033568:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 803356a:	697b      	ldr	r3, [r7, #20]
 803356c:	3301      	adds	r3, #1
 803356e:	617b      	str	r3, [r7, #20]
 8033570:	687b      	ldr	r3, [r7, #4]
 8033572:	697a      	ldr	r2, [r7, #20]
 8033574:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8033576:	693b      	ldr	r3, [r7, #16]
 8033578:	e002      	b.n	8033580 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 803357a:	2300      	movs	r3, #0
 803357c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 803357e:	693b      	ldr	r3, [r7, #16]
}
 8033580:	4618      	mov	r0, r3
 8033582:	371c      	adds	r7, #28
 8033584:	46bd      	mov	sp, r7
 8033586:	f85d 7b04 	ldr.w	r7, [sp], #4
 803358a:	4770      	bx	lr

0803358c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 803358c:	b580      	push	{r7, lr}
 803358e:	b082      	sub	sp, #8
 8033590:	af00      	add	r7, sp, #0
 8033592:	6078      	str	r0, [r7, #4]
 8033594:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8033596:	687b      	ldr	r3, [r7, #4]
 8033598:	2200      	movs	r2, #0
 803359a:	70da      	strb	r2, [r3, #3]
 803359c:	687b      	ldr	r3, [r7, #4]
 803359e:	f04f 32ff 	mov.w	r2, #4294967295
 80335a2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80335a4:	6839      	ldr	r1, [r7, #0]
 80335a6:	6878      	ldr	r0, [r7, #4]
 80335a8:	f7fe fc78 	bl	8031e9c <move_window>
 80335ac:	4603      	mov	r3, r0
 80335ae:	2b00      	cmp	r3, #0
 80335b0:	d001      	beq.n	80335b6 <check_fs+0x2a>
 80335b2:	2304      	movs	r3, #4
 80335b4:	e038      	b.n	8033628 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80335b6:	687b      	ldr	r3, [r7, #4]
 80335b8:	3338      	adds	r3, #56	; 0x38
 80335ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80335be:	4618      	mov	r0, r3
 80335c0:	f7fe f9bc 	bl	803193c <ld_word>
 80335c4:	4603      	mov	r3, r0
 80335c6:	461a      	mov	r2, r3
 80335c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80335cc:	429a      	cmp	r2, r3
 80335ce:	d001      	beq.n	80335d4 <check_fs+0x48>
 80335d0:	2303      	movs	r3, #3
 80335d2:	e029      	b.n	8033628 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80335d4:	687b      	ldr	r3, [r7, #4]
 80335d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80335da:	2be9      	cmp	r3, #233	; 0xe9
 80335dc:	d009      	beq.n	80335f2 <check_fs+0x66>
 80335de:	687b      	ldr	r3, [r7, #4]
 80335e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80335e4:	2beb      	cmp	r3, #235	; 0xeb
 80335e6:	d11e      	bne.n	8033626 <check_fs+0x9a>
 80335e8:	687b      	ldr	r3, [r7, #4]
 80335ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80335ee:	2b90      	cmp	r3, #144	; 0x90
 80335f0:	d119      	bne.n	8033626 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80335f2:	687b      	ldr	r3, [r7, #4]
 80335f4:	3338      	adds	r3, #56	; 0x38
 80335f6:	3336      	adds	r3, #54	; 0x36
 80335f8:	4618      	mov	r0, r3
 80335fa:	f7fe f9b7 	bl	803196c <ld_dword>
 80335fe:	4603      	mov	r3, r0
 8033600:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8033604:	4a0a      	ldr	r2, [pc, #40]	; (8033630 <check_fs+0xa4>)
 8033606:	4293      	cmp	r3, r2
 8033608:	d101      	bne.n	803360e <check_fs+0x82>
 803360a:	2300      	movs	r3, #0
 803360c:	e00c      	b.n	8033628 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 803360e:	687b      	ldr	r3, [r7, #4]
 8033610:	3338      	adds	r3, #56	; 0x38
 8033612:	3352      	adds	r3, #82	; 0x52
 8033614:	4618      	mov	r0, r3
 8033616:	f7fe f9a9 	bl	803196c <ld_dword>
 803361a:	4603      	mov	r3, r0
 803361c:	4a05      	ldr	r2, [pc, #20]	; (8033634 <check_fs+0xa8>)
 803361e:	4293      	cmp	r3, r2
 8033620:	d101      	bne.n	8033626 <check_fs+0x9a>
 8033622:	2300      	movs	r3, #0
 8033624:	e000      	b.n	8033628 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8033626:	2302      	movs	r3, #2
}
 8033628:	4618      	mov	r0, r3
 803362a:	3708      	adds	r7, #8
 803362c:	46bd      	mov	sp, r7
 803362e:	bd80      	pop	{r7, pc}
 8033630:	00544146 	.word	0x00544146
 8033634:	33544146 	.word	0x33544146

08033638 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8033638:	b580      	push	{r7, lr}
 803363a:	b096      	sub	sp, #88	; 0x58
 803363c:	af00      	add	r7, sp, #0
 803363e:	60f8      	str	r0, [r7, #12]
 8033640:	60b9      	str	r1, [r7, #8]
 8033642:	4613      	mov	r3, r2
 8033644:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8033646:	68bb      	ldr	r3, [r7, #8]
 8033648:	2200      	movs	r2, #0
 803364a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 803364c:	68f8      	ldr	r0, [r7, #12]
 803364e:	f7ff ff59 	bl	8033504 <get_ldnumber>
 8033652:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8033654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033656:	2b00      	cmp	r3, #0
 8033658:	da01      	bge.n	803365e <find_volume+0x26>
 803365a:	230b      	movs	r3, #11
 803365c:	e265      	b.n	8033b2a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 803365e:	4a9f      	ldr	r2, [pc, #636]	; (80338dc <find_volume+0x2a4>)
 8033660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8033666:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8033668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803366a:	2b00      	cmp	r3, #0
 803366c:	d101      	bne.n	8033672 <find_volume+0x3a>
 803366e:	230c      	movs	r3, #12
 8033670:	e25b      	b.n	8033b2a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8033672:	68bb      	ldr	r3, [r7, #8]
 8033674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8033676:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8033678:	79fb      	ldrb	r3, [r7, #7]
 803367a:	f023 0301 	bic.w	r3, r3, #1
 803367e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8033680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033682:	781b      	ldrb	r3, [r3, #0]
 8033684:	2b00      	cmp	r3, #0
 8033686:	d01a      	beq.n	80336be <find_volume+0x86>
		stat = disk_status(fs->drv);
 8033688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803368a:	785b      	ldrb	r3, [r3, #1]
 803368c:	4618      	mov	r0, r3
 803368e:	f7fe f8b7 	bl	8031800 <disk_status>
 8033692:	4603      	mov	r3, r0
 8033694:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8033698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 803369c:	f003 0301 	and.w	r3, r3, #1
 80336a0:	2b00      	cmp	r3, #0
 80336a2:	d10c      	bne.n	80336be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80336a4:	79fb      	ldrb	r3, [r7, #7]
 80336a6:	2b00      	cmp	r3, #0
 80336a8:	d007      	beq.n	80336ba <find_volume+0x82>
 80336aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80336ae:	f003 0304 	and.w	r3, r3, #4
 80336b2:	2b00      	cmp	r3, #0
 80336b4:	d001      	beq.n	80336ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80336b6:	230a      	movs	r3, #10
 80336b8:	e237      	b.n	8033b2a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80336ba:	2300      	movs	r3, #0
 80336bc:	e235      	b.n	8033b2a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80336be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80336c0:	2200      	movs	r2, #0
 80336c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80336c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80336c6:	b2da      	uxtb	r2, r3
 80336c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80336ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80336cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80336ce:	785b      	ldrb	r3, [r3, #1]
 80336d0:	4618      	mov	r0, r3
 80336d2:	f7fe f8af 	bl	8031834 <disk_initialize>
 80336d6:	4603      	mov	r3, r0
 80336d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80336dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80336e0:	f003 0301 	and.w	r3, r3, #1
 80336e4:	2b00      	cmp	r3, #0
 80336e6:	d001      	beq.n	80336ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80336e8:	2303      	movs	r3, #3
 80336ea:	e21e      	b.n	8033b2a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80336ec:	79fb      	ldrb	r3, [r7, #7]
 80336ee:	2b00      	cmp	r3, #0
 80336f0:	d007      	beq.n	8033702 <find_volume+0xca>
 80336f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80336f6:	f003 0304 	and.w	r3, r3, #4
 80336fa:	2b00      	cmp	r3, #0
 80336fc:	d001      	beq.n	8033702 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80336fe:	230a      	movs	r3, #10
 8033700:	e213      	b.n	8033b2a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8033702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033704:	7858      	ldrb	r0, [r3, #1]
 8033706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033708:	330c      	adds	r3, #12
 803370a:	461a      	mov	r2, r3
 803370c:	2102      	movs	r1, #2
 803370e:	f7fe f8f7 	bl	8031900 <disk_ioctl>
 8033712:	4603      	mov	r3, r0
 8033714:	2b00      	cmp	r3, #0
 8033716:	d001      	beq.n	803371c <find_volume+0xe4>
 8033718:	2301      	movs	r3, #1
 803371a:	e206      	b.n	8033b2a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 803371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803371e:	899b      	ldrh	r3, [r3, #12]
 8033720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8033724:	d80d      	bhi.n	8033742 <find_volume+0x10a>
 8033726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033728:	899b      	ldrh	r3, [r3, #12]
 803372a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803372e:	d308      	bcc.n	8033742 <find_volume+0x10a>
 8033730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033732:	899b      	ldrh	r3, [r3, #12]
 8033734:	461a      	mov	r2, r3
 8033736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033738:	899b      	ldrh	r3, [r3, #12]
 803373a:	3b01      	subs	r3, #1
 803373c:	4013      	ands	r3, r2
 803373e:	2b00      	cmp	r3, #0
 8033740:	d001      	beq.n	8033746 <find_volume+0x10e>
 8033742:	2301      	movs	r3, #1
 8033744:	e1f1      	b.n	8033b2a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8033746:	2300      	movs	r3, #0
 8033748:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 803374a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 803374c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 803374e:	f7ff ff1d 	bl	803358c <check_fs>
 8033752:	4603      	mov	r3, r0
 8033754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8033758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 803375c:	2b02      	cmp	r3, #2
 803375e:	d149      	bne.n	80337f4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8033760:	2300      	movs	r3, #0
 8033762:	643b      	str	r3, [r7, #64]	; 0x40
 8033764:	e01e      	b.n	80337a4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8033766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033768:	f103 0238 	add.w	r2, r3, #56	; 0x38
 803376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803376e:	011b      	lsls	r3, r3, #4
 8033770:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8033774:	4413      	add	r3, r2
 8033776:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8033778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803377a:	3304      	adds	r3, #4
 803377c:	781b      	ldrb	r3, [r3, #0]
 803377e:	2b00      	cmp	r3, #0
 8033780:	d006      	beq.n	8033790 <find_volume+0x158>
 8033782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8033784:	3308      	adds	r3, #8
 8033786:	4618      	mov	r0, r3
 8033788:	f7fe f8f0 	bl	803196c <ld_dword>
 803378c:	4602      	mov	r2, r0
 803378e:	e000      	b.n	8033792 <find_volume+0x15a>
 8033790:	2200      	movs	r2, #0
 8033792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8033794:	009b      	lsls	r3, r3, #2
 8033796:	3358      	adds	r3, #88	; 0x58
 8033798:	443b      	add	r3, r7
 803379a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 803379e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80337a0:	3301      	adds	r3, #1
 80337a2:	643b      	str	r3, [r7, #64]	; 0x40
 80337a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80337a6:	2b03      	cmp	r3, #3
 80337a8:	d9dd      	bls.n	8033766 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80337aa:	2300      	movs	r3, #0
 80337ac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80337ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80337b0:	2b00      	cmp	r3, #0
 80337b2:	d002      	beq.n	80337ba <find_volume+0x182>
 80337b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80337b6:	3b01      	subs	r3, #1
 80337b8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80337ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80337bc:	009b      	lsls	r3, r3, #2
 80337be:	3358      	adds	r3, #88	; 0x58
 80337c0:	443b      	add	r3, r7
 80337c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80337c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80337c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80337ca:	2b00      	cmp	r3, #0
 80337cc:	d005      	beq.n	80337da <find_volume+0x1a2>
 80337ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80337d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80337d2:	f7ff fedb 	bl	803358c <check_fs>
 80337d6:	4603      	mov	r3, r0
 80337d8:	e000      	b.n	80337dc <find_volume+0x1a4>
 80337da:	2303      	movs	r3, #3
 80337dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80337e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80337e4:	2b01      	cmp	r3, #1
 80337e6:	d905      	bls.n	80337f4 <find_volume+0x1bc>
 80337e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80337ea:	3301      	adds	r3, #1
 80337ec:	643b      	str	r3, [r7, #64]	; 0x40
 80337ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80337f0:	2b03      	cmp	r3, #3
 80337f2:	d9e2      	bls.n	80337ba <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80337f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80337f8:	2b04      	cmp	r3, #4
 80337fa:	d101      	bne.n	8033800 <find_volume+0x1c8>
 80337fc:	2301      	movs	r3, #1
 80337fe:	e194      	b.n	8033b2a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8033800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8033804:	2b01      	cmp	r3, #1
 8033806:	d901      	bls.n	803380c <find_volume+0x1d4>
 8033808:	230d      	movs	r3, #13
 803380a:	e18e      	b.n	8033b2a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 803380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803380e:	3338      	adds	r3, #56	; 0x38
 8033810:	330b      	adds	r3, #11
 8033812:	4618      	mov	r0, r3
 8033814:	f7fe f892 	bl	803193c <ld_word>
 8033818:	4603      	mov	r3, r0
 803381a:	461a      	mov	r2, r3
 803381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803381e:	899b      	ldrh	r3, [r3, #12]
 8033820:	429a      	cmp	r2, r3
 8033822:	d001      	beq.n	8033828 <find_volume+0x1f0>
 8033824:	230d      	movs	r3, #13
 8033826:	e180      	b.n	8033b2a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8033828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803382a:	3338      	adds	r3, #56	; 0x38
 803382c:	3316      	adds	r3, #22
 803382e:	4618      	mov	r0, r3
 8033830:	f7fe f884 	bl	803193c <ld_word>
 8033834:	4603      	mov	r3, r0
 8033836:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8033838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 803383a:	2b00      	cmp	r3, #0
 803383c:	d106      	bne.n	803384c <find_volume+0x214>
 803383e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033840:	3338      	adds	r3, #56	; 0x38
 8033842:	3324      	adds	r3, #36	; 0x24
 8033844:	4618      	mov	r0, r3
 8033846:	f7fe f891 	bl	803196c <ld_dword>
 803384a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 803384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803384e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8033850:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8033852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033854:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8033858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803385a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 803385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803385e:	789b      	ldrb	r3, [r3, #2]
 8033860:	2b01      	cmp	r3, #1
 8033862:	d005      	beq.n	8033870 <find_volume+0x238>
 8033864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033866:	789b      	ldrb	r3, [r3, #2]
 8033868:	2b02      	cmp	r3, #2
 803386a:	d001      	beq.n	8033870 <find_volume+0x238>
 803386c:	230d      	movs	r3, #13
 803386e:	e15c      	b.n	8033b2a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8033870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033872:	789b      	ldrb	r3, [r3, #2]
 8033874:	461a      	mov	r2, r3
 8033876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033878:	fb02 f303 	mul.w	r3, r2, r3
 803387c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 803387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8033884:	b29a      	uxth	r2, r3
 8033886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033888:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 803388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803388c:	895b      	ldrh	r3, [r3, #10]
 803388e:	2b00      	cmp	r3, #0
 8033890:	d008      	beq.n	80338a4 <find_volume+0x26c>
 8033892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033894:	895b      	ldrh	r3, [r3, #10]
 8033896:	461a      	mov	r2, r3
 8033898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803389a:	895b      	ldrh	r3, [r3, #10]
 803389c:	3b01      	subs	r3, #1
 803389e:	4013      	ands	r3, r2
 80338a0:	2b00      	cmp	r3, #0
 80338a2:	d001      	beq.n	80338a8 <find_volume+0x270>
 80338a4:	230d      	movs	r3, #13
 80338a6:	e140      	b.n	8033b2a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80338a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80338aa:	3338      	adds	r3, #56	; 0x38
 80338ac:	3311      	adds	r3, #17
 80338ae:	4618      	mov	r0, r3
 80338b0:	f7fe f844 	bl	803193c <ld_word>
 80338b4:	4603      	mov	r3, r0
 80338b6:	461a      	mov	r2, r3
 80338b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80338ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80338bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80338be:	891b      	ldrh	r3, [r3, #8]
 80338c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80338c2:	8992      	ldrh	r2, [r2, #12]
 80338c4:	0952      	lsrs	r2, r2, #5
 80338c6:	b292      	uxth	r2, r2
 80338c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80338cc:	fb01 f202 	mul.w	r2, r1, r2
 80338d0:	1a9b      	subs	r3, r3, r2
 80338d2:	b29b      	uxth	r3, r3
 80338d4:	2b00      	cmp	r3, #0
 80338d6:	d003      	beq.n	80338e0 <find_volume+0x2a8>
 80338d8:	230d      	movs	r3, #13
 80338da:	e126      	b.n	8033b2a <find_volume+0x4f2>
 80338dc:	20006074 	.word	0x20006074

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80338e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80338e2:	3338      	adds	r3, #56	; 0x38
 80338e4:	3313      	adds	r3, #19
 80338e6:	4618      	mov	r0, r3
 80338e8:	f7fe f828 	bl	803193c <ld_word>
 80338ec:	4603      	mov	r3, r0
 80338ee:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80338f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80338f2:	2b00      	cmp	r3, #0
 80338f4:	d106      	bne.n	8033904 <find_volume+0x2cc>
 80338f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80338f8:	3338      	adds	r3, #56	; 0x38
 80338fa:	3320      	adds	r3, #32
 80338fc:	4618      	mov	r0, r3
 80338fe:	f7fe f835 	bl	803196c <ld_dword>
 8033902:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8033904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033906:	3338      	adds	r3, #56	; 0x38
 8033908:	330e      	adds	r3, #14
 803390a:	4618      	mov	r0, r3
 803390c:	f7fe f816 	bl	803193c <ld_word>
 8033910:	4603      	mov	r3, r0
 8033912:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8033914:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8033916:	2b00      	cmp	r3, #0
 8033918:	d101      	bne.n	803391e <find_volume+0x2e6>
 803391a:	230d      	movs	r3, #13
 803391c:	e105      	b.n	8033b2a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 803391e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8033920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033922:	4413      	add	r3, r2
 8033924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8033926:	8911      	ldrh	r1, [r2, #8]
 8033928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803392a:	8992      	ldrh	r2, [r2, #12]
 803392c:	0952      	lsrs	r2, r2, #5
 803392e:	b292      	uxth	r2, r2
 8033930:	fbb1 f2f2 	udiv	r2, r1, r2
 8033934:	b292      	uxth	r2, r2
 8033936:	4413      	add	r3, r2
 8033938:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 803393a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 803393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803393e:	429a      	cmp	r2, r3
 8033940:	d201      	bcs.n	8033946 <find_volume+0x30e>
 8033942:	230d      	movs	r3, #13
 8033944:	e0f1      	b.n	8033b2a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8033946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8033948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803394a:	1ad3      	subs	r3, r2, r3
 803394c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803394e:	8952      	ldrh	r2, [r2, #10]
 8033950:	fbb3 f3f2 	udiv	r3, r3, r2
 8033954:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8033956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033958:	2b00      	cmp	r3, #0
 803395a:	d101      	bne.n	8033960 <find_volume+0x328>
 803395c:	230d      	movs	r3, #13
 803395e:	e0e4      	b.n	8033b2a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8033960:	2303      	movs	r3, #3
 8033962:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8033966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033968:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 803396c:	4293      	cmp	r3, r2
 803396e:	d802      	bhi.n	8033976 <find_volume+0x33e>
 8033970:	2302      	movs	r3, #2
 8033972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8033976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033978:	f640 72f5 	movw	r2, #4085	; 0xff5
 803397c:	4293      	cmp	r3, r2
 803397e:	d802      	bhi.n	8033986 <find_volume+0x34e>
 8033980:	2301      	movs	r3, #1
 8033982:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8033986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8033988:	1c9a      	adds	r2, r3, #2
 803398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803398c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 803398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033990:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033992:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8033994:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8033996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033998:	441a      	add	r2, r3
 803399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803399c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 803399e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80339a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80339a2:	441a      	add	r2, r3
 80339a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80339a6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80339a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80339ac:	2b03      	cmp	r3, #3
 80339ae:	d11e      	bne.n	80339ee <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80339b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80339b2:	3338      	adds	r3, #56	; 0x38
 80339b4:	332a      	adds	r3, #42	; 0x2a
 80339b6:	4618      	mov	r0, r3
 80339b8:	f7fd ffc0 	bl	803193c <ld_word>
 80339bc:	4603      	mov	r3, r0
 80339be:	2b00      	cmp	r3, #0
 80339c0:	d001      	beq.n	80339c6 <find_volume+0x38e>
 80339c2:	230d      	movs	r3, #13
 80339c4:	e0b1      	b.n	8033b2a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80339c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80339c8:	891b      	ldrh	r3, [r3, #8]
 80339ca:	2b00      	cmp	r3, #0
 80339cc:	d001      	beq.n	80339d2 <find_volume+0x39a>
 80339ce:	230d      	movs	r3, #13
 80339d0:	e0ab      	b.n	8033b2a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80339d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80339d4:	3338      	adds	r3, #56	; 0x38
 80339d6:	332c      	adds	r3, #44	; 0x2c
 80339d8:	4618      	mov	r0, r3
 80339da:	f7fd ffc7 	bl	803196c <ld_dword>
 80339de:	4602      	mov	r2, r0
 80339e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80339e2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80339e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80339e6:	69db      	ldr	r3, [r3, #28]
 80339e8:	009b      	lsls	r3, r3, #2
 80339ea:	647b      	str	r3, [r7, #68]	; 0x44
 80339ec:	e01f      	b.n	8033a2e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80339ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80339f0:	891b      	ldrh	r3, [r3, #8]
 80339f2:	2b00      	cmp	r3, #0
 80339f4:	d101      	bne.n	80339fa <find_volume+0x3c2>
 80339f6:	230d      	movs	r3, #13
 80339f8:	e097      	b.n	8033b2a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80339fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80339fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80339fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033a00:	441a      	add	r2, r3
 8033a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a04:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8033a06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8033a0a:	2b02      	cmp	r3, #2
 8033a0c:	d103      	bne.n	8033a16 <find_volume+0x3de>
 8033a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a10:	69db      	ldr	r3, [r3, #28]
 8033a12:	005b      	lsls	r3, r3, #1
 8033a14:	e00a      	b.n	8033a2c <find_volume+0x3f4>
 8033a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a18:	69da      	ldr	r2, [r3, #28]
 8033a1a:	4613      	mov	r3, r2
 8033a1c:	005b      	lsls	r3, r3, #1
 8033a1e:	4413      	add	r3, r2
 8033a20:	085a      	lsrs	r2, r3, #1
 8033a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a24:	69db      	ldr	r3, [r3, #28]
 8033a26:	f003 0301 	and.w	r3, r3, #1
 8033a2a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8033a2c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8033a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a30:	6a1a      	ldr	r2, [r3, #32]
 8033a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a34:	899b      	ldrh	r3, [r3, #12]
 8033a36:	4619      	mov	r1, r3
 8033a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8033a3a:	440b      	add	r3, r1
 8033a3c:	3b01      	subs	r3, #1
 8033a3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8033a40:	8989      	ldrh	r1, [r1, #12]
 8033a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8033a46:	429a      	cmp	r2, r3
 8033a48:	d201      	bcs.n	8033a4e <find_volume+0x416>
 8033a4a:	230d      	movs	r3, #13
 8033a4c:	e06d      	b.n	8033b2a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8033a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a50:	f04f 32ff 	mov.w	r2, #4294967295
 8033a54:	619a      	str	r2, [r3, #24]
 8033a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a58:	699a      	ldr	r2, [r3, #24]
 8033a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a5c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8033a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a60:	2280      	movs	r2, #128	; 0x80
 8033a62:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8033a64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8033a68:	2b03      	cmp	r3, #3
 8033a6a:	d149      	bne.n	8033b00 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8033a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a6e:	3338      	adds	r3, #56	; 0x38
 8033a70:	3330      	adds	r3, #48	; 0x30
 8033a72:	4618      	mov	r0, r3
 8033a74:	f7fd ff62 	bl	803193c <ld_word>
 8033a78:	4603      	mov	r3, r0
 8033a7a:	2b01      	cmp	r3, #1
 8033a7c:	d140      	bne.n	8033b00 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8033a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033a80:	3301      	adds	r3, #1
 8033a82:	4619      	mov	r1, r3
 8033a84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8033a86:	f7fe fa09 	bl	8031e9c <move_window>
 8033a8a:	4603      	mov	r3, r0
 8033a8c:	2b00      	cmp	r3, #0
 8033a8e:	d137      	bne.n	8033b00 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8033a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a92:	2200      	movs	r2, #0
 8033a94:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8033a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033a98:	3338      	adds	r3, #56	; 0x38
 8033a9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8033a9e:	4618      	mov	r0, r3
 8033aa0:	f7fd ff4c 	bl	803193c <ld_word>
 8033aa4:	4603      	mov	r3, r0
 8033aa6:	461a      	mov	r2, r3
 8033aa8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8033aac:	429a      	cmp	r2, r3
 8033aae:	d127      	bne.n	8033b00 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8033ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033ab2:	3338      	adds	r3, #56	; 0x38
 8033ab4:	4618      	mov	r0, r3
 8033ab6:	f7fd ff59 	bl	803196c <ld_dword>
 8033aba:	4603      	mov	r3, r0
 8033abc:	4a1d      	ldr	r2, [pc, #116]	; (8033b34 <find_volume+0x4fc>)
 8033abe:	4293      	cmp	r3, r2
 8033ac0:	d11e      	bne.n	8033b00 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8033ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033ac4:	3338      	adds	r3, #56	; 0x38
 8033ac6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8033aca:	4618      	mov	r0, r3
 8033acc:	f7fd ff4e 	bl	803196c <ld_dword>
 8033ad0:	4603      	mov	r3, r0
 8033ad2:	4a19      	ldr	r2, [pc, #100]	; (8033b38 <find_volume+0x500>)
 8033ad4:	4293      	cmp	r3, r2
 8033ad6:	d113      	bne.n	8033b00 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8033ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033ada:	3338      	adds	r3, #56	; 0x38
 8033adc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8033ae0:	4618      	mov	r0, r3
 8033ae2:	f7fd ff43 	bl	803196c <ld_dword>
 8033ae6:	4602      	mov	r2, r0
 8033ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033aea:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8033aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033aee:	3338      	adds	r3, #56	; 0x38
 8033af0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8033af4:	4618      	mov	r0, r3
 8033af6:	f7fd ff39 	bl	803196c <ld_dword>
 8033afa:	4602      	mov	r2, r0
 8033afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033afe:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8033b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033b02:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8033b06:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8033b08:	4b0c      	ldr	r3, [pc, #48]	; (8033b3c <find_volume+0x504>)
 8033b0a:	881b      	ldrh	r3, [r3, #0]
 8033b0c:	3301      	adds	r3, #1
 8033b0e:	b29a      	uxth	r2, r3
 8033b10:	4b0a      	ldr	r3, [pc, #40]	; (8033b3c <find_volume+0x504>)
 8033b12:	801a      	strh	r2, [r3, #0]
 8033b14:	4b09      	ldr	r3, [pc, #36]	; (8033b3c <find_volume+0x504>)
 8033b16:	881a      	ldrh	r2, [r3, #0]
 8033b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033b1a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8033b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033b1e:	4a08      	ldr	r2, [pc, #32]	; (8033b40 <find_volume+0x508>)
 8033b20:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8033b22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8033b24:	f7fe f952 	bl	8031dcc <clear_lock>
#endif
	return FR_OK;
 8033b28:	2300      	movs	r3, #0
}
 8033b2a:	4618      	mov	r0, r3
 8033b2c:	3758      	adds	r7, #88	; 0x58
 8033b2e:	46bd      	mov	sp, r7
 8033b30:	bd80      	pop	{r7, pc}
 8033b32:	bf00      	nop
 8033b34:	41615252 	.word	0x41615252
 8033b38:	61417272 	.word	0x61417272
 8033b3c:	20006078 	.word	0x20006078
 8033b40:	2000609c 	.word	0x2000609c

08033b44 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8033b44:	b580      	push	{r7, lr}
 8033b46:	b084      	sub	sp, #16
 8033b48:	af00      	add	r7, sp, #0
 8033b4a:	6078      	str	r0, [r7, #4]
 8033b4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8033b4e:	2309      	movs	r3, #9
 8033b50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8033b52:	687b      	ldr	r3, [r7, #4]
 8033b54:	2b00      	cmp	r3, #0
 8033b56:	d01c      	beq.n	8033b92 <validate+0x4e>
 8033b58:	687b      	ldr	r3, [r7, #4]
 8033b5a:	681b      	ldr	r3, [r3, #0]
 8033b5c:	2b00      	cmp	r3, #0
 8033b5e:	d018      	beq.n	8033b92 <validate+0x4e>
 8033b60:	687b      	ldr	r3, [r7, #4]
 8033b62:	681b      	ldr	r3, [r3, #0]
 8033b64:	781b      	ldrb	r3, [r3, #0]
 8033b66:	2b00      	cmp	r3, #0
 8033b68:	d013      	beq.n	8033b92 <validate+0x4e>
 8033b6a:	687b      	ldr	r3, [r7, #4]
 8033b6c:	889a      	ldrh	r2, [r3, #4]
 8033b6e:	687b      	ldr	r3, [r7, #4]
 8033b70:	681b      	ldr	r3, [r3, #0]
 8033b72:	88db      	ldrh	r3, [r3, #6]
 8033b74:	429a      	cmp	r2, r3
 8033b76:	d10c      	bne.n	8033b92 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8033b78:	687b      	ldr	r3, [r7, #4]
 8033b7a:	681b      	ldr	r3, [r3, #0]
 8033b7c:	785b      	ldrb	r3, [r3, #1]
 8033b7e:	4618      	mov	r0, r3
 8033b80:	f7fd fe3e 	bl	8031800 <disk_status>
 8033b84:	4603      	mov	r3, r0
 8033b86:	f003 0301 	and.w	r3, r3, #1
 8033b8a:	2b00      	cmp	r3, #0
 8033b8c:	d101      	bne.n	8033b92 <validate+0x4e>
			res = FR_OK;
 8033b8e:	2300      	movs	r3, #0
 8033b90:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8033b92:	7bfb      	ldrb	r3, [r7, #15]
 8033b94:	2b00      	cmp	r3, #0
 8033b96:	d102      	bne.n	8033b9e <validate+0x5a>
 8033b98:	687b      	ldr	r3, [r7, #4]
 8033b9a:	681b      	ldr	r3, [r3, #0]
 8033b9c:	e000      	b.n	8033ba0 <validate+0x5c>
 8033b9e:	2300      	movs	r3, #0
 8033ba0:	683a      	ldr	r2, [r7, #0]
 8033ba2:	6013      	str	r3, [r2, #0]
	return res;
 8033ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8033ba6:	4618      	mov	r0, r3
 8033ba8:	3710      	adds	r7, #16
 8033baa:	46bd      	mov	sp, r7
 8033bac:	bd80      	pop	{r7, pc}
	...

08033bb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8033bb0:	b580      	push	{r7, lr}
 8033bb2:	b088      	sub	sp, #32
 8033bb4:	af00      	add	r7, sp, #0
 8033bb6:	60f8      	str	r0, [r7, #12]
 8033bb8:	60b9      	str	r1, [r7, #8]
 8033bba:	4613      	mov	r3, r2
 8033bbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8033bbe:	68bb      	ldr	r3, [r7, #8]
 8033bc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8033bc2:	f107 0310 	add.w	r3, r7, #16
 8033bc6:	4618      	mov	r0, r3
 8033bc8:	f7ff fc9c 	bl	8033504 <get_ldnumber>
 8033bcc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8033bce:	69fb      	ldr	r3, [r7, #28]
 8033bd0:	2b00      	cmp	r3, #0
 8033bd2:	da01      	bge.n	8033bd8 <f_mount+0x28>
 8033bd4:	230b      	movs	r3, #11
 8033bd6:	e02b      	b.n	8033c30 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8033bd8:	4a17      	ldr	r2, [pc, #92]	; (8033c38 <f_mount+0x88>)
 8033bda:	69fb      	ldr	r3, [r7, #28]
 8033bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8033be0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8033be2:	69bb      	ldr	r3, [r7, #24]
 8033be4:	2b00      	cmp	r3, #0
 8033be6:	d005      	beq.n	8033bf4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8033be8:	69b8      	ldr	r0, [r7, #24]
 8033bea:	f7fe f8ef 	bl	8031dcc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8033bee:	69bb      	ldr	r3, [r7, #24]
 8033bf0:	2200      	movs	r2, #0
 8033bf2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8033bf4:	68fb      	ldr	r3, [r7, #12]
 8033bf6:	2b00      	cmp	r3, #0
 8033bf8:	d002      	beq.n	8033c00 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8033bfa:	68fb      	ldr	r3, [r7, #12]
 8033bfc:	2200      	movs	r2, #0
 8033bfe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8033c00:	68fa      	ldr	r2, [r7, #12]
 8033c02:	490d      	ldr	r1, [pc, #52]	; (8033c38 <f_mount+0x88>)
 8033c04:	69fb      	ldr	r3, [r7, #28]
 8033c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8033c0a:	68fb      	ldr	r3, [r7, #12]
 8033c0c:	2b00      	cmp	r3, #0
 8033c0e:	d002      	beq.n	8033c16 <f_mount+0x66>
 8033c10:	79fb      	ldrb	r3, [r7, #7]
 8033c12:	2b01      	cmp	r3, #1
 8033c14:	d001      	beq.n	8033c1a <f_mount+0x6a>
 8033c16:	2300      	movs	r3, #0
 8033c18:	e00a      	b.n	8033c30 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8033c1a:	f107 010c 	add.w	r1, r7, #12
 8033c1e:	f107 0308 	add.w	r3, r7, #8
 8033c22:	2200      	movs	r2, #0
 8033c24:	4618      	mov	r0, r3
 8033c26:	f7ff fd07 	bl	8033638 <find_volume>
 8033c2a:	4603      	mov	r3, r0
 8033c2c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8033c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8033c30:	4618      	mov	r0, r3
 8033c32:	3720      	adds	r7, #32
 8033c34:	46bd      	mov	sp, r7
 8033c36:	bd80      	pop	{r7, pc}
 8033c38:	20006074 	.word	0x20006074

08033c3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8033c3c:	b580      	push	{r7, lr}
 8033c3e:	b09a      	sub	sp, #104	; 0x68
 8033c40:	af00      	add	r7, sp, #0
 8033c42:	60f8      	str	r0, [r7, #12]
 8033c44:	60b9      	str	r1, [r7, #8]
 8033c46:	4613      	mov	r3, r2
 8033c48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8033c4a:	68fb      	ldr	r3, [r7, #12]
 8033c4c:	2b00      	cmp	r3, #0
 8033c4e:	d101      	bne.n	8033c54 <f_open+0x18>
 8033c50:	2309      	movs	r3, #9
 8033c52:	e1bb      	b.n	8033fcc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8033c54:	79fb      	ldrb	r3, [r7, #7]
 8033c56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8033c5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8033c5c:	79fa      	ldrb	r2, [r7, #7]
 8033c5e:	f107 0114 	add.w	r1, r7, #20
 8033c62:	f107 0308 	add.w	r3, r7, #8
 8033c66:	4618      	mov	r0, r3
 8033c68:	f7ff fce6 	bl	8033638 <find_volume>
 8033c6c:	4603      	mov	r3, r0
 8033c6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8033c72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033c76:	2b00      	cmp	r3, #0
 8033c78:	f040 819f 	bne.w	8033fba <f_open+0x37e>
		dj.obj.fs = fs;
 8033c7c:	697b      	ldr	r3, [r7, #20]
 8033c7e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8033c80:	68ba      	ldr	r2, [r7, #8]
 8033c82:	f107 0318 	add.w	r3, r7, #24
 8033c86:	4611      	mov	r1, r2
 8033c88:	4618      	mov	r0, r3
 8033c8a:	f7ff fbc5 	bl	8033418 <follow_path>
 8033c8e:	4603      	mov	r3, r0
 8033c90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8033c94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033c98:	2b00      	cmp	r3, #0
 8033c9a:	d11a      	bne.n	8033cd2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8033c9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8033ca0:	b25b      	sxtb	r3, r3
 8033ca2:	2b00      	cmp	r3, #0
 8033ca4:	da03      	bge.n	8033cae <f_open+0x72>
				res = FR_INVALID_NAME;
 8033ca6:	2306      	movs	r3, #6
 8033ca8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8033cac:	e011      	b.n	8033cd2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8033cae:	79fb      	ldrb	r3, [r7, #7]
 8033cb0:	f023 0301 	bic.w	r3, r3, #1
 8033cb4:	2b00      	cmp	r3, #0
 8033cb6:	bf14      	ite	ne
 8033cb8:	2301      	movne	r3, #1
 8033cba:	2300      	moveq	r3, #0
 8033cbc:	b2db      	uxtb	r3, r3
 8033cbe:	461a      	mov	r2, r3
 8033cc0:	f107 0318 	add.w	r3, r7, #24
 8033cc4:	4611      	mov	r1, r2
 8033cc6:	4618      	mov	r0, r3
 8033cc8:	f7fd ff38 	bl	8031b3c <chk_lock>
 8033ccc:	4603      	mov	r3, r0
 8033cce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8033cd2:	79fb      	ldrb	r3, [r7, #7]
 8033cd4:	f003 031c 	and.w	r3, r3, #28
 8033cd8:	2b00      	cmp	r3, #0
 8033cda:	d07f      	beq.n	8033ddc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8033cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033ce0:	2b00      	cmp	r3, #0
 8033ce2:	d017      	beq.n	8033d14 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8033ce4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033ce8:	2b04      	cmp	r3, #4
 8033cea:	d10e      	bne.n	8033d0a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8033cec:	f7fd ff82 	bl	8031bf4 <enq_lock>
 8033cf0:	4603      	mov	r3, r0
 8033cf2:	2b00      	cmp	r3, #0
 8033cf4:	d006      	beq.n	8033d04 <f_open+0xc8>
 8033cf6:	f107 0318 	add.w	r3, r7, #24
 8033cfa:	4618      	mov	r0, r3
 8033cfc:	f7ff f8dc 	bl	8032eb8 <dir_register>
 8033d00:	4603      	mov	r3, r0
 8033d02:	e000      	b.n	8033d06 <f_open+0xca>
 8033d04:	2312      	movs	r3, #18
 8033d06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8033d0a:	79fb      	ldrb	r3, [r7, #7]
 8033d0c:	f043 0308 	orr.w	r3, r3, #8
 8033d10:	71fb      	strb	r3, [r7, #7]
 8033d12:	e010      	b.n	8033d36 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8033d14:	7fbb      	ldrb	r3, [r7, #30]
 8033d16:	f003 0311 	and.w	r3, r3, #17
 8033d1a:	2b00      	cmp	r3, #0
 8033d1c:	d003      	beq.n	8033d26 <f_open+0xea>
					res = FR_DENIED;
 8033d1e:	2307      	movs	r3, #7
 8033d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8033d24:	e007      	b.n	8033d36 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8033d26:	79fb      	ldrb	r3, [r7, #7]
 8033d28:	f003 0304 	and.w	r3, r3, #4
 8033d2c:	2b00      	cmp	r3, #0
 8033d2e:	d002      	beq.n	8033d36 <f_open+0xfa>
 8033d30:	2308      	movs	r3, #8
 8033d32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8033d36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033d3a:	2b00      	cmp	r3, #0
 8033d3c:	d168      	bne.n	8033e10 <f_open+0x1d4>
 8033d3e:	79fb      	ldrb	r3, [r7, #7]
 8033d40:	f003 0308 	and.w	r3, r3, #8
 8033d44:	2b00      	cmp	r3, #0
 8033d46:	d063      	beq.n	8033e10 <f_open+0x1d4>
				dw = GET_FATTIME();
 8033d48:	f7fd fcfa 	bl	8031740 <get_fattime>
 8033d4c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8033d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033d50:	330e      	adds	r3, #14
 8033d52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8033d54:	4618      	mov	r0, r3
 8033d56:	f7fd fe47 	bl	80319e8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8033d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033d5c:	3316      	adds	r3, #22
 8033d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8033d60:	4618      	mov	r0, r3
 8033d62:	f7fd fe41 	bl	80319e8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8033d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033d68:	330b      	adds	r3, #11
 8033d6a:	2220      	movs	r2, #32
 8033d6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8033d6e:	697b      	ldr	r3, [r7, #20]
 8033d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8033d72:	4611      	mov	r1, r2
 8033d74:	4618      	mov	r0, r3
 8033d76:	f7fe fe17 	bl	80329a8 <ld_clust>
 8033d7a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8033d7c:	697b      	ldr	r3, [r7, #20]
 8033d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8033d80:	2200      	movs	r2, #0
 8033d82:	4618      	mov	r0, r3
 8033d84:	f7fe fe2f 	bl	80329e6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8033d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033d8a:	331c      	adds	r3, #28
 8033d8c:	2100      	movs	r1, #0
 8033d8e:	4618      	mov	r0, r3
 8033d90:	f7fd fe2a 	bl	80319e8 <st_dword>
					fs->wflag = 1;
 8033d94:	697b      	ldr	r3, [r7, #20]
 8033d96:	2201      	movs	r2, #1
 8033d98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8033d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8033d9c:	2b00      	cmp	r3, #0
 8033d9e:	d037      	beq.n	8033e10 <f_open+0x1d4>
						dw = fs->winsect;
 8033da0:	697b      	ldr	r3, [r7, #20]
 8033da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033da4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8033da6:	f107 0318 	add.w	r3, r7, #24
 8033daa:	2200      	movs	r2, #0
 8033dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8033dae:	4618      	mov	r0, r3
 8033db0:	f7fe fb1f 	bl	80323f2 <remove_chain>
 8033db4:	4603      	mov	r3, r0
 8033db6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8033dba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033dbe:	2b00      	cmp	r3, #0
 8033dc0:	d126      	bne.n	8033e10 <f_open+0x1d4>
							res = move_window(fs, dw);
 8033dc2:	697b      	ldr	r3, [r7, #20]
 8033dc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8033dc6:	4618      	mov	r0, r3
 8033dc8:	f7fe f868 	bl	8031e9c <move_window>
 8033dcc:	4603      	mov	r3, r0
 8033dce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8033dd2:	697b      	ldr	r3, [r7, #20]
 8033dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8033dd6:	3a01      	subs	r2, #1
 8033dd8:	615a      	str	r2, [r3, #20]
 8033dda:	e019      	b.n	8033e10 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8033ddc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033de0:	2b00      	cmp	r3, #0
 8033de2:	d115      	bne.n	8033e10 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8033de4:	7fbb      	ldrb	r3, [r7, #30]
 8033de6:	f003 0310 	and.w	r3, r3, #16
 8033dea:	2b00      	cmp	r3, #0
 8033dec:	d003      	beq.n	8033df6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8033dee:	2304      	movs	r3, #4
 8033df0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8033df4:	e00c      	b.n	8033e10 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8033df6:	79fb      	ldrb	r3, [r7, #7]
 8033df8:	f003 0302 	and.w	r3, r3, #2
 8033dfc:	2b00      	cmp	r3, #0
 8033dfe:	d007      	beq.n	8033e10 <f_open+0x1d4>
 8033e00:	7fbb      	ldrb	r3, [r7, #30]
 8033e02:	f003 0301 	and.w	r3, r3, #1
 8033e06:	2b00      	cmp	r3, #0
 8033e08:	d002      	beq.n	8033e10 <f_open+0x1d4>
						res = FR_DENIED;
 8033e0a:	2307      	movs	r3, #7
 8033e0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8033e10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033e14:	2b00      	cmp	r3, #0
 8033e16:	d128      	bne.n	8033e6a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8033e18:	79fb      	ldrb	r3, [r7, #7]
 8033e1a:	f003 0308 	and.w	r3, r3, #8
 8033e1e:	2b00      	cmp	r3, #0
 8033e20:	d003      	beq.n	8033e2a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8033e22:	79fb      	ldrb	r3, [r7, #7]
 8033e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8033e28:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8033e2a:	697b      	ldr	r3, [r7, #20]
 8033e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8033e2e:	68fb      	ldr	r3, [r7, #12]
 8033e30:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8033e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8033e34:	68fb      	ldr	r3, [r7, #12]
 8033e36:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8033e38:	79fb      	ldrb	r3, [r7, #7]
 8033e3a:	f023 0301 	bic.w	r3, r3, #1
 8033e3e:	2b00      	cmp	r3, #0
 8033e40:	bf14      	ite	ne
 8033e42:	2301      	movne	r3, #1
 8033e44:	2300      	moveq	r3, #0
 8033e46:	b2db      	uxtb	r3, r3
 8033e48:	461a      	mov	r2, r3
 8033e4a:	f107 0318 	add.w	r3, r7, #24
 8033e4e:	4611      	mov	r1, r2
 8033e50:	4618      	mov	r0, r3
 8033e52:	f7fd fef1 	bl	8031c38 <inc_lock>
 8033e56:	4602      	mov	r2, r0
 8033e58:	68fb      	ldr	r3, [r7, #12]
 8033e5a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8033e5c:	68fb      	ldr	r3, [r7, #12]
 8033e5e:	691b      	ldr	r3, [r3, #16]
 8033e60:	2b00      	cmp	r3, #0
 8033e62:	d102      	bne.n	8033e6a <f_open+0x22e>
 8033e64:	2302      	movs	r3, #2
 8033e66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8033e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033e6e:	2b00      	cmp	r3, #0
 8033e70:	f040 80a3 	bne.w	8033fba <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8033e74:	697b      	ldr	r3, [r7, #20]
 8033e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8033e78:	4611      	mov	r1, r2
 8033e7a:	4618      	mov	r0, r3
 8033e7c:	f7fe fd94 	bl	80329a8 <ld_clust>
 8033e80:	4602      	mov	r2, r0
 8033e82:	68fb      	ldr	r3, [r7, #12]
 8033e84:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8033e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033e88:	331c      	adds	r3, #28
 8033e8a:	4618      	mov	r0, r3
 8033e8c:	f7fd fd6e 	bl	803196c <ld_dword>
 8033e90:	4602      	mov	r2, r0
 8033e92:	68fb      	ldr	r3, [r7, #12]
 8033e94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8033e96:	68fb      	ldr	r3, [r7, #12]
 8033e98:	2200      	movs	r2, #0
 8033e9a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8033e9c:	697a      	ldr	r2, [r7, #20]
 8033e9e:	68fb      	ldr	r3, [r7, #12]
 8033ea0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8033ea2:	697b      	ldr	r3, [r7, #20]
 8033ea4:	88da      	ldrh	r2, [r3, #6]
 8033ea6:	68fb      	ldr	r3, [r7, #12]
 8033ea8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8033eaa:	68fb      	ldr	r3, [r7, #12]
 8033eac:	79fa      	ldrb	r2, [r7, #7]
 8033eae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8033eb0:	68fb      	ldr	r3, [r7, #12]
 8033eb2:	2200      	movs	r2, #0
 8033eb4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8033eb6:	68fb      	ldr	r3, [r7, #12]
 8033eb8:	2200      	movs	r2, #0
 8033eba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8033ebc:	68fb      	ldr	r3, [r7, #12]
 8033ebe:	2200      	movs	r2, #0
 8033ec0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8033ec2:	68fb      	ldr	r3, [r7, #12]
 8033ec4:	3330      	adds	r3, #48	; 0x30
 8033ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8033eca:	2100      	movs	r1, #0
 8033ecc:	4618      	mov	r0, r3
 8033ece:	f7fd fdd8 	bl	8031a82 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8033ed2:	79fb      	ldrb	r3, [r7, #7]
 8033ed4:	f003 0320 	and.w	r3, r3, #32
 8033ed8:	2b00      	cmp	r3, #0
 8033eda:	d06e      	beq.n	8033fba <f_open+0x37e>
 8033edc:	68fb      	ldr	r3, [r7, #12]
 8033ede:	68db      	ldr	r3, [r3, #12]
 8033ee0:	2b00      	cmp	r3, #0
 8033ee2:	d06a      	beq.n	8033fba <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8033ee4:	68fb      	ldr	r3, [r7, #12]
 8033ee6:	68da      	ldr	r2, [r3, #12]
 8033ee8:	68fb      	ldr	r3, [r7, #12]
 8033eea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8033eec:	697b      	ldr	r3, [r7, #20]
 8033eee:	895b      	ldrh	r3, [r3, #10]
 8033ef0:	461a      	mov	r2, r3
 8033ef2:	697b      	ldr	r3, [r7, #20]
 8033ef4:	899b      	ldrh	r3, [r3, #12]
 8033ef6:	fb02 f303 	mul.w	r3, r2, r3
 8033efa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8033efc:	68fb      	ldr	r3, [r7, #12]
 8033efe:	689b      	ldr	r3, [r3, #8]
 8033f00:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8033f02:	68fb      	ldr	r3, [r7, #12]
 8033f04:	68db      	ldr	r3, [r3, #12]
 8033f06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8033f08:	e016      	b.n	8033f38 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8033f0a:	68fb      	ldr	r3, [r7, #12]
 8033f0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8033f0e:	4618      	mov	r0, r3
 8033f10:	f7fe f881 	bl	8032016 <get_fat>
 8033f14:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8033f16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033f18:	2b01      	cmp	r3, #1
 8033f1a:	d802      	bhi.n	8033f22 <f_open+0x2e6>
 8033f1c:	2302      	movs	r3, #2
 8033f1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8033f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8033f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8033f28:	d102      	bne.n	8033f30 <f_open+0x2f4>
 8033f2a:	2301      	movs	r3, #1
 8033f2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8033f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8033f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033f34:	1ad3      	subs	r3, r2, r3
 8033f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8033f38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033f3c:	2b00      	cmp	r3, #0
 8033f3e:	d103      	bne.n	8033f48 <f_open+0x30c>
 8033f40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8033f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033f44:	429a      	cmp	r2, r3
 8033f46:	d8e0      	bhi.n	8033f0a <f_open+0x2ce>
				}
				fp->clust = clst;
 8033f48:	68fb      	ldr	r3, [r7, #12]
 8033f4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8033f4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8033f4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033f52:	2b00      	cmp	r3, #0
 8033f54:	d131      	bne.n	8033fba <f_open+0x37e>
 8033f56:	697b      	ldr	r3, [r7, #20]
 8033f58:	899b      	ldrh	r3, [r3, #12]
 8033f5a:	461a      	mov	r2, r3
 8033f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033f5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8033f62:	fb01 f202 	mul.w	r2, r1, r2
 8033f66:	1a9b      	subs	r3, r3, r2
 8033f68:	2b00      	cmp	r3, #0
 8033f6a:	d026      	beq.n	8033fba <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8033f6c:	697b      	ldr	r3, [r7, #20]
 8033f6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8033f70:	4618      	mov	r0, r3
 8033f72:	f7fe f831 	bl	8031fd8 <clust2sect>
 8033f76:	64f8      	str	r0, [r7, #76]	; 0x4c
 8033f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033f7a:	2b00      	cmp	r3, #0
 8033f7c:	d103      	bne.n	8033f86 <f_open+0x34a>
						res = FR_INT_ERR;
 8033f7e:	2302      	movs	r3, #2
 8033f80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8033f84:	e019      	b.n	8033fba <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8033f86:	697b      	ldr	r3, [r7, #20]
 8033f88:	899b      	ldrh	r3, [r3, #12]
 8033f8a:	461a      	mov	r2, r3
 8033f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8033f8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8033f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8033f94:	441a      	add	r2, r3
 8033f96:	68fb      	ldr	r3, [r7, #12]
 8033f98:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8033f9a:	697b      	ldr	r3, [r7, #20]
 8033f9c:	7858      	ldrb	r0, [r3, #1]
 8033f9e:	68fb      	ldr	r3, [r7, #12]
 8033fa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8033fa4:	68fb      	ldr	r3, [r7, #12]
 8033fa6:	6a1a      	ldr	r2, [r3, #32]
 8033fa8:	2301      	movs	r3, #1
 8033faa:	f7fd fc69 	bl	8031880 <disk_read>
 8033fae:	4603      	mov	r3, r0
 8033fb0:	2b00      	cmp	r3, #0
 8033fb2:	d002      	beq.n	8033fba <f_open+0x37e>
 8033fb4:	2301      	movs	r3, #1
 8033fb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8033fba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8033fbe:	2b00      	cmp	r3, #0
 8033fc0:	d002      	beq.n	8033fc8 <f_open+0x38c>
 8033fc2:	68fb      	ldr	r3, [r7, #12]
 8033fc4:	2200      	movs	r2, #0
 8033fc6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8033fc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8033fcc:	4618      	mov	r0, r3
 8033fce:	3768      	adds	r7, #104	; 0x68
 8033fd0:	46bd      	mov	sp, r7
 8033fd2:	bd80      	pop	{r7, pc}

08033fd4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8033fd4:	b580      	push	{r7, lr}
 8033fd6:	b08e      	sub	sp, #56	; 0x38
 8033fd8:	af00      	add	r7, sp, #0
 8033fda:	60f8      	str	r0, [r7, #12]
 8033fdc:	60b9      	str	r1, [r7, #8]
 8033fde:	607a      	str	r2, [r7, #4]
 8033fe0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8033fe2:	68bb      	ldr	r3, [r7, #8]
 8033fe4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8033fe6:	683b      	ldr	r3, [r7, #0]
 8033fe8:	2200      	movs	r2, #0
 8033fea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8033fec:	68fb      	ldr	r3, [r7, #12]
 8033fee:	f107 0214 	add.w	r2, r7, #20
 8033ff2:	4611      	mov	r1, r2
 8033ff4:	4618      	mov	r0, r3
 8033ff6:	f7ff fda5 	bl	8033b44 <validate>
 8033ffa:	4603      	mov	r3, r0
 8033ffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8034000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8034004:	2b00      	cmp	r3, #0
 8034006:	d107      	bne.n	8034018 <f_read+0x44>
 8034008:	68fb      	ldr	r3, [r7, #12]
 803400a:	7d5b      	ldrb	r3, [r3, #21]
 803400c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8034010:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8034014:	2b00      	cmp	r3, #0
 8034016:	d002      	beq.n	803401e <f_read+0x4a>
 8034018:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 803401c:	e135      	b.n	803428a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 803401e:	68fb      	ldr	r3, [r7, #12]
 8034020:	7d1b      	ldrb	r3, [r3, #20]
 8034022:	f003 0301 	and.w	r3, r3, #1
 8034026:	2b00      	cmp	r3, #0
 8034028:	d101      	bne.n	803402e <f_read+0x5a>
 803402a:	2307      	movs	r3, #7
 803402c:	e12d      	b.n	803428a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 803402e:	68fb      	ldr	r3, [r7, #12]
 8034030:	68da      	ldr	r2, [r3, #12]
 8034032:	68fb      	ldr	r3, [r7, #12]
 8034034:	699b      	ldr	r3, [r3, #24]
 8034036:	1ad3      	subs	r3, r2, r3
 8034038:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 803403a:	687a      	ldr	r2, [r7, #4]
 803403c:	6a3b      	ldr	r3, [r7, #32]
 803403e:	429a      	cmp	r2, r3
 8034040:	f240 811e 	bls.w	8034280 <f_read+0x2ac>
 8034044:	6a3b      	ldr	r3, [r7, #32]
 8034046:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8034048:	e11a      	b.n	8034280 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 803404a:	68fb      	ldr	r3, [r7, #12]
 803404c:	699b      	ldr	r3, [r3, #24]
 803404e:	697a      	ldr	r2, [r7, #20]
 8034050:	8992      	ldrh	r2, [r2, #12]
 8034052:	fbb3 f1f2 	udiv	r1, r3, r2
 8034056:	fb01 f202 	mul.w	r2, r1, r2
 803405a:	1a9b      	subs	r3, r3, r2
 803405c:	2b00      	cmp	r3, #0
 803405e:	f040 80d5 	bne.w	803420c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8034062:	68fb      	ldr	r3, [r7, #12]
 8034064:	699b      	ldr	r3, [r3, #24]
 8034066:	697a      	ldr	r2, [r7, #20]
 8034068:	8992      	ldrh	r2, [r2, #12]
 803406a:	fbb3 f3f2 	udiv	r3, r3, r2
 803406e:	697a      	ldr	r2, [r7, #20]
 8034070:	8952      	ldrh	r2, [r2, #10]
 8034072:	3a01      	subs	r2, #1
 8034074:	4013      	ands	r3, r2
 8034076:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8034078:	69fb      	ldr	r3, [r7, #28]
 803407a:	2b00      	cmp	r3, #0
 803407c:	d12f      	bne.n	80340de <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 803407e:	68fb      	ldr	r3, [r7, #12]
 8034080:	699b      	ldr	r3, [r3, #24]
 8034082:	2b00      	cmp	r3, #0
 8034084:	d103      	bne.n	803408e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8034086:	68fb      	ldr	r3, [r7, #12]
 8034088:	689b      	ldr	r3, [r3, #8]
 803408a:	633b      	str	r3, [r7, #48]	; 0x30
 803408c:	e013      	b.n	80340b6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 803408e:	68fb      	ldr	r3, [r7, #12]
 8034090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034092:	2b00      	cmp	r3, #0
 8034094:	d007      	beq.n	80340a6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8034096:	68fb      	ldr	r3, [r7, #12]
 8034098:	699b      	ldr	r3, [r3, #24]
 803409a:	4619      	mov	r1, r3
 803409c:	68f8      	ldr	r0, [r7, #12]
 803409e:	f7fe faa5 	bl	80325ec <clmt_clust>
 80340a2:	6338      	str	r0, [r7, #48]	; 0x30
 80340a4:	e007      	b.n	80340b6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80340a6:	68fa      	ldr	r2, [r7, #12]
 80340a8:	68fb      	ldr	r3, [r7, #12]
 80340aa:	69db      	ldr	r3, [r3, #28]
 80340ac:	4619      	mov	r1, r3
 80340ae:	4610      	mov	r0, r2
 80340b0:	f7fd ffb1 	bl	8032016 <get_fat>
 80340b4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80340b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80340b8:	2b01      	cmp	r3, #1
 80340ba:	d804      	bhi.n	80340c6 <f_read+0xf2>
 80340bc:	68fb      	ldr	r3, [r7, #12]
 80340be:	2202      	movs	r2, #2
 80340c0:	755a      	strb	r2, [r3, #21]
 80340c2:	2302      	movs	r3, #2
 80340c4:	e0e1      	b.n	803428a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80340c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80340c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80340cc:	d104      	bne.n	80340d8 <f_read+0x104>
 80340ce:	68fb      	ldr	r3, [r7, #12]
 80340d0:	2201      	movs	r2, #1
 80340d2:	755a      	strb	r2, [r3, #21]
 80340d4:	2301      	movs	r3, #1
 80340d6:	e0d8      	b.n	803428a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80340d8:	68fb      	ldr	r3, [r7, #12]
 80340da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80340dc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80340de:	697a      	ldr	r2, [r7, #20]
 80340e0:	68fb      	ldr	r3, [r7, #12]
 80340e2:	69db      	ldr	r3, [r3, #28]
 80340e4:	4619      	mov	r1, r3
 80340e6:	4610      	mov	r0, r2
 80340e8:	f7fd ff76 	bl	8031fd8 <clust2sect>
 80340ec:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80340ee:	69bb      	ldr	r3, [r7, #24]
 80340f0:	2b00      	cmp	r3, #0
 80340f2:	d104      	bne.n	80340fe <f_read+0x12a>
 80340f4:	68fb      	ldr	r3, [r7, #12]
 80340f6:	2202      	movs	r2, #2
 80340f8:	755a      	strb	r2, [r3, #21]
 80340fa:	2302      	movs	r3, #2
 80340fc:	e0c5      	b.n	803428a <f_read+0x2b6>
			sect += csect;
 80340fe:	69ba      	ldr	r2, [r7, #24]
 8034100:	69fb      	ldr	r3, [r7, #28]
 8034102:	4413      	add	r3, r2
 8034104:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8034106:	697b      	ldr	r3, [r7, #20]
 8034108:	899b      	ldrh	r3, [r3, #12]
 803410a:	461a      	mov	r2, r3
 803410c:	687b      	ldr	r3, [r7, #4]
 803410e:	fbb3 f3f2 	udiv	r3, r3, r2
 8034112:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8034114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034116:	2b00      	cmp	r3, #0
 8034118:	d041      	beq.n	803419e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 803411a:	69fa      	ldr	r2, [r7, #28]
 803411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803411e:	4413      	add	r3, r2
 8034120:	697a      	ldr	r2, [r7, #20]
 8034122:	8952      	ldrh	r2, [r2, #10]
 8034124:	4293      	cmp	r3, r2
 8034126:	d905      	bls.n	8034134 <f_read+0x160>
					cc = fs->csize - csect;
 8034128:	697b      	ldr	r3, [r7, #20]
 803412a:	895b      	ldrh	r3, [r3, #10]
 803412c:	461a      	mov	r2, r3
 803412e:	69fb      	ldr	r3, [r7, #28]
 8034130:	1ad3      	subs	r3, r2, r3
 8034132:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8034134:	697b      	ldr	r3, [r7, #20]
 8034136:	7858      	ldrb	r0, [r3, #1]
 8034138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803413a:	69ba      	ldr	r2, [r7, #24]
 803413c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803413e:	f7fd fb9f 	bl	8031880 <disk_read>
 8034142:	4603      	mov	r3, r0
 8034144:	2b00      	cmp	r3, #0
 8034146:	d004      	beq.n	8034152 <f_read+0x17e>
 8034148:	68fb      	ldr	r3, [r7, #12]
 803414a:	2201      	movs	r2, #1
 803414c:	755a      	strb	r2, [r3, #21]
 803414e:	2301      	movs	r3, #1
 8034150:	e09b      	b.n	803428a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8034152:	68fb      	ldr	r3, [r7, #12]
 8034154:	7d1b      	ldrb	r3, [r3, #20]
 8034156:	b25b      	sxtb	r3, r3
 8034158:	2b00      	cmp	r3, #0
 803415a:	da18      	bge.n	803418e <f_read+0x1ba>
 803415c:	68fb      	ldr	r3, [r7, #12]
 803415e:	6a1a      	ldr	r2, [r3, #32]
 8034160:	69bb      	ldr	r3, [r7, #24]
 8034162:	1ad3      	subs	r3, r2, r3
 8034164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8034166:	429a      	cmp	r2, r3
 8034168:	d911      	bls.n	803418e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 803416a:	68fb      	ldr	r3, [r7, #12]
 803416c:	6a1a      	ldr	r2, [r3, #32]
 803416e:	69bb      	ldr	r3, [r7, #24]
 8034170:	1ad3      	subs	r3, r2, r3
 8034172:	697a      	ldr	r2, [r7, #20]
 8034174:	8992      	ldrh	r2, [r2, #12]
 8034176:	fb02 f303 	mul.w	r3, r2, r3
 803417a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803417c:	18d0      	adds	r0, r2, r3
 803417e:	68fb      	ldr	r3, [r7, #12]
 8034180:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8034184:	697b      	ldr	r3, [r7, #20]
 8034186:	899b      	ldrh	r3, [r3, #12]
 8034188:	461a      	mov	r2, r3
 803418a:	f7fd fc59 	bl	8031a40 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 803418e:	697b      	ldr	r3, [r7, #20]
 8034190:	899b      	ldrh	r3, [r3, #12]
 8034192:	461a      	mov	r2, r3
 8034194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034196:	fb02 f303 	mul.w	r3, r2, r3
 803419a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 803419c:	e05c      	b.n	8034258 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 803419e:	68fb      	ldr	r3, [r7, #12]
 80341a0:	6a1b      	ldr	r3, [r3, #32]
 80341a2:	69ba      	ldr	r2, [r7, #24]
 80341a4:	429a      	cmp	r2, r3
 80341a6:	d02e      	beq.n	8034206 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80341a8:	68fb      	ldr	r3, [r7, #12]
 80341aa:	7d1b      	ldrb	r3, [r3, #20]
 80341ac:	b25b      	sxtb	r3, r3
 80341ae:	2b00      	cmp	r3, #0
 80341b0:	da18      	bge.n	80341e4 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80341b2:	697b      	ldr	r3, [r7, #20]
 80341b4:	7858      	ldrb	r0, [r3, #1]
 80341b6:	68fb      	ldr	r3, [r7, #12]
 80341b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80341bc:	68fb      	ldr	r3, [r7, #12]
 80341be:	6a1a      	ldr	r2, [r3, #32]
 80341c0:	2301      	movs	r3, #1
 80341c2:	f7fd fb7d 	bl	80318c0 <disk_write>
 80341c6:	4603      	mov	r3, r0
 80341c8:	2b00      	cmp	r3, #0
 80341ca:	d004      	beq.n	80341d6 <f_read+0x202>
 80341cc:	68fb      	ldr	r3, [r7, #12]
 80341ce:	2201      	movs	r2, #1
 80341d0:	755a      	strb	r2, [r3, #21]
 80341d2:	2301      	movs	r3, #1
 80341d4:	e059      	b.n	803428a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80341d6:	68fb      	ldr	r3, [r7, #12]
 80341d8:	7d1b      	ldrb	r3, [r3, #20]
 80341da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80341de:	b2da      	uxtb	r2, r3
 80341e0:	68fb      	ldr	r3, [r7, #12]
 80341e2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80341e4:	697b      	ldr	r3, [r7, #20]
 80341e6:	7858      	ldrb	r0, [r3, #1]
 80341e8:	68fb      	ldr	r3, [r7, #12]
 80341ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80341ee:	2301      	movs	r3, #1
 80341f0:	69ba      	ldr	r2, [r7, #24]
 80341f2:	f7fd fb45 	bl	8031880 <disk_read>
 80341f6:	4603      	mov	r3, r0
 80341f8:	2b00      	cmp	r3, #0
 80341fa:	d004      	beq.n	8034206 <f_read+0x232>
 80341fc:	68fb      	ldr	r3, [r7, #12]
 80341fe:	2201      	movs	r2, #1
 8034200:	755a      	strb	r2, [r3, #21]
 8034202:	2301      	movs	r3, #1
 8034204:	e041      	b.n	803428a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8034206:	68fb      	ldr	r3, [r7, #12]
 8034208:	69ba      	ldr	r2, [r7, #24]
 803420a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 803420c:	697b      	ldr	r3, [r7, #20]
 803420e:	899b      	ldrh	r3, [r3, #12]
 8034210:	4618      	mov	r0, r3
 8034212:	68fb      	ldr	r3, [r7, #12]
 8034214:	699b      	ldr	r3, [r3, #24]
 8034216:	697a      	ldr	r2, [r7, #20]
 8034218:	8992      	ldrh	r2, [r2, #12]
 803421a:	fbb3 f1f2 	udiv	r1, r3, r2
 803421e:	fb01 f202 	mul.w	r2, r1, r2
 8034222:	1a9b      	subs	r3, r3, r2
 8034224:	1ac3      	subs	r3, r0, r3
 8034226:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8034228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803422a:	687b      	ldr	r3, [r7, #4]
 803422c:	429a      	cmp	r2, r3
 803422e:	d901      	bls.n	8034234 <f_read+0x260>
 8034230:	687b      	ldr	r3, [r7, #4]
 8034232:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8034234:	68fb      	ldr	r3, [r7, #12]
 8034236:	f103 0130 	add.w	r1, r3, #48	; 0x30
 803423a:	68fb      	ldr	r3, [r7, #12]
 803423c:	699b      	ldr	r3, [r3, #24]
 803423e:	697a      	ldr	r2, [r7, #20]
 8034240:	8992      	ldrh	r2, [r2, #12]
 8034242:	fbb3 f0f2 	udiv	r0, r3, r2
 8034246:	fb00 f202 	mul.w	r2, r0, r2
 803424a:	1a9b      	subs	r3, r3, r2
 803424c:	440b      	add	r3, r1
 803424e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8034250:	4619      	mov	r1, r3
 8034252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8034254:	f7fd fbf4 	bl	8031a40 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8034258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803425c:	4413      	add	r3, r2
 803425e:	627b      	str	r3, [r7, #36]	; 0x24
 8034260:	68fb      	ldr	r3, [r7, #12]
 8034262:	699a      	ldr	r2, [r3, #24]
 8034264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034266:	441a      	add	r2, r3
 8034268:	68fb      	ldr	r3, [r7, #12]
 803426a:	619a      	str	r2, [r3, #24]
 803426c:	683b      	ldr	r3, [r7, #0]
 803426e:	681a      	ldr	r2, [r3, #0]
 8034270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034272:	441a      	add	r2, r3
 8034274:	683b      	ldr	r3, [r7, #0]
 8034276:	601a      	str	r2, [r3, #0]
 8034278:	687a      	ldr	r2, [r7, #4]
 803427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803427c:	1ad3      	subs	r3, r2, r3
 803427e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8034280:	687b      	ldr	r3, [r7, #4]
 8034282:	2b00      	cmp	r3, #0
 8034284:	f47f aee1 	bne.w	803404a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8034288:	2300      	movs	r3, #0
}
 803428a:	4618      	mov	r0, r3
 803428c:	3738      	adds	r7, #56	; 0x38
 803428e:	46bd      	mov	sp, r7
 8034290:	bd80      	pop	{r7, pc}

08034292 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8034292:	b580      	push	{r7, lr}
 8034294:	b08c      	sub	sp, #48	; 0x30
 8034296:	af00      	add	r7, sp, #0
 8034298:	60f8      	str	r0, [r7, #12]
 803429a:	60b9      	str	r1, [r7, #8]
 803429c:	607a      	str	r2, [r7, #4]
 803429e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80342a0:	68bb      	ldr	r3, [r7, #8]
 80342a2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80342a4:	683b      	ldr	r3, [r7, #0]
 80342a6:	2200      	movs	r2, #0
 80342a8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80342aa:	68fb      	ldr	r3, [r7, #12]
 80342ac:	f107 0210 	add.w	r2, r7, #16
 80342b0:	4611      	mov	r1, r2
 80342b2:	4618      	mov	r0, r3
 80342b4:	f7ff fc46 	bl	8033b44 <validate>
 80342b8:	4603      	mov	r3, r0
 80342ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80342be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80342c2:	2b00      	cmp	r3, #0
 80342c4:	d107      	bne.n	80342d6 <f_write+0x44>
 80342c6:	68fb      	ldr	r3, [r7, #12]
 80342c8:	7d5b      	ldrb	r3, [r3, #21]
 80342ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80342ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80342d2:	2b00      	cmp	r3, #0
 80342d4:	d002      	beq.n	80342dc <f_write+0x4a>
 80342d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80342da:	e16a      	b.n	80345b2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80342dc:	68fb      	ldr	r3, [r7, #12]
 80342de:	7d1b      	ldrb	r3, [r3, #20]
 80342e0:	f003 0302 	and.w	r3, r3, #2
 80342e4:	2b00      	cmp	r3, #0
 80342e6:	d101      	bne.n	80342ec <f_write+0x5a>
 80342e8:	2307      	movs	r3, #7
 80342ea:	e162      	b.n	80345b2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80342ec:	68fb      	ldr	r3, [r7, #12]
 80342ee:	699a      	ldr	r2, [r3, #24]
 80342f0:	687b      	ldr	r3, [r7, #4]
 80342f2:	441a      	add	r2, r3
 80342f4:	68fb      	ldr	r3, [r7, #12]
 80342f6:	699b      	ldr	r3, [r3, #24]
 80342f8:	429a      	cmp	r2, r3
 80342fa:	f080 814c 	bcs.w	8034596 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80342fe:	68fb      	ldr	r3, [r7, #12]
 8034300:	699b      	ldr	r3, [r3, #24]
 8034302:	43db      	mvns	r3, r3
 8034304:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8034306:	e146      	b.n	8034596 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8034308:	68fb      	ldr	r3, [r7, #12]
 803430a:	699b      	ldr	r3, [r3, #24]
 803430c:	693a      	ldr	r2, [r7, #16]
 803430e:	8992      	ldrh	r2, [r2, #12]
 8034310:	fbb3 f1f2 	udiv	r1, r3, r2
 8034314:	fb01 f202 	mul.w	r2, r1, r2
 8034318:	1a9b      	subs	r3, r3, r2
 803431a:	2b00      	cmp	r3, #0
 803431c:	f040 80f1 	bne.w	8034502 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8034320:	68fb      	ldr	r3, [r7, #12]
 8034322:	699b      	ldr	r3, [r3, #24]
 8034324:	693a      	ldr	r2, [r7, #16]
 8034326:	8992      	ldrh	r2, [r2, #12]
 8034328:	fbb3 f3f2 	udiv	r3, r3, r2
 803432c:	693a      	ldr	r2, [r7, #16]
 803432e:	8952      	ldrh	r2, [r2, #10]
 8034330:	3a01      	subs	r2, #1
 8034332:	4013      	ands	r3, r2
 8034334:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8034336:	69bb      	ldr	r3, [r7, #24]
 8034338:	2b00      	cmp	r3, #0
 803433a:	d143      	bne.n	80343c4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 803433c:	68fb      	ldr	r3, [r7, #12]
 803433e:	699b      	ldr	r3, [r3, #24]
 8034340:	2b00      	cmp	r3, #0
 8034342:	d10c      	bne.n	803435e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8034344:	68fb      	ldr	r3, [r7, #12]
 8034346:	689b      	ldr	r3, [r3, #8]
 8034348:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 803434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803434c:	2b00      	cmp	r3, #0
 803434e:	d11a      	bne.n	8034386 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8034350:	68fb      	ldr	r3, [r7, #12]
 8034352:	2100      	movs	r1, #0
 8034354:	4618      	mov	r0, r3
 8034356:	f7fe f8b1 	bl	80324bc <create_chain>
 803435a:	62b8      	str	r0, [r7, #40]	; 0x28
 803435c:	e013      	b.n	8034386 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 803435e:	68fb      	ldr	r3, [r7, #12]
 8034360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8034362:	2b00      	cmp	r3, #0
 8034364:	d007      	beq.n	8034376 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8034366:	68fb      	ldr	r3, [r7, #12]
 8034368:	699b      	ldr	r3, [r3, #24]
 803436a:	4619      	mov	r1, r3
 803436c:	68f8      	ldr	r0, [r7, #12]
 803436e:	f7fe f93d 	bl	80325ec <clmt_clust>
 8034372:	62b8      	str	r0, [r7, #40]	; 0x28
 8034374:	e007      	b.n	8034386 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8034376:	68fa      	ldr	r2, [r7, #12]
 8034378:	68fb      	ldr	r3, [r7, #12]
 803437a:	69db      	ldr	r3, [r3, #28]
 803437c:	4619      	mov	r1, r3
 803437e:	4610      	mov	r0, r2
 8034380:	f7fe f89c 	bl	80324bc <create_chain>
 8034384:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8034386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034388:	2b00      	cmp	r3, #0
 803438a:	f000 8109 	beq.w	80345a0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 803438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034390:	2b01      	cmp	r3, #1
 8034392:	d104      	bne.n	803439e <f_write+0x10c>
 8034394:	68fb      	ldr	r3, [r7, #12]
 8034396:	2202      	movs	r2, #2
 8034398:	755a      	strb	r2, [r3, #21]
 803439a:	2302      	movs	r3, #2
 803439c:	e109      	b.n	80345b2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 803439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80343a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80343a4:	d104      	bne.n	80343b0 <f_write+0x11e>
 80343a6:	68fb      	ldr	r3, [r7, #12]
 80343a8:	2201      	movs	r2, #1
 80343aa:	755a      	strb	r2, [r3, #21]
 80343ac:	2301      	movs	r3, #1
 80343ae:	e100      	b.n	80345b2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80343b0:	68fb      	ldr	r3, [r7, #12]
 80343b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80343b4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80343b6:	68fb      	ldr	r3, [r7, #12]
 80343b8:	689b      	ldr	r3, [r3, #8]
 80343ba:	2b00      	cmp	r3, #0
 80343bc:	d102      	bne.n	80343c4 <f_write+0x132>
 80343be:	68fb      	ldr	r3, [r7, #12]
 80343c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80343c2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80343c4:	68fb      	ldr	r3, [r7, #12]
 80343c6:	7d1b      	ldrb	r3, [r3, #20]
 80343c8:	b25b      	sxtb	r3, r3
 80343ca:	2b00      	cmp	r3, #0
 80343cc:	da18      	bge.n	8034400 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80343ce:	693b      	ldr	r3, [r7, #16]
 80343d0:	7858      	ldrb	r0, [r3, #1]
 80343d2:	68fb      	ldr	r3, [r7, #12]
 80343d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80343d8:	68fb      	ldr	r3, [r7, #12]
 80343da:	6a1a      	ldr	r2, [r3, #32]
 80343dc:	2301      	movs	r3, #1
 80343de:	f7fd fa6f 	bl	80318c0 <disk_write>
 80343e2:	4603      	mov	r3, r0
 80343e4:	2b00      	cmp	r3, #0
 80343e6:	d004      	beq.n	80343f2 <f_write+0x160>
 80343e8:	68fb      	ldr	r3, [r7, #12]
 80343ea:	2201      	movs	r2, #1
 80343ec:	755a      	strb	r2, [r3, #21]
 80343ee:	2301      	movs	r3, #1
 80343f0:	e0df      	b.n	80345b2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80343f2:	68fb      	ldr	r3, [r7, #12]
 80343f4:	7d1b      	ldrb	r3, [r3, #20]
 80343f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80343fa:	b2da      	uxtb	r2, r3
 80343fc:	68fb      	ldr	r3, [r7, #12]
 80343fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8034400:	693a      	ldr	r2, [r7, #16]
 8034402:	68fb      	ldr	r3, [r7, #12]
 8034404:	69db      	ldr	r3, [r3, #28]
 8034406:	4619      	mov	r1, r3
 8034408:	4610      	mov	r0, r2
 803440a:	f7fd fde5 	bl	8031fd8 <clust2sect>
 803440e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8034410:	697b      	ldr	r3, [r7, #20]
 8034412:	2b00      	cmp	r3, #0
 8034414:	d104      	bne.n	8034420 <f_write+0x18e>
 8034416:	68fb      	ldr	r3, [r7, #12]
 8034418:	2202      	movs	r2, #2
 803441a:	755a      	strb	r2, [r3, #21]
 803441c:	2302      	movs	r3, #2
 803441e:	e0c8      	b.n	80345b2 <f_write+0x320>
			sect += csect;
 8034420:	697a      	ldr	r2, [r7, #20]
 8034422:	69bb      	ldr	r3, [r7, #24]
 8034424:	4413      	add	r3, r2
 8034426:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8034428:	693b      	ldr	r3, [r7, #16]
 803442a:	899b      	ldrh	r3, [r3, #12]
 803442c:	461a      	mov	r2, r3
 803442e:	687b      	ldr	r3, [r7, #4]
 8034430:	fbb3 f3f2 	udiv	r3, r3, r2
 8034434:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8034436:	6a3b      	ldr	r3, [r7, #32]
 8034438:	2b00      	cmp	r3, #0
 803443a:	d043      	beq.n	80344c4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 803443c:	69ba      	ldr	r2, [r7, #24]
 803443e:	6a3b      	ldr	r3, [r7, #32]
 8034440:	4413      	add	r3, r2
 8034442:	693a      	ldr	r2, [r7, #16]
 8034444:	8952      	ldrh	r2, [r2, #10]
 8034446:	4293      	cmp	r3, r2
 8034448:	d905      	bls.n	8034456 <f_write+0x1c4>
					cc = fs->csize - csect;
 803444a:	693b      	ldr	r3, [r7, #16]
 803444c:	895b      	ldrh	r3, [r3, #10]
 803444e:	461a      	mov	r2, r3
 8034450:	69bb      	ldr	r3, [r7, #24]
 8034452:	1ad3      	subs	r3, r2, r3
 8034454:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8034456:	693b      	ldr	r3, [r7, #16]
 8034458:	7858      	ldrb	r0, [r3, #1]
 803445a:	6a3b      	ldr	r3, [r7, #32]
 803445c:	697a      	ldr	r2, [r7, #20]
 803445e:	69f9      	ldr	r1, [r7, #28]
 8034460:	f7fd fa2e 	bl	80318c0 <disk_write>
 8034464:	4603      	mov	r3, r0
 8034466:	2b00      	cmp	r3, #0
 8034468:	d004      	beq.n	8034474 <f_write+0x1e2>
 803446a:	68fb      	ldr	r3, [r7, #12]
 803446c:	2201      	movs	r2, #1
 803446e:	755a      	strb	r2, [r3, #21]
 8034470:	2301      	movs	r3, #1
 8034472:	e09e      	b.n	80345b2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8034474:	68fb      	ldr	r3, [r7, #12]
 8034476:	6a1a      	ldr	r2, [r3, #32]
 8034478:	697b      	ldr	r3, [r7, #20]
 803447a:	1ad3      	subs	r3, r2, r3
 803447c:	6a3a      	ldr	r2, [r7, #32]
 803447e:	429a      	cmp	r2, r3
 8034480:	d918      	bls.n	80344b4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8034482:	68fb      	ldr	r3, [r7, #12]
 8034484:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8034488:	68fb      	ldr	r3, [r7, #12]
 803448a:	6a1a      	ldr	r2, [r3, #32]
 803448c:	697b      	ldr	r3, [r7, #20]
 803448e:	1ad3      	subs	r3, r2, r3
 8034490:	693a      	ldr	r2, [r7, #16]
 8034492:	8992      	ldrh	r2, [r2, #12]
 8034494:	fb02 f303 	mul.w	r3, r2, r3
 8034498:	69fa      	ldr	r2, [r7, #28]
 803449a:	18d1      	adds	r1, r2, r3
 803449c:	693b      	ldr	r3, [r7, #16]
 803449e:	899b      	ldrh	r3, [r3, #12]
 80344a0:	461a      	mov	r2, r3
 80344a2:	f7fd facd 	bl	8031a40 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80344a6:	68fb      	ldr	r3, [r7, #12]
 80344a8:	7d1b      	ldrb	r3, [r3, #20]
 80344aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80344ae:	b2da      	uxtb	r2, r3
 80344b0:	68fb      	ldr	r3, [r7, #12]
 80344b2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80344b4:	693b      	ldr	r3, [r7, #16]
 80344b6:	899b      	ldrh	r3, [r3, #12]
 80344b8:	461a      	mov	r2, r3
 80344ba:	6a3b      	ldr	r3, [r7, #32]
 80344bc:	fb02 f303 	mul.w	r3, r2, r3
 80344c0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80344c2:	e04b      	b.n	803455c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80344c4:	68fb      	ldr	r3, [r7, #12]
 80344c6:	6a1b      	ldr	r3, [r3, #32]
 80344c8:	697a      	ldr	r2, [r7, #20]
 80344ca:	429a      	cmp	r2, r3
 80344cc:	d016      	beq.n	80344fc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80344ce:	68fb      	ldr	r3, [r7, #12]
 80344d0:	699a      	ldr	r2, [r3, #24]
 80344d2:	68fb      	ldr	r3, [r7, #12]
 80344d4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80344d6:	429a      	cmp	r2, r3
 80344d8:	d210      	bcs.n	80344fc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80344da:	693b      	ldr	r3, [r7, #16]
 80344dc:	7858      	ldrb	r0, [r3, #1]
 80344de:	68fb      	ldr	r3, [r7, #12]
 80344e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80344e4:	2301      	movs	r3, #1
 80344e6:	697a      	ldr	r2, [r7, #20]
 80344e8:	f7fd f9ca 	bl	8031880 <disk_read>
 80344ec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80344ee:	2b00      	cmp	r3, #0
 80344f0:	d004      	beq.n	80344fc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80344f2:	68fb      	ldr	r3, [r7, #12]
 80344f4:	2201      	movs	r2, #1
 80344f6:	755a      	strb	r2, [r3, #21]
 80344f8:	2301      	movs	r3, #1
 80344fa:	e05a      	b.n	80345b2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80344fc:	68fb      	ldr	r3, [r7, #12]
 80344fe:	697a      	ldr	r2, [r7, #20]
 8034500:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8034502:	693b      	ldr	r3, [r7, #16]
 8034504:	899b      	ldrh	r3, [r3, #12]
 8034506:	4618      	mov	r0, r3
 8034508:	68fb      	ldr	r3, [r7, #12]
 803450a:	699b      	ldr	r3, [r3, #24]
 803450c:	693a      	ldr	r2, [r7, #16]
 803450e:	8992      	ldrh	r2, [r2, #12]
 8034510:	fbb3 f1f2 	udiv	r1, r3, r2
 8034514:	fb01 f202 	mul.w	r2, r1, r2
 8034518:	1a9b      	subs	r3, r3, r2
 803451a:	1ac3      	subs	r3, r0, r3
 803451c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 803451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034520:	687b      	ldr	r3, [r7, #4]
 8034522:	429a      	cmp	r2, r3
 8034524:	d901      	bls.n	803452a <f_write+0x298>
 8034526:	687b      	ldr	r3, [r7, #4]
 8034528:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 803452a:	68fb      	ldr	r3, [r7, #12]
 803452c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8034530:	68fb      	ldr	r3, [r7, #12]
 8034532:	699b      	ldr	r3, [r3, #24]
 8034534:	693a      	ldr	r2, [r7, #16]
 8034536:	8992      	ldrh	r2, [r2, #12]
 8034538:	fbb3 f0f2 	udiv	r0, r3, r2
 803453c:	fb00 f202 	mul.w	r2, r0, r2
 8034540:	1a9b      	subs	r3, r3, r2
 8034542:	440b      	add	r3, r1
 8034544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8034546:	69f9      	ldr	r1, [r7, #28]
 8034548:	4618      	mov	r0, r3
 803454a:	f7fd fa79 	bl	8031a40 <mem_cpy>
		fp->flag |= FA_DIRTY;
 803454e:	68fb      	ldr	r3, [r7, #12]
 8034550:	7d1b      	ldrb	r3, [r3, #20]
 8034552:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8034556:	b2da      	uxtb	r2, r3
 8034558:	68fb      	ldr	r3, [r7, #12]
 803455a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 803455c:	69fa      	ldr	r2, [r7, #28]
 803455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034560:	4413      	add	r3, r2
 8034562:	61fb      	str	r3, [r7, #28]
 8034564:	68fb      	ldr	r3, [r7, #12]
 8034566:	699a      	ldr	r2, [r3, #24]
 8034568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803456a:	441a      	add	r2, r3
 803456c:	68fb      	ldr	r3, [r7, #12]
 803456e:	619a      	str	r2, [r3, #24]
 8034570:	68fb      	ldr	r3, [r7, #12]
 8034572:	68da      	ldr	r2, [r3, #12]
 8034574:	68fb      	ldr	r3, [r7, #12]
 8034576:	699b      	ldr	r3, [r3, #24]
 8034578:	429a      	cmp	r2, r3
 803457a:	bf38      	it	cc
 803457c:	461a      	movcc	r2, r3
 803457e:	68fb      	ldr	r3, [r7, #12]
 8034580:	60da      	str	r2, [r3, #12]
 8034582:	683b      	ldr	r3, [r7, #0]
 8034584:	681a      	ldr	r2, [r3, #0]
 8034586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034588:	441a      	add	r2, r3
 803458a:	683b      	ldr	r3, [r7, #0]
 803458c:	601a      	str	r2, [r3, #0]
 803458e:	687a      	ldr	r2, [r7, #4]
 8034590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8034592:	1ad3      	subs	r3, r2, r3
 8034594:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8034596:	687b      	ldr	r3, [r7, #4]
 8034598:	2b00      	cmp	r3, #0
 803459a:	f47f aeb5 	bne.w	8034308 <f_write+0x76>
 803459e:	e000      	b.n	80345a2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80345a0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80345a2:	68fb      	ldr	r3, [r7, #12]
 80345a4:	7d1b      	ldrb	r3, [r3, #20]
 80345a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80345aa:	b2da      	uxtb	r2, r3
 80345ac:	68fb      	ldr	r3, [r7, #12]
 80345ae:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80345b0:	2300      	movs	r3, #0
}
 80345b2:	4618      	mov	r0, r3
 80345b4:	3730      	adds	r7, #48	; 0x30
 80345b6:	46bd      	mov	sp, r7
 80345b8:	bd80      	pop	{r7, pc}

080345ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80345ba:	b580      	push	{r7, lr}
 80345bc:	b086      	sub	sp, #24
 80345be:	af00      	add	r7, sp, #0
 80345c0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80345c2:	687b      	ldr	r3, [r7, #4]
 80345c4:	f107 0208 	add.w	r2, r7, #8
 80345c8:	4611      	mov	r1, r2
 80345ca:	4618      	mov	r0, r3
 80345cc:	f7ff faba 	bl	8033b44 <validate>
 80345d0:	4603      	mov	r3, r0
 80345d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80345d4:	7dfb      	ldrb	r3, [r7, #23]
 80345d6:	2b00      	cmp	r3, #0
 80345d8:	d168      	bne.n	80346ac <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80345da:	687b      	ldr	r3, [r7, #4]
 80345dc:	7d1b      	ldrb	r3, [r3, #20]
 80345de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80345e2:	2b00      	cmp	r3, #0
 80345e4:	d062      	beq.n	80346ac <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80345e6:	687b      	ldr	r3, [r7, #4]
 80345e8:	7d1b      	ldrb	r3, [r3, #20]
 80345ea:	b25b      	sxtb	r3, r3
 80345ec:	2b00      	cmp	r3, #0
 80345ee:	da15      	bge.n	803461c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80345f0:	68bb      	ldr	r3, [r7, #8]
 80345f2:	7858      	ldrb	r0, [r3, #1]
 80345f4:	687b      	ldr	r3, [r7, #4]
 80345f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80345fa:	687b      	ldr	r3, [r7, #4]
 80345fc:	6a1a      	ldr	r2, [r3, #32]
 80345fe:	2301      	movs	r3, #1
 8034600:	f7fd f95e 	bl	80318c0 <disk_write>
 8034604:	4603      	mov	r3, r0
 8034606:	2b00      	cmp	r3, #0
 8034608:	d001      	beq.n	803460e <f_sync+0x54>
 803460a:	2301      	movs	r3, #1
 803460c:	e04f      	b.n	80346ae <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 803460e:	687b      	ldr	r3, [r7, #4]
 8034610:	7d1b      	ldrb	r3, [r3, #20]
 8034612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034616:	b2da      	uxtb	r2, r3
 8034618:	687b      	ldr	r3, [r7, #4]
 803461a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 803461c:	f7fd f890 	bl	8031740 <get_fattime>
 8034620:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8034622:	68ba      	ldr	r2, [r7, #8]
 8034624:	687b      	ldr	r3, [r7, #4]
 8034626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8034628:	4619      	mov	r1, r3
 803462a:	4610      	mov	r0, r2
 803462c:	f7fd fc36 	bl	8031e9c <move_window>
 8034630:	4603      	mov	r3, r0
 8034632:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8034634:	7dfb      	ldrb	r3, [r7, #23]
 8034636:	2b00      	cmp	r3, #0
 8034638:	d138      	bne.n	80346ac <f_sync+0xf2>
					dir = fp->dir_ptr;
 803463a:	687b      	ldr	r3, [r7, #4]
 803463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803463e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8034640:	68fb      	ldr	r3, [r7, #12]
 8034642:	330b      	adds	r3, #11
 8034644:	781a      	ldrb	r2, [r3, #0]
 8034646:	68fb      	ldr	r3, [r7, #12]
 8034648:	330b      	adds	r3, #11
 803464a:	f042 0220 	orr.w	r2, r2, #32
 803464e:	b2d2      	uxtb	r2, r2
 8034650:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8034652:	687b      	ldr	r3, [r7, #4]
 8034654:	6818      	ldr	r0, [r3, #0]
 8034656:	687b      	ldr	r3, [r7, #4]
 8034658:	689b      	ldr	r3, [r3, #8]
 803465a:	461a      	mov	r2, r3
 803465c:	68f9      	ldr	r1, [r7, #12]
 803465e:	f7fe f9c2 	bl	80329e6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8034662:	68fb      	ldr	r3, [r7, #12]
 8034664:	f103 021c 	add.w	r2, r3, #28
 8034668:	687b      	ldr	r3, [r7, #4]
 803466a:	68db      	ldr	r3, [r3, #12]
 803466c:	4619      	mov	r1, r3
 803466e:	4610      	mov	r0, r2
 8034670:	f7fd f9ba 	bl	80319e8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8034674:	68fb      	ldr	r3, [r7, #12]
 8034676:	3316      	adds	r3, #22
 8034678:	6939      	ldr	r1, [r7, #16]
 803467a:	4618      	mov	r0, r3
 803467c:	f7fd f9b4 	bl	80319e8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8034680:	68fb      	ldr	r3, [r7, #12]
 8034682:	3312      	adds	r3, #18
 8034684:	2100      	movs	r1, #0
 8034686:	4618      	mov	r0, r3
 8034688:	f7fd f993 	bl	80319b2 <st_word>
					fs->wflag = 1;
 803468c:	68bb      	ldr	r3, [r7, #8]
 803468e:	2201      	movs	r2, #1
 8034690:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8034692:	68bb      	ldr	r3, [r7, #8]
 8034694:	4618      	mov	r0, r3
 8034696:	f7fd fc2f 	bl	8031ef8 <sync_fs>
 803469a:	4603      	mov	r3, r0
 803469c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 803469e:	687b      	ldr	r3, [r7, #4]
 80346a0:	7d1b      	ldrb	r3, [r3, #20]
 80346a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80346a6:	b2da      	uxtb	r2, r3
 80346a8:	687b      	ldr	r3, [r7, #4]
 80346aa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80346ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80346ae:	4618      	mov	r0, r3
 80346b0:	3718      	adds	r7, #24
 80346b2:	46bd      	mov	sp, r7
 80346b4:	bd80      	pop	{r7, pc}

080346b6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80346b6:	b580      	push	{r7, lr}
 80346b8:	b084      	sub	sp, #16
 80346ba:	af00      	add	r7, sp, #0
 80346bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80346be:	6878      	ldr	r0, [r7, #4]
 80346c0:	f7ff ff7b 	bl	80345ba <f_sync>
 80346c4:	4603      	mov	r3, r0
 80346c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80346c8:	7bfb      	ldrb	r3, [r7, #15]
 80346ca:	2b00      	cmp	r3, #0
 80346cc:	d118      	bne.n	8034700 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80346ce:	687b      	ldr	r3, [r7, #4]
 80346d0:	f107 0208 	add.w	r2, r7, #8
 80346d4:	4611      	mov	r1, r2
 80346d6:	4618      	mov	r0, r3
 80346d8:	f7ff fa34 	bl	8033b44 <validate>
 80346dc:	4603      	mov	r3, r0
 80346de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80346e0:	7bfb      	ldrb	r3, [r7, #15]
 80346e2:	2b00      	cmp	r3, #0
 80346e4:	d10c      	bne.n	8034700 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80346e6:	687b      	ldr	r3, [r7, #4]
 80346e8:	691b      	ldr	r3, [r3, #16]
 80346ea:	4618      	mov	r0, r3
 80346ec:	f7fd fb32 	bl	8031d54 <dec_lock>
 80346f0:	4603      	mov	r3, r0
 80346f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80346f4:	7bfb      	ldrb	r3, [r7, #15]
 80346f6:	2b00      	cmp	r3, #0
 80346f8:	d102      	bne.n	8034700 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80346fa:	687b      	ldr	r3, [r7, #4]
 80346fc:	2200      	movs	r2, #0
 80346fe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8034700:	7bfb      	ldrb	r3, [r7, #15]
}
 8034702:	4618      	mov	r0, r3
 8034704:	3710      	adds	r7, #16
 8034706:	46bd      	mov	sp, r7
 8034708:	bd80      	pop	{r7, pc}

0803470a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 803470a:	b580      	push	{r7, lr}
 803470c:	b092      	sub	sp, #72	; 0x48
 803470e:	af00      	add	r7, sp, #0
 8034710:	60f8      	str	r0, [r7, #12]
 8034712:	60b9      	str	r1, [r7, #8]
 8034714:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8034716:	f107 0128 	add.w	r1, r7, #40	; 0x28
 803471a:	f107 030c 	add.w	r3, r7, #12
 803471e:	2200      	movs	r2, #0
 8034720:	4618      	mov	r0, r3
 8034722:	f7fe ff89 	bl	8033638 <find_volume>
 8034726:	4603      	mov	r3, r0
 8034728:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 803472c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8034730:	2b00      	cmp	r3, #0
 8034732:	f040 8099 	bne.w	8034868 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8034736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8034738:	687b      	ldr	r3, [r7, #4]
 803473a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 803473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803473e:	699a      	ldr	r2, [r3, #24]
 8034740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034742:	69db      	ldr	r3, [r3, #28]
 8034744:	3b02      	subs	r3, #2
 8034746:	429a      	cmp	r2, r3
 8034748:	d804      	bhi.n	8034754 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 803474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803474c:	699a      	ldr	r2, [r3, #24]
 803474e:	68bb      	ldr	r3, [r7, #8]
 8034750:	601a      	str	r2, [r3, #0]
 8034752:	e089      	b.n	8034868 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8034754:	2300      	movs	r3, #0
 8034756:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8034758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803475a:	781b      	ldrb	r3, [r3, #0]
 803475c:	2b01      	cmp	r3, #1
 803475e:	d128      	bne.n	80347b2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8034760:	2302      	movs	r3, #2
 8034762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8034764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034766:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8034768:	f107 0314 	add.w	r3, r7, #20
 803476c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 803476e:	4618      	mov	r0, r3
 8034770:	f7fd fc51 	bl	8032016 <get_fat>
 8034774:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8034776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034778:	f1b3 3fff 	cmp.w	r3, #4294967295
 803477c:	d103      	bne.n	8034786 <f_getfree+0x7c>
 803477e:	2301      	movs	r3, #1
 8034780:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8034784:	e063      	b.n	803484e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8034786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034788:	2b01      	cmp	r3, #1
 803478a:	d103      	bne.n	8034794 <f_getfree+0x8a>
 803478c:	2302      	movs	r3, #2
 803478e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8034792:	e05c      	b.n	803484e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8034794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034796:	2b00      	cmp	r3, #0
 8034798:	d102      	bne.n	80347a0 <f_getfree+0x96>
 803479a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803479c:	3301      	adds	r3, #1
 803479e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80347a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80347a2:	3301      	adds	r3, #1
 80347a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80347a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80347a8:	69db      	ldr	r3, [r3, #28]
 80347aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80347ac:	429a      	cmp	r2, r3
 80347ae:	d3db      	bcc.n	8034768 <f_getfree+0x5e>
 80347b0:	e04d      	b.n	803484e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80347b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80347b4:	69db      	ldr	r3, [r3, #28]
 80347b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80347b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80347ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80347bc:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80347be:	2300      	movs	r3, #0
 80347c0:	637b      	str	r3, [r7, #52]	; 0x34
 80347c2:	2300      	movs	r3, #0
 80347c4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80347c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80347c8:	2b00      	cmp	r3, #0
 80347ca:	d113      	bne.n	80347f4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80347cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80347ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80347d0:	1c5a      	adds	r2, r3, #1
 80347d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80347d4:	4619      	mov	r1, r3
 80347d6:	f7fd fb61 	bl	8031e9c <move_window>
 80347da:	4603      	mov	r3, r0
 80347dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80347e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80347e4:	2b00      	cmp	r3, #0
 80347e6:	d131      	bne.n	803484c <f_getfree+0x142>
							p = fs->win;
 80347e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80347ea:	3338      	adds	r3, #56	; 0x38
 80347ec:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80347ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80347f0:	899b      	ldrh	r3, [r3, #12]
 80347f2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80347f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80347f6:	781b      	ldrb	r3, [r3, #0]
 80347f8:	2b02      	cmp	r3, #2
 80347fa:	d10f      	bne.n	803481c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80347fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80347fe:	f7fd f89d 	bl	803193c <ld_word>
 8034802:	4603      	mov	r3, r0
 8034804:	2b00      	cmp	r3, #0
 8034806:	d102      	bne.n	803480e <f_getfree+0x104>
 8034808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803480a:	3301      	adds	r3, #1
 803480c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 803480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034810:	3302      	adds	r3, #2
 8034812:	633b      	str	r3, [r7, #48]	; 0x30
 8034814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034816:	3b02      	subs	r3, #2
 8034818:	637b      	str	r3, [r7, #52]	; 0x34
 803481a:	e010      	b.n	803483e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 803481c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 803481e:	f7fd f8a5 	bl	803196c <ld_dword>
 8034822:	4603      	mov	r3, r0
 8034824:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8034828:	2b00      	cmp	r3, #0
 803482a:	d102      	bne.n	8034832 <f_getfree+0x128>
 803482c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803482e:	3301      	adds	r3, #1
 8034830:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8034832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034834:	3304      	adds	r3, #4
 8034836:	633b      	str	r3, [r7, #48]	; 0x30
 8034838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803483a:	3b04      	subs	r3, #4
 803483c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 803483e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034840:	3b01      	subs	r3, #1
 8034842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8034844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034846:	2b00      	cmp	r3, #0
 8034848:	d1bd      	bne.n	80347c6 <f_getfree+0xbc>
 803484a:	e000      	b.n	803484e <f_getfree+0x144>
							if (res != FR_OK) break;
 803484c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 803484e:	68bb      	ldr	r3, [r7, #8]
 8034850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8034852:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8034854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8034858:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 803485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803485c:	791a      	ldrb	r2, [r3, #4]
 803485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8034860:	f042 0201 	orr.w	r2, r2, #1
 8034864:	b2d2      	uxtb	r2, r2
 8034866:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8034868:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 803486c:	4618      	mov	r0, r3
 803486e:	3748      	adds	r7, #72	; 0x48
 8034870:	46bd      	mov	sp, r7
 8034872:	bd80      	pop	{r7, pc}

08034874 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8034874:	b480      	push	{r7}
 8034876:	b087      	sub	sp, #28
 8034878:	af00      	add	r7, sp, #0
 803487a:	60f8      	str	r0, [r7, #12]
 803487c:	60b9      	str	r1, [r7, #8]
 803487e:	4613      	mov	r3, r2
 8034880:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8034882:	2301      	movs	r3, #1
 8034884:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8034886:	2300      	movs	r3, #0
 8034888:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 803488a:	4b1f      	ldr	r3, [pc, #124]	; (8034908 <FATFS_LinkDriverEx+0x94>)
 803488c:	7a5b      	ldrb	r3, [r3, #9]
 803488e:	b2db      	uxtb	r3, r3
 8034890:	2b00      	cmp	r3, #0
 8034892:	d131      	bne.n	80348f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8034894:	4b1c      	ldr	r3, [pc, #112]	; (8034908 <FATFS_LinkDriverEx+0x94>)
 8034896:	7a5b      	ldrb	r3, [r3, #9]
 8034898:	b2db      	uxtb	r3, r3
 803489a:	461a      	mov	r2, r3
 803489c:	4b1a      	ldr	r3, [pc, #104]	; (8034908 <FATFS_LinkDriverEx+0x94>)
 803489e:	2100      	movs	r1, #0
 80348a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80348a2:	4b19      	ldr	r3, [pc, #100]	; (8034908 <FATFS_LinkDriverEx+0x94>)
 80348a4:	7a5b      	ldrb	r3, [r3, #9]
 80348a6:	b2db      	uxtb	r3, r3
 80348a8:	4a17      	ldr	r2, [pc, #92]	; (8034908 <FATFS_LinkDriverEx+0x94>)
 80348aa:	009b      	lsls	r3, r3, #2
 80348ac:	4413      	add	r3, r2
 80348ae:	68fa      	ldr	r2, [r7, #12]
 80348b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80348b2:	4b15      	ldr	r3, [pc, #84]	; (8034908 <FATFS_LinkDriverEx+0x94>)
 80348b4:	7a5b      	ldrb	r3, [r3, #9]
 80348b6:	b2db      	uxtb	r3, r3
 80348b8:	461a      	mov	r2, r3
 80348ba:	4b13      	ldr	r3, [pc, #76]	; (8034908 <FATFS_LinkDriverEx+0x94>)
 80348bc:	4413      	add	r3, r2
 80348be:	79fa      	ldrb	r2, [r7, #7]
 80348c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80348c2:	4b11      	ldr	r3, [pc, #68]	; (8034908 <FATFS_LinkDriverEx+0x94>)
 80348c4:	7a5b      	ldrb	r3, [r3, #9]
 80348c6:	b2db      	uxtb	r3, r3
 80348c8:	1c5a      	adds	r2, r3, #1
 80348ca:	b2d1      	uxtb	r1, r2
 80348cc:	4a0e      	ldr	r2, [pc, #56]	; (8034908 <FATFS_LinkDriverEx+0x94>)
 80348ce:	7251      	strb	r1, [r2, #9]
 80348d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80348d2:	7dbb      	ldrb	r3, [r7, #22]
 80348d4:	3330      	adds	r3, #48	; 0x30
 80348d6:	b2da      	uxtb	r2, r3
 80348d8:	68bb      	ldr	r3, [r7, #8]
 80348da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80348dc:	68bb      	ldr	r3, [r7, #8]
 80348de:	3301      	adds	r3, #1
 80348e0:	223a      	movs	r2, #58	; 0x3a
 80348e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80348e4:	68bb      	ldr	r3, [r7, #8]
 80348e6:	3302      	adds	r3, #2
 80348e8:	222f      	movs	r2, #47	; 0x2f
 80348ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80348ec:	68bb      	ldr	r3, [r7, #8]
 80348ee:	3303      	adds	r3, #3
 80348f0:	2200      	movs	r2, #0
 80348f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80348f4:	2300      	movs	r3, #0
 80348f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80348f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80348fa:	4618      	mov	r0, r3
 80348fc:	371c      	adds	r7, #28
 80348fe:	46bd      	mov	sp, r7
 8034900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034904:	4770      	bx	lr
 8034906:	bf00      	nop
 8034908:	2000629c 	.word	0x2000629c

0803490c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 803490c:	b580      	push	{r7, lr}
 803490e:	b082      	sub	sp, #8
 8034910:	af00      	add	r7, sp, #0
 8034912:	6078      	str	r0, [r7, #4]
 8034914:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8034916:	2200      	movs	r2, #0
 8034918:	6839      	ldr	r1, [r7, #0]
 803491a:	6878      	ldr	r0, [r7, #4]
 803491c:	f7ff ffaa 	bl	8034874 <FATFS_LinkDriverEx>
 8034920:	4603      	mov	r3, r0
}
 8034922:	4618      	mov	r0, r3
 8034924:	3708      	adds	r7, #8
 8034926:	46bd      	mov	sp, r7
 8034928:	bd80      	pop	{r7, pc}
	...

0803492c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 803492c:	b480      	push	{r7}
 803492e:	b085      	sub	sp, #20
 8034930:	af00      	add	r7, sp, #0
 8034932:	4603      	mov	r3, r0
 8034934:	6039      	str	r1, [r7, #0]
 8034936:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8034938:	88fb      	ldrh	r3, [r7, #6]
 803493a:	2b7f      	cmp	r3, #127	; 0x7f
 803493c:	d802      	bhi.n	8034944 <ff_convert+0x18>
		c = chr;
 803493e:	88fb      	ldrh	r3, [r7, #6]
 8034940:	81fb      	strh	r3, [r7, #14]
 8034942:	e025      	b.n	8034990 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8034944:	683b      	ldr	r3, [r7, #0]
 8034946:	2b00      	cmp	r3, #0
 8034948:	d00b      	beq.n	8034962 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 803494a:	88fb      	ldrh	r3, [r7, #6]
 803494c:	2bff      	cmp	r3, #255	; 0xff
 803494e:	d805      	bhi.n	803495c <ff_convert+0x30>
 8034950:	88fb      	ldrh	r3, [r7, #6]
 8034952:	3b80      	subs	r3, #128	; 0x80
 8034954:	4a12      	ldr	r2, [pc, #72]	; (80349a0 <ff_convert+0x74>)
 8034956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 803495a:	e000      	b.n	803495e <ff_convert+0x32>
 803495c:	2300      	movs	r3, #0
 803495e:	81fb      	strh	r3, [r7, #14]
 8034960:	e016      	b.n	8034990 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8034962:	2300      	movs	r3, #0
 8034964:	81fb      	strh	r3, [r7, #14]
 8034966:	e009      	b.n	803497c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8034968:	89fb      	ldrh	r3, [r7, #14]
 803496a:	4a0d      	ldr	r2, [pc, #52]	; (80349a0 <ff_convert+0x74>)
 803496c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8034970:	88fa      	ldrh	r2, [r7, #6]
 8034972:	429a      	cmp	r2, r3
 8034974:	d006      	beq.n	8034984 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8034976:	89fb      	ldrh	r3, [r7, #14]
 8034978:	3301      	adds	r3, #1
 803497a:	81fb      	strh	r3, [r7, #14]
 803497c:	89fb      	ldrh	r3, [r7, #14]
 803497e:	2b7f      	cmp	r3, #127	; 0x7f
 8034980:	d9f2      	bls.n	8034968 <ff_convert+0x3c>
 8034982:	e000      	b.n	8034986 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8034984:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8034986:	89fb      	ldrh	r3, [r7, #14]
 8034988:	3380      	adds	r3, #128	; 0x80
 803498a:	b29b      	uxth	r3, r3
 803498c:	b2db      	uxtb	r3, r3
 803498e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8034990:	89fb      	ldrh	r3, [r7, #14]
}
 8034992:	4618      	mov	r0, r3
 8034994:	3714      	adds	r7, #20
 8034996:	46bd      	mov	sp, r7
 8034998:	f85d 7b04 	ldr.w	r7, [sp], #4
 803499c:	4770      	bx	lr
 803499e:	bf00      	nop
 80349a0:	08049cac 	.word	0x08049cac

080349a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80349a4:	b480      	push	{r7}
 80349a6:	b087      	sub	sp, #28
 80349a8:	af00      	add	r7, sp, #0
 80349aa:	4603      	mov	r3, r0
 80349ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80349ae:	88fb      	ldrh	r3, [r7, #6]
 80349b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80349b4:	d201      	bcs.n	80349ba <ff_wtoupper+0x16>
 80349b6:	4b3e      	ldr	r3, [pc, #248]	; (8034ab0 <ff_wtoupper+0x10c>)
 80349b8:	e000      	b.n	80349bc <ff_wtoupper+0x18>
 80349ba:	4b3e      	ldr	r3, [pc, #248]	; (8034ab4 <ff_wtoupper+0x110>)
 80349bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80349be:	697b      	ldr	r3, [r7, #20]
 80349c0:	1c9a      	adds	r2, r3, #2
 80349c2:	617a      	str	r2, [r7, #20]
 80349c4:	881b      	ldrh	r3, [r3, #0]
 80349c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80349c8:	8a7b      	ldrh	r3, [r7, #18]
 80349ca:	2b00      	cmp	r3, #0
 80349cc:	d068      	beq.n	8034aa0 <ff_wtoupper+0xfc>
 80349ce:	88fa      	ldrh	r2, [r7, #6]
 80349d0:	8a7b      	ldrh	r3, [r7, #18]
 80349d2:	429a      	cmp	r2, r3
 80349d4:	d364      	bcc.n	8034aa0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80349d6:	697b      	ldr	r3, [r7, #20]
 80349d8:	1c9a      	adds	r2, r3, #2
 80349da:	617a      	str	r2, [r7, #20]
 80349dc:	881b      	ldrh	r3, [r3, #0]
 80349de:	823b      	strh	r3, [r7, #16]
 80349e0:	8a3b      	ldrh	r3, [r7, #16]
 80349e2:	0a1b      	lsrs	r3, r3, #8
 80349e4:	81fb      	strh	r3, [r7, #14]
 80349e6:	8a3b      	ldrh	r3, [r7, #16]
 80349e8:	b2db      	uxtb	r3, r3
 80349ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80349ec:	88fa      	ldrh	r2, [r7, #6]
 80349ee:	8a79      	ldrh	r1, [r7, #18]
 80349f0:	8a3b      	ldrh	r3, [r7, #16]
 80349f2:	440b      	add	r3, r1
 80349f4:	429a      	cmp	r2, r3
 80349f6:	da49      	bge.n	8034a8c <ff_wtoupper+0xe8>
			switch (cmd) {
 80349f8:	89fb      	ldrh	r3, [r7, #14]
 80349fa:	2b08      	cmp	r3, #8
 80349fc:	d84f      	bhi.n	8034a9e <ff_wtoupper+0xfa>
 80349fe:	a201      	add	r2, pc, #4	; (adr r2, 8034a04 <ff_wtoupper+0x60>)
 8034a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8034a04:	08034a29 	.word	0x08034a29
 8034a08:	08034a3b 	.word	0x08034a3b
 8034a0c:	08034a51 	.word	0x08034a51
 8034a10:	08034a59 	.word	0x08034a59
 8034a14:	08034a61 	.word	0x08034a61
 8034a18:	08034a69 	.word	0x08034a69
 8034a1c:	08034a71 	.word	0x08034a71
 8034a20:	08034a79 	.word	0x08034a79
 8034a24:	08034a81 	.word	0x08034a81
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8034a28:	88fa      	ldrh	r2, [r7, #6]
 8034a2a:	8a7b      	ldrh	r3, [r7, #18]
 8034a2c:	1ad3      	subs	r3, r2, r3
 8034a2e:	005b      	lsls	r3, r3, #1
 8034a30:	697a      	ldr	r2, [r7, #20]
 8034a32:	4413      	add	r3, r2
 8034a34:	881b      	ldrh	r3, [r3, #0]
 8034a36:	80fb      	strh	r3, [r7, #6]
 8034a38:	e027      	b.n	8034a8a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8034a3a:	88fa      	ldrh	r2, [r7, #6]
 8034a3c:	8a7b      	ldrh	r3, [r7, #18]
 8034a3e:	1ad3      	subs	r3, r2, r3
 8034a40:	b29b      	uxth	r3, r3
 8034a42:	f003 0301 	and.w	r3, r3, #1
 8034a46:	b29b      	uxth	r3, r3
 8034a48:	88fa      	ldrh	r2, [r7, #6]
 8034a4a:	1ad3      	subs	r3, r2, r3
 8034a4c:	80fb      	strh	r3, [r7, #6]
 8034a4e:	e01c      	b.n	8034a8a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8034a50:	88fb      	ldrh	r3, [r7, #6]
 8034a52:	3b10      	subs	r3, #16
 8034a54:	80fb      	strh	r3, [r7, #6]
 8034a56:	e018      	b.n	8034a8a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8034a58:	88fb      	ldrh	r3, [r7, #6]
 8034a5a:	3b20      	subs	r3, #32
 8034a5c:	80fb      	strh	r3, [r7, #6]
 8034a5e:	e014      	b.n	8034a8a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8034a60:	88fb      	ldrh	r3, [r7, #6]
 8034a62:	3b30      	subs	r3, #48	; 0x30
 8034a64:	80fb      	strh	r3, [r7, #6]
 8034a66:	e010      	b.n	8034a8a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8034a68:	88fb      	ldrh	r3, [r7, #6]
 8034a6a:	3b1a      	subs	r3, #26
 8034a6c:	80fb      	strh	r3, [r7, #6]
 8034a6e:	e00c      	b.n	8034a8a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8034a70:	88fb      	ldrh	r3, [r7, #6]
 8034a72:	3308      	adds	r3, #8
 8034a74:	80fb      	strh	r3, [r7, #6]
 8034a76:	e008      	b.n	8034a8a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8034a78:	88fb      	ldrh	r3, [r7, #6]
 8034a7a:	3b50      	subs	r3, #80	; 0x50
 8034a7c:	80fb      	strh	r3, [r7, #6]
 8034a7e:	e004      	b.n	8034a8a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8034a80:	88fb      	ldrh	r3, [r7, #6]
 8034a82:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8034a86:	80fb      	strh	r3, [r7, #6]
 8034a88:	bf00      	nop
			}
			break;
 8034a8a:	e008      	b.n	8034a9e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8034a8c:	89fb      	ldrh	r3, [r7, #14]
 8034a8e:	2b00      	cmp	r3, #0
 8034a90:	d195      	bne.n	80349be <ff_wtoupper+0x1a>
 8034a92:	8a3b      	ldrh	r3, [r7, #16]
 8034a94:	005b      	lsls	r3, r3, #1
 8034a96:	697a      	ldr	r2, [r7, #20]
 8034a98:	4413      	add	r3, r2
 8034a9a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8034a9c:	e78f      	b.n	80349be <ff_wtoupper+0x1a>
			break;
 8034a9e:	bf00      	nop
	}

	return chr;
 8034aa0:	88fb      	ldrh	r3, [r7, #6]
}
 8034aa2:	4618      	mov	r0, r3
 8034aa4:	371c      	adds	r7, #28
 8034aa6:	46bd      	mov	sp, r7
 8034aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034aac:	4770      	bx	lr
 8034aae:	bf00      	nop
 8034ab0:	08049dac 	.word	0x08049dac
 8034ab4:	08049fa0 	.word	0x08049fa0

08034ab8 <gos_libGetVersion>:

/*
 * Function: gos_libGetVersion
 */
gos_result_t gos_libGetVersion (gos_libVersion_t* pLibVersion)
{
 8034ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8034aba:	b085      	sub	sp, #20
 8034abc:	af00      	add	r7, sp, #0
 8034abe:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t getVersionResult = GOS_ERROR;
 8034ac0:	23ae      	movs	r3, #174	; 0xae
 8034ac2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pLibVersion != NULL)
 8034ac4:	687b      	ldr	r3, [r7, #4]
 8034ac6:	2b00      	cmp	r3, #0
 8034ac8:	d049      	beq.n	8034b5e <gos_libGetVersion+0xa6>
    {
    	pLibVersion->major       = LIB_VERSION_MAJOR;
 8034aca:	687b      	ldr	r3, [r7, #4]
 8034acc:	2200      	movs	r2, #0
 8034ace:	801a      	strh	r2, [r3, #0]
    	pLibVersion->minor       = LIB_VERSION_MINOR;
 8034ad0:	687b      	ldr	r3, [r7, #4]
 8034ad2:	220a      	movs	r2, #10
 8034ad4:	805a      	strh	r2, [r3, #2]
    	pLibVersion->build       = LIB_VERSION_BUILD;
 8034ad6:	687b      	ldr	r3, [r7, #4]
 8034ad8:	2200      	movs	r2, #0
 8034ada:	809a      	strh	r2, [r3, #4]
    	pLibVersion->date.years  = LIB_VERSION_DATE_YEAR;
 8034adc:	687b      	ldr	r3, [r7, #4]
 8034ade:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8034ae2:	81da      	strh	r2, [r3, #14]
    	pLibVersion->date.months = LIB_VERSION_DATE_MONTH;
 8034ae4:	687b      	ldr	r3, [r7, #4]
 8034ae6:	2207      	movs	r2, #7
 8034ae8:	735a      	strb	r2, [r3, #13]
    	pLibVersion->date.days   = LIB_VERSION_DATE_DAY;
 8034aea:	687b      	ldr	r3, [r7, #4]
 8034aec:	2200      	movs	r2, #0
 8034aee:	f042 0213 	orr.w	r2, r2, #19
 8034af2:	72da      	strb	r2, [r3, #11]
 8034af4:	2200      	movs	r2, #0
 8034af6:	731a      	strb	r2, [r3, #12]

        (void_t) strcpy((char_t*)pLibVersion->name, LIB_NAME);
 8034af8:	687b      	ldr	r3, [r7, #4]
 8034afa:	3310      	adds	r3, #16
 8034afc:	4a1a      	ldr	r2, [pc, #104]	; (8034b68 <gos_libGetVersion+0xb0>)
 8034afe:	461c      	mov	r4, r3
 8034b00:	4613      	mov	r3, r2
 8034b02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8034b04:	6020      	str	r0, [r4, #0]
 8034b06:	6061      	str	r1, [r4, #4]
 8034b08:	60a2      	str	r2, [r4, #8]
        (void_t) strcpy((char_t*)pLibVersion->description, LIB_DESCRIPTION);
 8034b0a:	687b      	ldr	r3, [r7, #4]
 8034b0c:	3340      	adds	r3, #64	; 0x40
 8034b0e:	4a17      	ldr	r2, [pc, #92]	; (8034b6c <gos_libGetVersion+0xb4>)
 8034b10:	4614      	mov	r4, r2
 8034b12:	469c      	mov	ip, r3
 8034b14:	f104 0e20 	add.w	lr, r4, #32
 8034b18:	4665      	mov	r5, ip
 8034b1a:	4626      	mov	r6, r4
 8034b1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8034b1e:	6028      	str	r0, [r5, #0]
 8034b20:	6069      	str	r1, [r5, #4]
 8034b22:	60aa      	str	r2, [r5, #8]
 8034b24:	60eb      	str	r3, [r5, #12]
 8034b26:	3410      	adds	r4, #16
 8034b28:	f10c 0c10 	add.w	ip, ip, #16
 8034b2c:	4574      	cmp	r4, lr
 8034b2e:	d1f3      	bne.n	8034b18 <gos_libGetVersion+0x60>
 8034b30:	4662      	mov	r2, ip
 8034b32:	4623      	mov	r3, r4
 8034b34:	cb03      	ldmia	r3!, {r0, r1}
 8034b36:	6010      	str	r0, [r2, #0]
 8034b38:	6051      	str	r1, [r2, #4]
 8034b3a:	8819      	ldrh	r1, [r3, #0]
 8034b3c:	789b      	ldrb	r3, [r3, #2]
 8034b3e:	8111      	strh	r1, [r2, #8]
 8034b40:	7293      	strb	r3, [r2, #10]
        (void_t) strcpy((char_t*)pLibVersion->author, LIB_AUTHOR);
 8034b42:	687b      	ldr	r3, [r7, #4]
 8034b44:	3380      	adds	r3, #128	; 0x80
 8034b46:	4a0a      	ldr	r2, [pc, #40]	; (8034b70 <gos_libGetVersion+0xb8>)
 8034b48:	461d      	mov	r5, r3
 8034b4a:	4614      	mov	r4, r2
 8034b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8034b4e:	6028      	str	r0, [r5, #0]
 8034b50:	6069      	str	r1, [r5, #4]
 8034b52:	60aa      	str	r2, [r5, #8]
 8034b54:	60eb      	str	r3, [r5, #12]
 8034b56:	6820      	ldr	r0, [r4, #0]
 8034b58:	6128      	str	r0, [r5, #16]

        getVersionResult = GOS_SUCCESS;
 8034b5a:	2355      	movs	r3, #85	; 0x55
 8034b5c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Target is NULL.
    }

    return getVersionResult;
 8034b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8034b60:	4618      	mov	r0, r3
 8034b62:	3714      	adds	r7, #20
 8034b64:	46bd      	mov	sp, r7
 8034b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8034b68:	08047618 	.word	0x08047618
 8034b6c:	08047624 	.word	0x08047624
 8034b70:	08047650 	.word	0x08047650

08034b74 <drv_24lc256Init>:

/*
 * Function: drv_24lc256Init
 */
gos_result_t drv_24lc256Init (void_t* pDevice)
{
 8034b74:	b580      	push	{r7, lr}
 8034b76:	b084      	sub	sp, #16
 8034b78:	af00      	add	r7, sp, #0
 8034b7a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 8034b7c:	2355      	movs	r3, #85	; 0x55
 8034b7e:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 8034b80:	2300      	movs	r3, #0
 8034b82:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_24LC256_DEVICE_NULL);
 8034b84:	687b      	ldr	r3, [r7, #4]
 8034b86:	2b00      	cmp	r3, #0
 8034b88:	d103      	bne.n	8034b92 <drv_24lc256Init+0x1e>
 8034b8a:	68bb      	ldr	r3, [r7, #8]
 8034b8c:	f043 0301 	orr.w	r3, r3, #1
 8034b90:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_24lc256Descriptor_t*)pDevice)->deviceMutex), ((drv_24lc256Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_24LC256_MUTEX_INIT);
 8034b92:	687b      	ldr	r3, [r7, #4]
 8034b94:	699b      	ldr	r3, [r3, #24]
 8034b96:	2b00      	cmp	r3, #0
 8034b98:	d10d      	bne.n	8034bb6 <drv_24lc256Init+0x42>
 8034b9a:	687b      	ldr	r3, [r7, #4]
 8034b9c:	3302      	adds	r3, #2
 8034b9e:	4618      	mov	r0, r3
 8034ba0:	f009 fbb0 	bl	803e304 <gos_mutexInit>
 8034ba4:	4603      	mov	r3, r0
 8034ba6:	2b55      	cmp	r3, #85	; 0x55
 8034ba8:	d005      	beq.n	8034bb6 <drv_24lc256Init+0x42>
 8034baa:	687b      	ldr	r3, [r7, #4]
 8034bac:	699b      	ldr	r3, [r3, #24]
 8034bae:	f043 0208 	orr.w	r2, r3, #8
 8034bb2:	687b      	ldr	r3, [r7, #4]
 8034bb4:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 8034bb6:	68bb      	ldr	r3, [r7, #8]
 8034bb8:	2b00      	cmp	r3, #0
 8034bba:	d102      	bne.n	8034bc2 <drv_24lc256Init+0x4e>
 8034bbc:	2355      	movs	r3, #85	; 0x55
 8034bbe:	73fb      	strb	r3, [r7, #15]
 8034bc0:	e001      	b.n	8034bc6 <drv_24lc256Init+0x52>
 8034bc2:	23ae      	movs	r3, #174	; 0xae
 8034bc4:	73fb      	strb	r3, [r7, #15]

    return initResult;
 8034bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8034bc8:	4618      	mov	r0, r3
 8034bca:	3710      	adds	r7, #16
 8034bcc:	46bd      	mov	sp, r7
 8034bce:	bd80      	pop	{r7, pc}

08034bd0 <drv_24lc256Read>:

/*
 * Function: drv_24lc256Read
 */
GOS_INLINE gos_result_t drv_24lc256Read (void_t* pDevice, u16_t address, u8_t* pTarget, u16_t size)
{
 8034bd0:	b5b0      	push	{r4, r5, r7, lr}
 8034bd2:	b090      	sub	sp, #64	; 0x40
 8034bd4:	af04      	add	r7, sp, #16
 8034bd6:	60f8      	str	r0, [r7, #12]
 8034bd8:	607a      	str	r2, [r7, #4]
 8034bda:	461a      	mov	r2, r3
 8034bdc:	460b      	mov	r3, r1
 8034bde:	817b      	strh	r3, [r7, #10]
 8034be0:	4613      	mov	r3, r2
 8034be2:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t readResult    = GOS_SUCCESS;
 8034be4:	2355      	movs	r3, #85	; 0x55
 8034be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    u16_t        startPage     = 0u;
 8034bea:	2300      	movs	r3, #0
 8034bec:	85bb      	strh	r3, [r7, #44]	; 0x2c
    u16_t        endPage       = 0u;
 8034bee:	2300      	movs	r3, #0
 8034bf0:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages    = 0u;
 8034bf2:	2300      	movs	r3, #0
 8034bf4:	83bb      	strh	r3, [r7, #28]
    u16_t        idx           = 0u;
 8034bf6:	2300      	movs	r3, #0
 8034bf8:	857b      	strh	r3, [r7, #42]	; 0x2a
    u16_t        pos           = 0u;
 8034bfa:	2300      	movs	r3, #0
 8034bfc:	853b      	strh	r3, [r7, #40]	; 0x28
    u16_t        offset        = 0u;
 8034bfe:	2300      	movs	r3, #0
 8034c00:	84fb      	strh	r3, [r7, #38]	; 0x26
    u16_t        memAddress    = 0u;
 8034c02:	2300      	movs	r3, #0
 8034c04:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem      = 0u;
 8034c06:	2300      	movs	r3, #0
 8034c08:	833b      	strh	r3, [r7, #24]
    int32_t      paddrposition = 0;
 8034c0a:	2300      	movs	r3, #0
 8034c0c:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags    = 0u;
 8034c0e:	2300      	movs	r3, #0
 8034c10:	623b      	str	r3, [r7, #32]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_24LC256_DEVICE_NULL);
 8034c12:	68fb      	ldr	r3, [r7, #12]
 8034c14:	2b00      	cmp	r3, #0
 8034c16:	d103      	bne.n	8034c20 <drv_24lc256Read+0x50>
 8034c18:	6a3b      	ldr	r3, [r7, #32]
 8034c1a:	f043 0301 	orr.w	r3, r3, #1
 8034c1e:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pTarget, errorFlags, DRV_ERROR_24LC256_TARGET_NULL);
 8034c20:	687b      	ldr	r3, [r7, #4]
 8034c22:	2b00      	cmp	r3, #0
 8034c24:	d103      	bne.n	8034c2e <drv_24lc256Read+0x5e>
 8034c26:	6a3b      	ldr	r3, [r7, #32]
 8034c28:	f043 0302 	orr.w	r3, r3, #2
 8034c2c:	623b      	str	r3, [r7, #32]

    if (errorFlags == 0u)
 8034c2e:	6a3b      	ldr	r3, [r7, #32]
 8034c30:	2b00      	cmp	r3, #0
 8034c32:	f040 8098 	bne.w	8034d66 <drv_24lc256Read+0x196>
    {
        DRV_ERROR_CHK_SET(
 8034c36:	6a3b      	ldr	r3, [r7, #32]
 8034c38:	2b00      	cmp	r3, #0
 8034c3a:	d10e      	bne.n	8034c5a <drv_24lc256Read+0x8a>
 8034c3c:	68fb      	ldr	r3, [r7, #12]
 8034c3e:	1c9a      	adds	r2, r3, #2
 8034c40:	68fb      	ldr	r3, [r7, #12]
 8034c42:	689b      	ldr	r3, [r3, #8]
 8034c44:	4619      	mov	r1, r3
 8034c46:	4610      	mov	r0, r2
 8034c48:	f009 fb76 	bl	803e338 <gos_mutexLock>
 8034c4c:	4603      	mov	r3, r0
 8034c4e:	2b55      	cmp	r3, #85	; 0x55
 8034c50:	d003      	beq.n	8034c5a <drv_24lc256Read+0x8a>
 8034c52:	6a3b      	ldr	r3, [r7, #32]
 8034c54:	f043 0310 	orr.w	r3, r3, #16
 8034c58:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_24lc256Descriptor_t*)pDevice)->deviceMutex, ((drv_24lc256Descriptor_t*)pDevice)->readMutexTmo),
                errorFlags,
                DRV_ERROR_24LC256_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8034c5a:	6a3b      	ldr	r3, [r7, #32]
 8034c5c:	2b00      	cmp	r3, #0
 8034c5e:	d103      	bne.n	8034c68 <drv_24lc256Read+0x98>
 8034c60:	2355      	movs	r3, #85	; 0x55
 8034c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8034c66:	e002      	b.n	8034c6e <drv_24lc256Read+0x9e>
 8034c68:	23ae      	movs	r3, #174	; 0xae
 8034c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 8034c6e:	2306      	movs	r3, #6
 8034c70:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 8034c72:	897b      	ldrh	r3, [r7, #10]
 8034c74:	099b      	lsrs	r3, r3, #6
 8034c76:	85bb      	strh	r3, [r7, #44]	; 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 8034c78:	893a      	ldrh	r2, [r7, #8]
 8034c7a:	897b      	ldrh	r3, [r7, #10]
 8034c7c:	4413      	add	r3, r2
 8034c7e:	099b      	lsrs	r3, r3, #6
 8034c80:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 8034c82:	8bfa      	ldrh	r2, [r7, #30]
 8034c84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8034c86:	1ad3      	subs	r3, r2, r3
 8034c88:	b29b      	uxth	r3, r3
 8034c8a:	3301      	adds	r3, #1
 8034c8c:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 8034c8e:	2300      	movs	r3, #0
 8034c90:	853b      	strh	r3, [r7, #40]	; 0x28
        offset        = address % PAGE_SIZE;
 8034c92:	897b      	ldrh	r3, [r7, #10]
 8034c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034c98:	84fb      	strh	r3, [r7, #38]	; 0x26

        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 8034c9a:	2300      	movs	r3, #0
 8034c9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8034c9e:	e04f      	b.n	8034d40 <drv_24lc256Read+0x170>
        {
            memAddress = startPage << paddrposition | offset;
 8034ca0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8034ca2:	697b      	ldr	r3, [r7, #20]
 8034ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8034ca8:	b21a      	sxth	r2, r3
 8034caa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8034cae:	4313      	orrs	r3, r2
 8034cb0:	b21b      	sxth	r3, r3
 8034cb2:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 8034cb4:	893a      	ldrh	r2, [r7, #8]
 8034cb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8034cb8:	4413      	add	r3, r2
 8034cba:	2b3f      	cmp	r3, #63	; 0x3f
 8034cbc:	d904      	bls.n	8034cc8 <drv_24lc256Read+0xf8>
 8034cbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8034cc0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8034cc4:	b29b      	uxth	r3, r3
 8034cc6:	e000      	b.n	8034cca <drv_24lc256Read+0xfa>
 8034cc8:	893b      	ldrh	r3, [r7, #8]
 8034cca:	833b      	strh	r3, [r7, #24]

            DRV_ERROR_CHK_SET(
 8034ccc:	6a3b      	ldr	r3, [r7, #32]
 8034cce:	2b00      	cmp	r3, #0
 8034cd0:	d11c      	bne.n	8034d0c <drv_24lc256Read+0x13c>
 8034cd2:	68fb      	ldr	r3, [r7, #12]
 8034cd4:	7818      	ldrb	r0, [r3, #0]
 8034cd6:	68fb      	ldr	r3, [r7, #12]
 8034cd8:	88dc      	ldrh	r4, [r3, #6]
 8034cda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8034cdc:	687a      	ldr	r2, [r7, #4]
 8034cde:	4413      	add	r3, r2
 8034ce0:	68fa      	ldr	r2, [r7, #12]
 8034ce2:	6892      	ldr	r2, [r2, #8]
 8034ce4:	68f9      	ldr	r1, [r7, #12]
 8034ce6:	68c9      	ldr	r1, [r1, #12]
 8034ce8:	8b7d      	ldrh	r5, [r7, #26]
 8034cea:	9103      	str	r1, [sp, #12]
 8034cec:	9202      	str	r2, [sp, #8]
 8034cee:	8b3a      	ldrh	r2, [r7, #24]
 8034cf0:	9201      	str	r2, [sp, #4]
 8034cf2:	9300      	str	r3, [sp, #0]
 8034cf4:	2302      	movs	r3, #2
 8034cf6:	462a      	mov	r2, r5
 8034cf8:	4621      	mov	r1, r4
 8034cfa:	f001 fe91 	bl	8036a20 <drv_i2cMemRead>
 8034cfe:	4603      	mov	r3, r0
 8034d00:	2b55      	cmp	r3, #85	; 0x55
 8034d02:	d003      	beq.n	8034d0c <drv_24lc256Read+0x13c>
 8034d04:	6a3b      	ldr	r3, [r7, #32]
 8034d06:	f043 0320 	orr.w	r3, r3, #32
 8034d0a:	623b      	str	r3, [r7, #32]
                            ((drv_24lc256Descriptor_t*)pDevice)->readTriggerTmo
                            ),
                    errorFlags,
                    DRV_ERROR_24LC256_MEM_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8034d0c:	6a3b      	ldr	r3, [r7, #32]
 8034d0e:	2b00      	cmp	r3, #0
 8034d10:	d103      	bne.n	8034d1a <drv_24lc256Read+0x14a>
 8034d12:	2355      	movs	r3, #85	; 0x55
 8034d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8034d18:	e002      	b.n	8034d20 <drv_24lc256Read+0x150>
 8034d1a:	23ae      	movs	r3, #174	; 0xae
 8034d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            startPage += 1;
 8034d20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8034d22:	3301      	adds	r3, #1
 8034d24:	85bb      	strh	r3, [r7, #44]	; 0x2c
            offset    =  0u;
 8034d26:	2300      	movs	r3, #0
 8034d28:	84fb      	strh	r3, [r7, #38]	; 0x26
            size      =  size - bytesRem;
 8034d2a:	893a      	ldrh	r2, [r7, #8]
 8034d2c:	8b3b      	ldrh	r3, [r7, #24]
 8034d2e:	1ad3      	subs	r3, r2, r3
 8034d30:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 8034d32:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8034d34:	8b3b      	ldrh	r3, [r7, #24]
 8034d36:	4413      	add	r3, r2
 8034d38:	853b      	strh	r3, [r7, #40]	; 0x28
        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 8034d3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8034d3c:	3301      	adds	r3, #1
 8034d3e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8034d40:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8034d42:	8bbb      	ldrh	r3, [r7, #28]
 8034d44:	429a      	cmp	r2, r3
 8034d46:	d203      	bcs.n	8034d50 <drv_24lc256Read+0x180>
 8034d48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8034d4c:	2b55      	cmp	r3, #85	; 0x55
 8034d4e:	d0a7      	beq.n	8034ca0 <drv_24lc256Read+0xd0>
        }

        (void_t) gos_mutexUnlock(&((drv_24lc256Descriptor_t*)pDevice)->deviceMutex);
 8034d50:	68fb      	ldr	r3, [r7, #12]
 8034d52:	3302      	adds	r3, #2
 8034d54:	4618      	mov	r0, r3
 8034d56:	f009 fbf5 	bl	803e544 <gos_mutexUnlock>

        DRV_ERROR_SET(((drv_24lc256Descriptor_t*)pDevice)->errorFlags, errorFlags);
 8034d5a:	68fb      	ldr	r3, [r7, #12]
 8034d5c:	699a      	ldr	r2, [r3, #24]
 8034d5e:	6a3b      	ldr	r3, [r7, #32]
 8034d60:	431a      	orrs	r2, r3
 8034d62:	68fb      	ldr	r3, [r7, #12]
 8034d64:	619a      	str	r2, [r3, #24]
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8034d66:	6a3b      	ldr	r3, [r7, #32]
 8034d68:	2b00      	cmp	r3, #0
 8034d6a:	d103      	bne.n	8034d74 <drv_24lc256Read+0x1a4>
 8034d6c:	2355      	movs	r3, #85	; 0x55
 8034d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8034d72:	e002      	b.n	8034d7a <drv_24lc256Read+0x1aa>
 8034d74:	23ae      	movs	r3, #174	; 0xae
 8034d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    return readResult;
 8034d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8034d7e:	4618      	mov	r0, r3
 8034d80:	3730      	adds	r7, #48	; 0x30
 8034d82:	46bd      	mov	sp, r7
 8034d84:	bdb0      	pop	{r4, r5, r7, pc}

08034d86 <drv_24lc256Write>:

/*
 * Function: drv_24lc256Write
 */
GOS_INLINE gos_result_t drv_24lc256Write (void_t* pDevice, u16_t address, u8_t* pData, u16_t size)
{
 8034d86:	b5b0      	push	{r4, r5, r7, lr}
 8034d88:	b090      	sub	sp, #64	; 0x40
 8034d8a:	af04      	add	r7, sp, #16
 8034d8c:	60f8      	str	r0, [r7, #12]
 8034d8e:	607a      	str	r2, [r7, #4]
 8034d90:	461a      	mov	r2, r3
 8034d92:	460b      	mov	r3, r1
 8034d94:	817b      	strh	r3, [r7, #10]
 8034d96:	4613      	mov	r3, r2
 8034d98:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t writeResult   = GOS_SUCCESS;
 8034d9a:	2355      	movs	r3, #85	; 0x55
 8034d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    u16_t        startPage     = 0u;
 8034da0:	2300      	movs	r3, #0
 8034da2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    u16_t        endPage       = 0u;
 8034da4:	2300      	movs	r3, #0
 8034da6:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages    = 0u;
 8034da8:	2300      	movs	r3, #0
 8034daa:	83bb      	strh	r3, [r7, #28]
    u16_t        idx           = 0u;
 8034dac:	2300      	movs	r3, #0
 8034dae:	857b      	strh	r3, [r7, #42]	; 0x2a
    u16_t        pos           = 0u;
 8034db0:	2300      	movs	r3, #0
 8034db2:	853b      	strh	r3, [r7, #40]	; 0x28
    u16_t        offset        = 0u;
 8034db4:	2300      	movs	r3, #0
 8034db6:	84fb      	strh	r3, [r7, #38]	; 0x26
    u16_t        memAddress    = 0u;
 8034db8:	2300      	movs	r3, #0
 8034dba:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem      = 0u;
 8034dbc:	2300      	movs	r3, #0
 8034dbe:	833b      	strh	r3, [r7, #24]
    int32_t      paddrposition = 0;
 8034dc0:	2300      	movs	r3, #0
 8034dc2:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags    = 0u;
 8034dc4:	2300      	movs	r3, #0
 8034dc6:	623b      	str	r3, [r7, #32]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_24LC256_DEVICE_NULL);
 8034dc8:	68fb      	ldr	r3, [r7, #12]
 8034dca:	2b00      	cmp	r3, #0
 8034dcc:	d103      	bne.n	8034dd6 <drv_24lc256Write+0x50>
 8034dce:	6a3b      	ldr	r3, [r7, #32]
 8034dd0:	f043 0301 	orr.w	r3, r3, #1
 8034dd4:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pData, errorFlags, DRV_ERROR_24LC256_DATA_NULL);
 8034dd6:	687b      	ldr	r3, [r7, #4]
 8034dd8:	2b00      	cmp	r3, #0
 8034dda:	d103      	bne.n	8034de4 <drv_24lc256Write+0x5e>
 8034ddc:	6a3b      	ldr	r3, [r7, #32]
 8034dde:	f043 0304 	orr.w	r3, r3, #4
 8034de2:	623b      	str	r3, [r7, #32]

    if (errorFlags == 0u)
 8034de4:	6a3b      	ldr	r3, [r7, #32]
 8034de6:	2b00      	cmp	r3, #0
 8034de8:	f040 809b 	bne.w	8034f22 <drv_24lc256Write+0x19c>
    {
        DRV_ERROR_CHK_SET(
 8034dec:	6a3b      	ldr	r3, [r7, #32]
 8034dee:	2b00      	cmp	r3, #0
 8034df0:	d10e      	bne.n	8034e10 <drv_24lc256Write+0x8a>
 8034df2:	68fb      	ldr	r3, [r7, #12]
 8034df4:	1c9a      	adds	r2, r3, #2
 8034df6:	68fb      	ldr	r3, [r7, #12]
 8034df8:	691b      	ldr	r3, [r3, #16]
 8034dfa:	4619      	mov	r1, r3
 8034dfc:	4610      	mov	r0, r2
 8034dfe:	f009 fa9b 	bl	803e338 <gos_mutexLock>
 8034e02:	4603      	mov	r3, r0
 8034e04:	2b55      	cmp	r3, #85	; 0x55
 8034e06:	d003      	beq.n	8034e10 <drv_24lc256Write+0x8a>
 8034e08:	6a3b      	ldr	r3, [r7, #32]
 8034e0a:	f043 0310 	orr.w	r3, r3, #16
 8034e0e:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_24lc256Descriptor_t*)pDevice)->deviceMutex, ((drv_24lc256Descriptor_t*)pDevice)->writeMutexTmo),
                errorFlags,
                DRV_ERROR_24LC256_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8034e10:	6a3b      	ldr	r3, [r7, #32]
 8034e12:	2b00      	cmp	r3, #0
 8034e14:	d103      	bne.n	8034e1e <drv_24lc256Write+0x98>
 8034e16:	2355      	movs	r3, #85	; 0x55
 8034e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8034e1c:	e002      	b.n	8034e24 <drv_24lc256Write+0x9e>
 8034e1e:	23ae      	movs	r3, #174	; 0xae
 8034e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 8034e24:	2306      	movs	r3, #6
 8034e26:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 8034e28:	897b      	ldrh	r3, [r7, #10]
 8034e2a:	099b      	lsrs	r3, r3, #6
 8034e2c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 8034e2e:	893a      	ldrh	r2, [r7, #8]
 8034e30:	897b      	ldrh	r3, [r7, #10]
 8034e32:	4413      	add	r3, r2
 8034e34:	099b      	lsrs	r3, r3, #6
 8034e36:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 8034e38:	8bfa      	ldrh	r2, [r7, #30]
 8034e3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8034e3c:	1ad3      	subs	r3, r2, r3
 8034e3e:	b29b      	uxth	r3, r3
 8034e40:	3301      	adds	r3, #1
 8034e42:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 8034e44:	2300      	movs	r3, #0
 8034e46:	853b      	strh	r3, [r7, #40]	; 0x28
        offset        = address % PAGE_SIZE;
 8034e48:	897b      	ldrh	r3, [r7, #10]
 8034e4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8034e4e:	84fb      	strh	r3, [r7, #38]	; 0x26

        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 8034e50:	2300      	movs	r3, #0
 8034e52:	857b      	strh	r3, [r7, #42]	; 0x2a
 8034e54:	e052      	b.n	8034efc <drv_24lc256Write+0x176>
        {
            memAddress = startPage << paddrposition | offset;
 8034e56:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8034e58:	697b      	ldr	r3, [r7, #20]
 8034e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8034e5e:	b21a      	sxth	r2, r3
 8034e60:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8034e64:	4313      	orrs	r3, r2
 8034e66:	b21b      	sxth	r3, r3
 8034e68:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 8034e6a:	893a      	ldrh	r2, [r7, #8]
 8034e6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8034e6e:	4413      	add	r3, r2
 8034e70:	2b3f      	cmp	r3, #63	; 0x3f
 8034e72:	d904      	bls.n	8034e7e <drv_24lc256Write+0xf8>
 8034e74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8034e76:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8034e7a:	b29b      	uxth	r3, r3
 8034e7c:	e000      	b.n	8034e80 <drv_24lc256Write+0xfa>
 8034e7e:	893b      	ldrh	r3, [r7, #8]
 8034e80:	833b      	strh	r3, [r7, #24]

            DRV_ERROR_CHK_SET(
 8034e82:	6a3b      	ldr	r3, [r7, #32]
 8034e84:	2b00      	cmp	r3, #0
 8034e86:	d11c      	bne.n	8034ec2 <drv_24lc256Write+0x13c>
 8034e88:	68fb      	ldr	r3, [r7, #12]
 8034e8a:	7818      	ldrb	r0, [r3, #0]
 8034e8c:	68fb      	ldr	r3, [r7, #12]
 8034e8e:	88dc      	ldrh	r4, [r3, #6]
 8034e90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8034e92:	687a      	ldr	r2, [r7, #4]
 8034e94:	4413      	add	r3, r2
 8034e96:	68fa      	ldr	r2, [r7, #12]
 8034e98:	6912      	ldr	r2, [r2, #16]
 8034e9a:	68f9      	ldr	r1, [r7, #12]
 8034e9c:	6949      	ldr	r1, [r1, #20]
 8034e9e:	8b7d      	ldrh	r5, [r7, #26]
 8034ea0:	9103      	str	r1, [sp, #12]
 8034ea2:	9202      	str	r2, [sp, #8]
 8034ea4:	8b3a      	ldrh	r2, [r7, #24]
 8034ea6:	9201      	str	r2, [sp, #4]
 8034ea8:	9300      	str	r3, [sp, #0]
 8034eaa:	2302      	movs	r3, #2
 8034eac:	462a      	mov	r2, r5
 8034eae:	4621      	mov	r1, r4
 8034eb0:	f001 fd4a 	bl	8036948 <drv_i2cMemWrite>
 8034eb4:	4603      	mov	r3, r0
 8034eb6:	2b55      	cmp	r3, #85	; 0x55
 8034eb8:	d003      	beq.n	8034ec2 <drv_24lc256Write+0x13c>
 8034eba:	6a3b      	ldr	r3, [r7, #32]
 8034ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8034ec0:	623b      	str	r3, [r7, #32]
                            ((drv_24lc256Descriptor_t*)pDevice)->writeTriggerTmo
                            ),
                    errorFlags,
                    DRV_ERROR_24LC256_MEM_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8034ec2:	6a3b      	ldr	r3, [r7, #32]
 8034ec4:	2b00      	cmp	r3, #0
 8034ec6:	d103      	bne.n	8034ed0 <drv_24lc256Write+0x14a>
 8034ec8:	2355      	movs	r3, #85	; 0x55
 8034eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8034ece:	e002      	b.n	8034ed6 <drv_24lc256Write+0x150>
 8034ed0:	23ae      	movs	r3, #174	; 0xae
 8034ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            startPage += 1;
 8034ed6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8034ed8:	3301      	adds	r3, #1
 8034eda:	85bb      	strh	r3, [r7, #44]	; 0x2c
            offset    =  0u;
 8034edc:	2300      	movs	r3, #0
 8034ede:	84fb      	strh	r3, [r7, #38]	; 0x26
            size      =  size - bytesRem;
 8034ee0:	893a      	ldrh	r2, [r7, #8]
 8034ee2:	8b3b      	ldrh	r3, [r7, #24]
 8034ee4:	1ad3      	subs	r3, r2, r3
 8034ee6:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 8034ee8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8034eea:	8b3b      	ldrh	r3, [r7, #24]
 8034eec:	4413      	add	r3, r2
 8034eee:	853b      	strh	r3, [r7, #40]	; 0x28

            (void_t) gos_taskSleep(5);
 8034ef0:	2005      	movs	r0, #5
 8034ef2:	f006 fdad 	bl	803ba50 <gos_taskSleep>
        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 8034ef6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8034ef8:	3301      	adds	r3, #1
 8034efa:	857b      	strh	r3, [r7, #42]	; 0x2a
 8034efc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8034efe:	8bbb      	ldrh	r3, [r7, #28]
 8034f00:	429a      	cmp	r2, r3
 8034f02:	d203      	bcs.n	8034f0c <drv_24lc256Write+0x186>
 8034f04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8034f08:	2b55      	cmp	r3, #85	; 0x55
 8034f0a:	d0a4      	beq.n	8034e56 <drv_24lc256Write+0xd0>
        }

        (void_t) gos_mutexUnlock(&((drv_24lc256Descriptor_t*)pDevice)->deviceMutex);
 8034f0c:	68fb      	ldr	r3, [r7, #12]
 8034f0e:	3302      	adds	r3, #2
 8034f10:	4618      	mov	r0, r3
 8034f12:	f009 fb17 	bl	803e544 <gos_mutexUnlock>

        DRV_ERROR_SET(((drv_24lc256Descriptor_t*)pDevice)->errorFlags, errorFlags);
 8034f16:	68fb      	ldr	r3, [r7, #12]
 8034f18:	699a      	ldr	r2, [r3, #24]
 8034f1a:	6a3b      	ldr	r3, [r7, #32]
 8034f1c:	431a      	orrs	r2, r3
 8034f1e:	68fb      	ldr	r3, [r7, #12]
 8034f20:	619a      	str	r2, [r3, #24]
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8034f22:	6a3b      	ldr	r3, [r7, #32]
 8034f24:	2b00      	cmp	r3, #0
 8034f26:	d103      	bne.n	8034f30 <drv_24lc256Write+0x1aa>
 8034f28:	2355      	movs	r3, #85	; 0x55
 8034f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8034f2e:	e002      	b.n	8034f36 <drv_24lc256Write+0x1b0>
 8034f30:	23ae      	movs	r3, #174	; 0xae
 8034f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    return writeResult;
 8034f36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8034f3a:	4618      	mov	r0, r3
 8034f3c:	3730      	adds	r7, #48	; 0x30
 8034f3e:	46bd      	mov	sp, r7
 8034f40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08034f44 <drv_adcInit>:

/*
 * Function: drv_adcInit
 */
gos_result_t drv_adcInit (void_t)
{
 8034f44:	b580      	push	{r7, lr}
 8034f46:	b082      	sub	sp, #8
 8034f48:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t adcDriverInitResult = GOS_SUCCESS;
 8034f4a:	2355      	movs	r3, #85	; 0x55
 8034f4c:	71fb      	strb	r3, [r7, #7]
    u8_t         adcIdx              = 0u;
 8034f4e:	2300      	movs	r3, #0
 8034f50:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (adcConfig != NULL)
    {
        for (adcIdx = 0u; adcIdx < adcConfigSize / sizeof(drv_adcDescriptor_t); adcIdx++)
 8034f52:	2300      	movs	r3, #0
 8034f54:	71bb      	strb	r3, [r7, #6]
 8034f56:	e00e      	b.n	8034f76 <drv_adcInit+0x32>
        {
            GOS_CONCAT_RESULT(adcDriverInitResult, drv_adcInitInstance(adcIdx));
 8034f58:	79fb      	ldrb	r3, [r7, #7]
 8034f5a:	2b55      	cmp	r3, #85	; 0x55
 8034f5c:	d106      	bne.n	8034f6c <drv_adcInit+0x28>
 8034f5e:	79bb      	ldrb	r3, [r7, #6]
 8034f60:	4618      	mov	r0, r3
 8034f62:	f000 f81b 	bl	8034f9c <drv_adcInitInstance>
 8034f66:	4603      	mov	r3, r0
 8034f68:	71fb      	strb	r3, [r7, #7]
 8034f6a:	e001      	b.n	8034f70 <drv_adcInit+0x2c>
 8034f6c:	23ae      	movs	r3, #174	; 0xae
 8034f6e:	71fb      	strb	r3, [r7, #7]
        for (adcIdx = 0u; adcIdx < adcConfigSize / sizeof(drv_adcDescriptor_t); adcIdx++)
 8034f70:	79bb      	ldrb	r3, [r7, #6]
 8034f72:	3301      	adds	r3, #1
 8034f74:	71bb      	strb	r3, [r7, #6]
 8034f76:	79ba      	ldrb	r2, [r7, #6]
 8034f78:	4b06      	ldr	r3, [pc, #24]	; (8034f94 <drv_adcInit+0x50>)
 8034f7a:	681b      	ldr	r3, [r3, #0]
 8034f7c:	4906      	ldr	r1, [pc, #24]	; (8034f98 <drv_adcInit+0x54>)
 8034f7e:	fba1 1303 	umull	r1, r3, r1, r3
 8034f82:	099b      	lsrs	r3, r3, #6
 8034f84:	429a      	cmp	r2, r3
 8034f86:	d3e7      	bcc.n	8034f58 <drv_adcInit+0x14>
    {
        // Configuration array is NULL pointer.
        adcDriverInitResult = GOS_ERROR;
    }

    return adcDriverInitResult;
 8034f88:	79fb      	ldrb	r3, [r7, #7]
}
 8034f8a:	4618      	mov	r0, r3
 8034f8c:	3708      	adds	r7, #8
 8034f8e:	46bd      	mov	sp, r7
 8034f90:	bd80      	pop	{r7, pc}
 8034f92:	bf00      	nop
 8034f94:	200014e8 	.word	0x200014e8
 8034f98:	f0f0f0f1 	.word	0xf0f0f0f1

08034f9c <drv_adcInitInstance>:

/*
 * Function: drv_adcInitInstance
 */
gos_result_t drv_adcInitInstance (u8_t adcInstanceIndex)
{
 8034f9c:	b580      	push	{r7, lr}
 8034f9e:	b088      	sub	sp, #32
 8034fa0:	af00      	add	r7, sp, #0
 8034fa2:	4603      	mov	r3, r0
 8034fa4:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            adcInitResult = GOS_ERROR;
 8034fa6:	23ae      	movs	r3, #174	; 0xae
 8034fa8:	77fb      	strb	r3, [r7, #31]
    drv_adcPeriphInstance_t instance      = 0u;
 8034faa:	2300      	movs	r3, #0
 8034fac:	77bb      	strb	r3, [r7, #30]
    ADC_ChannelConfTypeDef  sConfig       = {0};
 8034fae:	f107 030c 	add.w	r3, r7, #12
 8034fb2:	2200      	movs	r2, #0
 8034fb4:	601a      	str	r2, [r3, #0]
 8034fb6:	605a      	str	r2, [r3, #4]
 8034fb8:	609a      	str	r2, [r3, #8]
 8034fba:	60da      	str	r2, [r3, #12]

    /*
     * Function code.
     */
    if (adcConfig != NULL && adcInstanceIndex < (adcConfigSize / sizeof(drv_adcDescriptor_t)))
 8034fbc:	79fa      	ldrb	r2, [r7, #7]
 8034fbe:	4bb1      	ldr	r3, [pc, #708]	; (8035284 <drv_adcInitInstance+0x2e8>)
 8034fc0:	681b      	ldr	r3, [r3, #0]
 8034fc2:	49b1      	ldr	r1, [pc, #708]	; (8035288 <drv_adcInitInstance+0x2ec>)
 8034fc4:	fba1 1303 	umull	r1, r3, r1, r3
 8034fc8:	099b      	lsrs	r3, r3, #6
 8034fca:	429a      	cmp	r2, r3
 8034fcc:	f080 8154 	bcs.w	8035278 <drv_adcInitInstance+0x2dc>
    {
        instance = adcConfig[adcInstanceIndex].periphInstance;
 8034fd0:	79fa      	ldrb	r2, [r7, #7]
 8034fd2:	49ae      	ldr	r1, [pc, #696]	; (803528c <drv_adcInitInstance+0x2f0>)
 8034fd4:	4613      	mov	r3, r2
 8034fd6:	011b      	lsls	r3, r3, #4
 8034fd8:	4413      	add	r3, r2
 8034fda:	009b      	lsls	r3, r3, #2
 8034fdc:	440b      	add	r3, r1
 8034fde:	781b      	ldrb	r3, [r3, #0]
 8034fe0:	77bb      	strb	r3, [r7, #30]

        hadcs[instance].Instance = adcInstanceLut[instance];
 8034fe2:	7fbb      	ldrb	r3, [r7, #30]
 8034fe4:	7fba      	ldrb	r2, [r7, #30]
 8034fe6:	49aa      	ldr	r1, [pc, #680]	; (8035290 <drv_adcInitInstance+0x2f4>)
 8034fe8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8034fec:	48a9      	ldr	r0, [pc, #676]	; (8035294 <drv_adcInitInstance+0x2f8>)
 8034fee:	4613      	mov	r3, r2
 8034ff0:	00db      	lsls	r3, r3, #3
 8034ff2:	4413      	add	r3, r2
 8034ff4:	00db      	lsls	r3, r3, #3
 8034ff6:	4403      	add	r3, r0
 8034ff8:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.ClockPrescaler = adcConfig[adcInstanceIndex].clockPrescaler;
 8034ffa:	79f9      	ldrb	r1, [r7, #7]
 8034ffc:	7fba      	ldrb	r2, [r7, #30]
 8034ffe:	48a3      	ldr	r0, [pc, #652]	; (803528c <drv_adcInitInstance+0x2f0>)
 8035000:	460b      	mov	r3, r1
 8035002:	011b      	lsls	r3, r3, #4
 8035004:	440b      	add	r3, r1
 8035006:	009b      	lsls	r3, r3, #2
 8035008:	4403      	add	r3, r0
 803500a:	3304      	adds	r3, #4
 803500c:	6819      	ldr	r1, [r3, #0]
 803500e:	48a1      	ldr	r0, [pc, #644]	; (8035294 <drv_adcInitInstance+0x2f8>)
 8035010:	4613      	mov	r3, r2
 8035012:	00db      	lsls	r3, r3, #3
 8035014:	4413      	add	r3, r2
 8035016:	00db      	lsls	r3, r3, #3
 8035018:	4403      	add	r3, r0
 803501a:	3304      	adds	r3, #4
 803501c:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.ContinuousConvMode = adcConfig[adcInstanceIndex].continuousConvMode;
 803501e:	79fa      	ldrb	r2, [r7, #7]
 8035020:	499a      	ldr	r1, [pc, #616]	; (803528c <drv_adcInitInstance+0x2f0>)
 8035022:	4613      	mov	r3, r2
 8035024:	011b      	lsls	r3, r3, #4
 8035026:	4413      	add	r3, r2
 8035028:	009b      	lsls	r3, r3, #2
 803502a:	440b      	add	r3, r1
 803502c:	3310      	adds	r3, #16
 803502e:	681b      	ldr	r3, [r3, #0]
 8035030:	7fba      	ldrb	r2, [r7, #30]
 8035032:	b2d8      	uxtb	r0, r3
 8035034:	4997      	ldr	r1, [pc, #604]	; (8035294 <drv_adcInitInstance+0x2f8>)
 8035036:	4613      	mov	r3, r2
 8035038:	00db      	lsls	r3, r3, #3
 803503a:	4413      	add	r3, r2
 803503c:	00db      	lsls	r3, r3, #3
 803503e:	440b      	add	r3, r1
 8035040:	3318      	adds	r3, #24
 8035042:	4602      	mov	r2, r0
 8035044:	701a      	strb	r2, [r3, #0]
        hadcs[instance].Init.DMAContinuousRequests = adcConfig[adcInstanceIndex].dmaContinuousRequests;
 8035046:	79fa      	ldrb	r2, [r7, #7]
 8035048:	4990      	ldr	r1, [pc, #576]	; (803528c <drv_adcInitInstance+0x2f0>)
 803504a:	4613      	mov	r3, r2
 803504c:	011b      	lsls	r3, r3, #4
 803504e:	4413      	add	r3, r2
 8035050:	009b      	lsls	r3, r3, #2
 8035052:	440b      	add	r3, r1
 8035054:	332c      	adds	r3, #44	; 0x2c
 8035056:	681b      	ldr	r3, [r3, #0]
 8035058:	7fba      	ldrb	r2, [r7, #30]
 803505a:	b2d8      	uxtb	r0, r3
 803505c:	498d      	ldr	r1, [pc, #564]	; (8035294 <drv_adcInitInstance+0x2f8>)
 803505e:	4613      	mov	r3, r2
 8035060:	00db      	lsls	r3, r3, #3
 8035062:	4413      	add	r3, r2
 8035064:	00db      	lsls	r3, r3, #3
 8035066:	440b      	add	r3, r1
 8035068:	3330      	adds	r3, #48	; 0x30
 803506a:	4602      	mov	r2, r0
 803506c:	701a      	strb	r2, [r3, #0]
        hadcs[instance].Init.DataAlign = adcConfig[adcInstanceIndex].dataAlign;
 803506e:	79f9      	ldrb	r1, [r7, #7]
 8035070:	7fba      	ldrb	r2, [r7, #30]
 8035072:	4886      	ldr	r0, [pc, #536]	; (803528c <drv_adcInitInstance+0x2f0>)
 8035074:	460b      	mov	r3, r1
 8035076:	011b      	lsls	r3, r3, #4
 8035078:	440b      	add	r3, r1
 803507a:	009b      	lsls	r3, r3, #2
 803507c:	4403      	add	r3, r0
 803507e:	3320      	adds	r3, #32
 8035080:	6819      	ldr	r1, [r3, #0]
 8035082:	4884      	ldr	r0, [pc, #528]	; (8035294 <drv_adcInitInstance+0x2f8>)
 8035084:	4613      	mov	r3, r2
 8035086:	00db      	lsls	r3, r3, #3
 8035088:	4413      	add	r3, r2
 803508a:	00db      	lsls	r3, r3, #3
 803508c:	4403      	add	r3, r0
 803508e:	330c      	adds	r3, #12
 8035090:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.DiscontinuousConvMode = adcConfig[adcInstanceIndex].discontinuousConvMode;
 8035092:	79fa      	ldrb	r2, [r7, #7]
 8035094:	497d      	ldr	r1, [pc, #500]	; (803528c <drv_adcInitInstance+0x2f0>)
 8035096:	4613      	mov	r3, r2
 8035098:	011b      	lsls	r3, r3, #4
 803509a:	4413      	add	r3, r2
 803509c:	009b      	lsls	r3, r3, #2
 803509e:	440b      	add	r3, r1
 80350a0:	3314      	adds	r3, #20
 80350a2:	681b      	ldr	r3, [r3, #0]
 80350a4:	7fba      	ldrb	r2, [r7, #30]
 80350a6:	b2d8      	uxtb	r0, r3
 80350a8:	497a      	ldr	r1, [pc, #488]	; (8035294 <drv_adcInitInstance+0x2f8>)
 80350aa:	4613      	mov	r3, r2
 80350ac:	00db      	lsls	r3, r3, #3
 80350ae:	4413      	add	r3, r2
 80350b0:	00db      	lsls	r3, r3, #3
 80350b2:	440b      	add	r3, r1
 80350b4:	3320      	adds	r3, #32
 80350b6:	4602      	mov	r2, r0
 80350b8:	701a      	strb	r2, [r3, #0]
        hadcs[instance].Init.EOCSelection = adcConfig[adcInstanceIndex].eocSelection;
 80350ba:	79f9      	ldrb	r1, [r7, #7]
 80350bc:	7fba      	ldrb	r2, [r7, #30]
 80350be:	4873      	ldr	r0, [pc, #460]	; (803528c <drv_adcInitInstance+0x2f0>)
 80350c0:	460b      	mov	r3, r1
 80350c2:	011b      	lsls	r3, r3, #4
 80350c4:	440b      	add	r3, r1
 80350c6:	009b      	lsls	r3, r3, #2
 80350c8:	4403      	add	r3, r0
 80350ca:	3330      	adds	r3, #48	; 0x30
 80350cc:	6819      	ldr	r1, [r3, #0]
 80350ce:	4871      	ldr	r0, [pc, #452]	; (8035294 <drv_adcInitInstance+0x2f8>)
 80350d0:	4613      	mov	r3, r2
 80350d2:	00db      	lsls	r3, r3, #3
 80350d4:	4413      	add	r3, r2
 80350d6:	00db      	lsls	r3, r3, #3
 80350d8:	4403      	add	r3, r0
 80350da:	3314      	adds	r3, #20
 80350dc:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.ExternalTrigConv = adcConfig[adcInstanceIndex].externalTrigConv;
 80350de:	79f9      	ldrb	r1, [r7, #7]
 80350e0:	7fba      	ldrb	r2, [r7, #30]
 80350e2:	486a      	ldr	r0, [pc, #424]	; (803528c <drv_adcInitInstance+0x2f0>)
 80350e4:	460b      	mov	r3, r1
 80350e6:	011b      	lsls	r3, r3, #4
 80350e8:	440b      	add	r3, r1
 80350ea:	009b      	lsls	r3, r3, #2
 80350ec:	4403      	add	r3, r0
 80350ee:	331c      	adds	r3, #28
 80350f0:	6819      	ldr	r1, [r3, #0]
 80350f2:	4868      	ldr	r0, [pc, #416]	; (8035294 <drv_adcInitInstance+0x2f8>)
 80350f4:	4613      	mov	r3, r2
 80350f6:	00db      	lsls	r3, r3, #3
 80350f8:	4413      	add	r3, r2
 80350fa:	00db      	lsls	r3, r3, #3
 80350fc:	4403      	add	r3, r0
 80350fe:	3328      	adds	r3, #40	; 0x28
 8035100:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.ExternalTrigConvEdge = adcConfig[adcInstanceIndex].externalTrigConvEdge;
 8035102:	79f9      	ldrb	r1, [r7, #7]
 8035104:	7fba      	ldrb	r2, [r7, #30]
 8035106:	4861      	ldr	r0, [pc, #388]	; (803528c <drv_adcInitInstance+0x2f0>)
 8035108:	460b      	mov	r3, r1
 803510a:	011b      	lsls	r3, r3, #4
 803510c:	440b      	add	r3, r1
 803510e:	009b      	lsls	r3, r3, #2
 8035110:	4403      	add	r3, r0
 8035112:	3318      	adds	r3, #24
 8035114:	6819      	ldr	r1, [r3, #0]
 8035116:	485f      	ldr	r0, [pc, #380]	; (8035294 <drv_adcInitInstance+0x2f8>)
 8035118:	4613      	mov	r3, r2
 803511a:	00db      	lsls	r3, r3, #3
 803511c:	4413      	add	r3, r2
 803511e:	00db      	lsls	r3, r3, #3
 8035120:	4403      	add	r3, r0
 8035122:	332c      	adds	r3, #44	; 0x2c
 8035124:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.NbrOfConversion = adcConfig[adcInstanceIndex].nbrOfConversion;
 8035126:	79f9      	ldrb	r1, [r7, #7]
 8035128:	7fba      	ldrb	r2, [r7, #30]
 803512a:	4858      	ldr	r0, [pc, #352]	; (803528c <drv_adcInitInstance+0x2f0>)
 803512c:	460b      	mov	r3, r1
 803512e:	011b      	lsls	r3, r3, #4
 8035130:	440b      	add	r3, r1
 8035132:	009b      	lsls	r3, r3, #2
 8035134:	4403      	add	r3, r0
 8035136:	3324      	adds	r3, #36	; 0x24
 8035138:	6819      	ldr	r1, [r3, #0]
 803513a:	4856      	ldr	r0, [pc, #344]	; (8035294 <drv_adcInitInstance+0x2f8>)
 803513c:	4613      	mov	r3, r2
 803513e:	00db      	lsls	r3, r3, #3
 8035140:	4413      	add	r3, r2
 8035142:	00db      	lsls	r3, r3, #3
 8035144:	4403      	add	r3, r0
 8035146:	331c      	adds	r3, #28
 8035148:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.NbrOfDiscConversion = adcConfig[adcInstanceIndex].nbrOfDiscConversion;
 803514a:	79f9      	ldrb	r1, [r7, #7]
 803514c:	7fba      	ldrb	r2, [r7, #30]
 803514e:	484f      	ldr	r0, [pc, #316]	; (803528c <drv_adcInitInstance+0x2f0>)
 8035150:	460b      	mov	r3, r1
 8035152:	011b      	lsls	r3, r3, #4
 8035154:	440b      	add	r3, r1
 8035156:	009b      	lsls	r3, r3, #2
 8035158:	4403      	add	r3, r0
 803515a:	3328      	adds	r3, #40	; 0x28
 803515c:	6819      	ldr	r1, [r3, #0]
 803515e:	484d      	ldr	r0, [pc, #308]	; (8035294 <drv_adcInitInstance+0x2f8>)
 8035160:	4613      	mov	r3, r2
 8035162:	00db      	lsls	r3, r3, #3
 8035164:	4413      	add	r3, r2
 8035166:	00db      	lsls	r3, r3, #3
 8035168:	4403      	add	r3, r0
 803516a:	3324      	adds	r3, #36	; 0x24
 803516c:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.Resolution = adcConfig[adcInstanceIndex].resolution;
 803516e:	79f9      	ldrb	r1, [r7, #7]
 8035170:	7fba      	ldrb	r2, [r7, #30]
 8035172:	4846      	ldr	r0, [pc, #280]	; (803528c <drv_adcInitInstance+0x2f0>)
 8035174:	460b      	mov	r3, r1
 8035176:	011b      	lsls	r3, r3, #4
 8035178:	440b      	add	r3, r1
 803517a:	009b      	lsls	r3, r3, #2
 803517c:	4403      	add	r3, r0
 803517e:	3308      	adds	r3, #8
 8035180:	6819      	ldr	r1, [r3, #0]
 8035182:	4844      	ldr	r0, [pc, #272]	; (8035294 <drv_adcInitInstance+0x2f8>)
 8035184:	4613      	mov	r3, r2
 8035186:	00db      	lsls	r3, r3, #3
 8035188:	4413      	add	r3, r2
 803518a:	00db      	lsls	r3, r3, #3
 803518c:	4403      	add	r3, r0
 803518e:	3308      	adds	r3, #8
 8035190:	6019      	str	r1, [r3, #0]
        hadcs[instance].Init.ScanConvMode = adcConfig[adcInstanceIndex].scanConvMode;
 8035192:	79f9      	ldrb	r1, [r7, #7]
 8035194:	7fba      	ldrb	r2, [r7, #30]
 8035196:	483d      	ldr	r0, [pc, #244]	; (803528c <drv_adcInitInstance+0x2f0>)
 8035198:	460b      	mov	r3, r1
 803519a:	011b      	lsls	r3, r3, #4
 803519c:	440b      	add	r3, r1
 803519e:	009b      	lsls	r3, r3, #2
 80351a0:	4403      	add	r3, r0
 80351a2:	330c      	adds	r3, #12
 80351a4:	6819      	ldr	r1, [r3, #0]
 80351a6:	483b      	ldr	r0, [pc, #236]	; (8035294 <drv_adcInitInstance+0x2f8>)
 80351a8:	4613      	mov	r3, r2
 80351aa:	00db      	lsls	r3, r3, #3
 80351ac:	4413      	add	r3, r2
 80351ae:	00db      	lsls	r3, r3, #3
 80351b0:	4403      	add	r3, r0
 80351b2:	3310      	adds	r3, #16
 80351b4:	6019      	str	r1, [r3, #0]

        /*
         *  Configure for the selected ADC regular channel its corresponding rank
         *  in the sequencer and its sample time.
         */
        sConfig.Channel      = adcConfig[adcInstanceIndex].channel;
 80351b6:	79fa      	ldrb	r2, [r7, #7]
 80351b8:	4934      	ldr	r1, [pc, #208]	; (803528c <drv_adcInitInstance+0x2f0>)
 80351ba:	4613      	mov	r3, r2
 80351bc:	011b      	lsls	r3, r3, #4
 80351be:	4413      	add	r3, r2
 80351c0:	009b      	lsls	r3, r3, #2
 80351c2:	440b      	add	r3, r1
 80351c4:	3334      	adds	r3, #52	; 0x34
 80351c6:	681b      	ldr	r3, [r3, #0]
 80351c8:	60fb      	str	r3, [r7, #12]
        sConfig.Rank         = adcConfig[adcInstanceIndex].rank;
 80351ca:	79fa      	ldrb	r2, [r7, #7]
 80351cc:	492f      	ldr	r1, [pc, #188]	; (803528c <drv_adcInitInstance+0x2f0>)
 80351ce:	4613      	mov	r3, r2
 80351d0:	011b      	lsls	r3, r3, #4
 80351d2:	4413      	add	r3, r2
 80351d4:	009b      	lsls	r3, r3, #2
 80351d6:	440b      	add	r3, r1
 80351d8:	3338      	adds	r3, #56	; 0x38
 80351da:	681b      	ldr	r3, [r3, #0]
 80351dc:	613b      	str	r3, [r7, #16]
        sConfig.SamplingTime = adcConfig[adcInstanceIndex].samplingTime;
 80351de:	79fa      	ldrb	r2, [r7, #7]
 80351e0:	492a      	ldr	r1, [pc, #168]	; (803528c <drv_adcInitInstance+0x2f0>)
 80351e2:	4613      	mov	r3, r2
 80351e4:	011b      	lsls	r3, r3, #4
 80351e6:	4413      	add	r3, r2
 80351e8:	009b      	lsls	r3, r3, #2
 80351ea:	440b      	add	r3, r1
 80351ec:	333c      	adds	r3, #60	; 0x3c
 80351ee:	681b      	ldr	r3, [r3, #0]
 80351f0:	617b      	str	r3, [r7, #20]

        if (HAL_ADC_Init         (&hadcs[instance])                 == HAL_OK      &&
 80351f2:	7fba      	ldrb	r2, [r7, #30]
 80351f4:	4613      	mov	r3, r2
 80351f6:	00db      	lsls	r3, r3, #3
 80351f8:	4413      	add	r3, r2
 80351fa:	00db      	lsls	r3, r3, #3
 80351fc:	4a25      	ldr	r2, [pc, #148]	; (8035294 <drv_adcInitInstance+0x2f8>)
 80351fe:	4413      	add	r3, r2
 8035200:	4618      	mov	r0, r3
 8035202:	f7f3 f997 	bl	8028534 <HAL_ADC_Init>
 8035206:	4603      	mov	r3, r0
 8035208:	2b00      	cmp	r3, #0
 803520a:	d135      	bne.n	8035278 <drv_adcInitInstance+0x2dc>
            HAL_ADC_ConfigChannel(&hadcs[instance], &sConfig)       == HAL_OK      &&
 803520c:	7fba      	ldrb	r2, [r7, #30]
 803520e:	4613      	mov	r3, r2
 8035210:	00db      	lsls	r3, r3, #3
 8035212:	4413      	add	r3, r2
 8035214:	00db      	lsls	r3, r3, #3
 8035216:	4a1f      	ldr	r2, [pc, #124]	; (8035294 <drv_adcInitInstance+0x2f8>)
 8035218:	4413      	add	r3, r2
 803521a:	f107 020c 	add.w	r2, r7, #12
 803521e:	4611      	mov	r1, r2
 8035220:	4618      	mov	r0, r3
 8035222:	f7f3 fcab 	bl	8028b7c <HAL_ADC_ConfigChannel>
 8035226:	4603      	mov	r3, r0
        if (HAL_ADC_Init         (&hadcs[instance])                 == HAL_OK      &&
 8035228:	2b00      	cmp	r3, #0
 803522a:	d125      	bne.n	8035278 <drv_adcInitInstance+0x2dc>
            gos_mutexInit        (&adcMutexes[instance])            == GOS_SUCCESS &&
 803522c:	7fbb      	ldrb	r3, [r7, #30]
 803522e:	009b      	lsls	r3, r3, #2
 8035230:	4a19      	ldr	r2, [pc, #100]	; (8035298 <drv_adcInitInstance+0x2fc>)
 8035232:	4413      	add	r3, r2
 8035234:	4618      	mov	r0, r3
 8035236:	f009 f865 	bl	803e304 <gos_mutexInit>
 803523a:	4603      	mov	r3, r0
            HAL_ADC_ConfigChannel(&hadcs[instance], &sConfig)       == HAL_OK      &&
 803523c:	2b55      	cmp	r3, #85	; 0x55
 803523e:	d11b      	bne.n	8035278 <drv_adcInitInstance+0x2dc>
            gos_triggerInit      (&adcReadyTriggers[instance])    == GOS_SUCCESS   &&
 8035240:	7fba      	ldrb	r2, [r7, #30]
 8035242:	4613      	mov	r3, r2
 8035244:	005b      	lsls	r3, r3, #1
 8035246:	4413      	add	r3, r2
 8035248:	009b      	lsls	r3, r3, #2
 803524a:	4a14      	ldr	r2, [pc, #80]	; (803529c <drv_adcInitInstance+0x300>)
 803524c:	4413      	add	r3, r2
 803524e:	4618      	mov	r0, r3
 8035250:	f00b fe46 	bl	8040ee0 <gos_triggerInit>
 8035254:	4603      	mov	r3, r0
            gos_mutexInit        (&adcMutexes[instance])            == GOS_SUCCESS &&
 8035256:	2b55      	cmp	r3, #85	; 0x55
 8035258:	d10e      	bne.n	8035278 <drv_adcInitInstance+0x2dc>
            gos_triggerReset     (&adcReadyTriggers[instance])    == GOS_SUCCESS
 803525a:	7fba      	ldrb	r2, [r7, #30]
 803525c:	4613      	mov	r3, r2
 803525e:	005b      	lsls	r3, r3, #1
 8035260:	4413      	add	r3, r2
 8035262:	009b      	lsls	r3, r3, #2
 8035264:	4a0d      	ldr	r2, [pc, #52]	; (803529c <drv_adcInitInstance+0x300>)
 8035266:	4413      	add	r3, r2
 8035268:	4618      	mov	r0, r3
 803526a:	f00b fe55 	bl	8040f18 <gos_triggerReset>
 803526e:	4603      	mov	r3, r0
            gos_triggerInit      (&adcReadyTriggers[instance])    == GOS_SUCCESS   &&
 8035270:	2b55      	cmp	r3, #85	; 0x55
 8035272:	d101      	bne.n	8035278 <drv_adcInitInstance+0x2dc>
            )
        {
            adcInitResult = GOS_SUCCESS;
 8035274:	2355      	movs	r3, #85	; 0x55
 8035276:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return adcInitResult;
 8035278:	7ffb      	ldrb	r3, [r7, #31]
}
 803527a:	4618      	mov	r0, r3
 803527c:	3720      	adds	r7, #32
 803527e:	46bd      	mov	sp, r7
 8035280:	bd80      	pop	{r7, pc}
 8035282:	bf00      	nop
 8035284:	200014e8 	.word	0x200014e8
 8035288:	f0f0f0f1 	.word	0xf0f0f0f1
 803528c:	08048c34 	.word	0x08048c34
 8035290:	20001a84 	.word	0x20001a84
 8035294:	200062a8 	.word	0x200062a8
 8035298:	20006380 	.word	0x20006380
 803529c:	2000638c 	.word	0x2000638c

080352a0 <drv_adcGetValueBlocking>:
 */
gos_result_t drv_adcGetValueBlocking (
        drv_adcPeriphInstance_t instance, u16_t* pValue,
        u32_t                   mutexTmo, u32_t  readTmo
        )
{
 80352a0:	b580      	push	{r7, lr}
 80352a2:	b086      	sub	sp, #24
 80352a4:	af00      	add	r7, sp, #0
 80352a6:	60b9      	str	r1, [r7, #8]
 80352a8:	607a      	str	r2, [r7, #4]
 80352aa:	603b      	str	r3, [r7, #0]
 80352ac:	4603      	mov	r3, r0
 80352ae:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t adcDriverGetValueResult = GOS_ERROR;
 80352b0:	23ae      	movs	r3, #174	; 0xae
 80352b2:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pValue                                               != NULL &&
 80352b4:	68bb      	ldr	r3, [r7, #8]
 80352b6:	2b00      	cmp	r3, #0
 80352b8:	d042      	beq.n	8035340 <drv_adcGetValueBlocking+0xa0>
        gos_mutexLock(&adcMutexes[instance], mutexTmo)       == GOS_SUCCESS &&
 80352ba:	7bfb      	ldrb	r3, [r7, #15]
 80352bc:	009b      	lsls	r3, r3, #2
 80352be:	4a26      	ldr	r2, [pc, #152]	; (8035358 <drv_adcGetValueBlocking+0xb8>)
 80352c0:	4413      	add	r3, r2
 80352c2:	6879      	ldr	r1, [r7, #4]
 80352c4:	4618      	mov	r0, r3
 80352c6:	f009 f837 	bl	803e338 <gos_mutexLock>
 80352ca:	4603      	mov	r3, r0
    if (pValue                                               != NULL &&
 80352cc:	2b55      	cmp	r3, #85	; 0x55
 80352ce:	d137      	bne.n	8035340 <drv_adcGetValueBlocking+0xa0>
        HAL_ADC_Start(&hadcs[instance])                      == HAL_OK &&
 80352d0:	7bfa      	ldrb	r2, [r7, #15]
 80352d2:	4613      	mov	r3, r2
 80352d4:	00db      	lsls	r3, r3, #3
 80352d6:	4413      	add	r3, r2
 80352d8:	00db      	lsls	r3, r3, #3
 80352da:	4a20      	ldr	r2, [pc, #128]	; (803535c <drv_adcGetValueBlocking+0xbc>)
 80352dc:	4413      	add	r3, r2
 80352de:	4618      	mov	r0, r3
 80352e0:	f7f3 f96c 	bl	80285bc <HAL_ADC_Start>
 80352e4:	4603      	mov	r3, r0
        gos_mutexLock(&adcMutexes[instance], mutexTmo)       == GOS_SUCCESS &&
 80352e6:	2b00      	cmp	r3, #0
 80352e8:	d12a      	bne.n	8035340 <drv_adcGetValueBlocking+0xa0>
        HAL_ADC_PollForConversion(&hadcs[instance], readTmo) == HAL_OK)
 80352ea:	7bfa      	ldrb	r2, [r7, #15]
 80352ec:	4613      	mov	r3, r2
 80352ee:	00db      	lsls	r3, r3, #3
 80352f0:	4413      	add	r3, r2
 80352f2:	00db      	lsls	r3, r3, #3
 80352f4:	4a19      	ldr	r2, [pc, #100]	; (803535c <drv_adcGetValueBlocking+0xbc>)
 80352f6:	4413      	add	r3, r2
 80352f8:	6839      	ldr	r1, [r7, #0]
 80352fa:	4618      	mov	r0, r3
 80352fc:	f7f3 fa57 	bl	80287ae <HAL_ADC_PollForConversion>
 8035300:	4603      	mov	r3, r0
        HAL_ADC_Start(&hadcs[instance])                      == HAL_OK &&
 8035302:	2b00      	cmp	r3, #0
 8035304:	d11c      	bne.n	8035340 <drv_adcGetValueBlocking+0xa0>
    {
        *pValue = HAL_ADC_GetValue(&hadcs[instance]);
 8035306:	7bfa      	ldrb	r2, [r7, #15]
 8035308:	4613      	mov	r3, r2
 803530a:	00db      	lsls	r3, r3, #3
 803530c:	4413      	add	r3, r2
 803530e:	00db      	lsls	r3, r3, #3
 8035310:	4a12      	ldr	r2, [pc, #72]	; (803535c <drv_adcGetValueBlocking+0xbc>)
 8035312:	4413      	add	r3, r2
 8035314:	4618      	mov	r0, r3
 8035316:	f7f3 fc0f 	bl	8028b38 <HAL_ADC_GetValue>
 803531a:	4603      	mov	r3, r0
 803531c:	b29a      	uxth	r2, r3
 803531e:	68bb      	ldr	r3, [r7, #8]
 8035320:	801a      	strh	r2, [r3, #0]

        if (HAL_ADC_Stop(&hadcs[instance]) == HAL_OK)
 8035322:	7bfa      	ldrb	r2, [r7, #15]
 8035324:	4613      	mov	r3, r2
 8035326:	00db      	lsls	r3, r3, #3
 8035328:	4413      	add	r3, r2
 803532a:	00db      	lsls	r3, r3, #3
 803532c:	4a0b      	ldr	r2, [pc, #44]	; (803535c <drv_adcGetValueBlocking+0xbc>)
 803532e:	4413      	add	r3, r2
 8035330:	4618      	mov	r0, r3
 8035332:	f7f3 fa09 	bl	8028748 <HAL_ADC_Stop>
 8035336:	4603      	mov	r3, r0
 8035338:	2b00      	cmp	r3, #0
 803533a:	d101      	bne.n	8035340 <drv_adcGetValueBlocking+0xa0>
        {
            adcDriverGetValueResult = GOS_SUCCESS;
 803533c:	2355      	movs	r3, #85	; 0x55
 803533e:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex or ADC error.
    }

    (void_t) gos_mutexUnlock(&adcMutexes[instance]);
 8035340:	7bfb      	ldrb	r3, [r7, #15]
 8035342:	009b      	lsls	r3, r3, #2
 8035344:	4a04      	ldr	r2, [pc, #16]	; (8035358 <drv_adcGetValueBlocking+0xb8>)
 8035346:	4413      	add	r3, r2
 8035348:	4618      	mov	r0, r3
 803534a:	f009 f8fb 	bl	803e544 <gos_mutexUnlock>

    return adcDriverGetValueResult;
 803534e:	7dfb      	ldrb	r3, [r7, #23]
}
 8035350:	4618      	mov	r0, r3
 8035352:	3718      	adds	r7, #24
 8035354:	46bd      	mov	sp, r7
 8035356:	bd80      	pop	{r7, pc}
 8035358:	20006380 	.word	0x20006380
 803535c:	200062a8 	.word	0x200062a8

08035360 <HAL_ADC_ConvCpltCallback>:

/*
 * Function: HAL_ADC_ConvCpltCallback
 */
void_t HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef* hadc)
{
 8035360:	b580      	push	{r7, lr}
 8035362:	b082      	sub	sp, #8
 8035364:	af00      	add	r7, sp, #0
 8035366:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hadc->Instance == adcInstanceLut[DRV_ADC_INSTANCE_1])
 8035368:	687b      	ldr	r3, [r7, #4]
 803536a:	681a      	ldr	r2, [r3, #0]
 803536c:	4b0f      	ldr	r3, [pc, #60]	; (80353ac <HAL_ADC_ConvCpltCallback+0x4c>)
 803536e:	681b      	ldr	r3, [r3, #0]
 8035370:	429a      	cmp	r2, r3
 8035372:	d103      	bne.n	803537c <HAL_ADC_ConvCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&adcReadyTriggers[DRV_ADC_INSTANCE_1]);
 8035374:	480e      	ldr	r0, [pc, #56]	; (80353b0 <HAL_ADC_ConvCpltCallback+0x50>)
 8035376:	f00b fed7 	bl	8041128 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 803537a:	e012      	b.n	80353a2 <HAL_ADC_ConvCpltCallback+0x42>
    else if (hadc->Instance == adcInstanceLut[DRV_ADC_INSTANCE_2])
 803537c:	687b      	ldr	r3, [r7, #4]
 803537e:	681a      	ldr	r2, [r3, #0]
 8035380:	4b0a      	ldr	r3, [pc, #40]	; (80353ac <HAL_ADC_ConvCpltCallback+0x4c>)
 8035382:	685b      	ldr	r3, [r3, #4]
 8035384:	429a      	cmp	r2, r3
 8035386:	d103      	bne.n	8035390 <HAL_ADC_ConvCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&adcReadyTriggers[DRV_ADC_INSTANCE_2]);
 8035388:	480a      	ldr	r0, [pc, #40]	; (80353b4 <HAL_ADC_ConvCpltCallback+0x54>)
 803538a:	f00b fecd 	bl	8041128 <gos_triggerIncrement>
}
 803538e:	e008      	b.n	80353a2 <HAL_ADC_ConvCpltCallback+0x42>
    else if (hadc->Instance == adcInstanceLut[DRV_ADC_INSTANCE_3])
 8035390:	687b      	ldr	r3, [r7, #4]
 8035392:	681a      	ldr	r2, [r3, #0]
 8035394:	4b05      	ldr	r3, [pc, #20]	; (80353ac <HAL_ADC_ConvCpltCallback+0x4c>)
 8035396:	689b      	ldr	r3, [r3, #8]
 8035398:	429a      	cmp	r2, r3
 803539a:	d102      	bne.n	80353a2 <HAL_ADC_ConvCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&adcReadyTriggers[DRV_ADC_INSTANCE_3]);
 803539c:	4806      	ldr	r0, [pc, #24]	; (80353b8 <HAL_ADC_ConvCpltCallback+0x58>)
 803539e:	f00b fec3 	bl	8041128 <gos_triggerIncrement>
}
 80353a2:	bf00      	nop
 80353a4:	3708      	adds	r7, #8
 80353a6:	46bd      	mov	sp, r7
 80353a8:	bd80      	pop	{r7, pc}
 80353aa:	bf00      	nop
 80353ac:	20001a84 	.word	0x20001a84
 80353b0:	2000638c 	.word	0x2000638c
 80353b4:	20006398 	.word	0x20006398
 80353b8:	200063a4 	.word	0x200063a4

080353bc <ADC_IRQHandler>:

/*
 * Function: ADC_IRQHandler
 */
void_t ADC_IRQHandler (void_t)
{
 80353bc:	b580      	push	{r7, lr}
 80353be:	b082      	sub	sp, #8
 80353c0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    drv_adcPeriphInstance_t instance = DRV_ADC_INSTANCE_1;
 80353c2:	2300      	movs	r3, #0
 80353c4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80353c6:	4b1f      	ldr	r3, [pc, #124]	; (8035444 <ADC_IRQHandler+0x88>)
 80353c8:	781b      	ldrb	r3, [r3, #0]
 80353ca:	2b00      	cmp	r3, #0
 80353cc:	d105      	bne.n	80353da <ADC_IRQHandler+0x1e>
 80353ce:	4b1e      	ldr	r3, [pc, #120]	; (8035448 <ADC_IRQHandler+0x8c>)
 80353d0:	781b      	ldrb	r3, [r3, #0]
 80353d2:	3301      	adds	r3, #1
 80353d4:	b2da      	uxtb	r2, r3
 80353d6:	4b1c      	ldr	r3, [pc, #112]	; (8035448 <ADC_IRQHandler+0x8c>)
 80353d8:	701a      	strb	r2, [r3, #0]
 80353da:	4b1a      	ldr	r3, [pc, #104]	; (8035444 <ADC_IRQHandler+0x88>)
 80353dc:	781b      	ldrb	r3, [r3, #0]
 80353de:	3301      	adds	r3, #1
 80353e0:	b2da      	uxtb	r2, r3
 80353e2:	4b18      	ldr	r3, [pc, #96]	; (8035444 <ADC_IRQHandler+0x88>)
 80353e4:	701a      	strb	r2, [r3, #0]

    for (instance = DRV_ADC_INSTANCE_1; instance < DRV_ADC_NUM_OF_INSTANCES; instance++)
 80353e6:	2300      	movs	r3, #0
 80353e8:	71fb      	strb	r3, [r7, #7]
 80353ea:	e00c      	b.n	8035406 <ADC_IRQHandler+0x4a>
    {
        HAL_ADC_IRQHandler(&hadcs[instance]);
 80353ec:	79fa      	ldrb	r2, [r7, #7]
 80353ee:	4613      	mov	r3, r2
 80353f0:	00db      	lsls	r3, r3, #3
 80353f2:	4413      	add	r3, r2
 80353f4:	00db      	lsls	r3, r3, #3
 80353f6:	4a15      	ldr	r2, [pc, #84]	; (803544c <ADC_IRQHandler+0x90>)
 80353f8:	4413      	add	r3, r2
 80353fa:	4618      	mov	r0, r3
 80353fc:	f7f3 fa5b 	bl	80288b6 <HAL_ADC_IRQHandler>
    for (instance = DRV_ADC_INSTANCE_1; instance < DRV_ADC_NUM_OF_INSTANCES; instance++)
 8035400:	79fb      	ldrb	r3, [r7, #7]
 8035402:	3301      	adds	r3, #1
 8035404:	71fb      	strb	r3, [r7, #7]
 8035406:	79fb      	ldrb	r3, [r7, #7]
 8035408:	2b02      	cmp	r3, #2
 803540a:	d9ef      	bls.n	80353ec <ADC_IRQHandler+0x30>
    }

    GOS_ISR_EXIT
 803540c:	4b0d      	ldr	r3, [pc, #52]	; (8035444 <ADC_IRQHandler+0x88>)
 803540e:	781b      	ldrb	r3, [r3, #0]
 8035410:	2b00      	cmp	r3, #0
 8035412:	d005      	beq.n	8035420 <ADC_IRQHandler+0x64>
 8035414:	4b0b      	ldr	r3, [pc, #44]	; (8035444 <ADC_IRQHandler+0x88>)
 8035416:	781b      	ldrb	r3, [r3, #0]
 8035418:	3b01      	subs	r3, #1
 803541a:	b2da      	uxtb	r2, r3
 803541c:	4b09      	ldr	r3, [pc, #36]	; (8035444 <ADC_IRQHandler+0x88>)
 803541e:	701a      	strb	r2, [r3, #0]
 8035420:	4b08      	ldr	r3, [pc, #32]	; (8035444 <ADC_IRQHandler+0x88>)
 8035422:	781b      	ldrb	r3, [r3, #0]
 8035424:	2b00      	cmp	r3, #0
 8035426:	d109      	bne.n	803543c <ADC_IRQHandler+0x80>
 8035428:	4b07      	ldr	r3, [pc, #28]	; (8035448 <ADC_IRQHandler+0x8c>)
 803542a:	781b      	ldrb	r3, [r3, #0]
 803542c:	2b00      	cmp	r3, #0
 803542e:	d005      	beq.n	803543c <ADC_IRQHandler+0x80>
 8035430:	4b05      	ldr	r3, [pc, #20]	; (8035448 <ADC_IRQHandler+0x8c>)
 8035432:	781b      	ldrb	r3, [r3, #0]
 8035434:	3b01      	subs	r3, #1
 8035436:	b2da      	uxtb	r2, r3
 8035438:	4b03      	ldr	r3, [pc, #12]	; (8035448 <ADC_IRQHandler+0x8c>)
 803543a:	701a      	strb	r2, [r3, #0]
}
 803543c:	bf00      	nop
 803543e:	3708      	adds	r7, #8
 8035440:	46bd      	mov	sp, r7
 8035442:	bd80      	pop	{r7, pc}
 8035444:	20007446 	.word	0x20007446
 8035448:	20007445 	.word	0x20007445
 803544c:	200062a8 	.word	0x200062a8

08035450 <HAL_ADC_MspInit>:

/*
 * Function: HAL_ADC_MspInit
 */
void_t HAL_ADC_MspInit (ADC_HandleTypeDef* hadc)
{
 8035450:	b480      	push	{r7}
 8035452:	b085      	sub	sp, #20
 8035454:	af00      	add	r7, sp, #0
 8035456:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_adcPeriphInstance_t instance = 0u;
 8035458:	2300      	movs	r3, #0
 803545a:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 803545c:	2300      	movs	r3, #0
 803545e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_ADC_NUM_OF_INSTANCES; instance++)
 8035460:	2300      	movs	r3, #0
 8035462:	73fb      	strb	r3, [r7, #15]
 8035464:	e046      	b.n	80354f4 <HAL_ADC_MspInit+0xa4>
    {
        if (adcInstanceLut[instance] == hadc->Instance)
 8035466:	7bfb      	ldrb	r3, [r7, #15]
 8035468:	4a27      	ldr	r2, [pc, #156]	; (8035508 <HAL_ADC_MspInit+0xb8>)
 803546a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 803546e:	687b      	ldr	r3, [r7, #4]
 8035470:	681b      	ldr	r3, [r3, #0]
 8035472:	429a      	cmp	r2, r3
 8035474:	d13b      	bne.n	80354ee <HAL_ADC_MspInit+0x9e>
        {
            for (idx = 0u; idx < adcConfigSize / sizeof(drv_adcDescriptor_t); idx++)
 8035476:	2300      	movs	r3, #0
 8035478:	73bb      	strb	r3, [r7, #14]
 803547a:	e02f      	b.n	80354dc <HAL_ADC_MspInit+0x8c>
            {
                if (adcConfig[idx].periphInstance == instance)
 803547c:	7bba      	ldrb	r2, [r7, #14]
 803547e:	4923      	ldr	r1, [pc, #140]	; (803550c <HAL_ADC_MspInit+0xbc>)
 8035480:	4613      	mov	r3, r2
 8035482:	011b      	lsls	r3, r3, #4
 8035484:	4413      	add	r3, r2
 8035486:	009b      	lsls	r3, r3, #2
 8035488:	440b      	add	r3, r1
 803548a:	781b      	ldrb	r3, [r3, #0]
 803548c:	7bfa      	ldrb	r2, [r7, #15]
 803548e:	429a      	cmp	r2, r3
 8035490:	d121      	bne.n	80354d6 <HAL_ADC_MspInit+0x86>
                {
                    if (adcConfig[idx].dmaConfig != NULL)
 8035492:	7bba      	ldrb	r2, [r7, #14]
 8035494:	491d      	ldr	r1, [pc, #116]	; (803550c <HAL_ADC_MspInit+0xbc>)
 8035496:	4613      	mov	r3, r2
 8035498:	011b      	lsls	r3, r3, #4
 803549a:	4413      	add	r3, r2
 803549c:	009b      	lsls	r3, r3, #2
 803549e:	440b      	add	r3, r1
 80354a0:	3340      	adds	r3, #64	; 0x40
 80354a2:	681b      	ldr	r3, [r3, #0]
 80354a4:	2b00      	cmp	r3, #0
 80354a6:	d016      	beq.n	80354d6 <HAL_ADC_MspInit+0x86>
                    {
                        __HAL_LINKDMA(hadc, DMA_Handle, adcConfig[idx].dmaConfig->hdma);
 80354a8:	7bba      	ldrb	r2, [r7, #14]
 80354aa:	4918      	ldr	r1, [pc, #96]	; (803550c <HAL_ADC_MspInit+0xbc>)
 80354ac:	4613      	mov	r3, r2
 80354ae:	011b      	lsls	r3, r3, #4
 80354b0:	4413      	add	r3, r2
 80354b2:	009b      	lsls	r3, r3, #2
 80354b4:	440b      	add	r3, r1
 80354b6:	3340      	adds	r3, #64	; 0x40
 80354b8:	681b      	ldr	r3, [r3, #0]
 80354ba:	1d1a      	adds	r2, r3, #4
 80354bc:	687b      	ldr	r3, [r7, #4]
 80354be:	639a      	str	r2, [r3, #56]	; 0x38
 80354c0:	7bba      	ldrb	r2, [r7, #14]
 80354c2:	4912      	ldr	r1, [pc, #72]	; (803550c <HAL_ADC_MspInit+0xbc>)
 80354c4:	4613      	mov	r3, r2
 80354c6:	011b      	lsls	r3, r3, #4
 80354c8:	4413      	add	r3, r2
 80354ca:	009b      	lsls	r3, r3, #2
 80354cc:	440b      	add	r3, r1
 80354ce:	3340      	adds	r3, #64	; 0x40
 80354d0:	681b      	ldr	r3, [r3, #0]
 80354d2:	687a      	ldr	r2, [r7, #4]
 80354d4:	63da      	str	r2, [r3, #60]	; 0x3c
            for (idx = 0u; idx < adcConfigSize / sizeof(drv_adcDescriptor_t); idx++)
 80354d6:	7bbb      	ldrb	r3, [r7, #14]
 80354d8:	3301      	adds	r3, #1
 80354da:	73bb      	strb	r3, [r7, #14]
 80354dc:	7bba      	ldrb	r2, [r7, #14]
 80354de:	4b0c      	ldr	r3, [pc, #48]	; (8035510 <HAL_ADC_MspInit+0xc0>)
 80354e0:	681b      	ldr	r3, [r3, #0]
 80354e2:	490c      	ldr	r1, [pc, #48]	; (8035514 <HAL_ADC_MspInit+0xc4>)
 80354e4:	fba1 1303 	umull	r1, r3, r1, r3
 80354e8:	099b      	lsrs	r3, r3, #6
 80354ea:	429a      	cmp	r2, r3
 80354ec:	d3c6      	bcc.n	803547c <HAL_ADC_MspInit+0x2c>
    for (instance = 0u; instance < DRV_ADC_NUM_OF_INSTANCES; instance++)
 80354ee:	7bfb      	ldrb	r3, [r7, #15]
 80354f0:	3301      	adds	r3, #1
 80354f2:	73fb      	strb	r3, [r7, #15]
 80354f4:	7bfb      	ldrb	r3, [r7, #15]
 80354f6:	2b02      	cmp	r3, #2
 80354f8:	d9b5      	bls.n	8035466 <HAL_ADC_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 80354fa:	bf00      	nop
 80354fc:	bf00      	nop
 80354fe:	3714      	adds	r7, #20
 8035500:	46bd      	mov	sp, r7
 8035502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035506:	4770      	bx	lr
 8035508:	20001a84 	.word	0x20001a84
 803550c:	08048c34 	.word	0x08048c34
 8035510:	200014e8 	.word	0x200014e8
 8035514:	f0f0f0f1 	.word	0xf0f0f0f1

08035518 <drv_crcGetCrc32>:

/*
 * Function: drv_crcGetCrc32
 */
gos_result_t drv_crcGetCrc32 (u8_t* pData, u32_t dataSize, u32_t* pCrc)
{
 8035518:	b480      	push	{r7}
 803551a:	b089      	sub	sp, #36	; 0x24
 803551c:	af00      	add	r7, sp, #0
 803551e:	60f8      	str	r0, [r7, #12]
 8035520:	60b9      	str	r1, [r7, #8]
 8035522:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 8035524:	23ae      	movs	r3, #174	; 0xae
 8035526:	77fb      	strb	r3, [r7, #31]
    u32_t        index        = 0u;
 8035528:	2300      	movs	r3, #0
 803552a:	61bb      	str	r3, [r7, #24]
    u8_t         bitCounter   = 0u;
 803552c:	2300      	movs	r3, #0
 803552e:	75fb      	strb	r3, [r7, #23]
    u32_t        crcValue     = DRV_CRC_INIT_VALUE_CRC32;
 8035530:	f04f 33ff 	mov.w	r3, #4294967295
 8035534:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && pCrc != NULL)
 8035536:	68fb      	ldr	r3, [r7, #12]
 8035538:	2b00      	cmp	r3, #0
 803553a:	d030      	beq.n	803559e <drv_crcGetCrc32+0x86>
 803553c:	687b      	ldr	r3, [r7, #4]
 803553e:	2b00      	cmp	r3, #0
 8035540:	d02d      	beq.n	803559e <drv_crcGetCrc32+0x86>
    {
        for (index = 0u; index < dataSize; index++)
 8035542:	2300      	movs	r3, #0
 8035544:	61bb      	str	r3, [r7, #24]
 8035546:	e021      	b.n	803558c <drv_crcGetCrc32+0x74>
        {
            crcValue ^= pData[index];
 8035548:	68fa      	ldr	r2, [r7, #12]
 803554a:	69bb      	ldr	r3, [r7, #24]
 803554c:	4413      	add	r3, r2
 803554e:	781b      	ldrb	r3, [r3, #0]
 8035550:	461a      	mov	r2, r3
 8035552:	693b      	ldr	r3, [r7, #16]
 8035554:	4053      	eors	r3, r2
 8035556:	613b      	str	r3, [r7, #16]

            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 8035558:	2300      	movs	r3, #0
 803555a:	75fb      	strb	r3, [r7, #23]
 803555c:	e010      	b.n	8035580 <drv_crcGetCrc32+0x68>
            {
                if (0 != (DRV_CRC_MASK_CRC32 & crcValue))
 803555e:	693b      	ldr	r3, [r7, #16]
 8035560:	2b00      	cmp	r3, #0
 8035562:	da07      	bge.n	8035574 <drv_crcGetCrc32+0x5c>
                {
                    crcValue <<= 1u;
 8035564:	693b      	ldr	r3, [r7, #16]
 8035566:	005b      	lsls	r3, r3, #1
 8035568:	613b      	str	r3, [r7, #16]
                    crcValue ^= DRV_CRC_POLYNOMIAL_CRC32;
 803556a:	693a      	ldr	r2, [r7, #16]
 803556c:	4b0f      	ldr	r3, [pc, #60]	; (80355ac <drv_crcGetCrc32+0x94>)
 803556e:	4053      	eors	r3, r2
 8035570:	613b      	str	r3, [r7, #16]
 8035572:	e002      	b.n	803557a <drv_crcGetCrc32+0x62>
                }
                else
                {
                    crcValue <<= 1u;
 8035574:	693b      	ldr	r3, [r7, #16]
 8035576:	005b      	lsls	r3, r3, #1
 8035578:	613b      	str	r3, [r7, #16]
            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 803557a:	7dfb      	ldrb	r3, [r7, #23]
 803557c:	3301      	adds	r3, #1
 803557e:	75fb      	strb	r3, [r7, #23]
 8035580:	7dfb      	ldrb	r3, [r7, #23]
 8035582:	2b1f      	cmp	r3, #31
 8035584:	d9eb      	bls.n	803555e <drv_crcGetCrc32+0x46>
        for (index = 0u; index < dataSize; index++)
 8035586:	69bb      	ldr	r3, [r7, #24]
 8035588:	3301      	adds	r3, #1
 803558a:	61bb      	str	r3, [r7, #24]
 803558c:	69ba      	ldr	r2, [r7, #24]
 803558e:	68bb      	ldr	r3, [r7, #8]
 8035590:	429a      	cmp	r2, r3
 8035592:	d3d9      	bcc.n	8035548 <drv_crcGetCrc32+0x30>
                }
            }
        }

        *pCrc = crcValue;
 8035594:	687b      	ldr	r3, [r7, #4]
 8035596:	693a      	ldr	r2, [r7, #16]
 8035598:	601a      	str	r2, [r3, #0]
        crcGetResult = GOS_SUCCESS;
 803559a:	2355      	movs	r3, #85	; 0x55
 803559c:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Error.
    }

    return crcGetResult;
 803559e:	7ffb      	ldrb	r3, [r7, #31]
}
 80355a0:	4618      	mov	r0, r3
 80355a2:	3724      	adds	r7, #36	; 0x24
 80355a4:	46bd      	mov	sp, r7
 80355a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80355aa:	4770      	bx	lr
 80355ac:	04c11db7 	.word	0x04c11db7

080355b0 <drv_crcCheckCrc32>:

/*
 * Function: drv_crcCheckCrc32
 */
drv_crcCheckResult_t drv_crcCheckCrc32 (u8_t* pData, u32_t dataSize, u32_t expCrc, u32_t* calcCrc)
{
 80355b0:	b580      	push	{r7, lr}
 80355b2:	b086      	sub	sp, #24
 80355b4:	af00      	add	r7, sp, #0
 80355b6:	60f8      	str	r0, [r7, #12]
 80355b8:	60b9      	str	r1, [r7, #8]
 80355ba:	607a      	str	r2, [r7, #4]
 80355bc:	603b      	str	r3, [r7, #0]
    /*
     * Local variables.
     */
    drv_crcCheckResult_t crcCheckResult = DRV_CRC_CHECK_ERROR;
 80355be:	239c      	movs	r3, #156	; 0x9c
 80355c0:	75fb      	strb	r3, [r7, #23]
    u32_t                crcTempValue   = 0u;
 80355c2:	2300      	movs	r3, #0
 80355c4:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && drv_crcGetCrc32(pData, dataSize, &crcTempValue) == GOS_SUCCESS)
 80355c6:	68fb      	ldr	r3, [r7, #12]
 80355c8:	2b00      	cmp	r3, #0
 80355ca:	d015      	beq.n	80355f8 <drv_crcCheckCrc32+0x48>
 80355cc:	f107 0310 	add.w	r3, r7, #16
 80355d0:	461a      	mov	r2, r3
 80355d2:	68b9      	ldr	r1, [r7, #8]
 80355d4:	68f8      	ldr	r0, [r7, #12]
 80355d6:	f7ff ff9f 	bl	8035518 <drv_crcGetCrc32>
 80355da:	4603      	mov	r3, r0
 80355dc:	2b55      	cmp	r3, #85	; 0x55
 80355de:	d10b      	bne.n	80355f8 <drv_crcCheckCrc32+0x48>
    {
        // Check if CRCs match.
        if (crcTempValue == expCrc)
 80355e0:	693b      	ldr	r3, [r7, #16]
 80355e2:	687a      	ldr	r2, [r7, #4]
 80355e4:	429a      	cmp	r2, r3
 80355e6:	d101      	bne.n	80355ec <drv_crcCheckCrc32+0x3c>
        {
            crcCheckResult = DRV_CRC_CHECK_OK;
 80355e8:	23ca      	movs	r3, #202	; 0xca
 80355ea:	75fb      	strb	r3, [r7, #23]
        {
            // CRC mismatch.
        }

        // Return calculated CRC value.
        if (calcCrc != NULL)
 80355ec:	683b      	ldr	r3, [r7, #0]
 80355ee:	2b00      	cmp	r3, #0
 80355f0:	d002      	beq.n	80355f8 <drv_crcCheckCrc32+0x48>
        {
            *calcCrc = crcTempValue;
 80355f2:	693a      	ldr	r2, [r7, #16]
 80355f4:	683b      	ldr	r3, [r7, #0]
 80355f6:	601a      	str	r2, [r3, #0]
    else
    {
        // Error.
    }

    return crcCheckResult;
 80355f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80355fa:	4618      	mov	r0, r3
 80355fc:	3718      	adds	r7, #24
 80355fe:	46bd      	mov	sp, r7
 8035600:	bd80      	pop	{r7, pc}
	...

08035604 <drv_dacInit>:

/*
 * Function: drv_dacInit
 */
gos_result_t drv_dacInit (void_t)
{
 8035604:	b580      	push	{r7, lr}
 8035606:	b082      	sub	sp, #8
 8035608:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t dacDriverInitResult = GOS_SUCCESS;
 803560a:	2355      	movs	r3, #85	; 0x55
 803560c:	71fb      	strb	r3, [r7, #7]
    u8_t         dacIdx              = 0u;
 803560e:	2300      	movs	r3, #0
 8035610:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (dacConfig != NULL)
    {
        for (dacIdx = 0u; dacIdx < dacConfigSize / sizeof(drv_dacDescriptor_t); dacIdx++)
 8035612:	2300      	movs	r3, #0
 8035614:	71bb      	strb	r3, [r7, #6]
 8035616:	e00e      	b.n	8035636 <drv_dacInit+0x32>
        {
            GOS_CONCAT_RESULT(dacDriverInitResult, drv_dacInitInstance(dacIdx));
 8035618:	79fb      	ldrb	r3, [r7, #7]
 803561a:	2b55      	cmp	r3, #85	; 0x55
 803561c:	d106      	bne.n	803562c <drv_dacInit+0x28>
 803561e:	79bb      	ldrb	r3, [r7, #6]
 8035620:	4618      	mov	r0, r3
 8035622:	f000 f81b 	bl	803565c <drv_dacInitInstance>
 8035626:	4603      	mov	r3, r0
 8035628:	71fb      	strb	r3, [r7, #7]
 803562a:	e001      	b.n	8035630 <drv_dacInit+0x2c>
 803562c:	23ae      	movs	r3, #174	; 0xae
 803562e:	71fb      	strb	r3, [r7, #7]
        for (dacIdx = 0u; dacIdx < dacConfigSize / sizeof(drv_dacDescriptor_t); dacIdx++)
 8035630:	79bb      	ldrb	r3, [r7, #6]
 8035632:	3301      	adds	r3, #1
 8035634:	71bb      	strb	r3, [r7, #6]
 8035636:	79bb      	ldrb	r3, [r7, #6]
 8035638:	4a06      	ldr	r2, [pc, #24]	; (8035654 <drv_dacInit+0x50>)
 803563a:	6812      	ldr	r2, [r2, #0]
 803563c:	0892      	lsrs	r2, r2, #2
 803563e:	4906      	ldr	r1, [pc, #24]	; (8035658 <drv_dacInit+0x54>)
 8035640:	fba1 1202 	umull	r1, r2, r1, r2
 8035644:	4293      	cmp	r3, r2
 8035646:	d3e7      	bcc.n	8035618 <drv_dacInit+0x14>
    {
        // Configuration array is NULL pointer.
        dacDriverInitResult = GOS_ERROR;
    }

    return dacDriverInitResult;
 8035648:	79fb      	ldrb	r3, [r7, #7]
}
 803564a:	4618      	mov	r0, r3
 803564c:	3708      	adds	r7, #8
 803564e:	46bd      	mov	sp, r7
 8035650:	bd80      	pop	{r7, pc}
 8035652:	bf00      	nop
 8035654:	200014ec 	.word	0x200014ec
 8035658:	24924925 	.word	0x24924925

0803565c <drv_dacInitInstance>:

/*
 * Function: drv_dacInitInstance
 */
gos_result_t drv_dacInitInstance (u8_t dacInstanceIndex)
{
 803565c:	b580      	push	{r7, lr}
 803565e:	b086      	sub	sp, #24
 8035660:	af00      	add	r7, sp, #0
 8035662:	4603      	mov	r3, r0
 8035664:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            dacInitResult = GOS_ERROR;
 8035666:	23ae      	movs	r3, #174	; 0xae
 8035668:	75fb      	strb	r3, [r7, #23]
    drv_dacPeriphInstance_t instance      = 0u;
 803566a:	2300      	movs	r3, #0
 803566c:	75bb      	strb	r3, [r7, #22]
    DAC_ChannelConfTypeDef  sConfig       = {0};
 803566e:	f107 030c 	add.w	r3, r7, #12
 8035672:	2200      	movs	r2, #0
 8035674:	601a      	str	r2, [r3, #0]
 8035676:	605a      	str	r2, [r3, #4]

    /*
     * Function code.
     */
    if (dacConfig != NULL && dacInstanceIndex < (dacConfigSize / sizeof(drv_dacDescriptor_t)))
 8035678:	79fb      	ldrb	r3, [r7, #7]
 803567a:	4a40      	ldr	r2, [pc, #256]	; (803577c <drv_dacInitInstance+0x120>)
 803567c:	6812      	ldr	r2, [r2, #0]
 803567e:	0892      	lsrs	r2, r2, #2
 8035680:	493f      	ldr	r1, [pc, #252]	; (8035780 <drv_dacInitInstance+0x124>)
 8035682:	fba1 1202 	umull	r1, r2, r1, r2
 8035686:	4293      	cmp	r3, r2
 8035688:	d273      	bcs.n	8035772 <drv_dacInitInstance+0x116>
    {
        instance = dacConfig[dacInstanceIndex].periphInstance;
 803568a:	79fa      	ldrb	r2, [r7, #7]
 803568c:	493d      	ldr	r1, [pc, #244]	; (8035784 <drv_dacInitInstance+0x128>)
 803568e:	4613      	mov	r3, r2
 8035690:	00db      	lsls	r3, r3, #3
 8035692:	1a9b      	subs	r3, r3, r2
 8035694:	009b      	lsls	r3, r3, #2
 8035696:	440b      	add	r3, r1
 8035698:	781b      	ldrb	r3, [r3, #0]
 803569a:	75bb      	strb	r3, [r7, #22]

        hdacs[instance].Instance = dacInstanceLut[instance];
 803569c:	7dbb      	ldrb	r3, [r7, #22]
 803569e:	7dba      	ldrb	r2, [r7, #22]
 80356a0:	4939      	ldr	r1, [pc, #228]	; (8035788 <drv_dacInitInstance+0x12c>)
 80356a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80356a6:	4839      	ldr	r0, [pc, #228]	; (803578c <drv_dacInitInstance+0x130>)
 80356a8:	4613      	mov	r3, r2
 80356aa:	009b      	lsls	r3, r3, #2
 80356ac:	4413      	add	r3, r2
 80356ae:	009b      	lsls	r3, r3, #2
 80356b0:	4403      	add	r3, r0
 80356b2:	6019      	str	r1, [r3, #0]

        /*
         *  Configure the selected DAC regular channel.
         */
        sConfig.DAC_Trigger      = dacConfig[dacInstanceIndex].trigger;
 80356b4:	79fa      	ldrb	r2, [r7, #7]
 80356b6:	4933      	ldr	r1, [pc, #204]	; (8035784 <drv_dacInitInstance+0x128>)
 80356b8:	4613      	mov	r3, r2
 80356ba:	00db      	lsls	r3, r3, #3
 80356bc:	1a9b      	subs	r3, r3, r2
 80356be:	009b      	lsls	r3, r3, #2
 80356c0:	440b      	add	r3, r1
 80356c2:	3304      	adds	r3, #4
 80356c4:	681b      	ldr	r3, [r3, #0]
 80356c6:	60fb      	str	r3, [r7, #12]
        sConfig.DAC_OutputBuffer = dacConfig[dacInstanceIndex].outputBuffer;
 80356c8:	79fa      	ldrb	r2, [r7, #7]
 80356ca:	492e      	ldr	r1, [pc, #184]	; (8035784 <drv_dacInitInstance+0x128>)
 80356cc:	4613      	mov	r3, r2
 80356ce:	00db      	lsls	r3, r3, #3
 80356d0:	1a9b      	subs	r3, r3, r2
 80356d2:	009b      	lsls	r3, r3, #2
 80356d4:	440b      	add	r3, r1
 80356d6:	3308      	adds	r3, #8
 80356d8:	681b      	ldr	r3, [r3, #0]
 80356da:	613b      	str	r3, [r7, #16]

        if (HAL_DAC_Init         (&hdacs[instance])                                                == HAL_OK      &&
 80356dc:	7dba      	ldrb	r2, [r7, #22]
 80356de:	4613      	mov	r3, r2
 80356e0:	009b      	lsls	r3, r3, #2
 80356e2:	4413      	add	r3, r2
 80356e4:	009b      	lsls	r3, r3, #2
 80356e6:	4a29      	ldr	r2, [pc, #164]	; (803578c <drv_dacInitInstance+0x130>)
 80356e8:	4413      	add	r3, r2
 80356ea:	4618      	mov	r0, r3
 80356ec:	f7f3 fd8f 	bl	802920e <HAL_DAC_Init>
 80356f0:	4603      	mov	r3, r0
 80356f2:	2b00      	cmp	r3, #0
 80356f4:	d13d      	bne.n	8035772 <drv_dacInitInstance+0x116>
            HAL_DAC_ConfigChannel(&hdacs[instance], &sConfig, dacConfig[dacInstanceIndex].channel) == HAL_OK      &&
 80356f6:	7dba      	ldrb	r2, [r7, #22]
 80356f8:	4613      	mov	r3, r2
 80356fa:	009b      	lsls	r3, r3, #2
 80356fc:	4413      	add	r3, r2
 80356fe:	009b      	lsls	r3, r3, #2
 8035700:	4a22      	ldr	r2, [pc, #136]	; (803578c <drv_dacInitInstance+0x130>)
 8035702:	1898      	adds	r0, r3, r2
 8035704:	79fa      	ldrb	r2, [r7, #7]
 8035706:	491f      	ldr	r1, [pc, #124]	; (8035784 <drv_dacInitInstance+0x128>)
 8035708:	4613      	mov	r3, r2
 803570a:	00db      	lsls	r3, r3, #3
 803570c:	1a9b      	subs	r3, r3, r2
 803570e:	009b      	lsls	r3, r3, #2
 8035710:	440b      	add	r3, r1
 8035712:	330c      	adds	r3, #12
 8035714:	681a      	ldr	r2, [r3, #0]
 8035716:	f107 030c 	add.w	r3, r7, #12
 803571a:	4619      	mov	r1, r3
 803571c:	f7f3 fe74 	bl	8029408 <HAL_DAC_ConfigChannel>
 8035720:	4603      	mov	r3, r0
        if (HAL_DAC_Init         (&hdacs[instance])                                                == HAL_OK      &&
 8035722:	2b00      	cmp	r3, #0
 8035724:	d125      	bne.n	8035772 <drv_dacInitInstance+0x116>
            gos_mutexInit        (&dacMutexes[instance])                                           == GOS_SUCCESS &&
 8035726:	7dbb      	ldrb	r3, [r7, #22]
 8035728:	009b      	lsls	r3, r3, #2
 803572a:	4a19      	ldr	r2, [pc, #100]	; (8035790 <drv_dacInitInstance+0x134>)
 803572c:	4413      	add	r3, r2
 803572e:	4618      	mov	r0, r3
 8035730:	f008 fde8 	bl	803e304 <gos_mutexInit>
 8035734:	4603      	mov	r3, r0
            HAL_DAC_ConfigChannel(&hdacs[instance], &sConfig, dacConfig[dacInstanceIndex].channel) == HAL_OK      &&
 8035736:	2b55      	cmp	r3, #85	; 0x55
 8035738:	d11b      	bne.n	8035772 <drv_dacInitInstance+0x116>
            gos_triggerInit      (&dacReadyTriggers[instance])                                     == GOS_SUCCESS &&
 803573a:	7dba      	ldrb	r2, [r7, #22]
 803573c:	4613      	mov	r3, r2
 803573e:	005b      	lsls	r3, r3, #1
 8035740:	4413      	add	r3, r2
 8035742:	009b      	lsls	r3, r3, #2
 8035744:	4a13      	ldr	r2, [pc, #76]	; (8035794 <drv_dacInitInstance+0x138>)
 8035746:	4413      	add	r3, r2
 8035748:	4618      	mov	r0, r3
 803574a:	f00b fbc9 	bl	8040ee0 <gos_triggerInit>
 803574e:	4603      	mov	r3, r0
            gos_mutexInit        (&dacMutexes[instance])                                           == GOS_SUCCESS &&
 8035750:	2b55      	cmp	r3, #85	; 0x55
 8035752:	d10e      	bne.n	8035772 <drv_dacInitInstance+0x116>
            gos_triggerReset     (&dacReadyTriggers[instance])                                     == GOS_SUCCESS
 8035754:	7dba      	ldrb	r2, [r7, #22]
 8035756:	4613      	mov	r3, r2
 8035758:	005b      	lsls	r3, r3, #1
 803575a:	4413      	add	r3, r2
 803575c:	009b      	lsls	r3, r3, #2
 803575e:	4a0d      	ldr	r2, [pc, #52]	; (8035794 <drv_dacInitInstance+0x138>)
 8035760:	4413      	add	r3, r2
 8035762:	4618      	mov	r0, r3
 8035764:	f00b fbd8 	bl	8040f18 <gos_triggerReset>
 8035768:	4603      	mov	r3, r0
            gos_triggerInit      (&dacReadyTriggers[instance])                                     == GOS_SUCCESS &&
 803576a:	2b55      	cmp	r3, #85	; 0x55
 803576c:	d101      	bne.n	8035772 <drv_dacInitInstance+0x116>
            )
        {
            dacInitResult = GOS_SUCCESS;
 803576e:	2355      	movs	r3, #85	; 0x55
 8035770:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return dacInitResult;
 8035772:	7dfb      	ldrb	r3, [r7, #23]
}
 8035774:	4618      	mov	r0, r3
 8035776:	3718      	adds	r7, #24
 8035778:	46bd      	mov	sp, r7
 803577a:	bd80      	pop	{r7, pc}
 803577c:	200014ec 	.word	0x200014ec
 8035780:	24924925 	.word	0x24924925
 8035784:	08048c78 	.word	0x08048c78
 8035788:	20001a90 	.word	0x20001a90
 803578c:	200063b0 	.word	0x200063b0
 8035790:	200063c4 	.word	0x200063c4
 8035794:	200063c8 	.word	0x200063c8

08035798 <drv_dacStart>:
gos_result_t drv_dacStart (
    drv_dacPeriphInstance_t instance,
    u32_t*                  pBuffer,
    u32_t                   buffLen
    )
{
 8035798:	b590      	push	{r4, r7, lr}
 803579a:	b089      	sub	sp, #36	; 0x24
 803579c:	af02      	add	r7, sp, #8
 803579e:	4603      	mov	r3, r0
 80357a0:	60b9      	str	r1, [r7, #8]
 80357a2:	607a      	str	r2, [r7, #4]
 80357a4:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t dacStartResult = GOS_ERROR;
 80357a6:	23ae      	movs	r3, #174	; 0xae
 80357a8:	75fb      	strb	r3, [r7, #23]
    u8_t         idx            = 0u;
 80357aa:	2300      	movs	r3, #0
 80357ac:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (pBuffer != NULL && dacConfig != NULL)
 80357ae:	68bb      	ldr	r3, [r7, #8]
 80357b0:	2b00      	cmp	r3, #0
 80357b2:	d05c      	beq.n	803586e <drv_dacStart+0xd6>
    {
        for (idx = 0u; idx < dacConfigSize; idx++)
 80357b4:	2300      	movs	r3, #0
 80357b6:	75bb      	strb	r3, [r7, #22]
 80357b8:	e052      	b.n	8035860 <drv_dacStart+0xc8>
        {
            if (dacConfig[idx].periphInstance == instance)
 80357ba:	7dba      	ldrb	r2, [r7, #22]
 80357bc:	492e      	ldr	r1, [pc, #184]	; (8035878 <drv_dacStart+0xe0>)
 80357be:	4613      	mov	r3, r2
 80357c0:	00db      	lsls	r3, r3, #3
 80357c2:	1a9b      	subs	r3, r3, r2
 80357c4:	009b      	lsls	r3, r3, #2
 80357c6:	440b      	add	r3, r1
 80357c8:	781b      	ldrb	r3, [r3, #0]
 80357ca:	7bfa      	ldrb	r2, [r7, #15]
 80357cc:	429a      	cmp	r2, r3
 80357ce:	d144      	bne.n	803585a <drv_dacStart+0xc2>
            {
                dacStartResult = GOS_SUCCESS;
 80357d0:	2355      	movs	r3, #85	; 0x55
 80357d2:	75fb      	strb	r3, [r7, #23]

                if (dacConfig[instance].tmrConfig != NULL)
 80357d4:	7bfa      	ldrb	r2, [r7, #15]
 80357d6:	4928      	ldr	r1, [pc, #160]	; (8035878 <drv_dacStart+0xe0>)
 80357d8:	4613      	mov	r3, r2
 80357da:	00db      	lsls	r3, r3, #3
 80357dc:	1a9b      	subs	r3, r3, r2
 80357de:	009b      	lsls	r3, r3, #2
 80357e0:	440b      	add	r3, r1
 80357e2:	3318      	adds	r3, #24
 80357e4:	681b      	ldr	r3, [r3, #0]
 80357e6:	2b00      	cmp	r3, #0
 80357e8:	d010      	beq.n	803580c <drv_dacStart+0x74>
                {
                    // Start timer.
                    dacStartResult = drv_tmrStart(dacConfig[instance].tmrConfig->periphInstance, GOS_MUTEX_ENDLESS_TMO);
 80357ea:	7bfa      	ldrb	r2, [r7, #15]
 80357ec:	4922      	ldr	r1, [pc, #136]	; (8035878 <drv_dacStart+0xe0>)
 80357ee:	4613      	mov	r3, r2
 80357f0:	00db      	lsls	r3, r3, #3
 80357f2:	1a9b      	subs	r3, r3, r2
 80357f4:	009b      	lsls	r3, r3, #2
 80357f6:	440b      	add	r3, r1
 80357f8:	3318      	adds	r3, #24
 80357fa:	681b      	ldr	r3, [r3, #0]
 80357fc:	781b      	ldrb	r3, [r3, #0]
 80357fe:	f04f 31ff 	mov.w	r1, #4294967295
 8035802:	4618      	mov	r0, r3
 8035804:	f002 fc2c 	bl	8038060 <drv_tmrStart>
 8035808:	4603      	mov	r3, r0
 803580a:	75fb      	strb	r3, [r7, #23]
                else
                {
                    // Timer is not configured for this DAC.
                }

                if (dacStartResult == GOS_SUCCESS &&
 803580c:	7dfb      	ldrb	r3, [r7, #23]
 803580e:	2b55      	cmp	r3, #85	; 0x55
 8035810:	d12c      	bne.n	803586c <drv_dacStart+0xd4>
                    HAL_DAC_Start_DMA(&hdacs[instance], dacConfig[idx].channel, pBuffer, buffLen, dacConfig[idx].dataAlignment) == HAL_OK)
 8035812:	7bfa      	ldrb	r2, [r7, #15]
 8035814:	4613      	mov	r3, r2
 8035816:	009b      	lsls	r3, r3, #2
 8035818:	4413      	add	r3, r2
 803581a:	009b      	lsls	r3, r3, #2
 803581c:	4a17      	ldr	r2, [pc, #92]	; (803587c <drv_dacStart+0xe4>)
 803581e:	1898      	adds	r0, r3, r2
 8035820:	7dba      	ldrb	r2, [r7, #22]
 8035822:	4915      	ldr	r1, [pc, #84]	; (8035878 <drv_dacStart+0xe0>)
 8035824:	4613      	mov	r3, r2
 8035826:	00db      	lsls	r3, r3, #3
 8035828:	1a9b      	subs	r3, r3, r2
 803582a:	009b      	lsls	r3, r3, #2
 803582c:	440b      	add	r3, r1
 803582e:	330c      	adds	r3, #12
 8035830:	6819      	ldr	r1, [r3, #0]
 8035832:	7dba      	ldrb	r2, [r7, #22]
 8035834:	4c10      	ldr	r4, [pc, #64]	; (8035878 <drv_dacStart+0xe0>)
 8035836:	4613      	mov	r3, r2
 8035838:	00db      	lsls	r3, r3, #3
 803583a:	1a9b      	subs	r3, r3, r2
 803583c:	009b      	lsls	r3, r3, #2
 803583e:	4423      	add	r3, r4
 8035840:	3310      	adds	r3, #16
 8035842:	681b      	ldr	r3, [r3, #0]
 8035844:	9300      	str	r3, [sp, #0]
 8035846:	687b      	ldr	r3, [r7, #4]
 8035848:	68ba      	ldr	r2, [r7, #8]
 803584a:	f7f3 fd03 	bl	8029254 <HAL_DAC_Start_DMA>
 803584e:	4603      	mov	r3, r0
                if (dacStartResult == GOS_SUCCESS &&
 8035850:	2b00      	cmp	r3, #0
 8035852:	d10b      	bne.n	803586c <drv_dacStart+0xd4>
                {
                    dacStartResult = GOS_SUCCESS;
 8035854:	2355      	movs	r3, #85	; 0x55
 8035856:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    // Error.
                }
                break;
 8035858:	e008      	b.n	803586c <drv_dacStart+0xd4>
        for (idx = 0u; idx < dacConfigSize; idx++)
 803585a:	7dbb      	ldrb	r3, [r7, #22]
 803585c:	3301      	adds	r3, #1
 803585e:	75bb      	strb	r3, [r7, #22]
 8035860:	7dba      	ldrb	r2, [r7, #22]
 8035862:	4b07      	ldr	r3, [pc, #28]	; (8035880 <drv_dacStart+0xe8>)
 8035864:	681b      	ldr	r3, [r3, #0]
 8035866:	429a      	cmp	r2, r3
 8035868:	d3a7      	bcc.n	80357ba <drv_dacStart+0x22>
 803586a:	e000      	b.n	803586e <drv_dacStart+0xd6>
                break;
 803586c:	bf00      	nop
    else
    {
        // NULL pointer.
    }

    return dacStartResult;
 803586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8035870:	4618      	mov	r0, r3
 8035872:	371c      	adds	r7, #28
 8035874:	46bd      	mov	sp, r7
 8035876:	bd90      	pop	{r4, r7, pc}
 8035878:	08048c78 	.word	0x08048c78
 803587c:	200063b0 	.word	0x200063b0
 8035880:	200014ec 	.word	0x200014ec

08035884 <HAL_DAC_MspInit>:

/*
 * Function: HAL_DAC_MspInit
 */
void_t HAL_DAC_MspInit (DAC_HandleTypeDef* hdac)
{
 8035884:	b480      	push	{r7}
 8035886:	b085      	sub	sp, #20
 8035888:	af00      	add	r7, sp, #0
 803588a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_dacPeriphInstance_t instance = 0u;
 803588c:	2300      	movs	r3, #0
 803588e:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 8035890:	2300      	movs	r3, #0
 8035892:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_DAC_NUM_OF_INSTANCES; instance++)
 8035894:	2300      	movs	r3, #0
 8035896:	73fb      	strb	r3, [r7, #15]
 8035898:	e046      	b.n	8035928 <HAL_DAC_MspInit+0xa4>
    {
        if (dacInstanceLut[instance] == hdac->Instance)
 803589a:	7bfb      	ldrb	r3, [r7, #15]
 803589c:	4a27      	ldr	r2, [pc, #156]	; (803593c <HAL_DAC_MspInit+0xb8>)
 803589e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80358a2:	687b      	ldr	r3, [r7, #4]
 80358a4:	681b      	ldr	r3, [r3, #0]
 80358a6:	429a      	cmp	r2, r3
 80358a8:	d13b      	bne.n	8035922 <HAL_DAC_MspInit+0x9e>
        {
            for (idx = 0u; idx < dacConfigSize / sizeof(drv_dacDescriptor_t); idx++)
 80358aa:	2300      	movs	r3, #0
 80358ac:	73bb      	strb	r3, [r7, #14]
 80358ae:	e02f      	b.n	8035910 <HAL_DAC_MspInit+0x8c>
            {
                if (dacConfig[idx].periphInstance == instance)
 80358b0:	7bba      	ldrb	r2, [r7, #14]
 80358b2:	4923      	ldr	r1, [pc, #140]	; (8035940 <HAL_DAC_MspInit+0xbc>)
 80358b4:	4613      	mov	r3, r2
 80358b6:	00db      	lsls	r3, r3, #3
 80358b8:	1a9b      	subs	r3, r3, r2
 80358ba:	009b      	lsls	r3, r3, #2
 80358bc:	440b      	add	r3, r1
 80358be:	781b      	ldrb	r3, [r3, #0]
 80358c0:	7bfa      	ldrb	r2, [r7, #15]
 80358c2:	429a      	cmp	r2, r3
 80358c4:	d121      	bne.n	803590a <HAL_DAC_MspInit+0x86>
                {
                    if (dacConfig[idx].dmaConfig != NULL)
 80358c6:	7bba      	ldrb	r2, [r7, #14]
 80358c8:	491d      	ldr	r1, [pc, #116]	; (8035940 <HAL_DAC_MspInit+0xbc>)
 80358ca:	4613      	mov	r3, r2
 80358cc:	00db      	lsls	r3, r3, #3
 80358ce:	1a9b      	subs	r3, r3, r2
 80358d0:	009b      	lsls	r3, r3, #2
 80358d2:	440b      	add	r3, r1
 80358d4:	3314      	adds	r3, #20
 80358d6:	681b      	ldr	r3, [r3, #0]
 80358d8:	2b00      	cmp	r3, #0
 80358da:	d016      	beq.n	803590a <HAL_DAC_MspInit+0x86>
                    {
                        __HAL_LINKDMA(hdac, DMA_Handle1, dacConfig[idx].dmaConfig->hdma);
 80358dc:	7bba      	ldrb	r2, [r7, #14]
 80358de:	4918      	ldr	r1, [pc, #96]	; (8035940 <HAL_DAC_MspInit+0xbc>)
 80358e0:	4613      	mov	r3, r2
 80358e2:	00db      	lsls	r3, r3, #3
 80358e4:	1a9b      	subs	r3, r3, r2
 80358e6:	009b      	lsls	r3, r3, #2
 80358e8:	440b      	add	r3, r1
 80358ea:	3314      	adds	r3, #20
 80358ec:	681b      	ldr	r3, [r3, #0]
 80358ee:	1d1a      	adds	r2, r3, #4
 80358f0:	687b      	ldr	r3, [r7, #4]
 80358f2:	609a      	str	r2, [r3, #8]
 80358f4:	7bba      	ldrb	r2, [r7, #14]
 80358f6:	4912      	ldr	r1, [pc, #72]	; (8035940 <HAL_DAC_MspInit+0xbc>)
 80358f8:	4613      	mov	r3, r2
 80358fa:	00db      	lsls	r3, r3, #3
 80358fc:	1a9b      	subs	r3, r3, r2
 80358fe:	009b      	lsls	r3, r3, #2
 8035900:	440b      	add	r3, r1
 8035902:	3314      	adds	r3, #20
 8035904:	681b      	ldr	r3, [r3, #0]
 8035906:	687a      	ldr	r2, [r7, #4]
 8035908:	63da      	str	r2, [r3, #60]	; 0x3c
            for (idx = 0u; idx < dacConfigSize / sizeof(drv_dacDescriptor_t); idx++)
 803590a:	7bbb      	ldrb	r3, [r7, #14]
 803590c:	3301      	adds	r3, #1
 803590e:	73bb      	strb	r3, [r7, #14]
 8035910:	7bbb      	ldrb	r3, [r7, #14]
 8035912:	4a0c      	ldr	r2, [pc, #48]	; (8035944 <HAL_DAC_MspInit+0xc0>)
 8035914:	6812      	ldr	r2, [r2, #0]
 8035916:	0892      	lsrs	r2, r2, #2
 8035918:	490b      	ldr	r1, [pc, #44]	; (8035948 <HAL_DAC_MspInit+0xc4>)
 803591a:	fba1 1202 	umull	r1, r2, r1, r2
 803591e:	4293      	cmp	r3, r2
 8035920:	d3c6      	bcc.n	80358b0 <HAL_DAC_MspInit+0x2c>
    for (instance = 0u; instance < DRV_DAC_NUM_OF_INSTANCES; instance++)
 8035922:	7bfb      	ldrb	r3, [r7, #15]
 8035924:	3301      	adds	r3, #1
 8035926:	73fb      	strb	r3, [r7, #15]
 8035928:	7bfb      	ldrb	r3, [r7, #15]
 803592a:	2b00      	cmp	r3, #0
 803592c:	d0b5      	beq.n	803589a <HAL_DAC_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 803592e:	bf00      	nop
 8035930:	bf00      	nop
 8035932:	3714      	adds	r7, #20
 8035934:	46bd      	mov	sp, r7
 8035936:	f85d 7b04 	ldr.w	r7, [sp], #4
 803593a:	4770      	bx	lr
 803593c:	20001a90 	.word	0x20001a90
 8035940:	08048c78 	.word	0x08048c78
 8035944:	200014ec 	.word	0x200014ec
 8035948:	24924925 	.word	0x24924925

0803594c <drv_dmaInit>:

/*
 * Function: drv_dmaInit
 */
gos_result_t drv_dmaInit (void_t)
{
 803594c:	b580      	push	{r7, lr}
 803594e:	b082      	sub	sp, #8
 8035950:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t dmaInitResult = GOS_SUCCESS;
 8035952:	2355      	movs	r3, #85	; 0x55
 8035954:	71fb      	strb	r3, [r7, #7]
    u8_t         idx           = 0u;
 8035956:	2300      	movs	r3, #0
 8035958:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 803595a:	2300      	movs	r3, #0
 803595c:	71bb      	strb	r3, [r7, #6]
 803595e:	e0c9      	b.n	8035af4 <drv_dmaInit+0x1a8>
    {
        dmaConfig[idx].hdma.Instance                 = dmaStreamLut[dmaConfig[idx].dmaStream];
 8035960:	79ba      	ldrb	r2, [r7, #6]
 8035962:	496c      	ldr	r1, [pc, #432]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035964:	4613      	mov	r3, r2
 8035966:	011b      	lsls	r3, r3, #4
 8035968:	4413      	add	r3, r2
 803596a:	00db      	lsls	r3, r3, #3
 803596c:	440b      	add	r3, r1
 803596e:	781b      	ldrb	r3, [r3, #0]
 8035970:	4619      	mov	r1, r3
 8035972:	79ba      	ldrb	r2, [r7, #6]
 8035974:	4b68      	ldr	r3, [pc, #416]	; (8035b18 <drv_dmaInit+0x1cc>)
 8035976:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 803597a:	4866      	ldr	r0, [pc, #408]	; (8035b14 <drv_dmaInit+0x1c8>)
 803597c:	4613      	mov	r3, r2
 803597e:	011b      	lsls	r3, r3, #4
 8035980:	4413      	add	r3, r2
 8035982:	00db      	lsls	r3, r3, #3
 8035984:	4403      	add	r3, r0
 8035986:	3304      	adds	r3, #4
 8035988:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Channel             = dmaConfig[idx].channel;
 803598a:	79b9      	ldrb	r1, [r7, #6]
 803598c:	79ba      	ldrb	r2, [r7, #6]
 803598e:	4861      	ldr	r0, [pc, #388]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035990:	460b      	mov	r3, r1
 8035992:	011b      	lsls	r3, r3, #4
 8035994:	440b      	add	r3, r1
 8035996:	00db      	lsls	r3, r3, #3
 8035998:	4403      	add	r3, r0
 803599a:	3364      	adds	r3, #100	; 0x64
 803599c:	6819      	ldr	r1, [r3, #0]
 803599e:	485d      	ldr	r0, [pc, #372]	; (8035b14 <drv_dmaInit+0x1c8>)
 80359a0:	4613      	mov	r3, r2
 80359a2:	011b      	lsls	r3, r3, #4
 80359a4:	4413      	add	r3, r2
 80359a6:	00db      	lsls	r3, r3, #3
 80359a8:	4403      	add	r3, r0
 80359aa:	3308      	adds	r3, #8
 80359ac:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Direction           = dmaConfig[idx].direction;
 80359ae:	79b9      	ldrb	r1, [r7, #6]
 80359b0:	79ba      	ldrb	r2, [r7, #6]
 80359b2:	4858      	ldr	r0, [pc, #352]	; (8035b14 <drv_dmaInit+0x1c8>)
 80359b4:	460b      	mov	r3, r1
 80359b6:	011b      	lsls	r3, r3, #4
 80359b8:	440b      	add	r3, r1
 80359ba:	00db      	lsls	r3, r3, #3
 80359bc:	4403      	add	r3, r0
 80359be:	3368      	adds	r3, #104	; 0x68
 80359c0:	6819      	ldr	r1, [r3, #0]
 80359c2:	4854      	ldr	r0, [pc, #336]	; (8035b14 <drv_dmaInit+0x1c8>)
 80359c4:	4613      	mov	r3, r2
 80359c6:	011b      	lsls	r3, r3, #4
 80359c8:	4413      	add	r3, r2
 80359ca:	00db      	lsls	r3, r3, #3
 80359cc:	4403      	add	r3, r0
 80359ce:	330c      	adds	r3, #12
 80359d0:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphInc           = dmaConfig[idx].periphInc;
 80359d2:	79b9      	ldrb	r1, [r7, #6]
 80359d4:	79ba      	ldrb	r2, [r7, #6]
 80359d6:	484f      	ldr	r0, [pc, #316]	; (8035b14 <drv_dmaInit+0x1c8>)
 80359d8:	460b      	mov	r3, r1
 80359da:	011b      	lsls	r3, r3, #4
 80359dc:	440b      	add	r3, r1
 80359de:	00db      	lsls	r3, r3, #3
 80359e0:	4403      	add	r3, r0
 80359e2:	336c      	adds	r3, #108	; 0x6c
 80359e4:	6819      	ldr	r1, [r3, #0]
 80359e6:	484b      	ldr	r0, [pc, #300]	; (8035b14 <drv_dmaInit+0x1c8>)
 80359e8:	4613      	mov	r3, r2
 80359ea:	011b      	lsls	r3, r3, #4
 80359ec:	4413      	add	r3, r2
 80359ee:	00db      	lsls	r3, r3, #3
 80359f0:	4403      	add	r3, r0
 80359f2:	3310      	adds	r3, #16
 80359f4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemInc              = dmaConfig[idx].memInc;
 80359f6:	79b9      	ldrb	r1, [r7, #6]
 80359f8:	79ba      	ldrb	r2, [r7, #6]
 80359fa:	4846      	ldr	r0, [pc, #280]	; (8035b14 <drv_dmaInit+0x1c8>)
 80359fc:	460b      	mov	r3, r1
 80359fe:	011b      	lsls	r3, r3, #4
 8035a00:	440b      	add	r3, r1
 8035a02:	00db      	lsls	r3, r3, #3
 8035a04:	4403      	add	r3, r0
 8035a06:	3370      	adds	r3, #112	; 0x70
 8035a08:	6819      	ldr	r1, [r3, #0]
 8035a0a:	4842      	ldr	r0, [pc, #264]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035a0c:	4613      	mov	r3, r2
 8035a0e:	011b      	lsls	r3, r3, #4
 8035a10:	4413      	add	r3, r2
 8035a12:	00db      	lsls	r3, r3, #3
 8035a14:	4403      	add	r3, r0
 8035a16:	3314      	adds	r3, #20
 8035a18:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphDataAlignment = dmaConfig[idx].periphDataAlignment;
 8035a1a:	79b9      	ldrb	r1, [r7, #6]
 8035a1c:	79ba      	ldrb	r2, [r7, #6]
 8035a1e:	483d      	ldr	r0, [pc, #244]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035a20:	460b      	mov	r3, r1
 8035a22:	011b      	lsls	r3, r3, #4
 8035a24:	440b      	add	r3, r1
 8035a26:	00db      	lsls	r3, r3, #3
 8035a28:	4403      	add	r3, r0
 8035a2a:	3374      	adds	r3, #116	; 0x74
 8035a2c:	6819      	ldr	r1, [r3, #0]
 8035a2e:	4839      	ldr	r0, [pc, #228]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035a30:	4613      	mov	r3, r2
 8035a32:	011b      	lsls	r3, r3, #4
 8035a34:	4413      	add	r3, r2
 8035a36:	00db      	lsls	r3, r3, #3
 8035a38:	4403      	add	r3, r0
 8035a3a:	3318      	adds	r3, #24
 8035a3c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemDataAlignment    = dmaConfig[idx].memDataAlignment;
 8035a3e:	79b9      	ldrb	r1, [r7, #6]
 8035a40:	79ba      	ldrb	r2, [r7, #6]
 8035a42:	4834      	ldr	r0, [pc, #208]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035a44:	460b      	mov	r3, r1
 8035a46:	011b      	lsls	r3, r3, #4
 8035a48:	440b      	add	r3, r1
 8035a4a:	00db      	lsls	r3, r3, #3
 8035a4c:	4403      	add	r3, r0
 8035a4e:	3378      	adds	r3, #120	; 0x78
 8035a50:	6819      	ldr	r1, [r3, #0]
 8035a52:	4830      	ldr	r0, [pc, #192]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035a54:	4613      	mov	r3, r2
 8035a56:	011b      	lsls	r3, r3, #4
 8035a58:	4413      	add	r3, r2
 8035a5a:	00db      	lsls	r3, r3, #3
 8035a5c:	4403      	add	r3, r0
 8035a5e:	331c      	adds	r3, #28
 8035a60:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Mode                = dmaConfig[idx].mode;
 8035a62:	79b9      	ldrb	r1, [r7, #6]
 8035a64:	79ba      	ldrb	r2, [r7, #6]
 8035a66:	482b      	ldr	r0, [pc, #172]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035a68:	460b      	mov	r3, r1
 8035a6a:	011b      	lsls	r3, r3, #4
 8035a6c:	440b      	add	r3, r1
 8035a6e:	00db      	lsls	r3, r3, #3
 8035a70:	4403      	add	r3, r0
 8035a72:	337c      	adds	r3, #124	; 0x7c
 8035a74:	6819      	ldr	r1, [r3, #0]
 8035a76:	4827      	ldr	r0, [pc, #156]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035a78:	4613      	mov	r3, r2
 8035a7a:	011b      	lsls	r3, r3, #4
 8035a7c:	4413      	add	r3, r2
 8035a7e:	00db      	lsls	r3, r3, #3
 8035a80:	4403      	add	r3, r0
 8035a82:	3320      	adds	r3, #32
 8035a84:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Priority            = dmaConfig[idx].priority;
 8035a86:	79b9      	ldrb	r1, [r7, #6]
 8035a88:	79ba      	ldrb	r2, [r7, #6]
 8035a8a:	4822      	ldr	r0, [pc, #136]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035a8c:	460b      	mov	r3, r1
 8035a8e:	011b      	lsls	r3, r3, #4
 8035a90:	440b      	add	r3, r1
 8035a92:	00db      	lsls	r3, r3, #3
 8035a94:	4403      	add	r3, r0
 8035a96:	3380      	adds	r3, #128	; 0x80
 8035a98:	6819      	ldr	r1, [r3, #0]
 8035a9a:	481e      	ldr	r0, [pc, #120]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035a9c:	4613      	mov	r3, r2
 8035a9e:	011b      	lsls	r3, r3, #4
 8035aa0:	4413      	add	r3, r2
 8035aa2:	00db      	lsls	r3, r3, #3
 8035aa4:	4403      	add	r3, r0
 8035aa6:	3324      	adds	r3, #36	; 0x24
 8035aa8:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.FIFOMode            = dmaConfig[idx].fifoMode;
 8035aaa:	79b9      	ldrb	r1, [r7, #6]
 8035aac:	79ba      	ldrb	r2, [r7, #6]
 8035aae:	4819      	ldr	r0, [pc, #100]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035ab0:	460b      	mov	r3, r1
 8035ab2:	011b      	lsls	r3, r3, #4
 8035ab4:	440b      	add	r3, r1
 8035ab6:	00db      	lsls	r3, r3, #3
 8035ab8:	4403      	add	r3, r0
 8035aba:	3384      	adds	r3, #132	; 0x84
 8035abc:	6819      	ldr	r1, [r3, #0]
 8035abe:	4815      	ldr	r0, [pc, #84]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035ac0:	4613      	mov	r3, r2
 8035ac2:	011b      	lsls	r3, r3, #4
 8035ac4:	4413      	add	r3, r2
 8035ac6:	00db      	lsls	r3, r3, #3
 8035ac8:	4403      	add	r3, r0
 8035aca:	3328      	adds	r3, #40	; 0x28
 8035acc:	6019      	str	r1, [r3, #0]

        if (HAL_DMA_Init(&(dmaConfig[idx].hdma)) != HAL_OK)
 8035ace:	79ba      	ldrb	r2, [r7, #6]
 8035ad0:	4613      	mov	r3, r2
 8035ad2:	011b      	lsls	r3, r3, #4
 8035ad4:	4413      	add	r3, r2
 8035ad6:	00db      	lsls	r3, r3, #3
 8035ad8:	4a0e      	ldr	r2, [pc, #56]	; (8035b14 <drv_dmaInit+0x1c8>)
 8035ada:	4413      	add	r3, r2
 8035adc:	3304      	adds	r3, #4
 8035ade:	4618      	mov	r0, r3
 8035ae0:	f7f3 fd6a 	bl	80295b8 <HAL_DMA_Init>
 8035ae4:	4603      	mov	r3, r0
 8035ae6:	2b00      	cmp	r3, #0
 8035ae8:	d001      	beq.n	8035aee <drv_dmaInit+0x1a2>
        {
            dmaInitResult = GOS_ERROR;
 8035aea:	23ae      	movs	r3, #174	; 0xae
 8035aec:	71fb      	strb	r3, [r7, #7]
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8035aee:	79bb      	ldrb	r3, [r7, #6]
 8035af0:	3301      	adds	r3, #1
 8035af2:	71bb      	strb	r3, [r7, #6]
 8035af4:	79ba      	ldrb	r2, [r7, #6]
 8035af6:	4b09      	ldr	r3, [pc, #36]	; (8035b1c <drv_dmaInit+0x1d0>)
 8035af8:	681b      	ldr	r3, [r3, #0]
 8035afa:	4909      	ldr	r1, [pc, #36]	; (8035b20 <drv_dmaInit+0x1d4>)
 8035afc:	fba1 1303 	umull	r1, r3, r1, r3
 8035b00:	09db      	lsrs	r3, r3, #7
 8035b02:	429a      	cmp	r2, r3
 8035b04:	f4ff af2c 	bcc.w	8035960 <drv_dmaInit+0x14>
        {
            // Init OK.
        }
    }

    return dmaInitResult;
 8035b08:	79fb      	ldrb	r3, [r7, #7]
}
 8035b0a:	4618      	mov	r0, r3
 8035b0c:	3708      	adds	r7, #8
 8035b0e:	46bd      	mov	sp, r7
 8035b10:	bd80      	pop	{r7, pc}
 8035b12:	bf00      	nop
 8035b14:	200014f0 	.word	0x200014f0
 8035b18:	20001a94 	.word	0x20001a94
 8035b1c:	20001820 	.word	0x20001820
 8035b20:	f0f0f0f1 	.word	0xf0f0f0f1

08035b24 <drv_dmaIsBusy>:

/*
 * Function: drv_dmaIsBusy
 */
bool_t drv_dmaIsBusy (drv_dmaDescriptor_t* pDMA)
{
 8035b24:	b580      	push	{r7, lr}
 8035b26:	b082      	sub	sp, #8
 8035b28:	af00      	add	r7, sp, #0
 8035b2a:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    return HAL_DMA_STATE_BUSY == HAL_DMA_GetState(&pDMA->hdma) ? GOS_TRUE : GOS_FALSE;
 8035b2c:	687b      	ldr	r3, [r7, #4]
 8035b2e:	3304      	adds	r3, #4
 8035b30:	4618      	mov	r0, r3
 8035b32:	f7f4 f863 	bl	8029bfc <HAL_DMA_GetState>
 8035b36:	4603      	mov	r3, r0
 8035b38:	2b02      	cmp	r3, #2
 8035b3a:	d101      	bne.n	8035b40 <drv_dmaIsBusy+0x1c>
 8035b3c:	2336      	movs	r3, #54	; 0x36
 8035b3e:	e000      	b.n	8035b42 <drv_dmaIsBusy+0x1e>
 8035b40:	2349      	movs	r3, #73	; 0x49
}
 8035b42:	4618      	mov	r0, r3
 8035b44:	3708      	adds	r7, #8
 8035b46:	46bd      	mov	sp, r7
 8035b48:	bd80      	pop	{r7, pc}
	...

08035b4c <DMA1_Stream0_IRQHandler>:

/*
 * Function: DMA1_Stream0_IRQHandler
 */
void_t DMA1_Stream0_IRQHandler (void_t)
{
 8035b4c:	b580      	push	{r7, lr}
 8035b4e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8035b50:	4b19      	ldr	r3, [pc, #100]	; (8035bb8 <DMA1_Stream0_IRQHandler+0x6c>)
 8035b52:	781b      	ldrb	r3, [r3, #0]
 8035b54:	2b00      	cmp	r3, #0
 8035b56:	d105      	bne.n	8035b64 <DMA1_Stream0_IRQHandler+0x18>
 8035b58:	4b18      	ldr	r3, [pc, #96]	; (8035bbc <DMA1_Stream0_IRQHandler+0x70>)
 8035b5a:	781b      	ldrb	r3, [r3, #0]
 8035b5c:	3301      	adds	r3, #1
 8035b5e:	b2da      	uxtb	r2, r3
 8035b60:	4b16      	ldr	r3, [pc, #88]	; (8035bbc <DMA1_Stream0_IRQHandler+0x70>)
 8035b62:	701a      	strb	r2, [r3, #0]
 8035b64:	4b14      	ldr	r3, [pc, #80]	; (8035bb8 <DMA1_Stream0_IRQHandler+0x6c>)
 8035b66:	781b      	ldrb	r3, [r3, #0]
 8035b68:	3301      	adds	r3, #1
 8035b6a:	b2da      	uxtb	r2, r3
 8035b6c:	4b12      	ldr	r3, [pc, #72]	; (8035bb8 <DMA1_Stream0_IRQHandler+0x6c>)
 8035b6e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_0] != NULL)
 8035b70:	4b13      	ldr	r3, [pc, #76]	; (8035bc0 <DMA1_Stream0_IRQHandler+0x74>)
 8035b72:	681b      	ldr	r3, [r3, #0]
 8035b74:	2b00      	cmp	r3, #0
 8035b76:	d005      	beq.n	8035b84 <DMA1_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_0]->hdma);
 8035b78:	4b11      	ldr	r3, [pc, #68]	; (8035bc0 <DMA1_Stream0_IRQHandler+0x74>)
 8035b7a:	681b      	ldr	r3, [r3, #0]
 8035b7c:	3304      	adds	r3, #4
 8035b7e:	4618      	mov	r0, r3
 8035b80:	f7f3 feb2 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8035b84:	4b0c      	ldr	r3, [pc, #48]	; (8035bb8 <DMA1_Stream0_IRQHandler+0x6c>)
 8035b86:	781b      	ldrb	r3, [r3, #0]
 8035b88:	2b00      	cmp	r3, #0
 8035b8a:	d005      	beq.n	8035b98 <DMA1_Stream0_IRQHandler+0x4c>
 8035b8c:	4b0a      	ldr	r3, [pc, #40]	; (8035bb8 <DMA1_Stream0_IRQHandler+0x6c>)
 8035b8e:	781b      	ldrb	r3, [r3, #0]
 8035b90:	3b01      	subs	r3, #1
 8035b92:	b2da      	uxtb	r2, r3
 8035b94:	4b08      	ldr	r3, [pc, #32]	; (8035bb8 <DMA1_Stream0_IRQHandler+0x6c>)
 8035b96:	701a      	strb	r2, [r3, #0]
 8035b98:	4b07      	ldr	r3, [pc, #28]	; (8035bb8 <DMA1_Stream0_IRQHandler+0x6c>)
 8035b9a:	781b      	ldrb	r3, [r3, #0]
 8035b9c:	2b00      	cmp	r3, #0
 8035b9e:	d109      	bne.n	8035bb4 <DMA1_Stream0_IRQHandler+0x68>
 8035ba0:	4b06      	ldr	r3, [pc, #24]	; (8035bbc <DMA1_Stream0_IRQHandler+0x70>)
 8035ba2:	781b      	ldrb	r3, [r3, #0]
 8035ba4:	2b00      	cmp	r3, #0
 8035ba6:	d005      	beq.n	8035bb4 <DMA1_Stream0_IRQHandler+0x68>
 8035ba8:	4b04      	ldr	r3, [pc, #16]	; (8035bbc <DMA1_Stream0_IRQHandler+0x70>)
 8035baa:	781b      	ldrb	r3, [r3, #0]
 8035bac:	3b01      	subs	r3, #1
 8035bae:	b2da      	uxtb	r2, r3
 8035bb0:	4b02      	ldr	r3, [pc, #8]	; (8035bbc <DMA1_Stream0_IRQHandler+0x70>)
 8035bb2:	701a      	strb	r2, [r3, #0]
}
 8035bb4:	bf00      	nop
 8035bb6:	bd80      	pop	{r7, pc}
 8035bb8:	20007446 	.word	0x20007446
 8035bbc:	20007445 	.word	0x20007445
 8035bc0:	20001824 	.word	0x20001824

08035bc4 <DMA1_Stream1_IRQHandler>:

/*
 * Function: DMA1_Stream1_IRQHandler
 */
void_t DMA1_Stream1_IRQHandler (void_t)
{
 8035bc4:	b580      	push	{r7, lr}
 8035bc6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8035bc8:	4b19      	ldr	r3, [pc, #100]	; (8035c30 <DMA1_Stream1_IRQHandler+0x6c>)
 8035bca:	781b      	ldrb	r3, [r3, #0]
 8035bcc:	2b00      	cmp	r3, #0
 8035bce:	d105      	bne.n	8035bdc <DMA1_Stream1_IRQHandler+0x18>
 8035bd0:	4b18      	ldr	r3, [pc, #96]	; (8035c34 <DMA1_Stream1_IRQHandler+0x70>)
 8035bd2:	781b      	ldrb	r3, [r3, #0]
 8035bd4:	3301      	adds	r3, #1
 8035bd6:	b2da      	uxtb	r2, r3
 8035bd8:	4b16      	ldr	r3, [pc, #88]	; (8035c34 <DMA1_Stream1_IRQHandler+0x70>)
 8035bda:	701a      	strb	r2, [r3, #0]
 8035bdc:	4b14      	ldr	r3, [pc, #80]	; (8035c30 <DMA1_Stream1_IRQHandler+0x6c>)
 8035bde:	781b      	ldrb	r3, [r3, #0]
 8035be0:	3301      	adds	r3, #1
 8035be2:	b2da      	uxtb	r2, r3
 8035be4:	4b12      	ldr	r3, [pc, #72]	; (8035c30 <DMA1_Stream1_IRQHandler+0x6c>)
 8035be6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_1] != NULL)
 8035be8:	4b13      	ldr	r3, [pc, #76]	; (8035c38 <DMA1_Stream1_IRQHandler+0x74>)
 8035bea:	685b      	ldr	r3, [r3, #4]
 8035bec:	2b00      	cmp	r3, #0
 8035bee:	d005      	beq.n	8035bfc <DMA1_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_1]->hdma);
 8035bf0:	4b11      	ldr	r3, [pc, #68]	; (8035c38 <DMA1_Stream1_IRQHandler+0x74>)
 8035bf2:	685b      	ldr	r3, [r3, #4]
 8035bf4:	3304      	adds	r3, #4
 8035bf6:	4618      	mov	r0, r3
 8035bf8:	f7f3 fe76 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8035bfc:	4b0c      	ldr	r3, [pc, #48]	; (8035c30 <DMA1_Stream1_IRQHandler+0x6c>)
 8035bfe:	781b      	ldrb	r3, [r3, #0]
 8035c00:	2b00      	cmp	r3, #0
 8035c02:	d005      	beq.n	8035c10 <DMA1_Stream1_IRQHandler+0x4c>
 8035c04:	4b0a      	ldr	r3, [pc, #40]	; (8035c30 <DMA1_Stream1_IRQHandler+0x6c>)
 8035c06:	781b      	ldrb	r3, [r3, #0]
 8035c08:	3b01      	subs	r3, #1
 8035c0a:	b2da      	uxtb	r2, r3
 8035c0c:	4b08      	ldr	r3, [pc, #32]	; (8035c30 <DMA1_Stream1_IRQHandler+0x6c>)
 8035c0e:	701a      	strb	r2, [r3, #0]
 8035c10:	4b07      	ldr	r3, [pc, #28]	; (8035c30 <DMA1_Stream1_IRQHandler+0x6c>)
 8035c12:	781b      	ldrb	r3, [r3, #0]
 8035c14:	2b00      	cmp	r3, #0
 8035c16:	d109      	bne.n	8035c2c <DMA1_Stream1_IRQHandler+0x68>
 8035c18:	4b06      	ldr	r3, [pc, #24]	; (8035c34 <DMA1_Stream1_IRQHandler+0x70>)
 8035c1a:	781b      	ldrb	r3, [r3, #0]
 8035c1c:	2b00      	cmp	r3, #0
 8035c1e:	d005      	beq.n	8035c2c <DMA1_Stream1_IRQHandler+0x68>
 8035c20:	4b04      	ldr	r3, [pc, #16]	; (8035c34 <DMA1_Stream1_IRQHandler+0x70>)
 8035c22:	781b      	ldrb	r3, [r3, #0]
 8035c24:	3b01      	subs	r3, #1
 8035c26:	b2da      	uxtb	r2, r3
 8035c28:	4b02      	ldr	r3, [pc, #8]	; (8035c34 <DMA1_Stream1_IRQHandler+0x70>)
 8035c2a:	701a      	strb	r2, [r3, #0]
}
 8035c2c:	bf00      	nop
 8035c2e:	bd80      	pop	{r7, pc}
 8035c30:	20007446 	.word	0x20007446
 8035c34:	20007445 	.word	0x20007445
 8035c38:	20001824 	.word	0x20001824

08035c3c <DMA1_Stream2_IRQHandler>:

/*
 * Function: DMA1_Stream2_IRQHandler
 */
void_t DMA1_Stream2_IRQHandler (void_t)
{
 8035c3c:	b580      	push	{r7, lr}
 8035c3e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8035c40:	4b19      	ldr	r3, [pc, #100]	; (8035ca8 <DMA1_Stream2_IRQHandler+0x6c>)
 8035c42:	781b      	ldrb	r3, [r3, #0]
 8035c44:	2b00      	cmp	r3, #0
 8035c46:	d105      	bne.n	8035c54 <DMA1_Stream2_IRQHandler+0x18>
 8035c48:	4b18      	ldr	r3, [pc, #96]	; (8035cac <DMA1_Stream2_IRQHandler+0x70>)
 8035c4a:	781b      	ldrb	r3, [r3, #0]
 8035c4c:	3301      	adds	r3, #1
 8035c4e:	b2da      	uxtb	r2, r3
 8035c50:	4b16      	ldr	r3, [pc, #88]	; (8035cac <DMA1_Stream2_IRQHandler+0x70>)
 8035c52:	701a      	strb	r2, [r3, #0]
 8035c54:	4b14      	ldr	r3, [pc, #80]	; (8035ca8 <DMA1_Stream2_IRQHandler+0x6c>)
 8035c56:	781b      	ldrb	r3, [r3, #0]
 8035c58:	3301      	adds	r3, #1
 8035c5a:	b2da      	uxtb	r2, r3
 8035c5c:	4b12      	ldr	r3, [pc, #72]	; (8035ca8 <DMA1_Stream2_IRQHandler+0x6c>)
 8035c5e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_2] != NULL)
 8035c60:	4b13      	ldr	r3, [pc, #76]	; (8035cb0 <DMA1_Stream2_IRQHandler+0x74>)
 8035c62:	689b      	ldr	r3, [r3, #8]
 8035c64:	2b00      	cmp	r3, #0
 8035c66:	d005      	beq.n	8035c74 <DMA1_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_2]->hdma);
 8035c68:	4b11      	ldr	r3, [pc, #68]	; (8035cb0 <DMA1_Stream2_IRQHandler+0x74>)
 8035c6a:	689b      	ldr	r3, [r3, #8]
 8035c6c:	3304      	adds	r3, #4
 8035c6e:	4618      	mov	r0, r3
 8035c70:	f7f3 fe3a 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8035c74:	4b0c      	ldr	r3, [pc, #48]	; (8035ca8 <DMA1_Stream2_IRQHandler+0x6c>)
 8035c76:	781b      	ldrb	r3, [r3, #0]
 8035c78:	2b00      	cmp	r3, #0
 8035c7a:	d005      	beq.n	8035c88 <DMA1_Stream2_IRQHandler+0x4c>
 8035c7c:	4b0a      	ldr	r3, [pc, #40]	; (8035ca8 <DMA1_Stream2_IRQHandler+0x6c>)
 8035c7e:	781b      	ldrb	r3, [r3, #0]
 8035c80:	3b01      	subs	r3, #1
 8035c82:	b2da      	uxtb	r2, r3
 8035c84:	4b08      	ldr	r3, [pc, #32]	; (8035ca8 <DMA1_Stream2_IRQHandler+0x6c>)
 8035c86:	701a      	strb	r2, [r3, #0]
 8035c88:	4b07      	ldr	r3, [pc, #28]	; (8035ca8 <DMA1_Stream2_IRQHandler+0x6c>)
 8035c8a:	781b      	ldrb	r3, [r3, #0]
 8035c8c:	2b00      	cmp	r3, #0
 8035c8e:	d109      	bne.n	8035ca4 <DMA1_Stream2_IRQHandler+0x68>
 8035c90:	4b06      	ldr	r3, [pc, #24]	; (8035cac <DMA1_Stream2_IRQHandler+0x70>)
 8035c92:	781b      	ldrb	r3, [r3, #0]
 8035c94:	2b00      	cmp	r3, #0
 8035c96:	d005      	beq.n	8035ca4 <DMA1_Stream2_IRQHandler+0x68>
 8035c98:	4b04      	ldr	r3, [pc, #16]	; (8035cac <DMA1_Stream2_IRQHandler+0x70>)
 8035c9a:	781b      	ldrb	r3, [r3, #0]
 8035c9c:	3b01      	subs	r3, #1
 8035c9e:	b2da      	uxtb	r2, r3
 8035ca0:	4b02      	ldr	r3, [pc, #8]	; (8035cac <DMA1_Stream2_IRQHandler+0x70>)
 8035ca2:	701a      	strb	r2, [r3, #0]
}
 8035ca4:	bf00      	nop
 8035ca6:	bd80      	pop	{r7, pc}
 8035ca8:	20007446 	.word	0x20007446
 8035cac:	20007445 	.word	0x20007445
 8035cb0:	20001824 	.word	0x20001824

08035cb4 <DMA1_Stream3_IRQHandler>:

/*
 * Function: DMA1_Stream3_IRQHandler
 */
void_t DMA1_Stream3_IRQHandler (void_t)
{
 8035cb4:	b580      	push	{r7, lr}
 8035cb6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8035cb8:	4b19      	ldr	r3, [pc, #100]	; (8035d20 <DMA1_Stream3_IRQHandler+0x6c>)
 8035cba:	781b      	ldrb	r3, [r3, #0]
 8035cbc:	2b00      	cmp	r3, #0
 8035cbe:	d105      	bne.n	8035ccc <DMA1_Stream3_IRQHandler+0x18>
 8035cc0:	4b18      	ldr	r3, [pc, #96]	; (8035d24 <DMA1_Stream3_IRQHandler+0x70>)
 8035cc2:	781b      	ldrb	r3, [r3, #0]
 8035cc4:	3301      	adds	r3, #1
 8035cc6:	b2da      	uxtb	r2, r3
 8035cc8:	4b16      	ldr	r3, [pc, #88]	; (8035d24 <DMA1_Stream3_IRQHandler+0x70>)
 8035cca:	701a      	strb	r2, [r3, #0]
 8035ccc:	4b14      	ldr	r3, [pc, #80]	; (8035d20 <DMA1_Stream3_IRQHandler+0x6c>)
 8035cce:	781b      	ldrb	r3, [r3, #0]
 8035cd0:	3301      	adds	r3, #1
 8035cd2:	b2da      	uxtb	r2, r3
 8035cd4:	4b12      	ldr	r3, [pc, #72]	; (8035d20 <DMA1_Stream3_IRQHandler+0x6c>)
 8035cd6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_3] != NULL)
 8035cd8:	4b13      	ldr	r3, [pc, #76]	; (8035d28 <DMA1_Stream3_IRQHandler+0x74>)
 8035cda:	68db      	ldr	r3, [r3, #12]
 8035cdc:	2b00      	cmp	r3, #0
 8035cde:	d005      	beq.n	8035cec <DMA1_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_3]->hdma);
 8035ce0:	4b11      	ldr	r3, [pc, #68]	; (8035d28 <DMA1_Stream3_IRQHandler+0x74>)
 8035ce2:	68db      	ldr	r3, [r3, #12]
 8035ce4:	3304      	adds	r3, #4
 8035ce6:	4618      	mov	r0, r3
 8035ce8:	f7f3 fdfe 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8035cec:	4b0c      	ldr	r3, [pc, #48]	; (8035d20 <DMA1_Stream3_IRQHandler+0x6c>)
 8035cee:	781b      	ldrb	r3, [r3, #0]
 8035cf0:	2b00      	cmp	r3, #0
 8035cf2:	d005      	beq.n	8035d00 <DMA1_Stream3_IRQHandler+0x4c>
 8035cf4:	4b0a      	ldr	r3, [pc, #40]	; (8035d20 <DMA1_Stream3_IRQHandler+0x6c>)
 8035cf6:	781b      	ldrb	r3, [r3, #0]
 8035cf8:	3b01      	subs	r3, #1
 8035cfa:	b2da      	uxtb	r2, r3
 8035cfc:	4b08      	ldr	r3, [pc, #32]	; (8035d20 <DMA1_Stream3_IRQHandler+0x6c>)
 8035cfe:	701a      	strb	r2, [r3, #0]
 8035d00:	4b07      	ldr	r3, [pc, #28]	; (8035d20 <DMA1_Stream3_IRQHandler+0x6c>)
 8035d02:	781b      	ldrb	r3, [r3, #0]
 8035d04:	2b00      	cmp	r3, #0
 8035d06:	d109      	bne.n	8035d1c <DMA1_Stream3_IRQHandler+0x68>
 8035d08:	4b06      	ldr	r3, [pc, #24]	; (8035d24 <DMA1_Stream3_IRQHandler+0x70>)
 8035d0a:	781b      	ldrb	r3, [r3, #0]
 8035d0c:	2b00      	cmp	r3, #0
 8035d0e:	d005      	beq.n	8035d1c <DMA1_Stream3_IRQHandler+0x68>
 8035d10:	4b04      	ldr	r3, [pc, #16]	; (8035d24 <DMA1_Stream3_IRQHandler+0x70>)
 8035d12:	781b      	ldrb	r3, [r3, #0]
 8035d14:	3b01      	subs	r3, #1
 8035d16:	b2da      	uxtb	r2, r3
 8035d18:	4b02      	ldr	r3, [pc, #8]	; (8035d24 <DMA1_Stream3_IRQHandler+0x70>)
 8035d1a:	701a      	strb	r2, [r3, #0]
}
 8035d1c:	bf00      	nop
 8035d1e:	bd80      	pop	{r7, pc}
 8035d20:	20007446 	.word	0x20007446
 8035d24:	20007445 	.word	0x20007445
 8035d28:	20001824 	.word	0x20001824

08035d2c <DMA1_Stream4_IRQHandler>:

/*
 * Function: DMA1_Stream4_IRQHandler
 */
void_t DMA1_Stream4_IRQHandler (void_t)
{
 8035d2c:	b580      	push	{r7, lr}
 8035d2e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8035d30:	4b19      	ldr	r3, [pc, #100]	; (8035d98 <DMA1_Stream4_IRQHandler+0x6c>)
 8035d32:	781b      	ldrb	r3, [r3, #0]
 8035d34:	2b00      	cmp	r3, #0
 8035d36:	d105      	bne.n	8035d44 <DMA1_Stream4_IRQHandler+0x18>
 8035d38:	4b18      	ldr	r3, [pc, #96]	; (8035d9c <DMA1_Stream4_IRQHandler+0x70>)
 8035d3a:	781b      	ldrb	r3, [r3, #0]
 8035d3c:	3301      	adds	r3, #1
 8035d3e:	b2da      	uxtb	r2, r3
 8035d40:	4b16      	ldr	r3, [pc, #88]	; (8035d9c <DMA1_Stream4_IRQHandler+0x70>)
 8035d42:	701a      	strb	r2, [r3, #0]
 8035d44:	4b14      	ldr	r3, [pc, #80]	; (8035d98 <DMA1_Stream4_IRQHandler+0x6c>)
 8035d46:	781b      	ldrb	r3, [r3, #0]
 8035d48:	3301      	adds	r3, #1
 8035d4a:	b2da      	uxtb	r2, r3
 8035d4c:	4b12      	ldr	r3, [pc, #72]	; (8035d98 <DMA1_Stream4_IRQHandler+0x6c>)
 8035d4e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_4] != NULL)
 8035d50:	4b13      	ldr	r3, [pc, #76]	; (8035da0 <DMA1_Stream4_IRQHandler+0x74>)
 8035d52:	691b      	ldr	r3, [r3, #16]
 8035d54:	2b00      	cmp	r3, #0
 8035d56:	d005      	beq.n	8035d64 <DMA1_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_4]->hdma);
 8035d58:	4b11      	ldr	r3, [pc, #68]	; (8035da0 <DMA1_Stream4_IRQHandler+0x74>)
 8035d5a:	691b      	ldr	r3, [r3, #16]
 8035d5c:	3304      	adds	r3, #4
 8035d5e:	4618      	mov	r0, r3
 8035d60:	f7f3 fdc2 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8035d64:	4b0c      	ldr	r3, [pc, #48]	; (8035d98 <DMA1_Stream4_IRQHandler+0x6c>)
 8035d66:	781b      	ldrb	r3, [r3, #0]
 8035d68:	2b00      	cmp	r3, #0
 8035d6a:	d005      	beq.n	8035d78 <DMA1_Stream4_IRQHandler+0x4c>
 8035d6c:	4b0a      	ldr	r3, [pc, #40]	; (8035d98 <DMA1_Stream4_IRQHandler+0x6c>)
 8035d6e:	781b      	ldrb	r3, [r3, #0]
 8035d70:	3b01      	subs	r3, #1
 8035d72:	b2da      	uxtb	r2, r3
 8035d74:	4b08      	ldr	r3, [pc, #32]	; (8035d98 <DMA1_Stream4_IRQHandler+0x6c>)
 8035d76:	701a      	strb	r2, [r3, #0]
 8035d78:	4b07      	ldr	r3, [pc, #28]	; (8035d98 <DMA1_Stream4_IRQHandler+0x6c>)
 8035d7a:	781b      	ldrb	r3, [r3, #0]
 8035d7c:	2b00      	cmp	r3, #0
 8035d7e:	d109      	bne.n	8035d94 <DMA1_Stream4_IRQHandler+0x68>
 8035d80:	4b06      	ldr	r3, [pc, #24]	; (8035d9c <DMA1_Stream4_IRQHandler+0x70>)
 8035d82:	781b      	ldrb	r3, [r3, #0]
 8035d84:	2b00      	cmp	r3, #0
 8035d86:	d005      	beq.n	8035d94 <DMA1_Stream4_IRQHandler+0x68>
 8035d88:	4b04      	ldr	r3, [pc, #16]	; (8035d9c <DMA1_Stream4_IRQHandler+0x70>)
 8035d8a:	781b      	ldrb	r3, [r3, #0]
 8035d8c:	3b01      	subs	r3, #1
 8035d8e:	b2da      	uxtb	r2, r3
 8035d90:	4b02      	ldr	r3, [pc, #8]	; (8035d9c <DMA1_Stream4_IRQHandler+0x70>)
 8035d92:	701a      	strb	r2, [r3, #0]
}
 8035d94:	bf00      	nop
 8035d96:	bd80      	pop	{r7, pc}
 8035d98:	20007446 	.word	0x20007446
 8035d9c:	20007445 	.word	0x20007445
 8035da0:	20001824 	.word	0x20001824

08035da4 <DMA1_Stream5_IRQHandler>:

/*
 * Function: DMA1_Stream5_IRQHandler
 */
void_t DMA1_Stream5_IRQHandler (void_t)
{
 8035da4:	b580      	push	{r7, lr}
 8035da6:	b082      	sub	sp, #8
 8035da8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u8_t idx = 0u;
 8035daa:	2300      	movs	r3, #0
 8035dac:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8035dae:	4b28      	ldr	r3, [pc, #160]	; (8035e50 <DMA1_Stream5_IRQHandler+0xac>)
 8035db0:	781b      	ldrb	r3, [r3, #0]
 8035db2:	2b00      	cmp	r3, #0
 8035db4:	d105      	bne.n	8035dc2 <DMA1_Stream5_IRQHandler+0x1e>
 8035db6:	4b27      	ldr	r3, [pc, #156]	; (8035e54 <DMA1_Stream5_IRQHandler+0xb0>)
 8035db8:	781b      	ldrb	r3, [r3, #0]
 8035dba:	3301      	adds	r3, #1
 8035dbc:	b2da      	uxtb	r2, r3
 8035dbe:	4b25      	ldr	r3, [pc, #148]	; (8035e54 <DMA1_Stream5_IRQHandler+0xb0>)
 8035dc0:	701a      	strb	r2, [r3, #0]
 8035dc2:	4b23      	ldr	r3, [pc, #140]	; (8035e50 <DMA1_Stream5_IRQHandler+0xac>)
 8035dc4:	781b      	ldrb	r3, [r3, #0]
 8035dc6:	3301      	adds	r3, #1
 8035dc8:	b2da      	uxtb	r2, r3
 8035dca:	4b21      	ldr	r3, [pc, #132]	; (8035e50 <DMA1_Stream5_IRQHandler+0xac>)
 8035dcc:	701a      	strb	r2, [r3, #0]

    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8035dce:	2300      	movs	r3, #0
 8035dd0:	71fb      	strb	r3, [r7, #7]
 8035dd2:	e017      	b.n	8035e04 <DMA1_Stream5_IRQHandler+0x60>
    {
        if (dmaConfig[idx].dmaStream == DRV_DMA_1_STREAM_5)
 8035dd4:	79fa      	ldrb	r2, [r7, #7]
 8035dd6:	4920      	ldr	r1, [pc, #128]	; (8035e58 <DMA1_Stream5_IRQHandler+0xb4>)
 8035dd8:	4613      	mov	r3, r2
 8035dda:	011b      	lsls	r3, r3, #4
 8035ddc:	4413      	add	r3, r2
 8035dde:	00db      	lsls	r3, r3, #3
 8035de0:	440b      	add	r3, r1
 8035de2:	781b      	ldrb	r3, [r3, #0]
 8035de4:	2b05      	cmp	r3, #5
 8035de6:	d10a      	bne.n	8035dfe <DMA1_Stream5_IRQHandler+0x5a>
        {
            HAL_DMA_IRQHandler(&dmaConfig[idx].hdma);
 8035de8:	79fa      	ldrb	r2, [r7, #7]
 8035dea:	4613      	mov	r3, r2
 8035dec:	011b      	lsls	r3, r3, #4
 8035dee:	4413      	add	r3, r2
 8035df0:	00db      	lsls	r3, r3, #3
 8035df2:	4a19      	ldr	r2, [pc, #100]	; (8035e58 <DMA1_Stream5_IRQHandler+0xb4>)
 8035df4:	4413      	add	r3, r2
 8035df6:	3304      	adds	r3, #4
 8035df8:	4618      	mov	r0, r3
 8035dfa:	f7f3 fd75 	bl	80298e8 <HAL_DMA_IRQHandler>
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8035dfe:	79fb      	ldrb	r3, [r7, #7]
 8035e00:	3301      	adds	r3, #1
 8035e02:	71fb      	strb	r3, [r7, #7]
 8035e04:	79fa      	ldrb	r2, [r7, #7]
 8035e06:	4b15      	ldr	r3, [pc, #84]	; (8035e5c <DMA1_Stream5_IRQHandler+0xb8>)
 8035e08:	681b      	ldr	r3, [r3, #0]
 8035e0a:	4915      	ldr	r1, [pc, #84]	; (8035e60 <DMA1_Stream5_IRQHandler+0xbc>)
 8035e0c:	fba1 1303 	umull	r1, r3, r1, r3
 8035e10:	09db      	lsrs	r3, r3, #7
 8035e12:	429a      	cmp	r2, r3
 8035e14:	d3de      	bcc.n	8035dd4 <DMA1_Stream5_IRQHandler+0x30>
        {
            // Continue.
        }
    }

    GOS_ISR_EXIT
 8035e16:	4b0e      	ldr	r3, [pc, #56]	; (8035e50 <DMA1_Stream5_IRQHandler+0xac>)
 8035e18:	781b      	ldrb	r3, [r3, #0]
 8035e1a:	2b00      	cmp	r3, #0
 8035e1c:	d005      	beq.n	8035e2a <DMA1_Stream5_IRQHandler+0x86>
 8035e1e:	4b0c      	ldr	r3, [pc, #48]	; (8035e50 <DMA1_Stream5_IRQHandler+0xac>)
 8035e20:	781b      	ldrb	r3, [r3, #0]
 8035e22:	3b01      	subs	r3, #1
 8035e24:	b2da      	uxtb	r2, r3
 8035e26:	4b0a      	ldr	r3, [pc, #40]	; (8035e50 <DMA1_Stream5_IRQHandler+0xac>)
 8035e28:	701a      	strb	r2, [r3, #0]
 8035e2a:	4b09      	ldr	r3, [pc, #36]	; (8035e50 <DMA1_Stream5_IRQHandler+0xac>)
 8035e2c:	781b      	ldrb	r3, [r3, #0]
 8035e2e:	2b00      	cmp	r3, #0
 8035e30:	d109      	bne.n	8035e46 <DMA1_Stream5_IRQHandler+0xa2>
 8035e32:	4b08      	ldr	r3, [pc, #32]	; (8035e54 <DMA1_Stream5_IRQHandler+0xb0>)
 8035e34:	781b      	ldrb	r3, [r3, #0]
 8035e36:	2b00      	cmp	r3, #0
 8035e38:	d005      	beq.n	8035e46 <DMA1_Stream5_IRQHandler+0xa2>
 8035e3a:	4b06      	ldr	r3, [pc, #24]	; (8035e54 <DMA1_Stream5_IRQHandler+0xb0>)
 8035e3c:	781b      	ldrb	r3, [r3, #0]
 8035e3e:	3b01      	subs	r3, #1
 8035e40:	b2da      	uxtb	r2, r3
 8035e42:	4b04      	ldr	r3, [pc, #16]	; (8035e54 <DMA1_Stream5_IRQHandler+0xb0>)
 8035e44:	701a      	strb	r2, [r3, #0]
}
 8035e46:	bf00      	nop
 8035e48:	3708      	adds	r7, #8
 8035e4a:	46bd      	mov	sp, r7
 8035e4c:	bd80      	pop	{r7, pc}
 8035e4e:	bf00      	nop
 8035e50:	20007446 	.word	0x20007446
 8035e54:	20007445 	.word	0x20007445
 8035e58:	200014f0 	.word	0x200014f0
 8035e5c:	20001820 	.word	0x20001820
 8035e60:	f0f0f0f1 	.word	0xf0f0f0f1

08035e64 <DMA1_Stream6_IRQHandler>:

/*
 * Function: DMA1_Stream6_IRQHandler
 */
void_t DMA1_Stream6_IRQHandler (void_t)
{
 8035e64:	b580      	push	{r7, lr}
 8035e66:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8035e68:	4b19      	ldr	r3, [pc, #100]	; (8035ed0 <DMA1_Stream6_IRQHandler+0x6c>)
 8035e6a:	781b      	ldrb	r3, [r3, #0]
 8035e6c:	2b00      	cmp	r3, #0
 8035e6e:	d105      	bne.n	8035e7c <DMA1_Stream6_IRQHandler+0x18>
 8035e70:	4b18      	ldr	r3, [pc, #96]	; (8035ed4 <DMA1_Stream6_IRQHandler+0x70>)
 8035e72:	781b      	ldrb	r3, [r3, #0]
 8035e74:	3301      	adds	r3, #1
 8035e76:	b2da      	uxtb	r2, r3
 8035e78:	4b16      	ldr	r3, [pc, #88]	; (8035ed4 <DMA1_Stream6_IRQHandler+0x70>)
 8035e7a:	701a      	strb	r2, [r3, #0]
 8035e7c:	4b14      	ldr	r3, [pc, #80]	; (8035ed0 <DMA1_Stream6_IRQHandler+0x6c>)
 8035e7e:	781b      	ldrb	r3, [r3, #0]
 8035e80:	3301      	adds	r3, #1
 8035e82:	b2da      	uxtb	r2, r3
 8035e84:	4b12      	ldr	r3, [pc, #72]	; (8035ed0 <DMA1_Stream6_IRQHandler+0x6c>)
 8035e86:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_6] != NULL)
 8035e88:	4b13      	ldr	r3, [pc, #76]	; (8035ed8 <DMA1_Stream6_IRQHandler+0x74>)
 8035e8a:	699b      	ldr	r3, [r3, #24]
 8035e8c:	2b00      	cmp	r3, #0
 8035e8e:	d005      	beq.n	8035e9c <DMA1_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_6]->hdma);
 8035e90:	4b11      	ldr	r3, [pc, #68]	; (8035ed8 <DMA1_Stream6_IRQHandler+0x74>)
 8035e92:	699b      	ldr	r3, [r3, #24]
 8035e94:	3304      	adds	r3, #4
 8035e96:	4618      	mov	r0, r3
 8035e98:	f7f3 fd26 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8035e9c:	4b0c      	ldr	r3, [pc, #48]	; (8035ed0 <DMA1_Stream6_IRQHandler+0x6c>)
 8035e9e:	781b      	ldrb	r3, [r3, #0]
 8035ea0:	2b00      	cmp	r3, #0
 8035ea2:	d005      	beq.n	8035eb0 <DMA1_Stream6_IRQHandler+0x4c>
 8035ea4:	4b0a      	ldr	r3, [pc, #40]	; (8035ed0 <DMA1_Stream6_IRQHandler+0x6c>)
 8035ea6:	781b      	ldrb	r3, [r3, #0]
 8035ea8:	3b01      	subs	r3, #1
 8035eaa:	b2da      	uxtb	r2, r3
 8035eac:	4b08      	ldr	r3, [pc, #32]	; (8035ed0 <DMA1_Stream6_IRQHandler+0x6c>)
 8035eae:	701a      	strb	r2, [r3, #0]
 8035eb0:	4b07      	ldr	r3, [pc, #28]	; (8035ed0 <DMA1_Stream6_IRQHandler+0x6c>)
 8035eb2:	781b      	ldrb	r3, [r3, #0]
 8035eb4:	2b00      	cmp	r3, #0
 8035eb6:	d109      	bne.n	8035ecc <DMA1_Stream6_IRQHandler+0x68>
 8035eb8:	4b06      	ldr	r3, [pc, #24]	; (8035ed4 <DMA1_Stream6_IRQHandler+0x70>)
 8035eba:	781b      	ldrb	r3, [r3, #0]
 8035ebc:	2b00      	cmp	r3, #0
 8035ebe:	d005      	beq.n	8035ecc <DMA1_Stream6_IRQHandler+0x68>
 8035ec0:	4b04      	ldr	r3, [pc, #16]	; (8035ed4 <DMA1_Stream6_IRQHandler+0x70>)
 8035ec2:	781b      	ldrb	r3, [r3, #0]
 8035ec4:	3b01      	subs	r3, #1
 8035ec6:	b2da      	uxtb	r2, r3
 8035ec8:	4b02      	ldr	r3, [pc, #8]	; (8035ed4 <DMA1_Stream6_IRQHandler+0x70>)
 8035eca:	701a      	strb	r2, [r3, #0]
}
 8035ecc:	bf00      	nop
 8035ece:	bd80      	pop	{r7, pc}
 8035ed0:	20007446 	.word	0x20007446
 8035ed4:	20007445 	.word	0x20007445
 8035ed8:	20001824 	.word	0x20001824

08035edc <DMA1_Stream7_IRQHandler>:

/*
 * Function: DMA1_Stream7_IRQHandler
 */
void_t DMA1_Stream7_IRQHandler (void_t)
{
 8035edc:	b580      	push	{r7, lr}
 8035ede:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8035ee0:	4b19      	ldr	r3, [pc, #100]	; (8035f48 <DMA1_Stream7_IRQHandler+0x6c>)
 8035ee2:	781b      	ldrb	r3, [r3, #0]
 8035ee4:	2b00      	cmp	r3, #0
 8035ee6:	d105      	bne.n	8035ef4 <DMA1_Stream7_IRQHandler+0x18>
 8035ee8:	4b18      	ldr	r3, [pc, #96]	; (8035f4c <DMA1_Stream7_IRQHandler+0x70>)
 8035eea:	781b      	ldrb	r3, [r3, #0]
 8035eec:	3301      	adds	r3, #1
 8035eee:	b2da      	uxtb	r2, r3
 8035ef0:	4b16      	ldr	r3, [pc, #88]	; (8035f4c <DMA1_Stream7_IRQHandler+0x70>)
 8035ef2:	701a      	strb	r2, [r3, #0]
 8035ef4:	4b14      	ldr	r3, [pc, #80]	; (8035f48 <DMA1_Stream7_IRQHandler+0x6c>)
 8035ef6:	781b      	ldrb	r3, [r3, #0]
 8035ef8:	3301      	adds	r3, #1
 8035efa:	b2da      	uxtb	r2, r3
 8035efc:	4b12      	ldr	r3, [pc, #72]	; (8035f48 <DMA1_Stream7_IRQHandler+0x6c>)
 8035efe:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_7] != NULL)
 8035f00:	4b13      	ldr	r3, [pc, #76]	; (8035f50 <DMA1_Stream7_IRQHandler+0x74>)
 8035f02:	69db      	ldr	r3, [r3, #28]
 8035f04:	2b00      	cmp	r3, #0
 8035f06:	d005      	beq.n	8035f14 <DMA1_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_7]->hdma);
 8035f08:	4b11      	ldr	r3, [pc, #68]	; (8035f50 <DMA1_Stream7_IRQHandler+0x74>)
 8035f0a:	69db      	ldr	r3, [r3, #28]
 8035f0c:	3304      	adds	r3, #4
 8035f0e:	4618      	mov	r0, r3
 8035f10:	f7f3 fcea 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8035f14:	4b0c      	ldr	r3, [pc, #48]	; (8035f48 <DMA1_Stream7_IRQHandler+0x6c>)
 8035f16:	781b      	ldrb	r3, [r3, #0]
 8035f18:	2b00      	cmp	r3, #0
 8035f1a:	d005      	beq.n	8035f28 <DMA1_Stream7_IRQHandler+0x4c>
 8035f1c:	4b0a      	ldr	r3, [pc, #40]	; (8035f48 <DMA1_Stream7_IRQHandler+0x6c>)
 8035f1e:	781b      	ldrb	r3, [r3, #0]
 8035f20:	3b01      	subs	r3, #1
 8035f22:	b2da      	uxtb	r2, r3
 8035f24:	4b08      	ldr	r3, [pc, #32]	; (8035f48 <DMA1_Stream7_IRQHandler+0x6c>)
 8035f26:	701a      	strb	r2, [r3, #0]
 8035f28:	4b07      	ldr	r3, [pc, #28]	; (8035f48 <DMA1_Stream7_IRQHandler+0x6c>)
 8035f2a:	781b      	ldrb	r3, [r3, #0]
 8035f2c:	2b00      	cmp	r3, #0
 8035f2e:	d109      	bne.n	8035f44 <DMA1_Stream7_IRQHandler+0x68>
 8035f30:	4b06      	ldr	r3, [pc, #24]	; (8035f4c <DMA1_Stream7_IRQHandler+0x70>)
 8035f32:	781b      	ldrb	r3, [r3, #0]
 8035f34:	2b00      	cmp	r3, #0
 8035f36:	d005      	beq.n	8035f44 <DMA1_Stream7_IRQHandler+0x68>
 8035f38:	4b04      	ldr	r3, [pc, #16]	; (8035f4c <DMA1_Stream7_IRQHandler+0x70>)
 8035f3a:	781b      	ldrb	r3, [r3, #0]
 8035f3c:	3b01      	subs	r3, #1
 8035f3e:	b2da      	uxtb	r2, r3
 8035f40:	4b02      	ldr	r3, [pc, #8]	; (8035f4c <DMA1_Stream7_IRQHandler+0x70>)
 8035f42:	701a      	strb	r2, [r3, #0]
}
 8035f44:	bf00      	nop
 8035f46:	bd80      	pop	{r7, pc}
 8035f48:	20007446 	.word	0x20007446
 8035f4c:	20007445 	.word	0x20007445
 8035f50:	20001824 	.word	0x20001824

08035f54 <DMA2_Stream0_IRQHandler>:

/*
 * Function: DMA2_Stream0_IRQHandler
 */
void_t DMA2_Stream0_IRQHandler (void_t)
{
 8035f54:	b580      	push	{r7, lr}
 8035f56:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8035f58:	4b19      	ldr	r3, [pc, #100]	; (8035fc0 <DMA2_Stream0_IRQHandler+0x6c>)
 8035f5a:	781b      	ldrb	r3, [r3, #0]
 8035f5c:	2b00      	cmp	r3, #0
 8035f5e:	d105      	bne.n	8035f6c <DMA2_Stream0_IRQHandler+0x18>
 8035f60:	4b18      	ldr	r3, [pc, #96]	; (8035fc4 <DMA2_Stream0_IRQHandler+0x70>)
 8035f62:	781b      	ldrb	r3, [r3, #0]
 8035f64:	3301      	adds	r3, #1
 8035f66:	b2da      	uxtb	r2, r3
 8035f68:	4b16      	ldr	r3, [pc, #88]	; (8035fc4 <DMA2_Stream0_IRQHandler+0x70>)
 8035f6a:	701a      	strb	r2, [r3, #0]
 8035f6c:	4b14      	ldr	r3, [pc, #80]	; (8035fc0 <DMA2_Stream0_IRQHandler+0x6c>)
 8035f6e:	781b      	ldrb	r3, [r3, #0]
 8035f70:	3301      	adds	r3, #1
 8035f72:	b2da      	uxtb	r2, r3
 8035f74:	4b12      	ldr	r3, [pc, #72]	; (8035fc0 <DMA2_Stream0_IRQHandler+0x6c>)
 8035f76:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_0] != NULL)
 8035f78:	4b13      	ldr	r3, [pc, #76]	; (8035fc8 <DMA2_Stream0_IRQHandler+0x74>)
 8035f7a:	6a1b      	ldr	r3, [r3, #32]
 8035f7c:	2b00      	cmp	r3, #0
 8035f7e:	d005      	beq.n	8035f8c <DMA2_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_0]->hdma);
 8035f80:	4b11      	ldr	r3, [pc, #68]	; (8035fc8 <DMA2_Stream0_IRQHandler+0x74>)
 8035f82:	6a1b      	ldr	r3, [r3, #32]
 8035f84:	3304      	adds	r3, #4
 8035f86:	4618      	mov	r0, r3
 8035f88:	f7f3 fcae 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8035f8c:	4b0c      	ldr	r3, [pc, #48]	; (8035fc0 <DMA2_Stream0_IRQHandler+0x6c>)
 8035f8e:	781b      	ldrb	r3, [r3, #0]
 8035f90:	2b00      	cmp	r3, #0
 8035f92:	d005      	beq.n	8035fa0 <DMA2_Stream0_IRQHandler+0x4c>
 8035f94:	4b0a      	ldr	r3, [pc, #40]	; (8035fc0 <DMA2_Stream0_IRQHandler+0x6c>)
 8035f96:	781b      	ldrb	r3, [r3, #0]
 8035f98:	3b01      	subs	r3, #1
 8035f9a:	b2da      	uxtb	r2, r3
 8035f9c:	4b08      	ldr	r3, [pc, #32]	; (8035fc0 <DMA2_Stream0_IRQHandler+0x6c>)
 8035f9e:	701a      	strb	r2, [r3, #0]
 8035fa0:	4b07      	ldr	r3, [pc, #28]	; (8035fc0 <DMA2_Stream0_IRQHandler+0x6c>)
 8035fa2:	781b      	ldrb	r3, [r3, #0]
 8035fa4:	2b00      	cmp	r3, #0
 8035fa6:	d109      	bne.n	8035fbc <DMA2_Stream0_IRQHandler+0x68>
 8035fa8:	4b06      	ldr	r3, [pc, #24]	; (8035fc4 <DMA2_Stream0_IRQHandler+0x70>)
 8035faa:	781b      	ldrb	r3, [r3, #0]
 8035fac:	2b00      	cmp	r3, #0
 8035fae:	d005      	beq.n	8035fbc <DMA2_Stream0_IRQHandler+0x68>
 8035fb0:	4b04      	ldr	r3, [pc, #16]	; (8035fc4 <DMA2_Stream0_IRQHandler+0x70>)
 8035fb2:	781b      	ldrb	r3, [r3, #0]
 8035fb4:	3b01      	subs	r3, #1
 8035fb6:	b2da      	uxtb	r2, r3
 8035fb8:	4b02      	ldr	r3, [pc, #8]	; (8035fc4 <DMA2_Stream0_IRQHandler+0x70>)
 8035fba:	701a      	strb	r2, [r3, #0]
}
 8035fbc:	bf00      	nop
 8035fbe:	bd80      	pop	{r7, pc}
 8035fc0:	20007446 	.word	0x20007446
 8035fc4:	20007445 	.word	0x20007445
 8035fc8:	20001824 	.word	0x20001824

08035fcc <DMA2_Stream1_IRQHandler>:

/*
 * Function: DMA2_Stream1_IRQHandler
 */
void_t DMA2_Stream1_IRQHandler (void_t)
{
 8035fcc:	b580      	push	{r7, lr}
 8035fce:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8035fd0:	4b19      	ldr	r3, [pc, #100]	; (8036038 <DMA2_Stream1_IRQHandler+0x6c>)
 8035fd2:	781b      	ldrb	r3, [r3, #0]
 8035fd4:	2b00      	cmp	r3, #0
 8035fd6:	d105      	bne.n	8035fe4 <DMA2_Stream1_IRQHandler+0x18>
 8035fd8:	4b18      	ldr	r3, [pc, #96]	; (803603c <DMA2_Stream1_IRQHandler+0x70>)
 8035fda:	781b      	ldrb	r3, [r3, #0]
 8035fdc:	3301      	adds	r3, #1
 8035fde:	b2da      	uxtb	r2, r3
 8035fe0:	4b16      	ldr	r3, [pc, #88]	; (803603c <DMA2_Stream1_IRQHandler+0x70>)
 8035fe2:	701a      	strb	r2, [r3, #0]
 8035fe4:	4b14      	ldr	r3, [pc, #80]	; (8036038 <DMA2_Stream1_IRQHandler+0x6c>)
 8035fe6:	781b      	ldrb	r3, [r3, #0]
 8035fe8:	3301      	adds	r3, #1
 8035fea:	b2da      	uxtb	r2, r3
 8035fec:	4b12      	ldr	r3, [pc, #72]	; (8036038 <DMA2_Stream1_IRQHandler+0x6c>)
 8035fee:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_1] != NULL)
 8035ff0:	4b13      	ldr	r3, [pc, #76]	; (8036040 <DMA2_Stream1_IRQHandler+0x74>)
 8035ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035ff4:	2b00      	cmp	r3, #0
 8035ff6:	d005      	beq.n	8036004 <DMA2_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_1]->hdma);
 8035ff8:	4b11      	ldr	r3, [pc, #68]	; (8036040 <DMA2_Stream1_IRQHandler+0x74>)
 8035ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8035ffc:	3304      	adds	r3, #4
 8035ffe:	4618      	mov	r0, r3
 8036000:	f7f3 fc72 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8036004:	4b0c      	ldr	r3, [pc, #48]	; (8036038 <DMA2_Stream1_IRQHandler+0x6c>)
 8036006:	781b      	ldrb	r3, [r3, #0]
 8036008:	2b00      	cmp	r3, #0
 803600a:	d005      	beq.n	8036018 <DMA2_Stream1_IRQHandler+0x4c>
 803600c:	4b0a      	ldr	r3, [pc, #40]	; (8036038 <DMA2_Stream1_IRQHandler+0x6c>)
 803600e:	781b      	ldrb	r3, [r3, #0]
 8036010:	3b01      	subs	r3, #1
 8036012:	b2da      	uxtb	r2, r3
 8036014:	4b08      	ldr	r3, [pc, #32]	; (8036038 <DMA2_Stream1_IRQHandler+0x6c>)
 8036016:	701a      	strb	r2, [r3, #0]
 8036018:	4b07      	ldr	r3, [pc, #28]	; (8036038 <DMA2_Stream1_IRQHandler+0x6c>)
 803601a:	781b      	ldrb	r3, [r3, #0]
 803601c:	2b00      	cmp	r3, #0
 803601e:	d109      	bne.n	8036034 <DMA2_Stream1_IRQHandler+0x68>
 8036020:	4b06      	ldr	r3, [pc, #24]	; (803603c <DMA2_Stream1_IRQHandler+0x70>)
 8036022:	781b      	ldrb	r3, [r3, #0]
 8036024:	2b00      	cmp	r3, #0
 8036026:	d005      	beq.n	8036034 <DMA2_Stream1_IRQHandler+0x68>
 8036028:	4b04      	ldr	r3, [pc, #16]	; (803603c <DMA2_Stream1_IRQHandler+0x70>)
 803602a:	781b      	ldrb	r3, [r3, #0]
 803602c:	3b01      	subs	r3, #1
 803602e:	b2da      	uxtb	r2, r3
 8036030:	4b02      	ldr	r3, [pc, #8]	; (803603c <DMA2_Stream1_IRQHandler+0x70>)
 8036032:	701a      	strb	r2, [r3, #0]
}
 8036034:	bf00      	nop
 8036036:	bd80      	pop	{r7, pc}
 8036038:	20007446 	.word	0x20007446
 803603c:	20007445 	.word	0x20007445
 8036040:	20001824 	.word	0x20001824

08036044 <DMA2_Stream2_IRQHandler>:

/*
 * Function: DMA2_Stream2_IRQHandler
 */
void_t DMA2_Stream2_IRQHandler (void_t)
{
 8036044:	b580      	push	{r7, lr}
 8036046:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8036048:	4b19      	ldr	r3, [pc, #100]	; (80360b0 <DMA2_Stream2_IRQHandler+0x6c>)
 803604a:	781b      	ldrb	r3, [r3, #0]
 803604c:	2b00      	cmp	r3, #0
 803604e:	d105      	bne.n	803605c <DMA2_Stream2_IRQHandler+0x18>
 8036050:	4b18      	ldr	r3, [pc, #96]	; (80360b4 <DMA2_Stream2_IRQHandler+0x70>)
 8036052:	781b      	ldrb	r3, [r3, #0]
 8036054:	3301      	adds	r3, #1
 8036056:	b2da      	uxtb	r2, r3
 8036058:	4b16      	ldr	r3, [pc, #88]	; (80360b4 <DMA2_Stream2_IRQHandler+0x70>)
 803605a:	701a      	strb	r2, [r3, #0]
 803605c:	4b14      	ldr	r3, [pc, #80]	; (80360b0 <DMA2_Stream2_IRQHandler+0x6c>)
 803605e:	781b      	ldrb	r3, [r3, #0]
 8036060:	3301      	adds	r3, #1
 8036062:	b2da      	uxtb	r2, r3
 8036064:	4b12      	ldr	r3, [pc, #72]	; (80360b0 <DMA2_Stream2_IRQHandler+0x6c>)
 8036066:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_2] != NULL)
 8036068:	4b13      	ldr	r3, [pc, #76]	; (80360b8 <DMA2_Stream2_IRQHandler+0x74>)
 803606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803606c:	2b00      	cmp	r3, #0
 803606e:	d005      	beq.n	803607c <DMA2_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_2]->hdma);
 8036070:	4b11      	ldr	r3, [pc, #68]	; (80360b8 <DMA2_Stream2_IRQHandler+0x74>)
 8036072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036074:	3304      	adds	r3, #4
 8036076:	4618      	mov	r0, r3
 8036078:	f7f3 fc36 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 803607c:	4b0c      	ldr	r3, [pc, #48]	; (80360b0 <DMA2_Stream2_IRQHandler+0x6c>)
 803607e:	781b      	ldrb	r3, [r3, #0]
 8036080:	2b00      	cmp	r3, #0
 8036082:	d005      	beq.n	8036090 <DMA2_Stream2_IRQHandler+0x4c>
 8036084:	4b0a      	ldr	r3, [pc, #40]	; (80360b0 <DMA2_Stream2_IRQHandler+0x6c>)
 8036086:	781b      	ldrb	r3, [r3, #0]
 8036088:	3b01      	subs	r3, #1
 803608a:	b2da      	uxtb	r2, r3
 803608c:	4b08      	ldr	r3, [pc, #32]	; (80360b0 <DMA2_Stream2_IRQHandler+0x6c>)
 803608e:	701a      	strb	r2, [r3, #0]
 8036090:	4b07      	ldr	r3, [pc, #28]	; (80360b0 <DMA2_Stream2_IRQHandler+0x6c>)
 8036092:	781b      	ldrb	r3, [r3, #0]
 8036094:	2b00      	cmp	r3, #0
 8036096:	d109      	bne.n	80360ac <DMA2_Stream2_IRQHandler+0x68>
 8036098:	4b06      	ldr	r3, [pc, #24]	; (80360b4 <DMA2_Stream2_IRQHandler+0x70>)
 803609a:	781b      	ldrb	r3, [r3, #0]
 803609c:	2b00      	cmp	r3, #0
 803609e:	d005      	beq.n	80360ac <DMA2_Stream2_IRQHandler+0x68>
 80360a0:	4b04      	ldr	r3, [pc, #16]	; (80360b4 <DMA2_Stream2_IRQHandler+0x70>)
 80360a2:	781b      	ldrb	r3, [r3, #0]
 80360a4:	3b01      	subs	r3, #1
 80360a6:	b2da      	uxtb	r2, r3
 80360a8:	4b02      	ldr	r3, [pc, #8]	; (80360b4 <DMA2_Stream2_IRQHandler+0x70>)
 80360aa:	701a      	strb	r2, [r3, #0]
}
 80360ac:	bf00      	nop
 80360ae:	bd80      	pop	{r7, pc}
 80360b0:	20007446 	.word	0x20007446
 80360b4:	20007445 	.word	0x20007445
 80360b8:	20001824 	.word	0x20001824

080360bc <DMA2_Stream3_IRQHandler>:

/*
 * Function: DMA2_Stream3_IRQHandler
 */
void_t DMA2_Stream3_IRQHandler (void_t)
{
 80360bc:	b580      	push	{r7, lr}
 80360be:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80360c0:	4b19      	ldr	r3, [pc, #100]	; (8036128 <DMA2_Stream3_IRQHandler+0x6c>)
 80360c2:	781b      	ldrb	r3, [r3, #0]
 80360c4:	2b00      	cmp	r3, #0
 80360c6:	d105      	bne.n	80360d4 <DMA2_Stream3_IRQHandler+0x18>
 80360c8:	4b18      	ldr	r3, [pc, #96]	; (803612c <DMA2_Stream3_IRQHandler+0x70>)
 80360ca:	781b      	ldrb	r3, [r3, #0]
 80360cc:	3301      	adds	r3, #1
 80360ce:	b2da      	uxtb	r2, r3
 80360d0:	4b16      	ldr	r3, [pc, #88]	; (803612c <DMA2_Stream3_IRQHandler+0x70>)
 80360d2:	701a      	strb	r2, [r3, #0]
 80360d4:	4b14      	ldr	r3, [pc, #80]	; (8036128 <DMA2_Stream3_IRQHandler+0x6c>)
 80360d6:	781b      	ldrb	r3, [r3, #0]
 80360d8:	3301      	adds	r3, #1
 80360da:	b2da      	uxtb	r2, r3
 80360dc:	4b12      	ldr	r3, [pc, #72]	; (8036128 <DMA2_Stream3_IRQHandler+0x6c>)
 80360de:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_3] != NULL)
 80360e0:	4b13      	ldr	r3, [pc, #76]	; (8036130 <DMA2_Stream3_IRQHandler+0x74>)
 80360e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80360e4:	2b00      	cmp	r3, #0
 80360e6:	d005      	beq.n	80360f4 <DMA2_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_3]->hdma);
 80360e8:	4b11      	ldr	r3, [pc, #68]	; (8036130 <DMA2_Stream3_IRQHandler+0x74>)
 80360ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80360ec:	3304      	adds	r3, #4
 80360ee:	4618      	mov	r0, r3
 80360f0:	f7f3 fbfa 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80360f4:	4b0c      	ldr	r3, [pc, #48]	; (8036128 <DMA2_Stream3_IRQHandler+0x6c>)
 80360f6:	781b      	ldrb	r3, [r3, #0]
 80360f8:	2b00      	cmp	r3, #0
 80360fa:	d005      	beq.n	8036108 <DMA2_Stream3_IRQHandler+0x4c>
 80360fc:	4b0a      	ldr	r3, [pc, #40]	; (8036128 <DMA2_Stream3_IRQHandler+0x6c>)
 80360fe:	781b      	ldrb	r3, [r3, #0]
 8036100:	3b01      	subs	r3, #1
 8036102:	b2da      	uxtb	r2, r3
 8036104:	4b08      	ldr	r3, [pc, #32]	; (8036128 <DMA2_Stream3_IRQHandler+0x6c>)
 8036106:	701a      	strb	r2, [r3, #0]
 8036108:	4b07      	ldr	r3, [pc, #28]	; (8036128 <DMA2_Stream3_IRQHandler+0x6c>)
 803610a:	781b      	ldrb	r3, [r3, #0]
 803610c:	2b00      	cmp	r3, #0
 803610e:	d109      	bne.n	8036124 <DMA2_Stream3_IRQHandler+0x68>
 8036110:	4b06      	ldr	r3, [pc, #24]	; (803612c <DMA2_Stream3_IRQHandler+0x70>)
 8036112:	781b      	ldrb	r3, [r3, #0]
 8036114:	2b00      	cmp	r3, #0
 8036116:	d005      	beq.n	8036124 <DMA2_Stream3_IRQHandler+0x68>
 8036118:	4b04      	ldr	r3, [pc, #16]	; (803612c <DMA2_Stream3_IRQHandler+0x70>)
 803611a:	781b      	ldrb	r3, [r3, #0]
 803611c:	3b01      	subs	r3, #1
 803611e:	b2da      	uxtb	r2, r3
 8036120:	4b02      	ldr	r3, [pc, #8]	; (803612c <DMA2_Stream3_IRQHandler+0x70>)
 8036122:	701a      	strb	r2, [r3, #0]
}
 8036124:	bf00      	nop
 8036126:	bd80      	pop	{r7, pc}
 8036128:	20007446 	.word	0x20007446
 803612c:	20007445 	.word	0x20007445
 8036130:	20001824 	.word	0x20001824

08036134 <DMA2_Stream4_IRQHandler>:

/*
 * Function: DMA2_Stream4_IRQHandler
 */
void_t DMA2_Stream4_IRQHandler (void_t)
{
 8036134:	b580      	push	{r7, lr}
 8036136:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8036138:	4b19      	ldr	r3, [pc, #100]	; (80361a0 <DMA2_Stream4_IRQHandler+0x6c>)
 803613a:	781b      	ldrb	r3, [r3, #0]
 803613c:	2b00      	cmp	r3, #0
 803613e:	d105      	bne.n	803614c <DMA2_Stream4_IRQHandler+0x18>
 8036140:	4b18      	ldr	r3, [pc, #96]	; (80361a4 <DMA2_Stream4_IRQHandler+0x70>)
 8036142:	781b      	ldrb	r3, [r3, #0]
 8036144:	3301      	adds	r3, #1
 8036146:	b2da      	uxtb	r2, r3
 8036148:	4b16      	ldr	r3, [pc, #88]	; (80361a4 <DMA2_Stream4_IRQHandler+0x70>)
 803614a:	701a      	strb	r2, [r3, #0]
 803614c:	4b14      	ldr	r3, [pc, #80]	; (80361a0 <DMA2_Stream4_IRQHandler+0x6c>)
 803614e:	781b      	ldrb	r3, [r3, #0]
 8036150:	3301      	adds	r3, #1
 8036152:	b2da      	uxtb	r2, r3
 8036154:	4b12      	ldr	r3, [pc, #72]	; (80361a0 <DMA2_Stream4_IRQHandler+0x6c>)
 8036156:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_4] != NULL)
 8036158:	4b13      	ldr	r3, [pc, #76]	; (80361a8 <DMA2_Stream4_IRQHandler+0x74>)
 803615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803615c:	2b00      	cmp	r3, #0
 803615e:	d005      	beq.n	803616c <DMA2_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_4]->hdma);
 8036160:	4b11      	ldr	r3, [pc, #68]	; (80361a8 <DMA2_Stream4_IRQHandler+0x74>)
 8036162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8036164:	3304      	adds	r3, #4
 8036166:	4618      	mov	r0, r3
 8036168:	f7f3 fbbe 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 803616c:	4b0c      	ldr	r3, [pc, #48]	; (80361a0 <DMA2_Stream4_IRQHandler+0x6c>)
 803616e:	781b      	ldrb	r3, [r3, #0]
 8036170:	2b00      	cmp	r3, #0
 8036172:	d005      	beq.n	8036180 <DMA2_Stream4_IRQHandler+0x4c>
 8036174:	4b0a      	ldr	r3, [pc, #40]	; (80361a0 <DMA2_Stream4_IRQHandler+0x6c>)
 8036176:	781b      	ldrb	r3, [r3, #0]
 8036178:	3b01      	subs	r3, #1
 803617a:	b2da      	uxtb	r2, r3
 803617c:	4b08      	ldr	r3, [pc, #32]	; (80361a0 <DMA2_Stream4_IRQHandler+0x6c>)
 803617e:	701a      	strb	r2, [r3, #0]
 8036180:	4b07      	ldr	r3, [pc, #28]	; (80361a0 <DMA2_Stream4_IRQHandler+0x6c>)
 8036182:	781b      	ldrb	r3, [r3, #0]
 8036184:	2b00      	cmp	r3, #0
 8036186:	d109      	bne.n	803619c <DMA2_Stream4_IRQHandler+0x68>
 8036188:	4b06      	ldr	r3, [pc, #24]	; (80361a4 <DMA2_Stream4_IRQHandler+0x70>)
 803618a:	781b      	ldrb	r3, [r3, #0]
 803618c:	2b00      	cmp	r3, #0
 803618e:	d005      	beq.n	803619c <DMA2_Stream4_IRQHandler+0x68>
 8036190:	4b04      	ldr	r3, [pc, #16]	; (80361a4 <DMA2_Stream4_IRQHandler+0x70>)
 8036192:	781b      	ldrb	r3, [r3, #0]
 8036194:	3b01      	subs	r3, #1
 8036196:	b2da      	uxtb	r2, r3
 8036198:	4b02      	ldr	r3, [pc, #8]	; (80361a4 <DMA2_Stream4_IRQHandler+0x70>)
 803619a:	701a      	strb	r2, [r3, #0]
}
 803619c:	bf00      	nop
 803619e:	bd80      	pop	{r7, pc}
 80361a0:	20007446 	.word	0x20007446
 80361a4:	20007445 	.word	0x20007445
 80361a8:	20001824 	.word	0x20001824

080361ac <DMA2_Stream5_IRQHandler>:

/*
 * Function: DMA2_Stream5_IRQHandler
 */
void_t DMA2_Stream5_IRQHandler (void_t)
{
 80361ac:	b580      	push	{r7, lr}
 80361ae:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80361b0:	4b19      	ldr	r3, [pc, #100]	; (8036218 <DMA2_Stream5_IRQHandler+0x6c>)
 80361b2:	781b      	ldrb	r3, [r3, #0]
 80361b4:	2b00      	cmp	r3, #0
 80361b6:	d105      	bne.n	80361c4 <DMA2_Stream5_IRQHandler+0x18>
 80361b8:	4b18      	ldr	r3, [pc, #96]	; (803621c <DMA2_Stream5_IRQHandler+0x70>)
 80361ba:	781b      	ldrb	r3, [r3, #0]
 80361bc:	3301      	adds	r3, #1
 80361be:	b2da      	uxtb	r2, r3
 80361c0:	4b16      	ldr	r3, [pc, #88]	; (803621c <DMA2_Stream5_IRQHandler+0x70>)
 80361c2:	701a      	strb	r2, [r3, #0]
 80361c4:	4b14      	ldr	r3, [pc, #80]	; (8036218 <DMA2_Stream5_IRQHandler+0x6c>)
 80361c6:	781b      	ldrb	r3, [r3, #0]
 80361c8:	3301      	adds	r3, #1
 80361ca:	b2da      	uxtb	r2, r3
 80361cc:	4b12      	ldr	r3, [pc, #72]	; (8036218 <DMA2_Stream5_IRQHandler+0x6c>)
 80361ce:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_5] != NULL)
 80361d0:	4b13      	ldr	r3, [pc, #76]	; (8036220 <DMA2_Stream5_IRQHandler+0x74>)
 80361d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80361d4:	2b00      	cmp	r3, #0
 80361d6:	d005      	beq.n	80361e4 <DMA2_Stream5_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_5]->hdma);
 80361d8:	4b11      	ldr	r3, [pc, #68]	; (8036220 <DMA2_Stream5_IRQHandler+0x74>)
 80361da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80361dc:	3304      	adds	r3, #4
 80361de:	4618      	mov	r0, r3
 80361e0:	f7f3 fb82 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80361e4:	4b0c      	ldr	r3, [pc, #48]	; (8036218 <DMA2_Stream5_IRQHandler+0x6c>)
 80361e6:	781b      	ldrb	r3, [r3, #0]
 80361e8:	2b00      	cmp	r3, #0
 80361ea:	d005      	beq.n	80361f8 <DMA2_Stream5_IRQHandler+0x4c>
 80361ec:	4b0a      	ldr	r3, [pc, #40]	; (8036218 <DMA2_Stream5_IRQHandler+0x6c>)
 80361ee:	781b      	ldrb	r3, [r3, #0]
 80361f0:	3b01      	subs	r3, #1
 80361f2:	b2da      	uxtb	r2, r3
 80361f4:	4b08      	ldr	r3, [pc, #32]	; (8036218 <DMA2_Stream5_IRQHandler+0x6c>)
 80361f6:	701a      	strb	r2, [r3, #0]
 80361f8:	4b07      	ldr	r3, [pc, #28]	; (8036218 <DMA2_Stream5_IRQHandler+0x6c>)
 80361fa:	781b      	ldrb	r3, [r3, #0]
 80361fc:	2b00      	cmp	r3, #0
 80361fe:	d109      	bne.n	8036214 <DMA2_Stream5_IRQHandler+0x68>
 8036200:	4b06      	ldr	r3, [pc, #24]	; (803621c <DMA2_Stream5_IRQHandler+0x70>)
 8036202:	781b      	ldrb	r3, [r3, #0]
 8036204:	2b00      	cmp	r3, #0
 8036206:	d005      	beq.n	8036214 <DMA2_Stream5_IRQHandler+0x68>
 8036208:	4b04      	ldr	r3, [pc, #16]	; (803621c <DMA2_Stream5_IRQHandler+0x70>)
 803620a:	781b      	ldrb	r3, [r3, #0]
 803620c:	3b01      	subs	r3, #1
 803620e:	b2da      	uxtb	r2, r3
 8036210:	4b02      	ldr	r3, [pc, #8]	; (803621c <DMA2_Stream5_IRQHandler+0x70>)
 8036212:	701a      	strb	r2, [r3, #0]
}
 8036214:	bf00      	nop
 8036216:	bd80      	pop	{r7, pc}
 8036218:	20007446 	.word	0x20007446
 803621c:	20007445 	.word	0x20007445
 8036220:	20001824 	.word	0x20001824

08036224 <DMA2_Stream6_IRQHandler>:

/*
 * Function: DMA2_Stream6_IRQHandler
 */
void_t DMA2_Stream6_IRQHandler (void_t)
{
 8036224:	b580      	push	{r7, lr}
 8036226:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8036228:	4b19      	ldr	r3, [pc, #100]	; (8036290 <DMA2_Stream6_IRQHandler+0x6c>)
 803622a:	781b      	ldrb	r3, [r3, #0]
 803622c:	2b00      	cmp	r3, #0
 803622e:	d105      	bne.n	803623c <DMA2_Stream6_IRQHandler+0x18>
 8036230:	4b18      	ldr	r3, [pc, #96]	; (8036294 <DMA2_Stream6_IRQHandler+0x70>)
 8036232:	781b      	ldrb	r3, [r3, #0]
 8036234:	3301      	adds	r3, #1
 8036236:	b2da      	uxtb	r2, r3
 8036238:	4b16      	ldr	r3, [pc, #88]	; (8036294 <DMA2_Stream6_IRQHandler+0x70>)
 803623a:	701a      	strb	r2, [r3, #0]
 803623c:	4b14      	ldr	r3, [pc, #80]	; (8036290 <DMA2_Stream6_IRQHandler+0x6c>)
 803623e:	781b      	ldrb	r3, [r3, #0]
 8036240:	3301      	adds	r3, #1
 8036242:	b2da      	uxtb	r2, r3
 8036244:	4b12      	ldr	r3, [pc, #72]	; (8036290 <DMA2_Stream6_IRQHandler+0x6c>)
 8036246:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_6] != NULL)
 8036248:	4b13      	ldr	r3, [pc, #76]	; (8036298 <DMA2_Stream6_IRQHandler+0x74>)
 803624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803624c:	2b00      	cmp	r3, #0
 803624e:	d005      	beq.n	803625c <DMA2_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_6]->hdma);
 8036250:	4b11      	ldr	r3, [pc, #68]	; (8036298 <DMA2_Stream6_IRQHandler+0x74>)
 8036252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036254:	3304      	adds	r3, #4
 8036256:	4618      	mov	r0, r3
 8036258:	f7f3 fb46 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 803625c:	4b0c      	ldr	r3, [pc, #48]	; (8036290 <DMA2_Stream6_IRQHandler+0x6c>)
 803625e:	781b      	ldrb	r3, [r3, #0]
 8036260:	2b00      	cmp	r3, #0
 8036262:	d005      	beq.n	8036270 <DMA2_Stream6_IRQHandler+0x4c>
 8036264:	4b0a      	ldr	r3, [pc, #40]	; (8036290 <DMA2_Stream6_IRQHandler+0x6c>)
 8036266:	781b      	ldrb	r3, [r3, #0]
 8036268:	3b01      	subs	r3, #1
 803626a:	b2da      	uxtb	r2, r3
 803626c:	4b08      	ldr	r3, [pc, #32]	; (8036290 <DMA2_Stream6_IRQHandler+0x6c>)
 803626e:	701a      	strb	r2, [r3, #0]
 8036270:	4b07      	ldr	r3, [pc, #28]	; (8036290 <DMA2_Stream6_IRQHandler+0x6c>)
 8036272:	781b      	ldrb	r3, [r3, #0]
 8036274:	2b00      	cmp	r3, #0
 8036276:	d109      	bne.n	803628c <DMA2_Stream6_IRQHandler+0x68>
 8036278:	4b06      	ldr	r3, [pc, #24]	; (8036294 <DMA2_Stream6_IRQHandler+0x70>)
 803627a:	781b      	ldrb	r3, [r3, #0]
 803627c:	2b00      	cmp	r3, #0
 803627e:	d005      	beq.n	803628c <DMA2_Stream6_IRQHandler+0x68>
 8036280:	4b04      	ldr	r3, [pc, #16]	; (8036294 <DMA2_Stream6_IRQHandler+0x70>)
 8036282:	781b      	ldrb	r3, [r3, #0]
 8036284:	3b01      	subs	r3, #1
 8036286:	b2da      	uxtb	r2, r3
 8036288:	4b02      	ldr	r3, [pc, #8]	; (8036294 <DMA2_Stream6_IRQHandler+0x70>)
 803628a:	701a      	strb	r2, [r3, #0]
}
 803628c:	bf00      	nop
 803628e:	bd80      	pop	{r7, pc}
 8036290:	20007446 	.word	0x20007446
 8036294:	20007445 	.word	0x20007445
 8036298:	20001824 	.word	0x20001824

0803629c <DMA2_Stream7_IRQHandler>:

/*
 * Function: DMA2_Stream7_IRQHandler
 */
void_t DMA2_Stream7_IRQHandler (void_t)
{
 803629c:	b580      	push	{r7, lr}
 803629e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80362a0:	4b19      	ldr	r3, [pc, #100]	; (8036308 <DMA2_Stream7_IRQHandler+0x6c>)
 80362a2:	781b      	ldrb	r3, [r3, #0]
 80362a4:	2b00      	cmp	r3, #0
 80362a6:	d105      	bne.n	80362b4 <DMA2_Stream7_IRQHandler+0x18>
 80362a8:	4b18      	ldr	r3, [pc, #96]	; (803630c <DMA2_Stream7_IRQHandler+0x70>)
 80362aa:	781b      	ldrb	r3, [r3, #0]
 80362ac:	3301      	adds	r3, #1
 80362ae:	b2da      	uxtb	r2, r3
 80362b0:	4b16      	ldr	r3, [pc, #88]	; (803630c <DMA2_Stream7_IRQHandler+0x70>)
 80362b2:	701a      	strb	r2, [r3, #0]
 80362b4:	4b14      	ldr	r3, [pc, #80]	; (8036308 <DMA2_Stream7_IRQHandler+0x6c>)
 80362b6:	781b      	ldrb	r3, [r3, #0]
 80362b8:	3301      	adds	r3, #1
 80362ba:	b2da      	uxtb	r2, r3
 80362bc:	4b12      	ldr	r3, [pc, #72]	; (8036308 <DMA2_Stream7_IRQHandler+0x6c>)
 80362be:	701a      	strb	r2, [r3, #0]


    if (pDMADescriptorLut[DRV_DMA_2_STREAM_7] != NULL)
 80362c0:	4b13      	ldr	r3, [pc, #76]	; (8036310 <DMA2_Stream7_IRQHandler+0x74>)
 80362c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80362c4:	2b00      	cmp	r3, #0
 80362c6:	d005      	beq.n	80362d4 <DMA2_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_7]->hdma);
 80362c8:	4b11      	ldr	r3, [pc, #68]	; (8036310 <DMA2_Stream7_IRQHandler+0x74>)
 80362ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80362cc:	3304      	adds	r3, #4
 80362ce:	4618      	mov	r0, r3
 80362d0:	f7f3 fb0a 	bl	80298e8 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80362d4:	4b0c      	ldr	r3, [pc, #48]	; (8036308 <DMA2_Stream7_IRQHandler+0x6c>)
 80362d6:	781b      	ldrb	r3, [r3, #0]
 80362d8:	2b00      	cmp	r3, #0
 80362da:	d005      	beq.n	80362e8 <DMA2_Stream7_IRQHandler+0x4c>
 80362dc:	4b0a      	ldr	r3, [pc, #40]	; (8036308 <DMA2_Stream7_IRQHandler+0x6c>)
 80362de:	781b      	ldrb	r3, [r3, #0]
 80362e0:	3b01      	subs	r3, #1
 80362e2:	b2da      	uxtb	r2, r3
 80362e4:	4b08      	ldr	r3, [pc, #32]	; (8036308 <DMA2_Stream7_IRQHandler+0x6c>)
 80362e6:	701a      	strb	r2, [r3, #0]
 80362e8:	4b07      	ldr	r3, [pc, #28]	; (8036308 <DMA2_Stream7_IRQHandler+0x6c>)
 80362ea:	781b      	ldrb	r3, [r3, #0]
 80362ec:	2b00      	cmp	r3, #0
 80362ee:	d109      	bne.n	8036304 <DMA2_Stream7_IRQHandler+0x68>
 80362f0:	4b06      	ldr	r3, [pc, #24]	; (803630c <DMA2_Stream7_IRQHandler+0x70>)
 80362f2:	781b      	ldrb	r3, [r3, #0]
 80362f4:	2b00      	cmp	r3, #0
 80362f6:	d005      	beq.n	8036304 <DMA2_Stream7_IRQHandler+0x68>
 80362f8:	4b04      	ldr	r3, [pc, #16]	; (803630c <DMA2_Stream7_IRQHandler+0x70>)
 80362fa:	781b      	ldrb	r3, [r3, #0]
 80362fc:	3b01      	subs	r3, #1
 80362fe:	b2da      	uxtb	r2, r3
 8036300:	4b02      	ldr	r3, [pc, #8]	; (803630c <DMA2_Stream7_IRQHandler+0x70>)
 8036302:	701a      	strb	r2, [r3, #0]
}
 8036304:	bf00      	nop
 8036306:	bd80      	pop	{r7, pc}
 8036308:	20007446 	.word	0x20007446
 803630c:	20007445 	.word	0x20007445
 8036310:	20001824 	.word	0x20001824

08036314 <drv_gpioInit>:

/*
 * Function: drv_gpioInit
 */
gos_result_t drv_gpioInit (void_t)
{
 8036314:	b580      	push	{r7, lr}
 8036316:	b082      	sub	sp, #8
 8036318:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gpioInitResult = GOS_SUCCESS;
 803631a:	2355      	movs	r3, #85	; 0x55
 803631c:	71fb      	strb	r3, [r7, #7]
    u8_t         gpioIdx        = 0u;
 803631e:	2300      	movs	r3, #0
 8036320:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (gpioConfig != NULL)
    {
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 8036322:	2300      	movs	r3, #0
 8036324:	71bb      	strb	r3, [r7, #6]
 8036326:	e00e      	b.n	8036346 <drv_gpioInit+0x32>
        {
            GOS_CONCAT_RESULT(gpioInitResult, drv_gpioInitPin(gpioIdx));
 8036328:	79fb      	ldrb	r3, [r7, #7]
 803632a:	2b55      	cmp	r3, #85	; 0x55
 803632c:	d106      	bne.n	803633c <drv_gpioInit+0x28>
 803632e:	79bb      	ldrb	r3, [r7, #6]
 8036330:	4618      	mov	r0, r3
 8036332:	f000 f81b 	bl	803636c <drv_gpioInitPin>
 8036336:	4603      	mov	r3, r0
 8036338:	71fb      	strb	r3, [r7, #7]
 803633a:	e001      	b.n	8036340 <drv_gpioInit+0x2c>
 803633c:	23ae      	movs	r3, #174	; 0xae
 803633e:	71fb      	strb	r3, [r7, #7]
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 8036340:	79bb      	ldrb	r3, [r7, #6]
 8036342:	3301      	adds	r3, #1
 8036344:	71bb      	strb	r3, [r7, #6]
 8036346:	79ba      	ldrb	r2, [r7, #6]
 8036348:	4b06      	ldr	r3, [pc, #24]	; (8036364 <drv_gpioInit+0x50>)
 803634a:	681b      	ldr	r3, [r3, #0]
 803634c:	4906      	ldr	r1, [pc, #24]	; (8036368 <drv_gpioInit+0x54>)
 803634e:	fba1 1303 	umull	r1, r3, r1, r3
 8036352:	091b      	lsrs	r3, r3, #4
 8036354:	429a      	cmp	r2, r3
 8036356:	d3e7      	bcc.n	8036328 <drv_gpioInit+0x14>
    else
    {
        // Configuration array is NULL pointer.
    }

    return gpioInitResult;
 8036358:	79fb      	ldrb	r3, [r7, #7]
}
 803635a:	4618      	mov	r0, r3
 803635c:	3708      	adds	r7, #8
 803635e:	46bd      	mov	sp, r7
 8036360:	bd80      	pop	{r7, pc}
 8036362:	bf00      	nop
 8036364:	2000186c 	.word	0x2000186c
 8036368:	aaaaaaab 	.word	0xaaaaaaab

0803636c <drv_gpioInitPin>:

/*
 * Function: drv_gpioInitPin
 */
gos_result_t drv_gpioInitPin (u8_t pinIndex)
{
 803636c:	b580      	push	{r7, lr}
 803636e:	b088      	sub	sp, #32
 8036370:	af00      	add	r7, sp, #0
 8036372:	4603      	mov	r3, r0
 8036374:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 8036376:	23ae      	movs	r3, #174	; 0xae
 8036378:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 803637a:	f107 0308 	add.w	r3, r7, #8
 803637e:	2200      	movs	r2, #0
 8036380:	601a      	str	r2, [r3, #0]
 8036382:	605a      	str	r2, [r3, #4]
 8036384:	609a      	str	r2, [r3, #8]
 8036386:	60da      	str	r2, [r3, #12]
 8036388:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pinIndex < (gpioConfigSize / sizeof(drv_gpioDescriptor_t)))
 803638a:	79fa      	ldrb	r2, [r7, #7]
 803638c:	4b27      	ldr	r3, [pc, #156]	; (803642c <drv_gpioInitPin+0xc0>)
 803638e:	681b      	ldr	r3, [r3, #0]
 8036390:	4927      	ldr	r1, [pc, #156]	; (8036430 <drv_gpioInitPin+0xc4>)
 8036392:	fba1 1303 	umull	r1, r3, r1, r3
 8036396:	091b      	lsrs	r3, r3, #4
 8036398:	429a      	cmp	r2, r3
 803639a:	d241      	bcs.n	8036420 <drv_gpioInitPin+0xb4>
    {
        gpioInit.Pin       = gpioConfig[pinIndex].pin;
 803639c:	79fa      	ldrb	r2, [r7, #7]
 803639e:	4925      	ldr	r1, [pc, #148]	; (8036434 <drv_gpioInitPin+0xc8>)
 80363a0:	4613      	mov	r3, r2
 80363a2:	005b      	lsls	r3, r3, #1
 80363a4:	4413      	add	r3, r2
 80363a6:	00db      	lsls	r3, r3, #3
 80363a8:	440b      	add	r3, r1
 80363aa:	3304      	adds	r3, #4
 80363ac:	881b      	ldrh	r3, [r3, #0]
 80363ae:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = gpioConfig[pinIndex].mode;
 80363b0:	79fa      	ldrb	r2, [r7, #7]
 80363b2:	4920      	ldr	r1, [pc, #128]	; (8036434 <drv_gpioInitPin+0xc8>)
 80363b4:	4613      	mov	r3, r2
 80363b6:	005b      	lsls	r3, r3, #1
 80363b8:	4413      	add	r3, r2
 80363ba:	00db      	lsls	r3, r3, #3
 80363bc:	440b      	add	r3, r1
 80363be:	3308      	adds	r3, #8
 80363c0:	681b      	ldr	r3, [r3, #0]
 80363c2:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = gpioConfig[pinIndex].pull;
 80363c4:	79fa      	ldrb	r2, [r7, #7]
 80363c6:	491b      	ldr	r1, [pc, #108]	; (8036434 <drv_gpioInitPin+0xc8>)
 80363c8:	4613      	mov	r3, r2
 80363ca:	005b      	lsls	r3, r3, #1
 80363cc:	4413      	add	r3, r2
 80363ce:	00db      	lsls	r3, r3, #3
 80363d0:	440b      	add	r3, r1
 80363d2:	3310      	adds	r3, #16
 80363d4:	681b      	ldr	r3, [r3, #0]
 80363d6:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = gpioConfig[pinIndex].speed;
 80363d8:	79fa      	ldrb	r2, [r7, #7]
 80363da:	4916      	ldr	r1, [pc, #88]	; (8036434 <drv_gpioInitPin+0xc8>)
 80363dc:	4613      	mov	r3, r2
 80363de:	005b      	lsls	r3, r3, #1
 80363e0:	4413      	add	r3, r2
 80363e2:	00db      	lsls	r3, r3, #3
 80363e4:	440b      	add	r3, r1
 80363e6:	330c      	adds	r3, #12
 80363e8:	681b      	ldr	r3, [r3, #0]
 80363ea:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = gpioConfig[pinIndex].alternate;
 80363ec:	79fa      	ldrb	r2, [r7, #7]
 80363ee:	4911      	ldr	r1, [pc, #68]	; (8036434 <drv_gpioInitPin+0xc8>)
 80363f0:	4613      	mov	r3, r2
 80363f2:	005b      	lsls	r3, r3, #1
 80363f4:	4413      	add	r3, r2
 80363f6:	00db      	lsls	r3, r3, #3
 80363f8:	440b      	add	r3, r1
 80363fa:	3314      	adds	r3, #20
 80363fc:	681b      	ldr	r3, [r3, #0]
 80363fe:	61bb      	str	r3, [r7, #24]

        HAL_GPIO_Init(gpioConfig[pinIndex].port, &gpioInit);
 8036400:	79fa      	ldrb	r2, [r7, #7]
 8036402:	490c      	ldr	r1, [pc, #48]	; (8036434 <drv_gpioInitPin+0xc8>)
 8036404:	4613      	mov	r3, r2
 8036406:	005b      	lsls	r3, r3, #1
 8036408:	4413      	add	r3, r2
 803640a:	00db      	lsls	r3, r3, #3
 803640c:	440b      	add	r3, r1
 803640e:	681b      	ldr	r3, [r3, #0]
 8036410:	f107 0208 	add.w	r2, r7, #8
 8036414:	4611      	mov	r1, r2
 8036416:	4618      	mov	r0, r3
 8036418:	f7f3 ffd2 	bl	802a3c0 <HAL_GPIO_Init>

        gpioInitPinResult = GOS_SUCCESS;
 803641c:	2355      	movs	r3, #85	; 0x55
 803641e:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Index error.
    }

    return gpioInitPinResult;
 8036420:	7ffb      	ldrb	r3, [r7, #31]
}
 8036422:	4618      	mov	r0, r3
 8036424:	3720      	adds	r7, #32
 8036426:	46bd      	mov	sp, r7
 8036428:	bd80      	pop	{r7, pc}
 803642a:	bf00      	nop
 803642c:	2000186c 	.word	0x2000186c
 8036430:	aaaaaaab 	.word	0xaaaaaaab
 8036434:	08048fc0 	.word	0x08048fc0

08036438 <drv_gpioWritePin>:

/*
 * Function: drv_gpioWritePin
 */
gos_result_t drv_gpioWritePin (u8_t pinIndex, drv_gpioState_t state)
{
 8036438:	b580      	push	{r7, lr}
 803643a:	b084      	sub	sp, #16
 803643c:	af00      	add	r7, sp, #0
 803643e:	4603      	mov	r3, r0
 8036440:	460a      	mov	r2, r1
 8036442:	71fb      	strb	r3, [r7, #7]
 8036444:	4613      	mov	r3, r2
 8036446:	71bb      	strb	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t gpioWritePinResult = GOS_ERROR;
 8036448:	23ae      	movs	r3, #174	; 0xae
 803644a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t) && state >= GPIO_STATE_LOW &&
 803644c:	79fa      	ldrb	r2, [r7, #7]
 803644e:	4b13      	ldr	r3, [pc, #76]	; (803649c <drv_gpioWritePin+0x64>)
 8036450:	681b      	ldr	r3, [r3, #0]
 8036452:	4913      	ldr	r1, [pc, #76]	; (80364a0 <drv_gpioWritePin+0x68>)
 8036454:	fba1 1303 	umull	r1, r3, r1, r3
 8036458:	091b      	lsrs	r3, r3, #4
 803645a:	429a      	cmp	r2, r3
 803645c:	d219      	bcs.n	8036492 <drv_gpioWritePin+0x5a>
 803645e:	79bb      	ldrb	r3, [r7, #6]
 8036460:	2b01      	cmp	r3, #1
 8036462:	d816      	bhi.n	8036492 <drv_gpioWritePin+0x5a>
        state <= GPIO_STATE_HIGH)
    {
        HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, state);
 8036464:	79fa      	ldrb	r2, [r7, #7]
 8036466:	490f      	ldr	r1, [pc, #60]	; (80364a4 <drv_gpioWritePin+0x6c>)
 8036468:	4613      	mov	r3, r2
 803646a:	005b      	lsls	r3, r3, #1
 803646c:	4413      	add	r3, r2
 803646e:	00db      	lsls	r3, r3, #3
 8036470:	440b      	add	r3, r1
 8036472:	6818      	ldr	r0, [r3, #0]
 8036474:	79fa      	ldrb	r2, [r7, #7]
 8036476:	490b      	ldr	r1, [pc, #44]	; (80364a4 <drv_gpioWritePin+0x6c>)
 8036478:	4613      	mov	r3, r2
 803647a:	005b      	lsls	r3, r3, #1
 803647c:	4413      	add	r3, r2
 803647e:	00db      	lsls	r3, r3, #3
 8036480:	440b      	add	r3, r1
 8036482:	3304      	adds	r3, #4
 8036484:	881b      	ldrh	r3, [r3, #0]
 8036486:	79ba      	ldrb	r2, [r7, #6]
 8036488:	4619      	mov	r1, r3
 803648a:	f7f4 f92d 	bl	802a6e8 <HAL_GPIO_WritePin>
        gpioWritePinResult = GOS_SUCCESS;
 803648e:	2355      	movs	r3, #85	; 0x55
 8036490:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioWritePinResult;
 8036492:	7bfb      	ldrb	r3, [r7, #15]
}
 8036494:	4618      	mov	r0, r3
 8036496:	3710      	adds	r7, #16
 8036498:	46bd      	mov	sp, r7
 803649a:	bd80      	pop	{r7, pc}
 803649c:	2000186c 	.word	0x2000186c
 80364a0:	aaaaaaab 	.word	0xaaaaaaab
 80364a4:	08048fc0 	.word	0x08048fc0

080364a8 <drv_gpioTgglePin>:

/*
 * Function: drv_gpioTgglePin
 */
gos_result_t drv_gpioTgglePin (u8_t pinIndex)
{
 80364a8:	b580      	push	{r7, lr}
 80364aa:	b084      	sub	sp, #16
 80364ac:	af00      	add	r7, sp, #0
 80364ae:	4603      	mov	r3, r0
 80364b0:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t gpioTogglePinResult = GOS_ERROR;
 80364b2:	23ae      	movs	r3, #174	; 0xae
 80364b4:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t))
 80364b6:	79fa      	ldrb	r2, [r7, #7]
 80364b8:	4b11      	ldr	r3, [pc, #68]	; (8036500 <drv_gpioTgglePin+0x58>)
 80364ba:	681b      	ldr	r3, [r3, #0]
 80364bc:	4911      	ldr	r1, [pc, #68]	; (8036504 <drv_gpioTgglePin+0x5c>)
 80364be:	fba1 1303 	umull	r1, r3, r1, r3
 80364c2:	091b      	lsrs	r3, r3, #4
 80364c4:	429a      	cmp	r2, r3
 80364c6:	d215      	bcs.n	80364f4 <drv_gpioTgglePin+0x4c>
    {
        HAL_GPIO_TogglePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin);
 80364c8:	79fa      	ldrb	r2, [r7, #7]
 80364ca:	490f      	ldr	r1, [pc, #60]	; (8036508 <drv_gpioTgglePin+0x60>)
 80364cc:	4613      	mov	r3, r2
 80364ce:	005b      	lsls	r3, r3, #1
 80364d0:	4413      	add	r3, r2
 80364d2:	00db      	lsls	r3, r3, #3
 80364d4:	440b      	add	r3, r1
 80364d6:	6818      	ldr	r0, [r3, #0]
 80364d8:	79fa      	ldrb	r2, [r7, #7]
 80364da:	490b      	ldr	r1, [pc, #44]	; (8036508 <drv_gpioTgglePin+0x60>)
 80364dc:	4613      	mov	r3, r2
 80364de:	005b      	lsls	r3, r3, #1
 80364e0:	4413      	add	r3, r2
 80364e2:	00db      	lsls	r3, r3, #3
 80364e4:	440b      	add	r3, r1
 80364e6:	3304      	adds	r3, #4
 80364e8:	881b      	ldrh	r3, [r3, #0]
 80364ea:	4619      	mov	r1, r3
 80364ec:	f7f4 f915 	bl	802a71a <HAL_GPIO_TogglePin>
        gpioTogglePinResult = GOS_SUCCESS;
 80364f0:	2355      	movs	r3, #85	; 0x55
 80364f2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioTogglePinResult;
 80364f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80364f6:	4618      	mov	r0, r3
 80364f8:	3710      	adds	r7, #16
 80364fa:	46bd      	mov	sp, r7
 80364fc:	bd80      	pop	{r7, pc}
 80364fe:	bf00      	nop
 8036500:	2000186c 	.word	0x2000186c
 8036504:	aaaaaaab 	.word	0xaaaaaaab
 8036508:	08048fc0 	.word	0x08048fc0

0803650c <EXTI9_5_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI9_5_IRQHandler (void_t)
{
 803650c:	b580      	push	{r7, lr}
 803650e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8036510:	4b1d      	ldr	r3, [pc, #116]	; (8036588 <EXTI9_5_IRQHandler+0x7c>)
 8036512:	781b      	ldrb	r3, [r3, #0]
 8036514:	2b00      	cmp	r3, #0
 8036516:	d105      	bne.n	8036524 <EXTI9_5_IRQHandler+0x18>
 8036518:	4b1c      	ldr	r3, [pc, #112]	; (803658c <EXTI9_5_IRQHandler+0x80>)
 803651a:	781b      	ldrb	r3, [r3, #0]
 803651c:	3301      	adds	r3, #1
 803651e:	b2da      	uxtb	r2, r3
 8036520:	4b1a      	ldr	r3, [pc, #104]	; (803658c <EXTI9_5_IRQHandler+0x80>)
 8036522:	701a      	strb	r2, [r3, #0]
 8036524:	4b18      	ldr	r3, [pc, #96]	; (8036588 <EXTI9_5_IRQHandler+0x7c>)
 8036526:	781b      	ldrb	r3, [r3, #0]
 8036528:	3301      	adds	r3, #1
 803652a:	b2da      	uxtb	r2, r3
 803652c:	4b16      	ldr	r3, [pc, #88]	; (8036588 <EXTI9_5_IRQHandler+0x7c>)
 803652e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8036530:	2020      	movs	r0, #32
 8036532:	f7f4 f90d 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8036536:	2040      	movs	r0, #64	; 0x40
 8036538:	f7f4 f90a 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 803653c:	2080      	movs	r0, #128	; 0x80
 803653e:	f7f4 f907 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8036542:	f44f 7080 	mov.w	r0, #256	; 0x100
 8036546:	f7f4 f903 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 803654a:	f44f 7000 	mov.w	r0, #512	; 0x200
 803654e:	f7f4 f8ff 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 8036552:	4b0d      	ldr	r3, [pc, #52]	; (8036588 <EXTI9_5_IRQHandler+0x7c>)
 8036554:	781b      	ldrb	r3, [r3, #0]
 8036556:	2b00      	cmp	r3, #0
 8036558:	d005      	beq.n	8036566 <EXTI9_5_IRQHandler+0x5a>
 803655a:	4b0b      	ldr	r3, [pc, #44]	; (8036588 <EXTI9_5_IRQHandler+0x7c>)
 803655c:	781b      	ldrb	r3, [r3, #0]
 803655e:	3b01      	subs	r3, #1
 8036560:	b2da      	uxtb	r2, r3
 8036562:	4b09      	ldr	r3, [pc, #36]	; (8036588 <EXTI9_5_IRQHandler+0x7c>)
 8036564:	701a      	strb	r2, [r3, #0]
 8036566:	4b08      	ldr	r3, [pc, #32]	; (8036588 <EXTI9_5_IRQHandler+0x7c>)
 8036568:	781b      	ldrb	r3, [r3, #0]
 803656a:	2b00      	cmp	r3, #0
 803656c:	d109      	bne.n	8036582 <EXTI9_5_IRQHandler+0x76>
 803656e:	4b07      	ldr	r3, [pc, #28]	; (803658c <EXTI9_5_IRQHandler+0x80>)
 8036570:	781b      	ldrb	r3, [r3, #0]
 8036572:	2b00      	cmp	r3, #0
 8036574:	d005      	beq.n	8036582 <EXTI9_5_IRQHandler+0x76>
 8036576:	4b05      	ldr	r3, [pc, #20]	; (803658c <EXTI9_5_IRQHandler+0x80>)
 8036578:	781b      	ldrb	r3, [r3, #0]
 803657a:	3b01      	subs	r3, #1
 803657c:	b2da      	uxtb	r2, r3
 803657e:	4b03      	ldr	r3, [pc, #12]	; (803658c <EXTI9_5_IRQHandler+0x80>)
 8036580:	701a      	strb	r2, [r3, #0]
}
 8036582:	bf00      	nop
 8036584:	bd80      	pop	{r7, pc}
 8036586:	bf00      	nop
 8036588:	20007446 	.word	0x20007446
 803658c:	20007445 	.word	0x20007445

08036590 <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI15_10_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 8036590:	b580      	push	{r7, lr}
 8036592:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8036594:	4b20      	ldr	r3, [pc, #128]	; (8036618 <EXTI15_10_IRQHandler+0x88>)
 8036596:	781b      	ldrb	r3, [r3, #0]
 8036598:	2b00      	cmp	r3, #0
 803659a:	d105      	bne.n	80365a8 <EXTI15_10_IRQHandler+0x18>
 803659c:	4b1f      	ldr	r3, [pc, #124]	; (803661c <EXTI15_10_IRQHandler+0x8c>)
 803659e:	781b      	ldrb	r3, [r3, #0]
 80365a0:	3301      	adds	r3, #1
 80365a2:	b2da      	uxtb	r2, r3
 80365a4:	4b1d      	ldr	r3, [pc, #116]	; (803661c <EXTI15_10_IRQHandler+0x8c>)
 80365a6:	701a      	strb	r2, [r3, #0]
 80365a8:	4b1b      	ldr	r3, [pc, #108]	; (8036618 <EXTI15_10_IRQHandler+0x88>)
 80365aa:	781b      	ldrb	r3, [r3, #0]
 80365ac:	3301      	adds	r3, #1
 80365ae:	b2da      	uxtb	r2, r3
 80365b0:	4b19      	ldr	r3, [pc, #100]	; (8036618 <EXTI15_10_IRQHandler+0x88>)
 80365b2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80365b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80365b8:	f7f4 f8ca 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80365bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80365c0:	f7f4 f8c6 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80365c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80365c8:	f7f4 f8c2 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80365cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80365d0:	f7f4 f8be 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80365d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80365d8:	f7f4 f8ba 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80365dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80365e0:	f7f4 f8b6 	bl	802a750 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 80365e4:	4b0c      	ldr	r3, [pc, #48]	; (8036618 <EXTI15_10_IRQHandler+0x88>)
 80365e6:	781b      	ldrb	r3, [r3, #0]
 80365e8:	2b00      	cmp	r3, #0
 80365ea:	d005      	beq.n	80365f8 <EXTI15_10_IRQHandler+0x68>
 80365ec:	4b0a      	ldr	r3, [pc, #40]	; (8036618 <EXTI15_10_IRQHandler+0x88>)
 80365ee:	781b      	ldrb	r3, [r3, #0]
 80365f0:	3b01      	subs	r3, #1
 80365f2:	b2da      	uxtb	r2, r3
 80365f4:	4b08      	ldr	r3, [pc, #32]	; (8036618 <EXTI15_10_IRQHandler+0x88>)
 80365f6:	701a      	strb	r2, [r3, #0]
 80365f8:	4b07      	ldr	r3, [pc, #28]	; (8036618 <EXTI15_10_IRQHandler+0x88>)
 80365fa:	781b      	ldrb	r3, [r3, #0]
 80365fc:	2b00      	cmp	r3, #0
 80365fe:	d109      	bne.n	8036614 <EXTI15_10_IRQHandler+0x84>
 8036600:	4b06      	ldr	r3, [pc, #24]	; (803661c <EXTI15_10_IRQHandler+0x8c>)
 8036602:	781b      	ldrb	r3, [r3, #0]
 8036604:	2b00      	cmp	r3, #0
 8036606:	d005      	beq.n	8036614 <EXTI15_10_IRQHandler+0x84>
 8036608:	4b04      	ldr	r3, [pc, #16]	; (803661c <EXTI15_10_IRQHandler+0x8c>)
 803660a:	781b      	ldrb	r3, [r3, #0]
 803660c:	3b01      	subs	r3, #1
 803660e:	b2da      	uxtb	r2, r3
 8036610:	4b02      	ldr	r3, [pc, #8]	; (803661c <EXTI15_10_IRQHandler+0x8c>)
 8036612:	701a      	strb	r2, [r3, #0]
}
 8036614:	bf00      	nop
 8036616:	bd80      	pop	{r7, pc}
 8036618:	20007446 	.word	0x20007446
 803661c:	20007445 	.word	0x20007445

08036620 <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t pin)
{
 8036620:	b580      	push	{r7, lr}
 8036622:	b084      	sub	sp, #16
 8036624:	af00      	add	r7, sp, #0
 8036626:	4603      	mov	r3, r0
 8036628:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 803662a:	4b27      	ldr	r3, [pc, #156]	; (80366c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 803662c:	781b      	ldrb	r3, [r3, #0]
 803662e:	2b00      	cmp	r3, #0
 8036630:	d105      	bne.n	803663e <HAL_GPIO_EXTI_Callback+0x1e>
 8036632:	4b26      	ldr	r3, [pc, #152]	; (80366cc <HAL_GPIO_EXTI_Callback+0xac>)
 8036634:	781b      	ldrb	r3, [r3, #0]
 8036636:	3301      	adds	r3, #1
 8036638:	b2da      	uxtb	r2, r3
 803663a:	4b24      	ldr	r3, [pc, #144]	; (80366cc <HAL_GPIO_EXTI_Callback+0xac>)
 803663c:	701a      	strb	r2, [r3, #0]
 803663e:	4b22      	ldr	r3, [pc, #136]	; (80366c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8036640:	781b      	ldrb	r3, [r3, #0]
 8036642:	3301      	adds	r3, #1
 8036644:	b2da      	uxtb	r2, r3
 8036646:	4b20      	ldr	r3, [pc, #128]	; (80366c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8036648:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 803664a:	2300      	movs	r3, #0
 803664c:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */
    if (gpioItConfig != NULL)
    {
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 803664e:	2300      	movs	r3, #0
 8036650:	73fb      	strb	r3, [r7, #15]
 8036652:	e016      	b.n	8036682 <HAL_GPIO_EXTI_Callback+0x62>
        {
            if (gpioItConfig[callbackIndex].pin == pin && gpioItConfig[callbackIndex].callback != NULL)
 8036654:	7bfb      	ldrb	r3, [r7, #15]
 8036656:	4a1e      	ldr	r2, [pc, #120]	; (80366d0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8036658:	00db      	lsls	r3, r3, #3
 803665a:	4413      	add	r3, r2
 803665c:	889b      	ldrh	r3, [r3, #4]
 803665e:	88fa      	ldrh	r2, [r7, #6]
 8036660:	429a      	cmp	r2, r3
 8036662:	d10b      	bne.n	803667c <HAL_GPIO_EXTI_Callback+0x5c>
 8036664:	7bfb      	ldrb	r3, [r7, #15]
 8036666:	4a1a      	ldr	r2, [pc, #104]	; (80366d0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8036668:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 803666c:	2b00      	cmp	r3, #0
 803666e:	d005      	beq.n	803667c <HAL_GPIO_EXTI_Callback+0x5c>
            {
                gpioItConfig[callbackIndex].callback();
 8036670:	7bfb      	ldrb	r3, [r7, #15]
 8036672:	4a17      	ldr	r2, [pc, #92]	; (80366d0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8036674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8036678:	4798      	blx	r3
                break;
 803667a:	e008      	b.n	803668e <HAL_GPIO_EXTI_Callback+0x6e>
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 803667c:	7bfb      	ldrb	r3, [r7, #15]
 803667e:	3301      	adds	r3, #1
 8036680:	73fb      	strb	r3, [r7, #15]
 8036682:	7bfa      	ldrb	r2, [r7, #15]
 8036684:	4b13      	ldr	r3, [pc, #76]	; (80366d4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8036686:	681b      	ldr	r3, [r3, #0]
 8036688:	08db      	lsrs	r3, r3, #3
 803668a:	429a      	cmp	r2, r3
 803668c:	d3e2      	bcc.n	8036654 <HAL_GPIO_EXTI_Callback+0x34>
    else
    {
        // Configuration array is NULL.
    }

    GOS_ISR_EXIT
 803668e:	4b0e      	ldr	r3, [pc, #56]	; (80366c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8036690:	781b      	ldrb	r3, [r3, #0]
 8036692:	2b00      	cmp	r3, #0
 8036694:	d005      	beq.n	80366a2 <HAL_GPIO_EXTI_Callback+0x82>
 8036696:	4b0c      	ldr	r3, [pc, #48]	; (80366c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8036698:	781b      	ldrb	r3, [r3, #0]
 803669a:	3b01      	subs	r3, #1
 803669c:	b2da      	uxtb	r2, r3
 803669e:	4b0a      	ldr	r3, [pc, #40]	; (80366c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 80366a0:	701a      	strb	r2, [r3, #0]
 80366a2:	4b09      	ldr	r3, [pc, #36]	; (80366c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 80366a4:	781b      	ldrb	r3, [r3, #0]
 80366a6:	2b00      	cmp	r3, #0
 80366a8:	d109      	bne.n	80366be <HAL_GPIO_EXTI_Callback+0x9e>
 80366aa:	4b08      	ldr	r3, [pc, #32]	; (80366cc <HAL_GPIO_EXTI_Callback+0xac>)
 80366ac:	781b      	ldrb	r3, [r3, #0]
 80366ae:	2b00      	cmp	r3, #0
 80366b0:	d005      	beq.n	80366be <HAL_GPIO_EXTI_Callback+0x9e>
 80366b2:	4b06      	ldr	r3, [pc, #24]	; (80366cc <HAL_GPIO_EXTI_Callback+0xac>)
 80366b4:	781b      	ldrb	r3, [r3, #0]
 80366b6:	3b01      	subs	r3, #1
 80366b8:	b2da      	uxtb	r2, r3
 80366ba:	4b04      	ldr	r3, [pc, #16]	; (80366cc <HAL_GPIO_EXTI_Callback+0xac>)
 80366bc:	701a      	strb	r2, [r3, #0]
}
 80366be:	bf00      	nop
 80366c0:	3710      	adds	r7, #16
 80366c2:	46bd      	mov	sp, r7
 80366c4:	bd80      	pop	{r7, pc}
 80366c6:	bf00      	nop
 80366c8:	20007446 	.word	0x20007446
 80366cc:	20007445 	.word	0x20007445
 80366d0:	08049278 	.word	0x08049278
 80366d4:	20001870 	.word	0x20001870

080366d8 <drv_i2cInit>:

/*
 * Function: drv_i2cInit
 */
gos_result_t drv_i2cInit (void_t)
{
 80366d8:	b580      	push	{r7, lr}
 80366da:	b082      	sub	sp, #8
 80366dc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t i2cDriverInitResult = GOS_SUCCESS;
 80366de:	2355      	movs	r3, #85	; 0x55
 80366e0:	71fb      	strb	r3, [r7, #7]
    u8_t         i2cIdx              = 0u;
 80366e2:	2300      	movs	r3, #0
 80366e4:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (i2cConfig != NULL)
    {
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 80366e6:	2300      	movs	r3, #0
 80366e8:	71bb      	strb	r3, [r7, #6]
 80366ea:	e013      	b.n	8036714 <drv_i2cInit+0x3c>
        {
            GOS_CONCAT_RESULT(i2cDriverInitResult, drv_i2cInitInstance(&i2cConfig[i2cIdx]));
 80366ec:	79fb      	ldrb	r3, [r7, #7]
 80366ee:	2b55      	cmp	r3, #85	; 0x55
 80366f0:	d10b      	bne.n	803670a <drv_i2cInit+0x32>
 80366f2:	79bb      	ldrb	r3, [r7, #6]
 80366f4:	222c      	movs	r2, #44	; 0x2c
 80366f6:	fb02 f303 	mul.w	r3, r2, r3
 80366fa:	4a0d      	ldr	r2, [pc, #52]	; (8036730 <drv_i2cInit+0x58>)
 80366fc:	4413      	add	r3, r2
 80366fe:	4618      	mov	r0, r3
 8036700:	f000 f81c 	bl	803673c <drv_i2cInitInstance>
 8036704:	4603      	mov	r3, r0
 8036706:	71fb      	strb	r3, [r7, #7]
 8036708:	e001      	b.n	803670e <drv_i2cInit+0x36>
 803670a:	23ae      	movs	r3, #174	; 0xae
 803670c:	71fb      	strb	r3, [r7, #7]
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 803670e:	79bb      	ldrb	r3, [r7, #6]
 8036710:	3301      	adds	r3, #1
 8036712:	71bb      	strb	r3, [r7, #6]
 8036714:	79ba      	ldrb	r2, [r7, #6]
 8036716:	4b07      	ldr	r3, [pc, #28]	; (8036734 <drv_i2cInit+0x5c>)
 8036718:	681b      	ldr	r3, [r3, #0]
 803671a:	4907      	ldr	r1, [pc, #28]	; (8036738 <drv_i2cInit+0x60>)
 803671c:	fba1 1303 	umull	r1, r3, r1, r3
 8036720:	095b      	lsrs	r3, r3, #5
 8036722:	429a      	cmp	r2, r3
 8036724:	d3e2      	bcc.n	80366ec <drv_i2cInit+0x14>
    {
        // Configuration array is NULL pointer.
        i2cDriverInitResult = GOS_ERROR;
    }

    return i2cDriverInitResult;
 8036726:	79fb      	ldrb	r3, [r7, #7]
}
 8036728:	4618      	mov	r0, r3
 803672a:	3708      	adds	r7, #8
 803672c:	46bd      	mov	sp, r7
 803672e:	bd80      	pop	{r7, pc}
 8036730:	08049288 	.word	0x08049288
 8036734:	20001874 	.word	0x20001874
 8036738:	ba2e8ba3 	.word	0xba2e8ba3

0803673c <drv_i2cInitInstance>:

/*
 * Function: drv_i2cInitInstance
 */
gos_result_t drv_i2cInitInstance (GOS_CONST drv_i2cDescriptor_t* pInstance)
{
 803673c:	b580      	push	{r7, lr}
 803673e:	b084      	sub	sp, #16
 8036740:	af00      	add	r7, sp, #0
 8036742:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            i2cInitResult = GOS_ERROR;
 8036744:	23ae      	movs	r3, #174	; 0xae
 8036746:	73fb      	strb	r3, [r7, #15]
    drv_i2cPeriphInstance_t instance      = 0u;
 8036748:	2300      	movs	r3, #0
 803674a:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pInstance != NULL)
 803674c:	687b      	ldr	r3, [r7, #4]
 803674e:	2b00      	cmp	r3, #0
 8036750:	f000 80e7 	beq.w	8036922 <drv_i2cInitInstance+0x1e6>
    {
        instance = pInstance->periphInstance;
 8036754:	687b      	ldr	r3, [r7, #4]
 8036756:	781b      	ldrb	r3, [r3, #0]
 8036758:	73bb      	strb	r3, [r7, #14]

        hi2cs[instance].Instance             = i2cInstanceLut[instance];
 803675a:	7bba      	ldrb	r2, [r7, #14]
 803675c:	7bbb      	ldrb	r3, [r7, #14]
 803675e:	4973      	ldr	r1, [pc, #460]	; (803692c <drv_i2cInitInstance+0x1f0>)
 8036760:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8036764:	4972      	ldr	r1, [pc, #456]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 8036766:	2054      	movs	r0, #84	; 0x54
 8036768:	fb00 f303 	mul.w	r3, r0, r3
 803676c:	440b      	add	r3, r1
 803676e:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.ClockSpeed      = pInstance->clockSpeed;
 8036770:	7bbb      	ldrb	r3, [r7, #14]
 8036772:	687a      	ldr	r2, [r7, #4]
 8036774:	6852      	ldr	r2, [r2, #4]
 8036776:	496e      	ldr	r1, [pc, #440]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 8036778:	2054      	movs	r0, #84	; 0x54
 803677a:	fb00 f303 	mul.w	r3, r0, r3
 803677e:	440b      	add	r3, r1
 8036780:	3304      	adds	r3, #4
 8036782:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DutyCycle       = pInstance->dutyCycle;
 8036784:	7bbb      	ldrb	r3, [r7, #14]
 8036786:	687a      	ldr	r2, [r7, #4]
 8036788:	6892      	ldr	r2, [r2, #8]
 803678a:	4969      	ldr	r1, [pc, #420]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 803678c:	2054      	movs	r0, #84	; 0x54
 803678e:	fb00 f303 	mul.w	r3, r0, r3
 8036792:	440b      	add	r3, r1
 8036794:	3308      	adds	r3, #8
 8036796:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.AddressingMode  = pInstance->addressingMode;
 8036798:	7bbb      	ldrb	r3, [r7, #14]
 803679a:	687a      	ldr	r2, [r7, #4]
 803679c:	6912      	ldr	r2, [r2, #16]
 803679e:	4964      	ldr	r1, [pc, #400]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 80367a0:	2054      	movs	r0, #84	; 0x54
 80367a2:	fb00 f303 	mul.w	r3, r0, r3
 80367a6:	440b      	add	r3, r1
 80367a8:	3310      	adds	r3, #16
 80367aa:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress1     = pInstance->ownAddress1;
 80367ac:	7bbb      	ldrb	r3, [r7, #14]
 80367ae:	687a      	ldr	r2, [r7, #4]
 80367b0:	68d2      	ldr	r2, [r2, #12]
 80367b2:	495f      	ldr	r1, [pc, #380]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 80367b4:	2054      	movs	r0, #84	; 0x54
 80367b6:	fb00 f303 	mul.w	r3, r0, r3
 80367ba:	440b      	add	r3, r1
 80367bc:	330c      	adds	r3, #12
 80367be:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress2     = pInstance->ownAddress2;
 80367c0:	7bbb      	ldrb	r3, [r7, #14]
 80367c2:	687a      	ldr	r2, [r7, #4]
 80367c4:	6992      	ldr	r2, [r2, #24]
 80367c6:	495a      	ldr	r1, [pc, #360]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 80367c8:	2054      	movs	r0, #84	; 0x54
 80367ca:	fb00 f303 	mul.w	r3, r0, r3
 80367ce:	440b      	add	r3, r1
 80367d0:	3318      	adds	r3, #24
 80367d2:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DualAddressMode = pInstance->dualAddressMode;
 80367d4:	7bbb      	ldrb	r3, [r7, #14]
 80367d6:	687a      	ldr	r2, [r7, #4]
 80367d8:	6952      	ldr	r2, [r2, #20]
 80367da:	4955      	ldr	r1, [pc, #340]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 80367dc:	2054      	movs	r0, #84	; 0x54
 80367de:	fb00 f303 	mul.w	r3, r0, r3
 80367e2:	440b      	add	r3, r1
 80367e4:	3314      	adds	r3, #20
 80367e6:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.GeneralCallMode = pInstance->generalCallMode;
 80367e8:	7bbb      	ldrb	r3, [r7, #14]
 80367ea:	687a      	ldr	r2, [r7, #4]
 80367ec:	69d2      	ldr	r2, [r2, #28]
 80367ee:	4950      	ldr	r1, [pc, #320]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 80367f0:	2054      	movs	r0, #84	; 0x54
 80367f2:	fb00 f303 	mul.w	r3, r0, r3
 80367f6:	440b      	add	r3, r1
 80367f8:	331c      	adds	r3, #28
 80367fa:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.NoStretchMode   = pInstance->noStretchMode;
 80367fc:	7bbb      	ldrb	r3, [r7, #14]
 80367fe:	687a      	ldr	r2, [r7, #4]
 8036800:	6a12      	ldr	r2, [r2, #32]
 8036802:	494b      	ldr	r1, [pc, #300]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 8036804:	2054      	movs	r0, #84	; 0x54
 8036806:	fb00 f303 	mul.w	r3, r0, r3
 803680a:	440b      	add	r3, r1
 803680c:	3320      	adds	r3, #32
 803680e:	601a      	str	r2, [r3, #0]

        HAL_I2C_DeInit(&hi2cs[instance]);
 8036810:	7bbb      	ldrb	r3, [r7, #14]
 8036812:	2254      	movs	r2, #84	; 0x54
 8036814:	fb02 f303 	mul.w	r3, r2, r3
 8036818:	4a45      	ldr	r2, [pc, #276]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 803681a:	4413      	add	r3, r2
 803681c:	4618      	mov	r0, r3
 803681e:	f7f4 f8f3 	bl	802aa08 <HAL_I2C_DeInit>

        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 8036822:	7bbb      	ldrb	r3, [r7, #14]
 8036824:	2254      	movs	r2, #84	; 0x54
 8036826:	fb02 f303 	mul.w	r3, r2, r3
 803682a:	4a41      	ldr	r2, [pc, #260]	; (8036930 <drv_i2cInitInstance+0x1f4>)
 803682c:	4413      	add	r3, r2
 803682e:	4618      	mov	r0, r3
 8036830:	f7f3 ffa6 	bl	802a780 <HAL_I2C_Init>
 8036834:	4603      	mov	r3, r0
 8036836:	2b00      	cmp	r3, #0
 8036838:	d173      	bne.n	8036922 <drv_i2cInitInstance+0x1e6>
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 803683a:	7bbb      	ldrb	r3, [r7, #14]
 803683c:	009b      	lsls	r3, r3, #2
 803683e:	4a3d      	ldr	r2, [pc, #244]	; (8036934 <drv_i2cInitInstance+0x1f8>)
 8036840:	4413      	add	r3, r2
 8036842:	4618      	mov	r0, r3
 8036844:	f007 fd5e 	bl	803e304 <gos_mutexInit>
 8036848:	4603      	mov	r3, r0
        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 803684a:	2b55      	cmp	r3, #85	; 0x55
 803684c:	d169      	bne.n	8036922 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 803684e:	7bba      	ldrb	r2, [r7, #14]
 8036850:	4613      	mov	r3, r2
 8036852:	005b      	lsls	r3, r3, #1
 8036854:	4413      	add	r3, r2
 8036856:	009b      	lsls	r3, r3, #2
 8036858:	4a37      	ldr	r2, [pc, #220]	; (8036938 <drv_i2cInitInstance+0x1fc>)
 803685a:	4413      	add	r3, r2
 803685c:	4618      	mov	r0, r3
 803685e:	f00a fb3f 	bl	8040ee0 <gos_triggerInit>
 8036862:	4603      	mov	r3, r0
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 8036864:	2b55      	cmp	r3, #85	; 0x55
 8036866:	d15c      	bne.n	8036922 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8036868:	7bba      	ldrb	r2, [r7, #14]
 803686a:	4613      	mov	r3, r2
 803686c:	005b      	lsls	r3, r3, #1
 803686e:	4413      	add	r3, r2
 8036870:	009b      	lsls	r3, r3, #2
 8036872:	4a32      	ldr	r2, [pc, #200]	; (803693c <drv_i2cInitInstance+0x200>)
 8036874:	4413      	add	r3, r2
 8036876:	4618      	mov	r0, r3
 8036878:	f00a fb32 	bl	8040ee0 <gos_triggerInit>
 803687c:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 803687e:	2b55      	cmp	r3, #85	; 0x55
 8036880:	d14f      	bne.n	8036922 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 8036882:	7bba      	ldrb	r2, [r7, #14]
 8036884:	4613      	mov	r3, r2
 8036886:	005b      	lsls	r3, r3, #1
 8036888:	4413      	add	r3, r2
 803688a:	009b      	lsls	r3, r3, #2
 803688c:	4a2c      	ldr	r2, [pc, #176]	; (8036940 <drv_i2cInitInstance+0x204>)
 803688e:	4413      	add	r3, r2
 8036890:	4618      	mov	r0, r3
 8036892:	f00a fb25 	bl	8040ee0 <gos_triggerInit>
 8036896:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8036898:	2b55      	cmp	r3, #85	; 0x55
 803689a:	d142      	bne.n	8036922 <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 803689c:	7bba      	ldrb	r2, [r7, #14]
 803689e:	4613      	mov	r3, r2
 80368a0:	005b      	lsls	r3, r3, #1
 80368a2:	4413      	add	r3, r2
 80368a4:	009b      	lsls	r3, r3, #2
 80368a6:	4a27      	ldr	r2, [pc, #156]	; (8036944 <drv_i2cInitInstance+0x208>)
 80368a8:	4413      	add	r3, r2
 80368aa:	4618      	mov	r0, r3
 80368ac:	f00a fb18 	bl	8040ee0 <gos_triggerInit>
 80368b0:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 80368b2:	2b55      	cmp	r3, #85	; 0x55
 80368b4:	d135      	bne.n	8036922 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 80368b6:	7bba      	ldrb	r2, [r7, #14]
 80368b8:	4613      	mov	r3, r2
 80368ba:	005b      	lsls	r3, r3, #1
 80368bc:	4413      	add	r3, r2
 80368be:	009b      	lsls	r3, r3, #2
 80368c0:	4a1d      	ldr	r2, [pc, #116]	; (8036938 <drv_i2cInitInstance+0x1fc>)
 80368c2:	4413      	add	r3, r2
 80368c4:	4618      	mov	r0, r3
 80368c6:	f00a fb27 	bl	8040f18 <gos_triggerReset>
 80368ca:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 80368cc:	2b55      	cmp	r3, #85	; 0x55
 80368ce:	d128      	bne.n	8036922 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 80368d0:	7bba      	ldrb	r2, [r7, #14]
 80368d2:	4613      	mov	r3, r2
 80368d4:	005b      	lsls	r3, r3, #1
 80368d6:	4413      	add	r3, r2
 80368d8:	009b      	lsls	r3, r3, #2
 80368da:	4a18      	ldr	r2, [pc, #96]	; (803693c <drv_i2cInitInstance+0x200>)
 80368dc:	4413      	add	r3, r2
 80368de:	4618      	mov	r0, r3
 80368e0:	f00a fb1a 	bl	8040f18 <gos_triggerReset>
 80368e4:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 80368e6:	2b55      	cmp	r3, #85	; 0x55
 80368e8:	d11b      	bne.n	8036922 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 80368ea:	7bba      	ldrb	r2, [r7, #14]
 80368ec:	4613      	mov	r3, r2
 80368ee:	005b      	lsls	r3, r3, #1
 80368f0:	4413      	add	r3, r2
 80368f2:	009b      	lsls	r3, r3, #2
 80368f4:	4a12      	ldr	r2, [pc, #72]	; (8036940 <drv_i2cInitInstance+0x204>)
 80368f6:	4413      	add	r3, r2
 80368f8:	4618      	mov	r0, r3
 80368fa:	f00a fb0d 	bl	8040f18 <gos_triggerReset>
 80368fe:	4603      	mov	r3, r0
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8036900:	2b55      	cmp	r3, #85	; 0x55
 8036902:	d10e      	bne.n	8036922 <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS
 8036904:	7bba      	ldrb	r2, [r7, #14]
 8036906:	4613      	mov	r3, r2
 8036908:	005b      	lsls	r3, r3, #1
 803690a:	4413      	add	r3, r2
 803690c:	009b      	lsls	r3, r3, #2
 803690e:	4a0d      	ldr	r2, [pc, #52]	; (8036944 <drv_i2cInitInstance+0x208>)
 8036910:	4413      	add	r3, r2
 8036912:	4618      	mov	r0, r3
 8036914:	f00a fb00 	bl	8040f18 <gos_triggerReset>
 8036918:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 803691a:	2b55      	cmp	r3, #85	; 0x55
 803691c:	d101      	bne.n	8036922 <drv_i2cInitInstance+0x1e6>
            )
        {
            i2cInitResult = GOS_SUCCESS;
 803691e:	2355      	movs	r3, #85	; 0x55
 8036920:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return i2cInitResult;
 8036922:	7bfb      	ldrb	r3, [r7, #15]
}
 8036924:	4618      	mov	r0, r3
 8036926:	3710      	adds	r7, #16
 8036928:	46bd      	mov	sp, r7
 803692a:	bd80      	pop	{r7, pc}
 803692c:	20001ad4 	.word	0x20001ad4
 8036930:	200063d4 	.word	0x200063d4
 8036934:	200064d0 	.word	0x200064d0
 8036938:	200064dc 	.word	0x200064dc
 803693c:	20006500 	.word	0x20006500
 8036940:	20006524 	.word	0x20006524
 8036944:	20006548 	.word	0x20006548

08036948 <drv_i2cMemWrite>:
 */
gos_result_t drv_i2cMemWrite (
        drv_i2cPeriphInstance_t instance, u16_t address, u16_t memAddress, u16_t memAddressSize,
        u8_t*                   data,     u16_t size,    u32_t mutexTmo,   u32_t triggerTmo
        )
{
 8036948:	b590      	push	{r4, r7, lr}
 803694a:	b087      	sub	sp, #28
 803694c:	af02      	add	r7, sp, #8
 803694e:	4604      	mov	r4, r0
 8036950:	4608      	mov	r0, r1
 8036952:	4611      	mov	r1, r2
 8036954:	461a      	mov	r2, r3
 8036956:	4623      	mov	r3, r4
 8036958:	71fb      	strb	r3, [r7, #7]
 803695a:	4603      	mov	r3, r0
 803695c:	80bb      	strh	r3, [r7, #4]
 803695e:	460b      	mov	r3, r1
 8036960:	807b      	strh	r3, [r7, #2]
 8036962:	4613      	mov	r3, r2
 8036964:	803b      	strh	r3, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t i2cMemWriteResult = GOS_ERROR;
 8036966:	23ae      	movs	r3, #174	; 0xae
 8036968:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 803696a:	79fb      	ldrb	r3, [r7, #7]
 803696c:	009b      	lsls	r3, r3, #2
 803696e:	4a29      	ldr	r2, [pc, #164]	; (8036a14 <drv_i2cMemWrite+0xcc>)
 8036970:	4413      	add	r3, r2
 8036972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036974:	4618      	mov	r0, r3
 8036976:	f007 fcdf 	bl	803e338 <gos_mutexLock>
 803697a:	4603      	mov	r3, r0
 803697c:	2b55      	cmp	r3, #85	; 0x55
 803697e:	d13c      	bne.n	80369fa <drv_i2cMemWrite+0xb2>
    {
        if (HAL_I2C_Mem_Write_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 8036980:	79fb      	ldrb	r3, [r7, #7]
 8036982:	2254      	movs	r2, #84	; 0x54
 8036984:	fb02 f303 	mul.w	r3, r2, r3
 8036988:	4a23      	ldr	r2, [pc, #140]	; (8036a18 <drv_i2cMemWrite+0xd0>)
 803698a:	1898      	adds	r0, r3, r2
 803698c:	883c      	ldrh	r4, [r7, #0]
 803698e:	887a      	ldrh	r2, [r7, #2]
 8036990:	88b9      	ldrh	r1, [r7, #4]
 8036992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8036994:	9301      	str	r3, [sp, #4]
 8036996:	6a3b      	ldr	r3, [r7, #32]
 8036998:	9300      	str	r3, [sp, #0]
 803699a:	4623      	mov	r3, r4
 803699c:	f7f4 fc38 	bl	802b210 <HAL_I2C_Mem_Write_IT>
 80369a0:	4603      	mov	r3, r0
 80369a2:	2b00      	cmp	r3, #0
 80369a4:	d11e      	bne.n	80369e4 <drv_i2cMemWrite+0x9c>
            gos_triggerWait     (&i2cTxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 80369a6:	79fa      	ldrb	r2, [r7, #7]
 80369a8:	4613      	mov	r3, r2
 80369aa:	005b      	lsls	r3, r3, #1
 80369ac:	4413      	add	r3, r2
 80369ae:	009b      	lsls	r3, r3, #2
 80369b0:	4a1a      	ldr	r2, [pc, #104]	; (8036a1c <drv_i2cMemWrite+0xd4>)
 80369b2:	4413      	add	r3, r2
 80369b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80369b6:	2101      	movs	r1, #1
 80369b8:	4618      	mov	r0, r3
 80369ba:	f00a fb05 	bl	8040fc8 <gos_triggerWait>
 80369be:	4603      	mov	r3, r0
        if (HAL_I2C_Mem_Write_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 80369c0:	2b55      	cmp	r3, #85	; 0x55
 80369c2:	d10f      	bne.n	80369e4 <drv_i2cMemWrite+0x9c>
            gos_triggerReset    (&i2cTxMemReadyTriggers[instance])                                  == GOS_SUCCESS)
 80369c4:	79fa      	ldrb	r2, [r7, #7]
 80369c6:	4613      	mov	r3, r2
 80369c8:	005b      	lsls	r3, r3, #1
 80369ca:	4413      	add	r3, r2
 80369cc:	009b      	lsls	r3, r3, #2
 80369ce:	4a13      	ldr	r2, [pc, #76]	; (8036a1c <drv_i2cMemWrite+0xd4>)
 80369d0:	4413      	add	r3, r2
 80369d2:	4618      	mov	r0, r3
 80369d4:	f00a faa0 	bl	8040f18 <gos_triggerReset>
 80369d8:	4603      	mov	r3, r0
            gos_triggerWait     (&i2cTxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 80369da:	2b55      	cmp	r3, #85	; 0x55
 80369dc:	d102      	bne.n	80369e4 <drv_i2cMemWrite+0x9c>
        {
            i2cMemWriteResult = GOS_SUCCESS;
 80369de:	2355      	movs	r3, #85	; 0x55
 80369e0:	73fb      	strb	r3, [r7, #15]
 80369e2:	e00a      	b.n	80369fa <drv_i2cMemWrite+0xb2>
        }
        else
        {
            // Transmit or trigger error.
            HAL_I2C_Master_Abort_IT(&hi2cs[instance], address);
 80369e4:	79fb      	ldrb	r3, [r7, #7]
 80369e6:	2254      	movs	r2, #84	; 0x54
 80369e8:	fb02 f303 	mul.w	r3, r2, r3
 80369ec:	4a0a      	ldr	r2, [pc, #40]	; (8036a18 <drv_i2cMemWrite+0xd0>)
 80369ee:	4413      	add	r3, r2
 80369f0:	88ba      	ldrh	r2, [r7, #4]
 80369f2:	4611      	mov	r1, r2
 80369f4:	4618      	mov	r0, r3
 80369f6:	f7f4 fd7b 	bl	802b4f0 <HAL_I2C_Master_Abort_IT>
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 80369fa:	79fb      	ldrb	r3, [r7, #7]
 80369fc:	009b      	lsls	r3, r3, #2
 80369fe:	4a05      	ldr	r2, [pc, #20]	; (8036a14 <drv_i2cMemWrite+0xcc>)
 8036a00:	4413      	add	r3, r2
 8036a02:	4618      	mov	r0, r3
 8036a04:	f007 fd9e 	bl	803e544 <gos_mutexUnlock>

    return i2cMemWriteResult;
 8036a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8036a0a:	4618      	mov	r0, r3
 8036a0c:	3714      	adds	r7, #20
 8036a0e:	46bd      	mov	sp, r7
 8036a10:	bd90      	pop	{r4, r7, pc}
 8036a12:	bf00      	nop
 8036a14:	200064d0 	.word	0x200064d0
 8036a18:	200063d4 	.word	0x200063d4
 8036a1c:	20006548 	.word	0x20006548

08036a20 <drv_i2cMemRead>:
 */
gos_result_t drv_i2cMemRead (
        drv_i2cPeriphInstance_t instance, u16_t address, u16_t memAddress, u16_t memAddressSize,
        u8_t*                   data,     u16_t size,    u32_t mutexTmo,   u32_t triggerTmo
        )
{
 8036a20:	b590      	push	{r4, r7, lr}
 8036a22:	b087      	sub	sp, #28
 8036a24:	af02      	add	r7, sp, #8
 8036a26:	4604      	mov	r4, r0
 8036a28:	4608      	mov	r0, r1
 8036a2a:	4611      	mov	r1, r2
 8036a2c:	461a      	mov	r2, r3
 8036a2e:	4623      	mov	r3, r4
 8036a30:	71fb      	strb	r3, [r7, #7]
 8036a32:	4603      	mov	r3, r0
 8036a34:	80bb      	strh	r3, [r7, #4]
 8036a36:	460b      	mov	r3, r1
 8036a38:	807b      	strh	r3, [r7, #2]
 8036a3a:	4613      	mov	r3, r2
 8036a3c:	803b      	strh	r3, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t i2cMemReadResult = GOS_ERROR;
 8036a3e:	23ae      	movs	r3, #174	; 0xae
 8036a40:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8036a42:	79fb      	ldrb	r3, [r7, #7]
 8036a44:	009b      	lsls	r3, r3, #2
 8036a46:	4a29      	ldr	r2, [pc, #164]	; (8036aec <drv_i2cMemRead+0xcc>)
 8036a48:	4413      	add	r3, r2
 8036a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036a4c:	4618      	mov	r0, r3
 8036a4e:	f007 fc73 	bl	803e338 <gos_mutexLock>
 8036a52:	4603      	mov	r3, r0
 8036a54:	2b55      	cmp	r3, #85	; 0x55
 8036a56:	d13c      	bne.n	8036ad2 <drv_i2cMemRead+0xb2>
    {
        if (HAL_I2C_Mem_Read_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 8036a58:	79fb      	ldrb	r3, [r7, #7]
 8036a5a:	2254      	movs	r2, #84	; 0x54
 8036a5c:	fb02 f303 	mul.w	r3, r2, r3
 8036a60:	4a23      	ldr	r2, [pc, #140]	; (8036af0 <drv_i2cMemRead+0xd0>)
 8036a62:	1898      	adds	r0, r3, r2
 8036a64:	883c      	ldrh	r4, [r7, #0]
 8036a66:	887a      	ldrh	r2, [r7, #2]
 8036a68:	88b9      	ldrh	r1, [r7, #4]
 8036a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8036a6c:	9301      	str	r3, [sp, #4]
 8036a6e:	6a3b      	ldr	r3, [r7, #32]
 8036a70:	9300      	str	r3, [sp, #0]
 8036a72:	4623      	mov	r3, r4
 8036a74:	f7f4 fc7e 	bl	802b374 <HAL_I2C_Mem_Read_IT>
 8036a78:	4603      	mov	r3, r0
 8036a7a:	2b00      	cmp	r3, #0
 8036a7c:	d11e      	bne.n	8036abc <drv_i2cMemRead+0x9c>
            gos_triggerWait    (&i2cRxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 8036a7e:	79fa      	ldrb	r2, [r7, #7]
 8036a80:	4613      	mov	r3, r2
 8036a82:	005b      	lsls	r3, r3, #1
 8036a84:	4413      	add	r3, r2
 8036a86:	009b      	lsls	r3, r3, #2
 8036a88:	4a1a      	ldr	r2, [pc, #104]	; (8036af4 <drv_i2cMemRead+0xd4>)
 8036a8a:	4413      	add	r3, r2
 8036a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036a8e:	2101      	movs	r1, #1
 8036a90:	4618      	mov	r0, r3
 8036a92:	f00a fa99 	bl	8040fc8 <gos_triggerWait>
 8036a96:	4603      	mov	r3, r0
        if (HAL_I2C_Mem_Read_IT(&hi2cs[instance], address, memAddress, memAddressSize, data, size) == HAL_OK      &&
 8036a98:	2b55      	cmp	r3, #85	; 0x55
 8036a9a:	d10f      	bne.n	8036abc <drv_i2cMemRead+0x9c>
            gos_triggerReset   (&i2cRxMemReadyTriggers[instance])                                  == GOS_SUCCESS)
 8036a9c:	79fa      	ldrb	r2, [r7, #7]
 8036a9e:	4613      	mov	r3, r2
 8036aa0:	005b      	lsls	r3, r3, #1
 8036aa2:	4413      	add	r3, r2
 8036aa4:	009b      	lsls	r3, r3, #2
 8036aa6:	4a13      	ldr	r2, [pc, #76]	; (8036af4 <drv_i2cMemRead+0xd4>)
 8036aa8:	4413      	add	r3, r2
 8036aaa:	4618      	mov	r0, r3
 8036aac:	f00a fa34 	bl	8040f18 <gos_triggerReset>
 8036ab0:	4603      	mov	r3, r0
            gos_triggerWait    (&i2cRxMemReadyTriggers[instance], 1, triggerTmo)                   == GOS_SUCCESS &&
 8036ab2:	2b55      	cmp	r3, #85	; 0x55
 8036ab4:	d102      	bne.n	8036abc <drv_i2cMemRead+0x9c>
        {
            i2cMemReadResult = GOS_SUCCESS;
 8036ab6:	2355      	movs	r3, #85	; 0x55
 8036ab8:	73fb      	strb	r3, [r7, #15]
 8036aba:	e00a      	b.n	8036ad2 <drv_i2cMemRead+0xb2>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_I2C_Master_Abort_IT(&hi2cs[instance], address);
 8036abc:	79fb      	ldrb	r3, [r7, #7]
 8036abe:	2254      	movs	r2, #84	; 0x54
 8036ac0:	fb02 f303 	mul.w	r3, r2, r3
 8036ac4:	4a0a      	ldr	r2, [pc, #40]	; (8036af0 <drv_i2cMemRead+0xd0>)
 8036ac6:	4413      	add	r3, r2
 8036ac8:	88ba      	ldrh	r2, [r7, #4]
 8036aca:	4611      	mov	r1, r2
 8036acc:	4618      	mov	r0, r3
 8036ace:	f7f4 fd0f 	bl	802b4f0 <HAL_I2C_Master_Abort_IT>
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 8036ad2:	79fb      	ldrb	r3, [r7, #7]
 8036ad4:	009b      	lsls	r3, r3, #2
 8036ad6:	4a05      	ldr	r2, [pc, #20]	; (8036aec <drv_i2cMemRead+0xcc>)
 8036ad8:	4413      	add	r3, r2
 8036ada:	4618      	mov	r0, r3
 8036adc:	f007 fd32 	bl	803e544 <gos_mutexUnlock>

    return i2cMemReadResult;
 8036ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8036ae2:	4618      	mov	r0, r3
 8036ae4:	3714      	adds	r7, #20
 8036ae6:	46bd      	mov	sp, r7
 8036ae8:	bd90      	pop	{r4, r7, pc}
 8036aea:	bf00      	nop
 8036aec:	200064d0 	.word	0x200064d0
 8036af0:	200063d4 	.word	0x200063d4
 8036af4:	20006524 	.word	0x20006524

08036af8 <drv_i2cTransmitBlocking>:
 */
gos_result_t drv_i2cTransmitBlocking (
        drv_i2cPeriphInstance_t instance, u16_t address,  u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t transmitTmo
        )
{
 8036af8:	b580      	push	{r7, lr}
 8036afa:	b088      	sub	sp, #32
 8036afc:	af02      	add	r7, sp, #8
 8036afe:	60ba      	str	r2, [r7, #8]
 8036b00:	461a      	mov	r2, r3
 8036b02:	4603      	mov	r3, r0
 8036b04:	73fb      	strb	r3, [r7, #15]
 8036b06:	460b      	mov	r3, r1
 8036b08:	81bb      	strh	r3, [r7, #12]
 8036b0a:	4613      	mov	r3, r2
 8036b0c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t i2cDriverTransmitResult = GOS_ERROR;
 8036b0e:	23ae      	movs	r3, #174	; 0xae
 8036b10:	75fb      	strb	r3, [r7, #23]


    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8036b12:	7bfb      	ldrb	r3, [r7, #15]
 8036b14:	009b      	lsls	r3, r3, #2
 8036b16:	4a14      	ldr	r2, [pc, #80]	; (8036b68 <drv_i2cTransmitBlocking+0x70>)
 8036b18:	4413      	add	r3, r2
 8036b1a:	6a39      	ldr	r1, [r7, #32]
 8036b1c:	4618      	mov	r0, r3
 8036b1e:	f007 fc0b 	bl	803e338 <gos_mutexLock>
 8036b22:	4603      	mov	r3, r0
 8036b24:	2b55      	cmp	r3, #85	; 0x55
 8036b26:	d112      	bne.n	8036b4e <drv_i2cTransmitBlocking+0x56>
    {
        if (HAL_I2C_Master_Transmit(&hi2cs[instance], address, pData, size, transmitTmo) == HAL_OK)
 8036b28:	7bfb      	ldrb	r3, [r7, #15]
 8036b2a:	2254      	movs	r2, #84	; 0x54
 8036b2c:	fb02 f303 	mul.w	r3, r2, r3
 8036b30:	4a0e      	ldr	r2, [pc, #56]	; (8036b6c <drv_i2cTransmitBlocking+0x74>)
 8036b32:	1898      	adds	r0, r3, r2
 8036b34:	88fa      	ldrh	r2, [r7, #6]
 8036b36:	89b9      	ldrh	r1, [r7, #12]
 8036b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036b3a:	9300      	str	r3, [sp, #0]
 8036b3c:	4613      	mov	r3, r2
 8036b3e:	68ba      	ldr	r2, [r7, #8]
 8036b40:	f7f3 ff9c 	bl	802aa7c <HAL_I2C_Master_Transmit>
 8036b44:	4603      	mov	r3, r0
 8036b46:	2b00      	cmp	r3, #0
 8036b48:	d101      	bne.n	8036b4e <drv_i2cTransmitBlocking+0x56>
        {
            i2cDriverTransmitResult = GOS_SUCCESS;
 8036b4a:	2355      	movs	r3, #85	; 0x55
 8036b4c:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 8036b4e:	7bfb      	ldrb	r3, [r7, #15]
 8036b50:	009b      	lsls	r3, r3, #2
 8036b52:	4a05      	ldr	r2, [pc, #20]	; (8036b68 <drv_i2cTransmitBlocking+0x70>)
 8036b54:	4413      	add	r3, r2
 8036b56:	4618      	mov	r0, r3
 8036b58:	f007 fcf4 	bl	803e544 <gos_mutexUnlock>

    return i2cDriverTransmitResult;
 8036b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8036b5e:	4618      	mov	r0, r3
 8036b60:	3718      	adds	r7, #24
 8036b62:	46bd      	mov	sp, r7
 8036b64:	bd80      	pop	{r7, pc}
 8036b66:	bf00      	nop
 8036b68:	200064d0 	.word	0x200064d0
 8036b6c:	200063d4 	.word	0x200063d4

08036b70 <drv_i2cReceiveBlocking>:
 */
gos_result_t drv_i2cReceiveBlocking (
        drv_i2cPeriphInstance_t instance, u16_t address,  u8_t* pBuffer,
        u16_t                   size,     u32_t mutexTmo, u32_t receiveTmo
        )
{
 8036b70:	b580      	push	{r7, lr}
 8036b72:	b088      	sub	sp, #32
 8036b74:	af02      	add	r7, sp, #8
 8036b76:	60ba      	str	r2, [r7, #8]
 8036b78:	461a      	mov	r2, r3
 8036b7a:	4603      	mov	r3, r0
 8036b7c:	73fb      	strb	r3, [r7, #15]
 8036b7e:	460b      	mov	r3, r1
 8036b80:	81bb      	strh	r3, [r7, #12]
 8036b82:	4613      	mov	r3, r2
 8036b84:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t i2cDriverReceiveResult = GOS_ERROR;
 8036b86:	23ae      	movs	r3, #174	; 0xae
 8036b88:	75fb      	strb	r3, [r7, #23]


    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8036b8a:	7bfb      	ldrb	r3, [r7, #15]
 8036b8c:	009b      	lsls	r3, r3, #2
 8036b8e:	4a14      	ldr	r2, [pc, #80]	; (8036be0 <drv_i2cReceiveBlocking+0x70>)
 8036b90:	4413      	add	r3, r2
 8036b92:	6a39      	ldr	r1, [r7, #32]
 8036b94:	4618      	mov	r0, r3
 8036b96:	f007 fbcf 	bl	803e338 <gos_mutexLock>
 8036b9a:	4603      	mov	r3, r0
 8036b9c:	2b55      	cmp	r3, #85	; 0x55
 8036b9e:	d112      	bne.n	8036bc6 <drv_i2cReceiveBlocking+0x56>
    {
        if (HAL_I2C_Master_Receive(&hi2cs[instance], address, pBuffer, size, receiveTmo) == HAL_OK)
 8036ba0:	7bfb      	ldrb	r3, [r7, #15]
 8036ba2:	2254      	movs	r2, #84	; 0x54
 8036ba4:	fb02 f303 	mul.w	r3, r2, r3
 8036ba8:	4a0e      	ldr	r2, [pc, #56]	; (8036be4 <drv_i2cReceiveBlocking+0x74>)
 8036baa:	1898      	adds	r0, r3, r2
 8036bac:	88fa      	ldrh	r2, [r7, #6]
 8036bae:	89b9      	ldrh	r1, [r7, #12]
 8036bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036bb2:	9300      	str	r3, [sp, #0]
 8036bb4:	4613      	mov	r3, r2
 8036bb6:	68ba      	ldr	r2, [r7, #8]
 8036bb8:	f7f4 f85e 	bl	802ac78 <HAL_I2C_Master_Receive>
 8036bbc:	4603      	mov	r3, r0
 8036bbe:	2b00      	cmp	r3, #0
 8036bc0:	d101      	bne.n	8036bc6 <drv_i2cReceiveBlocking+0x56>
        {
            i2cDriverReceiveResult = GOS_SUCCESS;
 8036bc2:	2355      	movs	r3, #85	; 0x55
 8036bc4:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 8036bc6:	7bfb      	ldrb	r3, [r7, #15]
 8036bc8:	009b      	lsls	r3, r3, #2
 8036bca:	4a05      	ldr	r2, [pc, #20]	; (8036be0 <drv_i2cReceiveBlocking+0x70>)
 8036bcc:	4413      	add	r3, r2
 8036bce:	4618      	mov	r0, r3
 8036bd0:	f007 fcb8 	bl	803e544 <gos_mutexUnlock>

    return i2cDriverReceiveResult;
 8036bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8036bd6:	4618      	mov	r0, r3
 8036bd8:	3718      	adds	r7, #24
 8036bda:	46bd      	mov	sp, r7
 8036bdc:	bd80      	pop	{r7, pc}
 8036bde:	bf00      	nop
 8036be0:	200064d0 	.word	0x200064d0
 8036be4:	200063d4 	.word	0x200063d4

08036be8 <drv_i2cTransmitIT>:
 */
gos_result_t drv_i2cTransmitIT (
        drv_i2cPeriphInstance_t instance, u16_t address,  u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 8036be8:	b580      	push	{r7, lr}
 8036bea:	b086      	sub	sp, #24
 8036bec:	af00      	add	r7, sp, #0
 8036bee:	60ba      	str	r2, [r7, #8]
 8036bf0:	461a      	mov	r2, r3
 8036bf2:	4603      	mov	r3, r0
 8036bf4:	73fb      	strb	r3, [r7, #15]
 8036bf6:	460b      	mov	r3, r1
 8036bf8:	81bb      	strh	r3, [r7, #12]
 8036bfa:	4613      	mov	r3, r2
 8036bfc:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t i2cDriverTransmitResult = GOS_ERROR;
 8036bfe:	23ae      	movs	r3, #174	; 0xae
 8036c00:	75fb      	strb	r3, [r7, #23]


    /*
     * Function code.
     */
    if (gos_mutexLock(&i2cMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8036c02:	7bfb      	ldrb	r3, [r7, #15]
 8036c04:	009b      	lsls	r3, r3, #2
 8036c06:	4a26      	ldr	r2, [pc, #152]	; (8036ca0 <drv_i2cTransmitIT+0xb8>)
 8036c08:	4413      	add	r3, r2
 8036c0a:	6a39      	ldr	r1, [r7, #32]
 8036c0c:	4618      	mov	r0, r3
 8036c0e:	f007 fb93 	bl	803e338 <gos_mutexLock>
 8036c12:	4603      	mov	r3, r0
 8036c14:	2b55      	cmp	r3, #85	; 0x55
 8036c16:	d137      	bne.n	8036c88 <drv_i2cTransmitIT+0xa0>
    {
        if (HAL_I2C_Master_Transmit_IT(&hi2cs[instance], address, pData, size)       == HAL_OK      &&
 8036c18:	7bfb      	ldrb	r3, [r7, #15]
 8036c1a:	2254      	movs	r2, #84	; 0x54
 8036c1c:	fb02 f303 	mul.w	r3, r2, r3
 8036c20:	4a20      	ldr	r2, [pc, #128]	; (8036ca4 <drv_i2cTransmitIT+0xbc>)
 8036c22:	1898      	adds	r0, r3, r2
 8036c24:	88fb      	ldrh	r3, [r7, #6]
 8036c26:	89b9      	ldrh	r1, [r7, #12]
 8036c28:	68ba      	ldr	r2, [r7, #8]
 8036c2a:	f7f4 fa4b 	bl	802b0c4 <HAL_I2C_Master_Transmit_IT>
 8036c2e:	4603      	mov	r3, r0
 8036c30:	2b00      	cmp	r3, #0
 8036c32:	d11e      	bne.n	8036c72 <drv_i2cTransmitIT+0x8a>
            gos_triggerWait           (&i2cTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8036c34:	7bfa      	ldrb	r2, [r7, #15]
 8036c36:	4613      	mov	r3, r2
 8036c38:	005b      	lsls	r3, r3, #1
 8036c3a:	4413      	add	r3, r2
 8036c3c:	009b      	lsls	r3, r3, #2
 8036c3e:	4a1a      	ldr	r2, [pc, #104]	; (8036ca8 <drv_i2cTransmitIT+0xc0>)
 8036c40:	4413      	add	r3, r2
 8036c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8036c44:	2101      	movs	r1, #1
 8036c46:	4618      	mov	r0, r3
 8036c48:	f00a f9be 	bl	8040fc8 <gos_triggerWait>
 8036c4c:	4603      	mov	r3, r0
        if (HAL_I2C_Master_Transmit_IT(&hi2cs[instance], address, pData, size)       == HAL_OK      &&
 8036c4e:	2b55      	cmp	r3, #85	; 0x55
 8036c50:	d10f      	bne.n	8036c72 <drv_i2cTransmitIT+0x8a>
            gos_triggerReset          (&i2cTxReadyTriggers[instance])                == GOS_SUCCESS)
 8036c52:	7bfa      	ldrb	r2, [r7, #15]
 8036c54:	4613      	mov	r3, r2
 8036c56:	005b      	lsls	r3, r3, #1
 8036c58:	4413      	add	r3, r2
 8036c5a:	009b      	lsls	r3, r3, #2
 8036c5c:	4a12      	ldr	r2, [pc, #72]	; (8036ca8 <drv_i2cTransmitIT+0xc0>)
 8036c5e:	4413      	add	r3, r2
 8036c60:	4618      	mov	r0, r3
 8036c62:	f00a f959 	bl	8040f18 <gos_triggerReset>
 8036c66:	4603      	mov	r3, r0
            gos_triggerWait           (&i2cTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8036c68:	2b55      	cmp	r3, #85	; 0x55
 8036c6a:	d102      	bne.n	8036c72 <drv_i2cTransmitIT+0x8a>
        {
            i2cDriverTransmitResult = GOS_SUCCESS;
 8036c6c:	2355      	movs	r3, #85	; 0x55
 8036c6e:	75fb      	strb	r3, [r7, #23]
 8036c70:	e00a      	b.n	8036c88 <drv_i2cTransmitIT+0xa0>
        }
        else
        {
            // Transmit or trigger error.
            HAL_I2C_Master_Abort_IT(&hi2cs[instance], address);
 8036c72:	7bfb      	ldrb	r3, [r7, #15]
 8036c74:	2254      	movs	r2, #84	; 0x54
 8036c76:	fb02 f303 	mul.w	r3, r2, r3
 8036c7a:	4a0a      	ldr	r2, [pc, #40]	; (8036ca4 <drv_i2cTransmitIT+0xbc>)
 8036c7c:	4413      	add	r3, r2
 8036c7e:	89ba      	ldrh	r2, [r7, #12]
 8036c80:	4611      	mov	r1, r2
 8036c82:	4618      	mov	r0, r3
 8036c84:	f7f4 fc34 	bl	802b4f0 <HAL_I2C_Master_Abort_IT>
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&i2cMutexes[instance]);
 8036c88:	7bfb      	ldrb	r3, [r7, #15]
 8036c8a:	009b      	lsls	r3, r3, #2
 8036c8c:	4a04      	ldr	r2, [pc, #16]	; (8036ca0 <drv_i2cTransmitIT+0xb8>)
 8036c8e:	4413      	add	r3, r2
 8036c90:	4618      	mov	r0, r3
 8036c92:	f007 fc57 	bl	803e544 <gos_mutexUnlock>

    return i2cDriverTransmitResult;
 8036c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8036c98:	4618      	mov	r0, r3
 8036c9a:	3718      	adds	r7, #24
 8036c9c:	46bd      	mov	sp, r7
 8036c9e:	bd80      	pop	{r7, pc}
 8036ca0:	200064d0 	.word	0x200064d0
 8036ca4:	200063d4 	.word	0x200063d4
 8036ca8:	20006500 	.word	0x20006500

08036cac <HAL_I2C_MasterTxCpltCallback>:

/*
 * Function: HAL_I2C_MasterTxCpltCallback
 */
void_t HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 8036cac:	b580      	push	{r7, lr}
 8036cae:	b082      	sub	sp, #8
 8036cb0:	af00      	add	r7, sp, #0
 8036cb2:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 8036cb4:	687b      	ldr	r3, [r7, #4]
 8036cb6:	681a      	ldr	r2, [r3, #0]
 8036cb8:	4b0a      	ldr	r3, [pc, #40]	; (8036ce4 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8036cba:	681b      	ldr	r3, [r3, #0]
 8036cbc:	429a      	cmp	r2, r3
 8036cbe:	d103      	bne.n	8036cc8 <HAL_I2C_MasterTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_1]);
 8036cc0:	4809      	ldr	r0, [pc, #36]	; (8036ce8 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8036cc2:	f00a fa31 	bl	8041128 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8036cc6:	e008      	b.n	8036cda <HAL_I2C_MasterTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 8036cc8:	687b      	ldr	r3, [r7, #4]
 8036cca:	681a      	ldr	r2, [r3, #0]
 8036ccc:	4b05      	ldr	r3, [pc, #20]	; (8036ce4 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8036cce:	685b      	ldr	r3, [r3, #4]
 8036cd0:	429a      	cmp	r2, r3
 8036cd2:	d102      	bne.n	8036cda <HAL_I2C_MasterTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_2]);
 8036cd4:	4805      	ldr	r0, [pc, #20]	; (8036cec <HAL_I2C_MasterTxCpltCallback+0x40>)
 8036cd6:	f00a fa27 	bl	8041128 <gos_triggerIncrement>
}
 8036cda:	bf00      	nop
 8036cdc:	3708      	adds	r7, #8
 8036cde:	46bd      	mov	sp, r7
 8036ce0:	bd80      	pop	{r7, pc}
 8036ce2:	bf00      	nop
 8036ce4:	20001ad4 	.word	0x20001ad4
 8036ce8:	20006500 	.word	0x20006500
 8036cec:	2000650c 	.word	0x2000650c

08036cf0 <HAL_I2C_MemTxCpltCallback>:

/*
 * Function: HAL_I2C_MemTxCpltCallback
 */
void_t HAL_I2C_MemTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 8036cf0:	b580      	push	{r7, lr}
 8036cf2:	b082      	sub	sp, #8
 8036cf4:	af00      	add	r7, sp, #0
 8036cf6:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 8036cf8:	687b      	ldr	r3, [r7, #4]
 8036cfa:	681a      	ldr	r2, [r3, #0]
 8036cfc:	4b0a      	ldr	r3, [pc, #40]	; (8036d28 <HAL_I2C_MemTxCpltCallback+0x38>)
 8036cfe:	681b      	ldr	r3, [r3, #0]
 8036d00:	429a      	cmp	r2, r3
 8036d02:	d103      	bne.n	8036d0c <HAL_I2C_MemTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 8036d04:	4809      	ldr	r0, [pc, #36]	; (8036d2c <HAL_I2C_MemTxCpltCallback+0x3c>)
 8036d06:	f00a fa0f 	bl	8041128 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8036d0a:	e008      	b.n	8036d1e <HAL_I2C_MemTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 8036d0c:	687b      	ldr	r3, [r7, #4]
 8036d0e:	681a      	ldr	r2, [r3, #0]
 8036d10:	4b05      	ldr	r3, [pc, #20]	; (8036d28 <HAL_I2C_MemTxCpltCallback+0x38>)
 8036d12:	685b      	ldr	r3, [r3, #4]
 8036d14:	429a      	cmp	r2, r3
 8036d16:	d102      	bne.n	8036d1e <HAL_I2C_MemTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 8036d18:	4805      	ldr	r0, [pc, #20]	; (8036d30 <HAL_I2C_MemTxCpltCallback+0x40>)
 8036d1a:	f00a fa05 	bl	8041128 <gos_triggerIncrement>
}
 8036d1e:	bf00      	nop
 8036d20:	3708      	adds	r7, #8
 8036d22:	46bd      	mov	sp, r7
 8036d24:	bd80      	pop	{r7, pc}
 8036d26:	bf00      	nop
 8036d28:	20001ad4 	.word	0x20001ad4
 8036d2c:	20006548 	.word	0x20006548
 8036d30:	20006554 	.word	0x20006554

08036d34 <HAL_I2C_MasterRxCpltCallback>:

/*
 * Function: HAL_I2C_MasterRxCpltCallback
 */
void_t HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 8036d34:	b580      	push	{r7, lr}
 8036d36:	b082      	sub	sp, #8
 8036d38:	af00      	add	r7, sp, #0
 8036d3a:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 8036d3c:	687b      	ldr	r3, [r7, #4]
 8036d3e:	681a      	ldr	r2, [r3, #0]
 8036d40:	4b0a      	ldr	r3, [pc, #40]	; (8036d6c <HAL_I2C_MasterRxCpltCallback+0x38>)
 8036d42:	681b      	ldr	r3, [r3, #0]
 8036d44:	429a      	cmp	r2, r3
 8036d46:	d103      	bne.n	8036d50 <HAL_I2C_MasterRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_1]);
 8036d48:	4809      	ldr	r0, [pc, #36]	; (8036d70 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8036d4a:	f00a f9ed 	bl	8041128 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8036d4e:	e008      	b.n	8036d62 <HAL_I2C_MasterRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 8036d50:	687b      	ldr	r3, [r7, #4]
 8036d52:	681a      	ldr	r2, [r3, #0]
 8036d54:	4b05      	ldr	r3, [pc, #20]	; (8036d6c <HAL_I2C_MasterRxCpltCallback+0x38>)
 8036d56:	685b      	ldr	r3, [r3, #4]
 8036d58:	429a      	cmp	r2, r3
 8036d5a:	d102      	bne.n	8036d62 <HAL_I2C_MasterRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_2]);
 8036d5c:	4805      	ldr	r0, [pc, #20]	; (8036d74 <HAL_I2C_MasterRxCpltCallback+0x40>)
 8036d5e:	f00a f9e3 	bl	8041128 <gos_triggerIncrement>
}
 8036d62:	bf00      	nop
 8036d64:	3708      	adds	r7, #8
 8036d66:	46bd      	mov	sp, r7
 8036d68:	bd80      	pop	{r7, pc}
 8036d6a:	bf00      	nop
 8036d6c:	20001ad4 	.word	0x20001ad4
 8036d70:	200064dc 	.word	0x200064dc
 8036d74:	200064e8 	.word	0x200064e8

08036d78 <HAL_I2C_MemRxCpltCallback>:

/*
 * Function: HAL_I2C_MemRxCpltCallback
 */
void_t HAL_I2C_MemRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 8036d78:	b580      	push	{r7, lr}
 8036d7a:	b082      	sub	sp, #8
 8036d7c:	af00      	add	r7, sp, #0
 8036d7e:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 8036d80:	687b      	ldr	r3, [r7, #4]
 8036d82:	681a      	ldr	r2, [r3, #0]
 8036d84:	4b0a      	ldr	r3, [pc, #40]	; (8036db0 <HAL_I2C_MemRxCpltCallback+0x38>)
 8036d86:	681b      	ldr	r3, [r3, #0]
 8036d88:	429a      	cmp	r2, r3
 8036d8a:	d103      	bne.n	8036d94 <HAL_I2C_MemRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 8036d8c:	4809      	ldr	r0, [pc, #36]	; (8036db4 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8036d8e:	f00a f9cb 	bl	8041128 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8036d92:	e008      	b.n	8036da6 <HAL_I2C_MemRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 8036d94:	687b      	ldr	r3, [r7, #4]
 8036d96:	681a      	ldr	r2, [r3, #0]
 8036d98:	4b05      	ldr	r3, [pc, #20]	; (8036db0 <HAL_I2C_MemRxCpltCallback+0x38>)
 8036d9a:	685b      	ldr	r3, [r3, #4]
 8036d9c:	429a      	cmp	r2, r3
 8036d9e:	d102      	bne.n	8036da6 <HAL_I2C_MemRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 8036da0:	4805      	ldr	r0, [pc, #20]	; (8036db8 <HAL_I2C_MemRxCpltCallback+0x40>)
 8036da2:	f00a f9c1 	bl	8041128 <gos_triggerIncrement>
}
 8036da6:	bf00      	nop
 8036da8:	3708      	adds	r7, #8
 8036daa:	46bd      	mov	sp, r7
 8036dac:	bd80      	pop	{r7, pc}
 8036dae:	bf00      	nop
 8036db0:	20001ad4 	.word	0x20001ad4
 8036db4:	20006524 	.word	0x20006524
 8036db8:	20006530 	.word	0x20006530

08036dbc <I2C1_EV_IRQHandler>:

/*
 * Function: I2C1_EV_IRQHandler
 */
void_t I2C1_EV_IRQHandler (void_t)
{
 8036dbc:	b580      	push	{r7, lr}
 8036dbe:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8036dc0:	4b16      	ldr	r3, [pc, #88]	; (8036e1c <I2C1_EV_IRQHandler+0x60>)
 8036dc2:	781b      	ldrb	r3, [r3, #0]
 8036dc4:	2b00      	cmp	r3, #0
 8036dc6:	d105      	bne.n	8036dd4 <I2C1_EV_IRQHandler+0x18>
 8036dc8:	4b15      	ldr	r3, [pc, #84]	; (8036e20 <I2C1_EV_IRQHandler+0x64>)
 8036dca:	781b      	ldrb	r3, [r3, #0]
 8036dcc:	3301      	adds	r3, #1
 8036dce:	b2da      	uxtb	r2, r3
 8036dd0:	4b13      	ldr	r3, [pc, #76]	; (8036e20 <I2C1_EV_IRQHandler+0x64>)
 8036dd2:	701a      	strb	r2, [r3, #0]
 8036dd4:	4b11      	ldr	r3, [pc, #68]	; (8036e1c <I2C1_EV_IRQHandler+0x60>)
 8036dd6:	781b      	ldrb	r3, [r3, #0]
 8036dd8:	3301      	adds	r3, #1
 8036dda:	b2da      	uxtb	r2, r3
 8036ddc:	4b0f      	ldr	r3, [pc, #60]	; (8036e1c <I2C1_EV_IRQHandler+0x60>)
 8036dde:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_1]);
 8036de0:	4810      	ldr	r0, [pc, #64]	; (8036e24 <I2C1_EV_IRQHandler+0x68>)
 8036de2:	f7f4 fbd4 	bl	802b58e <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 8036de6:	4b0d      	ldr	r3, [pc, #52]	; (8036e1c <I2C1_EV_IRQHandler+0x60>)
 8036de8:	781b      	ldrb	r3, [r3, #0]
 8036dea:	2b00      	cmp	r3, #0
 8036dec:	d005      	beq.n	8036dfa <I2C1_EV_IRQHandler+0x3e>
 8036dee:	4b0b      	ldr	r3, [pc, #44]	; (8036e1c <I2C1_EV_IRQHandler+0x60>)
 8036df0:	781b      	ldrb	r3, [r3, #0]
 8036df2:	3b01      	subs	r3, #1
 8036df4:	b2da      	uxtb	r2, r3
 8036df6:	4b09      	ldr	r3, [pc, #36]	; (8036e1c <I2C1_EV_IRQHandler+0x60>)
 8036df8:	701a      	strb	r2, [r3, #0]
 8036dfa:	4b08      	ldr	r3, [pc, #32]	; (8036e1c <I2C1_EV_IRQHandler+0x60>)
 8036dfc:	781b      	ldrb	r3, [r3, #0]
 8036dfe:	2b00      	cmp	r3, #0
 8036e00:	d109      	bne.n	8036e16 <I2C1_EV_IRQHandler+0x5a>
 8036e02:	4b07      	ldr	r3, [pc, #28]	; (8036e20 <I2C1_EV_IRQHandler+0x64>)
 8036e04:	781b      	ldrb	r3, [r3, #0]
 8036e06:	2b00      	cmp	r3, #0
 8036e08:	d005      	beq.n	8036e16 <I2C1_EV_IRQHandler+0x5a>
 8036e0a:	4b05      	ldr	r3, [pc, #20]	; (8036e20 <I2C1_EV_IRQHandler+0x64>)
 8036e0c:	781b      	ldrb	r3, [r3, #0]
 8036e0e:	3b01      	subs	r3, #1
 8036e10:	b2da      	uxtb	r2, r3
 8036e12:	4b03      	ldr	r3, [pc, #12]	; (8036e20 <I2C1_EV_IRQHandler+0x64>)
 8036e14:	701a      	strb	r2, [r3, #0]
}
 8036e16:	bf00      	nop
 8036e18:	bd80      	pop	{r7, pc}
 8036e1a:	bf00      	nop
 8036e1c:	20007446 	.word	0x20007446
 8036e20:	20007445 	.word	0x20007445
 8036e24:	200063d4 	.word	0x200063d4

08036e28 <I2C2_EV_IRQHandler>:

/*
 * Function: I2C2_EV_IRQHandler
 */
void_t I2C2_EV_IRQHandler (void_t)
{
 8036e28:	b580      	push	{r7, lr}
 8036e2a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8036e2c:	4b16      	ldr	r3, [pc, #88]	; (8036e88 <I2C2_EV_IRQHandler+0x60>)
 8036e2e:	781b      	ldrb	r3, [r3, #0]
 8036e30:	2b00      	cmp	r3, #0
 8036e32:	d105      	bne.n	8036e40 <I2C2_EV_IRQHandler+0x18>
 8036e34:	4b15      	ldr	r3, [pc, #84]	; (8036e8c <I2C2_EV_IRQHandler+0x64>)
 8036e36:	781b      	ldrb	r3, [r3, #0]
 8036e38:	3301      	adds	r3, #1
 8036e3a:	b2da      	uxtb	r2, r3
 8036e3c:	4b13      	ldr	r3, [pc, #76]	; (8036e8c <I2C2_EV_IRQHandler+0x64>)
 8036e3e:	701a      	strb	r2, [r3, #0]
 8036e40:	4b11      	ldr	r3, [pc, #68]	; (8036e88 <I2C2_EV_IRQHandler+0x60>)
 8036e42:	781b      	ldrb	r3, [r3, #0]
 8036e44:	3301      	adds	r3, #1
 8036e46:	b2da      	uxtb	r2, r3
 8036e48:	4b0f      	ldr	r3, [pc, #60]	; (8036e88 <I2C2_EV_IRQHandler+0x60>)
 8036e4a:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_2]);
 8036e4c:	4810      	ldr	r0, [pc, #64]	; (8036e90 <I2C2_EV_IRQHandler+0x68>)
 8036e4e:	f7f4 fb9e 	bl	802b58e <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 8036e52:	4b0d      	ldr	r3, [pc, #52]	; (8036e88 <I2C2_EV_IRQHandler+0x60>)
 8036e54:	781b      	ldrb	r3, [r3, #0]
 8036e56:	2b00      	cmp	r3, #0
 8036e58:	d005      	beq.n	8036e66 <I2C2_EV_IRQHandler+0x3e>
 8036e5a:	4b0b      	ldr	r3, [pc, #44]	; (8036e88 <I2C2_EV_IRQHandler+0x60>)
 8036e5c:	781b      	ldrb	r3, [r3, #0]
 8036e5e:	3b01      	subs	r3, #1
 8036e60:	b2da      	uxtb	r2, r3
 8036e62:	4b09      	ldr	r3, [pc, #36]	; (8036e88 <I2C2_EV_IRQHandler+0x60>)
 8036e64:	701a      	strb	r2, [r3, #0]
 8036e66:	4b08      	ldr	r3, [pc, #32]	; (8036e88 <I2C2_EV_IRQHandler+0x60>)
 8036e68:	781b      	ldrb	r3, [r3, #0]
 8036e6a:	2b00      	cmp	r3, #0
 8036e6c:	d109      	bne.n	8036e82 <I2C2_EV_IRQHandler+0x5a>
 8036e6e:	4b07      	ldr	r3, [pc, #28]	; (8036e8c <I2C2_EV_IRQHandler+0x64>)
 8036e70:	781b      	ldrb	r3, [r3, #0]
 8036e72:	2b00      	cmp	r3, #0
 8036e74:	d005      	beq.n	8036e82 <I2C2_EV_IRQHandler+0x5a>
 8036e76:	4b05      	ldr	r3, [pc, #20]	; (8036e8c <I2C2_EV_IRQHandler+0x64>)
 8036e78:	781b      	ldrb	r3, [r3, #0]
 8036e7a:	3b01      	subs	r3, #1
 8036e7c:	b2da      	uxtb	r2, r3
 8036e7e:	4b03      	ldr	r3, [pc, #12]	; (8036e8c <I2C2_EV_IRQHandler+0x64>)
 8036e80:	701a      	strb	r2, [r3, #0]
}
 8036e82:	bf00      	nop
 8036e84:	bd80      	pop	{r7, pc}
 8036e86:	bf00      	nop
 8036e88:	20007446 	.word	0x20007446
 8036e8c:	20007445 	.word	0x20007445
 8036e90:	20006428 	.word	0x20006428

08036e94 <HAL_I2C_MspInit>:

/*
 * Function: HAL_I2C_MspInit
 */
void_t HAL_I2C_MspInit (I2C_HandleTypeDef* hi2c)
{
 8036e94:	b480      	push	{r7}
 8036e96:	b085      	sub	sp, #20
 8036e98:	af00      	add	r7, sp, #0
 8036e9a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_i2cPeriphInstance_t instance = 0u;
 8036e9c:	2300      	movs	r3, #0
 8036e9e:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 8036ea0:	2300      	movs	r3, #0
 8036ea2:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 8036ea4:	2300      	movs	r3, #0
 8036ea6:	73fb      	strb	r3, [r7, #15]
 8036ea8:	e061      	b.n	8036f6e <HAL_I2C_MspInit+0xda>
    {
        if (i2cInstanceLut[instance] == hi2c->Instance)
 8036eaa:	7bfb      	ldrb	r3, [r7, #15]
 8036eac:	4a35      	ldr	r2, [pc, #212]	; (8036f84 <HAL_I2C_MspInit+0xf0>)
 8036eae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8036eb2:	687b      	ldr	r3, [r7, #4]
 8036eb4:	681b      	ldr	r3, [r3, #0]
 8036eb6:	429a      	cmp	r2, r3
 8036eb8:	d156      	bne.n	8036f68 <HAL_I2C_MspInit+0xd4>
        {
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 8036eba:	2300      	movs	r3, #0
 8036ebc:	73bb      	strb	r3, [r7, #14]
 8036ebe:	e04a      	b.n	8036f56 <HAL_I2C_MspInit+0xc2>
            {
                if (i2cConfig[idx].periphInstance == instance)
 8036ec0:	7bbb      	ldrb	r3, [r7, #14]
 8036ec2:	4a31      	ldr	r2, [pc, #196]	; (8036f88 <HAL_I2C_MspInit+0xf4>)
 8036ec4:	212c      	movs	r1, #44	; 0x2c
 8036ec6:	fb01 f303 	mul.w	r3, r1, r3
 8036eca:	4413      	add	r3, r2
 8036ecc:	781b      	ldrb	r3, [r3, #0]
 8036ece:	7bfa      	ldrb	r2, [r7, #15]
 8036ed0:	429a      	cmp	r2, r3
 8036ed2:	d13d      	bne.n	8036f50 <HAL_I2C_MspInit+0xbc>
                {
                    if (i2cConfig[idx].dmaConfigRx != NULL)
 8036ed4:	7bbb      	ldrb	r3, [r7, #14]
 8036ed6:	4a2c      	ldr	r2, [pc, #176]	; (8036f88 <HAL_I2C_MspInit+0xf4>)
 8036ed8:	212c      	movs	r1, #44	; 0x2c
 8036eda:	fb01 f303 	mul.w	r3, r1, r3
 8036ede:	4413      	add	r3, r2
 8036ee0:	3324      	adds	r3, #36	; 0x24
 8036ee2:	681b      	ldr	r3, [r3, #0]
 8036ee4:	2b00      	cmp	r3, #0
 8036ee6:	d014      	beq.n	8036f12 <HAL_I2C_MspInit+0x7e>
                    {
                        __HAL_LINKDMA(hi2c, hdmarx, i2cConfig[idx].dmaConfigRx->hdma);
 8036ee8:	7bbb      	ldrb	r3, [r7, #14]
 8036eea:	4a27      	ldr	r2, [pc, #156]	; (8036f88 <HAL_I2C_MspInit+0xf4>)
 8036eec:	212c      	movs	r1, #44	; 0x2c
 8036eee:	fb01 f303 	mul.w	r3, r1, r3
 8036ef2:	4413      	add	r3, r2
 8036ef4:	3324      	adds	r3, #36	; 0x24
 8036ef6:	681b      	ldr	r3, [r3, #0]
 8036ef8:	1d1a      	adds	r2, r3, #4
 8036efa:	687b      	ldr	r3, [r7, #4]
 8036efc:	639a      	str	r2, [r3, #56]	; 0x38
 8036efe:	7bbb      	ldrb	r3, [r7, #14]
 8036f00:	4a21      	ldr	r2, [pc, #132]	; (8036f88 <HAL_I2C_MspInit+0xf4>)
 8036f02:	212c      	movs	r1, #44	; 0x2c
 8036f04:	fb01 f303 	mul.w	r3, r1, r3
 8036f08:	4413      	add	r3, r2
 8036f0a:	3324      	adds	r3, #36	; 0x24
 8036f0c:	681b      	ldr	r3, [r3, #0]
 8036f0e:	687a      	ldr	r2, [r7, #4]
 8036f10:	63da      	str	r2, [r3, #60]	; 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (i2cConfig[idx].dmaConfigTx != NULL)
 8036f12:	7bbb      	ldrb	r3, [r7, #14]
 8036f14:	4a1c      	ldr	r2, [pc, #112]	; (8036f88 <HAL_I2C_MspInit+0xf4>)
 8036f16:	212c      	movs	r1, #44	; 0x2c
 8036f18:	fb01 f303 	mul.w	r3, r1, r3
 8036f1c:	4413      	add	r3, r2
 8036f1e:	3328      	adds	r3, #40	; 0x28
 8036f20:	681b      	ldr	r3, [r3, #0]
 8036f22:	2b00      	cmp	r3, #0
 8036f24:	d014      	beq.n	8036f50 <HAL_I2C_MspInit+0xbc>
                    {
                        __HAL_LINKDMA(hi2c, hdmatx, i2cConfig[idx].dmaConfigTx->hdma);
 8036f26:	7bbb      	ldrb	r3, [r7, #14]
 8036f28:	4a17      	ldr	r2, [pc, #92]	; (8036f88 <HAL_I2C_MspInit+0xf4>)
 8036f2a:	212c      	movs	r1, #44	; 0x2c
 8036f2c:	fb01 f303 	mul.w	r3, r1, r3
 8036f30:	4413      	add	r3, r2
 8036f32:	3328      	adds	r3, #40	; 0x28
 8036f34:	681b      	ldr	r3, [r3, #0]
 8036f36:	1d1a      	adds	r2, r3, #4
 8036f38:	687b      	ldr	r3, [r7, #4]
 8036f3a:	635a      	str	r2, [r3, #52]	; 0x34
 8036f3c:	7bbb      	ldrb	r3, [r7, #14]
 8036f3e:	4a12      	ldr	r2, [pc, #72]	; (8036f88 <HAL_I2C_MspInit+0xf4>)
 8036f40:	212c      	movs	r1, #44	; 0x2c
 8036f42:	fb01 f303 	mul.w	r3, r1, r3
 8036f46:	4413      	add	r3, r2
 8036f48:	3328      	adds	r3, #40	; 0x28
 8036f4a:	681b      	ldr	r3, [r3, #0]
 8036f4c:	687a      	ldr	r2, [r7, #4]
 8036f4e:	63da      	str	r2, [r3, #60]	; 0x3c
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 8036f50:	7bbb      	ldrb	r3, [r7, #14]
 8036f52:	3301      	adds	r3, #1
 8036f54:	73bb      	strb	r3, [r7, #14]
 8036f56:	7bba      	ldrb	r2, [r7, #14]
 8036f58:	4b0c      	ldr	r3, [pc, #48]	; (8036f8c <HAL_I2C_MspInit+0xf8>)
 8036f5a:	681b      	ldr	r3, [r3, #0]
 8036f5c:	490c      	ldr	r1, [pc, #48]	; (8036f90 <HAL_I2C_MspInit+0xfc>)
 8036f5e:	fba1 1303 	umull	r1, r3, r1, r3
 8036f62:	095b      	lsrs	r3, r3, #5
 8036f64:	429a      	cmp	r2, r3
 8036f66:	d3ab      	bcc.n	8036ec0 <HAL_I2C_MspInit+0x2c>
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 8036f68:	7bfb      	ldrb	r3, [r7, #15]
 8036f6a:	3301      	adds	r3, #1
 8036f6c:	73fb      	strb	r3, [r7, #15]
 8036f6e:	7bfb      	ldrb	r3, [r7, #15]
 8036f70:	2b02      	cmp	r3, #2
 8036f72:	d99a      	bls.n	8036eaa <HAL_I2C_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 8036f74:	bf00      	nop
 8036f76:	bf00      	nop
 8036f78:	3714      	adds	r7, #20
 8036f7a:	46bd      	mov	sp, r7
 8036f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036f80:	4770      	bx	lr
 8036f82:	bf00      	nop
 8036f84:	20001ad4 	.word	0x20001ad4
 8036f88:	08049288 	.word	0x08049288
 8036f8c:	20001874 	.word	0x20001874
 8036f90:	ba2e8ba3 	.word	0xba2e8ba3

08036f94 <drv_itInit>:

/*
 * Function: drv_itInit
 */
gos_result_t drv_itInit (void_t)
{
 8036f94:	b590      	push	{r4, r7, lr}
 8036f96:	b083      	sub	sp, #12
 8036f98:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t itDriverInitResult = GOS_ERROR;
 8036f9a:	23ae      	movs	r3, #174	; 0xae
 8036f9c:	71bb      	strb	r3, [r7, #6]
    u8_t         itIdx              = 0u;
 8036f9e:	2300      	movs	r3, #0
 8036fa0:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (itConfig != NULL)
    {
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 8036fa2:	2300      	movs	r3, #0
 8036fa4:	71fb      	strb	r3, [r7, #7]
 8036fa6:	e02c      	b.n	8037002 <drv_itInit+0x6e>
        {
            HAL_NVIC_SetPriority(itConfig[itIdx].irqType, itConfig[itIdx].preemtPriority, itConfig[itIdx].subPriority);
 8036fa8:	79fa      	ldrb	r2, [r7, #7]
 8036faa:	491e      	ldr	r1, [pc, #120]	; (8037024 <drv_itInit+0x90>)
 8036fac:	4613      	mov	r3, r2
 8036fae:	005b      	lsls	r3, r3, #1
 8036fb0:	4413      	add	r3, r2
 8036fb2:	009b      	lsls	r3, r3, #2
 8036fb4:	440b      	add	r3, r1
 8036fb6:	f993 0000 	ldrsb.w	r0, [r3]
 8036fba:	79fa      	ldrb	r2, [r7, #7]
 8036fbc:	4919      	ldr	r1, [pc, #100]	; (8037024 <drv_itInit+0x90>)
 8036fbe:	4613      	mov	r3, r2
 8036fc0:	005b      	lsls	r3, r3, #1
 8036fc2:	4413      	add	r3, r2
 8036fc4:	009b      	lsls	r3, r3, #2
 8036fc6:	440b      	add	r3, r1
 8036fc8:	3304      	adds	r3, #4
 8036fca:	6819      	ldr	r1, [r3, #0]
 8036fcc:	79fa      	ldrb	r2, [r7, #7]
 8036fce:	4c15      	ldr	r4, [pc, #84]	; (8037024 <drv_itInit+0x90>)
 8036fd0:	4613      	mov	r3, r2
 8036fd2:	005b      	lsls	r3, r3, #1
 8036fd4:	4413      	add	r3, r2
 8036fd6:	009b      	lsls	r3, r3, #2
 8036fd8:	4423      	add	r3, r4
 8036fda:	3308      	adds	r3, #8
 8036fdc:	681b      	ldr	r3, [r3, #0]
 8036fde:	461a      	mov	r2, r3
 8036fe0:	f7f2 f8df 	bl	80291a2 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(itConfig[itIdx].irqType);
 8036fe4:	79fa      	ldrb	r2, [r7, #7]
 8036fe6:	490f      	ldr	r1, [pc, #60]	; (8037024 <drv_itInit+0x90>)
 8036fe8:	4613      	mov	r3, r2
 8036fea:	005b      	lsls	r3, r3, #1
 8036fec:	4413      	add	r3, r2
 8036fee:	009b      	lsls	r3, r3, #2
 8036ff0:	440b      	add	r3, r1
 8036ff2:	f993 3000 	ldrsb.w	r3, [r3]
 8036ff6:	4618      	mov	r0, r3
 8036ff8:	f7f2 f8ef 	bl	80291da <HAL_NVIC_EnableIRQ>
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 8036ffc:	79fb      	ldrb	r3, [r7, #7]
 8036ffe:	3301      	adds	r3, #1
 8037000:	71fb      	strb	r3, [r7, #7]
 8037002:	79fa      	ldrb	r2, [r7, #7]
 8037004:	4b08      	ldr	r3, [pc, #32]	; (8037028 <drv_itInit+0x94>)
 8037006:	681b      	ldr	r3, [r3, #0]
 8037008:	4908      	ldr	r1, [pc, #32]	; (803702c <drv_itInit+0x98>)
 803700a:	fba1 1303 	umull	r1, r3, r1, r3
 803700e:	08db      	lsrs	r3, r3, #3
 8037010:	429a      	cmp	r2, r3
 8037012:	d3c9      	bcc.n	8036fa8 <drv_itInit+0x14>
        }

        itDriverInitResult = GOS_SUCCESS;
 8037014:	2355      	movs	r3, #85	; 0x55
 8037016:	71bb      	strb	r3, [r7, #6]
    else
    {
        // Configuration array is NULL pointer.
    }

    return itDriverInitResult;
 8037018:	79bb      	ldrb	r3, [r7, #6]
}
 803701a:	4618      	mov	r0, r3
 803701c:	370c      	adds	r7, #12
 803701e:	46bd      	mov	sp, r7
 8037020:	bd90      	pop	{r4, r7, pc}
 8037022:	bf00      	nop
 8037024:	080492b4 	.word	0x080492b4
 8037028:	20001878 	.word	0x20001878
 803702c:	aaaaaaab 	.word	0xaaaaaaab

08037030 <drv_mcp23017Init>:

/*
 * Function: drv_mcp23017Init
 */
gos_result_t drv_mcp23017Init (void_t* pDevice)
{
 8037030:	b580      	push	{r7, lr}
 8037032:	b084      	sub	sp, #16
 8037034:	af00      	add	r7, sp, #0
 8037036:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mcp23017InitResult = GOS_ERROR;
 8037038:	23ae      	movs	r3, #174	; 0xae
 803703a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (drv_mcp23017SetIoDir((drv_mcp23017Descriptor_t*)pDevice) == GOS_SUCCESS &&
 803703c:	6878      	ldr	r0, [r7, #4]
 803703e:	f000 f8d1 	bl	80371e4 <drv_mcp23017SetIoDir>
 8037042:	4603      	mov	r3, r0
 8037044:	2b55      	cmp	r3, #85	; 0x55
 8037046:	d107      	bne.n	8037058 <drv_mcp23017Init+0x28>
        drv_mcp23017SetIoPol((drv_mcp23017Descriptor_t*)pDevice) == GOS_SUCCESS)
 8037048:	6878      	ldr	r0, [r7, #4]
 803704a:	f000 f8ec 	bl	8037226 <drv_mcp23017SetIoPol>
 803704e:	4603      	mov	r3, r0
    if (drv_mcp23017SetIoDir((drv_mcp23017Descriptor_t*)pDevice) == GOS_SUCCESS &&
 8037050:	2b55      	cmp	r3, #85	; 0x55
 8037052:	d101      	bne.n	8037058 <drv_mcp23017Init+0x28>
    {
        mcp23017InitResult = GOS_SUCCESS;
 8037054:	2355      	movs	r3, #85	; 0x55
 8037056:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Init error.
    }

    return mcp23017InitResult;
 8037058:	7bfb      	ldrb	r3, [r7, #15]
}
 803705a:	4618      	mov	r0, r3
 803705c:	3710      	adds	r7, #16
 803705e:	46bd      	mov	sp, r7
 8037060:	bd80      	pop	{r7, pc}

08037062 <drv_mcp23017ReadPin>:
 */
gos_result_t drv_mcp23017ReadPin (
        drv_mcp23017Descriptor_t* pDevice, u8_t             port,
        drv_mcp23017Pin_t         pin,     drv_gpioState_t* pGpioState
        )
{
 8037062:	b580      	push	{r7, lr}
 8037064:	b086      	sub	sp, #24
 8037066:	af00      	add	r7, sp, #0
 8037068:	60f8      	str	r0, [r7, #12]
 803706a:	607b      	str	r3, [r7, #4]
 803706c:	460b      	mov	r3, r1
 803706e:	72fb      	strb	r3, [r7, #11]
 8037070:	4613      	mov	r3, r2
 8037072:	72bb      	strb	r3, [r7, #10]
    /*
     * Local variables.
     */
    gos_result_t mcp23017ReadPinResult = GOS_ERROR;
 8037074:	23ae      	movs	r3, #174	; 0xae
 8037076:	75fb      	strb	r3, [r7, #23]
    u8_t         data                  = 0u;
 8037078:	2300      	movs	r3, #0
 803707a:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (pDevice != NULL && pGpioState != NULL &&
 803707c:	68fb      	ldr	r3, [r7, #12]
 803707e:	2b00      	cmp	r3, #0
 8037080:	d01e      	beq.n	80370c0 <drv_mcp23017ReadPin+0x5e>
 8037082:	687b      	ldr	r3, [r7, #4]
 8037084:	2b00      	cmp	r3, #0
 8037086:	d01b      	beq.n	80370c0 <drv_mcp23017ReadPin+0x5e>
        drv_mcp23017Read(pDevice, REGISTER_GPIOA | port, &data) == GOS_SUCCESS)
 8037088:	7afb      	ldrb	r3, [r7, #11]
 803708a:	f043 0312 	orr.w	r3, r3, #18
 803708e:	b2db      	uxtb	r3, r3
 8037090:	b29b      	uxth	r3, r3
 8037092:	f107 0216 	add.w	r2, r7, #22
 8037096:	4619      	mov	r1, r3
 8037098:	68f8      	ldr	r0, [r7, #12]
 803709a:	f000 f861 	bl	8037160 <drv_mcp23017Read>
 803709e:	4603      	mov	r3, r0
    if (pDevice != NULL && pGpioState != NULL &&
 80370a0:	2b55      	cmp	r3, #85	; 0x55
 80370a2:	d10d      	bne.n	80370c0 <drv_mcp23017ReadPin+0x5e>
    {
        *pGpioState = (data & pin) > 0 ? GPIO_STATE_HIGH : GPIO_STATE_LOW;
 80370a4:	7dba      	ldrb	r2, [r7, #22]
 80370a6:	7abb      	ldrb	r3, [r7, #10]
 80370a8:	4013      	ands	r3, r2
 80370aa:	b2db      	uxtb	r3, r3
 80370ac:	2b00      	cmp	r3, #0
 80370ae:	bf14      	ite	ne
 80370b0:	2301      	movne	r3, #1
 80370b2:	2300      	moveq	r3, #0
 80370b4:	b2db      	uxtb	r3, r3
 80370b6:	461a      	mov	r2, r3
 80370b8:	687b      	ldr	r3, [r7, #4]
 80370ba:	701a      	strb	r2, [r3, #0]
        mcp23017ReadPinResult = GOS_SUCCESS;
 80370bc:	2355      	movs	r3, #85	; 0x55
 80370be:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Read error.
    }

    return mcp23017ReadPinResult;
 80370c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80370c2:	4618      	mov	r0, r3
 80370c4:	3718      	adds	r7, #24
 80370c6:	46bd      	mov	sp, r7
 80370c8:	bd80      	pop	{r7, pc}

080370ca <drv_mcp23017WritePin>:
 */
gos_result_t drv_mcp23017WritePin (
        drv_mcp23017Descriptor_t* pDevice, u8_t            port,
        drv_mcp23017Pin_t         pin,     drv_gpioState_t gpioState
        )
{
 80370ca:	b580      	push	{r7, lr}
 80370cc:	b084      	sub	sp, #16
 80370ce:	af00      	add	r7, sp, #0
 80370d0:	6078      	str	r0, [r7, #4]
 80370d2:	4608      	mov	r0, r1
 80370d4:	4611      	mov	r1, r2
 80370d6:	461a      	mov	r2, r3
 80370d8:	4603      	mov	r3, r0
 80370da:	70fb      	strb	r3, [r7, #3]
 80370dc:	460b      	mov	r3, r1
 80370de:	70bb      	strb	r3, [r7, #2]
 80370e0:	4613      	mov	r3, r2
 80370e2:	707b      	strb	r3, [r7, #1]
    /*
     * Local variables.
     */
    gos_result_t    mcp23017WritePinResult = GOS_ERROR;
 80370e4:	23ae      	movs	r3, #174	; 0xae
 80370e6:	73fb      	strb	r3, [r7, #15]
    u8_t            portState              = 0u;
 80370e8:	2300      	movs	r3, #0
 80370ea:	73bb      	strb	r3, [r7, #14]
    u8_t            data                   = 0u;
 80370ec:	2300      	movs	r3, #0
 80370ee:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    if (pDevice != NULL &&
 80370f0:	687b      	ldr	r3, [r7, #4]
 80370f2:	2b00      	cmp	r3, #0
 80370f4:	d02f      	beq.n	8037156 <drv_mcp23017WritePin+0x8c>
        drv_mcp23017Read(pDevice, REGISTER_GPIOA | port, &data) == GOS_SUCCESS)
 80370f6:	78fb      	ldrb	r3, [r7, #3]
 80370f8:	f043 0312 	orr.w	r3, r3, #18
 80370fc:	b2db      	uxtb	r3, r3
 80370fe:	b29b      	uxth	r3, r3
 8037100:	f107 020d 	add.w	r2, r7, #13
 8037104:	4619      	mov	r1, r3
 8037106:	6878      	ldr	r0, [r7, #4]
 8037108:	f000 f82a 	bl	8037160 <drv_mcp23017Read>
 803710c:	4603      	mov	r3, r0
    if (pDevice != NULL &&
 803710e:	2b55      	cmp	r3, #85	; 0x55
 8037110:	d121      	bne.n	8037156 <drv_mcp23017WritePin+0x8c>
    {
        portState = data;
 8037112:	7b7b      	ldrb	r3, [r7, #13]
 8037114:	73bb      	strb	r3, [r7, #14]

        // Clear pin state.
        if (gpioState == GPIO_STATE_LOW)
 8037116:	787b      	ldrb	r3, [r7, #1]
 8037118:	2b00      	cmp	r3, #0
 803711a:	d109      	bne.n	8037130 <drv_mcp23017WritePin+0x66>
        {
            portState &= ~(pin & 0b11111111);
 803711c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8037120:	43db      	mvns	r3, r3
 8037122:	b25a      	sxtb	r2, r3
 8037124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8037128:	4013      	ands	r3, r2
 803712a:	b25b      	sxtb	r3, r3
 803712c:	73bb      	strb	r3, [r7, #14]
 803712e:	e003      	b.n	8037138 <drv_mcp23017WritePin+0x6e>
        }
        else
        {
            portState |= (pin & 0b11111111);
 8037130:	7bba      	ldrb	r2, [r7, #14]
 8037132:	78bb      	ldrb	r3, [r7, #2]
 8037134:	4313      	orrs	r3, r2
 8037136:	73bb      	strb	r3, [r7, #14]
        }

        data = portState;
 8037138:	7bbb      	ldrb	r3, [r7, #14]
 803713a:	737b      	strb	r3, [r7, #13]

        mcp23017WritePinResult = drv_mcp23017Write(pDevice, REGISTER_GPIOA | port, &data);
 803713c:	78fb      	ldrb	r3, [r7, #3]
 803713e:	f043 0312 	orr.w	r3, r3, #18
 8037142:	b2db      	uxtb	r3, r3
 8037144:	b29b      	uxth	r3, r3
 8037146:	f107 020d 	add.w	r2, r7, #13
 803714a:	4619      	mov	r1, r3
 803714c:	6878      	ldr	r0, [r7, #4]
 803714e:	f000 f828 	bl	80371a2 <drv_mcp23017Write>
 8037152:	4603      	mov	r3, r0
 8037154:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Null pointer or read error.
    }

    return mcp23017WritePinResult;
 8037156:	7bfb      	ldrb	r3, [r7, #15]
}
 8037158:	4618      	mov	r0, r3
 803715a:	3710      	adds	r7, #16
 803715c:	46bd      	mov	sp, r7
 803715e:	bd80      	pop	{r7, pc}

08037160 <drv_mcp23017Read>:
 * @param reg
 * @param pData
 * @return
 */
GOS_STATIC gos_result_t drv_mcp23017Read (drv_mcp23017Descriptor_t* pDevice, u16_t reg, u8_t* pData)
{
 8037160:	b590      	push	{r4, r7, lr}
 8037162:	b089      	sub	sp, #36	; 0x24
 8037164:	af04      	add	r7, sp, #16
 8037166:	60f8      	str	r0, [r7, #12]
 8037168:	460b      	mov	r3, r1
 803716a:	607a      	str	r2, [r7, #4]
 803716c:	817b      	strh	r3, [r7, #10]
    return drv_i2cMemRead(pDevice->i2cInstance, (pDevice->deviceAddress) << 1,
 803716e:	68fb      	ldr	r3, [r7, #12]
 8037170:	7818      	ldrb	r0, [r3, #0]
 8037172:	68fb      	ldr	r3, [r7, #12]
 8037174:	885b      	ldrh	r3, [r3, #2]
 8037176:	005b      	lsls	r3, r3, #1
 8037178:	b299      	uxth	r1, r3
 803717a:	68fb      	ldr	r3, [r7, #12]
 803717c:	685b      	ldr	r3, [r3, #4]
 803717e:	68fa      	ldr	r2, [r7, #12]
 8037180:	6892      	ldr	r2, [r2, #8]
 8037182:	897c      	ldrh	r4, [r7, #10]
 8037184:	9203      	str	r2, [sp, #12]
 8037186:	9302      	str	r3, [sp, #8]
 8037188:	2301      	movs	r3, #1
 803718a:	9301      	str	r3, [sp, #4]
 803718c:	687b      	ldr	r3, [r7, #4]
 803718e:	9300      	str	r3, [sp, #0]
 8037190:	2301      	movs	r3, #1
 8037192:	4622      	mov	r2, r4
 8037194:	f7ff fc44 	bl	8036a20 <drv_i2cMemRead>
 8037198:	4603      	mov	r3, r0
            reg, 1, pData, 1, pDevice->readMutexTmo, pDevice->readTriggerTmo);
}
 803719a:	4618      	mov	r0, r3
 803719c:	3714      	adds	r7, #20
 803719e:	46bd      	mov	sp, r7
 80371a0:	bd90      	pop	{r4, r7, pc}

080371a2 <drv_mcp23017Write>:
 * @param reg
 * @param pData
 * @return
 */
GOS_STATIC gos_result_t drv_mcp23017Write (drv_mcp23017Descriptor_t* pDevice, u16_t reg, u8_t* pData)
{
 80371a2:	b590      	push	{r4, r7, lr}
 80371a4:	b089      	sub	sp, #36	; 0x24
 80371a6:	af04      	add	r7, sp, #16
 80371a8:	60f8      	str	r0, [r7, #12]
 80371aa:	460b      	mov	r3, r1
 80371ac:	607a      	str	r2, [r7, #4]
 80371ae:	817b      	strh	r3, [r7, #10]
    return drv_i2cMemWrite(pDevice->i2cInstance, (pDevice->deviceAddress) << 1,
 80371b0:	68fb      	ldr	r3, [r7, #12]
 80371b2:	7818      	ldrb	r0, [r3, #0]
 80371b4:	68fb      	ldr	r3, [r7, #12]
 80371b6:	885b      	ldrh	r3, [r3, #2]
 80371b8:	005b      	lsls	r3, r3, #1
 80371ba:	b299      	uxth	r1, r3
 80371bc:	68fb      	ldr	r3, [r7, #12]
 80371be:	68db      	ldr	r3, [r3, #12]
 80371c0:	68fa      	ldr	r2, [r7, #12]
 80371c2:	6912      	ldr	r2, [r2, #16]
 80371c4:	897c      	ldrh	r4, [r7, #10]
 80371c6:	9203      	str	r2, [sp, #12]
 80371c8:	9302      	str	r3, [sp, #8]
 80371ca:	2301      	movs	r3, #1
 80371cc:	9301      	str	r3, [sp, #4]
 80371ce:	687b      	ldr	r3, [r7, #4]
 80371d0:	9300      	str	r3, [sp, #0]
 80371d2:	2301      	movs	r3, #1
 80371d4:	4622      	mov	r2, r4
 80371d6:	f7ff fbb7 	bl	8036948 <drv_i2cMemWrite>
 80371da:	4603      	mov	r3, r0
            reg, 1, pData, 1, pDevice->writeMutexTmo, pDevice->writeTriggerTmo);
}
 80371dc:	4618      	mov	r0, r3
 80371de:	3714      	adds	r7, #20
 80371e0:	46bd      	mov	sp, r7
 80371e2:	bd90      	pop	{r4, r7, pc}

080371e4 <drv_mcp23017SetIoDir>:
 * TODO
 * @param pDevice
 * @return
 */
GOS_STATIC gos_result_t drv_mcp23017SetIoDir (drv_mcp23017Descriptor_t* pDevice)
{
 80371e4:	b580      	push	{r7, lr}
 80371e6:	b084      	sub	sp, #16
 80371e8:	af00      	add	r7, sp, #0
 80371ea:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t setIoDirResult = GOS_ERROR;
 80371ec:	23ae      	movs	r3, #174	; 0xae
 80371ee:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (drv_mcp23017Write(pDevice, REGISTER_IODIRA, &(pDevice->portADir)) == GOS_SUCCESS &&
 80371f0:	687b      	ldr	r3, [r7, #4]
 80371f2:	3314      	adds	r3, #20
 80371f4:	461a      	mov	r2, r3
 80371f6:	2100      	movs	r1, #0
 80371f8:	6878      	ldr	r0, [r7, #4]
 80371fa:	f7ff ffd2 	bl	80371a2 <drv_mcp23017Write>
 80371fe:	4603      	mov	r3, r0
 8037200:	2b55      	cmp	r3, #85	; 0x55
 8037202:	d10b      	bne.n	803721c <drv_mcp23017SetIoDir+0x38>
        drv_mcp23017Write(pDevice, REGISTER_IODIRB, &(pDevice->portBDir)) == GOS_SUCCESS)
 8037204:	687b      	ldr	r3, [r7, #4]
 8037206:	3315      	adds	r3, #21
 8037208:	461a      	mov	r2, r3
 803720a:	2101      	movs	r1, #1
 803720c:	6878      	ldr	r0, [r7, #4]
 803720e:	f7ff ffc8 	bl	80371a2 <drv_mcp23017Write>
 8037212:	4603      	mov	r3, r0
    if (drv_mcp23017Write(pDevice, REGISTER_IODIRA, &(pDevice->portADir)) == GOS_SUCCESS &&
 8037214:	2b55      	cmp	r3, #85	; 0x55
 8037216:	d101      	bne.n	803721c <drv_mcp23017SetIoDir+0x38>
    {
        setIoDirResult = GOS_SUCCESS;
 8037218:	2355      	movs	r3, #85	; 0x55
 803721a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Write error.
    }

    return setIoDirResult;
 803721c:	7bfb      	ldrb	r3, [r7, #15]
}
 803721e:	4618      	mov	r0, r3
 8037220:	3710      	adds	r7, #16
 8037222:	46bd      	mov	sp, r7
 8037224:	bd80      	pop	{r7, pc}

08037226 <drv_mcp23017SetIoPol>:
 * TODO
 * @param pDevice
 * @return
 */
GOS_STATIC gos_result_t drv_mcp23017SetIoPol (drv_mcp23017Descriptor_t* pDevice)
{
 8037226:	b580      	push	{r7, lr}
 8037228:	b084      	sub	sp, #16
 803722a:	af00      	add	r7, sp, #0
 803722c:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t setIoPolResult = GOS_ERROR;
 803722e:	23ae      	movs	r3, #174	; 0xae
 8037230:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (drv_mcp23017Write(pDevice, REGISTER_IPOLA, &(pDevice->portAPol)) == GOS_SUCCESS &&
 8037232:	687b      	ldr	r3, [r7, #4]
 8037234:	3316      	adds	r3, #22
 8037236:	461a      	mov	r2, r3
 8037238:	2102      	movs	r1, #2
 803723a:	6878      	ldr	r0, [r7, #4]
 803723c:	f7ff ffb1 	bl	80371a2 <drv_mcp23017Write>
 8037240:	4603      	mov	r3, r0
 8037242:	2b55      	cmp	r3, #85	; 0x55
 8037244:	d10b      	bne.n	803725e <drv_mcp23017SetIoPol+0x38>
        drv_mcp23017Write(pDevice, REGISTER_IPOLB, &(pDevice->portBPol)) == GOS_SUCCESS)
 8037246:	687b      	ldr	r3, [r7, #4]
 8037248:	3317      	adds	r3, #23
 803724a:	461a      	mov	r2, r3
 803724c:	2103      	movs	r1, #3
 803724e:	6878      	ldr	r0, [r7, #4]
 8037250:	f7ff ffa7 	bl	80371a2 <drv_mcp23017Write>
 8037254:	4603      	mov	r3, r0
    if (drv_mcp23017Write(pDevice, REGISTER_IPOLA, &(pDevice->portAPol)) == GOS_SUCCESS &&
 8037256:	2b55      	cmp	r3, #85	; 0x55
 8037258:	d101      	bne.n	803725e <drv_mcp23017SetIoPol+0x38>
    {
        setIoPolResult = GOS_SUCCESS;
 803725a:	2355      	movs	r3, #85	; 0x55
 803725c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Write error.
    }

    return setIoPolResult;
 803725e:	7bfb      	ldrb	r3, [r7, #15]
}
 8037260:	4618      	mov	r0, r3
 8037262:	3710      	adds	r7, #16
 8037264:	46bd      	mov	sp, r7
 8037266:	bd80      	pop	{r7, pc}

08037268 <drv_shellTransmitString>:

/*
 * Function: drv_shellTransmitString
 */
GOS_INLINE gos_result_t drv_shellTransmitString (char_t* pString)
{
 8037268:	b580      	push	{r7, lr}
 803726a:	b086      	sub	sp, #24
 803726c:	af02      	add	r7, sp, #8
 803726e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8037270:	23ae      	movs	r3, #174	; 0xae
 8037272:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8037274:	2300      	movs	r3, #0
 8037276:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 8037278:	4b0c      	ldr	r3, [pc, #48]	; (80372ac <drv_shellTransmitString+0x44>)
 803727a:	785b      	ldrb	r3, [r3, #1]
 803727c:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, (u8_t*)pString, strlen(pString),
 803727e:	6878      	ldr	r0, [r7, #4]
 8037280:	f7e9 f826 	bl	80202d0 <strlen>
 8037284:	4603      	mov	r3, r0
 8037286:	b29a      	uxth	r2, r3
 8037288:	4b09      	ldr	r3, [pc, #36]	; (80372b0 <drv_shellTransmitString+0x48>)
 803728a:	6959      	ldr	r1, [r3, #20]
 803728c:	4b08      	ldr	r3, [pc, #32]	; (80372b0 <drv_shellTransmitString+0x48>)
 803728e:	699b      	ldr	r3, [r3, #24]
 8037290:	7bb8      	ldrb	r0, [r7, #14]
 8037292:	9300      	str	r3, [sp, #0]
 8037294:	460b      	mov	r3, r1
 8037296:	6879      	ldr	r1, [r7, #4]
 8037298:	f001 fb7a 	bl	8038990 <drv_uartTransmitIT>
 803729c:	4603      	mov	r3, r0
 803729e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 80372a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80372a2:	4618      	mov	r0, r3
 80372a4:	3710      	adds	r7, #16
 80372a6:	46bd      	mov	sp, r7
 80372a8:	bd80      	pop	{r7, pc}
 80372aa:	bf00      	nop
 80372ac:	08049494 	.word	0x08049494
 80372b0:	20001920 	.word	0x20001920

080372b4 <drv_shellReceiveChar>:

/*
 * Function: drv_shellReceiveChar
 */
GOS_INLINE gos_result_t drv_shellReceiveChar (char_t* pBuffer)
{
 80372b4:	b580      	push	{r7, lr}
 80372b6:	b086      	sub	sp, #24
 80372b8:	af02      	add	r7, sp, #8
 80372ba:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 80372bc:	23ae      	movs	r3, #174	; 0xae
 80372be:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 80372c0:	2300      	movs	r3, #0
 80372c2:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 80372c4:	4b0a      	ldr	r3, [pc, #40]	; (80372f0 <drv_shellReceiveChar+0x3c>)
 80372c6:	785b      	ldrb	r3, [r3, #1]
 80372c8:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveIT(instance, (u8_t*)pBuffer, sizeof(char_t),
 80372ca:	4b0a      	ldr	r3, [pc, #40]	; (80372f4 <drv_shellReceiveChar+0x40>)
 80372cc:	68da      	ldr	r2, [r3, #12]
 80372ce:	4b09      	ldr	r3, [pc, #36]	; (80372f4 <drv_shellReceiveChar+0x40>)
 80372d0:	691b      	ldr	r3, [r3, #16]
 80372d2:	7bb8      	ldrb	r0, [r7, #14]
 80372d4:	9300      	str	r3, [sp, #0]
 80372d6:	4613      	mov	r3, r2
 80372d8:	2201      	movs	r2, #1
 80372da:	6879      	ldr	r1, [r7, #4]
 80372dc:	f001 fbc8 	bl	8038a70 <drv_uartReceiveIT>
 80372e0:	4603      	mov	r3, r0
 80372e2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 80372e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80372e6:	4618      	mov	r0, r3
 80372e8:	3710      	adds	r7, #16
 80372ea:	46bd      	mov	sp, r7
 80372ec:	bd80      	pop	{r7, pc}
 80372ee:	bf00      	nop
 80372f0:	08049494 	.word	0x08049494
 80372f4:	20001920 	.word	0x20001920

080372f8 <drv_spiInit>:

/*
 * Function: drv_spiInit
 */
gos_result_t drv_spiInit (void_t)
{
 80372f8:	b580      	push	{r7, lr}
 80372fa:	b082      	sub	sp, #8
 80372fc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t spiDriverInitResult = GOS_SUCCESS;
 80372fe:	2355      	movs	r3, #85	; 0x55
 8037300:	71fb      	strb	r3, [r7, #7]
    u8_t         spiIdx              = 0u;
 8037302:	2300      	movs	r3, #0
 8037304:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (spiConfig != NULL)
    {
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 8037306:	2300      	movs	r3, #0
 8037308:	71bb      	strb	r3, [r7, #6]
 803730a:	e00e      	b.n	803732a <drv_spiInit+0x32>
        {
            GOS_CONCAT_RESULT(spiDriverInitResult, drv_spiInitInstance(spiIdx));
 803730c:	79fb      	ldrb	r3, [r7, #7]
 803730e:	2b55      	cmp	r3, #85	; 0x55
 8037310:	d106      	bne.n	8037320 <drv_spiInit+0x28>
 8037312:	79bb      	ldrb	r3, [r7, #6]
 8037314:	4618      	mov	r0, r3
 8037316:	f000 f81b 	bl	8037350 <drv_spiInitInstance>
 803731a:	4603      	mov	r3, r0
 803731c:	71fb      	strb	r3, [r7, #7]
 803731e:	e001      	b.n	8037324 <drv_spiInit+0x2c>
 8037320:	23ae      	movs	r3, #174	; 0xae
 8037322:	71fb      	strb	r3, [r7, #7]
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 8037324:	79bb      	ldrb	r3, [r7, #6]
 8037326:	3301      	adds	r3, #1
 8037328:	71bb      	strb	r3, [r7, #6]
 803732a:	79bb      	ldrb	r3, [r7, #6]
 803732c:	4a06      	ldr	r2, [pc, #24]	; (8037348 <drv_spiInit+0x50>)
 803732e:	6812      	ldr	r2, [r2, #0]
 8037330:	08d2      	lsrs	r2, r2, #3
 8037332:	4906      	ldr	r1, [pc, #24]	; (803734c <drv_spiInit+0x54>)
 8037334:	fba1 1202 	umull	r1, r2, r1, r2
 8037338:	4293      	cmp	r3, r2
 803733a:	d3e7      	bcc.n	803730c <drv_spiInit+0x14>
    {
        // Configuration array is NULL pointer.
        spiDriverInitResult = GOS_ERROR;
    }

    return spiDriverInitResult;
 803733c:	79fb      	ldrb	r3, [r7, #7]
}
 803733e:	4618      	mov	r0, r3
 8037340:	3708      	adds	r7, #8
 8037342:	46bd      	mov	sp, r7
 8037344:	bd80      	pop	{r7, pc}
 8037346:	bf00      	nop
 8037348:	2000187c 	.word	0x2000187c
 803734c:	24924925 	.word	0x24924925

08037350 <drv_spiInitInstance>:

/*
 * Function: drv_spiInitInstance
 */
gos_result_t drv_spiInitInstance (u8_t spiInstanceIndex)
{
 8037350:	b580      	push	{r7, lr}
 8037352:	b084      	sub	sp, #16
 8037354:	af00      	add	r7, sp, #0
 8037356:	4603      	mov	r3, r0
 8037358:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            spiInitResult = GOS_ERROR;
 803735a:	23ae      	movs	r3, #174	; 0xae
 803735c:	73fb      	strb	r3, [r7, #15]
    drv_spiPeriphInstance_t instance      = 0u;
 803735e:	2300      	movs	r3, #0
 8037360:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (spiConfig != NULL && spiInstanceIndex < (spiConfigSize / sizeof(drv_spiDescriptor_t)))
 8037362:	79fb      	ldrb	r3, [r7, #7]
 8037364:	4aa1      	ldr	r2, [pc, #644]	; (80375ec <drv_spiInitInstance+0x29c>)
 8037366:	6812      	ldr	r2, [r2, #0]
 8037368:	08d2      	lsrs	r2, r2, #3
 803736a:	49a1      	ldr	r1, [pc, #644]	; (80375f0 <drv_spiInitInstance+0x2a0>)
 803736c:	fba1 1202 	umull	r1, r2, r1, r2
 8037370:	4293      	cmp	r3, r2
 8037372:	f080 8135 	bcs.w	80375e0 <drv_spiInitInstance+0x290>
    {
        instance = spiConfig[spiInstanceIndex].periphInstance;
 8037376:	79fa      	ldrb	r2, [r7, #7]
 8037378:	499e      	ldr	r1, [pc, #632]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 803737a:	4613      	mov	r3, r2
 803737c:	00db      	lsls	r3, r3, #3
 803737e:	1a9b      	subs	r3, r3, r2
 8037380:	00db      	lsls	r3, r3, #3
 8037382:	440b      	add	r3, r1
 8037384:	781b      	ldrb	r3, [r3, #0]
 8037386:	73bb      	strb	r3, [r7, #14]

        hspis[instance].Instance               = spiInstanceLut[instance];
 8037388:	7bba      	ldrb	r2, [r7, #14]
 803738a:	7bbb      	ldrb	r3, [r7, #14]
 803738c:	499a      	ldr	r1, [pc, #616]	; (80375f8 <drv_spiInitInstance+0x2a8>)
 803738e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8037392:	499a      	ldr	r1, [pc, #616]	; (80375fc <drv_spiInitInstance+0x2ac>)
 8037394:	2058      	movs	r0, #88	; 0x58
 8037396:	fb00 f303 	mul.w	r3, r0, r3
 803739a:	440b      	add	r3, r1
 803739c:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Mode              = spiConfig[spiInstanceIndex].mode;
 803739e:	79fa      	ldrb	r2, [r7, #7]
 80373a0:	7bb9      	ldrb	r1, [r7, #14]
 80373a2:	4894      	ldr	r0, [pc, #592]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 80373a4:	4613      	mov	r3, r2
 80373a6:	00db      	lsls	r3, r3, #3
 80373a8:	1a9b      	subs	r3, r3, r2
 80373aa:	00db      	lsls	r3, r3, #3
 80373ac:	4403      	add	r3, r0
 80373ae:	3304      	adds	r3, #4
 80373b0:	681a      	ldr	r2, [r3, #0]
 80373b2:	4892      	ldr	r0, [pc, #584]	; (80375fc <drv_spiInitInstance+0x2ac>)
 80373b4:	2358      	movs	r3, #88	; 0x58
 80373b6:	fb01 f303 	mul.w	r3, r1, r3
 80373ba:	4403      	add	r3, r0
 80373bc:	3304      	adds	r3, #4
 80373be:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Direction         = spiConfig[spiInstanceIndex].direction;
 80373c0:	79fa      	ldrb	r2, [r7, #7]
 80373c2:	7bb9      	ldrb	r1, [r7, #14]
 80373c4:	488b      	ldr	r0, [pc, #556]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 80373c6:	4613      	mov	r3, r2
 80373c8:	00db      	lsls	r3, r3, #3
 80373ca:	1a9b      	subs	r3, r3, r2
 80373cc:	00db      	lsls	r3, r3, #3
 80373ce:	4403      	add	r3, r0
 80373d0:	3308      	adds	r3, #8
 80373d2:	681a      	ldr	r2, [r3, #0]
 80373d4:	4889      	ldr	r0, [pc, #548]	; (80375fc <drv_spiInitInstance+0x2ac>)
 80373d6:	2358      	movs	r3, #88	; 0x58
 80373d8:	fb01 f303 	mul.w	r3, r1, r3
 80373dc:	4403      	add	r3, r0
 80373de:	3308      	adds	r3, #8
 80373e0:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.DataSize          = spiConfig[spiInstanceIndex].dataSize;
 80373e2:	79fa      	ldrb	r2, [r7, #7]
 80373e4:	7bb9      	ldrb	r1, [r7, #14]
 80373e6:	4883      	ldr	r0, [pc, #524]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 80373e8:	4613      	mov	r3, r2
 80373ea:	00db      	lsls	r3, r3, #3
 80373ec:	1a9b      	subs	r3, r3, r2
 80373ee:	00db      	lsls	r3, r3, #3
 80373f0:	4403      	add	r3, r0
 80373f2:	330c      	adds	r3, #12
 80373f4:	681a      	ldr	r2, [r3, #0]
 80373f6:	4881      	ldr	r0, [pc, #516]	; (80375fc <drv_spiInitInstance+0x2ac>)
 80373f8:	2358      	movs	r3, #88	; 0x58
 80373fa:	fb01 f303 	mul.w	r3, r1, r3
 80373fe:	4403      	add	r3, r0
 8037400:	330c      	adds	r3, #12
 8037402:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPolarity       = spiConfig[spiInstanceIndex].clkPolarity;
 8037404:	79fa      	ldrb	r2, [r7, #7]
 8037406:	7bb9      	ldrb	r1, [r7, #14]
 8037408:	487a      	ldr	r0, [pc, #488]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 803740a:	4613      	mov	r3, r2
 803740c:	00db      	lsls	r3, r3, #3
 803740e:	1a9b      	subs	r3, r3, r2
 8037410:	00db      	lsls	r3, r3, #3
 8037412:	4403      	add	r3, r0
 8037414:	3310      	adds	r3, #16
 8037416:	681a      	ldr	r2, [r3, #0]
 8037418:	4878      	ldr	r0, [pc, #480]	; (80375fc <drv_spiInitInstance+0x2ac>)
 803741a:	2358      	movs	r3, #88	; 0x58
 803741c:	fb01 f303 	mul.w	r3, r1, r3
 8037420:	4403      	add	r3, r0
 8037422:	3310      	adds	r3, #16
 8037424:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPhase          = spiConfig[spiInstanceIndex].clkPhase;
 8037426:	79fa      	ldrb	r2, [r7, #7]
 8037428:	7bb9      	ldrb	r1, [r7, #14]
 803742a:	4872      	ldr	r0, [pc, #456]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 803742c:	4613      	mov	r3, r2
 803742e:	00db      	lsls	r3, r3, #3
 8037430:	1a9b      	subs	r3, r3, r2
 8037432:	00db      	lsls	r3, r3, #3
 8037434:	4403      	add	r3, r0
 8037436:	3314      	adds	r3, #20
 8037438:	681a      	ldr	r2, [r3, #0]
 803743a:	4870      	ldr	r0, [pc, #448]	; (80375fc <drv_spiInitInstance+0x2ac>)
 803743c:	2358      	movs	r3, #88	; 0x58
 803743e:	fb01 f303 	mul.w	r3, r1, r3
 8037442:	4403      	add	r3, r0
 8037444:	3314      	adds	r3, #20
 8037446:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.NSS               = spiConfig[spiInstanceIndex].nss;
 8037448:	79fa      	ldrb	r2, [r7, #7]
 803744a:	7bb9      	ldrb	r1, [r7, #14]
 803744c:	4869      	ldr	r0, [pc, #420]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 803744e:	4613      	mov	r3, r2
 8037450:	00db      	lsls	r3, r3, #3
 8037452:	1a9b      	subs	r3, r3, r2
 8037454:	00db      	lsls	r3, r3, #3
 8037456:	4403      	add	r3, r0
 8037458:	3318      	adds	r3, #24
 803745a:	681a      	ldr	r2, [r3, #0]
 803745c:	4867      	ldr	r0, [pc, #412]	; (80375fc <drv_spiInitInstance+0x2ac>)
 803745e:	2358      	movs	r3, #88	; 0x58
 8037460:	fb01 f303 	mul.w	r3, r1, r3
 8037464:	4403      	add	r3, r0
 8037466:	3318      	adds	r3, #24
 8037468:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.BaudRatePrescaler = spiConfig[spiInstanceIndex].baudRatePrescaler;
 803746a:	79fa      	ldrb	r2, [r7, #7]
 803746c:	7bb9      	ldrb	r1, [r7, #14]
 803746e:	4861      	ldr	r0, [pc, #388]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 8037470:	4613      	mov	r3, r2
 8037472:	00db      	lsls	r3, r3, #3
 8037474:	1a9b      	subs	r3, r3, r2
 8037476:	00db      	lsls	r3, r3, #3
 8037478:	4403      	add	r3, r0
 803747a:	331c      	adds	r3, #28
 803747c:	681a      	ldr	r2, [r3, #0]
 803747e:	485f      	ldr	r0, [pc, #380]	; (80375fc <drv_spiInitInstance+0x2ac>)
 8037480:	2358      	movs	r3, #88	; 0x58
 8037482:	fb01 f303 	mul.w	r3, r1, r3
 8037486:	4403      	add	r3, r0
 8037488:	331c      	adds	r3, #28
 803748a:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.FirstBit          = spiConfig[spiInstanceIndex].firstBit;
 803748c:	79fa      	ldrb	r2, [r7, #7]
 803748e:	7bb9      	ldrb	r1, [r7, #14]
 8037490:	4858      	ldr	r0, [pc, #352]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 8037492:	4613      	mov	r3, r2
 8037494:	00db      	lsls	r3, r3, #3
 8037496:	1a9b      	subs	r3, r3, r2
 8037498:	00db      	lsls	r3, r3, #3
 803749a:	4403      	add	r3, r0
 803749c:	3320      	adds	r3, #32
 803749e:	681a      	ldr	r2, [r3, #0]
 80374a0:	4856      	ldr	r0, [pc, #344]	; (80375fc <drv_spiInitInstance+0x2ac>)
 80374a2:	2358      	movs	r3, #88	; 0x58
 80374a4:	fb01 f303 	mul.w	r3, r1, r3
 80374a8:	4403      	add	r3, r0
 80374aa:	3320      	adds	r3, #32
 80374ac:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.TIMode            = spiConfig[spiInstanceIndex].tiMode;
 80374ae:	79fa      	ldrb	r2, [r7, #7]
 80374b0:	7bb9      	ldrb	r1, [r7, #14]
 80374b2:	4850      	ldr	r0, [pc, #320]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 80374b4:	4613      	mov	r3, r2
 80374b6:	00db      	lsls	r3, r3, #3
 80374b8:	1a9b      	subs	r3, r3, r2
 80374ba:	00db      	lsls	r3, r3, #3
 80374bc:	4403      	add	r3, r0
 80374be:	3324      	adds	r3, #36	; 0x24
 80374c0:	681a      	ldr	r2, [r3, #0]
 80374c2:	484e      	ldr	r0, [pc, #312]	; (80375fc <drv_spiInitInstance+0x2ac>)
 80374c4:	2358      	movs	r3, #88	; 0x58
 80374c6:	fb01 f303 	mul.w	r3, r1, r3
 80374ca:	4403      	add	r3, r0
 80374cc:	3324      	adds	r3, #36	; 0x24
 80374ce:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCCalculation    = spiConfig[spiInstanceIndex].crcCalculation;
 80374d0:	79fa      	ldrb	r2, [r7, #7]
 80374d2:	7bb9      	ldrb	r1, [r7, #14]
 80374d4:	4847      	ldr	r0, [pc, #284]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 80374d6:	4613      	mov	r3, r2
 80374d8:	00db      	lsls	r3, r3, #3
 80374da:	1a9b      	subs	r3, r3, r2
 80374dc:	00db      	lsls	r3, r3, #3
 80374de:	4403      	add	r3, r0
 80374e0:	3328      	adds	r3, #40	; 0x28
 80374e2:	681a      	ldr	r2, [r3, #0]
 80374e4:	4845      	ldr	r0, [pc, #276]	; (80375fc <drv_spiInitInstance+0x2ac>)
 80374e6:	2358      	movs	r3, #88	; 0x58
 80374e8:	fb01 f303 	mul.w	r3, r1, r3
 80374ec:	4403      	add	r3, r0
 80374ee:	3328      	adds	r3, #40	; 0x28
 80374f0:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCPolynomial     = spiConfig[spiInstanceIndex].crcPolynomial;
 80374f2:	79fa      	ldrb	r2, [r7, #7]
 80374f4:	7bb9      	ldrb	r1, [r7, #14]
 80374f6:	483f      	ldr	r0, [pc, #252]	; (80375f4 <drv_spiInitInstance+0x2a4>)
 80374f8:	4613      	mov	r3, r2
 80374fa:	00db      	lsls	r3, r3, #3
 80374fc:	1a9b      	subs	r3, r3, r2
 80374fe:	00db      	lsls	r3, r3, #3
 8037500:	4403      	add	r3, r0
 8037502:	332c      	adds	r3, #44	; 0x2c
 8037504:	681a      	ldr	r2, [r3, #0]
 8037506:	483d      	ldr	r0, [pc, #244]	; (80375fc <drv_spiInitInstance+0x2ac>)
 8037508:	2358      	movs	r3, #88	; 0x58
 803750a:	fb01 f303 	mul.w	r3, r1, r3
 803750e:	4403      	add	r3, r0
 8037510:	332c      	adds	r3, #44	; 0x2c
 8037512:	601a      	str	r2, [r3, #0]

        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 8037514:	7bbb      	ldrb	r3, [r7, #14]
 8037516:	2258      	movs	r2, #88	; 0x58
 8037518:	fb02 f303 	mul.w	r3, r2, r3
 803751c:	4a37      	ldr	r2, [pc, #220]	; (80375fc <drv_spiInitInstance+0x2ac>)
 803751e:	4413      	add	r3, r2
 8037520:	4618      	mov	r0, r3
 8037522:	f7f6 fc5b 	bl	802dddc <HAL_SPI_Init>
 8037526:	4603      	mov	r3, r0
 8037528:	2b00      	cmp	r3, #0
 803752a:	d159      	bne.n	80375e0 <drv_spiInitInstance+0x290>
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 803752c:	7bbb      	ldrb	r3, [r7, #14]
 803752e:	009b      	lsls	r3, r3, #2
 8037530:	4a33      	ldr	r2, [pc, #204]	; (8037600 <drv_spiInitInstance+0x2b0>)
 8037532:	4413      	add	r3, r2
 8037534:	4618      	mov	r0, r3
 8037536:	f006 fee5 	bl	803e304 <gos_mutexInit>
 803753a:	4603      	mov	r3, r0
        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 803753c:	2b55      	cmp	r3, #85	; 0x55
 803753e:	d14f      	bne.n	80375e0 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8037540:	7bba      	ldrb	r2, [r7, #14]
 8037542:	4613      	mov	r3, r2
 8037544:	005b      	lsls	r3, r3, #1
 8037546:	4413      	add	r3, r2
 8037548:	009b      	lsls	r3, r3, #2
 803754a:	4a2e      	ldr	r2, [pc, #184]	; (8037604 <drv_spiInitInstance+0x2b4>)
 803754c:	4413      	add	r3, r2
 803754e:	4618      	mov	r0, r3
 8037550:	f009 fcc6 	bl	8040ee0 <gos_triggerInit>
 8037554:	4603      	mov	r3, r0
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 8037556:	2b55      	cmp	r3, #85	; 0x55
 8037558:	d142      	bne.n	80375e0 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 803755a:	7bba      	ldrb	r2, [r7, #14]
 803755c:	4613      	mov	r3, r2
 803755e:	005b      	lsls	r3, r3, #1
 8037560:	4413      	add	r3, r2
 8037562:	009b      	lsls	r3, r3, #2
 8037564:	4a28      	ldr	r2, [pc, #160]	; (8037608 <drv_spiInitInstance+0x2b8>)
 8037566:	4413      	add	r3, r2
 8037568:	4618      	mov	r0, r3
 803756a:	f009 fcb9 	bl	8040ee0 <gos_triggerInit>
 803756e:	4603      	mov	r3, r0
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8037570:	2b55      	cmp	r3, #85	; 0x55
 8037572:	d135      	bne.n	80375e0 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 8037574:	7bba      	ldrb	r2, [r7, #14]
 8037576:	4613      	mov	r3, r2
 8037578:	005b      	lsls	r3, r3, #1
 803757a:	4413      	add	r3, r2
 803757c:	009b      	lsls	r3, r3, #2
 803757e:	4a23      	ldr	r2, [pc, #140]	; (803760c <drv_spiInitInstance+0x2bc>)
 8037580:	4413      	add	r3, r2
 8037582:	4618      	mov	r0, r3
 8037584:	f009 fcac 	bl	8040ee0 <gos_triggerInit>
 8037588:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 803758a:	2b55      	cmp	r3, #85	; 0x55
 803758c:	d128      	bne.n	80375e0 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 803758e:	7bba      	ldrb	r2, [r7, #14]
 8037590:	4613      	mov	r3, r2
 8037592:	005b      	lsls	r3, r3, #1
 8037594:	4413      	add	r3, r2
 8037596:	009b      	lsls	r3, r3, #2
 8037598:	4a1a      	ldr	r2, [pc, #104]	; (8037604 <drv_spiInitInstance+0x2b4>)
 803759a:	4413      	add	r3, r2
 803759c:	4618      	mov	r0, r3
 803759e:	f009 fcbb 	bl	8040f18 <gos_triggerReset>
 80375a2:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 80375a4:	2b55      	cmp	r3, #85	; 0x55
 80375a6:	d11b      	bne.n	80375e0 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 80375a8:	7bba      	ldrb	r2, [r7, #14]
 80375aa:	4613      	mov	r3, r2
 80375ac:	005b      	lsls	r3, r3, #1
 80375ae:	4413      	add	r3, r2
 80375b0:	009b      	lsls	r3, r3, #2
 80375b2:	4a15      	ldr	r2, [pc, #84]	; (8037608 <drv_spiInitInstance+0x2b8>)
 80375b4:	4413      	add	r3, r2
 80375b6:	4618      	mov	r0, r3
 80375b8:	f009 fcae 	bl	8040f18 <gos_triggerReset>
 80375bc:	4603      	mov	r3, r0
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 80375be:	2b55      	cmp	r3, #85	; 0x55
 80375c0:	d10e      	bne.n	80375e0 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS
 80375c2:	7bba      	ldrb	r2, [r7, #14]
 80375c4:	4613      	mov	r3, r2
 80375c6:	005b      	lsls	r3, r3, #1
 80375c8:	4413      	add	r3, r2
 80375ca:	009b      	lsls	r3, r3, #2
 80375cc:	4a0f      	ldr	r2, [pc, #60]	; (803760c <drv_spiInitInstance+0x2bc>)
 80375ce:	4413      	add	r3, r2
 80375d0:	4618      	mov	r0, r3
 80375d2:	f009 fca1 	bl	8040f18 <gos_triggerReset>
 80375d6:	4603      	mov	r3, r0
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 80375d8:	2b55      	cmp	r3, #85	; 0x55
 80375da:	d101      	bne.n	80375e0 <drv_spiInitInstance+0x290>
            )
        {
            spiInitResult = GOS_SUCCESS;
 80375dc:	2355      	movs	r3, #85	; 0x55
 80375de:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return spiInitResult;
 80375e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80375e2:	4618      	mov	r0, r3
 80375e4:	3710      	adds	r7, #16
 80375e6:	46bd      	mov	sp, r7
 80375e8:	bd80      	pop	{r7, pc}
 80375ea:	bf00      	nop
 80375ec:	2000187c 	.word	0x2000187c
 80375f0:	24924925 	.word	0x24924925
 80375f4:	08049380 	.word	0x08049380
 80375f8:	20001ae0 	.word	0x20001ae0
 80375fc:	2000656c 	.word	0x2000656c
 8037600:	200066cc 	.word	0x200066cc
 8037604:	200066dc 	.word	0x200066dc
 8037608:	2000670c 	.word	0x2000670c
 803760c:	2000673c 	.word	0x2000673c

08037610 <drv_spiTransmitBlocking>:
 */
gos_result_t drv_spiTransmitBlocking (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t transmitTmo
        )
{
 8037610:	b580      	push	{r7, lr}
 8037612:	b086      	sub	sp, #24
 8037614:	af00      	add	r7, sp, #0
 8037616:	60b9      	str	r1, [r7, #8]
 8037618:	607b      	str	r3, [r7, #4]
 803761a:	4603      	mov	r3, r0
 803761c:	73fb      	strb	r3, [r7, #15]
 803761e:	4613      	mov	r3, r2
 8037620:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 8037622:	23ae      	movs	r3, #174	; 0xae
 8037624:	75fb      	strb	r3, [r7, #23]


    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8037626:	7bfb      	ldrb	r3, [r7, #15]
 8037628:	009b      	lsls	r3, r3, #2
 803762a:	4a12      	ldr	r2, [pc, #72]	; (8037674 <drv_spiTransmitBlocking+0x64>)
 803762c:	4413      	add	r3, r2
 803762e:	6879      	ldr	r1, [r7, #4]
 8037630:	4618      	mov	r0, r3
 8037632:	f006 fe81 	bl	803e338 <gos_mutexLock>
 8037636:	4603      	mov	r3, r0
 8037638:	2b55      	cmp	r3, #85	; 0x55
 803763a:	d10f      	bne.n	803765c <drv_spiTransmitBlocking+0x4c>
    {
        if (HAL_SPI_Transmit(&hspis[instance], pData, size, transmitTmo) == HAL_OK)
 803763c:	7bfb      	ldrb	r3, [r7, #15]
 803763e:	2258      	movs	r2, #88	; 0x58
 8037640:	fb02 f303 	mul.w	r3, r2, r3
 8037644:	4a0c      	ldr	r2, [pc, #48]	; (8037678 <drv_spiTransmitBlocking+0x68>)
 8037646:	1898      	adds	r0, r3, r2
 8037648:	89ba      	ldrh	r2, [r7, #12]
 803764a:	6a3b      	ldr	r3, [r7, #32]
 803764c:	68b9      	ldr	r1, [r7, #8]
 803764e:	f7f6 fc29 	bl	802dea4 <HAL_SPI_Transmit>
 8037652:	4603      	mov	r3, r0
 8037654:	2b00      	cmp	r3, #0
 8037656:	d101      	bne.n	803765c <drv_spiTransmitBlocking+0x4c>
        {
            spiDriverTransmitResult = GOS_SUCCESS;
 8037658:	2355      	movs	r3, #85	; 0x55
 803765a:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 803765c:	7bfb      	ldrb	r3, [r7, #15]
 803765e:	009b      	lsls	r3, r3, #2
 8037660:	4a04      	ldr	r2, [pc, #16]	; (8037674 <drv_spiTransmitBlocking+0x64>)
 8037662:	4413      	add	r3, r2
 8037664:	4618      	mov	r0, r3
 8037666:	f006 ff6d 	bl	803e544 <gos_mutexUnlock>

    return spiDriverTransmitResult;
 803766a:	7dfb      	ldrb	r3, [r7, #23]
}
 803766c:	4618      	mov	r0, r3
 803766e:	3718      	adds	r7, #24
 8037670:	46bd      	mov	sp, r7
 8037672:	bd80      	pop	{r7, pc}
 8037674:	200066cc 	.word	0x200066cc
 8037678:	2000656c 	.word	0x2000656c

0803767c <drv_spiTransmitIT>:
 */
gos_result_t drv_spiTransmitIT (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 803767c:	b580      	push	{r7, lr}
 803767e:	b086      	sub	sp, #24
 8037680:	af00      	add	r7, sp, #0
 8037682:	60b9      	str	r1, [r7, #8]
 8037684:	607b      	str	r3, [r7, #4]
 8037686:	4603      	mov	r3, r0
 8037688:	73fb      	strb	r3, [r7, #15]
 803768a:	4613      	mov	r3, r2
 803768c:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 803768e:	23ae      	movs	r3, #174	; 0xae
 8037690:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8037692:	7bfb      	ldrb	r3, [r7, #15]
 8037694:	009b      	lsls	r3, r3, #2
 8037696:	4a23      	ldr	r2, [pc, #140]	; (8037724 <drv_spiTransmitIT+0xa8>)
 8037698:	4413      	add	r3, r2
 803769a:	6879      	ldr	r1, [r7, #4]
 803769c:	4618      	mov	r0, r3
 803769e:	f006 fe4b 	bl	803e338 <gos_mutexLock>
 80376a2:	4603      	mov	r3, r0
 80376a4:	2b55      	cmp	r3, #85	; 0x55
 80376a6:	d131      	bne.n	803770c <drv_spiTransmitIT+0x90>
    {
        if (HAL_SPI_Transmit_IT(&hspis[instance], pData, size) == HAL_OK)
 80376a8:	7bfb      	ldrb	r3, [r7, #15]
 80376aa:	2258      	movs	r2, #88	; 0x58
 80376ac:	fb02 f303 	mul.w	r3, r2, r3
 80376b0:	4a1d      	ldr	r2, [pc, #116]	; (8037728 <drv_spiTransmitIT+0xac>)
 80376b2:	4413      	add	r3, r2
 80376b4:	89ba      	ldrh	r2, [r7, #12]
 80376b6:	68b9      	ldr	r1, [r7, #8]
 80376b8:	4618      	mov	r0, r3
 80376ba:	f7f6 fd27 	bl	802e10c <HAL_SPI_Transmit_IT>
 80376be:	4603      	mov	r3, r0
 80376c0:	2b00      	cmp	r3, #0
 80376c2:	d123      	bne.n	803770c <drv_spiTransmitIT+0x90>
        {
            if (triggerTmo > 0u)
 80376c4:	6a3b      	ldr	r3, [r7, #32]
 80376c6:	2b00      	cmp	r3, #0
 80376c8:	d01e      	beq.n	8037708 <drv_spiTransmitIT+0x8c>
            {
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80376ca:	7bfa      	ldrb	r2, [r7, #15]
 80376cc:	4613      	mov	r3, r2
 80376ce:	005b      	lsls	r3, r3, #1
 80376d0:	4413      	add	r3, r2
 80376d2:	009b      	lsls	r3, r3, #2
 80376d4:	4a15      	ldr	r2, [pc, #84]	; (803772c <drv_spiTransmitIT+0xb0>)
 80376d6:	4413      	add	r3, r2
 80376d8:	6a3a      	ldr	r2, [r7, #32]
 80376da:	2101      	movs	r1, #1
 80376dc:	4618      	mov	r0, r3
 80376de:	f009 fc73 	bl	8040fc8 <gos_triggerWait>
 80376e2:	4603      	mov	r3, r0
 80376e4:	2b55      	cmp	r3, #85	; 0x55
 80376e6:	d111      	bne.n	803770c <drv_spiTransmitIT+0x90>
                    gos_triggerReset(&spiTxReadyTriggers[instance])                == GOS_SUCCESS)
 80376e8:	7bfa      	ldrb	r2, [r7, #15]
 80376ea:	4613      	mov	r3, r2
 80376ec:	005b      	lsls	r3, r3, #1
 80376ee:	4413      	add	r3, r2
 80376f0:	009b      	lsls	r3, r3, #2
 80376f2:	4a0e      	ldr	r2, [pc, #56]	; (803772c <drv_spiTransmitIT+0xb0>)
 80376f4:	4413      	add	r3, r2
 80376f6:	4618      	mov	r0, r3
 80376f8:	f009 fc0e 	bl	8040f18 <gos_triggerReset>
 80376fc:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80376fe:	2b55      	cmp	r3, #85	; 0x55
 8037700:	d104      	bne.n	803770c <drv_spiTransmitIT+0x90>
                {
                    spiDriverTransmitResult = GOS_SUCCESS;
 8037702:	2355      	movs	r3, #85	; 0x55
 8037704:	75fb      	strb	r3, [r7, #23]
 8037706:	e001      	b.n	803770c <drv_spiTransmitIT+0x90>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverTransmitResult = GOS_SUCCESS;
 8037708:	2355      	movs	r3, #85	; 0x55
 803770a:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 803770c:	7bfb      	ldrb	r3, [r7, #15]
 803770e:	009b      	lsls	r3, r3, #2
 8037710:	4a04      	ldr	r2, [pc, #16]	; (8037724 <drv_spiTransmitIT+0xa8>)
 8037712:	4413      	add	r3, r2
 8037714:	4618      	mov	r0, r3
 8037716:	f006 ff15 	bl	803e544 <gos_mutexUnlock>

    return spiDriverTransmitResult;
 803771a:	7dfb      	ldrb	r3, [r7, #23]
}
 803771c:	4618      	mov	r0, r3
 803771e:	3718      	adds	r7, #24
 8037720:	46bd      	mov	sp, r7
 8037722:	bd80      	pop	{r7, pc}
 8037724:	200066cc 	.word	0x200066cc
 8037728:	2000656c 	.word	0x2000656c
 803772c:	2000670c 	.word	0x2000670c

08037730 <drv_spiTransmitDMA>:
 */
gos_result_t drv_spiTransmitDMA (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 8037730:	b580      	push	{r7, lr}
 8037732:	b086      	sub	sp, #24
 8037734:	af00      	add	r7, sp, #0
 8037736:	60b9      	str	r1, [r7, #8]
 8037738:	607b      	str	r3, [r7, #4]
 803773a:	4603      	mov	r3, r0
 803773c:	73fb      	strb	r3, [r7, #15]
 803773e:	4613      	mov	r3, r2
 8037740:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 8037742:	23ae      	movs	r3, #174	; 0xae
 8037744:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8037746:	7bfb      	ldrb	r3, [r7, #15]
 8037748:	009b      	lsls	r3, r3, #2
 803774a:	4a23      	ldr	r2, [pc, #140]	; (80377d8 <drv_spiTransmitDMA+0xa8>)
 803774c:	4413      	add	r3, r2
 803774e:	6879      	ldr	r1, [r7, #4]
 8037750:	4618      	mov	r0, r3
 8037752:	f006 fdf1 	bl	803e338 <gos_mutexLock>
 8037756:	4603      	mov	r3, r0
 8037758:	2b55      	cmp	r3, #85	; 0x55
 803775a:	d131      	bne.n	80377c0 <drv_spiTransmitDMA+0x90>
    {
        if (HAL_SPI_Transmit_DMA(&hspis[instance], pData, size) == HAL_OK)
 803775c:	7bfb      	ldrb	r3, [r7, #15]
 803775e:	2258      	movs	r2, #88	; 0x58
 8037760:	fb02 f303 	mul.w	r3, r2, r3
 8037764:	4a1d      	ldr	r2, [pc, #116]	; (80377dc <drv_spiTransmitDMA+0xac>)
 8037766:	4413      	add	r3, r2
 8037768:	89ba      	ldrh	r2, [r7, #12]
 803776a:	68b9      	ldr	r1, [r7, #8]
 803776c:	4618      	mov	r0, r3
 803776e:	f7f6 fde3 	bl	802e338 <HAL_SPI_Transmit_DMA>
 8037772:	4603      	mov	r3, r0
 8037774:	2b00      	cmp	r3, #0
 8037776:	d123      	bne.n	80377c0 <drv_spiTransmitDMA+0x90>
        {
            if (triggerTmo > 0u)
 8037778:	6a3b      	ldr	r3, [r7, #32]
 803777a:	2b00      	cmp	r3, #0
 803777c:	d01e      	beq.n	80377bc <drv_spiTransmitDMA+0x8c>
            {
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 803777e:	7bfa      	ldrb	r2, [r7, #15]
 8037780:	4613      	mov	r3, r2
 8037782:	005b      	lsls	r3, r3, #1
 8037784:	4413      	add	r3, r2
 8037786:	009b      	lsls	r3, r3, #2
 8037788:	4a15      	ldr	r2, [pc, #84]	; (80377e0 <drv_spiTransmitDMA+0xb0>)
 803778a:	4413      	add	r3, r2
 803778c:	6a3a      	ldr	r2, [r7, #32]
 803778e:	2101      	movs	r1, #1
 8037790:	4618      	mov	r0, r3
 8037792:	f009 fc19 	bl	8040fc8 <gos_triggerWait>
 8037796:	4603      	mov	r3, r0
 8037798:	2b55      	cmp	r3, #85	; 0x55
 803779a:	d111      	bne.n	80377c0 <drv_spiTransmitDMA+0x90>
                    gos_triggerReset(&spiTxReadyTriggers[instance])                == GOS_SUCCESS)
 803779c:	7bfa      	ldrb	r2, [r7, #15]
 803779e:	4613      	mov	r3, r2
 80377a0:	005b      	lsls	r3, r3, #1
 80377a2:	4413      	add	r3, r2
 80377a4:	009b      	lsls	r3, r3, #2
 80377a6:	4a0e      	ldr	r2, [pc, #56]	; (80377e0 <drv_spiTransmitDMA+0xb0>)
 80377a8:	4413      	add	r3, r2
 80377aa:	4618      	mov	r0, r3
 80377ac:	f009 fbb4 	bl	8040f18 <gos_triggerReset>
 80377b0:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80377b2:	2b55      	cmp	r3, #85	; 0x55
 80377b4:	d104      	bne.n	80377c0 <drv_spiTransmitDMA+0x90>
                {
                    spiDriverTransmitResult = GOS_SUCCESS;
 80377b6:	2355      	movs	r3, #85	; 0x55
 80377b8:	75fb      	strb	r3, [r7, #23]
 80377ba:	e001      	b.n	80377c0 <drv_spiTransmitDMA+0x90>
                }
            }
            else
            {
                // Trigger is not used.
                spiDriverTransmitResult = GOS_SUCCESS;
 80377bc:	2355      	movs	r3, #85	; 0x55
 80377be:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 80377c0:	7bfb      	ldrb	r3, [r7, #15]
 80377c2:	009b      	lsls	r3, r3, #2
 80377c4:	4a04      	ldr	r2, [pc, #16]	; (80377d8 <drv_spiTransmitDMA+0xa8>)
 80377c6:	4413      	add	r3, r2
 80377c8:	4618      	mov	r0, r3
 80377ca:	f006 febb 	bl	803e544 <gos_mutexUnlock>

    return spiDriverTransmitResult;
 80377ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80377d0:	4618      	mov	r0, r3
 80377d2:	3718      	adds	r7, #24
 80377d4:	46bd      	mov	sp, r7
 80377d6:	bd80      	pop	{r7, pc}
 80377d8:	200066cc 	.word	0x200066cc
 80377dc:	2000656c 	.word	0x2000656c
 80377e0:	2000670c 	.word	0x2000670c

080377e4 <drv_spiTransmitReceiveIT>:
 */
gos_result_t drv_spiTransmitReceiveIT (
        drv_spiPeriphInstance_t instance, u8_t* pTxData,  u8_t* pRxData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 80377e4:	b580      	push	{r7, lr}
 80377e6:	b086      	sub	sp, #24
 80377e8:	af00      	add	r7, sp, #0
 80377ea:	60b9      	str	r1, [r7, #8]
 80377ec:	607a      	str	r2, [r7, #4]
 80377ee:	461a      	mov	r2, r3
 80377f0:	4603      	mov	r3, r0
 80377f2:	73fb      	strb	r3, [r7, #15]
 80377f4:	4613      	mov	r3, r2
 80377f6:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitReceiveResult = GOS_ERROR;
 80377f8:	23ae      	movs	r3, #174	; 0xae
 80377fa:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 80377fc:	7bfb      	ldrb	r3, [r7, #15]
 80377fe:	009b      	lsls	r3, r3, #2
 8037800:	4a23      	ldr	r2, [pc, #140]	; (8037890 <drv_spiTransmitReceiveIT+0xac>)
 8037802:	4413      	add	r3, r2
 8037804:	6a39      	ldr	r1, [r7, #32]
 8037806:	4618      	mov	r0, r3
 8037808:	f006 fd96 	bl	803e338 <gos_mutexLock>
 803780c:	4603      	mov	r3, r0
 803780e:	2b55      	cmp	r3, #85	; 0x55
 8037810:	d131      	bne.n	8037876 <drv_spiTransmitReceiveIT+0x92>
    {
        if (HAL_SPI_TransmitReceive_IT(&hspis[instance], pTxData, pRxData, size) == HAL_OK)
 8037812:	7bfb      	ldrb	r3, [r7, #15]
 8037814:	2258      	movs	r2, #88	; 0x58
 8037816:	fb02 f303 	mul.w	r3, r2, r3
 803781a:	4a1e      	ldr	r2, [pc, #120]	; (8037894 <drv_spiTransmitReceiveIT+0xb0>)
 803781c:	1898      	adds	r0, r3, r2
 803781e:	89bb      	ldrh	r3, [r7, #12]
 8037820:	687a      	ldr	r2, [r7, #4]
 8037822:	68b9      	ldr	r1, [r7, #8]
 8037824:	f7f6 fcf4 	bl	802e210 <HAL_SPI_TransmitReceive_IT>
 8037828:	4603      	mov	r3, r0
 803782a:	2b00      	cmp	r3, #0
 803782c:	d123      	bne.n	8037876 <drv_spiTransmitReceiveIT+0x92>
        {
            if (triggerTmo > 0u)
 803782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8037830:	2b00      	cmp	r3, #0
 8037832:	d01e      	beq.n	8037872 <drv_spiTransmitReceiveIT+0x8e>
            {
                if (gos_triggerWait (&spiTxRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8037834:	7bfa      	ldrb	r2, [r7, #15]
 8037836:	4613      	mov	r3, r2
 8037838:	005b      	lsls	r3, r3, #1
 803783a:	4413      	add	r3, r2
 803783c:	009b      	lsls	r3, r3, #2
 803783e:	4a16      	ldr	r2, [pc, #88]	; (8037898 <drv_spiTransmitReceiveIT+0xb4>)
 8037840:	4413      	add	r3, r2
 8037842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8037844:	2101      	movs	r1, #1
 8037846:	4618      	mov	r0, r3
 8037848:	f009 fbbe 	bl	8040fc8 <gos_triggerWait>
 803784c:	4603      	mov	r3, r0
 803784e:	2b55      	cmp	r3, #85	; 0x55
 8037850:	d111      	bne.n	8037876 <drv_spiTransmitReceiveIT+0x92>
                    gos_triggerReset(&spiTxRxReadyTriggers[instance])                == GOS_SUCCESS)
 8037852:	7bfa      	ldrb	r2, [r7, #15]
 8037854:	4613      	mov	r3, r2
 8037856:	005b      	lsls	r3, r3, #1
 8037858:	4413      	add	r3, r2
 803785a:	009b      	lsls	r3, r3, #2
 803785c:	4a0e      	ldr	r2, [pc, #56]	; (8037898 <drv_spiTransmitReceiveIT+0xb4>)
 803785e:	4413      	add	r3, r2
 8037860:	4618      	mov	r0, r3
 8037862:	f009 fb59 	bl	8040f18 <gos_triggerReset>
 8037866:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiTxRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8037868:	2b55      	cmp	r3, #85	; 0x55
 803786a:	d104      	bne.n	8037876 <drv_spiTransmitReceiveIT+0x92>
                {
                    spiDriverTransmitReceiveResult = GOS_SUCCESS;
 803786c:	2355      	movs	r3, #85	; 0x55
 803786e:	75fb      	strb	r3, [r7, #23]
 8037870:	e001      	b.n	8037876 <drv_spiTransmitReceiveIT+0x92>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverTransmitReceiveResult = GOS_SUCCESS;
 8037872:	2355      	movs	r3, #85	; 0x55
 8037874:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 8037876:	7bfb      	ldrb	r3, [r7, #15]
 8037878:	009b      	lsls	r3, r3, #2
 803787a:	4a05      	ldr	r2, [pc, #20]	; (8037890 <drv_spiTransmitReceiveIT+0xac>)
 803787c:	4413      	add	r3, r2
 803787e:	4618      	mov	r0, r3
 8037880:	f006 fe60 	bl	803e544 <gos_mutexUnlock>

    return spiDriverTransmitReceiveResult;
 8037884:	7dfb      	ldrb	r3, [r7, #23]
}
 8037886:	4618      	mov	r0, r3
 8037888:	3718      	adds	r7, #24
 803788a:	46bd      	mov	sp, r7
 803788c:	bd80      	pop	{r7, pc}
 803788e:	bf00      	nop
 8037890:	200066cc 	.word	0x200066cc
 8037894:	2000656c 	.word	0x2000656c
 8037898:	2000673c 	.word	0x2000673c

0803789c <HAL_SPI_TxCpltCallback>:

/*
 * Function: HAL_SPI_TxCpltCallback
 */
void_t HAL_SPI_TxCpltCallback (SPI_HandleTypeDef* hspi)
{
 803789c:	b580      	push	{r7, lr}
 803789e:	b082      	sub	sp, #8
 80378a0:	af00      	add	r7, sp, #0
 80378a2:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 80378a4:	687b      	ldr	r3, [r7, #4]
 80378a6:	681a      	ldr	r2, [r3, #0]
 80378a8:	4b0f      	ldr	r3, [pc, #60]	; (80378e8 <HAL_SPI_TxCpltCallback+0x4c>)
 80378aa:	681b      	ldr	r3, [r3, #0]
 80378ac:	429a      	cmp	r2, r3
 80378ae:	d103      	bne.n	80378b8 <HAL_SPI_TxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_1]);
 80378b0:	480e      	ldr	r0, [pc, #56]	; (80378ec <HAL_SPI_TxCpltCallback+0x50>)
 80378b2:	f009 fc39 	bl	8041128 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 80378b6:	e012      	b.n	80378de <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 80378b8:	687b      	ldr	r3, [r7, #4]
 80378ba:	681a      	ldr	r2, [r3, #0]
 80378bc:	4b0a      	ldr	r3, [pc, #40]	; (80378e8 <HAL_SPI_TxCpltCallback+0x4c>)
 80378be:	685b      	ldr	r3, [r3, #4]
 80378c0:	429a      	cmp	r2, r3
 80378c2:	d103      	bne.n	80378cc <HAL_SPI_TxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_2]);
 80378c4:	480a      	ldr	r0, [pc, #40]	; (80378f0 <HAL_SPI_TxCpltCallback+0x54>)
 80378c6:	f009 fc2f 	bl	8041128 <gos_triggerIncrement>
}
 80378ca:	e008      	b.n	80378de <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 80378cc:	687b      	ldr	r3, [r7, #4]
 80378ce:	681a      	ldr	r2, [r3, #0]
 80378d0:	4b05      	ldr	r3, [pc, #20]	; (80378e8 <HAL_SPI_TxCpltCallback+0x4c>)
 80378d2:	689b      	ldr	r3, [r3, #8]
 80378d4:	429a      	cmp	r2, r3
 80378d6:	d102      	bne.n	80378de <HAL_SPI_TxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_3]);
 80378d8:	4806      	ldr	r0, [pc, #24]	; (80378f4 <HAL_SPI_TxCpltCallback+0x58>)
 80378da:	f009 fc25 	bl	8041128 <gos_triggerIncrement>
}
 80378de:	bf00      	nop
 80378e0:	3708      	adds	r7, #8
 80378e2:	46bd      	mov	sp, r7
 80378e4:	bd80      	pop	{r7, pc}
 80378e6:	bf00      	nop
 80378e8:	20001ae0 	.word	0x20001ae0
 80378ec:	2000670c 	.word	0x2000670c
 80378f0:	20006718 	.word	0x20006718
 80378f4:	20006724 	.word	0x20006724

080378f8 <HAL_SPI_RxCpltCallback>:

/*
 * Function: HAL_SPI_RxCpltCallback
 */
void_t HAL_SPI_RxCpltCallback (SPI_HandleTypeDef* hspi)
{
 80378f8:	b580      	push	{r7, lr}
 80378fa:	b082      	sub	sp, #8
 80378fc:	af00      	add	r7, sp, #0
 80378fe:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 8037900:	687b      	ldr	r3, [r7, #4]
 8037902:	681a      	ldr	r2, [r3, #0]
 8037904:	4b0f      	ldr	r3, [pc, #60]	; (8037944 <HAL_SPI_RxCpltCallback+0x4c>)
 8037906:	681b      	ldr	r3, [r3, #0]
 8037908:	429a      	cmp	r2, r3
 803790a:	d103      	bne.n	8037914 <HAL_SPI_RxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 803790c:	480e      	ldr	r0, [pc, #56]	; (8037948 <HAL_SPI_RxCpltCallback+0x50>)
 803790e:	f009 fc0b 	bl	8041128 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8037912:	e012      	b.n	803793a <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 8037914:	687b      	ldr	r3, [r7, #4]
 8037916:	681a      	ldr	r2, [r3, #0]
 8037918:	4b0a      	ldr	r3, [pc, #40]	; (8037944 <HAL_SPI_RxCpltCallback+0x4c>)
 803791a:	685b      	ldr	r3, [r3, #4]
 803791c:	429a      	cmp	r2, r3
 803791e:	d103      	bne.n	8037928 <HAL_SPI_RxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 8037920:	480a      	ldr	r0, [pc, #40]	; (803794c <HAL_SPI_RxCpltCallback+0x54>)
 8037922:	f009 fc01 	bl	8041128 <gos_triggerIncrement>
}
 8037926:	e008      	b.n	803793a <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 8037928:	687b      	ldr	r3, [r7, #4]
 803792a:	681a      	ldr	r2, [r3, #0]
 803792c:	4b05      	ldr	r3, [pc, #20]	; (8037944 <HAL_SPI_RxCpltCallback+0x4c>)
 803792e:	689b      	ldr	r3, [r3, #8]
 8037930:	429a      	cmp	r2, r3
 8037932:	d102      	bne.n	803793a <HAL_SPI_RxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 8037934:	4806      	ldr	r0, [pc, #24]	; (8037950 <HAL_SPI_RxCpltCallback+0x58>)
 8037936:	f009 fbf7 	bl	8041128 <gos_triggerIncrement>
}
 803793a:	bf00      	nop
 803793c:	3708      	adds	r7, #8
 803793e:	46bd      	mov	sp, r7
 8037940:	bd80      	pop	{r7, pc}
 8037942:	bf00      	nop
 8037944:	20001ae0 	.word	0x20001ae0
 8037948:	200066dc 	.word	0x200066dc
 803794c:	200066e8 	.word	0x200066e8
 8037950:	200066f4 	.word	0x200066f4

08037954 <HAL_SPI_TxRxCpltCallback>:

/*
 * Function: HAL_SPI_TxRxCpltCallback
 */
void_t HAL_SPI_TxRxCpltCallback (SPI_HandleTypeDef *hspi)
{
 8037954:	b580      	push	{r7, lr}
 8037956:	b082      	sub	sp, #8
 8037958:	af00      	add	r7, sp, #0
 803795a:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 803795c:	687b      	ldr	r3, [r7, #4]
 803795e:	681a      	ldr	r2, [r3, #0]
 8037960:	4b0f      	ldr	r3, [pc, #60]	; (80379a0 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8037962:	681b      	ldr	r3, [r3, #0]
 8037964:	429a      	cmp	r2, r3
 8037966:	d103      	bne.n	8037970 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 8037968:	480e      	ldr	r0, [pc, #56]	; (80379a4 <HAL_SPI_TxRxCpltCallback+0x50>)
 803796a:	f009 fbdd 	bl	8041128 <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 803796e:	e012      	b.n	8037996 <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 8037970:	687b      	ldr	r3, [r7, #4]
 8037972:	681a      	ldr	r2, [r3, #0]
 8037974:	4b0a      	ldr	r3, [pc, #40]	; (80379a0 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8037976:	685b      	ldr	r3, [r3, #4]
 8037978:	429a      	cmp	r2, r3
 803797a:	d103      	bne.n	8037984 <HAL_SPI_TxRxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 803797c:	480a      	ldr	r0, [pc, #40]	; (80379a8 <HAL_SPI_TxRxCpltCallback+0x54>)
 803797e:	f009 fbd3 	bl	8041128 <gos_triggerIncrement>
}
 8037982:	e008      	b.n	8037996 <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 8037984:	687b      	ldr	r3, [r7, #4]
 8037986:	681a      	ldr	r2, [r3, #0]
 8037988:	4b05      	ldr	r3, [pc, #20]	; (80379a0 <HAL_SPI_TxRxCpltCallback+0x4c>)
 803798a:	689b      	ldr	r3, [r3, #8]
 803798c:	429a      	cmp	r2, r3
 803798e:	d102      	bne.n	8037996 <HAL_SPI_TxRxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 8037990:	4806      	ldr	r0, [pc, #24]	; (80379ac <HAL_SPI_TxRxCpltCallback+0x58>)
 8037992:	f009 fbc9 	bl	8041128 <gos_triggerIncrement>
}
 8037996:	bf00      	nop
 8037998:	3708      	adds	r7, #8
 803799a:	46bd      	mov	sp, r7
 803799c:	bd80      	pop	{r7, pc}
 803799e:	bf00      	nop
 80379a0:	20001ae0 	.word	0x20001ae0
 80379a4:	2000673c 	.word	0x2000673c
 80379a8:	20006748 	.word	0x20006748
 80379ac:	20006754 	.word	0x20006754

080379b0 <SPI1_IRQHandler>:

/*
 * Function: SPI1_IRQHandler
 */
void_t SPI1_IRQHandler (void_t)
{
 80379b0:	b580      	push	{r7, lr}
 80379b2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80379b4:	4b16      	ldr	r3, [pc, #88]	; (8037a10 <SPI1_IRQHandler+0x60>)
 80379b6:	781b      	ldrb	r3, [r3, #0]
 80379b8:	2b00      	cmp	r3, #0
 80379ba:	d105      	bne.n	80379c8 <SPI1_IRQHandler+0x18>
 80379bc:	4b15      	ldr	r3, [pc, #84]	; (8037a14 <SPI1_IRQHandler+0x64>)
 80379be:	781b      	ldrb	r3, [r3, #0]
 80379c0:	3301      	adds	r3, #1
 80379c2:	b2da      	uxtb	r2, r3
 80379c4:	4b13      	ldr	r3, [pc, #76]	; (8037a14 <SPI1_IRQHandler+0x64>)
 80379c6:	701a      	strb	r2, [r3, #0]
 80379c8:	4b11      	ldr	r3, [pc, #68]	; (8037a10 <SPI1_IRQHandler+0x60>)
 80379ca:	781b      	ldrb	r3, [r3, #0]
 80379cc:	3301      	adds	r3, #1
 80379ce:	b2da      	uxtb	r2, r3
 80379d0:	4b0f      	ldr	r3, [pc, #60]	; (8037a10 <SPI1_IRQHandler+0x60>)
 80379d2:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_1]);
 80379d4:	4810      	ldr	r0, [pc, #64]	; (8037a18 <SPI1_IRQHandler+0x68>)
 80379d6:	f7f6 fd5d 	bl	802e494 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 80379da:	4b0d      	ldr	r3, [pc, #52]	; (8037a10 <SPI1_IRQHandler+0x60>)
 80379dc:	781b      	ldrb	r3, [r3, #0]
 80379de:	2b00      	cmp	r3, #0
 80379e0:	d005      	beq.n	80379ee <SPI1_IRQHandler+0x3e>
 80379e2:	4b0b      	ldr	r3, [pc, #44]	; (8037a10 <SPI1_IRQHandler+0x60>)
 80379e4:	781b      	ldrb	r3, [r3, #0]
 80379e6:	3b01      	subs	r3, #1
 80379e8:	b2da      	uxtb	r2, r3
 80379ea:	4b09      	ldr	r3, [pc, #36]	; (8037a10 <SPI1_IRQHandler+0x60>)
 80379ec:	701a      	strb	r2, [r3, #0]
 80379ee:	4b08      	ldr	r3, [pc, #32]	; (8037a10 <SPI1_IRQHandler+0x60>)
 80379f0:	781b      	ldrb	r3, [r3, #0]
 80379f2:	2b00      	cmp	r3, #0
 80379f4:	d109      	bne.n	8037a0a <SPI1_IRQHandler+0x5a>
 80379f6:	4b07      	ldr	r3, [pc, #28]	; (8037a14 <SPI1_IRQHandler+0x64>)
 80379f8:	781b      	ldrb	r3, [r3, #0]
 80379fa:	2b00      	cmp	r3, #0
 80379fc:	d005      	beq.n	8037a0a <SPI1_IRQHandler+0x5a>
 80379fe:	4b05      	ldr	r3, [pc, #20]	; (8037a14 <SPI1_IRQHandler+0x64>)
 8037a00:	781b      	ldrb	r3, [r3, #0]
 8037a02:	3b01      	subs	r3, #1
 8037a04:	b2da      	uxtb	r2, r3
 8037a06:	4b03      	ldr	r3, [pc, #12]	; (8037a14 <SPI1_IRQHandler+0x64>)
 8037a08:	701a      	strb	r2, [r3, #0]
}
 8037a0a:	bf00      	nop
 8037a0c:	bd80      	pop	{r7, pc}
 8037a0e:	bf00      	nop
 8037a10:	20007446 	.word	0x20007446
 8037a14:	20007445 	.word	0x20007445
 8037a18:	2000656c 	.word	0x2000656c

08037a1c <SPI2_IRQHandler>:

/*
 * Function: SPI2_IRQHandler
 */
void_t SPI2_IRQHandler (void_t)
{
 8037a1c:	b580      	push	{r7, lr}
 8037a1e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8037a20:	4b16      	ldr	r3, [pc, #88]	; (8037a7c <SPI2_IRQHandler+0x60>)
 8037a22:	781b      	ldrb	r3, [r3, #0]
 8037a24:	2b00      	cmp	r3, #0
 8037a26:	d105      	bne.n	8037a34 <SPI2_IRQHandler+0x18>
 8037a28:	4b15      	ldr	r3, [pc, #84]	; (8037a80 <SPI2_IRQHandler+0x64>)
 8037a2a:	781b      	ldrb	r3, [r3, #0]
 8037a2c:	3301      	adds	r3, #1
 8037a2e:	b2da      	uxtb	r2, r3
 8037a30:	4b13      	ldr	r3, [pc, #76]	; (8037a80 <SPI2_IRQHandler+0x64>)
 8037a32:	701a      	strb	r2, [r3, #0]
 8037a34:	4b11      	ldr	r3, [pc, #68]	; (8037a7c <SPI2_IRQHandler+0x60>)
 8037a36:	781b      	ldrb	r3, [r3, #0]
 8037a38:	3301      	adds	r3, #1
 8037a3a:	b2da      	uxtb	r2, r3
 8037a3c:	4b0f      	ldr	r3, [pc, #60]	; (8037a7c <SPI2_IRQHandler+0x60>)
 8037a3e:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_2]);
 8037a40:	4810      	ldr	r0, [pc, #64]	; (8037a84 <SPI2_IRQHandler+0x68>)
 8037a42:	f7f6 fd27 	bl	802e494 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 8037a46:	4b0d      	ldr	r3, [pc, #52]	; (8037a7c <SPI2_IRQHandler+0x60>)
 8037a48:	781b      	ldrb	r3, [r3, #0]
 8037a4a:	2b00      	cmp	r3, #0
 8037a4c:	d005      	beq.n	8037a5a <SPI2_IRQHandler+0x3e>
 8037a4e:	4b0b      	ldr	r3, [pc, #44]	; (8037a7c <SPI2_IRQHandler+0x60>)
 8037a50:	781b      	ldrb	r3, [r3, #0]
 8037a52:	3b01      	subs	r3, #1
 8037a54:	b2da      	uxtb	r2, r3
 8037a56:	4b09      	ldr	r3, [pc, #36]	; (8037a7c <SPI2_IRQHandler+0x60>)
 8037a58:	701a      	strb	r2, [r3, #0]
 8037a5a:	4b08      	ldr	r3, [pc, #32]	; (8037a7c <SPI2_IRQHandler+0x60>)
 8037a5c:	781b      	ldrb	r3, [r3, #0]
 8037a5e:	2b00      	cmp	r3, #0
 8037a60:	d109      	bne.n	8037a76 <SPI2_IRQHandler+0x5a>
 8037a62:	4b07      	ldr	r3, [pc, #28]	; (8037a80 <SPI2_IRQHandler+0x64>)
 8037a64:	781b      	ldrb	r3, [r3, #0]
 8037a66:	2b00      	cmp	r3, #0
 8037a68:	d005      	beq.n	8037a76 <SPI2_IRQHandler+0x5a>
 8037a6a:	4b05      	ldr	r3, [pc, #20]	; (8037a80 <SPI2_IRQHandler+0x64>)
 8037a6c:	781b      	ldrb	r3, [r3, #0]
 8037a6e:	3b01      	subs	r3, #1
 8037a70:	b2da      	uxtb	r2, r3
 8037a72:	4b03      	ldr	r3, [pc, #12]	; (8037a80 <SPI2_IRQHandler+0x64>)
 8037a74:	701a      	strb	r2, [r3, #0]
}
 8037a76:	bf00      	nop
 8037a78:	bd80      	pop	{r7, pc}
 8037a7a:	bf00      	nop
 8037a7c:	20007446 	.word	0x20007446
 8037a80:	20007445 	.word	0x20007445
 8037a84:	200065c4 	.word	0x200065c4

08037a88 <SPI3_IRQHandler>:

void_t SPI3_IRQHandler (void_t)
{
 8037a88:	b580      	push	{r7, lr}
 8037a8a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8037a8c:	4b16      	ldr	r3, [pc, #88]	; (8037ae8 <SPI3_IRQHandler+0x60>)
 8037a8e:	781b      	ldrb	r3, [r3, #0]
 8037a90:	2b00      	cmp	r3, #0
 8037a92:	d105      	bne.n	8037aa0 <SPI3_IRQHandler+0x18>
 8037a94:	4b15      	ldr	r3, [pc, #84]	; (8037aec <SPI3_IRQHandler+0x64>)
 8037a96:	781b      	ldrb	r3, [r3, #0]
 8037a98:	3301      	adds	r3, #1
 8037a9a:	b2da      	uxtb	r2, r3
 8037a9c:	4b13      	ldr	r3, [pc, #76]	; (8037aec <SPI3_IRQHandler+0x64>)
 8037a9e:	701a      	strb	r2, [r3, #0]
 8037aa0:	4b11      	ldr	r3, [pc, #68]	; (8037ae8 <SPI3_IRQHandler+0x60>)
 8037aa2:	781b      	ldrb	r3, [r3, #0]
 8037aa4:	3301      	adds	r3, #1
 8037aa6:	b2da      	uxtb	r2, r3
 8037aa8:	4b0f      	ldr	r3, [pc, #60]	; (8037ae8 <SPI3_IRQHandler+0x60>)
 8037aaa:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_3]);
 8037aac:	4810      	ldr	r0, [pc, #64]	; (8037af0 <SPI3_IRQHandler+0x68>)
 8037aae:	f7f6 fcf1 	bl	802e494 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 8037ab2:	4b0d      	ldr	r3, [pc, #52]	; (8037ae8 <SPI3_IRQHandler+0x60>)
 8037ab4:	781b      	ldrb	r3, [r3, #0]
 8037ab6:	2b00      	cmp	r3, #0
 8037ab8:	d005      	beq.n	8037ac6 <SPI3_IRQHandler+0x3e>
 8037aba:	4b0b      	ldr	r3, [pc, #44]	; (8037ae8 <SPI3_IRQHandler+0x60>)
 8037abc:	781b      	ldrb	r3, [r3, #0]
 8037abe:	3b01      	subs	r3, #1
 8037ac0:	b2da      	uxtb	r2, r3
 8037ac2:	4b09      	ldr	r3, [pc, #36]	; (8037ae8 <SPI3_IRQHandler+0x60>)
 8037ac4:	701a      	strb	r2, [r3, #0]
 8037ac6:	4b08      	ldr	r3, [pc, #32]	; (8037ae8 <SPI3_IRQHandler+0x60>)
 8037ac8:	781b      	ldrb	r3, [r3, #0]
 8037aca:	2b00      	cmp	r3, #0
 8037acc:	d109      	bne.n	8037ae2 <SPI3_IRQHandler+0x5a>
 8037ace:	4b07      	ldr	r3, [pc, #28]	; (8037aec <SPI3_IRQHandler+0x64>)
 8037ad0:	781b      	ldrb	r3, [r3, #0]
 8037ad2:	2b00      	cmp	r3, #0
 8037ad4:	d005      	beq.n	8037ae2 <SPI3_IRQHandler+0x5a>
 8037ad6:	4b05      	ldr	r3, [pc, #20]	; (8037aec <SPI3_IRQHandler+0x64>)
 8037ad8:	781b      	ldrb	r3, [r3, #0]
 8037ada:	3b01      	subs	r3, #1
 8037adc:	b2da      	uxtb	r2, r3
 8037ade:	4b03      	ldr	r3, [pc, #12]	; (8037aec <SPI3_IRQHandler+0x64>)
 8037ae0:	701a      	strb	r2, [r3, #0]
}
 8037ae2:	bf00      	nop
 8037ae4:	bd80      	pop	{r7, pc}
 8037ae6:	bf00      	nop
 8037ae8:	20007446 	.word	0x20007446
 8037aec:	20007445 	.word	0x20007445
 8037af0:	2000661c 	.word	0x2000661c

08037af4 <SPI4_IRQHandler>:

/*
 * Function: SPI4_IRQHandler
 */
void_t SPI4_IRQHandler (void_t)
{
 8037af4:	b580      	push	{r7, lr}
 8037af6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8037af8:	4b16      	ldr	r3, [pc, #88]	; (8037b54 <SPI4_IRQHandler+0x60>)
 8037afa:	781b      	ldrb	r3, [r3, #0]
 8037afc:	2b00      	cmp	r3, #0
 8037afe:	d105      	bne.n	8037b0c <SPI4_IRQHandler+0x18>
 8037b00:	4b15      	ldr	r3, [pc, #84]	; (8037b58 <SPI4_IRQHandler+0x64>)
 8037b02:	781b      	ldrb	r3, [r3, #0]
 8037b04:	3301      	adds	r3, #1
 8037b06:	b2da      	uxtb	r2, r3
 8037b08:	4b13      	ldr	r3, [pc, #76]	; (8037b58 <SPI4_IRQHandler+0x64>)
 8037b0a:	701a      	strb	r2, [r3, #0]
 8037b0c:	4b11      	ldr	r3, [pc, #68]	; (8037b54 <SPI4_IRQHandler+0x60>)
 8037b0e:	781b      	ldrb	r3, [r3, #0]
 8037b10:	3301      	adds	r3, #1
 8037b12:	b2da      	uxtb	r2, r3
 8037b14:	4b0f      	ldr	r3, [pc, #60]	; (8037b54 <SPI4_IRQHandler+0x60>)
 8037b16:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_4]);
 8037b18:	4810      	ldr	r0, [pc, #64]	; (8037b5c <SPI4_IRQHandler+0x68>)
 8037b1a:	f7f6 fcbb 	bl	802e494 <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 8037b1e:	4b0d      	ldr	r3, [pc, #52]	; (8037b54 <SPI4_IRQHandler+0x60>)
 8037b20:	781b      	ldrb	r3, [r3, #0]
 8037b22:	2b00      	cmp	r3, #0
 8037b24:	d005      	beq.n	8037b32 <SPI4_IRQHandler+0x3e>
 8037b26:	4b0b      	ldr	r3, [pc, #44]	; (8037b54 <SPI4_IRQHandler+0x60>)
 8037b28:	781b      	ldrb	r3, [r3, #0]
 8037b2a:	3b01      	subs	r3, #1
 8037b2c:	b2da      	uxtb	r2, r3
 8037b2e:	4b09      	ldr	r3, [pc, #36]	; (8037b54 <SPI4_IRQHandler+0x60>)
 8037b30:	701a      	strb	r2, [r3, #0]
 8037b32:	4b08      	ldr	r3, [pc, #32]	; (8037b54 <SPI4_IRQHandler+0x60>)
 8037b34:	781b      	ldrb	r3, [r3, #0]
 8037b36:	2b00      	cmp	r3, #0
 8037b38:	d109      	bne.n	8037b4e <SPI4_IRQHandler+0x5a>
 8037b3a:	4b07      	ldr	r3, [pc, #28]	; (8037b58 <SPI4_IRQHandler+0x64>)
 8037b3c:	781b      	ldrb	r3, [r3, #0]
 8037b3e:	2b00      	cmp	r3, #0
 8037b40:	d005      	beq.n	8037b4e <SPI4_IRQHandler+0x5a>
 8037b42:	4b05      	ldr	r3, [pc, #20]	; (8037b58 <SPI4_IRQHandler+0x64>)
 8037b44:	781b      	ldrb	r3, [r3, #0]
 8037b46:	3b01      	subs	r3, #1
 8037b48:	b2da      	uxtb	r2, r3
 8037b4a:	4b03      	ldr	r3, [pc, #12]	; (8037b58 <SPI4_IRQHandler+0x64>)
 8037b4c:	701a      	strb	r2, [r3, #0]
}
 8037b4e:	bf00      	nop
 8037b50:	bd80      	pop	{r7, pc}
 8037b52:	bf00      	nop
 8037b54:	20007446 	.word	0x20007446
 8037b58:	20007445 	.word	0x20007445
 8037b5c:	20006674 	.word	0x20006674

08037b60 <HAL_SPI_MspInit>:

/*
 * Function: HAL_SPI_MspInit
 */
void_t HAL_SPI_MspInit (SPI_HandleTypeDef* hspi)
{
 8037b60:	b480      	push	{r7}
 8037b62:	b085      	sub	sp, #20
 8037b64:	af00      	add	r7, sp, #0
 8037b66:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_spiPeriphInstance_t instance = 0u;
 8037b68:	2300      	movs	r3, #0
 8037b6a:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 8037b6c:	2300      	movs	r3, #0
 8037b6e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 8037b70:	2300      	movs	r3, #0
 8037b72:	73fb      	strb	r3, [r7, #15]
 8037b74:	e068      	b.n	8037c48 <HAL_SPI_MspInit+0xe8>
    {
        if (spiInstanceLut[instance] == hspi->Instance)
 8037b76:	7bfb      	ldrb	r3, [r7, #15]
 8037b78:	4a38      	ldr	r2, [pc, #224]	; (8037c5c <HAL_SPI_MspInit+0xfc>)
 8037b7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8037b7e:	687b      	ldr	r3, [r7, #4]
 8037b80:	681b      	ldr	r3, [r3, #0]
 8037b82:	429a      	cmp	r2, r3
 8037b84:	d15d      	bne.n	8037c42 <HAL_SPI_MspInit+0xe2>
        {
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 8037b86:	2300      	movs	r3, #0
 8037b88:	73bb      	strb	r3, [r7, #14]
 8037b8a:	e051      	b.n	8037c30 <HAL_SPI_MspInit+0xd0>
            {
                if (spiConfig[idx].periphInstance == instance)
 8037b8c:	7bba      	ldrb	r2, [r7, #14]
 8037b8e:	4934      	ldr	r1, [pc, #208]	; (8037c60 <HAL_SPI_MspInit+0x100>)
 8037b90:	4613      	mov	r3, r2
 8037b92:	00db      	lsls	r3, r3, #3
 8037b94:	1a9b      	subs	r3, r3, r2
 8037b96:	00db      	lsls	r3, r3, #3
 8037b98:	440b      	add	r3, r1
 8037b9a:	781b      	ldrb	r3, [r3, #0]
 8037b9c:	7bfa      	ldrb	r2, [r7, #15]
 8037b9e:	429a      	cmp	r2, r3
 8037ba0:	d143      	bne.n	8037c2a <HAL_SPI_MspInit+0xca>
                {
                    if (spiConfig[idx].dmaConfigRx != NULL)
 8037ba2:	7bba      	ldrb	r2, [r7, #14]
 8037ba4:	492e      	ldr	r1, [pc, #184]	; (8037c60 <HAL_SPI_MspInit+0x100>)
 8037ba6:	4613      	mov	r3, r2
 8037ba8:	00db      	lsls	r3, r3, #3
 8037baa:	1a9b      	subs	r3, r3, r2
 8037bac:	00db      	lsls	r3, r3, #3
 8037bae:	440b      	add	r3, r1
 8037bb0:	3330      	adds	r3, #48	; 0x30
 8037bb2:	681b      	ldr	r3, [r3, #0]
 8037bb4:	2b00      	cmp	r3, #0
 8037bb6:	d016      	beq.n	8037be6 <HAL_SPI_MspInit+0x86>
                    {
                        __HAL_LINKDMA(hspi, hdmarx, spiConfig[idx].dmaConfigRx->hdma);
 8037bb8:	7bba      	ldrb	r2, [r7, #14]
 8037bba:	4929      	ldr	r1, [pc, #164]	; (8037c60 <HAL_SPI_MspInit+0x100>)
 8037bbc:	4613      	mov	r3, r2
 8037bbe:	00db      	lsls	r3, r3, #3
 8037bc0:	1a9b      	subs	r3, r3, r2
 8037bc2:	00db      	lsls	r3, r3, #3
 8037bc4:	440b      	add	r3, r1
 8037bc6:	3330      	adds	r3, #48	; 0x30
 8037bc8:	681b      	ldr	r3, [r3, #0]
 8037bca:	1d1a      	adds	r2, r3, #4
 8037bcc:	687b      	ldr	r3, [r7, #4]
 8037bce:	64da      	str	r2, [r3, #76]	; 0x4c
 8037bd0:	7bba      	ldrb	r2, [r7, #14]
 8037bd2:	4923      	ldr	r1, [pc, #140]	; (8037c60 <HAL_SPI_MspInit+0x100>)
 8037bd4:	4613      	mov	r3, r2
 8037bd6:	00db      	lsls	r3, r3, #3
 8037bd8:	1a9b      	subs	r3, r3, r2
 8037bda:	00db      	lsls	r3, r3, #3
 8037bdc:	440b      	add	r3, r1
 8037bde:	3330      	adds	r3, #48	; 0x30
 8037be0:	681b      	ldr	r3, [r3, #0]
 8037be2:	687a      	ldr	r2, [r7, #4]
 8037be4:	63da      	str	r2, [r3, #60]	; 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (spiConfig[idx].dmaConfigTx != NULL)
 8037be6:	7bba      	ldrb	r2, [r7, #14]
 8037be8:	491d      	ldr	r1, [pc, #116]	; (8037c60 <HAL_SPI_MspInit+0x100>)
 8037bea:	4613      	mov	r3, r2
 8037bec:	00db      	lsls	r3, r3, #3
 8037bee:	1a9b      	subs	r3, r3, r2
 8037bf0:	00db      	lsls	r3, r3, #3
 8037bf2:	440b      	add	r3, r1
 8037bf4:	3334      	adds	r3, #52	; 0x34
 8037bf6:	681b      	ldr	r3, [r3, #0]
 8037bf8:	2b00      	cmp	r3, #0
 8037bfa:	d016      	beq.n	8037c2a <HAL_SPI_MspInit+0xca>
                    {
                        __HAL_LINKDMA(hspi, hdmatx, spiConfig[idx].dmaConfigTx->hdma);
 8037bfc:	7bba      	ldrb	r2, [r7, #14]
 8037bfe:	4918      	ldr	r1, [pc, #96]	; (8037c60 <HAL_SPI_MspInit+0x100>)
 8037c00:	4613      	mov	r3, r2
 8037c02:	00db      	lsls	r3, r3, #3
 8037c04:	1a9b      	subs	r3, r3, r2
 8037c06:	00db      	lsls	r3, r3, #3
 8037c08:	440b      	add	r3, r1
 8037c0a:	3334      	adds	r3, #52	; 0x34
 8037c0c:	681b      	ldr	r3, [r3, #0]
 8037c0e:	1d1a      	adds	r2, r3, #4
 8037c10:	687b      	ldr	r3, [r7, #4]
 8037c12:	649a      	str	r2, [r3, #72]	; 0x48
 8037c14:	7bba      	ldrb	r2, [r7, #14]
 8037c16:	4912      	ldr	r1, [pc, #72]	; (8037c60 <HAL_SPI_MspInit+0x100>)
 8037c18:	4613      	mov	r3, r2
 8037c1a:	00db      	lsls	r3, r3, #3
 8037c1c:	1a9b      	subs	r3, r3, r2
 8037c1e:	00db      	lsls	r3, r3, #3
 8037c20:	440b      	add	r3, r1
 8037c22:	3334      	adds	r3, #52	; 0x34
 8037c24:	681b      	ldr	r3, [r3, #0]
 8037c26:	687a      	ldr	r2, [r7, #4]
 8037c28:	63da      	str	r2, [r3, #60]	; 0x3c
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 8037c2a:	7bbb      	ldrb	r3, [r7, #14]
 8037c2c:	3301      	adds	r3, #1
 8037c2e:	73bb      	strb	r3, [r7, #14]
 8037c30:	7bbb      	ldrb	r3, [r7, #14]
 8037c32:	4a0c      	ldr	r2, [pc, #48]	; (8037c64 <HAL_SPI_MspInit+0x104>)
 8037c34:	6812      	ldr	r2, [r2, #0]
 8037c36:	08d2      	lsrs	r2, r2, #3
 8037c38:	490b      	ldr	r1, [pc, #44]	; (8037c68 <HAL_SPI_MspInit+0x108>)
 8037c3a:	fba1 1202 	umull	r1, r2, r1, r2
 8037c3e:	4293      	cmp	r3, r2
 8037c40:	d3a4      	bcc.n	8037b8c <HAL_SPI_MspInit+0x2c>
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 8037c42:	7bfb      	ldrb	r3, [r7, #15]
 8037c44:	3301      	adds	r3, #1
 8037c46:	73fb      	strb	r3, [r7, #15]
 8037c48:	7bfb      	ldrb	r3, [r7, #15]
 8037c4a:	2b03      	cmp	r3, #3
 8037c4c:	d993      	bls.n	8037b76 <HAL_SPI_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 8037c4e:	bf00      	nop
 8037c50:	bf00      	nop
 8037c52:	3714      	adds	r7, #20
 8037c54:	46bd      	mov	sp, r7
 8037c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037c5a:	4770      	bx	lr
 8037c5c:	20001ae0 	.word	0x20001ae0
 8037c60:	08049380 	.word	0x08049380
 8037c64:	2000187c 	.word	0x2000187c
 8037c68:	24924925 	.word	0x24924925

08037c6c <drv_sysmonTransmit>:

/*
 * Function: drv_sysmonTransmit
 */
GOS_INLINE gos_result_t drv_sysmonTransmit (u8_t* pData, u16_t size)
{
 8037c6c:	b580      	push	{r7, lr}
 8037c6e:	b086      	sub	sp, #24
 8037c70:	af02      	add	r7, sp, #8
 8037c72:	6078      	str	r0, [r7, #4]
 8037c74:	460b      	mov	r3, r1
 8037c76:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8037c78:	23ae      	movs	r3, #174	; 0xae
 8037c7a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8037c7c:	2300      	movs	r3, #0
 8037c7e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 8037c80:	4b0a      	ldr	r3, [pc, #40]	; (8037cac <drv_sysmonTransmit+0x40>)
 8037c82:	781b      	ldrb	r3, [r3, #0]
 8037c84:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, pData, size,
 8037c86:	4b0a      	ldr	r3, [pc, #40]	; (8037cb0 <drv_sysmonTransmit+0x44>)
 8037c88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8037c8a:	4b09      	ldr	r3, [pc, #36]	; (8037cb0 <drv_sysmonTransmit+0x44>)
 8037c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037c8e:	887a      	ldrh	r2, [r7, #2]
 8037c90:	7bb8      	ldrb	r0, [r7, #14]
 8037c92:	9300      	str	r3, [sp, #0]
 8037c94:	460b      	mov	r3, r1
 8037c96:	6879      	ldr	r1, [r7, #4]
 8037c98:	f000 fe7a 	bl	8038990 <drv_uartTransmitIT>
 8037c9c:	4603      	mov	r3, r0
 8037c9e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8037ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8037ca2:	4618      	mov	r0, r3
 8037ca4:	3710      	adds	r7, #16
 8037ca6:	46bd      	mov	sp, r7
 8037ca8:	bd80      	pop	{r7, pc}
 8037caa:	bf00      	nop
 8037cac:	08049494 	.word	0x08049494
 8037cb0:	20001920 	.word	0x20001920

08037cb4 <drv_sysmonReceive>:

/*
 * Function: drv_sysmonReceive
 */
GOS_INLINE gos_result_t drv_sysmonReceive (u8_t* pBuffer, u16_t size)
{
 8037cb4:	b580      	push	{r7, lr}
 8037cb6:	b086      	sub	sp, #24
 8037cb8:	af02      	add	r7, sp, #8
 8037cba:	6078      	str	r0, [r7, #4]
 8037cbc:	460b      	mov	r3, r1
 8037cbe:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 8037cc0:	23ae      	movs	r3, #174	; 0xae
 8037cc2:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8037cc4:	2300      	movs	r3, #0
 8037cc6:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 8037cc8:	4b0a      	ldr	r3, [pc, #40]	; (8037cf4 <drv_sysmonReceive+0x40>)
 8037cca:	781b      	ldrb	r3, [r3, #0]
 8037ccc:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveDMA(instance, pBuffer, size,
 8037cce:	4b0a      	ldr	r3, [pc, #40]	; (8037cf8 <drv_sysmonReceive+0x44>)
 8037cd0:	69d9      	ldr	r1, [r3, #28]
 8037cd2:	4b09      	ldr	r3, [pc, #36]	; (8037cf8 <drv_sysmonReceive+0x44>)
 8037cd4:	6a1b      	ldr	r3, [r3, #32]
 8037cd6:	887a      	ldrh	r2, [r7, #2]
 8037cd8:	7bb8      	ldrb	r0, [r7, #14]
 8037cda:	9300      	str	r3, [sp, #0]
 8037cdc:	460b      	mov	r3, r1
 8037cde:	6879      	ldr	r1, [r7, #4]
 8037ce0:	f000 fde6 	bl	80388b0 <drv_uartReceiveDMA>
 8037ce4:	4603      	mov	r3, r0
 8037ce6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 8037ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8037cea:	4618      	mov	r0, r3
 8037cec:	3710      	adds	r7, #16
 8037cee:	46bd      	mov	sp, r7
 8037cf0:	bd80      	pop	{r7, pc}
 8037cf2:	bf00      	nop
 8037cf4:	08049494 	.word	0x08049494
 8037cf8:	20001920 	.word	0x20001920

08037cfc <drv_systimerStart>:

/*
 * Function: drv_systimerStart
 */
gos_result_t drv_systimerStart (void_t)
{
 8037cfc:	b580      	push	{r7, lr}
 8037cfe:	b082      	sub	sp, #8
 8037d00:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            systimerStartResult = GOS_ERROR;
 8037d02:	23ae      	movs	r3, #174	; 0xae
 8037d04:	71fb      	strb	r3, [r7, #7]
    drv_tmrPeriphInstance_t instance            = 0u;
 8037d06:	2300      	movs	r3, #0
 8037d08:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL)
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 8037d0a:	4b08      	ldr	r3, [pc, #32]	; (8037d2c <drv_systimerStart+0x30>)
 8037d0c:	781b      	ldrb	r3, [r3, #0]
 8037d0e:	71bb      	strb	r3, [r7, #6]

        systimerStartResult = drv_tmrStart(instance, GOS_MUTEX_ENDLESS_TMO);
 8037d10:	79bb      	ldrb	r3, [r7, #6]
 8037d12:	f04f 31ff 	mov.w	r1, #4294967295
 8037d16:	4618      	mov	r0, r3
 8037d18:	f000 f9a2 	bl	8038060 <drv_tmrStart>
 8037d1c:	4603      	mov	r3, r0
 8037d1e:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL.
    }

    return systimerStartResult;
 8037d20:	79fb      	ldrb	r3, [r7, #7]
}
 8037d22:	4618      	mov	r0, r3
 8037d24:	3708      	adds	r7, #8
 8037d26:	46bd      	mov	sp, r7
 8037d28:	bd80      	pop	{r7, pc}
 8037d2a:	bf00      	nop
 8037d2c:	080493f0 	.word	0x080493f0

08037d30 <drv_systimerGetValue>:

/*
 * Function: drv_systimerGetValue
 */
gos_result_t drv_systimerGetValue (u16_t* pValue)
{
 8037d30:	b580      	push	{r7, lr}
 8037d32:	b084      	sub	sp, #16
 8037d34:	af00      	add	r7, sp, #0
 8037d36:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            systimerGetValueResult = GOS_ERROR;
 8037d38:	23ae      	movs	r3, #174	; 0xae
 8037d3a:	73fb      	strb	r3, [r7, #15]
    drv_tmrPeriphInstance_t instance               = 0u;
 8037d3c:	2300      	movs	r3, #0
 8037d3e:	73bb      	strb	r3, [r7, #14]
    u32_t                   temp                   = 0u;
 8037d40:	2300      	movs	r3, #0
 8037d42:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL && pValue != NULL)
 8037d44:	687b      	ldr	r3, [r7, #4]
 8037d46:	2b00      	cmp	r3, #0
 8037d48:	d00f      	beq.n	8037d6a <drv_systimerGetValue+0x3a>
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 8037d4a:	4b0a      	ldr	r3, [pc, #40]	; (8037d74 <drv_systimerGetValue+0x44>)
 8037d4c:	781b      	ldrb	r3, [r3, #0]
 8037d4e:	73bb      	strb	r3, [r7, #14]
        systimerGetValueResult = drv_tmrGetValue(instance, &temp);
 8037d50:	f107 0208 	add.w	r2, r7, #8
 8037d54:	7bbb      	ldrb	r3, [r7, #14]
 8037d56:	4611      	mov	r1, r2
 8037d58:	4618      	mov	r0, r3
 8037d5a:	f000 f9b3 	bl	80380c4 <drv_tmrGetValue>
 8037d5e:	4603      	mov	r3, r0
 8037d60:	73fb      	strb	r3, [r7, #15]
        *pValue = (u16_t)temp;
 8037d62:	68bb      	ldr	r3, [r7, #8]
 8037d64:	b29a      	uxth	r2, r3
 8037d66:	687b      	ldr	r3, [r7, #4]
 8037d68:	801a      	strh	r2, [r3, #0]
    else
    {
        // Configuration array is NULL or output parameter is NULL.
    }

    return systimerGetValueResult;
 8037d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8037d6c:	4618      	mov	r0, r3
 8037d6e:	3710      	adds	r7, #16
 8037d70:	46bd      	mov	sp, r7
 8037d72:	bd80      	pop	{r7, pc}
 8037d74:	080493f0 	.word	0x080493f0

08037d78 <drv_tmrInit>:

/*
 * Function: drv_tmrInit
 */
gos_result_t drv_tmrInit (void_t)
{
 8037d78:	b580      	push	{r7, lr}
 8037d7a:	b082      	sub	sp, #8
 8037d7c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t tmrDriverInitResult = GOS_SUCCESS;
 8037d7e:	2355      	movs	r3, #85	; 0x55
 8037d80:	71fb      	strb	r3, [r7, #7]
    u8_t         tmrIdx              = 0u;
 8037d82:	2300      	movs	r3, #0
 8037d84:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrConfig != NULL)
    {
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 8037d86:	2300      	movs	r3, #0
 8037d88:	71bb      	strb	r3, [r7, #6]
 8037d8a:	e00e      	b.n	8037daa <drv_tmrInit+0x32>
        {
            GOS_CONCAT_RESULT(tmrDriverInitResult, drv_tmrInitInstance(tmrIdx));
 8037d8c:	79fb      	ldrb	r3, [r7, #7]
 8037d8e:	2b55      	cmp	r3, #85	; 0x55
 8037d90:	d106      	bne.n	8037da0 <drv_tmrInit+0x28>
 8037d92:	79bb      	ldrb	r3, [r7, #6]
 8037d94:	4618      	mov	r0, r3
 8037d96:	f000 f81b 	bl	8037dd0 <drv_tmrInitInstance>
 8037d9a:	4603      	mov	r3, r0
 8037d9c:	71fb      	strb	r3, [r7, #7]
 8037d9e:	e001      	b.n	8037da4 <drv_tmrInit+0x2c>
 8037da0:	23ae      	movs	r3, #174	; 0xae
 8037da2:	71fb      	strb	r3, [r7, #7]
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 8037da4:	79bb      	ldrb	r3, [r7, #6]
 8037da6:	3301      	adds	r3, #1
 8037da8:	71bb      	strb	r3, [r7, #6]
 8037daa:	79ba      	ldrb	r2, [r7, #6]
 8037dac:	4b06      	ldr	r3, [pc, #24]	; (8037dc8 <drv_tmrInit+0x50>)
 8037dae:	681b      	ldr	r3, [r3, #0]
 8037db0:	4906      	ldr	r1, [pc, #24]	; (8037dcc <drv_tmrInit+0x54>)
 8037db2:	fba1 1303 	umull	r1, r3, r1, r3
 8037db6:	091b      	lsrs	r3, r3, #4
 8037db8:	429a      	cmp	r2, r3
 8037dba:	d3e7      	bcc.n	8037d8c <drv_tmrInit+0x14>
    {
        // Configuration array is NULL pointer.
        tmrDriverInitResult = GOS_ERROR;
    }

    return tmrDriverInitResult;
 8037dbc:	79fb      	ldrb	r3, [r7, #7]
}
 8037dbe:	4618      	mov	r0, r3
 8037dc0:	3708      	adds	r7, #8
 8037dc2:	46bd      	mov	sp, r7
 8037dc4:	bd80      	pop	{r7, pc}
 8037dc6:	bf00      	nop
 8037dc8:	2000191c 	.word	0x2000191c
 8037dcc:	4ec4ec4f 	.word	0x4ec4ec4f

08037dd0 <drv_tmrInitInstance>:

/*
 * Function: drv_tmrInitInstance
 */
gos_result_t drv_tmrInitInstance (u8_t tmrInstanceIndex)
{
 8037dd0:	b580      	push	{r7, lr}
 8037dd2:	b08a      	sub	sp, #40	; 0x28
 8037dd4:	af00      	add	r7, sp, #0
 8037dd6:	4603      	mov	r3, r0
 8037dd8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            tmrInitResult      = GOS_ERROR;
 8037dda:	23ae      	movs	r3, #174	; 0xae
 8037ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    drv_tmrPeriphInstance_t instance           = 0u;
 8037de0:	2300      	movs	r3, #0
 8037de2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 8037de6:	f107 031c 	add.w	r3, r7, #28
 8037dea:	2200      	movs	r2, #0
 8037dec:	601a      	str	r2, [r3, #0]
 8037dee:	605a      	str	r2, [r3, #4]
    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 8037df0:	f107 030c 	add.w	r3, r7, #12
 8037df4:	2200      	movs	r2, #0
 8037df6:	601a      	str	r2, [r3, #0]
 8037df8:	605a      	str	r2, [r3, #4]
 8037dfa:	609a      	str	r2, [r3, #8]
 8037dfc:	60da      	str	r2, [r3, #12]

    /*
     * Function code.
     */
    if (tmrConfig != NULL && tmrInstanceIndex < (tmrConfigSize / sizeof(drv_tmrDescriptor_t)))
 8037dfe:	79fa      	ldrb	r2, [r7, #7]
 8037e00:	4b90      	ldr	r3, [pc, #576]	; (8038044 <drv_tmrInitInstance+0x274>)
 8037e02:	681b      	ldr	r3, [r3, #0]
 8037e04:	4990      	ldr	r1, [pc, #576]	; (8038048 <drv_tmrInitInstance+0x278>)
 8037e06:	fba1 1303 	umull	r1, r3, r1, r3
 8037e0a:	091b      	lsrs	r3, r3, #4
 8037e0c:	429a      	cmp	r2, r3
 8037e0e:	f080 8112 	bcs.w	8038036 <drv_tmrInitInstance+0x266>
    {
        instance = tmrConfig[tmrInstanceIndex].periphInstance;
 8037e12:	79fb      	ldrb	r3, [r7, #7]
 8037e14:	4a8d      	ldr	r2, [pc, #564]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037e16:	2134      	movs	r1, #52	; 0x34
 8037e18:	fb01 f303 	mul.w	r3, r1, r3
 8037e1c:	4413      	add	r3, r2
 8037e1e:	781b      	ldrb	r3, [r3, #0]
 8037e20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        htims[instance].Instance               = tmrInstanceLut[instance];
 8037e24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8037e28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037e2c:	4988      	ldr	r1, [pc, #544]	; (8038050 <drv_tmrInitInstance+0x280>)
 8037e2e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8037e32:	4888      	ldr	r0, [pc, #544]	; (8038054 <drv_tmrInitInstance+0x284>)
 8037e34:	4613      	mov	r3, r2
 8037e36:	00db      	lsls	r3, r3, #3
 8037e38:	4413      	add	r3, r2
 8037e3a:	00db      	lsls	r3, r3, #3
 8037e3c:	4403      	add	r3, r0
 8037e3e:	6019      	str	r1, [r3, #0]
        htims[instance].Init.AutoReloadPreload = tmrConfig[tmrInstanceIndex].autoReloadPreload;
 8037e40:	79fb      	ldrb	r3, [r7, #7]
 8037e42:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037e46:	4981      	ldr	r1, [pc, #516]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037e48:	2034      	movs	r0, #52	; 0x34
 8037e4a:	fb00 f303 	mul.w	r3, r0, r3
 8037e4e:	440b      	add	r3, r1
 8037e50:	3318      	adds	r3, #24
 8037e52:	6819      	ldr	r1, [r3, #0]
 8037e54:	487f      	ldr	r0, [pc, #508]	; (8038054 <drv_tmrInitInstance+0x284>)
 8037e56:	4613      	mov	r3, r2
 8037e58:	00db      	lsls	r3, r3, #3
 8037e5a:	4413      	add	r3, r2
 8037e5c:	00db      	lsls	r3, r3, #3
 8037e5e:	4403      	add	r3, r0
 8037e60:	3318      	adds	r3, #24
 8037e62:	6019      	str	r1, [r3, #0]
        htims[instance].Init.ClockDivision     = tmrConfig[tmrInstanceIndex].clockDivision;
 8037e64:	79fb      	ldrb	r3, [r7, #7]
 8037e66:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037e6a:	4978      	ldr	r1, [pc, #480]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037e6c:	2034      	movs	r0, #52	; 0x34
 8037e6e:	fb00 f303 	mul.w	r3, r0, r3
 8037e72:	440b      	add	r3, r1
 8037e74:	3314      	adds	r3, #20
 8037e76:	6819      	ldr	r1, [r3, #0]
 8037e78:	4876      	ldr	r0, [pc, #472]	; (8038054 <drv_tmrInitInstance+0x284>)
 8037e7a:	4613      	mov	r3, r2
 8037e7c:	00db      	lsls	r3, r3, #3
 8037e7e:	4413      	add	r3, r2
 8037e80:	00db      	lsls	r3, r3, #3
 8037e82:	4403      	add	r3, r0
 8037e84:	3310      	adds	r3, #16
 8037e86:	6019      	str	r1, [r3, #0]
        htims[instance].Init.CounterMode       = tmrConfig[tmrInstanceIndex].counterMode;
 8037e88:	79fb      	ldrb	r3, [r7, #7]
 8037e8a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037e8e:	496f      	ldr	r1, [pc, #444]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037e90:	2034      	movs	r0, #52	; 0x34
 8037e92:	fb00 f303 	mul.w	r3, r0, r3
 8037e96:	440b      	add	r3, r1
 8037e98:	330c      	adds	r3, #12
 8037e9a:	6819      	ldr	r1, [r3, #0]
 8037e9c:	486d      	ldr	r0, [pc, #436]	; (8038054 <drv_tmrInitInstance+0x284>)
 8037e9e:	4613      	mov	r3, r2
 8037ea0:	00db      	lsls	r3, r3, #3
 8037ea2:	4413      	add	r3, r2
 8037ea4:	00db      	lsls	r3, r3, #3
 8037ea6:	4403      	add	r3, r0
 8037ea8:	3308      	adds	r3, #8
 8037eaa:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Period            = tmrConfig[tmrInstanceIndex].period;
 8037eac:	79fb      	ldrb	r3, [r7, #7]
 8037eae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037eb2:	4966      	ldr	r1, [pc, #408]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037eb4:	2034      	movs	r0, #52	; 0x34
 8037eb6:	fb00 f303 	mul.w	r3, r0, r3
 8037eba:	440b      	add	r3, r1
 8037ebc:	3310      	adds	r3, #16
 8037ebe:	6819      	ldr	r1, [r3, #0]
 8037ec0:	4864      	ldr	r0, [pc, #400]	; (8038054 <drv_tmrInitInstance+0x284>)
 8037ec2:	4613      	mov	r3, r2
 8037ec4:	00db      	lsls	r3, r3, #3
 8037ec6:	4413      	add	r3, r2
 8037ec8:	00db      	lsls	r3, r3, #3
 8037eca:	4403      	add	r3, r0
 8037ecc:	330c      	adds	r3, #12
 8037ece:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Prescaler         = tmrConfig[tmrInstanceIndex].prescaler;
 8037ed0:	79fb      	ldrb	r3, [r7, #7]
 8037ed2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037ed6:	495d      	ldr	r1, [pc, #372]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037ed8:	2034      	movs	r0, #52	; 0x34
 8037eda:	fb00 f303 	mul.w	r3, r0, r3
 8037ede:	440b      	add	r3, r1
 8037ee0:	3304      	adds	r3, #4
 8037ee2:	6819      	ldr	r1, [r3, #0]
 8037ee4:	485b      	ldr	r0, [pc, #364]	; (8038054 <drv_tmrInitInstance+0x284>)
 8037ee6:	4613      	mov	r3, r2
 8037ee8:	00db      	lsls	r3, r3, #3
 8037eea:	4413      	add	r3, r2
 8037eec:	00db      	lsls	r3, r3, #3
 8037eee:	4403      	add	r3, r0
 8037ef0:	3304      	adds	r3, #4
 8037ef2:	6019      	str	r1, [r3, #0]
        htims[instance].Init.RepetitionCounter = tmrConfig[tmrInstanceIndex].repetitionCounter;
 8037ef4:	79fb      	ldrb	r3, [r7, #7]
 8037ef6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037efa:	4954      	ldr	r1, [pc, #336]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037efc:	2034      	movs	r0, #52	; 0x34
 8037efe:	fb00 f303 	mul.w	r3, r0, r3
 8037f02:	440b      	add	r3, r1
 8037f04:	3308      	adds	r3, #8
 8037f06:	6819      	ldr	r1, [r3, #0]
 8037f08:	4852      	ldr	r0, [pc, #328]	; (8038054 <drv_tmrInitInstance+0x284>)
 8037f0a:	4613      	mov	r3, r2
 8037f0c:	00db      	lsls	r3, r3, #3
 8037f0e:	4413      	add	r3, r2
 8037f10:	00db      	lsls	r3, r3, #3
 8037f12:	4403      	add	r3, r0
 8037f14:	3314      	adds	r3, #20
 8037f16:	6019      	str	r1, [r3, #0]
        sMasterConfig.MasterOutputTrigger      = tmrConfig[tmrInstanceIndex].masterOutputTrigger;
 8037f18:	79fb      	ldrb	r3, [r7, #7]
 8037f1a:	4a4c      	ldr	r2, [pc, #304]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037f1c:	2134      	movs	r1, #52	; 0x34
 8037f1e:	fb01 f303 	mul.w	r3, r1, r3
 8037f22:	4413      	add	r3, r2
 8037f24:	3328      	adds	r3, #40	; 0x28
 8037f26:	681b      	ldr	r3, [r3, #0]
 8037f28:	61fb      	str	r3, [r7, #28]
        sMasterConfig.MasterSlaveMode          = tmrConfig[tmrInstanceIndex].masterSlaveMode;
 8037f2a:	79fb      	ldrb	r3, [r7, #7]
 8037f2c:	4a47      	ldr	r2, [pc, #284]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037f2e:	2134      	movs	r1, #52	; 0x34
 8037f30:	fb01 f303 	mul.w	r3, r1, r3
 8037f34:	4413      	add	r3, r2
 8037f36:	332c      	adds	r3, #44	; 0x2c
 8037f38:	681b      	ldr	r3, [r3, #0]
 8037f3a:	623b      	str	r3, [r7, #32]
        sClockSourceConfig.ClockSource         = tmrConfig[tmrInstanceIndex].clockSource;
 8037f3c:	79fb      	ldrb	r3, [r7, #7]
 8037f3e:	4a43      	ldr	r2, [pc, #268]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037f40:	2134      	movs	r1, #52	; 0x34
 8037f42:	fb01 f303 	mul.w	r3, r1, r3
 8037f46:	4413      	add	r3, r2
 8037f48:	3320      	adds	r3, #32
 8037f4a:	681b      	ldr	r3, [r3, #0]
 8037f4c:	60fb      	str	r3, [r7, #12]

        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 8037f4e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037f52:	4613      	mov	r3, r2
 8037f54:	00db      	lsls	r3, r3, #3
 8037f56:	4413      	add	r3, r2
 8037f58:	00db      	lsls	r3, r3, #3
 8037f5a:	4a3e      	ldr	r2, [pc, #248]	; (8038054 <drv_tmrInitInstance+0x284>)
 8037f5c:	4413      	add	r3, r2
 8037f5e:	4618      	mov	r0, r3
 8037f60:	f7f6 febe 	bl	802ece0 <HAL_TIM_Base_Init>
 8037f64:	4603      	mov	r3, r0
 8037f66:	2b00      	cmp	r3, #0
 8037f68:	d165      	bne.n	8038036 <drv_tmrInitInstance+0x266>
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 8037f6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8037f6e:	009b      	lsls	r3, r3, #2
 8037f70:	4a39      	ldr	r2, [pc, #228]	; (8038058 <drv_tmrInitInstance+0x288>)
 8037f72:	4413      	add	r3, r2
 8037f74:	4618      	mov	r0, r3
 8037f76:	f006 f9c5 	bl	803e304 <gos_mutexInit>
 8037f7a:	4603      	mov	r3, r0
        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 8037f7c:	2b55      	cmp	r3, #85	; 0x55
 8037f7e:	d15a      	bne.n	8038036 <drv_tmrInitInstance+0x266>
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 8037f80:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037f84:	4613      	mov	r3, r2
 8037f86:	005b      	lsls	r3, r3, #1
 8037f88:	4413      	add	r3, r2
 8037f8a:	009b      	lsls	r3, r3, #2
 8037f8c:	4a33      	ldr	r2, [pc, #204]	; (803805c <drv_tmrInitInstance+0x28c>)
 8037f8e:	4413      	add	r3, r2
 8037f90:	4618      	mov	r0, r3
 8037f92:	f008 ffa5 	bl	8040ee0 <gos_triggerInit>
 8037f96:	4603      	mov	r3, r0
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 8037f98:	2b55      	cmp	r3, #85	; 0x55
 8037f9a:	d14c      	bne.n	8038036 <drv_tmrInitInstance+0x266>
            gos_triggerReset  (&tmrReadyTriggers[instance]) == GOS_SUCCESS
 8037f9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037fa0:	4613      	mov	r3, r2
 8037fa2:	005b      	lsls	r3, r3, #1
 8037fa4:	4413      	add	r3, r2
 8037fa6:	009b      	lsls	r3, r3, #2
 8037fa8:	4a2c      	ldr	r2, [pc, #176]	; (803805c <drv_tmrInitInstance+0x28c>)
 8037faa:	4413      	add	r3, r2
 8037fac:	4618      	mov	r0, r3
 8037fae:	f008 ffb3 	bl	8040f18 <gos_triggerReset>
 8037fb2:	4603      	mov	r3, r0
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 8037fb4:	2b55      	cmp	r3, #85	; 0x55
 8037fb6:	d13e      	bne.n	8038036 <drv_tmrInitInstance+0x266>
            )
        {
            tmrInitResult = GOS_SUCCESS;
 8037fb8:	2355      	movs	r3, #85	; 0x55
 8037fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (tmrConfig[tmrInstanceIndex].useClockConfig == GOS_TRUE)
 8037fbe:	79fb      	ldrb	r3, [r7, #7]
 8037fc0:	4a22      	ldr	r2, [pc, #136]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037fc2:	2134      	movs	r1, #52	; 0x34
 8037fc4:	fb01 f303 	mul.w	r3, r1, r3
 8037fc8:	4413      	add	r3, r2
 8037fca:	331c      	adds	r3, #28
 8037fcc:	781b      	ldrb	r3, [r3, #0]
 8037fce:	2b36      	cmp	r3, #54	; 0x36
 8037fd0:	d113      	bne.n	8037ffa <drv_tmrInitInstance+0x22a>
            {
                if (HAL_TIM_ConfigClockSource(&htims[instance], &sClockSourceConfig) != HAL_OK)
 8037fd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8037fd6:	4613      	mov	r3, r2
 8037fd8:	00db      	lsls	r3, r3, #3
 8037fda:	4413      	add	r3, r2
 8037fdc:	00db      	lsls	r3, r3, #3
 8037fde:	4a1d      	ldr	r2, [pc, #116]	; (8038054 <drv_tmrInitInstance+0x284>)
 8037fe0:	4413      	add	r3, r2
 8037fe2:	f107 020c 	add.w	r2, r7, #12
 8037fe6:	4611      	mov	r1, r2
 8037fe8:	4618      	mov	r0, r3
 8037fea:	f7f7 f913 	bl	802f214 <HAL_TIM_ConfigClockSource>
 8037fee:	4603      	mov	r3, r0
 8037ff0:	2b00      	cmp	r3, #0
 8037ff2:	d002      	beq.n	8037ffa <drv_tmrInitInstance+0x22a>
                {
                    tmrInitResult = GOS_ERROR;
 8037ff4:	23ae      	movs	r3, #174	; 0xae
 8037ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            else
            {
                // Not used.
            }

            if (tmrConfig[tmrInstanceIndex].useMasterConfig == GOS_TRUE)
 8037ffa:	79fb      	ldrb	r3, [r7, #7]
 8037ffc:	4a13      	ldr	r2, [pc, #76]	; (803804c <drv_tmrInitInstance+0x27c>)
 8037ffe:	2134      	movs	r1, #52	; 0x34
 8038000:	fb01 f303 	mul.w	r3, r1, r3
 8038004:	4413      	add	r3, r2
 8038006:	3324      	adds	r3, #36	; 0x24
 8038008:	781b      	ldrb	r3, [r3, #0]
 803800a:	2b36      	cmp	r3, #54	; 0x36
 803800c:	d113      	bne.n	8038036 <drv_tmrInitInstance+0x266>
            {
                if (HAL_TIMEx_MasterConfigSynchronization(&htims[instance], &sMasterConfig) != HAL_OK)
 803800e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8038012:	4613      	mov	r3, r2
 8038014:	00db      	lsls	r3, r3, #3
 8038016:	4413      	add	r3, r2
 8038018:	00db      	lsls	r3, r3, #3
 803801a:	4a0e      	ldr	r2, [pc, #56]	; (8038054 <drv_tmrInitInstance+0x284>)
 803801c:	4413      	add	r3, r2
 803801e:	f107 021c 	add.w	r2, r7, #28
 8038022:	4611      	mov	r1, r2
 8038024:	4618      	mov	r0, r3
 8038026:	f7f7 fcf1 	bl	802fa0c <HAL_TIMEx_MasterConfigSynchronization>
 803802a:	4603      	mov	r3, r0
 803802c:	2b00      	cmp	r3, #0
 803802e:	d002      	beq.n	8038036 <drv_tmrInitInstance+0x266>
                {
                    tmrInitResult = GOS_ERROR;
 8038030:	23ae      	movs	r3, #174	; 0xae
 8038032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return tmrInitResult;
 8038036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 803803a:	4618      	mov	r0, r3
 803803c:	3728      	adds	r7, #40	; 0x28
 803803e:	46bd      	mov	sp, r7
 8038040:	bd80      	pop	{r7, pc}
 8038042:	bf00      	nop
 8038044:	2000191c 	.word	0x2000191c
 8038048:	4ec4ec4f 	.word	0x4ec4ec4f
 803804c:	20001880 	.word	0x20001880
 8038050:	20001af0 	.word	0x20001af0
 8038054:	2000676c 	.word	0x2000676c
 8038058:	20006b5c 	.word	0x20006b5c
 803805c:	20006b94 	.word	0x20006b94

08038060 <drv_tmrStart>:

/*
 * Function: drv_tmrStart
 */
gos_result_t drv_tmrStart (drv_tmrPeriphInstance_t instance, u32_t mutexTmo)
{
 8038060:	b580      	push	{r7, lr}
 8038062:	b084      	sub	sp, #16
 8038064:	af00      	add	r7, sp, #0
 8038066:	4603      	mov	r3, r0
 8038068:	6039      	str	r1, [r7, #0]
 803806a:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrStartResult = GOS_ERROR;
 803806c:	23ae      	movs	r3, #174	; 0xae
 803806e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 8038070:	79fb      	ldrb	r3, [r7, #7]
 8038072:	009b      	lsls	r3, r3, #2
 8038074:	4a11      	ldr	r2, [pc, #68]	; (80380bc <drv_tmrStart+0x5c>)
 8038076:	4413      	add	r3, r2
 8038078:	6839      	ldr	r1, [r7, #0]
 803807a:	4618      	mov	r0, r3
 803807c:	f006 f95c 	bl	803e338 <gos_mutexLock>
 8038080:	4603      	mov	r3, r0
 8038082:	2b55      	cmp	r3, #85	; 0x55
 8038084:	d10e      	bne.n	80380a4 <drv_tmrStart+0x44>
        HAL_TIM_Base_Start(&htims[instance])           == HAL_OK)
 8038086:	79fa      	ldrb	r2, [r7, #7]
 8038088:	4613      	mov	r3, r2
 803808a:	00db      	lsls	r3, r3, #3
 803808c:	4413      	add	r3, r2
 803808e:	00db      	lsls	r3, r3, #3
 8038090:	4a0b      	ldr	r2, [pc, #44]	; (80380c0 <drv_tmrStart+0x60>)
 8038092:	4413      	add	r3, r2
 8038094:	4618      	mov	r0, r3
 8038096:	f7f6 fe58 	bl	802ed4a <HAL_TIM_Base_Start>
 803809a:	4603      	mov	r3, r0
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 803809c:	2b00      	cmp	r3, #0
 803809e:	d101      	bne.n	80380a4 <drv_tmrStart+0x44>
    {
        tmrStartResult = GOS_SUCCESS;
 80380a0:	2355      	movs	r3, #85	; 0x55
 80380a2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    (void_t) gos_mutexUnlock(&tmrMutexes[instance]);
 80380a4:	79fb      	ldrb	r3, [r7, #7]
 80380a6:	009b      	lsls	r3, r3, #2
 80380a8:	4a04      	ldr	r2, [pc, #16]	; (80380bc <drv_tmrStart+0x5c>)
 80380aa:	4413      	add	r3, r2
 80380ac:	4618      	mov	r0, r3
 80380ae:	f006 fa49 	bl	803e544 <gos_mutexUnlock>

    return tmrStartResult;
 80380b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80380b4:	4618      	mov	r0, r3
 80380b6:	3710      	adds	r7, #16
 80380b8:	46bd      	mov	sp, r7
 80380ba:	bd80      	pop	{r7, pc}
 80380bc:	20006b5c 	.word	0x20006b5c
 80380c0:	2000676c 	.word	0x2000676c

080380c4 <drv_tmrGetValue>:

/*
 * Function: drv_tmrGetValue
 */
GOS_INLINE gos_result_t drv_tmrGetValue (drv_tmrPeriphInstance_t instance, u32_t* pValue)
{
 80380c4:	b480      	push	{r7}
 80380c6:	b085      	sub	sp, #20
 80380c8:	af00      	add	r7, sp, #0
 80380ca:	4603      	mov	r3, r0
 80380cc:	6039      	str	r1, [r7, #0]
 80380ce:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrGetResult = GOS_ERROR;
 80380d0:	23ae      	movs	r3, #174	; 0xae
 80380d2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 80380d4:	683b      	ldr	r3, [r7, #0]
 80380d6:	2b00      	cmp	r3, #0
 80380d8:	d00c      	beq.n	80380f4 <drv_tmrGetValue+0x30>
    {
        *pValue = __HAL_TIM_GET_COUNTER(&htims[instance]);
 80380da:	79fa      	ldrb	r2, [r7, #7]
 80380dc:	4909      	ldr	r1, [pc, #36]	; (8038104 <drv_tmrGetValue+0x40>)
 80380de:	4613      	mov	r3, r2
 80380e0:	00db      	lsls	r3, r3, #3
 80380e2:	4413      	add	r3, r2
 80380e4:	00db      	lsls	r3, r3, #3
 80380e6:	440b      	add	r3, r1
 80380e8:	681b      	ldr	r3, [r3, #0]
 80380ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80380ec:	683b      	ldr	r3, [r7, #0]
 80380ee:	601a      	str	r2, [r3, #0]
        tmrGetResult = GOS_SUCCESS;
 80380f0:	2355      	movs	r3, #85	; 0x55
 80380f2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return tmrGetResult;
 80380f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80380f6:	4618      	mov	r0, r3
 80380f8:	3714      	adds	r7, #20
 80380fa:	46bd      	mov	sp, r7
 80380fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038100:	4770      	bx	lr
 8038102:	bf00      	nop
 8038104:	2000676c 	.word	0x2000676c

08038108 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Function: HAL_TIM_PeriodElapsedCallback
 */
void_t HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *pHtim)
{
 8038108:	b580      	push	{r7, lr}
 803810a:	b084      	sub	sp, #16
 803810c:	af00      	add	r7, sp, #0
 803810e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_tmrPeriphInstance_t instance = DRV_TMR_INSTANCE_1;
 8038110:	2300      	movs	r3, #0
 8038112:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 8038114:	2300      	movs	r3, #0
 8038116:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pHtim != NULL && tmrConfig != NULL)
 8038118:	687b      	ldr	r3, [r7, #4]
 803811a:	2b00      	cmp	r3, #0
 803811c:	d041      	beq.n	80381a2 <HAL_TIM_PeriodElapsedCallback+0x9a>
    {
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 803811e:	2300      	movs	r3, #0
 8038120:	73fb      	strb	r3, [r7, #15]
 8038122:	e03a      	b.n	803819a <HAL_TIM_PeriodElapsedCallback+0x92>
        {
            if (tmrInstanceLut[instance] == pHtim->Instance)
 8038124:	7bfb      	ldrb	r3, [r7, #15]
 8038126:	4a21      	ldr	r2, [pc, #132]	; (80381ac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8038128:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 803812c:	687b      	ldr	r3, [r7, #4]
 803812e:	681b      	ldr	r3, [r3, #0]
 8038130:	429a      	cmp	r2, r3
 8038132:	d12f      	bne.n	8038194 <HAL_TIM_PeriodElapsedCallback+0x8c>
            {
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 8038134:	2300      	movs	r3, #0
 8038136:	73bb      	strb	r3, [r7, #14]
 8038138:	e020      	b.n	803817c <HAL_TIM_PeriodElapsedCallback+0x74>
                {
                    if (tmrConfig[idx].periphInstance == instance)
 803813a:	7bbb      	ldrb	r3, [r7, #14]
 803813c:	4a1c      	ldr	r2, [pc, #112]	; (80381b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 803813e:	2134      	movs	r1, #52	; 0x34
 8038140:	fb01 f303 	mul.w	r3, r1, r3
 8038144:	4413      	add	r3, r2
 8038146:	781b      	ldrb	r3, [r3, #0]
 8038148:	7bfa      	ldrb	r2, [r7, #15]
 803814a:	429a      	cmp	r2, r3
 803814c:	d113      	bne.n	8038176 <HAL_TIM_PeriodElapsedCallback+0x6e>
                    {
                        if (tmrConfig[idx].periodCallback != NULL)
 803814e:	7bbb      	ldrb	r3, [r7, #14]
 8038150:	4a17      	ldr	r2, [pc, #92]	; (80381b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8038152:	2134      	movs	r1, #52	; 0x34
 8038154:	fb01 f303 	mul.w	r3, r1, r3
 8038158:	4413      	add	r3, r2
 803815a:	3330      	adds	r3, #48	; 0x30
 803815c:	681b      	ldr	r3, [r3, #0]
 803815e:	2b00      	cmp	r3, #0
 8038160:	d016      	beq.n	8038190 <HAL_TIM_PeriodElapsedCallback+0x88>
                        {
                            tmrConfig[idx].periodCallback();
 8038162:	7bbb      	ldrb	r3, [r7, #14]
 8038164:	4a12      	ldr	r2, [pc, #72]	; (80381b0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8038166:	2134      	movs	r1, #52	; 0x34
 8038168:	fb01 f303 	mul.w	r3, r1, r3
 803816c:	4413      	add	r3, r2
 803816e:	3330      	adds	r3, #48	; 0x30
 8038170:	681b      	ldr	r3, [r3, #0]
 8038172:	4798      	blx	r3
                        }
                        else
                        {
                            // No registered callback.
                        }
                        break;
 8038174:	e00c      	b.n	8038190 <HAL_TIM_PeriodElapsedCallback+0x88>
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 8038176:	7bbb      	ldrb	r3, [r7, #14]
 8038178:	3301      	adds	r3, #1
 803817a:	73bb      	strb	r3, [r7, #14]
 803817c:	7bba      	ldrb	r2, [r7, #14]
 803817e:	4b0d      	ldr	r3, [pc, #52]	; (80381b4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8038180:	681b      	ldr	r3, [r3, #0]
 8038182:	490d      	ldr	r1, [pc, #52]	; (80381b8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8038184:	fba1 1303 	umull	r1, r3, r1, r3
 8038188:	091b      	lsrs	r3, r3, #4
 803818a:	429a      	cmp	r2, r3
 803818c:	d3d5      	bcc.n	803813a <HAL_TIM_PeriodElapsedCallback+0x32>
                    else
                    {
                        // Continue.
                    }
                }
                break;
 803818e:	e008      	b.n	80381a2 <HAL_TIM_PeriodElapsedCallback+0x9a>
                        break;
 8038190:	bf00      	nop
                break;
 8038192:	e006      	b.n	80381a2 <HAL_TIM_PeriodElapsedCallback+0x9a>
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 8038194:	7bfb      	ldrb	r3, [r7, #15]
 8038196:	3301      	adds	r3, #1
 8038198:	73fb      	strb	r3, [r7, #15]
 803819a:	7bfb      	ldrb	r3, [r7, #15]
 803819c:	2b0d      	cmp	r3, #13
 803819e:	d9c1      	bls.n	8038124 <HAL_TIM_PeriodElapsedCallback+0x1c>
    }
    else
    {
        // NULL pointer fail.
    }
}
 80381a0:	e7ff      	b.n	80381a2 <HAL_TIM_PeriodElapsedCallback+0x9a>
 80381a2:	bf00      	nop
 80381a4:	3710      	adds	r7, #16
 80381a6:	46bd      	mov	sp, r7
 80381a8:	bd80      	pop	{r7, pc}
 80381aa:	bf00      	nop
 80381ac:	20001af0 	.word	0x20001af0
 80381b0:	20001880 	.word	0x20001880
 80381b4:	2000191c 	.word	0x2000191c
 80381b8:	4ec4ec4f 	.word	0x4ec4ec4f

080381bc <TIM2_IRQHandler>:

/*
 * Function: TIM2_IRQHandler
 */
void_t TIM2_IRQHandler (void_t)
{
 80381bc:	b580      	push	{r7, lr}
 80381be:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80381c0:	4b16      	ldr	r3, [pc, #88]	; (803821c <TIM2_IRQHandler+0x60>)
 80381c2:	781b      	ldrb	r3, [r3, #0]
 80381c4:	2b00      	cmp	r3, #0
 80381c6:	d105      	bne.n	80381d4 <TIM2_IRQHandler+0x18>
 80381c8:	4b15      	ldr	r3, [pc, #84]	; (8038220 <TIM2_IRQHandler+0x64>)
 80381ca:	781b      	ldrb	r3, [r3, #0]
 80381cc:	3301      	adds	r3, #1
 80381ce:	b2da      	uxtb	r2, r3
 80381d0:	4b13      	ldr	r3, [pc, #76]	; (8038220 <TIM2_IRQHandler+0x64>)
 80381d2:	701a      	strb	r2, [r3, #0]
 80381d4:	4b11      	ldr	r3, [pc, #68]	; (803821c <TIM2_IRQHandler+0x60>)
 80381d6:	781b      	ldrb	r3, [r3, #0]
 80381d8:	3301      	adds	r3, #1
 80381da:	b2da      	uxtb	r2, r3
 80381dc:	4b0f      	ldr	r3, [pc, #60]	; (803821c <TIM2_IRQHandler+0x60>)
 80381de:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_2]);
 80381e0:	4810      	ldr	r0, [pc, #64]	; (8038224 <TIM2_IRQHandler+0x68>)
 80381e2:	f7f6 fe49 	bl	802ee78 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 80381e6:	4b0d      	ldr	r3, [pc, #52]	; (803821c <TIM2_IRQHandler+0x60>)
 80381e8:	781b      	ldrb	r3, [r3, #0]
 80381ea:	2b00      	cmp	r3, #0
 80381ec:	d005      	beq.n	80381fa <TIM2_IRQHandler+0x3e>
 80381ee:	4b0b      	ldr	r3, [pc, #44]	; (803821c <TIM2_IRQHandler+0x60>)
 80381f0:	781b      	ldrb	r3, [r3, #0]
 80381f2:	3b01      	subs	r3, #1
 80381f4:	b2da      	uxtb	r2, r3
 80381f6:	4b09      	ldr	r3, [pc, #36]	; (803821c <TIM2_IRQHandler+0x60>)
 80381f8:	701a      	strb	r2, [r3, #0]
 80381fa:	4b08      	ldr	r3, [pc, #32]	; (803821c <TIM2_IRQHandler+0x60>)
 80381fc:	781b      	ldrb	r3, [r3, #0]
 80381fe:	2b00      	cmp	r3, #0
 8038200:	d109      	bne.n	8038216 <TIM2_IRQHandler+0x5a>
 8038202:	4b07      	ldr	r3, [pc, #28]	; (8038220 <TIM2_IRQHandler+0x64>)
 8038204:	781b      	ldrb	r3, [r3, #0]
 8038206:	2b00      	cmp	r3, #0
 8038208:	d005      	beq.n	8038216 <TIM2_IRQHandler+0x5a>
 803820a:	4b05      	ldr	r3, [pc, #20]	; (8038220 <TIM2_IRQHandler+0x64>)
 803820c:	781b      	ldrb	r3, [r3, #0]
 803820e:	3b01      	subs	r3, #1
 8038210:	b2da      	uxtb	r2, r3
 8038212:	4b03      	ldr	r3, [pc, #12]	; (8038220 <TIM2_IRQHandler+0x64>)
 8038214:	701a      	strb	r2, [r3, #0]
}
 8038216:	bf00      	nop
 8038218:	bd80      	pop	{r7, pc}
 803821a:	bf00      	nop
 803821c:	20007446 	.word	0x20007446
 8038220:	20007445 	.word	0x20007445
 8038224:	200067b4 	.word	0x200067b4

08038228 <TIM3_IRQHandler>:

/*
 * Function: TIM3_IRQHandler
 */
void_t TIM3_IRQHandler (void_t)
{
 8038228:	b580      	push	{r7, lr}
 803822a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 803822c:	4b16      	ldr	r3, [pc, #88]	; (8038288 <TIM3_IRQHandler+0x60>)
 803822e:	781b      	ldrb	r3, [r3, #0]
 8038230:	2b00      	cmp	r3, #0
 8038232:	d105      	bne.n	8038240 <TIM3_IRQHandler+0x18>
 8038234:	4b15      	ldr	r3, [pc, #84]	; (803828c <TIM3_IRQHandler+0x64>)
 8038236:	781b      	ldrb	r3, [r3, #0]
 8038238:	3301      	adds	r3, #1
 803823a:	b2da      	uxtb	r2, r3
 803823c:	4b13      	ldr	r3, [pc, #76]	; (803828c <TIM3_IRQHandler+0x64>)
 803823e:	701a      	strb	r2, [r3, #0]
 8038240:	4b11      	ldr	r3, [pc, #68]	; (8038288 <TIM3_IRQHandler+0x60>)
 8038242:	781b      	ldrb	r3, [r3, #0]
 8038244:	3301      	adds	r3, #1
 8038246:	b2da      	uxtb	r2, r3
 8038248:	4b0f      	ldr	r3, [pc, #60]	; (8038288 <TIM3_IRQHandler+0x60>)
 803824a:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_3]);
 803824c:	4810      	ldr	r0, [pc, #64]	; (8038290 <TIM3_IRQHandler+0x68>)
 803824e:	f7f6 fe13 	bl	802ee78 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8038252:	4b0d      	ldr	r3, [pc, #52]	; (8038288 <TIM3_IRQHandler+0x60>)
 8038254:	781b      	ldrb	r3, [r3, #0]
 8038256:	2b00      	cmp	r3, #0
 8038258:	d005      	beq.n	8038266 <TIM3_IRQHandler+0x3e>
 803825a:	4b0b      	ldr	r3, [pc, #44]	; (8038288 <TIM3_IRQHandler+0x60>)
 803825c:	781b      	ldrb	r3, [r3, #0]
 803825e:	3b01      	subs	r3, #1
 8038260:	b2da      	uxtb	r2, r3
 8038262:	4b09      	ldr	r3, [pc, #36]	; (8038288 <TIM3_IRQHandler+0x60>)
 8038264:	701a      	strb	r2, [r3, #0]
 8038266:	4b08      	ldr	r3, [pc, #32]	; (8038288 <TIM3_IRQHandler+0x60>)
 8038268:	781b      	ldrb	r3, [r3, #0]
 803826a:	2b00      	cmp	r3, #0
 803826c:	d109      	bne.n	8038282 <TIM3_IRQHandler+0x5a>
 803826e:	4b07      	ldr	r3, [pc, #28]	; (803828c <TIM3_IRQHandler+0x64>)
 8038270:	781b      	ldrb	r3, [r3, #0]
 8038272:	2b00      	cmp	r3, #0
 8038274:	d005      	beq.n	8038282 <TIM3_IRQHandler+0x5a>
 8038276:	4b05      	ldr	r3, [pc, #20]	; (803828c <TIM3_IRQHandler+0x64>)
 8038278:	781b      	ldrb	r3, [r3, #0]
 803827a:	3b01      	subs	r3, #1
 803827c:	b2da      	uxtb	r2, r3
 803827e:	4b03      	ldr	r3, [pc, #12]	; (803828c <TIM3_IRQHandler+0x64>)
 8038280:	701a      	strb	r2, [r3, #0]
}
 8038282:	bf00      	nop
 8038284:	bd80      	pop	{r7, pc}
 8038286:	bf00      	nop
 8038288:	20007446 	.word	0x20007446
 803828c:	20007445 	.word	0x20007445
 8038290:	200067fc 	.word	0x200067fc

08038294 <TIM4_IRQHandler>:

/*
 * Function: TIM4_IRQHandler
 */
void_t TIM4_IRQHandler (void_t)
{
 8038294:	b580      	push	{r7, lr}
 8038296:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8038298:	4b16      	ldr	r3, [pc, #88]	; (80382f4 <TIM4_IRQHandler+0x60>)
 803829a:	781b      	ldrb	r3, [r3, #0]
 803829c:	2b00      	cmp	r3, #0
 803829e:	d105      	bne.n	80382ac <TIM4_IRQHandler+0x18>
 80382a0:	4b15      	ldr	r3, [pc, #84]	; (80382f8 <TIM4_IRQHandler+0x64>)
 80382a2:	781b      	ldrb	r3, [r3, #0]
 80382a4:	3301      	adds	r3, #1
 80382a6:	b2da      	uxtb	r2, r3
 80382a8:	4b13      	ldr	r3, [pc, #76]	; (80382f8 <TIM4_IRQHandler+0x64>)
 80382aa:	701a      	strb	r2, [r3, #0]
 80382ac:	4b11      	ldr	r3, [pc, #68]	; (80382f4 <TIM4_IRQHandler+0x60>)
 80382ae:	781b      	ldrb	r3, [r3, #0]
 80382b0:	3301      	adds	r3, #1
 80382b2:	b2da      	uxtb	r2, r3
 80382b4:	4b0f      	ldr	r3, [pc, #60]	; (80382f4 <TIM4_IRQHandler+0x60>)
 80382b6:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_4]);
 80382b8:	4810      	ldr	r0, [pc, #64]	; (80382fc <TIM4_IRQHandler+0x68>)
 80382ba:	f7f6 fddd 	bl	802ee78 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 80382be:	4b0d      	ldr	r3, [pc, #52]	; (80382f4 <TIM4_IRQHandler+0x60>)
 80382c0:	781b      	ldrb	r3, [r3, #0]
 80382c2:	2b00      	cmp	r3, #0
 80382c4:	d005      	beq.n	80382d2 <TIM4_IRQHandler+0x3e>
 80382c6:	4b0b      	ldr	r3, [pc, #44]	; (80382f4 <TIM4_IRQHandler+0x60>)
 80382c8:	781b      	ldrb	r3, [r3, #0]
 80382ca:	3b01      	subs	r3, #1
 80382cc:	b2da      	uxtb	r2, r3
 80382ce:	4b09      	ldr	r3, [pc, #36]	; (80382f4 <TIM4_IRQHandler+0x60>)
 80382d0:	701a      	strb	r2, [r3, #0]
 80382d2:	4b08      	ldr	r3, [pc, #32]	; (80382f4 <TIM4_IRQHandler+0x60>)
 80382d4:	781b      	ldrb	r3, [r3, #0]
 80382d6:	2b00      	cmp	r3, #0
 80382d8:	d109      	bne.n	80382ee <TIM4_IRQHandler+0x5a>
 80382da:	4b07      	ldr	r3, [pc, #28]	; (80382f8 <TIM4_IRQHandler+0x64>)
 80382dc:	781b      	ldrb	r3, [r3, #0]
 80382de:	2b00      	cmp	r3, #0
 80382e0:	d005      	beq.n	80382ee <TIM4_IRQHandler+0x5a>
 80382e2:	4b05      	ldr	r3, [pc, #20]	; (80382f8 <TIM4_IRQHandler+0x64>)
 80382e4:	781b      	ldrb	r3, [r3, #0]
 80382e6:	3b01      	subs	r3, #1
 80382e8:	b2da      	uxtb	r2, r3
 80382ea:	4b03      	ldr	r3, [pc, #12]	; (80382f8 <TIM4_IRQHandler+0x64>)
 80382ec:	701a      	strb	r2, [r3, #0]
}
 80382ee:	bf00      	nop
 80382f0:	bd80      	pop	{r7, pc}
 80382f2:	bf00      	nop
 80382f4:	20007446 	.word	0x20007446
 80382f8:	20007445 	.word	0x20007445
 80382fc:	20006844 	.word	0x20006844

08038300 <TIM5_IRQHandler>:

/*
 * Function: TIM5_IRQHandler
 */
void_t TIM5_IRQHandler (void_t)
{
 8038300:	b580      	push	{r7, lr}
 8038302:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8038304:	4b16      	ldr	r3, [pc, #88]	; (8038360 <TIM5_IRQHandler+0x60>)
 8038306:	781b      	ldrb	r3, [r3, #0]
 8038308:	2b00      	cmp	r3, #0
 803830a:	d105      	bne.n	8038318 <TIM5_IRQHandler+0x18>
 803830c:	4b15      	ldr	r3, [pc, #84]	; (8038364 <TIM5_IRQHandler+0x64>)
 803830e:	781b      	ldrb	r3, [r3, #0]
 8038310:	3301      	adds	r3, #1
 8038312:	b2da      	uxtb	r2, r3
 8038314:	4b13      	ldr	r3, [pc, #76]	; (8038364 <TIM5_IRQHandler+0x64>)
 8038316:	701a      	strb	r2, [r3, #0]
 8038318:	4b11      	ldr	r3, [pc, #68]	; (8038360 <TIM5_IRQHandler+0x60>)
 803831a:	781b      	ldrb	r3, [r3, #0]
 803831c:	3301      	adds	r3, #1
 803831e:	b2da      	uxtb	r2, r3
 8038320:	4b0f      	ldr	r3, [pc, #60]	; (8038360 <TIM5_IRQHandler+0x60>)
 8038322:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_5]);
 8038324:	4810      	ldr	r0, [pc, #64]	; (8038368 <TIM5_IRQHandler+0x68>)
 8038326:	f7f6 fda7 	bl	802ee78 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 803832a:	4b0d      	ldr	r3, [pc, #52]	; (8038360 <TIM5_IRQHandler+0x60>)
 803832c:	781b      	ldrb	r3, [r3, #0]
 803832e:	2b00      	cmp	r3, #0
 8038330:	d005      	beq.n	803833e <TIM5_IRQHandler+0x3e>
 8038332:	4b0b      	ldr	r3, [pc, #44]	; (8038360 <TIM5_IRQHandler+0x60>)
 8038334:	781b      	ldrb	r3, [r3, #0]
 8038336:	3b01      	subs	r3, #1
 8038338:	b2da      	uxtb	r2, r3
 803833a:	4b09      	ldr	r3, [pc, #36]	; (8038360 <TIM5_IRQHandler+0x60>)
 803833c:	701a      	strb	r2, [r3, #0]
 803833e:	4b08      	ldr	r3, [pc, #32]	; (8038360 <TIM5_IRQHandler+0x60>)
 8038340:	781b      	ldrb	r3, [r3, #0]
 8038342:	2b00      	cmp	r3, #0
 8038344:	d109      	bne.n	803835a <TIM5_IRQHandler+0x5a>
 8038346:	4b07      	ldr	r3, [pc, #28]	; (8038364 <TIM5_IRQHandler+0x64>)
 8038348:	781b      	ldrb	r3, [r3, #0]
 803834a:	2b00      	cmp	r3, #0
 803834c:	d005      	beq.n	803835a <TIM5_IRQHandler+0x5a>
 803834e:	4b05      	ldr	r3, [pc, #20]	; (8038364 <TIM5_IRQHandler+0x64>)
 8038350:	781b      	ldrb	r3, [r3, #0]
 8038352:	3b01      	subs	r3, #1
 8038354:	b2da      	uxtb	r2, r3
 8038356:	4b03      	ldr	r3, [pc, #12]	; (8038364 <TIM5_IRQHandler+0x64>)
 8038358:	701a      	strb	r2, [r3, #0]
}
 803835a:	bf00      	nop
 803835c:	bd80      	pop	{r7, pc}
 803835e:	bf00      	nop
 8038360:	20007446 	.word	0x20007446
 8038364:	20007445 	.word	0x20007445
 8038368:	2000688c 	.word	0x2000688c

0803836c <TIM7_IRQHandler>:

/*
 * Function: TIM7_IRQHandler
 */
void_t TIM7_IRQHandler (void_t)
{
 803836c:	b580      	push	{r7, lr}
 803836e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8038370:	4b16      	ldr	r3, [pc, #88]	; (80383cc <TIM7_IRQHandler+0x60>)
 8038372:	781b      	ldrb	r3, [r3, #0]
 8038374:	2b00      	cmp	r3, #0
 8038376:	d105      	bne.n	8038384 <TIM7_IRQHandler+0x18>
 8038378:	4b15      	ldr	r3, [pc, #84]	; (80383d0 <TIM7_IRQHandler+0x64>)
 803837a:	781b      	ldrb	r3, [r3, #0]
 803837c:	3301      	adds	r3, #1
 803837e:	b2da      	uxtb	r2, r3
 8038380:	4b13      	ldr	r3, [pc, #76]	; (80383d0 <TIM7_IRQHandler+0x64>)
 8038382:	701a      	strb	r2, [r3, #0]
 8038384:	4b11      	ldr	r3, [pc, #68]	; (80383cc <TIM7_IRQHandler+0x60>)
 8038386:	781b      	ldrb	r3, [r3, #0]
 8038388:	3301      	adds	r3, #1
 803838a:	b2da      	uxtb	r2, r3
 803838c:	4b0f      	ldr	r3, [pc, #60]	; (80383cc <TIM7_IRQHandler+0x60>)
 803838e:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_7]);
 8038390:	4810      	ldr	r0, [pc, #64]	; (80383d4 <TIM7_IRQHandler+0x68>)
 8038392:	f7f6 fd71 	bl	802ee78 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8038396:	4b0d      	ldr	r3, [pc, #52]	; (80383cc <TIM7_IRQHandler+0x60>)
 8038398:	781b      	ldrb	r3, [r3, #0]
 803839a:	2b00      	cmp	r3, #0
 803839c:	d005      	beq.n	80383aa <TIM7_IRQHandler+0x3e>
 803839e:	4b0b      	ldr	r3, [pc, #44]	; (80383cc <TIM7_IRQHandler+0x60>)
 80383a0:	781b      	ldrb	r3, [r3, #0]
 80383a2:	3b01      	subs	r3, #1
 80383a4:	b2da      	uxtb	r2, r3
 80383a6:	4b09      	ldr	r3, [pc, #36]	; (80383cc <TIM7_IRQHandler+0x60>)
 80383a8:	701a      	strb	r2, [r3, #0]
 80383aa:	4b08      	ldr	r3, [pc, #32]	; (80383cc <TIM7_IRQHandler+0x60>)
 80383ac:	781b      	ldrb	r3, [r3, #0]
 80383ae:	2b00      	cmp	r3, #0
 80383b0:	d109      	bne.n	80383c6 <TIM7_IRQHandler+0x5a>
 80383b2:	4b07      	ldr	r3, [pc, #28]	; (80383d0 <TIM7_IRQHandler+0x64>)
 80383b4:	781b      	ldrb	r3, [r3, #0]
 80383b6:	2b00      	cmp	r3, #0
 80383b8:	d005      	beq.n	80383c6 <TIM7_IRQHandler+0x5a>
 80383ba:	4b05      	ldr	r3, [pc, #20]	; (80383d0 <TIM7_IRQHandler+0x64>)
 80383bc:	781b      	ldrb	r3, [r3, #0]
 80383be:	3b01      	subs	r3, #1
 80383c0:	b2da      	uxtb	r2, r3
 80383c2:	4b03      	ldr	r3, [pc, #12]	; (80383d0 <TIM7_IRQHandler+0x64>)
 80383c4:	701a      	strb	r2, [r3, #0]
}
 80383c6:	bf00      	nop
 80383c8:	bd80      	pop	{r7, pc}
 80383ca:	bf00      	nop
 80383cc:	20007446 	.word	0x20007446
 80383d0:	20007445 	.word	0x20007445
 80383d4:	2000691c 	.word	0x2000691c

080383d8 <drv_traceTransmitUnsafe>:

/*
 * Function: drv_traceTransmitUnsafe
 */
GOS_INLINE gos_result_t drv_traceTransmitUnsafe (char_t* pMessage)
{
 80383d8:	b580      	push	{r7, lr}
 80383da:	b084      	sub	sp, #16
 80383dc:	af00      	add	r7, sp, #0
 80383de:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 80383e0:	23ae      	movs	r3, #174	; 0xae
 80383e2:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 80383e4:	2300      	movs	r3, #0
 80383e6:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 80383e8:	4b0a      	ldr	r3, [pc, #40]	; (8038414 <drv_traceTransmitUnsafe+0x3c>)
 80383ea:	789b      	ldrb	r3, [r3, #2]
 80383ec:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitBlocking(instance, (u8_t*)pMessage, strlen(pMessage),
 80383ee:	6878      	ldr	r0, [r7, #4]
 80383f0:	f7e7 ff6e 	bl	80202d0 <strlen>
 80383f4:	4603      	mov	r3, r0
 80383f6:	b29a      	uxth	r2, r3
 80383f8:	4b07      	ldr	r3, [pc, #28]	; (8038418 <drv_traceTransmitUnsafe+0x40>)
 80383fa:	689b      	ldr	r3, [r3, #8]
 80383fc:	7bb8      	ldrb	r0, [r7, #14]
 80383fe:	6879      	ldr	r1, [r7, #4]
 8038400:	f000 f99a 	bl	8038738 <drv_uartTransmitBlocking>
 8038404:	4603      	mov	r3, r0
 8038406:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8038408:	7bfb      	ldrb	r3, [r7, #15]
}
 803840a:	4618      	mov	r0, r3
 803840c:	3710      	adds	r7, #16
 803840e:	46bd      	mov	sp, r7
 8038410:	bd80      	pop	{r7, pc}
 8038412:	bf00      	nop
 8038414:	08049494 	.word	0x08049494
 8038418:	20001920 	.word	0x20001920

0803841c <drv_traceTransmit>:

/*
 * Function: drv_traceTransmit
 */
GOS_INLINE gos_result_t drv_traceTransmit (char_t* pMessage)
{
 803841c:	b580      	push	{r7, lr}
 803841e:	b086      	sub	sp, #24
 8038420:	af02      	add	r7, sp, #8
 8038422:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8038424:	23ae      	movs	r3, #174	; 0xae
 8038426:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8038428:	2300      	movs	r3, #0
 803842a:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 803842c:	4b0c      	ldr	r3, [pc, #48]	; (8038460 <drv_traceTransmit+0x44>)
 803842e:	789b      	ldrb	r3, [r3, #2]
 8038430:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitDMA(instance, (u8_t*)pMessage, strlen(pMessage),
 8038432:	6878      	ldr	r0, [r7, #4]
 8038434:	f7e7 ff4c 	bl	80202d0 <strlen>
 8038438:	4603      	mov	r3, r0
 803843a:	b29a      	uxth	r2, r3
 803843c:	4b09      	ldr	r3, [pc, #36]	; (8038464 <drv_traceTransmit+0x48>)
 803843e:	6819      	ldr	r1, [r3, #0]
 8038440:	4b08      	ldr	r3, [pc, #32]	; (8038464 <drv_traceTransmit+0x48>)
 8038442:	685b      	ldr	r3, [r3, #4]
 8038444:	7bb8      	ldrb	r0, [r7, #14]
 8038446:	9300      	str	r3, [sp, #0]
 8038448:	460b      	mov	r3, r1
 803844a:	6879      	ldr	r1, [r7, #4]
 803844c:	f000 f9c0 	bl	80387d0 <drv_uartTransmitDMA>
 8038450:	4603      	mov	r3, r0
 8038452:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8038454:	7bfb      	ldrb	r3, [r7, #15]
}
 8038456:	4618      	mov	r0, r3
 8038458:	3710      	adds	r7, #16
 803845a:	46bd      	mov	sp, r7
 803845c:	bd80      	pop	{r7, pc}
 803845e:	bf00      	nop
 8038460:	08049494 	.word	0x08049494
 8038464:	20001920 	.word	0x20001920

08038468 <drv_uartInit>:

/*
 * Function: drv_uartInit
 */
gos_result_t drv_uartInit (void_t)
{
 8038468:	b580      	push	{r7, lr}
 803846a:	b082      	sub	sp, #8
 803846c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 803846e:	2355      	movs	r3, #85	; 0x55
 8038470:	71fb      	strb	r3, [r7, #7]
    u8_t         uartIdx              = 0u;
 8038472:	2300      	movs	r3, #0
 8038474:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 8038476:	2300      	movs	r3, #0
 8038478:	71bb      	strb	r3, [r7, #6]
 803847a:	e00e      	b.n	803849a <drv_uartInit+0x32>
        {
            GOS_CONCAT_RESULT(uartDriverInitResult, drv_uartInitInstance(uartIdx));
 803847c:	79fb      	ldrb	r3, [r7, #7]
 803847e:	2b55      	cmp	r3, #85	; 0x55
 8038480:	d106      	bne.n	8038490 <drv_uartInit+0x28>
 8038482:	79bb      	ldrb	r3, [r7, #6]
 8038484:	4618      	mov	r0, r3
 8038486:	f000 f81b 	bl	80384c0 <drv_uartInitInstance>
 803848a:	4603      	mov	r3, r0
 803848c:	71fb      	strb	r3, [r7, #7]
 803848e:	e001      	b.n	8038494 <drv_uartInit+0x2c>
 8038490:	23ae      	movs	r3, #174	; 0xae
 8038492:	71fb      	strb	r3, [r7, #7]
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 8038494:	79bb      	ldrb	r3, [r7, #6]
 8038496:	3301      	adds	r3, #1
 8038498:	71bb      	strb	r3, [r7, #6]
 803849a:	79ba      	ldrb	r2, [r7, #6]
 803849c:	4b06      	ldr	r3, [pc, #24]	; (80384b8 <drv_uartInit+0x50>)
 803849e:	681b      	ldr	r3, [r3, #0]
 80384a0:	4906      	ldr	r1, [pc, #24]	; (80384bc <drv_uartInit+0x54>)
 80384a2:	fba1 1303 	umull	r1, r3, r1, r3
 80384a6:	095b      	lsrs	r3, r3, #5
 80384a8:	429a      	cmp	r2, r3
 80384aa:	d3e7      	bcc.n	803847c <drv_uartInit+0x14>
        // Configuration array is NULL pointer.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
        uartDriverInitResult = GOS_ERROR;
    }

    return uartDriverInitResult;
 80384ac:	79fb      	ldrb	r3, [r7, #7]
}
 80384ae:	4618      	mov	r0, r3
 80384b0:	3708      	adds	r7, #8
 80384b2:	46bd      	mov	sp, r7
 80384b4:	bd80      	pop	{r7, pc}
 80384b6:	bf00      	nop
 80384b8:	2000194c 	.word	0x2000194c
 80384bc:	cccccccd 	.word	0xcccccccd

080384c0 <drv_uartInitInstance>:

/*
 * Function: drv_uartInitInstance
 */
gos_result_t drv_uartInitInstance (u8_t uartInstanceIndex)
{
 80384c0:	b580      	push	{r7, lr}
 80384c2:	b084      	sub	sp, #16
 80384c4:	af00      	add	r7, sp, #0
 80384c6:	4603      	mov	r3, r0
 80384c8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             uartInitResult = GOS_ERROR;
 80384ca:	23ae      	movs	r3, #174	; 0xae
 80384cc:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance       = 0u;
 80384ce:	2300      	movs	r3, #0
 80384d0:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        if (uartInstanceIndex < (uartConfigSize / sizeof(drv_uartDescriptor_t)))
 80384d2:	79fa      	ldrb	r2, [r7, #7]
 80384d4:	4b82      	ldr	r3, [pc, #520]	; (80386e0 <drv_uartInitInstance+0x220>)
 80384d6:	681b      	ldr	r3, [r3, #0]
 80384d8:	4982      	ldr	r1, [pc, #520]	; (80386e4 <drv_uartInitInstance+0x224>)
 80384da:	fba1 1303 	umull	r1, r3, r1, r3
 80384de:	095b      	lsrs	r3, r3, #5
 80384e0:	429a      	cmp	r2, r3
 80384e2:	f080 80f2 	bcs.w	80386ca <drv_uartInitInstance+0x20a>
        {
            instance = uartConfig[uartInstanceIndex].periphInstance;
 80384e6:	79fa      	ldrb	r2, [r7, #7]
 80384e8:	497f      	ldr	r1, [pc, #508]	; (80386e8 <drv_uartInitInstance+0x228>)
 80384ea:	4613      	mov	r3, r2
 80384ec:	009b      	lsls	r3, r3, #2
 80384ee:	4413      	add	r3, r2
 80384f0:	00db      	lsls	r3, r3, #3
 80384f2:	440b      	add	r3, r1
 80384f4:	781b      	ldrb	r3, [r3, #0]
 80384f6:	73bb      	strb	r3, [r7, #14]

            huarts[instance].Instance          = uartInstanceLut[instance];
 80384f8:	7bbb      	ldrb	r3, [r7, #14]
 80384fa:	7bba      	ldrb	r2, [r7, #14]
 80384fc:	497b      	ldr	r1, [pc, #492]	; (80386ec <drv_uartInitInstance+0x22c>)
 80384fe:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8038502:	487b      	ldr	r0, [pc, #492]	; (80386f0 <drv_uartInitInstance+0x230>)
 8038504:	4613      	mov	r3, r2
 8038506:	011b      	lsls	r3, r3, #4
 8038508:	4413      	add	r3, r2
 803850a:	009b      	lsls	r3, r3, #2
 803850c:	4403      	add	r3, r0
 803850e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.BaudRate     = uartConfig[uartInstanceIndex].baudRate;
 8038510:	79f9      	ldrb	r1, [r7, #7]
 8038512:	7bba      	ldrb	r2, [r7, #14]
 8038514:	4874      	ldr	r0, [pc, #464]	; (80386e8 <drv_uartInitInstance+0x228>)
 8038516:	460b      	mov	r3, r1
 8038518:	009b      	lsls	r3, r3, #2
 803851a:	440b      	add	r3, r1
 803851c:	00db      	lsls	r3, r3, #3
 803851e:	4403      	add	r3, r0
 8038520:	3304      	adds	r3, #4
 8038522:	6819      	ldr	r1, [r3, #0]
 8038524:	4872      	ldr	r0, [pc, #456]	; (80386f0 <drv_uartInitInstance+0x230>)
 8038526:	4613      	mov	r3, r2
 8038528:	011b      	lsls	r3, r3, #4
 803852a:	4413      	add	r3, r2
 803852c:	009b      	lsls	r3, r3, #2
 803852e:	4403      	add	r3, r0
 8038530:	3304      	adds	r3, #4
 8038532:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.WordLength   = uartConfig[uartInstanceIndex].wordLength;
 8038534:	79f9      	ldrb	r1, [r7, #7]
 8038536:	7bba      	ldrb	r2, [r7, #14]
 8038538:	486b      	ldr	r0, [pc, #428]	; (80386e8 <drv_uartInitInstance+0x228>)
 803853a:	460b      	mov	r3, r1
 803853c:	009b      	lsls	r3, r3, #2
 803853e:	440b      	add	r3, r1
 8038540:	00db      	lsls	r3, r3, #3
 8038542:	4403      	add	r3, r0
 8038544:	3308      	adds	r3, #8
 8038546:	6819      	ldr	r1, [r3, #0]
 8038548:	4869      	ldr	r0, [pc, #420]	; (80386f0 <drv_uartInitInstance+0x230>)
 803854a:	4613      	mov	r3, r2
 803854c:	011b      	lsls	r3, r3, #4
 803854e:	4413      	add	r3, r2
 8038550:	009b      	lsls	r3, r3, #2
 8038552:	4403      	add	r3, r0
 8038554:	3308      	adds	r3, #8
 8038556:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.StopBits     = uartConfig[uartInstanceIndex].stopBits;
 8038558:	79f9      	ldrb	r1, [r7, #7]
 803855a:	7bba      	ldrb	r2, [r7, #14]
 803855c:	4862      	ldr	r0, [pc, #392]	; (80386e8 <drv_uartInitInstance+0x228>)
 803855e:	460b      	mov	r3, r1
 8038560:	009b      	lsls	r3, r3, #2
 8038562:	440b      	add	r3, r1
 8038564:	00db      	lsls	r3, r3, #3
 8038566:	4403      	add	r3, r0
 8038568:	330c      	adds	r3, #12
 803856a:	6819      	ldr	r1, [r3, #0]
 803856c:	4860      	ldr	r0, [pc, #384]	; (80386f0 <drv_uartInitInstance+0x230>)
 803856e:	4613      	mov	r3, r2
 8038570:	011b      	lsls	r3, r3, #4
 8038572:	4413      	add	r3, r2
 8038574:	009b      	lsls	r3, r3, #2
 8038576:	4403      	add	r3, r0
 8038578:	330c      	adds	r3, #12
 803857a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Parity       = uartConfig[uartInstanceIndex].parity;
 803857c:	79f9      	ldrb	r1, [r7, #7]
 803857e:	7bba      	ldrb	r2, [r7, #14]
 8038580:	4859      	ldr	r0, [pc, #356]	; (80386e8 <drv_uartInitInstance+0x228>)
 8038582:	460b      	mov	r3, r1
 8038584:	009b      	lsls	r3, r3, #2
 8038586:	440b      	add	r3, r1
 8038588:	00db      	lsls	r3, r3, #3
 803858a:	4403      	add	r3, r0
 803858c:	3310      	adds	r3, #16
 803858e:	6819      	ldr	r1, [r3, #0]
 8038590:	4857      	ldr	r0, [pc, #348]	; (80386f0 <drv_uartInitInstance+0x230>)
 8038592:	4613      	mov	r3, r2
 8038594:	011b      	lsls	r3, r3, #4
 8038596:	4413      	add	r3, r2
 8038598:	009b      	lsls	r3, r3, #2
 803859a:	4403      	add	r3, r0
 803859c:	3310      	adds	r3, #16
 803859e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Mode         = uartConfig[uartInstanceIndex].mode;
 80385a0:	79f9      	ldrb	r1, [r7, #7]
 80385a2:	7bba      	ldrb	r2, [r7, #14]
 80385a4:	4850      	ldr	r0, [pc, #320]	; (80386e8 <drv_uartInitInstance+0x228>)
 80385a6:	460b      	mov	r3, r1
 80385a8:	009b      	lsls	r3, r3, #2
 80385aa:	440b      	add	r3, r1
 80385ac:	00db      	lsls	r3, r3, #3
 80385ae:	4403      	add	r3, r0
 80385b0:	3314      	adds	r3, #20
 80385b2:	6819      	ldr	r1, [r3, #0]
 80385b4:	484e      	ldr	r0, [pc, #312]	; (80386f0 <drv_uartInitInstance+0x230>)
 80385b6:	4613      	mov	r3, r2
 80385b8:	011b      	lsls	r3, r3, #4
 80385ba:	4413      	add	r3, r2
 80385bc:	009b      	lsls	r3, r3, #2
 80385be:	4403      	add	r3, r0
 80385c0:	3314      	adds	r3, #20
 80385c2:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.HwFlowCtl    = uartConfig[uartInstanceIndex].hwFlowControl;
 80385c4:	79f9      	ldrb	r1, [r7, #7]
 80385c6:	7bba      	ldrb	r2, [r7, #14]
 80385c8:	4847      	ldr	r0, [pc, #284]	; (80386e8 <drv_uartInitInstance+0x228>)
 80385ca:	460b      	mov	r3, r1
 80385cc:	009b      	lsls	r3, r3, #2
 80385ce:	440b      	add	r3, r1
 80385d0:	00db      	lsls	r3, r3, #3
 80385d2:	4403      	add	r3, r0
 80385d4:	3318      	adds	r3, #24
 80385d6:	6819      	ldr	r1, [r3, #0]
 80385d8:	4845      	ldr	r0, [pc, #276]	; (80386f0 <drv_uartInitInstance+0x230>)
 80385da:	4613      	mov	r3, r2
 80385dc:	011b      	lsls	r3, r3, #4
 80385de:	4413      	add	r3, r2
 80385e0:	009b      	lsls	r3, r3, #2
 80385e2:	4403      	add	r3, r0
 80385e4:	3318      	adds	r3, #24
 80385e6:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.OverSampling = uartConfig[uartInstanceIndex].overSampling;
 80385e8:	79f9      	ldrb	r1, [r7, #7]
 80385ea:	7bba      	ldrb	r2, [r7, #14]
 80385ec:	483e      	ldr	r0, [pc, #248]	; (80386e8 <drv_uartInitInstance+0x228>)
 80385ee:	460b      	mov	r3, r1
 80385f0:	009b      	lsls	r3, r3, #2
 80385f2:	440b      	add	r3, r1
 80385f4:	00db      	lsls	r3, r3, #3
 80385f6:	4403      	add	r3, r0
 80385f8:	331c      	adds	r3, #28
 80385fa:	6819      	ldr	r1, [r3, #0]
 80385fc:	483c      	ldr	r0, [pc, #240]	; (80386f0 <drv_uartInitInstance+0x230>)
 80385fe:	4613      	mov	r3, r2
 8038600:	011b      	lsls	r3, r3, #4
 8038602:	4413      	add	r3, r2
 8038604:	009b      	lsls	r3, r3, #2
 8038606:	4403      	add	r3, r0
 8038608:	331c      	adds	r3, #28
 803860a:	6019      	str	r1, [r3, #0]

            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 803860c:	7bba      	ldrb	r2, [r7, #14]
 803860e:	4613      	mov	r3, r2
 8038610:	011b      	lsls	r3, r3, #4
 8038612:	4413      	add	r3, r2
 8038614:	009b      	lsls	r3, r3, #2
 8038616:	4a36      	ldr	r2, [pc, #216]	; (80386f0 <drv_uartInitInstance+0x230>)
 8038618:	4413      	add	r3, r2
 803861a:	4618      	mov	r0, r3
 803861c:	f7f7 fa86 	bl	802fb2c <HAL_UART_Init>
 8038620:	4603      	mov	r3, r0
 8038622:	2b00      	cmp	r3, #0
 8038624:	d14a      	bne.n	80386bc <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 8038626:	7bbb      	ldrb	r3, [r7, #14]
 8038628:	009b      	lsls	r3, r3, #2
 803862a:	4a32      	ldr	r2, [pc, #200]	; (80386f4 <drv_uartInitInstance+0x234>)
 803862c:	4413      	add	r3, r2
 803862e:	4618      	mov	r0, r3
 8038630:	f005 fe68 	bl	803e304 <gos_mutexInit>
 8038634:	4603      	mov	r3, r0
            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 8038636:	2b55      	cmp	r3, #85	; 0x55
 8038638:	d140      	bne.n	80386bc <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 803863a:	7bbb      	ldrb	r3, [r7, #14]
 803863c:	009b      	lsls	r3, r3, #2
 803863e:	4a2e      	ldr	r2, [pc, #184]	; (80386f8 <drv_uartInitInstance+0x238>)
 8038640:	4413      	add	r3, r2
 8038642:	4618      	mov	r0, r3
 8038644:	f005 fe5e 	bl	803e304 <gos_mutexInit>
 8038648:	4603      	mov	r3, r0
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 803864a:	2b55      	cmp	r3, #85	; 0x55
 803864c:	d136      	bne.n	80386bc <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 803864e:	7bba      	ldrb	r2, [r7, #14]
 8038650:	4613      	mov	r3, r2
 8038652:	005b      	lsls	r3, r3, #1
 8038654:	4413      	add	r3, r2
 8038656:	009b      	lsls	r3, r3, #2
 8038658:	4a28      	ldr	r2, [pc, #160]	; (80386fc <drv_uartInitInstance+0x23c>)
 803865a:	4413      	add	r3, r2
 803865c:	4618      	mov	r0, r3
 803865e:	f008 fc3f 	bl	8040ee0 <gos_triggerInit>
 8038662:	4603      	mov	r3, r0
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 8038664:	2b55      	cmp	r3, #85	; 0x55
 8038666:	d129      	bne.n	80386bc <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 8038668:	7bba      	ldrb	r2, [r7, #14]
 803866a:	4613      	mov	r3, r2
 803866c:	005b      	lsls	r3, r3, #1
 803866e:	4413      	add	r3, r2
 8038670:	009b      	lsls	r3, r3, #2
 8038672:	4a23      	ldr	r2, [pc, #140]	; (8038700 <drv_uartInitInstance+0x240>)
 8038674:	4413      	add	r3, r2
 8038676:	4618      	mov	r0, r3
 8038678:	f008 fc32 	bl	8040ee0 <gos_triggerInit>
 803867c:	4603      	mov	r3, r0
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 803867e:	2b55      	cmp	r3, #85	; 0x55
 8038680:	d11c      	bne.n	80386bc <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8038682:	7bba      	ldrb	r2, [r7, #14]
 8038684:	4613      	mov	r3, r2
 8038686:	005b      	lsls	r3, r3, #1
 8038688:	4413      	add	r3, r2
 803868a:	009b      	lsls	r3, r3, #2
 803868c:	4a1b      	ldr	r2, [pc, #108]	; (80386fc <drv_uartInitInstance+0x23c>)
 803868e:	4413      	add	r3, r2
 8038690:	4618      	mov	r0, r3
 8038692:	f008 fc41 	bl	8040f18 <gos_triggerReset>
 8038696:	4603      	mov	r3, r0
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 8038698:	2b55      	cmp	r3, #85	; 0x55
 803869a:	d10f      	bne.n	80386bc <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartTxReadyTriggers[instance]) == GOS_SUCCESS
 803869c:	7bba      	ldrb	r2, [r7, #14]
 803869e:	4613      	mov	r3, r2
 80386a0:	005b      	lsls	r3, r3, #1
 80386a2:	4413      	add	r3, r2
 80386a4:	009b      	lsls	r3, r3, #2
 80386a6:	4a16      	ldr	r2, [pc, #88]	; (8038700 <drv_uartInitInstance+0x240>)
 80386a8:	4413      	add	r3, r2
 80386aa:	4618      	mov	r0, r3
 80386ac:	f008 fc34 	bl	8040f18 <gos_triggerReset>
 80386b0:	4603      	mov	r3, r0
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 80386b2:	2b55      	cmp	r3, #85	; 0x55
 80386b4:	d102      	bne.n	80386bc <drv_uartInitInstance+0x1fc>
                )
            {
                uartInitResult = GOS_SUCCESS;
 80386b6:	2355      	movs	r3, #85	; 0x55
 80386b8:	73fb      	strb	r3, [r7, #15]
 80386ba:	e00c      	b.n	80386d6 <drv_uartInitInstance+0x216>
            }
            else
            {
                // Init error.
                DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INSTANCE_INIT);
 80386bc:	4b11      	ldr	r3, [pc, #68]	; (8038704 <drv_uartInitInstance+0x244>)
 80386be:	681b      	ldr	r3, [r3, #0]
 80386c0:	f043 0304 	orr.w	r3, r3, #4
 80386c4:	4a0f      	ldr	r2, [pc, #60]	; (8038704 <drv_uartInitInstance+0x244>)
 80386c6:	6013      	str	r3, [r2, #0]
 80386c8:	e005      	b.n	80386d6 <drv_uartInitInstance+0x216>
            }
        }
        else
        {
            // Index is out of array boundary.
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INDEX_OUT_OF_BOUND);
 80386ca:	4b0e      	ldr	r3, [pc, #56]	; (8038704 <drv_uartInitInstance+0x244>)
 80386cc:	681b      	ldr	r3, [r3, #0]
 80386ce:	f043 0302 	orr.w	r3, r3, #2
 80386d2:	4a0c      	ldr	r2, [pc, #48]	; (8038704 <drv_uartInitInstance+0x244>)
 80386d4:	6013      	str	r3, [r2, #0]
    {
        // Configuration is NULL.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
    }

    return uartInitResult;
 80386d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80386d8:	4618      	mov	r0, r3
 80386da:	3710      	adds	r7, #16
 80386dc:	46bd      	mov	sp, r7
 80386de:	bd80      	pop	{r7, pc}
 80386e0:	2000194c 	.word	0x2000194c
 80386e4:	cccccccd 	.word	0xcccccccd
 80386e8:	080493f4 	.word	0x080493f4
 80386ec:	20001b28 	.word	0x20001b28
 80386f0:	20006c40 	.word	0x20006c40
 80386f4:	20006dd8 	.word	0x20006dd8
 80386f8:	20006df0 	.word	0x20006df0
 80386fc:	20006e08 	.word	0x20006e08
 8038700:	20006e50 	.word	0x20006e50
 8038704:	20006c3c 	.word	0x20006c3c

08038708 <drv_uartGetErrorFlags>:

/*
 * Function: drv_uartGetErrorFlags
 */
gos_result_t drv_uartGetErrorFlags (u32_t* pErrorFlags)
{
 8038708:	b480      	push	{r7}
 803870a:	b085      	sub	sp, #20
 803870c:	af00      	add	r7, sp, #0
 803870e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t uartGetErrorFlagsResult = GOS_ERROR;
 8038710:	23ae      	movs	r3, #174	; 0xae
 8038712:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pErrorFlags != NULL)
 8038714:	687b      	ldr	r3, [r7, #4]
 8038716:	2b00      	cmp	r3, #0
 8038718:	d005      	beq.n	8038726 <drv_uartGetErrorFlags+0x1e>
    {
        *pErrorFlags = uartErrorFlags;
 803871a:	4b06      	ldr	r3, [pc, #24]	; (8038734 <drv_uartGetErrorFlags+0x2c>)
 803871c:	681a      	ldr	r2, [r3, #0]
 803871e:	687b      	ldr	r3, [r7, #4]
 8038720:	601a      	str	r2, [r3, #0]
        uartGetErrorFlagsResult = GOS_SUCCESS;
 8038722:	2355      	movs	r3, #85	; 0x55
 8038724:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return uartGetErrorFlagsResult;
 8038726:	7bfb      	ldrb	r3, [r7, #15]
}
 8038728:	4618      	mov	r0, r3
 803872a:	3714      	adds	r7, #20
 803872c:	46bd      	mov	sp, r7
 803872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038732:	4770      	bx	lr
 8038734:	20006c3c 	.word	0x20006c3c

08038738 <drv_uartTransmitBlocking>:
 */
GOS_INLINE gos_result_t drv_uartTransmitBlocking (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t timeout
        )
{
 8038738:	b580      	push	{r7, lr}
 803873a:	b086      	sub	sp, #24
 803873c:	af00      	add	r7, sp, #0
 803873e:	60b9      	str	r1, [r7, #8]
 8038740:	607b      	str	r3, [r7, #4]
 8038742:	4603      	mov	r3, r0
 8038744:	73fb      	strb	r3, [r7, #15]
 8038746:	4613      	mov	r3, r2
 8038748:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 803874a:	23ae      	movs	r3, #174	; 0xae
 803874c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 803874e:	4b1d      	ldr	r3, [pc, #116]	; (80387c4 <drv_uartTransmitBlocking+0x8c>)
 8038750:	781b      	ldrb	r3, [r3, #0]
 8038752:	3301      	adds	r3, #1
 8038754:	b2da      	uxtb	r2, r3
 8038756:	4b1b      	ldr	r3, [pc, #108]	; (80387c4 <drv_uartTransmitBlocking+0x8c>)
 8038758:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 803875a:	7bfa      	ldrb	r2, [r7, #15]
 803875c:	4613      	mov	r3, r2
 803875e:	011b      	lsls	r3, r3, #4
 8038760:	4413      	add	r3, r2
 8038762:	009b      	lsls	r3, r3, #2
 8038764:	4a18      	ldr	r2, [pc, #96]	; (80387c8 <drv_uartTransmitBlocking+0x90>)
 8038766:	4413      	add	r3, r2
 8038768:	4618      	mov	r0, r3
 803876a:	f7f7 fbe1 	bl	802ff30 <HAL_UART_Abort>
 803876e:	4603      	mov	r3, r0
 8038770:	2b00      	cmp	r3, #0
 8038772:	d111      	bne.n	8038798 <drv_uartTransmitBlocking+0x60>
        HAL_UART_Transmit(&huarts[instance], message, size, timeout) == HAL_OK)
 8038774:	7bfa      	ldrb	r2, [r7, #15]
 8038776:	4613      	mov	r3, r2
 8038778:	011b      	lsls	r3, r3, #4
 803877a:	4413      	add	r3, r2
 803877c:	009b      	lsls	r3, r3, #2
 803877e:	4a12      	ldr	r2, [pc, #72]	; (80387c8 <drv_uartTransmitBlocking+0x90>)
 8038780:	1898      	adds	r0, r3, r2
 8038782:	89ba      	ldrh	r2, [r7, #12]
 8038784:	687b      	ldr	r3, [r7, #4]
 8038786:	68b9      	ldr	r1, [r7, #8]
 8038788:	f7f7 fa1d 	bl	802fbc6 <HAL_UART_Transmit>
 803878c:	4603      	mov	r3, r0
    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 803878e:	2b00      	cmp	r3, #0
 8038790:	d102      	bne.n	8038798 <drv_uartTransmitBlocking+0x60>
    {
        uartTransmitResult = GOS_SUCCESS;
 8038792:	2355      	movs	r3, #85	; 0x55
 8038794:	75fb      	strb	r3, [r7, #23]
 8038796:	e005      	b.n	80387a4 <drv_uartTransmitBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_BLOCKING);
 8038798:	4b0c      	ldr	r3, [pc, #48]	; (80387cc <drv_uartTransmitBlocking+0x94>)
 803879a:	681b      	ldr	r3, [r3, #0]
 803879c:	f043 0310 	orr.w	r3, r3, #16
 80387a0:	4a0a      	ldr	r2, [pc, #40]	; (80387cc <drv_uartTransmitBlocking+0x94>)
 80387a2:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 80387a4:	4b07      	ldr	r3, [pc, #28]	; (80387c4 <drv_uartTransmitBlocking+0x8c>)
 80387a6:	781b      	ldrb	r3, [r3, #0]
 80387a8:	2b00      	cmp	r3, #0
 80387aa:	d005      	beq.n	80387b8 <drv_uartTransmitBlocking+0x80>
 80387ac:	4b05      	ldr	r3, [pc, #20]	; (80387c4 <drv_uartTransmitBlocking+0x8c>)
 80387ae:	781b      	ldrb	r3, [r3, #0]
 80387b0:	3b01      	subs	r3, #1
 80387b2:	b2da      	uxtb	r2, r3
 80387b4:	4b03      	ldr	r3, [pc, #12]	; (80387c4 <drv_uartTransmitBlocking+0x8c>)
 80387b6:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 80387b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80387ba:	4618      	mov	r0, r3
 80387bc:	3718      	adds	r7, #24
 80387be:	46bd      	mov	sp, r7
 80387c0:	bd80      	pop	{r7, pc}
 80387c2:	bf00      	nop
 80387c4:	20007445 	.word	0x20007445
 80387c8:	20006c40 	.word	0x20006c40
 80387cc:	20006c3c 	.word	0x20006c3c

080387d0 <drv_uartTransmitDMA>:
GOS_INLINE gos_result_t drv_uartTransmitDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 80387d0:	b580      	push	{r7, lr}
 80387d2:	b086      	sub	sp, #24
 80387d4:	af00      	add	r7, sp, #0
 80387d6:	60b9      	str	r1, [r7, #8]
 80387d8:	607b      	str	r3, [r7, #4]
 80387da:	4603      	mov	r3, r0
 80387dc:	73fb      	strb	r3, [r7, #15]
 80387de:	4613      	mov	r3, r2
 80387e0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 80387e2:	23ae      	movs	r3, #174	; 0xae
 80387e4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 80387e6:	7bfb      	ldrb	r3, [r7, #15]
 80387e8:	009b      	lsls	r3, r3, #2
 80387ea:	4a2d      	ldr	r2, [pc, #180]	; (80388a0 <drv_uartTransmitDMA+0xd0>)
 80387ec:	4413      	add	r3, r2
 80387ee:	6879      	ldr	r1, [r7, #4]
 80387f0:	4618      	mov	r0, r3
 80387f2:	f005 fda1 	bl	803e338 <gos_mutexLock>
 80387f6:	4603      	mov	r3, r0
 80387f8:	2b55      	cmp	r3, #85	; 0x55
 80387fa:	d13e      	bne.n	803887a <drv_uartTransmitDMA+0xaa>
    {
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 80387fc:	7bfa      	ldrb	r2, [r7, #15]
 80387fe:	4613      	mov	r3, r2
 8038800:	011b      	lsls	r3, r3, #4
 8038802:	4413      	add	r3, r2
 8038804:	009b      	lsls	r3, r3, #2
 8038806:	4a27      	ldr	r2, [pc, #156]	; (80388a4 <drv_uartTransmitDMA+0xd4>)
 8038808:	4413      	add	r3, r2
 803880a:	89ba      	ldrh	r2, [r7, #12]
 803880c:	68b9      	ldr	r1, [r7, #8]
 803880e:	4618      	mov	r0, r3
 8038810:	f7f7 fae0 	bl	802fdd4 <HAL_UART_Transmit_DMA>
 8038814:	4603      	mov	r3, r0
 8038816:	2b00      	cmp	r3, #0
 8038818:	d11e      	bne.n	8038858 <drv_uartTransmitDMA+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 803881a:	7bfa      	ldrb	r2, [r7, #15]
 803881c:	4613      	mov	r3, r2
 803881e:	005b      	lsls	r3, r3, #1
 8038820:	4413      	add	r3, r2
 8038822:	009b      	lsls	r3, r3, #2
 8038824:	4a20      	ldr	r2, [pc, #128]	; (80388a8 <drv_uartTransmitDMA+0xd8>)
 8038826:	4413      	add	r3, r2
 8038828:	6a3a      	ldr	r2, [r7, #32]
 803882a:	2101      	movs	r1, #1
 803882c:	4618      	mov	r0, r3
 803882e:	f008 fbcb 	bl	8040fc8 <gos_triggerWait>
 8038832:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 8038834:	2b55      	cmp	r3, #85	; 0x55
 8038836:	d10f      	bne.n	8038858 <drv_uartTransmitDMA+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 8038838:	7bfa      	ldrb	r2, [r7, #15]
 803883a:	4613      	mov	r3, r2
 803883c:	005b      	lsls	r3, r3, #1
 803883e:	4413      	add	r3, r2
 8038840:	009b      	lsls	r3, r3, #2
 8038842:	4a19      	ldr	r2, [pc, #100]	; (80388a8 <drv_uartTransmitDMA+0xd8>)
 8038844:	4413      	add	r3, r2
 8038846:	4618      	mov	r0, r3
 8038848:	f008 fb66 	bl	8040f18 <gos_triggerReset>
 803884c:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 803884e:	2b55      	cmp	r3, #85	; 0x55
 8038850:	d102      	bne.n	8038858 <drv_uartTransmitDMA+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 8038852:	2355      	movs	r3, #85	; 0x55
 8038854:	75fb      	strb	r3, [r7, #23]
 8038856:	e016      	b.n	8038886 <drv_uartTransmitDMA+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8038858:	7bfa      	ldrb	r2, [r7, #15]
 803885a:	4613      	mov	r3, r2
 803885c:	011b      	lsls	r3, r3, #4
 803885e:	4413      	add	r3, r2
 8038860:	009b      	lsls	r3, r3, #2
 8038862:	4a10      	ldr	r2, [pc, #64]	; (80388a4 <drv_uartTransmitDMA+0xd4>)
 8038864:	4413      	add	r3, r2
 8038866:	4618      	mov	r0, r3
 8038868:	f7f7 fc4e 	bl	8030108 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_TRIG_HAL);
 803886c:	4b0f      	ldr	r3, [pc, #60]	; (80388ac <drv_uartTransmitDMA+0xdc>)
 803886e:	681b      	ldr	r3, [r3, #0]
 8038870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8038874:	4a0d      	ldr	r2, [pc, #52]	; (80388ac <drv_uartTransmitDMA+0xdc>)
 8038876:	6013      	str	r3, [r2, #0]
 8038878:	e005      	b.n	8038886 <drv_uartTransmitDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_MUTEX);
 803887a:	4b0c      	ldr	r3, [pc, #48]	; (80388ac <drv_uartTransmitDMA+0xdc>)
 803887c:	681b      	ldr	r3, [r3, #0]
 803887e:	f043 0320 	orr.w	r3, r3, #32
 8038882:	4a0a      	ldr	r2, [pc, #40]	; (80388ac <drv_uartTransmitDMA+0xdc>)
 8038884:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 8038886:	7bfb      	ldrb	r3, [r7, #15]
 8038888:	009b      	lsls	r3, r3, #2
 803888a:	4a05      	ldr	r2, [pc, #20]	; (80388a0 <drv_uartTransmitDMA+0xd0>)
 803888c:	4413      	add	r3, r2
 803888e:	4618      	mov	r0, r3
 8038890:	f005 fe58 	bl	803e544 <gos_mutexUnlock>

    return uartTransmitResult;
 8038894:	7dfb      	ldrb	r3, [r7, #23]
}
 8038896:	4618      	mov	r0, r3
 8038898:	3718      	adds	r7, #24
 803889a:	46bd      	mov	sp, r7
 803889c:	bd80      	pop	{r7, pc}
 803889e:	bf00      	nop
 80388a0:	20006df0 	.word	0x20006df0
 80388a4:	20006c40 	.word	0x20006c40
 80388a8:	20006e50 	.word	0x20006e50
 80388ac:	20006c3c 	.word	0x20006c3c

080388b0 <drv_uartReceiveDMA>:
GOS_INLINE gos_result_t drv_uartReceiveDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 80388b0:	b580      	push	{r7, lr}
 80388b2:	b086      	sub	sp, #24
 80388b4:	af00      	add	r7, sp, #0
 80388b6:	60b9      	str	r1, [r7, #8]
 80388b8:	607b      	str	r3, [r7, #4]
 80388ba:	4603      	mov	r3, r0
 80388bc:	73fb      	strb	r3, [r7, #15]
 80388be:	4613      	mov	r3, r2
 80388c0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 80388c2:	23ae      	movs	r3, #174	; 0xae
 80388c4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 80388c6:	7bfb      	ldrb	r3, [r7, #15]
 80388c8:	009b      	lsls	r3, r3, #2
 80388ca:	4a2d      	ldr	r2, [pc, #180]	; (8038980 <drv_uartReceiveDMA+0xd0>)
 80388cc:	4413      	add	r3, r2
 80388ce:	6879      	ldr	r1, [r7, #4]
 80388d0:	4618      	mov	r0, r3
 80388d2:	f005 fd31 	bl	803e338 <gos_mutexLock>
 80388d6:	4603      	mov	r3, r0
 80388d8:	2b55      	cmp	r3, #85	; 0x55
 80388da:	d13e      	bne.n	803895a <drv_uartReceiveDMA+0xaa>
    {
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 80388dc:	7bfa      	ldrb	r2, [r7, #15]
 80388de:	4613      	mov	r3, r2
 80388e0:	011b      	lsls	r3, r3, #4
 80388e2:	4413      	add	r3, r2
 80388e4:	009b      	lsls	r3, r3, #2
 80388e6:	4a27      	ldr	r2, [pc, #156]	; (8038984 <drv_uartReceiveDMA+0xd4>)
 80388e8:	4413      	add	r3, r2
 80388ea:	89ba      	ldrh	r2, [r7, #12]
 80388ec:	68b9      	ldr	r1, [r7, #8]
 80388ee:	4618      	mov	r0, r3
 80388f0:	f7f7 faee 	bl	802fed0 <HAL_UART_Receive_DMA>
 80388f4:	4603      	mov	r3, r0
 80388f6:	2b00      	cmp	r3, #0
 80388f8:	d11e      	bne.n	8038938 <drv_uartReceiveDMA+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80388fa:	7bfa      	ldrb	r2, [r7, #15]
 80388fc:	4613      	mov	r3, r2
 80388fe:	005b      	lsls	r3, r3, #1
 8038900:	4413      	add	r3, r2
 8038902:	009b      	lsls	r3, r3, #2
 8038904:	4a20      	ldr	r2, [pc, #128]	; (8038988 <drv_uartReceiveDMA+0xd8>)
 8038906:	4413      	add	r3, r2
 8038908:	6a3a      	ldr	r2, [r7, #32]
 803890a:	2101      	movs	r1, #1
 803890c:	4618      	mov	r0, r3
 803890e:	f008 fb5b 	bl	8040fc8 <gos_triggerWait>
 8038912:	4603      	mov	r3, r0
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 8038914:	2b55      	cmp	r3, #85	; 0x55
 8038916:	d10f      	bne.n	8038938 <drv_uartReceiveDMA+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 8038918:	7bfa      	ldrb	r2, [r7, #15]
 803891a:	4613      	mov	r3, r2
 803891c:	005b      	lsls	r3, r3, #1
 803891e:	4413      	add	r3, r2
 8038920:	009b      	lsls	r3, r3, #2
 8038922:	4a19      	ldr	r2, [pc, #100]	; (8038988 <drv_uartReceiveDMA+0xd8>)
 8038924:	4413      	add	r3, r2
 8038926:	4618      	mov	r0, r3
 8038928:	f008 faf6 	bl	8040f18 <gos_triggerReset>
 803892c:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 803892e:	2b55      	cmp	r3, #85	; 0x55
 8038930:	d102      	bne.n	8038938 <drv_uartReceiveDMA+0x88>
        {
            uartReceiveResult = GOS_SUCCESS;
 8038932:	2355      	movs	r3, #85	; 0x55
 8038934:	75fb      	strb	r3, [r7, #23]
 8038936:	e016      	b.n	8038966 <drv_uartReceiveDMA+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8038938:	7bfa      	ldrb	r2, [r7, #15]
 803893a:	4613      	mov	r3, r2
 803893c:	011b      	lsls	r3, r3, #4
 803893e:	4413      	add	r3, r2
 8038940:	009b      	lsls	r3, r3, #2
 8038942:	4a10      	ldr	r2, [pc, #64]	; (8038984 <drv_uartReceiveDMA+0xd4>)
 8038944:	4413      	add	r3, r2
 8038946:	4618      	mov	r0, r3
 8038948:	f7f7 fbde 	bl	8030108 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_TRIG_HAL);
 803894c:	4b0f      	ldr	r3, [pc, #60]	; (803898c <drv_uartReceiveDMA+0xdc>)
 803894e:	681b      	ldr	r3, [r3, #0]
 8038950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8038954:	4a0d      	ldr	r2, [pc, #52]	; (803898c <drv_uartReceiveDMA+0xdc>)
 8038956:	6013      	str	r3, [r2, #0]
 8038958:	e005      	b.n	8038966 <drv_uartReceiveDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_MUTEX);
 803895a:	4b0c      	ldr	r3, [pc, #48]	; (803898c <drv_uartReceiveDMA+0xdc>)
 803895c:	681b      	ldr	r3, [r3, #0]
 803895e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8038962:	4a0a      	ldr	r2, [pc, #40]	; (803898c <drv_uartReceiveDMA+0xdc>)
 8038964:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 8038966:	7bfb      	ldrb	r3, [r7, #15]
 8038968:	009b      	lsls	r3, r3, #2
 803896a:	4a05      	ldr	r2, [pc, #20]	; (8038980 <drv_uartReceiveDMA+0xd0>)
 803896c:	4413      	add	r3, r2
 803896e:	4618      	mov	r0, r3
 8038970:	f005 fde8 	bl	803e544 <gos_mutexUnlock>

    return uartReceiveResult;
 8038974:	7dfb      	ldrb	r3, [r7, #23]
}
 8038976:	4618      	mov	r0, r3
 8038978:	3718      	adds	r7, #24
 803897a:	46bd      	mov	sp, r7
 803897c:	bd80      	pop	{r7, pc}
 803897e:	bf00      	nop
 8038980:	20006dd8 	.word	0x20006dd8
 8038984:	20006c40 	.word	0x20006c40
 8038988:	20006e08 	.word	0x20006e08
 803898c:	20006c3c 	.word	0x20006c3c

08038990 <drv_uartTransmitIT>:
GOS_INLINE gos_result_t drv_uartTransmitIT (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8038990:	b580      	push	{r7, lr}
 8038992:	b086      	sub	sp, #24
 8038994:	af00      	add	r7, sp, #0
 8038996:	60b9      	str	r1, [r7, #8]
 8038998:	607b      	str	r3, [r7, #4]
 803899a:	4603      	mov	r3, r0
 803899c:	73fb      	strb	r3, [r7, #15]
 803899e:	4613      	mov	r3, r2
 80389a0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 80389a2:	23ae      	movs	r3, #174	; 0xae
 80389a4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 80389a6:	7bfb      	ldrb	r3, [r7, #15]
 80389a8:	009b      	lsls	r3, r3, #2
 80389aa:	4a2d      	ldr	r2, [pc, #180]	; (8038a60 <drv_uartTransmitIT+0xd0>)
 80389ac:	4413      	add	r3, r2
 80389ae:	6879      	ldr	r1, [r7, #4]
 80389b0:	4618      	mov	r0, r3
 80389b2:	f005 fcc1 	bl	803e338 <gos_mutexLock>
 80389b6:	4603      	mov	r3, r0
 80389b8:	2b55      	cmp	r3, #85	; 0x55
 80389ba:	d13e      	bne.n	8038a3a <drv_uartTransmitIT+0xaa>
    {

        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 80389bc:	7bfa      	ldrb	r2, [r7, #15]
 80389be:	4613      	mov	r3, r2
 80389c0:	011b      	lsls	r3, r3, #4
 80389c2:	4413      	add	r3, r2
 80389c4:	009b      	lsls	r3, r3, #2
 80389c6:	4a27      	ldr	r2, [pc, #156]	; (8038a64 <drv_uartTransmitIT+0xd4>)
 80389c8:	4413      	add	r3, r2
 80389ca:	89ba      	ldrh	r2, [r7, #12]
 80389cc:	68b9      	ldr	r1, [r7, #8]
 80389ce:	4618      	mov	r0, r3
 80389d0:	f7f7 f98b 	bl	802fcea <HAL_UART_Transmit_IT>
 80389d4:	4603      	mov	r3, r0
 80389d6:	2b00      	cmp	r3, #0
 80389d8:	d11e      	bne.n	8038a18 <drv_uartTransmitIT+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80389da:	7bfa      	ldrb	r2, [r7, #15]
 80389dc:	4613      	mov	r3, r2
 80389de:	005b      	lsls	r3, r3, #1
 80389e0:	4413      	add	r3, r2
 80389e2:	009b      	lsls	r3, r3, #2
 80389e4:	4a20      	ldr	r2, [pc, #128]	; (8038a68 <drv_uartTransmitIT+0xd8>)
 80389e6:	4413      	add	r3, r2
 80389e8:	6a3a      	ldr	r2, [r7, #32]
 80389ea:	2101      	movs	r1, #1
 80389ec:	4618      	mov	r0, r3
 80389ee:	f008 faeb 	bl	8040fc8 <gos_triggerWait>
 80389f2:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 80389f4:	2b55      	cmp	r3, #85	; 0x55
 80389f6:	d10f      	bne.n	8038a18 <drv_uartTransmitIT+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 80389f8:	7bfa      	ldrb	r2, [r7, #15]
 80389fa:	4613      	mov	r3, r2
 80389fc:	005b      	lsls	r3, r3, #1
 80389fe:	4413      	add	r3, r2
 8038a00:	009b      	lsls	r3, r3, #2
 8038a02:	4a19      	ldr	r2, [pc, #100]	; (8038a68 <drv_uartTransmitIT+0xd8>)
 8038a04:	4413      	add	r3, r2
 8038a06:	4618      	mov	r0, r3
 8038a08:	f008 fa86 	bl	8040f18 <gos_triggerReset>
 8038a0c:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8038a0e:	2b55      	cmp	r3, #85	; 0x55
 8038a10:	d102      	bne.n	8038a18 <drv_uartTransmitIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 8038a12:	2355      	movs	r3, #85	; 0x55
 8038a14:	75fb      	strb	r3, [r7, #23]
 8038a16:	e016      	b.n	8038a46 <drv_uartTransmitIT+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8038a18:	7bfa      	ldrb	r2, [r7, #15]
 8038a1a:	4613      	mov	r3, r2
 8038a1c:	011b      	lsls	r3, r3, #4
 8038a1e:	4413      	add	r3, r2
 8038a20:	009b      	lsls	r3, r3, #2
 8038a22:	4a10      	ldr	r2, [pc, #64]	; (8038a64 <drv_uartTransmitIT+0xd4>)
 8038a24:	4413      	add	r3, r2
 8038a26:	4618      	mov	r0, r3
 8038a28:	f7f7 fb6e 	bl	8030108 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_TRIG_HAL);
 8038a2c:	4b0f      	ldr	r3, [pc, #60]	; (8038a6c <drv_uartTransmitIT+0xdc>)
 8038a2e:	681b      	ldr	r3, [r3, #0]
 8038a30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8038a34:	4a0d      	ldr	r2, [pc, #52]	; (8038a6c <drv_uartTransmitIT+0xdc>)
 8038a36:	6013      	str	r3, [r2, #0]
 8038a38:	e005      	b.n	8038a46 <drv_uartTransmitIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_MUTEX);
 8038a3a:	4b0c      	ldr	r3, [pc, #48]	; (8038a6c <drv_uartTransmitIT+0xdc>)
 8038a3c:	681b      	ldr	r3, [r3, #0]
 8038a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8038a42:	4a0a      	ldr	r2, [pc, #40]	; (8038a6c <drv_uartTransmitIT+0xdc>)
 8038a44:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 8038a46:	7bfb      	ldrb	r3, [r7, #15]
 8038a48:	009b      	lsls	r3, r3, #2
 8038a4a:	4a05      	ldr	r2, [pc, #20]	; (8038a60 <drv_uartTransmitIT+0xd0>)
 8038a4c:	4413      	add	r3, r2
 8038a4e:	4618      	mov	r0, r3
 8038a50:	f005 fd78 	bl	803e544 <gos_mutexUnlock>

    return uartTransmitResult;
 8038a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8038a56:	4618      	mov	r0, r3
 8038a58:	3718      	adds	r7, #24
 8038a5a:	46bd      	mov	sp, r7
 8038a5c:	bd80      	pop	{r7, pc}
 8038a5e:	bf00      	nop
 8038a60:	20006df0 	.word	0x20006df0
 8038a64:	20006c40 	.word	0x20006c40
 8038a68:	20006e50 	.word	0x20006e50
 8038a6c:	20006c3c 	.word	0x20006c3c

08038a70 <drv_uartReceiveIT>:

/*
 * Function: drv_uartReceiveIT
 */
GOS_INLINE gos_result_t drv_uartReceiveIT (drv_uartPeriphInstance_t instance, u8_t* message, u16_t size, u32_t mutexTmo, u32_t triggerTmo)
{
 8038a70:	b580      	push	{r7, lr}
 8038a72:	b086      	sub	sp, #24
 8038a74:	af00      	add	r7, sp, #0
 8038a76:	60b9      	str	r1, [r7, #8]
 8038a78:	607b      	str	r3, [r7, #4]
 8038a7a:	4603      	mov	r3, r0
 8038a7c:	73fb      	strb	r3, [r7, #15]
 8038a7e:	4613      	mov	r3, r2
 8038a80:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult  = GOS_ERROR;
 8038a82:	23ae      	movs	r3, #174	; 0xae
 8038a84:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8038a86:	7bfb      	ldrb	r3, [r7, #15]
 8038a88:	009b      	lsls	r3, r3, #2
 8038a8a:	4a38      	ldr	r2, [pc, #224]	; (8038b6c <drv_uartReceiveIT+0xfc>)
 8038a8c:	4413      	add	r3, r2
 8038a8e:	6879      	ldr	r1, [r7, #4]
 8038a90:	4618      	mov	r0, r3
 8038a92:	f005 fc51 	bl	803e338 <gos_mutexLock>
 8038a96:	4603      	mov	r3, r0
 8038a98:	2b55      	cmp	r3, #85	; 0x55
 8038a9a:	d155      	bne.n	8038b48 <drv_uartReceiveIT+0xd8>
    {
    	__HAL_UART_CLEAR_OREFLAG(&huarts[instance]);
 8038a9c:	2300      	movs	r3, #0
 8038a9e:	613b      	str	r3, [r7, #16]
 8038aa0:	7bfa      	ldrb	r2, [r7, #15]
 8038aa2:	4933      	ldr	r1, [pc, #204]	; (8038b70 <drv_uartReceiveIT+0x100>)
 8038aa4:	4613      	mov	r3, r2
 8038aa6:	011b      	lsls	r3, r3, #4
 8038aa8:	4413      	add	r3, r2
 8038aaa:	009b      	lsls	r3, r3, #2
 8038aac:	440b      	add	r3, r1
 8038aae:	681b      	ldr	r3, [r3, #0]
 8038ab0:	681b      	ldr	r3, [r3, #0]
 8038ab2:	613b      	str	r3, [r7, #16]
 8038ab4:	7bfa      	ldrb	r2, [r7, #15]
 8038ab6:	492e      	ldr	r1, [pc, #184]	; (8038b70 <drv_uartReceiveIT+0x100>)
 8038ab8:	4613      	mov	r3, r2
 8038aba:	011b      	lsls	r3, r3, #4
 8038abc:	4413      	add	r3, r2
 8038abe:	009b      	lsls	r3, r3, #2
 8038ac0:	440b      	add	r3, r1
 8038ac2:	681b      	ldr	r3, [r3, #0]
 8038ac4:	685b      	ldr	r3, [r3, #4]
 8038ac6:	613b      	str	r3, [r7, #16]
 8038ac8:	693b      	ldr	r3, [r7, #16]
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 8038aca:	7bfa      	ldrb	r2, [r7, #15]
 8038acc:	4613      	mov	r3, r2
 8038ace:	011b      	lsls	r3, r3, #4
 8038ad0:	4413      	add	r3, r2
 8038ad2:	009b      	lsls	r3, r3, #2
 8038ad4:	4a26      	ldr	r2, [pc, #152]	; (8038b70 <drv_uartReceiveIT+0x100>)
 8038ad6:	4413      	add	r3, r2
 8038ad8:	89ba      	ldrh	r2, [r7, #12]
 8038ada:	68b9      	ldr	r1, [r7, #8]
 8038adc:	4618      	mov	r0, r3
 8038ade:	f7f7 f949 	bl	802fd74 <HAL_UART_Receive_IT>
 8038ae2:	4603      	mov	r3, r0
 8038ae4:	2b00      	cmp	r3, #0
 8038ae6:	d11e      	bne.n	8038b26 <drv_uartReceiveIT+0xb6>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8038ae8:	7bfa      	ldrb	r2, [r7, #15]
 8038aea:	4613      	mov	r3, r2
 8038aec:	005b      	lsls	r3, r3, #1
 8038aee:	4413      	add	r3, r2
 8038af0:	009b      	lsls	r3, r3, #2
 8038af2:	4a20      	ldr	r2, [pc, #128]	; (8038b74 <drv_uartReceiveIT+0x104>)
 8038af4:	4413      	add	r3, r2
 8038af6:	6a3a      	ldr	r2, [r7, #32]
 8038af8:	2101      	movs	r1, #1
 8038afa:	4618      	mov	r0, r3
 8038afc:	f008 fa64 	bl	8040fc8 <gos_triggerWait>
 8038b00:	4603      	mov	r3, r0
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 8038b02:	2b55      	cmp	r3, #85	; 0x55
 8038b04:	d10f      	bne.n	8038b26 <drv_uartReceiveIT+0xb6>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 8038b06:	7bfa      	ldrb	r2, [r7, #15]
 8038b08:	4613      	mov	r3, r2
 8038b0a:	005b      	lsls	r3, r3, #1
 8038b0c:	4413      	add	r3, r2
 8038b0e:	009b      	lsls	r3, r3, #2
 8038b10:	4a18      	ldr	r2, [pc, #96]	; (8038b74 <drv_uartReceiveIT+0x104>)
 8038b12:	4413      	add	r3, r2
 8038b14:	4618      	mov	r0, r3
 8038b16:	f008 f9ff 	bl	8040f18 <gos_triggerReset>
 8038b1a:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8038b1c:	2b55      	cmp	r3, #85	; 0x55
 8038b1e:	d102      	bne.n	8038b26 <drv_uartReceiveIT+0xb6>
        {
            /*
             * At this point the caller task is unblocked,
             * reception ready, we can return.
             */
            uartReceiveResult = GOS_SUCCESS;
 8038b20:	2355      	movs	r3, #85	; 0x55
 8038b22:	75fb      	strb	r3, [r7, #23]
 8038b24:	e016      	b.n	8038b54 <drv_uartReceiveIT+0xe4>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8038b26:	7bfa      	ldrb	r2, [r7, #15]
 8038b28:	4613      	mov	r3, r2
 8038b2a:	011b      	lsls	r3, r3, #4
 8038b2c:	4413      	add	r3, r2
 8038b2e:	009b      	lsls	r3, r3, #2
 8038b30:	4a0f      	ldr	r2, [pc, #60]	; (8038b70 <drv_uartReceiveIT+0x100>)
 8038b32:	4413      	add	r3, r2
 8038b34:	4618      	mov	r0, r3
 8038b36:	f7f7 fae7 	bl	8030108 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_TRIG_HAL);
 8038b3a:	4b0f      	ldr	r3, [pc, #60]	; (8038b78 <drv_uartReceiveIT+0x108>)
 8038b3c:	681b      	ldr	r3, [r3, #0]
 8038b3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8038b42:	4a0d      	ldr	r2, [pc, #52]	; (8038b78 <drv_uartReceiveIT+0x108>)
 8038b44:	6013      	str	r3, [r2, #0]
 8038b46:	e005      	b.n	8038b54 <drv_uartReceiveIT+0xe4>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_MUTEX);
 8038b48:	4b0b      	ldr	r3, [pc, #44]	; (8038b78 <drv_uartReceiveIT+0x108>)
 8038b4a:	681b      	ldr	r3, [r3, #0]
 8038b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8038b50:	4a09      	ldr	r2, [pc, #36]	; (8038b78 <drv_uartReceiveIT+0x108>)
 8038b52:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 8038b54:	7bfb      	ldrb	r3, [r7, #15]
 8038b56:	009b      	lsls	r3, r3, #2
 8038b58:	4a04      	ldr	r2, [pc, #16]	; (8038b6c <drv_uartReceiveIT+0xfc>)
 8038b5a:	4413      	add	r3, r2
 8038b5c:	4618      	mov	r0, r3
 8038b5e:	f005 fcf1 	bl	803e544 <gos_mutexUnlock>

    return uartReceiveResult;
 8038b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8038b64:	4618      	mov	r0, r3
 8038b66:	3718      	adds	r7, #24
 8038b68:	46bd      	mov	sp, r7
 8038b6a:	bd80      	pop	{r7, pc}
 8038b6c:	20006dd8 	.word	0x20006dd8
 8038b70:	20006c40 	.word	0x20006c40
 8038b74:	20006e08 	.word	0x20006e08
 8038b78:	20006c3c 	.word	0x20006c3c

08038b7c <USART1_IRQHandler>:

/*
 * Function: USART1_IRQHandler
 */
void_t USART1_IRQHandler (void_t)
{
 8038b7c:	b580      	push	{r7, lr}
 8038b7e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8038b80:	4b16      	ldr	r3, [pc, #88]	; (8038bdc <USART1_IRQHandler+0x60>)
 8038b82:	781b      	ldrb	r3, [r3, #0]
 8038b84:	2b00      	cmp	r3, #0
 8038b86:	d105      	bne.n	8038b94 <USART1_IRQHandler+0x18>
 8038b88:	4b15      	ldr	r3, [pc, #84]	; (8038be0 <USART1_IRQHandler+0x64>)
 8038b8a:	781b      	ldrb	r3, [r3, #0]
 8038b8c:	3301      	adds	r3, #1
 8038b8e:	b2da      	uxtb	r2, r3
 8038b90:	4b13      	ldr	r3, [pc, #76]	; (8038be0 <USART1_IRQHandler+0x64>)
 8038b92:	701a      	strb	r2, [r3, #0]
 8038b94:	4b11      	ldr	r3, [pc, #68]	; (8038bdc <USART1_IRQHandler+0x60>)
 8038b96:	781b      	ldrb	r3, [r3, #0]
 8038b98:	3301      	adds	r3, #1
 8038b9a:	b2da      	uxtb	r2, r3
 8038b9c:	4b0f      	ldr	r3, [pc, #60]	; (8038bdc <USART1_IRQHandler+0x60>)
 8038b9e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_1]);
 8038ba0:	4810      	ldr	r0, [pc, #64]	; (8038be4 <USART1_IRQHandler+0x68>)
 8038ba2:	f7f7 fbc5 	bl	8030330 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8038ba6:	4b0d      	ldr	r3, [pc, #52]	; (8038bdc <USART1_IRQHandler+0x60>)
 8038ba8:	781b      	ldrb	r3, [r3, #0]
 8038baa:	2b00      	cmp	r3, #0
 8038bac:	d005      	beq.n	8038bba <USART1_IRQHandler+0x3e>
 8038bae:	4b0b      	ldr	r3, [pc, #44]	; (8038bdc <USART1_IRQHandler+0x60>)
 8038bb0:	781b      	ldrb	r3, [r3, #0]
 8038bb2:	3b01      	subs	r3, #1
 8038bb4:	b2da      	uxtb	r2, r3
 8038bb6:	4b09      	ldr	r3, [pc, #36]	; (8038bdc <USART1_IRQHandler+0x60>)
 8038bb8:	701a      	strb	r2, [r3, #0]
 8038bba:	4b08      	ldr	r3, [pc, #32]	; (8038bdc <USART1_IRQHandler+0x60>)
 8038bbc:	781b      	ldrb	r3, [r3, #0]
 8038bbe:	2b00      	cmp	r3, #0
 8038bc0:	d109      	bne.n	8038bd6 <USART1_IRQHandler+0x5a>
 8038bc2:	4b07      	ldr	r3, [pc, #28]	; (8038be0 <USART1_IRQHandler+0x64>)
 8038bc4:	781b      	ldrb	r3, [r3, #0]
 8038bc6:	2b00      	cmp	r3, #0
 8038bc8:	d005      	beq.n	8038bd6 <USART1_IRQHandler+0x5a>
 8038bca:	4b05      	ldr	r3, [pc, #20]	; (8038be0 <USART1_IRQHandler+0x64>)
 8038bcc:	781b      	ldrb	r3, [r3, #0]
 8038bce:	3b01      	subs	r3, #1
 8038bd0:	b2da      	uxtb	r2, r3
 8038bd2:	4b03      	ldr	r3, [pc, #12]	; (8038be0 <USART1_IRQHandler+0x64>)
 8038bd4:	701a      	strb	r2, [r3, #0]
}
 8038bd6:	bf00      	nop
 8038bd8:	bd80      	pop	{r7, pc}
 8038bda:	bf00      	nop
 8038bdc:	20007446 	.word	0x20007446
 8038be0:	20007445 	.word	0x20007445
 8038be4:	20006c40 	.word	0x20006c40

08038be8 <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 8038be8:	b580      	push	{r7, lr}
 8038bea:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8038bec:	4b16      	ldr	r3, [pc, #88]	; (8038c48 <USART2_IRQHandler+0x60>)
 8038bee:	781b      	ldrb	r3, [r3, #0]
 8038bf0:	2b00      	cmp	r3, #0
 8038bf2:	d105      	bne.n	8038c00 <USART2_IRQHandler+0x18>
 8038bf4:	4b15      	ldr	r3, [pc, #84]	; (8038c4c <USART2_IRQHandler+0x64>)
 8038bf6:	781b      	ldrb	r3, [r3, #0]
 8038bf8:	3301      	adds	r3, #1
 8038bfa:	b2da      	uxtb	r2, r3
 8038bfc:	4b13      	ldr	r3, [pc, #76]	; (8038c4c <USART2_IRQHandler+0x64>)
 8038bfe:	701a      	strb	r2, [r3, #0]
 8038c00:	4b11      	ldr	r3, [pc, #68]	; (8038c48 <USART2_IRQHandler+0x60>)
 8038c02:	781b      	ldrb	r3, [r3, #0]
 8038c04:	3301      	adds	r3, #1
 8038c06:	b2da      	uxtb	r2, r3
 8038c08:	4b0f      	ldr	r3, [pc, #60]	; (8038c48 <USART2_IRQHandler+0x60>)
 8038c0a:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_2]);
 8038c0c:	4810      	ldr	r0, [pc, #64]	; (8038c50 <USART2_IRQHandler+0x68>)
 8038c0e:	f7f7 fb8f 	bl	8030330 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8038c12:	4b0d      	ldr	r3, [pc, #52]	; (8038c48 <USART2_IRQHandler+0x60>)
 8038c14:	781b      	ldrb	r3, [r3, #0]
 8038c16:	2b00      	cmp	r3, #0
 8038c18:	d005      	beq.n	8038c26 <USART2_IRQHandler+0x3e>
 8038c1a:	4b0b      	ldr	r3, [pc, #44]	; (8038c48 <USART2_IRQHandler+0x60>)
 8038c1c:	781b      	ldrb	r3, [r3, #0]
 8038c1e:	3b01      	subs	r3, #1
 8038c20:	b2da      	uxtb	r2, r3
 8038c22:	4b09      	ldr	r3, [pc, #36]	; (8038c48 <USART2_IRQHandler+0x60>)
 8038c24:	701a      	strb	r2, [r3, #0]
 8038c26:	4b08      	ldr	r3, [pc, #32]	; (8038c48 <USART2_IRQHandler+0x60>)
 8038c28:	781b      	ldrb	r3, [r3, #0]
 8038c2a:	2b00      	cmp	r3, #0
 8038c2c:	d109      	bne.n	8038c42 <USART2_IRQHandler+0x5a>
 8038c2e:	4b07      	ldr	r3, [pc, #28]	; (8038c4c <USART2_IRQHandler+0x64>)
 8038c30:	781b      	ldrb	r3, [r3, #0]
 8038c32:	2b00      	cmp	r3, #0
 8038c34:	d005      	beq.n	8038c42 <USART2_IRQHandler+0x5a>
 8038c36:	4b05      	ldr	r3, [pc, #20]	; (8038c4c <USART2_IRQHandler+0x64>)
 8038c38:	781b      	ldrb	r3, [r3, #0]
 8038c3a:	3b01      	subs	r3, #1
 8038c3c:	b2da      	uxtb	r2, r3
 8038c3e:	4b03      	ldr	r3, [pc, #12]	; (8038c4c <USART2_IRQHandler+0x64>)
 8038c40:	701a      	strb	r2, [r3, #0]
}
 8038c42:	bf00      	nop
 8038c44:	bd80      	pop	{r7, pc}
 8038c46:	bf00      	nop
 8038c48:	20007446 	.word	0x20007446
 8038c4c:	20007445 	.word	0x20007445
 8038c50:	20006c84 	.word	0x20006c84

08038c54 <USART3_IRQHandler>:

/*
 * Function: USART3_IRQHandler
 */
void_t USART3_IRQHandler (void_t)
{
 8038c54:	b580      	push	{r7, lr}
 8038c56:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8038c58:	4b16      	ldr	r3, [pc, #88]	; (8038cb4 <USART3_IRQHandler+0x60>)
 8038c5a:	781b      	ldrb	r3, [r3, #0]
 8038c5c:	2b00      	cmp	r3, #0
 8038c5e:	d105      	bne.n	8038c6c <USART3_IRQHandler+0x18>
 8038c60:	4b15      	ldr	r3, [pc, #84]	; (8038cb8 <USART3_IRQHandler+0x64>)
 8038c62:	781b      	ldrb	r3, [r3, #0]
 8038c64:	3301      	adds	r3, #1
 8038c66:	b2da      	uxtb	r2, r3
 8038c68:	4b13      	ldr	r3, [pc, #76]	; (8038cb8 <USART3_IRQHandler+0x64>)
 8038c6a:	701a      	strb	r2, [r3, #0]
 8038c6c:	4b11      	ldr	r3, [pc, #68]	; (8038cb4 <USART3_IRQHandler+0x60>)
 8038c6e:	781b      	ldrb	r3, [r3, #0]
 8038c70:	3301      	adds	r3, #1
 8038c72:	b2da      	uxtb	r2, r3
 8038c74:	4b0f      	ldr	r3, [pc, #60]	; (8038cb4 <USART3_IRQHandler+0x60>)
 8038c76:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_3]);
 8038c78:	4810      	ldr	r0, [pc, #64]	; (8038cbc <USART3_IRQHandler+0x68>)
 8038c7a:	f7f7 fb59 	bl	8030330 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8038c7e:	4b0d      	ldr	r3, [pc, #52]	; (8038cb4 <USART3_IRQHandler+0x60>)
 8038c80:	781b      	ldrb	r3, [r3, #0]
 8038c82:	2b00      	cmp	r3, #0
 8038c84:	d005      	beq.n	8038c92 <USART3_IRQHandler+0x3e>
 8038c86:	4b0b      	ldr	r3, [pc, #44]	; (8038cb4 <USART3_IRQHandler+0x60>)
 8038c88:	781b      	ldrb	r3, [r3, #0]
 8038c8a:	3b01      	subs	r3, #1
 8038c8c:	b2da      	uxtb	r2, r3
 8038c8e:	4b09      	ldr	r3, [pc, #36]	; (8038cb4 <USART3_IRQHandler+0x60>)
 8038c90:	701a      	strb	r2, [r3, #0]
 8038c92:	4b08      	ldr	r3, [pc, #32]	; (8038cb4 <USART3_IRQHandler+0x60>)
 8038c94:	781b      	ldrb	r3, [r3, #0]
 8038c96:	2b00      	cmp	r3, #0
 8038c98:	d109      	bne.n	8038cae <USART3_IRQHandler+0x5a>
 8038c9a:	4b07      	ldr	r3, [pc, #28]	; (8038cb8 <USART3_IRQHandler+0x64>)
 8038c9c:	781b      	ldrb	r3, [r3, #0]
 8038c9e:	2b00      	cmp	r3, #0
 8038ca0:	d005      	beq.n	8038cae <USART3_IRQHandler+0x5a>
 8038ca2:	4b05      	ldr	r3, [pc, #20]	; (8038cb8 <USART3_IRQHandler+0x64>)
 8038ca4:	781b      	ldrb	r3, [r3, #0]
 8038ca6:	3b01      	subs	r3, #1
 8038ca8:	b2da      	uxtb	r2, r3
 8038caa:	4b03      	ldr	r3, [pc, #12]	; (8038cb8 <USART3_IRQHandler+0x64>)
 8038cac:	701a      	strb	r2, [r3, #0]
}
 8038cae:	bf00      	nop
 8038cb0:	bd80      	pop	{r7, pc}
 8038cb2:	bf00      	nop
 8038cb4:	20007446 	.word	0x20007446
 8038cb8:	20007445 	.word	0x20007445
 8038cbc:	20006cc8 	.word	0x20006cc8

08038cc0 <UART4_IRQHandler>:

/*
 * Function: UART4_IRQHandler
 */
void_t UART4_IRQHandler (void_t)
{
 8038cc0:	b580      	push	{r7, lr}
 8038cc2:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8038cc4:	4b16      	ldr	r3, [pc, #88]	; (8038d20 <UART4_IRQHandler+0x60>)
 8038cc6:	781b      	ldrb	r3, [r3, #0]
 8038cc8:	2b00      	cmp	r3, #0
 8038cca:	d105      	bne.n	8038cd8 <UART4_IRQHandler+0x18>
 8038ccc:	4b15      	ldr	r3, [pc, #84]	; (8038d24 <UART4_IRQHandler+0x64>)
 8038cce:	781b      	ldrb	r3, [r3, #0]
 8038cd0:	3301      	adds	r3, #1
 8038cd2:	b2da      	uxtb	r2, r3
 8038cd4:	4b13      	ldr	r3, [pc, #76]	; (8038d24 <UART4_IRQHandler+0x64>)
 8038cd6:	701a      	strb	r2, [r3, #0]
 8038cd8:	4b11      	ldr	r3, [pc, #68]	; (8038d20 <UART4_IRQHandler+0x60>)
 8038cda:	781b      	ldrb	r3, [r3, #0]
 8038cdc:	3301      	adds	r3, #1
 8038cde:	b2da      	uxtb	r2, r3
 8038ce0:	4b0f      	ldr	r3, [pc, #60]	; (8038d20 <UART4_IRQHandler+0x60>)
 8038ce2:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_4]);
 8038ce4:	4810      	ldr	r0, [pc, #64]	; (8038d28 <UART4_IRQHandler+0x68>)
 8038ce6:	f7f7 fb23 	bl	8030330 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8038cea:	4b0d      	ldr	r3, [pc, #52]	; (8038d20 <UART4_IRQHandler+0x60>)
 8038cec:	781b      	ldrb	r3, [r3, #0]
 8038cee:	2b00      	cmp	r3, #0
 8038cf0:	d005      	beq.n	8038cfe <UART4_IRQHandler+0x3e>
 8038cf2:	4b0b      	ldr	r3, [pc, #44]	; (8038d20 <UART4_IRQHandler+0x60>)
 8038cf4:	781b      	ldrb	r3, [r3, #0]
 8038cf6:	3b01      	subs	r3, #1
 8038cf8:	b2da      	uxtb	r2, r3
 8038cfa:	4b09      	ldr	r3, [pc, #36]	; (8038d20 <UART4_IRQHandler+0x60>)
 8038cfc:	701a      	strb	r2, [r3, #0]
 8038cfe:	4b08      	ldr	r3, [pc, #32]	; (8038d20 <UART4_IRQHandler+0x60>)
 8038d00:	781b      	ldrb	r3, [r3, #0]
 8038d02:	2b00      	cmp	r3, #0
 8038d04:	d109      	bne.n	8038d1a <UART4_IRQHandler+0x5a>
 8038d06:	4b07      	ldr	r3, [pc, #28]	; (8038d24 <UART4_IRQHandler+0x64>)
 8038d08:	781b      	ldrb	r3, [r3, #0]
 8038d0a:	2b00      	cmp	r3, #0
 8038d0c:	d005      	beq.n	8038d1a <UART4_IRQHandler+0x5a>
 8038d0e:	4b05      	ldr	r3, [pc, #20]	; (8038d24 <UART4_IRQHandler+0x64>)
 8038d10:	781b      	ldrb	r3, [r3, #0]
 8038d12:	3b01      	subs	r3, #1
 8038d14:	b2da      	uxtb	r2, r3
 8038d16:	4b03      	ldr	r3, [pc, #12]	; (8038d24 <UART4_IRQHandler+0x64>)
 8038d18:	701a      	strb	r2, [r3, #0]
}
 8038d1a:	bf00      	nop
 8038d1c:	bd80      	pop	{r7, pc}
 8038d1e:	bf00      	nop
 8038d20:	20007446 	.word	0x20007446
 8038d24:	20007445 	.word	0x20007445
 8038d28:	20006d0c 	.word	0x20006d0c

08038d2c <UART5_IRQHandler>:

/*
 * Function: UART5_IRQHandler
 */
void_t UART5_IRQHandler (void_t)
{
 8038d2c:	b580      	push	{r7, lr}
 8038d2e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8038d30:	4b16      	ldr	r3, [pc, #88]	; (8038d8c <UART5_IRQHandler+0x60>)
 8038d32:	781b      	ldrb	r3, [r3, #0]
 8038d34:	2b00      	cmp	r3, #0
 8038d36:	d105      	bne.n	8038d44 <UART5_IRQHandler+0x18>
 8038d38:	4b15      	ldr	r3, [pc, #84]	; (8038d90 <UART5_IRQHandler+0x64>)
 8038d3a:	781b      	ldrb	r3, [r3, #0]
 8038d3c:	3301      	adds	r3, #1
 8038d3e:	b2da      	uxtb	r2, r3
 8038d40:	4b13      	ldr	r3, [pc, #76]	; (8038d90 <UART5_IRQHandler+0x64>)
 8038d42:	701a      	strb	r2, [r3, #0]
 8038d44:	4b11      	ldr	r3, [pc, #68]	; (8038d8c <UART5_IRQHandler+0x60>)
 8038d46:	781b      	ldrb	r3, [r3, #0]
 8038d48:	3301      	adds	r3, #1
 8038d4a:	b2da      	uxtb	r2, r3
 8038d4c:	4b0f      	ldr	r3, [pc, #60]	; (8038d8c <UART5_IRQHandler+0x60>)
 8038d4e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_5]);
 8038d50:	4810      	ldr	r0, [pc, #64]	; (8038d94 <UART5_IRQHandler+0x68>)
 8038d52:	f7f7 faed 	bl	8030330 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8038d56:	4b0d      	ldr	r3, [pc, #52]	; (8038d8c <UART5_IRQHandler+0x60>)
 8038d58:	781b      	ldrb	r3, [r3, #0]
 8038d5a:	2b00      	cmp	r3, #0
 8038d5c:	d005      	beq.n	8038d6a <UART5_IRQHandler+0x3e>
 8038d5e:	4b0b      	ldr	r3, [pc, #44]	; (8038d8c <UART5_IRQHandler+0x60>)
 8038d60:	781b      	ldrb	r3, [r3, #0]
 8038d62:	3b01      	subs	r3, #1
 8038d64:	b2da      	uxtb	r2, r3
 8038d66:	4b09      	ldr	r3, [pc, #36]	; (8038d8c <UART5_IRQHandler+0x60>)
 8038d68:	701a      	strb	r2, [r3, #0]
 8038d6a:	4b08      	ldr	r3, [pc, #32]	; (8038d8c <UART5_IRQHandler+0x60>)
 8038d6c:	781b      	ldrb	r3, [r3, #0]
 8038d6e:	2b00      	cmp	r3, #0
 8038d70:	d109      	bne.n	8038d86 <UART5_IRQHandler+0x5a>
 8038d72:	4b07      	ldr	r3, [pc, #28]	; (8038d90 <UART5_IRQHandler+0x64>)
 8038d74:	781b      	ldrb	r3, [r3, #0]
 8038d76:	2b00      	cmp	r3, #0
 8038d78:	d005      	beq.n	8038d86 <UART5_IRQHandler+0x5a>
 8038d7a:	4b05      	ldr	r3, [pc, #20]	; (8038d90 <UART5_IRQHandler+0x64>)
 8038d7c:	781b      	ldrb	r3, [r3, #0]
 8038d7e:	3b01      	subs	r3, #1
 8038d80:	b2da      	uxtb	r2, r3
 8038d82:	4b03      	ldr	r3, [pc, #12]	; (8038d90 <UART5_IRQHandler+0x64>)
 8038d84:	701a      	strb	r2, [r3, #0]
}
 8038d86:	bf00      	nop
 8038d88:	bd80      	pop	{r7, pc}
 8038d8a:	bf00      	nop
 8038d8c:	20007446 	.word	0x20007446
 8038d90:	20007445 	.word	0x20007445
 8038d94:	20006d50 	.word	0x20006d50

08038d98 <USART6_IRQHandler>:

/*
 * Function: USART6_IRQHandler
 */
void_t USART6_IRQHandler (void_t)
{
 8038d98:	b580      	push	{r7, lr}
 8038d9a:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8038d9c:	4b16      	ldr	r3, [pc, #88]	; (8038df8 <USART6_IRQHandler+0x60>)
 8038d9e:	781b      	ldrb	r3, [r3, #0]
 8038da0:	2b00      	cmp	r3, #0
 8038da2:	d105      	bne.n	8038db0 <USART6_IRQHandler+0x18>
 8038da4:	4b15      	ldr	r3, [pc, #84]	; (8038dfc <USART6_IRQHandler+0x64>)
 8038da6:	781b      	ldrb	r3, [r3, #0]
 8038da8:	3301      	adds	r3, #1
 8038daa:	b2da      	uxtb	r2, r3
 8038dac:	4b13      	ldr	r3, [pc, #76]	; (8038dfc <USART6_IRQHandler+0x64>)
 8038dae:	701a      	strb	r2, [r3, #0]
 8038db0:	4b11      	ldr	r3, [pc, #68]	; (8038df8 <USART6_IRQHandler+0x60>)
 8038db2:	781b      	ldrb	r3, [r3, #0]
 8038db4:	3301      	adds	r3, #1
 8038db6:	b2da      	uxtb	r2, r3
 8038db8:	4b0f      	ldr	r3, [pc, #60]	; (8038df8 <USART6_IRQHandler+0x60>)
 8038dba:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_6]);
 8038dbc:	4810      	ldr	r0, [pc, #64]	; (8038e00 <USART6_IRQHandler+0x68>)
 8038dbe:	f7f7 fab7 	bl	8030330 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8038dc2:	4b0d      	ldr	r3, [pc, #52]	; (8038df8 <USART6_IRQHandler+0x60>)
 8038dc4:	781b      	ldrb	r3, [r3, #0]
 8038dc6:	2b00      	cmp	r3, #0
 8038dc8:	d005      	beq.n	8038dd6 <USART6_IRQHandler+0x3e>
 8038dca:	4b0b      	ldr	r3, [pc, #44]	; (8038df8 <USART6_IRQHandler+0x60>)
 8038dcc:	781b      	ldrb	r3, [r3, #0]
 8038dce:	3b01      	subs	r3, #1
 8038dd0:	b2da      	uxtb	r2, r3
 8038dd2:	4b09      	ldr	r3, [pc, #36]	; (8038df8 <USART6_IRQHandler+0x60>)
 8038dd4:	701a      	strb	r2, [r3, #0]
 8038dd6:	4b08      	ldr	r3, [pc, #32]	; (8038df8 <USART6_IRQHandler+0x60>)
 8038dd8:	781b      	ldrb	r3, [r3, #0]
 8038dda:	2b00      	cmp	r3, #0
 8038ddc:	d109      	bne.n	8038df2 <USART6_IRQHandler+0x5a>
 8038dde:	4b07      	ldr	r3, [pc, #28]	; (8038dfc <USART6_IRQHandler+0x64>)
 8038de0:	781b      	ldrb	r3, [r3, #0]
 8038de2:	2b00      	cmp	r3, #0
 8038de4:	d005      	beq.n	8038df2 <USART6_IRQHandler+0x5a>
 8038de6:	4b05      	ldr	r3, [pc, #20]	; (8038dfc <USART6_IRQHandler+0x64>)
 8038de8:	781b      	ldrb	r3, [r3, #0]
 8038dea:	3b01      	subs	r3, #1
 8038dec:	b2da      	uxtb	r2, r3
 8038dee:	4b03      	ldr	r3, [pc, #12]	; (8038dfc <USART6_IRQHandler+0x64>)
 8038df0:	701a      	strb	r2, [r3, #0]
}
 8038df2:	bf00      	nop
 8038df4:	bd80      	pop	{r7, pc}
 8038df6:	bf00      	nop
 8038df8:	20007446 	.word	0x20007446
 8038dfc:	20007445 	.word	0x20007445
 8038e00:	20006d94 	.word	0x20006d94

08038e04 <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 8038e04:	b580      	push	{r7, lr}
 8038e06:	b084      	sub	sp, #16
 8038e08:	af00      	add	r7, sp, #0
 8038e0a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 8038e0c:	2300      	movs	r3, #0
 8038e0e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8038e10:	2300      	movs	r3, #0
 8038e12:	73fb      	strb	r3, [r7, #15]
 8038e14:	e015      	b.n	8038e42 <HAL_UART_TxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8038e16:	7bfb      	ldrb	r3, [r7, #15]
 8038e18:	4a0e      	ldr	r2, [pc, #56]	; (8038e54 <HAL_UART_TxCpltCallback+0x50>)
 8038e1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8038e1e:	687b      	ldr	r3, [r7, #4]
 8038e20:	681b      	ldr	r3, [r3, #0]
 8038e22:	429a      	cmp	r2, r3
 8038e24:	d10a      	bne.n	8038e3c <HAL_UART_TxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartTxReadyTriggers[instance]);
 8038e26:	7bfa      	ldrb	r2, [r7, #15]
 8038e28:	4613      	mov	r3, r2
 8038e2a:	005b      	lsls	r3, r3, #1
 8038e2c:	4413      	add	r3, r2
 8038e2e:	009b      	lsls	r3, r3, #2
 8038e30:	4a09      	ldr	r2, [pc, #36]	; (8038e58 <HAL_UART_TxCpltCallback+0x54>)
 8038e32:	4413      	add	r3, r2
 8038e34:	4618      	mov	r0, r3
 8038e36:	f008 f977 	bl	8041128 <gos_triggerIncrement>
            break;
 8038e3a:	e006      	b.n	8038e4a <HAL_UART_TxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8038e3c:	7bfb      	ldrb	r3, [r7, #15]
 8038e3e:	3301      	adds	r3, #1
 8038e40:	73fb      	strb	r3, [r7, #15]
 8038e42:	7bfb      	ldrb	r3, [r7, #15]
 8038e44:	2b05      	cmp	r3, #5
 8038e46:	d9e6      	bls.n	8038e16 <HAL_UART_TxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 8038e48:	bf00      	nop
 8038e4a:	bf00      	nop
 8038e4c:	3710      	adds	r7, #16
 8038e4e:	46bd      	mov	sp, r7
 8038e50:	bd80      	pop	{r7, pc}
 8038e52:	bf00      	nop
 8038e54:	20001b28 	.word	0x20001b28
 8038e58:	20006e50 	.word	0x20006e50

08038e5c <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 8038e5c:	b580      	push	{r7, lr}
 8038e5e:	b084      	sub	sp, #16
 8038e60:	af00      	add	r7, sp, #0
 8038e62:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 8038e64:	2300      	movs	r3, #0
 8038e66:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8038e68:	2300      	movs	r3, #0
 8038e6a:	73fb      	strb	r3, [r7, #15]
 8038e6c:	e015      	b.n	8038e9a <HAL_UART_RxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8038e6e:	7bfb      	ldrb	r3, [r7, #15]
 8038e70:	4a0e      	ldr	r2, [pc, #56]	; (8038eac <HAL_UART_RxCpltCallback+0x50>)
 8038e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8038e76:	687b      	ldr	r3, [r7, #4]
 8038e78:	681b      	ldr	r3, [r3, #0]
 8038e7a:	429a      	cmp	r2, r3
 8038e7c:	d10a      	bne.n	8038e94 <HAL_UART_RxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartRxReadyTriggers[instance]);
 8038e7e:	7bfa      	ldrb	r2, [r7, #15]
 8038e80:	4613      	mov	r3, r2
 8038e82:	005b      	lsls	r3, r3, #1
 8038e84:	4413      	add	r3, r2
 8038e86:	009b      	lsls	r3, r3, #2
 8038e88:	4a09      	ldr	r2, [pc, #36]	; (8038eb0 <HAL_UART_RxCpltCallback+0x54>)
 8038e8a:	4413      	add	r3, r2
 8038e8c:	4618      	mov	r0, r3
 8038e8e:	f008 f94b 	bl	8041128 <gos_triggerIncrement>
            break;
 8038e92:	e006      	b.n	8038ea2 <HAL_UART_RxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8038e94:	7bfb      	ldrb	r3, [r7, #15]
 8038e96:	3301      	adds	r3, #1
 8038e98:	73fb      	strb	r3, [r7, #15]
 8038e9a:	7bfb      	ldrb	r3, [r7, #15]
 8038e9c:	2b05      	cmp	r3, #5
 8038e9e:	d9e6      	bls.n	8038e6e <HAL_UART_RxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 8038ea0:	bf00      	nop
 8038ea2:	bf00      	nop
 8038ea4:	3710      	adds	r7, #16
 8038ea6:	46bd      	mov	sp, r7
 8038ea8:	bd80      	pop	{r7, pc}
 8038eaa:	bf00      	nop
 8038eac:	20001b28 	.word	0x20001b28
 8038eb0:	20006e08 	.word	0x20006e08

08038eb4 <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 8038eb4:	b480      	push	{r7}
 8038eb6:	b085      	sub	sp, #20
 8038eb8:	af00      	add	r7, sp, #0
 8038eba:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 8038ebc:	2300      	movs	r3, #0
 8038ebe:	73fb      	strb	r3, [r7, #15]
    u8_t                     idx      = 0u;
 8038ec0:	2300      	movs	r3, #0
 8038ec2:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8038ec4:	2300      	movs	r3, #0
 8038ec6:	73fb      	strb	r3, [r7, #15]
 8038ec8:	e068      	b.n	8038f9c <HAL_UART_MspInit+0xe8>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8038eca:	7bfb      	ldrb	r3, [r7, #15]
 8038ecc:	4a38      	ldr	r2, [pc, #224]	; (8038fb0 <HAL_UART_MspInit+0xfc>)
 8038ece:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8038ed2:	687b      	ldr	r3, [r7, #4]
 8038ed4:	681b      	ldr	r3, [r3, #0]
 8038ed6:	429a      	cmp	r2, r3
 8038ed8:	d15d      	bne.n	8038f96 <HAL_UART_MspInit+0xe2>
        {
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 8038eda:	2300      	movs	r3, #0
 8038edc:	73bb      	strb	r3, [r7, #14]
 8038ede:	e051      	b.n	8038f84 <HAL_UART_MspInit+0xd0>
            {
                if (uartConfig[idx].periphInstance == instance)
 8038ee0:	7bba      	ldrb	r2, [r7, #14]
 8038ee2:	4934      	ldr	r1, [pc, #208]	; (8038fb4 <HAL_UART_MspInit+0x100>)
 8038ee4:	4613      	mov	r3, r2
 8038ee6:	009b      	lsls	r3, r3, #2
 8038ee8:	4413      	add	r3, r2
 8038eea:	00db      	lsls	r3, r3, #3
 8038eec:	440b      	add	r3, r1
 8038eee:	781b      	ldrb	r3, [r3, #0]
 8038ef0:	7bfa      	ldrb	r2, [r7, #15]
 8038ef2:	429a      	cmp	r2, r3
 8038ef4:	d143      	bne.n	8038f7e <HAL_UART_MspInit+0xca>
                {
                    if (uartConfig[idx].dmaConfigRx != NULL)
 8038ef6:	7bba      	ldrb	r2, [r7, #14]
 8038ef8:	492e      	ldr	r1, [pc, #184]	; (8038fb4 <HAL_UART_MspInit+0x100>)
 8038efa:	4613      	mov	r3, r2
 8038efc:	009b      	lsls	r3, r3, #2
 8038efe:	4413      	add	r3, r2
 8038f00:	00db      	lsls	r3, r3, #3
 8038f02:	440b      	add	r3, r1
 8038f04:	3320      	adds	r3, #32
 8038f06:	681b      	ldr	r3, [r3, #0]
 8038f08:	2b00      	cmp	r3, #0
 8038f0a:	d016      	beq.n	8038f3a <HAL_UART_MspInit+0x86>
                    {
                        __HAL_LINKDMA(pHuart, hdmarx, uartConfig[idx].dmaConfigRx->hdma);
 8038f0c:	7bba      	ldrb	r2, [r7, #14]
 8038f0e:	4929      	ldr	r1, [pc, #164]	; (8038fb4 <HAL_UART_MspInit+0x100>)
 8038f10:	4613      	mov	r3, r2
 8038f12:	009b      	lsls	r3, r3, #2
 8038f14:	4413      	add	r3, r2
 8038f16:	00db      	lsls	r3, r3, #3
 8038f18:	440b      	add	r3, r1
 8038f1a:	3320      	adds	r3, #32
 8038f1c:	681b      	ldr	r3, [r3, #0]
 8038f1e:	1d1a      	adds	r2, r3, #4
 8038f20:	687b      	ldr	r3, [r7, #4]
 8038f22:	639a      	str	r2, [r3, #56]	; 0x38
 8038f24:	7bba      	ldrb	r2, [r7, #14]
 8038f26:	4923      	ldr	r1, [pc, #140]	; (8038fb4 <HAL_UART_MspInit+0x100>)
 8038f28:	4613      	mov	r3, r2
 8038f2a:	009b      	lsls	r3, r3, #2
 8038f2c:	4413      	add	r3, r2
 8038f2e:	00db      	lsls	r3, r3, #3
 8038f30:	440b      	add	r3, r1
 8038f32:	3320      	adds	r3, #32
 8038f34:	681b      	ldr	r3, [r3, #0]
 8038f36:	687a      	ldr	r2, [r7, #4]
 8038f38:	63da      	str	r2, [r3, #60]	; 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (uartConfig[idx].dmaConfigTx != NULL)
 8038f3a:	7bba      	ldrb	r2, [r7, #14]
 8038f3c:	491d      	ldr	r1, [pc, #116]	; (8038fb4 <HAL_UART_MspInit+0x100>)
 8038f3e:	4613      	mov	r3, r2
 8038f40:	009b      	lsls	r3, r3, #2
 8038f42:	4413      	add	r3, r2
 8038f44:	00db      	lsls	r3, r3, #3
 8038f46:	440b      	add	r3, r1
 8038f48:	3324      	adds	r3, #36	; 0x24
 8038f4a:	681b      	ldr	r3, [r3, #0]
 8038f4c:	2b00      	cmp	r3, #0
 8038f4e:	d016      	beq.n	8038f7e <HAL_UART_MspInit+0xca>
                    {
                        __HAL_LINKDMA(pHuart, hdmatx, uartConfig[idx].dmaConfigTx->hdma);
 8038f50:	7bba      	ldrb	r2, [r7, #14]
 8038f52:	4918      	ldr	r1, [pc, #96]	; (8038fb4 <HAL_UART_MspInit+0x100>)
 8038f54:	4613      	mov	r3, r2
 8038f56:	009b      	lsls	r3, r3, #2
 8038f58:	4413      	add	r3, r2
 8038f5a:	00db      	lsls	r3, r3, #3
 8038f5c:	440b      	add	r3, r1
 8038f5e:	3324      	adds	r3, #36	; 0x24
 8038f60:	681b      	ldr	r3, [r3, #0]
 8038f62:	1d1a      	adds	r2, r3, #4
 8038f64:	687b      	ldr	r3, [r7, #4]
 8038f66:	635a      	str	r2, [r3, #52]	; 0x34
 8038f68:	7bba      	ldrb	r2, [r7, #14]
 8038f6a:	4912      	ldr	r1, [pc, #72]	; (8038fb4 <HAL_UART_MspInit+0x100>)
 8038f6c:	4613      	mov	r3, r2
 8038f6e:	009b      	lsls	r3, r3, #2
 8038f70:	4413      	add	r3, r2
 8038f72:	00db      	lsls	r3, r3, #3
 8038f74:	440b      	add	r3, r1
 8038f76:	3324      	adds	r3, #36	; 0x24
 8038f78:	681b      	ldr	r3, [r3, #0]
 8038f7a:	687a      	ldr	r2, [r7, #4]
 8038f7c:	63da      	str	r2, [r3, #60]	; 0x3c
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 8038f7e:	7bbb      	ldrb	r3, [r7, #14]
 8038f80:	3301      	adds	r3, #1
 8038f82:	73bb      	strb	r3, [r7, #14]
 8038f84:	7bba      	ldrb	r2, [r7, #14]
 8038f86:	4b0c      	ldr	r3, [pc, #48]	; (8038fb8 <HAL_UART_MspInit+0x104>)
 8038f88:	681b      	ldr	r3, [r3, #0]
 8038f8a:	490c      	ldr	r1, [pc, #48]	; (8038fbc <HAL_UART_MspInit+0x108>)
 8038f8c:	fba1 1303 	umull	r1, r3, r1, r3
 8038f90:	095b      	lsrs	r3, r3, #5
 8038f92:	429a      	cmp	r2, r3
 8038f94:	d3a4      	bcc.n	8038ee0 <HAL_UART_MspInit+0x2c>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8038f96:	7bfb      	ldrb	r3, [r7, #15]
 8038f98:	3301      	adds	r3, #1
 8038f9a:	73fb      	strb	r3, [r7, #15]
 8038f9c:	7bfb      	ldrb	r3, [r7, #15]
 8038f9e:	2b05      	cmp	r3, #5
 8038fa0:	d993      	bls.n	8038eca <HAL_UART_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 8038fa2:	bf00      	nop
 8038fa4:	bf00      	nop
 8038fa6:	3714      	adds	r7, #20
 8038fa8:	46bd      	mov	sp, r7
 8038faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038fae:	4770      	bx	lr
 8038fb0:	20001b28 	.word	0x20001b28
 8038fb4:	080493f4 	.word	0x080493f4
 8038fb8:	2000194c 	.word	0x2000194c
 8038fbc:	cccccccd 	.word	0xcccccccd

08038fc0 <svl_bldHandlerInit>:

/*
 * Function: svl_bldHandlerInit
 */
gos_result_t svl_bldHandlerInit (void_t)
{
 8038fc0:	b580      	push	{r7, lr}
 8038fc2:	b082      	sub	sp, #8
 8038fc4:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t bldHandlerInitResult = GOS_ERROR;
 8038fc6:	23ae      	movs	r3, #174	; 0xae
 8038fc8:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	if (gos_sysmonRegisterUserMessage(&bootMsg)        == GOS_SUCCESS &&
 8038fca:	4809      	ldr	r0, [pc, #36]	; (8038ff0 <svl_bldHandlerInit+0x30>)
 8038fcc:	f006 fd16 	bl	803f9fc <gos_sysmonRegisterUserMessage>
 8038fd0:	4603      	mov	r3, r0
 8038fd2:	2b55      	cmp	r3, #85	; 0x55
 8038fd4:	d107      	bne.n	8038fe6 <svl_bldHandlerInit+0x26>
	    gos_sysmonRegisterUserMessage(&bootDataReqMsg) == GOS_SUCCESS)
 8038fd6:	4807      	ldr	r0, [pc, #28]	; (8038ff4 <svl_bldHandlerInit+0x34>)
 8038fd8:	f006 fd10 	bl	803f9fc <gos_sysmonRegisterUserMessage>
 8038fdc:	4603      	mov	r3, r0
	if (gos_sysmonRegisterUserMessage(&bootMsg)        == GOS_SUCCESS &&
 8038fde:	2b55      	cmp	r3, #85	; 0x55
 8038fe0:	d101      	bne.n	8038fe6 <svl_bldHandlerInit+0x26>
	{
		bldHandlerInitResult = GOS_SUCCESS;
 8038fe2:	2355      	movs	r3, #85	; 0x55
 8038fe4:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Register error.
	}

	return bldHandlerInitResult;
 8038fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8038fe8:	4618      	mov	r0, r3
 8038fea:	3708      	adds	r7, #8
 8038fec:	46bd      	mov	sp, r7
 8038fee:	bd80      	pop	{r7, pc}
 8038ff0:	20001b40 	.word	0x20001b40
 8038ff4:	20001b50 	.word	0x20001b50

08038ff8 <svl_bldHandlerBootModeReqMsgReceived>:
 * @details Sets the update mode flag in the bootloader data.
 *
 * @return  -
 */
GOS_STATIC void_t svl_bldHandlerBootModeReqMsgReceived (void_t)
{
 8038ff8:	b580      	push	{r7, lr}
 8038ffa:	b0d6      	sub	sp, #344	; 0x158
 8038ffc:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	bld_bootloaderData_t bldData = {0};
 8038ffe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8039002:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8039006:	4618      	mov	r0, r3
 8039008:	f240 1355 	movw	r3, #341	; 0x155
 803900c:	461a      	mov	r2, r3
 803900e:	2100      	movs	r1, #0
 8039010:	f009 fdfa 	bl	8042c08 <memset>

	/*
	 * Function code.
	 */
	if (bld_dataGet(&bldData) == GOS_SUCCESS)
 8039014:	463b      	mov	r3, r7
 8039016:	4618      	mov	r0, r3
 8039018:	f000 fe8c 	bl	8039d34 <bld_dataGet>
 803901c:	4603      	mov	r3, r0
 803901e:	2b55      	cmp	r3, #85	; 0x55
 8039020:	d10f      	bne.n	8039042 <svl_bldHandlerBootModeReqMsgReceived+0x4a>
	{
		// Set update mode flag.
		bldData.updateMode = GOS_TRUE;
 8039022:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8039026:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 803902a:	2236      	movs	r2, #54	; 0x36
 803902c:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

		// Store data.
		if (bld_dataSet(&bldData) == GOS_SUCCESS)
 8039030:	463b      	mov	r3, r7
 8039032:	4618      	mov	r0, r3
 8039034:	f000 ff04 	bl	8039e40 <bld_dataSet>
 8039038:	4603      	mov	r3, r0
 803903a:	2b55      	cmp	r3, #85	; 0x55
 803903c:	d101      	bne.n	8039042 <svl_bldHandlerBootModeReqMsgReceived+0x4a>
		{
			gos_kernelReset();
 803903e:	f001 fb37 	bl	803a6b0 <gos_kernelReset>
	}
	else
	{
		// Data error.
	}
}
 8039042:	bf00      	nop
 8039044:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8039048:	46bd      	mov	sp, r7
 803904a:	bd80      	pop	{r7, pc}

0803904c <svl_bldHandlerBootDataReqMsgReceived>:
 * @details Sends out the bootloader data via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_bldHandlerBootDataReqMsgReceived (void_t)
{
 803904c:	b580      	push	{r7, lr}
 803904e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8039052:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	bld_com_data_resp_msg_t bootloaderDataMessage = {0};
 8039054:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8039058:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 803905c:	4618      	mov	r0, r3
 803905e:	f240 23a9 	movw	r3, #681	; 0x2a9
 8039062:	461a      	mov	r2, r3
 8039064:	2100      	movs	r1, #0
 8039066:	f009 fdcf 	bl	8042c08 <memset>

	/*
	 * Function code.
	 */
	if (bld_dataGet(&bootloaderDataMessage.bldData) == GOS_SUCCESS &&
 803906a:	1d3b      	adds	r3, r7, #4
 803906c:	4618      	mov	r0, r3
 803906e:	f000 fe61 	bl	8039d34 <bld_dataGet>
 8039072:	4603      	mov	r3, r0
 8039074:	2b55      	cmp	r3, #85	; 0x55
 8039076:	d128      	bne.n	80390ca <svl_bldHandlerBootDataReqMsgReceived+0x7e>
	    bld_appDataGet(&bootloaderDataMessage.appData) == GOS_SUCCESS)
 8039078:	1d3b      	adds	r3, r7, #4
 803907a:	f203 1355 	addw	r3, r3, #341	; 0x155
 803907e:	4618      	mov	r0, r3
 8039080:	f000 fe9a 	bl	8039db8 <bld_appDataGet>
 8039084:	4603      	mov	r3, r0
	if (bld_dataGet(&bootloaderDataMessage.bldData) == GOS_SUCCESS &&
 8039086:	2b55      	cmp	r3, #85	; 0x55
 8039088:	d11f      	bne.n	80390ca <svl_bldHandlerBootDataReqMsgReceived+0x7e>
	{
		// Check if driver info is empty (first call).
		if (bootloaderDataMessage.appData.libVersion.date.years == 0u)
 803908a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 803908e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8039092:	f8b3 3173 	ldrh.w	r3, [r3, #371]	; 0x173
 8039096:	b29b      	uxth	r3, r3
 8039098:	2b00      	cmp	r3, #0
 803909a:	d10b      	bne.n	80390b4 <svl_bldHandlerBootDataReqMsgReceived+0x68>
		{
			(void_t) gos_libGetVersion(&bootloaderDataMessage.appData.libVersion);
 803909c:	1d3b      	adds	r3, r7, #4
 803909e:	f203 1365 	addw	r3, r3, #357	; 0x165
 80390a2:	4618      	mov	r0, r3
 80390a4:	f7fb fd08 	bl	8034ab8 <gos_libGetVersion>
			(void_t) bld_appDataSet(&bootloaderDataMessage.appData);
 80390a8:	1d3b      	adds	r3, r7, #4
 80390aa:	f203 1355 	addw	r3, r3, #341	; 0x155
 80390ae:	4618      	mov	r0, r3
 80390b0:	f000 ff34 	bl	8039f1c <bld_appDataSet>
		else
		{
			// Driver info OK.
		}

	    (void_t) gos_gcpTransmitMessage(
 80390b4:	1d3a      	adds	r2, r7, #4
 80390b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80390ba:	9300      	str	r3, [sp, #0]
 80390bc:	f240 23a9 	movw	r3, #681	; 0x2a9
 80390c0:	f24a 0120 	movw	r1, #40992	; 0xa020
 80390c4:	2000      	movs	r0, #0
 80390c6:	f004 fb91 	bl	803d7ec <gos_gcpTransmitMessage>
	}
	else
	{
		// Data get error.
	}
}
 80390ca:	bf00      	nop
 80390cc:	f507 772c 	add.w	r7, r7, #688	; 0x2b0
 80390d0:	46bd      	mov	sp, r7
 80390d2:	bd80      	pop	{r7, pc}

080390d4 <svl_deviceHandlerInit>:

/*
 * Function: svl_deviceHandlerInit
 */
gos_result_t svl_deviceHandlerInit (void_t)
{
 80390d4:	b580      	push	{r7, lr}
 80390d6:	b082      	sub	sp, #8
 80390d8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 80390da:	23ae      	movs	r3, #174	; 0xae
 80390dc:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    initResult = gos_taskRegister(&deviceHandlerDaemonDesc, NULL);
 80390de:	2100      	movs	r1, #0
 80390e0:	4804      	ldr	r0, [pc, #16]	; (80390f4 <svl_deviceHandlerInit+0x20>)
 80390e2:	f002 fb23 	bl	803b72c <gos_taskRegister>
 80390e6:	4603      	mov	r3, r0
 80390e8:	71fb      	strb	r3, [r7, #7]

    return initResult;
 80390ea:	79fb      	ldrb	r3, [r7, #7]
}
 80390ec:	4618      	mov	r0, r3
 80390ee:	3708      	adds	r7, #8
 80390f0:	46bd      	mov	sp, r7
 80390f2:	bd80      	pop	{r7, pc}
 80390f4:	20001b60 	.word	0x20001b60

080390f8 <svl_deviceHandlerDaemon>:
 * TODO
 * @param
 * @return
 */
GOS_STATIC void_t svl_deviceHandlerDaemon (void_t)
{
 80390f8:	b590      	push	{r4, r7, lr}
 80390fa:	b083      	sub	sp, #12
 80390fc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u8_t  deviceIdx   = 0u;
 80390fe:	2300      	movs	r3, #0
 8039100:	71fb      	strb	r3, [r7, #7]
    u32_t kernelTicks = gos_kernelGetSysTicks();
 8039102:	f001 fab7 	bl	803a674 <gos_kernelGetSysTicks>
 8039106:	6038      	str	r0, [r7, #0]
    /*
     * Function code.
     */
    for (;;)
    {
        for (deviceIdx = 0u; deviceIdx < SVL_DHS_MAX_DEVICES; deviceIdx++)
 8039108:	2300      	movs	r3, #0
 803910a:	71fb      	strb	r3, [r7, #7]
 803910c:	e0ca      	b.n	80392a4 <svl_deviceHandlerDaemon+0x1ac>
        {
            kernelTicks = gos_kernelGetSysTicks();
 803910e:	f001 fab1 	bl	803a674 <gos_kernelGetSysTicks>
 8039112:	6038      	str	r0, [r7, #0]

            if (devices[deviceIdx].availableFunction == NULL &&
 8039114:	79fa      	ldrb	r2, [r7, #7]
 8039116:	4967      	ldr	r1, [pc, #412]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 8039118:	4613      	mov	r3, r2
 803911a:	005b      	lsls	r3, r3, #1
 803911c:	4413      	add	r3, r2
 803911e:	00db      	lsls	r3, r3, #3
 8039120:	440b      	add	r3, r1
 8039122:	3304      	adds	r3, #4
 8039124:	681b      	ldr	r3, [r3, #0]
 8039126:	2b00      	cmp	r3, #0
 8039128:	d10a      	bne.n	8039140 <svl_deviceHandlerDaemon+0x48>
                devices[deviceIdx].initFunction == NULL)
 803912a:	79fa      	ldrb	r2, [r7, #7]
 803912c:	4961      	ldr	r1, [pc, #388]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 803912e:	4613      	mov	r3, r2
 8039130:	005b      	lsls	r3, r3, #1
 8039132:	4413      	add	r3, r2
 8039134:	00db      	lsls	r3, r3, #3
 8039136:	440b      	add	r3, r1
 8039138:	681b      	ldr	r3, [r3, #0]
            if (devices[deviceIdx].availableFunction == NULL &&
 803913a:	2b00      	cmp	r3, #0
 803913c:	f000 80b6 	beq.w	80392ac <svl_deviceHandlerDaemon+0x1b4>
                break;
            }
            else
            {
                // If device was previously not available...
                if (devices[deviceIdx].devicePrevState == GOS_FALSE)
 8039140:	79fa      	ldrb	r2, [r7, #7]
 8039142:	495c      	ldr	r1, [pc, #368]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 8039144:	4613      	mov	r3, r2
 8039146:	005b      	lsls	r3, r3, #1
 8039148:	4413      	add	r3, r2
 803914a:	00db      	lsls	r3, r3, #3
 803914c:	440b      	add	r3, r1
 803914e:	3316      	adds	r3, #22
 8039150:	781b      	ldrb	r3, [r3, #0]
 8039152:	2b49      	cmp	r3, #73	; 0x49
 8039154:	d16c      	bne.n	8039230 <svl_deviceHandlerDaemon+0x138>
                {
                    // If ticks elapsed.
                    if (kernelTicks - devices[deviceIdx].inactiveTicks > devices[deviceIdx].reconnectTime)
 8039156:	79fa      	ldrb	r2, [r7, #7]
 8039158:	4956      	ldr	r1, [pc, #344]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 803915a:	4613      	mov	r3, r2
 803915c:	005b      	lsls	r3, r3, #1
 803915e:	4413      	add	r3, r2
 8039160:	00db      	lsls	r3, r3, #3
 8039162:	440b      	add	r3, r1
 8039164:	3310      	adds	r3, #16
 8039166:	681b      	ldr	r3, [r3, #0]
 8039168:	683a      	ldr	r2, [r7, #0]
 803916a:	1ad1      	subs	r1, r2, r3
 803916c:	79fa      	ldrb	r2, [r7, #7]
 803916e:	4851      	ldr	r0, [pc, #324]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 8039170:	4613      	mov	r3, r2
 8039172:	005b      	lsls	r3, r3, #1
 8039174:	4413      	add	r3, r2
 8039176:	00db      	lsls	r3, r3, #3
 8039178:	4403      	add	r3, r0
 803917a:	330c      	adds	r3, #12
 803917c:	681b      	ldr	r3, [r3, #0]
 803917e:	4299      	cmp	r1, r3
 8039180:	f240 808d 	bls.w	803929e <svl_deviceHandlerDaemon+0x1a6>
                    {
                        // Re-initialize.
                        (void_t) devices[deviceIdx].initFunction(devices[deviceIdx].pDevice);
 8039184:	79fa      	ldrb	r2, [r7, #7]
 8039186:	494b      	ldr	r1, [pc, #300]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 8039188:	4613      	mov	r3, r2
 803918a:	005b      	lsls	r3, r3, #1
 803918c:	4413      	add	r3, r2
 803918e:	00db      	lsls	r3, r3, #3
 8039190:	440b      	add	r3, r1
 8039192:	6819      	ldr	r1, [r3, #0]
 8039194:	79fa      	ldrb	r2, [r7, #7]
 8039196:	4847      	ldr	r0, [pc, #284]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 8039198:	4613      	mov	r3, r2
 803919a:	005b      	lsls	r3, r3, #1
 803919c:	4413      	add	r3, r2
 803919e:	00db      	lsls	r3, r3, #3
 80391a0:	4403      	add	r3, r0
 80391a2:	3308      	adds	r3, #8
 80391a4:	681b      	ldr	r3, [r3, #0]
 80391a6:	4618      	mov	r0, r3
 80391a8:	4788      	blx	r1

                        // Check availability.
                        devices[deviceIdx].devicePrevState = devices[deviceIdx].availableFunction(devices[deviceIdx].pDevice);
 80391aa:	79fa      	ldrb	r2, [r7, #7]
 80391ac:	4941      	ldr	r1, [pc, #260]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 80391ae:	4613      	mov	r3, r2
 80391b0:	005b      	lsls	r3, r3, #1
 80391b2:	4413      	add	r3, r2
 80391b4:	00db      	lsls	r3, r3, #3
 80391b6:	440b      	add	r3, r1
 80391b8:	3304      	adds	r3, #4
 80391ba:	6819      	ldr	r1, [r3, #0]
 80391bc:	79fa      	ldrb	r2, [r7, #7]
 80391be:	483d      	ldr	r0, [pc, #244]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 80391c0:	4613      	mov	r3, r2
 80391c2:	005b      	lsls	r3, r3, #1
 80391c4:	4413      	add	r3, r2
 80391c6:	00db      	lsls	r3, r3, #3
 80391c8:	4403      	add	r3, r0
 80391ca:	3308      	adds	r3, #8
 80391cc:	681b      	ldr	r3, [r3, #0]
 80391ce:	79fc      	ldrb	r4, [r7, #7]
 80391d0:	4618      	mov	r0, r3
 80391d2:	4788      	blx	r1
 80391d4:	4603      	mov	r3, r0
 80391d6:	4619      	mov	r1, r3
 80391d8:	4a36      	ldr	r2, [pc, #216]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 80391da:	4623      	mov	r3, r4
 80391dc:	005b      	lsls	r3, r3, #1
 80391de:	4423      	add	r3, r4
 80391e0:	00db      	lsls	r3, r3, #3
 80391e2:	4413      	add	r3, r2
 80391e4:	3316      	adds	r3, #22
 80391e6:	460a      	mov	r2, r1
 80391e8:	701a      	strb	r2, [r3, #0]

                        // If it is available now, resume handler task.
                        if (devices[deviceIdx].devicePrevState == GOS_TRUE)
 80391ea:	79fa      	ldrb	r2, [r7, #7]
 80391ec:	4931      	ldr	r1, [pc, #196]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 80391ee:	4613      	mov	r3, r2
 80391f0:	005b      	lsls	r3, r3, #1
 80391f2:	4413      	add	r3, r2
 80391f4:	00db      	lsls	r3, r3, #3
 80391f6:	440b      	add	r3, r1
 80391f8:	3316      	adds	r3, #22
 80391fa:	781b      	ldrb	r3, [r3, #0]
 80391fc:	2b36      	cmp	r3, #54	; 0x36
 80391fe:	d10c      	bne.n	803921a <svl_deviceHandlerDaemon+0x122>
                        {
                            (void_t) gos_taskResume(devices[deviceIdx].deviceHandlerTaskId);
 8039200:	79fa      	ldrb	r2, [r7, #7]
 8039202:	492c      	ldr	r1, [pc, #176]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 8039204:	4613      	mov	r3, r2
 8039206:	005b      	lsls	r3, r3, #1
 8039208:	4413      	add	r3, r2
 803920a:	00db      	lsls	r3, r3, #3
 803920c:	440b      	add	r3, r1
 803920e:	3314      	adds	r3, #20
 8039210:	881b      	ldrh	r3, [r3, #0]
 8039212:	4618      	mov	r0, r3
 8039214:	f002 fe8a 	bl	803bf2c <gos_taskResume>
 8039218:	e041      	b.n	803929e <svl_deviceHandlerDaemon+0x1a6>
                        }
                        else
                        {
                            // Retry, when time elapsed again.
                            // Update ticks.
                            devices[deviceIdx].inactiveTicks = kernelTicks;
 803921a:	79fa      	ldrb	r2, [r7, #7]
 803921c:	4925      	ldr	r1, [pc, #148]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 803921e:	4613      	mov	r3, r2
 8039220:	005b      	lsls	r3, r3, #1
 8039222:	4413      	add	r3, r2
 8039224:	00db      	lsls	r3, r3, #3
 8039226:	440b      	add	r3, r1
 8039228:	3310      	adds	r3, #16
 803922a:	683a      	ldr	r2, [r7, #0]
 803922c:	601a      	str	r2, [r3, #0]
 803922e:	e036      	b.n	803929e <svl_deviceHandlerDaemon+0x1a6>
                    }
                }
                else
                {
                    // If device is not present, suspend handler.
                    if (devices[deviceIdx].availableFunction(devices[deviceIdx].pDevice) == GOS_FALSE)
 8039230:	79fa      	ldrb	r2, [r7, #7]
 8039232:	4920      	ldr	r1, [pc, #128]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 8039234:	4613      	mov	r3, r2
 8039236:	005b      	lsls	r3, r3, #1
 8039238:	4413      	add	r3, r2
 803923a:	00db      	lsls	r3, r3, #3
 803923c:	440b      	add	r3, r1
 803923e:	3304      	adds	r3, #4
 8039240:	6819      	ldr	r1, [r3, #0]
 8039242:	79fa      	ldrb	r2, [r7, #7]
 8039244:	481b      	ldr	r0, [pc, #108]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 8039246:	4613      	mov	r3, r2
 8039248:	005b      	lsls	r3, r3, #1
 803924a:	4413      	add	r3, r2
 803924c:	00db      	lsls	r3, r3, #3
 803924e:	4403      	add	r3, r0
 8039250:	3308      	adds	r3, #8
 8039252:	681b      	ldr	r3, [r3, #0]
 8039254:	4618      	mov	r0, r3
 8039256:	4788      	blx	r1
 8039258:	4603      	mov	r3, r0
 803925a:	2b49      	cmp	r3, #73	; 0x49
 803925c:	d11f      	bne.n	803929e <svl_deviceHandlerDaemon+0x1a6>
                    {
                        // Update ticks.
                        devices[deviceIdx].inactiveTicks   = kernelTicks;
 803925e:	79fa      	ldrb	r2, [r7, #7]
 8039260:	4914      	ldr	r1, [pc, #80]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 8039262:	4613      	mov	r3, r2
 8039264:	005b      	lsls	r3, r3, #1
 8039266:	4413      	add	r3, r2
 8039268:	00db      	lsls	r3, r3, #3
 803926a:	440b      	add	r3, r1
 803926c:	3310      	adds	r3, #16
 803926e:	683a      	ldr	r2, [r7, #0]
 8039270:	601a      	str	r2, [r3, #0]
                        devices[deviceIdx].devicePrevState = GOS_FALSE;
 8039272:	79fa      	ldrb	r2, [r7, #7]
 8039274:	490f      	ldr	r1, [pc, #60]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 8039276:	4613      	mov	r3, r2
 8039278:	005b      	lsls	r3, r3, #1
 803927a:	4413      	add	r3, r2
 803927c:	00db      	lsls	r3, r3, #3
 803927e:	440b      	add	r3, r1
 8039280:	3316      	adds	r3, #22
 8039282:	2249      	movs	r2, #73	; 0x49
 8039284:	701a      	strb	r2, [r3, #0]
                        (void_t) gos_taskSuspend(devices[deviceIdx].deviceHandlerTaskId);
 8039286:	79fa      	ldrb	r2, [r7, #7]
 8039288:	490a      	ldr	r1, [pc, #40]	; (80392b4 <svl_deviceHandlerDaemon+0x1bc>)
 803928a:	4613      	mov	r3, r2
 803928c:	005b      	lsls	r3, r3, #1
 803928e:	4413      	add	r3, r2
 8039290:	00db      	lsls	r3, r3, #3
 8039292:	440b      	add	r3, r1
 8039294:	3314      	adds	r3, #20
 8039296:	881b      	ldrh	r3, [r3, #0]
 8039298:	4618      	mov	r0, r3
 803929a:	f002 fd25 	bl	803bce8 <gos_taskSuspend>
        for (deviceIdx = 0u; deviceIdx < SVL_DHS_MAX_DEVICES; deviceIdx++)
 803929e:	79fb      	ldrb	r3, [r7, #7]
 80392a0:	3301      	adds	r3, #1
 80392a2:	71fb      	strb	r3, [r7, #7]
 80392a4:	79fb      	ldrb	r3, [r7, #7]
 80392a6:	2b07      	cmp	r3, #7
 80392a8:	f67f af31 	bls.w	803910e <svl_deviceHandlerDaemon+0x16>
                    }
                }
            }
        }

        (void_t) gos_taskSleep(250);
 80392ac:	20fa      	movs	r0, #250	; 0xfa
 80392ae:	f002 fbcf 	bl	803ba50 <gos_taskSleep>
        for (deviceIdx = 0u; deviceIdx < SVL_DHS_MAX_DEVICES; deviceIdx++)
 80392b2:	e729      	b.n	8039108 <svl_deviceHandlerDaemon+0x10>
 80392b4:	20006e98 	.word	0x20006e98

080392b8 <svl_dsmInit>:

/*
 * Function: svl_dsmInit
 */
gos_result_t svl_dsmInit (void_t)
{
 80392b8:	b590      	push	{r4, r7, lr}
 80392ba:	b083      	sub	sp, #12
 80392bc:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t dsmInitResult = GOS_SUCCESS;
 80392be:	2355      	movs	r3, #85	; 0x55
 80392c0:	71fb      	strb	r3, [r7, #7]
	u8_t         initIdx       = 0u;
 80392c2:	2300      	movs	r3, #0
 80392c4:	71bb      	strb	r3, [r7, #6]
	u8_t         initBlockIdx  = 0u;
 80392c6:	2300      	movs	r3, #0
 80392c8:	717b      	strb	r3, [r7, #5]

	/*
	 * Function code.
	 */
	if (initPhaseConfig != NULL && initPhaseConfigSize > 0u)
 80392ca:	4b39      	ldr	r3, [pc, #228]	; (80393b0 <svl_dsmInit+0xf8>)
 80392cc:	681b      	ldr	r3, [r3, #0]
 80392ce:	2b00      	cmp	r3, #0
 80392d0:	d05b      	beq.n	803938a <svl_dsmInit+0xd2>
	{
		// Loop through all init phases.
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 80392d2:	2300      	movs	r3, #0
 80392d4:	71bb      	strb	r3, [r7, #6]
 80392d6:	e04f      	b.n	8039378 <svl_dsmInit+0xc0>
		{
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 80392d8:	4836      	ldr	r0, [pc, #216]	; (80393b4 <svl_dsmInit+0xfc>)
 80392da:	f001 f817 	bl	803a30c <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe(initPhaseConfig[initIdx].phaseName);
 80392de:	79ba      	ldrb	r2, [r7, #6]
 80392e0:	4935      	ldr	r1, [pc, #212]	; (80393b8 <svl_dsmInit+0x100>)
 80392e2:	4613      	mov	r3, r2
 80392e4:	019b      	lsls	r3, r3, #6
 80392e6:	4413      	add	r3, r2
 80392e8:	009b      	lsls	r3, r3, #2
 80392ea:	440b      	add	r3, r1
 80392ec:	681b      	ldr	r3, [r3, #0]
 80392ee:	4618      	mov	r0, r3
 80392f0:	f001 f80c 	bl	803a30c <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 80392f4:	482f      	ldr	r0, [pc, #188]	; (80393b4 <svl_dsmInit+0xfc>)
 80392f6:	f001 f809 	bl	803a30c <gos_traceDriverTransmitString_Unsafe>

			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 80392fa:	2300      	movs	r3, #0
 80392fc:	717b      	strb	r3, [r7, #5]
 80392fe:	e033      	b.n	8039368 <svl_dsmInit+0xb0>
			{
				if (initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer != NULL)
 8039300:	79ba      	ldrb	r2, [r7, #6]
 8039302:	797b      	ldrb	r3, [r7, #5]
 8039304:	482c      	ldr	r0, [pc, #176]	; (80393b8 <svl_dsmInit+0x100>)
 8039306:	00d9      	lsls	r1, r3, #3
 8039308:	4613      	mov	r3, r2
 803930a:	019b      	lsls	r3, r3, #6
 803930c:	4413      	add	r3, r2
 803930e:	009b      	lsls	r3, r3, #2
 8039310:	440b      	add	r3, r1
 8039312:	4403      	add	r3, r0
 8039314:	3308      	adds	r3, #8
 8039316:	681b      	ldr	r3, [r3, #0]
 8039318:	2b00      	cmp	r3, #0
 803931a:	d029      	beq.n	8039370 <svl_dsmInit+0xb8>
				{
					dsmInitResult &= gos_errorTraceInit(
 803931c:	79ba      	ldrb	r2, [r7, #6]
 803931e:	797b      	ldrb	r3, [r7, #5]
							initPhaseConfig[initIdx].initBlock[initBlockIdx].description,
 8039320:	4825      	ldr	r0, [pc, #148]	; (80393b8 <svl_dsmInit+0x100>)
 8039322:	00d9      	lsls	r1, r3, #3
 8039324:	4613      	mov	r3, r2
 8039326:	019b      	lsls	r3, r3, #6
 8039328:	4413      	add	r3, r2
 803932a:	009b      	lsls	r3, r3, #2
 803932c:	440b      	add	r3, r1
 803932e:	4403      	add	r3, r0
 8039330:	3304      	adds	r3, #4
 8039332:	681c      	ldr	r4, [r3, #0]
							initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer());
 8039334:	79ba      	ldrb	r2, [r7, #6]
 8039336:	797b      	ldrb	r3, [r7, #5]
 8039338:	481f      	ldr	r0, [pc, #124]	; (80393b8 <svl_dsmInit+0x100>)
 803933a:	00d9      	lsls	r1, r3, #3
 803933c:	4613      	mov	r3, r2
 803933e:	019b      	lsls	r3, r3, #6
 8039340:	4413      	add	r3, r2
 8039342:	009b      	lsls	r3, r3, #2
 8039344:	440b      	add	r3, r1
 8039346:	4403      	add	r3, r0
 8039348:	3308      	adds	r3, #8
 803934a:	681b      	ldr	r3, [r3, #0]
					dsmInitResult &= gos_errorTraceInit(
 803934c:	4798      	blx	r3
 803934e:	4603      	mov	r3, r0
 8039350:	4619      	mov	r1, r3
 8039352:	4620      	mov	r0, r4
 8039354:	f004 f9b6 	bl	803d6c4 <gos_errorTraceInit>
 8039358:	4603      	mov	r3, r0
 803935a:	461a      	mov	r2, r3
 803935c:	79fb      	ldrb	r3, [r7, #7]
 803935e:	4013      	ands	r3, r2
 8039360:	71fb      	strb	r3, [r7, #7]
			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 8039362:	797b      	ldrb	r3, [r7, #5]
 8039364:	3301      	adds	r3, #1
 8039366:	717b      	strb	r3, [r7, #5]
 8039368:	797b      	ldrb	r3, [r7, #5]
 803936a:	2b1f      	cmp	r3, #31
 803936c:	d9c8      	bls.n	8039300 <svl_dsmInit+0x48>
 803936e:	e000      	b.n	8039372 <svl_dsmInit+0xba>
				}
				else
				{
					// End of initializers.
					break;
 8039370:	bf00      	nop
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 8039372:	79bb      	ldrb	r3, [r7, #6]
 8039374:	3301      	adds	r3, #1
 8039376:	71bb      	strb	r3, [r7, #6]
 8039378:	79ba      	ldrb	r2, [r7, #6]
 803937a:	4b0d      	ldr	r3, [pc, #52]	; (80393b0 <svl_dsmInit+0xf8>)
 803937c:	681b      	ldr	r3, [r3, #0]
 803937e:	490f      	ldr	r1, [pc, #60]	; (80393bc <svl_dsmInit+0x104>)
 8039380:	fba1 1303 	umull	r1, r3, r1, r3
 8039384:	0a1b      	lsrs	r3, r3, #8
 8039386:	429a      	cmp	r2, r3
 8039388:	d3a6      	bcc.n	80392d8 <svl_dsmInit+0x20>
	{
		// Configuration is empty.
	}

	// Register DSM task.
	dsmInitResult &= gos_taskRegister(&svlDsmDaemonDesc, NULL);
 803938a:	2100      	movs	r1, #0
 803938c:	480c      	ldr	r0, [pc, #48]	; (80393c0 <svl_dsmInit+0x108>)
 803938e:	f002 f9cd 	bl	803b72c <gos_taskRegister>
 8039392:	4603      	mov	r3, r0
 8039394:	461a      	mov	r2, r3
 8039396:	79fb      	ldrb	r3, [r7, #7]
 8039398:	4013      	ands	r3, r2
 803939a:	71fb      	strb	r3, [r7, #7]

	if (dsmInitResult != GOS_SUCCESS)
 803939c:	79fb      	ldrb	r3, [r7, #7]
 803939e:	2b55      	cmp	r3, #85	; 0x55
 80393a0:	d001      	beq.n	80393a6 <svl_dsmInit+0xee>
	{
		dsmInitResult = GOS_ERROR;
 80393a2:	23ae      	movs	r3, #174	; 0xae
 80393a4:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Success.
	}

	return dsmInitResult;
 80393a6:	79fb      	ldrb	r3, [r7, #7]
}
 80393a8:	4618      	mov	r0, r3
 80393aa:	370c      	adds	r7, #12
 80393ac:	46bd      	mov	sp, r7
 80393ae:	bd90      	pop	{r4, r7, pc}
 80393b0:	20001864 	.word	0x20001864
 80393b4:	08047664 	.word	0x08047664
 80393b8:	08048c94 	.word	0x08048c94
 80393bc:	fc0fc0fd 	.word	0xfc0fc0fd
 80393c0:	20001bcc 	.word	0x20001bcc

080393c4 <svl_dsmPrintOSInfo>:

/*
 * Function: svl_dsmPrintOSInfo
 */
gos_result_t svl_dsmPrintOSInfo (void_t)
{
 80393c4:	b580      	push	{r7, lr}
 80393c6:	b082      	sub	sp, #8
 80393c8:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t printResult = GOS_SUCCESS;
 80393ca:	2355      	movs	r3, #85	; 0x55
 80393cc:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"OS Info"TRACE_FORMAT_RESET"\r\n");
 80393ce:	490f      	ldr	r1, [pc, #60]	; (803940c <svl_dsmPrintOSInfo+0x48>)
 80393d0:	2049      	movs	r0, #73	; 0x49
 80393d2:	f007 fbfd 	bl	8040bd0 <gos_traceTraceFormatted>
 80393d6:	4603      	mov	r3, r0
 80393d8:	461a      	mov	r2, r3
 80393da:	79fb      	ldrb	r3, [r7, #7]
 80393dc:	4013      	ands	r3, r2
 80393de:	71fb      	strb	r3, [r7, #7]
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version: %02u.%02u\r\n", GOS_VERSION_MAJOR, GOS_VERSION_MINOR);
 80393e0:	230b      	movs	r3, #11
 80393e2:	2200      	movs	r2, #0
 80393e4:	490a      	ldr	r1, [pc, #40]	; (8039410 <svl_dsmPrintOSInfo+0x4c>)
 80393e6:	2049      	movs	r0, #73	; 0x49
 80393e8:	f007 fbf2 	bl	8040bd0 <gos_traceTraceFormatted>
 80393ec:	4603      	mov	r3, r0
 80393ee:	461a      	mov	r2, r3
 80393f0:	79fb      	ldrb	r3, [r7, #7]
 80393f2:	4013      	ands	r3, r2
 80393f4:	71fb      	strb	r3, [r7, #7]

	if (printResult != GOS_SUCCESS)
 80393f6:	79fb      	ldrb	r3, [r7, #7]
 80393f8:	2b55      	cmp	r3, #85	; 0x55
 80393fa:	d001      	beq.n	8039400 <svl_dsmPrintOSInfo+0x3c>
	{
		printResult = GOS_ERROR;
 80393fc:	23ae      	movs	r3, #174	; 0xae
 80393fe:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Success.
	}

	return printResult;
 8039400:	79fb      	ldrb	r3, [r7, #7]
}
 8039402:	4618      	mov	r0, r3
 8039404:	3708      	adds	r7, #8
 8039406:	46bd      	mov	sp, r7
 8039408:	bd80      	pop	{r7, pc}
 803940a:	bf00      	nop
 803940c:	08047668 	.word	0x08047668
 8039410:	08047680 	.word	0x08047680

08039414 <svl_dsmPrintLibInfo>:

/*
 * Function: svl_dsmPrintLibInfo
 */
gos_result_t svl_dsmPrintLibInfo (void_t)
{
 8039414:	b580      	push	{r7, lr}
 8039416:	b0ac      	sub	sp, #176	; 0xb0
 8039418:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t     printResult = GOS_SUCCESS;
 803941a:	2355      	movs	r3, #85	; 0x55
 803941c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	gos_libVersion_t libVer      = {0};
 8039420:	1d3b      	adds	r3, r7, #4
 8039422:	22a0      	movs	r2, #160	; 0xa0
 8039424:	2100      	movs	r1, #0
 8039426:	4618      	mov	r0, r3
 8039428:	f009 fbee 	bl	8042c08 <memset>

	/*
	 * Function code.
	 */
	printResult &= gos_libGetVersion(&libVer);
 803942c:	1d3b      	adds	r3, r7, #4
 803942e:	4618      	mov	r0, r3
 8039430:	f7fb fb42 	bl	8034ab8 <gos_libGetVersion>
 8039434:	4603      	mov	r3, r0
 8039436:	461a      	mov	r2, r3
 8039438:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 803943c:	4013      	ands	r3, r2
 803943e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Library Info"TRACE_FORMAT_RESET"\r\n");
 8039442:	4934      	ldr	r1, [pc, #208]	; (8039514 <svl_dsmPrintLibInfo+0x100>)
 8039444:	2049      	movs	r0, #73	; 0x49
 8039446:	f007 fbc3 	bl	8040bd0 <gos_traceTraceFormatted>
 803944a:	4603      	mov	r3, r0
 803944c:	461a      	mov	r2, r3
 803944e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8039452:	4013      	ands	r3, r2
 8039454:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", libVer.name);
 8039458:	1d3b      	adds	r3, r7, #4
 803945a:	3310      	adds	r3, #16
 803945c:	461a      	mov	r2, r3
 803945e:	492e      	ldr	r1, [pc, #184]	; (8039518 <svl_dsmPrintLibInfo+0x104>)
 8039460:	2049      	movs	r0, #73	; 0x49
 8039462:	f007 fbb5 	bl	8040bd0 <gos_traceTraceFormatted>
 8039466:	4603      	mov	r3, r0
 8039468:	461a      	mov	r2, r3
 803946a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 803946e:	4013      	ands	r3, r2
 8039470:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", libVer.description);
 8039474:	1d3b      	adds	r3, r7, #4
 8039476:	3340      	adds	r3, #64	; 0x40
 8039478:	461a      	mov	r2, r3
 803947a:	4928      	ldr	r1, [pc, #160]	; (803951c <svl_dsmPrintLibInfo+0x108>)
 803947c:	2049      	movs	r0, #73	; 0x49
 803947e:	f007 fba7 	bl	8040bd0 <gos_traceTraceFormatted>
 8039482:	4603      	mov	r3, r0
 8039484:	461a      	mov	r2, r3
 8039486:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 803948a:	4013      	ands	r3, r2
 803948c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", libVer.major, libVer.minor, libVer.build);
 8039490:	88bb      	ldrh	r3, [r7, #4]
 8039492:	461a      	mov	r2, r3
 8039494:	88fb      	ldrh	r3, [r7, #6]
 8039496:	4619      	mov	r1, r3
 8039498:	893b      	ldrh	r3, [r7, #8]
 803949a:	9300      	str	r3, [sp, #0]
 803949c:	460b      	mov	r3, r1
 803949e:	4920      	ldr	r1, [pc, #128]	; (8039520 <svl_dsmPrintLibInfo+0x10c>)
 80394a0:	2049      	movs	r0, #73	; 0x49
 80394a2:	f007 fb95 	bl	8040bd0 <gos_traceTraceFormatted>
 80394a6:	4603      	mov	r3, r0
 80394a8:	461a      	mov	r2, r3
 80394aa:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80394ae:	4013      	ands	r3, r2
 80394b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", libVer.date.years, libVer.date.months, libVer.date.days);
 80394b4:	8a7b      	ldrh	r3, [r7, #18]
 80394b6:	461a      	mov	r2, r3
 80394b8:	7c7b      	ldrb	r3, [r7, #17]
 80394ba:	4619      	mov	r1, r3
 80394bc:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80394c0:	b29b      	uxth	r3, r3
 80394c2:	9300      	str	r3, [sp, #0]
 80394c4:	460b      	mov	r3, r1
 80394c6:	4917      	ldr	r1, [pc, #92]	; (8039524 <svl_dsmPrintLibInfo+0x110>)
 80394c8:	2049      	movs	r0, #73	; 0x49
 80394ca:	f007 fb81 	bl	8040bd0 <gos_traceTraceFormatted>
 80394ce:	4603      	mov	r3, r0
 80394d0:	461a      	mov	r2, r3
 80394d2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80394d6:	4013      	ands	r3, r2
 80394d8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", libVer.author);
 80394dc:	1d3b      	adds	r3, r7, #4
 80394de:	3380      	adds	r3, #128	; 0x80
 80394e0:	461a      	mov	r2, r3
 80394e2:	4911      	ldr	r1, [pc, #68]	; (8039528 <svl_dsmPrintLibInfo+0x114>)
 80394e4:	2049      	movs	r0, #73	; 0x49
 80394e6:	f007 fb73 	bl	8040bd0 <gos_traceTraceFormatted>
 80394ea:	4603      	mov	r3, r0
 80394ec:	461a      	mov	r2, r3
 80394ee:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80394f2:	4013      	ands	r3, r2
 80394f4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	if (printResult != GOS_SUCCESS)
 80394f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80394fc:	2b55      	cmp	r3, #85	; 0x55
 80394fe:	d002      	beq.n	8039506 <svl_dsmPrintLibInfo+0xf2>
	{
		printResult = GOS_ERROR;
 8039500:	23ae      	movs	r3, #174	; 0xae
 8039502:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	else
	{
		// Success.
	}

	return printResult;
 8039506:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 803950a:	4618      	mov	r0, r3
 803950c:	37a8      	adds	r7, #168	; 0xa8
 803950e:	46bd      	mov	sp, r7
 8039510:	bd80      	pop	{r7, pc}
 8039512:	bf00      	nop
 8039514:	08047698 	.word	0x08047698
 8039518:	080476b4 	.word	0x080476b4
 803951c:	080476c8 	.word	0x080476c8
 8039520:	080476dc 	.word	0x080476dc
 8039524:	080476fc 	.word	0x080476fc
 8039528:	0804771c 	.word	0x0804771c

0803952c <svl_dsmPrintHwInfo>:

/*
 * Function: svl_dsmPrintHwInfo
 */
gos_result_t svl_dsmPrintHwInfo (void_t)
{
 803952c:	b580      	push	{r7, lr}
 803952e:	b0b8      	sub	sp, #224	; 0xe0
 8039530:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t  printResult = GOS_SUCCESS;
 8039532:	2355      	movs	r3, #85	; 0x55
 8039534:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	svl_hwiInfo_t hwInfo      = {0};
 8039538:	1d3b      	adds	r3, r7, #4
 803953a:	22d2      	movs	r2, #210	; 0xd2
 803953c:	2100      	movs	r1, #0
 803953e:	4618      	mov	r0, r3
 8039540:	f009 fb62 	bl	8042c08 <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_hwiRead(&hwInfo);
 8039544:	1d3b      	adds	r3, r7, #4
 8039546:	4618      	mov	r0, r3
 8039548:	f000 fa26 	bl	8039998 <svl_hwiRead>
 803954c:	4603      	mov	r3, r0
 803954e:	461a      	mov	r2, r3
 8039550:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8039554:	4013      	ands	r3, r2
 8039556:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Hardware Info"TRACE_FORMAT_RESET"\r\n");
 803955a:	4939      	ldr	r1, [pc, #228]	; (8039640 <svl_dsmPrintHwInfo+0x114>)
 803955c:	2049      	movs	r0, #73	; 0x49
 803955e:	f007 fb37 	bl	8040bd0 <gos_traceTraceFormatted>
 8039562:	4603      	mov	r3, r0
 8039564:	461a      	mov	r2, r3
 8039566:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 803956a:	4013      	ands	r3, r2
 803956c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Board name:    %s\r\n", hwInfo.boardName);
 8039570:	1d3b      	adds	r3, r7, #4
 8039572:	461a      	mov	r2, r3
 8039574:	4933      	ldr	r1, [pc, #204]	; (8039644 <svl_dsmPrintHwInfo+0x118>)
 8039576:	2049      	movs	r0, #73	; 0x49
 8039578:	f007 fb2a 	bl	8040bd0 <gos_traceTraceFormatted>
 803957c:	4603      	mov	r3, r0
 803957e:	461a      	mov	r2, r3
 8039580:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8039584:	4013      	ands	r3, r2
 8039586:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:        %s\r\n", hwInfo.author);
 803958a:	1d3b      	adds	r3, r7, #4
 803958c:	3328      	adds	r3, #40	; 0x28
 803958e:	461a      	mov	r2, r3
 8039590:	492d      	ldr	r1, [pc, #180]	; (8039648 <svl_dsmPrintHwInfo+0x11c>)
 8039592:	2049      	movs	r0, #73	; 0x49
 8039594:	f007 fb1c 	bl	8040bd0 <gos_traceTraceFormatted>
 8039598:	4603      	mov	r3, r0
 803959a:	461a      	mov	r2, r3
 803959c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80395a0:	4013      	ands	r3, r2
 80395a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description:   %s\r\n", hwInfo.description);
 80395a6:	1d3b      	adds	r3, r7, #4
 80395a8:	3348      	adds	r3, #72	; 0x48
 80395aa:	461a      	mov	r2, r3
 80395ac:	4927      	ldr	r1, [pc, #156]	; (803964c <svl_dsmPrintHwInfo+0x120>)
 80395ae:	2049      	movs	r0, #73	; 0x49
 80395b0:	f007 fb0e 	bl	8040bd0 <gos_traceTraceFormatted>
 80395b4:	4603      	mov	r3, r0
 80395b6:	461a      	mov	r2, r3
 80395b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80395bc:	4013      	ands	r3, r2
 80395be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Revision:      %s\r\n", hwInfo.revision);
 80395c2:	1d3b      	adds	r3, r7, #4
 80395c4:	3320      	adds	r3, #32
 80395c6:	461a      	mov	r2, r3
 80395c8:	4921      	ldr	r1, [pc, #132]	; (8039650 <svl_dsmPrintHwInfo+0x124>)
 80395ca:	2049      	movs	r0, #73	; 0x49
 80395cc:	f007 fb00 	bl	8040bd0 <gos_traceTraceFormatted>
 80395d0:	4603      	mov	r3, r0
 80395d2:	461a      	mov	r2, r3
 80395d4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80395d8:	4013      	ands	r3, r2
 80395da:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Serial number: %s\r\n", hwInfo.serialNumber);
 80395de:	1d3b      	adds	r3, r7, #4
 80395e0:	3392      	adds	r3, #146	; 0x92
 80395e2:	461a      	mov	r2, r3
 80395e4:	491b      	ldr	r1, [pc, #108]	; (8039654 <svl_dsmPrintHwInfo+0x128>)
 80395e6:	2049      	movs	r0, #73	; 0x49
 80395e8:	f007 faf2 	bl	8040bd0 <gos_traceTraceFormatted>
 80395ec:	4603      	mov	r3, r0
 80395ee:	461a      	mov	r2, r3
 80395f0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80395f4:	4013      	ands	r3, r2
 80395f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
			hwInfo.date.years,
 80395fa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
 80395fe:	461a      	mov	r2, r3
			hwInfo.date.months,
 8039600:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
 8039604:	4619      	mov	r1, r3
			hwInfo.date.days
 8039606:	f8b7 3091 	ldrh.w	r3, [r7, #145]	; 0x91
 803960a:	b29b      	uxth	r3, r3
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
 803960c:	9300      	str	r3, [sp, #0]
 803960e:	460b      	mov	r3, r1
 8039610:	4911      	ldr	r1, [pc, #68]	; (8039658 <svl_dsmPrintHwInfo+0x12c>)
 8039612:	2049      	movs	r0, #73	; 0x49
 8039614:	f007 fadc 	bl	8040bd0 <gos_traceTraceFormatted>
 8039618:	4603      	mov	r3, r0
 803961a:	461a      	mov	r2, r3
 803961c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8039620:	4013      	ands	r3, r2
 8039622:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			);

	if (printResult != GOS_SUCCESS)
 8039626:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 803962a:	2b55      	cmp	r3, #85	; 0x55
 803962c:	d002      	beq.n	8039634 <svl_dsmPrintHwInfo+0x108>
	{
		printResult = GOS_ERROR;
 803962e:	23ae      	movs	r3, #174	; 0xae
 8039630:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	else
	{
		// Success.
	}

	return printResult;
 8039634:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8039638:	4618      	mov	r0, r3
 803963a:	37d8      	adds	r7, #216	; 0xd8
 803963c:	46bd      	mov	sp, r7
 803963e:	bd80      	pop	{r7, pc}
 8039640:	08047730 	.word	0x08047730
 8039644:	0804774c 	.word	0x0804774c
 8039648:	08047760 	.word	0x08047760
 803964c:	08047774 	.word	0x08047774
 8039650:	08047788 	.word	0x08047788
 8039654:	0804779c 	.word	0x0804779c
 8039658:	080477b0 	.word	0x080477b0

0803965c <svl_dsmWaitForState>:

/*
 * Function: svl_dsmWaitForState
 */
GOS_INLINE void_t svl_dsmWaitForState (svl_dsmState_t requiredState)
{
 803965c:	b580      	push	{r7, lr}
 803965e:	b082      	sub	sp, #8
 8039660:	af00      	add	r7, sp, #0
 8039662:	4603      	mov	r3, r0
 8039664:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	while (deviceState != requiredState)
 8039666:	e002      	b.n	803966e <svl_dsmWaitForState+0x12>
	{
		gos_taskSleep(20);
 8039668:	2014      	movs	r0, #20
 803966a:	f002 f9f1 	bl	803ba50 <gos_taskSleep>
	while (deviceState != requiredState)
 803966e:	4b05      	ldr	r3, [pc, #20]	; (8039684 <svl_dsmWaitForState+0x28>)
 8039670:	781b      	ldrb	r3, [r3, #0]
 8039672:	79fa      	ldrb	r2, [r7, #7]
 8039674:	429a      	cmp	r2, r3
 8039676:	d1f7      	bne.n	8039668 <svl_dsmWaitForState+0xc>
	}
}
 8039678:	bf00      	nop
 803967a:	bf00      	nop
 803967c:	3708      	adds	r7, #8
 803967e:	46bd      	mov	sp, r7
 8039680:	bd80      	pop	{r7, pc}
 8039682:	bf00      	nop
 8039684:	20006f58 	.word	0x20006f58

08039688 <svl_dsmSetState>:

/*
 * Function: svl_dsmSetState
 */
GOS_INLINE void_t svl_dsmSetState (svl_dsmState_t requiredState)
{
 8039688:	b480      	push	{r7}
 803968a:	b083      	sub	sp, #12
 803968c:	af00      	add	r7, sp, #0
 803968e:	4603      	mov	r3, r0
 8039690:	71fb      	strb	r3, [r7, #7]
	/*
	 * Function code.
	 */
	devicePrevState = deviceState;
 8039692:	4b06      	ldr	r3, [pc, #24]	; (80396ac <svl_dsmSetState+0x24>)
 8039694:	781a      	ldrb	r2, [r3, #0]
 8039696:	4b06      	ldr	r3, [pc, #24]	; (80396b0 <svl_dsmSetState+0x28>)
 8039698:	701a      	strb	r2, [r3, #0]
	deviceState = requiredState;
 803969a:	4a04      	ldr	r2, [pc, #16]	; (80396ac <svl_dsmSetState+0x24>)
 803969c:	79fb      	ldrb	r3, [r7, #7]
 803969e:	7013      	strb	r3, [r2, #0]
}
 80396a0:	bf00      	nop
 80396a2:	370c      	adds	r7, #12
 80396a4:	46bd      	mov	sp, r7
 80396a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80396aa:	4770      	bx	lr
 80396ac:	20006f58 	.word	0x20006f58
 80396b0:	20006f59 	.word	0x20006f59

080396b4 <svl_dsmTask>:
 * TODO
 * @param
 * @return
 */
GOS_STATIC void_t svl_dsmTask (void_t)
{
 80396b4:	b580      	push	{r7, lr}
 80396b6:	b082      	sub	sp, #8
 80396b8:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t reactionIdx = 0u;
 80396ba:	2300      	movs	r3, #0
 80396bc:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Print out OS info.
	(void_t) svl_dsmPrintOSInfo();
 80396be:	f7ff fe81 	bl	80393c4 <svl_dsmPrintOSInfo>

	// Print out library info.
	(void_t) svl_dsmPrintLibInfo();
 80396c2:	f7ff fea7 	bl	8039414 <svl_dsmPrintLibInfo>

	// Print out Hardware Info.
	(void_t) svl_dsmPrintHwInfo();
 80396c6:	f7ff ff31 	bl	803952c <svl_dsmPrintHwInfo>

	// Change priority.
	(void_t) gos_taskSetPriority(svlDsmDaemonDesc.taskId, SVL_DSM_DAEMON_PRIO);
 80396ca:	4b26      	ldr	r3, [pc, #152]	; (8039764 <svl_dsmTask+0xb0>)
 80396cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80396ce:	21c8      	movs	r1, #200	; 0xc8
 80396d0:	4618      	mov	r0, r3
 80396d2:	f002 fff9 	bl	803c6c8 <gos_taskSetPriority>
 80396d6:	2301      	movs	r3, #1
 80396d8:	71bb      	strb	r3, [r7, #6]
	devicePrevState = deviceState;
 80396da:	4b23      	ldr	r3, [pc, #140]	; (8039768 <svl_dsmTask+0xb4>)
 80396dc:	781a      	ldrb	r2, [r3, #0]
 80396de:	4b23      	ldr	r3, [pc, #140]	; (803976c <svl_dsmTask+0xb8>)
 80396e0:	701a      	strb	r2, [r3, #0]
	deviceState = requiredState;
 80396e2:	4a21      	ldr	r2, [pc, #132]	; (8039768 <svl_dsmTask+0xb4>)
 80396e4:	79bb      	ldrb	r3, [r7, #6]
 80396e6:	7013      	strb	r3, [r2, #0]
}
 80396e8:	bf00      	nop
	svl_dsmSetState(DSM_STATE_STARTUP_READY);

	for (;;)
	{
		// Check for state change.
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 80396ea:	4b20      	ldr	r3, [pc, #128]	; (803976c <svl_dsmTask+0xb8>)
 80396ec:	781a      	ldrb	r2, [r3, #0]
 80396ee:	4b1e      	ldr	r3, [pc, #120]	; (8039768 <svl_dsmTask+0xb4>)
 80396f0:	781b      	ldrb	r3, [r3, #0]
 80396f2:	429a      	cmp	r2, r3
 80396f4:	d031      	beq.n	803975a <svl_dsmTask+0xa6>
 80396f6:	4b1e      	ldr	r3, [pc, #120]	; (8039770 <svl_dsmTask+0xbc>)
 80396f8:	681b      	ldr	r3, [r3, #0]
 80396fa:	2b00      	cmp	r3, #0
 80396fc:	d02d      	beq.n	803975a <svl_dsmTask+0xa6>
		{
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 80396fe:	2300      	movs	r3, #0
 8039700:	71fb      	strb	r3, [r7, #7]
 8039702:	e020      	b.n	8039746 <svl_dsmTask+0x92>
			{
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 8039704:	79fb      	ldrb	r3, [r7, #7]
 8039706:	4a1b      	ldr	r2, [pc, #108]	; (8039774 <svl_dsmTask+0xc0>)
 8039708:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 803970c:	4b17      	ldr	r3, [pc, #92]	; (803976c <svl_dsmTask+0xb8>)
 803970e:	781b      	ldrb	r3, [r3, #0]
 8039710:	429a      	cmp	r2, r3
 8039712:	d115      	bne.n	8039740 <svl_dsmTask+0x8c>
					reactionConfig[reactionIdx].currState == deviceState &&
 8039714:	79fb      	ldrb	r3, [r7, #7]
 8039716:	4a17      	ldr	r2, [pc, #92]	; (8039774 <svl_dsmTask+0xc0>)
 8039718:	00db      	lsls	r3, r3, #3
 803971a:	4413      	add	r3, r2
 803971c:	785a      	ldrb	r2, [r3, #1]
 803971e:	4b12      	ldr	r3, [pc, #72]	; (8039768 <svl_dsmTask+0xb4>)
 8039720:	781b      	ldrb	r3, [r3, #0]
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 8039722:	429a      	cmp	r2, r3
 8039724:	d10c      	bne.n	8039740 <svl_dsmTask+0x8c>
					reactionConfig[reactionIdx].pReaction != NULL)
 8039726:	79fb      	ldrb	r3, [r7, #7]
 8039728:	4a12      	ldr	r2, [pc, #72]	; (8039774 <svl_dsmTask+0xc0>)
 803972a:	00db      	lsls	r3, r3, #3
 803972c:	4413      	add	r3, r2
 803972e:	685b      	ldr	r3, [r3, #4]
					reactionConfig[reactionIdx].currState == deviceState &&
 8039730:	2b00      	cmp	r3, #0
 8039732:	d005      	beq.n	8039740 <svl_dsmTask+0x8c>
				{
					// Execute reaction.
					reactionConfig[reactionIdx].pReaction();
 8039734:	79fb      	ldrb	r3, [r7, #7]
 8039736:	4a0f      	ldr	r2, [pc, #60]	; (8039774 <svl_dsmTask+0xc0>)
 8039738:	00db      	lsls	r3, r3, #3
 803973a:	4413      	add	r3, r2
 803973c:	685b      	ldr	r3, [r3, #4]
 803973e:	4798      	blx	r3
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 8039740:	79fb      	ldrb	r3, [r7, #7]
 8039742:	3301      	adds	r3, #1
 8039744:	71fb      	strb	r3, [r7, #7]
 8039746:	79fa      	ldrb	r2, [r7, #7]
 8039748:	4b09      	ldr	r3, [pc, #36]	; (8039770 <svl_dsmTask+0xbc>)
 803974a:	681b      	ldr	r3, [r3, #0]
 803974c:	08db      	lsrs	r3, r3, #3
 803974e:	429a      	cmp	r2, r3
 8039750:	d3d8      	bcc.n	8039704 <svl_dsmTask+0x50>
					// No match.
				}
			}

			// Resolve device state change.
			devicePrevState = deviceState;
 8039752:	4b05      	ldr	r3, [pc, #20]	; (8039768 <svl_dsmTask+0xb4>)
 8039754:	781a      	ldrb	r2, [r3, #0]
 8039756:	4b05      	ldr	r3, [pc, #20]	; (803976c <svl_dsmTask+0xb8>)
 8039758:	701a      	strb	r2, [r3, #0]
		else
		{
			// State change not detected.
		}

		(void_t) gos_taskSleep(SVL_DSM_DAEMON_POLL_MS);
 803975a:	2014      	movs	r0, #20
 803975c:	f002 f978 	bl	803ba50 <gos_taskSleep>
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 8039760:	e7c3      	b.n	80396ea <svl_dsmTask+0x36>
 8039762:	bf00      	nop
 8039764:	20001bcc 	.word	0x20001bcc
 8039768:	20006f58 	.word	0x20006f58
 803976c:	20006f59 	.word	0x20006f59
 8039770:	20001868 	.word	0x20001868
 8039774:	08048fa0 	.word	0x08048fa0

08039778 <svl_frsInit>:

/*
 * Function: svl_frsInit
 */
gos_result_t svl_frsInit (svl_frsInitStruct_t* pInitStruct)
{
 8039778:	b580      	push	{r7, lr}
 803977a:	b084      	sub	sp, #16
 803977c:	af00      	add	r7, sp, #0
 803977e:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t frsInitResult = GOS_ERROR;
 8039780:	23ae      	movs	r3, #174	; 0xae
 8039782:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pInitStruct != NULL && pInitStruct->readFunction != NULL && pInitStruct->writeFunction != NULL)
 8039784:	687b      	ldr	r3, [r7, #4]
 8039786:	2b00      	cmp	r3, #0
 8039788:	d014      	beq.n	80397b4 <svl_frsInit+0x3c>
 803978a:	687b      	ldr	r3, [r7, #4]
 803978c:	681b      	ldr	r3, [r3, #0]
 803978e:	2b00      	cmp	r3, #0
 8039790:	d010      	beq.n	80397b4 <svl_frsInit+0x3c>
 8039792:	687b      	ldr	r3, [r7, #4]
 8039794:	685b      	ldr	r3, [r3, #4]
 8039796:	2b00      	cmp	r3, #0
 8039798:	d00c      	beq.n	80397b4 <svl_frsInit+0x3c>
	{
		frsReadFunction  = pInitStruct->readFunction;
 803979a:	687b      	ldr	r3, [r7, #4]
 803979c:	681b      	ldr	r3, [r3, #0]
 803979e:	4a08      	ldr	r2, [pc, #32]	; (80397c0 <svl_frsInit+0x48>)
 80397a0:	6013      	str	r3, [r2, #0]
		frsWriteFunction = pInitStruct->writeFunction;
 80397a2:	687b      	ldr	r3, [r7, #4]
 80397a4:	685b      	ldr	r3, [r3, #4]
 80397a6:	4a07      	ldr	r2, [pc, #28]	; (80397c4 <svl_frsInit+0x4c>)
 80397a8:	6013      	str	r3, [r2, #0]
		frsInitResult    = gos_mutexInit(&frsMutex);
 80397aa:	4807      	ldr	r0, [pc, #28]	; (80397c8 <svl_frsInit+0x50>)
 80397ac:	f004 fdaa 	bl	803e304 <gos_mutexInit>
 80397b0:	4603      	mov	r3, r0
 80397b2:	73fb      	strb	r3, [r7, #15]
	else
	{
		// NULL parameter.
	}

	return frsInitResult;
 80397b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80397b6:	4618      	mov	r0, r3
 80397b8:	3710      	adds	r7, #16
 80397ba:	46bd      	mov	sp, r7
 80397bc:	bd80      	pop	{r7, pc}
 80397be:	bf00      	nop
 80397c0:	20006f5c 	.word	0x20006f5c
 80397c4:	20006f60 	.word	0x20006f60
 80397c8:	20006f64 	.word	0x20006f64

080397cc <svl_frsCreate>:

/*
 * Function: svl_frsCreate
 */
gos_result_t svl_frsCreate (svl_frsFault_t* pFault)
{
 80397cc:	b580      	push	{r7, lr}
 80397ce:	b086      	sub	sp, #24
 80397d0:	af00      	add	r7, sp, #0
 80397d2:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t frsCreateResult = GOS_ERROR;
 80397d4:	23ae      	movs	r3, #174	; 0xae
 80397d6:	75fb      	strb	r3, [r7, #23]
	u32_t        numOfEntries    = 0u;
 80397d8:	2300      	movs	r3, #0
 80397da:	60fb      	str	r3, [r7, #12]
	u32_t        address         = 0u;
 80397dc:	2300      	movs	r3, #0
 80397de:	613b      	str	r3, [r7, #16]

	/*
	 * Function code.
	 */
	if (pFault != NULL)
 80397e0:	687b      	ldr	r3, [r7, #4]
 80397e2:	2b00      	cmp	r3, #0
 80397e4:	d031      	beq.n	803984a <svl_frsCreate+0x7e>
	{
		// Get the number of faults.
		if (svl_frsGetNumOfEntries(&numOfEntries)          == GOS_SUCCESS &&
 80397e6:	f107 030c 	add.w	r3, r7, #12
 80397ea:	4618      	mov	r0, r3
 80397ec:	f000 f836 	bl	803985c <svl_frsGetNumOfEntries>
 80397f0:	4603      	mov	r3, r0
 80397f2:	2b55      	cmp	r3, #85	; 0x55
 80397f4:	d126      	bne.n	8039844 <svl_frsCreate+0x78>
			gos_mutexLock(&frsMutex, SVL_FRS_MUTEX_TMO_MS) == GOS_SUCCESS)
 80397f6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80397fa:	4816      	ldr	r0, [pc, #88]	; (8039854 <svl_frsCreate+0x88>)
 80397fc:	f004 fd9c 	bl	803e338 <gos_mutexLock>
 8039800:	4603      	mov	r3, r0
		if (svl_frsGetNumOfEntries(&numOfEntries)          == GOS_SUCCESS &&
 8039802:	2b55      	cmp	r3, #85	; 0x55
 8039804:	d11e      	bne.n	8039844 <svl_frsCreate+0x78>
		{
			// Calculate next fault address.s
			address = SVL_FRS_ENTRY_START_ADDR + numOfEntries * SVL_FRS_ENTRY_SIZE;
 8039806:	68fb      	ldr	r3, [r7, #12]
 8039808:	2254      	movs	r2, #84	; 0x54
 803980a:	fb02 f303 	mul.w	r3, r2, r3
 803980e:	3304      	adds	r3, #4
 8039810:	613b      	str	r3, [r7, #16]

			// Write new fault.
			if (frsWriteFunction != NULL &&
 8039812:	4b11      	ldr	r3, [pc, #68]	; (8039858 <svl_frsCreate+0x8c>)
 8039814:	681b      	ldr	r3, [r3, #0]
 8039816:	2b00      	cmp	r3, #0
 8039818:	d014      	beq.n	8039844 <svl_frsCreate+0x78>
				frsWriteFunction(address, (u8_t*)pFault, SVL_FRS_ENTRY_SIZE) == GOS_SUCCESS)
 803981a:	4b0f      	ldr	r3, [pc, #60]	; (8039858 <svl_frsCreate+0x8c>)
 803981c:	681b      	ldr	r3, [r3, #0]
 803981e:	2254      	movs	r2, #84	; 0x54
 8039820:	6879      	ldr	r1, [r7, #4]
 8039822:	6938      	ldr	r0, [r7, #16]
 8039824:	4798      	blx	r3
 8039826:	4603      	mov	r3, r0
			if (frsWriteFunction != NULL &&
 8039828:	2b55      	cmp	r3, #85	; 0x55
 803982a:	d10b      	bne.n	8039844 <svl_frsCreate+0x78>
			{
				// Update number of entries.
				numOfEntries++;
 803982c:	68fb      	ldr	r3, [r7, #12]
 803982e:	3301      	adds	r3, #1
 8039830:	60fb      	str	r3, [r7, #12]

				frsCreateResult = frsWriteFunction(SVL_FRS_ENTRY_NUM_ADDR, (u8_t*)&numOfEntries, sizeof(numOfEntries));
 8039832:	4b09      	ldr	r3, [pc, #36]	; (8039858 <svl_frsCreate+0x8c>)
 8039834:	681b      	ldr	r3, [r3, #0]
 8039836:	f107 010c 	add.w	r1, r7, #12
 803983a:	2204      	movs	r2, #4
 803983c:	2000      	movs	r0, #0
 803983e:	4798      	blx	r3
 8039840:	4603      	mov	r3, r0
 8039842:	75fb      	strb	r3, [r7, #23]
		else
		{
			// Mutex error or getting number of entries failed.
		}

		(void_t) gos_mutexUnlock(&frsMutex);
 8039844:	4803      	ldr	r0, [pc, #12]	; (8039854 <svl_frsCreate+0x88>)
 8039846:	f004 fe7d 	bl	803e544 <gos_mutexUnlock>
	else
	{
		// NULL parameter.
	}

	return frsCreateResult;
 803984a:	7dfb      	ldrb	r3, [r7, #23]
}
 803984c:	4618      	mov	r0, r3
 803984e:	3718      	adds	r7, #24
 8039850:	46bd      	mov	sp, r7
 8039852:	bd80      	pop	{r7, pc}
 8039854:	20006f64 	.word	0x20006f64
 8039858:	20006f60 	.word	0x20006f60

0803985c <svl_frsGetNumOfEntries>:

/*
 * Function: svl_frsGetNumOfEntries
 */
gos_result_t svl_frsGetNumOfEntries (u32_t* pNumOfEntries)
{
 803985c:	b580      	push	{r7, lr}
 803985e:	b084      	sub	sp, #16
 8039860:	af00      	add	r7, sp, #0
 8039862:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t frsGetNumOfEntriesResult = GOS_ERROR;
 8039864:	23ae      	movs	r3, #174	; 0xae
 8039866:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (frsReadFunction != NULL &&
 8039868:	4b0d      	ldr	r3, [pc, #52]	; (80398a0 <svl_frsGetNumOfEntries+0x44>)
 803986a:	681b      	ldr	r3, [r3, #0]
 803986c:	2b00      	cmp	r3, #0
 803986e:	d00f      	beq.n	8039890 <svl_frsGetNumOfEntries+0x34>
		gos_mutexLock(&frsMutex, SVL_FRS_MUTEX_TMO_MS) == GOS_SUCCESS)
 8039870:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8039874:	480b      	ldr	r0, [pc, #44]	; (80398a4 <svl_frsGetNumOfEntries+0x48>)
 8039876:	f004 fd5f 	bl	803e338 <gos_mutexLock>
 803987a:	4603      	mov	r3, r0
	if (frsReadFunction != NULL &&
 803987c:	2b55      	cmp	r3, #85	; 0x55
 803987e:	d107      	bne.n	8039890 <svl_frsGetNumOfEntries+0x34>
	{
		frsGetNumOfEntriesResult = frsReadFunction(SVL_FRS_ENTRY_NUM_ADDR, (u8_t*)pNumOfEntries, sizeof(*pNumOfEntries));
 8039880:	4b07      	ldr	r3, [pc, #28]	; (80398a0 <svl_frsGetNumOfEntries+0x44>)
 8039882:	681b      	ldr	r3, [r3, #0]
 8039884:	2204      	movs	r2, #4
 8039886:	6879      	ldr	r1, [r7, #4]
 8039888:	2000      	movs	r0, #0
 803988a:	4798      	blx	r3
 803988c:	4603      	mov	r3, r0
 803988e:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Read function is NULL.
	}

	(void_t) gos_mutexUnlock(&frsMutex);
 8039890:	4804      	ldr	r0, [pc, #16]	; (80398a4 <svl_frsGetNumOfEntries+0x48>)
 8039892:	f004 fe57 	bl	803e544 <gos_mutexUnlock>

	return frsGetNumOfEntriesResult;
 8039896:	7bfb      	ldrb	r3, [r7, #15]
}
 8039898:	4618      	mov	r0, r3
 803989a:	3710      	adds	r7, #16
 803989c:	46bd      	mov	sp, r7
 803989e:	bd80      	pop	{r7, pc}
 80398a0:	20006f5c 	.word	0x20006f5c
 80398a4:	20006f64 	.word	0x20006f64

080398a8 <svl_frsGetAllFaults>:

/*
 * Function: svl_frsGetAllFaults
 */
gos_result_t svl_frsGetAllFaults (svl_frsFault_t* pFaultArray, u16_t arraySize)
{
 80398a8:	b580      	push	{r7, lr}
 80398aa:	b086      	sub	sp, #24
 80398ac:	af00      	add	r7, sp, #0
 80398ae:	6078      	str	r0, [r7, #4]
 80398b0:	460b      	mov	r3, r1
 80398b2:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	gos_result_t getFaultResult = GOS_ERROR;
 80398b4:	23ae      	movs	r3, #174	; 0xae
 80398b6:	75fb      	strb	r3, [r7, #23]
	u32_t        numOfEntries   = 0u;
 80398b8:	2300      	movs	r3, #0
 80398ba:	60fb      	str	r3, [r7, #12]
	u32_t        entryIndex     = 0u;
 80398bc:	2300      	movs	r3, #0
 80398be:	613b      	str	r3, [r7, #16]

	/*
	 * Function code.
	 */
	if (pFaultArray != NULL &&
 80398c0:	687b      	ldr	r3, [r7, #4]
 80398c2:	2b00      	cmp	r3, #0
 80398c4:	d036      	beq.n	8039934 <svl_frsGetAllFaults+0x8c>
		svl_frsGetNumOfEntries(&numOfEntries) == GOS_SUCCESS &&
 80398c6:	f107 030c 	add.w	r3, r7, #12
 80398ca:	4618      	mov	r0, r3
 80398cc:	f7ff ffc6 	bl	803985c <svl_frsGetNumOfEntries>
 80398d0:	4603      	mov	r3, r0
	if (pFaultArray != NULL &&
 80398d2:	2b55      	cmp	r3, #85	; 0x55
 80398d4:	d12e      	bne.n	8039934 <svl_frsGetAllFaults+0x8c>
		gos_mutexLock(&frsMutex, SVL_FRS_MUTEX_TMO_MS) == GOS_SUCCESS &&
 80398d6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80398da:	481a      	ldr	r0, [pc, #104]	; (8039944 <svl_frsGetAllFaults+0x9c>)
 80398dc:	f004 fd2c 	bl	803e338 <gos_mutexLock>
 80398e0:	4603      	mov	r3, r0
		svl_frsGetNumOfEntries(&numOfEntries) == GOS_SUCCESS &&
 80398e2:	2b55      	cmp	r3, #85	; 0x55
 80398e4:	d126      	bne.n	8039934 <svl_frsGetAllFaults+0x8c>
		arraySize >= (numOfEntries * SVL_FRS_ENTRY_SIZE))
 80398e6:	887a      	ldrh	r2, [r7, #2]
 80398e8:	68fb      	ldr	r3, [r7, #12]
 80398ea:	2154      	movs	r1, #84	; 0x54
 80398ec:	fb01 f303 	mul.w	r3, r1, r3
		gos_mutexLock(&frsMutex, SVL_FRS_MUTEX_TMO_MS) == GOS_SUCCESS &&
 80398f0:	429a      	cmp	r2, r3
 80398f2:	d31f      	bcc.n	8039934 <svl_frsGetAllFaults+0x8c>
	{
		for (entryIndex = 0u; entryIndex < numOfEntries; entryIndex++)
 80398f4:	2300      	movs	r3, #0
 80398f6:	613b      	str	r3, [r7, #16]
 80398f8:	e016      	b.n	8039928 <svl_frsGetAllFaults+0x80>
		{
			getFaultResult = frsReadFunction(
 80398fa:	4b13      	ldr	r3, [pc, #76]	; (8039948 <svl_frsGetAllFaults+0xa0>)
 80398fc:	681b      	ldr	r3, [r3, #0]
					SVL_FRS_ENTRY_START_ADDR + entryIndex * SVL_FRS_ENTRY_SIZE,
 80398fe:	693a      	ldr	r2, [r7, #16]
 8039900:	2154      	movs	r1, #84	; 0x54
 8039902:	fb01 f202 	mul.w	r2, r1, r2
			getFaultResult = frsReadFunction(
 8039906:	1d10      	adds	r0, r2, #4
					(u8_t*)&pFaultArray[entryIndex],
 8039908:	693a      	ldr	r2, [r7, #16]
 803990a:	2154      	movs	r1, #84	; 0x54
 803990c:	fb01 f202 	mul.w	r2, r1, r2
 8039910:	6879      	ldr	r1, [r7, #4]
 8039912:	4411      	add	r1, r2
			getFaultResult = frsReadFunction(
 8039914:	2254      	movs	r2, #84	; 0x54
 8039916:	4798      	blx	r3
 8039918:	4603      	mov	r3, r0
 803991a:	75fb      	strb	r3, [r7, #23]
					SVL_FRS_ENTRY_SIZE
					);

			if (getFaultResult == GOS_ERROR)
 803991c:	7dfb      	ldrb	r3, [r7, #23]
 803991e:	2bae      	cmp	r3, #174	; 0xae
 8039920:	d007      	beq.n	8039932 <svl_frsGetAllFaults+0x8a>
		for (entryIndex = 0u; entryIndex < numOfEntries; entryIndex++)
 8039922:	693b      	ldr	r3, [r7, #16]
 8039924:	3301      	adds	r3, #1
 8039926:	613b      	str	r3, [r7, #16]
 8039928:	68fb      	ldr	r3, [r7, #12]
 803992a:	693a      	ldr	r2, [r7, #16]
 803992c:	429a      	cmp	r2, r3
 803992e:	d3e4      	bcc.n	80398fa <svl_frsGetAllFaults+0x52>
 8039930:	e000      	b.n	8039934 <svl_frsGetAllFaults+0x8c>
			{
				// There was an error. Break from loop.
				break;
 8039932:	bf00      	nop
	{
		// NULL parameter or number of entries getting error or mutex lock error or
		// array size error.
	}

	(void_t) gos_mutexUnlock(&frsMutex);
 8039934:	4803      	ldr	r0, [pc, #12]	; (8039944 <svl_frsGetAllFaults+0x9c>)
 8039936:	f004 fe05 	bl	803e544 <gos_mutexUnlock>

	return getFaultResult;
 803993a:	7dfb      	ldrb	r3, [r7, #23]
}
 803993c:	4618      	mov	r0, r3
 803993e:	3718      	adds	r7, #24
 8039940:	46bd      	mov	sp, r7
 8039942:	bd80      	pop	{r7, pc}
 8039944:	20006f64 	.word	0x20006f64
 8039948:	20006f5c 	.word	0x20006f5c

0803994c <svl_hwiInit>:

/*
 * Function: svl_hwiInit
 */
gos_result_t svl_hwiInit (svl_hwiInitStruct_t* pInitStruct)
{
 803994c:	b480      	push	{r7}
 803994e:	b085      	sub	sp, #20
 8039950:	af00      	add	r7, sp, #0
 8039952:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t hwiInitResult = GOS_ERROR;
 8039954:	23ae      	movs	r3, #174	; 0xae
 8039956:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pInitStruct != NULL && pInitStruct->readFunction != NULL && pInitStruct->writeFunction != NULL)
 8039958:	687b      	ldr	r3, [r7, #4]
 803995a:	2b00      	cmp	r3, #0
 803995c:	d011      	beq.n	8039982 <svl_hwiInit+0x36>
 803995e:	687b      	ldr	r3, [r7, #4]
 8039960:	681b      	ldr	r3, [r3, #0]
 8039962:	2b00      	cmp	r3, #0
 8039964:	d00d      	beq.n	8039982 <svl_hwiInit+0x36>
 8039966:	687b      	ldr	r3, [r7, #4]
 8039968:	685b      	ldr	r3, [r3, #4]
 803996a:	2b00      	cmp	r3, #0
 803996c:	d009      	beq.n	8039982 <svl_hwiInit+0x36>
	{
		hwiReadFunction  = pInitStruct->readFunction;
 803996e:	687b      	ldr	r3, [r7, #4]
 8039970:	681b      	ldr	r3, [r3, #0]
 8039972:	4a07      	ldr	r2, [pc, #28]	; (8039990 <svl_hwiInit+0x44>)
 8039974:	6013      	str	r3, [r2, #0]
		hwiWriteFunction = pInitStruct->writeFunction;
 8039976:	687b      	ldr	r3, [r7, #4]
 8039978:	685b      	ldr	r3, [r3, #4]
 803997a:	4a06      	ldr	r2, [pc, #24]	; (8039994 <svl_hwiInit+0x48>)
 803997c:	6013      	str	r3, [r2, #0]
		hwiInitResult    = GOS_SUCCESS;
 803997e:	2355      	movs	r3, #85	; 0x55
 8039980:	73fb      	strb	r3, [r7, #15]
	else
	{
		// NULL parameter.
	}

	return hwiInitResult;
 8039982:	7bfb      	ldrb	r3, [r7, #15]
}
 8039984:	4618      	mov	r0, r3
 8039986:	3714      	adds	r7, #20
 8039988:	46bd      	mov	sp, r7
 803998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803998e:	4770      	bx	lr
 8039990:	20006f68 	.word	0x20006f68
 8039994:	20006f6c 	.word	0x20006f6c

08039998 <svl_hwiRead>:

/*
 * Function: svl_hwiRead
 */
gos_result_t svl_hwiRead (svl_hwiInfo_t* pHwInfo)
{
 8039998:	b580      	push	{r7, lr}
 803999a:	b084      	sub	sp, #16
 803999c:	af00      	add	r7, sp, #0
 803999e:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t hwiReadResult = GOS_ERROR;
 80399a0:	23ae      	movs	r3, #174	; 0xae
 80399a2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pHwInfo != NULL && hwiReadFunction != NULL)
 80399a4:	687b      	ldr	r3, [r7, #4]
 80399a6:	2b00      	cmp	r3, #0
 80399a8:	d00b      	beq.n	80399c2 <svl_hwiRead+0x2a>
 80399aa:	4b08      	ldr	r3, [pc, #32]	; (80399cc <svl_hwiRead+0x34>)
 80399ac:	681b      	ldr	r3, [r3, #0]
 80399ae:	2b00      	cmp	r3, #0
 80399b0:	d007      	beq.n	80399c2 <svl_hwiRead+0x2a>
	{
		hwiReadResult = hwiReadFunction(
 80399b2:	4b06      	ldr	r3, [pc, #24]	; (80399cc <svl_hwiRead+0x34>)
 80399b4:	681b      	ldr	r3, [r3, #0]
 80399b6:	22d2      	movs	r2, #210	; 0xd2
 80399b8:	6879      	ldr	r1, [r7, #4]
 80399ba:	2004      	movs	r0, #4
 80399bc:	4798      	blx	r3
 80399be:	4603      	mov	r3, r0
 80399c0:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Struct or read function is NULL.
	}

	return hwiReadResult;
 80399c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80399c4:	4618      	mov	r0, r3
 80399c6:	3710      	adds	r7, #16
 80399c8:	46bd      	mov	sp, r7
 80399ca:	bd80      	pop	{r7, pc}
 80399cc:	20006f68 	.word	0x20006f68

080399d0 <svl_ipcInit>:

/*
 * Function: svl_ipcInit
 */
gos_result_t svl_ipcInit (void_t)
{
 80399d0:	b580      	push	{r7, lr}
 80399d2:	b082      	sub	sp, #8
 80399d4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 80399d6:	23ae      	movs	r3, #174	; 0xae
 80399d8:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    initResult = gos_taskRegister(&svlIpcTaskDesc, NULL);
 80399da:	2100      	movs	r1, #0
 80399dc:	4804      	ldr	r0, [pc, #16]	; (80399f0 <svl_ipcInit+0x20>)
 80399de:	f001 fea5 	bl	803b72c <gos_taskRegister>
 80399e2:	4603      	mov	r3, r0
 80399e4:	71fb      	strb	r3, [r7, #7]

    return initResult;
 80399e6:	79fb      	ldrb	r3, [r7, #7]
}
 80399e8:	4618      	mov	r0, r3
 80399ea:	3708      	adds	r7, #8
 80399ec:	46bd      	mov	sp, r7
 80399ee:	bd80      	pop	{r7, pc}
 80399f0:	20001c38 	.word	0x20001c38

080399f4 <svl_ipcConfigure>:

/*
 * Function: svl_ipcConfigure
 */
gos_result_t svl_ipcConfigure (u8_t gcpChannel, svl_ipcTransmitFunction transmitFunc, svl_ipcReceiveFunction receiveFunc)
{
 80399f4:	b580      	push	{r7, lr}
 80399f6:	b086      	sub	sp, #24
 80399f8:	af00      	add	r7, sp, #0
 80399fa:	4603      	mov	r3, r0
 80399fc:	60b9      	str	r1, [r7, #8]
 80399fe:	607a      	str	r2, [r7, #4]
 8039a00:	73fb      	strb	r3, [r7, #15]
	/*
	 * Local variables.
	 */
	gos_result_t configureResult = GOS_ERROR;
 8039a02:	23ae      	movs	r3, #174	; 0xae
 8039a04:	75fb      	strb	r3, [r7, #23]

	/*
	 * Function code.
	 */
	ipcGcpChannel = gcpChannel;
 8039a06:	4a08      	ldr	r2, [pc, #32]	; (8039a28 <svl_ipcConfigure+0x34>)
 8039a08:	7bfb      	ldrb	r3, [r7, #15]
 8039a0a:	7013      	strb	r3, [r2, #0]

	configureResult = gos_gcpRegisterPhysicalDriver(ipcGcpChannel, transmitFunc, receiveFunc);
 8039a0c:	4b06      	ldr	r3, [pc, #24]	; (8039a28 <svl_ipcConfigure+0x34>)
 8039a0e:	781b      	ldrb	r3, [r3, #0]
 8039a10:	687a      	ldr	r2, [r7, #4]
 8039a12:	68b9      	ldr	r1, [r7, #8]
 8039a14:	4618      	mov	r0, r3
 8039a16:	f003 fec1 	bl	803d79c <gos_gcpRegisterPhysicalDriver>
 8039a1a:	4603      	mov	r3, r0
 8039a1c:	75fb      	strb	r3, [r7, #23]

	return configureResult;
 8039a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8039a20:	4618      	mov	r0, r3
 8039a22:	3718      	adds	r7, #24
 8039a24:	46bd      	mov	sp, r7
 8039a26:	bd80      	pop	{r7, pc}
 8039a28:	20006fd0 	.word	0x20006fd0

08039a2c <svl_ipcSendMessage>:

/*
 * Function: svl_ipcSendMessage
 */
gos_result_t svl_ipcSendMessage (svl_ipc_msg_id_t msgId, u8_t* pMessage, u16_t messageSize)
{
 8039a2c:	b580      	push	{r7, lr}
 8039a2e:	b086      	sub	sp, #24
 8039a30:	af02      	add	r7, sp, #8
 8039a32:	4603      	mov	r3, r0
 8039a34:	6039      	str	r1, [r7, #0]
 8039a36:	80fb      	strh	r3, [r7, #6]
 8039a38:	4613      	mov	r3, r2
 8039a3a:	80bb      	strh	r3, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t sendResult = GOS_ERROR;
 8039a3c:	23ae      	movs	r3, #174	; 0xae
 8039a3e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */

	sendResult = gos_gcpTransmitMessage(ipcGcpChannel, (u16_t)msgId, pMessage, messageSize, SVL_IPC_GCP_MAX_CHUNK_SIZE);
 8039a40:	4b07      	ldr	r3, [pc, #28]	; (8039a60 <svl_ipcSendMessage+0x34>)
 8039a42:	7818      	ldrb	r0, [r3, #0]
 8039a44:	88bb      	ldrh	r3, [r7, #4]
 8039a46:	88f9      	ldrh	r1, [r7, #6]
 8039a48:	2240      	movs	r2, #64	; 0x40
 8039a4a:	9200      	str	r2, [sp, #0]
 8039a4c:	683a      	ldr	r2, [r7, #0]
 8039a4e:	f003 fecd 	bl	803d7ec <gos_gcpTransmitMessage>
 8039a52:	4603      	mov	r3, r0
 8039a54:	73fb      	strb	r3, [r7, #15]

	return sendResult;
 8039a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8039a58:	4618      	mov	r0, r3
 8039a5a:	3710      	adds	r7, #16
 8039a5c:	46bd      	mov	sp, r7
 8039a5e:	bd80      	pop	{r7, pc}
 8039a60:	20006fd0 	.word	0x20006fd0

08039a64 <svl_ipcReceiveMessage>:

/*
 * Function: svl_ipcReceiveMessage
 */
gos_result_t svl_ipcReceiveMessage (svl_ipc_msg_id_t* pMsgId, u8_t* pMessage, u16_t messageSize)
{
 8039a64:	b580      	push	{r7, lr}
 8039a66:	b088      	sub	sp, #32
 8039a68:	af02      	add	r7, sp, #8
 8039a6a:	60f8      	str	r0, [r7, #12]
 8039a6c:	60b9      	str	r1, [r7, #8]
 8039a6e:	4613      	mov	r3, r2
 8039a70:	80fb      	strh	r3, [r7, #6]
	/*
	 * Local variables.
	 */
	gos_result_t receiveResult = GOS_ERROR;
 8039a72:	23ae      	movs	r3, #174	; 0xae
 8039a74:	75fb      	strb	r3, [r7, #23]

	/*
	 * Function code.
	 */

	receiveResult = gos_gcpReceiveMessage(ipcGcpChannel, (u16_t*)pMsgId, pMessage, messageSize, SVL_IPC_GCP_MAX_CHUNK_SIZE);
 8039a76:	4b08      	ldr	r3, [pc, #32]	; (8039a98 <svl_ipcReceiveMessage+0x34>)
 8039a78:	7818      	ldrb	r0, [r3, #0]
 8039a7a:	88fb      	ldrh	r3, [r7, #6]
 8039a7c:	2240      	movs	r2, #64	; 0x40
 8039a7e:	9200      	str	r2, [sp, #0]
 8039a80:	68ba      	ldr	r2, [r7, #8]
 8039a82:	68f9      	ldr	r1, [r7, #12]
 8039a84:	f003 ffe4 	bl	803da50 <gos_gcpReceiveMessage>
 8039a88:	4603      	mov	r3, r0
 8039a8a:	75fb      	strb	r3, [r7, #23]

	return receiveResult;
 8039a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8039a8e:	4618      	mov	r0, r3
 8039a90:	3718      	adds	r7, #24
 8039a92:	46bd      	mov	sp, r7
 8039a94:	bd80      	pop	{r7, pc}
 8039a96:	bf00      	nop
 8039a98:	20006fd0 	.word	0x20006fd0

08039a9c <svl_ipcDaemon>:
 * @details Handles incoming IPC messages.
 *
 * @return  -
 */
GOS_STATIC void_t svl_ipcDaemon (void_t)
{
 8039a9c:	b580      	push	{r7, lr}
 8039a9e:	b082      	sub	sp, #8
 8039aa0:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t             lutIndex = 0u;
 8039aa2:	2300      	movs	r3, #0
 8039aa4:	71fb      	strb	r3, [r7, #7]
	svl_ipc_msg_id_t rxMsgId  = 0u;
 8039aa6:	2300      	movs	r3, #0
 8039aa8:	80bb      	strh	r3, [r7, #4]
	/*
	 * Function code.
	 */
	for (;;)
	{
		if (svl_ipcReceiveMessage(&rxMsgId, ipcBuffer, sizeof(ipcBuffer)) == GOS_SUCCESS)
 8039aaa:	1d3b      	adds	r3, r7, #4
 8039aac:	2220      	movs	r2, #32
 8039aae:	4991      	ldr	r1, [pc, #580]	; (8039cf4 <svl_ipcDaemon+0x258>)
 8039ab0:	4618      	mov	r0, r3
 8039ab2:	f7ff ffd7 	bl	8039a64 <svl_ipcReceiveMessage>
 8039ab6:	4603      	mov	r3, r0
 8039ab8:	2b55      	cmp	r3, #85	; 0x55
 8039aba:	f040 8114 	bne.w	8039ce6 <svl_ipcDaemon+0x24a>
		{
			switch (rxMsgId)
 8039abe:	88bb      	ldrh	r3, [r7, #4]
 8039ac0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 8039ac4:	3b0a      	subs	r3, #10
 8039ac6:	2b07      	cmp	r3, #7
 8039ac8:	f200 80ee 	bhi.w	8039ca8 <svl_ipcDaemon+0x20c>
 8039acc:	a201      	add	r2, pc, #4	; (adr r2, 8039ad4 <svl_ipcDaemon+0x38>)
 8039ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8039ad2:	bf00      	nop
 8039ad4:	08039bc3 	.word	0x08039bc3
 8039ad8:	08039bd5 	.word	0x08039bd5
 8039adc:	08039bef 	.word	0x08039bef
 8039ae0:	08039c03 	.word	0x08039c03
 8039ae4:	08039af5 	.word	0x08039af5
 8039ae8:	08039b09 	.word	0x08039b09
 8039aec:	08039b8f 	.word	0x08039b8f
 8039af0:	08039b1d 	.word	0x08039b1d
				case SVL_IPC_MSG_ID_PING_REQ:
				{
#if SVL_IPC_TRACE_ENABLED == 1
					(void_t) gos_traceDriverTransmitString_Unsafe("IPC ping request received.\r\n");
#endif
					pingMsg.pingResult = 40u;
 8039af4:	4b80      	ldr	r3, [pc, #512]	; (8039cf8 <svl_ipcDaemon+0x25c>)
 8039af6:	2228      	movs	r2, #40	; 0x28
 8039af8:	701a      	strb	r2, [r3, #0]
					(void_t) svl_ipcSendMessage(SVL_IPC_MSG_ID_PING_RESP, (u8_t*)&pingMsg, sizeof(pingMsg));
 8039afa:	2201      	movs	r2, #1
 8039afc:	497e      	ldr	r1, [pc, #504]	; (8039cf8 <svl_ipcDaemon+0x25c>)
 8039afe:	f246 000e 	movw	r0, #24590	; 0x600e
 8039b02:	f7ff ff93 	bl	8039a2c <svl_ipcSendMessage>
					break;
 8039b06:	e0f3      	b.n	8039cf0 <svl_ipcDaemon+0x254>
				case SVL_IPC_MSG_ID_SYS_RUNTIME_REQ:
				{
#if SVL_IPC_TRACE_ENABLED == 1
					(void_t) gos_traceDriverTransmitString_Unsafe("IPC runtime request received.\r\n");
#endif
					(void_t) gos_runTimeGet(&runTimeMsg.sysRunTime);
 8039b08:	487c      	ldr	r0, [pc, #496]	; (8039cfc <svl_ipcDaemon+0x260>)
 8039b0a:	f006 fbfb 	bl	8040304 <gos_runTimeGet>
					(void_t) svl_ipcSendMessage(SVL_IPC_MSG_ID_SYS_RUNTIME_RESP, (u8_t*)&runTimeMsg, sizeof(runTimeMsg));
 8039b0e:	2209      	movs	r2, #9
 8039b10:	497a      	ldr	r1, [pc, #488]	; (8039cfc <svl_ipcDaemon+0x260>)
 8039b12:	f246 000f 	movw	r0, #24591	; 0x600f
 8039b16:	f7ff ff89 	bl	8039a2c <svl_ipcSendMessage>
					break;
 8039b1a:	e0e9      	b.n	8039cf0 <svl_ipcDaemon+0x254>
 8039b1c:	4b75      	ldr	r3, [pc, #468]	; (8039cf4 <svl_ipcDaemon+0x258>)
 8039b1e:	881a      	ldrh	r2, [r3, #0]
				{
#if SVL_IPC_TRACE_ENABLED == 1
					(void_t) gos_traceDriverTransmitString_Unsafe("IPC task variable data request received.\r\n");
#endif
					// Get task index.
					(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)ipcBuffer, sizeof(taskDataGetMsg));
 8039b20:	4b77      	ldr	r3, [pc, #476]	; (8039d00 <svl_ipcDaemon+0x264>)
 8039b22:	801a      	strh	r2, [r3, #0]
					// Get task data.
					(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 8039b24:	4b76      	ldr	r3, [pc, #472]	; (8039d00 <svl_ipcDaemon+0x264>)
 8039b26:	881b      	ldrh	r3, [r3, #0]
 8039b28:	4976      	ldr	r1, [pc, #472]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039b2a:	4618      	mov	r0, r3
 8039b2c:	f003 faca 	bl	803d0c4 <gos_taskGetDataByIndex>

					taskVarDataMsg.taskStackMaxUsage = taskData.taskStackSizeMaxUsage;
 8039b30:	4b74      	ldr	r3, [pc, #464]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039b32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8039b36:	4b74      	ldr	r3, [pc, #464]	; (8039d08 <svl_ipcDaemon+0x26c>)
 8039b38:	f8a3 2013 	strh.w	r2, [r3, #19]
					taskVarDataMsg.taskCpuUsage      = taskData.taskCpuUsage;
 8039b3c:	4b71      	ldr	r3, [pc, #452]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039b3e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8039b42:	4b71      	ldr	r3, [pc, #452]	; (8039d08 <svl_ipcDaemon+0x26c>)
 8039b44:	f8a3 2011 	strh.w	r2, [r3, #17]
					taskVarDataMsg.taskCpuUsageMax   = taskData.taskCpuUsageMax;
 8039b48:	4b6e      	ldr	r3, [pc, #440]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039b4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8039b4e:	4b6e      	ldr	r3, [pc, #440]	; (8039d08 <svl_ipcDaemon+0x26c>)
 8039b50:	f8a3 200f 	strh.w	r2, [r3, #15]
					taskVarDataMsg.taskPriority      = taskData.taskPriority;
 8039b54:	4b6b      	ldr	r3, [pc, #428]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039b56:	799a      	ldrb	r2, [r3, #6]
 8039b58:	4b6b      	ldr	r3, [pc, #428]	; (8039d08 <svl_ipcDaemon+0x26c>)
 8039b5a:	705a      	strb	r2, [r3, #1]
					taskVarDataMsg.taskCsCounter     = taskData.taskCsCounter;
 8039b5c:	4b69      	ldr	r3, [pc, #420]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8039b60:	4a69      	ldr	r2, [pc, #420]	; (8039d08 <svl_ipcDaemon+0x26c>)
 8039b62:	f8c2 3002 	str.w	r3, [r2, #2]
                    taskVarDataMsg.taskState         = taskData.taskState;
 8039b66:	4b67      	ldr	r3, [pc, #412]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039b68:	791a      	ldrb	r2, [r3, #4]
 8039b6a:	4b67      	ldr	r3, [pc, #412]	; (8039d08 <svl_ipcDaemon+0x26c>)
 8039b6c:	701a      	strb	r2, [r3, #0]

                    (void_t) memcpy((void_t*)&taskVarDataMsg.taskRunTime, (void_t*)&taskData.taskRunTime, sizeof(taskData.taskRunTime));
 8039b6e:	4a66      	ldr	r2, [pc, #408]	; (8039d08 <svl_ipcDaemon+0x26c>)
 8039b70:	4b64      	ldr	r3, [pc, #400]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039b72:	3206      	adds	r2, #6
 8039b74:	334c      	adds	r3, #76	; 0x4c
 8039b76:	cb03      	ldmia	r3!, {r0, r1}
 8039b78:	6010      	str	r0, [r2, #0]
 8039b7a:	6051      	str	r1, [r2, #4]
 8039b7c:	781b      	ldrb	r3, [r3, #0]
 8039b7e:	7213      	strb	r3, [r2, #8]

					(void_t) svl_ipcSendMessage(SVL_IPC_MSG_ID_TASK_VAR_DATA_RESP, (u8_t*)&taskVarDataMsg, sizeof(taskVarDataMsg));
 8039b80:	2215      	movs	r2, #21
 8039b82:	4961      	ldr	r1, [pc, #388]	; (8039d08 <svl_ipcDaemon+0x26c>)
 8039b84:	f246 0011 	movw	r0, #24593	; 0x6011
 8039b88:	f7ff ff50 	bl	8039a2c <svl_ipcSendMessage>
					break;
 8039b8c:	e0b0      	b.n	8039cf0 <svl_ipcDaemon+0x254>
				case SVL_IPC_MSG_ID_SWINFO_REQ:
				{
#if SVL_IPC_TRACE_ENABLED == 1
					(void_t) gos_traceDriverTransmitString_Unsafe("IPC software info request received.\r\n");
#endif
					(void_t) bld_dataGet(&swInfoMsg.bootloaderDataMessage.bldData);
 8039b8e:	485f      	ldr	r0, [pc, #380]	; (8039d0c <svl_ipcDaemon+0x270>)
 8039b90:	f000 f8d0 	bl	8039d34 <bld_dataGet>
					(void_t) bld_appDataGet(&swInfoMsg.bootloaderDataMessage.appData);
 8039b94:	485e      	ldr	r0, [pc, #376]	; (8039d10 <svl_ipcDaemon+0x274>)
 8039b96:	f000 f90f 	bl	8039db8 <bld_appDataGet>

					// Check if driver info is empty (first call).
					if (swInfoMsg.bootloaderDataMessage.appData.libVersion.date.years == 0u)
 8039b9a:	4b5c      	ldr	r3, [pc, #368]	; (8039d0c <svl_ipcDaemon+0x270>)
 8039b9c:	f8b3 3173 	ldrh.w	r3, [r3, #371]	; 0x173
 8039ba0:	b29b      	uxth	r3, r3
 8039ba2:	2b00      	cmp	r3, #0
 8039ba4:	d105      	bne.n	8039bb2 <svl_ipcDaemon+0x116>
					{
						(void_t) gos_libGetVersion(&swInfoMsg.bootloaderDataMessage.appData.libVersion);
 8039ba6:	485b      	ldr	r0, [pc, #364]	; (8039d14 <svl_ipcDaemon+0x278>)
 8039ba8:	f7fa ff86 	bl	8034ab8 <gos_libGetVersion>
						(void_t) bld_appDataSet(&swInfoMsg.bootloaderDataMessage.appData);
 8039bac:	4858      	ldr	r0, [pc, #352]	; (8039d10 <svl_ipcDaemon+0x274>)
 8039bae:	f000 f9b5 	bl	8039f1c <bld_appDataSet>
					else
					{
						// Driver info OK.
					}

					(void_t) svl_ipcSendMessage(SVL_IPC_MSG_ID_SWINFO_RESP, (u8_t*)&swInfoMsg, sizeof(swInfoMsg));
 8039bb2:	f240 22a9 	movw	r2, #681	; 0x2a9
 8039bb6:	4955      	ldr	r1, [pc, #340]	; (8039d0c <svl_ipcDaemon+0x270>)
 8039bb8:	f246 0010 	movw	r0, #24592	; 0x6010
 8039bbc:	f7ff ff36 	bl	8039a2c <svl_ipcSendMessage>
					break;
 8039bc0:	e096      	b.n	8039cf0 <svl_ipcDaemon+0x254>
				}
				case SVL_IPC_MSG_ID_SYS_RES:
				{
					GOS_DISABLE_SCHED
 8039bc2:	4b55      	ldr	r3, [pc, #340]	; (8039d18 <svl_ipcDaemon+0x27c>)
 8039bc4:	781b      	ldrb	r3, [r3, #0]
 8039bc6:	3301      	adds	r3, #1
 8039bc8:	b2da      	uxtb	r2, r3
 8039bca:	4b53      	ldr	r3, [pc, #332]	; (8039d18 <svl_ipcDaemon+0x27c>)
 8039bcc:	701a      	strb	r2, [r3, #0]
#if SVL_IPC_TRACE_ENABLED == 1
					(void_t) gos_traceDriverTransmitString_Unsafe("IPC reset request received.\r\n");
#endif
					gos_kernelReset();
 8039bce:	f000 fd6f 	bl	803a6b0 <gos_kernelReset>
					break;
 8039bd2:	e08d      	b.n	8039cf0 <svl_ipcDaemon+0x254>
				case SVL_IPC_MSG_ID_CPU_LOAD_REQ:
				{
#if SVL_IPC_TRACE_ENABLED == 1
					(void_t) gos_traceTrace(GOS_FALSE, "IPC CPU load request received.\r\n");
#endif
					cpuLoadMsg.cpuLoad = gos_kernelGetCpuUsage();
 8039bd4:	f000 fd5a 	bl	803a68c <gos_kernelGetCpuUsage>
 8039bd8:	4603      	mov	r3, r0
 8039bda:	461a      	mov	r2, r3
 8039bdc:	4b4f      	ldr	r3, [pc, #316]	; (8039d1c <svl_ipcDaemon+0x280>)
 8039bde:	801a      	strh	r2, [r3, #0]
					(void_t) svl_ipcSendMessage(SVL_IPC_MSG_ID_CPU_LOAD_RESP, (u8_t*)&cpuLoadMsg, sizeof(cpuLoadMsg));
 8039be0:	2202      	movs	r2, #2
 8039be2:	494e      	ldr	r1, [pc, #312]	; (8039d1c <svl_ipcDaemon+0x280>)
 8039be4:	f246 000b 	movw	r0, #24587	; 0x600b
 8039be8:	f7ff ff20 	bl	8039a2c <svl_ipcSendMessage>
					break;
 8039bec:	e080      	b.n	8039cf0 <svl_ipcDaemon+0x254>
				case SVL_IPC_MSG_ID_TASK_NUM_REQ:
				{
#if SVL_IPC_TRACE_ENABLED == 1
					(void_t) gos_traceTrace(GOS_FALSE, "IPC task number request received.\r\n");
#endif
					(void_t) gos_taskGetNumber(&taskNumMsg.taskNumber);
 8039bee:	484c      	ldr	r0, [pc, #304]	; (8039d20 <svl_ipcDaemon+0x284>)
 8039bf0:	f003 fada 	bl	803d1a8 <gos_taskGetNumber>
					(void_t) svl_ipcSendMessage(SVL_IPC_MSG_ID_TASK_NUM_RESP, (u8_t*)&taskNumMsg, sizeof(taskNumMsg));
 8039bf4:	2202      	movs	r2, #2
 8039bf6:	494a      	ldr	r1, [pc, #296]	; (8039d20 <svl_ipcDaemon+0x284>)
 8039bf8:	f246 000c 	movw	r0, #24588	; 0x600c
 8039bfc:	f7ff ff16 	bl	8039a2c <svl_ipcSendMessage>
					break;
 8039c00:	e076      	b.n	8039cf0 <svl_ipcDaemon+0x254>
 8039c02:	4b3c      	ldr	r3, [pc, #240]	; (8039cf4 <svl_ipcDaemon+0x258>)
 8039c04:	881a      	ldrh	r2, [r3, #0]
				{
#if SVL_IPC_TRACE_ENABLED == 1
					(void_t) gos_traceTrace(GOS_FALSE, "IPC task data request received.\r\n");
#endif
					// Get task index.
					(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)ipcBuffer, sizeof(taskDataGetMsg));
 8039c06:	4b3e      	ldr	r3, [pc, #248]	; (8039d00 <svl_ipcDaemon+0x264>)
 8039c08:	801a      	strh	r2, [r3, #0]
					// Get task data.
					(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 8039c0a:	4b3d      	ldr	r3, [pc, #244]	; (8039d00 <svl_ipcDaemon+0x264>)
 8039c0c:	881b      	ldrh	r3, [r3, #0]
 8039c0e:	493d      	ldr	r1, [pc, #244]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c10:	4618      	mov	r0, r3
 8039c12:	f003 fa57 	bl	803d0c4 <gos_taskGetDataByIndex>
					// Fill out message.
					taskDataMsg.taskCpuUsage         = taskData.taskCpuUsage;
 8039c16:	4b3b      	ldr	r3, [pc, #236]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c18:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8039c1c:	4b41      	ldr	r3, [pc, #260]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c1e:	875a      	strh	r2, [r3, #58]	; 0x3a
					taskDataMsg.taskCpuUsageLimit    = taskData.taskCpuUsageLimit;
 8039c20:	4b38      	ldr	r3, [pc, #224]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c22:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8039c26:	4b3f      	ldr	r3, [pc, #252]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c28:	86da      	strh	r2, [r3, #54]	; 0x36
					taskDataMsg.taskCpuUsageMax      = taskData.taskCpuUsageMax;
 8039c2a:	4b36      	ldr	r3, [pc, #216]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c2c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8039c30:	4b3c      	ldr	r3, [pc, #240]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c32:	871a      	strh	r2, [r3, #56]	; 0x38
					taskDataMsg.taskCsCounter        = taskData.taskCsCounter;
 8039c34:	4b33      	ldr	r3, [pc, #204]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8039c38:	4a3a      	ldr	r2, [pc, #232]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c3a:	f8c2 3027 	str.w	r3, [r2, #39]	; 0x27
					taskDataMsg.taskId               = taskData.taskId;
 8039c3e:	4b31      	ldr	r3, [pc, #196]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8039c42:	4b38      	ldr	r3, [pc, #224]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c44:	f8a3 2025 	strh.w	r2, [r3, #37]	; 0x25
					(void_t) strcpy(taskDataMsg.taskName, taskData.taskName);
 8039c48:	4937      	ldr	r1, [pc, #220]	; (8039d28 <svl_ipcDaemon+0x28c>)
 8039c4a:	4838      	ldr	r0, [pc, #224]	; (8039d2c <svl_ipcDaemon+0x290>)
 8039c4c:	f009 f86d 	bl	8042d2a <strcpy>
					taskDataMsg.taskOriginalPriority = taskData.taskOriginalPriority;
 8039c50:	4b2c      	ldr	r3, [pc, #176]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c52:	79da      	ldrb	r2, [r3, #7]
 8039c54:	4b33      	ldr	r3, [pc, #204]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c56:	709a      	strb	r2, [r3, #2]
					taskDataMsg.taskPriority         = taskData.taskPriority;
 8039c58:	4b2a      	ldr	r3, [pc, #168]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c5a:	799a      	ldrb	r2, [r3, #6]
 8039c5c:	4b31      	ldr	r3, [pc, #196]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c5e:	705a      	strb	r2, [r3, #1]
					taskDataMsg.taskPrivilegeLevel   = taskData.taskPrivilegeLevel;
 8039c60:	4b28      	ldr	r3, [pc, #160]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c62:	891a      	ldrh	r2, [r3, #8]
 8039c64:	4b2f      	ldr	r3, [pc, #188]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c66:	f8a3 2003 	strh.w	r2, [r3, #3]
					(void_t) memcpy(&taskDataMsg.taskRunTime, &taskData.taskRunTime, sizeof(taskData.taskRunTime));
 8039c6a:	4a2e      	ldr	r2, [pc, #184]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c6c:	4b25      	ldr	r3, [pc, #148]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c6e:	322d      	adds	r2, #45	; 0x2d
 8039c70:	334c      	adds	r3, #76	; 0x4c
 8039c72:	cb03      	ldmia	r3!, {r0, r1}
 8039c74:	6010      	str	r0, [r2, #0]
 8039c76:	6051      	str	r1, [r2, #4]
 8039c78:	781b      	ldrb	r3, [r3, #0]
 8039c7a:	7213      	strb	r3, [r2, #8]
					taskDataMsg.taskStackMaxUsage    = taskData.taskStackSizeMaxUsage;
 8039c7c:	4b21      	ldr	r3, [pc, #132]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8039c82:	4b28      	ldr	r3, [pc, #160]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c84:	879a      	strh	r2, [r3, #60]	; 0x3c
					taskDataMsg.taskStackSize        = taskData.taskStackSize;
 8039c86:	4b1f      	ldr	r3, [pc, #124]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8039c8c:	4b25      	ldr	r3, [pc, #148]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c8e:	f8a3 202b 	strh.w	r2, [r3, #43]	; 0x2b
					taskDataMsg.taskState            = taskData.taskState;
 8039c92:	4b1c      	ldr	r3, [pc, #112]	; (8039d04 <svl_ipcDaemon+0x268>)
 8039c94:	791a      	ldrb	r2, [r3, #4]
 8039c96:	4b23      	ldr	r3, [pc, #140]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c98:	701a      	strb	r2, [r3, #0]

					(void_t) svl_ipcSendMessage(SVL_IPC_MSG_ID_TASK_DATA_RESP, (u8_t*)&taskDataMsg, sizeof(taskDataMsg));
 8039c9a:	223e      	movs	r2, #62	; 0x3e
 8039c9c:	4921      	ldr	r1, [pc, #132]	; (8039d24 <svl_ipcDaemon+0x288>)
 8039c9e:	f246 000d 	movw	r0, #24589	; 0x600d
 8039ca2:	f7ff fec3 	bl	8039a2c <svl_ipcSendMessage>
					break;
 8039ca6:	e023      	b.n	8039cf0 <svl_ipcDaemon+0x254>
				default:
				{
#if SVL_IPC_TRACE_ENABLED == 1
					(void_t) gos_traceTraceFormatted(GOS_FALSE, "IPC request received with ID: %u.\r\n", rxMsgId);
#endif
					for (lutIndex = 0u; lutIndex < SVL_IPC_MAX_USER_MSG_CALLBACKS; lutIndex++)
 8039ca8:	2300      	movs	r3, #0
 8039caa:	71fb      	strb	r3, [r7, #7]
 8039cac:	e017      	b.n	8039cde <svl_ipcDaemon+0x242>
					{
						if (messageLut[lutIndex].callback == NULL)
 8039cae:	79fb      	ldrb	r3, [r7, #7]
 8039cb0:	4a1f      	ldr	r2, [pc, #124]	; (8039d30 <svl_ipcDaemon+0x294>)
 8039cb2:	00db      	lsls	r3, r3, #3
 8039cb4:	4413      	add	r3, r2
 8039cb6:	685b      	ldr	r3, [r3, #4]
 8039cb8:	2b00      	cmp	r3, #0
 8039cba:	d018      	beq.n	8039cee <svl_ipcDaemon+0x252>
							// Last registered message found, break loop.
							break;
						}
						else
						{
							if (messageLut[lutIndex].msgId == rxMsgId)
 8039cbc:	79fb      	ldrb	r3, [r7, #7]
 8039cbe:	4a1c      	ldr	r2, [pc, #112]	; (8039d30 <svl_ipcDaemon+0x294>)
 8039cc0:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8039cc4:	88bb      	ldrh	r3, [r7, #4]
 8039cc6:	429a      	cmp	r2, r3
 8039cc8:	d106      	bne.n	8039cd8 <svl_ipcDaemon+0x23c>
							{
								messageLut[lutIndex].callback(ipcBuffer);
 8039cca:	79fb      	ldrb	r3, [r7, #7]
 8039ccc:	4a18      	ldr	r2, [pc, #96]	; (8039d30 <svl_ipcDaemon+0x294>)
 8039cce:	00db      	lsls	r3, r3, #3
 8039cd0:	4413      	add	r3, r2
 8039cd2:	685b      	ldr	r3, [r3, #4]
 8039cd4:	4807      	ldr	r0, [pc, #28]	; (8039cf4 <svl_ipcDaemon+0x258>)
 8039cd6:	4798      	blx	r3
					for (lutIndex = 0u; lutIndex < SVL_IPC_MAX_USER_MSG_CALLBACKS; lutIndex++)
 8039cd8:	79fb      	ldrb	r3, [r7, #7]
 8039cda:	3301      	adds	r3, #1
 8039cdc:	71fb      	strb	r3, [r7, #7]
 8039cde:	79fb      	ldrb	r3, [r7, #7]
 8039ce0:	2b07      	cmp	r3, #7
 8039ce2:	d9e4      	bls.n	8039cae <svl_ipcDaemon+0x212>
 8039ce4:	e6e1      	b.n	8039aaa <svl_ipcDaemon+0xe>
				}
			}
		}
		else
		{
			(void_t) gos_taskSleep(10);
 8039ce6:	200a      	movs	r0, #10
 8039ce8:	f001 feb2 	bl	803ba50 <gos_taskSleep>
 8039cec:	e6dd      	b.n	8039aaa <svl_ipcDaemon+0xe>
							break;
 8039cee:	bf00      	nop
		if (svl_ipcReceiveMessage(&rxMsgId, ipcBuffer, sizeof(ipcBuffer)) == GOS_SUCCESS)
 8039cf0:	e6db      	b.n	8039aaa <svl_ipcDaemon+0xe>
 8039cf2:	bf00      	nop
 8039cf4:	20006fb0 	.word	0x20006fb0
 8039cf8:	20006fd4 	.word	0x20006fd4
 8039cfc:	20006fd8 	.word	0x20006fd8
 8039d00:	20006fec 	.word	0x20006fec
 8039d04:	20007030 	.word	0x20007030
 8039d08:	20007348 	.word	0x20007348
 8039d0c:	2000709c 	.word	0x2000709c
 8039d10:	200071f1 	.word	0x200071f1
 8039d14:	20007201 	.word	0x20007201
 8039d18:	20007445 	.word	0x20007445
 8039d1c:	20006fe4 	.word	0x20006fe4
 8039d20:	20006fe8 	.word	0x20006fe8
 8039d24:	20006ff0 	.word	0x20006ff0
 8039d28:	2000703a 	.word	0x2000703a
 8039d2c:	20006ff5 	.word	0x20006ff5
 8039d30:	20006f70 	.word	0x20006f70

08039d34 <bld_dataGet>:

/*
 * Function: bld_dataGet
 */
gos_result_t bld_dataGet (bld_bootloaderData_t* pData)
{
 8039d34:	b580      	push	{r7, lr}
 8039d36:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 8039d3a:	af00      	add	r7, sp, #0
 8039d3c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039d40:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039d44:	6018      	str	r0, [r3, #0]
    /*
     * Local variables.
     */
    gos_result_t dataGetResult = GOS_ERROR;
 8039d46:	23ae      	movs	r3, #174	; 0xae
 8039d48:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
    bld_packedData bldPackedData = {0};
 8039d4c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039d50:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8039d54:	4618      	mov	r0, r3
 8039d56:	f240 23bf 	movw	r3, #703	; 0x2bf
 8039d5a:	461a      	mov	r2, r3
 8039d5c:	2100      	movs	r1, #0
 8039d5e:	f008 ff53 	bl	8042c08 <memset>

    /*
     * Function code.
     */
    if (pData != NULL)
 8039d62:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039d66:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039d6a:	681b      	ldr	r3, [r3, #0]
 8039d6c:	2b00      	cmp	r3, #0
 8039d6e:	d01a      	beq.n	8039da6 <bld_dataGet+0x72>
    {
        dataGetResult = drv_flashRead(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData));
 8039d70:	f107 0308 	add.w	r3, r7, #8
 8039d74:	f240 22bf 	movw	r2, #703	; 0x2bf
 8039d78:	4619      	mov	r1, r3
 8039d7a:	480e      	ldr	r0, [pc, #56]	; (8039db4 <bld_dataGet+0x80>)
 8039d7c:	f000 f9bf 	bl	803a0fe <drv_flashRead>
 8039d80:	4603      	mov	r3, r0
 8039d82:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
        (void_t*) memcpy((void_t*)pData, (void_t*)&bldPackedData.bldData, sizeof(bldPackedData.bldData));
 8039d86:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039d8a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039d8e:	681a      	ldr	r2, [r3, #0]
 8039d90:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039d94:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8039d98:	4610      	mov	r0, r2
 8039d9a:	4619      	mov	r1, r3
 8039d9c:	f240 1355 	movw	r3, #341	; 0x155
 8039da0:	461a      	mov	r2, r3
 8039da2:	f008 ffca 	bl	8042d3a <memcpy>
    else
    {
        // Error.
    }

    return dataGetResult;
 8039da6:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
}
 8039daa:	4618      	mov	r0, r3
 8039dac:	f507 7732 	add.w	r7, r7, #712	; 0x2c8
 8039db0:	46bd      	mov	sp, r7
 8039db2:	bd80      	pop	{r7, pc}
 8039db4:	08004000 	.word	0x08004000

08039db8 <bld_appDataGet>:

/*
 * Function: bld_appDataGet
 */
gos_result_t bld_appDataGet (bld_appData_t* pData)
{
 8039db8:	b580      	push	{r7, lr}
 8039dba:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 8039dbe:	af00      	add	r7, sp, #0
 8039dc0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039dc4:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039dc8:	6018      	str	r0, [r3, #0]
    /*
     * Local variables.
     */
    gos_result_t   dataGetResult = GOS_ERROR;
 8039dca:	23ae      	movs	r3, #174	; 0xae
 8039dcc:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
    bld_packedData bldPackedData = {0};
 8039dd0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039dd4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8039dd8:	4618      	mov	r0, r3
 8039dda:	f240 23bf 	movw	r3, #703	; 0x2bf
 8039dde:	461a      	mov	r2, r3
 8039de0:	2100      	movs	r1, #0
 8039de2:	f008 ff11 	bl	8042c08 <memset>

    /*
     * Function code.
     */
    if (pData != NULL)
 8039de6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039dea:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039dee:	681b      	ldr	r3, [r3, #0]
 8039df0:	2b00      	cmp	r3, #0
 8039df2:	d01b      	beq.n	8039e2c <bld_appDataGet+0x74>
    {
    	dataGetResult = drv_flashRead(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData));
 8039df4:	f107 0308 	add.w	r3, r7, #8
 8039df8:	f240 22bf 	movw	r2, #703	; 0x2bf
 8039dfc:	4619      	mov	r1, r3
 8039dfe:	480f      	ldr	r0, [pc, #60]	; (8039e3c <bld_appDataGet+0x84>)
 8039e00:	f000 f97d 	bl	803a0fe <drv_flashRead>
 8039e04:	4603      	mov	r3, r0
 8039e06:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
        (void_t*) memcpy((void_t*)pData, (void_t*)&bldPackedData.appData, sizeof(bldPackedData.appData));
 8039e0a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039e0e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039e12:	681a      	ldr	r2, [r3, #0]
 8039e14:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039e18:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8039e1c:	4610      	mov	r0, r2
 8039e1e:	f203 1355 	addw	r3, r3, #341	; 0x155
 8039e22:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8039e26:	4619      	mov	r1, r3
 8039e28:	f008 ff87 	bl	8042d3a <memcpy>
    else
    {
        // Error.
    }

    return dataGetResult;
 8039e2c:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
}
 8039e30:	4618      	mov	r0, r3
 8039e32:	f507 7732 	add.w	r7, r7, #712	; 0x2c8
 8039e36:	46bd      	mov	sp, r7
 8039e38:	bd80      	pop	{r7, pc}
 8039e3a:	bf00      	nop
 8039e3c:	08004000 	.word	0x08004000

08039e40 <bld_dataSet>:

/*
 * Function: bld_dataSet
 */
gos_result_t bld_dataSet (bld_bootloaderData_t* pData)
{
 8039e40:	b580      	push	{r7, lr}
 8039e42:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 8039e46:	af00      	add	r7, sp, #0
 8039e48:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039e4c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039e50:	6018      	str	r0, [r3, #0]
    /*
     * Local variables.
     */
    gos_result_t dataSetResult = GOS_ERROR;
 8039e52:	23ae      	movs	r3, #174	; 0xae
 8039e54:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
    bld_packedData bldPackedData = {0};
 8039e58:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039e5c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8039e60:	4618      	mov	r0, r3
 8039e62:	f240 23bf 	movw	r3, #703	; 0x2bf
 8039e66:	461a      	mov	r2, r3
 8039e68:	2100      	movs	r1, #0
 8039e6a:	f008 fecd 	bl	8042c08 <memset>

    /*
     * Function code.
     */
    if (pData != NULL && drv_flashRead(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData)) == GOS_SUCCESS)
 8039e6e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039e72:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039e76:	681b      	ldr	r3, [r3, #0]
 8039e78:	2b00      	cmp	r3, #0
 8039e7a:	d044      	beq.n	8039f06 <bld_dataSet+0xc6>
 8039e7c:	f107 0308 	add.w	r3, r7, #8
 8039e80:	f240 22bf 	movw	r2, #703	; 0x2bf
 8039e84:	4619      	mov	r1, r3
 8039e86:	4823      	ldr	r0, [pc, #140]	; (8039f14 <bld_dataSet+0xd4>)
 8039e88:	f000 f939 	bl	803a0fe <drv_flashRead>
 8039e8c:	4603      	mov	r3, r0
 8039e8e:	2b55      	cmp	r3, #85	; 0x55
 8039e90:	d139      	bne.n	8039f06 <bld_dataSet+0xc6>
    {
        // Calculate CRC.
        (void_t) drv_crcGetCrc32((u8_t*)pData, sizeof(*pData) - sizeof(pData->dataCrc), &pData->dataCrc);
 8039e92:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039e96:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039e9a:	681b      	ldr	r3, [r3, #0]
 8039e9c:	f203 1251 	addw	r2, r3, #337	; 0x151
 8039ea0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039ea4:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039ea8:	f240 1151 	movw	r1, #337	; 0x151
 8039eac:	6818      	ldr	r0, [r3, #0]
 8039eae:	f7fb fb33 	bl	8035518 <drv_crcGetCrc32>

        // Copy bootloader data to packed data.
        (void_t*) memcpy((void_t*)&bldPackedData.bldData, (void_t*)pData, sizeof(*pData));
 8039eb2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039eb6:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8039eba:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039ebe:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039ec2:	681b      	ldr	r3, [r3, #0]
 8039ec4:	4610      	mov	r0, r2
 8039ec6:	4619      	mov	r1, r3
 8039ec8:	f240 1355 	movw	r3, #341	; 0x155
 8039ecc:	461a      	mov	r2, r3
 8039ece:	f008 ff34 	bl	8042d3a <memcpy>

        // Save updated packed data.
        if (drv_flashErase(BLD_DATA_START_ADDRESS, sizeof(bldPackedData)) != GOS_SUCCESS ||
 8039ed2:	f240 21bf 	movw	r1, #703	; 0x2bf
 8039ed6:	480f      	ldr	r0, [pc, #60]	; (8039f14 <bld_dataSet+0xd4>)
 8039ed8:	f000 f890 	bl	8039ffc <drv_flashErase>
 8039edc:	4603      	mov	r3, r0
 8039ede:	2b55      	cmp	r3, #85	; 0x55
 8039ee0:	d10a      	bne.n	8039ef8 <bld_dataSet+0xb8>
            drv_flashWrite(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData)) != GOS_SUCCESS)
 8039ee2:	f107 0308 	add.w	r3, r7, #8
 8039ee6:	f240 22bf 	movw	r2, #703	; 0x2bf
 8039eea:	4619      	mov	r1, r3
 8039eec:	4809      	ldr	r0, [pc, #36]	; (8039f14 <bld_dataSet+0xd4>)
 8039eee:	f000 f8cd 	bl	803a08c <drv_flashWrite>
 8039ef2:	4603      	mov	r3, r0
        if (drv_flashErase(BLD_DATA_START_ADDRESS, sizeof(bldPackedData)) != GOS_SUCCESS ||
 8039ef4:	2b55      	cmp	r3, #85	; 0x55
 8039ef6:	d003      	beq.n	8039f00 <bld_dataSet+0xc0>
        {
            (void_t) gos_traceTraceFormattedUnsafe("Bootloader data set ERROR\r\n");
 8039ef8:	4807      	ldr	r0, [pc, #28]	; (8039f18 <bld_dataSet+0xd8>)
 8039efa:	f006 ff95 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
 8039efe:	e002      	b.n	8039f06 <bld_dataSet+0xc6>
        }
        else
        {
            dataSetResult = GOS_SUCCESS;
 8039f00:	2355      	movs	r3, #85	; 0x55
 8039f02:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
    else
    {
        // Error.
    }

    return dataSetResult;
 8039f06:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
}
 8039f0a:	4618      	mov	r0, r3
 8039f0c:	f507 7732 	add.w	r7, r7, #712	; 0x2c8
 8039f10:	46bd      	mov	sp, r7
 8039f12:	bd80      	pop	{r7, pc}
 8039f14:	08004000 	.word	0x08004000
 8039f18:	08047850 	.word	0x08047850

08039f1c <bld_appDataSet>:

/*
 * Function: bld_appDataSet
 */
gos_result_t bld_appDataSet (bld_appData_t* pData)
{
 8039f1c:	b580      	push	{r7, lr}
 8039f1e:	f5ad 7d32 	sub.w	sp, sp, #712	; 0x2c8
 8039f22:	af00      	add	r7, sp, #0
 8039f24:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039f28:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039f2c:	6018      	str	r0, [r3, #0]
    /*
     * Local variables.
     */
    gos_result_t dataSetResult = GOS_ERROR;
 8039f2e:	23ae      	movs	r3, #174	; 0xae
 8039f30:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
    bld_packedData bldPackedData = {0};
 8039f34:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039f38:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8039f3c:	4618      	mov	r0, r3
 8039f3e:	f240 23bf 	movw	r3, #703	; 0x2bf
 8039f42:	461a      	mov	r2, r3
 8039f44:	2100      	movs	r1, #0
 8039f46:	f008 fe5f 	bl	8042c08 <memset>

    /*
     * Function code.
     */
    if (pData != NULL && drv_flashRead(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData)) == GOS_SUCCESS)
 8039f4a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039f4e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039f52:	681b      	ldr	r3, [r3, #0]
 8039f54:	2b00      	cmp	r3, #0
 8039f56:	d045      	beq.n	8039fe4 <bld_appDataSet+0xc8>
 8039f58:	f107 0308 	add.w	r3, r7, #8
 8039f5c:	f240 22bf 	movw	r2, #703	; 0x2bf
 8039f60:	4619      	mov	r1, r3
 8039f62:	4824      	ldr	r0, [pc, #144]	; (8039ff4 <bld_appDataSet+0xd8>)
 8039f64:	f000 f8cb 	bl	803a0fe <drv_flashRead>
 8039f68:	4603      	mov	r3, r0
 8039f6a:	2b55      	cmp	r3, #85	; 0x55
 8039f6c:	d13a      	bne.n	8039fe4 <bld_appDataSet+0xc8>
    {
        // Calculate CRC.
        (void_t) drv_crcGetCrc32((u8_t*)pData, sizeof(*pData) - sizeof(pData->dataCrc), &pData->dataCrc);
 8039f6e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039f72:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039f76:	681b      	ldr	r3, [r3, #0]
 8039f78:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8039f7c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039f80:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8039f84:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8039f88:	6818      	ldr	r0, [r3, #0]
 8039f8a:	f7fb fac5 	bl	8035518 <drv_crcGetCrc32>

        // Copy application data to packed data.
        (void_t*) memcpy((void_t*)&bldPackedData.appData, (void_t*)pData, sizeof(*pData));
 8039f8e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8039f92:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8039f96:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8039f9a:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 8039f9e:	6812      	ldr	r2, [r2, #0]
 8039fa0:	f203 1355 	addw	r3, r3, #341	; 0x155
 8039fa4:	4611      	mov	r1, r2
 8039fa6:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8039faa:	4618      	mov	r0, r3
 8039fac:	f008 fec5 	bl	8042d3a <memcpy>

        // Save updated packed data.
        if (drv_flashErase(BLD_DATA_START_ADDRESS, sizeof(bldPackedData)) != GOS_SUCCESS ||
 8039fb0:	f240 21bf 	movw	r1, #703	; 0x2bf
 8039fb4:	480f      	ldr	r0, [pc, #60]	; (8039ff4 <bld_appDataSet+0xd8>)
 8039fb6:	f000 f821 	bl	8039ffc <drv_flashErase>
 8039fba:	4603      	mov	r3, r0
 8039fbc:	2b55      	cmp	r3, #85	; 0x55
 8039fbe:	d10a      	bne.n	8039fd6 <bld_appDataSet+0xba>
            drv_flashWrite(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData)) != GOS_SUCCESS)
 8039fc0:	f107 0308 	add.w	r3, r7, #8
 8039fc4:	f240 22bf 	movw	r2, #703	; 0x2bf
 8039fc8:	4619      	mov	r1, r3
 8039fca:	480a      	ldr	r0, [pc, #40]	; (8039ff4 <bld_appDataSet+0xd8>)
 8039fcc:	f000 f85e 	bl	803a08c <drv_flashWrite>
 8039fd0:	4603      	mov	r3, r0
        if (drv_flashErase(BLD_DATA_START_ADDRESS, sizeof(bldPackedData)) != GOS_SUCCESS ||
 8039fd2:	2b55      	cmp	r3, #85	; 0x55
 8039fd4:	d003      	beq.n	8039fde <bld_appDataSet+0xc2>
        {
            (void_t) gos_traceTraceFormattedUnsafe("App data set ERROR\r\n");
 8039fd6:	4808      	ldr	r0, [pc, #32]	; (8039ff8 <bld_appDataSet+0xdc>)
 8039fd8:	f006 ff26 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
 8039fdc:	e002      	b.n	8039fe4 <bld_appDataSet+0xc8>
        }
        else
        {
            dataSetResult = GOS_SUCCESS;
 8039fde:	2355      	movs	r3, #85	; 0x55
 8039fe0:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
    else
    {
        // Error.
    }

    return dataSetResult;
 8039fe4:	f897 32c7 	ldrb.w	r3, [r7, #711]	; 0x2c7
}
 8039fe8:	4618      	mov	r0, r3
 8039fea:	f507 7732 	add.w	r7, r7, #712	; 0x2c8
 8039fee:	46bd      	mov	sp, r7
 8039ff0:	bd80      	pop	{r7, pc}
 8039ff2:	bf00      	nop
 8039ff4:	08004000 	.word	0x08004000
 8039ff8:	0804786c 	.word	0x0804786c

08039ffc <drv_flashErase>:

/*
 * Function: drv_flashErase
 */
gos_result_t drv_flashErase (u32_t address, u32_t requiredSize)
{
 8039ffc:	b580      	push	{r7, lr}
 8039ffe:	b08c      	sub	sp, #48	; 0x30
 803a000:	af00      	add	r7, sp, #0
 803a002:	6078      	str	r0, [r7, #4]
 803a004:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t           flashEraseResult = GOS_ERROR;
 803a006:	23ae      	movs	r3, #174	; 0xae
 803a008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    FLASH_EraseInitTypeDef eraseInitStruct  = {0};
 803a00c:	f107 030c 	add.w	r3, r7, #12
 803a010:	2200      	movs	r2, #0
 803a012:	601a      	str	r2, [r3, #0]
 803a014:	605a      	str	r2, [r3, #4]
 803a016:	609a      	str	r2, [r3, #8]
 803a018:	60da      	str	r2, [r3, #12]
 803a01a:	611a      	str	r2, [r3, #16]
    u32_t                  startSector      = 0u;
 803a01c:	2300      	movs	r3, #0
 803a01e:	62bb      	str	r3, [r7, #40]	; 0x28
    u32_t                  endSector        = 0u;
 803a020:	2300      	movs	r3, #0
 803a022:	627b      	str	r3, [r7, #36]	; 0x24
    u32_t                  endSectorAddress = 0u;
 803a024:	2300      	movs	r3, #0
 803a026:	623b      	str	r3, [r7, #32]
    u32_t                  sectorError      = 0u;
 803a028:	2300      	movs	r3, #0
 803a02a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 803a02c:	f7ef ff34 	bl	8029e98 <HAL_FLASH_Unlock>

    startSector = drv_flashGetSector(address);
 803a030:	6878      	ldr	r0, [r7, #4]
 803a032:	f000 f88b 	bl	803a14c <drv_flashGetSector>
 803a036:	62b8      	str	r0, [r7, #40]	; 0x28
    endSectorAddress = address + requiredSize - 1;
 803a038:	687a      	ldr	r2, [r7, #4]
 803a03a:	683b      	ldr	r3, [r7, #0]
 803a03c:	4413      	add	r3, r2
 803a03e:	3b01      	subs	r3, #1
 803a040:	623b      	str	r3, [r7, #32]
    endSector = drv_flashGetSector(endSectorAddress);
 803a042:	6a38      	ldr	r0, [r7, #32]
 803a044:	f000 f882 	bl	803a14c <drv_flashGetSector>
 803a048:	6278      	str	r0, [r7, #36]	; 0x24

    eraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 803a04a:	2300      	movs	r3, #0
 803a04c:	60fb      	str	r3, [r7, #12]
    eraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 803a04e:	2302      	movs	r3, #2
 803a050:	61fb      	str	r3, [r7, #28]
    eraseInitStruct.Sector        = startSector;
 803a052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a054:	617b      	str	r3, [r7, #20]
    eraseInitStruct.NbSectors     = (endSector - startSector) + 1;
 803a056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a05a:	1ad3      	subs	r3, r2, r3
 803a05c:	3301      	adds	r3, #1
 803a05e:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) == HAL_OK)
 803a060:	f107 0208 	add.w	r2, r7, #8
 803a064:	f107 030c 	add.w	r3, r7, #12
 803a068:	4611      	mov	r1, r2
 803a06a:	4618      	mov	r0, r3
 803a06c:	f7f0 f886 	bl	802a17c <HAL_FLASHEx_Erase>
 803a070:	4603      	mov	r3, r0
 803a072:	2b00      	cmp	r3, #0
 803a074:	d102      	bne.n	803a07c <drv_flashErase+0x80>
    {
        flashEraseResult = GOS_SUCCESS;
 803a076:	2355      	movs	r3, #85	; 0x55
 803a078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    else
    {
        // Flash erase error.
    }

    (void_t) HAL_FLASH_Lock();
 803a07c:	f7ef ff2e 	bl	8029edc <HAL_FLASH_Lock>

    return flashEraseResult;
 803a080:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 803a084:	4618      	mov	r0, r3
 803a086:	3730      	adds	r7, #48	; 0x30
 803a088:	46bd      	mov	sp, r7
 803a08a:	bd80      	pop	{r7, pc}

0803a08c <drv_flashWrite>:

/*
 * Function: drv_flashWrite
 */
gos_result_t drv_flashWrite (u32_t address, void_t* pData, u32_t size)
{
 803a08c:	b5b0      	push	{r4, r5, r7, lr}
 803a08e:	b088      	sub	sp, #32
 803a090:	af00      	add	r7, sp, #0
 803a092:	60f8      	str	r0, [r7, #12]
 803a094:	60b9      	str	r1, [r7, #8]
 803a096:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t flashWriteResult = GOS_ERROR;
 803a098:	23ae      	movs	r3, #174	; 0xae
 803a09a:	77fb      	strb	r3, [r7, #31]
    u32_t        addressCounter   = 0u;
 803a09c:	2300      	movs	r3, #0
 803a09e:	61bb      	str	r3, [r7, #24]
    u32_t        idx              = 0u;
 803a0a0:	2300      	movs	r3, #0
 803a0a2:	617b      	str	r3, [r7, #20]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 803a0a4:	f7ef fef8 	bl	8029e98 <HAL_FLASH_Unlock>

    // Preset flag.
    flashWriteResult = GOS_SUCCESS;
 803a0a8:	2355      	movs	r3, #85	; 0x55
 803a0aa:	77fb      	strb	r3, [r7, #31]

    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 803a0ac:	2300      	movs	r3, #0
 803a0ae:	61bb      	str	r3, [r7, #24]
 803a0b0:	e01a      	b.n	803a0e8 <drv_flashWrite+0x5c>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 803a0b2:	68fa      	ldr	r2, [r7, #12]
 803a0b4:	69bb      	ldr	r3, [r7, #24]
 803a0b6:	18d1      	adds	r1, r2, r3
            ((u32_t*)pData)[idx++]) == HAL_OK)
 803a0b8:	697b      	ldr	r3, [r7, #20]
 803a0ba:	1c5a      	adds	r2, r3, #1
 803a0bc:	617a      	str	r2, [r7, #20]
 803a0be:	009b      	lsls	r3, r3, #2
 803a0c0:	68ba      	ldr	r2, [r7, #8]
 803a0c2:	4413      	add	r3, r2
 803a0c4:	681b      	ldr	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 803a0c6:	2200      	movs	r2, #0
 803a0c8:	461c      	mov	r4, r3
 803a0ca:	4615      	mov	r5, r2
 803a0cc:	4622      	mov	r2, r4
 803a0ce:	462b      	mov	r3, r5
 803a0d0:	2002      	movs	r0, #2
 803a0d2:	f7ef fe8d 	bl	8029df0 <HAL_FLASH_Program>
 803a0d6:	4603      	mov	r3, r0
 803a0d8:	2b00      	cmp	r3, #0
 803a0da:	d002      	beq.n	803a0e2 <drv_flashWrite+0x56>
        {
            // Programming OK, continue.
        }
        else
        {
            flashWriteResult = GOS_ERROR;
 803a0dc:	23ae      	movs	r3, #174	; 0xae
 803a0de:	77fb      	strb	r3, [r7, #31]
            break;
 803a0e0:	e006      	b.n	803a0f0 <drv_flashWrite+0x64>
    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 803a0e2:	69bb      	ldr	r3, [r7, #24]
 803a0e4:	3304      	adds	r3, #4
 803a0e6:	61bb      	str	r3, [r7, #24]
 803a0e8:	69ba      	ldr	r2, [r7, #24]
 803a0ea:	687b      	ldr	r3, [r7, #4]
 803a0ec:	429a      	cmp	r2, r3
 803a0ee:	d3e0      	bcc.n	803a0b2 <drv_flashWrite+0x26>
        }
    }

    (void_t) HAL_FLASH_Lock();
 803a0f0:	f7ef fef4 	bl	8029edc <HAL_FLASH_Lock>

    return flashWriteResult;
 803a0f4:	7ffb      	ldrb	r3, [r7, #31]
}
 803a0f6:	4618      	mov	r0, r3
 803a0f8:	3720      	adds	r7, #32
 803a0fa:	46bd      	mov	sp, r7
 803a0fc:	bdb0      	pop	{r4, r5, r7, pc}

0803a0fe <drv_flashRead>:

/*
 * Function: drv_flashRead
 */
gos_result_t drv_flashRead (u32_t address, void_t* pData, u32_t size)
{
 803a0fe:	b580      	push	{r7, lr}
 803a100:	b086      	sub	sp, #24
 803a102:	af00      	add	r7, sp, #0
 803a104:	60f8      	str	r0, [r7, #12]
 803a106:	60b9      	str	r1, [r7, #8]
 803a108:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t flashReadResult = GOS_SUCCESS;
 803a10a:	2355      	movs	r3, #85	; 0x55
 803a10c:	74fb      	strb	r3, [r7, #19]
    u32_t        addressCounter  = 0u;
 803a10e:	2300      	movs	r3, #0
 803a110:	617b      	str	r3, [r7, #20]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 803a112:	f7ef fec1 	bl	8029e98 <HAL_FLASH_Unlock>

    for (addressCounter = 0u; addressCounter < size; addressCounter++)
 803a116:	2300      	movs	r3, #0
 803a118:	617b      	str	r3, [r7, #20]
 803a11a:	e00c      	b.n	803a136 <drv_flashRead+0x38>
    {
        ((u8_t*)pData)[addressCounter] = *(__IO u8_t*)(address + addressCounter);
 803a11c:	68fa      	ldr	r2, [r7, #12]
 803a11e:	697b      	ldr	r3, [r7, #20]
 803a120:	4413      	add	r3, r2
 803a122:	4619      	mov	r1, r3
 803a124:	68ba      	ldr	r2, [r7, #8]
 803a126:	697b      	ldr	r3, [r7, #20]
 803a128:	4413      	add	r3, r2
 803a12a:	780a      	ldrb	r2, [r1, #0]
 803a12c:	b2d2      	uxtb	r2, r2
 803a12e:	701a      	strb	r2, [r3, #0]
    for (addressCounter = 0u; addressCounter < size; addressCounter++)
 803a130:	697b      	ldr	r3, [r7, #20]
 803a132:	3301      	adds	r3, #1
 803a134:	617b      	str	r3, [r7, #20]
 803a136:	697a      	ldr	r2, [r7, #20]
 803a138:	687b      	ldr	r3, [r7, #4]
 803a13a:	429a      	cmp	r2, r3
 803a13c:	d3ee      	bcc.n	803a11c <drv_flashRead+0x1e>
    }

    (void_t) HAL_FLASH_Lock();
 803a13e:	f7ef fecd 	bl	8029edc <HAL_FLASH_Lock>

    return flashReadResult;
 803a142:	7cfb      	ldrb	r3, [r7, #19]
}
 803a144:	4618      	mov	r0, r3
 803a146:	3718      	adds	r7, #24
 803a148:	46bd      	mov	sp, r7
 803a14a:	bd80      	pop	{r7, pc}

0803a14c <drv_flashGetSector>:
 * @param   address : Address to get the related sector number for.
 *
 * @return  Sector number.
 */
GOS_STATIC u32_t drv_flashGetSector (u32_t address)
{
 803a14c:	b480      	push	{r7}
 803a14e:	b085      	sub	sp, #20
 803a150:	af00      	add	r7, sp, #0
 803a152:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u32_t sector = 0u;
 803a154:	2300      	movs	r3, #0
 803a156:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    if ((address <= 0x08003FFF) && (address >= 0x08000000))
 803a158:	687b      	ldr	r3, [r7, #4]
 803a15a:	4a2e      	ldr	r2, [pc, #184]	; (803a214 <drv_flashGetSector+0xc8>)
 803a15c:	4293      	cmp	r3, r2
 803a15e:	d206      	bcs.n	803a16e <drv_flashGetSector+0x22>
 803a160:	687b      	ldr	r3, [r7, #4]
 803a162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 803a166:	d302      	bcc.n	803a16e <drv_flashGetSector+0x22>
    {
        sector = FLASH_SECTOR_0;
 803a168:	2300      	movs	r3, #0
 803a16a:	60fb      	str	r3, [r7, #12]
 803a16c:	e04b      	b.n	803a206 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x08007FFF) && (address >= 0x08004000))
 803a16e:	687b      	ldr	r3, [r7, #4]
 803a170:	4a29      	ldr	r2, [pc, #164]	; (803a218 <drv_flashGetSector+0xcc>)
 803a172:	4293      	cmp	r3, r2
 803a174:	d206      	bcs.n	803a184 <drv_flashGetSector+0x38>
 803a176:	687b      	ldr	r3, [r7, #4]
 803a178:	4a26      	ldr	r2, [pc, #152]	; (803a214 <drv_flashGetSector+0xc8>)
 803a17a:	4293      	cmp	r3, r2
 803a17c:	d302      	bcc.n	803a184 <drv_flashGetSector+0x38>
    {
        sector = FLASH_SECTOR_1;
 803a17e:	2301      	movs	r3, #1
 803a180:	60fb      	str	r3, [r7, #12]
 803a182:	e040      	b.n	803a206 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800BFFF) && (address >= 0x08008000))
 803a184:	687b      	ldr	r3, [r7, #4]
 803a186:	4a25      	ldr	r2, [pc, #148]	; (803a21c <drv_flashGetSector+0xd0>)
 803a188:	4293      	cmp	r3, r2
 803a18a:	d206      	bcs.n	803a19a <drv_flashGetSector+0x4e>
 803a18c:	687b      	ldr	r3, [r7, #4]
 803a18e:	4a22      	ldr	r2, [pc, #136]	; (803a218 <drv_flashGetSector+0xcc>)
 803a190:	4293      	cmp	r3, r2
 803a192:	d302      	bcc.n	803a19a <drv_flashGetSector+0x4e>
    {
        sector = FLASH_SECTOR_2;
 803a194:	2302      	movs	r3, #2
 803a196:	60fb      	str	r3, [r7, #12]
 803a198:	e035      	b.n	803a206 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800FFFF) && (address >= 0x0800C000))
 803a19a:	687b      	ldr	r3, [r7, #4]
 803a19c:	4a20      	ldr	r2, [pc, #128]	; (803a220 <drv_flashGetSector+0xd4>)
 803a19e:	4293      	cmp	r3, r2
 803a1a0:	d806      	bhi.n	803a1b0 <drv_flashGetSector+0x64>
 803a1a2:	687b      	ldr	r3, [r7, #4]
 803a1a4:	4a1d      	ldr	r2, [pc, #116]	; (803a21c <drv_flashGetSector+0xd0>)
 803a1a6:	4293      	cmp	r3, r2
 803a1a8:	d302      	bcc.n	803a1b0 <drv_flashGetSector+0x64>
    {
        sector = FLASH_SECTOR_3;
 803a1aa:	2303      	movs	r3, #3
 803a1ac:	60fb      	str	r3, [r7, #12]
 803a1ae:	e02a      	b.n	803a206 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0801FFFF) && (address >= 0x08010000))
 803a1b0:	687b      	ldr	r3, [r7, #4]
 803a1b2:	4a1c      	ldr	r2, [pc, #112]	; (803a224 <drv_flashGetSector+0xd8>)
 803a1b4:	4293      	cmp	r3, r2
 803a1b6:	d806      	bhi.n	803a1c6 <drv_flashGetSector+0x7a>
 803a1b8:	687b      	ldr	r3, [r7, #4]
 803a1ba:	4a19      	ldr	r2, [pc, #100]	; (803a220 <drv_flashGetSector+0xd4>)
 803a1bc:	4293      	cmp	r3, r2
 803a1be:	d902      	bls.n	803a1c6 <drv_flashGetSector+0x7a>
    {
        sector = FLASH_SECTOR_4;
 803a1c0:	2304      	movs	r3, #4
 803a1c2:	60fb      	str	r3, [r7, #12]
 803a1c4:	e01f      	b.n	803a206 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0803FFFF) && (address >= 0x08020000))
 803a1c6:	687b      	ldr	r3, [r7, #4]
 803a1c8:	4a17      	ldr	r2, [pc, #92]	; (803a228 <drv_flashGetSector+0xdc>)
 803a1ca:	4293      	cmp	r3, r2
 803a1cc:	d806      	bhi.n	803a1dc <drv_flashGetSector+0x90>
 803a1ce:	687b      	ldr	r3, [r7, #4]
 803a1d0:	4a14      	ldr	r2, [pc, #80]	; (803a224 <drv_flashGetSector+0xd8>)
 803a1d2:	4293      	cmp	r3, r2
 803a1d4:	d902      	bls.n	803a1dc <drv_flashGetSector+0x90>
    {
        sector = FLASH_SECTOR_5;
 803a1d6:	2305      	movs	r3, #5
 803a1d8:	60fb      	str	r3, [r7, #12]
 803a1da:	e014      	b.n	803a206 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0805FFFF) && (address >= 0x08040000))
 803a1dc:	687b      	ldr	r3, [r7, #4]
 803a1de:	4a13      	ldr	r2, [pc, #76]	; (803a22c <drv_flashGetSector+0xe0>)
 803a1e0:	4293      	cmp	r3, r2
 803a1e2:	d806      	bhi.n	803a1f2 <drv_flashGetSector+0xa6>
 803a1e4:	687b      	ldr	r3, [r7, #4]
 803a1e6:	4a10      	ldr	r2, [pc, #64]	; (803a228 <drv_flashGetSector+0xdc>)
 803a1e8:	4293      	cmp	r3, r2
 803a1ea:	d902      	bls.n	803a1f2 <drv_flashGetSector+0xa6>
    {
        sector = FLASH_SECTOR_6;
 803a1ec:	2306      	movs	r3, #6
 803a1ee:	60fb      	str	r3, [r7, #12]
 803a1f0:	e009      	b.n	803a206 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0807FFFF) && (address >= 0x08060000))
 803a1f2:	687b      	ldr	r3, [r7, #4]
 803a1f4:	4a0e      	ldr	r2, [pc, #56]	; (803a230 <drv_flashGetSector+0xe4>)
 803a1f6:	4293      	cmp	r3, r2
 803a1f8:	d805      	bhi.n	803a206 <drv_flashGetSector+0xba>
 803a1fa:	687b      	ldr	r3, [r7, #4]
 803a1fc:	4a0b      	ldr	r2, [pc, #44]	; (803a22c <drv_flashGetSector+0xe0>)
 803a1fe:	4293      	cmp	r3, r2
 803a200:	d901      	bls.n	803a206 <drv_flashGetSector+0xba>
    {
        sector = FLASH_SECTOR_7;
 803a202:	2307      	movs	r3, #7
 803a204:	60fb      	str	r3, [r7, #12]
    else
    {
        // Wrong address.
    }

    return sector;
 803a206:	68fb      	ldr	r3, [r7, #12]
}
 803a208:	4618      	mov	r0, r3
 803a20a:	3714      	adds	r7, #20
 803a20c:	46bd      	mov	sp, r7
 803a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a212:	4770      	bx	lr
 803a214:	08004000 	.word	0x08004000
 803a218:	08008000 	.word	0x08008000
 803a21c:	0800c000 	.word	0x0800c000
 803a220:	0800ffff 	.word	0x0800ffff
 803a224:	0801ffff 	.word	0x0801ffff
 803a228:	0803ffff 	.word	0x0803ffff
 803a22c:	0805ffff 	.word	0x0805ffff
 803a230:	0807ffff 	.word	0x0807ffff

0803a234 <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 803a234:	b580      	push	{r7, lr}
 803a236:	b084      	sub	sp, #16
 803a238:	af00      	add	r7, sp, #0
 803a23a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 803a23c:	23ae      	movs	r3, #174	; 0xae
 803a23e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 803a240:	687b      	ldr	r3, [r7, #4]
 803a242:	2b00      	cmp	r3, #0
 803a244:	d006      	beq.n	803a254 <gos_driverInit+0x20>
    {
        (void_t) memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 803a246:	221c      	movs	r2, #28
 803a248:	6879      	ldr	r1, [r7, #4]
 803a24a:	4805      	ldr	r0, [pc, #20]	; (803a260 <gos_driverInit+0x2c>)
 803a24c:	f008 fd75 	bl	8042d3a <memcpy>
        driverInitResult = GOS_SUCCESS;
 803a250:	2355      	movs	r3, #85	; 0x55
 803a252:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return driverInitResult;
 803a254:	7bfb      	ldrb	r3, [r7, #15]
}
 803a256:	4618      	mov	r0, r3
 803a258:	3710      	adds	r7, #16
 803a25a:	46bd      	mov	sp, r7
 803a25c:	bd80      	pop	{r7, pc}
 803a25e:	bf00      	nop
 803a260:	20007360 	.word	0x20007360

0803a264 <gos_shellDriverReceiveChar>:

/*
 * Function: gos_shellDriverReceiveChar
 */
gos_result_t gos_shellDriverReceiveChar (char_t* pChar)
{
 803a264:	b580      	push	{r7, lr}
 803a266:	b084      	sub	sp, #16
 803a268:	af00      	add	r7, sp, #0
 803a26a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t shellDriverReceiveResult = GOS_ERROR;
 803a26c:	23ae      	movs	r3, #174	; 0xae
 803a26e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.shellDriverReceiveChar != NULL)
 803a270:	4b07      	ldr	r3, [pc, #28]	; (803a290 <gos_shellDriverReceiveChar+0x2c>)
 803a272:	681b      	ldr	r3, [r3, #0]
 803a274:	2b00      	cmp	r3, #0
 803a276:	d005      	beq.n	803a284 <gos_shellDriverReceiveChar+0x20>
    {
        shellDriverReceiveResult = driverFunctions.shellDriverReceiveChar(pChar);
 803a278:	4b05      	ldr	r3, [pc, #20]	; (803a290 <gos_shellDriverReceiveChar+0x2c>)
 803a27a:	681b      	ldr	r3, [r3, #0]
 803a27c:	6878      	ldr	r0, [r7, #4]
 803a27e:	4798      	blx	r3
 803a280:	4603      	mov	r3, r0
 803a282:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return shellDriverReceiveResult;
 803a284:	7bfb      	ldrb	r3, [r7, #15]
}
 803a286:	4618      	mov	r0, r3
 803a288:	3710      	adds	r7, #16
 803a28a:	46bd      	mov	sp, r7
 803a28c:	bd80      	pop	{r7, pc}
 803a28e:	bf00      	nop
 803a290:	20007360 	.word	0x20007360

0803a294 <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 803a294:	b40f      	push	{r0, r1, r2, r3}
 803a296:	b580      	push	{r7, lr}
 803a298:	b082      	sub	sp, #8
 803a29a:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 803a29c:	23ae      	movs	r3, #174	; 0xae
 803a29e:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 803a2a0:	f107 0314 	add.w	r3, r7, #20
 803a2a4:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 803a2a6:	683a      	ldr	r2, [r7, #0]
 803a2a8:	6939      	ldr	r1, [r7, #16]
 803a2aa:	480a      	ldr	r0, [pc, #40]	; (803a2d4 <gos_shellDriverTransmitString+0x40>)
 803a2ac:	f008 fca2 	bl	8042bf4 <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 803a2b0:	4b09      	ldr	r3, [pc, #36]	; (803a2d8 <gos_shellDriverTransmitString+0x44>)
 803a2b2:	685b      	ldr	r3, [r3, #4]
 803a2b4:	2b00      	cmp	r3, #0
 803a2b6:	d005      	beq.n	803a2c4 <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 803a2b8:	4b07      	ldr	r3, [pc, #28]	; (803a2d8 <gos_shellDriverTransmitString+0x44>)
 803a2ba:	685b      	ldr	r3, [r3, #4]
 803a2bc:	4805      	ldr	r0, [pc, #20]	; (803a2d4 <gos_shellDriverTransmitString+0x40>)
 803a2be:	4798      	blx	r3
 803a2c0:	4603      	mov	r3, r0
 803a2c2:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellDriverTransmitResult;
 803a2c4:	79fb      	ldrb	r3, [r7, #7]
}
 803a2c6:	4618      	mov	r0, r3
 803a2c8:	3708      	adds	r7, #8
 803a2ca:	46bd      	mov	sp, r7
 803a2cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803a2d0:	b004      	add	sp, #16
 803a2d2:	4770      	bx	lr
 803a2d4:	2000737c 	.word	0x2000737c
 803a2d8:	20007360 	.word	0x20007360

0803a2dc <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 803a2dc:	b580      	push	{r7, lr}
 803a2de:	b084      	sub	sp, #16
 803a2e0:	af00      	add	r7, sp, #0
 803a2e2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 803a2e4:	23ae      	movs	r3, #174	; 0xae
 803a2e6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 803a2e8:	4b07      	ldr	r3, [pc, #28]	; (803a308 <gos_traceDriverTransmitString+0x2c>)
 803a2ea:	689b      	ldr	r3, [r3, #8]
 803a2ec:	2b00      	cmp	r3, #0
 803a2ee:	d005      	beq.n	803a2fc <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 803a2f0:	4b05      	ldr	r3, [pc, #20]	; (803a308 <gos_traceDriverTransmitString+0x2c>)
 803a2f2:	689b      	ldr	r3, [r3, #8]
 803a2f4:	6878      	ldr	r0, [r7, #4]
 803a2f6:	4798      	blx	r3
 803a2f8:	4603      	mov	r3, r0
 803a2fa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 803a2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 803a2fe:	4618      	mov	r0, r3
 803a300:	3710      	adds	r7, #16
 803a302:	46bd      	mov	sp, r7
 803a304:	bd80      	pop	{r7, pc}
 803a306:	bf00      	nop
 803a308:	20007360 	.word	0x20007360

0803a30c <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 803a30c:	b580      	push	{r7, lr}
 803a30e:	b084      	sub	sp, #16
 803a310:	af00      	add	r7, sp, #0
 803a312:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 803a314:	23ae      	movs	r3, #174	; 0xae
 803a316:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 803a318:	4b07      	ldr	r3, [pc, #28]	; (803a338 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 803a31a:	68db      	ldr	r3, [r3, #12]
 803a31c:	2b00      	cmp	r3, #0
 803a31e:	d005      	beq.n	803a32c <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 803a320:	4b05      	ldr	r3, [pc, #20]	; (803a338 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 803a322:	68db      	ldr	r3, [r3, #12]
 803a324:	6878      	ldr	r0, [r7, #4]
 803a326:	4798      	blx	r3
 803a328:	4603      	mov	r3, r0
 803a32a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 803a32c:	7bfb      	ldrb	r3, [r7, #15]
}
 803a32e:	4618      	mov	r0, r3
 803a330:	3710      	adds	r7, #16
 803a332:	46bd      	mov	sp, r7
 803a334:	bd80      	pop	{r7, pc}
 803a336:	bf00      	nop
 803a338:	20007360 	.word	0x20007360

0803a33c <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 803a33c:	b480      	push	{r7}
 803a33e:	b083      	sub	sp, #12
 803a340:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 803a342:	23ae      	movs	r3, #174	; 0xae
 803a344:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 803a346:	2301      	movs	r3, #1
 803a348:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803a34a:	2301      	movs	r3, #1
 803a34c:	80fb      	strh	r3, [r7, #6]
 803a34e:	e038      	b.n	803a3c2 <gos_kernelInit+0x86>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 803a350:	88fb      	ldrh	r3, [r7, #6]
 803a352:	4a6b      	ldr	r2, [pc, #428]	; (803a500 <gos_kernelInit+0x1c4>)
 803a354:	216a      	movs	r1, #106	; 0x6a
 803a356:	fb01 f303 	mul.w	r3, r1, r3
 803a35a:	4413      	add	r3, r2
 803a35c:	2200      	movs	r2, #0
 803a35e:	701a      	strb	r2, [r3, #0]
 803a360:	2200      	movs	r2, #0
 803a362:	705a      	strb	r2, [r3, #1]
 803a364:	2200      	movs	r2, #0
 803a366:	709a      	strb	r2, [r3, #2]
 803a368:	2200      	movs	r2, #0
 803a36a:	70da      	strb	r2, [r3, #3]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 803a36c:	88fb      	ldrh	r3, [r7, #6]
 803a36e:	4a64      	ldr	r2, [pc, #400]	; (803a500 <gos_kernelInit+0x1c4>)
 803a370:	216a      	movs	r1, #106	; 0x6a
 803a372:	fb01 f303 	mul.w	r3, r1, r3
 803a376:	4413      	add	r3, r2
 803a378:	3306      	adds	r3, #6
 803a37a:	22ff      	movs	r2, #255	; 0xff
 803a37c:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 803a37e:	88fb      	ldrh	r3, [r7, #6]
 803a380:	4a5f      	ldr	r2, [pc, #380]	; (803a500 <gos_kernelInit+0x1c4>)
 803a382:	216a      	movs	r1, #106	; 0x6a
 803a384:	fb01 f303 	mul.w	r3, r1, r3
 803a388:	4413      	add	r3, r2
 803a38a:	3307      	adds	r3, #7
 803a38c:	22ff      	movs	r2, #255	; 0xff
 803a38e:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 803a390:	88fb      	ldrh	r3, [r7, #6]
 803a392:	4a5b      	ldr	r2, [pc, #364]	; (803a500 <gos_kernelInit+0x1c4>)
 803a394:	216a      	movs	r1, #106	; 0x6a
 803a396:	fb01 f303 	mul.w	r3, r1, r3
 803a39a:	4413      	add	r3, r2
 803a39c:	3304      	adds	r3, #4
 803a39e:	2205      	movs	r2, #5
 803a3a0:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 803a3a2:	88fb      	ldrh	r3, [r7, #6]
 803a3a4:	4a56      	ldr	r2, [pc, #344]	; (803a500 <gos_kernelInit+0x1c4>)
 803a3a6:	216a      	movs	r1, #106	; 0x6a
 803a3a8:	fb01 f303 	mul.w	r3, r1, r3
 803a3ac:	4413      	add	r3, r2
 803a3ae:	3328      	adds	r3, #40	; 0x28
 803a3b0:	2200      	movs	r2, #0
 803a3b2:	709a      	strb	r2, [r3, #2]
 803a3b4:	2200      	movs	r2, #0
 803a3b6:	f042 0201 	orr.w	r2, r2, #1
 803a3ba:	70da      	strb	r2, [r3, #3]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803a3bc:	88fb      	ldrh	r3, [r7, #6]
 803a3be:	3301      	adds	r3, #1
 803a3c0:	80fb      	strh	r3, [r7, #6]
 803a3c2:	88fb      	ldrh	r3, [r7, #6]
 803a3c4:	2b2f      	cmp	r3, #47	; 0x2f
 803a3c6:	d9c3      	bls.n	803a350 <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 803a3c8:	4b4e      	ldr	r3, [pc, #312]	; (803a504 <gos_kernelInit+0x1c8>)
 803a3ca:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 803a3cc:	683b      	ldr	r3, [r7, #0]
 803a3ce:	3b04      	subs	r3, #4
 803a3d0:	603b      	str	r3, [r7, #0]
 803a3d2:	683b      	ldr	r3, [r7, #0]
 803a3d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 803a3d8:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_idleTask; // PC
 803a3da:	683b      	ldr	r3, [r7, #0]
 803a3dc:	3b04      	subs	r3, #4
 803a3de:	603b      	str	r3, [r7, #0]
 803a3e0:	4a49      	ldr	r2, [pc, #292]	; (803a508 <gos_kernelInit+0x1cc>)
 803a3e2:	683b      	ldr	r3, [r7, #0]
 803a3e4:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 803a3e6:	683b      	ldr	r3, [r7, #0]
 803a3e8:	3b04      	subs	r3, #4
 803a3ea:	603b      	str	r3, [r7, #0]
 803a3ec:	683b      	ldr	r3, [r7, #0]
 803a3ee:	f06f 0202 	mvn.w	r2, #2
 803a3f2:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 803a3f4:	683b      	ldr	r3, [r7, #0]
 803a3f6:	3b04      	subs	r3, #4
 803a3f8:	603b      	str	r3, [r7, #0]
 803a3fa:	683b      	ldr	r3, [r7, #0]
 803a3fc:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 803a400:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 803a402:	683b      	ldr	r3, [r7, #0]
 803a404:	3b04      	subs	r3, #4
 803a406:	603b      	str	r3, [r7, #0]
 803a408:	683b      	ldr	r3, [r7, #0]
 803a40a:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 803a40e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 803a410:	683b      	ldr	r3, [r7, #0]
 803a412:	3b04      	subs	r3, #4
 803a414:	603b      	str	r3, [r7, #0]
 803a416:	683b      	ldr	r3, [r7, #0]
 803a418:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 803a41c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 803a41e:	683b      	ldr	r3, [r7, #0]
 803a420:	3b04      	subs	r3, #4
 803a422:	603b      	str	r3, [r7, #0]
 803a424:	683b      	ldr	r3, [r7, #0]
 803a426:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 803a42a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 803a42c:	683b      	ldr	r3, [r7, #0]
 803a42e:	3b04      	subs	r3, #4
 803a430:	603b      	str	r3, [r7, #0]
 803a432:	683b      	ldr	r3, [r7, #0]
 803a434:	2200      	movs	r2, #0
 803a436:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 803a438:	683b      	ldr	r3, [r7, #0]
 803a43a:	3b04      	subs	r3, #4
 803a43c:	603b      	str	r3, [r7, #0]
 803a43e:	683b      	ldr	r3, [r7, #0]
 803a440:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 803a444:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 803a446:	683b      	ldr	r3, [r7, #0]
 803a448:	3b04      	subs	r3, #4
 803a44a:	603b      	str	r3, [r7, #0]
 803a44c:	683b      	ldr	r3, [r7, #0]
 803a44e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 803a452:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 803a454:	683b      	ldr	r3, [r7, #0]
 803a456:	3b04      	subs	r3, #4
 803a458:	603b      	str	r3, [r7, #0]
 803a45a:	683b      	ldr	r3, [r7, #0]
 803a45c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 803a460:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 803a462:	683b      	ldr	r3, [r7, #0]
 803a464:	3b04      	subs	r3, #4
 803a466:	603b      	str	r3, [r7, #0]
 803a468:	683b      	ldr	r3, [r7, #0]
 803a46a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 803a46e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 803a470:	683b      	ldr	r3, [r7, #0]
 803a472:	3b04      	subs	r3, #4
 803a474:	603b      	str	r3, [r7, #0]
 803a476:	683b      	ldr	r3, [r7, #0]
 803a478:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 803a47c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 803a47e:	683b      	ldr	r3, [r7, #0]
 803a480:	3b04      	subs	r3, #4
 803a482:	603b      	str	r3, [r7, #0]
 803a484:	683b      	ldr	r3, [r7, #0]
 803a486:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 803a48a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 803a48c:	683b      	ldr	r3, [r7, #0]
 803a48e:	3b04      	subs	r3, #4
 803a490:	603b      	str	r3, [r7, #0]
 803a492:	683b      	ldr	r3, [r7, #0]
 803a494:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 803a498:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 803a49a:	683b      	ldr	r3, [r7, #0]
 803a49c:	3b04      	subs	r3, #4
 803a49e:	603b      	str	r3, [r7, #0]
 803a4a0:	683b      	ldr	r3, [r7, #0]
 803a4a2:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 803a4a6:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 803a4a8:	683b      	ldr	r3, [r7, #0]
 803a4aa:	4a15      	ldr	r2, [pc, #84]	; (803a500 <gos_kernelInit+0x1c4>)
 803a4ac:	63d3      	str	r3, [r2, #60]	; 0x3c

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 803a4ae:	4b14      	ldr	r3, [pc, #80]	; (803a500 <gos_kernelInit+0x1c4>)
 803a4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 803a4b2:	4a13      	ldr	r2, [pc, #76]	; (803a500 <gos_kernelInit+0x1c4>)
 803a4b4:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 803a4b8:	b292      	uxth	r2, r2
 803a4ba:	1a9b      	subs	r3, r3, r2
 803a4bc:	3340      	adds	r3, #64	; 0x40
 803a4be:	4a10      	ldr	r2, [pc, #64]	; (803a500 <gos_kernelInit+0x1c4>)
 803a4c0:	f8c2 3066 	str.w	r3, [r2, #102]	; 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 803a4c4:	4b11      	ldr	r3, [pc, #68]	; (803a50c <gos_kernelInit+0x1d0>)
 803a4c6:	681b      	ldr	r3, [r3, #0]
 803a4c8:	4a10      	ldr	r2, [pc, #64]	; (803a50c <gos_kernelInit+0x1d0>)
 803a4ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 803a4ce:	6013      	str	r3, [r2, #0]
 803a4d0:	4b0e      	ldr	r3, [pc, #56]	; (803a50c <gos_kernelInit+0x1d0>)
 803a4d2:	681b      	ldr	r3, [r3, #0]
 803a4d4:	4a0d      	ldr	r2, [pc, #52]	; (803a50c <gos_kernelInit+0x1d0>)
 803a4d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 803a4da:	6013      	str	r3, [r2, #0]
 803a4dc:	4b0b      	ldr	r3, [pc, #44]	; (803a50c <gos_kernelInit+0x1d0>)
 803a4de:	681b      	ldr	r3, [r3, #0]
 803a4e0:	4a0a      	ldr	r2, [pc, #40]	; (803a50c <gos_kernelInit+0x1d0>)
 803a4e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 803a4e6:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 803a4e8:	4b09      	ldr	r3, [pc, #36]	; (803a510 <gos_kernelInit+0x1d4>)
 803a4ea:	2200      	movs	r2, #0
 803a4ec:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 803a4ee:	2355      	movs	r3, #85	; 0x55
 803a4f0:	717b      	strb	r3, [r7, #5]

    return initResult;
 803a4f2:	797b      	ldrb	r3, [r7, #5]
}
 803a4f4:	4618      	mov	r0, r3
 803a4f6:	370c      	adds	r7, #12
 803a4f8:	46bd      	mov	sp, r7
 803a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a4fe:	4770      	bx	lr
 803a500:	20001ca8 	.word	0x20001ca8
 803a504:	2001ee00 	.word	0x2001ee00
 803a508:	0803d2b1 	.word	0x0803d2b1
 803a50c:	e000ed24 	.word	0xe000ed24
 803a510:	20007445 	.word	0x20007445

0803a514 <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 803a514:	b580      	push	{r7, lr}
 803a516:	b082      	sub	sp, #8
 803a518:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 803a51a:	23ae      	movs	r3, #174	; 0xae
 803a51c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 803a51e:	4b19      	ldr	r3, [pc, #100]	; (803a584 <gos_kernelStart+0x70>)
 803a520:	2200      	movs	r2, #0
 803a522:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 803a524:	f000 fef4 	bl	803b310 <gos_kernelGetCurrentPsp>
 803a528:	f380 8809 	msr	PSP, r0
 803a52c:	f3ef 8014 	mrs	r0, CONTROL
 803a530:	f040 0002 	orr.w	r0, r0, #2
 803a534:	f380 8814 	msr	CONTROL, r0
 803a538:	f3ef 8014 	mrs	r0, CONTROL
 803a53c:	f040 0001 	orr.w	r0, r0, #1
 803a540:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 803a544:	4b0f      	ldr	r3, [pc, #60]	; (803a584 <gos_kernelStart+0x70>)
 803a546:	681b      	ldr	r3, [r3, #0]
 803a548:	4a0f      	ldr	r2, [pc, #60]	; (803a588 <gos_kernelStart+0x74>)
 803a54a:	216a      	movs	r1, #106	; 0x6a
 803a54c:	fb01 f303 	mul.w	r3, r1, r3
 803a550:	4413      	add	r3, r2
 803a552:	681b      	ldr	r3, [r3, #0]
 803a554:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 803a556:	480d      	ldr	r0, [pc, #52]	; (803a58c <gos_kernelStart+0x78>)
 803a558:	f006 fee6 	bl	8041328 <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 803a55c:	4b0c      	ldr	r3, [pc, #48]	; (803a590 <gos_kernelStart+0x7c>)
 803a55e:	781b      	ldrb	r3, [r3, #0]
 803a560:	2b00      	cmp	r3, #0
 803a562:	d005      	beq.n	803a570 <gos_kernelStart+0x5c>
 803a564:	4b0a      	ldr	r3, [pc, #40]	; (803a590 <gos_kernelStart+0x7c>)
 803a566:	781b      	ldrb	r3, [r3, #0]
 803a568:	3b01      	subs	r3, #1
 803a56a:	b2da      	uxtb	r2, r3
 803a56c:	4b08      	ldr	r3, [pc, #32]	; (803a590 <gos_kernelStart+0x7c>)
 803a56e:	701a      	strb	r2, [r3, #0]

    // Set kernel running flag.
    isKernelRunning = GOS_TRUE;
 803a570:	4b08      	ldr	r3, [pc, #32]	; (803a594 <gos_kernelStart+0x80>)
 803a572:	2236      	movs	r2, #54	; 0x36
 803a574:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 803a576:	683b      	ldr	r3, [r7, #0]
 803a578:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 803a57a:	79fb      	ldrb	r3, [r7, #7]
}
 803a57c:	4618      	mov	r0, r3
 803a57e:	3708      	adds	r7, #8
 803a580:	46bd      	mov	sp, r7
 803a582:	bd80      	pop	{r7, pc}
 803a584:	2000744c 	.word	0x2000744c
 803a588:	20001ca8 	.word	0x20001ca8
 803a58c:	20007454 	.word	0x20007454
 803a590:	20007445 	.word	0x20007445
 803a594:	20001ca6 	.word	0x20001ca6

0803a598 <gos_kernelRegisterSysTickHook>:

/*
 * Function: gos_kernelRegisterSysTickHook
 */
gos_result_t gos_kernelRegisterSysTickHook (gos_sysTickHook_t sysTickHookFunction)
{
 803a598:	b480      	push	{r7}
 803a59a:	b085      	sub	sp, #20
 803a59c:	af00      	add	r7, sp, #0
 803a59e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t hookRegisterResult = GOS_ERROR;
 803a5a0:	23ae      	movs	r3, #174	; 0xae
 803a5a2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 803a5a4:	687b      	ldr	r3, [r7, #4]
 803a5a6:	2b00      	cmp	r3, #0
 803a5a8:	d008      	beq.n	803a5bc <gos_kernelRegisterSysTickHook+0x24>
 803a5aa:	4b08      	ldr	r3, [pc, #32]	; (803a5cc <gos_kernelRegisterSysTickHook+0x34>)
 803a5ac:	681b      	ldr	r3, [r3, #0]
 803a5ae:	2b00      	cmp	r3, #0
 803a5b0:	d104      	bne.n	803a5bc <gos_kernelRegisterSysTickHook+0x24>
    {
        kernelSysTickHookFunction = sysTickHookFunction;
 803a5b2:	4a06      	ldr	r2, [pc, #24]	; (803a5cc <gos_kernelRegisterSysTickHook+0x34>)
 803a5b4:	687b      	ldr	r3, [r7, #4]
 803a5b6:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 803a5b8:	2355      	movs	r3, #85	; 0x55
 803a5ba:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return hookRegisterResult;
 803a5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 803a5be:	4618      	mov	r0, r3
 803a5c0:	3714      	adds	r7, #20
 803a5c2:	46bd      	mov	sp, r7
 803a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a5c8:	4770      	bx	lr
 803a5ca:	bf00      	nop
 803a5cc:	20007468 	.word	0x20007468

0803a5d0 <gos_kernelSubscribeDumpReadySignal>:

/*
 * Function: gos_kernelSubscribeDumpReadySignal
 */
gos_result_t gos_kernelSubscribeDumpReadySignal (gos_signalHandler_t dumpReadySignalHandler)
{
 803a5d0:	b580      	push	{r7, lr}
 803a5d2:	b084      	sub	sp, #16
 803a5d4:	af00      	add	r7, sp, #0
 803a5d6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t subscriptionResult = GOS_ERROR;
 803a5d8:	23ae      	movs	r3, #174	; 0xae
 803a5da:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (dumpReadySignalHandler != NULL)
 803a5dc:	687b      	ldr	r3, [r7, #4]
 803a5de:	2b00      	cmp	r3, #0
 803a5e0:	d008      	beq.n	803a5f4 <gos_kernelSubscribeDumpReadySignal+0x24>
    {
        subscriptionResult = gos_signalSubscribe(kernelDumpReadySignal, dumpReadySignalHandler, GOS_TASK_PRIVILEGE_USER);
 803a5e2:	4b07      	ldr	r3, [pc, #28]	; (803a600 <gos_kernelSubscribeDumpReadySignal+0x30>)
 803a5e4:	781b      	ldrb	r3, [r3, #0]
 803a5e6:	22ff      	movs	r2, #255	; 0xff
 803a5e8:	6879      	ldr	r1, [r7, #4]
 803a5ea:	4618      	mov	r0, r3
 803a5ec:	f005 f870 	bl	803f6d0 <gos_signalSubscribe>
 803a5f0:	4603      	mov	r3, r0
 803a5f2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Signal handler is NULL pointer.
    }

    return subscriptionResult;
 803a5f4:	7bfb      	ldrb	r3, [r7, #15]
}
 803a5f6:	4618      	mov	r0, r3
 803a5f8:	3710      	adds	r7, #16
 803a5fa:	46bd      	mov	sp, r7
 803a5fc:	bd80      	pop	{r7, pc}
 803a5fe:	bf00      	nop
 803a600:	20007444 	.word	0x20007444

0803a604 <SysTick_Handler>:
/*
 * Function: gos_ported_sysTickInterrupt
 */
#include <gos_time.h>
void_t gos_ported_sysTickInterrupt (void_t)
{
 803a604:	b580      	push	{r7, lr}
 803a606:	b082      	sub	sp, #8
 803a608:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    sysTicks++;
 803a60a:	4b15      	ldr	r3, [pc, #84]	; (803a660 <SysTick_Handler+0x5c>)
 803a60c:	681b      	ldr	r3, [r3, #0]
 803a60e:	3301      	adds	r3, #1
 803a610:	4a13      	ldr	r2, [pc, #76]	; (803a660 <SysTick_Handler+0x5c>)
 803a612:	6013      	str	r3, [r2, #0]
    (void_t) gos_timeIncreaseSystemTime(1);
 803a614:	2001      	movs	r0, #1
 803a616:	f006 f91b 	bl	8040850 <gos_timeIncreaseSystemTime>

    // Periodic stack overflow check on currently running task.
    if (isKernelRunning == GOS_TRUE)
 803a61a:	4b12      	ldr	r3, [pc, #72]	; (803a664 <SysTick_Handler+0x60>)
 803a61c:	781b      	ldrb	r3, [r3, #0]
 803a61e:	2b36      	cmp	r3, #54	; 0x36
 803a620:	d113      	bne.n	803a64a <SysTick_Handler+0x46>
    {
        gos_kernelCheckTaskStack();
 803a622:	f000 fde5 	bl	803b1f0 <gos_kernelCheckTaskStack>

#if CFG_SCHED_COOPERATIVE == 0
        if (schedDisableCntr == 0u)
 803a626:	4b10      	ldr	r3, [pc, #64]	; (803a668 <SysTick_Handler+0x64>)
 803a628:	781b      	ldrb	r3, [r3, #0]
 803a62a:	2b00      	cmp	r3, #0
 803a62c:	d10d      	bne.n	803a64a <SysTick_Handler+0x46>
 803a62e:	2316      	movs	r3, #22
 803a630:	71fb      	strb	r3, [r7, #7]
GOS_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 803a632:	79fb      	ldrb	r3, [r7, #7]
 803a634:	2b16      	cmp	r3, #22
 803a636:	d106      	bne.n	803a646 <SysTick_Handler+0x42>
 803a638:	4b0c      	ldr	r3, [pc, #48]	; (803a66c <SysTick_Handler+0x68>)
 803a63a:	681b      	ldr	r3, [r3, #0]
 803a63c:	4a0b      	ldr	r2, [pc, #44]	; (803a66c <SysTick_Handler+0x68>)
 803a63e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803a642:	6013      	str	r3, [r2, #0]
}
 803a644:	e000      	b.n	803a648 <SysTick_Handler+0x44>
    gos_ported_reschedule(privilege);
 803a646:	dfff      	svc	255	; 0xff
}
 803a648:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 803a64a:	4b09      	ldr	r3, [pc, #36]	; (803a670 <SysTick_Handler+0x6c>)
 803a64c:	681b      	ldr	r3, [r3, #0]
 803a64e:	2b00      	cmp	r3, #0
 803a650:	d002      	beq.n	803a658 <SysTick_Handler+0x54>
        kernelSysTickHookFunction();
 803a652:	4b07      	ldr	r3, [pc, #28]	; (803a670 <SysTick_Handler+0x6c>)
 803a654:	681b      	ldr	r3, [r3, #0]
 803a656:	4798      	blx	r3
}
 803a658:	bf00      	nop
 803a65a:	3708      	adds	r7, #8
 803a65c:	46bd      	mov	sp, r7
 803a65e:	bd80      	pop	{r7, pc}
 803a660:	20007450 	.word	0x20007450
 803a664:	20001ca6 	.word	0x20001ca6
 803a668:	20007445 	.word	0x20007445
 803a66c:	e000ed04 	.word	0xe000ed04
 803a670:	20007468 	.word	0x20007468

0803a674 <gos_kernelGetSysTicks>:
{
 803a674:	b480      	push	{r7}
 803a676:	af00      	add	r7, sp, #0
    return sysTicks;
 803a678:	4b03      	ldr	r3, [pc, #12]	; (803a688 <gos_kernelGetSysTicks+0x14>)
 803a67a:	681b      	ldr	r3, [r3, #0]
}
 803a67c:	4618      	mov	r0, r3
 803a67e:	46bd      	mov	sp, r7
 803a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a684:	4770      	bx	lr
 803a686:	bf00      	nop
 803a688:	20007450 	.word	0x20007450

0803a68c <gos_kernelGetCpuUsage>:
{
 803a68c:	b480      	push	{r7}
 803a68e:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 803a690:	4b06      	ldr	r3, [pc, #24]	; (803a6ac <gos_kernelGetCpuUsage+0x20>)
 803a692:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 803a696:	b29b      	uxth	r3, r3
 803a698:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 803a69c:	3310      	adds	r3, #16
 803a69e:	b29b      	uxth	r3, r3
}
 803a6a0:	4618      	mov	r0, r3
 803a6a2:	46bd      	mov	sp, r7
 803a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a6a8:	4770      	bx	lr
 803a6aa:	bf00      	nop
 803a6ac:	20001ca8 	.word	0x20001ca8

0803a6b0 <gos_kernelReset>:
{
 803a6b0:	b480      	push	{r7}
 803a6b2:	b083      	sub	sp, #12
 803a6b4:	af00      	add	r7, sp, #0
    resetRequired = GOS_TRUE;
 803a6b6:	4b0b      	ldr	r3, [pc, #44]	; (803a6e4 <gos_kernelReset+0x34>)
 803a6b8:	2236      	movs	r2, #54	; 0x36
 803a6ba:	701a      	strb	r2, [r3, #0]
 803a6bc:	2309      	movs	r3, #9
 803a6be:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 803a6c0:	79fb      	ldrb	r3, [r7, #7]
 803a6c2:	2b16      	cmp	r3, #22
 803a6c4:	d106      	bne.n	803a6d4 <gos_kernelReset+0x24>
 803a6c6:	4b08      	ldr	r3, [pc, #32]	; (803a6e8 <gos_kernelReset+0x38>)
 803a6c8:	681b      	ldr	r3, [r3, #0]
 803a6ca:	4a07      	ldr	r2, [pc, #28]	; (803a6e8 <gos_kernelReset+0x38>)
 803a6cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803a6d0:	6013      	str	r3, [r2, #0]
}
 803a6d2:	e000      	b.n	803a6d6 <gos_kernelReset+0x26>
    gos_ported_reschedule(privilege);
 803a6d4:	dfff      	svc	255	; 0xff
}
 803a6d6:	bf00      	nop
}
 803a6d8:	bf00      	nop
 803a6da:	370c      	adds	r7, #12
 803a6dc:	46bd      	mov	sp, r7
 803a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a6e2:	4770      	bx	lr
 803a6e4:	20001ca4 	.word	0x20001ca4
 803a6e8:	e000ed04 	.word	0xe000ed04

0803a6ec <gos_kernelDelayUs>:
{
 803a6ec:	b580      	push	{r7, lr}
 803a6ee:	b084      	sub	sp, #16
 803a6f0:	af00      	add	r7, sp, #0
 803a6f2:	4603      	mov	r3, r0
 803a6f4:	80fb      	strh	r3, [r7, #6]
    u16_t tmrInitialValue = 0u;
 803a6f6:	2300      	movs	r3, #0
 803a6f8:	81fb      	strh	r3, [r7, #14]
    u16_t tmrActualValue  = 0u;
 803a6fa:	2300      	movs	r3, #0
 803a6fc:	81bb      	strh	r3, [r7, #12]
    (void_t) gos_timerDriverSysTimerGet(&tmrInitialValue);
 803a6fe:	f107 030e 	add.w	r3, r7, #14
 803a702:	4618      	mov	r0, r3
 803a704:	f006 fe10 	bl	8041328 <gos_timerDriverSysTimerGet>
        (void_t) gos_timerDriverSysTimerGet(&tmrActualValue);
 803a708:	f107 030c 	add.w	r3, r7, #12
 803a70c:	4618      	mov	r0, r3
 803a70e:	f006 fe0b 	bl	8041328 <gos_timerDriverSysTimerGet>
    while ((u16_t)(tmrActualValue - tmrInitialValue) < microseconds);
 803a712:	89ba      	ldrh	r2, [r7, #12]
 803a714:	89fb      	ldrh	r3, [r7, #14]
 803a716:	1ad3      	subs	r3, r2, r3
 803a718:	b29b      	uxth	r3, r3
 803a71a:	88fa      	ldrh	r2, [r7, #6]
 803a71c:	429a      	cmp	r2, r3
 803a71e:	d8f3      	bhi.n	803a708 <gos_kernelDelayUs+0x1c>
}
 803a720:	bf00      	nop
 803a722:	bf00      	nop
 803a724:	3710      	adds	r7, #16
 803a726:	46bd      	mov	sp, r7
 803a728:	bd80      	pop	{r7, pc}
	...

0803a72c <gos_kernelDelayMs>:
{
 803a72c:	b480      	push	{r7}
 803a72e:	b085      	sub	sp, #20
 803a730:	af00      	add	r7, sp, #0
 803a732:	4603      	mov	r3, r0
 803a734:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 803a736:	4b0a      	ldr	r3, [pc, #40]	; (803a760 <gos_kernelDelayMs+0x34>)
 803a738:	681b      	ldr	r3, [r3, #0]
 803a73a:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 803a73c:	bf00      	nop
 803a73e:	4b08      	ldr	r3, [pc, #32]	; (803a760 <gos_kernelDelayMs+0x34>)
 803a740:	681b      	ldr	r3, [r3, #0]
 803a742:	b29a      	uxth	r2, r3
 803a744:	68fb      	ldr	r3, [r7, #12]
 803a746:	b29b      	uxth	r3, r3
 803a748:	1ad3      	subs	r3, r2, r3
 803a74a:	b29b      	uxth	r3, r3
 803a74c:	88fa      	ldrh	r2, [r7, #6]
 803a74e:	429a      	cmp	r2, r3
 803a750:	d8f5      	bhi.n	803a73e <gos_kernelDelayMs+0x12>
}
 803a752:	bf00      	nop
 803a754:	bf00      	nop
 803a756:	3714      	adds	r7, #20
 803a758:	46bd      	mov	sp, r7
 803a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a75e:	4770      	bx	lr
 803a760:	20007450 	.word	0x20007450

0803a764 <gos_kernelCalculateTaskCpuUsages>:
{
 803a764:	b590      	push	{r4, r7, lr}
 803a766:	b087      	sub	sp, #28
 803a768:	af00      	add	r7, sp, #0
 803a76a:	4603      	mov	r3, r0
 803a76c:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 803a76e:	2300      	movs	r3, #0
 803a770:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 803a772:	2300      	movs	r3, #0
 803a774:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 803a776:	2300      	movs	r3, #0
 803a778:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 803a77a:	4ba9      	ldr	r3, [pc, #676]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803a77c:	795b      	ldrb	r3, [r3, #5]
 803a77e:	461a      	mov	r2, r3
 803a780:	4ba8      	ldr	r3, [pc, #672]	; (803aa24 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 803a782:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 803a786:	4ba6      	ldr	r3, [pc, #664]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803a788:	791b      	ldrb	r3, [r3, #4]
 803a78a:	4619      	mov	r1, r3
 803a78c:	4ba6      	ldr	r3, [pc, #664]	; (803aa28 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 803a78e:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 803a792:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 803a794:	4ba2      	ldr	r3, [pc, #648]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803a796:	885b      	ldrh	r3, [r3, #2]
 803a798:	4619      	mov	r1, r3
 803a79a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 803a79e:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 803a7a2:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 803a7a4:	4a9e      	ldr	r2, [pc, #632]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803a7a6:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 803a7a8:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 803a7aa:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803a7ac:	2300      	movs	r3, #0
 803a7ae:	82fb      	strh	r3, [r7, #22]
 803a7b0:	e110      	b.n	803a9d4 <gos_kernelCalculateTaskCpuUsages+0x270>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 803a7b2:	8afb      	ldrh	r3, [r7, #22]
 803a7b4:	4a9d      	ldr	r2, [pc, #628]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a7b6:	216a      	movs	r1, #106	; 0x6a
 803a7b8:	fb01 f303 	mul.w	r3, r1, r3
 803a7bc:	4413      	add	r3, r2
 803a7be:	681b      	ldr	r3, [r3, #0]
 803a7c0:	2b00      	cmp	r3, #0
 803a7c2:	f000 810c 	beq.w	803a9de <gos_kernelCalculateTaskCpuUsages+0x27a>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 803a7c6:	8afb      	ldrh	r3, [r7, #22]
 803a7c8:	4a98      	ldr	r2, [pc, #608]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a7ca:	216a      	movs	r1, #106	; 0x6a
 803a7cc:	fb01 f303 	mul.w	r3, r1, r3
 803a7d0:	4413      	add	r3, r2
 803a7d2:	335a      	adds	r3, #90	; 0x5a
 803a7d4:	781b      	ldrb	r3, [r3, #0]
 803a7d6:	461a      	mov	r2, r3
 803a7d8:	4b92      	ldr	r3, [pc, #584]	; (803aa24 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 803a7da:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 803a7de:	8afb      	ldrh	r3, [r7, #22]
 803a7e0:	4992      	ldr	r1, [pc, #584]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a7e2:	206a      	movs	r0, #106	; 0x6a
 803a7e4:	fb00 f303 	mul.w	r3, r0, r3
 803a7e8:	440b      	add	r3, r1
 803a7ea:	3359      	adds	r3, #89	; 0x59
 803a7ec:	781b      	ldrb	r3, [r3, #0]
 803a7ee:	4619      	mov	r1, r3
 803a7f0:	4b8d      	ldr	r3, [pc, #564]	; (803aa28 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 803a7f2:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 803a7f6:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 803a7f8:	8afb      	ldrh	r3, [r7, #22]
 803a7fa:	498c      	ldr	r1, [pc, #560]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a7fc:	206a      	movs	r0, #106	; 0x6a
 803a7fe:	fb00 f303 	mul.w	r3, r0, r3
 803a802:	440b      	add	r3, r1
 803a804:	3350      	adds	r3, #80	; 0x50
 803a806:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 803a80a:	b29b      	uxth	r3, r3
 803a80c:	4619      	mov	r1, r3
 803a80e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 803a812:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 803a816:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 803a818:	8afa      	ldrh	r2, [r7, #22]
 803a81a:	4984      	ldr	r1, [pc, #528]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a81c:	206a      	movs	r0, #106	; 0x6a
 803a81e:	fb00 f202 	mul.w	r2, r0, r2
 803a822:	440a      	add	r2, r1
 803a824:	3250      	adds	r2, #80	; 0x50
 803a826:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 803a82a:	b292      	uxth	r2, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 803a82c:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 803a82e:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 803a830:	693b      	ldr	r3, [r7, #16]
 803a832:	2b00      	cmp	r3, #0
 803a834:	f000 80cb 	beq.w	803a9ce <gos_kernelCalculateTaskCpuUsages+0x26a>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 803a838:	68fb      	ldr	r3, [r7, #12]
 803a83a:	f242 7210 	movw	r2, #10000	; 0x2710
 803a83e:	fb03 f202 	mul.w	r2, r3, r2
 803a842:	693b      	ldr	r3, [r7, #16]
 803a844:	fbb2 f2f3 	udiv	r2, r2, r3
 803a848:	8afb      	ldrh	r3, [r7, #22]
 803a84a:	b290      	uxth	r0, r2
 803a84c:	4a77      	ldr	r2, [pc, #476]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a84e:	216a      	movs	r1, #106	; 0x6a
 803a850:	fb01 f303 	mul.w	r3, r1, r3
 803a854:	4413      	add	r3, r2
 803a856:	3360      	adds	r3, #96	; 0x60
 803a858:	4602      	mov	r2, r0
 803a85a:	809a      	strh	r2, [r3, #4]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 803a85c:	79fb      	ldrb	r3, [r7, #7]
 803a85e:	2b36      	cmp	r3, #54	; 0x36
 803a860:	d004      	beq.n	803a86c <gos_kernelCalculateTaskCpuUsages+0x108>
 803a862:	4b6f      	ldr	r3, [pc, #444]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803a864:	791b      	ldrb	r3, [r3, #4]
 803a866:	2b00      	cmp	r3, #0
 803a868:	f000 80b1 	beq.w	803a9ce <gos_kernelCalculateTaskCpuUsages+0x26a>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 803a86c:	68fb      	ldr	r3, [r7, #12]
 803a86e:	f242 7210 	movw	r2, #10000	; 0x2710
 803a872:	fb03 f202 	mul.w	r2, r3, r2
 803a876:	693b      	ldr	r3, [r7, #16]
 803a878:	fbb2 f2f3 	udiv	r2, r2, r3
 803a87c:	8afb      	ldrh	r3, [r7, #22]
 803a87e:	b290      	uxth	r0, r2
 803a880:	4a6a      	ldr	r2, [pc, #424]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a882:	216a      	movs	r1, #106	; 0x6a
 803a884:	fb01 f303 	mul.w	r3, r1, r3
 803a888:	4413      	add	r3, r2
 803a88a:	3360      	adds	r3, #96	; 0x60
 803a88c:	4602      	mov	r2, r0
 803a88e:	805a      	strh	r2, [r3, #2]
                        &taskDescriptors[taskIndex].taskRunTime,
 803a890:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMicroseconds(
 803a892:	226a      	movs	r2, #106	; 0x6a
 803a894:	fb02 f303 	mul.w	r3, r2, r3
 803a898:	3348      	adds	r3, #72	; 0x48
 803a89a:	4a64      	ldr	r2, [pc, #400]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a89c:	4413      	add	r3, r2
 803a89e:	1d18      	adds	r0, r3, #4
 803a8a0:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 803a8a2:	4a62      	ldr	r2, [pc, #392]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a8a4:	216a      	movs	r1, #106	; 0x6a
 803a8a6:	fb01 f303 	mul.w	r3, r1, r3
 803a8aa:	4413      	add	r3, r2
 803a8ac:	3350      	adds	r3, #80	; 0x50
 803a8ae:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 803a8b2:	b29b      	uxth	r3, r3
                (void_t) gos_runTimeAddMicroseconds(
 803a8b4:	461a      	mov	r2, r3
 803a8b6:	2100      	movs	r1, #0
 803a8b8:	f005 fe42 	bl	8040540 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 803a8bc:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMilliseconds(
 803a8be:	226a      	movs	r2, #106	; 0x6a
 803a8c0:	fb02 f303 	mul.w	r3, r2, r3
 803a8c4:	3348      	adds	r3, #72	; 0x48
 803a8c6:	4a59      	ldr	r2, [pc, #356]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a8c8:	4413      	add	r3, r2
 803a8ca:	1d18      	adds	r0, r3, #4
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 803a8cc:	8afb      	ldrh	r3, [r7, #22]
 803a8ce:	4a57      	ldr	r2, [pc, #348]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a8d0:	216a      	movs	r1, #106	; 0x6a
 803a8d2:	fb01 f303 	mul.w	r3, r1, r3
 803a8d6:	4413      	add	r3, r2
 803a8d8:	3350      	adds	r3, #80	; 0x50
 803a8da:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 803a8de:	b29a      	uxth	r2, r3
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 803a8e0:	8afb      	ldrh	r3, [r7, #22]
 803a8e2:	4952      	ldr	r1, [pc, #328]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a8e4:	246a      	movs	r4, #106	; 0x6a
 803a8e6:	fb04 f303 	mul.w	r3, r4, r3
 803a8ea:	440b      	add	r3, r1
 803a8ec:	3359      	adds	r3, #89	; 0x59
 803a8ee:	781b      	ldrb	r3, [r3, #0]
                (void_t) gos_runTimeAddMilliseconds(
 803a8f0:	b29b      	uxth	r3, r3
 803a8f2:	4619      	mov	r1, r3
 803a8f4:	0149      	lsls	r1, r1, #5
 803a8f6:	1ac9      	subs	r1, r1, r3
 803a8f8:	0089      	lsls	r1, r1, #2
 803a8fa:	440b      	add	r3, r1
 803a8fc:	00db      	lsls	r3, r3, #3
 803a8fe:	b29b      	uxth	r3, r3
 803a900:	4413      	add	r3, r2
 803a902:	b29b      	uxth	r3, r3
 803a904:	4619      	mov	r1, r3
 803a906:	f005 fefb 	bl	8040700 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 803a90a:	8afb      	ldrh	r3, [r7, #22]
 803a90c:	4a47      	ldr	r2, [pc, #284]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a90e:	216a      	movs	r1, #106	; 0x6a
 803a910:	fb01 f303 	mul.w	r3, r1, r3
 803a914:	4413      	add	r3, r2
 803a916:	3350      	adds	r3, #80	; 0x50
 803a918:	2200      	movs	r2, #0
 803a91a:	731a      	strb	r2, [r3, #12]
 803a91c:	2200      	movs	r2, #0
 803a91e:	735a      	strb	r2, [r3, #13]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 803a920:	8afb      	ldrh	r3, [r7, #22]
 803a922:	4a42      	ldr	r2, [pc, #264]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a924:	216a      	movs	r1, #106	; 0x6a
 803a926:	fb01 f303 	mul.w	r3, r1, r3
 803a92a:	4413      	add	r3, r2
 803a92c:	335b      	adds	r3, #91	; 0x5b
 803a92e:	2200      	movs	r2, #0
 803a930:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 803a932:	8afb      	ldrh	r3, [r7, #22]
 803a934:	4a3d      	ldr	r2, [pc, #244]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a936:	216a      	movs	r1, #106	; 0x6a
 803a938:	fb01 f303 	mul.w	r3, r1, r3
 803a93c:	4413      	add	r3, r2
 803a93e:	335a      	adds	r3, #90	; 0x5a
 803a940:	2200      	movs	r2, #0
 803a942:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 803a944:	8afb      	ldrh	r3, [r7, #22]
 803a946:	4a39      	ldr	r2, [pc, #228]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a948:	216a      	movs	r1, #106	; 0x6a
 803a94a:	fb01 f303 	mul.w	r3, r1, r3
 803a94e:	4413      	add	r3, r2
 803a950:	3359      	adds	r3, #89	; 0x59
 803a952:	2200      	movs	r2, #0
 803a954:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 803a956:	8afb      	ldrh	r3, [r7, #22]
 803a958:	4a34      	ldr	r2, [pc, #208]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a95a:	216a      	movs	r1, #106	; 0x6a
 803a95c:	fb01 f303 	mul.w	r3, r1, r3
 803a960:	4413      	add	r3, r2
 803a962:	3350      	adds	r3, #80	; 0x50
 803a964:	2200      	movs	r2, #0
 803a966:	71da      	strb	r2, [r3, #7]
 803a968:	2200      	movs	r2, #0
 803a96a:	721a      	strb	r2, [r3, #8]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 803a96c:	8afb      	ldrh	r3, [r7, #22]
 803a96e:	4a2f      	ldr	r2, [pc, #188]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a970:	216a      	movs	r1, #106	; 0x6a
 803a972:	fb01 f303 	mul.w	r3, r1, r3
 803a976:	4413      	add	r3, r2
 803a978:	3350      	adds	r3, #80	; 0x50
 803a97a:	2200      	movs	r2, #0
 803a97c:	715a      	strb	r2, [r3, #5]
 803a97e:	2200      	movs	r2, #0
 803a980:	719a      	strb	r2, [r3, #6]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 803a982:	8afb      	ldrh	r3, [r7, #22]
 803a984:	4a29      	ldr	r2, [pc, #164]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a986:	216a      	movs	r1, #106	; 0x6a
 803a988:	fb01 f303 	mul.w	r3, r1, r3
 803a98c:	4413      	add	r3, r2
 803a98e:	3360      	adds	r3, #96	; 0x60
 803a990:	885b      	ldrh	r3, [r3, #2]
 803a992:	b29a      	uxth	r2, r3
 803a994:	8afb      	ldrh	r3, [r7, #22]
 803a996:	4925      	ldr	r1, [pc, #148]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a998:	206a      	movs	r0, #106	; 0x6a
 803a99a:	fb00 f303 	mul.w	r3, r0, r3
 803a99e:	440b      	add	r3, r1
 803a9a0:	3360      	adds	r3, #96	; 0x60
 803a9a2:	881b      	ldrh	r3, [r3, #0]
 803a9a4:	b29b      	uxth	r3, r3
 803a9a6:	429a      	cmp	r2, r3
 803a9a8:	d911      	bls.n	803a9ce <gos_kernelCalculateTaskCpuUsages+0x26a>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 803a9aa:	8afa      	ldrh	r2, [r7, #22]
 803a9ac:	8afb      	ldrh	r3, [r7, #22]
 803a9ae:	491f      	ldr	r1, [pc, #124]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a9b0:	206a      	movs	r0, #106	; 0x6a
 803a9b2:	fb00 f202 	mul.w	r2, r0, r2
 803a9b6:	440a      	add	r2, r1
 803a9b8:	3260      	adds	r2, #96	; 0x60
 803a9ba:	8852      	ldrh	r2, [r2, #2]
 803a9bc:	b290      	uxth	r0, r2
 803a9be:	4a1b      	ldr	r2, [pc, #108]	; (803aa2c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 803a9c0:	216a      	movs	r1, #106	; 0x6a
 803a9c2:	fb01 f303 	mul.w	r3, r1, r3
 803a9c6:	4413      	add	r3, r2
 803a9c8:	3360      	adds	r3, #96	; 0x60
 803a9ca:	4602      	mov	r2, r0
 803a9cc:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803a9ce:	8afb      	ldrh	r3, [r7, #22]
 803a9d0:	3301      	adds	r3, #1
 803a9d2:	82fb      	strh	r3, [r7, #22]
 803a9d4:	8afb      	ldrh	r3, [r7, #22]
 803a9d6:	2b2f      	cmp	r3, #47	; 0x2f
 803a9d8:	f67f aeeb 	bls.w	803a7b2 <gos_kernelCalculateTaskCpuUsages+0x4e>
 803a9dc:	e000      	b.n	803a9e0 <gos_kernelCalculateTaskCpuUsages+0x27c>
            break;
 803a9de:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 803a9e0:	79fb      	ldrb	r3, [r7, #7]
 803a9e2:	2b36      	cmp	r3, #54	; 0x36
 803a9e4:	d003      	beq.n	803a9ee <gos_kernelCalculateTaskCpuUsages+0x28a>
 803a9e6:	4b0e      	ldr	r3, [pc, #56]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803a9e8:	791b      	ldrb	r3, [r3, #4]
 803a9ea:	2b00      	cmp	r3, #0
 803a9ec:	d013      	beq.n	803aa16 <gos_kernelCalculateTaskCpuUsages+0x2b2>
        monitoringTime.days         = 0u;
 803a9ee:	4b0c      	ldr	r3, [pc, #48]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803a9f0:	2200      	movs	r2, #0
 803a9f2:	71da      	strb	r2, [r3, #7]
 803a9f4:	2200      	movs	r2, #0
 803a9f6:	721a      	strb	r2, [r3, #8]
        monitoringTime.hours        = 0u;
 803a9f8:	4b09      	ldr	r3, [pc, #36]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803a9fa:	2200      	movs	r2, #0
 803a9fc:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 803a9fe:	4b08      	ldr	r3, [pc, #32]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803aa00:	2200      	movs	r2, #0
 803aa02:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 803aa04:	4b06      	ldr	r3, [pc, #24]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803aa06:	2200      	movs	r2, #0
 803aa08:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 803aa0a:	4b05      	ldr	r3, [pc, #20]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803aa0c:	2200      	movs	r2, #0
 803aa0e:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 803aa10:	4b03      	ldr	r3, [pc, #12]	; (803aa20 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 803aa12:	2200      	movs	r2, #0
 803aa14:	801a      	strh	r2, [r3, #0]
}
 803aa16:	bf00      	nop
 803aa18:	371c      	adds	r7, #28
 803aa1a:	46bd      	mov	sp, r7
 803aa1c:	bd90      	pop	{r4, r7, pc}
 803aa1e:	bf00      	nop
 803aa20:	20007458 	.word	0x20007458
 803aa24:	03938700 	.word	0x03938700
 803aa28:	000f4240 	.word	0x000f4240
 803aa2c:	20001ca8 	.word	0x20001ca8

0803aa30 <gos_kernelDump>:
{
 803aa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803aa34:	b0a6      	sub	sp, #152	; 0x98
 803aa36:	af14      	add	r7, sp, #80	; 0x50
    u16_t taskIndex = 0u;
 803aa38:	2300      	movs	r3, #0
 803aa3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 803aa3e:	48ae      	ldr	r0, [pc, #696]	; (803acf8 <gos_kernelDump+0x2c8>)
 803aa40:	f7ff fc28 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 803aa44:	48ad      	ldr	r0, [pc, #692]	; (803acfc <gos_kernelDump+0x2cc>)
 803aa46:	f7ff fc25 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 803aa4a:	4bad      	ldr	r3, [pc, #692]	; (803ad00 <gos_kernelDump+0x2d0>)
 803aa4c:	9302      	str	r3, [sp, #8]
 803aa4e:	4bad      	ldr	r3, [pc, #692]	; (803ad04 <gos_kernelDump+0x2d4>)
 803aa50:	9301      	str	r3, [sp, #4]
 803aa52:	4bad      	ldr	r3, [pc, #692]	; (803ad08 <gos_kernelDump+0x2d8>)
 803aa54:	9300      	str	r3, [sp, #0]
 803aa56:	4bad      	ldr	r3, [pc, #692]	; (803ad0c <gos_kernelDump+0x2dc>)
 803aa58:	4aad      	ldr	r2, [pc, #692]	; (803ad10 <gos_kernelDump+0x2e0>)
 803aa5a:	49ae      	ldr	r1, [pc, #696]	; (803ad14 <gos_kernelDump+0x2e4>)
 803aa5c:	48ae      	ldr	r0, [pc, #696]	; (803ad18 <gos_kernelDump+0x2e8>)
 803aa5e:	f7ff fc19 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 803aa62:	48a6      	ldr	r0, [pc, #664]	; (803acfc <gos_kernelDump+0x2cc>)
 803aa64:	f7ff fc16 	bl	803a294 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803aa68:	2300      	movs	r3, #0
 803aa6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 803aa6e:	e1cc      	b.n	803ae0a <gos_kernelDump+0x3da>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 803aa70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803aa74:	4aa9      	ldr	r2, [pc, #676]	; (803ad1c <gos_kernelDump+0x2ec>)
 803aa76:	216a      	movs	r1, #106	; 0x6a
 803aa78:	fb01 f303 	mul.w	r3, r1, r3
 803aa7c:	4413      	add	r3, r2
 803aa7e:	681b      	ldr	r3, [r3, #0]
 803aa80:	2b00      	cmp	r3, #0
 803aa82:	f000 81c8 	beq.w	803ae16 <gos_kernelDump+0x3e6>
                    taskDescriptors[taskIndex].taskId,
 803aa86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803aa8a:	4aa4      	ldr	r2, [pc, #656]	; (803ad1c <gos_kernelDump+0x2ec>)
 803aa8c:	216a      	movs	r1, #106	; 0x6a
 803aa8e:	fb01 f303 	mul.w	r3, r1, r3
 803aa92:	4413      	add	r3, r2
 803aa94:	3328      	adds	r3, #40	; 0x28
 803aa96:	885b      	ldrh	r3, [r3, #2]
 803aa98:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 803aa9a:	4699      	mov	r9, r3
                    taskDescriptors[taskIndex].taskName,
 803aa9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803aaa0:	226a      	movs	r2, #106	; 0x6a
 803aaa2:	fb02 f303 	mul.w	r3, r2, r3
 803aaa6:	3308      	adds	r3, #8
 803aaa8:	4a9c      	ldr	r2, [pc, #624]	; (803ad1c <gos_kernelDump+0x2ec>)
 803aaaa:	4413      	add	r3, r2
 803aaac:	f103 0802 	add.w	r8, r3, #2
                    taskDescriptors[taskIndex].taskPriority,
 803aab0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803aab4:	4a99      	ldr	r2, [pc, #612]	; (803ad1c <gos_kernelDump+0x2ec>)
 803aab6:	216a      	movs	r1, #106	; 0x6a
 803aab8:	fb01 f303 	mul.w	r3, r1, r3
 803aabc:	4413      	add	r3, r2
 803aabe:	3306      	adds	r3, #6
 803aac0:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 803aac2:	469a      	mov	sl, r3
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803aac4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803aac8:	4a94      	ldr	r2, [pc, #592]	; (803ad1c <gos_kernelDump+0x2ec>)
 803aaca:	216a      	movs	r1, #106	; 0x6a
 803aacc:	fb01 f303 	mul.w	r3, r1, r3
 803aad0:	4413      	add	r3, r2
 803aad2:	3308      	adds	r3, #8
 803aad4:	881b      	ldrh	r3, [r3, #0]
 803aad6:	b29b      	uxth	r3, r3
 803aad8:	b21b      	sxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 803aada:	2b00      	cmp	r3, #0
 803aadc:	da02      	bge.n	803aae4 <gos_kernelDump+0xb4>
 803aade:	4b90      	ldr	r3, [pc, #576]	; (803ad20 <gos_kernelDump+0x2f0>)
 803aae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 803aae2:	e001      	b.n	803aae8 <gos_kernelDump+0xb8>
 803aae4:	4b8f      	ldr	r3, [pc, #572]	; (803ad24 <gos_kernelDump+0x2f4>)
 803aae6:	63fb      	str	r3, [r7, #60]	; 0x3c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803aae8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803aaec:	4a8b      	ldr	r2, [pc, #556]	; (803ad1c <gos_kernelDump+0x2ec>)
 803aaee:	216a      	movs	r1, #106	; 0x6a
 803aaf0:	fb01 f303 	mul.w	r3, r1, r3
 803aaf4:	4413      	add	r3, r2
 803aaf6:	3308      	adds	r3, #8
 803aaf8:	881b      	ldrh	r3, [r3, #0]
 803aafa:	b29b      	uxth	r3, r3
 803aafc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
            (void_t) gos_shellDriverTransmitString(
 803ab00:	2b00      	cmp	r3, #0
 803ab02:	d002      	beq.n	803ab0a <gos_kernelDump+0xda>
 803ab04:	4b86      	ldr	r3, [pc, #536]	; (803ad20 <gos_kernelDump+0x2f0>)
 803ab06:	63bb      	str	r3, [r7, #56]	; 0x38
 803ab08:	e001      	b.n	803ab0e <gos_kernelDump+0xde>
 803ab0a:	4b86      	ldr	r3, [pc, #536]	; (803ad24 <gos_kernelDump+0x2f4>)
 803ab0c:	63bb      	str	r3, [r7, #56]	; 0x38
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803ab0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803ab12:	4a82      	ldr	r2, [pc, #520]	; (803ad1c <gos_kernelDump+0x2ec>)
 803ab14:	216a      	movs	r1, #106	; 0x6a
 803ab16:	fb01 f303 	mul.w	r3, r1, r3
 803ab1a:	4413      	add	r3, r2
 803ab1c:	3308      	adds	r3, #8
 803ab1e:	881b      	ldrh	r3, [r3, #0]
 803ab20:	b29b      	uxth	r3, r3
 803ab22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
            (void_t) gos_shellDriverTransmitString(
 803ab26:	2b00      	cmp	r3, #0
 803ab28:	d002      	beq.n	803ab30 <gos_kernelDump+0x100>
 803ab2a:	4b7d      	ldr	r3, [pc, #500]	; (803ad20 <gos_kernelDump+0x2f0>)
 803ab2c:	637b      	str	r3, [r7, #52]	; 0x34
 803ab2e:	e001      	b.n	803ab34 <gos_kernelDump+0x104>
 803ab30:	4b7c      	ldr	r3, [pc, #496]	; (803ad24 <gos_kernelDump+0x2f4>)
 803ab32:	637b      	str	r3, [r7, #52]	; 0x34
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803ab34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803ab38:	4a78      	ldr	r2, [pc, #480]	; (803ad1c <gos_kernelDump+0x2ec>)
 803ab3a:	216a      	movs	r1, #106	; 0x6a
 803ab3c:	fb01 f303 	mul.w	r3, r1, r3
 803ab40:	4413      	add	r3, r2
 803ab42:	3308      	adds	r3, #8
 803ab44:	881b      	ldrh	r3, [r3, #0]
 803ab46:	b29b      	uxth	r3, r3
 803ab48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
            (void_t) gos_shellDriverTransmitString(
 803ab4c:	2b00      	cmp	r3, #0
 803ab4e:	d002      	beq.n	803ab56 <gos_kernelDump+0x126>
 803ab50:	4b73      	ldr	r3, [pc, #460]	; (803ad20 <gos_kernelDump+0x2f0>)
 803ab52:	633b      	str	r3, [r7, #48]	; 0x30
 803ab54:	e001      	b.n	803ab5a <gos_kernelDump+0x12a>
 803ab56:	4b73      	ldr	r3, [pc, #460]	; (803ad24 <gos_kernelDump+0x2f4>)
 803ab58:	633b      	str	r3, [r7, #48]	; 0x30
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803ab5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803ab5e:	4a6f      	ldr	r2, [pc, #444]	; (803ad1c <gos_kernelDump+0x2ec>)
 803ab60:	216a      	movs	r1, #106	; 0x6a
 803ab62:	fb01 f303 	mul.w	r3, r1, r3
 803ab66:	4413      	add	r3, r2
 803ab68:	3308      	adds	r3, #8
 803ab6a:	881b      	ldrh	r3, [r3, #0]
 803ab6c:	b29b      	uxth	r3, r3
 803ab6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
            (void_t) gos_shellDriverTransmitString(
 803ab72:	2b00      	cmp	r3, #0
 803ab74:	d002      	beq.n	803ab7c <gos_kernelDump+0x14c>
 803ab76:	4b6a      	ldr	r3, [pc, #424]	; (803ad20 <gos_kernelDump+0x2f0>)
 803ab78:	62fb      	str	r3, [r7, #44]	; 0x2c
 803ab7a:	e001      	b.n	803ab80 <gos_kernelDump+0x150>
 803ab7c:	4b69      	ldr	r3, [pc, #420]	; (803ad24 <gos_kernelDump+0x2f4>)
 803ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803ab80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803ab84:	4a65      	ldr	r2, [pc, #404]	; (803ad1c <gos_kernelDump+0x2ec>)
 803ab86:	216a      	movs	r1, #106	; 0x6a
 803ab88:	fb01 f303 	mul.w	r3, r1, r3
 803ab8c:	4413      	add	r3, r2
 803ab8e:	3308      	adds	r3, #8
 803ab90:	881b      	ldrh	r3, [r3, #0]
 803ab92:	b29b      	uxth	r3, r3
 803ab94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            (void_t) gos_shellDriverTransmitString(
 803ab98:	2b00      	cmp	r3, #0
 803ab9a:	d002      	beq.n	803aba2 <gos_kernelDump+0x172>
 803ab9c:	4b60      	ldr	r3, [pc, #384]	; (803ad20 <gos_kernelDump+0x2f0>)
 803ab9e:	62bb      	str	r3, [r7, #40]	; 0x28
 803aba0:	e001      	b.n	803aba6 <gos_kernelDump+0x176>
 803aba2:	4b60      	ldr	r3, [pc, #384]	; (803ad24 <gos_kernelDump+0x2f4>)
 803aba4:	62bb      	str	r3, [r7, #40]	; 0x28
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803aba6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803abaa:	4a5c      	ldr	r2, [pc, #368]	; (803ad1c <gos_kernelDump+0x2ec>)
 803abac:	216a      	movs	r1, #106	; 0x6a
 803abae:	fb01 f303 	mul.w	r3, r1, r3
 803abb2:	4413      	add	r3, r2
 803abb4:	3308      	adds	r3, #8
 803abb6:	881b      	ldrh	r3, [r3, #0]
 803abb8:	b29b      	uxth	r3, r3
 803abba:	f403 7300 	and.w	r3, r3, #512	; 0x200
            (void_t) gos_shellDriverTransmitString(
 803abbe:	2b00      	cmp	r3, #0
 803abc0:	d002      	beq.n	803abc8 <gos_kernelDump+0x198>
 803abc2:	4b57      	ldr	r3, [pc, #348]	; (803ad20 <gos_kernelDump+0x2f0>)
 803abc4:	627b      	str	r3, [r7, #36]	; 0x24
 803abc6:	e001      	b.n	803abcc <gos_kernelDump+0x19c>
 803abc8:	4b56      	ldr	r3, [pc, #344]	; (803ad24 <gos_kernelDump+0x2f4>)
 803abca:	627b      	str	r3, [r7, #36]	; 0x24
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803abcc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803abd0:	4a52      	ldr	r2, [pc, #328]	; (803ad1c <gos_kernelDump+0x2ec>)
 803abd2:	216a      	movs	r1, #106	; 0x6a
 803abd4:	fb01 f303 	mul.w	r3, r1, r3
 803abd8:	4413      	add	r3, r2
 803abda:	3308      	adds	r3, #8
 803abdc:	881b      	ldrh	r3, [r3, #0]
 803abde:	b29b      	uxth	r3, r3
 803abe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
            (void_t) gos_shellDriverTransmitString(
 803abe4:	2b00      	cmp	r3, #0
 803abe6:	d002      	beq.n	803abee <gos_kernelDump+0x1be>
 803abe8:	4b4d      	ldr	r3, [pc, #308]	; (803ad20 <gos_kernelDump+0x2f0>)
 803abea:	623b      	str	r3, [r7, #32]
 803abec:	e001      	b.n	803abf2 <gos_kernelDump+0x1c2>
 803abee:	4b4d      	ldr	r3, [pc, #308]	; (803ad24 <gos_kernelDump+0x2f4>)
 803abf0:	623b      	str	r3, [r7, #32]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803abf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803abf6:	4a49      	ldr	r2, [pc, #292]	; (803ad1c <gos_kernelDump+0x2ec>)
 803abf8:	216a      	movs	r1, #106	; 0x6a
 803abfa:	fb01 f303 	mul.w	r3, r1, r3
 803abfe:	4413      	add	r3, r2
 803ac00:	3308      	adds	r3, #8
 803ac02:	881b      	ldrh	r3, [r3, #0]
 803ac04:	b29b      	uxth	r3, r3
 803ac06:	f003 0380 	and.w	r3, r3, #128	; 0x80
            (void_t) gos_shellDriverTransmitString(
 803ac0a:	2b00      	cmp	r3, #0
 803ac0c:	d002      	beq.n	803ac14 <gos_kernelDump+0x1e4>
 803ac0e:	4b44      	ldr	r3, [pc, #272]	; (803ad20 <gos_kernelDump+0x2f0>)
 803ac10:	61fb      	str	r3, [r7, #28]
 803ac12:	e001      	b.n	803ac18 <gos_kernelDump+0x1e8>
 803ac14:	4b43      	ldr	r3, [pc, #268]	; (803ad24 <gos_kernelDump+0x2f4>)
 803ac16:	61fb      	str	r3, [r7, #28]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803ac18:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803ac1c:	493f      	ldr	r1, [pc, #252]	; (803ad1c <gos_kernelDump+0x2ec>)
 803ac1e:	236a      	movs	r3, #106	; 0x6a
 803ac20:	fb02 f303 	mul.w	r3, r2, r3
 803ac24:	440b      	add	r3, r1
 803ac26:	3308      	adds	r3, #8
 803ac28:	881b      	ldrh	r3, [r3, #0]
 803ac2a:	b29b      	uxth	r3, r3
 803ac2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
            (void_t) gos_shellDriverTransmitString(
 803ac30:	2b00      	cmp	r3, #0
 803ac32:	d002      	beq.n	803ac3a <gos_kernelDump+0x20a>
 803ac34:	4b3a      	ldr	r3, [pc, #232]	; (803ad20 <gos_kernelDump+0x2f0>)
 803ac36:	61bb      	str	r3, [r7, #24]
 803ac38:	e001      	b.n	803ac3e <gos_kernelDump+0x20e>
 803ac3a:	4b3a      	ldr	r3, [pc, #232]	; (803ad24 <gos_kernelDump+0x2f4>)
 803ac3c:	61bb      	str	r3, [r7, #24]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803ac3e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803ac42:	4936      	ldr	r1, [pc, #216]	; (803ad1c <gos_kernelDump+0x2ec>)
 803ac44:	236a      	movs	r3, #106	; 0x6a
 803ac46:	fb02 f303 	mul.w	r3, r2, r3
 803ac4a:	440b      	add	r3, r1
 803ac4c:	3308      	adds	r3, #8
 803ac4e:	881b      	ldrh	r3, [r3, #0]
 803ac50:	b29b      	uxth	r3, r3
 803ac52:	f003 0320 	and.w	r3, r3, #32
            (void_t) gos_shellDriverTransmitString(
 803ac56:	2b00      	cmp	r3, #0
 803ac58:	d002      	beq.n	803ac60 <gos_kernelDump+0x230>
 803ac5a:	4b31      	ldr	r3, [pc, #196]	; (803ad20 <gos_kernelDump+0x2f0>)
 803ac5c:	617b      	str	r3, [r7, #20]
 803ac5e:	e001      	b.n	803ac64 <gos_kernelDump+0x234>
 803ac60:	4b30      	ldr	r3, [pc, #192]	; (803ad24 <gos_kernelDump+0x2f4>)
 803ac62:	617b      	str	r3, [r7, #20]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803ac64:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803ac68:	492c      	ldr	r1, [pc, #176]	; (803ad1c <gos_kernelDump+0x2ec>)
 803ac6a:	236a      	movs	r3, #106	; 0x6a
 803ac6c:	fb02 f303 	mul.w	r3, r2, r3
 803ac70:	440b      	add	r3, r1
 803ac72:	3308      	adds	r3, #8
 803ac74:	881b      	ldrh	r3, [r3, #0]
 803ac76:	b29b      	uxth	r3, r3
 803ac78:	f003 0310 	and.w	r3, r3, #16
            (void_t) gos_shellDriverTransmitString(
 803ac7c:	2b00      	cmp	r3, #0
 803ac7e:	d002      	beq.n	803ac86 <gos_kernelDump+0x256>
 803ac80:	4b27      	ldr	r3, [pc, #156]	; (803ad20 <gos_kernelDump+0x2f0>)
 803ac82:	613b      	str	r3, [r7, #16]
 803ac84:	e001      	b.n	803ac8a <gos_kernelDump+0x25a>
 803ac86:	4b27      	ldr	r3, [pc, #156]	; (803ad24 <gos_kernelDump+0x2f4>)
 803ac88:	613b      	str	r3, [r7, #16]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803ac8a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803ac8e:	4923      	ldr	r1, [pc, #140]	; (803ad1c <gos_kernelDump+0x2ec>)
 803ac90:	236a      	movs	r3, #106	; 0x6a
 803ac92:	fb02 f303 	mul.w	r3, r2, r3
 803ac96:	440b      	add	r3, r1
 803ac98:	3308      	adds	r3, #8
 803ac9a:	881b      	ldrh	r3, [r3, #0]
 803ac9c:	b29b      	uxth	r3, r3
 803ac9e:	f003 0308 	and.w	r3, r3, #8
            (void_t) gos_shellDriverTransmitString(
 803aca2:	2b00      	cmp	r3, #0
 803aca4:	d002      	beq.n	803acac <gos_kernelDump+0x27c>
 803aca6:	4b1e      	ldr	r3, [pc, #120]	; (803ad20 <gos_kernelDump+0x2f0>)
 803aca8:	60fb      	str	r3, [r7, #12]
 803acaa:	e001      	b.n	803acb0 <gos_kernelDump+0x280>
 803acac:	4b1d      	ldr	r3, [pc, #116]	; (803ad24 <gos_kernelDump+0x2f4>)
 803acae:	60fb      	str	r3, [r7, #12]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803acb0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803acb4:	4919      	ldr	r1, [pc, #100]	; (803ad1c <gos_kernelDump+0x2ec>)
 803acb6:	236a      	movs	r3, #106	; 0x6a
 803acb8:	fb02 f303 	mul.w	r3, r2, r3
 803acbc:	440b      	add	r3, r1
 803acbe:	3308      	adds	r3, #8
 803acc0:	881b      	ldrh	r3, [r3, #0]
 803acc2:	b29b      	uxth	r3, r3
 803acc4:	f003 0304 	and.w	r3, r3, #4
            (void_t) gos_shellDriverTransmitString(
 803acc8:	2b00      	cmp	r3, #0
 803acca:	d002      	beq.n	803acd2 <gos_kernelDump+0x2a2>
 803accc:	4b14      	ldr	r3, [pc, #80]	; (803ad20 <gos_kernelDump+0x2f0>)
 803acce:	60bb      	str	r3, [r7, #8]
 803acd0:	e001      	b.n	803acd6 <gos_kernelDump+0x2a6>
 803acd2:	4b14      	ldr	r3, [pc, #80]	; (803ad24 <gos_kernelDump+0x2f4>)
 803acd4:	60bb      	str	r3, [r7, #8]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803acd6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803acda:	4910      	ldr	r1, [pc, #64]	; (803ad1c <gos_kernelDump+0x2ec>)
 803acdc:	236a      	movs	r3, #106	; 0x6a
 803acde:	fb02 f303 	mul.w	r3, r2, r3
 803ace2:	440b      	add	r3, r1
 803ace4:	3308      	adds	r3, #8
 803ace6:	881b      	ldrh	r3, [r3, #0]
 803ace8:	b29b      	uxth	r3, r3
 803acea:	f003 0302 	and.w	r3, r3, #2
            (void_t) gos_shellDriverTransmitString(
 803acee:	2b00      	cmp	r3, #0
 803acf0:	d01a      	beq.n	803ad28 <gos_kernelDump+0x2f8>
 803acf2:	4b0b      	ldr	r3, [pc, #44]	; (803ad20 <gos_kernelDump+0x2f0>)
 803acf4:	607b      	str	r3, [r7, #4]
 803acf6:	e019      	b.n	803ad2c <gos_kernelDump+0x2fc>
 803acf8:	08047abc 	.word	0x08047abc
 803acfc:	08047acc 	.word	0x08047acc
 803ad00:	08047b68 	.word	0x08047b68
 803ad04:	08047b70 	.word	0x08047b70
 803ad08:	08047b78 	.word	0x08047b78
 803ad0c:	08047b28 	.word	0x08047b28
 803ad10:	08047b30 	.word	0x08047b30
 803ad14:	08047b38 	.word	0x08047b38
 803ad18:	08047b3c 	.word	0x08047b3c
 803ad1c:	20001ca8 	.word	0x20001ca8
 803ad20:	08047b84 	.word	0x08047b84
 803ad24:	08047b8c 	.word	0x08047b8c
 803ad28:	4b7d      	ldr	r3, [pc, #500]	; (803af20 <gos_kernelDump+0x4f0>)
 803ad2a:	607b      	str	r3, [r7, #4]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 803ad2c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803ad30:	497c      	ldr	r1, [pc, #496]	; (803af24 <gos_kernelDump+0x4f4>)
 803ad32:	236a      	movs	r3, #106	; 0x6a
 803ad34:	fb02 f303 	mul.w	r3, r2, r3
 803ad38:	440b      	add	r3, r1
 803ad3a:	3308      	adds	r3, #8
 803ad3c:	881b      	ldrh	r3, [r3, #0]
 803ad3e:	b29b      	uxth	r3, r3
 803ad40:	f003 0301 	and.w	r3, r3, #1
            (void_t) gos_shellDriverTransmitString(
 803ad44:	2b00      	cmp	r3, #0
 803ad46:	d001      	beq.n	803ad4c <gos_kernelDump+0x31c>
 803ad48:	4d77      	ldr	r5, [pc, #476]	; (803af28 <gos_kernelDump+0x4f8>)
 803ad4a:	e000      	b.n	803ad4e <gos_kernelDump+0x31e>
 803ad4c:	4d74      	ldr	r5, [pc, #464]	; (803af20 <gos_kernelDump+0x4f0>)
                    taskDescriptors[taskIndex].taskCpuUsage / 100,
 803ad4e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803ad52:	4974      	ldr	r1, [pc, #464]	; (803af24 <gos_kernelDump+0x4f4>)
 803ad54:	236a      	movs	r3, #106	; 0x6a
 803ad56:	fb02 f303 	mul.w	r3, r2, r3
 803ad5a:	440b      	add	r3, r1
 803ad5c:	3360      	adds	r3, #96	; 0x60
 803ad5e:	885b      	ldrh	r3, [r3, #2]
 803ad60:	b29a      	uxth	r2, r3
            (void_t) gos_shellDriverTransmitString(
 803ad62:	4b72      	ldr	r3, [pc, #456]	; (803af2c <gos_kernelDump+0x4fc>)
 803ad64:	fba3 2302 	umull	r2, r3, r3, r2
 803ad68:	095b      	lsrs	r3, r3, #5
 803ad6a:	b29b      	uxth	r3, r3
 803ad6c:	461e      	mov	r6, r3
                    taskDescriptors[taskIndex].taskCpuUsage % 100,
 803ad6e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803ad72:	496c      	ldr	r1, [pc, #432]	; (803af24 <gos_kernelDump+0x4f4>)
 803ad74:	236a      	movs	r3, #106	; 0x6a
 803ad76:	fb02 f303 	mul.w	r3, r2, r3
 803ad7a:	440b      	add	r3, r1
 803ad7c:	3360      	adds	r3, #96	; 0x60
 803ad7e:	885b      	ldrh	r3, [r3, #2]
 803ad80:	b299      	uxth	r1, r3
            (void_t) gos_shellDriverTransmitString(
 803ad82:	4b6a      	ldr	r3, [pc, #424]	; (803af2c <gos_kernelDump+0x4fc>)
 803ad84:	fba3 2301 	umull	r2, r3, r3, r1
 803ad88:	095a      	lsrs	r2, r3, #5
 803ad8a:	2364      	movs	r3, #100	; 0x64
 803ad8c:	fb02 f303 	mul.w	r3, r2, r3
 803ad90:	1acb      	subs	r3, r1, r3
 803ad92:	b29b      	uxth	r3, r3
 803ad94:	461c      	mov	r4, r3
 803ad96:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803ad9a:	4962      	ldr	r1, [pc, #392]	; (803af24 <gos_kernelDump+0x4f4>)
 803ad9c:	236a      	movs	r3, #106	; 0x6a
 803ad9e:	fb02 f303 	mul.w	r3, r2, r3
 803ada2:	440b      	add	r3, r1
 803ada4:	3304      	adds	r3, #4
 803ada6:	781b      	ldrb	r3, [r3, #0]
 803ada8:	4618      	mov	r0, r3
 803adaa:	f000 fc43 	bl	803b634 <gos_kernelGetTaskStateString>
 803adae:	4603      	mov	r3, r0
 803adb0:	9312      	str	r3, [sp, #72]	; 0x48
 803adb2:	9411      	str	r4, [sp, #68]	; 0x44
 803adb4:	9610      	str	r6, [sp, #64]	; 0x40
 803adb6:	950f      	str	r5, [sp, #60]	; 0x3c
 803adb8:	687b      	ldr	r3, [r7, #4]
 803adba:	930e      	str	r3, [sp, #56]	; 0x38
 803adbc:	68bb      	ldr	r3, [r7, #8]
 803adbe:	930d      	str	r3, [sp, #52]	; 0x34
 803adc0:	68fb      	ldr	r3, [r7, #12]
 803adc2:	930c      	str	r3, [sp, #48]	; 0x30
 803adc4:	693b      	ldr	r3, [r7, #16]
 803adc6:	930b      	str	r3, [sp, #44]	; 0x2c
 803adc8:	697b      	ldr	r3, [r7, #20]
 803adca:	930a      	str	r3, [sp, #40]	; 0x28
 803adcc:	69bb      	ldr	r3, [r7, #24]
 803adce:	9309      	str	r3, [sp, #36]	; 0x24
 803add0:	69fb      	ldr	r3, [r7, #28]
 803add2:	9308      	str	r3, [sp, #32]
 803add4:	6a3b      	ldr	r3, [r7, #32]
 803add6:	9307      	str	r3, [sp, #28]
 803add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803adda:	9306      	str	r3, [sp, #24]
 803addc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803adde:	9305      	str	r3, [sp, #20]
 803ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803ade2:	9304      	str	r3, [sp, #16]
 803ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803ade6:	9303      	str	r3, [sp, #12]
 803ade8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803adea:	9302      	str	r3, [sp, #8]
 803adec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803adee:	9301      	str	r3, [sp, #4]
 803adf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803adf2:	9300      	str	r3, [sp, #0]
 803adf4:	4653      	mov	r3, sl
 803adf6:	4642      	mov	r2, r8
 803adf8:	4649      	mov	r1, r9
 803adfa:	484d      	ldr	r0, [pc, #308]	; (803af30 <gos_kernelDump+0x500>)
 803adfc:	f7ff fa4a 	bl	803a294 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803ae00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803ae04:	3301      	adds	r3, #1
 803ae06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 803ae0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803ae0e:	2b2f      	cmp	r3, #47	; 0x2f
 803ae10:	f67f ae2e 	bls.w	803aa70 <gos_kernelDump+0x40>
 803ae14:	e000      	b.n	803ae18 <gos_kernelDump+0x3e8>
            break;
 803ae16:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 803ae18:	4846      	ldr	r0, [pc, #280]	; (803af34 <gos_kernelDump+0x504>)
 803ae1a:	f7ff fa3b 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 803ae1e:	4846      	ldr	r0, [pc, #280]	; (803af38 <gos_kernelDump+0x508>)
 803ae20:	f7ff fa38 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 803ae24:	4845      	ldr	r0, [pc, #276]	; (803af3c <gos_kernelDump+0x50c>)
 803ae26:	f7ff fa35 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 803ae2a:	4b45      	ldr	r3, [pc, #276]	; (803af40 <gos_kernelDump+0x510>)
 803ae2c:	4a45      	ldr	r2, [pc, #276]	; (803af44 <gos_kernelDump+0x514>)
 803ae2e:	4946      	ldr	r1, [pc, #280]	; (803af48 <gos_kernelDump+0x518>)
 803ae30:	4846      	ldr	r0, [pc, #280]	; (803af4c <gos_kernelDump+0x51c>)
 803ae32:	f7ff fa2f 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 803ae36:	4841      	ldr	r0, [pc, #260]	; (803af3c <gos_kernelDump+0x50c>)
 803ae38:	f7ff fa2c 	bl	803a294 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803ae3c:	2300      	movs	r3, #0
 803ae3e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 803ae42:	e04c      	b.n	803aede <gos_kernelDump+0x4ae>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 803ae44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803ae48:	4a36      	ldr	r2, [pc, #216]	; (803af24 <gos_kernelDump+0x4f4>)
 803ae4a:	216a      	movs	r1, #106	; 0x6a
 803ae4c:	fb01 f303 	mul.w	r3, r1, r3
 803ae50:	4413      	add	r3, r2
 803ae52:	681b      	ldr	r3, [r3, #0]
 803ae54:	2b00      	cmp	r3, #0
 803ae56:	d047      	beq.n	803aee8 <gos_kernelDump+0x4b8>
                    taskDescriptors[taskIndex].taskId,
 803ae58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803ae5c:	4a31      	ldr	r2, [pc, #196]	; (803af24 <gos_kernelDump+0x4f4>)
 803ae5e:	216a      	movs	r1, #106	; 0x6a
 803ae60:	fb01 f303 	mul.w	r3, r1, r3
 803ae64:	4413      	add	r3, r2
 803ae66:	3328      	adds	r3, #40	; 0x28
 803ae68:	885b      	ldrh	r3, [r3, #2]
 803ae6a:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 803ae6c:	461c      	mov	r4, r3
                    taskDescriptors[taskIndex].taskName,
 803ae6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803ae72:	226a      	movs	r2, #106	; 0x6a
 803ae74:	fb02 f303 	mul.w	r3, r2, r3
 803ae78:	3308      	adds	r3, #8
 803ae7a:	4a2a      	ldr	r2, [pc, #168]	; (803af24 <gos_kernelDump+0x4f4>)
 803ae7c:	4413      	add	r3, r2
 803ae7e:	1c99      	adds	r1, r3, #2
                    taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 803ae80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803ae84:	4a27      	ldr	r2, [pc, #156]	; (803af24 <gos_kernelDump+0x4f4>)
 803ae86:	206a      	movs	r0, #106	; 0x6a
 803ae88:	fb00 f303 	mul.w	r3, r0, r3
 803ae8c:	4413      	add	r3, r2
 803ae8e:	3360      	adds	r3, #96	; 0x60
 803ae90:	881b      	ldrh	r3, [r3, #0]
 803ae92:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 803ae94:	4a25      	ldr	r2, [pc, #148]	; (803af2c <gos_kernelDump+0x4fc>)
 803ae96:	fba2 2303 	umull	r2, r3, r2, r3
 803ae9a:	095b      	lsrs	r3, r3, #5
 803ae9c:	b29b      	uxth	r3, r3
 803ae9e:	461d      	mov	r5, r3
                    taskDescriptors[taskIndex].taskCpuUsageMax % 100
 803aea0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803aea4:	4a1f      	ldr	r2, [pc, #124]	; (803af24 <gos_kernelDump+0x4f4>)
 803aea6:	206a      	movs	r0, #106	; 0x6a
 803aea8:	fb00 f303 	mul.w	r3, r0, r3
 803aeac:	4413      	add	r3, r2
 803aeae:	3360      	adds	r3, #96	; 0x60
 803aeb0:	881b      	ldrh	r3, [r3, #0]
 803aeb2:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 803aeb4:	4a1d      	ldr	r2, [pc, #116]	; (803af2c <gos_kernelDump+0x4fc>)
 803aeb6:	fba2 0203 	umull	r0, r2, r2, r3
 803aeba:	0952      	lsrs	r2, r2, #5
 803aebc:	2064      	movs	r0, #100	; 0x64
 803aebe:	fb00 f202 	mul.w	r2, r0, r2
 803aec2:	1a9b      	subs	r3, r3, r2
 803aec4:	b29b      	uxth	r3, r3
 803aec6:	9300      	str	r3, [sp, #0]
 803aec8:	462b      	mov	r3, r5
 803aeca:	460a      	mov	r2, r1
 803aecc:	4621      	mov	r1, r4
 803aece:	4820      	ldr	r0, [pc, #128]	; (803af50 <gos_kernelDump+0x520>)
 803aed0:	f7ff f9e0 	bl	803a294 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803aed4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803aed8:	3301      	adds	r3, #1
 803aeda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 803aede:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803aee2:	2b2f      	cmp	r3, #47	; 0x2f
 803aee4:	d9ae      	bls.n	803ae44 <gos_kernelDump+0x414>
 803aee6:	e000      	b.n	803aeea <gos_kernelDump+0x4ba>
            break;
 803aee8:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 803aeea:	481a      	ldr	r0, [pc, #104]	; (803af54 <gos_kernelDump+0x524>)
 803aeec:	f7ff f9d2 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 803aef0:	4819      	ldr	r0, [pc, #100]	; (803af58 <gos_kernelDump+0x528>)
 803aef2:	f7ff f9cf 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 803aef6:	4819      	ldr	r0, [pc, #100]	; (803af5c <gos_kernelDump+0x52c>)
 803aef8:	f7ff f9cc 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 803aefc:	4b18      	ldr	r3, [pc, #96]	; (803af60 <gos_kernelDump+0x530>)
 803aefe:	9301      	str	r3, [sp, #4]
 803af00:	4b18      	ldr	r3, [pc, #96]	; (803af64 <gos_kernelDump+0x534>)
 803af02:	9300      	str	r3, [sp, #0]
 803af04:	4b18      	ldr	r3, [pc, #96]	; (803af68 <gos_kernelDump+0x538>)
 803af06:	4a0f      	ldr	r2, [pc, #60]	; (803af44 <gos_kernelDump+0x514>)
 803af08:	490f      	ldr	r1, [pc, #60]	; (803af48 <gos_kernelDump+0x518>)
 803af0a:	4818      	ldr	r0, [pc, #96]	; (803af6c <gos_kernelDump+0x53c>)
 803af0c:	f7ff f9c2 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 803af10:	4812      	ldr	r0, [pc, #72]	; (803af5c <gos_kernelDump+0x52c>)
 803af12:	f7ff f9bf 	bl	803a294 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803af16:	2300      	movs	r3, #0
 803af18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 803af1c:	e0b1      	b.n	803b082 <gos_kernelDump+0x652>
 803af1e:	bf00      	nop
 803af20:	08047b8c 	.word	0x08047b8c
 803af24:	20001ca8 	.word	0x20001ca8
 803af28:	08047b84 	.word	0x08047b84
 803af2c:	51eb851f 	.word	0x51eb851f
 803af30:	08047b94 	.word	0x08047b94
 803af34:	08047be8 	.word	0x08047be8
 803af38:	08047c48 	.word	0x08047c48
 803af3c:	08047c5c 	.word	0x08047c5c
 803af40:	08047c98 	.word	0x08047c98
 803af44:	08047b30 	.word	0x08047b30
 803af48:	08047b38 	.word	0x08047b38
 803af4c:	08047ca4 	.word	0x08047ca4
 803af50:	08047cbc 	.word	0x08047cbc
 803af54:	08047cdc 	.word	0x08047cdc
 803af58:	08047d18 	.word	0x08047d18
 803af5c:	08047d2c 	.word	0x08047d2c
 803af60:	08047dac 	.word	0x08047dac
 803af64:	08047db8 	.word	0x08047db8
 803af68:	08047d80 	.word	0x08047d80
 803af6c:	08047d88 	.word	0x08047d88
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 803af70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803af74:	4a4a      	ldr	r2, [pc, #296]	; (803b0a0 <gos_kernelDump+0x670>)
 803af76:	216a      	movs	r1, #106	; 0x6a
 803af78:	fb01 f303 	mul.w	r3, r1, r3
 803af7c:	4413      	add	r3, r2
 803af7e:	681b      	ldr	r3, [r3, #0]
 803af80:	2b00      	cmp	r3, #0
 803af82:	f000 8084 	beq.w	803b08e <gos_kernelDump+0x65e>
                    taskDescriptors[taskIndex].taskId,
 803af86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803af8a:	4a45      	ldr	r2, [pc, #276]	; (803b0a0 <gos_kernelDump+0x670>)
 803af8c:	216a      	movs	r1, #106	; 0x6a
 803af8e:	fb01 f303 	mul.w	r3, r1, r3
 803af92:	4413      	add	r3, r2
 803af94:	3328      	adds	r3, #40	; 0x28
 803af96:	885b      	ldrh	r3, [r3, #2]
 803af98:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 803af9a:	469c      	mov	ip, r3
                    taskDescriptors[taskIndex].taskName,
 803af9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803afa0:	226a      	movs	r2, #106	; 0x6a
 803afa2:	fb02 f303 	mul.w	r3, r2, r3
 803afa6:	3308      	adds	r3, #8
 803afa8:	4a3d      	ldr	r2, [pc, #244]	; (803b0a0 <gos_kernelDump+0x670>)
 803afaa:	4413      	add	r3, r2
 803afac:	1c9c      	adds	r4, r3, #2
                    taskDescriptors[taskIndex].taskStackSize,
 803afae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803afb2:	4a3b      	ldr	r2, [pc, #236]	; (803b0a0 <gos_kernelDump+0x670>)
 803afb4:	216a      	movs	r1, #106	; 0x6a
 803afb6:	fb01 f303 	mul.w	r3, r1, r3
 803afba:	4413      	add	r3, r2
 803afbc:	3348      	adds	r3, #72	; 0x48
 803afbe:	881b      	ldrh	r3, [r3, #0]
 803afc0:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 803afc2:	469e      	mov	lr, r3
                    taskDescriptors[taskIndex].taskStackSizeMaxUsage,
 803afc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803afc8:	4a35      	ldr	r2, [pc, #212]	; (803b0a0 <gos_kernelDump+0x670>)
 803afca:	216a      	movs	r1, #106	; 0x6a
 803afcc:	fb01 f303 	mul.w	r3, r1, r3
 803afd0:	4413      	add	r3, r2
 803afd2:	3348      	adds	r3, #72	; 0x48
 803afd4:	885b      	ldrh	r3, [r3, #2]
 803afd6:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 803afd8:	461e      	mov	r6, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 803afda:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803afde:	4a30      	ldr	r2, [pc, #192]	; (803b0a0 <gos_kernelDump+0x670>)
 803afe0:	216a      	movs	r1, #106	; 0x6a
 803afe2:	fb01 f303 	mul.w	r3, r1, r3
 803afe6:	4413      	add	r3, r2
 803afe8:	3348      	adds	r3, #72	; 0x48
 803afea:	885b      	ldrh	r3, [r3, #2]
 803afec:	b29b      	uxth	r3, r3
 803afee:	461a      	mov	r2, r3
 803aff0:	f242 7310 	movw	r3, #10000	; 0x2710
 803aff4:	fb02 f303 	mul.w	r3, r2, r3
 803aff8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803affc:	4928      	ldr	r1, [pc, #160]	; (803b0a0 <gos_kernelDump+0x670>)
 803affe:	206a      	movs	r0, #106	; 0x6a
 803b000:	fb00 f202 	mul.w	r2, r0, r2
 803b004:	440a      	add	r2, r1
 803b006:	3248      	adds	r2, #72	; 0x48
 803b008:	8812      	ldrh	r2, [r2, #0]
 803b00a:	b292      	uxth	r2, r2
 803b00c:	fb93 f3f2 	sdiv	r3, r3, r2
            (void_t) gos_shellDriverTransmitString(
 803b010:	4a24      	ldr	r2, [pc, #144]	; (803b0a4 <gos_kernelDump+0x674>)
 803b012:	fb82 1203 	smull	r1, r2, r2, r3
 803b016:	1152      	asrs	r2, r2, #5
 803b018:	17db      	asrs	r3, r3, #31
 803b01a:	1ad1      	subs	r1, r2, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 803b01c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803b020:	4a1f      	ldr	r2, [pc, #124]	; (803b0a0 <gos_kernelDump+0x670>)
 803b022:	206a      	movs	r0, #106	; 0x6a
 803b024:	fb00 f303 	mul.w	r3, r0, r3
 803b028:	4413      	add	r3, r2
 803b02a:	3348      	adds	r3, #72	; 0x48
 803b02c:	885b      	ldrh	r3, [r3, #2]
 803b02e:	b29b      	uxth	r3, r3
 803b030:	461a      	mov	r2, r3
 803b032:	f242 7310 	movw	r3, #10000	; 0x2710
 803b036:	fb02 f303 	mul.w	r3, r2, r3
 803b03a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 803b03e:	4818      	ldr	r0, [pc, #96]	; (803b0a0 <gos_kernelDump+0x670>)
 803b040:	256a      	movs	r5, #106	; 0x6a
 803b042:	fb05 f202 	mul.w	r2, r5, r2
 803b046:	4402      	add	r2, r0
 803b048:	3248      	adds	r2, #72	; 0x48
 803b04a:	8812      	ldrh	r2, [r2, #0]
 803b04c:	b292      	uxth	r2, r2
 803b04e:	fb93 f2f2 	sdiv	r2, r3, r2
            (void_t) gos_shellDriverTransmitString(
 803b052:	4b14      	ldr	r3, [pc, #80]	; (803b0a4 <gos_kernelDump+0x674>)
 803b054:	fb83 0302 	smull	r0, r3, r3, r2
 803b058:	1158      	asrs	r0, r3, #5
 803b05a:	17d3      	asrs	r3, r2, #31
 803b05c:	1ac3      	subs	r3, r0, r3
 803b05e:	2064      	movs	r0, #100	; 0x64
 803b060:	fb00 f303 	mul.w	r3, r0, r3
 803b064:	1ad3      	subs	r3, r2, r3
 803b066:	9302      	str	r3, [sp, #8]
 803b068:	9101      	str	r1, [sp, #4]
 803b06a:	9600      	str	r6, [sp, #0]
 803b06c:	4673      	mov	r3, lr
 803b06e:	4622      	mov	r2, r4
 803b070:	4661      	mov	r1, ip
 803b072:	480d      	ldr	r0, [pc, #52]	; (803b0a8 <gos_kernelDump+0x678>)
 803b074:	f7ff f90e 	bl	803a294 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803b078:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803b07c:	3301      	adds	r3, #1
 803b07e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 803b082:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 803b086:	2b2f      	cmp	r3, #47	; 0x2f
 803b088:	f67f af72 	bls.w	803af70 <gos_kernelDump+0x540>
 803b08c:	e000      	b.n	803b090 <gos_kernelDump+0x660>
            break;
 803b08e:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 803b090:	4806      	ldr	r0, [pc, #24]	; (803b0ac <gos_kernelDump+0x67c>)
 803b092:	f7ff f8ff 	bl	803a294 <gos_shellDriverTransmitString>
}
 803b096:	bf00      	nop
 803b098:	3748      	adds	r7, #72	; 0x48
 803b09a:	46bd      	mov	sp, r7
 803b09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803b0a0:	20001ca8 	.word	0x20001ca8
 803b0a4:	51eb851f 	.word	0x51eb851f
 803b0a8:	08047dc8 	.word	0x08047dc8
 803b0ac:	08047dfc 	.word	0x08047dfc

0803b0b0 <gos_kernelSetMaxCpuLoad>:
{
 803b0b0:	b480      	push	{r7}
 803b0b2:	b085      	sub	sp, #20
 803b0b4:	af00      	add	r7, sp, #0
 803b0b6:	4603      	mov	r3, r0
 803b0b8:	80fb      	strh	r3, [r7, #6]
    gos_result_t setMaxCpuLoadResult = GOS_ERROR;
 803b0ba:	23ae      	movs	r3, #174	; 0xae
 803b0bc:	73fb      	strb	r3, [r7, #15]
    if (maxCpuLoad > 0 && maxCpuLoad <= 10000)
 803b0be:	88fb      	ldrh	r3, [r7, #6]
 803b0c0:	2b00      	cmp	r3, #0
 803b0c2:	d009      	beq.n	803b0d8 <gos_kernelSetMaxCpuLoad+0x28>
 803b0c4:	88fb      	ldrh	r3, [r7, #6]
 803b0c6:	f242 7210 	movw	r2, #10000	; 0x2710
 803b0ca:	4293      	cmp	r3, r2
 803b0cc:	d804      	bhi.n	803b0d8 <gos_kernelSetMaxCpuLoad+0x28>
        cpuUseLimit = maxCpuLoad;
 803b0ce:	4a06      	ldr	r2, [pc, #24]	; (803b0e8 <gos_kernelSetMaxCpuLoad+0x38>)
 803b0d0:	88fb      	ldrh	r3, [r7, #6]
 803b0d2:	8013      	strh	r3, [r2, #0]
        setMaxCpuLoadResult = GOS_SUCCESS;
 803b0d4:	2355      	movs	r3, #85	; 0x55
 803b0d6:	73fb      	strb	r3, [r7, #15]
    return setMaxCpuLoadResult;
 803b0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 803b0da:	4618      	mov	r0, r3
 803b0dc:	3714      	adds	r7, #20
 803b0de:	46bd      	mov	sp, r7
 803b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b0e4:	4770      	bx	lr
 803b0e6:	bf00      	nop
 803b0e8:	20001ca2 	.word	0x20001ca2

0803b0ec <gos_kernelIsCallerIsr>:
{
 803b0ec:	b480      	push	{r7}
 803b0ee:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 803b0f0:	4b05      	ldr	r3, [pc, #20]	; (803b108 <gos_kernelIsCallerIsr+0x1c>)
 803b0f2:	781b      	ldrb	r3, [r3, #0]
 803b0f4:	2b00      	cmp	r3, #0
 803b0f6:	d001      	beq.n	803b0fc <gos_kernelIsCallerIsr+0x10>
 803b0f8:	2336      	movs	r3, #54	; 0x36
 803b0fa:	e000      	b.n	803b0fe <gos_kernelIsCallerIsr+0x12>
 803b0fc:	2349      	movs	r3, #73	; 0x49
}
 803b0fe:	4618      	mov	r0, r3
 803b100:	46bd      	mov	sp, r7
 803b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b106:	4770      	bx	lr
 803b108:	20007446 	.word	0x20007446

0803b10c <SVC_Handler>:
    gos_ported_handleSVC();
 803b10c:	f01e 0f04 	tst.w	lr, #4
 803b110:	bf0c      	ite	eq
 803b112:	f3ef 8008 	mrseq	r0, MSP
 803b116:	f3ef 8009 	mrsne	r0, PSP
 803b11a:	4b06      	ldr	r3, [pc, #24]	; (803b134 <SVC_Handler+0x28>)
 803b11c:	781b      	ldrb	r3, [r3, #0]
 803b11e:	2b36      	cmp	r3, #54	; 0x36
 803b120:	d104      	bne.n	803b12c <SVC_Handler+0x20>
 803b122:	4b04      	ldr	r3, [pc, #16]	; (803b134 <SVC_Handler+0x28>)
 803b124:	2249      	movs	r2, #73	; 0x49
 803b126:	701a      	strb	r2, [r3, #0]
 803b128:	f000 fad8 	bl	803b6dc <gos_kernelProcessorReset>
 803b12c:	f000 b804 	b.w	803b138 <gos_kernelSVC_HandlerMain>
}
 803b130:	bf00      	nop
 803b132:	bf00      	nop
 803b134:	20001ca4 	.word	0x20001ca4

0803b138 <gos_kernelSVC_HandlerMain>:
{
 803b138:	b480      	push	{r7}
 803b13a:	b085      	sub	sp, #20
 803b13c:	af00      	add	r7, sp, #0
 803b13e:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 803b140:	687b      	ldr	r3, [r7, #4]
 803b142:	3318      	adds	r3, #24
 803b144:	681b      	ldr	r3, [r3, #0]
 803b146:	60fb      	str	r3, [r7, #12]
 803b148:	68fb      	ldr	r3, [r7, #12]
 803b14a:	3b02      	subs	r3, #2
 803b14c:	60fb      	str	r3, [r7, #12]
 803b14e:	68fb      	ldr	r3, [r7, #12]
 803b150:	781b      	ldrb	r3, [r3, #0]
 803b152:	72fb      	strb	r3, [r7, #11]
 803b154:	7afb      	ldrb	r3, [r7, #11]
 803b156:	2bff      	cmp	r3, #255	; 0xff
 803b158:	d105      	bne.n	803b166 <gos_kernelSVC_HandlerMain+0x2e>
 803b15a:	4b06      	ldr	r3, [pc, #24]	; (803b174 <gos_kernelSVC_HandlerMain+0x3c>)
 803b15c:	681b      	ldr	r3, [r3, #0]
 803b15e:	4a05      	ldr	r2, [pc, #20]	; (803b174 <gos_kernelSVC_HandlerMain+0x3c>)
 803b160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803b164:	6013      	str	r3, [r2, #0]
}
 803b166:	bf00      	nop
 803b168:	3714      	adds	r7, #20
 803b16a:	46bd      	mov	sp, r7
 803b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b170:	4770      	bx	lr
 803b172:	bf00      	nop
 803b174:	e000ed04 	.word	0xe000ed04

0803b178 <PendSV_Handler>:
    if (privilegedModeSetRequired == GOS_TRUE)
 803b178:	4b10      	ldr	r3, [pc, #64]	; (803b1bc <PendSV_Handler+0x44>)
 803b17a:	781b      	ldrb	r3, [r3, #0]
 803b17c:	2b36      	cmp	r3, #54	; 0x36
 803b17e:	d109      	bne.n	803b194 <PendSV_Handler+0x1c>
        GOS_ASM("MRS R0, CONTROL");
 803b180:	f3ef 8014 	mrs	r0, CONTROL
        GOS_ASM("BIC R0, R0, #1");
 803b184:	f020 0001 	bic.w	r0, r0, #1
        GOS_ASM("MSR CONTROL, R0");
 803b188:	f380 8814 	msr	CONTROL, r0
        privilegedModeSetRequired = GOS_FALSE;
 803b18c:	4b0b      	ldr	r3, [pc, #44]	; (803b1bc <PendSV_Handler+0x44>)
 803b18e:	2249      	movs	r2, #73	; 0x49
 803b190:	701a      	strb	r2, [r3, #0]
}
 803b192:	e011      	b.n	803b1b8 <PendSV_Handler+0x40>
        gos_ported_doContextSwitch();
 803b194:	b500      	push	{lr}
 803b196:	f3ef 8009 	mrs	r0, PSP
 803b19a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 803b19e:	f000 f8cb 	bl	803b338 <gos_kernelSaveCurrentPsp>
 803b1a2:	f000 f8e1 	bl	803b368 <gos_kernelSelectNextTask>
 803b1a6:	f000 f8b3 	bl	803b310 <gos_kernelGetCurrentPsp>
 803b1aa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 803b1ae:	f380 8809 	msr	PSP, r0
 803b1b2:	f85d eb04 	ldr.w	lr, [sp], #4
 803b1b6:	4770      	bx	lr
}
 803b1b8:	bf00      	nop
 803b1ba:	bf00      	nop
 803b1bc:	20001ca5 	.word	0x20001ca5

0803b1c0 <gos_kernelReschedule>:
{
 803b1c0:	b480      	push	{r7}
 803b1c2:	b083      	sub	sp, #12
 803b1c4:	af00      	add	r7, sp, #0
 803b1c6:	4603      	mov	r3, r0
 803b1c8:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 803b1ca:	79fb      	ldrb	r3, [r7, #7]
 803b1cc:	2b16      	cmp	r3, #22
 803b1ce:	d106      	bne.n	803b1de <gos_kernelReschedule+0x1e>
 803b1d0:	4b06      	ldr	r3, [pc, #24]	; (803b1ec <gos_kernelReschedule+0x2c>)
 803b1d2:	681b      	ldr	r3, [r3, #0]
 803b1d4:	4a05      	ldr	r2, [pc, #20]	; (803b1ec <gos_kernelReschedule+0x2c>)
 803b1d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 803b1da:	6013      	str	r3, [r2, #0]
}
 803b1dc:	e000      	b.n	803b1e0 <gos_kernelReschedule+0x20>
    gos_ported_reschedule(privilege);
 803b1de:	dfff      	svc	255	; 0xff
}
 803b1e0:	bf00      	nop
 803b1e2:	370c      	adds	r7, #12
 803b1e4:	46bd      	mov	sp, r7
 803b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b1ea:	4770      	bx	lr
 803b1ec:	e000ed04 	.word	0xe000ed04

0803b1f0 <gos_kernelCheckTaskStack>:
 *          goes to system error.
 *
 * @return  -
 */
GOS_STATIC void_t gos_kernelCheckTaskStack (void_t)
{
 803b1f0:	b580      	push	{r7, lr}
 803b1f2:	b086      	sub	sp, #24
 803b1f4:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    u32_t sp = 0u;
 803b1f6:	2300      	movs	r3, #0
 803b1f8:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 803b1fa:	f3ef 8309 	mrs	r3, PSP
 803b1fe:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 803b200:	687b      	ldr	r3, [r7, #4]
 803b202:	2b00      	cmp	r3, #0
 803b204:	d02b      	beq.n	803b25e <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 803b206:	4b3f      	ldr	r3, [pc, #252]	; (803b304 <gos_kernelCheckTaskStack+0x114>)
 803b208:	681b      	ldr	r3, [r3, #0]
 803b20a:	4a3f      	ldr	r2, [pc, #252]	; (803b308 <gos_kernelCheckTaskStack+0x118>)
 803b20c:	216a      	movs	r1, #106	; 0x6a
 803b20e:	fb01 f303 	mul.w	r3, r1, r3
 803b212:	4413      	add	r3, r2
 803b214:	3360      	adds	r3, #96	; 0x60
 803b216:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 803b21a:	687a      	ldr	r2, [r7, #4]
 803b21c:	429a      	cmp	r2, r3
 803b21e:	d21e      	bcs.n	803b25e <gos_kernelCheckTaskStack+0x6e>
        gos_errorHandler(
                GOS_ERROR_LEVEL_OS_FATAL,
                NULL,
                0,
                "Stack overflow detected in <%s>. \r\nPSP: 0x%x overflown by %d bytes.",
                taskDescriptors[currentTaskIndex].taskName,
 803b220:	4b38      	ldr	r3, [pc, #224]	; (803b304 <gos_kernelCheckTaskStack+0x114>)
 803b222:	681b      	ldr	r3, [r3, #0]
 803b224:	226a      	movs	r2, #106	; 0x6a
 803b226:	fb02 f303 	mul.w	r3, r2, r3
 803b22a:	3308      	adds	r3, #8
 803b22c:	4a36      	ldr	r2, [pc, #216]	; (803b308 <gos_kernelCheckTaskStack+0x118>)
 803b22e:	4413      	add	r3, r2
 803b230:	3302      	adds	r3, #2
                sp,
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 803b232:	4a34      	ldr	r2, [pc, #208]	; (803b304 <gos_kernelCheckTaskStack+0x114>)
 803b234:	6812      	ldr	r2, [r2, #0]
 803b236:	4934      	ldr	r1, [pc, #208]	; (803b308 <gos_kernelCheckTaskStack+0x118>)
 803b238:	206a      	movs	r0, #106	; 0x6a
 803b23a:	fb00 f202 	mul.w	r2, r0, r2
 803b23e:	440a      	add	r2, r1
 803b240:	3260      	adds	r2, #96	; 0x60
 803b242:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 803b246:	687a      	ldr	r2, [r7, #4]
 803b248:	1a8a      	subs	r2, r1, r2
 803b24a:	9202      	str	r2, [sp, #8]
 803b24c:	687a      	ldr	r2, [r7, #4]
 803b24e:	9201      	str	r2, [sp, #4]
 803b250:	9300      	str	r3, [sp, #0]
 803b252:	4b2e      	ldr	r3, [pc, #184]	; (803b30c <gos_kernelCheckTaskStack+0x11c>)
 803b254:	2200      	movs	r2, #0
 803b256:	2100      	movs	r1, #0
 803b258:	2034      	movs	r0, #52	; 0x34
 803b25a:	f002 f99d 	bl	803d598 <gos_errorHandler>
    else
    {
        // No stack overflow was detected.
    }

    if (sp != 0 &&
 803b25e:	687b      	ldr	r3, [r7, #4]
 803b260:	2b00      	cmp	r3, #0
 803b262:	d04a      	beq.n	803b2fa <gos_kernelCheckTaskStack+0x10a>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 803b264:	4b27      	ldr	r3, [pc, #156]	; (803b304 <gos_kernelCheckTaskStack+0x114>)
 803b266:	681b      	ldr	r3, [r3, #0]
 803b268:	4a27      	ldr	r2, [pc, #156]	; (803b308 <gos_kernelCheckTaskStack+0x118>)
 803b26a:	216a      	movs	r1, #106	; 0x6a
 803b26c:	fb01 f303 	mul.w	r3, r1, r3
 803b270:	4413      	add	r3, r2
 803b272:	3360      	adds	r3, #96	; 0x60
 803b274:	f8d3 3006 	ldr.w	r3, [r3, #6]
 803b278:	4a22      	ldr	r2, [pc, #136]	; (803b304 <gos_kernelCheckTaskStack+0x114>)
 803b27a:	6812      	ldr	r2, [r2, #0]
 803b27c:	4922      	ldr	r1, [pc, #136]	; (803b308 <gos_kernelCheckTaskStack+0x118>)
 803b27e:	206a      	movs	r0, #106	; 0x6a
 803b280:	fb00 f202 	mul.w	r2, r0, r2
 803b284:	440a      	add	r2, r1
 803b286:	3248      	adds	r2, #72	; 0x48
 803b288:	8812      	ldrh	r2, [r2, #0]
 803b28a:	b292      	uxth	r2, r2
 803b28c:	441a      	add	r2, r3
 803b28e:	687b      	ldr	r3, [r7, #4]
 803b290:	1ad3      	subs	r3, r2, r3
 803b292:	3b40      	subs	r3, #64	; 0x40
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage)
 803b294:	4a1b      	ldr	r2, [pc, #108]	; (803b304 <gos_kernelCheckTaskStack+0x114>)
 803b296:	6812      	ldr	r2, [r2, #0]
 803b298:	491b      	ldr	r1, [pc, #108]	; (803b308 <gos_kernelCheckTaskStack+0x118>)
 803b29a:	206a      	movs	r0, #106	; 0x6a
 803b29c:	fb00 f202 	mul.w	r2, r0, r2
 803b2a0:	440a      	add	r2, r1
 803b2a2:	3248      	adds	r2, #72	; 0x48
 803b2a4:	8852      	ldrh	r2, [r2, #2]
 803b2a6:	b292      	uxth	r2, r2
    if (sp != 0 &&
 803b2a8:	4293      	cmp	r3, r2
 803b2aa:	d926      	bls.n	803b2fa <gos_kernelCheckTaskStack+0x10a>
    {
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 803b2ac:	4b15      	ldr	r3, [pc, #84]	; (803b304 <gos_kernelCheckTaskStack+0x114>)
 803b2ae:	681b      	ldr	r3, [r3, #0]
 803b2b0:	4a15      	ldr	r2, [pc, #84]	; (803b308 <gos_kernelCheckTaskStack+0x118>)
 803b2b2:	216a      	movs	r1, #106	; 0x6a
 803b2b4:	fb01 f303 	mul.w	r3, r1, r3
 803b2b8:	4413      	add	r3, r2
 803b2ba:	3360      	adds	r3, #96	; 0x60
 803b2bc:	f8d3 3006 	ldr.w	r3, [r3, #6]
 803b2c0:	b29a      	uxth	r2, r3
 803b2c2:	4b10      	ldr	r3, [pc, #64]	; (803b304 <gos_kernelCheckTaskStack+0x114>)
 803b2c4:	681b      	ldr	r3, [r3, #0]
 803b2c6:	4910      	ldr	r1, [pc, #64]	; (803b308 <gos_kernelCheckTaskStack+0x118>)
 803b2c8:	206a      	movs	r0, #106	; 0x6a
 803b2ca:	fb00 f303 	mul.w	r3, r0, r3
 803b2ce:	440b      	add	r3, r1
 803b2d0:	3348      	adds	r3, #72	; 0x48
 803b2d2:	881b      	ldrh	r3, [r3, #0]
 803b2d4:	b29b      	uxth	r3, r3
 803b2d6:	4413      	add	r3, r2
 803b2d8:	b29a      	uxth	r2, r3
 803b2da:	687b      	ldr	r3, [r7, #4]
 803b2dc:	b29b      	uxth	r3, r3
 803b2de:	1ad3      	subs	r3, r2, r3
 803b2e0:	b29a      	uxth	r2, r3
 803b2e2:	4b08      	ldr	r3, [pc, #32]	; (803b304 <gos_kernelCheckTaskStack+0x114>)
 803b2e4:	681b      	ldr	r3, [r3, #0]
 803b2e6:	3a20      	subs	r2, #32
 803b2e8:	b290      	uxth	r0, r2
 803b2ea:	4a07      	ldr	r2, [pc, #28]	; (803b308 <gos_kernelCheckTaskStack+0x118>)
 803b2ec:	216a      	movs	r1, #106	; 0x6a
 803b2ee:	fb01 f303 	mul.w	r3, r1, r3
 803b2f2:	4413      	add	r3, r2
 803b2f4:	3348      	adds	r3, #72	; 0x48
 803b2f6:	4602      	mov	r2, r0
 803b2f8:	805a      	strh	r2, [r3, #2]
    }
    else
    {
        // Max. value has not been exceeded.
    }
}
 803b2fa:	bf00      	nop
 803b2fc:	3708      	adds	r7, #8
 803b2fe:	46bd      	mov	sp, r7
 803b300:	bd80      	pop	{r7, pc}
 803b302:	bf00      	nop
 803b304:	2000744c 	.word	0x2000744c
 803b308:	20001ca8 	.word	0x20001ca8
 803b30c:	08047e50 	.word	0x08047e50

0803b310 <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 803b310:	b480      	push	{r7}
 803b312:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 803b314:	4b06      	ldr	r3, [pc, #24]	; (803b330 <gos_kernelGetCurrentPsp+0x20>)
 803b316:	681b      	ldr	r3, [r3, #0]
 803b318:	4a06      	ldr	r2, [pc, #24]	; (803b334 <gos_kernelGetCurrentPsp+0x24>)
 803b31a:	216a      	movs	r1, #106	; 0x6a
 803b31c:	fb01 f303 	mul.w	r3, r1, r3
 803b320:	4413      	add	r3, r2
 803b322:	3338      	adds	r3, #56	; 0x38
 803b324:	685b      	ldr	r3, [r3, #4]
}
 803b326:	4618      	mov	r0, r3
 803b328:	46bd      	mov	sp, r7
 803b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b32e:	4770      	bx	lr
 803b330:	2000744c 	.word	0x2000744c
 803b334:	20001ca8 	.word	0x20001ca8

0803b338 <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 803b338:	b480      	push	{r7}
 803b33a:	b083      	sub	sp, #12
 803b33c:	af00      	add	r7, sp, #0
 803b33e:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 803b340:	4b07      	ldr	r3, [pc, #28]	; (803b360 <gos_kernelSaveCurrentPsp+0x28>)
 803b342:	681b      	ldr	r3, [r3, #0]
 803b344:	4a07      	ldr	r2, [pc, #28]	; (803b364 <gos_kernelSaveCurrentPsp+0x2c>)
 803b346:	216a      	movs	r1, #106	; 0x6a
 803b348:	fb01 f303 	mul.w	r3, r1, r3
 803b34c:	4413      	add	r3, r2
 803b34e:	3338      	adds	r3, #56	; 0x38
 803b350:	687a      	ldr	r2, [r7, #4]
 803b352:	605a      	str	r2, [r3, #4]
}
 803b354:	bf00      	nop
 803b356:	370c      	adds	r7, #12
 803b358:	46bd      	mov	sp, r7
 803b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b35e:	4770      	bx	lr
 803b360:	2000744c 	.word	0x2000744c
 803b364:	20001ca8 	.word	0x20001ca8

0803b368 <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 803b368:	b590      	push	{r4, r7, lr}
 803b36a:	b085      	sub	sp, #20
 803b36c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 803b36e:	2300      	movs	r3, #0
 803b370:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 803b372:	23ff      	movs	r3, #255	; 0xff
 803b374:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 803b376:	2300      	movs	r3, #0
 803b378:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 803b37a:	2300      	movs	r3, #0
 803b37c:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 803b37e:	2300      	movs	r3, #0
 803b380:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 803b382:	4ba3      	ldr	r3, [pc, #652]	; (803b610 <gos_kernelSelectNextTask+0x2a8>)
 803b384:	681a      	ldr	r2, [r3, #0]
 803b386:	4ba3      	ldr	r3, [pc, #652]	; (803b614 <gos_kernelSelectNextTask+0x2ac>)
 803b388:	681b      	ldr	r3, [r3, #0]
 803b38a:	1ad3      	subs	r3, r2, r3
 803b38c:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 803b38e:	f7ff ff2f 	bl	803b1f0 <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 803b392:	4ba1      	ldr	r3, [pc, #644]	; (803b618 <gos_kernelSelectNextTask+0x2b0>)
 803b394:	781b      	ldrb	r3, [r3, #0]
 803b396:	2b00      	cmp	r3, #0
 803b398:	f040 8136 	bne.w	803b608 <gos_kernelSelectNextTask+0x2a0>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803b39c:	2300      	movs	r3, #0
 803b39e:	81fb      	strh	r3, [r7, #14]
 803b3a0:	e0d0      	b.n	803b544 <gos_kernelSelectNextTask+0x1dc>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 803b3a2:	89fb      	ldrh	r3, [r7, #14]
 803b3a4:	4a9d      	ldr	r2, [pc, #628]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b3a6:	216a      	movs	r1, #106	; 0x6a
 803b3a8:	fb01 f303 	mul.w	r3, r1, r3
 803b3ac:	4413      	add	r3, r2
 803b3ae:	3304      	adds	r3, #4
 803b3b0:	781b      	ldrb	r3, [r3, #0]
 803b3b2:	2b16      	cmp	r3, #22
 803b3b4:	d12c      	bne.n	803b410 <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskSleepTicks)
 803b3b6:	89fb      	ldrh	r3, [r7, #14]
 803b3b8:	4a98      	ldr	r2, [pc, #608]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b3ba:	216a      	movs	r1, #106	; 0x6a
 803b3bc:	fb01 f303 	mul.w	r3, r1, r3
 803b3c0:	4413      	add	r3, r2
 803b3c2:	3330      	adds	r3, #48	; 0x30
 803b3c4:	6819      	ldr	r1, [r3, #0]
 803b3c6:	89fb      	ldrh	r3, [r7, #14]
 803b3c8:	687a      	ldr	r2, [r7, #4]
 803b3ca:	4411      	add	r1, r2
 803b3cc:	4893      	ldr	r0, [pc, #588]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b3ce:	226a      	movs	r2, #106	; 0x6a
 803b3d0:	fb03 f202 	mul.w	r2, r3, r2
 803b3d4:	4402      	add	r2, r0
 803b3d6:	3230      	adds	r2, #48	; 0x30
 803b3d8:	6011      	str	r1, [r2, #0]
 803b3da:	4a90      	ldr	r2, [pc, #576]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b3dc:	216a      	movs	r1, #106	; 0x6a
 803b3de:	fb01 f303 	mul.w	r3, r1, r3
 803b3e2:	4413      	add	r3, r2
 803b3e4:	3330      	adds	r3, #48	; 0x30
 803b3e6:	681a      	ldr	r2, [r3, #0]
 803b3e8:	89fb      	ldrh	r3, [r7, #14]
 803b3ea:	498c      	ldr	r1, [pc, #560]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b3ec:	206a      	movs	r0, #106	; 0x6a
 803b3ee:	fb00 f303 	mul.w	r3, r0, r3
 803b3f2:	440b      	add	r3, r1
 803b3f4:	3328      	adds	r3, #40	; 0x28
 803b3f6:	685b      	ldr	r3, [r3, #4]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 803b3f8:	429a      	cmp	r2, r3
 803b3fa:	d309      	bcc.n	803b410 <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 803b3fc:	89fb      	ldrh	r3, [r7, #14]
 803b3fe:	4a87      	ldr	r2, [pc, #540]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b400:	216a      	movs	r1, #106	; 0x6a
 803b402:	fb01 f303 	mul.w	r3, r1, r3
 803b406:	4413      	add	r3, r2
 803b408:	3304      	adds	r3, #4
 803b40a:	220a      	movs	r2, #10
 803b40c:	701a      	strb	r2, [r3, #0]
 803b40e:	e040      	b.n	803b492 <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 803b410:	89fb      	ldrh	r3, [r7, #14]
 803b412:	4a82      	ldr	r2, [pc, #520]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b414:	216a      	movs	r1, #106	; 0x6a
 803b416:	fb01 f303 	mul.w	r3, r1, r3
 803b41a:	4413      	add	r3, r2
 803b41c:	3304      	adds	r3, #4
 803b41e:	781b      	ldrb	r3, [r3, #0]
 803b420:	2b19      	cmp	r3, #25
 803b422:	d136      	bne.n	803b492 <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 803b424:	89fb      	ldrh	r3, [r7, #14]
 803b426:	4a7d      	ldr	r2, [pc, #500]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b428:	216a      	movs	r1, #106	; 0x6a
 803b42a:	fb01 f303 	mul.w	r3, r1, r3
 803b42e:	4413      	add	r3, r2
 803b430:	3330      	adds	r3, #48	; 0x30
 803b432:	685b      	ldr	r3, [r3, #4]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 803b434:	f1b3 3fff 	cmp.w	r3, #4294967295
 803b438:	d02b      	beq.n	803b492 <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskBlockTicks))
 803b43a:	89fb      	ldrh	r3, [r7, #14]
 803b43c:	4a77      	ldr	r2, [pc, #476]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b43e:	216a      	movs	r1, #106	; 0x6a
 803b440:	fb01 f303 	mul.w	r3, r1, r3
 803b444:	4413      	add	r3, r2
 803b446:	3338      	adds	r3, #56	; 0x38
 803b448:	6819      	ldr	r1, [r3, #0]
 803b44a:	89fb      	ldrh	r3, [r7, #14]
 803b44c:	687a      	ldr	r2, [r7, #4]
 803b44e:	4411      	add	r1, r2
 803b450:	4872      	ldr	r0, [pc, #456]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b452:	226a      	movs	r2, #106	; 0x6a
 803b454:	fb03 f202 	mul.w	r2, r3, r2
 803b458:	4402      	add	r2, r0
 803b45a:	3238      	adds	r2, #56	; 0x38
 803b45c:	6011      	str	r1, [r2, #0]
 803b45e:	4a6f      	ldr	r2, [pc, #444]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b460:	216a      	movs	r1, #106	; 0x6a
 803b462:	fb01 f303 	mul.w	r3, r1, r3
 803b466:	4413      	add	r3, r2
 803b468:	3338      	adds	r3, #56	; 0x38
 803b46a:	681a      	ldr	r2, [r3, #0]
 803b46c:	89fb      	ldrh	r3, [r7, #14]
 803b46e:	496b      	ldr	r1, [pc, #428]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b470:	206a      	movs	r0, #106	; 0x6a
 803b472:	fb00 f303 	mul.w	r3, r0, r3
 803b476:	440b      	add	r3, r1
 803b478:	3330      	adds	r3, #48	; 0x30
 803b47a:	685b      	ldr	r3, [r3, #4]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 803b47c:	429a      	cmp	r2, r3
 803b47e:	d308      	bcc.n	803b492 <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 803b480:	89fb      	ldrh	r3, [r7, #14]
 803b482:	4a66      	ldr	r2, [pc, #408]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b484:	216a      	movs	r1, #106	; 0x6a
 803b486:	fb01 f303 	mul.w	r3, r1, r3
 803b48a:	4413      	add	r3, r2
 803b48c:	3304      	adds	r3, #4
 803b48e:	220a      	movs	r2, #10
 803b490:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 803b492:	89fa      	ldrh	r2, [r7, #14]
 803b494:	4b62      	ldr	r3, [pc, #392]	; (803b620 <gos_kernelSelectNextTask+0x2b8>)
 803b496:	681b      	ldr	r3, [r3, #0]
 803b498:	429a      	cmp	r2, r3
 803b49a:	d047      	beq.n	803b52c <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 803b49c:	89fb      	ldrh	r3, [r7, #14]
 803b49e:	4a5f      	ldr	r2, [pc, #380]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b4a0:	216a      	movs	r1, #106	; 0x6a
 803b4a2:	fb01 f303 	mul.w	r3, r1, r3
 803b4a6:	4413      	add	r3, r2
 803b4a8:	3304      	adds	r3, #4
 803b4aa:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 803b4ac:	2b0a      	cmp	r3, #10
 803b4ae:	d13d      	bne.n	803b52c <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 803b4b0:	89fb      	ldrh	r3, [r7, #14]
 803b4b2:	4a5a      	ldr	r2, [pc, #360]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b4b4:	216a      	movs	r1, #106	; 0x6a
 803b4b6:	fb01 f303 	mul.w	r3, r1, r3
 803b4ba:	4413      	add	r3, r2
 803b4bc:	3306      	adds	r3, #6
 803b4be:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 803b4c0:	7b7a      	ldrb	r2, [r7, #13]
 803b4c2:	429a      	cmp	r2, r3
 803b4c4:	d932      	bls.n	803b52c <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 803b4c6:	89fb      	ldrh	r3, [r7, #14]
 803b4c8:	4a54      	ldr	r2, [pc, #336]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b4ca:	216a      	movs	r1, #106	; 0x6a
 803b4cc:	fb01 f303 	mul.w	r3, r1, r3
 803b4d0:	4413      	add	r3, r2
 803b4d2:	3360      	adds	r3, #96	; 0x60
 803b4d4:	889b      	ldrh	r3, [r3, #4]
 803b4d6:	b29a      	uxth	r2, r3
 803b4d8:	89fb      	ldrh	r3, [r7, #14]
 803b4da:	4950      	ldr	r1, [pc, #320]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b4dc:	206a      	movs	r0, #106	; 0x6a
 803b4de:	fb00 f303 	mul.w	r3, r0, r3
 803b4e2:	440b      	add	r3, r1
 803b4e4:	3358      	adds	r3, #88	; 0x58
 803b4e6:	88db      	ldrh	r3, [r3, #6]
 803b4e8:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 803b4ea:	429a      	cmp	r2, r3
 803b4ec:	d21e      	bcs.n	803b52c <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 803b4ee:	89fb      	ldrh	r3, [r7, #14]
 803b4f0:	4a4a      	ldr	r2, [pc, #296]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b4f2:	216a      	movs	r1, #106	; 0x6a
 803b4f4:	fb01 f303 	mul.w	r3, r1, r3
 803b4f8:	4413      	add	r3, r2
 803b4fa:	3360      	adds	r3, #96	; 0x60
 803b4fc:	885b      	ldrh	r3, [r3, #2]
 803b4fe:	b29a      	uxth	r2, r3
 803b500:	89fb      	ldrh	r3, [r7, #14]
 803b502:	4946      	ldr	r1, [pc, #280]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b504:	206a      	movs	r0, #106	; 0x6a
 803b506:	fb00 f303 	mul.w	r3, r0, r3
 803b50a:	440b      	add	r3, r1
 803b50c:	3358      	adds	r3, #88	; 0x58
 803b50e:	88db      	ldrh	r3, [r3, #6]
 803b510:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 803b512:	429a      	cmp	r2, r3
 803b514:	d20a      	bcs.n	803b52c <gos_kernelSelectNextTask+0x1c4>
            {
                nextTask = taskIndex;
 803b516:	89fb      	ldrh	r3, [r7, #14]
 803b518:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 803b51a:	89fb      	ldrh	r3, [r7, #14]
 803b51c:	4a3f      	ldr	r2, [pc, #252]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b51e:	216a      	movs	r1, #106	; 0x6a
 803b520:	fb01 f303 	mul.w	r3, r1, r3
 803b524:	4413      	add	r3, r2
 803b526:	3306      	adds	r3, #6
 803b528:	781b      	ldrb	r3, [r3, #0]
 803b52a:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 803b52c:	89fb      	ldrh	r3, [r7, #14]
 803b52e:	4a3b      	ldr	r2, [pc, #236]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b530:	216a      	movs	r1, #106	; 0x6a
 803b532:	fb01 f303 	mul.w	r3, r1, r3
 803b536:	4413      	add	r3, r2
 803b538:	681b      	ldr	r3, [r3, #0]
 803b53a:	2b00      	cmp	r3, #0
 803b53c:	d007      	beq.n	803b54e <gos_kernelSelectNextTask+0x1e6>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803b53e:	89fb      	ldrh	r3, [r7, #14]
 803b540:	3301      	adds	r3, #1
 803b542:	81fb      	strh	r3, [r7, #14]
 803b544:	89fb      	ldrh	r3, [r7, #14]
 803b546:	2b2f      	cmp	r3, #47	; 0x2f
 803b548:	f67f af2b 	bls.w	803b3a2 <gos_kernelSelectNextTask+0x3a>
 803b54c:	e000      	b.n	803b550 <gos_kernelSelectNextTask+0x1e8>
            {
                break;
 803b54e:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 803b550:	f7ff f89c 	bl	803a68c <gos_kernelGetCpuUsage>
 803b554:	4603      	mov	r3, r0
 803b556:	461a      	mov	r2, r3
 803b558:	4b32      	ldr	r3, [pc, #200]	; (803b624 <gos_kernelSelectNextTask+0x2bc>)
 803b55a:	881b      	ldrh	r3, [r3, #0]
 803b55c:	429a      	cmp	r2, r3
 803b55e:	d901      	bls.n	803b564 <gos_kernelSelectNextTask+0x1fc>
        {
            nextTask = 0u;
 803b560:	2300      	movs	r3, #0
 803b562:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 803b564:	897a      	ldrh	r2, [r7, #10]
 803b566:	4b2e      	ldr	r3, [pc, #184]	; (803b620 <gos_kernelSelectNextTask+0x2b8>)
 803b568:	681b      	ldr	r3, [r3, #0]
 803b56a:	429a      	cmp	r2, r3
 803b56c:	d02b      	beq.n	803b5c6 <gos_kernelSelectNextTask+0x25e>
        {
            if (kernelSwapHookFunction != NULL)
 803b56e:	4b2e      	ldr	r3, [pc, #184]	; (803b628 <gos_kernelSelectNextTask+0x2c0>)
 803b570:	681b      	ldr	r3, [r3, #0]
 803b572:	2b00      	cmp	r3, #0
 803b574:	d016      	beq.n	803b5a4 <gos_kernelSelectNextTask+0x23c>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 803b576:	4b2c      	ldr	r3, [pc, #176]	; (803b628 <gos_kernelSelectNextTask+0x2c0>)
 803b578:	681b      	ldr	r3, [r3, #0]
 803b57a:	4a29      	ldr	r2, [pc, #164]	; (803b620 <gos_kernelSelectNextTask+0x2b8>)
 803b57c:	6812      	ldr	r2, [r2, #0]
 803b57e:	4927      	ldr	r1, [pc, #156]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b580:	206a      	movs	r0, #106	; 0x6a
 803b582:	fb00 f202 	mul.w	r2, r0, r2
 803b586:	440a      	add	r2, r1
 803b588:	3228      	adds	r2, #40	; 0x28
 803b58a:	8852      	ldrh	r2, [r2, #2]
 803b58c:	b290      	uxth	r0, r2
 803b58e:	897a      	ldrh	r2, [r7, #10]
 803b590:	4922      	ldr	r1, [pc, #136]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b592:	246a      	movs	r4, #106	; 0x6a
 803b594:	fb04 f202 	mul.w	r2, r4, r2
 803b598:	440a      	add	r2, r1
 803b59a:	3228      	adds	r2, #40	; 0x28
 803b59c:	8852      	ldrh	r2, [r2, #2]
 803b59e:	b292      	uxth	r2, r2
 803b5a0:	4611      	mov	r1, r2
 803b5a2:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 803b5a4:	4b1e      	ldr	r3, [pc, #120]	; (803b620 <gos_kernelSelectNextTask+0x2b8>)
 803b5a6:	681b      	ldr	r3, [r3, #0]
 803b5a8:	491c      	ldr	r1, [pc, #112]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b5aa:	226a      	movs	r2, #106	; 0x6a
 803b5ac:	fb03 f202 	mul.w	r2, r3, r2
 803b5b0:	440a      	add	r2, r1
 803b5b2:	3240      	adds	r2, #64	; 0x40
 803b5b4:	6852      	ldr	r2, [r2, #4]
 803b5b6:	3201      	adds	r2, #1
 803b5b8:	4918      	ldr	r1, [pc, #96]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b5ba:	206a      	movs	r0, #106	; 0x6a
 803b5bc:	fb00 f303 	mul.w	r3, r0, r3
 803b5c0:	440b      	add	r3, r1
 803b5c2:	3340      	adds	r3, #64	; 0x40
 803b5c4:	605a      	str	r2, [r3, #4]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 803b5c6:	1cbb      	adds	r3, r7, #2
 803b5c8:	4618      	mov	r0, r3
 803b5ca:	f005 fead 	bl	8041328 <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 803b5ce:	887a      	ldrh	r2, [r7, #2]
 803b5d0:	4b16      	ldr	r3, [pc, #88]	; (803b62c <gos_kernelSelectNextTask+0x2c4>)
 803b5d2:	881b      	ldrh	r3, [r3, #0]
 803b5d4:	1ad3      	subs	r3, r2, r3
 803b5d6:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 803b5d8:	4b11      	ldr	r3, [pc, #68]	; (803b620 <gos_kernelSelectNextTask+0x2b8>)
 803b5da:	681b      	ldr	r3, [r3, #0]
 803b5dc:	226a      	movs	r2, #106	; 0x6a
 803b5de:	fb02 f303 	mul.w	r3, r2, r3
 803b5e2:	3350      	adds	r3, #80	; 0x50
 803b5e4:	4a0d      	ldr	r2, [pc, #52]	; (803b61c <gos_kernelSelectNextTask+0x2b4>)
 803b5e6:	4413      	add	r3, r2
 803b5e8:	3305      	adds	r3, #5
 803b5ea:	893a      	ldrh	r2, [r7, #8]
 803b5ec:	4619      	mov	r1, r3
 803b5ee:	4810      	ldr	r0, [pc, #64]	; (803b630 <gos_kernelSelectNextTask+0x2c8>)
 803b5f0:	f004 ffa6 	bl	8040540 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 803b5f4:	480d      	ldr	r0, [pc, #52]	; (803b62c <gos_kernelSelectNextTask+0x2c4>)
 803b5f6:	f005 fe97 	bl	8041328 <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 803b5fa:	897b      	ldrh	r3, [r7, #10]
 803b5fc:	4a08      	ldr	r2, [pc, #32]	; (803b620 <gos_kernelSelectNextTask+0x2b8>)
 803b5fe:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 803b600:	4b03      	ldr	r3, [pc, #12]	; (803b610 <gos_kernelSelectNextTask+0x2a8>)
 803b602:	681b      	ldr	r3, [r3, #0]
 803b604:	4a03      	ldr	r2, [pc, #12]	; (803b614 <gos_kernelSelectNextTask+0x2ac>)
 803b606:	6013      	str	r3, [r2, #0]
    }
    else
    {
        // Nothing to do.
    }
}
 803b608:	bf00      	nop
 803b60a:	3714      	adds	r7, #20
 803b60c:	46bd      	mov	sp, r7
 803b60e:	bd90      	pop	{r4, r7, pc}
 803b610:	20007450 	.word	0x20007450
 803b614:	2000746c 	.word	0x2000746c
 803b618:	20007445 	.word	0x20007445
 803b61c:	20001ca8 	.word	0x20001ca8
 803b620:	2000744c 	.word	0x2000744c
 803b624:	20001ca2 	.word	0x20001ca2
 803b628:	20007464 	.word	0x20007464
 803b62c:	20007454 	.word	0x20007454
 803b630:	20007458 	.word	0x20007458

0803b634 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 803b634:	b480      	push	{r7}
 803b636:	b083      	sub	sp, #12
 803b638:	af00      	add	r7, sp, #0
 803b63a:	4603      	mov	r3, r0
 803b63c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 803b63e:	79fb      	ldrb	r3, [r7, #7]
 803b640:	3b05      	subs	r3, #5
 803b642:	2b14      	cmp	r3, #20
 803b644:	d836      	bhi.n	803b6b4 <gos_kernelGetTaskStateString+0x80>
 803b646:	a201      	add	r2, pc, #4	; (adr r2, 803b64c <gos_kernelGetTaskStateString+0x18>)
 803b648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803b64c:	0803b6a9 	.word	0x0803b6a9
 803b650:	0803b6b5 	.word	0x0803b6b5
 803b654:	0803b6b5 	.word	0x0803b6b5
 803b658:	0803b6b5 	.word	0x0803b6b5
 803b65c:	0803b6b5 	.word	0x0803b6b5
 803b660:	0803b6a1 	.word	0x0803b6a1
 803b664:	0803b6b5 	.word	0x0803b6b5
 803b668:	0803b6b5 	.word	0x0803b6b5
 803b66c:	0803b6b1 	.word	0x0803b6b1
 803b670:	0803b6b5 	.word	0x0803b6b5
 803b674:	0803b6b5 	.word	0x0803b6b5
 803b678:	0803b6b5 	.word	0x0803b6b5
 803b67c:	0803b6b5 	.word	0x0803b6b5
 803b680:	0803b6b5 	.word	0x0803b6b5
 803b684:	0803b6b5 	.word	0x0803b6b5
 803b688:	0803b6b5 	.word	0x0803b6b5
 803b68c:	0803b6b5 	.word	0x0803b6b5
 803b690:	0803b6a5 	.word	0x0803b6a5
 803b694:	0803b6b5 	.word	0x0803b6b5
 803b698:	0803b6b5 	.word	0x0803b6b5
 803b69c:	0803b6ad 	.word	0x0803b6ad
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 803b6a0:	4b08      	ldr	r3, [pc, #32]	; (803b6c4 <gos_kernelGetTaskStateString+0x90>)
 803b6a2:	e008      	b.n	803b6b6 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 803b6a4:	4b08      	ldr	r3, [pc, #32]	; (803b6c8 <gos_kernelGetTaskStateString+0x94>)
 803b6a6:	e006      	b.n	803b6b6 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 803b6a8:	4b08      	ldr	r3, [pc, #32]	; (803b6cc <gos_kernelGetTaskStateString+0x98>)
 803b6aa:	e004      	b.n	803b6b6 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 803b6ac:	4b08      	ldr	r3, [pc, #32]	; (803b6d0 <gos_kernelGetTaskStateString+0x9c>)
 803b6ae:	e002      	b.n	803b6b6 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 803b6b0:	4b08      	ldr	r3, [pc, #32]	; (803b6d4 <gos_kernelGetTaskStateString+0xa0>)
 803b6b2:	e000      	b.n	803b6b6 <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 803b6b4:	4b08      	ldr	r3, [pc, #32]	; (803b6d8 <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 803b6b6:	4618      	mov	r0, r3
 803b6b8:	370c      	adds	r7, #12
 803b6ba:	46bd      	mov	sp, r7
 803b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803b6c0:	4770      	bx	lr
 803b6c2:	bf00      	nop
 803b6c4:	08047e94 	.word	0x08047e94
 803b6c8:	08047ea4 	.word	0x08047ea4
 803b6cc:	08047eb8 	.word	0x08047eb8
 803b6d0:	08047ecc 	.word	0x08047ecc
 803b6d4:	08047ee0 	.word	0x08047ee0
 803b6d8:	08047ef0 	.word	0x08047ef0

0803b6dc <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 803b6dc:	b480      	push	{r7}
 803b6de:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 803b6e0:	f3bf 8f4f 	dsb	sy
 803b6e4:	4b05      	ldr	r3, [pc, #20]	; (803b6fc <gos_kernelProcessorReset+0x20>)
 803b6e6:	681b      	ldr	r3, [r3, #0]
 803b6e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 803b6ec:	4903      	ldr	r1, [pc, #12]	; (803b6fc <gos_kernelProcessorReset+0x20>)
 803b6ee:	4b04      	ldr	r3, [pc, #16]	; (803b700 <gos_kernelProcessorReset+0x24>)
 803b6f0:	4313      	orrs	r3, r2
 803b6f2:	600b      	str	r3, [r1, #0]
 803b6f4:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 803b6f8:	bf00      	nop
 803b6fa:	e7fd      	b.n	803b6f8 <gos_kernelProcessorReset+0x1c>
 803b6fc:	e000ed0c 	.word	0xe000ed0c
 803b700:	05fa0004 	.word	0x05fa0004

0803b704 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 803b704:	b480      	push	{r7}
 803b706:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 803b708:	bf00      	nop
 803b70a:	e7fd      	b.n	803b708 <NMI_Handler+0x4>

0803b70c <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 803b70c:	b480      	push	{r7}
 803b70e:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 803b710:	bf00      	nop
 803b712:	e7fd      	b.n	803b710 <HardFault_Handler+0x4>

0803b714 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 803b714:	b480      	push	{r7}
 803b716:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 803b718:	bf00      	nop
 803b71a:	e7fd      	b.n	803b718 <MemManage_Handler+0x4>

0803b71c <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 803b71c:	b480      	push	{r7}
 803b71e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 803b720:	bf00      	nop
 803b722:	e7fd      	b.n	803b720 <BusFault_Handler+0x4>

0803b724 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 803b724:	b480      	push	{r7}
 803b726:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 803b728:	bf00      	nop
 803b72a:	e7fd      	b.n	803b728 <UsageFault_Handler+0x4>

0803b72c <gos_taskRegister>:

/*
 * Function: gos_taskRegister
 */
gos_result_t gos_taskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 803b72c:	b580      	push	{r7, lr}
 803b72e:	b086      	sub	sp, #24
 803b730:	af00      	add	r7, sp, #0
 803b732:	6078      	str	r0, [r7, #4]
 803b734:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 803b736:	2355      	movs	r3, #85	; 0x55
 803b738:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 803b73a:	2300      	movs	r3, #0
 803b73c:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 803b73e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 803b742:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 803b744:	2300      	movs	r3, #0
 803b746:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_taskCheckDescriptor(taskDescriptor) == GOS_ERROR)
 803b748:	6878      	ldr	r0, [r7, #4]
 803b74a:	f001 fd7b 	bl	803d244 <gos_taskCheckDescriptor>
 803b74e:	4603      	mov	r3, r0
 803b750:	2bae      	cmp	r3, #174	; 0xae
 803b752:	d102      	bne.n	803b75a <gos_taskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 803b754:	23ae      	movs	r3, #174	; 0xae
 803b756:	75fb      	strb	r3, [r7, #23]
 803b758:	e173      	b.n	803ba42 <gos_taskRegister+0x316>
    }
    else
    {
        taskRegisterResult = GOS_ERROR;
 803b75a:	23ae      	movs	r3, #174	; 0xae
 803b75c:	75fb      	strb	r3, [r7, #23]

        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803b75e:	2300      	movs	r3, #0
 803b760:	82bb      	strh	r3, [r7, #20]
 803b762:	e01a      	b.n	803b79a <gos_taskRegister+0x6e>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 803b764:	8abb      	ldrh	r3, [r7, #20]
 803b766:	4a89      	ldr	r2, [pc, #548]	; (803b98c <gos_taskRegister+0x260>)
 803b768:	216a      	movs	r1, #106	; 0x6a
 803b76a:	fb01 f303 	mul.w	r3, r1, r3
 803b76e:	4413      	add	r3, r2
 803b770:	681b      	ldr	r3, [r3, #0]
 803b772:	2b00      	cmp	r3, #0
 803b774:	d102      	bne.n	803b77c <gos_taskRegister+0x50>
            {
                taskRegisterResult = GOS_SUCCESS;
 803b776:	2355      	movs	r3, #85	; 0x55
 803b778:	75fb      	strb	r3, [r7, #23]
                break;
 803b77a:	e011      	b.n	803b7a0 <gos_taskRegister+0x74>
            }
            else
            {
                // Continue.
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 803b77c:	8abb      	ldrh	r3, [r7, #20]
 803b77e:	4a83      	ldr	r2, [pc, #524]	; (803b98c <gos_taskRegister+0x260>)
 803b780:	216a      	movs	r1, #106	; 0x6a
 803b782:	fb01 f303 	mul.w	r3, r1, r3
 803b786:	4413      	add	r3, r2
 803b788:	3348      	adds	r3, #72	; 0x48
 803b78a:	881b      	ldrh	r3, [r3, #0]
 803b78c:	461a      	mov	r2, r3
 803b78e:	693b      	ldr	r3, [r7, #16]
 803b790:	4413      	add	r3, r2
 803b792:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803b794:	8abb      	ldrh	r3, [r7, #20]
 803b796:	3301      	adds	r3, #1
 803b798:	82bb      	strh	r3, [r7, #20]
 803b79a:	8abb      	ldrh	r3, [r7, #20]
 803b79c:	2b2f      	cmp	r3, #47	; 0x2f
 803b79e:	d9e1      	bls.n	803b764 <gos_taskRegister+0x38>
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 803b7a0:	8abb      	ldrh	r3, [r7, #20]
 803b7a2:	2b2f      	cmp	r3, #47	; 0x2f
 803b7a4:	d902      	bls.n	803b7ac <gos_taskRegister+0x80>
        {
            taskRegisterResult = GOS_ERROR;
 803b7a6:	23ae      	movs	r3, #174	; 0xae
 803b7a8:	75fb      	strb	r3, [r7, #23]
 803b7aa:	e14a      	b.n	803ba42 <gos_taskRegister+0x316>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 803b7ac:	693b      	ldr	r3, [r7, #16]
 803b7ae:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 803b7b2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 803b7b6:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 803b7b8:	68fb      	ldr	r3, [r7, #12]
 803b7ba:	3b04      	subs	r3, #4
 803b7bc:	60fb      	str	r3, [r7, #12]
 803b7be:	68fb      	ldr	r3, [r7, #12]
 803b7c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 803b7c4:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 803b7c6:	687b      	ldr	r3, [r7, #4]
 803b7c8:	681a      	ldr	r2, [r3, #0]
 803b7ca:	68fb      	ldr	r3, [r7, #12]
 803b7cc:	3b04      	subs	r3, #4
 803b7ce:	60fb      	str	r3, [r7, #12]
 803b7d0:	68fb      	ldr	r3, [r7, #12]
 803b7d2:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 803b7d4:	68fb      	ldr	r3, [r7, #12]
 803b7d6:	3b04      	subs	r3, #4
 803b7d8:	60fb      	str	r3, [r7, #12]
 803b7da:	68fb      	ldr	r3, [r7, #12]
 803b7dc:	f06f 0202 	mvn.w	r2, #2
 803b7e0:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 803b7e2:	68fb      	ldr	r3, [r7, #12]
 803b7e4:	3b04      	subs	r3, #4
 803b7e6:	60fb      	str	r3, [r7, #12]
 803b7e8:	68fb      	ldr	r3, [r7, #12]
 803b7ea:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 803b7ee:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 803b7f0:	68fb      	ldr	r3, [r7, #12]
 803b7f2:	3b04      	subs	r3, #4
 803b7f4:	60fb      	str	r3, [r7, #12]
 803b7f6:	68fb      	ldr	r3, [r7, #12]
 803b7f8:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 803b7fc:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 803b7fe:	68fb      	ldr	r3, [r7, #12]
 803b800:	3b04      	subs	r3, #4
 803b802:	60fb      	str	r3, [r7, #12]
 803b804:	68fb      	ldr	r3, [r7, #12]
 803b806:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 803b80a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 803b80c:	68fb      	ldr	r3, [r7, #12]
 803b80e:	3b04      	subs	r3, #4
 803b810:	60fb      	str	r3, [r7, #12]
 803b812:	68fb      	ldr	r3, [r7, #12]
 803b814:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 803b818:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 803b81a:	68fb      	ldr	r3, [r7, #12]
 803b81c:	3b04      	subs	r3, #4
 803b81e:	60fb      	str	r3, [r7, #12]
 803b820:	68fb      	ldr	r3, [r7, #12]
 803b822:	2200      	movs	r2, #0
 803b824:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 803b826:	68fb      	ldr	r3, [r7, #12]
 803b828:	3b04      	subs	r3, #4
 803b82a:	60fb      	str	r3, [r7, #12]
 803b82c:	68fb      	ldr	r3, [r7, #12]
 803b82e:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 803b832:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 803b834:	68fb      	ldr	r3, [r7, #12]
 803b836:	3b04      	subs	r3, #4
 803b838:	60fb      	str	r3, [r7, #12]
 803b83a:	68fb      	ldr	r3, [r7, #12]
 803b83c:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 803b840:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 803b842:	68fb      	ldr	r3, [r7, #12]
 803b844:	3b04      	subs	r3, #4
 803b846:	60fb      	str	r3, [r7, #12]
 803b848:	68fb      	ldr	r3, [r7, #12]
 803b84a:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 803b84e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 803b850:	68fb      	ldr	r3, [r7, #12]
 803b852:	3b04      	subs	r3, #4
 803b854:	60fb      	str	r3, [r7, #12]
 803b856:	68fb      	ldr	r3, [r7, #12]
 803b858:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 803b85c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 803b85e:	68fb      	ldr	r3, [r7, #12]
 803b860:	3b04      	subs	r3, #4
 803b862:	60fb      	str	r3, [r7, #12]
 803b864:	68fb      	ldr	r3, [r7, #12]
 803b866:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 803b86a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 803b86c:	68fb      	ldr	r3, [r7, #12]
 803b86e:	3b04      	subs	r3, #4
 803b870:	60fb      	str	r3, [r7, #12]
 803b872:	68fb      	ldr	r3, [r7, #12]
 803b874:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 803b878:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 803b87a:	68fb      	ldr	r3, [r7, #12]
 803b87c:	3b04      	subs	r3, #4
 803b87e:	60fb      	str	r3, [r7, #12]
 803b880:	68fb      	ldr	r3, [r7, #12]
 803b882:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 803b886:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 803b888:	68fb      	ldr	r3, [r7, #12]
 803b88a:	3b04      	subs	r3, #4
 803b88c:	60fb      	str	r3, [r7, #12]
 803b88e:	68fb      	ldr	r3, [r7, #12]
 803b890:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 803b894:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 803b896:	8abb      	ldrh	r3, [r7, #20]
 803b898:	68fa      	ldr	r2, [r7, #12]
 803b89a:	493c      	ldr	r1, [pc, #240]	; (803b98c <gos_taskRegister+0x260>)
 803b89c:	206a      	movs	r0, #106	; 0x6a
 803b89e:	fb00 f303 	mul.w	r3, r0, r3
 803b8a2:	440b      	add	r3, r1
 803b8a4:	333c      	adds	r3, #60	; 0x3c
 803b8a6:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 803b8a8:	8abb      	ldrh	r3, [r7, #20]
 803b8aa:	4a38      	ldr	r2, [pc, #224]	; (803b98c <gos_taskRegister+0x260>)
 803b8ac:	216a      	movs	r1, #106	; 0x6a
 803b8ae:	fb01 f303 	mul.w	r3, r1, r3
 803b8b2:	4413      	add	r3, r2
 803b8b4:	3304      	adds	r3, #4
 803b8b6:	220a      	movs	r2, #10
 803b8b8:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 803b8ba:	8abb      	ldrh	r3, [r7, #20]
 803b8bc:	687a      	ldr	r2, [r7, #4]
 803b8be:	6812      	ldr	r2, [r2, #0]
 803b8c0:	4932      	ldr	r1, [pc, #200]	; (803b98c <gos_taskRegister+0x260>)
 803b8c2:	206a      	movs	r0, #106	; 0x6a
 803b8c4:	fb00 f303 	mul.w	r3, r0, r3
 803b8c8:	440b      	add	r3, r1
 803b8ca:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 803b8cc:	8abb      	ldrh	r3, [r7, #20]
 803b8ce:	687a      	ldr	r2, [r7, #4]
 803b8d0:	7990      	ldrb	r0, [r2, #6]
 803b8d2:	4a2e      	ldr	r2, [pc, #184]	; (803b98c <gos_taskRegister+0x260>)
 803b8d4:	216a      	movs	r1, #106	; 0x6a
 803b8d6:	fb01 f303 	mul.w	r3, r1, r3
 803b8da:	4413      	add	r3, r2
 803b8dc:	3306      	adds	r3, #6
 803b8de:	4602      	mov	r2, r0
 803b8e0:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 803b8e2:	8abb      	ldrh	r3, [r7, #20]
 803b8e4:	687a      	ldr	r2, [r7, #4]
 803b8e6:	7990      	ldrb	r0, [r2, #6]
 803b8e8:	4a28      	ldr	r2, [pc, #160]	; (803b98c <gos_taskRegister+0x260>)
 803b8ea:	216a      	movs	r1, #106	; 0x6a
 803b8ec:	fb01 f303 	mul.w	r3, r1, r3
 803b8f0:	4413      	add	r3, r2
 803b8f2:	3307      	adds	r3, #7
 803b8f4:	4602      	mov	r2, r0
 803b8f6:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 803b8f8:	8abb      	ldrh	r3, [r7, #20]
 803b8fa:	687a      	ldr	r2, [r7, #4]
 803b8fc:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 803b900:	b290      	uxth	r0, r2
 803b902:	4a22      	ldr	r2, [pc, #136]	; (803b98c <gos_taskRegister+0x260>)
 803b904:	216a      	movs	r1, #106	; 0x6a
 803b906:	fb01 f303 	mul.w	r3, r1, r3
 803b90a:	4413      	add	r3, r2
 803b90c:	3348      	adds	r3, #72	; 0x48
 803b90e:	4602      	mov	r2, r0
 803b910:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 803b912:	8abb      	ldrh	r3, [r7, #20]
 803b914:	8aba      	ldrh	r2, [r7, #20]
 803b916:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 803b91a:	b290      	uxth	r0, r2
 803b91c:	4a1b      	ldr	r2, [pc, #108]	; (803b98c <gos_taskRegister+0x260>)
 803b91e:	216a      	movs	r1, #106	; 0x6a
 803b920:	fb01 f303 	mul.w	r3, r1, r3
 803b924:	4413      	add	r3, r2
 803b926:	332a      	adds	r3, #42	; 0x2a
 803b928:	4602      	mov	r2, r0
 803b92a:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 803b92c:	8abb      	ldrh	r3, [r7, #20]
 803b92e:	687a      	ldr	r2, [r7, #4]
 803b930:	8912      	ldrh	r2, [r2, #8]
 803b932:	b290      	uxth	r0, r2
 803b934:	4a15      	ldr	r2, [pc, #84]	; (803b98c <gos_taskRegister+0x260>)
 803b936:	216a      	movs	r1, #106	; 0x6a
 803b938:	fb01 f303 	mul.w	r3, r1, r3
 803b93c:	4413      	add	r3, r2
 803b93e:	3308      	adds	r3, #8
 803b940:	4602      	mov	r2, r0
 803b942:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 803b944:	687b      	ldr	r3, [r7, #4]
 803b946:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803b94a:	b29b      	uxth	r3, r3
 803b94c:	2b00      	cmp	r3, #0
 803b94e:	d10a      	bne.n	803b966 <gos_taskRegister+0x23a>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 803b950:	8abb      	ldrh	r3, [r7, #20]
 803b952:	4a0e      	ldr	r2, [pc, #56]	; (803b98c <gos_taskRegister+0x260>)
 803b954:	216a      	movs	r1, #106	; 0x6a
 803b956:	fb01 f303 	mul.w	r3, r1, r3
 803b95a:	4413      	add	r3, r2
 803b95c:	335e      	adds	r3, #94	; 0x5e
 803b95e:	f242 7210 	movw	r2, #10000	; 0x2710
 803b962:	801a      	strh	r2, [r3, #0]
 803b964:	e021      	b.n	803b9aa <gos_taskRegister+0x27e>
            }
            else if (taskDescriptor->taskCpuUsageLimit > 10000u)
 803b966:	687b      	ldr	r3, [r7, #4]
 803b968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 803b96c:	b29b      	uxth	r3, r3
 803b96e:	f242 7210 	movw	r2, #10000	; 0x2710
 803b972:	4293      	cmp	r3, r2
 803b974:	d90c      	bls.n	803b990 <gos_taskRegister+0x264>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 803b976:	8abb      	ldrh	r3, [r7, #20]
 803b978:	4a04      	ldr	r2, [pc, #16]	; (803b98c <gos_taskRegister+0x260>)
 803b97a:	216a      	movs	r1, #106	; 0x6a
 803b97c:	fb01 f303 	mul.w	r3, r1, r3
 803b980:	4413      	add	r3, r2
 803b982:	335e      	adds	r3, #94	; 0x5e
 803b984:	f242 7210 	movw	r2, #10000	; 0x2710
 803b988:	801a      	strh	r2, [r3, #0]
 803b98a:	e00e      	b.n	803b9aa <gos_taskRegister+0x27e>
 803b98c:	20001ca8 	.word	0x20001ca8
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 803b990:	8abb      	ldrh	r3, [r7, #20]
 803b992:	687a      	ldr	r2, [r7, #4]
 803b994:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 803b998:	b290      	uxth	r0, r2
 803b99a:	4a2c      	ldr	r2, [pc, #176]	; (803ba4c <gos_taskRegister+0x320>)
 803b99c:	216a      	movs	r1, #106	; 0x6a
 803b99e:	fb01 f303 	mul.w	r3, r1, r3
 803b9a2:	4413      	add	r3, r2
 803b9a4:	335e      	adds	r3, #94	; 0x5e
 803b9a6:	4602      	mov	r2, r0
 803b9a8:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 803b9aa:	687b      	ldr	r3, [r7, #4]
 803b9ac:	330a      	adds	r3, #10
 803b9ae:	2b00      	cmp	r3, #0
 803b9b0:	d015      	beq.n	803b9de <gos_taskRegister+0x2b2>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 803b9b2:	687b      	ldr	r3, [r7, #4]
 803b9b4:	330a      	adds	r3, #10
 803b9b6:	4618      	mov	r0, r3
 803b9b8:	f7e4 fc8a 	bl	80202d0 <strlen>
 803b9bc:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 803b9be:	2b20      	cmp	r3, #32
 803b9c0:	d80d      	bhi.n	803b9de <gos_taskRegister+0x2b2>
            {
                (void_t) strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 803b9c2:	8abb      	ldrh	r3, [r7, #20]
 803b9c4:	226a      	movs	r2, #106	; 0x6a
 803b9c6:	fb02 f303 	mul.w	r3, r2, r3
 803b9ca:	3308      	adds	r3, #8
 803b9cc:	4a1f      	ldr	r2, [pc, #124]	; (803ba4c <gos_taskRegister+0x320>)
 803b9ce:	4413      	add	r3, r2
 803b9d0:	1c9a      	adds	r2, r3, #2
 803b9d2:	687b      	ldr	r3, [r7, #4]
 803b9d4:	330a      	adds	r3, #10
 803b9d6:	4619      	mov	r1, r3
 803b9d8:	4610      	mov	r0, r2
 803b9da:	f007 f9a6 	bl	8042d2a <strcpy>
            {
                // Task name is not requried.
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 803b9de:	8abb      	ldrh	r3, [r7, #20]
 803b9e0:	4a1a      	ldr	r2, [pc, #104]	; (803ba4c <gos_taskRegister+0x320>)
 803b9e2:	216a      	movs	r1, #106	; 0x6a
 803b9e4:	fb01 f303 	mul.w	r3, r1, r3
 803b9e8:	4413      	add	r3, r2
 803b9ea:	332a      	adds	r3, #42	; 0x2a
 803b9ec:	881a      	ldrh	r2, [r3, #0]
 803b9ee:	687b      	ldr	r3, [r7, #4]
 803b9f0:	855a      	strh	r2, [r3, #42]	; 0x2a
            if (taskId != NULL)
 803b9f2:	683b      	ldr	r3, [r7, #0]
 803b9f4:	2b00      	cmp	r3, #0
 803b9f6:	d009      	beq.n	803ba0c <gos_taskRegister+0x2e0>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 803b9f8:	8abb      	ldrh	r3, [r7, #20]
 803b9fa:	4a14      	ldr	r2, [pc, #80]	; (803ba4c <gos_taskRegister+0x320>)
 803b9fc:	216a      	movs	r1, #106	; 0x6a
 803b9fe:	fb01 f303 	mul.w	r3, r1, r3
 803ba02:	4413      	add	r3, r2
 803ba04:	332a      	adds	r3, #42	; 0x2a
 803ba06:	881a      	ldrh	r2, [r3, #0]
 803ba08:	683b      	ldr	r3, [r7, #0]
 803ba0a:	801a      	strh	r2, [r3, #0]
                // External task ID not required.
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 803ba0c:	8abb      	ldrh	r3, [r7, #20]
 803ba0e:	4a0f      	ldr	r2, [pc, #60]	; (803ba4c <gos_taskRegister+0x320>)
 803ba10:	216a      	movs	r1, #106	; 0x6a
 803ba12:	fb01 f303 	mul.w	r3, r1, r3
 803ba16:	4413      	add	r3, r2
 803ba18:	333c      	adds	r3, #60	; 0x3c
 803ba1a:	681b      	ldr	r3, [r3, #0]
 803ba1c:	8aba      	ldrh	r2, [r7, #20]
 803ba1e:	490b      	ldr	r1, [pc, #44]	; (803ba4c <gos_taskRegister+0x320>)
 803ba20:	206a      	movs	r0, #106	; 0x6a
 803ba22:	fb00 f202 	mul.w	r2, r0, r2
 803ba26:	440a      	add	r2, r1
 803ba28:	3248      	adds	r2, #72	; 0x48
 803ba2a:	8812      	ldrh	r2, [r2, #0]
 803ba2c:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 803ba2e:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 803ba30:	3240      	adds	r2, #64	; 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 803ba32:	4906      	ldr	r1, [pc, #24]	; (803ba4c <gos_taskRegister+0x320>)
 803ba34:	206a      	movs	r0, #106	; 0x6a
 803ba36:	fb00 f303 	mul.w	r3, r0, r3
 803ba3a:	440b      	add	r3, r1
 803ba3c:	3360      	adds	r3, #96	; 0x60
 803ba3e:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 803ba42:	7dfb      	ldrb	r3, [r7, #23]
}
 803ba44:	4618      	mov	r0, r3
 803ba46:	3718      	adds	r7, #24
 803ba48:	46bd      	mov	sp, r7
 803ba4a:	bd80      	pop	{r7, pc}
 803ba4c:	20001ca8 	.word	0x20001ca8

0803ba50 <gos_taskSleep>:

/*
 * Function: gos_taskSleep
 */
GOS_INLINE gos_result_t gos_taskSleep (gos_taskSleepTick_t sleepTicks)
{
 803ba50:	b580      	push	{r7, lr}
 803ba52:	b084      	sub	sp, #16
 803ba54:	af00      	add	r7, sp, #0
 803ba56:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 803ba58:	23ae      	movs	r3, #174	; 0xae
 803ba5a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (currentTaskIndex > 0u)
 803ba5c:	4b3a      	ldr	r3, [pc, #232]	; (803bb48 <gos_taskSleep+0xf8>)
 803ba5e:	681b      	ldr	r3, [r3, #0]
 803ba60:	2b00      	cmp	r3, #0
 803ba62:	d06c      	beq.n	803bb3e <gos_taskSleep+0xee>
    {
        GOS_ATOMIC_ENTER
 803ba64:	4b39      	ldr	r3, [pc, #228]	; (803bb4c <gos_taskSleep+0xfc>)
 803ba66:	781b      	ldrb	r3, [r3, #0]
 803ba68:	2b00      	cmp	r3, #0
 803ba6a:	d108      	bne.n	803ba7e <gos_taskSleep+0x2e>
 803ba6c:	b672      	cpsid	i
 803ba6e:	f3ef 8310 	mrs	r3, PRIMASK
 803ba72:	4a37      	ldr	r2, [pc, #220]	; (803bb50 <gos_taskSleep+0x100>)
 803ba74:	6013      	str	r3, [r2, #0]
 803ba76:	f3bf 8f4f 	dsb	sy
 803ba7a:	f3bf 8f6f 	isb	sy
 803ba7e:	4b33      	ldr	r3, [pc, #204]	; (803bb4c <gos_taskSleep+0xfc>)
 803ba80:	781b      	ldrb	r3, [r3, #0]
 803ba82:	3301      	adds	r3, #1
 803ba84:	b2da      	uxtb	r2, r3
 803ba86:	4b31      	ldr	r3, [pc, #196]	; (803bb4c <gos_taskSleep+0xfc>)
 803ba88:	701a      	strb	r2, [r3, #0]
 803ba8a:	4b32      	ldr	r3, [pc, #200]	; (803bb54 <gos_taskSleep+0x104>)
 803ba8c:	781b      	ldrb	r3, [r3, #0]
 803ba8e:	3301      	adds	r3, #1
 803ba90:	b2da      	uxtb	r2, r3
 803ba92:	4b30      	ldr	r3, [pc, #192]	; (803bb54 <gos_taskSleep+0x104>)
 803ba94:	701a      	strb	r2, [r3, #0]
        {
            if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 803ba96:	4b2c      	ldr	r3, [pc, #176]	; (803bb48 <gos_taskSleep+0xf8>)
 803ba98:	681b      	ldr	r3, [r3, #0]
 803ba9a:	4a2f      	ldr	r2, [pc, #188]	; (803bb58 <gos_taskSleep+0x108>)
 803ba9c:	216a      	movs	r1, #106	; 0x6a
 803ba9e:	fb01 f303 	mul.w	r3, r1, r3
 803baa2:	4413      	add	r3, r2
 803baa4:	3304      	adds	r3, #4
 803baa6:	781b      	ldrb	r3, [r3, #0]
 803baa8:	2b0a      	cmp	r3, #10
 803baaa:	d121      	bne.n	803baf0 <gos_taskSleep+0xa0>
            {
                taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 803baac:	4b26      	ldr	r3, [pc, #152]	; (803bb48 <gos_taskSleep+0xf8>)
 803baae:	681b      	ldr	r3, [r3, #0]
 803bab0:	4a29      	ldr	r2, [pc, #164]	; (803bb58 <gos_taskSleep+0x108>)
 803bab2:	216a      	movs	r1, #106	; 0x6a
 803bab4:	fb01 f303 	mul.w	r3, r1, r3
 803bab8:	4413      	add	r3, r2
 803baba:	3304      	adds	r3, #4
 803babc:	2216      	movs	r2, #22
 803babe:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 803bac0:	4b21      	ldr	r3, [pc, #132]	; (803bb48 <gos_taskSleep+0xf8>)
 803bac2:	681b      	ldr	r3, [r3, #0]
 803bac4:	4a24      	ldr	r2, [pc, #144]	; (803bb58 <gos_taskSleep+0x108>)
 803bac6:	216a      	movs	r1, #106	; 0x6a
 803bac8:	fb01 f303 	mul.w	r3, r1, r3
 803bacc:	4413      	add	r3, r2
 803bace:	332c      	adds	r3, #44	; 0x2c
 803bad0:	687a      	ldr	r2, [r7, #4]
 803bad2:	601a      	str	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 803bad4:	4b1c      	ldr	r3, [pc, #112]	; (803bb48 <gos_taskSleep+0xf8>)
 803bad6:	681b      	ldr	r3, [r3, #0]
 803bad8:	4a1f      	ldr	r2, [pc, #124]	; (803bb58 <gos_taskSleep+0x108>)
 803bada:	216a      	movs	r1, #106	; 0x6a
 803badc:	fb01 f303 	mul.w	r3, r1, r3
 803bae0:	4413      	add	r3, r2
 803bae2:	3330      	adds	r3, #48	; 0x30
 803bae4:	2200      	movs	r2, #0
 803bae6:	801a      	strh	r2, [r3, #0]
 803bae8:	2200      	movs	r2, #0
 803baea:	805a      	strh	r2, [r3, #2]
                taskSleepResult = GOS_SUCCESS;
 803baec:	2355      	movs	r3, #85	; 0x55
 803baee:	73fb      	strb	r3, [r7, #15]
            else
            {
                // Nothing to do.
            }
        }
        GOS_ATOMIC_EXIT
 803baf0:	4b16      	ldr	r3, [pc, #88]	; (803bb4c <gos_taskSleep+0xfc>)
 803baf2:	781b      	ldrb	r3, [r3, #0]
 803baf4:	2b00      	cmp	r3, #0
 803baf6:	d005      	beq.n	803bb04 <gos_taskSleep+0xb4>
 803baf8:	4b14      	ldr	r3, [pc, #80]	; (803bb4c <gos_taskSleep+0xfc>)
 803bafa:	781b      	ldrb	r3, [r3, #0]
 803bafc:	3b01      	subs	r3, #1
 803bafe:	b2da      	uxtb	r2, r3
 803bb00:	4b12      	ldr	r3, [pc, #72]	; (803bb4c <gos_taskSleep+0xfc>)
 803bb02:	701a      	strb	r2, [r3, #0]
 803bb04:	4b11      	ldr	r3, [pc, #68]	; (803bb4c <gos_taskSleep+0xfc>)
 803bb06:	781b      	ldrb	r3, [r3, #0]
 803bb08:	2b00      	cmp	r3, #0
 803bb0a:	d108      	bne.n	803bb1e <gos_taskSleep+0xce>
 803bb0c:	4b10      	ldr	r3, [pc, #64]	; (803bb50 <gos_taskSleep+0x100>)
 803bb0e:	681b      	ldr	r3, [r3, #0]
 803bb10:	f383 8810 	msr	PRIMASK, r3
 803bb14:	b662      	cpsie	i
 803bb16:	f3bf 8f4f 	dsb	sy
 803bb1a:	f3bf 8f6f 	isb	sy
 803bb1e:	4b0d      	ldr	r3, [pc, #52]	; (803bb54 <gos_taskSleep+0x104>)
 803bb20:	781b      	ldrb	r3, [r3, #0]
 803bb22:	2b00      	cmp	r3, #0
 803bb24:	d005      	beq.n	803bb32 <gos_taskSleep+0xe2>
 803bb26:	4b0b      	ldr	r3, [pc, #44]	; (803bb54 <gos_taskSleep+0x104>)
 803bb28:	781b      	ldrb	r3, [r3, #0]
 803bb2a:	3b01      	subs	r3, #1
 803bb2c:	b2da      	uxtb	r2, r3
 803bb2e:	4b09      	ldr	r3, [pc, #36]	; (803bb54 <gos_taskSleep+0x104>)
 803bb30:	701a      	strb	r2, [r3, #0]

        if (taskSleepResult == GOS_SUCCESS)
 803bb32:	7bfb      	ldrb	r3, [r7, #15]
 803bb34:	2b55      	cmp	r3, #85	; 0x55
 803bb36:	d102      	bne.n	803bb3e <gos_taskSleep+0xee>
        {
            // Unprivileged.
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 803bb38:	2009      	movs	r0, #9
 803bb3a:	f7ff fb41 	bl	803b1c0 <gos_kernelReschedule>
    else
    {
        // Idle task cannot sleep.
    }

    return taskSleepResult;
 803bb3e:	7bfb      	ldrb	r3, [r7, #15]
}
 803bb40:	4618      	mov	r0, r3
 803bb42:	3710      	adds	r7, #16
 803bb44:	46bd      	mov	sp, r7
 803bb46:	bd80      	pop	{r7, pc}
 803bb48:	2000744c 	.word	0x2000744c
 803bb4c:	20007447 	.word	0x20007447
 803bb50:	20007448 	.word	0x20007448
 803bb54:	20007445 	.word	0x20007445
 803bb58:	20001ca8 	.word	0x20001ca8

0803bb5c <gos_taskWakeup>:

/*
 * Function: gos_taskWakeup
 */
GOS_INLINE gos_result_t gos_taskWakeup (gos_tid_t taskId)
{
 803bb5c:	b580      	push	{r7, lr}
 803bb5e:	b086      	sub	sp, #24
 803bb60:	af02      	add	r7, sp, #8
 803bb62:	4603      	mov	r3, r0
 803bb64:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskWakeupResult = GOS_ERROR;
 803bb66:	23ae      	movs	r3, #174	; 0xae
 803bb68:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 803bb6a:	2300      	movs	r3, #0
 803bb6c:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803bb6e:	4b56      	ldr	r3, [pc, #344]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bb70:	781b      	ldrb	r3, [r3, #0]
 803bb72:	2b00      	cmp	r3, #0
 803bb74:	d108      	bne.n	803bb88 <gos_taskWakeup+0x2c>
 803bb76:	b672      	cpsid	i
 803bb78:	f3ef 8310 	mrs	r3, PRIMASK
 803bb7c:	4a53      	ldr	r2, [pc, #332]	; (803bccc <gos_taskWakeup+0x170>)
 803bb7e:	6013      	str	r3, [r2, #0]
 803bb80:	f3bf 8f4f 	dsb	sy
 803bb84:	f3bf 8f6f 	isb	sy
 803bb88:	4b4f      	ldr	r3, [pc, #316]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bb8a:	781b      	ldrb	r3, [r3, #0]
 803bb8c:	3301      	adds	r3, #1
 803bb8e:	b2da      	uxtb	r2, r3
 803bb90:	4b4d      	ldr	r3, [pc, #308]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bb92:	701a      	strb	r2, [r3, #0]
 803bb94:	4b4e      	ldr	r3, [pc, #312]	; (803bcd0 <gos_taskWakeup+0x174>)
 803bb96:	781b      	ldrb	r3, [r3, #0]
 803bb98:	3301      	adds	r3, #1
 803bb9a:	b2da      	uxtb	r2, r3
 803bb9c:	4b4c      	ldr	r3, [pc, #304]	; (803bcd0 <gos_taskWakeup+0x174>)
 803bb9e:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 803bba0:	88fb      	ldrh	r3, [r7, #6]
 803bba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803bba6:	d969      	bls.n	803bc7c <gos_taskWakeup+0x120>
 803bba8:	88fb      	ldrh	r3, [r7, #6]
 803bbaa:	f248 022f 	movw	r2, #32815	; 0x802f
 803bbae:	4293      	cmp	r3, r2
 803bbb0:	d864      	bhi.n	803bc7c <gos_taskWakeup+0x120>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803bbb2:	88fb      	ldrh	r3, [r7, #6]
 803bbb4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803bbb8:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803bbba:	4b46      	ldr	r3, [pc, #280]	; (803bcd4 <gos_taskWakeup+0x178>)
 803bbbc:	681b      	ldr	r3, [r3, #0]
 803bbbe:	4a46      	ldr	r2, [pc, #280]	; (803bcd8 <gos_taskWakeup+0x17c>)
 803bbc0:	216a      	movs	r1, #106	; 0x6a
 803bbc2:	fb01 f303 	mul.w	r3, r1, r3
 803bbc6:	4413      	add	r3, r2
 803bbc8:	3308      	adds	r3, #8
 803bbca:	881b      	ldrh	r3, [r3, #0]
 803bbcc:	b21b      	sxth	r3, r3
 803bbce:	2b00      	cmp	r3, #0
 803bbd0:	db03      	blt.n	803bbda <gos_taskWakeup+0x7e>
            inIsr > 0)
 803bbd2:	4b42      	ldr	r3, [pc, #264]	; (803bcdc <gos_taskWakeup+0x180>)
 803bbd4:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803bbd6:	2b00      	cmp	r3, #0
 803bbd8:	d015      	beq.n	803bc06 <gos_taskWakeup+0xaa>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 803bbda:	4a3f      	ldr	r2, [pc, #252]	; (803bcd8 <gos_taskWakeup+0x17c>)
 803bbdc:	68bb      	ldr	r3, [r7, #8]
 803bbde:	216a      	movs	r1, #106	; 0x6a
 803bbe0:	fb01 f303 	mul.w	r3, r1, r3
 803bbe4:	4413      	add	r3, r2
 803bbe6:	3304      	adds	r3, #4
 803bbe8:	781b      	ldrb	r3, [r3, #0]
 803bbea:	2b16      	cmp	r3, #22
 803bbec:	d146      	bne.n	803bc7c <gos_taskWakeup+0x120>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 803bbee:	4a3a      	ldr	r2, [pc, #232]	; (803bcd8 <gos_taskWakeup+0x17c>)
 803bbf0:	68bb      	ldr	r3, [r7, #8]
 803bbf2:	216a      	movs	r1, #106	; 0x6a
 803bbf4:	fb01 f303 	mul.w	r3, r1, r3
 803bbf8:	4413      	add	r3, r2
 803bbfa:	3304      	adds	r3, #4
 803bbfc:	220a      	movs	r2, #10
 803bbfe:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 803bc00:	2355      	movs	r3, #85	; 0x55
 803bc02:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 803bc04:	e03a      	b.n	803bc7c <gos_taskWakeup+0x120>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 803bc06:	4b30      	ldr	r3, [pc, #192]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bc08:	781b      	ldrb	r3, [r3, #0]
 803bc0a:	2b00      	cmp	r3, #0
 803bc0c:	d005      	beq.n	803bc1a <gos_taskWakeup+0xbe>
 803bc0e:	4b2e      	ldr	r3, [pc, #184]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bc10:	781b      	ldrb	r3, [r3, #0]
 803bc12:	3b01      	subs	r3, #1
 803bc14:	b2da      	uxtb	r2, r3
 803bc16:	4b2c      	ldr	r3, [pc, #176]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bc18:	701a      	strb	r2, [r3, #0]
 803bc1a:	4b2b      	ldr	r3, [pc, #172]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bc1c:	781b      	ldrb	r3, [r3, #0]
 803bc1e:	2b00      	cmp	r3, #0
 803bc20:	d108      	bne.n	803bc34 <gos_taskWakeup+0xd8>
 803bc22:	4b2a      	ldr	r3, [pc, #168]	; (803bccc <gos_taskWakeup+0x170>)
 803bc24:	681b      	ldr	r3, [r3, #0]
 803bc26:	f383 8810 	msr	PRIMASK, r3
 803bc2a:	b662      	cpsie	i
 803bc2c:	f3bf 8f4f 	dsb	sy
 803bc30:	f3bf 8f6f 	isb	sy
 803bc34:	4b26      	ldr	r3, [pc, #152]	; (803bcd0 <gos_taskWakeup+0x174>)
 803bc36:	781b      	ldrb	r3, [r3, #0]
 803bc38:	2b00      	cmp	r3, #0
 803bc3a:	d005      	beq.n	803bc48 <gos_taskWakeup+0xec>
 803bc3c:	4b24      	ldr	r3, [pc, #144]	; (803bcd0 <gos_taskWakeup+0x174>)
 803bc3e:	781b      	ldrb	r3, [r3, #0]
 803bc40:	3b01      	subs	r3, #1
 803bc42:	b2da      	uxtb	r2, r3
 803bc44:	4b22      	ldr	r3, [pc, #136]	; (803bcd0 <gos_taskWakeup+0x174>)
 803bc46:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 803bc48:	4b22      	ldr	r3, [pc, #136]	; (803bcd4 <gos_taskWakeup+0x178>)
 803bc4a:	681b      	ldr	r3, [r3, #0]
 803bc4c:	226a      	movs	r2, #106	; 0x6a
 803bc4e:	fb02 f303 	mul.w	r3, r2, r3
 803bc52:	3308      	adds	r3, #8
 803bc54:	4a20      	ldr	r2, [pc, #128]	; (803bcd8 <gos_taskWakeup+0x17c>)
 803bc56:	4413      	add	r3, r2
 803bc58:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 803bc5a:	68ba      	ldr	r2, [r7, #8]
 803bc5c:	216a      	movs	r1, #106	; 0x6a
 803bc5e:	fb01 f202 	mul.w	r2, r1, r2
 803bc62:	3208      	adds	r2, #8
 803bc64:	491c      	ldr	r1, [pc, #112]	; (803bcd8 <gos_taskWakeup+0x17c>)
 803bc66:	440a      	add	r2, r1
 803bc68:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 803bc6a:	9201      	str	r2, [sp, #4]
 803bc6c:	9300      	str	r3, [sp, #0]
 803bc6e:	4b1c      	ldr	r3, [pc, #112]	; (803bce0 <gos_taskWakeup+0x184>)
 803bc70:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 803bc74:	491b      	ldr	r1, [pc, #108]	; (803bce4 <gos_taskWakeup+0x188>)
 803bc76:	2034      	movs	r0, #52	; 0x34
 803bc78:	f001 fc8e 	bl	803d598 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 803bc7c:	4b12      	ldr	r3, [pc, #72]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bc7e:	781b      	ldrb	r3, [r3, #0]
 803bc80:	2b00      	cmp	r3, #0
 803bc82:	d005      	beq.n	803bc90 <gos_taskWakeup+0x134>
 803bc84:	4b10      	ldr	r3, [pc, #64]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bc86:	781b      	ldrb	r3, [r3, #0]
 803bc88:	3b01      	subs	r3, #1
 803bc8a:	b2da      	uxtb	r2, r3
 803bc8c:	4b0e      	ldr	r3, [pc, #56]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bc8e:	701a      	strb	r2, [r3, #0]
 803bc90:	4b0d      	ldr	r3, [pc, #52]	; (803bcc8 <gos_taskWakeup+0x16c>)
 803bc92:	781b      	ldrb	r3, [r3, #0]
 803bc94:	2b00      	cmp	r3, #0
 803bc96:	d108      	bne.n	803bcaa <gos_taskWakeup+0x14e>
 803bc98:	4b0c      	ldr	r3, [pc, #48]	; (803bccc <gos_taskWakeup+0x170>)
 803bc9a:	681b      	ldr	r3, [r3, #0]
 803bc9c:	f383 8810 	msr	PRIMASK, r3
 803bca0:	b662      	cpsie	i
 803bca2:	f3bf 8f4f 	dsb	sy
 803bca6:	f3bf 8f6f 	isb	sy
 803bcaa:	4b09      	ldr	r3, [pc, #36]	; (803bcd0 <gos_taskWakeup+0x174>)
 803bcac:	781b      	ldrb	r3, [r3, #0]
 803bcae:	2b00      	cmp	r3, #0
 803bcb0:	d005      	beq.n	803bcbe <gos_taskWakeup+0x162>
 803bcb2:	4b07      	ldr	r3, [pc, #28]	; (803bcd0 <gos_taskWakeup+0x174>)
 803bcb4:	781b      	ldrb	r3, [r3, #0]
 803bcb6:	3b01      	subs	r3, #1
 803bcb8:	b2da      	uxtb	r2, r3
 803bcba:	4b05      	ldr	r3, [pc, #20]	; (803bcd0 <gos_taskWakeup+0x174>)
 803bcbc:	701a      	strb	r2, [r3, #0]

    return taskWakeupResult;
 803bcbe:	7bfb      	ldrb	r3, [r7, #15]
}
 803bcc0:	4618      	mov	r0, r3
 803bcc2:	3710      	adds	r7, #16
 803bcc4:	46bd      	mov	sp, r7
 803bcc6:	bd80      	pop	{r7, pc}
 803bcc8:	20007447 	.word	0x20007447
 803bccc:	20007448 	.word	0x20007448
 803bcd0:	20007445 	.word	0x20007445
 803bcd4:	2000744c 	.word	0x2000744c
 803bcd8:	20001ca8 	.word	0x20001ca8
 803bcdc:	20007446 	.word	0x20007446
 803bce0:	08047ef4 	.word	0x08047ef4
 803bce4:	0804a05c 	.word	0x0804a05c

0803bce8 <gos_taskSuspend>:

/*
 * Function: gos_taskSuspend
 */
GOS_INLINE gos_result_t gos_taskSuspend (gos_tid_t taskId)
{
 803bce8:	b580      	push	{r7, lr}
 803bcea:	b086      	sub	sp, #24
 803bcec:	af02      	add	r7, sp, #8
 803bcee:	4603      	mov	r3, r0
 803bcf0:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskSuspendResult = GOS_ERROR;
 803bcf2:	23ae      	movs	r3, #174	; 0xae
 803bcf4:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 803bcf6:	2300      	movs	r3, #0
 803bcf8:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803bcfa:	4b84      	ldr	r3, [pc, #528]	; (803bf0c <gos_taskSuspend+0x224>)
 803bcfc:	781b      	ldrb	r3, [r3, #0]
 803bcfe:	2b00      	cmp	r3, #0
 803bd00:	d108      	bne.n	803bd14 <gos_taskSuspend+0x2c>
 803bd02:	b672      	cpsid	i
 803bd04:	f3ef 8310 	mrs	r3, PRIMASK
 803bd08:	4a81      	ldr	r2, [pc, #516]	; (803bf10 <gos_taskSuspend+0x228>)
 803bd0a:	6013      	str	r3, [r2, #0]
 803bd0c:	f3bf 8f4f 	dsb	sy
 803bd10:	f3bf 8f6f 	isb	sy
 803bd14:	4b7d      	ldr	r3, [pc, #500]	; (803bf0c <gos_taskSuspend+0x224>)
 803bd16:	781b      	ldrb	r3, [r3, #0]
 803bd18:	3301      	adds	r3, #1
 803bd1a:	b2da      	uxtb	r2, r3
 803bd1c:	4b7b      	ldr	r3, [pc, #492]	; (803bf0c <gos_taskSuspend+0x224>)
 803bd1e:	701a      	strb	r2, [r3, #0]
 803bd20:	4b7c      	ldr	r3, [pc, #496]	; (803bf14 <gos_taskSuspend+0x22c>)
 803bd22:	781b      	ldrb	r3, [r3, #0]
 803bd24:	3301      	adds	r3, #1
 803bd26:	b2da      	uxtb	r2, r3
 803bd28:	4b7a      	ldr	r3, [pc, #488]	; (803bf14 <gos_taskSuspend+0x22c>)
 803bd2a:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 803bd2c:	88fb      	ldrh	r3, [r7, #6]
 803bd2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803bd32:	f240 80c1 	bls.w	803beb8 <gos_taskSuspend+0x1d0>
 803bd36:	88fb      	ldrh	r3, [r7, #6]
 803bd38:	f248 022f 	movw	r2, #32815	; 0x802f
 803bd3c:	4293      	cmp	r3, r2
 803bd3e:	f200 80bb 	bhi.w	803beb8 <gos_taskSuspend+0x1d0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803bd42:	88fb      	ldrh	r3, [r7, #6]
 803bd44:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803bd48:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803bd4a:	4b73      	ldr	r3, [pc, #460]	; (803bf18 <gos_taskSuspend+0x230>)
 803bd4c:	681b      	ldr	r3, [r3, #0]
 803bd4e:	4a73      	ldr	r2, [pc, #460]	; (803bf1c <gos_taskSuspend+0x234>)
 803bd50:	216a      	movs	r1, #106	; 0x6a
 803bd52:	fb01 f303 	mul.w	r3, r1, r3
 803bd56:	4413      	add	r3, r2
 803bd58:	3308      	adds	r3, #8
 803bd5a:	881b      	ldrh	r3, [r3, #0]
 803bd5c:	b21b      	sxth	r3, r3
 803bd5e:	2b00      	cmp	r3, #0
 803bd60:	db08      	blt.n	803bd74 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 803bd62:	4b6d      	ldr	r3, [pc, #436]	; (803bf18 <gos_taskSuspend+0x230>)
 803bd64:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803bd66:	68ba      	ldr	r2, [r7, #8]
 803bd68:	429a      	cmp	r2, r3
 803bd6a:	d003      	beq.n	803bd74 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 803bd6c:	4b6c      	ldr	r3, [pc, #432]	; (803bf20 <gos_taskSuspend+0x238>)
 803bd6e:	781b      	ldrb	r3, [r3, #0]
 803bd70:	2b00      	cmp	r3, #0
 803bd72:	d064      	beq.n	803be3e <gos_taskSuspend+0x156>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 803bd74:	4a69      	ldr	r2, [pc, #420]	; (803bf1c <gos_taskSuspend+0x234>)
 803bd76:	68bb      	ldr	r3, [r7, #8]
 803bd78:	216a      	movs	r1, #106	; 0x6a
 803bd7a:	fb01 f303 	mul.w	r3, r1, r3
 803bd7e:	4413      	add	r3, r2
 803bd80:	3304      	adds	r3, #4
 803bd82:	781b      	ldrb	r3, [r3, #0]
 803bd84:	2b0a      	cmp	r3, #10
 803bd86:	d014      	beq.n	803bdb2 <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 803bd88:	4a64      	ldr	r2, [pc, #400]	; (803bf1c <gos_taskSuspend+0x234>)
 803bd8a:	68bb      	ldr	r3, [r7, #8]
 803bd8c:	216a      	movs	r1, #106	; 0x6a
 803bd8e:	fb01 f303 	mul.w	r3, r1, r3
 803bd92:	4413      	add	r3, r2
 803bd94:	3304      	adds	r3, #4
 803bd96:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 803bd98:	2b16      	cmp	r3, #22
 803bd9a:	d00a      	beq.n	803bdb2 <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 803bd9c:	4a5f      	ldr	r2, [pc, #380]	; (803bf1c <gos_taskSuspend+0x234>)
 803bd9e:	68bb      	ldr	r3, [r7, #8]
 803bda0:	216a      	movs	r1, #106	; 0x6a
 803bda2:	fb01 f303 	mul.w	r3, r1, r3
 803bda6:	4413      	add	r3, r2
 803bda8:	3304      	adds	r3, #4
 803bdaa:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 803bdac:	2b19      	cmp	r3, #25
 803bdae:	f040 8082 	bne.w	803beb6 <gos_taskSuspend+0x1ce>
            {
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 803bdb2:	4a5a      	ldr	r2, [pc, #360]	; (803bf1c <gos_taskSuspend+0x234>)
 803bdb4:	68bb      	ldr	r3, [r7, #8]
 803bdb6:	216a      	movs	r1, #106	; 0x6a
 803bdb8:	fb01 f303 	mul.w	r3, r1, r3
 803bdbc:	4413      	add	r3, r2
 803bdbe:	3304      	adds	r3, #4
 803bdc0:	7818      	ldrb	r0, [r3, #0]
 803bdc2:	4a56      	ldr	r2, [pc, #344]	; (803bf1c <gos_taskSuspend+0x234>)
 803bdc4:	68bb      	ldr	r3, [r7, #8]
 803bdc6:	216a      	movs	r1, #106	; 0x6a
 803bdc8:	fb01 f303 	mul.w	r3, r1, r3
 803bdcc:	4413      	add	r3, r2
 803bdce:	3305      	adds	r3, #5
 803bdd0:	4602      	mov	r2, r0
 803bdd2:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 803bdd4:	4a51      	ldr	r2, [pc, #324]	; (803bf1c <gos_taskSuspend+0x234>)
 803bdd6:	68bb      	ldr	r3, [r7, #8]
 803bdd8:	216a      	movs	r1, #106	; 0x6a
 803bdda:	fb01 f303 	mul.w	r3, r1, r3
 803bdde:	4413      	add	r3, r2
 803bde0:	3304      	adds	r3, #4
 803bde2:	2205      	movs	r2, #5
 803bde4:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 803bde6:	2355      	movs	r3, #85	; 0x55
 803bde8:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 803bdea:	4b48      	ldr	r3, [pc, #288]	; (803bf0c <gos_taskSuspend+0x224>)
 803bdec:	781b      	ldrb	r3, [r3, #0]
 803bdee:	2b00      	cmp	r3, #0
 803bdf0:	d005      	beq.n	803bdfe <gos_taskSuspend+0x116>
 803bdf2:	4b46      	ldr	r3, [pc, #280]	; (803bf0c <gos_taskSuspend+0x224>)
 803bdf4:	781b      	ldrb	r3, [r3, #0]
 803bdf6:	3b01      	subs	r3, #1
 803bdf8:	b2da      	uxtb	r2, r3
 803bdfa:	4b44      	ldr	r3, [pc, #272]	; (803bf0c <gos_taskSuspend+0x224>)
 803bdfc:	701a      	strb	r2, [r3, #0]
 803bdfe:	4b43      	ldr	r3, [pc, #268]	; (803bf0c <gos_taskSuspend+0x224>)
 803be00:	781b      	ldrb	r3, [r3, #0]
 803be02:	2b00      	cmp	r3, #0
 803be04:	d108      	bne.n	803be18 <gos_taskSuspend+0x130>
 803be06:	4b42      	ldr	r3, [pc, #264]	; (803bf10 <gos_taskSuspend+0x228>)
 803be08:	681b      	ldr	r3, [r3, #0]
 803be0a:	f383 8810 	msr	PRIMASK, r3
 803be0e:	b662      	cpsie	i
 803be10:	f3bf 8f4f 	dsb	sy
 803be14:	f3bf 8f6f 	isb	sy
 803be18:	4b3e      	ldr	r3, [pc, #248]	; (803bf14 <gos_taskSuspend+0x22c>)
 803be1a:	781b      	ldrb	r3, [r3, #0]
 803be1c:	2b00      	cmp	r3, #0
 803be1e:	d005      	beq.n	803be2c <gos_taskSuspend+0x144>
 803be20:	4b3c      	ldr	r3, [pc, #240]	; (803bf14 <gos_taskSuspend+0x22c>)
 803be22:	781b      	ldrb	r3, [r3, #0]
 803be24:	3b01      	subs	r3, #1
 803be26:	b2da      	uxtb	r2, r3
 803be28:	4b3a      	ldr	r3, [pc, #232]	; (803bf14 <gos_taskSuspend+0x22c>)
 803be2a:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 803be2c:	4b3a      	ldr	r3, [pc, #232]	; (803bf18 <gos_taskSuspend+0x230>)
 803be2e:	681b      	ldr	r3, [r3, #0]
 803be30:	68ba      	ldr	r2, [r7, #8]
 803be32:	429a      	cmp	r2, r3
 803be34:	d13f      	bne.n	803beb6 <gos_taskSuspend+0x1ce>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 803be36:	2009      	movs	r0, #9
 803be38:	f7ff f9c2 	bl	803b1c0 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 803be3c:	e03b      	b.n	803beb6 <gos_taskSuspend+0x1ce>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 803be3e:	4b33      	ldr	r3, [pc, #204]	; (803bf0c <gos_taskSuspend+0x224>)
 803be40:	781b      	ldrb	r3, [r3, #0]
 803be42:	2b00      	cmp	r3, #0
 803be44:	d005      	beq.n	803be52 <gos_taskSuspend+0x16a>
 803be46:	4b31      	ldr	r3, [pc, #196]	; (803bf0c <gos_taskSuspend+0x224>)
 803be48:	781b      	ldrb	r3, [r3, #0]
 803be4a:	3b01      	subs	r3, #1
 803be4c:	b2da      	uxtb	r2, r3
 803be4e:	4b2f      	ldr	r3, [pc, #188]	; (803bf0c <gos_taskSuspend+0x224>)
 803be50:	701a      	strb	r2, [r3, #0]
 803be52:	4b2e      	ldr	r3, [pc, #184]	; (803bf0c <gos_taskSuspend+0x224>)
 803be54:	781b      	ldrb	r3, [r3, #0]
 803be56:	2b00      	cmp	r3, #0
 803be58:	d108      	bne.n	803be6c <gos_taskSuspend+0x184>
 803be5a:	4b2d      	ldr	r3, [pc, #180]	; (803bf10 <gos_taskSuspend+0x228>)
 803be5c:	681b      	ldr	r3, [r3, #0]
 803be5e:	f383 8810 	msr	PRIMASK, r3
 803be62:	b662      	cpsie	i
 803be64:	f3bf 8f4f 	dsb	sy
 803be68:	f3bf 8f6f 	isb	sy
 803be6c:	4b29      	ldr	r3, [pc, #164]	; (803bf14 <gos_taskSuspend+0x22c>)
 803be6e:	781b      	ldrb	r3, [r3, #0]
 803be70:	2b00      	cmp	r3, #0
 803be72:	d005      	beq.n	803be80 <gos_taskSuspend+0x198>
 803be74:	4b27      	ldr	r3, [pc, #156]	; (803bf14 <gos_taskSuspend+0x22c>)
 803be76:	781b      	ldrb	r3, [r3, #0]
 803be78:	3b01      	subs	r3, #1
 803be7a:	b2da      	uxtb	r2, r3
 803be7c:	4b25      	ldr	r3, [pc, #148]	; (803bf14 <gos_taskSuspend+0x22c>)
 803be7e:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 803be80:	4b25      	ldr	r3, [pc, #148]	; (803bf18 <gos_taskSuspend+0x230>)
 803be82:	681b      	ldr	r3, [r3, #0]
 803be84:	226a      	movs	r2, #106	; 0x6a
 803be86:	fb02 f303 	mul.w	r3, r2, r3
 803be8a:	3308      	adds	r3, #8
 803be8c:	4a23      	ldr	r2, [pc, #140]	; (803bf1c <gos_taskSuspend+0x234>)
 803be8e:	4413      	add	r3, r2
 803be90:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 803be92:	68ba      	ldr	r2, [r7, #8]
 803be94:	216a      	movs	r1, #106	; 0x6a
 803be96:	fb01 f202 	mul.w	r2, r1, r2
 803be9a:	3208      	adds	r2, #8
 803be9c:	491f      	ldr	r1, [pc, #124]	; (803bf1c <gos_taskSuspend+0x234>)
 803be9e:	440a      	add	r2, r1
 803bea0:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 803bea2:	9201      	str	r2, [sp, #4]
 803bea4:	9300      	str	r3, [sp, #0]
 803bea6:	4b1f      	ldr	r3, [pc, #124]	; (803bf24 <gos_taskSuspend+0x23c>)
 803bea8:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 803beac:	491e      	ldr	r1, [pc, #120]	; (803bf28 <gos_taskSuspend+0x240>)
 803beae:	2034      	movs	r0, #52	; 0x34
 803beb0:	f001 fb72 	bl	803d598 <gos_errorHandler>
 803beb4:	e000      	b.n	803beb8 <gos_taskSuspend+0x1d0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 803beb6:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskSuspendResult != GOS_SUCCESS)
 803beb8:	7bfb      	ldrb	r3, [r7, #15]
 803beba:	2b55      	cmp	r3, #85	; 0x55
 803bebc:	d020      	beq.n	803bf00 <gos_taskSuspend+0x218>
    {
        GOS_ATOMIC_EXIT
 803bebe:	4b13      	ldr	r3, [pc, #76]	; (803bf0c <gos_taskSuspend+0x224>)
 803bec0:	781b      	ldrb	r3, [r3, #0]
 803bec2:	2b00      	cmp	r3, #0
 803bec4:	d005      	beq.n	803bed2 <gos_taskSuspend+0x1ea>
 803bec6:	4b11      	ldr	r3, [pc, #68]	; (803bf0c <gos_taskSuspend+0x224>)
 803bec8:	781b      	ldrb	r3, [r3, #0]
 803beca:	3b01      	subs	r3, #1
 803becc:	b2da      	uxtb	r2, r3
 803bece:	4b0f      	ldr	r3, [pc, #60]	; (803bf0c <gos_taskSuspend+0x224>)
 803bed0:	701a      	strb	r2, [r3, #0]
 803bed2:	4b0e      	ldr	r3, [pc, #56]	; (803bf0c <gos_taskSuspend+0x224>)
 803bed4:	781b      	ldrb	r3, [r3, #0]
 803bed6:	2b00      	cmp	r3, #0
 803bed8:	d108      	bne.n	803beec <gos_taskSuspend+0x204>
 803beda:	4b0d      	ldr	r3, [pc, #52]	; (803bf10 <gos_taskSuspend+0x228>)
 803bedc:	681b      	ldr	r3, [r3, #0]
 803bede:	f383 8810 	msr	PRIMASK, r3
 803bee2:	b662      	cpsie	i
 803bee4:	f3bf 8f4f 	dsb	sy
 803bee8:	f3bf 8f6f 	isb	sy
 803beec:	4b09      	ldr	r3, [pc, #36]	; (803bf14 <gos_taskSuspend+0x22c>)
 803beee:	781b      	ldrb	r3, [r3, #0]
 803bef0:	2b00      	cmp	r3, #0
 803bef2:	d005      	beq.n	803bf00 <gos_taskSuspend+0x218>
 803bef4:	4b07      	ldr	r3, [pc, #28]	; (803bf14 <gos_taskSuspend+0x22c>)
 803bef6:	781b      	ldrb	r3, [r3, #0]
 803bef8:	3b01      	subs	r3, #1
 803befa:	b2da      	uxtb	r2, r3
 803befc:	4b05      	ldr	r3, [pc, #20]	; (803bf14 <gos_taskSuspend+0x22c>)
 803befe:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskSuspendResult;
 803bf00:	7bfb      	ldrb	r3, [r7, #15]
}
 803bf02:	4618      	mov	r0, r3
 803bf04:	3710      	adds	r7, #16
 803bf06:	46bd      	mov	sp, r7
 803bf08:	bd80      	pop	{r7, pc}
 803bf0a:	bf00      	nop
 803bf0c:	20007447 	.word	0x20007447
 803bf10:	20007448 	.word	0x20007448
 803bf14:	20007445 	.word	0x20007445
 803bf18:	2000744c 	.word	0x2000744c
 803bf1c:	20001ca8 	.word	0x20001ca8
 803bf20:	20007446 	.word	0x20007446
 803bf24:	08047f1c 	.word	0x08047f1c
 803bf28:	0804a06c 	.word	0x0804a06c

0803bf2c <gos_taskResume>:

/*
 * Function: gos_taskResume
 */
GOS_INLINE gos_result_t gos_taskResume (gos_tid_t taskId)
{
 803bf2c:	b580      	push	{r7, lr}
 803bf2e:	b086      	sub	sp, #24
 803bf30:	af02      	add	r7, sp, #8
 803bf32:	4603      	mov	r3, r0
 803bf34:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskResumeResult = GOS_ERROR;
 803bf36:	23ae      	movs	r3, #174	; 0xae
 803bf38:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 803bf3a:	2300      	movs	r3, #0
 803bf3c:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803bf3e:	4b4a      	ldr	r3, [pc, #296]	; (803c068 <gos_taskResume+0x13c>)
 803bf40:	781b      	ldrb	r3, [r3, #0]
 803bf42:	2b00      	cmp	r3, #0
 803bf44:	d108      	bne.n	803bf58 <gos_taskResume+0x2c>
 803bf46:	b672      	cpsid	i
 803bf48:	f3ef 8310 	mrs	r3, PRIMASK
 803bf4c:	4a47      	ldr	r2, [pc, #284]	; (803c06c <gos_taskResume+0x140>)
 803bf4e:	6013      	str	r3, [r2, #0]
 803bf50:	f3bf 8f4f 	dsb	sy
 803bf54:	f3bf 8f6f 	isb	sy
 803bf58:	4b43      	ldr	r3, [pc, #268]	; (803c068 <gos_taskResume+0x13c>)
 803bf5a:	781b      	ldrb	r3, [r3, #0]
 803bf5c:	3301      	adds	r3, #1
 803bf5e:	b2da      	uxtb	r2, r3
 803bf60:	4b41      	ldr	r3, [pc, #260]	; (803c068 <gos_taskResume+0x13c>)
 803bf62:	701a      	strb	r2, [r3, #0]
 803bf64:	4b42      	ldr	r3, [pc, #264]	; (803c070 <gos_taskResume+0x144>)
 803bf66:	781b      	ldrb	r3, [r3, #0]
 803bf68:	3301      	adds	r3, #1
 803bf6a:	b2da      	uxtb	r2, r3
 803bf6c:	4b40      	ldr	r3, [pc, #256]	; (803c070 <gos_taskResume+0x144>)
 803bf6e:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 803bf70:	88fb      	ldrh	r3, [r7, #6]
 803bf72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803bf76:	d950      	bls.n	803c01a <gos_taskResume+0xee>
 803bf78:	88fb      	ldrh	r3, [r7, #6]
 803bf7a:	f248 022f 	movw	r2, #32815	; 0x802f
 803bf7e:	4293      	cmp	r3, r2
 803bf80:	d84b      	bhi.n	803c01a <gos_taskResume+0xee>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803bf82:	88fb      	ldrh	r3, [r7, #6]
 803bf84:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803bf88:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803bf8a:	4b3a      	ldr	r3, [pc, #232]	; (803c074 <gos_taskResume+0x148>)
 803bf8c:	681b      	ldr	r3, [r3, #0]
 803bf8e:	4a3a      	ldr	r2, [pc, #232]	; (803c078 <gos_taskResume+0x14c>)
 803bf90:	216a      	movs	r1, #106	; 0x6a
 803bf92:	fb01 f303 	mul.w	r3, r1, r3
 803bf96:	4413      	add	r3, r2
 803bf98:	3308      	adds	r3, #8
 803bf9a:	881b      	ldrh	r3, [r3, #0]
 803bf9c:	b21b      	sxth	r3, r3
 803bf9e:	2b00      	cmp	r3, #0
 803bfa0:	db03      	blt.n	803bfaa <gos_taskResume+0x7e>
            inIsr > 0)
 803bfa2:	4b36      	ldr	r3, [pc, #216]	; (803c07c <gos_taskResume+0x150>)
 803bfa4:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803bfa6:	2b00      	cmp	r3, #0
 803bfa8:	d01d      	beq.n	803bfe6 <gos_taskResume+0xba>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 803bfaa:	4a33      	ldr	r2, [pc, #204]	; (803c078 <gos_taskResume+0x14c>)
 803bfac:	68bb      	ldr	r3, [r7, #8]
 803bfae:	216a      	movs	r1, #106	; 0x6a
 803bfb0:	fb01 f303 	mul.w	r3, r1, r3
 803bfb4:	4413      	add	r3, r2
 803bfb6:	3304      	adds	r3, #4
 803bfb8:	781b      	ldrb	r3, [r3, #0]
 803bfba:	2b05      	cmp	r3, #5
 803bfbc:	d12d      	bne.n	803c01a <gos_taskResume+0xee>
            {
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 803bfbe:	4a2e      	ldr	r2, [pc, #184]	; (803c078 <gos_taskResume+0x14c>)
 803bfc0:	68bb      	ldr	r3, [r7, #8]
 803bfc2:	216a      	movs	r1, #106	; 0x6a
 803bfc4:	fb01 f303 	mul.w	r3, r1, r3
 803bfc8:	4413      	add	r3, r2
 803bfca:	3305      	adds	r3, #5
 803bfcc:	7818      	ldrb	r0, [r3, #0]
 803bfce:	4a2a      	ldr	r2, [pc, #168]	; (803c078 <gos_taskResume+0x14c>)
 803bfd0:	68bb      	ldr	r3, [r7, #8]
 803bfd2:	216a      	movs	r1, #106	; 0x6a
 803bfd4:	fb01 f303 	mul.w	r3, r1, r3
 803bfd8:	4413      	add	r3, r2
 803bfda:	3304      	adds	r3, #4
 803bfdc:	4602      	mov	r2, r0
 803bfde:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 803bfe0:	2355      	movs	r3, #85	; 0x55
 803bfe2:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 803bfe4:	e019      	b.n	803c01a <gos_taskResume+0xee>
            }
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 803bfe6:	4b23      	ldr	r3, [pc, #140]	; (803c074 <gos_taskResume+0x148>)
 803bfe8:	681b      	ldr	r3, [r3, #0]
 803bfea:	226a      	movs	r2, #106	; 0x6a
 803bfec:	fb02 f303 	mul.w	r3, r2, r3
 803bff0:	3308      	adds	r3, #8
 803bff2:	4a21      	ldr	r2, [pc, #132]	; (803c078 <gos_taskResume+0x14c>)
 803bff4:	4413      	add	r3, r2
 803bff6:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 803bff8:	68ba      	ldr	r2, [r7, #8]
 803bffa:	216a      	movs	r1, #106	; 0x6a
 803bffc:	fb01 f202 	mul.w	r2, r1, r2
 803c000:	3208      	adds	r2, #8
 803c002:	491d      	ldr	r1, [pc, #116]	; (803c078 <gos_taskResume+0x14c>)
 803c004:	440a      	add	r2, r1
 803c006:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 803c008:	9201      	str	r2, [sp, #4]
 803c00a:	9300      	str	r3, [sp, #0]
 803c00c:	4b1c      	ldr	r3, [pc, #112]	; (803c080 <gos_taskResume+0x154>)
 803c00e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 803c012:	491c      	ldr	r1, [pc, #112]	; (803c084 <gos_taskResume+0x158>)
 803c014:	2034      	movs	r0, #52	; 0x34
 803c016:	f001 fabf 	bl	803d598 <gos_errorHandler>
    else
    {
        // Task ID error.
    }

    GOS_ATOMIC_EXIT
 803c01a:	4b13      	ldr	r3, [pc, #76]	; (803c068 <gos_taskResume+0x13c>)
 803c01c:	781b      	ldrb	r3, [r3, #0]
 803c01e:	2b00      	cmp	r3, #0
 803c020:	d005      	beq.n	803c02e <gos_taskResume+0x102>
 803c022:	4b11      	ldr	r3, [pc, #68]	; (803c068 <gos_taskResume+0x13c>)
 803c024:	781b      	ldrb	r3, [r3, #0]
 803c026:	3b01      	subs	r3, #1
 803c028:	b2da      	uxtb	r2, r3
 803c02a:	4b0f      	ldr	r3, [pc, #60]	; (803c068 <gos_taskResume+0x13c>)
 803c02c:	701a      	strb	r2, [r3, #0]
 803c02e:	4b0e      	ldr	r3, [pc, #56]	; (803c068 <gos_taskResume+0x13c>)
 803c030:	781b      	ldrb	r3, [r3, #0]
 803c032:	2b00      	cmp	r3, #0
 803c034:	d108      	bne.n	803c048 <gos_taskResume+0x11c>
 803c036:	4b0d      	ldr	r3, [pc, #52]	; (803c06c <gos_taskResume+0x140>)
 803c038:	681b      	ldr	r3, [r3, #0]
 803c03a:	f383 8810 	msr	PRIMASK, r3
 803c03e:	b662      	cpsie	i
 803c040:	f3bf 8f4f 	dsb	sy
 803c044:	f3bf 8f6f 	isb	sy
 803c048:	4b09      	ldr	r3, [pc, #36]	; (803c070 <gos_taskResume+0x144>)
 803c04a:	781b      	ldrb	r3, [r3, #0]
 803c04c:	2b00      	cmp	r3, #0
 803c04e:	d005      	beq.n	803c05c <gos_taskResume+0x130>
 803c050:	4b07      	ldr	r3, [pc, #28]	; (803c070 <gos_taskResume+0x144>)
 803c052:	781b      	ldrb	r3, [r3, #0]
 803c054:	3b01      	subs	r3, #1
 803c056:	b2da      	uxtb	r2, r3
 803c058:	4b05      	ldr	r3, [pc, #20]	; (803c070 <gos_taskResume+0x144>)
 803c05a:	701a      	strb	r2, [r3, #0]

    return taskResumeResult;
 803c05c:	7bfb      	ldrb	r3, [r7, #15]
}
 803c05e:	4618      	mov	r0, r3
 803c060:	3710      	adds	r7, #16
 803c062:	46bd      	mov	sp, r7
 803c064:	bd80      	pop	{r7, pc}
 803c066:	bf00      	nop
 803c068:	20007447 	.word	0x20007447
 803c06c:	20007448 	.word	0x20007448
 803c070:	20007445 	.word	0x20007445
 803c074:	2000744c 	.word	0x2000744c
 803c078:	20001ca8 	.word	0x20001ca8
 803c07c:	20007446 	.word	0x20007446
 803c080:	08047f44 	.word	0x08047f44
 803c084:	0804a07c 	.word	0x0804a07c

0803c088 <gos_taskBlock>:

/*
 * Function: gos_taskBlock
 */
GOS_INLINE gos_result_t gos_taskBlock (gos_tid_t taskId, gos_blockMaxTick_t blockTicks)
{
 803c088:	b580      	push	{r7, lr}
 803c08a:	b086      	sub	sp, #24
 803c08c:	af02      	add	r7, sp, #8
 803c08e:	4603      	mov	r3, r0
 803c090:	6039      	str	r1, [r7, #0]
 803c092:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskBlockResult = GOS_ERROR;
 803c094:	23ae      	movs	r3, #174	; 0xae
 803c096:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 803c098:	2300      	movs	r3, #0
 803c09a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803c09c:	4b7b      	ldr	r3, [pc, #492]	; (803c28c <gos_taskBlock+0x204>)
 803c09e:	781b      	ldrb	r3, [r3, #0]
 803c0a0:	2b00      	cmp	r3, #0
 803c0a2:	d108      	bne.n	803c0b6 <gos_taskBlock+0x2e>
 803c0a4:	b672      	cpsid	i
 803c0a6:	f3ef 8310 	mrs	r3, PRIMASK
 803c0aa:	4a79      	ldr	r2, [pc, #484]	; (803c290 <gos_taskBlock+0x208>)
 803c0ac:	6013      	str	r3, [r2, #0]
 803c0ae:	f3bf 8f4f 	dsb	sy
 803c0b2:	f3bf 8f6f 	isb	sy
 803c0b6:	4b75      	ldr	r3, [pc, #468]	; (803c28c <gos_taskBlock+0x204>)
 803c0b8:	781b      	ldrb	r3, [r3, #0]
 803c0ba:	3301      	adds	r3, #1
 803c0bc:	b2da      	uxtb	r2, r3
 803c0be:	4b73      	ldr	r3, [pc, #460]	; (803c28c <gos_taskBlock+0x204>)
 803c0c0:	701a      	strb	r2, [r3, #0]
 803c0c2:	4b74      	ldr	r3, [pc, #464]	; (803c294 <gos_taskBlock+0x20c>)
 803c0c4:	781b      	ldrb	r3, [r3, #0]
 803c0c6:	3301      	adds	r3, #1
 803c0c8:	b2da      	uxtb	r2, r3
 803c0ca:	4b72      	ldr	r3, [pc, #456]	; (803c294 <gos_taskBlock+0x20c>)
 803c0cc:	701a      	strb	r2, [r3, #0]

    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 803c0ce:	88fb      	ldrh	r3, [r7, #6]
 803c0d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803c0d4:	f240 80b0 	bls.w	803c238 <gos_taskBlock+0x1b0>
 803c0d8:	88fb      	ldrh	r3, [r7, #6]
 803c0da:	f248 022f 	movw	r2, #32815	; 0x802f
 803c0de:	4293      	cmp	r3, r2
 803c0e0:	f200 80aa 	bhi.w	803c238 <gos_taskBlock+0x1b0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803c0e4:	88fb      	ldrh	r3, [r7, #6]
 803c0e6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803c0ea:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803c0ec:	4b6a      	ldr	r3, [pc, #424]	; (803c298 <gos_taskBlock+0x210>)
 803c0ee:	681b      	ldr	r3, [r3, #0]
 803c0f0:	4a6a      	ldr	r2, [pc, #424]	; (803c29c <gos_taskBlock+0x214>)
 803c0f2:	216a      	movs	r1, #106	; 0x6a
 803c0f4:	fb01 f303 	mul.w	r3, r1, r3
 803c0f8:	4413      	add	r3, r2
 803c0fa:	3308      	adds	r3, #8
 803c0fc:	881b      	ldrh	r3, [r3, #0]
 803c0fe:	b21b      	sxth	r3, r3
 803c100:	2b00      	cmp	r3, #0
 803c102:	db08      	blt.n	803c116 <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 803c104:	4b64      	ldr	r3, [pc, #400]	; (803c298 <gos_taskBlock+0x210>)
 803c106:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803c108:	68ba      	ldr	r2, [r7, #8]
 803c10a:	429a      	cmp	r2, r3
 803c10c:	d003      	beq.n	803c116 <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 803c10e:	4b64      	ldr	r3, [pc, #400]	; (803c2a0 <gos_taskBlock+0x218>)
 803c110:	781b      	ldrb	r3, [r3, #0]
 803c112:	2b00      	cmp	r3, #0
 803c114:	d053      	beq.n	803c1be <gos_taskBlock+0x136>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 803c116:	4a61      	ldr	r2, [pc, #388]	; (803c29c <gos_taskBlock+0x214>)
 803c118:	68bb      	ldr	r3, [r7, #8]
 803c11a:	216a      	movs	r1, #106	; 0x6a
 803c11c:	fb01 f303 	mul.w	r3, r1, r3
 803c120:	4413      	add	r3, r2
 803c122:	3304      	adds	r3, #4
 803c124:	781b      	ldrb	r3, [r3, #0]
 803c126:	2b0a      	cmp	r3, #10
 803c128:	f040 8085 	bne.w	803c236 <gos_taskBlock+0x1ae>
            {
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 803c12c:	4a5b      	ldr	r2, [pc, #364]	; (803c29c <gos_taskBlock+0x214>)
 803c12e:	68bb      	ldr	r3, [r7, #8]
 803c130:	216a      	movs	r1, #106	; 0x6a
 803c132:	fb01 f303 	mul.w	r3, r1, r3
 803c136:	4413      	add	r3, r2
 803c138:	3304      	adds	r3, #4
 803c13a:	2219      	movs	r2, #25
 803c13c:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 803c13e:	4a57      	ldr	r2, [pc, #348]	; (803c29c <gos_taskBlock+0x214>)
 803c140:	68bb      	ldr	r3, [r7, #8]
 803c142:	216a      	movs	r1, #106	; 0x6a
 803c144:	fb01 f303 	mul.w	r3, r1, r3
 803c148:	4413      	add	r3, r2
 803c14a:	3334      	adds	r3, #52	; 0x34
 803c14c:	683a      	ldr	r2, [r7, #0]
 803c14e:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 803c150:	4a52      	ldr	r2, [pc, #328]	; (803c29c <gos_taskBlock+0x214>)
 803c152:	68bb      	ldr	r3, [r7, #8]
 803c154:	216a      	movs	r1, #106	; 0x6a
 803c156:	fb01 f303 	mul.w	r3, r1, r3
 803c15a:	4413      	add	r3, r2
 803c15c:	3338      	adds	r3, #56	; 0x38
 803c15e:	2200      	movs	r2, #0
 803c160:	801a      	strh	r2, [r3, #0]
 803c162:	2200      	movs	r2, #0
 803c164:	805a      	strh	r2, [r3, #2]

                taskBlockResult = GOS_SUCCESS;
 803c166:	2355      	movs	r3, #85	; 0x55
 803c168:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 803c16a:	4b48      	ldr	r3, [pc, #288]	; (803c28c <gos_taskBlock+0x204>)
 803c16c:	781b      	ldrb	r3, [r3, #0]
 803c16e:	2b00      	cmp	r3, #0
 803c170:	d005      	beq.n	803c17e <gos_taskBlock+0xf6>
 803c172:	4b46      	ldr	r3, [pc, #280]	; (803c28c <gos_taskBlock+0x204>)
 803c174:	781b      	ldrb	r3, [r3, #0]
 803c176:	3b01      	subs	r3, #1
 803c178:	b2da      	uxtb	r2, r3
 803c17a:	4b44      	ldr	r3, [pc, #272]	; (803c28c <gos_taskBlock+0x204>)
 803c17c:	701a      	strb	r2, [r3, #0]
 803c17e:	4b43      	ldr	r3, [pc, #268]	; (803c28c <gos_taskBlock+0x204>)
 803c180:	781b      	ldrb	r3, [r3, #0]
 803c182:	2b00      	cmp	r3, #0
 803c184:	d108      	bne.n	803c198 <gos_taskBlock+0x110>
 803c186:	4b42      	ldr	r3, [pc, #264]	; (803c290 <gos_taskBlock+0x208>)
 803c188:	681b      	ldr	r3, [r3, #0]
 803c18a:	f383 8810 	msr	PRIMASK, r3
 803c18e:	b662      	cpsie	i
 803c190:	f3bf 8f4f 	dsb	sy
 803c194:	f3bf 8f6f 	isb	sy
 803c198:	4b3e      	ldr	r3, [pc, #248]	; (803c294 <gos_taskBlock+0x20c>)
 803c19a:	781b      	ldrb	r3, [r3, #0]
 803c19c:	2b00      	cmp	r3, #0
 803c19e:	d005      	beq.n	803c1ac <gos_taskBlock+0x124>
 803c1a0:	4b3c      	ldr	r3, [pc, #240]	; (803c294 <gos_taskBlock+0x20c>)
 803c1a2:	781b      	ldrb	r3, [r3, #0]
 803c1a4:	3b01      	subs	r3, #1
 803c1a6:	b2da      	uxtb	r2, r3
 803c1a8:	4b3a      	ldr	r3, [pc, #232]	; (803c294 <gos_taskBlock+0x20c>)
 803c1aa:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 803c1ac:	4b3a      	ldr	r3, [pc, #232]	; (803c298 <gos_taskBlock+0x210>)
 803c1ae:	681b      	ldr	r3, [r3, #0]
 803c1b0:	68ba      	ldr	r2, [r7, #8]
 803c1b2:	429a      	cmp	r2, r3
 803c1b4:	d13f      	bne.n	803c236 <gos_taskBlock+0x1ae>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 803c1b6:	2009      	movs	r0, #9
 803c1b8:	f7ff f802 	bl	803b1c0 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 803c1bc:	e03b      	b.n	803c236 <gos_taskBlock+0x1ae>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 803c1be:	4b33      	ldr	r3, [pc, #204]	; (803c28c <gos_taskBlock+0x204>)
 803c1c0:	781b      	ldrb	r3, [r3, #0]
 803c1c2:	2b00      	cmp	r3, #0
 803c1c4:	d005      	beq.n	803c1d2 <gos_taskBlock+0x14a>
 803c1c6:	4b31      	ldr	r3, [pc, #196]	; (803c28c <gos_taskBlock+0x204>)
 803c1c8:	781b      	ldrb	r3, [r3, #0]
 803c1ca:	3b01      	subs	r3, #1
 803c1cc:	b2da      	uxtb	r2, r3
 803c1ce:	4b2f      	ldr	r3, [pc, #188]	; (803c28c <gos_taskBlock+0x204>)
 803c1d0:	701a      	strb	r2, [r3, #0]
 803c1d2:	4b2e      	ldr	r3, [pc, #184]	; (803c28c <gos_taskBlock+0x204>)
 803c1d4:	781b      	ldrb	r3, [r3, #0]
 803c1d6:	2b00      	cmp	r3, #0
 803c1d8:	d108      	bne.n	803c1ec <gos_taskBlock+0x164>
 803c1da:	4b2d      	ldr	r3, [pc, #180]	; (803c290 <gos_taskBlock+0x208>)
 803c1dc:	681b      	ldr	r3, [r3, #0]
 803c1de:	f383 8810 	msr	PRIMASK, r3
 803c1e2:	b662      	cpsie	i
 803c1e4:	f3bf 8f4f 	dsb	sy
 803c1e8:	f3bf 8f6f 	isb	sy
 803c1ec:	4b29      	ldr	r3, [pc, #164]	; (803c294 <gos_taskBlock+0x20c>)
 803c1ee:	781b      	ldrb	r3, [r3, #0]
 803c1f0:	2b00      	cmp	r3, #0
 803c1f2:	d005      	beq.n	803c200 <gos_taskBlock+0x178>
 803c1f4:	4b27      	ldr	r3, [pc, #156]	; (803c294 <gos_taskBlock+0x20c>)
 803c1f6:	781b      	ldrb	r3, [r3, #0]
 803c1f8:	3b01      	subs	r3, #1
 803c1fa:	b2da      	uxtb	r2, r3
 803c1fc:	4b25      	ldr	r3, [pc, #148]	; (803c294 <gos_taskBlock+0x20c>)
 803c1fe:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 803c200:	4b25      	ldr	r3, [pc, #148]	; (803c298 <gos_taskBlock+0x210>)
 803c202:	681b      	ldr	r3, [r3, #0]
 803c204:	226a      	movs	r2, #106	; 0x6a
 803c206:	fb02 f303 	mul.w	r3, r2, r3
 803c20a:	3308      	adds	r3, #8
 803c20c:	4a23      	ldr	r2, [pc, #140]	; (803c29c <gos_taskBlock+0x214>)
 803c20e:	4413      	add	r3, r2
 803c210:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 803c212:	68ba      	ldr	r2, [r7, #8]
 803c214:	216a      	movs	r1, #106	; 0x6a
 803c216:	fb01 f202 	mul.w	r2, r1, r2
 803c21a:	3208      	adds	r2, #8
 803c21c:	491f      	ldr	r1, [pc, #124]	; (803c29c <gos_taskBlock+0x214>)
 803c21e:	440a      	add	r2, r1
 803c220:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 803c222:	9201      	str	r2, [sp, #4]
 803c224:	9300      	str	r3, [sp, #0]
 803c226:	4b1f      	ldr	r3, [pc, #124]	; (803c2a4 <gos_taskBlock+0x21c>)
 803c228:	f44f 720b 	mov.w	r2, #556	; 0x22c
 803c22c:	491e      	ldr	r1, [pc, #120]	; (803c2a8 <gos_taskBlock+0x220>)
 803c22e:	2034      	movs	r0, #52	; 0x34
 803c230:	f001 f9b2 	bl	803d598 <gos_errorHandler>
 803c234:	e000      	b.n	803c238 <gos_taskBlock+0x1b0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 803c236:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskBlockResult != GOS_SUCCESS)
 803c238:	7bfb      	ldrb	r3, [r7, #15]
 803c23a:	2b55      	cmp	r3, #85	; 0x55
 803c23c:	d020      	beq.n	803c280 <gos_taskBlock+0x1f8>
    {
        GOS_ATOMIC_EXIT
 803c23e:	4b13      	ldr	r3, [pc, #76]	; (803c28c <gos_taskBlock+0x204>)
 803c240:	781b      	ldrb	r3, [r3, #0]
 803c242:	2b00      	cmp	r3, #0
 803c244:	d005      	beq.n	803c252 <gos_taskBlock+0x1ca>
 803c246:	4b11      	ldr	r3, [pc, #68]	; (803c28c <gos_taskBlock+0x204>)
 803c248:	781b      	ldrb	r3, [r3, #0]
 803c24a:	3b01      	subs	r3, #1
 803c24c:	b2da      	uxtb	r2, r3
 803c24e:	4b0f      	ldr	r3, [pc, #60]	; (803c28c <gos_taskBlock+0x204>)
 803c250:	701a      	strb	r2, [r3, #0]
 803c252:	4b0e      	ldr	r3, [pc, #56]	; (803c28c <gos_taskBlock+0x204>)
 803c254:	781b      	ldrb	r3, [r3, #0]
 803c256:	2b00      	cmp	r3, #0
 803c258:	d108      	bne.n	803c26c <gos_taskBlock+0x1e4>
 803c25a:	4b0d      	ldr	r3, [pc, #52]	; (803c290 <gos_taskBlock+0x208>)
 803c25c:	681b      	ldr	r3, [r3, #0]
 803c25e:	f383 8810 	msr	PRIMASK, r3
 803c262:	b662      	cpsie	i
 803c264:	f3bf 8f4f 	dsb	sy
 803c268:	f3bf 8f6f 	isb	sy
 803c26c:	4b09      	ldr	r3, [pc, #36]	; (803c294 <gos_taskBlock+0x20c>)
 803c26e:	781b      	ldrb	r3, [r3, #0]
 803c270:	2b00      	cmp	r3, #0
 803c272:	d005      	beq.n	803c280 <gos_taskBlock+0x1f8>
 803c274:	4b07      	ldr	r3, [pc, #28]	; (803c294 <gos_taskBlock+0x20c>)
 803c276:	781b      	ldrb	r3, [r3, #0]
 803c278:	3b01      	subs	r3, #1
 803c27a:	b2da      	uxtb	r2, r3
 803c27c:	4b05      	ldr	r3, [pc, #20]	; (803c294 <gos_taskBlock+0x20c>)
 803c27e:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskBlockResult;
 803c280:	7bfb      	ldrb	r3, [r7, #15]
}
 803c282:	4618      	mov	r0, r3
 803c284:	3710      	adds	r7, #16
 803c286:	46bd      	mov	sp, r7
 803c288:	bd80      	pop	{r7, pc}
 803c28a:	bf00      	nop
 803c28c:	20007447 	.word	0x20007447
 803c290:	20007448 	.word	0x20007448
 803c294:	20007445 	.word	0x20007445
 803c298:	2000744c 	.word	0x2000744c
 803c29c:	20001ca8 	.word	0x20001ca8
 803c2a0:	20007446 	.word	0x20007446
 803c2a4:	08047f6c 	.word	0x08047f6c
 803c2a8:	0804a08c 	.word	0x0804a08c

0803c2ac <gos_taskUnblock>:

/*
 * Function: gos_taskUnblock
 */
GOS_INLINE gos_result_t gos_taskUnblock (gos_tid_t taskId)
{
 803c2ac:	b580      	push	{r7, lr}
 803c2ae:	b086      	sub	sp, #24
 803c2b0:	af02      	add	r7, sp, #8
 803c2b2:	4603      	mov	r3, r0
 803c2b4:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskUnblockResult = GOS_ERROR;
 803c2b6:	23ae      	movs	r3, #174	; 0xae
 803c2b8:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 803c2ba:	2300      	movs	r3, #0
 803c2bc:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803c2be:	4b68      	ldr	r3, [pc, #416]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c2c0:	781b      	ldrb	r3, [r3, #0]
 803c2c2:	2b00      	cmp	r3, #0
 803c2c4:	d108      	bne.n	803c2d8 <gos_taskUnblock+0x2c>
 803c2c6:	b672      	cpsid	i
 803c2c8:	f3ef 8310 	mrs	r3, PRIMASK
 803c2cc:	4a65      	ldr	r2, [pc, #404]	; (803c464 <gos_taskUnblock+0x1b8>)
 803c2ce:	6013      	str	r3, [r2, #0]
 803c2d0:	f3bf 8f4f 	dsb	sy
 803c2d4:	f3bf 8f6f 	isb	sy
 803c2d8:	4b61      	ldr	r3, [pc, #388]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c2da:	781b      	ldrb	r3, [r3, #0]
 803c2dc:	3301      	adds	r3, #1
 803c2de:	b2da      	uxtb	r2, r3
 803c2e0:	4b5f      	ldr	r3, [pc, #380]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c2e2:	701a      	strb	r2, [r3, #0]
 803c2e4:	4b60      	ldr	r3, [pc, #384]	; (803c468 <gos_taskUnblock+0x1bc>)
 803c2e6:	781b      	ldrb	r3, [r3, #0]
 803c2e8:	3301      	adds	r3, #1
 803c2ea:	b2da      	uxtb	r2, r3
 803c2ec:	4b5e      	ldr	r3, [pc, #376]	; (803c468 <gos_taskUnblock+0x1bc>)
 803c2ee:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 803c2f0:	88fb      	ldrh	r3, [r7, #6]
 803c2f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803c2f6:	f240 808d 	bls.w	803c414 <gos_taskUnblock+0x168>
 803c2fa:	88fb      	ldrh	r3, [r7, #6]
 803c2fc:	f248 022f 	movw	r2, #32815	; 0x802f
 803c300:	4293      	cmp	r3, r2
 803c302:	f200 8087 	bhi.w	803c414 <gos_taskUnblock+0x168>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803c306:	88fb      	ldrh	r3, [r7, #6]
 803c308:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803c30c:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803c30e:	4b57      	ldr	r3, [pc, #348]	; (803c46c <gos_taskUnblock+0x1c0>)
 803c310:	681b      	ldr	r3, [r3, #0]
 803c312:	4a57      	ldr	r2, [pc, #348]	; (803c470 <gos_taskUnblock+0x1c4>)
 803c314:	216a      	movs	r1, #106	; 0x6a
 803c316:	fb01 f303 	mul.w	r3, r1, r3
 803c31a:	4413      	add	r3, r2
 803c31c:	3308      	adds	r3, #8
 803c31e:	881b      	ldrh	r3, [r3, #0]
 803c320:	b21b      	sxth	r3, r3
 803c322:	2b00      	cmp	r3, #0
 803c324:	db03      	blt.n	803c32e <gos_taskUnblock+0x82>
            inIsr > 0)
 803c326:	4b53      	ldr	r3, [pc, #332]	; (803c474 <gos_taskUnblock+0x1c8>)
 803c328:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803c32a:	2b00      	cmp	r3, #0
 803c32c:	d035      	beq.n	803c39a <gos_taskUnblock+0xee>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 803c32e:	4a50      	ldr	r2, [pc, #320]	; (803c470 <gos_taskUnblock+0x1c4>)
 803c330:	68bb      	ldr	r3, [r7, #8]
 803c332:	216a      	movs	r1, #106	; 0x6a
 803c334:	fb01 f303 	mul.w	r3, r1, r3
 803c338:	4413      	add	r3, r2
 803c33a:	3304      	adds	r3, #4
 803c33c:	781b      	ldrb	r3, [r3, #0]
 803c33e:	2b19      	cmp	r3, #25
 803c340:	d10b      	bne.n	803c35a <gos_taskUnblock+0xae>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 803c342:	4a4b      	ldr	r2, [pc, #300]	; (803c470 <gos_taskUnblock+0x1c4>)
 803c344:	68bb      	ldr	r3, [r7, #8]
 803c346:	216a      	movs	r1, #106	; 0x6a
 803c348:	fb01 f303 	mul.w	r3, r1, r3
 803c34c:	4413      	add	r3, r2
 803c34e:	3304      	adds	r3, #4
 803c350:	220a      	movs	r2, #10
 803c352:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 803c354:	2355      	movs	r3, #85	; 0x55
 803c356:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 803c358:	e05b      	b.n	803c412 <gos_taskUnblock+0x166>
            }
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 803c35a:	4a45      	ldr	r2, [pc, #276]	; (803c470 <gos_taskUnblock+0x1c4>)
 803c35c:	68bb      	ldr	r3, [r7, #8]
 803c35e:	216a      	movs	r1, #106	; 0x6a
 803c360:	fb01 f303 	mul.w	r3, r1, r3
 803c364:	4413      	add	r3, r2
 803c366:	3304      	adds	r3, #4
 803c368:	781b      	ldrb	r3, [r3, #0]
 803c36a:	2b05      	cmp	r3, #5
 803c36c:	d151      	bne.n	803c412 <gos_taskUnblock+0x166>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 803c36e:	4a40      	ldr	r2, [pc, #256]	; (803c470 <gos_taskUnblock+0x1c4>)
 803c370:	68bb      	ldr	r3, [r7, #8]
 803c372:	216a      	movs	r1, #106	; 0x6a
 803c374:	fb01 f303 	mul.w	r3, r1, r3
 803c378:	4413      	add	r3, r2
 803c37a:	3305      	adds	r3, #5
 803c37c:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 803c37e:	2b19      	cmp	r3, #25
 803c380:	d147      	bne.n	803c412 <gos_taskUnblock+0x166>
            {
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 803c382:	4a3b      	ldr	r2, [pc, #236]	; (803c470 <gos_taskUnblock+0x1c4>)
 803c384:	68bb      	ldr	r3, [r7, #8]
 803c386:	216a      	movs	r1, #106	; 0x6a
 803c388:	fb01 f303 	mul.w	r3, r1, r3
 803c38c:	4413      	add	r3, r2
 803c38e:	3305      	adds	r3, #5
 803c390:	220a      	movs	r2, #10
 803c392:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 803c394:	2355      	movs	r3, #85	; 0x55
 803c396:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 803c398:	e03b      	b.n	803c412 <gos_taskUnblock+0x166>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 803c39a:	4b31      	ldr	r3, [pc, #196]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c39c:	781b      	ldrb	r3, [r3, #0]
 803c39e:	2b00      	cmp	r3, #0
 803c3a0:	d005      	beq.n	803c3ae <gos_taskUnblock+0x102>
 803c3a2:	4b2f      	ldr	r3, [pc, #188]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c3a4:	781b      	ldrb	r3, [r3, #0]
 803c3a6:	3b01      	subs	r3, #1
 803c3a8:	b2da      	uxtb	r2, r3
 803c3aa:	4b2d      	ldr	r3, [pc, #180]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c3ac:	701a      	strb	r2, [r3, #0]
 803c3ae:	4b2c      	ldr	r3, [pc, #176]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c3b0:	781b      	ldrb	r3, [r3, #0]
 803c3b2:	2b00      	cmp	r3, #0
 803c3b4:	d108      	bne.n	803c3c8 <gos_taskUnblock+0x11c>
 803c3b6:	4b2b      	ldr	r3, [pc, #172]	; (803c464 <gos_taskUnblock+0x1b8>)
 803c3b8:	681b      	ldr	r3, [r3, #0]
 803c3ba:	f383 8810 	msr	PRIMASK, r3
 803c3be:	b662      	cpsie	i
 803c3c0:	f3bf 8f4f 	dsb	sy
 803c3c4:	f3bf 8f6f 	isb	sy
 803c3c8:	4b27      	ldr	r3, [pc, #156]	; (803c468 <gos_taskUnblock+0x1bc>)
 803c3ca:	781b      	ldrb	r3, [r3, #0]
 803c3cc:	2b00      	cmp	r3, #0
 803c3ce:	d005      	beq.n	803c3dc <gos_taskUnblock+0x130>
 803c3d0:	4b25      	ldr	r3, [pc, #148]	; (803c468 <gos_taskUnblock+0x1bc>)
 803c3d2:	781b      	ldrb	r3, [r3, #0]
 803c3d4:	3b01      	subs	r3, #1
 803c3d6:	b2da      	uxtb	r2, r3
 803c3d8:	4b23      	ldr	r3, [pc, #140]	; (803c468 <gos_taskUnblock+0x1bc>)
 803c3da:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 803c3dc:	4b23      	ldr	r3, [pc, #140]	; (803c46c <gos_taskUnblock+0x1c0>)
 803c3de:	681b      	ldr	r3, [r3, #0]
 803c3e0:	226a      	movs	r2, #106	; 0x6a
 803c3e2:	fb02 f303 	mul.w	r3, r2, r3
 803c3e6:	3308      	adds	r3, #8
 803c3e8:	4a21      	ldr	r2, [pc, #132]	; (803c470 <gos_taskUnblock+0x1c4>)
 803c3ea:	4413      	add	r3, r2
 803c3ec:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 803c3ee:	68ba      	ldr	r2, [r7, #8]
 803c3f0:	216a      	movs	r1, #106	; 0x6a
 803c3f2:	fb01 f202 	mul.w	r2, r1, r2
 803c3f6:	3208      	adds	r2, #8
 803c3f8:	491d      	ldr	r1, [pc, #116]	; (803c470 <gos_taskUnblock+0x1c4>)
 803c3fa:	440a      	add	r2, r1
 803c3fc:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 803c3fe:	9201      	str	r2, [sp, #4]
 803c400:	9300      	str	r3, [sp, #0]
 803c402:	4b1d      	ldr	r3, [pc, #116]	; (803c478 <gos_taskUnblock+0x1cc>)
 803c404:	f240 226d 	movw	r2, #621	; 0x26d
 803c408:	491c      	ldr	r1, [pc, #112]	; (803c47c <gos_taskUnblock+0x1d0>)
 803c40a:	2034      	movs	r0, #52	; 0x34
 803c40c:	f001 f8c4 	bl	803d598 <gos_errorHandler>
 803c410:	e000      	b.n	803c414 <gos_taskUnblock+0x168>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 803c412:	bf00      	nop
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 803c414:	4b12      	ldr	r3, [pc, #72]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c416:	781b      	ldrb	r3, [r3, #0]
 803c418:	2b00      	cmp	r3, #0
 803c41a:	d005      	beq.n	803c428 <gos_taskUnblock+0x17c>
 803c41c:	4b10      	ldr	r3, [pc, #64]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c41e:	781b      	ldrb	r3, [r3, #0]
 803c420:	3b01      	subs	r3, #1
 803c422:	b2da      	uxtb	r2, r3
 803c424:	4b0e      	ldr	r3, [pc, #56]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c426:	701a      	strb	r2, [r3, #0]
 803c428:	4b0d      	ldr	r3, [pc, #52]	; (803c460 <gos_taskUnblock+0x1b4>)
 803c42a:	781b      	ldrb	r3, [r3, #0]
 803c42c:	2b00      	cmp	r3, #0
 803c42e:	d108      	bne.n	803c442 <gos_taskUnblock+0x196>
 803c430:	4b0c      	ldr	r3, [pc, #48]	; (803c464 <gos_taskUnblock+0x1b8>)
 803c432:	681b      	ldr	r3, [r3, #0]
 803c434:	f383 8810 	msr	PRIMASK, r3
 803c438:	b662      	cpsie	i
 803c43a:	f3bf 8f4f 	dsb	sy
 803c43e:	f3bf 8f6f 	isb	sy
 803c442:	4b09      	ldr	r3, [pc, #36]	; (803c468 <gos_taskUnblock+0x1bc>)
 803c444:	781b      	ldrb	r3, [r3, #0]
 803c446:	2b00      	cmp	r3, #0
 803c448:	d005      	beq.n	803c456 <gos_taskUnblock+0x1aa>
 803c44a:	4b07      	ldr	r3, [pc, #28]	; (803c468 <gos_taskUnblock+0x1bc>)
 803c44c:	781b      	ldrb	r3, [r3, #0]
 803c44e:	3b01      	subs	r3, #1
 803c450:	b2da      	uxtb	r2, r3
 803c452:	4b05      	ldr	r3, [pc, #20]	; (803c468 <gos_taskUnblock+0x1bc>)
 803c454:	701a      	strb	r2, [r3, #0]

    return taskUnblockResult;
 803c456:	7bfb      	ldrb	r3, [r7, #15]
}
 803c458:	4618      	mov	r0, r3
 803c45a:	3710      	adds	r7, #16
 803c45c:	46bd      	mov	sp, r7
 803c45e:	bd80      	pop	{r7, pc}
 803c460:	20007447 	.word	0x20007447
 803c464:	20007448 	.word	0x20007448
 803c468:	20007445 	.word	0x20007445
 803c46c:	2000744c 	.word	0x2000744c
 803c470:	20001ca8 	.word	0x20001ca8
 803c474:	20007446 	.word	0x20007446
 803c478:	08047f94 	.word	0x08047f94
 803c47c:	0804a09c 	.word	0x0804a09c

0803c480 <gos_taskDelete>:

/*
 * Function: gos_taskDelete
 */
GOS_INLINE gos_result_t gos_taskDelete (gos_tid_t taskId)
{
 803c480:	b580      	push	{r7, lr}
 803c482:	b086      	sub	sp, #24
 803c484:	af02      	add	r7, sp, #8
 803c486:	4603      	mov	r3, r0
 803c488:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskDeleteResult = GOS_ERROR;
 803c48a:	23ae      	movs	r3, #174	; 0xae
 803c48c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 803c48e:	2300      	movs	r3, #0
 803c490:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803c492:	4b84      	ldr	r3, [pc, #528]	; (803c6a4 <gos_taskDelete+0x224>)
 803c494:	781b      	ldrb	r3, [r3, #0]
 803c496:	2b00      	cmp	r3, #0
 803c498:	d108      	bne.n	803c4ac <gos_taskDelete+0x2c>
 803c49a:	b672      	cpsid	i
 803c49c:	f3ef 8310 	mrs	r3, PRIMASK
 803c4a0:	4a81      	ldr	r2, [pc, #516]	; (803c6a8 <gos_taskDelete+0x228>)
 803c4a2:	6013      	str	r3, [r2, #0]
 803c4a4:	f3bf 8f4f 	dsb	sy
 803c4a8:	f3bf 8f6f 	isb	sy
 803c4ac:	4b7d      	ldr	r3, [pc, #500]	; (803c6a4 <gos_taskDelete+0x224>)
 803c4ae:	781b      	ldrb	r3, [r3, #0]
 803c4b0:	3301      	adds	r3, #1
 803c4b2:	b2da      	uxtb	r2, r3
 803c4b4:	4b7b      	ldr	r3, [pc, #492]	; (803c6a4 <gos_taskDelete+0x224>)
 803c4b6:	701a      	strb	r2, [r3, #0]
 803c4b8:	4b7c      	ldr	r3, [pc, #496]	; (803c6ac <gos_taskDelete+0x22c>)
 803c4ba:	781b      	ldrb	r3, [r3, #0]
 803c4bc:	3301      	adds	r3, #1
 803c4be:	b2da      	uxtb	r2, r3
 803c4c0:	4b7a      	ldr	r3, [pc, #488]	; (803c6ac <gos_taskDelete+0x22c>)
 803c4c2:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 803c4c4:	88fb      	ldrh	r3, [r7, #6]
 803c4c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803c4ca:	f240 80b9 	bls.w	803c640 <gos_taskDelete+0x1c0>
 803c4ce:	88fb      	ldrh	r3, [r7, #6]
 803c4d0:	f248 022f 	movw	r2, #32815	; 0x802f
 803c4d4:	4293      	cmp	r3, r2
 803c4d6:	f200 80b3 	bhi.w	803c640 <gos_taskDelete+0x1c0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803c4da:	88fb      	ldrh	r3, [r7, #6]
 803c4dc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803c4e0:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803c4e2:	4b73      	ldr	r3, [pc, #460]	; (803c6b0 <gos_taskDelete+0x230>)
 803c4e4:	681b      	ldr	r3, [r3, #0]
 803c4e6:	4a73      	ldr	r2, [pc, #460]	; (803c6b4 <gos_taskDelete+0x234>)
 803c4e8:	216a      	movs	r1, #106	; 0x6a
 803c4ea:	fb01 f303 	mul.w	r3, r1, r3
 803c4ee:	4413      	add	r3, r2
 803c4f0:	3308      	adds	r3, #8
 803c4f2:	881b      	ldrh	r3, [r3, #0]
 803c4f4:	b21b      	sxth	r3, r3
 803c4f6:	2b00      	cmp	r3, #0
 803c4f8:	db08      	blt.n	803c50c <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 803c4fa:	4b6d      	ldr	r3, [pc, #436]	; (803c6b0 <gos_taskDelete+0x230>)
 803c4fc:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 803c4fe:	68ba      	ldr	r2, [r7, #8]
 803c500:	429a      	cmp	r2, r3
 803c502:	d003      	beq.n	803c50c <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 803c504:	4b6c      	ldr	r3, [pc, #432]	; (803c6b8 <gos_taskDelete+0x238>)
 803c506:	781b      	ldrb	r3, [r3, #0]
 803c508:	2b00      	cmp	r3, #0
 803c50a:	d05e      	beq.n	803c5ca <gos_taskDelete+0x14a>
        {
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 803c50c:	4a69      	ldr	r2, [pc, #420]	; (803c6b4 <gos_taskDelete+0x234>)
 803c50e:	68bb      	ldr	r3, [r7, #8]
 803c510:	216a      	movs	r1, #106	; 0x6a
 803c512:	fb01 f303 	mul.w	r3, r1, r3
 803c516:	4413      	add	r3, r2
 803c518:	3304      	adds	r3, #4
 803c51a:	781b      	ldrb	r3, [r3, #0]
 803c51c:	2b0d      	cmp	r3, #13
 803c51e:	f000 808f 	beq.w	803c640 <gos_taskDelete+0x1c0>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 803c522:	4a64      	ldr	r2, [pc, #400]	; (803c6b4 <gos_taskDelete+0x234>)
 803c524:	68bb      	ldr	r3, [r7, #8]
 803c526:	216a      	movs	r1, #106	; 0x6a
 803c528:	fb01 f303 	mul.w	r3, r1, r3
 803c52c:	4413      	add	r3, r2
 803c52e:	3304      	adds	r3, #4
 803c530:	220d      	movs	r2, #13
 803c532:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 803c534:	2355      	movs	r3, #85	; 0x55
 803c536:	73fb      	strb	r3, [r7, #15]

                // Invoke signal.
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 803c538:	4b5d      	ldr	r3, [pc, #372]	; (803c6b0 <gos_taskDelete+0x230>)
 803c53a:	681b      	ldr	r3, [r3, #0]
 803c53c:	4a5d      	ldr	r2, [pc, #372]	; (803c6b4 <gos_taskDelete+0x234>)
 803c53e:	216a      	movs	r1, #106	; 0x6a
 803c540:	fb01 f303 	mul.w	r3, r1, r3
 803c544:	4413      	add	r3, r2
 803c546:	3308      	adds	r3, #8
 803c548:	881b      	ldrh	r3, [r3, #0]
 803c54a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 803c54e:	2b00      	cmp	r3, #0
 803c550:	d133      	bne.n	803c5ba <gos_taskDelete+0x13a>
                {
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 803c552:	4b57      	ldr	r3, [pc, #348]	; (803c6b0 <gos_taskDelete+0x230>)
 803c554:	681b      	ldr	r3, [r3, #0]
 803c556:	4a57      	ldr	r2, [pc, #348]	; (803c6b4 <gos_taskDelete+0x234>)
 803c558:	216a      	movs	r1, #106	; 0x6a
 803c55a:	fb01 f303 	mul.w	r3, r1, r3
 803c55e:	4413      	add	r3, r2
 803c560:	3308      	adds	r3, #8
 803c562:	881a      	ldrh	r2, [r3, #0]
 803c564:	4b52      	ldr	r3, [pc, #328]	; (803c6b0 <gos_taskDelete+0x230>)
 803c566:	681b      	ldr	r3, [r3, #0]
 803c568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 803c56c:	b290      	uxth	r0, r2
 803c56e:	4a51      	ldr	r2, [pc, #324]	; (803c6b4 <gos_taskDelete+0x234>)
 803c570:	216a      	movs	r1, #106	; 0x6a
 803c572:	fb01 f303 	mul.w	r3, r1, r3
 803c576:	4413      	add	r3, r2
 803c578:	3308      	adds	r3, #8
 803c57a:	4602      	mov	r2, r0
 803c57c:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 803c57e:	4b4f      	ldr	r3, [pc, #316]	; (803c6bc <gos_taskDelete+0x23c>)
 803c580:	781b      	ldrb	r3, [r3, #0]
 803c582:	88fa      	ldrh	r2, [r7, #6]
 803c584:	4611      	mov	r1, r2
 803c586:	4618      	mov	r0, r3
 803c588:	f003 f8fa 	bl	803f780 <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 803c58c:	4b48      	ldr	r3, [pc, #288]	; (803c6b0 <gos_taskDelete+0x230>)
 803c58e:	681b      	ldr	r3, [r3, #0]
 803c590:	4a48      	ldr	r2, [pc, #288]	; (803c6b4 <gos_taskDelete+0x234>)
 803c592:	216a      	movs	r1, #106	; 0x6a
 803c594:	fb01 f303 	mul.w	r3, r1, r3
 803c598:	4413      	add	r3, r2
 803c59a:	3308      	adds	r3, #8
 803c59c:	881a      	ldrh	r2, [r3, #0]
 803c59e:	4b44      	ldr	r3, [pc, #272]	; (803c6b0 <gos_taskDelete+0x230>)
 803c5a0:	681b      	ldr	r3, [r3, #0]
 803c5a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 803c5a6:	b290      	uxth	r0, r2
 803c5a8:	4a42      	ldr	r2, [pc, #264]	; (803c6b4 <gos_taskDelete+0x234>)
 803c5aa:	216a      	movs	r1, #106	; 0x6a
 803c5ac:	fb01 f303 	mul.w	r3, r1, r3
 803c5b0:	4413      	add	r3, r2
 803c5b2:	3308      	adds	r3, #8
 803c5b4:	4602      	mov	r2, r0
 803c5b6:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 803c5b8:	e042      	b.n	803c640 <gos_taskDelete+0x1c0>
                }
                else
                {
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 803c5ba:	4b40      	ldr	r3, [pc, #256]	; (803c6bc <gos_taskDelete+0x23c>)
 803c5bc:	781b      	ldrb	r3, [r3, #0]
 803c5be:	88fa      	ldrh	r2, [r7, #6]
 803c5c0:	4611      	mov	r1, r2
 803c5c2:	4618      	mov	r0, r3
 803c5c4:	f003 f8dc 	bl	803f780 <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 803c5c8:	e03a      	b.n	803c640 <gos_taskDelete+0x1c0>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 803c5ca:	4b36      	ldr	r3, [pc, #216]	; (803c6a4 <gos_taskDelete+0x224>)
 803c5cc:	781b      	ldrb	r3, [r3, #0]
 803c5ce:	2b00      	cmp	r3, #0
 803c5d0:	d005      	beq.n	803c5de <gos_taskDelete+0x15e>
 803c5d2:	4b34      	ldr	r3, [pc, #208]	; (803c6a4 <gos_taskDelete+0x224>)
 803c5d4:	781b      	ldrb	r3, [r3, #0]
 803c5d6:	3b01      	subs	r3, #1
 803c5d8:	b2da      	uxtb	r2, r3
 803c5da:	4b32      	ldr	r3, [pc, #200]	; (803c6a4 <gos_taskDelete+0x224>)
 803c5dc:	701a      	strb	r2, [r3, #0]
 803c5de:	4b31      	ldr	r3, [pc, #196]	; (803c6a4 <gos_taskDelete+0x224>)
 803c5e0:	781b      	ldrb	r3, [r3, #0]
 803c5e2:	2b00      	cmp	r3, #0
 803c5e4:	d108      	bne.n	803c5f8 <gos_taskDelete+0x178>
 803c5e6:	4b30      	ldr	r3, [pc, #192]	; (803c6a8 <gos_taskDelete+0x228>)
 803c5e8:	681b      	ldr	r3, [r3, #0]
 803c5ea:	f383 8810 	msr	PRIMASK, r3
 803c5ee:	b662      	cpsie	i
 803c5f0:	f3bf 8f4f 	dsb	sy
 803c5f4:	f3bf 8f6f 	isb	sy
 803c5f8:	4b2c      	ldr	r3, [pc, #176]	; (803c6ac <gos_taskDelete+0x22c>)
 803c5fa:	781b      	ldrb	r3, [r3, #0]
 803c5fc:	2b00      	cmp	r3, #0
 803c5fe:	d005      	beq.n	803c60c <gos_taskDelete+0x18c>
 803c600:	4b2a      	ldr	r3, [pc, #168]	; (803c6ac <gos_taskDelete+0x22c>)
 803c602:	781b      	ldrb	r3, [r3, #0]
 803c604:	3b01      	subs	r3, #1
 803c606:	b2da      	uxtb	r2, r3
 803c608:	4b28      	ldr	r3, [pc, #160]	; (803c6ac <gos_taskDelete+0x22c>)
 803c60a:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 803c60c:	4b28      	ldr	r3, [pc, #160]	; (803c6b0 <gos_taskDelete+0x230>)
 803c60e:	681b      	ldr	r3, [r3, #0]
 803c610:	226a      	movs	r2, #106	; 0x6a
 803c612:	fb02 f303 	mul.w	r3, r2, r3
 803c616:	3308      	adds	r3, #8
 803c618:	4a26      	ldr	r2, [pc, #152]	; (803c6b4 <gos_taskDelete+0x234>)
 803c61a:	4413      	add	r3, r2
 803c61c:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 803c61e:	68ba      	ldr	r2, [r7, #8]
 803c620:	216a      	movs	r1, #106	; 0x6a
 803c622:	fb01 f202 	mul.w	r2, r1, r2
 803c626:	3208      	adds	r2, #8
 803c628:	4922      	ldr	r1, [pc, #136]	; (803c6b4 <gos_taskDelete+0x234>)
 803c62a:	440a      	add	r2, r1
 803c62c:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 803c62e:	9201      	str	r2, [sp, #4]
 803c630:	9300      	str	r3, [sp, #0]
 803c632:	4b23      	ldr	r3, [pc, #140]	; (803c6c0 <gos_taskDelete+0x240>)
 803c634:	f240 22ad 	movw	r2, #685	; 0x2ad
 803c638:	4922      	ldr	r1, [pc, #136]	; (803c6c4 <gos_taskDelete+0x244>)
 803c63a:	2034      	movs	r0, #52	; 0x34
 803c63c:	f000 ffac 	bl	803d598 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 803c640:	4b18      	ldr	r3, [pc, #96]	; (803c6a4 <gos_taskDelete+0x224>)
 803c642:	781b      	ldrb	r3, [r3, #0]
 803c644:	2b00      	cmp	r3, #0
 803c646:	d005      	beq.n	803c654 <gos_taskDelete+0x1d4>
 803c648:	4b16      	ldr	r3, [pc, #88]	; (803c6a4 <gos_taskDelete+0x224>)
 803c64a:	781b      	ldrb	r3, [r3, #0]
 803c64c:	3b01      	subs	r3, #1
 803c64e:	b2da      	uxtb	r2, r3
 803c650:	4b14      	ldr	r3, [pc, #80]	; (803c6a4 <gos_taskDelete+0x224>)
 803c652:	701a      	strb	r2, [r3, #0]
 803c654:	4b13      	ldr	r3, [pc, #76]	; (803c6a4 <gos_taskDelete+0x224>)
 803c656:	781b      	ldrb	r3, [r3, #0]
 803c658:	2b00      	cmp	r3, #0
 803c65a:	d108      	bne.n	803c66e <gos_taskDelete+0x1ee>
 803c65c:	4b12      	ldr	r3, [pc, #72]	; (803c6a8 <gos_taskDelete+0x228>)
 803c65e:	681b      	ldr	r3, [r3, #0]
 803c660:	f383 8810 	msr	PRIMASK, r3
 803c664:	b662      	cpsie	i
 803c666:	f3bf 8f4f 	dsb	sy
 803c66a:	f3bf 8f6f 	isb	sy
 803c66e:	4b0f      	ldr	r3, [pc, #60]	; (803c6ac <gos_taskDelete+0x22c>)
 803c670:	781b      	ldrb	r3, [r3, #0]
 803c672:	2b00      	cmp	r3, #0
 803c674:	d005      	beq.n	803c682 <gos_taskDelete+0x202>
 803c676:	4b0d      	ldr	r3, [pc, #52]	; (803c6ac <gos_taskDelete+0x22c>)
 803c678:	781b      	ldrb	r3, [r3, #0]
 803c67a:	3b01      	subs	r3, #1
 803c67c:	b2da      	uxtb	r2, r3
 803c67e:	4b0b      	ldr	r3, [pc, #44]	; (803c6ac <gos_taskDelete+0x22c>)
 803c680:	701a      	strb	r2, [r3, #0]

    if (taskDeleteResult == GOS_SUCCESS)
 803c682:	7bfb      	ldrb	r3, [r7, #15]
 803c684:	2b55      	cmp	r3, #85	; 0x55
 803c686:	d107      	bne.n	803c698 <gos_taskDelete+0x218>
    {
        if (currentTaskIndex == taskIndex)
 803c688:	4b09      	ldr	r3, [pc, #36]	; (803c6b0 <gos_taskDelete+0x230>)
 803c68a:	681b      	ldr	r3, [r3, #0]
 803c68c:	68ba      	ldr	r2, [r7, #8]
 803c68e:	429a      	cmp	r2, r3
 803c690:	d102      	bne.n	803c698 <gos_taskDelete+0x218>
        {
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 803c692:	2009      	movs	r0, #9
 803c694:	f7fe fd94 	bl	803b1c0 <gos_kernelReschedule>
    else
    {
        // Nothing to do.
    }

    return taskDeleteResult;
 803c698:	7bfb      	ldrb	r3, [r7, #15]
}
 803c69a:	4618      	mov	r0, r3
 803c69c:	3710      	adds	r7, #16
 803c69e:	46bd      	mov	sp, r7
 803c6a0:	bd80      	pop	{r7, pc}
 803c6a2:	bf00      	nop
 803c6a4:	20007447 	.word	0x20007447
 803c6a8:	20007448 	.word	0x20007448
 803c6ac:	20007445 	.word	0x20007445
 803c6b0:	2000744c 	.word	0x2000744c
 803c6b4:	20001ca8 	.word	0x20001ca8
 803c6b8:	20007446 	.word	0x20007446
 803c6bc:	20007470 	.word	0x20007470
 803c6c0:	08047fbc 	.word	0x08047fbc
 803c6c4:	0804a0ac 	.word	0x0804a0ac

0803c6c8 <gos_taskSetPriority>:

/*
 * Function: gos_taskSetPriority
 */
GOS_INLINE gos_result_t gos_taskSetPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 803c6c8:	b580      	push	{r7, lr}
 803c6ca:	b086      	sub	sp, #24
 803c6cc:	af02      	add	r7, sp, #8
 803c6ce:	4603      	mov	r3, r0
 803c6d0:	460a      	mov	r2, r1
 803c6d2:	80fb      	strh	r3, [r7, #6]
 803c6d4:	4613      	mov	r3, r2
 803c6d6:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 803c6d8:	23ae      	movs	r3, #174	; 0xae
 803c6da:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 803c6dc:	2300      	movs	r3, #0
 803c6de:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803c6e0:	4b53      	ldr	r3, [pc, #332]	; (803c830 <gos_taskSetPriority+0x168>)
 803c6e2:	781b      	ldrb	r3, [r3, #0]
 803c6e4:	2b00      	cmp	r3, #0
 803c6e6:	d108      	bne.n	803c6fa <gos_taskSetPriority+0x32>
 803c6e8:	b672      	cpsid	i
 803c6ea:	f3ef 8310 	mrs	r3, PRIMASK
 803c6ee:	4a51      	ldr	r2, [pc, #324]	; (803c834 <gos_taskSetPriority+0x16c>)
 803c6f0:	6013      	str	r3, [r2, #0]
 803c6f2:	f3bf 8f4f 	dsb	sy
 803c6f6:	f3bf 8f6f 	isb	sy
 803c6fa:	4b4d      	ldr	r3, [pc, #308]	; (803c830 <gos_taskSetPriority+0x168>)
 803c6fc:	781b      	ldrb	r3, [r3, #0]
 803c6fe:	3301      	adds	r3, #1
 803c700:	b2da      	uxtb	r2, r3
 803c702:	4b4b      	ldr	r3, [pc, #300]	; (803c830 <gos_taskSetPriority+0x168>)
 803c704:	701a      	strb	r2, [r3, #0]
 803c706:	4b4c      	ldr	r3, [pc, #304]	; (803c838 <gos_taskSetPriority+0x170>)
 803c708:	781b      	ldrb	r3, [r3, #0]
 803c70a:	3301      	adds	r3, #1
 803c70c:	b2da      	uxtb	r2, r3
 803c70e:	4b4a      	ldr	r3, [pc, #296]	; (803c838 <gos_taskSetPriority+0x170>)
 803c710:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 803c712:	88fb      	ldrh	r3, [r7, #6]
 803c714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803c718:	d963      	bls.n	803c7e2 <gos_taskSetPriority+0x11a>
 803c71a:	88fb      	ldrh	r3, [r7, #6]
 803c71c:	f248 022f 	movw	r2, #32815	; 0x802f
 803c720:	4293      	cmp	r3, r2
 803c722:	d85e      	bhi.n	803c7e2 <gos_taskSetPriority+0x11a>
 803c724:	797b      	ldrb	r3, [r7, #5]
 803c726:	2bff      	cmp	r3, #255	; 0xff
 803c728:	d05b      	beq.n	803c7e2 <gos_taskSetPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803c72a:	88fb      	ldrh	r3, [r7, #6]
 803c72c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803c730:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 803c732:	4b42      	ldr	r3, [pc, #264]	; (803c83c <gos_taskSetPriority+0x174>)
 803c734:	681b      	ldr	r3, [r3, #0]
 803c736:	4a42      	ldr	r2, [pc, #264]	; (803c840 <gos_taskSetPriority+0x178>)
 803c738:	216a      	movs	r1, #106	; 0x6a
 803c73a:	fb01 f303 	mul.w	r3, r1, r3
 803c73e:	4413      	add	r3, r2
 803c740:	3308      	adds	r3, #8
 803c742:	881b      	ldrh	r3, [r3, #0]
 803c744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 803c748:	2b00      	cmp	r3, #0
 803c74a:	d103      	bne.n	803c754 <gos_taskSetPriority+0x8c>
            inIsr > 0)
 803c74c:	4b3d      	ldr	r3, [pc, #244]	; (803c844 <gos_taskSetPriority+0x17c>)
 803c74e:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 803c750:	2b00      	cmp	r3, #0
 803c752:	d00b      	beq.n	803c76c <gos_taskSetPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 803c754:	4a3a      	ldr	r2, [pc, #232]	; (803c840 <gos_taskSetPriority+0x178>)
 803c756:	68bb      	ldr	r3, [r7, #8]
 803c758:	216a      	movs	r1, #106	; 0x6a
 803c75a:	fb01 f303 	mul.w	r3, r1, r3
 803c75e:	4413      	add	r3, r2
 803c760:	3306      	adds	r3, #6
 803c762:	797a      	ldrb	r2, [r7, #5]
 803c764:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 803c766:	2355      	movs	r3, #85	; 0x55
 803c768:	73fb      	strb	r3, [r7, #15]
 803c76a:	e03a      	b.n	803c7e2 <gos_taskSetPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 803c76c:	4b30      	ldr	r3, [pc, #192]	; (803c830 <gos_taskSetPriority+0x168>)
 803c76e:	781b      	ldrb	r3, [r3, #0]
 803c770:	2b00      	cmp	r3, #0
 803c772:	d005      	beq.n	803c780 <gos_taskSetPriority+0xb8>
 803c774:	4b2e      	ldr	r3, [pc, #184]	; (803c830 <gos_taskSetPriority+0x168>)
 803c776:	781b      	ldrb	r3, [r3, #0]
 803c778:	3b01      	subs	r3, #1
 803c77a:	b2da      	uxtb	r2, r3
 803c77c:	4b2c      	ldr	r3, [pc, #176]	; (803c830 <gos_taskSetPriority+0x168>)
 803c77e:	701a      	strb	r2, [r3, #0]
 803c780:	4b2b      	ldr	r3, [pc, #172]	; (803c830 <gos_taskSetPriority+0x168>)
 803c782:	781b      	ldrb	r3, [r3, #0]
 803c784:	2b00      	cmp	r3, #0
 803c786:	d108      	bne.n	803c79a <gos_taskSetPriority+0xd2>
 803c788:	4b2a      	ldr	r3, [pc, #168]	; (803c834 <gos_taskSetPriority+0x16c>)
 803c78a:	681b      	ldr	r3, [r3, #0]
 803c78c:	f383 8810 	msr	PRIMASK, r3
 803c790:	b662      	cpsie	i
 803c792:	f3bf 8f4f 	dsb	sy
 803c796:	f3bf 8f6f 	isb	sy
 803c79a:	4b27      	ldr	r3, [pc, #156]	; (803c838 <gos_taskSetPriority+0x170>)
 803c79c:	781b      	ldrb	r3, [r3, #0]
 803c79e:	2b00      	cmp	r3, #0
 803c7a0:	d005      	beq.n	803c7ae <gos_taskSetPriority+0xe6>
 803c7a2:	4b25      	ldr	r3, [pc, #148]	; (803c838 <gos_taskSetPriority+0x170>)
 803c7a4:	781b      	ldrb	r3, [r3, #0]
 803c7a6:	3b01      	subs	r3, #1
 803c7a8:	b2da      	uxtb	r2, r3
 803c7aa:	4b23      	ldr	r3, [pc, #140]	; (803c838 <gos_taskSetPriority+0x170>)
 803c7ac:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 803c7ae:	4b23      	ldr	r3, [pc, #140]	; (803c83c <gos_taskSetPriority+0x174>)
 803c7b0:	681b      	ldr	r3, [r3, #0]
 803c7b2:	226a      	movs	r2, #106	; 0x6a
 803c7b4:	fb02 f303 	mul.w	r3, r2, r3
 803c7b8:	3308      	adds	r3, #8
 803c7ba:	4a21      	ldr	r2, [pc, #132]	; (803c840 <gos_taskSetPriority+0x178>)
 803c7bc:	4413      	add	r3, r2
 803c7be:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 803c7c0:	68ba      	ldr	r2, [r7, #8]
 803c7c2:	216a      	movs	r1, #106	; 0x6a
 803c7c4:	fb01 f202 	mul.w	r2, r1, r2
 803c7c8:	3208      	adds	r2, #8
 803c7ca:	491d      	ldr	r1, [pc, #116]	; (803c840 <gos_taskSetPriority+0x178>)
 803c7cc:	440a      	add	r2, r1
 803c7ce:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 803c7d0:	9201      	str	r2, [sp, #4]
 803c7d2:	9300      	str	r3, [sp, #0]
 803c7d4:	4b1c      	ldr	r3, [pc, #112]	; (803c848 <gos_taskSetPriority+0x180>)
 803c7d6:	f240 22eb 	movw	r2, #747	; 0x2eb
 803c7da:	491c      	ldr	r1, [pc, #112]	; (803c84c <gos_taskSetPriority+0x184>)
 803c7dc:	2034      	movs	r0, #52	; 0x34
 803c7de:	f000 fedb 	bl	803d598 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 803c7e2:	4b13      	ldr	r3, [pc, #76]	; (803c830 <gos_taskSetPriority+0x168>)
 803c7e4:	781b      	ldrb	r3, [r3, #0]
 803c7e6:	2b00      	cmp	r3, #0
 803c7e8:	d005      	beq.n	803c7f6 <gos_taskSetPriority+0x12e>
 803c7ea:	4b11      	ldr	r3, [pc, #68]	; (803c830 <gos_taskSetPriority+0x168>)
 803c7ec:	781b      	ldrb	r3, [r3, #0]
 803c7ee:	3b01      	subs	r3, #1
 803c7f0:	b2da      	uxtb	r2, r3
 803c7f2:	4b0f      	ldr	r3, [pc, #60]	; (803c830 <gos_taskSetPriority+0x168>)
 803c7f4:	701a      	strb	r2, [r3, #0]
 803c7f6:	4b0e      	ldr	r3, [pc, #56]	; (803c830 <gos_taskSetPriority+0x168>)
 803c7f8:	781b      	ldrb	r3, [r3, #0]
 803c7fa:	2b00      	cmp	r3, #0
 803c7fc:	d108      	bne.n	803c810 <gos_taskSetPriority+0x148>
 803c7fe:	4b0d      	ldr	r3, [pc, #52]	; (803c834 <gos_taskSetPriority+0x16c>)
 803c800:	681b      	ldr	r3, [r3, #0]
 803c802:	f383 8810 	msr	PRIMASK, r3
 803c806:	b662      	cpsie	i
 803c808:	f3bf 8f4f 	dsb	sy
 803c80c:	f3bf 8f6f 	isb	sy
 803c810:	4b09      	ldr	r3, [pc, #36]	; (803c838 <gos_taskSetPriority+0x170>)
 803c812:	781b      	ldrb	r3, [r3, #0]
 803c814:	2b00      	cmp	r3, #0
 803c816:	d005      	beq.n	803c824 <gos_taskSetPriority+0x15c>
 803c818:	4b07      	ldr	r3, [pc, #28]	; (803c838 <gos_taskSetPriority+0x170>)
 803c81a:	781b      	ldrb	r3, [r3, #0]
 803c81c:	3b01      	subs	r3, #1
 803c81e:	b2da      	uxtb	r2, r3
 803c820:	4b05      	ldr	r3, [pc, #20]	; (803c838 <gos_taskSetPriority+0x170>)
 803c822:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 803c824:	7bfb      	ldrb	r3, [r7, #15]
}
 803c826:	4618      	mov	r0, r3
 803c828:	3710      	adds	r7, #16
 803c82a:	46bd      	mov	sp, r7
 803c82c:	bd80      	pop	{r7, pc}
 803c82e:	bf00      	nop
 803c830:	20007447 	.word	0x20007447
 803c834:	20007448 	.word	0x20007448
 803c838:	20007445 	.word	0x20007445
 803c83c:	2000744c 	.word	0x2000744c
 803c840:	20001ca8 	.word	0x20001ca8
 803c844:	20007446 	.word	0x20007446
 803c848:	08047fe4 	.word	0x08047fe4
 803c84c:	0804a0bc 	.word	0x0804a0bc

0803c850 <gos_taskSetOriginalPriority>:

/*
 * Function: gos_taskSetOriginalPriority
 */
GOS_INLINE gos_result_t gos_taskSetOriginalPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 803c850:	b580      	push	{r7, lr}
 803c852:	b086      	sub	sp, #24
 803c854:	af02      	add	r7, sp, #8
 803c856:	4603      	mov	r3, r0
 803c858:	460a      	mov	r2, r1
 803c85a:	80fb      	strh	r3, [r7, #6]
 803c85c:	4613      	mov	r3, r2
 803c85e:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 803c860:	23ae      	movs	r3, #174	; 0xae
 803c862:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 803c864:	2300      	movs	r3, #0
 803c866:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803c868:	4b53      	ldr	r3, [pc, #332]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c86a:	781b      	ldrb	r3, [r3, #0]
 803c86c:	2b00      	cmp	r3, #0
 803c86e:	d108      	bne.n	803c882 <gos_taskSetOriginalPriority+0x32>
 803c870:	b672      	cpsid	i
 803c872:	f3ef 8310 	mrs	r3, PRIMASK
 803c876:	4a51      	ldr	r2, [pc, #324]	; (803c9bc <gos_taskSetOriginalPriority+0x16c>)
 803c878:	6013      	str	r3, [r2, #0]
 803c87a:	f3bf 8f4f 	dsb	sy
 803c87e:	f3bf 8f6f 	isb	sy
 803c882:	4b4d      	ldr	r3, [pc, #308]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c884:	781b      	ldrb	r3, [r3, #0]
 803c886:	3301      	adds	r3, #1
 803c888:	b2da      	uxtb	r2, r3
 803c88a:	4b4b      	ldr	r3, [pc, #300]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c88c:	701a      	strb	r2, [r3, #0]
 803c88e:	4b4c      	ldr	r3, [pc, #304]	; (803c9c0 <gos_taskSetOriginalPriority+0x170>)
 803c890:	781b      	ldrb	r3, [r3, #0]
 803c892:	3301      	adds	r3, #1
 803c894:	b2da      	uxtb	r2, r3
 803c896:	4b4a      	ldr	r3, [pc, #296]	; (803c9c0 <gos_taskSetOriginalPriority+0x170>)
 803c898:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 803c89a:	88fb      	ldrh	r3, [r7, #6]
 803c89c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803c8a0:	d963      	bls.n	803c96a <gos_taskSetOriginalPriority+0x11a>
 803c8a2:	88fb      	ldrh	r3, [r7, #6]
 803c8a4:	f248 022f 	movw	r2, #32815	; 0x802f
 803c8a8:	4293      	cmp	r3, r2
 803c8aa:	d85e      	bhi.n	803c96a <gos_taskSetOriginalPriority+0x11a>
 803c8ac:	797b      	ldrb	r3, [r7, #5]
 803c8ae:	2bff      	cmp	r3, #255	; 0xff
 803c8b0:	d05b      	beq.n	803c96a <gos_taskSetOriginalPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803c8b2:	88fb      	ldrh	r3, [r7, #6]
 803c8b4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803c8b8:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 803c8ba:	4b42      	ldr	r3, [pc, #264]	; (803c9c4 <gos_taskSetOriginalPriority+0x174>)
 803c8bc:	681b      	ldr	r3, [r3, #0]
 803c8be:	4a42      	ldr	r2, [pc, #264]	; (803c9c8 <gos_taskSetOriginalPriority+0x178>)
 803c8c0:	216a      	movs	r1, #106	; 0x6a
 803c8c2:	fb01 f303 	mul.w	r3, r1, r3
 803c8c6:	4413      	add	r3, r2
 803c8c8:	3308      	adds	r3, #8
 803c8ca:	881b      	ldrh	r3, [r3, #0]
 803c8cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 803c8d0:	2b00      	cmp	r3, #0
 803c8d2:	d103      	bne.n	803c8dc <gos_taskSetOriginalPriority+0x8c>
            inIsr > 0)
 803c8d4:	4b3d      	ldr	r3, [pc, #244]	; (803c9cc <gos_taskSetOriginalPriority+0x17c>)
 803c8d6:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 803c8d8:	2b00      	cmp	r3, #0
 803c8da:	d00b      	beq.n	803c8f4 <gos_taskSetOriginalPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 803c8dc:	4a3a      	ldr	r2, [pc, #232]	; (803c9c8 <gos_taskSetOriginalPriority+0x178>)
 803c8de:	68bb      	ldr	r3, [r7, #8]
 803c8e0:	216a      	movs	r1, #106	; 0x6a
 803c8e2:	fb01 f303 	mul.w	r3, r1, r3
 803c8e6:	4413      	add	r3, r2
 803c8e8:	3307      	adds	r3, #7
 803c8ea:	797a      	ldrb	r2, [r7, #5]
 803c8ec:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 803c8ee:	2355      	movs	r3, #85	; 0x55
 803c8f0:	73fb      	strb	r3, [r7, #15]
 803c8f2:	e03a      	b.n	803c96a <gos_taskSetOriginalPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 803c8f4:	4b30      	ldr	r3, [pc, #192]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c8f6:	781b      	ldrb	r3, [r3, #0]
 803c8f8:	2b00      	cmp	r3, #0
 803c8fa:	d005      	beq.n	803c908 <gos_taskSetOriginalPriority+0xb8>
 803c8fc:	4b2e      	ldr	r3, [pc, #184]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c8fe:	781b      	ldrb	r3, [r3, #0]
 803c900:	3b01      	subs	r3, #1
 803c902:	b2da      	uxtb	r2, r3
 803c904:	4b2c      	ldr	r3, [pc, #176]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c906:	701a      	strb	r2, [r3, #0]
 803c908:	4b2b      	ldr	r3, [pc, #172]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c90a:	781b      	ldrb	r3, [r3, #0]
 803c90c:	2b00      	cmp	r3, #0
 803c90e:	d108      	bne.n	803c922 <gos_taskSetOriginalPriority+0xd2>
 803c910:	4b2a      	ldr	r3, [pc, #168]	; (803c9bc <gos_taskSetOriginalPriority+0x16c>)
 803c912:	681b      	ldr	r3, [r3, #0]
 803c914:	f383 8810 	msr	PRIMASK, r3
 803c918:	b662      	cpsie	i
 803c91a:	f3bf 8f4f 	dsb	sy
 803c91e:	f3bf 8f6f 	isb	sy
 803c922:	4b27      	ldr	r3, [pc, #156]	; (803c9c0 <gos_taskSetOriginalPriority+0x170>)
 803c924:	781b      	ldrb	r3, [r3, #0]
 803c926:	2b00      	cmp	r3, #0
 803c928:	d005      	beq.n	803c936 <gos_taskSetOriginalPriority+0xe6>
 803c92a:	4b25      	ldr	r3, [pc, #148]	; (803c9c0 <gos_taskSetOriginalPriority+0x170>)
 803c92c:	781b      	ldrb	r3, [r3, #0]
 803c92e:	3b01      	subs	r3, #1
 803c930:	b2da      	uxtb	r2, r3
 803c932:	4b23      	ldr	r3, [pc, #140]	; (803c9c0 <gos_taskSetOriginalPriority+0x170>)
 803c934:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 803c936:	4b23      	ldr	r3, [pc, #140]	; (803c9c4 <gos_taskSetOriginalPriority+0x174>)
 803c938:	681b      	ldr	r3, [r3, #0]
 803c93a:	226a      	movs	r2, #106	; 0x6a
 803c93c:	fb02 f303 	mul.w	r3, r2, r3
 803c940:	3308      	adds	r3, #8
 803c942:	4a21      	ldr	r2, [pc, #132]	; (803c9c8 <gos_taskSetOriginalPriority+0x178>)
 803c944:	4413      	add	r3, r2
 803c946:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 803c948:	68ba      	ldr	r2, [r7, #8]
 803c94a:	216a      	movs	r1, #106	; 0x6a
 803c94c:	fb01 f202 	mul.w	r2, r1, r2
 803c950:	3208      	adds	r2, #8
 803c952:	491d      	ldr	r1, [pc, #116]	; (803c9c8 <gos_taskSetOriginalPriority+0x178>)
 803c954:	440a      	add	r2, r1
 803c956:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 803c958:	9201      	str	r2, [sp, #4]
 803c95a:	9300      	str	r3, [sp, #0]
 803c95c:	4b1c      	ldr	r3, [pc, #112]	; (803c9d0 <gos_taskSetOriginalPriority+0x180>)
 803c95e:	f240 3219 	movw	r2, #793	; 0x319
 803c962:	491c      	ldr	r1, [pc, #112]	; (803c9d4 <gos_taskSetOriginalPriority+0x184>)
 803c964:	2034      	movs	r0, #52	; 0x34
 803c966:	f000 fe17 	bl	803d598 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 803c96a:	4b13      	ldr	r3, [pc, #76]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c96c:	781b      	ldrb	r3, [r3, #0]
 803c96e:	2b00      	cmp	r3, #0
 803c970:	d005      	beq.n	803c97e <gos_taskSetOriginalPriority+0x12e>
 803c972:	4b11      	ldr	r3, [pc, #68]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c974:	781b      	ldrb	r3, [r3, #0]
 803c976:	3b01      	subs	r3, #1
 803c978:	b2da      	uxtb	r2, r3
 803c97a:	4b0f      	ldr	r3, [pc, #60]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c97c:	701a      	strb	r2, [r3, #0]
 803c97e:	4b0e      	ldr	r3, [pc, #56]	; (803c9b8 <gos_taskSetOriginalPriority+0x168>)
 803c980:	781b      	ldrb	r3, [r3, #0]
 803c982:	2b00      	cmp	r3, #0
 803c984:	d108      	bne.n	803c998 <gos_taskSetOriginalPriority+0x148>
 803c986:	4b0d      	ldr	r3, [pc, #52]	; (803c9bc <gos_taskSetOriginalPriority+0x16c>)
 803c988:	681b      	ldr	r3, [r3, #0]
 803c98a:	f383 8810 	msr	PRIMASK, r3
 803c98e:	b662      	cpsie	i
 803c990:	f3bf 8f4f 	dsb	sy
 803c994:	f3bf 8f6f 	isb	sy
 803c998:	4b09      	ldr	r3, [pc, #36]	; (803c9c0 <gos_taskSetOriginalPriority+0x170>)
 803c99a:	781b      	ldrb	r3, [r3, #0]
 803c99c:	2b00      	cmp	r3, #0
 803c99e:	d005      	beq.n	803c9ac <gos_taskSetOriginalPriority+0x15c>
 803c9a0:	4b07      	ldr	r3, [pc, #28]	; (803c9c0 <gos_taskSetOriginalPriority+0x170>)
 803c9a2:	781b      	ldrb	r3, [r3, #0]
 803c9a4:	3b01      	subs	r3, #1
 803c9a6:	b2da      	uxtb	r2, r3
 803c9a8:	4b05      	ldr	r3, [pc, #20]	; (803c9c0 <gos_taskSetOriginalPriority+0x170>)
 803c9aa:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 803c9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 803c9ae:	4618      	mov	r0, r3
 803c9b0:	3710      	adds	r7, #16
 803c9b2:	46bd      	mov	sp, r7
 803c9b4:	bd80      	pop	{r7, pc}
 803c9b6:	bf00      	nop
 803c9b8:	20007447 	.word	0x20007447
 803c9bc:	20007448 	.word	0x20007448
 803c9c0:	20007445 	.word	0x20007445
 803c9c4:	2000744c 	.word	0x2000744c
 803c9c8:	20001ca8 	.word	0x20001ca8
 803c9cc:	20007446 	.word	0x20007446
 803c9d0:	08047fe4 	.word	0x08047fe4
 803c9d4:	0804a0d0 	.word	0x0804a0d0

0803c9d8 <gos_taskGetPriority>:

/*
 * Function: gos_taskGetPriority
 */
gos_result_t gos_taskGetPriority (gos_tid_t taskId, gos_taskPrio_t* taskPriority)
{
 803c9d8:	b480      	push	{r7}
 803c9da:	b085      	sub	sp, #20
 803c9dc:	af00      	add	r7, sp, #0
 803c9de:	4603      	mov	r3, r0
 803c9e0:	6039      	str	r1, [r7, #0]
 803c9e2:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 803c9e4:	23ae      	movs	r3, #174	; 0xae
 803c9e6:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 803c9e8:	2300      	movs	r3, #0
 803c9ea:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803c9ec:	4b2e      	ldr	r3, [pc, #184]	; (803caa8 <gos_taskGetPriority+0xd0>)
 803c9ee:	781b      	ldrb	r3, [r3, #0]
 803c9f0:	2b00      	cmp	r3, #0
 803c9f2:	d108      	bne.n	803ca06 <gos_taskGetPriority+0x2e>
 803c9f4:	b672      	cpsid	i
 803c9f6:	f3ef 8310 	mrs	r3, PRIMASK
 803c9fa:	4a2c      	ldr	r2, [pc, #176]	; (803caac <gos_taskGetPriority+0xd4>)
 803c9fc:	6013      	str	r3, [r2, #0]
 803c9fe:	f3bf 8f4f 	dsb	sy
 803ca02:	f3bf 8f6f 	isb	sy
 803ca06:	4b28      	ldr	r3, [pc, #160]	; (803caa8 <gos_taskGetPriority+0xd0>)
 803ca08:	781b      	ldrb	r3, [r3, #0]
 803ca0a:	3301      	adds	r3, #1
 803ca0c:	b2da      	uxtb	r2, r3
 803ca0e:	4b26      	ldr	r3, [pc, #152]	; (803caa8 <gos_taskGetPriority+0xd0>)
 803ca10:	701a      	strb	r2, [r3, #0]
 803ca12:	4b27      	ldr	r3, [pc, #156]	; (803cab0 <gos_taskGetPriority+0xd8>)
 803ca14:	781b      	ldrb	r3, [r3, #0]
 803ca16:	3301      	adds	r3, #1
 803ca18:	b2da      	uxtb	r2, r3
 803ca1a:	4b25      	ldr	r3, [pc, #148]	; (803cab0 <gos_taskGetPriority+0xd8>)
 803ca1c:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 803ca1e:	88fb      	ldrh	r3, [r7, #6]
 803ca20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803ca24:	d917      	bls.n	803ca56 <gos_taskGetPriority+0x7e>
 803ca26:	88fb      	ldrh	r3, [r7, #6]
 803ca28:	f248 022f 	movw	r2, #32815	; 0x802f
 803ca2c:	4293      	cmp	r3, r2
 803ca2e:	d812      	bhi.n	803ca56 <gos_taskGetPriority+0x7e>
 803ca30:	683b      	ldr	r3, [r7, #0]
 803ca32:	2b00      	cmp	r3, #0
 803ca34:	d00f      	beq.n	803ca56 <gos_taskGetPriority+0x7e>
        taskPriority != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803ca36:	88fb      	ldrh	r3, [r7, #6]
 803ca38:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803ca3c:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 803ca3e:	4a1d      	ldr	r2, [pc, #116]	; (803cab4 <gos_taskGetPriority+0xdc>)
 803ca40:	68bb      	ldr	r3, [r7, #8]
 803ca42:	216a      	movs	r1, #106	; 0x6a
 803ca44:	fb01 f303 	mul.w	r3, r1, r3
 803ca48:	4413      	add	r3, r2
 803ca4a:	3306      	adds	r3, #6
 803ca4c:	781a      	ldrb	r2, [r3, #0]
 803ca4e:	683b      	ldr	r3, [r7, #0]
 803ca50:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 803ca52:	2355      	movs	r3, #85	; 0x55
 803ca54:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or task priority is NULL.
    }
    GOS_ATOMIC_EXIT
 803ca56:	4b14      	ldr	r3, [pc, #80]	; (803caa8 <gos_taskGetPriority+0xd0>)
 803ca58:	781b      	ldrb	r3, [r3, #0]
 803ca5a:	2b00      	cmp	r3, #0
 803ca5c:	d005      	beq.n	803ca6a <gos_taskGetPriority+0x92>
 803ca5e:	4b12      	ldr	r3, [pc, #72]	; (803caa8 <gos_taskGetPriority+0xd0>)
 803ca60:	781b      	ldrb	r3, [r3, #0]
 803ca62:	3b01      	subs	r3, #1
 803ca64:	b2da      	uxtb	r2, r3
 803ca66:	4b10      	ldr	r3, [pc, #64]	; (803caa8 <gos_taskGetPriority+0xd0>)
 803ca68:	701a      	strb	r2, [r3, #0]
 803ca6a:	4b0f      	ldr	r3, [pc, #60]	; (803caa8 <gos_taskGetPriority+0xd0>)
 803ca6c:	781b      	ldrb	r3, [r3, #0]
 803ca6e:	2b00      	cmp	r3, #0
 803ca70:	d108      	bne.n	803ca84 <gos_taskGetPriority+0xac>
 803ca72:	4b0e      	ldr	r3, [pc, #56]	; (803caac <gos_taskGetPriority+0xd4>)
 803ca74:	681b      	ldr	r3, [r3, #0]
 803ca76:	f383 8810 	msr	PRIMASK, r3
 803ca7a:	b662      	cpsie	i
 803ca7c:	f3bf 8f4f 	dsb	sy
 803ca80:	f3bf 8f6f 	isb	sy
 803ca84:	4b0a      	ldr	r3, [pc, #40]	; (803cab0 <gos_taskGetPriority+0xd8>)
 803ca86:	781b      	ldrb	r3, [r3, #0]
 803ca88:	2b00      	cmp	r3, #0
 803ca8a:	d005      	beq.n	803ca98 <gos_taskGetPriority+0xc0>
 803ca8c:	4b08      	ldr	r3, [pc, #32]	; (803cab0 <gos_taskGetPriority+0xd8>)
 803ca8e:	781b      	ldrb	r3, [r3, #0]
 803ca90:	3b01      	subs	r3, #1
 803ca92:	b2da      	uxtb	r2, r3
 803ca94:	4b06      	ldr	r3, [pc, #24]	; (803cab0 <gos_taskGetPriority+0xd8>)
 803ca96:	701a      	strb	r2, [r3, #0]

    return taskGetPriorityResult;
 803ca98:	7bfb      	ldrb	r3, [r7, #15]
}
 803ca9a:	4618      	mov	r0, r3
 803ca9c:	3714      	adds	r7, #20
 803ca9e:	46bd      	mov	sp, r7
 803caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803caa4:	4770      	bx	lr
 803caa6:	bf00      	nop
 803caa8:	20007447 	.word	0x20007447
 803caac:	20007448 	.word	0x20007448
 803cab0:	20007445 	.word	0x20007445
 803cab4:	20001ca8 	.word	0x20001ca8

0803cab8 <gos_taskAddPrivilege>:

/*
 * Function: gos_taskAddPrivilege
 */
GOS_INLINE gos_result_t gos_taskAddPrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 803cab8:	b480      	push	{r7}
 803caba:	b085      	sub	sp, #20
 803cabc:	af00      	add	r7, sp, #0
 803cabe:	4603      	mov	r3, r0
 803cac0:	460a      	mov	r2, r1
 803cac2:	80fb      	strh	r3, [r7, #6]
 803cac4:	4613      	mov	r3, r2
 803cac6:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 803cac8:	23ae      	movs	r3, #174	; 0xae
 803caca:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 803cacc:	2300      	movs	r3, #0
 803cace:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803cad0:	4b31      	ldr	r3, [pc, #196]	; (803cb98 <gos_taskAddPrivilege+0xe0>)
 803cad2:	781b      	ldrb	r3, [r3, #0]
 803cad4:	2b00      	cmp	r3, #0
 803cad6:	d108      	bne.n	803caea <gos_taskAddPrivilege+0x32>
 803cad8:	b672      	cpsid	i
 803cada:	f3ef 8310 	mrs	r3, PRIMASK
 803cade:	4a2f      	ldr	r2, [pc, #188]	; (803cb9c <gos_taskAddPrivilege+0xe4>)
 803cae0:	6013      	str	r3, [r2, #0]
 803cae2:	f3bf 8f4f 	dsb	sy
 803cae6:	f3bf 8f6f 	isb	sy
 803caea:	4b2b      	ldr	r3, [pc, #172]	; (803cb98 <gos_taskAddPrivilege+0xe0>)
 803caec:	781b      	ldrb	r3, [r3, #0]
 803caee:	3301      	adds	r3, #1
 803caf0:	b2da      	uxtb	r2, r3
 803caf2:	4b29      	ldr	r3, [pc, #164]	; (803cb98 <gos_taskAddPrivilege+0xe0>)
 803caf4:	701a      	strb	r2, [r3, #0]
 803caf6:	4b2a      	ldr	r3, [pc, #168]	; (803cba0 <gos_taskAddPrivilege+0xe8>)
 803caf8:	781b      	ldrb	r3, [r3, #0]
 803cafa:	3301      	adds	r3, #1
 803cafc:	b2da      	uxtb	r2, r3
 803cafe:	4b28      	ldr	r3, [pc, #160]	; (803cba0 <gos_taskAddPrivilege+0xe8>)
 803cb00:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 803cb02:	88fb      	ldrh	r3, [r7, #6]
 803cb04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803cb08:	d91e      	bls.n	803cb48 <gos_taskAddPrivilege+0x90>
 803cb0a:	88fb      	ldrh	r3, [r7, #6]
 803cb0c:	f248 022f 	movw	r2, #32815	; 0x802f
 803cb10:	4293      	cmp	r3, r2
 803cb12:	d819      	bhi.n	803cb48 <gos_taskAddPrivilege+0x90>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803cb14:	88fb      	ldrh	r3, [r7, #6]
 803cb16:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803cb1a:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 803cb1c:	4a21      	ldr	r2, [pc, #132]	; (803cba4 <gos_taskAddPrivilege+0xec>)
 803cb1e:	68bb      	ldr	r3, [r7, #8]
 803cb20:	216a      	movs	r1, #106	; 0x6a
 803cb22:	fb01 f303 	mul.w	r3, r1, r3
 803cb26:	4413      	add	r3, r2
 803cb28:	3308      	adds	r3, #8
 803cb2a:	881a      	ldrh	r2, [r3, #0]
 803cb2c:	88bb      	ldrh	r3, [r7, #4]
 803cb2e:	4313      	orrs	r3, r2
 803cb30:	b298      	uxth	r0, r3
 803cb32:	4a1c      	ldr	r2, [pc, #112]	; (803cba4 <gos_taskAddPrivilege+0xec>)
 803cb34:	68bb      	ldr	r3, [r7, #8]
 803cb36:	216a      	movs	r1, #106	; 0x6a
 803cb38:	fb01 f303 	mul.w	r3, r1, r3
 803cb3c:	4413      	add	r3, r2
 803cb3e:	3308      	adds	r3, #8
 803cb40:	4602      	mov	r2, r0
 803cb42:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 803cb44:	2355      	movs	r3, #85	; 0x55
 803cb46:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 803cb48:	4b13      	ldr	r3, [pc, #76]	; (803cb98 <gos_taskAddPrivilege+0xe0>)
 803cb4a:	781b      	ldrb	r3, [r3, #0]
 803cb4c:	2b00      	cmp	r3, #0
 803cb4e:	d005      	beq.n	803cb5c <gos_taskAddPrivilege+0xa4>
 803cb50:	4b11      	ldr	r3, [pc, #68]	; (803cb98 <gos_taskAddPrivilege+0xe0>)
 803cb52:	781b      	ldrb	r3, [r3, #0]
 803cb54:	3b01      	subs	r3, #1
 803cb56:	b2da      	uxtb	r2, r3
 803cb58:	4b0f      	ldr	r3, [pc, #60]	; (803cb98 <gos_taskAddPrivilege+0xe0>)
 803cb5a:	701a      	strb	r2, [r3, #0]
 803cb5c:	4b0e      	ldr	r3, [pc, #56]	; (803cb98 <gos_taskAddPrivilege+0xe0>)
 803cb5e:	781b      	ldrb	r3, [r3, #0]
 803cb60:	2b00      	cmp	r3, #0
 803cb62:	d108      	bne.n	803cb76 <gos_taskAddPrivilege+0xbe>
 803cb64:	4b0d      	ldr	r3, [pc, #52]	; (803cb9c <gos_taskAddPrivilege+0xe4>)
 803cb66:	681b      	ldr	r3, [r3, #0]
 803cb68:	f383 8810 	msr	PRIMASK, r3
 803cb6c:	b662      	cpsie	i
 803cb6e:	f3bf 8f4f 	dsb	sy
 803cb72:	f3bf 8f6f 	isb	sy
 803cb76:	4b0a      	ldr	r3, [pc, #40]	; (803cba0 <gos_taskAddPrivilege+0xe8>)
 803cb78:	781b      	ldrb	r3, [r3, #0]
 803cb7a:	2b00      	cmp	r3, #0
 803cb7c:	d005      	beq.n	803cb8a <gos_taskAddPrivilege+0xd2>
 803cb7e:	4b08      	ldr	r3, [pc, #32]	; (803cba0 <gos_taskAddPrivilege+0xe8>)
 803cb80:	781b      	ldrb	r3, [r3, #0]
 803cb82:	3b01      	subs	r3, #1
 803cb84:	b2da      	uxtb	r2, r3
 803cb86:	4b06      	ldr	r3, [pc, #24]	; (803cba0 <gos_taskAddPrivilege+0xe8>)
 803cb88:	701a      	strb	r2, [r3, #0]

    return taskAddPrivilegeResult;
 803cb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 803cb8c:	4618      	mov	r0, r3
 803cb8e:	3714      	adds	r7, #20
 803cb90:	46bd      	mov	sp, r7
 803cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cb96:	4770      	bx	lr
 803cb98:	20007447 	.word	0x20007447
 803cb9c:	20007448 	.word	0x20007448
 803cba0:	20007445 	.word	0x20007445
 803cba4:	20001ca8 	.word	0x20001ca8

0803cba8 <gos_taskRemovePrivilege>:

/*
 * Function: gos_taskRemovePrivilege
 */
GOS_INLINE gos_result_t gos_taskRemovePrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 803cba8:	b480      	push	{r7}
 803cbaa:	b085      	sub	sp, #20
 803cbac:	af00      	add	r7, sp, #0
 803cbae:	4603      	mov	r3, r0
 803cbb0:	460a      	mov	r2, r1
 803cbb2:	80fb      	strh	r3, [r7, #6]
 803cbb4:	4613      	mov	r3, r2
 803cbb6:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 803cbb8:	23ae      	movs	r3, #174	; 0xae
 803cbba:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 803cbbc:	2300      	movs	r3, #0
 803cbbe:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803cbc0:	4b34      	ldr	r3, [pc, #208]	; (803cc94 <gos_taskRemovePrivilege+0xec>)
 803cbc2:	781b      	ldrb	r3, [r3, #0]
 803cbc4:	2b00      	cmp	r3, #0
 803cbc6:	d108      	bne.n	803cbda <gos_taskRemovePrivilege+0x32>
 803cbc8:	b672      	cpsid	i
 803cbca:	f3ef 8310 	mrs	r3, PRIMASK
 803cbce:	4a32      	ldr	r2, [pc, #200]	; (803cc98 <gos_taskRemovePrivilege+0xf0>)
 803cbd0:	6013      	str	r3, [r2, #0]
 803cbd2:	f3bf 8f4f 	dsb	sy
 803cbd6:	f3bf 8f6f 	isb	sy
 803cbda:	4b2e      	ldr	r3, [pc, #184]	; (803cc94 <gos_taskRemovePrivilege+0xec>)
 803cbdc:	781b      	ldrb	r3, [r3, #0]
 803cbde:	3301      	adds	r3, #1
 803cbe0:	b2da      	uxtb	r2, r3
 803cbe2:	4b2c      	ldr	r3, [pc, #176]	; (803cc94 <gos_taskRemovePrivilege+0xec>)
 803cbe4:	701a      	strb	r2, [r3, #0]
 803cbe6:	4b2d      	ldr	r3, [pc, #180]	; (803cc9c <gos_taskRemovePrivilege+0xf4>)
 803cbe8:	781b      	ldrb	r3, [r3, #0]
 803cbea:	3301      	adds	r3, #1
 803cbec:	b2da      	uxtb	r2, r3
 803cbee:	4b2b      	ldr	r3, [pc, #172]	; (803cc9c <gos_taskRemovePrivilege+0xf4>)
 803cbf0:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 803cbf2:	88fb      	ldrh	r3, [r7, #6]
 803cbf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803cbf8:	d923      	bls.n	803cc42 <gos_taskRemovePrivilege+0x9a>
 803cbfa:	88fb      	ldrh	r3, [r7, #6]
 803cbfc:	f248 022f 	movw	r2, #32815	; 0x802f
 803cc00:	4293      	cmp	r3, r2
 803cc02:	d81e      	bhi.n	803cc42 <gos_taskRemovePrivilege+0x9a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803cc04:	88fb      	ldrh	r3, [r7, #6]
 803cc06:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803cc0a:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 803cc0c:	4a24      	ldr	r2, [pc, #144]	; (803cca0 <gos_taskRemovePrivilege+0xf8>)
 803cc0e:	68bb      	ldr	r3, [r7, #8]
 803cc10:	216a      	movs	r1, #106	; 0x6a
 803cc12:	fb01 f303 	mul.w	r3, r1, r3
 803cc16:	4413      	add	r3, r2
 803cc18:	3308      	adds	r3, #8
 803cc1a:	881b      	ldrh	r3, [r3, #0]
 803cc1c:	b21a      	sxth	r2, r3
 803cc1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 803cc22:	43db      	mvns	r3, r3
 803cc24:	b21b      	sxth	r3, r3
 803cc26:	4013      	ands	r3, r2
 803cc28:	b21b      	sxth	r3, r3
 803cc2a:	b298      	uxth	r0, r3
 803cc2c:	4a1c      	ldr	r2, [pc, #112]	; (803cca0 <gos_taskRemovePrivilege+0xf8>)
 803cc2e:	68bb      	ldr	r3, [r7, #8]
 803cc30:	216a      	movs	r1, #106	; 0x6a
 803cc32:	fb01 f303 	mul.w	r3, r1, r3
 803cc36:	4413      	add	r3, r2
 803cc38:	3308      	adds	r3, #8
 803cc3a:	4602      	mov	r2, r0
 803cc3c:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 803cc3e:	2355      	movs	r3, #85	; 0x55
 803cc40:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 803cc42:	4b14      	ldr	r3, [pc, #80]	; (803cc94 <gos_taskRemovePrivilege+0xec>)
 803cc44:	781b      	ldrb	r3, [r3, #0]
 803cc46:	2b00      	cmp	r3, #0
 803cc48:	d005      	beq.n	803cc56 <gos_taskRemovePrivilege+0xae>
 803cc4a:	4b12      	ldr	r3, [pc, #72]	; (803cc94 <gos_taskRemovePrivilege+0xec>)
 803cc4c:	781b      	ldrb	r3, [r3, #0]
 803cc4e:	3b01      	subs	r3, #1
 803cc50:	b2da      	uxtb	r2, r3
 803cc52:	4b10      	ldr	r3, [pc, #64]	; (803cc94 <gos_taskRemovePrivilege+0xec>)
 803cc54:	701a      	strb	r2, [r3, #0]
 803cc56:	4b0f      	ldr	r3, [pc, #60]	; (803cc94 <gos_taskRemovePrivilege+0xec>)
 803cc58:	781b      	ldrb	r3, [r3, #0]
 803cc5a:	2b00      	cmp	r3, #0
 803cc5c:	d108      	bne.n	803cc70 <gos_taskRemovePrivilege+0xc8>
 803cc5e:	4b0e      	ldr	r3, [pc, #56]	; (803cc98 <gos_taskRemovePrivilege+0xf0>)
 803cc60:	681b      	ldr	r3, [r3, #0]
 803cc62:	f383 8810 	msr	PRIMASK, r3
 803cc66:	b662      	cpsie	i
 803cc68:	f3bf 8f4f 	dsb	sy
 803cc6c:	f3bf 8f6f 	isb	sy
 803cc70:	4b0a      	ldr	r3, [pc, #40]	; (803cc9c <gos_taskRemovePrivilege+0xf4>)
 803cc72:	781b      	ldrb	r3, [r3, #0]
 803cc74:	2b00      	cmp	r3, #0
 803cc76:	d005      	beq.n	803cc84 <gos_taskRemovePrivilege+0xdc>
 803cc78:	4b08      	ldr	r3, [pc, #32]	; (803cc9c <gos_taskRemovePrivilege+0xf4>)
 803cc7a:	781b      	ldrb	r3, [r3, #0]
 803cc7c:	3b01      	subs	r3, #1
 803cc7e:	b2da      	uxtb	r2, r3
 803cc80:	4b06      	ldr	r3, [pc, #24]	; (803cc9c <gos_taskRemovePrivilege+0xf4>)
 803cc82:	701a      	strb	r2, [r3, #0]

    return taskRemovePrivilegeResult;
 803cc84:	7bfb      	ldrb	r3, [r7, #15]
}
 803cc86:	4618      	mov	r0, r3
 803cc88:	3714      	adds	r7, #20
 803cc8a:	46bd      	mov	sp, r7
 803cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cc90:	4770      	bx	lr
 803cc92:	bf00      	nop
 803cc94:	20007447 	.word	0x20007447
 803cc98:	20007448 	.word	0x20007448
 803cc9c:	20007445 	.word	0x20007445
 803cca0:	20001ca8 	.word	0x20001ca8

0803cca4 <gos_taskSetPrivileges>:

/*
 * Function: gos_taskSetPrivileges
 */
GOS_INLINE gos_result_t gos_taskSetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 803cca4:	b480      	push	{r7}
 803cca6:	b085      	sub	sp, #20
 803cca8:	af00      	add	r7, sp, #0
 803ccaa:	4603      	mov	r3, r0
 803ccac:	460a      	mov	r2, r1
 803ccae:	80fb      	strh	r3, [r7, #6]
 803ccb0:	4613      	mov	r3, r2
 803ccb2:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 803ccb4:	23ae      	movs	r3, #174	; 0xae
 803ccb6:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 803ccb8:	2300      	movs	r3, #0
 803ccba:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803ccbc:	4b2c      	ldr	r3, [pc, #176]	; (803cd70 <gos_taskSetPrivileges+0xcc>)
 803ccbe:	781b      	ldrb	r3, [r3, #0]
 803ccc0:	2b00      	cmp	r3, #0
 803ccc2:	d108      	bne.n	803ccd6 <gos_taskSetPrivileges+0x32>
 803ccc4:	b672      	cpsid	i
 803ccc6:	f3ef 8310 	mrs	r3, PRIMASK
 803ccca:	4a2a      	ldr	r2, [pc, #168]	; (803cd74 <gos_taskSetPrivileges+0xd0>)
 803cccc:	6013      	str	r3, [r2, #0]
 803ccce:	f3bf 8f4f 	dsb	sy
 803ccd2:	f3bf 8f6f 	isb	sy
 803ccd6:	4b26      	ldr	r3, [pc, #152]	; (803cd70 <gos_taskSetPrivileges+0xcc>)
 803ccd8:	781b      	ldrb	r3, [r3, #0]
 803ccda:	3301      	adds	r3, #1
 803ccdc:	b2da      	uxtb	r2, r3
 803ccde:	4b24      	ldr	r3, [pc, #144]	; (803cd70 <gos_taskSetPrivileges+0xcc>)
 803cce0:	701a      	strb	r2, [r3, #0]
 803cce2:	4b25      	ldr	r3, [pc, #148]	; (803cd78 <gos_taskSetPrivileges+0xd4>)
 803cce4:	781b      	ldrb	r3, [r3, #0]
 803cce6:	3301      	adds	r3, #1
 803cce8:	b2da      	uxtb	r2, r3
 803ccea:	4b23      	ldr	r3, [pc, #140]	; (803cd78 <gos_taskSetPrivileges+0xd4>)
 803ccec:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 803ccee:	88fb      	ldrh	r3, [r7, #6]
 803ccf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803ccf4:	d913      	bls.n	803cd1e <gos_taskSetPrivileges+0x7a>
 803ccf6:	88fb      	ldrh	r3, [r7, #6]
 803ccf8:	f248 022f 	movw	r2, #32815	; 0x802f
 803ccfc:	4293      	cmp	r3, r2
 803ccfe:	d80e      	bhi.n	803cd1e <gos_taskSetPrivileges+0x7a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803cd00:	88fb      	ldrh	r3, [r7, #6]
 803cd02:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803cd06:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 803cd08:	4a1c      	ldr	r2, [pc, #112]	; (803cd7c <gos_taskSetPrivileges+0xd8>)
 803cd0a:	68bb      	ldr	r3, [r7, #8]
 803cd0c:	216a      	movs	r1, #106	; 0x6a
 803cd0e:	fb01 f303 	mul.w	r3, r1, r3
 803cd12:	4413      	add	r3, r2
 803cd14:	3308      	adds	r3, #8
 803cd16:	88ba      	ldrh	r2, [r7, #4]
 803cd18:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 803cd1a:	2355      	movs	r3, #85	; 0x55
 803cd1c:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 803cd1e:	4b14      	ldr	r3, [pc, #80]	; (803cd70 <gos_taskSetPrivileges+0xcc>)
 803cd20:	781b      	ldrb	r3, [r3, #0]
 803cd22:	2b00      	cmp	r3, #0
 803cd24:	d005      	beq.n	803cd32 <gos_taskSetPrivileges+0x8e>
 803cd26:	4b12      	ldr	r3, [pc, #72]	; (803cd70 <gos_taskSetPrivileges+0xcc>)
 803cd28:	781b      	ldrb	r3, [r3, #0]
 803cd2a:	3b01      	subs	r3, #1
 803cd2c:	b2da      	uxtb	r2, r3
 803cd2e:	4b10      	ldr	r3, [pc, #64]	; (803cd70 <gos_taskSetPrivileges+0xcc>)
 803cd30:	701a      	strb	r2, [r3, #0]
 803cd32:	4b0f      	ldr	r3, [pc, #60]	; (803cd70 <gos_taskSetPrivileges+0xcc>)
 803cd34:	781b      	ldrb	r3, [r3, #0]
 803cd36:	2b00      	cmp	r3, #0
 803cd38:	d108      	bne.n	803cd4c <gos_taskSetPrivileges+0xa8>
 803cd3a:	4b0e      	ldr	r3, [pc, #56]	; (803cd74 <gos_taskSetPrivileges+0xd0>)
 803cd3c:	681b      	ldr	r3, [r3, #0]
 803cd3e:	f383 8810 	msr	PRIMASK, r3
 803cd42:	b662      	cpsie	i
 803cd44:	f3bf 8f4f 	dsb	sy
 803cd48:	f3bf 8f6f 	isb	sy
 803cd4c:	4b0a      	ldr	r3, [pc, #40]	; (803cd78 <gos_taskSetPrivileges+0xd4>)
 803cd4e:	781b      	ldrb	r3, [r3, #0]
 803cd50:	2b00      	cmp	r3, #0
 803cd52:	d005      	beq.n	803cd60 <gos_taskSetPrivileges+0xbc>
 803cd54:	4b08      	ldr	r3, [pc, #32]	; (803cd78 <gos_taskSetPrivileges+0xd4>)
 803cd56:	781b      	ldrb	r3, [r3, #0]
 803cd58:	3b01      	subs	r3, #1
 803cd5a:	b2da      	uxtb	r2, r3
 803cd5c:	4b06      	ldr	r3, [pc, #24]	; (803cd78 <gos_taskSetPrivileges+0xd4>)
 803cd5e:	701a      	strb	r2, [r3, #0]

    return taskSetPrivilegesResult;
 803cd60:	7bfb      	ldrb	r3, [r7, #15]
}
 803cd62:	4618      	mov	r0, r3
 803cd64:	3714      	adds	r7, #20
 803cd66:	46bd      	mov	sp, r7
 803cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cd6c:	4770      	bx	lr
 803cd6e:	bf00      	nop
 803cd70:	20007447 	.word	0x20007447
 803cd74:	20007448 	.word	0x20007448
 803cd78:	20007445 	.word	0x20007445
 803cd7c:	20001ca8 	.word	0x20001ca8

0803cd80 <gos_taskGetPrivileges>:

/*
 * Function: gos_taskGetPrivileges
 */
GOS_INLINE gos_result_t gos_taskGetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t* privileges)
{
 803cd80:	b480      	push	{r7}
 803cd82:	b085      	sub	sp, #20
 803cd84:	af00      	add	r7, sp, #0
 803cd86:	4603      	mov	r3, r0
 803cd88:	6039      	str	r1, [r7, #0]
 803cd8a:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 803cd8c:	23ae      	movs	r3, #174	; 0xae
 803cd8e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 803cd90:	2300      	movs	r3, #0
 803cd92:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803cd94:	4b2e      	ldr	r3, [pc, #184]	; (803ce50 <gos_taskGetPrivileges+0xd0>)
 803cd96:	781b      	ldrb	r3, [r3, #0]
 803cd98:	2b00      	cmp	r3, #0
 803cd9a:	d108      	bne.n	803cdae <gos_taskGetPrivileges+0x2e>
 803cd9c:	b672      	cpsid	i
 803cd9e:	f3ef 8310 	mrs	r3, PRIMASK
 803cda2:	4a2c      	ldr	r2, [pc, #176]	; (803ce54 <gos_taskGetPrivileges+0xd4>)
 803cda4:	6013      	str	r3, [r2, #0]
 803cda6:	f3bf 8f4f 	dsb	sy
 803cdaa:	f3bf 8f6f 	isb	sy
 803cdae:	4b28      	ldr	r3, [pc, #160]	; (803ce50 <gos_taskGetPrivileges+0xd0>)
 803cdb0:	781b      	ldrb	r3, [r3, #0]
 803cdb2:	3301      	adds	r3, #1
 803cdb4:	b2da      	uxtb	r2, r3
 803cdb6:	4b26      	ldr	r3, [pc, #152]	; (803ce50 <gos_taskGetPrivileges+0xd0>)
 803cdb8:	701a      	strb	r2, [r3, #0]
 803cdba:	4b27      	ldr	r3, [pc, #156]	; (803ce58 <gos_taskGetPrivileges+0xd8>)
 803cdbc:	781b      	ldrb	r3, [r3, #0]
 803cdbe:	3301      	adds	r3, #1
 803cdc0:	b2da      	uxtb	r2, r3
 803cdc2:	4b25      	ldr	r3, [pc, #148]	; (803ce58 <gos_taskGetPrivileges+0xd8>)
 803cdc4:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 803cdc6:	88fb      	ldrh	r3, [r7, #6]
 803cdc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803cdcc:	d917      	bls.n	803cdfe <gos_taskGetPrivileges+0x7e>
 803cdce:	88fb      	ldrh	r3, [r7, #6]
 803cdd0:	f248 022f 	movw	r2, #32815	; 0x802f
 803cdd4:	4293      	cmp	r3, r2
 803cdd6:	d812      	bhi.n	803cdfe <gos_taskGetPrivileges+0x7e>
 803cdd8:	683b      	ldr	r3, [r7, #0]
 803cdda:	2b00      	cmp	r3, #0
 803cddc:	d00f      	beq.n	803cdfe <gos_taskGetPrivileges+0x7e>
        privileges != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803cdde:	88fb      	ldrh	r3, [r7, #6]
 803cde0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803cde4:	60bb      	str	r3, [r7, #8]

        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 803cde6:	4a1d      	ldr	r2, [pc, #116]	; (803ce5c <gos_taskGetPrivileges+0xdc>)
 803cde8:	68bb      	ldr	r3, [r7, #8]
 803cdea:	216a      	movs	r1, #106	; 0x6a
 803cdec:	fb01 f303 	mul.w	r3, r1, r3
 803cdf0:	4413      	add	r3, r2
 803cdf2:	3308      	adds	r3, #8
 803cdf4:	881a      	ldrh	r2, [r3, #0]
 803cdf6:	683b      	ldr	r3, [r7, #0]
 803cdf8:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 803cdfa:	2355      	movs	r3, #85	; 0x55
 803cdfc:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or privileges is NULL pointer.
    }
    GOS_ATOMIC_EXIT
 803cdfe:	4b14      	ldr	r3, [pc, #80]	; (803ce50 <gos_taskGetPrivileges+0xd0>)
 803ce00:	781b      	ldrb	r3, [r3, #0]
 803ce02:	2b00      	cmp	r3, #0
 803ce04:	d005      	beq.n	803ce12 <gos_taskGetPrivileges+0x92>
 803ce06:	4b12      	ldr	r3, [pc, #72]	; (803ce50 <gos_taskGetPrivileges+0xd0>)
 803ce08:	781b      	ldrb	r3, [r3, #0]
 803ce0a:	3b01      	subs	r3, #1
 803ce0c:	b2da      	uxtb	r2, r3
 803ce0e:	4b10      	ldr	r3, [pc, #64]	; (803ce50 <gos_taskGetPrivileges+0xd0>)
 803ce10:	701a      	strb	r2, [r3, #0]
 803ce12:	4b0f      	ldr	r3, [pc, #60]	; (803ce50 <gos_taskGetPrivileges+0xd0>)
 803ce14:	781b      	ldrb	r3, [r3, #0]
 803ce16:	2b00      	cmp	r3, #0
 803ce18:	d108      	bne.n	803ce2c <gos_taskGetPrivileges+0xac>
 803ce1a:	4b0e      	ldr	r3, [pc, #56]	; (803ce54 <gos_taskGetPrivileges+0xd4>)
 803ce1c:	681b      	ldr	r3, [r3, #0]
 803ce1e:	f383 8810 	msr	PRIMASK, r3
 803ce22:	b662      	cpsie	i
 803ce24:	f3bf 8f4f 	dsb	sy
 803ce28:	f3bf 8f6f 	isb	sy
 803ce2c:	4b0a      	ldr	r3, [pc, #40]	; (803ce58 <gos_taskGetPrivileges+0xd8>)
 803ce2e:	781b      	ldrb	r3, [r3, #0]
 803ce30:	2b00      	cmp	r3, #0
 803ce32:	d005      	beq.n	803ce40 <gos_taskGetPrivileges+0xc0>
 803ce34:	4b08      	ldr	r3, [pc, #32]	; (803ce58 <gos_taskGetPrivileges+0xd8>)
 803ce36:	781b      	ldrb	r3, [r3, #0]
 803ce38:	3b01      	subs	r3, #1
 803ce3a:	b2da      	uxtb	r2, r3
 803ce3c:	4b06      	ldr	r3, [pc, #24]	; (803ce58 <gos_taskGetPrivileges+0xd8>)
 803ce3e:	701a      	strb	r2, [r3, #0]

    return taskGetPrivilegesResult;
 803ce40:	7bfb      	ldrb	r3, [r7, #15]
}
 803ce42:	4618      	mov	r0, r3
 803ce44:	3714      	adds	r7, #20
 803ce46:	46bd      	mov	sp, r7
 803ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ce4c:	4770      	bx	lr
 803ce4e:	bf00      	nop
 803ce50:	20007447 	.word	0x20007447
 803ce54:	20007448 	.word	0x20007448
 803ce58:	20007445 	.word	0x20007445
 803ce5c:	20001ca8 	.word	0x20001ca8

0803ce60 <gos_taskGetName>:

/*
 * Function: gos_taskGetName
 */
gos_result_t gos_taskGetName (gos_tid_t taskId, gos_taskName_t taskName)
{
 803ce60:	b580      	push	{r7, lr}
 803ce62:	b084      	sub	sp, #16
 803ce64:	af00      	add	r7, sp, #0
 803ce66:	4603      	mov	r3, r0
 803ce68:	6039      	str	r1, [r7, #0]
 803ce6a:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetNameResult = GOS_ERROR;
 803ce6c:	23ae      	movs	r3, #174	; 0xae
 803ce6e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 803ce70:	2300      	movs	r3, #0
 803ce72:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 803ce74:	88fb      	ldrh	r3, [r7, #6]
 803ce76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803ce7a:	d919      	bls.n	803ceb0 <gos_taskGetName+0x50>
 803ce7c:	88fb      	ldrh	r3, [r7, #6]
 803ce7e:	f248 022f 	movw	r2, #32815	; 0x802f
 803ce82:	4293      	cmp	r3, r2
 803ce84:	d814      	bhi.n	803ceb0 <gos_taskGetName+0x50>
 803ce86:	683b      	ldr	r3, [r7, #0]
 803ce88:	2b00      	cmp	r3, #0
 803ce8a:	d011      	beq.n	803ceb0 <gos_taskGetName+0x50>
        taskName != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803ce8c:	88fb      	ldrh	r3, [r7, #6]
 803ce8e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803ce92:	60bb      	str	r3, [r7, #8]

        (void_t) strcpy(taskName, taskDescriptors[taskIndex].taskName);
 803ce94:	68bb      	ldr	r3, [r7, #8]
 803ce96:	226a      	movs	r2, #106	; 0x6a
 803ce98:	fb02 f303 	mul.w	r3, r2, r3
 803ce9c:	3308      	adds	r3, #8
 803ce9e:	4a07      	ldr	r2, [pc, #28]	; (803cebc <gos_taskGetName+0x5c>)
 803cea0:	4413      	add	r3, r2
 803cea2:	3302      	adds	r3, #2
 803cea4:	4619      	mov	r1, r3
 803cea6:	6838      	ldr	r0, [r7, #0]
 803cea8:	f005 ff3f 	bl	8042d2a <strcpy>

        taskGetNameResult = GOS_SUCCESS;
 803ceac:	2355      	movs	r3, #85	; 0x55
 803ceae:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task ID error or task name pointer is NULL.
    }

    return taskGetNameResult;
 803ceb0:	7bfb      	ldrb	r3, [r7, #15]
}
 803ceb2:	4618      	mov	r0, r3
 803ceb4:	3710      	adds	r7, #16
 803ceb6:	46bd      	mov	sp, r7
 803ceb8:	bd80      	pop	{r7, pc}
 803ceba:	bf00      	nop
 803cebc:	20001ca8 	.word	0x20001ca8

0803cec0 <gos_taskGetId>:

/*
 * Function: gos_taskGetId
 */
gos_result_t gos_taskGetId (gos_taskName_t taskName, gos_tid_t* taskId)
{
 803cec0:	b580      	push	{r7, lr}
 803cec2:	b084      	sub	sp, #16
 803cec4:	af00      	add	r7, sp, #0
 803cec6:	6078      	str	r0, [r7, #4]
 803cec8:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskGetIdResult = GOS_ERROR;
 803ceca:	23ae      	movs	r3, #174	; 0xae
 803cecc:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 803cece:	2300      	movs	r3, #0
 803ced0:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 803ced2:	2300      	movs	r3, #0
 803ced4:	60bb      	str	r3, [r7, #8]
 803ced6:	e01e      	b.n	803cf16 <gos_taskGetId+0x56>
    {
        if (strcmp(taskName, taskDescriptors[taskIndex].taskName) == 0u)
 803ced8:	68bb      	ldr	r3, [r7, #8]
 803ceda:	226a      	movs	r2, #106	; 0x6a
 803cedc:	fb02 f303 	mul.w	r3, r2, r3
 803cee0:	3308      	adds	r3, #8
 803cee2:	4a12      	ldr	r2, [pc, #72]	; (803cf2c <gos_taskGetId+0x6c>)
 803cee4:	4413      	add	r3, r2
 803cee6:	3302      	adds	r3, #2
 803cee8:	4619      	mov	r1, r3
 803ceea:	6878      	ldr	r0, [r7, #4]
 803ceec:	f7e3 f990 	bl	8020210 <strcmp>
 803cef0:	4603      	mov	r3, r0
 803cef2:	2b00      	cmp	r3, #0
 803cef4:	d10c      	bne.n	803cf10 <gos_taskGetId+0x50>
        {
            *taskId = taskDescriptors[taskIndex].taskId;
 803cef6:	4a0d      	ldr	r2, [pc, #52]	; (803cf2c <gos_taskGetId+0x6c>)
 803cef8:	68bb      	ldr	r3, [r7, #8]
 803cefa:	216a      	movs	r1, #106	; 0x6a
 803cefc:	fb01 f303 	mul.w	r3, r1, r3
 803cf00:	4413      	add	r3, r2
 803cf02:	332a      	adds	r3, #42	; 0x2a
 803cf04:	881a      	ldrh	r2, [r3, #0]
 803cf06:	683b      	ldr	r3, [r7, #0]
 803cf08:	801a      	strh	r2, [r3, #0]
            taskGetIdResult = GOS_SUCCESS;
 803cf0a:	2355      	movs	r3, #85	; 0x55
 803cf0c:	73fb      	strb	r3, [r7, #15]
            break;
 803cf0e:	e008      	b.n	803cf22 <gos_taskGetId+0x62>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 803cf10:	68bb      	ldr	r3, [r7, #8]
 803cf12:	3301      	adds	r3, #1
 803cf14:	60bb      	str	r3, [r7, #8]
 803cf16:	68bb      	ldr	r3, [r7, #8]
 803cf18:	2b2f      	cmp	r3, #47	; 0x2f
 803cf1a:	d802      	bhi.n	803cf22 <gos_taskGetId+0x62>
 803cf1c:	683b      	ldr	r3, [r7, #0]
 803cf1e:	2b00      	cmp	r3, #0
 803cf20:	d1da      	bne.n	803ced8 <gos_taskGetId+0x18>
        {
            // Continue.
        }
    }

    return taskGetIdResult;
 803cf22:	7bfb      	ldrb	r3, [r7, #15]
}
 803cf24:	4618      	mov	r0, r3
 803cf26:	3710      	adds	r7, #16
 803cf28:	46bd      	mov	sp, r7
 803cf2a:	bd80      	pop	{r7, pc}
 803cf2c:	20001ca8 	.word	0x20001ca8

0803cf30 <gos_taskGetCurrentId>:

/*
 * Function: gos_taskGetCurrentId
 */
GOS_INLINE gos_result_t gos_taskGetCurrentId (gos_tid_t* taskId)
{
 803cf30:	b480      	push	{r7}
 803cf32:	b085      	sub	sp, #20
 803cf34:	af00      	add	r7, sp, #0
 803cf36:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 803cf38:	23ae      	movs	r3, #174	; 0xae
 803cf3a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803cf3c:	4b26      	ldr	r3, [pc, #152]	; (803cfd8 <gos_taskGetCurrentId+0xa8>)
 803cf3e:	781b      	ldrb	r3, [r3, #0]
 803cf40:	2b00      	cmp	r3, #0
 803cf42:	d108      	bne.n	803cf56 <gos_taskGetCurrentId+0x26>
 803cf44:	b672      	cpsid	i
 803cf46:	f3ef 8310 	mrs	r3, PRIMASK
 803cf4a:	4a24      	ldr	r2, [pc, #144]	; (803cfdc <gos_taskGetCurrentId+0xac>)
 803cf4c:	6013      	str	r3, [r2, #0]
 803cf4e:	f3bf 8f4f 	dsb	sy
 803cf52:	f3bf 8f6f 	isb	sy
 803cf56:	4b20      	ldr	r3, [pc, #128]	; (803cfd8 <gos_taskGetCurrentId+0xa8>)
 803cf58:	781b      	ldrb	r3, [r3, #0]
 803cf5a:	3301      	adds	r3, #1
 803cf5c:	b2da      	uxtb	r2, r3
 803cf5e:	4b1e      	ldr	r3, [pc, #120]	; (803cfd8 <gos_taskGetCurrentId+0xa8>)
 803cf60:	701a      	strb	r2, [r3, #0]
 803cf62:	4b1f      	ldr	r3, [pc, #124]	; (803cfe0 <gos_taskGetCurrentId+0xb0>)
 803cf64:	781b      	ldrb	r3, [r3, #0]
 803cf66:	3301      	adds	r3, #1
 803cf68:	b2da      	uxtb	r2, r3
 803cf6a:	4b1d      	ldr	r3, [pc, #116]	; (803cfe0 <gos_taskGetCurrentId+0xb0>)
 803cf6c:	701a      	strb	r2, [r3, #0]
    if (taskId != NULL)
 803cf6e:	687b      	ldr	r3, [r7, #4]
 803cf70:	2b00      	cmp	r3, #0
 803cf72:	d009      	beq.n	803cf88 <gos_taskGetCurrentId+0x58>
    {
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 803cf74:	4b1b      	ldr	r3, [pc, #108]	; (803cfe4 <gos_taskGetCurrentId+0xb4>)
 803cf76:	681b      	ldr	r3, [r3, #0]
 803cf78:	b29b      	uxth	r3, r3
 803cf7a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803cf7e:	b29a      	uxth	r2, r3
 803cf80:	687b      	ldr	r3, [r7, #4]
 803cf82:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 803cf84:	2355      	movs	r3, #85	; 0x55
 803cf86:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID pointer is NULL.
    }
    GOS_ATOMIC_EXIT
 803cf88:	4b13      	ldr	r3, [pc, #76]	; (803cfd8 <gos_taskGetCurrentId+0xa8>)
 803cf8a:	781b      	ldrb	r3, [r3, #0]
 803cf8c:	2b00      	cmp	r3, #0
 803cf8e:	d005      	beq.n	803cf9c <gos_taskGetCurrentId+0x6c>
 803cf90:	4b11      	ldr	r3, [pc, #68]	; (803cfd8 <gos_taskGetCurrentId+0xa8>)
 803cf92:	781b      	ldrb	r3, [r3, #0]
 803cf94:	3b01      	subs	r3, #1
 803cf96:	b2da      	uxtb	r2, r3
 803cf98:	4b0f      	ldr	r3, [pc, #60]	; (803cfd8 <gos_taskGetCurrentId+0xa8>)
 803cf9a:	701a      	strb	r2, [r3, #0]
 803cf9c:	4b0e      	ldr	r3, [pc, #56]	; (803cfd8 <gos_taskGetCurrentId+0xa8>)
 803cf9e:	781b      	ldrb	r3, [r3, #0]
 803cfa0:	2b00      	cmp	r3, #0
 803cfa2:	d108      	bne.n	803cfb6 <gos_taskGetCurrentId+0x86>
 803cfa4:	4b0d      	ldr	r3, [pc, #52]	; (803cfdc <gos_taskGetCurrentId+0xac>)
 803cfa6:	681b      	ldr	r3, [r3, #0]
 803cfa8:	f383 8810 	msr	PRIMASK, r3
 803cfac:	b662      	cpsie	i
 803cfae:	f3bf 8f4f 	dsb	sy
 803cfb2:	f3bf 8f6f 	isb	sy
 803cfb6:	4b0a      	ldr	r3, [pc, #40]	; (803cfe0 <gos_taskGetCurrentId+0xb0>)
 803cfb8:	781b      	ldrb	r3, [r3, #0]
 803cfba:	2b00      	cmp	r3, #0
 803cfbc:	d005      	beq.n	803cfca <gos_taskGetCurrentId+0x9a>
 803cfbe:	4b08      	ldr	r3, [pc, #32]	; (803cfe0 <gos_taskGetCurrentId+0xb0>)
 803cfc0:	781b      	ldrb	r3, [r3, #0]
 803cfc2:	3b01      	subs	r3, #1
 803cfc4:	b2da      	uxtb	r2, r3
 803cfc6:	4b06      	ldr	r3, [pc, #24]	; (803cfe0 <gos_taskGetCurrentId+0xb0>)
 803cfc8:	701a      	strb	r2, [r3, #0]

    return taskGetCurrentIdResult;
 803cfca:	7bfb      	ldrb	r3, [r7, #15]
}
 803cfcc:	4618      	mov	r0, r3
 803cfce:	3714      	adds	r7, #20
 803cfd0:	46bd      	mov	sp, r7
 803cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cfd6:	4770      	bx	lr
 803cfd8:	20007447 	.word	0x20007447
 803cfdc:	20007448 	.word	0x20007448
 803cfe0:	20007445 	.word	0x20007445
 803cfe4:	2000744c 	.word	0x2000744c

0803cfe8 <gos_taskGetData>:

/*
 * Function: gos_taskGetData
 */
gos_result_t gos_taskGetData (gos_tid_t taskId, gos_taskDescriptor_t* taskData)
{
 803cfe8:	b580      	push	{r7, lr}
 803cfea:	b084      	sub	sp, #16
 803cfec:	af00      	add	r7, sp, #0
 803cfee:	4603      	mov	r3, r0
 803cff0:	6039      	str	r1, [r7, #0]
 803cff2:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 803cff4:	23ae      	movs	r3, #174	; 0xae
 803cff6:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 803cff8:	2300      	movs	r3, #0
 803cffa:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803cffc:	4b2d      	ldr	r3, [pc, #180]	; (803d0b4 <gos_taskGetData+0xcc>)
 803cffe:	781b      	ldrb	r3, [r3, #0]
 803d000:	2b00      	cmp	r3, #0
 803d002:	d108      	bne.n	803d016 <gos_taskGetData+0x2e>
 803d004:	b672      	cpsid	i
 803d006:	f3ef 8310 	mrs	r3, PRIMASK
 803d00a:	4a2b      	ldr	r2, [pc, #172]	; (803d0b8 <gos_taskGetData+0xd0>)
 803d00c:	6013      	str	r3, [r2, #0]
 803d00e:	f3bf 8f4f 	dsb	sy
 803d012:	f3bf 8f6f 	isb	sy
 803d016:	4b27      	ldr	r3, [pc, #156]	; (803d0b4 <gos_taskGetData+0xcc>)
 803d018:	781b      	ldrb	r3, [r3, #0]
 803d01a:	3301      	adds	r3, #1
 803d01c:	b2da      	uxtb	r2, r3
 803d01e:	4b25      	ldr	r3, [pc, #148]	; (803d0b4 <gos_taskGetData+0xcc>)
 803d020:	701a      	strb	r2, [r3, #0]
 803d022:	4b26      	ldr	r3, [pc, #152]	; (803d0bc <gos_taskGetData+0xd4>)
 803d024:	781b      	ldrb	r3, [r3, #0]
 803d026:	3301      	adds	r3, #1
 803d028:	b2da      	uxtb	r2, r3
 803d02a:	4b24      	ldr	r3, [pc, #144]	; (803d0bc <gos_taskGetData+0xd4>)
 803d02c:	701a      	strb	r2, [r3, #0]
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 803d02e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 803d032:	2b00      	cmp	r3, #0
 803d034:	da18      	bge.n	803d068 <gos_taskGetData+0x80>
 803d036:	88fb      	ldrh	r3, [r7, #6]
 803d038:	f248 022f 	movw	r2, #32815	; 0x802f
 803d03c:	4293      	cmp	r3, r2
 803d03e:	d813      	bhi.n	803d068 <gos_taskGetData+0x80>
 803d040:	683b      	ldr	r3, [r7, #0]
 803d042:	2b00      	cmp	r3, #0
 803d044:	d010      	beq.n	803d068 <gos_taskGetData+0x80>
        taskData != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 803d046:	88fb      	ldrh	r3, [r7, #6]
 803d048:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 803d04c:	60bb      	str	r3, [r7, #8]

        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 803d04e:	68bb      	ldr	r3, [r7, #8]
 803d050:	226a      	movs	r2, #106	; 0x6a
 803d052:	fb02 f303 	mul.w	r3, r2, r3
 803d056:	4a1a      	ldr	r2, [pc, #104]	; (803d0c0 <gos_taskGetData+0xd8>)
 803d058:	4413      	add	r3, r2
 803d05a:	226a      	movs	r2, #106	; 0x6a
 803d05c:	4619      	mov	r1, r3
 803d05e:	6838      	ldr	r0, [r7, #0]
 803d060:	f005 fe6b 	bl	8042d3a <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 803d064:	2355      	movs	r3, #85	; 0x55
 803d066:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 803d068:	4b12      	ldr	r3, [pc, #72]	; (803d0b4 <gos_taskGetData+0xcc>)
 803d06a:	781b      	ldrb	r3, [r3, #0]
 803d06c:	2b00      	cmp	r3, #0
 803d06e:	d005      	beq.n	803d07c <gos_taskGetData+0x94>
 803d070:	4b10      	ldr	r3, [pc, #64]	; (803d0b4 <gos_taskGetData+0xcc>)
 803d072:	781b      	ldrb	r3, [r3, #0]
 803d074:	3b01      	subs	r3, #1
 803d076:	b2da      	uxtb	r2, r3
 803d078:	4b0e      	ldr	r3, [pc, #56]	; (803d0b4 <gos_taskGetData+0xcc>)
 803d07a:	701a      	strb	r2, [r3, #0]
 803d07c:	4b0d      	ldr	r3, [pc, #52]	; (803d0b4 <gos_taskGetData+0xcc>)
 803d07e:	781b      	ldrb	r3, [r3, #0]
 803d080:	2b00      	cmp	r3, #0
 803d082:	d108      	bne.n	803d096 <gos_taskGetData+0xae>
 803d084:	4b0c      	ldr	r3, [pc, #48]	; (803d0b8 <gos_taskGetData+0xd0>)
 803d086:	681b      	ldr	r3, [r3, #0]
 803d088:	f383 8810 	msr	PRIMASK, r3
 803d08c:	b662      	cpsie	i
 803d08e:	f3bf 8f4f 	dsb	sy
 803d092:	f3bf 8f6f 	isb	sy
 803d096:	4b09      	ldr	r3, [pc, #36]	; (803d0bc <gos_taskGetData+0xd4>)
 803d098:	781b      	ldrb	r3, [r3, #0]
 803d09a:	2b00      	cmp	r3, #0
 803d09c:	d005      	beq.n	803d0aa <gos_taskGetData+0xc2>
 803d09e:	4b07      	ldr	r3, [pc, #28]	; (803d0bc <gos_taskGetData+0xd4>)
 803d0a0:	781b      	ldrb	r3, [r3, #0]
 803d0a2:	3b01      	subs	r3, #1
 803d0a4:	b2da      	uxtb	r2, r3
 803d0a6:	4b05      	ldr	r3, [pc, #20]	; (803d0bc <gos_taskGetData+0xd4>)
 803d0a8:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 803d0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 803d0ac:	4618      	mov	r0, r3
 803d0ae:	3710      	adds	r7, #16
 803d0b0:	46bd      	mov	sp, r7
 803d0b2:	bd80      	pop	{r7, pc}
 803d0b4:	20007447 	.word	0x20007447
 803d0b8:	20007448 	.word	0x20007448
 803d0bc:	20007445 	.word	0x20007445
 803d0c0:	20001ca8 	.word	0x20001ca8

0803d0c4 <gos_taskGetDataByIndex>:

/*
 * Function: gos_taskGetDataByIndex
 */
gos_result_t gos_taskGetDataByIndex (u16_t taskIndex, gos_taskDescriptor_t* taskData)
{
 803d0c4:	b580      	push	{r7, lr}
 803d0c6:	b084      	sub	sp, #16
 803d0c8:	af00      	add	r7, sp, #0
 803d0ca:	4603      	mov	r3, r0
 803d0cc:	6039      	str	r1, [r7, #0]
 803d0ce:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 803d0d0:	23ae      	movs	r3, #174	; 0xae
 803d0d2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 803d0d4:	4b2f      	ldr	r3, [pc, #188]	; (803d194 <gos_taskGetDataByIndex+0xd0>)
 803d0d6:	781b      	ldrb	r3, [r3, #0]
 803d0d8:	2b00      	cmp	r3, #0
 803d0da:	d108      	bne.n	803d0ee <gos_taskGetDataByIndex+0x2a>
 803d0dc:	b672      	cpsid	i
 803d0de:	f3ef 8310 	mrs	r3, PRIMASK
 803d0e2:	4a2d      	ldr	r2, [pc, #180]	; (803d198 <gos_taskGetDataByIndex+0xd4>)
 803d0e4:	6013      	str	r3, [r2, #0]
 803d0e6:	f3bf 8f4f 	dsb	sy
 803d0ea:	f3bf 8f6f 	isb	sy
 803d0ee:	4b29      	ldr	r3, [pc, #164]	; (803d194 <gos_taskGetDataByIndex+0xd0>)
 803d0f0:	781b      	ldrb	r3, [r3, #0]
 803d0f2:	3301      	adds	r3, #1
 803d0f4:	b2da      	uxtb	r2, r3
 803d0f6:	4b27      	ldr	r3, [pc, #156]	; (803d194 <gos_taskGetDataByIndex+0xd0>)
 803d0f8:	701a      	strb	r2, [r3, #0]
 803d0fa:	4b28      	ldr	r3, [pc, #160]	; (803d19c <gos_taskGetDataByIndex+0xd8>)
 803d0fc:	781b      	ldrb	r3, [r3, #0]
 803d0fe:	3301      	adds	r3, #1
 803d100:	b2da      	uxtb	r2, r3
 803d102:	4b26      	ldr	r3, [pc, #152]	; (803d19c <gos_taskGetDataByIndex+0xd8>)
 803d104:	701a      	strb	r2, [r3, #0]
    if (taskIndex < CFG_TASK_MAX_NUMBER &&
 803d106:	88fb      	ldrh	r3, [r7, #6]
 803d108:	2b2f      	cmp	r3, #47	; 0x2f
 803d10a:	d81d      	bhi.n	803d148 <gos_taskGetDataByIndex+0x84>
 803d10c:	683b      	ldr	r3, [r7, #0]
 803d10e:	2b00      	cmp	r3, #0
 803d110:	d01a      	beq.n	803d148 <gos_taskGetDataByIndex+0x84>
        taskData != NULL &&
        (taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_TASK_PRIVILEGE_KERNEL) == GOS_TASK_PRIVILEGE_KERNEL)
 803d112:	4b23      	ldr	r3, [pc, #140]	; (803d1a0 <gos_taskGetDataByIndex+0xdc>)
 803d114:	681b      	ldr	r3, [r3, #0]
 803d116:	4a23      	ldr	r2, [pc, #140]	; (803d1a4 <gos_taskGetDataByIndex+0xe0>)
 803d118:	216a      	movs	r1, #106	; 0x6a
 803d11a:	fb01 f303 	mul.w	r3, r1, r3
 803d11e:	4413      	add	r3, r2
 803d120:	3308      	adds	r3, #8
 803d122:	881b      	ldrh	r3, [r3, #0]
 803d124:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        taskData != NULL &&
 803d128:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 803d12c:	d10c      	bne.n	803d148 <gos_taskGetDataByIndex+0x84>
    {
        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 803d12e:	88fb      	ldrh	r3, [r7, #6]
 803d130:	226a      	movs	r2, #106	; 0x6a
 803d132:	fb02 f303 	mul.w	r3, r2, r3
 803d136:	4a1b      	ldr	r2, [pc, #108]	; (803d1a4 <gos_taskGetDataByIndex+0xe0>)
 803d138:	4413      	add	r3, r2
 803d13a:	226a      	movs	r2, #106	; 0x6a
 803d13c:	4619      	mov	r1, r3
 803d13e:	6838      	ldr	r0, [r7, #0]
 803d140:	f005 fdfb 	bl	8042d3a <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 803d144:	2355      	movs	r3, #85	; 0x55
 803d146:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 803d148:	4b12      	ldr	r3, [pc, #72]	; (803d194 <gos_taskGetDataByIndex+0xd0>)
 803d14a:	781b      	ldrb	r3, [r3, #0]
 803d14c:	2b00      	cmp	r3, #0
 803d14e:	d005      	beq.n	803d15c <gos_taskGetDataByIndex+0x98>
 803d150:	4b10      	ldr	r3, [pc, #64]	; (803d194 <gos_taskGetDataByIndex+0xd0>)
 803d152:	781b      	ldrb	r3, [r3, #0]
 803d154:	3b01      	subs	r3, #1
 803d156:	b2da      	uxtb	r2, r3
 803d158:	4b0e      	ldr	r3, [pc, #56]	; (803d194 <gos_taskGetDataByIndex+0xd0>)
 803d15a:	701a      	strb	r2, [r3, #0]
 803d15c:	4b0d      	ldr	r3, [pc, #52]	; (803d194 <gos_taskGetDataByIndex+0xd0>)
 803d15e:	781b      	ldrb	r3, [r3, #0]
 803d160:	2b00      	cmp	r3, #0
 803d162:	d108      	bne.n	803d176 <gos_taskGetDataByIndex+0xb2>
 803d164:	4b0c      	ldr	r3, [pc, #48]	; (803d198 <gos_taskGetDataByIndex+0xd4>)
 803d166:	681b      	ldr	r3, [r3, #0]
 803d168:	f383 8810 	msr	PRIMASK, r3
 803d16c:	b662      	cpsie	i
 803d16e:	f3bf 8f4f 	dsb	sy
 803d172:	f3bf 8f6f 	isb	sy
 803d176:	4b09      	ldr	r3, [pc, #36]	; (803d19c <gos_taskGetDataByIndex+0xd8>)
 803d178:	781b      	ldrb	r3, [r3, #0]
 803d17a:	2b00      	cmp	r3, #0
 803d17c:	d005      	beq.n	803d18a <gos_taskGetDataByIndex+0xc6>
 803d17e:	4b07      	ldr	r3, [pc, #28]	; (803d19c <gos_taskGetDataByIndex+0xd8>)
 803d180:	781b      	ldrb	r3, [r3, #0]
 803d182:	3b01      	subs	r3, #1
 803d184:	b2da      	uxtb	r2, r3
 803d186:	4b05      	ldr	r3, [pc, #20]	; (803d19c <gos_taskGetDataByIndex+0xd8>)
 803d188:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 803d18a:	7bfb      	ldrb	r3, [r7, #15]
}
 803d18c:	4618      	mov	r0, r3
 803d18e:	3710      	adds	r7, #16
 803d190:	46bd      	mov	sp, r7
 803d192:	bd80      	pop	{r7, pc}
 803d194:	20007447 	.word	0x20007447
 803d198:	20007448 	.word	0x20007448
 803d19c:	20007445 	.word	0x20007445
 803d1a0:	2000744c 	.word	0x2000744c
 803d1a4:	20001ca8 	.word	0x20001ca8

0803d1a8 <gos_taskGetNumber>:

/*
 * Function: gos_taskGetNumber
 */
gos_result_t gos_taskGetNumber (u16_t* pTaskNum)
{
 803d1a8:	b480      	push	{r7}
 803d1aa:	b085      	sub	sp, #20
 803d1ac:	af00      	add	r7, sp, #0
 803d1ae:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetNumResult = GOS_ERROR;
 803d1b0:	23ae      	movs	r3, #174	; 0xae
 803d1b2:	73fb      	strb	r3, [r7, #15]
    u16_t        taskIndex        = 0u;
 803d1b4:	2300      	movs	r3, #0
 803d1b6:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pTaskNum != NULL)
 803d1b8:	687b      	ldr	r3, [r7, #4]
 803d1ba:	2b00      	cmp	r3, #0
 803d1bc:	d01e      	beq.n	803d1fc <gos_taskGetNumber+0x54>
    {
        // Initialize variable.
        *pTaskNum = 0u;
 803d1be:	687b      	ldr	r3, [r7, #4]
 803d1c0:	2200      	movs	r2, #0
 803d1c2:	801a      	strh	r2, [r3, #0]

        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803d1c4:	2300      	movs	r3, #0
 803d1c6:	81bb      	strh	r3, [r7, #12]
 803d1c8:	e011      	b.n	803d1ee <gos_taskGetNumber+0x46>
        {
            if (taskDescriptors[taskIndex].taskFunction != NULL)
 803d1ca:	89bb      	ldrh	r3, [r7, #12]
 803d1cc:	4a0f      	ldr	r2, [pc, #60]	; (803d20c <gos_taskGetNumber+0x64>)
 803d1ce:	216a      	movs	r1, #106	; 0x6a
 803d1d0:	fb01 f303 	mul.w	r3, r1, r3
 803d1d4:	4413      	add	r3, r2
 803d1d6:	681b      	ldr	r3, [r3, #0]
 803d1d8:	2b00      	cmp	r3, #0
 803d1da:	d00c      	beq.n	803d1f6 <gos_taskGetNumber+0x4e>
            {
                // Increase counter.
                (*pTaskNum)++;
 803d1dc:	687b      	ldr	r3, [r7, #4]
 803d1de:	881b      	ldrh	r3, [r3, #0]
 803d1e0:	3301      	adds	r3, #1
 803d1e2:	b29a      	uxth	r2, r3
 803d1e4:	687b      	ldr	r3, [r7, #4]
 803d1e6:	801a      	strh	r2, [r3, #0]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803d1e8:	89bb      	ldrh	r3, [r7, #12]
 803d1ea:	3301      	adds	r3, #1
 803d1ec:	81bb      	strh	r3, [r7, #12]
 803d1ee:	89bb      	ldrh	r3, [r7, #12]
 803d1f0:	2b2f      	cmp	r3, #47	; 0x2f
 803d1f2:	d9ea      	bls.n	803d1ca <gos_taskGetNumber+0x22>
 803d1f4:	e000      	b.n	803d1f8 <gos_taskGetNumber+0x50>
            }
            else
            {
                // Last task found.
                break;
 803d1f6:	bf00      	nop
            }
        }

        taskGetNumResult = GOS_SUCCESS;
 803d1f8:	2355      	movs	r3, #85	; 0x55
 803d1fa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return taskGetNumResult;
 803d1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 803d1fe:	4618      	mov	r0, r3
 803d200:	3714      	adds	r7, #20
 803d202:	46bd      	mov	sp, r7
 803d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d208:	4770      	bx	lr
 803d20a:	bf00      	nop
 803d20c:	20001ca8 	.word	0x20001ca8

0803d210 <gos_taskSubscribeDeleteSignal>:

/*
 * Function: gos_taskSubscribeDeleteSignal
 */
gos_result_t gos_taskSubscribeDeleteSignal (gos_signalHandler_t deleteSignalHandler)
{
 803d210:	b580      	push	{r7, lr}
 803d212:	b084      	sub	sp, #16
 803d214:	af00      	add	r7, sp, #0
 803d216:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t subscriptionResult = GOS_ERROR;
 803d218:	23ae      	movs	r3, #174	; 0xae
 803d21a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (deleteSignalHandler != NULL)
 803d21c:	687b      	ldr	r3, [r7, #4]
 803d21e:	2b00      	cmp	r3, #0
 803d220:	d009      	beq.n	803d236 <gos_taskSubscribeDeleteSignal+0x26>
    {
        subscriptionResult = gos_signalSubscribe(
 803d222:	4b07      	ldr	r3, [pc, #28]	; (803d240 <gos_taskSubscribeDeleteSignal+0x30>)
 803d224:	781b      	ldrb	r3, [r3, #0]
 803d226:	f242 02ff 	movw	r2, #8447	; 0x20ff
 803d22a:	6879      	ldr	r1, [r7, #4]
 803d22c:	4618      	mov	r0, r3
 803d22e:	f002 fa4f 	bl	803f6d0 <gos_signalSubscribe>
 803d232:	4603      	mov	r3, r0
 803d234:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Delete signal handler does not exist.
    }

    return subscriptionResult;
 803d236:	7bfb      	ldrb	r3, [r7, #15]
}
 803d238:	4618      	mov	r0, r3
 803d23a:	3710      	adds	r7, #16
 803d23c:	46bd      	mov	sp, r7
 803d23e:	bd80      	pop	{r7, pc}
 803d240:	20007470 	.word	0x20007470

0803d244 <gos_taskCheckDescriptor>:
 *                              - Stack size is smaller than the minimum allowed
 *                              - Stack size is greater than the maximum allowed
 *                              - Stack size is not 4-byte aligned
 */
GOS_STATIC gos_result_t gos_taskCheckDescriptor (gos_taskDescriptor_t* taskDescriptor)
{
 803d244:	b480      	push	{r7}
 803d246:	b085      	sub	sp, #20
 803d248:	af00      	add	r7, sp, #0
 803d24a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskDescCheckResult = GOS_SUCCESS;
 803d24c:	2355      	movs	r3, #85	; 0x55
 803d24e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (taskDescriptor->taskFunction == NULL                    ||
 803d250:	687b      	ldr	r3, [r7, #4]
 803d252:	681b      	ldr	r3, [r3, #0]
 803d254:	2b00      	cmp	r3, #0
 803d256:	d020      	beq.n	803d29a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPrivilegeLevel == 0                 ||
 803d258:	687b      	ldr	r3, [r7, #4]
 803d25a:	891b      	ldrh	r3, [r3, #8]
 803d25c:	b29b      	uxth	r3, r3
 803d25e:	2b00      	cmp	r3, #0
 803d260:	d01b      	beq.n	803d29a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
        taskDescriptor->taskFunction == gos_idleTask      ||
 803d262:	687b      	ldr	r3, [r7, #4]
 803d264:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
 803d266:	4a11      	ldr	r2, [pc, #68]	; (803d2ac <gos_taskCheckDescriptor+0x68>)
 803d268:	4293      	cmp	r3, r2
 803d26a:	d016      	beq.n	803d29a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 803d26c:	687b      	ldr	r3, [r7, #4]
 803d26e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 803d272:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction == gos_idleTask      ||
 803d274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 803d278:	d80f      	bhi.n	803d29a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 803d27a:	687b      	ldr	r3, [r7, #4]
 803d27c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 803d280:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 803d282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803d286:	d308      	bcc.n	803d29a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize % 4 != 0u)
 803d288:	687b      	ldr	r3, [r7, #4]
 803d28a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 803d28e:	b29b      	uxth	r3, r3
 803d290:	f003 0303 	and.w	r3, r3, #3
 803d294:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 803d296:	2b00      	cmp	r3, #0
 803d298:	d001      	beq.n	803d29e <gos_taskCheckDescriptor+0x5a>
    {
        taskDescCheckResult = GOS_ERROR;
 803d29a:	23ae      	movs	r3, #174	; 0xae
 803d29c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task descriptor OK.
    }

    return taskDescCheckResult;
 803d29e:	7bfb      	ldrb	r3, [r7, #15]
}
 803d2a0:	4618      	mov	r0, r3
 803d2a2:	3714      	adds	r7, #20
 803d2a4:	46bd      	mov	sp, r7
 803d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d2aa:	4770      	bx	lr
 803d2ac:	0803d2b1 	.word	0x0803d2b1

0803d2b0 <gos_idleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
void_t gos_idleTask (void_t)
{
 803d2b0:	b580      	push	{r7, lr}
 803d2b2:	b082      	sub	sp, #8
 803d2b4:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 803d2b6:	2155      	movs	r1, #85	; 0x55
 803d2b8:	480c      	ldr	r0, [pc, #48]	; (803d2ec <gos_idleTask+0x3c>)
 803d2ba:	f000 fa03 	bl	803d6c4 <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 803d2be:	4b0c      	ldr	r3, [pc, #48]	; (803d2f0 <gos_idleTask+0x40>)
 803d2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803d2c2:	3301      	adds	r3, #1
 803d2c4:	4a0a      	ldr	r2, [pc, #40]	; (803d2f0 <gos_idleTask+0x40>)
 803d2c6:	6413      	str	r3, [r2, #64]	; 0x40

        if (kernelIdleHookFunction != NULL)
 803d2c8:	4b0a      	ldr	r3, [pc, #40]	; (803d2f4 <gos_idleTask+0x44>)
 803d2ca:	681b      	ldr	r3, [r3, #0]
 803d2cc:	2b00      	cmp	r3, #0
 803d2ce:	d002      	beq.n	803d2d6 <gos_idleTask+0x26>
        {
            kernelIdleHookFunction();
 803d2d0:	4b08      	ldr	r3, [pc, #32]	; (803d2f4 <gos_idleTask+0x44>)
 803d2d2:	681b      	ldr	r3, [r3, #0]
 803d2d4:	4798      	blx	r3
        else
        {
            // Idle hook does not exist.
        }

        gos_kernelCalculateTaskCpuUsages(GOS_FALSE);
 803d2d6:	2049      	movs	r0, #73	; 0x49
 803d2d8:	f7fd fa44 	bl	803a764 <gos_kernelCalculateTaskCpuUsages>
    gos_result_t taskYieldResult = GOS_SUCCESS;
 803d2dc:	2355      	movs	r3, #85	; 0x55
 803d2de:	71fb      	strb	r3, [r7, #7]
    gos_kernelReschedule(GOS_UNPRIVILEGED);
 803d2e0:	2009      	movs	r0, #9
 803d2e2:	f7fd ff6d 	bl	803b1c0 <gos_kernelReschedule>
    return taskYieldResult;
 803d2e6:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 803d2e8:	e7e9      	b.n	803d2be <gos_idleTask+0xe>
 803d2ea:	bf00      	nop
 803d2ec:	08048018 	.word	0x08048018
 803d2f0:	20001ca8 	.word	0x20001ca8
 803d2f4:	20007474 	.word	0x20007474

0803d2f8 <main>:

/*
 * Main
 */
int main (void_t)
{
 803d2f8:	b580      	push	{r7, lr}
 803d2fa:	b082      	sub	sp, #8
 803d2fc:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 803d2fe:	4b1c      	ldr	r3, [pc, #112]	; (803d370 <main+0x78>)
 803d300:	781b      	ldrb	r3, [r3, #0]
 803d302:	3301      	adds	r3, #1
 803d304:	b2da      	uxtb	r2, r3
 803d306:	4b1a      	ldr	r3, [pc, #104]	; (803d370 <main+0x78>)
 803d308:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 803d30a:	f7e3 fea1 	bl	8021050 <gos_platformDriverInit>
 803d30e:	4603      	mov	r3, r0
 803d310:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 803d312:	f000 f907 	bl	803d524 <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 803d316:	79fb      	ldrb	r3, [r7, #7]
 803d318:	4619      	mov	r1, r3
 803d31a:	4816      	ldr	r0, [pc, #88]	; (803d374 <main+0x7c>)
 803d31c:	f000 f9d2 	bl	803d6c4 <gos_errorTraceInit>

    // Initialize the kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 803d320:	f7fd f80c 	bl	803a33c <gos_kernelInit>
 803d324:	4603      	mov	r3, r0
 803d326:	4619      	mov	r1, r3
 803d328:	4813      	ldr	r0, [pc, #76]	; (803d378 <main+0x80>)
 803d32a:	f000 f9cb 	bl	803d6c4 <gos_errorTraceInit>
 803d32e:	4603      	mov	r3, r0
 803d330:	2b55      	cmp	r3, #85	; 0x55
 803d332:	d109      	bne.n	803d348 <main+0x50>
        gos_taskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 803d334:	4911      	ldr	r1, [pc, #68]	; (803d37c <main+0x84>)
 803d336:	4812      	ldr	r0, [pc, #72]	; (803d380 <main+0x88>)
 803d338:	f7fe f9f8 	bl	803b72c <gos_taskRegister>
 803d33c:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 803d33e:	2b55      	cmp	r3, #85	; 0x55
 803d340:	d102      	bne.n	803d348 <main+0x50>
    {
        initError = GOS_FALSE;
 803d342:	4b10      	ldr	r3, [pc, #64]	; (803d384 <main+0x8c>)
 803d344:	2249      	movs	r2, #73	; 0x49
 803d346:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 803d348:	f000 f85e 	bl	803d408 <gos_Start>
 803d34c:	4603      	mov	r3, r0
 803d34e:	2bae      	cmp	r3, #174	; 0xae
 803d350:	d106      	bne.n	803d360 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 803d352:	4b0d      	ldr	r3, [pc, #52]	; (803d388 <main+0x90>)
 803d354:	22c0      	movs	r2, #192	; 0xc0
 803d356:	490d      	ldr	r1, [pc, #52]	; (803d38c <main+0x94>)
 803d358:	2034      	movs	r0, #52	; 0x34
 803d35a:	f000 f91d 	bl	803d598 <gos_errorHandler>
 803d35e:	e005      	b.n	803d36c <main+0x74>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 803d360:	4b0b      	ldr	r3, [pc, #44]	; (803d390 <main+0x98>)
 803d362:	22c4      	movs	r2, #196	; 0xc4
 803d364:	4909      	ldr	r1, [pc, #36]	; (803d38c <main+0x94>)
 803d366:	2034      	movs	r0, #52	; 0x34
 803d368:	f000 f916 	bl	803d598 <gos_errorHandler>
    }

    for (;;);
 803d36c:	e7fe      	b.n	803d36c <main+0x74>
 803d36e:	bf00      	nop
 803d370:	20007445 	.word	0x20007445
 803d374:	08048028 	.word	0x08048028
 803d378:	08048048 	.word	0x08048048
 803d37c:	2000747a 	.word	0x2000747a
 803d380:	200031cc 	.word	0x200031cc
 803d384:	20007478 	.word	0x20007478
 803d388:	08048060 	.word	0x08048060
 803d38c:	0804a0ec 	.word	0x0804a0ec
 803d390:	08048080 	.word	0x08048080

0803d394 <gos_Dump>:

/*
 * Function: gos_Dump
 */
void_t gos_Dump (void_t)
{
 803d394:	b580      	push	{r7, lr}
 803d396:	b082      	sub	sp, #8
 803d398:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_taskPrivilegeLevel_t privileges    = 0u;
 803d39a:	2300      	movs	r3, #0
 803d39c:	80fb      	strh	r3, [r7, #6]
    gos_tid_t                currentTaskId = GOS_INVALID_TASK_ID;
 803d39e:	f44f 7380 	mov.w	r3, #256	; 0x100
 803d3a2:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    dumpRequired = GOS_TRUE;
 803d3a4:	4b16      	ldr	r3, [pc, #88]	; (803d400 <gos_Dump+0x6c>)
 803d3a6:	2236      	movs	r2, #54	; 0x36
 803d3a8:	701a      	strb	r2, [r3, #0]

    (void_t) gos_taskGetCurrentId(&currentTaskId);
 803d3aa:	1d3b      	adds	r3, r7, #4
 803d3ac:	4618      	mov	r0, r3
 803d3ae:	f7ff fdbf 	bl	803cf30 <gos_taskGetCurrentId>
    (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 803d3b2:	88bb      	ldrh	r3, [r7, #4]
 803d3b4:	1dba      	adds	r2, r7, #6
 803d3b6:	4611      	mov	r1, r2
 803d3b8:	4618      	mov	r0, r3
 803d3ba:	f7ff fce1 	bl	803cd80 <gos_taskGetPrivileges>

    if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 803d3be:	88fb      	ldrh	r3, [r7, #6]
 803d3c0:	b21b      	sxth	r3, r3
 803d3c2:	2b00      	cmp	r3, #0
 803d3c4:	db11      	blt.n	803d3ea <gos_Dump+0x56>
    {
        (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 803d3c6:	88bb      	ldrh	r3, [r7, #4]
 803d3c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 803d3cc:	4618      	mov	r0, r3
 803d3ce:	f7ff fb73 	bl	803cab8 <gos_taskAddPrivilege>
        gos_taskWakeup(systemTaskId);
 803d3d2:	4b0c      	ldr	r3, [pc, #48]	; (803d404 <gos_Dump+0x70>)
 803d3d4:	881b      	ldrh	r3, [r3, #0]
 803d3d6:	4618      	mov	r0, r3
 803d3d8:	f7fe fbc0 	bl	803bb5c <gos_taskWakeup>
        (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 803d3dc:	88bb      	ldrh	r3, [r7, #4]
 803d3de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 803d3e2:	4618      	mov	r0, r3
 803d3e4:	f7ff fbe0 	bl	803cba8 <gos_taskRemovePrivilege>
 803d3e8:	e004      	b.n	803d3f4 <gos_Dump+0x60>
    }
    else
    {
        gos_taskWakeup(systemTaskId);
 803d3ea:	4b06      	ldr	r3, [pc, #24]	; (803d404 <gos_Dump+0x70>)
 803d3ec:	881b      	ldrh	r3, [r3, #0]
 803d3ee:	4618      	mov	r0, r3
 803d3f0:	f7fe fbb4 	bl	803bb5c <gos_taskWakeup>
    }

    (void_t) gos_shellSuspend();
 803d3f4:	f001 fd30 	bl	803ee58 <gos_shellSuspend>
}
 803d3f8:	bf00      	nop
 803d3fa:	3708      	adds	r7, #8
 803d3fc:	46bd      	mov	sp, r7
 803d3fe:	bd80      	pop	{r7, pc}
 803d400:	20007479 	.word	0x20007479
 803d404:	2000747a 	.word	0x2000747a

0803d408 <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 803d408:	b580      	push	{r7, lr}
 803d40a:	b082      	sub	sp, #8
 803d40c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 803d40e:	23b1      	movs	r3, #177	; 0xb1
 803d410:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 803d412:	4b06      	ldr	r3, [pc, #24]	; (803d42c <gos_Start+0x24>)
 803d414:	781b      	ldrb	r3, [r3, #0]
 803d416:	2b49      	cmp	r3, #73	; 0x49
 803d418:	d103      	bne.n	803d422 <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 803d41a:	f7fd f87b 	bl	803a514 <gos_kernelStart>
 803d41e:	4603      	mov	r3, r0
 803d420:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 803d422:	79fb      	ldrb	r3, [r7, #7]
}
 803d424:	4618      	mov	r0, r3
 803d426:	3708      	adds	r7, #8
 803d428:	46bd      	mov	sp, r7
 803d42a:	bd80      	pop	{r7, pc}
 803d42c:	20007478 	.word	0x20007478

0803d430 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 803d430:	b590      	push	{r4, r7, lr}
 803d432:	b083      	sub	sp, #12
 803d434:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 803d436:	2355      	movs	r3, #85	; 0x55
 803d438:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 803d43a:	2300      	movs	r3, #0
 803d43c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 803d43e:	4b33      	ldr	r3, [pc, #204]	; (803d50c <gos_systemTask+0xdc>)
 803d440:	781b      	ldrb	r3, [r3, #0]
 803d442:	3301      	adds	r3, #1
 803d444:	b2da      	uxtb	r2, r3
 803d446:	4b31      	ldr	r3, [pc, #196]	; (803d50c <gos_systemTask+0xdc>)
 803d448:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 803d44a:	2300      	movs	r3, #0
 803d44c:	71bb      	strb	r3, [r7, #6]
 803d44e:	e01d      	b.n	803d48c <gos_systemTask+0x5c>
    {
        sysInitResult &= gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc());
 803d450:	79ba      	ldrb	r2, [r7, #6]
 803d452:	4613      	mov	r3, r2
 803d454:	00db      	lsls	r3, r3, #3
 803d456:	4413      	add	r3, r2
 803d458:	009b      	lsls	r3, r3, #2
 803d45a:	4a2d      	ldr	r2, [pc, #180]	; (803d510 <gos_systemTask+0xe0>)
 803d45c:	189c      	adds	r4, r3, r2
 803d45e:	79ba      	ldrb	r2, [r7, #6]
 803d460:	492b      	ldr	r1, [pc, #172]	; (803d510 <gos_systemTask+0xe0>)
 803d462:	4613      	mov	r3, r2
 803d464:	00db      	lsls	r3, r3, #3
 803d466:	4413      	add	r3, r2
 803d468:	009b      	lsls	r3, r3, #2
 803d46a:	440b      	add	r3, r1
 803d46c:	3320      	adds	r3, #32
 803d46e:	681b      	ldr	r3, [r3, #0]
 803d470:	4798      	blx	r3
 803d472:	4603      	mov	r3, r0
 803d474:	4619      	mov	r1, r3
 803d476:	4620      	mov	r0, r4
 803d478:	f000 f924 	bl	803d6c4 <gos_errorTraceInit>
 803d47c:	4603      	mov	r3, r0
 803d47e:	461a      	mov	r2, r3
 803d480:	79fb      	ldrb	r3, [r7, #7]
 803d482:	4013      	ands	r3, r2
 803d484:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 803d486:	79bb      	ldrb	r3, [r7, #6]
 803d488:	3301      	adds	r3, #1
 803d48a:	71bb      	strb	r3, [r7, #6]
 803d48c:	79bb      	ldrb	r3, [r7, #6]
 803d48e:	2b08      	cmp	r3, #8
 803d490:	d9de      	bls.n	803d450 <gos_systemTask+0x20>
    }

    // Check and correct flag value.
    if (sysInitResult != GOS_SUCCESS)
 803d492:	79fb      	ldrb	r3, [r7, #7]
 803d494:	2b55      	cmp	r3, #85	; 0x55
 803d496:	d001      	beq.n	803d49c <gos_systemTask+0x6c>
    {
        sysInitResult = GOS_ERROR;
 803d498:	23ae      	movs	r3, #174	; 0xae
 803d49a:	71fb      	strb	r3, [r7, #7]
    {
        // Nothing to do.
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 803d49c:	79fb      	ldrb	r3, [r7, #7]
 803d49e:	4619      	mov	r1, r3
 803d4a0:	481c      	ldr	r0, [pc, #112]	; (803d514 <gos_systemTask+0xe4>)
 803d4a2:	f000 f90f 	bl	803d6c4 <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 803d4a6:	4b19      	ldr	r3, [pc, #100]	; (803d50c <gos_systemTask+0xdc>)
 803d4a8:	781b      	ldrb	r3, [r3, #0]
 803d4aa:	2b00      	cmp	r3, #0
 803d4ac:	d005      	beq.n	803d4ba <gos_systemTask+0x8a>
 803d4ae:	4b17      	ldr	r3, [pc, #92]	; (803d50c <gos_systemTask+0xdc>)
 803d4b0:	781b      	ldrb	r3, [r3, #0]
 803d4b2:	3b01      	subs	r3, #1
 803d4b4:	b2da      	uxtb	r2, r3
 803d4b6:	4b15      	ldr	r3, [pc, #84]	; (803d50c <gos_systemTask+0xdc>)
 803d4b8:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_taskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 803d4ba:	4b17      	ldr	r3, [pc, #92]	; (803d518 <gos_systemTask+0xe8>)
 803d4bc:	881b      	ldrh	r3, [r3, #0]
 803d4be:	21c3      	movs	r1, #195	; 0xc3
 803d4c0:	4618      	mov	r0, r3
 803d4c2:	f7ff f9c5 	bl	803c850 <gos_taskSetOriginalPriority>
    (void_t) gos_taskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 803d4c6:	4b14      	ldr	r3, [pc, #80]	; (803d518 <gos_systemTask+0xe8>)
 803d4c8:	881b      	ldrh	r3, [r3, #0]
 803d4ca:	21c3      	movs	r1, #195	; 0xc3
 803d4cc:	4618      	mov	r0, r3
 803d4ce:	f7ff f8fb 	bl	803c6c8 <gos_taskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 803d4d2:	2036      	movs	r0, #54	; 0x36
 803d4d4:	f7fd f946 	bl	803a764 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 803d4d8:	4b10      	ldr	r3, [pc, #64]	; (803d51c <gos_systemTask+0xec>)
 803d4da:	781b      	ldrb	r3, [r3, #0]
 803d4dc:	2b36      	cmp	r3, #54	; 0x36
 803d4de:	d111      	bne.n	803d504 <gos_systemTask+0xd4>
        {
            (void_t) gos_taskSleep(100);
 803d4e0:	2064      	movs	r0, #100	; 0x64
 803d4e2:	f7fe fab5 	bl	803ba50 <gos_taskSleep>
            gos_kernelDump();
 803d4e6:	f7fd faa3 	bl	803aa30 <gos_kernelDump>
            gos_queueDump();
 803d4ea:	f001 fb89 	bl	803ec00 <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 803d4ee:	4b0c      	ldr	r3, [pc, #48]	; (803d520 <gos_systemTask+0xf0>)
 803d4f0:	781b      	ldrb	r3, [r3, #0]
 803d4f2:	2100      	movs	r1, #0
 803d4f4:	4618      	mov	r0, r3
 803d4f6:	f002 f943 	bl	803f780 <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 803d4fa:	4b08      	ldr	r3, [pc, #32]	; (803d51c <gos_systemTask+0xec>)
 803d4fc:	2249      	movs	r2, #73	; 0x49
 803d4fe:	701a      	strb	r2, [r3, #0]
            (void_t) gos_shellResume();
 803d500:	f001 fcbe 	bl	803ee80 <gos_shellResume>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_SYS_TASK_SLEEP_TIME);
 803d504:	2064      	movs	r0, #100	; 0x64
 803d506:	f7fe faa3 	bl	803ba50 <gos_taskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 803d50a:	e7e2      	b.n	803d4d2 <gos_systemTask+0xa2>
 803d50c:	20007445 	.word	0x20007445
 803d510:	20003088 	.word	0x20003088
 803d514:	080480fc 	.word	0x080480fc
 803d518:	2000747a 	.word	0x2000747a
 803d51c:	20007479 	.word	0x20007479
 803d520:	20007444 	.word	0x20007444

0803d524 <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
__attribute__((weak)) void_t gos_printStartupLogo (void_t)
{
 803d524:	b580      	push	{r7, lr}
 803d526:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 803d528:	4811      	ldr	r0, [pc, #68]	; (803d570 <gos_printStartupLogo+0x4c>)
 803d52a:	f003 fc7d 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 803d52e:	4811      	ldr	r0, [pc, #68]	; (803d574 <gos_printStartupLogo+0x50>)
 803d530:	f003 fc7a 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 803d534:	4810      	ldr	r0, [pc, #64]	; (803d578 <gos_printStartupLogo+0x54>)
 803d536:	f003 fc77 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 803d53a:	4810      	ldr	r0, [pc, #64]	; (803d57c <gos_printStartupLogo+0x58>)
 803d53c:	f003 fc74 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 803d540:	480f      	ldr	r0, [pc, #60]	; (803d580 <gos_printStartupLogo+0x5c>)
 803d542:	f003 fc71 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 803d546:	480f      	ldr	r0, [pc, #60]	; (803d584 <gos_printStartupLogo+0x60>)
 803d548:	f003 fc6e 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 803d54c:	480e      	ldr	r0, [pc, #56]	; (803d588 <gos_printStartupLogo+0x64>)
 803d54e:	f003 fc6b 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 803d552:	4809      	ldr	r0, [pc, #36]	; (803d578 <gos_printStartupLogo+0x54>)
 803d554:	f003 fc68 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 803d558:	480c      	ldr	r0, [pc, #48]	; (803d58c <gos_printStartupLogo+0x68>)
 803d55a:	f003 fc65 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                        (c) Ahmed Gazar, 2022-2024                        \r\n\r\n");
 803d55e:	480c      	ldr	r0, [pc, #48]	; (803d590 <gos_printStartupLogo+0x6c>)
 803d560:	f003 fc62 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 803d564:	480b      	ldr	r0, [pc, #44]	; (803d594 <gos_printStartupLogo+0x70>)
 803d566:	f003 fc5f 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
}
 803d56a:	bf00      	nop
 803d56c:	bd80      	pop	{r7, pc}
 803d56e:	bf00      	nop
 803d570:	08048114 	.word	0x08048114
 803d574:	08048164 	.word	0x08048164
 803d578:	080481b4 	.word	0x080481b4
 803d57c:	08048204 	.word	0x08048204
 803d580:	08048254 	.word	0x08048254
 803d584:	080482a4 	.word	0x080482a4
 803d588:	080482f4 	.word	0x080482f4
 803d58c:	08048344 	.word	0x08048344
 803d590:	08048394 	.word	0x08048394
 803d594:	080483e4 	.word	0x080483e4

0803d598 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 803d598:	b408      	push	{r3}
 803d59a:	b580      	push	{r7, lr}
 803d59c:	b087      	sub	sp, #28
 803d59e:	af00      	add	r7, sp, #0
 803d5a0:	4603      	mov	r3, r0
 803d5a2:	60b9      	str	r1, [r7, #8]
 803d5a4:	607a      	str	r2, [r7, #4]
 803d5a6:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 803d5a8:	4839      	ldr	r0, [pc, #228]	; (803d690 <gos_errorHandler+0xf8>)
 803d5aa:	f003 fc3d 	bl	8040e28 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 803d5ae:	7bfb      	ldrb	r3, [r7, #15]
 803d5b0:	2b34      	cmp	r3, #52	; 0x34
 803d5b2:	d103      	bne.n	803d5bc <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 803d5b4:	4837      	ldr	r0, [pc, #220]	; (803d694 <gos_errorHandler+0xfc>)
 803d5b6:	f003 fc37 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
 803d5ba:	e013      	b.n	803d5e4 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 803d5bc:	7bfb      	ldrb	r3, [r7, #15]
 803d5be:	2b2e      	cmp	r3, #46	; 0x2e
 803d5c0:	d103      	bne.n	803d5ca <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 803d5c2:	4835      	ldr	r0, [pc, #212]	; (803d698 <gos_errorHandler+0x100>)
 803d5c4:	f003 fc30 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
 803d5c8:	e00c      	b.n	803d5e4 <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 803d5ca:	7bfb      	ldrb	r3, [r7, #15]
 803d5cc:	2b1a      	cmp	r3, #26
 803d5ce:	d103      	bne.n	803d5d8 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 803d5d0:	4832      	ldr	r0, [pc, #200]	; (803d69c <gos_errorHandler+0x104>)
 803d5d2:	f003 fc29 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
 803d5d6:	e005      	b.n	803d5e4 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 803d5d8:	7bfb      	ldrb	r3, [r7, #15]
 803d5da:	2b3a      	cmp	r3, #58	; 0x3a
 803d5dc:	d102      	bne.n	803d5e4 <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 803d5de:	4830      	ldr	r0, [pc, #192]	; (803d6a0 <gos_errorHandler+0x108>)
 803d5e0:	f003 fc22 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 803d5e4:	68bb      	ldr	r3, [r7, #8]
 803d5e6:	2b00      	cmp	r3, #0
 803d5e8:	d005      	beq.n	803d5f6 <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 803d5ea:	687a      	ldr	r2, [r7, #4]
 803d5ec:	68b9      	ldr	r1, [r7, #8]
 803d5ee:	482d      	ldr	r0, [pc, #180]	; (803d6a4 <gos_errorHandler+0x10c>)
 803d5f0:	f003 fc1a 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
 803d5f4:	e006      	b.n	803d604 <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 803d5f6:	687b      	ldr	r3, [r7, #4]
 803d5f8:	2b00      	cmp	r3, #0
 803d5fa:	d003      	beq.n	803d604 <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 803d5fc:	6879      	ldr	r1, [r7, #4]
 803d5fe:	482a      	ldr	r0, [pc, #168]	; (803d6a8 <gos_errorHandler+0x110>)
 803d600:	f003 fc12 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 803d604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803d606:	2b00      	cmp	r3, #0
 803d608:	d00b      	beq.n	803d622 <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 803d60a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803d60e:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 803d610:	697a      	ldr	r2, [r7, #20]
 803d612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803d614:	4825      	ldr	r0, [pc, #148]	; (803d6ac <gos_errorHandler+0x114>)
 803d616:	f005 faed 	bl	8042bf4 <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 803d61a:	4924      	ldr	r1, [pc, #144]	; (803d6ac <gos_errorHandler+0x114>)
 803d61c:	4824      	ldr	r0, [pc, #144]	; (803d6b0 <gos_errorHandler+0x118>)
 803d61e:	f003 fc03 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 803d622:	4824      	ldr	r0, [pc, #144]	; (803d6b4 <gos_errorHandler+0x11c>)
 803d624:	f003 fc00 	bl	8040e28 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 803d628:	7bfb      	ldrb	r3, [r7, #15]
 803d62a:	2b34      	cmp	r3, #52	; 0x34
 803d62c:	d002      	beq.n	803d634 <gos_errorHandler+0x9c>
 803d62e:	7bfb      	ldrb	r3, [r7, #15]
 803d630:	2b1a      	cmp	r3, #26
 803d632:	d126      	bne.n	803d682 <gos_errorHandler+0xea>
    {
        GOS_DISABLE_SCHED
 803d634:	4b20      	ldr	r3, [pc, #128]	; (803d6b8 <gos_errorHandler+0x120>)
 803d636:	781b      	ldrb	r3, [r3, #0]
 803d638:	3301      	adds	r3, #1
 803d63a:	b2da      	uxtb	r2, r3
 803d63c:	4b1e      	ldr	r3, [pc, #120]	; (803d6b8 <gos_errorHandler+0x120>)
 803d63e:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 803d640:	4b1e      	ldr	r3, [pc, #120]	; (803d6bc <gos_errorHandler+0x124>)
 803d642:	781b      	ldrb	r3, [r3, #0]
 803d644:	2b00      	cmp	r3, #0
 803d646:	d108      	bne.n	803d65a <gos_errorHandler+0xc2>
 803d648:	b672      	cpsid	i
 803d64a:	f3ef 8310 	mrs	r3, PRIMASK
 803d64e:	4a1c      	ldr	r2, [pc, #112]	; (803d6c0 <gos_errorHandler+0x128>)
 803d650:	6013      	str	r3, [r2, #0]
 803d652:	f3bf 8f4f 	dsb	sy
 803d656:	f3bf 8f6f 	isb	sy
 803d65a:	4b18      	ldr	r3, [pc, #96]	; (803d6bc <gos_errorHandler+0x124>)
 803d65c:	781b      	ldrb	r3, [r3, #0]
 803d65e:	3301      	adds	r3, #1
 803d660:	b2da      	uxtb	r2, r3
 803d662:	4b16      	ldr	r3, [pc, #88]	; (803d6bc <gos_errorHandler+0x124>)
 803d664:	701a      	strb	r2, [r3, #0]
 803d666:	4b14      	ldr	r3, [pc, #80]	; (803d6b8 <gos_errorHandler+0x120>)
 803d668:	781b      	ldrb	r3, [r3, #0]
 803d66a:	3301      	adds	r3, #1
 803d66c:	b2da      	uxtb	r2, r3
 803d66e:	4b12      	ldr	r3, [pc, #72]	; (803d6b8 <gos_errorHandler+0x120>)
 803d670:	701a      	strb	r2, [r3, #0]
        for (;;)
        {
            GOS_NOP;
 803d672:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 803d674:	f640 30b8 	movw	r0, #3000	; 0xbb8
 803d678:	f7fd f858 	bl	803a72c <gos_kernelDelayMs>
            gos_kernelReset();
 803d67c:	f7fd f818 	bl	803a6b0 <gos_kernelReset>
            GOS_NOP;
 803d680:	e7f7      	b.n	803d672 <gos_errorHandler+0xda>
    }
    else
    {
        // Nothing to do.
    }
}
 803d682:	bf00      	nop
 803d684:	371c      	adds	r7, #28
 803d686:	46bd      	mov	sp, r7
 803d688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 803d68c:	b001      	add	sp, #4
 803d68e:	4770      	bx	lr
 803d690:	08048434 	.word	0x08048434
 803d694:	08048488 	.word	0x08048488
 803d698:	080484b4 	.word	0x080484b4
 803d69c:	080484d4 	.word	0x080484d4
 803d6a0:	08048504 	.word	0x08048504
 803d6a4:	08048524 	.word	0x08048524
 803d6a8:	08048548 	.word	0x08048548
 803d6ac:	2000747c 	.word	0x2000747c
 803d6b0:	08048574 	.word	0x08048574
 803d6b4:	0804857c 	.word	0x0804857c
 803d6b8:	20007445 	.word	0x20007445
 803d6bc:	20007447 	.word	0x20007447
 803d6c0:	20007448 	.word	0x20007448

0803d6c4 <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 803d6c4:	b590      	push	{r4, r7, lr}
 803d6c6:	b083      	sub	sp, #12
 803d6c8:	af00      	add	r7, sp, #0
 803d6ca:	6078      	str	r0, [r7, #4]
 803d6cc:	460b      	mov	r3, r1
 803d6ce:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */

    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 803d6d0:	f7fc ffd0 	bl	803a674 <gos_kernelGetSysTicks>
 803d6d4:	4604      	mov	r4, r0
 803d6d6:	1cfb      	adds	r3, r7, #3
 803d6d8:	4618      	mov	r0, r3
 803d6da:	f000 f80d 	bl	803d6f8 <gos_traceResultToString>
 803d6de:	4603      	mov	r3, r0
 803d6e0:	687a      	ldr	r2, [r7, #4]
 803d6e2:	4621      	mov	r1, r4
 803d6e4:	4803      	ldr	r0, [pc, #12]	; (803d6f4 <gos_errorTraceInit+0x30>)
 803d6e6:	f003 fb9f 	bl	8040e28 <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 803d6ea:	78fb      	ldrb	r3, [r7, #3]
}
 803d6ec:	4618      	mov	r0, r3
 803d6ee:	370c      	adds	r7, #12
 803d6f0:	46bd      	mov	sp, r7
 803d6f2:	bd90      	pop	{r4, r7, pc}
 803d6f4:	080485cc 	.word	0x080485cc

0803d6f8 <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 803d6f8:	b480      	push	{r7}
 803d6fa:	b083      	sub	sp, #12
 803d6fc:	af00      	add	r7, sp, #0
 803d6fe:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 803d700:	687b      	ldr	r3, [r7, #4]
 803d702:	781b      	ldrb	r3, [r3, #0]
 803d704:	2b55      	cmp	r3, #85	; 0x55
 803d706:	d002      	beq.n	803d70e <gos_traceResultToString+0x16>
 803d708:	2bae      	cmp	r3, #174	; 0xae
 803d70a:	d002      	beq.n	803d712 <gos_traceResultToString+0x1a>
 803d70c:	e003      	b.n	803d716 <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 803d70e:	4b05      	ldr	r3, [pc, #20]	; (803d724 <gos_traceResultToString+0x2c>)
 803d710:	e002      	b.n	803d718 <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 803d712:	4b05      	ldr	r3, [pc, #20]	; (803d728 <gos_traceResultToString+0x30>)
 803d714:	e000      	b.n	803d718 <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 803d716:	4b05      	ldr	r3, [pc, #20]	; (803d72c <gos_traceResultToString+0x34>)
        }
    }
}
 803d718:	4618      	mov	r0, r3
 803d71a:	370c      	adds	r7, #12
 803d71c:	46bd      	mov	sp, r7
 803d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d722:	4770      	bx	lr
 803d724:	080485e8 	.word	0x080485e8
 803d728:	080485fc 	.word	0x080485fc
 803d72c:	08048610 	.word	0x08048610

0803d730 <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 803d730:	b580      	push	{r7, lr}
 803d732:	b082      	sub	sp, #8
 803d734:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 803d736:	2355      	movs	r3, #85	; 0x55
 803d738:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 803d73a:	2300      	movs	r3, #0
 803d73c:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 803d73e:	2300      	movs	r3, #0
 803d740:	80bb      	strh	r3, [r7, #4]
 803d742:	e01a      	b.n	803d77a <gos_gcpInit+0x4a>
    {
        gcpInitResult &= gos_mutexInit(&gcpRxMutexes[mutexIdx]);
 803d744:	88bb      	ldrh	r3, [r7, #4]
 803d746:	009b      	lsls	r3, r3, #2
 803d748:	4a12      	ldr	r2, [pc, #72]	; (803d794 <gos_gcpInit+0x64>)
 803d74a:	4413      	add	r3, r2
 803d74c:	4618      	mov	r0, r3
 803d74e:	f000 fdd9 	bl	803e304 <gos_mutexInit>
 803d752:	4603      	mov	r3, r0
 803d754:	461a      	mov	r2, r3
 803d756:	79fb      	ldrb	r3, [r7, #7]
 803d758:	4013      	ands	r3, r2
 803d75a:	71fb      	strb	r3, [r7, #7]
        gcpInitResult &= gos_mutexInit(&gcpTxMutexes[mutexIdx]);
 803d75c:	88bb      	ldrh	r3, [r7, #4]
 803d75e:	009b      	lsls	r3, r3, #2
 803d760:	4a0d      	ldr	r2, [pc, #52]	; (803d798 <gos_gcpInit+0x68>)
 803d762:	4413      	add	r3, r2
 803d764:	4618      	mov	r0, r3
 803d766:	f000 fdcd 	bl	803e304 <gos_mutexInit>
 803d76a:	4603      	mov	r3, r0
 803d76c:	461a      	mov	r2, r3
 803d76e:	79fb      	ldrb	r3, [r7, #7]
 803d770:	4013      	ands	r3, r2
 803d772:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 803d774:	88bb      	ldrh	r3, [r7, #4]
 803d776:	3301      	adds	r3, #1
 803d778:	80bb      	strh	r3, [r7, #4]
 803d77a:	88bb      	ldrh	r3, [r7, #4]
 803d77c:	2b03      	cmp	r3, #3
 803d77e:	d9e1      	bls.n	803d744 <gos_gcpInit+0x14>
    }

    if (gcpInitResult != GOS_SUCCESS)
 803d780:	79fb      	ldrb	r3, [r7, #7]
 803d782:	2b55      	cmp	r3, #85	; 0x55
 803d784:	d001      	beq.n	803d78a <gos_gcpInit+0x5a>
    {
        gcpInitResult = GOS_ERROR;
 803d786:	23ae      	movs	r3, #174	; 0xae
 803d788:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return gcpInitResult;
 803d78a:	79fb      	ldrb	r3, [r7, #7]
}
 803d78c:	4618      	mov	r0, r3
 803d78e:	3708      	adds	r7, #8
 803d790:	46bd      	mov	sp, r7
 803d792:	bd80      	pop	{r7, pc}
 803d794:	200074ec 	.word	0x200074ec
 803d798:	200074fc 	.word	0x200074fc

0803d79c <gos_gcpRegisterPhysicalDriver>:
gos_result_t gos_gcpRegisterPhysicalDriver (
        gos_gcpChannelNumber_t    channelNumber,
        gos_gcpTransmitFunction_t transmitFunction,
        gos_gcpReceiveFunction_t  receiveFunction
        )
{
 803d79c:	b480      	push	{r7}
 803d79e:	b087      	sub	sp, #28
 803d7a0:	af00      	add	r7, sp, #0
 803d7a2:	4603      	mov	r3, r0
 803d7a4:	60b9      	str	r1, [r7, #8]
 803d7a6:	607a      	str	r2, [r7, #4]
 803d7a8:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t registerPhysicalDriverResult = GOS_ERROR;
 803d7aa:	23ae      	movs	r3, #174	; 0xae
 803d7ac:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (channelNumber < CFG_GCP_CHANNELS_MAX_NUMBER && transmitFunction != NULL && receiveFunction != NULL)
 803d7ae:	7bfb      	ldrb	r3, [r7, #15]
 803d7b0:	2b03      	cmp	r3, #3
 803d7b2:	d812      	bhi.n	803d7da <gos_gcpRegisterPhysicalDriver+0x3e>
 803d7b4:	68bb      	ldr	r3, [r7, #8]
 803d7b6:	2b00      	cmp	r3, #0
 803d7b8:	d00f      	beq.n	803d7da <gos_gcpRegisterPhysicalDriver+0x3e>
 803d7ba:	687b      	ldr	r3, [r7, #4]
 803d7bc:	2b00      	cmp	r3, #0
 803d7be:	d00c      	beq.n	803d7da <gos_gcpRegisterPhysicalDriver+0x3e>
    {
        channelFunctions[channelNumber].gcpReceiveFunction  = receiveFunction;
 803d7c0:	7bfb      	ldrb	r3, [r7, #15]
 803d7c2:	4a09      	ldr	r2, [pc, #36]	; (803d7e8 <gos_gcpRegisterPhysicalDriver+0x4c>)
 803d7c4:	00db      	lsls	r3, r3, #3
 803d7c6:	4413      	add	r3, r2
 803d7c8:	687a      	ldr	r2, [r7, #4]
 803d7ca:	605a      	str	r2, [r3, #4]
        channelFunctions[channelNumber].gcpTransmitFunction = transmitFunction;
 803d7cc:	7bfb      	ldrb	r3, [r7, #15]
 803d7ce:	4906      	ldr	r1, [pc, #24]	; (803d7e8 <gos_gcpRegisterPhysicalDriver+0x4c>)
 803d7d0:	68ba      	ldr	r2, [r7, #8]
 803d7d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        registerPhysicalDriverResult                        = GOS_SUCCESS;
 803d7d6:	2355      	movs	r3, #85	; 0x55
 803d7d8:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Nothing to do.
    }

    return registerPhysicalDriverResult;
 803d7da:	7dfb      	ldrb	r3, [r7, #23]
}
 803d7dc:	4618      	mov	r0, r3
 803d7de:	371c      	adds	r7, #28
 803d7e0:	46bd      	mov	sp, r7
 803d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d7e6:	4770      	bx	lr
 803d7e8:	200074cc 	.word	0x200074cc

0803d7ec <gos_gcpTransmitMessage>:
        u16_t                   messageId,
        void_t*                 pMessagePayload,
        u16_t                   payloadSize,
		u16_t                   maxChunkSize
        )
{
 803d7ec:	b580      	push	{r7, lr}
 803d7ee:	b092      	sub	sp, #72	; 0x48
 803d7f0:	af00      	add	r7, sp, #0
 803d7f2:	60ba      	str	r2, [r7, #8]
 803d7f4:	461a      	mov	r2, r3
 803d7f6:	4603      	mov	r3, r0
 803d7f8:	73fb      	strb	r3, [r7, #15]
 803d7fa:	460b      	mov	r3, r1
 803d7fc:	81bb      	strh	r3, [r7, #12]
 803d7fe:	4613      	mov	r3, r2
 803d800:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t transmitMessageResult = GOS_ERROR;
 803d802:	23ae      	movs	r3, #174	; 0xae
 803d804:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /*
     * Function code.
     */
    if (gos_mutexLock(&gcpTxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 803d808:	7bfb      	ldrb	r3, [r7, #15]
 803d80a:	009b      	lsls	r3, r3, #2
 803d80c:	4a8e      	ldr	r2, [pc, #568]	; (803da48 <gos_gcpTransmitMessage+0x25c>)
 803d80e:	4413      	add	r3, r2
 803d810:	f04f 31ff 	mov.w	r1, #4294967295
 803d814:	4618      	mov	r0, r3
 803d816:	f000 fd8f 	bl	803e338 <gos_mutexLock>
 803d81a:	4603      	mov	r3, r0
 803d81c:	2b55      	cmp	r3, #85	; 0x55
 803d81e:	f040 8105 	bne.w	803da2c <gos_gcpTransmitMessage+0x240>
 803d822:	7bfb      	ldrb	r3, [r7, #15]
 803d824:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 803d828:	89bb      	ldrh	r3, [r7, #12]
 803d82a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 803d82e:	68bb      	ldr	r3, [r7, #8]
 803d830:	643b      	str	r3, [r7, #64]	; 0x40
 803d832:	88fb      	ldrh	r3, [r7, #6]
 803d834:	87fb      	strh	r3, [r7, #62]	; 0x3e
 803d836:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 803d83a:	87bb      	strh	r3, [r7, #60]	; 0x3c
)
{
    /*
     * Local variables.
     */
    gos_result_t         transmitMessageResult = GOS_ERROR;
 803d83c:	23ae      	movs	r3, #174	; 0xae
 803d83e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 803d842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803d846:	2200      	movs	r2, #0
 803d848:	601a      	str	r2, [r3, #0]
 803d84a:	605a      	str	r2, [r3, #4]
 803d84c:	609a      	str	r2, [r3, #8]
 803d84e:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 803d850:	f107 0314 	add.w	r3, r7, #20
 803d854:	2200      	movs	r2, #0
 803d856:	601a      	str	r2, [r3, #0]
 803d858:	605a      	str	r2, [r3, #4]
 803d85a:	609a      	str	r2, [r3, #8]
 803d85c:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 803d85e:	2300      	movs	r3, #0
 803d860:	74fb      	strb	r3, [r7, #19]
    u8_t                 dataChunks            = 0u;
 803d862:	2300      	movs	r3, #0
 803d864:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    u8_t                 chunkIndex            = 0u;
 803d868:	2300      	movs	r3, #0
 803d86a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    u16_t                tempSize              = 0u;
 803d86e:	2300      	movs	r3, #0
 803d870:	86fb      	strh	r3, [r7, #54]	; 0x36

    /*
     * Function code.
     */
    if ((pMessagePayload                              != NULL                        ||
 803d872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803d874:	2b00      	cmp	r3, #0
 803d876:	d107      	bne.n	803d888 <gos_gcpTransmitMessage+0x9c>
 803d878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803d87a:	2b00      	cmp	r3, #0
 803d87c:	f040 80d2 	bne.w	803da24 <gos_gcpTransmitMessage+0x238>
        (pMessagePayload                              == NULL                        &&
 803d880:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803d882:	2b00      	cmp	r3, #0
 803d884:	f040 80ce 	bne.w	803da24 <gos_gcpTransmitMessage+0x238>
        payloadSize                                   == 0u))                        &&
 803d888:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 803d88c:	2b03      	cmp	r3, #3
 803d88e:	f200 80c9 	bhi.w	803da24 <gos_gcpTransmitMessage+0x238>
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpTransmitFunction != NULL)
 803d892:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 803d896:	4a6d      	ldr	r2, [pc, #436]	; (803da4c <gos_gcpTransmitMessage+0x260>)
 803d898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 803d89c:	2b00      	cmp	r3, #0
 803d89e:	f000 80c1 	beq.w	803da24 <gos_gcpTransmitMessage+0x238>
    {
        // Fill out header frame.
        requestHeaderFrame.ackType       = GCP_ACK_REQ;
 803d8a2:	2300      	movs	r3, #0
 803d8a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        requestHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 803d8a8:	2302      	movs	r3, #2
 803d8aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        requestHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 803d8ae:	2300      	movs	r3, #0
 803d8b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        requestHeaderFrame.dataSize      = payloadSize;
 803d8b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803d8b6:	857b      	strh	r3, [r7, #42]	; 0x2a
        requestHeaderFrame.messageId     = messageId;
 803d8b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 803d8bc:	853b      	strh	r3, [r7, #40]	; 0x28
        requestHeaderFrame.dataCrc       = gos_crcDriverGetCrc((u8_t*)pMessagePayload, payloadSize);
 803d8be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 803d8c0:	4619      	mov	r1, r3
 803d8c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 803d8c4:	f003 fcba 	bl	804123c <gos_crcDriverGetCrc>
 803d8c8:	4603      	mov	r3, r0
 803d8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        requestHeaderFrame.headerCrc     = gos_crcDriverGetCrc((u8_t*)&requestHeaderFrame, (u32_t)(sizeof(requestHeaderFrame) - sizeof(requestHeaderFrame.headerCrc)));
 803d8cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 803d8d0:	210c      	movs	r1, #12
 803d8d2:	4618      	mov	r0, r3
 803d8d4:	f003 fcb2 	bl	804123c <gos_crcDriverGetCrc>
 803d8d8:	4603      	mov	r3, r0
 803d8da:	633b      	str	r3, [r7, #48]	; 0x30
        else
        {
            // Error.
        }*/

        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS)
 803d8dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 803d8e0:	4a5a      	ldr	r2, [pc, #360]	; (803da4c <gos_gcpTransmitMessage+0x260>)
 803d8e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 803d8e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 803d8ea:	2110      	movs	r1, #16
 803d8ec:	4610      	mov	r0, r2
 803d8ee:	4798      	blx	r3
 803d8f0:	4603      	mov	r3, r0
 803d8f2:	2b55      	cmp	r3, #85	; 0x55
 803d8f4:	f040 8096 	bne.w	803da24 <gos_gcpTransmitMessage+0x238>
        {
        	if (requestHeaderFrame.dataSize == 0u)
 803d8f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 803d8fa:	2b00      	cmp	r3, #0
 803d8fc:	d120      	bne.n	803d940 <gos_gcpTransmitMessage+0x154>
        	{
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 803d8fe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 803d902:	4a52      	ldr	r2, [pc, #328]	; (803da4c <gos_gcpTransmitMessage+0x260>)
 803d904:	00db      	lsls	r3, r3, #3
 803d906:	4413      	add	r3, r2
 803d908:	685b      	ldr	r3, [r3, #4]
 803d90a:	f107 0214 	add.w	r2, r7, #20
 803d90e:	2110      	movs	r1, #16
 803d910:	4610      	mov	r0, r2
 803d912:	4798      	blx	r3
 803d914:	4603      	mov	r3, r0
 803d916:	2b55      	cmp	r3, #85	; 0x55
 803d918:	f040 8084 	bne.w	803da24 <gos_gcpTransmitMessage+0x238>
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 803d91c:	f107 0213 	add.w	r2, r7, #19
 803d920:	f107 0314 	add.w	r3, r7, #20
 803d924:	4611      	mov	r1, r2
 803d926:	4618      	mov	r0, r3
 803d928:	f000 f9de 	bl	803dce8 <gos_gcpValidateHeader>
 803d92c:	4603      	mov	r3, r0
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 803d92e:	2b55      	cmp	r3, #85	; 0x55
 803d930:	d178      	bne.n	803da24 <gos_gcpTransmitMessage+0x238>
			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 803d932:	7dbb      	ldrb	r3, [r7, #22]
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 803d934:	2b01      	cmp	r3, #1
 803d936:	d175      	bne.n	803da24 <gos_gcpTransmitMessage+0x238>
        		{
                    // Transmission successful.
                    transmitMessageResult = GOS_SUCCESS;
 803d938:	2355      	movs	r3, #85	; 0x55
 803d93a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 803d93e:	e071      	b.n	803da24 <gos_gcpTransmitMessage+0x238>
        			// Error.
        		}
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 803d940:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 803d942:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 803d944:	fbb2 f3f3 	udiv	r3, r2, r3
 803d948:	b29b      	uxth	r3, r3
 803d94a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 803d94e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 803d950:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 803d952:	fbb3 f1f2 	udiv	r1, r3, r2
 803d956:	fb01 f202 	mul.w	r2, r1, r2
 803d95a:	1a9b      	subs	r3, r3, r2
 803d95c:	b29b      	uxth	r3, r3
 803d95e:	2b00      	cmp	r3, #0
 803d960:	d004      	beq.n	803d96c <gos_gcpTransmitMessage+0x180>
            	{
            		dataChunks++;
 803d962:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 803d966:	3301      	adds	r3, #1
 803d968:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 803d96c:	2300      	movs	r3, #0
 803d96e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 803d972:	e051      	b.n	803da18 <gos_gcpTransmitMessage+0x22c>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 803d974:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 803d978:	3301      	adds	r3, #1
 803d97a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 803d97c:	fb02 f303 	mul.w	r3, r2, r3
 803d980:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 803d982:	4293      	cmp	r3, r2
 803d984:	dd0a      	ble.n	803d99c <gos_gcpTransmitMessage+0x1b0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 803d986:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 803d988:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 803d98c:	b29b      	uxth	r3, r3
 803d98e:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 803d990:	fb11 f303 	smulbb	r3, r1, r3
 803d994:	b29b      	uxth	r3, r3
 803d996:	1ad3      	subs	r3, r2, r3
 803d998:	86fb      	strh	r3, [r7, #54]	; 0x36
 803d99a:	e001      	b.n	803d9a0 <gos_gcpTransmitMessage+0x1b4>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 803d99c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 803d99e:	86fb      	strh	r3, [r7, #54]	; 0x36
            		}

            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 803d9a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 803d9a4:	4a29      	ldr	r2, [pc, #164]	; (803da4c <gos_gcpTransmitMessage+0x260>)
 803d9a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 803d9aa:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 803d9ae:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 803d9b0:	fb01 f202 	mul.w	r2, r1, r2
 803d9b4:	4611      	mov	r1, r2
 803d9b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 803d9b8:	440a      	add	r2, r1
 803d9ba:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 803d9bc:	4610      	mov	r0, r2
 803d9be:	4798      	blx	r3
 803d9c0:	4603      	mov	r3, r0
 803d9c2:	2b55      	cmp	r3, #85	; 0x55
 803d9c4:	d124      	bne.n	803da10 <gos_gcpTransmitMessage+0x224>
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 803d9c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 803d9ca:	4a20      	ldr	r2, [pc, #128]	; (803da4c <gos_gcpTransmitMessage+0x260>)
 803d9cc:	00db      	lsls	r3, r3, #3
 803d9ce:	4413      	add	r3, r2
 803d9d0:	685b      	ldr	r3, [r3, #4]
 803d9d2:	f107 0214 	add.w	r2, r7, #20
 803d9d6:	2110      	movs	r1, #16
 803d9d8:	4610      	mov	r0, r2
 803d9da:	4798      	blx	r3
 803d9dc:	4603      	mov	r3, r0
            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 803d9de:	2b55      	cmp	r3, #85	; 0x55
 803d9e0:	d116      	bne.n	803da10 <gos_gcpTransmitMessage+0x224>
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 803d9e2:	f107 0213 	add.w	r2, r7, #19
 803d9e6:	f107 0314 	add.w	r3, r7, #20
 803d9ea:	4611      	mov	r1, r2
 803d9ec:	4618      	mov	r0, r3
 803d9ee:	f000 f97b 	bl	803dce8 <gos_gcpValidateHeader>
 803d9f2:	4603      	mov	r3, r0
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 803d9f4:	2b55      	cmp	r3, #85	; 0x55
 803d9f6:	d10b      	bne.n	803da10 <gos_gcpTransmitMessage+0x224>
    			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 803d9f8:	7dbb      	ldrb	r3, [r7, #22]
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 803d9fa:	2b01      	cmp	r3, #1
 803d9fc:	d108      	bne.n	803da10 <gos_gcpTransmitMessage+0x224>
            		{
                        // Transmission successful.
            			// Set temporary success.
                        transmitMessageResult = GOS_SUCCESS;
 803d9fe:	2355      	movs	r3, #85	; 0x55
 803da00:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 803da04:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 803da08:	3301      	adds	r3, #1
 803da0a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 803da0e:	e003      	b.n	803da18 <gos_gcpTransmitMessage+0x22c>
            		}
            		else
            		{
            			// Error.
            			transmitMessageResult = GOS_ERROR;
 803da10:	23ae      	movs	r3, #174	; 0xae
 803da12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            			break;
 803da16:	e005      	b.n	803da24 <gos_gcpTransmitMessage+0x238>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 803da18:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 803da1c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 803da20:	429a      	cmp	r2, r3
 803da22:	d3a7      	bcc.n	803d974 <gos_gcpTransmitMessage+0x188>
    else
    {
        // Nothing to do.
    }

    return transmitMessageResult;
 803da24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
        transmitMessageResult = gos_gcpTransmitMessageInternal(channel, messageId, pMessagePayload, payloadSize, maxChunkSize);
 803da28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    (void_t) gos_mutexUnlock(&gcpTxMutexes[channel]);
 803da2c:	7bfb      	ldrb	r3, [r7, #15]
 803da2e:	009b      	lsls	r3, r3, #2
 803da30:	4a05      	ldr	r2, [pc, #20]	; (803da48 <gos_gcpTransmitMessage+0x25c>)
 803da32:	4413      	add	r3, r2
 803da34:	4618      	mov	r0, r3
 803da36:	f000 fd85 	bl	803e544 <gos_mutexUnlock>
    return transmitMessageResult;
 803da3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 803da3e:	4618      	mov	r0, r3
 803da40:	3748      	adds	r7, #72	; 0x48
 803da42:	46bd      	mov	sp, r7
 803da44:	bd80      	pop	{r7, pc}
 803da46:	bf00      	nop
 803da48:	200074fc 	.word	0x200074fc
 803da4c:	200074cc 	.word	0x200074cc

0803da50 <gos_gcpReceiveMessage>:
{
 803da50:	b580      	push	{r7, lr}
 803da52:	b094      	sub	sp, #80	; 0x50
 803da54:	af00      	add	r7, sp, #0
 803da56:	60b9      	str	r1, [r7, #8]
 803da58:	607a      	str	r2, [r7, #4]
 803da5a:	461a      	mov	r2, r3
 803da5c:	4603      	mov	r3, r0
 803da5e:	73fb      	strb	r3, [r7, #15]
 803da60:	4613      	mov	r3, r2
 803da62:	81bb      	strh	r3, [r7, #12]
    gos_result_t receiveMessageResult = GOS_ERROR;
 803da64:	23ae      	movs	r3, #174	; 0xae
 803da66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (gos_mutexLock(&gcpRxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 803da6a:	7bfb      	ldrb	r3, [r7, #15]
 803da6c:	009b      	lsls	r3, r3, #2
 803da6e:	4a9c      	ldr	r2, [pc, #624]	; (803dce0 <gos_gcpReceiveMessage+0x290>)
 803da70:	4413      	add	r3, r2
 803da72:	f04f 31ff 	mov.w	r1, #4294967295
 803da76:	4618      	mov	r0, r3
 803da78:	f000 fc5e 	bl	803e338 <gos_mutexLock>
 803da7c:	4603      	mov	r3, r0
 803da7e:	2b55      	cmp	r3, #85	; 0x55
 803da80:	f040 8120 	bne.w	803dcc4 <gos_gcpReceiveMessage+0x274>
 803da84:	7bfb      	ldrb	r3, [r7, #15]
 803da86:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 803da8a:	68bb      	ldr	r3, [r7, #8]
 803da8c:	64bb      	str	r3, [r7, #72]	; 0x48
 803da8e:	687b      	ldr	r3, [r7, #4]
 803da90:	647b      	str	r3, [r7, #68]	; 0x44
 803da92:	89bb      	ldrh	r3, [r7, #12]
 803da94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 803da98:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 803da9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        )
{
    /*
     * Local variables.
     */
    gos_result_t         receiveMessageResult  = GOS_ERROR;
 803daa0:	23ae      	movs	r3, #174	; 0xae
 803daa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 803daa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803daaa:	2200      	movs	r2, #0
 803daac:	601a      	str	r2, [r3, #0]
 803daae:	605a      	str	r2, [r3, #4]
 803dab0:	609a      	str	r2, [r3, #8]
 803dab2:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 803dab4:	f107 0318 	add.w	r3, r7, #24
 803dab8:	2200      	movs	r2, #0
 803daba:	601a      	str	r2, [r3, #0]
 803dabc:	605a      	str	r2, [r3, #4]
 803dabe:	609a      	str	r2, [r3, #8]
 803dac0:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 803dac2:	2300      	movs	r3, #0
 803dac4:	75fb      	strb	r3, [r7, #23]
    u8_t                 dataChunks            = 0u;
 803dac6:	2300      	movs	r3, #0
 803dac8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    u8_t                 chunkIndex            = 0u;
 803dacc:	2300      	movs	r3, #0
 803dace:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    u16_t                tempSize              = 0u;
 803dad2:	2300      	movs	r3, #0
 803dad4:	877b      	strh	r3, [r7, #58]	; 0x3a

    /*
     * Function code.
     */
    if (pMessageId                                   != NULL                        &&
 803dad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803dad8:	2b00      	cmp	r3, #0
 803dada:	f000 80ef 	beq.w	803dcbc <gos_gcpReceiveMessage+0x26c>
 803dade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803dae0:	2b00      	cmp	r3, #0
 803dae2:	f000 80eb 	beq.w	803dcbc <gos_gcpReceiveMessage+0x26c>
        pPayloadTarget                               != NULL                        &&
 803dae6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 803daea:	2b03      	cmp	r3, #3
 803daec:	f200 80e6 	bhi.w	803dcbc <gos_gcpReceiveMessage+0x26c>
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpReceiveFunction != NULL
 803daf0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 803daf4:	4a7b      	ldr	r2, [pc, #492]	; (803dce4 <gos_gcpReceiveMessage+0x294>)
 803daf6:	00db      	lsls	r3, r3, #3
 803daf8:	4413      	add	r3, r2
 803dafa:	685b      	ldr	r3, [r3, #4]
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 803dafc:	2b00      	cmp	r3, #0
 803dafe:	f000 80dd 	beq.w	803dcbc <gos_gcpReceiveMessage+0x26c>
        )
    {
        // Prepare response header frame.
        responseHeaderFrame.dataSize      = 0u;
 803db02:	2300      	movs	r3, #0
 803db04:	83fb      	strh	r3, [r7, #30]
        responseHeaderFrame.dataCrc       = 0u;
 803db06:	2300      	movs	r3, #0
 803db08:	623b      	str	r3, [r7, #32]
        responseHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 803db0a:	2302      	movs	r3, #2
 803db0c:	763b      	strb	r3, [r7, #24]
        responseHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 803db0e:	2300      	movs	r3, #0
 803db10:	767b      	strb	r3, [r7, #25]
            responseHeaderFrame.ackType   = (u8_t)headerAck;
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
        }*/

        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 803db12:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 803db16:	4a73      	ldr	r2, [pc, #460]	; (803dce4 <gos_gcpReceiveMessage+0x294>)
 803db18:	00db      	lsls	r3, r3, #3
 803db1a:	4413      	add	r3, r2
 803db1c:	685b      	ldr	r3, [r3, #4]
 803db1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 803db22:	2110      	movs	r1, #16
 803db24:	4610      	mov	r0, r2
 803db26:	4798      	blx	r3
 803db28:	4603      	mov	r3, r0
 803db2a:	2b55      	cmp	r3, #85	; 0x55
 803db2c:	f040 80b0 	bne.w	803dc90 <gos_gcpReceiveMessage+0x240>
            gos_gcpValidateHeader(&requestHeaderFrame, &headerAck) == GOS_SUCCESS)
 803db30:	f107 0217 	add.w	r2, r7, #23
 803db34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803db38:	4611      	mov	r1, r2
 803db3a:	4618      	mov	r0, r3
 803db3c:	f000 f8d4 	bl	803dce8 <gos_gcpValidateHeader>
 803db40:	4603      	mov	r3, r0
        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 803db42:	2b55      	cmp	r3, #85	; 0x55
 803db44:	f040 80a4 	bne.w	803dc90 <gos_gcpReceiveMessage+0x240>
        {
        	if (requestHeaderFrame.dataSize == 0)
 803db48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 803db4a:	2b00      	cmp	r3, #0
 803db4c:	d11e      	bne.n	803db8c <gos_gcpReceiveMessage+0x13c>
        	{
        		// OK.
                // Data OK. Send response.
                *pMessageId = requestHeaderFrame.messageId;
 803db4e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 803db50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803db52:	801a      	strh	r2, [r3, #0]
                responseHeaderFrame.ackType = GCP_ACK_OK;
 803db54:	2301      	movs	r3, #1
 803db56:	76bb      	strb	r3, [r7, #26]
                responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 803db58:	f107 0318 	add.w	r3, r7, #24
 803db5c:	210c      	movs	r1, #12
 803db5e:	4618      	mov	r0, r3
 803db60:	f003 fb6c 	bl	804123c <gos_crcDriverGetCrc>
 803db64:	4603      	mov	r3, r0
 803db66:	627b      	str	r3, [r7, #36]	; 0x24
                if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 803db68:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 803db6c:	4a5d      	ldr	r2, [pc, #372]	; (803dce4 <gos_gcpReceiveMessage+0x294>)
 803db6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 803db72:	f107 0218 	add.w	r2, r7, #24
 803db76:	2110      	movs	r1, #16
 803db78:	4610      	mov	r0, r2
 803db7a:	4798      	blx	r3
 803db7c:	4603      	mov	r3, r0
 803db7e:	2b55      	cmp	r3, #85	; 0x55
 803db80:	f040 809b 	bne.w	803dcba <gos_gcpReceiveMessage+0x26a>
                {
                    // Reception successful.
                    receiveMessageResult = GOS_SUCCESS;
 803db84:	2355      	movs	r3, #85	; 0x55
 803db86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 803db8a:	e096      	b.n	803dcba <gos_gcpReceiveMessage+0x26a>
                    // Transmit error.
                }
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 803db8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 803db8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 803db92:	fbb2 f3f3 	udiv	r3, r2, r3
 803db96:	b29b      	uxth	r3, r3
 803db98:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 803db9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 803db9e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 803dba2:	fbb3 f1f2 	udiv	r1, r3, r2
 803dba6:	fb01 f202 	mul.w	r2, r1, r2
 803dbaa:	1a9b      	subs	r3, r3, r2
 803dbac:	b29b      	uxth	r3, r3
 803dbae:	2b00      	cmp	r3, #0
 803dbb0:	d004      	beq.n	803dbbc <gos_gcpReceiveMessage+0x16c>
            	{
            		dataChunks++;
 803dbb2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 803dbb6:	3301      	adds	r3, #1
 803dbb8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 803dbbc:	2300      	movs	r3, #0
 803dbbe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 803dbc2:	e04c      	b.n	803dc5e <gos_gcpReceiveMessage+0x20e>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 803dbc4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 803dbc8:	3301      	adds	r3, #1
 803dbca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 803dbce:	fb02 f303 	mul.w	r3, r2, r3
 803dbd2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 803dbd4:	4293      	cmp	r3, r2
 803dbd6:	dd0b      	ble.n	803dbf0 <gos_gcpReceiveMessage+0x1a0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 803dbd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 803dbda:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 803dbde:	b29b      	uxth	r3, r3
 803dbe0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 803dbe4:	fb11 f303 	smulbb	r3, r1, r3
 803dbe8:	b29b      	uxth	r3, r3
 803dbea:	1ad3      	subs	r3, r2, r3
 803dbec:	877b      	strh	r3, [r7, #58]	; 0x3a
 803dbee:	e002      	b.n	803dbf6 <gos_gcpReceiveMessage+0x1a6>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 803dbf0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 803dbf4:	877b      	strh	r3, [r7, #58]	; 0x3a
            		}

            		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)(pPayloadTarget + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS)
 803dbf6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 803dbfa:	4a3a      	ldr	r2, [pc, #232]	; (803dce4 <gos_gcpReceiveMessage+0x294>)
 803dbfc:	00db      	lsls	r3, r3, #3
 803dbfe:	4413      	add	r3, r2
 803dc00:	685b      	ldr	r3, [r3, #4]
 803dc02:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 803dc06:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 803dc0a:	fb01 f202 	mul.w	r2, r1, r2
 803dc0e:	4611      	mov	r1, r2
 803dc10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 803dc12:	440a      	add	r2, r1
 803dc14:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 803dc16:	4610      	mov	r0, r2
 803dc18:	4798      	blx	r3
 803dc1a:	4603      	mov	r3, r0
 803dc1c:	2b55      	cmp	r3, #85	; 0x55
 803dc1e:	d125      	bne.n	803dc6c <gos_gcpReceiveMessage+0x21c>
            		{
            			// OK, send response.
                        // Data OK. Send response.
                        *pMessageId = requestHeaderFrame.messageId;
 803dc20:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 803dc22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803dc24:	801a      	strh	r2, [r3, #0]
                        responseHeaderFrame.ackType = GCP_ACK_OK;
 803dc26:	2301      	movs	r3, #1
 803dc28:	76bb      	strb	r3, [r7, #26]
                        responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 803dc2a:	f107 0318 	add.w	r3, r7, #24
 803dc2e:	210c      	movs	r1, #12
 803dc30:	4618      	mov	r0, r3
 803dc32:	f003 fb03 	bl	804123c <gos_crcDriverGetCrc>
 803dc36:	4603      	mov	r3, r0
 803dc38:	627b      	str	r3, [r7, #36]	; 0x24
                        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 803dc3a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 803dc3e:	4a29      	ldr	r2, [pc, #164]	; (803dce4 <gos_gcpReceiveMessage+0x294>)
 803dc40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 803dc44:	f107 0218 	add.w	r2, r7, #24
 803dc48:	2110      	movs	r1, #16
 803dc4a:	4610      	mov	r0, r2
 803dc4c:	4798      	blx	r3
 803dc4e:	4603      	mov	r3, r0
 803dc50:	2b55      	cmp	r3, #85	; 0x55
 803dc52:	d10d      	bne.n	803dc70 <gos_gcpReceiveMessage+0x220>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 803dc54:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 803dc58:	3301      	adds	r3, #1
 803dc5a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 803dc5e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 803dc62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 803dc66:	429a      	cmp	r2, r3
 803dc68:	d3ac      	bcc.n	803dbc4 <gos_gcpReceiveMessage+0x174>
 803dc6a:	e002      	b.n	803dc72 <gos_gcpReceiveMessage+0x222>
                        	break;
                        }
            		}
            		else
            		{
            			break;
 803dc6c:	bf00      	nop
 803dc6e:	e000      	b.n	803dc72 <gos_gcpReceiveMessage+0x222>
                        	break;
 803dc70:	bf00      	nop
            		}
            	}

            	// Integrity check.
            	if (gos_gcpValidateData(&requestHeaderFrame, pPayloadTarget, &headerAck) == GOS_SUCCESS)
 803dc72:	f107 0217 	add.w	r2, r7, #23
 803dc76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 803dc7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 803dc7c:	4618      	mov	r0, r3
 803dc7e:	f000 f860 	bl	803dd42 <gos_gcpValidateData>
 803dc82:	4603      	mov	r3, r0
 803dc84:	2b55      	cmp	r3, #85	; 0x55
 803dc86:	d118      	bne.n	803dcba <gos_gcpReceiveMessage+0x26a>
            	{
            		receiveMessageResult = GOS_SUCCESS;
 803dc88:	2355      	movs	r3, #85	; 0x55
 803dc8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 803dc8e:	e014      	b.n	803dcba <gos_gcpReceiveMessage+0x26a>
        	}
        }
        else
        {
            // Send response.
            responseHeaderFrame.ackType   = (u8_t)headerAck;
 803dc90:	7dfb      	ldrb	r3, [r7, #23]
 803dc92:	76bb      	strb	r3, [r7, #26]
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 803dc94:	f107 0318 	add.w	r3, r7, #24
 803dc98:	210c      	movs	r1, #12
 803dc9a:	4618      	mov	r0, r3
 803dc9c:	f003 face 	bl	804123c <gos_crcDriverGetCrc>
 803dca0:	4603      	mov	r3, r0
 803dca2:	627b      	str	r3, [r7, #36]	; 0x24
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
 803dca4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 803dca8:	4a0e      	ldr	r2, [pc, #56]	; (803dce4 <gos_gcpReceiveMessage+0x294>)
 803dcaa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 803dcae:	f107 0218 	add.w	r2, r7, #24
 803dcb2:	2110      	movs	r1, #16
 803dcb4:	4610      	mov	r0, r2
 803dcb6:	4798      	blx	r3
 803dcb8:	e000      	b.n	803dcbc <gos_gcpReceiveMessage+0x26c>
        	if (requestHeaderFrame.dataSize == 0)
 803dcba:	bf00      	nop
    else
    {
        // Nothing to do.
    }

    return receiveMessageResult;
 803dcbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        receiveMessageResult = gos_gcpReceiveMessageInternal(channel, pMessageId, pPayloadTarget, targetSize, maxChunkSize);
 803dcc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    gos_mutexUnlock(&gcpRxMutexes[channel]);
 803dcc4:	7bfb      	ldrb	r3, [r7, #15]
 803dcc6:	009b      	lsls	r3, r3, #2
 803dcc8:	4a05      	ldr	r2, [pc, #20]	; (803dce0 <gos_gcpReceiveMessage+0x290>)
 803dcca:	4413      	add	r3, r2
 803dccc:	4618      	mov	r0, r3
 803dcce:	f000 fc39 	bl	803e544 <gos_mutexUnlock>
    return receiveMessageResult;
 803dcd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 803dcd6:	4618      	mov	r0, r3
 803dcd8:	3750      	adds	r7, #80	; 0x50
 803dcda:	46bd      	mov	sp, r7
 803dcdc:	bd80      	pop	{r7, pc}
 803dcde:	bf00      	nop
 803dce0:	200074ec 	.word	0x200074ec
 803dce4:	200074cc 	.word	0x200074cc

0803dce8 <gos_gcpValidateHeader>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC or PV error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateHeader (gos_gcpHeaderFrame_t* pHeader, gos_gcpAck_t* pAck)
{
 803dce8:	b580      	push	{r7, lr}
 803dcea:	b084      	sub	sp, #16
 803dcec:	af00      	add	r7, sp, #0
 803dcee:	6078      	str	r0, [r7, #4]
 803dcf0:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 803dcf2:	23ae      	movs	r3, #174	; 0xae
 803dcf4:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pHeader != NULL && pAck != NULL)
 803dcf6:	687b      	ldr	r3, [r7, #4]
 803dcf8:	2b00      	cmp	r3, #0
 803dcfa:	d01d      	beq.n	803dd38 <gos_gcpValidateHeader+0x50>
 803dcfc:	683b      	ldr	r3, [r7, #0]
 803dcfe:	2b00      	cmp	r3, #0
 803dd00:	d01a      	beq.n	803dd38 <gos_gcpValidateHeader+0x50>
    {
        // Check header CRC.
        if (gos_crcDriverGetCrc((u8_t*)pHeader, (u16_t)(sizeof(*pHeader) - sizeof(pHeader->headerCrc))) == pHeader->headerCrc)
 803dd02:	210c      	movs	r1, #12
 803dd04:	6878      	ldr	r0, [r7, #4]
 803dd06:	f003 fa99 	bl	804123c <gos_crcDriverGetCrc>
 803dd0a:	4602      	mov	r2, r0
 803dd0c:	687b      	ldr	r3, [r7, #4]
 803dd0e:	68db      	ldr	r3, [r3, #12]
 803dd10:	429a      	cmp	r2, r3
 803dd12:	d10e      	bne.n	803dd32 <gos_gcpValidateHeader+0x4a>
        {
            // Validate protocol version
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 803dd14:	687b      	ldr	r3, [r7, #4]
 803dd16:	781b      	ldrb	r3, [r3, #0]
 803dd18:	2b02      	cmp	r3, #2
 803dd1a:	d106      	bne.n	803dd2a <gos_gcpValidateHeader+0x42>
                pHeader->protocolMinor == GCP_PROTOCOL_VERSION_MINOR)
 803dd1c:	687b      	ldr	r3, [r7, #4]
 803dd1e:	785b      	ldrb	r3, [r3, #1]
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 803dd20:	2b00      	cmp	r3, #0
 803dd22:	d102      	bne.n	803dd2a <gos_gcpValidateHeader+0x42>
            {
                validateSuccess = GOS_SUCCESS;
 803dd24:	2355      	movs	r3, #85	; 0x55
 803dd26:	73fb      	strb	r3, [r7, #15]
 803dd28:	e006      	b.n	803dd38 <gos_gcpValidateHeader+0x50>
            }
            else
            {
                // Protocol version error.
                *pAck = GCP_ACK_PV_ERROR;
 803dd2a:	683b      	ldr	r3, [r7, #0]
 803dd2c:	2205      	movs	r2, #5
 803dd2e:	701a      	strb	r2, [r3, #0]
 803dd30:	e002      	b.n	803dd38 <gos_gcpValidateHeader+0x50>
            }
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 803dd32:	683b      	ldr	r3, [r7, #0]
 803dd34:	2202      	movs	r2, #2
 803dd36:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 803dd38:	7bfb      	ldrb	r3, [r7, #15]
}
 803dd3a:	4618      	mov	r0, r3
 803dd3c:	3710      	adds	r7, #16
 803dd3e:	46bd      	mov	sp, r7
 803dd40:	bd80      	pop	{r7, pc}

0803dd42 <gos_gcpValidateData>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateData (gos_gcpHeaderFrame_t* pHeader, void_t* pData, gos_gcpAck_t* pAck)
{
 803dd42:	b580      	push	{r7, lr}
 803dd44:	b086      	sub	sp, #24
 803dd46:	af00      	add	r7, sp, #0
 803dd48:	60f8      	str	r0, [r7, #12]
 803dd4a:	60b9      	str	r1, [r7, #8]
 803dd4c:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 803dd4e:	23ae      	movs	r3, #174	; 0xae
 803dd50:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pHeader != NULL && pData != NULL && pAck != NULL)
 803dd52:	68fb      	ldr	r3, [r7, #12]
 803dd54:	2b00      	cmp	r3, #0
 803dd56:	d016      	beq.n	803dd86 <gos_gcpValidateData+0x44>
 803dd58:	68bb      	ldr	r3, [r7, #8]
 803dd5a:	2b00      	cmp	r3, #0
 803dd5c:	d013      	beq.n	803dd86 <gos_gcpValidateData+0x44>
 803dd5e:	687b      	ldr	r3, [r7, #4]
 803dd60:	2b00      	cmp	r3, #0
 803dd62:	d010      	beq.n	803dd86 <gos_gcpValidateData+0x44>
    {
        // Check data CRC.
        if (gos_crcDriverGetCrc((u8_t*)pData, (u16_t)(pHeader->dataSize)) == pHeader->dataCrc)
 803dd64:	68fb      	ldr	r3, [r7, #12]
 803dd66:	88db      	ldrh	r3, [r3, #6]
 803dd68:	4619      	mov	r1, r3
 803dd6a:	68b8      	ldr	r0, [r7, #8]
 803dd6c:	f003 fa66 	bl	804123c <gos_crcDriverGetCrc>
 803dd70:	4602      	mov	r2, r0
 803dd72:	68fb      	ldr	r3, [r7, #12]
 803dd74:	689b      	ldr	r3, [r3, #8]
 803dd76:	429a      	cmp	r2, r3
 803dd78:	d102      	bne.n	803dd80 <gos_gcpValidateData+0x3e>
        {
            // Data OK.
            validateSuccess = GOS_SUCCESS;
 803dd7a:	2355      	movs	r3, #85	; 0x55
 803dd7c:	75fb      	strb	r3, [r7, #23]
 803dd7e:	e002      	b.n	803dd86 <gos_gcpValidateData+0x44>
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 803dd80:	687b      	ldr	r3, [r7, #4]
 803dd82:	2202      	movs	r2, #2
 803dd84:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 803dd86:	7dfb      	ldrb	r3, [r7, #23]
}
 803dd88:	4618      	mov	r0, r3
 803dd8a:	3718      	adds	r7, #24
 803dd8c:	46bd      	mov	sp, r7
 803dd8e:	bd80      	pop	{r7, pc}

0803dd90 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 803dd90:	b580      	push	{r7, lr}
 803dd92:	b082      	sub	sp, #8
 803dd94:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_SUCCESS;
 803dd96:	2355      	movs	r3, #85	; 0x55
 803dd98:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 803dd9a:	2300      	movs	r3, #0
 803dd9c:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 803dd9e:	2300      	movs	r3, #0
 803dda0:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 803dda2:	4b22      	ldr	r3, [pc, #136]	; (803de2c <gos_messageInit+0x9c>)
 803dda4:	2200      	movs	r2, #0
 803dda6:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 803dda8:	4b21      	ldr	r3, [pc, #132]	; (803de30 <gos_messageInit+0xa0>)
 803ddaa:	2200      	movs	r2, #0
 803ddac:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 803ddae:	2300      	movs	r3, #0
 803ddb0:	71bb      	strb	r3, [r7, #6]
 803ddb2:	e014      	b.n	803ddde <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 803ddb4:	79bb      	ldrb	r3, [r7, #6]
 803ddb6:	4a1f      	ldr	r2, [pc, #124]	; (803de34 <gos_messageInit+0xa4>)
 803ddb8:	2154      	movs	r1, #84	; 0x54
 803ddba:	fb01 f303 	mul.w	r3, r1, r3
 803ddbe:	4413      	add	r3, r2
 803ddc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803ddc4:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 803ddc6:	79bb      	ldrb	r3, [r7, #6]
 803ddc8:	4a1a      	ldr	r2, [pc, #104]	; (803de34 <gos_messageInit+0xa4>)
 803ddca:	2154      	movs	r1, #84	; 0x54
 803ddcc:	fb01 f303 	mul.w	r3, r1, r3
 803ddd0:	4413      	add	r3, r2
 803ddd2:	3302      	adds	r3, #2
 803ddd4:	2200      	movs	r2, #0
 803ddd6:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 803ddd8:	79bb      	ldrb	r3, [r7, #6]
 803ddda:	3301      	adds	r3, #1
 803dddc:	71bb      	strb	r3, [r7, #6]
 803ddde:	79bb      	ldrb	r3, [r7, #6]
 803dde0:	2b07      	cmp	r3, #7
 803dde2:	d9e7      	bls.n	803ddb4 <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 803dde4:	2300      	movs	r3, #0
 803dde6:	717b      	strb	r3, [r7, #5]
 803dde8:	e009      	b.n	803ddfe <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 803ddea:	797b      	ldrb	r3, [r7, #5]
 803ddec:	4a12      	ldr	r2, [pc, #72]	; (803de38 <gos_messageInit+0xa8>)
 803ddee:	015b      	lsls	r3, r3, #5
 803ddf0:	4413      	add	r3, r2
 803ddf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 803ddf6:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 803ddf8:	797b      	ldrb	r3, [r7, #5]
 803ddfa:	3301      	adds	r3, #1
 803ddfc:	717b      	strb	r3, [r7, #5]
 803ddfe:	797b      	ldrb	r3, [r7, #5]
 803de00:	2b09      	cmp	r3, #9
 803de02:	d9f2      	bls.n	803ddea <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 803de04:	480d      	ldr	r0, [pc, #52]	; (803de3c <gos_messageInit+0xac>)
 803de06:	f000 fa7d 	bl	803e304 <gos_mutexInit>
 803de0a:	4603      	mov	r3, r0
 803de0c:	2b55      	cmp	r3, #85	; 0x55
 803de0e:	d106      	bne.n	803de1e <gos_messageInit+0x8e>
        gos_taskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) != GOS_SUCCESS)
 803de10:	490b      	ldr	r1, [pc, #44]	; (803de40 <gos_messageInit+0xb0>)
 803de12:	480c      	ldr	r0, [pc, #48]	; (803de44 <gos_messageInit+0xb4>)
 803de14:	f7fd fc8a 	bl	803b72c <gos_taskRegister>
 803de18:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 803de1a:	2b55      	cmp	r3, #85	; 0x55
 803de1c:	d001      	beq.n	803de22 <gos_messageInit+0x92>
    {
        messageInitResult = GOS_ERROR;
 803de1e:	23ae      	movs	r3, #174	; 0xae
 803de20:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 803de22:	79fb      	ldrb	r3, [r7, #7]
}
 803de24:	4618      	mov	r0, r3
 803de26:	3708      	adds	r7, #8
 803de28:	46bd      	mov	sp, r7
 803de2a:	bd80      	pop	{r7, pc}
 803de2c:	200078ee 	.word	0x200078ee
 803de30:	200078ef 	.word	0x200078ef
 803de34:	2000750c 	.word	0x2000750c
 803de38:	200077ac 	.word	0x200077ac
 803de3c:	200078f0 	.word	0x200078f0
 803de40:	200078ec 	.word	0x200078ec
 803de44:	20003238 	.word	0x20003238

0803de48 <gos_messageRx>:
GOS_INLINE gos_result_t gos_messageRx (
        gos_messageId_t* messageIdArray,
        gos_message_t*   target,
        gos_messageTimeout_t tmo
        )
{
 803de48:	b590      	push	{r4, r7, lr}
 803de4a:	b087      	sub	sp, #28
 803de4c:	af00      	add	r7, sp, #0
 803de4e:	60f8      	str	r0, [r7, #12]
 803de50:	60b9      	str	r1, [r7, #8]
 803de52:	4613      	mov	r3, r2
 803de54:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t             messageRxResult    = GOS_ERROR;
 803de56:	23ae      	movs	r3, #174	; 0xae
 803de58:	75fb      	strb	r3, [r7, #23]
    gos_tid_t                currentTaskId      = GOS_INVALID_TASK_ID;
 803de5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 803de5e:	827b      	strh	r3, [r7, #18]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 803de60:	2300      	movs	r3, #0
 803de62:	753b      	strb	r3, [r7, #20]
    gos_messageWaiterIndex_t index              = 0u;
 803de64:	2300      	movs	r3, #0
 803de66:	75bb      	strb	r3, [r7, #22]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 803de68:	2300      	movs	r3, #0
 803de6a:	757b      	strb	r3, [r7, #21]
    gos_taskPrivilegeLevel_t privileges         = 0u;
 803de6c:	2300      	movs	r3, #0
 803de6e:	823b      	strh	r3, [r7, #16]

    /*
     * Function code.
     */
    if (target                                              != NULL &&
 803de70:	68bb      	ldr	r3, [r7, #8]
 803de72:	2b00      	cmp	r3, #0
 803de74:	f000 80d9 	beq.w	803e02a <gos_messageRx+0x1e2>
 803de78:	68fb      	ldr	r3, [r7, #12]
 803de7a:	2b00      	cmp	r3, #0
 803de7c:	f000 80d5 	beq.w	803e02a <gos_messageRx+0x1e2>
        messageIdArray                                      != NULL &&
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 803de80:	f04f 31ff 	mov.w	r1, #4294967295
 803de84:	486d      	ldr	r0, [pc, #436]	; (803e03c <gos_messageRx+0x1f4>)
 803de86:	f000 fa57 	bl	803e338 <gos_mutexLock>
 803de8a:	4603      	mov	r3, r0
        messageIdArray                                      != NULL &&
 803de8c:	2b55      	cmp	r3, #85	; 0x55
 803de8e:	f040 80cc 	bne.w	803e02a <gos_messageRx+0x1e2>
    {
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 803de92:	4b6b      	ldr	r3, [pc, #428]	; (803e040 <gos_messageRx+0x1f8>)
 803de94:	781b      	ldrb	r3, [r3, #0]
 803de96:	4a6b      	ldr	r2, [pc, #428]	; (803e044 <gos_messageRx+0x1fc>)
 803de98:	015b      	lsls	r3, r3, #5
 803de9a:	4413      	add	r3, r2
 803de9c:	881b      	ldrh	r3, [r3, #0]
 803de9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803dea2:	f040 80c2 	bne.w	803e02a <gos_messageRx+0x1e2>
            gos_taskGetCurrentId(&currentTaskId)       == GOS_SUCCESS)
 803dea6:	f107 0312 	add.w	r3, r7, #18
 803deaa:	4618      	mov	r0, r3
 803deac:	f7ff f840 	bl	803cf30 <gos_taskGetCurrentId>
 803deb0:	4603      	mov	r3, r0
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 803deb2:	2b55      	cmp	r3, #85	; 0x55
 803deb4:	f040 80b9 	bne.w	803e02a <gos_messageRx+0x1e2>
        {
            // Add waiter to array.
            messageWaiterArray[nextWaiterIndex].waiterTaskId   = currentTaskId;
 803deb8:	4b61      	ldr	r3, [pc, #388]	; (803e040 <gos_messageRx+0x1f8>)
 803deba:	781b      	ldrb	r3, [r3, #0]
 803debc:	8a79      	ldrh	r1, [r7, #18]
 803debe:	4a61      	ldr	r2, [pc, #388]	; (803e044 <gos_messageRx+0x1fc>)
 803dec0:	015b      	lsls	r3, r3, #5
 803dec2:	4413      	add	r3, r2
 803dec4:	460a      	mov	r2, r1
 803dec6:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmo        = tmo;
 803dec8:	4b5d      	ldr	r3, [pc, #372]	; (803e040 <gos_messageRx+0x1f8>)
 803deca:	781b      	ldrb	r3, [r3, #0]
 803decc:	4a5d      	ldr	r2, [pc, #372]	; (803e044 <gos_messageRx+0x1fc>)
 803dece:	015b      	lsls	r3, r3, #5
 803ded0:	4413      	add	r3, r2
 803ded2:	3302      	adds	r3, #2
 803ded4:	88fa      	ldrh	r2, [r7, #6]
 803ded6:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmoCounter = 0u;
 803ded8:	4b59      	ldr	r3, [pc, #356]	; (803e040 <gos_messageRx+0x1f8>)
 803deda:	781b      	ldrb	r3, [r3, #0]
 803dedc:	4a59      	ldr	r2, [pc, #356]	; (803e044 <gos_messageRx+0x1fc>)
 803dede:	015b      	lsls	r3, r3, #5
 803dee0:	4413      	add	r3, r2
 803dee2:	3304      	adds	r3, #4
 803dee4:	2200      	movs	r2, #0
 803dee6:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].target         = target;
 803dee8:	4b55      	ldr	r3, [pc, #340]	; (803e040 <gos_messageRx+0x1f8>)
 803deea:	781b      	ldrb	r3, [r3, #0]
 803deec:	4a55      	ldr	r2, [pc, #340]	; (803e044 <gos_messageRx+0x1fc>)
 803deee:	015b      	lsls	r3, r3, #5
 803def0:	4413      	add	r3, r2
 803def2:	3318      	adds	r3, #24
 803def4:	68ba      	ldr	r2, [r7, #8]
 803def6:	601a      	str	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waiterServed   = GOS_FALSE;
 803def8:	4b51      	ldr	r3, [pc, #324]	; (803e040 <gos_messageRx+0x1f8>)
 803defa:	781b      	ldrb	r3, [r3, #0]
 803defc:	4a51      	ldr	r2, [pc, #324]	; (803e044 <gos_messageRx+0x1fc>)
 803defe:	015b      	lsls	r3, r3, #5
 803df00:	4413      	add	r3, r2
 803df02:	331c      	adds	r3, #28
 803df04:	2249      	movs	r2, #73	; 0x49
 803df06:	701a      	strb	r2, [r3, #0]

            (void_t*) memset(messageWaiterArray[nextWaiterIndex].messageIdArray, 0, CFG_MESSAGE_MAX_WAITER_IDS * sizeof(gos_messageId_t));
 803df08:	4b4d      	ldr	r3, [pc, #308]	; (803e040 <gos_messageRx+0x1f8>)
 803df0a:	781b      	ldrb	r3, [r3, #0]
 803df0c:	015b      	lsls	r3, r3, #5
 803df0e:	4a4d      	ldr	r2, [pc, #308]	; (803e044 <gos_messageRx+0x1fc>)
 803df10:	4413      	add	r3, r2
 803df12:	3306      	adds	r3, #6
 803df14:	2210      	movs	r2, #16
 803df16:	2100      	movs	r1, #0
 803df18:	4618      	mov	r0, r3
 803df1a:	f004 fe75 	bl	8042c08 <memset>

            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 803df1e:	2300      	movs	r3, #0
 803df20:	757b      	strb	r3, [r7, #21]
 803df22:	e019      	b.n	803df58 <gos_messageRx+0x110>
            {
                if (messageIdArray[messageIdIndex] == 0u)
 803df24:	7d7b      	ldrb	r3, [r7, #21]
 803df26:	005b      	lsls	r3, r3, #1
 803df28:	68fa      	ldr	r2, [r7, #12]
 803df2a:	4413      	add	r3, r2
 803df2c:	881b      	ldrh	r3, [r3, #0]
 803df2e:	2b00      	cmp	r3, #0
 803df30:	d016      	beq.n	803df60 <gos_messageRx+0x118>
                {
                    break;
                }
                else
                {
                    messageWaiterArray[nextWaiterIndex].messageIdArray[messageIdIndex] = messageIdArray[messageIdIndex];
 803df32:	7d7b      	ldrb	r3, [r7, #21]
 803df34:	005b      	lsls	r3, r3, #1
 803df36:	68fa      	ldr	r2, [r7, #12]
 803df38:	441a      	add	r2, r3
 803df3a:	4b41      	ldr	r3, [pc, #260]	; (803e040 <gos_messageRx+0x1f8>)
 803df3c:	781b      	ldrb	r3, [r3, #0]
 803df3e:	461c      	mov	r4, r3
 803df40:	7d7b      	ldrb	r3, [r7, #21]
 803df42:	8810      	ldrh	r0, [r2, #0]
 803df44:	493f      	ldr	r1, [pc, #252]	; (803e044 <gos_messageRx+0x1fc>)
 803df46:	0122      	lsls	r2, r4, #4
 803df48:	4413      	add	r3, r2
 803df4a:	005b      	lsls	r3, r3, #1
 803df4c:	440b      	add	r3, r1
 803df4e:	4602      	mov	r2, r0
 803df50:	80da      	strh	r2, [r3, #6]
            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 803df52:	7d7b      	ldrb	r3, [r7, #21]
 803df54:	3301      	adds	r3, #1
 803df56:	757b      	strb	r3, [r7, #21]
 803df58:	7d7b      	ldrb	r3, [r7, #21]
 803df5a:	2b07      	cmp	r3, #7
 803df5c:	d9e2      	bls.n	803df24 <gos_messageRx+0xdc>
 803df5e:	e000      	b.n	803df62 <gos_messageRx+0x11a>
                    break;
 803df60:	bf00      	nop
                }
            }

            messageWaiterIndex = nextWaiterIndex;
 803df62:	4b37      	ldr	r3, [pc, #220]	; (803e040 <gos_messageRx+0x1f8>)
 803df64:	781b      	ldrb	r3, [r3, #0]
 803df66:	753b      	strb	r3, [r7, #20]

            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 803df68:	2300      	movs	r3, #0
 803df6a:	75bb      	strb	r3, [r7, #22]
 803df6c:	e018      	b.n	803dfa0 <gos_messageRx+0x158>
            {
                if (++nextWaiterIndex == CFG_MESSAGE_MAX_WAITERS)
 803df6e:	4b34      	ldr	r3, [pc, #208]	; (803e040 <gos_messageRx+0x1f8>)
 803df70:	781b      	ldrb	r3, [r3, #0]
 803df72:	3301      	adds	r3, #1
 803df74:	b2da      	uxtb	r2, r3
 803df76:	4b32      	ldr	r3, [pc, #200]	; (803e040 <gos_messageRx+0x1f8>)
 803df78:	701a      	strb	r2, [r3, #0]
 803df7a:	4b31      	ldr	r3, [pc, #196]	; (803e040 <gos_messageRx+0x1f8>)
 803df7c:	781b      	ldrb	r3, [r3, #0]
 803df7e:	2b0a      	cmp	r3, #10
 803df80:	d102      	bne.n	803df88 <gos_messageRx+0x140>
                {
                    nextWaiterIndex = 0u;
 803df82:	4b2f      	ldr	r3, [pc, #188]	; (803e040 <gos_messageRx+0x1f8>)
 803df84:	2200      	movs	r2, #0
 803df86:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID)
 803df88:	4b2d      	ldr	r3, [pc, #180]	; (803e040 <gos_messageRx+0x1f8>)
 803df8a:	781b      	ldrb	r3, [r3, #0]
 803df8c:	4a2d      	ldr	r2, [pc, #180]	; (803e044 <gos_messageRx+0x1fc>)
 803df8e:	015b      	lsls	r3, r3, #5
 803df90:	4413      	add	r3, r2
 803df92:	881b      	ldrh	r3, [r3, #0]
 803df94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803df98:	d006      	beq.n	803dfa8 <gos_messageRx+0x160>
            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 803df9a:	7dbb      	ldrb	r3, [r7, #22]
 803df9c:	3301      	adds	r3, #1
 803df9e:	75bb      	strb	r3, [r7, #22]
 803dfa0:	7dbb      	ldrb	r3, [r7, #22]
 803dfa2:	2b09      	cmp	r3, #9
 803dfa4:	d9e3      	bls.n	803df6e <gos_messageRx+0x126>
 803dfa6:	e000      	b.n	803dfaa <gos_messageRx+0x162>
                {
                    break;
 803dfa8:	bf00      	nop
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 803dfaa:	4824      	ldr	r0, [pc, #144]	; (803e03c <gos_messageRx+0x1f4>)
 803dfac:	f000 faca 	bl	803e544 <gos_mutexUnlock>

            // Block task (to be unblocked by daemon).
            (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 803dfb0:	8a7b      	ldrh	r3, [r7, #18]
 803dfb2:	f107 0210 	add.w	r2, r7, #16
 803dfb6:	4611      	mov	r1, r2
 803dfb8:	4618      	mov	r0, r3
 803dfba:	f7fe fee1 	bl	803cd80 <gos_taskGetPrivileges>

            if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 803dfbe:	8a3b      	ldrh	r3, [r7, #16]
 803dfc0:	b21b      	sxth	r3, r3
 803dfc2:	2b00      	cmp	r3, #0
 803dfc4:	db12      	blt.n	803dfec <gos_messageRx+0x1a4>
            {
                (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 803dfc6:	8a7b      	ldrh	r3, [r7, #18]
 803dfc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 803dfcc:	4618      	mov	r0, r3
 803dfce:	f7fe fd73 	bl	803cab8 <gos_taskAddPrivilege>
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 803dfd2:	8a7b      	ldrh	r3, [r7, #18]
 803dfd4:	f04f 31ff 	mov.w	r1, #4294967295
 803dfd8:	4618      	mov	r0, r3
 803dfda:	f7fe f855 	bl	803c088 <gos_taskBlock>
                (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 803dfde:	8a7b      	ldrh	r3, [r7, #18]
 803dfe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 803dfe4:	4618      	mov	r0, r3
 803dfe6:	f7fe fddf 	bl	803cba8 <gos_taskRemovePrivilege>
 803dfea:	e005      	b.n	803dff8 <gos_messageRx+0x1b0>
            }
            else
            {
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 803dfec:	8a7b      	ldrh	r3, [r7, #18]
 803dfee:	f04f 31ff 	mov.w	r1, #4294967295
 803dff2:	4618      	mov	r0, r3
 803dff4:	f7fe f848 	bl	803c088 <gos_taskBlock>
            }

            // Task unblocked, check TMO.
            if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_TRUE)
 803dff8:	7d3b      	ldrb	r3, [r7, #20]
 803dffa:	4a12      	ldr	r2, [pc, #72]	; (803e044 <gos_messageRx+0x1fc>)
 803dffc:	015b      	lsls	r3, r3, #5
 803dffe:	4413      	add	r3, r2
 803e000:	331c      	adds	r3, #28
 803e002:	781b      	ldrb	r3, [r3, #0]
 803e004:	2b36      	cmp	r3, #54	; 0x36
 803e006:	d102      	bne.n	803e00e <gos_messageRx+0x1c6>
            {
                // Message received successfully.
                messageRxResult = GOS_SUCCESS;
 803e008:	2355      	movs	r3, #85	; 0x55
 803e00a:	75fb      	strb	r3, [r7, #23]
 803e00c:	e006      	b.n	803e01c <gos_messageRx+0x1d4>
            }
            else
            {
                // Remove waiter.
                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 803e00e:	7d3b      	ldrb	r3, [r7, #20]
 803e010:	4a0c      	ldr	r2, [pc, #48]	; (803e044 <gos_messageRx+0x1fc>)
 803e012:	015b      	lsls	r3, r3, #5
 803e014:	4413      	add	r3, r2
 803e016:	f44f 7280 	mov.w	r2, #256	; 0x100
 803e01a:	801a      	strh	r2, [r3, #0]
            }

            // Reset flag.
            messageWaiterArray[messageWaiterIndex].waiterServed = GOS_FALSE;
 803e01c:	7d3b      	ldrb	r3, [r7, #20]
 803e01e:	4a09      	ldr	r2, [pc, #36]	; (803e044 <gos_messageRx+0x1fc>)
 803e020:	015b      	lsls	r3, r3, #5
 803e022:	4413      	add	r3, r2
 803e024:	331c      	adds	r3, #28
 803e026:	2249      	movs	r2, #73	; 0x49
 803e028:	701a      	strb	r2, [r3, #0]
        }
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 803e02a:	4804      	ldr	r0, [pc, #16]	; (803e03c <gos_messageRx+0x1f4>)
 803e02c:	f000 fa8a 	bl	803e544 <gos_mutexUnlock>

    return messageRxResult;
 803e030:	7dfb      	ldrb	r3, [r7, #23]
}
 803e032:	4618      	mov	r0, r3
 803e034:	371c      	adds	r7, #28
 803e036:	46bd      	mov	sp, r7
 803e038:	bd90      	pop	{r4, r7, pc}
 803e03a:	bf00      	nop
 803e03c:	200078f0 	.word	0x200078f0
 803e040:	200078ef 	.word	0x200078ef
 803e044:	200077ac 	.word	0x200077ac

0803e048 <gos_messageTx>:
 * Function: gos_messageTx
 */
GOS_INLINE gos_result_t gos_messageTx (
        gos_message_t* message
        )
{
 803e048:	b580      	push	{r7, lr}
 803e04a:	b084      	sub	sp, #16
 803e04c:	af00      	add	r7, sp, #0
 803e04e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t       messageTxResult = GOS_ERROR;
 803e050:	23ae      	movs	r3, #174	; 0xae
 803e052:	73fb      	strb	r3, [r7, #15]
    gos_messageIndex_t msgIndex        = 0u;
 803e054:	2300      	movs	r3, #0
 803e056:	73bb      	strb	r3, [r7, #14]

    /**
     * Function code.
     */
    if (message                                             != NULL &&
 803e058:	687b      	ldr	r3, [r7, #4]
 803e05a:	2b00      	cmp	r3, #0
 803e05c:	d052      	beq.n	803e104 <gos_messageTx+0xbc>
        message->messageId                                  != GOS_MESSAGE_INVALID_ID &&
 803e05e:	687b      	ldr	r3, [r7, #4]
 803e060:	881b      	ldrh	r3, [r3, #0]
    if (message                                             != NULL &&
 803e062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803e066:	4293      	cmp	r3, r2
 803e068:	d04c      	beq.n	803e104 <gos_messageTx+0xbc>
        message->messageSize                                <  CFG_MESSAGE_MAX_LENGTH &&
 803e06a:	687b      	ldr	r3, [r7, #4]
 803e06c:	789b      	ldrb	r3, [r3, #2]
        message->messageId                                  != GOS_MESSAGE_INVALID_ID &&
 803e06e:	2b4f      	cmp	r3, #79	; 0x4f
 803e070:	d848      	bhi.n	803e104 <gos_messageTx+0xbc>
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 803e072:	f04f 31ff 	mov.w	r1, #4294967295
 803e076:	4827      	ldr	r0, [pc, #156]	; (803e114 <gos_messageTx+0xcc>)
 803e078:	f000 f95e 	bl	803e338 <gos_mutexLock>
 803e07c:	4603      	mov	r3, r0
        message->messageSize                                <  CFG_MESSAGE_MAX_LENGTH &&
 803e07e:	2b55      	cmp	r3, #85	; 0x55
 803e080:	d140      	bne.n	803e104 <gos_messageTx+0xbc>
    {
        if (messageArray[nextMessageIndex].messageId == GOS_MESSAGE_INVALID_ID)
 803e082:	4b25      	ldr	r3, [pc, #148]	; (803e118 <gos_messageTx+0xd0>)
 803e084:	781b      	ldrb	r3, [r3, #0]
 803e086:	4619      	mov	r1, r3
 803e088:	4a24      	ldr	r2, [pc, #144]	; (803e11c <gos_messageTx+0xd4>)
 803e08a:	2354      	movs	r3, #84	; 0x54
 803e08c:	fb01 f303 	mul.w	r3, r1, r3
 803e090:	4413      	add	r3, r2
 803e092:	881b      	ldrh	r3, [r3, #0]
 803e094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803e098:	4293      	cmp	r3, r2
 803e09a:	d133      	bne.n	803e104 <gos_messageTx+0xbc>
        {
            (void_t*) memcpy((void_t*)&messageArray[nextMessageIndex], (void_t*)message, sizeof(*message));
 803e09c:	4b1e      	ldr	r3, [pc, #120]	; (803e118 <gos_messageTx+0xd0>)
 803e09e:	781b      	ldrb	r3, [r3, #0]
 803e0a0:	461a      	mov	r2, r3
 803e0a2:	2354      	movs	r3, #84	; 0x54
 803e0a4:	fb02 f303 	mul.w	r3, r2, r3
 803e0a8:	4a1c      	ldr	r2, [pc, #112]	; (803e11c <gos_messageTx+0xd4>)
 803e0aa:	4413      	add	r3, r2
 803e0ac:	2254      	movs	r2, #84	; 0x54
 803e0ae:	6879      	ldr	r1, [r7, #4]
 803e0b0:	4618      	mov	r0, r3
 803e0b2:	f004 fe42 	bl	8042d3a <memcpy>

            messageTxResult = GOS_SUCCESS;
 803e0b6:	2355      	movs	r3, #85	; 0x55
 803e0b8:	73fb      	strb	r3, [r7, #15]

            for (msgIndex = 0u; msgIndex < CFG_MESSAGE_MAX_NUMBER; msgIndex++)
 803e0ba:	2300      	movs	r3, #0
 803e0bc:	73bb      	strb	r3, [r7, #14]
 803e0be:	e01c      	b.n	803e0fa <gos_messageTx+0xb2>
            {
                if (++nextMessageIndex == CFG_MESSAGE_MAX_NUMBER)
 803e0c0:	4b15      	ldr	r3, [pc, #84]	; (803e118 <gos_messageTx+0xd0>)
 803e0c2:	781b      	ldrb	r3, [r3, #0]
 803e0c4:	3301      	adds	r3, #1
 803e0c6:	b2da      	uxtb	r2, r3
 803e0c8:	4b13      	ldr	r3, [pc, #76]	; (803e118 <gos_messageTx+0xd0>)
 803e0ca:	701a      	strb	r2, [r3, #0]
 803e0cc:	4b12      	ldr	r3, [pc, #72]	; (803e118 <gos_messageTx+0xd0>)
 803e0ce:	781b      	ldrb	r3, [r3, #0]
 803e0d0:	2b08      	cmp	r3, #8
 803e0d2:	d102      	bne.n	803e0da <gos_messageTx+0x92>
                {
                    nextMessageIndex = 0u;
 803e0d4:	4b10      	ldr	r3, [pc, #64]	; (803e118 <gos_messageTx+0xd0>)
 803e0d6:	2200      	movs	r2, #0
 803e0d8:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageArray[nextMessageIndex].messageId == GOS_MESSAGE_INVALID_ID)
 803e0da:	4b0f      	ldr	r3, [pc, #60]	; (803e118 <gos_messageTx+0xd0>)
 803e0dc:	781b      	ldrb	r3, [r3, #0]
 803e0de:	4619      	mov	r1, r3
 803e0e0:	4a0e      	ldr	r2, [pc, #56]	; (803e11c <gos_messageTx+0xd4>)
 803e0e2:	2354      	movs	r3, #84	; 0x54
 803e0e4:	fb01 f303 	mul.w	r3, r1, r3
 803e0e8:	4413      	add	r3, r2
 803e0ea:	881b      	ldrh	r3, [r3, #0]
 803e0ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803e0f0:	4293      	cmp	r3, r2
 803e0f2:	d006      	beq.n	803e102 <gos_messageTx+0xba>
            for (msgIndex = 0u; msgIndex < CFG_MESSAGE_MAX_NUMBER; msgIndex++)
 803e0f4:	7bbb      	ldrb	r3, [r7, #14]
 803e0f6:	3301      	adds	r3, #1
 803e0f8:	73bb      	strb	r3, [r7, #14]
 803e0fa:	7bbb      	ldrb	r3, [r7, #14]
 803e0fc:	2b07      	cmp	r3, #7
 803e0fe:	d9df      	bls.n	803e0c0 <gos_messageTx+0x78>
 803e100:	e000      	b.n	803e104 <gos_messageTx+0xbc>
                {
                    break;
 803e102:	bf00      	nop
    {
        // Nothing to do.
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 803e104:	4803      	ldr	r0, [pc, #12]	; (803e114 <gos_messageTx+0xcc>)
 803e106:	f000 fa1d 	bl	803e544 <gos_mutexUnlock>

    return messageTxResult;
 803e10a:	7bfb      	ldrb	r3, [r7, #15]
}
 803e10c:	4618      	mov	r0, r3
 803e10e:	3710      	adds	r7, #16
 803e110:	46bd      	mov	sp, r7
 803e112:	bd80      	pop	{r7, pc}
 803e114:	200078f0 	.word	0x200078f0
 803e118:	200078ee 	.word	0x200078ee
 803e11c:	2000750c 	.word	0x2000750c

0803e120 <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 803e120:	b590      	push	{r4, r7, lr}
 803e122:	b083      	sub	sp, #12
 803e124:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 803e126:	2300      	movs	r3, #0
 803e128:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 803e12a:	2300      	movs	r3, #0
 803e12c:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 803e12e:	2300      	movs	r3, #0
 803e130:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 803e132:	f04f 31ff 	mov.w	r1, #4294967295
 803e136:	4870      	ldr	r0, [pc, #448]	; (803e2f8 <gos_messageDaemonTask+0x1d8>)
 803e138:	f000 f8fe 	bl	803e338 <gos_mutexLock>
 803e13c:	4603      	mov	r3, r0
 803e13e:	2b55      	cmp	r3, #85	; 0x55
 803e140:	f040 80d5 	bne.w	803e2ee <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 803e144:	2300      	movs	r3, #0
 803e146:	71bb      	strb	r3, [r7, #6]
 803e148:	e0ca      	b.n	803e2e0 <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 803e14a:	79bb      	ldrb	r3, [r7, #6]
 803e14c:	4a6b      	ldr	r2, [pc, #428]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e14e:	015b      	lsls	r3, r3, #5
 803e150:	4413      	add	r3, r2
 803e152:	881b      	ldrh	r3, [r3, #0]
 803e154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803e158:	f000 80bf 	beq.w	803e2da <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 803e15c:	2300      	movs	r3, #0
 803e15e:	717b      	strb	r3, [r7, #5]
 803e160:	e077      	b.n	803e252 <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 803e162:	2300      	movs	r3, #0
 803e164:	71fb      	strb	r3, [r7, #7]
 803e166:	e06e      	b.n	803e246 <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 803e168:	79ba      	ldrb	r2, [r7, #6]
 803e16a:	797b      	ldrb	r3, [r7, #5]
 803e16c:	4963      	ldr	r1, [pc, #396]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e16e:	0112      	lsls	r2, r2, #4
 803e170:	4413      	add	r3, r2
 803e172:	005b      	lsls	r3, r3, #1
 803e174:	440b      	add	r3, r1
 803e176:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 803e178:	79fb      	ldrb	r3, [r7, #7]
 803e17a:	4961      	ldr	r1, [pc, #388]	; (803e300 <gos_messageDaemonTask+0x1e0>)
 803e17c:	2054      	movs	r0, #84	; 0x54
 803e17e:	fb00 f303 	mul.w	r3, r0, r3
 803e182:	440b      	add	r3, r1
 803e184:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 803e186:	429a      	cmp	r2, r3
 803e188:	d15a      	bne.n	803e240 <gos_messageDaemonTask+0x120>
                            {
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 803e18a:	79bb      	ldrb	r3, [r7, #6]
 803e18c:	4a5b      	ldr	r2, [pc, #364]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e18e:	015b      	lsls	r3, r3, #5
 803e190:	4413      	add	r3, r2
 803e192:	3318      	adds	r3, #24
 803e194:	681b      	ldr	r3, [r3, #0]
 803e196:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 803e198:	79fb      	ldrb	r3, [r7, #7]
 803e19a:	2254      	movs	r2, #84	; 0x54
 803e19c:	fb02 f303 	mul.w	r3, r2, r3
 803e1a0:	4a57      	ldr	r2, [pc, #348]	; (803e300 <gos_messageDaemonTask+0x1e0>)
 803e1a2:	4413      	add	r3, r2
 803e1a4:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 803e1a6:	79fb      	ldrb	r3, [r7, #7]
 803e1a8:	4a55      	ldr	r2, [pc, #340]	; (803e300 <gos_messageDaemonTask+0x1e0>)
 803e1aa:	2454      	movs	r4, #84	; 0x54
 803e1ac:	fb04 f303 	mul.w	r3, r4, r3
 803e1b0:	4413      	add	r3, r2
 803e1b2:	3302      	adds	r3, #2
 803e1b4:	781b      	ldrb	r3, [r3, #0]
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 803e1b6:	461a      	mov	r2, r3
 803e1b8:	f004 fdbf 	bl	8042d3a <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize  = messageArray[messageIndex].messageSize;
 803e1bc:	79fa      	ldrb	r2, [r7, #7]
 803e1be:	79bb      	ldrb	r3, [r7, #6]
 803e1c0:	494e      	ldr	r1, [pc, #312]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e1c2:	015b      	lsls	r3, r3, #5
 803e1c4:	440b      	add	r3, r1
 803e1c6:	3318      	adds	r3, #24
 803e1c8:	681b      	ldr	r3, [r3, #0]
 803e1ca:	494d      	ldr	r1, [pc, #308]	; (803e300 <gos_messageDaemonTask+0x1e0>)
 803e1cc:	2054      	movs	r0, #84	; 0x54
 803e1ce:	fb00 f202 	mul.w	r2, r0, r2
 803e1d2:	440a      	add	r2, r1
 803e1d4:	3202      	adds	r2, #2
 803e1d6:	7812      	ldrb	r2, [r2, #0]
 803e1d8:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 803e1da:	79fa      	ldrb	r2, [r7, #7]
 803e1dc:	79bb      	ldrb	r3, [r7, #6]
 803e1de:	4947      	ldr	r1, [pc, #284]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e1e0:	015b      	lsls	r3, r3, #5
 803e1e2:	440b      	add	r3, r1
 803e1e4:	3318      	adds	r3, #24
 803e1e6:	681b      	ldr	r3, [r3, #0]
 803e1e8:	4945      	ldr	r1, [pc, #276]	; (803e300 <gos_messageDaemonTask+0x1e0>)
 803e1ea:	2054      	movs	r0, #84	; 0x54
 803e1ec:	fb00 f202 	mul.w	r2, r0, r2
 803e1f0:	440a      	add	r2, r1
 803e1f2:	8812      	ldrh	r2, [r2, #0]
 803e1f4:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 803e1f6:	79bb      	ldrb	r3, [r7, #6]
 803e1f8:	4a40      	ldr	r2, [pc, #256]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e1fa:	015b      	lsls	r3, r3, #5
 803e1fc:	4413      	add	r3, r2
 803e1fe:	881b      	ldrh	r3, [r3, #0]
 803e200:	4618      	mov	r0, r3
 803e202:	f7fe f853 	bl	803c2ac <gos_taskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 803e206:	79fb      	ldrb	r3, [r7, #7]
 803e208:	4a3d      	ldr	r2, [pc, #244]	; (803e300 <gos_messageDaemonTask+0x1e0>)
 803e20a:	2154      	movs	r1, #84	; 0x54
 803e20c:	fb01 f303 	mul.w	r3, r1, r3
 803e210:	4413      	add	r3, r2
 803e212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803e216:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 803e218:	79bb      	ldrb	r3, [r7, #6]
 803e21a:	4a38      	ldr	r2, [pc, #224]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e21c:	015b      	lsls	r3, r3, #5
 803e21e:	4413      	add	r3, r2
 803e220:	f44f 7280 	mov.w	r2, #256	; 0x100
 803e224:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 803e226:	79bb      	ldrb	r3, [r7, #6]
 803e228:	4a34      	ldr	r2, [pc, #208]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e22a:	015b      	lsls	r3, r3, #5
 803e22c:	4413      	add	r3, r2
 803e22e:	331c      	adds	r3, #28
 803e230:	2236      	movs	r2, #54	; 0x36
 803e232:	701a      	strb	r2, [r3, #0]

                                messageIndex       = CFG_MESSAGE_MAX_NUMBER;
 803e234:	2308      	movs	r3, #8
 803e236:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex     = CFG_MESSAGE_MAX_WAITER_IDS;
 803e238:	2308      	movs	r3, #8
 803e23a:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 803e23c:	230a      	movs	r3, #10
 803e23e:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 803e240:	79fb      	ldrb	r3, [r7, #7]
 803e242:	3301      	adds	r3, #1
 803e244:	71fb      	strb	r3, [r7, #7]
 803e246:	79fb      	ldrb	r3, [r7, #7]
 803e248:	2b07      	cmp	r3, #7
 803e24a:	d98d      	bls.n	803e168 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 803e24c:	797b      	ldrb	r3, [r7, #5]
 803e24e:	3301      	adds	r3, #1
 803e250:	717b      	strb	r3, [r7, #5]
 803e252:	797b      	ldrb	r3, [r7, #5]
 803e254:	2b07      	cmp	r3, #7
 803e256:	d984      	bls.n	803e162 <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 803e258:	79bb      	ldrb	r3, [r7, #6]
 803e25a:	4a28      	ldr	r2, [pc, #160]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e25c:	015b      	lsls	r3, r3, #5
 803e25e:	4413      	add	r3, r2
 803e260:	331c      	adds	r3, #28
 803e262:	781b      	ldrb	r3, [r3, #0]
 803e264:	2b49      	cmp	r3, #73	; 0x49
 803e266:	d138      	bne.n	803e2da <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 803e268:	79bb      	ldrb	r3, [r7, #6]
 803e26a:	4a24      	ldr	r2, [pc, #144]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e26c:	015b      	lsls	r3, r3, #5
 803e26e:	4413      	add	r3, r2
 803e270:	3302      	adds	r3, #2
 803e272:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 803e274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803e278:	4293      	cmp	r3, r2
 803e27a:	d02e      	beq.n	803e2da <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 803e27c:	79bb      	ldrb	r3, [r7, #6]
 803e27e:	491f      	ldr	r1, [pc, #124]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e280:	015a      	lsls	r2, r3, #5
 803e282:	440a      	add	r2, r1
 803e284:	3204      	adds	r2, #4
 803e286:	8812      	ldrh	r2, [r2, #0]
 803e288:	3201      	adds	r2, #1
 803e28a:	b291      	uxth	r1, r2
 803e28c:	4a1b      	ldr	r2, [pc, #108]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e28e:	015b      	lsls	r3, r3, #5
 803e290:	4413      	add	r3, r2
 803e292:	3304      	adds	r3, #4
 803e294:	460a      	mov	r2, r1
 803e296:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 803e298:	79bb      	ldrb	r3, [r7, #6]
 803e29a:	4a18      	ldr	r2, [pc, #96]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e29c:	015b      	lsls	r3, r3, #5
 803e29e:	4413      	add	r3, r2
 803e2a0:	3304      	adds	r3, #4
 803e2a2:	881b      	ldrh	r3, [r3, #0]
 803e2a4:	461a      	mov	r2, r3
 803e2a6:	2332      	movs	r3, #50	; 0x32
 803e2a8:	fb02 f303 	mul.w	r3, r2, r3
                             messageWaiterArray[messageWaiterIndex].waitTmo)
 803e2ac:	79ba      	ldrb	r2, [r7, #6]
 803e2ae:	4913      	ldr	r1, [pc, #76]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e2b0:	0152      	lsls	r2, r2, #5
 803e2b2:	440a      	add	r2, r1
 803e2b4:	3202      	adds	r2, #2
 803e2b6:	8812      	ldrh	r2, [r2, #0]
                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 803e2b8:	4293      	cmp	r3, r2
 803e2ba:	d90e      	bls.n	803e2da <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 803e2bc:	79bb      	ldrb	r3, [r7, #6]
 803e2be:	4a0f      	ldr	r2, [pc, #60]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e2c0:	015b      	lsls	r3, r3, #5
 803e2c2:	4413      	add	r3, r2
 803e2c4:	881b      	ldrh	r3, [r3, #0]
 803e2c6:	4618      	mov	r0, r3
 803e2c8:	f7fd fff0 	bl	803c2ac <gos_taskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 803e2cc:	79bb      	ldrb	r3, [r7, #6]
 803e2ce:	4a0b      	ldr	r2, [pc, #44]	; (803e2fc <gos_messageDaemonTask+0x1dc>)
 803e2d0:	015b      	lsls	r3, r3, #5
 803e2d2:	4413      	add	r3, r2
 803e2d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 803e2d8:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 803e2da:	79bb      	ldrb	r3, [r7, #6]
 803e2dc:	3301      	adds	r3, #1
 803e2de:	71bb      	strb	r3, [r7, #6]
 803e2e0:	79bb      	ldrb	r3, [r7, #6]
 803e2e2:	2b09      	cmp	r3, #9
 803e2e4:	f67f af31 	bls.w	803e14a <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 803e2e8:	4803      	ldr	r0, [pc, #12]	; (803e2f8 <gos_messageDaemonTask+0x1d8>)
 803e2ea:	f000 f92b 	bl	803e544 <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 803e2ee:	2032      	movs	r0, #50	; 0x32
 803e2f0:	f7fd fbae 	bl	803ba50 <gos_taskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 803e2f4:	e71d      	b.n	803e132 <gos_messageDaemonTask+0x12>
 803e2f6:	bf00      	nop
 803e2f8:	200078f0 	.word	0x200078f0
 803e2fc:	200077ac 	.word	0x200077ac
 803e300:	2000750c 	.word	0x2000750c

0803e304 <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 803e304:	b480      	push	{r7}
 803e306:	b085      	sub	sp, #20
 803e308:	af00      	add	r7, sp, #0
 803e30a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 803e30c:	23ae      	movs	r3, #174	; 0xae
 803e30e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 803e310:	687b      	ldr	r3, [r7, #4]
 803e312:	2b00      	cmp	r3, #0
 803e314:	d008      	beq.n	803e328 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 803e316:	687b      	ldr	r3, [r7, #4]
 803e318:	22d2      	movs	r2, #210	; 0xd2
 803e31a:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 803e31c:	687b      	ldr	r3, [r7, #4]
 803e31e:	f44f 7280 	mov.w	r2, #256	; 0x100
 803e322:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 803e324:	2355      	movs	r3, #85	; 0x55
 803e326:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 803e328:	7bfb      	ldrb	r3, [r7, #15]
}
 803e32a:	4618      	mov	r0, r3
 803e32c:	3714      	adds	r7, #20
 803e32e:	46bd      	mov	sp, r7
 803e330:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e334:	4770      	bx	lr
	...

0803e338 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 803e338:	b580      	push	{r7, lr}
 803e33a:	b086      	sub	sp, #24
 803e33c:	af00      	add	r7, sp, #0
 803e33e:	6078      	str	r0, [r7, #4]
 803e340:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t   lockResult   = GOS_ERROR;
 803e342:	23ae      	movs	r3, #174	; 0xae
 803e344:	75fb      	strb	r3, [r7, #23]
    u32_t          sysTickStart = gos_kernelGetSysTicks();
 803e346:	f7fc f995 	bl	803a674 <gos_kernelGetSysTicks>
 803e34a:	60f8      	str	r0, [r7, #12]

#if CFG_USE_PRIO_INHERITANCE
    gos_tid_t      currentId    = GOS_INVALID_TASK_ID;
 803e34c:	f44f 7380 	mov.w	r3, #256	; 0x100
 803e350:	817b      	strh	r3, [r7, #10]
    gos_tid_t      ownerId      = GOS_INVALID_TASK_ID;
 803e352:	f44f 7380 	mov.w	r3, #256	; 0x100
 803e356:	82bb      	strh	r3, [r7, #20]
    gos_taskPrio_t ownerPrio    = GOS_TASK_IDLE_PRIO;
 803e358:	23ff      	movs	r3, #255	; 0xff
 803e35a:	727b      	strb	r3, [r7, #9]
    gos_taskPrio_t currentPrio  = GOS_TASK_IDLE_PRIO;
 803e35c:	23ff      	movs	r3, #255	; 0xff
 803e35e:	723b      	strb	r3, [r7, #8]
    bool_t         prioChanged  = GOS_FALSE;
 803e360:	2349      	movs	r3, #73	; 0x49
 803e362:	74fb      	strb	r3, [r7, #19]
#endif

    /*
     * Function code.
     */
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 803e364:	e0ce      	b.n	803e504 <gos_mutexLock+0x1cc>
    {
        GOS_ATOMIC_ENTER
 803e366:	4b73      	ldr	r3, [pc, #460]	; (803e534 <gos_mutexLock+0x1fc>)
 803e368:	781b      	ldrb	r3, [r3, #0]
 803e36a:	2b00      	cmp	r3, #0
 803e36c:	d108      	bne.n	803e380 <gos_mutexLock+0x48>
 803e36e:	b672      	cpsid	i
 803e370:	f3ef 8310 	mrs	r3, PRIMASK
 803e374:	4a70      	ldr	r2, [pc, #448]	; (803e538 <gos_mutexLock+0x200>)
 803e376:	6013      	str	r3, [r2, #0]
 803e378:	f3bf 8f4f 	dsb	sy
 803e37c:	f3bf 8f6f 	isb	sy
 803e380:	4b6c      	ldr	r3, [pc, #432]	; (803e534 <gos_mutexLock+0x1fc>)
 803e382:	781b      	ldrb	r3, [r3, #0]
 803e384:	3301      	adds	r3, #1
 803e386:	b2da      	uxtb	r2, r3
 803e388:	4b6a      	ldr	r3, [pc, #424]	; (803e534 <gos_mutexLock+0x1fc>)
 803e38a:	701a      	strb	r2, [r3, #0]
 803e38c:	4b6b      	ldr	r3, [pc, #428]	; (803e53c <gos_mutexLock+0x204>)
 803e38e:	781b      	ldrb	r3, [r3, #0]
 803e390:	3301      	adds	r3, #1
 803e392:	b2da      	uxtb	r2, r3
 803e394:	4b69      	ldr	r3, [pc, #420]	; (803e53c <gos_mutexLock+0x204>)
 803e396:	701a      	strb	r2, [r3, #0]

        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 803e398:	687b      	ldr	r3, [r7, #4]
 803e39a:	781b      	ldrb	r3, [r3, #0]
 803e39c:	2bd2      	cmp	r3, #210	; 0xd2
 803e39e:	d13b      	bne.n	803e418 <gos_mutexLock+0xe0>
        {
#if CFG_USE_PRIO_INHERITANCE
            // Restore priority if it was changed.
            if (prioChanged == GOS_TRUE)
 803e3a0:	7cfb      	ldrb	r3, [r7, #19]
 803e3a2:	2b36      	cmp	r3, #54	; 0x36
 803e3a4:	d12d      	bne.n	803e402 <gos_mutexLock+0xca>
            {
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 803e3a6:	4b66      	ldr	r3, [pc, #408]	; (803e540 <gos_mutexLock+0x208>)
 803e3a8:	781b      	ldrb	r3, [r3, #0]
 803e3aa:	2b00      	cmp	r3, #0
 803e3ac:	d105      	bne.n	803e3ba <gos_mutexLock+0x82>
 803e3ae:	4b63      	ldr	r3, [pc, #396]	; (803e53c <gos_mutexLock+0x204>)
 803e3b0:	781b      	ldrb	r3, [r3, #0]
 803e3b2:	3301      	adds	r3, #1
 803e3b4:	b2da      	uxtb	r2, r3
 803e3b6:	4b61      	ldr	r3, [pc, #388]	; (803e53c <gos_mutexLock+0x204>)
 803e3b8:	701a      	strb	r2, [r3, #0]
 803e3ba:	4b61      	ldr	r3, [pc, #388]	; (803e540 <gos_mutexLock+0x208>)
 803e3bc:	781b      	ldrb	r3, [r3, #0]
 803e3be:	3301      	adds	r3, #1
 803e3c0:	b2da      	uxtb	r2, r3
 803e3c2:	4b5f      	ldr	r3, [pc, #380]	; (803e540 <gos_mutexLock+0x208>)
 803e3c4:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(ownerId, ownerPrio);
 803e3c6:	7a7a      	ldrb	r2, [r7, #9]
 803e3c8:	8abb      	ldrh	r3, [r7, #20]
 803e3ca:	4611      	mov	r1, r2
 803e3cc:	4618      	mov	r0, r3
 803e3ce:	f7fe f97b 	bl	803c6c8 <gos_taskSetPriority>
                GOS_ISR_EXIT
 803e3d2:	4b5b      	ldr	r3, [pc, #364]	; (803e540 <gos_mutexLock+0x208>)
 803e3d4:	781b      	ldrb	r3, [r3, #0]
 803e3d6:	2b00      	cmp	r3, #0
 803e3d8:	d005      	beq.n	803e3e6 <gos_mutexLock+0xae>
 803e3da:	4b59      	ldr	r3, [pc, #356]	; (803e540 <gos_mutexLock+0x208>)
 803e3dc:	781b      	ldrb	r3, [r3, #0]
 803e3de:	3b01      	subs	r3, #1
 803e3e0:	b2da      	uxtb	r2, r3
 803e3e2:	4b57      	ldr	r3, [pc, #348]	; (803e540 <gos_mutexLock+0x208>)
 803e3e4:	701a      	strb	r2, [r3, #0]
 803e3e6:	4b56      	ldr	r3, [pc, #344]	; (803e540 <gos_mutexLock+0x208>)
 803e3e8:	781b      	ldrb	r3, [r3, #0]
 803e3ea:	2b00      	cmp	r3, #0
 803e3ec:	d109      	bne.n	803e402 <gos_mutexLock+0xca>
 803e3ee:	4b53      	ldr	r3, [pc, #332]	; (803e53c <gos_mutexLock+0x204>)
 803e3f0:	781b      	ldrb	r3, [r3, #0]
 803e3f2:	2b00      	cmp	r3, #0
 803e3f4:	d005      	beq.n	803e402 <gos_mutexLock+0xca>
 803e3f6:	4b51      	ldr	r3, [pc, #324]	; (803e53c <gos_mutexLock+0x204>)
 803e3f8:	781b      	ldrb	r3, [r3, #0]
 803e3fa:	3b01      	subs	r3, #1
 803e3fc:	b2da      	uxtb	r2, r3
 803e3fe:	4b4f      	ldr	r3, [pc, #316]	; (803e53c <gos_mutexLock+0x204>)
 803e400:	701a      	strb	r2, [r3, #0]
            else
            {
                // Priority was not changed.
            }
#endif
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 803e402:	687b      	ldr	r3, [r7, #4]
 803e404:	226b      	movs	r2, #107	; 0x6b
 803e406:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskGetCurrentId(&(pMutex->owner));
 803e408:	687b      	ldr	r3, [r7, #4]
 803e40a:	3302      	adds	r3, #2
 803e40c:	4618      	mov	r0, r3
 803e40e:	f7fe fd8f 	bl	803cf30 <gos_taskGetCurrentId>

            lockResult = GOS_SUCCESS;
 803e412:	2355      	movs	r3, #85	; 0x55
 803e414:	75fb      	strb	r3, [r7, #23]
 803e416:	e04b      	b.n	803e4b0 <gos_mutexLock+0x178>
        {
            // Mutex is locked.

#if CFG_USE_PRIO_INHERITANCE
            // Check priority.
            (void_t) gos_taskGetPriority(pMutex->owner, &ownerPrio);
 803e418:	687b      	ldr	r3, [r7, #4]
 803e41a:	885b      	ldrh	r3, [r3, #2]
 803e41c:	f107 0209 	add.w	r2, r7, #9
 803e420:	4611      	mov	r1, r2
 803e422:	4618      	mov	r0, r3
 803e424:	f7fe fad8 	bl	803c9d8 <gos_taskGetPriority>
            (void_t) gos_taskGetCurrentId(&currentId);
 803e428:	f107 030a 	add.w	r3, r7, #10
 803e42c:	4618      	mov	r0, r3
 803e42e:	f7fe fd7f 	bl	803cf30 <gos_taskGetCurrentId>
            (void_t) gos_taskGetPriority(currentId, &currentPrio);
 803e432:	897b      	ldrh	r3, [r7, #10]
 803e434:	f107 0208 	add.w	r2, r7, #8
 803e438:	4611      	mov	r1, r2
 803e43a:	4618      	mov	r0, r3
 803e43c:	f7fe facc 	bl	803c9d8 <gos_taskGetPriority>
            ownerId = pMutex->owner;
 803e440:	687b      	ldr	r3, [r7, #4]
 803e442:	885b      	ldrh	r3, [r3, #2]
 803e444:	82bb      	strh	r3, [r7, #20]

            // If the current task has a higher priority,
            // then modify the owner priority.
            if (currentPrio < ownerPrio)
 803e446:	7a3a      	ldrb	r2, [r7, #8]
 803e448:	7a7b      	ldrb	r3, [r7, #9]
 803e44a:	429a      	cmp	r2, r3
 803e44c:	d230      	bcs.n	803e4b0 <gos_mutexLock+0x178>
            {
                // Add temporary priority.
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 803e44e:	4b3c      	ldr	r3, [pc, #240]	; (803e540 <gos_mutexLock+0x208>)
 803e450:	781b      	ldrb	r3, [r3, #0]
 803e452:	2b00      	cmp	r3, #0
 803e454:	d105      	bne.n	803e462 <gos_mutexLock+0x12a>
 803e456:	4b39      	ldr	r3, [pc, #228]	; (803e53c <gos_mutexLock+0x204>)
 803e458:	781b      	ldrb	r3, [r3, #0]
 803e45a:	3301      	adds	r3, #1
 803e45c:	b2da      	uxtb	r2, r3
 803e45e:	4b37      	ldr	r3, [pc, #220]	; (803e53c <gos_mutexLock+0x204>)
 803e460:	701a      	strb	r2, [r3, #0]
 803e462:	4b37      	ldr	r3, [pc, #220]	; (803e540 <gos_mutexLock+0x208>)
 803e464:	781b      	ldrb	r3, [r3, #0]
 803e466:	3301      	adds	r3, #1
 803e468:	b2da      	uxtb	r2, r3
 803e46a:	4b35      	ldr	r3, [pc, #212]	; (803e540 <gos_mutexLock+0x208>)
 803e46c:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(pMutex->owner, currentPrio);
 803e46e:	687b      	ldr	r3, [r7, #4]
 803e470:	885b      	ldrh	r3, [r3, #2]
 803e472:	7a3a      	ldrb	r2, [r7, #8]
 803e474:	4611      	mov	r1, r2
 803e476:	4618      	mov	r0, r3
 803e478:	f7fe f926 	bl	803c6c8 <gos_taskSetPriority>
                GOS_ISR_EXIT
 803e47c:	4b30      	ldr	r3, [pc, #192]	; (803e540 <gos_mutexLock+0x208>)
 803e47e:	781b      	ldrb	r3, [r3, #0]
 803e480:	2b00      	cmp	r3, #0
 803e482:	d005      	beq.n	803e490 <gos_mutexLock+0x158>
 803e484:	4b2e      	ldr	r3, [pc, #184]	; (803e540 <gos_mutexLock+0x208>)
 803e486:	781b      	ldrb	r3, [r3, #0]
 803e488:	3b01      	subs	r3, #1
 803e48a:	b2da      	uxtb	r2, r3
 803e48c:	4b2c      	ldr	r3, [pc, #176]	; (803e540 <gos_mutexLock+0x208>)
 803e48e:	701a      	strb	r2, [r3, #0]
 803e490:	4b2b      	ldr	r3, [pc, #172]	; (803e540 <gos_mutexLock+0x208>)
 803e492:	781b      	ldrb	r3, [r3, #0]
 803e494:	2b00      	cmp	r3, #0
 803e496:	d109      	bne.n	803e4ac <gos_mutexLock+0x174>
 803e498:	4b28      	ldr	r3, [pc, #160]	; (803e53c <gos_mutexLock+0x204>)
 803e49a:	781b      	ldrb	r3, [r3, #0]
 803e49c:	2b00      	cmp	r3, #0
 803e49e:	d005      	beq.n	803e4ac <gos_mutexLock+0x174>
 803e4a0:	4b26      	ldr	r3, [pc, #152]	; (803e53c <gos_mutexLock+0x204>)
 803e4a2:	781b      	ldrb	r3, [r3, #0]
 803e4a4:	3b01      	subs	r3, #1
 803e4a6:	b2da      	uxtb	r2, r3
 803e4a8:	4b24      	ldr	r3, [pc, #144]	; (803e53c <gos_mutexLock+0x204>)
 803e4aa:	701a      	strb	r2, [r3, #0]

                prioChanged = GOS_TRUE;
 803e4ac:	2336      	movs	r3, #54	; 0x36
 803e4ae:	74fb      	strb	r3, [r7, #19]
                // There is no priority inversion.
            }
#endif
        }

        GOS_ATOMIC_EXIT
 803e4b0:	4b20      	ldr	r3, [pc, #128]	; (803e534 <gos_mutexLock+0x1fc>)
 803e4b2:	781b      	ldrb	r3, [r3, #0]
 803e4b4:	2b00      	cmp	r3, #0
 803e4b6:	d005      	beq.n	803e4c4 <gos_mutexLock+0x18c>
 803e4b8:	4b1e      	ldr	r3, [pc, #120]	; (803e534 <gos_mutexLock+0x1fc>)
 803e4ba:	781b      	ldrb	r3, [r3, #0]
 803e4bc:	3b01      	subs	r3, #1
 803e4be:	b2da      	uxtb	r2, r3
 803e4c0:	4b1c      	ldr	r3, [pc, #112]	; (803e534 <gos_mutexLock+0x1fc>)
 803e4c2:	701a      	strb	r2, [r3, #0]
 803e4c4:	4b1b      	ldr	r3, [pc, #108]	; (803e534 <gos_mutexLock+0x1fc>)
 803e4c6:	781b      	ldrb	r3, [r3, #0]
 803e4c8:	2b00      	cmp	r3, #0
 803e4ca:	d108      	bne.n	803e4de <gos_mutexLock+0x1a6>
 803e4cc:	4b1a      	ldr	r3, [pc, #104]	; (803e538 <gos_mutexLock+0x200>)
 803e4ce:	681b      	ldr	r3, [r3, #0]
 803e4d0:	f383 8810 	msr	PRIMASK, r3
 803e4d4:	b662      	cpsie	i
 803e4d6:	f3bf 8f4f 	dsb	sy
 803e4da:	f3bf 8f6f 	isb	sy
 803e4de:	4b17      	ldr	r3, [pc, #92]	; (803e53c <gos_mutexLock+0x204>)
 803e4e0:	781b      	ldrb	r3, [r3, #0]
 803e4e2:	2b00      	cmp	r3, #0
 803e4e4:	d005      	beq.n	803e4f2 <gos_mutexLock+0x1ba>
 803e4e6:	4b15      	ldr	r3, [pc, #84]	; (803e53c <gos_mutexLock+0x204>)
 803e4e8:	781b      	ldrb	r3, [r3, #0]
 803e4ea:	3b01      	subs	r3, #1
 803e4ec:	b2da      	uxtb	r2, r3
 803e4ee:	4b13      	ldr	r3, [pc, #76]	; (803e53c <gos_mutexLock+0x204>)
 803e4f0:	701a      	strb	r2, [r3, #0]

        if (lockResult == GOS_SUCCESS)
 803e4f2:	7dfb      	ldrb	r3, [r7, #23]
 803e4f4:	2b55      	cmp	r3, #85	; 0x55
 803e4f6:	d017      	beq.n	803e528 <gos_mutexLock+0x1f0>
        {
            break;
        }
        else
        {
            if (timeout > 0u)
 803e4f8:	683b      	ldr	r3, [r7, #0]
 803e4fa:	2b00      	cmp	r3, #0
 803e4fc:	d002      	beq.n	803e504 <gos_mutexLock+0x1cc>
            {
                (void_t) gos_taskSleep(MUTEX_LOCK_SLEEP_MS);
 803e4fe:	2002      	movs	r0, #2
 803e500:	f7fd faa6 	bl	803ba50 <gos_taskSleep>
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 803e504:	687b      	ldr	r3, [r7, #4]
 803e506:	2b00      	cmp	r3, #0
 803e508:	d00f      	beq.n	803e52a <gos_mutexLock+0x1f2>
 803e50a:	f7fc f8b3 	bl	803a674 <gos_kernelGetSysTicks>
 803e50e:	4602      	mov	r2, r0
 803e510:	68fb      	ldr	r3, [r7, #12]
 803e512:	1ad3      	subs	r3, r2, r3
 803e514:	683a      	ldr	r2, [r7, #0]
 803e516:	429a      	cmp	r2, r3
 803e518:	f4bf af25 	bcs.w	803e366 <gos_mutexLock+0x2e>
 803e51c:	683b      	ldr	r3, [r7, #0]
 803e51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 803e522:	f43f af20 	beq.w	803e366 <gos_mutexLock+0x2e>
 803e526:	e000      	b.n	803e52a <gos_mutexLock+0x1f2>
            break;
 803e528:	bf00      	nop
                // Zero timeout, no sleep needed.
            }
        }
    }

    return lockResult;
 803e52a:	7dfb      	ldrb	r3, [r7, #23]
}
 803e52c:	4618      	mov	r0, r3
 803e52e:	3718      	adds	r7, #24
 803e530:	46bd      	mov	sp, r7
 803e532:	bd80      	pop	{r7, pc}
 803e534:	20007447 	.word	0x20007447
 803e538:	20007448 	.word	0x20007448
 803e53c:	20007445 	.word	0x20007445
 803e540:	20007446 	.word	0x20007446

0803e544 <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
gos_result_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 803e544:	b580      	push	{r7, lr}
 803e546:	b084      	sub	sp, #16
 803e548:	af00      	add	r7, sp, #0
 803e54a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 803e54c:	23ae      	movs	r3, #174	; 0xae
 803e54e:	73fb      	strb	r3, [r7, #15]
    gos_tid_t    currentTask  = GOS_INVALID_TASK_ID;
 803e550:	f44f 7380 	mov.w	r3, #256	; 0x100
 803e554:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 803e556:	687b      	ldr	r3, [r7, #4]
 803e558:	2b00      	cmp	r3, #0
 803e55a:	d04c      	beq.n	803e5f6 <gos_mutexUnlock+0xb2>
    {
        GOS_ATOMIC_ENTER
 803e55c:	4b28      	ldr	r3, [pc, #160]	; (803e600 <gos_mutexUnlock+0xbc>)
 803e55e:	781b      	ldrb	r3, [r3, #0]
 803e560:	2b00      	cmp	r3, #0
 803e562:	d108      	bne.n	803e576 <gos_mutexUnlock+0x32>
 803e564:	b672      	cpsid	i
 803e566:	f3ef 8310 	mrs	r3, PRIMASK
 803e56a:	4a26      	ldr	r2, [pc, #152]	; (803e604 <gos_mutexUnlock+0xc0>)
 803e56c:	6013      	str	r3, [r2, #0]
 803e56e:	f3bf 8f4f 	dsb	sy
 803e572:	f3bf 8f6f 	isb	sy
 803e576:	4b22      	ldr	r3, [pc, #136]	; (803e600 <gos_mutexUnlock+0xbc>)
 803e578:	781b      	ldrb	r3, [r3, #0]
 803e57a:	3301      	adds	r3, #1
 803e57c:	b2da      	uxtb	r2, r3
 803e57e:	4b20      	ldr	r3, [pc, #128]	; (803e600 <gos_mutexUnlock+0xbc>)
 803e580:	701a      	strb	r2, [r3, #0]
 803e582:	4b21      	ldr	r3, [pc, #132]	; (803e608 <gos_mutexUnlock+0xc4>)
 803e584:	781b      	ldrb	r3, [r3, #0]
 803e586:	3301      	adds	r3, #1
 803e588:	b2da      	uxtb	r2, r3
 803e58a:	4b1f      	ldr	r3, [pc, #124]	; (803e608 <gos_mutexUnlock+0xc4>)
 803e58c:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentTask);
 803e58e:	f107 030c 	add.w	r3, r7, #12
 803e592:	4618      	mov	r0, r3
 803e594:	f7fe fccc 	bl	803cf30 <gos_taskGetCurrentId>

        if (pMutex->owner == currentTask)
 803e598:	687b      	ldr	r3, [r7, #4]
 803e59a:	885a      	ldrh	r2, [r3, #2]
 803e59c:	89bb      	ldrh	r3, [r7, #12]
 803e59e:	429a      	cmp	r2, r3
 803e5a0:	d108      	bne.n	803e5b4 <gos_mutexUnlock+0x70>
        {
            pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 803e5a2:	687b      	ldr	r3, [r7, #4]
 803e5a4:	22d2      	movs	r2, #210	; 0xd2
 803e5a6:	701a      	strb	r2, [r3, #0]
            pMutex->owner      = GOS_INVALID_TASK_ID;
 803e5a8:	687b      	ldr	r3, [r7, #4]
 803e5aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 803e5ae:	805a      	strh	r2, [r3, #2]
            unlockResult       = GOS_SUCCESS;
 803e5b0:	2355      	movs	r3, #85	; 0x55
 803e5b2:	73fb      	strb	r3, [r7, #15]
        else
        {
            // Only the owner can unlock it.
        }

        GOS_ATOMIC_EXIT
 803e5b4:	4b12      	ldr	r3, [pc, #72]	; (803e600 <gos_mutexUnlock+0xbc>)
 803e5b6:	781b      	ldrb	r3, [r3, #0]
 803e5b8:	2b00      	cmp	r3, #0
 803e5ba:	d005      	beq.n	803e5c8 <gos_mutexUnlock+0x84>
 803e5bc:	4b10      	ldr	r3, [pc, #64]	; (803e600 <gos_mutexUnlock+0xbc>)
 803e5be:	781b      	ldrb	r3, [r3, #0]
 803e5c0:	3b01      	subs	r3, #1
 803e5c2:	b2da      	uxtb	r2, r3
 803e5c4:	4b0e      	ldr	r3, [pc, #56]	; (803e600 <gos_mutexUnlock+0xbc>)
 803e5c6:	701a      	strb	r2, [r3, #0]
 803e5c8:	4b0d      	ldr	r3, [pc, #52]	; (803e600 <gos_mutexUnlock+0xbc>)
 803e5ca:	781b      	ldrb	r3, [r3, #0]
 803e5cc:	2b00      	cmp	r3, #0
 803e5ce:	d108      	bne.n	803e5e2 <gos_mutexUnlock+0x9e>
 803e5d0:	4b0c      	ldr	r3, [pc, #48]	; (803e604 <gos_mutexUnlock+0xc0>)
 803e5d2:	681b      	ldr	r3, [r3, #0]
 803e5d4:	f383 8810 	msr	PRIMASK, r3
 803e5d8:	b662      	cpsie	i
 803e5da:	f3bf 8f4f 	dsb	sy
 803e5de:	f3bf 8f6f 	isb	sy
 803e5e2:	4b09      	ldr	r3, [pc, #36]	; (803e608 <gos_mutexUnlock+0xc4>)
 803e5e4:	781b      	ldrb	r3, [r3, #0]
 803e5e6:	2b00      	cmp	r3, #0
 803e5e8:	d005      	beq.n	803e5f6 <gos_mutexUnlock+0xb2>
 803e5ea:	4b07      	ldr	r3, [pc, #28]	; (803e608 <gos_mutexUnlock+0xc4>)
 803e5ec:	781b      	ldrb	r3, [r3, #0]
 803e5ee:	3b01      	subs	r3, #1
 803e5f0:	b2da      	uxtb	r2, r3
 803e5f2:	4b05      	ldr	r3, [pc, #20]	; (803e608 <gos_mutexUnlock+0xc4>)
 803e5f4:	701a      	strb	r2, [r3, #0]
    else
    {
        // Null pointer.
    }

    return unlockResult;
 803e5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 803e5f8:	4618      	mov	r0, r3
 803e5fa:	3710      	adds	r7, #16
 803e5fc:	46bd      	mov	sp, r7
 803e5fe:	bd80      	pop	{r7, pc}
 803e600:	20007447 	.word	0x20007447
 803e604:	20007448 	.word	0x20007448
 803e608:	20007445 	.word	0x20007445

0803e60c <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 803e60c:	b580      	push	{r7, lr}
 803e60e:	b082      	sub	sp, #8
 803e610:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_SUCCESS;
 803e612:	2355      	movs	r3, #85	; 0x55
 803e614:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 803e616:	2300      	movs	r3, #0
 803e618:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 803e61a:	2300      	movs	r3, #0
 803e61c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 803e61e:	2300      	movs	r3, #0
 803e620:	71fb      	strb	r3, [r7, #7]
 803e622:	e038      	b.n	803e696 <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 803e624:	79fb      	ldrb	r3, [r7, #7]
 803e626:	4a22      	ldr	r2, [pc, #136]	; (803e6b0 <gos_queueInit+0xa4>)
 803e628:	2100      	movs	r1, #0
 803e62a:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 803e62c:	79fb      	ldrb	r3, [r7, #7]
 803e62e:	4a21      	ldr	r2, [pc, #132]	; (803e6b4 <gos_queueInit+0xa8>)
 803e630:	2100      	movs	r1, #0
 803e632:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 803e634:	79fb      	ldrb	r3, [r7, #7]
 803e636:	4a20      	ldr	r2, [pc, #128]	; (803e6b8 <gos_queueInit+0xac>)
 803e638:	f641 7184 	movw	r1, #8068	; 0x1f84
 803e63c:	fb01 f303 	mul.w	r3, r1, r3
 803e640:	4413      	add	r3, r2
 803e642:	f44f 7240 	mov.w	r2, #768	; 0x300
 803e646:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 803e648:	79fb      	ldrb	r3, [r7, #7]
 803e64a:	4a1b      	ldr	r2, [pc, #108]	; (803e6b8 <gos_queueInit+0xac>)
 803e64c:	f641 7184 	movw	r1, #8068	; 0x1f84
 803e650:	fb01 f303 	mul.w	r3, r1, r3
 803e654:	4413      	add	r3, r2
 803e656:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 803e65a:	3302      	adds	r3, #2
 803e65c:	2200      	movs	r2, #0
 803e65e:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 803e660:	2300      	movs	r3, #0
 803e662:	71bb      	strb	r3, [r7, #6]
 803e664:	e011      	b.n	803e68a <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 803e666:	79fb      	ldrb	r3, [r7, #7]
 803e668:	79ba      	ldrb	r2, [r7, #6]
 803e66a:	4913      	ldr	r1, [pc, #76]	; (803e6b8 <gos_queueInit+0xac>)
 803e66c:	20c9      	movs	r0, #201	; 0xc9
 803e66e:	fb00 f202 	mul.w	r2, r0, r2
 803e672:	f641 7084 	movw	r0, #8068	; 0x1f84
 803e676:	fb00 f303 	mul.w	r3, r0, r3
 803e67a:	4413      	add	r3, r2
 803e67c:	440b      	add	r3, r1
 803e67e:	33e2      	adds	r3, #226	; 0xe2
 803e680:	2200      	movs	r2, #0
 803e682:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 803e684:	79bb      	ldrb	r3, [r7, #6]
 803e686:	3301      	adds	r3, #1
 803e688:	71bb      	strb	r3, [r7, #6]
 803e68a:	79bb      	ldrb	r3, [r7, #6]
 803e68c:	2b27      	cmp	r3, #39	; 0x27
 803e68e:	d9ea      	bls.n	803e666 <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 803e690:	79fb      	ldrb	r3, [r7, #7]
 803e692:	3301      	adds	r3, #1
 803e694:	71fb      	strb	r3, [r7, #7]
 803e696:	79fb      	ldrb	r3, [r7, #7]
 803e698:	2b03      	cmp	r3, #3
 803e69a:	d9c3      	bls.n	803e624 <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 803e69c:	4807      	ldr	r0, [pc, #28]	; (803e6bc <gos_queueInit+0xb0>)
 803e69e:	f7ff fe31 	bl	803e304 <gos_mutexInit>
 803e6a2:	4603      	mov	r3, r0
 803e6a4:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 803e6a6:	797b      	ldrb	r3, [r7, #5]
}
 803e6a8:	4618      	mov	r0, r3
 803e6aa:	3708      	adds	r7, #8
 803e6ac:	46bd      	mov	sp, r7
 803e6ae:	bd80      	pop	{r7, pc}
 803e6b0:	2000f704 	.word	0x2000f704
 803e6b4:	2000f708 	.word	0x2000f708
 803e6b8:	200078f4 	.word	0x200078f4
 803e6bc:	2000f70c 	.word	0x2000f70c

0803e6c0 <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 803e6c0:	b580      	push	{r7, lr}
 803e6c2:	b084      	sub	sp, #16
 803e6c4:	af00      	add	r7, sp, #0
 803e6c6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 803e6c8:	23ae      	movs	r3, #174	; 0xae
 803e6ca:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 803e6cc:	2300      	movs	r3, #0
 803e6ce:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 803e6d0:	687b      	ldr	r3, [r7, #4]
 803e6d2:	2b00      	cmp	r3, #0
 803e6d4:	d048      	beq.n	803e768 <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 803e6d6:	2300      	movs	r3, #0
 803e6d8:	73bb      	strb	r3, [r7, #14]
 803e6da:	e042      	b.n	803e762 <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 803e6dc:	7bbb      	ldrb	r3, [r7, #14]
 803e6de:	4a25      	ldr	r2, [pc, #148]	; (803e774 <gos_queueCreate+0xb4>)
 803e6e0:	f641 7184 	movw	r1, #8068	; 0x1f84
 803e6e4:	fb01 f303 	mul.w	r3, r1, r3
 803e6e8:	4413      	add	r3, r2
 803e6ea:	881b      	ldrh	r3, [r3, #0]
 803e6ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803e6f0:	d134      	bne.n	803e75c <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 803e6f2:	7bbb      	ldrb	r3, [r7, #14]
 803e6f4:	b29a      	uxth	r2, r3
 803e6f6:	7bbb      	ldrb	r3, [r7, #14]
 803e6f8:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 803e6fc:	b290      	uxth	r0, r2
 803e6fe:	4a1d      	ldr	r2, [pc, #116]	; (803e774 <gos_queueCreate+0xb4>)
 803e700:	f641 7184 	movw	r1, #8068	; 0x1f84
 803e704:	fb01 f303 	mul.w	r3, r1, r3
 803e708:	4413      	add	r3, r2
 803e70a:	4602      	mov	r2, r0
 803e70c:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 803e70e:	7bbb      	ldrb	r3, [r7, #14]
 803e710:	4a18      	ldr	r2, [pc, #96]	; (803e774 <gos_queueCreate+0xb4>)
 803e712:	f641 7184 	movw	r1, #8068	; 0x1f84
 803e716:	fb01 f303 	mul.w	r3, r1, r3
 803e71a:	4413      	add	r3, r2
 803e71c:	881a      	ldrh	r2, [r3, #0]
 803e71e:	687b      	ldr	r3, [r7, #4]
 803e720:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 803e722:	687b      	ldr	r3, [r7, #4]
 803e724:	3302      	adds	r3, #2
 803e726:	2b00      	cmp	r3, #0
 803e728:	d015      	beq.n	803e756 <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 803e72a:	687b      	ldr	r3, [r7, #4]
 803e72c:	3302      	adds	r3, #2
 803e72e:	4618      	mov	r0, r3
 803e730:	f7e1 fdce 	bl	80202d0 <strlen>
 803e734:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 803e736:	2b18      	cmp	r3, #24
 803e738:	d80d      	bhi.n	803e756 <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 803e73a:	7bbb      	ldrb	r3, [r7, #14]
 803e73c:	f641 7284 	movw	r2, #8068	; 0x1f84
 803e740:	fb02 f303 	mul.w	r3, r2, r3
 803e744:	4a0b      	ldr	r2, [pc, #44]	; (803e774 <gos_queueCreate+0xb4>)
 803e746:	4413      	add	r3, r2
 803e748:	1c9a      	adds	r2, r3, #2
 803e74a:	687b      	ldr	r3, [r7, #4]
 803e74c:	3302      	adds	r3, #2
 803e74e:	4619      	mov	r1, r3
 803e750:	4610      	mov	r0, r2
 803e752:	f004 faea 	bl	8042d2a <strcpy>
                else
                {
                    // Nothing to do.
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 803e756:	2355      	movs	r3, #85	; 0x55
 803e758:	73fb      	strb	r3, [r7, #15]
                break;
 803e75a:	e005      	b.n	803e768 <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 803e75c:	7bbb      	ldrb	r3, [r7, #14]
 803e75e:	3301      	adds	r3, #1
 803e760:	73bb      	strb	r3, [r7, #14]
 803e762:	7bbb      	ldrb	r3, [r7, #14]
 803e764:	2b03      	cmp	r3, #3
 803e766:	d9b9      	bls.n	803e6dc <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 803e768:	7bfb      	ldrb	r3, [r7, #15]
}
 803e76a:	4618      	mov	r0, r3
 803e76c:	3710      	adds	r7, #16
 803e76e:	46bd      	mov	sp, r7
 803e770:	bd80      	pop	{r7, pc}
 803e772:	bf00      	nop
 803e774:	200078f4 	.word	0x200078f4

0803e778 <gos_queuePut>:
 */
gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 803e778:	b580      	push	{r7, lr}
 803e77a:	b086      	sub	sp, #24
 803e77c:	af00      	add	r7, sp, #0
 803e77e:	60b9      	str	r1, [r7, #8]
 803e780:	607b      	str	r3, [r7, #4]
 803e782:	4603      	mov	r3, r0
 803e784:	81fb      	strh	r3, [r7, #14]
 803e786:	4613      	mov	r3, r2
 803e788:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 803e78a:	23ae      	movs	r3, #174	; 0xae
 803e78c:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 803e78e:	2300      	movs	r3, #0
 803e790:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 803e792:	6879      	ldr	r1, [r7, #4]
 803e794:	485a      	ldr	r0, [pc, #360]	; (803e900 <gos_queuePut+0x188>)
 803e796:	f7ff fdcf 	bl	803e338 <gos_mutexLock>
 803e79a:	4603      	mov	r3, r0
 803e79c:	2b55      	cmp	r3, #85	; 0x55
 803e79e:	f040 80a7 	bne.w	803e8f0 <gos_queuePut+0x178>
 803e7a2:	89fb      	ldrh	r3, [r7, #14]
 803e7a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 803e7a8:	f0c0 80a2 	bcc.w	803e8f0 <gos_queuePut+0x178>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 803e7ac:	89fb      	ldrh	r3, [r7, #14]
 803e7ae:	f243 0203 	movw	r2, #12291	; 0x3003
 803e7b2:	4293      	cmp	r3, r2
 803e7b4:	f200 809c 	bhi.w	803e8f0 <gos_queuePut+0x178>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 803e7b8:	68bb      	ldr	r3, [r7, #8]
 803e7ba:	2b00      	cmp	r3, #0
 803e7bc:	f000 8098 	beq.w	803e8f0 <gos_queuePut+0x178>
        element                                          != NULL                 &&
 803e7c0:	7b7b      	ldrb	r3, [r7, #13]
 803e7c2:	2bc8      	cmp	r3, #200	; 0xc8
 803e7c4:	f200 8094 	bhi.w	803e8f0 <gos_queuePut+0x178>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 803e7c8:	89fb      	ldrh	r3, [r7, #14]
 803e7ca:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 803e7ce:	4a4d      	ldr	r2, [pc, #308]	; (803e904 <gos_queuePut+0x18c>)
 803e7d0:	f641 7184 	movw	r1, #8068	; 0x1f84
 803e7d4:	fb01 f303 	mul.w	r3, r1, r3
 803e7d8:	4413      	add	r3, r2
 803e7da:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 803e7dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803e7e0:	f000 8086 	beq.w	803e8f0 <gos_queuePut+0x178>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 803e7e4:	89fb      	ldrh	r3, [r7, #14]
 803e7e6:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 803e7e8:	7dbb      	ldrb	r3, [r7, #22]
 803e7ea:	4a47      	ldr	r2, [pc, #284]	; (803e908 <gos_queuePut+0x190>)
 803e7ec:	5cd3      	ldrb	r3, [r2, r3]
 803e7ee:	2b00      	cmp	r3, #0
 803e7f0:	d009      	beq.n	803e806 <gos_queuePut+0x8e>
 803e7f2:	7dbb      	ldrb	r3, [r7, #22]
 803e7f4:	4a45      	ldr	r2, [pc, #276]	; (803e90c <gos_queuePut+0x194>)
 803e7f6:	5cd3      	ldrb	r3, [r2, r3]
 803e7f8:	4619      	mov	r1, r3
 803e7fa:	7dbb      	ldrb	r3, [r7, #22]
 803e7fc:	4a42      	ldr	r2, [pc, #264]	; (803e908 <gos_queuePut+0x190>)
 803e7fe:	5cd3      	ldrb	r3, [r2, r3]
 803e800:	3b01      	subs	r3, #1
 803e802:	4299      	cmp	r1, r3
 803e804:	d109      	bne.n	803e81a <gos_queuePut+0xa2>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 803e806:	7dbb      	ldrb	r3, [r7, #22]
 803e808:	4a3f      	ldr	r2, [pc, #252]	; (803e908 <gos_queuePut+0x190>)
 803e80a:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 803e80c:	2b00      	cmp	r3, #0
 803e80e:	d16f      	bne.n	803e8f0 <gos_queuePut+0x178>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 803e810:	7dbb      	ldrb	r3, [r7, #22]
 803e812:	4a3e      	ldr	r2, [pc, #248]	; (803e90c <gos_queuePut+0x194>)
 803e814:	5cd3      	ldrb	r3, [r2, r3]
 803e816:	2b27      	cmp	r3, #39	; 0x27
 803e818:	d06a      	beq.n	803e8f0 <gos_queuePut+0x178>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 803e81a:	7dbb      	ldrb	r3, [r7, #22]
 803e81c:	7dba      	ldrb	r2, [r7, #22]
 803e81e:	493b      	ldr	r1, [pc, #236]	; (803e90c <gos_queuePut+0x194>)
 803e820:	5c8a      	ldrb	r2, [r1, r2]
 803e822:	4611      	mov	r1, r2
 803e824:	22c9      	movs	r2, #201	; 0xc9
 803e826:	fb01 f202 	mul.w	r2, r1, r2
 803e82a:	f641 7184 	movw	r1, #8068	; 0x1f84
 803e82e:	fb01 f303 	mul.w	r3, r1, r3
 803e832:	4413      	add	r3, r2
 803e834:	3318      	adds	r3, #24
 803e836:	4a33      	ldr	r2, [pc, #204]	; (803e904 <gos_queuePut+0x18c>)
 803e838:	4413      	add	r3, r2
 803e83a:	3302      	adds	r3, #2
            (void_t) memcpy(
 803e83c:	7b7a      	ldrb	r2, [r7, #13]
 803e83e:	68b9      	ldr	r1, [r7, #8]
 803e840:	4618      	mov	r0, r3
 803e842:	f004 fa7a 	bl	8042d3a <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 803e846:	7dbb      	ldrb	r3, [r7, #22]
 803e848:	7dba      	ldrb	r2, [r7, #22]
 803e84a:	4930      	ldr	r1, [pc, #192]	; (803e90c <gos_queuePut+0x194>)
 803e84c:	5c8a      	ldrb	r2, [r1, r2]
 803e84e:	4610      	mov	r0, r2
 803e850:	492c      	ldr	r1, [pc, #176]	; (803e904 <gos_queuePut+0x18c>)
 803e852:	22c9      	movs	r2, #201	; 0xc9
 803e854:	fb00 f202 	mul.w	r2, r0, r2
 803e858:	f641 7084 	movw	r0, #8068	; 0x1f84
 803e85c:	fb00 f303 	mul.w	r3, r0, r3
 803e860:	4413      	add	r3, r2
 803e862:	440b      	add	r3, r1
 803e864:	33e2      	adds	r3, #226	; 0xe2
 803e866:	7b7a      	ldrb	r2, [r7, #13]
 803e868:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 803e86a:	7dbb      	ldrb	r3, [r7, #22]
 803e86c:	4a27      	ldr	r2, [pc, #156]	; (803e90c <gos_queuePut+0x194>)
 803e86e:	5cd2      	ldrb	r2, [r2, r3]
 803e870:	3201      	adds	r2, #1
 803e872:	b2d1      	uxtb	r1, r2
 803e874:	4a25      	ldr	r2, [pc, #148]	; (803e90c <gos_queuePut+0x194>)
 803e876:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 803e878:	7dba      	ldrb	r2, [r7, #22]
 803e87a:	4922      	ldr	r1, [pc, #136]	; (803e904 <gos_queuePut+0x18c>)
 803e87c:	f641 7384 	movw	r3, #8068	; 0x1f84
 803e880:	fb02 f303 	mul.w	r3, r2, r3
 803e884:	440b      	add	r3, r1
 803e886:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 803e88a:	3302      	adds	r3, #2
 803e88c:	781b      	ldrb	r3, [r3, #0]
 803e88e:	3301      	adds	r3, #1
 803e890:	b2d8      	uxtb	r0, r3
 803e892:	491c      	ldr	r1, [pc, #112]	; (803e904 <gos_queuePut+0x18c>)
 803e894:	f641 7384 	movw	r3, #8068	; 0x1f84
 803e898:	fb02 f303 	mul.w	r3, r2, r3
 803e89c:	440b      	add	r3, r1
 803e89e:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 803e8a2:	3302      	adds	r3, #2
 803e8a4:	4602      	mov	r2, r0
 803e8a6:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 803e8a8:	7dbb      	ldrb	r3, [r7, #22]
 803e8aa:	4a18      	ldr	r2, [pc, #96]	; (803e90c <gos_queuePut+0x194>)
 803e8ac:	5cd3      	ldrb	r3, [r2, r3]
 803e8ae:	2b27      	cmp	r3, #39	; 0x27
 803e8b0:	d903      	bls.n	803e8ba <gos_queuePut+0x142>
            {
                writeCounters[queueIndex] = 0u;
 803e8b2:	7dbb      	ldrb	r3, [r7, #22]
 803e8b4:	4a15      	ldr	r2, [pc, #84]	; (803e90c <gos_queuePut+0x194>)
 803e8b6:	2100      	movs	r1, #0
 803e8b8:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 803e8ba:	7dbb      	ldrb	r3, [r7, #22]
 803e8bc:	4a11      	ldr	r2, [pc, #68]	; (803e904 <gos_queuePut+0x18c>)
 803e8be:	f641 7184 	movw	r1, #8068	; 0x1f84
 803e8c2:	fb01 f303 	mul.w	r3, r1, r3
 803e8c6:	4413      	add	r3, r2
 803e8c8:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 803e8cc:	3302      	adds	r3, #2
 803e8ce:	781b      	ldrb	r3, [r3, #0]
 803e8d0:	2b27      	cmp	r3, #39	; 0x27
 803e8d2:	d10b      	bne.n	803e8ec <gos_queuePut+0x174>
                queueFullHook != NULL)
 803e8d4:	4b0e      	ldr	r3, [pc, #56]	; (803e910 <gos_queuePut+0x198>)
 803e8d6:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 803e8d8:	2b00      	cmp	r3, #0
 803e8da:	d007      	beq.n	803e8ec <gos_queuePut+0x174>
            {
                gos_mutexUnlock(&queueMutex);
 803e8dc:	4808      	ldr	r0, [pc, #32]	; (803e900 <gos_queuePut+0x188>)
 803e8de:	f7ff fe31 	bl	803e544 <gos_mutexUnlock>
                queueFullHook(queueId);
 803e8e2:	4b0b      	ldr	r3, [pc, #44]	; (803e910 <gos_queuePut+0x198>)
 803e8e4:	681b      	ldr	r3, [r3, #0]
 803e8e6:	89fa      	ldrh	r2, [r7, #14]
 803e8e8:	4610      	mov	r0, r2
 803e8ea:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 803e8ec:	2355      	movs	r3, #85	; 0x55
 803e8ee:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 803e8f0:	4803      	ldr	r0, [pc, #12]	; (803e900 <gos_queuePut+0x188>)
 803e8f2:	f7ff fe27 	bl	803e544 <gos_mutexUnlock>

    return queuePutResult;
 803e8f6:	7dfb      	ldrb	r3, [r7, #23]
}
 803e8f8:	4618      	mov	r0, r3
 803e8fa:	3718      	adds	r7, #24
 803e8fc:	46bd      	mov	sp, r7
 803e8fe:	bd80      	pop	{r7, pc}
 803e900:	2000f70c 	.word	0x2000f70c
 803e904:	200078f4 	.word	0x200078f4
 803e908:	2000f704 	.word	0x2000f704
 803e90c:	2000f708 	.word	0x2000f708
 803e910:	2000f710 	.word	0x2000f710

0803e914 <gos_queueGet>:
 */
gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 803e914:	b590      	push	{r4, r7, lr}
 803e916:	b087      	sub	sp, #28
 803e918:	af00      	add	r7, sp, #0
 803e91a:	60b9      	str	r1, [r7, #8]
 803e91c:	607b      	str	r3, [r7, #4]
 803e91e:	4603      	mov	r3, r0
 803e920:	81fb      	strh	r3, [r7, #14]
 803e922:	4613      	mov	r3, r2
 803e924:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 803e926:	23ae      	movs	r3, #174	; 0xae
 803e928:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 803e92a:	2300      	movs	r3, #0
 803e92c:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 803e92e:	6879      	ldr	r1, [r7, #4]
 803e930:	4864      	ldr	r0, [pc, #400]	; (803eac4 <gos_queueGet+0x1b0>)
 803e932:	f7ff fd01 	bl	803e338 <gos_mutexLock>
 803e936:	4603      	mov	r3, r0
 803e938:	2b55      	cmp	r3, #85	; 0x55
 803e93a:	f040 80bb 	bne.w	803eab4 <gos_queueGet+0x1a0>
 803e93e:	68bb      	ldr	r3, [r7, #8]
 803e940:	2b00      	cmp	r3, #0
 803e942:	f000 80b7 	beq.w	803eab4 <gos_queueGet+0x1a0>
        target                                           != NULL                 &&
 803e946:	89fb      	ldrh	r3, [r7, #14]
 803e948:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 803e94c:	f0c0 80b2 	bcc.w	803eab4 <gos_queueGet+0x1a0>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 803e950:	89fb      	ldrh	r3, [r7, #14]
 803e952:	f243 0203 	movw	r2, #12291	; 0x3003
 803e956:	4293      	cmp	r3, r2
 803e958:	f200 80ac 	bhi.w	803eab4 <gos_queueGet+0x1a0>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 803e95c:	89fb      	ldrh	r3, [r7, #14]
 803e95e:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 803e962:	4a59      	ldr	r2, [pc, #356]	; (803eac8 <gos_queueGet+0x1b4>)
 803e964:	f641 7184 	movw	r1, #8068	; 0x1f84
 803e968:	fb01 f303 	mul.w	r3, r1, r3
 803e96c:	4413      	add	r3, r2
 803e96e:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 803e970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803e974:	f000 809e 	beq.w	803eab4 <gos_queueGet+0x1a0>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 803e978:	89fb      	ldrh	r3, [r7, #14]
 803e97a:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 803e97e:	89fa      	ldrh	r2, [r7, #14]
 803e980:	f5a2 5240 	sub.w	r2, r2, #12288	; 0x3000
 803e984:	4951      	ldr	r1, [pc, #324]	; (803eacc <gos_queueGet+0x1b8>)
 803e986:	5c8a      	ldrb	r2, [r1, r2]
 803e988:	4610      	mov	r0, r2
 803e98a:	494f      	ldr	r1, [pc, #316]	; (803eac8 <gos_queueGet+0x1b4>)
 803e98c:	22c9      	movs	r2, #201	; 0xc9
 803e98e:	fb00 f202 	mul.w	r2, r0, r2
 803e992:	f641 7084 	movw	r0, #8068	; 0x1f84
 803e996:	fb00 f303 	mul.w	r3, r0, r3
 803e99a:	4413      	add	r3, r2
 803e99c:	440b      	add	r3, r1
 803e99e:	33e2      	adds	r3, #226	; 0xe2
 803e9a0:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 803e9a2:	7b7a      	ldrb	r2, [r7, #13]
 803e9a4:	429a      	cmp	r2, r3
 803e9a6:	f0c0 8085 	bcc.w	803eab4 <gos_queueGet+0x1a0>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 803e9aa:	89fb      	ldrh	r3, [r7, #14]
 803e9ac:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 803e9ae:	7dbb      	ldrb	r3, [r7, #22]
 803e9b0:	4a46      	ldr	r2, [pc, #280]	; (803eacc <gos_queueGet+0x1b8>)
 803e9b2:	5cd2      	ldrb	r2, [r2, r3]
 803e9b4:	7dbb      	ldrb	r3, [r7, #22]
 803e9b6:	4946      	ldr	r1, [pc, #280]	; (803ead0 <gos_queueGet+0x1bc>)
 803e9b8:	5ccb      	ldrb	r3, [r1, r3]
 803e9ba:	429a      	cmp	r2, r3
 803e9bc:	d07a      	beq.n	803eab4 <gos_queueGet+0x1a0>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 803e9be:	7dbb      	ldrb	r3, [r7, #22]
 803e9c0:	7dba      	ldrb	r2, [r7, #22]
 803e9c2:	4942      	ldr	r1, [pc, #264]	; (803eacc <gos_queueGet+0x1b8>)
 803e9c4:	5c8a      	ldrb	r2, [r1, r2]
 803e9c6:	4611      	mov	r1, r2
 803e9c8:	22c9      	movs	r2, #201	; 0xc9
 803e9ca:	fb01 f202 	mul.w	r2, r1, r2
 803e9ce:	f641 7184 	movw	r1, #8068	; 0x1f84
 803e9d2:	fb01 f303 	mul.w	r3, r1, r3
 803e9d6:	4413      	add	r3, r2
 803e9d8:	3318      	adds	r3, #24
 803e9da:	4a3b      	ldr	r2, [pc, #236]	; (803eac8 <gos_queueGet+0x1b4>)
 803e9dc:	4413      	add	r3, r2
 803e9de:	1c99      	adds	r1, r3, #2
 803e9e0:	7dbb      	ldrb	r3, [r7, #22]
 803e9e2:	7dba      	ldrb	r2, [r7, #22]
 803e9e4:	4839      	ldr	r0, [pc, #228]	; (803eacc <gos_queueGet+0x1b8>)
 803e9e6:	5c82      	ldrb	r2, [r0, r2]
 803e9e8:	4614      	mov	r4, r2
 803e9ea:	4837      	ldr	r0, [pc, #220]	; (803eac8 <gos_queueGet+0x1b4>)
 803e9ec:	22c9      	movs	r2, #201	; 0xc9
 803e9ee:	fb04 f202 	mul.w	r2, r4, r2
 803e9f2:	f641 7484 	movw	r4, #8068	; 0x1f84
 803e9f6:	fb04 f303 	mul.w	r3, r4, r3
 803e9fa:	4413      	add	r3, r2
 803e9fc:	4403      	add	r3, r0
 803e9fe:	33e2      	adds	r3, #226	; 0xe2
 803ea00:	781b      	ldrb	r3, [r3, #0]
 803ea02:	461a      	mov	r2, r3
 803ea04:	68b8      	ldr	r0, [r7, #8]
 803ea06:	f004 f998 	bl	8042d3a <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 803ea0a:	7dbb      	ldrb	r3, [r7, #22]
 803ea0c:	7dba      	ldrb	r2, [r7, #22]
 803ea0e:	492f      	ldr	r1, [pc, #188]	; (803eacc <gos_queueGet+0x1b8>)
 803ea10:	5c8a      	ldrb	r2, [r1, r2]
 803ea12:	4610      	mov	r0, r2
 803ea14:	492c      	ldr	r1, [pc, #176]	; (803eac8 <gos_queueGet+0x1b4>)
 803ea16:	22c9      	movs	r2, #201	; 0xc9
 803ea18:	fb00 f202 	mul.w	r2, r0, r2
 803ea1c:	f641 7084 	movw	r0, #8068	; 0x1f84
 803ea20:	fb00 f303 	mul.w	r3, r0, r3
 803ea24:	4413      	add	r3, r2
 803ea26:	440b      	add	r3, r1
 803ea28:	33e2      	adds	r3, #226	; 0xe2
 803ea2a:	2200      	movs	r2, #0
 803ea2c:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 803ea2e:	7dbb      	ldrb	r3, [r7, #22]
 803ea30:	4a26      	ldr	r2, [pc, #152]	; (803eacc <gos_queueGet+0x1b8>)
 803ea32:	5cd2      	ldrb	r2, [r2, r3]
 803ea34:	3201      	adds	r2, #1
 803ea36:	b2d1      	uxtb	r1, r2
 803ea38:	4a24      	ldr	r2, [pc, #144]	; (803eacc <gos_queueGet+0x1b8>)
 803ea3a:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 803ea3c:	7dba      	ldrb	r2, [r7, #22]
 803ea3e:	4922      	ldr	r1, [pc, #136]	; (803eac8 <gos_queueGet+0x1b4>)
 803ea40:	f641 7384 	movw	r3, #8068	; 0x1f84
 803ea44:	fb02 f303 	mul.w	r3, r2, r3
 803ea48:	440b      	add	r3, r1
 803ea4a:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 803ea4e:	3302      	adds	r3, #2
 803ea50:	781b      	ldrb	r3, [r3, #0]
 803ea52:	3b01      	subs	r3, #1
 803ea54:	b2d8      	uxtb	r0, r3
 803ea56:	491c      	ldr	r1, [pc, #112]	; (803eac8 <gos_queueGet+0x1b4>)
 803ea58:	f641 7384 	movw	r3, #8068	; 0x1f84
 803ea5c:	fb02 f303 	mul.w	r3, r2, r3
 803ea60:	440b      	add	r3, r1
 803ea62:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 803ea66:	3302      	adds	r3, #2
 803ea68:	4602      	mov	r2, r0
 803ea6a:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 803ea6c:	7dbb      	ldrb	r3, [r7, #22]
 803ea6e:	4a17      	ldr	r2, [pc, #92]	; (803eacc <gos_queueGet+0x1b8>)
 803ea70:	5cd3      	ldrb	r3, [r2, r3]
 803ea72:	2b27      	cmp	r3, #39	; 0x27
 803ea74:	d903      	bls.n	803ea7e <gos_queueGet+0x16a>
            {
                readCounters[queueIndex] = 0u;
 803ea76:	7dbb      	ldrb	r3, [r7, #22]
 803ea78:	4a14      	ldr	r2, [pc, #80]	; (803eacc <gos_queueGet+0x1b8>)
 803ea7a:	2100      	movs	r1, #0
 803ea7c:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 803ea7e:	7dbb      	ldrb	r3, [r7, #22]
 803ea80:	4a11      	ldr	r2, [pc, #68]	; (803eac8 <gos_queueGet+0x1b4>)
 803ea82:	f641 7184 	movw	r1, #8068	; 0x1f84
 803ea86:	fb01 f303 	mul.w	r3, r1, r3
 803ea8a:	4413      	add	r3, r2
 803ea8c:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 803ea90:	3302      	adds	r3, #2
 803ea92:	781b      	ldrb	r3, [r3, #0]
 803ea94:	2b00      	cmp	r3, #0
 803ea96:	d10b      	bne.n	803eab0 <gos_queueGet+0x19c>
                queueEmptyHook != NULL)
 803ea98:	4b0e      	ldr	r3, [pc, #56]	; (803ead4 <gos_queueGet+0x1c0>)
 803ea9a:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 803ea9c:	2b00      	cmp	r3, #0
 803ea9e:	d007      	beq.n	803eab0 <gos_queueGet+0x19c>
            {
                gos_mutexUnlock(&queueMutex);
 803eaa0:	4808      	ldr	r0, [pc, #32]	; (803eac4 <gos_queueGet+0x1b0>)
 803eaa2:	f7ff fd4f 	bl	803e544 <gos_mutexUnlock>
                queueEmptyHook(queueId);
 803eaa6:	4b0b      	ldr	r3, [pc, #44]	; (803ead4 <gos_queueGet+0x1c0>)
 803eaa8:	681b      	ldr	r3, [r3, #0]
 803eaaa:	89fa      	ldrh	r2, [r7, #14]
 803eaac:	4610      	mov	r0, r2
 803eaae:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 803eab0:	2355      	movs	r3, #85	; 0x55
 803eab2:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 803eab4:	4803      	ldr	r0, [pc, #12]	; (803eac4 <gos_queueGet+0x1b0>)
 803eab6:	f7ff fd45 	bl	803e544 <gos_mutexUnlock>

    return queueGetResult;
 803eaba:	7dfb      	ldrb	r3, [r7, #23]
}
 803eabc:	4618      	mov	r0, r3
 803eabe:	371c      	adds	r7, #28
 803eac0:	46bd      	mov	sp, r7
 803eac2:	bd90      	pop	{r4, r7, pc}
 803eac4:	2000f70c 	.word	0x2000f70c
 803eac8:	200078f4 	.word	0x200078f4
 803eacc:	2000f704 	.word	0x2000f704
 803ead0:	2000f708 	.word	0x2000f708
 803ead4:	2000f714 	.word	0x2000f714

0803ead8 <gos_queueRegisterFullHook>:

/*
 * Function: gos_queueRegisterFullHook
 */
gos_result_t gos_queueRegisterFullHook (gos_queueFullHook fullHook)
{
 803ead8:	b480      	push	{r7}
 803eada:	b085      	sub	sp, #20
 803eadc:	af00      	add	r7, sp, #0
 803eade:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t queueRegisterFullHookResult = GOS_ERROR;
 803eae0:	23ae      	movs	r3, #174	; 0xae
 803eae2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (fullHook != NULL && queueFullHook == NULL)
 803eae4:	687b      	ldr	r3, [r7, #4]
 803eae6:	2b00      	cmp	r3, #0
 803eae8:	d008      	beq.n	803eafc <gos_queueRegisterFullHook+0x24>
 803eaea:	4b08      	ldr	r3, [pc, #32]	; (803eb0c <gos_queueRegisterFullHook+0x34>)
 803eaec:	681b      	ldr	r3, [r3, #0]
 803eaee:	2b00      	cmp	r3, #0
 803eaf0:	d104      	bne.n	803eafc <gos_queueRegisterFullHook+0x24>
    {
        queueFullHook               = fullHook;
 803eaf2:	4a06      	ldr	r2, [pc, #24]	; (803eb0c <gos_queueRegisterFullHook+0x34>)
 803eaf4:	687b      	ldr	r3, [r7, #4]
 803eaf6:	6013      	str	r3, [r2, #0]
        queueRegisterFullHookResult = GOS_SUCCESS;
 803eaf8:	2355      	movs	r3, #85	; 0x55
 803eafa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return queueRegisterFullHookResult;
 803eafc:	7bfb      	ldrb	r3, [r7, #15]
}
 803eafe:	4618      	mov	r0, r3
 803eb00:	3714      	adds	r7, #20
 803eb02:	46bd      	mov	sp, r7
 803eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 803eb08:	4770      	bx	lr
 803eb0a:	bf00      	nop
 803eb0c:	2000f710 	.word	0x2000f710

0803eb10 <gos_queueGetName>:

/*
 * Function: gos_queueGetName
 */
gos_result_t gos_queueGetName (gos_queueId_t queueId, gos_queueName_t queueName)
{
 803eb10:	b580      	push	{r7, lr}
 803eb12:	b084      	sub	sp, #16
 803eb14:	af00      	add	r7, sp, #0
 803eb16:	4603      	mov	r3, r0
 803eb18:	6039      	str	r1, [r7, #0]
 803eb1a:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t     queueGetNameResult = GOS_ERROR;
 803eb1c:	23ae      	movs	r3, #174	; 0xae
 803eb1e:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex         = 0u;
 803eb20:	2300      	movs	r3, #0
 803eb22:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 803eb24:	88fb      	ldrh	r3, [r7, #6]
 803eb26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 803eb2a:	d324      	bcc.n	803eb76 <gos_queueGetName+0x66>
 803eb2c:	88fb      	ldrh	r3, [r7, #6]
 803eb2e:	f243 0203 	movw	r2, #12291	; 0x3003
 803eb32:	4293      	cmp	r3, r2
 803eb34:	d81f      	bhi.n	803eb76 <gos_queueGetName+0x66>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 803eb36:	88fb      	ldrh	r3, [r7, #6]
 803eb38:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 803eb3c:	4a10      	ldr	r2, [pc, #64]	; (803eb80 <gos_queueGetName+0x70>)
 803eb3e:	f641 7184 	movw	r1, #8068	; 0x1f84
 803eb42:	fb01 f303 	mul.w	r3, r1, r3
 803eb46:	4413      	add	r3, r2
 803eb48:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 803eb4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803eb4e:	d012      	beq.n	803eb76 <gos_queueGetName+0x66>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 803eb50:	88fb      	ldrh	r3, [r7, #6]
 803eb52:	73bb      	strb	r3, [r7, #14]

        if (queueName != NULL)
 803eb54:	683b      	ldr	r3, [r7, #0]
 803eb56:	2b00      	cmp	r3, #0
 803eb58:	d00d      	beq.n	803eb76 <gos_queueGetName+0x66>
        {
            (void_t) strcpy(queueName, queues[queueIndex].queueName);
 803eb5a:	7bbb      	ldrb	r3, [r7, #14]
 803eb5c:	f641 7284 	movw	r2, #8068	; 0x1f84
 803eb60:	fb02 f303 	mul.w	r3, r2, r3
 803eb64:	4a06      	ldr	r2, [pc, #24]	; (803eb80 <gos_queueGetName+0x70>)
 803eb66:	4413      	add	r3, r2
 803eb68:	3302      	adds	r3, #2
 803eb6a:	4619      	mov	r1, r3
 803eb6c:	6838      	ldr	r0, [r7, #0]
 803eb6e:	f004 f8dc 	bl	8042d2a <strcpy>
            queueGetNameResult = GOS_SUCCESS;
 803eb72:	2355      	movs	r3, #85	; 0x55
 803eb74:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return queueGetNameResult;
 803eb76:	7bfb      	ldrb	r3, [r7, #15]
}
 803eb78:	4618      	mov	r0, r3
 803eb7a:	3710      	adds	r7, #16
 803eb7c:	46bd      	mov	sp, r7
 803eb7e:	bd80      	pop	{r7, pc}
 803eb80:	200078f4 	.word	0x200078f4

0803eb84 <gos_queueGetElementNumber>:

/*
 * Function: gos_queueGetElementNumber
 */
gos_result_t gos_queueGetElementNumber (gos_queueId_t queueId, gos_queueIndex_t* elementNumber)
{
 803eb84:	b480      	push	{r7}
 803eb86:	b085      	sub	sp, #20
 803eb88:	af00      	add	r7, sp, #0
 803eb8a:	4603      	mov	r3, r0
 803eb8c:	6039      	str	r1, [r7, #0]
 803eb8e:	80fb      	strh	r3, [r7, #6]

    /*
     * Local variables.
     */
    gos_result_t     queueGetElementNumberResult = GOS_ERROR;
 803eb90:	23ae      	movs	r3, #174	; 0xae
 803eb92:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex                  = 0u;
 803eb94:	2300      	movs	r3, #0
 803eb96:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 803eb98:	88fb      	ldrh	r3, [r7, #6]
 803eb9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 803eb9e:	d325      	bcc.n	803ebec <gos_queueGetElementNumber+0x68>
 803eba0:	88fb      	ldrh	r3, [r7, #6]
 803eba2:	f243 0203 	movw	r2, #12291	; 0x3003
 803eba6:	4293      	cmp	r3, r2
 803eba8:	d820      	bhi.n	803ebec <gos_queueGetElementNumber+0x68>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 803ebaa:	683b      	ldr	r3, [r7, #0]
 803ebac:	2b00      	cmp	r3, #0
 803ebae:	d01d      	beq.n	803ebec <gos_queueGetElementNumber+0x68>
        elementNumber                                    != NULL                 &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 803ebb0:	88fb      	ldrh	r3, [r7, #6]
 803ebb2:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 803ebb6:	4a11      	ldr	r2, [pc, #68]	; (803ebfc <gos_queueGetElementNumber+0x78>)
 803ebb8:	f641 7184 	movw	r1, #8068	; 0x1f84
 803ebbc:	fb01 f303 	mul.w	r3, r1, r3
 803ebc0:	4413      	add	r3, r2
 803ebc2:	881b      	ldrh	r3, [r3, #0]
        elementNumber                                    != NULL                 &&
 803ebc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803ebc8:	d010      	beq.n	803ebec <gos_queueGetElementNumber+0x68>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 803ebca:	88fb      	ldrh	r3, [r7, #6]
 803ebcc:	73bb      	strb	r3, [r7, #14]

        *elementNumber = queues[queueIndex].actualElementNumber;
 803ebce:	7bbb      	ldrb	r3, [r7, #14]
 803ebd0:	4a0a      	ldr	r2, [pc, #40]	; (803ebfc <gos_queueGetElementNumber+0x78>)
 803ebd2:	f641 7184 	movw	r1, #8068	; 0x1f84
 803ebd6:	fb01 f303 	mul.w	r3, r1, r3
 803ebda:	4413      	add	r3, r2
 803ebdc:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 803ebe0:	3302      	adds	r3, #2
 803ebe2:	781a      	ldrb	r2, [r3, #0]
 803ebe4:	683b      	ldr	r3, [r7, #0]
 803ebe6:	701a      	strb	r2, [r3, #0]
        queueGetElementNumberResult = GOS_SUCCESS;
 803ebe8:	2355      	movs	r3, #85	; 0x55
 803ebea:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return queueGetElementNumberResult;
 803ebec:	7bfb      	ldrb	r3, [r7, #15]
}
 803ebee:	4618      	mov	r0, r3
 803ebf0:	3714      	adds	r7, #20
 803ebf2:	46bd      	mov	sp, r7
 803ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ebf8:	4770      	bx	lr
 803ebfa:	bf00      	nop
 803ebfc:	200078f4 	.word	0x200078f4

0803ec00 <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 803ec00:	b590      	push	{r4, r7, lr}
 803ec02:	b083      	sub	sp, #12
 803ec04:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 803ec06:	2300      	movs	r3, #0
 803ec08:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 803ec0a:	4826      	ldr	r0, [pc, #152]	; (803eca4 <gos_queueDump+0xa4>)
 803ec0c:	f7fb fb42 	bl	803a294 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 803ec10:	4825      	ldr	r0, [pc, #148]	; (803eca8 <gos_queueDump+0xa8>)
 803ec12:	f7fb fb3f 	bl	803a294 <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 803ec16:	4b25      	ldr	r3, [pc, #148]	; (803ecac <gos_queueDump+0xac>)
 803ec18:	4a25      	ldr	r2, [pc, #148]	; (803ecb0 <gos_queueDump+0xb0>)
 803ec1a:	4926      	ldr	r1, [pc, #152]	; (803ecb4 <gos_queueDump+0xb4>)
 803ec1c:	4826      	ldr	r0, [pc, #152]	; (803ecb8 <gos_queueDump+0xb8>)
 803ec1e:	f7fb fb39 	bl	803a294 <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 803ec22:	4821      	ldr	r0, [pc, #132]	; (803eca8 <gos_queueDump+0xa8>)
 803ec24:	f7fb fb36 	bl	803a294 <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 803ec28:	2300      	movs	r3, #0
 803ec2a:	71fb      	strb	r3, [r7, #7]
 803ec2c:	e02d      	b.n	803ec8a <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 803ec2e:	79fb      	ldrb	r3, [r7, #7]
 803ec30:	4a22      	ldr	r2, [pc, #136]	; (803ecbc <gos_queueDump+0xbc>)
 803ec32:	f641 7184 	movw	r1, #8068	; 0x1f84
 803ec36:	fb01 f303 	mul.w	r3, r1, r3
 803ec3a:	4413      	add	r3, r2
 803ec3c:	881b      	ldrh	r3, [r3, #0]
 803ec3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 803ec42:	d026      	beq.n	803ec92 <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 803ec44:	79fb      	ldrb	r3, [r7, #7]
 803ec46:	4a1d      	ldr	r2, [pc, #116]	; (803ecbc <gos_queueDump+0xbc>)
 803ec48:	f641 7184 	movw	r1, #8068	; 0x1f84
 803ec4c:	fb01 f303 	mul.w	r3, r1, r3
 803ec50:	4413      	add	r3, r2
 803ec52:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 803ec54:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 803ec56:	79fb      	ldrb	r3, [r7, #7]
 803ec58:	f641 7284 	movw	r2, #8068	; 0x1f84
 803ec5c:	fb02 f303 	mul.w	r3, r2, r3
 803ec60:	4a16      	ldr	r2, [pc, #88]	; (803ecbc <gos_queueDump+0xbc>)
 803ec62:	4413      	add	r3, r2
 803ec64:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 803ec66:	79fb      	ldrb	r3, [r7, #7]
 803ec68:	4914      	ldr	r1, [pc, #80]	; (803ecbc <gos_queueDump+0xbc>)
 803ec6a:	f641 7084 	movw	r0, #8068	; 0x1f84
 803ec6e:	fb00 f303 	mul.w	r3, r0, r3
 803ec72:	440b      	add	r3, r1
 803ec74:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 803ec78:	3302      	adds	r3, #2
 803ec7a:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 803ec7c:	4621      	mov	r1, r4
 803ec7e:	4810      	ldr	r0, [pc, #64]	; (803ecc0 <gos_queueDump+0xc0>)
 803ec80:	f7fb fb08 	bl	803a294 <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 803ec84:	79fb      	ldrb	r3, [r7, #7]
 803ec86:	3301      	adds	r3, #1
 803ec88:	71fb      	strb	r3, [r7, #7]
 803ec8a:	79fb      	ldrb	r3, [r7, #7]
 803ec8c:	2b03      	cmp	r3, #3
 803ec8e:	d9ce      	bls.n	803ec2e <gos_queueDump+0x2e>
 803ec90:	e000      	b.n	803ec94 <gos_queueDump+0x94>
            break;
 803ec92:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 803ec94:	480b      	ldr	r0, [pc, #44]	; (803ecc4 <gos_queueDump+0xc4>)
 803ec96:	f7fb fafd 	bl	803a294 <gos_shellDriverTransmitString>
}
 803ec9a:	bf00      	nop
 803ec9c:	370c      	adds	r7, #12
 803ec9e:	46bd      	mov	sp, r7
 803eca0:	bd90      	pop	{r4, r7, pc}
 803eca2:	bf00      	nop
 803eca4:	08048624 	.word	0x08048624
 803eca8:	08048634 	.word	0x08048634
 803ecac:	08048670 	.word	0x08048670
 803ecb0:	0804867c 	.word	0x0804867c
 803ecb4:	08048684 	.word	0x08048684
 803ecb8:	08048688 	.word	0x08048688
 803ecbc:	200078f4 	.word	0x200078f4
 803ecc0:	080486a0 	.word	0x080486a0
 803ecc4:	080486bc 	.word	0x080486bc

0803ecc8 <gos_shellInit>:

/*
 * Function: gos_shellInit
 */
gos_result_t gos_shellInit (void_t)
{
 803ecc8:	b580      	push	{r7, lr}
 803ecca:	b082      	sub	sp, #8
 803eccc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            shellInitResult = GOS_ERROR;
 803ecce:	23ae      	movs	r3, #174	; 0xae
 803ecd0:	71fb      	strb	r3, [r7, #7]
    gos_shellCommandIndex_t index           = 0u;
 803ecd2:	2300      	movs	r3, #0
 803ecd4:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    useEcho = GOS_TRUE;
 803ecd6:	4b15      	ldr	r3, [pc, #84]	; (803ed2c <gos_shellInit+0x64>)
 803ecd8:	2236      	movs	r2, #54	; 0x36
 803ecda:	701a      	strb	r2, [r3, #0]

    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 803ecdc:	2300      	movs	r3, #0
 803ecde:	71bb      	strb	r3, [r7, #6]
 803ece0:	e00c      	b.n	803ecfc <gos_shellInit+0x34>
    {
        shellCommands[index].commandHandler = NULL;
 803ece2:	79ba      	ldrb	r2, [r7, #6]
 803ece4:	4912      	ldr	r1, [pc, #72]	; (803ed30 <gos_shellInit+0x68>)
 803ece6:	4613      	mov	r3, r2
 803ece8:	00db      	lsls	r3, r3, #3
 803ecea:	1a9b      	subs	r3, r3, r2
 803ecec:	009b      	lsls	r3, r3, #2
 803ecee:	440b      	add	r3, r1
 803ecf0:	3314      	adds	r3, #20
 803ecf2:	2200      	movs	r2, #0
 803ecf4:	601a      	str	r2, [r3, #0]
    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 803ecf6:	79bb      	ldrb	r3, [r7, #6]
 803ecf8:	3301      	adds	r3, #1
 803ecfa:	71bb      	strb	r3, [r7, #6]
 803ecfc:	79bb      	ldrb	r3, [r7, #6]
 803ecfe:	2b0f      	cmp	r3, #15
 803ed00:	d9ef      	bls.n	803ece2 <gos_shellInit+0x1a>
    }

    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 803ed02:	490c      	ldr	r1, [pc, #48]	; (803ed34 <gos_shellInit+0x6c>)
 803ed04:	480c      	ldr	r0, [pc, #48]	; (803ed38 <gos_shellInit+0x70>)
 803ed06:	f7fc fd11 	bl	803b72c <gos_taskRegister>
 803ed0a:	4603      	mov	r3, r0
 803ed0c:	2b55      	cmp	r3, #85	; 0x55
 803ed0e:	d107      	bne.n	803ed20 <gos_shellInit+0x58>
        gos_shellRegisterCommand(&shellCommand) == GOS_SUCCESS)
 803ed10:	480a      	ldr	r0, [pc, #40]	; (803ed3c <gos_shellInit+0x74>)
 803ed12:	f000 f851 	bl	803edb8 <gos_shellRegisterCommand>
 803ed16:	4603      	mov	r3, r0
    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 803ed18:	2b55      	cmp	r3, #85	; 0x55
 803ed1a:	d101      	bne.n	803ed20 <gos_shellInit+0x58>
    {
        shellInitResult = GOS_SUCCESS;
 803ed1c:	2355      	movs	r3, #85	; 0x55
 803ed1e:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellInitResult;
 803ed20:	79fb      	ldrb	r3, [r7, #7]
}
 803ed22:	4618      	mov	r0, r3
 803ed24:	3708      	adds	r7, #8
 803ed26:	46bd      	mov	sp, r7
 803ed28:	bd80      	pop	{r7, pc}
 803ed2a:	bf00      	nop
 803ed2c:	2000f9a6 	.word	0x2000f9a6
 803ed30:	2000f718 	.word	0x2000f718
 803ed34:	2000f8d8 	.word	0x2000f8d8
 803ed38:	200032a4 	.word	0x200032a4
 803ed3c:	20003310 	.word	0x20003310

0803ed40 <gos_shellRegisterCommands>:

/*
 * Function: gos_shellRegisterCommands
 */
gos_result_t gos_shellRegisterCommands (gos_shellCommand_t* commands, u16_t arraySize)
{
 803ed40:	b580      	push	{r7, lr}
 803ed42:	b084      	sub	sp, #16
 803ed44:	af00      	add	r7, sp, #0
 803ed46:	6078      	str	r0, [r7, #4]
 803ed48:	460b      	mov	r3, r1
 803ed4a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t registerResult   = GOS_ERROR;
 803ed4c:	23ae      	movs	r3, #174	; 0xae
 803ed4e:	73fb      	strb	r3, [r7, #15]
    u16_t        numberOfCommands = 0u;
 803ed50:	2300      	movs	r3, #0
 803ed52:	817b      	strh	r3, [r7, #10]
    u16_t        index            = 0u;
 803ed54:	2300      	movs	r3, #0
 803ed56:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (commands != NULL)
 803ed58:	687b      	ldr	r3, [r7, #4]
 803ed5a:	2b00      	cmp	r3, #0
 803ed5c:	d025      	beq.n	803edaa <gos_shellRegisterCommands+0x6a>
    {
        numberOfCommands = arraySize / sizeof(commands[0]);
 803ed5e:	887b      	ldrh	r3, [r7, #2]
 803ed60:	089b      	lsrs	r3, r3, #2
 803ed62:	4a14      	ldr	r2, [pc, #80]	; (803edb4 <gos_shellRegisterCommands+0x74>)
 803ed64:	fba2 2303 	umull	r2, r3, r2, r3
 803ed68:	817b      	strh	r3, [r7, #10]

        for (index = 0u; index < numberOfCommands; index++)
 803ed6a:	2300      	movs	r3, #0
 803ed6c:	81bb      	strh	r3, [r7, #12]
 803ed6e:	e010      	b.n	803ed92 <gos_shellRegisterCommands+0x52>
        {
            if (gos_shellRegisterCommand(&commands[index]) != GOS_SUCCESS)
 803ed70:	89ba      	ldrh	r2, [r7, #12]
 803ed72:	4613      	mov	r3, r2
 803ed74:	00db      	lsls	r3, r3, #3
 803ed76:	1a9b      	subs	r3, r3, r2
 803ed78:	009b      	lsls	r3, r3, #2
 803ed7a:	461a      	mov	r2, r3
 803ed7c:	687b      	ldr	r3, [r7, #4]
 803ed7e:	4413      	add	r3, r2
 803ed80:	4618      	mov	r0, r3
 803ed82:	f000 f819 	bl	803edb8 <gos_shellRegisterCommand>
 803ed86:	4603      	mov	r3, r0
 803ed88:	2b55      	cmp	r3, #85	; 0x55
 803ed8a:	d107      	bne.n	803ed9c <gos_shellRegisterCommands+0x5c>
        for (index = 0u; index < numberOfCommands; index++)
 803ed8c:	89bb      	ldrh	r3, [r7, #12]
 803ed8e:	3301      	adds	r3, #1
 803ed90:	81bb      	strh	r3, [r7, #12]
 803ed92:	89ba      	ldrh	r2, [r7, #12]
 803ed94:	897b      	ldrh	r3, [r7, #10]
 803ed96:	429a      	cmp	r2, r3
 803ed98:	d3ea      	bcc.n	803ed70 <gos_shellRegisterCommands+0x30>
 803ed9a:	e000      	b.n	803ed9e <gos_shellRegisterCommands+0x5e>
            {
                break;
 803ed9c:	bf00      	nop
            {
                // Nothing to do.
            }
        }

        if (index == numberOfCommands)
 803ed9e:	89ba      	ldrh	r2, [r7, #12]
 803eda0:	897b      	ldrh	r3, [r7, #10]
 803eda2:	429a      	cmp	r2, r3
 803eda4:	d101      	bne.n	803edaa <gos_shellRegisterCommands+0x6a>
        {
            registerResult = GOS_SUCCESS;
 803eda6:	2355      	movs	r3, #85	; 0x55
 803eda8:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return registerResult;
 803edaa:	7bfb      	ldrb	r3, [r7, #15]
}
 803edac:	4618      	mov	r0, r3
 803edae:	3710      	adds	r7, #16
 803edb0:	46bd      	mov	sp, r7
 803edb2:	bd80      	pop	{r7, pc}
 803edb4:	24924925 	.word	0x24924925

0803edb8 <gos_shellRegisterCommand>:

/*
 * Function: gos_shellRegisterCommand
 */
gos_result_t gos_shellRegisterCommand (gos_shellCommand_t* command)
{
 803edb8:	b580      	push	{r7, lr}
 803edba:	b084      	sub	sp, #16
 803edbc:	af00      	add	r7, sp, #0
 803edbe:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            shellRegisterCommandResult = GOS_ERROR;
 803edc0:	23ae      	movs	r3, #174	; 0xae
 803edc2:	73fb      	strb	r3, [r7, #15]
    gos_shellCommandIndex_t index                      = 0u;
 803edc4:	2300      	movs	r3, #0
 803edc6:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (command->commandHandler != NULL && command->command != NULL)
 803edc8:	687b      	ldr	r3, [r7, #4]
 803edca:	695b      	ldr	r3, [r3, #20]
 803edcc:	2b00      	cmp	r3, #0
 803edce:	d03c      	beq.n	803ee4a <gos_shellRegisterCommand+0x92>
 803edd0:	687b      	ldr	r3, [r7, #4]
 803edd2:	2b00      	cmp	r3, #0
 803edd4:	d039      	beq.n	803ee4a <gos_shellRegisterCommand+0x92>
    {
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 803edd6:	2300      	movs	r3, #0
 803edd8:	73bb      	strb	r3, [r7, #14]
 803edda:	e033      	b.n	803ee44 <gos_shellRegisterCommand+0x8c>
        {
            if (shellCommands[index].commandHandler == NULL)
 803eddc:	7bba      	ldrb	r2, [r7, #14]
 803edde:	491d      	ldr	r1, [pc, #116]	; (803ee54 <gos_shellRegisterCommand+0x9c>)
 803ede0:	4613      	mov	r3, r2
 803ede2:	00db      	lsls	r3, r3, #3
 803ede4:	1a9b      	subs	r3, r3, r2
 803ede6:	009b      	lsls	r3, r3, #2
 803ede8:	440b      	add	r3, r1
 803edea:	3314      	adds	r3, #20
 803edec:	681b      	ldr	r3, [r3, #0]
 803edee:	2b00      	cmp	r3, #0
 803edf0:	d125      	bne.n	803ee3e <gos_shellRegisterCommand+0x86>
            {
                shellCommands[index].commandHandler = command->commandHandler;
 803edf2:	7bba      	ldrb	r2, [r7, #14]
 803edf4:	687b      	ldr	r3, [r7, #4]
 803edf6:	6959      	ldr	r1, [r3, #20]
 803edf8:	4816      	ldr	r0, [pc, #88]	; (803ee54 <gos_shellRegisterCommand+0x9c>)
 803edfa:	4613      	mov	r3, r2
 803edfc:	00db      	lsls	r3, r3, #3
 803edfe:	1a9b      	subs	r3, r3, r2
 803ee00:	009b      	lsls	r3, r3, #2
 803ee02:	4403      	add	r3, r0
 803ee04:	3314      	adds	r3, #20
 803ee06:	6019      	str	r1, [r3, #0]
                shellCommands[index].commandHandlerPrivileges = command->commandHandlerPrivileges;
 803ee08:	7bba      	ldrb	r2, [r7, #14]
 803ee0a:	687b      	ldr	r3, [r7, #4]
 803ee0c:	8b18      	ldrh	r0, [r3, #24]
 803ee0e:	4911      	ldr	r1, [pc, #68]	; (803ee54 <gos_shellRegisterCommand+0x9c>)
 803ee10:	4613      	mov	r3, r2
 803ee12:	00db      	lsls	r3, r3, #3
 803ee14:	1a9b      	subs	r3, r3, r2
 803ee16:	009b      	lsls	r3, r3, #2
 803ee18:	440b      	add	r3, r1
 803ee1a:	3318      	adds	r3, #24
 803ee1c:	4602      	mov	r2, r0
 803ee1e:	801a      	strh	r2, [r3, #0]
                (void_t) strcpy(shellCommands[index].command, command->command);
 803ee20:	7bba      	ldrb	r2, [r7, #14]
 803ee22:	4613      	mov	r3, r2
 803ee24:	00db      	lsls	r3, r3, #3
 803ee26:	1a9b      	subs	r3, r3, r2
 803ee28:	009b      	lsls	r3, r3, #2
 803ee2a:	4a0a      	ldr	r2, [pc, #40]	; (803ee54 <gos_shellRegisterCommand+0x9c>)
 803ee2c:	4413      	add	r3, r2
 803ee2e:	687a      	ldr	r2, [r7, #4]
 803ee30:	4611      	mov	r1, r2
 803ee32:	4618      	mov	r0, r3
 803ee34:	f003 ff79 	bl	8042d2a <strcpy>
                shellRegisterCommandResult = GOS_SUCCESS;
 803ee38:	2355      	movs	r3, #85	; 0x55
 803ee3a:	73fb      	strb	r3, [r7, #15]
                break;
 803ee3c:	e005      	b.n	803ee4a <gos_shellRegisterCommand+0x92>
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 803ee3e:	7bbb      	ldrb	r3, [r7, #14]
 803ee40:	3301      	adds	r3, #1
 803ee42:	73bb      	strb	r3, [r7, #14]
 803ee44:	7bbb      	ldrb	r3, [r7, #14]
 803ee46:	2b0f      	cmp	r3, #15
 803ee48:	d9c8      	bls.n	803eddc <gos_shellRegisterCommand+0x24>
            {
                // Nothing to do.
            }
        }
    }
    return shellRegisterCommandResult;
 803ee4a:	7bfb      	ldrb	r3, [r7, #15]
}
 803ee4c:	4618      	mov	r0, r3
 803ee4e:	3710      	adds	r7, #16
 803ee50:	46bd      	mov	sp, r7
 803ee52:	bd80      	pop	{r7, pc}
 803ee54:	2000f718 	.word	0x2000f718

0803ee58 <gos_shellSuspend>:

/*
 * Function: gos_shellSuspend
 */
gos_result_t gos_shellSuspend (void_t)
{
 803ee58:	b580      	push	{r7, lr}
 803ee5a:	b082      	sub	sp, #8
 803ee5c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellSuspendResult = GOS_ERROR;
 803ee5e:	23ae      	movs	r3, #174	; 0xae
 803ee60:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellSuspendResult = gos_taskSuspend(shellDaemonTaskId);
 803ee62:	4b06      	ldr	r3, [pc, #24]	; (803ee7c <gos_shellSuspend+0x24>)
 803ee64:	881b      	ldrh	r3, [r3, #0]
 803ee66:	4618      	mov	r0, r3
 803ee68:	f7fc ff3e 	bl	803bce8 <gos_taskSuspend>
 803ee6c:	4603      	mov	r3, r0
 803ee6e:	71fb      	strb	r3, [r7, #7]

    return shellSuspendResult;
 803ee70:	79fb      	ldrb	r3, [r7, #7]
}
 803ee72:	4618      	mov	r0, r3
 803ee74:	3708      	adds	r7, #8
 803ee76:	46bd      	mov	sp, r7
 803ee78:	bd80      	pop	{r7, pc}
 803ee7a:	bf00      	nop
 803ee7c:	2000f8d8 	.word	0x2000f8d8

0803ee80 <gos_shellResume>:

/*
 * Function: gos_shellResume
 */
gos_result_t gos_shellResume (void_t)
{
 803ee80:	b580      	push	{r7, lr}
 803ee82:	b082      	sub	sp, #8
 803ee84:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellResumeResult = GOS_ERROR;
 803ee86:	23ae      	movs	r3, #174	; 0xae
 803ee88:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellResumeResult = gos_taskResume(shellDaemonTaskId);
 803ee8a:	4b06      	ldr	r3, [pc, #24]	; (803eea4 <gos_shellResume+0x24>)
 803ee8c:	881b      	ldrh	r3, [r3, #0]
 803ee8e:	4618      	mov	r0, r3
 803ee90:	f7fd f84c 	bl	803bf2c <gos_taskResume>
 803ee94:	4603      	mov	r3, r0
 803ee96:	71fb      	strb	r3, [r7, #7]

    return shellResumeResult;
 803ee98:	79fb      	ldrb	r3, [r7, #7]
}
 803ee9a:	4618      	mov	r0, r3
 803ee9c:	3708      	adds	r7, #8
 803ee9e:	46bd      	mov	sp, r7
 803eea0:	bd80      	pop	{r7, pc}
 803eea2:	bf00      	nop
 803eea4:	2000f8d8 	.word	0x2000f8d8

0803eea8 <gos_shellEchoOn>:

/*
 * Function: gos_shellEchoOn
 */
gos_result_t gos_shellEchoOn (void_t)
{
 803eea8:	b480      	push	{r7}
 803eeaa:	b083      	sub	sp, #12
 803eeac:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellEchoOnResult = GOS_SUCCESS;
 803eeae:	2355      	movs	r3, #85	; 0x55
 803eeb0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    useEcho = GOS_TRUE;
 803eeb2:	4b05      	ldr	r3, [pc, #20]	; (803eec8 <gos_shellEchoOn+0x20>)
 803eeb4:	2236      	movs	r2, #54	; 0x36
 803eeb6:	701a      	strb	r2, [r3, #0]

    return shellEchoOnResult;
 803eeb8:	79fb      	ldrb	r3, [r7, #7]
}
 803eeba:	4618      	mov	r0, r3
 803eebc:	370c      	adds	r7, #12
 803eebe:	46bd      	mov	sp, r7
 803eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803eec4:	4770      	bx	lr
 803eec6:	bf00      	nop
 803eec8:	2000f9a6 	.word	0x2000f9a6

0803eecc <gos_shellEchoOff>:

/*
 * Function: gos_shellEchoOff
 */
gos_result_t gos_shellEchoOff (void_t)
{
 803eecc:	b480      	push	{r7}
 803eece:	b083      	sub	sp, #12
 803eed0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellEchoOffResult = GOS_SUCCESS;
 803eed2:	2355      	movs	r3, #85	; 0x55
 803eed4:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    useEcho = GOS_FALSE;
 803eed6:	4b05      	ldr	r3, [pc, #20]	; (803eeec <gos_shellEchoOff+0x20>)
 803eed8:	2249      	movs	r2, #73	; 0x49
 803eeda:	701a      	strb	r2, [r3, #0]

    return shellEchoOffResult;
 803eedc:	79fb      	ldrb	r3, [r7, #7]
}
 803eede:	4618      	mov	r0, r3
 803eee0:	370c      	adds	r7, #12
 803eee2:	46bd      	mov	sp, r7
 803eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803eee8:	4770      	bx	lr
 803eeea:	bf00      	nop
 803eeec:	2000f9a6 	.word	0x2000f9a6

0803eef0 <gos_shellDaemonTask>:
 *          a string.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellDaemonTask (void_t)
{
 803eef0:	b580      	push	{r7, lr}
 803eef2:	b082      	sub	sp, #8
 803eef4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_shellCommandIndex_t index              = 0u;
 803eef6:	2300      	movs	r3, #0
 803eef8:	71fb      	strb	r3, [r7, #7]
    u16_t                   actualCommandIndex = 0u;
 803eefa:	2300      	movs	r3, #0
 803eefc:	80bb      	strh	r3, [r7, #4]
    u16_t                   paramIndex         = 0u;
 803eefe:	2300      	movs	r3, #0
 803ef00:	807b      	strh	r3, [r7, #2]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString(GOS_SHELL_DISPLAY_TEXT);
 803ef02:	4873      	ldr	r0, [pc, #460]	; (803f0d0 <gos_shellDaemonTask+0x1e0>)
 803ef04:	f7fb f9c6 	bl	803a294 <gos_shellDriverTransmitString>

    for (;;)
    {
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 803ef08:	4b72      	ldr	r3, [pc, #456]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803ef0a:	881b      	ldrh	r3, [r3, #0]
 803ef0c:	461a      	mov	r2, r3
 803ef0e:	4b72      	ldr	r3, [pc, #456]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803ef10:	4413      	add	r3, r2
 803ef12:	4618      	mov	r0, r3
 803ef14:	f7fb f9a6 	bl	803a264 <gos_shellDriverReceiveChar>
 803ef18:	4603      	mov	r3, r0
 803ef1a:	2b55      	cmp	r3, #85	; 0x55
 803ef1c:	f040 80d3 	bne.w	803f0c6 <gos_shellDaemonTask+0x1d6>
        {
            if (useEcho == GOS_TRUE)
 803ef20:	4b6e      	ldr	r3, [pc, #440]	; (803f0dc <gos_shellDaemonTask+0x1ec>)
 803ef22:	781b      	ldrb	r3, [r3, #0]
 803ef24:	2b36      	cmp	r3, #54	; 0x36
 803ef26:	d107      	bne.n	803ef38 <gos_shellDaemonTask+0x48>
            {
                (void_t) gos_shellDriverTransmitString(&commandBuffer[commandBufferIndex]);
 803ef28:	4b6a      	ldr	r3, [pc, #424]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803ef2a:	881b      	ldrh	r3, [r3, #0]
 803ef2c:	461a      	mov	r2, r3
 803ef2e:	4b6a      	ldr	r3, [pc, #424]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803ef30:	4413      	add	r3, r2
 803ef32:	4618      	mov	r0, r3
 803ef34:	f7fb f9ae 	bl	803a294 <gos_shellDriverTransmitString>
            }

            /*
             * Backspace character check
             */
            if (commandBuffer[commandBufferIndex] == '\177')
 803ef38:	4b66      	ldr	r3, [pc, #408]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803ef3a:	881b      	ldrh	r3, [r3, #0]
 803ef3c:	461a      	mov	r2, r3
 803ef3e:	4b66      	ldr	r3, [pc, #408]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803ef40:	5c9b      	ldrb	r3, [r3, r2]
 803ef42:	2b7f      	cmp	r3, #127	; 0x7f
 803ef44:	d10c      	bne.n	803ef60 <gos_shellDaemonTask+0x70>
            {
                commandBuffer[commandBufferIndex] = '\0';
 803ef46:	4b63      	ldr	r3, [pc, #396]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803ef48:	881b      	ldrh	r3, [r3, #0]
 803ef4a:	461a      	mov	r2, r3
 803ef4c:	4b62      	ldr	r3, [pc, #392]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803ef4e:	2100      	movs	r1, #0
 803ef50:	5499      	strb	r1, [r3, r2]
                commandBufferIndex--;
 803ef52:	4b60      	ldr	r3, [pc, #384]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803ef54:	881b      	ldrh	r3, [r3, #0]
 803ef56:	3b01      	subs	r3, #1
 803ef58:	b29a      	uxth	r2, r3
 803ef5a:	4b5e      	ldr	r3, [pc, #376]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803ef5c:	801a      	strh	r2, [r3, #0]
 803ef5e:	e0b2      	b.n	803f0c6 <gos_shellDaemonTask+0x1d6>
            }
            /*
             * Enter character check
             */
            else if (commandBuffer[commandBufferIndex] == '\r')
 803ef60:	4b5c      	ldr	r3, [pc, #368]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803ef62:	881b      	ldrh	r3, [r3, #0]
 803ef64:	461a      	mov	r2, r3
 803ef66:	4b5c      	ldr	r3, [pc, #368]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803ef68:	5c9b      	ldrb	r3, [r3, r2]
 803ef6a:	2b0d      	cmp	r3, #13
 803ef6c:	f040 8099 	bne.w	803f0a2 <gos_shellDaemonTask+0x1b2>
            {
                if (useEcho == GOS_TRUE)
 803ef70:	4b5a      	ldr	r3, [pc, #360]	; (803f0dc <gos_shellDaemonTask+0x1ec>)
 803ef72:	781b      	ldrb	r3, [r3, #0]
 803ef74:	2b36      	cmp	r3, #54	; 0x36
 803ef76:	d102      	bne.n	803ef7e <gos_shellDaemonTask+0x8e>
                {
                    (void_t) gos_shellDriverTransmitString("\n");
 803ef78:	4859      	ldr	r0, [pc, #356]	; (803f0e0 <gos_shellDaemonTask+0x1f0>)
 803ef7a:	f7fb f98b 	bl	803a294 <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                commandBuffer[commandBufferIndex] = '\0';
 803ef7e:	4b55      	ldr	r3, [pc, #340]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803ef80:	881b      	ldrh	r3, [r3, #0]
 803ef82:	461a      	mov	r2, r3
 803ef84:	4b54      	ldr	r3, [pc, #336]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803ef86:	2100      	movs	r1, #0
 803ef88:	5499      	strb	r1, [r3, r2]
                actualCommandIndex = 0u;
 803ef8a:	2300      	movs	r3, #0
 803ef8c:	80bb      	strh	r3, [r7, #4]
                paramIndex = 0u;
 803ef8e:	2300      	movs	r3, #0
 803ef90:	807b      	strh	r3, [r7, #2]

                // Get command.
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 803ef92:	e008      	b.n	803efa6 <gos_shellDaemonTask+0xb6>
                {
                    actualCommand[actualCommandIndex] = commandBuffer[actualCommandIndex];
 803ef94:	88ba      	ldrh	r2, [r7, #4]
 803ef96:	88bb      	ldrh	r3, [r7, #4]
 803ef98:	494f      	ldr	r1, [pc, #316]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803ef9a:	5c89      	ldrb	r1, [r1, r2]
 803ef9c:	4a51      	ldr	r2, [pc, #324]	; (803f0e4 <gos_shellDaemonTask+0x1f4>)
 803ef9e:	54d1      	strb	r1, [r2, r3]
                    actualCommandIndex++;
 803efa0:	88bb      	ldrh	r3, [r7, #4]
 803efa2:	3301      	adds	r3, #1
 803efa4:	80bb      	strh	r3, [r7, #4]
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 803efa6:	88bb      	ldrh	r3, [r7, #4]
 803efa8:	4a4b      	ldr	r2, [pc, #300]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803efaa:	5cd3      	ldrb	r3, [r2, r3]
 803efac:	2b20      	cmp	r3, #32
 803efae:	d004      	beq.n	803efba <gos_shellDaemonTask+0xca>
 803efb0:	88bb      	ldrh	r3, [r7, #4]
 803efb2:	4a49      	ldr	r2, [pc, #292]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803efb4:	5cd3      	ldrb	r3, [r2, r3]
 803efb6:	2b00      	cmp	r3, #0
 803efb8:	d1ec      	bne.n	803ef94 <gos_shellDaemonTask+0xa4>
                }
                actualCommand[actualCommandIndex] = '\0';
 803efba:	88bb      	ldrh	r3, [r7, #4]
 803efbc:	4a49      	ldr	r2, [pc, #292]	; (803f0e4 <gos_shellDaemonTask+0x1f4>)
 803efbe:	2100      	movs	r1, #0
 803efc0:	54d1      	strb	r1, [r2, r3]
                actualCommandIndex++;
 803efc2:	88bb      	ldrh	r3, [r7, #4]
 803efc4:	3301      	adds	r3, #1
 803efc6:	80bb      	strh	r3, [r7, #4]

                // Get parameters.
                while (commandBuffer[actualCommandIndex] != '\0')
 803efc8:	e00b      	b.n	803efe2 <gos_shellDaemonTask+0xf2>
                {
                    commandParams[paramIndex++] = commandBuffer[actualCommandIndex++];
 803efca:	88bb      	ldrh	r3, [r7, #4]
 803efcc:	1c5a      	adds	r2, r3, #1
 803efce:	80ba      	strh	r2, [r7, #4]
 803efd0:	4619      	mov	r1, r3
 803efd2:	887b      	ldrh	r3, [r7, #2]
 803efd4:	1c5a      	adds	r2, r3, #1
 803efd6:	807a      	strh	r2, [r7, #2]
 803efd8:	461a      	mov	r2, r3
 803efda:	4b3f      	ldr	r3, [pc, #252]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803efdc:	5c59      	ldrb	r1, [r3, r1]
 803efde:	4b42      	ldr	r3, [pc, #264]	; (803f0e8 <gos_shellDaemonTask+0x1f8>)
 803efe0:	5499      	strb	r1, [r3, r2]
                while (commandBuffer[actualCommandIndex] != '\0')
 803efe2:	88bb      	ldrh	r3, [r7, #4]
 803efe4:	4a3c      	ldr	r2, [pc, #240]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803efe6:	5cd3      	ldrb	r3, [r2, r3]
 803efe8:	2b00      	cmp	r3, #0
 803efea:	d1ee      	bne.n	803efca <gos_shellDaemonTask+0xda>
                }
                commandParams[paramIndex] = '\0';
 803efec:	887b      	ldrh	r3, [r7, #2]
 803efee:	4a3e      	ldr	r2, [pc, #248]	; (803f0e8 <gos_shellDaemonTask+0x1f8>)
 803eff0:	2100      	movs	r1, #0
 803eff2:	54d1      	strb	r1, [r2, r3]

                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 803eff4:	2300      	movs	r3, #0
 803eff6:	71fb      	strb	r3, [r7, #7]
 803eff8:	e03c      	b.n	803f074 <gos_shellDaemonTask+0x184>
                {
                    if (strcmp(shellCommands[index].command, actualCommand) == 0)
 803effa:	79fa      	ldrb	r2, [r7, #7]
 803effc:	4613      	mov	r3, r2
 803effe:	00db      	lsls	r3, r3, #3
 803f000:	1a9b      	subs	r3, r3, r2
 803f002:	009b      	lsls	r3, r3, #2
 803f004:	4a39      	ldr	r2, [pc, #228]	; (803f0ec <gos_shellDaemonTask+0x1fc>)
 803f006:	4413      	add	r3, r2
 803f008:	4936      	ldr	r1, [pc, #216]	; (803f0e4 <gos_shellDaemonTask+0x1f4>)
 803f00a:	4618      	mov	r0, r3
 803f00c:	f7e1 f900 	bl	8020210 <strcmp>
 803f010:	4603      	mov	r3, r0
 803f012:	2b00      	cmp	r3, #0
 803f014:	d12b      	bne.n	803f06e <gos_shellDaemonTask+0x17e>
                    {
                        if (shellCommands[index].commandHandler != NULL)
 803f016:	79fa      	ldrb	r2, [r7, #7]
 803f018:	4934      	ldr	r1, [pc, #208]	; (803f0ec <gos_shellDaemonTask+0x1fc>)
 803f01a:	4613      	mov	r3, r2
 803f01c:	00db      	lsls	r3, r3, #3
 803f01e:	1a9b      	subs	r3, r3, r2
 803f020:	009b      	lsls	r3, r3, #2
 803f022:	440b      	add	r3, r1
 803f024:	3314      	adds	r3, #20
 803f026:	681b      	ldr	r3, [r3, #0]
 803f028:	2b00      	cmp	r3, #0
 803f02a:	d027      	beq.n	803f07c <gos_shellDaemonTask+0x18c>
                        {
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, shellCommands[index].commandHandlerPrivileges);
 803f02c:	4b30      	ldr	r3, [pc, #192]	; (803f0f0 <gos_shellDaemonTask+0x200>)
 803f02e:	8818      	ldrh	r0, [r3, #0]
 803f030:	79fa      	ldrb	r2, [r7, #7]
 803f032:	492e      	ldr	r1, [pc, #184]	; (803f0ec <gos_shellDaemonTask+0x1fc>)
 803f034:	4613      	mov	r3, r2
 803f036:	00db      	lsls	r3, r3, #3
 803f038:	1a9b      	subs	r3, r3, r2
 803f03a:	009b      	lsls	r3, r3, #2
 803f03c:	440b      	add	r3, r1
 803f03e:	3318      	adds	r3, #24
 803f040:	881b      	ldrh	r3, [r3, #0]
 803f042:	4619      	mov	r1, r3
 803f044:	f7fd fe2e 	bl	803cca4 <gos_taskSetPrivileges>
                            shellCommands[index].commandHandler(commandParams);
 803f048:	79fa      	ldrb	r2, [r7, #7]
 803f04a:	4928      	ldr	r1, [pc, #160]	; (803f0ec <gos_shellDaemonTask+0x1fc>)
 803f04c:	4613      	mov	r3, r2
 803f04e:	00db      	lsls	r3, r3, #3
 803f050:	1a9b      	subs	r3, r3, r2
 803f052:	009b      	lsls	r3, r3, #2
 803f054:	440b      	add	r3, r1
 803f056:	3314      	adds	r3, #20
 803f058:	681b      	ldr	r3, [r3, #0]
 803f05a:	4823      	ldr	r0, [pc, #140]	; (803f0e8 <gos_shellDaemonTask+0x1f8>)
 803f05c:	4798      	blx	r3
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, GOS_TASK_PRIVILEGE_KERNEL);
 803f05e:	4b24      	ldr	r3, [pc, #144]	; (803f0f0 <gos_shellDaemonTask+0x200>)
 803f060:	881b      	ldrh	r3, [r3, #0]
 803f062:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 803f066:	4618      	mov	r0, r3
 803f068:	f7fd fe1c 	bl	803cca4 <gos_taskSetPrivileges>
                        }
                        else
                        {
                            // Nothing to do.
                        }
                        break;
 803f06c:	e006      	b.n	803f07c <gos_shellDaemonTask+0x18c>
                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 803f06e:	79fb      	ldrb	r3, [r7, #7]
 803f070:	3301      	adds	r3, #1
 803f072:	71fb      	strb	r3, [r7, #7]
 803f074:	79fb      	ldrb	r3, [r7, #7]
 803f076:	2b0f      	cmp	r3, #15
 803f078:	d9bf      	bls.n	803effa <gos_shellDaemonTask+0x10a>
 803f07a:	e000      	b.n	803f07e <gos_shellDaemonTask+0x18e>
                        break;
 803f07c:	bf00      	nop
                        // Nothing to do.
                    }
                }

                // If command not found.
                if (index == CFG_SHELL_MAX_COMMAND_NUMBER)
 803f07e:	79fb      	ldrb	r3, [r7, #7]
 803f080:	2b10      	cmp	r3, #16
 803f082:	d102      	bne.n	803f08a <gos_shellDaemonTask+0x19a>
                {
                    (void_t) gos_shellDriverTransmitString("Unrecognized command!\r\n");
 803f084:	481b      	ldr	r0, [pc, #108]	; (803f0f4 <gos_shellDaemonTask+0x204>)
 803f086:	f7fb f905 	bl	803a294 <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 803f08a:	22c8      	movs	r2, #200	; 0xc8
 803f08c:	2100      	movs	r1, #0
 803f08e:	4812      	ldr	r0, [pc, #72]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803f090:	f003 fdba 	bl	8042c08 <memset>
                commandBufferIndex = 0u;
 803f094:	4b0f      	ldr	r3, [pc, #60]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803f096:	2200      	movs	r2, #0
 803f098:	801a      	strh	r2, [r3, #0]

                (void_t) gos_shellDriverTransmitString(GOS_SHELL_DISPLAY_TEXT);
 803f09a:	480d      	ldr	r0, [pc, #52]	; (803f0d0 <gos_shellDaemonTask+0x1e0>)
 803f09c:	f7fb f8fa 	bl	803a294 <gos_shellDriverTransmitString>
 803f0a0:	e011      	b.n	803f0c6 <gos_shellDaemonTask+0x1d6>
            }
            else
            {
                commandBufferIndex++;
 803f0a2:	4b0c      	ldr	r3, [pc, #48]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803f0a4:	881b      	ldrh	r3, [r3, #0]
 803f0a6:	3301      	adds	r3, #1
 803f0a8:	b29a      	uxth	r2, r3
 803f0aa:	4b0a      	ldr	r3, [pc, #40]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803f0ac:	801a      	strh	r2, [r3, #0]

                if (commandBufferIndex >= CFG_SHELL_COMMAND_BUFFER_SIZE)
 803f0ae:	4b09      	ldr	r3, [pc, #36]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803f0b0:	881b      	ldrh	r3, [r3, #0]
 803f0b2:	2bc7      	cmp	r3, #199	; 0xc7
 803f0b4:	d907      	bls.n	803f0c6 <gos_shellDaemonTask+0x1d6>
                {
                    (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 803f0b6:	22c8      	movs	r2, #200	; 0xc8
 803f0b8:	2100      	movs	r1, #0
 803f0ba:	4807      	ldr	r0, [pc, #28]	; (803f0d8 <gos_shellDaemonTask+0x1e8>)
 803f0bc:	f003 fda4 	bl	8042c08 <memset>
                    commandBufferIndex = 0u;
 803f0c0:	4b04      	ldr	r3, [pc, #16]	; (803f0d4 <gos_shellDaemonTask+0x1e4>)
 803f0c2:	2200      	movs	r2, #0
 803f0c4:	801a      	strh	r2, [r3, #0]
                {
                    // Nothing to do.
                }
            }
        }
        (void_t) gos_taskSleep(GOS_SHELL_DAEMON_POLL_TIME_MS);
 803f0c6:	2032      	movs	r0, #50	; 0x32
 803f0c8:	f7fc fcc2 	bl	803ba50 <gos_taskSleep>
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 803f0cc:	e71c      	b.n	803ef08 <gos_shellDaemonTask+0x18>
 803f0ce:	bf00      	nop
 803f0d0:	080486fc 	.word	0x080486fc
 803f0d4:	2000f9a4 	.word	0x2000f9a4
 803f0d8:	2000f8dc 	.word	0x2000f8dc
 803f0dc:	2000f9a6 	.word	0x2000f9a6
 803f0e0:	08048718 	.word	0x08048718
 803f0e4:	2000f9a8 	.word	0x2000f9a8
 803f0e8:	2000f9bc 	.word	0x2000f9bc
 803f0ec:	2000f718 	.word	0x2000f718
 803f0f0:	2000f8d8 	.word	0x2000f8d8
 803f0f4:	0804871c 	.word	0x0804871c

0803f0f8 <gos_shellCommandHandler>:
 * @details Handles the built-in shell command.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellCommandHandler (char_t* params)
{
 803f0f8:	b590      	push	{r4, r7, lr}
 803f0fa:	b089      	sub	sp, #36	; 0x24
 803f0fc:	af02      	add	r7, sp, #8
 803f0fe:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u8_t                    index        = 0u;
 803f100:	2300      	movs	r3, #0
 803f102:	75fb      	strb	r3, [r7, #23]
    gos_shellCommandIndex_t commandIndex = 0u;
 803f104:	2300      	movs	r3, #0
 803f106:	75bb      	strb	r3, [r7, #22]
    gos_tid_t               taskId       = GOS_INVALID_TASK_ID;
 803f108:	f44f 7380 	mov.w	r3, #256	; 0x100
 803f10c:	82bb      	strh	r3, [r7, #20]
    gos_runtime_t           totalRunTime = {0};
 803f10e:	f107 0308 	add.w	r3, r7, #8
 803f112:	2200      	movs	r2, #0
 803f114:	601a      	str	r2, [r3, #0]
 803f116:	605a      	str	r2, [r3, #4]
 803f118:	721a      	strb	r2, [r3, #8]

    /*
     * Function code.
     */
    if (strcmp(params, "dump") == 0)
 803f11a:	499f      	ldr	r1, [pc, #636]	; (803f398 <gos_shellCommandHandler+0x2a0>)
 803f11c:	6878      	ldr	r0, [r7, #4]
 803f11e:	f7e1 f877 	bl	8020210 <strcmp>
 803f122:	4603      	mov	r3, r0
 803f124:	2b00      	cmp	r3, #0
 803f126:	d102      	bne.n	803f12e <gos_shellCommandHandler+0x36>
    {
        gos_Dump();
 803f128:	f7fe f934 	bl	803d394 <gos_Dump>
        else
        {
            // Nothing to do.
        }
    }
}
 803f12c:	e22d      	b.n	803f58a <gos_shellCommandHandler+0x492>
    else if (strcmp(params, "reset") == 0)
 803f12e:	499b      	ldr	r1, [pc, #620]	; (803f39c <gos_shellCommandHandler+0x2a4>)
 803f130:	6878      	ldr	r0, [r7, #4]
 803f132:	f7e1 f86d 	bl	8020210 <strcmp>
 803f136:	4603      	mov	r3, r0
 803f138:	2b00      	cmp	r3, #0
 803f13a:	d102      	bne.n	803f142 <gos_shellCommandHandler+0x4a>
        gos_kernelReset();
 803f13c:	f7fb fab8 	bl	803a6b0 <gos_kernelReset>
}
 803f140:	e223      	b.n	803f58a <gos_shellCommandHandler+0x492>
    else if (strcmp(params, "help") == 0)
 803f142:	4997      	ldr	r1, [pc, #604]	; (803f3a0 <gos_shellCommandHandler+0x2a8>)
 803f144:	6878      	ldr	r0, [r7, #4]
 803f146:	f7e1 f863 	bl	8020210 <strcmp>
 803f14a:	4603      	mov	r3, r0
 803f14c:	2b00      	cmp	r3, #0
 803f14e:	d137      	bne.n	803f1c0 <gos_shellCommandHandler+0xc8>
        (void_t) gos_shellDriverTransmitString("List of registered shell commands: \r\n");
 803f150:	4894      	ldr	r0, [pc, #592]	; (803f3a4 <gos_shellCommandHandler+0x2ac>)
 803f152:	f7fb f89f 	bl	803a294 <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 803f156:	2300      	movs	r3, #0
 803f158:	75bb      	strb	r3, [r7, #22]
 803f15a:	e02a      	b.n	803f1b2 <gos_shellCommandHandler+0xba>
            if (strcmp(shellCommands[commandIndex].command, "") == 0)
 803f15c:	7dba      	ldrb	r2, [r7, #22]
 803f15e:	4613      	mov	r3, r2
 803f160:	00db      	lsls	r3, r3, #3
 803f162:	1a9b      	subs	r3, r3, r2
 803f164:	009b      	lsls	r3, r3, #2
 803f166:	4a90      	ldr	r2, [pc, #576]	; (803f3a8 <gos_shellCommandHandler+0x2b0>)
 803f168:	4413      	add	r3, r2
 803f16a:	781b      	ldrb	r3, [r3, #0]
 803f16c:	2b00      	cmp	r3, #0
 803f16e:	f000 820b 	beq.w	803f588 <gos_shellCommandHandler+0x490>
            else if (strcmp(shellCommands[commandIndex].command, "shell") == 0)
 803f172:	7dba      	ldrb	r2, [r7, #22]
 803f174:	4613      	mov	r3, r2
 803f176:	00db      	lsls	r3, r3, #3
 803f178:	1a9b      	subs	r3, r3, r2
 803f17a:	009b      	lsls	r3, r3, #2
 803f17c:	4a8a      	ldr	r2, [pc, #552]	; (803f3a8 <gos_shellCommandHandler+0x2b0>)
 803f17e:	4413      	add	r3, r2
 803f180:	498a      	ldr	r1, [pc, #552]	; (803f3ac <gos_shellCommandHandler+0x2b4>)
 803f182:	4618      	mov	r0, r3
 803f184:	f7e1 f844 	bl	8020210 <strcmp>
 803f188:	4603      	mov	r3, r0
 803f18a:	2b00      	cmp	r3, #0
 803f18c:	d103      	bne.n	803f196 <gos_shellCommandHandler+0x9e>
                (void_t) gos_shellDriverTransmitString("\t"
 803f18e:	4888      	ldr	r0, [pc, #544]	; (803f3b0 <gos_shellCommandHandler+0x2b8>)
 803f190:	f7fb f880 	bl	803a294 <gos_shellDriverTransmitString>
 803f194:	e00a      	b.n	803f1ac <gos_shellCommandHandler+0xb4>
                (void_t) gos_shellDriverTransmitString("\t- %s\r\n", shellCommands[commandIndex].command);
 803f196:	7dba      	ldrb	r2, [r7, #22]
 803f198:	4613      	mov	r3, r2
 803f19a:	00db      	lsls	r3, r3, #3
 803f19c:	1a9b      	subs	r3, r3, r2
 803f19e:	009b      	lsls	r3, r3, #2
 803f1a0:	4a81      	ldr	r2, [pc, #516]	; (803f3a8 <gos_shellCommandHandler+0x2b0>)
 803f1a2:	4413      	add	r3, r2
 803f1a4:	4619      	mov	r1, r3
 803f1a6:	4883      	ldr	r0, [pc, #524]	; (803f3b4 <gos_shellCommandHandler+0x2bc>)
 803f1a8:	f7fb f874 	bl	803a294 <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 803f1ac:	7dbb      	ldrb	r3, [r7, #22]
 803f1ae:	3301      	adds	r3, #1
 803f1b0:	75bb      	strb	r3, [r7, #22]
 803f1b2:	7dbb      	ldrb	r3, [r7, #22]
 803f1b4:	2b0f      	cmp	r3, #15
 803f1b6:	d9d1      	bls.n	803f15c <gos_shellCommandHandler+0x64>
}
 803f1b8:	e1e7      	b.n	803f58a <gos_shellCommandHandler+0x492>
            index++;
 803f1ba:	7dfb      	ldrb	r3, [r7, #23]
 803f1bc:	3301      	adds	r3, #1
 803f1be:	75fb      	strb	r3, [r7, #23]
        while (params[index] != ' ' && params[index])
 803f1c0:	7dfb      	ldrb	r3, [r7, #23]
 803f1c2:	687a      	ldr	r2, [r7, #4]
 803f1c4:	4413      	add	r3, r2
 803f1c6:	781b      	ldrb	r3, [r3, #0]
 803f1c8:	2b20      	cmp	r3, #32
 803f1ca:	d005      	beq.n	803f1d8 <gos_shellCommandHandler+0xe0>
 803f1cc:	7dfb      	ldrb	r3, [r7, #23]
 803f1ce:	687a      	ldr	r2, [r7, #4]
 803f1d0:	4413      	add	r3, r2
 803f1d2:	781b      	ldrb	r3, [r3, #0]
 803f1d4:	2b00      	cmp	r3, #0
 803f1d6:	d1f0      	bne.n	803f1ba <gos_shellCommandHandler+0xc2>
        params[index] = '\0';
 803f1d8:	7dfb      	ldrb	r3, [r7, #23]
 803f1da:	687a      	ldr	r2, [r7, #4]
 803f1dc:	4413      	add	r3, r2
 803f1de:	2200      	movs	r2, #0
 803f1e0:	701a      	strb	r2, [r3, #0]
        if (strcmp(params, "delete_tid") == 0)
 803f1e2:	4975      	ldr	r1, [pc, #468]	; (803f3b8 <gos_shellCommandHandler+0x2c0>)
 803f1e4:	6878      	ldr	r0, [r7, #4]
 803f1e6:	f7e1 f813 	bl	8020210 <strcmp>
 803f1ea:	4603      	mov	r3, r0
 803f1ec:	2b00      	cmp	r3, #0
 803f1ee:	d120      	bne.n	803f232 <gos_shellCommandHandler+0x13a>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 803f1f0:	7dfb      	ldrb	r3, [r7, #23]
 803f1f2:	3301      	adds	r3, #1
 803f1f4:	75fb      	strb	r3, [r7, #23]
 803f1f6:	7dfb      	ldrb	r3, [r7, #23]
 803f1f8:	687a      	ldr	r2, [r7, #4]
 803f1fa:	4413      	add	r3, r2
 803f1fc:	2210      	movs	r2, #16
 803f1fe:	2100      	movs	r1, #0
 803f200:	4618      	mov	r0, r3
 803f202:	f002 ff4b 	bl	804209c <strtol>
 803f206:	4603      	mov	r3, r0
 803f208:	b29b      	uxth	r3, r3
 803f20a:	82bb      	strh	r3, [r7, #20]
            if (gos_taskDelete(taskId) == GOS_SUCCESS)
 803f20c:	8abb      	ldrh	r3, [r7, #20]
 803f20e:	4618      	mov	r0, r3
 803f210:	f7fd f936 	bl	803c480 <gos_taskDelete>
 803f214:	4603      	mov	r3, r0
 803f216:	2b55      	cmp	r3, #85	; 0x55
 803f218:	d105      	bne.n	803f226 <gos_shellCommandHandler+0x12e>
                (void_t) gos_shellDriverTransmitString("0x%X task has been deleted.\r\n", taskId);
 803f21a:	8abb      	ldrh	r3, [r7, #20]
 803f21c:	4619      	mov	r1, r3
 803f21e:	4867      	ldr	r0, [pc, #412]	; (803f3bc <gos_shellCommandHandler+0x2c4>)
 803f220:	f7fb f838 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f224:	e1b1      	b.n	803f58a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be deleted.\r\n", taskId);
 803f226:	8abb      	ldrh	r3, [r7, #20]
 803f228:	4619      	mov	r1, r3
 803f22a:	4865      	ldr	r0, [pc, #404]	; (803f3c0 <gos_shellCommandHandler+0x2c8>)
 803f22c:	f7fb f832 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f230:	e1ab      	b.n	803f58a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "delete") == 0)
 803f232:	4964      	ldr	r1, [pc, #400]	; (803f3c4 <gos_shellCommandHandler+0x2cc>)
 803f234:	6878      	ldr	r0, [r7, #4]
 803f236:	f7e0 ffeb 	bl	8020210 <strcmp>
 803f23a:	4603      	mov	r3, r0
 803f23c:	2b00      	cmp	r3, #0
 803f23e:	d129      	bne.n	803f294 <gos_shellCommandHandler+0x19c>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 803f240:	7dfb      	ldrb	r3, [r7, #23]
 803f242:	3301      	adds	r3, #1
 803f244:	75fb      	strb	r3, [r7, #23]
 803f246:	7dfb      	ldrb	r3, [r7, #23]
 803f248:	687a      	ldr	r2, [r7, #4]
 803f24a:	4413      	add	r3, r2
 803f24c:	f107 0214 	add.w	r2, r7, #20
 803f250:	4611      	mov	r1, r2
 803f252:	4618      	mov	r0, r3
 803f254:	f7fd fe34 	bl	803cec0 <gos_taskGetId>
 803f258:	4603      	mov	r3, r0
 803f25a:	2b55      	cmp	r3, #85	; 0x55
 803f25c:	d116      	bne.n	803f28c <gos_shellCommandHandler+0x194>
                if (gos_taskDelete(taskId) == GOS_SUCCESS)
 803f25e:	8abb      	ldrh	r3, [r7, #20]
 803f260:	4618      	mov	r0, r3
 803f262:	f7fd f90d 	bl	803c480 <gos_taskDelete>
 803f266:	4603      	mov	r3, r0
 803f268:	2b55      	cmp	r3, #85	; 0x55
 803f26a:	d107      	bne.n	803f27c <gos_shellCommandHandler+0x184>
                    (void_t) gos_shellDriverTransmitString("%s has been deleted.\r\n", &params[index]);
 803f26c:	7dfb      	ldrb	r3, [r7, #23]
 803f26e:	687a      	ldr	r2, [r7, #4]
 803f270:	4413      	add	r3, r2
 803f272:	4619      	mov	r1, r3
 803f274:	4854      	ldr	r0, [pc, #336]	; (803f3c8 <gos_shellCommandHandler+0x2d0>)
 803f276:	f7fb f80d 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f27a:	e186      	b.n	803f58a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be deleted.\r\n", &params[index]);
 803f27c:	7dfb      	ldrb	r3, [r7, #23]
 803f27e:	687a      	ldr	r2, [r7, #4]
 803f280:	4413      	add	r3, r2
 803f282:	4619      	mov	r1, r3
 803f284:	4851      	ldr	r0, [pc, #324]	; (803f3cc <gos_shellCommandHandler+0x2d4>)
 803f286:	f7fb f805 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f28a:	e17e      	b.n	803f58a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 803f28c:	4850      	ldr	r0, [pc, #320]	; (803f3d0 <gos_shellCommandHandler+0x2d8>)
 803f28e:	f7fb f801 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f292:	e17a      	b.n	803f58a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "suspend_tid") == 0)
 803f294:	494f      	ldr	r1, [pc, #316]	; (803f3d4 <gos_shellCommandHandler+0x2dc>)
 803f296:	6878      	ldr	r0, [r7, #4]
 803f298:	f7e0 ffba 	bl	8020210 <strcmp>
 803f29c:	4603      	mov	r3, r0
 803f29e:	2b00      	cmp	r3, #0
 803f2a0:	d120      	bne.n	803f2e4 <gos_shellCommandHandler+0x1ec>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 803f2a2:	7dfb      	ldrb	r3, [r7, #23]
 803f2a4:	3301      	adds	r3, #1
 803f2a6:	75fb      	strb	r3, [r7, #23]
 803f2a8:	7dfb      	ldrb	r3, [r7, #23]
 803f2aa:	687a      	ldr	r2, [r7, #4]
 803f2ac:	4413      	add	r3, r2
 803f2ae:	2210      	movs	r2, #16
 803f2b0:	2100      	movs	r1, #0
 803f2b2:	4618      	mov	r0, r3
 803f2b4:	f002 fef2 	bl	804209c <strtol>
 803f2b8:	4603      	mov	r3, r0
 803f2ba:	b29b      	uxth	r3, r3
 803f2bc:	82bb      	strh	r3, [r7, #20]
            if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 803f2be:	8abb      	ldrh	r3, [r7, #20]
 803f2c0:	4618      	mov	r0, r3
 803f2c2:	f7fc fd11 	bl	803bce8 <gos_taskSuspend>
 803f2c6:	4603      	mov	r3, r0
 803f2c8:	2b55      	cmp	r3, #85	; 0x55
 803f2ca:	d105      	bne.n	803f2d8 <gos_shellCommandHandler+0x1e0>
                (void_t) gos_shellDriverTransmitString("0x%X task has been suspended.\r\n", taskId);
 803f2cc:	8abb      	ldrh	r3, [r7, #20]
 803f2ce:	4619      	mov	r1, r3
 803f2d0:	4841      	ldr	r0, [pc, #260]	; (803f3d8 <gos_shellCommandHandler+0x2e0>)
 803f2d2:	f7fa ffdf 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f2d6:	e158      	b.n	803f58a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be suspended.\r\n", taskId);
 803f2d8:	8abb      	ldrh	r3, [r7, #20]
 803f2da:	4619      	mov	r1, r3
 803f2dc:	483f      	ldr	r0, [pc, #252]	; (803f3dc <gos_shellCommandHandler+0x2e4>)
 803f2de:	f7fa ffd9 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f2e2:	e152      	b.n	803f58a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "suspend") == 0)
 803f2e4:	493e      	ldr	r1, [pc, #248]	; (803f3e0 <gos_shellCommandHandler+0x2e8>)
 803f2e6:	6878      	ldr	r0, [r7, #4]
 803f2e8:	f7e0 ff92 	bl	8020210 <strcmp>
 803f2ec:	4603      	mov	r3, r0
 803f2ee:	2b00      	cmp	r3, #0
 803f2f0:	d129      	bne.n	803f346 <gos_shellCommandHandler+0x24e>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 803f2f2:	7dfb      	ldrb	r3, [r7, #23]
 803f2f4:	3301      	adds	r3, #1
 803f2f6:	75fb      	strb	r3, [r7, #23]
 803f2f8:	7dfb      	ldrb	r3, [r7, #23]
 803f2fa:	687a      	ldr	r2, [r7, #4]
 803f2fc:	4413      	add	r3, r2
 803f2fe:	f107 0214 	add.w	r2, r7, #20
 803f302:	4611      	mov	r1, r2
 803f304:	4618      	mov	r0, r3
 803f306:	f7fd fddb 	bl	803cec0 <gos_taskGetId>
 803f30a:	4603      	mov	r3, r0
 803f30c:	2b55      	cmp	r3, #85	; 0x55
 803f30e:	d116      	bne.n	803f33e <gos_shellCommandHandler+0x246>
                if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 803f310:	8abb      	ldrh	r3, [r7, #20]
 803f312:	4618      	mov	r0, r3
 803f314:	f7fc fce8 	bl	803bce8 <gos_taskSuspend>
 803f318:	4603      	mov	r3, r0
 803f31a:	2b55      	cmp	r3, #85	; 0x55
 803f31c:	d107      	bne.n	803f32e <gos_shellCommandHandler+0x236>
                    (void_t) gos_shellDriverTransmitString("%s has been suspended.\r\n", &params[index]);
 803f31e:	7dfb      	ldrb	r3, [r7, #23]
 803f320:	687a      	ldr	r2, [r7, #4]
 803f322:	4413      	add	r3, r2
 803f324:	4619      	mov	r1, r3
 803f326:	482f      	ldr	r0, [pc, #188]	; (803f3e4 <gos_shellCommandHandler+0x2ec>)
 803f328:	f7fa ffb4 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f32c:	e12d      	b.n	803f58a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be suspended.\r\n", &params[index]);
 803f32e:	7dfb      	ldrb	r3, [r7, #23]
 803f330:	687a      	ldr	r2, [r7, #4]
 803f332:	4413      	add	r3, r2
 803f334:	4619      	mov	r1, r3
 803f336:	482c      	ldr	r0, [pc, #176]	; (803f3e8 <gos_shellCommandHandler+0x2f0>)
 803f338:	f7fa ffac 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f33c:	e125      	b.n	803f58a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 803f33e:	4824      	ldr	r0, [pc, #144]	; (803f3d0 <gos_shellCommandHandler+0x2d8>)
 803f340:	f7fa ffa8 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f344:	e121      	b.n	803f58a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "resume_tid") == 0)
 803f346:	4929      	ldr	r1, [pc, #164]	; (803f3ec <gos_shellCommandHandler+0x2f4>)
 803f348:	6878      	ldr	r0, [r7, #4]
 803f34a:	f7e0 ff61 	bl	8020210 <strcmp>
 803f34e:	4603      	mov	r3, r0
 803f350:	2b00      	cmp	r3, #0
 803f352:	d151      	bne.n	803f3f8 <gos_shellCommandHandler+0x300>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 803f354:	7dfb      	ldrb	r3, [r7, #23]
 803f356:	3301      	adds	r3, #1
 803f358:	75fb      	strb	r3, [r7, #23]
 803f35a:	7dfb      	ldrb	r3, [r7, #23]
 803f35c:	687a      	ldr	r2, [r7, #4]
 803f35e:	4413      	add	r3, r2
 803f360:	2210      	movs	r2, #16
 803f362:	2100      	movs	r1, #0
 803f364:	4618      	mov	r0, r3
 803f366:	f002 fe99 	bl	804209c <strtol>
 803f36a:	4603      	mov	r3, r0
 803f36c:	b29b      	uxth	r3, r3
 803f36e:	82bb      	strh	r3, [r7, #20]
            if (gos_taskResume(taskId) == GOS_SUCCESS)
 803f370:	8abb      	ldrh	r3, [r7, #20]
 803f372:	4618      	mov	r0, r3
 803f374:	f7fc fdda 	bl	803bf2c <gos_taskResume>
 803f378:	4603      	mov	r3, r0
 803f37a:	2b55      	cmp	r3, #85	; 0x55
 803f37c:	d105      	bne.n	803f38a <gos_shellCommandHandler+0x292>
                (void_t) gos_shellDriverTransmitString("0x%X task has been resumed.\r\n", taskId);
 803f37e:	8abb      	ldrh	r3, [r7, #20]
 803f380:	4619      	mov	r1, r3
 803f382:	481b      	ldr	r0, [pc, #108]	; (803f3f0 <gos_shellCommandHandler+0x2f8>)
 803f384:	f7fa ff86 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f388:	e0ff      	b.n	803f58a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be resumed.\r\n", taskId);
 803f38a:	8abb      	ldrh	r3, [r7, #20]
 803f38c:	4619      	mov	r1, r3
 803f38e:	4819      	ldr	r0, [pc, #100]	; (803f3f4 <gos_shellCommandHandler+0x2fc>)
 803f390:	f7fa ff80 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f394:	e0f9      	b.n	803f58a <gos_shellCommandHandler+0x492>
 803f396:	bf00      	nop
 803f398:	08048734 	.word	0x08048734
 803f39c:	0804873c 	.word	0x0804873c
 803f3a0:	08048744 	.word	0x08048744
 803f3a4:	0804874c 	.word	0x0804874c
 803f3a8:	2000f718 	.word	0x2000f718
 803f3ac:	08048774 	.word	0x08048774
 803f3b0:	0804877c 	.word	0x0804877c
 803f3b4:	08048828 	.word	0x08048828
 803f3b8:	08048830 	.word	0x08048830
 803f3bc:	0804883c 	.word	0x0804883c
 803f3c0:	0804885c 	.word	0x0804885c
 803f3c4:	08048880 	.word	0x08048880
 803f3c8:	08048888 	.word	0x08048888
 803f3cc:	080488a0 	.word	0x080488a0
 803f3d0:	080488bc 	.word	0x080488bc
 803f3d4:	080488d8 	.word	0x080488d8
 803f3d8:	080488e4 	.word	0x080488e4
 803f3dc:	08048904 	.word	0x08048904
 803f3e0:	08048928 	.word	0x08048928
 803f3e4:	08048930 	.word	0x08048930
 803f3e8:	0804894c 	.word	0x0804894c
 803f3ec:	0804896c 	.word	0x0804896c
 803f3f0:	08048978 	.word	0x08048978
 803f3f4:	08048998 	.word	0x08048998
        else if (strcmp(params, "resume") == 0)
 803f3f8:	4966      	ldr	r1, [pc, #408]	; (803f594 <gos_shellCommandHandler+0x49c>)
 803f3fa:	6878      	ldr	r0, [r7, #4]
 803f3fc:	f7e0 ff08 	bl	8020210 <strcmp>
 803f400:	4603      	mov	r3, r0
 803f402:	2b00      	cmp	r3, #0
 803f404:	d129      	bne.n	803f45a <gos_shellCommandHandler+0x362>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 803f406:	7dfb      	ldrb	r3, [r7, #23]
 803f408:	3301      	adds	r3, #1
 803f40a:	75fb      	strb	r3, [r7, #23]
 803f40c:	7dfb      	ldrb	r3, [r7, #23]
 803f40e:	687a      	ldr	r2, [r7, #4]
 803f410:	4413      	add	r3, r2
 803f412:	f107 0214 	add.w	r2, r7, #20
 803f416:	4611      	mov	r1, r2
 803f418:	4618      	mov	r0, r3
 803f41a:	f7fd fd51 	bl	803cec0 <gos_taskGetId>
 803f41e:	4603      	mov	r3, r0
 803f420:	2b55      	cmp	r3, #85	; 0x55
 803f422:	d116      	bne.n	803f452 <gos_shellCommandHandler+0x35a>
                if (gos_taskResume(taskId) == GOS_SUCCESS)
 803f424:	8abb      	ldrh	r3, [r7, #20]
 803f426:	4618      	mov	r0, r3
 803f428:	f7fc fd80 	bl	803bf2c <gos_taskResume>
 803f42c:	4603      	mov	r3, r0
 803f42e:	2b55      	cmp	r3, #85	; 0x55
 803f430:	d107      	bne.n	803f442 <gos_shellCommandHandler+0x34a>
                    (void_t) gos_shellDriverTransmitString("%s has been resumed.\r\n", &params[index]);
 803f432:	7dfb      	ldrb	r3, [r7, #23]
 803f434:	687a      	ldr	r2, [r7, #4]
 803f436:	4413      	add	r3, r2
 803f438:	4619      	mov	r1, r3
 803f43a:	4857      	ldr	r0, [pc, #348]	; (803f598 <gos_shellCommandHandler+0x4a0>)
 803f43c:	f7fa ff2a 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f440:	e0a3      	b.n	803f58a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be resumed.\r\n", &params[index]);
 803f442:	7dfb      	ldrb	r3, [r7, #23]
 803f444:	687a      	ldr	r2, [r7, #4]
 803f446:	4413      	add	r3, r2
 803f448:	4619      	mov	r1, r3
 803f44a:	4854      	ldr	r0, [pc, #336]	; (803f59c <gos_shellCommandHandler+0x4a4>)
 803f44c:	f7fa ff22 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f450:	e09b      	b.n	803f58a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 803f452:	4853      	ldr	r0, [pc, #332]	; (803f5a0 <gos_shellCommandHandler+0x4a8>)
 803f454:	f7fa ff1e 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f458:	e097      	b.n	803f58a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "unblock_tid") == 0)
 803f45a:	4952      	ldr	r1, [pc, #328]	; (803f5a4 <gos_shellCommandHandler+0x4ac>)
 803f45c:	6878      	ldr	r0, [r7, #4]
 803f45e:	f7e0 fed7 	bl	8020210 <strcmp>
 803f462:	4603      	mov	r3, r0
 803f464:	2b00      	cmp	r3, #0
 803f466:	d120      	bne.n	803f4aa <gos_shellCommandHandler+0x3b2>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 803f468:	7dfb      	ldrb	r3, [r7, #23]
 803f46a:	3301      	adds	r3, #1
 803f46c:	75fb      	strb	r3, [r7, #23]
 803f46e:	7dfb      	ldrb	r3, [r7, #23]
 803f470:	687a      	ldr	r2, [r7, #4]
 803f472:	4413      	add	r3, r2
 803f474:	2210      	movs	r2, #16
 803f476:	2100      	movs	r1, #0
 803f478:	4618      	mov	r0, r3
 803f47a:	f002 fe0f 	bl	804209c <strtol>
 803f47e:	4603      	mov	r3, r0
 803f480:	b29b      	uxth	r3, r3
 803f482:	82bb      	strh	r3, [r7, #20]
            if (gos_taskUnblock(taskId) == GOS_SUCCESS)
 803f484:	8abb      	ldrh	r3, [r7, #20]
 803f486:	4618      	mov	r0, r3
 803f488:	f7fc ff10 	bl	803c2ac <gos_taskUnblock>
 803f48c:	4603      	mov	r3, r0
 803f48e:	2b55      	cmp	r3, #85	; 0x55
 803f490:	d105      	bne.n	803f49e <gos_shellCommandHandler+0x3a6>
                (void_t) gos_shellDriverTransmitString("0x%X task has been unblocked.\r\n", taskId);
 803f492:	8abb      	ldrh	r3, [r7, #20]
 803f494:	4619      	mov	r1, r3
 803f496:	4844      	ldr	r0, [pc, #272]	; (803f5a8 <gos_shellCommandHandler+0x4b0>)
 803f498:	f7fa fefc 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f49c:	e075      	b.n	803f58a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be unblocked.\r\n", taskId);
 803f49e:	8abb      	ldrh	r3, [r7, #20]
 803f4a0:	4619      	mov	r1, r3
 803f4a2:	4842      	ldr	r0, [pc, #264]	; (803f5ac <gos_shellCommandHandler+0x4b4>)
 803f4a4:	f7fa fef6 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f4a8:	e06f      	b.n	803f58a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "unblock") == 0)
 803f4aa:	4941      	ldr	r1, [pc, #260]	; (803f5b0 <gos_shellCommandHandler+0x4b8>)
 803f4ac:	6878      	ldr	r0, [r7, #4]
 803f4ae:	f7e0 feaf 	bl	8020210 <strcmp>
 803f4b2:	4603      	mov	r3, r0
 803f4b4:	2b00      	cmp	r3, #0
 803f4b6:	d129      	bne.n	803f50c <gos_shellCommandHandler+0x414>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 803f4b8:	7dfb      	ldrb	r3, [r7, #23]
 803f4ba:	3301      	adds	r3, #1
 803f4bc:	75fb      	strb	r3, [r7, #23]
 803f4be:	7dfb      	ldrb	r3, [r7, #23]
 803f4c0:	687a      	ldr	r2, [r7, #4]
 803f4c2:	4413      	add	r3, r2
 803f4c4:	f107 0214 	add.w	r2, r7, #20
 803f4c8:	4611      	mov	r1, r2
 803f4ca:	4618      	mov	r0, r3
 803f4cc:	f7fd fcf8 	bl	803cec0 <gos_taskGetId>
 803f4d0:	4603      	mov	r3, r0
 803f4d2:	2b55      	cmp	r3, #85	; 0x55
 803f4d4:	d116      	bne.n	803f504 <gos_shellCommandHandler+0x40c>
                if (gos_taskUnblock(taskId) == GOS_SUCCESS)
 803f4d6:	8abb      	ldrh	r3, [r7, #20]
 803f4d8:	4618      	mov	r0, r3
 803f4da:	f7fc fee7 	bl	803c2ac <gos_taskUnblock>
 803f4de:	4603      	mov	r3, r0
 803f4e0:	2b55      	cmp	r3, #85	; 0x55
 803f4e2:	d107      	bne.n	803f4f4 <gos_shellCommandHandler+0x3fc>
                    (void_t) gos_shellDriverTransmitString("%s has been unblocked.\r\n", &params[index]);
 803f4e4:	7dfb      	ldrb	r3, [r7, #23]
 803f4e6:	687a      	ldr	r2, [r7, #4]
 803f4e8:	4413      	add	r3, r2
 803f4ea:	4619      	mov	r1, r3
 803f4ec:	4831      	ldr	r0, [pc, #196]	; (803f5b4 <gos_shellCommandHandler+0x4bc>)
 803f4ee:	f7fa fed1 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f4f2:	e04a      	b.n	803f58a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be unblocked.\r\n", &params[index]);
 803f4f4:	7dfb      	ldrb	r3, [r7, #23]
 803f4f6:	687a      	ldr	r2, [r7, #4]
 803f4f8:	4413      	add	r3, r2
 803f4fa:	4619      	mov	r1, r3
 803f4fc:	482e      	ldr	r0, [pc, #184]	; (803f5b8 <gos_shellCommandHandler+0x4c0>)
 803f4fe:	f7fa fec9 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f502:	e042      	b.n	803f58a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 803f504:	4826      	ldr	r0, [pc, #152]	; (803f5a0 <gos_shellCommandHandler+0x4a8>)
 803f506:	f7fa fec5 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f50a:	e03e      	b.n	803f58a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "cpu") == 0)
 803f50c:	492b      	ldr	r1, [pc, #172]	; (803f5bc <gos_shellCommandHandler+0x4c4>)
 803f50e:	6878      	ldr	r0, [r7, #4]
 803f510:	f7e0 fe7e 	bl	8020210 <strcmp>
 803f514:	4603      	mov	r3, r0
 803f516:	2b00      	cmp	r3, #0
 803f518:	d11b      	bne.n	803f552 <gos_shellCommandHandler+0x45a>
            (void_t) gos_shellDriverTransmitString("CPU usage: %u.%02u%%\r\n", (gos_kernelGetCpuUsage() / 100), (gos_kernelGetCpuUsage() % 100));
 803f51a:	f7fb f8b7 	bl	803a68c <gos_kernelGetCpuUsage>
 803f51e:	4603      	mov	r3, r0
 803f520:	461a      	mov	r2, r3
 803f522:	4b27      	ldr	r3, [pc, #156]	; (803f5c0 <gos_shellCommandHandler+0x4c8>)
 803f524:	fba3 2302 	umull	r2, r3, r3, r2
 803f528:	095b      	lsrs	r3, r3, #5
 803f52a:	b29b      	uxth	r3, r3
 803f52c:	461c      	mov	r4, r3
 803f52e:	f7fb f8ad 	bl	803a68c <gos_kernelGetCpuUsage>
 803f532:	4603      	mov	r3, r0
 803f534:	4a22      	ldr	r2, [pc, #136]	; (803f5c0 <gos_shellCommandHandler+0x4c8>)
 803f536:	fba2 1203 	umull	r1, r2, r2, r3
 803f53a:	0952      	lsrs	r2, r2, #5
 803f53c:	2164      	movs	r1, #100	; 0x64
 803f53e:	fb01 f202 	mul.w	r2, r1, r2
 803f542:	1a9b      	subs	r3, r3, r2
 803f544:	b29b      	uxth	r3, r3
 803f546:	461a      	mov	r2, r3
 803f548:	4621      	mov	r1, r4
 803f54a:	481e      	ldr	r0, [pc, #120]	; (803f5c4 <gos_shellCommandHandler+0x4cc>)
 803f54c:	f7fa fea2 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f550:	e01b      	b.n	803f58a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "runtime") == 0)
 803f552:	491d      	ldr	r1, [pc, #116]	; (803f5c8 <gos_shellCommandHandler+0x4d0>)
 803f554:	6878      	ldr	r0, [r7, #4]
 803f556:	f7e0 fe5b 	bl	8020210 <strcmp>
 803f55a:	4603      	mov	r3, r0
 803f55c:	2b00      	cmp	r3, #0
 803f55e:	d114      	bne.n	803f58a <gos_shellCommandHandler+0x492>
            (void_t) gos_runTimeGet(&totalRunTime);
 803f560:	f107 0308 	add.w	r3, r7, #8
 803f564:	4618      	mov	r0, r3
 803f566:	f000 fecd 	bl	8040304 <gos_runTimeGet>
                    totalRunTime.days,
 803f56a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 803f56e:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 803f570:	4619      	mov	r1, r3
                    totalRunTime.hours,
 803f572:	7bbb      	ldrb	r3, [r7, #14]
            (void_t) gos_shellDriverTransmitString(
 803f574:	461a      	mov	r2, r3
                    totalRunTime.minutes,
 803f576:	7b7b      	ldrb	r3, [r7, #13]
            (void_t) gos_shellDriverTransmitString(
 803f578:	4618      	mov	r0, r3
                    totalRunTime.seconds
 803f57a:	7b3b      	ldrb	r3, [r7, #12]
            (void_t) gos_shellDriverTransmitString(
 803f57c:	9300      	str	r3, [sp, #0]
 803f57e:	4603      	mov	r3, r0
 803f580:	4812      	ldr	r0, [pc, #72]	; (803f5cc <gos_shellCommandHandler+0x4d4>)
 803f582:	f7fa fe87 	bl	803a294 <gos_shellDriverTransmitString>
}
 803f586:	e000      	b.n	803f58a <gos_shellCommandHandler+0x492>
                break;
 803f588:	bf00      	nop
}
 803f58a:	bf00      	nop
 803f58c:	371c      	adds	r7, #28
 803f58e:	46bd      	mov	sp, r7
 803f590:	bd90      	pop	{r4, r7, pc}
 803f592:	bf00      	nop
 803f594:	080489bc 	.word	0x080489bc
 803f598:	080489c4 	.word	0x080489c4
 803f59c:	080489dc 	.word	0x080489dc
 803f5a0:	080488bc 	.word	0x080488bc
 803f5a4:	080489f8 	.word	0x080489f8
 803f5a8:	08048a04 	.word	0x08048a04
 803f5ac:	08048a24 	.word	0x08048a24
 803f5b0:	08048a48 	.word	0x08048a48
 803f5b4:	08048a50 	.word	0x08048a50
 803f5b8:	08048a6c 	.word	0x08048a6c
 803f5bc:	08048a8c 	.word	0x08048a8c
 803f5c0:	51eb851f 	.word	0x51eb851f
 803f5c4:	08048a90 	.word	0x08048a90
 803f5c8:	08048aa8 	.word	0x08048aa8
 803f5cc:	08048ab0 	.word	0x08048ab0

0803f5d0 <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 803f5d0:	b580      	push	{r7, lr}
 803f5d2:	b082      	sub	sp, #8
 803f5d4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_SUCCESS;
 803f5d6:	2355      	movs	r3, #85	; 0x55
 803f5d8:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 803f5da:	2300      	movs	r3, #0
 803f5dc:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 803f5de:	2300      	movs	r3, #0
 803f5e0:	71bb      	strb	r3, [r7, #6]
 803f5e2:	e00a      	b.n	803f5fa <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 803f5e4:	79bb      	ldrb	r3, [r7, #6]
 803f5e6:	4a16      	ldr	r2, [pc, #88]	; (803f640 <gos_signalInit+0x70>)
 803f5e8:	212c      	movs	r1, #44	; 0x2c
 803f5ea:	fb01 f303 	mul.w	r3, r1, r3
 803f5ee:	4413      	add	r3, r2
 803f5f0:	2249      	movs	r2, #73	; 0x49
 803f5f2:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 803f5f4:	79bb      	ldrb	r3, [r7, #6]
 803f5f6:	3301      	adds	r3, #1
 803f5f8:	71bb      	strb	r3, [r7, #6]
 803f5fa:	79bb      	ldrb	r3, [r7, #6]
 803f5fc:	2b05      	cmp	r3, #5
 803f5fe:	d9f1      	bls.n	803f5e4 <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 803f600:	2100      	movs	r1, #0
 803f602:	4810      	ldr	r0, [pc, #64]	; (803f644 <gos_signalInit+0x74>)
 803f604:	f7fc f892 	bl	803b72c <gos_taskRegister>
 803f608:	4603      	mov	r3, r0
 803f60a:	2b55      	cmp	r3, #85	; 0x55
 803f60c:	d111      	bne.n	803f632 <gos_signalInit+0x62>
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 803f60e:	480e      	ldr	r0, [pc, #56]	; (803f648 <gos_signalInit+0x78>)
 803f610:	f000 f820 	bl	803f654 <gos_signalCreate>
 803f614:	4603      	mov	r3, r0
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 803f616:	2b55      	cmp	r3, #85	; 0x55
 803f618:	d10b      	bne.n	803f632 <gos_signalInit+0x62>
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 803f61a:	480c      	ldr	r0, [pc, #48]	; (803f64c <gos_signalInit+0x7c>)
 803f61c:	f000 f81a 	bl	803f654 <gos_signalCreate>
 803f620:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 803f622:	2b55      	cmp	r3, #85	; 0x55
 803f624:	d105      	bne.n	803f632 <gos_signalInit+0x62>
        gos_triggerInit(&signalInvokeTrigger)               != GOS_SUCCESS
 803f626:	480a      	ldr	r0, [pc, #40]	; (803f650 <gos_signalInit+0x80>)
 803f628:	f001 fc5a 	bl	8040ee0 <gos_triggerInit>
 803f62c:	4603      	mov	r3, r0
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 803f62e:	2b55      	cmp	r3, #85	; 0x55
 803f630:	d001      	beq.n	803f636 <gos_signalInit+0x66>
    )
    {
        signalInitResult = GOS_ERROR;
 803f632:	23ae      	movs	r3, #174	; 0xae
 803f634:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 803f636:	79fb      	ldrb	r3, [r7, #7]
}
 803f638:	4618      	mov	r0, r3
 803f63a:	3708      	adds	r7, #8
 803f63c:	46bd      	mov	sp, r7
 803f63e:	bd80      	pop	{r7, pc}
 803f640:	2000fa3c 	.word	0x2000fa3c
 803f644:	2000332c 	.word	0x2000332c
 803f648:	20007470 	.word	0x20007470
 803f64c:	20007444 	.word	0x20007444
 803f650:	2000fb44 	.word	0x2000fb44

0803f654 <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 803f654:	b480      	push	{r7}
 803f656:	b085      	sub	sp, #20
 803f658:	af00      	add	r7, sp, #0
 803f65a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 803f65c:	23ae      	movs	r3, #174	; 0xae
 803f65e:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 803f660:	2300      	movs	r3, #0
 803f662:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 803f664:	2300      	movs	r3, #0
 803f666:	73bb      	strb	r3, [r7, #14]
 803f668:	e025      	b.n	803f6b6 <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 803f66a:	7bbb      	ldrb	r3, [r7, #14]
 803f66c:	4a17      	ldr	r2, [pc, #92]	; (803f6cc <gos_signalCreate+0x78>)
 803f66e:	212c      	movs	r1, #44	; 0x2c
 803f670:	fb01 f303 	mul.w	r3, r1, r3
 803f674:	4413      	add	r3, r2
 803f676:	781b      	ldrb	r3, [r3, #0]
 803f678:	2b49      	cmp	r3, #73	; 0x49
 803f67a:	d119      	bne.n	803f6b0 <gos_signalCreate+0x5c>
 803f67c:	687b      	ldr	r3, [r7, #4]
 803f67e:	2b00      	cmp	r3, #0
 803f680:	d016      	beq.n	803f6b0 <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 803f682:	687b      	ldr	r3, [r7, #4]
 803f684:	7bba      	ldrb	r2, [r7, #14]
 803f686:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 803f688:	7bbb      	ldrb	r3, [r7, #14]
 803f68a:	4a10      	ldr	r2, [pc, #64]	; (803f6cc <gos_signalCreate+0x78>)
 803f68c:	212c      	movs	r1, #44	; 0x2c
 803f68e:	fb01 f303 	mul.w	r3, r1, r3
 803f692:	4413      	add	r3, r2
 803f694:	2236      	movs	r2, #54	; 0x36
 803f696:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 803f698:	7bbb      	ldrb	r3, [r7, #14]
 803f69a:	4a0c      	ldr	r2, [pc, #48]	; (803f6cc <gos_signalCreate+0x78>)
 803f69c:	212c      	movs	r1, #44	; 0x2c
 803f69e:	fb01 f303 	mul.w	r3, r1, r3
 803f6a2:	4413      	add	r3, r2
 803f6a4:	3328      	adds	r3, #40	; 0x28
 803f6a6:	2249      	movs	r2, #73	; 0x49
 803f6a8:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 803f6aa:	2355      	movs	r3, #85	; 0x55
 803f6ac:	73fb      	strb	r3, [r7, #15]
            break;
 803f6ae:	e005      	b.n	803f6bc <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 803f6b0:	7bbb      	ldrb	r3, [r7, #14]
 803f6b2:	3301      	adds	r3, #1
 803f6b4:	73bb      	strb	r3, [r7, #14]
 803f6b6:	7bbb      	ldrb	r3, [r7, #14]
 803f6b8:	2b05      	cmp	r3, #5
 803f6ba:	d9d6      	bls.n	803f66a <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 803f6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 803f6be:	4618      	mov	r0, r3
 803f6c0:	3714      	adds	r7, #20
 803f6c2:	46bd      	mov	sp, r7
 803f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f6c8:	4770      	bx	lr
 803f6ca:	bf00      	nop
 803f6cc:	2000fa3c 	.word	0x2000fa3c

0803f6d0 <gos_signalSubscribe>:
gos_result_t gos_signalSubscribe (
        gos_signalId_t           signalId,
        gos_signalHandler_t      signalHandler,
        gos_taskPrivilegeLevel_t signalHandlerPrivileges
        )
{
 803f6d0:	b480      	push	{r7}
 803f6d2:	b085      	sub	sp, #20
 803f6d4:	af00      	add	r7, sp, #0
 803f6d6:	4603      	mov	r3, r0
 803f6d8:	6039      	str	r1, [r7, #0]
 803f6da:	71fb      	strb	r3, [r7, #7]
 803f6dc:	4613      	mov	r3, r2
 803f6de:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             signalSubscribeResult = GOS_ERROR;
 803f6e0:	23ae      	movs	r3, #174	; 0xae
 803f6e2:	73fb      	strb	r3, [r7, #15]
    gos_signalHandlerIndex_t signalHandlerIndex    = 0u;
 803f6e4:	2300      	movs	r3, #0
 803f6e6:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE && signalHandler != NULL)
 803f6e8:	79fb      	ldrb	r3, [r7, #7]
 803f6ea:	2b05      	cmp	r3, #5
 803f6ec:	d83e      	bhi.n	803f76c <gos_signalSubscribe+0x9c>
 803f6ee:	79fb      	ldrb	r3, [r7, #7]
 803f6f0:	4a22      	ldr	r2, [pc, #136]	; (803f77c <gos_signalSubscribe+0xac>)
 803f6f2:	212c      	movs	r1, #44	; 0x2c
 803f6f4:	fb01 f303 	mul.w	r3, r1, r3
 803f6f8:	4413      	add	r3, r2
 803f6fa:	781b      	ldrb	r3, [r3, #0]
 803f6fc:	2b36      	cmp	r3, #54	; 0x36
 803f6fe:	d135      	bne.n	803f76c <gos_signalSubscribe+0x9c>
 803f700:	683b      	ldr	r3, [r7, #0]
 803f702:	2b00      	cmp	r3, #0
 803f704:	d032      	beq.n	803f76c <gos_signalSubscribe+0x9c>
    {
        for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 803f706:	2300      	movs	r3, #0
 803f708:	73bb      	strb	r3, [r7, #14]
 803f70a:	e02c      	b.n	803f766 <gos_signalSubscribe+0x96>
        {
            if (signalArray[signalId].handlers[signalHandlerIndex] == NULL)
 803f70c:	79fa      	ldrb	r2, [r7, #7]
 803f70e:	7bb9      	ldrb	r1, [r7, #14]
 803f710:	481a      	ldr	r0, [pc, #104]	; (803f77c <gos_signalSubscribe+0xac>)
 803f712:	4613      	mov	r3, r2
 803f714:	009b      	lsls	r3, r3, #2
 803f716:	4413      	add	r3, r2
 803f718:	005b      	lsls	r3, r3, #1
 803f71a:	4413      	add	r3, r2
 803f71c:	440b      	add	r3, r1
 803f71e:	009b      	lsls	r3, r3, #2
 803f720:	4403      	add	r3, r0
 803f722:	685b      	ldr	r3, [r3, #4]
 803f724:	2b00      	cmp	r3, #0
 803f726:	d11b      	bne.n	803f760 <gos_signalSubscribe+0x90>
            {
                signalArray[signalId].handlers[signalHandlerIndex]         = signalHandler;
 803f728:	79fa      	ldrb	r2, [r7, #7]
 803f72a:	7bb9      	ldrb	r1, [r7, #14]
 803f72c:	4813      	ldr	r0, [pc, #76]	; (803f77c <gos_signalSubscribe+0xac>)
 803f72e:	4613      	mov	r3, r2
 803f730:	009b      	lsls	r3, r3, #2
 803f732:	4413      	add	r3, r2
 803f734:	005b      	lsls	r3, r3, #1
 803f736:	4413      	add	r3, r2
 803f738:	440b      	add	r3, r1
 803f73a:	009b      	lsls	r3, r3, #2
 803f73c:	4403      	add	r3, r0
 803f73e:	683a      	ldr	r2, [r7, #0]
 803f740:	605a      	str	r2, [r3, #4]
                signalArray[signalId].handlerPrvileges[signalHandlerIndex] = signalHandlerPrivileges;
 803f742:	79fa      	ldrb	r2, [r7, #7]
 803f744:	7bbb      	ldrb	r3, [r7, #14]
 803f746:	490d      	ldr	r1, [pc, #52]	; (803f77c <gos_signalSubscribe+0xac>)
 803f748:	2016      	movs	r0, #22
 803f74a:	fb00 f202 	mul.w	r2, r0, r2
 803f74e:	4413      	add	r3, r2
 803f750:	330c      	adds	r3, #12
 803f752:	005b      	lsls	r3, r3, #1
 803f754:	440b      	add	r3, r1
 803f756:	88ba      	ldrh	r2, [r7, #4]
 803f758:	809a      	strh	r2, [r3, #4]
                signalSubscribeResult                                      = GOS_SUCCESS;
 803f75a:	2355      	movs	r3, #85	; 0x55
 803f75c:	73fb      	strb	r3, [r7, #15]
                break;
 803f75e:	e005      	b.n	803f76c <gos_signalSubscribe+0x9c>
        for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 803f760:	7bbb      	ldrb	r3, [r7, #14]
 803f762:	3301      	adds	r3, #1
 803f764:	73bb      	strb	r3, [r7, #14]
 803f766:	7bbb      	ldrb	r3, [r7, #14]
 803f768:	2b05      	cmp	r3, #5
 803f76a:	d9cf      	bls.n	803f70c <gos_signalSubscribe+0x3c>
    else
    {
        // Nothing to do.
    }

    return signalSubscribeResult;
 803f76c:	7bfb      	ldrb	r3, [r7, #15]
}
 803f76e:	4618      	mov	r0, r3
 803f770:	3714      	adds	r7, #20
 803f772:	46bd      	mov	sp, r7
 803f774:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f778:	4770      	bx	lr
 803f77a:	bf00      	nop
 803f77c:	2000fa3c 	.word	0x2000fa3c

0803f780 <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 803f780:	b580      	push	{r7, lr}
 803f782:	b0a0      	sub	sp, #128	; 0x80
 803f784:	af02      	add	r7, sp, #8
 803f786:	4603      	mov	r3, r0
 803f788:	460a      	mov	r2, r1
 803f78a:	71fb      	strb	r3, [r7, #7]
 803f78c:	4613      	mov	r3, r2
 803f78e:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 803f790:	23ae      	movs	r3, #174	; 0xae
 803f792:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 803f796:	f44f 7380 	mov.w	r3, #256	; 0x100
 803f79a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    gos_taskDescriptor_t callerTaskDesc     = {0};
 803f79e:	f107 0308 	add.w	r3, r7, #8
 803f7a2:	226a      	movs	r2, #106	; 0x6a
 803f7a4:	2100      	movs	r1, #0
 803f7a6:	4618      	mov	r0, r3
 803f7a8:	f003 fa2e 	bl	8042c08 <memset>

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 803f7ac:	79fb      	ldrb	r3, [r7, #7]
 803f7ae:	2b05      	cmp	r3, #5
 803f7b0:	d849      	bhi.n	803f846 <gos_signalInvoke+0xc6>
 803f7b2:	79fb      	ldrb	r3, [r7, #7]
 803f7b4:	4a27      	ldr	r2, [pc, #156]	; (803f854 <gos_signalInvoke+0xd4>)
 803f7b6:	212c      	movs	r1, #44	; 0x2c
 803f7b8:	fb01 f303 	mul.w	r3, r1, r3
 803f7bc:	4413      	add	r3, r2
 803f7be:	781b      	ldrb	r3, [r3, #0]
 803f7c0:	2b36      	cmp	r3, #54	; 0x36
 803f7c2:	d140      	bne.n	803f846 <gos_signalInvoke+0xc6>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 803f7c4:	f7fb fc92 	bl	803b0ec <gos_kernelIsCallerIsr>
 803f7c8:	4603      	mov	r3, r0
 803f7ca:	2b36      	cmp	r3, #54	; 0x36
 803f7cc:	d017      	beq.n	803f7fe <gos_signalInvoke+0x7e>
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 803f7ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 803f7d2:	4618      	mov	r0, r3
 803f7d4:	f7fd fbac 	bl	803cf30 <gos_taskGetCurrentId>
 803f7d8:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 803f7da:	2b55      	cmp	r3, #85	; 0x55
 803f7dc:	d128      	bne.n	803f830 <gos_signalInvoke+0xb0>
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 803f7de:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 803f7e2:	f107 0208 	add.w	r2, r7, #8
 803f7e6:	4611      	mov	r1, r2
 803f7e8:	4618      	mov	r0, r3
 803f7ea:	f7fd fbfd 	bl	803cfe8 <gos_taskGetData>
 803f7ee:	4603      	mov	r3, r0
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 803f7f0:	2b55      	cmp	r3, #85	; 0x55
 803f7f2:	d11d      	bne.n	803f830 <gos_signalInvoke+0xb0>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 803f7f4:	8a3b      	ldrh	r3, [r7, #16]
 803f7f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 803f7fa:	2b00      	cmp	r3, #0
 803f7fc:	d018      	beq.n	803f830 <gos_signalInvoke+0xb0>
            )
        {
            signalArray[signalId].senderId       = senderId;
 803f7fe:	79fb      	ldrb	r3, [r7, #7]
 803f800:	4a14      	ldr	r2, [pc, #80]	; (803f854 <gos_signalInvoke+0xd4>)
 803f802:	212c      	movs	r1, #44	; 0x2c
 803f804:	fb01 f303 	mul.w	r3, r1, r3
 803f808:	4413      	add	r3, r2
 803f80a:	332a      	adds	r3, #42	; 0x2a
 803f80c:	88ba      	ldrh	r2, [r7, #4]
 803f80e:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 803f810:	79fb      	ldrb	r3, [r7, #7]
 803f812:	4a10      	ldr	r2, [pc, #64]	; (803f854 <gos_signalInvoke+0xd4>)
 803f814:	212c      	movs	r1, #44	; 0x2c
 803f816:	fb01 f303 	mul.w	r3, r1, r3
 803f81a:	4413      	add	r3, r2
 803f81c:	3328      	adds	r3, #40	; 0x28
 803f81e:	2236      	movs	r2, #54	; 0x36
 803f820:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 803f822:	2355      	movs	r3, #85	; 0x55
 803f824:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

            // Unblock signal daemon to handle signal invoking by
            // incrementing the invoke trigger.
            (void_t) gos_triggerIncrement(&signalInvokeTrigger);
 803f828:	480b      	ldr	r0, [pc, #44]	; (803f858 <gos_signalInvoke+0xd8>)
 803f82a:	f001 fc7d 	bl	8041128 <gos_triggerIncrement>
 803f82e:	e00a      	b.n	803f846 <gos_signalInvoke+0xc6>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 803f830:	f107 0308 	add.w	r3, r7, #8
 803f834:	330a      	adds	r3, #10
 803f836:	9300      	str	r3, [sp, #0]
 803f838:	4b08      	ldr	r3, [pc, #32]	; (803f85c <gos_signalInvoke+0xdc>)
 803f83a:	f240 1213 	movw	r2, #275	; 0x113
 803f83e:	4908      	ldr	r1, [pc, #32]	; (803f860 <gos_signalInvoke+0xe0>)
 803f840:	202e      	movs	r0, #46	; 0x2e
 803f842:	f7fd fea9 	bl	803d598 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 803f846:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 803f84a:	4618      	mov	r0, r3
 803f84c:	3778      	adds	r7, #120	; 0x78
 803f84e:	46bd      	mov	sp, r7
 803f850:	bd80      	pop	{r7, pc}
 803f852:	bf00      	nop
 803f854:	2000fa3c 	.word	0x2000fa3c
 803f858:	2000fb44 	.word	0x2000fb44
 803f85c:	08048aec 	.word	0x08048aec
 803f860:	0804a0f4 	.word	0x0804a0f4

0803f864 <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 803f864:	b590      	push	{r4, r7, lr}
 803f866:	b083      	sub	sp, #12
 803f868:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 803f86a:	2300      	movs	r3, #0
 803f86c:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 803f86e:	2300      	movs	r3, #0
 803f870:	71bb      	strb	r3, [r7, #6]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger.
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 803f872:	f04f 32ff 	mov.w	r2, #4294967295
 803f876:	2101      	movs	r1, #1
 803f878:	4835      	ldr	r0, [pc, #212]	; (803f950 <gos_signalDaemonTask+0xec>)
 803f87a:	f001 fba5 	bl	8040fc8 <gos_triggerWait>
 803f87e:	4603      	mov	r3, r0
 803f880:	2b55      	cmp	r3, #85	; 0x55
 803f882:	d1f6      	bne.n	803f872 <gos_signalDaemonTask+0xe>
        {
            (void_t) gos_triggerReset(&signalInvokeTrigger);
 803f884:	4832      	ldr	r0, [pc, #200]	; (803f950 <gos_signalDaemonTask+0xec>)
 803f886:	f001 fb47 	bl	8040f18 <gos_triggerReset>
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 803f88a:	2300      	movs	r3, #0
 803f88c:	71bb      	strb	r3, [r7, #6]
 803f88e:	e05b      	b.n	803f948 <gos_signalDaemonTask+0xe4>
            {
                if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 803f890:	79bb      	ldrb	r3, [r7, #6]
 803f892:	4a30      	ldr	r2, [pc, #192]	; (803f954 <gos_signalDaemonTask+0xf0>)
 803f894:	212c      	movs	r1, #44	; 0x2c
 803f896:	fb01 f303 	mul.w	r3, r1, r3
 803f89a:	4413      	add	r3, r2
 803f89c:	3328      	adds	r3, #40	; 0x28
 803f89e:	781b      	ldrb	r3, [r3, #0]
 803f8a0:	2b36      	cmp	r3, #54	; 0x36
 803f8a2:	d14e      	bne.n	803f942 <gos_signalDaemonTask+0xde>
                {
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 803f8a4:	2300      	movs	r3, #0
 803f8a6:	71fb      	strb	r3, [r7, #7]
 803f8a8:	e03d      	b.n	803f926 <gos_signalDaemonTask+0xc2>
                    {
                        if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 803f8aa:	79ba      	ldrb	r2, [r7, #6]
 803f8ac:	79f9      	ldrb	r1, [r7, #7]
 803f8ae:	4829      	ldr	r0, [pc, #164]	; (803f954 <gos_signalDaemonTask+0xf0>)
 803f8b0:	4613      	mov	r3, r2
 803f8b2:	009b      	lsls	r3, r3, #2
 803f8b4:	4413      	add	r3, r2
 803f8b6:	005b      	lsls	r3, r3, #1
 803f8b8:	4413      	add	r3, r2
 803f8ba:	440b      	add	r3, r1
 803f8bc:	009b      	lsls	r3, r3, #2
 803f8be:	4403      	add	r3, r0
 803f8c0:	685b      	ldr	r3, [r3, #4]
 803f8c2:	2b00      	cmp	r3, #0
 803f8c4:	d033      	beq.n	803f92e <gos_signalDaemonTask+0xca>
                            break;
                        }
                        else
                        {
                            // Switch to signal handler privilege.
                            (void_t) gos_taskSetPrivileges(
 803f8c6:	4b24      	ldr	r3, [pc, #144]	; (803f958 <gos_signalDaemonTask+0xf4>)
 803f8c8:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 803f8ca:	79ba      	ldrb	r2, [r7, #6]
 803f8cc:	79fb      	ldrb	r3, [r7, #7]
 803f8ce:	4921      	ldr	r1, [pc, #132]	; (803f954 <gos_signalDaemonTask+0xf0>)
 803f8d0:	2416      	movs	r4, #22
 803f8d2:	fb04 f202 	mul.w	r2, r4, r2
 803f8d6:	4413      	add	r3, r2
 803f8d8:	330c      	adds	r3, #12
 803f8da:	005b      	lsls	r3, r3, #1
 803f8dc:	440b      	add	r3, r1
 803f8de:	889b      	ldrh	r3, [r3, #4]
 803f8e0:	4619      	mov	r1, r3
 803f8e2:	f7fd f9df 	bl	803cca4 <gos_taskSetPrivileges>
                                    signalDaemonTaskDescriptor.taskId,
                                    signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                    );
                            // Call signal handler.
                            signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 803f8e6:	79ba      	ldrb	r2, [r7, #6]
 803f8e8:	79f9      	ldrb	r1, [r7, #7]
 803f8ea:	481a      	ldr	r0, [pc, #104]	; (803f954 <gos_signalDaemonTask+0xf0>)
 803f8ec:	4613      	mov	r3, r2
 803f8ee:	009b      	lsls	r3, r3, #2
 803f8f0:	4413      	add	r3, r2
 803f8f2:	005b      	lsls	r3, r3, #1
 803f8f4:	4413      	add	r3, r2
 803f8f6:	440b      	add	r3, r1
 803f8f8:	009b      	lsls	r3, r3, #2
 803f8fa:	4403      	add	r3, r0
 803f8fc:	685b      	ldr	r3, [r3, #4]
 803f8fe:	79ba      	ldrb	r2, [r7, #6]
 803f900:	4914      	ldr	r1, [pc, #80]	; (803f954 <gos_signalDaemonTask+0xf0>)
 803f902:	202c      	movs	r0, #44	; 0x2c
 803f904:	fb00 f202 	mul.w	r2, r0, r2
 803f908:	440a      	add	r2, r1
 803f90a:	322a      	adds	r2, #42	; 0x2a
 803f90c:	8812      	ldrh	r2, [r2, #0]
 803f90e:	4610      	mov	r0, r2
 803f910:	4798      	blx	r3

                            // Switch back to kernel privilege.
                            (void_t) gos_taskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 803f912:	4b11      	ldr	r3, [pc, #68]	; (803f958 <gos_signalDaemonTask+0xf4>)
 803f914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803f916:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 803f91a:	4618      	mov	r0, r3
 803f91c:	f7fd f9c2 	bl	803cca4 <gos_taskSetPrivileges>
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 803f920:	79fb      	ldrb	r3, [r7, #7]
 803f922:	3301      	adds	r3, #1
 803f924:	71fb      	strb	r3, [r7, #7]
 803f926:	79fb      	ldrb	r3, [r7, #7]
 803f928:	2b05      	cmp	r3, #5
 803f92a:	d9be      	bls.n	803f8aa <gos_signalDaemonTask+0x46>
 803f92c:	e000      	b.n	803f930 <gos_signalDaemonTask+0xcc>
                            break;
 803f92e:	bf00      	nop
                        }
                    }
                    signalArray[signalIndex].invokeRequired = GOS_FALSE;
 803f930:	79bb      	ldrb	r3, [r7, #6]
 803f932:	4a08      	ldr	r2, [pc, #32]	; (803f954 <gos_signalDaemonTask+0xf0>)
 803f934:	212c      	movs	r1, #44	; 0x2c
 803f936:	fb01 f303 	mul.w	r3, r1, r3
 803f93a:	4413      	add	r3, r2
 803f93c:	3328      	adds	r3, #40	; 0x28
 803f93e:	2249      	movs	r2, #73	; 0x49
 803f940:	701a      	strb	r2, [r3, #0]
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 803f942:	79bb      	ldrb	r3, [r7, #6]
 803f944:	3301      	adds	r3, #1
 803f946:	71bb      	strb	r3, [r7, #6]
 803f948:	79bb      	ldrb	r3, [r7, #6]
 803f94a:	2b05      	cmp	r3, #5
 803f94c:	d9a0      	bls.n	803f890 <gos_signalDaemonTask+0x2c>
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 803f94e:	e790      	b.n	803f872 <gos_signalDaemonTask+0xe>
 803f950:	2000fb44 	.word	0x2000fb44
 803f954:	2000fa3c 	.word	0x2000fa3c
 803f958:	2000332c 	.word	0x2000332c

0803f95c <gos_sysmonInit>:

/*
 * Function: gos_sysmonInit
 */
gos_result_t gos_sysmonInit (void_t)
{
 803f95c:	b580      	push	{r7, lr}
 803f95e:	b082      	sub	sp, #8
 803f960:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysmonInitResult = GOS_ERROR;
 803f962:	23ae      	movs	r3, #174	; 0xae
 803f964:	71fb      	strb	r3, [r7, #7]
    u8_t         userMessageIndex = 0u;
 803f966:	2300      	movs	r3, #0
 803f968:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 803f96a:	2300      	movs	r3, #0
 803f96c:	71bb      	strb	r3, [r7, #6]
 803f96e:	e024      	b.n	803f9ba <gos_sysmonInit+0x5e>
    {
        userMessages[userMessageIndex].callback        = NULL;
 803f970:	79bb      	ldrb	r3, [r7, #6]
 803f972:	4a1e      	ldr	r2, [pc, #120]	; (803f9ec <gos_sysmonInit+0x90>)
 803f974:	011b      	lsls	r3, r3, #4
 803f976:	4413      	add	r3, r2
 803f978:	330c      	adds	r3, #12
 803f97a:	2200      	movs	r2, #0
 803f97c:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payload         = NULL;
 803f97e:	79bb      	ldrb	r3, [r7, #6]
 803f980:	4a1a      	ldr	r2, [pc, #104]	; (803f9ec <gos_sysmonInit+0x90>)
 803f982:	011b      	lsls	r3, r3, #4
 803f984:	4413      	add	r3, r2
 803f986:	3304      	adds	r3, #4
 803f988:	2200      	movs	r2, #0
 803f98a:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payloadSize     = 0u;
 803f98c:	79bb      	ldrb	r3, [r7, #6]
 803f98e:	4a17      	ldr	r2, [pc, #92]	; (803f9ec <gos_sysmonInit+0x90>)
 803f990:	011b      	lsls	r3, r3, #4
 803f992:	4413      	add	r3, r2
 803f994:	3308      	adds	r3, #8
 803f996:	2200      	movs	r2, #0
 803f998:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].protocolVersion = 0u;
 803f99a:	79bb      	ldrb	r3, [r7, #6]
 803f99c:	4a13      	ldr	r2, [pc, #76]	; (803f9ec <gos_sysmonInit+0x90>)
 803f99e:	011b      	lsls	r3, r3, #4
 803f9a0:	4413      	add	r3, r2
 803f9a2:	3302      	adds	r3, #2
 803f9a4:	2200      	movs	r2, #0
 803f9a6:	801a      	strh	r2, [r3, #0]
        userMessages[userMessageIndex].messageId       = 0u;
 803f9a8:	79bb      	ldrb	r3, [r7, #6]
 803f9aa:	4a10      	ldr	r2, [pc, #64]	; (803f9ec <gos_sysmonInit+0x90>)
 803f9ac:	011b      	lsls	r3, r3, #4
 803f9ae:	4413      	add	r3, r2
 803f9b0:	2200      	movs	r2, #0
 803f9b2:	801a      	strh	r2, [r3, #0]
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 803f9b4:	79bb      	ldrb	r3, [r7, #6]
 803f9b6:	3301      	adds	r3, #1
 803f9b8:	71bb      	strb	r3, [r7, #6]
 803f9ba:	79bb      	ldrb	r3, [r7, #6]
 803f9bc:	2b05      	cmp	r3, #5
 803f9be:	d9d7      	bls.n	803f970 <gos_sysmonInit+0x14>
    }

    if (gos_gcpRegisterPhysicalDriver(CFG_SYSMON_GCP_CHANNEL_NUM, gos_sysmonDriverTransmit,
 803f9c0:	4a0b      	ldr	r2, [pc, #44]	; (803f9f0 <gos_sysmonInit+0x94>)
 803f9c2:	490c      	ldr	r1, [pc, #48]	; (803f9f4 <gos_sysmonInit+0x98>)
 803f9c4:	2000      	movs	r0, #0
 803f9c6:	f7fd fee9 	bl	803d79c <gos_gcpRegisterPhysicalDriver>
 803f9ca:	4603      	mov	r3, r0
 803f9cc:	2b55      	cmp	r3, #85	; 0x55
 803f9ce:	d108      	bne.n	803f9e2 <gos_sysmonInit+0x86>
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
        gos_taskRegister(&sysmonDaemonTaskDesc, NULL) == GOS_SUCCESS)
 803f9d0:	2100      	movs	r1, #0
 803f9d2:	4809      	ldr	r0, [pc, #36]	; (803f9f8 <gos_sysmonInit+0x9c>)
 803f9d4:	f7fb feaa 	bl	803b72c <gos_taskRegister>
 803f9d8:	4603      	mov	r3, r0
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
 803f9da:	2b55      	cmp	r3, #85	; 0x55
 803f9dc:	d101      	bne.n	803f9e2 <gos_sysmonInit+0x86>
    {
        sysmonInitResult = GOS_SUCCESS;
 803f9de:	2355      	movs	r3, #85	; 0x55
 803f9e0:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Initialization failed.
    }

    return sysmonInitResult;
 803f9e2:	79fb      	ldrb	r3, [r7, #7]
}
 803f9e4:	4618      	mov	r0, r3
 803f9e6:	3708      	adds	r7, #8
 803f9e8:	46bd      	mov	sp, r7
 803f9ea:	bd80      	pop	{r7, pc}
 803f9ec:	2000fcc8 	.word	0x2000fcc8
 803f9f0:	080412b9 	.word	0x080412b9
 803f9f4:	080412f1 	.word	0x080412f1
 803f9f8:	20003398 	.word	0x20003398

0803f9fc <gos_sysmonRegisterUserMessage>:

/*
 * Function: gos_sysmonRegisterUserMessage
 */
gos_result_t gos_sysmonRegisterUserMessage (gos_sysmonUserMessageDescriptor_t* pDesc)
{
 803f9fc:	b580      	push	{r7, lr}
 803f9fe:	b084      	sub	sp, #16
 803fa00:	af00      	add	r7, sp, #0
 803fa02:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t registerResult   = GOS_ERROR;
 803fa04:	23ae      	movs	r3, #174	; 0xae
 803fa06:	73fb      	strb	r3, [r7, #15]
    u8_t         userMessageIndex = 0u;
 803fa08:	2300      	movs	r3, #0
 803fa0a:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pDesc != NULL && pDesc->callback != NULL)
 803fa0c:	687b      	ldr	r3, [r7, #4]
 803fa0e:	2b00      	cmp	r3, #0
 803fa10:	d027      	beq.n	803fa62 <gos_sysmonRegisterUserMessage+0x66>
 803fa12:	687b      	ldr	r3, [r7, #4]
 803fa14:	68db      	ldr	r3, [r3, #12]
 803fa16:	2b00      	cmp	r3, #0
 803fa18:	d023      	beq.n	803fa62 <gos_sysmonRegisterUserMessage+0x66>
    {
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 803fa1a:	2300      	movs	r3, #0
 803fa1c:	73bb      	strb	r3, [r7, #14]
 803fa1e:	e01d      	b.n	803fa5c <gos_sysmonRegisterUserMessage+0x60>
        {
            if (userMessages[userMessageIndex].messageId == 0u &&
 803fa20:	7bbb      	ldrb	r3, [r7, #14]
 803fa22:	4a12      	ldr	r2, [pc, #72]	; (803fa6c <gos_sysmonRegisterUserMessage+0x70>)
 803fa24:	011b      	lsls	r3, r3, #4
 803fa26:	4413      	add	r3, r2
 803fa28:	881b      	ldrh	r3, [r3, #0]
 803fa2a:	2b00      	cmp	r3, #0
 803fa2c:	d113      	bne.n	803fa56 <gos_sysmonRegisterUserMessage+0x5a>
                userMessages[userMessageIndex].callback == NULL)
 803fa2e:	7bbb      	ldrb	r3, [r7, #14]
 803fa30:	4a0e      	ldr	r2, [pc, #56]	; (803fa6c <gos_sysmonRegisterUserMessage+0x70>)
 803fa32:	011b      	lsls	r3, r3, #4
 803fa34:	4413      	add	r3, r2
 803fa36:	330c      	adds	r3, #12
 803fa38:	681b      	ldr	r3, [r3, #0]
            if (userMessages[userMessageIndex].messageId == 0u &&
 803fa3a:	2b00      	cmp	r3, #0
 803fa3c:	d10b      	bne.n	803fa56 <gos_sysmonRegisterUserMessage+0x5a>
            {
                // Store user message descriptor.
                (void_t) memcpy((void_t*)&userMessages[userMessageIndex], (void_t*)pDesc, sizeof(*pDesc));
 803fa3e:	7bbb      	ldrb	r3, [r7, #14]
 803fa40:	011b      	lsls	r3, r3, #4
 803fa42:	4a0a      	ldr	r2, [pc, #40]	; (803fa6c <gos_sysmonRegisterUserMessage+0x70>)
 803fa44:	4413      	add	r3, r2
 803fa46:	2210      	movs	r2, #16
 803fa48:	6879      	ldr	r1, [r7, #4]
 803fa4a:	4618      	mov	r0, r3
 803fa4c:	f003 f975 	bl	8042d3a <memcpy>
                registerResult = GOS_SUCCESS;
 803fa50:	2355      	movs	r3, #85	; 0x55
 803fa52:	73fb      	strb	r3, [r7, #15]
                break;
 803fa54:	e005      	b.n	803fa62 <gos_sysmonRegisterUserMessage+0x66>
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 803fa56:	7bbb      	ldrb	r3, [r7, #14]
 803fa58:	3301      	adds	r3, #1
 803fa5a:	73bb      	strb	r3, [r7, #14]
 803fa5c:	7bbb      	ldrb	r3, [r7, #14]
 803fa5e:	2b05      	cmp	r3, #5
 803fa60:	d9de      	bls.n	803fa20 <gos_sysmonRegisterUserMessage+0x24>
    else
    {
        // Error.
    }

    return registerResult;
 803fa62:	7bfb      	ldrb	r3, [r7, #15]
}
 803fa64:	4618      	mov	r0, r3
 803fa66:	3710      	adds	r7, #16
 803fa68:	46bd      	mov	sp, r7
 803fa6a:	bd80      	pop	{r7, pc}
 803fa6c:	2000fcc8 	.word	0x2000fcc8

0803fa70 <gos_sysmonDaemonTask>:
 * @details Serves the incoming system monitoring messages.
 *
 * @return -
 */
GOS_STATIC void_t gos_sysmonDaemonTask (void_t)
{
 803fa70:	b580      	push	{r7, lr}
 803fa72:	b084      	sub	sp, #16
 803fa74:	af02      	add	r7, sp, #8
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t lutIndex         = 0u;
 803fa76:	2300      	movs	r3, #0
 803fa78:	71bb      	strb	r3, [r7, #6]
    u8_t                    userMessageIndex = 0u;
 803fa7a:	2300      	movs	r3, #0
 803fa7c:	71fb      	strb	r3, [r7, #7]
    u16_t                   messageId        = 0u;
 803fa7e:	2300      	movs	r3, #0
 803fa80:	80bb      	strh	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Reset message ID.
        messageId = 0u;
 803fa82:	2300      	movs	r3, #0
 803fa84:	80bb      	strh	r3, [r7, #4]

        // Check if a message was received.
        if (gos_gcpReceiveMessage(CFG_SYSMON_GCP_CHANNEL_NUM, &messageId, receiveBuffer, RECEIVE_BUFFER_SIZE, 0xFFFF) == GOS_SUCCESS)
 803fa86:	1d39      	adds	r1, r7, #4
 803fa88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 803fa8c:	9300      	str	r3, [sp, #0]
 803fa8e:	2380      	movs	r3, #128	; 0x80
 803fa90:	4a2e      	ldr	r2, [pc, #184]	; (803fb4c <gos_sysmonDaemonTask+0xdc>)
 803fa92:	2000      	movs	r0, #0
 803fa94:	f7fd ffdc 	bl	803da50 <gos_gcpReceiveMessage>
 803fa98:	4603      	mov	r3, r0
 803fa9a:	2b55      	cmp	r3, #85	; 0x55
 803fa9c:	d152      	bne.n	803fb44 <gos_sysmonDaemonTask+0xd4>
        {
            // Get LUT index.
            lutIndex = gos_sysmonGetLutIndex(messageId);
 803fa9e:	88bb      	ldrh	r3, [r7, #4]
 803faa0:	4618      	mov	r0, r3
 803faa2:	f000 f859 	bl	803fb58 <gos_sysmonGetLutIndex>
 803faa6:	4603      	mov	r3, r0
 803faa8:	71bb      	strb	r3, [r7, #6]

            // Check user registered messages.
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 803faaa:	79bb      	ldrb	r3, [r7, #6]
 803faac:	2b00      	cmp	r3, #0
 803faae:	d002      	beq.n	803fab6 <gos_sysmonDaemonTask+0x46>
 803fab0:	79bb      	ldrb	r3, [r7, #6]
 803fab2:	2b10      	cmp	r3, #16
 803fab4:	d130      	bne.n	803fb18 <gos_sysmonDaemonTask+0xa8>
            {
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 803fab6:	2300      	movs	r3, #0
 803fab8:	71fb      	strb	r3, [r7, #7]
 803faba:	e029      	b.n	803fb10 <gos_sysmonDaemonTask+0xa0>
                {
                    if (userMessages[userMessageIndex].messageId == messageId)
 803fabc:	79fb      	ldrb	r3, [r7, #7]
 803fabe:	4a24      	ldr	r2, [pc, #144]	; (803fb50 <gos_sysmonDaemonTask+0xe0>)
 803fac0:	011b      	lsls	r3, r3, #4
 803fac2:	4413      	add	r3, r2
 803fac4:	881a      	ldrh	r2, [r3, #0]
 803fac6:	88bb      	ldrh	r3, [r7, #4]
 803fac8:	429a      	cmp	r2, r3
 803faca:	d11e      	bne.n	803fb0a <gos_sysmonDaemonTask+0x9a>
                    {
                        // If payload is not NULL, copy it.
                        if (userMessages[userMessageIndex].payload != NULL)
 803facc:	79fb      	ldrb	r3, [r7, #7]
 803face:	4a20      	ldr	r2, [pc, #128]	; (803fb50 <gos_sysmonDaemonTask+0xe0>)
 803fad0:	011b      	lsls	r3, r3, #4
 803fad2:	4413      	add	r3, r2
 803fad4:	3304      	adds	r3, #4
 803fad6:	681b      	ldr	r3, [r3, #0]
 803fad8:	2b00      	cmp	r3, #0
 803fada:	d00f      	beq.n	803fafc <gos_sysmonDaemonTask+0x8c>
                        {
                            (void_t) memcpy(userMessages[userMessageIndex].payload, (void_t*)receiveBuffer, userMessages[userMessageIndex].payloadSize);
 803fadc:	79fb      	ldrb	r3, [r7, #7]
 803fade:	4a1c      	ldr	r2, [pc, #112]	; (803fb50 <gos_sysmonDaemonTask+0xe0>)
 803fae0:	011b      	lsls	r3, r3, #4
 803fae2:	4413      	add	r3, r2
 803fae4:	3304      	adds	r3, #4
 803fae6:	6818      	ldr	r0, [r3, #0]
 803fae8:	79fb      	ldrb	r3, [r7, #7]
 803faea:	4a19      	ldr	r2, [pc, #100]	; (803fb50 <gos_sysmonDaemonTask+0xe0>)
 803faec:	011b      	lsls	r3, r3, #4
 803faee:	4413      	add	r3, r2
 803faf0:	3308      	adds	r3, #8
 803faf2:	681b      	ldr	r3, [r3, #0]
 803faf4:	461a      	mov	r2, r3
 803faf6:	4915      	ldr	r1, [pc, #84]	; (803fb4c <gos_sysmonDaemonTask+0xdc>)
 803faf8:	f003 f91f 	bl	8042d3a <memcpy>
                        {
                            // Message has no payload.
                        }

                        // Call callback function.
                        userMessages[userMessageIndex].callback();
 803fafc:	79fb      	ldrb	r3, [r7, #7]
 803fafe:	4a14      	ldr	r2, [pc, #80]	; (803fb50 <gos_sysmonDaemonTask+0xe0>)
 803fb00:	011b      	lsls	r3, r3, #4
 803fb02:	4413      	add	r3, r2
 803fb04:	330c      	adds	r3, #12
 803fb06:	681b      	ldr	r3, [r3, #0]
 803fb08:	4798      	blx	r3
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 803fb0a:	79fb      	ldrb	r3, [r7, #7]
 803fb0c:	3301      	adds	r3, #1
 803fb0e:	71fb      	strb	r3, [r7, #7]
 803fb10:	79fb      	ldrb	r3, [r7, #7]
 803fb12:	2b05      	cmp	r3, #5
 803fb14:	d9d2      	bls.n	803fabc <gos_sysmonDaemonTask+0x4c>
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 803fb16:	e018      	b.n	803fb4a <gos_sysmonDaemonTask+0xda>
                    }
                }
            }
            else
            {
                if (sysmonLut[lutIndex].pHandler != NULL)
 803fb18:	79bb      	ldrb	r3, [r7, #6]
 803fb1a:	4a0e      	ldr	r2, [pc, #56]	; (803fb54 <gos_sysmonDaemonTask+0xe4>)
 803fb1c:	011b      	lsls	r3, r3, #4
 803fb1e:	4413      	add	r3, r2
 803fb20:	330c      	adds	r3, #12
 803fb22:	681b      	ldr	r3, [r3, #0]
 803fb24:	2b00      	cmp	r3, #0
 803fb26:	d009      	beq.n	803fb3c <gos_sysmonDaemonTask+0xcc>
                {
                    sysmonLut[lutIndex].pHandler(lutIndex);
 803fb28:	79bb      	ldrb	r3, [r7, #6]
 803fb2a:	4a0a      	ldr	r2, [pc, #40]	; (803fb54 <gos_sysmonDaemonTask+0xe4>)
 803fb2c:	011b      	lsls	r3, r3, #4
 803fb2e:	4413      	add	r3, r2
 803fb30:	330c      	adds	r3, #12
 803fb32:	681b      	ldr	r3, [r3, #0]
 803fb34:	79ba      	ldrb	r2, [r7, #6]
 803fb36:	4610      	mov	r0, r2
 803fb38:	4798      	blx	r3
 803fb3a:	e7a2      	b.n	803fa82 <gos_sysmonDaemonTask+0x12>
                }
                else
                {
                    gos_sysmonSendResponse(GOS_SYSMON_MSG_UNKNOWN);
 803fb3c:	2000      	movs	r0, #0
 803fb3e:	f000 f82f 	bl	803fba0 <gos_sysmonSendResponse>
 803fb42:	e79e      	b.n	803fa82 <gos_sysmonDaemonTask+0x12>
            }
        }
        else
        {
            // Reception error.
            (void_t) gos_taskSleep(10);
 803fb44:	200a      	movs	r0, #10
 803fb46:	f7fb ff83 	bl	803ba50 <gos_taskSleep>
        messageId = 0u;
 803fb4a:	e79a      	b.n	803fa82 <gos_sysmonDaemonTask+0x12>
 803fb4c:	2000fb50 	.word	0x2000fb50
 803fb50:	2000fcc8 	.word	0x2000fcc8
 803fb54:	0804a108 	.word	0x0804a108

0803fb58 <gos_sysmonGetLutIndex>:
 * @param   messageId : ID of the message to get the index for.
 *
 * @return  Look-up table index of the message.
 */
GOS_STATIC gos_sysmonMessageEnum_t gos_sysmonGetLutIndex (gos_sysmonMessageId_t messageId)
{
 803fb58:	b480      	push	{r7}
 803fb5a:	b085      	sub	sp, #20
 803fb5c:	af00      	add	r7, sp, #0
 803fb5e:	4603      	mov	r3, r0
 803fb60:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t index = 0u;
 803fb62:	2300      	movs	r3, #0
 803fb64:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 803fb66:	2300      	movs	r3, #0
 803fb68:	73fb      	strb	r3, [r7, #15]
 803fb6a:	e00a      	b.n	803fb82 <gos_sysmonGetLutIndex+0x2a>
    {
        if (sysmonLut[index].messageId == messageId)
 803fb6c:	7bfb      	ldrb	r3, [r7, #15]
 803fb6e:	4a0b      	ldr	r2, [pc, #44]	; (803fb9c <gos_sysmonGetLutIndex+0x44>)
 803fb70:	011b      	lsls	r3, r3, #4
 803fb72:	4413      	add	r3, r2
 803fb74:	881b      	ldrh	r3, [r3, #0]
 803fb76:	88fa      	ldrh	r2, [r7, #6]
 803fb78:	429a      	cmp	r2, r3
 803fb7a:	d006      	beq.n	803fb8a <gos_sysmonGetLutIndex+0x32>
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 803fb7c:	7bfb      	ldrb	r3, [r7, #15]
 803fb7e:	3301      	adds	r3, #1
 803fb80:	73fb      	strb	r3, [r7, #15]
 803fb82:	7bfb      	ldrb	r3, [r7, #15]
 803fb84:	2b0f      	cmp	r3, #15
 803fb86:	d9f1      	bls.n	803fb6c <gos_sysmonGetLutIndex+0x14>
 803fb88:	e000      	b.n	803fb8c <gos_sysmonGetLutIndex+0x34>
        {
            break;
 803fb8a:	bf00      	nop
        {
            // Continue searching.
        }
    }

    return index;
 803fb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 803fb8e:	4618      	mov	r0, r3
 803fb90:	3714      	adds	r7, #20
 803fb92:	46bd      	mov	sp, r7
 803fb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 803fb98:	4770      	bx	lr
 803fb9a:	bf00      	nop
 803fb9c:	0804a108 	.word	0x0804a108

0803fba0 <gos_sysmonSendResponse>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonSendResponse (gos_sysmonMessageEnum_t lutIndex)
{
 803fba0:	b580      	push	{r7, lr}
 803fba2:	b084      	sub	sp, #16
 803fba4:	af02      	add	r7, sp, #8
 803fba6:	4603      	mov	r3, r0
 803fba8:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    (void_t) gos_gcpTransmitMessage(
 803fbaa:	79fb      	ldrb	r3, [r7, #7]
            CFG_SYSMON_GCP_CHANNEL_NUM,          sysmonLut[lutIndex].messageId,
 803fbac:	4a0c      	ldr	r2, [pc, #48]	; (803fbe0 <gos_sysmonSendResponse+0x40>)
 803fbae:	011b      	lsls	r3, r3, #4
 803fbb0:	4413      	add	r3, r2
 803fbb2:	8819      	ldrh	r1, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 803fbb4:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 803fbb6:	4a0a      	ldr	r2, [pc, #40]	; (803fbe0 <gos_sysmonSendResponse+0x40>)
 803fbb8:	011b      	lsls	r3, r3, #4
 803fbba:	4413      	add	r3, r2
 803fbbc:	3304      	adds	r3, #4
 803fbbe:	681a      	ldr	r2, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 803fbc0:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 803fbc2:	4807      	ldr	r0, [pc, #28]	; (803fbe0 <gos_sysmonSendResponse+0x40>)
 803fbc4:	011b      	lsls	r3, r3, #4
 803fbc6:	4403      	add	r3, r0
 803fbc8:	3308      	adds	r3, #8
 803fbca:	881b      	ldrh	r3, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 803fbcc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 803fbd0:	9000      	str	r0, [sp, #0]
 803fbd2:	2000      	movs	r0, #0
 803fbd4:	f7fd fe0a 	bl	803d7ec <gos_gcpTransmitMessage>
			0xFFFF
            );
}
 803fbd8:	bf00      	nop
 803fbda:	3708      	adds	r7, #8
 803fbdc:	46bd      	mov	sp, r7
 803fbde:	bd80      	pop	{r7, pc}
 803fbe0:	0804a108 	.word	0x0804a108

0803fbe4 <gos_sysmonHandlePingRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandlePingRequest (gos_sysmonMessageEnum_t lutIndex)
{
 803fbe4:	b580      	push	{r7, lr}
 803fbe6:	b082      	sub	sp, #8
 803fbe8:	af00      	add	r7, sp, #0
 803fbea:	4603      	mov	r3, r0
 803fbec:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    pingMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 803fbee:	79fb      	ldrb	r3, [r7, #7]
 803fbf0:	4618      	mov	r0, r3
 803fbf2:	f000 fb05 	bl	8040200 <gos_sysmonCheckMessage>
 803fbf6:	4603      	mov	r3, r0
 803fbf8:	461a      	mov	r2, r3
 803fbfa:	4b06      	ldr	r3, [pc, #24]	; (803fc14 <gos_sysmonHandlePingRequest+0x30>)
 803fbfc:	701a      	strb	r2, [r3, #0]
    gos_sysmonSendResponse(lutIndex + 1);
 803fbfe:	79fb      	ldrb	r3, [r7, #7]
 803fc00:	3301      	adds	r3, #1
 803fc02:	b2db      	uxtb	r3, r3
 803fc04:	4618      	mov	r0, r3
 803fc06:	f7ff ffcb 	bl	803fba0 <gos_sysmonSendResponse>
}
 803fc0a:	bf00      	nop
 803fc0c:	3708      	adds	r7, #8
 803fc0e:	46bd      	mov	sp, r7
 803fc10:	bd80      	pop	{r7, pc}
 803fc12:	bf00      	nop
 803fc14:	2000fbd0 	.word	0x2000fbd0

0803fc18 <gos_sysmonHandleCpuUsageGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleCpuUsageGet (gos_sysmonMessageEnum_t lutIndex)
{
 803fc18:	b580      	push	{r7, lr}
 803fc1a:	b082      	sub	sp, #8
 803fc1c:	af00      	add	r7, sp, #0
 803fc1e:	4603      	mov	r3, r0
 803fc20:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    cpuMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 803fc22:	79fb      	ldrb	r3, [r7, #7]
 803fc24:	4618      	mov	r0, r3
 803fc26:	f000 faeb 	bl	8040200 <gos_sysmonCheckMessage>
 803fc2a:	4603      	mov	r3, r0
 803fc2c:	461a      	mov	r2, r3
 803fc2e:	4b0b      	ldr	r3, [pc, #44]	; (803fc5c <gos_sysmonHandleCpuUsageGet+0x44>)
 803fc30:	701a      	strb	r2, [r3, #0]

    if (cpuMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 803fc32:	4b0a      	ldr	r3, [pc, #40]	; (803fc5c <gos_sysmonHandleCpuUsageGet+0x44>)
 803fc34:	781b      	ldrb	r3, [r3, #0]
 803fc36:	2b28      	cmp	r3, #40	; 0x28
 803fc38:	d106      	bne.n	803fc48 <gos_sysmonHandleCpuUsageGet+0x30>
    {
        cpuMessage.cpuUsage = gos_kernelGetCpuUsage();
 803fc3a:	f7fa fd27 	bl	803a68c <gos_kernelGetCpuUsage>
 803fc3e:	4603      	mov	r3, r0
 803fc40:	461a      	mov	r2, r3
 803fc42:	4b06      	ldr	r3, [pc, #24]	; (803fc5c <gos_sysmonHandleCpuUsageGet+0x44>)
 803fc44:	f8a3 2001 	strh.w	r2, [r3, #1]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 803fc48:	79fb      	ldrb	r3, [r7, #7]
 803fc4a:	3301      	adds	r3, #1
 803fc4c:	b2db      	uxtb	r3, r3
 803fc4e:	4618      	mov	r0, r3
 803fc50:	f7ff ffa6 	bl	803fba0 <gos_sysmonSendResponse>
}
 803fc54:	bf00      	nop
 803fc56:	3708      	adds	r7, #8
 803fc58:	46bd      	mov	sp, r7
 803fc5a:	bd80      	pop	{r7, pc}
 803fc5c:	2000fbd4 	.word	0x2000fbd4

0803fc60 <gos_sysmonHandleTaskDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 803fc60:	b580      	push	{r7, lr}
 803fc62:	b084      	sub	sp, #16
 803fc64:	af00      	add	r7, sp, #0
 803fc66:	4603      	mov	r3, r0
 803fc68:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 803fc6a:	2300      	movs	r3, #0
 803fc6c:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 803fc6e:	2349      	movs	r3, #73	; 0x49
 803fc70:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 803fc72:	79fb      	ldrb	r3, [r7, #7]
 803fc74:	4618      	mov	r0, r3
 803fc76:	f000 fac3 	bl	8040200 <gos_sysmonCheckMessage>
 803fc7a:	4603      	mov	r3, r0
 803fc7c:	461a      	mov	r2, r3
 803fc7e:	4b66      	ldr	r3, [pc, #408]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fc80:	701a      	strb	r2, [r3, #0]

    if (taskDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 803fc82:	4b65      	ldr	r3, [pc, #404]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fc84:	781b      	ldrb	r3, [r3, #0]
 803fc86:	2b28      	cmp	r3, #40	; 0x28
 803fc88:	f040 80c2 	bne.w	803fe10 <gos_sysmonHandleTaskDataGet+0x1b0>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 803fc8c:	4b63      	ldr	r3, [pc, #396]	; (803fe1c <gos_sysmonHandleTaskDataGet+0x1bc>)
 803fc8e:	881b      	ldrh	r3, [r3, #0]
 803fc90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803fc94:	4293      	cmp	r3, r2
 803fc96:	d168      	bne.n	803fd6a <gos_sysmonHandleTaskDataGet+0x10a>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803fc98:	2300      	movs	r3, #0
 803fc9a:	81fb      	strh	r3, [r7, #14]
 803fc9c:	e061      	b.n	803fd62 <gos_sysmonHandleTaskDataGet+0x102>
            {
                if (breakLoop == GOS_TRUE)
 803fc9e:	7b7b      	ldrb	r3, [r7, #13]
 803fca0:	2b36      	cmp	r3, #54	; 0x36
 803fca2:	f000 80b4 	beq.w	803fe0e <gos_sysmonHandleTaskDataGet+0x1ae>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 803fca6:	89fb      	ldrh	r3, [r7, #14]
 803fca8:	495d      	ldr	r1, [pc, #372]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fcaa:	4618      	mov	r0, r3
 803fcac:	f7fd fa0a 	bl	803d0c4 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 803fcb0:	4b5b      	ldr	r3, [pc, #364]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fcb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803fcb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803fcb8:	d045      	beq.n	803fd46 <gos_sysmonHandleTaskDataGet+0xe6>
                {
                    taskDataMsg.taskData.taskId               = taskDesc.taskId;
 803fcba:	4b59      	ldr	r3, [pc, #356]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fcbc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 803fcbe:	4b56      	ldr	r3, [pc, #344]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fcc0:	84da      	strh	r2, [r3, #38]	; 0x26
                    taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 803fcc2:	4b57      	ldr	r3, [pc, #348]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fcc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 803fcc8:	4b53      	ldr	r3, [pc, #332]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fcca:	859a      	strh	r2, [r3, #44]	; 0x2c
                    taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 803fccc:	4b54      	ldr	r3, [pc, #336]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fcce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 803fcd2:	4b51      	ldr	r3, [pc, #324]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fcd4:	f8a3 203d 	strh.w	r2, [r3, #61]	; 0x3d
                    taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 803fcd8:	4b51      	ldr	r3, [pc, #324]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fcda:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 803fcde:	4b4e      	ldr	r3, [pc, #312]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fce0:	f8a3 2037 	strh.w	r2, [r3, #55]	; 0x37
                    taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 803fce4:	4b4e      	ldr	r3, [pc, #312]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fce6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 803fcea:	4b4b      	ldr	r3, [pc, #300]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fcec:	f8a3 203b 	strh.w	r2, [r3, #59]	; 0x3b
                    taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 803fcf0:	4b4b      	ldr	r3, [pc, #300]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fcf2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 803fcf6:	4b48      	ldr	r3, [pc, #288]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fcf8:	f8a3 2039 	strh.w	r2, [r3, #57]	; 0x39
                    taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 803fcfc:	4b48      	ldr	r3, [pc, #288]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fcfe:	79da      	ldrb	r2, [r3, #7]
 803fd00:	4b45      	ldr	r3, [pc, #276]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd02:	70da      	strb	r2, [r3, #3]
                    taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 803fd04:	4b46      	ldr	r3, [pc, #280]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fd06:	799a      	ldrb	r2, [r3, #6]
 803fd08:	4b43      	ldr	r3, [pc, #268]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd0a:	709a      	strb	r2, [r3, #2]
                    taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 803fd0c:	4b44      	ldr	r3, [pc, #272]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fd0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803fd10:	4a41      	ldr	r2, [pc, #260]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd12:	6293      	str	r3, [r2, #40]	; 0x28
                    taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 803fd14:	4b42      	ldr	r3, [pc, #264]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fd16:	891a      	ldrh	r2, [r3, #8]
 803fd18:	4b3f      	ldr	r3, [pc, #252]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd1a:	809a      	strh	r2, [r3, #4]
                    taskDataMsg.taskData.taskState            = taskDesc.taskState;
 803fd1c:	4b40      	ldr	r3, [pc, #256]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fd1e:	791a      	ldrb	r2, [r3, #4]
 803fd20:	4b3d      	ldr	r3, [pc, #244]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd22:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 803fd24:	4a3c      	ldr	r2, [pc, #240]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd26:	4b3e      	ldr	r3, [pc, #248]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fd28:	322e      	adds	r2, #46	; 0x2e
 803fd2a:	334c      	adds	r3, #76	; 0x4c
 803fd2c:	cb03      	ldmia	r3!, {r0, r1}
 803fd2e:	6010      	str	r0, [r2, #0]
 803fd30:	6051      	str	r1, [r2, #4]
 803fd32:	781b      	ldrb	r3, [r3, #0]
 803fd34:	7213      	strb	r3, [r2, #8]
                    (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 803fd36:	493b      	ldr	r1, [pc, #236]	; (803fe24 <gos_sysmonHandleTaskDataGet+0x1c4>)
 803fd38:	483b      	ldr	r0, [pc, #236]	; (803fe28 <gos_sysmonHandleTaskDataGet+0x1c8>)
 803fd3a:	f002 fff6 	bl	8042d2a <strcpy>

                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 803fd3e:	4b36      	ldr	r3, [pc, #216]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd40:	2228      	movs	r2, #40	; 0x28
 803fd42:	701a      	strb	r2, [r3, #0]
 803fd44:	e004      	b.n	803fd50 <gos_sysmonHandleTaskDataGet+0xf0>
                }
                else
                {
                    // Last task found.
                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803fd46:	4b34      	ldr	r3, [pc, #208]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd48:	2263      	movs	r2, #99	; 0x63
 803fd4a:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 803fd4c:	2336      	movs	r3, #54	; 0x36
 803fd4e:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 803fd50:	79fb      	ldrb	r3, [r7, #7]
 803fd52:	3301      	adds	r3, #1
 803fd54:	b2db      	uxtb	r3, r3
 803fd56:	4618      	mov	r0, r3
 803fd58:	f7ff ff22 	bl	803fba0 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803fd5c:	89fb      	ldrh	r3, [r7, #14]
 803fd5e:	3301      	adds	r3, #1
 803fd60:	81fb      	strh	r3, [r7, #14]
 803fd62:	89fb      	ldrh	r3, [r7, #14]
 803fd64:	2b2f      	cmp	r3, #47	; 0x2f
 803fd66:	d99a      	bls.n	803fc9e <gos_sysmonHandleTaskDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 803fd68:	e052      	b.n	803fe10 <gos_sysmonHandleTaskDataGet+0x1b0>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 803fd6a:	4b2c      	ldr	r3, [pc, #176]	; (803fe1c <gos_sysmonHandleTaskDataGet+0x1bc>)
 803fd6c:	881b      	ldrh	r3, [r3, #0]
 803fd6e:	492c      	ldr	r1, [pc, #176]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fd70:	4618      	mov	r0, r3
 803fd72:	f7fd f9a7 	bl	803d0c4 <gos_taskGetDataByIndex>
            taskDataMsg.taskData.taskId               = taskDesc.taskId;
 803fd76:	4b2a      	ldr	r3, [pc, #168]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fd78:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 803fd7a:	4b27      	ldr	r3, [pc, #156]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd7c:	84da      	strh	r2, [r3, #38]	; 0x26
            taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 803fd7e:	4b28      	ldr	r3, [pc, #160]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fd80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 803fd84:	4b24      	ldr	r3, [pc, #144]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd86:	859a      	strh	r2, [r3, #44]	; 0x2c
            taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 803fd88:	4b25      	ldr	r3, [pc, #148]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fd8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 803fd8e:	4b22      	ldr	r3, [pc, #136]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd90:	f8a3 203d 	strh.w	r2, [r3, #61]	; 0x3d
            taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 803fd94:	4b22      	ldr	r3, [pc, #136]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fd96:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 803fd9a:	4b1f      	ldr	r3, [pc, #124]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fd9c:	f8a3 2037 	strh.w	r2, [r3, #55]	; 0x37
            taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 803fda0:	4b1f      	ldr	r3, [pc, #124]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fda2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 803fda6:	4b1c      	ldr	r3, [pc, #112]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fda8:	f8a3 203b 	strh.w	r2, [r3, #59]	; 0x3b
            taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 803fdac:	4b1c      	ldr	r3, [pc, #112]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fdae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 803fdb2:	4b19      	ldr	r3, [pc, #100]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fdb4:	f8a3 2039 	strh.w	r2, [r3, #57]	; 0x39
            taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 803fdb8:	4b19      	ldr	r3, [pc, #100]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fdba:	79da      	ldrb	r2, [r3, #7]
 803fdbc:	4b16      	ldr	r3, [pc, #88]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fdbe:	70da      	strb	r2, [r3, #3]
            taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 803fdc0:	4b17      	ldr	r3, [pc, #92]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fdc2:	799a      	ldrb	r2, [r3, #6]
 803fdc4:	4b14      	ldr	r3, [pc, #80]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fdc6:	709a      	strb	r2, [r3, #2]
            taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 803fdc8:	4b15      	ldr	r3, [pc, #84]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fdca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803fdcc:	4a12      	ldr	r2, [pc, #72]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fdce:	6293      	str	r3, [r2, #40]	; 0x28
            taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 803fdd0:	4b13      	ldr	r3, [pc, #76]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fdd2:	891a      	ldrh	r2, [r3, #8]
 803fdd4:	4b10      	ldr	r3, [pc, #64]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fdd6:	809a      	strh	r2, [r3, #4]
            taskDataMsg.taskData.taskState            = taskDesc.taskState;
 803fdd8:	4b11      	ldr	r3, [pc, #68]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fdda:	791a      	ldrb	r2, [r3, #4]
 803fddc:	4b0e      	ldr	r3, [pc, #56]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fdde:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 803fde0:	4a0d      	ldr	r2, [pc, #52]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fde2:	4b0f      	ldr	r3, [pc, #60]	; (803fe20 <gos_sysmonHandleTaskDataGet+0x1c0>)
 803fde4:	322e      	adds	r2, #46	; 0x2e
 803fde6:	334c      	adds	r3, #76	; 0x4c
 803fde8:	cb03      	ldmia	r3!, {r0, r1}
 803fdea:	6010      	str	r0, [r2, #0]
 803fdec:	6051      	str	r1, [r2, #4]
 803fdee:	781b      	ldrb	r3, [r3, #0]
 803fdf0:	7213      	strb	r3, [r2, #8]
            (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 803fdf2:	490c      	ldr	r1, [pc, #48]	; (803fe24 <gos_sysmonHandleTaskDataGet+0x1c4>)
 803fdf4:	480c      	ldr	r0, [pc, #48]	; (803fe28 <gos_sysmonHandleTaskDataGet+0x1c8>)
 803fdf6:	f002 ff98 	bl	8042d2a <strcpy>
            taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 803fdfa:	4b07      	ldr	r3, [pc, #28]	; (803fe18 <gos_sysmonHandleTaskDataGet+0x1b8>)
 803fdfc:	2228      	movs	r2, #40	; 0x28
 803fdfe:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 803fe00:	79fb      	ldrb	r3, [r7, #7]
 803fe02:	3301      	adds	r3, #1
 803fe04:	b2db      	uxtb	r3, r3
 803fe06:	4618      	mov	r0, r3
 803fe08:	f7ff feca 	bl	803fba0 <gos_sysmonSendResponse>
}
 803fe0c:	e000      	b.n	803fe10 <gos_sysmonHandleTaskDataGet+0x1b0>
                    break;
 803fe0e:	bf00      	nop
}
 803fe10:	bf00      	nop
 803fe12:	3710      	adds	r7, #16
 803fe14:	46bd      	mov	sp, r7
 803fe16:	bd80      	pop	{r7, pc}
 803fe18:	2000fbdc 	.word	0x2000fbdc
 803fe1c:	2000fbd8 	.word	0x2000fbd8
 803fe20:	2000fc34 	.word	0x2000fc34
 803fe24:	2000fc3e 	.word	0x2000fc3e
 803fe28:	2000fbe2 	.word	0x2000fbe2

0803fe2c <gos_sysmonHandleTaskVariableDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskVariableDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 803fe2c:	b580      	push	{r7, lr}
 803fe2e:	b084      	sub	sp, #16
 803fe30:	af00      	add	r7, sp, #0
 803fe32:	4603      	mov	r3, r0
 803fe34:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 803fe36:	2300      	movs	r3, #0
 803fe38:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 803fe3a:	2349      	movs	r3, #73	; 0x49
 803fe3c:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskVariableDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 803fe3e:	79fb      	ldrb	r3, [r7, #7]
 803fe40:	4618      	mov	r0, r3
 803fe42:	f000 f9dd 	bl	8040200 <gos_sysmonCheckMessage>
 803fe46:	4603      	mov	r3, r0
 803fe48:	461a      	mov	r2, r3
 803fe4a:	4b49      	ldr	r3, [pc, #292]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803fe4c:	701a      	strb	r2, [r3, #0]

    if (taskVariableDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 803fe4e:	4b48      	ldr	r3, [pc, #288]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803fe50:	781b      	ldrb	r3, [r3, #0]
 803fe52:	2b28      	cmp	r3, #40	; 0x28
 803fe54:	f040 8087 	bne.w	803ff66 <gos_sysmonHandleTaskVariableDataGet+0x13a>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 803fe58:	4b46      	ldr	r3, [pc, #280]	; (803ff74 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 803fe5a:	881b      	ldrh	r3, [r3, #0]
 803fe5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 803fe60:	4293      	cmp	r3, r2
 803fe62:	d14a      	bne.n	803fefa <gos_sysmonHandleTaskVariableDataGet+0xce>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803fe64:	2300      	movs	r3, #0
 803fe66:	81fb      	strh	r3, [r7, #14]
 803fe68:	e043      	b.n	803fef2 <gos_sysmonHandleTaskVariableDataGet+0xc6>
            {
                if (breakLoop == GOS_TRUE)
 803fe6a:	7b7b      	ldrb	r3, [r7, #13]
 803fe6c:	2b36      	cmp	r3, #54	; 0x36
 803fe6e:	d079      	beq.n	803ff64 <gos_sysmonHandleTaskVariableDataGet+0x138>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 803fe70:	89fb      	ldrh	r3, [r7, #14]
 803fe72:	4941      	ldr	r1, [pc, #260]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803fe74:	4618      	mov	r0, r3
 803fe76:	f7fd f925 	bl	803d0c4 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 803fe7a:	4b3f      	ldr	r3, [pc, #252]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803fe7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 803fe7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803fe82:	d028      	beq.n	803fed6 <gos_sysmonHandleTaskVariableDataGet+0xaa>
                {
                    taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 803fe84:	4b3c      	ldr	r3, [pc, #240]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803fe86:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 803fe8a:	4b39      	ldr	r3, [pc, #228]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803fe8c:	829a      	strh	r2, [r3, #20]
                    taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 803fe8e:	4b3a      	ldr	r3, [pc, #232]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803fe90:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 803fe94:	4b36      	ldr	r3, [pc, #216]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803fe96:	825a      	strh	r2, [r3, #18]
                    taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 803fe98:	4b37      	ldr	r3, [pc, #220]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803fe9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 803fe9e:	4b34      	ldr	r3, [pc, #208]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803fea0:	821a      	strh	r2, [r3, #16]
                    taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 803fea2:	4b35      	ldr	r3, [pc, #212]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803fea4:	799a      	ldrb	r2, [r3, #6]
 803fea6:	4b32      	ldr	r3, [pc, #200]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803fea8:	709a      	strb	r2, [r3, #2]
                    taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 803feaa:	4b33      	ldr	r3, [pc, #204]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803feac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803feae:	4a30      	ldr	r2, [pc, #192]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803feb0:	f8c2 3003 	str.w	r3, [r2, #3]
                    taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 803feb4:	4b30      	ldr	r3, [pc, #192]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803feb6:	791a      	ldrb	r2, [r3, #4]
 803feb8:	4b2d      	ldr	r3, [pc, #180]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803feba:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 803febc:	4a2c      	ldr	r2, [pc, #176]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803febe:	4b2e      	ldr	r3, [pc, #184]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803fec0:	3207      	adds	r2, #7
 803fec2:	334c      	adds	r3, #76	; 0x4c
 803fec4:	cb03      	ldmia	r3!, {r0, r1}
 803fec6:	6010      	str	r0, [r2, #0]
 803fec8:	6051      	str	r1, [r2, #4]
 803feca:	781b      	ldrb	r3, [r3, #0]
 803fecc:	7213      	strb	r3, [r2, #8]

                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 803fece:	4b28      	ldr	r3, [pc, #160]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803fed0:	2228      	movs	r2, #40	; 0x28
 803fed2:	701a      	strb	r2, [r3, #0]
 803fed4:	e004      	b.n	803fee0 <gos_sysmonHandleTaskVariableDataGet+0xb4>

                }
                else
                {
                    // Last task found.
                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 803fed6:	4b26      	ldr	r3, [pc, #152]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803fed8:	2263      	movs	r2, #99	; 0x63
 803feda:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 803fedc:	2336      	movs	r3, #54	; 0x36
 803fede:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 803fee0:	79fb      	ldrb	r3, [r7, #7]
 803fee2:	3301      	adds	r3, #1
 803fee4:	b2db      	uxtb	r3, r3
 803fee6:	4618      	mov	r0, r3
 803fee8:	f7ff fe5a 	bl	803fba0 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 803feec:	89fb      	ldrh	r3, [r7, #14]
 803feee:	3301      	adds	r3, #1
 803fef0:	81fb      	strh	r3, [r7, #14]
 803fef2:	89fb      	ldrh	r3, [r7, #14]
 803fef4:	2b2f      	cmp	r3, #47	; 0x2f
 803fef6:	d9b8      	bls.n	803fe6a <gos_sysmonHandleTaskVariableDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 803fef8:	e035      	b.n	803ff66 <gos_sysmonHandleTaskVariableDataGet+0x13a>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 803fefa:	4b1e      	ldr	r3, [pc, #120]	; (803ff74 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 803fefc:	881b      	ldrh	r3, [r3, #0]
 803fefe:	491e      	ldr	r1, [pc, #120]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803ff00:	4618      	mov	r0, r3
 803ff02:	f7fd f8df 	bl	803d0c4 <gos_taskGetDataByIndex>
            taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 803ff06:	4b1c      	ldr	r3, [pc, #112]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803ff08:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 803ff0c:	4b18      	ldr	r3, [pc, #96]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803ff0e:	829a      	strh	r2, [r3, #20]
            taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 803ff10:	4b19      	ldr	r3, [pc, #100]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803ff12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 803ff16:	4b16      	ldr	r3, [pc, #88]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803ff18:	825a      	strh	r2, [r3, #18]
            taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 803ff1a:	4b17      	ldr	r3, [pc, #92]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803ff1c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 803ff20:	4b13      	ldr	r3, [pc, #76]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803ff22:	821a      	strh	r2, [r3, #16]
            taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 803ff24:	4b14      	ldr	r3, [pc, #80]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803ff26:	799a      	ldrb	r2, [r3, #6]
 803ff28:	4b11      	ldr	r3, [pc, #68]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803ff2a:	709a      	strb	r2, [r3, #2]
            taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 803ff2c:	4b12      	ldr	r3, [pc, #72]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803ff2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803ff30:	4a0f      	ldr	r2, [pc, #60]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803ff32:	f8c2 3003 	str.w	r3, [r2, #3]
            taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 803ff36:	4b10      	ldr	r3, [pc, #64]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803ff38:	791a      	ldrb	r2, [r3, #4]
 803ff3a:	4b0d      	ldr	r3, [pc, #52]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803ff3c:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 803ff3e:	4a0c      	ldr	r2, [pc, #48]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803ff40:	4b0d      	ldr	r3, [pc, #52]	; (803ff78 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 803ff42:	3207      	adds	r2, #7
 803ff44:	334c      	adds	r3, #76	; 0x4c
 803ff46:	cb03      	ldmia	r3!, {r0, r1}
 803ff48:	6010      	str	r0, [r2, #0]
 803ff4a:	6051      	str	r1, [r2, #4]
 803ff4c:	781b      	ldrb	r3, [r3, #0]
 803ff4e:	7213      	strb	r3, [r2, #8]
            taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 803ff50:	4b07      	ldr	r3, [pc, #28]	; (803ff70 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 803ff52:	2228      	movs	r2, #40	; 0x28
 803ff54:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 803ff56:	79fb      	ldrb	r3, [r7, #7]
 803ff58:	3301      	adds	r3, #1
 803ff5a:	b2db      	uxtb	r3, r3
 803ff5c:	4618      	mov	r0, r3
 803ff5e:	f7ff fe1f 	bl	803fba0 <gos_sysmonSendResponse>
}
 803ff62:	e000      	b.n	803ff66 <gos_sysmonHandleTaskVariableDataGet+0x13a>
                    break;
 803ff64:	bf00      	nop
}
 803ff66:	bf00      	nop
 803ff68:	3710      	adds	r7, #16
 803ff6a:	46bd      	mov	sp, r7
 803ff6c:	bd80      	pop	{r7, pc}
 803ff6e:	bf00      	nop
 803ff70:	2000fc1c 	.word	0x2000fc1c
 803ff74:	2000fbd8 	.word	0x2000fbd8
 803ff78:	2000fc34 	.word	0x2000fc34

0803ff7c <gos_sysmonHandleTaskModification>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskModification (gos_sysmonMessageEnum_t lutIndex)
{
 803ff7c:	b580      	push	{r7, lr}
 803ff7e:	b082      	sub	sp, #8
 803ff80:	af00      	add	r7, sp, #0
 803ff82:	4603      	mov	r3, r0
 803ff84:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    taskModifyResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 803ff86:	79fb      	ldrb	r3, [r7, #7]
 803ff88:	4618      	mov	r0, r3
 803ff8a:	f000 f939 	bl	8040200 <gos_sysmonCheckMessage>
 803ff8e:	4603      	mov	r3, r0
 803ff90:	461a      	mov	r2, r3
 803ff92:	4b63      	ldr	r3, [pc, #396]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 803ff94:	701a      	strb	r2, [r3, #0]

    if (taskModifyResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 803ff96:	4b62      	ldr	r3, [pc, #392]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 803ff98:	781b      	ldrb	r3, [r3, #0]
 803ff9a:	2b28      	cmp	r3, #40	; 0x28
 803ff9c:	f040 80b5 	bne.w	804010a <gos_sysmonHandleTaskModification+0x18e>
    {
        // Send specific task data.
        (void_t) gos_taskGetDataByIndex(taskModifyMessage.taskIndex, &taskDesc);
 803ffa0:	4b60      	ldr	r3, [pc, #384]	; (8040124 <gos_sysmonHandleTaskModification+0x1a8>)
 803ffa2:	881b      	ldrh	r3, [r3, #0]
 803ffa4:	4960      	ldr	r1, [pc, #384]	; (8040128 <gos_sysmonHandleTaskModification+0x1ac>)
 803ffa6:	4618      	mov	r0, r3
 803ffa8:	f7fd f88c 	bl	803d0c4 <gos_taskGetDataByIndex>

         // Perform request based on modification type.
         switch (taskModifyMessage.modificationType)
 803ffac:	4b5d      	ldr	r3, [pc, #372]	; (8040124 <gos_sysmonHandleTaskModification+0x1a8>)
 803ffae:	789b      	ldrb	r3, [r3, #2]
 803ffb0:	2b4a      	cmp	r3, #74	; 0x4a
 803ffb2:	f300 80a7 	bgt.w	8040104 <gos_sysmonHandleTaskModification+0x188>
 803ffb6:	2b31      	cmp	r3, #49	; 0x31
 803ffb8:	da04      	bge.n	803ffc4 <gos_sysmonHandleTaskModification+0x48>
 803ffba:	2b0c      	cmp	r3, #12
 803ffbc:	d03e      	beq.n	804003c <gos_sysmonHandleTaskModification+0xc0>
 803ffbe:	2b22      	cmp	r3, #34	; 0x22
 803ffc0:	d04c      	beq.n	804005c <gos_sysmonHandleTaskModification+0xe0>
 803ffc2:	e09f      	b.n	8040104 <gos_sysmonHandleTaskModification+0x188>
 803ffc4:	3b31      	subs	r3, #49	; 0x31
 803ffc6:	2b19      	cmp	r3, #25
 803ffc8:	f200 809c 	bhi.w	8040104 <gos_sysmonHandleTaskModification+0x188>
 803ffcc:	a201      	add	r2, pc, #4	; (adr r2, 803ffd4 <gos_sysmonHandleTaskModification+0x58>)
 803ffce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803ffd2:	bf00      	nop
 803ffd4:	0804007d 	.word	0x0804007d
 803ffd8:	08040105 	.word	0x08040105
 803ffdc:	08040105 	.word	0x08040105
 803ffe0:	0804009d 	.word	0x0804009d
 803ffe4:	08040105 	.word	0x08040105
 803ffe8:	08040105 	.word	0x08040105
 803ffec:	08040105 	.word	0x08040105
 803fff0:	08040105 	.word	0x08040105
 803fff4:	08040105 	.word	0x08040105
 803fff8:	08040105 	.word	0x08040105
 803fffc:	08040105 	.word	0x08040105
 8040000:	08040105 	.word	0x08040105
 8040004:	08040105 	.word	0x08040105
 8040008:	08040105 	.word	0x08040105
 804000c:	080400c5 	.word	0x080400c5
 8040010:	08040105 	.word	0x08040105
 8040014:	08040105 	.word	0x08040105
 8040018:	08040105 	.word	0x08040105
 804001c:	08040105 	.word	0x08040105
 8040020:	08040105 	.word	0x08040105
 8040024:	08040105 	.word	0x08040105
 8040028:	08040105 	.word	0x08040105
 804002c:	08040105 	.word	0x08040105
 8040030:	08040105 	.word	0x08040105
 8040034:	08040105 	.word	0x08040105
 8040038:	080400e5 	.word	0x080400e5
         {
             case GOS_SYSMON_TASK_MOD_TYPE_SUSPEND:
             {
                 if (gos_taskSuspend(taskDesc.taskId) == GOS_SUCCESS)
 804003c:	4b3a      	ldr	r3, [pc, #232]	; (8040128 <gos_sysmonHandleTaskModification+0x1ac>)
 804003e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8040040:	4618      	mov	r0, r3
 8040042:	f7fb fe51 	bl	803bce8 <gos_taskSuspend>
 8040046:	4603      	mov	r3, r0
 8040048:	2b55      	cmp	r3, #85	; 0x55
 804004a:	d103      	bne.n	8040054 <gos_sysmonHandleTaskModification+0xd8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 804004c:	4b34      	ldr	r3, [pc, #208]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 804004e:	2228      	movs	r2, #40	; 0x28
 8040050:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8040052:	e05a      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8040054:	4b32      	ldr	r3, [pc, #200]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 8040056:	2263      	movs	r2, #99	; 0x63
 8040058:	701a      	strb	r2, [r3, #0]
                 break;
 804005a:	e056      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_RESUME:
             {
                 if (gos_taskResume(taskDesc.taskId) == GOS_SUCCESS)
 804005c:	4b32      	ldr	r3, [pc, #200]	; (8040128 <gos_sysmonHandleTaskModification+0x1ac>)
 804005e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8040060:	4618      	mov	r0, r3
 8040062:	f7fb ff63 	bl	803bf2c <gos_taskResume>
 8040066:	4603      	mov	r3, r0
 8040068:	2b55      	cmp	r3, #85	; 0x55
 804006a:	d103      	bne.n	8040074 <gos_sysmonHandleTaskModification+0xf8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 804006c:	4b2c      	ldr	r3, [pc, #176]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 804006e:	2228      	movs	r2, #40	; 0x28
 8040070:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8040072:	e04a      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8040074:	4b2a      	ldr	r3, [pc, #168]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 8040076:	2263      	movs	r2, #99	; 0x63
 8040078:	701a      	strb	r2, [r3, #0]
                 break;
 804007a:	e046      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_DELETE:
             {
                 if (gos_taskDelete(taskDesc.taskId) == GOS_SUCCESS)
 804007c:	4b2a      	ldr	r3, [pc, #168]	; (8040128 <gos_sysmonHandleTaskModification+0x1ac>)
 804007e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8040080:	4618      	mov	r0, r3
 8040082:	f7fc f9fd 	bl	803c480 <gos_taskDelete>
 8040086:	4603      	mov	r3, r0
 8040088:	2b55      	cmp	r3, #85	; 0x55
 804008a:	d103      	bne.n	8040094 <gos_sysmonHandleTaskModification+0x118>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 804008c:	4b24      	ldr	r3, [pc, #144]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 804008e:	2228      	movs	r2, #40	; 0x28
 8040090:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8040092:	e03a      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8040094:	4b22      	ldr	r3, [pc, #136]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 8040096:	2263      	movs	r2, #99	; 0x63
 8040098:	701a      	strb	r2, [r3, #0]
                 break;
 804009a:	e036      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_BLOCK:
             {
                 if (gos_taskBlock(taskDesc.taskId, taskModifyMessage.param) == GOS_SUCCESS)
 804009c:	4b22      	ldr	r3, [pc, #136]	; (8040128 <gos_sysmonHandleTaskModification+0x1ac>)
 804009e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80400a0:	4a20      	ldr	r2, [pc, #128]	; (8040124 <gos_sysmonHandleTaskModification+0x1a8>)
 80400a2:	f8d2 2003 	ldr.w	r2, [r2, #3]
 80400a6:	4611      	mov	r1, r2
 80400a8:	4618      	mov	r0, r3
 80400aa:	f7fb ffed 	bl	803c088 <gos_taskBlock>
 80400ae:	4603      	mov	r3, r0
 80400b0:	2b55      	cmp	r3, #85	; 0x55
 80400b2:	d103      	bne.n	80400bc <gos_sysmonHandleTaskModification+0x140>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80400b4:	4b1a      	ldr	r3, [pc, #104]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 80400b6:	2228      	movs	r2, #40	; 0x28
 80400b8:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 80400ba:	e026      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80400bc:	4b18      	ldr	r3, [pc, #96]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 80400be:	2263      	movs	r2, #99	; 0x63
 80400c0:	701a      	strb	r2, [r3, #0]
                 break;
 80400c2:	e022      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_UNBLOCK:
             {
                 if (gos_taskUnblock(taskDesc.taskId) == GOS_SUCCESS)
 80400c4:	4b18      	ldr	r3, [pc, #96]	; (8040128 <gos_sysmonHandleTaskModification+0x1ac>)
 80400c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80400c8:	4618      	mov	r0, r3
 80400ca:	f7fc f8ef 	bl	803c2ac <gos_taskUnblock>
 80400ce:	4603      	mov	r3, r0
 80400d0:	2b55      	cmp	r3, #85	; 0x55
 80400d2:	d103      	bne.n	80400dc <gos_sysmonHandleTaskModification+0x160>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80400d4:	4b12      	ldr	r3, [pc, #72]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 80400d6:	2228      	movs	r2, #40	; 0x28
 80400d8:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 80400da:	e016      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80400dc:	4b10      	ldr	r3, [pc, #64]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 80400de:	2263      	movs	r2, #99	; 0x63
 80400e0:	701a      	strb	r2, [r3, #0]
                 break;
 80400e2:	e012      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_WAKEUP:
             {
                 if (gos_taskWakeup(taskDesc.taskId) == GOS_SUCCESS)
 80400e4:	4b10      	ldr	r3, [pc, #64]	; (8040128 <gos_sysmonHandleTaskModification+0x1ac>)
 80400e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80400e8:	4618      	mov	r0, r3
 80400ea:	f7fb fd37 	bl	803bb5c <gos_taskWakeup>
 80400ee:	4603      	mov	r3, r0
 80400f0:	2b55      	cmp	r3, #85	; 0x55
 80400f2:	d103      	bne.n	80400fc <gos_sysmonHandleTaskModification+0x180>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80400f4:	4b0a      	ldr	r3, [pc, #40]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 80400f6:	2228      	movs	r2, #40	; 0x28
 80400f8:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 80400fa:	e006      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80400fc:	4b08      	ldr	r3, [pc, #32]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 80400fe:	2263      	movs	r2, #99	; 0x63
 8040100:	701a      	strb	r2, [r3, #0]
                 break;
 8040102:	e002      	b.n	804010a <gos_sysmonHandleTaskModification+0x18e>
             }
             default:
             {
                 taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8040104:	4b06      	ldr	r3, [pc, #24]	; (8040120 <gos_sysmonHandleTaskModification+0x1a4>)
 8040106:	2263      	movs	r2, #99	; 0x63
 8040108:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 804010a:	79fb      	ldrb	r3, [r7, #7]
 804010c:	3301      	adds	r3, #1
 804010e:	b2db      	uxtb	r3, r3
 8040110:	4618      	mov	r0, r3
 8040112:	f7ff fd45 	bl	803fba0 <gos_sysmonSendResponse>
}
 8040116:	bf00      	nop
 8040118:	3708      	adds	r7, #8
 804011a:	46bd      	mov	sp, r7
 804011c:	bd80      	pop	{r7, pc}
 804011e:	bf00      	nop
 8040120:	2000fca8 	.word	0x2000fca8
 8040124:	2000fca0 	.word	0x2000fca0
 8040128:	2000fc34 	.word	0x2000fc34

0804012c <gos_sysmonHandleSysRuntimeGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSysRuntimeGet (gos_sysmonMessageEnum_t lutIndex)
{
 804012c:	b580      	push	{r7, lr}
 804012e:	b082      	sub	sp, #8
 8040130:	af00      	add	r7, sp, #0
 8040132:	4603      	mov	r3, r0
 8040134:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysRuntimeGetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8040136:	79fb      	ldrb	r3, [r7, #7]
 8040138:	4618      	mov	r0, r3
 804013a:	f000 f861 	bl	8040200 <gos_sysmonCheckMessage>
 804013e:	4603      	mov	r3, r0
 8040140:	461a      	mov	r2, r3
 8040142:	4b0e      	ldr	r3, [pc, #56]	; (804017c <gos_sysmonHandleSysRuntimeGet+0x50>)
 8040144:	701a      	strb	r2, [r3, #0]

    if (sysRuntimeGetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8040146:	4b0d      	ldr	r3, [pc, #52]	; (804017c <gos_sysmonHandleSysRuntimeGet+0x50>)
 8040148:	781b      	ldrb	r3, [r3, #0]
 804014a:	2b28      	cmp	r3, #40	; 0x28
 804014c:	d10c      	bne.n	8040168 <gos_sysmonHandleSysRuntimeGet+0x3c>
    {
        if (gos_runTimeGet(&sysRuntimeGetResultMessage.sysRuntime) == GOS_SUCCESS)
 804014e:	480c      	ldr	r0, [pc, #48]	; (8040180 <gos_sysmonHandleSysRuntimeGet+0x54>)
 8040150:	f000 f8d8 	bl	8040304 <gos_runTimeGet>
 8040154:	4603      	mov	r3, r0
 8040156:	2b55      	cmp	r3, #85	; 0x55
 8040158:	d103      	bne.n	8040162 <gos_sysmonHandleSysRuntimeGet+0x36>
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 804015a:	4b08      	ldr	r3, [pc, #32]	; (804017c <gos_sysmonHandleSysRuntimeGet+0x50>)
 804015c:	2228      	movs	r2, #40	; 0x28
 804015e:	701a      	strb	r2, [r3, #0]
 8040160:	e002      	b.n	8040168 <gos_sysmonHandleSysRuntimeGet+0x3c>
        }
        else
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8040162:	4b06      	ldr	r3, [pc, #24]	; (804017c <gos_sysmonHandleSysRuntimeGet+0x50>)
 8040164:	2263      	movs	r2, #99	; 0x63
 8040166:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8040168:	79fb      	ldrb	r3, [r7, #7]
 804016a:	3301      	adds	r3, #1
 804016c:	b2db      	uxtb	r3, r3
 804016e:	4618      	mov	r0, r3
 8040170:	f7ff fd16 	bl	803fba0 <gos_sysmonSendResponse>
}
 8040174:	bf00      	nop
 8040176:	3708      	adds	r7, #8
 8040178:	46bd      	mov	sp, r7
 804017a:	bd80      	pop	{r7, pc}
 804017c:	2000fcac 	.word	0x2000fcac
 8040180:	2000fcad 	.word	0x2000fcad

08040184 <gos_sysmonHandleSystimeSet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSystimeSet (gos_sysmonMessageEnum_t lutIndex)
{
 8040184:	b580      	push	{r7, lr}
 8040186:	b082      	sub	sp, #8
 8040188:	af00      	add	r7, sp, #0
 804018a:	4603      	mov	r3, r0
 804018c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysTimeSetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 804018e:	79fb      	ldrb	r3, [r7, #7]
 8040190:	4618      	mov	r0, r3
 8040192:	f000 f835 	bl	8040200 <gos_sysmonCheckMessage>
 8040196:	4603      	mov	r3, r0
 8040198:	461a      	mov	r2, r3
 804019a:	4b0e      	ldr	r3, [pc, #56]	; (80401d4 <gos_sysmonHandleSystimeSet+0x50>)
 804019c:	701a      	strb	r2, [r3, #0]

    if (sysTimeSetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 804019e:	4b0d      	ldr	r3, [pc, #52]	; (80401d4 <gos_sysmonHandleSystimeSet+0x50>)
 80401a0:	781b      	ldrb	r3, [r3, #0]
 80401a2:	2b28      	cmp	r3, #40	; 0x28
 80401a4:	d10c      	bne.n	80401c0 <gos_sysmonHandleSystimeSet+0x3c>
    {
        if (gos_timeSet(&sysTimeSetMessage.desiredSystemTime) == GOS_SUCCESS)
 80401a6:	480c      	ldr	r0, [pc, #48]	; (80401d8 <gos_sysmonHandleSystimeSet+0x54>)
 80401a8:	f000 f890 	bl	80402cc <gos_timeSet>
 80401ac:	4603      	mov	r3, r0
 80401ae:	2b55      	cmp	r3, #85	; 0x55
 80401b0:	d103      	bne.n	80401ba <gos_sysmonHandleSystimeSet+0x36>
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 80401b2:	4b08      	ldr	r3, [pc, #32]	; (80401d4 <gos_sysmonHandleSystimeSet+0x50>)
 80401b4:	2228      	movs	r2, #40	; 0x28
 80401b6:	701a      	strb	r2, [r3, #0]
 80401b8:	e002      	b.n	80401c0 <gos_sysmonHandleSystimeSet+0x3c>
        }
        else
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 80401ba:	4b06      	ldr	r3, [pc, #24]	; (80401d4 <gos_sysmonHandleSystimeSet+0x50>)
 80401bc:	2263      	movs	r2, #99	; 0x63
 80401be:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 80401c0:	79fb      	ldrb	r3, [r7, #7]
 80401c2:	3301      	adds	r3, #1
 80401c4:	b2db      	uxtb	r3, r3
 80401c6:	4618      	mov	r0, r3
 80401c8:	f7ff fcea 	bl	803fba0 <gos_sysmonSendResponse>
}
 80401cc:	bf00      	nop
 80401ce:	3708      	adds	r7, #8
 80401d0:	46bd      	mov	sp, r7
 80401d2:	bd80      	pop	{r7, pc}
 80401d4:	2000fcc4 	.word	0x2000fcc4
 80401d8:	2000fcb8 	.word	0x2000fcb8

080401dc <gos_sysmonHandleResetRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleResetRequest (gos_sysmonMessageEnum_t lutIndex)
{
 80401dc:	b580      	push	{r7, lr}
 80401de:	b082      	sub	sp, #8
 80401e0:	af00      	add	r7, sp, #0
 80401e2:	4603      	mov	r3, r0
 80401e4:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (gos_sysmonCheckMessage(lutIndex) == GOS_SYSMON_MSG_RES_OK)
 80401e6:	79fb      	ldrb	r3, [r7, #7]
 80401e8:	4618      	mov	r0, r3
 80401ea:	f000 f809 	bl	8040200 <gos_sysmonCheckMessage>
 80401ee:	4603      	mov	r3, r0
 80401f0:	2b28      	cmp	r3, #40	; 0x28
 80401f2:	d101      	bne.n	80401f8 <gos_sysmonHandleResetRequest+0x1c>
    {
        gos_kernelReset();
 80401f4:	f7fa fa5c 	bl	803a6b0 <gos_kernelReset>
    }
    else
    {
        // Nothing to do.
    }
}
 80401f8:	bf00      	nop
 80401fa:	3708      	adds	r7, #8
 80401fc:	46bd      	mov	sp, r7
 80401fe:	bd80      	pop	{r7, pc}

08040200 <gos_sysmonCheckMessage>:
 * @retval  GOS_SYSMON_MSG_RES_OK          : Message OK.
 * @retval  GOS_SYSMON_MSG_INV_PV          : Invalid protocol version.
 * @retval  GOS_SYSMON_MSG_INV_PAYLOAD_CRC : Payload CRC mismatch.
 */
GOS_STATIC gos_sysmonMessageResult_t gos_sysmonCheckMessage (gos_sysmonMessageEnum_t lutIndex)
{
 8040200:	b580      	push	{r7, lr}
 8040202:	b084      	sub	sp, #16
 8040204:	af00      	add	r7, sp, #0
 8040206:	4603      	mov	r3, r0
 8040208:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_sysmonMessageResult_t result = GOS_SYSMON_MSG_RES_OK;
 804020a:	2328      	movs	r3, #40	; 0x28
 804020c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check if there is a payload to be copied.
    if (sysmonLut[lutIndex].pMessagePayload != NULL)
 804020e:	79fb      	ldrb	r3, [r7, #7]
 8040210:	4a0d      	ldr	r2, [pc, #52]	; (8040248 <gos_sysmonCheckMessage+0x48>)
 8040212:	011b      	lsls	r3, r3, #4
 8040214:	4413      	add	r3, r2
 8040216:	3304      	adds	r3, #4
 8040218:	681b      	ldr	r3, [r3, #0]
 804021a:	2b00      	cmp	r3, #0
 804021c:	d00f      	beq.n	804023e <gos_sysmonCheckMessage+0x3e>
    {
        (void_t) memcpy(sysmonLut[lutIndex].pMessagePayload, (void_t*)receiveBuffer, sysmonLut[lutIndex].payloadSize);
 804021e:	79fb      	ldrb	r3, [r7, #7]
 8040220:	4a09      	ldr	r2, [pc, #36]	; (8040248 <gos_sysmonCheckMessage+0x48>)
 8040222:	011b      	lsls	r3, r3, #4
 8040224:	4413      	add	r3, r2
 8040226:	3304      	adds	r3, #4
 8040228:	6818      	ldr	r0, [r3, #0]
 804022a:	79fb      	ldrb	r3, [r7, #7]
 804022c:	4a06      	ldr	r2, [pc, #24]	; (8040248 <gos_sysmonCheckMessage+0x48>)
 804022e:	011b      	lsls	r3, r3, #4
 8040230:	4413      	add	r3, r2
 8040232:	3308      	adds	r3, #8
 8040234:	881b      	ldrh	r3, [r3, #0]
 8040236:	461a      	mov	r2, r3
 8040238:	4904      	ldr	r1, [pc, #16]	; (804024c <gos_sysmonCheckMessage+0x4c>)
 804023a:	f002 fd7e 	bl	8042d3a <memcpy>
    else
    {
        // Nothing to do.
    }

    return result;
 804023e:	7bfb      	ldrb	r3, [r7, #15]
}
 8040240:	4618      	mov	r0, r3
 8040242:	3710      	adds	r7, #16
 8040244:	46bd      	mov	sp, r7
 8040246:	bd80      	pop	{r7, pc}
 8040248:	0804a108 	.word	0x0804a108
 804024c:	2000fb50 	.word	0x2000fb50

08040250 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 8040250:	b580      	push	{r7, lr}
 8040252:	b082      	sub	sp, #8
 8040254:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_SUCCESS;
 8040256:	2355      	movs	r3, #85	; 0x55
 8040258:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                          != GOS_SUCCESS ||
 804025a:	480a      	ldr	r0, [pc, #40]	; (8040284 <gos_timeInit+0x34>)
 804025c:	f7ff f9fa 	bl	803f654 <gos_signalCreate>
 8040260:	4603      	mov	r3, r0
 8040262:	2b55      	cmp	r3, #85	; 0x55
 8040264:	d106      	bne.n	8040274 <gos_timeInit+0x24>
        gos_taskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) != GOS_SUCCESS
 8040266:	4908      	ldr	r1, [pc, #32]	; (8040288 <gos_timeInit+0x38>)
 8040268:	4808      	ldr	r0, [pc, #32]	; (804028c <gos_timeInit+0x3c>)
 804026a:	f7fb fa5f 	bl	803b72c <gos_taskRegister>
 804026e:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                          != GOS_SUCCESS ||
 8040270:	2b55      	cmp	r3, #85	; 0x55
 8040272:	d001      	beq.n	8040278 <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_ERROR;
 8040274:	23ae      	movs	r3, #174	; 0xae
 8040276:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 8040278:	79fb      	ldrb	r3, [r7, #7]
}
 804027a:	4618      	mov	r0, r3
 804027c:	3708      	adds	r7, #8
 804027e:	46bd      	mov	sp, r7
 8040280:	bd80      	pop	{r7, pc}
 8040282:	bf00      	nop
 8040284:	2000fd34 	.word	0x2000fd34
 8040288:	2000fd32 	.word	0x2000fd32
 804028c:	20003410 	.word	0x20003410

08040290 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 8040290:	b480      	push	{r7}
 8040292:	b085      	sub	sp, #20
 8040294:	af00      	add	r7, sp, #0
 8040296:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 8040298:	23ae      	movs	r3, #174	; 0xae
 804029a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 804029c:	687b      	ldr	r3, [r7, #4]
 804029e:	2b00      	cmp	r3, #0
 80402a0:	d00a      	beq.n	80402b8 <gos_timeGet+0x28>
    {
        (void_t) memcpy((void_t*)pTime, (GOS_CONST void_t*)&systemTime, sizeof(systemTime));
 80402a2:	687b      	ldr	r3, [r7, #4]
 80402a4:	4908      	ldr	r1, [pc, #32]	; (80402c8 <gos_timeGet+0x38>)
 80402a6:	461a      	mov	r2, r3
 80402a8:	460b      	mov	r3, r1
 80402aa:	cb03      	ldmia	r3!, {r0, r1}
 80402ac:	6010      	str	r0, [r2, #0]
 80402ae:	6051      	str	r1, [r2, #4]
 80402b0:	881b      	ldrh	r3, [r3, #0]
 80402b2:	8113      	strh	r3, [r2, #8]

        timeGetResult = GOS_SUCCESS;
 80402b4:	2355      	movs	r3, #85	; 0x55
 80402b6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 80402b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80402ba:	4618      	mov	r0, r3
 80402bc:	3714      	adds	r7, #20
 80402be:	46bd      	mov	sp, r7
 80402c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80402c4:	4770      	bx	lr
 80402c6:	bf00      	nop
 80402c8:	20003404 	.word	0x20003404

080402cc <gos_timeSet>:

/*
 * Function: gos_timeSet
 */
gos_result_t gos_timeSet (gos_time_t* pTime)
{
 80402cc:	b480      	push	{r7}
 80402ce:	b085      	sub	sp, #20
 80402d0:	af00      	add	r7, sp, #0
 80402d2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeSetResult = GOS_ERROR;
 80402d4:	23ae      	movs	r3, #174	; 0xae
 80402d6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 80402d8:	687b      	ldr	r3, [r7, #4]
 80402da:	2b00      	cmp	r3, #0
 80402dc:	d008      	beq.n	80402f0 <gos_timeSet+0x24>
    {
        (void_t) memcpy((void_t*)&systemTime, (GOS_CONST void_t*)pTime, sizeof(*pTime));
 80402de:	4b08      	ldr	r3, [pc, #32]	; (8040300 <gos_timeSet+0x34>)
 80402e0:	687a      	ldr	r2, [r7, #4]
 80402e2:	6810      	ldr	r0, [r2, #0]
 80402e4:	6851      	ldr	r1, [r2, #4]
 80402e6:	c303      	stmia	r3!, {r0, r1}
 80402e8:	8912      	ldrh	r2, [r2, #8]
 80402ea:	801a      	strh	r2, [r3, #0]

        timeSetResult = GOS_SUCCESS;
 80402ec:	2355      	movs	r3, #85	; 0x55
 80402ee:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeSetResult;
 80402f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80402f2:	4618      	mov	r0, r3
 80402f4:	3714      	adds	r7, #20
 80402f6:	46bd      	mov	sp, r7
 80402f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80402fc:	4770      	bx	lr
 80402fe:	bf00      	nop
 8040300:	20003404 	.word	0x20003404

08040304 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 8040304:	b480      	push	{r7}
 8040306:	b085      	sub	sp, #20
 8040308:	af00      	add	r7, sp, #0
 804030a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 804030c:	23ae      	movs	r3, #174	; 0xae
 804030e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8040310:	687b      	ldr	r3, [r7, #4]
 8040312:	2b00      	cmp	r3, #0
 8040314:	d00a      	beq.n	804032c <gos_runTimeGet+0x28>
    {
        (void_t) memcpy((void_t*)pRunTime, (void_t*)&systemRunTime, sizeof(systemRunTime));
 8040316:	687b      	ldr	r3, [r7, #4]
 8040318:	4908      	ldr	r1, [pc, #32]	; (804033c <gos_runTimeGet+0x38>)
 804031a:	461a      	mov	r2, r3
 804031c:	460b      	mov	r3, r1
 804031e:	cb03      	ldmia	r3!, {r0, r1}
 8040320:	6010      	str	r0, [r2, #0]
 8040322:	6051      	str	r1, [r2, #4]
 8040324:	781b      	ldrb	r3, [r3, #0]
 8040326:	7213      	strb	r3, [r2, #8]

        runtimeGetResult = GOS_SUCCESS;
 8040328:	2355      	movs	r3, #85	; 0x55
 804032a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 804032c:	7bfb      	ldrb	r3, [r7, #15]
}
 804032e:	4618      	mov	r0, r3
 8040330:	3714      	adds	r7, #20
 8040332:	46bd      	mov	sp, r7
 8040334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040338:	4770      	bx	lr
 804033a:	bf00      	nop
 804033c:	2000fd28 	.word	0x2000fd28

08040340 <gos_timeAddMilliseconds>:

/*
 * Function: gos_timeAddMilliseconds
 */
gos_result_t gos_timeAddMilliseconds (gos_time_t* pTime, u16_t milliseconds)
{
 8040340:	b480      	push	{r7}
 8040342:	b085      	sub	sp, #20
 8040344:	af00      	add	r7, sp, #0
 8040346:	6078      	str	r0, [r7, #4]
 8040348:	460b      	mov	r3, r1
 804034a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddMillisecondsResult = GOS_ERROR;
 804034c:	23ae      	movs	r3, #174	; 0xae
 804034e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 8040350:	687b      	ldr	r3, [r7, #4]
 8040352:	2b00      	cmp	r3, #0
 8040354:	f000 80e5 	beq.w	8040522 <gos_timeAddMilliseconds+0x1e2>
    {
        // 1. Raw increment.
        pTime->milliseconds += milliseconds;
 8040358:	687b      	ldr	r3, [r7, #4]
 804035a:	881b      	ldrh	r3, [r3, #0]
 804035c:	b29a      	uxth	r2, r3
 804035e:	887b      	ldrh	r3, [r7, #2]
 8040360:	4413      	add	r3, r2
 8040362:	b29a      	uxth	r2, r3
 8040364:	687b      	ldr	r3, [r7, #4]
 8040366:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->milliseconds >= 1000u)
 8040368:	687b      	ldr	r3, [r7, #4]
 804036a:	881b      	ldrh	r3, [r3, #0]
 804036c:	b29b      	uxth	r3, r3
 804036e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8040372:	f0c0 80d4 	bcc.w	804051e <gos_timeAddMilliseconds+0x1de>
        {
            pTime->seconds += pTime->milliseconds / 1000u;
 8040376:	687b      	ldr	r3, [r7, #4]
 8040378:	789a      	ldrb	r2, [r3, #2]
 804037a:	687b      	ldr	r3, [r7, #4]
 804037c:	881b      	ldrh	r3, [r3, #0]
 804037e:	b29b      	uxth	r3, r3
 8040380:	496b      	ldr	r1, [pc, #428]	; (8040530 <gos_timeAddMilliseconds+0x1f0>)
 8040382:	fba1 1303 	umull	r1, r3, r1, r3
 8040386:	099b      	lsrs	r3, r3, #6
 8040388:	b29b      	uxth	r3, r3
 804038a:	b2db      	uxtb	r3, r3
 804038c:	4413      	add	r3, r2
 804038e:	b2da      	uxtb	r2, r3
 8040390:	687b      	ldr	r3, [r7, #4]
 8040392:	709a      	strb	r2, [r3, #2]
            pTime->milliseconds %= 1000u;
 8040394:	687b      	ldr	r3, [r7, #4]
 8040396:	881b      	ldrh	r3, [r3, #0]
 8040398:	b29b      	uxth	r3, r3
 804039a:	4a65      	ldr	r2, [pc, #404]	; (8040530 <gos_timeAddMilliseconds+0x1f0>)
 804039c:	fba2 1203 	umull	r1, r2, r2, r3
 80403a0:	0992      	lsrs	r2, r2, #6
 80403a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80403a6:	fb01 f202 	mul.w	r2, r1, r2
 80403aa:	1a9b      	subs	r3, r3, r2
 80403ac:	b29a      	uxth	r2, r3
 80403ae:	687b      	ldr	r3, [r7, #4]
 80403b0:	801a      	strh	r2, [r3, #0]

            if (pTime->seconds >= 60u)
 80403b2:	687b      	ldr	r3, [r7, #4]
 80403b4:	789b      	ldrb	r3, [r3, #2]
 80403b6:	2b3b      	cmp	r3, #59	; 0x3b
 80403b8:	f240 80b1 	bls.w	804051e <gos_timeAddMilliseconds+0x1de>
            {
                pTime->minutes += pTime->seconds / 60u;
 80403bc:	687b      	ldr	r3, [r7, #4]
 80403be:	78da      	ldrb	r2, [r3, #3]
 80403c0:	687b      	ldr	r3, [r7, #4]
 80403c2:	789b      	ldrb	r3, [r3, #2]
 80403c4:	495b      	ldr	r1, [pc, #364]	; (8040534 <gos_timeAddMilliseconds+0x1f4>)
 80403c6:	fba1 1303 	umull	r1, r3, r1, r3
 80403ca:	095b      	lsrs	r3, r3, #5
 80403cc:	b2db      	uxtb	r3, r3
 80403ce:	4413      	add	r3, r2
 80403d0:	b2da      	uxtb	r2, r3
 80403d2:	687b      	ldr	r3, [r7, #4]
 80403d4:	70da      	strb	r2, [r3, #3]
                pTime->seconds %= 60u;
 80403d6:	687b      	ldr	r3, [r7, #4]
 80403d8:	789a      	ldrb	r2, [r3, #2]
 80403da:	4b56      	ldr	r3, [pc, #344]	; (8040534 <gos_timeAddMilliseconds+0x1f4>)
 80403dc:	fba3 1302 	umull	r1, r3, r3, r2
 80403e0:	0959      	lsrs	r1, r3, #5
 80403e2:	460b      	mov	r3, r1
 80403e4:	011b      	lsls	r3, r3, #4
 80403e6:	1a5b      	subs	r3, r3, r1
 80403e8:	009b      	lsls	r3, r3, #2
 80403ea:	1ad3      	subs	r3, r2, r3
 80403ec:	b2da      	uxtb	r2, r3
 80403ee:	687b      	ldr	r3, [r7, #4]
 80403f0:	709a      	strb	r2, [r3, #2]

                if (pTime->minutes >= 60u)
 80403f2:	687b      	ldr	r3, [r7, #4]
 80403f4:	78db      	ldrb	r3, [r3, #3]
 80403f6:	2b3b      	cmp	r3, #59	; 0x3b
 80403f8:	f240 8091 	bls.w	804051e <gos_timeAddMilliseconds+0x1de>
                {
                    pTime->hours += pTime->minutes / 60u;
 80403fc:	687b      	ldr	r3, [r7, #4]
 80403fe:	791a      	ldrb	r2, [r3, #4]
 8040400:	687b      	ldr	r3, [r7, #4]
 8040402:	78db      	ldrb	r3, [r3, #3]
 8040404:	494b      	ldr	r1, [pc, #300]	; (8040534 <gos_timeAddMilliseconds+0x1f4>)
 8040406:	fba1 1303 	umull	r1, r3, r1, r3
 804040a:	095b      	lsrs	r3, r3, #5
 804040c:	b2db      	uxtb	r3, r3
 804040e:	4413      	add	r3, r2
 8040410:	b2da      	uxtb	r2, r3
 8040412:	687b      	ldr	r3, [r7, #4]
 8040414:	711a      	strb	r2, [r3, #4]
                    pTime->minutes %= 60u;
 8040416:	687b      	ldr	r3, [r7, #4]
 8040418:	78da      	ldrb	r2, [r3, #3]
 804041a:	4b46      	ldr	r3, [pc, #280]	; (8040534 <gos_timeAddMilliseconds+0x1f4>)
 804041c:	fba3 1302 	umull	r1, r3, r3, r2
 8040420:	0959      	lsrs	r1, r3, #5
 8040422:	460b      	mov	r3, r1
 8040424:	011b      	lsls	r3, r3, #4
 8040426:	1a5b      	subs	r3, r3, r1
 8040428:	009b      	lsls	r3, r3, #2
 804042a:	1ad3      	subs	r3, r2, r3
 804042c:	b2da      	uxtb	r2, r3
 804042e:	687b      	ldr	r3, [r7, #4]
 8040430:	70da      	strb	r2, [r3, #3]

                    if (pTime->hours >= 24u)
 8040432:	687b      	ldr	r3, [r7, #4]
 8040434:	791b      	ldrb	r3, [r3, #4]
 8040436:	2b17      	cmp	r3, #23
 8040438:	d971      	bls.n	804051e <gos_timeAddMilliseconds+0x1de>
                    {
                        pTime->days += pTime->hours / 24u;
 804043a:	687b      	ldr	r3, [r7, #4]
 804043c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8040440:	b29a      	uxth	r2, r3
 8040442:	687b      	ldr	r3, [r7, #4]
 8040444:	791b      	ldrb	r3, [r3, #4]
 8040446:	493c      	ldr	r1, [pc, #240]	; (8040538 <gos_timeAddMilliseconds+0x1f8>)
 8040448:	fba1 1303 	umull	r1, r3, r1, r3
 804044c:	091b      	lsrs	r3, r3, #4
 804044e:	b2db      	uxtb	r3, r3
 8040450:	b29b      	uxth	r3, r3
 8040452:	4413      	add	r3, r2
 8040454:	b29a      	uxth	r2, r3
 8040456:	687b      	ldr	r3, [r7, #4]
 8040458:	f8a3 2005 	strh.w	r2, [r3, #5]
                        pTime->hours %= 24u;
 804045c:	687b      	ldr	r3, [r7, #4]
 804045e:	791a      	ldrb	r2, [r3, #4]
 8040460:	4b35      	ldr	r3, [pc, #212]	; (8040538 <gos_timeAddMilliseconds+0x1f8>)
 8040462:	fba3 1302 	umull	r1, r3, r3, r2
 8040466:	0919      	lsrs	r1, r3, #4
 8040468:	460b      	mov	r3, r1
 804046a:	005b      	lsls	r3, r3, #1
 804046c:	440b      	add	r3, r1
 804046e:	00db      	lsls	r3, r3, #3
 8040470:	1ad3      	subs	r3, r2, r3
 8040472:	b2da      	uxtb	r2, r3
 8040474:	687b      	ldr	r3, [r7, #4]
 8040476:	711a      	strb	r2, [r3, #4]

                        // Check days.
                        if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 8040478:	687b      	ldr	r3, [r7, #4]
 804047a:	891b      	ldrh	r3, [r3, #8]
 804047c:	b29b      	uxth	r3, r3
 804047e:	f003 0303 	and.w	r3, r3, #3
 8040482:	b29b      	uxth	r3, r3
 8040484:	2b00      	cmp	r3, #0
 8040486:	d117      	bne.n	80404b8 <gos_timeAddMilliseconds+0x178>
 8040488:	687b      	ldr	r3, [r7, #4]
 804048a:	79db      	ldrb	r3, [r3, #7]
 804048c:	2b02      	cmp	r3, #2
 804048e:	d113      	bne.n	80404b8 <gos_timeAddMilliseconds+0x178>
 8040490:	687b      	ldr	r3, [r7, #4]
 8040492:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8040496:	b29b      	uxth	r3, r3
 8040498:	2b1d      	cmp	r3, #29
 804049a:	d90d      	bls.n	80404b8 <gos_timeAddMilliseconds+0x178>
                        {
                            pTime->days = 1u;
 804049c:	687b      	ldr	r3, [r7, #4]
 804049e:	2200      	movs	r2, #0
 80404a0:	f042 0201 	orr.w	r2, r2, #1
 80404a4:	715a      	strb	r2, [r3, #5]
 80404a6:	2200      	movs	r2, #0
 80404a8:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 80404aa:	687b      	ldr	r3, [r7, #4]
 80404ac:	79db      	ldrb	r3, [r3, #7]
 80404ae:	3301      	adds	r3, #1
 80404b0:	b2da      	uxtb	r2, r3
 80404b2:	687b      	ldr	r3, [r7, #4]
 80404b4:	71da      	strb	r2, [r3, #7]
 80404b6:	e024      	b.n	8040502 <gos_timeAddMilliseconds+0x1c2>
                        }
                        else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 80404b8:	687b      	ldr	r3, [r7, #4]
 80404ba:	891b      	ldrh	r3, [r3, #8]
 80404bc:	b29b      	uxth	r3, r3
 80404be:	f003 0303 	and.w	r3, r3, #3
 80404c2:	b29b      	uxth	r3, r3
 80404c4:	2b00      	cmp	r3, #0
 80404c6:	d103      	bne.n	80404d0 <gos_timeAddMilliseconds+0x190>
 80404c8:	687b      	ldr	r3, [r7, #4]
 80404ca:	79db      	ldrb	r3, [r3, #7]
 80404cc:	2b02      	cmp	r3, #2
 80404ce:	d018      	beq.n	8040502 <gos_timeAddMilliseconds+0x1c2>
                        {
                            // Wait.
                        }
                        else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 80404d0:	687b      	ldr	r3, [r7, #4]
 80404d2:	79db      	ldrb	r3, [r3, #7]
 80404d4:	3b01      	subs	r3, #1
 80404d6:	4a19      	ldr	r2, [pc, #100]	; (804053c <gos_timeAddMilliseconds+0x1fc>)
 80404d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80404dc:	687b      	ldr	r3, [r7, #4]
 80404de:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80404e2:	b29b      	uxth	r3, r3
 80404e4:	429a      	cmp	r2, r3
 80404e6:	d20c      	bcs.n	8040502 <gos_timeAddMilliseconds+0x1c2>
                        {
                            pTime->days = 1u;
 80404e8:	687b      	ldr	r3, [r7, #4]
 80404ea:	2200      	movs	r2, #0
 80404ec:	f042 0201 	orr.w	r2, r2, #1
 80404f0:	715a      	strb	r2, [r3, #5]
 80404f2:	2200      	movs	r2, #0
 80404f4:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 80404f6:	687b      	ldr	r3, [r7, #4]
 80404f8:	79db      	ldrb	r3, [r3, #7]
 80404fa:	3301      	adds	r3, #1
 80404fc:	b2da      	uxtb	r2, r3
 80404fe:	687b      	ldr	r3, [r7, #4]
 8040500:	71da      	strb	r2, [r3, #7]
                        {
                            // Nothing to do.
                        }

                        // Check months.
                        if (pTime->months == 13)
 8040502:	687b      	ldr	r3, [r7, #4]
 8040504:	79db      	ldrb	r3, [r3, #7]
 8040506:	2b0d      	cmp	r3, #13
 8040508:	d109      	bne.n	804051e <gos_timeAddMilliseconds+0x1de>
                        {
                            pTime->months = 1;
 804050a:	687b      	ldr	r3, [r7, #4]
 804050c:	2201      	movs	r2, #1
 804050e:	71da      	strb	r2, [r3, #7]
                            pTime->years++;
 8040510:	687b      	ldr	r3, [r7, #4]
 8040512:	891b      	ldrh	r3, [r3, #8]
 8040514:	b29b      	uxth	r3, r3
 8040516:	3301      	adds	r3, #1
 8040518:	b29a      	uxth	r2, r3
 804051a:	687b      	ldr	r3, [r7, #4]
 804051c:	811a      	strh	r2, [r3, #8]
            {
                // Nothing to do.
            }
        }

        timeAddMillisecondsResult = GOS_SUCCESS;
 804051e:	2355      	movs	r3, #85	; 0x55
 8040520:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddMillisecondsResult;
 8040522:	7bfb      	ldrb	r3, [r7, #15]
}
 8040524:	4618      	mov	r0, r3
 8040526:	3714      	adds	r7, #20
 8040528:	46bd      	mov	sp, r7
 804052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804052e:	4770      	bx	lr
 8040530:	10624dd3 	.word	0x10624dd3
 8040534:	88888889 	.word	0x88888889
 8040538:	aaaaaaab 	.word	0xaaaaaaab
 804053c:	0804a208 	.word	0x0804a208

08040540 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 8040540:	b480      	push	{r7}
 8040542:	b087      	sub	sp, #28
 8040544:	af00      	add	r7, sp, #0
 8040546:	60f8      	str	r0, [r7, #12]
 8040548:	60b9      	str	r1, [r7, #8]
 804054a:	4613      	mov	r3, r2
 804054c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 804054e:	23ae      	movs	r3, #174	; 0xae
 8040550:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 8040552:	68fb      	ldr	r3, [r7, #12]
 8040554:	2b00      	cmp	r3, #0
 8040556:	d063      	beq.n	8040620 <gos_runTimeAddMicroseconds+0xe0>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 8040558:	68fb      	ldr	r3, [r7, #12]
 804055a:	881b      	ldrh	r3, [r3, #0]
 804055c:	b29a      	uxth	r2, r3
 804055e:	88fb      	ldrh	r3, [r7, #6]
 8040560:	4413      	add	r3, r2
 8040562:	b29a      	uxth	r2, r3
 8040564:	68fb      	ldr	r3, [r7, #12]
 8040566:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 8040568:	68fb      	ldr	r3, [r7, #12]
 804056a:	881b      	ldrh	r3, [r3, #0]
 804056c:	b29b      	uxth	r3, r3
 804056e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8040572:	d355      	bcc.n	8040620 <gos_runTimeAddMicroseconds+0xe0>
        {
            pRunTime1->microseconds -= 1000u;
 8040574:	68fb      	ldr	r3, [r7, #12]
 8040576:	881b      	ldrh	r3, [r3, #0]
 8040578:	b29b      	uxth	r3, r3
 804057a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 804057e:	b29a      	uxth	r2, r3
 8040580:	68fb      	ldr	r3, [r7, #12]
 8040582:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 8040584:	68fb      	ldr	r3, [r7, #12]
 8040586:	885b      	ldrh	r3, [r3, #2]
 8040588:	b29b      	uxth	r3, r3
 804058a:	3301      	adds	r3, #1
 804058c:	b29a      	uxth	r2, r3
 804058e:	68fb      	ldr	r3, [r7, #12]
 8040590:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 8040592:	68fb      	ldr	r3, [r7, #12]
 8040594:	885b      	ldrh	r3, [r3, #2]
 8040596:	b29b      	uxth	r3, r3
 8040598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804059c:	d340      	bcc.n	8040620 <gos_runTimeAddMicroseconds+0xe0>
            {
                pRunTime1->milliseconds -= 1000u;
 804059e:	68fb      	ldr	r3, [r7, #12]
 80405a0:	885b      	ldrh	r3, [r3, #2]
 80405a2:	b29b      	uxth	r3, r3
 80405a4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80405a8:	b29a      	uxth	r2, r3
 80405aa:	68fb      	ldr	r3, [r7, #12]
 80405ac:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 80405ae:	68fb      	ldr	r3, [r7, #12]
 80405b0:	791b      	ldrb	r3, [r3, #4]
 80405b2:	3301      	adds	r3, #1
 80405b4:	b2da      	uxtb	r2, r3
 80405b6:	68fb      	ldr	r3, [r7, #12]
 80405b8:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 80405ba:	68fb      	ldr	r3, [r7, #12]
 80405bc:	791b      	ldrb	r3, [r3, #4]
 80405be:	2b3b      	cmp	r3, #59	; 0x3b
 80405c0:	d92e      	bls.n	8040620 <gos_runTimeAddMicroseconds+0xe0>
                {
                    pRunTime1->seconds -= 60u;
 80405c2:	68fb      	ldr	r3, [r7, #12]
 80405c4:	791b      	ldrb	r3, [r3, #4]
 80405c6:	3b3c      	subs	r3, #60	; 0x3c
 80405c8:	b2da      	uxtb	r2, r3
 80405ca:	68fb      	ldr	r3, [r7, #12]
 80405cc:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 80405ce:	68fb      	ldr	r3, [r7, #12]
 80405d0:	795b      	ldrb	r3, [r3, #5]
 80405d2:	3301      	adds	r3, #1
 80405d4:	b2da      	uxtb	r2, r3
 80405d6:	68fb      	ldr	r3, [r7, #12]
 80405d8:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 80405da:	68fb      	ldr	r3, [r7, #12]
 80405dc:	795b      	ldrb	r3, [r3, #5]
 80405de:	2b3b      	cmp	r3, #59	; 0x3b
 80405e0:	d91e      	bls.n	8040620 <gos_runTimeAddMicroseconds+0xe0>
                    {
                        pRunTime1->minutes -= 60u;
 80405e2:	68fb      	ldr	r3, [r7, #12]
 80405e4:	795b      	ldrb	r3, [r3, #5]
 80405e6:	3b3c      	subs	r3, #60	; 0x3c
 80405e8:	b2da      	uxtb	r2, r3
 80405ea:	68fb      	ldr	r3, [r7, #12]
 80405ec:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 80405ee:	68fb      	ldr	r3, [r7, #12]
 80405f0:	799b      	ldrb	r3, [r3, #6]
 80405f2:	3301      	adds	r3, #1
 80405f4:	b2da      	uxtb	r2, r3
 80405f6:	68fb      	ldr	r3, [r7, #12]
 80405f8:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 80405fa:	68fb      	ldr	r3, [r7, #12]
 80405fc:	799b      	ldrb	r3, [r3, #6]
 80405fe:	2b17      	cmp	r3, #23
 8040600:	d90e      	bls.n	8040620 <gos_runTimeAddMicroseconds+0xe0>
                        {
                            pRunTime1->hours -= 24u;
 8040602:	68fb      	ldr	r3, [r7, #12]
 8040604:	799b      	ldrb	r3, [r3, #6]
 8040606:	3b18      	subs	r3, #24
 8040608:	b2da      	uxtb	r2, r3
 804060a:	68fb      	ldr	r3, [r7, #12]
 804060c:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 804060e:	68fb      	ldr	r3, [r7, #12]
 8040610:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8040614:	b29b      	uxth	r3, r3
 8040616:	3301      	adds	r3, #1
 8040618:	b29a      	uxth	r2, r3
 804061a:	68fb      	ldr	r3, [r7, #12]
 804061c:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 8040620:	68bb      	ldr	r3, [r7, #8]
 8040622:	2b00      	cmp	r3, #0
 8040624:	d063      	beq.n	80406ee <gos_runTimeAddMicroseconds+0x1ae>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 8040626:	68bb      	ldr	r3, [r7, #8]
 8040628:	881b      	ldrh	r3, [r3, #0]
 804062a:	b29a      	uxth	r2, r3
 804062c:	88fb      	ldrh	r3, [r7, #6]
 804062e:	4413      	add	r3, r2
 8040630:	b29a      	uxth	r2, r3
 8040632:	68bb      	ldr	r3, [r7, #8]
 8040634:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 8040636:	68bb      	ldr	r3, [r7, #8]
 8040638:	881b      	ldrh	r3, [r3, #0]
 804063a:	b29b      	uxth	r3, r3
 804063c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8040640:	d355      	bcc.n	80406ee <gos_runTimeAddMicroseconds+0x1ae>
        {
            pRunTime2->microseconds -= 1000u;
 8040642:	68bb      	ldr	r3, [r7, #8]
 8040644:	881b      	ldrh	r3, [r3, #0]
 8040646:	b29b      	uxth	r3, r3
 8040648:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 804064c:	b29a      	uxth	r2, r3
 804064e:	68bb      	ldr	r3, [r7, #8]
 8040650:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 8040652:	68bb      	ldr	r3, [r7, #8]
 8040654:	885b      	ldrh	r3, [r3, #2]
 8040656:	b29b      	uxth	r3, r3
 8040658:	3301      	adds	r3, #1
 804065a:	b29a      	uxth	r2, r3
 804065c:	68bb      	ldr	r3, [r7, #8]
 804065e:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 8040660:	68bb      	ldr	r3, [r7, #8]
 8040662:	885b      	ldrh	r3, [r3, #2]
 8040664:	b29b      	uxth	r3, r3
 8040666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804066a:	d340      	bcc.n	80406ee <gos_runTimeAddMicroseconds+0x1ae>
            {
                pRunTime2->milliseconds -= 1000u;
 804066c:	68bb      	ldr	r3, [r7, #8]
 804066e:	885b      	ldrh	r3, [r3, #2]
 8040670:	b29b      	uxth	r3, r3
 8040672:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8040676:	b29a      	uxth	r2, r3
 8040678:	68bb      	ldr	r3, [r7, #8]
 804067a:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 804067c:	68bb      	ldr	r3, [r7, #8]
 804067e:	791b      	ldrb	r3, [r3, #4]
 8040680:	3301      	adds	r3, #1
 8040682:	b2da      	uxtb	r2, r3
 8040684:	68bb      	ldr	r3, [r7, #8]
 8040686:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 8040688:	68bb      	ldr	r3, [r7, #8]
 804068a:	791b      	ldrb	r3, [r3, #4]
 804068c:	2b3b      	cmp	r3, #59	; 0x3b
 804068e:	d92e      	bls.n	80406ee <gos_runTimeAddMicroseconds+0x1ae>
                {
                    pRunTime2->seconds -= 60u;
 8040690:	68bb      	ldr	r3, [r7, #8]
 8040692:	791b      	ldrb	r3, [r3, #4]
 8040694:	3b3c      	subs	r3, #60	; 0x3c
 8040696:	b2da      	uxtb	r2, r3
 8040698:	68bb      	ldr	r3, [r7, #8]
 804069a:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 804069c:	68bb      	ldr	r3, [r7, #8]
 804069e:	795b      	ldrb	r3, [r3, #5]
 80406a0:	3301      	adds	r3, #1
 80406a2:	b2da      	uxtb	r2, r3
 80406a4:	68bb      	ldr	r3, [r7, #8]
 80406a6:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 80406a8:	68bb      	ldr	r3, [r7, #8]
 80406aa:	795b      	ldrb	r3, [r3, #5]
 80406ac:	2b3b      	cmp	r3, #59	; 0x3b
 80406ae:	d91e      	bls.n	80406ee <gos_runTimeAddMicroseconds+0x1ae>
                    {
                        pRunTime2->minutes -= 60u;
 80406b0:	68bb      	ldr	r3, [r7, #8]
 80406b2:	795b      	ldrb	r3, [r3, #5]
 80406b4:	3b3c      	subs	r3, #60	; 0x3c
 80406b6:	b2da      	uxtb	r2, r3
 80406b8:	68bb      	ldr	r3, [r7, #8]
 80406ba:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 80406bc:	68bb      	ldr	r3, [r7, #8]
 80406be:	799b      	ldrb	r3, [r3, #6]
 80406c0:	3301      	adds	r3, #1
 80406c2:	b2da      	uxtb	r2, r3
 80406c4:	68bb      	ldr	r3, [r7, #8]
 80406c6:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 80406c8:	68bb      	ldr	r3, [r7, #8]
 80406ca:	799b      	ldrb	r3, [r3, #6]
 80406cc:	2b17      	cmp	r3, #23
 80406ce:	d90e      	bls.n	80406ee <gos_runTimeAddMicroseconds+0x1ae>
                        {
                            pRunTime2->hours -= 24u;
 80406d0:	68bb      	ldr	r3, [r7, #8]
 80406d2:	799b      	ldrb	r3, [r3, #6]
 80406d4:	3b18      	subs	r3, #24
 80406d6:	b2da      	uxtb	r2, r3
 80406d8:	68bb      	ldr	r3, [r7, #8]
 80406da:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 80406dc:	68bb      	ldr	r3, [r7, #8]
 80406de:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80406e2:	b29b      	uxth	r3, r3
 80406e4:	3301      	adds	r3, #1
 80406e6:	b29a      	uxth	r2, r3
 80406e8:	68bb      	ldr	r3, [r7, #8]
 80406ea:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 80406ee:	2355      	movs	r3, #85	; 0x55
 80406f0:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 80406f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80406f4:	4618      	mov	r0, r3
 80406f6:	371c      	adds	r7, #28
 80406f8:	46bd      	mov	sp, r7
 80406fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406fe:	4770      	bx	lr

08040700 <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 8040700:	b480      	push	{r7}
 8040702:	b085      	sub	sp, #20
 8040704:	af00      	add	r7, sp, #0
 8040706:	6078      	str	r0, [r7, #4]
 8040708:	460b      	mov	r3, r1
 804070a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 804070c:	23ae      	movs	r3, #174	; 0xae
 804070e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8040710:	687b      	ldr	r3, [r7, #4]
 8040712:	2b00      	cmp	r3, #0
 8040714:	f000 808f 	beq.w	8040836 <gos_runTimeAddMilliseconds+0x136>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 8040718:	687b      	ldr	r3, [r7, #4]
 804071a:	885b      	ldrh	r3, [r3, #2]
 804071c:	b29a      	uxth	r2, r3
 804071e:	887b      	ldrh	r3, [r7, #2]
 8040720:	4413      	add	r3, r2
 8040722:	b29a      	uxth	r2, r3
 8040724:	687b      	ldr	r3, [r7, #4]
 8040726:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 8040728:	687b      	ldr	r3, [r7, #4]
 804072a:	885b      	ldrh	r3, [r3, #2]
 804072c:	b29b      	uxth	r3, r3
 804072e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8040732:	d37e      	bcc.n	8040832 <gos_runTimeAddMilliseconds+0x132>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 8040734:	687b      	ldr	r3, [r7, #4]
 8040736:	791a      	ldrb	r2, [r3, #4]
 8040738:	687b      	ldr	r3, [r7, #4]
 804073a:	885b      	ldrh	r3, [r3, #2]
 804073c:	b29b      	uxth	r3, r3
 804073e:	4941      	ldr	r1, [pc, #260]	; (8040844 <gos_runTimeAddMilliseconds+0x144>)
 8040740:	fba1 1303 	umull	r1, r3, r1, r3
 8040744:	099b      	lsrs	r3, r3, #6
 8040746:	b29b      	uxth	r3, r3
 8040748:	b2db      	uxtb	r3, r3
 804074a:	4413      	add	r3, r2
 804074c:	b2da      	uxtb	r2, r3
 804074e:	687b      	ldr	r3, [r7, #4]
 8040750:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 8040752:	687b      	ldr	r3, [r7, #4]
 8040754:	885b      	ldrh	r3, [r3, #2]
 8040756:	b29b      	uxth	r3, r3
 8040758:	4a3a      	ldr	r2, [pc, #232]	; (8040844 <gos_runTimeAddMilliseconds+0x144>)
 804075a:	fba2 1203 	umull	r1, r2, r2, r3
 804075e:	0992      	lsrs	r2, r2, #6
 8040760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8040764:	fb01 f202 	mul.w	r2, r1, r2
 8040768:	1a9b      	subs	r3, r3, r2
 804076a:	b29a      	uxth	r2, r3
 804076c:	687b      	ldr	r3, [r7, #4]
 804076e:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 8040770:	687b      	ldr	r3, [r7, #4]
 8040772:	791b      	ldrb	r3, [r3, #4]
 8040774:	2b3b      	cmp	r3, #59	; 0x3b
 8040776:	d95c      	bls.n	8040832 <gos_runTimeAddMilliseconds+0x132>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 8040778:	687b      	ldr	r3, [r7, #4]
 804077a:	795a      	ldrb	r2, [r3, #5]
 804077c:	687b      	ldr	r3, [r7, #4]
 804077e:	791b      	ldrb	r3, [r3, #4]
 8040780:	4931      	ldr	r1, [pc, #196]	; (8040848 <gos_runTimeAddMilliseconds+0x148>)
 8040782:	fba1 1303 	umull	r1, r3, r1, r3
 8040786:	095b      	lsrs	r3, r3, #5
 8040788:	b2db      	uxtb	r3, r3
 804078a:	4413      	add	r3, r2
 804078c:	b2da      	uxtb	r2, r3
 804078e:	687b      	ldr	r3, [r7, #4]
 8040790:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 8040792:	687b      	ldr	r3, [r7, #4]
 8040794:	791a      	ldrb	r2, [r3, #4]
 8040796:	4b2c      	ldr	r3, [pc, #176]	; (8040848 <gos_runTimeAddMilliseconds+0x148>)
 8040798:	fba3 1302 	umull	r1, r3, r3, r2
 804079c:	0959      	lsrs	r1, r3, #5
 804079e:	460b      	mov	r3, r1
 80407a0:	011b      	lsls	r3, r3, #4
 80407a2:	1a5b      	subs	r3, r3, r1
 80407a4:	009b      	lsls	r3, r3, #2
 80407a6:	1ad3      	subs	r3, r2, r3
 80407a8:	b2da      	uxtb	r2, r3
 80407aa:	687b      	ldr	r3, [r7, #4]
 80407ac:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 80407ae:	687b      	ldr	r3, [r7, #4]
 80407b0:	795b      	ldrb	r3, [r3, #5]
 80407b2:	2b3b      	cmp	r3, #59	; 0x3b
 80407b4:	d93d      	bls.n	8040832 <gos_runTimeAddMilliseconds+0x132>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 80407b6:	687b      	ldr	r3, [r7, #4]
 80407b8:	799a      	ldrb	r2, [r3, #6]
 80407ba:	687b      	ldr	r3, [r7, #4]
 80407bc:	795b      	ldrb	r3, [r3, #5]
 80407be:	4922      	ldr	r1, [pc, #136]	; (8040848 <gos_runTimeAddMilliseconds+0x148>)
 80407c0:	fba1 1303 	umull	r1, r3, r1, r3
 80407c4:	095b      	lsrs	r3, r3, #5
 80407c6:	b2db      	uxtb	r3, r3
 80407c8:	4413      	add	r3, r2
 80407ca:	b2da      	uxtb	r2, r3
 80407cc:	687b      	ldr	r3, [r7, #4]
 80407ce:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 80407d0:	687b      	ldr	r3, [r7, #4]
 80407d2:	795a      	ldrb	r2, [r3, #5]
 80407d4:	4b1c      	ldr	r3, [pc, #112]	; (8040848 <gos_runTimeAddMilliseconds+0x148>)
 80407d6:	fba3 1302 	umull	r1, r3, r3, r2
 80407da:	0959      	lsrs	r1, r3, #5
 80407dc:	460b      	mov	r3, r1
 80407de:	011b      	lsls	r3, r3, #4
 80407e0:	1a5b      	subs	r3, r3, r1
 80407e2:	009b      	lsls	r3, r3, #2
 80407e4:	1ad3      	subs	r3, r2, r3
 80407e6:	b2da      	uxtb	r2, r3
 80407e8:	687b      	ldr	r3, [r7, #4]
 80407ea:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 80407ec:	687b      	ldr	r3, [r7, #4]
 80407ee:	799b      	ldrb	r3, [r3, #6]
 80407f0:	2b17      	cmp	r3, #23
 80407f2:	d91e      	bls.n	8040832 <gos_runTimeAddMilliseconds+0x132>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 80407f4:	687b      	ldr	r3, [r7, #4]
 80407f6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80407fa:	b29a      	uxth	r2, r3
 80407fc:	687b      	ldr	r3, [r7, #4]
 80407fe:	799b      	ldrb	r3, [r3, #6]
 8040800:	4912      	ldr	r1, [pc, #72]	; (804084c <gos_runTimeAddMilliseconds+0x14c>)
 8040802:	fba1 1303 	umull	r1, r3, r1, r3
 8040806:	091b      	lsrs	r3, r3, #4
 8040808:	b2db      	uxtb	r3, r3
 804080a:	b29b      	uxth	r3, r3
 804080c:	4413      	add	r3, r2
 804080e:	b29a      	uxth	r2, r3
 8040810:	687b      	ldr	r3, [r7, #4]
 8040812:	f8a3 2007 	strh.w	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 8040816:	687b      	ldr	r3, [r7, #4]
 8040818:	799a      	ldrb	r2, [r3, #6]
 804081a:	4b0c      	ldr	r3, [pc, #48]	; (804084c <gos_runTimeAddMilliseconds+0x14c>)
 804081c:	fba3 1302 	umull	r1, r3, r3, r2
 8040820:	0919      	lsrs	r1, r3, #4
 8040822:	460b      	mov	r3, r1
 8040824:	005b      	lsls	r3, r3, #1
 8040826:	440b      	add	r3, r1
 8040828:	00db      	lsls	r3, r3, #3
 804082a:	1ad3      	subs	r3, r2, r3
 804082c:	b2da      	uxtb	r2, r3
 804082e:	687b      	ldr	r3, [r7, #4]
 8040830:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 8040832:	2355      	movs	r3, #85	; 0x55
 8040834:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 8040836:	7bfb      	ldrb	r3, [r7, #15]
}
 8040838:	4618      	mov	r0, r3
 804083a:	3714      	adds	r7, #20
 804083c:	46bd      	mov	sp, r7
 804083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040842:	4770      	bx	lr
 8040844:	10624dd3 	.word	0x10624dd3
 8040848:	88888889 	.word	0x88888889
 804084c:	aaaaaaab 	.word	0xaaaaaaab

08040850 <gos_timeIncreaseSystemTime>:

/*
 * Function: gos_timeIncreaseSystemTime
 */
gos_result_t gos_timeIncreaseSystemTime (u16_t milliseconds)
{
 8040850:	b580      	push	{r7, lr}
 8040852:	b084      	sub	sp, #16
 8040854:	af00      	add	r7, sp, #0
 8040856:	4603      	mov	r3, r0
 8040858:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t increaseSystemTimeResult = GOS_ERROR;
 804085a:	23ae      	movs	r3, #174	; 0xae
 804085c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 804085e:	88fb      	ldrh	r3, [r7, #6]
 8040860:	4619      	mov	r1, r3
 8040862:	480a      	ldr	r0, [pc, #40]	; (804088c <gos_timeIncreaseSystemTime+0x3c>)
 8040864:	f7ff ff4c 	bl	8040700 <gos_runTimeAddMilliseconds>
 8040868:	4603      	mov	r3, r0
 804086a:	2b55      	cmp	r3, #85	; 0x55
 804086c:	d109      	bne.n	8040882 <gos_timeIncreaseSystemTime+0x32>
        gos_timeAddMilliseconds(&systemTime, milliseconds) == GOS_SUCCESS)
 804086e:	88fb      	ldrh	r3, [r7, #6]
 8040870:	4619      	mov	r1, r3
 8040872:	4807      	ldr	r0, [pc, #28]	; (8040890 <gos_timeIncreaseSystemTime+0x40>)
 8040874:	f7ff fd64 	bl	8040340 <gos_timeAddMilliseconds>
 8040878:	4603      	mov	r3, r0
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 804087a:	2b55      	cmp	r3, #85	; 0x55
 804087c:	d101      	bne.n	8040882 <gos_timeIncreaseSystemTime+0x32>
    {
        increaseSystemTimeResult = GOS_SUCCESS;
 804087e:	2355      	movs	r3, #85	; 0x55
 8040880:	73fb      	strb	r3, [r7, #15]
    else
    {
        // One of the operations failed.
    }

    return increaseSystemTimeResult;
 8040882:	7bfb      	ldrb	r3, [r7, #15]
}
 8040884:	4618      	mov	r0, r3
 8040886:	3710      	adds	r7, #16
 8040888:	46bd      	mov	sp, r7
 804088a:	bd80      	pop	{r7, pc}
 804088c:	2000fd28 	.word	0x2000fd28
 8040890:	20003404 	.word	0x20003404

08040894 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 8040894:	b580      	push	{r7, lr}
 8040896:	b084      	sub	sp, #16
 8040898:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 804089a:	1d3b      	adds	r3, r7, #4
 804089c:	2200      	movs	r2, #0
 804089e:	601a      	str	r2, [r3, #0]
 80408a0:	605a      	str	r2, [r3, #4]
 80408a2:	811a      	strh	r2, [r3, #8]
     * Function code.
     */
    for (;;)
    {
        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 80408a4:	4b27      	ldr	r3, [pc, #156]	; (8040944 <gos_timeDaemonTask+0xb0>)
 80408a6:	789a      	ldrb	r2, [r3, #2]
 80408a8:	79bb      	ldrb	r3, [r7, #6]
 80408aa:	429a      	cmp	r2, r3
 80408ac:	d905      	bls.n	80408ba <gos_timeDaemonTask+0x26>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 80408ae:	4b26      	ldr	r3, [pc, #152]	; (8040948 <gos_timeDaemonTask+0xb4>)
 80408b0:	781b      	ldrb	r3, [r3, #0]
 80408b2:	2100      	movs	r1, #0
 80408b4:	4618      	mov	r0, r3
 80408b6:	f7fe ff63 	bl	803f780 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 80408ba:	4b22      	ldr	r3, [pc, #136]	; (8040944 <gos_timeDaemonTask+0xb0>)
 80408bc:	78da      	ldrb	r2, [r3, #3]
 80408be:	79fb      	ldrb	r3, [r7, #7]
 80408c0:	429a      	cmp	r2, r3
 80408c2:	d905      	bls.n	80408d0 <gos_timeDaemonTask+0x3c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 80408c4:	4b20      	ldr	r3, [pc, #128]	; (8040948 <gos_timeDaemonTask+0xb4>)
 80408c6:	781b      	ldrb	r3, [r3, #0]
 80408c8:	2101      	movs	r1, #1
 80408ca:	4618      	mov	r0, r3
 80408cc:	f7fe ff58 	bl	803f780 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 80408d0:	4b1c      	ldr	r3, [pc, #112]	; (8040944 <gos_timeDaemonTask+0xb0>)
 80408d2:	791a      	ldrb	r2, [r3, #4]
 80408d4:	7a3b      	ldrb	r3, [r7, #8]
 80408d6:	429a      	cmp	r2, r3
 80408d8:	d905      	bls.n	80408e6 <gos_timeDaemonTask+0x52>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 80408da:	4b1b      	ldr	r3, [pc, #108]	; (8040948 <gos_timeDaemonTask+0xb4>)
 80408dc:	781b      	ldrb	r3, [r3, #0]
 80408de:	2102      	movs	r1, #2
 80408e0:	4618      	mov	r0, r3
 80408e2:	f7fe ff4d 	bl	803f780 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 80408e6:	4b17      	ldr	r3, [pc, #92]	; (8040944 <gos_timeDaemonTask+0xb0>)
 80408e8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80408ec:	b29a      	uxth	r2, r3
 80408ee:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 80408f2:	b29b      	uxth	r3, r3
 80408f4:	429a      	cmp	r2, r3
 80408f6:	d905      	bls.n	8040904 <gos_timeDaemonTask+0x70>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 80408f8:	4b13      	ldr	r3, [pc, #76]	; (8040948 <gos_timeDaemonTask+0xb4>)
 80408fa:	781b      	ldrb	r3, [r3, #0]
 80408fc:	2103      	movs	r1, #3
 80408fe:	4618      	mov	r0, r3
 8040900:	f7fe ff3e 	bl	803f780 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 8040904:	4b0f      	ldr	r3, [pc, #60]	; (8040944 <gos_timeDaemonTask+0xb0>)
 8040906:	79da      	ldrb	r2, [r3, #7]
 8040908:	7afb      	ldrb	r3, [r7, #11]
 804090a:	429a      	cmp	r2, r3
 804090c:	d905      	bls.n	804091a <gos_timeDaemonTask+0x86>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 804090e:	4b0e      	ldr	r3, [pc, #56]	; (8040948 <gos_timeDaemonTask+0xb4>)
 8040910:	781b      	ldrb	r3, [r3, #0]
 8040912:	2104      	movs	r1, #4
 8040914:	4618      	mov	r0, r3
 8040916:	f7fe ff33 	bl	803f780 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 804091a:	4b0a      	ldr	r3, [pc, #40]	; (8040944 <gos_timeDaemonTask+0xb0>)
 804091c:	891a      	ldrh	r2, [r3, #8]
 804091e:	89bb      	ldrh	r3, [r7, #12]
 8040920:	429a      	cmp	r2, r3
 8040922:	d905      	bls.n	8040930 <gos_timeDaemonTask+0x9c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 8040924:	4b08      	ldr	r3, [pc, #32]	; (8040948 <gos_timeDaemonTask+0xb4>)
 8040926:	781b      	ldrb	r3, [r3, #0]
 8040928:	2105      	movs	r1, #5
 804092a:	4618      	mov	r0, r3
 804092c:	f7fe ff28 	bl	803f780 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 8040930:	1d3b      	adds	r3, r7, #4
 8040932:	4618      	mov	r0, r3
 8040934:	f7ff fcac 	bl	8040290 <gos_timeGet>
        (void_t) gos_taskSleep(TIME_SLEEP_TIME_MS);
 8040938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 804093c:	f7fb f888 	bl	803ba50 <gos_taskSleep>
        if (systemTime.seconds > previousTime.seconds)
 8040940:	e7b0      	b.n	80408a4 <gos_timeDaemonTask+0x10>
 8040942:	bf00      	nop
 8040944:	20003404 	.word	0x20003404
 8040948:	2000fd34 	.word	0x2000fd34

0804094c <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 804094c:	b580      	push	{r7, lr}
 804094e:	b082      	sub	sp, #8
 8040950:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_SUCCESS;
 8040952:	2355      	movs	r3, #85	; 0x55
 8040954:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 8040956:	480d      	ldr	r0, [pc, #52]	; (804098c <gos_traceInit+0x40>)
 8040958:	f7fd feb2 	bl	803e6c0 <gos_queueCreate>
 804095c:	4603      	mov	r3, r0
 804095e:	2b55      	cmp	r3, #85	; 0x55
 8040960:	d10c      	bne.n	804097c <gos_traceInit+0x30>
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 8040962:	2100      	movs	r1, #0
 8040964:	480a      	ldr	r0, [pc, #40]	; (8040990 <gos_traceInit+0x44>)
 8040966:	f7fa fee1 	bl	803b72c <gos_taskRegister>
 804096a:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 804096c:	2b55      	cmp	r3, #85	; 0x55
 804096e:	d105      	bne.n	804097c <gos_traceInit+0x30>
        gos_mutexInit(&traceMutex) != GOS_SUCCESS
 8040970:	4808      	ldr	r0, [pc, #32]	; (8040994 <gos_traceInit+0x48>)
 8040972:	f7fd fcc7 	bl	803e304 <gos_mutexInit>
 8040976:	4603      	mov	r3, r0
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 8040978:	2b55      	cmp	r3, #85	; 0x55
 804097a:	d001      	beq.n	8040980 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_ERROR;
 804097c:	23ae      	movs	r3, #174	; 0xae
 804097e:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 8040980:	79fb      	ldrb	r3, [r7, #7]
}
 8040982:	4618      	mov	r0, r3
 8040984:	3708      	adds	r7, #8
 8040986:	46bd      	mov	sp, r7
 8040988:	bd80      	pop	{r7, pc}
 804098a:	bf00      	nop
 804098c:	2000347c 	.word	0x2000347c
 8040990:	20003498 	.word	0x20003498
 8040994:	2000fef4 	.word	0x2000fef4

08040998 <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 8040998:	b5f0      	push	{r4, r5, r6, r7, lr}
 804099a:	b0a9      	sub	sp, #164	; 0xa4
 804099c:	af06      	add	r7, sp, #24
 804099e:	4603      	mov	r3, r0
 80409a0:	6039      	str	r1, [r7, #0]
 80409a2:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_ERROR;
 80409a4:	23ae      	movs	r3, #174	; 0xae
 80409a6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 80409aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80409ae:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    gos_taskDescriptor_t     callerTaskDesc = {0};
 80409b2:	f107 0318 	add.w	r3, r7, #24
 80409b6:	226a      	movs	r2, #106	; 0x6a
 80409b8:	2100      	movs	r1, #0
 80409ba:	4618      	mov	r0, r3
 80409bc:	f002 f924 	bl	8042c08 <memset>
    gos_time_t               sysTime        = {0};
 80409c0:	f107 030c 	add.w	r3, r7, #12
 80409c4:	2200      	movs	r2, #0
 80409c6:	601a      	str	r2, [r3, #0]
 80409c8:	605a      	str	r2, [r3, #4]
 80409ca:	811a      	strh	r2, [r3, #8]
    gos_taskPrivilegeLevel_t privileges     = 0u;
 80409cc:	2300      	movs	r3, #0
 80409ce:	817b      	strh	r3, [r7, #10]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 80409d0:	683b      	ldr	r3, [r7, #0]
 80409d2:	2b00      	cmp	r3, #0
 80409d4:	f000 80e6 	beq.w	8040ba4 <gos_traceTrace+0x20c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 80409d8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80409dc:	4618      	mov	r0, r3
 80409de:	f7fc faa7 	bl	803cf30 <gos_taskGetCurrentId>
 80409e2:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 80409e4:	2b55      	cmp	r3, #85	; 0x55
 80409e6:	f040 80dd 	bne.w	8040ba4 <gos_traceTrace+0x20c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 80409ea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80409ee:	f107 0218 	add.w	r2, r7, #24
 80409f2:	4611      	mov	r1, r2
 80409f4:	4618      	mov	r0, r3
 80409f6:	f7fc faf7 	bl	803cfe8 <gos_taskGetData>
 80409fa:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 80409fc:	2b55      	cmp	r3, #85	; 0x55
 80409fe:	f040 80d1 	bne.w	8040ba4 <gos_traceTrace+0x20c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8040a02:	8c3b      	ldrh	r3, [r7, #32]
 8040a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8040a08:	2b00      	cmp	r3, #0
 8040a0a:	d105      	bne.n	8040a18 <gos_traceTrace+0x80>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8040a0c:	f7fa fb6e 	bl	803b0ec <gos_kernelIsCallerIsr>
 8040a10:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8040a12:	2b36      	cmp	r3, #54	; 0x36
 8040a14:	f040 80c6 	bne.w	8040ba4 <gos_traceTrace+0x20c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8040a18:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8040a1c:	4864      	ldr	r0, [pc, #400]	; (8040bb0 <gos_traceTrace+0x218>)
 8040a1e:	f7fd fc8b 	bl	803e338 <gos_mutexLock>
 8040a22:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8040a24:	2b55      	cmp	r3, #85	; 0x55
 8040a26:	f040 80bd 	bne.w	8040ba4 <gos_traceTrace+0x20c>
        )
    {
        // Pre-set result.
        traceResult = GOS_SUCCESS;
 8040a2a:	2355      	movs	r3, #85	; 0x55
 8040a2c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        if (addTimeStamp == GOS_TRUE)
 8040a30:	79fb      	ldrb	r3, [r7, #7]
 8040a32:	2b36      	cmp	r3, #54	; 0x36
 8040a34:	d137      	bne.n	8040aa6 <gos_traceTrace+0x10e>
        {
            traceResult &= gos_timeGet(&sysTime);
 8040a36:	f107 030c 	add.w	r3, r7, #12
 8040a3a:	4618      	mov	r0, r3
 8040a3c:	f7ff fc28 	bl	8040290 <gos_timeGet>
 8040a40:	4603      	mov	r3, r0
 8040a42:	461a      	mov	r2, r3
 8040a44:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8040a48:	4013      	ands	r3, r2
 8040a4a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8040a4e:	8abb      	ldrh	r3, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8040a50:	461d      	mov	r5, r3
                    sysTime.months,
 8040a52:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8040a54:	461e      	mov	r6, r3
                    sysTime.days,
 8040a56:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8040a5a:	b29b      	uxth	r3, r3
                    sysTime.hours,
 8040a5c:	7c3a      	ldrb	r2, [r7, #16]
                    sysTime.minutes,
 8040a5e:	7bf9      	ldrb	r1, [r7, #15]
                    sysTime.seconds,
 8040a60:	7bb8      	ldrb	r0, [r7, #14]
                    sysTime.milliseconds
 8040a62:	89bc      	ldrh	r4, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8040a64:	9404      	str	r4, [sp, #16]
 8040a66:	9003      	str	r0, [sp, #12]
 8040a68:	9102      	str	r1, [sp, #8]
 8040a6a:	9201      	str	r2, [sp, #4]
 8040a6c:	9300      	str	r3, [sp, #0]
 8040a6e:	4633      	mov	r3, r6
 8040a70:	462a      	mov	r2, r5
 8040a72:	4950      	ldr	r1, [pc, #320]	; (8040bb4 <gos_traceTrace+0x21c>)
 8040a74:	4850      	ldr	r0, [pc, #320]	; (8040bb8 <gos_traceTrace+0x220>)
 8040a76:	f002 f843 	bl	8042b00 <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 8040a7a:	4b50      	ldr	r3, [pc, #320]	; (8040bbc <gos_traceTrace+0x224>)
 8040a7c:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 8040a7e:	484e      	ldr	r0, [pc, #312]	; (8040bb8 <gos_traceTrace+0x220>)
 8040a80:	f7df fc26 	bl	80202d0 <strlen>
 8040a84:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 8040a86:	b2db      	uxtb	r3, r3
 8040a88:	3301      	adds	r3, #1
 8040a8a:	b2da      	uxtb	r2, r3
 8040a8c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8040a90:	4949      	ldr	r1, [pc, #292]	; (8040bb8 <gos_traceTrace+0x220>)
 8040a92:	4620      	mov	r0, r4
 8040a94:	f7fd fe70 	bl	803e778 <gos_queuePut>
 8040a98:	4603      	mov	r3, r0
 8040a9a:	461a      	mov	r2, r3
 8040a9c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8040aa0:	4013      	ands	r3, r2
 8040aa2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        traceResult &= gos_queuePut(
 8040aa6:	4b45      	ldr	r3, [pc, #276]	; (8040bbc <gos_traceTrace+0x224>)
 8040aa8:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
 8040aaa:	6838      	ldr	r0, [r7, #0]
 8040aac:	f7df fc10 	bl	80202d0 <strlen>
 8040ab0:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 8040ab2:	b2db      	uxtb	r3, r3
 8040ab4:	3301      	adds	r3, #1
 8040ab6:	b2da      	uxtb	r2, r3
 8040ab8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8040abc:	6839      	ldr	r1, [r7, #0]
 8040abe:	4620      	mov	r0, r4
 8040ac0:	f7fd fe5a 	bl	803e778 <gos_queuePut>
 8040ac4:	4603      	mov	r3, r0
 8040ac6:	461a      	mov	r2, r3
 8040ac8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8040acc:	4013      	ands	r3, r2
 8040ace:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 8040ad2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8040ad6:	2b55      	cmp	r3, #85	; 0x55
 8040ad8:	d002      	beq.n	8040ae0 <gos_traceTrace+0x148>
        {
            traceResult = GOS_ERROR;
 8040ada:	23ae      	movs	r3, #174	; 0xae
 8040adc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 8040ae0:	4b37      	ldr	r3, [pc, #220]	; (8040bc0 <gos_traceTrace+0x228>)
 8040ae2:	781b      	ldrb	r3, [r3, #0]
 8040ae4:	2b00      	cmp	r3, #0
 8040ae6:	d108      	bne.n	8040afa <gos_traceTrace+0x162>
 8040ae8:	b672      	cpsid	i
 8040aea:	f3ef 8310 	mrs	r3, PRIMASK
 8040aee:	4a35      	ldr	r2, [pc, #212]	; (8040bc4 <gos_traceTrace+0x22c>)
 8040af0:	6013      	str	r3, [r2, #0]
 8040af2:	f3bf 8f4f 	dsb	sy
 8040af6:	f3bf 8f6f 	isb	sy
 8040afa:	4b31      	ldr	r3, [pc, #196]	; (8040bc0 <gos_traceTrace+0x228>)
 8040afc:	781b      	ldrb	r3, [r3, #0]
 8040afe:	3301      	adds	r3, #1
 8040b00:	b2da      	uxtb	r2, r3
 8040b02:	4b2f      	ldr	r3, [pc, #188]	; (8040bc0 <gos_traceTrace+0x228>)
 8040b04:	701a      	strb	r2, [r3, #0]
 8040b06:	4b30      	ldr	r3, [pc, #192]	; (8040bc8 <gos_traceTrace+0x230>)
 8040b08:	781b      	ldrb	r3, [r3, #0]
 8040b0a:	3301      	adds	r3, #1
 8040b0c:	b2da      	uxtb	r2, r3
 8040b0e:	4b2e      	ldr	r3, [pc, #184]	; (8040bc8 <gos_traceTrace+0x230>)
 8040b10:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 8040b12:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8040b16:	f107 020a 	add.w	r2, r7, #10
 8040b1a:	4611      	mov	r1, r2
 8040b1c:	4618      	mov	r0, r3
 8040b1e:	f7fc f92f 	bl	803cd80 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8040b22:	897b      	ldrh	r3, [r7, #10]
 8040b24:	b21b      	sxth	r3, r3
 8040b26:	2b00      	cmp	r3, #0
 8040b28:	db13      	blt.n	8040b52 <gos_traceTrace+0x1ba>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8040b2a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8040b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8040b32:	4618      	mov	r0, r3
 8040b34:	f7fb ffc0 	bl	803cab8 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8040b38:	4b24      	ldr	r3, [pc, #144]	; (8040bcc <gos_traceTrace+0x234>)
 8040b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8040b3c:	4618      	mov	r0, r3
 8040b3e:	f7fb f9f5 	bl	803bf2c <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8040b42:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8040b46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8040b4a:	4618      	mov	r0, r3
 8040b4c:	f7fc f82c 	bl	803cba8 <gos_taskRemovePrivilege>
 8040b50:	e004      	b.n	8040b5c <gos_traceTrace+0x1c4>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8040b52:	4b1e      	ldr	r3, [pc, #120]	; (8040bcc <gos_traceTrace+0x234>)
 8040b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8040b56:	4618      	mov	r0, r3
 8040b58:	f7fb f9e8 	bl	803bf2c <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 8040b5c:	4b18      	ldr	r3, [pc, #96]	; (8040bc0 <gos_traceTrace+0x228>)
 8040b5e:	781b      	ldrb	r3, [r3, #0]
 8040b60:	2b00      	cmp	r3, #0
 8040b62:	d005      	beq.n	8040b70 <gos_traceTrace+0x1d8>
 8040b64:	4b16      	ldr	r3, [pc, #88]	; (8040bc0 <gos_traceTrace+0x228>)
 8040b66:	781b      	ldrb	r3, [r3, #0]
 8040b68:	3b01      	subs	r3, #1
 8040b6a:	b2da      	uxtb	r2, r3
 8040b6c:	4b14      	ldr	r3, [pc, #80]	; (8040bc0 <gos_traceTrace+0x228>)
 8040b6e:	701a      	strb	r2, [r3, #0]
 8040b70:	4b13      	ldr	r3, [pc, #76]	; (8040bc0 <gos_traceTrace+0x228>)
 8040b72:	781b      	ldrb	r3, [r3, #0]
 8040b74:	2b00      	cmp	r3, #0
 8040b76:	d108      	bne.n	8040b8a <gos_traceTrace+0x1f2>
 8040b78:	4b12      	ldr	r3, [pc, #72]	; (8040bc4 <gos_traceTrace+0x22c>)
 8040b7a:	681b      	ldr	r3, [r3, #0]
 8040b7c:	f383 8810 	msr	PRIMASK, r3
 8040b80:	b662      	cpsie	i
 8040b82:	f3bf 8f4f 	dsb	sy
 8040b86:	f3bf 8f6f 	isb	sy
 8040b8a:	4b0f      	ldr	r3, [pc, #60]	; (8040bc8 <gos_traceTrace+0x230>)
 8040b8c:	781b      	ldrb	r3, [r3, #0]
 8040b8e:	2b00      	cmp	r3, #0
 8040b90:	d005      	beq.n	8040b9e <gos_traceTrace+0x206>
 8040b92:	4b0d      	ldr	r3, [pc, #52]	; (8040bc8 <gos_traceTrace+0x230>)
 8040b94:	781b      	ldrb	r3, [r3, #0]
 8040b96:	3b01      	subs	r3, #1
 8040b98:	b2da      	uxtb	r2, r3
 8040b9a:	4b0b      	ldr	r3, [pc, #44]	; (8040bc8 <gos_traceTrace+0x230>)
 8040b9c:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 8040b9e:	4804      	ldr	r0, [pc, #16]	; (8040bb0 <gos_traceTrace+0x218>)
 8040ba0:	f7fd fcd0 	bl	803e544 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8040ba4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8040ba8:	4618      	mov	r0, r3
 8040baa:	378c      	adds	r7, #140	; 0x8c
 8040bac:	46bd      	mov	sp, r7
 8040bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8040bb0:	2000fef4 	.word	0x2000fef4
 8040bb4:	08048b18 	.word	0x08048b18
 8040bb8:	2000fec8 	.word	0x2000fec8
 8040bbc:	2000347c 	.word	0x2000347c
 8040bc0:	20007447 	.word	0x20007447
 8040bc4:	20007448 	.word	0x20007448
 8040bc8:	20007445 	.word	0x20007445
 8040bcc:	20003498 	.word	0x20003498

08040bd0 <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 8040bd0:	b40e      	push	{r1, r2, r3}
 8040bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8040bd4:	b0aa      	sub	sp, #168	; 0xa8
 8040bd6:	af06      	add	r7, sp, #24
 8040bd8:	4603      	mov	r3, r0
 8040bda:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 8040bdc:	2355      	movs	r3, #85	; 0x55
 8040bde:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 8040be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040be6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 8040bea:	f107 0320 	add.w	r3, r7, #32
 8040bee:	226a      	movs	r2, #106	; 0x6a
 8040bf0:	2100      	movs	r1, #0
 8040bf2:	4618      	mov	r0, r3
 8040bf4:	f002 f808 	bl	8042c08 <memset>
    gos_time_t               sysTime        = {0};
 8040bf8:	f107 0314 	add.w	r3, r7, #20
 8040bfc:	2200      	movs	r2, #0
 8040bfe:	601a      	str	r2, [r3, #0]
 8040c00:	605a      	str	r2, [r3, #4]
 8040c02:	811a      	strh	r2, [r3, #8]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8040c04:	2300      	movs	r3, #0
 8040c06:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 8040c08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8040c0c:	2b00      	cmp	r3, #0
 8040c0e:	f000 80ed 	beq.w	8040dec <gos_traceTraceFormatted+0x21c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8040c12:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8040c16:	4618      	mov	r0, r3
 8040c18:	f7fc f98a 	bl	803cf30 <gos_taskGetCurrentId>
 8040c1c:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 8040c1e:	2b55      	cmp	r3, #85	; 0x55
 8040c20:	f040 80e4 	bne.w	8040dec <gos_traceTraceFormatted+0x21c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8040c24:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8040c28:	f107 0220 	add.w	r2, r7, #32
 8040c2c:	4611      	mov	r1, r2
 8040c2e:	4618      	mov	r0, r3
 8040c30:	f7fc f9da 	bl	803cfe8 <gos_taskGetData>
 8040c34:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8040c36:	2b55      	cmp	r3, #85	; 0x55
 8040c38:	f040 80d8 	bne.w	8040dec <gos_traceTraceFormatted+0x21c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8040c3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8040c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8040c42:	2b00      	cmp	r3, #0
 8040c44:	d105      	bne.n	8040c52 <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8040c46:	f7fa fa51 	bl	803b0ec <gos_kernelIsCallerIsr>
 8040c4a:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8040c4c:	2b36      	cmp	r3, #54	; 0x36
 8040c4e:	f040 80cd 	bne.w	8040dec <gos_traceTraceFormatted+0x21c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8040c52:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8040c56:	486b      	ldr	r0, [pc, #428]	; (8040e04 <gos_traceTraceFormatted+0x234>)
 8040c58:	f7fd fb6e 	bl	803e338 <gos_mutexLock>
 8040c5c:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8040c5e:	2b55      	cmp	r3, #85	; 0x55
 8040c60:	f040 80c4 	bne.w	8040dec <gos_traceTraceFormatted+0x21c>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 8040c64:	79fb      	ldrb	r3, [r7, #7]
 8040c66:	2b36      	cmp	r3, #54	; 0x36
 8040c68:	d137      	bne.n	8040cda <gos_traceTraceFormatted+0x10a>
        {
            traceResult &= gos_timeGet(&sysTime);
 8040c6a:	f107 0314 	add.w	r3, r7, #20
 8040c6e:	4618      	mov	r0, r3
 8040c70:	f7ff fb0e 	bl	8040290 <gos_timeGet>
 8040c74:	4603      	mov	r3, r0
 8040c76:	461a      	mov	r2, r3
 8040c78:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8040c7c:	4013      	ands	r3, r2
 8040c7e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8040c82:	8bbb      	ldrh	r3, [r7, #28]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8040c84:	461d      	mov	r5, r3
                    sysTime.months,
 8040c86:	7efb      	ldrb	r3, [r7, #27]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8040c88:	461e      	mov	r6, r3
                    sysTime.days,
 8040c8a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8040c8e:	b29b      	uxth	r3, r3
                    sysTime.hours,
 8040c90:	7e3a      	ldrb	r2, [r7, #24]
                    sysTime.minutes,
 8040c92:	7df9      	ldrb	r1, [r7, #23]
                    sysTime.seconds,
 8040c94:	7db8      	ldrb	r0, [r7, #22]
                    sysTime.milliseconds
 8040c96:	8abc      	ldrh	r4, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8040c98:	9404      	str	r4, [sp, #16]
 8040c9a:	9003      	str	r0, [sp, #12]
 8040c9c:	9102      	str	r1, [sp, #8]
 8040c9e:	9201      	str	r2, [sp, #4]
 8040ca0:	9300      	str	r3, [sp, #0]
 8040ca2:	4633      	mov	r3, r6
 8040ca4:	462a      	mov	r2, r5
 8040ca6:	4958      	ldr	r1, [pc, #352]	; (8040e08 <gos_traceTraceFormatted+0x238>)
 8040ca8:	4858      	ldr	r0, [pc, #352]	; (8040e0c <gos_traceTraceFormatted+0x23c>)
 8040caa:	f001 ff29 	bl	8042b00 <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 8040cae:	4b58      	ldr	r3, [pc, #352]	; (8040e10 <gos_traceTraceFormatted+0x240>)
 8040cb0:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 8040cb2:	4856      	ldr	r0, [pc, #344]	; (8040e0c <gos_traceTraceFormatted+0x23c>)
 8040cb4:	f7df fb0c 	bl	80202d0 <strlen>
 8040cb8:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 8040cba:	b2db      	uxtb	r3, r3
 8040cbc:	3301      	adds	r3, #1
 8040cbe:	b2da      	uxtb	r2, r3
 8040cc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8040cc4:	4951      	ldr	r1, [pc, #324]	; (8040e0c <gos_traceTraceFormatted+0x23c>)
 8040cc6:	4620      	mov	r0, r4
 8040cc8:	f7fd fd56 	bl	803e778 <gos_queuePut>
 8040ccc:	4603      	mov	r3, r0
 8040cce:	461a      	mov	r2, r3
 8040cd0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8040cd4:	4013      	ands	r3, r2
 8040cd6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 8040cda:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8040cde:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8040ce0:	693a      	ldr	r2, [r7, #16]
 8040ce2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8040ce6:	484b      	ldr	r0, [pc, #300]	; (8040e14 <gos_traceTraceFormatted+0x244>)
 8040ce8:	f001 ff84 	bl	8042bf4 <vsiprintf>
        va_end(args);
        traceResult &= gos_queuePut(
 8040cec:	4b48      	ldr	r3, [pc, #288]	; (8040e10 <gos_traceTraceFormatted+0x240>)
 8040cee:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
 8040cf0:	4848      	ldr	r0, [pc, #288]	; (8040e14 <gos_traceTraceFormatted+0x244>)
 8040cf2:	f7df faed 	bl	80202d0 <strlen>
 8040cf6:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 8040cf8:	b2db      	uxtb	r3, r3
 8040cfa:	3301      	adds	r3, #1
 8040cfc:	b2da      	uxtb	r2, r3
 8040cfe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8040d02:	4944      	ldr	r1, [pc, #272]	; (8040e14 <gos_traceTraceFormatted+0x244>)
 8040d04:	4620      	mov	r0, r4
 8040d06:	f7fd fd37 	bl	803e778 <gos_queuePut>
 8040d0a:	4603      	mov	r3, r0
 8040d0c:	461a      	mov	r2, r3
 8040d0e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8040d12:	4013      	ands	r3, r2
 8040d14:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 8040d18:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8040d1c:	2b55      	cmp	r3, #85	; 0x55
 8040d1e:	d002      	beq.n	8040d26 <gos_traceTraceFormatted+0x156>
        {
            traceResult = GOS_ERROR;
 8040d20:	23ae      	movs	r3, #174	; 0xae
 8040d22:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 8040d26:	4b3c      	ldr	r3, [pc, #240]	; (8040e18 <gos_traceTraceFormatted+0x248>)
 8040d28:	781b      	ldrb	r3, [r3, #0]
 8040d2a:	2b00      	cmp	r3, #0
 8040d2c:	d108      	bne.n	8040d40 <gos_traceTraceFormatted+0x170>
 8040d2e:	b672      	cpsid	i
 8040d30:	f3ef 8310 	mrs	r3, PRIMASK
 8040d34:	4a39      	ldr	r2, [pc, #228]	; (8040e1c <gos_traceTraceFormatted+0x24c>)
 8040d36:	6013      	str	r3, [r2, #0]
 8040d38:	f3bf 8f4f 	dsb	sy
 8040d3c:	f3bf 8f6f 	isb	sy
 8040d40:	4b35      	ldr	r3, [pc, #212]	; (8040e18 <gos_traceTraceFormatted+0x248>)
 8040d42:	781b      	ldrb	r3, [r3, #0]
 8040d44:	3301      	adds	r3, #1
 8040d46:	b2da      	uxtb	r2, r3
 8040d48:	4b33      	ldr	r3, [pc, #204]	; (8040e18 <gos_traceTraceFormatted+0x248>)
 8040d4a:	701a      	strb	r2, [r3, #0]
 8040d4c:	4b34      	ldr	r3, [pc, #208]	; (8040e20 <gos_traceTraceFormatted+0x250>)
 8040d4e:	781b      	ldrb	r3, [r3, #0]
 8040d50:	3301      	adds	r3, #1
 8040d52:	b2da      	uxtb	r2, r3
 8040d54:	4b32      	ldr	r3, [pc, #200]	; (8040e20 <gos_traceTraceFormatted+0x250>)
 8040d56:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 8040d58:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8040d5c:	f107 020e 	add.w	r2, r7, #14
 8040d60:	4611      	mov	r1, r2
 8040d62:	4618      	mov	r0, r3
 8040d64:	f7fc f80c 	bl	803cd80 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8040d68:	89fb      	ldrh	r3, [r7, #14]
 8040d6a:	b21b      	sxth	r3, r3
 8040d6c:	2b00      	cmp	r3, #0
 8040d6e:	db13      	blt.n	8040d98 <gos_traceTraceFormatted+0x1c8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8040d70:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8040d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8040d78:	4618      	mov	r0, r3
 8040d7a:	f7fb fe9d 	bl	803cab8 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8040d7e:	4b29      	ldr	r3, [pc, #164]	; (8040e24 <gos_traceTraceFormatted+0x254>)
 8040d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8040d82:	4618      	mov	r0, r3
 8040d84:	f7fb f8d2 	bl	803bf2c <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8040d88:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8040d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8040d90:	4618      	mov	r0, r3
 8040d92:	f7fb ff09 	bl	803cba8 <gos_taskRemovePrivilege>
 8040d96:	e004      	b.n	8040da2 <gos_traceTraceFormatted+0x1d2>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8040d98:	4b22      	ldr	r3, [pc, #136]	; (8040e24 <gos_traceTraceFormatted+0x254>)
 8040d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8040d9c:	4618      	mov	r0, r3
 8040d9e:	f7fb f8c5 	bl	803bf2c <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 8040da2:	4b1d      	ldr	r3, [pc, #116]	; (8040e18 <gos_traceTraceFormatted+0x248>)
 8040da4:	781b      	ldrb	r3, [r3, #0]
 8040da6:	2b00      	cmp	r3, #0
 8040da8:	d005      	beq.n	8040db6 <gos_traceTraceFormatted+0x1e6>
 8040daa:	4b1b      	ldr	r3, [pc, #108]	; (8040e18 <gos_traceTraceFormatted+0x248>)
 8040dac:	781b      	ldrb	r3, [r3, #0]
 8040dae:	3b01      	subs	r3, #1
 8040db0:	b2da      	uxtb	r2, r3
 8040db2:	4b19      	ldr	r3, [pc, #100]	; (8040e18 <gos_traceTraceFormatted+0x248>)
 8040db4:	701a      	strb	r2, [r3, #0]
 8040db6:	4b18      	ldr	r3, [pc, #96]	; (8040e18 <gos_traceTraceFormatted+0x248>)
 8040db8:	781b      	ldrb	r3, [r3, #0]
 8040dba:	2b00      	cmp	r3, #0
 8040dbc:	d108      	bne.n	8040dd0 <gos_traceTraceFormatted+0x200>
 8040dbe:	4b17      	ldr	r3, [pc, #92]	; (8040e1c <gos_traceTraceFormatted+0x24c>)
 8040dc0:	681b      	ldr	r3, [r3, #0]
 8040dc2:	f383 8810 	msr	PRIMASK, r3
 8040dc6:	b662      	cpsie	i
 8040dc8:	f3bf 8f4f 	dsb	sy
 8040dcc:	f3bf 8f6f 	isb	sy
 8040dd0:	4b13      	ldr	r3, [pc, #76]	; (8040e20 <gos_traceTraceFormatted+0x250>)
 8040dd2:	781b      	ldrb	r3, [r3, #0]
 8040dd4:	2b00      	cmp	r3, #0
 8040dd6:	d005      	beq.n	8040de4 <gos_traceTraceFormatted+0x214>
 8040dd8:	4b11      	ldr	r3, [pc, #68]	; (8040e20 <gos_traceTraceFormatted+0x250>)
 8040dda:	781b      	ldrb	r3, [r3, #0]
 8040ddc:	3b01      	subs	r3, #1
 8040dde:	b2da      	uxtb	r2, r3
 8040de0:	4b0f      	ldr	r3, [pc, #60]	; (8040e20 <gos_traceTraceFormatted+0x250>)
 8040de2:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 8040de4:	4807      	ldr	r0, [pc, #28]	; (8040e04 <gos_traceTraceFormatted+0x234>)
 8040de6:	f7fd fbad 	bl	803e544 <gos_mutexUnlock>
 8040dea:	e002      	b.n	8040df2 <gos_traceTraceFormatted+0x222>
    }
    else
    {
        traceResult = GOS_ERROR;
 8040dec:	23ae      	movs	r3, #174	; 0xae
 8040dee:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return traceResult;
 8040df2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8040df6:	4618      	mov	r0, r3
 8040df8:	3790      	adds	r7, #144	; 0x90
 8040dfa:	46bd      	mov	sp, r7
 8040dfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8040e00:	b003      	add	sp, #12
 8040e02:	4770      	bx	lr
 8040e04:	2000fef4 	.word	0x2000fef4
 8040e08:	08048b18 	.word	0x08048b18
 8040e0c:	2000fec8 	.word	0x2000fec8
 8040e10:	2000347c 	.word	0x2000347c
 8040e14:	2000fe00 	.word	0x2000fe00
 8040e18:	20007447 	.word	0x20007447
 8040e1c:	20007448 	.word	0x20007448
 8040e20:	20007445 	.word	0x20007445
 8040e24:	20003498 	.word	0x20003498

08040e28 <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 8040e28:	b40f      	push	{r0, r1, r2, r3}
 8040e2a:	b580      	push	{r7, lr}
 8040e2c:	b082      	sub	sp, #8
 8040e2e:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 8040e30:	23ae      	movs	r3, #174	; 0xae
 8040e32:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 8040e34:	693b      	ldr	r3, [r7, #16]
 8040e36:	2b00      	cmp	r3, #0
 8040e38:	d01c      	beq.n	8040e74 <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 8040e3a:	4b12      	ldr	r3, [pc, #72]	; (8040e84 <gos_traceTraceFormattedUnsafe+0x5c>)
 8040e3c:	781b      	ldrb	r3, [r3, #0]
 8040e3e:	3301      	adds	r3, #1
 8040e40:	b2da      	uxtb	r2, r3
 8040e42:	4b10      	ldr	r3, [pc, #64]	; (8040e84 <gos_traceTraceFormattedUnsafe+0x5c>)
 8040e44:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 8040e46:	f107 0314 	add.w	r3, r7, #20
 8040e4a:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8040e4c:	683a      	ldr	r2, [r7, #0]
 8040e4e:	6939      	ldr	r1, [r7, #16]
 8040e50:	480d      	ldr	r0, [pc, #52]	; (8040e88 <gos_traceTraceFormattedUnsafe+0x60>)
 8040e52:	f001 fecf 	bl	8042bf4 <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 8040e56:	480c      	ldr	r0, [pc, #48]	; (8040e88 <gos_traceTraceFormattedUnsafe+0x60>)
 8040e58:	f7f9 fa58 	bl	803a30c <gos_traceDriverTransmitString_Unsafe>
 8040e5c:	4603      	mov	r3, r0
 8040e5e:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 8040e60:	4b08      	ldr	r3, [pc, #32]	; (8040e84 <gos_traceTraceFormattedUnsafe+0x5c>)
 8040e62:	781b      	ldrb	r3, [r3, #0]
 8040e64:	2b00      	cmp	r3, #0
 8040e66:	d005      	beq.n	8040e74 <gos_traceTraceFormattedUnsafe+0x4c>
 8040e68:	4b06      	ldr	r3, [pc, #24]	; (8040e84 <gos_traceTraceFormattedUnsafe+0x5c>)
 8040e6a:	781b      	ldrb	r3, [r3, #0]
 8040e6c:	3b01      	subs	r3, #1
 8040e6e:	b2da      	uxtb	r2, r3
 8040e70:	4b04      	ldr	r3, [pc, #16]	; (8040e84 <gos_traceTraceFormattedUnsafe+0x5c>)
 8040e72:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8040e74:	79fb      	ldrb	r3, [r7, #7]
}
 8040e76:	4618      	mov	r0, r3
 8040e78:	3708      	adds	r7, #8
 8040e7a:	46bd      	mov	sp, r7
 8040e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8040e80:	b004      	add	sp, #16
 8040e82:	4770      	bx	lr
 8040e84:	20007445 	.word	0x20007445
 8040e88:	2000fe00 	.word	0x2000fe00

08040e8c <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 8040e8c:	b580      	push	{r7, lr}
 8040e8e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8040e90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8040e94:	480e      	ldr	r0, [pc, #56]	; (8040ed0 <gos_traceDaemonTask+0x44>)
 8040e96:	f7fd fa4f 	bl	803e338 <gos_mutexLock>
 8040e9a:	4603      	mov	r3, r0
 8040e9c:	2b55      	cmp	r3, #85	; 0x55
 8040e9e:	d10e      	bne.n	8040ebe <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 8040ea0:	e002      	b.n	8040ea8 <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 8040ea2:	480c      	ldr	r0, [pc, #48]	; (8040ed4 <gos_traceDaemonTask+0x48>)
 8040ea4:	f7f9 fa1a 	bl	803a2dc <gos_traceDriverTransmitString>
            while (gos_queueGet(
 8040ea8:	4b0b      	ldr	r3, [pc, #44]	; (8040ed8 <gos_traceDaemonTask+0x4c>)
 8040eaa:	8818      	ldrh	r0, [r3, #0]
 8040eac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8040eb0:	22c8      	movs	r2, #200	; 0xc8
 8040eb2:	4908      	ldr	r1, [pc, #32]	; (8040ed4 <gos_traceDaemonTask+0x48>)
 8040eb4:	f7fd fd2e 	bl	803e914 <gos_queueGet>
 8040eb8:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 8040eba:	2b55      	cmp	r3, #85	; 0x55
 8040ebc:	d0f1      	beq.n	8040ea2 <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        (void_t) gos_mutexUnlock(&traceMutex);
 8040ebe:	4804      	ldr	r0, [pc, #16]	; (8040ed0 <gos_traceDaemonTask+0x44>)
 8040ec0:	f7fd fb40 	bl	803e544 <gos_mutexUnlock>
        (void_t) gos_taskSuspend(traceDaemonTaskDesc.taskId);
 8040ec4:	4b05      	ldr	r3, [pc, #20]	; (8040edc <gos_traceDaemonTask+0x50>)
 8040ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8040ec8:	4618      	mov	r0, r3
 8040eca:	f7fa ff0d 	bl	803bce8 <gos_taskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8040ece:	e7df      	b.n	8040e90 <gos_traceDaemonTask+0x4>
 8040ed0:	2000fef4 	.word	0x2000fef4
 8040ed4:	2000fd38 	.word	0x2000fd38
 8040ed8:	2000347c 	.word	0x2000347c
 8040edc:	20003498 	.word	0x20003498

08040ee0 <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 8040ee0:	b480      	push	{r7}
 8040ee2:	b085      	sub	sp, #20
 8040ee4:	af00      	add	r7, sp, #0
 8040ee6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 8040ee8:	23ae      	movs	r3, #174	; 0xae
 8040eea:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8040eec:	687b      	ldr	r3, [r7, #4]
 8040eee:	2b00      	cmp	r3, #0
 8040ef0:	d00b      	beq.n	8040f0a <gos_triggerInit+0x2a>
    {
        pTrigger->valueCounter = 0u;
 8040ef2:	687b      	ldr	r3, [r7, #4]
 8040ef4:	2200      	movs	r2, #0
 8040ef6:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 8040ef8:	687b      	ldr	r3, [r7, #4]
 8040efa:	2200      	movs	r2, #0
 8040efc:	605a      	str	r2, [r3, #4]
        pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 8040efe:	687b      	ldr	r3, [r7, #4]
 8040f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8040f04:	811a      	strh	r2, [r3, #8]
        triggerInitResult      = GOS_SUCCESS;
 8040f06:	2355      	movs	r3, #85	; 0x55
 8040f08:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 8040f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8040f0c:	4618      	mov	r0, r3
 8040f0e:	3714      	adds	r7, #20
 8040f10:	46bd      	mov	sp, r7
 8040f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f16:	4770      	bx	lr

08040f18 <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE gos_result_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 8040f18:	b480      	push	{r7}
 8040f1a:	b085      	sub	sp, #20
 8040f1c:	af00      	add	r7, sp, #0
 8040f1e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t resetResult = GOS_ERROR;
 8040f20:	23ae      	movs	r3, #174	; 0xae
 8040f22:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8040f24:	687b      	ldr	r3, [r7, #4]
 8040f26:	2b00      	cmp	r3, #0
 8040f28:	d041      	beq.n	8040fae <gos_triggerReset+0x96>
    {
        GOS_ATOMIC_ENTER
 8040f2a:	4b24      	ldr	r3, [pc, #144]	; (8040fbc <gos_triggerReset+0xa4>)
 8040f2c:	781b      	ldrb	r3, [r3, #0]
 8040f2e:	2b00      	cmp	r3, #0
 8040f30:	d108      	bne.n	8040f44 <gos_triggerReset+0x2c>
 8040f32:	b672      	cpsid	i
 8040f34:	f3ef 8310 	mrs	r3, PRIMASK
 8040f38:	4a21      	ldr	r2, [pc, #132]	; (8040fc0 <gos_triggerReset+0xa8>)
 8040f3a:	6013      	str	r3, [r2, #0]
 8040f3c:	f3bf 8f4f 	dsb	sy
 8040f40:	f3bf 8f6f 	isb	sy
 8040f44:	4b1d      	ldr	r3, [pc, #116]	; (8040fbc <gos_triggerReset+0xa4>)
 8040f46:	781b      	ldrb	r3, [r3, #0]
 8040f48:	3301      	adds	r3, #1
 8040f4a:	b2da      	uxtb	r2, r3
 8040f4c:	4b1b      	ldr	r3, [pc, #108]	; (8040fbc <gos_triggerReset+0xa4>)
 8040f4e:	701a      	strb	r2, [r3, #0]
 8040f50:	4b1c      	ldr	r3, [pc, #112]	; (8040fc4 <gos_triggerReset+0xac>)
 8040f52:	781b      	ldrb	r3, [r3, #0]
 8040f54:	3301      	adds	r3, #1
 8040f56:	b2da      	uxtb	r2, r3
 8040f58:	4b1a      	ldr	r3, [pc, #104]	; (8040fc4 <gos_triggerReset+0xac>)
 8040f5a:	701a      	strb	r2, [r3, #0]

        pTrigger->valueCounter = 0u;
 8040f5c:	687b      	ldr	r3, [r7, #4]
 8040f5e:	2200      	movs	r2, #0
 8040f60:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 8040f62:	687b      	ldr	r3, [r7, #4]
 8040f64:	2200      	movs	r2, #0
 8040f66:	605a      	str	r2, [r3, #4]

        resetResult = GOS_SUCCESS;
 8040f68:	2355      	movs	r3, #85	; 0x55
 8040f6a:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 8040f6c:	4b13      	ldr	r3, [pc, #76]	; (8040fbc <gos_triggerReset+0xa4>)
 8040f6e:	781b      	ldrb	r3, [r3, #0]
 8040f70:	2b00      	cmp	r3, #0
 8040f72:	d005      	beq.n	8040f80 <gos_triggerReset+0x68>
 8040f74:	4b11      	ldr	r3, [pc, #68]	; (8040fbc <gos_triggerReset+0xa4>)
 8040f76:	781b      	ldrb	r3, [r3, #0]
 8040f78:	3b01      	subs	r3, #1
 8040f7a:	b2da      	uxtb	r2, r3
 8040f7c:	4b0f      	ldr	r3, [pc, #60]	; (8040fbc <gos_triggerReset+0xa4>)
 8040f7e:	701a      	strb	r2, [r3, #0]
 8040f80:	4b0e      	ldr	r3, [pc, #56]	; (8040fbc <gos_triggerReset+0xa4>)
 8040f82:	781b      	ldrb	r3, [r3, #0]
 8040f84:	2b00      	cmp	r3, #0
 8040f86:	d108      	bne.n	8040f9a <gos_triggerReset+0x82>
 8040f88:	4b0d      	ldr	r3, [pc, #52]	; (8040fc0 <gos_triggerReset+0xa8>)
 8040f8a:	681b      	ldr	r3, [r3, #0]
 8040f8c:	f383 8810 	msr	PRIMASK, r3
 8040f90:	b662      	cpsie	i
 8040f92:	f3bf 8f4f 	dsb	sy
 8040f96:	f3bf 8f6f 	isb	sy
 8040f9a:	4b0a      	ldr	r3, [pc, #40]	; (8040fc4 <gos_triggerReset+0xac>)
 8040f9c:	781b      	ldrb	r3, [r3, #0]
 8040f9e:	2b00      	cmp	r3, #0
 8040fa0:	d005      	beq.n	8040fae <gos_triggerReset+0x96>
 8040fa2:	4b08      	ldr	r3, [pc, #32]	; (8040fc4 <gos_triggerReset+0xac>)
 8040fa4:	781b      	ldrb	r3, [r3, #0]
 8040fa6:	3b01      	subs	r3, #1
 8040fa8:	b2da      	uxtb	r2, r3
 8040faa:	4b06      	ldr	r3, [pc, #24]	; (8040fc4 <gos_triggerReset+0xac>)
 8040fac:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return resetResult;
 8040fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8040fb0:	4618      	mov	r0, r3
 8040fb2:	3714      	adds	r7, #20
 8040fb4:	46bd      	mov	sp, r7
 8040fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fba:	4770      	bx	lr
 8040fbc:	20007447 	.word	0x20007447
 8040fc0:	20007448 	.word	0x20007448
 8040fc4:	20007445 	.word	0x20007445

08040fc8 <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 8040fc8:	b580      	push	{r7, lr}
 8040fca:	b086      	sub	sp, #24
 8040fcc:	af00      	add	r7, sp, #0
 8040fce:	60f8      	str	r0, [r7, #12]
 8040fd0:	60b9      	str	r1, [r7, #8]
 8040fd2:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 8040fd4:	23ae      	movs	r3, #174	; 0xae
 8040fd6:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 8040fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040fdc:	82bb      	strh	r3, [r7, #20]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8040fde:	68fb      	ldr	r3, [r7, #12]
 8040fe0:	2b00      	cmp	r3, #0
 8040fe2:	f000 8096 	beq.w	8041112 <gos_triggerWait+0x14a>
    {
        // Set owner task ID.
        GOS_ATOMIC_ENTER
 8040fe6:	4b4d      	ldr	r3, [pc, #308]	; (804111c <gos_triggerWait+0x154>)
 8040fe8:	781b      	ldrb	r3, [r3, #0]
 8040fea:	2b00      	cmp	r3, #0
 8040fec:	d108      	bne.n	8041000 <gos_triggerWait+0x38>
 8040fee:	b672      	cpsid	i
 8040ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8040ff4:	4a4a      	ldr	r2, [pc, #296]	; (8041120 <gos_triggerWait+0x158>)
 8040ff6:	6013      	str	r3, [r2, #0]
 8040ff8:	f3bf 8f4f 	dsb	sy
 8040ffc:	f3bf 8f6f 	isb	sy
 8041000:	4b46      	ldr	r3, [pc, #280]	; (804111c <gos_triggerWait+0x154>)
 8041002:	781b      	ldrb	r3, [r3, #0]
 8041004:	3301      	adds	r3, #1
 8041006:	b2da      	uxtb	r2, r3
 8041008:	4b44      	ldr	r3, [pc, #272]	; (804111c <gos_triggerWait+0x154>)
 804100a:	701a      	strb	r2, [r3, #0]
 804100c:	4b45      	ldr	r3, [pc, #276]	; (8041124 <gos_triggerWait+0x15c>)
 804100e:	781b      	ldrb	r3, [r3, #0]
 8041010:	3301      	adds	r3, #1
 8041012:	b2da      	uxtb	r2, r3
 8041014:	4b43      	ldr	r3, [pc, #268]	; (8041124 <gos_triggerWait+0x15c>)
 8041016:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentId);
 8041018:	f107 0314 	add.w	r3, r7, #20
 804101c:	4618      	mov	r0, r3
 804101e:	f7fb ff87 	bl	803cf30 <gos_taskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 8041022:	8aba      	ldrh	r2, [r7, #20]
 8041024:	68fb      	ldr	r3, [r7, #12]
 8041026:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 8041028:	68fb      	ldr	r3, [r7, #12]
 804102a:	68ba      	ldr	r2, [r7, #8]
 804102c:	605a      	str	r2, [r3, #4]

        GOS_ATOMIC_EXIT
 804102e:	4b3b      	ldr	r3, [pc, #236]	; (804111c <gos_triggerWait+0x154>)
 8041030:	781b      	ldrb	r3, [r3, #0]
 8041032:	2b00      	cmp	r3, #0
 8041034:	d005      	beq.n	8041042 <gos_triggerWait+0x7a>
 8041036:	4b39      	ldr	r3, [pc, #228]	; (804111c <gos_triggerWait+0x154>)
 8041038:	781b      	ldrb	r3, [r3, #0]
 804103a:	3b01      	subs	r3, #1
 804103c:	b2da      	uxtb	r2, r3
 804103e:	4b37      	ldr	r3, [pc, #220]	; (804111c <gos_triggerWait+0x154>)
 8041040:	701a      	strb	r2, [r3, #0]
 8041042:	4b36      	ldr	r3, [pc, #216]	; (804111c <gos_triggerWait+0x154>)
 8041044:	781b      	ldrb	r3, [r3, #0]
 8041046:	2b00      	cmp	r3, #0
 8041048:	d108      	bne.n	804105c <gos_triggerWait+0x94>
 804104a:	4b35      	ldr	r3, [pc, #212]	; (8041120 <gos_triggerWait+0x158>)
 804104c:	681b      	ldr	r3, [r3, #0]
 804104e:	f383 8810 	msr	PRIMASK, r3
 8041052:	b662      	cpsie	i
 8041054:	f3bf 8f4f 	dsb	sy
 8041058:	f3bf 8f6f 	isb	sy
 804105c:	4b31      	ldr	r3, [pc, #196]	; (8041124 <gos_triggerWait+0x15c>)
 804105e:	781b      	ldrb	r3, [r3, #0]
 8041060:	2b00      	cmp	r3, #0
 8041062:	d005      	beq.n	8041070 <gos_triggerWait+0xa8>
 8041064:	4b2f      	ldr	r3, [pc, #188]	; (8041124 <gos_triggerWait+0x15c>)
 8041066:	781b      	ldrb	r3, [r3, #0]
 8041068:	3b01      	subs	r3, #1
 804106a:	b2da      	uxtb	r2, r3
 804106c:	4b2d      	ldr	r3, [pc, #180]	; (8041124 <gos_triggerWait+0x15c>)
 804106e:	701a      	strb	r2, [r3, #0]

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 8041070:	68fb      	ldr	r3, [r7, #12]
 8041072:	681a      	ldr	r2, [r3, #0]
 8041074:	68fb      	ldr	r3, [r7, #12]
 8041076:	685b      	ldr	r3, [r3, #4]
 8041078:	429a      	cmp	r2, r3
 804107a:	d204      	bcs.n	8041086 <gos_triggerWait+0xbe>
        {
            (void_t) gos_taskBlock(currentId, timeout);
 804107c:	8abb      	ldrh	r3, [r7, #20]
 804107e:	6879      	ldr	r1, [r7, #4]
 8041080:	4618      	mov	r0, r3
 8041082:	f7fb f801 	bl	803c088 <gos_taskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        GOS_ATOMIC_ENTER
 8041086:	4b25      	ldr	r3, [pc, #148]	; (804111c <gos_triggerWait+0x154>)
 8041088:	781b      	ldrb	r3, [r3, #0]
 804108a:	2b00      	cmp	r3, #0
 804108c:	d108      	bne.n	80410a0 <gos_triggerWait+0xd8>
 804108e:	b672      	cpsid	i
 8041090:	f3ef 8310 	mrs	r3, PRIMASK
 8041094:	4a22      	ldr	r2, [pc, #136]	; (8041120 <gos_triggerWait+0x158>)
 8041096:	6013      	str	r3, [r2, #0]
 8041098:	f3bf 8f4f 	dsb	sy
 804109c:	f3bf 8f6f 	isb	sy
 80410a0:	4b1e      	ldr	r3, [pc, #120]	; (804111c <gos_triggerWait+0x154>)
 80410a2:	781b      	ldrb	r3, [r3, #0]
 80410a4:	3301      	adds	r3, #1
 80410a6:	b2da      	uxtb	r2, r3
 80410a8:	4b1c      	ldr	r3, [pc, #112]	; (804111c <gos_triggerWait+0x154>)
 80410aa:	701a      	strb	r2, [r3, #0]
 80410ac:	4b1d      	ldr	r3, [pc, #116]	; (8041124 <gos_triggerWait+0x15c>)
 80410ae:	781b      	ldrb	r3, [r3, #0]
 80410b0:	3301      	adds	r3, #1
 80410b2:	b2da      	uxtb	r2, r3
 80410b4:	4b1b      	ldr	r3, [pc, #108]	; (8041124 <gos_triggerWait+0x15c>)
 80410b6:	701a      	strb	r2, [r3, #0]

        if (pTrigger->valueCounter >= pTrigger->desiredValue)
 80410b8:	68fb      	ldr	r3, [r7, #12]
 80410ba:	681a      	ldr	r2, [r3, #0]
 80410bc:	68fb      	ldr	r3, [r7, #12]
 80410be:	685b      	ldr	r3, [r3, #4]
 80410c0:	429a      	cmp	r2, r3
 80410c2:	d305      	bcc.n	80410d0 <gos_triggerWait+0x108>
        {
            triggerWaitResult      = GOS_SUCCESS;
 80410c4:	2355      	movs	r3, #85	; 0x55
 80410c6:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 80410c8:	68fb      	ldr	r3, [r7, #12]
 80410ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80410ce:	811a      	strh	r2, [r3, #8]
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_EXIT
 80410d0:	4b12      	ldr	r3, [pc, #72]	; (804111c <gos_triggerWait+0x154>)
 80410d2:	781b      	ldrb	r3, [r3, #0]
 80410d4:	2b00      	cmp	r3, #0
 80410d6:	d005      	beq.n	80410e4 <gos_triggerWait+0x11c>
 80410d8:	4b10      	ldr	r3, [pc, #64]	; (804111c <gos_triggerWait+0x154>)
 80410da:	781b      	ldrb	r3, [r3, #0]
 80410dc:	3b01      	subs	r3, #1
 80410de:	b2da      	uxtb	r2, r3
 80410e0:	4b0e      	ldr	r3, [pc, #56]	; (804111c <gos_triggerWait+0x154>)
 80410e2:	701a      	strb	r2, [r3, #0]
 80410e4:	4b0d      	ldr	r3, [pc, #52]	; (804111c <gos_triggerWait+0x154>)
 80410e6:	781b      	ldrb	r3, [r3, #0]
 80410e8:	2b00      	cmp	r3, #0
 80410ea:	d108      	bne.n	80410fe <gos_triggerWait+0x136>
 80410ec:	4b0c      	ldr	r3, [pc, #48]	; (8041120 <gos_triggerWait+0x158>)
 80410ee:	681b      	ldr	r3, [r3, #0]
 80410f0:	f383 8810 	msr	PRIMASK, r3
 80410f4:	b662      	cpsie	i
 80410f6:	f3bf 8f4f 	dsb	sy
 80410fa:	f3bf 8f6f 	isb	sy
 80410fe:	4b09      	ldr	r3, [pc, #36]	; (8041124 <gos_triggerWait+0x15c>)
 8041100:	781b      	ldrb	r3, [r3, #0]
 8041102:	2b00      	cmp	r3, #0
 8041104:	d005      	beq.n	8041112 <gos_triggerWait+0x14a>
 8041106:	4b07      	ldr	r3, [pc, #28]	; (8041124 <gos_triggerWait+0x15c>)
 8041108:	781b      	ldrb	r3, [r3, #0]
 804110a:	3b01      	subs	r3, #1
 804110c:	b2da      	uxtb	r2, r3
 804110e:	4b05      	ldr	r3, [pc, #20]	; (8041124 <gos_triggerWait+0x15c>)
 8041110:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 8041112:	7dfb      	ldrb	r3, [r7, #23]
}
 8041114:	4618      	mov	r0, r3
 8041116:	3718      	adds	r7, #24
 8041118:	46bd      	mov	sp, r7
 804111a:	bd80      	pop	{r7, pc}
 804111c:	20007447 	.word	0x20007447
 8041120:	20007448 	.word	0x20007448
 8041124:	20007445 	.word	0x20007445

08041128 <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE gos_result_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 8041128:	b580      	push	{r7, lr}
 804112a:	b084      	sub	sp, #16
 804112c:	af00      	add	r7, sp, #0
 804112e:	6078      	str	r0, [r7, #4]
    /*
    * Local variables.
    */
    gos_result_t triggerIncrementResult = GOS_ERROR;
 8041130:	23ae      	movs	r3, #174	; 0xae
 8041132:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8041134:	687b      	ldr	r3, [r7, #4]
 8041136:	2b00      	cmp	r3, #0
 8041138:	d073      	beq.n	8041222 <gos_triggerIncrement+0xfa>
    {
        GOS_ATOMIC_ENTER
 804113a:	4b3c      	ldr	r3, [pc, #240]	; (804122c <gos_triggerIncrement+0x104>)
 804113c:	781b      	ldrb	r3, [r3, #0]
 804113e:	2b00      	cmp	r3, #0
 8041140:	d108      	bne.n	8041154 <gos_triggerIncrement+0x2c>
 8041142:	b672      	cpsid	i
 8041144:	f3ef 8310 	mrs	r3, PRIMASK
 8041148:	4a39      	ldr	r2, [pc, #228]	; (8041230 <gos_triggerIncrement+0x108>)
 804114a:	6013      	str	r3, [r2, #0]
 804114c:	f3bf 8f4f 	dsb	sy
 8041150:	f3bf 8f6f 	isb	sy
 8041154:	4b35      	ldr	r3, [pc, #212]	; (804122c <gos_triggerIncrement+0x104>)
 8041156:	781b      	ldrb	r3, [r3, #0]
 8041158:	3301      	adds	r3, #1
 804115a:	b2da      	uxtb	r2, r3
 804115c:	4b33      	ldr	r3, [pc, #204]	; (804122c <gos_triggerIncrement+0x104>)
 804115e:	701a      	strb	r2, [r3, #0]
 8041160:	4b34      	ldr	r3, [pc, #208]	; (8041234 <gos_triggerIncrement+0x10c>)
 8041162:	781b      	ldrb	r3, [r3, #0]
 8041164:	3301      	adds	r3, #1
 8041166:	b2da      	uxtb	r2, r3
 8041168:	4b32      	ldr	r3, [pc, #200]	; (8041234 <gos_triggerIncrement+0x10c>)
 804116a:	701a      	strb	r2, [r3, #0]

        // Increment trigger value.
        pTrigger->valueCounter++;
 804116c:	687b      	ldr	r3, [r7, #4]
 804116e:	681b      	ldr	r3, [r3, #0]
 8041170:	1c5a      	adds	r2, r3, #1
 8041172:	687b      	ldr	r3, [r7, #4]
 8041174:	601a      	str	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 8041176:	687b      	ldr	r3, [r7, #4]
 8041178:	681a      	ldr	r2, [r3, #0]
 804117a:	687b      	ldr	r3, [r7, #4]
 804117c:	685b      	ldr	r3, [r3, #4]
 804117e:	429a      	cmp	r2, r3
 8041180:	d12c      	bne.n	80411dc <gos_triggerIncrement+0xb4>
        {
            GOS_ISR_ENTER
 8041182:	4b2d      	ldr	r3, [pc, #180]	; (8041238 <gos_triggerIncrement+0x110>)
 8041184:	781b      	ldrb	r3, [r3, #0]
 8041186:	2b00      	cmp	r3, #0
 8041188:	d105      	bne.n	8041196 <gos_triggerIncrement+0x6e>
 804118a:	4b2a      	ldr	r3, [pc, #168]	; (8041234 <gos_triggerIncrement+0x10c>)
 804118c:	781b      	ldrb	r3, [r3, #0]
 804118e:	3301      	adds	r3, #1
 8041190:	b2da      	uxtb	r2, r3
 8041192:	4b28      	ldr	r3, [pc, #160]	; (8041234 <gos_triggerIncrement+0x10c>)
 8041194:	701a      	strb	r2, [r3, #0]
 8041196:	4b28      	ldr	r3, [pc, #160]	; (8041238 <gos_triggerIncrement+0x110>)
 8041198:	781b      	ldrb	r3, [r3, #0]
 804119a:	3301      	adds	r3, #1
 804119c:	b2da      	uxtb	r2, r3
 804119e:	4b26      	ldr	r3, [pc, #152]	; (8041238 <gos_triggerIncrement+0x110>)
 80411a0:	701a      	strb	r2, [r3, #0]

            // Unblock owner task.
            (void_t) gos_taskUnblock(pTrigger->waiterTaskId);
 80411a2:	687b      	ldr	r3, [r7, #4]
 80411a4:	891b      	ldrh	r3, [r3, #8]
 80411a6:	4618      	mov	r0, r3
 80411a8:	f7fb f880 	bl	803c2ac <gos_taskUnblock>

            GOS_ISR_EXIT
 80411ac:	4b22      	ldr	r3, [pc, #136]	; (8041238 <gos_triggerIncrement+0x110>)
 80411ae:	781b      	ldrb	r3, [r3, #0]
 80411b0:	2b00      	cmp	r3, #0
 80411b2:	d005      	beq.n	80411c0 <gos_triggerIncrement+0x98>
 80411b4:	4b20      	ldr	r3, [pc, #128]	; (8041238 <gos_triggerIncrement+0x110>)
 80411b6:	781b      	ldrb	r3, [r3, #0]
 80411b8:	3b01      	subs	r3, #1
 80411ba:	b2da      	uxtb	r2, r3
 80411bc:	4b1e      	ldr	r3, [pc, #120]	; (8041238 <gos_triggerIncrement+0x110>)
 80411be:	701a      	strb	r2, [r3, #0]
 80411c0:	4b1d      	ldr	r3, [pc, #116]	; (8041238 <gos_triggerIncrement+0x110>)
 80411c2:	781b      	ldrb	r3, [r3, #0]
 80411c4:	2b00      	cmp	r3, #0
 80411c6:	d109      	bne.n	80411dc <gos_triggerIncrement+0xb4>
 80411c8:	4b1a      	ldr	r3, [pc, #104]	; (8041234 <gos_triggerIncrement+0x10c>)
 80411ca:	781b      	ldrb	r3, [r3, #0]
 80411cc:	2b00      	cmp	r3, #0
 80411ce:	d005      	beq.n	80411dc <gos_triggerIncrement+0xb4>
 80411d0:	4b18      	ldr	r3, [pc, #96]	; (8041234 <gos_triggerIncrement+0x10c>)
 80411d2:	781b      	ldrb	r3, [r3, #0]
 80411d4:	3b01      	subs	r3, #1
 80411d6:	b2da      	uxtb	r2, r3
 80411d8:	4b16      	ldr	r3, [pc, #88]	; (8041234 <gos_triggerIncrement+0x10c>)
 80411da:	701a      	strb	r2, [r3, #0]
        else
        {
            // Trigger value not reached yet.
        }

        triggerIncrementResult = GOS_SUCCESS;
 80411dc:	2355      	movs	r3, #85	; 0x55
 80411de:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 80411e0:	4b12      	ldr	r3, [pc, #72]	; (804122c <gos_triggerIncrement+0x104>)
 80411e2:	781b      	ldrb	r3, [r3, #0]
 80411e4:	2b00      	cmp	r3, #0
 80411e6:	d005      	beq.n	80411f4 <gos_triggerIncrement+0xcc>
 80411e8:	4b10      	ldr	r3, [pc, #64]	; (804122c <gos_triggerIncrement+0x104>)
 80411ea:	781b      	ldrb	r3, [r3, #0]
 80411ec:	3b01      	subs	r3, #1
 80411ee:	b2da      	uxtb	r2, r3
 80411f0:	4b0e      	ldr	r3, [pc, #56]	; (804122c <gos_triggerIncrement+0x104>)
 80411f2:	701a      	strb	r2, [r3, #0]
 80411f4:	4b0d      	ldr	r3, [pc, #52]	; (804122c <gos_triggerIncrement+0x104>)
 80411f6:	781b      	ldrb	r3, [r3, #0]
 80411f8:	2b00      	cmp	r3, #0
 80411fa:	d108      	bne.n	804120e <gos_triggerIncrement+0xe6>
 80411fc:	4b0c      	ldr	r3, [pc, #48]	; (8041230 <gos_triggerIncrement+0x108>)
 80411fe:	681b      	ldr	r3, [r3, #0]
 8041200:	f383 8810 	msr	PRIMASK, r3
 8041204:	b662      	cpsie	i
 8041206:	f3bf 8f4f 	dsb	sy
 804120a:	f3bf 8f6f 	isb	sy
 804120e:	4b09      	ldr	r3, [pc, #36]	; (8041234 <gos_triggerIncrement+0x10c>)
 8041210:	781b      	ldrb	r3, [r3, #0]
 8041212:	2b00      	cmp	r3, #0
 8041214:	d005      	beq.n	8041222 <gos_triggerIncrement+0xfa>
 8041216:	4b07      	ldr	r3, [pc, #28]	; (8041234 <gos_triggerIncrement+0x10c>)
 8041218:	781b      	ldrb	r3, [r3, #0]
 804121a:	3b01      	subs	r3, #1
 804121c:	b2da      	uxtb	r2, r3
 804121e:	4b05      	ldr	r3, [pc, #20]	; (8041234 <gos_triggerIncrement+0x10c>)
 8041220:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerIncrementResult;
 8041222:	7bfb      	ldrb	r3, [r7, #15]
}
 8041224:	4618      	mov	r0, r3
 8041226:	3710      	adds	r7, #16
 8041228:	46bd      	mov	sp, r7
 804122a:	bd80      	pop	{r7, pc}
 804122c:	20007447 	.word	0x20007447
 8041230:	20007448 	.word	0x20007448
 8041234:	20007445 	.word	0x20007445
 8041238:	20007446 	.word	0x20007446

0804123c <gos_crcDriverGetCrc>:

/*
 * Function: gos_crcDriverGetCrc
 */
u32_t gos_crcDriverGetCrc (u8_t* pData, u32_t dataSize)
{
 804123c:	b480      	push	{r7}
 804123e:	b087      	sub	sp, #28
 8041240:	af00      	add	r7, sp, #0
 8041242:	6078      	str	r0, [r7, #4]
 8041244:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    u32_t   crcValue   = CRC_INITIAL_VALUE;
 8041246:	f04f 33ff 	mov.w	r3, #4294967295
 804124a:	617b      	str	r3, [r7, #20]
    u32_t   index      = 0u;
 804124c:	2300      	movs	r3, #0
 804124e:	613b      	str	r3, [r7, #16]
    u32_t   mask       = 0u;
 8041250:	2300      	movs	r3, #0
 8041252:	60bb      	str	r3, [r7, #8]
    u8_t    bitCounter = 0u;
 8041254:	2300      	movs	r3, #0
 8041256:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < dataSize; index++)
 8041258:	2300      	movs	r3, #0
 804125a:	613b      	str	r3, [r7, #16]
 804125c:	e01e      	b.n	804129c <gos_crcDriverGetCrc+0x60>
    {
        crcValue ^= pData[index];
 804125e:	687a      	ldr	r2, [r7, #4]
 8041260:	693b      	ldr	r3, [r7, #16]
 8041262:	4413      	add	r3, r2
 8041264:	781b      	ldrb	r3, [r3, #0]
 8041266:	461a      	mov	r2, r3
 8041268:	697b      	ldr	r3, [r7, #20]
 804126a:	4053      	eors	r3, r2
 804126c:	617b      	str	r3, [r7, #20]

        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 804126e:	2308      	movs	r3, #8
 8041270:	73fb      	strb	r3, [r7, #15]
 8041272:	e00d      	b.n	8041290 <gos_crcDriverGetCrc+0x54>
        {
            mask = -(crcValue & 1);
 8041274:	697b      	ldr	r3, [r7, #20]
 8041276:	f003 0301 	and.w	r3, r3, #1
 804127a:	425b      	negs	r3, r3
 804127c:	60bb      	str	r3, [r7, #8]
            crcValue = (crcValue) ^ (CRC_POLYNOMIAL_VALUE & mask);
 804127e:	68ba      	ldr	r2, [r7, #8]
 8041280:	4b0c      	ldr	r3, [pc, #48]	; (80412b4 <gos_crcDriverGetCrc+0x78>)
 8041282:	4013      	ands	r3, r2
 8041284:	697a      	ldr	r2, [r7, #20]
 8041286:	4053      	eors	r3, r2
 8041288:	617b      	str	r3, [r7, #20]
        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 804128a:	7bfb      	ldrb	r3, [r7, #15]
 804128c:	3b01      	subs	r3, #1
 804128e:	73fb      	strb	r3, [r7, #15]
 8041290:	7bfb      	ldrb	r3, [r7, #15]
 8041292:	2b00      	cmp	r3, #0
 8041294:	d1ee      	bne.n	8041274 <gos_crcDriverGetCrc+0x38>
    for (index = 0u; index < dataSize; index++)
 8041296:	693b      	ldr	r3, [r7, #16]
 8041298:	3301      	adds	r3, #1
 804129a:	613b      	str	r3, [r7, #16]
 804129c:	693a      	ldr	r2, [r7, #16]
 804129e:	683b      	ldr	r3, [r7, #0]
 80412a0:	429a      	cmp	r2, r3
 80412a2:	d3dc      	bcc.n	804125e <gos_crcDriverGetCrc+0x22>
        }
    }

    return ~crcValue;
 80412a4:	697b      	ldr	r3, [r7, #20]
 80412a6:	43db      	mvns	r3, r3
}
 80412a8:	4618      	mov	r0, r3
 80412aa:	371c      	adds	r7, #28
 80412ac:	46bd      	mov	sp, r7
 80412ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412b2:	4770      	bx	lr
 80412b4:	edb88320 	.word	0xedb88320

080412b8 <gos_sysmonDriverReceive>:

/*
 * Function: gos_sysmonDriverReceive
 */
gos_result_t gos_sysmonDriverReceive (u8_t* pBuffer, u16_t bufferSize)
{
 80412b8:	b580      	push	{r7, lr}
 80412ba:	b084      	sub	sp, #16
 80412bc:	af00      	add	r7, sp, #0
 80412be:	6078      	str	r0, [r7, #4]
 80412c0:	460b      	mov	r3, r1
 80412c2:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverReceiveResult = GOS_ERROR;
 80412c4:	23ae      	movs	r3, #174	; 0xae
 80412c6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverReceive != NULL)
 80412c8:	4b08      	ldr	r3, [pc, #32]	; (80412ec <gos_sysmonDriverReceive+0x34>)
 80412ca:	699b      	ldr	r3, [r3, #24]
 80412cc:	2b00      	cmp	r3, #0
 80412ce:	d007      	beq.n	80412e0 <gos_sysmonDriverReceive+0x28>
    {
        sysmonDriverReceiveResult = driverFunctions.sysmonDriverReceive(pBuffer, bufferSize);
 80412d0:	4b06      	ldr	r3, [pc, #24]	; (80412ec <gos_sysmonDriverReceive+0x34>)
 80412d2:	699b      	ldr	r3, [r3, #24]
 80412d4:	887a      	ldrh	r2, [r7, #2]
 80412d6:	4611      	mov	r1, r2
 80412d8:	6878      	ldr	r0, [r7, #4]
 80412da:	4798      	blx	r3
 80412dc:	4603      	mov	r3, r0
 80412de:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverReceiveResult;
 80412e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80412e2:	4618      	mov	r0, r3
 80412e4:	3710      	adds	r7, #16
 80412e6:	46bd      	mov	sp, r7
 80412e8:	bd80      	pop	{r7, pc}
 80412ea:	bf00      	nop
 80412ec:	20007360 	.word	0x20007360

080412f0 <gos_sysmonDriverTransmit>:

/*
 * Function: gos_sysmonDriverTransmit
 */
gos_result_t gos_sysmonDriverTransmit (u8_t* pBuffer, u16_t bufferSize)
{
 80412f0:	b580      	push	{r7, lr}
 80412f2:	b084      	sub	sp, #16
 80412f4:	af00      	add	r7, sp, #0
 80412f6:	6078      	str	r0, [r7, #4]
 80412f8:	460b      	mov	r3, r1
 80412fa:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverTransmitResult = GOS_ERROR;
 80412fc:	23ae      	movs	r3, #174	; 0xae
 80412fe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverTransmit != NULL)
 8041300:	4b08      	ldr	r3, [pc, #32]	; (8041324 <gos_sysmonDriverTransmit+0x34>)
 8041302:	695b      	ldr	r3, [r3, #20]
 8041304:	2b00      	cmp	r3, #0
 8041306:	d007      	beq.n	8041318 <gos_sysmonDriverTransmit+0x28>
    {
        sysmonDriverTransmitResult = driverFunctions.sysmonDriverTransmit(pBuffer, bufferSize);
 8041308:	4b06      	ldr	r3, [pc, #24]	; (8041324 <gos_sysmonDriverTransmit+0x34>)
 804130a:	695b      	ldr	r3, [r3, #20]
 804130c:	887a      	ldrh	r2, [r7, #2]
 804130e:	4611      	mov	r1, r2
 8041310:	6878      	ldr	r0, [r7, #4]
 8041312:	4798      	blx	r3
 8041314:	4603      	mov	r3, r0
 8041316:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverTransmitResult;
 8041318:	7bfb      	ldrb	r3, [r7, #15]
}
 804131a:	4618      	mov	r0, r3
 804131c:	3710      	adds	r7, #16
 804131e:	46bd      	mov	sp, r7
 8041320:	bd80      	pop	{r7, pc}
 8041322:	bf00      	nop
 8041324:	20007360 	.word	0x20007360

08041328 <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 8041328:	b580      	push	{r7, lr}
 804132a:	b084      	sub	sp, #16
 804132c:	af00      	add	r7, sp, #0
 804132e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 8041330:	23ae      	movs	r3, #174	; 0xae
 8041332:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 8041334:	4b07      	ldr	r3, [pc, #28]	; (8041354 <gos_timerDriverSysTimerGet+0x2c>)
 8041336:	691b      	ldr	r3, [r3, #16]
 8041338:	2b00      	cmp	r3, #0
 804133a:	d005      	beq.n	8041348 <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 804133c:	4b05      	ldr	r3, [pc, #20]	; (8041354 <gos_timerDriverSysTimerGet+0x2c>)
 804133e:	691b      	ldr	r3, [r3, #16]
 8041340:	6878      	ldr	r0, [r7, #4]
 8041342:	4798      	blx	r3
 8041344:	4603      	mov	r3, r0
 8041346:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timerDriverSysTimerGetResult;
 8041348:	7bfb      	ldrb	r3, [r7, #15]
}
 804134a:	4618      	mov	r0, r3
 804134c:	3710      	adds	r7, #16
 804134e:	46bd      	mov	sp, r7
 8041350:	bd80      	pop	{r7, pc}
 8041352:	bf00      	nop
 8041354:	20007360 	.word	0x20007360

08041358 <atof>:
 8041358:	2100      	movs	r1, #0
 804135a:	f000 be11 	b.w	8041f80 <strtod>

0804135e <atoi>:
 804135e:	220a      	movs	r2, #10
 8041360:	2100      	movs	r1, #0
 8041362:	f000 be9b 	b.w	804209c <strtol>

08041366 <sulp>:
 8041366:	b570      	push	{r4, r5, r6, lr}
 8041368:	4604      	mov	r4, r0
 804136a:	460d      	mov	r5, r1
 804136c:	ec45 4b10 	vmov	d0, r4, r5
 8041370:	4616      	mov	r6, r2
 8041372:	f003 fb49 	bl	8044a08 <__ulp>
 8041376:	ec51 0b10 	vmov	r0, r1, d0
 804137a:	b17e      	cbz	r6, 804139c <sulp+0x36>
 804137c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8041380:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8041384:	2b00      	cmp	r3, #0
 8041386:	dd09      	ble.n	804139c <sulp+0x36>
 8041388:	051b      	lsls	r3, r3, #20
 804138a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 804138e:	2400      	movs	r4, #0
 8041390:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8041394:	4622      	mov	r2, r4
 8041396:	462b      	mov	r3, r5
 8041398:	f7df f95e 	bl	8020658 <__aeabi_dmul>
 804139c:	bd70      	pop	{r4, r5, r6, pc}
	...

080413a0 <_strtod_l>:
 80413a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80413a4:	ed2d 8b02 	vpush	{d8}
 80413a8:	b09b      	sub	sp, #108	; 0x6c
 80413aa:	4604      	mov	r4, r0
 80413ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80413ae:	2200      	movs	r2, #0
 80413b0:	9216      	str	r2, [sp, #88]	; 0x58
 80413b2:	460d      	mov	r5, r1
 80413b4:	f04f 0800 	mov.w	r8, #0
 80413b8:	f04f 0900 	mov.w	r9, #0
 80413bc:	460a      	mov	r2, r1
 80413be:	9215      	str	r2, [sp, #84]	; 0x54
 80413c0:	7811      	ldrb	r1, [r2, #0]
 80413c2:	292b      	cmp	r1, #43	; 0x2b
 80413c4:	d04c      	beq.n	8041460 <_strtod_l+0xc0>
 80413c6:	d83a      	bhi.n	804143e <_strtod_l+0x9e>
 80413c8:	290d      	cmp	r1, #13
 80413ca:	d834      	bhi.n	8041436 <_strtod_l+0x96>
 80413cc:	2908      	cmp	r1, #8
 80413ce:	d834      	bhi.n	804143a <_strtod_l+0x9a>
 80413d0:	2900      	cmp	r1, #0
 80413d2:	d03d      	beq.n	8041450 <_strtod_l+0xb0>
 80413d4:	2200      	movs	r2, #0
 80413d6:	920a      	str	r2, [sp, #40]	; 0x28
 80413d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80413da:	7832      	ldrb	r2, [r6, #0]
 80413dc:	2a30      	cmp	r2, #48	; 0x30
 80413de:	f040 80b4 	bne.w	804154a <_strtod_l+0x1aa>
 80413e2:	7872      	ldrb	r2, [r6, #1]
 80413e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80413e8:	2a58      	cmp	r2, #88	; 0x58
 80413ea:	d170      	bne.n	80414ce <_strtod_l+0x12e>
 80413ec:	9302      	str	r3, [sp, #8]
 80413ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80413f0:	9301      	str	r3, [sp, #4]
 80413f2:	ab16      	add	r3, sp, #88	; 0x58
 80413f4:	9300      	str	r3, [sp, #0]
 80413f6:	4a8e      	ldr	r2, [pc, #568]	; (8041630 <_strtod_l+0x290>)
 80413f8:	ab17      	add	r3, sp, #92	; 0x5c
 80413fa:	a915      	add	r1, sp, #84	; 0x54
 80413fc:	4620      	mov	r0, r4
 80413fe:	f002 fbe1 	bl	8043bc4 <__gethex>
 8041402:	f010 070f 	ands.w	r7, r0, #15
 8041406:	4605      	mov	r5, r0
 8041408:	d005      	beq.n	8041416 <_strtod_l+0x76>
 804140a:	2f06      	cmp	r7, #6
 804140c:	d12a      	bne.n	8041464 <_strtod_l+0xc4>
 804140e:	3601      	adds	r6, #1
 8041410:	2300      	movs	r3, #0
 8041412:	9615      	str	r6, [sp, #84]	; 0x54
 8041414:	930a      	str	r3, [sp, #40]	; 0x28
 8041416:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8041418:	2b00      	cmp	r3, #0
 804141a:	f040 857f 	bne.w	8041f1c <_strtod_l+0xb7c>
 804141e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8041420:	b1db      	cbz	r3, 804145a <_strtod_l+0xba>
 8041422:	4642      	mov	r2, r8
 8041424:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8041428:	ec43 2b10 	vmov	d0, r2, r3
 804142c:	b01b      	add	sp, #108	; 0x6c
 804142e:	ecbd 8b02 	vpop	{d8}
 8041432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8041436:	2920      	cmp	r1, #32
 8041438:	d1cc      	bne.n	80413d4 <_strtod_l+0x34>
 804143a:	3201      	adds	r2, #1
 804143c:	e7bf      	b.n	80413be <_strtod_l+0x1e>
 804143e:	292d      	cmp	r1, #45	; 0x2d
 8041440:	d1c8      	bne.n	80413d4 <_strtod_l+0x34>
 8041442:	2101      	movs	r1, #1
 8041444:	910a      	str	r1, [sp, #40]	; 0x28
 8041446:	1c51      	adds	r1, r2, #1
 8041448:	9115      	str	r1, [sp, #84]	; 0x54
 804144a:	7852      	ldrb	r2, [r2, #1]
 804144c:	2a00      	cmp	r2, #0
 804144e:	d1c3      	bne.n	80413d8 <_strtod_l+0x38>
 8041450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8041452:	9515      	str	r5, [sp, #84]	; 0x54
 8041454:	2b00      	cmp	r3, #0
 8041456:	f040 855f 	bne.w	8041f18 <_strtod_l+0xb78>
 804145a:	4642      	mov	r2, r8
 804145c:	464b      	mov	r3, r9
 804145e:	e7e3      	b.n	8041428 <_strtod_l+0x88>
 8041460:	2100      	movs	r1, #0
 8041462:	e7ef      	b.n	8041444 <_strtod_l+0xa4>
 8041464:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8041466:	b13a      	cbz	r2, 8041478 <_strtod_l+0xd8>
 8041468:	2135      	movs	r1, #53	; 0x35
 804146a:	a818      	add	r0, sp, #96	; 0x60
 804146c:	f003 fbc9 	bl	8044c02 <__copybits>
 8041470:	9916      	ldr	r1, [sp, #88]	; 0x58
 8041472:	4620      	mov	r0, r4
 8041474:	f002 ff9c 	bl	80443b0 <_Bfree>
 8041478:	3f01      	subs	r7, #1
 804147a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 804147c:	2f04      	cmp	r7, #4
 804147e:	d806      	bhi.n	804148e <_strtod_l+0xee>
 8041480:	e8df f007 	tbb	[pc, r7]
 8041484:	201d0314 	.word	0x201d0314
 8041488:	14          	.byte	0x14
 8041489:	00          	.byte	0x00
 804148a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 804148e:	05e9      	lsls	r1, r5, #23
 8041490:	bf48      	it	mi
 8041492:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8041496:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 804149a:	0d1b      	lsrs	r3, r3, #20
 804149c:	051b      	lsls	r3, r3, #20
 804149e:	2b00      	cmp	r3, #0
 80414a0:	d1b9      	bne.n	8041416 <_strtod_l+0x76>
 80414a2:	f001 fc15 	bl	8042cd0 <__errno>
 80414a6:	2322      	movs	r3, #34	; 0x22
 80414a8:	6003      	str	r3, [r0, #0]
 80414aa:	e7b4      	b.n	8041416 <_strtod_l+0x76>
 80414ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80414b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80414b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80414b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80414bc:	e7e7      	b.n	804148e <_strtod_l+0xee>
 80414be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8041638 <_strtod_l+0x298>
 80414c2:	e7e4      	b.n	804148e <_strtod_l+0xee>
 80414c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80414c8:	f04f 38ff 	mov.w	r8, #4294967295
 80414cc:	e7df      	b.n	804148e <_strtod_l+0xee>
 80414ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80414d0:	1c5a      	adds	r2, r3, #1
 80414d2:	9215      	str	r2, [sp, #84]	; 0x54
 80414d4:	785b      	ldrb	r3, [r3, #1]
 80414d6:	2b30      	cmp	r3, #48	; 0x30
 80414d8:	d0f9      	beq.n	80414ce <_strtod_l+0x12e>
 80414da:	2b00      	cmp	r3, #0
 80414dc:	d09b      	beq.n	8041416 <_strtod_l+0x76>
 80414de:	2301      	movs	r3, #1
 80414e0:	f04f 0a00 	mov.w	sl, #0
 80414e4:	9304      	str	r3, [sp, #16]
 80414e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80414e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80414ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80414ee:	46d3      	mov	fp, sl
 80414f0:	220a      	movs	r2, #10
 80414f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80414f4:	7806      	ldrb	r6, [r0, #0]
 80414f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80414fa:	b2d9      	uxtb	r1, r3
 80414fc:	2909      	cmp	r1, #9
 80414fe:	d926      	bls.n	804154e <_strtod_l+0x1ae>
 8041500:	494c      	ldr	r1, [pc, #304]	; (8041634 <_strtod_l+0x294>)
 8041502:	2201      	movs	r2, #1
 8041504:	f001 fb88 	bl	8042c18 <strncmp>
 8041508:	2800      	cmp	r0, #0
 804150a:	d030      	beq.n	804156e <_strtod_l+0x1ce>
 804150c:	2000      	movs	r0, #0
 804150e:	4632      	mov	r2, r6
 8041510:	9005      	str	r0, [sp, #20]
 8041512:	465e      	mov	r6, fp
 8041514:	4603      	mov	r3, r0
 8041516:	2a65      	cmp	r2, #101	; 0x65
 8041518:	d001      	beq.n	804151e <_strtod_l+0x17e>
 804151a:	2a45      	cmp	r2, #69	; 0x45
 804151c:	d113      	bne.n	8041546 <_strtod_l+0x1a6>
 804151e:	b91e      	cbnz	r6, 8041528 <_strtod_l+0x188>
 8041520:	9a04      	ldr	r2, [sp, #16]
 8041522:	4302      	orrs	r2, r0
 8041524:	d094      	beq.n	8041450 <_strtod_l+0xb0>
 8041526:	2600      	movs	r6, #0
 8041528:	9d15      	ldr	r5, [sp, #84]	; 0x54
 804152a:	1c6a      	adds	r2, r5, #1
 804152c:	9215      	str	r2, [sp, #84]	; 0x54
 804152e:	786a      	ldrb	r2, [r5, #1]
 8041530:	2a2b      	cmp	r2, #43	; 0x2b
 8041532:	d074      	beq.n	804161e <_strtod_l+0x27e>
 8041534:	2a2d      	cmp	r2, #45	; 0x2d
 8041536:	d078      	beq.n	804162a <_strtod_l+0x28a>
 8041538:	f04f 0c00 	mov.w	ip, #0
 804153c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8041540:	2909      	cmp	r1, #9
 8041542:	d97f      	bls.n	8041644 <_strtod_l+0x2a4>
 8041544:	9515      	str	r5, [sp, #84]	; 0x54
 8041546:	2700      	movs	r7, #0
 8041548:	e09e      	b.n	8041688 <_strtod_l+0x2e8>
 804154a:	2300      	movs	r3, #0
 804154c:	e7c8      	b.n	80414e0 <_strtod_l+0x140>
 804154e:	f1bb 0f08 	cmp.w	fp, #8
 8041552:	bfd8      	it	le
 8041554:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8041556:	f100 0001 	add.w	r0, r0, #1
 804155a:	bfda      	itte	le
 804155c:	fb02 3301 	mlale	r3, r2, r1, r3
 8041560:	9309      	strle	r3, [sp, #36]	; 0x24
 8041562:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8041566:	f10b 0b01 	add.w	fp, fp, #1
 804156a:	9015      	str	r0, [sp, #84]	; 0x54
 804156c:	e7c1      	b.n	80414f2 <_strtod_l+0x152>
 804156e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8041570:	1c5a      	adds	r2, r3, #1
 8041572:	9215      	str	r2, [sp, #84]	; 0x54
 8041574:	785a      	ldrb	r2, [r3, #1]
 8041576:	f1bb 0f00 	cmp.w	fp, #0
 804157a:	d037      	beq.n	80415ec <_strtod_l+0x24c>
 804157c:	9005      	str	r0, [sp, #20]
 804157e:	465e      	mov	r6, fp
 8041580:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8041584:	2b09      	cmp	r3, #9
 8041586:	d912      	bls.n	80415ae <_strtod_l+0x20e>
 8041588:	2301      	movs	r3, #1
 804158a:	e7c4      	b.n	8041516 <_strtod_l+0x176>
 804158c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 804158e:	1c5a      	adds	r2, r3, #1
 8041590:	9215      	str	r2, [sp, #84]	; 0x54
 8041592:	785a      	ldrb	r2, [r3, #1]
 8041594:	3001      	adds	r0, #1
 8041596:	2a30      	cmp	r2, #48	; 0x30
 8041598:	d0f8      	beq.n	804158c <_strtod_l+0x1ec>
 804159a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 804159e:	2b08      	cmp	r3, #8
 80415a0:	f200 84c1 	bhi.w	8041f26 <_strtod_l+0xb86>
 80415a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80415a6:	9005      	str	r0, [sp, #20]
 80415a8:	2000      	movs	r0, #0
 80415aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80415ac:	4606      	mov	r6, r0
 80415ae:	3a30      	subs	r2, #48	; 0x30
 80415b0:	f100 0301 	add.w	r3, r0, #1
 80415b4:	d014      	beq.n	80415e0 <_strtod_l+0x240>
 80415b6:	9905      	ldr	r1, [sp, #20]
 80415b8:	4419      	add	r1, r3
 80415ba:	9105      	str	r1, [sp, #20]
 80415bc:	4633      	mov	r3, r6
 80415be:	eb00 0c06 	add.w	ip, r0, r6
 80415c2:	210a      	movs	r1, #10
 80415c4:	4563      	cmp	r3, ip
 80415c6:	d113      	bne.n	80415f0 <_strtod_l+0x250>
 80415c8:	1833      	adds	r3, r6, r0
 80415ca:	2b08      	cmp	r3, #8
 80415cc:	f106 0601 	add.w	r6, r6, #1
 80415d0:	4406      	add	r6, r0
 80415d2:	dc1a      	bgt.n	804160a <_strtod_l+0x26a>
 80415d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80415d6:	230a      	movs	r3, #10
 80415d8:	fb03 2301 	mla	r3, r3, r1, r2
 80415dc:	9309      	str	r3, [sp, #36]	; 0x24
 80415de:	2300      	movs	r3, #0
 80415e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80415e2:	1c51      	adds	r1, r2, #1
 80415e4:	9115      	str	r1, [sp, #84]	; 0x54
 80415e6:	7852      	ldrb	r2, [r2, #1]
 80415e8:	4618      	mov	r0, r3
 80415ea:	e7c9      	b.n	8041580 <_strtod_l+0x1e0>
 80415ec:	4658      	mov	r0, fp
 80415ee:	e7d2      	b.n	8041596 <_strtod_l+0x1f6>
 80415f0:	2b08      	cmp	r3, #8
 80415f2:	f103 0301 	add.w	r3, r3, #1
 80415f6:	dc03      	bgt.n	8041600 <_strtod_l+0x260>
 80415f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80415fa:	434f      	muls	r7, r1
 80415fc:	9709      	str	r7, [sp, #36]	; 0x24
 80415fe:	e7e1      	b.n	80415c4 <_strtod_l+0x224>
 8041600:	2b10      	cmp	r3, #16
 8041602:	bfd8      	it	le
 8041604:	fb01 fa0a 	mulle.w	sl, r1, sl
 8041608:	e7dc      	b.n	80415c4 <_strtod_l+0x224>
 804160a:	2e10      	cmp	r6, #16
 804160c:	bfdc      	itt	le
 804160e:	230a      	movle	r3, #10
 8041610:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8041614:	e7e3      	b.n	80415de <_strtod_l+0x23e>
 8041616:	2300      	movs	r3, #0
 8041618:	9305      	str	r3, [sp, #20]
 804161a:	2301      	movs	r3, #1
 804161c:	e780      	b.n	8041520 <_strtod_l+0x180>
 804161e:	f04f 0c00 	mov.w	ip, #0
 8041622:	1caa      	adds	r2, r5, #2
 8041624:	9215      	str	r2, [sp, #84]	; 0x54
 8041626:	78aa      	ldrb	r2, [r5, #2]
 8041628:	e788      	b.n	804153c <_strtod_l+0x19c>
 804162a:	f04f 0c01 	mov.w	ip, #1
 804162e:	e7f8      	b.n	8041622 <_strtod_l+0x282>
 8041630:	0804a224 	.word	0x0804a224
 8041634:	0804a220 	.word	0x0804a220
 8041638:	7ff00000 	.word	0x7ff00000
 804163c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 804163e:	1c51      	adds	r1, r2, #1
 8041640:	9115      	str	r1, [sp, #84]	; 0x54
 8041642:	7852      	ldrb	r2, [r2, #1]
 8041644:	2a30      	cmp	r2, #48	; 0x30
 8041646:	d0f9      	beq.n	804163c <_strtod_l+0x29c>
 8041648:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 804164c:	2908      	cmp	r1, #8
 804164e:	f63f af7a 	bhi.w	8041546 <_strtod_l+0x1a6>
 8041652:	3a30      	subs	r2, #48	; 0x30
 8041654:	9208      	str	r2, [sp, #32]
 8041656:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8041658:	920c      	str	r2, [sp, #48]	; 0x30
 804165a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 804165c:	1c57      	adds	r7, r2, #1
 804165e:	9715      	str	r7, [sp, #84]	; 0x54
 8041660:	7852      	ldrb	r2, [r2, #1]
 8041662:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8041666:	f1be 0f09 	cmp.w	lr, #9
 804166a:	d938      	bls.n	80416de <_strtod_l+0x33e>
 804166c:	990c      	ldr	r1, [sp, #48]	; 0x30
 804166e:	1a7f      	subs	r7, r7, r1
 8041670:	2f08      	cmp	r7, #8
 8041672:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8041676:	dc03      	bgt.n	8041680 <_strtod_l+0x2e0>
 8041678:	9908      	ldr	r1, [sp, #32]
 804167a:	428f      	cmp	r7, r1
 804167c:	bfa8      	it	ge
 804167e:	460f      	movge	r7, r1
 8041680:	f1bc 0f00 	cmp.w	ip, #0
 8041684:	d000      	beq.n	8041688 <_strtod_l+0x2e8>
 8041686:	427f      	negs	r7, r7
 8041688:	2e00      	cmp	r6, #0
 804168a:	d14f      	bne.n	804172c <_strtod_l+0x38c>
 804168c:	9904      	ldr	r1, [sp, #16]
 804168e:	4301      	orrs	r1, r0
 8041690:	f47f aec1 	bne.w	8041416 <_strtod_l+0x76>
 8041694:	2b00      	cmp	r3, #0
 8041696:	f47f aedb 	bne.w	8041450 <_strtod_l+0xb0>
 804169a:	2a69      	cmp	r2, #105	; 0x69
 804169c:	d029      	beq.n	80416f2 <_strtod_l+0x352>
 804169e:	dc26      	bgt.n	80416ee <_strtod_l+0x34e>
 80416a0:	2a49      	cmp	r2, #73	; 0x49
 80416a2:	d026      	beq.n	80416f2 <_strtod_l+0x352>
 80416a4:	2a4e      	cmp	r2, #78	; 0x4e
 80416a6:	f47f aed3 	bne.w	8041450 <_strtod_l+0xb0>
 80416aa:	499b      	ldr	r1, [pc, #620]	; (8041918 <_strtod_l+0x578>)
 80416ac:	a815      	add	r0, sp, #84	; 0x54
 80416ae:	f002 fcc9 	bl	8044044 <__match>
 80416b2:	2800      	cmp	r0, #0
 80416b4:	f43f aecc 	beq.w	8041450 <_strtod_l+0xb0>
 80416b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80416ba:	781b      	ldrb	r3, [r3, #0]
 80416bc:	2b28      	cmp	r3, #40	; 0x28
 80416be:	d12f      	bne.n	8041720 <_strtod_l+0x380>
 80416c0:	4996      	ldr	r1, [pc, #600]	; (804191c <_strtod_l+0x57c>)
 80416c2:	aa18      	add	r2, sp, #96	; 0x60
 80416c4:	a815      	add	r0, sp, #84	; 0x54
 80416c6:	f002 fcd1 	bl	804406c <__hexnan>
 80416ca:	2805      	cmp	r0, #5
 80416cc:	d128      	bne.n	8041720 <_strtod_l+0x380>
 80416ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80416d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80416d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80416d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80416dc:	e69b      	b.n	8041416 <_strtod_l+0x76>
 80416de:	9f08      	ldr	r7, [sp, #32]
 80416e0:	210a      	movs	r1, #10
 80416e2:	fb01 2107 	mla	r1, r1, r7, r2
 80416e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80416ea:	9208      	str	r2, [sp, #32]
 80416ec:	e7b5      	b.n	804165a <_strtod_l+0x2ba>
 80416ee:	2a6e      	cmp	r2, #110	; 0x6e
 80416f0:	e7d9      	b.n	80416a6 <_strtod_l+0x306>
 80416f2:	498b      	ldr	r1, [pc, #556]	; (8041920 <_strtod_l+0x580>)
 80416f4:	a815      	add	r0, sp, #84	; 0x54
 80416f6:	f002 fca5 	bl	8044044 <__match>
 80416fa:	2800      	cmp	r0, #0
 80416fc:	f43f aea8 	beq.w	8041450 <_strtod_l+0xb0>
 8041700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8041702:	4988      	ldr	r1, [pc, #544]	; (8041924 <_strtod_l+0x584>)
 8041704:	3b01      	subs	r3, #1
 8041706:	a815      	add	r0, sp, #84	; 0x54
 8041708:	9315      	str	r3, [sp, #84]	; 0x54
 804170a:	f002 fc9b 	bl	8044044 <__match>
 804170e:	b910      	cbnz	r0, 8041716 <_strtod_l+0x376>
 8041710:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8041712:	3301      	adds	r3, #1
 8041714:	9315      	str	r3, [sp, #84]	; 0x54
 8041716:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8041934 <_strtod_l+0x594>
 804171a:	f04f 0800 	mov.w	r8, #0
 804171e:	e67a      	b.n	8041416 <_strtod_l+0x76>
 8041720:	4881      	ldr	r0, [pc, #516]	; (8041928 <_strtod_l+0x588>)
 8041722:	f001 fb19 	bl	8042d58 <nan>
 8041726:	ec59 8b10 	vmov	r8, r9, d0
 804172a:	e674      	b.n	8041416 <_strtod_l+0x76>
 804172c:	9b05      	ldr	r3, [sp, #20]
 804172e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8041730:	1afb      	subs	r3, r7, r3
 8041732:	f1bb 0f00 	cmp.w	fp, #0
 8041736:	bf08      	it	eq
 8041738:	46b3      	moveq	fp, r6
 804173a:	2e10      	cmp	r6, #16
 804173c:	9308      	str	r3, [sp, #32]
 804173e:	4635      	mov	r5, r6
 8041740:	bfa8      	it	ge
 8041742:	2510      	movge	r5, #16
 8041744:	f7de ff0e 	bl	8020564 <__aeabi_ui2d>
 8041748:	2e09      	cmp	r6, #9
 804174a:	4680      	mov	r8, r0
 804174c:	4689      	mov	r9, r1
 804174e:	dd13      	ble.n	8041778 <_strtod_l+0x3d8>
 8041750:	4b76      	ldr	r3, [pc, #472]	; (804192c <_strtod_l+0x58c>)
 8041752:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8041756:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 804175a:	f7de ff7d 	bl	8020658 <__aeabi_dmul>
 804175e:	4680      	mov	r8, r0
 8041760:	4650      	mov	r0, sl
 8041762:	4689      	mov	r9, r1
 8041764:	f7de fefe 	bl	8020564 <__aeabi_ui2d>
 8041768:	4602      	mov	r2, r0
 804176a:	460b      	mov	r3, r1
 804176c:	4640      	mov	r0, r8
 804176e:	4649      	mov	r1, r9
 8041770:	f7de fdbc 	bl	80202ec <__adddf3>
 8041774:	4680      	mov	r8, r0
 8041776:	4689      	mov	r9, r1
 8041778:	2e0f      	cmp	r6, #15
 804177a:	dc38      	bgt.n	80417ee <_strtod_l+0x44e>
 804177c:	9b08      	ldr	r3, [sp, #32]
 804177e:	2b00      	cmp	r3, #0
 8041780:	f43f ae49 	beq.w	8041416 <_strtod_l+0x76>
 8041784:	dd24      	ble.n	80417d0 <_strtod_l+0x430>
 8041786:	2b16      	cmp	r3, #22
 8041788:	dc0b      	bgt.n	80417a2 <_strtod_l+0x402>
 804178a:	4968      	ldr	r1, [pc, #416]	; (804192c <_strtod_l+0x58c>)
 804178c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8041790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8041794:	4642      	mov	r2, r8
 8041796:	464b      	mov	r3, r9
 8041798:	f7de ff5e 	bl	8020658 <__aeabi_dmul>
 804179c:	4680      	mov	r8, r0
 804179e:	4689      	mov	r9, r1
 80417a0:	e639      	b.n	8041416 <_strtod_l+0x76>
 80417a2:	9a08      	ldr	r2, [sp, #32]
 80417a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80417a8:	4293      	cmp	r3, r2
 80417aa:	db20      	blt.n	80417ee <_strtod_l+0x44e>
 80417ac:	4c5f      	ldr	r4, [pc, #380]	; (804192c <_strtod_l+0x58c>)
 80417ae:	f1c6 060f 	rsb	r6, r6, #15
 80417b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80417b6:	4642      	mov	r2, r8
 80417b8:	464b      	mov	r3, r9
 80417ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80417be:	f7de ff4b 	bl	8020658 <__aeabi_dmul>
 80417c2:	9b08      	ldr	r3, [sp, #32]
 80417c4:	1b9e      	subs	r6, r3, r6
 80417c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80417ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80417ce:	e7e3      	b.n	8041798 <_strtod_l+0x3f8>
 80417d0:	9b08      	ldr	r3, [sp, #32]
 80417d2:	3316      	adds	r3, #22
 80417d4:	db0b      	blt.n	80417ee <_strtod_l+0x44e>
 80417d6:	9b05      	ldr	r3, [sp, #20]
 80417d8:	1bdf      	subs	r7, r3, r7
 80417da:	4b54      	ldr	r3, [pc, #336]	; (804192c <_strtod_l+0x58c>)
 80417dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80417e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80417e4:	4640      	mov	r0, r8
 80417e6:	4649      	mov	r1, r9
 80417e8:	f7df f860 	bl	80208ac <__aeabi_ddiv>
 80417ec:	e7d6      	b.n	804179c <_strtod_l+0x3fc>
 80417ee:	9b08      	ldr	r3, [sp, #32]
 80417f0:	1b75      	subs	r5, r6, r5
 80417f2:	441d      	add	r5, r3
 80417f4:	2d00      	cmp	r5, #0
 80417f6:	dd70      	ble.n	80418da <_strtod_l+0x53a>
 80417f8:	f015 030f 	ands.w	r3, r5, #15
 80417fc:	d00a      	beq.n	8041814 <_strtod_l+0x474>
 80417fe:	494b      	ldr	r1, [pc, #300]	; (804192c <_strtod_l+0x58c>)
 8041800:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8041804:	4642      	mov	r2, r8
 8041806:	464b      	mov	r3, r9
 8041808:	e9d1 0100 	ldrd	r0, r1, [r1]
 804180c:	f7de ff24 	bl	8020658 <__aeabi_dmul>
 8041810:	4680      	mov	r8, r0
 8041812:	4689      	mov	r9, r1
 8041814:	f035 050f 	bics.w	r5, r5, #15
 8041818:	d04d      	beq.n	80418b6 <_strtod_l+0x516>
 804181a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 804181e:	dd22      	ble.n	8041866 <_strtod_l+0x4c6>
 8041820:	2500      	movs	r5, #0
 8041822:	46ab      	mov	fp, r5
 8041824:	9509      	str	r5, [sp, #36]	; 0x24
 8041826:	9505      	str	r5, [sp, #20]
 8041828:	2322      	movs	r3, #34	; 0x22
 804182a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8041934 <_strtod_l+0x594>
 804182e:	6023      	str	r3, [r4, #0]
 8041830:	f04f 0800 	mov.w	r8, #0
 8041834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8041836:	2b00      	cmp	r3, #0
 8041838:	f43f aded 	beq.w	8041416 <_strtod_l+0x76>
 804183c:	9916      	ldr	r1, [sp, #88]	; 0x58
 804183e:	4620      	mov	r0, r4
 8041840:	f002 fdb6 	bl	80443b0 <_Bfree>
 8041844:	9905      	ldr	r1, [sp, #20]
 8041846:	4620      	mov	r0, r4
 8041848:	f002 fdb2 	bl	80443b0 <_Bfree>
 804184c:	4659      	mov	r1, fp
 804184e:	4620      	mov	r0, r4
 8041850:	f002 fdae 	bl	80443b0 <_Bfree>
 8041854:	9909      	ldr	r1, [sp, #36]	; 0x24
 8041856:	4620      	mov	r0, r4
 8041858:	f002 fdaa 	bl	80443b0 <_Bfree>
 804185c:	4629      	mov	r1, r5
 804185e:	4620      	mov	r0, r4
 8041860:	f002 fda6 	bl	80443b0 <_Bfree>
 8041864:	e5d7      	b.n	8041416 <_strtod_l+0x76>
 8041866:	4b32      	ldr	r3, [pc, #200]	; (8041930 <_strtod_l+0x590>)
 8041868:	9304      	str	r3, [sp, #16]
 804186a:	2300      	movs	r3, #0
 804186c:	112d      	asrs	r5, r5, #4
 804186e:	4640      	mov	r0, r8
 8041870:	4649      	mov	r1, r9
 8041872:	469a      	mov	sl, r3
 8041874:	2d01      	cmp	r5, #1
 8041876:	dc21      	bgt.n	80418bc <_strtod_l+0x51c>
 8041878:	b10b      	cbz	r3, 804187e <_strtod_l+0x4de>
 804187a:	4680      	mov	r8, r0
 804187c:	4689      	mov	r9, r1
 804187e:	492c      	ldr	r1, [pc, #176]	; (8041930 <_strtod_l+0x590>)
 8041880:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8041884:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8041888:	4642      	mov	r2, r8
 804188a:	464b      	mov	r3, r9
 804188c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8041890:	f7de fee2 	bl	8020658 <__aeabi_dmul>
 8041894:	4b27      	ldr	r3, [pc, #156]	; (8041934 <_strtod_l+0x594>)
 8041896:	460a      	mov	r2, r1
 8041898:	400b      	ands	r3, r1
 804189a:	4927      	ldr	r1, [pc, #156]	; (8041938 <_strtod_l+0x598>)
 804189c:	428b      	cmp	r3, r1
 804189e:	4680      	mov	r8, r0
 80418a0:	d8be      	bhi.n	8041820 <_strtod_l+0x480>
 80418a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80418a6:	428b      	cmp	r3, r1
 80418a8:	bf86      	itte	hi
 80418aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 804193c <_strtod_l+0x59c>
 80418ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80418b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80418b6:	2300      	movs	r3, #0
 80418b8:	9304      	str	r3, [sp, #16]
 80418ba:	e07b      	b.n	80419b4 <_strtod_l+0x614>
 80418bc:	07ea      	lsls	r2, r5, #31
 80418be:	d505      	bpl.n	80418cc <_strtod_l+0x52c>
 80418c0:	9b04      	ldr	r3, [sp, #16]
 80418c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80418c6:	f7de fec7 	bl	8020658 <__aeabi_dmul>
 80418ca:	2301      	movs	r3, #1
 80418cc:	9a04      	ldr	r2, [sp, #16]
 80418ce:	3208      	adds	r2, #8
 80418d0:	f10a 0a01 	add.w	sl, sl, #1
 80418d4:	106d      	asrs	r5, r5, #1
 80418d6:	9204      	str	r2, [sp, #16]
 80418d8:	e7cc      	b.n	8041874 <_strtod_l+0x4d4>
 80418da:	d0ec      	beq.n	80418b6 <_strtod_l+0x516>
 80418dc:	426d      	negs	r5, r5
 80418de:	f015 020f 	ands.w	r2, r5, #15
 80418e2:	d00a      	beq.n	80418fa <_strtod_l+0x55a>
 80418e4:	4b11      	ldr	r3, [pc, #68]	; (804192c <_strtod_l+0x58c>)
 80418e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80418ea:	4640      	mov	r0, r8
 80418ec:	4649      	mov	r1, r9
 80418ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80418f2:	f7de ffdb 	bl	80208ac <__aeabi_ddiv>
 80418f6:	4680      	mov	r8, r0
 80418f8:	4689      	mov	r9, r1
 80418fa:	112d      	asrs	r5, r5, #4
 80418fc:	d0db      	beq.n	80418b6 <_strtod_l+0x516>
 80418fe:	2d1f      	cmp	r5, #31
 8041900:	dd1e      	ble.n	8041940 <_strtod_l+0x5a0>
 8041902:	2500      	movs	r5, #0
 8041904:	46ab      	mov	fp, r5
 8041906:	9509      	str	r5, [sp, #36]	; 0x24
 8041908:	9505      	str	r5, [sp, #20]
 804190a:	2322      	movs	r3, #34	; 0x22
 804190c:	f04f 0800 	mov.w	r8, #0
 8041910:	f04f 0900 	mov.w	r9, #0
 8041914:	6023      	str	r3, [r4, #0]
 8041916:	e78d      	b.n	8041834 <_strtod_l+0x494>
 8041918:	0804a386 	.word	0x0804a386
 804191c:	0804a238 	.word	0x0804a238
 8041920:	0804a37e 	.word	0x0804a37e
 8041924:	0804a3b8 	.word	0x0804a3b8
 8041928:	0804a648 	.word	0x0804a648
 804192c:	0804a528 	.word	0x0804a528
 8041930:	0804a500 	.word	0x0804a500
 8041934:	7ff00000 	.word	0x7ff00000
 8041938:	7ca00000 	.word	0x7ca00000
 804193c:	7fefffff 	.word	0x7fefffff
 8041940:	f015 0310 	ands.w	r3, r5, #16
 8041944:	bf18      	it	ne
 8041946:	236a      	movne	r3, #106	; 0x6a
 8041948:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8041cec <_strtod_l+0x94c>
 804194c:	9304      	str	r3, [sp, #16]
 804194e:	4640      	mov	r0, r8
 8041950:	4649      	mov	r1, r9
 8041952:	2300      	movs	r3, #0
 8041954:	07ea      	lsls	r2, r5, #31
 8041956:	d504      	bpl.n	8041962 <_strtod_l+0x5c2>
 8041958:	e9da 2300 	ldrd	r2, r3, [sl]
 804195c:	f7de fe7c 	bl	8020658 <__aeabi_dmul>
 8041960:	2301      	movs	r3, #1
 8041962:	106d      	asrs	r5, r5, #1
 8041964:	f10a 0a08 	add.w	sl, sl, #8
 8041968:	d1f4      	bne.n	8041954 <_strtod_l+0x5b4>
 804196a:	b10b      	cbz	r3, 8041970 <_strtod_l+0x5d0>
 804196c:	4680      	mov	r8, r0
 804196e:	4689      	mov	r9, r1
 8041970:	9b04      	ldr	r3, [sp, #16]
 8041972:	b1bb      	cbz	r3, 80419a4 <_strtod_l+0x604>
 8041974:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8041978:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 804197c:	2b00      	cmp	r3, #0
 804197e:	4649      	mov	r1, r9
 8041980:	dd10      	ble.n	80419a4 <_strtod_l+0x604>
 8041982:	2b1f      	cmp	r3, #31
 8041984:	f340 811e 	ble.w	8041bc4 <_strtod_l+0x824>
 8041988:	2b34      	cmp	r3, #52	; 0x34
 804198a:	bfde      	ittt	le
 804198c:	f04f 33ff 	movle.w	r3, #4294967295
 8041990:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8041994:	4093      	lslle	r3, r2
 8041996:	f04f 0800 	mov.w	r8, #0
 804199a:	bfcc      	ite	gt
 804199c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80419a0:	ea03 0901 	andle.w	r9, r3, r1
 80419a4:	2200      	movs	r2, #0
 80419a6:	2300      	movs	r3, #0
 80419a8:	4640      	mov	r0, r8
 80419aa:	4649      	mov	r1, r9
 80419ac:	f7df f8bc 	bl	8020b28 <__aeabi_dcmpeq>
 80419b0:	2800      	cmp	r0, #0
 80419b2:	d1a6      	bne.n	8041902 <_strtod_l+0x562>
 80419b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80419b6:	9300      	str	r3, [sp, #0]
 80419b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80419ba:	4633      	mov	r3, r6
 80419bc:	465a      	mov	r2, fp
 80419be:	4620      	mov	r0, r4
 80419c0:	f002 fd5e 	bl	8044480 <__s2b>
 80419c4:	9009      	str	r0, [sp, #36]	; 0x24
 80419c6:	2800      	cmp	r0, #0
 80419c8:	f43f af2a 	beq.w	8041820 <_strtod_l+0x480>
 80419cc:	9a08      	ldr	r2, [sp, #32]
 80419ce:	9b05      	ldr	r3, [sp, #20]
 80419d0:	2a00      	cmp	r2, #0
 80419d2:	eba3 0307 	sub.w	r3, r3, r7
 80419d6:	bfa8      	it	ge
 80419d8:	2300      	movge	r3, #0
 80419da:	930c      	str	r3, [sp, #48]	; 0x30
 80419dc:	2500      	movs	r5, #0
 80419de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80419e2:	9312      	str	r3, [sp, #72]	; 0x48
 80419e4:	46ab      	mov	fp, r5
 80419e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80419e8:	4620      	mov	r0, r4
 80419ea:	6859      	ldr	r1, [r3, #4]
 80419ec:	f002 fca0 	bl	8044330 <_Balloc>
 80419f0:	9005      	str	r0, [sp, #20]
 80419f2:	2800      	cmp	r0, #0
 80419f4:	f43f af18 	beq.w	8041828 <_strtod_l+0x488>
 80419f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80419fa:	691a      	ldr	r2, [r3, #16]
 80419fc:	3202      	adds	r2, #2
 80419fe:	f103 010c 	add.w	r1, r3, #12
 8041a02:	0092      	lsls	r2, r2, #2
 8041a04:	300c      	adds	r0, #12
 8041a06:	f001 f998 	bl	8042d3a <memcpy>
 8041a0a:	ec49 8b10 	vmov	d0, r8, r9
 8041a0e:	aa18      	add	r2, sp, #96	; 0x60
 8041a10:	a917      	add	r1, sp, #92	; 0x5c
 8041a12:	4620      	mov	r0, r4
 8041a14:	f003 f868 	bl	8044ae8 <__d2b>
 8041a18:	ec49 8b18 	vmov	d8, r8, r9
 8041a1c:	9016      	str	r0, [sp, #88]	; 0x58
 8041a1e:	2800      	cmp	r0, #0
 8041a20:	f43f af02 	beq.w	8041828 <_strtod_l+0x488>
 8041a24:	2101      	movs	r1, #1
 8041a26:	4620      	mov	r0, r4
 8041a28:	f002 fdc2 	bl	80445b0 <__i2b>
 8041a2c:	4683      	mov	fp, r0
 8041a2e:	2800      	cmp	r0, #0
 8041a30:	f43f aefa 	beq.w	8041828 <_strtod_l+0x488>
 8041a34:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8041a36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8041a38:	2e00      	cmp	r6, #0
 8041a3a:	bfab      	itete	ge
 8041a3c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8041a3e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8041a40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8041a42:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8041a46:	bfac      	ite	ge
 8041a48:	eb06 0a03 	addge.w	sl, r6, r3
 8041a4c:	1b9f      	sublt	r7, r3, r6
 8041a4e:	9b04      	ldr	r3, [sp, #16]
 8041a50:	1af6      	subs	r6, r6, r3
 8041a52:	4416      	add	r6, r2
 8041a54:	4ba0      	ldr	r3, [pc, #640]	; (8041cd8 <_strtod_l+0x938>)
 8041a56:	3e01      	subs	r6, #1
 8041a58:	429e      	cmp	r6, r3
 8041a5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8041a5e:	f280 80c4 	bge.w	8041bea <_strtod_l+0x84a>
 8041a62:	1b9b      	subs	r3, r3, r6
 8041a64:	2b1f      	cmp	r3, #31
 8041a66:	eba2 0203 	sub.w	r2, r2, r3
 8041a6a:	f04f 0101 	mov.w	r1, #1
 8041a6e:	f300 80b0 	bgt.w	8041bd2 <_strtod_l+0x832>
 8041a72:	fa01 f303 	lsl.w	r3, r1, r3
 8041a76:	930e      	str	r3, [sp, #56]	; 0x38
 8041a78:	2300      	movs	r3, #0
 8041a7a:	930d      	str	r3, [sp, #52]	; 0x34
 8041a7c:	eb0a 0602 	add.w	r6, sl, r2
 8041a80:	9b04      	ldr	r3, [sp, #16]
 8041a82:	45b2      	cmp	sl, r6
 8041a84:	4417      	add	r7, r2
 8041a86:	441f      	add	r7, r3
 8041a88:	4653      	mov	r3, sl
 8041a8a:	bfa8      	it	ge
 8041a8c:	4633      	movge	r3, r6
 8041a8e:	42bb      	cmp	r3, r7
 8041a90:	bfa8      	it	ge
 8041a92:	463b      	movge	r3, r7
 8041a94:	2b00      	cmp	r3, #0
 8041a96:	bfc2      	ittt	gt
 8041a98:	1af6      	subgt	r6, r6, r3
 8041a9a:	1aff      	subgt	r7, r7, r3
 8041a9c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8041aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8041aa2:	2b00      	cmp	r3, #0
 8041aa4:	dd17      	ble.n	8041ad6 <_strtod_l+0x736>
 8041aa6:	4659      	mov	r1, fp
 8041aa8:	461a      	mov	r2, r3
 8041aaa:	4620      	mov	r0, r4
 8041aac:	f002 fe40 	bl	8044730 <__pow5mult>
 8041ab0:	4683      	mov	fp, r0
 8041ab2:	2800      	cmp	r0, #0
 8041ab4:	f43f aeb8 	beq.w	8041828 <_strtod_l+0x488>
 8041ab8:	4601      	mov	r1, r0
 8041aba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8041abc:	4620      	mov	r0, r4
 8041abe:	f002 fd8d 	bl	80445dc <__multiply>
 8041ac2:	900b      	str	r0, [sp, #44]	; 0x2c
 8041ac4:	2800      	cmp	r0, #0
 8041ac6:	f43f aeaf 	beq.w	8041828 <_strtod_l+0x488>
 8041aca:	9916      	ldr	r1, [sp, #88]	; 0x58
 8041acc:	4620      	mov	r0, r4
 8041ace:	f002 fc6f 	bl	80443b0 <_Bfree>
 8041ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8041ad4:	9316      	str	r3, [sp, #88]	; 0x58
 8041ad6:	2e00      	cmp	r6, #0
 8041ad8:	f300 808c 	bgt.w	8041bf4 <_strtod_l+0x854>
 8041adc:	9b08      	ldr	r3, [sp, #32]
 8041ade:	2b00      	cmp	r3, #0
 8041ae0:	dd08      	ble.n	8041af4 <_strtod_l+0x754>
 8041ae2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8041ae4:	9905      	ldr	r1, [sp, #20]
 8041ae6:	4620      	mov	r0, r4
 8041ae8:	f002 fe22 	bl	8044730 <__pow5mult>
 8041aec:	9005      	str	r0, [sp, #20]
 8041aee:	2800      	cmp	r0, #0
 8041af0:	f43f ae9a 	beq.w	8041828 <_strtod_l+0x488>
 8041af4:	2f00      	cmp	r7, #0
 8041af6:	dd08      	ble.n	8041b0a <_strtod_l+0x76a>
 8041af8:	9905      	ldr	r1, [sp, #20]
 8041afa:	463a      	mov	r2, r7
 8041afc:	4620      	mov	r0, r4
 8041afe:	f002 fe71 	bl	80447e4 <__lshift>
 8041b02:	9005      	str	r0, [sp, #20]
 8041b04:	2800      	cmp	r0, #0
 8041b06:	f43f ae8f 	beq.w	8041828 <_strtod_l+0x488>
 8041b0a:	f1ba 0f00 	cmp.w	sl, #0
 8041b0e:	dd08      	ble.n	8041b22 <_strtod_l+0x782>
 8041b10:	4659      	mov	r1, fp
 8041b12:	4652      	mov	r2, sl
 8041b14:	4620      	mov	r0, r4
 8041b16:	f002 fe65 	bl	80447e4 <__lshift>
 8041b1a:	4683      	mov	fp, r0
 8041b1c:	2800      	cmp	r0, #0
 8041b1e:	f43f ae83 	beq.w	8041828 <_strtod_l+0x488>
 8041b22:	9a05      	ldr	r2, [sp, #20]
 8041b24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8041b26:	4620      	mov	r0, r4
 8041b28:	f002 fee4 	bl	80448f4 <__mdiff>
 8041b2c:	4605      	mov	r5, r0
 8041b2e:	2800      	cmp	r0, #0
 8041b30:	f43f ae7a 	beq.w	8041828 <_strtod_l+0x488>
 8041b34:	68c3      	ldr	r3, [r0, #12]
 8041b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8041b38:	2300      	movs	r3, #0
 8041b3a:	60c3      	str	r3, [r0, #12]
 8041b3c:	4659      	mov	r1, fp
 8041b3e:	f002 febd 	bl	80448bc <__mcmp>
 8041b42:	2800      	cmp	r0, #0
 8041b44:	da60      	bge.n	8041c08 <_strtod_l+0x868>
 8041b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8041b48:	ea53 0308 	orrs.w	r3, r3, r8
 8041b4c:	f040 8084 	bne.w	8041c58 <_strtod_l+0x8b8>
 8041b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8041b54:	2b00      	cmp	r3, #0
 8041b56:	d17f      	bne.n	8041c58 <_strtod_l+0x8b8>
 8041b58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8041b5c:	0d1b      	lsrs	r3, r3, #20
 8041b5e:	051b      	lsls	r3, r3, #20
 8041b60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8041b64:	d978      	bls.n	8041c58 <_strtod_l+0x8b8>
 8041b66:	696b      	ldr	r3, [r5, #20]
 8041b68:	b913      	cbnz	r3, 8041b70 <_strtod_l+0x7d0>
 8041b6a:	692b      	ldr	r3, [r5, #16]
 8041b6c:	2b01      	cmp	r3, #1
 8041b6e:	dd73      	ble.n	8041c58 <_strtod_l+0x8b8>
 8041b70:	4629      	mov	r1, r5
 8041b72:	2201      	movs	r2, #1
 8041b74:	4620      	mov	r0, r4
 8041b76:	f002 fe35 	bl	80447e4 <__lshift>
 8041b7a:	4659      	mov	r1, fp
 8041b7c:	4605      	mov	r5, r0
 8041b7e:	f002 fe9d 	bl	80448bc <__mcmp>
 8041b82:	2800      	cmp	r0, #0
 8041b84:	dd68      	ble.n	8041c58 <_strtod_l+0x8b8>
 8041b86:	9904      	ldr	r1, [sp, #16]
 8041b88:	4a54      	ldr	r2, [pc, #336]	; (8041cdc <_strtod_l+0x93c>)
 8041b8a:	464b      	mov	r3, r9
 8041b8c:	2900      	cmp	r1, #0
 8041b8e:	f000 8084 	beq.w	8041c9a <_strtod_l+0x8fa>
 8041b92:	ea02 0109 	and.w	r1, r2, r9
 8041b96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8041b9a:	dc7e      	bgt.n	8041c9a <_strtod_l+0x8fa>
 8041b9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8041ba0:	f77f aeb3 	ble.w	804190a <_strtod_l+0x56a>
 8041ba4:	4b4e      	ldr	r3, [pc, #312]	; (8041ce0 <_strtod_l+0x940>)
 8041ba6:	4640      	mov	r0, r8
 8041ba8:	4649      	mov	r1, r9
 8041baa:	2200      	movs	r2, #0
 8041bac:	f7de fd54 	bl	8020658 <__aeabi_dmul>
 8041bb0:	4b4a      	ldr	r3, [pc, #296]	; (8041cdc <_strtod_l+0x93c>)
 8041bb2:	400b      	ands	r3, r1
 8041bb4:	4680      	mov	r8, r0
 8041bb6:	4689      	mov	r9, r1
 8041bb8:	2b00      	cmp	r3, #0
 8041bba:	f47f ae3f 	bne.w	804183c <_strtod_l+0x49c>
 8041bbe:	2322      	movs	r3, #34	; 0x22
 8041bc0:	6023      	str	r3, [r4, #0]
 8041bc2:	e63b      	b.n	804183c <_strtod_l+0x49c>
 8041bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8041bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8041bcc:	ea03 0808 	and.w	r8, r3, r8
 8041bd0:	e6e8      	b.n	80419a4 <_strtod_l+0x604>
 8041bd2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8041bd6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8041bda:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8041bde:	36e2      	adds	r6, #226	; 0xe2
 8041be0:	fa01 f306 	lsl.w	r3, r1, r6
 8041be4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8041be8:	e748      	b.n	8041a7c <_strtod_l+0x6dc>
 8041bea:	2100      	movs	r1, #0
 8041bec:	2301      	movs	r3, #1
 8041bee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8041bf2:	e743      	b.n	8041a7c <_strtod_l+0x6dc>
 8041bf4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8041bf6:	4632      	mov	r2, r6
 8041bf8:	4620      	mov	r0, r4
 8041bfa:	f002 fdf3 	bl	80447e4 <__lshift>
 8041bfe:	9016      	str	r0, [sp, #88]	; 0x58
 8041c00:	2800      	cmp	r0, #0
 8041c02:	f47f af6b 	bne.w	8041adc <_strtod_l+0x73c>
 8041c06:	e60f      	b.n	8041828 <_strtod_l+0x488>
 8041c08:	46ca      	mov	sl, r9
 8041c0a:	d171      	bne.n	8041cf0 <_strtod_l+0x950>
 8041c0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8041c0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8041c12:	b352      	cbz	r2, 8041c6a <_strtod_l+0x8ca>
 8041c14:	4a33      	ldr	r2, [pc, #204]	; (8041ce4 <_strtod_l+0x944>)
 8041c16:	4293      	cmp	r3, r2
 8041c18:	d12a      	bne.n	8041c70 <_strtod_l+0x8d0>
 8041c1a:	9b04      	ldr	r3, [sp, #16]
 8041c1c:	4641      	mov	r1, r8
 8041c1e:	b1fb      	cbz	r3, 8041c60 <_strtod_l+0x8c0>
 8041c20:	4b2e      	ldr	r3, [pc, #184]	; (8041cdc <_strtod_l+0x93c>)
 8041c22:	ea09 0303 	and.w	r3, r9, r3
 8041c26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8041c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8041c2e:	d81a      	bhi.n	8041c66 <_strtod_l+0x8c6>
 8041c30:	0d1b      	lsrs	r3, r3, #20
 8041c32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8041c36:	fa02 f303 	lsl.w	r3, r2, r3
 8041c3a:	4299      	cmp	r1, r3
 8041c3c:	d118      	bne.n	8041c70 <_strtod_l+0x8d0>
 8041c3e:	4b2a      	ldr	r3, [pc, #168]	; (8041ce8 <_strtod_l+0x948>)
 8041c40:	459a      	cmp	sl, r3
 8041c42:	d102      	bne.n	8041c4a <_strtod_l+0x8aa>
 8041c44:	3101      	adds	r1, #1
 8041c46:	f43f adef 	beq.w	8041828 <_strtod_l+0x488>
 8041c4a:	4b24      	ldr	r3, [pc, #144]	; (8041cdc <_strtod_l+0x93c>)
 8041c4c:	ea0a 0303 	and.w	r3, sl, r3
 8041c50:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8041c54:	f04f 0800 	mov.w	r8, #0
 8041c58:	9b04      	ldr	r3, [sp, #16]
 8041c5a:	2b00      	cmp	r3, #0
 8041c5c:	d1a2      	bne.n	8041ba4 <_strtod_l+0x804>
 8041c5e:	e5ed      	b.n	804183c <_strtod_l+0x49c>
 8041c60:	f04f 33ff 	mov.w	r3, #4294967295
 8041c64:	e7e9      	b.n	8041c3a <_strtod_l+0x89a>
 8041c66:	4613      	mov	r3, r2
 8041c68:	e7e7      	b.n	8041c3a <_strtod_l+0x89a>
 8041c6a:	ea53 0308 	orrs.w	r3, r3, r8
 8041c6e:	d08a      	beq.n	8041b86 <_strtod_l+0x7e6>
 8041c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8041c72:	b1e3      	cbz	r3, 8041cae <_strtod_l+0x90e>
 8041c74:	ea13 0f0a 	tst.w	r3, sl
 8041c78:	d0ee      	beq.n	8041c58 <_strtod_l+0x8b8>
 8041c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8041c7c:	9a04      	ldr	r2, [sp, #16]
 8041c7e:	4640      	mov	r0, r8
 8041c80:	4649      	mov	r1, r9
 8041c82:	b1c3      	cbz	r3, 8041cb6 <_strtod_l+0x916>
 8041c84:	f7ff fb6f 	bl	8041366 <sulp>
 8041c88:	4602      	mov	r2, r0
 8041c8a:	460b      	mov	r3, r1
 8041c8c:	ec51 0b18 	vmov	r0, r1, d8
 8041c90:	f7de fb2c 	bl	80202ec <__adddf3>
 8041c94:	4680      	mov	r8, r0
 8041c96:	4689      	mov	r9, r1
 8041c98:	e7de      	b.n	8041c58 <_strtod_l+0x8b8>
 8041c9a:	4013      	ands	r3, r2
 8041c9c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8041ca0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8041ca4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8041ca8:	f04f 38ff 	mov.w	r8, #4294967295
 8041cac:	e7d4      	b.n	8041c58 <_strtod_l+0x8b8>
 8041cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8041cb0:	ea13 0f08 	tst.w	r3, r8
 8041cb4:	e7e0      	b.n	8041c78 <_strtod_l+0x8d8>
 8041cb6:	f7ff fb56 	bl	8041366 <sulp>
 8041cba:	4602      	mov	r2, r0
 8041cbc:	460b      	mov	r3, r1
 8041cbe:	ec51 0b18 	vmov	r0, r1, d8
 8041cc2:	f7de fb11 	bl	80202e8 <__aeabi_dsub>
 8041cc6:	2200      	movs	r2, #0
 8041cc8:	2300      	movs	r3, #0
 8041cca:	4680      	mov	r8, r0
 8041ccc:	4689      	mov	r9, r1
 8041cce:	f7de ff2b 	bl	8020b28 <__aeabi_dcmpeq>
 8041cd2:	2800      	cmp	r0, #0
 8041cd4:	d0c0      	beq.n	8041c58 <_strtod_l+0x8b8>
 8041cd6:	e618      	b.n	804190a <_strtod_l+0x56a>
 8041cd8:	fffffc02 	.word	0xfffffc02
 8041cdc:	7ff00000 	.word	0x7ff00000
 8041ce0:	39500000 	.word	0x39500000
 8041ce4:	000fffff 	.word	0x000fffff
 8041ce8:	7fefffff 	.word	0x7fefffff
 8041cec:	0804a250 	.word	0x0804a250
 8041cf0:	4659      	mov	r1, fp
 8041cf2:	4628      	mov	r0, r5
 8041cf4:	f002 ff52 	bl	8044b9c <__ratio>
 8041cf8:	ec57 6b10 	vmov	r6, r7, d0
 8041cfc:	ee10 0a10 	vmov	r0, s0
 8041d00:	2200      	movs	r2, #0
 8041d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8041d06:	4639      	mov	r1, r7
 8041d08:	f7de ff22 	bl	8020b50 <__aeabi_dcmple>
 8041d0c:	2800      	cmp	r0, #0
 8041d0e:	d071      	beq.n	8041df4 <_strtod_l+0xa54>
 8041d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8041d12:	2b00      	cmp	r3, #0
 8041d14:	d17c      	bne.n	8041e10 <_strtod_l+0xa70>
 8041d16:	f1b8 0f00 	cmp.w	r8, #0
 8041d1a:	d15a      	bne.n	8041dd2 <_strtod_l+0xa32>
 8041d1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8041d20:	2b00      	cmp	r3, #0
 8041d22:	d15d      	bne.n	8041de0 <_strtod_l+0xa40>
 8041d24:	4b90      	ldr	r3, [pc, #576]	; (8041f68 <_strtod_l+0xbc8>)
 8041d26:	2200      	movs	r2, #0
 8041d28:	4630      	mov	r0, r6
 8041d2a:	4639      	mov	r1, r7
 8041d2c:	f7de ff06 	bl	8020b3c <__aeabi_dcmplt>
 8041d30:	2800      	cmp	r0, #0
 8041d32:	d15c      	bne.n	8041dee <_strtod_l+0xa4e>
 8041d34:	4630      	mov	r0, r6
 8041d36:	4639      	mov	r1, r7
 8041d38:	4b8c      	ldr	r3, [pc, #560]	; (8041f6c <_strtod_l+0xbcc>)
 8041d3a:	2200      	movs	r2, #0
 8041d3c:	f7de fc8c 	bl	8020658 <__aeabi_dmul>
 8041d40:	4606      	mov	r6, r0
 8041d42:	460f      	mov	r7, r1
 8041d44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8041d48:	9606      	str	r6, [sp, #24]
 8041d4a:	9307      	str	r3, [sp, #28]
 8041d4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8041d50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8041d54:	4b86      	ldr	r3, [pc, #536]	; (8041f70 <_strtod_l+0xbd0>)
 8041d56:	ea0a 0303 	and.w	r3, sl, r3
 8041d5a:	930d      	str	r3, [sp, #52]	; 0x34
 8041d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8041d5e:	4b85      	ldr	r3, [pc, #532]	; (8041f74 <_strtod_l+0xbd4>)
 8041d60:	429a      	cmp	r2, r3
 8041d62:	f040 8090 	bne.w	8041e86 <_strtod_l+0xae6>
 8041d66:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8041d6a:	ec49 8b10 	vmov	d0, r8, r9
 8041d6e:	f002 fe4b 	bl	8044a08 <__ulp>
 8041d72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8041d76:	ec51 0b10 	vmov	r0, r1, d0
 8041d7a:	f7de fc6d 	bl	8020658 <__aeabi_dmul>
 8041d7e:	4642      	mov	r2, r8
 8041d80:	464b      	mov	r3, r9
 8041d82:	f7de fab3 	bl	80202ec <__adddf3>
 8041d86:	460b      	mov	r3, r1
 8041d88:	4979      	ldr	r1, [pc, #484]	; (8041f70 <_strtod_l+0xbd0>)
 8041d8a:	4a7b      	ldr	r2, [pc, #492]	; (8041f78 <_strtod_l+0xbd8>)
 8041d8c:	4019      	ands	r1, r3
 8041d8e:	4291      	cmp	r1, r2
 8041d90:	4680      	mov	r8, r0
 8041d92:	d944      	bls.n	8041e1e <_strtod_l+0xa7e>
 8041d94:	ee18 2a90 	vmov	r2, s17
 8041d98:	4b78      	ldr	r3, [pc, #480]	; (8041f7c <_strtod_l+0xbdc>)
 8041d9a:	429a      	cmp	r2, r3
 8041d9c:	d104      	bne.n	8041da8 <_strtod_l+0xa08>
 8041d9e:	ee18 3a10 	vmov	r3, s16
 8041da2:	3301      	adds	r3, #1
 8041da4:	f43f ad40 	beq.w	8041828 <_strtod_l+0x488>
 8041da8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8041f7c <_strtod_l+0xbdc>
 8041dac:	f04f 38ff 	mov.w	r8, #4294967295
 8041db0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8041db2:	4620      	mov	r0, r4
 8041db4:	f002 fafc 	bl	80443b0 <_Bfree>
 8041db8:	9905      	ldr	r1, [sp, #20]
 8041dba:	4620      	mov	r0, r4
 8041dbc:	f002 faf8 	bl	80443b0 <_Bfree>
 8041dc0:	4659      	mov	r1, fp
 8041dc2:	4620      	mov	r0, r4
 8041dc4:	f002 faf4 	bl	80443b0 <_Bfree>
 8041dc8:	4629      	mov	r1, r5
 8041dca:	4620      	mov	r0, r4
 8041dcc:	f002 faf0 	bl	80443b0 <_Bfree>
 8041dd0:	e609      	b.n	80419e6 <_strtod_l+0x646>
 8041dd2:	f1b8 0f01 	cmp.w	r8, #1
 8041dd6:	d103      	bne.n	8041de0 <_strtod_l+0xa40>
 8041dd8:	f1b9 0f00 	cmp.w	r9, #0
 8041ddc:	f43f ad95 	beq.w	804190a <_strtod_l+0x56a>
 8041de0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8041f38 <_strtod_l+0xb98>
 8041de4:	4f60      	ldr	r7, [pc, #384]	; (8041f68 <_strtod_l+0xbc8>)
 8041de6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8041dea:	2600      	movs	r6, #0
 8041dec:	e7ae      	b.n	8041d4c <_strtod_l+0x9ac>
 8041dee:	4f5f      	ldr	r7, [pc, #380]	; (8041f6c <_strtod_l+0xbcc>)
 8041df0:	2600      	movs	r6, #0
 8041df2:	e7a7      	b.n	8041d44 <_strtod_l+0x9a4>
 8041df4:	4b5d      	ldr	r3, [pc, #372]	; (8041f6c <_strtod_l+0xbcc>)
 8041df6:	4630      	mov	r0, r6
 8041df8:	4639      	mov	r1, r7
 8041dfa:	2200      	movs	r2, #0
 8041dfc:	f7de fc2c 	bl	8020658 <__aeabi_dmul>
 8041e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8041e02:	4606      	mov	r6, r0
 8041e04:	460f      	mov	r7, r1
 8041e06:	2b00      	cmp	r3, #0
 8041e08:	d09c      	beq.n	8041d44 <_strtod_l+0x9a4>
 8041e0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8041e0e:	e79d      	b.n	8041d4c <_strtod_l+0x9ac>
 8041e10:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8041f40 <_strtod_l+0xba0>
 8041e14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8041e18:	ec57 6b17 	vmov	r6, r7, d7
 8041e1c:	e796      	b.n	8041d4c <_strtod_l+0x9ac>
 8041e1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8041e22:	9b04      	ldr	r3, [sp, #16]
 8041e24:	46ca      	mov	sl, r9
 8041e26:	2b00      	cmp	r3, #0
 8041e28:	d1c2      	bne.n	8041db0 <_strtod_l+0xa10>
 8041e2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8041e2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8041e30:	0d1b      	lsrs	r3, r3, #20
 8041e32:	051b      	lsls	r3, r3, #20
 8041e34:	429a      	cmp	r2, r3
 8041e36:	d1bb      	bne.n	8041db0 <_strtod_l+0xa10>
 8041e38:	4630      	mov	r0, r6
 8041e3a:	4639      	mov	r1, r7
 8041e3c:	f7de ff6c 	bl	8020d18 <__aeabi_d2lz>
 8041e40:	f7de fbdc 	bl	80205fc <__aeabi_l2d>
 8041e44:	4602      	mov	r2, r0
 8041e46:	460b      	mov	r3, r1
 8041e48:	4630      	mov	r0, r6
 8041e4a:	4639      	mov	r1, r7
 8041e4c:	f7de fa4c 	bl	80202e8 <__aeabi_dsub>
 8041e50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8041e52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8041e56:	ea43 0308 	orr.w	r3, r3, r8
 8041e5a:	4313      	orrs	r3, r2
 8041e5c:	4606      	mov	r6, r0
 8041e5e:	460f      	mov	r7, r1
 8041e60:	d054      	beq.n	8041f0c <_strtod_l+0xb6c>
 8041e62:	a339      	add	r3, pc, #228	; (adr r3, 8041f48 <_strtod_l+0xba8>)
 8041e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041e68:	f7de fe68 	bl	8020b3c <__aeabi_dcmplt>
 8041e6c:	2800      	cmp	r0, #0
 8041e6e:	f47f ace5 	bne.w	804183c <_strtod_l+0x49c>
 8041e72:	a337      	add	r3, pc, #220	; (adr r3, 8041f50 <_strtod_l+0xbb0>)
 8041e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041e78:	4630      	mov	r0, r6
 8041e7a:	4639      	mov	r1, r7
 8041e7c:	f7de fe7c 	bl	8020b78 <__aeabi_dcmpgt>
 8041e80:	2800      	cmp	r0, #0
 8041e82:	d095      	beq.n	8041db0 <_strtod_l+0xa10>
 8041e84:	e4da      	b.n	804183c <_strtod_l+0x49c>
 8041e86:	9b04      	ldr	r3, [sp, #16]
 8041e88:	b333      	cbz	r3, 8041ed8 <_strtod_l+0xb38>
 8041e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8041e8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8041e90:	d822      	bhi.n	8041ed8 <_strtod_l+0xb38>
 8041e92:	a331      	add	r3, pc, #196	; (adr r3, 8041f58 <_strtod_l+0xbb8>)
 8041e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041e98:	4630      	mov	r0, r6
 8041e9a:	4639      	mov	r1, r7
 8041e9c:	f7de fe58 	bl	8020b50 <__aeabi_dcmple>
 8041ea0:	b1a0      	cbz	r0, 8041ecc <_strtod_l+0xb2c>
 8041ea2:	4639      	mov	r1, r7
 8041ea4:	4630      	mov	r0, r6
 8041ea6:	f7de feaf 	bl	8020c08 <__aeabi_d2uiz>
 8041eaa:	2801      	cmp	r0, #1
 8041eac:	bf38      	it	cc
 8041eae:	2001      	movcc	r0, #1
 8041eb0:	f7de fb58 	bl	8020564 <__aeabi_ui2d>
 8041eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8041eb6:	4606      	mov	r6, r0
 8041eb8:	460f      	mov	r7, r1
 8041eba:	bb23      	cbnz	r3, 8041f06 <_strtod_l+0xb66>
 8041ebc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8041ec0:	9010      	str	r0, [sp, #64]	; 0x40
 8041ec2:	9311      	str	r3, [sp, #68]	; 0x44
 8041ec4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8041ec8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8041ecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8041ece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8041ed0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8041ed4:	1a9b      	subs	r3, r3, r2
 8041ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8041ed8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8041edc:	eeb0 0a48 	vmov.f32	s0, s16
 8041ee0:	eef0 0a68 	vmov.f32	s1, s17
 8041ee4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8041ee8:	f002 fd8e 	bl	8044a08 <__ulp>
 8041eec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8041ef0:	ec53 2b10 	vmov	r2, r3, d0
 8041ef4:	f7de fbb0 	bl	8020658 <__aeabi_dmul>
 8041ef8:	ec53 2b18 	vmov	r2, r3, d8
 8041efc:	f7de f9f6 	bl	80202ec <__adddf3>
 8041f00:	4680      	mov	r8, r0
 8041f02:	4689      	mov	r9, r1
 8041f04:	e78d      	b.n	8041e22 <_strtod_l+0xa82>
 8041f06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8041f0a:	e7db      	b.n	8041ec4 <_strtod_l+0xb24>
 8041f0c:	a314      	add	r3, pc, #80	; (adr r3, 8041f60 <_strtod_l+0xbc0>)
 8041f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8041f12:	f7de fe13 	bl	8020b3c <__aeabi_dcmplt>
 8041f16:	e7b3      	b.n	8041e80 <_strtod_l+0xae0>
 8041f18:	2300      	movs	r3, #0
 8041f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8041f1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8041f1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8041f20:	6013      	str	r3, [r2, #0]
 8041f22:	f7ff ba7c 	b.w	804141e <_strtod_l+0x7e>
 8041f26:	2a65      	cmp	r2, #101	; 0x65
 8041f28:	f43f ab75 	beq.w	8041616 <_strtod_l+0x276>
 8041f2c:	2a45      	cmp	r2, #69	; 0x45
 8041f2e:	f43f ab72 	beq.w	8041616 <_strtod_l+0x276>
 8041f32:	2301      	movs	r3, #1
 8041f34:	f7ff bbaa 	b.w	804168c <_strtod_l+0x2ec>
 8041f38:	00000000 	.word	0x00000000
 8041f3c:	bff00000 	.word	0xbff00000
 8041f40:	00000000 	.word	0x00000000
 8041f44:	3ff00000 	.word	0x3ff00000
 8041f48:	94a03595 	.word	0x94a03595
 8041f4c:	3fdfffff 	.word	0x3fdfffff
 8041f50:	35afe535 	.word	0x35afe535
 8041f54:	3fe00000 	.word	0x3fe00000
 8041f58:	ffc00000 	.word	0xffc00000
 8041f5c:	41dfffff 	.word	0x41dfffff
 8041f60:	94a03595 	.word	0x94a03595
 8041f64:	3fcfffff 	.word	0x3fcfffff
 8041f68:	3ff00000 	.word	0x3ff00000
 8041f6c:	3fe00000 	.word	0x3fe00000
 8041f70:	7ff00000 	.word	0x7ff00000
 8041f74:	7fe00000 	.word	0x7fe00000
 8041f78:	7c9fffff 	.word	0x7c9fffff
 8041f7c:	7fefffff 	.word	0x7fefffff

08041f80 <strtod>:
 8041f80:	460a      	mov	r2, r1
 8041f82:	4601      	mov	r1, r0
 8041f84:	4802      	ldr	r0, [pc, #8]	; (8041f90 <strtod+0x10>)
 8041f86:	4b03      	ldr	r3, [pc, #12]	; (8041f94 <strtod+0x14>)
 8041f88:	6800      	ldr	r0, [r0, #0]
 8041f8a:	f7ff ba09 	b.w	80413a0 <_strtod_l>
 8041f8e:	bf00      	nop
 8041f90:	200036c8 	.word	0x200036c8
 8041f94:	20003510 	.word	0x20003510

08041f98 <_strtol_l.constprop.0>:
 8041f98:	2b01      	cmp	r3, #1
 8041f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8041f9e:	d001      	beq.n	8041fa4 <_strtol_l.constprop.0+0xc>
 8041fa0:	2b24      	cmp	r3, #36	; 0x24
 8041fa2:	d906      	bls.n	8041fb2 <_strtol_l.constprop.0+0x1a>
 8041fa4:	f000 fe94 	bl	8042cd0 <__errno>
 8041fa8:	2316      	movs	r3, #22
 8041faa:	6003      	str	r3, [r0, #0]
 8041fac:	2000      	movs	r0, #0
 8041fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8041fb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8042098 <_strtol_l.constprop.0+0x100>
 8041fb6:	460d      	mov	r5, r1
 8041fb8:	462e      	mov	r6, r5
 8041fba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8041fbe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8041fc2:	f017 0708 	ands.w	r7, r7, #8
 8041fc6:	d1f7      	bne.n	8041fb8 <_strtol_l.constprop.0+0x20>
 8041fc8:	2c2d      	cmp	r4, #45	; 0x2d
 8041fca:	d132      	bne.n	8042032 <_strtol_l.constprop.0+0x9a>
 8041fcc:	782c      	ldrb	r4, [r5, #0]
 8041fce:	2701      	movs	r7, #1
 8041fd0:	1cb5      	adds	r5, r6, #2
 8041fd2:	2b00      	cmp	r3, #0
 8041fd4:	d05b      	beq.n	804208e <_strtol_l.constprop.0+0xf6>
 8041fd6:	2b10      	cmp	r3, #16
 8041fd8:	d109      	bne.n	8041fee <_strtol_l.constprop.0+0x56>
 8041fda:	2c30      	cmp	r4, #48	; 0x30
 8041fdc:	d107      	bne.n	8041fee <_strtol_l.constprop.0+0x56>
 8041fde:	782c      	ldrb	r4, [r5, #0]
 8041fe0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8041fe4:	2c58      	cmp	r4, #88	; 0x58
 8041fe6:	d14d      	bne.n	8042084 <_strtol_l.constprop.0+0xec>
 8041fe8:	786c      	ldrb	r4, [r5, #1]
 8041fea:	2310      	movs	r3, #16
 8041fec:	3502      	adds	r5, #2
 8041fee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8041ff2:	f108 38ff 	add.w	r8, r8, #4294967295
 8041ff6:	f04f 0e00 	mov.w	lr, #0
 8041ffa:	fbb8 f9f3 	udiv	r9, r8, r3
 8041ffe:	4676      	mov	r6, lr
 8042000:	fb03 8a19 	mls	sl, r3, r9, r8
 8042004:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8042008:	f1bc 0f09 	cmp.w	ip, #9
 804200c:	d816      	bhi.n	804203c <_strtol_l.constprop.0+0xa4>
 804200e:	4664      	mov	r4, ip
 8042010:	42a3      	cmp	r3, r4
 8042012:	dd24      	ble.n	804205e <_strtol_l.constprop.0+0xc6>
 8042014:	f1be 3fff 	cmp.w	lr, #4294967295
 8042018:	d008      	beq.n	804202c <_strtol_l.constprop.0+0x94>
 804201a:	45b1      	cmp	r9, r6
 804201c:	d31c      	bcc.n	8042058 <_strtol_l.constprop.0+0xc0>
 804201e:	d101      	bne.n	8042024 <_strtol_l.constprop.0+0x8c>
 8042020:	45a2      	cmp	sl, r4
 8042022:	db19      	blt.n	8042058 <_strtol_l.constprop.0+0xc0>
 8042024:	fb06 4603 	mla	r6, r6, r3, r4
 8042028:	f04f 0e01 	mov.w	lr, #1
 804202c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8042030:	e7e8      	b.n	8042004 <_strtol_l.constprop.0+0x6c>
 8042032:	2c2b      	cmp	r4, #43	; 0x2b
 8042034:	bf04      	itt	eq
 8042036:	782c      	ldrbeq	r4, [r5, #0]
 8042038:	1cb5      	addeq	r5, r6, #2
 804203a:	e7ca      	b.n	8041fd2 <_strtol_l.constprop.0+0x3a>
 804203c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8042040:	f1bc 0f19 	cmp.w	ip, #25
 8042044:	d801      	bhi.n	804204a <_strtol_l.constprop.0+0xb2>
 8042046:	3c37      	subs	r4, #55	; 0x37
 8042048:	e7e2      	b.n	8042010 <_strtol_l.constprop.0+0x78>
 804204a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 804204e:	f1bc 0f19 	cmp.w	ip, #25
 8042052:	d804      	bhi.n	804205e <_strtol_l.constprop.0+0xc6>
 8042054:	3c57      	subs	r4, #87	; 0x57
 8042056:	e7db      	b.n	8042010 <_strtol_l.constprop.0+0x78>
 8042058:	f04f 3eff 	mov.w	lr, #4294967295
 804205c:	e7e6      	b.n	804202c <_strtol_l.constprop.0+0x94>
 804205e:	f1be 3fff 	cmp.w	lr, #4294967295
 8042062:	d105      	bne.n	8042070 <_strtol_l.constprop.0+0xd8>
 8042064:	2322      	movs	r3, #34	; 0x22
 8042066:	6003      	str	r3, [r0, #0]
 8042068:	4646      	mov	r6, r8
 804206a:	b942      	cbnz	r2, 804207e <_strtol_l.constprop.0+0xe6>
 804206c:	4630      	mov	r0, r6
 804206e:	e79e      	b.n	8041fae <_strtol_l.constprop.0+0x16>
 8042070:	b107      	cbz	r7, 8042074 <_strtol_l.constprop.0+0xdc>
 8042072:	4276      	negs	r6, r6
 8042074:	2a00      	cmp	r2, #0
 8042076:	d0f9      	beq.n	804206c <_strtol_l.constprop.0+0xd4>
 8042078:	f1be 0f00 	cmp.w	lr, #0
 804207c:	d000      	beq.n	8042080 <_strtol_l.constprop.0+0xe8>
 804207e:	1e69      	subs	r1, r5, #1
 8042080:	6011      	str	r1, [r2, #0]
 8042082:	e7f3      	b.n	804206c <_strtol_l.constprop.0+0xd4>
 8042084:	2430      	movs	r4, #48	; 0x30
 8042086:	2b00      	cmp	r3, #0
 8042088:	d1b1      	bne.n	8041fee <_strtol_l.constprop.0+0x56>
 804208a:	2308      	movs	r3, #8
 804208c:	e7af      	b.n	8041fee <_strtol_l.constprop.0+0x56>
 804208e:	2c30      	cmp	r4, #48	; 0x30
 8042090:	d0a5      	beq.n	8041fde <_strtol_l.constprop.0+0x46>
 8042092:	230a      	movs	r3, #10
 8042094:	e7ab      	b.n	8041fee <_strtol_l.constprop.0+0x56>
 8042096:	bf00      	nop
 8042098:	0804a279 	.word	0x0804a279

0804209c <strtol>:
 804209c:	4613      	mov	r3, r2
 804209e:	460a      	mov	r2, r1
 80420a0:	4601      	mov	r1, r0
 80420a2:	4802      	ldr	r0, [pc, #8]	; (80420ac <strtol+0x10>)
 80420a4:	6800      	ldr	r0, [r0, #0]
 80420a6:	f7ff bf77 	b.w	8041f98 <_strtol_l.constprop.0>
 80420aa:	bf00      	nop
 80420ac:	200036c8 	.word	0x200036c8

080420b0 <__cvt>:
 80420b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80420b4:	ec55 4b10 	vmov	r4, r5, d0
 80420b8:	2d00      	cmp	r5, #0
 80420ba:	460e      	mov	r6, r1
 80420bc:	4619      	mov	r1, r3
 80420be:	462b      	mov	r3, r5
 80420c0:	bfbb      	ittet	lt
 80420c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80420c6:	461d      	movlt	r5, r3
 80420c8:	2300      	movge	r3, #0
 80420ca:	232d      	movlt	r3, #45	; 0x2d
 80420cc:	700b      	strb	r3, [r1, #0]
 80420ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80420d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80420d4:	4691      	mov	r9, r2
 80420d6:	f023 0820 	bic.w	r8, r3, #32
 80420da:	bfbc      	itt	lt
 80420dc:	4622      	movlt	r2, r4
 80420de:	4614      	movlt	r4, r2
 80420e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80420e4:	d005      	beq.n	80420f2 <__cvt+0x42>
 80420e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80420ea:	d100      	bne.n	80420ee <__cvt+0x3e>
 80420ec:	3601      	adds	r6, #1
 80420ee:	2102      	movs	r1, #2
 80420f0:	e000      	b.n	80420f4 <__cvt+0x44>
 80420f2:	2103      	movs	r1, #3
 80420f4:	ab03      	add	r3, sp, #12
 80420f6:	9301      	str	r3, [sp, #4]
 80420f8:	ab02      	add	r3, sp, #8
 80420fa:	9300      	str	r3, [sp, #0]
 80420fc:	ec45 4b10 	vmov	d0, r4, r5
 8042100:	4653      	mov	r3, sl
 8042102:	4632      	mov	r2, r6
 8042104:	f000 feb8 	bl	8042e78 <_dtoa_r>
 8042108:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 804210c:	4607      	mov	r7, r0
 804210e:	d102      	bne.n	8042116 <__cvt+0x66>
 8042110:	f019 0f01 	tst.w	r9, #1
 8042114:	d022      	beq.n	804215c <__cvt+0xac>
 8042116:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 804211a:	eb07 0906 	add.w	r9, r7, r6
 804211e:	d110      	bne.n	8042142 <__cvt+0x92>
 8042120:	783b      	ldrb	r3, [r7, #0]
 8042122:	2b30      	cmp	r3, #48	; 0x30
 8042124:	d10a      	bne.n	804213c <__cvt+0x8c>
 8042126:	2200      	movs	r2, #0
 8042128:	2300      	movs	r3, #0
 804212a:	4620      	mov	r0, r4
 804212c:	4629      	mov	r1, r5
 804212e:	f7de fcfb 	bl	8020b28 <__aeabi_dcmpeq>
 8042132:	b918      	cbnz	r0, 804213c <__cvt+0x8c>
 8042134:	f1c6 0601 	rsb	r6, r6, #1
 8042138:	f8ca 6000 	str.w	r6, [sl]
 804213c:	f8da 3000 	ldr.w	r3, [sl]
 8042140:	4499      	add	r9, r3
 8042142:	2200      	movs	r2, #0
 8042144:	2300      	movs	r3, #0
 8042146:	4620      	mov	r0, r4
 8042148:	4629      	mov	r1, r5
 804214a:	f7de fced 	bl	8020b28 <__aeabi_dcmpeq>
 804214e:	b108      	cbz	r0, 8042154 <__cvt+0xa4>
 8042150:	f8cd 900c 	str.w	r9, [sp, #12]
 8042154:	2230      	movs	r2, #48	; 0x30
 8042156:	9b03      	ldr	r3, [sp, #12]
 8042158:	454b      	cmp	r3, r9
 804215a:	d307      	bcc.n	804216c <__cvt+0xbc>
 804215c:	9b03      	ldr	r3, [sp, #12]
 804215e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8042160:	1bdb      	subs	r3, r3, r7
 8042162:	4638      	mov	r0, r7
 8042164:	6013      	str	r3, [r2, #0]
 8042166:	b004      	add	sp, #16
 8042168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804216c:	1c59      	adds	r1, r3, #1
 804216e:	9103      	str	r1, [sp, #12]
 8042170:	701a      	strb	r2, [r3, #0]
 8042172:	e7f0      	b.n	8042156 <__cvt+0xa6>

08042174 <__exponent>:
 8042174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8042176:	4603      	mov	r3, r0
 8042178:	2900      	cmp	r1, #0
 804217a:	bfb8      	it	lt
 804217c:	4249      	neglt	r1, r1
 804217e:	f803 2b02 	strb.w	r2, [r3], #2
 8042182:	bfb4      	ite	lt
 8042184:	222d      	movlt	r2, #45	; 0x2d
 8042186:	222b      	movge	r2, #43	; 0x2b
 8042188:	2909      	cmp	r1, #9
 804218a:	7042      	strb	r2, [r0, #1]
 804218c:	dd2a      	ble.n	80421e4 <__exponent+0x70>
 804218e:	f10d 0207 	add.w	r2, sp, #7
 8042192:	4617      	mov	r7, r2
 8042194:	260a      	movs	r6, #10
 8042196:	4694      	mov	ip, r2
 8042198:	fb91 f5f6 	sdiv	r5, r1, r6
 804219c:	fb06 1415 	mls	r4, r6, r5, r1
 80421a0:	3430      	adds	r4, #48	; 0x30
 80421a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80421a6:	460c      	mov	r4, r1
 80421a8:	2c63      	cmp	r4, #99	; 0x63
 80421aa:	f102 32ff 	add.w	r2, r2, #4294967295
 80421ae:	4629      	mov	r1, r5
 80421b0:	dcf1      	bgt.n	8042196 <__exponent+0x22>
 80421b2:	3130      	adds	r1, #48	; 0x30
 80421b4:	f1ac 0402 	sub.w	r4, ip, #2
 80421b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80421bc:	1c41      	adds	r1, r0, #1
 80421be:	4622      	mov	r2, r4
 80421c0:	42ba      	cmp	r2, r7
 80421c2:	d30a      	bcc.n	80421da <__exponent+0x66>
 80421c4:	f10d 0209 	add.w	r2, sp, #9
 80421c8:	eba2 020c 	sub.w	r2, r2, ip
 80421cc:	42bc      	cmp	r4, r7
 80421ce:	bf88      	it	hi
 80421d0:	2200      	movhi	r2, #0
 80421d2:	4413      	add	r3, r2
 80421d4:	1a18      	subs	r0, r3, r0
 80421d6:	b003      	add	sp, #12
 80421d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80421da:	f812 5b01 	ldrb.w	r5, [r2], #1
 80421de:	f801 5f01 	strb.w	r5, [r1, #1]!
 80421e2:	e7ed      	b.n	80421c0 <__exponent+0x4c>
 80421e4:	2330      	movs	r3, #48	; 0x30
 80421e6:	3130      	adds	r1, #48	; 0x30
 80421e8:	7083      	strb	r3, [r0, #2]
 80421ea:	70c1      	strb	r1, [r0, #3]
 80421ec:	1d03      	adds	r3, r0, #4
 80421ee:	e7f1      	b.n	80421d4 <__exponent+0x60>

080421f0 <_printf_float>:
 80421f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80421f4:	ed2d 8b02 	vpush	{d8}
 80421f8:	b08d      	sub	sp, #52	; 0x34
 80421fa:	460c      	mov	r4, r1
 80421fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8042200:	4616      	mov	r6, r2
 8042202:	461f      	mov	r7, r3
 8042204:	4605      	mov	r5, r0
 8042206:	f000 fd19 	bl	8042c3c <_localeconv_r>
 804220a:	f8d0 a000 	ldr.w	sl, [r0]
 804220e:	4650      	mov	r0, sl
 8042210:	f7de f85e 	bl	80202d0 <strlen>
 8042214:	2300      	movs	r3, #0
 8042216:	930a      	str	r3, [sp, #40]	; 0x28
 8042218:	6823      	ldr	r3, [r4, #0]
 804221a:	9305      	str	r3, [sp, #20]
 804221c:	f8d8 3000 	ldr.w	r3, [r8]
 8042220:	f894 b018 	ldrb.w	fp, [r4, #24]
 8042224:	3307      	adds	r3, #7
 8042226:	f023 0307 	bic.w	r3, r3, #7
 804222a:	f103 0208 	add.w	r2, r3, #8
 804222e:	f8c8 2000 	str.w	r2, [r8]
 8042232:	e9d3 8900 	ldrd	r8, r9, [r3]
 8042236:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 804223a:	9307      	str	r3, [sp, #28]
 804223c:	f8cd 8018 	str.w	r8, [sp, #24]
 8042240:	ee08 0a10 	vmov	s16, r0
 8042244:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8042248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804224c:	4b9e      	ldr	r3, [pc, #632]	; (80424c8 <_printf_float+0x2d8>)
 804224e:	f04f 32ff 	mov.w	r2, #4294967295
 8042252:	f7de fc9b 	bl	8020b8c <__aeabi_dcmpun>
 8042256:	bb88      	cbnz	r0, 80422bc <_printf_float+0xcc>
 8042258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 804225c:	4b9a      	ldr	r3, [pc, #616]	; (80424c8 <_printf_float+0x2d8>)
 804225e:	f04f 32ff 	mov.w	r2, #4294967295
 8042262:	f7de fc75 	bl	8020b50 <__aeabi_dcmple>
 8042266:	bb48      	cbnz	r0, 80422bc <_printf_float+0xcc>
 8042268:	2200      	movs	r2, #0
 804226a:	2300      	movs	r3, #0
 804226c:	4640      	mov	r0, r8
 804226e:	4649      	mov	r1, r9
 8042270:	f7de fc64 	bl	8020b3c <__aeabi_dcmplt>
 8042274:	b110      	cbz	r0, 804227c <_printf_float+0x8c>
 8042276:	232d      	movs	r3, #45	; 0x2d
 8042278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804227c:	4a93      	ldr	r2, [pc, #588]	; (80424cc <_printf_float+0x2dc>)
 804227e:	4b94      	ldr	r3, [pc, #592]	; (80424d0 <_printf_float+0x2e0>)
 8042280:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8042284:	bf94      	ite	ls
 8042286:	4690      	movls	r8, r2
 8042288:	4698      	movhi	r8, r3
 804228a:	2303      	movs	r3, #3
 804228c:	6123      	str	r3, [r4, #16]
 804228e:	9b05      	ldr	r3, [sp, #20]
 8042290:	f023 0304 	bic.w	r3, r3, #4
 8042294:	6023      	str	r3, [r4, #0]
 8042296:	f04f 0900 	mov.w	r9, #0
 804229a:	9700      	str	r7, [sp, #0]
 804229c:	4633      	mov	r3, r6
 804229e:	aa0b      	add	r2, sp, #44	; 0x2c
 80422a0:	4621      	mov	r1, r4
 80422a2:	4628      	mov	r0, r5
 80422a4:	f000 f9da 	bl	804265c <_printf_common>
 80422a8:	3001      	adds	r0, #1
 80422aa:	f040 8090 	bne.w	80423ce <_printf_float+0x1de>
 80422ae:	f04f 30ff 	mov.w	r0, #4294967295
 80422b2:	b00d      	add	sp, #52	; 0x34
 80422b4:	ecbd 8b02 	vpop	{d8}
 80422b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80422bc:	4642      	mov	r2, r8
 80422be:	464b      	mov	r3, r9
 80422c0:	4640      	mov	r0, r8
 80422c2:	4649      	mov	r1, r9
 80422c4:	f7de fc62 	bl	8020b8c <__aeabi_dcmpun>
 80422c8:	b140      	cbz	r0, 80422dc <_printf_float+0xec>
 80422ca:	464b      	mov	r3, r9
 80422cc:	2b00      	cmp	r3, #0
 80422ce:	bfbc      	itt	lt
 80422d0:	232d      	movlt	r3, #45	; 0x2d
 80422d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80422d6:	4a7f      	ldr	r2, [pc, #508]	; (80424d4 <_printf_float+0x2e4>)
 80422d8:	4b7f      	ldr	r3, [pc, #508]	; (80424d8 <_printf_float+0x2e8>)
 80422da:	e7d1      	b.n	8042280 <_printf_float+0x90>
 80422dc:	6863      	ldr	r3, [r4, #4]
 80422de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80422e2:	9206      	str	r2, [sp, #24]
 80422e4:	1c5a      	adds	r2, r3, #1
 80422e6:	d13f      	bne.n	8042368 <_printf_float+0x178>
 80422e8:	2306      	movs	r3, #6
 80422ea:	6063      	str	r3, [r4, #4]
 80422ec:	9b05      	ldr	r3, [sp, #20]
 80422ee:	6861      	ldr	r1, [r4, #4]
 80422f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80422f4:	2300      	movs	r3, #0
 80422f6:	9303      	str	r3, [sp, #12]
 80422f8:	ab0a      	add	r3, sp, #40	; 0x28
 80422fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80422fe:	ab09      	add	r3, sp, #36	; 0x24
 8042300:	ec49 8b10 	vmov	d0, r8, r9
 8042304:	9300      	str	r3, [sp, #0]
 8042306:	6022      	str	r2, [r4, #0]
 8042308:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 804230c:	4628      	mov	r0, r5
 804230e:	f7ff fecf 	bl	80420b0 <__cvt>
 8042312:	9b06      	ldr	r3, [sp, #24]
 8042314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8042316:	2b47      	cmp	r3, #71	; 0x47
 8042318:	4680      	mov	r8, r0
 804231a:	d108      	bne.n	804232e <_printf_float+0x13e>
 804231c:	1cc8      	adds	r0, r1, #3
 804231e:	db02      	blt.n	8042326 <_printf_float+0x136>
 8042320:	6863      	ldr	r3, [r4, #4]
 8042322:	4299      	cmp	r1, r3
 8042324:	dd41      	ble.n	80423aa <_printf_float+0x1ba>
 8042326:	f1ab 0302 	sub.w	r3, fp, #2
 804232a:	fa5f fb83 	uxtb.w	fp, r3
 804232e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8042332:	d820      	bhi.n	8042376 <_printf_float+0x186>
 8042334:	3901      	subs	r1, #1
 8042336:	465a      	mov	r2, fp
 8042338:	f104 0050 	add.w	r0, r4, #80	; 0x50
 804233c:	9109      	str	r1, [sp, #36]	; 0x24
 804233e:	f7ff ff19 	bl	8042174 <__exponent>
 8042342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8042344:	1813      	adds	r3, r2, r0
 8042346:	2a01      	cmp	r2, #1
 8042348:	4681      	mov	r9, r0
 804234a:	6123      	str	r3, [r4, #16]
 804234c:	dc02      	bgt.n	8042354 <_printf_float+0x164>
 804234e:	6822      	ldr	r2, [r4, #0]
 8042350:	07d2      	lsls	r2, r2, #31
 8042352:	d501      	bpl.n	8042358 <_printf_float+0x168>
 8042354:	3301      	adds	r3, #1
 8042356:	6123      	str	r3, [r4, #16]
 8042358:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 804235c:	2b00      	cmp	r3, #0
 804235e:	d09c      	beq.n	804229a <_printf_float+0xaa>
 8042360:	232d      	movs	r3, #45	; 0x2d
 8042362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8042366:	e798      	b.n	804229a <_printf_float+0xaa>
 8042368:	9a06      	ldr	r2, [sp, #24]
 804236a:	2a47      	cmp	r2, #71	; 0x47
 804236c:	d1be      	bne.n	80422ec <_printf_float+0xfc>
 804236e:	2b00      	cmp	r3, #0
 8042370:	d1bc      	bne.n	80422ec <_printf_float+0xfc>
 8042372:	2301      	movs	r3, #1
 8042374:	e7b9      	b.n	80422ea <_printf_float+0xfa>
 8042376:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 804237a:	d118      	bne.n	80423ae <_printf_float+0x1be>
 804237c:	2900      	cmp	r1, #0
 804237e:	6863      	ldr	r3, [r4, #4]
 8042380:	dd0b      	ble.n	804239a <_printf_float+0x1aa>
 8042382:	6121      	str	r1, [r4, #16]
 8042384:	b913      	cbnz	r3, 804238c <_printf_float+0x19c>
 8042386:	6822      	ldr	r2, [r4, #0]
 8042388:	07d0      	lsls	r0, r2, #31
 804238a:	d502      	bpl.n	8042392 <_printf_float+0x1a2>
 804238c:	3301      	adds	r3, #1
 804238e:	440b      	add	r3, r1
 8042390:	6123      	str	r3, [r4, #16]
 8042392:	65a1      	str	r1, [r4, #88]	; 0x58
 8042394:	f04f 0900 	mov.w	r9, #0
 8042398:	e7de      	b.n	8042358 <_printf_float+0x168>
 804239a:	b913      	cbnz	r3, 80423a2 <_printf_float+0x1b2>
 804239c:	6822      	ldr	r2, [r4, #0]
 804239e:	07d2      	lsls	r2, r2, #31
 80423a0:	d501      	bpl.n	80423a6 <_printf_float+0x1b6>
 80423a2:	3302      	adds	r3, #2
 80423a4:	e7f4      	b.n	8042390 <_printf_float+0x1a0>
 80423a6:	2301      	movs	r3, #1
 80423a8:	e7f2      	b.n	8042390 <_printf_float+0x1a0>
 80423aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80423ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80423b0:	4299      	cmp	r1, r3
 80423b2:	db05      	blt.n	80423c0 <_printf_float+0x1d0>
 80423b4:	6823      	ldr	r3, [r4, #0]
 80423b6:	6121      	str	r1, [r4, #16]
 80423b8:	07d8      	lsls	r0, r3, #31
 80423ba:	d5ea      	bpl.n	8042392 <_printf_float+0x1a2>
 80423bc:	1c4b      	adds	r3, r1, #1
 80423be:	e7e7      	b.n	8042390 <_printf_float+0x1a0>
 80423c0:	2900      	cmp	r1, #0
 80423c2:	bfd4      	ite	le
 80423c4:	f1c1 0202 	rsble	r2, r1, #2
 80423c8:	2201      	movgt	r2, #1
 80423ca:	4413      	add	r3, r2
 80423cc:	e7e0      	b.n	8042390 <_printf_float+0x1a0>
 80423ce:	6823      	ldr	r3, [r4, #0]
 80423d0:	055a      	lsls	r2, r3, #21
 80423d2:	d407      	bmi.n	80423e4 <_printf_float+0x1f4>
 80423d4:	6923      	ldr	r3, [r4, #16]
 80423d6:	4642      	mov	r2, r8
 80423d8:	4631      	mov	r1, r6
 80423da:	4628      	mov	r0, r5
 80423dc:	47b8      	blx	r7
 80423de:	3001      	adds	r0, #1
 80423e0:	d12c      	bne.n	804243c <_printf_float+0x24c>
 80423e2:	e764      	b.n	80422ae <_printf_float+0xbe>
 80423e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80423e8:	f240 80e0 	bls.w	80425ac <_printf_float+0x3bc>
 80423ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80423f0:	2200      	movs	r2, #0
 80423f2:	2300      	movs	r3, #0
 80423f4:	f7de fb98 	bl	8020b28 <__aeabi_dcmpeq>
 80423f8:	2800      	cmp	r0, #0
 80423fa:	d034      	beq.n	8042466 <_printf_float+0x276>
 80423fc:	4a37      	ldr	r2, [pc, #220]	; (80424dc <_printf_float+0x2ec>)
 80423fe:	2301      	movs	r3, #1
 8042400:	4631      	mov	r1, r6
 8042402:	4628      	mov	r0, r5
 8042404:	47b8      	blx	r7
 8042406:	3001      	adds	r0, #1
 8042408:	f43f af51 	beq.w	80422ae <_printf_float+0xbe>
 804240c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8042410:	429a      	cmp	r2, r3
 8042412:	db02      	blt.n	804241a <_printf_float+0x22a>
 8042414:	6823      	ldr	r3, [r4, #0]
 8042416:	07d8      	lsls	r0, r3, #31
 8042418:	d510      	bpl.n	804243c <_printf_float+0x24c>
 804241a:	ee18 3a10 	vmov	r3, s16
 804241e:	4652      	mov	r2, sl
 8042420:	4631      	mov	r1, r6
 8042422:	4628      	mov	r0, r5
 8042424:	47b8      	blx	r7
 8042426:	3001      	adds	r0, #1
 8042428:	f43f af41 	beq.w	80422ae <_printf_float+0xbe>
 804242c:	f04f 0800 	mov.w	r8, #0
 8042430:	f104 091a 	add.w	r9, r4, #26
 8042434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8042436:	3b01      	subs	r3, #1
 8042438:	4543      	cmp	r3, r8
 804243a:	dc09      	bgt.n	8042450 <_printf_float+0x260>
 804243c:	6823      	ldr	r3, [r4, #0]
 804243e:	079b      	lsls	r3, r3, #30
 8042440:	f100 8107 	bmi.w	8042652 <_printf_float+0x462>
 8042444:	68e0      	ldr	r0, [r4, #12]
 8042446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8042448:	4298      	cmp	r0, r3
 804244a:	bfb8      	it	lt
 804244c:	4618      	movlt	r0, r3
 804244e:	e730      	b.n	80422b2 <_printf_float+0xc2>
 8042450:	2301      	movs	r3, #1
 8042452:	464a      	mov	r2, r9
 8042454:	4631      	mov	r1, r6
 8042456:	4628      	mov	r0, r5
 8042458:	47b8      	blx	r7
 804245a:	3001      	adds	r0, #1
 804245c:	f43f af27 	beq.w	80422ae <_printf_float+0xbe>
 8042460:	f108 0801 	add.w	r8, r8, #1
 8042464:	e7e6      	b.n	8042434 <_printf_float+0x244>
 8042466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8042468:	2b00      	cmp	r3, #0
 804246a:	dc39      	bgt.n	80424e0 <_printf_float+0x2f0>
 804246c:	4a1b      	ldr	r2, [pc, #108]	; (80424dc <_printf_float+0x2ec>)
 804246e:	2301      	movs	r3, #1
 8042470:	4631      	mov	r1, r6
 8042472:	4628      	mov	r0, r5
 8042474:	47b8      	blx	r7
 8042476:	3001      	adds	r0, #1
 8042478:	f43f af19 	beq.w	80422ae <_printf_float+0xbe>
 804247c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8042480:	4313      	orrs	r3, r2
 8042482:	d102      	bne.n	804248a <_printf_float+0x29a>
 8042484:	6823      	ldr	r3, [r4, #0]
 8042486:	07d9      	lsls	r1, r3, #31
 8042488:	d5d8      	bpl.n	804243c <_printf_float+0x24c>
 804248a:	ee18 3a10 	vmov	r3, s16
 804248e:	4652      	mov	r2, sl
 8042490:	4631      	mov	r1, r6
 8042492:	4628      	mov	r0, r5
 8042494:	47b8      	blx	r7
 8042496:	3001      	adds	r0, #1
 8042498:	f43f af09 	beq.w	80422ae <_printf_float+0xbe>
 804249c:	f04f 0900 	mov.w	r9, #0
 80424a0:	f104 0a1a 	add.w	sl, r4, #26
 80424a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80424a6:	425b      	negs	r3, r3
 80424a8:	454b      	cmp	r3, r9
 80424aa:	dc01      	bgt.n	80424b0 <_printf_float+0x2c0>
 80424ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80424ae:	e792      	b.n	80423d6 <_printf_float+0x1e6>
 80424b0:	2301      	movs	r3, #1
 80424b2:	4652      	mov	r2, sl
 80424b4:	4631      	mov	r1, r6
 80424b6:	4628      	mov	r0, r5
 80424b8:	47b8      	blx	r7
 80424ba:	3001      	adds	r0, #1
 80424bc:	f43f aef7 	beq.w	80422ae <_printf_float+0xbe>
 80424c0:	f109 0901 	add.w	r9, r9, #1
 80424c4:	e7ee      	b.n	80424a4 <_printf_float+0x2b4>
 80424c6:	bf00      	nop
 80424c8:	7fefffff 	.word	0x7fefffff
 80424cc:	0804a379 	.word	0x0804a379
 80424d0:	0804a37d 	.word	0x0804a37d
 80424d4:	0804a381 	.word	0x0804a381
 80424d8:	0804a385 	.word	0x0804a385
 80424dc:	0804a389 	.word	0x0804a389
 80424e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80424e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80424e4:	429a      	cmp	r2, r3
 80424e6:	bfa8      	it	ge
 80424e8:	461a      	movge	r2, r3
 80424ea:	2a00      	cmp	r2, #0
 80424ec:	4691      	mov	r9, r2
 80424ee:	dc37      	bgt.n	8042560 <_printf_float+0x370>
 80424f0:	f04f 0b00 	mov.w	fp, #0
 80424f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80424f8:	f104 021a 	add.w	r2, r4, #26
 80424fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80424fe:	9305      	str	r3, [sp, #20]
 8042500:	eba3 0309 	sub.w	r3, r3, r9
 8042504:	455b      	cmp	r3, fp
 8042506:	dc33      	bgt.n	8042570 <_printf_float+0x380>
 8042508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 804250c:	429a      	cmp	r2, r3
 804250e:	db3b      	blt.n	8042588 <_printf_float+0x398>
 8042510:	6823      	ldr	r3, [r4, #0]
 8042512:	07da      	lsls	r2, r3, #31
 8042514:	d438      	bmi.n	8042588 <_printf_float+0x398>
 8042516:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 804251a:	eba2 0903 	sub.w	r9, r2, r3
 804251e:	9b05      	ldr	r3, [sp, #20]
 8042520:	1ad2      	subs	r2, r2, r3
 8042522:	4591      	cmp	r9, r2
 8042524:	bfa8      	it	ge
 8042526:	4691      	movge	r9, r2
 8042528:	f1b9 0f00 	cmp.w	r9, #0
 804252c:	dc35      	bgt.n	804259a <_printf_float+0x3aa>
 804252e:	f04f 0800 	mov.w	r8, #0
 8042532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8042536:	f104 0a1a 	add.w	sl, r4, #26
 804253a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 804253e:	1a9b      	subs	r3, r3, r2
 8042540:	eba3 0309 	sub.w	r3, r3, r9
 8042544:	4543      	cmp	r3, r8
 8042546:	f77f af79 	ble.w	804243c <_printf_float+0x24c>
 804254a:	2301      	movs	r3, #1
 804254c:	4652      	mov	r2, sl
 804254e:	4631      	mov	r1, r6
 8042550:	4628      	mov	r0, r5
 8042552:	47b8      	blx	r7
 8042554:	3001      	adds	r0, #1
 8042556:	f43f aeaa 	beq.w	80422ae <_printf_float+0xbe>
 804255a:	f108 0801 	add.w	r8, r8, #1
 804255e:	e7ec      	b.n	804253a <_printf_float+0x34a>
 8042560:	4613      	mov	r3, r2
 8042562:	4631      	mov	r1, r6
 8042564:	4642      	mov	r2, r8
 8042566:	4628      	mov	r0, r5
 8042568:	47b8      	blx	r7
 804256a:	3001      	adds	r0, #1
 804256c:	d1c0      	bne.n	80424f0 <_printf_float+0x300>
 804256e:	e69e      	b.n	80422ae <_printf_float+0xbe>
 8042570:	2301      	movs	r3, #1
 8042572:	4631      	mov	r1, r6
 8042574:	4628      	mov	r0, r5
 8042576:	9205      	str	r2, [sp, #20]
 8042578:	47b8      	blx	r7
 804257a:	3001      	adds	r0, #1
 804257c:	f43f ae97 	beq.w	80422ae <_printf_float+0xbe>
 8042580:	9a05      	ldr	r2, [sp, #20]
 8042582:	f10b 0b01 	add.w	fp, fp, #1
 8042586:	e7b9      	b.n	80424fc <_printf_float+0x30c>
 8042588:	ee18 3a10 	vmov	r3, s16
 804258c:	4652      	mov	r2, sl
 804258e:	4631      	mov	r1, r6
 8042590:	4628      	mov	r0, r5
 8042592:	47b8      	blx	r7
 8042594:	3001      	adds	r0, #1
 8042596:	d1be      	bne.n	8042516 <_printf_float+0x326>
 8042598:	e689      	b.n	80422ae <_printf_float+0xbe>
 804259a:	9a05      	ldr	r2, [sp, #20]
 804259c:	464b      	mov	r3, r9
 804259e:	4442      	add	r2, r8
 80425a0:	4631      	mov	r1, r6
 80425a2:	4628      	mov	r0, r5
 80425a4:	47b8      	blx	r7
 80425a6:	3001      	adds	r0, #1
 80425a8:	d1c1      	bne.n	804252e <_printf_float+0x33e>
 80425aa:	e680      	b.n	80422ae <_printf_float+0xbe>
 80425ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80425ae:	2a01      	cmp	r2, #1
 80425b0:	dc01      	bgt.n	80425b6 <_printf_float+0x3c6>
 80425b2:	07db      	lsls	r3, r3, #31
 80425b4:	d53a      	bpl.n	804262c <_printf_float+0x43c>
 80425b6:	2301      	movs	r3, #1
 80425b8:	4642      	mov	r2, r8
 80425ba:	4631      	mov	r1, r6
 80425bc:	4628      	mov	r0, r5
 80425be:	47b8      	blx	r7
 80425c0:	3001      	adds	r0, #1
 80425c2:	f43f ae74 	beq.w	80422ae <_printf_float+0xbe>
 80425c6:	ee18 3a10 	vmov	r3, s16
 80425ca:	4652      	mov	r2, sl
 80425cc:	4631      	mov	r1, r6
 80425ce:	4628      	mov	r0, r5
 80425d0:	47b8      	blx	r7
 80425d2:	3001      	adds	r0, #1
 80425d4:	f43f ae6b 	beq.w	80422ae <_printf_float+0xbe>
 80425d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80425dc:	2200      	movs	r2, #0
 80425de:	2300      	movs	r3, #0
 80425e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80425e4:	f7de faa0 	bl	8020b28 <__aeabi_dcmpeq>
 80425e8:	b9d8      	cbnz	r0, 8042622 <_printf_float+0x432>
 80425ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80425ee:	f108 0201 	add.w	r2, r8, #1
 80425f2:	4631      	mov	r1, r6
 80425f4:	4628      	mov	r0, r5
 80425f6:	47b8      	blx	r7
 80425f8:	3001      	adds	r0, #1
 80425fa:	d10e      	bne.n	804261a <_printf_float+0x42a>
 80425fc:	e657      	b.n	80422ae <_printf_float+0xbe>
 80425fe:	2301      	movs	r3, #1
 8042600:	4652      	mov	r2, sl
 8042602:	4631      	mov	r1, r6
 8042604:	4628      	mov	r0, r5
 8042606:	47b8      	blx	r7
 8042608:	3001      	adds	r0, #1
 804260a:	f43f ae50 	beq.w	80422ae <_printf_float+0xbe>
 804260e:	f108 0801 	add.w	r8, r8, #1
 8042612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8042614:	3b01      	subs	r3, #1
 8042616:	4543      	cmp	r3, r8
 8042618:	dcf1      	bgt.n	80425fe <_printf_float+0x40e>
 804261a:	464b      	mov	r3, r9
 804261c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8042620:	e6da      	b.n	80423d8 <_printf_float+0x1e8>
 8042622:	f04f 0800 	mov.w	r8, #0
 8042626:	f104 0a1a 	add.w	sl, r4, #26
 804262a:	e7f2      	b.n	8042612 <_printf_float+0x422>
 804262c:	2301      	movs	r3, #1
 804262e:	4642      	mov	r2, r8
 8042630:	e7df      	b.n	80425f2 <_printf_float+0x402>
 8042632:	2301      	movs	r3, #1
 8042634:	464a      	mov	r2, r9
 8042636:	4631      	mov	r1, r6
 8042638:	4628      	mov	r0, r5
 804263a:	47b8      	blx	r7
 804263c:	3001      	adds	r0, #1
 804263e:	f43f ae36 	beq.w	80422ae <_printf_float+0xbe>
 8042642:	f108 0801 	add.w	r8, r8, #1
 8042646:	68e3      	ldr	r3, [r4, #12]
 8042648:	990b      	ldr	r1, [sp, #44]	; 0x2c
 804264a:	1a5b      	subs	r3, r3, r1
 804264c:	4543      	cmp	r3, r8
 804264e:	dcf0      	bgt.n	8042632 <_printf_float+0x442>
 8042650:	e6f8      	b.n	8042444 <_printf_float+0x254>
 8042652:	f04f 0800 	mov.w	r8, #0
 8042656:	f104 0919 	add.w	r9, r4, #25
 804265a:	e7f4      	b.n	8042646 <_printf_float+0x456>

0804265c <_printf_common>:
 804265c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8042660:	4616      	mov	r6, r2
 8042662:	4699      	mov	r9, r3
 8042664:	688a      	ldr	r2, [r1, #8]
 8042666:	690b      	ldr	r3, [r1, #16]
 8042668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804266c:	4293      	cmp	r3, r2
 804266e:	bfb8      	it	lt
 8042670:	4613      	movlt	r3, r2
 8042672:	6033      	str	r3, [r6, #0]
 8042674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8042678:	4607      	mov	r7, r0
 804267a:	460c      	mov	r4, r1
 804267c:	b10a      	cbz	r2, 8042682 <_printf_common+0x26>
 804267e:	3301      	adds	r3, #1
 8042680:	6033      	str	r3, [r6, #0]
 8042682:	6823      	ldr	r3, [r4, #0]
 8042684:	0699      	lsls	r1, r3, #26
 8042686:	bf42      	ittt	mi
 8042688:	6833      	ldrmi	r3, [r6, #0]
 804268a:	3302      	addmi	r3, #2
 804268c:	6033      	strmi	r3, [r6, #0]
 804268e:	6825      	ldr	r5, [r4, #0]
 8042690:	f015 0506 	ands.w	r5, r5, #6
 8042694:	d106      	bne.n	80426a4 <_printf_common+0x48>
 8042696:	f104 0a19 	add.w	sl, r4, #25
 804269a:	68e3      	ldr	r3, [r4, #12]
 804269c:	6832      	ldr	r2, [r6, #0]
 804269e:	1a9b      	subs	r3, r3, r2
 80426a0:	42ab      	cmp	r3, r5
 80426a2:	dc26      	bgt.n	80426f2 <_printf_common+0x96>
 80426a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80426a8:	1e13      	subs	r3, r2, #0
 80426aa:	6822      	ldr	r2, [r4, #0]
 80426ac:	bf18      	it	ne
 80426ae:	2301      	movne	r3, #1
 80426b0:	0692      	lsls	r2, r2, #26
 80426b2:	d42b      	bmi.n	804270c <_printf_common+0xb0>
 80426b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80426b8:	4649      	mov	r1, r9
 80426ba:	4638      	mov	r0, r7
 80426bc:	47c0      	blx	r8
 80426be:	3001      	adds	r0, #1
 80426c0:	d01e      	beq.n	8042700 <_printf_common+0xa4>
 80426c2:	6823      	ldr	r3, [r4, #0]
 80426c4:	6922      	ldr	r2, [r4, #16]
 80426c6:	f003 0306 	and.w	r3, r3, #6
 80426ca:	2b04      	cmp	r3, #4
 80426cc:	bf02      	ittt	eq
 80426ce:	68e5      	ldreq	r5, [r4, #12]
 80426d0:	6833      	ldreq	r3, [r6, #0]
 80426d2:	1aed      	subeq	r5, r5, r3
 80426d4:	68a3      	ldr	r3, [r4, #8]
 80426d6:	bf0c      	ite	eq
 80426d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80426dc:	2500      	movne	r5, #0
 80426de:	4293      	cmp	r3, r2
 80426e0:	bfc4      	itt	gt
 80426e2:	1a9b      	subgt	r3, r3, r2
 80426e4:	18ed      	addgt	r5, r5, r3
 80426e6:	2600      	movs	r6, #0
 80426e8:	341a      	adds	r4, #26
 80426ea:	42b5      	cmp	r5, r6
 80426ec:	d11a      	bne.n	8042724 <_printf_common+0xc8>
 80426ee:	2000      	movs	r0, #0
 80426f0:	e008      	b.n	8042704 <_printf_common+0xa8>
 80426f2:	2301      	movs	r3, #1
 80426f4:	4652      	mov	r2, sl
 80426f6:	4649      	mov	r1, r9
 80426f8:	4638      	mov	r0, r7
 80426fa:	47c0      	blx	r8
 80426fc:	3001      	adds	r0, #1
 80426fe:	d103      	bne.n	8042708 <_printf_common+0xac>
 8042700:	f04f 30ff 	mov.w	r0, #4294967295
 8042704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8042708:	3501      	adds	r5, #1
 804270a:	e7c6      	b.n	804269a <_printf_common+0x3e>
 804270c:	18e1      	adds	r1, r4, r3
 804270e:	1c5a      	adds	r2, r3, #1
 8042710:	2030      	movs	r0, #48	; 0x30
 8042712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8042716:	4422      	add	r2, r4
 8042718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804271c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8042720:	3302      	adds	r3, #2
 8042722:	e7c7      	b.n	80426b4 <_printf_common+0x58>
 8042724:	2301      	movs	r3, #1
 8042726:	4622      	mov	r2, r4
 8042728:	4649      	mov	r1, r9
 804272a:	4638      	mov	r0, r7
 804272c:	47c0      	blx	r8
 804272e:	3001      	adds	r0, #1
 8042730:	d0e6      	beq.n	8042700 <_printf_common+0xa4>
 8042732:	3601      	adds	r6, #1
 8042734:	e7d9      	b.n	80426ea <_printf_common+0x8e>
	...

08042738 <_printf_i>:
 8042738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804273c:	7e0f      	ldrb	r7, [r1, #24]
 804273e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8042740:	2f78      	cmp	r7, #120	; 0x78
 8042742:	4691      	mov	r9, r2
 8042744:	4680      	mov	r8, r0
 8042746:	460c      	mov	r4, r1
 8042748:	469a      	mov	sl, r3
 804274a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804274e:	d807      	bhi.n	8042760 <_printf_i+0x28>
 8042750:	2f62      	cmp	r7, #98	; 0x62
 8042752:	d80a      	bhi.n	804276a <_printf_i+0x32>
 8042754:	2f00      	cmp	r7, #0
 8042756:	f000 80d4 	beq.w	8042902 <_printf_i+0x1ca>
 804275a:	2f58      	cmp	r7, #88	; 0x58
 804275c:	f000 80c0 	beq.w	80428e0 <_printf_i+0x1a8>
 8042760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8042764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8042768:	e03a      	b.n	80427e0 <_printf_i+0xa8>
 804276a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804276e:	2b15      	cmp	r3, #21
 8042770:	d8f6      	bhi.n	8042760 <_printf_i+0x28>
 8042772:	a101      	add	r1, pc, #4	; (adr r1, 8042778 <_printf_i+0x40>)
 8042774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8042778:	080427d1 	.word	0x080427d1
 804277c:	080427e5 	.word	0x080427e5
 8042780:	08042761 	.word	0x08042761
 8042784:	08042761 	.word	0x08042761
 8042788:	08042761 	.word	0x08042761
 804278c:	08042761 	.word	0x08042761
 8042790:	080427e5 	.word	0x080427e5
 8042794:	08042761 	.word	0x08042761
 8042798:	08042761 	.word	0x08042761
 804279c:	08042761 	.word	0x08042761
 80427a0:	08042761 	.word	0x08042761
 80427a4:	080428e9 	.word	0x080428e9
 80427a8:	08042811 	.word	0x08042811
 80427ac:	080428a3 	.word	0x080428a3
 80427b0:	08042761 	.word	0x08042761
 80427b4:	08042761 	.word	0x08042761
 80427b8:	0804290b 	.word	0x0804290b
 80427bc:	08042761 	.word	0x08042761
 80427c0:	08042811 	.word	0x08042811
 80427c4:	08042761 	.word	0x08042761
 80427c8:	08042761 	.word	0x08042761
 80427cc:	080428ab 	.word	0x080428ab
 80427d0:	682b      	ldr	r3, [r5, #0]
 80427d2:	1d1a      	adds	r2, r3, #4
 80427d4:	681b      	ldr	r3, [r3, #0]
 80427d6:	602a      	str	r2, [r5, #0]
 80427d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80427dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80427e0:	2301      	movs	r3, #1
 80427e2:	e09f      	b.n	8042924 <_printf_i+0x1ec>
 80427e4:	6820      	ldr	r0, [r4, #0]
 80427e6:	682b      	ldr	r3, [r5, #0]
 80427e8:	0607      	lsls	r7, r0, #24
 80427ea:	f103 0104 	add.w	r1, r3, #4
 80427ee:	6029      	str	r1, [r5, #0]
 80427f0:	d501      	bpl.n	80427f6 <_printf_i+0xbe>
 80427f2:	681e      	ldr	r6, [r3, #0]
 80427f4:	e003      	b.n	80427fe <_printf_i+0xc6>
 80427f6:	0646      	lsls	r6, r0, #25
 80427f8:	d5fb      	bpl.n	80427f2 <_printf_i+0xba>
 80427fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80427fe:	2e00      	cmp	r6, #0
 8042800:	da03      	bge.n	804280a <_printf_i+0xd2>
 8042802:	232d      	movs	r3, #45	; 0x2d
 8042804:	4276      	negs	r6, r6
 8042806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804280a:	485a      	ldr	r0, [pc, #360]	; (8042974 <_printf_i+0x23c>)
 804280c:	230a      	movs	r3, #10
 804280e:	e012      	b.n	8042836 <_printf_i+0xfe>
 8042810:	682b      	ldr	r3, [r5, #0]
 8042812:	6820      	ldr	r0, [r4, #0]
 8042814:	1d19      	adds	r1, r3, #4
 8042816:	6029      	str	r1, [r5, #0]
 8042818:	0605      	lsls	r5, r0, #24
 804281a:	d501      	bpl.n	8042820 <_printf_i+0xe8>
 804281c:	681e      	ldr	r6, [r3, #0]
 804281e:	e002      	b.n	8042826 <_printf_i+0xee>
 8042820:	0641      	lsls	r1, r0, #25
 8042822:	d5fb      	bpl.n	804281c <_printf_i+0xe4>
 8042824:	881e      	ldrh	r6, [r3, #0]
 8042826:	4853      	ldr	r0, [pc, #332]	; (8042974 <_printf_i+0x23c>)
 8042828:	2f6f      	cmp	r7, #111	; 0x6f
 804282a:	bf0c      	ite	eq
 804282c:	2308      	moveq	r3, #8
 804282e:	230a      	movne	r3, #10
 8042830:	2100      	movs	r1, #0
 8042832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8042836:	6865      	ldr	r5, [r4, #4]
 8042838:	60a5      	str	r5, [r4, #8]
 804283a:	2d00      	cmp	r5, #0
 804283c:	bfa2      	ittt	ge
 804283e:	6821      	ldrge	r1, [r4, #0]
 8042840:	f021 0104 	bicge.w	r1, r1, #4
 8042844:	6021      	strge	r1, [r4, #0]
 8042846:	b90e      	cbnz	r6, 804284c <_printf_i+0x114>
 8042848:	2d00      	cmp	r5, #0
 804284a:	d04b      	beq.n	80428e4 <_printf_i+0x1ac>
 804284c:	4615      	mov	r5, r2
 804284e:	fbb6 f1f3 	udiv	r1, r6, r3
 8042852:	fb03 6711 	mls	r7, r3, r1, r6
 8042856:	5dc7      	ldrb	r7, [r0, r7]
 8042858:	f805 7d01 	strb.w	r7, [r5, #-1]!
 804285c:	4637      	mov	r7, r6
 804285e:	42bb      	cmp	r3, r7
 8042860:	460e      	mov	r6, r1
 8042862:	d9f4      	bls.n	804284e <_printf_i+0x116>
 8042864:	2b08      	cmp	r3, #8
 8042866:	d10b      	bne.n	8042880 <_printf_i+0x148>
 8042868:	6823      	ldr	r3, [r4, #0]
 804286a:	07de      	lsls	r6, r3, #31
 804286c:	d508      	bpl.n	8042880 <_printf_i+0x148>
 804286e:	6923      	ldr	r3, [r4, #16]
 8042870:	6861      	ldr	r1, [r4, #4]
 8042872:	4299      	cmp	r1, r3
 8042874:	bfde      	ittt	le
 8042876:	2330      	movle	r3, #48	; 0x30
 8042878:	f805 3c01 	strble.w	r3, [r5, #-1]
 804287c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8042880:	1b52      	subs	r2, r2, r5
 8042882:	6122      	str	r2, [r4, #16]
 8042884:	f8cd a000 	str.w	sl, [sp]
 8042888:	464b      	mov	r3, r9
 804288a:	aa03      	add	r2, sp, #12
 804288c:	4621      	mov	r1, r4
 804288e:	4640      	mov	r0, r8
 8042890:	f7ff fee4 	bl	804265c <_printf_common>
 8042894:	3001      	adds	r0, #1
 8042896:	d14a      	bne.n	804292e <_printf_i+0x1f6>
 8042898:	f04f 30ff 	mov.w	r0, #4294967295
 804289c:	b004      	add	sp, #16
 804289e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80428a2:	6823      	ldr	r3, [r4, #0]
 80428a4:	f043 0320 	orr.w	r3, r3, #32
 80428a8:	6023      	str	r3, [r4, #0]
 80428aa:	4833      	ldr	r0, [pc, #204]	; (8042978 <_printf_i+0x240>)
 80428ac:	2778      	movs	r7, #120	; 0x78
 80428ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80428b2:	6823      	ldr	r3, [r4, #0]
 80428b4:	6829      	ldr	r1, [r5, #0]
 80428b6:	061f      	lsls	r7, r3, #24
 80428b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80428bc:	d402      	bmi.n	80428c4 <_printf_i+0x18c>
 80428be:	065f      	lsls	r7, r3, #25
 80428c0:	bf48      	it	mi
 80428c2:	b2b6      	uxthmi	r6, r6
 80428c4:	07df      	lsls	r7, r3, #31
 80428c6:	bf48      	it	mi
 80428c8:	f043 0320 	orrmi.w	r3, r3, #32
 80428cc:	6029      	str	r1, [r5, #0]
 80428ce:	bf48      	it	mi
 80428d0:	6023      	strmi	r3, [r4, #0]
 80428d2:	b91e      	cbnz	r6, 80428dc <_printf_i+0x1a4>
 80428d4:	6823      	ldr	r3, [r4, #0]
 80428d6:	f023 0320 	bic.w	r3, r3, #32
 80428da:	6023      	str	r3, [r4, #0]
 80428dc:	2310      	movs	r3, #16
 80428de:	e7a7      	b.n	8042830 <_printf_i+0xf8>
 80428e0:	4824      	ldr	r0, [pc, #144]	; (8042974 <_printf_i+0x23c>)
 80428e2:	e7e4      	b.n	80428ae <_printf_i+0x176>
 80428e4:	4615      	mov	r5, r2
 80428e6:	e7bd      	b.n	8042864 <_printf_i+0x12c>
 80428e8:	682b      	ldr	r3, [r5, #0]
 80428ea:	6826      	ldr	r6, [r4, #0]
 80428ec:	6961      	ldr	r1, [r4, #20]
 80428ee:	1d18      	adds	r0, r3, #4
 80428f0:	6028      	str	r0, [r5, #0]
 80428f2:	0635      	lsls	r5, r6, #24
 80428f4:	681b      	ldr	r3, [r3, #0]
 80428f6:	d501      	bpl.n	80428fc <_printf_i+0x1c4>
 80428f8:	6019      	str	r1, [r3, #0]
 80428fa:	e002      	b.n	8042902 <_printf_i+0x1ca>
 80428fc:	0670      	lsls	r0, r6, #25
 80428fe:	d5fb      	bpl.n	80428f8 <_printf_i+0x1c0>
 8042900:	8019      	strh	r1, [r3, #0]
 8042902:	2300      	movs	r3, #0
 8042904:	6123      	str	r3, [r4, #16]
 8042906:	4615      	mov	r5, r2
 8042908:	e7bc      	b.n	8042884 <_printf_i+0x14c>
 804290a:	682b      	ldr	r3, [r5, #0]
 804290c:	1d1a      	adds	r2, r3, #4
 804290e:	602a      	str	r2, [r5, #0]
 8042910:	681d      	ldr	r5, [r3, #0]
 8042912:	6862      	ldr	r2, [r4, #4]
 8042914:	2100      	movs	r1, #0
 8042916:	4628      	mov	r0, r5
 8042918:	f7dd fc8a 	bl	8020230 <memchr>
 804291c:	b108      	cbz	r0, 8042922 <_printf_i+0x1ea>
 804291e:	1b40      	subs	r0, r0, r5
 8042920:	6060      	str	r0, [r4, #4]
 8042922:	6863      	ldr	r3, [r4, #4]
 8042924:	6123      	str	r3, [r4, #16]
 8042926:	2300      	movs	r3, #0
 8042928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804292c:	e7aa      	b.n	8042884 <_printf_i+0x14c>
 804292e:	6923      	ldr	r3, [r4, #16]
 8042930:	462a      	mov	r2, r5
 8042932:	4649      	mov	r1, r9
 8042934:	4640      	mov	r0, r8
 8042936:	47d0      	blx	sl
 8042938:	3001      	adds	r0, #1
 804293a:	d0ad      	beq.n	8042898 <_printf_i+0x160>
 804293c:	6823      	ldr	r3, [r4, #0]
 804293e:	079b      	lsls	r3, r3, #30
 8042940:	d413      	bmi.n	804296a <_printf_i+0x232>
 8042942:	68e0      	ldr	r0, [r4, #12]
 8042944:	9b03      	ldr	r3, [sp, #12]
 8042946:	4298      	cmp	r0, r3
 8042948:	bfb8      	it	lt
 804294a:	4618      	movlt	r0, r3
 804294c:	e7a6      	b.n	804289c <_printf_i+0x164>
 804294e:	2301      	movs	r3, #1
 8042950:	4632      	mov	r2, r6
 8042952:	4649      	mov	r1, r9
 8042954:	4640      	mov	r0, r8
 8042956:	47d0      	blx	sl
 8042958:	3001      	adds	r0, #1
 804295a:	d09d      	beq.n	8042898 <_printf_i+0x160>
 804295c:	3501      	adds	r5, #1
 804295e:	68e3      	ldr	r3, [r4, #12]
 8042960:	9903      	ldr	r1, [sp, #12]
 8042962:	1a5b      	subs	r3, r3, r1
 8042964:	42ab      	cmp	r3, r5
 8042966:	dcf2      	bgt.n	804294e <_printf_i+0x216>
 8042968:	e7eb      	b.n	8042942 <_printf_i+0x20a>
 804296a:	2500      	movs	r5, #0
 804296c:	f104 0619 	add.w	r6, r4, #25
 8042970:	e7f5      	b.n	804295e <_printf_i+0x226>
 8042972:	bf00      	nop
 8042974:	0804a38b 	.word	0x0804a38b
 8042978:	0804a39c 	.word	0x0804a39c

0804297c <std>:
 804297c:	2300      	movs	r3, #0
 804297e:	b510      	push	{r4, lr}
 8042980:	4604      	mov	r4, r0
 8042982:	e9c0 3300 	strd	r3, r3, [r0]
 8042986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804298a:	6083      	str	r3, [r0, #8]
 804298c:	8181      	strh	r1, [r0, #12]
 804298e:	6643      	str	r3, [r0, #100]	; 0x64
 8042990:	81c2      	strh	r2, [r0, #14]
 8042992:	6183      	str	r3, [r0, #24]
 8042994:	4619      	mov	r1, r3
 8042996:	2208      	movs	r2, #8
 8042998:	305c      	adds	r0, #92	; 0x5c
 804299a:	f000 f935 	bl	8042c08 <memset>
 804299e:	4b0d      	ldr	r3, [pc, #52]	; (80429d4 <std+0x58>)
 80429a0:	6263      	str	r3, [r4, #36]	; 0x24
 80429a2:	4b0d      	ldr	r3, [pc, #52]	; (80429d8 <std+0x5c>)
 80429a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80429a6:	4b0d      	ldr	r3, [pc, #52]	; (80429dc <std+0x60>)
 80429a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80429aa:	4b0d      	ldr	r3, [pc, #52]	; (80429e0 <std+0x64>)
 80429ac:	6323      	str	r3, [r4, #48]	; 0x30
 80429ae:	4b0d      	ldr	r3, [pc, #52]	; (80429e4 <std+0x68>)
 80429b0:	6224      	str	r4, [r4, #32]
 80429b2:	429c      	cmp	r4, r3
 80429b4:	d006      	beq.n	80429c4 <std+0x48>
 80429b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80429ba:	4294      	cmp	r4, r2
 80429bc:	d002      	beq.n	80429c4 <std+0x48>
 80429be:	33d0      	adds	r3, #208	; 0xd0
 80429c0:	429c      	cmp	r4, r3
 80429c2:	d105      	bne.n	80429d0 <std+0x54>
 80429c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80429c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80429cc:	f000 b9aa 	b.w	8042d24 <__retarget_lock_init_recursive>
 80429d0:	bd10      	pop	{r4, pc}
 80429d2:	bf00      	nop
 80429d4:	08042b41 	.word	0x08042b41
 80429d8:	08042b63 	.word	0x08042b63
 80429dc:	08042b9b 	.word	0x08042b9b
 80429e0:	08042bbf 	.word	0x08042bbf
 80429e4:	2000fef8 	.word	0x2000fef8

080429e8 <stdio_exit_handler>:
 80429e8:	4a02      	ldr	r2, [pc, #8]	; (80429f4 <stdio_exit_handler+0xc>)
 80429ea:	4903      	ldr	r1, [pc, #12]	; (80429f8 <stdio_exit_handler+0x10>)
 80429ec:	4803      	ldr	r0, [pc, #12]	; (80429fc <stdio_exit_handler+0x14>)
 80429ee:	f000 b869 	b.w	8042ac4 <_fwalk_sglue>
 80429f2:	bf00      	nop
 80429f4:	20003504 	.word	0x20003504
 80429f8:	08045061 	.word	0x08045061
 80429fc:	2000367c 	.word	0x2000367c

08042a00 <cleanup_stdio>:
 8042a00:	6841      	ldr	r1, [r0, #4]
 8042a02:	4b0c      	ldr	r3, [pc, #48]	; (8042a34 <cleanup_stdio+0x34>)
 8042a04:	4299      	cmp	r1, r3
 8042a06:	b510      	push	{r4, lr}
 8042a08:	4604      	mov	r4, r0
 8042a0a:	d001      	beq.n	8042a10 <cleanup_stdio+0x10>
 8042a0c:	f002 fb28 	bl	8045060 <_fflush_r>
 8042a10:	68a1      	ldr	r1, [r4, #8]
 8042a12:	4b09      	ldr	r3, [pc, #36]	; (8042a38 <cleanup_stdio+0x38>)
 8042a14:	4299      	cmp	r1, r3
 8042a16:	d002      	beq.n	8042a1e <cleanup_stdio+0x1e>
 8042a18:	4620      	mov	r0, r4
 8042a1a:	f002 fb21 	bl	8045060 <_fflush_r>
 8042a1e:	68e1      	ldr	r1, [r4, #12]
 8042a20:	4b06      	ldr	r3, [pc, #24]	; (8042a3c <cleanup_stdio+0x3c>)
 8042a22:	4299      	cmp	r1, r3
 8042a24:	d004      	beq.n	8042a30 <cleanup_stdio+0x30>
 8042a26:	4620      	mov	r0, r4
 8042a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042a2c:	f002 bb18 	b.w	8045060 <_fflush_r>
 8042a30:	bd10      	pop	{r4, pc}
 8042a32:	bf00      	nop
 8042a34:	2000fef8 	.word	0x2000fef8
 8042a38:	2000ff60 	.word	0x2000ff60
 8042a3c:	2000ffc8 	.word	0x2000ffc8

08042a40 <global_stdio_init.part.0>:
 8042a40:	b510      	push	{r4, lr}
 8042a42:	4b0b      	ldr	r3, [pc, #44]	; (8042a70 <global_stdio_init.part.0+0x30>)
 8042a44:	4c0b      	ldr	r4, [pc, #44]	; (8042a74 <global_stdio_init.part.0+0x34>)
 8042a46:	4a0c      	ldr	r2, [pc, #48]	; (8042a78 <global_stdio_init.part.0+0x38>)
 8042a48:	601a      	str	r2, [r3, #0]
 8042a4a:	4620      	mov	r0, r4
 8042a4c:	2200      	movs	r2, #0
 8042a4e:	2104      	movs	r1, #4
 8042a50:	f7ff ff94 	bl	804297c <std>
 8042a54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8042a58:	2201      	movs	r2, #1
 8042a5a:	2109      	movs	r1, #9
 8042a5c:	f7ff ff8e 	bl	804297c <std>
 8042a60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8042a64:	2202      	movs	r2, #2
 8042a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042a6a:	2112      	movs	r1, #18
 8042a6c:	f7ff bf86 	b.w	804297c <std>
 8042a70:	20010030 	.word	0x20010030
 8042a74:	2000fef8 	.word	0x2000fef8
 8042a78:	080429e9 	.word	0x080429e9

08042a7c <__sfp_lock_acquire>:
 8042a7c:	4801      	ldr	r0, [pc, #4]	; (8042a84 <__sfp_lock_acquire+0x8>)
 8042a7e:	f000 b952 	b.w	8042d26 <__retarget_lock_acquire_recursive>
 8042a82:	bf00      	nop
 8042a84:	20010039 	.word	0x20010039

08042a88 <__sfp_lock_release>:
 8042a88:	4801      	ldr	r0, [pc, #4]	; (8042a90 <__sfp_lock_release+0x8>)
 8042a8a:	f000 b94d 	b.w	8042d28 <__retarget_lock_release_recursive>
 8042a8e:	bf00      	nop
 8042a90:	20010039 	.word	0x20010039

08042a94 <__sinit>:
 8042a94:	b510      	push	{r4, lr}
 8042a96:	4604      	mov	r4, r0
 8042a98:	f7ff fff0 	bl	8042a7c <__sfp_lock_acquire>
 8042a9c:	6a23      	ldr	r3, [r4, #32]
 8042a9e:	b11b      	cbz	r3, 8042aa8 <__sinit+0x14>
 8042aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042aa4:	f7ff bff0 	b.w	8042a88 <__sfp_lock_release>
 8042aa8:	4b04      	ldr	r3, [pc, #16]	; (8042abc <__sinit+0x28>)
 8042aaa:	6223      	str	r3, [r4, #32]
 8042aac:	4b04      	ldr	r3, [pc, #16]	; (8042ac0 <__sinit+0x2c>)
 8042aae:	681b      	ldr	r3, [r3, #0]
 8042ab0:	2b00      	cmp	r3, #0
 8042ab2:	d1f5      	bne.n	8042aa0 <__sinit+0xc>
 8042ab4:	f7ff ffc4 	bl	8042a40 <global_stdio_init.part.0>
 8042ab8:	e7f2      	b.n	8042aa0 <__sinit+0xc>
 8042aba:	bf00      	nop
 8042abc:	08042a01 	.word	0x08042a01
 8042ac0:	20010030 	.word	0x20010030

08042ac4 <_fwalk_sglue>:
 8042ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8042ac8:	4607      	mov	r7, r0
 8042aca:	4688      	mov	r8, r1
 8042acc:	4614      	mov	r4, r2
 8042ace:	2600      	movs	r6, #0
 8042ad0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8042ad4:	f1b9 0901 	subs.w	r9, r9, #1
 8042ad8:	d505      	bpl.n	8042ae6 <_fwalk_sglue+0x22>
 8042ada:	6824      	ldr	r4, [r4, #0]
 8042adc:	2c00      	cmp	r4, #0
 8042ade:	d1f7      	bne.n	8042ad0 <_fwalk_sglue+0xc>
 8042ae0:	4630      	mov	r0, r6
 8042ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8042ae6:	89ab      	ldrh	r3, [r5, #12]
 8042ae8:	2b01      	cmp	r3, #1
 8042aea:	d907      	bls.n	8042afc <_fwalk_sglue+0x38>
 8042aec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8042af0:	3301      	adds	r3, #1
 8042af2:	d003      	beq.n	8042afc <_fwalk_sglue+0x38>
 8042af4:	4629      	mov	r1, r5
 8042af6:	4638      	mov	r0, r7
 8042af8:	47c0      	blx	r8
 8042afa:	4306      	orrs	r6, r0
 8042afc:	3568      	adds	r5, #104	; 0x68
 8042afe:	e7e9      	b.n	8042ad4 <_fwalk_sglue+0x10>

08042b00 <siprintf>:
 8042b00:	b40e      	push	{r1, r2, r3}
 8042b02:	b500      	push	{lr}
 8042b04:	b09c      	sub	sp, #112	; 0x70
 8042b06:	ab1d      	add	r3, sp, #116	; 0x74
 8042b08:	9002      	str	r0, [sp, #8]
 8042b0a:	9006      	str	r0, [sp, #24]
 8042b0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8042b10:	4809      	ldr	r0, [pc, #36]	; (8042b38 <siprintf+0x38>)
 8042b12:	9107      	str	r1, [sp, #28]
 8042b14:	9104      	str	r1, [sp, #16]
 8042b16:	4909      	ldr	r1, [pc, #36]	; (8042b3c <siprintf+0x3c>)
 8042b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8042b1c:	9105      	str	r1, [sp, #20]
 8042b1e:	6800      	ldr	r0, [r0, #0]
 8042b20:	9301      	str	r3, [sp, #4]
 8042b22:	a902      	add	r1, sp, #8
 8042b24:	f002 f918 	bl	8044d58 <_svfiprintf_r>
 8042b28:	9b02      	ldr	r3, [sp, #8]
 8042b2a:	2200      	movs	r2, #0
 8042b2c:	701a      	strb	r2, [r3, #0]
 8042b2e:	b01c      	add	sp, #112	; 0x70
 8042b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8042b34:	b003      	add	sp, #12
 8042b36:	4770      	bx	lr
 8042b38:	200036c8 	.word	0x200036c8
 8042b3c:	ffff0208 	.word	0xffff0208

08042b40 <__sread>:
 8042b40:	b510      	push	{r4, lr}
 8042b42:	460c      	mov	r4, r1
 8042b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042b48:	f000 f89e 	bl	8042c88 <_read_r>
 8042b4c:	2800      	cmp	r0, #0
 8042b4e:	bfab      	itete	ge
 8042b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8042b52:	89a3      	ldrhlt	r3, [r4, #12]
 8042b54:	181b      	addge	r3, r3, r0
 8042b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8042b5a:	bfac      	ite	ge
 8042b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8042b5e:	81a3      	strhlt	r3, [r4, #12]
 8042b60:	bd10      	pop	{r4, pc}

08042b62 <__swrite>:
 8042b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042b66:	461f      	mov	r7, r3
 8042b68:	898b      	ldrh	r3, [r1, #12]
 8042b6a:	05db      	lsls	r3, r3, #23
 8042b6c:	4605      	mov	r5, r0
 8042b6e:	460c      	mov	r4, r1
 8042b70:	4616      	mov	r6, r2
 8042b72:	d505      	bpl.n	8042b80 <__swrite+0x1e>
 8042b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042b78:	2302      	movs	r3, #2
 8042b7a:	2200      	movs	r2, #0
 8042b7c:	f000 f872 	bl	8042c64 <_lseek_r>
 8042b80:	89a3      	ldrh	r3, [r4, #12]
 8042b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8042b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8042b8a:	81a3      	strh	r3, [r4, #12]
 8042b8c:	4632      	mov	r2, r6
 8042b8e:	463b      	mov	r3, r7
 8042b90:	4628      	mov	r0, r5
 8042b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8042b96:	f000 b889 	b.w	8042cac <_write_r>

08042b9a <__sseek>:
 8042b9a:	b510      	push	{r4, lr}
 8042b9c:	460c      	mov	r4, r1
 8042b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042ba2:	f000 f85f 	bl	8042c64 <_lseek_r>
 8042ba6:	1c43      	adds	r3, r0, #1
 8042ba8:	89a3      	ldrh	r3, [r4, #12]
 8042baa:	bf15      	itete	ne
 8042bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8042bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8042bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8042bb6:	81a3      	strheq	r3, [r4, #12]
 8042bb8:	bf18      	it	ne
 8042bba:	81a3      	strhne	r3, [r4, #12]
 8042bbc:	bd10      	pop	{r4, pc}

08042bbe <__sclose>:
 8042bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042bc2:	f000 b83f 	b.w	8042c44 <_close_r>
	...

08042bc8 <_vsiprintf_r>:
 8042bc8:	b500      	push	{lr}
 8042bca:	b09b      	sub	sp, #108	; 0x6c
 8042bcc:	9100      	str	r1, [sp, #0]
 8042bce:	9104      	str	r1, [sp, #16]
 8042bd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8042bd4:	9105      	str	r1, [sp, #20]
 8042bd6:	9102      	str	r1, [sp, #8]
 8042bd8:	4905      	ldr	r1, [pc, #20]	; (8042bf0 <_vsiprintf_r+0x28>)
 8042bda:	9103      	str	r1, [sp, #12]
 8042bdc:	4669      	mov	r1, sp
 8042bde:	f002 f8bb 	bl	8044d58 <_svfiprintf_r>
 8042be2:	9b00      	ldr	r3, [sp, #0]
 8042be4:	2200      	movs	r2, #0
 8042be6:	701a      	strb	r2, [r3, #0]
 8042be8:	b01b      	add	sp, #108	; 0x6c
 8042bea:	f85d fb04 	ldr.w	pc, [sp], #4
 8042bee:	bf00      	nop
 8042bf0:	ffff0208 	.word	0xffff0208

08042bf4 <vsiprintf>:
 8042bf4:	4613      	mov	r3, r2
 8042bf6:	460a      	mov	r2, r1
 8042bf8:	4601      	mov	r1, r0
 8042bfa:	4802      	ldr	r0, [pc, #8]	; (8042c04 <vsiprintf+0x10>)
 8042bfc:	6800      	ldr	r0, [r0, #0]
 8042bfe:	f7ff bfe3 	b.w	8042bc8 <_vsiprintf_r>
 8042c02:	bf00      	nop
 8042c04:	200036c8 	.word	0x200036c8

08042c08 <memset>:
 8042c08:	4402      	add	r2, r0
 8042c0a:	4603      	mov	r3, r0
 8042c0c:	4293      	cmp	r3, r2
 8042c0e:	d100      	bne.n	8042c12 <memset+0xa>
 8042c10:	4770      	bx	lr
 8042c12:	f803 1b01 	strb.w	r1, [r3], #1
 8042c16:	e7f9      	b.n	8042c0c <memset+0x4>

08042c18 <strncmp>:
 8042c18:	b510      	push	{r4, lr}
 8042c1a:	b16a      	cbz	r2, 8042c38 <strncmp+0x20>
 8042c1c:	3901      	subs	r1, #1
 8042c1e:	1884      	adds	r4, r0, r2
 8042c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8042c24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8042c28:	429a      	cmp	r2, r3
 8042c2a:	d103      	bne.n	8042c34 <strncmp+0x1c>
 8042c2c:	42a0      	cmp	r0, r4
 8042c2e:	d001      	beq.n	8042c34 <strncmp+0x1c>
 8042c30:	2a00      	cmp	r2, #0
 8042c32:	d1f5      	bne.n	8042c20 <strncmp+0x8>
 8042c34:	1ad0      	subs	r0, r2, r3
 8042c36:	bd10      	pop	{r4, pc}
 8042c38:	4610      	mov	r0, r2
 8042c3a:	e7fc      	b.n	8042c36 <strncmp+0x1e>

08042c3c <_localeconv_r>:
 8042c3c:	4800      	ldr	r0, [pc, #0]	; (8042c40 <_localeconv_r+0x4>)
 8042c3e:	4770      	bx	lr
 8042c40:	20003600 	.word	0x20003600

08042c44 <_close_r>:
 8042c44:	b538      	push	{r3, r4, r5, lr}
 8042c46:	4d06      	ldr	r5, [pc, #24]	; (8042c60 <_close_r+0x1c>)
 8042c48:	2300      	movs	r3, #0
 8042c4a:	4604      	mov	r4, r0
 8042c4c:	4608      	mov	r0, r1
 8042c4e:	602b      	str	r3, [r5, #0]
 8042c50:	f7e2 f8c3 	bl	8024dda <_close>
 8042c54:	1c43      	adds	r3, r0, #1
 8042c56:	d102      	bne.n	8042c5e <_close_r+0x1a>
 8042c58:	682b      	ldr	r3, [r5, #0]
 8042c5a:	b103      	cbz	r3, 8042c5e <_close_r+0x1a>
 8042c5c:	6023      	str	r3, [r4, #0]
 8042c5e:	bd38      	pop	{r3, r4, r5, pc}
 8042c60:	20010034 	.word	0x20010034

08042c64 <_lseek_r>:
 8042c64:	b538      	push	{r3, r4, r5, lr}
 8042c66:	4d07      	ldr	r5, [pc, #28]	; (8042c84 <_lseek_r+0x20>)
 8042c68:	4604      	mov	r4, r0
 8042c6a:	4608      	mov	r0, r1
 8042c6c:	4611      	mov	r1, r2
 8042c6e:	2200      	movs	r2, #0
 8042c70:	602a      	str	r2, [r5, #0]
 8042c72:	461a      	mov	r2, r3
 8042c74:	f7e2 f8d8 	bl	8024e28 <_lseek>
 8042c78:	1c43      	adds	r3, r0, #1
 8042c7a:	d102      	bne.n	8042c82 <_lseek_r+0x1e>
 8042c7c:	682b      	ldr	r3, [r5, #0]
 8042c7e:	b103      	cbz	r3, 8042c82 <_lseek_r+0x1e>
 8042c80:	6023      	str	r3, [r4, #0]
 8042c82:	bd38      	pop	{r3, r4, r5, pc}
 8042c84:	20010034 	.word	0x20010034

08042c88 <_read_r>:
 8042c88:	b538      	push	{r3, r4, r5, lr}
 8042c8a:	4d07      	ldr	r5, [pc, #28]	; (8042ca8 <_read_r+0x20>)
 8042c8c:	4604      	mov	r4, r0
 8042c8e:	4608      	mov	r0, r1
 8042c90:	4611      	mov	r1, r2
 8042c92:	2200      	movs	r2, #0
 8042c94:	602a      	str	r2, [r5, #0]
 8042c96:	461a      	mov	r2, r3
 8042c98:	f7e2 f866 	bl	8024d68 <_read>
 8042c9c:	1c43      	adds	r3, r0, #1
 8042c9e:	d102      	bne.n	8042ca6 <_read_r+0x1e>
 8042ca0:	682b      	ldr	r3, [r5, #0]
 8042ca2:	b103      	cbz	r3, 8042ca6 <_read_r+0x1e>
 8042ca4:	6023      	str	r3, [r4, #0]
 8042ca6:	bd38      	pop	{r3, r4, r5, pc}
 8042ca8:	20010034 	.word	0x20010034

08042cac <_write_r>:
 8042cac:	b538      	push	{r3, r4, r5, lr}
 8042cae:	4d07      	ldr	r5, [pc, #28]	; (8042ccc <_write_r+0x20>)
 8042cb0:	4604      	mov	r4, r0
 8042cb2:	4608      	mov	r0, r1
 8042cb4:	4611      	mov	r1, r2
 8042cb6:	2200      	movs	r2, #0
 8042cb8:	602a      	str	r2, [r5, #0]
 8042cba:	461a      	mov	r2, r3
 8042cbc:	f7e2 f871 	bl	8024da2 <_write>
 8042cc0:	1c43      	adds	r3, r0, #1
 8042cc2:	d102      	bne.n	8042cca <_write_r+0x1e>
 8042cc4:	682b      	ldr	r3, [r5, #0]
 8042cc6:	b103      	cbz	r3, 8042cca <_write_r+0x1e>
 8042cc8:	6023      	str	r3, [r4, #0]
 8042cca:	bd38      	pop	{r3, r4, r5, pc}
 8042ccc:	20010034 	.word	0x20010034

08042cd0 <__errno>:
 8042cd0:	4b01      	ldr	r3, [pc, #4]	; (8042cd8 <__errno+0x8>)
 8042cd2:	6818      	ldr	r0, [r3, #0]
 8042cd4:	4770      	bx	lr
 8042cd6:	bf00      	nop
 8042cd8:	200036c8 	.word	0x200036c8

08042cdc <__libc_init_array>:
 8042cdc:	b570      	push	{r4, r5, r6, lr}
 8042cde:	4d0d      	ldr	r5, [pc, #52]	; (8042d14 <__libc_init_array+0x38>)
 8042ce0:	4c0d      	ldr	r4, [pc, #52]	; (8042d18 <__libc_init_array+0x3c>)
 8042ce2:	1b64      	subs	r4, r4, r5
 8042ce4:	10a4      	asrs	r4, r4, #2
 8042ce6:	2600      	movs	r6, #0
 8042ce8:	42a6      	cmp	r6, r4
 8042cea:	d109      	bne.n	8042d00 <__libc_init_array+0x24>
 8042cec:	4d0b      	ldr	r5, [pc, #44]	; (8042d1c <__libc_init_array+0x40>)
 8042cee:	4c0c      	ldr	r4, [pc, #48]	; (8042d20 <__libc_init_array+0x44>)
 8042cf0:	f003 fd6e 	bl	80467d0 <_init>
 8042cf4:	1b64      	subs	r4, r4, r5
 8042cf6:	10a4      	asrs	r4, r4, #2
 8042cf8:	2600      	movs	r6, #0
 8042cfa:	42a6      	cmp	r6, r4
 8042cfc:	d105      	bne.n	8042d0a <__libc_init_array+0x2e>
 8042cfe:	bd70      	pop	{r4, r5, r6, pc}
 8042d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8042d04:	4798      	blx	r3
 8042d06:	3601      	adds	r6, #1
 8042d08:	e7ee      	b.n	8042ce8 <__libc_init_array+0xc>
 8042d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8042d0e:	4798      	blx	r3
 8042d10:	3601      	adds	r6, #1
 8042d12:	e7f2      	b.n	8042cfa <__libc_init_array+0x1e>
 8042d14:	0804a830 	.word	0x0804a830
 8042d18:	0804a830 	.word	0x0804a830
 8042d1c:	0804a830 	.word	0x0804a830
 8042d20:	0804a834 	.word	0x0804a834

08042d24 <__retarget_lock_init_recursive>:
 8042d24:	4770      	bx	lr

08042d26 <__retarget_lock_acquire_recursive>:
 8042d26:	4770      	bx	lr

08042d28 <__retarget_lock_release_recursive>:
 8042d28:	4770      	bx	lr

08042d2a <strcpy>:
 8042d2a:	4603      	mov	r3, r0
 8042d2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8042d30:	f803 2b01 	strb.w	r2, [r3], #1
 8042d34:	2a00      	cmp	r2, #0
 8042d36:	d1f9      	bne.n	8042d2c <strcpy+0x2>
 8042d38:	4770      	bx	lr

08042d3a <memcpy>:
 8042d3a:	440a      	add	r2, r1
 8042d3c:	4291      	cmp	r1, r2
 8042d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8042d42:	d100      	bne.n	8042d46 <memcpy+0xc>
 8042d44:	4770      	bx	lr
 8042d46:	b510      	push	{r4, lr}
 8042d48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8042d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8042d50:	4291      	cmp	r1, r2
 8042d52:	d1f9      	bne.n	8042d48 <memcpy+0xe>
 8042d54:	bd10      	pop	{r4, pc}
	...

08042d58 <nan>:
 8042d58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8042d60 <nan+0x8>
 8042d5c:	4770      	bx	lr
 8042d5e:	bf00      	nop
 8042d60:	00000000 	.word	0x00000000
 8042d64:	7ff80000 	.word	0x7ff80000

08042d68 <quorem>:
 8042d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042d6c:	6903      	ldr	r3, [r0, #16]
 8042d6e:	690c      	ldr	r4, [r1, #16]
 8042d70:	42a3      	cmp	r3, r4
 8042d72:	4607      	mov	r7, r0
 8042d74:	db7e      	blt.n	8042e74 <quorem+0x10c>
 8042d76:	3c01      	subs	r4, #1
 8042d78:	f101 0814 	add.w	r8, r1, #20
 8042d7c:	f100 0514 	add.w	r5, r0, #20
 8042d80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8042d84:	9301      	str	r3, [sp, #4]
 8042d86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8042d8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8042d8e:	3301      	adds	r3, #1
 8042d90:	429a      	cmp	r2, r3
 8042d92:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8042d96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8042d9a:	fbb2 f6f3 	udiv	r6, r2, r3
 8042d9e:	d331      	bcc.n	8042e04 <quorem+0x9c>
 8042da0:	f04f 0e00 	mov.w	lr, #0
 8042da4:	4640      	mov	r0, r8
 8042da6:	46ac      	mov	ip, r5
 8042da8:	46f2      	mov	sl, lr
 8042daa:	f850 2b04 	ldr.w	r2, [r0], #4
 8042dae:	b293      	uxth	r3, r2
 8042db0:	fb06 e303 	mla	r3, r6, r3, lr
 8042db4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8042db8:	0c1a      	lsrs	r2, r3, #16
 8042dba:	b29b      	uxth	r3, r3
 8042dbc:	ebaa 0303 	sub.w	r3, sl, r3
 8042dc0:	f8dc a000 	ldr.w	sl, [ip]
 8042dc4:	fa13 f38a 	uxtah	r3, r3, sl
 8042dc8:	fb06 220e 	mla	r2, r6, lr, r2
 8042dcc:	9300      	str	r3, [sp, #0]
 8042dce:	9b00      	ldr	r3, [sp, #0]
 8042dd0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8042dd4:	b292      	uxth	r2, r2
 8042dd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8042dda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8042dde:	f8bd 3000 	ldrh.w	r3, [sp]
 8042de2:	4581      	cmp	r9, r0
 8042de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8042de8:	f84c 3b04 	str.w	r3, [ip], #4
 8042dec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8042df0:	d2db      	bcs.n	8042daa <quorem+0x42>
 8042df2:	f855 300b 	ldr.w	r3, [r5, fp]
 8042df6:	b92b      	cbnz	r3, 8042e04 <quorem+0x9c>
 8042df8:	9b01      	ldr	r3, [sp, #4]
 8042dfa:	3b04      	subs	r3, #4
 8042dfc:	429d      	cmp	r5, r3
 8042dfe:	461a      	mov	r2, r3
 8042e00:	d32c      	bcc.n	8042e5c <quorem+0xf4>
 8042e02:	613c      	str	r4, [r7, #16]
 8042e04:	4638      	mov	r0, r7
 8042e06:	f001 fd59 	bl	80448bc <__mcmp>
 8042e0a:	2800      	cmp	r0, #0
 8042e0c:	db22      	blt.n	8042e54 <quorem+0xec>
 8042e0e:	3601      	adds	r6, #1
 8042e10:	4629      	mov	r1, r5
 8042e12:	2000      	movs	r0, #0
 8042e14:	f858 2b04 	ldr.w	r2, [r8], #4
 8042e18:	f8d1 c000 	ldr.w	ip, [r1]
 8042e1c:	b293      	uxth	r3, r2
 8042e1e:	1ac3      	subs	r3, r0, r3
 8042e20:	0c12      	lsrs	r2, r2, #16
 8042e22:	fa13 f38c 	uxtah	r3, r3, ip
 8042e26:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8042e2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8042e2e:	b29b      	uxth	r3, r3
 8042e30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8042e34:	45c1      	cmp	r9, r8
 8042e36:	f841 3b04 	str.w	r3, [r1], #4
 8042e3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8042e3e:	d2e9      	bcs.n	8042e14 <quorem+0xac>
 8042e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8042e44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8042e48:	b922      	cbnz	r2, 8042e54 <quorem+0xec>
 8042e4a:	3b04      	subs	r3, #4
 8042e4c:	429d      	cmp	r5, r3
 8042e4e:	461a      	mov	r2, r3
 8042e50:	d30a      	bcc.n	8042e68 <quorem+0x100>
 8042e52:	613c      	str	r4, [r7, #16]
 8042e54:	4630      	mov	r0, r6
 8042e56:	b003      	add	sp, #12
 8042e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8042e5c:	6812      	ldr	r2, [r2, #0]
 8042e5e:	3b04      	subs	r3, #4
 8042e60:	2a00      	cmp	r2, #0
 8042e62:	d1ce      	bne.n	8042e02 <quorem+0x9a>
 8042e64:	3c01      	subs	r4, #1
 8042e66:	e7c9      	b.n	8042dfc <quorem+0x94>
 8042e68:	6812      	ldr	r2, [r2, #0]
 8042e6a:	3b04      	subs	r3, #4
 8042e6c:	2a00      	cmp	r2, #0
 8042e6e:	d1f0      	bne.n	8042e52 <quorem+0xea>
 8042e70:	3c01      	subs	r4, #1
 8042e72:	e7eb      	b.n	8042e4c <quorem+0xe4>
 8042e74:	2000      	movs	r0, #0
 8042e76:	e7ee      	b.n	8042e56 <quorem+0xee>

08042e78 <_dtoa_r>:
 8042e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042e7c:	ed2d 8b04 	vpush	{d8-d9}
 8042e80:	69c5      	ldr	r5, [r0, #28]
 8042e82:	b093      	sub	sp, #76	; 0x4c
 8042e84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8042e88:	ec57 6b10 	vmov	r6, r7, d0
 8042e8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8042e90:	9107      	str	r1, [sp, #28]
 8042e92:	4604      	mov	r4, r0
 8042e94:	920a      	str	r2, [sp, #40]	; 0x28
 8042e96:	930d      	str	r3, [sp, #52]	; 0x34
 8042e98:	b975      	cbnz	r5, 8042eb8 <_dtoa_r+0x40>
 8042e9a:	2010      	movs	r0, #16
 8042e9c:	f001 f982 	bl	80441a4 <malloc>
 8042ea0:	4602      	mov	r2, r0
 8042ea2:	61e0      	str	r0, [r4, #28]
 8042ea4:	b920      	cbnz	r0, 8042eb0 <_dtoa_r+0x38>
 8042ea6:	4bae      	ldr	r3, [pc, #696]	; (8043160 <_dtoa_r+0x2e8>)
 8042ea8:	21ef      	movs	r1, #239	; 0xef
 8042eaa:	48ae      	ldr	r0, [pc, #696]	; (8043164 <_dtoa_r+0x2ec>)
 8042eac:	f002 f92a 	bl	8045104 <__assert_func>
 8042eb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8042eb4:	6005      	str	r5, [r0, #0]
 8042eb6:	60c5      	str	r5, [r0, #12]
 8042eb8:	69e3      	ldr	r3, [r4, #28]
 8042eba:	6819      	ldr	r1, [r3, #0]
 8042ebc:	b151      	cbz	r1, 8042ed4 <_dtoa_r+0x5c>
 8042ebe:	685a      	ldr	r2, [r3, #4]
 8042ec0:	604a      	str	r2, [r1, #4]
 8042ec2:	2301      	movs	r3, #1
 8042ec4:	4093      	lsls	r3, r2
 8042ec6:	608b      	str	r3, [r1, #8]
 8042ec8:	4620      	mov	r0, r4
 8042eca:	f001 fa71 	bl	80443b0 <_Bfree>
 8042ece:	69e3      	ldr	r3, [r4, #28]
 8042ed0:	2200      	movs	r2, #0
 8042ed2:	601a      	str	r2, [r3, #0]
 8042ed4:	1e3b      	subs	r3, r7, #0
 8042ed6:	bfbb      	ittet	lt
 8042ed8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8042edc:	9303      	strlt	r3, [sp, #12]
 8042ede:	2300      	movge	r3, #0
 8042ee0:	2201      	movlt	r2, #1
 8042ee2:	bfac      	ite	ge
 8042ee4:	f8c8 3000 	strge.w	r3, [r8]
 8042ee8:	f8c8 2000 	strlt.w	r2, [r8]
 8042eec:	4b9e      	ldr	r3, [pc, #632]	; (8043168 <_dtoa_r+0x2f0>)
 8042eee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8042ef2:	ea33 0308 	bics.w	r3, r3, r8
 8042ef6:	d11b      	bne.n	8042f30 <_dtoa_r+0xb8>
 8042ef8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8042efa:	f242 730f 	movw	r3, #9999	; 0x270f
 8042efe:	6013      	str	r3, [r2, #0]
 8042f00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8042f04:	4333      	orrs	r3, r6
 8042f06:	f000 8593 	beq.w	8043a30 <_dtoa_r+0xbb8>
 8042f0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8042f0c:	b963      	cbnz	r3, 8042f28 <_dtoa_r+0xb0>
 8042f0e:	4b97      	ldr	r3, [pc, #604]	; (804316c <_dtoa_r+0x2f4>)
 8042f10:	e027      	b.n	8042f62 <_dtoa_r+0xea>
 8042f12:	4b97      	ldr	r3, [pc, #604]	; (8043170 <_dtoa_r+0x2f8>)
 8042f14:	9300      	str	r3, [sp, #0]
 8042f16:	3308      	adds	r3, #8
 8042f18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8042f1a:	6013      	str	r3, [r2, #0]
 8042f1c:	9800      	ldr	r0, [sp, #0]
 8042f1e:	b013      	add	sp, #76	; 0x4c
 8042f20:	ecbd 8b04 	vpop	{d8-d9}
 8042f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8042f28:	4b90      	ldr	r3, [pc, #576]	; (804316c <_dtoa_r+0x2f4>)
 8042f2a:	9300      	str	r3, [sp, #0]
 8042f2c:	3303      	adds	r3, #3
 8042f2e:	e7f3      	b.n	8042f18 <_dtoa_r+0xa0>
 8042f30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8042f34:	2200      	movs	r2, #0
 8042f36:	ec51 0b17 	vmov	r0, r1, d7
 8042f3a:	eeb0 8a47 	vmov.f32	s16, s14
 8042f3e:	eef0 8a67 	vmov.f32	s17, s15
 8042f42:	2300      	movs	r3, #0
 8042f44:	f7dd fdf0 	bl	8020b28 <__aeabi_dcmpeq>
 8042f48:	4681      	mov	r9, r0
 8042f4a:	b160      	cbz	r0, 8042f66 <_dtoa_r+0xee>
 8042f4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8042f4e:	2301      	movs	r3, #1
 8042f50:	6013      	str	r3, [r2, #0]
 8042f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8042f54:	2b00      	cmp	r3, #0
 8042f56:	f000 8568 	beq.w	8043a2a <_dtoa_r+0xbb2>
 8042f5a:	4b86      	ldr	r3, [pc, #536]	; (8043174 <_dtoa_r+0x2fc>)
 8042f5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8042f5e:	6013      	str	r3, [r2, #0]
 8042f60:	3b01      	subs	r3, #1
 8042f62:	9300      	str	r3, [sp, #0]
 8042f64:	e7da      	b.n	8042f1c <_dtoa_r+0xa4>
 8042f66:	aa10      	add	r2, sp, #64	; 0x40
 8042f68:	a911      	add	r1, sp, #68	; 0x44
 8042f6a:	4620      	mov	r0, r4
 8042f6c:	eeb0 0a48 	vmov.f32	s0, s16
 8042f70:	eef0 0a68 	vmov.f32	s1, s17
 8042f74:	f001 fdb8 	bl	8044ae8 <__d2b>
 8042f78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8042f7c:	4682      	mov	sl, r0
 8042f7e:	2d00      	cmp	r5, #0
 8042f80:	d07f      	beq.n	8043082 <_dtoa_r+0x20a>
 8042f82:	ee18 3a90 	vmov	r3, s17
 8042f86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8042f8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8042f8e:	ec51 0b18 	vmov	r0, r1, d8
 8042f92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8042f96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8042f9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8042f9e:	4619      	mov	r1, r3
 8042fa0:	2200      	movs	r2, #0
 8042fa2:	4b75      	ldr	r3, [pc, #468]	; (8043178 <_dtoa_r+0x300>)
 8042fa4:	f7dd f9a0 	bl	80202e8 <__aeabi_dsub>
 8042fa8:	a367      	add	r3, pc, #412	; (adr r3, 8043148 <_dtoa_r+0x2d0>)
 8042faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042fae:	f7dd fb53 	bl	8020658 <__aeabi_dmul>
 8042fb2:	a367      	add	r3, pc, #412	; (adr r3, 8043150 <_dtoa_r+0x2d8>)
 8042fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042fb8:	f7dd f998 	bl	80202ec <__adddf3>
 8042fbc:	4606      	mov	r6, r0
 8042fbe:	4628      	mov	r0, r5
 8042fc0:	460f      	mov	r7, r1
 8042fc2:	f7dd fadf 	bl	8020584 <__aeabi_i2d>
 8042fc6:	a364      	add	r3, pc, #400	; (adr r3, 8043158 <_dtoa_r+0x2e0>)
 8042fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042fcc:	f7dd fb44 	bl	8020658 <__aeabi_dmul>
 8042fd0:	4602      	mov	r2, r0
 8042fd2:	460b      	mov	r3, r1
 8042fd4:	4630      	mov	r0, r6
 8042fd6:	4639      	mov	r1, r7
 8042fd8:	f7dd f988 	bl	80202ec <__adddf3>
 8042fdc:	4606      	mov	r6, r0
 8042fde:	460f      	mov	r7, r1
 8042fe0:	f7dd fdea 	bl	8020bb8 <__aeabi_d2iz>
 8042fe4:	2200      	movs	r2, #0
 8042fe6:	4683      	mov	fp, r0
 8042fe8:	2300      	movs	r3, #0
 8042fea:	4630      	mov	r0, r6
 8042fec:	4639      	mov	r1, r7
 8042fee:	f7dd fda5 	bl	8020b3c <__aeabi_dcmplt>
 8042ff2:	b148      	cbz	r0, 8043008 <_dtoa_r+0x190>
 8042ff4:	4658      	mov	r0, fp
 8042ff6:	f7dd fac5 	bl	8020584 <__aeabi_i2d>
 8042ffa:	4632      	mov	r2, r6
 8042ffc:	463b      	mov	r3, r7
 8042ffe:	f7dd fd93 	bl	8020b28 <__aeabi_dcmpeq>
 8043002:	b908      	cbnz	r0, 8043008 <_dtoa_r+0x190>
 8043004:	f10b 3bff 	add.w	fp, fp, #4294967295
 8043008:	f1bb 0f16 	cmp.w	fp, #22
 804300c:	d857      	bhi.n	80430be <_dtoa_r+0x246>
 804300e:	4b5b      	ldr	r3, [pc, #364]	; (804317c <_dtoa_r+0x304>)
 8043010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8043014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043018:	ec51 0b18 	vmov	r0, r1, d8
 804301c:	f7dd fd8e 	bl	8020b3c <__aeabi_dcmplt>
 8043020:	2800      	cmp	r0, #0
 8043022:	d04e      	beq.n	80430c2 <_dtoa_r+0x24a>
 8043024:	f10b 3bff 	add.w	fp, fp, #4294967295
 8043028:	2300      	movs	r3, #0
 804302a:	930c      	str	r3, [sp, #48]	; 0x30
 804302c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 804302e:	1b5b      	subs	r3, r3, r5
 8043030:	1e5a      	subs	r2, r3, #1
 8043032:	bf45      	ittet	mi
 8043034:	f1c3 0301 	rsbmi	r3, r3, #1
 8043038:	9305      	strmi	r3, [sp, #20]
 804303a:	2300      	movpl	r3, #0
 804303c:	2300      	movmi	r3, #0
 804303e:	9206      	str	r2, [sp, #24]
 8043040:	bf54      	ite	pl
 8043042:	9305      	strpl	r3, [sp, #20]
 8043044:	9306      	strmi	r3, [sp, #24]
 8043046:	f1bb 0f00 	cmp.w	fp, #0
 804304a:	db3c      	blt.n	80430c6 <_dtoa_r+0x24e>
 804304c:	9b06      	ldr	r3, [sp, #24]
 804304e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8043052:	445b      	add	r3, fp
 8043054:	9306      	str	r3, [sp, #24]
 8043056:	2300      	movs	r3, #0
 8043058:	9308      	str	r3, [sp, #32]
 804305a:	9b07      	ldr	r3, [sp, #28]
 804305c:	2b09      	cmp	r3, #9
 804305e:	d868      	bhi.n	8043132 <_dtoa_r+0x2ba>
 8043060:	2b05      	cmp	r3, #5
 8043062:	bfc4      	itt	gt
 8043064:	3b04      	subgt	r3, #4
 8043066:	9307      	strgt	r3, [sp, #28]
 8043068:	9b07      	ldr	r3, [sp, #28]
 804306a:	f1a3 0302 	sub.w	r3, r3, #2
 804306e:	bfcc      	ite	gt
 8043070:	2500      	movgt	r5, #0
 8043072:	2501      	movle	r5, #1
 8043074:	2b03      	cmp	r3, #3
 8043076:	f200 8085 	bhi.w	8043184 <_dtoa_r+0x30c>
 804307a:	e8df f003 	tbb	[pc, r3]
 804307e:	3b2e      	.short	0x3b2e
 8043080:	5839      	.short	0x5839
 8043082:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8043086:	441d      	add	r5, r3
 8043088:	f205 4332 	addw	r3, r5, #1074	; 0x432
 804308c:	2b20      	cmp	r3, #32
 804308e:	bfc1      	itttt	gt
 8043090:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8043094:	fa08 f803 	lslgt.w	r8, r8, r3
 8043098:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 804309c:	fa26 f303 	lsrgt.w	r3, r6, r3
 80430a0:	bfd6      	itet	le
 80430a2:	f1c3 0320 	rsble	r3, r3, #32
 80430a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80430aa:	fa06 f003 	lslle.w	r0, r6, r3
 80430ae:	f7dd fa59 	bl	8020564 <__aeabi_ui2d>
 80430b2:	2201      	movs	r2, #1
 80430b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80430b8:	3d01      	subs	r5, #1
 80430ba:	920e      	str	r2, [sp, #56]	; 0x38
 80430bc:	e76f      	b.n	8042f9e <_dtoa_r+0x126>
 80430be:	2301      	movs	r3, #1
 80430c0:	e7b3      	b.n	804302a <_dtoa_r+0x1b2>
 80430c2:	900c      	str	r0, [sp, #48]	; 0x30
 80430c4:	e7b2      	b.n	804302c <_dtoa_r+0x1b4>
 80430c6:	9b05      	ldr	r3, [sp, #20]
 80430c8:	eba3 030b 	sub.w	r3, r3, fp
 80430cc:	9305      	str	r3, [sp, #20]
 80430ce:	f1cb 0300 	rsb	r3, fp, #0
 80430d2:	9308      	str	r3, [sp, #32]
 80430d4:	2300      	movs	r3, #0
 80430d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80430d8:	e7bf      	b.n	804305a <_dtoa_r+0x1e2>
 80430da:	2300      	movs	r3, #0
 80430dc:	9309      	str	r3, [sp, #36]	; 0x24
 80430de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80430e0:	2b00      	cmp	r3, #0
 80430e2:	dc52      	bgt.n	804318a <_dtoa_r+0x312>
 80430e4:	2301      	movs	r3, #1
 80430e6:	9301      	str	r3, [sp, #4]
 80430e8:	9304      	str	r3, [sp, #16]
 80430ea:	461a      	mov	r2, r3
 80430ec:	920a      	str	r2, [sp, #40]	; 0x28
 80430ee:	e00b      	b.n	8043108 <_dtoa_r+0x290>
 80430f0:	2301      	movs	r3, #1
 80430f2:	e7f3      	b.n	80430dc <_dtoa_r+0x264>
 80430f4:	2300      	movs	r3, #0
 80430f6:	9309      	str	r3, [sp, #36]	; 0x24
 80430f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80430fa:	445b      	add	r3, fp
 80430fc:	9301      	str	r3, [sp, #4]
 80430fe:	3301      	adds	r3, #1
 8043100:	2b01      	cmp	r3, #1
 8043102:	9304      	str	r3, [sp, #16]
 8043104:	bfb8      	it	lt
 8043106:	2301      	movlt	r3, #1
 8043108:	69e0      	ldr	r0, [r4, #28]
 804310a:	2100      	movs	r1, #0
 804310c:	2204      	movs	r2, #4
 804310e:	f102 0614 	add.w	r6, r2, #20
 8043112:	429e      	cmp	r6, r3
 8043114:	d93d      	bls.n	8043192 <_dtoa_r+0x31a>
 8043116:	6041      	str	r1, [r0, #4]
 8043118:	4620      	mov	r0, r4
 804311a:	f001 f909 	bl	8044330 <_Balloc>
 804311e:	9000      	str	r0, [sp, #0]
 8043120:	2800      	cmp	r0, #0
 8043122:	d139      	bne.n	8043198 <_dtoa_r+0x320>
 8043124:	4b16      	ldr	r3, [pc, #88]	; (8043180 <_dtoa_r+0x308>)
 8043126:	4602      	mov	r2, r0
 8043128:	f240 11af 	movw	r1, #431	; 0x1af
 804312c:	e6bd      	b.n	8042eaa <_dtoa_r+0x32>
 804312e:	2301      	movs	r3, #1
 8043130:	e7e1      	b.n	80430f6 <_dtoa_r+0x27e>
 8043132:	2501      	movs	r5, #1
 8043134:	2300      	movs	r3, #0
 8043136:	9307      	str	r3, [sp, #28]
 8043138:	9509      	str	r5, [sp, #36]	; 0x24
 804313a:	f04f 33ff 	mov.w	r3, #4294967295
 804313e:	9301      	str	r3, [sp, #4]
 8043140:	9304      	str	r3, [sp, #16]
 8043142:	2200      	movs	r2, #0
 8043144:	2312      	movs	r3, #18
 8043146:	e7d1      	b.n	80430ec <_dtoa_r+0x274>
 8043148:	636f4361 	.word	0x636f4361
 804314c:	3fd287a7 	.word	0x3fd287a7
 8043150:	8b60c8b3 	.word	0x8b60c8b3
 8043154:	3fc68a28 	.word	0x3fc68a28
 8043158:	509f79fb 	.word	0x509f79fb
 804315c:	3fd34413 	.word	0x3fd34413
 8043160:	0804a3c2 	.word	0x0804a3c2
 8043164:	0804a3d9 	.word	0x0804a3d9
 8043168:	7ff00000 	.word	0x7ff00000
 804316c:	0804a3be 	.word	0x0804a3be
 8043170:	0804a3b5 	.word	0x0804a3b5
 8043174:	0804a38a 	.word	0x0804a38a
 8043178:	3ff80000 	.word	0x3ff80000
 804317c:	0804a528 	.word	0x0804a528
 8043180:	0804a431 	.word	0x0804a431
 8043184:	2301      	movs	r3, #1
 8043186:	9309      	str	r3, [sp, #36]	; 0x24
 8043188:	e7d7      	b.n	804313a <_dtoa_r+0x2c2>
 804318a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 804318c:	9301      	str	r3, [sp, #4]
 804318e:	9304      	str	r3, [sp, #16]
 8043190:	e7ba      	b.n	8043108 <_dtoa_r+0x290>
 8043192:	3101      	adds	r1, #1
 8043194:	0052      	lsls	r2, r2, #1
 8043196:	e7ba      	b.n	804310e <_dtoa_r+0x296>
 8043198:	69e3      	ldr	r3, [r4, #28]
 804319a:	9a00      	ldr	r2, [sp, #0]
 804319c:	601a      	str	r2, [r3, #0]
 804319e:	9b04      	ldr	r3, [sp, #16]
 80431a0:	2b0e      	cmp	r3, #14
 80431a2:	f200 80a8 	bhi.w	80432f6 <_dtoa_r+0x47e>
 80431a6:	2d00      	cmp	r5, #0
 80431a8:	f000 80a5 	beq.w	80432f6 <_dtoa_r+0x47e>
 80431ac:	f1bb 0f00 	cmp.w	fp, #0
 80431b0:	dd38      	ble.n	8043224 <_dtoa_r+0x3ac>
 80431b2:	4bc0      	ldr	r3, [pc, #768]	; (80434b4 <_dtoa_r+0x63c>)
 80431b4:	f00b 020f 	and.w	r2, fp, #15
 80431b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80431bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80431c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80431c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80431c8:	d019      	beq.n	80431fe <_dtoa_r+0x386>
 80431ca:	4bbb      	ldr	r3, [pc, #748]	; (80434b8 <_dtoa_r+0x640>)
 80431cc:	ec51 0b18 	vmov	r0, r1, d8
 80431d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80431d4:	f7dd fb6a 	bl	80208ac <__aeabi_ddiv>
 80431d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80431dc:	f008 080f 	and.w	r8, r8, #15
 80431e0:	2503      	movs	r5, #3
 80431e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80434b8 <_dtoa_r+0x640>
 80431e6:	f1b8 0f00 	cmp.w	r8, #0
 80431ea:	d10a      	bne.n	8043202 <_dtoa_r+0x38a>
 80431ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80431f0:	4632      	mov	r2, r6
 80431f2:	463b      	mov	r3, r7
 80431f4:	f7dd fb5a 	bl	80208ac <__aeabi_ddiv>
 80431f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80431fc:	e02b      	b.n	8043256 <_dtoa_r+0x3de>
 80431fe:	2502      	movs	r5, #2
 8043200:	e7ef      	b.n	80431e2 <_dtoa_r+0x36a>
 8043202:	f018 0f01 	tst.w	r8, #1
 8043206:	d008      	beq.n	804321a <_dtoa_r+0x3a2>
 8043208:	4630      	mov	r0, r6
 804320a:	4639      	mov	r1, r7
 804320c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8043210:	f7dd fa22 	bl	8020658 <__aeabi_dmul>
 8043214:	3501      	adds	r5, #1
 8043216:	4606      	mov	r6, r0
 8043218:	460f      	mov	r7, r1
 804321a:	ea4f 0868 	mov.w	r8, r8, asr #1
 804321e:	f109 0908 	add.w	r9, r9, #8
 8043222:	e7e0      	b.n	80431e6 <_dtoa_r+0x36e>
 8043224:	f000 809f 	beq.w	8043366 <_dtoa_r+0x4ee>
 8043228:	f1cb 0600 	rsb	r6, fp, #0
 804322c:	4ba1      	ldr	r3, [pc, #644]	; (80434b4 <_dtoa_r+0x63c>)
 804322e:	4fa2      	ldr	r7, [pc, #648]	; (80434b8 <_dtoa_r+0x640>)
 8043230:	f006 020f 	and.w	r2, r6, #15
 8043234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8043238:	e9d3 2300 	ldrd	r2, r3, [r3]
 804323c:	ec51 0b18 	vmov	r0, r1, d8
 8043240:	f7dd fa0a 	bl	8020658 <__aeabi_dmul>
 8043244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8043248:	1136      	asrs	r6, r6, #4
 804324a:	2300      	movs	r3, #0
 804324c:	2502      	movs	r5, #2
 804324e:	2e00      	cmp	r6, #0
 8043250:	d17e      	bne.n	8043350 <_dtoa_r+0x4d8>
 8043252:	2b00      	cmp	r3, #0
 8043254:	d1d0      	bne.n	80431f8 <_dtoa_r+0x380>
 8043256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8043258:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 804325c:	2b00      	cmp	r3, #0
 804325e:	f000 8084 	beq.w	804336a <_dtoa_r+0x4f2>
 8043262:	4b96      	ldr	r3, [pc, #600]	; (80434bc <_dtoa_r+0x644>)
 8043264:	2200      	movs	r2, #0
 8043266:	4640      	mov	r0, r8
 8043268:	4649      	mov	r1, r9
 804326a:	f7dd fc67 	bl	8020b3c <__aeabi_dcmplt>
 804326e:	2800      	cmp	r0, #0
 8043270:	d07b      	beq.n	804336a <_dtoa_r+0x4f2>
 8043272:	9b04      	ldr	r3, [sp, #16]
 8043274:	2b00      	cmp	r3, #0
 8043276:	d078      	beq.n	804336a <_dtoa_r+0x4f2>
 8043278:	9b01      	ldr	r3, [sp, #4]
 804327a:	2b00      	cmp	r3, #0
 804327c:	dd39      	ble.n	80432f2 <_dtoa_r+0x47a>
 804327e:	4b90      	ldr	r3, [pc, #576]	; (80434c0 <_dtoa_r+0x648>)
 8043280:	2200      	movs	r2, #0
 8043282:	4640      	mov	r0, r8
 8043284:	4649      	mov	r1, r9
 8043286:	f7dd f9e7 	bl	8020658 <__aeabi_dmul>
 804328a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 804328e:	9e01      	ldr	r6, [sp, #4]
 8043290:	f10b 37ff 	add.w	r7, fp, #4294967295
 8043294:	3501      	adds	r5, #1
 8043296:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 804329a:	4628      	mov	r0, r5
 804329c:	f7dd f972 	bl	8020584 <__aeabi_i2d>
 80432a0:	4642      	mov	r2, r8
 80432a2:	464b      	mov	r3, r9
 80432a4:	f7dd f9d8 	bl	8020658 <__aeabi_dmul>
 80432a8:	4b86      	ldr	r3, [pc, #536]	; (80434c4 <_dtoa_r+0x64c>)
 80432aa:	2200      	movs	r2, #0
 80432ac:	f7dd f81e 	bl	80202ec <__adddf3>
 80432b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80432b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80432b8:	9303      	str	r3, [sp, #12]
 80432ba:	2e00      	cmp	r6, #0
 80432bc:	d158      	bne.n	8043370 <_dtoa_r+0x4f8>
 80432be:	4b82      	ldr	r3, [pc, #520]	; (80434c8 <_dtoa_r+0x650>)
 80432c0:	2200      	movs	r2, #0
 80432c2:	4640      	mov	r0, r8
 80432c4:	4649      	mov	r1, r9
 80432c6:	f7dd f80f 	bl	80202e8 <__aeabi_dsub>
 80432ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80432ce:	4680      	mov	r8, r0
 80432d0:	4689      	mov	r9, r1
 80432d2:	f7dd fc51 	bl	8020b78 <__aeabi_dcmpgt>
 80432d6:	2800      	cmp	r0, #0
 80432d8:	f040 8296 	bne.w	8043808 <_dtoa_r+0x990>
 80432dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80432e0:	4640      	mov	r0, r8
 80432e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80432e6:	4649      	mov	r1, r9
 80432e8:	f7dd fc28 	bl	8020b3c <__aeabi_dcmplt>
 80432ec:	2800      	cmp	r0, #0
 80432ee:	f040 8289 	bne.w	8043804 <_dtoa_r+0x98c>
 80432f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80432f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80432f8:	2b00      	cmp	r3, #0
 80432fa:	f2c0 814e 	blt.w	804359a <_dtoa_r+0x722>
 80432fe:	f1bb 0f0e 	cmp.w	fp, #14
 8043302:	f300 814a 	bgt.w	804359a <_dtoa_r+0x722>
 8043306:	4b6b      	ldr	r3, [pc, #428]	; (80434b4 <_dtoa_r+0x63c>)
 8043308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 804330c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8043310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8043312:	2b00      	cmp	r3, #0
 8043314:	f280 80dc 	bge.w	80434d0 <_dtoa_r+0x658>
 8043318:	9b04      	ldr	r3, [sp, #16]
 804331a:	2b00      	cmp	r3, #0
 804331c:	f300 80d8 	bgt.w	80434d0 <_dtoa_r+0x658>
 8043320:	f040 826f 	bne.w	8043802 <_dtoa_r+0x98a>
 8043324:	4b68      	ldr	r3, [pc, #416]	; (80434c8 <_dtoa_r+0x650>)
 8043326:	2200      	movs	r2, #0
 8043328:	4640      	mov	r0, r8
 804332a:	4649      	mov	r1, r9
 804332c:	f7dd f994 	bl	8020658 <__aeabi_dmul>
 8043330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8043334:	f7dd fc16 	bl	8020b64 <__aeabi_dcmpge>
 8043338:	9e04      	ldr	r6, [sp, #16]
 804333a:	4637      	mov	r7, r6
 804333c:	2800      	cmp	r0, #0
 804333e:	f040 8245 	bne.w	80437cc <_dtoa_r+0x954>
 8043342:	9d00      	ldr	r5, [sp, #0]
 8043344:	2331      	movs	r3, #49	; 0x31
 8043346:	f805 3b01 	strb.w	r3, [r5], #1
 804334a:	f10b 0b01 	add.w	fp, fp, #1
 804334e:	e241      	b.n	80437d4 <_dtoa_r+0x95c>
 8043350:	07f2      	lsls	r2, r6, #31
 8043352:	d505      	bpl.n	8043360 <_dtoa_r+0x4e8>
 8043354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8043358:	f7dd f97e 	bl	8020658 <__aeabi_dmul>
 804335c:	3501      	adds	r5, #1
 804335e:	2301      	movs	r3, #1
 8043360:	1076      	asrs	r6, r6, #1
 8043362:	3708      	adds	r7, #8
 8043364:	e773      	b.n	804324e <_dtoa_r+0x3d6>
 8043366:	2502      	movs	r5, #2
 8043368:	e775      	b.n	8043256 <_dtoa_r+0x3de>
 804336a:	9e04      	ldr	r6, [sp, #16]
 804336c:	465f      	mov	r7, fp
 804336e:	e792      	b.n	8043296 <_dtoa_r+0x41e>
 8043370:	9900      	ldr	r1, [sp, #0]
 8043372:	4b50      	ldr	r3, [pc, #320]	; (80434b4 <_dtoa_r+0x63c>)
 8043374:	ed9d 7b02 	vldr	d7, [sp, #8]
 8043378:	4431      	add	r1, r6
 804337a:	9102      	str	r1, [sp, #8]
 804337c:	9909      	ldr	r1, [sp, #36]	; 0x24
 804337e:	eeb0 9a47 	vmov.f32	s18, s14
 8043382:	eef0 9a67 	vmov.f32	s19, s15
 8043386:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 804338a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 804338e:	2900      	cmp	r1, #0
 8043390:	d044      	beq.n	804341c <_dtoa_r+0x5a4>
 8043392:	494e      	ldr	r1, [pc, #312]	; (80434cc <_dtoa_r+0x654>)
 8043394:	2000      	movs	r0, #0
 8043396:	f7dd fa89 	bl	80208ac <__aeabi_ddiv>
 804339a:	ec53 2b19 	vmov	r2, r3, d9
 804339e:	f7dc ffa3 	bl	80202e8 <__aeabi_dsub>
 80433a2:	9d00      	ldr	r5, [sp, #0]
 80433a4:	ec41 0b19 	vmov	d9, r0, r1
 80433a8:	4649      	mov	r1, r9
 80433aa:	4640      	mov	r0, r8
 80433ac:	f7dd fc04 	bl	8020bb8 <__aeabi_d2iz>
 80433b0:	4606      	mov	r6, r0
 80433b2:	f7dd f8e7 	bl	8020584 <__aeabi_i2d>
 80433b6:	4602      	mov	r2, r0
 80433b8:	460b      	mov	r3, r1
 80433ba:	4640      	mov	r0, r8
 80433bc:	4649      	mov	r1, r9
 80433be:	f7dc ff93 	bl	80202e8 <__aeabi_dsub>
 80433c2:	3630      	adds	r6, #48	; 0x30
 80433c4:	f805 6b01 	strb.w	r6, [r5], #1
 80433c8:	ec53 2b19 	vmov	r2, r3, d9
 80433cc:	4680      	mov	r8, r0
 80433ce:	4689      	mov	r9, r1
 80433d0:	f7dd fbb4 	bl	8020b3c <__aeabi_dcmplt>
 80433d4:	2800      	cmp	r0, #0
 80433d6:	d164      	bne.n	80434a2 <_dtoa_r+0x62a>
 80433d8:	4642      	mov	r2, r8
 80433da:	464b      	mov	r3, r9
 80433dc:	4937      	ldr	r1, [pc, #220]	; (80434bc <_dtoa_r+0x644>)
 80433de:	2000      	movs	r0, #0
 80433e0:	f7dc ff82 	bl	80202e8 <__aeabi_dsub>
 80433e4:	ec53 2b19 	vmov	r2, r3, d9
 80433e8:	f7dd fba8 	bl	8020b3c <__aeabi_dcmplt>
 80433ec:	2800      	cmp	r0, #0
 80433ee:	f040 80b6 	bne.w	804355e <_dtoa_r+0x6e6>
 80433f2:	9b02      	ldr	r3, [sp, #8]
 80433f4:	429d      	cmp	r5, r3
 80433f6:	f43f af7c 	beq.w	80432f2 <_dtoa_r+0x47a>
 80433fa:	4b31      	ldr	r3, [pc, #196]	; (80434c0 <_dtoa_r+0x648>)
 80433fc:	ec51 0b19 	vmov	r0, r1, d9
 8043400:	2200      	movs	r2, #0
 8043402:	f7dd f929 	bl	8020658 <__aeabi_dmul>
 8043406:	4b2e      	ldr	r3, [pc, #184]	; (80434c0 <_dtoa_r+0x648>)
 8043408:	ec41 0b19 	vmov	d9, r0, r1
 804340c:	2200      	movs	r2, #0
 804340e:	4640      	mov	r0, r8
 8043410:	4649      	mov	r1, r9
 8043412:	f7dd f921 	bl	8020658 <__aeabi_dmul>
 8043416:	4680      	mov	r8, r0
 8043418:	4689      	mov	r9, r1
 804341a:	e7c5      	b.n	80433a8 <_dtoa_r+0x530>
 804341c:	ec51 0b17 	vmov	r0, r1, d7
 8043420:	f7dd f91a 	bl	8020658 <__aeabi_dmul>
 8043424:	9b02      	ldr	r3, [sp, #8]
 8043426:	9d00      	ldr	r5, [sp, #0]
 8043428:	930f      	str	r3, [sp, #60]	; 0x3c
 804342a:	ec41 0b19 	vmov	d9, r0, r1
 804342e:	4649      	mov	r1, r9
 8043430:	4640      	mov	r0, r8
 8043432:	f7dd fbc1 	bl	8020bb8 <__aeabi_d2iz>
 8043436:	4606      	mov	r6, r0
 8043438:	f7dd f8a4 	bl	8020584 <__aeabi_i2d>
 804343c:	3630      	adds	r6, #48	; 0x30
 804343e:	4602      	mov	r2, r0
 8043440:	460b      	mov	r3, r1
 8043442:	4640      	mov	r0, r8
 8043444:	4649      	mov	r1, r9
 8043446:	f7dc ff4f 	bl	80202e8 <__aeabi_dsub>
 804344a:	f805 6b01 	strb.w	r6, [r5], #1
 804344e:	9b02      	ldr	r3, [sp, #8]
 8043450:	429d      	cmp	r5, r3
 8043452:	4680      	mov	r8, r0
 8043454:	4689      	mov	r9, r1
 8043456:	f04f 0200 	mov.w	r2, #0
 804345a:	d124      	bne.n	80434a6 <_dtoa_r+0x62e>
 804345c:	4b1b      	ldr	r3, [pc, #108]	; (80434cc <_dtoa_r+0x654>)
 804345e:	ec51 0b19 	vmov	r0, r1, d9
 8043462:	f7dc ff43 	bl	80202ec <__adddf3>
 8043466:	4602      	mov	r2, r0
 8043468:	460b      	mov	r3, r1
 804346a:	4640      	mov	r0, r8
 804346c:	4649      	mov	r1, r9
 804346e:	f7dd fb83 	bl	8020b78 <__aeabi_dcmpgt>
 8043472:	2800      	cmp	r0, #0
 8043474:	d173      	bne.n	804355e <_dtoa_r+0x6e6>
 8043476:	ec53 2b19 	vmov	r2, r3, d9
 804347a:	4914      	ldr	r1, [pc, #80]	; (80434cc <_dtoa_r+0x654>)
 804347c:	2000      	movs	r0, #0
 804347e:	f7dc ff33 	bl	80202e8 <__aeabi_dsub>
 8043482:	4602      	mov	r2, r0
 8043484:	460b      	mov	r3, r1
 8043486:	4640      	mov	r0, r8
 8043488:	4649      	mov	r1, r9
 804348a:	f7dd fb57 	bl	8020b3c <__aeabi_dcmplt>
 804348e:	2800      	cmp	r0, #0
 8043490:	f43f af2f 	beq.w	80432f2 <_dtoa_r+0x47a>
 8043494:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8043496:	1e6b      	subs	r3, r5, #1
 8043498:	930f      	str	r3, [sp, #60]	; 0x3c
 804349a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 804349e:	2b30      	cmp	r3, #48	; 0x30
 80434a0:	d0f8      	beq.n	8043494 <_dtoa_r+0x61c>
 80434a2:	46bb      	mov	fp, r7
 80434a4:	e04a      	b.n	804353c <_dtoa_r+0x6c4>
 80434a6:	4b06      	ldr	r3, [pc, #24]	; (80434c0 <_dtoa_r+0x648>)
 80434a8:	f7dd f8d6 	bl	8020658 <__aeabi_dmul>
 80434ac:	4680      	mov	r8, r0
 80434ae:	4689      	mov	r9, r1
 80434b0:	e7bd      	b.n	804342e <_dtoa_r+0x5b6>
 80434b2:	bf00      	nop
 80434b4:	0804a528 	.word	0x0804a528
 80434b8:	0804a500 	.word	0x0804a500
 80434bc:	3ff00000 	.word	0x3ff00000
 80434c0:	40240000 	.word	0x40240000
 80434c4:	401c0000 	.word	0x401c0000
 80434c8:	40140000 	.word	0x40140000
 80434cc:	3fe00000 	.word	0x3fe00000
 80434d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80434d4:	9d00      	ldr	r5, [sp, #0]
 80434d6:	4642      	mov	r2, r8
 80434d8:	464b      	mov	r3, r9
 80434da:	4630      	mov	r0, r6
 80434dc:	4639      	mov	r1, r7
 80434de:	f7dd f9e5 	bl	80208ac <__aeabi_ddiv>
 80434e2:	f7dd fb69 	bl	8020bb8 <__aeabi_d2iz>
 80434e6:	9001      	str	r0, [sp, #4]
 80434e8:	f7dd f84c 	bl	8020584 <__aeabi_i2d>
 80434ec:	4642      	mov	r2, r8
 80434ee:	464b      	mov	r3, r9
 80434f0:	f7dd f8b2 	bl	8020658 <__aeabi_dmul>
 80434f4:	4602      	mov	r2, r0
 80434f6:	460b      	mov	r3, r1
 80434f8:	4630      	mov	r0, r6
 80434fa:	4639      	mov	r1, r7
 80434fc:	f7dc fef4 	bl	80202e8 <__aeabi_dsub>
 8043500:	9e01      	ldr	r6, [sp, #4]
 8043502:	9f04      	ldr	r7, [sp, #16]
 8043504:	3630      	adds	r6, #48	; 0x30
 8043506:	f805 6b01 	strb.w	r6, [r5], #1
 804350a:	9e00      	ldr	r6, [sp, #0]
 804350c:	1bae      	subs	r6, r5, r6
 804350e:	42b7      	cmp	r7, r6
 8043510:	4602      	mov	r2, r0
 8043512:	460b      	mov	r3, r1
 8043514:	d134      	bne.n	8043580 <_dtoa_r+0x708>
 8043516:	f7dc fee9 	bl	80202ec <__adddf3>
 804351a:	4642      	mov	r2, r8
 804351c:	464b      	mov	r3, r9
 804351e:	4606      	mov	r6, r0
 8043520:	460f      	mov	r7, r1
 8043522:	f7dd fb29 	bl	8020b78 <__aeabi_dcmpgt>
 8043526:	b9c8      	cbnz	r0, 804355c <_dtoa_r+0x6e4>
 8043528:	4642      	mov	r2, r8
 804352a:	464b      	mov	r3, r9
 804352c:	4630      	mov	r0, r6
 804352e:	4639      	mov	r1, r7
 8043530:	f7dd fafa 	bl	8020b28 <__aeabi_dcmpeq>
 8043534:	b110      	cbz	r0, 804353c <_dtoa_r+0x6c4>
 8043536:	9b01      	ldr	r3, [sp, #4]
 8043538:	07db      	lsls	r3, r3, #31
 804353a:	d40f      	bmi.n	804355c <_dtoa_r+0x6e4>
 804353c:	4651      	mov	r1, sl
 804353e:	4620      	mov	r0, r4
 8043540:	f000 ff36 	bl	80443b0 <_Bfree>
 8043544:	2300      	movs	r3, #0
 8043546:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8043548:	702b      	strb	r3, [r5, #0]
 804354a:	f10b 0301 	add.w	r3, fp, #1
 804354e:	6013      	str	r3, [r2, #0]
 8043550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8043552:	2b00      	cmp	r3, #0
 8043554:	f43f ace2 	beq.w	8042f1c <_dtoa_r+0xa4>
 8043558:	601d      	str	r5, [r3, #0]
 804355a:	e4df      	b.n	8042f1c <_dtoa_r+0xa4>
 804355c:	465f      	mov	r7, fp
 804355e:	462b      	mov	r3, r5
 8043560:	461d      	mov	r5, r3
 8043562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8043566:	2a39      	cmp	r2, #57	; 0x39
 8043568:	d106      	bne.n	8043578 <_dtoa_r+0x700>
 804356a:	9a00      	ldr	r2, [sp, #0]
 804356c:	429a      	cmp	r2, r3
 804356e:	d1f7      	bne.n	8043560 <_dtoa_r+0x6e8>
 8043570:	9900      	ldr	r1, [sp, #0]
 8043572:	2230      	movs	r2, #48	; 0x30
 8043574:	3701      	adds	r7, #1
 8043576:	700a      	strb	r2, [r1, #0]
 8043578:	781a      	ldrb	r2, [r3, #0]
 804357a:	3201      	adds	r2, #1
 804357c:	701a      	strb	r2, [r3, #0]
 804357e:	e790      	b.n	80434a2 <_dtoa_r+0x62a>
 8043580:	4ba3      	ldr	r3, [pc, #652]	; (8043810 <_dtoa_r+0x998>)
 8043582:	2200      	movs	r2, #0
 8043584:	f7dd f868 	bl	8020658 <__aeabi_dmul>
 8043588:	2200      	movs	r2, #0
 804358a:	2300      	movs	r3, #0
 804358c:	4606      	mov	r6, r0
 804358e:	460f      	mov	r7, r1
 8043590:	f7dd faca 	bl	8020b28 <__aeabi_dcmpeq>
 8043594:	2800      	cmp	r0, #0
 8043596:	d09e      	beq.n	80434d6 <_dtoa_r+0x65e>
 8043598:	e7d0      	b.n	804353c <_dtoa_r+0x6c4>
 804359a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804359c:	2a00      	cmp	r2, #0
 804359e:	f000 80ca 	beq.w	8043736 <_dtoa_r+0x8be>
 80435a2:	9a07      	ldr	r2, [sp, #28]
 80435a4:	2a01      	cmp	r2, #1
 80435a6:	f300 80ad 	bgt.w	8043704 <_dtoa_r+0x88c>
 80435aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80435ac:	2a00      	cmp	r2, #0
 80435ae:	f000 80a5 	beq.w	80436fc <_dtoa_r+0x884>
 80435b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80435b6:	9e08      	ldr	r6, [sp, #32]
 80435b8:	9d05      	ldr	r5, [sp, #20]
 80435ba:	9a05      	ldr	r2, [sp, #20]
 80435bc:	441a      	add	r2, r3
 80435be:	9205      	str	r2, [sp, #20]
 80435c0:	9a06      	ldr	r2, [sp, #24]
 80435c2:	2101      	movs	r1, #1
 80435c4:	441a      	add	r2, r3
 80435c6:	4620      	mov	r0, r4
 80435c8:	9206      	str	r2, [sp, #24]
 80435ca:	f000 fff1 	bl	80445b0 <__i2b>
 80435ce:	4607      	mov	r7, r0
 80435d0:	b165      	cbz	r5, 80435ec <_dtoa_r+0x774>
 80435d2:	9b06      	ldr	r3, [sp, #24]
 80435d4:	2b00      	cmp	r3, #0
 80435d6:	dd09      	ble.n	80435ec <_dtoa_r+0x774>
 80435d8:	42ab      	cmp	r3, r5
 80435da:	9a05      	ldr	r2, [sp, #20]
 80435dc:	bfa8      	it	ge
 80435de:	462b      	movge	r3, r5
 80435e0:	1ad2      	subs	r2, r2, r3
 80435e2:	9205      	str	r2, [sp, #20]
 80435e4:	9a06      	ldr	r2, [sp, #24]
 80435e6:	1aed      	subs	r5, r5, r3
 80435e8:	1ad3      	subs	r3, r2, r3
 80435ea:	9306      	str	r3, [sp, #24]
 80435ec:	9b08      	ldr	r3, [sp, #32]
 80435ee:	b1f3      	cbz	r3, 804362e <_dtoa_r+0x7b6>
 80435f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80435f2:	2b00      	cmp	r3, #0
 80435f4:	f000 80a3 	beq.w	804373e <_dtoa_r+0x8c6>
 80435f8:	2e00      	cmp	r6, #0
 80435fa:	dd10      	ble.n	804361e <_dtoa_r+0x7a6>
 80435fc:	4639      	mov	r1, r7
 80435fe:	4632      	mov	r2, r6
 8043600:	4620      	mov	r0, r4
 8043602:	f001 f895 	bl	8044730 <__pow5mult>
 8043606:	4652      	mov	r2, sl
 8043608:	4601      	mov	r1, r0
 804360a:	4607      	mov	r7, r0
 804360c:	4620      	mov	r0, r4
 804360e:	f000 ffe5 	bl	80445dc <__multiply>
 8043612:	4651      	mov	r1, sl
 8043614:	4680      	mov	r8, r0
 8043616:	4620      	mov	r0, r4
 8043618:	f000 feca 	bl	80443b0 <_Bfree>
 804361c:	46c2      	mov	sl, r8
 804361e:	9b08      	ldr	r3, [sp, #32]
 8043620:	1b9a      	subs	r2, r3, r6
 8043622:	d004      	beq.n	804362e <_dtoa_r+0x7b6>
 8043624:	4651      	mov	r1, sl
 8043626:	4620      	mov	r0, r4
 8043628:	f001 f882 	bl	8044730 <__pow5mult>
 804362c:	4682      	mov	sl, r0
 804362e:	2101      	movs	r1, #1
 8043630:	4620      	mov	r0, r4
 8043632:	f000 ffbd 	bl	80445b0 <__i2b>
 8043636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8043638:	2b00      	cmp	r3, #0
 804363a:	4606      	mov	r6, r0
 804363c:	f340 8081 	ble.w	8043742 <_dtoa_r+0x8ca>
 8043640:	461a      	mov	r2, r3
 8043642:	4601      	mov	r1, r0
 8043644:	4620      	mov	r0, r4
 8043646:	f001 f873 	bl	8044730 <__pow5mult>
 804364a:	9b07      	ldr	r3, [sp, #28]
 804364c:	2b01      	cmp	r3, #1
 804364e:	4606      	mov	r6, r0
 8043650:	dd7a      	ble.n	8043748 <_dtoa_r+0x8d0>
 8043652:	f04f 0800 	mov.w	r8, #0
 8043656:	6933      	ldr	r3, [r6, #16]
 8043658:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 804365c:	6918      	ldr	r0, [r3, #16]
 804365e:	f000 ff59 	bl	8044514 <__hi0bits>
 8043662:	f1c0 0020 	rsb	r0, r0, #32
 8043666:	9b06      	ldr	r3, [sp, #24]
 8043668:	4418      	add	r0, r3
 804366a:	f010 001f 	ands.w	r0, r0, #31
 804366e:	f000 8094 	beq.w	804379a <_dtoa_r+0x922>
 8043672:	f1c0 0320 	rsb	r3, r0, #32
 8043676:	2b04      	cmp	r3, #4
 8043678:	f340 8085 	ble.w	8043786 <_dtoa_r+0x90e>
 804367c:	9b05      	ldr	r3, [sp, #20]
 804367e:	f1c0 001c 	rsb	r0, r0, #28
 8043682:	4403      	add	r3, r0
 8043684:	9305      	str	r3, [sp, #20]
 8043686:	9b06      	ldr	r3, [sp, #24]
 8043688:	4403      	add	r3, r0
 804368a:	4405      	add	r5, r0
 804368c:	9306      	str	r3, [sp, #24]
 804368e:	9b05      	ldr	r3, [sp, #20]
 8043690:	2b00      	cmp	r3, #0
 8043692:	dd05      	ble.n	80436a0 <_dtoa_r+0x828>
 8043694:	4651      	mov	r1, sl
 8043696:	461a      	mov	r2, r3
 8043698:	4620      	mov	r0, r4
 804369a:	f001 f8a3 	bl	80447e4 <__lshift>
 804369e:	4682      	mov	sl, r0
 80436a0:	9b06      	ldr	r3, [sp, #24]
 80436a2:	2b00      	cmp	r3, #0
 80436a4:	dd05      	ble.n	80436b2 <_dtoa_r+0x83a>
 80436a6:	4631      	mov	r1, r6
 80436a8:	461a      	mov	r2, r3
 80436aa:	4620      	mov	r0, r4
 80436ac:	f001 f89a 	bl	80447e4 <__lshift>
 80436b0:	4606      	mov	r6, r0
 80436b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80436b4:	2b00      	cmp	r3, #0
 80436b6:	d072      	beq.n	804379e <_dtoa_r+0x926>
 80436b8:	4631      	mov	r1, r6
 80436ba:	4650      	mov	r0, sl
 80436bc:	f001 f8fe 	bl	80448bc <__mcmp>
 80436c0:	2800      	cmp	r0, #0
 80436c2:	da6c      	bge.n	804379e <_dtoa_r+0x926>
 80436c4:	2300      	movs	r3, #0
 80436c6:	4651      	mov	r1, sl
 80436c8:	220a      	movs	r2, #10
 80436ca:	4620      	mov	r0, r4
 80436cc:	f000 fe92 	bl	80443f4 <__multadd>
 80436d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80436d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80436d6:	4682      	mov	sl, r0
 80436d8:	2b00      	cmp	r3, #0
 80436da:	f000 81b0 	beq.w	8043a3e <_dtoa_r+0xbc6>
 80436de:	2300      	movs	r3, #0
 80436e0:	4639      	mov	r1, r7
 80436e2:	220a      	movs	r2, #10
 80436e4:	4620      	mov	r0, r4
 80436e6:	f000 fe85 	bl	80443f4 <__multadd>
 80436ea:	9b01      	ldr	r3, [sp, #4]
 80436ec:	2b00      	cmp	r3, #0
 80436ee:	4607      	mov	r7, r0
 80436f0:	f300 8096 	bgt.w	8043820 <_dtoa_r+0x9a8>
 80436f4:	9b07      	ldr	r3, [sp, #28]
 80436f6:	2b02      	cmp	r3, #2
 80436f8:	dc59      	bgt.n	80437ae <_dtoa_r+0x936>
 80436fa:	e091      	b.n	8043820 <_dtoa_r+0x9a8>
 80436fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80436fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8043702:	e758      	b.n	80435b6 <_dtoa_r+0x73e>
 8043704:	9b04      	ldr	r3, [sp, #16]
 8043706:	1e5e      	subs	r6, r3, #1
 8043708:	9b08      	ldr	r3, [sp, #32]
 804370a:	42b3      	cmp	r3, r6
 804370c:	bfbf      	itttt	lt
 804370e:	9b08      	ldrlt	r3, [sp, #32]
 8043710:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8043712:	9608      	strlt	r6, [sp, #32]
 8043714:	1af3      	sublt	r3, r6, r3
 8043716:	bfb4      	ite	lt
 8043718:	18d2      	addlt	r2, r2, r3
 804371a:	1b9e      	subge	r6, r3, r6
 804371c:	9b04      	ldr	r3, [sp, #16]
 804371e:	bfbc      	itt	lt
 8043720:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8043722:	2600      	movlt	r6, #0
 8043724:	2b00      	cmp	r3, #0
 8043726:	bfb7      	itett	lt
 8043728:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 804372c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8043730:	1a9d      	sublt	r5, r3, r2
 8043732:	2300      	movlt	r3, #0
 8043734:	e741      	b.n	80435ba <_dtoa_r+0x742>
 8043736:	9e08      	ldr	r6, [sp, #32]
 8043738:	9d05      	ldr	r5, [sp, #20]
 804373a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 804373c:	e748      	b.n	80435d0 <_dtoa_r+0x758>
 804373e:	9a08      	ldr	r2, [sp, #32]
 8043740:	e770      	b.n	8043624 <_dtoa_r+0x7ac>
 8043742:	9b07      	ldr	r3, [sp, #28]
 8043744:	2b01      	cmp	r3, #1
 8043746:	dc19      	bgt.n	804377c <_dtoa_r+0x904>
 8043748:	9b02      	ldr	r3, [sp, #8]
 804374a:	b9bb      	cbnz	r3, 804377c <_dtoa_r+0x904>
 804374c:	9b03      	ldr	r3, [sp, #12]
 804374e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8043752:	b99b      	cbnz	r3, 804377c <_dtoa_r+0x904>
 8043754:	9b03      	ldr	r3, [sp, #12]
 8043756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804375a:	0d1b      	lsrs	r3, r3, #20
 804375c:	051b      	lsls	r3, r3, #20
 804375e:	b183      	cbz	r3, 8043782 <_dtoa_r+0x90a>
 8043760:	9b05      	ldr	r3, [sp, #20]
 8043762:	3301      	adds	r3, #1
 8043764:	9305      	str	r3, [sp, #20]
 8043766:	9b06      	ldr	r3, [sp, #24]
 8043768:	3301      	adds	r3, #1
 804376a:	9306      	str	r3, [sp, #24]
 804376c:	f04f 0801 	mov.w	r8, #1
 8043770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8043772:	2b00      	cmp	r3, #0
 8043774:	f47f af6f 	bne.w	8043656 <_dtoa_r+0x7de>
 8043778:	2001      	movs	r0, #1
 804377a:	e774      	b.n	8043666 <_dtoa_r+0x7ee>
 804377c:	f04f 0800 	mov.w	r8, #0
 8043780:	e7f6      	b.n	8043770 <_dtoa_r+0x8f8>
 8043782:	4698      	mov	r8, r3
 8043784:	e7f4      	b.n	8043770 <_dtoa_r+0x8f8>
 8043786:	d082      	beq.n	804368e <_dtoa_r+0x816>
 8043788:	9a05      	ldr	r2, [sp, #20]
 804378a:	331c      	adds	r3, #28
 804378c:	441a      	add	r2, r3
 804378e:	9205      	str	r2, [sp, #20]
 8043790:	9a06      	ldr	r2, [sp, #24]
 8043792:	441a      	add	r2, r3
 8043794:	441d      	add	r5, r3
 8043796:	9206      	str	r2, [sp, #24]
 8043798:	e779      	b.n	804368e <_dtoa_r+0x816>
 804379a:	4603      	mov	r3, r0
 804379c:	e7f4      	b.n	8043788 <_dtoa_r+0x910>
 804379e:	9b04      	ldr	r3, [sp, #16]
 80437a0:	2b00      	cmp	r3, #0
 80437a2:	dc37      	bgt.n	8043814 <_dtoa_r+0x99c>
 80437a4:	9b07      	ldr	r3, [sp, #28]
 80437a6:	2b02      	cmp	r3, #2
 80437a8:	dd34      	ble.n	8043814 <_dtoa_r+0x99c>
 80437aa:	9b04      	ldr	r3, [sp, #16]
 80437ac:	9301      	str	r3, [sp, #4]
 80437ae:	9b01      	ldr	r3, [sp, #4]
 80437b0:	b963      	cbnz	r3, 80437cc <_dtoa_r+0x954>
 80437b2:	4631      	mov	r1, r6
 80437b4:	2205      	movs	r2, #5
 80437b6:	4620      	mov	r0, r4
 80437b8:	f000 fe1c 	bl	80443f4 <__multadd>
 80437bc:	4601      	mov	r1, r0
 80437be:	4606      	mov	r6, r0
 80437c0:	4650      	mov	r0, sl
 80437c2:	f001 f87b 	bl	80448bc <__mcmp>
 80437c6:	2800      	cmp	r0, #0
 80437c8:	f73f adbb 	bgt.w	8043342 <_dtoa_r+0x4ca>
 80437cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80437ce:	9d00      	ldr	r5, [sp, #0]
 80437d0:	ea6f 0b03 	mvn.w	fp, r3
 80437d4:	f04f 0800 	mov.w	r8, #0
 80437d8:	4631      	mov	r1, r6
 80437da:	4620      	mov	r0, r4
 80437dc:	f000 fde8 	bl	80443b0 <_Bfree>
 80437e0:	2f00      	cmp	r7, #0
 80437e2:	f43f aeab 	beq.w	804353c <_dtoa_r+0x6c4>
 80437e6:	f1b8 0f00 	cmp.w	r8, #0
 80437ea:	d005      	beq.n	80437f8 <_dtoa_r+0x980>
 80437ec:	45b8      	cmp	r8, r7
 80437ee:	d003      	beq.n	80437f8 <_dtoa_r+0x980>
 80437f0:	4641      	mov	r1, r8
 80437f2:	4620      	mov	r0, r4
 80437f4:	f000 fddc 	bl	80443b0 <_Bfree>
 80437f8:	4639      	mov	r1, r7
 80437fa:	4620      	mov	r0, r4
 80437fc:	f000 fdd8 	bl	80443b0 <_Bfree>
 8043800:	e69c      	b.n	804353c <_dtoa_r+0x6c4>
 8043802:	2600      	movs	r6, #0
 8043804:	4637      	mov	r7, r6
 8043806:	e7e1      	b.n	80437cc <_dtoa_r+0x954>
 8043808:	46bb      	mov	fp, r7
 804380a:	4637      	mov	r7, r6
 804380c:	e599      	b.n	8043342 <_dtoa_r+0x4ca>
 804380e:	bf00      	nop
 8043810:	40240000 	.word	0x40240000
 8043814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8043816:	2b00      	cmp	r3, #0
 8043818:	f000 80c8 	beq.w	80439ac <_dtoa_r+0xb34>
 804381c:	9b04      	ldr	r3, [sp, #16]
 804381e:	9301      	str	r3, [sp, #4]
 8043820:	2d00      	cmp	r5, #0
 8043822:	dd05      	ble.n	8043830 <_dtoa_r+0x9b8>
 8043824:	4639      	mov	r1, r7
 8043826:	462a      	mov	r2, r5
 8043828:	4620      	mov	r0, r4
 804382a:	f000 ffdb 	bl	80447e4 <__lshift>
 804382e:	4607      	mov	r7, r0
 8043830:	f1b8 0f00 	cmp.w	r8, #0
 8043834:	d05b      	beq.n	80438ee <_dtoa_r+0xa76>
 8043836:	6879      	ldr	r1, [r7, #4]
 8043838:	4620      	mov	r0, r4
 804383a:	f000 fd79 	bl	8044330 <_Balloc>
 804383e:	4605      	mov	r5, r0
 8043840:	b928      	cbnz	r0, 804384e <_dtoa_r+0x9d6>
 8043842:	4b83      	ldr	r3, [pc, #524]	; (8043a50 <_dtoa_r+0xbd8>)
 8043844:	4602      	mov	r2, r0
 8043846:	f240 21ef 	movw	r1, #751	; 0x2ef
 804384a:	f7ff bb2e 	b.w	8042eaa <_dtoa_r+0x32>
 804384e:	693a      	ldr	r2, [r7, #16]
 8043850:	3202      	adds	r2, #2
 8043852:	0092      	lsls	r2, r2, #2
 8043854:	f107 010c 	add.w	r1, r7, #12
 8043858:	300c      	adds	r0, #12
 804385a:	f7ff fa6e 	bl	8042d3a <memcpy>
 804385e:	2201      	movs	r2, #1
 8043860:	4629      	mov	r1, r5
 8043862:	4620      	mov	r0, r4
 8043864:	f000 ffbe 	bl	80447e4 <__lshift>
 8043868:	9b00      	ldr	r3, [sp, #0]
 804386a:	3301      	adds	r3, #1
 804386c:	9304      	str	r3, [sp, #16]
 804386e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8043872:	4413      	add	r3, r2
 8043874:	9308      	str	r3, [sp, #32]
 8043876:	9b02      	ldr	r3, [sp, #8]
 8043878:	f003 0301 	and.w	r3, r3, #1
 804387c:	46b8      	mov	r8, r7
 804387e:	9306      	str	r3, [sp, #24]
 8043880:	4607      	mov	r7, r0
 8043882:	9b04      	ldr	r3, [sp, #16]
 8043884:	4631      	mov	r1, r6
 8043886:	3b01      	subs	r3, #1
 8043888:	4650      	mov	r0, sl
 804388a:	9301      	str	r3, [sp, #4]
 804388c:	f7ff fa6c 	bl	8042d68 <quorem>
 8043890:	4641      	mov	r1, r8
 8043892:	9002      	str	r0, [sp, #8]
 8043894:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8043898:	4650      	mov	r0, sl
 804389a:	f001 f80f 	bl	80448bc <__mcmp>
 804389e:	463a      	mov	r2, r7
 80438a0:	9005      	str	r0, [sp, #20]
 80438a2:	4631      	mov	r1, r6
 80438a4:	4620      	mov	r0, r4
 80438a6:	f001 f825 	bl	80448f4 <__mdiff>
 80438aa:	68c2      	ldr	r2, [r0, #12]
 80438ac:	4605      	mov	r5, r0
 80438ae:	bb02      	cbnz	r2, 80438f2 <_dtoa_r+0xa7a>
 80438b0:	4601      	mov	r1, r0
 80438b2:	4650      	mov	r0, sl
 80438b4:	f001 f802 	bl	80448bc <__mcmp>
 80438b8:	4602      	mov	r2, r0
 80438ba:	4629      	mov	r1, r5
 80438bc:	4620      	mov	r0, r4
 80438be:	9209      	str	r2, [sp, #36]	; 0x24
 80438c0:	f000 fd76 	bl	80443b0 <_Bfree>
 80438c4:	9b07      	ldr	r3, [sp, #28]
 80438c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80438c8:	9d04      	ldr	r5, [sp, #16]
 80438ca:	ea43 0102 	orr.w	r1, r3, r2
 80438ce:	9b06      	ldr	r3, [sp, #24]
 80438d0:	4319      	orrs	r1, r3
 80438d2:	d110      	bne.n	80438f6 <_dtoa_r+0xa7e>
 80438d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80438d8:	d029      	beq.n	804392e <_dtoa_r+0xab6>
 80438da:	9b05      	ldr	r3, [sp, #20]
 80438dc:	2b00      	cmp	r3, #0
 80438de:	dd02      	ble.n	80438e6 <_dtoa_r+0xa6e>
 80438e0:	9b02      	ldr	r3, [sp, #8]
 80438e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80438e6:	9b01      	ldr	r3, [sp, #4]
 80438e8:	f883 9000 	strb.w	r9, [r3]
 80438ec:	e774      	b.n	80437d8 <_dtoa_r+0x960>
 80438ee:	4638      	mov	r0, r7
 80438f0:	e7ba      	b.n	8043868 <_dtoa_r+0x9f0>
 80438f2:	2201      	movs	r2, #1
 80438f4:	e7e1      	b.n	80438ba <_dtoa_r+0xa42>
 80438f6:	9b05      	ldr	r3, [sp, #20]
 80438f8:	2b00      	cmp	r3, #0
 80438fa:	db04      	blt.n	8043906 <_dtoa_r+0xa8e>
 80438fc:	9907      	ldr	r1, [sp, #28]
 80438fe:	430b      	orrs	r3, r1
 8043900:	9906      	ldr	r1, [sp, #24]
 8043902:	430b      	orrs	r3, r1
 8043904:	d120      	bne.n	8043948 <_dtoa_r+0xad0>
 8043906:	2a00      	cmp	r2, #0
 8043908:	dded      	ble.n	80438e6 <_dtoa_r+0xa6e>
 804390a:	4651      	mov	r1, sl
 804390c:	2201      	movs	r2, #1
 804390e:	4620      	mov	r0, r4
 8043910:	f000 ff68 	bl	80447e4 <__lshift>
 8043914:	4631      	mov	r1, r6
 8043916:	4682      	mov	sl, r0
 8043918:	f000 ffd0 	bl	80448bc <__mcmp>
 804391c:	2800      	cmp	r0, #0
 804391e:	dc03      	bgt.n	8043928 <_dtoa_r+0xab0>
 8043920:	d1e1      	bne.n	80438e6 <_dtoa_r+0xa6e>
 8043922:	f019 0f01 	tst.w	r9, #1
 8043926:	d0de      	beq.n	80438e6 <_dtoa_r+0xa6e>
 8043928:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 804392c:	d1d8      	bne.n	80438e0 <_dtoa_r+0xa68>
 804392e:	9a01      	ldr	r2, [sp, #4]
 8043930:	2339      	movs	r3, #57	; 0x39
 8043932:	7013      	strb	r3, [r2, #0]
 8043934:	462b      	mov	r3, r5
 8043936:	461d      	mov	r5, r3
 8043938:	3b01      	subs	r3, #1
 804393a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 804393e:	2a39      	cmp	r2, #57	; 0x39
 8043940:	d06c      	beq.n	8043a1c <_dtoa_r+0xba4>
 8043942:	3201      	adds	r2, #1
 8043944:	701a      	strb	r2, [r3, #0]
 8043946:	e747      	b.n	80437d8 <_dtoa_r+0x960>
 8043948:	2a00      	cmp	r2, #0
 804394a:	dd07      	ble.n	804395c <_dtoa_r+0xae4>
 804394c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8043950:	d0ed      	beq.n	804392e <_dtoa_r+0xab6>
 8043952:	9a01      	ldr	r2, [sp, #4]
 8043954:	f109 0301 	add.w	r3, r9, #1
 8043958:	7013      	strb	r3, [r2, #0]
 804395a:	e73d      	b.n	80437d8 <_dtoa_r+0x960>
 804395c:	9b04      	ldr	r3, [sp, #16]
 804395e:	9a08      	ldr	r2, [sp, #32]
 8043960:	f803 9c01 	strb.w	r9, [r3, #-1]
 8043964:	4293      	cmp	r3, r2
 8043966:	d043      	beq.n	80439f0 <_dtoa_r+0xb78>
 8043968:	4651      	mov	r1, sl
 804396a:	2300      	movs	r3, #0
 804396c:	220a      	movs	r2, #10
 804396e:	4620      	mov	r0, r4
 8043970:	f000 fd40 	bl	80443f4 <__multadd>
 8043974:	45b8      	cmp	r8, r7
 8043976:	4682      	mov	sl, r0
 8043978:	f04f 0300 	mov.w	r3, #0
 804397c:	f04f 020a 	mov.w	r2, #10
 8043980:	4641      	mov	r1, r8
 8043982:	4620      	mov	r0, r4
 8043984:	d107      	bne.n	8043996 <_dtoa_r+0xb1e>
 8043986:	f000 fd35 	bl	80443f4 <__multadd>
 804398a:	4680      	mov	r8, r0
 804398c:	4607      	mov	r7, r0
 804398e:	9b04      	ldr	r3, [sp, #16]
 8043990:	3301      	adds	r3, #1
 8043992:	9304      	str	r3, [sp, #16]
 8043994:	e775      	b.n	8043882 <_dtoa_r+0xa0a>
 8043996:	f000 fd2d 	bl	80443f4 <__multadd>
 804399a:	4639      	mov	r1, r7
 804399c:	4680      	mov	r8, r0
 804399e:	2300      	movs	r3, #0
 80439a0:	220a      	movs	r2, #10
 80439a2:	4620      	mov	r0, r4
 80439a4:	f000 fd26 	bl	80443f4 <__multadd>
 80439a8:	4607      	mov	r7, r0
 80439aa:	e7f0      	b.n	804398e <_dtoa_r+0xb16>
 80439ac:	9b04      	ldr	r3, [sp, #16]
 80439ae:	9301      	str	r3, [sp, #4]
 80439b0:	9d00      	ldr	r5, [sp, #0]
 80439b2:	4631      	mov	r1, r6
 80439b4:	4650      	mov	r0, sl
 80439b6:	f7ff f9d7 	bl	8042d68 <quorem>
 80439ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80439be:	9b00      	ldr	r3, [sp, #0]
 80439c0:	f805 9b01 	strb.w	r9, [r5], #1
 80439c4:	1aea      	subs	r2, r5, r3
 80439c6:	9b01      	ldr	r3, [sp, #4]
 80439c8:	4293      	cmp	r3, r2
 80439ca:	dd07      	ble.n	80439dc <_dtoa_r+0xb64>
 80439cc:	4651      	mov	r1, sl
 80439ce:	2300      	movs	r3, #0
 80439d0:	220a      	movs	r2, #10
 80439d2:	4620      	mov	r0, r4
 80439d4:	f000 fd0e 	bl	80443f4 <__multadd>
 80439d8:	4682      	mov	sl, r0
 80439da:	e7ea      	b.n	80439b2 <_dtoa_r+0xb3a>
 80439dc:	9b01      	ldr	r3, [sp, #4]
 80439de:	2b00      	cmp	r3, #0
 80439e0:	bfc8      	it	gt
 80439e2:	461d      	movgt	r5, r3
 80439e4:	9b00      	ldr	r3, [sp, #0]
 80439e6:	bfd8      	it	le
 80439e8:	2501      	movle	r5, #1
 80439ea:	441d      	add	r5, r3
 80439ec:	f04f 0800 	mov.w	r8, #0
 80439f0:	4651      	mov	r1, sl
 80439f2:	2201      	movs	r2, #1
 80439f4:	4620      	mov	r0, r4
 80439f6:	f000 fef5 	bl	80447e4 <__lshift>
 80439fa:	4631      	mov	r1, r6
 80439fc:	4682      	mov	sl, r0
 80439fe:	f000 ff5d 	bl	80448bc <__mcmp>
 8043a02:	2800      	cmp	r0, #0
 8043a04:	dc96      	bgt.n	8043934 <_dtoa_r+0xabc>
 8043a06:	d102      	bne.n	8043a0e <_dtoa_r+0xb96>
 8043a08:	f019 0f01 	tst.w	r9, #1
 8043a0c:	d192      	bne.n	8043934 <_dtoa_r+0xabc>
 8043a0e:	462b      	mov	r3, r5
 8043a10:	461d      	mov	r5, r3
 8043a12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8043a16:	2a30      	cmp	r2, #48	; 0x30
 8043a18:	d0fa      	beq.n	8043a10 <_dtoa_r+0xb98>
 8043a1a:	e6dd      	b.n	80437d8 <_dtoa_r+0x960>
 8043a1c:	9a00      	ldr	r2, [sp, #0]
 8043a1e:	429a      	cmp	r2, r3
 8043a20:	d189      	bne.n	8043936 <_dtoa_r+0xabe>
 8043a22:	f10b 0b01 	add.w	fp, fp, #1
 8043a26:	2331      	movs	r3, #49	; 0x31
 8043a28:	e796      	b.n	8043958 <_dtoa_r+0xae0>
 8043a2a:	4b0a      	ldr	r3, [pc, #40]	; (8043a54 <_dtoa_r+0xbdc>)
 8043a2c:	f7ff ba99 	b.w	8042f62 <_dtoa_r+0xea>
 8043a30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8043a32:	2b00      	cmp	r3, #0
 8043a34:	f47f aa6d 	bne.w	8042f12 <_dtoa_r+0x9a>
 8043a38:	4b07      	ldr	r3, [pc, #28]	; (8043a58 <_dtoa_r+0xbe0>)
 8043a3a:	f7ff ba92 	b.w	8042f62 <_dtoa_r+0xea>
 8043a3e:	9b01      	ldr	r3, [sp, #4]
 8043a40:	2b00      	cmp	r3, #0
 8043a42:	dcb5      	bgt.n	80439b0 <_dtoa_r+0xb38>
 8043a44:	9b07      	ldr	r3, [sp, #28]
 8043a46:	2b02      	cmp	r3, #2
 8043a48:	f73f aeb1 	bgt.w	80437ae <_dtoa_r+0x936>
 8043a4c:	e7b0      	b.n	80439b0 <_dtoa_r+0xb38>
 8043a4e:	bf00      	nop
 8043a50:	0804a431 	.word	0x0804a431
 8043a54:	0804a389 	.word	0x0804a389
 8043a58:	0804a3b5 	.word	0x0804a3b5

08043a5c <_free_r>:
 8043a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8043a5e:	2900      	cmp	r1, #0
 8043a60:	d044      	beq.n	8043aec <_free_r+0x90>
 8043a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8043a66:	9001      	str	r0, [sp, #4]
 8043a68:	2b00      	cmp	r3, #0
 8043a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8043a6e:	bfb8      	it	lt
 8043a70:	18e4      	addlt	r4, r4, r3
 8043a72:	f000 fc51 	bl	8044318 <__malloc_lock>
 8043a76:	4a1e      	ldr	r2, [pc, #120]	; (8043af0 <_free_r+0x94>)
 8043a78:	9801      	ldr	r0, [sp, #4]
 8043a7a:	6813      	ldr	r3, [r2, #0]
 8043a7c:	b933      	cbnz	r3, 8043a8c <_free_r+0x30>
 8043a7e:	6063      	str	r3, [r4, #4]
 8043a80:	6014      	str	r4, [r2, #0]
 8043a82:	b003      	add	sp, #12
 8043a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8043a88:	f000 bc4c 	b.w	8044324 <__malloc_unlock>
 8043a8c:	42a3      	cmp	r3, r4
 8043a8e:	d908      	bls.n	8043aa2 <_free_r+0x46>
 8043a90:	6825      	ldr	r5, [r4, #0]
 8043a92:	1961      	adds	r1, r4, r5
 8043a94:	428b      	cmp	r3, r1
 8043a96:	bf01      	itttt	eq
 8043a98:	6819      	ldreq	r1, [r3, #0]
 8043a9a:	685b      	ldreq	r3, [r3, #4]
 8043a9c:	1949      	addeq	r1, r1, r5
 8043a9e:	6021      	streq	r1, [r4, #0]
 8043aa0:	e7ed      	b.n	8043a7e <_free_r+0x22>
 8043aa2:	461a      	mov	r2, r3
 8043aa4:	685b      	ldr	r3, [r3, #4]
 8043aa6:	b10b      	cbz	r3, 8043aac <_free_r+0x50>
 8043aa8:	42a3      	cmp	r3, r4
 8043aaa:	d9fa      	bls.n	8043aa2 <_free_r+0x46>
 8043aac:	6811      	ldr	r1, [r2, #0]
 8043aae:	1855      	adds	r5, r2, r1
 8043ab0:	42a5      	cmp	r5, r4
 8043ab2:	d10b      	bne.n	8043acc <_free_r+0x70>
 8043ab4:	6824      	ldr	r4, [r4, #0]
 8043ab6:	4421      	add	r1, r4
 8043ab8:	1854      	adds	r4, r2, r1
 8043aba:	42a3      	cmp	r3, r4
 8043abc:	6011      	str	r1, [r2, #0]
 8043abe:	d1e0      	bne.n	8043a82 <_free_r+0x26>
 8043ac0:	681c      	ldr	r4, [r3, #0]
 8043ac2:	685b      	ldr	r3, [r3, #4]
 8043ac4:	6053      	str	r3, [r2, #4]
 8043ac6:	440c      	add	r4, r1
 8043ac8:	6014      	str	r4, [r2, #0]
 8043aca:	e7da      	b.n	8043a82 <_free_r+0x26>
 8043acc:	d902      	bls.n	8043ad4 <_free_r+0x78>
 8043ace:	230c      	movs	r3, #12
 8043ad0:	6003      	str	r3, [r0, #0]
 8043ad2:	e7d6      	b.n	8043a82 <_free_r+0x26>
 8043ad4:	6825      	ldr	r5, [r4, #0]
 8043ad6:	1961      	adds	r1, r4, r5
 8043ad8:	428b      	cmp	r3, r1
 8043ada:	bf04      	itt	eq
 8043adc:	6819      	ldreq	r1, [r3, #0]
 8043ade:	685b      	ldreq	r3, [r3, #4]
 8043ae0:	6063      	str	r3, [r4, #4]
 8043ae2:	bf04      	itt	eq
 8043ae4:	1949      	addeq	r1, r1, r5
 8043ae6:	6021      	streq	r1, [r4, #0]
 8043ae8:	6054      	str	r4, [r2, #4]
 8043aea:	e7ca      	b.n	8043a82 <_free_r+0x26>
 8043aec:	b003      	add	sp, #12
 8043aee:	bd30      	pop	{r4, r5, pc}
 8043af0:	2001003c 	.word	0x2001003c

08043af4 <rshift>:
 8043af4:	6903      	ldr	r3, [r0, #16]
 8043af6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8043afa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8043afe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8043b02:	f100 0414 	add.w	r4, r0, #20
 8043b06:	dd45      	ble.n	8043b94 <rshift+0xa0>
 8043b08:	f011 011f 	ands.w	r1, r1, #31
 8043b0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8043b10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8043b14:	d10c      	bne.n	8043b30 <rshift+0x3c>
 8043b16:	f100 0710 	add.w	r7, r0, #16
 8043b1a:	4629      	mov	r1, r5
 8043b1c:	42b1      	cmp	r1, r6
 8043b1e:	d334      	bcc.n	8043b8a <rshift+0x96>
 8043b20:	1a9b      	subs	r3, r3, r2
 8043b22:	009b      	lsls	r3, r3, #2
 8043b24:	1eea      	subs	r2, r5, #3
 8043b26:	4296      	cmp	r6, r2
 8043b28:	bf38      	it	cc
 8043b2a:	2300      	movcc	r3, #0
 8043b2c:	4423      	add	r3, r4
 8043b2e:	e015      	b.n	8043b5c <rshift+0x68>
 8043b30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8043b34:	f1c1 0820 	rsb	r8, r1, #32
 8043b38:	40cf      	lsrs	r7, r1
 8043b3a:	f105 0e04 	add.w	lr, r5, #4
 8043b3e:	46a1      	mov	r9, r4
 8043b40:	4576      	cmp	r6, lr
 8043b42:	46f4      	mov	ip, lr
 8043b44:	d815      	bhi.n	8043b72 <rshift+0x7e>
 8043b46:	1a9a      	subs	r2, r3, r2
 8043b48:	0092      	lsls	r2, r2, #2
 8043b4a:	3a04      	subs	r2, #4
 8043b4c:	3501      	adds	r5, #1
 8043b4e:	42ae      	cmp	r6, r5
 8043b50:	bf38      	it	cc
 8043b52:	2200      	movcc	r2, #0
 8043b54:	18a3      	adds	r3, r4, r2
 8043b56:	50a7      	str	r7, [r4, r2]
 8043b58:	b107      	cbz	r7, 8043b5c <rshift+0x68>
 8043b5a:	3304      	adds	r3, #4
 8043b5c:	1b1a      	subs	r2, r3, r4
 8043b5e:	42a3      	cmp	r3, r4
 8043b60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8043b64:	bf08      	it	eq
 8043b66:	2300      	moveq	r3, #0
 8043b68:	6102      	str	r2, [r0, #16]
 8043b6a:	bf08      	it	eq
 8043b6c:	6143      	streq	r3, [r0, #20]
 8043b6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8043b72:	f8dc c000 	ldr.w	ip, [ip]
 8043b76:	fa0c fc08 	lsl.w	ip, ip, r8
 8043b7a:	ea4c 0707 	orr.w	r7, ip, r7
 8043b7e:	f849 7b04 	str.w	r7, [r9], #4
 8043b82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8043b86:	40cf      	lsrs	r7, r1
 8043b88:	e7da      	b.n	8043b40 <rshift+0x4c>
 8043b8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8043b8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8043b92:	e7c3      	b.n	8043b1c <rshift+0x28>
 8043b94:	4623      	mov	r3, r4
 8043b96:	e7e1      	b.n	8043b5c <rshift+0x68>

08043b98 <__hexdig_fun>:
 8043b98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8043b9c:	2b09      	cmp	r3, #9
 8043b9e:	d802      	bhi.n	8043ba6 <__hexdig_fun+0xe>
 8043ba0:	3820      	subs	r0, #32
 8043ba2:	b2c0      	uxtb	r0, r0
 8043ba4:	4770      	bx	lr
 8043ba6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8043baa:	2b05      	cmp	r3, #5
 8043bac:	d801      	bhi.n	8043bb2 <__hexdig_fun+0x1a>
 8043bae:	3847      	subs	r0, #71	; 0x47
 8043bb0:	e7f7      	b.n	8043ba2 <__hexdig_fun+0xa>
 8043bb2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8043bb6:	2b05      	cmp	r3, #5
 8043bb8:	d801      	bhi.n	8043bbe <__hexdig_fun+0x26>
 8043bba:	3827      	subs	r0, #39	; 0x27
 8043bbc:	e7f1      	b.n	8043ba2 <__hexdig_fun+0xa>
 8043bbe:	2000      	movs	r0, #0
 8043bc0:	4770      	bx	lr
	...

08043bc4 <__gethex>:
 8043bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8043bc8:	4617      	mov	r7, r2
 8043bca:	680a      	ldr	r2, [r1, #0]
 8043bcc:	b085      	sub	sp, #20
 8043bce:	f102 0b02 	add.w	fp, r2, #2
 8043bd2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8043bd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8043bda:	4681      	mov	r9, r0
 8043bdc:	468a      	mov	sl, r1
 8043bde:	9302      	str	r3, [sp, #8]
 8043be0:	32fe      	adds	r2, #254	; 0xfe
 8043be2:	eb02 030b 	add.w	r3, r2, fp
 8043be6:	46d8      	mov	r8, fp
 8043be8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8043bec:	9301      	str	r3, [sp, #4]
 8043bee:	2830      	cmp	r0, #48	; 0x30
 8043bf0:	d0f7      	beq.n	8043be2 <__gethex+0x1e>
 8043bf2:	f7ff ffd1 	bl	8043b98 <__hexdig_fun>
 8043bf6:	4604      	mov	r4, r0
 8043bf8:	2800      	cmp	r0, #0
 8043bfa:	d138      	bne.n	8043c6e <__gethex+0xaa>
 8043bfc:	49a7      	ldr	r1, [pc, #668]	; (8043e9c <__gethex+0x2d8>)
 8043bfe:	2201      	movs	r2, #1
 8043c00:	4640      	mov	r0, r8
 8043c02:	f7ff f809 	bl	8042c18 <strncmp>
 8043c06:	4606      	mov	r6, r0
 8043c08:	2800      	cmp	r0, #0
 8043c0a:	d169      	bne.n	8043ce0 <__gethex+0x11c>
 8043c0c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8043c10:	465d      	mov	r5, fp
 8043c12:	f7ff ffc1 	bl	8043b98 <__hexdig_fun>
 8043c16:	2800      	cmp	r0, #0
 8043c18:	d064      	beq.n	8043ce4 <__gethex+0x120>
 8043c1a:	465a      	mov	r2, fp
 8043c1c:	7810      	ldrb	r0, [r2, #0]
 8043c1e:	2830      	cmp	r0, #48	; 0x30
 8043c20:	4690      	mov	r8, r2
 8043c22:	f102 0201 	add.w	r2, r2, #1
 8043c26:	d0f9      	beq.n	8043c1c <__gethex+0x58>
 8043c28:	f7ff ffb6 	bl	8043b98 <__hexdig_fun>
 8043c2c:	2301      	movs	r3, #1
 8043c2e:	fab0 f480 	clz	r4, r0
 8043c32:	0964      	lsrs	r4, r4, #5
 8043c34:	465e      	mov	r6, fp
 8043c36:	9301      	str	r3, [sp, #4]
 8043c38:	4642      	mov	r2, r8
 8043c3a:	4615      	mov	r5, r2
 8043c3c:	3201      	adds	r2, #1
 8043c3e:	7828      	ldrb	r0, [r5, #0]
 8043c40:	f7ff ffaa 	bl	8043b98 <__hexdig_fun>
 8043c44:	2800      	cmp	r0, #0
 8043c46:	d1f8      	bne.n	8043c3a <__gethex+0x76>
 8043c48:	4994      	ldr	r1, [pc, #592]	; (8043e9c <__gethex+0x2d8>)
 8043c4a:	2201      	movs	r2, #1
 8043c4c:	4628      	mov	r0, r5
 8043c4e:	f7fe ffe3 	bl	8042c18 <strncmp>
 8043c52:	b978      	cbnz	r0, 8043c74 <__gethex+0xb0>
 8043c54:	b946      	cbnz	r6, 8043c68 <__gethex+0xa4>
 8043c56:	1c6e      	adds	r6, r5, #1
 8043c58:	4632      	mov	r2, r6
 8043c5a:	4615      	mov	r5, r2
 8043c5c:	3201      	adds	r2, #1
 8043c5e:	7828      	ldrb	r0, [r5, #0]
 8043c60:	f7ff ff9a 	bl	8043b98 <__hexdig_fun>
 8043c64:	2800      	cmp	r0, #0
 8043c66:	d1f8      	bne.n	8043c5a <__gethex+0x96>
 8043c68:	1b73      	subs	r3, r6, r5
 8043c6a:	009e      	lsls	r6, r3, #2
 8043c6c:	e004      	b.n	8043c78 <__gethex+0xb4>
 8043c6e:	2400      	movs	r4, #0
 8043c70:	4626      	mov	r6, r4
 8043c72:	e7e1      	b.n	8043c38 <__gethex+0x74>
 8043c74:	2e00      	cmp	r6, #0
 8043c76:	d1f7      	bne.n	8043c68 <__gethex+0xa4>
 8043c78:	782b      	ldrb	r3, [r5, #0]
 8043c7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8043c7e:	2b50      	cmp	r3, #80	; 0x50
 8043c80:	d13d      	bne.n	8043cfe <__gethex+0x13a>
 8043c82:	786b      	ldrb	r3, [r5, #1]
 8043c84:	2b2b      	cmp	r3, #43	; 0x2b
 8043c86:	d02f      	beq.n	8043ce8 <__gethex+0x124>
 8043c88:	2b2d      	cmp	r3, #45	; 0x2d
 8043c8a:	d031      	beq.n	8043cf0 <__gethex+0x12c>
 8043c8c:	1c69      	adds	r1, r5, #1
 8043c8e:	f04f 0b00 	mov.w	fp, #0
 8043c92:	7808      	ldrb	r0, [r1, #0]
 8043c94:	f7ff ff80 	bl	8043b98 <__hexdig_fun>
 8043c98:	1e42      	subs	r2, r0, #1
 8043c9a:	b2d2      	uxtb	r2, r2
 8043c9c:	2a18      	cmp	r2, #24
 8043c9e:	d82e      	bhi.n	8043cfe <__gethex+0x13a>
 8043ca0:	f1a0 0210 	sub.w	r2, r0, #16
 8043ca4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8043ca8:	f7ff ff76 	bl	8043b98 <__hexdig_fun>
 8043cac:	f100 3cff 	add.w	ip, r0, #4294967295
 8043cb0:	fa5f fc8c 	uxtb.w	ip, ip
 8043cb4:	f1bc 0f18 	cmp.w	ip, #24
 8043cb8:	d91d      	bls.n	8043cf6 <__gethex+0x132>
 8043cba:	f1bb 0f00 	cmp.w	fp, #0
 8043cbe:	d000      	beq.n	8043cc2 <__gethex+0xfe>
 8043cc0:	4252      	negs	r2, r2
 8043cc2:	4416      	add	r6, r2
 8043cc4:	f8ca 1000 	str.w	r1, [sl]
 8043cc8:	b1dc      	cbz	r4, 8043d02 <__gethex+0x13e>
 8043cca:	9b01      	ldr	r3, [sp, #4]
 8043ccc:	2b00      	cmp	r3, #0
 8043cce:	bf14      	ite	ne
 8043cd0:	f04f 0800 	movne.w	r8, #0
 8043cd4:	f04f 0806 	moveq.w	r8, #6
 8043cd8:	4640      	mov	r0, r8
 8043cda:	b005      	add	sp, #20
 8043cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8043ce0:	4645      	mov	r5, r8
 8043ce2:	4626      	mov	r6, r4
 8043ce4:	2401      	movs	r4, #1
 8043ce6:	e7c7      	b.n	8043c78 <__gethex+0xb4>
 8043ce8:	f04f 0b00 	mov.w	fp, #0
 8043cec:	1ca9      	adds	r1, r5, #2
 8043cee:	e7d0      	b.n	8043c92 <__gethex+0xce>
 8043cf0:	f04f 0b01 	mov.w	fp, #1
 8043cf4:	e7fa      	b.n	8043cec <__gethex+0x128>
 8043cf6:	230a      	movs	r3, #10
 8043cf8:	fb03 0002 	mla	r0, r3, r2, r0
 8043cfc:	e7d0      	b.n	8043ca0 <__gethex+0xdc>
 8043cfe:	4629      	mov	r1, r5
 8043d00:	e7e0      	b.n	8043cc4 <__gethex+0x100>
 8043d02:	eba5 0308 	sub.w	r3, r5, r8
 8043d06:	3b01      	subs	r3, #1
 8043d08:	4621      	mov	r1, r4
 8043d0a:	2b07      	cmp	r3, #7
 8043d0c:	dc0a      	bgt.n	8043d24 <__gethex+0x160>
 8043d0e:	4648      	mov	r0, r9
 8043d10:	f000 fb0e 	bl	8044330 <_Balloc>
 8043d14:	4604      	mov	r4, r0
 8043d16:	b940      	cbnz	r0, 8043d2a <__gethex+0x166>
 8043d18:	4b61      	ldr	r3, [pc, #388]	; (8043ea0 <__gethex+0x2dc>)
 8043d1a:	4602      	mov	r2, r0
 8043d1c:	21e4      	movs	r1, #228	; 0xe4
 8043d1e:	4861      	ldr	r0, [pc, #388]	; (8043ea4 <__gethex+0x2e0>)
 8043d20:	f001 f9f0 	bl	8045104 <__assert_func>
 8043d24:	3101      	adds	r1, #1
 8043d26:	105b      	asrs	r3, r3, #1
 8043d28:	e7ef      	b.n	8043d0a <__gethex+0x146>
 8043d2a:	f100 0a14 	add.w	sl, r0, #20
 8043d2e:	2300      	movs	r3, #0
 8043d30:	495a      	ldr	r1, [pc, #360]	; (8043e9c <__gethex+0x2d8>)
 8043d32:	f8cd a004 	str.w	sl, [sp, #4]
 8043d36:	469b      	mov	fp, r3
 8043d38:	45a8      	cmp	r8, r5
 8043d3a:	d342      	bcc.n	8043dc2 <__gethex+0x1fe>
 8043d3c:	9801      	ldr	r0, [sp, #4]
 8043d3e:	f840 bb04 	str.w	fp, [r0], #4
 8043d42:	eba0 000a 	sub.w	r0, r0, sl
 8043d46:	1080      	asrs	r0, r0, #2
 8043d48:	6120      	str	r0, [r4, #16]
 8043d4a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8043d4e:	4658      	mov	r0, fp
 8043d50:	f000 fbe0 	bl	8044514 <__hi0bits>
 8043d54:	683d      	ldr	r5, [r7, #0]
 8043d56:	eba8 0000 	sub.w	r0, r8, r0
 8043d5a:	42a8      	cmp	r0, r5
 8043d5c:	dd59      	ble.n	8043e12 <__gethex+0x24e>
 8043d5e:	eba0 0805 	sub.w	r8, r0, r5
 8043d62:	4641      	mov	r1, r8
 8043d64:	4620      	mov	r0, r4
 8043d66:	f000 ff6f 	bl	8044c48 <__any_on>
 8043d6a:	4683      	mov	fp, r0
 8043d6c:	b1b8      	cbz	r0, 8043d9e <__gethex+0x1da>
 8043d6e:	f108 33ff 	add.w	r3, r8, #4294967295
 8043d72:	1159      	asrs	r1, r3, #5
 8043d74:	f003 021f 	and.w	r2, r3, #31
 8043d78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8043d7c:	f04f 0b01 	mov.w	fp, #1
 8043d80:	fa0b f202 	lsl.w	r2, fp, r2
 8043d84:	420a      	tst	r2, r1
 8043d86:	d00a      	beq.n	8043d9e <__gethex+0x1da>
 8043d88:	455b      	cmp	r3, fp
 8043d8a:	dd06      	ble.n	8043d9a <__gethex+0x1d6>
 8043d8c:	f1a8 0102 	sub.w	r1, r8, #2
 8043d90:	4620      	mov	r0, r4
 8043d92:	f000 ff59 	bl	8044c48 <__any_on>
 8043d96:	2800      	cmp	r0, #0
 8043d98:	d138      	bne.n	8043e0c <__gethex+0x248>
 8043d9a:	f04f 0b02 	mov.w	fp, #2
 8043d9e:	4641      	mov	r1, r8
 8043da0:	4620      	mov	r0, r4
 8043da2:	f7ff fea7 	bl	8043af4 <rshift>
 8043da6:	4446      	add	r6, r8
 8043da8:	68bb      	ldr	r3, [r7, #8]
 8043daa:	42b3      	cmp	r3, r6
 8043dac:	da41      	bge.n	8043e32 <__gethex+0x26e>
 8043dae:	4621      	mov	r1, r4
 8043db0:	4648      	mov	r0, r9
 8043db2:	f000 fafd 	bl	80443b0 <_Bfree>
 8043db6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8043db8:	2300      	movs	r3, #0
 8043dba:	6013      	str	r3, [r2, #0]
 8043dbc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8043dc0:	e78a      	b.n	8043cd8 <__gethex+0x114>
 8043dc2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8043dc6:	2a2e      	cmp	r2, #46	; 0x2e
 8043dc8:	d014      	beq.n	8043df4 <__gethex+0x230>
 8043dca:	2b20      	cmp	r3, #32
 8043dcc:	d106      	bne.n	8043ddc <__gethex+0x218>
 8043dce:	9b01      	ldr	r3, [sp, #4]
 8043dd0:	f843 bb04 	str.w	fp, [r3], #4
 8043dd4:	f04f 0b00 	mov.w	fp, #0
 8043dd8:	9301      	str	r3, [sp, #4]
 8043dda:	465b      	mov	r3, fp
 8043ddc:	7828      	ldrb	r0, [r5, #0]
 8043dde:	9303      	str	r3, [sp, #12]
 8043de0:	f7ff feda 	bl	8043b98 <__hexdig_fun>
 8043de4:	9b03      	ldr	r3, [sp, #12]
 8043de6:	f000 000f 	and.w	r0, r0, #15
 8043dea:	4098      	lsls	r0, r3
 8043dec:	ea4b 0b00 	orr.w	fp, fp, r0
 8043df0:	3304      	adds	r3, #4
 8043df2:	e7a1      	b.n	8043d38 <__gethex+0x174>
 8043df4:	45a8      	cmp	r8, r5
 8043df6:	d8e8      	bhi.n	8043dca <__gethex+0x206>
 8043df8:	2201      	movs	r2, #1
 8043dfa:	4628      	mov	r0, r5
 8043dfc:	9303      	str	r3, [sp, #12]
 8043dfe:	f7fe ff0b 	bl	8042c18 <strncmp>
 8043e02:	4926      	ldr	r1, [pc, #152]	; (8043e9c <__gethex+0x2d8>)
 8043e04:	9b03      	ldr	r3, [sp, #12]
 8043e06:	2800      	cmp	r0, #0
 8043e08:	d1df      	bne.n	8043dca <__gethex+0x206>
 8043e0a:	e795      	b.n	8043d38 <__gethex+0x174>
 8043e0c:	f04f 0b03 	mov.w	fp, #3
 8043e10:	e7c5      	b.n	8043d9e <__gethex+0x1da>
 8043e12:	da0b      	bge.n	8043e2c <__gethex+0x268>
 8043e14:	eba5 0800 	sub.w	r8, r5, r0
 8043e18:	4621      	mov	r1, r4
 8043e1a:	4642      	mov	r2, r8
 8043e1c:	4648      	mov	r0, r9
 8043e1e:	f000 fce1 	bl	80447e4 <__lshift>
 8043e22:	eba6 0608 	sub.w	r6, r6, r8
 8043e26:	4604      	mov	r4, r0
 8043e28:	f100 0a14 	add.w	sl, r0, #20
 8043e2c:	f04f 0b00 	mov.w	fp, #0
 8043e30:	e7ba      	b.n	8043da8 <__gethex+0x1e4>
 8043e32:	687b      	ldr	r3, [r7, #4]
 8043e34:	42b3      	cmp	r3, r6
 8043e36:	dd73      	ble.n	8043f20 <__gethex+0x35c>
 8043e38:	1b9e      	subs	r6, r3, r6
 8043e3a:	42b5      	cmp	r5, r6
 8043e3c:	dc34      	bgt.n	8043ea8 <__gethex+0x2e4>
 8043e3e:	68fb      	ldr	r3, [r7, #12]
 8043e40:	2b02      	cmp	r3, #2
 8043e42:	d023      	beq.n	8043e8c <__gethex+0x2c8>
 8043e44:	2b03      	cmp	r3, #3
 8043e46:	d025      	beq.n	8043e94 <__gethex+0x2d0>
 8043e48:	2b01      	cmp	r3, #1
 8043e4a:	d115      	bne.n	8043e78 <__gethex+0x2b4>
 8043e4c:	42b5      	cmp	r5, r6
 8043e4e:	d113      	bne.n	8043e78 <__gethex+0x2b4>
 8043e50:	2d01      	cmp	r5, #1
 8043e52:	d10b      	bne.n	8043e6c <__gethex+0x2a8>
 8043e54:	9a02      	ldr	r2, [sp, #8]
 8043e56:	687b      	ldr	r3, [r7, #4]
 8043e58:	6013      	str	r3, [r2, #0]
 8043e5a:	2301      	movs	r3, #1
 8043e5c:	6123      	str	r3, [r4, #16]
 8043e5e:	f8ca 3000 	str.w	r3, [sl]
 8043e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8043e64:	f04f 0862 	mov.w	r8, #98	; 0x62
 8043e68:	601c      	str	r4, [r3, #0]
 8043e6a:	e735      	b.n	8043cd8 <__gethex+0x114>
 8043e6c:	1e69      	subs	r1, r5, #1
 8043e6e:	4620      	mov	r0, r4
 8043e70:	f000 feea 	bl	8044c48 <__any_on>
 8043e74:	2800      	cmp	r0, #0
 8043e76:	d1ed      	bne.n	8043e54 <__gethex+0x290>
 8043e78:	4621      	mov	r1, r4
 8043e7a:	4648      	mov	r0, r9
 8043e7c:	f000 fa98 	bl	80443b0 <_Bfree>
 8043e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8043e82:	2300      	movs	r3, #0
 8043e84:	6013      	str	r3, [r2, #0]
 8043e86:	f04f 0850 	mov.w	r8, #80	; 0x50
 8043e8a:	e725      	b.n	8043cd8 <__gethex+0x114>
 8043e8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8043e8e:	2b00      	cmp	r3, #0
 8043e90:	d1f2      	bne.n	8043e78 <__gethex+0x2b4>
 8043e92:	e7df      	b.n	8043e54 <__gethex+0x290>
 8043e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8043e96:	2b00      	cmp	r3, #0
 8043e98:	d1dc      	bne.n	8043e54 <__gethex+0x290>
 8043e9a:	e7ed      	b.n	8043e78 <__gethex+0x2b4>
 8043e9c:	0804a220 	.word	0x0804a220
 8043ea0:	0804a431 	.word	0x0804a431
 8043ea4:	0804a442 	.word	0x0804a442
 8043ea8:	f106 38ff 	add.w	r8, r6, #4294967295
 8043eac:	f1bb 0f00 	cmp.w	fp, #0
 8043eb0:	d133      	bne.n	8043f1a <__gethex+0x356>
 8043eb2:	f1b8 0f00 	cmp.w	r8, #0
 8043eb6:	d004      	beq.n	8043ec2 <__gethex+0x2fe>
 8043eb8:	4641      	mov	r1, r8
 8043eba:	4620      	mov	r0, r4
 8043ebc:	f000 fec4 	bl	8044c48 <__any_on>
 8043ec0:	4683      	mov	fp, r0
 8043ec2:	ea4f 1268 	mov.w	r2, r8, asr #5
 8043ec6:	2301      	movs	r3, #1
 8043ec8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8043ecc:	f008 081f 	and.w	r8, r8, #31
 8043ed0:	fa03 f308 	lsl.w	r3, r3, r8
 8043ed4:	4213      	tst	r3, r2
 8043ed6:	4631      	mov	r1, r6
 8043ed8:	4620      	mov	r0, r4
 8043eda:	bf18      	it	ne
 8043edc:	f04b 0b02 	orrne.w	fp, fp, #2
 8043ee0:	1bad      	subs	r5, r5, r6
 8043ee2:	f7ff fe07 	bl	8043af4 <rshift>
 8043ee6:	687e      	ldr	r6, [r7, #4]
 8043ee8:	f04f 0802 	mov.w	r8, #2
 8043eec:	f1bb 0f00 	cmp.w	fp, #0
 8043ef0:	d04a      	beq.n	8043f88 <__gethex+0x3c4>
 8043ef2:	68fb      	ldr	r3, [r7, #12]
 8043ef4:	2b02      	cmp	r3, #2
 8043ef6:	d016      	beq.n	8043f26 <__gethex+0x362>
 8043ef8:	2b03      	cmp	r3, #3
 8043efa:	d018      	beq.n	8043f2e <__gethex+0x36a>
 8043efc:	2b01      	cmp	r3, #1
 8043efe:	d109      	bne.n	8043f14 <__gethex+0x350>
 8043f00:	f01b 0f02 	tst.w	fp, #2
 8043f04:	d006      	beq.n	8043f14 <__gethex+0x350>
 8043f06:	f8da 3000 	ldr.w	r3, [sl]
 8043f0a:	ea4b 0b03 	orr.w	fp, fp, r3
 8043f0e:	f01b 0f01 	tst.w	fp, #1
 8043f12:	d10f      	bne.n	8043f34 <__gethex+0x370>
 8043f14:	f048 0810 	orr.w	r8, r8, #16
 8043f18:	e036      	b.n	8043f88 <__gethex+0x3c4>
 8043f1a:	f04f 0b01 	mov.w	fp, #1
 8043f1e:	e7d0      	b.n	8043ec2 <__gethex+0x2fe>
 8043f20:	f04f 0801 	mov.w	r8, #1
 8043f24:	e7e2      	b.n	8043eec <__gethex+0x328>
 8043f26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8043f28:	f1c3 0301 	rsb	r3, r3, #1
 8043f2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8043f2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8043f30:	2b00      	cmp	r3, #0
 8043f32:	d0ef      	beq.n	8043f14 <__gethex+0x350>
 8043f34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8043f38:	f104 0214 	add.w	r2, r4, #20
 8043f3c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8043f40:	9301      	str	r3, [sp, #4]
 8043f42:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8043f46:	2300      	movs	r3, #0
 8043f48:	4694      	mov	ip, r2
 8043f4a:	f852 1b04 	ldr.w	r1, [r2], #4
 8043f4e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8043f52:	d01e      	beq.n	8043f92 <__gethex+0x3ce>
 8043f54:	3101      	adds	r1, #1
 8043f56:	f8cc 1000 	str.w	r1, [ip]
 8043f5a:	f1b8 0f02 	cmp.w	r8, #2
 8043f5e:	f104 0214 	add.w	r2, r4, #20
 8043f62:	d13d      	bne.n	8043fe0 <__gethex+0x41c>
 8043f64:	683b      	ldr	r3, [r7, #0]
 8043f66:	3b01      	subs	r3, #1
 8043f68:	42ab      	cmp	r3, r5
 8043f6a:	d10b      	bne.n	8043f84 <__gethex+0x3c0>
 8043f6c:	1169      	asrs	r1, r5, #5
 8043f6e:	2301      	movs	r3, #1
 8043f70:	f005 051f 	and.w	r5, r5, #31
 8043f74:	fa03 f505 	lsl.w	r5, r3, r5
 8043f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8043f7c:	421d      	tst	r5, r3
 8043f7e:	bf18      	it	ne
 8043f80:	f04f 0801 	movne.w	r8, #1
 8043f84:	f048 0820 	orr.w	r8, r8, #32
 8043f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8043f8a:	601c      	str	r4, [r3, #0]
 8043f8c:	9b02      	ldr	r3, [sp, #8]
 8043f8e:	601e      	str	r6, [r3, #0]
 8043f90:	e6a2      	b.n	8043cd8 <__gethex+0x114>
 8043f92:	4290      	cmp	r0, r2
 8043f94:	f842 3c04 	str.w	r3, [r2, #-4]
 8043f98:	d8d6      	bhi.n	8043f48 <__gethex+0x384>
 8043f9a:	68a2      	ldr	r2, [r4, #8]
 8043f9c:	4593      	cmp	fp, r2
 8043f9e:	db17      	blt.n	8043fd0 <__gethex+0x40c>
 8043fa0:	6861      	ldr	r1, [r4, #4]
 8043fa2:	4648      	mov	r0, r9
 8043fa4:	3101      	adds	r1, #1
 8043fa6:	f000 f9c3 	bl	8044330 <_Balloc>
 8043faa:	4682      	mov	sl, r0
 8043fac:	b918      	cbnz	r0, 8043fb6 <__gethex+0x3f2>
 8043fae:	4b1b      	ldr	r3, [pc, #108]	; (804401c <__gethex+0x458>)
 8043fb0:	4602      	mov	r2, r0
 8043fb2:	2184      	movs	r1, #132	; 0x84
 8043fb4:	e6b3      	b.n	8043d1e <__gethex+0x15a>
 8043fb6:	6922      	ldr	r2, [r4, #16]
 8043fb8:	3202      	adds	r2, #2
 8043fba:	f104 010c 	add.w	r1, r4, #12
 8043fbe:	0092      	lsls	r2, r2, #2
 8043fc0:	300c      	adds	r0, #12
 8043fc2:	f7fe feba 	bl	8042d3a <memcpy>
 8043fc6:	4621      	mov	r1, r4
 8043fc8:	4648      	mov	r0, r9
 8043fca:	f000 f9f1 	bl	80443b0 <_Bfree>
 8043fce:	4654      	mov	r4, sl
 8043fd0:	6922      	ldr	r2, [r4, #16]
 8043fd2:	1c51      	adds	r1, r2, #1
 8043fd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8043fd8:	6121      	str	r1, [r4, #16]
 8043fda:	2101      	movs	r1, #1
 8043fdc:	6151      	str	r1, [r2, #20]
 8043fde:	e7bc      	b.n	8043f5a <__gethex+0x396>
 8043fe0:	6921      	ldr	r1, [r4, #16]
 8043fe2:	4559      	cmp	r1, fp
 8043fe4:	dd0b      	ble.n	8043ffe <__gethex+0x43a>
 8043fe6:	2101      	movs	r1, #1
 8043fe8:	4620      	mov	r0, r4
 8043fea:	f7ff fd83 	bl	8043af4 <rshift>
 8043fee:	68bb      	ldr	r3, [r7, #8]
 8043ff0:	3601      	adds	r6, #1
 8043ff2:	42b3      	cmp	r3, r6
 8043ff4:	f6ff aedb 	blt.w	8043dae <__gethex+0x1ea>
 8043ff8:	f04f 0801 	mov.w	r8, #1
 8043ffc:	e7c2      	b.n	8043f84 <__gethex+0x3c0>
 8043ffe:	f015 051f 	ands.w	r5, r5, #31
 8044002:	d0f9      	beq.n	8043ff8 <__gethex+0x434>
 8044004:	9b01      	ldr	r3, [sp, #4]
 8044006:	441a      	add	r2, r3
 8044008:	f1c5 0520 	rsb	r5, r5, #32
 804400c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8044010:	f000 fa80 	bl	8044514 <__hi0bits>
 8044014:	42a8      	cmp	r0, r5
 8044016:	dbe6      	blt.n	8043fe6 <__gethex+0x422>
 8044018:	e7ee      	b.n	8043ff8 <__gethex+0x434>
 804401a:	bf00      	nop
 804401c:	0804a431 	.word	0x0804a431

08044020 <L_shift>:
 8044020:	f1c2 0208 	rsb	r2, r2, #8
 8044024:	0092      	lsls	r2, r2, #2
 8044026:	b570      	push	{r4, r5, r6, lr}
 8044028:	f1c2 0620 	rsb	r6, r2, #32
 804402c:	6843      	ldr	r3, [r0, #4]
 804402e:	6804      	ldr	r4, [r0, #0]
 8044030:	fa03 f506 	lsl.w	r5, r3, r6
 8044034:	432c      	orrs	r4, r5
 8044036:	40d3      	lsrs	r3, r2
 8044038:	6004      	str	r4, [r0, #0]
 804403a:	f840 3f04 	str.w	r3, [r0, #4]!
 804403e:	4288      	cmp	r0, r1
 8044040:	d3f4      	bcc.n	804402c <L_shift+0xc>
 8044042:	bd70      	pop	{r4, r5, r6, pc}

08044044 <__match>:
 8044044:	b530      	push	{r4, r5, lr}
 8044046:	6803      	ldr	r3, [r0, #0]
 8044048:	3301      	adds	r3, #1
 804404a:	f811 4b01 	ldrb.w	r4, [r1], #1
 804404e:	b914      	cbnz	r4, 8044056 <__match+0x12>
 8044050:	6003      	str	r3, [r0, #0]
 8044052:	2001      	movs	r0, #1
 8044054:	bd30      	pop	{r4, r5, pc}
 8044056:	f813 2b01 	ldrb.w	r2, [r3], #1
 804405a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 804405e:	2d19      	cmp	r5, #25
 8044060:	bf98      	it	ls
 8044062:	3220      	addls	r2, #32
 8044064:	42a2      	cmp	r2, r4
 8044066:	d0f0      	beq.n	804404a <__match+0x6>
 8044068:	2000      	movs	r0, #0
 804406a:	e7f3      	b.n	8044054 <__match+0x10>

0804406c <__hexnan>:
 804406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044070:	680b      	ldr	r3, [r1, #0]
 8044072:	6801      	ldr	r1, [r0, #0]
 8044074:	115e      	asrs	r6, r3, #5
 8044076:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 804407a:	f013 031f 	ands.w	r3, r3, #31
 804407e:	b087      	sub	sp, #28
 8044080:	bf18      	it	ne
 8044082:	3604      	addne	r6, #4
 8044084:	2500      	movs	r5, #0
 8044086:	1f37      	subs	r7, r6, #4
 8044088:	4682      	mov	sl, r0
 804408a:	4690      	mov	r8, r2
 804408c:	9301      	str	r3, [sp, #4]
 804408e:	f846 5c04 	str.w	r5, [r6, #-4]
 8044092:	46b9      	mov	r9, r7
 8044094:	463c      	mov	r4, r7
 8044096:	9502      	str	r5, [sp, #8]
 8044098:	46ab      	mov	fp, r5
 804409a:	784a      	ldrb	r2, [r1, #1]
 804409c:	1c4b      	adds	r3, r1, #1
 804409e:	9303      	str	r3, [sp, #12]
 80440a0:	b342      	cbz	r2, 80440f4 <__hexnan+0x88>
 80440a2:	4610      	mov	r0, r2
 80440a4:	9105      	str	r1, [sp, #20]
 80440a6:	9204      	str	r2, [sp, #16]
 80440a8:	f7ff fd76 	bl	8043b98 <__hexdig_fun>
 80440ac:	2800      	cmp	r0, #0
 80440ae:	d14f      	bne.n	8044150 <__hexnan+0xe4>
 80440b0:	9a04      	ldr	r2, [sp, #16]
 80440b2:	9905      	ldr	r1, [sp, #20]
 80440b4:	2a20      	cmp	r2, #32
 80440b6:	d818      	bhi.n	80440ea <__hexnan+0x7e>
 80440b8:	9b02      	ldr	r3, [sp, #8]
 80440ba:	459b      	cmp	fp, r3
 80440bc:	dd13      	ble.n	80440e6 <__hexnan+0x7a>
 80440be:	454c      	cmp	r4, r9
 80440c0:	d206      	bcs.n	80440d0 <__hexnan+0x64>
 80440c2:	2d07      	cmp	r5, #7
 80440c4:	dc04      	bgt.n	80440d0 <__hexnan+0x64>
 80440c6:	462a      	mov	r2, r5
 80440c8:	4649      	mov	r1, r9
 80440ca:	4620      	mov	r0, r4
 80440cc:	f7ff ffa8 	bl	8044020 <L_shift>
 80440d0:	4544      	cmp	r4, r8
 80440d2:	d950      	bls.n	8044176 <__hexnan+0x10a>
 80440d4:	2300      	movs	r3, #0
 80440d6:	f1a4 0904 	sub.w	r9, r4, #4
 80440da:	f844 3c04 	str.w	r3, [r4, #-4]
 80440de:	f8cd b008 	str.w	fp, [sp, #8]
 80440e2:	464c      	mov	r4, r9
 80440e4:	461d      	mov	r5, r3
 80440e6:	9903      	ldr	r1, [sp, #12]
 80440e8:	e7d7      	b.n	804409a <__hexnan+0x2e>
 80440ea:	2a29      	cmp	r2, #41	; 0x29
 80440ec:	d155      	bne.n	804419a <__hexnan+0x12e>
 80440ee:	3102      	adds	r1, #2
 80440f0:	f8ca 1000 	str.w	r1, [sl]
 80440f4:	f1bb 0f00 	cmp.w	fp, #0
 80440f8:	d04f      	beq.n	804419a <__hexnan+0x12e>
 80440fa:	454c      	cmp	r4, r9
 80440fc:	d206      	bcs.n	804410c <__hexnan+0xa0>
 80440fe:	2d07      	cmp	r5, #7
 8044100:	dc04      	bgt.n	804410c <__hexnan+0xa0>
 8044102:	462a      	mov	r2, r5
 8044104:	4649      	mov	r1, r9
 8044106:	4620      	mov	r0, r4
 8044108:	f7ff ff8a 	bl	8044020 <L_shift>
 804410c:	4544      	cmp	r4, r8
 804410e:	d934      	bls.n	804417a <__hexnan+0x10e>
 8044110:	f1a8 0204 	sub.w	r2, r8, #4
 8044114:	4623      	mov	r3, r4
 8044116:	f853 1b04 	ldr.w	r1, [r3], #4
 804411a:	f842 1f04 	str.w	r1, [r2, #4]!
 804411e:	429f      	cmp	r7, r3
 8044120:	d2f9      	bcs.n	8044116 <__hexnan+0xaa>
 8044122:	1b3b      	subs	r3, r7, r4
 8044124:	f023 0303 	bic.w	r3, r3, #3
 8044128:	3304      	adds	r3, #4
 804412a:	3e03      	subs	r6, #3
 804412c:	3401      	adds	r4, #1
 804412e:	42a6      	cmp	r6, r4
 8044130:	bf38      	it	cc
 8044132:	2304      	movcc	r3, #4
 8044134:	4443      	add	r3, r8
 8044136:	2200      	movs	r2, #0
 8044138:	f843 2b04 	str.w	r2, [r3], #4
 804413c:	429f      	cmp	r7, r3
 804413e:	d2fb      	bcs.n	8044138 <__hexnan+0xcc>
 8044140:	683b      	ldr	r3, [r7, #0]
 8044142:	b91b      	cbnz	r3, 804414c <__hexnan+0xe0>
 8044144:	4547      	cmp	r7, r8
 8044146:	d126      	bne.n	8044196 <__hexnan+0x12a>
 8044148:	2301      	movs	r3, #1
 804414a:	603b      	str	r3, [r7, #0]
 804414c:	2005      	movs	r0, #5
 804414e:	e025      	b.n	804419c <__hexnan+0x130>
 8044150:	3501      	adds	r5, #1
 8044152:	2d08      	cmp	r5, #8
 8044154:	f10b 0b01 	add.w	fp, fp, #1
 8044158:	dd06      	ble.n	8044168 <__hexnan+0xfc>
 804415a:	4544      	cmp	r4, r8
 804415c:	d9c3      	bls.n	80440e6 <__hexnan+0x7a>
 804415e:	2300      	movs	r3, #0
 8044160:	f844 3c04 	str.w	r3, [r4, #-4]
 8044164:	2501      	movs	r5, #1
 8044166:	3c04      	subs	r4, #4
 8044168:	6822      	ldr	r2, [r4, #0]
 804416a:	f000 000f 	and.w	r0, r0, #15
 804416e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8044172:	6020      	str	r0, [r4, #0]
 8044174:	e7b7      	b.n	80440e6 <__hexnan+0x7a>
 8044176:	2508      	movs	r5, #8
 8044178:	e7b5      	b.n	80440e6 <__hexnan+0x7a>
 804417a:	9b01      	ldr	r3, [sp, #4]
 804417c:	2b00      	cmp	r3, #0
 804417e:	d0df      	beq.n	8044140 <__hexnan+0xd4>
 8044180:	f1c3 0320 	rsb	r3, r3, #32
 8044184:	f04f 32ff 	mov.w	r2, #4294967295
 8044188:	40da      	lsrs	r2, r3
 804418a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 804418e:	4013      	ands	r3, r2
 8044190:	f846 3c04 	str.w	r3, [r6, #-4]
 8044194:	e7d4      	b.n	8044140 <__hexnan+0xd4>
 8044196:	3f04      	subs	r7, #4
 8044198:	e7d2      	b.n	8044140 <__hexnan+0xd4>
 804419a:	2004      	movs	r0, #4
 804419c:	b007      	add	sp, #28
 804419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080441a4 <malloc>:
 80441a4:	4b02      	ldr	r3, [pc, #8]	; (80441b0 <malloc+0xc>)
 80441a6:	4601      	mov	r1, r0
 80441a8:	6818      	ldr	r0, [r3, #0]
 80441aa:	f000 b823 	b.w	80441f4 <_malloc_r>
 80441ae:	bf00      	nop
 80441b0:	200036c8 	.word	0x200036c8

080441b4 <sbrk_aligned>:
 80441b4:	b570      	push	{r4, r5, r6, lr}
 80441b6:	4e0e      	ldr	r6, [pc, #56]	; (80441f0 <sbrk_aligned+0x3c>)
 80441b8:	460c      	mov	r4, r1
 80441ba:	6831      	ldr	r1, [r6, #0]
 80441bc:	4605      	mov	r5, r0
 80441be:	b911      	cbnz	r1, 80441c6 <sbrk_aligned+0x12>
 80441c0:	f000 ff90 	bl	80450e4 <_sbrk_r>
 80441c4:	6030      	str	r0, [r6, #0]
 80441c6:	4621      	mov	r1, r4
 80441c8:	4628      	mov	r0, r5
 80441ca:	f000 ff8b 	bl	80450e4 <_sbrk_r>
 80441ce:	1c43      	adds	r3, r0, #1
 80441d0:	d00a      	beq.n	80441e8 <sbrk_aligned+0x34>
 80441d2:	1cc4      	adds	r4, r0, #3
 80441d4:	f024 0403 	bic.w	r4, r4, #3
 80441d8:	42a0      	cmp	r0, r4
 80441da:	d007      	beq.n	80441ec <sbrk_aligned+0x38>
 80441dc:	1a21      	subs	r1, r4, r0
 80441de:	4628      	mov	r0, r5
 80441e0:	f000 ff80 	bl	80450e4 <_sbrk_r>
 80441e4:	3001      	adds	r0, #1
 80441e6:	d101      	bne.n	80441ec <sbrk_aligned+0x38>
 80441e8:	f04f 34ff 	mov.w	r4, #4294967295
 80441ec:	4620      	mov	r0, r4
 80441ee:	bd70      	pop	{r4, r5, r6, pc}
 80441f0:	20010040 	.word	0x20010040

080441f4 <_malloc_r>:
 80441f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80441f8:	1ccd      	adds	r5, r1, #3
 80441fa:	f025 0503 	bic.w	r5, r5, #3
 80441fe:	3508      	adds	r5, #8
 8044200:	2d0c      	cmp	r5, #12
 8044202:	bf38      	it	cc
 8044204:	250c      	movcc	r5, #12
 8044206:	2d00      	cmp	r5, #0
 8044208:	4607      	mov	r7, r0
 804420a:	db01      	blt.n	8044210 <_malloc_r+0x1c>
 804420c:	42a9      	cmp	r1, r5
 804420e:	d905      	bls.n	804421c <_malloc_r+0x28>
 8044210:	230c      	movs	r3, #12
 8044212:	603b      	str	r3, [r7, #0]
 8044214:	2600      	movs	r6, #0
 8044216:	4630      	mov	r0, r6
 8044218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804421c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80442f0 <_malloc_r+0xfc>
 8044220:	f000 f87a 	bl	8044318 <__malloc_lock>
 8044224:	f8d8 3000 	ldr.w	r3, [r8]
 8044228:	461c      	mov	r4, r3
 804422a:	bb5c      	cbnz	r4, 8044284 <_malloc_r+0x90>
 804422c:	4629      	mov	r1, r5
 804422e:	4638      	mov	r0, r7
 8044230:	f7ff ffc0 	bl	80441b4 <sbrk_aligned>
 8044234:	1c43      	adds	r3, r0, #1
 8044236:	4604      	mov	r4, r0
 8044238:	d155      	bne.n	80442e6 <_malloc_r+0xf2>
 804423a:	f8d8 4000 	ldr.w	r4, [r8]
 804423e:	4626      	mov	r6, r4
 8044240:	2e00      	cmp	r6, #0
 8044242:	d145      	bne.n	80442d0 <_malloc_r+0xdc>
 8044244:	2c00      	cmp	r4, #0
 8044246:	d048      	beq.n	80442da <_malloc_r+0xe6>
 8044248:	6823      	ldr	r3, [r4, #0]
 804424a:	4631      	mov	r1, r6
 804424c:	4638      	mov	r0, r7
 804424e:	eb04 0903 	add.w	r9, r4, r3
 8044252:	f000 ff47 	bl	80450e4 <_sbrk_r>
 8044256:	4581      	cmp	r9, r0
 8044258:	d13f      	bne.n	80442da <_malloc_r+0xe6>
 804425a:	6821      	ldr	r1, [r4, #0]
 804425c:	1a6d      	subs	r5, r5, r1
 804425e:	4629      	mov	r1, r5
 8044260:	4638      	mov	r0, r7
 8044262:	f7ff ffa7 	bl	80441b4 <sbrk_aligned>
 8044266:	3001      	adds	r0, #1
 8044268:	d037      	beq.n	80442da <_malloc_r+0xe6>
 804426a:	6823      	ldr	r3, [r4, #0]
 804426c:	442b      	add	r3, r5
 804426e:	6023      	str	r3, [r4, #0]
 8044270:	f8d8 3000 	ldr.w	r3, [r8]
 8044274:	2b00      	cmp	r3, #0
 8044276:	d038      	beq.n	80442ea <_malloc_r+0xf6>
 8044278:	685a      	ldr	r2, [r3, #4]
 804427a:	42a2      	cmp	r2, r4
 804427c:	d12b      	bne.n	80442d6 <_malloc_r+0xe2>
 804427e:	2200      	movs	r2, #0
 8044280:	605a      	str	r2, [r3, #4]
 8044282:	e00f      	b.n	80442a4 <_malloc_r+0xb0>
 8044284:	6822      	ldr	r2, [r4, #0]
 8044286:	1b52      	subs	r2, r2, r5
 8044288:	d41f      	bmi.n	80442ca <_malloc_r+0xd6>
 804428a:	2a0b      	cmp	r2, #11
 804428c:	d917      	bls.n	80442be <_malloc_r+0xca>
 804428e:	1961      	adds	r1, r4, r5
 8044290:	42a3      	cmp	r3, r4
 8044292:	6025      	str	r5, [r4, #0]
 8044294:	bf18      	it	ne
 8044296:	6059      	strne	r1, [r3, #4]
 8044298:	6863      	ldr	r3, [r4, #4]
 804429a:	bf08      	it	eq
 804429c:	f8c8 1000 	streq.w	r1, [r8]
 80442a0:	5162      	str	r2, [r4, r5]
 80442a2:	604b      	str	r3, [r1, #4]
 80442a4:	4638      	mov	r0, r7
 80442a6:	f104 060b 	add.w	r6, r4, #11
 80442aa:	f000 f83b 	bl	8044324 <__malloc_unlock>
 80442ae:	f026 0607 	bic.w	r6, r6, #7
 80442b2:	1d23      	adds	r3, r4, #4
 80442b4:	1af2      	subs	r2, r6, r3
 80442b6:	d0ae      	beq.n	8044216 <_malloc_r+0x22>
 80442b8:	1b9b      	subs	r3, r3, r6
 80442ba:	50a3      	str	r3, [r4, r2]
 80442bc:	e7ab      	b.n	8044216 <_malloc_r+0x22>
 80442be:	42a3      	cmp	r3, r4
 80442c0:	6862      	ldr	r2, [r4, #4]
 80442c2:	d1dd      	bne.n	8044280 <_malloc_r+0x8c>
 80442c4:	f8c8 2000 	str.w	r2, [r8]
 80442c8:	e7ec      	b.n	80442a4 <_malloc_r+0xb0>
 80442ca:	4623      	mov	r3, r4
 80442cc:	6864      	ldr	r4, [r4, #4]
 80442ce:	e7ac      	b.n	804422a <_malloc_r+0x36>
 80442d0:	4634      	mov	r4, r6
 80442d2:	6876      	ldr	r6, [r6, #4]
 80442d4:	e7b4      	b.n	8044240 <_malloc_r+0x4c>
 80442d6:	4613      	mov	r3, r2
 80442d8:	e7cc      	b.n	8044274 <_malloc_r+0x80>
 80442da:	230c      	movs	r3, #12
 80442dc:	603b      	str	r3, [r7, #0]
 80442de:	4638      	mov	r0, r7
 80442e0:	f000 f820 	bl	8044324 <__malloc_unlock>
 80442e4:	e797      	b.n	8044216 <_malloc_r+0x22>
 80442e6:	6025      	str	r5, [r4, #0]
 80442e8:	e7dc      	b.n	80442a4 <_malloc_r+0xb0>
 80442ea:	605b      	str	r3, [r3, #4]
 80442ec:	deff      	udf	#255	; 0xff
 80442ee:	bf00      	nop
 80442f0:	2001003c 	.word	0x2001003c

080442f4 <__ascii_mbtowc>:
 80442f4:	b082      	sub	sp, #8
 80442f6:	b901      	cbnz	r1, 80442fa <__ascii_mbtowc+0x6>
 80442f8:	a901      	add	r1, sp, #4
 80442fa:	b142      	cbz	r2, 804430e <__ascii_mbtowc+0x1a>
 80442fc:	b14b      	cbz	r3, 8044312 <__ascii_mbtowc+0x1e>
 80442fe:	7813      	ldrb	r3, [r2, #0]
 8044300:	600b      	str	r3, [r1, #0]
 8044302:	7812      	ldrb	r2, [r2, #0]
 8044304:	1e10      	subs	r0, r2, #0
 8044306:	bf18      	it	ne
 8044308:	2001      	movne	r0, #1
 804430a:	b002      	add	sp, #8
 804430c:	4770      	bx	lr
 804430e:	4610      	mov	r0, r2
 8044310:	e7fb      	b.n	804430a <__ascii_mbtowc+0x16>
 8044312:	f06f 0001 	mvn.w	r0, #1
 8044316:	e7f8      	b.n	804430a <__ascii_mbtowc+0x16>

08044318 <__malloc_lock>:
 8044318:	4801      	ldr	r0, [pc, #4]	; (8044320 <__malloc_lock+0x8>)
 804431a:	f7fe bd04 	b.w	8042d26 <__retarget_lock_acquire_recursive>
 804431e:	bf00      	nop
 8044320:	20010038 	.word	0x20010038

08044324 <__malloc_unlock>:
 8044324:	4801      	ldr	r0, [pc, #4]	; (804432c <__malloc_unlock+0x8>)
 8044326:	f7fe bcff 	b.w	8042d28 <__retarget_lock_release_recursive>
 804432a:	bf00      	nop
 804432c:	20010038 	.word	0x20010038

08044330 <_Balloc>:
 8044330:	b570      	push	{r4, r5, r6, lr}
 8044332:	69c6      	ldr	r6, [r0, #28]
 8044334:	4604      	mov	r4, r0
 8044336:	460d      	mov	r5, r1
 8044338:	b976      	cbnz	r6, 8044358 <_Balloc+0x28>
 804433a:	2010      	movs	r0, #16
 804433c:	f7ff ff32 	bl	80441a4 <malloc>
 8044340:	4602      	mov	r2, r0
 8044342:	61e0      	str	r0, [r4, #28]
 8044344:	b920      	cbnz	r0, 8044350 <_Balloc+0x20>
 8044346:	4b18      	ldr	r3, [pc, #96]	; (80443a8 <_Balloc+0x78>)
 8044348:	4818      	ldr	r0, [pc, #96]	; (80443ac <_Balloc+0x7c>)
 804434a:	216b      	movs	r1, #107	; 0x6b
 804434c:	f000 feda 	bl	8045104 <__assert_func>
 8044350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8044354:	6006      	str	r6, [r0, #0]
 8044356:	60c6      	str	r6, [r0, #12]
 8044358:	69e6      	ldr	r6, [r4, #28]
 804435a:	68f3      	ldr	r3, [r6, #12]
 804435c:	b183      	cbz	r3, 8044380 <_Balloc+0x50>
 804435e:	69e3      	ldr	r3, [r4, #28]
 8044360:	68db      	ldr	r3, [r3, #12]
 8044362:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8044366:	b9b8      	cbnz	r0, 8044398 <_Balloc+0x68>
 8044368:	2101      	movs	r1, #1
 804436a:	fa01 f605 	lsl.w	r6, r1, r5
 804436e:	1d72      	adds	r2, r6, #5
 8044370:	0092      	lsls	r2, r2, #2
 8044372:	4620      	mov	r0, r4
 8044374:	f000 fee4 	bl	8045140 <_calloc_r>
 8044378:	b160      	cbz	r0, 8044394 <_Balloc+0x64>
 804437a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 804437e:	e00e      	b.n	804439e <_Balloc+0x6e>
 8044380:	2221      	movs	r2, #33	; 0x21
 8044382:	2104      	movs	r1, #4
 8044384:	4620      	mov	r0, r4
 8044386:	f000 fedb 	bl	8045140 <_calloc_r>
 804438a:	69e3      	ldr	r3, [r4, #28]
 804438c:	60f0      	str	r0, [r6, #12]
 804438e:	68db      	ldr	r3, [r3, #12]
 8044390:	2b00      	cmp	r3, #0
 8044392:	d1e4      	bne.n	804435e <_Balloc+0x2e>
 8044394:	2000      	movs	r0, #0
 8044396:	bd70      	pop	{r4, r5, r6, pc}
 8044398:	6802      	ldr	r2, [r0, #0]
 804439a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 804439e:	2300      	movs	r3, #0
 80443a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80443a4:	e7f7      	b.n	8044396 <_Balloc+0x66>
 80443a6:	bf00      	nop
 80443a8:	0804a3c2 	.word	0x0804a3c2
 80443ac:	0804a4a2 	.word	0x0804a4a2

080443b0 <_Bfree>:
 80443b0:	b570      	push	{r4, r5, r6, lr}
 80443b2:	69c6      	ldr	r6, [r0, #28]
 80443b4:	4605      	mov	r5, r0
 80443b6:	460c      	mov	r4, r1
 80443b8:	b976      	cbnz	r6, 80443d8 <_Bfree+0x28>
 80443ba:	2010      	movs	r0, #16
 80443bc:	f7ff fef2 	bl	80441a4 <malloc>
 80443c0:	4602      	mov	r2, r0
 80443c2:	61e8      	str	r0, [r5, #28]
 80443c4:	b920      	cbnz	r0, 80443d0 <_Bfree+0x20>
 80443c6:	4b09      	ldr	r3, [pc, #36]	; (80443ec <_Bfree+0x3c>)
 80443c8:	4809      	ldr	r0, [pc, #36]	; (80443f0 <_Bfree+0x40>)
 80443ca:	218f      	movs	r1, #143	; 0x8f
 80443cc:	f000 fe9a 	bl	8045104 <__assert_func>
 80443d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80443d4:	6006      	str	r6, [r0, #0]
 80443d6:	60c6      	str	r6, [r0, #12]
 80443d8:	b13c      	cbz	r4, 80443ea <_Bfree+0x3a>
 80443da:	69eb      	ldr	r3, [r5, #28]
 80443dc:	6862      	ldr	r2, [r4, #4]
 80443de:	68db      	ldr	r3, [r3, #12]
 80443e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80443e4:	6021      	str	r1, [r4, #0]
 80443e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80443ea:	bd70      	pop	{r4, r5, r6, pc}
 80443ec:	0804a3c2 	.word	0x0804a3c2
 80443f0:	0804a4a2 	.word	0x0804a4a2

080443f4 <__multadd>:
 80443f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80443f8:	690d      	ldr	r5, [r1, #16]
 80443fa:	4607      	mov	r7, r0
 80443fc:	460c      	mov	r4, r1
 80443fe:	461e      	mov	r6, r3
 8044400:	f101 0c14 	add.w	ip, r1, #20
 8044404:	2000      	movs	r0, #0
 8044406:	f8dc 3000 	ldr.w	r3, [ip]
 804440a:	b299      	uxth	r1, r3
 804440c:	fb02 6101 	mla	r1, r2, r1, r6
 8044410:	0c1e      	lsrs	r6, r3, #16
 8044412:	0c0b      	lsrs	r3, r1, #16
 8044414:	fb02 3306 	mla	r3, r2, r6, r3
 8044418:	b289      	uxth	r1, r1
 804441a:	3001      	adds	r0, #1
 804441c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8044420:	4285      	cmp	r5, r0
 8044422:	f84c 1b04 	str.w	r1, [ip], #4
 8044426:	ea4f 4613 	mov.w	r6, r3, lsr #16
 804442a:	dcec      	bgt.n	8044406 <__multadd+0x12>
 804442c:	b30e      	cbz	r6, 8044472 <__multadd+0x7e>
 804442e:	68a3      	ldr	r3, [r4, #8]
 8044430:	42ab      	cmp	r3, r5
 8044432:	dc19      	bgt.n	8044468 <__multadd+0x74>
 8044434:	6861      	ldr	r1, [r4, #4]
 8044436:	4638      	mov	r0, r7
 8044438:	3101      	adds	r1, #1
 804443a:	f7ff ff79 	bl	8044330 <_Balloc>
 804443e:	4680      	mov	r8, r0
 8044440:	b928      	cbnz	r0, 804444e <__multadd+0x5a>
 8044442:	4602      	mov	r2, r0
 8044444:	4b0c      	ldr	r3, [pc, #48]	; (8044478 <__multadd+0x84>)
 8044446:	480d      	ldr	r0, [pc, #52]	; (804447c <__multadd+0x88>)
 8044448:	21ba      	movs	r1, #186	; 0xba
 804444a:	f000 fe5b 	bl	8045104 <__assert_func>
 804444e:	6922      	ldr	r2, [r4, #16]
 8044450:	3202      	adds	r2, #2
 8044452:	f104 010c 	add.w	r1, r4, #12
 8044456:	0092      	lsls	r2, r2, #2
 8044458:	300c      	adds	r0, #12
 804445a:	f7fe fc6e 	bl	8042d3a <memcpy>
 804445e:	4621      	mov	r1, r4
 8044460:	4638      	mov	r0, r7
 8044462:	f7ff ffa5 	bl	80443b0 <_Bfree>
 8044466:	4644      	mov	r4, r8
 8044468:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 804446c:	3501      	adds	r5, #1
 804446e:	615e      	str	r6, [r3, #20]
 8044470:	6125      	str	r5, [r4, #16]
 8044472:	4620      	mov	r0, r4
 8044474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8044478:	0804a431 	.word	0x0804a431
 804447c:	0804a4a2 	.word	0x0804a4a2

08044480 <__s2b>:
 8044480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8044484:	460c      	mov	r4, r1
 8044486:	4615      	mov	r5, r2
 8044488:	461f      	mov	r7, r3
 804448a:	2209      	movs	r2, #9
 804448c:	3308      	adds	r3, #8
 804448e:	4606      	mov	r6, r0
 8044490:	fb93 f3f2 	sdiv	r3, r3, r2
 8044494:	2100      	movs	r1, #0
 8044496:	2201      	movs	r2, #1
 8044498:	429a      	cmp	r2, r3
 804449a:	db09      	blt.n	80444b0 <__s2b+0x30>
 804449c:	4630      	mov	r0, r6
 804449e:	f7ff ff47 	bl	8044330 <_Balloc>
 80444a2:	b940      	cbnz	r0, 80444b6 <__s2b+0x36>
 80444a4:	4602      	mov	r2, r0
 80444a6:	4b19      	ldr	r3, [pc, #100]	; (804450c <__s2b+0x8c>)
 80444a8:	4819      	ldr	r0, [pc, #100]	; (8044510 <__s2b+0x90>)
 80444aa:	21d3      	movs	r1, #211	; 0xd3
 80444ac:	f000 fe2a 	bl	8045104 <__assert_func>
 80444b0:	0052      	lsls	r2, r2, #1
 80444b2:	3101      	adds	r1, #1
 80444b4:	e7f0      	b.n	8044498 <__s2b+0x18>
 80444b6:	9b08      	ldr	r3, [sp, #32]
 80444b8:	6143      	str	r3, [r0, #20]
 80444ba:	2d09      	cmp	r5, #9
 80444bc:	f04f 0301 	mov.w	r3, #1
 80444c0:	6103      	str	r3, [r0, #16]
 80444c2:	dd16      	ble.n	80444f2 <__s2b+0x72>
 80444c4:	f104 0909 	add.w	r9, r4, #9
 80444c8:	46c8      	mov	r8, r9
 80444ca:	442c      	add	r4, r5
 80444cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80444d0:	4601      	mov	r1, r0
 80444d2:	3b30      	subs	r3, #48	; 0x30
 80444d4:	220a      	movs	r2, #10
 80444d6:	4630      	mov	r0, r6
 80444d8:	f7ff ff8c 	bl	80443f4 <__multadd>
 80444dc:	45a0      	cmp	r8, r4
 80444de:	d1f5      	bne.n	80444cc <__s2b+0x4c>
 80444e0:	f1a5 0408 	sub.w	r4, r5, #8
 80444e4:	444c      	add	r4, r9
 80444e6:	1b2d      	subs	r5, r5, r4
 80444e8:	1963      	adds	r3, r4, r5
 80444ea:	42bb      	cmp	r3, r7
 80444ec:	db04      	blt.n	80444f8 <__s2b+0x78>
 80444ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80444f2:	340a      	adds	r4, #10
 80444f4:	2509      	movs	r5, #9
 80444f6:	e7f6      	b.n	80444e6 <__s2b+0x66>
 80444f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80444fc:	4601      	mov	r1, r0
 80444fe:	3b30      	subs	r3, #48	; 0x30
 8044500:	220a      	movs	r2, #10
 8044502:	4630      	mov	r0, r6
 8044504:	f7ff ff76 	bl	80443f4 <__multadd>
 8044508:	e7ee      	b.n	80444e8 <__s2b+0x68>
 804450a:	bf00      	nop
 804450c:	0804a431 	.word	0x0804a431
 8044510:	0804a4a2 	.word	0x0804a4a2

08044514 <__hi0bits>:
 8044514:	0c03      	lsrs	r3, r0, #16
 8044516:	041b      	lsls	r3, r3, #16
 8044518:	b9d3      	cbnz	r3, 8044550 <__hi0bits+0x3c>
 804451a:	0400      	lsls	r0, r0, #16
 804451c:	2310      	movs	r3, #16
 804451e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8044522:	bf04      	itt	eq
 8044524:	0200      	lsleq	r0, r0, #8
 8044526:	3308      	addeq	r3, #8
 8044528:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 804452c:	bf04      	itt	eq
 804452e:	0100      	lsleq	r0, r0, #4
 8044530:	3304      	addeq	r3, #4
 8044532:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8044536:	bf04      	itt	eq
 8044538:	0080      	lsleq	r0, r0, #2
 804453a:	3302      	addeq	r3, #2
 804453c:	2800      	cmp	r0, #0
 804453e:	db05      	blt.n	804454c <__hi0bits+0x38>
 8044540:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8044544:	f103 0301 	add.w	r3, r3, #1
 8044548:	bf08      	it	eq
 804454a:	2320      	moveq	r3, #32
 804454c:	4618      	mov	r0, r3
 804454e:	4770      	bx	lr
 8044550:	2300      	movs	r3, #0
 8044552:	e7e4      	b.n	804451e <__hi0bits+0xa>

08044554 <__lo0bits>:
 8044554:	6803      	ldr	r3, [r0, #0]
 8044556:	f013 0207 	ands.w	r2, r3, #7
 804455a:	d00c      	beq.n	8044576 <__lo0bits+0x22>
 804455c:	07d9      	lsls	r1, r3, #31
 804455e:	d422      	bmi.n	80445a6 <__lo0bits+0x52>
 8044560:	079a      	lsls	r2, r3, #30
 8044562:	bf49      	itett	mi
 8044564:	085b      	lsrmi	r3, r3, #1
 8044566:	089b      	lsrpl	r3, r3, #2
 8044568:	6003      	strmi	r3, [r0, #0]
 804456a:	2201      	movmi	r2, #1
 804456c:	bf5c      	itt	pl
 804456e:	6003      	strpl	r3, [r0, #0]
 8044570:	2202      	movpl	r2, #2
 8044572:	4610      	mov	r0, r2
 8044574:	4770      	bx	lr
 8044576:	b299      	uxth	r1, r3
 8044578:	b909      	cbnz	r1, 804457e <__lo0bits+0x2a>
 804457a:	0c1b      	lsrs	r3, r3, #16
 804457c:	2210      	movs	r2, #16
 804457e:	b2d9      	uxtb	r1, r3
 8044580:	b909      	cbnz	r1, 8044586 <__lo0bits+0x32>
 8044582:	3208      	adds	r2, #8
 8044584:	0a1b      	lsrs	r3, r3, #8
 8044586:	0719      	lsls	r1, r3, #28
 8044588:	bf04      	itt	eq
 804458a:	091b      	lsreq	r3, r3, #4
 804458c:	3204      	addeq	r2, #4
 804458e:	0799      	lsls	r1, r3, #30
 8044590:	bf04      	itt	eq
 8044592:	089b      	lsreq	r3, r3, #2
 8044594:	3202      	addeq	r2, #2
 8044596:	07d9      	lsls	r1, r3, #31
 8044598:	d403      	bmi.n	80445a2 <__lo0bits+0x4e>
 804459a:	085b      	lsrs	r3, r3, #1
 804459c:	f102 0201 	add.w	r2, r2, #1
 80445a0:	d003      	beq.n	80445aa <__lo0bits+0x56>
 80445a2:	6003      	str	r3, [r0, #0]
 80445a4:	e7e5      	b.n	8044572 <__lo0bits+0x1e>
 80445a6:	2200      	movs	r2, #0
 80445a8:	e7e3      	b.n	8044572 <__lo0bits+0x1e>
 80445aa:	2220      	movs	r2, #32
 80445ac:	e7e1      	b.n	8044572 <__lo0bits+0x1e>
	...

080445b0 <__i2b>:
 80445b0:	b510      	push	{r4, lr}
 80445b2:	460c      	mov	r4, r1
 80445b4:	2101      	movs	r1, #1
 80445b6:	f7ff febb 	bl	8044330 <_Balloc>
 80445ba:	4602      	mov	r2, r0
 80445bc:	b928      	cbnz	r0, 80445ca <__i2b+0x1a>
 80445be:	4b05      	ldr	r3, [pc, #20]	; (80445d4 <__i2b+0x24>)
 80445c0:	4805      	ldr	r0, [pc, #20]	; (80445d8 <__i2b+0x28>)
 80445c2:	f240 1145 	movw	r1, #325	; 0x145
 80445c6:	f000 fd9d 	bl	8045104 <__assert_func>
 80445ca:	2301      	movs	r3, #1
 80445cc:	6144      	str	r4, [r0, #20]
 80445ce:	6103      	str	r3, [r0, #16]
 80445d0:	bd10      	pop	{r4, pc}
 80445d2:	bf00      	nop
 80445d4:	0804a431 	.word	0x0804a431
 80445d8:	0804a4a2 	.word	0x0804a4a2

080445dc <__multiply>:
 80445dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80445e0:	4691      	mov	r9, r2
 80445e2:	690a      	ldr	r2, [r1, #16]
 80445e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80445e8:	429a      	cmp	r2, r3
 80445ea:	bfb8      	it	lt
 80445ec:	460b      	movlt	r3, r1
 80445ee:	460c      	mov	r4, r1
 80445f0:	bfbc      	itt	lt
 80445f2:	464c      	movlt	r4, r9
 80445f4:	4699      	movlt	r9, r3
 80445f6:	6927      	ldr	r7, [r4, #16]
 80445f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80445fc:	68a3      	ldr	r3, [r4, #8]
 80445fe:	6861      	ldr	r1, [r4, #4]
 8044600:	eb07 060a 	add.w	r6, r7, sl
 8044604:	42b3      	cmp	r3, r6
 8044606:	b085      	sub	sp, #20
 8044608:	bfb8      	it	lt
 804460a:	3101      	addlt	r1, #1
 804460c:	f7ff fe90 	bl	8044330 <_Balloc>
 8044610:	b930      	cbnz	r0, 8044620 <__multiply+0x44>
 8044612:	4602      	mov	r2, r0
 8044614:	4b44      	ldr	r3, [pc, #272]	; (8044728 <__multiply+0x14c>)
 8044616:	4845      	ldr	r0, [pc, #276]	; (804472c <__multiply+0x150>)
 8044618:	f44f 71b1 	mov.w	r1, #354	; 0x162
 804461c:	f000 fd72 	bl	8045104 <__assert_func>
 8044620:	f100 0514 	add.w	r5, r0, #20
 8044624:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8044628:	462b      	mov	r3, r5
 804462a:	2200      	movs	r2, #0
 804462c:	4543      	cmp	r3, r8
 804462e:	d321      	bcc.n	8044674 <__multiply+0x98>
 8044630:	f104 0314 	add.w	r3, r4, #20
 8044634:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8044638:	f109 0314 	add.w	r3, r9, #20
 804463c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8044640:	9202      	str	r2, [sp, #8]
 8044642:	1b3a      	subs	r2, r7, r4
 8044644:	3a15      	subs	r2, #21
 8044646:	f022 0203 	bic.w	r2, r2, #3
 804464a:	3204      	adds	r2, #4
 804464c:	f104 0115 	add.w	r1, r4, #21
 8044650:	428f      	cmp	r7, r1
 8044652:	bf38      	it	cc
 8044654:	2204      	movcc	r2, #4
 8044656:	9201      	str	r2, [sp, #4]
 8044658:	9a02      	ldr	r2, [sp, #8]
 804465a:	9303      	str	r3, [sp, #12]
 804465c:	429a      	cmp	r2, r3
 804465e:	d80c      	bhi.n	804467a <__multiply+0x9e>
 8044660:	2e00      	cmp	r6, #0
 8044662:	dd03      	ble.n	804466c <__multiply+0x90>
 8044664:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8044668:	2b00      	cmp	r3, #0
 804466a:	d05b      	beq.n	8044724 <__multiply+0x148>
 804466c:	6106      	str	r6, [r0, #16]
 804466e:	b005      	add	sp, #20
 8044670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8044674:	f843 2b04 	str.w	r2, [r3], #4
 8044678:	e7d8      	b.n	804462c <__multiply+0x50>
 804467a:	f8b3 a000 	ldrh.w	sl, [r3]
 804467e:	f1ba 0f00 	cmp.w	sl, #0
 8044682:	d024      	beq.n	80446ce <__multiply+0xf2>
 8044684:	f104 0e14 	add.w	lr, r4, #20
 8044688:	46a9      	mov	r9, r5
 804468a:	f04f 0c00 	mov.w	ip, #0
 804468e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8044692:	f8d9 1000 	ldr.w	r1, [r9]
 8044696:	fa1f fb82 	uxth.w	fp, r2
 804469a:	b289      	uxth	r1, r1
 804469c:	fb0a 110b 	mla	r1, sl, fp, r1
 80446a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80446a4:	f8d9 2000 	ldr.w	r2, [r9]
 80446a8:	4461      	add	r1, ip
 80446aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80446ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80446b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80446b6:	b289      	uxth	r1, r1
 80446b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80446bc:	4577      	cmp	r7, lr
 80446be:	f849 1b04 	str.w	r1, [r9], #4
 80446c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80446c6:	d8e2      	bhi.n	804468e <__multiply+0xb2>
 80446c8:	9a01      	ldr	r2, [sp, #4]
 80446ca:	f845 c002 	str.w	ip, [r5, r2]
 80446ce:	9a03      	ldr	r2, [sp, #12]
 80446d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80446d4:	3304      	adds	r3, #4
 80446d6:	f1b9 0f00 	cmp.w	r9, #0
 80446da:	d021      	beq.n	8044720 <__multiply+0x144>
 80446dc:	6829      	ldr	r1, [r5, #0]
 80446de:	f104 0c14 	add.w	ip, r4, #20
 80446e2:	46ae      	mov	lr, r5
 80446e4:	f04f 0a00 	mov.w	sl, #0
 80446e8:	f8bc b000 	ldrh.w	fp, [ip]
 80446ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80446f0:	fb09 220b 	mla	r2, r9, fp, r2
 80446f4:	4452      	add	r2, sl
 80446f6:	b289      	uxth	r1, r1
 80446f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80446fc:	f84e 1b04 	str.w	r1, [lr], #4
 8044700:	f85c 1b04 	ldr.w	r1, [ip], #4
 8044704:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8044708:	f8be 1000 	ldrh.w	r1, [lr]
 804470c:	fb09 110a 	mla	r1, r9, sl, r1
 8044710:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8044714:	4567      	cmp	r7, ip
 8044716:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 804471a:	d8e5      	bhi.n	80446e8 <__multiply+0x10c>
 804471c:	9a01      	ldr	r2, [sp, #4]
 804471e:	50a9      	str	r1, [r5, r2]
 8044720:	3504      	adds	r5, #4
 8044722:	e799      	b.n	8044658 <__multiply+0x7c>
 8044724:	3e01      	subs	r6, #1
 8044726:	e79b      	b.n	8044660 <__multiply+0x84>
 8044728:	0804a431 	.word	0x0804a431
 804472c:	0804a4a2 	.word	0x0804a4a2

08044730 <__pow5mult>:
 8044730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8044734:	4615      	mov	r5, r2
 8044736:	f012 0203 	ands.w	r2, r2, #3
 804473a:	4606      	mov	r6, r0
 804473c:	460f      	mov	r7, r1
 804473e:	d007      	beq.n	8044750 <__pow5mult+0x20>
 8044740:	4c25      	ldr	r4, [pc, #148]	; (80447d8 <__pow5mult+0xa8>)
 8044742:	3a01      	subs	r2, #1
 8044744:	2300      	movs	r3, #0
 8044746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 804474a:	f7ff fe53 	bl	80443f4 <__multadd>
 804474e:	4607      	mov	r7, r0
 8044750:	10ad      	asrs	r5, r5, #2
 8044752:	d03d      	beq.n	80447d0 <__pow5mult+0xa0>
 8044754:	69f4      	ldr	r4, [r6, #28]
 8044756:	b97c      	cbnz	r4, 8044778 <__pow5mult+0x48>
 8044758:	2010      	movs	r0, #16
 804475a:	f7ff fd23 	bl	80441a4 <malloc>
 804475e:	4602      	mov	r2, r0
 8044760:	61f0      	str	r0, [r6, #28]
 8044762:	b928      	cbnz	r0, 8044770 <__pow5mult+0x40>
 8044764:	4b1d      	ldr	r3, [pc, #116]	; (80447dc <__pow5mult+0xac>)
 8044766:	481e      	ldr	r0, [pc, #120]	; (80447e0 <__pow5mult+0xb0>)
 8044768:	f240 11b3 	movw	r1, #435	; 0x1b3
 804476c:	f000 fcca 	bl	8045104 <__assert_func>
 8044770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8044774:	6004      	str	r4, [r0, #0]
 8044776:	60c4      	str	r4, [r0, #12]
 8044778:	f8d6 801c 	ldr.w	r8, [r6, #28]
 804477c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8044780:	b94c      	cbnz	r4, 8044796 <__pow5mult+0x66>
 8044782:	f240 2171 	movw	r1, #625	; 0x271
 8044786:	4630      	mov	r0, r6
 8044788:	f7ff ff12 	bl	80445b0 <__i2b>
 804478c:	2300      	movs	r3, #0
 804478e:	f8c8 0008 	str.w	r0, [r8, #8]
 8044792:	4604      	mov	r4, r0
 8044794:	6003      	str	r3, [r0, #0]
 8044796:	f04f 0900 	mov.w	r9, #0
 804479a:	07eb      	lsls	r3, r5, #31
 804479c:	d50a      	bpl.n	80447b4 <__pow5mult+0x84>
 804479e:	4639      	mov	r1, r7
 80447a0:	4622      	mov	r2, r4
 80447a2:	4630      	mov	r0, r6
 80447a4:	f7ff ff1a 	bl	80445dc <__multiply>
 80447a8:	4639      	mov	r1, r7
 80447aa:	4680      	mov	r8, r0
 80447ac:	4630      	mov	r0, r6
 80447ae:	f7ff fdff 	bl	80443b0 <_Bfree>
 80447b2:	4647      	mov	r7, r8
 80447b4:	106d      	asrs	r5, r5, #1
 80447b6:	d00b      	beq.n	80447d0 <__pow5mult+0xa0>
 80447b8:	6820      	ldr	r0, [r4, #0]
 80447ba:	b938      	cbnz	r0, 80447cc <__pow5mult+0x9c>
 80447bc:	4622      	mov	r2, r4
 80447be:	4621      	mov	r1, r4
 80447c0:	4630      	mov	r0, r6
 80447c2:	f7ff ff0b 	bl	80445dc <__multiply>
 80447c6:	6020      	str	r0, [r4, #0]
 80447c8:	f8c0 9000 	str.w	r9, [r0]
 80447cc:	4604      	mov	r4, r0
 80447ce:	e7e4      	b.n	804479a <__pow5mult+0x6a>
 80447d0:	4638      	mov	r0, r7
 80447d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80447d6:	bf00      	nop
 80447d8:	0804a5f0 	.word	0x0804a5f0
 80447dc:	0804a3c2 	.word	0x0804a3c2
 80447e0:	0804a4a2 	.word	0x0804a4a2

080447e4 <__lshift>:
 80447e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80447e8:	460c      	mov	r4, r1
 80447ea:	6849      	ldr	r1, [r1, #4]
 80447ec:	6923      	ldr	r3, [r4, #16]
 80447ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80447f2:	68a3      	ldr	r3, [r4, #8]
 80447f4:	4607      	mov	r7, r0
 80447f6:	4691      	mov	r9, r2
 80447f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80447fc:	f108 0601 	add.w	r6, r8, #1
 8044800:	42b3      	cmp	r3, r6
 8044802:	db0b      	blt.n	804481c <__lshift+0x38>
 8044804:	4638      	mov	r0, r7
 8044806:	f7ff fd93 	bl	8044330 <_Balloc>
 804480a:	4605      	mov	r5, r0
 804480c:	b948      	cbnz	r0, 8044822 <__lshift+0x3e>
 804480e:	4602      	mov	r2, r0
 8044810:	4b28      	ldr	r3, [pc, #160]	; (80448b4 <__lshift+0xd0>)
 8044812:	4829      	ldr	r0, [pc, #164]	; (80448b8 <__lshift+0xd4>)
 8044814:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8044818:	f000 fc74 	bl	8045104 <__assert_func>
 804481c:	3101      	adds	r1, #1
 804481e:	005b      	lsls	r3, r3, #1
 8044820:	e7ee      	b.n	8044800 <__lshift+0x1c>
 8044822:	2300      	movs	r3, #0
 8044824:	f100 0114 	add.w	r1, r0, #20
 8044828:	f100 0210 	add.w	r2, r0, #16
 804482c:	4618      	mov	r0, r3
 804482e:	4553      	cmp	r3, sl
 8044830:	db33      	blt.n	804489a <__lshift+0xb6>
 8044832:	6920      	ldr	r0, [r4, #16]
 8044834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8044838:	f104 0314 	add.w	r3, r4, #20
 804483c:	f019 091f 	ands.w	r9, r9, #31
 8044840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8044844:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8044848:	d02b      	beq.n	80448a2 <__lshift+0xbe>
 804484a:	f1c9 0e20 	rsb	lr, r9, #32
 804484e:	468a      	mov	sl, r1
 8044850:	2200      	movs	r2, #0
 8044852:	6818      	ldr	r0, [r3, #0]
 8044854:	fa00 f009 	lsl.w	r0, r0, r9
 8044858:	4310      	orrs	r0, r2
 804485a:	f84a 0b04 	str.w	r0, [sl], #4
 804485e:	f853 2b04 	ldr.w	r2, [r3], #4
 8044862:	459c      	cmp	ip, r3
 8044864:	fa22 f20e 	lsr.w	r2, r2, lr
 8044868:	d8f3      	bhi.n	8044852 <__lshift+0x6e>
 804486a:	ebac 0304 	sub.w	r3, ip, r4
 804486e:	3b15      	subs	r3, #21
 8044870:	f023 0303 	bic.w	r3, r3, #3
 8044874:	3304      	adds	r3, #4
 8044876:	f104 0015 	add.w	r0, r4, #21
 804487a:	4584      	cmp	ip, r0
 804487c:	bf38      	it	cc
 804487e:	2304      	movcc	r3, #4
 8044880:	50ca      	str	r2, [r1, r3]
 8044882:	b10a      	cbz	r2, 8044888 <__lshift+0xa4>
 8044884:	f108 0602 	add.w	r6, r8, #2
 8044888:	3e01      	subs	r6, #1
 804488a:	4638      	mov	r0, r7
 804488c:	612e      	str	r6, [r5, #16]
 804488e:	4621      	mov	r1, r4
 8044890:	f7ff fd8e 	bl	80443b0 <_Bfree>
 8044894:	4628      	mov	r0, r5
 8044896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804489a:	f842 0f04 	str.w	r0, [r2, #4]!
 804489e:	3301      	adds	r3, #1
 80448a0:	e7c5      	b.n	804482e <__lshift+0x4a>
 80448a2:	3904      	subs	r1, #4
 80448a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80448a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80448ac:	459c      	cmp	ip, r3
 80448ae:	d8f9      	bhi.n	80448a4 <__lshift+0xc0>
 80448b0:	e7ea      	b.n	8044888 <__lshift+0xa4>
 80448b2:	bf00      	nop
 80448b4:	0804a431 	.word	0x0804a431
 80448b8:	0804a4a2 	.word	0x0804a4a2

080448bc <__mcmp>:
 80448bc:	b530      	push	{r4, r5, lr}
 80448be:	6902      	ldr	r2, [r0, #16]
 80448c0:	690c      	ldr	r4, [r1, #16]
 80448c2:	1b12      	subs	r2, r2, r4
 80448c4:	d10e      	bne.n	80448e4 <__mcmp+0x28>
 80448c6:	f100 0314 	add.w	r3, r0, #20
 80448ca:	3114      	adds	r1, #20
 80448cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80448d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80448d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80448d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80448dc:	42a5      	cmp	r5, r4
 80448de:	d003      	beq.n	80448e8 <__mcmp+0x2c>
 80448e0:	d305      	bcc.n	80448ee <__mcmp+0x32>
 80448e2:	2201      	movs	r2, #1
 80448e4:	4610      	mov	r0, r2
 80448e6:	bd30      	pop	{r4, r5, pc}
 80448e8:	4283      	cmp	r3, r0
 80448ea:	d3f3      	bcc.n	80448d4 <__mcmp+0x18>
 80448ec:	e7fa      	b.n	80448e4 <__mcmp+0x28>
 80448ee:	f04f 32ff 	mov.w	r2, #4294967295
 80448f2:	e7f7      	b.n	80448e4 <__mcmp+0x28>

080448f4 <__mdiff>:
 80448f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80448f8:	460c      	mov	r4, r1
 80448fa:	4606      	mov	r6, r0
 80448fc:	4611      	mov	r1, r2
 80448fe:	4620      	mov	r0, r4
 8044900:	4690      	mov	r8, r2
 8044902:	f7ff ffdb 	bl	80448bc <__mcmp>
 8044906:	1e05      	subs	r5, r0, #0
 8044908:	d110      	bne.n	804492c <__mdiff+0x38>
 804490a:	4629      	mov	r1, r5
 804490c:	4630      	mov	r0, r6
 804490e:	f7ff fd0f 	bl	8044330 <_Balloc>
 8044912:	b930      	cbnz	r0, 8044922 <__mdiff+0x2e>
 8044914:	4b3a      	ldr	r3, [pc, #232]	; (8044a00 <__mdiff+0x10c>)
 8044916:	4602      	mov	r2, r0
 8044918:	f240 2137 	movw	r1, #567	; 0x237
 804491c:	4839      	ldr	r0, [pc, #228]	; (8044a04 <__mdiff+0x110>)
 804491e:	f000 fbf1 	bl	8045104 <__assert_func>
 8044922:	2301      	movs	r3, #1
 8044924:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8044928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804492c:	bfa4      	itt	ge
 804492e:	4643      	movge	r3, r8
 8044930:	46a0      	movge	r8, r4
 8044932:	4630      	mov	r0, r6
 8044934:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8044938:	bfa6      	itte	ge
 804493a:	461c      	movge	r4, r3
 804493c:	2500      	movge	r5, #0
 804493e:	2501      	movlt	r5, #1
 8044940:	f7ff fcf6 	bl	8044330 <_Balloc>
 8044944:	b920      	cbnz	r0, 8044950 <__mdiff+0x5c>
 8044946:	4b2e      	ldr	r3, [pc, #184]	; (8044a00 <__mdiff+0x10c>)
 8044948:	4602      	mov	r2, r0
 804494a:	f240 2145 	movw	r1, #581	; 0x245
 804494e:	e7e5      	b.n	804491c <__mdiff+0x28>
 8044950:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8044954:	6926      	ldr	r6, [r4, #16]
 8044956:	60c5      	str	r5, [r0, #12]
 8044958:	f104 0914 	add.w	r9, r4, #20
 804495c:	f108 0514 	add.w	r5, r8, #20
 8044960:	f100 0e14 	add.w	lr, r0, #20
 8044964:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8044968:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 804496c:	f108 0210 	add.w	r2, r8, #16
 8044970:	46f2      	mov	sl, lr
 8044972:	2100      	movs	r1, #0
 8044974:	f859 3b04 	ldr.w	r3, [r9], #4
 8044978:	f852 bf04 	ldr.w	fp, [r2, #4]!
 804497c:	fa11 f88b 	uxtah	r8, r1, fp
 8044980:	b299      	uxth	r1, r3
 8044982:	0c1b      	lsrs	r3, r3, #16
 8044984:	eba8 0801 	sub.w	r8, r8, r1
 8044988:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 804498c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8044990:	fa1f f888 	uxth.w	r8, r8
 8044994:	1419      	asrs	r1, r3, #16
 8044996:	454e      	cmp	r6, r9
 8044998:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 804499c:	f84a 3b04 	str.w	r3, [sl], #4
 80449a0:	d8e8      	bhi.n	8044974 <__mdiff+0x80>
 80449a2:	1b33      	subs	r3, r6, r4
 80449a4:	3b15      	subs	r3, #21
 80449a6:	f023 0303 	bic.w	r3, r3, #3
 80449aa:	3304      	adds	r3, #4
 80449ac:	3415      	adds	r4, #21
 80449ae:	42a6      	cmp	r6, r4
 80449b0:	bf38      	it	cc
 80449b2:	2304      	movcc	r3, #4
 80449b4:	441d      	add	r5, r3
 80449b6:	4473      	add	r3, lr
 80449b8:	469e      	mov	lr, r3
 80449ba:	462e      	mov	r6, r5
 80449bc:	4566      	cmp	r6, ip
 80449be:	d30e      	bcc.n	80449de <__mdiff+0xea>
 80449c0:	f10c 0203 	add.w	r2, ip, #3
 80449c4:	1b52      	subs	r2, r2, r5
 80449c6:	f022 0203 	bic.w	r2, r2, #3
 80449ca:	3d03      	subs	r5, #3
 80449cc:	45ac      	cmp	ip, r5
 80449ce:	bf38      	it	cc
 80449d0:	2200      	movcc	r2, #0
 80449d2:	4413      	add	r3, r2
 80449d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80449d8:	b17a      	cbz	r2, 80449fa <__mdiff+0x106>
 80449da:	6107      	str	r7, [r0, #16]
 80449dc:	e7a4      	b.n	8044928 <__mdiff+0x34>
 80449de:	f856 8b04 	ldr.w	r8, [r6], #4
 80449e2:	fa11 f288 	uxtah	r2, r1, r8
 80449e6:	1414      	asrs	r4, r2, #16
 80449e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80449ec:	b292      	uxth	r2, r2
 80449ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80449f2:	f84e 2b04 	str.w	r2, [lr], #4
 80449f6:	1421      	asrs	r1, r4, #16
 80449f8:	e7e0      	b.n	80449bc <__mdiff+0xc8>
 80449fa:	3f01      	subs	r7, #1
 80449fc:	e7ea      	b.n	80449d4 <__mdiff+0xe0>
 80449fe:	bf00      	nop
 8044a00:	0804a431 	.word	0x0804a431
 8044a04:	0804a4a2 	.word	0x0804a4a2

08044a08 <__ulp>:
 8044a08:	b082      	sub	sp, #8
 8044a0a:	ed8d 0b00 	vstr	d0, [sp]
 8044a0e:	9a01      	ldr	r2, [sp, #4]
 8044a10:	4b0f      	ldr	r3, [pc, #60]	; (8044a50 <__ulp+0x48>)
 8044a12:	4013      	ands	r3, r2
 8044a14:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8044a18:	2b00      	cmp	r3, #0
 8044a1a:	dc08      	bgt.n	8044a2e <__ulp+0x26>
 8044a1c:	425b      	negs	r3, r3
 8044a1e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8044a22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8044a26:	da04      	bge.n	8044a32 <__ulp+0x2a>
 8044a28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8044a2c:	4113      	asrs	r3, r2
 8044a2e:	2200      	movs	r2, #0
 8044a30:	e008      	b.n	8044a44 <__ulp+0x3c>
 8044a32:	f1a2 0314 	sub.w	r3, r2, #20
 8044a36:	2b1e      	cmp	r3, #30
 8044a38:	bfda      	itte	le
 8044a3a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8044a3e:	40da      	lsrle	r2, r3
 8044a40:	2201      	movgt	r2, #1
 8044a42:	2300      	movs	r3, #0
 8044a44:	4619      	mov	r1, r3
 8044a46:	4610      	mov	r0, r2
 8044a48:	ec41 0b10 	vmov	d0, r0, r1
 8044a4c:	b002      	add	sp, #8
 8044a4e:	4770      	bx	lr
 8044a50:	7ff00000 	.word	0x7ff00000

08044a54 <__b2d>:
 8044a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044a58:	6906      	ldr	r6, [r0, #16]
 8044a5a:	f100 0814 	add.w	r8, r0, #20
 8044a5e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8044a62:	1f37      	subs	r7, r6, #4
 8044a64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8044a68:	4610      	mov	r0, r2
 8044a6a:	f7ff fd53 	bl	8044514 <__hi0bits>
 8044a6e:	f1c0 0320 	rsb	r3, r0, #32
 8044a72:	280a      	cmp	r0, #10
 8044a74:	600b      	str	r3, [r1, #0]
 8044a76:	491b      	ldr	r1, [pc, #108]	; (8044ae4 <__b2d+0x90>)
 8044a78:	dc15      	bgt.n	8044aa6 <__b2d+0x52>
 8044a7a:	f1c0 0c0b 	rsb	ip, r0, #11
 8044a7e:	fa22 f30c 	lsr.w	r3, r2, ip
 8044a82:	45b8      	cmp	r8, r7
 8044a84:	ea43 0501 	orr.w	r5, r3, r1
 8044a88:	bf34      	ite	cc
 8044a8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8044a8e:	2300      	movcs	r3, #0
 8044a90:	3015      	adds	r0, #21
 8044a92:	fa02 f000 	lsl.w	r0, r2, r0
 8044a96:	fa23 f30c 	lsr.w	r3, r3, ip
 8044a9a:	4303      	orrs	r3, r0
 8044a9c:	461c      	mov	r4, r3
 8044a9e:	ec45 4b10 	vmov	d0, r4, r5
 8044aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8044aa6:	45b8      	cmp	r8, r7
 8044aa8:	bf3a      	itte	cc
 8044aaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8044aae:	f1a6 0708 	subcc.w	r7, r6, #8
 8044ab2:	2300      	movcs	r3, #0
 8044ab4:	380b      	subs	r0, #11
 8044ab6:	d012      	beq.n	8044ade <__b2d+0x8a>
 8044ab8:	f1c0 0120 	rsb	r1, r0, #32
 8044abc:	fa23 f401 	lsr.w	r4, r3, r1
 8044ac0:	4082      	lsls	r2, r0
 8044ac2:	4322      	orrs	r2, r4
 8044ac4:	4547      	cmp	r7, r8
 8044ac6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8044aca:	bf8c      	ite	hi
 8044acc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8044ad0:	2200      	movls	r2, #0
 8044ad2:	4083      	lsls	r3, r0
 8044ad4:	40ca      	lsrs	r2, r1
 8044ad6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8044ada:	4313      	orrs	r3, r2
 8044adc:	e7de      	b.n	8044a9c <__b2d+0x48>
 8044ade:	ea42 0501 	orr.w	r5, r2, r1
 8044ae2:	e7db      	b.n	8044a9c <__b2d+0x48>
 8044ae4:	3ff00000 	.word	0x3ff00000

08044ae8 <__d2b>:
 8044ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8044aec:	460f      	mov	r7, r1
 8044aee:	2101      	movs	r1, #1
 8044af0:	ec59 8b10 	vmov	r8, r9, d0
 8044af4:	4616      	mov	r6, r2
 8044af6:	f7ff fc1b 	bl	8044330 <_Balloc>
 8044afa:	4604      	mov	r4, r0
 8044afc:	b930      	cbnz	r0, 8044b0c <__d2b+0x24>
 8044afe:	4602      	mov	r2, r0
 8044b00:	4b24      	ldr	r3, [pc, #144]	; (8044b94 <__d2b+0xac>)
 8044b02:	4825      	ldr	r0, [pc, #148]	; (8044b98 <__d2b+0xb0>)
 8044b04:	f240 310f 	movw	r1, #783	; 0x30f
 8044b08:	f000 fafc 	bl	8045104 <__assert_func>
 8044b0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8044b10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8044b14:	bb2d      	cbnz	r5, 8044b62 <__d2b+0x7a>
 8044b16:	9301      	str	r3, [sp, #4]
 8044b18:	f1b8 0300 	subs.w	r3, r8, #0
 8044b1c:	d026      	beq.n	8044b6c <__d2b+0x84>
 8044b1e:	4668      	mov	r0, sp
 8044b20:	9300      	str	r3, [sp, #0]
 8044b22:	f7ff fd17 	bl	8044554 <__lo0bits>
 8044b26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8044b2a:	b1e8      	cbz	r0, 8044b68 <__d2b+0x80>
 8044b2c:	f1c0 0320 	rsb	r3, r0, #32
 8044b30:	fa02 f303 	lsl.w	r3, r2, r3
 8044b34:	430b      	orrs	r3, r1
 8044b36:	40c2      	lsrs	r2, r0
 8044b38:	6163      	str	r3, [r4, #20]
 8044b3a:	9201      	str	r2, [sp, #4]
 8044b3c:	9b01      	ldr	r3, [sp, #4]
 8044b3e:	61a3      	str	r3, [r4, #24]
 8044b40:	2b00      	cmp	r3, #0
 8044b42:	bf14      	ite	ne
 8044b44:	2202      	movne	r2, #2
 8044b46:	2201      	moveq	r2, #1
 8044b48:	6122      	str	r2, [r4, #16]
 8044b4a:	b1bd      	cbz	r5, 8044b7c <__d2b+0x94>
 8044b4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8044b50:	4405      	add	r5, r0
 8044b52:	603d      	str	r5, [r7, #0]
 8044b54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8044b58:	6030      	str	r0, [r6, #0]
 8044b5a:	4620      	mov	r0, r4
 8044b5c:	b003      	add	sp, #12
 8044b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8044b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8044b66:	e7d6      	b.n	8044b16 <__d2b+0x2e>
 8044b68:	6161      	str	r1, [r4, #20]
 8044b6a:	e7e7      	b.n	8044b3c <__d2b+0x54>
 8044b6c:	a801      	add	r0, sp, #4
 8044b6e:	f7ff fcf1 	bl	8044554 <__lo0bits>
 8044b72:	9b01      	ldr	r3, [sp, #4]
 8044b74:	6163      	str	r3, [r4, #20]
 8044b76:	3020      	adds	r0, #32
 8044b78:	2201      	movs	r2, #1
 8044b7a:	e7e5      	b.n	8044b48 <__d2b+0x60>
 8044b7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8044b80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8044b84:	6038      	str	r0, [r7, #0]
 8044b86:	6918      	ldr	r0, [r3, #16]
 8044b88:	f7ff fcc4 	bl	8044514 <__hi0bits>
 8044b8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8044b90:	e7e2      	b.n	8044b58 <__d2b+0x70>
 8044b92:	bf00      	nop
 8044b94:	0804a431 	.word	0x0804a431
 8044b98:	0804a4a2 	.word	0x0804a4a2

08044b9c <__ratio>:
 8044b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044ba0:	4688      	mov	r8, r1
 8044ba2:	4669      	mov	r1, sp
 8044ba4:	4681      	mov	r9, r0
 8044ba6:	f7ff ff55 	bl	8044a54 <__b2d>
 8044baa:	a901      	add	r1, sp, #4
 8044bac:	4640      	mov	r0, r8
 8044bae:	ec55 4b10 	vmov	r4, r5, d0
 8044bb2:	f7ff ff4f 	bl	8044a54 <__b2d>
 8044bb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8044bba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8044bbe:	eba3 0c02 	sub.w	ip, r3, r2
 8044bc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8044bc6:	1a9b      	subs	r3, r3, r2
 8044bc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8044bcc:	ec51 0b10 	vmov	r0, r1, d0
 8044bd0:	2b00      	cmp	r3, #0
 8044bd2:	bfd6      	itet	le
 8044bd4:	460a      	movle	r2, r1
 8044bd6:	462a      	movgt	r2, r5
 8044bd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8044bdc:	468b      	mov	fp, r1
 8044bde:	462f      	mov	r7, r5
 8044be0:	bfd4      	ite	le
 8044be2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8044be6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8044bea:	4620      	mov	r0, r4
 8044bec:	ee10 2a10 	vmov	r2, s0
 8044bf0:	465b      	mov	r3, fp
 8044bf2:	4639      	mov	r1, r7
 8044bf4:	f7db fe5a 	bl	80208ac <__aeabi_ddiv>
 8044bf8:	ec41 0b10 	vmov	d0, r0, r1
 8044bfc:	b003      	add	sp, #12
 8044bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08044c02 <__copybits>:
 8044c02:	3901      	subs	r1, #1
 8044c04:	b570      	push	{r4, r5, r6, lr}
 8044c06:	1149      	asrs	r1, r1, #5
 8044c08:	6914      	ldr	r4, [r2, #16]
 8044c0a:	3101      	adds	r1, #1
 8044c0c:	f102 0314 	add.w	r3, r2, #20
 8044c10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8044c14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8044c18:	1f05      	subs	r5, r0, #4
 8044c1a:	42a3      	cmp	r3, r4
 8044c1c:	d30c      	bcc.n	8044c38 <__copybits+0x36>
 8044c1e:	1aa3      	subs	r3, r4, r2
 8044c20:	3b11      	subs	r3, #17
 8044c22:	f023 0303 	bic.w	r3, r3, #3
 8044c26:	3211      	adds	r2, #17
 8044c28:	42a2      	cmp	r2, r4
 8044c2a:	bf88      	it	hi
 8044c2c:	2300      	movhi	r3, #0
 8044c2e:	4418      	add	r0, r3
 8044c30:	2300      	movs	r3, #0
 8044c32:	4288      	cmp	r0, r1
 8044c34:	d305      	bcc.n	8044c42 <__copybits+0x40>
 8044c36:	bd70      	pop	{r4, r5, r6, pc}
 8044c38:	f853 6b04 	ldr.w	r6, [r3], #4
 8044c3c:	f845 6f04 	str.w	r6, [r5, #4]!
 8044c40:	e7eb      	b.n	8044c1a <__copybits+0x18>
 8044c42:	f840 3b04 	str.w	r3, [r0], #4
 8044c46:	e7f4      	b.n	8044c32 <__copybits+0x30>

08044c48 <__any_on>:
 8044c48:	f100 0214 	add.w	r2, r0, #20
 8044c4c:	6900      	ldr	r0, [r0, #16]
 8044c4e:	114b      	asrs	r3, r1, #5
 8044c50:	4298      	cmp	r0, r3
 8044c52:	b510      	push	{r4, lr}
 8044c54:	db11      	blt.n	8044c7a <__any_on+0x32>
 8044c56:	dd0a      	ble.n	8044c6e <__any_on+0x26>
 8044c58:	f011 011f 	ands.w	r1, r1, #31
 8044c5c:	d007      	beq.n	8044c6e <__any_on+0x26>
 8044c5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8044c62:	fa24 f001 	lsr.w	r0, r4, r1
 8044c66:	fa00 f101 	lsl.w	r1, r0, r1
 8044c6a:	428c      	cmp	r4, r1
 8044c6c:	d10b      	bne.n	8044c86 <__any_on+0x3e>
 8044c6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8044c72:	4293      	cmp	r3, r2
 8044c74:	d803      	bhi.n	8044c7e <__any_on+0x36>
 8044c76:	2000      	movs	r0, #0
 8044c78:	bd10      	pop	{r4, pc}
 8044c7a:	4603      	mov	r3, r0
 8044c7c:	e7f7      	b.n	8044c6e <__any_on+0x26>
 8044c7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8044c82:	2900      	cmp	r1, #0
 8044c84:	d0f5      	beq.n	8044c72 <__any_on+0x2a>
 8044c86:	2001      	movs	r0, #1
 8044c88:	e7f6      	b.n	8044c78 <__any_on+0x30>

08044c8a <__ascii_wctomb>:
 8044c8a:	b149      	cbz	r1, 8044ca0 <__ascii_wctomb+0x16>
 8044c8c:	2aff      	cmp	r2, #255	; 0xff
 8044c8e:	bf85      	ittet	hi
 8044c90:	238a      	movhi	r3, #138	; 0x8a
 8044c92:	6003      	strhi	r3, [r0, #0]
 8044c94:	700a      	strbls	r2, [r1, #0]
 8044c96:	f04f 30ff 	movhi.w	r0, #4294967295
 8044c9a:	bf98      	it	ls
 8044c9c:	2001      	movls	r0, #1
 8044c9e:	4770      	bx	lr
 8044ca0:	4608      	mov	r0, r1
 8044ca2:	4770      	bx	lr

08044ca4 <__ssputs_r>:
 8044ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8044ca8:	688e      	ldr	r6, [r1, #8]
 8044caa:	461f      	mov	r7, r3
 8044cac:	42be      	cmp	r6, r7
 8044cae:	680b      	ldr	r3, [r1, #0]
 8044cb0:	4682      	mov	sl, r0
 8044cb2:	460c      	mov	r4, r1
 8044cb4:	4690      	mov	r8, r2
 8044cb6:	d82c      	bhi.n	8044d12 <__ssputs_r+0x6e>
 8044cb8:	898a      	ldrh	r2, [r1, #12]
 8044cba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8044cbe:	d026      	beq.n	8044d0e <__ssputs_r+0x6a>
 8044cc0:	6965      	ldr	r5, [r4, #20]
 8044cc2:	6909      	ldr	r1, [r1, #16]
 8044cc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8044cc8:	eba3 0901 	sub.w	r9, r3, r1
 8044ccc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8044cd0:	1c7b      	adds	r3, r7, #1
 8044cd2:	444b      	add	r3, r9
 8044cd4:	106d      	asrs	r5, r5, #1
 8044cd6:	429d      	cmp	r5, r3
 8044cd8:	bf38      	it	cc
 8044cda:	461d      	movcc	r5, r3
 8044cdc:	0553      	lsls	r3, r2, #21
 8044cde:	d527      	bpl.n	8044d30 <__ssputs_r+0x8c>
 8044ce0:	4629      	mov	r1, r5
 8044ce2:	f7ff fa87 	bl	80441f4 <_malloc_r>
 8044ce6:	4606      	mov	r6, r0
 8044ce8:	b360      	cbz	r0, 8044d44 <__ssputs_r+0xa0>
 8044cea:	6921      	ldr	r1, [r4, #16]
 8044cec:	464a      	mov	r2, r9
 8044cee:	f7fe f824 	bl	8042d3a <memcpy>
 8044cf2:	89a3      	ldrh	r3, [r4, #12]
 8044cf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8044cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8044cfc:	81a3      	strh	r3, [r4, #12]
 8044cfe:	6126      	str	r6, [r4, #16]
 8044d00:	6165      	str	r5, [r4, #20]
 8044d02:	444e      	add	r6, r9
 8044d04:	eba5 0509 	sub.w	r5, r5, r9
 8044d08:	6026      	str	r6, [r4, #0]
 8044d0a:	60a5      	str	r5, [r4, #8]
 8044d0c:	463e      	mov	r6, r7
 8044d0e:	42be      	cmp	r6, r7
 8044d10:	d900      	bls.n	8044d14 <__ssputs_r+0x70>
 8044d12:	463e      	mov	r6, r7
 8044d14:	6820      	ldr	r0, [r4, #0]
 8044d16:	4632      	mov	r2, r6
 8044d18:	4641      	mov	r1, r8
 8044d1a:	f000 f9c9 	bl	80450b0 <memmove>
 8044d1e:	68a3      	ldr	r3, [r4, #8]
 8044d20:	1b9b      	subs	r3, r3, r6
 8044d22:	60a3      	str	r3, [r4, #8]
 8044d24:	6823      	ldr	r3, [r4, #0]
 8044d26:	4433      	add	r3, r6
 8044d28:	6023      	str	r3, [r4, #0]
 8044d2a:	2000      	movs	r0, #0
 8044d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044d30:	462a      	mov	r2, r5
 8044d32:	f000 fa1b 	bl	804516c <_realloc_r>
 8044d36:	4606      	mov	r6, r0
 8044d38:	2800      	cmp	r0, #0
 8044d3a:	d1e0      	bne.n	8044cfe <__ssputs_r+0x5a>
 8044d3c:	6921      	ldr	r1, [r4, #16]
 8044d3e:	4650      	mov	r0, sl
 8044d40:	f7fe fe8c 	bl	8043a5c <_free_r>
 8044d44:	230c      	movs	r3, #12
 8044d46:	f8ca 3000 	str.w	r3, [sl]
 8044d4a:	89a3      	ldrh	r3, [r4, #12]
 8044d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8044d50:	81a3      	strh	r3, [r4, #12]
 8044d52:	f04f 30ff 	mov.w	r0, #4294967295
 8044d56:	e7e9      	b.n	8044d2c <__ssputs_r+0x88>

08044d58 <_svfiprintf_r>:
 8044d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044d5c:	4698      	mov	r8, r3
 8044d5e:	898b      	ldrh	r3, [r1, #12]
 8044d60:	061b      	lsls	r3, r3, #24
 8044d62:	b09d      	sub	sp, #116	; 0x74
 8044d64:	4607      	mov	r7, r0
 8044d66:	460d      	mov	r5, r1
 8044d68:	4614      	mov	r4, r2
 8044d6a:	d50e      	bpl.n	8044d8a <_svfiprintf_r+0x32>
 8044d6c:	690b      	ldr	r3, [r1, #16]
 8044d6e:	b963      	cbnz	r3, 8044d8a <_svfiprintf_r+0x32>
 8044d70:	2140      	movs	r1, #64	; 0x40
 8044d72:	f7ff fa3f 	bl	80441f4 <_malloc_r>
 8044d76:	6028      	str	r0, [r5, #0]
 8044d78:	6128      	str	r0, [r5, #16]
 8044d7a:	b920      	cbnz	r0, 8044d86 <_svfiprintf_r+0x2e>
 8044d7c:	230c      	movs	r3, #12
 8044d7e:	603b      	str	r3, [r7, #0]
 8044d80:	f04f 30ff 	mov.w	r0, #4294967295
 8044d84:	e0d0      	b.n	8044f28 <_svfiprintf_r+0x1d0>
 8044d86:	2340      	movs	r3, #64	; 0x40
 8044d88:	616b      	str	r3, [r5, #20]
 8044d8a:	2300      	movs	r3, #0
 8044d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8044d8e:	2320      	movs	r3, #32
 8044d90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8044d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8044d98:	2330      	movs	r3, #48	; 0x30
 8044d9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8044f40 <_svfiprintf_r+0x1e8>
 8044d9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8044da2:	f04f 0901 	mov.w	r9, #1
 8044da6:	4623      	mov	r3, r4
 8044da8:	469a      	mov	sl, r3
 8044daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8044dae:	b10a      	cbz	r2, 8044db4 <_svfiprintf_r+0x5c>
 8044db0:	2a25      	cmp	r2, #37	; 0x25
 8044db2:	d1f9      	bne.n	8044da8 <_svfiprintf_r+0x50>
 8044db4:	ebba 0b04 	subs.w	fp, sl, r4
 8044db8:	d00b      	beq.n	8044dd2 <_svfiprintf_r+0x7a>
 8044dba:	465b      	mov	r3, fp
 8044dbc:	4622      	mov	r2, r4
 8044dbe:	4629      	mov	r1, r5
 8044dc0:	4638      	mov	r0, r7
 8044dc2:	f7ff ff6f 	bl	8044ca4 <__ssputs_r>
 8044dc6:	3001      	adds	r0, #1
 8044dc8:	f000 80a9 	beq.w	8044f1e <_svfiprintf_r+0x1c6>
 8044dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8044dce:	445a      	add	r2, fp
 8044dd0:	9209      	str	r2, [sp, #36]	; 0x24
 8044dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8044dd6:	2b00      	cmp	r3, #0
 8044dd8:	f000 80a1 	beq.w	8044f1e <_svfiprintf_r+0x1c6>
 8044ddc:	2300      	movs	r3, #0
 8044dde:	f04f 32ff 	mov.w	r2, #4294967295
 8044de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8044de6:	f10a 0a01 	add.w	sl, sl, #1
 8044dea:	9304      	str	r3, [sp, #16]
 8044dec:	9307      	str	r3, [sp, #28]
 8044dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8044df2:	931a      	str	r3, [sp, #104]	; 0x68
 8044df4:	4654      	mov	r4, sl
 8044df6:	2205      	movs	r2, #5
 8044df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8044dfc:	4850      	ldr	r0, [pc, #320]	; (8044f40 <_svfiprintf_r+0x1e8>)
 8044dfe:	f7db fa17 	bl	8020230 <memchr>
 8044e02:	9a04      	ldr	r2, [sp, #16]
 8044e04:	b9d8      	cbnz	r0, 8044e3e <_svfiprintf_r+0xe6>
 8044e06:	06d0      	lsls	r0, r2, #27
 8044e08:	bf44      	itt	mi
 8044e0a:	2320      	movmi	r3, #32
 8044e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8044e10:	0711      	lsls	r1, r2, #28
 8044e12:	bf44      	itt	mi
 8044e14:	232b      	movmi	r3, #43	; 0x2b
 8044e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8044e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8044e1e:	2b2a      	cmp	r3, #42	; 0x2a
 8044e20:	d015      	beq.n	8044e4e <_svfiprintf_r+0xf6>
 8044e22:	9a07      	ldr	r2, [sp, #28]
 8044e24:	4654      	mov	r4, sl
 8044e26:	2000      	movs	r0, #0
 8044e28:	f04f 0c0a 	mov.w	ip, #10
 8044e2c:	4621      	mov	r1, r4
 8044e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8044e32:	3b30      	subs	r3, #48	; 0x30
 8044e34:	2b09      	cmp	r3, #9
 8044e36:	d94d      	bls.n	8044ed4 <_svfiprintf_r+0x17c>
 8044e38:	b1b0      	cbz	r0, 8044e68 <_svfiprintf_r+0x110>
 8044e3a:	9207      	str	r2, [sp, #28]
 8044e3c:	e014      	b.n	8044e68 <_svfiprintf_r+0x110>
 8044e3e:	eba0 0308 	sub.w	r3, r0, r8
 8044e42:	fa09 f303 	lsl.w	r3, r9, r3
 8044e46:	4313      	orrs	r3, r2
 8044e48:	9304      	str	r3, [sp, #16]
 8044e4a:	46a2      	mov	sl, r4
 8044e4c:	e7d2      	b.n	8044df4 <_svfiprintf_r+0x9c>
 8044e4e:	9b03      	ldr	r3, [sp, #12]
 8044e50:	1d19      	adds	r1, r3, #4
 8044e52:	681b      	ldr	r3, [r3, #0]
 8044e54:	9103      	str	r1, [sp, #12]
 8044e56:	2b00      	cmp	r3, #0
 8044e58:	bfbb      	ittet	lt
 8044e5a:	425b      	neglt	r3, r3
 8044e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8044e60:	9307      	strge	r3, [sp, #28]
 8044e62:	9307      	strlt	r3, [sp, #28]
 8044e64:	bfb8      	it	lt
 8044e66:	9204      	strlt	r2, [sp, #16]
 8044e68:	7823      	ldrb	r3, [r4, #0]
 8044e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8044e6c:	d10c      	bne.n	8044e88 <_svfiprintf_r+0x130>
 8044e6e:	7863      	ldrb	r3, [r4, #1]
 8044e70:	2b2a      	cmp	r3, #42	; 0x2a
 8044e72:	d134      	bne.n	8044ede <_svfiprintf_r+0x186>
 8044e74:	9b03      	ldr	r3, [sp, #12]
 8044e76:	1d1a      	adds	r2, r3, #4
 8044e78:	681b      	ldr	r3, [r3, #0]
 8044e7a:	9203      	str	r2, [sp, #12]
 8044e7c:	2b00      	cmp	r3, #0
 8044e7e:	bfb8      	it	lt
 8044e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8044e84:	3402      	adds	r4, #2
 8044e86:	9305      	str	r3, [sp, #20]
 8044e88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8044f50 <_svfiprintf_r+0x1f8>
 8044e8c:	7821      	ldrb	r1, [r4, #0]
 8044e8e:	2203      	movs	r2, #3
 8044e90:	4650      	mov	r0, sl
 8044e92:	f7db f9cd 	bl	8020230 <memchr>
 8044e96:	b138      	cbz	r0, 8044ea8 <_svfiprintf_r+0x150>
 8044e98:	9b04      	ldr	r3, [sp, #16]
 8044e9a:	eba0 000a 	sub.w	r0, r0, sl
 8044e9e:	2240      	movs	r2, #64	; 0x40
 8044ea0:	4082      	lsls	r2, r0
 8044ea2:	4313      	orrs	r3, r2
 8044ea4:	3401      	adds	r4, #1
 8044ea6:	9304      	str	r3, [sp, #16]
 8044ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8044eac:	4825      	ldr	r0, [pc, #148]	; (8044f44 <_svfiprintf_r+0x1ec>)
 8044eae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8044eb2:	2206      	movs	r2, #6
 8044eb4:	f7db f9bc 	bl	8020230 <memchr>
 8044eb8:	2800      	cmp	r0, #0
 8044eba:	d038      	beq.n	8044f2e <_svfiprintf_r+0x1d6>
 8044ebc:	4b22      	ldr	r3, [pc, #136]	; (8044f48 <_svfiprintf_r+0x1f0>)
 8044ebe:	bb1b      	cbnz	r3, 8044f08 <_svfiprintf_r+0x1b0>
 8044ec0:	9b03      	ldr	r3, [sp, #12]
 8044ec2:	3307      	adds	r3, #7
 8044ec4:	f023 0307 	bic.w	r3, r3, #7
 8044ec8:	3308      	adds	r3, #8
 8044eca:	9303      	str	r3, [sp, #12]
 8044ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8044ece:	4433      	add	r3, r6
 8044ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8044ed2:	e768      	b.n	8044da6 <_svfiprintf_r+0x4e>
 8044ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8044ed8:	460c      	mov	r4, r1
 8044eda:	2001      	movs	r0, #1
 8044edc:	e7a6      	b.n	8044e2c <_svfiprintf_r+0xd4>
 8044ede:	2300      	movs	r3, #0
 8044ee0:	3401      	adds	r4, #1
 8044ee2:	9305      	str	r3, [sp, #20]
 8044ee4:	4619      	mov	r1, r3
 8044ee6:	f04f 0c0a 	mov.w	ip, #10
 8044eea:	4620      	mov	r0, r4
 8044eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8044ef0:	3a30      	subs	r2, #48	; 0x30
 8044ef2:	2a09      	cmp	r2, #9
 8044ef4:	d903      	bls.n	8044efe <_svfiprintf_r+0x1a6>
 8044ef6:	2b00      	cmp	r3, #0
 8044ef8:	d0c6      	beq.n	8044e88 <_svfiprintf_r+0x130>
 8044efa:	9105      	str	r1, [sp, #20]
 8044efc:	e7c4      	b.n	8044e88 <_svfiprintf_r+0x130>
 8044efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8044f02:	4604      	mov	r4, r0
 8044f04:	2301      	movs	r3, #1
 8044f06:	e7f0      	b.n	8044eea <_svfiprintf_r+0x192>
 8044f08:	ab03      	add	r3, sp, #12
 8044f0a:	9300      	str	r3, [sp, #0]
 8044f0c:	462a      	mov	r2, r5
 8044f0e:	4b0f      	ldr	r3, [pc, #60]	; (8044f4c <_svfiprintf_r+0x1f4>)
 8044f10:	a904      	add	r1, sp, #16
 8044f12:	4638      	mov	r0, r7
 8044f14:	f7fd f96c 	bl	80421f0 <_printf_float>
 8044f18:	1c42      	adds	r2, r0, #1
 8044f1a:	4606      	mov	r6, r0
 8044f1c:	d1d6      	bne.n	8044ecc <_svfiprintf_r+0x174>
 8044f1e:	89ab      	ldrh	r3, [r5, #12]
 8044f20:	065b      	lsls	r3, r3, #25
 8044f22:	f53f af2d 	bmi.w	8044d80 <_svfiprintf_r+0x28>
 8044f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8044f28:	b01d      	add	sp, #116	; 0x74
 8044f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8044f2e:	ab03      	add	r3, sp, #12
 8044f30:	9300      	str	r3, [sp, #0]
 8044f32:	462a      	mov	r2, r5
 8044f34:	4b05      	ldr	r3, [pc, #20]	; (8044f4c <_svfiprintf_r+0x1f4>)
 8044f36:	a904      	add	r1, sp, #16
 8044f38:	4638      	mov	r0, r7
 8044f3a:	f7fd fbfd 	bl	8042738 <_printf_i>
 8044f3e:	e7eb      	b.n	8044f18 <_svfiprintf_r+0x1c0>
 8044f40:	0804a5fc 	.word	0x0804a5fc
 8044f44:	0804a606 	.word	0x0804a606
 8044f48:	080421f1 	.word	0x080421f1
 8044f4c:	08044ca5 	.word	0x08044ca5
 8044f50:	0804a602 	.word	0x0804a602

08044f54 <__sflush_r>:
 8044f54:	898a      	ldrh	r2, [r1, #12]
 8044f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044f5a:	4605      	mov	r5, r0
 8044f5c:	0710      	lsls	r0, r2, #28
 8044f5e:	460c      	mov	r4, r1
 8044f60:	d458      	bmi.n	8045014 <__sflush_r+0xc0>
 8044f62:	684b      	ldr	r3, [r1, #4]
 8044f64:	2b00      	cmp	r3, #0
 8044f66:	dc05      	bgt.n	8044f74 <__sflush_r+0x20>
 8044f68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8044f6a:	2b00      	cmp	r3, #0
 8044f6c:	dc02      	bgt.n	8044f74 <__sflush_r+0x20>
 8044f6e:	2000      	movs	r0, #0
 8044f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8044f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8044f76:	2e00      	cmp	r6, #0
 8044f78:	d0f9      	beq.n	8044f6e <__sflush_r+0x1a>
 8044f7a:	2300      	movs	r3, #0
 8044f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8044f80:	682f      	ldr	r7, [r5, #0]
 8044f82:	6a21      	ldr	r1, [r4, #32]
 8044f84:	602b      	str	r3, [r5, #0]
 8044f86:	d032      	beq.n	8044fee <__sflush_r+0x9a>
 8044f88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8044f8a:	89a3      	ldrh	r3, [r4, #12]
 8044f8c:	075a      	lsls	r2, r3, #29
 8044f8e:	d505      	bpl.n	8044f9c <__sflush_r+0x48>
 8044f90:	6863      	ldr	r3, [r4, #4]
 8044f92:	1ac0      	subs	r0, r0, r3
 8044f94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8044f96:	b10b      	cbz	r3, 8044f9c <__sflush_r+0x48>
 8044f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8044f9a:	1ac0      	subs	r0, r0, r3
 8044f9c:	2300      	movs	r3, #0
 8044f9e:	4602      	mov	r2, r0
 8044fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8044fa2:	6a21      	ldr	r1, [r4, #32]
 8044fa4:	4628      	mov	r0, r5
 8044fa6:	47b0      	blx	r6
 8044fa8:	1c43      	adds	r3, r0, #1
 8044faa:	89a3      	ldrh	r3, [r4, #12]
 8044fac:	d106      	bne.n	8044fbc <__sflush_r+0x68>
 8044fae:	6829      	ldr	r1, [r5, #0]
 8044fb0:	291d      	cmp	r1, #29
 8044fb2:	d82b      	bhi.n	804500c <__sflush_r+0xb8>
 8044fb4:	4a29      	ldr	r2, [pc, #164]	; (804505c <__sflush_r+0x108>)
 8044fb6:	410a      	asrs	r2, r1
 8044fb8:	07d6      	lsls	r6, r2, #31
 8044fba:	d427      	bmi.n	804500c <__sflush_r+0xb8>
 8044fbc:	2200      	movs	r2, #0
 8044fbe:	6062      	str	r2, [r4, #4]
 8044fc0:	04d9      	lsls	r1, r3, #19
 8044fc2:	6922      	ldr	r2, [r4, #16]
 8044fc4:	6022      	str	r2, [r4, #0]
 8044fc6:	d504      	bpl.n	8044fd2 <__sflush_r+0x7e>
 8044fc8:	1c42      	adds	r2, r0, #1
 8044fca:	d101      	bne.n	8044fd0 <__sflush_r+0x7c>
 8044fcc:	682b      	ldr	r3, [r5, #0]
 8044fce:	b903      	cbnz	r3, 8044fd2 <__sflush_r+0x7e>
 8044fd0:	6560      	str	r0, [r4, #84]	; 0x54
 8044fd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8044fd4:	602f      	str	r7, [r5, #0]
 8044fd6:	2900      	cmp	r1, #0
 8044fd8:	d0c9      	beq.n	8044f6e <__sflush_r+0x1a>
 8044fda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8044fde:	4299      	cmp	r1, r3
 8044fe0:	d002      	beq.n	8044fe8 <__sflush_r+0x94>
 8044fe2:	4628      	mov	r0, r5
 8044fe4:	f7fe fd3a 	bl	8043a5c <_free_r>
 8044fe8:	2000      	movs	r0, #0
 8044fea:	6360      	str	r0, [r4, #52]	; 0x34
 8044fec:	e7c0      	b.n	8044f70 <__sflush_r+0x1c>
 8044fee:	2301      	movs	r3, #1
 8044ff0:	4628      	mov	r0, r5
 8044ff2:	47b0      	blx	r6
 8044ff4:	1c41      	adds	r1, r0, #1
 8044ff6:	d1c8      	bne.n	8044f8a <__sflush_r+0x36>
 8044ff8:	682b      	ldr	r3, [r5, #0]
 8044ffa:	2b00      	cmp	r3, #0
 8044ffc:	d0c5      	beq.n	8044f8a <__sflush_r+0x36>
 8044ffe:	2b1d      	cmp	r3, #29
 8045000:	d001      	beq.n	8045006 <__sflush_r+0xb2>
 8045002:	2b16      	cmp	r3, #22
 8045004:	d101      	bne.n	804500a <__sflush_r+0xb6>
 8045006:	602f      	str	r7, [r5, #0]
 8045008:	e7b1      	b.n	8044f6e <__sflush_r+0x1a>
 804500a:	89a3      	ldrh	r3, [r4, #12]
 804500c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8045010:	81a3      	strh	r3, [r4, #12]
 8045012:	e7ad      	b.n	8044f70 <__sflush_r+0x1c>
 8045014:	690f      	ldr	r7, [r1, #16]
 8045016:	2f00      	cmp	r7, #0
 8045018:	d0a9      	beq.n	8044f6e <__sflush_r+0x1a>
 804501a:	0793      	lsls	r3, r2, #30
 804501c:	680e      	ldr	r6, [r1, #0]
 804501e:	bf08      	it	eq
 8045020:	694b      	ldreq	r3, [r1, #20]
 8045022:	600f      	str	r7, [r1, #0]
 8045024:	bf18      	it	ne
 8045026:	2300      	movne	r3, #0
 8045028:	eba6 0807 	sub.w	r8, r6, r7
 804502c:	608b      	str	r3, [r1, #8]
 804502e:	f1b8 0f00 	cmp.w	r8, #0
 8045032:	dd9c      	ble.n	8044f6e <__sflush_r+0x1a>
 8045034:	6a21      	ldr	r1, [r4, #32]
 8045036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8045038:	4643      	mov	r3, r8
 804503a:	463a      	mov	r2, r7
 804503c:	4628      	mov	r0, r5
 804503e:	47b0      	blx	r6
 8045040:	2800      	cmp	r0, #0
 8045042:	dc06      	bgt.n	8045052 <__sflush_r+0xfe>
 8045044:	89a3      	ldrh	r3, [r4, #12]
 8045046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804504a:	81a3      	strh	r3, [r4, #12]
 804504c:	f04f 30ff 	mov.w	r0, #4294967295
 8045050:	e78e      	b.n	8044f70 <__sflush_r+0x1c>
 8045052:	4407      	add	r7, r0
 8045054:	eba8 0800 	sub.w	r8, r8, r0
 8045058:	e7e9      	b.n	804502e <__sflush_r+0xda>
 804505a:	bf00      	nop
 804505c:	dfbffffe 	.word	0xdfbffffe

08045060 <_fflush_r>:
 8045060:	b538      	push	{r3, r4, r5, lr}
 8045062:	690b      	ldr	r3, [r1, #16]
 8045064:	4605      	mov	r5, r0
 8045066:	460c      	mov	r4, r1
 8045068:	b913      	cbnz	r3, 8045070 <_fflush_r+0x10>
 804506a:	2500      	movs	r5, #0
 804506c:	4628      	mov	r0, r5
 804506e:	bd38      	pop	{r3, r4, r5, pc}
 8045070:	b118      	cbz	r0, 804507a <_fflush_r+0x1a>
 8045072:	6a03      	ldr	r3, [r0, #32]
 8045074:	b90b      	cbnz	r3, 804507a <_fflush_r+0x1a>
 8045076:	f7fd fd0d 	bl	8042a94 <__sinit>
 804507a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804507e:	2b00      	cmp	r3, #0
 8045080:	d0f3      	beq.n	804506a <_fflush_r+0xa>
 8045082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8045084:	07d0      	lsls	r0, r2, #31
 8045086:	d404      	bmi.n	8045092 <_fflush_r+0x32>
 8045088:	0599      	lsls	r1, r3, #22
 804508a:	d402      	bmi.n	8045092 <_fflush_r+0x32>
 804508c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804508e:	f7fd fe4a 	bl	8042d26 <__retarget_lock_acquire_recursive>
 8045092:	4628      	mov	r0, r5
 8045094:	4621      	mov	r1, r4
 8045096:	f7ff ff5d 	bl	8044f54 <__sflush_r>
 804509a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804509c:	07da      	lsls	r2, r3, #31
 804509e:	4605      	mov	r5, r0
 80450a0:	d4e4      	bmi.n	804506c <_fflush_r+0xc>
 80450a2:	89a3      	ldrh	r3, [r4, #12]
 80450a4:	059b      	lsls	r3, r3, #22
 80450a6:	d4e1      	bmi.n	804506c <_fflush_r+0xc>
 80450a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80450aa:	f7fd fe3d 	bl	8042d28 <__retarget_lock_release_recursive>
 80450ae:	e7dd      	b.n	804506c <_fflush_r+0xc>

080450b0 <memmove>:
 80450b0:	4288      	cmp	r0, r1
 80450b2:	b510      	push	{r4, lr}
 80450b4:	eb01 0402 	add.w	r4, r1, r2
 80450b8:	d902      	bls.n	80450c0 <memmove+0x10>
 80450ba:	4284      	cmp	r4, r0
 80450bc:	4623      	mov	r3, r4
 80450be:	d807      	bhi.n	80450d0 <memmove+0x20>
 80450c0:	1e43      	subs	r3, r0, #1
 80450c2:	42a1      	cmp	r1, r4
 80450c4:	d008      	beq.n	80450d8 <memmove+0x28>
 80450c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80450ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80450ce:	e7f8      	b.n	80450c2 <memmove+0x12>
 80450d0:	4402      	add	r2, r0
 80450d2:	4601      	mov	r1, r0
 80450d4:	428a      	cmp	r2, r1
 80450d6:	d100      	bne.n	80450da <memmove+0x2a>
 80450d8:	bd10      	pop	{r4, pc}
 80450da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80450de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80450e2:	e7f7      	b.n	80450d4 <memmove+0x24>

080450e4 <_sbrk_r>:
 80450e4:	b538      	push	{r3, r4, r5, lr}
 80450e6:	4d06      	ldr	r5, [pc, #24]	; (8045100 <_sbrk_r+0x1c>)
 80450e8:	2300      	movs	r3, #0
 80450ea:	4604      	mov	r4, r0
 80450ec:	4608      	mov	r0, r1
 80450ee:	602b      	str	r3, [r5, #0]
 80450f0:	f7df fea8 	bl	8024e44 <_sbrk>
 80450f4:	1c43      	adds	r3, r0, #1
 80450f6:	d102      	bne.n	80450fe <_sbrk_r+0x1a>
 80450f8:	682b      	ldr	r3, [r5, #0]
 80450fa:	b103      	cbz	r3, 80450fe <_sbrk_r+0x1a>
 80450fc:	6023      	str	r3, [r4, #0]
 80450fe:	bd38      	pop	{r3, r4, r5, pc}
 8045100:	20010034 	.word	0x20010034

08045104 <__assert_func>:
 8045104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8045106:	4614      	mov	r4, r2
 8045108:	461a      	mov	r2, r3
 804510a:	4b09      	ldr	r3, [pc, #36]	; (8045130 <__assert_func+0x2c>)
 804510c:	681b      	ldr	r3, [r3, #0]
 804510e:	4605      	mov	r5, r0
 8045110:	68d8      	ldr	r0, [r3, #12]
 8045112:	b14c      	cbz	r4, 8045128 <__assert_func+0x24>
 8045114:	4b07      	ldr	r3, [pc, #28]	; (8045134 <__assert_func+0x30>)
 8045116:	9100      	str	r1, [sp, #0]
 8045118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 804511c:	4906      	ldr	r1, [pc, #24]	; (8045138 <__assert_func+0x34>)
 804511e:	462b      	mov	r3, r5
 8045120:	f000 f854 	bl	80451cc <fiprintf>
 8045124:	f000 f864 	bl	80451f0 <abort>
 8045128:	4b04      	ldr	r3, [pc, #16]	; (804513c <__assert_func+0x38>)
 804512a:	461c      	mov	r4, r3
 804512c:	e7f3      	b.n	8045116 <__assert_func+0x12>
 804512e:	bf00      	nop
 8045130:	200036c8 	.word	0x200036c8
 8045134:	0804a60d 	.word	0x0804a60d
 8045138:	0804a61a 	.word	0x0804a61a
 804513c:	0804a648 	.word	0x0804a648

08045140 <_calloc_r>:
 8045140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8045142:	fba1 2402 	umull	r2, r4, r1, r2
 8045146:	b94c      	cbnz	r4, 804515c <_calloc_r+0x1c>
 8045148:	4611      	mov	r1, r2
 804514a:	9201      	str	r2, [sp, #4]
 804514c:	f7ff f852 	bl	80441f4 <_malloc_r>
 8045150:	9a01      	ldr	r2, [sp, #4]
 8045152:	4605      	mov	r5, r0
 8045154:	b930      	cbnz	r0, 8045164 <_calloc_r+0x24>
 8045156:	4628      	mov	r0, r5
 8045158:	b003      	add	sp, #12
 804515a:	bd30      	pop	{r4, r5, pc}
 804515c:	220c      	movs	r2, #12
 804515e:	6002      	str	r2, [r0, #0]
 8045160:	2500      	movs	r5, #0
 8045162:	e7f8      	b.n	8045156 <_calloc_r+0x16>
 8045164:	4621      	mov	r1, r4
 8045166:	f7fd fd4f 	bl	8042c08 <memset>
 804516a:	e7f4      	b.n	8045156 <_calloc_r+0x16>

0804516c <_realloc_r>:
 804516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8045170:	4680      	mov	r8, r0
 8045172:	4614      	mov	r4, r2
 8045174:	460e      	mov	r6, r1
 8045176:	b921      	cbnz	r1, 8045182 <_realloc_r+0x16>
 8045178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804517c:	4611      	mov	r1, r2
 804517e:	f7ff b839 	b.w	80441f4 <_malloc_r>
 8045182:	b92a      	cbnz	r2, 8045190 <_realloc_r+0x24>
 8045184:	f7fe fc6a 	bl	8043a5c <_free_r>
 8045188:	4625      	mov	r5, r4
 804518a:	4628      	mov	r0, r5
 804518c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8045190:	f000 f835 	bl	80451fe <_malloc_usable_size_r>
 8045194:	4284      	cmp	r4, r0
 8045196:	4607      	mov	r7, r0
 8045198:	d802      	bhi.n	80451a0 <_realloc_r+0x34>
 804519a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 804519e:	d812      	bhi.n	80451c6 <_realloc_r+0x5a>
 80451a0:	4621      	mov	r1, r4
 80451a2:	4640      	mov	r0, r8
 80451a4:	f7ff f826 	bl	80441f4 <_malloc_r>
 80451a8:	4605      	mov	r5, r0
 80451aa:	2800      	cmp	r0, #0
 80451ac:	d0ed      	beq.n	804518a <_realloc_r+0x1e>
 80451ae:	42bc      	cmp	r4, r7
 80451b0:	4622      	mov	r2, r4
 80451b2:	4631      	mov	r1, r6
 80451b4:	bf28      	it	cs
 80451b6:	463a      	movcs	r2, r7
 80451b8:	f7fd fdbf 	bl	8042d3a <memcpy>
 80451bc:	4631      	mov	r1, r6
 80451be:	4640      	mov	r0, r8
 80451c0:	f7fe fc4c 	bl	8043a5c <_free_r>
 80451c4:	e7e1      	b.n	804518a <_realloc_r+0x1e>
 80451c6:	4635      	mov	r5, r6
 80451c8:	e7df      	b.n	804518a <_realloc_r+0x1e>
	...

080451cc <fiprintf>:
 80451cc:	b40e      	push	{r1, r2, r3}
 80451ce:	b503      	push	{r0, r1, lr}
 80451d0:	4601      	mov	r1, r0
 80451d2:	ab03      	add	r3, sp, #12
 80451d4:	4805      	ldr	r0, [pc, #20]	; (80451ec <fiprintf+0x20>)
 80451d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80451da:	6800      	ldr	r0, [r0, #0]
 80451dc:	9301      	str	r3, [sp, #4]
 80451de:	f000 f83f 	bl	8045260 <_vfiprintf_r>
 80451e2:	b002      	add	sp, #8
 80451e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80451e8:	b003      	add	sp, #12
 80451ea:	4770      	bx	lr
 80451ec:	200036c8 	.word	0x200036c8

080451f0 <abort>:
 80451f0:	b508      	push	{r3, lr}
 80451f2:	2006      	movs	r0, #6
 80451f4:	f000 fa0c 	bl	8045610 <raise>
 80451f8:	2001      	movs	r0, #1
 80451fa:	f7df fdab 	bl	8024d54 <_exit>

080451fe <_malloc_usable_size_r>:
 80451fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8045202:	1f18      	subs	r0, r3, #4
 8045204:	2b00      	cmp	r3, #0
 8045206:	bfbc      	itt	lt
 8045208:	580b      	ldrlt	r3, [r1, r0]
 804520a:	18c0      	addlt	r0, r0, r3
 804520c:	4770      	bx	lr

0804520e <__sfputc_r>:
 804520e:	6893      	ldr	r3, [r2, #8]
 8045210:	3b01      	subs	r3, #1
 8045212:	2b00      	cmp	r3, #0
 8045214:	b410      	push	{r4}
 8045216:	6093      	str	r3, [r2, #8]
 8045218:	da08      	bge.n	804522c <__sfputc_r+0x1e>
 804521a:	6994      	ldr	r4, [r2, #24]
 804521c:	42a3      	cmp	r3, r4
 804521e:	db01      	blt.n	8045224 <__sfputc_r+0x16>
 8045220:	290a      	cmp	r1, #10
 8045222:	d103      	bne.n	804522c <__sfputc_r+0x1e>
 8045224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8045228:	f000 b934 	b.w	8045494 <__swbuf_r>
 804522c:	6813      	ldr	r3, [r2, #0]
 804522e:	1c58      	adds	r0, r3, #1
 8045230:	6010      	str	r0, [r2, #0]
 8045232:	7019      	strb	r1, [r3, #0]
 8045234:	4608      	mov	r0, r1
 8045236:	f85d 4b04 	ldr.w	r4, [sp], #4
 804523a:	4770      	bx	lr

0804523c <__sfputs_r>:
 804523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804523e:	4606      	mov	r6, r0
 8045240:	460f      	mov	r7, r1
 8045242:	4614      	mov	r4, r2
 8045244:	18d5      	adds	r5, r2, r3
 8045246:	42ac      	cmp	r4, r5
 8045248:	d101      	bne.n	804524e <__sfputs_r+0x12>
 804524a:	2000      	movs	r0, #0
 804524c:	e007      	b.n	804525e <__sfputs_r+0x22>
 804524e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8045252:	463a      	mov	r2, r7
 8045254:	4630      	mov	r0, r6
 8045256:	f7ff ffda 	bl	804520e <__sfputc_r>
 804525a:	1c43      	adds	r3, r0, #1
 804525c:	d1f3      	bne.n	8045246 <__sfputs_r+0xa>
 804525e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08045260 <_vfiprintf_r>:
 8045260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045264:	460d      	mov	r5, r1
 8045266:	b09d      	sub	sp, #116	; 0x74
 8045268:	4614      	mov	r4, r2
 804526a:	4698      	mov	r8, r3
 804526c:	4606      	mov	r6, r0
 804526e:	b118      	cbz	r0, 8045278 <_vfiprintf_r+0x18>
 8045270:	6a03      	ldr	r3, [r0, #32]
 8045272:	b90b      	cbnz	r3, 8045278 <_vfiprintf_r+0x18>
 8045274:	f7fd fc0e 	bl	8042a94 <__sinit>
 8045278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804527a:	07d9      	lsls	r1, r3, #31
 804527c:	d405      	bmi.n	804528a <_vfiprintf_r+0x2a>
 804527e:	89ab      	ldrh	r3, [r5, #12]
 8045280:	059a      	lsls	r2, r3, #22
 8045282:	d402      	bmi.n	804528a <_vfiprintf_r+0x2a>
 8045284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8045286:	f7fd fd4e 	bl	8042d26 <__retarget_lock_acquire_recursive>
 804528a:	89ab      	ldrh	r3, [r5, #12]
 804528c:	071b      	lsls	r3, r3, #28
 804528e:	d501      	bpl.n	8045294 <_vfiprintf_r+0x34>
 8045290:	692b      	ldr	r3, [r5, #16]
 8045292:	b99b      	cbnz	r3, 80452bc <_vfiprintf_r+0x5c>
 8045294:	4629      	mov	r1, r5
 8045296:	4630      	mov	r0, r6
 8045298:	f000 f93a 	bl	8045510 <__swsetup_r>
 804529c:	b170      	cbz	r0, 80452bc <_vfiprintf_r+0x5c>
 804529e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80452a0:	07dc      	lsls	r4, r3, #31
 80452a2:	d504      	bpl.n	80452ae <_vfiprintf_r+0x4e>
 80452a4:	f04f 30ff 	mov.w	r0, #4294967295
 80452a8:	b01d      	add	sp, #116	; 0x74
 80452aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80452ae:	89ab      	ldrh	r3, [r5, #12]
 80452b0:	0598      	lsls	r0, r3, #22
 80452b2:	d4f7      	bmi.n	80452a4 <_vfiprintf_r+0x44>
 80452b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80452b6:	f7fd fd37 	bl	8042d28 <__retarget_lock_release_recursive>
 80452ba:	e7f3      	b.n	80452a4 <_vfiprintf_r+0x44>
 80452bc:	2300      	movs	r3, #0
 80452be:	9309      	str	r3, [sp, #36]	; 0x24
 80452c0:	2320      	movs	r3, #32
 80452c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80452c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80452ca:	2330      	movs	r3, #48	; 0x30
 80452cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8045480 <_vfiprintf_r+0x220>
 80452d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80452d4:	f04f 0901 	mov.w	r9, #1
 80452d8:	4623      	mov	r3, r4
 80452da:	469a      	mov	sl, r3
 80452dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80452e0:	b10a      	cbz	r2, 80452e6 <_vfiprintf_r+0x86>
 80452e2:	2a25      	cmp	r2, #37	; 0x25
 80452e4:	d1f9      	bne.n	80452da <_vfiprintf_r+0x7a>
 80452e6:	ebba 0b04 	subs.w	fp, sl, r4
 80452ea:	d00b      	beq.n	8045304 <_vfiprintf_r+0xa4>
 80452ec:	465b      	mov	r3, fp
 80452ee:	4622      	mov	r2, r4
 80452f0:	4629      	mov	r1, r5
 80452f2:	4630      	mov	r0, r6
 80452f4:	f7ff ffa2 	bl	804523c <__sfputs_r>
 80452f8:	3001      	adds	r0, #1
 80452fa:	f000 80a9 	beq.w	8045450 <_vfiprintf_r+0x1f0>
 80452fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8045300:	445a      	add	r2, fp
 8045302:	9209      	str	r2, [sp, #36]	; 0x24
 8045304:	f89a 3000 	ldrb.w	r3, [sl]
 8045308:	2b00      	cmp	r3, #0
 804530a:	f000 80a1 	beq.w	8045450 <_vfiprintf_r+0x1f0>
 804530e:	2300      	movs	r3, #0
 8045310:	f04f 32ff 	mov.w	r2, #4294967295
 8045314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8045318:	f10a 0a01 	add.w	sl, sl, #1
 804531c:	9304      	str	r3, [sp, #16]
 804531e:	9307      	str	r3, [sp, #28]
 8045320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8045324:	931a      	str	r3, [sp, #104]	; 0x68
 8045326:	4654      	mov	r4, sl
 8045328:	2205      	movs	r2, #5
 804532a:	f814 1b01 	ldrb.w	r1, [r4], #1
 804532e:	4854      	ldr	r0, [pc, #336]	; (8045480 <_vfiprintf_r+0x220>)
 8045330:	f7da ff7e 	bl	8020230 <memchr>
 8045334:	9a04      	ldr	r2, [sp, #16]
 8045336:	b9d8      	cbnz	r0, 8045370 <_vfiprintf_r+0x110>
 8045338:	06d1      	lsls	r1, r2, #27
 804533a:	bf44      	itt	mi
 804533c:	2320      	movmi	r3, #32
 804533e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8045342:	0713      	lsls	r3, r2, #28
 8045344:	bf44      	itt	mi
 8045346:	232b      	movmi	r3, #43	; 0x2b
 8045348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804534c:	f89a 3000 	ldrb.w	r3, [sl]
 8045350:	2b2a      	cmp	r3, #42	; 0x2a
 8045352:	d015      	beq.n	8045380 <_vfiprintf_r+0x120>
 8045354:	9a07      	ldr	r2, [sp, #28]
 8045356:	4654      	mov	r4, sl
 8045358:	2000      	movs	r0, #0
 804535a:	f04f 0c0a 	mov.w	ip, #10
 804535e:	4621      	mov	r1, r4
 8045360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8045364:	3b30      	subs	r3, #48	; 0x30
 8045366:	2b09      	cmp	r3, #9
 8045368:	d94d      	bls.n	8045406 <_vfiprintf_r+0x1a6>
 804536a:	b1b0      	cbz	r0, 804539a <_vfiprintf_r+0x13a>
 804536c:	9207      	str	r2, [sp, #28]
 804536e:	e014      	b.n	804539a <_vfiprintf_r+0x13a>
 8045370:	eba0 0308 	sub.w	r3, r0, r8
 8045374:	fa09 f303 	lsl.w	r3, r9, r3
 8045378:	4313      	orrs	r3, r2
 804537a:	9304      	str	r3, [sp, #16]
 804537c:	46a2      	mov	sl, r4
 804537e:	e7d2      	b.n	8045326 <_vfiprintf_r+0xc6>
 8045380:	9b03      	ldr	r3, [sp, #12]
 8045382:	1d19      	adds	r1, r3, #4
 8045384:	681b      	ldr	r3, [r3, #0]
 8045386:	9103      	str	r1, [sp, #12]
 8045388:	2b00      	cmp	r3, #0
 804538a:	bfbb      	ittet	lt
 804538c:	425b      	neglt	r3, r3
 804538e:	f042 0202 	orrlt.w	r2, r2, #2
 8045392:	9307      	strge	r3, [sp, #28]
 8045394:	9307      	strlt	r3, [sp, #28]
 8045396:	bfb8      	it	lt
 8045398:	9204      	strlt	r2, [sp, #16]
 804539a:	7823      	ldrb	r3, [r4, #0]
 804539c:	2b2e      	cmp	r3, #46	; 0x2e
 804539e:	d10c      	bne.n	80453ba <_vfiprintf_r+0x15a>
 80453a0:	7863      	ldrb	r3, [r4, #1]
 80453a2:	2b2a      	cmp	r3, #42	; 0x2a
 80453a4:	d134      	bne.n	8045410 <_vfiprintf_r+0x1b0>
 80453a6:	9b03      	ldr	r3, [sp, #12]
 80453a8:	1d1a      	adds	r2, r3, #4
 80453aa:	681b      	ldr	r3, [r3, #0]
 80453ac:	9203      	str	r2, [sp, #12]
 80453ae:	2b00      	cmp	r3, #0
 80453b0:	bfb8      	it	lt
 80453b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80453b6:	3402      	adds	r4, #2
 80453b8:	9305      	str	r3, [sp, #20]
 80453ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8045490 <_vfiprintf_r+0x230>
 80453be:	7821      	ldrb	r1, [r4, #0]
 80453c0:	2203      	movs	r2, #3
 80453c2:	4650      	mov	r0, sl
 80453c4:	f7da ff34 	bl	8020230 <memchr>
 80453c8:	b138      	cbz	r0, 80453da <_vfiprintf_r+0x17a>
 80453ca:	9b04      	ldr	r3, [sp, #16]
 80453cc:	eba0 000a 	sub.w	r0, r0, sl
 80453d0:	2240      	movs	r2, #64	; 0x40
 80453d2:	4082      	lsls	r2, r0
 80453d4:	4313      	orrs	r3, r2
 80453d6:	3401      	adds	r4, #1
 80453d8:	9304      	str	r3, [sp, #16]
 80453da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80453de:	4829      	ldr	r0, [pc, #164]	; (8045484 <_vfiprintf_r+0x224>)
 80453e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80453e4:	2206      	movs	r2, #6
 80453e6:	f7da ff23 	bl	8020230 <memchr>
 80453ea:	2800      	cmp	r0, #0
 80453ec:	d03f      	beq.n	804546e <_vfiprintf_r+0x20e>
 80453ee:	4b26      	ldr	r3, [pc, #152]	; (8045488 <_vfiprintf_r+0x228>)
 80453f0:	bb1b      	cbnz	r3, 804543a <_vfiprintf_r+0x1da>
 80453f2:	9b03      	ldr	r3, [sp, #12]
 80453f4:	3307      	adds	r3, #7
 80453f6:	f023 0307 	bic.w	r3, r3, #7
 80453fa:	3308      	adds	r3, #8
 80453fc:	9303      	str	r3, [sp, #12]
 80453fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8045400:	443b      	add	r3, r7
 8045402:	9309      	str	r3, [sp, #36]	; 0x24
 8045404:	e768      	b.n	80452d8 <_vfiprintf_r+0x78>
 8045406:	fb0c 3202 	mla	r2, ip, r2, r3
 804540a:	460c      	mov	r4, r1
 804540c:	2001      	movs	r0, #1
 804540e:	e7a6      	b.n	804535e <_vfiprintf_r+0xfe>
 8045410:	2300      	movs	r3, #0
 8045412:	3401      	adds	r4, #1
 8045414:	9305      	str	r3, [sp, #20]
 8045416:	4619      	mov	r1, r3
 8045418:	f04f 0c0a 	mov.w	ip, #10
 804541c:	4620      	mov	r0, r4
 804541e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8045422:	3a30      	subs	r2, #48	; 0x30
 8045424:	2a09      	cmp	r2, #9
 8045426:	d903      	bls.n	8045430 <_vfiprintf_r+0x1d0>
 8045428:	2b00      	cmp	r3, #0
 804542a:	d0c6      	beq.n	80453ba <_vfiprintf_r+0x15a>
 804542c:	9105      	str	r1, [sp, #20]
 804542e:	e7c4      	b.n	80453ba <_vfiprintf_r+0x15a>
 8045430:	fb0c 2101 	mla	r1, ip, r1, r2
 8045434:	4604      	mov	r4, r0
 8045436:	2301      	movs	r3, #1
 8045438:	e7f0      	b.n	804541c <_vfiprintf_r+0x1bc>
 804543a:	ab03      	add	r3, sp, #12
 804543c:	9300      	str	r3, [sp, #0]
 804543e:	462a      	mov	r2, r5
 8045440:	4b12      	ldr	r3, [pc, #72]	; (804548c <_vfiprintf_r+0x22c>)
 8045442:	a904      	add	r1, sp, #16
 8045444:	4630      	mov	r0, r6
 8045446:	f7fc fed3 	bl	80421f0 <_printf_float>
 804544a:	4607      	mov	r7, r0
 804544c:	1c78      	adds	r0, r7, #1
 804544e:	d1d6      	bne.n	80453fe <_vfiprintf_r+0x19e>
 8045450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8045452:	07d9      	lsls	r1, r3, #31
 8045454:	d405      	bmi.n	8045462 <_vfiprintf_r+0x202>
 8045456:	89ab      	ldrh	r3, [r5, #12]
 8045458:	059a      	lsls	r2, r3, #22
 804545a:	d402      	bmi.n	8045462 <_vfiprintf_r+0x202>
 804545c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804545e:	f7fd fc63 	bl	8042d28 <__retarget_lock_release_recursive>
 8045462:	89ab      	ldrh	r3, [r5, #12]
 8045464:	065b      	lsls	r3, r3, #25
 8045466:	f53f af1d 	bmi.w	80452a4 <_vfiprintf_r+0x44>
 804546a:	9809      	ldr	r0, [sp, #36]	; 0x24
 804546c:	e71c      	b.n	80452a8 <_vfiprintf_r+0x48>
 804546e:	ab03      	add	r3, sp, #12
 8045470:	9300      	str	r3, [sp, #0]
 8045472:	462a      	mov	r2, r5
 8045474:	4b05      	ldr	r3, [pc, #20]	; (804548c <_vfiprintf_r+0x22c>)
 8045476:	a904      	add	r1, sp, #16
 8045478:	4630      	mov	r0, r6
 804547a:	f7fd f95d 	bl	8042738 <_printf_i>
 804547e:	e7e4      	b.n	804544a <_vfiprintf_r+0x1ea>
 8045480:	0804a5fc 	.word	0x0804a5fc
 8045484:	0804a606 	.word	0x0804a606
 8045488:	080421f1 	.word	0x080421f1
 804548c:	0804523d 	.word	0x0804523d
 8045490:	0804a602 	.word	0x0804a602

08045494 <__swbuf_r>:
 8045494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045496:	460e      	mov	r6, r1
 8045498:	4614      	mov	r4, r2
 804549a:	4605      	mov	r5, r0
 804549c:	b118      	cbz	r0, 80454a6 <__swbuf_r+0x12>
 804549e:	6a03      	ldr	r3, [r0, #32]
 80454a0:	b90b      	cbnz	r3, 80454a6 <__swbuf_r+0x12>
 80454a2:	f7fd faf7 	bl	8042a94 <__sinit>
 80454a6:	69a3      	ldr	r3, [r4, #24]
 80454a8:	60a3      	str	r3, [r4, #8]
 80454aa:	89a3      	ldrh	r3, [r4, #12]
 80454ac:	071a      	lsls	r2, r3, #28
 80454ae:	d525      	bpl.n	80454fc <__swbuf_r+0x68>
 80454b0:	6923      	ldr	r3, [r4, #16]
 80454b2:	b31b      	cbz	r3, 80454fc <__swbuf_r+0x68>
 80454b4:	6823      	ldr	r3, [r4, #0]
 80454b6:	6922      	ldr	r2, [r4, #16]
 80454b8:	1a98      	subs	r0, r3, r2
 80454ba:	6963      	ldr	r3, [r4, #20]
 80454bc:	b2f6      	uxtb	r6, r6
 80454be:	4283      	cmp	r3, r0
 80454c0:	4637      	mov	r7, r6
 80454c2:	dc04      	bgt.n	80454ce <__swbuf_r+0x3a>
 80454c4:	4621      	mov	r1, r4
 80454c6:	4628      	mov	r0, r5
 80454c8:	f7ff fdca 	bl	8045060 <_fflush_r>
 80454cc:	b9e0      	cbnz	r0, 8045508 <__swbuf_r+0x74>
 80454ce:	68a3      	ldr	r3, [r4, #8]
 80454d0:	3b01      	subs	r3, #1
 80454d2:	60a3      	str	r3, [r4, #8]
 80454d4:	6823      	ldr	r3, [r4, #0]
 80454d6:	1c5a      	adds	r2, r3, #1
 80454d8:	6022      	str	r2, [r4, #0]
 80454da:	701e      	strb	r6, [r3, #0]
 80454dc:	6962      	ldr	r2, [r4, #20]
 80454de:	1c43      	adds	r3, r0, #1
 80454e0:	429a      	cmp	r2, r3
 80454e2:	d004      	beq.n	80454ee <__swbuf_r+0x5a>
 80454e4:	89a3      	ldrh	r3, [r4, #12]
 80454e6:	07db      	lsls	r3, r3, #31
 80454e8:	d506      	bpl.n	80454f8 <__swbuf_r+0x64>
 80454ea:	2e0a      	cmp	r6, #10
 80454ec:	d104      	bne.n	80454f8 <__swbuf_r+0x64>
 80454ee:	4621      	mov	r1, r4
 80454f0:	4628      	mov	r0, r5
 80454f2:	f7ff fdb5 	bl	8045060 <_fflush_r>
 80454f6:	b938      	cbnz	r0, 8045508 <__swbuf_r+0x74>
 80454f8:	4638      	mov	r0, r7
 80454fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80454fc:	4621      	mov	r1, r4
 80454fe:	4628      	mov	r0, r5
 8045500:	f000 f806 	bl	8045510 <__swsetup_r>
 8045504:	2800      	cmp	r0, #0
 8045506:	d0d5      	beq.n	80454b4 <__swbuf_r+0x20>
 8045508:	f04f 37ff 	mov.w	r7, #4294967295
 804550c:	e7f4      	b.n	80454f8 <__swbuf_r+0x64>
	...

08045510 <__swsetup_r>:
 8045510:	b538      	push	{r3, r4, r5, lr}
 8045512:	4b2a      	ldr	r3, [pc, #168]	; (80455bc <__swsetup_r+0xac>)
 8045514:	4605      	mov	r5, r0
 8045516:	6818      	ldr	r0, [r3, #0]
 8045518:	460c      	mov	r4, r1
 804551a:	b118      	cbz	r0, 8045524 <__swsetup_r+0x14>
 804551c:	6a03      	ldr	r3, [r0, #32]
 804551e:	b90b      	cbnz	r3, 8045524 <__swsetup_r+0x14>
 8045520:	f7fd fab8 	bl	8042a94 <__sinit>
 8045524:	89a3      	ldrh	r3, [r4, #12]
 8045526:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804552a:	0718      	lsls	r0, r3, #28
 804552c:	d422      	bmi.n	8045574 <__swsetup_r+0x64>
 804552e:	06d9      	lsls	r1, r3, #27
 8045530:	d407      	bmi.n	8045542 <__swsetup_r+0x32>
 8045532:	2309      	movs	r3, #9
 8045534:	602b      	str	r3, [r5, #0]
 8045536:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804553a:	81a3      	strh	r3, [r4, #12]
 804553c:	f04f 30ff 	mov.w	r0, #4294967295
 8045540:	e034      	b.n	80455ac <__swsetup_r+0x9c>
 8045542:	0758      	lsls	r0, r3, #29
 8045544:	d512      	bpl.n	804556c <__swsetup_r+0x5c>
 8045546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8045548:	b141      	cbz	r1, 804555c <__swsetup_r+0x4c>
 804554a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804554e:	4299      	cmp	r1, r3
 8045550:	d002      	beq.n	8045558 <__swsetup_r+0x48>
 8045552:	4628      	mov	r0, r5
 8045554:	f7fe fa82 	bl	8043a5c <_free_r>
 8045558:	2300      	movs	r3, #0
 804555a:	6363      	str	r3, [r4, #52]	; 0x34
 804555c:	89a3      	ldrh	r3, [r4, #12]
 804555e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8045562:	81a3      	strh	r3, [r4, #12]
 8045564:	2300      	movs	r3, #0
 8045566:	6063      	str	r3, [r4, #4]
 8045568:	6923      	ldr	r3, [r4, #16]
 804556a:	6023      	str	r3, [r4, #0]
 804556c:	89a3      	ldrh	r3, [r4, #12]
 804556e:	f043 0308 	orr.w	r3, r3, #8
 8045572:	81a3      	strh	r3, [r4, #12]
 8045574:	6923      	ldr	r3, [r4, #16]
 8045576:	b94b      	cbnz	r3, 804558c <__swsetup_r+0x7c>
 8045578:	89a3      	ldrh	r3, [r4, #12]
 804557a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804557e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045582:	d003      	beq.n	804558c <__swsetup_r+0x7c>
 8045584:	4621      	mov	r1, r4
 8045586:	4628      	mov	r0, r5
 8045588:	f000 f884 	bl	8045694 <__smakebuf_r>
 804558c:	89a0      	ldrh	r0, [r4, #12]
 804558e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8045592:	f010 0301 	ands.w	r3, r0, #1
 8045596:	d00a      	beq.n	80455ae <__swsetup_r+0x9e>
 8045598:	2300      	movs	r3, #0
 804559a:	60a3      	str	r3, [r4, #8]
 804559c:	6963      	ldr	r3, [r4, #20]
 804559e:	425b      	negs	r3, r3
 80455a0:	61a3      	str	r3, [r4, #24]
 80455a2:	6923      	ldr	r3, [r4, #16]
 80455a4:	b943      	cbnz	r3, 80455b8 <__swsetup_r+0xa8>
 80455a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80455aa:	d1c4      	bne.n	8045536 <__swsetup_r+0x26>
 80455ac:	bd38      	pop	{r3, r4, r5, pc}
 80455ae:	0781      	lsls	r1, r0, #30
 80455b0:	bf58      	it	pl
 80455b2:	6963      	ldrpl	r3, [r4, #20]
 80455b4:	60a3      	str	r3, [r4, #8]
 80455b6:	e7f4      	b.n	80455a2 <__swsetup_r+0x92>
 80455b8:	2000      	movs	r0, #0
 80455ba:	e7f7      	b.n	80455ac <__swsetup_r+0x9c>
 80455bc:	200036c8 	.word	0x200036c8

080455c0 <_raise_r>:
 80455c0:	291f      	cmp	r1, #31
 80455c2:	b538      	push	{r3, r4, r5, lr}
 80455c4:	4604      	mov	r4, r0
 80455c6:	460d      	mov	r5, r1
 80455c8:	d904      	bls.n	80455d4 <_raise_r+0x14>
 80455ca:	2316      	movs	r3, #22
 80455cc:	6003      	str	r3, [r0, #0]
 80455ce:	f04f 30ff 	mov.w	r0, #4294967295
 80455d2:	bd38      	pop	{r3, r4, r5, pc}
 80455d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80455d6:	b112      	cbz	r2, 80455de <_raise_r+0x1e>
 80455d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80455dc:	b94b      	cbnz	r3, 80455f2 <_raise_r+0x32>
 80455de:	4620      	mov	r0, r4
 80455e0:	f000 f830 	bl	8045644 <_getpid_r>
 80455e4:	462a      	mov	r2, r5
 80455e6:	4601      	mov	r1, r0
 80455e8:	4620      	mov	r0, r4
 80455ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80455ee:	f000 b817 	b.w	8045620 <_kill_r>
 80455f2:	2b01      	cmp	r3, #1
 80455f4:	d00a      	beq.n	804560c <_raise_r+0x4c>
 80455f6:	1c59      	adds	r1, r3, #1
 80455f8:	d103      	bne.n	8045602 <_raise_r+0x42>
 80455fa:	2316      	movs	r3, #22
 80455fc:	6003      	str	r3, [r0, #0]
 80455fe:	2001      	movs	r0, #1
 8045600:	e7e7      	b.n	80455d2 <_raise_r+0x12>
 8045602:	2400      	movs	r4, #0
 8045604:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8045608:	4628      	mov	r0, r5
 804560a:	4798      	blx	r3
 804560c:	2000      	movs	r0, #0
 804560e:	e7e0      	b.n	80455d2 <_raise_r+0x12>

08045610 <raise>:
 8045610:	4b02      	ldr	r3, [pc, #8]	; (804561c <raise+0xc>)
 8045612:	4601      	mov	r1, r0
 8045614:	6818      	ldr	r0, [r3, #0]
 8045616:	f7ff bfd3 	b.w	80455c0 <_raise_r>
 804561a:	bf00      	nop
 804561c:	200036c8 	.word	0x200036c8

08045620 <_kill_r>:
 8045620:	b538      	push	{r3, r4, r5, lr}
 8045622:	4d07      	ldr	r5, [pc, #28]	; (8045640 <_kill_r+0x20>)
 8045624:	2300      	movs	r3, #0
 8045626:	4604      	mov	r4, r0
 8045628:	4608      	mov	r0, r1
 804562a:	4611      	mov	r1, r2
 804562c:	602b      	str	r3, [r5, #0]
 804562e:	f7df fb81 	bl	8024d34 <_kill>
 8045632:	1c43      	adds	r3, r0, #1
 8045634:	d102      	bne.n	804563c <_kill_r+0x1c>
 8045636:	682b      	ldr	r3, [r5, #0]
 8045638:	b103      	cbz	r3, 804563c <_kill_r+0x1c>
 804563a:	6023      	str	r3, [r4, #0]
 804563c:	bd38      	pop	{r3, r4, r5, pc}
 804563e:	bf00      	nop
 8045640:	20010034 	.word	0x20010034

08045644 <_getpid_r>:
 8045644:	f7df bb6e 	b.w	8024d24 <_getpid>

08045648 <__swhatbuf_r>:
 8045648:	b570      	push	{r4, r5, r6, lr}
 804564a:	460c      	mov	r4, r1
 804564c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8045650:	2900      	cmp	r1, #0
 8045652:	b096      	sub	sp, #88	; 0x58
 8045654:	4615      	mov	r5, r2
 8045656:	461e      	mov	r6, r3
 8045658:	da0d      	bge.n	8045676 <__swhatbuf_r+0x2e>
 804565a:	89a3      	ldrh	r3, [r4, #12]
 804565c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8045660:	f04f 0100 	mov.w	r1, #0
 8045664:	bf0c      	ite	eq
 8045666:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 804566a:	2340      	movne	r3, #64	; 0x40
 804566c:	2000      	movs	r0, #0
 804566e:	6031      	str	r1, [r6, #0]
 8045670:	602b      	str	r3, [r5, #0]
 8045672:	b016      	add	sp, #88	; 0x58
 8045674:	bd70      	pop	{r4, r5, r6, pc}
 8045676:	466a      	mov	r2, sp
 8045678:	f000 f848 	bl	804570c <_fstat_r>
 804567c:	2800      	cmp	r0, #0
 804567e:	dbec      	blt.n	804565a <__swhatbuf_r+0x12>
 8045680:	9901      	ldr	r1, [sp, #4]
 8045682:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8045686:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 804568a:	4259      	negs	r1, r3
 804568c:	4159      	adcs	r1, r3
 804568e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8045692:	e7eb      	b.n	804566c <__swhatbuf_r+0x24>

08045694 <__smakebuf_r>:
 8045694:	898b      	ldrh	r3, [r1, #12]
 8045696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8045698:	079d      	lsls	r5, r3, #30
 804569a:	4606      	mov	r6, r0
 804569c:	460c      	mov	r4, r1
 804569e:	d507      	bpl.n	80456b0 <__smakebuf_r+0x1c>
 80456a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80456a4:	6023      	str	r3, [r4, #0]
 80456a6:	6123      	str	r3, [r4, #16]
 80456a8:	2301      	movs	r3, #1
 80456aa:	6163      	str	r3, [r4, #20]
 80456ac:	b002      	add	sp, #8
 80456ae:	bd70      	pop	{r4, r5, r6, pc}
 80456b0:	ab01      	add	r3, sp, #4
 80456b2:	466a      	mov	r2, sp
 80456b4:	f7ff ffc8 	bl	8045648 <__swhatbuf_r>
 80456b8:	9900      	ldr	r1, [sp, #0]
 80456ba:	4605      	mov	r5, r0
 80456bc:	4630      	mov	r0, r6
 80456be:	f7fe fd99 	bl	80441f4 <_malloc_r>
 80456c2:	b948      	cbnz	r0, 80456d8 <__smakebuf_r+0x44>
 80456c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80456c8:	059a      	lsls	r2, r3, #22
 80456ca:	d4ef      	bmi.n	80456ac <__smakebuf_r+0x18>
 80456cc:	f023 0303 	bic.w	r3, r3, #3
 80456d0:	f043 0302 	orr.w	r3, r3, #2
 80456d4:	81a3      	strh	r3, [r4, #12]
 80456d6:	e7e3      	b.n	80456a0 <__smakebuf_r+0xc>
 80456d8:	89a3      	ldrh	r3, [r4, #12]
 80456da:	6020      	str	r0, [r4, #0]
 80456dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80456e0:	81a3      	strh	r3, [r4, #12]
 80456e2:	9b00      	ldr	r3, [sp, #0]
 80456e4:	6163      	str	r3, [r4, #20]
 80456e6:	9b01      	ldr	r3, [sp, #4]
 80456e8:	6120      	str	r0, [r4, #16]
 80456ea:	b15b      	cbz	r3, 8045704 <__smakebuf_r+0x70>
 80456ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80456f0:	4630      	mov	r0, r6
 80456f2:	f000 f81d 	bl	8045730 <_isatty_r>
 80456f6:	b128      	cbz	r0, 8045704 <__smakebuf_r+0x70>
 80456f8:	89a3      	ldrh	r3, [r4, #12]
 80456fa:	f023 0303 	bic.w	r3, r3, #3
 80456fe:	f043 0301 	orr.w	r3, r3, #1
 8045702:	81a3      	strh	r3, [r4, #12]
 8045704:	89a3      	ldrh	r3, [r4, #12]
 8045706:	431d      	orrs	r5, r3
 8045708:	81a5      	strh	r5, [r4, #12]
 804570a:	e7cf      	b.n	80456ac <__smakebuf_r+0x18>

0804570c <_fstat_r>:
 804570c:	b538      	push	{r3, r4, r5, lr}
 804570e:	4d07      	ldr	r5, [pc, #28]	; (804572c <_fstat_r+0x20>)
 8045710:	2300      	movs	r3, #0
 8045712:	4604      	mov	r4, r0
 8045714:	4608      	mov	r0, r1
 8045716:	4611      	mov	r1, r2
 8045718:	602b      	str	r3, [r5, #0]
 804571a:	f7df fb6a 	bl	8024df2 <_fstat>
 804571e:	1c43      	adds	r3, r0, #1
 8045720:	d102      	bne.n	8045728 <_fstat_r+0x1c>
 8045722:	682b      	ldr	r3, [r5, #0]
 8045724:	b103      	cbz	r3, 8045728 <_fstat_r+0x1c>
 8045726:	6023      	str	r3, [r4, #0]
 8045728:	bd38      	pop	{r3, r4, r5, pc}
 804572a:	bf00      	nop
 804572c:	20010034 	.word	0x20010034

08045730 <_isatty_r>:
 8045730:	b538      	push	{r3, r4, r5, lr}
 8045732:	4d06      	ldr	r5, [pc, #24]	; (804574c <_isatty_r+0x1c>)
 8045734:	2300      	movs	r3, #0
 8045736:	4604      	mov	r4, r0
 8045738:	4608      	mov	r0, r1
 804573a:	602b      	str	r3, [r5, #0]
 804573c:	f7df fb69 	bl	8024e12 <_isatty>
 8045740:	1c43      	adds	r3, r0, #1
 8045742:	d102      	bne.n	804574a <_isatty_r+0x1a>
 8045744:	682b      	ldr	r3, [r5, #0]
 8045746:	b103      	cbz	r3, 804574a <_isatty_r+0x1a>
 8045748:	6023      	str	r3, [r4, #0]
 804574a:	bd38      	pop	{r3, r4, r5, pc}
 804574c:	20010034 	.word	0x20010034

08045750 <sin>:
 8045750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8045752:	ec53 2b10 	vmov	r2, r3, d0
 8045756:	4828      	ldr	r0, [pc, #160]	; (80457f8 <sin+0xa8>)
 8045758:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 804575c:	4281      	cmp	r1, r0
 804575e:	dc07      	bgt.n	8045770 <sin+0x20>
 8045760:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80457f0 <sin+0xa0>
 8045764:	2000      	movs	r0, #0
 8045766:	b005      	add	sp, #20
 8045768:	f85d eb04 	ldr.w	lr, [sp], #4
 804576c:	f000 b910 	b.w	8045990 <__kernel_sin>
 8045770:	4822      	ldr	r0, [pc, #136]	; (80457fc <sin+0xac>)
 8045772:	4281      	cmp	r1, r0
 8045774:	dd09      	ble.n	804578a <sin+0x3a>
 8045776:	ee10 0a10 	vmov	r0, s0
 804577a:	4619      	mov	r1, r3
 804577c:	f7da fdb4 	bl	80202e8 <__aeabi_dsub>
 8045780:	ec41 0b10 	vmov	d0, r0, r1
 8045784:	b005      	add	sp, #20
 8045786:	f85d fb04 	ldr.w	pc, [sp], #4
 804578a:	4668      	mov	r0, sp
 804578c:	f000 f9c0 	bl	8045b10 <__ieee754_rem_pio2>
 8045790:	f000 0003 	and.w	r0, r0, #3
 8045794:	2801      	cmp	r0, #1
 8045796:	d00c      	beq.n	80457b2 <sin+0x62>
 8045798:	2802      	cmp	r0, #2
 804579a:	d011      	beq.n	80457c0 <sin+0x70>
 804579c:	b9f0      	cbnz	r0, 80457dc <sin+0x8c>
 804579e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80457a2:	ed9d 0b00 	vldr	d0, [sp]
 80457a6:	2001      	movs	r0, #1
 80457a8:	f000 f8f2 	bl	8045990 <__kernel_sin>
 80457ac:	ec51 0b10 	vmov	r0, r1, d0
 80457b0:	e7e6      	b.n	8045780 <sin+0x30>
 80457b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80457b6:	ed9d 0b00 	vldr	d0, [sp]
 80457ba:	f000 f821 	bl	8045800 <__kernel_cos>
 80457be:	e7f5      	b.n	80457ac <sin+0x5c>
 80457c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80457c4:	ed9d 0b00 	vldr	d0, [sp]
 80457c8:	2001      	movs	r0, #1
 80457ca:	f000 f8e1 	bl	8045990 <__kernel_sin>
 80457ce:	ec53 2b10 	vmov	r2, r3, d0
 80457d2:	ee10 0a10 	vmov	r0, s0
 80457d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80457da:	e7d1      	b.n	8045780 <sin+0x30>
 80457dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80457e0:	ed9d 0b00 	vldr	d0, [sp]
 80457e4:	f000 f80c 	bl	8045800 <__kernel_cos>
 80457e8:	e7f1      	b.n	80457ce <sin+0x7e>
 80457ea:	bf00      	nop
 80457ec:	f3af 8000 	nop.w
	...
 80457f8:	3fe921fb 	.word	0x3fe921fb
 80457fc:	7fefffff 	.word	0x7fefffff

08045800 <__kernel_cos>:
 8045800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045804:	ec57 6b10 	vmov	r6, r7, d0
 8045808:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 804580c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8045810:	ed8d 1b00 	vstr	d1, [sp]
 8045814:	da07      	bge.n	8045826 <__kernel_cos+0x26>
 8045816:	ee10 0a10 	vmov	r0, s0
 804581a:	4639      	mov	r1, r7
 804581c:	f7db f9cc 	bl	8020bb8 <__aeabi_d2iz>
 8045820:	2800      	cmp	r0, #0
 8045822:	f000 8088 	beq.w	8045936 <__kernel_cos+0x136>
 8045826:	4632      	mov	r2, r6
 8045828:	463b      	mov	r3, r7
 804582a:	4630      	mov	r0, r6
 804582c:	4639      	mov	r1, r7
 804582e:	f7da ff13 	bl	8020658 <__aeabi_dmul>
 8045832:	4b51      	ldr	r3, [pc, #324]	; (8045978 <__kernel_cos+0x178>)
 8045834:	2200      	movs	r2, #0
 8045836:	4604      	mov	r4, r0
 8045838:	460d      	mov	r5, r1
 804583a:	f7da ff0d 	bl	8020658 <__aeabi_dmul>
 804583e:	a340      	add	r3, pc, #256	; (adr r3, 8045940 <__kernel_cos+0x140>)
 8045840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045844:	4682      	mov	sl, r0
 8045846:	468b      	mov	fp, r1
 8045848:	4620      	mov	r0, r4
 804584a:	4629      	mov	r1, r5
 804584c:	f7da ff04 	bl	8020658 <__aeabi_dmul>
 8045850:	a33d      	add	r3, pc, #244	; (adr r3, 8045948 <__kernel_cos+0x148>)
 8045852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045856:	f7da fd49 	bl	80202ec <__adddf3>
 804585a:	4622      	mov	r2, r4
 804585c:	462b      	mov	r3, r5
 804585e:	f7da fefb 	bl	8020658 <__aeabi_dmul>
 8045862:	a33b      	add	r3, pc, #236	; (adr r3, 8045950 <__kernel_cos+0x150>)
 8045864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045868:	f7da fd3e 	bl	80202e8 <__aeabi_dsub>
 804586c:	4622      	mov	r2, r4
 804586e:	462b      	mov	r3, r5
 8045870:	f7da fef2 	bl	8020658 <__aeabi_dmul>
 8045874:	a338      	add	r3, pc, #224	; (adr r3, 8045958 <__kernel_cos+0x158>)
 8045876:	e9d3 2300 	ldrd	r2, r3, [r3]
 804587a:	f7da fd37 	bl	80202ec <__adddf3>
 804587e:	4622      	mov	r2, r4
 8045880:	462b      	mov	r3, r5
 8045882:	f7da fee9 	bl	8020658 <__aeabi_dmul>
 8045886:	a336      	add	r3, pc, #216	; (adr r3, 8045960 <__kernel_cos+0x160>)
 8045888:	e9d3 2300 	ldrd	r2, r3, [r3]
 804588c:	f7da fd2c 	bl	80202e8 <__aeabi_dsub>
 8045890:	4622      	mov	r2, r4
 8045892:	462b      	mov	r3, r5
 8045894:	f7da fee0 	bl	8020658 <__aeabi_dmul>
 8045898:	a333      	add	r3, pc, #204	; (adr r3, 8045968 <__kernel_cos+0x168>)
 804589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804589e:	f7da fd25 	bl	80202ec <__adddf3>
 80458a2:	4622      	mov	r2, r4
 80458a4:	462b      	mov	r3, r5
 80458a6:	f7da fed7 	bl	8020658 <__aeabi_dmul>
 80458aa:	4622      	mov	r2, r4
 80458ac:	462b      	mov	r3, r5
 80458ae:	f7da fed3 	bl	8020658 <__aeabi_dmul>
 80458b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80458b6:	4604      	mov	r4, r0
 80458b8:	460d      	mov	r5, r1
 80458ba:	4630      	mov	r0, r6
 80458bc:	4639      	mov	r1, r7
 80458be:	f7da fecb 	bl	8020658 <__aeabi_dmul>
 80458c2:	460b      	mov	r3, r1
 80458c4:	4602      	mov	r2, r0
 80458c6:	4629      	mov	r1, r5
 80458c8:	4620      	mov	r0, r4
 80458ca:	f7da fd0d 	bl	80202e8 <__aeabi_dsub>
 80458ce:	4b2b      	ldr	r3, [pc, #172]	; (804597c <__kernel_cos+0x17c>)
 80458d0:	4598      	cmp	r8, r3
 80458d2:	4606      	mov	r6, r0
 80458d4:	460f      	mov	r7, r1
 80458d6:	dc10      	bgt.n	80458fa <__kernel_cos+0xfa>
 80458d8:	4602      	mov	r2, r0
 80458da:	460b      	mov	r3, r1
 80458dc:	4650      	mov	r0, sl
 80458de:	4659      	mov	r1, fp
 80458e0:	f7da fd02 	bl	80202e8 <__aeabi_dsub>
 80458e4:	460b      	mov	r3, r1
 80458e6:	4926      	ldr	r1, [pc, #152]	; (8045980 <__kernel_cos+0x180>)
 80458e8:	4602      	mov	r2, r0
 80458ea:	2000      	movs	r0, #0
 80458ec:	f7da fcfc 	bl	80202e8 <__aeabi_dsub>
 80458f0:	ec41 0b10 	vmov	d0, r0, r1
 80458f4:	b003      	add	sp, #12
 80458f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80458fa:	4b22      	ldr	r3, [pc, #136]	; (8045984 <__kernel_cos+0x184>)
 80458fc:	4920      	ldr	r1, [pc, #128]	; (8045980 <__kernel_cos+0x180>)
 80458fe:	4598      	cmp	r8, r3
 8045900:	bfcc      	ite	gt
 8045902:	4d21      	ldrgt	r5, [pc, #132]	; (8045988 <__kernel_cos+0x188>)
 8045904:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8045908:	2400      	movs	r4, #0
 804590a:	4622      	mov	r2, r4
 804590c:	462b      	mov	r3, r5
 804590e:	2000      	movs	r0, #0
 8045910:	f7da fcea 	bl	80202e8 <__aeabi_dsub>
 8045914:	4622      	mov	r2, r4
 8045916:	4680      	mov	r8, r0
 8045918:	4689      	mov	r9, r1
 804591a:	462b      	mov	r3, r5
 804591c:	4650      	mov	r0, sl
 804591e:	4659      	mov	r1, fp
 8045920:	f7da fce2 	bl	80202e8 <__aeabi_dsub>
 8045924:	4632      	mov	r2, r6
 8045926:	463b      	mov	r3, r7
 8045928:	f7da fcde 	bl	80202e8 <__aeabi_dsub>
 804592c:	4602      	mov	r2, r0
 804592e:	460b      	mov	r3, r1
 8045930:	4640      	mov	r0, r8
 8045932:	4649      	mov	r1, r9
 8045934:	e7da      	b.n	80458ec <__kernel_cos+0xec>
 8045936:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8045970 <__kernel_cos+0x170>
 804593a:	e7db      	b.n	80458f4 <__kernel_cos+0xf4>
 804593c:	f3af 8000 	nop.w
 8045940:	be8838d4 	.word	0xbe8838d4
 8045944:	bda8fae9 	.word	0xbda8fae9
 8045948:	bdb4b1c4 	.word	0xbdb4b1c4
 804594c:	3e21ee9e 	.word	0x3e21ee9e
 8045950:	809c52ad 	.word	0x809c52ad
 8045954:	3e927e4f 	.word	0x3e927e4f
 8045958:	19cb1590 	.word	0x19cb1590
 804595c:	3efa01a0 	.word	0x3efa01a0
 8045960:	16c15177 	.word	0x16c15177
 8045964:	3f56c16c 	.word	0x3f56c16c
 8045968:	5555554c 	.word	0x5555554c
 804596c:	3fa55555 	.word	0x3fa55555
 8045970:	00000000 	.word	0x00000000
 8045974:	3ff00000 	.word	0x3ff00000
 8045978:	3fe00000 	.word	0x3fe00000
 804597c:	3fd33332 	.word	0x3fd33332
 8045980:	3ff00000 	.word	0x3ff00000
 8045984:	3fe90000 	.word	0x3fe90000
 8045988:	3fd20000 	.word	0x3fd20000
 804598c:	00000000 	.word	0x00000000

08045990 <__kernel_sin>:
 8045990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045994:	ed2d 8b04 	vpush	{d8-d9}
 8045998:	eeb0 8a41 	vmov.f32	s16, s2
 804599c:	eef0 8a61 	vmov.f32	s17, s3
 80459a0:	ec55 4b10 	vmov	r4, r5, d0
 80459a4:	b083      	sub	sp, #12
 80459a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80459aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80459ae:	9001      	str	r0, [sp, #4]
 80459b0:	da06      	bge.n	80459c0 <__kernel_sin+0x30>
 80459b2:	ee10 0a10 	vmov	r0, s0
 80459b6:	4629      	mov	r1, r5
 80459b8:	f7db f8fe 	bl	8020bb8 <__aeabi_d2iz>
 80459bc:	2800      	cmp	r0, #0
 80459be:	d051      	beq.n	8045a64 <__kernel_sin+0xd4>
 80459c0:	4622      	mov	r2, r4
 80459c2:	462b      	mov	r3, r5
 80459c4:	4620      	mov	r0, r4
 80459c6:	4629      	mov	r1, r5
 80459c8:	f7da fe46 	bl	8020658 <__aeabi_dmul>
 80459cc:	4682      	mov	sl, r0
 80459ce:	468b      	mov	fp, r1
 80459d0:	4602      	mov	r2, r0
 80459d2:	460b      	mov	r3, r1
 80459d4:	4620      	mov	r0, r4
 80459d6:	4629      	mov	r1, r5
 80459d8:	f7da fe3e 	bl	8020658 <__aeabi_dmul>
 80459dc:	a341      	add	r3, pc, #260	; (adr r3, 8045ae4 <__kernel_sin+0x154>)
 80459de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80459e2:	4680      	mov	r8, r0
 80459e4:	4689      	mov	r9, r1
 80459e6:	4650      	mov	r0, sl
 80459e8:	4659      	mov	r1, fp
 80459ea:	f7da fe35 	bl	8020658 <__aeabi_dmul>
 80459ee:	a33f      	add	r3, pc, #252	; (adr r3, 8045aec <__kernel_sin+0x15c>)
 80459f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80459f4:	f7da fc78 	bl	80202e8 <__aeabi_dsub>
 80459f8:	4652      	mov	r2, sl
 80459fa:	465b      	mov	r3, fp
 80459fc:	f7da fe2c 	bl	8020658 <__aeabi_dmul>
 8045a00:	a33c      	add	r3, pc, #240	; (adr r3, 8045af4 <__kernel_sin+0x164>)
 8045a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045a06:	f7da fc71 	bl	80202ec <__adddf3>
 8045a0a:	4652      	mov	r2, sl
 8045a0c:	465b      	mov	r3, fp
 8045a0e:	f7da fe23 	bl	8020658 <__aeabi_dmul>
 8045a12:	a33a      	add	r3, pc, #232	; (adr r3, 8045afc <__kernel_sin+0x16c>)
 8045a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045a18:	f7da fc66 	bl	80202e8 <__aeabi_dsub>
 8045a1c:	4652      	mov	r2, sl
 8045a1e:	465b      	mov	r3, fp
 8045a20:	f7da fe1a 	bl	8020658 <__aeabi_dmul>
 8045a24:	a337      	add	r3, pc, #220	; (adr r3, 8045b04 <__kernel_sin+0x174>)
 8045a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045a2a:	f7da fc5f 	bl	80202ec <__adddf3>
 8045a2e:	9b01      	ldr	r3, [sp, #4]
 8045a30:	4606      	mov	r6, r0
 8045a32:	460f      	mov	r7, r1
 8045a34:	b9eb      	cbnz	r3, 8045a72 <__kernel_sin+0xe2>
 8045a36:	4602      	mov	r2, r0
 8045a38:	460b      	mov	r3, r1
 8045a3a:	4650      	mov	r0, sl
 8045a3c:	4659      	mov	r1, fp
 8045a3e:	f7da fe0b 	bl	8020658 <__aeabi_dmul>
 8045a42:	a325      	add	r3, pc, #148	; (adr r3, 8045ad8 <__kernel_sin+0x148>)
 8045a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045a48:	f7da fc4e 	bl	80202e8 <__aeabi_dsub>
 8045a4c:	4642      	mov	r2, r8
 8045a4e:	464b      	mov	r3, r9
 8045a50:	f7da fe02 	bl	8020658 <__aeabi_dmul>
 8045a54:	4602      	mov	r2, r0
 8045a56:	460b      	mov	r3, r1
 8045a58:	4620      	mov	r0, r4
 8045a5a:	4629      	mov	r1, r5
 8045a5c:	f7da fc46 	bl	80202ec <__adddf3>
 8045a60:	4604      	mov	r4, r0
 8045a62:	460d      	mov	r5, r1
 8045a64:	ec45 4b10 	vmov	d0, r4, r5
 8045a68:	b003      	add	sp, #12
 8045a6a:	ecbd 8b04 	vpop	{d8-d9}
 8045a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8045a72:	4b1b      	ldr	r3, [pc, #108]	; (8045ae0 <__kernel_sin+0x150>)
 8045a74:	ec51 0b18 	vmov	r0, r1, d8
 8045a78:	2200      	movs	r2, #0
 8045a7a:	f7da fded 	bl	8020658 <__aeabi_dmul>
 8045a7e:	4632      	mov	r2, r6
 8045a80:	ec41 0b19 	vmov	d9, r0, r1
 8045a84:	463b      	mov	r3, r7
 8045a86:	4640      	mov	r0, r8
 8045a88:	4649      	mov	r1, r9
 8045a8a:	f7da fde5 	bl	8020658 <__aeabi_dmul>
 8045a8e:	4602      	mov	r2, r0
 8045a90:	460b      	mov	r3, r1
 8045a92:	ec51 0b19 	vmov	r0, r1, d9
 8045a96:	f7da fc27 	bl	80202e8 <__aeabi_dsub>
 8045a9a:	4652      	mov	r2, sl
 8045a9c:	465b      	mov	r3, fp
 8045a9e:	f7da fddb 	bl	8020658 <__aeabi_dmul>
 8045aa2:	ec53 2b18 	vmov	r2, r3, d8
 8045aa6:	f7da fc1f 	bl	80202e8 <__aeabi_dsub>
 8045aaa:	a30b      	add	r3, pc, #44	; (adr r3, 8045ad8 <__kernel_sin+0x148>)
 8045aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045ab0:	4606      	mov	r6, r0
 8045ab2:	460f      	mov	r7, r1
 8045ab4:	4640      	mov	r0, r8
 8045ab6:	4649      	mov	r1, r9
 8045ab8:	f7da fdce 	bl	8020658 <__aeabi_dmul>
 8045abc:	4602      	mov	r2, r0
 8045abe:	460b      	mov	r3, r1
 8045ac0:	4630      	mov	r0, r6
 8045ac2:	4639      	mov	r1, r7
 8045ac4:	f7da fc12 	bl	80202ec <__adddf3>
 8045ac8:	4602      	mov	r2, r0
 8045aca:	460b      	mov	r3, r1
 8045acc:	4620      	mov	r0, r4
 8045ace:	4629      	mov	r1, r5
 8045ad0:	f7da fc0a 	bl	80202e8 <__aeabi_dsub>
 8045ad4:	e7c4      	b.n	8045a60 <__kernel_sin+0xd0>
 8045ad6:	bf00      	nop
 8045ad8:	55555549 	.word	0x55555549
 8045adc:	3fc55555 	.word	0x3fc55555
 8045ae0:	3fe00000 	.word	0x3fe00000
 8045ae4:	5acfd57c 	.word	0x5acfd57c
 8045ae8:	3de5d93a 	.word	0x3de5d93a
 8045aec:	8a2b9ceb 	.word	0x8a2b9ceb
 8045af0:	3e5ae5e6 	.word	0x3e5ae5e6
 8045af4:	57b1fe7d 	.word	0x57b1fe7d
 8045af8:	3ec71de3 	.word	0x3ec71de3
 8045afc:	19c161d5 	.word	0x19c161d5
 8045b00:	3f2a01a0 	.word	0x3f2a01a0
 8045b04:	1110f8a6 	.word	0x1110f8a6
 8045b08:	3f811111 	.word	0x3f811111
 8045b0c:	00000000 	.word	0x00000000

08045b10 <__ieee754_rem_pio2>:
 8045b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045b14:	ed2d 8b02 	vpush	{d8}
 8045b18:	ec55 4b10 	vmov	r4, r5, d0
 8045b1c:	4bca      	ldr	r3, [pc, #808]	; (8045e48 <__ieee754_rem_pio2+0x338>)
 8045b1e:	b08b      	sub	sp, #44	; 0x2c
 8045b20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8045b24:	4598      	cmp	r8, r3
 8045b26:	4682      	mov	sl, r0
 8045b28:	9502      	str	r5, [sp, #8]
 8045b2a:	dc08      	bgt.n	8045b3e <__ieee754_rem_pio2+0x2e>
 8045b2c:	2200      	movs	r2, #0
 8045b2e:	2300      	movs	r3, #0
 8045b30:	ed80 0b00 	vstr	d0, [r0]
 8045b34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8045b38:	f04f 0b00 	mov.w	fp, #0
 8045b3c:	e028      	b.n	8045b90 <__ieee754_rem_pio2+0x80>
 8045b3e:	4bc3      	ldr	r3, [pc, #780]	; (8045e4c <__ieee754_rem_pio2+0x33c>)
 8045b40:	4598      	cmp	r8, r3
 8045b42:	dc78      	bgt.n	8045c36 <__ieee754_rem_pio2+0x126>
 8045b44:	9b02      	ldr	r3, [sp, #8]
 8045b46:	4ec2      	ldr	r6, [pc, #776]	; (8045e50 <__ieee754_rem_pio2+0x340>)
 8045b48:	2b00      	cmp	r3, #0
 8045b4a:	ee10 0a10 	vmov	r0, s0
 8045b4e:	a3b0      	add	r3, pc, #704	; (adr r3, 8045e10 <__ieee754_rem_pio2+0x300>)
 8045b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045b54:	4629      	mov	r1, r5
 8045b56:	dd39      	ble.n	8045bcc <__ieee754_rem_pio2+0xbc>
 8045b58:	f7da fbc6 	bl	80202e8 <__aeabi_dsub>
 8045b5c:	45b0      	cmp	r8, r6
 8045b5e:	4604      	mov	r4, r0
 8045b60:	460d      	mov	r5, r1
 8045b62:	d01b      	beq.n	8045b9c <__ieee754_rem_pio2+0x8c>
 8045b64:	a3ac      	add	r3, pc, #688	; (adr r3, 8045e18 <__ieee754_rem_pio2+0x308>)
 8045b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045b6a:	f7da fbbd 	bl	80202e8 <__aeabi_dsub>
 8045b6e:	4602      	mov	r2, r0
 8045b70:	460b      	mov	r3, r1
 8045b72:	e9ca 2300 	strd	r2, r3, [sl]
 8045b76:	4620      	mov	r0, r4
 8045b78:	4629      	mov	r1, r5
 8045b7a:	f7da fbb5 	bl	80202e8 <__aeabi_dsub>
 8045b7e:	a3a6      	add	r3, pc, #664	; (adr r3, 8045e18 <__ieee754_rem_pio2+0x308>)
 8045b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045b84:	f7da fbb0 	bl	80202e8 <__aeabi_dsub>
 8045b88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8045b8c:	f04f 0b01 	mov.w	fp, #1
 8045b90:	4658      	mov	r0, fp
 8045b92:	b00b      	add	sp, #44	; 0x2c
 8045b94:	ecbd 8b02 	vpop	{d8}
 8045b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8045b9c:	a3a0      	add	r3, pc, #640	; (adr r3, 8045e20 <__ieee754_rem_pio2+0x310>)
 8045b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045ba2:	f7da fba1 	bl	80202e8 <__aeabi_dsub>
 8045ba6:	a3a0      	add	r3, pc, #640	; (adr r3, 8045e28 <__ieee754_rem_pio2+0x318>)
 8045ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045bac:	4604      	mov	r4, r0
 8045bae:	460d      	mov	r5, r1
 8045bb0:	f7da fb9a 	bl	80202e8 <__aeabi_dsub>
 8045bb4:	4602      	mov	r2, r0
 8045bb6:	460b      	mov	r3, r1
 8045bb8:	e9ca 2300 	strd	r2, r3, [sl]
 8045bbc:	4620      	mov	r0, r4
 8045bbe:	4629      	mov	r1, r5
 8045bc0:	f7da fb92 	bl	80202e8 <__aeabi_dsub>
 8045bc4:	a398      	add	r3, pc, #608	; (adr r3, 8045e28 <__ieee754_rem_pio2+0x318>)
 8045bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045bca:	e7db      	b.n	8045b84 <__ieee754_rem_pio2+0x74>
 8045bcc:	f7da fb8e 	bl	80202ec <__adddf3>
 8045bd0:	45b0      	cmp	r8, r6
 8045bd2:	4604      	mov	r4, r0
 8045bd4:	460d      	mov	r5, r1
 8045bd6:	d016      	beq.n	8045c06 <__ieee754_rem_pio2+0xf6>
 8045bd8:	a38f      	add	r3, pc, #572	; (adr r3, 8045e18 <__ieee754_rem_pio2+0x308>)
 8045bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045bde:	f7da fb85 	bl	80202ec <__adddf3>
 8045be2:	4602      	mov	r2, r0
 8045be4:	460b      	mov	r3, r1
 8045be6:	e9ca 2300 	strd	r2, r3, [sl]
 8045bea:	4620      	mov	r0, r4
 8045bec:	4629      	mov	r1, r5
 8045bee:	f7da fb7b 	bl	80202e8 <__aeabi_dsub>
 8045bf2:	a389      	add	r3, pc, #548	; (adr r3, 8045e18 <__ieee754_rem_pio2+0x308>)
 8045bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045bf8:	f7da fb78 	bl	80202ec <__adddf3>
 8045bfc:	f04f 3bff 	mov.w	fp, #4294967295
 8045c00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8045c04:	e7c4      	b.n	8045b90 <__ieee754_rem_pio2+0x80>
 8045c06:	a386      	add	r3, pc, #536	; (adr r3, 8045e20 <__ieee754_rem_pio2+0x310>)
 8045c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045c0c:	f7da fb6e 	bl	80202ec <__adddf3>
 8045c10:	a385      	add	r3, pc, #532	; (adr r3, 8045e28 <__ieee754_rem_pio2+0x318>)
 8045c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045c16:	4604      	mov	r4, r0
 8045c18:	460d      	mov	r5, r1
 8045c1a:	f7da fb67 	bl	80202ec <__adddf3>
 8045c1e:	4602      	mov	r2, r0
 8045c20:	460b      	mov	r3, r1
 8045c22:	e9ca 2300 	strd	r2, r3, [sl]
 8045c26:	4620      	mov	r0, r4
 8045c28:	4629      	mov	r1, r5
 8045c2a:	f7da fb5d 	bl	80202e8 <__aeabi_dsub>
 8045c2e:	a37e      	add	r3, pc, #504	; (adr r3, 8045e28 <__ieee754_rem_pio2+0x318>)
 8045c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045c34:	e7e0      	b.n	8045bf8 <__ieee754_rem_pio2+0xe8>
 8045c36:	4b87      	ldr	r3, [pc, #540]	; (8045e54 <__ieee754_rem_pio2+0x344>)
 8045c38:	4598      	cmp	r8, r3
 8045c3a:	f300 80d8 	bgt.w	8045dee <__ieee754_rem_pio2+0x2de>
 8045c3e:	f000 f96d 	bl	8045f1c <fabs>
 8045c42:	ec55 4b10 	vmov	r4, r5, d0
 8045c46:	ee10 0a10 	vmov	r0, s0
 8045c4a:	a379      	add	r3, pc, #484	; (adr r3, 8045e30 <__ieee754_rem_pio2+0x320>)
 8045c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045c50:	4629      	mov	r1, r5
 8045c52:	f7da fd01 	bl	8020658 <__aeabi_dmul>
 8045c56:	4b80      	ldr	r3, [pc, #512]	; (8045e58 <__ieee754_rem_pio2+0x348>)
 8045c58:	2200      	movs	r2, #0
 8045c5a:	f7da fb47 	bl	80202ec <__adddf3>
 8045c5e:	f7da ffab 	bl	8020bb8 <__aeabi_d2iz>
 8045c62:	4683      	mov	fp, r0
 8045c64:	f7da fc8e 	bl	8020584 <__aeabi_i2d>
 8045c68:	4602      	mov	r2, r0
 8045c6a:	460b      	mov	r3, r1
 8045c6c:	ec43 2b18 	vmov	d8, r2, r3
 8045c70:	a367      	add	r3, pc, #412	; (adr r3, 8045e10 <__ieee754_rem_pio2+0x300>)
 8045c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045c76:	f7da fcef 	bl	8020658 <__aeabi_dmul>
 8045c7a:	4602      	mov	r2, r0
 8045c7c:	460b      	mov	r3, r1
 8045c7e:	4620      	mov	r0, r4
 8045c80:	4629      	mov	r1, r5
 8045c82:	f7da fb31 	bl	80202e8 <__aeabi_dsub>
 8045c86:	a364      	add	r3, pc, #400	; (adr r3, 8045e18 <__ieee754_rem_pio2+0x308>)
 8045c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045c8c:	4606      	mov	r6, r0
 8045c8e:	460f      	mov	r7, r1
 8045c90:	ec51 0b18 	vmov	r0, r1, d8
 8045c94:	f7da fce0 	bl	8020658 <__aeabi_dmul>
 8045c98:	f1bb 0f1f 	cmp.w	fp, #31
 8045c9c:	4604      	mov	r4, r0
 8045c9e:	460d      	mov	r5, r1
 8045ca0:	dc0d      	bgt.n	8045cbe <__ieee754_rem_pio2+0x1ae>
 8045ca2:	4b6e      	ldr	r3, [pc, #440]	; (8045e5c <__ieee754_rem_pio2+0x34c>)
 8045ca4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8045ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8045cac:	4543      	cmp	r3, r8
 8045cae:	d006      	beq.n	8045cbe <__ieee754_rem_pio2+0x1ae>
 8045cb0:	4622      	mov	r2, r4
 8045cb2:	462b      	mov	r3, r5
 8045cb4:	4630      	mov	r0, r6
 8045cb6:	4639      	mov	r1, r7
 8045cb8:	f7da fb16 	bl	80202e8 <__aeabi_dsub>
 8045cbc:	e00e      	b.n	8045cdc <__ieee754_rem_pio2+0x1cc>
 8045cbe:	462b      	mov	r3, r5
 8045cc0:	4622      	mov	r2, r4
 8045cc2:	4630      	mov	r0, r6
 8045cc4:	4639      	mov	r1, r7
 8045cc6:	f7da fb0f 	bl	80202e8 <__aeabi_dsub>
 8045cca:	ea4f 5328 	mov.w	r3, r8, asr #20
 8045cce:	9303      	str	r3, [sp, #12]
 8045cd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8045cd4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8045cd8:	2b10      	cmp	r3, #16
 8045cda:	dc02      	bgt.n	8045ce2 <__ieee754_rem_pio2+0x1d2>
 8045cdc:	e9ca 0100 	strd	r0, r1, [sl]
 8045ce0:	e039      	b.n	8045d56 <__ieee754_rem_pio2+0x246>
 8045ce2:	a34f      	add	r3, pc, #316	; (adr r3, 8045e20 <__ieee754_rem_pio2+0x310>)
 8045ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045ce8:	ec51 0b18 	vmov	r0, r1, d8
 8045cec:	f7da fcb4 	bl	8020658 <__aeabi_dmul>
 8045cf0:	4604      	mov	r4, r0
 8045cf2:	460d      	mov	r5, r1
 8045cf4:	4602      	mov	r2, r0
 8045cf6:	460b      	mov	r3, r1
 8045cf8:	4630      	mov	r0, r6
 8045cfa:	4639      	mov	r1, r7
 8045cfc:	f7da faf4 	bl	80202e8 <__aeabi_dsub>
 8045d00:	4602      	mov	r2, r0
 8045d02:	460b      	mov	r3, r1
 8045d04:	4680      	mov	r8, r0
 8045d06:	4689      	mov	r9, r1
 8045d08:	4630      	mov	r0, r6
 8045d0a:	4639      	mov	r1, r7
 8045d0c:	f7da faec 	bl	80202e8 <__aeabi_dsub>
 8045d10:	4622      	mov	r2, r4
 8045d12:	462b      	mov	r3, r5
 8045d14:	f7da fae8 	bl	80202e8 <__aeabi_dsub>
 8045d18:	a343      	add	r3, pc, #268	; (adr r3, 8045e28 <__ieee754_rem_pio2+0x318>)
 8045d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045d1e:	4604      	mov	r4, r0
 8045d20:	460d      	mov	r5, r1
 8045d22:	ec51 0b18 	vmov	r0, r1, d8
 8045d26:	f7da fc97 	bl	8020658 <__aeabi_dmul>
 8045d2a:	4622      	mov	r2, r4
 8045d2c:	462b      	mov	r3, r5
 8045d2e:	f7da fadb 	bl	80202e8 <__aeabi_dsub>
 8045d32:	4602      	mov	r2, r0
 8045d34:	460b      	mov	r3, r1
 8045d36:	4604      	mov	r4, r0
 8045d38:	460d      	mov	r5, r1
 8045d3a:	4640      	mov	r0, r8
 8045d3c:	4649      	mov	r1, r9
 8045d3e:	f7da fad3 	bl	80202e8 <__aeabi_dsub>
 8045d42:	9a03      	ldr	r2, [sp, #12]
 8045d44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8045d48:	1ad3      	subs	r3, r2, r3
 8045d4a:	2b31      	cmp	r3, #49	; 0x31
 8045d4c:	dc24      	bgt.n	8045d98 <__ieee754_rem_pio2+0x288>
 8045d4e:	e9ca 0100 	strd	r0, r1, [sl]
 8045d52:	4646      	mov	r6, r8
 8045d54:	464f      	mov	r7, r9
 8045d56:	e9da 8900 	ldrd	r8, r9, [sl]
 8045d5a:	4630      	mov	r0, r6
 8045d5c:	4642      	mov	r2, r8
 8045d5e:	464b      	mov	r3, r9
 8045d60:	4639      	mov	r1, r7
 8045d62:	f7da fac1 	bl	80202e8 <__aeabi_dsub>
 8045d66:	462b      	mov	r3, r5
 8045d68:	4622      	mov	r2, r4
 8045d6a:	f7da fabd 	bl	80202e8 <__aeabi_dsub>
 8045d6e:	9b02      	ldr	r3, [sp, #8]
 8045d70:	2b00      	cmp	r3, #0
 8045d72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8045d76:	f6bf af0b 	bge.w	8045b90 <__ieee754_rem_pio2+0x80>
 8045d7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8045d7e:	f8ca 3004 	str.w	r3, [sl, #4]
 8045d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8045d86:	f8ca 8000 	str.w	r8, [sl]
 8045d8a:	f8ca 0008 	str.w	r0, [sl, #8]
 8045d8e:	f8ca 300c 	str.w	r3, [sl, #12]
 8045d92:	f1cb 0b00 	rsb	fp, fp, #0
 8045d96:	e6fb      	b.n	8045b90 <__ieee754_rem_pio2+0x80>
 8045d98:	a327      	add	r3, pc, #156	; (adr r3, 8045e38 <__ieee754_rem_pio2+0x328>)
 8045d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045d9e:	ec51 0b18 	vmov	r0, r1, d8
 8045da2:	f7da fc59 	bl	8020658 <__aeabi_dmul>
 8045da6:	4604      	mov	r4, r0
 8045da8:	460d      	mov	r5, r1
 8045daa:	4602      	mov	r2, r0
 8045dac:	460b      	mov	r3, r1
 8045dae:	4640      	mov	r0, r8
 8045db0:	4649      	mov	r1, r9
 8045db2:	f7da fa99 	bl	80202e8 <__aeabi_dsub>
 8045db6:	4602      	mov	r2, r0
 8045db8:	460b      	mov	r3, r1
 8045dba:	4606      	mov	r6, r0
 8045dbc:	460f      	mov	r7, r1
 8045dbe:	4640      	mov	r0, r8
 8045dc0:	4649      	mov	r1, r9
 8045dc2:	f7da fa91 	bl	80202e8 <__aeabi_dsub>
 8045dc6:	4622      	mov	r2, r4
 8045dc8:	462b      	mov	r3, r5
 8045dca:	f7da fa8d 	bl	80202e8 <__aeabi_dsub>
 8045dce:	a31c      	add	r3, pc, #112	; (adr r3, 8045e40 <__ieee754_rem_pio2+0x330>)
 8045dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8045dd4:	4604      	mov	r4, r0
 8045dd6:	460d      	mov	r5, r1
 8045dd8:	ec51 0b18 	vmov	r0, r1, d8
 8045ddc:	f7da fc3c 	bl	8020658 <__aeabi_dmul>
 8045de0:	4622      	mov	r2, r4
 8045de2:	462b      	mov	r3, r5
 8045de4:	f7da fa80 	bl	80202e8 <__aeabi_dsub>
 8045de8:	4604      	mov	r4, r0
 8045dea:	460d      	mov	r5, r1
 8045dec:	e760      	b.n	8045cb0 <__ieee754_rem_pio2+0x1a0>
 8045dee:	4b1c      	ldr	r3, [pc, #112]	; (8045e60 <__ieee754_rem_pio2+0x350>)
 8045df0:	4598      	cmp	r8, r3
 8045df2:	dd37      	ble.n	8045e64 <__ieee754_rem_pio2+0x354>
 8045df4:	ee10 2a10 	vmov	r2, s0
 8045df8:	462b      	mov	r3, r5
 8045dfa:	4620      	mov	r0, r4
 8045dfc:	4629      	mov	r1, r5
 8045dfe:	f7da fa73 	bl	80202e8 <__aeabi_dsub>
 8045e02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8045e06:	e9ca 0100 	strd	r0, r1, [sl]
 8045e0a:	e695      	b.n	8045b38 <__ieee754_rem_pio2+0x28>
 8045e0c:	f3af 8000 	nop.w
 8045e10:	54400000 	.word	0x54400000
 8045e14:	3ff921fb 	.word	0x3ff921fb
 8045e18:	1a626331 	.word	0x1a626331
 8045e1c:	3dd0b461 	.word	0x3dd0b461
 8045e20:	1a600000 	.word	0x1a600000
 8045e24:	3dd0b461 	.word	0x3dd0b461
 8045e28:	2e037073 	.word	0x2e037073
 8045e2c:	3ba3198a 	.word	0x3ba3198a
 8045e30:	6dc9c883 	.word	0x6dc9c883
 8045e34:	3fe45f30 	.word	0x3fe45f30
 8045e38:	2e000000 	.word	0x2e000000
 8045e3c:	3ba3198a 	.word	0x3ba3198a
 8045e40:	252049c1 	.word	0x252049c1
 8045e44:	397b839a 	.word	0x397b839a
 8045e48:	3fe921fb 	.word	0x3fe921fb
 8045e4c:	4002d97b 	.word	0x4002d97b
 8045e50:	3ff921fb 	.word	0x3ff921fb
 8045e54:	413921fb 	.word	0x413921fb
 8045e58:	3fe00000 	.word	0x3fe00000
 8045e5c:	0804a64c 	.word	0x0804a64c
 8045e60:	7fefffff 	.word	0x7fefffff
 8045e64:	ea4f 5628 	mov.w	r6, r8, asr #20
 8045e68:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8045e6c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8045e70:	4620      	mov	r0, r4
 8045e72:	460d      	mov	r5, r1
 8045e74:	f7da fea0 	bl	8020bb8 <__aeabi_d2iz>
 8045e78:	f7da fb84 	bl	8020584 <__aeabi_i2d>
 8045e7c:	4602      	mov	r2, r0
 8045e7e:	460b      	mov	r3, r1
 8045e80:	4620      	mov	r0, r4
 8045e82:	4629      	mov	r1, r5
 8045e84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8045e88:	f7da fa2e 	bl	80202e8 <__aeabi_dsub>
 8045e8c:	4b21      	ldr	r3, [pc, #132]	; (8045f14 <__ieee754_rem_pio2+0x404>)
 8045e8e:	2200      	movs	r2, #0
 8045e90:	f7da fbe2 	bl	8020658 <__aeabi_dmul>
 8045e94:	460d      	mov	r5, r1
 8045e96:	4604      	mov	r4, r0
 8045e98:	f7da fe8e 	bl	8020bb8 <__aeabi_d2iz>
 8045e9c:	f7da fb72 	bl	8020584 <__aeabi_i2d>
 8045ea0:	4602      	mov	r2, r0
 8045ea2:	460b      	mov	r3, r1
 8045ea4:	4620      	mov	r0, r4
 8045ea6:	4629      	mov	r1, r5
 8045ea8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8045eac:	f7da fa1c 	bl	80202e8 <__aeabi_dsub>
 8045eb0:	4b18      	ldr	r3, [pc, #96]	; (8045f14 <__ieee754_rem_pio2+0x404>)
 8045eb2:	2200      	movs	r2, #0
 8045eb4:	f7da fbd0 	bl	8020658 <__aeabi_dmul>
 8045eb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8045ebc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8045ec0:	2703      	movs	r7, #3
 8045ec2:	2400      	movs	r4, #0
 8045ec4:	2500      	movs	r5, #0
 8045ec6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8045eca:	4622      	mov	r2, r4
 8045ecc:	462b      	mov	r3, r5
 8045ece:	46b9      	mov	r9, r7
 8045ed0:	3f01      	subs	r7, #1
 8045ed2:	f7da fe29 	bl	8020b28 <__aeabi_dcmpeq>
 8045ed6:	2800      	cmp	r0, #0
 8045ed8:	d1f5      	bne.n	8045ec6 <__ieee754_rem_pio2+0x3b6>
 8045eda:	4b0f      	ldr	r3, [pc, #60]	; (8045f18 <__ieee754_rem_pio2+0x408>)
 8045edc:	9301      	str	r3, [sp, #4]
 8045ede:	2302      	movs	r3, #2
 8045ee0:	9300      	str	r3, [sp, #0]
 8045ee2:	4632      	mov	r2, r6
 8045ee4:	464b      	mov	r3, r9
 8045ee6:	4651      	mov	r1, sl
 8045ee8:	a804      	add	r0, sp, #16
 8045eea:	f000 f821 	bl	8045f30 <__kernel_rem_pio2>
 8045eee:	9b02      	ldr	r3, [sp, #8]
 8045ef0:	2b00      	cmp	r3, #0
 8045ef2:	4683      	mov	fp, r0
 8045ef4:	f6bf ae4c 	bge.w	8045b90 <__ieee754_rem_pio2+0x80>
 8045ef8:	e9da 2100 	ldrd	r2, r1, [sl]
 8045efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8045f00:	e9ca 2300 	strd	r2, r3, [sl]
 8045f04:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8045f08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8045f0c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8045f10:	e73f      	b.n	8045d92 <__ieee754_rem_pio2+0x282>
 8045f12:	bf00      	nop
 8045f14:	41700000 	.word	0x41700000
 8045f18:	0804a6cc 	.word	0x0804a6cc

08045f1c <fabs>:
 8045f1c:	ec51 0b10 	vmov	r0, r1, d0
 8045f20:	ee10 2a10 	vmov	r2, s0
 8045f24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8045f28:	ec43 2b10 	vmov	d0, r2, r3
 8045f2c:	4770      	bx	lr
	...

08045f30 <__kernel_rem_pio2>:
 8045f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045f34:	ed2d 8b02 	vpush	{d8}
 8045f38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8045f3c:	f112 0f14 	cmn.w	r2, #20
 8045f40:	9306      	str	r3, [sp, #24]
 8045f42:	9104      	str	r1, [sp, #16]
 8045f44:	4bc2      	ldr	r3, [pc, #776]	; (8046250 <__kernel_rem_pio2+0x320>)
 8045f46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8045f48:	9009      	str	r0, [sp, #36]	; 0x24
 8045f4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8045f4e:	9300      	str	r3, [sp, #0]
 8045f50:	9b06      	ldr	r3, [sp, #24]
 8045f52:	f103 33ff 	add.w	r3, r3, #4294967295
 8045f56:	bfa8      	it	ge
 8045f58:	1ed4      	subge	r4, r2, #3
 8045f5a:	9305      	str	r3, [sp, #20]
 8045f5c:	bfb2      	itee	lt
 8045f5e:	2400      	movlt	r4, #0
 8045f60:	2318      	movge	r3, #24
 8045f62:	fb94 f4f3 	sdivge	r4, r4, r3
 8045f66:	f06f 0317 	mvn.w	r3, #23
 8045f6a:	fb04 3303 	mla	r3, r4, r3, r3
 8045f6e:	eb03 0a02 	add.w	sl, r3, r2
 8045f72:	9b00      	ldr	r3, [sp, #0]
 8045f74:	9a05      	ldr	r2, [sp, #20]
 8045f76:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8046240 <__kernel_rem_pio2+0x310>
 8045f7a:	eb03 0802 	add.w	r8, r3, r2
 8045f7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8045f80:	1aa7      	subs	r7, r4, r2
 8045f82:	ae20      	add	r6, sp, #128	; 0x80
 8045f84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8045f88:	2500      	movs	r5, #0
 8045f8a:	4545      	cmp	r5, r8
 8045f8c:	dd13      	ble.n	8045fb6 <__kernel_rem_pio2+0x86>
 8045f8e:	9b06      	ldr	r3, [sp, #24]
 8045f90:	aa20      	add	r2, sp, #128	; 0x80
 8045f92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8045f96:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8045f9a:	f04f 0800 	mov.w	r8, #0
 8045f9e:	9b00      	ldr	r3, [sp, #0]
 8045fa0:	4598      	cmp	r8, r3
 8045fa2:	dc31      	bgt.n	8046008 <__kernel_rem_pio2+0xd8>
 8045fa4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8046240 <__kernel_rem_pio2+0x310>
 8045fa8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8045fac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8045fb0:	462f      	mov	r7, r5
 8045fb2:	2600      	movs	r6, #0
 8045fb4:	e01b      	b.n	8045fee <__kernel_rem_pio2+0xbe>
 8045fb6:	42ef      	cmn	r7, r5
 8045fb8:	d407      	bmi.n	8045fca <__kernel_rem_pio2+0x9a>
 8045fba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8045fbe:	f7da fae1 	bl	8020584 <__aeabi_i2d>
 8045fc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8045fc6:	3501      	adds	r5, #1
 8045fc8:	e7df      	b.n	8045f8a <__kernel_rem_pio2+0x5a>
 8045fca:	ec51 0b18 	vmov	r0, r1, d8
 8045fce:	e7f8      	b.n	8045fc2 <__kernel_rem_pio2+0x92>
 8045fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8045fd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8045fd8:	f7da fb3e 	bl	8020658 <__aeabi_dmul>
 8045fdc:	4602      	mov	r2, r0
 8045fde:	460b      	mov	r3, r1
 8045fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8045fe4:	f7da f982 	bl	80202ec <__adddf3>
 8045fe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8045fec:	3601      	adds	r6, #1
 8045fee:	9b05      	ldr	r3, [sp, #20]
 8045ff0:	429e      	cmp	r6, r3
 8045ff2:	f1a7 0708 	sub.w	r7, r7, #8
 8045ff6:	ddeb      	ble.n	8045fd0 <__kernel_rem_pio2+0xa0>
 8045ff8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8045ffc:	f108 0801 	add.w	r8, r8, #1
 8046000:	ecab 7b02 	vstmia	fp!, {d7}
 8046004:	3508      	adds	r5, #8
 8046006:	e7ca      	b.n	8045f9e <__kernel_rem_pio2+0x6e>
 8046008:	9b00      	ldr	r3, [sp, #0]
 804600a:	aa0c      	add	r2, sp, #48	; 0x30
 804600c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8046010:	930b      	str	r3, [sp, #44]	; 0x2c
 8046012:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8046014:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8046018:	9c00      	ldr	r4, [sp, #0]
 804601a:	930a      	str	r3, [sp, #40]	; 0x28
 804601c:	00e3      	lsls	r3, r4, #3
 804601e:	9308      	str	r3, [sp, #32]
 8046020:	ab98      	add	r3, sp, #608	; 0x260
 8046022:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8046026:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 804602a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 804602e:	ab70      	add	r3, sp, #448	; 0x1c0
 8046030:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8046034:	46c3      	mov	fp, r8
 8046036:	46a1      	mov	r9, r4
 8046038:	f1b9 0f00 	cmp.w	r9, #0
 804603c:	f1a5 0508 	sub.w	r5, r5, #8
 8046040:	dc77      	bgt.n	8046132 <__kernel_rem_pio2+0x202>
 8046042:	ec47 6b10 	vmov	d0, r6, r7
 8046046:	4650      	mov	r0, sl
 8046048:	f000 fac2 	bl	80465d0 <scalbn>
 804604c:	ec57 6b10 	vmov	r6, r7, d0
 8046050:	2200      	movs	r2, #0
 8046052:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8046056:	ee10 0a10 	vmov	r0, s0
 804605a:	4639      	mov	r1, r7
 804605c:	f7da fafc 	bl	8020658 <__aeabi_dmul>
 8046060:	ec41 0b10 	vmov	d0, r0, r1
 8046064:	f000 fb34 	bl	80466d0 <floor>
 8046068:	4b7a      	ldr	r3, [pc, #488]	; (8046254 <__kernel_rem_pio2+0x324>)
 804606a:	ec51 0b10 	vmov	r0, r1, d0
 804606e:	2200      	movs	r2, #0
 8046070:	f7da faf2 	bl	8020658 <__aeabi_dmul>
 8046074:	4602      	mov	r2, r0
 8046076:	460b      	mov	r3, r1
 8046078:	4630      	mov	r0, r6
 804607a:	4639      	mov	r1, r7
 804607c:	f7da f934 	bl	80202e8 <__aeabi_dsub>
 8046080:	460f      	mov	r7, r1
 8046082:	4606      	mov	r6, r0
 8046084:	f7da fd98 	bl	8020bb8 <__aeabi_d2iz>
 8046088:	9002      	str	r0, [sp, #8]
 804608a:	f7da fa7b 	bl	8020584 <__aeabi_i2d>
 804608e:	4602      	mov	r2, r0
 8046090:	460b      	mov	r3, r1
 8046092:	4630      	mov	r0, r6
 8046094:	4639      	mov	r1, r7
 8046096:	f7da f927 	bl	80202e8 <__aeabi_dsub>
 804609a:	f1ba 0f00 	cmp.w	sl, #0
 804609e:	4606      	mov	r6, r0
 80460a0:	460f      	mov	r7, r1
 80460a2:	dd6d      	ble.n	8046180 <__kernel_rem_pio2+0x250>
 80460a4:	1e61      	subs	r1, r4, #1
 80460a6:	ab0c      	add	r3, sp, #48	; 0x30
 80460a8:	9d02      	ldr	r5, [sp, #8]
 80460aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80460ae:	f1ca 0018 	rsb	r0, sl, #24
 80460b2:	fa43 f200 	asr.w	r2, r3, r0
 80460b6:	4415      	add	r5, r2
 80460b8:	4082      	lsls	r2, r0
 80460ba:	1a9b      	subs	r3, r3, r2
 80460bc:	aa0c      	add	r2, sp, #48	; 0x30
 80460be:	9502      	str	r5, [sp, #8]
 80460c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80460c4:	f1ca 0217 	rsb	r2, sl, #23
 80460c8:	fa43 fb02 	asr.w	fp, r3, r2
 80460cc:	f1bb 0f00 	cmp.w	fp, #0
 80460d0:	dd65      	ble.n	804619e <__kernel_rem_pio2+0x26e>
 80460d2:	9b02      	ldr	r3, [sp, #8]
 80460d4:	2200      	movs	r2, #0
 80460d6:	3301      	adds	r3, #1
 80460d8:	9302      	str	r3, [sp, #8]
 80460da:	4615      	mov	r5, r2
 80460dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80460e0:	4294      	cmp	r4, r2
 80460e2:	f300 809f 	bgt.w	8046224 <__kernel_rem_pio2+0x2f4>
 80460e6:	f1ba 0f00 	cmp.w	sl, #0
 80460ea:	dd07      	ble.n	80460fc <__kernel_rem_pio2+0x1cc>
 80460ec:	f1ba 0f01 	cmp.w	sl, #1
 80460f0:	f000 80c1 	beq.w	8046276 <__kernel_rem_pio2+0x346>
 80460f4:	f1ba 0f02 	cmp.w	sl, #2
 80460f8:	f000 80c7 	beq.w	804628a <__kernel_rem_pio2+0x35a>
 80460fc:	f1bb 0f02 	cmp.w	fp, #2
 8046100:	d14d      	bne.n	804619e <__kernel_rem_pio2+0x26e>
 8046102:	4632      	mov	r2, r6
 8046104:	463b      	mov	r3, r7
 8046106:	4954      	ldr	r1, [pc, #336]	; (8046258 <__kernel_rem_pio2+0x328>)
 8046108:	2000      	movs	r0, #0
 804610a:	f7da f8ed 	bl	80202e8 <__aeabi_dsub>
 804610e:	4606      	mov	r6, r0
 8046110:	460f      	mov	r7, r1
 8046112:	2d00      	cmp	r5, #0
 8046114:	d043      	beq.n	804619e <__kernel_rem_pio2+0x26e>
 8046116:	4650      	mov	r0, sl
 8046118:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8046248 <__kernel_rem_pio2+0x318>
 804611c:	f000 fa58 	bl	80465d0 <scalbn>
 8046120:	4630      	mov	r0, r6
 8046122:	4639      	mov	r1, r7
 8046124:	ec53 2b10 	vmov	r2, r3, d0
 8046128:	f7da f8de 	bl	80202e8 <__aeabi_dsub>
 804612c:	4606      	mov	r6, r0
 804612e:	460f      	mov	r7, r1
 8046130:	e035      	b.n	804619e <__kernel_rem_pio2+0x26e>
 8046132:	4b4a      	ldr	r3, [pc, #296]	; (804625c <__kernel_rem_pio2+0x32c>)
 8046134:	2200      	movs	r2, #0
 8046136:	4630      	mov	r0, r6
 8046138:	4639      	mov	r1, r7
 804613a:	f7da fa8d 	bl	8020658 <__aeabi_dmul>
 804613e:	f7da fd3b 	bl	8020bb8 <__aeabi_d2iz>
 8046142:	f7da fa1f 	bl	8020584 <__aeabi_i2d>
 8046146:	4602      	mov	r2, r0
 8046148:	460b      	mov	r3, r1
 804614a:	ec43 2b18 	vmov	d8, r2, r3
 804614e:	4b44      	ldr	r3, [pc, #272]	; (8046260 <__kernel_rem_pio2+0x330>)
 8046150:	2200      	movs	r2, #0
 8046152:	f7da fa81 	bl	8020658 <__aeabi_dmul>
 8046156:	4602      	mov	r2, r0
 8046158:	460b      	mov	r3, r1
 804615a:	4630      	mov	r0, r6
 804615c:	4639      	mov	r1, r7
 804615e:	f7da f8c3 	bl	80202e8 <__aeabi_dsub>
 8046162:	f7da fd29 	bl	8020bb8 <__aeabi_d2iz>
 8046166:	e9d5 2300 	ldrd	r2, r3, [r5]
 804616a:	f84b 0b04 	str.w	r0, [fp], #4
 804616e:	ec51 0b18 	vmov	r0, r1, d8
 8046172:	f7da f8bb 	bl	80202ec <__adddf3>
 8046176:	f109 39ff 	add.w	r9, r9, #4294967295
 804617a:	4606      	mov	r6, r0
 804617c:	460f      	mov	r7, r1
 804617e:	e75b      	b.n	8046038 <__kernel_rem_pio2+0x108>
 8046180:	d106      	bne.n	8046190 <__kernel_rem_pio2+0x260>
 8046182:	1e63      	subs	r3, r4, #1
 8046184:	aa0c      	add	r2, sp, #48	; 0x30
 8046186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804618a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 804618e:	e79d      	b.n	80460cc <__kernel_rem_pio2+0x19c>
 8046190:	4b34      	ldr	r3, [pc, #208]	; (8046264 <__kernel_rem_pio2+0x334>)
 8046192:	2200      	movs	r2, #0
 8046194:	f7da fce6 	bl	8020b64 <__aeabi_dcmpge>
 8046198:	2800      	cmp	r0, #0
 804619a:	d140      	bne.n	804621e <__kernel_rem_pio2+0x2ee>
 804619c:	4683      	mov	fp, r0
 804619e:	2200      	movs	r2, #0
 80461a0:	2300      	movs	r3, #0
 80461a2:	4630      	mov	r0, r6
 80461a4:	4639      	mov	r1, r7
 80461a6:	f7da fcbf 	bl	8020b28 <__aeabi_dcmpeq>
 80461aa:	2800      	cmp	r0, #0
 80461ac:	f000 80c1 	beq.w	8046332 <__kernel_rem_pio2+0x402>
 80461b0:	1e65      	subs	r5, r4, #1
 80461b2:	462b      	mov	r3, r5
 80461b4:	2200      	movs	r2, #0
 80461b6:	9900      	ldr	r1, [sp, #0]
 80461b8:	428b      	cmp	r3, r1
 80461ba:	da6d      	bge.n	8046298 <__kernel_rem_pio2+0x368>
 80461bc:	2a00      	cmp	r2, #0
 80461be:	f000 808a 	beq.w	80462d6 <__kernel_rem_pio2+0x3a6>
 80461c2:	ab0c      	add	r3, sp, #48	; 0x30
 80461c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80461c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80461cc:	2b00      	cmp	r3, #0
 80461ce:	f000 80ae 	beq.w	804632e <__kernel_rem_pio2+0x3fe>
 80461d2:	4650      	mov	r0, sl
 80461d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8046248 <__kernel_rem_pio2+0x318>
 80461d8:	f000 f9fa 	bl	80465d0 <scalbn>
 80461dc:	1c6b      	adds	r3, r5, #1
 80461de:	00da      	lsls	r2, r3, #3
 80461e0:	9205      	str	r2, [sp, #20]
 80461e2:	ec57 6b10 	vmov	r6, r7, d0
 80461e6:	aa70      	add	r2, sp, #448	; 0x1c0
 80461e8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 804625c <__kernel_rem_pio2+0x32c>
 80461ec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80461f0:	462c      	mov	r4, r5
 80461f2:	f04f 0800 	mov.w	r8, #0
 80461f6:	2c00      	cmp	r4, #0
 80461f8:	f280 80d4 	bge.w	80463a4 <__kernel_rem_pio2+0x474>
 80461fc:	462c      	mov	r4, r5
 80461fe:	2c00      	cmp	r4, #0
 8046200:	f2c0 8102 	blt.w	8046408 <__kernel_rem_pio2+0x4d8>
 8046204:	4b18      	ldr	r3, [pc, #96]	; (8046268 <__kernel_rem_pio2+0x338>)
 8046206:	461e      	mov	r6, r3
 8046208:	ab70      	add	r3, sp, #448	; 0x1c0
 804620a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 804620e:	1b2b      	subs	r3, r5, r4
 8046210:	f04f 0900 	mov.w	r9, #0
 8046214:	f04f 0a00 	mov.w	sl, #0
 8046218:	2700      	movs	r7, #0
 804621a:	9306      	str	r3, [sp, #24]
 804621c:	e0e6      	b.n	80463ec <__kernel_rem_pio2+0x4bc>
 804621e:	f04f 0b02 	mov.w	fp, #2
 8046222:	e756      	b.n	80460d2 <__kernel_rem_pio2+0x1a2>
 8046224:	f8d8 3000 	ldr.w	r3, [r8]
 8046228:	bb05      	cbnz	r5, 804626c <__kernel_rem_pio2+0x33c>
 804622a:	b123      	cbz	r3, 8046236 <__kernel_rem_pio2+0x306>
 804622c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8046230:	f8c8 3000 	str.w	r3, [r8]
 8046234:	2301      	movs	r3, #1
 8046236:	3201      	adds	r2, #1
 8046238:	f108 0804 	add.w	r8, r8, #4
 804623c:	461d      	mov	r5, r3
 804623e:	e74f      	b.n	80460e0 <__kernel_rem_pio2+0x1b0>
	...
 804624c:	3ff00000 	.word	0x3ff00000
 8046250:	0804a818 	.word	0x0804a818
 8046254:	40200000 	.word	0x40200000
 8046258:	3ff00000 	.word	0x3ff00000
 804625c:	3e700000 	.word	0x3e700000
 8046260:	41700000 	.word	0x41700000
 8046264:	3fe00000 	.word	0x3fe00000
 8046268:	0804a7d8 	.word	0x0804a7d8
 804626c:	1acb      	subs	r3, r1, r3
 804626e:	f8c8 3000 	str.w	r3, [r8]
 8046272:	462b      	mov	r3, r5
 8046274:	e7df      	b.n	8046236 <__kernel_rem_pio2+0x306>
 8046276:	1e62      	subs	r2, r4, #1
 8046278:	ab0c      	add	r3, sp, #48	; 0x30
 804627a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804627e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8046282:	a90c      	add	r1, sp, #48	; 0x30
 8046284:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8046288:	e738      	b.n	80460fc <__kernel_rem_pio2+0x1cc>
 804628a:	1e62      	subs	r2, r4, #1
 804628c:	ab0c      	add	r3, sp, #48	; 0x30
 804628e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8046292:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8046296:	e7f4      	b.n	8046282 <__kernel_rem_pio2+0x352>
 8046298:	a90c      	add	r1, sp, #48	; 0x30
 804629a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 804629e:	3b01      	subs	r3, #1
 80462a0:	430a      	orrs	r2, r1
 80462a2:	e788      	b.n	80461b6 <__kernel_rem_pio2+0x286>
 80462a4:	3301      	adds	r3, #1
 80462a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80462aa:	2900      	cmp	r1, #0
 80462ac:	d0fa      	beq.n	80462a4 <__kernel_rem_pio2+0x374>
 80462ae:	9a08      	ldr	r2, [sp, #32]
 80462b0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80462b4:	446a      	add	r2, sp
 80462b6:	3a98      	subs	r2, #152	; 0x98
 80462b8:	9208      	str	r2, [sp, #32]
 80462ba:	9a06      	ldr	r2, [sp, #24]
 80462bc:	a920      	add	r1, sp, #128	; 0x80
 80462be:	18a2      	adds	r2, r4, r2
 80462c0:	18e3      	adds	r3, r4, r3
 80462c2:	f104 0801 	add.w	r8, r4, #1
 80462c6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80462ca:	9302      	str	r3, [sp, #8]
 80462cc:	9b02      	ldr	r3, [sp, #8]
 80462ce:	4543      	cmp	r3, r8
 80462d0:	da04      	bge.n	80462dc <__kernel_rem_pio2+0x3ac>
 80462d2:	461c      	mov	r4, r3
 80462d4:	e6a2      	b.n	804601c <__kernel_rem_pio2+0xec>
 80462d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80462d8:	2301      	movs	r3, #1
 80462da:	e7e4      	b.n	80462a6 <__kernel_rem_pio2+0x376>
 80462dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80462de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80462e2:	f7da f94f 	bl	8020584 <__aeabi_i2d>
 80462e6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80462ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80462ec:	46ab      	mov	fp, r5
 80462ee:	461c      	mov	r4, r3
 80462f0:	f04f 0900 	mov.w	r9, #0
 80462f4:	2600      	movs	r6, #0
 80462f6:	2700      	movs	r7, #0
 80462f8:	9b05      	ldr	r3, [sp, #20]
 80462fa:	4599      	cmp	r9, r3
 80462fc:	dd06      	ble.n	804630c <__kernel_rem_pio2+0x3dc>
 80462fe:	9b08      	ldr	r3, [sp, #32]
 8046300:	e8e3 6702 	strd	r6, r7, [r3], #8
 8046304:	f108 0801 	add.w	r8, r8, #1
 8046308:	9308      	str	r3, [sp, #32]
 804630a:	e7df      	b.n	80462cc <__kernel_rem_pio2+0x39c>
 804630c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8046310:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8046314:	f7da f9a0 	bl	8020658 <__aeabi_dmul>
 8046318:	4602      	mov	r2, r0
 804631a:	460b      	mov	r3, r1
 804631c:	4630      	mov	r0, r6
 804631e:	4639      	mov	r1, r7
 8046320:	f7d9 ffe4 	bl	80202ec <__adddf3>
 8046324:	f109 0901 	add.w	r9, r9, #1
 8046328:	4606      	mov	r6, r0
 804632a:	460f      	mov	r7, r1
 804632c:	e7e4      	b.n	80462f8 <__kernel_rem_pio2+0x3c8>
 804632e:	3d01      	subs	r5, #1
 8046330:	e747      	b.n	80461c2 <__kernel_rem_pio2+0x292>
 8046332:	ec47 6b10 	vmov	d0, r6, r7
 8046336:	f1ca 0000 	rsb	r0, sl, #0
 804633a:	f000 f949 	bl	80465d0 <scalbn>
 804633e:	ec57 6b10 	vmov	r6, r7, d0
 8046342:	4ba0      	ldr	r3, [pc, #640]	; (80465c4 <__kernel_rem_pio2+0x694>)
 8046344:	ee10 0a10 	vmov	r0, s0
 8046348:	2200      	movs	r2, #0
 804634a:	4639      	mov	r1, r7
 804634c:	f7da fc0a 	bl	8020b64 <__aeabi_dcmpge>
 8046350:	b1f8      	cbz	r0, 8046392 <__kernel_rem_pio2+0x462>
 8046352:	4b9d      	ldr	r3, [pc, #628]	; (80465c8 <__kernel_rem_pio2+0x698>)
 8046354:	2200      	movs	r2, #0
 8046356:	4630      	mov	r0, r6
 8046358:	4639      	mov	r1, r7
 804635a:	f7da f97d 	bl	8020658 <__aeabi_dmul>
 804635e:	f7da fc2b 	bl	8020bb8 <__aeabi_d2iz>
 8046362:	4680      	mov	r8, r0
 8046364:	f7da f90e 	bl	8020584 <__aeabi_i2d>
 8046368:	4b96      	ldr	r3, [pc, #600]	; (80465c4 <__kernel_rem_pio2+0x694>)
 804636a:	2200      	movs	r2, #0
 804636c:	f7da f974 	bl	8020658 <__aeabi_dmul>
 8046370:	460b      	mov	r3, r1
 8046372:	4602      	mov	r2, r0
 8046374:	4639      	mov	r1, r7
 8046376:	4630      	mov	r0, r6
 8046378:	f7d9 ffb6 	bl	80202e8 <__aeabi_dsub>
 804637c:	f7da fc1c 	bl	8020bb8 <__aeabi_d2iz>
 8046380:	1c65      	adds	r5, r4, #1
 8046382:	ab0c      	add	r3, sp, #48	; 0x30
 8046384:	f10a 0a18 	add.w	sl, sl, #24
 8046388:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 804638c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8046390:	e71f      	b.n	80461d2 <__kernel_rem_pio2+0x2a2>
 8046392:	4630      	mov	r0, r6
 8046394:	4639      	mov	r1, r7
 8046396:	f7da fc0f 	bl	8020bb8 <__aeabi_d2iz>
 804639a:	ab0c      	add	r3, sp, #48	; 0x30
 804639c:	4625      	mov	r5, r4
 804639e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80463a2:	e716      	b.n	80461d2 <__kernel_rem_pio2+0x2a2>
 80463a4:	ab0c      	add	r3, sp, #48	; 0x30
 80463a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80463aa:	f7da f8eb 	bl	8020584 <__aeabi_i2d>
 80463ae:	4632      	mov	r2, r6
 80463b0:	463b      	mov	r3, r7
 80463b2:	f7da f951 	bl	8020658 <__aeabi_dmul>
 80463b6:	4642      	mov	r2, r8
 80463b8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80463bc:	464b      	mov	r3, r9
 80463be:	4630      	mov	r0, r6
 80463c0:	4639      	mov	r1, r7
 80463c2:	f7da f949 	bl	8020658 <__aeabi_dmul>
 80463c6:	3c01      	subs	r4, #1
 80463c8:	4606      	mov	r6, r0
 80463ca:	460f      	mov	r7, r1
 80463cc:	e713      	b.n	80461f6 <__kernel_rem_pio2+0x2c6>
 80463ce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80463d2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80463d6:	f7da f93f 	bl	8020658 <__aeabi_dmul>
 80463da:	4602      	mov	r2, r0
 80463dc:	460b      	mov	r3, r1
 80463de:	4648      	mov	r0, r9
 80463e0:	4651      	mov	r1, sl
 80463e2:	f7d9 ff83 	bl	80202ec <__adddf3>
 80463e6:	3701      	adds	r7, #1
 80463e8:	4681      	mov	r9, r0
 80463ea:	468a      	mov	sl, r1
 80463ec:	9b00      	ldr	r3, [sp, #0]
 80463ee:	429f      	cmp	r7, r3
 80463f0:	dc02      	bgt.n	80463f8 <__kernel_rem_pio2+0x4c8>
 80463f2:	9b06      	ldr	r3, [sp, #24]
 80463f4:	429f      	cmp	r7, r3
 80463f6:	ddea      	ble.n	80463ce <__kernel_rem_pio2+0x49e>
 80463f8:	9a06      	ldr	r2, [sp, #24]
 80463fa:	ab48      	add	r3, sp, #288	; 0x120
 80463fc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8046400:	e9c6 9a00 	strd	r9, sl, [r6]
 8046404:	3c01      	subs	r4, #1
 8046406:	e6fa      	b.n	80461fe <__kernel_rem_pio2+0x2ce>
 8046408:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 804640a:	2b02      	cmp	r3, #2
 804640c:	dc0b      	bgt.n	8046426 <__kernel_rem_pio2+0x4f6>
 804640e:	2b00      	cmp	r3, #0
 8046410:	dc39      	bgt.n	8046486 <__kernel_rem_pio2+0x556>
 8046412:	d05d      	beq.n	80464d0 <__kernel_rem_pio2+0x5a0>
 8046414:	9b02      	ldr	r3, [sp, #8]
 8046416:	f003 0007 	and.w	r0, r3, #7
 804641a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 804641e:	ecbd 8b02 	vpop	{d8}
 8046422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8046426:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8046428:	2b03      	cmp	r3, #3
 804642a:	d1f3      	bne.n	8046414 <__kernel_rem_pio2+0x4e4>
 804642c:	9b05      	ldr	r3, [sp, #20]
 804642e:	9500      	str	r5, [sp, #0]
 8046430:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8046434:	eb0d 0403 	add.w	r4, sp, r3
 8046438:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 804643c:	46a2      	mov	sl, r4
 804643e:	9b00      	ldr	r3, [sp, #0]
 8046440:	2b00      	cmp	r3, #0
 8046442:	f1aa 0a08 	sub.w	sl, sl, #8
 8046446:	dc69      	bgt.n	804651c <__kernel_rem_pio2+0x5ec>
 8046448:	46aa      	mov	sl, r5
 804644a:	f1ba 0f01 	cmp.w	sl, #1
 804644e:	f1a4 0408 	sub.w	r4, r4, #8
 8046452:	f300 8083 	bgt.w	804655c <__kernel_rem_pio2+0x62c>
 8046456:	9c05      	ldr	r4, [sp, #20]
 8046458:	ab48      	add	r3, sp, #288	; 0x120
 804645a:	441c      	add	r4, r3
 804645c:	2000      	movs	r0, #0
 804645e:	2100      	movs	r1, #0
 8046460:	2d01      	cmp	r5, #1
 8046462:	f300 809a 	bgt.w	804659a <__kernel_rem_pio2+0x66a>
 8046466:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 804646a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 804646e:	f1bb 0f00 	cmp.w	fp, #0
 8046472:	f040 8098 	bne.w	80465a6 <__kernel_rem_pio2+0x676>
 8046476:	9b04      	ldr	r3, [sp, #16]
 8046478:	e9c3 7800 	strd	r7, r8, [r3]
 804647c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8046480:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8046484:	e7c6      	b.n	8046414 <__kernel_rem_pio2+0x4e4>
 8046486:	9e05      	ldr	r6, [sp, #20]
 8046488:	ab48      	add	r3, sp, #288	; 0x120
 804648a:	441e      	add	r6, r3
 804648c:	462c      	mov	r4, r5
 804648e:	2000      	movs	r0, #0
 8046490:	2100      	movs	r1, #0
 8046492:	2c00      	cmp	r4, #0
 8046494:	da33      	bge.n	80464fe <__kernel_rem_pio2+0x5ce>
 8046496:	f1bb 0f00 	cmp.w	fp, #0
 804649a:	d036      	beq.n	804650a <__kernel_rem_pio2+0x5da>
 804649c:	4602      	mov	r2, r0
 804649e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80464a2:	9c04      	ldr	r4, [sp, #16]
 80464a4:	e9c4 2300 	strd	r2, r3, [r4]
 80464a8:	4602      	mov	r2, r0
 80464aa:	460b      	mov	r3, r1
 80464ac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80464b0:	f7d9 ff1a 	bl	80202e8 <__aeabi_dsub>
 80464b4:	ae4a      	add	r6, sp, #296	; 0x128
 80464b6:	2401      	movs	r4, #1
 80464b8:	42a5      	cmp	r5, r4
 80464ba:	da29      	bge.n	8046510 <__kernel_rem_pio2+0x5e0>
 80464bc:	f1bb 0f00 	cmp.w	fp, #0
 80464c0:	d002      	beq.n	80464c8 <__kernel_rem_pio2+0x598>
 80464c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80464c6:	4619      	mov	r1, r3
 80464c8:	9b04      	ldr	r3, [sp, #16]
 80464ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80464ce:	e7a1      	b.n	8046414 <__kernel_rem_pio2+0x4e4>
 80464d0:	9c05      	ldr	r4, [sp, #20]
 80464d2:	ab48      	add	r3, sp, #288	; 0x120
 80464d4:	441c      	add	r4, r3
 80464d6:	2000      	movs	r0, #0
 80464d8:	2100      	movs	r1, #0
 80464da:	2d00      	cmp	r5, #0
 80464dc:	da09      	bge.n	80464f2 <__kernel_rem_pio2+0x5c2>
 80464de:	f1bb 0f00 	cmp.w	fp, #0
 80464e2:	d002      	beq.n	80464ea <__kernel_rem_pio2+0x5ba>
 80464e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80464e8:	4619      	mov	r1, r3
 80464ea:	9b04      	ldr	r3, [sp, #16]
 80464ec:	e9c3 0100 	strd	r0, r1, [r3]
 80464f0:	e790      	b.n	8046414 <__kernel_rem_pio2+0x4e4>
 80464f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80464f6:	f7d9 fef9 	bl	80202ec <__adddf3>
 80464fa:	3d01      	subs	r5, #1
 80464fc:	e7ed      	b.n	80464da <__kernel_rem_pio2+0x5aa>
 80464fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8046502:	f7d9 fef3 	bl	80202ec <__adddf3>
 8046506:	3c01      	subs	r4, #1
 8046508:	e7c3      	b.n	8046492 <__kernel_rem_pio2+0x562>
 804650a:	4602      	mov	r2, r0
 804650c:	460b      	mov	r3, r1
 804650e:	e7c8      	b.n	80464a2 <__kernel_rem_pio2+0x572>
 8046510:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8046514:	f7d9 feea 	bl	80202ec <__adddf3>
 8046518:	3401      	adds	r4, #1
 804651a:	e7cd      	b.n	80464b8 <__kernel_rem_pio2+0x588>
 804651c:	e9da 8900 	ldrd	r8, r9, [sl]
 8046520:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8046524:	9b00      	ldr	r3, [sp, #0]
 8046526:	3b01      	subs	r3, #1
 8046528:	9300      	str	r3, [sp, #0]
 804652a:	4632      	mov	r2, r6
 804652c:	463b      	mov	r3, r7
 804652e:	4640      	mov	r0, r8
 8046530:	4649      	mov	r1, r9
 8046532:	f7d9 fedb 	bl	80202ec <__adddf3>
 8046536:	e9cd 0106 	strd	r0, r1, [sp, #24]
 804653a:	4602      	mov	r2, r0
 804653c:	460b      	mov	r3, r1
 804653e:	4640      	mov	r0, r8
 8046540:	4649      	mov	r1, r9
 8046542:	f7d9 fed1 	bl	80202e8 <__aeabi_dsub>
 8046546:	4632      	mov	r2, r6
 8046548:	463b      	mov	r3, r7
 804654a:	f7d9 fecf 	bl	80202ec <__adddf3>
 804654e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8046552:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8046556:	ed8a 7b00 	vstr	d7, [sl]
 804655a:	e770      	b.n	804643e <__kernel_rem_pio2+0x50e>
 804655c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8046560:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8046564:	4640      	mov	r0, r8
 8046566:	4632      	mov	r2, r6
 8046568:	463b      	mov	r3, r7
 804656a:	4649      	mov	r1, r9
 804656c:	f7d9 febe 	bl	80202ec <__adddf3>
 8046570:	e9cd 0100 	strd	r0, r1, [sp]
 8046574:	4602      	mov	r2, r0
 8046576:	460b      	mov	r3, r1
 8046578:	4640      	mov	r0, r8
 804657a:	4649      	mov	r1, r9
 804657c:	f7d9 feb4 	bl	80202e8 <__aeabi_dsub>
 8046580:	4632      	mov	r2, r6
 8046582:	463b      	mov	r3, r7
 8046584:	f7d9 feb2 	bl	80202ec <__adddf3>
 8046588:	ed9d 7b00 	vldr	d7, [sp]
 804658c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8046590:	ed84 7b00 	vstr	d7, [r4]
 8046594:	f10a 3aff 	add.w	sl, sl, #4294967295
 8046598:	e757      	b.n	804644a <__kernel_rem_pio2+0x51a>
 804659a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 804659e:	f7d9 fea5 	bl	80202ec <__adddf3>
 80465a2:	3d01      	subs	r5, #1
 80465a4:	e75c      	b.n	8046460 <__kernel_rem_pio2+0x530>
 80465a6:	9b04      	ldr	r3, [sp, #16]
 80465a8:	9a04      	ldr	r2, [sp, #16]
 80465aa:	601f      	str	r7, [r3, #0]
 80465ac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80465b0:	605c      	str	r4, [r3, #4]
 80465b2:	609d      	str	r5, [r3, #8]
 80465b4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80465b8:	60d3      	str	r3, [r2, #12]
 80465ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80465be:	6110      	str	r0, [r2, #16]
 80465c0:	6153      	str	r3, [r2, #20]
 80465c2:	e727      	b.n	8046414 <__kernel_rem_pio2+0x4e4>
 80465c4:	41700000 	.word	0x41700000
 80465c8:	3e700000 	.word	0x3e700000
 80465cc:	00000000 	.word	0x00000000

080465d0 <scalbn>:
 80465d0:	b570      	push	{r4, r5, r6, lr}
 80465d2:	ec55 4b10 	vmov	r4, r5, d0
 80465d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80465da:	4606      	mov	r6, r0
 80465dc:	462b      	mov	r3, r5
 80465de:	b999      	cbnz	r1, 8046608 <scalbn+0x38>
 80465e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80465e4:	4323      	orrs	r3, r4
 80465e6:	d03f      	beq.n	8046668 <scalbn+0x98>
 80465e8:	4b35      	ldr	r3, [pc, #212]	; (80466c0 <scalbn+0xf0>)
 80465ea:	4629      	mov	r1, r5
 80465ec:	ee10 0a10 	vmov	r0, s0
 80465f0:	2200      	movs	r2, #0
 80465f2:	f7da f831 	bl	8020658 <__aeabi_dmul>
 80465f6:	4b33      	ldr	r3, [pc, #204]	; (80466c4 <scalbn+0xf4>)
 80465f8:	429e      	cmp	r6, r3
 80465fa:	4604      	mov	r4, r0
 80465fc:	460d      	mov	r5, r1
 80465fe:	da10      	bge.n	8046622 <scalbn+0x52>
 8046600:	a327      	add	r3, pc, #156	; (adr r3, 80466a0 <scalbn+0xd0>)
 8046602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8046606:	e01f      	b.n	8046648 <scalbn+0x78>
 8046608:	f240 72ff 	movw	r2, #2047	; 0x7ff
 804660c:	4291      	cmp	r1, r2
 804660e:	d10c      	bne.n	804662a <scalbn+0x5a>
 8046610:	ee10 2a10 	vmov	r2, s0
 8046614:	4620      	mov	r0, r4
 8046616:	4629      	mov	r1, r5
 8046618:	f7d9 fe68 	bl	80202ec <__adddf3>
 804661c:	4604      	mov	r4, r0
 804661e:	460d      	mov	r5, r1
 8046620:	e022      	b.n	8046668 <scalbn+0x98>
 8046622:	460b      	mov	r3, r1
 8046624:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8046628:	3936      	subs	r1, #54	; 0x36
 804662a:	f24c 3250 	movw	r2, #50000	; 0xc350
 804662e:	4296      	cmp	r6, r2
 8046630:	dd0d      	ble.n	804664e <scalbn+0x7e>
 8046632:	2d00      	cmp	r5, #0
 8046634:	a11c      	add	r1, pc, #112	; (adr r1, 80466a8 <scalbn+0xd8>)
 8046636:	e9d1 0100 	ldrd	r0, r1, [r1]
 804663a:	da02      	bge.n	8046642 <scalbn+0x72>
 804663c:	a11c      	add	r1, pc, #112	; (adr r1, 80466b0 <scalbn+0xe0>)
 804663e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8046642:	a319      	add	r3, pc, #100	; (adr r3, 80466a8 <scalbn+0xd8>)
 8046644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8046648:	f7da f806 	bl	8020658 <__aeabi_dmul>
 804664c:	e7e6      	b.n	804661c <scalbn+0x4c>
 804664e:	1872      	adds	r2, r6, r1
 8046650:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8046654:	428a      	cmp	r2, r1
 8046656:	dcec      	bgt.n	8046632 <scalbn+0x62>
 8046658:	2a00      	cmp	r2, #0
 804665a:	dd08      	ble.n	804666e <scalbn+0x9e>
 804665c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8046660:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8046664:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8046668:	ec45 4b10 	vmov	d0, r4, r5
 804666c:	bd70      	pop	{r4, r5, r6, pc}
 804666e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8046672:	da08      	bge.n	8046686 <scalbn+0xb6>
 8046674:	2d00      	cmp	r5, #0
 8046676:	a10a      	add	r1, pc, #40	; (adr r1, 80466a0 <scalbn+0xd0>)
 8046678:	e9d1 0100 	ldrd	r0, r1, [r1]
 804667c:	dac0      	bge.n	8046600 <scalbn+0x30>
 804667e:	a10e      	add	r1, pc, #56	; (adr r1, 80466b8 <scalbn+0xe8>)
 8046680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8046684:	e7bc      	b.n	8046600 <scalbn+0x30>
 8046686:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 804668a:	3236      	adds	r2, #54	; 0x36
 804668c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8046690:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8046694:	4620      	mov	r0, r4
 8046696:	4b0c      	ldr	r3, [pc, #48]	; (80466c8 <scalbn+0xf8>)
 8046698:	2200      	movs	r2, #0
 804669a:	e7d5      	b.n	8046648 <scalbn+0x78>
 804669c:	f3af 8000 	nop.w
 80466a0:	c2f8f359 	.word	0xc2f8f359
 80466a4:	01a56e1f 	.word	0x01a56e1f
 80466a8:	8800759c 	.word	0x8800759c
 80466ac:	7e37e43c 	.word	0x7e37e43c
 80466b0:	8800759c 	.word	0x8800759c
 80466b4:	fe37e43c 	.word	0xfe37e43c
 80466b8:	c2f8f359 	.word	0xc2f8f359
 80466bc:	81a56e1f 	.word	0x81a56e1f
 80466c0:	43500000 	.word	0x43500000
 80466c4:	ffff3cb0 	.word	0xffff3cb0
 80466c8:	3c900000 	.word	0x3c900000
 80466cc:	00000000 	.word	0x00000000

080466d0 <floor>:
 80466d0:	ec51 0b10 	vmov	r0, r1, d0
 80466d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80466d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80466dc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80466e0:	2e13      	cmp	r6, #19
 80466e2:	ee10 5a10 	vmov	r5, s0
 80466e6:	ee10 8a10 	vmov	r8, s0
 80466ea:	460c      	mov	r4, r1
 80466ec:	dc31      	bgt.n	8046752 <floor+0x82>
 80466ee:	2e00      	cmp	r6, #0
 80466f0:	da14      	bge.n	804671c <floor+0x4c>
 80466f2:	a333      	add	r3, pc, #204	; (adr r3, 80467c0 <floor+0xf0>)
 80466f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80466f8:	f7d9 fdf8 	bl	80202ec <__adddf3>
 80466fc:	2200      	movs	r2, #0
 80466fe:	2300      	movs	r3, #0
 8046700:	f7da fa3a 	bl	8020b78 <__aeabi_dcmpgt>
 8046704:	b138      	cbz	r0, 8046716 <floor+0x46>
 8046706:	2c00      	cmp	r4, #0
 8046708:	da53      	bge.n	80467b2 <floor+0xe2>
 804670a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 804670e:	4325      	orrs	r5, r4
 8046710:	d052      	beq.n	80467b8 <floor+0xe8>
 8046712:	4c2d      	ldr	r4, [pc, #180]	; (80467c8 <floor+0xf8>)
 8046714:	2500      	movs	r5, #0
 8046716:	4621      	mov	r1, r4
 8046718:	4628      	mov	r0, r5
 804671a:	e024      	b.n	8046766 <floor+0x96>
 804671c:	4f2b      	ldr	r7, [pc, #172]	; (80467cc <floor+0xfc>)
 804671e:	4137      	asrs	r7, r6
 8046720:	ea01 0307 	and.w	r3, r1, r7
 8046724:	4303      	orrs	r3, r0
 8046726:	d01e      	beq.n	8046766 <floor+0x96>
 8046728:	a325      	add	r3, pc, #148	; (adr r3, 80467c0 <floor+0xf0>)
 804672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804672e:	f7d9 fddd 	bl	80202ec <__adddf3>
 8046732:	2200      	movs	r2, #0
 8046734:	2300      	movs	r3, #0
 8046736:	f7da fa1f 	bl	8020b78 <__aeabi_dcmpgt>
 804673a:	2800      	cmp	r0, #0
 804673c:	d0eb      	beq.n	8046716 <floor+0x46>
 804673e:	2c00      	cmp	r4, #0
 8046740:	bfbe      	ittt	lt
 8046742:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8046746:	4133      	asrlt	r3, r6
 8046748:	18e4      	addlt	r4, r4, r3
 804674a:	ea24 0407 	bic.w	r4, r4, r7
 804674e:	2500      	movs	r5, #0
 8046750:	e7e1      	b.n	8046716 <floor+0x46>
 8046752:	2e33      	cmp	r6, #51	; 0x33
 8046754:	dd0b      	ble.n	804676e <floor+0x9e>
 8046756:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 804675a:	d104      	bne.n	8046766 <floor+0x96>
 804675c:	ee10 2a10 	vmov	r2, s0
 8046760:	460b      	mov	r3, r1
 8046762:	f7d9 fdc3 	bl	80202ec <__adddf3>
 8046766:	ec41 0b10 	vmov	d0, r0, r1
 804676a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804676e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8046772:	f04f 37ff 	mov.w	r7, #4294967295
 8046776:	40df      	lsrs	r7, r3
 8046778:	4238      	tst	r0, r7
 804677a:	d0f4      	beq.n	8046766 <floor+0x96>
 804677c:	a310      	add	r3, pc, #64	; (adr r3, 80467c0 <floor+0xf0>)
 804677e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8046782:	f7d9 fdb3 	bl	80202ec <__adddf3>
 8046786:	2200      	movs	r2, #0
 8046788:	2300      	movs	r3, #0
 804678a:	f7da f9f5 	bl	8020b78 <__aeabi_dcmpgt>
 804678e:	2800      	cmp	r0, #0
 8046790:	d0c1      	beq.n	8046716 <floor+0x46>
 8046792:	2c00      	cmp	r4, #0
 8046794:	da0a      	bge.n	80467ac <floor+0xdc>
 8046796:	2e14      	cmp	r6, #20
 8046798:	d101      	bne.n	804679e <floor+0xce>
 804679a:	3401      	adds	r4, #1
 804679c:	e006      	b.n	80467ac <floor+0xdc>
 804679e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80467a2:	2301      	movs	r3, #1
 80467a4:	40b3      	lsls	r3, r6
 80467a6:	441d      	add	r5, r3
 80467a8:	45a8      	cmp	r8, r5
 80467aa:	d8f6      	bhi.n	804679a <floor+0xca>
 80467ac:	ea25 0507 	bic.w	r5, r5, r7
 80467b0:	e7b1      	b.n	8046716 <floor+0x46>
 80467b2:	2500      	movs	r5, #0
 80467b4:	462c      	mov	r4, r5
 80467b6:	e7ae      	b.n	8046716 <floor+0x46>
 80467b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80467bc:	e7ab      	b.n	8046716 <floor+0x46>
 80467be:	bf00      	nop
 80467c0:	8800759c 	.word	0x8800759c
 80467c4:	7e37e43c 	.word	0x7e37e43c
 80467c8:	bff00000 	.word	0xbff00000
 80467cc:	000fffff 	.word	0x000fffff

080467d0 <_init>:
 80467d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80467d2:	bf00      	nop
 80467d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80467d6:	bc08      	pop	{r3}
 80467d8:	469e      	mov	lr, r3
 80467da:	4770      	bx	lr

080467dc <_fini>:
 80467dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80467de:	bf00      	nop
 80467e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80467e2:	bc08      	pop	{r3}
 80467e4:	469e      	mov	lr, r3
 80467e6:	4770      	bx	lr
