
GOS2022_iplTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021f4  080129a0  080129a0  000229a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b94  08014b94  00031ef8  2**0
                  CONTENTS
  4 .ARM          00000008  08014b94  08014b94  00024b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b9c  08014b9c  00031ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b9c  08014b9c  00024b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014ba0  08014ba0  00024ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ef8  20000000  08014ba4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009980  20001ef8  08016a9c  00031ef8  2**3
                  ALLOC
 10 ._user_heap_stack 00000800  2000b878  08016a9c  0003b878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031ef8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00031f28  2**0
                  CONTENTS, READONLY
 13 .debug_info   000202ca  00000000  00000000  00031f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006d60  00000000  00000000  00052235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af8  00000000  00000000  00058f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c4  00000000  00000000  0005aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004ad09  00000000  00000000  0005be54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f20b  00000000  00000000  000a6b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec1cf  00000000  00000000  000d5d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007730  00000000  00000000  001c1f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001c9668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001ef8 	.word	0x20001ef8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012984 	.word	0x08012984

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001efc 	.word	0x20001efc
 800020c:	08012984 	.word	0x08012984

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <gos_platformDriverInit>:

/*
 * Function: gos_platformDriverInit
 */
gos_result_t gos_platformDriverInit (void_t)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	// Platform driver initialization result.
	gos_result_t platformDriverInitResult = GOS_SUCCESS;
 8000f0a:	2355      	movs	r3, #85	; 0x55
 8000f0c:	71fb      	strb	r3, [r7, #7]

	// Driver init.
	if (HAL_Init() != HAL_OK)
 8000f0e:	f000 fba1 	bl	8001654 <HAL_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <gos_platformDriverInit+0x18>
	{
		platformDriverInitResult = GOS_ERROR;
 8000f18:	23ae      	movs	r3, #174	; 0xae
 8000f1a:	71fb      	strb	r3, [r7, #7]
	}

	platformDriverInitResult = driver_init();
 8000f1c:	f000 f9a6 	bl	800126c <driver_init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]

	// Register kernel drivers.
	platformDriverInitResult &= gos_driverInit(&driverFunctions);
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <gos_platformDriverInit+0x54>)
 8000f26:	f008 f8ef 	bl	8009108 <gos_driverInit>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4013      	ands	r3, r2
 8000f32:	71fb      	strb	r3, [r7, #7]

    if (platformDriverInitResult != GOS_SUCCESS)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b55      	cmp	r3, #85	; 0x55
 8000f38:	d001      	beq.n	8000f3e <gos_platformDriverInit+0x3a>
	{
    	platformDriverInitResult = GOS_ERROR;
 8000f3a:	23ae      	movs	r3, #174	; 0xae
 8000f3c:	71fb      	strb	r3, [r7, #7]
	}

    SysTick->VAL = 0;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <gos_platformDriverInit+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <gos_platformDriverInit+0x58>)
 8000f46:	2207      	movs	r2, #7
 8000f48:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f4a:	b662      	cpsie	i
}
 8000f4c:	bf00      	nop

    __enable_irq();

	return platformDriverInitResult;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <gos_userApplicationInit>:

/*
 * Function: gos_userApplicationInit
 */
gos_result_t gos_userApplicationInit (void_t)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	gos_result_t appInitResult = GOS_SUCCESS;
 8000f66:	2355      	movs	r3, #85	; 0x55
 8000f68:	71fb      	strb	r3, [r7, #7]

	// Initialize device state manager for startup.
	appInitResult &= svl_dsmInit();
 8000f6a:	f006 feeb 	bl	8007d44 <svl_dsmInit>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4013      	ands	r3, r2
 8000f76:	71fb      	strb	r3, [r7, #7]

	// Welcome message.
	(void_t) gos_traceTrace(GOS_FALSE, "Welcome to IPL test application!");
 8000f78:	4906      	ldr	r1, [pc, #24]	; (8000f94 <gos_userApplicationInit+0x34>)
 8000f7a:	2049      	movs	r0, #73	; 0x49
 8000f7c:	f00e f8ae 	bl	800f0dc <gos_traceTrace>

	if (appInitResult != GOS_SUCCESS)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b55      	cmp	r3, #85	; 0x55
 8000f84:	d001      	beq.n	8000f8a <gos_userApplicationInit+0x2a>
	{
		appInitResult = GOS_ERROR;
 8000f86:	23ae      	movs	r3, #174	; 0xae
 8000f88:	71fb      	strb	r3, [r7, #7]
	}

	return appInitResult;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	080129a0 	.word	0x080129a0

08000f98 <app_iplBdSpecInit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout);
GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout);

gos_result_t app_iplBdSpecInit (void_t)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	return svl_iplConfigure(app_iplBdSpecTransmit, app_iplBdSpecReceive);
 8000f9c:	4903      	ldr	r1, [pc, #12]	; (8000fac <app_iplBdSpecInit+0x14>)
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <app_iplBdSpecInit+0x18>)
 8000fa0:	f007 f932 	bl	8008208 <svl_iplConfigure>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	08000fdd 	.word	0x08000fdd
 8000fb0:	08000fb5 	.word	0x08000fb5

08000fb4 <app_iplBdSpecTransmit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	return drv_uartTransmitIT(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68f9      	ldr	r1, [r7, #12]
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f006 fbb7 	bl	8007740 <drv_uartTransmitIT>
 8000fd2:	4603      	mov	r3, r0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <app_iplBdSpecReceive>:

GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	if (timeout < 0xFFFFFFFFu)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fee:	d008      	beq.n	8001002 <app_iplBdSpecReceive+0x26>
	{
		return drv_uartReceiveBlocking(DRV_UART_INSTANCE_4, pData, dataSize, timeout);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68f9      	ldr	r1, [r7, #12]
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f006 fa75 	bl	80074e8 <drv_uartReceiveBlocking>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e009      	b.n	8001016 <app_iplBdSpecReceive+0x3a>
	}
	else
	{
		return drv_uartReceiveDMA(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	b29a      	uxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68f9      	ldr	r1, [r7, #12]
 800100e:	2003      	movs	r0, #3
 8001010:	f006 fb26 	bl	8007660 <drv_uartReceiveDMA>
 8001014:	4603      	mov	r3, r0
	}
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <APP_LedInit>:
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER,
	.taskStackSize      = 0x300
};

gos_result_t APP_LedInit (void_t)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	gos_result_t ledInitResult = GOS_SUCCESS;
 8001026:	2355      	movs	r3, #85	; 0x55
 8001028:	71fb      	strb	r3, [r7, #7]

	ledInitResult &= gos_taskRegister(&ledTaskDesc, NULL);
 800102a:	2100      	movs	r1, #0
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <APP_LedInit+0x30>)
 800102e:	f009 fa53 	bl	800a4d8 <gos_taskRegister>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4013      	ands	r3, r2
 800103a:	71fb      	strb	r3, [r7, #7]

	if (ledInitResult != GOS_SUCCESS)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b55      	cmp	r3, #85	; 0x55
 8001040:	d001      	beq.n	8001046 <APP_LedInit+0x26>
	{
		ledInitResult = GOS_ERROR;
 8001042:	23ae      	movs	r3, #174	; 0xae
 8001044:	71fb      	strb	r3, [r7, #7]
	}

	return ledInitResult;
 8001046:	79fb      	ldrb	r3, [r7, #7]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000001c 	.word	0x2000001c

08001054 <APP_LedTask>:

GOS_STATIC void_t APP_LedTask (void_t)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	for (;;)
	{
		drv_gpioTgglePin(IO_USER_LED);
 8001058:	2000      	movs	r0, #0
 800105a:	f005 fafd 	bl	8006658 <drv_gpioTgglePin>
		gos_taskSleep(LED_TASK_PERIOD);
 800105e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001062:	f009 fbcb 	bl	800a7fc <gos_taskSleep>
		drv_gpioTgglePin(IO_USER_LED);
 8001066:	e7f7      	b.n	8001058 <APP_LedTask+0x4>

08001068 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	return 1;
 800106c:	2301      	movs	r3, #1
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_kill>:

int _kill(int pid, int sig)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001082:	f00f fbd1 	bl	8010828 <__errno>
 8001086:	4603      	mov	r3, r0
 8001088:	2216      	movs	r2, #22
 800108a:	601a      	str	r2, [r3, #0]
	return -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_exit>:

void _exit (int status)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffe7 	bl	8001078 <_kill>
	while (1) {}		/* Make sure we hang here */
 80010aa:	e7fe      	b.n	80010aa <_exit+0x12>

080010ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e00a      	b.n	80010d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010be:	f3af 8000 	nop.w
 80010c2:	4601      	mov	r1, r0
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	60ba      	str	r2, [r7, #8]
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dbf0      	blt.n	80010be <_read+0x12>
	}

return len;
 80010dc:	687b      	ldr	r3, [r7, #4]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	e009      	b.n	800110c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbf1      	blt.n	80010f8 <_write+0x12>
	}
	return len;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_close>:

int _close(int file)
{
 800111e:	b480      	push	{r7}
 8001120:	b083      	sub	sp, #12
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	return -1;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001146:	605a      	str	r2, [r3, #4]
	return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_isatty>:

int _isatty(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	return 1;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
	return 0;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f00f fb36 	bl	8010828 <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	220c      	movs	r2, #12
 80011c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20020000 	.word	0x20020000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	20001f14 	.word	0x20001f14
 80011f0:	2000b878 	.word	0x2000b878

080011f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800121c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800121e:	e003      	b.n	8001228 <LoopCopyDataInit>

08001220 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001222:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001224:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001226:	3104      	adds	r1, #4

08001228 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800122c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800122e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001230:	d3f6      	bcc.n	8001220 <CopyDataInit>
  ldr  r2, =_sbss
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001234:	e002      	b.n	800123c <LoopFillZerobss>

08001236 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001236:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001238:	f842 3b04 	str.w	r3, [r2], #4

0800123c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800123e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001240:	d3f9      	bcc.n	8001236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001242:	f7ff ffd7 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f00f faf5 	bl	8010834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f00a fee1 	bl	800c010 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001250:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001254:	08014ba4 	.word	0x08014ba4
  ldr  r0, =_sdata
 8001258:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800125c:	20001ef8 	.word	0x20001ef8
  ldr  r2, =_sbss
 8001260:	20001ef8 	.word	0x20001ef8
  ldr  r3, = _ebss
 8001264:	2000b878 	.word	0x2000b878

08001268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>
	...

0800126c <driver_init>:
#include "drv_uart.h"

GOS_STATIC void_t sysTickHook (void_t);

gos_result_t driver_init (void_t)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	gos_result_t driverInitResult = GOS_SUCCESS;
 8001272:	2355      	movs	r3, #85	; 0x55
 8001274:	71fb      	strb	r3, [r7, #7]


	driverInitResult &= rcc_driver_init();
 8001276:	f000 f83f 	bl	80012f8 <rcc_driver_init>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	4013      	ands	r3, r2
 8001282:	71fb      	strb	r3, [r7, #7]
	//driverInitResult &= timer_driver_systimer_init();
	driverInitResult &= drv_tmrInit();
 8001284:	f005 fc1c 	bl	8006ac0 <drv_tmrInit>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4013      	ands	r3, r2
 8001290:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_systimerStart();
 8001292:	f005 fbd7 	bl	8006a44 <drv_systimerStart>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4013      	ands	r3, r2
 800129e:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= drv_gpioInit();
 80012a0:	f005 f948 	bl	8006534 <drv_gpioInit>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4013      	ands	r3, r2
 80012ac:	71fb      	strb	r3, [r7, #7]
	//driverInitResult &= drv_adcInit();

	//driverInitResult &= dac_driver_init();
	//driverInitResult &= drv_dacInit();

	driverInitResult &= drv_dmaInit();
 80012ae:	f004 fc71 	bl	8005b94 <drv_dmaInit>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4013      	ands	r3, r2
 80012ba:	71fb      	strb	r3, [r7, #7]
	//driverInitResult &= drv_spiInit();
	driverInitResult &= drv_uartInit();
 80012bc:	f005 ff78 	bl	80071b0 <drv_uartInit>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4013      	ands	r3, r2
 80012c8:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_itInit();
 80012ca:	f005 fadd 	bl	8006888 <drv_itInit>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4013      	ands	r3, r2
 80012d6:	71fb      	strb	r3, [r7, #7]
	//driverInitResult &= lm75_driver_init();

	gos_kernelRegisterSysTickHook(sysTickHook);
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <driver_init+0x7c>)
 80012da:	f008 f88b 	bl	80093f4 <gos_kernelRegisterSysTickHook>

	return driverInitResult;
 80012de:	79fb      	ldrb	r3, [r7, #7]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	080012ed 	.word	0x080012ed

080012ec <sysTickHook>:

GOS_STATIC void_t sysTickHook (void_t)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80012f0:	f000 fa0a 	bl	8001708 <HAL_IncTick>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <rcc_driver_init>:
#include "rcc_driver.h"
//#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"

gos_result_t rcc_driver_init (void_t)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0ac      	sub	sp, #176	; 0xb0
 80012fc:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 80012fe:	23ae      	movs	r3, #174	; 0xae
 8001300:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001304:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001308:	2234      	movs	r2, #52	; 0x34
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f00f fa39 	bl	8010784 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001312:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]

	/*
	 * Function code.
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	663b      	str	r3, [r7, #96]	; 0x60
 8001326:	4ba3      	ldr	r3, [pc, #652]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4aa2      	ldr	r2, [pc, #648]	; (80015b4 <rcc_driver_init+0x2bc>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4ba0      	ldr	r3, [pc, #640]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	663b      	str	r3, [r7, #96]	; 0x60
 800133c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800133e:	2300      	movs	r3, #0
 8001340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001342:	4b9d      	ldr	r3, [pc, #628]	; (80015b8 <rcc_driver_init+0x2c0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800134a:	4a9b      	ldr	r2, [pc, #620]	; (80015b8 <rcc_driver_init+0x2c0>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b99      	ldr	r3, [pc, #612]	; (80015b8 <rcc_driver_init+0x2c0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800135a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800135c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLM = 16;
	RCC_OscInitStruct.PLL.PLLN = 336;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	RCC_OscInitStruct.PLL.PLLR = 2;*/
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800135e:	2301      	movs	r3, #1
 8001360:	67bb      	str	r3, [r7, #120]	; 0x78
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001366:	67fb      	str	r3, [r7, #124]	; 0x7c
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800136e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001372:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  RCC_OscInitStruct.PLL.PLLM = 4;
 8001376:	2304      	movs	r3, #4
 8001378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  RCC_OscInitStruct.PLL.PLLN = 50;
 800137c:	2332      	movs	r3, #50	; 0x32
 800137e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  RCC_OscInitStruct.PLL.PLLR = 2;
 800138e:	2302      	movs	r3, #2
 8001390:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 8001394:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001398:	4618      	mov	r0, r3
 800139a:	f001 feef 	bl	800317c <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d116      	bne.n	80013d2 <rcc_driver_init+0xda>
	{
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	667b      	str	r3, [r7, #100]	; 0x64
		                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2302      	movs	r3, #2
 80013aa:	66bb      	str	r3, [r7, #104]	; 0x68
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	66fb      	str	r3, [r7, #108]	; 0x6c
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	673b      	str	r3, [r7, #112]	; 0x70
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	677b      	str	r3, [r7, #116]	; 0x74

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, /*FLASH_LATENCY_2*/ FLASH_LATENCY_1) == HAL_OK)
 80013ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013be:	2101      	movs	r1, #1
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fb91 	bl	8002ae8 <HAL_RCC_ClockConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <rcc_driver_init+0xda>
		{
			initResult = GOS_SUCCESS;
 80013cc:	2355      	movs	r3, #85	; 0x55
 80013ce:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		}
	}

	// TODO
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80013d6:	4b77      	ldr	r3, [pc, #476]	; (80015b4 <rcc_driver_init+0x2bc>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a76      	ldr	r2, [pc, #472]	; (80015b4 <rcc_driver_init+0x2bc>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b74      	ldr	r3, [pc, #464]	; (80015b4 <rcc_driver_init+0x2bc>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80013ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	657b      	str	r3, [r7, #84]	; 0x54
 80013f2:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <rcc_driver_init+0x2bc>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a6f      	ldr	r2, [pc, #444]	; (80015b4 <rcc_driver_init+0x2bc>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	657b      	str	r3, [r7, #84]	; 0x54
 8001408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	653b      	str	r3, [r7, #80]	; 0x50
 800140e:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a68      	ldr	r2, [pc, #416]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <rcc_driver_init+0x2bc>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	653b      	str	r3, [r7, #80]	; 0x50
 8001424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800142a:	4b62      	ldr	r3, [pc, #392]	; (80015b4 <rcc_driver_init+0x2bc>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a61      	ldr	r2, [pc, #388]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	64bb      	str	r3, [r7, #72]	; 0x48
 8001446:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a5a      	ldr	r2, [pc, #360]	; (80015b4 <rcc_driver_init+0x2bc>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	64bb      	str	r3, [r7, #72]	; 0x48
 800145c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

	__HAL_RCC_ADC1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	647b      	str	r3, [r7, #68]	; 0x44
 8001462:	4b54      	ldr	r3, [pc, #336]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a53      	ldr	r2, [pc, #332]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
 8001478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	__HAL_RCC_DMA1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	643b      	str	r3, [r7, #64]	; 0x40
 800147e:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a4c      	ldr	r2, [pc, #304]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <rcc_driver_init+0x2bc>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001492:	643b      	str	r3, [r7, #64]	; 0x40
 8001494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800149a:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <rcc_driver_init+0x2bc>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a45      	ldr	r2, [pc, #276]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	__HAL_RCC_I2C1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80014b6:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a3e      	ldr	r2, [pc, #248]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80014cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	__HAL_RCC_I2C2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a37      	ldr	r2, [pc, #220]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
 80014e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	__HAL_RCC_SPI2_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a30      	ldr	r2, [pc, #192]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <rcc_driver_init+0x2bc>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
 8001504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	__HAL_RCC_SPI3_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <rcc_driver_init+0x2bc>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a29      	ldr	r2, [pc, #164]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a22      	ldr	r2, [pc, #136]	; (80015b4 <rcc_driver_init+0x2bc>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_TIM3_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_TIM12_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001568:	6413      	str	r3, [r2, #64]	; 0x40
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <rcc_driver_init+0x2bc>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001572:	623b      	str	r3, [r7, #32]
 8001574:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DAC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <rcc_driver_init+0x2bc>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a0d      	ldr	r2, [pc, #52]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]

	__HAL_RCC_USART1_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <rcc_driver_init+0x2bc>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <rcc_driver_init+0x2bc>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <rcc_driver_init+0x2bc>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_USART2_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e003      	b.n	80015bc <rcc_driver_init+0x2c4>
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <rcc_driver_init+0x358>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a23      	ldr	r2, [pc, #140]	; (8001650 <rcc_driver_init+0x358>)
 80015c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <rcc_driver_init+0x358>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART3_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <rcc_driver_init+0x358>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <rcc_driver_init+0x358>)
 80015de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <rcc_driver_init+0x358>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_UART4_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <rcc_driver_init+0x358>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	4a15      	ldr	r2, [pc, #84]	; (8001650 <rcc_driver_init+0x358>)
 80015fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <rcc_driver_init+0x358>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_UART5_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <rcc_driver_init+0x358>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <rcc_driver_init+0x358>)
 8001616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <rcc_driver_init+0x358>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART6_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <rcc_driver_init+0x358>)
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <rcc_driver_init+0x358>)
 8001632:	f043 0320 	orr.w	r3, r3, #32
 8001636:	6453      	str	r3, [r2, #68]	; 0x44
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <rcc_driver_init+0x358>)
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	f003 0320 	and.w	r3, r3, #32
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]

	return initResult;
 8001644:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 8001648:	4618      	mov	r0, r3
 800164a:	37b0      	adds	r7, #176	; 0xb0
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <HAL_Init+0x40>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_Init+0x40>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800166e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_Init+0x40>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f933 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f810 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f000 f806 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x54>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x58>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4619      	mov	r1, r3
 80016ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016be:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f943 	bl	8001952 <HAL_SYSTICK_Config>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d80a      	bhi.n	80016f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f000 f90b 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e8:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_InitTick+0x5c>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e000      	b.n	80016f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000088 	.word	0x20000088
 8001700:	20000314 	.word	0x20000314
 8001704:	20000310 	.word	0x20000310

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000314 	.word	0x20000314
 800172c:	20001f20 	.word	0x20001f20

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20001f20 	.word	0x20001f20

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff29 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff3e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff8e 	bl	800183c <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff31 	bl	80017ac <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffa2 	bl	80018a4 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff feda 	bl	8001730 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e099      	b.n	8001abc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a8:	e00f      	b.n	80019ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019aa:	f7ff fec1 	bl	8001730 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d908      	bls.n	80019ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2203      	movs	r2, #3
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e078      	b.n	8001abc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e8      	bne.n	80019aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_DMA_Init+0x158>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d107      	bne.n	8001a34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f023 0307 	bic.w	r3, r3, #7
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d117      	bne.n	8001a8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00e      	beq.n	8001a8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fb0d 	bl	8002090 <DMA_CheckFifoParam>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2240      	movs	r2, #64	; 0x40
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e016      	b.n	8001abc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fac4 	bl	8002024 <DMA_CalcBaseAndBitshift>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	223f      	movs	r2, #63	; 0x3f
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	f010803f 	.word	0xf010803f

08001ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_DMA_Start_IT+0x26>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e040      	b.n	8001b70 <HAL_DMA_Start_IT+0xa8>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d12f      	bne.n	8001b62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fa56 	bl	8001fc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b20:	223f      	movs	r2, #63	; 0x3f
 8001b22:	409a      	lsls	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0216 	orr.w	r2, r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0208 	orr.w	r2, r2, #8
 8001b4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e005      	b.n	8001b6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b86:	f7ff fdd3 	bl	8001730 <HAL_GetTick>
 8001b8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d008      	beq.n	8001baa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e052      	b.n	8001c50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0216 	bic.w	r2, r2, #22
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d103      	bne.n	8001bda <HAL_DMA_Abort+0x62>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0208 	bic.w	r2, r2, #8
 8001be8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfa:	e013      	b.n	8001c24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfc:	f7ff fd98 	bl	8001730 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d90c      	bls.n	8001c24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e015      	b.n	8001c50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1e4      	bne.n	8001bfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	223f      	movs	r2, #63	; 0x3f
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d004      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00c      	b.n	8001c90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2205      	movs	r2, #5
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ca8:	4b8e      	ldr	r3, [pc, #568]	; (8001ee4 <HAL_DMA_IRQHandler+0x248>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a8e      	ldr	r2, [pc, #568]	; (8001ee8 <HAL_DMA_IRQHandler+0x24c>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d012      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	f043 0202 	orr.w	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2204      	movs	r2, #4
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d012      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2204      	movs	r2, #4
 8001d62:	409a      	lsls	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	2210      	movs	r2, #16
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d043      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d03c      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2210      	movs	r2, #16
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d018      	beq.n	8001dde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d024      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
 8001dca:	e01f      	b.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
 8001ddc:	e016      	b.n	8001e0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0208 	bic.w	r2, r2, #8
 8001dfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2220      	movs	r2, #32
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 808f 	beq.w	8001f3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8087 	beq.w	8001f3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	2220      	movs	r2, #32
 8001e34:	409a      	lsls	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d136      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0216 	bic.w	r2, r2, #22
 8001e54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <HAL_DMA_IRQHandler+0x1da>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0208 	bic.w	r2, r2, #8
 8001e84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	223f      	movs	r2, #63	; 0x3f
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d07e      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
        }
        return;
 8001eb2:	e079      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01d      	beq.n	8001efe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10d      	bne.n	8001eec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d031      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
 8001ee0:	e02c      	b.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
 8001ee2:	bf00      	nop
 8001ee4:	20000088 	.word	0x20000088
 8001ee8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d023      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e01e      	b.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10f      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0210 	bic.w	r2, r2, #16
 8001f1a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d032      	beq.n	8001faa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d022      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2205      	movs	r2, #5
 8001f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d307      	bcc.n	8001f84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f2      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x2cc>
 8001f82:	e000      	b.n	8001f86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f84:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
 8001fa6:	e000      	b.n	8001faa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fa8:	bf00      	nop
    }
  }
}
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b40      	cmp	r3, #64	; 0x40
 8001ff4:	d108      	bne.n	8002008 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002006:	e007      	b.n	8002018 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	60da      	str	r2, [r3, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	3b10      	subs	r3, #16
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <DMA_CalcBaseAndBitshift+0x64>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800203e:	4a13      	ldr	r2, [pc, #76]	; (800208c <DMA_CalcBaseAndBitshift+0x68>)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d909      	bls.n	8002066 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205a:	f023 0303 	bic.w	r3, r3, #3
 800205e:	1d1a      	adds	r2, r3, #4
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	659a      	str	r2, [r3, #88]	; 0x58
 8002064:	e007      	b.n	8002076 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	aaaaaaab 	.word	0xaaaaaaab
 800208c:	08014654 	.word	0x08014654

08002090 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11f      	bne.n	80020ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d856      	bhi.n	800215e <DMA_CheckFifoParam+0xce>
 80020b0:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <DMA_CheckFifoParam+0x28>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	080020db 	.word	0x080020db
 80020c0:	080020c9 	.word	0x080020c9
 80020c4:	0800215f 	.word	0x0800215f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d046      	beq.n	8002162 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d8:	e043      	b.n	8002162 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020e2:	d140      	bne.n	8002166 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020e8:	e03d      	b.n	8002166 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f2:	d121      	bne.n	8002138 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b03      	cmp	r3, #3
 80020f8:	d837      	bhi.n	800216a <DMA_CheckFifoParam+0xda>
 80020fa:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <DMA_CheckFifoParam+0x70>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	08002111 	.word	0x08002111
 8002104:	08002117 	.word	0x08002117
 8002108:	08002111 	.word	0x08002111
 800210c:	08002129 	.word	0x08002129
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
      break;
 8002114:	e030      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d025      	beq.n	800216e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002126:	e022      	b.n	800216e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002130:	d11f      	bne.n	8002172 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002136:	e01c      	b.n	8002172 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d903      	bls.n	8002146 <DMA_CheckFifoParam+0xb6>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d003      	beq.n	800214c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002144:	e018      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      break;
 800214a:	e015      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00e      	beq.n	8002176 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
      break;
 800215c:	e00b      	b.n	8002176 <DMA_CheckFifoParam+0xe6>
      break;
 800215e:	bf00      	nop
 8002160:	e00a      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 8002162:	bf00      	nop
 8002164:	e008      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 8002166:	bf00      	nop
 8002168:	e006      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 800216a:	bf00      	nop
 800216c:	e004      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 800216e:	bf00      	nop
 8002170:	e002      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;   
 8002172:	bf00      	nop
 8002174:	e000      	b.n	8002178 <DMA_CheckFifoParam+0xe8>
      break;
 8002176:	bf00      	nop
    }
  } 
  
  return status; 
 8002178:	7bfb      	ldrb	r3, [r7, #15]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop

08002188 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <HAL_FLASH_Program+0xa0>)
 800219c:	7e1b      	ldrb	r3, [r3, #24]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_FLASH_Program+0x1e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e03b      	b.n	800221e <HAL_FLASH_Program+0x96>
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_FLASH_Program+0xa0>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021b0:	f000 f870 	bl	8002294 <FLASH_WaitForLastOperation>
 80021b4:	4603      	mov	r3, r0
 80021b6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d12b      	bne.n	8002216 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80021c4:	783b      	ldrb	r3, [r7, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	68b8      	ldr	r0, [r7, #8]
 80021ca:	f000 f91b 	bl	8002404 <FLASH_Program_Byte>
 80021ce:	e016      	b.n	80021fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80021d6:	883b      	ldrh	r3, [r7, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	68b8      	ldr	r0, [r7, #8]
 80021dc:	f000 f8ee 	bl	80023bc <FLASH_Program_HalfWord>
 80021e0:	e00d      	b.n	80021fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d105      	bne.n	80021f4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	68b8      	ldr	r0, [r7, #8]
 80021ee:	f000 f8c3 	bl	8002378 <FLASH_Program_Word>
 80021f2:	e004      	b.n	80021fe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80021f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021f8:	68b8      	ldr	r0, [r7, #8]
 80021fa:	f000 f88b 	bl	8002314 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002202:	f000 f847 	bl	8002294 <FLASH_WaitForLastOperation>
 8002206:	4603      	mov	r3, r0
 8002208:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_FLASH_Program+0xa4>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_FLASH_Program+0xa4>)
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_FLASH_Program+0xa0>)
 8002218:	2200      	movs	r2, #0
 800221a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800221c:	7dfb      	ldrb	r3, [r7, #23]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20001f24 	.word	0x20001f24
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	da0b      	bge.n	800225a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 8002244:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_FLASH_Unlock+0x3c>)
 8002246:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_FLASH_Unlock+0x40>)
 800224c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_FLASH_Unlock+0x38>)
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b00      	cmp	r3, #0
 8002254:	da01      	bge.n	800225a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800225a:	79fb      	ldrb	r3, [r7, #7]
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40023c00 	.word	0x40023c00
 800226c:	45670123 	.word	0x45670123
 8002270:	cdef89ab 	.word	0xcdef89ab

08002274 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_FLASH_Lock+0x1c>)
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_FLASH_Lock+0x1c>)
 800227e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002282:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40023c00 	.word	0x40023c00

08002294 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022a0:	4b1a      	ldr	r3, [pc, #104]	; (800230c <FLASH_WaitForLastOperation+0x78>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80022a6:	f7ff fa43 	bl	8001730 <HAL_GetTick>
 80022aa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022ac:	e010      	b.n	80022d0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d00c      	beq.n	80022d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <FLASH_WaitForLastOperation+0x38>
 80022bc:	f7ff fa38 	bl	8001730 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d201      	bcs.n	80022d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e019      	b.n	8002304 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e8      	bne.n	80022ae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <FLASH_WaitForLastOperation+0x7c>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80022fa:	f000 f8a5 	bl	8002448 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
  
}  
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20001f24 	.word	0x20001f24
 8002310:	40023c00 	.word	0x40023c00

08002314 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <FLASH_Program_DoubleWord+0x60>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	4a13      	ldr	r2, [pc, #76]	; (8002374 <FLASH_Program_DoubleWord+0x60>)
 8002326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <FLASH_Program_DoubleWord+0x60>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	4a10      	ldr	r2, [pc, #64]	; (8002374 <FLASH_Program_DoubleWord+0x60>)
 8002332:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002336:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <FLASH_Program_DoubleWord+0x60>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <FLASH_Program_DoubleWord+0x60>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800234a:	f3bf 8f6f 	isb	sy
}
 800234e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002350:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	000a      	movs	r2, r1
 800235e:	2300      	movs	r3, #0
 8002360:	68f9      	ldr	r1, [r7, #12]
 8002362:	3104      	adds	r1, #4
 8002364:	4613      	mov	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40023c00 	.word	0x40023c00

08002378 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <FLASH_Program_Word+0x40>)
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	4a0c      	ldr	r2, [pc, #48]	; (80023b8 <FLASH_Program_Word+0x40>)
 8002388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <FLASH_Program_Word+0x40>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <FLASH_Program_Word+0x40>)
 8002394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002398:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <FLASH_Program_Word+0x40>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <FLASH_Program_Word+0x40>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40023c00 	.word	0x40023c00

080023bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023c8:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <FLASH_Program_HalfWord+0x44>)
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <FLASH_Program_HalfWord+0x44>)
 80023ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <FLASH_Program_HalfWord+0x44>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	4a09      	ldr	r2, [pc, #36]	; (8002400 <FLASH_Program_HalfWord+0x44>)
 80023da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <FLASH_Program_HalfWord+0x44>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	4a06      	ldr	r2, [pc, #24]	; (8002400 <FLASH_Program_HalfWord+0x44>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	801a      	strh	r2, [r3, #0]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00

08002404 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <FLASH_Program_Byte+0x40>)
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <FLASH_Program_Byte+0x40>)
 8002416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <FLASH_Program_Byte+0x40>)
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <FLASH_Program_Byte+0x40>)
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <FLASH_Program_Byte+0x40>)
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	4a06      	ldr	r2, [pc, #24]	; (8002444 <FLASH_Program_Byte+0x40>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	701a      	strb	r2, [r3, #0]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40023c00 	.word	0x40023c00

08002448 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800244c:	4b2f      	ldr	r3, [pc, #188]	; (800250c <FLASH_SetErrorCode+0xc4>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	f043 0310 	orr.w	r3, r3, #16
 8002460:	4a2b      	ldr	r2, [pc, #172]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 8002462:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <FLASH_SetErrorCode+0xc4>)
 8002466:	2210      	movs	r2, #16
 8002468:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <FLASH_SetErrorCode+0xc4>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002476:	4b26      	ldr	r3, [pc, #152]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f043 0308 	orr.w	r3, r3, #8
 800247e:	4a24      	ldr	r2, [pc, #144]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 8002480:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <FLASH_SetErrorCode+0xc4>)
 8002484:	2220      	movs	r2, #32
 8002486:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002488:	4b20      	ldr	r3, [pc, #128]	; (800250c <FLASH_SetErrorCode+0xc4>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002494:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 800249e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <FLASH_SetErrorCode+0xc4>)
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <FLASH_SetErrorCode+0xc4>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	4a15      	ldr	r2, [pc, #84]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 80024bc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <FLASH_SetErrorCode+0xc4>)
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <FLASH_SetErrorCode+0xc4>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d009      	beq.n	80024e4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 80024da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <FLASH_SetErrorCode+0xc4>)
 80024de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <FLASH_SetErrorCode+0xc4>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f043 0320 	orr.w	r3, r3, #32
 80024f8:	4a05      	ldr	r2, [pc, #20]	; (8002510 <FLASH_SetErrorCode+0xc8>)
 80024fa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <FLASH_SetErrorCode+0xc4>)
 80024fe:	2202      	movs	r2, #2
 8002500:	60da      	str	r2, [r3, #12]
  }
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40023c00 	.word	0x40023c00
 8002510:	20001f24 	.word	0x20001f24

08002514 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002526:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_FLASHEx_Erase+0xd8>)
 8002528:	7e1b      	ldrb	r3, [r3, #24]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_FLASHEx_Erase+0x1e>
 800252e:	2302      	movs	r3, #2
 8002530:	e058      	b.n	80025e4 <HAL_FLASHEx_Erase+0xd0>
 8002532:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <HAL_FLASHEx_Erase+0xd8>)
 8002534:	2201      	movs	r2, #1
 8002536:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002538:	f24c 3050 	movw	r0, #50000	; 0xc350
 800253c:	f7ff feaa 	bl	8002294 <FLASH_WaitForLastOperation>
 8002540:	4603      	mov	r3, r0
 8002542:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d148      	bne.n	80025dc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d115      	bne.n	8002586 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f000 f844 	bl	80025f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800256c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002570:	f7ff fe90 	bl	8002294 <FLASH_WaitForLastOperation>
 8002574:	4603      	mov	r3, r0
 8002576:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_FLASHEx_Erase+0xdc>)
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <HAL_FLASHEx_Erase+0xdc>)
 800257e:	f023 0304 	bic.w	r3, r3, #4
 8002582:	6113      	str	r3, [r2, #16]
 8002584:	e028      	b.n	80025d8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	e01c      	b.n	80025c8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	68b8      	ldr	r0, [r7, #8]
 8002598:	f000 f850 	bl	800263c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800259c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025a0:	f7ff fe78 	bl	8002294 <FLASH_WaitForLastOperation>
 80025a4:	4603      	mov	r3, r0
 80025a6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_FLASHEx_Erase+0xdc>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <HAL_FLASHEx_Erase+0xdc>)
 80025ae:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80025b2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	601a      	str	r2, [r3, #0]
          break;
 80025c0:	e00a      	b.n	80025d8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4413      	add	r3, r2
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d3da      	bcc.n	800258e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80025d8:	f000 f878 	bl	80026cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_FLASHEx_Erase+0xd8>)
 80025de:	2200      	movs	r2, #0
 80025e0:	761a      	strb	r2, [r3, #24]

  return status;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20001f24 	.word	0x20001f24
 80025f0:	40023c00 	.word	0x40023c00

080025f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <FLASH_MassErase+0x44>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	4a0c      	ldr	r2, [pc, #48]	; (8002638 <FLASH_MassErase+0x44>)
 8002606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <FLASH_MassErase+0x44>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	4a09      	ldr	r2, [pc, #36]	; (8002638 <FLASH_MassErase+0x44>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002618:	4b07      	ldr	r3, [pc, #28]	; (8002638 <FLASH_MassErase+0x44>)
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	4313      	orrs	r3, r2
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <FLASH_MassErase+0x44>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6113      	str	r3, [r2, #16]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00

0800263c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e010      	b.n	800267a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d103      	bne.n	8002666 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800265e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e009      	b.n	800267a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d103      	bne.n	8002674 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800266c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	e002      	b.n	800267a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002674:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002678:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <FLASH_Erase_Sector+0x8c>)
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <FLASH_Erase_Sector+0x8c>)
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <FLASH_Erase_Sector+0x8c>)
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	490f      	ldr	r1, [pc, #60]	; (80026c8 <FLASH_Erase_Sector+0x8c>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002692:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <FLASH_Erase_Sector+0x8c>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	4a0c      	ldr	r2, [pc, #48]	; (80026c8 <FLASH_Erase_Sector+0x8c>)
 8002698:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800269c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <FLASH_Erase_Sector+0x8c>)
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4313      	orrs	r3, r2
 80026a8:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <FLASH_Erase_Sector+0x8c>)
 80026aa:	f043 0302 	orr.w	r3, r3, #2
 80026ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <FLASH_Erase_Sector+0x8c>)
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <FLASH_Erase_Sector+0x8c>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	6113      	str	r3, [r2, #16]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40023c00 	.word	0x40023c00

080026cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80026d0:	4b20      	ldr	r3, [pc, #128]	; (8002754 <FLASH_FlushCaches+0x88>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d017      	beq.n	800270c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <FLASH_FlushCaches+0x88>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <FLASH_FlushCaches+0x88>)
 80026e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <FLASH_FlushCaches+0x88>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a19      	ldr	r2, [pc, #100]	; (8002754 <FLASH_FlushCaches+0x88>)
 80026ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <FLASH_FlushCaches+0x88>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a16      	ldr	r2, [pc, #88]	; (8002754 <FLASH_FlushCaches+0x88>)
 80026fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <FLASH_FlushCaches+0x88>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a13      	ldr	r2, [pc, #76]	; (8002754 <FLASH_FlushCaches+0x88>)
 8002706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800270a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <FLASH_FlushCaches+0x88>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d017      	beq.n	8002748 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <FLASH_FlushCaches+0x88>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <FLASH_FlushCaches+0x88>)
 800271e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002722:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <FLASH_FlushCaches+0x88>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <FLASH_FlushCaches+0x88>)
 800272a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <FLASH_FlushCaches+0x88>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a07      	ldr	r2, [pc, #28]	; (8002754 <FLASH_FlushCaches+0x88>)
 8002736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800273a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <FLASH_FlushCaches+0x88>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <FLASH_FlushCaches+0x88>)
 8002742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002746:	6013      	str	r3, [r2, #0]
  }
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e165      	b.n	8002a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002774:	2201      	movs	r2, #1
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	f040 8154 	bne.w	8002a3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d00b      	beq.n	80027b2 <HAL_GPIO_Init+0x5a>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d007      	beq.n	80027b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a6:	2b11      	cmp	r3, #17
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b12      	cmp	r3, #18
 80027b0:	d130      	bne.n	8002814 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0xfc>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b12      	cmp	r3, #18
 8002852:	d123      	bne.n	800289c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	08da      	lsrs	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3208      	adds	r2, #8
 800285c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	220f      	movs	r2, #15
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	69b9      	ldr	r1, [r7, #24]
 8002898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0203 	and.w	r2, r3, #3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80ae 	beq.w	8002a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <HAL_GPIO_Init+0x300>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a5c      	ldr	r2, [pc, #368]	; (8002a58 <HAL_GPIO_Init+0x300>)
 80028e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <HAL_GPIO_Init+0x300>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028fa:	4a58      	ldr	r2, [pc, #352]	; (8002a5c <HAL_GPIO_Init+0x304>)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	3302      	adds	r3, #2
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	220f      	movs	r2, #15
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4f      	ldr	r2, [pc, #316]	; (8002a60 <HAL_GPIO_Init+0x308>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d025      	beq.n	8002972 <HAL_GPIO_Init+0x21a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4e      	ldr	r2, [pc, #312]	; (8002a64 <HAL_GPIO_Init+0x30c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <HAL_GPIO_Init+0x216>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4d      	ldr	r2, [pc, #308]	; (8002a68 <HAL_GPIO_Init+0x310>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x212>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4c      	ldr	r2, [pc, #304]	; (8002a6c <HAL_GPIO_Init+0x314>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x20e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4b      	ldr	r2, [pc, #300]	; (8002a70 <HAL_GPIO_Init+0x318>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x20a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <HAL_GPIO_Init+0x31c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x206>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a49      	ldr	r2, [pc, #292]	; (8002a78 <HAL_GPIO_Init+0x320>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x202>
 8002956:	2306      	movs	r3, #6
 8002958:	e00c      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800295a:	2307      	movs	r3, #7
 800295c:	e00a      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800295e:	2305      	movs	r3, #5
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 8002962:	2304      	movs	r3, #4
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x21c>
 8002972:	2300      	movs	r3, #0
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f002 0203 	and.w	r2, r2, #3
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002984:	4935      	ldr	r1, [pc, #212]	; (8002a5c <HAL_GPIO_Init+0x304>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002992:	4b3a      	ldr	r3, [pc, #232]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029b6:	4a31      	ldr	r2, [pc, #196]	; (8002a7c <HAL_GPIO_Init+0x324>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029bc:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_GPIO_Init+0x324>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e0:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <HAL_GPIO_Init+0x324>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_GPIO_Init+0x324>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a34:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <HAL_GPIO_Init+0x324>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0f      	cmp	r3, #15
 8002a44:	f67f ae96 	bls.w	8002774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40013800 	.word	0x40013800
 8002a60:	40020000 	.word	0x40020000
 8002a64:	40020400 	.word	0x40020400
 8002a68:	40020800 	.word	0x40020800
 8002a6c:	40020c00 	.word	0x40020c00
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40021400 	.word	0x40021400
 8002a78:	40021800 	.word	0x40021800
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	401a      	ands	r2, r3
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d104      	bne.n	8002aa4 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002aa2:	e002      	b.n	8002aaa <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002aa4:	887a      	ldrh	r2, [r7, #2]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	619a      	str	r2, [r3, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d006      	beq.n	8002adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ace:	4a05      	ldr	r2, [pc, #20]	; (8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 fe7a 	bl	80067d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cc      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90c      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e067      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4934      	ldr	r1, [pc, #208]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fdaa 	bl	8001730 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7fe fda6 	bl	8001730 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f855 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fd0a 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	080142b8 	.word	0x080142b8
 8002cac:	20000088 	.word	0x20000088
 8002cb0:	20000310 	.word	0x20000310

08002cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000088 	.word	0x20000088

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	080142c8 	.word	0x080142c8

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cf8:	f7ff ffdc 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0b5b      	lsrs	r3, r3, #13
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	080142c8 	.word	0x080142c8

08002d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d20:	b0ae      	sub	sp, #184	; 0xb8
 8002d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d42:	4bcb      	ldr	r3, [pc, #812]	; (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	f200 8206 	bhi.w	800315c <HAL_RCC_GetSysClockFreq+0x440>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	0800315d 	.word	0x0800315d
 8002d60:	0800315d 	.word	0x0800315d
 8002d64:	0800315d 	.word	0x0800315d
 8002d68:	08002d95 	.word	0x08002d95
 8002d6c:	0800315d 	.word	0x0800315d
 8002d70:	0800315d 	.word	0x0800315d
 8002d74:	0800315d 	.word	0x0800315d
 8002d78:	08002d9d 	.word	0x08002d9d
 8002d7c:	0800315d 	.word	0x0800315d
 8002d80:	0800315d 	.word	0x0800315d
 8002d84:	0800315d 	.word	0x0800315d
 8002d88:	08002f8d 	.word	0x08002f8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d8c:	4bb9      	ldr	r3, [pc, #740]	; (8003074 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d92:	e1e7      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d94:	4bb8      	ldr	r3, [pc, #736]	; (8003078 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d9a:	e1e3      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d9c:	4bb4      	ldr	r3, [pc, #720]	; (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da8:	4bb1      	ldr	r3, [pc, #708]	; (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d071      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db4:	4bae      	ldr	r3, [pc, #696]	; (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dc0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dda:	4622      	mov	r2, r4
 8002ddc:	462b      	mov	r3, r5
 8002dde:	f04f 0000 	mov.w	r0, #0
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	0159      	lsls	r1, r3, #5
 8002de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dec:	0150      	lsls	r0, r2, #5
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4621      	mov	r1, r4
 8002df4:	1a51      	subs	r1, r2, r1
 8002df6:	6439      	str	r1, [r7, #64]	; 0x40
 8002df8:	4629      	mov	r1, r5
 8002dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	018b      	lsls	r3, r1, #6
 8002e10:	4641      	mov	r1, r8
 8002e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e16:	4641      	mov	r1, r8
 8002e18:	018a      	lsls	r2, r1, #6
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	1a51      	subs	r1, r2, r1
 8002e1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e20:	4649      	mov	r1, r9
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e34:	4649      	mov	r1, r9
 8002e36:	00cb      	lsls	r3, r1, #3
 8002e38:	4641      	mov	r1, r8
 8002e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e3e:	4641      	mov	r1, r8
 8002e40:	00ca      	lsls	r2, r1, #3
 8002e42:	4610      	mov	r0, r2
 8002e44:	4619      	mov	r1, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	4622      	mov	r2, r4
 8002e4a:	189b      	adds	r3, r3, r2
 8002e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e4e:	462b      	mov	r3, r5
 8002e50:	460a      	mov	r2, r1
 8002e52:	eb42 0303 	adc.w	r3, r2, r3
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e64:	4629      	mov	r1, r5
 8002e66:	024b      	lsls	r3, r1, #9
 8002e68:	4621      	mov	r1, r4
 8002e6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e6e:	4621      	mov	r1, r4
 8002e70:	024a      	lsls	r2, r1, #9
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e88:	f7fd febe 	bl	8000c08 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4613      	mov	r3, r2
 8002e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e96:	e067      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e98:	4b75      	ldr	r3, [pc, #468]	; (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ea4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002eb6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002eba:	4622      	mov	r2, r4
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	f04f 0000 	mov.w	r0, #0
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	0159      	lsls	r1, r3, #5
 8002ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ecc:	0150      	lsls	r0, r2, #5
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4621      	mov	r1, r4
 8002ed4:	1a51      	subs	r1, r2, r1
 8002ed6:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ed8:	4629      	mov	r1, r5
 8002eda:	eb63 0301 	sbc.w	r3, r3, r1
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002eec:	4649      	mov	r1, r9
 8002eee:	018b      	lsls	r3, r1, #6
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ef6:	4641      	mov	r1, r8
 8002ef8:	018a      	lsls	r2, r1, #6
 8002efa:	4641      	mov	r1, r8
 8002efc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f00:	4649      	mov	r1, r9
 8002f02:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f1a:	4692      	mov	sl, r2
 8002f1c:	469b      	mov	fp, r3
 8002f1e:	4623      	mov	r3, r4
 8002f20:	eb1a 0303 	adds.w	r3, sl, r3
 8002f24:	623b      	str	r3, [r7, #32]
 8002f26:	462b      	mov	r3, r5
 8002f28:	eb4b 0303 	adc.w	r3, fp, r3
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	028b      	lsls	r3, r1, #10
 8002f3e:	4621      	mov	r1, r4
 8002f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f44:	4621      	mov	r1, r4
 8002f46:	028a      	lsls	r2, r1, #10
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f50:	2200      	movs	r2, #0
 8002f52:	673b      	str	r3, [r7, #112]	; 0x70
 8002f54:	677a      	str	r2, [r7, #116]	; 0x74
 8002f56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f5a:	f7fd fe55 	bl	8000c08 <__aeabi_uldivmod>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4613      	mov	r3, r2
 8002f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f68:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	3301      	adds	r3, #1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f8a:	e0eb      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f8c:	4b38      	ldr	r3, [pc, #224]	; (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d06b      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa4:	4b32      	ldr	r3, [pc, #200]	; (8003070 <HAL_RCC_GetSysClockFreq+0x354>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	2200      	movs	r2, #0
 8002fac:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8002fb8:	2300      	movs	r3, #0
 8002fba:	667b      	str	r3, [r7, #100]	; 0x64
 8002fbc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002fc0:	4622      	mov	r2, r4
 8002fc2:	462b      	mov	r3, r5
 8002fc4:	f04f 0000 	mov.w	r0, #0
 8002fc8:	f04f 0100 	mov.w	r1, #0
 8002fcc:	0159      	lsls	r1, r3, #5
 8002fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd2:	0150      	lsls	r0, r2, #5
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4621      	mov	r1, r4
 8002fda:	1a51      	subs	r1, r2, r1
 8002fdc:	61b9      	str	r1, [r7, #24]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ff2:	4659      	mov	r1, fp
 8002ff4:	018b      	lsls	r3, r1, #6
 8002ff6:	4651      	mov	r1, sl
 8002ff8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	018a      	lsls	r2, r1, #6
 8003000:	4651      	mov	r1, sl
 8003002:	ebb2 0801 	subs.w	r8, r2, r1
 8003006:	4659      	mov	r1, fp
 8003008:	eb63 0901 	sbc.w	r9, r3, r1
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003018:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800301c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003020:	4690      	mov	r8, r2
 8003022:	4699      	mov	r9, r3
 8003024:	4623      	mov	r3, r4
 8003026:	eb18 0303 	adds.w	r3, r8, r3
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	462b      	mov	r3, r5
 800302e:	eb49 0303 	adc.w	r3, r9, r3
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003040:	4629      	mov	r1, r5
 8003042:	024b      	lsls	r3, r1, #9
 8003044:	4621      	mov	r1, r4
 8003046:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800304a:	4621      	mov	r1, r4
 800304c:	024a      	lsls	r2, r1, #9
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003056:	2200      	movs	r2, #0
 8003058:	65bb      	str	r3, [r7, #88]	; 0x58
 800305a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800305c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003060:	f7fd fdd2 	bl	8000c08 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800306e:	e065      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x420>
 8003070:	40023800 	.word	0x40023800
 8003074:	00f42400 	.word	0x00f42400
 8003078:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307c:	4b3d      	ldr	r3, [pc, #244]	; (8003174 <HAL_RCC_GetSysClockFreq+0x458>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	099b      	lsrs	r3, r3, #6
 8003082:	2200      	movs	r2, #0
 8003084:	4618      	mov	r0, r3
 8003086:	4611      	mov	r1, r2
 8003088:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800308c:	653b      	str	r3, [r7, #80]	; 0x50
 800308e:	2300      	movs	r3, #0
 8003090:	657b      	str	r3, [r7, #84]	; 0x54
 8003092:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003096:	4642      	mov	r2, r8
 8003098:	464b      	mov	r3, r9
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0159      	lsls	r1, r3, #5
 80030a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a8:	0150      	lsls	r0, r2, #5
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4641      	mov	r1, r8
 80030b0:	1a51      	subs	r1, r2, r1
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	4649      	mov	r1, r9
 80030b6:	eb63 0301 	sbc.w	r3, r3, r1
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030c8:	4659      	mov	r1, fp
 80030ca:	018b      	lsls	r3, r1, #6
 80030cc:	4651      	mov	r1, sl
 80030ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d2:	4651      	mov	r1, sl
 80030d4:	018a      	lsls	r2, r1, #6
 80030d6:	4651      	mov	r1, sl
 80030d8:	1a54      	subs	r4, r2, r1
 80030da:	4659      	mov	r1, fp
 80030dc:	eb63 0501 	sbc.w	r5, r3, r1
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	00eb      	lsls	r3, r5, #3
 80030ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ee:	00e2      	lsls	r2, r4, #3
 80030f0:	4614      	mov	r4, r2
 80030f2:	461d      	mov	r5, r3
 80030f4:	4643      	mov	r3, r8
 80030f6:	18e3      	adds	r3, r4, r3
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	464b      	mov	r3, r9
 80030fc:	eb45 0303 	adc.w	r3, r5, r3
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310e:	4629      	mov	r1, r5
 8003110:	028b      	lsls	r3, r1, #10
 8003112:	4621      	mov	r1, r4
 8003114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003118:	4621      	mov	r1, r4
 800311a:	028a      	lsls	r2, r1, #10
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003124:	2200      	movs	r2, #0
 8003126:	64bb      	str	r3, [r7, #72]	; 0x48
 8003128:	64fa      	str	r2, [r7, #76]	; 0x4c
 800312a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800312e:	f7fd fd6b 	bl	8000c08 <__aeabi_uldivmod>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4613      	mov	r3, r2
 8003138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_RCC_GetSysClockFreq+0x458>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	0f1b      	lsrs	r3, r3, #28
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800314a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800314e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800315a:	e003      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_GetSysClockFreq+0x45c>)
 800315e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003168:	4618      	mov	r0, r3
 800316a:	37b8      	adds	r7, #184	; 0xb8
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	00f42400 	.word	0x00f42400

0800317c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8083 	beq.w	800329c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003196:	4b95      	ldr	r3, [pc, #596]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d019      	beq.n	80031d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031a2:	4b92      	ldr	r3, [pc, #584]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d106      	bne.n	80031bc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031ae:	4b8f      	ldr	r3, [pc, #572]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ba:	d00c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031bc:	4b8b      	ldr	r3, [pc, #556]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d112      	bne.n	80031ee <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c8:	4b88      	ldr	r3, [pc, #544]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d4:	d10b      	bne.n	80031ee <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d6:	4b85      	ldr	r3, [pc, #532]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d05b      	beq.n	800329a <HAL_RCC_OscConfig+0x11e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d157      	bne.n	800329a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e216      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x8a>
 80031f8:	4b7c      	ldr	r3, [pc, #496]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7b      	ldr	r2, [pc, #492]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80031fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e01d      	b.n	8003242 <HAL_RCC_OscConfig+0xc6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800320e:	d10c      	bne.n	800322a <HAL_RCC_OscConfig+0xae>
 8003210:	4b76      	ldr	r3, [pc, #472]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a75      	ldr	r2, [pc, #468]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003216:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b73      	ldr	r3, [pc, #460]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a72      	ldr	r2, [pc, #456]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	e00b      	b.n	8003242 <HAL_RCC_OscConfig+0xc6>
 800322a:	4b70      	ldr	r3, [pc, #448]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6f      	ldr	r2, [pc, #444]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b6d      	ldr	r3, [pc, #436]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6c      	ldr	r2, [pc, #432]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800323c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003240:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d013      	beq.n	8003272 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fe fa71 	bl	8001730 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003252:	f7fe fa6d 	bl	8001730 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b64      	cmp	r3, #100	; 0x64
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e1db      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003264:	4b61      	ldr	r3, [pc, #388]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0xd6>
 8003270:	e014      	b.n	800329c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe fa5d 	bl	8001730 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327a:	f7fe fa59 	bl	8001730 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b64      	cmp	r3, #100	; 0x64
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1c7      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328c:	4b57      	ldr	r3, [pc, #348]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0xfe>
 8003298:	e000      	b.n	800329c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d06f      	beq.n	8003388 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032a8:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d017      	beq.n	80032e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032b4:	4b4d      	ldr	r3, [pc, #308]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d105      	bne.n	80032cc <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032c0:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032cc:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	d11c      	bne.n	8003312 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d8:	4b44      	ldr	r3, [pc, #272]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d116      	bne.n	8003312 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e4:	4b41      	ldr	r3, [pc, #260]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_OscConfig+0x180>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e18f      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4938      	ldr	r1, [pc, #224]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003310:	e03a      	b.n	8003388 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d020      	beq.n	800335c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331a:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003320:	f7fe fa06 	bl	8001730 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003328:	f7fe fa02 	bl	8001730 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e170      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333a:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003346:	4b29      	ldr	r3, [pc, #164]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4925      	ldr	r1, [pc, #148]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]
 800335a:	e015      	b.n	8003388 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335c:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_RCC_OscConfig+0x274>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003362:	f7fe f9e5 	bl	8001730 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336a:	f7fe f9e1 	bl	8001730 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e14f      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d037      	beq.n	8003404 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d016      	beq.n	80033ca <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339c:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a2:	f7fe f9c5 	bl	8001730 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033aa:	f7fe f9c1 	bl	8001730 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e12f      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x270>)
 80033be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x22e>
 80033c8:	e01c      	b.n	8003404 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_RCC_OscConfig+0x278>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe f9ae 	bl	8001730 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d6:	e00f      	b.n	80033f8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d8:	f7fe f9aa 	bl	8001730 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d908      	bls.n	80033f8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e118      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	42470000 	.word	0x42470000
 80033f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	4b8a      	ldr	r3, [pc, #552]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80033fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1e9      	bne.n	80033d8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8097 	beq.w	8003540 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003412:	2300      	movs	r3, #0
 8003414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003416:	4b83      	ldr	r3, [pc, #524]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10f      	bne.n	8003442 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	4b7f      	ldr	r3, [pc, #508]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a7e      	ldr	r2, [pc, #504]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
 8003432:	4b7c      	ldr	r3, [pc, #496]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003442:	4b79      	ldr	r3, [pc, #484]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d118      	bne.n	8003480 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344e:	4b76      	ldr	r3, [pc, #472]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a75      	ldr	r2, [pc, #468]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345a:	f7fe f969 	bl	8001730 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003462:	f7fe f965 	bl	8001730 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0d3      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	4b6c      	ldr	r3, [pc, #432]	; (8003628 <HAL_RCC_OscConfig+0x4ac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d106      	bne.n	8003496 <HAL_RCC_OscConfig+0x31a>
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	4a65      	ldr	r2, [pc, #404]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6713      	str	r3, [r2, #112]	; 0x70
 8003494:	e01c      	b.n	80034d0 <HAL_RCC_OscConfig+0x354>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b05      	cmp	r3, #5
 800349c:	d10c      	bne.n	80034b8 <HAL_RCC_OscConfig+0x33c>
 800349e:	4b61      	ldr	r3, [pc, #388]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	4a60      	ldr	r2, [pc, #384]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70
 80034aa:	4b5e      	ldr	r3, [pc, #376]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	4a5d      	ldr	r2, [pc, #372]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6713      	str	r3, [r2, #112]	; 0x70
 80034b6:	e00b      	b.n	80034d0 <HAL_RCC_OscConfig+0x354>
 80034b8:	4b5a      	ldr	r3, [pc, #360]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	4a59      	ldr	r2, [pc, #356]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	6713      	str	r3, [r2, #112]	; 0x70
 80034c4:	4b57      	ldr	r3, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4a56      	ldr	r2, [pc, #344]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80034ca:	f023 0304 	bic.w	r3, r3, #4
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d015      	beq.n	8003504 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fe f92a 	bl	8001730 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fe f926 	bl	8001730 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e092      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	4b4b      	ldr	r3, [pc, #300]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0ee      	beq.n	80034e0 <HAL_RCC_OscConfig+0x364>
 8003502:	e014      	b.n	800352e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fe f914 	bl	8001730 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350c:	f7fe f910 	bl	8001730 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e07c      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003522:	4b40      	ldr	r3, [pc, #256]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1ee      	bne.n	800350c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003534:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 800353a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d068      	beq.n	800361a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003548:	4b36      	ldr	r3, [pc, #216]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b08      	cmp	r3, #8
 8003552:	d060      	beq.n	8003616 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d145      	bne.n	80035e8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355c:	4b33      	ldr	r3, [pc, #204]	; (800362c <HAL_RCC_OscConfig+0x4b0>)
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fe f8e5 	bl	8001730 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356a:	f7fe f8e1 	bl	8001730 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e04f      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f0      	bne.n	800356a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	019b      	lsls	r3, r3, #6
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	3b01      	subs	r3, #1
 80035a2:	041b      	lsls	r3, r3, #16
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	061b      	lsls	r3, r3, #24
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	071b      	lsls	r3, r3, #28
 80035b4:	491b      	ldr	r1, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ba:	4b1c      	ldr	r3, [pc, #112]	; (800362c <HAL_RCC_OscConfig+0x4b0>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe f8b6 	bl	8001730 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe f8b2 	bl	8001730 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e020      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x44c>
 80035e6:	e018      	b.n	800361a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_RCC_OscConfig+0x4b0>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fe f89f 	bl	8001730 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe f89b 	bl	8001730 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e009      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003608:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x4a8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCC_OscConfig+0x47a>
 8003614:	e001      	b.n	800361a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000
 800362c:	42470060 	.word	0x42470060

08003630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e01d      	b.n	800367e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f815 	bl	8003686 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	4619      	mov	r1, r3
 800366e:	4610      	mov	r0, r2
 8003670:	f000 fa2c 	bl	8003acc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b06      	cmp	r3, #6
 80036ba:	d007      	beq.n	80036cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d122      	bne.n	800373e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d11b      	bne.n	800373e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f06f 0202 	mvn.w	r2, #2
 800370e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f9b2 	bl	8003a8e <HAL_TIM_IC_CaptureCallback>
 800372a:	e005      	b.n	8003738 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f9a4 	bl	8003a7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9b5 	bl	8003aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d122      	bne.n	8003792 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b04      	cmp	r3, #4
 8003758:	d11b      	bne.n	8003792 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f06f 0204 	mvn.w	r2, #4
 8003762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f988 	bl	8003a8e <HAL_TIM_IC_CaptureCallback>
 800377e:	e005      	b.n	800378c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f97a 	bl	8003a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f98b 	bl	8003aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d122      	bne.n	80037e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d11b      	bne.n	80037e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0208 	mvn.w	r2, #8
 80037b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2204      	movs	r2, #4
 80037bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f95e 	bl	8003a8e <HAL_TIM_IC_CaptureCallback>
 80037d2:	e005      	b.n	80037e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f950 	bl	8003a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f961 	bl	8003aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d122      	bne.n	800383a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d11b      	bne.n	800383a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f06f 0210 	mvn.w	r2, #16
 800380a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2208      	movs	r2, #8
 8003810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f934 	bl	8003a8e <HAL_TIM_IC_CaptureCallback>
 8003826:	e005      	b.n	8003834 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f926 	bl	8003a7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f937 	bl	8003aa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b01      	cmp	r3, #1
 8003846:	d10e      	bne.n	8003866 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d107      	bne.n	8003866 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f06f 0201 	mvn.w	r2, #1
 800385e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f003 faf5 	bl	8006e50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	d10e      	bne.n	8003892 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b80      	cmp	r3, #128	; 0x80
 8003880:	d107      	bne.n	8003892 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800388a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fadd 	bl	8003e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d10e      	bne.n	80038be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	d107      	bne.n	80038be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f8fc 	bl	8003ab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d10e      	bne.n	80038ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d107      	bne.n	80038ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0220 	mvn.w	r2, #32
 80038e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 faa7 	bl	8003e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_TIM_ConfigClockSource+0x18>
 8003906:	2302      	movs	r3, #2
 8003908:	e0b3      	b.n	8003a72 <HAL_TIM_ConfigClockSource+0x180>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003928:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003930:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003942:	d03e      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0xd0>
 8003944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003948:	f200 8087 	bhi.w	8003a5a <HAL_TIM_ConfigClockSource+0x168>
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003950:	f000 8085 	beq.w	8003a5e <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003958:	d87f      	bhi.n	8003a5a <HAL_TIM_ConfigClockSource+0x168>
 800395a:	2b70      	cmp	r3, #112	; 0x70
 800395c:	d01a      	beq.n	8003994 <HAL_TIM_ConfigClockSource+0xa2>
 800395e:	2b70      	cmp	r3, #112	; 0x70
 8003960:	d87b      	bhi.n	8003a5a <HAL_TIM_ConfigClockSource+0x168>
 8003962:	2b60      	cmp	r3, #96	; 0x60
 8003964:	d050      	beq.n	8003a08 <HAL_TIM_ConfigClockSource+0x116>
 8003966:	2b60      	cmp	r3, #96	; 0x60
 8003968:	d877      	bhi.n	8003a5a <HAL_TIM_ConfigClockSource+0x168>
 800396a:	2b50      	cmp	r3, #80	; 0x50
 800396c:	d03c      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0xf6>
 800396e:	2b50      	cmp	r3, #80	; 0x50
 8003970:	d873      	bhi.n	8003a5a <HAL_TIM_ConfigClockSource+0x168>
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d058      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x136>
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d86f      	bhi.n	8003a5a <HAL_TIM_ConfigClockSource+0x168>
 800397a:	2b30      	cmp	r3, #48	; 0x30
 800397c:	d064      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0x156>
 800397e:	2b30      	cmp	r3, #48	; 0x30
 8003980:	d86b      	bhi.n	8003a5a <HAL_TIM_ConfigClockSource+0x168>
 8003982:	2b20      	cmp	r3, #32
 8003984:	d060      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0x156>
 8003986:	2b20      	cmp	r3, #32
 8003988:	d867      	bhi.n	8003a5a <HAL_TIM_ConfigClockSource+0x168>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d05c      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0x156>
 800398e:	2b10      	cmp	r3, #16
 8003990:	d05a      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003992:	e062      	b.n	8003a5a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6899      	ldr	r1, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f000 f9ac 	bl	8003d00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	609a      	str	r2, [r3, #8]
      break;
 80039c0:	e04e      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6899      	ldr	r1, [r3, #8]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f000 f995 	bl	8003d00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039e4:	609a      	str	r2, [r3, #8]
      break;
 80039e6:	e03b      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	461a      	mov	r2, r3
 80039f6:	f000 f909 	bl	8003c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2150      	movs	r1, #80	; 0x50
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f962 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003a06:	e02b      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	461a      	mov	r2, r3
 8003a16:	f000 f928 	bl	8003c6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2160      	movs	r1, #96	; 0x60
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f952 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003a26:	e01b      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	461a      	mov	r2, r3
 8003a36:	f000 f8e9 	bl	8003c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2140      	movs	r1, #64	; 0x40
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f942 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003a46:	e00b      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4619      	mov	r1, r3
 8003a52:	4610      	mov	r0, r2
 8003a54:	f000 f939 	bl	8003cca <TIM_ITRx_SetConfig>
      break;
 8003a58:	e002      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a40      	ldr	r2, [pc, #256]	; (8003be0 <TIM_Base_SetConfig+0x114>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <TIM_Base_SetConfig+0x40>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aea:	d00f      	beq.n	8003b0c <TIM_Base_SetConfig+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a3d      	ldr	r2, [pc, #244]	; (8003be4 <TIM_Base_SetConfig+0x118>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d00b      	beq.n	8003b0c <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a3c      	ldr	r2, [pc, #240]	; (8003be8 <TIM_Base_SetConfig+0x11c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d007      	beq.n	8003b0c <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3b      	ldr	r2, [pc, #236]	; (8003bec <TIM_Base_SetConfig+0x120>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a3a      	ldr	r2, [pc, #232]	; (8003bf0 <TIM_Base_SetConfig+0x124>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d108      	bne.n	8003b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2f      	ldr	r2, [pc, #188]	; (8003be0 <TIM_Base_SetConfig+0x114>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d02b      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d027      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2c      	ldr	r2, [pc, #176]	; (8003be4 <TIM_Base_SetConfig+0x118>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d023      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2b      	ldr	r2, [pc, #172]	; (8003be8 <TIM_Base_SetConfig+0x11c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01f      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2a      	ldr	r2, [pc, #168]	; (8003bec <TIM_Base_SetConfig+0x120>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01b      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <TIM_Base_SetConfig+0x124>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d017      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a28      	ldr	r2, [pc, #160]	; (8003bf4 <TIM_Base_SetConfig+0x128>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <TIM_Base_SetConfig+0x12c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00f      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a26      	ldr	r2, [pc, #152]	; (8003bfc <TIM_Base_SetConfig+0x130>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00b      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <TIM_Base_SetConfig+0x134>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d007      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a24      	ldr	r2, [pc, #144]	; (8003c04 <TIM_Base_SetConfig+0x138>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a23      	ldr	r2, [pc, #140]	; (8003c08 <TIM_Base_SetConfig+0x13c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d108      	bne.n	8003b90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <TIM_Base_SetConfig+0x114>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d003      	beq.n	8003bc4 <TIM_Base_SetConfig+0xf8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <TIM_Base_SetConfig+0x124>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d103      	bne.n	8003bcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	615a      	str	r2, [r3, #20]
}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40010400 	.word	0x40010400
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800
 8003c00:	40001800 	.word	0x40001800
 8003c04:	40001c00 	.word	0x40001c00
 8003c08:	40002000 	.word	0x40002000

08003c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f023 0201 	bic.w	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 030a 	bic.w	r3, r3, #10
 8003c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	621a      	str	r2, [r3, #32]
}
 8003c5e:	bf00      	nop
 8003c60:	371c      	adds	r7, #28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b087      	sub	sp, #28
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	f023 0210 	bic.w	r2, r3, #16
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	031b      	lsls	r3, r3, #12
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ca6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f043 0307 	orr.w	r3, r3, #7
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	609a      	str	r2, [r3, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	021a      	lsls	r2, r3, #8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e05a      	b.n	8003e0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a21      	ldr	r2, [pc, #132]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d022      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da4:	d01d      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d018      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1a      	ldr	r2, [pc, #104]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00e      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a18      	ldr	r2, [pc, #96]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d004      	beq.n	8003de2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d10c      	bne.n	8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800
 8003e28:	40000c00 	.word	0x40000c00
 8003e2c:	40010400 	.word	0x40010400
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40001800 	.word	0x40001800

08003e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e03f      	b.n	8003ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f003 fed6 	bl	8007c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2224      	movs	r2, #36	; 0x24
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f001 fc01 	bl	80056ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b08a      	sub	sp, #40	; 0x28
 8003efe:	af02      	add	r7, sp, #8
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4613      	mov	r3, r2
 8003f08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d17c      	bne.n	8004014 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_UART_Transmit+0x2c>
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e075      	b.n	8004016 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_UART_Transmit+0x3e>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e06e      	b.n	8004016 <HAL_UART_Transmit+0x11c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2221      	movs	r2, #33	; 0x21
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f4e:	f7fd fbef 	bl	8001730 <HAL_GetTick>
 8003f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	88fa      	ldrh	r2, [r7, #6]
 8003f5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f68:	d108      	bne.n	8003f7c <HAL_UART_Transmit+0x82>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	e003      	b.n	8003f84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f8c:	e02a      	b.n	8003fe4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2200      	movs	r2, #0
 8003f96:	2180      	movs	r1, #128	; 0x80
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f001 f81a 	bl	8004fd2 <UART_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e036      	b.n	8004016 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	e007      	b.n	8003fd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1cf      	bne.n	8003f8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2140      	movs	r1, #64	; 0x40
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 ffea 	bl	8004fd2 <UART_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e006      	b.n	8004016 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b08a      	sub	sp, #40	; 0x28
 8004022:	af02      	add	r7, sp, #8
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	4613      	mov	r3, r2
 800402c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	f040 808c 	bne.w	8004158 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_UART_Receive+0x2e>
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e084      	b.n	800415a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_UART_Receive+0x40>
 800405a:	2302      	movs	r3, #2
 800405c:	e07d      	b.n	800415a <HAL_UART_Receive+0x13c>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2222      	movs	r2, #34	; 0x22
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407a:	f7fd fb59 	bl	8001730 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004094:	d108      	bne.n	80040a8 <HAL_UART_Receive+0x8a>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e003      	b.n	80040b0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80040b8:	e043      	b.n	8004142 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2200      	movs	r2, #0
 80040c2:	2120      	movs	r1, #32
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 ff84 	bl	8004fd2 <UART_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e042      	b.n	800415a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10c      	bne.n	80040f4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	3302      	adds	r3, #2
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	e01f      	b.n	8004134 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fc:	d007      	beq.n	800410e <HAL_UART_Receive+0xf0>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <HAL_UART_Receive+0xfe>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e008      	b.n	800412e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004128:	b2da      	uxtb	r2, r3
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3301      	adds	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004146:	b29b      	uxth	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1b6      	bne.n	80040ba <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	e000      	b.n	800415a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
  }
}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	4613      	mov	r3, r2
 800416e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b20      	cmp	r3, #32
 800417a:	d130      	bne.n	80041de <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_UART_Transmit_IT+0x26>
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e029      	b.n	80041e0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_UART_Transmit_IT+0x38>
 8004196:	2302      	movs	r3, #2
 8004198:	e022      	b.n	80041e0 <HAL_UART_Transmit_IT+0x7e>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	88fa      	ldrh	r2, [r7, #6]
 80041ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2221      	movs	r2, #33	; 0x21
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041d8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	e000      	b.n	80041e0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
  }
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b20      	cmp	r3, #32
 8004204:	d11d      	bne.n	8004242 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_UART_Receive_IT+0x26>
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e016      	b.n	8004244 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_UART_Receive_IT+0x38>
 8004220:	2302      	movs	r3, #2
 8004222:	e00f      	b.n	8004244 <HAL_UART_Receive_IT+0x58>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	461a      	mov	r2, r3
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 ff38 	bl	80050ae <UART_Start_Receive_IT>
 800423e:	4603      	mov	r3, r0
 8004240:	e000      	b.n	8004244 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004242:	2302      	movs	r3, #2
  }
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	; 0x30
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	4613      	mov	r3, r2
 8004258:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b20      	cmp	r3, #32
 8004264:	d165      	bne.n	8004332 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_UART_Transmit_DMA+0x26>
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e05e      	b.n	8004334 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_UART_Transmit_DMA+0x38>
 8004280:	2302      	movs	r3, #2
 8004282:	e057      	b.n	8004334 <HAL_UART_Transmit_DMA+0xe8>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2221      	movs	r2, #33	; 0x21
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b0:	4a22      	ldr	r2, [pc, #136]	; (800433c <HAL_UART_Transmit_DMA+0xf0>)
 80042b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b8:	4a21      	ldr	r2, [pc, #132]	; (8004340 <HAL_UART_Transmit_DMA+0xf4>)
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	4a20      	ldr	r2, [pc, #128]	; (8004344 <HAL_UART_Transmit_DMA+0xf8>)
 80042c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c8:	2200      	movs	r2, #0
 80042ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80042cc:	f107 0308 	add.w	r3, r7, #8
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	6819      	ldr	r1, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3304      	adds	r3, #4
 80042e0:	461a      	mov	r2, r3
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	f7fd fbf0 	bl	8001ac8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3314      	adds	r3, #20
 8004300:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	617b      	str	r3, [r7, #20]
   return(result);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3314      	adds	r3, #20
 8004318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431a:	627a      	str	r2, [r7, #36]	; 0x24
 800431c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6a39      	ldr	r1, [r7, #32]
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	61fb      	str	r3, [r7, #28]
   return(result);
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e5      	bne.n	80042fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3730      	adds	r7, #48	; 0x30
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	08004d2d 	.word	0x08004d2d
 8004340:	08004dc7 	.word	0x08004dc7
 8004344:	08004f3f 	.word	0x08004f3f

08004348 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b20      	cmp	r3, #32
 8004360:	d11d      	bne.n	800439e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_UART_Receive_DMA+0x26>
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e016      	b.n	80043a0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_UART_Receive_DMA+0x38>
 800437c:	2302      	movs	r3, #2
 800437e:	e00f      	b.n	80043a0 <HAL_UART_Receive_DMA+0x58>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	461a      	mov	r2, r3
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fec9 	bl	800512c <UART_Start_Receive_DMA>
 800439a:	4603      	mov	r3, r0
 800439c:	e000      	b.n	80043a0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800439e:	2302      	movs	r3, #2
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b0a0      	sub	sp, #128	; 0x80
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80043c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c2:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80043c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80043d0:	66ba      	str	r2, [r7, #104]	; 0x68
 80043d2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80043d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80043de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e5      	bne.n	80043b0 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3314      	adds	r3, #20
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80043f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3314      	adds	r3, #20
 8004402:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004404:	657a      	str	r2, [r7, #84]	; 0x54
 8004406:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800440a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e5      	bne.n	80043e4 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	2b01      	cmp	r3, #1
 800441e:	d119      	bne.n	8004454 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	f023 0310 	bic.w	r3, r3, #16
 8004436:	677b      	str	r3, [r7, #116]	; 0x74
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004440:	643a      	str	r2, [r7, #64]	; 0x40
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004446:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e5      	bne.n	8004420 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b80      	cmp	r3, #128	; 0x80
 8004460:	d136      	bne.n	80044d0 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	61fb      	str	r3, [r7, #28]
   return(result);
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004478:	673b      	str	r3, [r7, #112]	; 0x70
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e5      	bne.n	8004462 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	2b00      	cmp	r3, #0
 800449c:	d018      	beq.n	80044d0 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	2200      	movs	r2, #0
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fd fb64 	bl	8001b78 <HAL_DMA_Abort>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fd fd78 	bl	8001fb0 <HAL_DMA_GetError>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d104      	bne.n	80044d0 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2210      	movs	r2, #16
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e052      	b.n	8004576 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d136      	bne.n	800454c <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3314      	adds	r3, #20
 80044e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044fe:	61ba      	str	r2, [r7, #24]
 8004500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6979      	ldr	r1, [r7, #20]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	613b      	str	r3, [r7, #16]
   return(result);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e5      	bne.n	80044de <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	2b00      	cmp	r3, #0
 8004518:	d018      	beq.n	800454c <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	2200      	movs	r2, #0
 8004520:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd fb26 	bl	8001b78 <HAL_DMA_Abort>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00c      	beq.n	800454c <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	4618      	mov	r0, r3
 8004538:	f7fd fd3a 	bl	8001fb0 <HAL_DMA_GetError>
 800453c:	4603      	mov	r3, r0
 800453e:	2b20      	cmp	r3, #32
 8004540:	d104      	bne.n	800454c <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2210      	movs	r2, #16
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e014      	b.n	8004576 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3780      	adds	r7, #128	; 0x80
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b0a2      	sub	sp, #136	; 0x88
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8004588:	2301      	movs	r3, #1
 800458a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800459e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a0:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80045a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e3      	bne.n	800458e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3314      	adds	r3, #20
 80045e4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80045e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80045e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e5      	bne.n	80045c6 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d119      	bne.n	8004636 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	f023 0310 	bic.w	r3, r3, #16
 8004618:	67bb      	str	r3, [r7, #120]	; 0x78
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004622:	647a      	str	r2, [r7, #68]	; 0x44
 8004624:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e5      	bne.n	8004602 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00f      	beq.n	800465e <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d104      	bne.n	8004656 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004650:	4a53      	ldr	r2, [pc, #332]	; (80047a0 <HAL_UART_Abort_IT+0x220>)
 8004652:	651a      	str	r2, [r3, #80]	; 0x50
 8004654:	e003      	b.n	800465e <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465a:	2200      	movs	r2, #0
 800465c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00f      	beq.n	8004686 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d104      	bne.n	800467e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	4a4a      	ldr	r2, [pc, #296]	; (80047a4 <HAL_UART_Abort_IT+0x224>)
 800467a:	651a      	str	r2, [r3, #80]	; 0x50
 800467c:	e003      	b.n	8004686 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	2200      	movs	r2, #0
 8004684:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004690:	2b80      	cmp	r3, #128	; 0x80
 8004692:	d12d      	bne.n	80046f0 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3314      	adds	r3, #20
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	623b      	str	r3, [r7, #32]
   return(result);
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046aa:	677b      	str	r3, [r7, #116]	; 0x74
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3314      	adds	r3, #20
 80046b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80046b4:	633a      	str	r2, [r7, #48]	; 0x30
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e5      	bne.n	8004694 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00f      	beq.n	80046f0 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7fd fabf 	bl	8001c58 <HAL_DMA_Abort_IT>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	2200      	movs	r2, #0
 80046e6:	651a      	str	r2, [r3, #80]	; 0x50
 80046e8:	e002      	b.n	80046f0 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d130      	bne.n	8004760 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3314      	adds	r3, #20
 8004704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	60fb      	str	r3, [r7, #12]
   return(result);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004714:	673b      	str	r3, [r7, #112]	; 0x70
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800471e:	61fa      	str	r2, [r7, #28]
 8004720:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	69b9      	ldr	r1, [r7, #24]
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	617b      	str	r3, [r7, #20]
   return(result);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e5      	bne.n	80046fe <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	2b00      	cmp	r3, #0
 8004738:	d012      	beq.n	8004760 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	4618      	mov	r0, r3
 8004740:	f7fd fa8a 	bl	8001c58 <HAL_DMA_Abort_IT>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d007      	beq.n	800475a <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	2200      	movs	r2, #0
 8004750:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8004752:	2301      	movs	r3, #1
 8004754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004758:	e002      	b.n	8004760 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 800475a:	2300      	movs	r3, #0
 800475c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8004760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004764:	2b01      	cmp	r3, #1
 8004766:	d116      	bne.n	8004796 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fab5 	bl	8004d00 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3788      	adds	r7, #136	; 0x88
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	080053a7 	.word	0x080053a7
 80047a4:	08005407 	.word	0x08005407

080047a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b0ba      	sub	sp, #232	; 0xe8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10f      	bne.n	800480e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <HAL_UART_IRQHandler+0x66>
 80047fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fe:	f003 0320 	and.w	r3, r3, #32
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fe95 	bl	8005536 <UART_Receive_IT>
      return;
 800480c:	e256      	b.n	8004cbc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800480e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 80de 	beq.w	80049d4 <HAL_UART_IRQHandler+0x22c>
 8004818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d106      	bne.n	8004832 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004828:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80d1 	beq.w	80049d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_UART_IRQHandler+0xae>
 800483e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f043 0201 	orr.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <HAL_UART_IRQHandler+0xd2>
 8004862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f043 0202 	orr.w	r2, r3, #2
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00b      	beq.n	800489e <HAL_UART_IRQHandler+0xf6>
 8004886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f043 0204 	orr.w	r2, r3, #4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d011      	beq.n	80048ce <HAL_UART_IRQHandler+0x126>
 80048aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d105      	bne.n	80048c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f043 0208 	orr.w	r2, r3, #8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 81ed 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_UART_IRQHandler+0x14e>
 80048e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fe20 	bl	8005536 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b40      	cmp	r3, #64	; 0x40
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d103      	bne.n	8004922 <HAL_UART_IRQHandler+0x17a>
 800491a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d04f      	beq.n	80049c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fcc8 	bl	80052b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b40      	cmp	r3, #64	; 0x40
 8004934:	d141      	bne.n	80049ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3314      	adds	r3, #20
 800493c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800494c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3314      	adds	r3, #20
 800495e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004962:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800496e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800497a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1d9      	bne.n	8004936 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	2b00      	cmp	r3, #0
 8004988:	d013      	beq.n	80049b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	4a7d      	ldr	r2, [pc, #500]	; (8004b84 <HAL_UART_IRQHandler+0x3dc>)
 8004990:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	4618      	mov	r0, r3
 8004998:	f7fd f95e 	bl	8001c58 <HAL_DMA_Abort_IT>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d016      	beq.n	80049d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049ac:	4610      	mov	r0, r2
 80049ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	e00e      	b.n	80049d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f99a 	bl	8004cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b8:	e00a      	b.n	80049d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f996 	bl	8004cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c0:	e006      	b.n	80049d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f992 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049ce:	e170      	b.n	8004cb2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d0:	bf00      	nop
    return;
 80049d2:	e16e      	b.n	8004cb2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	2b01      	cmp	r3, #1
 80049da:	f040 814a 	bne.w	8004c72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 8143 	beq.w	8004c72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 813c 	beq.w	8004c72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	f040 80b4 	bne.w	8004b88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8140 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	f080 8139 	bcs.w	8004cb6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a56:	f000 8088 	beq.w	8004b6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1d9      	bne.n	8004a5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3314      	adds	r3, #20
 8004aac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004aca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ace:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ad2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e1      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3314      	adds	r3, #20
 8004ae8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3314      	adds	r3, #20
 8004b02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e3      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3a:	f023 0310 	bic.w	r3, r3, #16
 8004b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e3      	bne.n	8004b28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fd f807 	bl	8001b78 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8ca 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b80:	e099      	b.n	8004cb6 <HAL_UART_IRQHandler+0x50e>
 8004b82:	bf00      	nop
 8004b84:	0800537f 	.word	0x0800537f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 808b 	beq.w	8004cba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8086 	beq.w	8004cba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	330c      	adds	r3, #12
 8004bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bd2:	647a      	str	r2, [r7, #68]	; 0x44
 8004bd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e3      	bne.n	8004bae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3314      	adds	r3, #20
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e3      	bne.n	8004be6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c50:	61fa      	str	r2, [r7, #28]
 8004c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e3      	bne.n	8004c2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f852 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c70:	e023      	b.n	8004cba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_UART_IRQHandler+0x4ea>
 8004c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fbeb 	bl	8005466 <UART_Transmit_IT>
    return;
 8004c90:	e014      	b.n	8004cbc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00e      	beq.n	8004cbc <HAL_UART_IRQHandler+0x514>
 8004c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d008      	beq.n	8004cbc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fc2b 	bl	8005506 <UART_EndTransmit_IT>
    return;
 8004cb0:	e004      	b.n	8004cbc <HAL_UART_IRQHandler+0x514>
    return;
 8004cb2:	bf00      	nop
 8004cb4:	e002      	b.n	8004cbc <HAL_UART_IRQHandler+0x514>
      return;
 8004cb6:	bf00      	nop
 8004cb8:	e000      	b.n	8004cbc <HAL_UART_IRQHandler+0x514>
      return;
 8004cba:	bf00      	nop
  }
}
 8004cbc:	37e8      	adds	r7, #232	; 0xe8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop

08004cc4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b090      	sub	sp, #64	; 0x40
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d137      	bne.n	8004db8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3314      	adds	r3, #20
 8004d6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e5      	bne.n	8004d4e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004da2:	61fa      	str	r2, [r7, #28]
 8004da4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	69b9      	ldr	r1, [r7, #24]
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	e841 2300 	strex	r3, r2, [r1]
 8004dae:	617b      	str	r3, [r7, #20]
   return(result);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1e5      	bne.n	8004d82 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004db6:	e002      	b.n	8004dbe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004db8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004dba:	f002 fee5 	bl	8007b88 <HAL_UART_TxCpltCallback>
}
 8004dbe:	bf00      	nop
 8004dc0:	3740      	adds	r7, #64	; 0x40
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff ff75 	bl	8004cc4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b09c      	sub	sp, #112	; 0x70
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d172      	bne.n	8004ee4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e00:	2200      	movs	r2, #0
 8004e02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3314      	adds	r3, #20
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3314      	adds	r3, #20
 8004e56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e58:	647a      	str	r2, [r7, #68]	; 0x44
 8004e5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e5      	bne.n	8004e38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3314      	adds	r3, #20
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e82:	663b      	str	r3, [r7, #96]	; 0x60
 8004e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3314      	adds	r3, #20
 8004e8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e8c:	633a      	str	r2, [r7, #48]	; 0x30
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e5      	bne.n	8004e6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d119      	bne.n	8004ee4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ed0:	61fa      	str	r2, [r7, #28]
 8004ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	69b9      	ldr	r1, [r7, #24]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e5      	bne.n	8004eb0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d106      	bne.n	8004efa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ef4:	f7ff ff0e 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ef8:	e002      	b.n	8004f00 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004efa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004efc:	f002 fe70 	bl	8007be0 <HAL_UART_RxCpltCallback>
}
 8004f00:	bf00      	nop
 8004f02:	3770      	adds	r7, #112	; 0x70
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d108      	bne.n	8004f30 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	4619      	mov	r1, r3
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7ff fef3 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f2e:	e002      	b.n	8004f36 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fed1 	bl	8004cd8 <HAL_UART_RxHalfCpltCallback>
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b21      	cmp	r3, #33	; 0x21
 8004f70:	d108      	bne.n	8004f84 <UART_DMAError+0x46>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f7e:	68b8      	ldr	r0, [r7, #8]
 8004f80:	f000 f972 	bl	8005268 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	bf0c      	ite	eq
 8004f92:	2301      	moveq	r3, #1
 8004f94:	2300      	movne	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b22      	cmp	r3, #34	; 0x22
 8004fa4:	d108      	bne.n	8004fb8 <UART_DMAError+0x7a>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004fb2:	68b8      	ldr	r0, [r7, #8]
 8004fb4:	f000 f980 	bl	80052b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	f043 0210 	orr.w	r2, r3, #16
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fc4:	68b8      	ldr	r0, [r7, #8]
 8004fc6:	f7ff fe91 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b090      	sub	sp, #64	; 0x40
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	603b      	str	r3, [r7, #0]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe2:	e050      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fea:	d04c      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d007      	beq.n	8005002 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff2:	f7fc fb9d 	bl	8001730 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d241      	bcs.n	8005086 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	330c      	adds	r3, #12
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005022:	637a      	str	r2, [r7, #52]	; 0x34
 8005024:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e5      	bne.n	8005002 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3314      	adds	r3, #20
 800503c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	613b      	str	r3, [r7, #16]
   return(result);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	63bb      	str	r3, [r7, #56]	; 0x38
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3314      	adds	r3, #20
 8005054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005056:	623a      	str	r2, [r7, #32]
 8005058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	69f9      	ldr	r1, [r7, #28]
 800505c:	6a3a      	ldr	r2, [r7, #32]
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	61bb      	str	r3, [r7, #24]
   return(result);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e5      	bne.n	8005036 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e00f      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4013      	ands	r3, r2
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	bf0c      	ite	eq
 8005096:	2301      	moveq	r3, #1
 8005098:	2300      	movne	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d09f      	beq.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3740      	adds	r7, #64	; 0x40
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	4613      	mov	r3, r2
 80050ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	88fa      	ldrh	r2, [r7, #6]
 80050c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2222      	movs	r2, #34	; 0x22
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695a      	ldr	r2, [r3, #20]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0220 	orr.w	r2, r2, #32
 800511a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b098      	sub	sp, #96	; 0x60
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	4613      	mov	r3, r2
 8005138:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2222      	movs	r2, #34	; 0x22
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	4a40      	ldr	r2, [pc, #256]	; (800525c <UART_Start_Receive_DMA+0x130>)
 800515a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	4a3f      	ldr	r2, [pc, #252]	; (8005260 <UART_Start_Receive_DMA+0x134>)
 8005162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	4a3e      	ldr	r2, [pc, #248]	; (8005264 <UART_Start_Receive_DMA+0x138>)
 800516a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	2200      	movs	r2, #0
 8005172:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005174:	f107 0308 	add.w	r3, r7, #8
 8005178:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	f7fc fc9c 	bl	8001ac8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005190:	2300      	movs	r3, #0
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d019      	beq.n	80051ea <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	330c      	adds	r3, #12
 80051d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051d6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e5      	bne.n	80051b6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	657b      	str	r3, [r7, #84]	; 0x54
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3314      	adds	r3, #20
 8005208:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800520a:	63ba      	str	r2, [r7, #56]	; 0x38
 800520c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e5      	bne.n	80051ea <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3314      	adds	r3, #20
 8005224:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	617b      	str	r3, [r7, #20]
   return(result);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005234:	653b      	str	r3, [r7, #80]	; 0x50
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3314      	adds	r3, #20
 800523c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800523e:	627a      	str	r2, [r7, #36]	; 0x24
 8005240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6a39      	ldr	r1, [r7, #32]
 8005244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	61fb      	str	r3, [r7, #28]
   return(result);
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e5      	bne.n	800521e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3760      	adds	r7, #96	; 0x60
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08004de3 	.word	0x08004de3
 8005260:	08004f09 	.word	0x08004f09
 8005264:	08004f3f 	.word	0x08004f3f

08005268 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b089      	sub	sp, #36	; 0x24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	61ba      	str	r2, [r7, #24]
 8005292:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6979      	ldr	r1, [r7, #20]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	613b      	str	r3, [r7, #16]
   return(result);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e5      	bne.n	8005270 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80052ac:	bf00      	nop
 80052ae:	3724      	adds	r7, #36	; 0x24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b095      	sub	sp, #84	; 0x54
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052e0:	643a      	str	r2, [r7, #64]	; 0x40
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e5      	bne.n	80052c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3314      	adds	r3, #20
 80052fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	e853 3f00 	ldrex	r3, [r3]
 8005302:	61fb      	str	r3, [r7, #28]
   return(result);
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f023 0301 	bic.w	r3, r3, #1
 800530a:	64bb      	str	r3, [r7, #72]	; 0x48
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005314:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800531a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800531c:	e841 2300 	strex	r3, r2, [r1]
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1e5      	bne.n	80052f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	2b01      	cmp	r3, #1
 800532e:	d119      	bne.n	8005364 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f023 0310 	bic.w	r3, r3, #16
 8005346:	647b      	str	r3, [r7, #68]	; 0x44
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005350:	61ba      	str	r2, [r7, #24]
 8005352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6979      	ldr	r1, [r7, #20]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	613b      	str	r3, [r7, #16]
   return(result);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e5      	bne.n	8005330 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005372:	bf00      	nop
 8005374:	3754      	adds	r7, #84	; 0x54
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7ff fca7 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b8:	2200      	movs	r2, #0
 80053ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d117      	bne.n	80053fe <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7ff fc82 	bl	8004d00 <HAL_UART_AbortCpltCallback>
 80053fc:	e000      	b.n	8005400 <UART_DMATxAbortCallback+0x5a>
      return;
 80053fe:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	2200      	movs	r2, #0
 800541a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542a:	2b00      	cmp	r3, #0
 800542c:	d117      	bne.n	800545e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f7ff fc52 	bl	8004d00 <HAL_UART_AbortCpltCallback>
 800545c:	e000      	b.n	8005460 <UART_DMARxAbortCallback+0x5a>
      return;
 800545e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b21      	cmp	r3, #33	; 0x21
 8005478:	d13e      	bne.n	80054f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005482:	d114      	bne.n	80054ae <UART_Transmit_IT+0x48>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d110      	bne.n	80054ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	1c9a      	adds	r2, r3, #2
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	621a      	str	r2, [r3, #32]
 80054ac:	e008      	b.n	80054c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	1c59      	adds	r1, r3, #1
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6211      	str	r1, [r2, #32]
 80054b8:	781a      	ldrb	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4619      	mov	r1, r3
 80054ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10f      	bne.n	80054f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e000      	b.n	80054fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f002 fb2e 	bl	8007b88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b08c      	sub	sp, #48	; 0x30
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b22      	cmp	r3, #34	; 0x22
 8005548:	f040 80ab 	bne.w	80056a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005554:	d117      	bne.n	8005586 <UART_Receive_IT+0x50>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d113      	bne.n	8005586 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800555e:	2300      	movs	r3, #0
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005574:	b29a      	uxth	r2, r3
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	629a      	str	r2, [r3, #40]	; 0x28
 8005584:	e026      	b.n	80055d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	d007      	beq.n	80055aa <UART_Receive_IT+0x74>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <UART_Receive_IT+0x82>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e008      	b.n	80055ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29b      	uxth	r3, r3
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4619      	mov	r1, r3
 80055e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d15a      	bne.n	800569e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0220 	bic.w	r2, r2, #32
 80055f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0201 	bic.w	r2, r2, #1
 8005616:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	2b01      	cmp	r3, #1
 8005626:	d135      	bne.n	8005694 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	613b      	str	r3, [r7, #16]
   return(result);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f023 0310 	bic.w	r3, r3, #16
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	330c      	adds	r3, #12
 800564c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564e:	623a      	str	r2, [r7, #32]
 8005650:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	69f9      	ldr	r1, [r7, #28]
 8005654:	6a3a      	ldr	r2, [r7, #32]
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	61bb      	str	r3, [r7, #24]
   return(result);
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e5      	bne.n	800562e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b10      	cmp	r3, #16
 800566e:	d10a      	bne.n	8005686 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fb41 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
 8005692:	e002      	b.n	800569a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f002 faa3 	bl	8007be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e002      	b.n	80056a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e000      	b.n	80056a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056a2:	2302      	movs	r3, #2
  }
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3730      	adds	r7, #48	; 0x30
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b0:	b0c0      	sub	sp, #256	; 0x100
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	68d9      	ldr	r1, [r3, #12]
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	ea40 0301 	orr.w	r3, r0, r1
 80056d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005704:	f021 010c 	bic.w	r1, r1, #12
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005712:	430b      	orrs	r3, r1
 8005714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005726:	6999      	ldr	r1, [r3, #24]
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	ea40 0301 	orr.w	r3, r0, r1
 8005732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4b8f      	ldr	r3, [pc, #572]	; (8005978 <UART_SetConfig+0x2cc>)
 800573c:	429a      	cmp	r2, r3
 800573e:	d005      	beq.n	800574c <UART_SetConfig+0xa0>
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b8d      	ldr	r3, [pc, #564]	; (800597c <UART_SetConfig+0x2d0>)
 8005748:	429a      	cmp	r2, r3
 800574a:	d104      	bne.n	8005756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800574c:	f7fd fad2 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8005750:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005754:	e003      	b.n	800575e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005756:	f7fd fab9 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 800575a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005768:	f040 810c 	bne.w	8005984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800576c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005770:	2200      	movs	r2, #0
 8005772:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005776:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800577a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800577e:	4622      	mov	r2, r4
 8005780:	462b      	mov	r3, r5
 8005782:	1891      	adds	r1, r2, r2
 8005784:	65b9      	str	r1, [r7, #88]	; 0x58
 8005786:	415b      	adcs	r3, r3
 8005788:	65fb      	str	r3, [r7, #92]	; 0x5c
 800578a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800578e:	4621      	mov	r1, r4
 8005790:	eb12 0801 	adds.w	r8, r2, r1
 8005794:	4629      	mov	r1, r5
 8005796:	eb43 0901 	adc.w	r9, r3, r1
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057ae:	4690      	mov	r8, r2
 80057b0:	4699      	mov	r9, r3
 80057b2:	4623      	mov	r3, r4
 80057b4:	eb18 0303 	adds.w	r3, r8, r3
 80057b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057bc:	462b      	mov	r3, r5
 80057be:	eb49 0303 	adc.w	r3, r9, r3
 80057c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057da:	460b      	mov	r3, r1
 80057dc:	18db      	adds	r3, r3, r3
 80057de:	653b      	str	r3, [r7, #80]	; 0x50
 80057e0:	4613      	mov	r3, r2
 80057e2:	eb42 0303 	adc.w	r3, r2, r3
 80057e6:	657b      	str	r3, [r7, #84]	; 0x54
 80057e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057f0:	f7fb fa0a 	bl	8000c08 <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4b61      	ldr	r3, [pc, #388]	; (8005980 <UART_SetConfig+0x2d4>)
 80057fa:	fba3 2302 	umull	r2, r3, r3, r2
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	011c      	lsls	r4, r3, #4
 8005802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800580c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005814:	4642      	mov	r2, r8
 8005816:	464b      	mov	r3, r9
 8005818:	1891      	adds	r1, r2, r2
 800581a:	64b9      	str	r1, [r7, #72]	; 0x48
 800581c:	415b      	adcs	r3, r3
 800581e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005824:	4641      	mov	r1, r8
 8005826:	eb12 0a01 	adds.w	sl, r2, r1
 800582a:	4649      	mov	r1, r9
 800582c:	eb43 0b01 	adc.w	fp, r3, r1
 8005830:	f04f 0200 	mov.w	r2, #0
 8005834:	f04f 0300 	mov.w	r3, #0
 8005838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800583c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005844:	4692      	mov	sl, r2
 8005846:	469b      	mov	fp, r3
 8005848:	4643      	mov	r3, r8
 800584a:	eb1a 0303 	adds.w	r3, sl, r3
 800584e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005852:	464b      	mov	r3, r9
 8005854:	eb4b 0303 	adc.w	r3, fp, r3
 8005858:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005868:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800586c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005870:	460b      	mov	r3, r1
 8005872:	18db      	adds	r3, r3, r3
 8005874:	643b      	str	r3, [r7, #64]	; 0x40
 8005876:	4613      	mov	r3, r2
 8005878:	eb42 0303 	adc.w	r3, r2, r3
 800587c:	647b      	str	r3, [r7, #68]	; 0x44
 800587e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005886:	f7fb f9bf 	bl	8000c08 <__aeabi_uldivmod>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4611      	mov	r1, r2
 8005890:	4b3b      	ldr	r3, [pc, #236]	; (8005980 <UART_SetConfig+0x2d4>)
 8005892:	fba3 2301 	umull	r2, r3, r3, r1
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2264      	movs	r2, #100	; 0x64
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	1acb      	subs	r3, r1, r3
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058a6:	4b36      	ldr	r3, [pc, #216]	; (8005980 <UART_SetConfig+0x2d4>)
 80058a8:	fba3 2302 	umull	r2, r3, r3, r2
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058b4:	441c      	add	r4, r3
 80058b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ba:	2200      	movs	r2, #0
 80058bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058c8:	4642      	mov	r2, r8
 80058ca:	464b      	mov	r3, r9
 80058cc:	1891      	adds	r1, r2, r2
 80058ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80058d0:	415b      	adcs	r3, r3
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058d8:	4641      	mov	r1, r8
 80058da:	1851      	adds	r1, r2, r1
 80058dc:	6339      	str	r1, [r7, #48]	; 0x30
 80058de:	4649      	mov	r1, r9
 80058e0:	414b      	adcs	r3, r1
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058f0:	4659      	mov	r1, fp
 80058f2:	00cb      	lsls	r3, r1, #3
 80058f4:	4651      	mov	r1, sl
 80058f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058fa:	4651      	mov	r1, sl
 80058fc:	00ca      	lsls	r2, r1, #3
 80058fe:	4610      	mov	r0, r2
 8005900:	4619      	mov	r1, r3
 8005902:	4603      	mov	r3, r0
 8005904:	4642      	mov	r2, r8
 8005906:	189b      	adds	r3, r3, r2
 8005908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800590c:	464b      	mov	r3, r9
 800590e:	460a      	mov	r2, r1
 8005910:	eb42 0303 	adc.w	r3, r2, r3
 8005914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005924:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800592c:	460b      	mov	r3, r1
 800592e:	18db      	adds	r3, r3, r3
 8005930:	62bb      	str	r3, [r7, #40]	; 0x28
 8005932:	4613      	mov	r3, r2
 8005934:	eb42 0303 	adc.w	r3, r2, r3
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800593e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005942:	f7fb f961 	bl	8000c08 <__aeabi_uldivmod>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <UART_SetConfig+0x2d4>)
 800594c:	fba3 1302 	umull	r1, r3, r3, r2
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	2164      	movs	r1, #100	; 0x64
 8005954:	fb01 f303 	mul.w	r3, r1, r3
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	3332      	adds	r3, #50	; 0x32
 800595e:	4a08      	ldr	r2, [pc, #32]	; (8005980 <UART_SetConfig+0x2d4>)
 8005960:	fba2 2303 	umull	r2, r3, r2, r3
 8005964:	095b      	lsrs	r3, r3, #5
 8005966:	f003 0207 	and.w	r2, r3, #7
 800596a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4422      	add	r2, r4
 8005972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005974:	e106      	b.n	8005b84 <UART_SetConfig+0x4d8>
 8005976:	bf00      	nop
 8005978:	40011000 	.word	0x40011000
 800597c:	40011400 	.word	0x40011400
 8005980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005988:	2200      	movs	r2, #0
 800598a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800598e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005996:	4642      	mov	r2, r8
 8005998:	464b      	mov	r3, r9
 800599a:	1891      	adds	r1, r2, r2
 800599c:	6239      	str	r1, [r7, #32]
 800599e:	415b      	adcs	r3, r3
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
 80059a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059a6:	4641      	mov	r1, r8
 80059a8:	1854      	adds	r4, r2, r1
 80059aa:	4649      	mov	r1, r9
 80059ac:	eb43 0501 	adc.w	r5, r3, r1
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	00eb      	lsls	r3, r5, #3
 80059ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059be:	00e2      	lsls	r2, r4, #3
 80059c0:	4614      	mov	r4, r2
 80059c2:	461d      	mov	r5, r3
 80059c4:	4643      	mov	r3, r8
 80059c6:	18e3      	adds	r3, r4, r3
 80059c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059cc:	464b      	mov	r3, r9
 80059ce:	eb45 0303 	adc.w	r3, r5, r3
 80059d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	f04f 0300 	mov.w	r3, #0
 80059ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059f2:	4629      	mov	r1, r5
 80059f4:	008b      	lsls	r3, r1, #2
 80059f6:	4621      	mov	r1, r4
 80059f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059fc:	4621      	mov	r1, r4
 80059fe:	008a      	lsls	r2, r1, #2
 8005a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a04:	f7fb f900 	bl	8000c08 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4b60      	ldr	r3, [pc, #384]	; (8005b90 <UART_SetConfig+0x4e4>)
 8005a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	011c      	lsls	r4, r3, #4
 8005a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a28:	4642      	mov	r2, r8
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	1891      	adds	r1, r2, r2
 8005a2e:	61b9      	str	r1, [r7, #24]
 8005a30:	415b      	adcs	r3, r3
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a38:	4641      	mov	r1, r8
 8005a3a:	1851      	adds	r1, r2, r1
 8005a3c:	6139      	str	r1, [r7, #16]
 8005a3e:	4649      	mov	r1, r9
 8005a40:	414b      	adcs	r3, r1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a50:	4659      	mov	r1, fp
 8005a52:	00cb      	lsls	r3, r1, #3
 8005a54:	4651      	mov	r1, sl
 8005a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a5a:	4651      	mov	r1, sl
 8005a5c:	00ca      	lsls	r2, r1, #3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	4619      	mov	r1, r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	4642      	mov	r2, r8
 8005a66:	189b      	adds	r3, r3, r2
 8005a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a6c:	464b      	mov	r3, r9
 8005a6e:	460a      	mov	r2, r1
 8005a70:	eb42 0303 	adc.w	r3, r2, r3
 8005a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a90:	4649      	mov	r1, r9
 8005a92:	008b      	lsls	r3, r1, #2
 8005a94:	4641      	mov	r1, r8
 8005a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a9a:	4641      	mov	r1, r8
 8005a9c:	008a      	lsls	r2, r1, #2
 8005a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aa2:	f7fb f8b1 	bl	8000c08 <__aeabi_uldivmod>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4b38      	ldr	r3, [pc, #224]	; (8005b90 <UART_SetConfig+0x4e4>)
 8005aae:	fba3 2301 	umull	r2, r3, r3, r1
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	2264      	movs	r2, #100	; 0x64
 8005ab6:	fb02 f303 	mul.w	r3, r2, r3
 8005aba:	1acb      	subs	r3, r1, r3
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	3332      	adds	r3, #50	; 0x32
 8005ac0:	4a33      	ldr	r2, [pc, #204]	; (8005b90 <UART_SetConfig+0x4e4>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005acc:	441c      	add	r4, r3
 8005ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8005ad6:	677a      	str	r2, [r7, #116]	; 0x74
 8005ad8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005adc:	4642      	mov	r2, r8
 8005ade:	464b      	mov	r3, r9
 8005ae0:	1891      	adds	r1, r2, r2
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	415b      	adcs	r3, r3
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aec:	4641      	mov	r1, r8
 8005aee:	1851      	adds	r1, r2, r1
 8005af0:	6039      	str	r1, [r7, #0]
 8005af2:	4649      	mov	r1, r9
 8005af4:	414b      	adcs	r3, r1
 8005af6:	607b      	str	r3, [r7, #4]
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b04:	4659      	mov	r1, fp
 8005b06:	00cb      	lsls	r3, r1, #3
 8005b08:	4651      	mov	r1, sl
 8005b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b0e:	4651      	mov	r1, sl
 8005b10:	00ca      	lsls	r2, r1, #3
 8005b12:	4610      	mov	r0, r2
 8005b14:	4619      	mov	r1, r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	4642      	mov	r2, r8
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b1e:	464b      	mov	r3, r9
 8005b20:	460a      	mov	r2, r1
 8005b22:	eb42 0303 	adc.w	r3, r2, r3
 8005b26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	663b      	str	r3, [r7, #96]	; 0x60
 8005b32:	667a      	str	r2, [r7, #100]	; 0x64
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b40:	4649      	mov	r1, r9
 8005b42:	008b      	lsls	r3, r1, #2
 8005b44:	4641      	mov	r1, r8
 8005b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	008a      	lsls	r2, r1, #2
 8005b4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b52:	f7fb f859 	bl	8000c08 <__aeabi_uldivmod>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <UART_SetConfig+0x4e4>)
 8005b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b60:	095b      	lsrs	r3, r3, #5
 8005b62:	2164      	movs	r1, #100	; 0x64
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	3332      	adds	r3, #50	; 0x32
 8005b6e:	4a08      	ldr	r2, [pc, #32]	; (8005b90 <UART_SetConfig+0x4e4>)
 8005b70:	fba2 2303 	umull	r2, r3, r2, r3
 8005b74:	095b      	lsrs	r3, r3, #5
 8005b76:	f003 020f 	and.w	r2, r3, #15
 8005b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4422      	add	r2, r4
 8005b82:	609a      	str	r2, [r3, #8]
}
 8005b84:	bf00      	nop
 8005b86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b90:	51eb851f 	.word	0x51eb851f

08005b94 <drv_dmaInit>:

/*
 * Function: drv_dmaInit
 */
gos_result_t drv_dmaInit (void_t)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t dmaInitResult = GOS_SUCCESS;
 8005b9a:	2355      	movs	r3, #85	; 0x55
 8005b9c:	71fb      	strb	r3, [r7, #7]
    u8_t         idx           = 0u;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	71bb      	strb	r3, [r7, #6]
 8005ba6:	e0c9      	b.n	8005d3c <drv_dmaInit+0x1a8>
    {
        dmaConfig[idx].hdma.Instance                 = dmaStreamLut[dmaConfig[idx].dmaStream];
 8005ba8:	79ba      	ldrb	r2, [r7, #6]
 8005baa:	496c      	ldr	r1, [pc, #432]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005bac:	4613      	mov	r3, r2
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	4413      	add	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	440b      	add	r3, r1
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	79ba      	ldrb	r2, [r7, #6]
 8005bbc:	4b68      	ldr	r3, [pc, #416]	; (8005d60 <drv_dmaInit+0x1cc>)
 8005bbe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005bc2:	4866      	ldr	r0, [pc, #408]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	4413      	add	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4403      	add	r3, r0
 8005bce:	3304      	adds	r3, #4
 8005bd0:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Channel             = dmaConfig[idx].channel;
 8005bd2:	79b9      	ldrb	r1, [r7, #6]
 8005bd4:	79ba      	ldrb	r2, [r7, #6]
 8005bd6:	4861      	ldr	r0, [pc, #388]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005bd8:	460b      	mov	r3, r1
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	440b      	add	r3, r1
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	4403      	add	r3, r0
 8005be2:	3364      	adds	r3, #100	; 0x64
 8005be4:	6819      	ldr	r1, [r3, #0]
 8005be6:	485d      	ldr	r0, [pc, #372]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005be8:	4613      	mov	r3, r2
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	4413      	add	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	4403      	add	r3, r0
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Direction           = dmaConfig[idx].direction;
 8005bf6:	79b9      	ldrb	r1, [r7, #6]
 8005bf8:	79ba      	ldrb	r2, [r7, #6]
 8005bfa:	4858      	ldr	r0, [pc, #352]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	440b      	add	r3, r1
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	4403      	add	r3, r0
 8005c06:	3368      	adds	r3, #104	; 0x68
 8005c08:	6819      	ldr	r1, [r3, #0]
 8005c0a:	4854      	ldr	r0, [pc, #336]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	4413      	add	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4403      	add	r3, r0
 8005c16:	330c      	adds	r3, #12
 8005c18:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphInc           = dmaConfig[idx].periphInc;
 8005c1a:	79b9      	ldrb	r1, [r7, #6]
 8005c1c:	79ba      	ldrb	r2, [r7, #6]
 8005c1e:	484f      	ldr	r0, [pc, #316]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005c20:	460b      	mov	r3, r1
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	440b      	add	r3, r1
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4403      	add	r3, r0
 8005c2a:	336c      	adds	r3, #108	; 0x6c
 8005c2c:	6819      	ldr	r1, [r3, #0]
 8005c2e:	484b      	ldr	r0, [pc, #300]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005c30:	4613      	mov	r3, r2
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	4413      	add	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4403      	add	r3, r0
 8005c3a:	3310      	adds	r3, #16
 8005c3c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemInc              = dmaConfig[idx].memInc;
 8005c3e:	79b9      	ldrb	r1, [r7, #6]
 8005c40:	79ba      	ldrb	r2, [r7, #6]
 8005c42:	4846      	ldr	r0, [pc, #280]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005c44:	460b      	mov	r3, r1
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	440b      	add	r3, r1
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4403      	add	r3, r0
 8005c4e:	3370      	adds	r3, #112	; 0x70
 8005c50:	6819      	ldr	r1, [r3, #0]
 8005c52:	4842      	ldr	r0, [pc, #264]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005c54:	4613      	mov	r3, r2
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	4413      	add	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4403      	add	r3, r0
 8005c5e:	3314      	adds	r3, #20
 8005c60:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphDataAlignment = dmaConfig[idx].periphDataAlignment;
 8005c62:	79b9      	ldrb	r1, [r7, #6]
 8005c64:	79ba      	ldrb	r2, [r7, #6]
 8005c66:	483d      	ldr	r0, [pc, #244]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005c68:	460b      	mov	r3, r1
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	440b      	add	r3, r1
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4403      	add	r3, r0
 8005c72:	3374      	adds	r3, #116	; 0x74
 8005c74:	6819      	ldr	r1, [r3, #0]
 8005c76:	4839      	ldr	r0, [pc, #228]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005c78:	4613      	mov	r3, r2
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	4413      	add	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4403      	add	r3, r0
 8005c82:	3318      	adds	r3, #24
 8005c84:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemDataAlignment    = dmaConfig[idx].memDataAlignment;
 8005c86:	79b9      	ldrb	r1, [r7, #6]
 8005c88:	79ba      	ldrb	r2, [r7, #6]
 8005c8a:	4834      	ldr	r0, [pc, #208]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	440b      	add	r3, r1
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4403      	add	r3, r0
 8005c96:	3378      	adds	r3, #120	; 0x78
 8005c98:	6819      	ldr	r1, [r3, #0]
 8005c9a:	4830      	ldr	r0, [pc, #192]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	4413      	add	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4403      	add	r3, r0
 8005ca6:	331c      	adds	r3, #28
 8005ca8:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Mode                = dmaConfig[idx].mode;
 8005caa:	79b9      	ldrb	r1, [r7, #6]
 8005cac:	79ba      	ldrb	r2, [r7, #6]
 8005cae:	482b      	ldr	r0, [pc, #172]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	440b      	add	r3, r1
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	4403      	add	r3, r0
 8005cba:	337c      	adds	r3, #124	; 0x7c
 8005cbc:	6819      	ldr	r1, [r3, #0]
 8005cbe:	4827      	ldr	r0, [pc, #156]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	4413      	add	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4403      	add	r3, r0
 8005cca:	3320      	adds	r3, #32
 8005ccc:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Priority            = dmaConfig[idx].priority;
 8005cce:	79b9      	ldrb	r1, [r7, #6]
 8005cd0:	79ba      	ldrb	r2, [r7, #6]
 8005cd2:	4822      	ldr	r0, [pc, #136]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	440b      	add	r3, r1
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	4403      	add	r3, r0
 8005cde:	3380      	adds	r3, #128	; 0x80
 8005ce0:	6819      	ldr	r1, [r3, #0]
 8005ce2:	481e      	ldr	r0, [pc, #120]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	4413      	add	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	4403      	add	r3, r0
 8005cee:	3324      	adds	r3, #36	; 0x24
 8005cf0:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.FIFOMode            = dmaConfig[idx].fifoMode;
 8005cf2:	79b9      	ldrb	r1, [r7, #6]
 8005cf4:	79ba      	ldrb	r2, [r7, #6]
 8005cf6:	4819      	ldr	r0, [pc, #100]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	440b      	add	r3, r1
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4403      	add	r3, r0
 8005d02:	3384      	adds	r3, #132	; 0x84
 8005d04:	6819      	ldr	r1, [r3, #0]
 8005d06:	4815      	ldr	r0, [pc, #84]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005d08:	4613      	mov	r3, r2
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	4403      	add	r3, r0
 8005d12:	3328      	adds	r3, #40	; 0x28
 8005d14:	6019      	str	r1, [r3, #0]

        if (HAL_DMA_Init(&(dmaConfig[idx].hdma)) != HAL_OK)
 8005d16:	79ba      	ldrb	r2, [r7, #6]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	4413      	add	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	4a0e      	ldr	r2, [pc, #56]	; (8005d5c <drv_dmaInit+0x1c8>)
 8005d22:	4413      	add	r3, r2
 8005d24:	3304      	adds	r3, #4
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fb fe20 	bl	800196c <HAL_DMA_Init>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <drv_dmaInit+0x1a2>
        {
            dmaInitResult = GOS_ERROR;
 8005d32:	23ae      	movs	r3, #174	; 0xae
 8005d34:	71fb      	strb	r3, [r7, #7]
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8005d36:	79bb      	ldrb	r3, [r7, #6]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	71bb      	strb	r3, [r7, #6]
 8005d3c:	79ba      	ldrb	r2, [r7, #6]
 8005d3e:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <drv_dmaInit+0x1d0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4909      	ldr	r1, [pc, #36]	; (8005d68 <drv_dmaInit+0x1d4>)
 8005d44:	fba1 1303 	umull	r1, r3, r1, r3
 8005d48:	09db      	lsrs	r3, r3, #7
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	f4ff af2c 	bcc.w	8005ba8 <drv_dmaInit+0x14>
        {
            // Init OK.
        }
    }

    return dmaInitResult;
 8005d50:	79fb      	ldrb	r3, [r7, #7]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	2000008c 	.word	0x2000008c
 8005d60:	20000318 	.word	0x20000318
 8005d64:	20000224 	.word	0x20000224
 8005d68:	f0f0f0f1 	.word	0xf0f0f0f1

08005d6c <DMA1_Stream0_IRQHandler>:

/*
 * Function: DMA1_Stream0_IRQHandler
 */
void_t DMA1_Stream0_IRQHandler (void_t)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005d70:	4b19      	ldr	r3, [pc, #100]	; (8005dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d105      	bne.n	8005d84 <DMA1_Stream0_IRQHandler+0x18>
 8005d78:	4b18      	ldr	r3, [pc, #96]	; (8005ddc <DMA1_Stream0_IRQHandler+0x70>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	4b16      	ldr	r3, [pc, #88]	; (8005ddc <DMA1_Stream0_IRQHandler+0x70>)
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8005d8e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_0] != NULL)
 8005d90:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <DMA1_Stream0_IRQHandler+0x74>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <DMA1_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_0]->hdma);
 8005d98:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <DMA1_Stream0_IRQHandler+0x74>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fb ff7c 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8005da4:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <DMA1_Stream0_IRQHandler+0x4c>
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <DMA1_Stream0_IRQHandler+0x6c>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d109      	bne.n	8005dd4 <DMA1_Stream0_IRQHandler+0x68>
 8005dc0:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <DMA1_Stream0_IRQHandler+0x70>)
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <DMA1_Stream0_IRQHandler+0x68>
 8005dc8:	4b04      	ldr	r3, [pc, #16]	; (8005ddc <DMA1_Stream0_IRQHandler+0x70>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	4b02      	ldr	r3, [pc, #8]	; (8005ddc <DMA1_Stream0_IRQHandler+0x70>)
 8005dd2:	701a      	strb	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20002bb2 	.word	0x20002bb2
 8005ddc:	20002bb1 	.word	0x20002bb1
 8005de0:	20000228 	.word	0x20000228

08005de4 <DMA1_Stream1_IRQHandler>:

/*
 * Function: DMA1_Stream1_IRQHandler
 */
void_t DMA1_Stream1_IRQHandler (void_t)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005de8:	4b19      	ldr	r3, [pc, #100]	; (8005e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d105      	bne.n	8005dfc <DMA1_Stream1_IRQHandler+0x18>
 8005df0:	4b18      	ldr	r3, [pc, #96]	; (8005e54 <DMA1_Stream1_IRQHandler+0x70>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	3301      	adds	r3, #1
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	4b16      	ldr	r3, [pc, #88]	; (8005e54 <DMA1_Stream1_IRQHandler+0x70>)
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8005e06:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_1] != NULL)
 8005e08:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <DMA1_Stream1_IRQHandler+0x74>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <DMA1_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_1]->hdma);
 8005e10:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <DMA1_Stream1_IRQHandler+0x74>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fb ff40 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8005e1c:	4b0c      	ldr	r3, [pc, #48]	; (8005e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <DMA1_Stream1_IRQHandler+0x4c>
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b08      	ldr	r3, [pc, #32]	; (8005e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8005e2e:	701a      	strb	r2, [r3, #0]
 8005e30:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <DMA1_Stream1_IRQHandler+0x6c>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <DMA1_Stream1_IRQHandler+0x68>
 8005e38:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <DMA1_Stream1_IRQHandler+0x70>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d005      	beq.n	8005e4c <DMA1_Stream1_IRQHandler+0x68>
 8005e40:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <DMA1_Stream1_IRQHandler+0x70>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	4b02      	ldr	r3, [pc, #8]	; (8005e54 <DMA1_Stream1_IRQHandler+0x70>)
 8005e4a:	701a      	strb	r2, [r3, #0]
}
 8005e4c:	bf00      	nop
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20002bb2 	.word	0x20002bb2
 8005e54:	20002bb1 	.word	0x20002bb1
 8005e58:	20000228 	.word	0x20000228

08005e5c <DMA1_Stream2_IRQHandler>:

/*
 * Function: DMA1_Stream2_IRQHandler
 */
void_t DMA1_Stream2_IRQHandler (void_t)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005e60:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <DMA1_Stream2_IRQHandler+0x18>
 8005e68:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <DMA1_Stream2_IRQHandler+0x70>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <DMA1_Stream2_IRQHandler+0x70>)
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8005e7e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_2] != NULL)
 8005e80:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <DMA1_Stream2_IRQHandler+0x74>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <DMA1_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_2]->hdma);
 8005e88:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <DMA1_Stream2_IRQHandler+0x74>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fb ff04 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8005e94:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <DMA1_Stream2_IRQHandler+0x4c>
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	4b07      	ldr	r3, [pc, #28]	; (8005ec8 <DMA1_Stream2_IRQHandler+0x6c>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <DMA1_Stream2_IRQHandler+0x68>
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <DMA1_Stream2_IRQHandler+0x70>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <DMA1_Stream2_IRQHandler+0x68>
 8005eb8:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <DMA1_Stream2_IRQHandler+0x70>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	4b02      	ldr	r3, [pc, #8]	; (8005ecc <DMA1_Stream2_IRQHandler+0x70>)
 8005ec2:	701a      	strb	r2, [r3, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20002bb2 	.word	0x20002bb2
 8005ecc:	20002bb1 	.word	0x20002bb1
 8005ed0:	20000228 	.word	0x20000228

08005ed4 <DMA1_Stream3_IRQHandler>:

/*
 * Function: DMA1_Stream3_IRQHandler
 */
void_t DMA1_Stream3_IRQHandler (void_t)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005ed8:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d105      	bne.n	8005eec <DMA1_Stream3_IRQHandler+0x18>
 8005ee0:	4b18      	ldr	r3, [pc, #96]	; (8005f44 <DMA1_Stream3_IRQHandler+0x70>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	4b16      	ldr	r3, [pc, #88]	; (8005f44 <DMA1_Stream3_IRQHandler+0x70>)
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8005ef6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_3] != NULL)
 8005ef8:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <DMA1_Stream3_IRQHandler+0x74>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <DMA1_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_3]->hdma);
 8005f00:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <DMA1_Stream3_IRQHandler+0x74>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fb fec8 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <DMA1_Stream3_IRQHandler+0x4c>
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <DMA1_Stream3_IRQHandler+0x6c>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d109      	bne.n	8005f3c <DMA1_Stream3_IRQHandler+0x68>
 8005f28:	4b06      	ldr	r3, [pc, #24]	; (8005f44 <DMA1_Stream3_IRQHandler+0x70>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <DMA1_Stream3_IRQHandler+0x68>
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <DMA1_Stream3_IRQHandler+0x70>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	4b02      	ldr	r3, [pc, #8]	; (8005f44 <DMA1_Stream3_IRQHandler+0x70>)
 8005f3a:	701a      	strb	r2, [r3, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20002bb2 	.word	0x20002bb2
 8005f44:	20002bb1 	.word	0x20002bb1
 8005f48:	20000228 	.word	0x20000228

08005f4c <DMA1_Stream4_IRQHandler>:

/*
 * Function: DMA1_Stream4_IRQHandler
 */
void_t DMA1_Stream4_IRQHandler (void_t)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005f50:	4b19      	ldr	r3, [pc, #100]	; (8005fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d105      	bne.n	8005f64 <DMA1_Stream4_IRQHandler+0x18>
 8005f58:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <DMA1_Stream4_IRQHandler+0x70>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	4b16      	ldr	r3, [pc, #88]	; (8005fbc <DMA1_Stream4_IRQHandler+0x70>)
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	4b14      	ldr	r3, [pc, #80]	; (8005fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8005f6e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_4] != NULL)
 8005f70:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <DMA1_Stream4_IRQHandler+0x74>)
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <DMA1_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_4]->hdma);
 8005f78:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <DMA1_Stream4_IRQHandler+0x74>)
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fb fe8c 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <DMA1_Stream4_IRQHandler+0x4c>
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	4b08      	ldr	r3, [pc, #32]	; (8005fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <DMA1_Stream4_IRQHandler+0x6c>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d109      	bne.n	8005fb4 <DMA1_Stream4_IRQHandler+0x68>
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <DMA1_Stream4_IRQHandler+0x70>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <DMA1_Stream4_IRQHandler+0x68>
 8005fa8:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <DMA1_Stream4_IRQHandler+0x70>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	4b02      	ldr	r3, [pc, #8]	; (8005fbc <DMA1_Stream4_IRQHandler+0x70>)
 8005fb2:	701a      	strb	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20002bb2 	.word	0x20002bb2
 8005fbc:	20002bb1 	.word	0x20002bb1
 8005fc0:	20000228 	.word	0x20000228

08005fc4 <DMA1_Stream5_IRQHandler>:

/*
 * Function: DMA1_Stream5_IRQHandler
 */
void_t DMA1_Stream5_IRQHandler (void_t)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u8_t idx = 0u;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8005fce:	4b28      	ldr	r3, [pc, #160]	; (8006070 <DMA1_Stream5_IRQHandler+0xac>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d105      	bne.n	8005fe2 <DMA1_Stream5_IRQHandler+0x1e>
 8005fd6:	4b27      	ldr	r3, [pc, #156]	; (8006074 <DMA1_Stream5_IRQHandler+0xb0>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	4b25      	ldr	r3, [pc, #148]	; (8006074 <DMA1_Stream5_IRQHandler+0xb0>)
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	4b23      	ldr	r3, [pc, #140]	; (8006070 <DMA1_Stream5_IRQHandler+0xac>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	4b21      	ldr	r3, [pc, #132]	; (8006070 <DMA1_Stream5_IRQHandler+0xac>)
 8005fec:	701a      	strb	r2, [r3, #0]

    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8005fee:	2300      	movs	r3, #0
 8005ff0:	71fb      	strb	r3, [r7, #7]
 8005ff2:	e017      	b.n	8006024 <DMA1_Stream5_IRQHandler+0x60>
    {
        if (dmaConfig[idx].dmaStream == DRV_DMA_1_STREAM_5)
 8005ff4:	79fa      	ldrb	r2, [r7, #7]
 8005ff6:	4920      	ldr	r1, [pc, #128]	; (8006078 <DMA1_Stream5_IRQHandler+0xb4>)
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	4413      	add	r3, r2
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	440b      	add	r3, r1
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b05      	cmp	r3, #5
 8006006:	d10a      	bne.n	800601e <DMA1_Stream5_IRQHandler+0x5a>
        {
            HAL_DMA_IRQHandler(&dmaConfig[idx].hdma);
 8006008:	79fa      	ldrb	r2, [r7, #7]
 800600a:	4613      	mov	r3, r2
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	4413      	add	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	4a19      	ldr	r2, [pc, #100]	; (8006078 <DMA1_Stream5_IRQHandler+0xb4>)
 8006014:	4413      	add	r3, r2
 8006016:	3304      	adds	r3, #4
 8006018:	4618      	mov	r0, r3
 800601a:	f7fb fe3f 	bl	8001c9c <HAL_DMA_IRQHandler>
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	3301      	adds	r3, #1
 8006022:	71fb      	strb	r3, [r7, #7]
 8006024:	79fa      	ldrb	r2, [r7, #7]
 8006026:	4b15      	ldr	r3, [pc, #84]	; (800607c <DMA1_Stream5_IRQHandler+0xb8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4915      	ldr	r1, [pc, #84]	; (8006080 <DMA1_Stream5_IRQHandler+0xbc>)
 800602c:	fba1 1303 	umull	r1, r3, r1, r3
 8006030:	09db      	lsrs	r3, r3, #7
 8006032:	429a      	cmp	r2, r3
 8006034:	d3de      	bcc.n	8005ff4 <DMA1_Stream5_IRQHandler+0x30>
        {
            // Continue.
        }
    }

    GOS_ISR_EXIT
 8006036:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <DMA1_Stream5_IRQHandler+0xac>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <DMA1_Stream5_IRQHandler+0x86>
 800603e:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <DMA1_Stream5_IRQHandler+0xac>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	3b01      	subs	r3, #1
 8006044:	b2da      	uxtb	r2, r3
 8006046:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <DMA1_Stream5_IRQHandler+0xac>)
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	4b09      	ldr	r3, [pc, #36]	; (8006070 <DMA1_Stream5_IRQHandler+0xac>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <DMA1_Stream5_IRQHandler+0xa2>
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <DMA1_Stream5_IRQHandler+0xb0>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <DMA1_Stream5_IRQHandler+0xa2>
 800605a:	4b06      	ldr	r3, [pc, #24]	; (8006074 <DMA1_Stream5_IRQHandler+0xb0>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	3b01      	subs	r3, #1
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b04      	ldr	r3, [pc, #16]	; (8006074 <DMA1_Stream5_IRQHandler+0xb0>)
 8006064:	701a      	strb	r2, [r3, #0]
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20002bb2 	.word	0x20002bb2
 8006074:	20002bb1 	.word	0x20002bb1
 8006078:	2000008c 	.word	0x2000008c
 800607c:	20000224 	.word	0x20000224
 8006080:	f0f0f0f1 	.word	0xf0f0f0f1

08006084 <DMA1_Stream6_IRQHandler>:

/*
 * Function: DMA1_Stream6_IRQHandler
 */
void_t DMA1_Stream6_IRQHandler (void_t)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8006088:	4b19      	ldr	r3, [pc, #100]	; (80060f0 <DMA1_Stream6_IRQHandler+0x6c>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <DMA1_Stream6_IRQHandler+0x18>
 8006090:	4b18      	ldr	r3, [pc, #96]	; (80060f4 <DMA1_Stream6_IRQHandler+0x70>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	b2da      	uxtb	r2, r3
 8006098:	4b16      	ldr	r3, [pc, #88]	; (80060f4 <DMA1_Stream6_IRQHandler+0x70>)
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <DMA1_Stream6_IRQHandler+0x6c>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	4b12      	ldr	r3, [pc, #72]	; (80060f0 <DMA1_Stream6_IRQHandler+0x6c>)
 80060a6:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_6] != NULL)
 80060a8:	4b13      	ldr	r3, [pc, #76]	; (80060f8 <DMA1_Stream6_IRQHandler+0x74>)
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <DMA1_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_6]->hdma);
 80060b0:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <DMA1_Stream6_IRQHandler+0x74>)
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fb fdf0 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80060bc:	4b0c      	ldr	r3, [pc, #48]	; (80060f0 <DMA1_Stream6_IRQHandler+0x6c>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <DMA1_Stream6_IRQHandler+0x4c>
 80060c4:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <DMA1_Stream6_IRQHandler+0x6c>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <DMA1_Stream6_IRQHandler+0x6c>)
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	4b07      	ldr	r3, [pc, #28]	; (80060f0 <DMA1_Stream6_IRQHandler+0x6c>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d109      	bne.n	80060ec <DMA1_Stream6_IRQHandler+0x68>
 80060d8:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <DMA1_Stream6_IRQHandler+0x70>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <DMA1_Stream6_IRQHandler+0x68>
 80060e0:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <DMA1_Stream6_IRQHandler+0x70>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	4b02      	ldr	r3, [pc, #8]	; (80060f4 <DMA1_Stream6_IRQHandler+0x70>)
 80060ea:	701a      	strb	r2, [r3, #0]
}
 80060ec:	bf00      	nop
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20002bb2 	.word	0x20002bb2
 80060f4:	20002bb1 	.word	0x20002bb1
 80060f8:	20000228 	.word	0x20000228

080060fc <DMA1_Stream7_IRQHandler>:

/*
 * Function: DMA1_Stream7_IRQHandler
 */
void_t DMA1_Stream7_IRQHandler (void_t)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8006100:	4b19      	ldr	r3, [pc, #100]	; (8006168 <DMA1_Stream7_IRQHandler+0x6c>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d105      	bne.n	8006114 <DMA1_Stream7_IRQHandler+0x18>
 8006108:	4b18      	ldr	r3, [pc, #96]	; (800616c <DMA1_Stream7_IRQHandler+0x70>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	3301      	adds	r3, #1
 800610e:	b2da      	uxtb	r2, r3
 8006110:	4b16      	ldr	r3, [pc, #88]	; (800616c <DMA1_Stream7_IRQHandler+0x70>)
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	4b14      	ldr	r3, [pc, #80]	; (8006168 <DMA1_Stream7_IRQHandler+0x6c>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	3301      	adds	r3, #1
 800611a:	b2da      	uxtb	r2, r3
 800611c:	4b12      	ldr	r3, [pc, #72]	; (8006168 <DMA1_Stream7_IRQHandler+0x6c>)
 800611e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_7] != NULL)
 8006120:	4b13      	ldr	r3, [pc, #76]	; (8006170 <DMA1_Stream7_IRQHandler+0x74>)
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <DMA1_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_7]->hdma);
 8006128:	4b11      	ldr	r3, [pc, #68]	; (8006170 <DMA1_Stream7_IRQHandler+0x74>)
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	3304      	adds	r3, #4
 800612e:	4618      	mov	r0, r3
 8006130:	f7fb fdb4 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8006134:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <DMA1_Stream7_IRQHandler+0x6c>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <DMA1_Stream7_IRQHandler+0x4c>
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <DMA1_Stream7_IRQHandler+0x6c>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	3b01      	subs	r3, #1
 8006142:	b2da      	uxtb	r2, r3
 8006144:	4b08      	ldr	r3, [pc, #32]	; (8006168 <DMA1_Stream7_IRQHandler+0x6c>)
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	4b07      	ldr	r3, [pc, #28]	; (8006168 <DMA1_Stream7_IRQHandler+0x6c>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <DMA1_Stream7_IRQHandler+0x68>
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <DMA1_Stream7_IRQHandler+0x70>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <DMA1_Stream7_IRQHandler+0x68>
 8006158:	4b04      	ldr	r3, [pc, #16]	; (800616c <DMA1_Stream7_IRQHandler+0x70>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	3b01      	subs	r3, #1
 800615e:	b2da      	uxtb	r2, r3
 8006160:	4b02      	ldr	r3, [pc, #8]	; (800616c <DMA1_Stream7_IRQHandler+0x70>)
 8006162:	701a      	strb	r2, [r3, #0]
}
 8006164:	bf00      	nop
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20002bb2 	.word	0x20002bb2
 800616c:	20002bb1 	.word	0x20002bb1
 8006170:	20000228 	.word	0x20000228

08006174 <DMA2_Stream0_IRQHandler>:

/*
 * Function: DMA2_Stream0_IRQHandler
 */
void_t DMA2_Stream0_IRQHandler (void_t)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8006178:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <DMA2_Stream0_IRQHandler+0x6c>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d105      	bne.n	800618c <DMA2_Stream0_IRQHandler+0x18>
 8006180:	4b18      	ldr	r3, [pc, #96]	; (80061e4 <DMA2_Stream0_IRQHandler+0x70>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	3301      	adds	r3, #1
 8006186:	b2da      	uxtb	r2, r3
 8006188:	4b16      	ldr	r3, [pc, #88]	; (80061e4 <DMA2_Stream0_IRQHandler+0x70>)
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <DMA2_Stream0_IRQHandler+0x6c>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	3301      	adds	r3, #1
 8006192:	b2da      	uxtb	r2, r3
 8006194:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <DMA2_Stream0_IRQHandler+0x6c>)
 8006196:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_0] != NULL)
 8006198:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <DMA2_Stream0_IRQHandler+0x74>)
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <DMA2_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_0]->hdma);
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <DMA2_Stream0_IRQHandler+0x74>)
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fb fd78 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80061ac:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <DMA2_Stream0_IRQHandler+0x6c>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <DMA2_Stream0_IRQHandler+0x4c>
 80061b4:	4b0a      	ldr	r3, [pc, #40]	; (80061e0 <DMA2_Stream0_IRQHandler+0x6c>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	4b08      	ldr	r3, [pc, #32]	; (80061e0 <DMA2_Stream0_IRQHandler+0x6c>)
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <DMA2_Stream0_IRQHandler+0x6c>)
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d109      	bne.n	80061dc <DMA2_Stream0_IRQHandler+0x68>
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <DMA2_Stream0_IRQHandler+0x70>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <DMA2_Stream0_IRQHandler+0x68>
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <DMA2_Stream0_IRQHandler+0x70>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	4b02      	ldr	r3, [pc, #8]	; (80061e4 <DMA2_Stream0_IRQHandler+0x70>)
 80061da:	701a      	strb	r2, [r3, #0]
}
 80061dc:	bf00      	nop
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20002bb2 	.word	0x20002bb2
 80061e4:	20002bb1 	.word	0x20002bb1
 80061e8:	20000228 	.word	0x20000228

080061ec <DMA2_Stream1_IRQHandler>:

/*
 * Function: DMA2_Stream1_IRQHandler
 */
void_t DMA2_Stream1_IRQHandler (void_t)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80061f0:	4b19      	ldr	r3, [pc, #100]	; (8006258 <DMA2_Stream1_IRQHandler+0x6c>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d105      	bne.n	8006204 <DMA2_Stream1_IRQHandler+0x18>
 80061f8:	4b18      	ldr	r3, [pc, #96]	; (800625c <DMA2_Stream1_IRQHandler+0x70>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	4b16      	ldr	r3, [pc, #88]	; (800625c <DMA2_Stream1_IRQHandler+0x70>)
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	4b14      	ldr	r3, [pc, #80]	; (8006258 <DMA2_Stream1_IRQHandler+0x6c>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	3301      	adds	r3, #1
 800620a:	b2da      	uxtb	r2, r3
 800620c:	4b12      	ldr	r3, [pc, #72]	; (8006258 <DMA2_Stream1_IRQHandler+0x6c>)
 800620e:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_1] != NULL)
 8006210:	4b13      	ldr	r3, [pc, #76]	; (8006260 <DMA2_Stream1_IRQHandler+0x74>)
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <DMA2_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_1]->hdma);
 8006218:	4b11      	ldr	r3, [pc, #68]	; (8006260 <DMA2_Stream1_IRQHandler+0x74>)
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	3304      	adds	r3, #4
 800621e:	4618      	mov	r0, r3
 8006220:	f7fb fd3c 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8006224:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <DMA2_Stream1_IRQHandler+0x6c>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <DMA2_Stream1_IRQHandler+0x4c>
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <DMA2_Stream1_IRQHandler+0x6c>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	3b01      	subs	r3, #1
 8006232:	b2da      	uxtb	r2, r3
 8006234:	4b08      	ldr	r3, [pc, #32]	; (8006258 <DMA2_Stream1_IRQHandler+0x6c>)
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	4b07      	ldr	r3, [pc, #28]	; (8006258 <DMA2_Stream1_IRQHandler+0x6c>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d109      	bne.n	8006254 <DMA2_Stream1_IRQHandler+0x68>
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <DMA2_Stream1_IRQHandler+0x70>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <DMA2_Stream1_IRQHandler+0x68>
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <DMA2_Stream1_IRQHandler+0x70>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	3b01      	subs	r3, #1
 800624e:	b2da      	uxtb	r2, r3
 8006250:	4b02      	ldr	r3, [pc, #8]	; (800625c <DMA2_Stream1_IRQHandler+0x70>)
 8006252:	701a      	strb	r2, [r3, #0]
}
 8006254:	bf00      	nop
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20002bb2 	.word	0x20002bb2
 800625c:	20002bb1 	.word	0x20002bb1
 8006260:	20000228 	.word	0x20000228

08006264 <DMA2_Stream2_IRQHandler>:

/*
 * Function: DMA2_Stream2_IRQHandler
 */
void_t DMA2_Stream2_IRQHandler (void_t)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8006268:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <DMA2_Stream2_IRQHandler+0x6c>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d105      	bne.n	800627c <DMA2_Stream2_IRQHandler+0x18>
 8006270:	4b18      	ldr	r3, [pc, #96]	; (80062d4 <DMA2_Stream2_IRQHandler+0x70>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	b2da      	uxtb	r2, r3
 8006278:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <DMA2_Stream2_IRQHandler+0x70>)
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <DMA2_Stream2_IRQHandler+0x6c>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	3301      	adds	r3, #1
 8006282:	b2da      	uxtb	r2, r3
 8006284:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <DMA2_Stream2_IRQHandler+0x6c>)
 8006286:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_2] != NULL)
 8006288:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <DMA2_Stream2_IRQHandler+0x74>)
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <DMA2_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_2]->hdma);
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <DMA2_Stream2_IRQHandler+0x74>)
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	3304      	adds	r3, #4
 8006296:	4618      	mov	r0, r3
 8006298:	f7fb fd00 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <DMA2_Stream2_IRQHandler+0x6c>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <DMA2_Stream2_IRQHandler+0x4c>
 80062a4:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <DMA2_Stream2_IRQHandler+0x6c>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <DMA2_Stream2_IRQHandler+0x6c>)
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <DMA2_Stream2_IRQHandler+0x6c>)
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <DMA2_Stream2_IRQHandler+0x68>
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <DMA2_Stream2_IRQHandler+0x70>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <DMA2_Stream2_IRQHandler+0x68>
 80062c0:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <DMA2_Stream2_IRQHandler+0x70>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	4b02      	ldr	r3, [pc, #8]	; (80062d4 <DMA2_Stream2_IRQHandler+0x70>)
 80062ca:	701a      	strb	r2, [r3, #0]
}
 80062cc:	bf00      	nop
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20002bb2 	.word	0x20002bb2
 80062d4:	20002bb1 	.word	0x20002bb1
 80062d8:	20000228 	.word	0x20000228

080062dc <DMA2_Stream3_IRQHandler>:

/*
 * Function: DMA2_Stream3_IRQHandler
 */
void_t DMA2_Stream3_IRQHandler (void_t)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80062e0:	4b19      	ldr	r3, [pc, #100]	; (8006348 <DMA2_Stream3_IRQHandler+0x6c>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d105      	bne.n	80062f4 <DMA2_Stream3_IRQHandler+0x18>
 80062e8:	4b18      	ldr	r3, [pc, #96]	; (800634c <DMA2_Stream3_IRQHandler+0x70>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	3301      	adds	r3, #1
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	4b16      	ldr	r3, [pc, #88]	; (800634c <DMA2_Stream3_IRQHandler+0x70>)
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	4b14      	ldr	r3, [pc, #80]	; (8006348 <DMA2_Stream3_IRQHandler+0x6c>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	3301      	adds	r3, #1
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	4b12      	ldr	r3, [pc, #72]	; (8006348 <DMA2_Stream3_IRQHandler+0x6c>)
 80062fe:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_3] != NULL)
 8006300:	4b13      	ldr	r3, [pc, #76]	; (8006350 <DMA2_Stream3_IRQHandler+0x74>)
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <DMA2_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_3]->hdma);
 8006308:	4b11      	ldr	r3, [pc, #68]	; (8006350 <DMA2_Stream3_IRQHandler+0x74>)
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	3304      	adds	r3, #4
 800630e:	4618      	mov	r0, r3
 8006310:	f7fb fcc4 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8006314:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <DMA2_Stream3_IRQHandler+0x6c>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <DMA2_Stream3_IRQHandler+0x4c>
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <DMA2_Stream3_IRQHandler+0x6c>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	3b01      	subs	r3, #1
 8006322:	b2da      	uxtb	r2, r3
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <DMA2_Stream3_IRQHandler+0x6c>)
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <DMA2_Stream3_IRQHandler+0x6c>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d109      	bne.n	8006344 <DMA2_Stream3_IRQHandler+0x68>
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <DMA2_Stream3_IRQHandler+0x70>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <DMA2_Stream3_IRQHandler+0x68>
 8006338:	4b04      	ldr	r3, [pc, #16]	; (800634c <DMA2_Stream3_IRQHandler+0x70>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	3b01      	subs	r3, #1
 800633e:	b2da      	uxtb	r2, r3
 8006340:	4b02      	ldr	r3, [pc, #8]	; (800634c <DMA2_Stream3_IRQHandler+0x70>)
 8006342:	701a      	strb	r2, [r3, #0]
}
 8006344:	bf00      	nop
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20002bb2 	.word	0x20002bb2
 800634c:	20002bb1 	.word	0x20002bb1
 8006350:	20000228 	.word	0x20000228

08006354 <DMA2_Stream4_IRQHandler>:

/*
 * Function: DMA2_Stream4_IRQHandler
 */
void_t DMA2_Stream4_IRQHandler (void_t)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8006358:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <DMA2_Stream4_IRQHandler+0x6c>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <DMA2_Stream4_IRQHandler+0x18>
 8006360:	4b18      	ldr	r3, [pc, #96]	; (80063c4 <DMA2_Stream4_IRQHandler+0x70>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	3301      	adds	r3, #1
 8006366:	b2da      	uxtb	r2, r3
 8006368:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <DMA2_Stream4_IRQHandler+0x70>)
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <DMA2_Stream4_IRQHandler+0x6c>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	b2da      	uxtb	r2, r3
 8006374:	4b12      	ldr	r3, [pc, #72]	; (80063c0 <DMA2_Stream4_IRQHandler+0x6c>)
 8006376:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_4] != NULL)
 8006378:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <DMA2_Stream4_IRQHandler+0x74>)
 800637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <DMA2_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_4]->hdma);
 8006380:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <DMA2_Stream4_IRQHandler+0x74>)
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	3304      	adds	r3, #4
 8006386:	4618      	mov	r0, r3
 8006388:	f7fb fc88 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800638c:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <DMA2_Stream4_IRQHandler+0x6c>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <DMA2_Stream4_IRQHandler+0x4c>
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <DMA2_Stream4_IRQHandler+0x6c>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	3b01      	subs	r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <DMA2_Stream4_IRQHandler+0x6c>)
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <DMA2_Stream4_IRQHandler+0x6c>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d109      	bne.n	80063bc <DMA2_Stream4_IRQHandler+0x68>
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <DMA2_Stream4_IRQHandler+0x70>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <DMA2_Stream4_IRQHandler+0x68>
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <DMA2_Stream4_IRQHandler+0x70>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	4b02      	ldr	r3, [pc, #8]	; (80063c4 <DMA2_Stream4_IRQHandler+0x70>)
 80063ba:	701a      	strb	r2, [r3, #0]
}
 80063bc:	bf00      	nop
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	20002bb2 	.word	0x20002bb2
 80063c4:	20002bb1 	.word	0x20002bb1
 80063c8:	20000228 	.word	0x20000228

080063cc <DMA2_Stream5_IRQHandler>:

/*
 * Function: DMA2_Stream5_IRQHandler
 */
void_t DMA2_Stream5_IRQHandler (void_t)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80063d0:	4b19      	ldr	r3, [pc, #100]	; (8006438 <DMA2_Stream5_IRQHandler+0x6c>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d105      	bne.n	80063e4 <DMA2_Stream5_IRQHandler+0x18>
 80063d8:	4b18      	ldr	r3, [pc, #96]	; (800643c <DMA2_Stream5_IRQHandler+0x70>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	4b16      	ldr	r3, [pc, #88]	; (800643c <DMA2_Stream5_IRQHandler+0x70>)
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	4b14      	ldr	r3, [pc, #80]	; (8006438 <DMA2_Stream5_IRQHandler+0x6c>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	4b12      	ldr	r3, [pc, #72]	; (8006438 <DMA2_Stream5_IRQHandler+0x6c>)
 80063ee:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_5] != NULL)
 80063f0:	4b13      	ldr	r3, [pc, #76]	; (8006440 <DMA2_Stream5_IRQHandler+0x74>)
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <DMA2_Stream5_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_5]->hdma);
 80063f8:	4b11      	ldr	r3, [pc, #68]	; (8006440 <DMA2_Stream5_IRQHandler+0x74>)
 80063fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fc:	3304      	adds	r3, #4
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fb fc4c 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8006404:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <DMA2_Stream5_IRQHandler+0x6c>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <DMA2_Stream5_IRQHandler+0x4c>
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <DMA2_Stream5_IRQHandler+0x6c>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	3b01      	subs	r3, #1
 8006412:	b2da      	uxtb	r2, r3
 8006414:	4b08      	ldr	r3, [pc, #32]	; (8006438 <DMA2_Stream5_IRQHandler+0x6c>)
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <DMA2_Stream5_IRQHandler+0x6c>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d109      	bne.n	8006434 <DMA2_Stream5_IRQHandler+0x68>
 8006420:	4b06      	ldr	r3, [pc, #24]	; (800643c <DMA2_Stream5_IRQHandler+0x70>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <DMA2_Stream5_IRQHandler+0x68>
 8006428:	4b04      	ldr	r3, [pc, #16]	; (800643c <DMA2_Stream5_IRQHandler+0x70>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	3b01      	subs	r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	4b02      	ldr	r3, [pc, #8]	; (800643c <DMA2_Stream5_IRQHandler+0x70>)
 8006432:	701a      	strb	r2, [r3, #0]
}
 8006434:	bf00      	nop
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20002bb2 	.word	0x20002bb2
 800643c:	20002bb1 	.word	0x20002bb1
 8006440:	20000228 	.word	0x20000228

08006444 <DMA2_Stream6_IRQHandler>:

/*
 * Function: DMA2_Stream6_IRQHandler
 */
void_t DMA2_Stream6_IRQHandler (void_t)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8006448:	4b19      	ldr	r3, [pc, #100]	; (80064b0 <DMA2_Stream6_IRQHandler+0x6c>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d105      	bne.n	800645c <DMA2_Stream6_IRQHandler+0x18>
 8006450:	4b18      	ldr	r3, [pc, #96]	; (80064b4 <DMA2_Stream6_IRQHandler+0x70>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <DMA2_Stream6_IRQHandler+0x70>)
 800645a:	701a      	strb	r2, [r3, #0]
 800645c:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <DMA2_Stream6_IRQHandler+0x6c>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	4b12      	ldr	r3, [pc, #72]	; (80064b0 <DMA2_Stream6_IRQHandler+0x6c>)
 8006466:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_6] != NULL)
 8006468:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <DMA2_Stream6_IRQHandler+0x74>)
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <DMA2_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_6]->hdma);
 8006470:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <DMA2_Stream6_IRQHandler+0x74>)
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	3304      	adds	r3, #4
 8006476:	4618      	mov	r0, r3
 8006478:	f7fb fc10 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 800647c:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <DMA2_Stream6_IRQHandler+0x6c>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <DMA2_Stream6_IRQHandler+0x4c>
 8006484:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <DMA2_Stream6_IRQHandler+0x6c>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	3b01      	subs	r3, #1
 800648a:	b2da      	uxtb	r2, r3
 800648c:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <DMA2_Stream6_IRQHandler+0x6c>)
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <DMA2_Stream6_IRQHandler+0x6c>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <DMA2_Stream6_IRQHandler+0x68>
 8006498:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <DMA2_Stream6_IRQHandler+0x70>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <DMA2_Stream6_IRQHandler+0x68>
 80064a0:	4b04      	ldr	r3, [pc, #16]	; (80064b4 <DMA2_Stream6_IRQHandler+0x70>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	4b02      	ldr	r3, [pc, #8]	; (80064b4 <DMA2_Stream6_IRQHandler+0x70>)
 80064aa:	701a      	strb	r2, [r3, #0]
}
 80064ac:	bf00      	nop
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20002bb2 	.word	0x20002bb2
 80064b4:	20002bb1 	.word	0x20002bb1
 80064b8:	20000228 	.word	0x20000228

080064bc <DMA2_Stream7_IRQHandler>:

/*
 * Function: DMA2_Stream7_IRQHandler
 */
void_t DMA2_Stream7_IRQHandler (void_t)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80064c0:	4b19      	ldr	r3, [pc, #100]	; (8006528 <DMA2_Stream7_IRQHandler+0x6c>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d105      	bne.n	80064d4 <DMA2_Stream7_IRQHandler+0x18>
 80064c8:	4b18      	ldr	r3, [pc, #96]	; (800652c <DMA2_Stream7_IRQHandler+0x70>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	4b16      	ldr	r3, [pc, #88]	; (800652c <DMA2_Stream7_IRQHandler+0x70>)
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	4b14      	ldr	r3, [pc, #80]	; (8006528 <DMA2_Stream7_IRQHandler+0x6c>)
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	3301      	adds	r3, #1
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	4b12      	ldr	r3, [pc, #72]	; (8006528 <DMA2_Stream7_IRQHandler+0x6c>)
 80064de:	701a      	strb	r2, [r3, #0]


    if (pDMADescriptorLut[DRV_DMA_2_STREAM_7] != NULL)
 80064e0:	4b13      	ldr	r3, [pc, #76]	; (8006530 <DMA2_Stream7_IRQHandler+0x74>)
 80064e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <DMA2_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_7]->hdma);
 80064e8:	4b11      	ldr	r3, [pc, #68]	; (8006530 <DMA2_Stream7_IRQHandler+0x74>)
 80064ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ec:	3304      	adds	r3, #4
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fb fbd4 	bl	8001c9c <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80064f4:	4b0c      	ldr	r3, [pc, #48]	; (8006528 <DMA2_Stream7_IRQHandler+0x6c>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <DMA2_Stream7_IRQHandler+0x4c>
 80064fc:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <DMA2_Stream7_IRQHandler+0x6c>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	3b01      	subs	r3, #1
 8006502:	b2da      	uxtb	r2, r3
 8006504:	4b08      	ldr	r3, [pc, #32]	; (8006528 <DMA2_Stream7_IRQHandler+0x6c>)
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	4b07      	ldr	r3, [pc, #28]	; (8006528 <DMA2_Stream7_IRQHandler+0x6c>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d109      	bne.n	8006524 <DMA2_Stream7_IRQHandler+0x68>
 8006510:	4b06      	ldr	r3, [pc, #24]	; (800652c <DMA2_Stream7_IRQHandler+0x70>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <DMA2_Stream7_IRQHandler+0x68>
 8006518:	4b04      	ldr	r3, [pc, #16]	; (800652c <DMA2_Stream7_IRQHandler+0x70>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	3b01      	subs	r3, #1
 800651e:	b2da      	uxtb	r2, r3
 8006520:	4b02      	ldr	r3, [pc, #8]	; (800652c <DMA2_Stream7_IRQHandler+0x70>)
 8006522:	701a      	strb	r2, [r3, #0]
}
 8006524:	bf00      	nop
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20002bb2 	.word	0x20002bb2
 800652c:	20002bb1 	.word	0x20002bb1
 8006530:	20000228 	.word	0x20000228

08006534 <drv_gpioInit>:

/*
 * Function: drv_gpioInit
 */
gos_result_t drv_gpioInit (void_t)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gpioInitResult = GOS_SUCCESS;
 800653a:	2355      	movs	r3, #85	; 0x55
 800653c:	71fb      	strb	r3, [r7, #7]
    u8_t         gpioIdx        = 0u;
 800653e:	2300      	movs	r3, #0
 8006540:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (gpioConfig != NULL)
    {
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 8006542:	2300      	movs	r3, #0
 8006544:	71bb      	strb	r3, [r7, #6]
 8006546:	e00e      	b.n	8006566 <drv_gpioInit+0x32>
        {
            GOS_CONCAT_RESULT(gpioInitResult, drv_gpioInitPin(gpioIdx));
 8006548:	79fb      	ldrb	r3, [r7, #7]
 800654a:	2b55      	cmp	r3, #85	; 0x55
 800654c:	d106      	bne.n	800655c <drv_gpioInit+0x28>
 800654e:	79bb      	ldrb	r3, [r7, #6]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f81b 	bl	800658c <drv_gpioInitPin>
 8006556:	4603      	mov	r3, r0
 8006558:	71fb      	strb	r3, [r7, #7]
 800655a:	e001      	b.n	8006560 <drv_gpioInit+0x2c>
 800655c:	23ae      	movs	r3, #174	; 0xae
 800655e:	71fb      	strb	r3, [r7, #7]
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 8006560:	79bb      	ldrb	r3, [r7, #6]
 8006562:	3301      	adds	r3, #1
 8006564:	71bb      	strb	r3, [r7, #6]
 8006566:	79ba      	ldrb	r2, [r7, #6]
 8006568:	4b06      	ldr	r3, [pc, #24]	; (8006584 <drv_gpioInit+0x50>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4906      	ldr	r1, [pc, #24]	; (8006588 <drv_gpioInit+0x54>)
 800656e:	fba1 1303 	umull	r1, r3, r1, r3
 8006572:	091b      	lsrs	r3, r3, #4
 8006574:	429a      	cmp	r2, r3
 8006576:	d3e7      	bcc.n	8006548 <drv_gpioInit+0x14>
    else
    {
        // Configuration array is NULL pointer.
    }

    return gpioInitResult;
 8006578:	79fb      	ldrb	r3, [r7, #7]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	2000026c 	.word	0x2000026c
 8006588:	aaaaaaab 	.word	0xaaaaaaab

0800658c <drv_gpioInitPin>:

/*
 * Function: drv_gpioInitPin
 */
gos_result_t drv_gpioInitPin (u8_t pinIndex)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 8006596:	23ae      	movs	r3, #174	; 0xae
 8006598:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 800659a:	f107 0308 	add.w	r3, r7, #8
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	605a      	str	r2, [r3, #4]
 80065a4:	609a      	str	r2, [r3, #8]
 80065a6:	60da      	str	r2, [r3, #12]
 80065a8:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pinIndex < (gpioConfigSize / sizeof(drv_gpioDescriptor_t)))
 80065aa:	79fa      	ldrb	r2, [r7, #7]
 80065ac:	4b27      	ldr	r3, [pc, #156]	; (800664c <drv_gpioInitPin+0xc0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4927      	ldr	r1, [pc, #156]	; (8006650 <drv_gpioInitPin+0xc4>)
 80065b2:	fba1 1303 	umull	r1, r3, r1, r3
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d241      	bcs.n	8006640 <drv_gpioInitPin+0xb4>
    {
        gpioInit.Pin       = gpioConfig[pinIndex].pin;
 80065bc:	79fa      	ldrb	r2, [r7, #7]
 80065be:	4925      	ldr	r1, [pc, #148]	; (8006654 <drv_gpioInitPin+0xc8>)
 80065c0:	4613      	mov	r3, r2
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	4413      	add	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	440b      	add	r3, r1
 80065ca:	3304      	adds	r3, #4
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = gpioConfig[pinIndex].mode;
 80065d0:	79fa      	ldrb	r2, [r7, #7]
 80065d2:	4920      	ldr	r1, [pc, #128]	; (8006654 <drv_gpioInitPin+0xc8>)
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4413      	add	r3, r2
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	440b      	add	r3, r1
 80065de:	3308      	adds	r3, #8
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = gpioConfig[pinIndex].pull;
 80065e4:	79fa      	ldrb	r2, [r7, #7]
 80065e6:	491b      	ldr	r1, [pc, #108]	; (8006654 <drv_gpioInitPin+0xc8>)
 80065e8:	4613      	mov	r3, r2
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	4413      	add	r3, r2
 80065ee:	00db      	lsls	r3, r3, #3
 80065f0:	440b      	add	r3, r1
 80065f2:	3310      	adds	r3, #16
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = gpioConfig[pinIndex].speed;
 80065f8:	79fa      	ldrb	r2, [r7, #7]
 80065fa:	4916      	ldr	r1, [pc, #88]	; (8006654 <drv_gpioInitPin+0xc8>)
 80065fc:	4613      	mov	r3, r2
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	4413      	add	r3, r2
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	440b      	add	r3, r1
 8006606:	330c      	adds	r3, #12
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = gpioConfig[pinIndex].alternate;
 800660c:	79fa      	ldrb	r2, [r7, #7]
 800660e:	4911      	ldr	r1, [pc, #68]	; (8006654 <drv_gpioInitPin+0xc8>)
 8006610:	4613      	mov	r3, r2
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	4413      	add	r3, r2
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	440b      	add	r3, r1
 800661a:	3314      	adds	r3, #20
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	61bb      	str	r3, [r7, #24]

        HAL_GPIO_Init(gpioConfig[pinIndex].port, &gpioInit);
 8006620:	79fa      	ldrb	r2, [r7, #7]
 8006622:	490c      	ldr	r1, [pc, #48]	; (8006654 <drv_gpioInitPin+0xc8>)
 8006624:	4613      	mov	r3, r2
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	4413      	add	r3, r2
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	440b      	add	r3, r1
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f107 0208 	add.w	r2, r7, #8
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7fc f88e 	bl	8002758 <HAL_GPIO_Init>

        gpioInitPinResult = GOS_SUCCESS;
 800663c:	2355      	movs	r3, #85	; 0x55
 800663e:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Index error.
    }

    return gpioInitPinResult;
 8006640:	7ffb      	ldrb	r3, [r7, #31]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	2000026c 	.word	0x2000026c
 8006650:	aaaaaaab 	.word	0xaaaaaaab
 8006654:	080144d8 	.word	0x080144d8

08006658 <drv_gpioTgglePin>:

/*
 * Function: drv_gpioTgglePin
 */
gos_result_t drv_gpioTgglePin (u8_t pinIndex)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t gpioTogglePinResult = GOS_ERROR;
 8006662:	23ae      	movs	r3, #174	; 0xae
 8006664:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t))
 8006666:	79fa      	ldrb	r2, [r7, #7]
 8006668:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <drv_gpioTgglePin+0x58>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4911      	ldr	r1, [pc, #68]	; (80066b4 <drv_gpioTgglePin+0x5c>)
 800666e:	fba1 1303 	umull	r1, r3, r1, r3
 8006672:	091b      	lsrs	r3, r3, #4
 8006674:	429a      	cmp	r2, r3
 8006676:	d215      	bcs.n	80066a4 <drv_gpioTgglePin+0x4c>
    {
        HAL_GPIO_TogglePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin);
 8006678:	79fa      	ldrb	r2, [r7, #7]
 800667a:	490f      	ldr	r1, [pc, #60]	; (80066b8 <drv_gpioTgglePin+0x60>)
 800667c:	4613      	mov	r3, r2
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	4413      	add	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	440b      	add	r3, r1
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	79fa      	ldrb	r2, [r7, #7]
 800668a:	490b      	ldr	r1, [pc, #44]	; (80066b8 <drv_gpioTgglePin+0x60>)
 800668c:	4613      	mov	r3, r2
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	4413      	add	r3, r2
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	440b      	add	r3, r1
 8006696:	3304      	adds	r3, #4
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	4619      	mov	r1, r3
 800669c:	f7fc f9f0 	bl	8002a80 <HAL_GPIO_TogglePin>
        gpioTogglePinResult = GOS_SUCCESS;
 80066a0:	2355      	movs	r3, #85	; 0x55
 80066a2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioTogglePinResult;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	2000026c 	.word	0x2000026c
 80066b4:	aaaaaaab 	.word	0xaaaaaaab
 80066b8:	080144d8 	.word	0x080144d8

080066bc <EXTI9_5_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI9_5_IRQHandler (void_t)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80066c0:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <EXTI9_5_IRQHandler+0x7c>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <EXTI9_5_IRQHandler+0x18>
 80066c8:	4b1c      	ldr	r3, [pc, #112]	; (800673c <EXTI9_5_IRQHandler+0x80>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	3301      	adds	r3, #1
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <EXTI9_5_IRQHandler+0x80>)
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	4b18      	ldr	r3, [pc, #96]	; (8006738 <EXTI9_5_IRQHandler+0x7c>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	3301      	adds	r3, #1
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	4b16      	ldr	r3, [pc, #88]	; (8006738 <EXTI9_5_IRQHandler+0x7c>)
 80066de:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80066e0:	2020      	movs	r0, #32
 80066e2:	f7fc f9e9 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80066e6:	2040      	movs	r0, #64	; 0x40
 80066e8:	f7fc f9e6 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80066ec:	2080      	movs	r0, #128	; 0x80
 80066ee:	f7fc f9e3 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80066f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80066f6:	f7fc f9df 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80066fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80066fe:	f7fc f9db 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 8006702:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <EXTI9_5_IRQHandler+0x7c>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <EXTI9_5_IRQHandler+0x5a>
 800670a:	4b0b      	ldr	r3, [pc, #44]	; (8006738 <EXTI9_5_IRQHandler+0x7c>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	3b01      	subs	r3, #1
 8006710:	b2da      	uxtb	r2, r3
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <EXTI9_5_IRQHandler+0x7c>)
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <EXTI9_5_IRQHandler+0x7c>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <EXTI9_5_IRQHandler+0x76>
 800671e:	4b07      	ldr	r3, [pc, #28]	; (800673c <EXTI9_5_IRQHandler+0x80>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <EXTI9_5_IRQHandler+0x76>
 8006726:	4b05      	ldr	r3, [pc, #20]	; (800673c <EXTI9_5_IRQHandler+0x80>)
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	3b01      	subs	r3, #1
 800672c:	b2da      	uxtb	r2, r3
 800672e:	4b03      	ldr	r3, [pc, #12]	; (800673c <EXTI9_5_IRQHandler+0x80>)
 8006730:	701a      	strb	r2, [r3, #0]
}
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20002bb2 	.word	0x20002bb2
 800673c:	20002bb1 	.word	0x20002bb1

08006740 <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI15_10_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8006744:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <EXTI15_10_IRQHandler+0x88>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d105      	bne.n	8006758 <EXTI15_10_IRQHandler+0x18>
 800674c:	4b1f      	ldr	r3, [pc, #124]	; (80067cc <EXTI15_10_IRQHandler+0x8c>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	b2da      	uxtb	r2, r3
 8006754:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <EXTI15_10_IRQHandler+0x8c>)
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <EXTI15_10_IRQHandler+0x88>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	3301      	adds	r3, #1
 800675e:	b2da      	uxtb	r2, r3
 8006760:	4b19      	ldr	r3, [pc, #100]	; (80067c8 <EXTI15_10_IRQHandler+0x88>)
 8006762:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8006764:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006768:	f7fc f9a6 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800676c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006770:	f7fc f9a2 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8006774:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006778:	f7fc f99e 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800677c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006780:	f7fc f99a 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006784:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006788:	f7fc f996 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800678c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006790:	f7fc f992 	bl	8002ab8 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 8006794:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <EXTI15_10_IRQHandler+0x88>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <EXTI15_10_IRQHandler+0x68>
 800679c:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <EXTI15_10_IRQHandler+0x88>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <EXTI15_10_IRQHandler+0x88>)
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <EXTI15_10_IRQHandler+0x88>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <EXTI15_10_IRQHandler+0x84>
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <EXTI15_10_IRQHandler+0x8c>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <EXTI15_10_IRQHandler+0x84>
 80067b8:	4b04      	ldr	r3, [pc, #16]	; (80067cc <EXTI15_10_IRQHandler+0x8c>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	3b01      	subs	r3, #1
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	4b02      	ldr	r3, [pc, #8]	; (80067cc <EXTI15_10_IRQHandler+0x8c>)
 80067c2:	701a      	strb	r2, [r3, #0]
}
 80067c4:	bf00      	nop
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20002bb2 	.word	0x20002bb2
 80067cc:	20002bb1 	.word	0x20002bb1

080067d0 <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t pin)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 80067da:	4b27      	ldr	r3, [pc, #156]	; (8006878 <HAL_GPIO_EXTI_Callback+0xa8>)
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d105      	bne.n	80067ee <HAL_GPIO_EXTI_Callback+0x1e>
 80067e2:	4b26      	ldr	r3, [pc, #152]	; (800687c <HAL_GPIO_EXTI_Callback+0xac>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	4b24      	ldr	r3, [pc, #144]	; (800687c <HAL_GPIO_EXTI_Callback+0xac>)
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	4b22      	ldr	r3, [pc, #136]	; (8006878 <HAL_GPIO_EXTI_Callback+0xa8>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	4b20      	ldr	r3, [pc, #128]	; (8006878 <HAL_GPIO_EXTI_Callback+0xa8>)
 80067f8:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */
    if (gpioItConfig != NULL)
    {
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
 8006802:	e016      	b.n	8006832 <HAL_GPIO_EXTI_Callback+0x62>
        {
            if (gpioItConfig[callbackIndex].pin == pin && gpioItConfig[callbackIndex].callback != NULL)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	4a1e      	ldr	r2, [pc, #120]	; (8006880 <HAL_GPIO_EXTI_Callback+0xb0>)
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	889b      	ldrh	r3, [r3, #4]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	429a      	cmp	r2, r3
 8006812:	d10b      	bne.n	800682c <HAL_GPIO_EXTI_Callback+0x5c>
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	4a1a      	ldr	r2, [pc, #104]	; (8006880 <HAL_GPIO_EXTI_Callback+0xb0>)
 8006818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <HAL_GPIO_EXTI_Callback+0x5c>
            {
                gpioItConfig[callbackIndex].callback();
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	4a17      	ldr	r2, [pc, #92]	; (8006880 <HAL_GPIO_EXTI_Callback+0xb0>)
 8006824:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006828:	4798      	blx	r3
                break;
 800682a:	e008      	b.n	800683e <HAL_GPIO_EXTI_Callback+0x6e>
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	3301      	adds	r3, #1
 8006830:	73fb      	strb	r3, [r7, #15]
 8006832:	7bfa      	ldrb	r2, [r7, #15]
 8006834:	4b13      	ldr	r3, [pc, #76]	; (8006884 <HAL_GPIO_EXTI_Callback+0xb4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	08db      	lsrs	r3, r3, #3
 800683a:	429a      	cmp	r2, r3
 800683c:	d3e2      	bcc.n	8006804 <HAL_GPIO_EXTI_Callback+0x34>
    else
    {
        // Configuration array is NULL.
    }

    GOS_ISR_EXIT
 800683e:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <HAL_GPIO_EXTI_Callback+0xa8>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <HAL_GPIO_EXTI_Callback+0x82>
 8006846:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <HAL_GPIO_EXTI_Callback+0xa8>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	3b01      	subs	r3, #1
 800684c:	b2da      	uxtb	r2, r3
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <HAL_GPIO_EXTI_Callback+0xa8>)
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	4b09      	ldr	r3, [pc, #36]	; (8006878 <HAL_GPIO_EXTI_Callback+0xa8>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <HAL_GPIO_EXTI_Callback+0x9e>
 800685a:	4b08      	ldr	r3, [pc, #32]	; (800687c <HAL_GPIO_EXTI_Callback+0xac>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_GPIO_EXTI_Callback+0x9e>
 8006862:	4b06      	ldr	r3, [pc, #24]	; (800687c <HAL_GPIO_EXTI_Callback+0xac>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	3b01      	subs	r3, #1
 8006868:	b2da      	uxtb	r2, r3
 800686a:	4b04      	ldr	r3, [pc, #16]	; (800687c <HAL_GPIO_EXTI_Callback+0xac>)
 800686c:	701a      	strb	r2, [r3, #0]
}
 800686e:	bf00      	nop
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20002bb2 	.word	0x20002bb2
 800687c:	20002bb1 	.word	0x20002bb1
 8006880:	08014580 	.word	0x08014580
 8006884:	20001f1c 	.word	0x20001f1c

08006888 <drv_itInit>:

/*
 * Function: drv_itInit
 */
gos_result_t drv_itInit (void_t)
{
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t itDriverInitResult = GOS_ERROR;
 800688e:	23ae      	movs	r3, #174	; 0xae
 8006890:	71bb      	strb	r3, [r7, #6]
    u8_t         itIdx              = 0u;
 8006892:	2300      	movs	r3, #0
 8006894:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (itConfig != NULL)
    {
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 8006896:	2300      	movs	r3, #0
 8006898:	71fb      	strb	r3, [r7, #7]
 800689a:	e02c      	b.n	80068f6 <drv_itInit+0x6e>
        {
            HAL_NVIC_SetPriority(itConfig[itIdx].irqType, itConfig[itIdx].preemtPriority, itConfig[itIdx].subPriority);
 800689c:	79fa      	ldrb	r2, [r7, #7]
 800689e:	491e      	ldr	r1, [pc, #120]	; (8006918 <drv_itInit+0x90>)
 80068a0:	4613      	mov	r3, r2
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	f993 0000 	ldrsb.w	r0, [r3]
 80068ae:	79fa      	ldrb	r2, [r7, #7]
 80068b0:	4919      	ldr	r1, [pc, #100]	; (8006918 <drv_itInit+0x90>)
 80068b2:	4613      	mov	r3, r2
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	440b      	add	r3, r1
 80068bc:	3304      	adds	r3, #4
 80068be:	6819      	ldr	r1, [r3, #0]
 80068c0:	79fa      	ldrb	r2, [r7, #7]
 80068c2:	4c15      	ldr	r4, [pc, #84]	; (8006918 <drv_itInit+0x90>)
 80068c4:	4613      	mov	r3, r2
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4423      	add	r3, r4
 80068ce:	3308      	adds	r3, #8
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	461a      	mov	r2, r3
 80068d4:	f7fb f813 	bl	80018fe <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(itConfig[itIdx].irqType);
 80068d8:	79fa      	ldrb	r2, [r7, #7]
 80068da:	490f      	ldr	r1, [pc, #60]	; (8006918 <drv_itInit+0x90>)
 80068dc:	4613      	mov	r3, r2
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	f993 3000 	ldrsb.w	r3, [r3]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fb f823 	bl	8001936 <HAL_NVIC_EnableIRQ>
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	3301      	adds	r3, #1
 80068f4:	71fb      	strb	r3, [r7, #7]
 80068f6:	79fa      	ldrb	r2, [r7, #7]
 80068f8:	4b08      	ldr	r3, [pc, #32]	; (800691c <drv_itInit+0x94>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4908      	ldr	r1, [pc, #32]	; (8006920 <drv_itInit+0x98>)
 80068fe:	fba1 1303 	umull	r1, r3, r1, r3
 8006902:	08db      	lsrs	r3, r3, #3
 8006904:	429a      	cmp	r2, r3
 8006906:	d3c9      	bcc.n	800689c <drv_itInit+0x14>
        }

        itDriverInitResult = GOS_SUCCESS;
 8006908:	2355      	movs	r3, #85	; 0x55
 800690a:	71bb      	strb	r3, [r7, #6]
    else
    {
        // Configuration array is NULL pointer.
    }

    return itDriverInitResult;
 800690c:	79bb      	ldrb	r3, [r7, #6]
}
 800690e:	4618      	mov	r0, r3
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	bd90      	pop	{r4, r7, pc}
 8006916:	bf00      	nop
 8006918:	08014580 	.word	0x08014580
 800691c:	20000270 	.word	0x20000270
 8006920:	aaaaaaab 	.word	0xaaaaaaab

08006924 <drv_shellTransmitString>:

/*
 * Function: drv_shellTransmitString
 */
GOS_INLINE gos_result_t drv_shellTransmitString (char_t* pString)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af02      	add	r7, sp, #8
 800692a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800692c:	23ae      	movs	r3, #174	; 0xae
 800692e:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8006930:	2300      	movs	r3, #0
 8006932:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <drv_shellTransmitString+0x44>)
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, (u8_t*)pString, strlen(pString),
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7f9 fcc8 	bl	80002d0 <strlen>
 8006940:	4603      	mov	r3, r0
 8006942:	b29a      	uxth	r2, r3
 8006944:	4b09      	ldr	r3, [pc, #36]	; (800696c <drv_shellTransmitString+0x48>)
 8006946:	6959      	ldr	r1, [r3, #20]
 8006948:	4b08      	ldr	r3, [pc, #32]	; (800696c <drv_shellTransmitString+0x48>)
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	7bb8      	ldrb	r0, [r7, #14]
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	460b      	mov	r3, r1
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	f000 fef4 	bl	8007740 <drv_uartTransmitIT>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	08014650 	.word	0x08014650
 800696c:	200002e0 	.word	0x200002e0

08006970 <drv_shellReceiveChar>:

/*
 * Function: drv_shellReceiveChar
 */
GOS_INLINE gos_result_t drv_shellReceiveChar (char_t* pBuffer)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af02      	add	r7, sp, #8
 8006976:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 8006978:	23ae      	movs	r3, #174	; 0xae
 800697a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800697c:	2300      	movs	r3, #0
 800697e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <drv_shellReceiveChar+0x3c>)
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveIT(instance, (u8_t*)pBuffer, sizeof(char_t),
 8006986:	4b0a      	ldr	r3, [pc, #40]	; (80069b0 <drv_shellReceiveChar+0x40>)
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <drv_shellReceiveChar+0x40>)
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	7bb8      	ldrb	r0, [r7, #14]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	4613      	mov	r3, r2
 8006994:	2201      	movs	r2, #1
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	f000 ff42 	bl	8007820 <drv_uartReceiveIT>
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	08014650 	.word	0x08014650
 80069b0:	200002e0 	.word	0x200002e0

080069b4 <drv_sysmonTransmit>:

/*
 * Function: drv_sysmonTransmit
 */
GOS_INLINE gos_result_t drv_sysmonTransmit (u8_t* pData, u16_t size)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af02      	add	r7, sp, #8
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 80069c0:	23ae      	movs	r3, #174	; 0xae
 80069c2:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 80069c4:	2300      	movs	r3, #0
 80069c6:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 80069c8:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <drv_sysmonTransmit+0x40>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, pData, size,
 80069ce:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <drv_sysmonTransmit+0x44>)
 80069d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80069d2:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <drv_sysmonTransmit+0x44>)
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	887a      	ldrh	r2, [r7, #2]
 80069d8:	7bb8      	ldrb	r0, [r7, #14]
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	460b      	mov	r3, r1
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	f000 feae 	bl	8007740 <drv_uartTransmitIT>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	08014650 	.word	0x08014650
 80069f8:	200002e0 	.word	0x200002e0

080069fc <drv_sysmonReceive>:

/*
 * Function: drv_sysmonReceive
 */
GOS_INLINE gos_result_t drv_sysmonReceive (u8_t* pBuffer, u16_t size)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 8006a08:	23ae      	movs	r3, #174	; 0xae
 8006a0a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <drv_sysmonReceive+0x40>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveDMA(instance, pBuffer, size,
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <drv_sysmonReceive+0x44>)
 8006a18:	69d9      	ldr	r1, [r3, #28]
 8006a1a:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <drv_sysmonReceive+0x44>)
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	887a      	ldrh	r2, [r7, #2]
 8006a20:	7bb8      	ldrb	r0, [r7, #14]
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	460b      	mov	r3, r1
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	f000 fe1a 	bl	8007660 <drv_uartReceiveDMA>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	08014650 	.word	0x08014650
 8006a40:	200002e0 	.word	0x200002e0

08006a44 <drv_systimerStart>:

/*
 * Function: drv_systimerStart
 */
gos_result_t drv_systimerStart (void_t)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            systimerStartResult = GOS_ERROR;
 8006a4a:	23ae      	movs	r3, #174	; 0xae
 8006a4c:	71fb      	strb	r3, [r7, #7]
    drv_tmrPeriphInstance_t instance            = 0u;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL)
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 8006a52:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <drv_systimerStart+0x30>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	71bb      	strb	r3, [r7, #6]

        systimerStartResult = drv_tmrStart(instance, GOS_MUTEX_ENDLESS_TMO);
 8006a58:	79bb      	ldrb	r3, [r7, #6]
 8006a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 f9a2 	bl	8006da8 <drv_tmrStart>
 8006a64:	4603      	mov	r3, r0
 8006a66:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL.
    }

    return systimerStartResult;
 8006a68:	79fb      	ldrb	r3, [r7, #7]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	080145d4 	.word	0x080145d4

08006a78 <drv_systimerGetValue>:

/*
 * Function: drv_systimerGetValue
 */
gos_result_t drv_systimerGetValue (u16_t* pValue)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            systimerGetValueResult = GOS_ERROR;
 8006a80:	23ae      	movs	r3, #174	; 0xae
 8006a82:	73fb      	strb	r3, [r7, #15]
    drv_tmrPeriphInstance_t instance               = 0u;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73bb      	strb	r3, [r7, #14]
    u32_t                   temp                   = 0u;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL && pValue != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00f      	beq.n	8006ab2 <drv_systimerGetValue+0x3a>
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <drv_systimerGetValue+0x44>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	73bb      	strb	r3, [r7, #14]
        systimerGetValueResult = drv_tmrGetValue(instance, &temp);
 8006a98:	f107 0208 	add.w	r2, r7, #8
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 f9b3 	bl	8006e0c <drv_tmrGetValue>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
        *pValue = (u16_t)temp;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	801a      	strh	r2, [r3, #0]
    else
    {
        // Configuration array is NULL or output parameter is NULL.
    }

    return systimerGetValueResult;
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	080145d4 	.word	0x080145d4

08006ac0 <drv_tmrInit>:

/*
 * Function: drv_tmrInit
 */
gos_result_t drv_tmrInit (void_t)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t tmrDriverInitResult = GOS_SUCCESS;
 8006ac6:	2355      	movs	r3, #85	; 0x55
 8006ac8:	71fb      	strb	r3, [r7, #7]
    u8_t         tmrIdx              = 0u;
 8006aca:	2300      	movs	r3, #0
 8006acc:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrConfig != NULL)
    {
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 8006ace:	2300      	movs	r3, #0
 8006ad0:	71bb      	strb	r3, [r7, #6]
 8006ad2:	e00e      	b.n	8006af2 <drv_tmrInit+0x32>
        {
            GOS_CONCAT_RESULT(tmrDriverInitResult, drv_tmrInitInstance(tmrIdx));
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	2b55      	cmp	r3, #85	; 0x55
 8006ad8:	d106      	bne.n	8006ae8 <drv_tmrInit+0x28>
 8006ada:	79bb      	ldrb	r3, [r7, #6]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 f81b 	bl	8006b18 <drv_tmrInitInstance>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	71fb      	strb	r3, [r7, #7]
 8006ae6:	e001      	b.n	8006aec <drv_tmrInit+0x2c>
 8006ae8:	23ae      	movs	r3, #174	; 0xae
 8006aea:	71fb      	strb	r3, [r7, #7]
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 8006aec:	79bb      	ldrb	r3, [r7, #6]
 8006aee:	3301      	adds	r3, #1
 8006af0:	71bb      	strb	r3, [r7, #6]
 8006af2:	79ba      	ldrb	r2, [r7, #6]
 8006af4:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <drv_tmrInit+0x50>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4906      	ldr	r1, [pc, #24]	; (8006b14 <drv_tmrInit+0x54>)
 8006afa:	fba1 1303 	umull	r1, r3, r1, r3
 8006afe:	091b      	lsrs	r3, r3, #4
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d3e7      	bcc.n	8006ad4 <drv_tmrInit+0x14>
    {
        // Configuration array is NULL pointer.
        tmrDriverInitResult = GOS_ERROR;
    }

    return tmrDriverInitResult;
 8006b04:	79fb      	ldrb	r3, [r7, #7]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	200002dc 	.word	0x200002dc
 8006b14:	4ec4ec4f 	.word	0x4ec4ec4f

08006b18 <drv_tmrInitInstance>:

/*
 * Function: drv_tmrInitInstance
 */
gos_result_t drv_tmrInitInstance (u8_t tmrInstanceIndex)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	; 0x28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            tmrInitResult      = GOS_ERROR;
 8006b22:	23ae      	movs	r3, #174	; 0xae
 8006b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    drv_tmrPeriphInstance_t instance           = 0u;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 8006b2e:	f107 031c 	add.w	r3, r7, #28
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	605a      	str	r2, [r3, #4]
    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 8006b38:	f107 030c 	add.w	r3, r7, #12
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	605a      	str	r2, [r3, #4]
 8006b42:	609a      	str	r2, [r3, #8]
 8006b44:	60da      	str	r2, [r3, #12]

    /*
     * Function code.
     */
    if (tmrConfig != NULL && tmrInstanceIndex < (tmrConfigSize / sizeof(drv_tmrDescriptor_t)))
 8006b46:	79fa      	ldrb	r2, [r7, #7]
 8006b48:	4b90      	ldr	r3, [pc, #576]	; (8006d8c <drv_tmrInitInstance+0x274>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4990      	ldr	r1, [pc, #576]	; (8006d90 <drv_tmrInitInstance+0x278>)
 8006b4e:	fba1 1303 	umull	r1, r3, r1, r3
 8006b52:	091b      	lsrs	r3, r3, #4
 8006b54:	429a      	cmp	r2, r3
 8006b56:	f080 8112 	bcs.w	8006d7e <drv_tmrInitInstance+0x266>
    {
        instance = tmrConfig[tmrInstanceIndex].periphInstance;
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	4a8d      	ldr	r2, [pc, #564]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006b5e:	2134      	movs	r1, #52	; 0x34
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	4413      	add	r3, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        htims[instance].Instance               = tmrInstanceLut[instance];
 8006b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006b74:	4988      	ldr	r1, [pc, #544]	; (8006d98 <drv_tmrInitInstance+0x280>)
 8006b76:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006b7a:	4888      	ldr	r0, [pc, #544]	; (8006d9c <drv_tmrInitInstance+0x284>)
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	4413      	add	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4403      	add	r3, r0
 8006b86:	6019      	str	r1, [r3, #0]
        htims[instance].Init.AutoReloadPreload = tmrConfig[tmrInstanceIndex].autoReloadPreload;
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006b8e:	4981      	ldr	r1, [pc, #516]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006b90:	2034      	movs	r0, #52	; 0x34
 8006b92:	fb00 f303 	mul.w	r3, r0, r3
 8006b96:	440b      	add	r3, r1
 8006b98:	3318      	adds	r3, #24
 8006b9a:	6819      	ldr	r1, [r3, #0]
 8006b9c:	487f      	ldr	r0, [pc, #508]	; (8006d9c <drv_tmrInitInstance+0x284>)
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	4403      	add	r3, r0
 8006ba8:	3318      	adds	r3, #24
 8006baa:	6019      	str	r1, [r3, #0]
        htims[instance].Init.ClockDivision     = tmrConfig[tmrInstanceIndex].clockDivision;
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bb2:	4978      	ldr	r1, [pc, #480]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006bb4:	2034      	movs	r0, #52	; 0x34
 8006bb6:	fb00 f303 	mul.w	r3, r0, r3
 8006bba:	440b      	add	r3, r1
 8006bbc:	3314      	adds	r3, #20
 8006bbe:	6819      	ldr	r1, [r3, #0]
 8006bc0:	4876      	ldr	r0, [pc, #472]	; (8006d9c <drv_tmrInitInstance+0x284>)
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	4403      	add	r3, r0
 8006bcc:	3310      	adds	r3, #16
 8006bce:	6019      	str	r1, [r3, #0]
        htims[instance].Init.CounterMode       = tmrConfig[tmrInstanceIndex].counterMode;
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bd6:	496f      	ldr	r1, [pc, #444]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006bd8:	2034      	movs	r0, #52	; 0x34
 8006bda:	fb00 f303 	mul.w	r3, r0, r3
 8006bde:	440b      	add	r3, r1
 8006be0:	330c      	adds	r3, #12
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	486d      	ldr	r0, [pc, #436]	; (8006d9c <drv_tmrInitInstance+0x284>)
 8006be6:	4613      	mov	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	4413      	add	r3, r2
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	4403      	add	r3, r0
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Period            = tmrConfig[tmrInstanceIndex].period;
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006bfa:	4966      	ldr	r1, [pc, #408]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006bfc:	2034      	movs	r0, #52	; 0x34
 8006bfe:	fb00 f303 	mul.w	r3, r0, r3
 8006c02:	440b      	add	r3, r1
 8006c04:	3310      	adds	r3, #16
 8006c06:	6819      	ldr	r1, [r3, #0]
 8006c08:	4864      	ldr	r0, [pc, #400]	; (8006d9c <drv_tmrInitInstance+0x284>)
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	4413      	add	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	4403      	add	r3, r0
 8006c14:	330c      	adds	r3, #12
 8006c16:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Prescaler         = tmrConfig[tmrInstanceIndex].prescaler;
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c1e:	495d      	ldr	r1, [pc, #372]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006c20:	2034      	movs	r0, #52	; 0x34
 8006c22:	fb00 f303 	mul.w	r3, r0, r3
 8006c26:	440b      	add	r3, r1
 8006c28:	3304      	adds	r3, #4
 8006c2a:	6819      	ldr	r1, [r3, #0]
 8006c2c:	485b      	ldr	r0, [pc, #364]	; (8006d9c <drv_tmrInitInstance+0x284>)
 8006c2e:	4613      	mov	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	4413      	add	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	4403      	add	r3, r0
 8006c38:	3304      	adds	r3, #4
 8006c3a:	6019      	str	r1, [r3, #0]
        htims[instance].Init.RepetitionCounter = tmrConfig[tmrInstanceIndex].repetitionCounter;
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c42:	4954      	ldr	r1, [pc, #336]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006c44:	2034      	movs	r0, #52	; 0x34
 8006c46:	fb00 f303 	mul.w	r3, r0, r3
 8006c4a:	440b      	add	r3, r1
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	6819      	ldr	r1, [r3, #0]
 8006c50:	4852      	ldr	r0, [pc, #328]	; (8006d9c <drv_tmrInitInstance+0x284>)
 8006c52:	4613      	mov	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	4413      	add	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4403      	add	r3, r0
 8006c5c:	3314      	adds	r3, #20
 8006c5e:	6019      	str	r1, [r3, #0]
        sMasterConfig.MasterOutputTrigger      = tmrConfig[tmrInstanceIndex].masterOutputTrigger;
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	4a4c      	ldr	r2, [pc, #304]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006c64:	2134      	movs	r1, #52	; 0x34
 8006c66:	fb01 f303 	mul.w	r3, r1, r3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3328      	adds	r3, #40	; 0x28
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	61fb      	str	r3, [r7, #28]
        sMasterConfig.MasterSlaveMode          = tmrConfig[tmrInstanceIndex].masterSlaveMode;
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	4a47      	ldr	r2, [pc, #284]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006c76:	2134      	movs	r1, #52	; 0x34
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	332c      	adds	r3, #44	; 0x2c
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	623b      	str	r3, [r7, #32]
        sClockSourceConfig.ClockSource         = tmrConfig[tmrInstanceIndex].clockSource;
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	4a43      	ldr	r2, [pc, #268]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006c88:	2134      	movs	r1, #52	; 0x34
 8006c8a:	fb01 f303 	mul.w	r3, r1, r3
 8006c8e:	4413      	add	r3, r2
 8006c90:	3320      	adds	r3, #32
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	60fb      	str	r3, [r7, #12]

        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 8006c96:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	4a3e      	ldr	r2, [pc, #248]	; (8006d9c <drv_tmrInitInstance+0x284>)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fc fcc2 	bl	8003630 <HAL_TIM_Base_Init>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d165      	bne.n	8006d7e <drv_tmrInitInstance+0x266>
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 8006cb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4a39      	ldr	r2, [pc, #228]	; (8006da0 <drv_tmrInitInstance+0x288>)
 8006cba:	4413      	add	r3, r2
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f006 f841 	bl	800cd44 <gos_mutexInit>
 8006cc2:	4603      	mov	r3, r0
        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 8006cc4:	2b55      	cmp	r3, #85	; 0x55
 8006cc6:	d15a      	bne.n	8006d7e <drv_tmrInitInstance+0x266>
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 8006cc8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006ccc:	4613      	mov	r3, r2
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4a33      	ldr	r2, [pc, #204]	; (8006da4 <drv_tmrInitInstance+0x28c>)
 8006cd6:	4413      	add	r3, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f008 fca3 	bl	800f624 <gos_triggerInit>
 8006cde:	4603      	mov	r3, r0
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 8006ce0:	2b55      	cmp	r3, #85	; 0x55
 8006ce2:	d14c      	bne.n	8006d7e <drv_tmrInitInstance+0x266>
            gos_triggerReset  (&tmrReadyTriggers[instance]) == GOS_SUCCESS
 8006ce4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006ce8:	4613      	mov	r3, r2
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4a2c      	ldr	r2, [pc, #176]	; (8006da4 <drv_tmrInitInstance+0x28c>)
 8006cf2:	4413      	add	r3, r2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f008 fcb1 	bl	800f65c <gos_triggerReset>
 8006cfa:	4603      	mov	r3, r0
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 8006cfc:	2b55      	cmp	r3, #85	; 0x55
 8006cfe:	d13e      	bne.n	8006d7e <drv_tmrInitInstance+0x266>
            )
        {
            tmrInitResult = GOS_SUCCESS;
 8006d00:	2355      	movs	r3, #85	; 0x55
 8006d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (tmrConfig[tmrInstanceIndex].useClockConfig == GOS_TRUE)
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	4a22      	ldr	r2, [pc, #136]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006d0a:	2134      	movs	r1, #52	; 0x34
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	4413      	add	r3, r2
 8006d12:	331c      	adds	r3, #28
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b36      	cmp	r3, #54	; 0x36
 8006d18:	d113      	bne.n	8006d42 <drv_tmrInitInstance+0x22a>
            {
                if (HAL_TIM_ConfigClockSource(&htims[instance], &sClockSourceConfig) != HAL_OK)
 8006d1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006d1e:	4613      	mov	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	4413      	add	r3, r2
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <drv_tmrInitInstance+0x284>)
 8006d28:	4413      	add	r3, r2
 8006d2a:	f107 020c 	add.w	r2, r7, #12
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fc fdde 	bl	80038f2 <HAL_TIM_ConfigClockSource>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <drv_tmrInitInstance+0x22a>
                {
                    tmrInitResult = GOS_ERROR;
 8006d3c:	23ae      	movs	r3, #174	; 0xae
 8006d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            else
            {
                // Not used.
            }

            if (tmrConfig[tmrInstanceIndex].useMasterConfig == GOS_TRUE)
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <drv_tmrInitInstance+0x27c>)
 8006d46:	2134      	movs	r1, #52	; 0x34
 8006d48:	fb01 f303 	mul.w	r3, r1, r3
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3324      	adds	r3, #36	; 0x24
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b36      	cmp	r3, #54	; 0x36
 8006d54:	d113      	bne.n	8006d7e <drv_tmrInitInstance+0x266>
            {
                if (HAL_TIMEx_MasterConfigSynchronization(&htims[instance], &sMasterConfig) != HAL_OK)
 8006d56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	4413      	add	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	4a0e      	ldr	r2, [pc, #56]	; (8006d9c <drv_tmrInitInstance+0x284>)
 8006d64:	4413      	add	r3, r2
 8006d66:	f107 021c 	add.w	r2, r7, #28
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fc ffe7 	bl	8003d40 <HAL_TIMEx_MasterConfigSynchronization>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <drv_tmrInitInstance+0x266>
                {
                    tmrInitResult = GOS_ERROR;
 8006d78:	23ae      	movs	r3, #174	; 0xae
 8006d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return tmrInitResult;
 8006d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3728      	adds	r7, #40	; 0x28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200002dc 	.word	0x200002dc
 8006d90:	4ec4ec4f 	.word	0x4ec4ec4f
 8006d94:	20000274 	.word	0x20000274
 8006d98:	20000358 	.word	0x20000358
 8006d9c:	20001f44 	.word	0x20001f44
 8006da0:	20002334 	.word	0x20002334
 8006da4:	2000236c 	.word	0x2000236c

08006da8 <drv_tmrStart>:

/*
 * Function: drv_tmrStart
 */
gos_result_t drv_tmrStart (drv_tmrPeriphInstance_t instance, u32_t mutexTmo)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	6039      	str	r1, [r7, #0]
 8006db2:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrStartResult = GOS_ERROR;
 8006db4:	23ae      	movs	r3, #174	; 0xae
 8006db6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4a11      	ldr	r2, [pc, #68]	; (8006e04 <drv_tmrStart+0x5c>)
 8006dbe:	4413      	add	r3, r2
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f005 ffd8 	bl	800cd78 <gos_mutexLock>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b55      	cmp	r3, #85	; 0x55
 8006dcc:	d10e      	bne.n	8006dec <drv_tmrStart+0x44>
        HAL_TIM_Base_Start(&htims[instance])           == HAL_OK)
 8006dce:	79fa      	ldrb	r2, [r7, #7]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	4413      	add	r3, r2
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	4a0b      	ldr	r2, [pc, #44]	; (8006e08 <drv_tmrStart+0x60>)
 8006dda:	4413      	add	r3, r2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fc fc5c 	bl	800369a <HAL_TIM_Base_Start>
 8006de2:	4603      	mov	r3, r0
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <drv_tmrStart+0x44>
    {
        tmrStartResult = GOS_SUCCESS;
 8006de8:	2355      	movs	r3, #85	; 0x55
 8006dea:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    (void_t) gos_mutexUnlock(&tmrMutexes[instance]);
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4a04      	ldr	r2, [pc, #16]	; (8006e04 <drv_tmrStart+0x5c>)
 8006df2:	4413      	add	r3, r2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f006 f8c5 	bl	800cf84 <gos_mutexUnlock>

    return tmrStartResult;
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20002334 	.word	0x20002334
 8006e08:	20001f44 	.word	0x20001f44

08006e0c <drv_tmrGetValue>:

/*
 * Function: drv_tmrGetValue
 */
GOS_INLINE gos_result_t drv_tmrGetValue (drv_tmrPeriphInstance_t instance, u32_t* pValue)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	4603      	mov	r3, r0
 8006e14:	6039      	str	r1, [r7, #0]
 8006e16:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrGetResult = GOS_ERROR;
 8006e18:	23ae      	movs	r3, #174	; 0xae
 8006e1a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00c      	beq.n	8006e3c <drv_tmrGetValue+0x30>
    {
        *pValue = __HAL_TIM_GET_COUNTER(&htims[instance]);
 8006e22:	79fa      	ldrb	r2, [r7, #7]
 8006e24:	4909      	ldr	r1, [pc, #36]	; (8006e4c <drv_tmrGetValue+0x40>)
 8006e26:	4613      	mov	r3, r2
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	440b      	add	r3, r1
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	601a      	str	r2, [r3, #0]
        tmrGetResult = GOS_SUCCESS;
 8006e38:	2355      	movs	r3, #85	; 0x55
 8006e3a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return tmrGetResult;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20001f44 	.word	0x20001f44

08006e50 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Function: HAL_TIM_PeriodElapsedCallback
 */
void_t HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *pHtim)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_tmrPeriphInstance_t instance = DRV_TMR_INSTANCE_1;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pHtim != NULL && tmrConfig != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d041      	beq.n	8006eea <HAL_TIM_PeriodElapsedCallback+0x9a>
    {
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
 8006e6a:	e03a      	b.n	8006ee2 <HAL_TIM_PeriodElapsedCallback+0x92>
        {
            if (tmrInstanceLut[instance] == pHtim->Instance)
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	4a21      	ldr	r2, [pc, #132]	; (8006ef4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8006e70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d12f      	bne.n	8006edc <HAL_TIM_PeriodElapsedCallback+0x8c>
            {
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73bb      	strb	r3, [r7, #14]
 8006e80:	e020      	b.n	8006ec4 <HAL_TIM_PeriodElapsedCallback+0x74>
                {
                    if (tmrConfig[idx].periphInstance == instance)
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	4a1c      	ldr	r2, [pc, #112]	; (8006ef8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8006e86:	2134      	movs	r1, #52	; 0x34
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	7bfa      	ldrb	r2, [r7, #15]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d113      	bne.n	8006ebe <HAL_TIM_PeriodElapsedCallback+0x6e>
                    {
                        if (tmrConfig[idx].periodCallback != NULL)
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	4a17      	ldr	r2, [pc, #92]	; (8006ef8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8006e9a:	2134      	movs	r1, #52	; 0x34
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	3330      	adds	r3, #48	; 0x30
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <HAL_TIM_PeriodElapsedCallback+0x88>
                        {
                            tmrConfig[idx].periodCallback();
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	4a12      	ldr	r2, [pc, #72]	; (8006ef8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8006eae:	2134      	movs	r1, #52	; 0x34
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	3330      	adds	r3, #48	; 0x30
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4798      	blx	r3
                        }
                        else
                        {
                            // No registered callback.
                        }
                        break;
 8006ebc:	e00c      	b.n	8006ed8 <HAL_TIM_PeriodElapsedCallback+0x88>
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	73bb      	strb	r3, [r7, #14]
 8006ec4:	7bba      	ldrb	r2, [r7, #14]
 8006ec6:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	490d      	ldr	r1, [pc, #52]	; (8006f00 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8006ecc:	fba1 1303 	umull	r1, r3, r1, r3
 8006ed0:	091b      	lsrs	r3, r3, #4
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d3d5      	bcc.n	8006e82 <HAL_TIM_PeriodElapsedCallback+0x32>
                    else
                    {
                        // Continue.
                    }
                }
                break;
 8006ed6:	e008      	b.n	8006eea <HAL_TIM_PeriodElapsedCallback+0x9a>
                        break;
 8006ed8:	bf00      	nop
                break;
 8006eda:	e006      	b.n	8006eea <HAL_TIM_PeriodElapsedCallback+0x9a>
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	73fb      	strb	r3, [r7, #15]
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b0d      	cmp	r3, #13
 8006ee6:	d9c1      	bls.n	8006e6c <HAL_TIM_PeriodElapsedCallback+0x1c>
    }
    else
    {
        // NULL pointer fail.
    }
}
 8006ee8:	e7ff      	b.n	8006eea <HAL_TIM_PeriodElapsedCallback+0x9a>
 8006eea:	bf00      	nop
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000358 	.word	0x20000358
 8006ef8:	20000274 	.word	0x20000274
 8006efc:	200002dc 	.word	0x200002dc
 8006f00:	4ec4ec4f 	.word	0x4ec4ec4f

08006f04 <TIM2_IRQHandler>:

/*
 * Function: TIM2_IRQHandler
 */
void_t TIM2_IRQHandler (void_t)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8006f08:	4b16      	ldr	r3, [pc, #88]	; (8006f64 <TIM2_IRQHandler+0x60>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d105      	bne.n	8006f1c <TIM2_IRQHandler+0x18>
 8006f10:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <TIM2_IRQHandler+0x64>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <TIM2_IRQHandler+0x64>)
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <TIM2_IRQHandler+0x60>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	3301      	adds	r3, #1
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <TIM2_IRQHandler+0x60>)
 8006f26:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_2]);
 8006f28:	4810      	ldr	r0, [pc, #64]	; (8006f6c <TIM2_IRQHandler+0x68>)
 8006f2a:	f7fc fbda 	bl	80036e2 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	; (8006f64 <TIM2_IRQHandler+0x60>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <TIM2_IRQHandler+0x3e>
 8006f36:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <TIM2_IRQHandler+0x60>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <TIM2_IRQHandler+0x60>)
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <TIM2_IRQHandler+0x60>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <TIM2_IRQHandler+0x5a>
 8006f4a:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <TIM2_IRQHandler+0x64>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d005      	beq.n	8006f5e <TIM2_IRQHandler+0x5a>
 8006f52:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <TIM2_IRQHandler+0x64>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <TIM2_IRQHandler+0x64>)
 8006f5c:	701a      	strb	r2, [r3, #0]
}
 8006f5e:	bf00      	nop
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20002bb2 	.word	0x20002bb2
 8006f68:	20002bb1 	.word	0x20002bb1
 8006f6c:	20001f8c 	.word	0x20001f8c

08006f70 <TIM3_IRQHandler>:

/*
 * Function: TIM3_IRQHandler
 */
void_t TIM3_IRQHandler (void_t)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8006f74:	4b16      	ldr	r3, [pc, #88]	; (8006fd0 <TIM3_IRQHandler+0x60>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d105      	bne.n	8006f88 <TIM3_IRQHandler+0x18>
 8006f7c:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <TIM3_IRQHandler+0x64>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <TIM3_IRQHandler+0x64>)
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	4b11      	ldr	r3, [pc, #68]	; (8006fd0 <TIM3_IRQHandler+0x60>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <TIM3_IRQHandler+0x60>)
 8006f92:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_3]);
 8006f94:	4810      	ldr	r0, [pc, #64]	; (8006fd8 <TIM3_IRQHandler+0x68>)
 8006f96:	f7fc fba4 	bl	80036e2 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8006f9a:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <TIM3_IRQHandler+0x60>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d005      	beq.n	8006fae <TIM3_IRQHandler+0x3e>
 8006fa2:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <TIM3_IRQHandler+0x60>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <TIM3_IRQHandler+0x60>)
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <TIM3_IRQHandler+0x60>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <TIM3_IRQHandler+0x5a>
 8006fb6:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <TIM3_IRQHandler+0x64>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <TIM3_IRQHandler+0x5a>
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <TIM3_IRQHandler+0x64>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	4b03      	ldr	r3, [pc, #12]	; (8006fd4 <TIM3_IRQHandler+0x64>)
 8006fc8:	701a      	strb	r2, [r3, #0]
}
 8006fca:	bf00      	nop
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20002bb2 	.word	0x20002bb2
 8006fd4:	20002bb1 	.word	0x20002bb1
 8006fd8:	20001fd4 	.word	0x20001fd4

08006fdc <TIM4_IRQHandler>:

/*
 * Function: TIM4_IRQHandler
 */
void_t TIM4_IRQHandler (void_t)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8006fe0:	4b16      	ldr	r3, [pc, #88]	; (800703c <TIM4_IRQHandler+0x60>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d105      	bne.n	8006ff4 <TIM4_IRQHandler+0x18>
 8006fe8:	4b15      	ldr	r3, [pc, #84]	; (8007040 <TIM4_IRQHandler+0x64>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	3301      	adds	r3, #1
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	4b13      	ldr	r3, [pc, #76]	; (8007040 <TIM4_IRQHandler+0x64>)
 8006ff2:	701a      	strb	r2, [r3, #0]
 8006ff4:	4b11      	ldr	r3, [pc, #68]	; (800703c <TIM4_IRQHandler+0x60>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	4b0f      	ldr	r3, [pc, #60]	; (800703c <TIM4_IRQHandler+0x60>)
 8006ffe:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_4]);
 8007000:	4810      	ldr	r0, [pc, #64]	; (8007044 <TIM4_IRQHandler+0x68>)
 8007002:	f7fc fb6e 	bl	80036e2 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8007006:	4b0d      	ldr	r3, [pc, #52]	; (800703c <TIM4_IRQHandler+0x60>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <TIM4_IRQHandler+0x3e>
 800700e:	4b0b      	ldr	r3, [pc, #44]	; (800703c <TIM4_IRQHandler+0x60>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	3b01      	subs	r3, #1
 8007014:	b2da      	uxtb	r2, r3
 8007016:	4b09      	ldr	r3, [pc, #36]	; (800703c <TIM4_IRQHandler+0x60>)
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	4b08      	ldr	r3, [pc, #32]	; (800703c <TIM4_IRQHandler+0x60>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <TIM4_IRQHandler+0x5a>
 8007022:	4b07      	ldr	r3, [pc, #28]	; (8007040 <TIM4_IRQHandler+0x64>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <TIM4_IRQHandler+0x5a>
 800702a:	4b05      	ldr	r3, [pc, #20]	; (8007040 <TIM4_IRQHandler+0x64>)
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	3b01      	subs	r3, #1
 8007030:	b2da      	uxtb	r2, r3
 8007032:	4b03      	ldr	r3, [pc, #12]	; (8007040 <TIM4_IRQHandler+0x64>)
 8007034:	701a      	strb	r2, [r3, #0]
}
 8007036:	bf00      	nop
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20002bb2 	.word	0x20002bb2
 8007040:	20002bb1 	.word	0x20002bb1
 8007044:	2000201c 	.word	0x2000201c

08007048 <TIM5_IRQHandler>:

/*
 * Function: TIM5_IRQHandler
 */
void_t TIM5_IRQHandler (void_t)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800704c:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <TIM5_IRQHandler+0x60>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <TIM5_IRQHandler+0x18>
 8007054:	4b15      	ldr	r3, [pc, #84]	; (80070ac <TIM5_IRQHandler+0x64>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	3301      	adds	r3, #1
 800705a:	b2da      	uxtb	r2, r3
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <TIM5_IRQHandler+0x64>)
 800705e:	701a      	strb	r2, [r3, #0]
 8007060:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <TIM5_IRQHandler+0x60>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	3301      	adds	r3, #1
 8007066:	b2da      	uxtb	r2, r3
 8007068:	4b0f      	ldr	r3, [pc, #60]	; (80070a8 <TIM5_IRQHandler+0x60>)
 800706a:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_5]);
 800706c:	4810      	ldr	r0, [pc, #64]	; (80070b0 <TIM5_IRQHandler+0x68>)
 800706e:	f7fc fb38 	bl	80036e2 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <TIM5_IRQHandler+0x60>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <TIM5_IRQHandler+0x3e>
 800707a:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <TIM5_IRQHandler+0x60>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	3b01      	subs	r3, #1
 8007080:	b2da      	uxtb	r2, r3
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <TIM5_IRQHandler+0x60>)
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	4b08      	ldr	r3, [pc, #32]	; (80070a8 <TIM5_IRQHandler+0x60>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d109      	bne.n	80070a2 <TIM5_IRQHandler+0x5a>
 800708e:	4b07      	ldr	r3, [pc, #28]	; (80070ac <TIM5_IRQHandler+0x64>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <TIM5_IRQHandler+0x5a>
 8007096:	4b05      	ldr	r3, [pc, #20]	; (80070ac <TIM5_IRQHandler+0x64>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	3b01      	subs	r3, #1
 800709c:	b2da      	uxtb	r2, r3
 800709e:	4b03      	ldr	r3, [pc, #12]	; (80070ac <TIM5_IRQHandler+0x64>)
 80070a0:	701a      	strb	r2, [r3, #0]
}
 80070a2:	bf00      	nop
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20002bb2 	.word	0x20002bb2
 80070ac:	20002bb1 	.word	0x20002bb1
 80070b0:	20002064 	.word	0x20002064

080070b4 <TIM7_IRQHandler>:

/*
 * Function: TIM7_IRQHandler
 */
void_t TIM7_IRQHandler (void_t)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80070b8:	4b16      	ldr	r3, [pc, #88]	; (8007114 <TIM7_IRQHandler+0x60>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d105      	bne.n	80070cc <TIM7_IRQHandler+0x18>
 80070c0:	4b15      	ldr	r3, [pc, #84]	; (8007118 <TIM7_IRQHandler+0x64>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	4b13      	ldr	r3, [pc, #76]	; (8007118 <TIM7_IRQHandler+0x64>)
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	4b11      	ldr	r3, [pc, #68]	; (8007114 <TIM7_IRQHandler+0x60>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	3301      	adds	r3, #1
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	4b0f      	ldr	r3, [pc, #60]	; (8007114 <TIM7_IRQHandler+0x60>)
 80070d6:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_7]);
 80070d8:	4810      	ldr	r0, [pc, #64]	; (800711c <TIM7_IRQHandler+0x68>)
 80070da:	f7fc fb02 	bl	80036e2 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 80070de:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <TIM7_IRQHandler+0x60>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d005      	beq.n	80070f2 <TIM7_IRQHandler+0x3e>
 80070e6:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <TIM7_IRQHandler+0x60>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <TIM7_IRQHandler+0x60>)
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	4b08      	ldr	r3, [pc, #32]	; (8007114 <TIM7_IRQHandler+0x60>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <TIM7_IRQHandler+0x5a>
 80070fa:	4b07      	ldr	r3, [pc, #28]	; (8007118 <TIM7_IRQHandler+0x64>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <TIM7_IRQHandler+0x5a>
 8007102:	4b05      	ldr	r3, [pc, #20]	; (8007118 <TIM7_IRQHandler+0x64>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	3b01      	subs	r3, #1
 8007108:	b2da      	uxtb	r2, r3
 800710a:	4b03      	ldr	r3, [pc, #12]	; (8007118 <TIM7_IRQHandler+0x64>)
 800710c:	701a      	strb	r2, [r3, #0]
}
 800710e:	bf00      	nop
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20002bb2 	.word	0x20002bb2
 8007118:	20002bb1 	.word	0x20002bb1
 800711c:	200020f4 	.word	0x200020f4

08007120 <drv_traceTransmitUnsafe>:

/*
 * Function: drv_traceTransmitUnsafe
 */
GOS_INLINE gos_result_t drv_traceTransmitUnsafe (char_t* pMessage)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8007128:	23ae      	movs	r3, #174	; 0xae
 800712a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800712c:	2300      	movs	r3, #0
 800712e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <drv_traceTransmitUnsafe+0x3c>)
 8007132:	789b      	ldrb	r3, [r3, #2]
 8007134:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitBlocking(instance, (u8_t*)pMessage, strlen(pMessage),
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7f9 f8ca 	bl	80002d0 <strlen>
 800713c:	4603      	mov	r3, r0
 800713e:	b29a      	uxth	r2, r3
 8007140:	4b07      	ldr	r3, [pc, #28]	; (8007160 <drv_traceTransmitUnsafe+0x40>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	7bb8      	ldrb	r0, [r7, #14]
 8007146:	6879      	ldr	r1, [r7, #4]
 8007148:	f000 f982 	bl	8007450 <drv_uartTransmitBlocking>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	08014650 	.word	0x08014650
 8007160:	200002e0 	.word	0x200002e0

08007164 <drv_traceTransmit>:

/*
 * Function: drv_traceTransmit
 */
GOS_INLINE gos_result_t drv_traceTransmit (char_t* pMessage)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af02      	add	r7, sp, #8
 800716a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800716c:	23ae      	movs	r3, #174	; 0xae
 800716e:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8007170:	2300      	movs	r3, #0
 8007172:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 8007174:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <drv_traceTransmit+0x44>)
 8007176:	789b      	ldrb	r3, [r3, #2]
 8007178:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitDMA(instance, (u8_t*)pMessage, strlen(pMessage),
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7f9 f8a8 	bl	80002d0 <strlen>
 8007180:	4603      	mov	r3, r0
 8007182:	b29a      	uxth	r2, r3
 8007184:	4b09      	ldr	r3, [pc, #36]	; (80071ac <drv_traceTransmit+0x48>)
 8007186:	6819      	ldr	r1, [r3, #0]
 8007188:	4b08      	ldr	r3, [pc, #32]	; (80071ac <drv_traceTransmit+0x48>)
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	7bb8      	ldrb	r0, [r7, #14]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	460b      	mov	r3, r1
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	f000 f9f4 	bl	8007580 <drv_uartTransmitDMA>
 8007198:	4603      	mov	r3, r0
 800719a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	08014650 	.word	0x08014650
 80071ac:	200002e0 	.word	0x200002e0

080071b0 <drv_uartInit>:

/*
 * Function: drv_uartInit
 */
gos_result_t drv_uartInit (void_t)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 80071b6:	2355      	movs	r3, #85	; 0x55
 80071b8:	71fb      	strb	r3, [r7, #7]
    u8_t         uartIdx              = 0u;
 80071ba:	2300      	movs	r3, #0
 80071bc:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 80071be:	2300      	movs	r3, #0
 80071c0:	71bb      	strb	r3, [r7, #6]
 80071c2:	e00e      	b.n	80071e2 <drv_uartInit+0x32>
        {
            GOS_CONCAT_RESULT(uartDriverInitResult, drv_uartInitInstance(uartIdx));
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	2b55      	cmp	r3, #85	; 0x55
 80071c8:	d106      	bne.n	80071d8 <drv_uartInit+0x28>
 80071ca:	79bb      	ldrb	r3, [r7, #6]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 f81b 	bl	8007208 <drv_uartInitInstance>
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
 80071d6:	e001      	b.n	80071dc <drv_uartInit+0x2c>
 80071d8:	23ae      	movs	r3, #174	; 0xae
 80071da:	71fb      	strb	r3, [r7, #7]
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 80071dc:	79bb      	ldrb	r3, [r7, #6]
 80071de:	3301      	adds	r3, #1
 80071e0:	71bb      	strb	r3, [r7, #6]
 80071e2:	79ba      	ldrb	r2, [r7, #6]
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <drv_uartInit+0x50>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4906      	ldr	r1, [pc, #24]	; (8007204 <drv_uartInit+0x54>)
 80071ea:	fba1 1303 	umull	r1, r3, r1, r3
 80071ee:	095b      	lsrs	r3, r3, #5
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d3e7      	bcc.n	80071c4 <drv_uartInit+0x14>
        // Configuration array is NULL pointer.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
        uartDriverInitResult = GOS_ERROR;
    }

    return uartDriverInitResult;
 80071f4:	79fb      	ldrb	r3, [r7, #7]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	2000030c 	.word	0x2000030c
 8007204:	cccccccd 	.word	0xcccccccd

08007208 <drv_uartInitInstance>:

/*
 * Function: drv_uartInitInstance
 */
gos_result_t drv_uartInitInstance (u8_t uartInstanceIndex)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             uartInitResult = GOS_ERROR;
 8007212:	23ae      	movs	r3, #174	; 0xae
 8007214:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance       = 0u;
 8007216:	2300      	movs	r3, #0
 8007218:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        if (uartInstanceIndex < (uartConfigSize / sizeof(drv_uartDescriptor_t)))
 800721a:	79fa      	ldrb	r2, [r7, #7]
 800721c:	4b82      	ldr	r3, [pc, #520]	; (8007428 <drv_uartInitInstance+0x220>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4982      	ldr	r1, [pc, #520]	; (800742c <drv_uartInitInstance+0x224>)
 8007222:	fba1 1303 	umull	r1, r3, r1, r3
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	429a      	cmp	r2, r3
 800722a:	f080 80f2 	bcs.w	8007412 <drv_uartInitInstance+0x20a>
        {
            instance = uartConfig[uartInstanceIndex].periphInstance;
 800722e:	79fa      	ldrb	r2, [r7, #7]
 8007230:	497f      	ldr	r1, [pc, #508]	; (8007430 <drv_uartInitInstance+0x228>)
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	00db      	lsls	r3, r3, #3
 800723a:	440b      	add	r3, r1
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	73bb      	strb	r3, [r7, #14]

            huarts[instance].Instance          = uartInstanceLut[instance];
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	7bba      	ldrb	r2, [r7, #14]
 8007244:	497b      	ldr	r1, [pc, #492]	; (8007434 <drv_uartInitInstance+0x22c>)
 8007246:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800724a:	487b      	ldr	r0, [pc, #492]	; (8007438 <drv_uartInitInstance+0x230>)
 800724c:	4613      	mov	r3, r2
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	4413      	add	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4403      	add	r3, r0
 8007256:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.BaudRate     = uartConfig[uartInstanceIndex].baudRate;
 8007258:	79f9      	ldrb	r1, [r7, #7]
 800725a:	7bba      	ldrb	r2, [r7, #14]
 800725c:	4874      	ldr	r0, [pc, #464]	; (8007430 <drv_uartInitInstance+0x228>)
 800725e:	460b      	mov	r3, r1
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	440b      	add	r3, r1
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	4403      	add	r3, r0
 8007268:	3304      	adds	r3, #4
 800726a:	6819      	ldr	r1, [r3, #0]
 800726c:	4872      	ldr	r0, [pc, #456]	; (8007438 <drv_uartInitInstance+0x230>)
 800726e:	4613      	mov	r3, r2
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4403      	add	r3, r0
 8007278:	3304      	adds	r3, #4
 800727a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.WordLength   = uartConfig[uartInstanceIndex].wordLength;
 800727c:	79f9      	ldrb	r1, [r7, #7]
 800727e:	7bba      	ldrb	r2, [r7, #14]
 8007280:	486b      	ldr	r0, [pc, #428]	; (8007430 <drv_uartInitInstance+0x228>)
 8007282:	460b      	mov	r3, r1
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	4403      	add	r3, r0
 800728c:	3308      	adds	r3, #8
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	4869      	ldr	r0, [pc, #420]	; (8007438 <drv_uartInitInstance+0x230>)
 8007292:	4613      	mov	r3, r2
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4403      	add	r3, r0
 800729c:	3308      	adds	r3, #8
 800729e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.StopBits     = uartConfig[uartInstanceIndex].stopBits;
 80072a0:	79f9      	ldrb	r1, [r7, #7]
 80072a2:	7bba      	ldrb	r2, [r7, #14]
 80072a4:	4862      	ldr	r0, [pc, #392]	; (8007430 <drv_uartInitInstance+0x228>)
 80072a6:	460b      	mov	r3, r1
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	00db      	lsls	r3, r3, #3
 80072ae:	4403      	add	r3, r0
 80072b0:	330c      	adds	r3, #12
 80072b2:	6819      	ldr	r1, [r3, #0]
 80072b4:	4860      	ldr	r0, [pc, #384]	; (8007438 <drv_uartInitInstance+0x230>)
 80072b6:	4613      	mov	r3, r2
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4403      	add	r3, r0
 80072c0:	330c      	adds	r3, #12
 80072c2:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Parity       = uartConfig[uartInstanceIndex].parity;
 80072c4:	79f9      	ldrb	r1, [r7, #7]
 80072c6:	7bba      	ldrb	r2, [r7, #14]
 80072c8:	4859      	ldr	r0, [pc, #356]	; (8007430 <drv_uartInitInstance+0x228>)
 80072ca:	460b      	mov	r3, r1
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	4403      	add	r3, r0
 80072d4:	3310      	adds	r3, #16
 80072d6:	6819      	ldr	r1, [r3, #0]
 80072d8:	4857      	ldr	r0, [pc, #348]	; (8007438 <drv_uartInitInstance+0x230>)
 80072da:	4613      	mov	r3, r2
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4403      	add	r3, r0
 80072e4:	3310      	adds	r3, #16
 80072e6:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Mode         = uartConfig[uartInstanceIndex].mode;
 80072e8:	79f9      	ldrb	r1, [r7, #7]
 80072ea:	7bba      	ldrb	r2, [r7, #14]
 80072ec:	4850      	ldr	r0, [pc, #320]	; (8007430 <drv_uartInitInstance+0x228>)
 80072ee:	460b      	mov	r3, r1
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	440b      	add	r3, r1
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	4403      	add	r3, r0
 80072f8:	3314      	adds	r3, #20
 80072fa:	6819      	ldr	r1, [r3, #0]
 80072fc:	484e      	ldr	r0, [pc, #312]	; (8007438 <drv_uartInitInstance+0x230>)
 80072fe:	4613      	mov	r3, r2
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4403      	add	r3, r0
 8007308:	3314      	adds	r3, #20
 800730a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.HwFlowCtl    = uartConfig[uartInstanceIndex].hwFlowControl;
 800730c:	79f9      	ldrb	r1, [r7, #7]
 800730e:	7bba      	ldrb	r2, [r7, #14]
 8007310:	4847      	ldr	r0, [pc, #284]	; (8007430 <drv_uartInitInstance+0x228>)
 8007312:	460b      	mov	r3, r1
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	4403      	add	r3, r0
 800731c:	3318      	adds	r3, #24
 800731e:	6819      	ldr	r1, [r3, #0]
 8007320:	4845      	ldr	r0, [pc, #276]	; (8007438 <drv_uartInitInstance+0x230>)
 8007322:	4613      	mov	r3, r2
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4403      	add	r3, r0
 800732c:	3318      	adds	r3, #24
 800732e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.OverSampling = uartConfig[uartInstanceIndex].overSampling;
 8007330:	79f9      	ldrb	r1, [r7, #7]
 8007332:	7bba      	ldrb	r2, [r7, #14]
 8007334:	483e      	ldr	r0, [pc, #248]	; (8007430 <drv_uartInitInstance+0x228>)
 8007336:	460b      	mov	r3, r1
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	4403      	add	r3, r0
 8007340:	331c      	adds	r3, #28
 8007342:	6819      	ldr	r1, [r3, #0]
 8007344:	483c      	ldr	r0, [pc, #240]	; (8007438 <drv_uartInitInstance+0x230>)
 8007346:	4613      	mov	r3, r2
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4403      	add	r3, r0
 8007350:	331c      	adds	r3, #28
 8007352:	6019      	str	r1, [r3, #0]

            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 8007354:	7bba      	ldrb	r2, [r7, #14]
 8007356:	4613      	mov	r3, r2
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4a36      	ldr	r2, [pc, #216]	; (8007438 <drv_uartInitInstance+0x230>)
 8007360:	4413      	add	r3, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f7fc fd7c 	bl	8003e60 <HAL_UART_Init>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d14a      	bne.n	8007404 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4a32      	ldr	r2, [pc, #200]	; (800743c <drv_uartInitInstance+0x234>)
 8007374:	4413      	add	r3, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f005 fce4 	bl	800cd44 <gos_mutexInit>
 800737c:	4603      	mov	r3, r0
            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 800737e:	2b55      	cmp	r3, #85	; 0x55
 8007380:	d140      	bne.n	8007404 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4a2e      	ldr	r2, [pc, #184]	; (8007440 <drv_uartInitInstance+0x238>)
 8007388:	4413      	add	r3, r2
 800738a:	4618      	mov	r0, r3
 800738c:	f005 fcda 	bl	800cd44 <gos_mutexInit>
 8007390:	4603      	mov	r3, r0
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 8007392:	2b55      	cmp	r3, #85	; 0x55
 8007394:	d136      	bne.n	8007404 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 8007396:	7bba      	ldrb	r2, [r7, #14]
 8007398:	4613      	mov	r3, r2
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4a28      	ldr	r2, [pc, #160]	; (8007444 <drv_uartInitInstance+0x23c>)
 80073a2:	4413      	add	r3, r2
 80073a4:	4618      	mov	r0, r3
 80073a6:	f008 f93d 	bl	800f624 <gos_triggerInit>
 80073aa:	4603      	mov	r3, r0
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 80073ac:	2b55      	cmp	r3, #85	; 0x55
 80073ae:	d129      	bne.n	8007404 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 80073b0:	7bba      	ldrb	r2, [r7, #14]
 80073b2:	4613      	mov	r3, r2
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4a23      	ldr	r2, [pc, #140]	; (8007448 <drv_uartInitInstance+0x240>)
 80073bc:	4413      	add	r3, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f008 f930 	bl	800f624 <gos_triggerInit>
 80073c4:	4603      	mov	r3, r0
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 80073c6:	2b55      	cmp	r3, #85	; 0x55
 80073c8:	d11c      	bne.n	8007404 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 80073ca:	7bba      	ldrb	r2, [r7, #14]
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4a1b      	ldr	r2, [pc, #108]	; (8007444 <drv_uartInitInstance+0x23c>)
 80073d6:	4413      	add	r3, r2
 80073d8:	4618      	mov	r0, r3
 80073da:	f008 f93f 	bl	800f65c <gos_triggerReset>
 80073de:	4603      	mov	r3, r0
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 80073e0:	2b55      	cmp	r3, #85	; 0x55
 80073e2:	d10f      	bne.n	8007404 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartTxReadyTriggers[instance]) == GOS_SUCCESS
 80073e4:	7bba      	ldrb	r2, [r7, #14]
 80073e6:	4613      	mov	r3, r2
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4a16      	ldr	r2, [pc, #88]	; (8007448 <drv_uartInitInstance+0x240>)
 80073f0:	4413      	add	r3, r2
 80073f2:	4618      	mov	r0, r3
 80073f4:	f008 f932 	bl	800f65c <gos_triggerReset>
 80073f8:	4603      	mov	r3, r0
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 80073fa:	2b55      	cmp	r3, #85	; 0x55
 80073fc:	d102      	bne.n	8007404 <drv_uartInitInstance+0x1fc>
                )
            {
                uartInitResult = GOS_SUCCESS;
 80073fe:	2355      	movs	r3, #85	; 0x55
 8007400:	73fb      	strb	r3, [r7, #15]
 8007402:	e00c      	b.n	800741e <drv_uartInitInstance+0x216>
            }
            else
            {
                // Init error.
                DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INSTANCE_INIT);
 8007404:	4b11      	ldr	r3, [pc, #68]	; (800744c <drv_uartInitInstance+0x244>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f043 0304 	orr.w	r3, r3, #4
 800740c:	4a0f      	ldr	r2, [pc, #60]	; (800744c <drv_uartInitInstance+0x244>)
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	e005      	b.n	800741e <drv_uartInitInstance+0x216>
            }
        }
        else
        {
            // Index is out of array boundary.
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INDEX_OUT_OF_BOUND);
 8007412:	4b0e      	ldr	r3, [pc, #56]	; (800744c <drv_uartInitInstance+0x244>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f043 0302 	orr.w	r3, r3, #2
 800741a:	4a0c      	ldr	r2, [pc, #48]	; (800744c <drv_uartInitInstance+0x244>)
 800741c:	6013      	str	r3, [r2, #0]
    {
        // Configuration is NULL.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
    }

    return uartInitResult;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	2000030c 	.word	0x2000030c
 800742c:	cccccccd 	.word	0xcccccccd
 8007430:	080145d8 	.word	0x080145d8
 8007434:	20000390 	.word	0x20000390
 8007438:	20002418 	.word	0x20002418
 800743c:	200025b0 	.word	0x200025b0
 8007440:	200025c8 	.word	0x200025c8
 8007444:	200025e0 	.word	0x200025e0
 8007448:	20002628 	.word	0x20002628
 800744c:	20002414 	.word	0x20002414

08007450 <drv_uartTransmitBlocking>:
 */
GOS_INLINE gos_result_t drv_uartTransmitBlocking (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t timeout
        )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	607b      	str	r3, [r7, #4]
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]
 800745e:	4613      	mov	r3, r2
 8007460:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 8007462:	23ae      	movs	r3, #174	; 0xae
 8007464:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8007466:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <drv_uartTransmitBlocking+0x8c>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	3301      	adds	r3, #1
 800746c:	b2da      	uxtb	r2, r3
 800746e:	4b1b      	ldr	r3, [pc, #108]	; (80074dc <drv_uartTransmitBlocking+0x8c>)
 8007470:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 8007472:	7bfa      	ldrb	r2, [r7, #15]
 8007474:	4613      	mov	r3, r2
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4a18      	ldr	r2, [pc, #96]	; (80074e0 <drv_uartTransmitBlocking+0x90>)
 800747e:	4413      	add	r3, r2
 8007480:	4618      	mov	r0, r3
 8007482:	f7fc ff91 	bl	80043a8 <HAL_UART_Abort>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d111      	bne.n	80074b0 <drv_uartTransmitBlocking+0x60>
        HAL_UART_Transmit(&huarts[instance], message, size, timeout) == HAL_OK)
 800748c:	7bfa      	ldrb	r2, [r7, #15]
 800748e:	4613      	mov	r3, r2
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4a12      	ldr	r2, [pc, #72]	; (80074e0 <drv_uartTransmitBlocking+0x90>)
 8007498:	1898      	adds	r0, r3, r2
 800749a:	89ba      	ldrh	r2, [r7, #12]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68b9      	ldr	r1, [r7, #8]
 80074a0:	f7fc fd2b 	bl	8003efa <HAL_UART_Transmit>
 80074a4:	4603      	mov	r3, r0
    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d102      	bne.n	80074b0 <drv_uartTransmitBlocking+0x60>
    {
        uartTransmitResult = GOS_SUCCESS;
 80074aa:	2355      	movs	r3, #85	; 0x55
 80074ac:	75fb      	strb	r3, [r7, #23]
 80074ae:	e005      	b.n	80074bc <drv_uartTransmitBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_BLOCKING);
 80074b0:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <drv_uartTransmitBlocking+0x94>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f043 0310 	orr.w	r3, r3, #16
 80074b8:	4a0a      	ldr	r2, [pc, #40]	; (80074e4 <drv_uartTransmitBlocking+0x94>)
 80074ba:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 80074bc:	4b07      	ldr	r3, [pc, #28]	; (80074dc <drv_uartTransmitBlocking+0x8c>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <drv_uartTransmitBlocking+0x80>
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <drv_uartTransmitBlocking+0x8c>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	4b03      	ldr	r3, [pc, #12]	; (80074dc <drv_uartTransmitBlocking+0x8c>)
 80074ce:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20002bb1 	.word	0x20002bb1
 80074e0:	20002418 	.word	0x20002418
 80074e4:	20002414 	.word	0x20002414

080074e8 <drv_uartReceiveBlocking>:
 */
GOS_INLINE gos_result_t drv_uartReceiveBlocking (
        drv_uartPeriphInstance_t instance, u8_t* pData,
        u16_t                    size,     u32_t timeout
        )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607b      	str	r3, [r7, #4]
 80074f2:	4603      	mov	r3, r0
 80074f4:	73fb      	strb	r3, [r7, #15]
 80074f6:	4613      	mov	r3, r2
 80074f8:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 80074fa:	23ae      	movs	r3, #174	; 0xae
 80074fc:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 80074fe:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <drv_uartReceiveBlocking+0x8c>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	b2da      	uxtb	r2, r3
 8007506:	4b1b      	ldr	r3, [pc, #108]	; (8007574 <drv_uartReceiveBlocking+0x8c>)
 8007508:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 800750a:	7bfa      	ldrb	r2, [r7, #15]
 800750c:	4613      	mov	r3, r2
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4a18      	ldr	r2, [pc, #96]	; (8007578 <drv_uartReceiveBlocking+0x90>)
 8007516:	4413      	add	r3, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f7fc ff45 	bl	80043a8 <HAL_UART_Abort>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d111      	bne.n	8007548 <drv_uartReceiveBlocking+0x60>
    	HAL_UART_Receive(&huarts[instance], pData, size, timeout) == HAL_OK)
 8007524:	7bfa      	ldrb	r2, [r7, #15]
 8007526:	4613      	mov	r3, r2
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4a12      	ldr	r2, [pc, #72]	; (8007578 <drv_uartReceiveBlocking+0x90>)
 8007530:	1898      	adds	r0, r3, r2
 8007532:	89ba      	ldrh	r2, [r7, #12]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	f7fc fd71 	bl	800401e <HAL_UART_Receive>
 800753c:	4603      	mov	r3, r0
    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 800753e:	2b00      	cmp	r3, #0
 8007540:	d102      	bne.n	8007548 <drv_uartReceiveBlocking+0x60>
    {
    	uartReceiveResult = GOS_SUCCESS;
 8007542:	2355      	movs	r3, #85	; 0x55
 8007544:	75fb      	strb	r3, [r7, #23]
 8007546:	e005      	b.n	8007554 <drv_uartReceiveBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_BLOCKING);
 8007548:	4b0c      	ldr	r3, [pc, #48]	; (800757c <drv_uartReceiveBlocking+0x94>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007550:	4a0a      	ldr	r2, [pc, #40]	; (800757c <drv_uartReceiveBlocking+0x94>)
 8007552:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 8007554:	4b07      	ldr	r3, [pc, #28]	; (8007574 <drv_uartReceiveBlocking+0x8c>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <drv_uartReceiveBlocking+0x80>
 800755c:	4b05      	ldr	r3, [pc, #20]	; (8007574 <drv_uartReceiveBlocking+0x8c>)
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	3b01      	subs	r3, #1
 8007562:	b2da      	uxtb	r2, r3
 8007564:	4b03      	ldr	r3, [pc, #12]	; (8007574 <drv_uartReceiveBlocking+0x8c>)
 8007566:	701a      	strb	r2, [r3, #0]

    return uartReceiveResult;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20002bb1 	.word	0x20002bb1
 8007578:	20002418 	.word	0x20002418
 800757c:	20002414 	.word	0x20002414

08007580 <drv_uartTransmitDMA>:
GOS_INLINE gos_result_t drv_uartTransmitDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	4603      	mov	r3, r0
 800758c:	73fb      	strb	r3, [r7, #15]
 800758e:	4613      	mov	r3, r2
 8007590:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 8007592:	23ae      	movs	r3, #174	; 0xae
 8007594:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8007596:	7bfb      	ldrb	r3, [r7, #15]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4a2d      	ldr	r2, [pc, #180]	; (8007650 <drv_uartTransmitDMA+0xd0>)
 800759c:	4413      	add	r3, r2
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f005 fbe9 	bl	800cd78 <gos_mutexLock>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b55      	cmp	r3, #85	; 0x55
 80075aa:	d13e      	bne.n	800762a <drv_uartTransmitDMA+0xaa>
    {
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 80075ac:	7bfa      	ldrb	r2, [r7, #15]
 80075ae:	4613      	mov	r3, r2
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4a27      	ldr	r2, [pc, #156]	; (8007654 <drv_uartTransmitDMA+0xd4>)
 80075b8:	4413      	add	r3, r2
 80075ba:	89ba      	ldrh	r2, [r7, #12]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fc fe44 	bl	800424c <HAL_UART_Transmit_DMA>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d11e      	bne.n	8007608 <drv_uartTransmitDMA+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80075ca:	7bfa      	ldrb	r2, [r7, #15]
 80075cc:	4613      	mov	r3, r2
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4a20      	ldr	r2, [pc, #128]	; (8007658 <drv_uartTransmitDMA+0xd8>)
 80075d6:	4413      	add	r3, r2
 80075d8:	6a3a      	ldr	r2, [r7, #32]
 80075da:	2101      	movs	r1, #1
 80075dc:	4618      	mov	r0, r3
 80075de:	f008 f895 	bl	800f70c <gos_triggerWait>
 80075e2:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 80075e4:	2b55      	cmp	r3, #85	; 0x55
 80075e6:	d10f      	bne.n	8007608 <drv_uartTransmitDMA+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 80075e8:	7bfa      	ldrb	r2, [r7, #15]
 80075ea:	4613      	mov	r3, r2
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4a19      	ldr	r2, [pc, #100]	; (8007658 <drv_uartTransmitDMA+0xd8>)
 80075f4:	4413      	add	r3, r2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f008 f830 	bl	800f65c <gos_triggerReset>
 80075fc:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80075fe:	2b55      	cmp	r3, #85	; 0x55
 8007600:	d102      	bne.n	8007608 <drv_uartTransmitDMA+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 8007602:	2355      	movs	r3, #85	; 0x55
 8007604:	75fb      	strb	r3, [r7, #23]
 8007606:	e016      	b.n	8007636 <drv_uartTransmitDMA+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8007608:	7bfa      	ldrb	r2, [r7, #15]
 800760a:	4613      	mov	r3, r2
 800760c:	011b      	lsls	r3, r3, #4
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4a10      	ldr	r2, [pc, #64]	; (8007654 <drv_uartTransmitDMA+0xd4>)
 8007614:	4413      	add	r3, r2
 8007616:	4618      	mov	r0, r3
 8007618:	f7fc ffb2 	bl	8004580 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_TRIG_HAL);
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <drv_uartTransmitDMA+0xdc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007624:	4a0d      	ldr	r2, [pc, #52]	; (800765c <drv_uartTransmitDMA+0xdc>)
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	e005      	b.n	8007636 <drv_uartTransmitDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_MUTEX);
 800762a:	4b0c      	ldr	r3, [pc, #48]	; (800765c <drv_uartTransmitDMA+0xdc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f043 0320 	orr.w	r3, r3, #32
 8007632:	4a0a      	ldr	r2, [pc, #40]	; (800765c <drv_uartTransmitDMA+0xdc>)
 8007634:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4a05      	ldr	r2, [pc, #20]	; (8007650 <drv_uartTransmitDMA+0xd0>)
 800763c:	4413      	add	r3, r2
 800763e:	4618      	mov	r0, r3
 8007640:	f005 fca0 	bl	800cf84 <gos_mutexUnlock>

    return uartTransmitResult;
 8007644:	7dfb      	ldrb	r3, [r7, #23]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	200025c8 	.word	0x200025c8
 8007654:	20002418 	.word	0x20002418
 8007658:	20002628 	.word	0x20002628
 800765c:	20002414 	.word	0x20002414

08007660 <drv_uartReceiveDMA>:
GOS_INLINE gos_result_t drv_uartReceiveDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607b      	str	r3, [r7, #4]
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]
 800766e:	4613      	mov	r3, r2
 8007670:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 8007672:	23ae      	movs	r3, #174	; 0xae
 8007674:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4a2d      	ldr	r2, [pc, #180]	; (8007730 <drv_uartReceiveDMA+0xd0>)
 800767c:	4413      	add	r3, r2
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	4618      	mov	r0, r3
 8007682:	f005 fb79 	bl	800cd78 <gos_mutexLock>
 8007686:	4603      	mov	r3, r0
 8007688:	2b55      	cmp	r3, #85	; 0x55
 800768a:	d13e      	bne.n	800770a <drv_uartReceiveDMA+0xaa>
    {
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 800768c:	7bfa      	ldrb	r2, [r7, #15]
 800768e:	4613      	mov	r3, r2
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4a27      	ldr	r2, [pc, #156]	; (8007734 <drv_uartReceiveDMA+0xd4>)
 8007698:	4413      	add	r3, r2
 800769a:	89ba      	ldrh	r2, [r7, #12]
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fc fe52 	bl	8004348 <HAL_UART_Receive_DMA>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d11e      	bne.n	80076e8 <drv_uartReceiveDMA+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80076aa:	7bfa      	ldrb	r2, [r7, #15]
 80076ac:	4613      	mov	r3, r2
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4a20      	ldr	r2, [pc, #128]	; (8007738 <drv_uartReceiveDMA+0xd8>)
 80076b6:	4413      	add	r3, r2
 80076b8:	6a3a      	ldr	r2, [r7, #32]
 80076ba:	2101      	movs	r1, #1
 80076bc:	4618      	mov	r0, r3
 80076be:	f008 f825 	bl	800f70c <gos_triggerWait>
 80076c2:	4603      	mov	r3, r0
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 80076c4:	2b55      	cmp	r3, #85	; 0x55
 80076c6:	d10f      	bne.n	80076e8 <drv_uartReceiveDMA+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 80076c8:	7bfa      	ldrb	r2, [r7, #15]
 80076ca:	4613      	mov	r3, r2
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	4413      	add	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4a19      	ldr	r2, [pc, #100]	; (8007738 <drv_uartReceiveDMA+0xd8>)
 80076d4:	4413      	add	r3, r2
 80076d6:	4618      	mov	r0, r3
 80076d8:	f007 ffc0 	bl	800f65c <gos_triggerReset>
 80076dc:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80076de:	2b55      	cmp	r3, #85	; 0x55
 80076e0:	d102      	bne.n	80076e8 <drv_uartReceiveDMA+0x88>
        {
            uartReceiveResult = GOS_SUCCESS;
 80076e2:	2355      	movs	r3, #85	; 0x55
 80076e4:	75fb      	strb	r3, [r7, #23]
 80076e6:	e016      	b.n	8007716 <drv_uartReceiveDMA+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 80076e8:	7bfa      	ldrb	r2, [r7, #15]
 80076ea:	4613      	mov	r3, r2
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4a10      	ldr	r2, [pc, #64]	; (8007734 <drv_uartReceiveDMA+0xd4>)
 80076f4:	4413      	add	r3, r2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fc ff42 	bl	8004580 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_TRIG_HAL);
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <drv_uartReceiveDMA+0xdc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007704:	4a0d      	ldr	r2, [pc, #52]	; (800773c <drv_uartReceiveDMA+0xdc>)
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	e005      	b.n	8007716 <drv_uartReceiveDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_MUTEX);
 800770a:	4b0c      	ldr	r3, [pc, #48]	; (800773c <drv_uartReceiveDMA+0xdc>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007712:	4a0a      	ldr	r2, [pc, #40]	; (800773c <drv_uartReceiveDMA+0xdc>)
 8007714:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4a05      	ldr	r2, [pc, #20]	; (8007730 <drv_uartReceiveDMA+0xd0>)
 800771c:	4413      	add	r3, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f005 fc30 	bl	800cf84 <gos_mutexUnlock>

    return uartReceiveResult;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200025b0 	.word	0x200025b0
 8007734:	20002418 	.word	0x20002418
 8007738:	200025e0 	.word	0x200025e0
 800773c:	20002414 	.word	0x20002414

08007740 <drv_uartTransmitIT>:
GOS_INLINE gos_result_t drv_uartTransmitIT (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607b      	str	r3, [r7, #4]
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
 800774e:	4613      	mov	r3, r2
 8007750:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 8007752:	23ae      	movs	r3, #174	; 0xae
 8007754:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4a2d      	ldr	r2, [pc, #180]	; (8007810 <drv_uartTransmitIT+0xd0>)
 800775c:	4413      	add	r3, r2
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	4618      	mov	r0, r3
 8007762:	f005 fb09 	bl	800cd78 <gos_mutexLock>
 8007766:	4603      	mov	r3, r0
 8007768:	2b55      	cmp	r3, #85	; 0x55
 800776a:	d13e      	bne.n	80077ea <drv_uartTransmitIT+0xaa>
    {

        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 800776c:	7bfa      	ldrb	r2, [r7, #15]
 800776e:	4613      	mov	r3, r2
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4a27      	ldr	r2, [pc, #156]	; (8007814 <drv_uartTransmitIT+0xd4>)
 8007778:	4413      	add	r3, r2
 800777a:	89ba      	ldrh	r2, [r7, #12]
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	4618      	mov	r0, r3
 8007780:	f7fc fcef 	bl	8004162 <HAL_UART_Transmit_IT>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d11e      	bne.n	80077c8 <drv_uartTransmitIT+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800778a:	7bfa      	ldrb	r2, [r7, #15]
 800778c:	4613      	mov	r3, r2
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4a20      	ldr	r2, [pc, #128]	; (8007818 <drv_uartTransmitIT+0xd8>)
 8007796:	4413      	add	r3, r2
 8007798:	6a3a      	ldr	r2, [r7, #32]
 800779a:	2101      	movs	r1, #1
 800779c:	4618      	mov	r0, r3
 800779e:	f007 ffb5 	bl	800f70c <gos_triggerWait>
 80077a2:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 80077a4:	2b55      	cmp	r3, #85	; 0x55
 80077a6:	d10f      	bne.n	80077c8 <drv_uartTransmitIT+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 80077a8:	7bfa      	ldrb	r2, [r7, #15]
 80077aa:	4613      	mov	r3, r2
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4a19      	ldr	r2, [pc, #100]	; (8007818 <drv_uartTransmitIT+0xd8>)
 80077b4:	4413      	add	r3, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f007 ff50 	bl	800f65c <gos_triggerReset>
 80077bc:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 80077be:	2b55      	cmp	r3, #85	; 0x55
 80077c0:	d102      	bne.n	80077c8 <drv_uartTransmitIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 80077c2:	2355      	movs	r3, #85	; 0x55
 80077c4:	75fb      	strb	r3, [r7, #23]
 80077c6:	e016      	b.n	80077f6 <drv_uartTransmitIT+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 80077c8:	7bfa      	ldrb	r2, [r7, #15]
 80077ca:	4613      	mov	r3, r2
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4a10      	ldr	r2, [pc, #64]	; (8007814 <drv_uartTransmitIT+0xd4>)
 80077d4:	4413      	add	r3, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fc fed2 	bl	8004580 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_TRIG_HAL);
 80077dc:	4b0f      	ldr	r3, [pc, #60]	; (800781c <drv_uartTransmitIT+0xdc>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077e4:	4a0d      	ldr	r2, [pc, #52]	; (800781c <drv_uartTransmitIT+0xdc>)
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	e005      	b.n	80077f6 <drv_uartTransmitIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_MUTEX);
 80077ea:	4b0c      	ldr	r3, [pc, #48]	; (800781c <drv_uartTransmitIT+0xdc>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077f2:	4a0a      	ldr	r2, [pc, #40]	; (800781c <drv_uartTransmitIT+0xdc>)
 80077f4:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4a05      	ldr	r2, [pc, #20]	; (8007810 <drv_uartTransmitIT+0xd0>)
 80077fc:	4413      	add	r3, r2
 80077fe:	4618      	mov	r0, r3
 8007800:	f005 fbc0 	bl	800cf84 <gos_mutexUnlock>

    return uartTransmitResult;
 8007804:	7dfb      	ldrb	r3, [r7, #23]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	200025c8 	.word	0x200025c8
 8007814:	20002418 	.word	0x20002418
 8007818:	20002628 	.word	0x20002628
 800781c:	20002414 	.word	0x20002414

08007820 <drv_uartReceiveIT>:

/*
 * Function: drv_uartReceiveIT
 */
GOS_INLINE gos_result_t drv_uartReceiveIT (drv_uartPeriphInstance_t instance, u8_t* message, u16_t size, u32_t mutexTmo, u32_t triggerTmo)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60b9      	str	r1, [r7, #8]
 8007828:	607b      	str	r3, [r7, #4]
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
 800782e:	4613      	mov	r3, r2
 8007830:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult  = GOS_ERROR;
 8007832:	23ae      	movs	r3, #174	; 0xae
 8007834:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4a2d      	ldr	r2, [pc, #180]	; (80078f0 <drv_uartReceiveIT+0xd0>)
 800783c:	4413      	add	r3, r2
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	4618      	mov	r0, r3
 8007842:	f005 fa99 	bl	800cd78 <gos_mutexLock>
 8007846:	4603      	mov	r3, r0
 8007848:	2b55      	cmp	r3, #85	; 0x55
 800784a:	d13e      	bne.n	80078ca <drv_uartReceiveIT+0xaa>
    {
    	//__HAL_UART_CLEAR_OREFLAG(&huarts[instance]);
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 800784c:	7bfa      	ldrb	r2, [r7, #15]
 800784e:	4613      	mov	r3, r2
 8007850:	011b      	lsls	r3, r3, #4
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4a27      	ldr	r2, [pc, #156]	; (80078f4 <drv_uartReceiveIT+0xd4>)
 8007858:	4413      	add	r3, r2
 800785a:	89ba      	ldrh	r2, [r7, #12]
 800785c:	68b9      	ldr	r1, [r7, #8]
 800785e:	4618      	mov	r0, r3
 8007860:	f7fc fcc4 	bl	80041ec <HAL_UART_Receive_IT>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d11e      	bne.n	80078a8 <drv_uartReceiveIT+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800786a:	7bfa      	ldrb	r2, [r7, #15]
 800786c:	4613      	mov	r3, r2
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	4413      	add	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4a20      	ldr	r2, [pc, #128]	; (80078f8 <drv_uartReceiveIT+0xd8>)
 8007876:	4413      	add	r3, r2
 8007878:	6a3a      	ldr	r2, [r7, #32]
 800787a:	2101      	movs	r1, #1
 800787c:	4618      	mov	r0, r3
 800787e:	f007 ff45 	bl	800f70c <gos_triggerWait>
 8007882:	4603      	mov	r3, r0
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 8007884:	2b55      	cmp	r3, #85	; 0x55
 8007886:	d10f      	bne.n	80078a8 <drv_uartReceiveIT+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 8007888:	7bfa      	ldrb	r2, [r7, #15]
 800788a:	4613      	mov	r3, r2
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	4413      	add	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4a19      	ldr	r2, [pc, #100]	; (80078f8 <drv_uartReceiveIT+0xd8>)
 8007894:	4413      	add	r3, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f007 fee0 	bl	800f65c <gos_triggerReset>
 800789c:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800789e:	2b55      	cmp	r3, #85	; 0x55
 80078a0:	d102      	bne.n	80078a8 <drv_uartReceiveIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * reception ready, we can return.
             */
            uartReceiveResult = GOS_SUCCESS;
 80078a2:	2355      	movs	r3, #85	; 0x55
 80078a4:	75fb      	strb	r3, [r7, #23]
 80078a6:	e016      	b.n	80078d6 <drv_uartReceiveIT+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 80078a8:	7bfa      	ldrb	r2, [r7, #15]
 80078aa:	4613      	mov	r3, r2
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4a10      	ldr	r2, [pc, #64]	; (80078f4 <drv_uartReceiveIT+0xd4>)
 80078b4:	4413      	add	r3, r2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fc fe62 	bl	8004580 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_TRIG_HAL);
 80078bc:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <drv_uartReceiveIT+0xdc>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078c4:	4a0d      	ldr	r2, [pc, #52]	; (80078fc <drv_uartReceiveIT+0xdc>)
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	e005      	b.n	80078d6 <drv_uartReceiveIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_MUTEX);
 80078ca:	4b0c      	ldr	r3, [pc, #48]	; (80078fc <drv_uartReceiveIT+0xdc>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078d2:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <drv_uartReceiveIT+0xdc>)
 80078d4:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 80078d6:	7bfb      	ldrb	r3, [r7, #15]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4a05      	ldr	r2, [pc, #20]	; (80078f0 <drv_uartReceiveIT+0xd0>)
 80078dc:	4413      	add	r3, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f005 fb50 	bl	800cf84 <gos_mutexUnlock>

    return uartReceiveResult;
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	200025b0 	.word	0x200025b0
 80078f4:	20002418 	.word	0x20002418
 80078f8:	200025e0 	.word	0x200025e0
 80078fc:	20002414 	.word	0x20002414

08007900 <USART1_IRQHandler>:

/*
 * Function: USART1_IRQHandler
 */
void_t USART1_IRQHandler (void_t)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8007904:	4b16      	ldr	r3, [pc, #88]	; (8007960 <USART1_IRQHandler+0x60>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d105      	bne.n	8007918 <USART1_IRQHandler+0x18>
 800790c:	4b15      	ldr	r3, [pc, #84]	; (8007964 <USART1_IRQHandler+0x64>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	3301      	adds	r3, #1
 8007912:	b2da      	uxtb	r2, r3
 8007914:	4b13      	ldr	r3, [pc, #76]	; (8007964 <USART1_IRQHandler+0x64>)
 8007916:	701a      	strb	r2, [r3, #0]
 8007918:	4b11      	ldr	r3, [pc, #68]	; (8007960 <USART1_IRQHandler+0x60>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	3301      	adds	r3, #1
 800791e:	b2da      	uxtb	r2, r3
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <USART1_IRQHandler+0x60>)
 8007922:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_1]);
 8007924:	4810      	ldr	r0, [pc, #64]	; (8007968 <USART1_IRQHandler+0x68>)
 8007926:	f7fc ff3f 	bl	80047a8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800792a:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <USART1_IRQHandler+0x60>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <USART1_IRQHandler+0x3e>
 8007932:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <USART1_IRQHandler+0x60>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	3b01      	subs	r3, #1
 8007938:	b2da      	uxtb	r2, r3
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <USART1_IRQHandler+0x60>)
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	4b08      	ldr	r3, [pc, #32]	; (8007960 <USART1_IRQHandler+0x60>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <USART1_IRQHandler+0x5a>
 8007946:	4b07      	ldr	r3, [pc, #28]	; (8007964 <USART1_IRQHandler+0x64>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <USART1_IRQHandler+0x5a>
 800794e:	4b05      	ldr	r3, [pc, #20]	; (8007964 <USART1_IRQHandler+0x64>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	3b01      	subs	r3, #1
 8007954:	b2da      	uxtb	r2, r3
 8007956:	4b03      	ldr	r3, [pc, #12]	; (8007964 <USART1_IRQHandler+0x64>)
 8007958:	701a      	strb	r2, [r3, #0]
}
 800795a:	bf00      	nop
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20002bb2 	.word	0x20002bb2
 8007964:	20002bb1 	.word	0x20002bb1
 8007968:	20002418 	.word	0x20002418

0800796c <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8007970:	4b16      	ldr	r3, [pc, #88]	; (80079cc <USART2_IRQHandler+0x60>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d105      	bne.n	8007984 <USART2_IRQHandler+0x18>
 8007978:	4b15      	ldr	r3, [pc, #84]	; (80079d0 <USART2_IRQHandler+0x64>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	3301      	adds	r3, #1
 800797e:	b2da      	uxtb	r2, r3
 8007980:	4b13      	ldr	r3, [pc, #76]	; (80079d0 <USART2_IRQHandler+0x64>)
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	4b11      	ldr	r3, [pc, #68]	; (80079cc <USART2_IRQHandler+0x60>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	3301      	adds	r3, #1
 800798a:	b2da      	uxtb	r2, r3
 800798c:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <USART2_IRQHandler+0x60>)
 800798e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_2]);
 8007990:	4810      	ldr	r0, [pc, #64]	; (80079d4 <USART2_IRQHandler+0x68>)
 8007992:	f7fc ff09 	bl	80047a8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8007996:	4b0d      	ldr	r3, [pc, #52]	; (80079cc <USART2_IRQHandler+0x60>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d005      	beq.n	80079aa <USART2_IRQHandler+0x3e>
 800799e:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <USART2_IRQHandler+0x60>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <USART2_IRQHandler+0x60>)
 80079a8:	701a      	strb	r2, [r3, #0]
 80079aa:	4b08      	ldr	r3, [pc, #32]	; (80079cc <USART2_IRQHandler+0x60>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d109      	bne.n	80079c6 <USART2_IRQHandler+0x5a>
 80079b2:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <USART2_IRQHandler+0x64>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <USART2_IRQHandler+0x5a>
 80079ba:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <USART2_IRQHandler+0x64>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	3b01      	subs	r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	4b03      	ldr	r3, [pc, #12]	; (80079d0 <USART2_IRQHandler+0x64>)
 80079c4:	701a      	strb	r2, [r3, #0]
}
 80079c6:	bf00      	nop
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20002bb2 	.word	0x20002bb2
 80079d0:	20002bb1 	.word	0x20002bb1
 80079d4:	2000245c 	.word	0x2000245c

080079d8 <USART3_IRQHandler>:

/*
 * Function: USART3_IRQHandler
 */
void_t USART3_IRQHandler (void_t)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 80079dc:	4b16      	ldr	r3, [pc, #88]	; (8007a38 <USART3_IRQHandler+0x60>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <USART3_IRQHandler+0x18>
 80079e4:	4b15      	ldr	r3, [pc, #84]	; (8007a3c <USART3_IRQHandler+0x64>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <USART3_IRQHandler+0x64>)
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <USART3_IRQHandler+0x60>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <USART3_IRQHandler+0x60>)
 80079fa:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_3]);
 80079fc:	4810      	ldr	r0, [pc, #64]	; (8007a40 <USART3_IRQHandler+0x68>)
 80079fe:	f7fc fed3 	bl	80047a8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8007a02:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <USART3_IRQHandler+0x60>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <USART3_IRQHandler+0x3e>
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <USART3_IRQHandler+0x60>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <USART3_IRQHandler+0x60>)
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	4b08      	ldr	r3, [pc, #32]	; (8007a38 <USART3_IRQHandler+0x60>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d109      	bne.n	8007a32 <USART3_IRQHandler+0x5a>
 8007a1e:	4b07      	ldr	r3, [pc, #28]	; (8007a3c <USART3_IRQHandler+0x64>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <USART3_IRQHandler+0x5a>
 8007a26:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <USART3_IRQHandler+0x64>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <USART3_IRQHandler+0x64>)
 8007a30:	701a      	strb	r2, [r3, #0]
}
 8007a32:	bf00      	nop
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20002bb2 	.word	0x20002bb2
 8007a3c:	20002bb1 	.word	0x20002bb1
 8007a40:	200024a0 	.word	0x200024a0

08007a44 <UART4_IRQHandler>:

/*
 * Function: UART4_IRQHandler
 */
void_t UART4_IRQHandler (void_t)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8007a48:	4b16      	ldr	r3, [pc, #88]	; (8007aa4 <UART4_IRQHandler+0x60>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d105      	bne.n	8007a5c <UART4_IRQHandler+0x18>
 8007a50:	4b15      	ldr	r3, [pc, #84]	; (8007aa8 <UART4_IRQHandler+0x64>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	3301      	adds	r3, #1
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	4b13      	ldr	r3, [pc, #76]	; (8007aa8 <UART4_IRQHandler+0x64>)
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <UART4_IRQHandler+0x60>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	4b0f      	ldr	r3, [pc, #60]	; (8007aa4 <UART4_IRQHandler+0x60>)
 8007a66:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_4]);
 8007a68:	4810      	ldr	r0, [pc, #64]	; (8007aac <UART4_IRQHandler+0x68>)
 8007a6a:	f7fc fe9d 	bl	80047a8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8007a6e:	4b0d      	ldr	r3, [pc, #52]	; (8007aa4 <UART4_IRQHandler+0x60>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <UART4_IRQHandler+0x3e>
 8007a76:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <UART4_IRQHandler+0x60>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <UART4_IRQHandler+0x60>)
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <UART4_IRQHandler+0x60>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d109      	bne.n	8007a9e <UART4_IRQHandler+0x5a>
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <UART4_IRQHandler+0x64>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <UART4_IRQHandler+0x5a>
 8007a92:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <UART4_IRQHandler+0x64>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b2da      	uxtb	r2, r3
 8007a9a:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <UART4_IRQHandler+0x64>)
 8007a9c:	701a      	strb	r2, [r3, #0]
}
 8007a9e:	bf00      	nop
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20002bb2 	.word	0x20002bb2
 8007aa8:	20002bb1 	.word	0x20002bb1
 8007aac:	200024e4 	.word	0x200024e4

08007ab0 <UART5_IRQHandler>:

/*
 * Function: UART5_IRQHandler
 */
void_t UART5_IRQHandler (void_t)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8007ab4:	4b16      	ldr	r3, [pc, #88]	; (8007b10 <UART5_IRQHandler+0x60>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d105      	bne.n	8007ac8 <UART5_IRQHandler+0x18>
 8007abc:	4b15      	ldr	r3, [pc, #84]	; (8007b14 <UART5_IRQHandler+0x64>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	4b13      	ldr	r3, [pc, #76]	; (8007b14 <UART5_IRQHandler+0x64>)
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <UART5_IRQHandler+0x60>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	3301      	adds	r3, #1
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <UART5_IRQHandler+0x60>)
 8007ad2:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_5]);
 8007ad4:	4810      	ldr	r0, [pc, #64]	; (8007b18 <UART5_IRQHandler+0x68>)
 8007ad6:	f7fc fe67 	bl	80047a8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8007ada:	4b0d      	ldr	r3, [pc, #52]	; (8007b10 <UART5_IRQHandler+0x60>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <UART5_IRQHandler+0x3e>
 8007ae2:	4b0b      	ldr	r3, [pc, #44]	; (8007b10 <UART5_IRQHandler+0x60>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <UART5_IRQHandler+0x60>)
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	4b08      	ldr	r3, [pc, #32]	; (8007b10 <UART5_IRQHandler+0x60>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d109      	bne.n	8007b0a <UART5_IRQHandler+0x5a>
 8007af6:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <UART5_IRQHandler+0x64>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <UART5_IRQHandler+0x5a>
 8007afe:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <UART5_IRQHandler+0x64>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	4b03      	ldr	r3, [pc, #12]	; (8007b14 <UART5_IRQHandler+0x64>)
 8007b08:	701a      	strb	r2, [r3, #0]
}
 8007b0a:	bf00      	nop
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20002bb2 	.word	0x20002bb2
 8007b14:	20002bb1 	.word	0x20002bb1
 8007b18:	20002528 	.word	0x20002528

08007b1c <USART6_IRQHandler>:

/*
 * Function: USART6_IRQHandler
 */
void_t USART6_IRQHandler (void_t)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8007b20:	4b16      	ldr	r3, [pc, #88]	; (8007b7c <USART6_IRQHandler+0x60>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d105      	bne.n	8007b34 <USART6_IRQHandler+0x18>
 8007b28:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <USART6_IRQHandler+0x64>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <USART6_IRQHandler+0x64>)
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <USART6_IRQHandler+0x60>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <USART6_IRQHandler+0x60>)
 8007b3e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_6]);
 8007b40:	4810      	ldr	r0, [pc, #64]	; (8007b84 <USART6_IRQHandler+0x68>)
 8007b42:	f7fc fe31 	bl	80047a8 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8007b46:	4b0d      	ldr	r3, [pc, #52]	; (8007b7c <USART6_IRQHandler+0x60>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <USART6_IRQHandler+0x3e>
 8007b4e:	4b0b      	ldr	r3, [pc, #44]	; (8007b7c <USART6_IRQHandler+0x60>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <USART6_IRQHandler+0x60>)
 8007b58:	701a      	strb	r2, [r3, #0]
 8007b5a:	4b08      	ldr	r3, [pc, #32]	; (8007b7c <USART6_IRQHandler+0x60>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d109      	bne.n	8007b76 <USART6_IRQHandler+0x5a>
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <USART6_IRQHandler+0x64>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <USART6_IRQHandler+0x5a>
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <USART6_IRQHandler+0x64>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	4b03      	ldr	r3, [pc, #12]	; (8007b80 <USART6_IRQHandler+0x64>)
 8007b74:	701a      	strb	r2, [r3, #0]
}
 8007b76:	bf00      	nop
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20002bb2 	.word	0x20002bb2
 8007b80:	20002bb1 	.word	0x20002bb1
 8007b84:	2000256c 	.word	0x2000256c

08007b88 <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8007b94:	2300      	movs	r3, #0
 8007b96:	73fb      	strb	r3, [r7, #15]
 8007b98:	e015      	b.n	8007bc6 <HAL_UART_TxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	4a0e      	ldr	r2, [pc, #56]	; (8007bd8 <HAL_UART_TxCpltCallback+0x50>)
 8007b9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d10a      	bne.n	8007bc0 <HAL_UART_TxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartTxReadyTriggers[instance]);
 8007baa:	7bfa      	ldrb	r2, [r7, #15]
 8007bac:	4613      	mov	r3, r2
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4a09      	ldr	r2, [pc, #36]	; (8007bdc <HAL_UART_TxCpltCallback+0x54>)
 8007bb6:	4413      	add	r3, r2
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f007 fe57 	bl	800f86c <gos_triggerIncrement>
            break;
 8007bbe:	e006      	b.n	8007bce <HAL_UART_TxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	73fb      	strb	r3, [r7, #15]
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	d9e6      	bls.n	8007b9a <HAL_UART_TxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000390 	.word	0x20000390
 8007bdc:	20002628 	.word	0x20002628

08007be0 <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
 8007bf0:	e015      	b.n	8007c1e <HAL_UART_RxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	4a0e      	ldr	r2, [pc, #56]	; (8007c30 <HAL_UART_RxCpltCallback+0x50>)
 8007bf6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d10a      	bne.n	8007c18 <HAL_UART_RxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartRxReadyTriggers[instance]);
 8007c02:	7bfa      	ldrb	r2, [r7, #15]
 8007c04:	4613      	mov	r3, r2
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4a09      	ldr	r2, [pc, #36]	; (8007c34 <HAL_UART_RxCpltCallback+0x54>)
 8007c0e:	4413      	add	r3, r2
 8007c10:	4618      	mov	r0, r3
 8007c12:	f007 fe2b 	bl	800f86c <gos_triggerIncrement>
            break;
 8007c16:	e006      	b.n	8007c26 <HAL_UART_RxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	73fb      	strb	r3, [r7, #15]
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	2b05      	cmp	r3, #5
 8007c22:	d9e6      	bls.n	8007bf2 <HAL_UART_RxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000390 	.word	0x20000390
 8007c34:	200025e0 	.word	0x200025e0

08007c38 <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
    u8_t                     idx      = 0u;
 8007c44:	2300      	movs	r3, #0
 8007c46:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	e068      	b.n	8007d20 <HAL_UART_MspInit+0xe8>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	4a38      	ldr	r2, [pc, #224]	; (8007d34 <HAL_UART_MspInit+0xfc>)
 8007c52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d15d      	bne.n	8007d1a <HAL_UART_MspInit+0xe2>
        {
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73bb      	strb	r3, [r7, #14]
 8007c62:	e051      	b.n	8007d08 <HAL_UART_MspInit+0xd0>
            {
                if (uartConfig[idx].periphInstance == instance)
 8007c64:	7bba      	ldrb	r2, [r7, #14]
 8007c66:	4934      	ldr	r1, [pc, #208]	; (8007d38 <HAL_UART_MspInit+0x100>)
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	440b      	add	r3, r1
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	7bfa      	ldrb	r2, [r7, #15]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d143      	bne.n	8007d02 <HAL_UART_MspInit+0xca>
                {
                    if (uartConfig[idx].dmaConfigRx != NULL)
 8007c7a:	7bba      	ldrb	r2, [r7, #14]
 8007c7c:	492e      	ldr	r1, [pc, #184]	; (8007d38 <HAL_UART_MspInit+0x100>)
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	440b      	add	r3, r1
 8007c88:	3320      	adds	r3, #32
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d016      	beq.n	8007cbe <HAL_UART_MspInit+0x86>
                    {
                        __HAL_LINKDMA(pHuart, hdmarx, uartConfig[idx].dmaConfigRx->hdma);
 8007c90:	7bba      	ldrb	r2, [r7, #14]
 8007c92:	4929      	ldr	r1, [pc, #164]	; (8007d38 <HAL_UART_MspInit+0x100>)
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	440b      	add	r3, r1
 8007c9e:	3320      	adds	r3, #32
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	1d1a      	adds	r2, r3, #4
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8007ca8:	7bba      	ldrb	r2, [r7, #14]
 8007caa:	4923      	ldr	r1, [pc, #140]	; (8007d38 <HAL_UART_MspInit+0x100>)
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	440b      	add	r3, r1
 8007cb6:	3320      	adds	r3, #32
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	63da      	str	r2, [r3, #60]	; 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (uartConfig[idx].dmaConfigTx != NULL)
 8007cbe:	7bba      	ldrb	r2, [r7, #14]
 8007cc0:	491d      	ldr	r1, [pc, #116]	; (8007d38 <HAL_UART_MspInit+0x100>)
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	440b      	add	r3, r1
 8007ccc:	3324      	adds	r3, #36	; 0x24
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d016      	beq.n	8007d02 <HAL_UART_MspInit+0xca>
                    {
                        __HAL_LINKDMA(pHuart, hdmatx, uartConfig[idx].dmaConfigTx->hdma);
 8007cd4:	7bba      	ldrb	r2, [r7, #14]
 8007cd6:	4918      	ldr	r1, [pc, #96]	; (8007d38 <HAL_UART_MspInit+0x100>)
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	440b      	add	r3, r1
 8007ce2:	3324      	adds	r3, #36	; 0x24
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	1d1a      	adds	r2, r3, #4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	635a      	str	r2, [r3, #52]	; 0x34
 8007cec:	7bba      	ldrb	r2, [r7, #14]
 8007cee:	4912      	ldr	r1, [pc, #72]	; (8007d38 <HAL_UART_MspInit+0x100>)
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	440b      	add	r3, r1
 8007cfa:	3324      	adds	r3, #36	; 0x24
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	63da      	str	r2, [r3, #60]	; 0x3c
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	3301      	adds	r3, #1
 8007d06:	73bb      	strb	r3, [r7, #14]
 8007d08:	7bba      	ldrb	r2, [r7, #14]
 8007d0a:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <HAL_UART_MspInit+0x104>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	490c      	ldr	r1, [pc, #48]	; (8007d40 <HAL_UART_MspInit+0x108>)
 8007d10:	fba1 1303 	umull	r1, r3, r1, r3
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d3a4      	bcc.n	8007c64 <HAL_UART_MspInit+0x2c>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	73fb      	strb	r3, [r7, #15]
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	2b05      	cmp	r3, #5
 8007d24:	d993      	bls.n	8007c4e <HAL_UART_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 8007d26:	bf00      	nop
 8007d28:	bf00      	nop
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	20000390 	.word	0x20000390
 8007d38:	080145d8 	.word	0x080145d8
 8007d3c:	2000030c 	.word	0x2000030c
 8007d40:	cccccccd 	.word	0xcccccccd

08007d44 <svl_dsmInit>:

/*
 * Function: svl_dsmInit
 */
gos_result_t svl_dsmInit (void_t)
{
 8007d44:	b590      	push	{r4, r7, lr}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t dsmInitResult = GOS_SUCCESS;
 8007d4a:	2355      	movs	r3, #85	; 0x55
 8007d4c:	71fb      	strb	r3, [r7, #7]
	u8_t         initIdx       = 0u;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	71bb      	strb	r3, [r7, #6]
	u8_t         initBlockIdx  = 0u;
 8007d52:	2300      	movs	r3, #0
 8007d54:	717b      	strb	r3, [r7, #5]

	/*
	 * Function code.
	 */
	if (initPhaseConfig != NULL && initPhaseConfigSize > 0u)
 8007d56:	4b39      	ldr	r3, [pc, #228]	; (8007e3c <svl_dsmInit+0xf8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d05b      	beq.n	8007e16 <svl_dsmInit+0xd2>
	{
		// Loop through all init phases.
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 8007d5e:	2300      	movs	r3, #0
 8007d60:	71bb      	strb	r3, [r7, #6]
 8007d62:	e04f      	b.n	8007e04 <svl_dsmInit+0xc0>
		{
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 8007d64:	4836      	ldr	r0, [pc, #216]	; (8007e40 <svl_dsmInit+0xfc>)
 8007d66:	f001 f9ff 	bl	8009168 <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe(initPhaseConfig[initIdx].phaseName);
 8007d6a:	79ba      	ldrb	r2, [r7, #6]
 8007d6c:	4935      	ldr	r1, [pc, #212]	; (8007e44 <svl_dsmInit+0x100>)
 8007d6e:	4613      	mov	r3, r2
 8007d70:	019b      	lsls	r3, r3, #6
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 f9f4 	bl	8009168 <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 8007d80:	482f      	ldr	r0, [pc, #188]	; (8007e40 <svl_dsmInit+0xfc>)
 8007d82:	f001 f9f1 	bl	8009168 <gos_traceDriverTransmitString_Unsafe>

			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 8007d86:	2300      	movs	r3, #0
 8007d88:	717b      	strb	r3, [r7, #5]
 8007d8a:	e033      	b.n	8007df4 <svl_dsmInit+0xb0>
			{
				if (initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer != NULL)
 8007d8c:	79ba      	ldrb	r2, [r7, #6]
 8007d8e:	797b      	ldrb	r3, [r7, #5]
 8007d90:	482c      	ldr	r0, [pc, #176]	; (8007e44 <svl_dsmInit+0x100>)
 8007d92:	00d9      	lsls	r1, r3, #3
 8007d94:	4613      	mov	r3, r2
 8007d96:	019b      	lsls	r3, r3, #6
 8007d98:	4413      	add	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	440b      	add	r3, r1
 8007d9e:	4403      	add	r3, r0
 8007da0:	3308      	adds	r3, #8
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d029      	beq.n	8007dfc <svl_dsmInit+0xb8>
				{
					dsmInitResult &= gos_errorTraceInit(
 8007da8:	79ba      	ldrb	r2, [r7, #6]
 8007daa:	797b      	ldrb	r3, [r7, #5]
							initPhaseConfig[initIdx].initBlock[initBlockIdx].description,
 8007dac:	4825      	ldr	r0, [pc, #148]	; (8007e44 <svl_dsmInit+0x100>)
 8007dae:	00d9      	lsls	r1, r3, #3
 8007db0:	4613      	mov	r3, r2
 8007db2:	019b      	lsls	r3, r3, #6
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	440b      	add	r3, r1
 8007dba:	4403      	add	r3, r0
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	681c      	ldr	r4, [r3, #0]
							initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer());
 8007dc0:	79ba      	ldrb	r2, [r7, #6]
 8007dc2:	797b      	ldrb	r3, [r7, #5]
 8007dc4:	481f      	ldr	r0, [pc, #124]	; (8007e44 <svl_dsmInit+0x100>)
 8007dc6:	00d9      	lsls	r1, r3, #3
 8007dc8:	4613      	mov	r3, r2
 8007dca:	019b      	lsls	r3, r3, #6
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	440b      	add	r3, r1
 8007dd2:	4403      	add	r3, r0
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	681b      	ldr	r3, [r3, #0]
					dsmInitResult &= gos_errorTraceInit(
 8007dd8:	4798      	blx	r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4620      	mov	r0, r4
 8007de0:	f004 fafc 	bl	800c3dc <gos_errorTraceInit>
 8007de4:	4603      	mov	r3, r0
 8007de6:	461a      	mov	r2, r3
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	4013      	ands	r3, r2
 8007dec:	71fb      	strb	r3, [r7, #7]
			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 8007dee:	797b      	ldrb	r3, [r7, #5]
 8007df0:	3301      	adds	r3, #1
 8007df2:	717b      	strb	r3, [r7, #5]
 8007df4:	797b      	ldrb	r3, [r7, #5]
 8007df6:	2b1f      	cmp	r3, #31
 8007df8:	d9c8      	bls.n	8007d8c <svl_dsmInit+0x48>
 8007dfa:	e000      	b.n	8007dfe <svl_dsmInit+0xba>
				}
				else
				{
					// End of initializers.
					break;
 8007dfc:	bf00      	nop
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 8007dfe:	79bb      	ldrb	r3, [r7, #6]
 8007e00:	3301      	adds	r3, #1
 8007e02:	71bb      	strb	r3, [r7, #6]
 8007e04:	79ba      	ldrb	r2, [r7, #6]
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <svl_dsmInit+0xf8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	490f      	ldr	r1, [pc, #60]	; (8007e48 <svl_dsmInit+0x104>)
 8007e0c:	fba1 1303 	umull	r1, r3, r1, r3
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d3a6      	bcc.n	8007d64 <svl_dsmInit+0x20>
	{
		// Configuration is empty.
	}

	// Register DSM task.
	dsmInitResult &= gos_taskRegister(&svlDsmDaemonDesc, NULL);
 8007e16:	2100      	movs	r1, #0
 8007e18:	480c      	ldr	r0, [pc, #48]	; (8007e4c <svl_dsmInit+0x108>)
 8007e1a:	f002 fb5d 	bl	800a4d8 <gos_taskRegister>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	461a      	mov	r2, r3
 8007e22:	79fb      	ldrb	r3, [r7, #7]
 8007e24:	4013      	ands	r3, r2
 8007e26:	71fb      	strb	r3, [r7, #7]

	if (dsmInitResult != GOS_SUCCESS)
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	2b55      	cmp	r3, #85	; 0x55
 8007e2c:	d001      	beq.n	8007e32 <svl_dsmInit+0xee>
	{
		dsmInitResult = GOS_ERROR;
 8007e2e:	23ae      	movs	r3, #174	; 0xae
 8007e30:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Success.
	}

	return dsmInitResult;
 8007e32:	79fb      	ldrb	r3, [r7, #7]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd90      	pop	{r4, r7, pc}
 8007e3c:	20000268 	.word	0x20000268
 8007e40:	08012a40 	.word	0x08012a40
 8007e44:	080142d0 	.word	0x080142d0
 8007e48:	fc0fc0fd 	.word	0xfc0fc0fd
 8007e4c:	200003a8 	.word	0x200003a8

08007e50 <svl_dsmPrintOSInfo>:

/*
 * Function: svl_dsmPrintOSInfo
 */
gos_result_t svl_dsmPrintOSInfo (void_t)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t printResult = GOS_SUCCESS;
 8007e56:	2355      	movs	r3, #85	; 0x55
 8007e58:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"OS Info"TRACE_FORMAT_RESET"\r\n");
 8007e5a:	490f      	ldr	r1, [pc, #60]	; (8007e98 <svl_dsmPrintOSInfo+0x48>)
 8007e5c:	2049      	movs	r0, #73	; 0x49
 8007e5e:	f007 fa59 	bl	800f314 <gos_traceTraceFormatted>
 8007e62:	4603      	mov	r3, r0
 8007e64:	461a      	mov	r2, r3
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	71fb      	strb	r3, [r7, #7]
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version: %02u.%02u\r\n", GOS_VERSION_MAJOR, GOS_VERSION_MINOR);
 8007e6c:	230b      	movs	r3, #11
 8007e6e:	2200      	movs	r2, #0
 8007e70:	490a      	ldr	r1, [pc, #40]	; (8007e9c <svl_dsmPrintOSInfo+0x4c>)
 8007e72:	2049      	movs	r0, #73	; 0x49
 8007e74:	f007 fa4e 	bl	800f314 <gos_traceTraceFormatted>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	79fb      	ldrb	r3, [r7, #7]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	71fb      	strb	r3, [r7, #7]

	if (printResult != GOS_SUCCESS)
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	2b55      	cmp	r3, #85	; 0x55
 8007e86:	d001      	beq.n	8007e8c <svl_dsmPrintOSInfo+0x3c>
	{
		printResult = GOS_ERROR;
 8007e88:	23ae      	movs	r3, #174	; 0xae
 8007e8a:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Success.
	}

	return printResult;
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	08012a44 	.word	0x08012a44
 8007e9c:	08012a5c 	.word	0x08012a5c

08007ea0 <svl_dsmPrintLibInfo>:

/*
 * Function: svl_dsmPrintLibInfo
 */
gos_result_t svl_dsmPrintLibInfo (void_t)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b0ac      	sub	sp, #176	; 0xb0
 8007ea4:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t     printResult = GOS_SUCCESS;
 8007ea6:	2355      	movs	r3, #85	; 0x55
 8007ea8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	gos_libVersion_t libVer      = {0};
 8007eac:	1d3b      	adds	r3, r7, #4
 8007eae:	22a0      	movs	r2, #160	; 0xa0
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f008 fc66 	bl	8010784 <memset>

	/*
	 * Function code.
	 */
	printResult &= gos_libGetVersion(&libVer);
 8007eb8:	1d3b      	adds	r3, r7, #4
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fe4a 	bl	8008b54 <gos_libGetVersion>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007ec8:	4013      	ands	r3, r2
 8007eca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Library Info"TRACE_FORMAT_RESET"\r\n");
 8007ece:	4934      	ldr	r1, [pc, #208]	; (8007fa0 <svl_dsmPrintLibInfo+0x100>)
 8007ed0:	2049      	movs	r0, #73	; 0x49
 8007ed2:	f007 fa1f 	bl	800f314 <gos_traceTraceFormatted>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007ede:	4013      	ands	r3, r2
 8007ee0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", libVer.name);
 8007ee4:	1d3b      	adds	r3, r7, #4
 8007ee6:	3310      	adds	r3, #16
 8007ee8:	461a      	mov	r2, r3
 8007eea:	492e      	ldr	r1, [pc, #184]	; (8007fa4 <svl_dsmPrintLibInfo+0x104>)
 8007eec:	2049      	movs	r0, #73	; 0x49
 8007eee:	f007 fa11 	bl	800f314 <gos_traceTraceFormatted>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007efa:	4013      	ands	r3, r2
 8007efc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", libVer.description);
 8007f00:	1d3b      	adds	r3, r7, #4
 8007f02:	3340      	adds	r3, #64	; 0x40
 8007f04:	461a      	mov	r2, r3
 8007f06:	4928      	ldr	r1, [pc, #160]	; (8007fa8 <svl_dsmPrintLibInfo+0x108>)
 8007f08:	2049      	movs	r0, #73	; 0x49
 8007f0a:	f007 fa03 	bl	800f314 <gos_traceTraceFormatted>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	461a      	mov	r2, r3
 8007f12:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007f16:	4013      	ands	r3, r2
 8007f18:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", libVer.major, libVer.minor, libVer.build);
 8007f1c:	88bb      	ldrh	r3, [r7, #4]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	88fb      	ldrh	r3, [r7, #6]
 8007f22:	4619      	mov	r1, r3
 8007f24:	893b      	ldrh	r3, [r7, #8]
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4920      	ldr	r1, [pc, #128]	; (8007fac <svl_dsmPrintLibInfo+0x10c>)
 8007f2c:	2049      	movs	r0, #73	; 0x49
 8007f2e:	f007 f9f1 	bl	800f314 <gos_traceTraceFormatted>
 8007f32:	4603      	mov	r3, r0
 8007f34:	461a      	mov	r2, r3
 8007f36:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", libVer.date.years, libVer.date.months, libVer.date.days);
 8007f40:	8a7b      	ldrh	r3, [r7, #18]
 8007f42:	461a      	mov	r2, r3
 8007f44:	7c7b      	ldrb	r3, [r7, #17]
 8007f46:	4619      	mov	r1, r3
 8007f48:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	460b      	mov	r3, r1
 8007f52:	4917      	ldr	r1, [pc, #92]	; (8007fb0 <svl_dsmPrintLibInfo+0x110>)
 8007f54:	2049      	movs	r0, #73	; 0x49
 8007f56:	f007 f9dd 	bl	800f314 <gos_traceTraceFormatted>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007f62:	4013      	ands	r3, r2
 8007f64:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", libVer.author);
 8007f68:	1d3b      	adds	r3, r7, #4
 8007f6a:	3380      	adds	r3, #128	; 0x80
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4911      	ldr	r1, [pc, #68]	; (8007fb4 <svl_dsmPrintLibInfo+0x114>)
 8007f70:	2049      	movs	r0, #73	; 0x49
 8007f72:	f007 f9cf 	bl	800f314 <gos_traceTraceFormatted>
 8007f76:	4603      	mov	r3, r0
 8007f78:	461a      	mov	r2, r3
 8007f7a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007f7e:	4013      	ands	r3, r2
 8007f80:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	if (printResult != GOS_SUCCESS)
 8007f84:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007f88:	2b55      	cmp	r3, #85	; 0x55
 8007f8a:	d002      	beq.n	8007f92 <svl_dsmPrintLibInfo+0xf2>
	{
		printResult = GOS_ERROR;
 8007f8c:	23ae      	movs	r3, #174	; 0xae
 8007f8e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	else
	{
		// Success.
	}

	return printResult;
 8007f92:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	37a8      	adds	r7, #168	; 0xa8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	08012a74 	.word	0x08012a74
 8007fa4:	08012a90 	.word	0x08012a90
 8007fa8:	08012aa4 	.word	0x08012aa4
 8007fac:	08012ab8 	.word	0x08012ab8
 8007fb0:	08012ad8 	.word	0x08012ad8
 8007fb4:	08012af8 	.word	0x08012af8

08007fb8 <svl_dsmPrintHwInfo>:

/*
 * Function: svl_dsmPrintHwInfo
 */
gos_result_t svl_dsmPrintHwInfo (void_t)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b0b8      	sub	sp, #224	; 0xe0
 8007fbc:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t  printResult = GOS_SUCCESS;
 8007fbe:	2355      	movs	r3, #85	; 0x55
 8007fc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	svl_hwiInfo_t hwInfo      = {0};
 8007fc4:	1d3b      	adds	r3, r7, #4
 8007fc6:	22d2      	movs	r2, #210	; 0xd2
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f008 fbda 	bl	8010784 <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_hwiRead(&hwInfo);
 8007fd0:	1d3b      	adds	r3, r7, #4
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f8ea 	bl	80081ac <svl_hwiRead>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Hardware Info"TRACE_FORMAT_RESET"\r\n");
 8007fe6:	4939      	ldr	r1, [pc, #228]	; (80080cc <svl_dsmPrintHwInfo+0x114>)
 8007fe8:	2049      	movs	r0, #73	; 0x49
 8007fea:	f007 f993 	bl	800f314 <gos_traceTraceFormatted>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Board name:    %s\r\n", hwInfo.boardName);
 8007ffc:	1d3b      	adds	r3, r7, #4
 8007ffe:	461a      	mov	r2, r3
 8008000:	4933      	ldr	r1, [pc, #204]	; (80080d0 <svl_dsmPrintHwInfo+0x118>)
 8008002:	2049      	movs	r0, #73	; 0x49
 8008004:	f007 f986 	bl	800f314 <gos_traceTraceFormatted>
 8008008:	4603      	mov	r3, r0
 800800a:	461a      	mov	r2, r3
 800800c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008010:	4013      	ands	r3, r2
 8008012:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:        %s\r\n", hwInfo.author);
 8008016:	1d3b      	adds	r3, r7, #4
 8008018:	3328      	adds	r3, #40	; 0x28
 800801a:	461a      	mov	r2, r3
 800801c:	492d      	ldr	r1, [pc, #180]	; (80080d4 <svl_dsmPrintHwInfo+0x11c>)
 800801e:	2049      	movs	r0, #73	; 0x49
 8008020:	f007 f978 	bl	800f314 <gos_traceTraceFormatted>
 8008024:	4603      	mov	r3, r0
 8008026:	461a      	mov	r2, r3
 8008028:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800802c:	4013      	ands	r3, r2
 800802e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description:   %s\r\n", hwInfo.description);
 8008032:	1d3b      	adds	r3, r7, #4
 8008034:	3348      	adds	r3, #72	; 0x48
 8008036:	461a      	mov	r2, r3
 8008038:	4927      	ldr	r1, [pc, #156]	; (80080d8 <svl_dsmPrintHwInfo+0x120>)
 800803a:	2049      	movs	r0, #73	; 0x49
 800803c:	f007 f96a 	bl	800f314 <gos_traceTraceFormatted>
 8008040:	4603      	mov	r3, r0
 8008042:	461a      	mov	r2, r3
 8008044:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008048:	4013      	ands	r3, r2
 800804a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Revision:      %s\r\n", hwInfo.revision);
 800804e:	1d3b      	adds	r3, r7, #4
 8008050:	3320      	adds	r3, #32
 8008052:	461a      	mov	r2, r3
 8008054:	4921      	ldr	r1, [pc, #132]	; (80080dc <svl_dsmPrintHwInfo+0x124>)
 8008056:	2049      	movs	r0, #73	; 0x49
 8008058:	f007 f95c 	bl	800f314 <gos_traceTraceFormatted>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008064:	4013      	ands	r3, r2
 8008066:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Serial number: %s\r\n", hwInfo.serialNumber);
 800806a:	1d3b      	adds	r3, r7, #4
 800806c:	3392      	adds	r3, #146	; 0x92
 800806e:	461a      	mov	r2, r3
 8008070:	491b      	ldr	r1, [pc, #108]	; (80080e0 <svl_dsmPrintHwInfo+0x128>)
 8008072:	2049      	movs	r0, #73	; 0x49
 8008074:	f007 f94e 	bl	800f314 <gos_traceTraceFormatted>
 8008078:	4603      	mov	r3, r0
 800807a:	461a      	mov	r2, r3
 800807c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8008080:	4013      	ands	r3, r2
 8008082:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
			hwInfo.date.years,
 8008086:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
 800808a:	461a      	mov	r2, r3
			hwInfo.date.months,
 800808c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
 8008090:	4619      	mov	r1, r3
			hwInfo.date.days
 8008092:	f8b7 3091 	ldrh.w	r3, [r7, #145]	; 0x91
 8008096:	b29b      	uxth	r3, r3
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	460b      	mov	r3, r1
 800809c:	4911      	ldr	r1, [pc, #68]	; (80080e4 <svl_dsmPrintHwInfo+0x12c>)
 800809e:	2049      	movs	r0, #73	; 0x49
 80080a0:	f007 f938 	bl	800f314 <gos_traceTraceFormatted>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80080ac:	4013      	ands	r3, r2
 80080ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			);

	if (printResult != GOS_SUCCESS)
 80080b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80080b6:	2b55      	cmp	r3, #85	; 0x55
 80080b8:	d002      	beq.n	80080c0 <svl_dsmPrintHwInfo+0x108>
	{
		printResult = GOS_ERROR;
 80080ba:	23ae      	movs	r3, #174	; 0xae
 80080bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	else
	{
		// Success.
	}

	return printResult;
 80080c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	37d8      	adds	r7, #216	; 0xd8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	08012b0c 	.word	0x08012b0c
 80080d0:	08012b28 	.word	0x08012b28
 80080d4:	08012b3c 	.word	0x08012b3c
 80080d8:	08012b50 	.word	0x08012b50
 80080dc:	08012b64 	.word	0x08012b64
 80080e0:	08012b78 	.word	0x08012b78
 80080e4:	08012b8c 	.word	0x08012b8c

080080e8 <svl_dsmTask>:
 * TODO
 * @param
 * @return
 */
GOS_STATIC void_t svl_dsmTask (void_t)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t reactionIdx = 0u;
 80080ee:	2300      	movs	r3, #0
 80080f0:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Print out OS info.
	(void_t) svl_dsmPrintOSInfo();
 80080f2:	f7ff fead 	bl	8007e50 <svl_dsmPrintOSInfo>

	// Print out library info.
	(void_t) svl_dsmPrintLibInfo();
 80080f6:	f7ff fed3 	bl	8007ea0 <svl_dsmPrintLibInfo>

	// Print out Hardware Info.
	(void_t) svl_dsmPrintHwInfo();
 80080fa:	f7ff ff5d 	bl	8007fb8 <svl_dsmPrintHwInfo>

	// Change priority.
	(void_t) gos_taskSetPriority(svlDsmDaemonDesc.taskId, SVL_DSM_DAEMON_PRIO);
 80080fe:	4b26      	ldr	r3, [pc, #152]	; (8008198 <svl_dsmTask+0xb0>)
 8008100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008102:	21c8      	movs	r1, #200	; 0xc8
 8008104:	4618      	mov	r0, r3
 8008106:	f003 f9b5 	bl	800b474 <gos_taskSetPriority>
 800810a:	2301      	movs	r3, #1
 800810c:	71bb      	strb	r3, [r7, #6]
	devicePrevState = deviceState;
 800810e:	4b23      	ldr	r3, [pc, #140]	; (800819c <svl_dsmTask+0xb4>)
 8008110:	781a      	ldrb	r2, [r3, #0]
 8008112:	4b23      	ldr	r3, [pc, #140]	; (80081a0 <svl_dsmTask+0xb8>)
 8008114:	701a      	strb	r2, [r3, #0]
	deviceState = requiredState;
 8008116:	4a21      	ldr	r2, [pc, #132]	; (800819c <svl_dsmTask+0xb4>)
 8008118:	79bb      	ldrb	r3, [r7, #6]
 800811a:	7013      	strb	r3, [r2, #0]
}
 800811c:	bf00      	nop
	svl_dsmSetState(DSM_STATE_STARTUP_READY);

	for (;;)
	{
		// Check for state change.
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 800811e:	4b20      	ldr	r3, [pc, #128]	; (80081a0 <svl_dsmTask+0xb8>)
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	4b1e      	ldr	r3, [pc, #120]	; (800819c <svl_dsmTask+0xb4>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d031      	beq.n	800818e <svl_dsmTask+0xa6>
 800812a:	4b1e      	ldr	r3, [pc, #120]	; (80081a4 <svl_dsmTask+0xbc>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d02d      	beq.n	800818e <svl_dsmTask+0xa6>
		{
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 8008132:	2300      	movs	r3, #0
 8008134:	71fb      	strb	r3, [r7, #7]
 8008136:	e020      	b.n	800817a <svl_dsmTask+0x92>
			{
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	4a1b      	ldr	r2, [pc, #108]	; (80081a8 <svl_dsmTask+0xc0>)
 800813c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8008140:	4b17      	ldr	r3, [pc, #92]	; (80081a0 <svl_dsmTask+0xb8>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d115      	bne.n	8008174 <svl_dsmTask+0x8c>
					reactionConfig[reactionIdx].currState == deviceState &&
 8008148:	79fb      	ldrb	r3, [r7, #7]
 800814a:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <svl_dsmTask+0xc0>)
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	4413      	add	r3, r2
 8008150:	785a      	ldrb	r2, [r3, #1]
 8008152:	4b12      	ldr	r3, [pc, #72]	; (800819c <svl_dsmTask+0xb4>)
 8008154:	781b      	ldrb	r3, [r3, #0]
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 8008156:	429a      	cmp	r2, r3
 8008158:	d10c      	bne.n	8008174 <svl_dsmTask+0x8c>
					reactionConfig[reactionIdx].pReaction != NULL)
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	4a12      	ldr	r2, [pc, #72]	; (80081a8 <svl_dsmTask+0xc0>)
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	4413      	add	r3, r2
 8008162:	685b      	ldr	r3, [r3, #4]
					reactionConfig[reactionIdx].currState == deviceState &&
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <svl_dsmTask+0x8c>
				{
					// Execute reaction.
					reactionConfig[reactionIdx].pReaction();
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	4a0f      	ldr	r2, [pc, #60]	; (80081a8 <svl_dsmTask+0xc0>)
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	4413      	add	r3, r2
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	4798      	blx	r3
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 8008174:	79fb      	ldrb	r3, [r7, #7]
 8008176:	3301      	adds	r3, #1
 8008178:	71fb      	strb	r3, [r7, #7]
 800817a:	79fa      	ldrb	r2, [r7, #7]
 800817c:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <svl_dsmTask+0xbc>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	08db      	lsrs	r3, r3, #3
 8008182:	429a      	cmp	r2, r3
 8008184:	d3d8      	bcc.n	8008138 <svl_dsmTask+0x50>
					// No match.
				}
			}

			// Resolve device state change.
			devicePrevState = deviceState;
 8008186:	4b05      	ldr	r3, [pc, #20]	; (800819c <svl_dsmTask+0xb4>)
 8008188:	781a      	ldrb	r2, [r3, #0]
 800818a:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <svl_dsmTask+0xb8>)
 800818c:	701a      	strb	r2, [r3, #0]
		else
		{
			// State change not detected.
		}

		(void_t) gos_taskSleep(SVL_DSM_DAEMON_POLL_MS);
 800818e:	2014      	movs	r0, #20
 8008190:	f002 fb34 	bl	800a7fc <gos_taskSleep>
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 8008194:	e7c3      	b.n	800811e <svl_dsmTask+0x36>
 8008196:	bf00      	nop
 8008198:	200003a8 	.word	0x200003a8
 800819c:	20002670 	.word	0x20002670
 80081a0:	20002671 	.word	0x20002671
 80081a4:	20001f18 	.word	0x20001f18
 80081a8:	080144d8 	.word	0x080144d8

080081ac <svl_hwiRead>:

/*
 * Function: svl_hwiRead
 */
gos_result_t svl_hwiRead (svl_hwiInfo_t* pHwInfo)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t hwiReadResult = GOS_ERROR;
 80081b4:	23ae      	movs	r3, #174	; 0xae
 80081b6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pHwInfo != NULL && hwiReadFunction != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00b      	beq.n	80081d6 <svl_hwiRead+0x2a>
 80081be:	4b08      	ldr	r3, [pc, #32]	; (80081e0 <svl_hwiRead+0x34>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d007      	beq.n	80081d6 <svl_hwiRead+0x2a>
	{
		hwiReadResult = hwiReadFunction(
 80081c6:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <svl_hwiRead+0x34>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	22d2      	movs	r2, #210	; 0xd2
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	2004      	movs	r0, #4
 80081d0:	4798      	blx	r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Struct or read function is NULL.
	}

	return hwiReadResult;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20002674 	.word	0x20002674

080081e4 <svl_iplInit>:

/*
 * Function: svl_iplInit
 */
gos_result_t svl_iplInit (void_t)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 80081ea:	23ae      	movs	r3, #174	; 0xae
 80081ec:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    initResult = gos_taskRegister(&svlIplTaskDesc, NULL);
 80081ee:	2100      	movs	r1, #0
 80081f0:	4804      	ldr	r0, [pc, #16]	; (8008204 <svl_iplInit+0x20>)
 80081f2:	f002 f971 	bl	800a4d8 <gos_taskRegister>
 80081f6:	4603      	mov	r3, r0
 80081f8:	71fb      	strb	r3, [r7, #7]

    return initResult;
 80081fa:	79fb      	ldrb	r3, [r7, #7]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20000464 	.word	0x20000464

08008208 <svl_iplConfigure>:

/*
 * Function: svl_iplConfigure
 */
gos_result_t svl_iplConfigure (svl_iplTransmitFunction transmitFunc, svl_iplReceiveFunction receiveFunc)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t configureResult = GOS_SUCCESS;
 8008212:	2355      	movs	r3, #85	; 0x55
 8008214:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	svl_iplTransmit = transmitFunc;
 8008216:	4a0e      	ldr	r2, [pc, #56]	; (8008250 <svl_iplConfigure+0x48>)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6013      	str	r3, [r2, #0]
	svl_iplReceive  = receiveFunc;
 800821c:	4a0d      	ldr	r2, [pc, #52]	; (8008254 <svl_iplConfigure+0x4c>)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	6013      	str	r3, [r2, #0]

	// Set IPL state machine based on NULL pointer check.
	if (svl_iplTransmit != NULL && svl_iplReceive != NULL)
 8008222:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <svl_iplConfigure+0x48>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <svl_iplConfigure+0x32>
 800822a:	4b0a      	ldr	r3, [pc, #40]	; (8008254 <svl_iplConfigure+0x4c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <svl_iplConfigure+0x32>
	{
		iplState = SVL_IPL_STATE_DISCOVER_START;
 8008232:	4b09      	ldr	r3, [pc, #36]	; (8008258 <svl_iplConfigure+0x50>)
 8008234:	2201      	movs	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	e002      	b.n	8008240 <svl_iplConfigure+0x38>
	}
	else
	{
		iplState = SVL_IPL_STATE_NOT_CONFIGURED;
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <svl_iplConfigure+0x50>)
 800823c:	2200      	movs	r2, #0
 800823e:	701a      	strb	r2, [r3, #0]
	}

	return configureResult;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	20002b8c 	.word	0x20002b8c
 8008254:	20002b90 	.word	0x20002b90
 8008258:	20002678 	.word	0x20002678

0800825c <svl_iplDaemon>:
 * @details Handles IPL state machine and incoming IPL messages.
 *
 * @return  -
 */
GOS_STATIC void_t svl_iplDaemon (void_t)
{
 800825c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800825e:	b097      	sub	sp, #92	; 0x5c
 8008260:	af0e      	add	r7, sp, #56	; 0x38
	/*
	 * Local variables.
	 */
	u8_t lutIndex = 0u;
 8008262:	2300      	movs	r3, #0
 8008264:	77fb      	strb	r3, [r7, #31]

	/*
	 * Function code.
	 */
	// Delay service start.
	(void_t) gos_taskSleep(2000);
 8008266:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800826a:	f002 fac7 	bl	800a7fc <gos_taskSleep>

	for (;;)
	{
		switch (iplState)
 800826e:	4ba2      	ldr	r3, [pc, #648]	; (80084f8 <svl_iplDaemon+0x29c>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b07      	cmp	r3, #7
 8008274:	f200 83e1 	bhi.w	8008a3a <svl_iplDaemon+0x7de>
 8008278:	a201      	add	r2, pc, #4	; (adr r2, 8008280 <svl_iplDaemon+0x24>)
 800827a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827e:	bf00      	nop
 8008280:	08008a91 	.word	0x08008a91
 8008284:	080082a1 	.word	0x080082a1
 8008288:	080082b1 	.word	0x080082b1
 800828c:	08008385 	.word	0x08008385
 8008290:	08008395 	.word	0x08008395
 8008294:	080084e7 	.word	0x080084e7
 8008298:	08008545 	.word	0x08008545
 800829c:	08008617 	.word	0x08008617
				break;
			}
			case SVL_IPL_STATE_DISCOVER_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery start...\r\n");
 80082a0:	4996      	ldr	r1, [pc, #600]	; (80084fc <svl_iplDaemon+0x2a0>)
 80082a2:	2036      	movs	r0, #54	; 0x36
 80082a4:	f006 ff1a 	bl	800f0dc <gos_traceTrace>
#endif
				iplState = SVL_IPL_STATE_DISCOVER;
 80082a8:	4b93      	ldr	r3, [pc, #588]	; (80084f8 <svl_iplDaemon+0x29c>)
 80082aa:	2202      	movs	r2, #2
 80082ac:	701a      	strb	r2, [r3, #0]
				break;
 80082ae:	e3f4      	b.n	8008a9a <svl_iplDaemon+0x83e>
			}
			case SVL_IPL_STATE_DISCOVER:
			{
				msgHeader.messageId     = IPL_MSG_ID_DISCOVERY;
 80082b0:	4b93      	ldr	r3, [pc, #588]	; (8008500 <svl_iplDaemon+0x2a4>)
 80082b2:	2201      	movs	r2, #1
 80082b4:	601a      	str	r2, [r3, #0]
				msgHeader.messageLength = sizeof(discoveryMsg);
 80082b6:	4b92      	ldr	r3, [pc, #584]	; (8008500 <svl_iplDaemon+0x2a4>)
 80082b8:	2240      	movs	r2, #64	; 0x40
 80082ba:	605a      	str	r2, [r3, #4]

				(void_t) strcpy(discoveryMsg.masterDeviceId, "STM32F446-0001");
 80082bc:	4a91      	ldr	r2, [pc, #580]	; (8008504 <svl_iplDaemon+0x2a8>)
 80082be:	4b92      	ldr	r3, [pc, #584]	; (8008508 <svl_iplDaemon+0x2ac>)
 80082c0:	4614      	mov	r4, r2
 80082c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80082c4:	c407      	stmia	r4!, {r0, r1, r2}
 80082c6:	8023      	strh	r3, [r4, #0]
 80082c8:	3402      	adds	r4, #2
 80082ca:	0c1b      	lsrs	r3, r3, #16
 80082cc:	7023      	strb	r3, [r4, #0]
				(void_t) drv_crcGetCrc32((u8_t*)&discoveryMsg, sizeof(discoveryMsg), &msgHeader.messageCrc);
 80082ce:	4a8f      	ldr	r2, [pc, #572]	; (800850c <svl_iplDaemon+0x2b0>)
 80082d0:	2140      	movs	r1, #64	; 0x40
 80082d2:	488c      	ldr	r0, [pc, #560]	; (8008504 <svl_iplDaemon+0x2a8>)
 80082d4:	f000 fd86 	bl	8008de4 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 80082d8:	4b8d      	ldr	r3, [pc, #564]	; (8008510 <svl_iplDaemon+0x2b4>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082e0:	2110      	movs	r1, #16
 80082e2:	4887      	ldr	r0, [pc, #540]	; (8008500 <svl_iplDaemon+0x2a4>)
 80082e4:	4798      	blx	r3
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b55      	cmp	r3, #85	; 0x55
 80082ea:	d13f      	bne.n	800836c <svl_iplDaemon+0x110>
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       1000u) == GOS_SUCCESS &&
 80082ec:	4b88      	ldr	r3, [pc, #544]	; (8008510 <svl_iplDaemon+0x2b4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082f4:	2140      	movs	r1, #64	; 0x40
 80082f6:	4883      	ldr	r0, [pc, #524]	; (8008504 <svl_iplDaemon+0x2a8>)
 80082f8:	4798      	blx	r3
 80082fa:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 80082fc:	2b55      	cmp	r3, #85	; 0x55
 80082fe:	d135      	bne.n	800836c <svl_iplDaemon+0x110>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          1000u) == GOS_SUCCESS &&
 8008300:	4b84      	ldr	r3, [pc, #528]	; (8008514 <svl_iplDaemon+0x2b8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008308:	2110      	movs	r1, #16
 800830a:	487d      	ldr	r0, [pc, #500]	; (8008500 <svl_iplDaemon+0x2a4>)
 800830c:	4798      	blx	r3
 800830e:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       1000u) == GOS_SUCCESS &&
 8008310:	2b55      	cmp	r3, #85	; 0x55
 8008312:	d12b      	bne.n	800836c <svl_iplDaemon+0x110>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    1000u) == GOS_SUCCESS &&
 8008314:	4b7f      	ldr	r3, [pc, #508]	; (8008514 <svl_iplDaemon+0x2b8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a79      	ldr	r2, [pc, #484]	; (8008500 <svl_iplDaemon+0x2a4>)
 800831a:	6851      	ldr	r1, [r2, #4]
 800831c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008320:	487d      	ldr	r0, [pc, #500]	; (8008518 <svl_iplDaemon+0x2bc>)
 8008322:	4798      	blx	r3
 8008324:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          1000u) == GOS_SUCCESS &&
 8008326:	2b55      	cmp	r3, #85	; 0x55
 8008328:	d120      	bne.n	800836c <svl_iplDaemon+0x110>
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 800832a:	4b75      	ldr	r3, [pc, #468]	; (8008500 <svl_iplDaemon+0x2a4>)
 800832c:	681b      	ldr	r3, [r3, #0]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    1000u) == GOS_SUCCESS &&
 800832e:	f640 2201 	movw	r2, #2561	; 0xa01
 8008332:	4293      	cmp	r3, r2
 8008334:	d11a      	bne.n	800836c <svl_iplDaemon+0x110>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 8008336:	4b72      	ldr	r3, [pc, #456]	; (8008500 <svl_iplDaemon+0x2a4>)
 8008338:	6859      	ldr	r1, [r3, #4]
 800833a:	4b71      	ldr	r3, [pc, #452]	; (8008500 <svl_iplDaemon+0x2a4>)
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	2300      	movs	r3, #0
 8008340:	4875      	ldr	r0, [pc, #468]	; (8008518 <svl_iplDaemon+0x2bc>)
 8008342:	f000 fd9b 	bl	8008e7c <drv_crcCheckCrc32>
 8008346:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 8008348:	2bca      	cmp	r3, #202	; 0xca
 800834a:	d10f      	bne.n	800836c <svl_iplDaemon+0x110>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&discoveryMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800834c:	4b6c      	ldr	r3, [pc, #432]	; (8008500 <svl_iplDaemon+0x2a4>)
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	461a      	mov	r2, r3
 8008352:	4971      	ldr	r1, [pc, #452]	; (8008518 <svl_iplDaemon+0x2bc>)
 8008354:	486b      	ldr	r0, [pc, #428]	; (8008504 <svl_iplDaemon+0x2a8>)
 8008356:	f008 fa9c 	bl	8010892 <memcpy>
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL device discovered: %s\r\n", discoveryMsg.slaveDeviceId);
 800835a:	4a70      	ldr	r2, [pc, #448]	; (800851c <svl_iplDaemon+0x2c0>)
 800835c:	4970      	ldr	r1, [pc, #448]	; (8008520 <svl_iplDaemon+0x2c4>)
 800835e:	2036      	movs	r0, #54	; 0x36
 8008360:	f006 ffd8 	bl	800f314 <gos_traceTraceFormatted>
#endif
					iplState = SVL_IPL_STATE_CONFIG_START;
 8008364:	4b64      	ldr	r3, [pc, #400]	; (80084f8 <svl_iplDaemon+0x29c>)
 8008366:	2203      	movs	r2, #3
 8008368:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(1000);
				}
				break;
 800836a:	e396      	b.n	8008a9a <svl_iplDaemon+0x83e>
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery failed.\r\n");
 800836c:	496d      	ldr	r1, [pc, #436]	; (8008524 <svl_iplDaemon+0x2c8>)
 800836e:	2036      	movs	r0, #54	; 0x36
 8008370:	f006 feb4 	bl	800f0dc <gos_traceTrace>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 8008374:	4b60      	ldr	r3, [pc, #384]	; (80084f8 <svl_iplDaemon+0x29c>)
 8008376:	2201      	movs	r2, #1
 8008378:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(1000);
 800837a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800837e:	f002 fa3d 	bl	800a7fc <gos_taskSleep>
				break;
 8008382:	e38a      	b.n	8008a9a <svl_iplDaemon+0x83e>
			}
			case SVL_IPL_STATE_CONFIG_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Configuring device...\r\n");
 8008384:	4968      	ldr	r1, [pc, #416]	; (8008528 <svl_iplDaemon+0x2cc>)
 8008386:	2036      	movs	r0, #54	; 0x36
 8008388:	f006 fea8 	bl	800f0dc <gos_traceTrace>
#endif
				iplState = SVL_IPL_STATE_CONFIG;
 800838c:	4b5a      	ldr	r3, [pc, #360]	; (80084f8 <svl_iplDaemon+0x29c>)
 800838e:	2204      	movs	r2, #4
 8008390:	701a      	strb	r2, [r3, #0]
				break;
 8008392:	e382      	b.n	8008a9a <svl_iplDaemon+0x83e>
			}
			case SVL_IPL_STATE_CONFIG:
			{
				msgHeader.messageId     = IPL_MSG_ID_CONFIG;
 8008394:	4b5a      	ldr	r3, [pc, #360]	; (8008500 <svl_iplDaemon+0x2a4>)
 8008396:	2211      	movs	r2, #17
 8008398:	601a      	str	r2, [r3, #0]
				msgHeader.messageLength = sizeof(devConfigMsg);
 800839a:	4b59      	ldr	r3, [pc, #356]	; (8008500 <svl_iplDaemon+0x2a4>)
 800839c:	224e      	movs	r2, #78	; 0x4e
 800839e:	605a      	str	r2, [r3, #4]

				(void_t) drv_crcGetCrc32((u8_t*)&devConfigMsg, sizeof(devConfigMsg), &msgHeader.messageCrc);
 80083a0:	4a5a      	ldr	r2, [pc, #360]	; (800850c <svl_iplDaemon+0x2b0>)
 80083a2:	214e      	movs	r1, #78	; 0x4e
 80083a4:	4861      	ldr	r0, [pc, #388]	; (800852c <svl_iplDaemon+0x2d0>)
 80083a6:	f000 fd1d 	bl	8008de4 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 80083aa:	4b59      	ldr	r3, [pc, #356]	; (8008510 <svl_iplDaemon+0x2b4>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083b2:	2110      	movs	r1, #16
 80083b4:	4852      	ldr	r0, [pc, #328]	; (8008500 <svl_iplDaemon+0x2a4>)
 80083b6:	4798      	blx	r3
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b55      	cmp	r3, #85	; 0x55
 80083bc:	f040 8087 	bne.w	80084ce <svl_iplDaemon+0x272>
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       1000u) == GOS_SUCCESS &&
 80083c0:	4b53      	ldr	r3, [pc, #332]	; (8008510 <svl_iplDaemon+0x2b4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80083c8:	214e      	movs	r1, #78	; 0x4e
 80083ca:	4858      	ldr	r0, [pc, #352]	; (800852c <svl_iplDaemon+0x2d0>)
 80083cc:	4798      	blx	r3
 80083ce:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 80083d0:	2b55      	cmp	r3, #85	; 0x55
 80083d2:	d17c      	bne.n	80084ce <svl_iplDaemon+0x272>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          2000u) == GOS_SUCCESS &&
 80083d4:	4b4f      	ldr	r3, [pc, #316]	; (8008514 <svl_iplDaemon+0x2b8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80083dc:	2110      	movs	r1, #16
 80083de:	4848      	ldr	r0, [pc, #288]	; (8008500 <svl_iplDaemon+0x2a4>)
 80083e0:	4798      	blx	r3
 80083e2:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       1000u) == GOS_SUCCESS &&
 80083e4:	2b55      	cmp	r3, #85	; 0x55
 80083e6:	d172      	bne.n	80084ce <svl_iplDaemon+0x272>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 80083e8:	4b4a      	ldr	r3, [pc, #296]	; (8008514 <svl_iplDaemon+0x2b8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a44      	ldr	r2, [pc, #272]	; (8008500 <svl_iplDaemon+0x2a4>)
 80083ee:	6851      	ldr	r1, [r2, #4]
 80083f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80083f4:	4848      	ldr	r0, [pc, #288]	; (8008518 <svl_iplDaemon+0x2bc>)
 80083f6:	4798      	blx	r3
 80083f8:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          2000u) == GOS_SUCCESS &&
 80083fa:	2b55      	cmp	r3, #85	; 0x55
 80083fc:	d167      	bne.n	80084ce <svl_iplDaemon+0x272>
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 80083fe:	4b40      	ldr	r3, [pc, #256]	; (8008500 <svl_iplDaemon+0x2a4>)
 8008400:	681b      	ldr	r3, [r3, #0]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 8008402:	f640 2211 	movw	r2, #2577	; 0xa11
 8008406:	4293      	cmp	r3, r2
 8008408:	d161      	bne.n	80084ce <svl_iplDaemon+0x272>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800840a:	4b3d      	ldr	r3, [pc, #244]	; (8008500 <svl_iplDaemon+0x2a4>)
 800840c:	6859      	ldr	r1, [r3, #4]
 800840e:	4b3c      	ldr	r3, [pc, #240]	; (8008500 <svl_iplDaemon+0x2a4>)
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	2300      	movs	r3, #0
 8008414:	4840      	ldr	r0, [pc, #256]	; (8008518 <svl_iplDaemon+0x2bc>)
 8008416:	f000 fd31 	bl	8008e7c <drv_crcCheckCrc32>
 800841a:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 800841c:	2bca      	cmp	r3, #202	; 0xca
 800841e:	d156      	bne.n	80084ce <svl_iplDaemon+0x272>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&receivedDevConfigMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 8008420:	4b37      	ldr	r3, [pc, #220]	; (8008500 <svl_iplDaemon+0x2a4>)
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	461a      	mov	r2, r3
 8008426:	493c      	ldr	r1, [pc, #240]	; (8008518 <svl_iplDaemon+0x2bc>)
 8008428:	4841      	ldr	r0, [pc, #260]	; (8008530 <svl_iplDaemon+0x2d4>)
 800842a:	f008 fa32 	bl	8010892 <memcpy>
							"Port:      \t%u\r\n"
							"Subnet:    \t%u.%u.%u.%u\r\n"
							"Gateway:   \t%u.%u.%u.%u\r\n",
							receivedDevConfigMsg.ssid,
							receivedDevConfigMsg.pwd,
							receivedDevConfigMsg.ipAddress[0], receivedDevConfigMsg.ipAddress[1],
 800842e:	4b40      	ldr	r3, [pc, #256]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008430:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
					(void_t) gos_traceTraceFormatted(
 8008434:	461a      	mov	r2, r3
							receivedDevConfigMsg.ipAddress[0], receivedDevConfigMsg.ipAddress[1],
 8008436:	4b3e      	ldr	r3, [pc, #248]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
					(void_t) gos_traceTraceFormatted(
 800843c:	4619      	mov	r1, r3
							receivedDevConfigMsg.ipAddress[2], receivedDevConfigMsg.ipAddress[3],
 800843e:	4b3c      	ldr	r3, [pc, #240]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
					(void_t) gos_traceTraceFormatted(
 8008444:	4618      	mov	r0, r3
							receivedDevConfigMsg.ipAddress[2], receivedDevConfigMsg.ipAddress[3],
 8008446:	4b3a      	ldr	r3, [pc, #232]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008448:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
					(void_t) gos_traceTraceFormatted(
 800844c:	461c      	mov	r4, r3
							receivedDevConfigMsg.port,
 800844e:	4b38      	ldr	r3, [pc, #224]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008450:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
					(void_t) gos_traceTraceFormatted(
 8008454:	461d      	mov	r5, r3
							receivedDevConfigMsg.subnet[0],  receivedDevConfigMsg.subnet[1],
 8008456:	4b36      	ldr	r3, [pc, #216]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008458:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
					(void_t) gos_traceTraceFormatted(
 800845c:	461e      	mov	r6, r3
							receivedDevConfigMsg.subnet[0],  receivedDevConfigMsg.subnet[1],
 800845e:	4b34      	ldr	r3, [pc, #208]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008460:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
					(void_t) gos_traceTraceFormatted(
 8008464:	617b      	str	r3, [r7, #20]
							receivedDevConfigMsg.subnet[2],  receivedDevConfigMsg.subnet[3],
 8008466:	4b32      	ldr	r3, [pc, #200]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008468:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
					(void_t) gos_traceTraceFormatted(
 800846c:	613b      	str	r3, [r7, #16]
							receivedDevConfigMsg.subnet[2],  receivedDevConfigMsg.subnet[3],
 800846e:	4b30      	ldr	r3, [pc, #192]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008470:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
					(void_t) gos_traceTraceFormatted(
 8008474:	60fb      	str	r3, [r7, #12]
							receivedDevConfigMsg.gateway[0], receivedDevConfigMsg.gateway[1],
 8008476:	4b2e      	ldr	r3, [pc, #184]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
					(void_t) gos_traceTraceFormatted(
 800847c:	60bb      	str	r3, [r7, #8]
							receivedDevConfigMsg.gateway[0], receivedDevConfigMsg.gateway[1],
 800847e:	4b2c      	ldr	r3, [pc, #176]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
					(void_t) gos_traceTraceFormatted(
 8008484:	607b      	str	r3, [r7, #4]
							receivedDevConfigMsg.gateway[2], receivedDevConfigMsg.gateway[3]
 8008486:	4b2a      	ldr	r3, [pc, #168]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008488:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
					(void_t) gos_traceTraceFormatted(
 800848c:	603b      	str	r3, [r7, #0]
							receivedDevConfigMsg.gateway[2], receivedDevConfigMsg.gateway[3]
 800848e:	4b28      	ldr	r3, [pc, #160]	; (8008530 <svl_iplDaemon+0x2d4>)
 8008490:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
					(void_t) gos_traceTraceFormatted(
 8008494:	930c      	str	r3, [sp, #48]	; 0x30
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	930b      	str	r3, [sp, #44]	; 0x2c
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	930a      	str	r3, [sp, #40]	; 0x28
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	9309      	str	r3, [sp, #36]	; 0x24
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	9308      	str	r3, [sp, #32]
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	9307      	str	r3, [sp, #28]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	9306      	str	r3, [sp, #24]
 80084ae:	9605      	str	r6, [sp, #20]
 80084b0:	9504      	str	r5, [sp, #16]
 80084b2:	9403      	str	r4, [sp, #12]
 80084b4:	9002      	str	r0, [sp, #8]
 80084b6:	9101      	str	r1, [sp, #4]
 80084b8:	9200      	str	r2, [sp, #0]
 80084ba:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <svl_iplDaemon+0x2d8>)
 80084bc:	4a1c      	ldr	r2, [pc, #112]	; (8008530 <svl_iplDaemon+0x2d4>)
 80084be:	491e      	ldr	r1, [pc, #120]	; (8008538 <svl_iplDaemon+0x2dc>)
 80084c0:	2036      	movs	r0, #54	; 0x36
 80084c2:	f006 ff27 	bl	800f314 <gos_traceTraceFormatted>
						);
#endif
					iplState = SVL_IPL_STATE_CONNECT_START;
 80084c6:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <svl_iplDaemon+0x29c>)
 80084c8:	2205      	movs	r2, #5
 80084ca:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL configuration failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_CONFIG_START;
					(void_t) gos_taskSleep(1000);
				}
				break;
 80084cc:	e2e5      	b.n	8008a9a <svl_iplDaemon+0x83e>
					(void_t) gos_traceTrace(GOS_TRUE, "IPL configuration failed.\r\n");
 80084ce:	491b      	ldr	r1, [pc, #108]	; (800853c <svl_iplDaemon+0x2e0>)
 80084d0:	2036      	movs	r0, #54	; 0x36
 80084d2:	f006 fe03 	bl	800f0dc <gos_traceTrace>
					iplState = SVL_IPL_STATE_CONFIG_START;
 80084d6:	4b08      	ldr	r3, [pc, #32]	; (80084f8 <svl_iplDaemon+0x29c>)
 80084d8:	2203      	movs	r2, #3
 80084da:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(1000);
 80084dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084e0:	f002 f98c 	bl	800a7fc <gos_taskSleep>
				break;
 80084e4:	e2d9      	b.n	8008a9a <svl_iplDaemon+0x83e>
			}
			case SVL_IPL_STATE_CONNECT_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Connecting to network...\r\n");
 80084e6:	4916      	ldr	r1, [pc, #88]	; (8008540 <svl_iplDaemon+0x2e4>)
 80084e8:	2036      	movs	r0, #54	; 0x36
 80084ea:	f006 fdf7 	bl	800f0dc <gos_traceTrace>
#endif
				iplState = SVL_IPL_STATE_CONNECT;
 80084ee:	4b02      	ldr	r3, [pc, #8]	; (80084f8 <svl_iplDaemon+0x29c>)
 80084f0:	2206      	movs	r2, #6
 80084f2:	701a      	strb	r2, [r3, #0]
				break;
 80084f4:	e2d1      	b.n	8008a9a <svl_iplDaemon+0x83e>
 80084f6:	bf00      	nop
 80084f8:	20002678 	.word	0x20002678
 80084fc:	08012bb0 	.word	0x08012bb0
 8008500:	200027d4 	.word	0x200027d4
 8008504:	20002844 	.word	0x20002844
 8008508:	08012bcc 	.word	0x08012bcc
 800850c:	200027e0 	.word	0x200027e0
 8008510:	20002b8c 	.word	0x20002b8c
 8008514:	20002b90 	.word	0x20002b90
 8008518:	2000267c 	.word	0x2000267c
 800851c:	20002864 	.word	0x20002864
 8008520:	08012bdc 	.word	0x08012bdc
 8008524:	08012bf8 	.word	0x08012bf8
 8008528:	08012c10 	.word	0x08012c10
 800852c:	20000414 	.word	0x20000414
 8008530:	200027f4 	.word	0x200027f4
 8008534:	20002814 	.word	0x20002814
 8008538:	08012c28 	.word	0x08012c28
 800853c:	08012cc8 	.word	0x08012cc8
 8008540:	08012ce4 	.word	0x08012ce4
			}
			case SVL_IPL_STATE_CONNECT:
			{
				msgHeader.messageId     = IPL_MSG_ID_CONNECT;
 8008544:	4ba5      	ldr	r3, [pc, #660]	; (80087dc <svl_iplDaemon+0x580>)
 8008546:	2221      	movs	r2, #33	; 0x21
 8008548:	601a      	str	r2, [r3, #0]
				msgHeader.messageLength = sizeof(connectMsg);
 800854a:	4ba4      	ldr	r3, [pc, #656]	; (80087dc <svl_iplDaemon+0x580>)
 800854c:	2201      	movs	r2, #1
 800854e:	605a      	str	r2, [r3, #4]

				(void_t) drv_crcGetCrc32((u8_t*)&connectMsg, sizeof(connectMsg), &msgHeader.messageCrc);
 8008550:	4aa3      	ldr	r2, [pc, #652]	; (80087e0 <svl_iplDaemon+0x584>)
 8008552:	2101      	movs	r1, #1
 8008554:	48a3      	ldr	r0, [pc, #652]	; (80087e4 <svl_iplDaemon+0x588>)
 8008556:	f000 fc45 	bl	8008de4 <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800855a:	4ba3      	ldr	r3, [pc, #652]	; (80087e8 <svl_iplDaemon+0x58c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008562:	2110      	movs	r1, #16
 8008564:	489d      	ldr	r0, [pc, #628]	; (80087dc <svl_iplDaemon+0x580>)
 8008566:	4798      	blx	r3
 8008568:	4603      	mov	r3, r0
 800856a:	2b55      	cmp	r3, #85	; 0x55
 800856c:	d14a      	bne.n	8008604 <svl_iplDaemon+0x3a8>
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         1000u) == GOS_SUCCESS &&
 800856e:	4b9e      	ldr	r3, [pc, #632]	; (80087e8 <svl_iplDaemon+0x58c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008576:	2101      	movs	r1, #1
 8008578:	489a      	ldr	r0, [pc, #616]	; (80087e4 <svl_iplDaemon+0x588>)
 800857a:	4798      	blx	r3
 800857c:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800857e:	2b55      	cmp	r3, #85	; 0x55
 8008580:	d140      	bne.n	8008604 <svl_iplDaemon+0x3a8>
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),         10000u) == GOS_SUCCESS &&
 8008582:	4b9a      	ldr	r3, [pc, #616]	; (80087ec <svl_iplDaemon+0x590>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f242 7210 	movw	r2, #10000	; 0x2710
 800858a:	2110      	movs	r1, #16
 800858c:	4893      	ldr	r0, [pc, #588]	; (80087dc <svl_iplDaemon+0x580>)
 800858e:	4798      	blx	r3
 8008590:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         1000u) == GOS_SUCCESS &&
 8008592:	2b55      	cmp	r3, #85	; 0x55
 8008594:	d136      	bne.n	8008604 <svl_iplDaemon+0x3a8>
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 8008596:	4b95      	ldr	r3, [pc, #596]	; (80087ec <svl_iplDaemon+0x590>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a90      	ldr	r2, [pc, #576]	; (80087dc <svl_iplDaemon+0x580>)
 800859c:	6851      	ldr	r1, [r2, #4]
 800859e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80085a2:	4893      	ldr	r0, [pc, #588]	; (80087f0 <svl_iplDaemon+0x594>)
 80085a4:	4798      	blx	r3
 80085a6:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),         10000u) == GOS_SUCCESS &&
 80085a8:	2b55      	cmp	r3, #85	; 0x55
 80085aa:	d12b      	bne.n	8008604 <svl_iplDaemon+0x3a8>
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 80085ac:	4b8b      	ldr	r3, [pc, #556]	; (80087dc <svl_iplDaemon+0x580>)
 80085ae:	681b      	ldr	r3, [r3, #0]
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 80085b0:	f640 2221 	movw	r2, #2593	; 0xa21
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d125      	bne.n	8008604 <svl_iplDaemon+0x3a8>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 80085b8:	4b88      	ldr	r3, [pc, #544]	; (80087dc <svl_iplDaemon+0x580>)
 80085ba:	6859      	ldr	r1, [r3, #4]
 80085bc:	4b87      	ldr	r3, [pc, #540]	; (80087dc <svl_iplDaemon+0x580>)
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	2300      	movs	r3, #0
 80085c2:	488b      	ldr	r0, [pc, #556]	; (80087f0 <svl_iplDaemon+0x594>)
 80085c4:	f000 fc5a 	bl	8008e7c <drv_crcCheckCrc32>
 80085c8:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 80085ca:	2bca      	cmp	r3, #202	; 0xca
 80085cc:	d11a      	bne.n	8008604 <svl_iplDaemon+0x3a8>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&connectResultMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 80085ce:	4b83      	ldr	r3, [pc, #524]	; (80087dc <svl_iplDaemon+0x580>)
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	461a      	mov	r2, r3
 80085d4:	4986      	ldr	r1, [pc, #536]	; (80087f0 <svl_iplDaemon+0x594>)
 80085d6:	4887      	ldr	r0, [pc, #540]	; (80087f4 <svl_iplDaemon+0x598>)
 80085d8:	f008 f95b 	bl	8010892 <memcpy>

					if (connectResultMsg.connectSuccess == GOS_TRUE)
 80085dc:	4b85      	ldr	r3, [pc, #532]	; (80087f4 <svl_iplDaemon+0x598>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b36      	cmp	r3, #54	; 0x36
 80085e2:	d107      	bne.n	80085f4 <svl_iplDaemon+0x398>
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Successfully connected to the network.\r\n");
 80085e4:	4984      	ldr	r1, [pc, #528]	; (80087f8 <svl_iplDaemon+0x59c>)
 80085e6:	2036      	movs	r0, #54	; 0x36
 80085e8:	f006 fd78 	bl	800f0dc <gos_traceTrace>
#endif
						iplState = SVL_IPL_STATE_CONNECTED;
 80085ec:	4b83      	ldr	r3, [pc, #524]	; (80087fc <svl_iplDaemon+0x5a0>)
 80085ee:	2207      	movs	r2, #7
 80085f0:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 80085f2:	e00f      	b.n	8008614 <svl_iplDaemon+0x3b8>
					}
					else
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Network connection failed.\r\n");
 80085f4:	4982      	ldr	r1, [pc, #520]	; (8008800 <svl_iplDaemon+0x5a4>)
 80085f6:	2036      	movs	r0, #54	; 0x36
 80085f8:	f006 fd70 	bl	800f0dc <gos_traceTrace>
#endif
						iplState = SVL_IPL_STATE_CONNECT_START;
 80085fc:	4b7f      	ldr	r3, [pc, #508]	; (80087fc <svl_iplDaemon+0x5a0>)
 80085fe:	2205      	movs	r2, #5
 8008600:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 8008602:	e007      	b.n	8008614 <svl_iplDaemon+0x3b8>
				}
				else
				{
					// No response.
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "No response was received.\r\n");
 8008604:	497f      	ldr	r1, [pc, #508]	; (8008804 <svl_iplDaemon+0x5a8>)
 8008606:	2036      	movs	r0, #54	; 0x36
 8008608:	f006 fd68 	bl	800f0dc <gos_traceTrace>
#endif
					iplState = SVL_IPL_STATE_CONNECT_START;
 800860c:	4b7b      	ldr	r3, [pc, #492]	; (80087fc <svl_iplDaemon+0x5a0>)
 800860e:	2205      	movs	r2, #5
 8008610:	701a      	strb	r2, [r3, #0]
				}

				break;
 8008612:	e242      	b.n	8008a9a <svl_iplDaemon+0x83e>
 8008614:	e241      	b.n	8008a9a <svl_iplDaemon+0x83e>
			}
			case SVL_IPL_STATE_CONNECTED:
			{
				// Check if there is an incoming request.
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 8008616:	4b75      	ldr	r3, [pc, #468]	; (80087ec <svl_iplDaemon+0x590>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f04f 32ff 	mov.w	r2, #4294967295
 800861e:	2110      	movs	r1, #16
 8008620:	486e      	ldr	r0, [pc, #440]	; (80087dc <svl_iplDaemon+0x580>)
 8008622:	4798      	blx	r3
 8008624:	4603      	mov	r3, r0
 8008626:	2b55      	cmp	r3, #85	; 0x55
 8008628:	f040 8234 	bne.w	8008a94 <svl_iplDaemon+0x838>
					svl_iplReceive(iplRxBuffer,       msgHeader.messageLength, 0xFFFFFFFFu) == GOS_SUCCESS)
 800862c:	4b6f      	ldr	r3, [pc, #444]	; (80087ec <svl_iplDaemon+0x590>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a6a      	ldr	r2, [pc, #424]	; (80087dc <svl_iplDaemon+0x580>)
 8008632:	6851      	ldr	r1, [r2, #4]
 8008634:	f04f 32ff 	mov.w	r2, #4294967295
 8008638:	486d      	ldr	r0, [pc, #436]	; (80087f0 <svl_iplDaemon+0x594>)
 800863a:	4798      	blx	r3
 800863c:	4603      	mov	r3, r0
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 800863e:	2b55      	cmp	r3, #85	; 0x55
 8008640:	f040 8228 	bne.w	8008a94 <svl_iplDaemon+0x838>
				{
					if (drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 8008644:	4b65      	ldr	r3, [pc, #404]	; (80087dc <svl_iplDaemon+0x580>)
 8008646:	6859      	ldr	r1, [r3, #4]
 8008648:	4b64      	ldr	r3, [pc, #400]	; (80087dc <svl_iplDaemon+0x580>)
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	2300      	movs	r3, #0
 800864e:	4868      	ldr	r0, [pc, #416]	; (80087f0 <svl_iplDaemon+0x594>)
 8008650:	f000 fc14 	bl	8008e7c <drv_crcCheckCrc32>
 8008654:	4603      	mov	r3, r0
 8008656:	2bca      	cmp	r3, #202	; 0xca
 8008658:	f040 81e9 	bne.w	8008a2e <svl_iplDaemon+0x7d2>
					{
						switch (msgHeader.messageId)
 800865c:	4b5f      	ldr	r3, [pc, #380]	; (80087dc <svl_iplDaemon+0x580>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2bb1      	cmp	r3, #177	; 0xb1
 8008662:	f000 8156 	beq.w	8008912 <svl_iplDaemon+0x6b6>
 8008666:	2bb1      	cmp	r3, #177	; 0xb1
 8008668:	f200 81e5 	bhi.w	8008a36 <svl_iplDaemon+0x7da>
 800866c:	2ba1      	cmp	r3, #161	; 0xa1
 800866e:	f000 8133 	beq.w	80088d8 <svl_iplDaemon+0x67c>
 8008672:	2ba1      	cmp	r3, #161	; 0xa1
 8008674:	f200 81df 	bhi.w	8008a36 <svl_iplDaemon+0x7da>
 8008678:	2b91      	cmp	r3, #145	; 0x91
 800867a:	f000 811f 	beq.w	80088bc <svl_iplDaemon+0x660>
 800867e:	2b91      	cmp	r3, #145	; 0x91
 8008680:	f200 81d9 	bhi.w	8008a36 <svl_iplDaemon+0x7da>
 8008684:	2b81      	cmp	r3, #129	; 0x81
 8008686:	f000 80d9 	beq.w	800883c <svl_iplDaemon+0x5e0>
 800868a:	2b81      	cmp	r3, #129	; 0x81
 800868c:	f200 81d3 	bhi.w	8008a36 <svl_iplDaemon+0x7da>
 8008690:	2b71      	cmp	r3, #113	; 0x71
 8008692:	d049      	beq.n	8008728 <svl_iplDaemon+0x4cc>
 8008694:	2b71      	cmp	r3, #113	; 0x71
 8008696:	f200 81ce 	bhi.w	8008a36 <svl_iplDaemon+0x7da>
 800869a:	2b61      	cmp	r3, #97	; 0x61
 800869c:	d036      	beq.n	800870c <svl_iplDaemon+0x4b0>
 800869e:	2b61      	cmp	r3, #97	; 0x61
 80086a0:	f200 81c9 	bhi.w	8008a36 <svl_iplDaemon+0x7da>
 80086a4:	2b51      	cmp	r3, #81	; 0x51
 80086a6:	d023      	beq.n	80086f0 <svl_iplDaemon+0x494>
 80086a8:	2b51      	cmp	r3, #81	; 0x51
 80086aa:	f200 81c4 	bhi.w	8008a36 <svl_iplDaemon+0x7da>
 80086ae:	2b31      	cmp	r3, #49	; 0x31
 80086b0:	d002      	beq.n	80086b8 <svl_iplDaemon+0x45c>
 80086b2:	2b41      	cmp	r3, #65	; 0x41
 80086b4:	d011      	beq.n	80086da <svl_iplDaemon+0x47e>

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_MODIFY_ACK, (u8_t*)&taskModifyMsg, sizeof(taskModifyMsg));
								break;
#endif
							}
							default: break;
 80086b6:	e1be      	b.n	8008a36 <svl_iplDaemon+0x7da>
								(void_t) gos_traceTrace(GOS_TRUE, "IPL CPU load request received.\r\n");
 80086b8:	4953      	ldr	r1, [pc, #332]	; (8008808 <svl_iplDaemon+0x5ac>)
 80086ba:	2036      	movs	r0, #54	; 0x36
 80086bc:	f006 fd0e 	bl	800f0dc <gos_traceTrace>
								cpuLoadMsg.cpuLoad = gos_kernelGetCpuUsage();
 80086c0:	f000 fef8 	bl	80094b4 <gos_kernelGetCpuUsage>
 80086c4:	4603      	mov	r3, r0
 80086c6:	461a      	mov	r2, r3
 80086c8:	4b50      	ldr	r3, [pc, #320]	; (800880c <svl_iplDaemon+0x5b0>)
 80086ca:	801a      	strh	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_CPU_LOAD_ACK, (u8_t*)&cpuLoadMsg, sizeof(cpuLoadMsg));
 80086cc:	2202      	movs	r2, #2
 80086ce:	494f      	ldr	r1, [pc, #316]	; (800880c <svl_iplDaemon+0x5b0>)
 80086d0:	f640 2031 	movw	r0, #2609	; 0xa31
 80086d4:	f000 fa06 	bl	8008ae4 <svl_iplSendMessage>
								break;
 80086d8:	e1ae      	b.n	8008a38 <svl_iplDaemon+0x7dc>
								(void_t) gos_traceTrace(GOS_TRUE, "IPL reset request received.\r\n");
 80086da:	494d      	ldr	r1, [pc, #308]	; (8008810 <svl_iplDaemon+0x5b4>)
 80086dc:	2036      	movs	r0, #54	; 0x36
 80086de:	f006 fcfd 	bl	800f0dc <gos_traceTrace>
								(void_t) gos_taskSleep(2000);
 80086e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80086e6:	f002 f889 	bl	800a7fc <gos_taskSleep>
								gos_kernelReset();
 80086ea:	f000 fef5 	bl	80094d8 <gos_kernelReset>
								break;
 80086ee:	e1a3      	b.n	8008a38 <svl_iplDaemon+0x7dc>
								(void_t) gos_traceTrace(GOS_TRUE, "IPL ping request received.\r\n");
 80086f0:	4948      	ldr	r1, [pc, #288]	; (8008814 <svl_iplDaemon+0x5b8>)
 80086f2:	2036      	movs	r0, #54	; 0x36
 80086f4:	f006 fcf2 	bl	800f0dc <gos_traceTrace>
								pingMsg.pingResult = SVL_IPL_PING_OK;
 80086f8:	4b47      	ldr	r3, [pc, #284]	; (8008818 <svl_iplDaemon+0x5bc>)
 80086fa:	2228      	movs	r2, #40	; 0x28
 80086fc:	701a      	strb	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_PING_ACK, (u8_t*)&pingMsg, sizeof(pingMsg));
 80086fe:	2201      	movs	r2, #1
 8008700:	4945      	ldr	r1, [pc, #276]	; (8008818 <svl_iplDaemon+0x5bc>)
 8008702:	f640 2051 	movw	r0, #2641	; 0xa51
 8008706:	f000 f9ed 	bl	8008ae4 <svl_iplSendMessage>
								break;
 800870a:	e195      	b.n	8008a38 <svl_iplDaemon+0x7dc>
								(void_t) gos_traceTrace(GOS_TRUE, "IPL task number request received.\r\n");
 800870c:	4943      	ldr	r1, [pc, #268]	; (800881c <svl_iplDaemon+0x5c0>)
 800870e:	2036      	movs	r0, #54	; 0x36
 8008710:	f006 fce4 	bl	800f0dc <gos_traceTrace>
								(void_t) gos_taskGetNumber(&taskNumMsg.taskNumber);
 8008714:	4842      	ldr	r0, [pc, #264]	; (8008820 <svl_iplDaemon+0x5c4>)
 8008716:	f003 fbed 	bl	800bef4 <gos_taskGetNumber>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_NUM_ACK, (u8_t*)&taskNumMsg, sizeof(taskNumMsg));
 800871a:	2202      	movs	r2, #2
 800871c:	4940      	ldr	r1, [pc, #256]	; (8008820 <svl_iplDaemon+0x5c4>)
 800871e:	f640 2061 	movw	r0, #2657	; 0xa61
 8008722:	f000 f9df 	bl	8008ae4 <svl_iplSendMessage>
								break;
 8008726:	e187      	b.n	8008a38 <svl_iplDaemon+0x7dc>
 8008728:	4b31      	ldr	r3, [pc, #196]	; (80087f0 <svl_iplDaemon+0x594>)
 800872a:	881a      	ldrh	r2, [r3, #0]
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 800872c:	4b3d      	ldr	r3, [pc, #244]	; (8008824 <svl_iplDaemon+0x5c8>)
 800872e:	801a      	strh	r2, [r3, #0]
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 8008730:	4b3c      	ldr	r3, [pc, #240]	; (8008824 <svl_iplDaemon+0x5c8>)
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	493c      	ldr	r1, [pc, #240]	; (8008828 <svl_iplDaemon+0x5cc>)
 8008736:	4618      	mov	r0, r3
 8008738:	f003 fb6a 	bl	800be10 <gos_taskGetDataByIndex>
										taskDataGetMsg.taskIdx);
 800873c:	4b39      	ldr	r3, [pc, #228]	; (8008824 <svl_iplDaemon+0x5c8>)
 800873e:	881b      	ldrh	r3, [r3, #0]
								(void_t) gos_traceTraceFormatted(
 8008740:	461a      	mov	r2, r3
 8008742:	493a      	ldr	r1, [pc, #232]	; (800882c <svl_iplDaemon+0x5d0>)
 8008744:	2036      	movs	r0, #54	; 0x36
 8008746:	f006 fde5 	bl	800f314 <gos_traceTraceFormatted>
								taskDataMsg.taskCpuUsage         = taskData.taskCpuUsage;
 800874a:	4b37      	ldr	r3, [pc, #220]	; (8008828 <svl_iplDaemon+0x5cc>)
 800874c:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008750:	4b37      	ldr	r3, [pc, #220]	; (8008830 <svl_iplDaemon+0x5d4>)
 8008752:	875a      	strh	r2, [r3, #58]	; 0x3a
								taskDataMsg.taskCpuUsageLimit    = taskData.taskCpuUsageLimit;
 8008754:	4b34      	ldr	r3, [pc, #208]	; (8008828 <svl_iplDaemon+0x5cc>)
 8008756:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800875a:	4b35      	ldr	r3, [pc, #212]	; (8008830 <svl_iplDaemon+0x5d4>)
 800875c:	86da      	strh	r2, [r3, #54]	; 0x36
								taskDataMsg.taskCpuUsageMax      = taskData.taskCpuUsageMax;
 800875e:	4b32      	ldr	r3, [pc, #200]	; (8008828 <svl_iplDaemon+0x5cc>)
 8008760:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008764:	4b32      	ldr	r3, [pc, #200]	; (8008830 <svl_iplDaemon+0x5d4>)
 8008766:	871a      	strh	r2, [r3, #56]	; 0x38
								taskDataMsg.taskCsCounter        = taskData.taskCsCounter;
 8008768:	4b2f      	ldr	r3, [pc, #188]	; (8008828 <svl_iplDaemon+0x5cc>)
 800876a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876c:	4a30      	ldr	r2, [pc, #192]	; (8008830 <svl_iplDaemon+0x5d4>)
 800876e:	f8c2 3027 	str.w	r3, [r2, #39]	; 0x27
								taskDataMsg.taskId               = taskData.taskId;
 8008772:	4b2d      	ldr	r3, [pc, #180]	; (8008828 <svl_iplDaemon+0x5cc>)
 8008774:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008776:	4b2e      	ldr	r3, [pc, #184]	; (8008830 <svl_iplDaemon+0x5d4>)
 8008778:	f8a3 2025 	strh.w	r2, [r3, #37]	; 0x25
								(void_t) strcpy(taskDataMsg.taskName, taskData.taskName);
 800877c:	492d      	ldr	r1, [pc, #180]	; (8008834 <svl_iplDaemon+0x5d8>)
 800877e:	482e      	ldr	r0, [pc, #184]	; (8008838 <svl_iplDaemon+0x5dc>)
 8008780:	f008 f87f 	bl	8010882 <strcpy>
								taskDataMsg.taskOriginalPriority = taskData.taskOriginalPriority;
 8008784:	4b28      	ldr	r3, [pc, #160]	; (8008828 <svl_iplDaemon+0x5cc>)
 8008786:	79da      	ldrb	r2, [r3, #7]
 8008788:	4b29      	ldr	r3, [pc, #164]	; (8008830 <svl_iplDaemon+0x5d4>)
 800878a:	709a      	strb	r2, [r3, #2]
								taskDataMsg.taskPriority         = taskData.taskPriority;
 800878c:	4b26      	ldr	r3, [pc, #152]	; (8008828 <svl_iplDaemon+0x5cc>)
 800878e:	799a      	ldrb	r2, [r3, #6]
 8008790:	4b27      	ldr	r3, [pc, #156]	; (8008830 <svl_iplDaemon+0x5d4>)
 8008792:	705a      	strb	r2, [r3, #1]
								taskDataMsg.taskPrivilegeLevel   = taskData.taskPrivilegeLevel;
 8008794:	4b24      	ldr	r3, [pc, #144]	; (8008828 <svl_iplDaemon+0x5cc>)
 8008796:	891a      	ldrh	r2, [r3, #8]
 8008798:	4b25      	ldr	r3, [pc, #148]	; (8008830 <svl_iplDaemon+0x5d4>)
 800879a:	f8a3 2003 	strh.w	r2, [r3, #3]
								(void_t) memcpy(&taskDataMsg.taskRunTime, &taskData.taskRunTime, sizeof(taskData.taskRunTime));
 800879e:	4a24      	ldr	r2, [pc, #144]	; (8008830 <svl_iplDaemon+0x5d4>)
 80087a0:	4b21      	ldr	r3, [pc, #132]	; (8008828 <svl_iplDaemon+0x5cc>)
 80087a2:	322d      	adds	r2, #45	; 0x2d
 80087a4:	334c      	adds	r3, #76	; 0x4c
 80087a6:	cb03      	ldmia	r3!, {r0, r1}
 80087a8:	6010      	str	r0, [r2, #0]
 80087aa:	6051      	str	r1, [r2, #4]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	7213      	strb	r3, [r2, #8]
								taskDataMsg.taskStackMaxUsage    = taskData.taskStackSizeMaxUsage;
 80087b0:	4b1d      	ldr	r3, [pc, #116]	; (8008828 <svl_iplDaemon+0x5cc>)
 80087b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80087b6:	4b1e      	ldr	r3, [pc, #120]	; (8008830 <svl_iplDaemon+0x5d4>)
 80087b8:	879a      	strh	r2, [r3, #60]	; 0x3c
								taskDataMsg.taskStackSize        = taskData.taskStackSize;
 80087ba:	4b1b      	ldr	r3, [pc, #108]	; (8008828 <svl_iplDaemon+0x5cc>)
 80087bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80087c0:	4b1b      	ldr	r3, [pc, #108]	; (8008830 <svl_iplDaemon+0x5d4>)
 80087c2:	f8a3 202b 	strh.w	r2, [r3, #43]	; 0x2b
								taskDataMsg.taskState            = taskData.taskState;
 80087c6:	4b18      	ldr	r3, [pc, #96]	; (8008828 <svl_iplDaemon+0x5cc>)
 80087c8:	791a      	ldrb	r2, [r3, #4]
 80087ca:	4b19      	ldr	r3, [pc, #100]	; (8008830 <svl_iplDaemon+0x5d4>)
 80087cc:	701a      	strb	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_DATA_ACK, (u8_t*)&taskDataMsg, sizeof(taskDataMsg));
 80087ce:	223e      	movs	r2, #62	; 0x3e
 80087d0:	4917      	ldr	r1, [pc, #92]	; (8008830 <svl_iplDaemon+0x5d4>)
 80087d2:	f640 2071 	movw	r0, #2673	; 0xa71
 80087d6:	f000 f985 	bl	8008ae4 <svl_iplSendMessage>
								break;
 80087da:	e12d      	b.n	8008a38 <svl_iplDaemon+0x7dc>
 80087dc:	200027d4 	.word	0x200027d4
 80087e0:	200027e0 	.word	0x200027e0
 80087e4:	200027e4 	.word	0x200027e4
 80087e8:	20002b8c 	.word	0x20002b8c
 80087ec:	20002b90 	.word	0x20002b90
 80087f0:	2000267c 	.word	0x2000267c
 80087f4:	200027e8 	.word	0x200027e8
 80087f8:	08012d00 	.word	0x08012d00
 80087fc:	20002678 	.word	0x20002678
 8008800:	08012d2c 	.word	0x08012d2c
 8008804:	08012d4c 	.word	0x08012d4c
 8008808:	08012d68 	.word	0x08012d68
 800880c:	200027d0 	.word	0x200027d0
 8008810:	08012d8c 	.word	0x08012d8c
 8008814:	08012dac 	.word	0x08012dac
 8008818:	200027ec 	.word	0x200027ec
 800881c:	08012dcc 	.word	0x08012dcc
 8008820:	200027f0 	.word	0x200027f0
 8008824:	20002768 	.word	0x20002768
 8008828:	200026fc 	.word	0x200026fc
 800882c:	08012df0 	.word	0x08012df0
 8008830:	20002790 	.word	0x20002790
 8008834:	20002706 	.word	0x20002706
 8008838:	20002795 	.word	0x20002795
 800883c:	4b99      	ldr	r3, [pc, #612]	; (8008aa4 <svl_iplDaemon+0x848>)
 800883e:	881a      	ldrh	r2, [r3, #0]
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 8008840:	4b99      	ldr	r3, [pc, #612]	; (8008aa8 <svl_iplDaemon+0x84c>)
 8008842:	801a      	strh	r2, [r3, #0]
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 8008844:	4b98      	ldr	r3, [pc, #608]	; (8008aa8 <svl_iplDaemon+0x84c>)
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	4998      	ldr	r1, [pc, #608]	; (8008aac <svl_iplDaemon+0x850>)
 800884a:	4618      	mov	r0, r3
 800884c:	f003 fae0 	bl	800be10 <gos_taskGetDataByIndex>
										taskDataGetMsg.taskIdx);
 8008850:	4b95      	ldr	r3, [pc, #596]	; (8008aa8 <svl_iplDaemon+0x84c>)
 8008852:	881b      	ldrh	r3, [r3, #0]
								(void_t) gos_traceTraceFormatted(
 8008854:	461a      	mov	r2, r3
 8008856:	4996      	ldr	r1, [pc, #600]	; (8008ab0 <svl_iplDaemon+0x854>)
 8008858:	2036      	movs	r0, #54	; 0x36
 800885a:	f006 fd5b 	bl	800f314 <gos_traceTraceFormatted>
								taskVarDataMsg.taskStackMaxUsage = taskData.taskStackSizeMaxUsage;
 800885e:	4b93      	ldr	r3, [pc, #588]	; (8008aac <svl_iplDaemon+0x850>)
 8008860:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008864:	4b93      	ldr	r3, [pc, #588]	; (8008ab4 <svl_iplDaemon+0x858>)
 8008866:	f8a3 2013 	strh.w	r2, [r3, #19]
								taskVarDataMsg.taskCpuUsage      = taskData.taskCpuUsage;
 800886a:	4b90      	ldr	r3, [pc, #576]	; (8008aac <svl_iplDaemon+0x850>)
 800886c:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008870:	4b90      	ldr	r3, [pc, #576]	; (8008ab4 <svl_iplDaemon+0x858>)
 8008872:	f8a3 2011 	strh.w	r2, [r3, #17]
								taskVarDataMsg.taskCpuUsageMax   = taskData.taskCpuUsageMax;
 8008876:	4b8d      	ldr	r3, [pc, #564]	; (8008aac <svl_iplDaemon+0x850>)
 8008878:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800887c:	4b8d      	ldr	r3, [pc, #564]	; (8008ab4 <svl_iplDaemon+0x858>)
 800887e:	f8a3 200f 	strh.w	r2, [r3, #15]
								taskVarDataMsg.taskPriority      = taskData.taskPriority;
 8008882:	4b8a      	ldr	r3, [pc, #552]	; (8008aac <svl_iplDaemon+0x850>)
 8008884:	799a      	ldrb	r2, [r3, #6]
 8008886:	4b8b      	ldr	r3, [pc, #556]	; (8008ab4 <svl_iplDaemon+0x858>)
 8008888:	705a      	strb	r2, [r3, #1]
								taskVarDataMsg.taskCsCounter     = taskData.taskCsCounter;
 800888a:	4b88      	ldr	r3, [pc, #544]	; (8008aac <svl_iplDaemon+0x850>)
 800888c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888e:	4a89      	ldr	r2, [pc, #548]	; (8008ab4 <svl_iplDaemon+0x858>)
 8008890:	f8c2 3002 	str.w	r3, [r2, #2]
			                    taskVarDataMsg.taskState         = taskData.taskState;
 8008894:	4b85      	ldr	r3, [pc, #532]	; (8008aac <svl_iplDaemon+0x850>)
 8008896:	791a      	ldrb	r2, [r3, #4]
 8008898:	4b86      	ldr	r3, [pc, #536]	; (8008ab4 <svl_iplDaemon+0x858>)
 800889a:	701a      	strb	r2, [r3, #0]
			                    (void_t) memcpy((void_t*)&taskVarDataMsg.taskRunTime, (void_t*)&taskData.taskRunTime, sizeof(taskData.taskRunTime));
 800889c:	4a85      	ldr	r2, [pc, #532]	; (8008ab4 <svl_iplDaemon+0x858>)
 800889e:	4b83      	ldr	r3, [pc, #524]	; (8008aac <svl_iplDaemon+0x850>)
 80088a0:	3206      	adds	r2, #6
 80088a2:	334c      	adds	r3, #76	; 0x4c
 80088a4:	cb03      	ldmia	r3!, {r0, r1}
 80088a6:	6010      	str	r0, [r2, #0]
 80088a8:	6051      	str	r1, [r2, #4]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	7213      	strb	r3, [r2, #8]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_VAR_DATA_ACK, (u8_t*)&taskVarDataMsg, sizeof(taskVarDataMsg));
 80088ae:	2215      	movs	r2, #21
 80088b0:	4980      	ldr	r1, [pc, #512]	; (8008ab4 <svl_iplDaemon+0x858>)
 80088b2:	f640 2081 	movw	r0, #2689	; 0xa81
 80088b6:	f000 f915 	bl	8008ae4 <svl_iplSendMessage>
								break;
 80088ba:	e0bd      	b.n	8008a38 <svl_iplDaemon+0x7dc>
								(void_t) gos_traceTrace(GOS_TRUE, "IPL runtime request received.\r\n");
 80088bc:	497e      	ldr	r1, [pc, #504]	; (8008ab8 <svl_iplDaemon+0x85c>)
 80088be:	2036      	movs	r0, #54	; 0x36
 80088c0:	f006 fc0c 	bl	800f0dc <gos_traceTrace>
								(void_t) gos_runTimeGet(&runTimeMsg.sysRunTime);
 80088c4:	487d      	ldr	r0, [pc, #500]	; (8008abc <svl_iplDaemon+0x860>)
 80088c6:	f006 f8bf 	bl	800ea48 <gos_runTimeGet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_RUNTIME_ACK, (u8_t*)&runTimeMsg, sizeof(runTimeMsg));
 80088ca:	2209      	movs	r2, #9
 80088cc:	497b      	ldr	r1, [pc, #492]	; (8008abc <svl_iplDaemon+0x860>)
 80088ce:	f640 2091 	movw	r0, #2705	; 0xa91
 80088d2:	f000 f907 	bl	8008ae4 <svl_iplSendMessage>
								break;
 80088d6:	e0af      	b.n	8008a38 <svl_iplDaemon+0x7dc>
								(void_t) gos_traceTrace(GOS_TRUE, "IPL software info request received.\r\n");
 80088d8:	4979      	ldr	r1, [pc, #484]	; (8008ac0 <svl_iplDaemon+0x864>)
 80088da:	2036      	movs	r0, #54	; 0x36
 80088dc:	f006 fbfe 	bl	800f0dc <gos_traceTrace>
								(void_t) bld_dataGet(&swInfoMsg.bldData);
 80088e0:	4878      	ldr	r0, [pc, #480]	; (8008ac4 <svl_iplDaemon+0x868>)
 80088e2:	f000 f995 	bl	8008c10 <bld_dataGet>
								(void_t) bld_appDataGet(&swInfoMsg.appData);
 80088e6:	4878      	ldr	r0, [pc, #480]	; (8008ac8 <svl_iplDaemon+0x86c>)
 80088e8:	f000 f9d0 	bl	8008c8c <bld_appDataGet>
								if (swInfoMsg.appData.libVersion.date.years == 0u)
 80088ec:	4b75      	ldr	r3, [pc, #468]	; (8008ac4 <svl_iplDaemon+0x868>)
 80088ee:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d105      	bne.n	8008902 <svl_iplDaemon+0x6a6>
									(void_t) gos_libGetVersion(&swInfoMsg.appData.libVersion);
 80088f6:	4875      	ldr	r0, [pc, #468]	; (8008acc <svl_iplDaemon+0x870>)
 80088f8:	f000 f92c 	bl	8008b54 <gos_libGetVersion>
									(void_t) bld_appDataSet(&swInfoMsg.appData);
 80088fc:	4872      	ldr	r0, [pc, #456]	; (8008ac8 <svl_iplDaemon+0x86c>)
 80088fe:	f000 fa05 	bl	8008d0c <bld_appDataSet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SWINFO_ACK, (u8_t*)&swInfoMsg, sizeof(swInfoMsg));
 8008902:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8008906:	496f      	ldr	r1, [pc, #444]	; (8008ac4 <svl_iplDaemon+0x868>)
 8008908:	f640 20a1 	movw	r0, #2721	; 0xaa1
 800890c:	f000 f8ea 	bl	8008ae4 <svl_iplSendMessage>
								break;
 8008910:	e092      	b.n	8008a38 <svl_iplDaemon+0x7dc>
 8008912:	4b64      	ldr	r3, [pc, #400]	; (8008aa4 <svl_iplDaemon+0x848>)
 8008914:	681b      	ldr	r3, [r3, #0]
								(void_t) memcpy((void_t*)&taskModifyMsg, (void_t*)iplRxBuffer, sizeof(taskModifyMsg));
 8008916:	4a6e      	ldr	r2, [pc, #440]	; (8008ad0 <svl_iplDaemon+0x874>)
 8008918:	6013      	str	r3, [r2, #0]
										taskModifyMsg.taskIdx,
 800891a:	4b6d      	ldr	r3, [pc, #436]	; (8008ad0 <svl_iplDaemon+0x874>)
 800891c:	881b      	ldrh	r3, [r3, #0]
								(void_t) gos_traceTraceFormatted(
 800891e:	461a      	mov	r2, r3
										taskModifyMsg.modificationType);
 8008920:	4b6b      	ldr	r3, [pc, #428]	; (8008ad0 <svl_iplDaemon+0x874>)
 8008922:	789b      	ldrb	r3, [r3, #2]
								(void_t) gos_traceTraceFormatted(
 8008924:	496b      	ldr	r1, [pc, #428]	; (8008ad4 <svl_iplDaemon+0x878>)
 8008926:	2036      	movs	r0, #54	; 0x36
 8008928:	f006 fcf4 	bl	800f314 <gos_traceTraceFormatted>
								(void_t) gos_taskGetDataByIndex(taskModifyMsg.taskIdx, &taskData);
 800892c:	4b68      	ldr	r3, [pc, #416]	; (8008ad0 <svl_iplDaemon+0x874>)
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	495e      	ldr	r1, [pc, #376]	; (8008aac <svl_iplDaemon+0x850>)
 8008932:	4618      	mov	r0, r3
 8008934:	f003 fa6c 	bl	800be10 <gos_taskGetDataByIndex>
								switch (taskModifyMsg.modificationType)
 8008938:	4b65      	ldr	r3, [pc, #404]	; (8008ad0 <svl_iplDaemon+0x874>)
 800893a:	789b      	ldrb	r3, [r3, #2]
 800893c:	2b05      	cmp	r3, #5
 800893e:	d86b      	bhi.n	8008a18 <svl_iplDaemon+0x7bc>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <svl_iplDaemon+0x6ec>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	08008961 	.word	0x08008961
 800894c:	0800897f 	.word	0x0800897f
 8008950:	0800899d 	.word	0x0800899d
 8008954:	080089bb 	.word	0x080089bb
 8008958:	080089dd 	.word	0x080089dd
 800895c:	080089fb 	.word	0x080089fb
										taskModifyMsg.result = gos_taskSuspend(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 8008960:	4b52      	ldr	r3, [pc, #328]	; (8008aac <svl_iplDaemon+0x850>)
 8008962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008964:	4618      	mov	r0, r3
 8008966:	f002 f895 	bl	800aa94 <gos_taskSuspend>
 800896a:	4603      	mov	r3, r0
 800896c:	2b55      	cmp	r3, #85	; 0x55
 800896e:	bf0c      	ite	eq
 8008970:	2301      	moveq	r3, #1
 8008972:	2300      	movne	r3, #0
 8008974:	b2db      	uxtb	r3, r3
 8008976:	461a      	mov	r2, r3
 8008978:	4b55      	ldr	r3, [pc, #340]	; (8008ad0 <svl_iplDaemon+0x874>)
 800897a:	70da      	strb	r2, [r3, #3]
										break;
 800897c:	e050      	b.n	8008a20 <svl_iplDaemon+0x7c4>
										taskModifyMsg.result = gos_taskResume(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800897e:	4b4b      	ldr	r3, [pc, #300]	; (8008aac <svl_iplDaemon+0x850>)
 8008980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008982:	4618      	mov	r0, r3
 8008984:	f002 f9a8 	bl	800acd8 <gos_taskResume>
 8008988:	4603      	mov	r3, r0
 800898a:	2b55      	cmp	r3, #85	; 0x55
 800898c:	bf0c      	ite	eq
 800898e:	2301      	moveq	r3, #1
 8008990:	2300      	movne	r3, #0
 8008992:	b2db      	uxtb	r3, r3
 8008994:	461a      	mov	r2, r3
 8008996:	4b4e      	ldr	r3, [pc, #312]	; (8008ad0 <svl_iplDaemon+0x874>)
 8008998:	70da      	strb	r2, [r3, #3]
										break;
 800899a:	e041      	b.n	8008a20 <svl_iplDaemon+0x7c4>
										taskModifyMsg.result = gos_taskDelete(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800899c:	4b43      	ldr	r3, [pc, #268]	; (8008aac <svl_iplDaemon+0x850>)
 800899e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a0:	4618      	mov	r0, r3
 80089a2:	f002 fc43 	bl	800b22c <gos_taskDelete>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b55      	cmp	r3, #85	; 0x55
 80089aa:	bf0c      	ite	eq
 80089ac:	2301      	moveq	r3, #1
 80089ae:	2300      	movne	r3, #0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	461a      	mov	r2, r3
 80089b4:	4b46      	ldr	r3, [pc, #280]	; (8008ad0 <svl_iplDaemon+0x874>)
 80089b6:	70da      	strb	r2, [r3, #3]
										break;
 80089b8:	e032      	b.n	8008a20 <svl_iplDaemon+0x7c4>
										taskModifyMsg.result = gos_taskBlock(taskData.taskId, GOS_TASK_MAX_BLOCK_TIME_MS) == GOS_SUCCESS ? 1 : 0;
 80089ba:	4b3c      	ldr	r3, [pc, #240]	; (8008aac <svl_iplDaemon+0x850>)
 80089bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089be:	f04f 31ff 	mov.w	r1, #4294967295
 80089c2:	4618      	mov	r0, r3
 80089c4:	f002 fa36 	bl	800ae34 <gos_taskBlock>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b55      	cmp	r3, #85	; 0x55
 80089cc:	bf0c      	ite	eq
 80089ce:	2301      	moveq	r3, #1
 80089d0:	2300      	movne	r3, #0
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	461a      	mov	r2, r3
 80089d6:	4b3e      	ldr	r3, [pc, #248]	; (8008ad0 <svl_iplDaemon+0x874>)
 80089d8:	70da      	strb	r2, [r3, #3]
										break;
 80089da:	e021      	b.n	8008a20 <svl_iplDaemon+0x7c4>
										taskModifyMsg.result = gos_taskUnblock(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 80089dc:	4b33      	ldr	r3, [pc, #204]	; (8008aac <svl_iplDaemon+0x850>)
 80089de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089e0:	4618      	mov	r0, r3
 80089e2:	f002 fb39 	bl	800b058 <gos_taskUnblock>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b55      	cmp	r3, #85	; 0x55
 80089ea:	bf0c      	ite	eq
 80089ec:	2301      	moveq	r3, #1
 80089ee:	2300      	movne	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	4b36      	ldr	r3, [pc, #216]	; (8008ad0 <svl_iplDaemon+0x874>)
 80089f6:	70da      	strb	r2, [r3, #3]
										break;
 80089f8:	e012      	b.n	8008a20 <svl_iplDaemon+0x7c4>
										taskModifyMsg.result = gos_taskWakeup(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 80089fa:	4b2c      	ldr	r3, [pc, #176]	; (8008aac <svl_iplDaemon+0x850>)
 80089fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 ff82 	bl	800a908 <gos_taskWakeup>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b55      	cmp	r3, #85	; 0x55
 8008a08:	bf0c      	ite	eq
 8008a0a:	2301      	moveq	r3, #1
 8008a0c:	2300      	movne	r3, #0
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	4b2f      	ldr	r3, [pc, #188]	; (8008ad0 <svl_iplDaemon+0x874>)
 8008a14:	70da      	strb	r2, [r3, #3]
										break;
 8008a16:	e003      	b.n	8008a20 <svl_iplDaemon+0x7c4>
										taskModifyMsg.result = 0;
 8008a18:	4b2d      	ldr	r3, [pc, #180]	; (8008ad0 <svl_iplDaemon+0x874>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	70da      	strb	r2, [r3, #3]
										break;
 8008a1e:	bf00      	nop
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_MODIFY_ACK, (u8_t*)&taskModifyMsg, sizeof(taskModifyMsg));
 8008a20:	2204      	movs	r2, #4
 8008a22:	492b      	ldr	r1, [pc, #172]	; (8008ad0 <svl_iplDaemon+0x874>)
 8008a24:	f640 20b1 	movw	r0, #2737	; 0xab1
 8008a28:	f000 f85c 	bl	8008ae4 <svl_iplSendMessage>
								break;
 8008a2c:	e004      	b.n	8008a38 <svl_iplDaemon+0x7dc>
						}
					}
					else
					{
						(void_t) gos_taskSleep(10);
 8008a2e:	200a      	movs	r0, #10
 8008a30:	f001 fee4 	bl	800a7fc <gos_taskSleep>
					}
				}
				break;
 8008a34:	e02e      	b.n	8008a94 <svl_iplDaemon+0x838>
							default: break;
 8008a36:	bf00      	nop
				break;
 8008a38:	e02c      	b.n	8008a94 <svl_iplDaemon+0x838>
			}
			default:
			{
#if SVL_IPL_TRACE_LEVEL == 2
				(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL request received with ID: %u.\r\n", msgHeader.messageId);
 8008a3a:	4b27      	ldr	r3, [pc, #156]	; (8008ad8 <svl_iplDaemon+0x87c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4926      	ldr	r1, [pc, #152]	; (8008adc <svl_iplDaemon+0x880>)
 8008a42:	2036      	movs	r0, #54	; 0x36
 8008a44:	f006 fc66 	bl	800f314 <gos_traceTraceFormatted>
#endif
				for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 8008a48:	2300      	movs	r3, #0
 8008a4a:	77fb      	strb	r3, [r7, #31]
 8008a4c:	e01c      	b.n	8008a88 <svl_iplDaemon+0x82c>
				{
					if (userMsgLut[lutIndex].callback == NULL)
 8008a4e:	7ffb      	ldrb	r3, [r7, #31]
 8008a50:	4a23      	ldr	r2, [pc, #140]	; (8008ae0 <svl_iplDaemon+0x884>)
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	4413      	add	r3, r2
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d01d      	beq.n	8008a98 <svl_iplDaemon+0x83c>
						// Last registered message found, break loop.
						break;
					}
					else
					{
						if (userMsgLut[lutIndex].msgId == msgHeader.messageId)
 8008a5c:	7ffb      	ldrb	r3, [r7, #31]
 8008a5e:	4a20      	ldr	r2, [pc, #128]	; (8008ae0 <svl_iplDaemon+0x884>)
 8008a60:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008a64:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <svl_iplDaemon+0x87c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d10a      	bne.n	8008a82 <svl_iplDaemon+0x826>
						{
							userMsgLut[lutIndex].callback(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc);
 8008a6c:	7ffb      	ldrb	r3, [r7, #31]
 8008a6e:	4a1c      	ldr	r2, [pc, #112]	; (8008ae0 <svl_iplDaemon+0x884>)
 8008a70:	00db      	lsls	r3, r3, #3
 8008a72:	4413      	add	r3, r2
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <svl_iplDaemon+0x87c>)
 8008a78:	6851      	ldr	r1, [r2, #4]
 8008a7a:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <svl_iplDaemon+0x87c>)
 8008a7c:	68d2      	ldr	r2, [r2, #12]
 8008a7e:	4809      	ldr	r0, [pc, #36]	; (8008aa4 <svl_iplDaemon+0x848>)
 8008a80:	4798      	blx	r3
				for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 8008a82:	7ffb      	ldrb	r3, [r7, #31]
 8008a84:	3301      	adds	r3, #1
 8008a86:	77fb      	strb	r3, [r7, #31]
 8008a88:	7ffb      	ldrb	r3, [r7, #31]
 8008a8a:	2b07      	cmp	r3, #7
 8008a8c:	d9df      	bls.n	8008a4e <svl_iplDaemon+0x7f2>
 8008a8e:	e004      	b.n	8008a9a <svl_iplDaemon+0x83e>
				break;
 8008a90:	bf00      	nop
 8008a92:	e002      	b.n	8008a9a <svl_iplDaemon+0x83e>
				break;
 8008a94:	bf00      	nop
 8008a96:	e000      	b.n	8008a9a <svl_iplDaemon+0x83e>
						break;
 8008a98:	bf00      	nop
						}
					}
				}
			}
		}
		(void_t) gos_taskSleep(10);
 8008a9a:	200a      	movs	r0, #10
 8008a9c:	f001 feae 	bl	800a7fc <gos_taskSleep>
		switch (iplState)
 8008aa0:	f7ff bbe5 	b.w	800826e <svl_iplDaemon+0x12>
 8008aa4:	2000267c 	.word	0x2000267c
 8008aa8:	20002768 	.word	0x20002768
 8008aac:	200026fc 	.word	0x200026fc
 8008ab0:	08012e1c 	.word	0x08012e1c
 8008ab4:	2000276c 	.word	0x2000276c
 8008ab8:	08012e50 	.word	0x08012e50
 8008abc:	20002784 	.word	0x20002784
 8008ac0:	08012e70 	.word	0x08012e70
 8008ac4:	20002888 	.word	0x20002888
 8008ac8:	200029f0 	.word	0x200029f0
 8008acc:	20002a00 	.word	0x20002a00
 8008ad0:	20002b48 	.word	0x20002b48
 8008ad4:	08012e98 	.word	0x08012e98
 8008ad8:	200027d4 	.word	0x200027d4
 8008adc:	08012ed4 	.word	0x08012ed4
 8008ae0:	20002b4c 	.word	0x20002b4c

08008ae4 <svl_iplSendMessage>:
 * @return  Result of message sending.
 * @retval  GOS_SUCCESS : Sending successful.
 * @retval  GOS_ERROR   : CRC calculation error or transmission error.
 */
GOS_STATIC gos_result_t svl_iplSendMessage (u32_t msgId, u8_t* pData, u32_t dataLength)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08a      	sub	sp, #40	; 0x28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t       sendResult = GOS_ERROR;
 8008af0:	23ae      	movs	r3, #174	; 0xae
 8008af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	svl_iplMsgHeader_t header;

	/*
	 * Function code.
	 */
	header.messageId     = msgId;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	617b      	str	r3, [r7, #20]
	header.messageLength = dataLength;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	61bb      	str	r3, [r7, #24]

	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 8008afe:	f107 0314 	add.w	r3, r7, #20
 8008b02:	330c      	adds	r3, #12
 8008b04:	461a      	mov	r2, r3
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	68b8      	ldr	r0, [r7, #8]
 8008b0a:	f000 f96b 	bl	8008de4 <drv_crcGetCrc32>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b55      	cmp	r3, #85	; 0x55
 8008b12:	d117      	bne.n	8008b44 <svl_iplSendMessage+0x60>
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 8008b14:	4b0e      	ldr	r3, [pc, #56]	; (8008b50 <svl_iplSendMessage+0x6c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f107 0014 	add.w	r0, r7, #20
 8008b1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b20:	2110      	movs	r1, #16
 8008b22:	4798      	blx	r3
 8008b24:	4603      	mov	r3, r0
	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 8008b26:	2b55      	cmp	r3, #85	; 0x55
 8008b28:	d10c      	bne.n	8008b44 <svl_iplSendMessage+0x60>
		svl_iplTransmit(pData, dataLength, 1000u) == GOS_SUCCESS)
 8008b2a:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <svl_iplSendMessage+0x6c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	68b8      	ldr	r0, [r7, #8]
 8008b36:	4798      	blx	r3
 8008b38:	4603      	mov	r3, r0
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 8008b3a:	2b55      	cmp	r3, #85	; 0x55
 8008b3c:	d102      	bne.n	8008b44 <svl_iplSendMessage+0x60>
	{
		sendResult = GOS_SUCCESS;
 8008b3e:	2355      	movs	r3, #85	; 0x55
 8008b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	else
	{
		// Error.
	}

	return sendResult;
 8008b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3728      	adds	r7, #40	; 0x28
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20002b8c 	.word	0x20002b8c

08008b54 <gos_libGetVersion>:

/*
 * Function: gos_libGetVersion
 */
gos_result_t gos_libGetVersion (gos_libVersion_t* pLibVersion)
{
 8008b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t getVersionResult = GOS_ERROR;
 8008b5c:	23ae      	movs	r3, #174	; 0xae
 8008b5e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pLibVersion != NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d049      	beq.n	8008bfa <gos_libGetVersion+0xa6>
    {
    	pLibVersion->major       = LIB_VERSION_MAJOR;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	801a      	strh	r2, [r3, #0]
    	pLibVersion->minor       = LIB_VERSION_MINOR;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	220a      	movs	r2, #10
 8008b70:	805a      	strh	r2, [r3, #2]
    	pLibVersion->build       = LIB_VERSION_BUILD;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	809a      	strh	r2, [r3, #4]
    	pLibVersion->date.years  = LIB_VERSION_DATE_YEAR;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8008b7e:	81da      	strh	r2, [r3, #14]
    	pLibVersion->date.months = LIB_VERSION_DATE_MONTH;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2207      	movs	r2, #7
 8008b84:	735a      	strb	r2, [r3, #13]
    	pLibVersion->date.days   = LIB_VERSION_DATE_DAY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f042 0213 	orr.w	r2, r2, #19
 8008b8e:	72da      	strb	r2, [r3, #11]
 8008b90:	2200      	movs	r2, #0
 8008b92:	731a      	strb	r2, [r3, #12]

        (void_t) strcpy((char_t*)pLibVersion->name, LIB_NAME);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3310      	adds	r3, #16
 8008b98:	4a1a      	ldr	r2, [pc, #104]	; (8008c04 <gos_libGetVersion+0xb0>)
 8008b9a:	461c      	mov	r4, r3
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ba0:	6020      	str	r0, [r4, #0]
 8008ba2:	6061      	str	r1, [r4, #4]
 8008ba4:	60a2      	str	r2, [r4, #8]
        (void_t) strcpy((char_t*)pLibVersion->description, LIB_DESCRIPTION);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3340      	adds	r3, #64	; 0x40
 8008baa:	4a17      	ldr	r2, [pc, #92]	; (8008c08 <gos_libGetVersion+0xb4>)
 8008bac:	4614      	mov	r4, r2
 8008bae:	469c      	mov	ip, r3
 8008bb0:	f104 0e20 	add.w	lr, r4, #32
 8008bb4:	4665      	mov	r5, ip
 8008bb6:	4626      	mov	r6, r4
 8008bb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008bba:	6028      	str	r0, [r5, #0]
 8008bbc:	6069      	str	r1, [r5, #4]
 8008bbe:	60aa      	str	r2, [r5, #8]
 8008bc0:	60eb      	str	r3, [r5, #12]
 8008bc2:	3410      	adds	r4, #16
 8008bc4:	f10c 0c10 	add.w	ip, ip, #16
 8008bc8:	4574      	cmp	r4, lr
 8008bca:	d1f3      	bne.n	8008bb4 <gos_libGetVersion+0x60>
 8008bcc:	4662      	mov	r2, ip
 8008bce:	4623      	mov	r3, r4
 8008bd0:	cb03      	ldmia	r3!, {r0, r1}
 8008bd2:	6010      	str	r0, [r2, #0]
 8008bd4:	6051      	str	r1, [r2, #4]
 8008bd6:	8819      	ldrh	r1, [r3, #0]
 8008bd8:	789b      	ldrb	r3, [r3, #2]
 8008bda:	8111      	strh	r1, [r2, #8]
 8008bdc:	7293      	strb	r3, [r2, #10]
        (void_t) strcpy((char_t*)pLibVersion->author, LIB_AUTHOR);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3380      	adds	r3, #128	; 0x80
 8008be2:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <gos_libGetVersion+0xb8>)
 8008be4:	461d      	mov	r5, r3
 8008be6:	4614      	mov	r4, r2
 8008be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008bea:	6028      	str	r0, [r5, #0]
 8008bec:	6069      	str	r1, [r5, #4]
 8008bee:	60aa      	str	r2, [r5, #8]
 8008bf0:	60eb      	str	r3, [r5, #12]
 8008bf2:	6820      	ldr	r0, [r4, #0]
 8008bf4:	6128      	str	r0, [r5, #16]

        getVersionResult = GOS_SUCCESS;
 8008bf6:	2355      	movs	r3, #85	; 0x55
 8008bf8:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Target is NULL.
    }

    return getVersionResult;
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c04:	08012ef8 	.word	0x08012ef8
 8008c08:	08012f04 	.word	0x08012f04
 8008c0c:	08012f30 	.word	0x08012f30

08008c10 <bld_dataGet>:

/*
 * Function: bld_dataGet
 */
gos_result_t bld_dataGet (bld_bootloaderData_t* pData)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008c1c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008c20:	6018      	str	r0, [r3, #0]
    /*
     * Local variables.
     */
    gos_result_t dataGetResult = GOS_ERROR;
 8008c22:	23ae      	movs	r3, #174	; 0xae
 8008c24:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
    bld_packedData bldPackedData = {0};
 8008c28:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008c2c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8008c30:	4618      	mov	r0, r3
 8008c32:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8008c36:	461a      	mov	r2, r3
 8008c38:	2100      	movs	r1, #0
 8008c3a:	f007 fda3 	bl	8010784 <memset>

    /*
     * Function code.
     */
    if (pData != NULL)
 8008c3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008c42:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d015      	beq.n	8008c78 <bld_dataGet+0x68>
    {
        dataGetResult = drv_flashRead(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData));
 8008c4c:	f107 030c 	add.w	r3, r7, #12
 8008c50:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008c54:	4619      	mov	r1, r3
 8008c56:	480c      	ldr	r0, [pc, #48]	; (8008c88 <bld_dataGet+0x78>)
 8008c58:	f000 f9ba 	bl	8008fd0 <drv_flashRead>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
        (void_t*) memcpy((void_t*)pData, (void_t*)&bldPackedData.bldData, sizeof(bldPackedData.bldData));
 8008c62:	f107 010c 	add.w	r1, r7, #12
 8008c66:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008c6a:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008c6e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008c72:	6818      	ldr	r0, [r3, #0]
 8008c74:	f007 fe0d 	bl	8010892 <memcpy>
    else
    {
        // Error.
    }

    return dataGetResult;
 8008c78:	f897 32ef 	ldrb.w	r3, [r7, #751]	; 0x2ef
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	08004000 	.word	0x08004000

08008c8c <bld_appDataGet>:

/*
 * Function: bld_appDataGet
 */
gos_result_t bld_appDataGet (bld_appData_t* pData)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008c98:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008c9c:	6018      	str	r0, [r3, #0]
    /*
     * Local variables.
     */
    gos_result_t   dataGetResult = GOS_ERROR;
 8008c9e:	23ae      	movs	r3, #174	; 0xae
 8008ca0:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
    bld_packedData bldPackedData = {0};
 8008ca4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008ca8:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8008cac:	4618      	mov	r0, r3
 8008cae:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	f007 fd65 	bl	8010784 <memset>

    /*
     * Function code.
     */
    if (pData != NULL)
 8008cba:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008cbe:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d017      	beq.n	8008cf8 <bld_appDataGet+0x6c>
    {
    	dataGetResult = drv_flashRead(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData));
 8008cc8:	f107 030c 	add.w	r3, r7, #12
 8008ccc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	480d      	ldr	r0, [pc, #52]	; (8008d08 <bld_appDataGet+0x7c>)
 8008cd4:	f000 f97c 	bl	8008fd0 <drv_flashRead>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
        (void_t*) memcpy((void_t*)pData, (void_t*)&bldPackedData.appData, sizeof(bldPackedData.appData));
 8008cde:	f107 030c 	add.w	r3, r7, #12
 8008ce2:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8008ce6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008cea:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008cee:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	f007 fdcd 	bl	8010892 <memcpy>
    else
    {
        // Error.
    }

    return dataGetResult;
 8008cf8:	f897 32ef 	ldrb.w	r3, [r7, #751]	; 0x2ef
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	08004000 	.word	0x08004000

08008d0c <bld_appDataSet>:

/*
 * Function: bld_appDataSet
 */
gos_result_t bld_appDataSet (bld_appData_t* pData)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008d18:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008d1c:	6018      	str	r0, [r3, #0]
    /*
     * Local variables.
     */
    gos_result_t dataSetResult = GOS_ERROR;
 8008d1e:	23ae      	movs	r3, #174	; 0xae
 8008d20:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
    bld_packedData bldPackedData = {0};
 8008d24:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008d28:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8008d32:	461a      	mov	r2, r3
 8008d34:	2100      	movs	r1, #0
 8008d36:	f007 fd25 	bl	8010784 <memset>

    /*
     * Function code.
     */
    if (pData != NULL && drv_flashRead(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData)) == GOS_SUCCESS)
 8008d3a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008d3e:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d041      	beq.n	8008dcc <bld_appDataSet+0xc0>
 8008d48:	f107 030c 	add.w	r3, r7, #12
 8008d4c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008d50:	4619      	mov	r1, r3
 8008d52:	4822      	ldr	r0, [pc, #136]	; (8008ddc <bld_appDataSet+0xd0>)
 8008d54:	f000 f93c 	bl	8008fd0 <drv_flashRead>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b55      	cmp	r3, #85	; 0x55
 8008d5c:	d136      	bne.n	8008dcc <bld_appDataSet+0xc0>
    {
        // Calculate CRC.
        (void_t) drv_crcGetCrc32((u8_t*)pData, sizeof(*pData) - sizeof(pData->dataCrc), &pData->dataCrc);
 8008d5e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008d62:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8008d6c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008d70:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008d74:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8008d78:	6818      	ldr	r0, [r3, #0]
 8008d7a:	f000 f833 	bl	8008de4 <drv_crcGetCrc32>

        // Copy application data to packed data.
        (void_t*) memcpy((void_t*)&bldPackedData.appData, (void_t*)pData, sizeof(*pData));
 8008d7e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8008d82:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8008d86:	f107 020c 	add.w	r2, r7, #12
 8008d8a:	f502 70b4 	add.w	r0, r2, #360	; 0x168
 8008d8e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	f007 fd7d 	bl	8010892 <memcpy>

        // Save updated packed data.
        if (drv_flashErase(BLD_DATA_START_ADDRESS, sizeof(bldPackedData)) != GOS_SUCCESS ||
 8008d98:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8008d9c:	480f      	ldr	r0, [pc, #60]	; (8008ddc <bld_appDataSet+0xd0>)
 8008d9e:	f000 f896 	bl	8008ece <drv_flashErase>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b55      	cmp	r3, #85	; 0x55
 8008da6:	d10a      	bne.n	8008dbe <bld_appDataSet+0xb2>
            drv_flashWrite(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData)) != GOS_SUCCESS)
 8008da8:	f107 030c 	add.w	r3, r7, #12
 8008dac:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008db0:	4619      	mov	r1, r3
 8008db2:	480a      	ldr	r0, [pc, #40]	; (8008ddc <bld_appDataSet+0xd0>)
 8008db4:	f000 f8d3 	bl	8008f5e <drv_flashWrite>
 8008db8:	4603      	mov	r3, r0
        if (drv_flashErase(BLD_DATA_START_ADDRESS, sizeof(bldPackedData)) != GOS_SUCCESS ||
 8008dba:	2b55      	cmp	r3, #85	; 0x55
 8008dbc:	d003      	beq.n	8008dc6 <bld_appDataSet+0xba>
        {
            (void_t) gos_traceTraceFormattedUnsafe("App data set ERROR\r\n");
 8008dbe:	4808      	ldr	r0, [pc, #32]	; (8008de0 <bld_appDataSet+0xd4>)
 8008dc0:	f006 fbd4 	bl	800f56c <gos_traceTraceFormattedUnsafe>
 8008dc4:	e002      	b.n	8008dcc <bld_appDataSet+0xc0>
        }
        else
        {
            dataSetResult = GOS_SUCCESS;
 8008dc6:	2355      	movs	r3, #85	; 0x55
 8008dc8:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
    else
    {
        // Error.
    }

    return dataSetResult;
 8008dcc:	f897 32ef 	ldrb.w	r3, [r7, #751]	; 0x2ef
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f507 773c 	add.w	r7, r7, #752	; 0x2f0
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	08004000 	.word	0x08004000
 8008de0:	08012fdc 	.word	0x08012fdc

08008de4 <drv_crcGetCrc32>:

/*
 * Function: drv_crcGetCrc32
 */
gos_result_t drv_crcGetCrc32 (u8_t* pData, u32_t dataSize, u32_t* pCrc)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b089      	sub	sp, #36	; 0x24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 8008df0:	23ae      	movs	r3, #174	; 0xae
 8008df2:	77fb      	strb	r3, [r7, #31]
    u32_t        index        = 0u;
 8008df4:	2300      	movs	r3, #0
 8008df6:	61bb      	str	r3, [r7, #24]
    u8_t         bitCounter   = 0u;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	75fb      	strb	r3, [r7, #23]
    u32_t        crcValue     = DRV_CRC_INIT_VALUE_CRC32;
 8008dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8008e00:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && pCrc != NULL)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d030      	beq.n	8008e6a <drv_crcGetCrc32+0x86>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d02d      	beq.n	8008e6a <drv_crcGetCrc32+0x86>
    {
        for (index = 0u; index < dataSize; index++)
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61bb      	str	r3, [r7, #24]
 8008e12:	e021      	b.n	8008e58 <drv_crcGetCrc32+0x74>
        {
            crcValue ^= pData[index];
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	4413      	add	r3, r2
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	4053      	eors	r3, r2
 8008e22:	613b      	str	r3, [r7, #16]

            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 8008e24:	2300      	movs	r3, #0
 8008e26:	75fb      	strb	r3, [r7, #23]
 8008e28:	e010      	b.n	8008e4c <drv_crcGetCrc32+0x68>
            {
                if (0 != (DRV_CRC_MASK_CRC32 & crcValue))
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	da07      	bge.n	8008e40 <drv_crcGetCrc32+0x5c>
                {
                    crcValue <<= 1u;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	613b      	str	r3, [r7, #16]
                    crcValue ^= DRV_CRC_POLYNOMIAL_CRC32;
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	4b0f      	ldr	r3, [pc, #60]	; (8008e78 <drv_crcGetCrc32+0x94>)
 8008e3a:	4053      	eors	r3, r2
 8008e3c:	613b      	str	r3, [r7, #16]
 8008e3e:	e002      	b.n	8008e46 <drv_crcGetCrc32+0x62>
                }
                else
                {
                    crcValue <<= 1u;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	613b      	str	r3, [r7, #16]
            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	75fb      	strb	r3, [r7, #23]
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
 8008e4e:	2b1f      	cmp	r3, #31
 8008e50:	d9eb      	bls.n	8008e2a <drv_crcGetCrc32+0x46>
        for (index = 0u; index < dataSize; index++)
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	3301      	adds	r3, #1
 8008e56:	61bb      	str	r3, [r7, #24]
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d3d9      	bcc.n	8008e14 <drv_crcGetCrc32+0x30>
                }
            }
        }

        *pCrc = crcValue;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	601a      	str	r2, [r3, #0]
        crcGetResult = GOS_SUCCESS;
 8008e66:	2355      	movs	r3, #85	; 0x55
 8008e68:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Error.
    }

    return crcGetResult;
 8008e6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3724      	adds	r7, #36	; 0x24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	04c11db7 	.word	0x04c11db7

08008e7c <drv_crcCheckCrc32>:

/*
 * Function: drv_crcCheckCrc32
 */
drv_crcCheckResult_t drv_crcCheckCrc32 (u8_t* pData, u32_t dataSize, u32_t expCrc, u32_t* calcCrc)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	603b      	str	r3, [r7, #0]
    /*
     * Local variables.
     */
    drv_crcCheckResult_t crcCheckResult = DRV_CRC_CHECK_ERROR;
 8008e8a:	239c      	movs	r3, #156	; 0x9c
 8008e8c:	75fb      	strb	r3, [r7, #23]
    u32_t                crcTempValue   = 0u;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && drv_crcGetCrc32(pData, dataSize, &crcTempValue) == GOS_SUCCESS)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d015      	beq.n	8008ec4 <drv_crcCheckCrc32+0x48>
 8008e98:	f107 0310 	add.w	r3, r7, #16
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7ff ff9f 	bl	8008de4 <drv_crcGetCrc32>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b55      	cmp	r3, #85	; 0x55
 8008eaa:	d10b      	bne.n	8008ec4 <drv_crcCheckCrc32+0x48>
    {
        // Check if CRCs match.
        if (crcTempValue == expCrc)
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d101      	bne.n	8008eb8 <drv_crcCheckCrc32+0x3c>
        {
            crcCheckResult = DRV_CRC_CHECK_OK;
 8008eb4:	23ca      	movs	r3, #202	; 0xca
 8008eb6:	75fb      	strb	r3, [r7, #23]
        {
            // CRC mismatch.
        }

        // Return calculated CRC value.
        if (calcCrc != NULL)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <drv_crcCheckCrc32+0x48>
        {
            *calcCrc = crcTempValue;
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	601a      	str	r2, [r3, #0]
    else
    {
        // Error.
    }

    return crcCheckResult;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <drv_flashErase>:

/*
 * Function: drv_flashErase
 */
gos_result_t drv_flashErase (u32_t address, u32_t requiredSize)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b08c      	sub	sp, #48	; 0x30
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t           flashEraseResult = GOS_ERROR;
 8008ed8:	23ae      	movs	r3, #174	; 0xae
 8008eda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    FLASH_EraseInitTypeDef eraseInitStruct  = {0};
 8008ede:	f107 030c 	add.w	r3, r7, #12
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	605a      	str	r2, [r3, #4]
 8008ee8:	609a      	str	r2, [r3, #8]
 8008eea:	60da      	str	r2, [r3, #12]
 8008eec:	611a      	str	r2, [r3, #16]
    u32_t                  startSector      = 0u;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    u32_t                  endSector        = 0u;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24
    u32_t                  endSectorAddress = 0u;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	623b      	str	r3, [r7, #32]
    u32_t                  sectorError      = 0u;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 8008efe:	f7f9 f997 	bl	8002230 <HAL_FLASH_Unlock>

    startSector = drv_flashGetSector(address);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f88c 	bl	8009020 <drv_flashGetSector>
 8008f08:	62b8      	str	r0, [r7, #40]	; 0x28
    endSectorAddress = address + requiredSize - 1;
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	4413      	add	r3, r2
 8008f10:	3b01      	subs	r3, #1
 8008f12:	623b      	str	r3, [r7, #32]
    endSector = drv_flashGetSector(endSectorAddress);
 8008f14:	6a38      	ldr	r0, [r7, #32]
 8008f16:	f000 f883 	bl	8009020 <drv_flashGetSector>
 8008f1a:	6278      	str	r0, [r7, #36]	; 0x24

    eraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]
    eraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8008f20:	2302      	movs	r3, #2
 8008f22:	61fb      	str	r3, [r7, #28]
    eraseInitStruct.Sector        = startSector;
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	617b      	str	r3, [r7, #20]
    eraseInitStruct.NbSectors     = (endSector - startSector) + 1;
 8008f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	3301      	adds	r3, #1
 8008f30:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) == HAL_OK)
 8008f32:	f107 0208 	add.w	r2, r7, #8
 8008f36:	f107 030c 	add.w	r3, r7, #12
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7f9 fae9 	bl	8002514 <HAL_FLASHEx_Erase>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <drv_flashErase+0x80>
    {
        flashEraseResult = GOS_SUCCESS;
 8008f48:	2355      	movs	r3, #85	; 0x55
 8008f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    else
    {
        // Flash erase error.
    }

    (void_t) HAL_FLASH_Lock();
 8008f4e:	f7f9 f991 	bl	8002274 <HAL_FLASH_Lock>

    return flashEraseResult;
 8008f52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3730      	adds	r7, #48	; 0x30
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <drv_flashWrite>:

/*
 * Function: drv_flashWrite
 */
gos_result_t drv_flashWrite (u32_t address, void_t* pData, u32_t size)
{
 8008f5e:	b5b0      	push	{r4, r5, r7, lr}
 8008f60:	b088      	sub	sp, #32
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	60f8      	str	r0, [r7, #12]
 8008f66:	60b9      	str	r1, [r7, #8]
 8008f68:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t flashWriteResult = GOS_ERROR;
 8008f6a:	23ae      	movs	r3, #174	; 0xae
 8008f6c:	77fb      	strb	r3, [r7, #31]
    u32_t        addressCounter   = 0u;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61bb      	str	r3, [r7, #24]
    u32_t        idx              = 0u;
 8008f72:	2300      	movs	r3, #0
 8008f74:	617b      	str	r3, [r7, #20]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 8008f76:	f7f9 f95b 	bl	8002230 <HAL_FLASH_Unlock>

    // Preset flag.
    flashWriteResult = GOS_SUCCESS;
 8008f7a:	2355      	movs	r3, #85	; 0x55
 8008f7c:	77fb      	strb	r3, [r7, #31]

    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 8008f7e:	2300      	movs	r3, #0
 8008f80:	61bb      	str	r3, [r7, #24]
 8008f82:	e01a      	b.n	8008fba <drv_flashWrite+0x5c>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	18d1      	adds	r1, r2, r3
            ((u32_t*)pData)[idx++]) == HAL_OK)
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	1c5a      	adds	r2, r3, #1
 8008f8e:	617a      	str	r2, [r7, #20]
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	4413      	add	r3, r2
 8008f96:	681b      	ldr	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 8008f98:	2200      	movs	r2, #0
 8008f9a:	461c      	mov	r4, r3
 8008f9c:	4615      	mov	r5, r2
 8008f9e:	4622      	mov	r2, r4
 8008fa0:	462b      	mov	r3, r5
 8008fa2:	2002      	movs	r0, #2
 8008fa4:	f7f9 f8f0 	bl	8002188 <HAL_FLASH_Program>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d002      	beq.n	8008fb4 <drv_flashWrite+0x56>
        {
            // Programming OK, continue.
        }
        else
        {
            flashWriteResult = GOS_ERROR;
 8008fae:	23ae      	movs	r3, #174	; 0xae
 8008fb0:	77fb      	strb	r3, [r7, #31]
            break;
 8008fb2:	e006      	b.n	8008fc2 <drv_flashWrite+0x64>
    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	61bb      	str	r3, [r7, #24]
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d3e0      	bcc.n	8008f84 <drv_flashWrite+0x26>
        }
    }

    (void_t) HAL_FLASH_Lock();
 8008fc2:	f7f9 f957 	bl	8002274 <HAL_FLASH_Lock>

    return flashWriteResult;
 8008fc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3720      	adds	r7, #32
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bdb0      	pop	{r4, r5, r7, pc}

08008fd0 <drv_flashRead>:

/*
 * Function: drv_flashRead
 */
gos_result_t drv_flashRead (u32_t address, void_t* pData, u32_t size)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t flashReadResult = GOS_SUCCESS;
 8008fdc:	2355      	movs	r3, #85	; 0x55
 8008fde:	74fb      	strb	r3, [r7, #19]
    u32_t        addressCounter  = 0u;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 8008fe4:	f7f9 f924 	bl	8002230 <HAL_FLASH_Unlock>

    for (addressCounter = 0u; addressCounter < size; addressCounter++)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	e00c      	b.n	8009008 <drv_flashRead+0x38>
    {
        ((u8_t*)pData)[addressCounter] = *(__IO u8_t*)(address + addressCounter);
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	780a      	ldrb	r2, [r1, #0]
 8008ffe:	b2d2      	uxtb	r2, r2
 8009000:	701a      	strb	r2, [r3, #0]
    for (addressCounter = 0u; addressCounter < size; addressCounter++)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	3301      	adds	r3, #1
 8009006:	617b      	str	r3, [r7, #20]
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	429a      	cmp	r2, r3
 800900e:	d3ee      	bcc.n	8008fee <drv_flashRead+0x1e>
    }

    (void_t) HAL_FLASH_Lock();
 8009010:	f7f9 f930 	bl	8002274 <HAL_FLASH_Lock>

    return flashReadResult;
 8009014:	7cfb      	ldrb	r3, [r7, #19]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <drv_flashGetSector>:
 * @param   address : Address to get the related sector number for.
 *
 * @return  Sector number.
 */
GOS_STATIC u32_t drv_flashGetSector (u32_t address)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u32_t sector = 0u;
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    if ((address <= 0x08003FFF) && (address >= 0x08000000))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a2e      	ldr	r2, [pc, #184]	; (80090e8 <drv_flashGetSector+0xc8>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d206      	bcs.n	8009042 <drv_flashGetSector+0x22>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800903a:	d302      	bcc.n	8009042 <drv_flashGetSector+0x22>
    {
        sector = FLASH_SECTOR_0;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	e04b      	b.n	80090da <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x08007FFF) && (address >= 0x08004000))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a29      	ldr	r2, [pc, #164]	; (80090ec <drv_flashGetSector+0xcc>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d206      	bcs.n	8009058 <drv_flashGetSector+0x38>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a26      	ldr	r2, [pc, #152]	; (80090e8 <drv_flashGetSector+0xc8>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d302      	bcc.n	8009058 <drv_flashGetSector+0x38>
    {
        sector = FLASH_SECTOR_1;
 8009052:	2301      	movs	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	e040      	b.n	80090da <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800BFFF) && (address >= 0x08008000))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a25      	ldr	r2, [pc, #148]	; (80090f0 <drv_flashGetSector+0xd0>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d206      	bcs.n	800906e <drv_flashGetSector+0x4e>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a22      	ldr	r2, [pc, #136]	; (80090ec <drv_flashGetSector+0xcc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d302      	bcc.n	800906e <drv_flashGetSector+0x4e>
    {
        sector = FLASH_SECTOR_2;
 8009068:	2302      	movs	r3, #2
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	e035      	b.n	80090da <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800FFFF) && (address >= 0x0800C000))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a20      	ldr	r2, [pc, #128]	; (80090f4 <drv_flashGetSector+0xd4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d806      	bhi.n	8009084 <drv_flashGetSector+0x64>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a1d      	ldr	r2, [pc, #116]	; (80090f0 <drv_flashGetSector+0xd0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d302      	bcc.n	8009084 <drv_flashGetSector+0x64>
    {
        sector = FLASH_SECTOR_3;
 800907e:	2303      	movs	r3, #3
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	e02a      	b.n	80090da <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0801FFFF) && (address >= 0x08010000))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a1c      	ldr	r2, [pc, #112]	; (80090f8 <drv_flashGetSector+0xd8>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d806      	bhi.n	800909a <drv_flashGetSector+0x7a>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a19      	ldr	r2, [pc, #100]	; (80090f4 <drv_flashGetSector+0xd4>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d902      	bls.n	800909a <drv_flashGetSector+0x7a>
    {
        sector = FLASH_SECTOR_4;
 8009094:	2304      	movs	r3, #4
 8009096:	60fb      	str	r3, [r7, #12]
 8009098:	e01f      	b.n	80090da <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0803FFFF) && (address >= 0x08020000))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a17      	ldr	r2, [pc, #92]	; (80090fc <drv_flashGetSector+0xdc>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d806      	bhi.n	80090b0 <drv_flashGetSector+0x90>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a14      	ldr	r2, [pc, #80]	; (80090f8 <drv_flashGetSector+0xd8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d902      	bls.n	80090b0 <drv_flashGetSector+0x90>
    {
        sector = FLASH_SECTOR_5;
 80090aa:	2305      	movs	r3, #5
 80090ac:	60fb      	str	r3, [r7, #12]
 80090ae:	e014      	b.n	80090da <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0805FFFF) && (address >= 0x08040000))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a13      	ldr	r2, [pc, #76]	; (8009100 <drv_flashGetSector+0xe0>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d806      	bhi.n	80090c6 <drv_flashGetSector+0xa6>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a10      	ldr	r2, [pc, #64]	; (80090fc <drv_flashGetSector+0xdc>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d902      	bls.n	80090c6 <drv_flashGetSector+0xa6>
    {
        sector = FLASH_SECTOR_6;
 80090c0:	2306      	movs	r3, #6
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e009      	b.n	80090da <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0807FFFF) && (address >= 0x08060000))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a0e      	ldr	r2, [pc, #56]	; (8009104 <drv_flashGetSector+0xe4>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d805      	bhi.n	80090da <drv_flashGetSector+0xba>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a0b      	ldr	r2, [pc, #44]	; (8009100 <drv_flashGetSector+0xe0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d901      	bls.n	80090da <drv_flashGetSector+0xba>
    {
        sector = FLASH_SECTOR_7;
 80090d6:	2307      	movs	r3, #7
 80090d8:	60fb      	str	r3, [r7, #12]
    else
    {
        // Wrong address.
    }

    return sector;
 80090da:	68fb      	ldr	r3, [r7, #12]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	08004000 	.word	0x08004000
 80090ec:	08008000 	.word	0x08008000
 80090f0:	0800c000 	.word	0x0800c000
 80090f4:	0800ffff 	.word	0x0800ffff
 80090f8:	0801ffff 	.word	0x0801ffff
 80090fc:	0803ffff 	.word	0x0803ffff
 8009100:	0805ffff 	.word	0x0805ffff
 8009104:	0807ffff 	.word	0x0807ffff

08009108 <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 8009110:	23ae      	movs	r3, #174	; 0xae
 8009112:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d006      	beq.n	8009128 <gos_driverInit+0x20>
    {
        (void_t) memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 800911a:	221c      	movs	r2, #28
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	4805      	ldr	r0, [pc, #20]	; (8009134 <gos_driverInit+0x2c>)
 8009120:	f007 fbb7 	bl	8010892 <memcpy>
        driverInitResult = GOS_SUCCESS;
 8009124:	2355      	movs	r3, #85	; 0x55
 8009126:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return driverInitResult;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20002b94 	.word	0x20002b94

08009138 <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8009140:	23ae      	movs	r3, #174	; 0xae
 8009142:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 8009144:	4b07      	ldr	r3, [pc, #28]	; (8009164 <gos_traceDriverTransmitString+0x2c>)
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 800914c:	4b05      	ldr	r3, [pc, #20]	; (8009164 <gos_traceDriverTransmitString+0x2c>)
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	4798      	blx	r3
 8009154:	4603      	mov	r3, r0
 8009156:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 8009158:	7bfb      	ldrb	r3, [r7, #15]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	20002b94 	.word	0x20002b94

08009168 <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 8009170:	23ae      	movs	r3, #174	; 0xae
 8009172:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 8009174:	4b07      	ldr	r3, [pc, #28]	; (8009194 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d005      	beq.n	8009188 <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 800917c:	4b05      	ldr	r3, [pc, #20]	; (8009194 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	4798      	blx	r3
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 8009188:	7bfb      	ldrb	r3, [r7, #15]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20002b94 	.word	0x20002b94

08009198 <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 800919e:	23ae      	movs	r3, #174	; 0xae
 80091a0:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 80091a2:	2301      	movs	r3, #1
 80091a4:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80091a6:	2301      	movs	r3, #1
 80091a8:	80fb      	strh	r3, [r7, #6]
 80091aa:	e038      	b.n	800921e <gos_kernelInit+0x86>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 80091ac:	88fb      	ldrh	r3, [r7, #6]
 80091ae:	4a6b      	ldr	r2, [pc, #428]	; (800935c <gos_kernelInit+0x1c4>)
 80091b0:	216a      	movs	r1, #106	; 0x6a
 80091b2:	fb01 f303 	mul.w	r3, r1, r3
 80091b6:	4413      	add	r3, r2
 80091b8:	2200      	movs	r2, #0
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	2200      	movs	r2, #0
 80091be:	705a      	strb	r2, [r3, #1]
 80091c0:	2200      	movs	r2, #0
 80091c2:	709a      	strb	r2, [r3, #2]
 80091c4:	2200      	movs	r2, #0
 80091c6:	70da      	strb	r2, [r3, #3]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 80091c8:	88fb      	ldrh	r3, [r7, #6]
 80091ca:	4a64      	ldr	r2, [pc, #400]	; (800935c <gos_kernelInit+0x1c4>)
 80091cc:	216a      	movs	r1, #106	; 0x6a
 80091ce:	fb01 f303 	mul.w	r3, r1, r3
 80091d2:	4413      	add	r3, r2
 80091d4:	3306      	adds	r3, #6
 80091d6:	22ff      	movs	r2, #255	; 0xff
 80091d8:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 80091da:	88fb      	ldrh	r3, [r7, #6]
 80091dc:	4a5f      	ldr	r2, [pc, #380]	; (800935c <gos_kernelInit+0x1c4>)
 80091de:	216a      	movs	r1, #106	; 0x6a
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
 80091e4:	4413      	add	r3, r2
 80091e6:	3307      	adds	r3, #7
 80091e8:	22ff      	movs	r2, #255	; 0xff
 80091ea:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 80091ec:	88fb      	ldrh	r3, [r7, #6]
 80091ee:	4a5b      	ldr	r2, [pc, #364]	; (800935c <gos_kernelInit+0x1c4>)
 80091f0:	216a      	movs	r1, #106	; 0x6a
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	4413      	add	r3, r2
 80091f8:	3304      	adds	r3, #4
 80091fa:	2205      	movs	r2, #5
 80091fc:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 80091fe:	88fb      	ldrh	r3, [r7, #6]
 8009200:	4a56      	ldr	r2, [pc, #344]	; (800935c <gos_kernelInit+0x1c4>)
 8009202:	216a      	movs	r1, #106	; 0x6a
 8009204:	fb01 f303 	mul.w	r3, r1, r3
 8009208:	4413      	add	r3, r2
 800920a:	3328      	adds	r3, #40	; 0x28
 800920c:	2200      	movs	r2, #0
 800920e:	709a      	strb	r2, [r3, #2]
 8009210:	2200      	movs	r2, #0
 8009212:	f042 0201 	orr.w	r2, r2, #1
 8009216:	70da      	strb	r2, [r3, #3]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	3301      	adds	r3, #1
 800921c:	80fb      	strh	r3, [r7, #6]
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	2b2f      	cmp	r3, #47	; 0x2f
 8009222:	d9c3      	bls.n	80091ac <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 8009224:	4b4e      	ldr	r3, [pc, #312]	; (8009360 <gos_kernelInit+0x1c8>)
 8009226:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	3b04      	subs	r3, #4
 800922c:	603b      	str	r3, [r7, #0]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009234:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_idleTask; // PC
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	3b04      	subs	r3, #4
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	4a49      	ldr	r2, [pc, #292]	; (8009364 <gos_kernelInit+0x1cc>)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	3b04      	subs	r3, #4
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	f06f 0202 	mvn.w	r2, #2
 800924e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	3b04      	subs	r3, #4
 8009254:	603b      	str	r3, [r7, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800925c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	3b04      	subs	r3, #4
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800926a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	3b04      	subs	r3, #4
 8009270:	603b      	str	r3, [r7, #0]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8009278:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	3b04      	subs	r3, #4
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8009286:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	3b04      	subs	r3, #4
 800928c:	603b      	str	r3, [r7, #0]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	3b04      	subs	r3, #4
 8009298:	603b      	str	r3, [r7, #0]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80092a0:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	3b04      	subs	r3, #4
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80092ae:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	3b04      	subs	r3, #4
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 80092bc:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	3b04      	subs	r3, #4
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 80092ca:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	3b04      	subs	r3, #4
 80092d0:	603b      	str	r3, [r7, #0]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80092d8:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	3b04      	subs	r3, #4
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80092e6:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	3b04      	subs	r3, #4
 80092ec:	603b      	str	r3, [r7, #0]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 80092f4:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	3b04      	subs	r3, #4
 80092fa:	603b      	str	r3, [r7, #0]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8009302:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	4a15      	ldr	r2, [pc, #84]	; (800935c <gos_kernelInit+0x1c4>)
 8009308:	63d3      	str	r3, [r2, #60]	; 0x3c

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 800930a:	4b14      	ldr	r3, [pc, #80]	; (800935c <gos_kernelInit+0x1c4>)
 800930c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930e:	4a13      	ldr	r2, [pc, #76]	; (800935c <gos_kernelInit+0x1c4>)
 8009310:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8009314:	b292      	uxth	r2, r2
 8009316:	1a9b      	subs	r3, r3, r2
 8009318:	3340      	adds	r3, #64	; 0x40
 800931a:	4a10      	ldr	r2, [pc, #64]	; (800935c <gos_kernelInit+0x1c4>)
 800931c:	f8c2 3066 	str.w	r3, [r2, #102]	; 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 8009320:	4b11      	ldr	r3, [pc, #68]	; (8009368 <gos_kernelInit+0x1d0>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a10      	ldr	r2, [pc, #64]	; (8009368 <gos_kernelInit+0x1d0>)
 8009326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	4b0e      	ldr	r3, [pc, #56]	; (8009368 <gos_kernelInit+0x1d0>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a0d      	ldr	r2, [pc, #52]	; (8009368 <gos_kernelInit+0x1d0>)
 8009332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	4b0b      	ldr	r3, [pc, #44]	; (8009368 <gos_kernelInit+0x1d0>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a0a      	ldr	r2, [pc, #40]	; (8009368 <gos_kernelInit+0x1d0>)
 800933e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009342:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 8009344:	4b09      	ldr	r3, [pc, #36]	; (800936c <gos_kernelInit+0x1d4>)
 8009346:	2200      	movs	r2, #0
 8009348:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 800934a:	2355      	movs	r3, #85	; 0x55
 800934c:	717b      	strb	r3, [r7, #5]

    return initResult;
 800934e:	797b      	ldrb	r3, [r7, #5]
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	200004d4 	.word	0x200004d4
 8009360:	2001ee00 	.word	0x2001ee00
 8009364:	0800bfc9 	.word	0x0800bfc9
 8009368:	e000ed24 	.word	0xe000ed24
 800936c:	20002bb1 	.word	0x20002bb1

08009370 <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 8009376:	23ae      	movs	r3, #174	; 0xae
 8009378:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 800937a:	4b19      	ldr	r3, [pc, #100]	; (80093e0 <gos_kernelStart+0x70>)
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 8009380:	f000 fe9c 	bl	800a0bc <gos_kernelGetCurrentPsp>
 8009384:	f380 8809 	msr	PSP, r0
 8009388:	f3ef 8014 	mrs	r0, CONTROL
 800938c:	f040 0002 	orr.w	r0, r0, #2
 8009390:	f380 8814 	msr	CONTROL, r0
 8009394:	f3ef 8014 	mrs	r0, CONTROL
 8009398:	f040 0001 	orr.w	r0, r0, #1
 800939c:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 80093a0:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <gos_kernelStart+0x70>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a0f      	ldr	r2, [pc, #60]	; (80093e4 <gos_kernelStart+0x74>)
 80093a6:	216a      	movs	r1, #106	; 0x6a
 80093a8:	fb01 f303 	mul.w	r3, r1, r3
 80093ac:	4413      	add	r3, r2
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 80093b2:	480d      	ldr	r0, [pc, #52]	; (80093e8 <gos_kernelStart+0x78>)
 80093b4:	f006 fb96 	bl	800fae4 <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 80093b8:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <gos_kernelStart+0x7c>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <gos_kernelStart+0x5c>
 80093c0:	4b0a      	ldr	r3, [pc, #40]	; (80093ec <gos_kernelStart+0x7c>)
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	4b08      	ldr	r3, [pc, #32]	; (80093ec <gos_kernelStart+0x7c>)
 80093ca:	701a      	strb	r2, [r3, #0]

    // Set kernel running flag.
    isKernelRunning = GOS_TRUE;
 80093cc:	4b08      	ldr	r3, [pc, #32]	; (80093f0 <gos_kernelStart+0x80>)
 80093ce:	2236      	movs	r2, #54	; 0x36
 80093d0:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 80093d6:	79fb      	ldrb	r3, [r7, #7]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20002bb8 	.word	0x20002bb8
 80093e4:	200004d4 	.word	0x200004d4
 80093e8:	20002bc0 	.word	0x20002bc0
 80093ec:	20002bb1 	.word	0x20002bb1
 80093f0:	200004d2 	.word	0x200004d2

080093f4 <gos_kernelRegisterSysTickHook>:

/*
 * Function: gos_kernelRegisterSysTickHook
 */
gos_result_t gos_kernelRegisterSysTickHook (gos_sysTickHook_t sysTickHookFunction)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t hookRegisterResult = GOS_ERROR;
 80093fc:	23ae      	movs	r3, #174	; 0xae
 80093fe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d008      	beq.n	8009418 <gos_kernelRegisterSysTickHook+0x24>
 8009406:	4b08      	ldr	r3, [pc, #32]	; (8009428 <gos_kernelRegisterSysTickHook+0x34>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d104      	bne.n	8009418 <gos_kernelRegisterSysTickHook+0x24>
    {
        kernelSysTickHookFunction = sysTickHookFunction;
 800940e:	4a06      	ldr	r2, [pc, #24]	; (8009428 <gos_kernelRegisterSysTickHook+0x34>)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 8009414:	2355      	movs	r3, #85	; 0x55
 8009416:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return hookRegisterResult;
 8009418:	7bfb      	ldrb	r3, [r7, #15]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	20002bd4 	.word	0x20002bd4

0800942c <SysTick_Handler>:
/*
 * Function: gos_ported_sysTickInterrupt
 */
#include <gos_time.h>
void_t gos_ported_sysTickInterrupt (void_t)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    sysTicks++;
 8009432:	4b15      	ldr	r3, [pc, #84]	; (8009488 <SysTick_Handler+0x5c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	3301      	adds	r3, #1
 8009438:	4a13      	ldr	r2, [pc, #76]	; (8009488 <SysTick_Handler+0x5c>)
 800943a:	6013      	str	r3, [r2, #0]
    (void_t) gos_timeIncreaseSystemTime(1);
 800943c:	2001      	movs	r0, #1
 800943e:	f005 fda9 	bl	800ef94 <gos_timeIncreaseSystemTime>

    // Periodic stack overflow check on currently running task.
    if (isKernelRunning == GOS_TRUE)
 8009442:	4b12      	ldr	r3, [pc, #72]	; (800948c <SysTick_Handler+0x60>)
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	2b36      	cmp	r3, #54	; 0x36
 8009448:	d113      	bne.n	8009472 <SysTick_Handler+0x46>
    {
        gos_kernelCheckTaskStack();
 800944a:	f000 fda7 	bl	8009f9c <gos_kernelCheckTaskStack>

#if CFG_SCHED_COOPERATIVE == 0
        if (schedDisableCntr == 0u)
 800944e:	4b10      	ldr	r3, [pc, #64]	; (8009490 <SysTick_Handler+0x64>)
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10d      	bne.n	8009472 <SysTick_Handler+0x46>
 8009456:	2316      	movs	r3, #22
 8009458:	71fb      	strb	r3, [r7, #7]
GOS_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	2b16      	cmp	r3, #22
 800945e:	d106      	bne.n	800946e <SysTick_Handler+0x42>
 8009460:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <SysTick_Handler+0x68>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a0b      	ldr	r2, [pc, #44]	; (8009494 <SysTick_Handler+0x68>)
 8009466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800946a:	6013      	str	r3, [r2, #0]
}
 800946c:	e000      	b.n	8009470 <SysTick_Handler+0x44>
    gos_ported_reschedule(privilege);
 800946e:	dfff      	svc	255	; 0xff
}
 8009470:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 8009472:	4b09      	ldr	r3, [pc, #36]	; (8009498 <SysTick_Handler+0x6c>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d002      	beq.n	8009480 <SysTick_Handler+0x54>
        kernelSysTickHookFunction();
 800947a:	4b07      	ldr	r3, [pc, #28]	; (8009498 <SysTick_Handler+0x6c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4798      	blx	r3
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	20002bbc 	.word	0x20002bbc
 800948c:	200004d2 	.word	0x200004d2
 8009490:	20002bb1 	.word	0x20002bb1
 8009494:	e000ed04 	.word	0xe000ed04
 8009498:	20002bd4 	.word	0x20002bd4

0800949c <gos_kernelGetSysTicks>:
{
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
    return sysTicks;
 80094a0:	4b03      	ldr	r3, [pc, #12]	; (80094b0 <gos_kernelGetSysTicks+0x14>)
 80094a2:	681b      	ldr	r3, [r3, #0]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	20002bbc 	.word	0x20002bbc

080094b4 <gos_kernelGetCpuUsage>:
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 80094b8:	4b06      	ldr	r3, [pc, #24]	; (80094d4 <gos_kernelGetCpuUsage+0x20>)
 80094ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80094be:	b29b      	uxth	r3, r3
 80094c0:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80094c4:	3310      	adds	r3, #16
 80094c6:	b29b      	uxth	r3, r3
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	200004d4 	.word	0x200004d4

080094d8 <gos_kernelReset>:
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
    resetRequired = GOS_TRUE;
 80094de:	4b0b      	ldr	r3, [pc, #44]	; (800950c <gos_kernelReset+0x34>)
 80094e0:	2236      	movs	r2, #54	; 0x36
 80094e2:	701a      	strb	r2, [r3, #0]
 80094e4:	2309      	movs	r3, #9
 80094e6:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	2b16      	cmp	r3, #22
 80094ec:	d106      	bne.n	80094fc <gos_kernelReset+0x24>
 80094ee:	4b08      	ldr	r3, [pc, #32]	; (8009510 <gos_kernelReset+0x38>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a07      	ldr	r2, [pc, #28]	; (8009510 <gos_kernelReset+0x38>)
 80094f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094f8:	6013      	str	r3, [r2, #0]
}
 80094fa:	e000      	b.n	80094fe <gos_kernelReset+0x26>
    gos_ported_reschedule(privilege);
 80094fc:	dfff      	svc	255	; 0xff
}
 80094fe:	bf00      	nop
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	200004d0 	.word	0x200004d0
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <gos_kernelDelayMs>:
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 800951e:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <gos_kernelDelayMs+0x34>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 8009524:	bf00      	nop
 8009526:	4b08      	ldr	r3, [pc, #32]	; (8009548 <gos_kernelDelayMs+0x34>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	b29a      	uxth	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	b29b      	uxth	r3, r3
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	b29b      	uxth	r3, r3
 8009534:	88fa      	ldrh	r2, [r7, #6]
 8009536:	429a      	cmp	r2, r3
 8009538:	d8f5      	bhi.n	8009526 <gos_kernelDelayMs+0x12>
}
 800953a:	bf00      	nop
 800953c:	bf00      	nop
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	20002bbc 	.word	0x20002bbc

0800954c <gos_kernelCalculateTaskCpuUsages>:
{
 800954c:	b590      	push	{r4, r7, lr}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 8009556:	2300      	movs	r3, #0
 8009558:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 800955a:	2300      	movs	r3, #0
 800955c:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8009562:	4ba9      	ldr	r3, [pc, #676]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8009564:	795b      	ldrb	r3, [r3, #5]
 8009566:	461a      	mov	r2, r3
 8009568:	4ba8      	ldr	r3, [pc, #672]	; (800980c <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 800956a:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 800956e:	4ba6      	ldr	r3, [pc, #664]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8009570:	791b      	ldrb	r3, [r3, #4]
 8009572:	4619      	mov	r1, r3
 8009574:	4ba6      	ldr	r3, [pc, #664]	; (8009810 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8009576:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800957a:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 800957c:	4ba2      	ldr	r3, [pc, #648]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800957e:	885b      	ldrh	r3, [r3, #2]
 8009580:	4619      	mov	r1, r3
 8009582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009586:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 800958a:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 800958c:	4a9e      	ldr	r2, [pc, #632]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800958e:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 8009590:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8009592:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009594:	2300      	movs	r3, #0
 8009596:	82fb      	strh	r3, [r7, #22]
 8009598:	e110      	b.n	80097bc <gos_kernelCalculateTaskCpuUsages+0x270>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 800959a:	8afb      	ldrh	r3, [r7, #22]
 800959c:	4a9d      	ldr	r2, [pc, #628]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800959e:	216a      	movs	r1, #106	; 0x6a
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	4413      	add	r3, r2
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 810c 	beq.w	80097c6 <gos_kernelCalculateTaskCpuUsages+0x27a>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80095ae:	8afb      	ldrh	r3, [r7, #22]
 80095b0:	4a98      	ldr	r2, [pc, #608]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80095b2:	216a      	movs	r1, #106	; 0x6a
 80095b4:	fb01 f303 	mul.w	r3, r1, r3
 80095b8:	4413      	add	r3, r2
 80095ba:	335a      	adds	r3, #90	; 0x5a
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	4b92      	ldr	r3, [pc, #584]	; (800980c <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 80095c2:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80095c6:	8afb      	ldrh	r3, [r7, #22]
 80095c8:	4992      	ldr	r1, [pc, #584]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80095ca:	206a      	movs	r0, #106	; 0x6a
 80095cc:	fb00 f303 	mul.w	r3, r0, r3
 80095d0:	440b      	add	r3, r1
 80095d2:	3359      	adds	r3, #89	; 0x59
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	4619      	mov	r1, r3
 80095d8:	4b8d      	ldr	r3, [pc, #564]	; (8009810 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80095da:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80095de:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 80095e0:	8afb      	ldrh	r3, [r7, #22]
 80095e2:	498c      	ldr	r1, [pc, #560]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80095e4:	206a      	movs	r0, #106	; 0x6a
 80095e6:	fb00 f303 	mul.w	r3, r0, r3
 80095ea:	440b      	add	r3, r1
 80095ec:	3350      	adds	r3, #80	; 0x50
 80095ee:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	4619      	mov	r1, r3
 80095f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095fa:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80095fe:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 8009600:	8afa      	ldrh	r2, [r7, #22]
 8009602:	4984      	ldr	r1, [pc, #528]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8009604:	206a      	movs	r0, #106	; 0x6a
 8009606:	fb00 f202 	mul.w	r2, r0, r2
 800960a:	440a      	add	r2, r1
 800960c:	3250      	adds	r2, #80	; 0x50
 800960e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 8009612:	b292      	uxth	r2, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 8009614:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 8009616:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 80cb 	beq.w	80097b6 <gos_kernelCalculateTaskCpuUsages+0x26a>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f242 7210 	movw	r2, #10000	; 0x2710
 8009626:	fb03 f202 	mul.w	r2, r3, r2
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009630:	8afb      	ldrh	r3, [r7, #22]
 8009632:	b290      	uxth	r0, r2
 8009634:	4a77      	ldr	r2, [pc, #476]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8009636:	216a      	movs	r1, #106	; 0x6a
 8009638:	fb01 f303 	mul.w	r3, r1, r3
 800963c:	4413      	add	r3, r2
 800963e:	3360      	adds	r3, #96	; 0x60
 8009640:	4602      	mov	r2, r0
 8009642:	809a      	strh	r2, [r3, #4]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	2b36      	cmp	r3, #54	; 0x36
 8009648:	d004      	beq.n	8009654 <gos_kernelCalculateTaskCpuUsages+0x108>
 800964a:	4b6f      	ldr	r3, [pc, #444]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800964c:	791b      	ldrb	r3, [r3, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	f000 80b1 	beq.w	80097b6 <gos_kernelCalculateTaskCpuUsages+0x26a>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f242 7210 	movw	r2, #10000	; 0x2710
 800965a:	fb03 f202 	mul.w	r2, r3, r2
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	fbb2 f2f3 	udiv	r2, r2, r3
 8009664:	8afb      	ldrh	r3, [r7, #22]
 8009666:	b290      	uxth	r0, r2
 8009668:	4a6a      	ldr	r2, [pc, #424]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800966a:	216a      	movs	r1, #106	; 0x6a
 800966c:	fb01 f303 	mul.w	r3, r1, r3
 8009670:	4413      	add	r3, r2
 8009672:	3360      	adds	r3, #96	; 0x60
 8009674:	4602      	mov	r2, r0
 8009676:	805a      	strh	r2, [r3, #2]
                        &taskDescriptors[taskIndex].taskRunTime,
 8009678:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMicroseconds(
 800967a:	226a      	movs	r2, #106	; 0x6a
 800967c:	fb02 f303 	mul.w	r3, r2, r3
 8009680:	3348      	adds	r3, #72	; 0x48
 8009682:	4a64      	ldr	r2, [pc, #400]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8009684:	4413      	add	r3, r2
 8009686:	1d18      	adds	r0, r3, #4
 8009688:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 800968a:	4a62      	ldr	r2, [pc, #392]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800968c:	216a      	movs	r1, #106	; 0x6a
 800968e:	fb01 f303 	mul.w	r3, r1, r3
 8009692:	4413      	add	r3, r2
 8009694:	3350      	adds	r3, #80	; 0x50
 8009696:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800969a:	b29b      	uxth	r3, r3
                (void_t) gos_runTimeAddMicroseconds(
 800969c:	461a      	mov	r2, r3
 800969e:	2100      	movs	r1, #0
 80096a0:	f005 faf0 	bl	800ec84 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 80096a4:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMilliseconds(
 80096a6:	226a      	movs	r2, #106	; 0x6a
 80096a8:	fb02 f303 	mul.w	r3, r2, r3
 80096ac:	3348      	adds	r3, #72	; 0x48
 80096ae:	4a59      	ldr	r2, [pc, #356]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80096b0:	4413      	add	r3, r2
 80096b2:	1d18      	adds	r0, r3, #4
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 80096b4:	8afb      	ldrh	r3, [r7, #22]
 80096b6:	4a57      	ldr	r2, [pc, #348]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80096b8:	216a      	movs	r1, #106	; 0x6a
 80096ba:	fb01 f303 	mul.w	r3, r1, r3
 80096be:	4413      	add	r3, r2
 80096c0:	3350      	adds	r3, #80	; 0x50
 80096c2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80096c6:	b29a      	uxth	r2, r3
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 80096c8:	8afb      	ldrh	r3, [r7, #22]
 80096ca:	4952      	ldr	r1, [pc, #328]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80096cc:	246a      	movs	r4, #106	; 0x6a
 80096ce:	fb04 f303 	mul.w	r3, r4, r3
 80096d2:	440b      	add	r3, r1
 80096d4:	3359      	adds	r3, #89	; 0x59
 80096d6:	781b      	ldrb	r3, [r3, #0]
                (void_t) gos_runTimeAddMilliseconds(
 80096d8:	b29b      	uxth	r3, r3
 80096da:	4619      	mov	r1, r3
 80096dc:	0149      	lsls	r1, r1, #5
 80096de:	1ac9      	subs	r1, r1, r3
 80096e0:	0089      	lsls	r1, r1, #2
 80096e2:	440b      	add	r3, r1
 80096e4:	00db      	lsls	r3, r3, #3
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	4413      	add	r3, r2
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	4619      	mov	r1, r3
 80096ee:	f005 fba9 	bl	800ee44 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 80096f2:	8afb      	ldrh	r3, [r7, #22]
 80096f4:	4a47      	ldr	r2, [pc, #284]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80096f6:	216a      	movs	r1, #106	; 0x6a
 80096f8:	fb01 f303 	mul.w	r3, r1, r3
 80096fc:	4413      	add	r3, r2
 80096fe:	3350      	adds	r3, #80	; 0x50
 8009700:	2200      	movs	r2, #0
 8009702:	731a      	strb	r2, [r3, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	735a      	strb	r2, [r3, #13]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 8009708:	8afb      	ldrh	r3, [r7, #22]
 800970a:	4a42      	ldr	r2, [pc, #264]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800970c:	216a      	movs	r1, #106	; 0x6a
 800970e:	fb01 f303 	mul.w	r3, r1, r3
 8009712:	4413      	add	r3, r2
 8009714:	335b      	adds	r3, #91	; 0x5b
 8009716:	2200      	movs	r2, #0
 8009718:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 800971a:	8afb      	ldrh	r3, [r7, #22]
 800971c:	4a3d      	ldr	r2, [pc, #244]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800971e:	216a      	movs	r1, #106	; 0x6a
 8009720:	fb01 f303 	mul.w	r3, r1, r3
 8009724:	4413      	add	r3, r2
 8009726:	335a      	adds	r3, #90	; 0x5a
 8009728:	2200      	movs	r2, #0
 800972a:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 800972c:	8afb      	ldrh	r3, [r7, #22]
 800972e:	4a39      	ldr	r2, [pc, #228]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8009730:	216a      	movs	r1, #106	; 0x6a
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	4413      	add	r3, r2
 8009738:	3359      	adds	r3, #89	; 0x59
 800973a:	2200      	movs	r2, #0
 800973c:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 800973e:	8afb      	ldrh	r3, [r7, #22]
 8009740:	4a34      	ldr	r2, [pc, #208]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8009742:	216a      	movs	r1, #106	; 0x6a
 8009744:	fb01 f303 	mul.w	r3, r1, r3
 8009748:	4413      	add	r3, r2
 800974a:	3350      	adds	r3, #80	; 0x50
 800974c:	2200      	movs	r2, #0
 800974e:	71da      	strb	r2, [r3, #7]
 8009750:	2200      	movs	r2, #0
 8009752:	721a      	strb	r2, [r3, #8]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 8009754:	8afb      	ldrh	r3, [r7, #22]
 8009756:	4a2f      	ldr	r2, [pc, #188]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8009758:	216a      	movs	r1, #106	; 0x6a
 800975a:	fb01 f303 	mul.w	r3, r1, r3
 800975e:	4413      	add	r3, r2
 8009760:	3350      	adds	r3, #80	; 0x50
 8009762:	2200      	movs	r2, #0
 8009764:	715a      	strb	r2, [r3, #5]
 8009766:	2200      	movs	r2, #0
 8009768:	719a      	strb	r2, [r3, #6]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 800976a:	8afb      	ldrh	r3, [r7, #22]
 800976c:	4a29      	ldr	r2, [pc, #164]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800976e:	216a      	movs	r1, #106	; 0x6a
 8009770:	fb01 f303 	mul.w	r3, r1, r3
 8009774:	4413      	add	r3, r2
 8009776:	3360      	adds	r3, #96	; 0x60
 8009778:	885b      	ldrh	r3, [r3, #2]
 800977a:	b29a      	uxth	r2, r3
 800977c:	8afb      	ldrh	r3, [r7, #22]
 800977e:	4925      	ldr	r1, [pc, #148]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8009780:	206a      	movs	r0, #106	; 0x6a
 8009782:	fb00 f303 	mul.w	r3, r0, r3
 8009786:	440b      	add	r3, r1
 8009788:	3360      	adds	r3, #96	; 0x60
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	429a      	cmp	r2, r3
 8009790:	d911      	bls.n	80097b6 <gos_kernelCalculateTaskCpuUsages+0x26a>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 8009792:	8afa      	ldrh	r2, [r7, #22]
 8009794:	8afb      	ldrh	r3, [r7, #22]
 8009796:	491f      	ldr	r1, [pc, #124]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 8009798:	206a      	movs	r0, #106	; 0x6a
 800979a:	fb00 f202 	mul.w	r2, r0, r2
 800979e:	440a      	add	r2, r1
 80097a0:	3260      	adds	r2, #96	; 0x60
 80097a2:	8852      	ldrh	r2, [r2, #2]
 80097a4:	b290      	uxth	r0, r2
 80097a6:	4a1b      	ldr	r2, [pc, #108]	; (8009814 <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 80097a8:	216a      	movs	r1, #106	; 0x6a
 80097aa:	fb01 f303 	mul.w	r3, r1, r3
 80097ae:	4413      	add	r3, r2
 80097b0:	3360      	adds	r3, #96	; 0x60
 80097b2:	4602      	mov	r2, r0
 80097b4:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80097b6:	8afb      	ldrh	r3, [r7, #22]
 80097b8:	3301      	adds	r3, #1
 80097ba:	82fb      	strh	r3, [r7, #22]
 80097bc:	8afb      	ldrh	r3, [r7, #22]
 80097be:	2b2f      	cmp	r3, #47	; 0x2f
 80097c0:	f67f aeeb 	bls.w	800959a <gos_kernelCalculateTaskCpuUsages+0x4e>
 80097c4:	e000      	b.n	80097c8 <gos_kernelCalculateTaskCpuUsages+0x27c>
            break;
 80097c6:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 80097c8:	79fb      	ldrb	r3, [r7, #7]
 80097ca:	2b36      	cmp	r3, #54	; 0x36
 80097cc:	d003      	beq.n	80097d6 <gos_kernelCalculateTaskCpuUsages+0x28a>
 80097ce:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80097d0:	791b      	ldrb	r3, [r3, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d013      	beq.n	80097fe <gos_kernelCalculateTaskCpuUsages+0x2b2>
        monitoringTime.days         = 0u;
 80097d6:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80097d8:	2200      	movs	r2, #0
 80097da:	71da      	strb	r2, [r3, #7]
 80097dc:	2200      	movs	r2, #0
 80097de:	721a      	strb	r2, [r3, #8]
        monitoringTime.hours        = 0u;
 80097e0:	4b09      	ldr	r3, [pc, #36]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 80097e6:	4b08      	ldr	r3, [pc, #32]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 80097ec:	4b06      	ldr	r3, [pc, #24]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 80097f2:	4b05      	ldr	r3, [pc, #20]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 80097f8:	4b03      	ldr	r3, [pc, #12]	; (8009808 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	801a      	strh	r2, [r3, #0]
}
 80097fe:	bf00      	nop
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	bd90      	pop	{r4, r7, pc}
 8009806:	bf00      	nop
 8009808:	20002bc4 	.word	0x20002bc4
 800980c:	03938700 	.word	0x03938700
 8009810:	000f4240 	.word	0x000f4240
 8009814:	200004d4 	.word	0x200004d4

08009818 <gos_kernelDump>:
{
 8009818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	b0a6      	sub	sp, #152	; 0x98
 800981e:	af14      	add	r7, sp, #80	; 0x50
    u16_t taskIndex = 0u;
 8009820:	2300      	movs	r3, #0
 8009822:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 8009826:	48ae      	ldr	r0, [pc, #696]	; (8009ae0 <gos_kernelDump+0x2c8>)
 8009828:	f006 f900 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 800982c:	48ad      	ldr	r0, [pc, #692]	; (8009ae4 <gos_kernelDump+0x2cc>)
 800982e:	f006 f8fd 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8009832:	4bad      	ldr	r3, [pc, #692]	; (8009ae8 <gos_kernelDump+0x2d0>)
 8009834:	9302      	str	r3, [sp, #8]
 8009836:	4bad      	ldr	r3, [pc, #692]	; (8009aec <gos_kernelDump+0x2d4>)
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	4bad      	ldr	r3, [pc, #692]	; (8009af0 <gos_kernelDump+0x2d8>)
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	4bad      	ldr	r3, [pc, #692]	; (8009af4 <gos_kernelDump+0x2dc>)
 8009840:	4aad      	ldr	r2, [pc, #692]	; (8009af8 <gos_kernelDump+0x2e0>)
 8009842:	49ae      	ldr	r1, [pc, #696]	; (8009afc <gos_kernelDump+0x2e4>)
 8009844:	48ae      	ldr	r0, [pc, #696]	; (8009b00 <gos_kernelDump+0x2e8>)
 8009846:	f006 f8f1 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 800984a:	48a6      	ldr	r0, [pc, #664]	; (8009ae4 <gos_kernelDump+0x2cc>)
 800984c:	f006 f8ee 	bl	800fa2c <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009850:	2300      	movs	r3, #0
 8009852:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009856:	e1cc      	b.n	8009bf2 <gos_kernelDump+0x3da>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8009858:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800985c:	4aa9      	ldr	r2, [pc, #676]	; (8009b04 <gos_kernelDump+0x2ec>)
 800985e:	216a      	movs	r1, #106	; 0x6a
 8009860:	fb01 f303 	mul.w	r3, r1, r3
 8009864:	4413      	add	r3, r2
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 81c8 	beq.w	8009bfe <gos_kernelDump+0x3e6>
                    taskDescriptors[taskIndex].taskId,
 800986e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009872:	4aa4      	ldr	r2, [pc, #656]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009874:	216a      	movs	r1, #106	; 0x6a
 8009876:	fb01 f303 	mul.w	r3, r1, r3
 800987a:	4413      	add	r3, r2
 800987c:	3328      	adds	r3, #40	; 0x28
 800987e:	885b      	ldrh	r3, [r3, #2]
 8009880:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8009882:	4699      	mov	r9, r3
                    taskDescriptors[taskIndex].taskName,
 8009884:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009888:	226a      	movs	r2, #106	; 0x6a
 800988a:	fb02 f303 	mul.w	r3, r2, r3
 800988e:	3308      	adds	r3, #8
 8009890:	4a9c      	ldr	r2, [pc, #624]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009892:	4413      	add	r3, r2
 8009894:	f103 0802 	add.w	r8, r3, #2
                    taskDescriptors[taskIndex].taskPriority,
 8009898:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800989c:	4a99      	ldr	r2, [pc, #612]	; (8009b04 <gos_kernelDump+0x2ec>)
 800989e:	216a      	movs	r1, #106	; 0x6a
 80098a0:	fb01 f303 	mul.w	r3, r1, r3
 80098a4:	4413      	add	r3, r2
 80098a6:	3306      	adds	r3, #6
 80098a8:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 80098aa:	469a      	mov	sl, r3
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80098ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80098b0:	4a94      	ldr	r2, [pc, #592]	; (8009b04 <gos_kernelDump+0x2ec>)
 80098b2:	216a      	movs	r1, #106	; 0x6a
 80098b4:	fb01 f303 	mul.w	r3, r1, r3
 80098b8:	4413      	add	r3, r2
 80098ba:	3308      	adds	r3, #8
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	b21b      	sxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	da02      	bge.n	80098cc <gos_kernelDump+0xb4>
 80098c6:	4b90      	ldr	r3, [pc, #576]	; (8009b08 <gos_kernelDump+0x2f0>)
 80098c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ca:	e001      	b.n	80098d0 <gos_kernelDump+0xb8>
 80098cc:	4b8f      	ldr	r3, [pc, #572]	; (8009b0c <gos_kernelDump+0x2f4>)
 80098ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80098d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80098d4:	4a8b      	ldr	r2, [pc, #556]	; (8009b04 <gos_kernelDump+0x2ec>)
 80098d6:	216a      	movs	r1, #106	; 0x6a
 80098d8:	fb01 f303 	mul.w	r3, r1, r3
 80098dc:	4413      	add	r3, r2
 80098de:	3308      	adds	r3, #8
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
            (void_t) gos_shellDriverTransmitString(
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <gos_kernelDump+0xda>
 80098ec:	4b86      	ldr	r3, [pc, #536]	; (8009b08 <gos_kernelDump+0x2f0>)
 80098ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80098f0:	e001      	b.n	80098f6 <gos_kernelDump+0xde>
 80098f2:	4b86      	ldr	r3, [pc, #536]	; (8009b0c <gos_kernelDump+0x2f4>)
 80098f4:	63bb      	str	r3, [r7, #56]	; 0x38
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80098f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80098fa:	4a82      	ldr	r2, [pc, #520]	; (8009b04 <gos_kernelDump+0x2ec>)
 80098fc:	216a      	movs	r1, #106	; 0x6a
 80098fe:	fb01 f303 	mul.w	r3, r1, r3
 8009902:	4413      	add	r3, r2
 8009904:	3308      	adds	r3, #8
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	b29b      	uxth	r3, r3
 800990a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
            (void_t) gos_shellDriverTransmitString(
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <gos_kernelDump+0x100>
 8009912:	4b7d      	ldr	r3, [pc, #500]	; (8009b08 <gos_kernelDump+0x2f0>)
 8009914:	637b      	str	r3, [r7, #52]	; 0x34
 8009916:	e001      	b.n	800991c <gos_kernelDump+0x104>
 8009918:	4b7c      	ldr	r3, [pc, #496]	; (8009b0c <gos_kernelDump+0x2f4>)
 800991a:	637b      	str	r3, [r7, #52]	; 0x34
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800991c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009920:	4a78      	ldr	r2, [pc, #480]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009922:	216a      	movs	r1, #106	; 0x6a
 8009924:	fb01 f303 	mul.w	r3, r1, r3
 8009928:	4413      	add	r3, r2
 800992a:	3308      	adds	r3, #8
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	b29b      	uxth	r3, r3
 8009930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
            (void_t) gos_shellDriverTransmitString(
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <gos_kernelDump+0x126>
 8009938:	4b73      	ldr	r3, [pc, #460]	; (8009b08 <gos_kernelDump+0x2f0>)
 800993a:	633b      	str	r3, [r7, #48]	; 0x30
 800993c:	e001      	b.n	8009942 <gos_kernelDump+0x12a>
 800993e:	4b73      	ldr	r3, [pc, #460]	; (8009b0c <gos_kernelDump+0x2f4>)
 8009940:	633b      	str	r3, [r7, #48]	; 0x30
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009942:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009946:	4a6f      	ldr	r2, [pc, #444]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009948:	216a      	movs	r1, #106	; 0x6a
 800994a:	fb01 f303 	mul.w	r3, r1, r3
 800994e:	4413      	add	r3, r2
 8009950:	3308      	adds	r3, #8
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	b29b      	uxth	r3, r3
 8009956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
            (void_t) gos_shellDriverTransmitString(
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <gos_kernelDump+0x14c>
 800995e:	4b6a      	ldr	r3, [pc, #424]	; (8009b08 <gos_kernelDump+0x2f0>)
 8009960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009962:	e001      	b.n	8009968 <gos_kernelDump+0x150>
 8009964:	4b69      	ldr	r3, [pc, #420]	; (8009b0c <gos_kernelDump+0x2f4>)
 8009966:	62fb      	str	r3, [r7, #44]	; 0x2c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009968:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800996c:	4a65      	ldr	r2, [pc, #404]	; (8009b04 <gos_kernelDump+0x2ec>)
 800996e:	216a      	movs	r1, #106	; 0x6a
 8009970:	fb01 f303 	mul.w	r3, r1, r3
 8009974:	4413      	add	r3, r2
 8009976:	3308      	adds	r3, #8
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	b29b      	uxth	r3, r3
 800997c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            (void_t) gos_shellDriverTransmitString(
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <gos_kernelDump+0x172>
 8009984:	4b60      	ldr	r3, [pc, #384]	; (8009b08 <gos_kernelDump+0x2f0>)
 8009986:	62bb      	str	r3, [r7, #40]	; 0x28
 8009988:	e001      	b.n	800998e <gos_kernelDump+0x176>
 800998a:	4b60      	ldr	r3, [pc, #384]	; (8009b0c <gos_kernelDump+0x2f4>)
 800998c:	62bb      	str	r3, [r7, #40]	; 0x28
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800998e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009992:	4a5c      	ldr	r2, [pc, #368]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009994:	216a      	movs	r1, #106	; 0x6a
 8009996:	fb01 f303 	mul.w	r3, r1, r3
 800999a:	4413      	add	r3, r2
 800999c:	3308      	adds	r3, #8
 800999e:	881b      	ldrh	r3, [r3, #0]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
            (void_t) gos_shellDriverTransmitString(
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <gos_kernelDump+0x198>
 80099aa:	4b57      	ldr	r3, [pc, #348]	; (8009b08 <gos_kernelDump+0x2f0>)
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
 80099ae:	e001      	b.n	80099b4 <gos_kernelDump+0x19c>
 80099b0:	4b56      	ldr	r3, [pc, #344]	; (8009b0c <gos_kernelDump+0x2f4>)
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80099b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80099b8:	4a52      	ldr	r2, [pc, #328]	; (8009b04 <gos_kernelDump+0x2ec>)
 80099ba:	216a      	movs	r1, #106	; 0x6a
 80099bc:	fb01 f303 	mul.w	r3, r1, r3
 80099c0:	4413      	add	r3, r2
 80099c2:	3308      	adds	r3, #8
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
            (void_t) gos_shellDriverTransmitString(
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <gos_kernelDump+0x1be>
 80099d0:	4b4d      	ldr	r3, [pc, #308]	; (8009b08 <gos_kernelDump+0x2f0>)
 80099d2:	623b      	str	r3, [r7, #32]
 80099d4:	e001      	b.n	80099da <gos_kernelDump+0x1c2>
 80099d6:	4b4d      	ldr	r3, [pc, #308]	; (8009b0c <gos_kernelDump+0x2f4>)
 80099d8:	623b      	str	r3, [r7, #32]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 80099da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80099de:	4a49      	ldr	r2, [pc, #292]	; (8009b04 <gos_kernelDump+0x2ec>)
 80099e0:	216a      	movs	r1, #106	; 0x6a
 80099e2:	fb01 f303 	mul.w	r3, r1, r3
 80099e6:	4413      	add	r3, r2
 80099e8:	3308      	adds	r3, #8
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
            (void_t) gos_shellDriverTransmitString(
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <gos_kernelDump+0x1e4>
 80099f6:	4b44      	ldr	r3, [pc, #272]	; (8009b08 <gos_kernelDump+0x2f0>)
 80099f8:	61fb      	str	r3, [r7, #28]
 80099fa:	e001      	b.n	8009a00 <gos_kernelDump+0x1e8>
 80099fc:	4b43      	ldr	r3, [pc, #268]	; (8009b0c <gos_kernelDump+0x2f4>)
 80099fe:	61fb      	str	r3, [r7, #28]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009a00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009a04:	493f      	ldr	r1, [pc, #252]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009a06:	236a      	movs	r3, #106	; 0x6a
 8009a08:	fb02 f303 	mul.w	r3, r2, r3
 8009a0c:	440b      	add	r3, r1
 8009a0e:	3308      	adds	r3, #8
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
            (void_t) gos_shellDriverTransmitString(
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <gos_kernelDump+0x20a>
 8009a1c:	4b3a      	ldr	r3, [pc, #232]	; (8009b08 <gos_kernelDump+0x2f0>)
 8009a1e:	61bb      	str	r3, [r7, #24]
 8009a20:	e001      	b.n	8009a26 <gos_kernelDump+0x20e>
 8009a22:	4b3a      	ldr	r3, [pc, #232]	; (8009b0c <gos_kernelDump+0x2f4>)
 8009a24:	61bb      	str	r3, [r7, #24]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009a26:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009a2a:	4936      	ldr	r1, [pc, #216]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009a2c:	236a      	movs	r3, #106	; 0x6a
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
 8009a32:	440b      	add	r3, r1
 8009a34:	3308      	adds	r3, #8
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	f003 0320 	and.w	r3, r3, #32
            (void_t) gos_shellDriverTransmitString(
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <gos_kernelDump+0x230>
 8009a42:	4b31      	ldr	r3, [pc, #196]	; (8009b08 <gos_kernelDump+0x2f0>)
 8009a44:	617b      	str	r3, [r7, #20]
 8009a46:	e001      	b.n	8009a4c <gos_kernelDump+0x234>
 8009a48:	4b30      	ldr	r3, [pc, #192]	; (8009b0c <gos_kernelDump+0x2f4>)
 8009a4a:	617b      	str	r3, [r7, #20]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009a4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009a50:	492c      	ldr	r1, [pc, #176]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009a52:	236a      	movs	r3, #106	; 0x6a
 8009a54:	fb02 f303 	mul.w	r3, r2, r3
 8009a58:	440b      	add	r3, r1
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	f003 0310 	and.w	r3, r3, #16
            (void_t) gos_shellDriverTransmitString(
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <gos_kernelDump+0x256>
 8009a68:	4b27      	ldr	r3, [pc, #156]	; (8009b08 <gos_kernelDump+0x2f0>)
 8009a6a:	613b      	str	r3, [r7, #16]
 8009a6c:	e001      	b.n	8009a72 <gos_kernelDump+0x25a>
 8009a6e:	4b27      	ldr	r3, [pc, #156]	; (8009b0c <gos_kernelDump+0x2f4>)
 8009a70:	613b      	str	r3, [r7, #16]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009a72:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009a76:	4923      	ldr	r1, [pc, #140]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009a78:	236a      	movs	r3, #106	; 0x6a
 8009a7a:	fb02 f303 	mul.w	r3, r2, r3
 8009a7e:	440b      	add	r3, r1
 8009a80:	3308      	adds	r3, #8
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	f003 0308 	and.w	r3, r3, #8
            (void_t) gos_shellDriverTransmitString(
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d002      	beq.n	8009a94 <gos_kernelDump+0x27c>
 8009a8e:	4b1e      	ldr	r3, [pc, #120]	; (8009b08 <gos_kernelDump+0x2f0>)
 8009a90:	60fb      	str	r3, [r7, #12]
 8009a92:	e001      	b.n	8009a98 <gos_kernelDump+0x280>
 8009a94:	4b1d      	ldr	r3, [pc, #116]	; (8009b0c <gos_kernelDump+0x2f4>)
 8009a96:	60fb      	str	r3, [r7, #12]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009a98:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009a9c:	4919      	ldr	r1, [pc, #100]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009a9e:	236a      	movs	r3, #106	; 0x6a
 8009aa0:	fb02 f303 	mul.w	r3, r2, r3
 8009aa4:	440b      	add	r3, r1
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	f003 0304 	and.w	r3, r3, #4
            (void_t) gos_shellDriverTransmitString(
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <gos_kernelDump+0x2a2>
 8009ab4:	4b14      	ldr	r3, [pc, #80]	; (8009b08 <gos_kernelDump+0x2f0>)
 8009ab6:	60bb      	str	r3, [r7, #8]
 8009ab8:	e001      	b.n	8009abe <gos_kernelDump+0x2a6>
 8009aba:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <gos_kernelDump+0x2f4>)
 8009abc:	60bb      	str	r3, [r7, #8]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009abe:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009ac2:	4910      	ldr	r1, [pc, #64]	; (8009b04 <gos_kernelDump+0x2ec>)
 8009ac4:	236a      	movs	r3, #106	; 0x6a
 8009ac6:	fb02 f303 	mul.w	r3, r2, r3
 8009aca:	440b      	add	r3, r1
 8009acc:	3308      	adds	r3, #8
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f003 0302 	and.w	r3, r3, #2
            (void_t) gos_shellDriverTransmitString(
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d01a      	beq.n	8009b10 <gos_kernelDump+0x2f8>
 8009ada:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <gos_kernelDump+0x2f0>)
 8009adc:	607b      	str	r3, [r7, #4]
 8009ade:	e019      	b.n	8009b14 <gos_kernelDump+0x2fc>
 8009ae0:	0801322c 	.word	0x0801322c
 8009ae4:	0801323c 	.word	0x0801323c
 8009ae8:	080132d8 	.word	0x080132d8
 8009aec:	080132e0 	.word	0x080132e0
 8009af0:	080132e8 	.word	0x080132e8
 8009af4:	08013298 	.word	0x08013298
 8009af8:	080132a0 	.word	0x080132a0
 8009afc:	080132a8 	.word	0x080132a8
 8009b00:	080132ac 	.word	0x080132ac
 8009b04:	200004d4 	.word	0x200004d4
 8009b08:	080132f4 	.word	0x080132f4
 8009b0c:	080132fc 	.word	0x080132fc
 8009b10:	4b7d      	ldr	r3, [pc, #500]	; (8009d08 <gos_kernelDump+0x4f0>)
 8009b12:	607b      	str	r3, [r7, #4]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8009b14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009b18:	497c      	ldr	r1, [pc, #496]	; (8009d0c <gos_kernelDump+0x4f4>)
 8009b1a:	236a      	movs	r3, #106	; 0x6a
 8009b1c:	fb02 f303 	mul.w	r3, r2, r3
 8009b20:	440b      	add	r3, r1
 8009b22:	3308      	adds	r3, #8
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	f003 0301 	and.w	r3, r3, #1
            (void_t) gos_shellDriverTransmitString(
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <gos_kernelDump+0x31c>
 8009b30:	4d77      	ldr	r5, [pc, #476]	; (8009d10 <gos_kernelDump+0x4f8>)
 8009b32:	e000      	b.n	8009b36 <gos_kernelDump+0x31e>
 8009b34:	4d74      	ldr	r5, [pc, #464]	; (8009d08 <gos_kernelDump+0x4f0>)
                    taskDescriptors[taskIndex].taskCpuUsage / 100,
 8009b36:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009b3a:	4974      	ldr	r1, [pc, #464]	; (8009d0c <gos_kernelDump+0x4f4>)
 8009b3c:	236a      	movs	r3, #106	; 0x6a
 8009b3e:	fb02 f303 	mul.w	r3, r2, r3
 8009b42:	440b      	add	r3, r1
 8009b44:	3360      	adds	r3, #96	; 0x60
 8009b46:	885b      	ldrh	r3, [r3, #2]
 8009b48:	b29a      	uxth	r2, r3
            (void_t) gos_shellDriverTransmitString(
 8009b4a:	4b72      	ldr	r3, [pc, #456]	; (8009d14 <gos_kernelDump+0x4fc>)
 8009b4c:	fba3 2302 	umull	r2, r3, r3, r2
 8009b50:	095b      	lsrs	r3, r3, #5
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	461e      	mov	r6, r3
                    taskDescriptors[taskIndex].taskCpuUsage % 100,
 8009b56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009b5a:	496c      	ldr	r1, [pc, #432]	; (8009d0c <gos_kernelDump+0x4f4>)
 8009b5c:	236a      	movs	r3, #106	; 0x6a
 8009b5e:	fb02 f303 	mul.w	r3, r2, r3
 8009b62:	440b      	add	r3, r1
 8009b64:	3360      	adds	r3, #96	; 0x60
 8009b66:	885b      	ldrh	r3, [r3, #2]
 8009b68:	b299      	uxth	r1, r3
            (void_t) gos_shellDriverTransmitString(
 8009b6a:	4b6a      	ldr	r3, [pc, #424]	; (8009d14 <gos_kernelDump+0x4fc>)
 8009b6c:	fba3 2301 	umull	r2, r3, r3, r1
 8009b70:	095a      	lsrs	r2, r3, #5
 8009b72:	2364      	movs	r3, #100	; 0x64
 8009b74:	fb02 f303 	mul.w	r3, r2, r3
 8009b78:	1acb      	subs	r3, r1, r3
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	461c      	mov	r4, r3
 8009b7e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009b82:	4962      	ldr	r1, [pc, #392]	; (8009d0c <gos_kernelDump+0x4f4>)
 8009b84:	236a      	movs	r3, #106	; 0x6a
 8009b86:	fb02 f303 	mul.w	r3, r2, r3
 8009b8a:	440b      	add	r3, r1
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 fc25 	bl	800a3e0 <gos_kernelGetTaskStateString>
 8009b96:	4603      	mov	r3, r0
 8009b98:	9312      	str	r3, [sp, #72]	; 0x48
 8009b9a:	9411      	str	r4, [sp, #68]	; 0x44
 8009b9c:	9610      	str	r6, [sp, #64]	; 0x40
 8009b9e:	950f      	str	r5, [sp, #60]	; 0x3c
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	930e      	str	r3, [sp, #56]	; 0x38
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	930c      	str	r3, [sp, #48]	; 0x30
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	9308      	str	r3, [sp, #32]
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	9307      	str	r3, [sp, #28]
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	9306      	str	r3, [sp, #24]
 8009bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc6:	9305      	str	r3, [sp, #20]
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	9304      	str	r3, [sp, #16]
 8009bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bce:	9303      	str	r3, [sp, #12]
 8009bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd2:	9302      	str	r3, [sp, #8]
 8009bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4653      	mov	r3, sl
 8009bde:	4642      	mov	r2, r8
 8009be0:	4649      	mov	r1, r9
 8009be2:	484d      	ldr	r0, [pc, #308]	; (8009d18 <gos_kernelDump+0x500>)
 8009be4:	f005 ff22 	bl	800fa2c <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009be8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009bec:	3301      	adds	r3, #1
 8009bee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009bf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009bf6:	2b2f      	cmp	r3, #47	; 0x2f
 8009bf8:	f67f ae2e 	bls.w	8009858 <gos_kernelDump+0x40>
 8009bfc:	e000      	b.n	8009c00 <gos_kernelDump+0x3e8>
            break;
 8009bfe:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 8009c00:	4846      	ldr	r0, [pc, #280]	; (8009d1c <gos_kernelDump+0x504>)
 8009c02:	f005 ff13 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 8009c06:	4846      	ldr	r0, [pc, #280]	; (8009d20 <gos_kernelDump+0x508>)
 8009c08:	f005 ff10 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8009c0c:	4845      	ldr	r0, [pc, #276]	; (8009d24 <gos_kernelDump+0x50c>)
 8009c0e:	f005 ff0d 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8009c12:	4b45      	ldr	r3, [pc, #276]	; (8009d28 <gos_kernelDump+0x510>)
 8009c14:	4a45      	ldr	r2, [pc, #276]	; (8009d2c <gos_kernelDump+0x514>)
 8009c16:	4946      	ldr	r1, [pc, #280]	; (8009d30 <gos_kernelDump+0x518>)
 8009c18:	4846      	ldr	r0, [pc, #280]	; (8009d34 <gos_kernelDump+0x51c>)
 8009c1a:	f005 ff07 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8009c1e:	4841      	ldr	r0, [pc, #260]	; (8009d24 <gos_kernelDump+0x50c>)
 8009c20:	f005 ff04 	bl	800fa2c <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009c24:	2300      	movs	r3, #0
 8009c26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009c2a:	e04c      	b.n	8009cc6 <gos_kernelDump+0x4ae>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8009c2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009c30:	4a36      	ldr	r2, [pc, #216]	; (8009d0c <gos_kernelDump+0x4f4>)
 8009c32:	216a      	movs	r1, #106	; 0x6a
 8009c34:	fb01 f303 	mul.w	r3, r1, r3
 8009c38:	4413      	add	r3, r2
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d047      	beq.n	8009cd0 <gos_kernelDump+0x4b8>
                    taskDescriptors[taskIndex].taskId,
 8009c40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009c44:	4a31      	ldr	r2, [pc, #196]	; (8009d0c <gos_kernelDump+0x4f4>)
 8009c46:	216a      	movs	r1, #106	; 0x6a
 8009c48:	fb01 f303 	mul.w	r3, r1, r3
 8009c4c:	4413      	add	r3, r2
 8009c4e:	3328      	adds	r3, #40	; 0x28
 8009c50:	885b      	ldrh	r3, [r3, #2]
 8009c52:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8009c54:	461c      	mov	r4, r3
                    taskDescriptors[taskIndex].taskName,
 8009c56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009c5a:	226a      	movs	r2, #106	; 0x6a
 8009c5c:	fb02 f303 	mul.w	r3, r2, r3
 8009c60:	3308      	adds	r3, #8
 8009c62:	4a2a      	ldr	r2, [pc, #168]	; (8009d0c <gos_kernelDump+0x4f4>)
 8009c64:	4413      	add	r3, r2
 8009c66:	1c99      	adds	r1, r3, #2
                    taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 8009c68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009c6c:	4a27      	ldr	r2, [pc, #156]	; (8009d0c <gos_kernelDump+0x4f4>)
 8009c6e:	206a      	movs	r0, #106	; 0x6a
 8009c70:	fb00 f303 	mul.w	r3, r0, r3
 8009c74:	4413      	add	r3, r2
 8009c76:	3360      	adds	r3, #96	; 0x60
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8009c7c:	4a25      	ldr	r2, [pc, #148]	; (8009d14 <gos_kernelDump+0x4fc>)
 8009c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c82:	095b      	lsrs	r3, r3, #5
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	461d      	mov	r5, r3
                    taskDescriptors[taskIndex].taskCpuUsageMax % 100
 8009c88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009c8c:	4a1f      	ldr	r2, [pc, #124]	; (8009d0c <gos_kernelDump+0x4f4>)
 8009c8e:	206a      	movs	r0, #106	; 0x6a
 8009c90:	fb00 f303 	mul.w	r3, r0, r3
 8009c94:	4413      	add	r3, r2
 8009c96:	3360      	adds	r3, #96	; 0x60
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8009c9c:	4a1d      	ldr	r2, [pc, #116]	; (8009d14 <gos_kernelDump+0x4fc>)
 8009c9e:	fba2 0203 	umull	r0, r2, r2, r3
 8009ca2:	0952      	lsrs	r2, r2, #5
 8009ca4:	2064      	movs	r0, #100	; 0x64
 8009ca6:	fb00 f202 	mul.w	r2, r0, r2
 8009caa:	1a9b      	subs	r3, r3, r2
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	462b      	mov	r3, r5
 8009cb2:	460a      	mov	r2, r1
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4820      	ldr	r0, [pc, #128]	; (8009d38 <gos_kernelDump+0x520>)
 8009cb8:	f005 feb8 	bl	800fa2c <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009cbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009cc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009cca:	2b2f      	cmp	r3, #47	; 0x2f
 8009ccc:	d9ae      	bls.n	8009c2c <gos_kernelDump+0x414>
 8009cce:	e000      	b.n	8009cd2 <gos_kernelDump+0x4ba>
            break;
 8009cd0:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 8009cd2:	481a      	ldr	r0, [pc, #104]	; (8009d3c <gos_kernelDump+0x524>)
 8009cd4:	f005 feaa 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 8009cd8:	4819      	ldr	r0, [pc, #100]	; (8009d40 <gos_kernelDump+0x528>)
 8009cda:	f005 fea7 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8009cde:	4819      	ldr	r0, [pc, #100]	; (8009d44 <gos_kernelDump+0x52c>)
 8009ce0:	f005 fea4 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8009ce4:	4b18      	ldr	r3, [pc, #96]	; (8009d48 <gos_kernelDump+0x530>)
 8009ce6:	9301      	str	r3, [sp, #4]
 8009ce8:	4b18      	ldr	r3, [pc, #96]	; (8009d4c <gos_kernelDump+0x534>)
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	4b18      	ldr	r3, [pc, #96]	; (8009d50 <gos_kernelDump+0x538>)
 8009cee:	4a0f      	ldr	r2, [pc, #60]	; (8009d2c <gos_kernelDump+0x514>)
 8009cf0:	490f      	ldr	r1, [pc, #60]	; (8009d30 <gos_kernelDump+0x518>)
 8009cf2:	4818      	ldr	r0, [pc, #96]	; (8009d54 <gos_kernelDump+0x53c>)
 8009cf4:	f005 fe9a 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8009cf8:	4812      	ldr	r0, [pc, #72]	; (8009d44 <gos_kernelDump+0x52c>)
 8009cfa:	f005 fe97 	bl	800fa2c <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d04:	e0b1      	b.n	8009e6a <gos_kernelDump+0x652>
 8009d06:	bf00      	nop
 8009d08:	080132fc 	.word	0x080132fc
 8009d0c:	200004d4 	.word	0x200004d4
 8009d10:	080132f4 	.word	0x080132f4
 8009d14:	51eb851f 	.word	0x51eb851f
 8009d18:	08013304 	.word	0x08013304
 8009d1c:	08013358 	.word	0x08013358
 8009d20:	080133b8 	.word	0x080133b8
 8009d24:	080133cc 	.word	0x080133cc
 8009d28:	08013408 	.word	0x08013408
 8009d2c:	080132a0 	.word	0x080132a0
 8009d30:	080132a8 	.word	0x080132a8
 8009d34:	08013414 	.word	0x08013414
 8009d38:	0801342c 	.word	0x0801342c
 8009d3c:	0801344c 	.word	0x0801344c
 8009d40:	08013488 	.word	0x08013488
 8009d44:	0801349c 	.word	0x0801349c
 8009d48:	0801351c 	.word	0x0801351c
 8009d4c:	08013528 	.word	0x08013528
 8009d50:	080134f0 	.word	0x080134f0
 8009d54:	080134f8 	.word	0x080134f8
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8009d58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d5c:	4a4a      	ldr	r2, [pc, #296]	; (8009e88 <gos_kernelDump+0x670>)
 8009d5e:	216a      	movs	r1, #106	; 0x6a
 8009d60:	fb01 f303 	mul.w	r3, r1, r3
 8009d64:	4413      	add	r3, r2
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 8084 	beq.w	8009e76 <gos_kernelDump+0x65e>
                    taskDescriptors[taskIndex].taskId,
 8009d6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d72:	4a45      	ldr	r2, [pc, #276]	; (8009e88 <gos_kernelDump+0x670>)
 8009d74:	216a      	movs	r1, #106	; 0x6a
 8009d76:	fb01 f303 	mul.w	r3, r1, r3
 8009d7a:	4413      	add	r3, r2
 8009d7c:	3328      	adds	r3, #40	; 0x28
 8009d7e:	885b      	ldrh	r3, [r3, #2]
 8009d80:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8009d82:	469c      	mov	ip, r3
                    taskDescriptors[taskIndex].taskName,
 8009d84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d88:	226a      	movs	r2, #106	; 0x6a
 8009d8a:	fb02 f303 	mul.w	r3, r2, r3
 8009d8e:	3308      	adds	r3, #8
 8009d90:	4a3d      	ldr	r2, [pc, #244]	; (8009e88 <gos_kernelDump+0x670>)
 8009d92:	4413      	add	r3, r2
 8009d94:	1c9c      	adds	r4, r3, #2
                    taskDescriptors[taskIndex].taskStackSize,
 8009d96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d9a:	4a3b      	ldr	r2, [pc, #236]	; (8009e88 <gos_kernelDump+0x670>)
 8009d9c:	216a      	movs	r1, #106	; 0x6a
 8009d9e:	fb01 f303 	mul.w	r3, r1, r3
 8009da2:	4413      	add	r3, r2
 8009da4:	3348      	adds	r3, #72	; 0x48
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8009daa:	469e      	mov	lr, r3
                    taskDescriptors[taskIndex].taskStackSizeMaxUsage,
 8009dac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009db0:	4a35      	ldr	r2, [pc, #212]	; (8009e88 <gos_kernelDump+0x670>)
 8009db2:	216a      	movs	r1, #106	; 0x6a
 8009db4:	fb01 f303 	mul.w	r3, r1, r3
 8009db8:	4413      	add	r3, r2
 8009dba:	3348      	adds	r3, #72	; 0x48
 8009dbc:	885b      	ldrh	r3, [r3, #2]
 8009dbe:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8009dc0:	461e      	mov	r6, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 8009dc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009dc6:	4a30      	ldr	r2, [pc, #192]	; (8009e88 <gos_kernelDump+0x670>)
 8009dc8:	216a      	movs	r1, #106	; 0x6a
 8009dca:	fb01 f303 	mul.w	r3, r1, r3
 8009dce:	4413      	add	r3, r2
 8009dd0:	3348      	adds	r3, #72	; 0x48
 8009dd2:	885b      	ldrh	r3, [r3, #2]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f242 7310 	movw	r3, #10000	; 0x2710
 8009ddc:	fb02 f303 	mul.w	r3, r2, r3
 8009de0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009de4:	4928      	ldr	r1, [pc, #160]	; (8009e88 <gos_kernelDump+0x670>)
 8009de6:	206a      	movs	r0, #106	; 0x6a
 8009de8:	fb00 f202 	mul.w	r2, r0, r2
 8009dec:	440a      	add	r2, r1
 8009dee:	3248      	adds	r2, #72	; 0x48
 8009df0:	8812      	ldrh	r2, [r2, #0]
 8009df2:	b292      	uxth	r2, r2
 8009df4:	fb93 f3f2 	sdiv	r3, r3, r2
            (void_t) gos_shellDriverTransmitString(
 8009df8:	4a24      	ldr	r2, [pc, #144]	; (8009e8c <gos_kernelDump+0x674>)
 8009dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8009dfe:	1152      	asrs	r2, r2, #5
 8009e00:	17db      	asrs	r3, r3, #31
 8009e02:	1ad1      	subs	r1, r2, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 8009e04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009e08:	4a1f      	ldr	r2, [pc, #124]	; (8009e88 <gos_kernelDump+0x670>)
 8009e0a:	206a      	movs	r0, #106	; 0x6a
 8009e0c:	fb00 f303 	mul.w	r3, r0, r3
 8009e10:	4413      	add	r3, r2
 8009e12:	3348      	adds	r3, #72	; 0x48
 8009e14:	885b      	ldrh	r3, [r3, #2]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f242 7310 	movw	r3, #10000	; 0x2710
 8009e1e:	fb02 f303 	mul.w	r3, r2, r3
 8009e22:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009e26:	4818      	ldr	r0, [pc, #96]	; (8009e88 <gos_kernelDump+0x670>)
 8009e28:	256a      	movs	r5, #106	; 0x6a
 8009e2a:	fb05 f202 	mul.w	r2, r5, r2
 8009e2e:	4402      	add	r2, r0
 8009e30:	3248      	adds	r2, #72	; 0x48
 8009e32:	8812      	ldrh	r2, [r2, #0]
 8009e34:	b292      	uxth	r2, r2
 8009e36:	fb93 f2f2 	sdiv	r2, r3, r2
            (void_t) gos_shellDriverTransmitString(
 8009e3a:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <gos_kernelDump+0x674>)
 8009e3c:	fb83 0302 	smull	r0, r3, r3, r2
 8009e40:	1158      	asrs	r0, r3, #5
 8009e42:	17d3      	asrs	r3, r2, #31
 8009e44:	1ac3      	subs	r3, r0, r3
 8009e46:	2064      	movs	r0, #100	; 0x64
 8009e48:	fb00 f303 	mul.w	r3, r0, r3
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	9302      	str	r3, [sp, #8]
 8009e50:	9101      	str	r1, [sp, #4]
 8009e52:	9600      	str	r6, [sp, #0]
 8009e54:	4673      	mov	r3, lr
 8009e56:	4622      	mov	r2, r4
 8009e58:	4661      	mov	r1, ip
 8009e5a:	480d      	ldr	r0, [pc, #52]	; (8009e90 <gos_kernelDump+0x678>)
 8009e5c:	f005 fde6 	bl	800fa2c <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8009e60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009e64:	3301      	adds	r3, #1
 8009e66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009e6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009e6e:	2b2f      	cmp	r3, #47	; 0x2f
 8009e70:	f67f af72 	bls.w	8009d58 <gos_kernelDump+0x540>
 8009e74:	e000      	b.n	8009e78 <gos_kernelDump+0x660>
            break;
 8009e76:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 8009e78:	4806      	ldr	r0, [pc, #24]	; (8009e94 <gos_kernelDump+0x67c>)
 8009e7a:	f005 fdd7 	bl	800fa2c <gos_shellDriverTransmitString>
}
 8009e7e:	bf00      	nop
 8009e80:	3748      	adds	r7, #72	; 0x48
 8009e82:	46bd      	mov	sp, r7
 8009e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e88:	200004d4 	.word	0x200004d4
 8009e8c:	51eb851f 	.word	0x51eb851f
 8009e90:	08013538 	.word	0x08013538
 8009e94:	0801356c 	.word	0x0801356c

08009e98 <gos_kernelIsCallerIsr>:
{
 8009e98:	b480      	push	{r7}
 8009e9a:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 8009e9c:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <gos_kernelIsCallerIsr+0x1c>)
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <gos_kernelIsCallerIsr+0x10>
 8009ea4:	2336      	movs	r3, #54	; 0x36
 8009ea6:	e000      	b.n	8009eaa <gos_kernelIsCallerIsr+0x12>
 8009ea8:	2349      	movs	r3, #73	; 0x49
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	20002bb2 	.word	0x20002bb2

08009eb8 <SVC_Handler>:
    gos_ported_handleSVC();
 8009eb8:	f01e 0f04 	tst.w	lr, #4
 8009ebc:	bf0c      	ite	eq
 8009ebe:	f3ef 8008 	mrseq	r0, MSP
 8009ec2:	f3ef 8009 	mrsne	r0, PSP
 8009ec6:	4b06      	ldr	r3, [pc, #24]	; (8009ee0 <SVC_Handler+0x28>)
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	2b36      	cmp	r3, #54	; 0x36
 8009ecc:	d104      	bne.n	8009ed8 <SVC_Handler+0x20>
 8009ece:	4b04      	ldr	r3, [pc, #16]	; (8009ee0 <SVC_Handler+0x28>)
 8009ed0:	2249      	movs	r2, #73	; 0x49
 8009ed2:	701a      	strb	r2, [r3, #0]
 8009ed4:	f000 fad8 	bl	800a488 <gos_kernelProcessorReset>
 8009ed8:	f000 b804 	b.w	8009ee4 <gos_kernelSVC_HandlerMain>
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	200004d0 	.word	0x200004d0

08009ee4 <gos_kernelSVC_HandlerMain>:
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3318      	adds	r3, #24
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3b02      	subs	r3, #2
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	72fb      	strb	r3, [r7, #11]
 8009f00:	7afb      	ldrb	r3, [r7, #11]
 8009f02:	2bff      	cmp	r3, #255	; 0xff
 8009f04:	d105      	bne.n	8009f12 <gos_kernelSVC_HandlerMain+0x2e>
 8009f06:	4b06      	ldr	r3, [pc, #24]	; (8009f20 <gos_kernelSVC_HandlerMain+0x3c>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a05      	ldr	r2, [pc, #20]	; (8009f20 <gos_kernelSVC_HandlerMain+0x3c>)
 8009f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f10:	6013      	str	r3, [r2, #0]
}
 8009f12:	bf00      	nop
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	e000ed04 	.word	0xe000ed04

08009f24 <PendSV_Handler>:
    if (privilegedModeSetRequired == GOS_TRUE)
 8009f24:	4b10      	ldr	r3, [pc, #64]	; (8009f68 <PendSV_Handler+0x44>)
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b36      	cmp	r3, #54	; 0x36
 8009f2a:	d109      	bne.n	8009f40 <PendSV_Handler+0x1c>
        GOS_ASM("MRS R0, CONTROL");
 8009f2c:	f3ef 8014 	mrs	r0, CONTROL
        GOS_ASM("BIC R0, R0, #1");
 8009f30:	f020 0001 	bic.w	r0, r0, #1
        GOS_ASM("MSR CONTROL, R0");
 8009f34:	f380 8814 	msr	CONTROL, r0
        privilegedModeSetRequired = GOS_FALSE;
 8009f38:	4b0b      	ldr	r3, [pc, #44]	; (8009f68 <PendSV_Handler+0x44>)
 8009f3a:	2249      	movs	r2, #73	; 0x49
 8009f3c:	701a      	strb	r2, [r3, #0]
}
 8009f3e:	e011      	b.n	8009f64 <PendSV_Handler+0x40>
        gos_ported_doContextSwitch();
 8009f40:	b500      	push	{lr}
 8009f42:	f3ef 8009 	mrs	r0, PSP
 8009f46:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f4a:	f000 f8cb 	bl	800a0e4 <gos_kernelSaveCurrentPsp>
 8009f4e:	f000 f8e1 	bl	800a114 <gos_kernelSelectNextTask>
 8009f52:	f000 f8b3 	bl	800a0bc <gos_kernelGetCurrentPsp>
 8009f56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f5a:	f380 8809 	msr	PSP, r0
 8009f5e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f62:	4770      	bx	lr
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop
 8009f68:	200004d1 	.word	0x200004d1

08009f6c <gos_kernelReschedule>:
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 8009f76:	79fb      	ldrb	r3, [r7, #7]
 8009f78:	2b16      	cmp	r3, #22
 8009f7a:	d106      	bne.n	8009f8a <gos_kernelReschedule+0x1e>
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <gos_kernelReschedule+0x2c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a05      	ldr	r2, [pc, #20]	; (8009f98 <gos_kernelReschedule+0x2c>)
 8009f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f86:	6013      	str	r3, [r2, #0]
}
 8009f88:	e000      	b.n	8009f8c <gos_kernelReschedule+0x20>
    gos_ported_reschedule(privilege);
 8009f8a:	dfff      	svc	255	; 0xff
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <gos_kernelCheckTaskStack>:
 *          goes to system error.
 *
 * @return  -
 */
GOS_STATIC void_t gos_kernelCheckTaskStack (void_t)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    u32_t sp = 0u;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 8009fa6:	f3ef 8309 	mrs	r3, PSP
 8009faa:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d02b      	beq.n	800a00a <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 8009fb2:	4b3f      	ldr	r3, [pc, #252]	; (800a0b0 <gos_kernelCheckTaskStack+0x114>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a3f      	ldr	r2, [pc, #252]	; (800a0b4 <gos_kernelCheckTaskStack+0x118>)
 8009fb8:	216a      	movs	r1, #106	; 0x6a
 8009fba:	fb01 f303 	mul.w	r3, r1, r3
 8009fbe:	4413      	add	r3, r2
 8009fc0:	3360      	adds	r3, #96	; 0x60
 8009fc2:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d21e      	bcs.n	800a00a <gos_kernelCheckTaskStack+0x6e>
        gos_errorHandler(
                GOS_ERROR_LEVEL_OS_FATAL,
                NULL,
                0,
                "Stack overflow detected in <%s>. \r\nPSP: 0x%x overflown by %d bytes.",
                taskDescriptors[currentTaskIndex].taskName,
 8009fcc:	4b38      	ldr	r3, [pc, #224]	; (800a0b0 <gos_kernelCheckTaskStack+0x114>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	226a      	movs	r2, #106	; 0x6a
 8009fd2:	fb02 f303 	mul.w	r3, r2, r3
 8009fd6:	3308      	adds	r3, #8
 8009fd8:	4a36      	ldr	r2, [pc, #216]	; (800a0b4 <gos_kernelCheckTaskStack+0x118>)
 8009fda:	4413      	add	r3, r2
 8009fdc:	3302      	adds	r3, #2
                sp,
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 8009fde:	4a34      	ldr	r2, [pc, #208]	; (800a0b0 <gos_kernelCheckTaskStack+0x114>)
 8009fe0:	6812      	ldr	r2, [r2, #0]
 8009fe2:	4934      	ldr	r1, [pc, #208]	; (800a0b4 <gos_kernelCheckTaskStack+0x118>)
 8009fe4:	206a      	movs	r0, #106	; 0x6a
 8009fe6:	fb00 f202 	mul.w	r2, r0, r2
 8009fea:	440a      	add	r2, r1
 8009fec:	3260      	adds	r2, #96	; 0x60
 8009fee:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	1a8a      	subs	r2, r1, r2
 8009ff6:	9202      	str	r2, [sp, #8]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	9201      	str	r2, [sp, #4]
 8009ffc:	9300      	str	r3, [sp, #0]
 8009ffe:	4b2e      	ldr	r3, [pc, #184]	; (800a0b8 <gos_kernelCheckTaskStack+0x11c>)
 800a000:	2200      	movs	r2, #0
 800a002:	2100      	movs	r1, #0
 800a004:	2034      	movs	r0, #52	; 0x34
 800a006:	f002 f953 	bl	800c2b0 <gos_errorHandler>
    else
    {
        // No stack overflow was detected.
    }

    if (sp != 0 &&
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d04a      	beq.n	800a0a6 <gos_kernelCheckTaskStack+0x10a>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 800a010:	4b27      	ldr	r3, [pc, #156]	; (800a0b0 <gos_kernelCheckTaskStack+0x114>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a27      	ldr	r2, [pc, #156]	; (800a0b4 <gos_kernelCheckTaskStack+0x118>)
 800a016:	216a      	movs	r1, #106	; 0x6a
 800a018:	fb01 f303 	mul.w	r3, r1, r3
 800a01c:	4413      	add	r3, r2
 800a01e:	3360      	adds	r3, #96	; 0x60
 800a020:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800a024:	4a22      	ldr	r2, [pc, #136]	; (800a0b0 <gos_kernelCheckTaskStack+0x114>)
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	4922      	ldr	r1, [pc, #136]	; (800a0b4 <gos_kernelCheckTaskStack+0x118>)
 800a02a:	206a      	movs	r0, #106	; 0x6a
 800a02c:	fb00 f202 	mul.w	r2, r0, r2
 800a030:	440a      	add	r2, r1
 800a032:	3248      	adds	r2, #72	; 0x48
 800a034:	8812      	ldrh	r2, [r2, #0]
 800a036:	b292      	uxth	r2, r2
 800a038:	441a      	add	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	3b40      	subs	r3, #64	; 0x40
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage)
 800a040:	4a1b      	ldr	r2, [pc, #108]	; (800a0b0 <gos_kernelCheckTaskStack+0x114>)
 800a042:	6812      	ldr	r2, [r2, #0]
 800a044:	491b      	ldr	r1, [pc, #108]	; (800a0b4 <gos_kernelCheckTaskStack+0x118>)
 800a046:	206a      	movs	r0, #106	; 0x6a
 800a048:	fb00 f202 	mul.w	r2, r0, r2
 800a04c:	440a      	add	r2, r1
 800a04e:	3248      	adds	r2, #72	; 0x48
 800a050:	8852      	ldrh	r2, [r2, #2]
 800a052:	b292      	uxth	r2, r2
    if (sp != 0 &&
 800a054:	4293      	cmp	r3, r2
 800a056:	d926      	bls.n	800a0a6 <gos_kernelCheckTaskStack+0x10a>
    {
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 800a058:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <gos_kernelCheckTaskStack+0x114>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a15      	ldr	r2, [pc, #84]	; (800a0b4 <gos_kernelCheckTaskStack+0x118>)
 800a05e:	216a      	movs	r1, #106	; 0x6a
 800a060:	fb01 f303 	mul.w	r3, r1, r3
 800a064:	4413      	add	r3, r2
 800a066:	3360      	adds	r3, #96	; 0x60
 800a068:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	4b10      	ldr	r3, [pc, #64]	; (800a0b0 <gos_kernelCheckTaskStack+0x114>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4910      	ldr	r1, [pc, #64]	; (800a0b4 <gos_kernelCheckTaskStack+0x118>)
 800a074:	206a      	movs	r0, #106	; 0x6a
 800a076:	fb00 f303 	mul.w	r3, r0, r3
 800a07a:	440b      	add	r3, r1
 800a07c:	3348      	adds	r3, #72	; 0x48
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	b29b      	uxth	r3, r3
 800a082:	4413      	add	r3, r2
 800a084:	b29a      	uxth	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	4b08      	ldr	r3, [pc, #32]	; (800a0b0 <gos_kernelCheckTaskStack+0x114>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3a20      	subs	r2, #32
 800a094:	b290      	uxth	r0, r2
 800a096:	4a07      	ldr	r2, [pc, #28]	; (800a0b4 <gos_kernelCheckTaskStack+0x118>)
 800a098:	216a      	movs	r1, #106	; 0x6a
 800a09a:	fb01 f303 	mul.w	r3, r1, r3
 800a09e:	4413      	add	r3, r2
 800a0a0:	3348      	adds	r3, #72	; 0x48
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	805a      	strh	r2, [r3, #2]
    }
    else
    {
        // Max. value has not been exceeded.
    }
}
 800a0a6:	bf00      	nop
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20002bb8 	.word	0x20002bb8
 800a0b4:	200004d4 	.word	0x200004d4
 800a0b8:	080135c0 	.word	0x080135c0

0800a0bc <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 800a0c0:	4b06      	ldr	r3, [pc, #24]	; (800a0dc <gos_kernelGetCurrentPsp+0x20>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a06      	ldr	r2, [pc, #24]	; (800a0e0 <gos_kernelGetCurrentPsp+0x24>)
 800a0c6:	216a      	movs	r1, #106	; 0x6a
 800a0c8:	fb01 f303 	mul.w	r3, r1, r3
 800a0cc:	4413      	add	r3, r2
 800a0ce:	3338      	adds	r3, #56	; 0x38
 800a0d0:	685b      	ldr	r3, [r3, #4]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20002bb8 	.word	0x20002bb8
 800a0e0:	200004d4 	.word	0x200004d4

0800a0e4 <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 800a0ec:	4b07      	ldr	r3, [pc, #28]	; (800a10c <gos_kernelSaveCurrentPsp+0x28>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a07      	ldr	r2, [pc, #28]	; (800a110 <gos_kernelSaveCurrentPsp+0x2c>)
 800a0f2:	216a      	movs	r1, #106	; 0x6a
 800a0f4:	fb01 f303 	mul.w	r3, r1, r3
 800a0f8:	4413      	add	r3, r2
 800a0fa:	3338      	adds	r3, #56	; 0x38
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	605a      	str	r2, [r3, #4]
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	20002bb8 	.word	0x20002bb8
 800a110:	200004d4 	.word	0x200004d4

0800a114 <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 800a114:	b590      	push	{r4, r7, lr}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 800a11a:	2300      	movs	r3, #0
 800a11c:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 800a11e:	23ff      	movs	r3, #255	; 0xff
 800a120:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 800a122:	2300      	movs	r3, #0
 800a124:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 800a126:	2300      	movs	r3, #0
 800a128:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 800a12a:	2300      	movs	r3, #0
 800a12c:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 800a12e:	4ba3      	ldr	r3, [pc, #652]	; (800a3bc <gos_kernelSelectNextTask+0x2a8>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	4ba3      	ldr	r3, [pc, #652]	; (800a3c0 <gos_kernelSelectNextTask+0x2ac>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 800a13a:	f7ff ff2f 	bl	8009f9c <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 800a13e:	4ba1      	ldr	r3, [pc, #644]	; (800a3c4 <gos_kernelSelectNextTask+0x2b0>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	f040 8136 	bne.w	800a3b4 <gos_kernelSelectNextTask+0x2a0>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800a148:	2300      	movs	r3, #0
 800a14a:	81fb      	strh	r3, [r7, #14]
 800a14c:	e0d0      	b.n	800a2f0 <gos_kernelSelectNextTask+0x1dc>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 800a14e:	89fb      	ldrh	r3, [r7, #14]
 800a150:	4a9d      	ldr	r2, [pc, #628]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a152:	216a      	movs	r1, #106	; 0x6a
 800a154:	fb01 f303 	mul.w	r3, r1, r3
 800a158:	4413      	add	r3, r2
 800a15a:	3304      	adds	r3, #4
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b16      	cmp	r3, #22
 800a160:	d12c      	bne.n	800a1bc <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskSleepTicks)
 800a162:	89fb      	ldrh	r3, [r7, #14]
 800a164:	4a98      	ldr	r2, [pc, #608]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a166:	216a      	movs	r1, #106	; 0x6a
 800a168:	fb01 f303 	mul.w	r3, r1, r3
 800a16c:	4413      	add	r3, r2
 800a16e:	3330      	adds	r3, #48	; 0x30
 800a170:	6819      	ldr	r1, [r3, #0]
 800a172:	89fb      	ldrh	r3, [r7, #14]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	4411      	add	r1, r2
 800a178:	4893      	ldr	r0, [pc, #588]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a17a:	226a      	movs	r2, #106	; 0x6a
 800a17c:	fb03 f202 	mul.w	r2, r3, r2
 800a180:	4402      	add	r2, r0
 800a182:	3230      	adds	r2, #48	; 0x30
 800a184:	6011      	str	r1, [r2, #0]
 800a186:	4a90      	ldr	r2, [pc, #576]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a188:	216a      	movs	r1, #106	; 0x6a
 800a18a:	fb01 f303 	mul.w	r3, r1, r3
 800a18e:	4413      	add	r3, r2
 800a190:	3330      	adds	r3, #48	; 0x30
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	89fb      	ldrh	r3, [r7, #14]
 800a196:	498c      	ldr	r1, [pc, #560]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a198:	206a      	movs	r0, #106	; 0x6a
 800a19a:	fb00 f303 	mul.w	r3, r0, r3
 800a19e:	440b      	add	r3, r1
 800a1a0:	3328      	adds	r3, #40	; 0x28
 800a1a2:	685b      	ldr	r3, [r3, #4]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d309      	bcc.n	800a1bc <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 800a1a8:	89fb      	ldrh	r3, [r7, #14]
 800a1aa:	4a87      	ldr	r2, [pc, #540]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a1ac:	216a      	movs	r1, #106	; 0x6a
 800a1ae:	fb01 f303 	mul.w	r3, r1, r3
 800a1b2:	4413      	add	r3, r2
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	220a      	movs	r2, #10
 800a1b8:	701a      	strb	r2, [r3, #0]
 800a1ba:	e040      	b.n	800a23e <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 800a1bc:	89fb      	ldrh	r3, [r7, #14]
 800a1be:	4a82      	ldr	r2, [pc, #520]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a1c0:	216a      	movs	r1, #106	; 0x6a
 800a1c2:	fb01 f303 	mul.w	r3, r1, r3
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	2b19      	cmp	r3, #25
 800a1ce:	d136      	bne.n	800a23e <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 800a1d0:	89fb      	ldrh	r3, [r7, #14]
 800a1d2:	4a7d      	ldr	r2, [pc, #500]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a1d4:	216a      	movs	r1, #106	; 0x6a
 800a1d6:	fb01 f303 	mul.w	r3, r1, r3
 800a1da:	4413      	add	r3, r2
 800a1dc:	3330      	adds	r3, #48	; 0x30
 800a1de:	685b      	ldr	r3, [r3, #4]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 800a1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e4:	d02b      	beq.n	800a23e <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskBlockTicks))
 800a1e6:	89fb      	ldrh	r3, [r7, #14]
 800a1e8:	4a77      	ldr	r2, [pc, #476]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a1ea:	216a      	movs	r1, #106	; 0x6a
 800a1ec:	fb01 f303 	mul.w	r3, r1, r3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3338      	adds	r3, #56	; 0x38
 800a1f4:	6819      	ldr	r1, [r3, #0]
 800a1f6:	89fb      	ldrh	r3, [r7, #14]
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	4411      	add	r1, r2
 800a1fc:	4872      	ldr	r0, [pc, #456]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a1fe:	226a      	movs	r2, #106	; 0x6a
 800a200:	fb03 f202 	mul.w	r2, r3, r2
 800a204:	4402      	add	r2, r0
 800a206:	3238      	adds	r2, #56	; 0x38
 800a208:	6011      	str	r1, [r2, #0]
 800a20a:	4a6f      	ldr	r2, [pc, #444]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a20c:	216a      	movs	r1, #106	; 0x6a
 800a20e:	fb01 f303 	mul.w	r3, r1, r3
 800a212:	4413      	add	r3, r2
 800a214:	3338      	adds	r3, #56	; 0x38
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	89fb      	ldrh	r3, [r7, #14]
 800a21a:	496b      	ldr	r1, [pc, #428]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a21c:	206a      	movs	r0, #106	; 0x6a
 800a21e:	fb00 f303 	mul.w	r3, r0, r3
 800a222:	440b      	add	r3, r1
 800a224:	3330      	adds	r3, #48	; 0x30
 800a226:	685b      	ldr	r3, [r3, #4]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 800a228:	429a      	cmp	r2, r3
 800a22a:	d308      	bcc.n	800a23e <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 800a22c:	89fb      	ldrh	r3, [r7, #14]
 800a22e:	4a66      	ldr	r2, [pc, #408]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a230:	216a      	movs	r1, #106	; 0x6a
 800a232:	fb01 f303 	mul.w	r3, r1, r3
 800a236:	4413      	add	r3, r2
 800a238:	3304      	adds	r3, #4
 800a23a:	220a      	movs	r2, #10
 800a23c:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 800a23e:	89fa      	ldrh	r2, [r7, #14]
 800a240:	4b62      	ldr	r3, [pc, #392]	; (800a3cc <gos_kernelSelectNextTask+0x2b8>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	429a      	cmp	r2, r3
 800a246:	d047      	beq.n	800a2d8 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 800a248:	89fb      	ldrh	r3, [r7, #14]
 800a24a:	4a5f      	ldr	r2, [pc, #380]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a24c:	216a      	movs	r1, #106	; 0x6a
 800a24e:	fb01 f303 	mul.w	r3, r1, r3
 800a252:	4413      	add	r3, r2
 800a254:	3304      	adds	r3, #4
 800a256:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 800a258:	2b0a      	cmp	r3, #10
 800a25a:	d13d      	bne.n	800a2d8 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 800a25c:	89fb      	ldrh	r3, [r7, #14]
 800a25e:	4a5a      	ldr	r2, [pc, #360]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a260:	216a      	movs	r1, #106	; 0x6a
 800a262:	fb01 f303 	mul.w	r3, r1, r3
 800a266:	4413      	add	r3, r2
 800a268:	3306      	adds	r3, #6
 800a26a:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 800a26c:	7b7a      	ldrb	r2, [r7, #13]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d932      	bls.n	800a2d8 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 800a272:	89fb      	ldrh	r3, [r7, #14]
 800a274:	4a54      	ldr	r2, [pc, #336]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a276:	216a      	movs	r1, #106	; 0x6a
 800a278:	fb01 f303 	mul.w	r3, r1, r3
 800a27c:	4413      	add	r3, r2
 800a27e:	3360      	adds	r3, #96	; 0x60
 800a280:	889b      	ldrh	r3, [r3, #4]
 800a282:	b29a      	uxth	r2, r3
 800a284:	89fb      	ldrh	r3, [r7, #14]
 800a286:	4950      	ldr	r1, [pc, #320]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a288:	206a      	movs	r0, #106	; 0x6a
 800a28a:	fb00 f303 	mul.w	r3, r0, r3
 800a28e:	440b      	add	r3, r1
 800a290:	3358      	adds	r3, #88	; 0x58
 800a292:	88db      	ldrh	r3, [r3, #6]
 800a294:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 800a296:	429a      	cmp	r2, r3
 800a298:	d21e      	bcs.n	800a2d8 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 800a29a:	89fb      	ldrh	r3, [r7, #14]
 800a29c:	4a4a      	ldr	r2, [pc, #296]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a29e:	216a      	movs	r1, #106	; 0x6a
 800a2a0:	fb01 f303 	mul.w	r3, r1, r3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	3360      	adds	r3, #96	; 0x60
 800a2a8:	885b      	ldrh	r3, [r3, #2]
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	89fb      	ldrh	r3, [r7, #14]
 800a2ae:	4946      	ldr	r1, [pc, #280]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a2b0:	206a      	movs	r0, #106	; 0x6a
 800a2b2:	fb00 f303 	mul.w	r3, r0, r3
 800a2b6:	440b      	add	r3, r1
 800a2b8:	3358      	adds	r3, #88	; 0x58
 800a2ba:	88db      	ldrh	r3, [r3, #6]
 800a2bc:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d20a      	bcs.n	800a2d8 <gos_kernelSelectNextTask+0x1c4>
            {
                nextTask = taskIndex;
 800a2c2:	89fb      	ldrh	r3, [r7, #14]
 800a2c4:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 800a2c6:	89fb      	ldrh	r3, [r7, #14]
 800a2c8:	4a3f      	ldr	r2, [pc, #252]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a2ca:	216a      	movs	r1, #106	; 0x6a
 800a2cc:	fb01 f303 	mul.w	r3, r1, r3
 800a2d0:	4413      	add	r3, r2
 800a2d2:	3306      	adds	r3, #6
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 800a2d8:	89fb      	ldrh	r3, [r7, #14]
 800a2da:	4a3b      	ldr	r2, [pc, #236]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a2dc:	216a      	movs	r1, #106	; 0x6a
 800a2de:	fb01 f303 	mul.w	r3, r1, r3
 800a2e2:	4413      	add	r3, r2
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d007      	beq.n	800a2fa <gos_kernelSelectNextTask+0x1e6>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800a2ea:	89fb      	ldrh	r3, [r7, #14]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	81fb      	strh	r3, [r7, #14]
 800a2f0:	89fb      	ldrh	r3, [r7, #14]
 800a2f2:	2b2f      	cmp	r3, #47	; 0x2f
 800a2f4:	f67f af2b 	bls.w	800a14e <gos_kernelSelectNextTask+0x3a>
 800a2f8:	e000      	b.n	800a2fc <gos_kernelSelectNextTask+0x1e8>
            {
                break;
 800a2fa:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 800a2fc:	f7ff f8da 	bl	80094b4 <gos_kernelGetCpuUsage>
 800a300:	4603      	mov	r3, r0
 800a302:	461a      	mov	r2, r3
 800a304:	4b32      	ldr	r3, [pc, #200]	; (800a3d0 <gos_kernelSelectNextTask+0x2bc>)
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d901      	bls.n	800a310 <gos_kernelSelectNextTask+0x1fc>
        {
            nextTask = 0u;
 800a30c:	2300      	movs	r3, #0
 800a30e:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 800a310:	897a      	ldrh	r2, [r7, #10]
 800a312:	4b2e      	ldr	r3, [pc, #184]	; (800a3cc <gos_kernelSelectNextTask+0x2b8>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d02b      	beq.n	800a372 <gos_kernelSelectNextTask+0x25e>
        {
            if (kernelSwapHookFunction != NULL)
 800a31a:	4b2e      	ldr	r3, [pc, #184]	; (800a3d4 <gos_kernelSelectNextTask+0x2c0>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d016      	beq.n	800a350 <gos_kernelSelectNextTask+0x23c>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 800a322:	4b2c      	ldr	r3, [pc, #176]	; (800a3d4 <gos_kernelSelectNextTask+0x2c0>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a29      	ldr	r2, [pc, #164]	; (800a3cc <gos_kernelSelectNextTask+0x2b8>)
 800a328:	6812      	ldr	r2, [r2, #0]
 800a32a:	4927      	ldr	r1, [pc, #156]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a32c:	206a      	movs	r0, #106	; 0x6a
 800a32e:	fb00 f202 	mul.w	r2, r0, r2
 800a332:	440a      	add	r2, r1
 800a334:	3228      	adds	r2, #40	; 0x28
 800a336:	8852      	ldrh	r2, [r2, #2]
 800a338:	b290      	uxth	r0, r2
 800a33a:	897a      	ldrh	r2, [r7, #10]
 800a33c:	4922      	ldr	r1, [pc, #136]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a33e:	246a      	movs	r4, #106	; 0x6a
 800a340:	fb04 f202 	mul.w	r2, r4, r2
 800a344:	440a      	add	r2, r1
 800a346:	3228      	adds	r2, #40	; 0x28
 800a348:	8852      	ldrh	r2, [r2, #2]
 800a34a:	b292      	uxth	r2, r2
 800a34c:	4611      	mov	r1, r2
 800a34e:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 800a350:	4b1e      	ldr	r3, [pc, #120]	; (800a3cc <gos_kernelSelectNextTask+0x2b8>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	491c      	ldr	r1, [pc, #112]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a356:	226a      	movs	r2, #106	; 0x6a
 800a358:	fb03 f202 	mul.w	r2, r3, r2
 800a35c:	440a      	add	r2, r1
 800a35e:	3240      	adds	r2, #64	; 0x40
 800a360:	6852      	ldr	r2, [r2, #4]
 800a362:	3201      	adds	r2, #1
 800a364:	4918      	ldr	r1, [pc, #96]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a366:	206a      	movs	r0, #106	; 0x6a
 800a368:	fb00 f303 	mul.w	r3, r0, r3
 800a36c:	440b      	add	r3, r1
 800a36e:	3340      	adds	r3, #64	; 0x40
 800a370:	605a      	str	r2, [r3, #4]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 800a372:	1cbb      	adds	r3, r7, #2
 800a374:	4618      	mov	r0, r3
 800a376:	f005 fbb5 	bl	800fae4 <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 800a37a:	887a      	ldrh	r2, [r7, #2]
 800a37c:	4b16      	ldr	r3, [pc, #88]	; (800a3d8 <gos_kernelSelectNextTask+0x2c4>)
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 800a384:	4b11      	ldr	r3, [pc, #68]	; (800a3cc <gos_kernelSelectNextTask+0x2b8>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	226a      	movs	r2, #106	; 0x6a
 800a38a:	fb02 f303 	mul.w	r3, r2, r3
 800a38e:	3350      	adds	r3, #80	; 0x50
 800a390:	4a0d      	ldr	r2, [pc, #52]	; (800a3c8 <gos_kernelSelectNextTask+0x2b4>)
 800a392:	4413      	add	r3, r2
 800a394:	3305      	adds	r3, #5
 800a396:	893a      	ldrh	r2, [r7, #8]
 800a398:	4619      	mov	r1, r3
 800a39a:	4810      	ldr	r0, [pc, #64]	; (800a3dc <gos_kernelSelectNextTask+0x2c8>)
 800a39c:	f004 fc72 	bl	800ec84 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 800a3a0:	480d      	ldr	r0, [pc, #52]	; (800a3d8 <gos_kernelSelectNextTask+0x2c4>)
 800a3a2:	f005 fb9f 	bl	800fae4 <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 800a3a6:	897b      	ldrh	r3, [r7, #10]
 800a3a8:	4a08      	ldr	r2, [pc, #32]	; (800a3cc <gos_kernelSelectNextTask+0x2b8>)
 800a3aa:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 800a3ac:	4b03      	ldr	r3, [pc, #12]	; (800a3bc <gos_kernelSelectNextTask+0x2a8>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a03      	ldr	r2, [pc, #12]	; (800a3c0 <gos_kernelSelectNextTask+0x2ac>)
 800a3b2:	6013      	str	r3, [r2, #0]
    }
    else
    {
        // Nothing to do.
    }
}
 800a3b4:	bf00      	nop
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd90      	pop	{r4, r7, pc}
 800a3bc:	20002bbc 	.word	0x20002bbc
 800a3c0:	20002bd8 	.word	0x20002bd8
 800a3c4:	20002bb1 	.word	0x20002bb1
 800a3c8:	200004d4 	.word	0x200004d4
 800a3cc:	20002bb8 	.word	0x20002bb8
 800a3d0:	200004ce 	.word	0x200004ce
 800a3d4:	20002bd0 	.word	0x20002bd0
 800a3d8:	20002bc0 	.word	0x20002bc0
 800a3dc:	20002bc4 	.word	0x20002bc4

0800a3e0 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	3b05      	subs	r3, #5
 800a3ee:	2b14      	cmp	r3, #20
 800a3f0:	d836      	bhi.n	800a460 <gos_kernelGetTaskStateString+0x80>
 800a3f2:	a201      	add	r2, pc, #4	; (adr r2, 800a3f8 <gos_kernelGetTaskStateString+0x18>)
 800a3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f8:	0800a455 	.word	0x0800a455
 800a3fc:	0800a461 	.word	0x0800a461
 800a400:	0800a461 	.word	0x0800a461
 800a404:	0800a461 	.word	0x0800a461
 800a408:	0800a461 	.word	0x0800a461
 800a40c:	0800a44d 	.word	0x0800a44d
 800a410:	0800a461 	.word	0x0800a461
 800a414:	0800a461 	.word	0x0800a461
 800a418:	0800a45d 	.word	0x0800a45d
 800a41c:	0800a461 	.word	0x0800a461
 800a420:	0800a461 	.word	0x0800a461
 800a424:	0800a461 	.word	0x0800a461
 800a428:	0800a461 	.word	0x0800a461
 800a42c:	0800a461 	.word	0x0800a461
 800a430:	0800a461 	.word	0x0800a461
 800a434:	0800a461 	.word	0x0800a461
 800a438:	0800a461 	.word	0x0800a461
 800a43c:	0800a451 	.word	0x0800a451
 800a440:	0800a461 	.word	0x0800a461
 800a444:	0800a461 	.word	0x0800a461
 800a448:	0800a459 	.word	0x0800a459
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 800a44c:	4b08      	ldr	r3, [pc, #32]	; (800a470 <gos_kernelGetTaskStateString+0x90>)
 800a44e:	e008      	b.n	800a462 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 800a450:	4b08      	ldr	r3, [pc, #32]	; (800a474 <gos_kernelGetTaskStateString+0x94>)
 800a452:	e006      	b.n	800a462 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 800a454:	4b08      	ldr	r3, [pc, #32]	; (800a478 <gos_kernelGetTaskStateString+0x98>)
 800a456:	e004      	b.n	800a462 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 800a458:	4b08      	ldr	r3, [pc, #32]	; (800a47c <gos_kernelGetTaskStateString+0x9c>)
 800a45a:	e002      	b.n	800a462 <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 800a45c:	4b08      	ldr	r3, [pc, #32]	; (800a480 <gos_kernelGetTaskStateString+0xa0>)
 800a45e:	e000      	b.n	800a462 <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 800a460:	4b08      	ldr	r3, [pc, #32]	; (800a484 <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	08013604 	.word	0x08013604
 800a474:	08013614 	.word	0x08013614
 800a478:	08013628 	.word	0x08013628
 800a47c:	0801363c 	.word	0x0801363c
 800a480:	08013650 	.word	0x08013650
 800a484:	08013660 	.word	0x08013660

0800a488 <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <gos_kernelProcessorReset+0x20>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a498:	4903      	ldr	r1, [pc, #12]	; (800a4a8 <gos_kernelProcessorReset+0x20>)
 800a49a:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <gos_kernelProcessorReset+0x24>)
 800a49c:	4313      	orrs	r3, r2
 800a49e:	600b      	str	r3, [r1, #0]
 800a4a0:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 800a4a4:	bf00      	nop
 800a4a6:	e7fd      	b.n	800a4a4 <gos_kernelProcessorReset+0x1c>
 800a4a8:	e000ed0c 	.word	0xe000ed0c
 800a4ac:	05fa0004 	.word	0x05fa0004

0800a4b0 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800a4b4:	bf00      	nop
 800a4b6:	e7fd      	b.n	800a4b4 <NMI_Handler+0x4>

0800a4b8 <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 800a4bc:	bf00      	nop
 800a4be:	e7fd      	b.n	800a4bc <HardFault_Handler+0x4>

0800a4c0 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <MemManage_Handler+0x4>

0800a4c8 <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800a4cc:	bf00      	nop
 800a4ce:	e7fd      	b.n	800a4cc <BusFault_Handler+0x4>

0800a4d0 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 800a4d4:	bf00      	nop
 800a4d6:	e7fd      	b.n	800a4d4 <UsageFault_Handler+0x4>

0800a4d8 <gos_taskRegister>:

/*
 * Function: gos_taskRegister
 */
gos_result_t gos_taskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 800a4e2:	2355      	movs	r3, #85	; 0x55
 800a4e4:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 800a4ea:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800a4ee:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_taskCheckDescriptor(taskDescriptor) == GOS_ERROR)
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f001 fd31 	bl	800bf5c <gos_taskCheckDescriptor>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2bae      	cmp	r3, #174	; 0xae
 800a4fe:	d102      	bne.n	800a506 <gos_taskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 800a500:	23ae      	movs	r3, #174	; 0xae
 800a502:	75fb      	strb	r3, [r7, #23]
 800a504:	e173      	b.n	800a7ee <gos_taskRegister+0x316>
    }
    else
    {
        taskRegisterResult = GOS_ERROR;
 800a506:	23ae      	movs	r3, #174	; 0xae
 800a508:	75fb      	strb	r3, [r7, #23]

        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800a50a:	2300      	movs	r3, #0
 800a50c:	82bb      	strh	r3, [r7, #20]
 800a50e:	e01a      	b.n	800a546 <gos_taskRegister+0x6e>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 800a510:	8abb      	ldrh	r3, [r7, #20]
 800a512:	4a89      	ldr	r2, [pc, #548]	; (800a738 <gos_taskRegister+0x260>)
 800a514:	216a      	movs	r1, #106	; 0x6a
 800a516:	fb01 f303 	mul.w	r3, r1, r3
 800a51a:	4413      	add	r3, r2
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d102      	bne.n	800a528 <gos_taskRegister+0x50>
            {
                taskRegisterResult = GOS_SUCCESS;
 800a522:	2355      	movs	r3, #85	; 0x55
 800a524:	75fb      	strb	r3, [r7, #23]
                break;
 800a526:	e011      	b.n	800a54c <gos_taskRegister+0x74>
            }
            else
            {
                // Continue.
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 800a528:	8abb      	ldrh	r3, [r7, #20]
 800a52a:	4a83      	ldr	r2, [pc, #524]	; (800a738 <gos_taskRegister+0x260>)
 800a52c:	216a      	movs	r1, #106	; 0x6a
 800a52e:	fb01 f303 	mul.w	r3, r1, r3
 800a532:	4413      	add	r3, r2
 800a534:	3348      	adds	r3, #72	; 0x48
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	461a      	mov	r2, r3
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	4413      	add	r3, r2
 800a53e:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800a540:	8abb      	ldrh	r3, [r7, #20]
 800a542:	3301      	adds	r3, #1
 800a544:	82bb      	strh	r3, [r7, #20]
 800a546:	8abb      	ldrh	r3, [r7, #20]
 800a548:	2b2f      	cmp	r3, #47	; 0x2f
 800a54a:	d9e1      	bls.n	800a510 <gos_taskRegister+0x38>
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 800a54c:	8abb      	ldrh	r3, [r7, #20]
 800a54e:	2b2f      	cmp	r3, #47	; 0x2f
 800a550:	d902      	bls.n	800a558 <gos_taskRegister+0x80>
        {
            taskRegisterResult = GOS_ERROR;
 800a552:	23ae      	movs	r3, #174	; 0xae
 800a554:	75fb      	strb	r3, [r7, #23]
 800a556:	e14a      	b.n	800a7ee <gos_taskRegister+0x316>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800a55e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a562:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	3b04      	subs	r3, #4
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a570:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3b04      	subs	r3, #4
 800a57a:	60fb      	str	r3, [r7, #12]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3b04      	subs	r3, #4
 800a584:	60fb      	str	r3, [r7, #12]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f06f 0202 	mvn.w	r2, #2
 800a58c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3b04      	subs	r3, #4
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800a59a:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3b04      	subs	r3, #4
 800a5a0:	60fb      	str	r3, [r7, #12]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800a5a8:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3b04      	subs	r3, #4
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800a5b6:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	3b04      	subs	r3, #4
 800a5bc:	60fb      	str	r3, [r7, #12]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800a5c4:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	3b04      	subs	r3, #4
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3b04      	subs	r3, #4
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800a5de:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3b04      	subs	r3, #4
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800a5ec:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3b04      	subs	r3, #4
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800a5fa:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3b04      	subs	r3, #4
 800a600:	60fb      	str	r3, [r7, #12]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800a608:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3b04      	subs	r3, #4
 800a60e:	60fb      	str	r3, [r7, #12]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800a616:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3b04      	subs	r3, #4
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800a624:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3b04      	subs	r3, #4
 800a62a:	60fb      	str	r3, [r7, #12]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800a632:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3b04      	subs	r3, #4
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800a640:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 800a642:	8abb      	ldrh	r3, [r7, #20]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	493c      	ldr	r1, [pc, #240]	; (800a738 <gos_taskRegister+0x260>)
 800a648:	206a      	movs	r0, #106	; 0x6a
 800a64a:	fb00 f303 	mul.w	r3, r0, r3
 800a64e:	440b      	add	r3, r1
 800a650:	333c      	adds	r3, #60	; 0x3c
 800a652:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 800a654:	8abb      	ldrh	r3, [r7, #20]
 800a656:	4a38      	ldr	r2, [pc, #224]	; (800a738 <gos_taskRegister+0x260>)
 800a658:	216a      	movs	r1, #106	; 0x6a
 800a65a:	fb01 f303 	mul.w	r3, r1, r3
 800a65e:	4413      	add	r3, r2
 800a660:	3304      	adds	r3, #4
 800a662:	220a      	movs	r2, #10
 800a664:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 800a666:	8abb      	ldrh	r3, [r7, #20]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	6812      	ldr	r2, [r2, #0]
 800a66c:	4932      	ldr	r1, [pc, #200]	; (800a738 <gos_taskRegister+0x260>)
 800a66e:	206a      	movs	r0, #106	; 0x6a
 800a670:	fb00 f303 	mul.w	r3, r0, r3
 800a674:	440b      	add	r3, r1
 800a676:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 800a678:	8abb      	ldrh	r3, [r7, #20]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	7990      	ldrb	r0, [r2, #6]
 800a67e:	4a2e      	ldr	r2, [pc, #184]	; (800a738 <gos_taskRegister+0x260>)
 800a680:	216a      	movs	r1, #106	; 0x6a
 800a682:	fb01 f303 	mul.w	r3, r1, r3
 800a686:	4413      	add	r3, r2
 800a688:	3306      	adds	r3, #6
 800a68a:	4602      	mov	r2, r0
 800a68c:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 800a68e:	8abb      	ldrh	r3, [r7, #20]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	7990      	ldrb	r0, [r2, #6]
 800a694:	4a28      	ldr	r2, [pc, #160]	; (800a738 <gos_taskRegister+0x260>)
 800a696:	216a      	movs	r1, #106	; 0x6a
 800a698:	fb01 f303 	mul.w	r3, r1, r3
 800a69c:	4413      	add	r3, r2
 800a69e:	3307      	adds	r3, #7
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 800a6a4:	8abb      	ldrh	r3, [r7, #20]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800a6ac:	b290      	uxth	r0, r2
 800a6ae:	4a22      	ldr	r2, [pc, #136]	; (800a738 <gos_taskRegister+0x260>)
 800a6b0:	216a      	movs	r1, #106	; 0x6a
 800a6b2:	fb01 f303 	mul.w	r3, r1, r3
 800a6b6:	4413      	add	r3, r2
 800a6b8:	3348      	adds	r3, #72	; 0x48
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 800a6be:	8abb      	ldrh	r3, [r7, #20]
 800a6c0:	8aba      	ldrh	r2, [r7, #20]
 800a6c2:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800a6c6:	b290      	uxth	r0, r2
 800a6c8:	4a1b      	ldr	r2, [pc, #108]	; (800a738 <gos_taskRegister+0x260>)
 800a6ca:	216a      	movs	r1, #106	; 0x6a
 800a6cc:	fb01 f303 	mul.w	r3, r1, r3
 800a6d0:	4413      	add	r3, r2
 800a6d2:	332a      	adds	r3, #42	; 0x2a
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 800a6d8:	8abb      	ldrh	r3, [r7, #20]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	8912      	ldrh	r2, [r2, #8]
 800a6de:	b290      	uxth	r0, r2
 800a6e0:	4a15      	ldr	r2, [pc, #84]	; (800a738 <gos_taskRegister+0x260>)
 800a6e2:	216a      	movs	r1, #106	; 0x6a
 800a6e4:	fb01 f303 	mul.w	r3, r1, r3
 800a6e8:	4413      	add	r3, r2
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10a      	bne.n	800a712 <gos_taskRegister+0x23a>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 800a6fc:	8abb      	ldrh	r3, [r7, #20]
 800a6fe:	4a0e      	ldr	r2, [pc, #56]	; (800a738 <gos_taskRegister+0x260>)
 800a700:	216a      	movs	r1, #106	; 0x6a
 800a702:	fb01 f303 	mul.w	r3, r1, r3
 800a706:	4413      	add	r3, r2
 800a708:	335e      	adds	r3, #94	; 0x5e
 800a70a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a70e:	801a      	strh	r2, [r3, #0]
 800a710:	e021      	b.n	800a756 <gos_taskRegister+0x27e>
            }
            else if (taskDescriptor->taskCpuUsageLimit > 10000u)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a718:	b29b      	uxth	r3, r3
 800a71a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a71e:	4293      	cmp	r3, r2
 800a720:	d90c      	bls.n	800a73c <gos_taskRegister+0x264>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 800a722:	8abb      	ldrh	r3, [r7, #20]
 800a724:	4a04      	ldr	r2, [pc, #16]	; (800a738 <gos_taskRegister+0x260>)
 800a726:	216a      	movs	r1, #106	; 0x6a
 800a728:	fb01 f303 	mul.w	r3, r1, r3
 800a72c:	4413      	add	r3, r2
 800a72e:	335e      	adds	r3, #94	; 0x5e
 800a730:	f242 7210 	movw	r2, #10000	; 0x2710
 800a734:	801a      	strh	r2, [r3, #0]
 800a736:	e00e      	b.n	800a756 <gos_taskRegister+0x27e>
 800a738:	200004d4 	.word	0x200004d4
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 800a73c:	8abb      	ldrh	r3, [r7, #20]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800a744:	b290      	uxth	r0, r2
 800a746:	4a2c      	ldr	r2, [pc, #176]	; (800a7f8 <gos_taskRegister+0x320>)
 800a748:	216a      	movs	r1, #106	; 0x6a
 800a74a:	fb01 f303 	mul.w	r3, r1, r3
 800a74e:	4413      	add	r3, r2
 800a750:	335e      	adds	r3, #94	; 0x5e
 800a752:	4602      	mov	r2, r0
 800a754:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	330a      	adds	r3, #10
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d015      	beq.n	800a78a <gos_taskRegister+0x2b2>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	330a      	adds	r3, #10
 800a762:	4618      	mov	r0, r3
 800a764:	f7f5 fdb4 	bl	80002d0 <strlen>
 800a768:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 800a76a:	2b20      	cmp	r3, #32
 800a76c:	d80d      	bhi.n	800a78a <gos_taskRegister+0x2b2>
            {
                (void_t) strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 800a76e:	8abb      	ldrh	r3, [r7, #20]
 800a770:	226a      	movs	r2, #106	; 0x6a
 800a772:	fb02 f303 	mul.w	r3, r2, r3
 800a776:	3308      	adds	r3, #8
 800a778:	4a1f      	ldr	r2, [pc, #124]	; (800a7f8 <gos_taskRegister+0x320>)
 800a77a:	4413      	add	r3, r2
 800a77c:	1c9a      	adds	r2, r3, #2
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	330a      	adds	r3, #10
 800a782:	4619      	mov	r1, r3
 800a784:	4610      	mov	r0, r2
 800a786:	f006 f87c 	bl	8010882 <strcpy>
            {
                // Task name is not requried.
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 800a78a:	8abb      	ldrh	r3, [r7, #20]
 800a78c:	4a1a      	ldr	r2, [pc, #104]	; (800a7f8 <gos_taskRegister+0x320>)
 800a78e:	216a      	movs	r1, #106	; 0x6a
 800a790:	fb01 f303 	mul.w	r3, r1, r3
 800a794:	4413      	add	r3, r2
 800a796:	332a      	adds	r3, #42	; 0x2a
 800a798:	881a      	ldrh	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	855a      	strh	r2, [r3, #42]	; 0x2a
            if (taskId != NULL)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d009      	beq.n	800a7b8 <gos_taskRegister+0x2e0>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 800a7a4:	8abb      	ldrh	r3, [r7, #20]
 800a7a6:	4a14      	ldr	r2, [pc, #80]	; (800a7f8 <gos_taskRegister+0x320>)
 800a7a8:	216a      	movs	r1, #106	; 0x6a
 800a7aa:	fb01 f303 	mul.w	r3, r1, r3
 800a7ae:	4413      	add	r3, r2
 800a7b0:	332a      	adds	r3, #42	; 0x2a
 800a7b2:	881a      	ldrh	r2, [r3, #0]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	801a      	strh	r2, [r3, #0]
                // External task ID not required.
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 800a7b8:	8abb      	ldrh	r3, [r7, #20]
 800a7ba:	4a0f      	ldr	r2, [pc, #60]	; (800a7f8 <gos_taskRegister+0x320>)
 800a7bc:	216a      	movs	r1, #106	; 0x6a
 800a7be:	fb01 f303 	mul.w	r3, r1, r3
 800a7c2:	4413      	add	r3, r2
 800a7c4:	333c      	adds	r3, #60	; 0x3c
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	8aba      	ldrh	r2, [r7, #20]
 800a7ca:	490b      	ldr	r1, [pc, #44]	; (800a7f8 <gos_taskRegister+0x320>)
 800a7cc:	206a      	movs	r0, #106	; 0x6a
 800a7ce:	fb00 f202 	mul.w	r2, r0, r2
 800a7d2:	440a      	add	r2, r1
 800a7d4:	3248      	adds	r2, #72	; 0x48
 800a7d6:	8812      	ldrh	r2, [r2, #0]
 800a7d8:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 800a7da:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 800a7dc:	3240      	adds	r2, #64	; 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 800a7de:	4906      	ldr	r1, [pc, #24]	; (800a7f8 <gos_taskRegister+0x320>)
 800a7e0:	206a      	movs	r0, #106	; 0x6a
 800a7e2:	fb00 f303 	mul.w	r3, r0, r3
 800a7e6:	440b      	add	r3, r1
 800a7e8:	3360      	adds	r3, #96	; 0x60
 800a7ea:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	200004d4 	.word	0x200004d4

0800a7fc <gos_taskSleep>:

/*
 * Function: gos_taskSleep
 */
GOS_INLINE gos_result_t gos_taskSleep (gos_taskSleepTick_t sleepTicks)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 800a804:	23ae      	movs	r3, #174	; 0xae
 800a806:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (currentTaskIndex > 0u)
 800a808:	4b3a      	ldr	r3, [pc, #232]	; (800a8f4 <gos_taskSleep+0xf8>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d06c      	beq.n	800a8ea <gos_taskSleep+0xee>
    {
        GOS_ATOMIC_ENTER
 800a810:	4b39      	ldr	r3, [pc, #228]	; (800a8f8 <gos_taskSleep+0xfc>)
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d108      	bne.n	800a82a <gos_taskSleep+0x2e>
 800a818:	b672      	cpsid	i
 800a81a:	f3ef 8310 	mrs	r3, PRIMASK
 800a81e:	4a37      	ldr	r2, [pc, #220]	; (800a8fc <gos_taskSleep+0x100>)
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	4b33      	ldr	r3, [pc, #204]	; (800a8f8 <gos_taskSleep+0xfc>)
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	3301      	adds	r3, #1
 800a830:	b2da      	uxtb	r2, r3
 800a832:	4b31      	ldr	r3, [pc, #196]	; (800a8f8 <gos_taskSleep+0xfc>)
 800a834:	701a      	strb	r2, [r3, #0]
 800a836:	4b32      	ldr	r3, [pc, #200]	; (800a900 <gos_taskSleep+0x104>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	3301      	adds	r3, #1
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	4b30      	ldr	r3, [pc, #192]	; (800a900 <gos_taskSleep+0x104>)
 800a840:	701a      	strb	r2, [r3, #0]
        {
            if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 800a842:	4b2c      	ldr	r3, [pc, #176]	; (800a8f4 <gos_taskSleep+0xf8>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a2f      	ldr	r2, [pc, #188]	; (800a904 <gos_taskSleep+0x108>)
 800a848:	216a      	movs	r1, #106	; 0x6a
 800a84a:	fb01 f303 	mul.w	r3, r1, r3
 800a84e:	4413      	add	r3, r2
 800a850:	3304      	adds	r3, #4
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b0a      	cmp	r3, #10
 800a856:	d121      	bne.n	800a89c <gos_taskSleep+0xa0>
            {
                taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 800a858:	4b26      	ldr	r3, [pc, #152]	; (800a8f4 <gos_taskSleep+0xf8>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a29      	ldr	r2, [pc, #164]	; (800a904 <gos_taskSleep+0x108>)
 800a85e:	216a      	movs	r1, #106	; 0x6a
 800a860:	fb01 f303 	mul.w	r3, r1, r3
 800a864:	4413      	add	r3, r2
 800a866:	3304      	adds	r3, #4
 800a868:	2216      	movs	r2, #22
 800a86a:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 800a86c:	4b21      	ldr	r3, [pc, #132]	; (800a8f4 <gos_taskSleep+0xf8>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a24      	ldr	r2, [pc, #144]	; (800a904 <gos_taskSleep+0x108>)
 800a872:	216a      	movs	r1, #106	; 0x6a
 800a874:	fb01 f303 	mul.w	r3, r1, r3
 800a878:	4413      	add	r3, r2
 800a87a:	332c      	adds	r3, #44	; 0x2c
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	601a      	str	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 800a880:	4b1c      	ldr	r3, [pc, #112]	; (800a8f4 <gos_taskSleep+0xf8>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a1f      	ldr	r2, [pc, #124]	; (800a904 <gos_taskSleep+0x108>)
 800a886:	216a      	movs	r1, #106	; 0x6a
 800a888:	fb01 f303 	mul.w	r3, r1, r3
 800a88c:	4413      	add	r3, r2
 800a88e:	3330      	adds	r3, #48	; 0x30
 800a890:	2200      	movs	r2, #0
 800a892:	801a      	strh	r2, [r3, #0]
 800a894:	2200      	movs	r2, #0
 800a896:	805a      	strh	r2, [r3, #2]
                taskSleepResult = GOS_SUCCESS;
 800a898:	2355      	movs	r3, #85	; 0x55
 800a89a:	73fb      	strb	r3, [r7, #15]
            else
            {
                // Nothing to do.
            }
        }
        GOS_ATOMIC_EXIT
 800a89c:	4b16      	ldr	r3, [pc, #88]	; (800a8f8 <gos_taskSleep+0xfc>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d005      	beq.n	800a8b0 <gos_taskSleep+0xb4>
 800a8a4:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <gos_taskSleep+0xfc>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	4b12      	ldr	r3, [pc, #72]	; (800a8f8 <gos_taskSleep+0xfc>)
 800a8ae:	701a      	strb	r2, [r3, #0]
 800a8b0:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <gos_taskSleep+0xfc>)
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d108      	bne.n	800a8ca <gos_taskSleep+0xce>
 800a8b8:	4b10      	ldr	r3, [pc, #64]	; (800a8fc <gos_taskSleep+0x100>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f383 8810 	msr	PRIMASK, r3
 800a8c0:	b662      	cpsie	i
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <gos_taskSleep+0x104>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d005      	beq.n	800a8de <gos_taskSleep+0xe2>
 800a8d2:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <gos_taskSleep+0x104>)
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	4b09      	ldr	r3, [pc, #36]	; (800a900 <gos_taskSleep+0x104>)
 800a8dc:	701a      	strb	r2, [r3, #0]

        if (taskSleepResult == GOS_SUCCESS)
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	2b55      	cmp	r3, #85	; 0x55
 800a8e2:	d102      	bne.n	800a8ea <gos_taskSleep+0xee>
        {
            // Unprivileged.
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 800a8e4:	2009      	movs	r0, #9
 800a8e6:	f7ff fb41 	bl	8009f6c <gos_kernelReschedule>
    else
    {
        // Idle task cannot sleep.
    }

    return taskSleepResult;
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	20002bb8 	.word	0x20002bb8
 800a8f8:	20002bb3 	.word	0x20002bb3
 800a8fc:	20002bb4 	.word	0x20002bb4
 800a900:	20002bb1 	.word	0x20002bb1
 800a904:	200004d4 	.word	0x200004d4

0800a908 <gos_taskWakeup>:

/*
 * Function: gos_taskWakeup
 */
GOS_INLINE gos_result_t gos_taskWakeup (gos_tid_t taskId)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af02      	add	r7, sp, #8
 800a90e:	4603      	mov	r3, r0
 800a910:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskWakeupResult = GOS_ERROR;
 800a912:	23ae      	movs	r3, #174	; 0xae
 800a914:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 800a916:	2300      	movs	r3, #0
 800a918:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800a91a:	4b56      	ldr	r3, [pc, #344]	; (800aa74 <gos_taskWakeup+0x16c>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d108      	bne.n	800a934 <gos_taskWakeup+0x2c>
 800a922:	b672      	cpsid	i
 800a924:	f3ef 8310 	mrs	r3, PRIMASK
 800a928:	4a53      	ldr	r2, [pc, #332]	; (800aa78 <gos_taskWakeup+0x170>)
 800a92a:	6013      	str	r3, [r2, #0]
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	4b4f      	ldr	r3, [pc, #316]	; (800aa74 <gos_taskWakeup+0x16c>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	3301      	adds	r3, #1
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	4b4d      	ldr	r3, [pc, #308]	; (800aa74 <gos_taskWakeup+0x16c>)
 800a93e:	701a      	strb	r2, [r3, #0]
 800a940:	4b4e      	ldr	r3, [pc, #312]	; (800aa7c <gos_taskWakeup+0x174>)
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	b2da      	uxtb	r2, r3
 800a948:	4b4c      	ldr	r3, [pc, #304]	; (800aa7c <gos_taskWakeup+0x174>)
 800a94a:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800a94c:	88fb      	ldrh	r3, [r7, #6]
 800a94e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a952:	d969      	bls.n	800aa28 <gos_taskWakeup+0x120>
 800a954:	88fb      	ldrh	r3, [r7, #6]
 800a956:	f248 022f 	movw	r2, #32815	; 0x802f
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d864      	bhi.n	800aa28 <gos_taskWakeup+0x120>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800a95e:	88fb      	ldrh	r3, [r7, #6]
 800a960:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800a964:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800a966:	4b46      	ldr	r3, [pc, #280]	; (800aa80 <gos_taskWakeup+0x178>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a46      	ldr	r2, [pc, #280]	; (800aa84 <gos_taskWakeup+0x17c>)
 800a96c:	216a      	movs	r1, #106	; 0x6a
 800a96e:	fb01 f303 	mul.w	r3, r1, r3
 800a972:	4413      	add	r3, r2
 800a974:	3308      	adds	r3, #8
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	b21b      	sxth	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	db03      	blt.n	800a986 <gos_taskWakeup+0x7e>
            inIsr > 0)
 800a97e:	4b42      	ldr	r3, [pc, #264]	; (800aa88 <gos_taskWakeup+0x180>)
 800a980:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800a982:	2b00      	cmp	r3, #0
 800a984:	d015      	beq.n	800a9b2 <gos_taskWakeup+0xaa>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 800a986:	4a3f      	ldr	r2, [pc, #252]	; (800aa84 <gos_taskWakeup+0x17c>)
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	216a      	movs	r1, #106	; 0x6a
 800a98c:	fb01 f303 	mul.w	r3, r1, r3
 800a990:	4413      	add	r3, r2
 800a992:	3304      	adds	r3, #4
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	2b16      	cmp	r3, #22
 800a998:	d146      	bne.n	800aa28 <gos_taskWakeup+0x120>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 800a99a:	4a3a      	ldr	r2, [pc, #232]	; (800aa84 <gos_taskWakeup+0x17c>)
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	216a      	movs	r1, #106	; 0x6a
 800a9a0:	fb01 f303 	mul.w	r3, r1, r3
 800a9a4:	4413      	add	r3, r2
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	220a      	movs	r2, #10
 800a9aa:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 800a9ac:	2355      	movs	r3, #85	; 0x55
 800a9ae:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 800a9b0:	e03a      	b.n	800aa28 <gos_taskWakeup+0x120>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800a9b2:	4b30      	ldr	r3, [pc, #192]	; (800aa74 <gos_taskWakeup+0x16c>)
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d005      	beq.n	800a9c6 <gos_taskWakeup+0xbe>
 800a9ba:	4b2e      	ldr	r3, [pc, #184]	; (800aa74 <gos_taskWakeup+0x16c>)
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	4b2c      	ldr	r3, [pc, #176]	; (800aa74 <gos_taskWakeup+0x16c>)
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	4b2b      	ldr	r3, [pc, #172]	; (800aa74 <gos_taskWakeup+0x16c>)
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d108      	bne.n	800a9e0 <gos_taskWakeup+0xd8>
 800a9ce:	4b2a      	ldr	r3, [pc, #168]	; (800aa78 <gos_taskWakeup+0x170>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f383 8810 	msr	PRIMASK, r3
 800a9d6:	b662      	cpsie	i
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	4b26      	ldr	r3, [pc, #152]	; (800aa7c <gos_taskWakeup+0x174>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d005      	beq.n	800a9f4 <gos_taskWakeup+0xec>
 800a9e8:	4b24      	ldr	r3, [pc, #144]	; (800aa7c <gos_taskWakeup+0x174>)
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	4b22      	ldr	r3, [pc, #136]	; (800aa7c <gos_taskWakeup+0x174>)
 800a9f2:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800a9f4:	4b22      	ldr	r3, [pc, #136]	; (800aa80 <gos_taskWakeup+0x178>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	226a      	movs	r2, #106	; 0x6a
 800a9fa:	fb02 f303 	mul.w	r3, r2, r3
 800a9fe:	3308      	adds	r3, #8
 800aa00:	4a20      	ldr	r2, [pc, #128]	; (800aa84 <gos_taskWakeup+0x17c>)
 800aa02:	4413      	add	r3, r2
 800aa04:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	216a      	movs	r1, #106	; 0x6a
 800aa0a:	fb01 f202 	mul.w	r2, r1, r2
 800aa0e:	3208      	adds	r2, #8
 800aa10:	491c      	ldr	r1, [pc, #112]	; (800aa84 <gos_taskWakeup+0x17c>)
 800aa12:	440a      	add	r2, r1
 800aa14:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 800aa16:	9201      	str	r2, [sp, #4]
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	4b1c      	ldr	r3, [pc, #112]	; (800aa8c <gos_taskWakeup+0x184>)
 800aa1c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800aa20:	491b      	ldr	r1, [pc, #108]	; (800aa90 <gos_taskWakeup+0x188>)
 800aa22:	2034      	movs	r0, #52	; 0x34
 800aa24:	f001 fc44 	bl	800c2b0 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800aa28:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <gos_taskWakeup+0x16c>)
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d005      	beq.n	800aa3c <gos_taskWakeup+0x134>
 800aa30:	4b10      	ldr	r3, [pc, #64]	; (800aa74 <gos_taskWakeup+0x16c>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	4b0e      	ldr	r3, [pc, #56]	; (800aa74 <gos_taskWakeup+0x16c>)
 800aa3a:	701a      	strb	r2, [r3, #0]
 800aa3c:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <gos_taskWakeup+0x16c>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d108      	bne.n	800aa56 <gos_taskWakeup+0x14e>
 800aa44:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <gos_taskWakeup+0x170>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f383 8810 	msr	PRIMASK, r3
 800aa4c:	b662      	cpsie	i
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	4b09      	ldr	r3, [pc, #36]	; (800aa7c <gos_taskWakeup+0x174>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d005      	beq.n	800aa6a <gos_taskWakeup+0x162>
 800aa5e:	4b07      	ldr	r3, [pc, #28]	; (800aa7c <gos_taskWakeup+0x174>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	4b05      	ldr	r3, [pc, #20]	; (800aa7c <gos_taskWakeup+0x174>)
 800aa68:	701a      	strb	r2, [r3, #0]

    return taskWakeupResult;
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	20002bb3 	.word	0x20002bb3
 800aa78:	20002bb4 	.word	0x20002bb4
 800aa7c:	20002bb1 	.word	0x20002bb1
 800aa80:	20002bb8 	.word	0x20002bb8
 800aa84:	200004d4 	.word	0x200004d4
 800aa88:	20002bb2 	.word	0x20002bb2
 800aa8c:	08013664 	.word	0x08013664
 800aa90:	0801465c 	.word	0x0801465c

0800aa94 <gos_taskSuspend>:

/*
 * Function: gos_taskSuspend
 */
GOS_INLINE gos_result_t gos_taskSuspend (gos_tid_t taskId)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskSuspendResult = GOS_ERROR;
 800aa9e:	23ae      	movs	r3, #174	; 0xae
 800aaa0:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800aaa6:	4b84      	ldr	r3, [pc, #528]	; (800acb8 <gos_taskSuspend+0x224>)
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d108      	bne.n	800aac0 <gos_taskSuspend+0x2c>
 800aaae:	b672      	cpsid	i
 800aab0:	f3ef 8310 	mrs	r3, PRIMASK
 800aab4:	4a81      	ldr	r2, [pc, #516]	; (800acbc <gos_taskSuspend+0x228>)
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	4b7d      	ldr	r3, [pc, #500]	; (800acb8 <gos_taskSuspend+0x224>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	3301      	adds	r3, #1
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	4b7b      	ldr	r3, [pc, #492]	; (800acb8 <gos_taskSuspend+0x224>)
 800aaca:	701a      	strb	r2, [r3, #0]
 800aacc:	4b7c      	ldr	r3, [pc, #496]	; (800acc0 <gos_taskSuspend+0x22c>)
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	3301      	adds	r3, #1
 800aad2:	b2da      	uxtb	r2, r3
 800aad4:	4b7a      	ldr	r3, [pc, #488]	; (800acc0 <gos_taskSuspend+0x22c>)
 800aad6:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800aad8:	88fb      	ldrh	r3, [r7, #6]
 800aada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aade:	f240 80c1 	bls.w	800ac64 <gos_taskSuspend+0x1d0>
 800aae2:	88fb      	ldrh	r3, [r7, #6]
 800aae4:	f248 022f 	movw	r2, #32815	; 0x802f
 800aae8:	4293      	cmp	r3, r2
 800aaea:	f200 80bb 	bhi.w	800ac64 <gos_taskSuspend+0x1d0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800aaee:	88fb      	ldrh	r3, [r7, #6]
 800aaf0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800aaf4:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800aaf6:	4b73      	ldr	r3, [pc, #460]	; (800acc4 <gos_taskSuspend+0x230>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a73      	ldr	r2, [pc, #460]	; (800acc8 <gos_taskSuspend+0x234>)
 800aafc:	216a      	movs	r1, #106	; 0x6a
 800aafe:	fb01 f303 	mul.w	r3, r1, r3
 800ab02:	4413      	add	r3, r2
 800ab04:	3308      	adds	r3, #8
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	b21b      	sxth	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	db08      	blt.n	800ab20 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 800ab0e:	4b6d      	ldr	r3, [pc, #436]	; (800acc4 <gos_taskSuspend+0x230>)
 800ab10:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d003      	beq.n	800ab20 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 800ab18:	4b6c      	ldr	r3, [pc, #432]	; (800accc <gos_taskSuspend+0x238>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d064      	beq.n	800abea <gos_taskSuspend+0x156>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800ab20:	4a69      	ldr	r2, [pc, #420]	; (800acc8 <gos_taskSuspend+0x234>)
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	216a      	movs	r1, #106	; 0x6a
 800ab26:	fb01 f303 	mul.w	r3, r1, r3
 800ab2a:	4413      	add	r3, r2
 800ab2c:	3304      	adds	r3, #4
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	2b0a      	cmp	r3, #10
 800ab32:	d014      	beq.n	800ab5e <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 800ab34:	4a64      	ldr	r2, [pc, #400]	; (800acc8 <gos_taskSuspend+0x234>)
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	216a      	movs	r1, #106	; 0x6a
 800ab3a:	fb01 f303 	mul.w	r3, r1, r3
 800ab3e:	4413      	add	r3, r2
 800ab40:	3304      	adds	r3, #4
 800ab42:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800ab44:	2b16      	cmp	r3, #22
 800ab46:	d00a      	beq.n	800ab5e <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800ab48:	4a5f      	ldr	r2, [pc, #380]	; (800acc8 <gos_taskSuspend+0x234>)
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	216a      	movs	r1, #106	; 0x6a
 800ab4e:	fb01 f303 	mul.w	r3, r1, r3
 800ab52:	4413      	add	r3, r2
 800ab54:	3304      	adds	r3, #4
 800ab56:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 800ab58:	2b19      	cmp	r3, #25
 800ab5a:	f040 8082 	bne.w	800ac62 <gos_taskSuspend+0x1ce>
            {
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 800ab5e:	4a5a      	ldr	r2, [pc, #360]	; (800acc8 <gos_taskSuspend+0x234>)
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	216a      	movs	r1, #106	; 0x6a
 800ab64:	fb01 f303 	mul.w	r3, r1, r3
 800ab68:	4413      	add	r3, r2
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	7818      	ldrb	r0, [r3, #0]
 800ab6e:	4a56      	ldr	r2, [pc, #344]	; (800acc8 <gos_taskSuspend+0x234>)
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	216a      	movs	r1, #106	; 0x6a
 800ab74:	fb01 f303 	mul.w	r3, r1, r3
 800ab78:	4413      	add	r3, r2
 800ab7a:	3305      	adds	r3, #5
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 800ab80:	4a51      	ldr	r2, [pc, #324]	; (800acc8 <gos_taskSuspend+0x234>)
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	216a      	movs	r1, #106	; 0x6a
 800ab86:	fb01 f303 	mul.w	r3, r1, r3
 800ab8a:	4413      	add	r3, r2
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	2205      	movs	r2, #5
 800ab90:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 800ab92:	2355      	movs	r3, #85	; 0x55
 800ab94:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 800ab96:	4b48      	ldr	r3, [pc, #288]	; (800acb8 <gos_taskSuspend+0x224>)
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d005      	beq.n	800abaa <gos_taskSuspend+0x116>
 800ab9e:	4b46      	ldr	r3, [pc, #280]	; (800acb8 <gos_taskSuspend+0x224>)
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	3b01      	subs	r3, #1
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	4b44      	ldr	r3, [pc, #272]	; (800acb8 <gos_taskSuspend+0x224>)
 800aba8:	701a      	strb	r2, [r3, #0]
 800abaa:	4b43      	ldr	r3, [pc, #268]	; (800acb8 <gos_taskSuspend+0x224>)
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d108      	bne.n	800abc4 <gos_taskSuspend+0x130>
 800abb2:	4b42      	ldr	r3, [pc, #264]	; (800acbc <gos_taskSuspend+0x228>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f383 8810 	msr	PRIMASK, r3
 800abba:	b662      	cpsie	i
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	4b3e      	ldr	r3, [pc, #248]	; (800acc0 <gos_taskSuspend+0x22c>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d005      	beq.n	800abd8 <gos_taskSuspend+0x144>
 800abcc:	4b3c      	ldr	r3, [pc, #240]	; (800acc0 <gos_taskSuspend+0x22c>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	b2da      	uxtb	r2, r3
 800abd4:	4b3a      	ldr	r3, [pc, #232]	; (800acc0 <gos_taskSuspend+0x22c>)
 800abd6:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 800abd8:	4b3a      	ldr	r3, [pc, #232]	; (800acc4 <gos_taskSuspend+0x230>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d13f      	bne.n	800ac62 <gos_taskSuspend+0x1ce>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 800abe2:	2009      	movs	r0, #9
 800abe4:	f7ff f9c2 	bl	8009f6c <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800abe8:	e03b      	b.n	800ac62 <gos_taskSuspend+0x1ce>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800abea:	4b33      	ldr	r3, [pc, #204]	; (800acb8 <gos_taskSuspend+0x224>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d005      	beq.n	800abfe <gos_taskSuspend+0x16a>
 800abf2:	4b31      	ldr	r3, [pc, #196]	; (800acb8 <gos_taskSuspend+0x224>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	b2da      	uxtb	r2, r3
 800abfa:	4b2f      	ldr	r3, [pc, #188]	; (800acb8 <gos_taskSuspend+0x224>)
 800abfc:	701a      	strb	r2, [r3, #0]
 800abfe:	4b2e      	ldr	r3, [pc, #184]	; (800acb8 <gos_taskSuspend+0x224>)
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d108      	bne.n	800ac18 <gos_taskSuspend+0x184>
 800ac06:	4b2d      	ldr	r3, [pc, #180]	; (800acbc <gos_taskSuspend+0x228>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f383 8810 	msr	PRIMASK, r3
 800ac0e:	b662      	cpsie	i
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	4b29      	ldr	r3, [pc, #164]	; (800acc0 <gos_taskSuspend+0x22c>)
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <gos_taskSuspend+0x198>
 800ac20:	4b27      	ldr	r3, [pc, #156]	; (800acc0 <gos_taskSuspend+0x22c>)
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	4b25      	ldr	r3, [pc, #148]	; (800acc0 <gos_taskSuspend+0x22c>)
 800ac2a:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800ac2c:	4b25      	ldr	r3, [pc, #148]	; (800acc4 <gos_taskSuspend+0x230>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	226a      	movs	r2, #106	; 0x6a
 800ac32:	fb02 f303 	mul.w	r3, r2, r3
 800ac36:	3308      	adds	r3, #8
 800ac38:	4a23      	ldr	r2, [pc, #140]	; (800acc8 <gos_taskSuspend+0x234>)
 800ac3a:	4413      	add	r3, r2
 800ac3c:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	216a      	movs	r1, #106	; 0x6a
 800ac42:	fb01 f202 	mul.w	r2, r1, r2
 800ac46:	3208      	adds	r2, #8
 800ac48:	491f      	ldr	r1, [pc, #124]	; (800acc8 <gos_taskSuspend+0x234>)
 800ac4a:	440a      	add	r2, r1
 800ac4c:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 800ac4e:	9201      	str	r2, [sp, #4]
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	4b1f      	ldr	r3, [pc, #124]	; (800acd0 <gos_taskSuspend+0x23c>)
 800ac54:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800ac58:	491e      	ldr	r1, [pc, #120]	; (800acd4 <gos_taskSuspend+0x240>)
 800ac5a:	2034      	movs	r0, #52	; 0x34
 800ac5c:	f001 fb28 	bl	800c2b0 <gos_errorHandler>
 800ac60:	e000      	b.n	800ac64 <gos_taskSuspend+0x1d0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800ac62:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskSuspendResult != GOS_SUCCESS)
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	2b55      	cmp	r3, #85	; 0x55
 800ac68:	d020      	beq.n	800acac <gos_taskSuspend+0x218>
    {
        GOS_ATOMIC_EXIT
 800ac6a:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <gos_taskSuspend+0x224>)
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d005      	beq.n	800ac7e <gos_taskSuspend+0x1ea>
 800ac72:	4b11      	ldr	r3, [pc, #68]	; (800acb8 <gos_taskSuspend+0x224>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	4b0f      	ldr	r3, [pc, #60]	; (800acb8 <gos_taskSuspend+0x224>)
 800ac7c:	701a      	strb	r2, [r3, #0]
 800ac7e:	4b0e      	ldr	r3, [pc, #56]	; (800acb8 <gos_taskSuspend+0x224>)
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d108      	bne.n	800ac98 <gos_taskSuspend+0x204>
 800ac86:	4b0d      	ldr	r3, [pc, #52]	; (800acbc <gos_taskSuspend+0x228>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f383 8810 	msr	PRIMASK, r3
 800ac8e:	b662      	cpsie	i
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	4b09      	ldr	r3, [pc, #36]	; (800acc0 <gos_taskSuspend+0x22c>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d005      	beq.n	800acac <gos_taskSuspend+0x218>
 800aca0:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <gos_taskSuspend+0x22c>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	4b05      	ldr	r3, [pc, #20]	; (800acc0 <gos_taskSuspend+0x22c>)
 800acaa:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskSuspendResult;
 800acac:	7bfb      	ldrb	r3, [r7, #15]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20002bb3 	.word	0x20002bb3
 800acbc:	20002bb4 	.word	0x20002bb4
 800acc0:	20002bb1 	.word	0x20002bb1
 800acc4:	20002bb8 	.word	0x20002bb8
 800acc8:	200004d4 	.word	0x200004d4
 800accc:	20002bb2 	.word	0x20002bb2
 800acd0:	0801368c 	.word	0x0801368c
 800acd4:	0801466c 	.word	0x0801466c

0800acd8 <gos_taskResume>:

/*
 * Function: gos_taskResume
 */
GOS_INLINE gos_result_t gos_taskResume (gos_tid_t taskId)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af02      	add	r7, sp, #8
 800acde:	4603      	mov	r3, r0
 800ace0:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskResumeResult = GOS_ERROR;
 800ace2:	23ae      	movs	r3, #174	; 0xae
 800ace4:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 800ace6:	2300      	movs	r3, #0
 800ace8:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800acea:	4b4a      	ldr	r3, [pc, #296]	; (800ae14 <gos_taskResume+0x13c>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d108      	bne.n	800ad04 <gos_taskResume+0x2c>
 800acf2:	b672      	cpsid	i
 800acf4:	f3ef 8310 	mrs	r3, PRIMASK
 800acf8:	4a47      	ldr	r2, [pc, #284]	; (800ae18 <gos_taskResume+0x140>)
 800acfa:	6013      	str	r3, [r2, #0]
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	4b43      	ldr	r3, [pc, #268]	; (800ae14 <gos_taskResume+0x13c>)
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	4b41      	ldr	r3, [pc, #260]	; (800ae14 <gos_taskResume+0x13c>)
 800ad0e:	701a      	strb	r2, [r3, #0]
 800ad10:	4b42      	ldr	r3, [pc, #264]	; (800ae1c <gos_taskResume+0x144>)
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	3301      	adds	r3, #1
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	4b40      	ldr	r3, [pc, #256]	; (800ae1c <gos_taskResume+0x144>)
 800ad1a:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800ad1c:	88fb      	ldrh	r3, [r7, #6]
 800ad1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad22:	d950      	bls.n	800adc6 <gos_taskResume+0xee>
 800ad24:	88fb      	ldrh	r3, [r7, #6]
 800ad26:	f248 022f 	movw	r2, #32815	; 0x802f
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d84b      	bhi.n	800adc6 <gos_taskResume+0xee>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800ad2e:	88fb      	ldrh	r3, [r7, #6]
 800ad30:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ad34:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800ad36:	4b3a      	ldr	r3, [pc, #232]	; (800ae20 <gos_taskResume+0x148>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a3a      	ldr	r2, [pc, #232]	; (800ae24 <gos_taskResume+0x14c>)
 800ad3c:	216a      	movs	r1, #106	; 0x6a
 800ad3e:	fb01 f303 	mul.w	r3, r1, r3
 800ad42:	4413      	add	r3, r2
 800ad44:	3308      	adds	r3, #8
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	b21b      	sxth	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	db03      	blt.n	800ad56 <gos_taskResume+0x7e>
            inIsr > 0)
 800ad4e:	4b36      	ldr	r3, [pc, #216]	; (800ae28 <gos_taskResume+0x150>)
 800ad50:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d01d      	beq.n	800ad92 <gos_taskResume+0xba>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 800ad56:	4a33      	ldr	r2, [pc, #204]	; (800ae24 <gos_taskResume+0x14c>)
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	216a      	movs	r1, #106	; 0x6a
 800ad5c:	fb01 f303 	mul.w	r3, r1, r3
 800ad60:	4413      	add	r3, r2
 800ad62:	3304      	adds	r3, #4
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	2b05      	cmp	r3, #5
 800ad68:	d12d      	bne.n	800adc6 <gos_taskResume+0xee>
            {
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 800ad6a:	4a2e      	ldr	r2, [pc, #184]	; (800ae24 <gos_taskResume+0x14c>)
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	216a      	movs	r1, #106	; 0x6a
 800ad70:	fb01 f303 	mul.w	r3, r1, r3
 800ad74:	4413      	add	r3, r2
 800ad76:	3305      	adds	r3, #5
 800ad78:	7818      	ldrb	r0, [r3, #0]
 800ad7a:	4a2a      	ldr	r2, [pc, #168]	; (800ae24 <gos_taskResume+0x14c>)
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	216a      	movs	r1, #106	; 0x6a
 800ad80:	fb01 f303 	mul.w	r3, r1, r3
 800ad84:	4413      	add	r3, r2
 800ad86:	3304      	adds	r3, #4
 800ad88:	4602      	mov	r2, r0
 800ad8a:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 800ad8c:	2355      	movs	r3, #85	; 0x55
 800ad8e:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 800ad90:	e019      	b.n	800adc6 <gos_taskResume+0xee>
            }
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800ad92:	4b23      	ldr	r3, [pc, #140]	; (800ae20 <gos_taskResume+0x148>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	226a      	movs	r2, #106	; 0x6a
 800ad98:	fb02 f303 	mul.w	r3, r2, r3
 800ad9c:	3308      	adds	r3, #8
 800ad9e:	4a21      	ldr	r2, [pc, #132]	; (800ae24 <gos_taskResume+0x14c>)
 800ada0:	4413      	add	r3, r2
 800ada2:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	216a      	movs	r1, #106	; 0x6a
 800ada8:	fb01 f202 	mul.w	r2, r1, r2
 800adac:	3208      	adds	r2, #8
 800adae:	491d      	ldr	r1, [pc, #116]	; (800ae24 <gos_taskResume+0x14c>)
 800adb0:	440a      	add	r2, r1
 800adb2:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 800adb4:	9201      	str	r2, [sp, #4]
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	4b1c      	ldr	r3, [pc, #112]	; (800ae2c <gos_taskResume+0x154>)
 800adba:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800adbe:	491c      	ldr	r1, [pc, #112]	; (800ae30 <gos_taskResume+0x158>)
 800adc0:	2034      	movs	r0, #52	; 0x34
 800adc2:	f001 fa75 	bl	800c2b0 <gos_errorHandler>
    else
    {
        // Task ID error.
    }

    GOS_ATOMIC_EXIT
 800adc6:	4b13      	ldr	r3, [pc, #76]	; (800ae14 <gos_taskResume+0x13c>)
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <gos_taskResume+0x102>
 800adce:	4b11      	ldr	r3, [pc, #68]	; (800ae14 <gos_taskResume+0x13c>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	3b01      	subs	r3, #1
 800add4:	b2da      	uxtb	r2, r3
 800add6:	4b0f      	ldr	r3, [pc, #60]	; (800ae14 <gos_taskResume+0x13c>)
 800add8:	701a      	strb	r2, [r3, #0]
 800adda:	4b0e      	ldr	r3, [pc, #56]	; (800ae14 <gos_taskResume+0x13c>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d108      	bne.n	800adf4 <gos_taskResume+0x11c>
 800ade2:	4b0d      	ldr	r3, [pc, #52]	; (800ae18 <gos_taskResume+0x140>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f383 8810 	msr	PRIMASK, r3
 800adea:	b662      	cpsie	i
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	4b09      	ldr	r3, [pc, #36]	; (800ae1c <gos_taskResume+0x144>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d005      	beq.n	800ae08 <gos_taskResume+0x130>
 800adfc:	4b07      	ldr	r3, [pc, #28]	; (800ae1c <gos_taskResume+0x144>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <gos_taskResume+0x144>)
 800ae06:	701a      	strb	r2, [r3, #0]

    return taskResumeResult;
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20002bb3 	.word	0x20002bb3
 800ae18:	20002bb4 	.word	0x20002bb4
 800ae1c:	20002bb1 	.word	0x20002bb1
 800ae20:	20002bb8 	.word	0x20002bb8
 800ae24:	200004d4 	.word	0x200004d4
 800ae28:	20002bb2 	.word	0x20002bb2
 800ae2c:	080136b4 	.word	0x080136b4
 800ae30:	0801467c 	.word	0x0801467c

0800ae34 <gos_taskBlock>:

/*
 * Function: gos_taskBlock
 */
GOS_INLINE gos_result_t gos_taskBlock (gos_tid_t taskId, gos_blockMaxTick_t blockTicks)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af02      	add	r7, sp, #8
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	6039      	str	r1, [r7, #0]
 800ae3e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskBlockResult = GOS_ERROR;
 800ae40:	23ae      	movs	r3, #174	; 0xae
 800ae42:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 800ae44:	2300      	movs	r3, #0
 800ae46:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800ae48:	4b7b      	ldr	r3, [pc, #492]	; (800b038 <gos_taskBlock+0x204>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d108      	bne.n	800ae62 <gos_taskBlock+0x2e>
 800ae50:	b672      	cpsid	i
 800ae52:	f3ef 8310 	mrs	r3, PRIMASK
 800ae56:	4a79      	ldr	r2, [pc, #484]	; (800b03c <gos_taskBlock+0x208>)
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	4b75      	ldr	r3, [pc, #468]	; (800b038 <gos_taskBlock+0x204>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	3301      	adds	r3, #1
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	4b73      	ldr	r3, [pc, #460]	; (800b038 <gos_taskBlock+0x204>)
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	4b74      	ldr	r3, [pc, #464]	; (800b040 <gos_taskBlock+0x20c>)
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	3301      	adds	r3, #1
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	4b72      	ldr	r3, [pc, #456]	; (800b040 <gos_taskBlock+0x20c>)
 800ae78:	701a      	strb	r2, [r3, #0]

    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800ae7a:	88fb      	ldrh	r3, [r7, #6]
 800ae7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae80:	f240 80b0 	bls.w	800afe4 <gos_taskBlock+0x1b0>
 800ae84:	88fb      	ldrh	r3, [r7, #6]
 800ae86:	f248 022f 	movw	r2, #32815	; 0x802f
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	f200 80aa 	bhi.w	800afe4 <gos_taskBlock+0x1b0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800ae90:	88fb      	ldrh	r3, [r7, #6]
 800ae92:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ae96:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800ae98:	4b6a      	ldr	r3, [pc, #424]	; (800b044 <gos_taskBlock+0x210>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a6a      	ldr	r2, [pc, #424]	; (800b048 <gos_taskBlock+0x214>)
 800ae9e:	216a      	movs	r1, #106	; 0x6a
 800aea0:	fb01 f303 	mul.w	r3, r1, r3
 800aea4:	4413      	add	r3, r2
 800aea6:	3308      	adds	r3, #8
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	b21b      	sxth	r3, r3
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	db08      	blt.n	800aec2 <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 800aeb0:	4b64      	ldr	r3, [pc, #400]	; (800b044 <gos_taskBlock+0x210>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d003      	beq.n	800aec2 <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 800aeba:	4b64      	ldr	r3, [pc, #400]	; (800b04c <gos_taskBlock+0x218>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d053      	beq.n	800af6a <gos_taskBlock+0x136>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 800aec2:	4a61      	ldr	r2, [pc, #388]	; (800b048 <gos_taskBlock+0x214>)
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	216a      	movs	r1, #106	; 0x6a
 800aec8:	fb01 f303 	mul.w	r3, r1, r3
 800aecc:	4413      	add	r3, r2
 800aece:	3304      	adds	r3, #4
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	2b0a      	cmp	r3, #10
 800aed4:	f040 8085 	bne.w	800afe2 <gos_taskBlock+0x1ae>
            {
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 800aed8:	4a5b      	ldr	r2, [pc, #364]	; (800b048 <gos_taskBlock+0x214>)
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	216a      	movs	r1, #106	; 0x6a
 800aede:	fb01 f303 	mul.w	r3, r1, r3
 800aee2:	4413      	add	r3, r2
 800aee4:	3304      	adds	r3, #4
 800aee6:	2219      	movs	r2, #25
 800aee8:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 800aeea:	4a57      	ldr	r2, [pc, #348]	; (800b048 <gos_taskBlock+0x214>)
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	216a      	movs	r1, #106	; 0x6a
 800aef0:	fb01 f303 	mul.w	r3, r1, r3
 800aef4:	4413      	add	r3, r2
 800aef6:	3334      	adds	r3, #52	; 0x34
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 800aefc:	4a52      	ldr	r2, [pc, #328]	; (800b048 <gos_taskBlock+0x214>)
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	216a      	movs	r1, #106	; 0x6a
 800af02:	fb01 f303 	mul.w	r3, r1, r3
 800af06:	4413      	add	r3, r2
 800af08:	3338      	adds	r3, #56	; 0x38
 800af0a:	2200      	movs	r2, #0
 800af0c:	801a      	strh	r2, [r3, #0]
 800af0e:	2200      	movs	r2, #0
 800af10:	805a      	strh	r2, [r3, #2]

                taskBlockResult = GOS_SUCCESS;
 800af12:	2355      	movs	r3, #85	; 0x55
 800af14:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 800af16:	4b48      	ldr	r3, [pc, #288]	; (800b038 <gos_taskBlock+0x204>)
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <gos_taskBlock+0xf6>
 800af1e:	4b46      	ldr	r3, [pc, #280]	; (800b038 <gos_taskBlock+0x204>)
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	3b01      	subs	r3, #1
 800af24:	b2da      	uxtb	r2, r3
 800af26:	4b44      	ldr	r3, [pc, #272]	; (800b038 <gos_taskBlock+0x204>)
 800af28:	701a      	strb	r2, [r3, #0]
 800af2a:	4b43      	ldr	r3, [pc, #268]	; (800b038 <gos_taskBlock+0x204>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d108      	bne.n	800af44 <gos_taskBlock+0x110>
 800af32:	4b42      	ldr	r3, [pc, #264]	; (800b03c <gos_taskBlock+0x208>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f383 8810 	msr	PRIMASK, r3
 800af3a:	b662      	cpsie	i
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	4b3e      	ldr	r3, [pc, #248]	; (800b040 <gos_taskBlock+0x20c>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d005      	beq.n	800af58 <gos_taskBlock+0x124>
 800af4c:	4b3c      	ldr	r3, [pc, #240]	; (800b040 <gos_taskBlock+0x20c>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	3b01      	subs	r3, #1
 800af52:	b2da      	uxtb	r2, r3
 800af54:	4b3a      	ldr	r3, [pc, #232]	; (800b040 <gos_taskBlock+0x20c>)
 800af56:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 800af58:	4b3a      	ldr	r3, [pc, #232]	; (800b044 <gos_taskBlock+0x210>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d13f      	bne.n	800afe2 <gos_taskBlock+0x1ae>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 800af62:	2009      	movs	r0, #9
 800af64:	f7ff f802 	bl	8009f6c <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 800af68:	e03b      	b.n	800afe2 <gos_taskBlock+0x1ae>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800af6a:	4b33      	ldr	r3, [pc, #204]	; (800b038 <gos_taskBlock+0x204>)
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d005      	beq.n	800af7e <gos_taskBlock+0x14a>
 800af72:	4b31      	ldr	r3, [pc, #196]	; (800b038 <gos_taskBlock+0x204>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	3b01      	subs	r3, #1
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	4b2f      	ldr	r3, [pc, #188]	; (800b038 <gos_taskBlock+0x204>)
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	4b2e      	ldr	r3, [pc, #184]	; (800b038 <gos_taskBlock+0x204>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d108      	bne.n	800af98 <gos_taskBlock+0x164>
 800af86:	4b2d      	ldr	r3, [pc, #180]	; (800b03c <gos_taskBlock+0x208>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f383 8810 	msr	PRIMASK, r3
 800af8e:	b662      	cpsie	i
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	4b29      	ldr	r3, [pc, #164]	; (800b040 <gos_taskBlock+0x20c>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d005      	beq.n	800afac <gos_taskBlock+0x178>
 800afa0:	4b27      	ldr	r3, [pc, #156]	; (800b040 <gos_taskBlock+0x20c>)
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	4b25      	ldr	r3, [pc, #148]	; (800b040 <gos_taskBlock+0x20c>)
 800afaa:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800afac:	4b25      	ldr	r3, [pc, #148]	; (800b044 <gos_taskBlock+0x210>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	226a      	movs	r2, #106	; 0x6a
 800afb2:	fb02 f303 	mul.w	r3, r2, r3
 800afb6:	3308      	adds	r3, #8
 800afb8:	4a23      	ldr	r2, [pc, #140]	; (800b048 <gos_taskBlock+0x214>)
 800afba:	4413      	add	r3, r2
 800afbc:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	216a      	movs	r1, #106	; 0x6a
 800afc2:	fb01 f202 	mul.w	r2, r1, r2
 800afc6:	3208      	adds	r2, #8
 800afc8:	491f      	ldr	r1, [pc, #124]	; (800b048 <gos_taskBlock+0x214>)
 800afca:	440a      	add	r2, r1
 800afcc:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 800afce:	9201      	str	r2, [sp, #4]
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	4b1f      	ldr	r3, [pc, #124]	; (800b050 <gos_taskBlock+0x21c>)
 800afd4:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800afd8:	491e      	ldr	r1, [pc, #120]	; (800b054 <gos_taskBlock+0x220>)
 800afda:	2034      	movs	r0, #52	; 0x34
 800afdc:	f001 f968 	bl	800c2b0 <gos_errorHandler>
 800afe0:	e000      	b.n	800afe4 <gos_taskBlock+0x1b0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 800afe2:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskBlockResult != GOS_SUCCESS)
 800afe4:	7bfb      	ldrb	r3, [r7, #15]
 800afe6:	2b55      	cmp	r3, #85	; 0x55
 800afe8:	d020      	beq.n	800b02c <gos_taskBlock+0x1f8>
    {
        GOS_ATOMIC_EXIT
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <gos_taskBlock+0x204>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d005      	beq.n	800affe <gos_taskBlock+0x1ca>
 800aff2:	4b11      	ldr	r3, [pc, #68]	; (800b038 <gos_taskBlock+0x204>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	4b0f      	ldr	r3, [pc, #60]	; (800b038 <gos_taskBlock+0x204>)
 800affc:	701a      	strb	r2, [r3, #0]
 800affe:	4b0e      	ldr	r3, [pc, #56]	; (800b038 <gos_taskBlock+0x204>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d108      	bne.n	800b018 <gos_taskBlock+0x1e4>
 800b006:	4b0d      	ldr	r3, [pc, #52]	; (800b03c <gos_taskBlock+0x208>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f383 8810 	msr	PRIMASK, r3
 800b00e:	b662      	cpsie	i
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	4b09      	ldr	r3, [pc, #36]	; (800b040 <gos_taskBlock+0x20c>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d005      	beq.n	800b02c <gos_taskBlock+0x1f8>
 800b020:	4b07      	ldr	r3, [pc, #28]	; (800b040 <gos_taskBlock+0x20c>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	3b01      	subs	r3, #1
 800b026:	b2da      	uxtb	r2, r3
 800b028:	4b05      	ldr	r3, [pc, #20]	; (800b040 <gos_taskBlock+0x20c>)
 800b02a:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskBlockResult;
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	20002bb3 	.word	0x20002bb3
 800b03c:	20002bb4 	.word	0x20002bb4
 800b040:	20002bb1 	.word	0x20002bb1
 800b044:	20002bb8 	.word	0x20002bb8
 800b048:	200004d4 	.word	0x200004d4
 800b04c:	20002bb2 	.word	0x20002bb2
 800b050:	080136dc 	.word	0x080136dc
 800b054:	0801468c 	.word	0x0801468c

0800b058 <gos_taskUnblock>:

/*
 * Function: gos_taskUnblock
 */
GOS_INLINE gos_result_t gos_taskUnblock (gos_tid_t taskId)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af02      	add	r7, sp, #8
 800b05e:	4603      	mov	r3, r0
 800b060:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskUnblockResult = GOS_ERROR;
 800b062:	23ae      	movs	r3, #174	; 0xae
 800b064:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800b066:	2300      	movs	r3, #0
 800b068:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b06a:	4b68      	ldr	r3, [pc, #416]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d108      	bne.n	800b084 <gos_taskUnblock+0x2c>
 800b072:	b672      	cpsid	i
 800b074:	f3ef 8310 	mrs	r3, PRIMASK
 800b078:	4a65      	ldr	r2, [pc, #404]	; (800b210 <gos_taskUnblock+0x1b8>)
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	4b61      	ldr	r3, [pc, #388]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	3301      	adds	r3, #1
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	4b5f      	ldr	r3, [pc, #380]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b08e:	701a      	strb	r2, [r3, #0]
 800b090:	4b60      	ldr	r3, [pc, #384]	; (800b214 <gos_taskUnblock+0x1bc>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	3301      	adds	r3, #1
 800b096:	b2da      	uxtb	r2, r3
 800b098:	4b5e      	ldr	r3, [pc, #376]	; (800b214 <gos_taskUnblock+0x1bc>)
 800b09a:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800b09c:	88fb      	ldrh	r3, [r7, #6]
 800b09e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0a2:	f240 808d 	bls.w	800b1c0 <gos_taskUnblock+0x168>
 800b0a6:	88fb      	ldrh	r3, [r7, #6]
 800b0a8:	f248 022f 	movw	r2, #32815	; 0x802f
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	f200 8087 	bhi.w	800b1c0 <gos_taskUnblock+0x168>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b0b2:	88fb      	ldrh	r3, [r7, #6]
 800b0b4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b0b8:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800b0ba:	4b57      	ldr	r3, [pc, #348]	; (800b218 <gos_taskUnblock+0x1c0>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a57      	ldr	r2, [pc, #348]	; (800b21c <gos_taskUnblock+0x1c4>)
 800b0c0:	216a      	movs	r1, #106	; 0x6a
 800b0c2:	fb01 f303 	mul.w	r3, r1, r3
 800b0c6:	4413      	add	r3, r2
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	b21b      	sxth	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	db03      	blt.n	800b0da <gos_taskUnblock+0x82>
            inIsr > 0)
 800b0d2:	4b53      	ldr	r3, [pc, #332]	; (800b220 <gos_taskUnblock+0x1c8>)
 800b0d4:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d035      	beq.n	800b146 <gos_taskUnblock+0xee>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800b0da:	4a50      	ldr	r2, [pc, #320]	; (800b21c <gos_taskUnblock+0x1c4>)
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	216a      	movs	r1, #106	; 0x6a
 800b0e0:	fb01 f303 	mul.w	r3, r1, r3
 800b0e4:	4413      	add	r3, r2
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	2b19      	cmp	r3, #25
 800b0ec:	d10b      	bne.n	800b106 <gos_taskUnblock+0xae>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 800b0ee:	4a4b      	ldr	r2, [pc, #300]	; (800b21c <gos_taskUnblock+0x1c4>)
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	216a      	movs	r1, #106	; 0x6a
 800b0f4:	fb01 f303 	mul.w	r3, r1, r3
 800b0f8:	4413      	add	r3, r2
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	220a      	movs	r2, #10
 800b0fe:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 800b100:	2355      	movs	r3, #85	; 0x55
 800b102:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800b104:	e05b      	b.n	800b1be <gos_taskUnblock+0x166>
            }
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 800b106:	4a45      	ldr	r2, [pc, #276]	; (800b21c <gos_taskUnblock+0x1c4>)
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	216a      	movs	r1, #106	; 0x6a
 800b10c:	fb01 f303 	mul.w	r3, r1, r3
 800b110:	4413      	add	r3, r2
 800b112:	3304      	adds	r3, #4
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	2b05      	cmp	r3, #5
 800b118:	d151      	bne.n	800b1be <gos_taskUnblock+0x166>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 800b11a:	4a40      	ldr	r2, [pc, #256]	; (800b21c <gos_taskUnblock+0x1c4>)
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	216a      	movs	r1, #106	; 0x6a
 800b120:	fb01 f303 	mul.w	r3, r1, r3
 800b124:	4413      	add	r3, r2
 800b126:	3305      	adds	r3, #5
 800b128:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 800b12a:	2b19      	cmp	r3, #25
 800b12c:	d147      	bne.n	800b1be <gos_taskUnblock+0x166>
            {
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 800b12e:	4a3b      	ldr	r2, [pc, #236]	; (800b21c <gos_taskUnblock+0x1c4>)
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	216a      	movs	r1, #106	; 0x6a
 800b134:	fb01 f303 	mul.w	r3, r1, r3
 800b138:	4413      	add	r3, r2
 800b13a:	3305      	adds	r3, #5
 800b13c:	220a      	movs	r2, #10
 800b13e:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 800b140:	2355      	movs	r3, #85	; 0x55
 800b142:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800b144:	e03b      	b.n	800b1be <gos_taskUnblock+0x166>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800b146:	4b31      	ldr	r3, [pc, #196]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d005      	beq.n	800b15a <gos_taskUnblock+0x102>
 800b14e:	4b2f      	ldr	r3, [pc, #188]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	3b01      	subs	r3, #1
 800b154:	b2da      	uxtb	r2, r3
 800b156:	4b2d      	ldr	r3, [pc, #180]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b158:	701a      	strb	r2, [r3, #0]
 800b15a:	4b2c      	ldr	r3, [pc, #176]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d108      	bne.n	800b174 <gos_taskUnblock+0x11c>
 800b162:	4b2b      	ldr	r3, [pc, #172]	; (800b210 <gos_taskUnblock+0x1b8>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f383 8810 	msr	PRIMASK, r3
 800b16a:	b662      	cpsie	i
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	f3bf 8f6f 	isb	sy
 800b174:	4b27      	ldr	r3, [pc, #156]	; (800b214 <gos_taskUnblock+0x1bc>)
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d005      	beq.n	800b188 <gos_taskUnblock+0x130>
 800b17c:	4b25      	ldr	r3, [pc, #148]	; (800b214 <gos_taskUnblock+0x1bc>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	3b01      	subs	r3, #1
 800b182:	b2da      	uxtb	r2, r3
 800b184:	4b23      	ldr	r3, [pc, #140]	; (800b214 <gos_taskUnblock+0x1bc>)
 800b186:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800b188:	4b23      	ldr	r3, [pc, #140]	; (800b218 <gos_taskUnblock+0x1c0>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	226a      	movs	r2, #106	; 0x6a
 800b18e:	fb02 f303 	mul.w	r3, r2, r3
 800b192:	3308      	adds	r3, #8
 800b194:	4a21      	ldr	r2, [pc, #132]	; (800b21c <gos_taskUnblock+0x1c4>)
 800b196:	4413      	add	r3, r2
 800b198:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	216a      	movs	r1, #106	; 0x6a
 800b19e:	fb01 f202 	mul.w	r2, r1, r2
 800b1a2:	3208      	adds	r2, #8
 800b1a4:	491d      	ldr	r1, [pc, #116]	; (800b21c <gos_taskUnblock+0x1c4>)
 800b1a6:	440a      	add	r2, r1
 800b1a8:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 800b1aa:	9201      	str	r2, [sp, #4]
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	4b1d      	ldr	r3, [pc, #116]	; (800b224 <gos_taskUnblock+0x1cc>)
 800b1b0:	f240 226d 	movw	r2, #621	; 0x26d
 800b1b4:	491c      	ldr	r1, [pc, #112]	; (800b228 <gos_taskUnblock+0x1d0>)
 800b1b6:	2034      	movs	r0, #52	; 0x34
 800b1b8:	f001 f87a 	bl	800c2b0 <gos_errorHandler>
 800b1bc:	e000      	b.n	800b1c0 <gos_taskUnblock+0x168>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800b1be:	bf00      	nop
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800b1c0:	4b12      	ldr	r3, [pc, #72]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <gos_taskUnblock+0x17c>
 800b1c8:	4b10      	ldr	r3, [pc, #64]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b1d2:	701a      	strb	r2, [r3, #0]
 800b1d4:	4b0d      	ldr	r3, [pc, #52]	; (800b20c <gos_taskUnblock+0x1b4>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d108      	bne.n	800b1ee <gos_taskUnblock+0x196>
 800b1dc:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <gos_taskUnblock+0x1b8>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f383 8810 	msr	PRIMASK, r3
 800b1e4:	b662      	cpsie	i
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	4b09      	ldr	r3, [pc, #36]	; (800b214 <gos_taskUnblock+0x1bc>)
 800b1f0:	781b      	ldrb	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d005      	beq.n	800b202 <gos_taskUnblock+0x1aa>
 800b1f6:	4b07      	ldr	r3, [pc, #28]	; (800b214 <gos_taskUnblock+0x1bc>)
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	4b05      	ldr	r3, [pc, #20]	; (800b214 <gos_taskUnblock+0x1bc>)
 800b200:	701a      	strb	r2, [r3, #0]

    return taskUnblockResult;
 800b202:	7bfb      	ldrb	r3, [r7, #15]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	20002bb3 	.word	0x20002bb3
 800b210:	20002bb4 	.word	0x20002bb4
 800b214:	20002bb1 	.word	0x20002bb1
 800b218:	20002bb8 	.word	0x20002bb8
 800b21c:	200004d4 	.word	0x200004d4
 800b220:	20002bb2 	.word	0x20002bb2
 800b224:	08013704 	.word	0x08013704
 800b228:	0801469c 	.word	0x0801469c

0800b22c <gos_taskDelete>:

/*
 * Function: gos_taskDelete
 */
GOS_INLINE gos_result_t gos_taskDelete (gos_tid_t taskId)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af02      	add	r7, sp, #8
 800b232:	4603      	mov	r3, r0
 800b234:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskDeleteResult = GOS_ERROR;
 800b236:	23ae      	movs	r3, #174	; 0xae
 800b238:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b23e:	4b84      	ldr	r3, [pc, #528]	; (800b450 <gos_taskDelete+0x224>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d108      	bne.n	800b258 <gos_taskDelete+0x2c>
 800b246:	b672      	cpsid	i
 800b248:	f3ef 8310 	mrs	r3, PRIMASK
 800b24c:	4a81      	ldr	r2, [pc, #516]	; (800b454 <gos_taskDelete+0x228>)
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	4b7d      	ldr	r3, [pc, #500]	; (800b450 <gos_taskDelete+0x224>)
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	3301      	adds	r3, #1
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	4b7b      	ldr	r3, [pc, #492]	; (800b450 <gos_taskDelete+0x224>)
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	4b7c      	ldr	r3, [pc, #496]	; (800b458 <gos_taskDelete+0x22c>)
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	3301      	adds	r3, #1
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	4b7a      	ldr	r3, [pc, #488]	; (800b458 <gos_taskDelete+0x22c>)
 800b26e:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b276:	f240 80b9 	bls.w	800b3ec <gos_taskDelete+0x1c0>
 800b27a:	88fb      	ldrh	r3, [r7, #6]
 800b27c:	f248 022f 	movw	r2, #32815	; 0x802f
 800b280:	4293      	cmp	r3, r2
 800b282:	f200 80b3 	bhi.w	800b3ec <gos_taskDelete+0x1c0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b286:	88fb      	ldrh	r3, [r7, #6]
 800b288:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b28c:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800b28e:	4b73      	ldr	r3, [pc, #460]	; (800b45c <gos_taskDelete+0x230>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a73      	ldr	r2, [pc, #460]	; (800b460 <gos_taskDelete+0x234>)
 800b294:	216a      	movs	r1, #106	; 0x6a
 800b296:	fb01 f303 	mul.w	r3, r1, r3
 800b29a:	4413      	add	r3, r2
 800b29c:	3308      	adds	r3, #8
 800b29e:	881b      	ldrh	r3, [r3, #0]
 800b2a0:	b21b      	sxth	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	db08      	blt.n	800b2b8 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 800b2a6:	4b6d      	ldr	r3, [pc, #436]	; (800b45c <gos_taskDelete+0x230>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d003      	beq.n	800b2b8 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 800b2b0:	4b6c      	ldr	r3, [pc, #432]	; (800b464 <gos_taskDelete+0x238>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d05e      	beq.n	800b376 <gos_taskDelete+0x14a>
        {
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 800b2b8:	4a69      	ldr	r2, [pc, #420]	; (800b460 <gos_taskDelete+0x234>)
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	216a      	movs	r1, #106	; 0x6a
 800b2be:	fb01 f303 	mul.w	r3, r1, r3
 800b2c2:	4413      	add	r3, r2
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	2b0d      	cmp	r3, #13
 800b2ca:	f000 808f 	beq.w	800b3ec <gos_taskDelete+0x1c0>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 800b2ce:	4a64      	ldr	r2, [pc, #400]	; (800b460 <gos_taskDelete+0x234>)
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	216a      	movs	r1, #106	; 0x6a
 800b2d4:	fb01 f303 	mul.w	r3, r1, r3
 800b2d8:	4413      	add	r3, r2
 800b2da:	3304      	adds	r3, #4
 800b2dc:	220d      	movs	r2, #13
 800b2de:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 800b2e0:	2355      	movs	r3, #85	; 0x55
 800b2e2:	73fb      	strb	r3, [r7, #15]

                // Invoke signal.
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 800b2e4:	4b5d      	ldr	r3, [pc, #372]	; (800b45c <gos_taskDelete+0x230>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a5d      	ldr	r2, [pc, #372]	; (800b460 <gos_taskDelete+0x234>)
 800b2ea:	216a      	movs	r1, #106	; 0x6a
 800b2ec:	fb01 f303 	mul.w	r3, r1, r3
 800b2f0:	4413      	add	r3, r2
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	881b      	ldrh	r3, [r3, #0]
 800b2f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d133      	bne.n	800b366 <gos_taskDelete+0x13a>
                {
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 800b2fe:	4b57      	ldr	r3, [pc, #348]	; (800b45c <gos_taskDelete+0x230>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a57      	ldr	r2, [pc, #348]	; (800b460 <gos_taskDelete+0x234>)
 800b304:	216a      	movs	r1, #106	; 0x6a
 800b306:	fb01 f303 	mul.w	r3, r1, r3
 800b30a:	4413      	add	r3, r2
 800b30c:	3308      	adds	r3, #8
 800b30e:	881a      	ldrh	r2, [r3, #0]
 800b310:	4b52      	ldr	r3, [pc, #328]	; (800b45c <gos_taskDelete+0x230>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b318:	b290      	uxth	r0, r2
 800b31a:	4a51      	ldr	r2, [pc, #324]	; (800b460 <gos_taskDelete+0x234>)
 800b31c:	216a      	movs	r1, #106	; 0x6a
 800b31e:	fb01 f303 	mul.w	r3, r1, r3
 800b322:	4413      	add	r3, r2
 800b324:	3308      	adds	r3, #8
 800b326:	4602      	mov	r2, r0
 800b328:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 800b32a:	4b4f      	ldr	r3, [pc, #316]	; (800b468 <gos_taskDelete+0x23c>)
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	88fa      	ldrh	r2, [r7, #6]
 800b330:	4611      	mov	r1, r2
 800b332:	4618      	mov	r0, r3
 800b334:	f002 fdf8 	bl	800df28 <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 800b338:	4b48      	ldr	r3, [pc, #288]	; (800b45c <gos_taskDelete+0x230>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a48      	ldr	r2, [pc, #288]	; (800b460 <gos_taskDelete+0x234>)
 800b33e:	216a      	movs	r1, #106	; 0x6a
 800b340:	fb01 f303 	mul.w	r3, r1, r3
 800b344:	4413      	add	r3, r2
 800b346:	3308      	adds	r3, #8
 800b348:	881a      	ldrh	r2, [r3, #0]
 800b34a:	4b44      	ldr	r3, [pc, #272]	; (800b45c <gos_taskDelete+0x230>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b352:	b290      	uxth	r0, r2
 800b354:	4a42      	ldr	r2, [pc, #264]	; (800b460 <gos_taskDelete+0x234>)
 800b356:	216a      	movs	r1, #106	; 0x6a
 800b358:	fb01 f303 	mul.w	r3, r1, r3
 800b35c:	4413      	add	r3, r2
 800b35e:	3308      	adds	r3, #8
 800b360:	4602      	mov	r2, r0
 800b362:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 800b364:	e042      	b.n	800b3ec <gos_taskDelete+0x1c0>
                }
                else
                {
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 800b366:	4b40      	ldr	r3, [pc, #256]	; (800b468 <gos_taskDelete+0x23c>)
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	88fa      	ldrh	r2, [r7, #6]
 800b36c:	4611      	mov	r1, r2
 800b36e:	4618      	mov	r0, r3
 800b370:	f002 fdda 	bl	800df28 <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 800b374:	e03a      	b.n	800b3ec <gos_taskDelete+0x1c0>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800b376:	4b36      	ldr	r3, [pc, #216]	; (800b450 <gos_taskDelete+0x224>)
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d005      	beq.n	800b38a <gos_taskDelete+0x15e>
 800b37e:	4b34      	ldr	r3, [pc, #208]	; (800b450 <gos_taskDelete+0x224>)
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	3b01      	subs	r3, #1
 800b384:	b2da      	uxtb	r2, r3
 800b386:	4b32      	ldr	r3, [pc, #200]	; (800b450 <gos_taskDelete+0x224>)
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	4b31      	ldr	r3, [pc, #196]	; (800b450 <gos_taskDelete+0x224>)
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d108      	bne.n	800b3a4 <gos_taskDelete+0x178>
 800b392:	4b30      	ldr	r3, [pc, #192]	; (800b454 <gos_taskDelete+0x228>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f383 8810 	msr	PRIMASK, r3
 800b39a:	b662      	cpsie	i
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	4b2c      	ldr	r3, [pc, #176]	; (800b458 <gos_taskDelete+0x22c>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d005      	beq.n	800b3b8 <gos_taskDelete+0x18c>
 800b3ac:	4b2a      	ldr	r3, [pc, #168]	; (800b458 <gos_taskDelete+0x22c>)
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	4b28      	ldr	r3, [pc, #160]	; (800b458 <gos_taskDelete+0x22c>)
 800b3b6:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800b3b8:	4b28      	ldr	r3, [pc, #160]	; (800b45c <gos_taskDelete+0x230>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	226a      	movs	r2, #106	; 0x6a
 800b3be:	fb02 f303 	mul.w	r3, r2, r3
 800b3c2:	3308      	adds	r3, #8
 800b3c4:	4a26      	ldr	r2, [pc, #152]	; (800b460 <gos_taskDelete+0x234>)
 800b3c6:	4413      	add	r3, r2
 800b3c8:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	216a      	movs	r1, #106	; 0x6a
 800b3ce:	fb01 f202 	mul.w	r2, r1, r2
 800b3d2:	3208      	adds	r2, #8
 800b3d4:	4922      	ldr	r1, [pc, #136]	; (800b460 <gos_taskDelete+0x234>)
 800b3d6:	440a      	add	r2, r1
 800b3d8:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 800b3da:	9201      	str	r2, [sp, #4]
 800b3dc:	9300      	str	r3, [sp, #0]
 800b3de:	4b23      	ldr	r3, [pc, #140]	; (800b46c <gos_taskDelete+0x240>)
 800b3e0:	f240 22ad 	movw	r2, #685	; 0x2ad
 800b3e4:	4922      	ldr	r1, [pc, #136]	; (800b470 <gos_taskDelete+0x244>)
 800b3e6:	2034      	movs	r0, #52	; 0x34
 800b3e8:	f000 ff62 	bl	800c2b0 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800b3ec:	4b18      	ldr	r3, [pc, #96]	; (800b450 <gos_taskDelete+0x224>)
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <gos_taskDelete+0x1d4>
 800b3f4:	4b16      	ldr	r3, [pc, #88]	; (800b450 <gos_taskDelete+0x224>)
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	4b14      	ldr	r3, [pc, #80]	; (800b450 <gos_taskDelete+0x224>)
 800b3fe:	701a      	strb	r2, [r3, #0]
 800b400:	4b13      	ldr	r3, [pc, #76]	; (800b450 <gos_taskDelete+0x224>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d108      	bne.n	800b41a <gos_taskDelete+0x1ee>
 800b408:	4b12      	ldr	r3, [pc, #72]	; (800b454 <gos_taskDelete+0x228>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f383 8810 	msr	PRIMASK, r3
 800b410:	b662      	cpsie	i
 800b412:	f3bf 8f4f 	dsb	sy
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	4b0f      	ldr	r3, [pc, #60]	; (800b458 <gos_taskDelete+0x22c>)
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d005      	beq.n	800b42e <gos_taskDelete+0x202>
 800b422:	4b0d      	ldr	r3, [pc, #52]	; (800b458 <gos_taskDelete+0x22c>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	3b01      	subs	r3, #1
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	4b0b      	ldr	r3, [pc, #44]	; (800b458 <gos_taskDelete+0x22c>)
 800b42c:	701a      	strb	r2, [r3, #0]

    if (taskDeleteResult == GOS_SUCCESS)
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	2b55      	cmp	r3, #85	; 0x55
 800b432:	d107      	bne.n	800b444 <gos_taskDelete+0x218>
    {
        if (currentTaskIndex == taskIndex)
 800b434:	4b09      	ldr	r3, [pc, #36]	; (800b45c <gos_taskDelete+0x230>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d102      	bne.n	800b444 <gos_taskDelete+0x218>
        {
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 800b43e:	2009      	movs	r0, #9
 800b440:	f7fe fd94 	bl	8009f6c <gos_kernelReschedule>
    else
    {
        // Nothing to do.
    }

    return taskDeleteResult;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20002bb3 	.word	0x20002bb3
 800b454:	20002bb4 	.word	0x20002bb4
 800b458:	20002bb1 	.word	0x20002bb1
 800b45c:	20002bb8 	.word	0x20002bb8
 800b460:	200004d4 	.word	0x200004d4
 800b464:	20002bb2 	.word	0x20002bb2
 800b468:	20002bdc 	.word	0x20002bdc
 800b46c:	0801372c 	.word	0x0801372c
 800b470:	080146ac 	.word	0x080146ac

0800b474 <gos_taskSetPriority>:

/*
 * Function: gos_taskSetPriority
 */
GOS_INLINE gos_result_t gos_taskSetPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af02      	add	r7, sp, #8
 800b47a:	4603      	mov	r3, r0
 800b47c:	460a      	mov	r2, r1
 800b47e:	80fb      	strh	r3, [r7, #6]
 800b480:	4613      	mov	r3, r2
 800b482:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 800b484:	23ae      	movs	r3, #174	; 0xae
 800b486:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 800b488:	2300      	movs	r3, #0
 800b48a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b48c:	4b53      	ldr	r3, [pc, #332]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d108      	bne.n	800b4a6 <gos_taskSetPriority+0x32>
 800b494:	b672      	cpsid	i
 800b496:	f3ef 8310 	mrs	r3, PRIMASK
 800b49a:	4a51      	ldr	r2, [pc, #324]	; (800b5e0 <gos_taskSetPriority+0x16c>)
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	f3bf 8f6f 	isb	sy
 800b4a6:	4b4d      	ldr	r3, [pc, #308]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	4b4b      	ldr	r3, [pc, #300]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b4b0:	701a      	strb	r2, [r3, #0]
 800b4b2:	4b4c      	ldr	r3, [pc, #304]	; (800b5e4 <gos_taskSetPriority+0x170>)
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	b2da      	uxtb	r2, r3
 800b4ba:	4b4a      	ldr	r3, [pc, #296]	; (800b5e4 <gos_taskSetPriority+0x170>)
 800b4bc:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800b4be:	88fb      	ldrh	r3, [r7, #6]
 800b4c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4c4:	d963      	bls.n	800b58e <gos_taskSetPriority+0x11a>
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	f248 022f 	movw	r2, #32815	; 0x802f
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d85e      	bhi.n	800b58e <gos_taskSetPriority+0x11a>
 800b4d0:	797b      	ldrb	r3, [r7, #5]
 800b4d2:	2bff      	cmp	r3, #255	; 0xff
 800b4d4:	d05b      	beq.n	800b58e <gos_taskSetPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b4d6:	88fb      	ldrh	r3, [r7, #6]
 800b4d8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b4dc:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800b4de:	4b42      	ldr	r3, [pc, #264]	; (800b5e8 <gos_taskSetPriority+0x174>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a42      	ldr	r2, [pc, #264]	; (800b5ec <gos_taskSetPriority+0x178>)
 800b4e4:	216a      	movs	r1, #106	; 0x6a
 800b4e6:	fb01 f303 	mul.w	r3, r1, r3
 800b4ea:	4413      	add	r3, r2
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d103      	bne.n	800b500 <gos_taskSetPriority+0x8c>
            inIsr > 0)
 800b4f8:	4b3d      	ldr	r3, [pc, #244]	; (800b5f0 <gos_taskSetPriority+0x17c>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00b      	beq.n	800b518 <gos_taskSetPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 800b500:	4a3a      	ldr	r2, [pc, #232]	; (800b5ec <gos_taskSetPriority+0x178>)
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	216a      	movs	r1, #106	; 0x6a
 800b506:	fb01 f303 	mul.w	r3, r1, r3
 800b50a:	4413      	add	r3, r2
 800b50c:	3306      	adds	r3, #6
 800b50e:	797a      	ldrb	r2, [r7, #5]
 800b510:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 800b512:	2355      	movs	r3, #85	; 0x55
 800b514:	73fb      	strb	r3, [r7, #15]
 800b516:	e03a      	b.n	800b58e <gos_taskSetPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 800b518:	4b30      	ldr	r3, [pc, #192]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d005      	beq.n	800b52c <gos_taskSetPriority+0xb8>
 800b520:	4b2e      	ldr	r3, [pc, #184]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	3b01      	subs	r3, #1
 800b526:	b2da      	uxtb	r2, r3
 800b528:	4b2c      	ldr	r3, [pc, #176]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	4b2b      	ldr	r3, [pc, #172]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d108      	bne.n	800b546 <gos_taskSetPriority+0xd2>
 800b534:	4b2a      	ldr	r3, [pc, #168]	; (800b5e0 <gos_taskSetPriority+0x16c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f383 8810 	msr	PRIMASK, r3
 800b53c:	b662      	cpsie	i
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	4b27      	ldr	r3, [pc, #156]	; (800b5e4 <gos_taskSetPriority+0x170>)
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d005      	beq.n	800b55a <gos_taskSetPriority+0xe6>
 800b54e:	4b25      	ldr	r3, [pc, #148]	; (800b5e4 <gos_taskSetPriority+0x170>)
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	3b01      	subs	r3, #1
 800b554:	b2da      	uxtb	r2, r3
 800b556:	4b23      	ldr	r3, [pc, #140]	; (800b5e4 <gos_taskSetPriority+0x170>)
 800b558:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800b55a:	4b23      	ldr	r3, [pc, #140]	; (800b5e8 <gos_taskSetPriority+0x174>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	226a      	movs	r2, #106	; 0x6a
 800b560:	fb02 f303 	mul.w	r3, r2, r3
 800b564:	3308      	adds	r3, #8
 800b566:	4a21      	ldr	r2, [pc, #132]	; (800b5ec <gos_taskSetPriority+0x178>)
 800b568:	4413      	add	r3, r2
 800b56a:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	216a      	movs	r1, #106	; 0x6a
 800b570:	fb01 f202 	mul.w	r2, r1, r2
 800b574:	3208      	adds	r2, #8
 800b576:	491d      	ldr	r1, [pc, #116]	; (800b5ec <gos_taskSetPriority+0x178>)
 800b578:	440a      	add	r2, r1
 800b57a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 800b57c:	9201      	str	r2, [sp, #4]
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	4b1c      	ldr	r3, [pc, #112]	; (800b5f4 <gos_taskSetPriority+0x180>)
 800b582:	f240 22eb 	movw	r2, #747	; 0x2eb
 800b586:	491c      	ldr	r1, [pc, #112]	; (800b5f8 <gos_taskSetPriority+0x184>)
 800b588:	2034      	movs	r0, #52	; 0x34
 800b58a:	f000 fe91 	bl	800c2b0 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 800b58e:	4b13      	ldr	r3, [pc, #76]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d005      	beq.n	800b5a2 <gos_taskSetPriority+0x12e>
 800b596:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	4b0f      	ldr	r3, [pc, #60]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	4b0e      	ldr	r3, [pc, #56]	; (800b5dc <gos_taskSetPriority+0x168>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d108      	bne.n	800b5bc <gos_taskSetPriority+0x148>
 800b5aa:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <gos_taskSetPriority+0x16c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f383 8810 	msr	PRIMASK, r3
 800b5b2:	b662      	cpsie	i
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	4b09      	ldr	r3, [pc, #36]	; (800b5e4 <gos_taskSetPriority+0x170>)
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d005      	beq.n	800b5d0 <gos_taskSetPriority+0x15c>
 800b5c4:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <gos_taskSetPriority+0x170>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	b2da      	uxtb	r2, r3
 800b5cc:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <gos_taskSetPriority+0x170>)
 800b5ce:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	20002bb3 	.word	0x20002bb3
 800b5e0:	20002bb4 	.word	0x20002bb4
 800b5e4:	20002bb1 	.word	0x20002bb1
 800b5e8:	20002bb8 	.word	0x20002bb8
 800b5ec:	200004d4 	.word	0x200004d4
 800b5f0:	20002bb2 	.word	0x20002bb2
 800b5f4:	08013754 	.word	0x08013754
 800b5f8:	080146bc 	.word	0x080146bc

0800b5fc <gos_taskSetOriginalPriority>:

/*
 * Function: gos_taskSetOriginalPriority
 */
GOS_INLINE gos_result_t gos_taskSetOriginalPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af02      	add	r7, sp, #8
 800b602:	4603      	mov	r3, r0
 800b604:	460a      	mov	r2, r1
 800b606:	80fb      	strh	r3, [r7, #6]
 800b608:	4613      	mov	r3, r2
 800b60a:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 800b60c:	23ae      	movs	r3, #174	; 0xae
 800b60e:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 800b610:	2300      	movs	r3, #0
 800b612:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b614:	4b53      	ldr	r3, [pc, #332]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d108      	bne.n	800b62e <gos_taskSetOriginalPriority+0x32>
 800b61c:	b672      	cpsid	i
 800b61e:	f3ef 8310 	mrs	r3, PRIMASK
 800b622:	4a51      	ldr	r2, [pc, #324]	; (800b768 <gos_taskSetOriginalPriority+0x16c>)
 800b624:	6013      	str	r3, [r2, #0]
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	4b4d      	ldr	r3, [pc, #308]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	3301      	adds	r3, #1
 800b634:	b2da      	uxtb	r2, r3
 800b636:	4b4b      	ldr	r3, [pc, #300]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b638:	701a      	strb	r2, [r3, #0]
 800b63a:	4b4c      	ldr	r3, [pc, #304]	; (800b76c <gos_taskSetOriginalPriority+0x170>)
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	3301      	adds	r3, #1
 800b640:	b2da      	uxtb	r2, r3
 800b642:	4b4a      	ldr	r3, [pc, #296]	; (800b76c <gos_taskSetOriginalPriority+0x170>)
 800b644:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800b646:	88fb      	ldrh	r3, [r7, #6]
 800b648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b64c:	d963      	bls.n	800b716 <gos_taskSetOriginalPriority+0x11a>
 800b64e:	88fb      	ldrh	r3, [r7, #6]
 800b650:	f248 022f 	movw	r2, #32815	; 0x802f
 800b654:	4293      	cmp	r3, r2
 800b656:	d85e      	bhi.n	800b716 <gos_taskSetOriginalPriority+0x11a>
 800b658:	797b      	ldrb	r3, [r7, #5]
 800b65a:	2bff      	cmp	r3, #255	; 0xff
 800b65c:	d05b      	beq.n	800b716 <gos_taskSetOriginalPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b65e:	88fb      	ldrh	r3, [r7, #6]
 800b660:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b664:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800b666:	4b42      	ldr	r3, [pc, #264]	; (800b770 <gos_taskSetOriginalPriority+0x174>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a42      	ldr	r2, [pc, #264]	; (800b774 <gos_taskSetOriginalPriority+0x178>)
 800b66c:	216a      	movs	r1, #106	; 0x6a
 800b66e:	fb01 f303 	mul.w	r3, r1, r3
 800b672:	4413      	add	r3, r2
 800b674:	3308      	adds	r3, #8
 800b676:	881b      	ldrh	r3, [r3, #0]
 800b678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d103      	bne.n	800b688 <gos_taskSetOriginalPriority+0x8c>
            inIsr > 0)
 800b680:	4b3d      	ldr	r3, [pc, #244]	; (800b778 <gos_taskSetOriginalPriority+0x17c>)
 800b682:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00b      	beq.n	800b6a0 <gos_taskSetOriginalPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 800b688:	4a3a      	ldr	r2, [pc, #232]	; (800b774 <gos_taskSetOriginalPriority+0x178>)
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	216a      	movs	r1, #106	; 0x6a
 800b68e:	fb01 f303 	mul.w	r3, r1, r3
 800b692:	4413      	add	r3, r2
 800b694:	3307      	adds	r3, #7
 800b696:	797a      	ldrb	r2, [r7, #5]
 800b698:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 800b69a:	2355      	movs	r3, #85	; 0x55
 800b69c:	73fb      	strb	r3, [r7, #15]
 800b69e:	e03a      	b.n	800b716 <gos_taskSetOriginalPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 800b6a0:	4b30      	ldr	r3, [pc, #192]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d005      	beq.n	800b6b4 <gos_taskSetOriginalPriority+0xb8>
 800b6a8:	4b2e      	ldr	r3, [pc, #184]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	4b2c      	ldr	r3, [pc, #176]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b6b2:	701a      	strb	r2, [r3, #0]
 800b6b4:	4b2b      	ldr	r3, [pc, #172]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d108      	bne.n	800b6ce <gos_taskSetOriginalPriority+0xd2>
 800b6bc:	4b2a      	ldr	r3, [pc, #168]	; (800b768 <gos_taskSetOriginalPriority+0x16c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f383 8810 	msr	PRIMASK, r3
 800b6c4:	b662      	cpsie	i
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	4b27      	ldr	r3, [pc, #156]	; (800b76c <gos_taskSetOriginalPriority+0x170>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d005      	beq.n	800b6e2 <gos_taskSetOriginalPriority+0xe6>
 800b6d6:	4b25      	ldr	r3, [pc, #148]	; (800b76c <gos_taskSetOriginalPriority+0x170>)
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	4b23      	ldr	r3, [pc, #140]	; (800b76c <gos_taskSetOriginalPriority+0x170>)
 800b6e0:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800b6e2:	4b23      	ldr	r3, [pc, #140]	; (800b770 <gos_taskSetOriginalPriority+0x174>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	226a      	movs	r2, #106	; 0x6a
 800b6e8:	fb02 f303 	mul.w	r3, r2, r3
 800b6ec:	3308      	adds	r3, #8
 800b6ee:	4a21      	ldr	r2, [pc, #132]	; (800b774 <gos_taskSetOriginalPriority+0x178>)
 800b6f0:	4413      	add	r3, r2
 800b6f2:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	216a      	movs	r1, #106	; 0x6a
 800b6f8:	fb01 f202 	mul.w	r2, r1, r2
 800b6fc:	3208      	adds	r2, #8
 800b6fe:	491d      	ldr	r1, [pc, #116]	; (800b774 <gos_taskSetOriginalPriority+0x178>)
 800b700:	440a      	add	r2, r1
 800b702:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 800b704:	9201      	str	r2, [sp, #4]
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	4b1c      	ldr	r3, [pc, #112]	; (800b77c <gos_taskSetOriginalPriority+0x180>)
 800b70a:	f240 3219 	movw	r2, #793	; 0x319
 800b70e:	491c      	ldr	r1, [pc, #112]	; (800b780 <gos_taskSetOriginalPriority+0x184>)
 800b710:	2034      	movs	r0, #52	; 0x34
 800b712:	f000 fdcd 	bl	800c2b0 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 800b716:	4b13      	ldr	r3, [pc, #76]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d005      	beq.n	800b72a <gos_taskSetOriginalPriority+0x12e>
 800b71e:	4b11      	ldr	r3, [pc, #68]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	3b01      	subs	r3, #1
 800b724:	b2da      	uxtb	r2, r3
 800b726:	4b0f      	ldr	r3, [pc, #60]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b728:	701a      	strb	r2, [r3, #0]
 800b72a:	4b0e      	ldr	r3, [pc, #56]	; (800b764 <gos_taskSetOriginalPriority+0x168>)
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d108      	bne.n	800b744 <gos_taskSetOriginalPriority+0x148>
 800b732:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <gos_taskSetOriginalPriority+0x16c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f383 8810 	msr	PRIMASK, r3
 800b73a:	b662      	cpsie	i
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	4b09      	ldr	r3, [pc, #36]	; (800b76c <gos_taskSetOriginalPriority+0x170>)
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d005      	beq.n	800b758 <gos_taskSetOriginalPriority+0x15c>
 800b74c:	4b07      	ldr	r3, [pc, #28]	; (800b76c <gos_taskSetOriginalPriority+0x170>)
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	3b01      	subs	r3, #1
 800b752:	b2da      	uxtb	r2, r3
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <gos_taskSetOriginalPriority+0x170>)
 800b756:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 800b758:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20002bb3 	.word	0x20002bb3
 800b768:	20002bb4 	.word	0x20002bb4
 800b76c:	20002bb1 	.word	0x20002bb1
 800b770:	20002bb8 	.word	0x20002bb8
 800b774:	200004d4 	.word	0x200004d4
 800b778:	20002bb2 	.word	0x20002bb2
 800b77c:	08013754 	.word	0x08013754
 800b780:	080146d0 	.word	0x080146d0

0800b784 <gos_taskGetPriority>:

/*
 * Function: gos_taskGetPriority
 */
gos_result_t gos_taskGetPriority (gos_tid_t taskId, gos_taskPrio_t* taskPriority)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	6039      	str	r1, [r7, #0]
 800b78e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 800b790:	23ae      	movs	r3, #174	; 0xae
 800b792:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 800b794:	2300      	movs	r3, #0
 800b796:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b798:	4b2e      	ldr	r3, [pc, #184]	; (800b854 <gos_taskGetPriority+0xd0>)
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d108      	bne.n	800b7b2 <gos_taskGetPriority+0x2e>
 800b7a0:	b672      	cpsid	i
 800b7a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b7a6:	4a2c      	ldr	r2, [pc, #176]	; (800b858 <gos_taskGetPriority+0xd4>)
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	4b28      	ldr	r3, [pc, #160]	; (800b854 <gos_taskGetPriority+0xd0>)
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	b2da      	uxtb	r2, r3
 800b7ba:	4b26      	ldr	r3, [pc, #152]	; (800b854 <gos_taskGetPriority+0xd0>)
 800b7bc:	701a      	strb	r2, [r3, #0]
 800b7be:	4b27      	ldr	r3, [pc, #156]	; (800b85c <gos_taskGetPriority+0xd8>)
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	4b25      	ldr	r3, [pc, #148]	; (800b85c <gos_taskGetPriority+0xd8>)
 800b7c8:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800b7ca:	88fb      	ldrh	r3, [r7, #6]
 800b7cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7d0:	d917      	bls.n	800b802 <gos_taskGetPriority+0x7e>
 800b7d2:	88fb      	ldrh	r3, [r7, #6]
 800b7d4:	f248 022f 	movw	r2, #32815	; 0x802f
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d812      	bhi.n	800b802 <gos_taskGetPriority+0x7e>
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00f      	beq.n	800b802 <gos_taskGetPriority+0x7e>
        taskPriority != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b7e2:	88fb      	ldrh	r3, [r7, #6]
 800b7e4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b7e8:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 800b7ea:	4a1d      	ldr	r2, [pc, #116]	; (800b860 <gos_taskGetPriority+0xdc>)
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	216a      	movs	r1, #106	; 0x6a
 800b7f0:	fb01 f303 	mul.w	r3, r1, r3
 800b7f4:	4413      	add	r3, r2
 800b7f6:	3306      	adds	r3, #6
 800b7f8:	781a      	ldrb	r2, [r3, #0]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 800b7fe:	2355      	movs	r3, #85	; 0x55
 800b800:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or task priority is NULL.
    }
    GOS_ATOMIC_EXIT
 800b802:	4b14      	ldr	r3, [pc, #80]	; (800b854 <gos_taskGetPriority+0xd0>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d005      	beq.n	800b816 <gos_taskGetPriority+0x92>
 800b80a:	4b12      	ldr	r3, [pc, #72]	; (800b854 <gos_taskGetPriority+0xd0>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	3b01      	subs	r3, #1
 800b810:	b2da      	uxtb	r2, r3
 800b812:	4b10      	ldr	r3, [pc, #64]	; (800b854 <gos_taskGetPriority+0xd0>)
 800b814:	701a      	strb	r2, [r3, #0]
 800b816:	4b0f      	ldr	r3, [pc, #60]	; (800b854 <gos_taskGetPriority+0xd0>)
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d108      	bne.n	800b830 <gos_taskGetPriority+0xac>
 800b81e:	4b0e      	ldr	r3, [pc, #56]	; (800b858 <gos_taskGetPriority+0xd4>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f383 8810 	msr	PRIMASK, r3
 800b826:	b662      	cpsie	i
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <gos_taskGetPriority+0xd8>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d005      	beq.n	800b844 <gos_taskGetPriority+0xc0>
 800b838:	4b08      	ldr	r3, [pc, #32]	; (800b85c <gos_taskGetPriority+0xd8>)
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	4b06      	ldr	r3, [pc, #24]	; (800b85c <gos_taskGetPriority+0xd8>)
 800b842:	701a      	strb	r2, [r3, #0]

    return taskGetPriorityResult;
 800b844:	7bfb      	ldrb	r3, [r7, #15]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3714      	adds	r7, #20
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	20002bb3 	.word	0x20002bb3
 800b858:	20002bb4 	.word	0x20002bb4
 800b85c:	20002bb1 	.word	0x20002bb1
 800b860:	200004d4 	.word	0x200004d4

0800b864 <gos_taskAddPrivilege>:

/*
 * Function: gos_taskAddPrivilege
 */
GOS_INLINE gos_result_t gos_taskAddPrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	4603      	mov	r3, r0
 800b86c:	460a      	mov	r2, r1
 800b86e:	80fb      	strh	r3, [r7, #6]
 800b870:	4613      	mov	r3, r2
 800b872:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 800b874:	23ae      	movs	r3, #174	; 0xae
 800b876:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 800b878:	2300      	movs	r3, #0
 800b87a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b87c:	4b31      	ldr	r3, [pc, #196]	; (800b944 <gos_taskAddPrivilege+0xe0>)
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d108      	bne.n	800b896 <gos_taskAddPrivilege+0x32>
 800b884:	b672      	cpsid	i
 800b886:	f3ef 8310 	mrs	r3, PRIMASK
 800b88a:	4a2f      	ldr	r2, [pc, #188]	; (800b948 <gos_taskAddPrivilege+0xe4>)
 800b88c:	6013      	str	r3, [r2, #0]
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	4b2b      	ldr	r3, [pc, #172]	; (800b944 <gos_taskAddPrivilege+0xe0>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	3301      	adds	r3, #1
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	4b29      	ldr	r3, [pc, #164]	; (800b944 <gos_taskAddPrivilege+0xe0>)
 800b8a0:	701a      	strb	r2, [r3, #0]
 800b8a2:	4b2a      	ldr	r3, [pc, #168]	; (800b94c <gos_taskAddPrivilege+0xe8>)
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	4b28      	ldr	r3, [pc, #160]	; (800b94c <gos_taskAddPrivilege+0xe8>)
 800b8ac:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800b8ae:	88fb      	ldrh	r3, [r7, #6]
 800b8b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8b4:	d91e      	bls.n	800b8f4 <gos_taskAddPrivilege+0x90>
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	f248 022f 	movw	r2, #32815	; 0x802f
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d819      	bhi.n	800b8f4 <gos_taskAddPrivilege+0x90>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b8c0:	88fb      	ldrh	r3, [r7, #6]
 800b8c2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b8c6:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 800b8c8:	4a21      	ldr	r2, [pc, #132]	; (800b950 <gos_taskAddPrivilege+0xec>)
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	216a      	movs	r1, #106	; 0x6a
 800b8ce:	fb01 f303 	mul.w	r3, r1, r3
 800b8d2:	4413      	add	r3, r2
 800b8d4:	3308      	adds	r3, #8
 800b8d6:	881a      	ldrh	r2, [r3, #0]
 800b8d8:	88bb      	ldrh	r3, [r7, #4]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	b298      	uxth	r0, r3
 800b8de:	4a1c      	ldr	r2, [pc, #112]	; (800b950 <gos_taskAddPrivilege+0xec>)
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	216a      	movs	r1, #106	; 0x6a
 800b8e4:	fb01 f303 	mul.w	r3, r1, r3
 800b8e8:	4413      	add	r3, r2
 800b8ea:	3308      	adds	r3, #8
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 800b8f0:	2355      	movs	r3, #85	; 0x55
 800b8f2:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800b8f4:	4b13      	ldr	r3, [pc, #76]	; (800b944 <gos_taskAddPrivilege+0xe0>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d005      	beq.n	800b908 <gos_taskAddPrivilege+0xa4>
 800b8fc:	4b11      	ldr	r3, [pc, #68]	; (800b944 <gos_taskAddPrivilege+0xe0>)
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	3b01      	subs	r3, #1
 800b902:	b2da      	uxtb	r2, r3
 800b904:	4b0f      	ldr	r3, [pc, #60]	; (800b944 <gos_taskAddPrivilege+0xe0>)
 800b906:	701a      	strb	r2, [r3, #0]
 800b908:	4b0e      	ldr	r3, [pc, #56]	; (800b944 <gos_taskAddPrivilege+0xe0>)
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d108      	bne.n	800b922 <gos_taskAddPrivilege+0xbe>
 800b910:	4b0d      	ldr	r3, [pc, #52]	; (800b948 <gos_taskAddPrivilege+0xe4>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f383 8810 	msr	PRIMASK, r3
 800b918:	b662      	cpsie	i
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <gos_taskAddPrivilege+0xe8>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d005      	beq.n	800b936 <gos_taskAddPrivilege+0xd2>
 800b92a:	4b08      	ldr	r3, [pc, #32]	; (800b94c <gos_taskAddPrivilege+0xe8>)
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	3b01      	subs	r3, #1
 800b930:	b2da      	uxtb	r2, r3
 800b932:	4b06      	ldr	r3, [pc, #24]	; (800b94c <gos_taskAddPrivilege+0xe8>)
 800b934:	701a      	strb	r2, [r3, #0]

    return taskAddPrivilegeResult;
 800b936:	7bfb      	ldrb	r3, [r7, #15]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	20002bb3 	.word	0x20002bb3
 800b948:	20002bb4 	.word	0x20002bb4
 800b94c:	20002bb1 	.word	0x20002bb1
 800b950:	200004d4 	.word	0x200004d4

0800b954 <gos_taskRemovePrivilege>:

/*
 * Function: gos_taskRemovePrivilege
 */
GOS_INLINE gos_result_t gos_taskRemovePrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	4603      	mov	r3, r0
 800b95c:	460a      	mov	r2, r1
 800b95e:	80fb      	strh	r3, [r7, #6]
 800b960:	4613      	mov	r3, r2
 800b962:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 800b964:	23ae      	movs	r3, #174	; 0xae
 800b966:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 800b968:	2300      	movs	r3, #0
 800b96a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800b96c:	4b34      	ldr	r3, [pc, #208]	; (800ba40 <gos_taskRemovePrivilege+0xec>)
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d108      	bne.n	800b986 <gos_taskRemovePrivilege+0x32>
 800b974:	b672      	cpsid	i
 800b976:	f3ef 8310 	mrs	r3, PRIMASK
 800b97a:	4a32      	ldr	r2, [pc, #200]	; (800ba44 <gos_taskRemovePrivilege+0xf0>)
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	4b2e      	ldr	r3, [pc, #184]	; (800ba40 <gos_taskRemovePrivilege+0xec>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	3301      	adds	r3, #1
 800b98c:	b2da      	uxtb	r2, r3
 800b98e:	4b2c      	ldr	r3, [pc, #176]	; (800ba40 <gos_taskRemovePrivilege+0xec>)
 800b990:	701a      	strb	r2, [r3, #0]
 800b992:	4b2d      	ldr	r3, [pc, #180]	; (800ba48 <gos_taskRemovePrivilege+0xf4>)
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	3301      	adds	r3, #1
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	4b2b      	ldr	r3, [pc, #172]	; (800ba48 <gos_taskRemovePrivilege+0xf4>)
 800b99c:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800b99e:	88fb      	ldrh	r3, [r7, #6]
 800b9a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9a4:	d923      	bls.n	800b9ee <gos_taskRemovePrivilege+0x9a>
 800b9a6:	88fb      	ldrh	r3, [r7, #6]
 800b9a8:	f248 022f 	movw	r2, #32815	; 0x802f
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d81e      	bhi.n	800b9ee <gos_taskRemovePrivilege+0x9a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800b9b0:	88fb      	ldrh	r3, [r7, #6]
 800b9b2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b9b6:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 800b9b8:	4a24      	ldr	r2, [pc, #144]	; (800ba4c <gos_taskRemovePrivilege+0xf8>)
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	216a      	movs	r1, #106	; 0x6a
 800b9be:	fb01 f303 	mul.w	r3, r1, r3
 800b9c2:	4413      	add	r3, r2
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	b21a      	sxth	r2, r3
 800b9ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b9ce:	43db      	mvns	r3, r3
 800b9d0:	b21b      	sxth	r3, r3
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	b21b      	sxth	r3, r3
 800b9d6:	b298      	uxth	r0, r3
 800b9d8:	4a1c      	ldr	r2, [pc, #112]	; (800ba4c <gos_taskRemovePrivilege+0xf8>)
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	216a      	movs	r1, #106	; 0x6a
 800b9de:	fb01 f303 	mul.w	r3, r1, r3
 800b9e2:	4413      	add	r3, r2
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 800b9ea:	2355      	movs	r3, #85	; 0x55
 800b9ec:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800b9ee:	4b14      	ldr	r3, [pc, #80]	; (800ba40 <gos_taskRemovePrivilege+0xec>)
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d005      	beq.n	800ba02 <gos_taskRemovePrivilege+0xae>
 800b9f6:	4b12      	ldr	r3, [pc, #72]	; (800ba40 <gos_taskRemovePrivilege+0xec>)
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	4b10      	ldr	r3, [pc, #64]	; (800ba40 <gos_taskRemovePrivilege+0xec>)
 800ba00:	701a      	strb	r2, [r3, #0]
 800ba02:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <gos_taskRemovePrivilege+0xec>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d108      	bne.n	800ba1c <gos_taskRemovePrivilege+0xc8>
 800ba0a:	4b0e      	ldr	r3, [pc, #56]	; (800ba44 <gos_taskRemovePrivilege+0xf0>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f383 8810 	msr	PRIMASK, r3
 800ba12:	b662      	cpsie	i
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	4b0a      	ldr	r3, [pc, #40]	; (800ba48 <gos_taskRemovePrivilege+0xf4>)
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d005      	beq.n	800ba30 <gos_taskRemovePrivilege+0xdc>
 800ba24:	4b08      	ldr	r3, [pc, #32]	; (800ba48 <gos_taskRemovePrivilege+0xf4>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <gos_taskRemovePrivilege+0xf4>)
 800ba2e:	701a      	strb	r2, [r3, #0]

    return taskRemovePrivilegeResult;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	20002bb3 	.word	0x20002bb3
 800ba44:	20002bb4 	.word	0x20002bb4
 800ba48:	20002bb1 	.word	0x20002bb1
 800ba4c:	200004d4 	.word	0x200004d4

0800ba50 <gos_taskSetPrivileges>:

/*
 * Function: gos_taskSetPrivileges
 */
GOS_INLINE gos_result_t gos_taskSetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	4603      	mov	r3, r0
 800ba58:	460a      	mov	r2, r1
 800ba5a:	80fb      	strh	r3, [r7, #6]
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 800ba60:	23ae      	movs	r3, #174	; 0xae
 800ba62:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 800ba64:	2300      	movs	r3, #0
 800ba66:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800ba68:	4b2c      	ldr	r3, [pc, #176]	; (800bb1c <gos_taskSetPrivileges+0xcc>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d108      	bne.n	800ba82 <gos_taskSetPrivileges+0x32>
 800ba70:	b672      	cpsid	i
 800ba72:	f3ef 8310 	mrs	r3, PRIMASK
 800ba76:	4a2a      	ldr	r2, [pc, #168]	; (800bb20 <gos_taskSetPrivileges+0xd0>)
 800ba78:	6013      	str	r3, [r2, #0]
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	4b26      	ldr	r3, [pc, #152]	; (800bb1c <gos_taskSetPrivileges+0xcc>)
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	3301      	adds	r3, #1
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	4b24      	ldr	r3, [pc, #144]	; (800bb1c <gos_taskSetPrivileges+0xcc>)
 800ba8c:	701a      	strb	r2, [r3, #0]
 800ba8e:	4b25      	ldr	r3, [pc, #148]	; (800bb24 <gos_taskSetPrivileges+0xd4>)
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	3301      	adds	r3, #1
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	4b23      	ldr	r3, [pc, #140]	; (800bb24 <gos_taskSetPrivileges+0xd4>)
 800ba98:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800ba9a:	88fb      	ldrh	r3, [r7, #6]
 800ba9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800baa0:	d913      	bls.n	800baca <gos_taskSetPrivileges+0x7a>
 800baa2:	88fb      	ldrh	r3, [r7, #6]
 800baa4:	f248 022f 	movw	r2, #32815	; 0x802f
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d80e      	bhi.n	800baca <gos_taskSetPrivileges+0x7a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800baac:	88fb      	ldrh	r3, [r7, #6]
 800baae:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800bab2:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 800bab4:	4a1c      	ldr	r2, [pc, #112]	; (800bb28 <gos_taskSetPrivileges+0xd8>)
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	216a      	movs	r1, #106	; 0x6a
 800baba:	fb01 f303 	mul.w	r3, r1, r3
 800babe:	4413      	add	r3, r2
 800bac0:	3308      	adds	r3, #8
 800bac2:	88ba      	ldrh	r2, [r7, #4]
 800bac4:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 800bac6:	2355      	movs	r3, #85	; 0x55
 800bac8:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800baca:	4b14      	ldr	r3, [pc, #80]	; (800bb1c <gos_taskSetPrivileges+0xcc>)
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d005      	beq.n	800bade <gos_taskSetPrivileges+0x8e>
 800bad2:	4b12      	ldr	r3, [pc, #72]	; (800bb1c <gos_taskSetPrivileges+0xcc>)
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	3b01      	subs	r3, #1
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	4b10      	ldr	r3, [pc, #64]	; (800bb1c <gos_taskSetPrivileges+0xcc>)
 800badc:	701a      	strb	r2, [r3, #0]
 800bade:	4b0f      	ldr	r3, [pc, #60]	; (800bb1c <gos_taskSetPrivileges+0xcc>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d108      	bne.n	800baf8 <gos_taskSetPrivileges+0xa8>
 800bae6:	4b0e      	ldr	r3, [pc, #56]	; (800bb20 <gos_taskSetPrivileges+0xd0>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f383 8810 	msr	PRIMASK, r3
 800baee:	b662      	cpsie	i
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	f3bf 8f6f 	isb	sy
 800baf8:	4b0a      	ldr	r3, [pc, #40]	; (800bb24 <gos_taskSetPrivileges+0xd4>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d005      	beq.n	800bb0c <gos_taskSetPrivileges+0xbc>
 800bb00:	4b08      	ldr	r3, [pc, #32]	; (800bb24 <gos_taskSetPrivileges+0xd4>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	3b01      	subs	r3, #1
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	4b06      	ldr	r3, [pc, #24]	; (800bb24 <gos_taskSetPrivileges+0xd4>)
 800bb0a:	701a      	strb	r2, [r3, #0]

    return taskSetPrivilegesResult;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	20002bb3 	.word	0x20002bb3
 800bb20:	20002bb4 	.word	0x20002bb4
 800bb24:	20002bb1 	.word	0x20002bb1
 800bb28:	200004d4 	.word	0x200004d4

0800bb2c <gos_taskGetPrivileges>:

/*
 * Function: gos_taskGetPrivileges
 */
GOS_INLINE gos_result_t gos_taskGetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t* privileges)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	6039      	str	r1, [r7, #0]
 800bb36:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 800bb38:	23ae      	movs	r3, #174	; 0xae
 800bb3a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800bb40:	4b2e      	ldr	r3, [pc, #184]	; (800bbfc <gos_taskGetPrivileges+0xd0>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d108      	bne.n	800bb5a <gos_taskGetPrivileges+0x2e>
 800bb48:	b672      	cpsid	i
 800bb4a:	f3ef 8310 	mrs	r3, PRIMASK
 800bb4e:	4a2c      	ldr	r2, [pc, #176]	; (800bc00 <gos_taskGetPrivileges+0xd4>)
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	f3bf 8f4f 	dsb	sy
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	4b28      	ldr	r3, [pc, #160]	; (800bbfc <gos_taskGetPrivileges+0xd0>)
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	4b26      	ldr	r3, [pc, #152]	; (800bbfc <gos_taskGetPrivileges+0xd0>)
 800bb64:	701a      	strb	r2, [r3, #0]
 800bb66:	4b27      	ldr	r3, [pc, #156]	; (800bc04 <gos_taskGetPrivileges+0xd8>)
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	4b25      	ldr	r3, [pc, #148]	; (800bc04 <gos_taskGetPrivileges+0xd8>)
 800bb70:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800bb72:	88fb      	ldrh	r3, [r7, #6]
 800bb74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb78:	d917      	bls.n	800bbaa <gos_taskGetPrivileges+0x7e>
 800bb7a:	88fb      	ldrh	r3, [r7, #6]
 800bb7c:	f248 022f 	movw	r2, #32815	; 0x802f
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d812      	bhi.n	800bbaa <gos_taskGetPrivileges+0x7e>
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00f      	beq.n	800bbaa <gos_taskGetPrivileges+0x7e>
        privileges != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800bb8a:	88fb      	ldrh	r3, [r7, #6]
 800bb8c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800bb90:	60bb      	str	r3, [r7, #8]

        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 800bb92:	4a1d      	ldr	r2, [pc, #116]	; (800bc08 <gos_taskGetPrivileges+0xdc>)
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	216a      	movs	r1, #106	; 0x6a
 800bb98:	fb01 f303 	mul.w	r3, r1, r3
 800bb9c:	4413      	add	r3, r2
 800bb9e:	3308      	adds	r3, #8
 800bba0:	881a      	ldrh	r2, [r3, #0]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 800bba6:	2355      	movs	r3, #85	; 0x55
 800bba8:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or privileges is NULL pointer.
    }
    GOS_ATOMIC_EXIT
 800bbaa:	4b14      	ldr	r3, [pc, #80]	; (800bbfc <gos_taskGetPrivileges+0xd0>)
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d005      	beq.n	800bbbe <gos_taskGetPrivileges+0x92>
 800bbb2:	4b12      	ldr	r3, [pc, #72]	; (800bbfc <gos_taskGetPrivileges+0xd0>)
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	b2da      	uxtb	r2, r3
 800bbba:	4b10      	ldr	r3, [pc, #64]	; (800bbfc <gos_taskGetPrivileges+0xd0>)
 800bbbc:	701a      	strb	r2, [r3, #0]
 800bbbe:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <gos_taskGetPrivileges+0xd0>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d108      	bne.n	800bbd8 <gos_taskGetPrivileges+0xac>
 800bbc6:	4b0e      	ldr	r3, [pc, #56]	; (800bc00 <gos_taskGetPrivileges+0xd4>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f383 8810 	msr	PRIMASK, r3
 800bbce:	b662      	cpsie	i
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <gos_taskGetPrivileges+0xd8>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d005      	beq.n	800bbec <gos_taskGetPrivileges+0xc0>
 800bbe0:	4b08      	ldr	r3, [pc, #32]	; (800bc04 <gos_taskGetPrivileges+0xd8>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <gos_taskGetPrivileges+0xd8>)
 800bbea:	701a      	strb	r2, [r3, #0]

    return taskGetPrivilegesResult;
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
 800bbfa:	bf00      	nop
 800bbfc:	20002bb3 	.word	0x20002bb3
 800bc00:	20002bb4 	.word	0x20002bb4
 800bc04:	20002bb1 	.word	0x20002bb1
 800bc08:	200004d4 	.word	0x200004d4

0800bc0c <gos_taskGetId>:

/*
 * Function: gos_taskGetId
 */
gos_result_t gos_taskGetId (gos_taskName_t taskName, gos_tid_t* taskId)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskGetIdResult = GOS_ERROR;
 800bc16:	23ae      	movs	r3, #174	; 0xae
 800bc18:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 800bc1e:	2300      	movs	r3, #0
 800bc20:	60bb      	str	r3, [r7, #8]
 800bc22:	e01e      	b.n	800bc62 <gos_taskGetId+0x56>
    {
        if (strcmp(taskName, taskDescriptors[taskIndex].taskName) == 0u)
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	226a      	movs	r2, #106	; 0x6a
 800bc28:	fb02 f303 	mul.w	r3, r2, r3
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	4a12      	ldr	r2, [pc, #72]	; (800bc78 <gos_taskGetId+0x6c>)
 800bc30:	4413      	add	r3, r2
 800bc32:	3302      	adds	r3, #2
 800bc34:	4619      	mov	r1, r3
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7f4 faea 	bl	8000210 <strcmp>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10c      	bne.n	800bc5c <gos_taskGetId+0x50>
        {
            *taskId = taskDescriptors[taskIndex].taskId;
 800bc42:	4a0d      	ldr	r2, [pc, #52]	; (800bc78 <gos_taskGetId+0x6c>)
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	216a      	movs	r1, #106	; 0x6a
 800bc48:	fb01 f303 	mul.w	r3, r1, r3
 800bc4c:	4413      	add	r3, r2
 800bc4e:	332a      	adds	r3, #42	; 0x2a
 800bc50:	881a      	ldrh	r2, [r3, #0]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	801a      	strh	r2, [r3, #0]
            taskGetIdResult = GOS_SUCCESS;
 800bc56:	2355      	movs	r3, #85	; 0x55
 800bc58:	73fb      	strb	r3, [r7, #15]
            break;
 800bc5a:	e008      	b.n	800bc6e <gos_taskGetId+0x62>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	60bb      	str	r3, [r7, #8]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b2f      	cmp	r3, #47	; 0x2f
 800bc66:	d802      	bhi.n	800bc6e <gos_taskGetId+0x62>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1da      	bne.n	800bc24 <gos_taskGetId+0x18>
        {
            // Continue.
        }
    }

    return taskGetIdResult;
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	200004d4 	.word	0x200004d4

0800bc7c <gos_taskGetCurrentId>:

/*
 * Function: gos_taskGetCurrentId
 */
GOS_INLINE gos_result_t gos_taskGetCurrentId (gos_tid_t* taskId)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 800bc84:	23ae      	movs	r3, #174	; 0xae
 800bc86:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800bc88:	4b26      	ldr	r3, [pc, #152]	; (800bd24 <gos_taskGetCurrentId+0xa8>)
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d108      	bne.n	800bca2 <gos_taskGetCurrentId+0x26>
 800bc90:	b672      	cpsid	i
 800bc92:	f3ef 8310 	mrs	r3, PRIMASK
 800bc96:	4a24      	ldr	r2, [pc, #144]	; (800bd28 <gos_taskGetCurrentId+0xac>)
 800bc98:	6013      	str	r3, [r2, #0]
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	4b20      	ldr	r3, [pc, #128]	; (800bd24 <gos_taskGetCurrentId+0xa8>)
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	3301      	adds	r3, #1
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	4b1e      	ldr	r3, [pc, #120]	; (800bd24 <gos_taskGetCurrentId+0xa8>)
 800bcac:	701a      	strb	r2, [r3, #0]
 800bcae:	4b1f      	ldr	r3, [pc, #124]	; (800bd2c <gos_taskGetCurrentId+0xb0>)
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	b2da      	uxtb	r2, r3
 800bcb6:	4b1d      	ldr	r3, [pc, #116]	; (800bd2c <gos_taskGetCurrentId+0xb0>)
 800bcb8:	701a      	strb	r2, [r3, #0]
    if (taskId != NULL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d009      	beq.n	800bcd4 <gos_taskGetCurrentId+0x58>
    {
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 800bcc0:	4b1b      	ldr	r3, [pc, #108]	; (800bd30 <gos_taskGetCurrentId+0xb4>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 800bcd0:	2355      	movs	r3, #85	; 0x55
 800bcd2:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID pointer is NULL.
    }
    GOS_ATOMIC_EXIT
 800bcd4:	4b13      	ldr	r3, [pc, #76]	; (800bd24 <gos_taskGetCurrentId+0xa8>)
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d005      	beq.n	800bce8 <gos_taskGetCurrentId+0x6c>
 800bcdc:	4b11      	ldr	r3, [pc, #68]	; (800bd24 <gos_taskGetCurrentId+0xa8>)
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	3b01      	subs	r3, #1
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	4b0f      	ldr	r3, [pc, #60]	; (800bd24 <gos_taskGetCurrentId+0xa8>)
 800bce6:	701a      	strb	r2, [r3, #0]
 800bce8:	4b0e      	ldr	r3, [pc, #56]	; (800bd24 <gos_taskGetCurrentId+0xa8>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d108      	bne.n	800bd02 <gos_taskGetCurrentId+0x86>
 800bcf0:	4b0d      	ldr	r3, [pc, #52]	; (800bd28 <gos_taskGetCurrentId+0xac>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f383 8810 	msr	PRIMASK, r3
 800bcf8:	b662      	cpsie	i
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	4b0a      	ldr	r3, [pc, #40]	; (800bd2c <gos_taskGetCurrentId+0xb0>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d005      	beq.n	800bd16 <gos_taskGetCurrentId+0x9a>
 800bd0a:	4b08      	ldr	r3, [pc, #32]	; (800bd2c <gos_taskGetCurrentId+0xb0>)
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	3b01      	subs	r3, #1
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	4b06      	ldr	r3, [pc, #24]	; (800bd2c <gos_taskGetCurrentId+0xb0>)
 800bd14:	701a      	strb	r2, [r3, #0]

    return taskGetCurrentIdResult;
 800bd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	20002bb3 	.word	0x20002bb3
 800bd28:	20002bb4 	.word	0x20002bb4
 800bd2c:	20002bb1 	.word	0x20002bb1
 800bd30:	20002bb8 	.word	0x20002bb8

0800bd34 <gos_taskGetData>:

/*
 * Function: gos_taskGetData
 */
gos_result_t gos_taskGetData (gos_tid_t taskId, gos_taskDescriptor_t* taskData)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	6039      	str	r1, [r7, #0]
 800bd3e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 800bd40:	23ae      	movs	r3, #174	; 0xae
 800bd42:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800bd44:	2300      	movs	r3, #0
 800bd46:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800bd48:	4b2d      	ldr	r3, [pc, #180]	; (800be00 <gos_taskGetData+0xcc>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d108      	bne.n	800bd62 <gos_taskGetData+0x2e>
 800bd50:	b672      	cpsid	i
 800bd52:	f3ef 8310 	mrs	r3, PRIMASK
 800bd56:	4a2b      	ldr	r2, [pc, #172]	; (800be04 <gos_taskGetData+0xd0>)
 800bd58:	6013      	str	r3, [r2, #0]
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	f3bf 8f6f 	isb	sy
 800bd62:	4b27      	ldr	r3, [pc, #156]	; (800be00 <gos_taskGetData+0xcc>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	3301      	adds	r3, #1
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	4b25      	ldr	r3, [pc, #148]	; (800be00 <gos_taskGetData+0xcc>)
 800bd6c:	701a      	strb	r2, [r3, #0]
 800bd6e:	4b26      	ldr	r3, [pc, #152]	; (800be08 <gos_taskGetData+0xd4>)
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	3301      	adds	r3, #1
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	4b24      	ldr	r3, [pc, #144]	; (800be08 <gos_taskGetData+0xd4>)
 800bd78:	701a      	strb	r2, [r3, #0]
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800bd7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	da18      	bge.n	800bdb4 <gos_taskGetData+0x80>
 800bd82:	88fb      	ldrh	r3, [r7, #6]
 800bd84:	f248 022f 	movw	r2, #32815	; 0x802f
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d813      	bhi.n	800bdb4 <gos_taskGetData+0x80>
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d010      	beq.n	800bdb4 <gos_taskGetData+0x80>
        taskData != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800bd92:	88fb      	ldrh	r3, [r7, #6]
 800bd94:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800bd98:	60bb      	str	r3, [r7, #8]

        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	226a      	movs	r2, #106	; 0x6a
 800bd9e:	fb02 f303 	mul.w	r3, r2, r3
 800bda2:	4a1a      	ldr	r2, [pc, #104]	; (800be0c <gos_taskGetData+0xd8>)
 800bda4:	4413      	add	r3, r2
 800bda6:	226a      	movs	r2, #106	; 0x6a
 800bda8:	4619      	mov	r1, r3
 800bdaa:	6838      	ldr	r0, [r7, #0]
 800bdac:	f004 fd71 	bl	8010892 <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 800bdb0:	2355      	movs	r3, #85	; 0x55
 800bdb2:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 800bdb4:	4b12      	ldr	r3, [pc, #72]	; (800be00 <gos_taskGetData+0xcc>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d005      	beq.n	800bdc8 <gos_taskGetData+0x94>
 800bdbc:	4b10      	ldr	r3, [pc, #64]	; (800be00 <gos_taskGetData+0xcc>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	4b0e      	ldr	r3, [pc, #56]	; (800be00 <gos_taskGetData+0xcc>)
 800bdc6:	701a      	strb	r2, [r3, #0]
 800bdc8:	4b0d      	ldr	r3, [pc, #52]	; (800be00 <gos_taskGetData+0xcc>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d108      	bne.n	800bde2 <gos_taskGetData+0xae>
 800bdd0:	4b0c      	ldr	r3, [pc, #48]	; (800be04 <gos_taskGetData+0xd0>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f383 8810 	msr	PRIMASK, r3
 800bdd8:	b662      	cpsie	i
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	4b09      	ldr	r3, [pc, #36]	; (800be08 <gos_taskGetData+0xd4>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d005      	beq.n	800bdf6 <gos_taskGetData+0xc2>
 800bdea:	4b07      	ldr	r3, [pc, #28]	; (800be08 <gos_taskGetData+0xd4>)
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	4b05      	ldr	r3, [pc, #20]	; (800be08 <gos_taskGetData+0xd4>)
 800bdf4:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 800bdf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	20002bb3 	.word	0x20002bb3
 800be04:	20002bb4 	.word	0x20002bb4
 800be08:	20002bb1 	.word	0x20002bb1
 800be0c:	200004d4 	.word	0x200004d4

0800be10 <gos_taskGetDataByIndex>:

/*
 * Function: gos_taskGetDataByIndex
 */
gos_result_t gos_taskGetDataByIndex (u16_t taskIndex, gos_taskDescriptor_t* taskData)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	4603      	mov	r3, r0
 800be18:	6039      	str	r1, [r7, #0]
 800be1a:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 800be1c:	23ae      	movs	r3, #174	; 0xae
 800be1e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800be20:	4b2f      	ldr	r3, [pc, #188]	; (800bee0 <gos_taskGetDataByIndex+0xd0>)
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d108      	bne.n	800be3a <gos_taskGetDataByIndex+0x2a>
 800be28:	b672      	cpsid	i
 800be2a:	f3ef 8310 	mrs	r3, PRIMASK
 800be2e:	4a2d      	ldr	r2, [pc, #180]	; (800bee4 <gos_taskGetDataByIndex+0xd4>)
 800be30:	6013      	str	r3, [r2, #0]
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	4b29      	ldr	r3, [pc, #164]	; (800bee0 <gos_taskGetDataByIndex+0xd0>)
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	3301      	adds	r3, #1
 800be40:	b2da      	uxtb	r2, r3
 800be42:	4b27      	ldr	r3, [pc, #156]	; (800bee0 <gos_taskGetDataByIndex+0xd0>)
 800be44:	701a      	strb	r2, [r3, #0]
 800be46:	4b28      	ldr	r3, [pc, #160]	; (800bee8 <gos_taskGetDataByIndex+0xd8>)
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	3301      	adds	r3, #1
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	4b26      	ldr	r3, [pc, #152]	; (800bee8 <gos_taskGetDataByIndex+0xd8>)
 800be50:	701a      	strb	r2, [r3, #0]
    if (taskIndex < CFG_TASK_MAX_NUMBER &&
 800be52:	88fb      	ldrh	r3, [r7, #6]
 800be54:	2b2f      	cmp	r3, #47	; 0x2f
 800be56:	d81d      	bhi.n	800be94 <gos_taskGetDataByIndex+0x84>
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d01a      	beq.n	800be94 <gos_taskGetDataByIndex+0x84>
        taskData != NULL &&
        (taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_TASK_PRIVILEGE_KERNEL) == GOS_TASK_PRIVILEGE_KERNEL)
 800be5e:	4b23      	ldr	r3, [pc, #140]	; (800beec <gos_taskGetDataByIndex+0xdc>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a23      	ldr	r2, [pc, #140]	; (800bef0 <gos_taskGetDataByIndex+0xe0>)
 800be64:	216a      	movs	r1, #106	; 0x6a
 800be66:	fb01 f303 	mul.w	r3, r1, r3
 800be6a:	4413      	add	r3, r2
 800be6c:	3308      	adds	r3, #8
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        taskData != NULL &&
 800be74:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800be78:	d10c      	bne.n	800be94 <gos_taskGetDataByIndex+0x84>
    {
        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 800be7a:	88fb      	ldrh	r3, [r7, #6]
 800be7c:	226a      	movs	r2, #106	; 0x6a
 800be7e:	fb02 f303 	mul.w	r3, r2, r3
 800be82:	4a1b      	ldr	r2, [pc, #108]	; (800bef0 <gos_taskGetDataByIndex+0xe0>)
 800be84:	4413      	add	r3, r2
 800be86:	226a      	movs	r2, #106	; 0x6a
 800be88:	4619      	mov	r1, r3
 800be8a:	6838      	ldr	r0, [r7, #0]
 800be8c:	f004 fd01 	bl	8010892 <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 800be90:	2355      	movs	r3, #85	; 0x55
 800be92:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 800be94:	4b12      	ldr	r3, [pc, #72]	; (800bee0 <gos_taskGetDataByIndex+0xd0>)
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d005      	beq.n	800bea8 <gos_taskGetDataByIndex+0x98>
 800be9c:	4b10      	ldr	r3, [pc, #64]	; (800bee0 <gos_taskGetDataByIndex+0xd0>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	4b0e      	ldr	r3, [pc, #56]	; (800bee0 <gos_taskGetDataByIndex+0xd0>)
 800bea6:	701a      	strb	r2, [r3, #0]
 800bea8:	4b0d      	ldr	r3, [pc, #52]	; (800bee0 <gos_taskGetDataByIndex+0xd0>)
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d108      	bne.n	800bec2 <gos_taskGetDataByIndex+0xb2>
 800beb0:	4b0c      	ldr	r3, [pc, #48]	; (800bee4 <gos_taskGetDataByIndex+0xd4>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f383 8810 	msr	PRIMASK, r3
 800beb8:	b662      	cpsie	i
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <gos_taskGetDataByIndex+0xd8>)
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d005      	beq.n	800bed6 <gos_taskGetDataByIndex+0xc6>
 800beca:	4b07      	ldr	r3, [pc, #28]	; (800bee8 <gos_taskGetDataByIndex+0xd8>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	3b01      	subs	r3, #1
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <gos_taskGetDataByIndex+0xd8>)
 800bed4:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 800bed6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3710      	adds	r7, #16
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	20002bb3 	.word	0x20002bb3
 800bee4:	20002bb4 	.word	0x20002bb4
 800bee8:	20002bb1 	.word	0x20002bb1
 800beec:	20002bb8 	.word	0x20002bb8
 800bef0:	200004d4 	.word	0x200004d4

0800bef4 <gos_taskGetNumber>:

/*
 * Function: gos_taskGetNumber
 */
gos_result_t gos_taskGetNumber (u16_t* pTaskNum)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetNumResult = GOS_ERROR;
 800befc:	23ae      	movs	r3, #174	; 0xae
 800befe:	73fb      	strb	r3, [r7, #15]
    u16_t        taskIndex        = 0u;
 800bf00:	2300      	movs	r3, #0
 800bf02:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pTaskNum != NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d01e      	beq.n	800bf48 <gos_taskGetNumber+0x54>
    {
        // Initialize variable.
        *pTaskNum = 0u;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	801a      	strh	r2, [r3, #0]

        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800bf10:	2300      	movs	r3, #0
 800bf12:	81bb      	strh	r3, [r7, #12]
 800bf14:	e011      	b.n	800bf3a <gos_taskGetNumber+0x46>
        {
            if (taskDescriptors[taskIndex].taskFunction != NULL)
 800bf16:	89bb      	ldrh	r3, [r7, #12]
 800bf18:	4a0f      	ldr	r2, [pc, #60]	; (800bf58 <gos_taskGetNumber+0x64>)
 800bf1a:	216a      	movs	r1, #106	; 0x6a
 800bf1c:	fb01 f303 	mul.w	r3, r1, r3
 800bf20:	4413      	add	r3, r2
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00c      	beq.n	800bf42 <gos_taskGetNumber+0x4e>
            {
                // Increase counter.
                (*pTaskNum)++;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	801a      	strh	r2, [r3, #0]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800bf34:	89bb      	ldrh	r3, [r7, #12]
 800bf36:	3301      	adds	r3, #1
 800bf38:	81bb      	strh	r3, [r7, #12]
 800bf3a:	89bb      	ldrh	r3, [r7, #12]
 800bf3c:	2b2f      	cmp	r3, #47	; 0x2f
 800bf3e:	d9ea      	bls.n	800bf16 <gos_taskGetNumber+0x22>
 800bf40:	e000      	b.n	800bf44 <gos_taskGetNumber+0x50>
            }
            else
            {
                // Last task found.
                break;
 800bf42:	bf00      	nop
            }
        }

        taskGetNumResult = GOS_SUCCESS;
 800bf44:	2355      	movs	r3, #85	; 0x55
 800bf46:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return taskGetNumResult;
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	200004d4 	.word	0x200004d4

0800bf5c <gos_taskCheckDescriptor>:
 *                              - Stack size is smaller than the minimum allowed
 *                              - Stack size is greater than the maximum allowed
 *                              - Stack size is not 4-byte aligned
 */
GOS_STATIC gos_result_t gos_taskCheckDescriptor (gos_taskDescriptor_t* taskDescriptor)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskDescCheckResult = GOS_SUCCESS;
 800bf64:	2355      	movs	r3, #85	; 0x55
 800bf66:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (taskDescriptor->taskFunction == NULL                    ||
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d020      	beq.n	800bfb2 <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPrivilegeLevel == 0                 ||
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	891b      	ldrh	r3, [r3, #8]
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d01b      	beq.n	800bfb2 <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
        taskDescriptor->taskFunction == gos_idleTask      ||
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
 800bf7e:	4a11      	ldr	r2, [pc, #68]	; (800bfc4 <gos_taskCheckDescriptor+0x68>)
 800bf80:	4293      	cmp	r3, r2
 800bf82:	d016      	beq.n	800bfb2 <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bf8a:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction == gos_idleTask      ||
 800bf8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf90:	d80f      	bhi.n	800bfb2 <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bf98:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 800bf9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf9e:	d308      	bcc.n	800bfb2 <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize % 4 != 0u)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	f003 0303 	and.w	r3, r3, #3
 800bfac:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d001      	beq.n	800bfb6 <gos_taskCheckDescriptor+0x5a>
    {
        taskDescCheckResult = GOS_ERROR;
 800bfb2:	23ae      	movs	r3, #174	; 0xae
 800bfb4:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task descriptor OK.
    }

    return taskDescCheckResult;
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr
 800bfc4:	0800bfc9 	.word	0x0800bfc9

0800bfc8 <gos_idleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
void_t gos_idleTask (void_t)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 800bfce:	2155      	movs	r1, #85	; 0x55
 800bfd0:	480c      	ldr	r0, [pc, #48]	; (800c004 <gos_idleTask+0x3c>)
 800bfd2:	f000 fa03 	bl	800c3dc <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 800bfd6:	4b0c      	ldr	r3, [pc, #48]	; (800c008 <gos_idleTask+0x40>)
 800bfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfda:	3301      	adds	r3, #1
 800bfdc:	4a0a      	ldr	r2, [pc, #40]	; (800c008 <gos_idleTask+0x40>)
 800bfde:	6413      	str	r3, [r2, #64]	; 0x40

        if (kernelIdleHookFunction != NULL)
 800bfe0:	4b0a      	ldr	r3, [pc, #40]	; (800c00c <gos_idleTask+0x44>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <gos_idleTask+0x26>
        {
            kernelIdleHookFunction();
 800bfe8:	4b08      	ldr	r3, [pc, #32]	; (800c00c <gos_idleTask+0x44>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4798      	blx	r3
        else
        {
            // Idle hook does not exist.
        }

        gos_kernelCalculateTaskCpuUsages(GOS_FALSE);
 800bfee:	2049      	movs	r0, #73	; 0x49
 800bff0:	f7fd faac 	bl	800954c <gos_kernelCalculateTaskCpuUsages>
    gos_result_t taskYieldResult = GOS_SUCCESS;
 800bff4:	2355      	movs	r3, #85	; 0x55
 800bff6:	71fb      	strb	r3, [r7, #7]
    gos_kernelReschedule(GOS_UNPRIVILEGED);
 800bff8:	2009      	movs	r0, #9
 800bffa:	f7fd ffb7 	bl	8009f6c <gos_kernelReschedule>
    return taskYieldResult;
 800bffe:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 800c000:	e7e9      	b.n	800bfd6 <gos_idleTask+0xe>
 800c002:	bf00      	nop
 800c004:	08013788 	.word	0x08013788
 800c008:	200004d4 	.word	0x200004d4
 800c00c:	20002be0 	.word	0x20002be0

0800c010 <main>:

/*
 * Main
 */
int main (void_t)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800c016:	4b1c      	ldr	r3, [pc, #112]	; (800c088 <main+0x78>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	3301      	adds	r3, #1
 800c01c:	b2da      	uxtb	r2, r3
 800c01e:	4b1a      	ldr	r3, [pc, #104]	; (800c088 <main+0x78>)
 800c020:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 800c022:	f7f4 ff6f 	bl	8000f04 <gos_platformDriverInit>
 800c026:	4603      	mov	r3, r0
 800c028:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 800c02a:	f000 f907 	bl	800c23c <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 800c02e:	79fb      	ldrb	r3, [r7, #7]
 800c030:	4619      	mov	r1, r3
 800c032:	4816      	ldr	r0, [pc, #88]	; (800c08c <main+0x7c>)
 800c034:	f000 f9d2 	bl	800c3dc <gos_errorTraceInit>

    // Initialize the kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 800c038:	f7fd f8ae 	bl	8009198 <gos_kernelInit>
 800c03c:	4603      	mov	r3, r0
 800c03e:	4619      	mov	r1, r3
 800c040:	4813      	ldr	r0, [pc, #76]	; (800c090 <main+0x80>)
 800c042:	f000 f9cb 	bl	800c3dc <gos_errorTraceInit>
 800c046:	4603      	mov	r3, r0
 800c048:	2b55      	cmp	r3, #85	; 0x55
 800c04a:	d109      	bne.n	800c060 <main+0x50>
        gos_taskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 800c04c:	4911      	ldr	r1, [pc, #68]	; (800c094 <main+0x84>)
 800c04e:	4812      	ldr	r0, [pc, #72]	; (800c098 <main+0x88>)
 800c050:	f7fe fa42 	bl	800a4d8 <gos_taskRegister>
 800c054:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 800c056:	2b55      	cmp	r3, #85	; 0x55
 800c058:	d102      	bne.n	800c060 <main+0x50>
    {
        initError = GOS_FALSE;
 800c05a:	4b10      	ldr	r3, [pc, #64]	; (800c09c <main+0x8c>)
 800c05c:	2249      	movs	r2, #73	; 0x49
 800c05e:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 800c060:	f000 f85e 	bl	800c120 <gos_Start>
 800c064:	4603      	mov	r3, r0
 800c066:	2bae      	cmp	r3, #174	; 0xae
 800c068:	d106      	bne.n	800c078 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 800c06a:	4b0d      	ldr	r3, [pc, #52]	; (800c0a0 <main+0x90>)
 800c06c:	22c0      	movs	r2, #192	; 0xc0
 800c06e:	490d      	ldr	r1, [pc, #52]	; (800c0a4 <main+0x94>)
 800c070:	2034      	movs	r0, #52	; 0x34
 800c072:	f000 f91d 	bl	800c2b0 <gos_errorHandler>
 800c076:	e005      	b.n	800c084 <main+0x74>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 800c078:	4b0b      	ldr	r3, [pc, #44]	; (800c0a8 <main+0x98>)
 800c07a:	22c4      	movs	r2, #196	; 0xc4
 800c07c:	4909      	ldr	r1, [pc, #36]	; (800c0a4 <main+0x94>)
 800c07e:	2034      	movs	r0, #52	; 0x34
 800c080:	f000 f916 	bl	800c2b0 <gos_errorHandler>
    }

    for (;;);
 800c084:	e7fe      	b.n	800c084 <main+0x74>
 800c086:	bf00      	nop
 800c088:	20002bb1 	.word	0x20002bb1
 800c08c:	08013798 	.word	0x08013798
 800c090:	080137b8 	.word	0x080137b8
 800c094:	20002be6 	.word	0x20002be6
 800c098:	200019f8 	.word	0x200019f8
 800c09c:	20002be4 	.word	0x20002be4
 800c0a0:	080137d0 	.word	0x080137d0
 800c0a4:	080146ec 	.word	0x080146ec
 800c0a8:	080137f0 	.word	0x080137f0

0800c0ac <gos_Dump>:

/*
 * Function: gos_Dump
 */
void_t gos_Dump (void_t)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_taskPrivilegeLevel_t privileges    = 0u;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	80fb      	strh	r3, [r7, #6]
    gos_tid_t                currentTaskId = GOS_INVALID_TASK_ID;
 800c0b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c0ba:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    dumpRequired = GOS_TRUE;
 800c0bc:	4b16      	ldr	r3, [pc, #88]	; (800c118 <gos_Dump+0x6c>)
 800c0be:	2236      	movs	r2, #54	; 0x36
 800c0c0:	701a      	strb	r2, [r3, #0]

    (void_t) gos_taskGetCurrentId(&currentTaskId);
 800c0c2:	1d3b      	adds	r3, r7, #4
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7ff fdd9 	bl	800bc7c <gos_taskGetCurrentId>
    (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 800c0ca:	88bb      	ldrh	r3, [r7, #4]
 800c0cc:	1dba      	adds	r2, r7, #6
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7ff fd2b 	bl	800bb2c <gos_taskGetPrivileges>

    if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 800c0d6:	88fb      	ldrh	r3, [r7, #6]
 800c0d8:	b21b      	sxth	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	db11      	blt.n	800c102 <gos_Dump+0x56>
    {
        (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 800c0de:	88bb      	ldrh	r3, [r7, #4]
 800c0e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7ff fbbd 	bl	800b864 <gos_taskAddPrivilege>
        (void_t) gos_taskWakeup(systemTaskId);
 800c0ea:	4b0c      	ldr	r3, [pc, #48]	; (800c11c <gos_Dump+0x70>)
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe fc0a 	bl	800a908 <gos_taskWakeup>
        (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 800c0f4:	88bb      	ldrh	r3, [r7, #4]
 800c0f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f7ff fc2a 	bl	800b954 <gos_taskRemovePrivilege>
 800c100:	e004      	b.n	800c10c <gos_Dump+0x60>
    }
    else
    {
        (void_t) gos_taskWakeup(systemTaskId);
 800c102:	4b06      	ldr	r3, [pc, #24]	; (800c11c <gos_Dump+0x70>)
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	4618      	mov	r0, r3
 800c108:	f7fe fbfe 	bl	800a908 <gos_taskWakeup>
    }

    (void_t) gos_shellSuspend();
 800c10c:	f001 faf4 	bl	800d6f8 <gos_shellSuspend>
}
 800c110:	bf00      	nop
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20002be5 	.word	0x20002be5
 800c11c:	20002be6 	.word	0x20002be6

0800c120 <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 800c126:	23b1      	movs	r3, #177	; 0xb1
 800c128:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 800c12a:	4b06      	ldr	r3, [pc, #24]	; (800c144 <gos_Start+0x24>)
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	2b49      	cmp	r3, #73	; 0x49
 800c130:	d103      	bne.n	800c13a <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 800c132:	f7fd f91d 	bl	8009370 <gos_kernelStart>
 800c136:	4603      	mov	r3, r0
 800c138:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 800c13a:	79fb      	ldrb	r3, [r7, #7]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	20002be4 	.word	0x20002be4

0800c148 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 800c148:	b590      	push	{r4, r7, lr}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 800c14e:	2355      	movs	r3, #85	; 0x55
 800c150:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 800c152:	2300      	movs	r3, #0
 800c154:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800c156:	4b33      	ldr	r3, [pc, #204]	; (800c224 <gos_systemTask+0xdc>)
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	3301      	adds	r3, #1
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	4b31      	ldr	r3, [pc, #196]	; (800c224 <gos_systemTask+0xdc>)
 800c160:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 800c162:	2300      	movs	r3, #0
 800c164:	71bb      	strb	r3, [r7, #6]
 800c166:	e01d      	b.n	800c1a4 <gos_systemTask+0x5c>
    {
        sysInitResult &= gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc());
 800c168:	79ba      	ldrb	r2, [r7, #6]
 800c16a:	4613      	mov	r3, r2
 800c16c:	00db      	lsls	r3, r3, #3
 800c16e:	4413      	add	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4a2d      	ldr	r2, [pc, #180]	; (800c228 <gos_systemTask+0xe0>)
 800c174:	189c      	adds	r4, r3, r2
 800c176:	79ba      	ldrb	r2, [r7, #6]
 800c178:	492b      	ldr	r1, [pc, #172]	; (800c228 <gos_systemTask+0xe0>)
 800c17a:	4613      	mov	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	4413      	add	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	440b      	add	r3, r1
 800c184:	3320      	adds	r3, #32
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4798      	blx	r3
 800c18a:	4603      	mov	r3, r0
 800c18c:	4619      	mov	r1, r3
 800c18e:	4620      	mov	r0, r4
 800c190:	f000 f924 	bl	800c3dc <gos_errorTraceInit>
 800c194:	4603      	mov	r3, r0
 800c196:	461a      	mov	r2, r3
 800c198:	79fb      	ldrb	r3, [r7, #7]
 800c19a:	4013      	ands	r3, r2
 800c19c:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 800c19e:	79bb      	ldrb	r3, [r7, #6]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	71bb      	strb	r3, [r7, #6]
 800c1a4:	79bb      	ldrb	r3, [r7, #6]
 800c1a6:	2b08      	cmp	r3, #8
 800c1a8:	d9de      	bls.n	800c168 <gos_systemTask+0x20>
    }

    // Check and correct flag value.
    if (sysInitResult != GOS_SUCCESS)
 800c1aa:	79fb      	ldrb	r3, [r7, #7]
 800c1ac:	2b55      	cmp	r3, #85	; 0x55
 800c1ae:	d001      	beq.n	800c1b4 <gos_systemTask+0x6c>
    {
        sysInitResult = GOS_ERROR;
 800c1b0:	23ae      	movs	r3, #174	; 0xae
 800c1b2:	71fb      	strb	r3, [r7, #7]
    {
        // Nothing to do.
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 800c1b4:	79fb      	ldrb	r3, [r7, #7]
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	481c      	ldr	r0, [pc, #112]	; (800c22c <gos_systemTask+0xe4>)
 800c1ba:	f000 f90f 	bl	800c3dc <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 800c1be:	4b19      	ldr	r3, [pc, #100]	; (800c224 <gos_systemTask+0xdc>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d005      	beq.n	800c1d2 <gos_systemTask+0x8a>
 800c1c6:	4b17      	ldr	r3, [pc, #92]	; (800c224 <gos_systemTask+0xdc>)
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	4b15      	ldr	r3, [pc, #84]	; (800c224 <gos_systemTask+0xdc>)
 800c1d0:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_taskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 800c1d2:	4b17      	ldr	r3, [pc, #92]	; (800c230 <gos_systemTask+0xe8>)
 800c1d4:	881b      	ldrh	r3, [r3, #0]
 800c1d6:	21c3      	movs	r1, #195	; 0xc3
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff fa0f 	bl	800b5fc <gos_taskSetOriginalPriority>
    (void_t) gos_taskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 800c1de:	4b14      	ldr	r3, [pc, #80]	; (800c230 <gos_systemTask+0xe8>)
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	21c3      	movs	r1, #195	; 0xc3
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7ff f945 	bl	800b474 <gos_taskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 800c1ea:	2036      	movs	r0, #54	; 0x36
 800c1ec:	f7fd f9ae 	bl	800954c <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 800c1f0:	4b10      	ldr	r3, [pc, #64]	; (800c234 <gos_systemTask+0xec>)
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b36      	cmp	r3, #54	; 0x36
 800c1f6:	d111      	bne.n	800c21c <gos_systemTask+0xd4>
        {
            (void_t) gos_taskSleep(100);
 800c1f8:	2064      	movs	r0, #100	; 0x64
 800c1fa:	f7fe faff 	bl	800a7fc <gos_taskSleep>
            gos_kernelDump();
 800c1fe:	f7fd fb0b 	bl	8009818 <gos_kernelDump>
            gos_queueDump();
 800c202:	f001 f989 	bl	800d518 <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 800c206:	4b0c      	ldr	r3, [pc, #48]	; (800c238 <gos_systemTask+0xf0>)
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	2100      	movs	r1, #0
 800c20c:	4618      	mov	r0, r3
 800c20e:	f001 fe8b 	bl	800df28 <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 800c212:	4b08      	ldr	r3, [pc, #32]	; (800c234 <gos_systemTask+0xec>)
 800c214:	2249      	movs	r2, #73	; 0x49
 800c216:	701a      	strb	r2, [r3, #0]
            (void_t) gos_shellResume();
 800c218:	f001 fa82 	bl	800d720 <gos_shellResume>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_SYS_TASK_SLEEP_TIME);
 800c21c:	2064      	movs	r0, #100	; 0x64
 800c21e:	f7fe faed 	bl	800a7fc <gos_taskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 800c222:	e7e2      	b.n	800c1ea <gos_systemTask+0xa2>
 800c224:	20002bb1 	.word	0x20002bb1
 800c228:	200018b4 	.word	0x200018b4
 800c22c:	0801386c 	.word	0x0801386c
 800c230:	20002be6 	.word	0x20002be6
 800c234:	20002be5 	.word	0x20002be5
 800c238:	20002bb0 	.word	0x20002bb0

0800c23c <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
__attribute__((weak)) void_t gos_printStartupLogo (void_t)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 800c240:	4811      	ldr	r0, [pc, #68]	; (800c288 <gos_printStartupLogo+0x4c>)
 800c242:	f003 f993 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 800c246:	4811      	ldr	r0, [pc, #68]	; (800c28c <gos_printStartupLogo+0x50>)
 800c248:	f003 f990 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 800c24c:	4810      	ldr	r0, [pc, #64]	; (800c290 <gos_printStartupLogo+0x54>)
 800c24e:	f003 f98d 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 800c252:	4810      	ldr	r0, [pc, #64]	; (800c294 <gos_printStartupLogo+0x58>)
 800c254:	f003 f98a 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 800c258:	480f      	ldr	r0, [pc, #60]	; (800c298 <gos_printStartupLogo+0x5c>)
 800c25a:	f003 f987 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 800c25e:	480f      	ldr	r0, [pc, #60]	; (800c29c <gos_printStartupLogo+0x60>)
 800c260:	f003 f984 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 800c264:	480e      	ldr	r0, [pc, #56]	; (800c2a0 <gos_printStartupLogo+0x64>)
 800c266:	f003 f981 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 800c26a:	4809      	ldr	r0, [pc, #36]	; (800c290 <gos_printStartupLogo+0x54>)
 800c26c:	f003 f97e 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 800c270:	480c      	ldr	r0, [pc, #48]	; (800c2a4 <gos_printStartupLogo+0x68>)
 800c272:	f003 f97b 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                        (c) Ahmed Gazar, 2022-2024                        \r\n\r\n");
 800c276:	480c      	ldr	r0, [pc, #48]	; (800c2a8 <gos_printStartupLogo+0x6c>)
 800c278:	f003 f978 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 800c27c:	480b      	ldr	r0, [pc, #44]	; (800c2ac <gos_printStartupLogo+0x70>)
 800c27e:	f003 f975 	bl	800f56c <gos_traceTraceFormattedUnsafe>
}
 800c282:	bf00      	nop
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	08013884 	.word	0x08013884
 800c28c:	080138d4 	.word	0x080138d4
 800c290:	08013924 	.word	0x08013924
 800c294:	08013974 	.word	0x08013974
 800c298:	080139c4 	.word	0x080139c4
 800c29c:	08013a14 	.word	0x08013a14
 800c2a0:	08013a64 	.word	0x08013a64
 800c2a4:	08013ab4 	.word	0x08013ab4
 800c2a8:	08013b04 	.word	0x08013b04
 800c2ac:	08013b54 	.word	0x08013b54

0800c2b0 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 800c2b0:	b408      	push	{r3}
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b087      	sub	sp, #28
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	60b9      	str	r1, [r7, #8]
 800c2bc:	607a      	str	r2, [r7, #4]
 800c2be:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 800c2c0:	4839      	ldr	r0, [pc, #228]	; (800c3a8 <gos_errorHandler+0xf8>)
 800c2c2:	f003 f953 	bl	800f56c <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 800c2c6:	7bfb      	ldrb	r3, [r7, #15]
 800c2c8:	2b34      	cmp	r3, #52	; 0x34
 800c2ca:	d103      	bne.n	800c2d4 <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 800c2cc:	4837      	ldr	r0, [pc, #220]	; (800c3ac <gos_errorHandler+0xfc>)
 800c2ce:	f003 f94d 	bl	800f56c <gos_traceTraceFormattedUnsafe>
 800c2d2:	e013      	b.n	800c2fc <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	2b2e      	cmp	r3, #46	; 0x2e
 800c2d8:	d103      	bne.n	800c2e2 <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 800c2da:	4835      	ldr	r0, [pc, #212]	; (800c3b0 <gos_errorHandler+0x100>)
 800c2dc:	f003 f946 	bl	800f56c <gos_traceTraceFormattedUnsafe>
 800c2e0:	e00c      	b.n	800c2fc <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	2b1a      	cmp	r3, #26
 800c2e6:	d103      	bne.n	800c2f0 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 800c2e8:	4832      	ldr	r0, [pc, #200]	; (800c3b4 <gos_errorHandler+0x104>)
 800c2ea:	f003 f93f 	bl	800f56c <gos_traceTraceFormattedUnsafe>
 800c2ee:	e005      	b.n	800c2fc <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
 800c2f2:	2b3a      	cmp	r3, #58	; 0x3a
 800c2f4:	d102      	bne.n	800c2fc <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 800c2f6:	4830      	ldr	r0, [pc, #192]	; (800c3b8 <gos_errorHandler+0x108>)
 800c2f8:	f003 f938 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d005      	beq.n	800c30e <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	68b9      	ldr	r1, [r7, #8]
 800c306:	482d      	ldr	r0, [pc, #180]	; (800c3bc <gos_errorHandler+0x10c>)
 800c308:	f003 f930 	bl	800f56c <gos_traceTraceFormattedUnsafe>
 800c30c:	e006      	b.n	800c31c <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d003      	beq.n	800c31c <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	482a      	ldr	r0, [pc, #168]	; (800c3c0 <gos_errorHandler+0x110>)
 800c318:	f003 f928 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 800c31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d00b      	beq.n	800c33a <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 800c322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c326:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 800c328:	697a      	ldr	r2, [r7, #20]
 800c32a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c32c:	4825      	ldr	r0, [pc, #148]	; (800c3c4 <gos_errorHandler+0x114>)
 800c32e:	f004 fa1f 	bl	8010770 <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 800c332:	4924      	ldr	r1, [pc, #144]	; (800c3c4 <gos_errorHandler+0x114>)
 800c334:	4824      	ldr	r0, [pc, #144]	; (800c3c8 <gos_errorHandler+0x118>)
 800c336:	f003 f919 	bl	800f56c <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 800c33a:	4824      	ldr	r0, [pc, #144]	; (800c3cc <gos_errorHandler+0x11c>)
 800c33c:	f003 f916 	bl	800f56c <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	2b34      	cmp	r3, #52	; 0x34
 800c344:	d002      	beq.n	800c34c <gos_errorHandler+0x9c>
 800c346:	7bfb      	ldrb	r3, [r7, #15]
 800c348:	2b1a      	cmp	r3, #26
 800c34a:	d126      	bne.n	800c39a <gos_errorHandler+0xea>
    {
        GOS_DISABLE_SCHED
 800c34c:	4b20      	ldr	r3, [pc, #128]	; (800c3d0 <gos_errorHandler+0x120>)
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	3301      	adds	r3, #1
 800c352:	b2da      	uxtb	r2, r3
 800c354:	4b1e      	ldr	r3, [pc, #120]	; (800c3d0 <gos_errorHandler+0x120>)
 800c356:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 800c358:	4b1e      	ldr	r3, [pc, #120]	; (800c3d4 <gos_errorHandler+0x124>)
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d108      	bne.n	800c372 <gos_errorHandler+0xc2>
 800c360:	b672      	cpsid	i
 800c362:	f3ef 8310 	mrs	r3, PRIMASK
 800c366:	4a1c      	ldr	r2, [pc, #112]	; (800c3d8 <gos_errorHandler+0x128>)
 800c368:	6013      	str	r3, [r2, #0]
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	4b18      	ldr	r3, [pc, #96]	; (800c3d4 <gos_errorHandler+0x124>)
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	3301      	adds	r3, #1
 800c378:	b2da      	uxtb	r2, r3
 800c37a:	4b16      	ldr	r3, [pc, #88]	; (800c3d4 <gos_errorHandler+0x124>)
 800c37c:	701a      	strb	r2, [r3, #0]
 800c37e:	4b14      	ldr	r3, [pc, #80]	; (800c3d0 <gos_errorHandler+0x120>)
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	3301      	adds	r3, #1
 800c384:	b2da      	uxtb	r2, r3
 800c386:	4b12      	ldr	r3, [pc, #72]	; (800c3d0 <gos_errorHandler+0x120>)
 800c388:	701a      	strb	r2, [r3, #0]
        for (;;)
        {
            GOS_NOP;
 800c38a:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 800c38c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800c390:	f7fd f8c0 	bl	8009514 <gos_kernelDelayMs>
            gos_kernelReset();
 800c394:	f7fd f8a0 	bl	80094d8 <gos_kernelReset>
            GOS_NOP;
 800c398:	e7f7      	b.n	800c38a <gos_errorHandler+0xda>
    }
    else
    {
        // Nothing to do.
    }
}
 800c39a:	bf00      	nop
 800c39c:	371c      	adds	r7, #28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3a4:	b001      	add	sp, #4
 800c3a6:	4770      	bx	lr
 800c3a8:	08013ba4 	.word	0x08013ba4
 800c3ac:	08013bf8 	.word	0x08013bf8
 800c3b0:	08013c24 	.word	0x08013c24
 800c3b4:	08013c44 	.word	0x08013c44
 800c3b8:	08013c74 	.word	0x08013c74
 800c3bc:	08013c94 	.word	0x08013c94
 800c3c0:	08013cb8 	.word	0x08013cb8
 800c3c4:	20002be8 	.word	0x20002be8
 800c3c8:	08013ce4 	.word	0x08013ce4
 800c3cc:	08013cec 	.word	0x08013cec
 800c3d0:	20002bb1 	.word	0x20002bb1
 800c3d4:	20002bb3 	.word	0x20002bb3
 800c3d8:	20002bb4 	.word	0x20002bb4

0800c3dc <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 800c3dc:	b590      	push	{r4, r7, lr}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */

    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 800c3e8:	f7fd f858 	bl	800949c <gos_kernelGetSysTicks>
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	1cfb      	adds	r3, r7, #3
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 f80d 	bl	800c410 <gos_traceResultToString>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	4803      	ldr	r0, [pc, #12]	; (800c40c <gos_errorTraceInit+0x30>)
 800c3fe:	f003 f8b5 	bl	800f56c <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 800c402:	78fb      	ldrb	r3, [r7, #3]
}
 800c404:	4618      	mov	r0, r3
 800c406:	370c      	adds	r7, #12
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd90      	pop	{r4, r7, pc}
 800c40c:	08013d3c 	.word	0x08013d3c

0800c410 <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	2b55      	cmp	r3, #85	; 0x55
 800c41e:	d002      	beq.n	800c426 <gos_traceResultToString+0x16>
 800c420:	2bae      	cmp	r3, #174	; 0xae
 800c422:	d002      	beq.n	800c42a <gos_traceResultToString+0x1a>
 800c424:	e003      	b.n	800c42e <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 800c426:	4b05      	ldr	r3, [pc, #20]	; (800c43c <gos_traceResultToString+0x2c>)
 800c428:	e002      	b.n	800c430 <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 800c42a:	4b05      	ldr	r3, [pc, #20]	; (800c440 <gos_traceResultToString+0x30>)
 800c42c:	e000      	b.n	800c430 <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 800c42e:	4b05      	ldr	r3, [pc, #20]	; (800c444 <gos_traceResultToString+0x34>)
        }
    }
}
 800c430:	4618      	mov	r0, r3
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	08013d58 	.word	0x08013d58
 800c440:	08013d6c 	.word	0x08013d6c
 800c444:	08013d80 	.word	0x08013d80

0800c448 <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 800c44e:	2355      	movs	r3, #85	; 0x55
 800c450:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 800c452:	2300      	movs	r3, #0
 800c454:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 800c456:	2300      	movs	r3, #0
 800c458:	80bb      	strh	r3, [r7, #4]
 800c45a:	e01a      	b.n	800c492 <gos_gcpInit+0x4a>
    {
        gcpInitResult &= gos_mutexInit(&gcpRxMutexes[mutexIdx]);
 800c45c:	88bb      	ldrh	r3, [r7, #4]
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4a12      	ldr	r2, [pc, #72]	; (800c4ac <gos_gcpInit+0x64>)
 800c462:	4413      	add	r3, r2
 800c464:	4618      	mov	r0, r3
 800c466:	f000 fc6d 	bl	800cd44 <gos_mutexInit>
 800c46a:	4603      	mov	r3, r0
 800c46c:	461a      	mov	r2, r3
 800c46e:	79fb      	ldrb	r3, [r7, #7]
 800c470:	4013      	ands	r3, r2
 800c472:	71fb      	strb	r3, [r7, #7]
        gcpInitResult &= gos_mutexInit(&gcpTxMutexes[mutexIdx]);
 800c474:	88bb      	ldrh	r3, [r7, #4]
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4a0d      	ldr	r2, [pc, #52]	; (800c4b0 <gos_gcpInit+0x68>)
 800c47a:	4413      	add	r3, r2
 800c47c:	4618      	mov	r0, r3
 800c47e:	f000 fc61 	bl	800cd44 <gos_mutexInit>
 800c482:	4603      	mov	r3, r0
 800c484:	461a      	mov	r2, r3
 800c486:	79fb      	ldrb	r3, [r7, #7]
 800c488:	4013      	ands	r3, r2
 800c48a:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 800c48c:	88bb      	ldrh	r3, [r7, #4]
 800c48e:	3301      	adds	r3, #1
 800c490:	80bb      	strh	r3, [r7, #4]
 800c492:	88bb      	ldrh	r3, [r7, #4]
 800c494:	2b03      	cmp	r3, #3
 800c496:	d9e1      	bls.n	800c45c <gos_gcpInit+0x14>
    }

    if (gcpInitResult != GOS_SUCCESS)
 800c498:	79fb      	ldrb	r3, [r7, #7]
 800c49a:	2b55      	cmp	r3, #85	; 0x55
 800c49c:	d001      	beq.n	800c4a2 <gos_gcpInit+0x5a>
    {
        gcpInitResult = GOS_ERROR;
 800c49e:	23ae      	movs	r3, #174	; 0xae
 800c4a0:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return gcpInitResult;
 800c4a2:	79fb      	ldrb	r3, [r7, #7]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3708      	adds	r7, #8
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	20002c58 	.word	0x20002c58
 800c4b0:	20002c68 	.word	0x20002c68

0800c4b4 <gos_gcpRegisterPhysicalDriver>:
gos_result_t gos_gcpRegisterPhysicalDriver (
        gos_gcpChannelNumber_t    channelNumber,
        gos_gcpTransmitFunction_t transmitFunction,
        gos_gcpReceiveFunction_t  receiveFunction
        )
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b087      	sub	sp, #28
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t registerPhysicalDriverResult = GOS_ERROR;
 800c4c2:	23ae      	movs	r3, #174	; 0xae
 800c4c4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (channelNumber < CFG_GCP_CHANNELS_MAX_NUMBER && transmitFunction != NULL && receiveFunction != NULL)
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
 800c4c8:	2b03      	cmp	r3, #3
 800c4ca:	d812      	bhi.n	800c4f2 <gos_gcpRegisterPhysicalDriver+0x3e>
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00f      	beq.n	800c4f2 <gos_gcpRegisterPhysicalDriver+0x3e>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00c      	beq.n	800c4f2 <gos_gcpRegisterPhysicalDriver+0x3e>
    {
        channelFunctions[channelNumber].gcpReceiveFunction  = receiveFunction;
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
 800c4da:	4a09      	ldr	r2, [pc, #36]	; (800c500 <gos_gcpRegisterPhysicalDriver+0x4c>)
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	4413      	add	r3, r2
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	605a      	str	r2, [r3, #4]
        channelFunctions[channelNumber].gcpTransmitFunction = transmitFunction;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
 800c4e6:	4906      	ldr	r1, [pc, #24]	; (800c500 <gos_gcpRegisterPhysicalDriver+0x4c>)
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        registerPhysicalDriverResult                        = GOS_SUCCESS;
 800c4ee:	2355      	movs	r3, #85	; 0x55
 800c4f0:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Nothing to do.
    }

    return registerPhysicalDriverResult;
 800c4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	371c      	adds	r7, #28
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	20002c38 	.word	0x20002c38

0800c504 <gos_gcpTransmitMessage>:
        u16_t                   messageId,
        void_t*                 pMessagePayload,
        u16_t                   payloadSize,
		u16_t                   maxChunkSize
        )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b092      	sub	sp, #72	; 0x48
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60ba      	str	r2, [r7, #8]
 800c50c:	461a      	mov	r2, r3
 800c50e:	4603      	mov	r3, r0
 800c510:	73fb      	strb	r3, [r7, #15]
 800c512:	460b      	mov	r3, r1
 800c514:	81bb      	strh	r3, [r7, #12]
 800c516:	4613      	mov	r3, r2
 800c518:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t transmitMessageResult = GOS_ERROR;
 800c51a:	23ae      	movs	r3, #174	; 0xae
 800c51c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /*
     * Function code.
     */
    if (gos_mutexLock(&gcpTxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 800c520:	7bfb      	ldrb	r3, [r7, #15]
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4a8e      	ldr	r2, [pc, #568]	; (800c760 <gos_gcpTransmitMessage+0x25c>)
 800c526:	4413      	add	r3, r2
 800c528:	f04f 31ff 	mov.w	r1, #4294967295
 800c52c:	4618      	mov	r0, r3
 800c52e:	f000 fc23 	bl	800cd78 <gos_mutexLock>
 800c532:	4603      	mov	r3, r0
 800c534:	2b55      	cmp	r3, #85	; 0x55
 800c536:	f040 8105 	bne.w	800c744 <gos_gcpTransmitMessage+0x240>
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
 800c53c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800c540:	89bb      	ldrh	r3, [r7, #12]
 800c542:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	643b      	str	r3, [r7, #64]	; 0x40
 800c54a:	88fb      	ldrh	r3, [r7, #6]
 800c54c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c54e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800c552:	87bb      	strh	r3, [r7, #60]	; 0x3c
)
{
    /*
     * Local variables.
     */
    gos_result_t         transmitMessageResult = GOS_ERROR;
 800c554:	23ae      	movs	r3, #174	; 0xae
 800c556:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 800c55a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
 800c562:	605a      	str	r2, [r3, #4]
 800c564:	609a      	str	r2, [r3, #8]
 800c566:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 800c568:	f107 0314 	add.w	r3, r7, #20
 800c56c:	2200      	movs	r2, #0
 800c56e:	601a      	str	r2, [r3, #0]
 800c570:	605a      	str	r2, [r3, #4]
 800c572:	609a      	str	r2, [r3, #8]
 800c574:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 800c576:	2300      	movs	r3, #0
 800c578:	74fb      	strb	r3, [r7, #19]
    u8_t                 dataChunks            = 0u;
 800c57a:	2300      	movs	r3, #0
 800c57c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    u8_t                 chunkIndex            = 0u;
 800c580:	2300      	movs	r3, #0
 800c582:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    u16_t                tempSize              = 0u;
 800c586:	2300      	movs	r3, #0
 800c588:	86fb      	strh	r3, [r7, #54]	; 0x36

    /*
     * Function code.
     */
    if ((pMessagePayload                              != NULL                        ||
 800c58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d107      	bne.n	800c5a0 <gos_gcpTransmitMessage+0x9c>
 800c590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c592:	2b00      	cmp	r3, #0
 800c594:	f040 80d2 	bne.w	800c73c <gos_gcpTransmitMessage+0x238>
        (pMessagePayload                              == NULL                        &&
 800c598:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f040 80ce 	bne.w	800c73c <gos_gcpTransmitMessage+0x238>
        payloadSize                                   == 0u))                        &&
 800c5a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800c5a4:	2b03      	cmp	r3, #3
 800c5a6:	f200 80c9 	bhi.w	800c73c <gos_gcpTransmitMessage+0x238>
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpTransmitFunction != NULL)
 800c5aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800c5ae:	4a6d      	ldr	r2, [pc, #436]	; (800c764 <gos_gcpTransmitMessage+0x260>)
 800c5b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f000 80c1 	beq.w	800c73c <gos_gcpTransmitMessage+0x238>
    {
        // Fill out header frame.
        requestHeaderFrame.ackType       = GCP_ACK_REQ;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        requestHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        requestHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        requestHeaderFrame.dataSize      = payloadSize;
 800c5cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5ce:	857b      	strh	r3, [r7, #42]	; 0x2a
        requestHeaderFrame.messageId     = messageId;
 800c5d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c5d4:	853b      	strh	r3, [r7, #40]	; 0x28
        requestHeaderFrame.dataCrc       = gos_crcDriverGetCrc((u8_t*)pMessagePayload, payloadSize);
 800c5d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c5dc:	f003 f9d0 	bl	800f980 <gos_crcDriverGetCrc>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        requestHeaderFrame.headerCrc     = gos_crcDriverGetCrc((u8_t*)&requestHeaderFrame, (u32_t)(sizeof(requestHeaderFrame) - sizeof(requestHeaderFrame.headerCrc)));
 800c5e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5e8:	210c      	movs	r1, #12
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f003 f9c8 	bl	800f980 <gos_crcDriverGetCrc>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	633b      	str	r3, [r7, #48]	; 0x30
        else
        {
            // Error.
        }*/

        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS)
 800c5f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800c5f8:	4a5a      	ldr	r2, [pc, #360]	; (800c764 <gos_gcpTransmitMessage+0x260>)
 800c5fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c5fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c602:	2110      	movs	r1, #16
 800c604:	4610      	mov	r0, r2
 800c606:	4798      	blx	r3
 800c608:	4603      	mov	r3, r0
 800c60a:	2b55      	cmp	r3, #85	; 0x55
 800c60c:	f040 8096 	bne.w	800c73c <gos_gcpTransmitMessage+0x238>
        {
        	if (requestHeaderFrame.dataSize == 0u)
 800c610:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c612:	2b00      	cmp	r3, #0
 800c614:	d120      	bne.n	800c658 <gos_gcpTransmitMessage+0x154>
        	{
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 800c616:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800c61a:	4a52      	ldr	r2, [pc, #328]	; (800c764 <gos_gcpTransmitMessage+0x260>)
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	4413      	add	r3, r2
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	f107 0214 	add.w	r2, r7, #20
 800c626:	2110      	movs	r1, #16
 800c628:	4610      	mov	r0, r2
 800c62a:	4798      	blx	r3
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b55      	cmp	r3, #85	; 0x55
 800c630:	f040 8084 	bne.w	800c73c <gos_gcpTransmitMessage+0x238>
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 800c634:	f107 0213 	add.w	r2, r7, #19
 800c638:	f107 0314 	add.w	r3, r7, #20
 800c63c:	4611      	mov	r1, r2
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 f9de 	bl	800ca00 <gos_gcpValidateHeader>
 800c644:	4603      	mov	r3, r0
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 800c646:	2b55      	cmp	r3, #85	; 0x55
 800c648:	d178      	bne.n	800c73c <gos_gcpTransmitMessage+0x238>
			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 800c64a:	7dbb      	ldrb	r3, [r7, #22]
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d175      	bne.n	800c73c <gos_gcpTransmitMessage+0x238>
        		{
                    // Transmission successful.
                    transmitMessageResult = GOS_SUCCESS;
 800c650:	2355      	movs	r3, #85	; 0x55
 800c652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800c656:	e071      	b.n	800c73c <gos_gcpTransmitMessage+0x238>
        			// Error.
        		}
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 800c658:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800c65a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c660:	b29b      	uxth	r3, r3
 800c662:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 800c666:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c668:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c66a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c66e:	fb01 f202 	mul.w	r2, r1, r2
 800c672:	1a9b      	subs	r3, r3, r2
 800c674:	b29b      	uxth	r3, r3
 800c676:	2b00      	cmp	r3, #0
 800c678:	d004      	beq.n	800c684 <gos_gcpTransmitMessage+0x180>
            	{
            		dataChunks++;
 800c67a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c67e:	3301      	adds	r3, #1
 800c680:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 800c684:	2300      	movs	r3, #0
 800c686:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800c68a:	e051      	b.n	800c730 <gos_gcpTransmitMessage+0x22c>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 800c68c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c690:	3301      	adds	r3, #1
 800c692:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c694:	fb02 f303 	mul.w	r3, r2, r3
 800c698:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800c69a:	4293      	cmp	r3, r2
 800c69c:	dd0a      	ble.n	800c6b4 <gos_gcpTransmitMessage+0x1b0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 800c69e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800c6a0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800c6a8:	fb11 f303 	smulbb	r3, r1, r3
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c6b2:	e001      	b.n	800c6b8 <gos_gcpTransmitMessage+0x1b4>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 800c6b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c6b6:	86fb      	strh	r3, [r7, #54]	; 0x36
            		}

            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 800c6b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800c6bc:	4a29      	ldr	r2, [pc, #164]	; (800c764 <gos_gcpTransmitMessage+0x260>)
 800c6be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c6c2:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800c6c6:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800c6c8:	fb01 f202 	mul.w	r2, r1, r2
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6d0:	440a      	add	r2, r1
 800c6d2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	4798      	blx	r3
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b55      	cmp	r3, #85	; 0x55
 800c6dc:	d124      	bne.n	800c728 <gos_gcpTransmitMessage+0x224>
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 800c6de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800c6e2:	4a20      	ldr	r2, [pc, #128]	; (800c764 <gos_gcpTransmitMessage+0x260>)
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	4413      	add	r3, r2
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	f107 0214 	add.w	r2, r7, #20
 800c6ee:	2110      	movs	r1, #16
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	4798      	blx	r3
 800c6f4:	4603      	mov	r3, r0
            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 800c6f6:	2b55      	cmp	r3, #85	; 0x55
 800c6f8:	d116      	bne.n	800c728 <gos_gcpTransmitMessage+0x224>
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 800c6fa:	f107 0213 	add.w	r2, r7, #19
 800c6fe:	f107 0314 	add.w	r3, r7, #20
 800c702:	4611      	mov	r1, r2
 800c704:	4618      	mov	r0, r3
 800c706:	f000 f97b 	bl	800ca00 <gos_gcpValidateHeader>
 800c70a:	4603      	mov	r3, r0
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 800c70c:	2b55      	cmp	r3, #85	; 0x55
 800c70e:	d10b      	bne.n	800c728 <gos_gcpTransmitMessage+0x224>
    			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 800c710:	7dbb      	ldrb	r3, [r7, #22]
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 800c712:	2b01      	cmp	r3, #1
 800c714:	d108      	bne.n	800c728 <gos_gcpTransmitMessage+0x224>
            		{
                        // Transmission successful.
            			// Set temporary success.
                        transmitMessageResult = GOS_SUCCESS;
 800c716:	2355      	movs	r3, #85	; 0x55
 800c718:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 800c71c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800c720:	3301      	adds	r3, #1
 800c722:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800c726:	e003      	b.n	800c730 <gos_gcpTransmitMessage+0x22c>
            		}
            		else
            		{
            			// Error.
            			transmitMessageResult = GOS_ERROR;
 800c728:	23ae      	movs	r3, #174	; 0xae
 800c72a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            			break;
 800c72e:	e005      	b.n	800c73c <gos_gcpTransmitMessage+0x238>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 800c730:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800c734:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800c738:	429a      	cmp	r2, r3
 800c73a:	d3a7      	bcc.n	800c68c <gos_gcpTransmitMessage+0x188>
    else
    {
        // Nothing to do.
    }

    return transmitMessageResult;
 800c73c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
        transmitMessageResult = gos_gcpTransmitMessageInternal(channel, messageId, pMessagePayload, payloadSize, maxChunkSize);
 800c740:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    (void_t) gos_mutexUnlock(&gcpTxMutexes[channel]);
 800c744:	7bfb      	ldrb	r3, [r7, #15]
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4a05      	ldr	r2, [pc, #20]	; (800c760 <gos_gcpTransmitMessage+0x25c>)
 800c74a:	4413      	add	r3, r2
 800c74c:	4618      	mov	r0, r3
 800c74e:	f000 fc19 	bl	800cf84 <gos_mutexUnlock>
    return transmitMessageResult;
 800c752:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800c756:	4618      	mov	r0, r3
 800c758:	3748      	adds	r7, #72	; 0x48
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20002c68 	.word	0x20002c68
 800c764:	20002c38 	.word	0x20002c38

0800c768 <gos_gcpReceiveMessage>:
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b094      	sub	sp, #80	; 0x50
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60b9      	str	r1, [r7, #8]
 800c770:	607a      	str	r2, [r7, #4]
 800c772:	461a      	mov	r2, r3
 800c774:	4603      	mov	r3, r0
 800c776:	73fb      	strb	r3, [r7, #15]
 800c778:	4613      	mov	r3, r2
 800c77a:	81bb      	strh	r3, [r7, #12]
    gos_result_t receiveMessageResult = GOS_ERROR;
 800c77c:	23ae      	movs	r3, #174	; 0xae
 800c77e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (gos_mutexLock(&gcpRxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 800c782:	7bfb      	ldrb	r3, [r7, #15]
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4a9c      	ldr	r2, [pc, #624]	; (800c9f8 <gos_gcpReceiveMessage+0x290>)
 800c788:	4413      	add	r3, r2
 800c78a:	f04f 31ff 	mov.w	r1, #4294967295
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 faf2 	bl	800cd78 <gos_mutexLock>
 800c794:	4603      	mov	r3, r0
 800c796:	2b55      	cmp	r3, #85	; 0x55
 800c798:	f040 8120 	bne.w	800c9dc <gos_gcpReceiveMessage+0x274>
 800c79c:	7bfb      	ldrb	r3, [r7, #15]
 800c79e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	647b      	str	r3, [r7, #68]	; 0x44
 800c7aa:	89bb      	ldrh	r3, [r7, #12]
 800c7ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c7b0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800c7b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        )
{
    /*
     * Local variables.
     */
    gos_result_t         receiveMessageResult  = GOS_ERROR;
 800c7b8:	23ae      	movs	r3, #174	; 0xae
 800c7ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 800c7be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	601a      	str	r2, [r3, #0]
 800c7c6:	605a      	str	r2, [r3, #4]
 800c7c8:	609a      	str	r2, [r3, #8]
 800c7ca:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 800c7cc:	f107 0318 	add.w	r3, r7, #24
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	601a      	str	r2, [r3, #0]
 800c7d4:	605a      	str	r2, [r3, #4]
 800c7d6:	609a      	str	r2, [r3, #8]
 800c7d8:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	75fb      	strb	r3, [r7, #23]
    u8_t                 dataChunks            = 0u;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    u8_t                 chunkIndex            = 0u;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    u16_t                tempSize              = 0u;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	877b      	strh	r3, [r7, #58]	; 0x3a

    /*
     * Function code.
     */
    if (pMessageId                                   != NULL                        &&
 800c7ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 80ef 	beq.w	800c9d4 <gos_gcpReceiveMessage+0x26c>
 800c7f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	f000 80eb 	beq.w	800c9d4 <gos_gcpReceiveMessage+0x26c>
        pPayloadTarget                               != NULL                        &&
 800c7fe:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c802:	2b03      	cmp	r3, #3
 800c804:	f200 80e6 	bhi.w	800c9d4 <gos_gcpReceiveMessage+0x26c>
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpReceiveFunction != NULL
 800c808:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c80c:	4a7b      	ldr	r2, [pc, #492]	; (800c9fc <gos_gcpReceiveMessage+0x294>)
 800c80e:	00db      	lsls	r3, r3, #3
 800c810:	4413      	add	r3, r2
 800c812:	685b      	ldr	r3, [r3, #4]
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 80dd 	beq.w	800c9d4 <gos_gcpReceiveMessage+0x26c>
        )
    {
        // Prepare response header frame.
        responseHeaderFrame.dataSize      = 0u;
 800c81a:	2300      	movs	r3, #0
 800c81c:	83fb      	strh	r3, [r7, #30]
        responseHeaderFrame.dataCrc       = 0u;
 800c81e:	2300      	movs	r3, #0
 800c820:	623b      	str	r3, [r7, #32]
        responseHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 800c822:	2302      	movs	r3, #2
 800c824:	763b      	strb	r3, [r7, #24]
        responseHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 800c826:	2300      	movs	r3, #0
 800c828:	767b      	strb	r3, [r7, #25]
            responseHeaderFrame.ackType   = (u8_t)headerAck;
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
        }*/

        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 800c82a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c82e:	4a73      	ldr	r2, [pc, #460]	; (800c9fc <gos_gcpReceiveMessage+0x294>)
 800c830:	00db      	lsls	r3, r3, #3
 800c832:	4413      	add	r3, r2
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c83a:	2110      	movs	r1, #16
 800c83c:	4610      	mov	r0, r2
 800c83e:	4798      	blx	r3
 800c840:	4603      	mov	r3, r0
 800c842:	2b55      	cmp	r3, #85	; 0x55
 800c844:	f040 80b0 	bne.w	800c9a8 <gos_gcpReceiveMessage+0x240>
            gos_gcpValidateHeader(&requestHeaderFrame, &headerAck) == GOS_SUCCESS)
 800c848:	f107 0217 	add.w	r2, r7, #23
 800c84c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c850:	4611      	mov	r1, r2
 800c852:	4618      	mov	r0, r3
 800c854:	f000 f8d4 	bl	800ca00 <gos_gcpValidateHeader>
 800c858:	4603      	mov	r3, r0
        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 800c85a:	2b55      	cmp	r3, #85	; 0x55
 800c85c:	f040 80a4 	bne.w	800c9a8 <gos_gcpReceiveMessage+0x240>
        {
        	if (requestHeaderFrame.dataSize == 0)
 800c860:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c862:	2b00      	cmp	r3, #0
 800c864:	d11e      	bne.n	800c8a4 <gos_gcpReceiveMessage+0x13c>
        	{
        		// OK.
                // Data OK. Send response.
                *pMessageId = requestHeaderFrame.messageId;
 800c866:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c86a:	801a      	strh	r2, [r3, #0]
                responseHeaderFrame.ackType = GCP_ACK_OK;
 800c86c:	2301      	movs	r3, #1
 800c86e:	76bb      	strb	r3, [r7, #26]
                responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 800c870:	f107 0318 	add.w	r3, r7, #24
 800c874:	210c      	movs	r1, #12
 800c876:	4618      	mov	r0, r3
 800c878:	f003 f882 	bl	800f980 <gos_crcDriverGetCrc>
 800c87c:	4603      	mov	r3, r0
 800c87e:	627b      	str	r3, [r7, #36]	; 0x24
                if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 800c880:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c884:	4a5d      	ldr	r2, [pc, #372]	; (800c9fc <gos_gcpReceiveMessage+0x294>)
 800c886:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c88a:	f107 0218 	add.w	r2, r7, #24
 800c88e:	2110      	movs	r1, #16
 800c890:	4610      	mov	r0, r2
 800c892:	4798      	blx	r3
 800c894:	4603      	mov	r3, r0
 800c896:	2b55      	cmp	r3, #85	; 0x55
 800c898:	f040 809b 	bne.w	800c9d2 <gos_gcpReceiveMessage+0x26a>
                {
                    // Reception successful.
                    receiveMessageResult = GOS_SUCCESS;
 800c89c:	2355      	movs	r3, #85	; 0x55
 800c89e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 800c8a2:	e096      	b.n	800c9d2 <gos_gcpReceiveMessage+0x26a>
                    // Transmit error.
                }
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 800c8a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c8a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c8aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 800c8b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8b6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c8ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8be:	fb01 f202 	mul.w	r2, r1, r2
 800c8c2:	1a9b      	subs	r3, r3, r2
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d004      	beq.n	800c8d4 <gos_gcpReceiveMessage+0x16c>
            	{
            		dataChunks++;
 800c8ca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800c8da:	e04c      	b.n	800c976 <gos_gcpReceiveMessage+0x20e>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 800c8dc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c8e6:	fb02 f303 	mul.w	r3, r2, r3
 800c8ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	dd0b      	ble.n	800c908 <gos_gcpReceiveMessage+0x1a0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 800c8f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c8f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800c8fc:	fb11 f303 	smulbb	r3, r1, r3
 800c900:	b29b      	uxth	r3, r3
 800c902:	1ad3      	subs	r3, r2, r3
 800c904:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c906:	e002      	b.n	800c90e <gos_gcpReceiveMessage+0x1a6>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 800c908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c90c:	877b      	strh	r3, [r7, #58]	; 0x3a
            		}

            		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)(pPayloadTarget + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS)
 800c90e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c912:	4a3a      	ldr	r2, [pc, #232]	; (800c9fc <gos_gcpReceiveMessage+0x294>)
 800c914:	00db      	lsls	r3, r3, #3
 800c916:	4413      	add	r3, r2
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800c91e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800c922:	fb01 f202 	mul.w	r2, r1, r2
 800c926:	4611      	mov	r1, r2
 800c928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c92a:	440a      	add	r2, r1
 800c92c:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 800c92e:	4610      	mov	r0, r2
 800c930:	4798      	blx	r3
 800c932:	4603      	mov	r3, r0
 800c934:	2b55      	cmp	r3, #85	; 0x55
 800c936:	d125      	bne.n	800c984 <gos_gcpReceiveMessage+0x21c>
            		{
            			// OK, send response.
                        // Data OK. Send response.
                        *pMessageId = requestHeaderFrame.messageId;
 800c938:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c93c:	801a      	strh	r2, [r3, #0]
                        responseHeaderFrame.ackType = GCP_ACK_OK;
 800c93e:	2301      	movs	r3, #1
 800c940:	76bb      	strb	r3, [r7, #26]
                        responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 800c942:	f107 0318 	add.w	r3, r7, #24
 800c946:	210c      	movs	r1, #12
 800c948:	4618      	mov	r0, r3
 800c94a:	f003 f819 	bl	800f980 <gos_crcDriverGetCrc>
 800c94e:	4603      	mov	r3, r0
 800c950:	627b      	str	r3, [r7, #36]	; 0x24
                        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 800c952:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c956:	4a29      	ldr	r2, [pc, #164]	; (800c9fc <gos_gcpReceiveMessage+0x294>)
 800c958:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c95c:	f107 0218 	add.w	r2, r7, #24
 800c960:	2110      	movs	r1, #16
 800c962:	4610      	mov	r0, r2
 800c964:	4798      	blx	r3
 800c966:	4603      	mov	r3, r0
 800c968:	2b55      	cmp	r3, #85	; 0x55
 800c96a:	d10d      	bne.n	800c988 <gos_gcpReceiveMessage+0x220>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 800c96c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c970:	3301      	adds	r3, #1
 800c972:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800c976:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800c97a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c97e:	429a      	cmp	r2, r3
 800c980:	d3ac      	bcc.n	800c8dc <gos_gcpReceiveMessage+0x174>
 800c982:	e002      	b.n	800c98a <gos_gcpReceiveMessage+0x222>
                        	break;
                        }
            		}
            		else
            		{
            			break;
 800c984:	bf00      	nop
 800c986:	e000      	b.n	800c98a <gos_gcpReceiveMessage+0x222>
                        	break;
 800c988:	bf00      	nop
            		}
            	}

            	// Integrity check.
            	if (gos_gcpValidateData(&requestHeaderFrame, pPayloadTarget, &headerAck) == GOS_SUCCESS)
 800c98a:	f107 0217 	add.w	r2, r7, #23
 800c98e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c992:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c994:	4618      	mov	r0, r3
 800c996:	f000 f860 	bl	800ca5a <gos_gcpValidateData>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b55      	cmp	r3, #85	; 0x55
 800c99e:	d118      	bne.n	800c9d2 <gos_gcpReceiveMessage+0x26a>
            	{
            		receiveMessageResult = GOS_SUCCESS;
 800c9a0:	2355      	movs	r3, #85	; 0x55
 800c9a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 800c9a6:	e014      	b.n	800c9d2 <gos_gcpReceiveMessage+0x26a>
        	}
        }
        else
        {
            // Send response.
            responseHeaderFrame.ackType   = (u8_t)headerAck;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	76bb      	strb	r3, [r7, #26]
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 800c9ac:	f107 0318 	add.w	r3, r7, #24
 800c9b0:	210c      	movs	r1, #12
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f002 ffe4 	bl	800f980 <gos_crcDriverGetCrc>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	627b      	str	r3, [r7, #36]	; 0x24
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
 800c9bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c9c0:	4a0e      	ldr	r2, [pc, #56]	; (800c9fc <gos_gcpReceiveMessage+0x294>)
 800c9c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c9c6:	f107 0218 	add.w	r2, r7, #24
 800c9ca:	2110      	movs	r1, #16
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	4798      	blx	r3
 800c9d0:	e000      	b.n	800c9d4 <gos_gcpReceiveMessage+0x26c>
        	if (requestHeaderFrame.dataSize == 0)
 800c9d2:	bf00      	nop
    else
    {
        // Nothing to do.
    }

    return receiveMessageResult;
 800c9d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        receiveMessageResult = gos_gcpReceiveMessageInternal(channel, pMessageId, pPayloadTarget, targetSize, maxChunkSize);
 800c9d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    gos_mutexUnlock(&gcpRxMutexes[channel]);
 800c9dc:	7bfb      	ldrb	r3, [r7, #15]
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4a05      	ldr	r2, [pc, #20]	; (800c9f8 <gos_gcpReceiveMessage+0x290>)
 800c9e2:	4413      	add	r3, r2
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 facd 	bl	800cf84 <gos_mutexUnlock>
    return receiveMessageResult;
 800c9ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3750      	adds	r7, #80	; 0x50
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20002c58 	.word	0x20002c58
 800c9fc:	20002c38 	.word	0x20002c38

0800ca00 <gos_gcpValidateHeader>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC or PV error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateHeader (gos_gcpHeaderFrame_t* pHeader, gos_gcpAck_t* pAck)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 800ca0a:	23ae      	movs	r3, #174	; 0xae
 800ca0c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pHeader != NULL && pAck != NULL)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d01d      	beq.n	800ca50 <gos_gcpValidateHeader+0x50>
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d01a      	beq.n	800ca50 <gos_gcpValidateHeader+0x50>
    {
        // Check header CRC.
        if (gos_crcDriverGetCrc((u8_t*)pHeader, (u16_t)(sizeof(*pHeader) - sizeof(pHeader->headerCrc))) == pHeader->headerCrc)
 800ca1a:	210c      	movs	r1, #12
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f002 ffaf 	bl	800f980 <gos_crcDriverGetCrc>
 800ca22:	4602      	mov	r2, r0
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d10e      	bne.n	800ca4a <gos_gcpValidateHeader+0x4a>
        {
            // Validate protocol version
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	d106      	bne.n	800ca42 <gos_gcpValidateHeader+0x42>
                pHeader->protocolMinor == GCP_PROTOCOL_VERSION_MINOR)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	785b      	ldrb	r3, [r3, #1]
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <gos_gcpValidateHeader+0x42>
            {
                validateSuccess = GOS_SUCCESS;
 800ca3c:	2355      	movs	r3, #85	; 0x55
 800ca3e:	73fb      	strb	r3, [r7, #15]
 800ca40:	e006      	b.n	800ca50 <gos_gcpValidateHeader+0x50>
            }
            else
            {
                // Protocol version error.
                *pAck = GCP_ACK_PV_ERROR;
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2205      	movs	r2, #5
 800ca46:	701a      	strb	r2, [r3, #0]
 800ca48:	e002      	b.n	800ca50 <gos_gcpValidateHeader+0x50>
            }
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 800ca50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <gos_gcpValidateData>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateData (gos_gcpHeaderFrame_t* pHeader, void_t* pData, gos_gcpAck_t* pAck)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b086      	sub	sp, #24
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	60f8      	str	r0, [r7, #12]
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 800ca66:	23ae      	movs	r3, #174	; 0xae
 800ca68:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pHeader != NULL && pData != NULL && pAck != NULL)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d016      	beq.n	800ca9e <gos_gcpValidateData+0x44>
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d013      	beq.n	800ca9e <gos_gcpValidateData+0x44>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d010      	beq.n	800ca9e <gos_gcpValidateData+0x44>
    {
        // Check data CRC.
        if (gos_crcDriverGetCrc((u8_t*)pData, (u16_t)(pHeader->dataSize)) == pHeader->dataCrc)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	88db      	ldrh	r3, [r3, #6]
 800ca80:	4619      	mov	r1, r3
 800ca82:	68b8      	ldr	r0, [r7, #8]
 800ca84:	f002 ff7c 	bl	800f980 <gos_crcDriverGetCrc>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d102      	bne.n	800ca98 <gos_gcpValidateData+0x3e>
        {
            // Data OK.
            validateSuccess = GOS_SUCCESS;
 800ca92:	2355      	movs	r3, #85	; 0x55
 800ca94:	75fb      	strb	r3, [r7, #23]
 800ca96:	e002      	b.n	800ca9e <gos_gcpValidateData+0x44>
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 800ca9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3718      	adds	r7, #24
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_SUCCESS;
 800caae:	2355      	movs	r3, #85	; 0x55
 800cab0:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 800cab2:	2300      	movs	r3, #0
 800cab4:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 800cab6:	2300      	movs	r3, #0
 800cab8:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 800caba:	4b22      	ldr	r3, [pc, #136]	; (800cb44 <gos_messageInit+0x9c>)
 800cabc:	2200      	movs	r2, #0
 800cabe:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 800cac0:	4b21      	ldr	r3, [pc, #132]	; (800cb48 <gos_messageInit+0xa0>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 800cac6:	2300      	movs	r3, #0
 800cac8:	71bb      	strb	r3, [r7, #6]
 800caca:	e014      	b.n	800caf6 <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 800cacc:	79bb      	ldrb	r3, [r7, #6]
 800cace:	4a1f      	ldr	r2, [pc, #124]	; (800cb4c <gos_messageInit+0xa4>)
 800cad0:	2154      	movs	r1, #84	; 0x54
 800cad2:	fb01 f303 	mul.w	r3, r1, r3
 800cad6:	4413      	add	r3, r2
 800cad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cadc:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 800cade:	79bb      	ldrb	r3, [r7, #6]
 800cae0:	4a1a      	ldr	r2, [pc, #104]	; (800cb4c <gos_messageInit+0xa4>)
 800cae2:	2154      	movs	r1, #84	; 0x54
 800cae4:	fb01 f303 	mul.w	r3, r1, r3
 800cae8:	4413      	add	r3, r2
 800caea:	3302      	adds	r3, #2
 800caec:	2200      	movs	r2, #0
 800caee:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 800caf0:	79bb      	ldrb	r3, [r7, #6]
 800caf2:	3301      	adds	r3, #1
 800caf4:	71bb      	strb	r3, [r7, #6]
 800caf6:	79bb      	ldrb	r3, [r7, #6]
 800caf8:	2b07      	cmp	r3, #7
 800cafa:	d9e7      	bls.n	800cacc <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800cafc:	2300      	movs	r3, #0
 800cafe:	717b      	strb	r3, [r7, #5]
 800cb00:	e009      	b.n	800cb16 <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 800cb02:	797b      	ldrb	r3, [r7, #5]
 800cb04:	4a12      	ldr	r2, [pc, #72]	; (800cb50 <gos_messageInit+0xa8>)
 800cb06:	015b      	lsls	r3, r3, #5
 800cb08:	4413      	add	r3, r2
 800cb0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb0e:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800cb10:	797b      	ldrb	r3, [r7, #5]
 800cb12:	3301      	adds	r3, #1
 800cb14:	717b      	strb	r3, [r7, #5]
 800cb16:	797b      	ldrb	r3, [r7, #5]
 800cb18:	2b09      	cmp	r3, #9
 800cb1a:	d9f2      	bls.n	800cb02 <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 800cb1c:	480d      	ldr	r0, [pc, #52]	; (800cb54 <gos_messageInit+0xac>)
 800cb1e:	f000 f911 	bl	800cd44 <gos_mutexInit>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b55      	cmp	r3, #85	; 0x55
 800cb26:	d106      	bne.n	800cb36 <gos_messageInit+0x8e>
        gos_taskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) != GOS_SUCCESS)
 800cb28:	490b      	ldr	r1, [pc, #44]	; (800cb58 <gos_messageInit+0xb0>)
 800cb2a:	480c      	ldr	r0, [pc, #48]	; (800cb5c <gos_messageInit+0xb4>)
 800cb2c:	f7fd fcd4 	bl	800a4d8 <gos_taskRegister>
 800cb30:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 800cb32:	2b55      	cmp	r3, #85	; 0x55
 800cb34:	d001      	beq.n	800cb3a <gos_messageInit+0x92>
    {
        messageInitResult = GOS_ERROR;
 800cb36:	23ae      	movs	r3, #174	; 0xae
 800cb38:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 800cb3a:	79fb      	ldrb	r3, [r7, #7]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	2000305a 	.word	0x2000305a
 800cb48:	2000305b 	.word	0x2000305b
 800cb4c:	20002c78 	.word	0x20002c78
 800cb50:	20002f18 	.word	0x20002f18
 800cb54:	2000305c 	.word	0x2000305c
 800cb58:	20003058 	.word	0x20003058
 800cb5c:	20001a64 	.word	0x20001a64

0800cb60 <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 800cb66:	2300      	movs	r3, #0
 800cb68:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 800cb72:	f04f 31ff 	mov.w	r1, #4294967295
 800cb76:	4870      	ldr	r0, [pc, #448]	; (800cd38 <gos_messageDaemonTask+0x1d8>)
 800cb78:	f000 f8fe 	bl	800cd78 <gos_mutexLock>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b55      	cmp	r3, #85	; 0x55
 800cb80:	f040 80d5 	bne.w	800cd2e <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800cb84:	2300      	movs	r3, #0
 800cb86:	71bb      	strb	r3, [r7, #6]
 800cb88:	e0ca      	b.n	800cd20 <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 800cb8a:	79bb      	ldrb	r3, [r7, #6]
 800cb8c:	4a6b      	ldr	r2, [pc, #428]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cb8e:	015b      	lsls	r3, r3, #5
 800cb90:	4413      	add	r3, r2
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb98:	f000 80bf 	beq.w	800cd1a <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	717b      	strb	r3, [r7, #5]
 800cba0:	e077      	b.n	800cc92 <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 800cba2:	2300      	movs	r3, #0
 800cba4:	71fb      	strb	r3, [r7, #7]
 800cba6:	e06e      	b.n	800cc86 <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 800cba8:	79ba      	ldrb	r2, [r7, #6]
 800cbaa:	797b      	ldrb	r3, [r7, #5]
 800cbac:	4963      	ldr	r1, [pc, #396]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cbae:	0112      	lsls	r2, r2, #4
 800cbb0:	4413      	add	r3, r2
 800cbb2:	005b      	lsls	r3, r3, #1
 800cbb4:	440b      	add	r3, r1
 800cbb6:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	4961      	ldr	r1, [pc, #388]	; (800cd40 <gos_messageDaemonTask+0x1e0>)
 800cbbc:	2054      	movs	r0, #84	; 0x54
 800cbbe:	fb00 f303 	mul.w	r3, r0, r3
 800cbc2:	440b      	add	r3, r1
 800cbc4:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d15a      	bne.n	800cc80 <gos_messageDaemonTask+0x120>
                            {
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 800cbca:	79bb      	ldrb	r3, [r7, #6]
 800cbcc:	4a5b      	ldr	r2, [pc, #364]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cbce:	015b      	lsls	r3, r3, #5
 800cbd0:	4413      	add	r3, r2
 800cbd2:	3318      	adds	r3, #24
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 800cbd8:	79fb      	ldrb	r3, [r7, #7]
 800cbda:	2254      	movs	r2, #84	; 0x54
 800cbdc:	fb02 f303 	mul.w	r3, r2, r3
 800cbe0:	4a57      	ldr	r2, [pc, #348]	; (800cd40 <gos_messageDaemonTask+0x1e0>)
 800cbe2:	4413      	add	r3, r2
 800cbe4:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 800cbe6:	79fb      	ldrb	r3, [r7, #7]
 800cbe8:	4a55      	ldr	r2, [pc, #340]	; (800cd40 <gos_messageDaemonTask+0x1e0>)
 800cbea:	2454      	movs	r4, #84	; 0x54
 800cbec:	fb04 f303 	mul.w	r3, r4, r3
 800cbf0:	4413      	add	r3, r2
 800cbf2:	3302      	adds	r3, #2
 800cbf4:	781b      	ldrb	r3, [r3, #0]
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	f003 fe4b 	bl	8010892 <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize  = messageArray[messageIndex].messageSize;
 800cbfc:	79fa      	ldrb	r2, [r7, #7]
 800cbfe:	79bb      	ldrb	r3, [r7, #6]
 800cc00:	494e      	ldr	r1, [pc, #312]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cc02:	015b      	lsls	r3, r3, #5
 800cc04:	440b      	add	r3, r1
 800cc06:	3318      	adds	r3, #24
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	494d      	ldr	r1, [pc, #308]	; (800cd40 <gos_messageDaemonTask+0x1e0>)
 800cc0c:	2054      	movs	r0, #84	; 0x54
 800cc0e:	fb00 f202 	mul.w	r2, r0, r2
 800cc12:	440a      	add	r2, r1
 800cc14:	3202      	adds	r2, #2
 800cc16:	7812      	ldrb	r2, [r2, #0]
 800cc18:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 800cc1a:	79fa      	ldrb	r2, [r7, #7]
 800cc1c:	79bb      	ldrb	r3, [r7, #6]
 800cc1e:	4947      	ldr	r1, [pc, #284]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cc20:	015b      	lsls	r3, r3, #5
 800cc22:	440b      	add	r3, r1
 800cc24:	3318      	adds	r3, #24
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4945      	ldr	r1, [pc, #276]	; (800cd40 <gos_messageDaemonTask+0x1e0>)
 800cc2a:	2054      	movs	r0, #84	; 0x54
 800cc2c:	fb00 f202 	mul.w	r2, r0, r2
 800cc30:	440a      	add	r2, r1
 800cc32:	8812      	ldrh	r2, [r2, #0]
 800cc34:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 800cc36:	79bb      	ldrb	r3, [r7, #6]
 800cc38:	4a40      	ldr	r2, [pc, #256]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cc3a:	015b      	lsls	r3, r3, #5
 800cc3c:	4413      	add	r3, r2
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7fe fa09 	bl	800b058 <gos_taskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 800cc46:	79fb      	ldrb	r3, [r7, #7]
 800cc48:	4a3d      	ldr	r2, [pc, #244]	; (800cd40 <gos_messageDaemonTask+0x1e0>)
 800cc4a:	2154      	movs	r1, #84	; 0x54
 800cc4c:	fb01 f303 	mul.w	r3, r1, r3
 800cc50:	4413      	add	r3, r2
 800cc52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc56:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 800cc58:	79bb      	ldrb	r3, [r7, #6]
 800cc5a:	4a38      	ldr	r2, [pc, #224]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cc5c:	015b      	lsls	r3, r3, #5
 800cc5e:	4413      	add	r3, r2
 800cc60:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc64:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 800cc66:	79bb      	ldrb	r3, [r7, #6]
 800cc68:	4a34      	ldr	r2, [pc, #208]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cc6a:	015b      	lsls	r3, r3, #5
 800cc6c:	4413      	add	r3, r2
 800cc6e:	331c      	adds	r3, #28
 800cc70:	2236      	movs	r2, #54	; 0x36
 800cc72:	701a      	strb	r2, [r3, #0]

                                messageIndex       = CFG_MESSAGE_MAX_NUMBER;
 800cc74:	2308      	movs	r3, #8
 800cc76:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex     = CFG_MESSAGE_MAX_WAITER_IDS;
 800cc78:	2308      	movs	r3, #8
 800cc7a:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 800cc7c:	230a      	movs	r3, #10
 800cc7e:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	3301      	adds	r3, #1
 800cc84:	71fb      	strb	r3, [r7, #7]
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	2b07      	cmp	r3, #7
 800cc8a:	d98d      	bls.n	800cba8 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 800cc8c:	797b      	ldrb	r3, [r7, #5]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	717b      	strb	r3, [r7, #5]
 800cc92:	797b      	ldrb	r3, [r7, #5]
 800cc94:	2b07      	cmp	r3, #7
 800cc96:	d984      	bls.n	800cba2 <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 800cc98:	79bb      	ldrb	r3, [r7, #6]
 800cc9a:	4a28      	ldr	r2, [pc, #160]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cc9c:	015b      	lsls	r3, r3, #5
 800cc9e:	4413      	add	r3, r2
 800cca0:	331c      	adds	r3, #28
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b49      	cmp	r3, #73	; 0x49
 800cca6:	d138      	bne.n	800cd1a <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 800cca8:	79bb      	ldrb	r3, [r7, #6]
 800ccaa:	4a24      	ldr	r2, [pc, #144]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800ccac:	015b      	lsls	r3, r3, #5
 800ccae:	4413      	add	r3, r2
 800ccb0:	3302      	adds	r3, #2
 800ccb2:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 800ccb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d02e      	beq.n	800cd1a <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 800ccbc:	79bb      	ldrb	r3, [r7, #6]
 800ccbe:	491f      	ldr	r1, [pc, #124]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800ccc0:	015a      	lsls	r2, r3, #5
 800ccc2:	440a      	add	r2, r1
 800ccc4:	3204      	adds	r2, #4
 800ccc6:	8812      	ldrh	r2, [r2, #0]
 800ccc8:	3201      	adds	r2, #1
 800ccca:	b291      	uxth	r1, r2
 800cccc:	4a1b      	ldr	r2, [pc, #108]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800ccce:	015b      	lsls	r3, r3, #5
 800ccd0:	4413      	add	r3, r2
 800ccd2:	3304      	adds	r3, #4
 800ccd4:	460a      	mov	r2, r1
 800ccd6:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 800ccd8:	79bb      	ldrb	r3, [r7, #6]
 800ccda:	4a18      	ldr	r2, [pc, #96]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800ccdc:	015b      	lsls	r3, r3, #5
 800ccde:	4413      	add	r3, r2
 800cce0:	3304      	adds	r3, #4
 800cce2:	881b      	ldrh	r3, [r3, #0]
 800cce4:	461a      	mov	r2, r3
 800cce6:	2332      	movs	r3, #50	; 0x32
 800cce8:	fb02 f303 	mul.w	r3, r2, r3
                             messageWaiterArray[messageWaiterIndex].waitTmo)
 800ccec:	79ba      	ldrb	r2, [r7, #6]
 800ccee:	4913      	ldr	r1, [pc, #76]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800ccf0:	0152      	lsls	r2, r2, #5
 800ccf2:	440a      	add	r2, r1
 800ccf4:	3202      	adds	r2, #2
 800ccf6:	8812      	ldrh	r2, [r2, #0]
                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d90e      	bls.n	800cd1a <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 800ccfc:	79bb      	ldrb	r3, [r7, #6]
 800ccfe:	4a0f      	ldr	r2, [pc, #60]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cd00:	015b      	lsls	r3, r3, #5
 800cd02:	4413      	add	r3, r2
 800cd04:	881b      	ldrh	r3, [r3, #0]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fe f9a6 	bl	800b058 <gos_taskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 800cd0c:	79bb      	ldrb	r3, [r7, #6]
 800cd0e:	4a0b      	ldr	r2, [pc, #44]	; (800cd3c <gos_messageDaemonTask+0x1dc>)
 800cd10:	015b      	lsls	r3, r3, #5
 800cd12:	4413      	add	r3, r2
 800cd14:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd18:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800cd1a:	79bb      	ldrb	r3, [r7, #6]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	71bb      	strb	r3, [r7, #6]
 800cd20:	79bb      	ldrb	r3, [r7, #6]
 800cd22:	2b09      	cmp	r3, #9
 800cd24:	f67f af31 	bls.w	800cb8a <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 800cd28:	4803      	ldr	r0, [pc, #12]	; (800cd38 <gos_messageDaemonTask+0x1d8>)
 800cd2a:	f000 f92b 	bl	800cf84 <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 800cd2e:	2032      	movs	r0, #50	; 0x32
 800cd30:	f7fd fd64 	bl	800a7fc <gos_taskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 800cd34:	e71d      	b.n	800cb72 <gos_messageDaemonTask+0x12>
 800cd36:	bf00      	nop
 800cd38:	2000305c 	.word	0x2000305c
 800cd3c:	20002f18 	.word	0x20002f18
 800cd40:	20002c78 	.word	0x20002c78

0800cd44 <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 800cd4c:	23ae      	movs	r3, #174	; 0xae
 800cd4e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d008      	beq.n	800cd68 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	22d2      	movs	r2, #210	; 0xd2
 800cd5a:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd62:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 800cd64:	2355      	movs	r3, #85	; 0x55
 800cd66:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
	...

0800cd78 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b086      	sub	sp, #24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t   lockResult   = GOS_ERROR;
 800cd82:	23ae      	movs	r3, #174	; 0xae
 800cd84:	75fb      	strb	r3, [r7, #23]
    u32_t          sysTickStart = gos_kernelGetSysTicks();
 800cd86:	f7fc fb89 	bl	800949c <gos_kernelGetSysTicks>
 800cd8a:	60f8      	str	r0, [r7, #12]

#if CFG_USE_PRIO_INHERITANCE
    gos_tid_t      currentId    = GOS_INVALID_TASK_ID;
 800cd8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd90:	817b      	strh	r3, [r7, #10]
    gos_tid_t      ownerId      = GOS_INVALID_TASK_ID;
 800cd92:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd96:	82bb      	strh	r3, [r7, #20]
    gos_taskPrio_t ownerPrio    = GOS_TASK_IDLE_PRIO;
 800cd98:	23ff      	movs	r3, #255	; 0xff
 800cd9a:	727b      	strb	r3, [r7, #9]
    gos_taskPrio_t currentPrio  = GOS_TASK_IDLE_PRIO;
 800cd9c:	23ff      	movs	r3, #255	; 0xff
 800cd9e:	723b      	strb	r3, [r7, #8]
    bool_t         prioChanged  = GOS_FALSE;
 800cda0:	2349      	movs	r3, #73	; 0x49
 800cda2:	74fb      	strb	r3, [r7, #19]
#endif

    /*
     * Function code.
     */
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 800cda4:	e0ce      	b.n	800cf44 <gos_mutexLock+0x1cc>
    {
        GOS_ATOMIC_ENTER
 800cda6:	4b73      	ldr	r3, [pc, #460]	; (800cf74 <gos_mutexLock+0x1fc>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d108      	bne.n	800cdc0 <gos_mutexLock+0x48>
 800cdae:	b672      	cpsid	i
 800cdb0:	f3ef 8310 	mrs	r3, PRIMASK
 800cdb4:	4a70      	ldr	r2, [pc, #448]	; (800cf78 <gos_mutexLock+0x200>)
 800cdb6:	6013      	str	r3, [r2, #0]
 800cdb8:	f3bf 8f4f 	dsb	sy
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	4b6c      	ldr	r3, [pc, #432]	; (800cf74 <gos_mutexLock+0x1fc>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	4b6a      	ldr	r3, [pc, #424]	; (800cf74 <gos_mutexLock+0x1fc>)
 800cdca:	701a      	strb	r2, [r3, #0]
 800cdcc:	4b6b      	ldr	r3, [pc, #428]	; (800cf7c <gos_mutexLock+0x204>)
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	b2da      	uxtb	r2, r3
 800cdd4:	4b69      	ldr	r3, [pc, #420]	; (800cf7c <gos_mutexLock+0x204>)
 800cdd6:	701a      	strb	r2, [r3, #0]

        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	2bd2      	cmp	r3, #210	; 0xd2
 800cdde:	d13b      	bne.n	800ce58 <gos_mutexLock+0xe0>
        {
#if CFG_USE_PRIO_INHERITANCE
            // Restore priority if it was changed.
            if (prioChanged == GOS_TRUE)
 800cde0:	7cfb      	ldrb	r3, [r7, #19]
 800cde2:	2b36      	cmp	r3, #54	; 0x36
 800cde4:	d12d      	bne.n	800ce42 <gos_mutexLock+0xca>
            {
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 800cde6:	4b66      	ldr	r3, [pc, #408]	; (800cf80 <gos_mutexLock+0x208>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d105      	bne.n	800cdfa <gos_mutexLock+0x82>
 800cdee:	4b63      	ldr	r3, [pc, #396]	; (800cf7c <gos_mutexLock+0x204>)
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	b2da      	uxtb	r2, r3
 800cdf6:	4b61      	ldr	r3, [pc, #388]	; (800cf7c <gos_mutexLock+0x204>)
 800cdf8:	701a      	strb	r2, [r3, #0]
 800cdfa:	4b61      	ldr	r3, [pc, #388]	; (800cf80 <gos_mutexLock+0x208>)
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	4b5f      	ldr	r3, [pc, #380]	; (800cf80 <gos_mutexLock+0x208>)
 800ce04:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(ownerId, ownerPrio);
 800ce06:	7a7a      	ldrb	r2, [r7, #9]
 800ce08:	8abb      	ldrh	r3, [r7, #20]
 800ce0a:	4611      	mov	r1, r2
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7fe fb31 	bl	800b474 <gos_taskSetPriority>
                GOS_ISR_EXIT
 800ce12:	4b5b      	ldr	r3, [pc, #364]	; (800cf80 <gos_mutexLock+0x208>)
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d005      	beq.n	800ce26 <gos_mutexLock+0xae>
 800ce1a:	4b59      	ldr	r3, [pc, #356]	; (800cf80 <gos_mutexLock+0x208>)
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	4b57      	ldr	r3, [pc, #348]	; (800cf80 <gos_mutexLock+0x208>)
 800ce24:	701a      	strb	r2, [r3, #0]
 800ce26:	4b56      	ldr	r3, [pc, #344]	; (800cf80 <gos_mutexLock+0x208>)
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d109      	bne.n	800ce42 <gos_mutexLock+0xca>
 800ce2e:	4b53      	ldr	r3, [pc, #332]	; (800cf7c <gos_mutexLock+0x204>)
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d005      	beq.n	800ce42 <gos_mutexLock+0xca>
 800ce36:	4b51      	ldr	r3, [pc, #324]	; (800cf7c <gos_mutexLock+0x204>)
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	3b01      	subs	r3, #1
 800ce3c:	b2da      	uxtb	r2, r3
 800ce3e:	4b4f      	ldr	r3, [pc, #316]	; (800cf7c <gos_mutexLock+0x204>)
 800ce40:	701a      	strb	r2, [r3, #0]
            else
            {
                // Priority was not changed.
            }
#endif
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	226b      	movs	r2, #107	; 0x6b
 800ce46:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskGetCurrentId(&(pMutex->owner));
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3302      	adds	r3, #2
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fe ff15 	bl	800bc7c <gos_taskGetCurrentId>

            lockResult = GOS_SUCCESS;
 800ce52:	2355      	movs	r3, #85	; 0x55
 800ce54:	75fb      	strb	r3, [r7, #23]
 800ce56:	e04b      	b.n	800cef0 <gos_mutexLock+0x178>
        {
            // Mutex is locked.

#if CFG_USE_PRIO_INHERITANCE
            // Check priority.
            (void_t) gos_taskGetPriority(pMutex->owner, &ownerPrio);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	885b      	ldrh	r3, [r3, #2]
 800ce5c:	f107 0209 	add.w	r2, r7, #9
 800ce60:	4611      	mov	r1, r2
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fe fc8e 	bl	800b784 <gos_taskGetPriority>
            (void_t) gos_taskGetCurrentId(&currentId);
 800ce68:	f107 030a 	add.w	r3, r7, #10
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fe ff05 	bl	800bc7c <gos_taskGetCurrentId>
            (void_t) gos_taskGetPriority(currentId, &currentPrio);
 800ce72:	897b      	ldrh	r3, [r7, #10]
 800ce74:	f107 0208 	add.w	r2, r7, #8
 800ce78:	4611      	mov	r1, r2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fe fc82 	bl	800b784 <gos_taskGetPriority>
            ownerId = pMutex->owner;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	885b      	ldrh	r3, [r3, #2]
 800ce84:	82bb      	strh	r3, [r7, #20]

            // If the current task has a higher priority,
            // then modify the owner priority.
            if (currentPrio < ownerPrio)
 800ce86:	7a3a      	ldrb	r2, [r7, #8]
 800ce88:	7a7b      	ldrb	r3, [r7, #9]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d230      	bcs.n	800cef0 <gos_mutexLock+0x178>
            {
                // Add temporary priority.
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 800ce8e:	4b3c      	ldr	r3, [pc, #240]	; (800cf80 <gos_mutexLock+0x208>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d105      	bne.n	800cea2 <gos_mutexLock+0x12a>
 800ce96:	4b39      	ldr	r3, [pc, #228]	; (800cf7c <gos_mutexLock+0x204>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	4b37      	ldr	r3, [pc, #220]	; (800cf7c <gos_mutexLock+0x204>)
 800cea0:	701a      	strb	r2, [r3, #0]
 800cea2:	4b37      	ldr	r3, [pc, #220]	; (800cf80 <gos_mutexLock+0x208>)
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	3301      	adds	r3, #1
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	4b35      	ldr	r3, [pc, #212]	; (800cf80 <gos_mutexLock+0x208>)
 800ceac:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(pMutex->owner, currentPrio);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	885b      	ldrh	r3, [r3, #2]
 800ceb2:	7a3a      	ldrb	r2, [r7, #8]
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fe fadc 	bl	800b474 <gos_taskSetPriority>
                GOS_ISR_EXIT
 800cebc:	4b30      	ldr	r3, [pc, #192]	; (800cf80 <gos_mutexLock+0x208>)
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d005      	beq.n	800ced0 <gos_mutexLock+0x158>
 800cec4:	4b2e      	ldr	r3, [pc, #184]	; (800cf80 <gos_mutexLock+0x208>)
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	b2da      	uxtb	r2, r3
 800cecc:	4b2c      	ldr	r3, [pc, #176]	; (800cf80 <gos_mutexLock+0x208>)
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	4b2b      	ldr	r3, [pc, #172]	; (800cf80 <gos_mutexLock+0x208>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d109      	bne.n	800ceec <gos_mutexLock+0x174>
 800ced8:	4b28      	ldr	r3, [pc, #160]	; (800cf7c <gos_mutexLock+0x204>)
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d005      	beq.n	800ceec <gos_mutexLock+0x174>
 800cee0:	4b26      	ldr	r3, [pc, #152]	; (800cf7c <gos_mutexLock+0x204>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	4b24      	ldr	r3, [pc, #144]	; (800cf7c <gos_mutexLock+0x204>)
 800ceea:	701a      	strb	r2, [r3, #0]

                prioChanged = GOS_TRUE;
 800ceec:	2336      	movs	r3, #54	; 0x36
 800ceee:	74fb      	strb	r3, [r7, #19]
                // There is no priority inversion.
            }
#endif
        }

        GOS_ATOMIC_EXIT
 800cef0:	4b20      	ldr	r3, [pc, #128]	; (800cf74 <gos_mutexLock+0x1fc>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d005      	beq.n	800cf04 <gos_mutexLock+0x18c>
 800cef8:	4b1e      	ldr	r3, [pc, #120]	; (800cf74 <gos_mutexLock+0x1fc>)
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	4b1c      	ldr	r3, [pc, #112]	; (800cf74 <gos_mutexLock+0x1fc>)
 800cf02:	701a      	strb	r2, [r3, #0]
 800cf04:	4b1b      	ldr	r3, [pc, #108]	; (800cf74 <gos_mutexLock+0x1fc>)
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d108      	bne.n	800cf1e <gos_mutexLock+0x1a6>
 800cf0c:	4b1a      	ldr	r3, [pc, #104]	; (800cf78 <gos_mutexLock+0x200>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f383 8810 	msr	PRIMASK, r3
 800cf14:	b662      	cpsie	i
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	4b17      	ldr	r3, [pc, #92]	; (800cf7c <gos_mutexLock+0x204>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d005      	beq.n	800cf32 <gos_mutexLock+0x1ba>
 800cf26:	4b15      	ldr	r3, [pc, #84]	; (800cf7c <gos_mutexLock+0x204>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	4b13      	ldr	r3, [pc, #76]	; (800cf7c <gos_mutexLock+0x204>)
 800cf30:	701a      	strb	r2, [r3, #0]

        if (lockResult == GOS_SUCCESS)
 800cf32:	7dfb      	ldrb	r3, [r7, #23]
 800cf34:	2b55      	cmp	r3, #85	; 0x55
 800cf36:	d017      	beq.n	800cf68 <gos_mutexLock+0x1f0>
        {
            break;
        }
        else
        {
            if (timeout > 0u)
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d002      	beq.n	800cf44 <gos_mutexLock+0x1cc>
            {
                (void_t) gos_taskSleep(MUTEX_LOCK_SLEEP_MS);
 800cf3e:	2002      	movs	r0, #2
 800cf40:	f7fd fc5c 	bl	800a7fc <gos_taskSleep>
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00f      	beq.n	800cf6a <gos_mutexLock+0x1f2>
 800cf4a:	f7fc faa7 	bl	800949c <gos_kernelGetSysTicks>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	683a      	ldr	r2, [r7, #0]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	f4bf af25 	bcs.w	800cda6 <gos_mutexLock+0x2e>
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf62:	f43f af20 	beq.w	800cda6 <gos_mutexLock+0x2e>
 800cf66:	e000      	b.n	800cf6a <gos_mutexLock+0x1f2>
            break;
 800cf68:	bf00      	nop
                // Zero timeout, no sleep needed.
            }
        }
    }

    return lockResult;
 800cf6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3718      	adds	r7, #24
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20002bb3 	.word	0x20002bb3
 800cf78:	20002bb4 	.word	0x20002bb4
 800cf7c:	20002bb1 	.word	0x20002bb1
 800cf80:	20002bb2 	.word	0x20002bb2

0800cf84 <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
gos_result_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 800cf8c:	23ae      	movs	r3, #174	; 0xae
 800cf8e:	73fb      	strb	r3, [r7, #15]
    gos_tid_t    currentTask  = GOS_INVALID_TASK_ID;
 800cf90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf94:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d04c      	beq.n	800d036 <gos_mutexUnlock+0xb2>
    {
        GOS_ATOMIC_ENTER
 800cf9c:	4b28      	ldr	r3, [pc, #160]	; (800d040 <gos_mutexUnlock+0xbc>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d108      	bne.n	800cfb6 <gos_mutexUnlock+0x32>
 800cfa4:	b672      	cpsid	i
 800cfa6:	f3ef 8310 	mrs	r3, PRIMASK
 800cfaa:	4a26      	ldr	r2, [pc, #152]	; (800d044 <gos_mutexUnlock+0xc0>)
 800cfac:	6013      	str	r3, [r2, #0]
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	4b22      	ldr	r3, [pc, #136]	; (800d040 <gos_mutexUnlock+0xbc>)
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	4b20      	ldr	r3, [pc, #128]	; (800d040 <gos_mutexUnlock+0xbc>)
 800cfc0:	701a      	strb	r2, [r3, #0]
 800cfc2:	4b21      	ldr	r3, [pc, #132]	; (800d048 <gos_mutexUnlock+0xc4>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	4b1f      	ldr	r3, [pc, #124]	; (800d048 <gos_mutexUnlock+0xc4>)
 800cfcc:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentTask);
 800cfce:	f107 030c 	add.w	r3, r7, #12
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe fe52 	bl	800bc7c <gos_taskGetCurrentId>

        if (pMutex->owner == currentTask)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	885a      	ldrh	r2, [r3, #2]
 800cfdc:	89bb      	ldrh	r3, [r7, #12]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d108      	bne.n	800cff4 <gos_mutexUnlock+0x70>
        {
            pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	22d2      	movs	r2, #210	; 0xd2
 800cfe6:	701a      	strb	r2, [r3, #0]
            pMutex->owner      = GOS_INVALID_TASK_ID;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfee:	805a      	strh	r2, [r3, #2]
            unlockResult       = GOS_SUCCESS;
 800cff0:	2355      	movs	r3, #85	; 0x55
 800cff2:	73fb      	strb	r3, [r7, #15]
        else
        {
            // Only the owner can unlock it.
        }

        GOS_ATOMIC_EXIT
 800cff4:	4b12      	ldr	r3, [pc, #72]	; (800d040 <gos_mutexUnlock+0xbc>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d005      	beq.n	800d008 <gos_mutexUnlock+0x84>
 800cffc:	4b10      	ldr	r3, [pc, #64]	; (800d040 <gos_mutexUnlock+0xbc>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	3b01      	subs	r3, #1
 800d002:	b2da      	uxtb	r2, r3
 800d004:	4b0e      	ldr	r3, [pc, #56]	; (800d040 <gos_mutexUnlock+0xbc>)
 800d006:	701a      	strb	r2, [r3, #0]
 800d008:	4b0d      	ldr	r3, [pc, #52]	; (800d040 <gos_mutexUnlock+0xbc>)
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d108      	bne.n	800d022 <gos_mutexUnlock+0x9e>
 800d010:	4b0c      	ldr	r3, [pc, #48]	; (800d044 <gos_mutexUnlock+0xc0>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f383 8810 	msr	PRIMASK, r3
 800d018:	b662      	cpsie	i
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	4b09      	ldr	r3, [pc, #36]	; (800d048 <gos_mutexUnlock+0xc4>)
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d005      	beq.n	800d036 <gos_mutexUnlock+0xb2>
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <gos_mutexUnlock+0xc4>)
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	3b01      	subs	r3, #1
 800d030:	b2da      	uxtb	r2, r3
 800d032:	4b05      	ldr	r3, [pc, #20]	; (800d048 <gos_mutexUnlock+0xc4>)
 800d034:	701a      	strb	r2, [r3, #0]
    else
    {
        // Null pointer.
    }

    return unlockResult;
 800d036:	7bfb      	ldrb	r3, [r7, #15]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	20002bb3 	.word	0x20002bb3
 800d044:	20002bb4 	.word	0x20002bb4
 800d048:	20002bb1 	.word	0x20002bb1

0800d04c <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_SUCCESS;
 800d052:	2355      	movs	r3, #85	; 0x55
 800d054:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 800d056:	2300      	movs	r3, #0
 800d058:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 800d05a:	2300      	movs	r3, #0
 800d05c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800d05e:	2300      	movs	r3, #0
 800d060:	71fb      	strb	r3, [r7, #7]
 800d062:	e038      	b.n	800d0d6 <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 800d064:	79fb      	ldrb	r3, [r7, #7]
 800d066:	4a22      	ldr	r2, [pc, #136]	; (800d0f0 <gos_queueInit+0xa4>)
 800d068:	2100      	movs	r1, #0
 800d06a:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 800d06c:	79fb      	ldrb	r3, [r7, #7]
 800d06e:	4a21      	ldr	r2, [pc, #132]	; (800d0f4 <gos_queueInit+0xa8>)
 800d070:	2100      	movs	r1, #0
 800d072:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 800d074:	79fb      	ldrb	r3, [r7, #7]
 800d076:	4a20      	ldr	r2, [pc, #128]	; (800d0f8 <gos_queueInit+0xac>)
 800d078:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d07c:	fb01 f303 	mul.w	r3, r1, r3
 800d080:	4413      	add	r3, r2
 800d082:	f44f 7240 	mov.w	r2, #768	; 0x300
 800d086:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	4a1b      	ldr	r2, [pc, #108]	; (800d0f8 <gos_queueInit+0xac>)
 800d08c:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d090:	fb01 f303 	mul.w	r3, r1, r3
 800d094:	4413      	add	r3, r2
 800d096:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 800d09a:	3302      	adds	r3, #2
 800d09c:	2200      	movs	r2, #0
 800d09e:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	71bb      	strb	r3, [r7, #6]
 800d0a4:	e011      	b.n	800d0ca <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 800d0a6:	79fb      	ldrb	r3, [r7, #7]
 800d0a8:	79ba      	ldrb	r2, [r7, #6]
 800d0aa:	4913      	ldr	r1, [pc, #76]	; (800d0f8 <gos_queueInit+0xac>)
 800d0ac:	20c9      	movs	r0, #201	; 0xc9
 800d0ae:	fb00 f202 	mul.w	r2, r0, r2
 800d0b2:	f641 7084 	movw	r0, #8068	; 0x1f84
 800d0b6:	fb00 f303 	mul.w	r3, r0, r3
 800d0ba:	4413      	add	r3, r2
 800d0bc:	440b      	add	r3, r1
 800d0be:	33e2      	adds	r3, #226	; 0xe2
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 800d0c4:	79bb      	ldrb	r3, [r7, #6]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	71bb      	strb	r3, [r7, #6]
 800d0ca:	79bb      	ldrb	r3, [r7, #6]
 800d0cc:	2b27      	cmp	r3, #39	; 0x27
 800d0ce:	d9ea      	bls.n	800d0a6 <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800d0d0:	79fb      	ldrb	r3, [r7, #7]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	71fb      	strb	r3, [r7, #7]
 800d0d6:	79fb      	ldrb	r3, [r7, #7]
 800d0d8:	2b03      	cmp	r3, #3
 800d0da:	d9c3      	bls.n	800d064 <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 800d0dc:	4807      	ldr	r0, [pc, #28]	; (800d0fc <gos_queueInit+0xb0>)
 800d0de:	f7ff fe31 	bl	800cd44 <gos_mutexInit>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 800d0e6:	797b      	ldrb	r3, [r7, #5]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	2000ae70 	.word	0x2000ae70
 800d0f4:	2000ae74 	.word	0x2000ae74
 800d0f8:	20003060 	.word	0x20003060
 800d0fc:	2000ae78 	.word	0x2000ae78

0800d100 <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 800d108:	23ae      	movs	r3, #174	; 0xae
 800d10a:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 800d10c:	2300      	movs	r3, #0
 800d10e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d048      	beq.n	800d1a8 <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800d116:	2300      	movs	r3, #0
 800d118:	73bb      	strb	r3, [r7, #14]
 800d11a:	e042      	b.n	800d1a2 <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 800d11c:	7bbb      	ldrb	r3, [r7, #14]
 800d11e:	4a25      	ldr	r2, [pc, #148]	; (800d1b4 <gos_queueCreate+0xb4>)
 800d120:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d124:	fb01 f303 	mul.w	r3, r1, r3
 800d128:	4413      	add	r3, r2
 800d12a:	881b      	ldrh	r3, [r3, #0]
 800d12c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d130:	d134      	bne.n	800d19c <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 800d132:	7bbb      	ldrb	r3, [r7, #14]
 800d134:	b29a      	uxth	r2, r3
 800d136:	7bbb      	ldrb	r3, [r7, #14]
 800d138:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 800d13c:	b290      	uxth	r0, r2
 800d13e:	4a1d      	ldr	r2, [pc, #116]	; (800d1b4 <gos_queueCreate+0xb4>)
 800d140:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d144:	fb01 f303 	mul.w	r3, r1, r3
 800d148:	4413      	add	r3, r2
 800d14a:	4602      	mov	r2, r0
 800d14c:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 800d14e:	7bbb      	ldrb	r3, [r7, #14]
 800d150:	4a18      	ldr	r2, [pc, #96]	; (800d1b4 <gos_queueCreate+0xb4>)
 800d152:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d156:	fb01 f303 	mul.w	r3, r1, r3
 800d15a:	4413      	add	r3, r2
 800d15c:	881a      	ldrh	r2, [r3, #0]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	3302      	adds	r3, #2
 800d166:	2b00      	cmp	r3, #0
 800d168:	d015      	beq.n	800d196 <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	3302      	adds	r3, #2
 800d16e:	4618      	mov	r0, r3
 800d170:	f7f3 f8ae 	bl	80002d0 <strlen>
 800d174:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 800d176:	2b18      	cmp	r3, #24
 800d178:	d80d      	bhi.n	800d196 <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 800d17a:	7bbb      	ldrb	r3, [r7, #14]
 800d17c:	f641 7284 	movw	r2, #8068	; 0x1f84
 800d180:	fb02 f303 	mul.w	r3, r2, r3
 800d184:	4a0b      	ldr	r2, [pc, #44]	; (800d1b4 <gos_queueCreate+0xb4>)
 800d186:	4413      	add	r3, r2
 800d188:	1c9a      	adds	r2, r3, #2
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	3302      	adds	r3, #2
 800d18e:	4619      	mov	r1, r3
 800d190:	4610      	mov	r0, r2
 800d192:	f003 fb76 	bl	8010882 <strcpy>
                else
                {
                    // Nothing to do.
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 800d196:	2355      	movs	r3, #85	; 0x55
 800d198:	73fb      	strb	r3, [r7, #15]
                break;
 800d19a:	e005      	b.n	800d1a8 <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800d19c:	7bbb      	ldrb	r3, [r7, #14]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	73bb      	strb	r3, [r7, #14]
 800d1a2:	7bbb      	ldrb	r3, [r7, #14]
 800d1a4:	2b03      	cmp	r3, #3
 800d1a6:	d9b9      	bls.n	800d11c <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 800d1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	20003060 	.word	0x20003060

0800d1b8 <gos_queuePut>:
 */
gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b086      	sub	sp, #24
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60b9      	str	r1, [r7, #8]
 800d1c0:	607b      	str	r3, [r7, #4]
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	81fb      	strh	r3, [r7, #14]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 800d1ca:	23ae      	movs	r3, #174	; 0xae
 800d1cc:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 800d1d2:	6879      	ldr	r1, [r7, #4]
 800d1d4:	485a      	ldr	r0, [pc, #360]	; (800d340 <gos_queuePut+0x188>)
 800d1d6:	f7ff fdcf 	bl	800cd78 <gos_mutexLock>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b55      	cmp	r3, #85	; 0x55
 800d1de:	f040 80a7 	bne.w	800d330 <gos_queuePut+0x178>
 800d1e2:	89fb      	ldrh	r3, [r7, #14]
 800d1e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d1e8:	f0c0 80a2 	bcc.w	800d330 <gos_queuePut+0x178>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 800d1ec:	89fb      	ldrh	r3, [r7, #14]
 800d1ee:	f243 0203 	movw	r2, #12291	; 0x3003
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	f200 809c 	bhi.w	800d330 <gos_queuePut+0x178>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f000 8098 	beq.w	800d330 <gos_queuePut+0x178>
        element                                          != NULL                 &&
 800d200:	7b7b      	ldrb	r3, [r7, #13]
 800d202:	2bc8      	cmp	r3, #200	; 0xc8
 800d204:	f200 8094 	bhi.w	800d330 <gos_queuePut+0x178>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 800d208:	89fb      	ldrh	r3, [r7, #14]
 800d20a:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 800d20e:	4a4d      	ldr	r2, [pc, #308]	; (800d344 <gos_queuePut+0x18c>)
 800d210:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d214:	fb01 f303 	mul.w	r3, r1, r3
 800d218:	4413      	add	r3, r2
 800d21a:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 800d21c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d220:	f000 8086 	beq.w	800d330 <gos_queuePut+0x178>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 800d224:	89fb      	ldrh	r3, [r7, #14]
 800d226:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 800d228:	7dbb      	ldrb	r3, [r7, #22]
 800d22a:	4a47      	ldr	r2, [pc, #284]	; (800d348 <gos_queuePut+0x190>)
 800d22c:	5cd3      	ldrb	r3, [r2, r3]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d009      	beq.n	800d246 <gos_queuePut+0x8e>
 800d232:	7dbb      	ldrb	r3, [r7, #22]
 800d234:	4a45      	ldr	r2, [pc, #276]	; (800d34c <gos_queuePut+0x194>)
 800d236:	5cd3      	ldrb	r3, [r2, r3]
 800d238:	4619      	mov	r1, r3
 800d23a:	7dbb      	ldrb	r3, [r7, #22]
 800d23c:	4a42      	ldr	r2, [pc, #264]	; (800d348 <gos_queuePut+0x190>)
 800d23e:	5cd3      	ldrb	r3, [r2, r3]
 800d240:	3b01      	subs	r3, #1
 800d242:	4299      	cmp	r1, r3
 800d244:	d109      	bne.n	800d25a <gos_queuePut+0xa2>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 800d246:	7dbb      	ldrb	r3, [r7, #22]
 800d248:	4a3f      	ldr	r2, [pc, #252]	; (800d348 <gos_queuePut+0x190>)
 800d24a:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d16f      	bne.n	800d330 <gos_queuePut+0x178>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 800d250:	7dbb      	ldrb	r3, [r7, #22]
 800d252:	4a3e      	ldr	r2, [pc, #248]	; (800d34c <gos_queuePut+0x194>)
 800d254:	5cd3      	ldrb	r3, [r2, r3]
 800d256:	2b27      	cmp	r3, #39	; 0x27
 800d258:	d06a      	beq.n	800d330 <gos_queuePut+0x178>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 800d25a:	7dbb      	ldrb	r3, [r7, #22]
 800d25c:	7dba      	ldrb	r2, [r7, #22]
 800d25e:	493b      	ldr	r1, [pc, #236]	; (800d34c <gos_queuePut+0x194>)
 800d260:	5c8a      	ldrb	r2, [r1, r2]
 800d262:	4611      	mov	r1, r2
 800d264:	22c9      	movs	r2, #201	; 0xc9
 800d266:	fb01 f202 	mul.w	r2, r1, r2
 800d26a:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d26e:	fb01 f303 	mul.w	r3, r1, r3
 800d272:	4413      	add	r3, r2
 800d274:	3318      	adds	r3, #24
 800d276:	4a33      	ldr	r2, [pc, #204]	; (800d344 <gos_queuePut+0x18c>)
 800d278:	4413      	add	r3, r2
 800d27a:	3302      	adds	r3, #2
            (void_t) memcpy(
 800d27c:	7b7a      	ldrb	r2, [r7, #13]
 800d27e:	68b9      	ldr	r1, [r7, #8]
 800d280:	4618      	mov	r0, r3
 800d282:	f003 fb06 	bl	8010892 <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 800d286:	7dbb      	ldrb	r3, [r7, #22]
 800d288:	7dba      	ldrb	r2, [r7, #22]
 800d28a:	4930      	ldr	r1, [pc, #192]	; (800d34c <gos_queuePut+0x194>)
 800d28c:	5c8a      	ldrb	r2, [r1, r2]
 800d28e:	4610      	mov	r0, r2
 800d290:	492c      	ldr	r1, [pc, #176]	; (800d344 <gos_queuePut+0x18c>)
 800d292:	22c9      	movs	r2, #201	; 0xc9
 800d294:	fb00 f202 	mul.w	r2, r0, r2
 800d298:	f641 7084 	movw	r0, #8068	; 0x1f84
 800d29c:	fb00 f303 	mul.w	r3, r0, r3
 800d2a0:	4413      	add	r3, r2
 800d2a2:	440b      	add	r3, r1
 800d2a4:	33e2      	adds	r3, #226	; 0xe2
 800d2a6:	7b7a      	ldrb	r2, [r7, #13]
 800d2a8:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 800d2aa:	7dbb      	ldrb	r3, [r7, #22]
 800d2ac:	4a27      	ldr	r2, [pc, #156]	; (800d34c <gos_queuePut+0x194>)
 800d2ae:	5cd2      	ldrb	r2, [r2, r3]
 800d2b0:	3201      	adds	r2, #1
 800d2b2:	b2d1      	uxtb	r1, r2
 800d2b4:	4a25      	ldr	r2, [pc, #148]	; (800d34c <gos_queuePut+0x194>)
 800d2b6:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 800d2b8:	7dba      	ldrb	r2, [r7, #22]
 800d2ba:	4922      	ldr	r1, [pc, #136]	; (800d344 <gos_queuePut+0x18c>)
 800d2bc:	f641 7384 	movw	r3, #8068	; 0x1f84
 800d2c0:	fb02 f303 	mul.w	r3, r2, r3
 800d2c4:	440b      	add	r3, r1
 800d2c6:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 800d2ca:	3302      	adds	r3, #2
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	b2d8      	uxtb	r0, r3
 800d2d2:	491c      	ldr	r1, [pc, #112]	; (800d344 <gos_queuePut+0x18c>)
 800d2d4:	f641 7384 	movw	r3, #8068	; 0x1f84
 800d2d8:	fb02 f303 	mul.w	r3, r2, r3
 800d2dc:	440b      	add	r3, r1
 800d2de:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 800d2e2:	3302      	adds	r3, #2
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 800d2e8:	7dbb      	ldrb	r3, [r7, #22]
 800d2ea:	4a18      	ldr	r2, [pc, #96]	; (800d34c <gos_queuePut+0x194>)
 800d2ec:	5cd3      	ldrb	r3, [r2, r3]
 800d2ee:	2b27      	cmp	r3, #39	; 0x27
 800d2f0:	d903      	bls.n	800d2fa <gos_queuePut+0x142>
            {
                writeCounters[queueIndex] = 0u;
 800d2f2:	7dbb      	ldrb	r3, [r7, #22]
 800d2f4:	4a15      	ldr	r2, [pc, #84]	; (800d34c <gos_queuePut+0x194>)
 800d2f6:	2100      	movs	r1, #0
 800d2f8:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 800d2fa:	7dbb      	ldrb	r3, [r7, #22]
 800d2fc:	4a11      	ldr	r2, [pc, #68]	; (800d344 <gos_queuePut+0x18c>)
 800d2fe:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d302:	fb01 f303 	mul.w	r3, r1, r3
 800d306:	4413      	add	r3, r2
 800d308:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 800d30c:	3302      	adds	r3, #2
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b27      	cmp	r3, #39	; 0x27
 800d312:	d10b      	bne.n	800d32c <gos_queuePut+0x174>
                queueFullHook != NULL)
 800d314:	4b0e      	ldr	r3, [pc, #56]	; (800d350 <gos_queuePut+0x198>)
 800d316:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d007      	beq.n	800d32c <gos_queuePut+0x174>
            {
                gos_mutexUnlock(&queueMutex);
 800d31c:	4808      	ldr	r0, [pc, #32]	; (800d340 <gos_queuePut+0x188>)
 800d31e:	f7ff fe31 	bl	800cf84 <gos_mutexUnlock>
                queueFullHook(queueId);
 800d322:	4b0b      	ldr	r3, [pc, #44]	; (800d350 <gos_queuePut+0x198>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	89fa      	ldrh	r2, [r7, #14]
 800d328:	4610      	mov	r0, r2
 800d32a:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 800d32c:	2355      	movs	r3, #85	; 0x55
 800d32e:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 800d330:	4803      	ldr	r0, [pc, #12]	; (800d340 <gos_queuePut+0x188>)
 800d332:	f7ff fe27 	bl	800cf84 <gos_mutexUnlock>

    return queuePutResult;
 800d336:	7dfb      	ldrb	r3, [r7, #23]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3718      	adds	r7, #24
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	2000ae78 	.word	0x2000ae78
 800d344:	20003060 	.word	0x20003060
 800d348:	2000ae70 	.word	0x2000ae70
 800d34c:	2000ae74 	.word	0x2000ae74
 800d350:	2000ae7c 	.word	0x2000ae7c

0800d354 <gos_queueGet>:
 */
gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 800d354:	b590      	push	{r4, r7, lr}
 800d356:	b087      	sub	sp, #28
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60b9      	str	r1, [r7, #8]
 800d35c:	607b      	str	r3, [r7, #4]
 800d35e:	4603      	mov	r3, r0
 800d360:	81fb      	strh	r3, [r7, #14]
 800d362:	4613      	mov	r3, r2
 800d364:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 800d366:	23ae      	movs	r3, #174	; 0xae
 800d368:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 800d36a:	2300      	movs	r3, #0
 800d36c:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 800d36e:	6879      	ldr	r1, [r7, #4]
 800d370:	4864      	ldr	r0, [pc, #400]	; (800d504 <gos_queueGet+0x1b0>)
 800d372:	f7ff fd01 	bl	800cd78 <gos_mutexLock>
 800d376:	4603      	mov	r3, r0
 800d378:	2b55      	cmp	r3, #85	; 0x55
 800d37a:	f040 80bb 	bne.w	800d4f4 <gos_queueGet+0x1a0>
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	2b00      	cmp	r3, #0
 800d382:	f000 80b7 	beq.w	800d4f4 <gos_queueGet+0x1a0>
        target                                           != NULL                 &&
 800d386:	89fb      	ldrh	r3, [r7, #14]
 800d388:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d38c:	f0c0 80b2 	bcc.w	800d4f4 <gos_queueGet+0x1a0>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 800d390:	89fb      	ldrh	r3, [r7, #14]
 800d392:	f243 0203 	movw	r2, #12291	; 0x3003
 800d396:	4293      	cmp	r3, r2
 800d398:	f200 80ac 	bhi.w	800d4f4 <gos_queueGet+0x1a0>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 800d39c:	89fb      	ldrh	r3, [r7, #14]
 800d39e:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 800d3a2:	4a59      	ldr	r2, [pc, #356]	; (800d508 <gos_queueGet+0x1b4>)
 800d3a4:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d3a8:	fb01 f303 	mul.w	r3, r1, r3
 800d3ac:	4413      	add	r3, r2
 800d3ae:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 800d3b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d3b4:	f000 809e 	beq.w	800d4f4 <gos_queueGet+0x1a0>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 800d3b8:	89fb      	ldrh	r3, [r7, #14]
 800d3ba:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 800d3be:	89fa      	ldrh	r2, [r7, #14]
 800d3c0:	f5a2 5240 	sub.w	r2, r2, #12288	; 0x3000
 800d3c4:	4951      	ldr	r1, [pc, #324]	; (800d50c <gos_queueGet+0x1b8>)
 800d3c6:	5c8a      	ldrb	r2, [r1, r2]
 800d3c8:	4610      	mov	r0, r2
 800d3ca:	494f      	ldr	r1, [pc, #316]	; (800d508 <gos_queueGet+0x1b4>)
 800d3cc:	22c9      	movs	r2, #201	; 0xc9
 800d3ce:	fb00 f202 	mul.w	r2, r0, r2
 800d3d2:	f641 7084 	movw	r0, #8068	; 0x1f84
 800d3d6:	fb00 f303 	mul.w	r3, r0, r3
 800d3da:	4413      	add	r3, r2
 800d3dc:	440b      	add	r3, r1
 800d3de:	33e2      	adds	r3, #226	; 0xe2
 800d3e0:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 800d3e2:	7b7a      	ldrb	r2, [r7, #13]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	f0c0 8085 	bcc.w	800d4f4 <gos_queueGet+0x1a0>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 800d3ea:	89fb      	ldrh	r3, [r7, #14]
 800d3ec:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 800d3ee:	7dbb      	ldrb	r3, [r7, #22]
 800d3f0:	4a46      	ldr	r2, [pc, #280]	; (800d50c <gos_queueGet+0x1b8>)
 800d3f2:	5cd2      	ldrb	r2, [r2, r3]
 800d3f4:	7dbb      	ldrb	r3, [r7, #22]
 800d3f6:	4946      	ldr	r1, [pc, #280]	; (800d510 <gos_queueGet+0x1bc>)
 800d3f8:	5ccb      	ldrb	r3, [r1, r3]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d07a      	beq.n	800d4f4 <gos_queueGet+0x1a0>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 800d3fe:	7dbb      	ldrb	r3, [r7, #22]
 800d400:	7dba      	ldrb	r2, [r7, #22]
 800d402:	4942      	ldr	r1, [pc, #264]	; (800d50c <gos_queueGet+0x1b8>)
 800d404:	5c8a      	ldrb	r2, [r1, r2]
 800d406:	4611      	mov	r1, r2
 800d408:	22c9      	movs	r2, #201	; 0xc9
 800d40a:	fb01 f202 	mul.w	r2, r1, r2
 800d40e:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d412:	fb01 f303 	mul.w	r3, r1, r3
 800d416:	4413      	add	r3, r2
 800d418:	3318      	adds	r3, #24
 800d41a:	4a3b      	ldr	r2, [pc, #236]	; (800d508 <gos_queueGet+0x1b4>)
 800d41c:	4413      	add	r3, r2
 800d41e:	1c99      	adds	r1, r3, #2
 800d420:	7dbb      	ldrb	r3, [r7, #22]
 800d422:	7dba      	ldrb	r2, [r7, #22]
 800d424:	4839      	ldr	r0, [pc, #228]	; (800d50c <gos_queueGet+0x1b8>)
 800d426:	5c82      	ldrb	r2, [r0, r2]
 800d428:	4614      	mov	r4, r2
 800d42a:	4837      	ldr	r0, [pc, #220]	; (800d508 <gos_queueGet+0x1b4>)
 800d42c:	22c9      	movs	r2, #201	; 0xc9
 800d42e:	fb04 f202 	mul.w	r2, r4, r2
 800d432:	f641 7484 	movw	r4, #8068	; 0x1f84
 800d436:	fb04 f303 	mul.w	r3, r4, r3
 800d43a:	4413      	add	r3, r2
 800d43c:	4403      	add	r3, r0
 800d43e:	33e2      	adds	r3, #226	; 0xe2
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	461a      	mov	r2, r3
 800d444:	68b8      	ldr	r0, [r7, #8]
 800d446:	f003 fa24 	bl	8010892 <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 800d44a:	7dbb      	ldrb	r3, [r7, #22]
 800d44c:	7dba      	ldrb	r2, [r7, #22]
 800d44e:	492f      	ldr	r1, [pc, #188]	; (800d50c <gos_queueGet+0x1b8>)
 800d450:	5c8a      	ldrb	r2, [r1, r2]
 800d452:	4610      	mov	r0, r2
 800d454:	492c      	ldr	r1, [pc, #176]	; (800d508 <gos_queueGet+0x1b4>)
 800d456:	22c9      	movs	r2, #201	; 0xc9
 800d458:	fb00 f202 	mul.w	r2, r0, r2
 800d45c:	f641 7084 	movw	r0, #8068	; 0x1f84
 800d460:	fb00 f303 	mul.w	r3, r0, r3
 800d464:	4413      	add	r3, r2
 800d466:	440b      	add	r3, r1
 800d468:	33e2      	adds	r3, #226	; 0xe2
 800d46a:	2200      	movs	r2, #0
 800d46c:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 800d46e:	7dbb      	ldrb	r3, [r7, #22]
 800d470:	4a26      	ldr	r2, [pc, #152]	; (800d50c <gos_queueGet+0x1b8>)
 800d472:	5cd2      	ldrb	r2, [r2, r3]
 800d474:	3201      	adds	r2, #1
 800d476:	b2d1      	uxtb	r1, r2
 800d478:	4a24      	ldr	r2, [pc, #144]	; (800d50c <gos_queueGet+0x1b8>)
 800d47a:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 800d47c:	7dba      	ldrb	r2, [r7, #22]
 800d47e:	4922      	ldr	r1, [pc, #136]	; (800d508 <gos_queueGet+0x1b4>)
 800d480:	f641 7384 	movw	r3, #8068	; 0x1f84
 800d484:	fb02 f303 	mul.w	r3, r2, r3
 800d488:	440b      	add	r3, r1
 800d48a:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 800d48e:	3302      	adds	r3, #2
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	3b01      	subs	r3, #1
 800d494:	b2d8      	uxtb	r0, r3
 800d496:	491c      	ldr	r1, [pc, #112]	; (800d508 <gos_queueGet+0x1b4>)
 800d498:	f641 7384 	movw	r3, #8068	; 0x1f84
 800d49c:	fb02 f303 	mul.w	r3, r2, r3
 800d4a0:	440b      	add	r3, r1
 800d4a2:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 800d4a6:	3302      	adds	r3, #2
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 800d4ac:	7dbb      	ldrb	r3, [r7, #22]
 800d4ae:	4a17      	ldr	r2, [pc, #92]	; (800d50c <gos_queueGet+0x1b8>)
 800d4b0:	5cd3      	ldrb	r3, [r2, r3]
 800d4b2:	2b27      	cmp	r3, #39	; 0x27
 800d4b4:	d903      	bls.n	800d4be <gos_queueGet+0x16a>
            {
                readCounters[queueIndex] = 0u;
 800d4b6:	7dbb      	ldrb	r3, [r7, #22]
 800d4b8:	4a14      	ldr	r2, [pc, #80]	; (800d50c <gos_queueGet+0x1b8>)
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 800d4be:	7dbb      	ldrb	r3, [r7, #22]
 800d4c0:	4a11      	ldr	r2, [pc, #68]	; (800d508 <gos_queueGet+0x1b4>)
 800d4c2:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d4c6:	fb01 f303 	mul.w	r3, r1, r3
 800d4ca:	4413      	add	r3, r2
 800d4cc:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 800d4d0:	3302      	adds	r3, #2
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d10b      	bne.n	800d4f0 <gos_queueGet+0x19c>
                queueEmptyHook != NULL)
 800d4d8:	4b0e      	ldr	r3, [pc, #56]	; (800d514 <gos_queueGet+0x1c0>)
 800d4da:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d007      	beq.n	800d4f0 <gos_queueGet+0x19c>
            {
                gos_mutexUnlock(&queueMutex);
 800d4e0:	4808      	ldr	r0, [pc, #32]	; (800d504 <gos_queueGet+0x1b0>)
 800d4e2:	f7ff fd4f 	bl	800cf84 <gos_mutexUnlock>
                queueEmptyHook(queueId);
 800d4e6:	4b0b      	ldr	r3, [pc, #44]	; (800d514 <gos_queueGet+0x1c0>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	89fa      	ldrh	r2, [r7, #14]
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 800d4f0:	2355      	movs	r3, #85	; 0x55
 800d4f2:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 800d4f4:	4803      	ldr	r0, [pc, #12]	; (800d504 <gos_queueGet+0x1b0>)
 800d4f6:	f7ff fd45 	bl	800cf84 <gos_mutexUnlock>

    return queueGetResult;
 800d4fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	371c      	adds	r7, #28
 800d500:	46bd      	mov	sp, r7
 800d502:	bd90      	pop	{r4, r7, pc}
 800d504:	2000ae78 	.word	0x2000ae78
 800d508:	20003060 	.word	0x20003060
 800d50c:	2000ae70 	.word	0x2000ae70
 800d510:	2000ae74 	.word	0x2000ae74
 800d514:	2000ae80 	.word	0x2000ae80

0800d518 <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 800d518:	b590      	push	{r4, r7, lr}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 800d51e:	2300      	movs	r3, #0
 800d520:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 800d522:	4826      	ldr	r0, [pc, #152]	; (800d5bc <gos_queueDump+0xa4>)
 800d524:	f002 fa82 	bl	800fa2c <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 800d528:	4825      	ldr	r0, [pc, #148]	; (800d5c0 <gos_queueDump+0xa8>)
 800d52a:	f002 fa7f 	bl	800fa2c <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 800d52e:	4b25      	ldr	r3, [pc, #148]	; (800d5c4 <gos_queueDump+0xac>)
 800d530:	4a25      	ldr	r2, [pc, #148]	; (800d5c8 <gos_queueDump+0xb0>)
 800d532:	4926      	ldr	r1, [pc, #152]	; (800d5cc <gos_queueDump+0xb4>)
 800d534:	4826      	ldr	r0, [pc, #152]	; (800d5d0 <gos_queueDump+0xb8>)
 800d536:	f002 fa79 	bl	800fa2c <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 800d53a:	4821      	ldr	r0, [pc, #132]	; (800d5c0 <gos_queueDump+0xa8>)
 800d53c:	f002 fa76 	bl	800fa2c <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800d540:	2300      	movs	r3, #0
 800d542:	71fb      	strb	r3, [r7, #7]
 800d544:	e02d      	b.n	800d5a2 <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 800d546:	79fb      	ldrb	r3, [r7, #7]
 800d548:	4a22      	ldr	r2, [pc, #136]	; (800d5d4 <gos_queueDump+0xbc>)
 800d54a:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d54e:	fb01 f303 	mul.w	r3, r1, r3
 800d552:	4413      	add	r3, r2
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d55a:	d026      	beq.n	800d5aa <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 800d55c:	79fb      	ldrb	r3, [r7, #7]
 800d55e:	4a1d      	ldr	r2, [pc, #116]	; (800d5d4 <gos_queueDump+0xbc>)
 800d560:	f641 7184 	movw	r1, #8068	; 0x1f84
 800d564:	fb01 f303 	mul.w	r3, r1, r3
 800d568:	4413      	add	r3, r2
 800d56a:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 800d56c:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 800d56e:	79fb      	ldrb	r3, [r7, #7]
 800d570:	f641 7284 	movw	r2, #8068	; 0x1f84
 800d574:	fb02 f303 	mul.w	r3, r2, r3
 800d578:	4a16      	ldr	r2, [pc, #88]	; (800d5d4 <gos_queueDump+0xbc>)
 800d57a:	4413      	add	r3, r2
 800d57c:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 800d57e:	79fb      	ldrb	r3, [r7, #7]
 800d580:	4914      	ldr	r1, [pc, #80]	; (800d5d4 <gos_queueDump+0xbc>)
 800d582:	f641 7084 	movw	r0, #8068	; 0x1f84
 800d586:	fb00 f303 	mul.w	r3, r0, r3
 800d58a:	440b      	add	r3, r1
 800d58c:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 800d590:	3302      	adds	r3, #2
 800d592:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 800d594:	4621      	mov	r1, r4
 800d596:	4810      	ldr	r0, [pc, #64]	; (800d5d8 <gos_queueDump+0xc0>)
 800d598:	f002 fa48 	bl	800fa2c <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800d59c:	79fb      	ldrb	r3, [r7, #7]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	71fb      	strb	r3, [r7, #7]
 800d5a2:	79fb      	ldrb	r3, [r7, #7]
 800d5a4:	2b03      	cmp	r3, #3
 800d5a6:	d9ce      	bls.n	800d546 <gos_queueDump+0x2e>
 800d5a8:	e000      	b.n	800d5ac <gos_queueDump+0x94>
            break;
 800d5aa:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 800d5ac:	480b      	ldr	r0, [pc, #44]	; (800d5dc <gos_queueDump+0xc4>)
 800d5ae:	f002 fa3d 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800d5b2:	bf00      	nop
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd90      	pop	{r4, r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	08013d94 	.word	0x08013d94
 800d5c0:	08013da4 	.word	0x08013da4
 800d5c4:	08013de0 	.word	0x08013de0
 800d5c8:	08013dec 	.word	0x08013dec
 800d5cc:	08013df4 	.word	0x08013df4
 800d5d0:	08013df8 	.word	0x08013df8
 800d5d4:	20003060 	.word	0x20003060
 800d5d8:	08013e10 	.word	0x08013e10
 800d5dc:	08013e2c 	.word	0x08013e2c

0800d5e0 <gos_shellInit>:

/*
 * Function: gos_shellInit
 */
gos_result_t gos_shellInit (void_t)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            shellInitResult = GOS_ERROR;
 800d5e6:	23ae      	movs	r3, #174	; 0xae
 800d5e8:	71fb      	strb	r3, [r7, #7]
    gos_shellCommandIndex_t index           = 0u;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    useEcho = GOS_TRUE;
 800d5ee:	4b15      	ldr	r3, [pc, #84]	; (800d644 <gos_shellInit+0x64>)
 800d5f0:	2236      	movs	r2, #54	; 0x36
 800d5f2:	701a      	strb	r2, [r3, #0]

    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	71bb      	strb	r3, [r7, #6]
 800d5f8:	e00c      	b.n	800d614 <gos_shellInit+0x34>
    {
        shellCommands[index].commandHandler = NULL;
 800d5fa:	79ba      	ldrb	r2, [r7, #6]
 800d5fc:	4912      	ldr	r1, [pc, #72]	; (800d648 <gos_shellInit+0x68>)
 800d5fe:	4613      	mov	r3, r2
 800d600:	00db      	lsls	r3, r3, #3
 800d602:	1a9b      	subs	r3, r3, r2
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	440b      	add	r3, r1
 800d608:	3314      	adds	r3, #20
 800d60a:	2200      	movs	r2, #0
 800d60c:	601a      	str	r2, [r3, #0]
    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800d60e:	79bb      	ldrb	r3, [r7, #6]
 800d610:	3301      	adds	r3, #1
 800d612:	71bb      	strb	r3, [r7, #6]
 800d614:	79bb      	ldrb	r3, [r7, #6]
 800d616:	2b0f      	cmp	r3, #15
 800d618:	d9ef      	bls.n	800d5fa <gos_shellInit+0x1a>
    }

    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 800d61a:	490c      	ldr	r1, [pc, #48]	; (800d64c <gos_shellInit+0x6c>)
 800d61c:	480c      	ldr	r0, [pc, #48]	; (800d650 <gos_shellInit+0x70>)
 800d61e:	f7fc ff5b 	bl	800a4d8 <gos_taskRegister>
 800d622:	4603      	mov	r3, r0
 800d624:	2b55      	cmp	r3, #85	; 0x55
 800d626:	d107      	bne.n	800d638 <gos_shellInit+0x58>
        gos_shellRegisterCommand(&shellCommand) == GOS_SUCCESS)
 800d628:	480a      	ldr	r0, [pc, #40]	; (800d654 <gos_shellInit+0x74>)
 800d62a:	f000 f815 	bl	800d658 <gos_shellRegisterCommand>
 800d62e:	4603      	mov	r3, r0
    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 800d630:	2b55      	cmp	r3, #85	; 0x55
 800d632:	d101      	bne.n	800d638 <gos_shellInit+0x58>
    {
        shellInitResult = GOS_SUCCESS;
 800d634:	2355      	movs	r3, #85	; 0x55
 800d636:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellInitResult;
 800d638:	79fb      	ldrb	r3, [r7, #7]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	2000b112 	.word	0x2000b112
 800d648:	2000ae84 	.word	0x2000ae84
 800d64c:	2000b044 	.word	0x2000b044
 800d650:	20001ad0 	.word	0x20001ad0
 800d654:	20001b3c 	.word	0x20001b3c

0800d658 <gos_shellRegisterCommand>:

/*
 * Function: gos_shellRegisterCommand
 */
gos_result_t gos_shellRegisterCommand (gos_shellCommand_t* command)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            shellRegisterCommandResult = GOS_ERROR;
 800d660:	23ae      	movs	r3, #174	; 0xae
 800d662:	73fb      	strb	r3, [r7, #15]
    gos_shellCommandIndex_t index                      = 0u;
 800d664:	2300      	movs	r3, #0
 800d666:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (command->commandHandler != NULL && command->command != NULL)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	695b      	ldr	r3, [r3, #20]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d03c      	beq.n	800d6ea <gos_shellRegisterCommand+0x92>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d039      	beq.n	800d6ea <gos_shellRegisterCommand+0x92>
    {
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800d676:	2300      	movs	r3, #0
 800d678:	73bb      	strb	r3, [r7, #14]
 800d67a:	e033      	b.n	800d6e4 <gos_shellRegisterCommand+0x8c>
        {
            if (shellCommands[index].commandHandler == NULL)
 800d67c:	7bba      	ldrb	r2, [r7, #14]
 800d67e:	491d      	ldr	r1, [pc, #116]	; (800d6f4 <gos_shellRegisterCommand+0x9c>)
 800d680:	4613      	mov	r3, r2
 800d682:	00db      	lsls	r3, r3, #3
 800d684:	1a9b      	subs	r3, r3, r2
 800d686:	009b      	lsls	r3, r3, #2
 800d688:	440b      	add	r3, r1
 800d68a:	3314      	adds	r3, #20
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d125      	bne.n	800d6de <gos_shellRegisterCommand+0x86>
            {
                shellCommands[index].commandHandler = command->commandHandler;
 800d692:	7bba      	ldrb	r2, [r7, #14]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6959      	ldr	r1, [r3, #20]
 800d698:	4816      	ldr	r0, [pc, #88]	; (800d6f4 <gos_shellRegisterCommand+0x9c>)
 800d69a:	4613      	mov	r3, r2
 800d69c:	00db      	lsls	r3, r3, #3
 800d69e:	1a9b      	subs	r3, r3, r2
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	4403      	add	r3, r0
 800d6a4:	3314      	adds	r3, #20
 800d6a6:	6019      	str	r1, [r3, #0]
                shellCommands[index].commandHandlerPrivileges = command->commandHandlerPrivileges;
 800d6a8:	7bba      	ldrb	r2, [r7, #14]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	8b18      	ldrh	r0, [r3, #24]
 800d6ae:	4911      	ldr	r1, [pc, #68]	; (800d6f4 <gos_shellRegisterCommand+0x9c>)
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	00db      	lsls	r3, r3, #3
 800d6b4:	1a9b      	subs	r3, r3, r2
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	440b      	add	r3, r1
 800d6ba:	3318      	adds	r3, #24
 800d6bc:	4602      	mov	r2, r0
 800d6be:	801a      	strh	r2, [r3, #0]
                (void_t) strcpy(shellCommands[index].command, command->command);
 800d6c0:	7bba      	ldrb	r2, [r7, #14]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	00db      	lsls	r3, r3, #3
 800d6c6:	1a9b      	subs	r3, r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4a0a      	ldr	r2, [pc, #40]	; (800d6f4 <gos_shellRegisterCommand+0x9c>)
 800d6cc:	4413      	add	r3, r2
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	4611      	mov	r1, r2
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f003 f8d5 	bl	8010882 <strcpy>
                shellRegisterCommandResult = GOS_SUCCESS;
 800d6d8:	2355      	movs	r3, #85	; 0x55
 800d6da:	73fb      	strb	r3, [r7, #15]
                break;
 800d6dc:	e005      	b.n	800d6ea <gos_shellRegisterCommand+0x92>
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800d6de:	7bbb      	ldrb	r3, [r7, #14]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	73bb      	strb	r3, [r7, #14]
 800d6e4:	7bbb      	ldrb	r3, [r7, #14]
 800d6e6:	2b0f      	cmp	r3, #15
 800d6e8:	d9c8      	bls.n	800d67c <gos_shellRegisterCommand+0x24>
            {
                // Nothing to do.
            }
        }
    }
    return shellRegisterCommandResult;
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	2000ae84 	.word	0x2000ae84

0800d6f8 <gos_shellSuspend>:

/*
 * Function: gos_shellSuspend
 */
gos_result_t gos_shellSuspend (void_t)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellSuspendResult = GOS_ERROR;
 800d6fe:	23ae      	movs	r3, #174	; 0xae
 800d700:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellSuspendResult = gos_taskSuspend(shellDaemonTaskId);
 800d702:	4b06      	ldr	r3, [pc, #24]	; (800d71c <gos_shellSuspend+0x24>)
 800d704:	881b      	ldrh	r3, [r3, #0]
 800d706:	4618      	mov	r0, r3
 800d708:	f7fd f9c4 	bl	800aa94 <gos_taskSuspend>
 800d70c:	4603      	mov	r3, r0
 800d70e:	71fb      	strb	r3, [r7, #7]

    return shellSuspendResult;
 800d710:	79fb      	ldrb	r3, [r7, #7]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3708      	adds	r7, #8
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	2000b044 	.word	0x2000b044

0800d720 <gos_shellResume>:

/*
 * Function: gos_shellResume
 */
gos_result_t gos_shellResume (void_t)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellResumeResult = GOS_ERROR;
 800d726:	23ae      	movs	r3, #174	; 0xae
 800d728:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellResumeResult = gos_taskResume(shellDaemonTaskId);
 800d72a:	4b06      	ldr	r3, [pc, #24]	; (800d744 <gos_shellResume+0x24>)
 800d72c:	881b      	ldrh	r3, [r3, #0]
 800d72e:	4618      	mov	r0, r3
 800d730:	f7fd fad2 	bl	800acd8 <gos_taskResume>
 800d734:	4603      	mov	r3, r0
 800d736:	71fb      	strb	r3, [r7, #7]

    return shellResumeResult;
 800d738:	79fb      	ldrb	r3, [r7, #7]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	2000b044 	.word	0x2000b044

0800d748 <gos_shellDaemonTask>:
 *          a string.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellDaemonTask (void_t)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_shellCommandIndex_t index              = 0u;
 800d74e:	2300      	movs	r3, #0
 800d750:	71fb      	strb	r3, [r7, #7]
    u16_t                   actualCommandIndex = 0u;
 800d752:	2300      	movs	r3, #0
 800d754:	80bb      	strh	r3, [r7, #4]
    u16_t                   paramIndex         = 0u;
 800d756:	2300      	movs	r3, #0
 800d758:	807b      	strh	r3, [r7, #2]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString(GOS_SHELL_DISPLAY_TEXT);
 800d75a:	4873      	ldr	r0, [pc, #460]	; (800d928 <gos_shellDaemonTask+0x1e0>)
 800d75c:	f002 f966 	bl	800fa2c <gos_shellDriverTransmitString>

    for (;;)
    {
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 800d760:	4b72      	ldr	r3, [pc, #456]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d762:	881b      	ldrh	r3, [r3, #0]
 800d764:	461a      	mov	r2, r3
 800d766:	4b72      	ldr	r3, [pc, #456]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d768:	4413      	add	r3, r2
 800d76a:	4618      	mov	r0, r3
 800d76c:	f002 f946 	bl	800f9fc <gos_shellDriverReceiveChar>
 800d770:	4603      	mov	r3, r0
 800d772:	2b55      	cmp	r3, #85	; 0x55
 800d774:	f040 80d3 	bne.w	800d91e <gos_shellDaemonTask+0x1d6>
        {
            if (useEcho == GOS_TRUE)
 800d778:	4b6e      	ldr	r3, [pc, #440]	; (800d934 <gos_shellDaemonTask+0x1ec>)
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	2b36      	cmp	r3, #54	; 0x36
 800d77e:	d107      	bne.n	800d790 <gos_shellDaemonTask+0x48>
            {
                (void_t) gos_shellDriverTransmitString(&commandBuffer[commandBufferIndex]);
 800d780:	4b6a      	ldr	r3, [pc, #424]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	461a      	mov	r2, r3
 800d786:	4b6a      	ldr	r3, [pc, #424]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d788:	4413      	add	r3, r2
 800d78a:	4618      	mov	r0, r3
 800d78c:	f002 f94e 	bl	800fa2c <gos_shellDriverTransmitString>
            }

            /*
             * Backspace character check
             */
            if (commandBuffer[commandBufferIndex] == '\177')
 800d790:	4b66      	ldr	r3, [pc, #408]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d792:	881b      	ldrh	r3, [r3, #0]
 800d794:	461a      	mov	r2, r3
 800d796:	4b66      	ldr	r3, [pc, #408]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d798:	5c9b      	ldrb	r3, [r3, r2]
 800d79a:	2b7f      	cmp	r3, #127	; 0x7f
 800d79c:	d10c      	bne.n	800d7b8 <gos_shellDaemonTask+0x70>
            {
                commandBuffer[commandBufferIndex] = '\0';
 800d79e:	4b63      	ldr	r3, [pc, #396]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	4b62      	ldr	r3, [pc, #392]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	5499      	strb	r1, [r3, r2]
                commandBufferIndex--;
 800d7aa:	4b60      	ldr	r3, [pc, #384]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	4b5e      	ldr	r3, [pc, #376]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d7b4:	801a      	strh	r2, [r3, #0]
 800d7b6:	e0b2      	b.n	800d91e <gos_shellDaemonTask+0x1d6>
            }
            /*
             * Enter character check
             */
            else if (commandBuffer[commandBufferIndex] == '\r')
 800d7b8:	4b5c      	ldr	r3, [pc, #368]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d7ba:	881b      	ldrh	r3, [r3, #0]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	4b5c      	ldr	r3, [pc, #368]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d7c0:	5c9b      	ldrb	r3, [r3, r2]
 800d7c2:	2b0d      	cmp	r3, #13
 800d7c4:	f040 8099 	bne.w	800d8fa <gos_shellDaemonTask+0x1b2>
            {
                if (useEcho == GOS_TRUE)
 800d7c8:	4b5a      	ldr	r3, [pc, #360]	; (800d934 <gos_shellDaemonTask+0x1ec>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	2b36      	cmp	r3, #54	; 0x36
 800d7ce:	d102      	bne.n	800d7d6 <gos_shellDaemonTask+0x8e>
                {
                    (void_t) gos_shellDriverTransmitString("\n");
 800d7d0:	4859      	ldr	r0, [pc, #356]	; (800d938 <gos_shellDaemonTask+0x1f0>)
 800d7d2:	f002 f92b 	bl	800fa2c <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                commandBuffer[commandBufferIndex] = '\0';
 800d7d6:	4b55      	ldr	r3, [pc, #340]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	4b54      	ldr	r3, [pc, #336]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d7de:	2100      	movs	r1, #0
 800d7e0:	5499      	strb	r1, [r3, r2]
                actualCommandIndex = 0u;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	80bb      	strh	r3, [r7, #4]
                paramIndex = 0u;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	807b      	strh	r3, [r7, #2]

                // Get command.
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 800d7ea:	e008      	b.n	800d7fe <gos_shellDaemonTask+0xb6>
                {
                    actualCommand[actualCommandIndex] = commandBuffer[actualCommandIndex];
 800d7ec:	88ba      	ldrh	r2, [r7, #4]
 800d7ee:	88bb      	ldrh	r3, [r7, #4]
 800d7f0:	494f      	ldr	r1, [pc, #316]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d7f2:	5c89      	ldrb	r1, [r1, r2]
 800d7f4:	4a51      	ldr	r2, [pc, #324]	; (800d93c <gos_shellDaemonTask+0x1f4>)
 800d7f6:	54d1      	strb	r1, [r2, r3]
                    actualCommandIndex++;
 800d7f8:	88bb      	ldrh	r3, [r7, #4]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	80bb      	strh	r3, [r7, #4]
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 800d7fe:	88bb      	ldrh	r3, [r7, #4]
 800d800:	4a4b      	ldr	r2, [pc, #300]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d802:	5cd3      	ldrb	r3, [r2, r3]
 800d804:	2b20      	cmp	r3, #32
 800d806:	d004      	beq.n	800d812 <gos_shellDaemonTask+0xca>
 800d808:	88bb      	ldrh	r3, [r7, #4]
 800d80a:	4a49      	ldr	r2, [pc, #292]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d80c:	5cd3      	ldrb	r3, [r2, r3]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1ec      	bne.n	800d7ec <gos_shellDaemonTask+0xa4>
                }
                actualCommand[actualCommandIndex] = '\0';
 800d812:	88bb      	ldrh	r3, [r7, #4]
 800d814:	4a49      	ldr	r2, [pc, #292]	; (800d93c <gos_shellDaemonTask+0x1f4>)
 800d816:	2100      	movs	r1, #0
 800d818:	54d1      	strb	r1, [r2, r3]
                actualCommandIndex++;
 800d81a:	88bb      	ldrh	r3, [r7, #4]
 800d81c:	3301      	adds	r3, #1
 800d81e:	80bb      	strh	r3, [r7, #4]

                // Get parameters.
                while (commandBuffer[actualCommandIndex] != '\0')
 800d820:	e00b      	b.n	800d83a <gos_shellDaemonTask+0xf2>
                {
                    commandParams[paramIndex++] = commandBuffer[actualCommandIndex++];
 800d822:	88bb      	ldrh	r3, [r7, #4]
 800d824:	1c5a      	adds	r2, r3, #1
 800d826:	80ba      	strh	r2, [r7, #4]
 800d828:	4619      	mov	r1, r3
 800d82a:	887b      	ldrh	r3, [r7, #2]
 800d82c:	1c5a      	adds	r2, r3, #1
 800d82e:	807a      	strh	r2, [r7, #2]
 800d830:	461a      	mov	r2, r3
 800d832:	4b3f      	ldr	r3, [pc, #252]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d834:	5c59      	ldrb	r1, [r3, r1]
 800d836:	4b42      	ldr	r3, [pc, #264]	; (800d940 <gos_shellDaemonTask+0x1f8>)
 800d838:	5499      	strb	r1, [r3, r2]
                while (commandBuffer[actualCommandIndex] != '\0')
 800d83a:	88bb      	ldrh	r3, [r7, #4]
 800d83c:	4a3c      	ldr	r2, [pc, #240]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d83e:	5cd3      	ldrb	r3, [r2, r3]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d1ee      	bne.n	800d822 <gos_shellDaemonTask+0xda>
                }
                commandParams[paramIndex] = '\0';
 800d844:	887b      	ldrh	r3, [r7, #2]
 800d846:	4a3e      	ldr	r2, [pc, #248]	; (800d940 <gos_shellDaemonTask+0x1f8>)
 800d848:	2100      	movs	r1, #0
 800d84a:	54d1      	strb	r1, [r2, r3]

                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800d84c:	2300      	movs	r3, #0
 800d84e:	71fb      	strb	r3, [r7, #7]
 800d850:	e03c      	b.n	800d8cc <gos_shellDaemonTask+0x184>
                {
                    if (strcmp(shellCommands[index].command, actualCommand) == 0)
 800d852:	79fa      	ldrb	r2, [r7, #7]
 800d854:	4613      	mov	r3, r2
 800d856:	00db      	lsls	r3, r3, #3
 800d858:	1a9b      	subs	r3, r3, r2
 800d85a:	009b      	lsls	r3, r3, #2
 800d85c:	4a39      	ldr	r2, [pc, #228]	; (800d944 <gos_shellDaemonTask+0x1fc>)
 800d85e:	4413      	add	r3, r2
 800d860:	4936      	ldr	r1, [pc, #216]	; (800d93c <gos_shellDaemonTask+0x1f4>)
 800d862:	4618      	mov	r0, r3
 800d864:	f7f2 fcd4 	bl	8000210 <strcmp>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d12b      	bne.n	800d8c6 <gos_shellDaemonTask+0x17e>
                    {
                        if (shellCommands[index].commandHandler != NULL)
 800d86e:	79fa      	ldrb	r2, [r7, #7]
 800d870:	4934      	ldr	r1, [pc, #208]	; (800d944 <gos_shellDaemonTask+0x1fc>)
 800d872:	4613      	mov	r3, r2
 800d874:	00db      	lsls	r3, r3, #3
 800d876:	1a9b      	subs	r3, r3, r2
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	440b      	add	r3, r1
 800d87c:	3314      	adds	r3, #20
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d027      	beq.n	800d8d4 <gos_shellDaemonTask+0x18c>
                        {
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, shellCommands[index].commandHandlerPrivileges);
 800d884:	4b30      	ldr	r3, [pc, #192]	; (800d948 <gos_shellDaemonTask+0x200>)
 800d886:	8818      	ldrh	r0, [r3, #0]
 800d888:	79fa      	ldrb	r2, [r7, #7]
 800d88a:	492e      	ldr	r1, [pc, #184]	; (800d944 <gos_shellDaemonTask+0x1fc>)
 800d88c:	4613      	mov	r3, r2
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	1a9b      	subs	r3, r3, r2
 800d892:	009b      	lsls	r3, r3, #2
 800d894:	440b      	add	r3, r1
 800d896:	3318      	adds	r3, #24
 800d898:	881b      	ldrh	r3, [r3, #0]
 800d89a:	4619      	mov	r1, r3
 800d89c:	f7fe f8d8 	bl	800ba50 <gos_taskSetPrivileges>
                            shellCommands[index].commandHandler(commandParams);
 800d8a0:	79fa      	ldrb	r2, [r7, #7]
 800d8a2:	4928      	ldr	r1, [pc, #160]	; (800d944 <gos_shellDaemonTask+0x1fc>)
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	00db      	lsls	r3, r3, #3
 800d8a8:	1a9b      	subs	r3, r3, r2
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	440b      	add	r3, r1
 800d8ae:	3314      	adds	r3, #20
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4823      	ldr	r0, [pc, #140]	; (800d940 <gos_shellDaemonTask+0x1f8>)
 800d8b4:	4798      	blx	r3
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, GOS_TASK_PRIVILEGE_KERNEL);
 800d8b6:	4b24      	ldr	r3, [pc, #144]	; (800d948 <gos_shellDaemonTask+0x200>)
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fe f8c6 	bl	800ba50 <gos_taskSetPrivileges>
                        }
                        else
                        {
                            // Nothing to do.
                        }
                        break;
 800d8c4:	e006      	b.n	800d8d4 <gos_shellDaemonTask+0x18c>
                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800d8c6:	79fb      	ldrb	r3, [r7, #7]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	71fb      	strb	r3, [r7, #7]
 800d8cc:	79fb      	ldrb	r3, [r7, #7]
 800d8ce:	2b0f      	cmp	r3, #15
 800d8d0:	d9bf      	bls.n	800d852 <gos_shellDaemonTask+0x10a>
 800d8d2:	e000      	b.n	800d8d6 <gos_shellDaemonTask+0x18e>
                        break;
 800d8d4:	bf00      	nop
                        // Nothing to do.
                    }
                }

                // If command not found.
                if (index == CFG_SHELL_MAX_COMMAND_NUMBER)
 800d8d6:	79fb      	ldrb	r3, [r7, #7]
 800d8d8:	2b10      	cmp	r3, #16
 800d8da:	d102      	bne.n	800d8e2 <gos_shellDaemonTask+0x19a>
                {
                    (void_t) gos_shellDriverTransmitString("Unrecognized command!\r\n");
 800d8dc:	481b      	ldr	r0, [pc, #108]	; (800d94c <gos_shellDaemonTask+0x204>)
 800d8de:	f002 f8a5 	bl	800fa2c <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 800d8e2:	22c8      	movs	r2, #200	; 0xc8
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	4812      	ldr	r0, [pc, #72]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d8e8:	f002 ff4c 	bl	8010784 <memset>
                commandBufferIndex = 0u;
 800d8ec:	4b0f      	ldr	r3, [pc, #60]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	801a      	strh	r2, [r3, #0]

                (void_t) gos_shellDriverTransmitString(GOS_SHELL_DISPLAY_TEXT);
 800d8f2:	480d      	ldr	r0, [pc, #52]	; (800d928 <gos_shellDaemonTask+0x1e0>)
 800d8f4:	f002 f89a 	bl	800fa2c <gos_shellDriverTransmitString>
 800d8f8:	e011      	b.n	800d91e <gos_shellDaemonTask+0x1d6>
            }
            else
            {
                commandBufferIndex++;
 800d8fa:	4b0c      	ldr	r3, [pc, #48]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d8fc:	881b      	ldrh	r3, [r3, #0]
 800d8fe:	3301      	adds	r3, #1
 800d900:	b29a      	uxth	r2, r3
 800d902:	4b0a      	ldr	r3, [pc, #40]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d904:	801a      	strh	r2, [r3, #0]

                if (commandBufferIndex >= CFG_SHELL_COMMAND_BUFFER_SIZE)
 800d906:	4b09      	ldr	r3, [pc, #36]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d908:	881b      	ldrh	r3, [r3, #0]
 800d90a:	2bc7      	cmp	r3, #199	; 0xc7
 800d90c:	d907      	bls.n	800d91e <gos_shellDaemonTask+0x1d6>
                {
                    (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 800d90e:	22c8      	movs	r2, #200	; 0xc8
 800d910:	2100      	movs	r1, #0
 800d912:	4807      	ldr	r0, [pc, #28]	; (800d930 <gos_shellDaemonTask+0x1e8>)
 800d914:	f002 ff36 	bl	8010784 <memset>
                    commandBufferIndex = 0u;
 800d918:	4b04      	ldr	r3, [pc, #16]	; (800d92c <gos_shellDaemonTask+0x1e4>)
 800d91a:	2200      	movs	r2, #0
 800d91c:	801a      	strh	r2, [r3, #0]
                {
                    // Nothing to do.
                }
            }
        }
        (void_t) gos_taskSleep(GOS_SHELL_DAEMON_POLL_TIME_MS);
 800d91e:	2032      	movs	r0, #50	; 0x32
 800d920:	f7fc ff6c 	bl	800a7fc <gos_taskSleep>
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 800d924:	e71c      	b.n	800d760 <gos_shellDaemonTask+0x18>
 800d926:	bf00      	nop
 800d928:	08013e6c 	.word	0x08013e6c
 800d92c:	2000b110 	.word	0x2000b110
 800d930:	2000b048 	.word	0x2000b048
 800d934:	2000b112 	.word	0x2000b112
 800d938:	08013e88 	.word	0x08013e88
 800d93c:	2000b114 	.word	0x2000b114
 800d940:	2000b128 	.word	0x2000b128
 800d944:	2000ae84 	.word	0x2000ae84
 800d948:	2000b044 	.word	0x2000b044
 800d94c:	08013e8c 	.word	0x08013e8c

0800d950 <gos_shellCommandHandler>:
 * @details Handles the built-in shell command.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellCommandHandler (char_t* params)
{
 800d950:	b590      	push	{r4, r7, lr}
 800d952:	b089      	sub	sp, #36	; 0x24
 800d954:	af02      	add	r7, sp, #8
 800d956:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u8_t                    index        = 0u;
 800d958:	2300      	movs	r3, #0
 800d95a:	75fb      	strb	r3, [r7, #23]
    gos_shellCommandIndex_t commandIndex = 0u;
 800d95c:	2300      	movs	r3, #0
 800d95e:	75bb      	strb	r3, [r7, #22]
    gos_tid_t               taskId       = GOS_INVALID_TASK_ID;
 800d960:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d964:	82bb      	strh	r3, [r7, #20]
    gos_runtime_t           totalRunTime = {0};
 800d966:	f107 0308 	add.w	r3, r7, #8
 800d96a:	2200      	movs	r2, #0
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	605a      	str	r2, [r3, #4]
 800d970:	721a      	strb	r2, [r3, #8]

    /*
     * Function code.
     */
    if (strcmp(params, "dump") == 0)
 800d972:	499f      	ldr	r1, [pc, #636]	; (800dbf0 <gos_shellCommandHandler+0x2a0>)
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7f2 fc4b 	bl	8000210 <strcmp>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d102      	bne.n	800d986 <gos_shellCommandHandler+0x36>
    {
        gos_Dump();
 800d980:	f7fe fb94 	bl	800c0ac <gos_Dump>
        else
        {
            // Nothing to do.
        }
    }
}
 800d984:	e22d      	b.n	800dde2 <gos_shellCommandHandler+0x492>
    else if (strcmp(params, "reset") == 0)
 800d986:	499b      	ldr	r1, [pc, #620]	; (800dbf4 <gos_shellCommandHandler+0x2a4>)
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7f2 fc41 	bl	8000210 <strcmp>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d102      	bne.n	800d99a <gos_shellCommandHandler+0x4a>
        gos_kernelReset();
 800d994:	f7fb fda0 	bl	80094d8 <gos_kernelReset>
}
 800d998:	e223      	b.n	800dde2 <gos_shellCommandHandler+0x492>
    else if (strcmp(params, "help") == 0)
 800d99a:	4997      	ldr	r1, [pc, #604]	; (800dbf8 <gos_shellCommandHandler+0x2a8>)
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7f2 fc37 	bl	8000210 <strcmp>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d137      	bne.n	800da18 <gos_shellCommandHandler+0xc8>
        (void_t) gos_shellDriverTransmitString("List of registered shell commands: \r\n");
 800d9a8:	4894      	ldr	r0, [pc, #592]	; (800dbfc <gos_shellCommandHandler+0x2ac>)
 800d9aa:	f002 f83f 	bl	800fa2c <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	75bb      	strb	r3, [r7, #22]
 800d9b2:	e02a      	b.n	800da0a <gos_shellCommandHandler+0xba>
            if (strcmp(shellCommands[commandIndex].command, "") == 0)
 800d9b4:	7dba      	ldrb	r2, [r7, #22]
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	00db      	lsls	r3, r3, #3
 800d9ba:	1a9b      	subs	r3, r3, r2
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	4a90      	ldr	r2, [pc, #576]	; (800dc00 <gos_shellCommandHandler+0x2b0>)
 800d9c0:	4413      	add	r3, r2
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f000 820b 	beq.w	800dde0 <gos_shellCommandHandler+0x490>
            else if (strcmp(shellCommands[commandIndex].command, "shell") == 0)
 800d9ca:	7dba      	ldrb	r2, [r7, #22]
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	00db      	lsls	r3, r3, #3
 800d9d0:	1a9b      	subs	r3, r3, r2
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4a8a      	ldr	r2, [pc, #552]	; (800dc00 <gos_shellCommandHandler+0x2b0>)
 800d9d6:	4413      	add	r3, r2
 800d9d8:	498a      	ldr	r1, [pc, #552]	; (800dc04 <gos_shellCommandHandler+0x2b4>)
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7f2 fc18 	bl	8000210 <strcmp>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d103      	bne.n	800d9ee <gos_shellCommandHandler+0x9e>
                (void_t) gos_shellDriverTransmitString("\t"
 800d9e6:	4888      	ldr	r0, [pc, #544]	; (800dc08 <gos_shellCommandHandler+0x2b8>)
 800d9e8:	f002 f820 	bl	800fa2c <gos_shellDriverTransmitString>
 800d9ec:	e00a      	b.n	800da04 <gos_shellCommandHandler+0xb4>
                (void_t) gos_shellDriverTransmitString("\t- %s\r\n", shellCommands[commandIndex].command);
 800d9ee:	7dba      	ldrb	r2, [r7, #22]
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	00db      	lsls	r3, r3, #3
 800d9f4:	1a9b      	subs	r3, r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4a81      	ldr	r2, [pc, #516]	; (800dc00 <gos_shellCommandHandler+0x2b0>)
 800d9fa:	4413      	add	r3, r2
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	4883      	ldr	r0, [pc, #524]	; (800dc0c <gos_shellCommandHandler+0x2bc>)
 800da00:	f002 f814 	bl	800fa2c <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 800da04:	7dbb      	ldrb	r3, [r7, #22]
 800da06:	3301      	adds	r3, #1
 800da08:	75bb      	strb	r3, [r7, #22]
 800da0a:	7dbb      	ldrb	r3, [r7, #22]
 800da0c:	2b0f      	cmp	r3, #15
 800da0e:	d9d1      	bls.n	800d9b4 <gos_shellCommandHandler+0x64>
}
 800da10:	e1e7      	b.n	800dde2 <gos_shellCommandHandler+0x492>
            index++;
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	3301      	adds	r3, #1
 800da16:	75fb      	strb	r3, [r7, #23]
        while (params[index] != ' ' && params[index])
 800da18:	7dfb      	ldrb	r3, [r7, #23]
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	4413      	add	r3, r2
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	2b20      	cmp	r3, #32
 800da22:	d005      	beq.n	800da30 <gos_shellCommandHandler+0xe0>
 800da24:	7dfb      	ldrb	r3, [r7, #23]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	4413      	add	r3, r2
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1f0      	bne.n	800da12 <gos_shellCommandHandler+0xc2>
        params[index] = '\0';
 800da30:	7dfb      	ldrb	r3, [r7, #23]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	4413      	add	r3, r2
 800da36:	2200      	movs	r2, #0
 800da38:	701a      	strb	r2, [r3, #0]
        if (strcmp(params, "delete_tid") == 0)
 800da3a:	4975      	ldr	r1, [pc, #468]	; (800dc10 <gos_shellCommandHandler+0x2c0>)
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f7f2 fbe7 	bl	8000210 <strcmp>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d120      	bne.n	800da8a <gos_shellCommandHandler+0x13a>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 800da48:	7dfb      	ldrb	r3, [r7, #23]
 800da4a:	3301      	adds	r3, #1
 800da4c:	75fb      	strb	r3, [r7, #23]
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	4413      	add	r3, r2
 800da54:	2210      	movs	r2, #16
 800da56:	2100      	movs	r1, #0
 800da58:	4618      	mov	r0, r3
 800da5a:	f002 f8dd 	bl	800fc18 <strtol>
 800da5e:	4603      	mov	r3, r0
 800da60:	b29b      	uxth	r3, r3
 800da62:	82bb      	strh	r3, [r7, #20]
            if (gos_taskDelete(taskId) == GOS_SUCCESS)
 800da64:	8abb      	ldrh	r3, [r7, #20]
 800da66:	4618      	mov	r0, r3
 800da68:	f7fd fbe0 	bl	800b22c <gos_taskDelete>
 800da6c:	4603      	mov	r3, r0
 800da6e:	2b55      	cmp	r3, #85	; 0x55
 800da70:	d105      	bne.n	800da7e <gos_shellCommandHandler+0x12e>
                (void_t) gos_shellDriverTransmitString("0x%X task has been deleted.\r\n", taskId);
 800da72:	8abb      	ldrh	r3, [r7, #20]
 800da74:	4619      	mov	r1, r3
 800da76:	4867      	ldr	r0, [pc, #412]	; (800dc14 <gos_shellCommandHandler+0x2c4>)
 800da78:	f001 ffd8 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800da7c:	e1b1      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be deleted.\r\n", taskId);
 800da7e:	8abb      	ldrh	r3, [r7, #20]
 800da80:	4619      	mov	r1, r3
 800da82:	4865      	ldr	r0, [pc, #404]	; (800dc18 <gos_shellCommandHandler+0x2c8>)
 800da84:	f001 ffd2 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800da88:	e1ab      	b.n	800dde2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "delete") == 0)
 800da8a:	4964      	ldr	r1, [pc, #400]	; (800dc1c <gos_shellCommandHandler+0x2cc>)
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7f2 fbbf 	bl	8000210 <strcmp>
 800da92:	4603      	mov	r3, r0
 800da94:	2b00      	cmp	r3, #0
 800da96:	d129      	bne.n	800daec <gos_shellCommandHandler+0x19c>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800da98:	7dfb      	ldrb	r3, [r7, #23]
 800da9a:	3301      	adds	r3, #1
 800da9c:	75fb      	strb	r3, [r7, #23]
 800da9e:	7dfb      	ldrb	r3, [r7, #23]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	4413      	add	r3, r2
 800daa4:	f107 0214 	add.w	r2, r7, #20
 800daa8:	4611      	mov	r1, r2
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fe f8ae 	bl	800bc0c <gos_taskGetId>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b55      	cmp	r3, #85	; 0x55
 800dab4:	d116      	bne.n	800dae4 <gos_shellCommandHandler+0x194>
                if (gos_taskDelete(taskId) == GOS_SUCCESS)
 800dab6:	8abb      	ldrh	r3, [r7, #20]
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fd fbb7 	bl	800b22c <gos_taskDelete>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b55      	cmp	r3, #85	; 0x55
 800dac2:	d107      	bne.n	800dad4 <gos_shellCommandHandler+0x184>
                    (void_t) gos_shellDriverTransmitString("%s has been deleted.\r\n", &params[index]);
 800dac4:	7dfb      	ldrb	r3, [r7, #23]
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	4413      	add	r3, r2
 800daca:	4619      	mov	r1, r3
 800dacc:	4854      	ldr	r0, [pc, #336]	; (800dc20 <gos_shellCommandHandler+0x2d0>)
 800dace:	f001 ffad 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dad2:	e186      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be deleted.\r\n", &params[index]);
 800dad4:	7dfb      	ldrb	r3, [r7, #23]
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	4413      	add	r3, r2
 800dada:	4619      	mov	r1, r3
 800dadc:	4851      	ldr	r0, [pc, #324]	; (800dc24 <gos_shellCommandHandler+0x2d4>)
 800dade:	f001 ffa5 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dae2:	e17e      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 800dae4:	4850      	ldr	r0, [pc, #320]	; (800dc28 <gos_shellCommandHandler+0x2d8>)
 800dae6:	f001 ffa1 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800daea:	e17a      	b.n	800dde2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "suspend_tid") == 0)
 800daec:	494f      	ldr	r1, [pc, #316]	; (800dc2c <gos_shellCommandHandler+0x2dc>)
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7f2 fb8e 	bl	8000210 <strcmp>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d120      	bne.n	800db3c <gos_shellCommandHandler+0x1ec>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
 800dafc:	3301      	adds	r3, #1
 800dafe:	75fb      	strb	r3, [r7, #23]
 800db00:	7dfb      	ldrb	r3, [r7, #23]
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	4413      	add	r3, r2
 800db06:	2210      	movs	r2, #16
 800db08:	2100      	movs	r1, #0
 800db0a:	4618      	mov	r0, r3
 800db0c:	f002 f884 	bl	800fc18 <strtol>
 800db10:	4603      	mov	r3, r0
 800db12:	b29b      	uxth	r3, r3
 800db14:	82bb      	strh	r3, [r7, #20]
            if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 800db16:	8abb      	ldrh	r3, [r7, #20]
 800db18:	4618      	mov	r0, r3
 800db1a:	f7fc ffbb 	bl	800aa94 <gos_taskSuspend>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b55      	cmp	r3, #85	; 0x55
 800db22:	d105      	bne.n	800db30 <gos_shellCommandHandler+0x1e0>
                (void_t) gos_shellDriverTransmitString("0x%X task has been suspended.\r\n", taskId);
 800db24:	8abb      	ldrh	r3, [r7, #20]
 800db26:	4619      	mov	r1, r3
 800db28:	4841      	ldr	r0, [pc, #260]	; (800dc30 <gos_shellCommandHandler+0x2e0>)
 800db2a:	f001 ff7f 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800db2e:	e158      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be suspended.\r\n", taskId);
 800db30:	8abb      	ldrh	r3, [r7, #20]
 800db32:	4619      	mov	r1, r3
 800db34:	483f      	ldr	r0, [pc, #252]	; (800dc34 <gos_shellCommandHandler+0x2e4>)
 800db36:	f001 ff79 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800db3a:	e152      	b.n	800dde2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "suspend") == 0)
 800db3c:	493e      	ldr	r1, [pc, #248]	; (800dc38 <gos_shellCommandHandler+0x2e8>)
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7f2 fb66 	bl	8000210 <strcmp>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d129      	bne.n	800db9e <gos_shellCommandHandler+0x24e>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800db4a:	7dfb      	ldrb	r3, [r7, #23]
 800db4c:	3301      	adds	r3, #1
 800db4e:	75fb      	strb	r3, [r7, #23]
 800db50:	7dfb      	ldrb	r3, [r7, #23]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	4413      	add	r3, r2
 800db56:	f107 0214 	add.w	r2, r7, #20
 800db5a:	4611      	mov	r1, r2
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fe f855 	bl	800bc0c <gos_taskGetId>
 800db62:	4603      	mov	r3, r0
 800db64:	2b55      	cmp	r3, #85	; 0x55
 800db66:	d116      	bne.n	800db96 <gos_shellCommandHandler+0x246>
                if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 800db68:	8abb      	ldrh	r3, [r7, #20]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fc ff92 	bl	800aa94 <gos_taskSuspend>
 800db70:	4603      	mov	r3, r0
 800db72:	2b55      	cmp	r3, #85	; 0x55
 800db74:	d107      	bne.n	800db86 <gos_shellCommandHandler+0x236>
                    (void_t) gos_shellDriverTransmitString("%s has been suspended.\r\n", &params[index]);
 800db76:	7dfb      	ldrb	r3, [r7, #23]
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	4413      	add	r3, r2
 800db7c:	4619      	mov	r1, r3
 800db7e:	482f      	ldr	r0, [pc, #188]	; (800dc3c <gos_shellCommandHandler+0x2ec>)
 800db80:	f001 ff54 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800db84:	e12d      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be suspended.\r\n", &params[index]);
 800db86:	7dfb      	ldrb	r3, [r7, #23]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	4413      	add	r3, r2
 800db8c:	4619      	mov	r1, r3
 800db8e:	482c      	ldr	r0, [pc, #176]	; (800dc40 <gos_shellCommandHandler+0x2f0>)
 800db90:	f001 ff4c 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800db94:	e125      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 800db96:	4824      	ldr	r0, [pc, #144]	; (800dc28 <gos_shellCommandHandler+0x2d8>)
 800db98:	f001 ff48 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800db9c:	e121      	b.n	800dde2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "resume_tid") == 0)
 800db9e:	4929      	ldr	r1, [pc, #164]	; (800dc44 <gos_shellCommandHandler+0x2f4>)
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7f2 fb35 	bl	8000210 <strcmp>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d151      	bne.n	800dc50 <gos_shellCommandHandler+0x300>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 800dbac:	7dfb      	ldrb	r3, [r7, #23]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	75fb      	strb	r3, [r7, #23]
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	2210      	movs	r2, #16
 800dbba:	2100      	movs	r1, #0
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f002 f82b 	bl	800fc18 <strtol>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	82bb      	strh	r3, [r7, #20]
            if (gos_taskResume(taskId) == GOS_SUCCESS)
 800dbc8:	8abb      	ldrh	r3, [r7, #20]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fd f884 	bl	800acd8 <gos_taskResume>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b55      	cmp	r3, #85	; 0x55
 800dbd4:	d105      	bne.n	800dbe2 <gos_shellCommandHandler+0x292>
                (void_t) gos_shellDriverTransmitString("0x%X task has been resumed.\r\n", taskId);
 800dbd6:	8abb      	ldrh	r3, [r7, #20]
 800dbd8:	4619      	mov	r1, r3
 800dbda:	481b      	ldr	r0, [pc, #108]	; (800dc48 <gos_shellCommandHandler+0x2f8>)
 800dbdc:	f001 ff26 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dbe0:	e0ff      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be resumed.\r\n", taskId);
 800dbe2:	8abb      	ldrh	r3, [r7, #20]
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	4819      	ldr	r0, [pc, #100]	; (800dc4c <gos_shellCommandHandler+0x2fc>)
 800dbe8:	f001 ff20 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dbec:	e0f9      	b.n	800dde2 <gos_shellCommandHandler+0x492>
 800dbee:	bf00      	nop
 800dbf0:	08013ea4 	.word	0x08013ea4
 800dbf4:	08013eac 	.word	0x08013eac
 800dbf8:	08013eb4 	.word	0x08013eb4
 800dbfc:	08013ebc 	.word	0x08013ebc
 800dc00:	2000ae84 	.word	0x2000ae84
 800dc04:	08013ee4 	.word	0x08013ee4
 800dc08:	08013eec 	.word	0x08013eec
 800dc0c:	08013f98 	.word	0x08013f98
 800dc10:	08013fa0 	.word	0x08013fa0
 800dc14:	08013fac 	.word	0x08013fac
 800dc18:	08013fcc 	.word	0x08013fcc
 800dc1c:	08013ff0 	.word	0x08013ff0
 800dc20:	08013ff8 	.word	0x08013ff8
 800dc24:	08014010 	.word	0x08014010
 800dc28:	0801402c 	.word	0x0801402c
 800dc2c:	08014048 	.word	0x08014048
 800dc30:	08014054 	.word	0x08014054
 800dc34:	08014074 	.word	0x08014074
 800dc38:	08014098 	.word	0x08014098
 800dc3c:	080140a0 	.word	0x080140a0
 800dc40:	080140bc 	.word	0x080140bc
 800dc44:	080140dc 	.word	0x080140dc
 800dc48:	080140e8 	.word	0x080140e8
 800dc4c:	08014108 	.word	0x08014108
        else if (strcmp(params, "resume") == 0)
 800dc50:	4966      	ldr	r1, [pc, #408]	; (800ddec <gos_shellCommandHandler+0x49c>)
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7f2 fadc 	bl	8000210 <strcmp>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d129      	bne.n	800dcb2 <gos_shellCommandHandler+0x362>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
 800dc60:	3301      	adds	r3, #1
 800dc62:	75fb      	strb	r3, [r7, #23]
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	4413      	add	r3, r2
 800dc6a:	f107 0214 	add.w	r2, r7, #20
 800dc6e:	4611      	mov	r1, r2
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fd ffcb 	bl	800bc0c <gos_taskGetId>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b55      	cmp	r3, #85	; 0x55
 800dc7a:	d116      	bne.n	800dcaa <gos_shellCommandHandler+0x35a>
                if (gos_taskResume(taskId) == GOS_SUCCESS)
 800dc7c:	8abb      	ldrh	r3, [r7, #20]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fd f82a 	bl	800acd8 <gos_taskResume>
 800dc84:	4603      	mov	r3, r0
 800dc86:	2b55      	cmp	r3, #85	; 0x55
 800dc88:	d107      	bne.n	800dc9a <gos_shellCommandHandler+0x34a>
                    (void_t) gos_shellDriverTransmitString("%s has been resumed.\r\n", &params[index]);
 800dc8a:	7dfb      	ldrb	r3, [r7, #23]
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	4413      	add	r3, r2
 800dc90:	4619      	mov	r1, r3
 800dc92:	4857      	ldr	r0, [pc, #348]	; (800ddf0 <gos_shellCommandHandler+0x4a0>)
 800dc94:	f001 feca 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dc98:	e0a3      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be resumed.\r\n", &params[index]);
 800dc9a:	7dfb      	ldrb	r3, [r7, #23]
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	4413      	add	r3, r2
 800dca0:	4619      	mov	r1, r3
 800dca2:	4854      	ldr	r0, [pc, #336]	; (800ddf4 <gos_shellCommandHandler+0x4a4>)
 800dca4:	f001 fec2 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dca8:	e09b      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 800dcaa:	4853      	ldr	r0, [pc, #332]	; (800ddf8 <gos_shellCommandHandler+0x4a8>)
 800dcac:	f001 febe 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dcb0:	e097      	b.n	800dde2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "unblock_tid") == 0)
 800dcb2:	4952      	ldr	r1, [pc, #328]	; (800ddfc <gos_shellCommandHandler+0x4ac>)
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f7f2 faab 	bl	8000210 <strcmp>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d120      	bne.n	800dd02 <gos_shellCommandHandler+0x3b2>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 800dcc0:	7dfb      	ldrb	r3, [r7, #23]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	75fb      	strb	r3, [r7, #23]
 800dcc6:	7dfb      	ldrb	r3, [r7, #23]
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	4413      	add	r3, r2
 800dccc:	2210      	movs	r2, #16
 800dcce:	2100      	movs	r1, #0
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f001 ffa1 	bl	800fc18 <strtol>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	82bb      	strh	r3, [r7, #20]
            if (gos_taskUnblock(taskId) == GOS_SUCCESS)
 800dcdc:	8abb      	ldrh	r3, [r7, #20]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fd f9ba 	bl	800b058 <gos_taskUnblock>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b55      	cmp	r3, #85	; 0x55
 800dce8:	d105      	bne.n	800dcf6 <gos_shellCommandHandler+0x3a6>
                (void_t) gos_shellDriverTransmitString("0x%X task has been unblocked.\r\n", taskId);
 800dcea:	8abb      	ldrh	r3, [r7, #20]
 800dcec:	4619      	mov	r1, r3
 800dcee:	4844      	ldr	r0, [pc, #272]	; (800de00 <gos_shellCommandHandler+0x4b0>)
 800dcf0:	f001 fe9c 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dcf4:	e075      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be unblocked.\r\n", taskId);
 800dcf6:	8abb      	ldrh	r3, [r7, #20]
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	4842      	ldr	r0, [pc, #264]	; (800de04 <gos_shellCommandHandler+0x4b4>)
 800dcfc:	f001 fe96 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dd00:	e06f      	b.n	800dde2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "unblock") == 0)
 800dd02:	4941      	ldr	r1, [pc, #260]	; (800de08 <gos_shellCommandHandler+0x4b8>)
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f7f2 fa83 	bl	8000210 <strcmp>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d129      	bne.n	800dd64 <gos_shellCommandHandler+0x414>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800dd10:	7dfb      	ldrb	r3, [r7, #23]
 800dd12:	3301      	adds	r3, #1
 800dd14:	75fb      	strb	r3, [r7, #23]
 800dd16:	7dfb      	ldrb	r3, [r7, #23]
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	f107 0214 	add.w	r2, r7, #20
 800dd20:	4611      	mov	r1, r2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fd ff72 	bl	800bc0c <gos_taskGetId>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b55      	cmp	r3, #85	; 0x55
 800dd2c:	d116      	bne.n	800dd5c <gos_shellCommandHandler+0x40c>
                if (gos_taskUnblock(taskId) == GOS_SUCCESS)
 800dd2e:	8abb      	ldrh	r3, [r7, #20]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fd f991 	bl	800b058 <gos_taskUnblock>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b55      	cmp	r3, #85	; 0x55
 800dd3a:	d107      	bne.n	800dd4c <gos_shellCommandHandler+0x3fc>
                    (void_t) gos_shellDriverTransmitString("%s has been unblocked.\r\n", &params[index]);
 800dd3c:	7dfb      	ldrb	r3, [r7, #23]
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	4413      	add	r3, r2
 800dd42:	4619      	mov	r1, r3
 800dd44:	4831      	ldr	r0, [pc, #196]	; (800de0c <gos_shellCommandHandler+0x4bc>)
 800dd46:	f001 fe71 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dd4a:	e04a      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be unblocked.\r\n", &params[index]);
 800dd4c:	7dfb      	ldrb	r3, [r7, #23]
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	4413      	add	r3, r2
 800dd52:	4619      	mov	r1, r3
 800dd54:	482e      	ldr	r0, [pc, #184]	; (800de10 <gos_shellCommandHandler+0x4c0>)
 800dd56:	f001 fe69 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dd5a:	e042      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 800dd5c:	4826      	ldr	r0, [pc, #152]	; (800ddf8 <gos_shellCommandHandler+0x4a8>)
 800dd5e:	f001 fe65 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dd62:	e03e      	b.n	800dde2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "cpu") == 0)
 800dd64:	492b      	ldr	r1, [pc, #172]	; (800de14 <gos_shellCommandHandler+0x4c4>)
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7f2 fa52 	bl	8000210 <strcmp>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d11b      	bne.n	800ddaa <gos_shellCommandHandler+0x45a>
            (void_t) gos_shellDriverTransmitString("CPU usage: %u.%02u%%\r\n", (gos_kernelGetCpuUsage() / 100), (gos_kernelGetCpuUsage() % 100));
 800dd72:	f7fb fb9f 	bl	80094b4 <gos_kernelGetCpuUsage>
 800dd76:	4603      	mov	r3, r0
 800dd78:	461a      	mov	r2, r3
 800dd7a:	4b27      	ldr	r3, [pc, #156]	; (800de18 <gos_shellCommandHandler+0x4c8>)
 800dd7c:	fba3 2302 	umull	r2, r3, r3, r2
 800dd80:	095b      	lsrs	r3, r3, #5
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	461c      	mov	r4, r3
 800dd86:	f7fb fb95 	bl	80094b4 <gos_kernelGetCpuUsage>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	4a22      	ldr	r2, [pc, #136]	; (800de18 <gos_shellCommandHandler+0x4c8>)
 800dd8e:	fba2 1203 	umull	r1, r2, r2, r3
 800dd92:	0952      	lsrs	r2, r2, #5
 800dd94:	2164      	movs	r1, #100	; 0x64
 800dd96:	fb01 f202 	mul.w	r2, r1, r2
 800dd9a:	1a9b      	subs	r3, r3, r2
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	461a      	mov	r2, r3
 800dda0:	4621      	mov	r1, r4
 800dda2:	481e      	ldr	r0, [pc, #120]	; (800de1c <gos_shellCommandHandler+0x4cc>)
 800dda4:	f001 fe42 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800dda8:	e01b      	b.n	800dde2 <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "runtime") == 0)
 800ddaa:	491d      	ldr	r1, [pc, #116]	; (800de20 <gos_shellCommandHandler+0x4d0>)
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7f2 fa2f 	bl	8000210 <strcmp>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d114      	bne.n	800dde2 <gos_shellCommandHandler+0x492>
            (void_t) gos_runTimeGet(&totalRunTime);
 800ddb8:	f107 0308 	add.w	r3, r7, #8
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f000 fe43 	bl	800ea48 <gos_runTimeGet>
                    totalRunTime.days,
 800ddc2:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800ddc6:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800ddc8:	4619      	mov	r1, r3
                    totalRunTime.hours,
 800ddca:	7bbb      	ldrb	r3, [r7, #14]
            (void_t) gos_shellDriverTransmitString(
 800ddcc:	461a      	mov	r2, r3
                    totalRunTime.minutes,
 800ddce:	7b7b      	ldrb	r3, [r7, #13]
            (void_t) gos_shellDriverTransmitString(
 800ddd0:	4618      	mov	r0, r3
                    totalRunTime.seconds
 800ddd2:	7b3b      	ldrb	r3, [r7, #12]
            (void_t) gos_shellDriverTransmitString(
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	4812      	ldr	r0, [pc, #72]	; (800de24 <gos_shellCommandHandler+0x4d4>)
 800ddda:	f001 fe27 	bl	800fa2c <gos_shellDriverTransmitString>
}
 800ddde:	e000      	b.n	800dde2 <gos_shellCommandHandler+0x492>
                break;
 800dde0:	bf00      	nop
}
 800dde2:	bf00      	nop
 800dde4:	371c      	adds	r7, #28
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd90      	pop	{r4, r7, pc}
 800ddea:	bf00      	nop
 800ddec:	0801412c 	.word	0x0801412c
 800ddf0:	08014134 	.word	0x08014134
 800ddf4:	0801414c 	.word	0x0801414c
 800ddf8:	0801402c 	.word	0x0801402c
 800ddfc:	08014168 	.word	0x08014168
 800de00:	08014174 	.word	0x08014174
 800de04:	08014194 	.word	0x08014194
 800de08:	080141b8 	.word	0x080141b8
 800de0c:	080141c0 	.word	0x080141c0
 800de10:	080141dc 	.word	0x080141dc
 800de14:	080141fc 	.word	0x080141fc
 800de18:	51eb851f 	.word	0x51eb851f
 800de1c:	08014200 	.word	0x08014200
 800de20:	08014218 	.word	0x08014218
 800de24:	08014220 	.word	0x08014220

0800de28 <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_SUCCESS;
 800de2e:	2355      	movs	r3, #85	; 0x55
 800de30:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 800de32:	2300      	movs	r3, #0
 800de34:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800de36:	2300      	movs	r3, #0
 800de38:	71bb      	strb	r3, [r7, #6]
 800de3a:	e00a      	b.n	800de52 <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 800de3c:	79bb      	ldrb	r3, [r7, #6]
 800de3e:	4a16      	ldr	r2, [pc, #88]	; (800de98 <gos_signalInit+0x70>)
 800de40:	212c      	movs	r1, #44	; 0x2c
 800de42:	fb01 f303 	mul.w	r3, r1, r3
 800de46:	4413      	add	r3, r2
 800de48:	2249      	movs	r2, #73	; 0x49
 800de4a:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800de4c:	79bb      	ldrb	r3, [r7, #6]
 800de4e:	3301      	adds	r3, #1
 800de50:	71bb      	strb	r3, [r7, #6]
 800de52:	79bb      	ldrb	r3, [r7, #6]
 800de54:	2b05      	cmp	r3, #5
 800de56:	d9f1      	bls.n	800de3c <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 800de58:	2100      	movs	r1, #0
 800de5a:	4810      	ldr	r0, [pc, #64]	; (800de9c <gos_signalInit+0x74>)
 800de5c:	f7fc fb3c 	bl	800a4d8 <gos_taskRegister>
 800de60:	4603      	mov	r3, r0
 800de62:	2b55      	cmp	r3, #85	; 0x55
 800de64:	d111      	bne.n	800de8a <gos_signalInit+0x62>
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 800de66:	480e      	ldr	r0, [pc, #56]	; (800dea0 <gos_signalInit+0x78>)
 800de68:	f000 f820 	bl	800deac <gos_signalCreate>
 800de6c:	4603      	mov	r3, r0
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 800de6e:	2b55      	cmp	r3, #85	; 0x55
 800de70:	d10b      	bne.n	800de8a <gos_signalInit+0x62>
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 800de72:	480c      	ldr	r0, [pc, #48]	; (800dea4 <gos_signalInit+0x7c>)
 800de74:	f000 f81a 	bl	800deac <gos_signalCreate>
 800de78:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 800de7a:	2b55      	cmp	r3, #85	; 0x55
 800de7c:	d105      	bne.n	800de8a <gos_signalInit+0x62>
        gos_triggerInit(&signalInvokeTrigger)               != GOS_SUCCESS
 800de7e:	480a      	ldr	r0, [pc, #40]	; (800dea8 <gos_signalInit+0x80>)
 800de80:	f001 fbd0 	bl	800f624 <gos_triggerInit>
 800de84:	4603      	mov	r3, r0
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 800de86:	2b55      	cmp	r3, #85	; 0x55
 800de88:	d001      	beq.n	800de8e <gos_signalInit+0x66>
    )
    {
        signalInitResult = GOS_ERROR;
 800de8a:	23ae      	movs	r3, #174	; 0xae
 800de8c:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 800de8e:	79fb      	ldrb	r3, [r7, #7]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	2000b1a8 	.word	0x2000b1a8
 800de9c:	20001b58 	.word	0x20001b58
 800dea0:	20002bdc 	.word	0x20002bdc
 800dea4:	20002bb0 	.word	0x20002bb0
 800dea8:	2000b2b0 	.word	0x2000b2b0

0800deac <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 800deac:	b480      	push	{r7}
 800deae:	b085      	sub	sp, #20
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 800deb4:	23ae      	movs	r3, #174	; 0xae
 800deb6:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 800deb8:	2300      	movs	r3, #0
 800deba:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800debc:	2300      	movs	r3, #0
 800debe:	73bb      	strb	r3, [r7, #14]
 800dec0:	e025      	b.n	800df0e <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 800dec2:	7bbb      	ldrb	r3, [r7, #14]
 800dec4:	4a17      	ldr	r2, [pc, #92]	; (800df24 <gos_signalCreate+0x78>)
 800dec6:	212c      	movs	r1, #44	; 0x2c
 800dec8:	fb01 f303 	mul.w	r3, r1, r3
 800decc:	4413      	add	r3, r2
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	2b49      	cmp	r3, #73	; 0x49
 800ded2:	d119      	bne.n	800df08 <gos_signalCreate+0x5c>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d016      	beq.n	800df08 <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	7bba      	ldrb	r2, [r7, #14]
 800dede:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 800dee0:	7bbb      	ldrb	r3, [r7, #14]
 800dee2:	4a10      	ldr	r2, [pc, #64]	; (800df24 <gos_signalCreate+0x78>)
 800dee4:	212c      	movs	r1, #44	; 0x2c
 800dee6:	fb01 f303 	mul.w	r3, r1, r3
 800deea:	4413      	add	r3, r2
 800deec:	2236      	movs	r2, #54	; 0x36
 800deee:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 800def0:	7bbb      	ldrb	r3, [r7, #14]
 800def2:	4a0c      	ldr	r2, [pc, #48]	; (800df24 <gos_signalCreate+0x78>)
 800def4:	212c      	movs	r1, #44	; 0x2c
 800def6:	fb01 f303 	mul.w	r3, r1, r3
 800defa:	4413      	add	r3, r2
 800defc:	3328      	adds	r3, #40	; 0x28
 800defe:	2249      	movs	r2, #73	; 0x49
 800df00:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 800df02:	2355      	movs	r3, #85	; 0x55
 800df04:	73fb      	strb	r3, [r7, #15]
            break;
 800df06:	e005      	b.n	800df14 <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800df08:	7bbb      	ldrb	r3, [r7, #14]
 800df0a:	3301      	adds	r3, #1
 800df0c:	73bb      	strb	r3, [r7, #14]
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	2b05      	cmp	r3, #5
 800df12:	d9d6      	bls.n	800dec2 <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 800df14:	7bfb      	ldrb	r3, [r7, #15]
}
 800df16:	4618      	mov	r0, r3
 800df18:	3714      	adds	r7, #20
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	2000b1a8 	.word	0x2000b1a8

0800df28 <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b0a0      	sub	sp, #128	; 0x80
 800df2c:	af02      	add	r7, sp, #8
 800df2e:	4603      	mov	r3, r0
 800df30:	460a      	mov	r2, r1
 800df32:	71fb      	strb	r3, [r7, #7]
 800df34:	4613      	mov	r3, r2
 800df36:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 800df38:	23ae      	movs	r3, #174	; 0xae
 800df3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 800df3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df42:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    gos_taskDescriptor_t callerTaskDesc     = {0};
 800df46:	f107 0308 	add.w	r3, r7, #8
 800df4a:	226a      	movs	r2, #106	; 0x6a
 800df4c:	2100      	movs	r1, #0
 800df4e:	4618      	mov	r0, r3
 800df50:	f002 fc18 	bl	8010784 <memset>

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 800df54:	79fb      	ldrb	r3, [r7, #7]
 800df56:	2b05      	cmp	r3, #5
 800df58:	d849      	bhi.n	800dfee <gos_signalInvoke+0xc6>
 800df5a:	79fb      	ldrb	r3, [r7, #7]
 800df5c:	4a27      	ldr	r2, [pc, #156]	; (800dffc <gos_signalInvoke+0xd4>)
 800df5e:	212c      	movs	r1, #44	; 0x2c
 800df60:	fb01 f303 	mul.w	r3, r1, r3
 800df64:	4413      	add	r3, r2
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	2b36      	cmp	r3, #54	; 0x36
 800df6a:	d140      	bne.n	800dfee <gos_signalInvoke+0xc6>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 800df6c:	f7fb ff94 	bl	8009e98 <gos_kernelIsCallerIsr>
 800df70:	4603      	mov	r3, r0
 800df72:	2b36      	cmp	r3, #54	; 0x36
 800df74:	d017      	beq.n	800dfa6 <gos_signalInvoke+0x7e>
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 800df76:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fd fe7e 	bl	800bc7c <gos_taskGetCurrentId>
 800df80:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 800df82:	2b55      	cmp	r3, #85	; 0x55
 800df84:	d128      	bne.n	800dfd8 <gos_signalInvoke+0xb0>
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 800df86:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800df8a:	f107 0208 	add.w	r2, r7, #8
 800df8e:	4611      	mov	r1, r2
 800df90:	4618      	mov	r0, r3
 800df92:	f7fd fecf 	bl	800bd34 <gos_taskGetData>
 800df96:	4603      	mov	r3, r0
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 800df98:	2b55      	cmp	r3, #85	; 0x55
 800df9a:	d11d      	bne.n	800dfd8 <gos_signalInvoke+0xb0>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 800df9c:	8a3b      	ldrh	r3, [r7, #16]
 800df9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d018      	beq.n	800dfd8 <gos_signalInvoke+0xb0>
            )
        {
            signalArray[signalId].senderId       = senderId;
 800dfa6:	79fb      	ldrb	r3, [r7, #7]
 800dfa8:	4a14      	ldr	r2, [pc, #80]	; (800dffc <gos_signalInvoke+0xd4>)
 800dfaa:	212c      	movs	r1, #44	; 0x2c
 800dfac:	fb01 f303 	mul.w	r3, r1, r3
 800dfb0:	4413      	add	r3, r2
 800dfb2:	332a      	adds	r3, #42	; 0x2a
 800dfb4:	88ba      	ldrh	r2, [r7, #4]
 800dfb6:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 800dfb8:	79fb      	ldrb	r3, [r7, #7]
 800dfba:	4a10      	ldr	r2, [pc, #64]	; (800dffc <gos_signalInvoke+0xd4>)
 800dfbc:	212c      	movs	r1, #44	; 0x2c
 800dfbe:	fb01 f303 	mul.w	r3, r1, r3
 800dfc2:	4413      	add	r3, r2
 800dfc4:	3328      	adds	r3, #40	; 0x28
 800dfc6:	2236      	movs	r2, #54	; 0x36
 800dfc8:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 800dfca:	2355      	movs	r3, #85	; 0x55
 800dfcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

            // Unblock signal daemon to handle signal invoking by
            // incrementing the invoke trigger.
            (void_t) gos_triggerIncrement(&signalInvokeTrigger);
 800dfd0:	480b      	ldr	r0, [pc, #44]	; (800e000 <gos_signalInvoke+0xd8>)
 800dfd2:	f001 fc4b 	bl	800f86c <gos_triggerIncrement>
 800dfd6:	e00a      	b.n	800dfee <gos_signalInvoke+0xc6>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 800dfd8:	f107 0308 	add.w	r3, r7, #8
 800dfdc:	330a      	adds	r3, #10
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	4b08      	ldr	r3, [pc, #32]	; (800e004 <gos_signalInvoke+0xdc>)
 800dfe2:	f240 1213 	movw	r2, #275	; 0x113
 800dfe6:	4908      	ldr	r1, [pc, #32]	; (800e008 <gos_signalInvoke+0xe0>)
 800dfe8:	202e      	movs	r0, #46	; 0x2e
 800dfea:	f7fe f961 	bl	800c2b0 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 800dfee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3778      	adds	r7, #120	; 0x78
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	2000b1a8 	.word	0x2000b1a8
 800e000:	2000b2b0 	.word	0x2000b2b0
 800e004:	0801425c 	.word	0x0801425c
 800e008:	080146f4 	.word	0x080146f4

0800e00c <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 800e00c:	b590      	push	{r4, r7, lr}
 800e00e:	b083      	sub	sp, #12
 800e010:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 800e012:	2300      	movs	r3, #0
 800e014:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 800e016:	2300      	movs	r3, #0
 800e018:	71bb      	strb	r3, [r7, #6]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger.
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800e01a:	f04f 32ff 	mov.w	r2, #4294967295
 800e01e:	2101      	movs	r1, #1
 800e020:	4835      	ldr	r0, [pc, #212]	; (800e0f8 <gos_signalDaemonTask+0xec>)
 800e022:	f001 fb73 	bl	800f70c <gos_triggerWait>
 800e026:	4603      	mov	r3, r0
 800e028:	2b55      	cmp	r3, #85	; 0x55
 800e02a:	d1f6      	bne.n	800e01a <gos_signalDaemonTask+0xe>
        {
            (void_t) gos_triggerReset(&signalInvokeTrigger);
 800e02c:	4832      	ldr	r0, [pc, #200]	; (800e0f8 <gos_signalDaemonTask+0xec>)
 800e02e:	f001 fb15 	bl	800f65c <gos_triggerReset>
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800e032:	2300      	movs	r3, #0
 800e034:	71bb      	strb	r3, [r7, #6]
 800e036:	e05b      	b.n	800e0f0 <gos_signalDaemonTask+0xe4>
            {
                if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 800e038:	79bb      	ldrb	r3, [r7, #6]
 800e03a:	4a30      	ldr	r2, [pc, #192]	; (800e0fc <gos_signalDaemonTask+0xf0>)
 800e03c:	212c      	movs	r1, #44	; 0x2c
 800e03e:	fb01 f303 	mul.w	r3, r1, r3
 800e042:	4413      	add	r3, r2
 800e044:	3328      	adds	r3, #40	; 0x28
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	2b36      	cmp	r3, #54	; 0x36
 800e04a:	d14e      	bne.n	800e0ea <gos_signalDaemonTask+0xde>
                {
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 800e04c:	2300      	movs	r3, #0
 800e04e:	71fb      	strb	r3, [r7, #7]
 800e050:	e03d      	b.n	800e0ce <gos_signalDaemonTask+0xc2>
                    {
                        if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 800e052:	79ba      	ldrb	r2, [r7, #6]
 800e054:	79f9      	ldrb	r1, [r7, #7]
 800e056:	4829      	ldr	r0, [pc, #164]	; (800e0fc <gos_signalDaemonTask+0xf0>)
 800e058:	4613      	mov	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4413      	add	r3, r2
 800e05e:	005b      	lsls	r3, r3, #1
 800e060:	4413      	add	r3, r2
 800e062:	440b      	add	r3, r1
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4403      	add	r3, r0
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d033      	beq.n	800e0d6 <gos_signalDaemonTask+0xca>
                            break;
                        }
                        else
                        {
                            // Switch to signal handler privilege.
                            (void_t) gos_taskSetPrivileges(
 800e06e:	4b24      	ldr	r3, [pc, #144]	; (800e100 <gos_signalDaemonTask+0xf4>)
 800e070:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 800e072:	79ba      	ldrb	r2, [r7, #6]
 800e074:	79fb      	ldrb	r3, [r7, #7]
 800e076:	4921      	ldr	r1, [pc, #132]	; (800e0fc <gos_signalDaemonTask+0xf0>)
 800e078:	2416      	movs	r4, #22
 800e07a:	fb04 f202 	mul.w	r2, r4, r2
 800e07e:	4413      	add	r3, r2
 800e080:	330c      	adds	r3, #12
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	440b      	add	r3, r1
 800e086:	889b      	ldrh	r3, [r3, #4]
 800e088:	4619      	mov	r1, r3
 800e08a:	f7fd fce1 	bl	800ba50 <gos_taskSetPrivileges>
                                    signalDaemonTaskDescriptor.taskId,
                                    signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                    );
                            // Call signal handler.
                            signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 800e08e:	79ba      	ldrb	r2, [r7, #6]
 800e090:	79f9      	ldrb	r1, [r7, #7]
 800e092:	481a      	ldr	r0, [pc, #104]	; (800e0fc <gos_signalDaemonTask+0xf0>)
 800e094:	4613      	mov	r3, r2
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	4413      	add	r3, r2
 800e09a:	005b      	lsls	r3, r3, #1
 800e09c:	4413      	add	r3, r2
 800e09e:	440b      	add	r3, r1
 800e0a0:	009b      	lsls	r3, r3, #2
 800e0a2:	4403      	add	r3, r0
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	79ba      	ldrb	r2, [r7, #6]
 800e0a8:	4914      	ldr	r1, [pc, #80]	; (800e0fc <gos_signalDaemonTask+0xf0>)
 800e0aa:	202c      	movs	r0, #44	; 0x2c
 800e0ac:	fb00 f202 	mul.w	r2, r0, r2
 800e0b0:	440a      	add	r2, r1
 800e0b2:	322a      	adds	r2, #42	; 0x2a
 800e0b4:	8812      	ldrh	r2, [r2, #0]
 800e0b6:	4610      	mov	r0, r2
 800e0b8:	4798      	blx	r3

                            // Switch back to kernel privilege.
                            (void_t) gos_taskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 800e0ba:	4b11      	ldr	r3, [pc, #68]	; (800e100 <gos_signalDaemonTask+0xf4>)
 800e0bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0be:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fd fcc4 	bl	800ba50 <gos_taskSetPrivileges>
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 800e0c8:	79fb      	ldrb	r3, [r7, #7]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	71fb      	strb	r3, [r7, #7]
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	2b05      	cmp	r3, #5
 800e0d2:	d9be      	bls.n	800e052 <gos_signalDaemonTask+0x46>
 800e0d4:	e000      	b.n	800e0d8 <gos_signalDaemonTask+0xcc>
                            break;
 800e0d6:	bf00      	nop
                        }
                    }
                    signalArray[signalIndex].invokeRequired = GOS_FALSE;
 800e0d8:	79bb      	ldrb	r3, [r7, #6]
 800e0da:	4a08      	ldr	r2, [pc, #32]	; (800e0fc <gos_signalDaemonTask+0xf0>)
 800e0dc:	212c      	movs	r1, #44	; 0x2c
 800e0de:	fb01 f303 	mul.w	r3, r1, r3
 800e0e2:	4413      	add	r3, r2
 800e0e4:	3328      	adds	r3, #40	; 0x28
 800e0e6:	2249      	movs	r2, #73	; 0x49
 800e0e8:	701a      	strb	r2, [r3, #0]
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800e0ea:	79bb      	ldrb	r3, [r7, #6]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	71bb      	strb	r3, [r7, #6]
 800e0f0:	79bb      	ldrb	r3, [r7, #6]
 800e0f2:	2b05      	cmp	r3, #5
 800e0f4:	d9a0      	bls.n	800e038 <gos_signalDaemonTask+0x2c>
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800e0f6:	e790      	b.n	800e01a <gos_signalDaemonTask+0xe>
 800e0f8:	2000b2b0 	.word	0x2000b2b0
 800e0fc:	2000b1a8 	.word	0x2000b1a8
 800e100:	20001b58 	.word	0x20001b58

0800e104 <gos_sysmonInit>:

/*
 * Function: gos_sysmonInit
 */
gos_result_t gos_sysmonInit (void_t)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysmonInitResult = GOS_ERROR;
 800e10a:	23ae      	movs	r3, #174	; 0xae
 800e10c:	71fb      	strb	r3, [r7, #7]
    u8_t         userMessageIndex = 0u;
 800e10e:	2300      	movs	r3, #0
 800e110:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 800e112:	2300      	movs	r3, #0
 800e114:	71bb      	strb	r3, [r7, #6]
 800e116:	e024      	b.n	800e162 <gos_sysmonInit+0x5e>
    {
        userMessages[userMessageIndex].callback        = NULL;
 800e118:	79bb      	ldrb	r3, [r7, #6]
 800e11a:	4a1e      	ldr	r2, [pc, #120]	; (800e194 <gos_sysmonInit+0x90>)
 800e11c:	011b      	lsls	r3, r3, #4
 800e11e:	4413      	add	r3, r2
 800e120:	330c      	adds	r3, #12
 800e122:	2200      	movs	r2, #0
 800e124:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payload         = NULL;
 800e126:	79bb      	ldrb	r3, [r7, #6]
 800e128:	4a1a      	ldr	r2, [pc, #104]	; (800e194 <gos_sysmonInit+0x90>)
 800e12a:	011b      	lsls	r3, r3, #4
 800e12c:	4413      	add	r3, r2
 800e12e:	3304      	adds	r3, #4
 800e130:	2200      	movs	r2, #0
 800e132:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payloadSize     = 0u;
 800e134:	79bb      	ldrb	r3, [r7, #6]
 800e136:	4a17      	ldr	r2, [pc, #92]	; (800e194 <gos_sysmonInit+0x90>)
 800e138:	011b      	lsls	r3, r3, #4
 800e13a:	4413      	add	r3, r2
 800e13c:	3308      	adds	r3, #8
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].protocolVersion = 0u;
 800e142:	79bb      	ldrb	r3, [r7, #6]
 800e144:	4a13      	ldr	r2, [pc, #76]	; (800e194 <gos_sysmonInit+0x90>)
 800e146:	011b      	lsls	r3, r3, #4
 800e148:	4413      	add	r3, r2
 800e14a:	3302      	adds	r3, #2
 800e14c:	2200      	movs	r2, #0
 800e14e:	801a      	strh	r2, [r3, #0]
        userMessages[userMessageIndex].messageId       = 0u;
 800e150:	79bb      	ldrb	r3, [r7, #6]
 800e152:	4a10      	ldr	r2, [pc, #64]	; (800e194 <gos_sysmonInit+0x90>)
 800e154:	011b      	lsls	r3, r3, #4
 800e156:	4413      	add	r3, r2
 800e158:	2200      	movs	r2, #0
 800e15a:	801a      	strh	r2, [r3, #0]
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 800e15c:	79bb      	ldrb	r3, [r7, #6]
 800e15e:	3301      	adds	r3, #1
 800e160:	71bb      	strb	r3, [r7, #6]
 800e162:	79bb      	ldrb	r3, [r7, #6]
 800e164:	2b05      	cmp	r3, #5
 800e166:	d9d7      	bls.n	800e118 <gos_sysmonInit+0x14>
    }

    if (gos_gcpRegisterPhysicalDriver(CFG_SYSMON_GCP_CHANNEL_NUM, gos_sysmonDriverTransmit,
 800e168:	4a0b      	ldr	r2, [pc, #44]	; (800e198 <gos_sysmonInit+0x94>)
 800e16a:	490c      	ldr	r1, [pc, #48]	; (800e19c <gos_sysmonInit+0x98>)
 800e16c:	2000      	movs	r0, #0
 800e16e:	f7fe f9a1 	bl	800c4b4 <gos_gcpRegisterPhysicalDriver>
 800e172:	4603      	mov	r3, r0
 800e174:	2b55      	cmp	r3, #85	; 0x55
 800e176:	d108      	bne.n	800e18a <gos_sysmonInit+0x86>
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
        gos_taskRegister(&sysmonDaemonTaskDesc, NULL) == GOS_SUCCESS)
 800e178:	2100      	movs	r1, #0
 800e17a:	4809      	ldr	r0, [pc, #36]	; (800e1a0 <gos_sysmonInit+0x9c>)
 800e17c:	f7fc f9ac 	bl	800a4d8 <gos_taskRegister>
 800e180:	4603      	mov	r3, r0
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
 800e182:	2b55      	cmp	r3, #85	; 0x55
 800e184:	d101      	bne.n	800e18a <gos_sysmonInit+0x86>
    {
        sysmonInitResult = GOS_SUCCESS;
 800e186:	2355      	movs	r3, #85	; 0x55
 800e188:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Initialization failed.
    }

    return sysmonInitResult;
 800e18a:	79fb      	ldrb	r3, [r7, #7]
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	2000b434 	.word	0x2000b434
 800e198:	0800fa75 	.word	0x0800fa75
 800e19c:	0800faad 	.word	0x0800faad
 800e1a0:	20001bc4 	.word	0x20001bc4

0800e1a4 <gos_sysmonDaemonTask>:
 * @details Serves the incoming system monitoring messages.
 *
 * @return -
 */
GOS_STATIC void_t gos_sysmonDaemonTask (void_t)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af02      	add	r7, sp, #8
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t lutIndex         = 0u;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	71bb      	strb	r3, [r7, #6]
    u8_t                    userMessageIndex = 0u;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	71fb      	strb	r3, [r7, #7]
    u16_t                   messageId        = 0u;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	80bb      	strh	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Reset message ID.
        messageId = 0u;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	80bb      	strh	r3, [r7, #4]

        // Check if a message was received.
        if (gos_gcpReceiveMessage(CFG_SYSMON_GCP_CHANNEL_NUM, &messageId, receiveBuffer, RECEIVE_BUFFER_SIZE, 0xFFFF) == GOS_SUCCESS)
 800e1ba:	1d39      	adds	r1, r7, #4
 800e1bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	2380      	movs	r3, #128	; 0x80
 800e1c4:	4a32      	ldr	r2, [pc, #200]	; (800e290 <gos_sysmonDaemonTask+0xec>)
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	f7fe face 	bl	800c768 <gos_gcpReceiveMessage>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b55      	cmp	r3, #85	; 0x55
 800e1d0:	d15a      	bne.n	800e288 <gos_sysmonDaemonTask+0xe4>
        {
            // Get LUT index.
            lutIndex = gos_sysmonGetLutIndex(messageId);
 800e1d2:	88bb      	ldrh	r3, [r7, #4]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f000 f861 	bl	800e29c <gos_sysmonGetLutIndex>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	71bb      	strb	r3, [r7, #6]

            // Check user registered messages.
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 800e1de:	79bb      	ldrb	r3, [r7, #6]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d002      	beq.n	800e1ea <gos_sysmonDaemonTask+0x46>
 800e1e4:	79bb      	ldrb	r3, [r7, #6]
 800e1e6:	2b10      	cmp	r3, #16
 800e1e8:	d138      	bne.n	800e25c <gos_sysmonDaemonTask+0xb8>
            {
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	71fb      	strb	r3, [r7, #7]
 800e1ee:	e031      	b.n	800e254 <gos_sysmonDaemonTask+0xb0>
                {
                    if (userMessages[userMessageIndex].messageId == messageId)
 800e1f0:	79fb      	ldrb	r3, [r7, #7]
 800e1f2:	4a28      	ldr	r2, [pc, #160]	; (800e294 <gos_sysmonDaemonTask+0xf0>)
 800e1f4:	011b      	lsls	r3, r3, #4
 800e1f6:	4413      	add	r3, r2
 800e1f8:	881a      	ldrh	r2, [r3, #0]
 800e1fa:	88bb      	ldrh	r3, [r7, #4]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d126      	bne.n	800e24e <gos_sysmonDaemonTask+0xaa>
                    {
                        // If payload is not NULL, copy it.
                        if (userMessages[userMessageIndex].payload != NULL)
 800e200:	79fb      	ldrb	r3, [r7, #7]
 800e202:	4a24      	ldr	r2, [pc, #144]	; (800e294 <gos_sysmonDaemonTask+0xf0>)
 800e204:	011b      	lsls	r3, r3, #4
 800e206:	4413      	add	r3, r2
 800e208:	3304      	adds	r3, #4
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d00f      	beq.n	800e230 <gos_sysmonDaemonTask+0x8c>
                        {
                            (void_t) memcpy(userMessages[userMessageIndex].payload, (void_t*)receiveBuffer, userMessages[userMessageIndex].payloadSize);
 800e210:	79fb      	ldrb	r3, [r7, #7]
 800e212:	4a20      	ldr	r2, [pc, #128]	; (800e294 <gos_sysmonDaemonTask+0xf0>)
 800e214:	011b      	lsls	r3, r3, #4
 800e216:	4413      	add	r3, r2
 800e218:	3304      	adds	r3, #4
 800e21a:	6818      	ldr	r0, [r3, #0]
 800e21c:	79fb      	ldrb	r3, [r7, #7]
 800e21e:	4a1d      	ldr	r2, [pc, #116]	; (800e294 <gos_sysmonDaemonTask+0xf0>)
 800e220:	011b      	lsls	r3, r3, #4
 800e222:	4413      	add	r3, r2
 800e224:	3308      	adds	r3, #8
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	461a      	mov	r2, r3
 800e22a:	4919      	ldr	r1, [pc, #100]	; (800e290 <gos_sysmonDaemonTask+0xec>)
 800e22c:	f002 fb31 	bl	8010892 <memcpy>
                        {
                            // Message has no payload.
                        }

                        // Call callback function.
                        if (userMessages[userMessageIndex].callback != NULL)
 800e230:	79fb      	ldrb	r3, [r7, #7]
 800e232:	4a18      	ldr	r2, [pc, #96]	; (800e294 <gos_sysmonDaemonTask+0xf0>)
 800e234:	011b      	lsls	r3, r3, #4
 800e236:	4413      	add	r3, r2
 800e238:	330c      	adds	r3, #12
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d006      	beq.n	800e24e <gos_sysmonDaemonTask+0xaa>
                        {
                        	userMessages[userMessageIndex].callback();
 800e240:	79fb      	ldrb	r3, [r7, #7]
 800e242:	4a14      	ldr	r2, [pc, #80]	; (800e294 <gos_sysmonDaemonTask+0xf0>)
 800e244:	011b      	lsls	r3, r3, #4
 800e246:	4413      	add	r3, r2
 800e248:	330c      	adds	r3, #12
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4798      	blx	r3
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 800e24e:	79fb      	ldrb	r3, [r7, #7]
 800e250:	3301      	adds	r3, #1
 800e252:	71fb      	strb	r3, [r7, #7]
 800e254:	79fb      	ldrb	r3, [r7, #7]
 800e256:	2b05      	cmp	r3, #5
 800e258:	d9ca      	bls.n	800e1f0 <gos_sysmonDaemonTask+0x4c>
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 800e25a:	e018      	b.n	800e28e <gos_sysmonDaemonTask+0xea>
                    }
                }
            }
            else
            {
                if (sysmonLut[lutIndex].pHandler != NULL)
 800e25c:	79bb      	ldrb	r3, [r7, #6]
 800e25e:	4a0e      	ldr	r2, [pc, #56]	; (800e298 <gos_sysmonDaemonTask+0xf4>)
 800e260:	011b      	lsls	r3, r3, #4
 800e262:	4413      	add	r3, r2
 800e264:	330c      	adds	r3, #12
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d009      	beq.n	800e280 <gos_sysmonDaemonTask+0xdc>
                {
                    sysmonLut[lutIndex].pHandler(lutIndex);
 800e26c:	79bb      	ldrb	r3, [r7, #6]
 800e26e:	4a0a      	ldr	r2, [pc, #40]	; (800e298 <gos_sysmonDaemonTask+0xf4>)
 800e270:	011b      	lsls	r3, r3, #4
 800e272:	4413      	add	r3, r2
 800e274:	330c      	adds	r3, #12
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	79ba      	ldrb	r2, [r7, #6]
 800e27a:	4610      	mov	r0, r2
 800e27c:	4798      	blx	r3
 800e27e:	e79a      	b.n	800e1b6 <gos_sysmonDaemonTask+0x12>
                }
                else
                {
                    gos_sysmonSendResponse(GOS_SYSMON_MSG_UNKNOWN);
 800e280:	2000      	movs	r0, #0
 800e282:	f000 f82f 	bl	800e2e4 <gos_sysmonSendResponse>
 800e286:	e796      	b.n	800e1b6 <gos_sysmonDaemonTask+0x12>
            }
        }
        else
        {
            // Reception error.
            (void_t) gos_taskSleep(10);
 800e288:	200a      	movs	r0, #10
 800e28a:	f7fc fab7 	bl	800a7fc <gos_taskSleep>
        messageId = 0u;
 800e28e:	e792      	b.n	800e1b6 <gos_sysmonDaemonTask+0x12>
 800e290:	2000b2bc 	.word	0x2000b2bc
 800e294:	2000b434 	.word	0x2000b434
 800e298:	08014708 	.word	0x08014708

0800e29c <gos_sysmonGetLutIndex>:
 * @param   messageId : ID of the message to get the index for.
 *
 * @return  Look-up table index of the message.
 */
GOS_STATIC gos_sysmonMessageEnum_t gos_sysmonGetLutIndex (gos_sysmonMessageId_t messageId)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t index = 0u;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	73fb      	strb	r3, [r7, #15]
 800e2ae:	e00a      	b.n	800e2c6 <gos_sysmonGetLutIndex+0x2a>
    {
        if (sysmonLut[index].messageId == messageId)
 800e2b0:	7bfb      	ldrb	r3, [r7, #15]
 800e2b2:	4a0b      	ldr	r2, [pc, #44]	; (800e2e0 <gos_sysmonGetLutIndex+0x44>)
 800e2b4:	011b      	lsls	r3, r3, #4
 800e2b6:	4413      	add	r3, r2
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	88fa      	ldrh	r2, [r7, #6]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d006      	beq.n	800e2ce <gos_sysmonGetLutIndex+0x32>
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 800e2c0:	7bfb      	ldrb	r3, [r7, #15]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	73fb      	strb	r3, [r7, #15]
 800e2c6:	7bfb      	ldrb	r3, [r7, #15]
 800e2c8:	2b0f      	cmp	r3, #15
 800e2ca:	d9f1      	bls.n	800e2b0 <gos_sysmonGetLutIndex+0x14>
 800e2cc:	e000      	b.n	800e2d0 <gos_sysmonGetLutIndex+0x34>
        {
            break;
 800e2ce:	bf00      	nop
        {
            // Continue searching.
        }
    }

    return index;
 800e2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3714      	adds	r7, #20
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop
 800e2e0:	08014708 	.word	0x08014708

0800e2e4 <gos_sysmonSendResponse>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonSendResponse (gos_sysmonMessageEnum_t lutIndex)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af02      	add	r7, sp, #8
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    (void_t) gos_gcpTransmitMessage(
 800e2ee:	79fb      	ldrb	r3, [r7, #7]
            CFG_SYSMON_GCP_CHANNEL_NUM,          sysmonLut[lutIndex].messageId,
 800e2f0:	4a0c      	ldr	r2, [pc, #48]	; (800e324 <gos_sysmonSendResponse+0x40>)
 800e2f2:	011b      	lsls	r3, r3, #4
 800e2f4:	4413      	add	r3, r2
 800e2f6:	8819      	ldrh	r1, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 800e2f8:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 800e2fa:	4a0a      	ldr	r2, [pc, #40]	; (800e324 <gos_sysmonSendResponse+0x40>)
 800e2fc:	011b      	lsls	r3, r3, #4
 800e2fe:	4413      	add	r3, r2
 800e300:	3304      	adds	r3, #4
 800e302:	681a      	ldr	r2, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 800e304:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 800e306:	4807      	ldr	r0, [pc, #28]	; (800e324 <gos_sysmonSendResponse+0x40>)
 800e308:	011b      	lsls	r3, r3, #4
 800e30a:	4403      	add	r3, r0
 800e30c:	3308      	adds	r3, #8
 800e30e:	881b      	ldrh	r3, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 800e310:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e314:	9000      	str	r0, [sp, #0]
 800e316:	2000      	movs	r0, #0
 800e318:	f7fe f8f4 	bl	800c504 <gos_gcpTransmitMessage>
			0xFFFF
            );
}
 800e31c:	bf00      	nop
 800e31e:	3708      	adds	r7, #8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	08014708 	.word	0x08014708

0800e328 <gos_sysmonHandlePingRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandlePingRequest (gos_sysmonMessageEnum_t lutIndex)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	4603      	mov	r3, r0
 800e330:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    pingMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 800e332:	79fb      	ldrb	r3, [r7, #7]
 800e334:	4618      	mov	r0, r3
 800e336:	f000 fb05 	bl	800e944 <gos_sysmonCheckMessage>
 800e33a:	4603      	mov	r3, r0
 800e33c:	461a      	mov	r2, r3
 800e33e:	4b06      	ldr	r3, [pc, #24]	; (800e358 <gos_sysmonHandlePingRequest+0x30>)
 800e340:	701a      	strb	r2, [r3, #0]
    gos_sysmonSendResponse(lutIndex + 1);
 800e342:	79fb      	ldrb	r3, [r7, #7]
 800e344:	3301      	adds	r3, #1
 800e346:	b2db      	uxtb	r3, r3
 800e348:	4618      	mov	r0, r3
 800e34a:	f7ff ffcb 	bl	800e2e4 <gos_sysmonSendResponse>
}
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	2000b33c 	.word	0x2000b33c

0800e35c <gos_sysmonHandleCpuUsageGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleCpuUsageGet (gos_sysmonMessageEnum_t lutIndex)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	4603      	mov	r3, r0
 800e364:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    cpuMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 800e366:	79fb      	ldrb	r3, [r7, #7]
 800e368:	4618      	mov	r0, r3
 800e36a:	f000 faeb 	bl	800e944 <gos_sysmonCheckMessage>
 800e36e:	4603      	mov	r3, r0
 800e370:	461a      	mov	r2, r3
 800e372:	4b0b      	ldr	r3, [pc, #44]	; (800e3a0 <gos_sysmonHandleCpuUsageGet+0x44>)
 800e374:	701a      	strb	r2, [r3, #0]

    if (cpuMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 800e376:	4b0a      	ldr	r3, [pc, #40]	; (800e3a0 <gos_sysmonHandleCpuUsageGet+0x44>)
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	2b28      	cmp	r3, #40	; 0x28
 800e37c:	d106      	bne.n	800e38c <gos_sysmonHandleCpuUsageGet+0x30>
    {
        cpuMessage.cpuUsage = gos_kernelGetCpuUsage();
 800e37e:	f7fb f899 	bl	80094b4 <gos_kernelGetCpuUsage>
 800e382:	4603      	mov	r3, r0
 800e384:	461a      	mov	r2, r3
 800e386:	4b06      	ldr	r3, [pc, #24]	; (800e3a0 <gos_sysmonHandleCpuUsageGet+0x44>)
 800e388:	f8a3 2001 	strh.w	r2, [r3, #1]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 800e38c:	79fb      	ldrb	r3, [r7, #7]
 800e38e:	3301      	adds	r3, #1
 800e390:	b2db      	uxtb	r3, r3
 800e392:	4618      	mov	r0, r3
 800e394:	f7ff ffa6 	bl	800e2e4 <gos_sysmonSendResponse>
}
 800e398:	bf00      	nop
 800e39a:	3708      	adds	r7, #8
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	2000b340 	.word	0x2000b340

0800e3a4 <gos_sysmonHandleTaskDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 800e3b2:	2349      	movs	r3, #73	; 0x49
 800e3b4:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 800e3b6:	79fb      	ldrb	r3, [r7, #7]
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f000 fac3 	bl	800e944 <gos_sysmonCheckMessage>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	4b66      	ldr	r3, [pc, #408]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e3c4:	701a      	strb	r2, [r3, #0]

    if (taskDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 800e3c6:	4b65      	ldr	r3, [pc, #404]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e3c8:	781b      	ldrb	r3, [r3, #0]
 800e3ca:	2b28      	cmp	r3, #40	; 0x28
 800e3cc:	f040 80c2 	bne.w	800e554 <gos_sysmonHandleTaskDataGet+0x1b0>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 800e3d0:	4b63      	ldr	r3, [pc, #396]	; (800e560 <gos_sysmonHandleTaskDataGet+0x1bc>)
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d168      	bne.n	800e4ae <gos_sysmonHandleTaskDataGet+0x10a>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800e3dc:	2300      	movs	r3, #0
 800e3de:	81fb      	strh	r3, [r7, #14]
 800e3e0:	e061      	b.n	800e4a6 <gos_sysmonHandleTaskDataGet+0x102>
            {
                if (breakLoop == GOS_TRUE)
 800e3e2:	7b7b      	ldrb	r3, [r7, #13]
 800e3e4:	2b36      	cmp	r3, #54	; 0x36
 800e3e6:	f000 80b4 	beq.w	800e552 <gos_sysmonHandleTaskDataGet+0x1ae>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 800e3ea:	89fb      	ldrh	r3, [r7, #14]
 800e3ec:	495d      	ldr	r1, [pc, #372]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7fd fd0e 	bl	800be10 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 800e3f4:	4b5b      	ldr	r3, [pc, #364]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e3f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3fc:	d045      	beq.n	800e48a <gos_sysmonHandleTaskDataGet+0xe6>
                {
                    taskDataMsg.taskData.taskId               = taskDesc.taskId;
 800e3fe:	4b59      	ldr	r3, [pc, #356]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e400:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e402:	4b56      	ldr	r3, [pc, #344]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e404:	84da      	strh	r2, [r3, #38]	; 0x26
                    taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 800e406:	4b57      	ldr	r3, [pc, #348]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e408:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e40c:	4b53      	ldr	r3, [pc, #332]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e40e:	859a      	strh	r2, [r3, #44]	; 0x2c
                    taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 800e410:	4b54      	ldr	r3, [pc, #336]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e412:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e416:	4b51      	ldr	r3, [pc, #324]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e418:	f8a3 203d 	strh.w	r2, [r3, #61]	; 0x3d
                    taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 800e41c:	4b51      	ldr	r3, [pc, #324]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e41e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800e422:	4b4e      	ldr	r3, [pc, #312]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e424:	f8a3 2037 	strh.w	r2, [r3, #55]	; 0x37
                    taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 800e428:	4b4e      	ldr	r3, [pc, #312]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e42a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e42e:	4b4b      	ldr	r3, [pc, #300]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e430:	f8a3 203b 	strh.w	r2, [r3, #59]	; 0x3b
                    taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 800e434:	4b4b      	ldr	r3, [pc, #300]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e436:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e43a:	4b48      	ldr	r3, [pc, #288]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e43c:	f8a3 2039 	strh.w	r2, [r3, #57]	; 0x39
                    taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 800e440:	4b48      	ldr	r3, [pc, #288]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e442:	79da      	ldrb	r2, [r3, #7]
 800e444:	4b45      	ldr	r3, [pc, #276]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e446:	70da      	strb	r2, [r3, #3]
                    taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 800e448:	4b46      	ldr	r3, [pc, #280]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e44a:	799a      	ldrb	r2, [r3, #6]
 800e44c:	4b43      	ldr	r3, [pc, #268]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e44e:	709a      	strb	r2, [r3, #2]
                    taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 800e450:	4b44      	ldr	r3, [pc, #272]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e454:	4a41      	ldr	r2, [pc, #260]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e456:	6293      	str	r3, [r2, #40]	; 0x28
                    taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 800e458:	4b42      	ldr	r3, [pc, #264]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e45a:	891a      	ldrh	r2, [r3, #8]
 800e45c:	4b3f      	ldr	r3, [pc, #252]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e45e:	809a      	strh	r2, [r3, #4]
                    taskDataMsg.taskData.taskState            = taskDesc.taskState;
 800e460:	4b40      	ldr	r3, [pc, #256]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e462:	791a      	ldrb	r2, [r3, #4]
 800e464:	4b3d      	ldr	r3, [pc, #244]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e466:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 800e468:	4a3c      	ldr	r2, [pc, #240]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e46a:	4b3e      	ldr	r3, [pc, #248]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e46c:	322e      	adds	r2, #46	; 0x2e
 800e46e:	334c      	adds	r3, #76	; 0x4c
 800e470:	cb03      	ldmia	r3!, {r0, r1}
 800e472:	6010      	str	r0, [r2, #0]
 800e474:	6051      	str	r1, [r2, #4]
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	7213      	strb	r3, [r2, #8]
                    (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 800e47a:	493b      	ldr	r1, [pc, #236]	; (800e568 <gos_sysmonHandleTaskDataGet+0x1c4>)
 800e47c:	483b      	ldr	r0, [pc, #236]	; (800e56c <gos_sysmonHandleTaskDataGet+0x1c8>)
 800e47e:	f002 fa00 	bl	8010882 <strcpy>

                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e482:	4b36      	ldr	r3, [pc, #216]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e484:	2228      	movs	r2, #40	; 0x28
 800e486:	701a      	strb	r2, [r3, #0]
 800e488:	e004      	b.n	800e494 <gos_sysmonHandleTaskDataGet+0xf0>
                }
                else
                {
                    // Last task found.
                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e48a:	4b34      	ldr	r3, [pc, #208]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e48c:	2263      	movs	r2, #99	; 0x63
 800e48e:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 800e490:	2336      	movs	r3, #54	; 0x36
 800e492:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	3301      	adds	r3, #1
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7ff ff22 	bl	800e2e4 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800e4a0:	89fb      	ldrh	r3, [r7, #14]
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	81fb      	strh	r3, [r7, #14]
 800e4a6:	89fb      	ldrh	r3, [r7, #14]
 800e4a8:	2b2f      	cmp	r3, #47	; 0x2f
 800e4aa:	d99a      	bls.n	800e3e2 <gos_sysmonHandleTaskDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 800e4ac:	e052      	b.n	800e554 <gos_sysmonHandleTaskDataGet+0x1b0>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 800e4ae:	4b2c      	ldr	r3, [pc, #176]	; (800e560 <gos_sysmonHandleTaskDataGet+0x1bc>)
 800e4b0:	881b      	ldrh	r3, [r3, #0]
 800e4b2:	492c      	ldr	r1, [pc, #176]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fd fcab 	bl	800be10 <gos_taskGetDataByIndex>
            taskDataMsg.taskData.taskId               = taskDesc.taskId;
 800e4ba:	4b2a      	ldr	r3, [pc, #168]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e4bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e4be:	4b27      	ldr	r3, [pc, #156]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e4c0:	84da      	strh	r2, [r3, #38]	; 0x26
            taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 800e4c2:	4b28      	ldr	r3, [pc, #160]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e4c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e4c8:	4b24      	ldr	r3, [pc, #144]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e4ca:	859a      	strh	r2, [r3, #44]	; 0x2c
            taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 800e4cc:	4b25      	ldr	r3, [pc, #148]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e4ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e4d2:	4b22      	ldr	r3, [pc, #136]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e4d4:	f8a3 203d 	strh.w	r2, [r3, #61]	; 0x3d
            taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 800e4d8:	4b22      	ldr	r3, [pc, #136]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e4da:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800e4de:	4b1f      	ldr	r3, [pc, #124]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e4e0:	f8a3 2037 	strh.w	r2, [r3, #55]	; 0x37
            taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 800e4e4:	4b1f      	ldr	r3, [pc, #124]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e4e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e4ea:	4b1c      	ldr	r3, [pc, #112]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e4ec:	f8a3 203b 	strh.w	r2, [r3, #59]	; 0x3b
            taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 800e4f0:	4b1c      	ldr	r3, [pc, #112]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e4f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4f6:	4b19      	ldr	r3, [pc, #100]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e4f8:	f8a3 2039 	strh.w	r2, [r3, #57]	; 0x39
            taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 800e4fc:	4b19      	ldr	r3, [pc, #100]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e4fe:	79da      	ldrb	r2, [r3, #7]
 800e500:	4b16      	ldr	r3, [pc, #88]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e502:	70da      	strb	r2, [r3, #3]
            taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 800e504:	4b17      	ldr	r3, [pc, #92]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e506:	799a      	ldrb	r2, [r3, #6]
 800e508:	4b14      	ldr	r3, [pc, #80]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e50a:	709a      	strb	r2, [r3, #2]
            taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 800e50c:	4b15      	ldr	r3, [pc, #84]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e50e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e510:	4a12      	ldr	r2, [pc, #72]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e512:	6293      	str	r3, [r2, #40]	; 0x28
            taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 800e514:	4b13      	ldr	r3, [pc, #76]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e516:	891a      	ldrh	r2, [r3, #8]
 800e518:	4b10      	ldr	r3, [pc, #64]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e51a:	809a      	strh	r2, [r3, #4]
            taskDataMsg.taskData.taskState            = taskDesc.taskState;
 800e51c:	4b11      	ldr	r3, [pc, #68]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e51e:	791a      	ldrb	r2, [r3, #4]
 800e520:	4b0e      	ldr	r3, [pc, #56]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e522:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 800e524:	4a0d      	ldr	r2, [pc, #52]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e526:	4b0f      	ldr	r3, [pc, #60]	; (800e564 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800e528:	322e      	adds	r2, #46	; 0x2e
 800e52a:	334c      	adds	r3, #76	; 0x4c
 800e52c:	cb03      	ldmia	r3!, {r0, r1}
 800e52e:	6010      	str	r0, [r2, #0]
 800e530:	6051      	str	r1, [r2, #4]
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	7213      	strb	r3, [r2, #8]
            (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 800e536:	490c      	ldr	r1, [pc, #48]	; (800e568 <gos_sysmonHandleTaskDataGet+0x1c4>)
 800e538:	480c      	ldr	r0, [pc, #48]	; (800e56c <gos_sysmonHandleTaskDataGet+0x1c8>)
 800e53a:	f002 f9a2 	bl	8010882 <strcpy>
            taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e53e:	4b07      	ldr	r3, [pc, #28]	; (800e55c <gos_sysmonHandleTaskDataGet+0x1b8>)
 800e540:	2228      	movs	r2, #40	; 0x28
 800e542:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 800e544:	79fb      	ldrb	r3, [r7, #7]
 800e546:	3301      	adds	r3, #1
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7ff feca 	bl	800e2e4 <gos_sysmonSendResponse>
}
 800e550:	e000      	b.n	800e554 <gos_sysmonHandleTaskDataGet+0x1b0>
                    break;
 800e552:	bf00      	nop
}
 800e554:	bf00      	nop
 800e556:	3710      	adds	r7, #16
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	2000b348 	.word	0x2000b348
 800e560:	2000b344 	.word	0x2000b344
 800e564:	2000b3a0 	.word	0x2000b3a0
 800e568:	2000b3aa 	.word	0x2000b3aa
 800e56c:	2000b34e 	.word	0x2000b34e

0800e570 <gos_sysmonHandleTaskVariableDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskVariableDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	4603      	mov	r3, r0
 800e578:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 800e57a:	2300      	movs	r3, #0
 800e57c:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 800e57e:	2349      	movs	r3, #73	; 0x49
 800e580:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskVariableDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 800e582:	79fb      	ldrb	r3, [r7, #7]
 800e584:	4618      	mov	r0, r3
 800e586:	f000 f9dd 	bl	800e944 <gos_sysmonCheckMessage>
 800e58a:	4603      	mov	r3, r0
 800e58c:	461a      	mov	r2, r3
 800e58e:	4b49      	ldr	r3, [pc, #292]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e590:	701a      	strb	r2, [r3, #0]

    if (taskVariableDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 800e592:	4b48      	ldr	r3, [pc, #288]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	2b28      	cmp	r3, #40	; 0x28
 800e598:	f040 8087 	bne.w	800e6aa <gos_sysmonHandleTaskVariableDataGet+0x13a>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 800e59c:	4b46      	ldr	r3, [pc, #280]	; (800e6b8 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 800e59e:	881b      	ldrh	r3, [r3, #0]
 800e5a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d14a      	bne.n	800e63e <gos_sysmonHandleTaskVariableDataGet+0xce>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	81fb      	strh	r3, [r7, #14]
 800e5ac:	e043      	b.n	800e636 <gos_sysmonHandleTaskVariableDataGet+0xc6>
            {
                if (breakLoop == GOS_TRUE)
 800e5ae:	7b7b      	ldrb	r3, [r7, #13]
 800e5b0:	2b36      	cmp	r3, #54	; 0x36
 800e5b2:	d079      	beq.n	800e6a8 <gos_sysmonHandleTaskVariableDataGet+0x138>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 800e5b4:	89fb      	ldrh	r3, [r7, #14]
 800e5b6:	4941      	ldr	r1, [pc, #260]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fd fc29 	bl	800be10 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 800e5be:	4b3f      	ldr	r3, [pc, #252]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e5c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5c6:	d028      	beq.n	800e61a <gos_sysmonHandleTaskVariableDataGet+0xaa>
                {
                    taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 800e5c8:	4b3c      	ldr	r3, [pc, #240]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e5ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e5ce:	4b39      	ldr	r3, [pc, #228]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e5d0:	829a      	strh	r2, [r3, #20]
                    taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 800e5d2:	4b3a      	ldr	r3, [pc, #232]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e5d4:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e5d8:	4b36      	ldr	r3, [pc, #216]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e5da:	825a      	strh	r2, [r3, #18]
                    taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 800e5dc:	4b37      	ldr	r3, [pc, #220]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e5de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e5e2:	4b34      	ldr	r3, [pc, #208]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e5e4:	821a      	strh	r2, [r3, #16]
                    taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 800e5e6:	4b35      	ldr	r3, [pc, #212]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e5e8:	799a      	ldrb	r2, [r3, #6]
 800e5ea:	4b32      	ldr	r3, [pc, #200]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e5ec:	709a      	strb	r2, [r3, #2]
                    taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 800e5ee:	4b33      	ldr	r3, [pc, #204]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5f2:	4a30      	ldr	r2, [pc, #192]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e5f4:	f8c2 3003 	str.w	r3, [r2, #3]
                    taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 800e5f8:	4b30      	ldr	r3, [pc, #192]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e5fa:	791a      	ldrb	r2, [r3, #4]
 800e5fc:	4b2d      	ldr	r3, [pc, #180]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e5fe:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 800e600:	4a2c      	ldr	r2, [pc, #176]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e602:	4b2e      	ldr	r3, [pc, #184]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e604:	3207      	adds	r2, #7
 800e606:	334c      	adds	r3, #76	; 0x4c
 800e608:	cb03      	ldmia	r3!, {r0, r1}
 800e60a:	6010      	str	r0, [r2, #0]
 800e60c:	6051      	str	r1, [r2, #4]
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	7213      	strb	r3, [r2, #8]

                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e612:	4b28      	ldr	r3, [pc, #160]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e614:	2228      	movs	r2, #40	; 0x28
 800e616:	701a      	strb	r2, [r3, #0]
 800e618:	e004      	b.n	800e624 <gos_sysmonHandleTaskVariableDataGet+0xb4>

                }
                else
                {
                    // Last task found.
                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e61a:	4b26      	ldr	r3, [pc, #152]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e61c:	2263      	movs	r2, #99	; 0x63
 800e61e:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 800e620:	2336      	movs	r3, #54	; 0x36
 800e622:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 800e624:	79fb      	ldrb	r3, [r7, #7]
 800e626:	3301      	adds	r3, #1
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7ff fe5a 	bl	800e2e4 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800e630:	89fb      	ldrh	r3, [r7, #14]
 800e632:	3301      	adds	r3, #1
 800e634:	81fb      	strh	r3, [r7, #14]
 800e636:	89fb      	ldrh	r3, [r7, #14]
 800e638:	2b2f      	cmp	r3, #47	; 0x2f
 800e63a:	d9b8      	bls.n	800e5ae <gos_sysmonHandleTaskVariableDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 800e63c:	e035      	b.n	800e6aa <gos_sysmonHandleTaskVariableDataGet+0x13a>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 800e63e:	4b1e      	ldr	r3, [pc, #120]	; (800e6b8 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 800e640:	881b      	ldrh	r3, [r3, #0]
 800e642:	491e      	ldr	r1, [pc, #120]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e644:	4618      	mov	r0, r3
 800e646:	f7fd fbe3 	bl	800be10 <gos_taskGetDataByIndex>
            taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 800e64a:	4b1c      	ldr	r3, [pc, #112]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e64c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e650:	4b18      	ldr	r3, [pc, #96]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e652:	829a      	strh	r2, [r3, #20]
            taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 800e654:	4b19      	ldr	r3, [pc, #100]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e656:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e65a:	4b16      	ldr	r3, [pc, #88]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e65c:	825a      	strh	r2, [r3, #18]
            taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 800e65e:	4b17      	ldr	r3, [pc, #92]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e660:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e664:	4b13      	ldr	r3, [pc, #76]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e666:	821a      	strh	r2, [r3, #16]
            taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 800e668:	4b14      	ldr	r3, [pc, #80]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e66a:	799a      	ldrb	r2, [r3, #6]
 800e66c:	4b11      	ldr	r3, [pc, #68]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e66e:	709a      	strb	r2, [r3, #2]
            taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 800e670:	4b12      	ldr	r3, [pc, #72]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e674:	4a0f      	ldr	r2, [pc, #60]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e676:	f8c2 3003 	str.w	r3, [r2, #3]
            taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 800e67a:	4b10      	ldr	r3, [pc, #64]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e67c:	791a      	ldrb	r2, [r3, #4]
 800e67e:	4b0d      	ldr	r3, [pc, #52]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e680:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 800e682:	4a0c      	ldr	r2, [pc, #48]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e684:	4b0d      	ldr	r3, [pc, #52]	; (800e6bc <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800e686:	3207      	adds	r2, #7
 800e688:	334c      	adds	r3, #76	; 0x4c
 800e68a:	cb03      	ldmia	r3!, {r0, r1}
 800e68c:	6010      	str	r0, [r2, #0]
 800e68e:	6051      	str	r1, [r2, #4]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	7213      	strb	r3, [r2, #8]
            taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e694:	4b07      	ldr	r3, [pc, #28]	; (800e6b4 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800e696:	2228      	movs	r2, #40	; 0x28
 800e698:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 800e69a:	79fb      	ldrb	r3, [r7, #7]
 800e69c:	3301      	adds	r3, #1
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7ff fe1f 	bl	800e2e4 <gos_sysmonSendResponse>
}
 800e6a6:	e000      	b.n	800e6aa <gos_sysmonHandleTaskVariableDataGet+0x13a>
                    break;
 800e6a8:	bf00      	nop
}
 800e6aa:	bf00      	nop
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	2000b388 	.word	0x2000b388
 800e6b8:	2000b344 	.word	0x2000b344
 800e6bc:	2000b3a0 	.word	0x2000b3a0

0800e6c0 <gos_sysmonHandleTaskModification>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskModification (gos_sysmonMessageEnum_t lutIndex)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    taskModifyResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 800e6ca:	79fb      	ldrb	r3, [r7, #7]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f000 f939 	bl	800e944 <gos_sysmonCheckMessage>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	4b63      	ldr	r3, [pc, #396]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e6d8:	701a      	strb	r2, [r3, #0]

    if (taskModifyResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 800e6da:	4b62      	ldr	r3, [pc, #392]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	2b28      	cmp	r3, #40	; 0x28
 800e6e0:	f040 80b5 	bne.w	800e84e <gos_sysmonHandleTaskModification+0x18e>
    {
        // Send specific task data.
        (void_t) gos_taskGetDataByIndex(taskModifyMessage.taskIndex, &taskDesc);
 800e6e4:	4b60      	ldr	r3, [pc, #384]	; (800e868 <gos_sysmonHandleTaskModification+0x1a8>)
 800e6e6:	881b      	ldrh	r3, [r3, #0]
 800e6e8:	4960      	ldr	r1, [pc, #384]	; (800e86c <gos_sysmonHandleTaskModification+0x1ac>)
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fd fb90 	bl	800be10 <gos_taskGetDataByIndex>

         // Perform request based on modification type.
         switch (taskModifyMessage.modificationType)
 800e6f0:	4b5d      	ldr	r3, [pc, #372]	; (800e868 <gos_sysmonHandleTaskModification+0x1a8>)
 800e6f2:	789b      	ldrb	r3, [r3, #2]
 800e6f4:	2b4a      	cmp	r3, #74	; 0x4a
 800e6f6:	f300 80a7 	bgt.w	800e848 <gos_sysmonHandleTaskModification+0x188>
 800e6fa:	2b31      	cmp	r3, #49	; 0x31
 800e6fc:	da04      	bge.n	800e708 <gos_sysmonHandleTaskModification+0x48>
 800e6fe:	2b0c      	cmp	r3, #12
 800e700:	d03e      	beq.n	800e780 <gos_sysmonHandleTaskModification+0xc0>
 800e702:	2b22      	cmp	r3, #34	; 0x22
 800e704:	d04c      	beq.n	800e7a0 <gos_sysmonHandleTaskModification+0xe0>
 800e706:	e09f      	b.n	800e848 <gos_sysmonHandleTaskModification+0x188>
 800e708:	3b31      	subs	r3, #49	; 0x31
 800e70a:	2b19      	cmp	r3, #25
 800e70c:	f200 809c 	bhi.w	800e848 <gos_sysmonHandleTaskModification+0x188>
 800e710:	a201      	add	r2, pc, #4	; (adr r2, 800e718 <gos_sysmonHandleTaskModification+0x58>)
 800e712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e716:	bf00      	nop
 800e718:	0800e7c1 	.word	0x0800e7c1
 800e71c:	0800e849 	.word	0x0800e849
 800e720:	0800e849 	.word	0x0800e849
 800e724:	0800e7e1 	.word	0x0800e7e1
 800e728:	0800e849 	.word	0x0800e849
 800e72c:	0800e849 	.word	0x0800e849
 800e730:	0800e849 	.word	0x0800e849
 800e734:	0800e849 	.word	0x0800e849
 800e738:	0800e849 	.word	0x0800e849
 800e73c:	0800e849 	.word	0x0800e849
 800e740:	0800e849 	.word	0x0800e849
 800e744:	0800e849 	.word	0x0800e849
 800e748:	0800e849 	.word	0x0800e849
 800e74c:	0800e849 	.word	0x0800e849
 800e750:	0800e809 	.word	0x0800e809
 800e754:	0800e849 	.word	0x0800e849
 800e758:	0800e849 	.word	0x0800e849
 800e75c:	0800e849 	.word	0x0800e849
 800e760:	0800e849 	.word	0x0800e849
 800e764:	0800e849 	.word	0x0800e849
 800e768:	0800e849 	.word	0x0800e849
 800e76c:	0800e849 	.word	0x0800e849
 800e770:	0800e849 	.word	0x0800e849
 800e774:	0800e849 	.word	0x0800e849
 800e778:	0800e849 	.word	0x0800e849
 800e77c:	0800e829 	.word	0x0800e829
         {
             case GOS_SYSMON_TASK_MOD_TYPE_SUSPEND:
             {
                 if (gos_taskSuspend(taskDesc.taskId) == GOS_SUCCESS)
 800e780:	4b3a      	ldr	r3, [pc, #232]	; (800e86c <gos_sysmonHandleTaskModification+0x1ac>)
 800e782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e784:	4618      	mov	r0, r3
 800e786:	f7fc f985 	bl	800aa94 <gos_taskSuspend>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b55      	cmp	r3, #85	; 0x55
 800e78e:	d103      	bne.n	800e798 <gos_sysmonHandleTaskModification+0xd8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e790:	4b34      	ldr	r3, [pc, #208]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e792:	2228      	movs	r2, #40	; 0x28
 800e794:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800e796:	e05a      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e798:	4b32      	ldr	r3, [pc, #200]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e79a:	2263      	movs	r2, #99	; 0x63
 800e79c:	701a      	strb	r2, [r3, #0]
                 break;
 800e79e:	e056      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_RESUME:
             {
                 if (gos_taskResume(taskDesc.taskId) == GOS_SUCCESS)
 800e7a0:	4b32      	ldr	r3, [pc, #200]	; (800e86c <gos_sysmonHandleTaskModification+0x1ac>)
 800e7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fc fa97 	bl	800acd8 <gos_taskResume>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b55      	cmp	r3, #85	; 0x55
 800e7ae:	d103      	bne.n	800e7b8 <gos_sysmonHandleTaskModification+0xf8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e7b0:	4b2c      	ldr	r3, [pc, #176]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e7b2:	2228      	movs	r2, #40	; 0x28
 800e7b4:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800e7b6:	e04a      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e7b8:	4b2a      	ldr	r3, [pc, #168]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e7ba:	2263      	movs	r2, #99	; 0x63
 800e7bc:	701a      	strb	r2, [r3, #0]
                 break;
 800e7be:	e046      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_DELETE:
             {
                 if (gos_taskDelete(taskDesc.taskId) == GOS_SUCCESS)
 800e7c0:	4b2a      	ldr	r3, [pc, #168]	; (800e86c <gos_sysmonHandleTaskModification+0x1ac>)
 800e7c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7fc fd31 	bl	800b22c <gos_taskDelete>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b55      	cmp	r3, #85	; 0x55
 800e7ce:	d103      	bne.n	800e7d8 <gos_sysmonHandleTaskModification+0x118>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e7d0:	4b24      	ldr	r3, [pc, #144]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e7d2:	2228      	movs	r2, #40	; 0x28
 800e7d4:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800e7d6:	e03a      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e7d8:	4b22      	ldr	r3, [pc, #136]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e7da:	2263      	movs	r2, #99	; 0x63
 800e7dc:	701a      	strb	r2, [r3, #0]
                 break;
 800e7de:	e036      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_BLOCK:
             {
                 if (gos_taskBlock(taskDesc.taskId, taskModifyMessage.param) == GOS_SUCCESS)
 800e7e0:	4b22      	ldr	r3, [pc, #136]	; (800e86c <gos_sysmonHandleTaskModification+0x1ac>)
 800e7e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7e4:	4a20      	ldr	r2, [pc, #128]	; (800e868 <gos_sysmonHandleTaskModification+0x1a8>)
 800e7e6:	f8d2 2003 	ldr.w	r2, [r2, #3]
 800e7ea:	4611      	mov	r1, r2
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fc fb21 	bl	800ae34 <gos_taskBlock>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b55      	cmp	r3, #85	; 0x55
 800e7f6:	d103      	bne.n	800e800 <gos_sysmonHandleTaskModification+0x140>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e7f8:	4b1a      	ldr	r3, [pc, #104]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e7fa:	2228      	movs	r2, #40	; 0x28
 800e7fc:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800e7fe:	e026      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e800:	4b18      	ldr	r3, [pc, #96]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e802:	2263      	movs	r2, #99	; 0x63
 800e804:	701a      	strb	r2, [r3, #0]
                 break;
 800e806:	e022      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_UNBLOCK:
             {
                 if (gos_taskUnblock(taskDesc.taskId) == GOS_SUCCESS)
 800e808:	4b18      	ldr	r3, [pc, #96]	; (800e86c <gos_sysmonHandleTaskModification+0x1ac>)
 800e80a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fc fc23 	bl	800b058 <gos_taskUnblock>
 800e812:	4603      	mov	r3, r0
 800e814:	2b55      	cmp	r3, #85	; 0x55
 800e816:	d103      	bne.n	800e820 <gos_sysmonHandleTaskModification+0x160>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e818:	4b12      	ldr	r3, [pc, #72]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e81a:	2228      	movs	r2, #40	; 0x28
 800e81c:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800e81e:	e016      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e820:	4b10      	ldr	r3, [pc, #64]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e822:	2263      	movs	r2, #99	; 0x63
 800e824:	701a      	strb	r2, [r3, #0]
                 break;
 800e826:	e012      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_WAKEUP:
             {
                 if (gos_taskWakeup(taskDesc.taskId) == GOS_SUCCESS)
 800e828:	4b10      	ldr	r3, [pc, #64]	; (800e86c <gos_sysmonHandleTaskModification+0x1ac>)
 800e82a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fc f86b 	bl	800a908 <gos_taskWakeup>
 800e832:	4603      	mov	r3, r0
 800e834:	2b55      	cmp	r3, #85	; 0x55
 800e836:	d103      	bne.n	800e840 <gos_sysmonHandleTaskModification+0x180>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e838:	4b0a      	ldr	r3, [pc, #40]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e83a:	2228      	movs	r2, #40	; 0x28
 800e83c:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800e83e:	e006      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e840:	4b08      	ldr	r3, [pc, #32]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e842:	2263      	movs	r2, #99	; 0x63
 800e844:	701a      	strb	r2, [r3, #0]
                 break;
 800e846:	e002      	b.n	800e84e <gos_sysmonHandleTaskModification+0x18e>
             }
             default:
             {
                 taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e848:	4b06      	ldr	r3, [pc, #24]	; (800e864 <gos_sysmonHandleTaskModification+0x1a4>)
 800e84a:	2263      	movs	r2, #99	; 0x63
 800e84c:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 800e84e:	79fb      	ldrb	r3, [r7, #7]
 800e850:	3301      	adds	r3, #1
 800e852:	b2db      	uxtb	r3, r3
 800e854:	4618      	mov	r0, r3
 800e856:	f7ff fd45 	bl	800e2e4 <gos_sysmonSendResponse>
}
 800e85a:	bf00      	nop
 800e85c:	3708      	adds	r7, #8
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	2000b414 	.word	0x2000b414
 800e868:	2000b40c 	.word	0x2000b40c
 800e86c:	2000b3a0 	.word	0x2000b3a0

0800e870 <gos_sysmonHandleSysRuntimeGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSysRuntimeGet (gos_sysmonMessageEnum_t lutIndex)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	4603      	mov	r3, r0
 800e878:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysRuntimeGetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 800e87a:	79fb      	ldrb	r3, [r7, #7]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f000 f861 	bl	800e944 <gos_sysmonCheckMessage>
 800e882:	4603      	mov	r3, r0
 800e884:	461a      	mov	r2, r3
 800e886:	4b0e      	ldr	r3, [pc, #56]	; (800e8c0 <gos_sysmonHandleSysRuntimeGet+0x50>)
 800e888:	701a      	strb	r2, [r3, #0]

    if (sysRuntimeGetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 800e88a:	4b0d      	ldr	r3, [pc, #52]	; (800e8c0 <gos_sysmonHandleSysRuntimeGet+0x50>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	2b28      	cmp	r3, #40	; 0x28
 800e890:	d10c      	bne.n	800e8ac <gos_sysmonHandleSysRuntimeGet+0x3c>
    {
        if (gos_runTimeGet(&sysRuntimeGetResultMessage.sysRuntime) == GOS_SUCCESS)
 800e892:	480c      	ldr	r0, [pc, #48]	; (800e8c4 <gos_sysmonHandleSysRuntimeGet+0x54>)
 800e894:	f000 f8d8 	bl	800ea48 <gos_runTimeGet>
 800e898:	4603      	mov	r3, r0
 800e89a:	2b55      	cmp	r3, #85	; 0x55
 800e89c:	d103      	bne.n	800e8a6 <gos_sysmonHandleSysRuntimeGet+0x36>
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e89e:	4b08      	ldr	r3, [pc, #32]	; (800e8c0 <gos_sysmonHandleSysRuntimeGet+0x50>)
 800e8a0:	2228      	movs	r2, #40	; 0x28
 800e8a2:	701a      	strb	r2, [r3, #0]
 800e8a4:	e002      	b.n	800e8ac <gos_sysmonHandleSysRuntimeGet+0x3c>
        }
        else
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e8a6:	4b06      	ldr	r3, [pc, #24]	; (800e8c0 <gos_sysmonHandleSysRuntimeGet+0x50>)
 800e8a8:	2263      	movs	r2, #99	; 0x63
 800e8aa:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 800e8ac:	79fb      	ldrb	r3, [r7, #7]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7ff fd16 	bl	800e2e4 <gos_sysmonSendResponse>
}
 800e8b8:	bf00      	nop
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	2000b418 	.word	0x2000b418
 800e8c4:	2000b419 	.word	0x2000b419

0800e8c8 <gos_sysmonHandleSystimeSet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSystimeSet (gos_sysmonMessageEnum_t lutIndex)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysTimeSetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 800e8d2:	79fb      	ldrb	r3, [r7, #7]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f000 f835 	bl	800e944 <gos_sysmonCheckMessage>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	461a      	mov	r2, r3
 800e8de:	4b0e      	ldr	r3, [pc, #56]	; (800e918 <gos_sysmonHandleSystimeSet+0x50>)
 800e8e0:	701a      	strb	r2, [r3, #0]

    if (sysTimeSetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 800e8e2:	4b0d      	ldr	r3, [pc, #52]	; (800e918 <gos_sysmonHandleSystimeSet+0x50>)
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	2b28      	cmp	r3, #40	; 0x28
 800e8e8:	d10c      	bne.n	800e904 <gos_sysmonHandleSystimeSet+0x3c>
    {
        if (gos_timeSet(&sysTimeSetMessage.desiredSystemTime) == GOS_SUCCESS)
 800e8ea:	480c      	ldr	r0, [pc, #48]	; (800e91c <gos_sysmonHandleSystimeSet+0x54>)
 800e8ec:	f000 f890 	bl	800ea10 <gos_timeSet>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b55      	cmp	r3, #85	; 0x55
 800e8f4:	d103      	bne.n	800e8fe <gos_sysmonHandleSystimeSet+0x36>
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800e8f6:	4b08      	ldr	r3, [pc, #32]	; (800e918 <gos_sysmonHandleSystimeSet+0x50>)
 800e8f8:	2228      	movs	r2, #40	; 0x28
 800e8fa:	701a      	strb	r2, [r3, #0]
 800e8fc:	e002      	b.n	800e904 <gos_sysmonHandleSystimeSet+0x3c>
        }
        else
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800e8fe:	4b06      	ldr	r3, [pc, #24]	; (800e918 <gos_sysmonHandleSystimeSet+0x50>)
 800e900:	2263      	movs	r2, #99	; 0x63
 800e902:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 800e904:	79fb      	ldrb	r3, [r7, #7]
 800e906:	3301      	adds	r3, #1
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7ff fcea 	bl	800e2e4 <gos_sysmonSendResponse>
}
 800e910:	bf00      	nop
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	2000b430 	.word	0x2000b430
 800e91c:	2000b424 	.word	0x2000b424

0800e920 <gos_sysmonHandleResetRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleResetRequest (gos_sysmonMessageEnum_t lutIndex)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	4603      	mov	r3, r0
 800e928:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (gos_sysmonCheckMessage(lutIndex) == GOS_SYSMON_MSG_RES_OK)
 800e92a:	79fb      	ldrb	r3, [r7, #7]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f000 f809 	bl	800e944 <gos_sysmonCheckMessage>
 800e932:	4603      	mov	r3, r0
 800e934:	2b28      	cmp	r3, #40	; 0x28
 800e936:	d101      	bne.n	800e93c <gos_sysmonHandleResetRequest+0x1c>
    {
        gos_kernelReset();
 800e938:	f7fa fdce 	bl	80094d8 <gos_kernelReset>
    }
    else
    {
        // Nothing to do.
    }
}
 800e93c:	bf00      	nop
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <gos_sysmonCheckMessage>:
 * @retval  GOS_SYSMON_MSG_RES_OK          : Message OK.
 * @retval  GOS_SYSMON_MSG_INV_PV          : Invalid protocol version.
 * @retval  GOS_SYSMON_MSG_INV_PAYLOAD_CRC : Payload CRC mismatch.
 */
GOS_STATIC gos_sysmonMessageResult_t gos_sysmonCheckMessage (gos_sysmonMessageEnum_t lutIndex)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	4603      	mov	r3, r0
 800e94c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_sysmonMessageResult_t result = GOS_SYSMON_MSG_RES_OK;
 800e94e:	2328      	movs	r3, #40	; 0x28
 800e950:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check if there is a payload to be copied.
    if (sysmonLut[lutIndex].pMessagePayload != NULL)
 800e952:	79fb      	ldrb	r3, [r7, #7]
 800e954:	4a0d      	ldr	r2, [pc, #52]	; (800e98c <gos_sysmonCheckMessage+0x48>)
 800e956:	011b      	lsls	r3, r3, #4
 800e958:	4413      	add	r3, r2
 800e95a:	3304      	adds	r3, #4
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00f      	beq.n	800e982 <gos_sysmonCheckMessage+0x3e>
    {
        (void_t) memcpy(sysmonLut[lutIndex].pMessagePayload, (void_t*)receiveBuffer, sysmonLut[lutIndex].payloadSize);
 800e962:	79fb      	ldrb	r3, [r7, #7]
 800e964:	4a09      	ldr	r2, [pc, #36]	; (800e98c <gos_sysmonCheckMessage+0x48>)
 800e966:	011b      	lsls	r3, r3, #4
 800e968:	4413      	add	r3, r2
 800e96a:	3304      	adds	r3, #4
 800e96c:	6818      	ldr	r0, [r3, #0]
 800e96e:	79fb      	ldrb	r3, [r7, #7]
 800e970:	4a06      	ldr	r2, [pc, #24]	; (800e98c <gos_sysmonCheckMessage+0x48>)
 800e972:	011b      	lsls	r3, r3, #4
 800e974:	4413      	add	r3, r2
 800e976:	3308      	adds	r3, #8
 800e978:	881b      	ldrh	r3, [r3, #0]
 800e97a:	461a      	mov	r2, r3
 800e97c:	4904      	ldr	r1, [pc, #16]	; (800e990 <gos_sysmonCheckMessage+0x4c>)
 800e97e:	f001 ff88 	bl	8010892 <memcpy>
    else
    {
        // Nothing to do.
    }

    return result;
 800e982:	7bfb      	ldrb	r3, [r7, #15]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3710      	adds	r7, #16
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	08014708 	.word	0x08014708
 800e990:	2000b2bc 	.word	0x2000b2bc

0800e994 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_SUCCESS;
 800e99a:	2355      	movs	r3, #85	; 0x55
 800e99c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                          != GOS_SUCCESS ||
 800e99e:	480a      	ldr	r0, [pc, #40]	; (800e9c8 <gos_timeInit+0x34>)
 800e9a0:	f7ff fa84 	bl	800deac <gos_signalCreate>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b55      	cmp	r3, #85	; 0x55
 800e9a8:	d106      	bne.n	800e9b8 <gos_timeInit+0x24>
        gos_taskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) != GOS_SUCCESS
 800e9aa:	4908      	ldr	r1, [pc, #32]	; (800e9cc <gos_timeInit+0x38>)
 800e9ac:	4808      	ldr	r0, [pc, #32]	; (800e9d0 <gos_timeInit+0x3c>)
 800e9ae:	f7fb fd93 	bl	800a4d8 <gos_taskRegister>
 800e9b2:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                          != GOS_SUCCESS ||
 800e9b4:	2b55      	cmp	r3, #85	; 0x55
 800e9b6:	d001      	beq.n	800e9bc <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_ERROR;
 800e9b8:	23ae      	movs	r3, #174	; 0xae
 800e9ba:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 800e9bc:	79fb      	ldrb	r3, [r7, #7]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	2000b4a0 	.word	0x2000b4a0
 800e9cc:	2000b49e 	.word	0x2000b49e
 800e9d0:	20001c3c 	.word	0x20001c3c

0800e9d4 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b085      	sub	sp, #20
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 800e9dc:	23ae      	movs	r3, #174	; 0xae
 800e9de:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00a      	beq.n	800e9fc <gos_timeGet+0x28>
    {
        (void_t) memcpy((void_t*)pTime, (GOS_CONST void_t*)&systemTime, sizeof(systemTime));
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	4908      	ldr	r1, [pc, #32]	; (800ea0c <gos_timeGet+0x38>)
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	cb03      	ldmia	r3!, {r0, r1}
 800e9f0:	6010      	str	r0, [r2, #0]
 800e9f2:	6051      	str	r1, [r2, #4]
 800e9f4:	881b      	ldrh	r3, [r3, #0]
 800e9f6:	8113      	strh	r3, [r2, #8]

        timeGetResult = GOS_SUCCESS;
 800e9f8:	2355      	movs	r3, #85	; 0x55
 800e9fa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 800e9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3714      	adds	r7, #20
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	20001c30 	.word	0x20001c30

0800ea10 <gos_timeSet>:

/*
 * Function: gos_timeSet
 */
gos_result_t gos_timeSet (gos_time_t* pTime)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b085      	sub	sp, #20
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeSetResult = GOS_ERROR;
 800ea18:	23ae      	movs	r3, #174	; 0xae
 800ea1a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d008      	beq.n	800ea34 <gos_timeSet+0x24>
    {
        (void_t) memcpy((void_t*)&systemTime, (GOS_CONST void_t*)pTime, sizeof(*pTime));
 800ea22:	4b08      	ldr	r3, [pc, #32]	; (800ea44 <gos_timeSet+0x34>)
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	6810      	ldr	r0, [r2, #0]
 800ea28:	6851      	ldr	r1, [r2, #4]
 800ea2a:	c303      	stmia	r3!, {r0, r1}
 800ea2c:	8912      	ldrh	r2, [r2, #8]
 800ea2e:	801a      	strh	r2, [r3, #0]

        timeSetResult = GOS_SUCCESS;
 800ea30:	2355      	movs	r3, #85	; 0x55
 800ea32:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeSetResult;
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop
 800ea44:	20001c30 	.word	0x20001c30

0800ea48 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b085      	sub	sp, #20
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 800ea50:	23ae      	movs	r3, #174	; 0xae
 800ea52:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00a      	beq.n	800ea70 <gos_runTimeGet+0x28>
    {
        (void_t) memcpy((void_t*)pRunTime, (void_t*)&systemRunTime, sizeof(systemRunTime));
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4908      	ldr	r1, [pc, #32]	; (800ea80 <gos_runTimeGet+0x38>)
 800ea5e:	461a      	mov	r2, r3
 800ea60:	460b      	mov	r3, r1
 800ea62:	cb03      	ldmia	r3!, {r0, r1}
 800ea64:	6010      	str	r0, [r2, #0]
 800ea66:	6051      	str	r1, [r2, #4]
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	7213      	strb	r3, [r2, #8]

        runtimeGetResult = GOS_SUCCESS;
 800ea6c:	2355      	movs	r3, #85	; 0x55
 800ea6e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 800ea70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3714      	adds	r7, #20
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	2000b494 	.word	0x2000b494

0800ea84 <gos_timeAddMilliseconds>:

/*
 * Function: gos_timeAddMilliseconds
 */
gos_result_t gos_timeAddMilliseconds (gos_time_t* pTime, u16_t milliseconds)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b085      	sub	sp, #20
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddMillisecondsResult = GOS_ERROR;
 800ea90:	23ae      	movs	r3, #174	; 0xae
 800ea92:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f000 80e5 	beq.w	800ec66 <gos_timeAddMilliseconds+0x1e2>
    {
        // 1. Raw increment.
        pTime->milliseconds += milliseconds;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	881b      	ldrh	r3, [r3, #0]
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	887b      	ldrh	r3, [r7, #2]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->milliseconds >= 1000u)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	881b      	ldrh	r3, [r3, #0]
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eab6:	f0c0 80d4 	bcc.w	800ec62 <gos_timeAddMilliseconds+0x1de>
        {
            pTime->seconds += pTime->milliseconds / 1000u;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	789a      	ldrb	r2, [r3, #2]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	881b      	ldrh	r3, [r3, #0]
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	496b      	ldr	r1, [pc, #428]	; (800ec74 <gos_timeAddMilliseconds+0x1f0>)
 800eac6:	fba1 1303 	umull	r1, r3, r1, r3
 800eaca:	099b      	lsrs	r3, r3, #6
 800eacc:	b29b      	uxth	r3, r3
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	4413      	add	r3, r2
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	709a      	strb	r2, [r3, #2]
            pTime->milliseconds %= 1000u;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	881b      	ldrh	r3, [r3, #0]
 800eadc:	b29b      	uxth	r3, r3
 800eade:	4a65      	ldr	r2, [pc, #404]	; (800ec74 <gos_timeAddMilliseconds+0x1f0>)
 800eae0:	fba2 1203 	umull	r1, r2, r2, r3
 800eae4:	0992      	lsrs	r2, r2, #6
 800eae6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eaea:	fb01 f202 	mul.w	r2, r1, r2
 800eaee:	1a9b      	subs	r3, r3, r2
 800eaf0:	b29a      	uxth	r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	801a      	strh	r2, [r3, #0]

            if (pTime->seconds >= 60u)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	789b      	ldrb	r3, [r3, #2]
 800eafa:	2b3b      	cmp	r3, #59	; 0x3b
 800eafc:	f240 80b1 	bls.w	800ec62 <gos_timeAddMilliseconds+0x1de>
            {
                pTime->minutes += pTime->seconds / 60u;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	78da      	ldrb	r2, [r3, #3]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	789b      	ldrb	r3, [r3, #2]
 800eb08:	495b      	ldr	r1, [pc, #364]	; (800ec78 <gos_timeAddMilliseconds+0x1f4>)
 800eb0a:	fba1 1303 	umull	r1, r3, r1, r3
 800eb0e:	095b      	lsrs	r3, r3, #5
 800eb10:	b2db      	uxtb	r3, r3
 800eb12:	4413      	add	r3, r2
 800eb14:	b2da      	uxtb	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	70da      	strb	r2, [r3, #3]
                pTime->seconds %= 60u;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	789a      	ldrb	r2, [r3, #2]
 800eb1e:	4b56      	ldr	r3, [pc, #344]	; (800ec78 <gos_timeAddMilliseconds+0x1f4>)
 800eb20:	fba3 1302 	umull	r1, r3, r3, r2
 800eb24:	0959      	lsrs	r1, r3, #5
 800eb26:	460b      	mov	r3, r1
 800eb28:	011b      	lsls	r3, r3, #4
 800eb2a:	1a5b      	subs	r3, r3, r1
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	1ad3      	subs	r3, r2, r3
 800eb30:	b2da      	uxtb	r2, r3
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	709a      	strb	r2, [r3, #2]

                if (pTime->minutes >= 60u)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	78db      	ldrb	r3, [r3, #3]
 800eb3a:	2b3b      	cmp	r3, #59	; 0x3b
 800eb3c:	f240 8091 	bls.w	800ec62 <gos_timeAddMilliseconds+0x1de>
                {
                    pTime->hours += pTime->minutes / 60u;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	791a      	ldrb	r2, [r3, #4]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	78db      	ldrb	r3, [r3, #3]
 800eb48:	494b      	ldr	r1, [pc, #300]	; (800ec78 <gos_timeAddMilliseconds+0x1f4>)
 800eb4a:	fba1 1303 	umull	r1, r3, r1, r3
 800eb4e:	095b      	lsrs	r3, r3, #5
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	4413      	add	r3, r2
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	711a      	strb	r2, [r3, #4]
                    pTime->minutes %= 60u;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	78da      	ldrb	r2, [r3, #3]
 800eb5e:	4b46      	ldr	r3, [pc, #280]	; (800ec78 <gos_timeAddMilliseconds+0x1f4>)
 800eb60:	fba3 1302 	umull	r1, r3, r3, r2
 800eb64:	0959      	lsrs	r1, r3, #5
 800eb66:	460b      	mov	r3, r1
 800eb68:	011b      	lsls	r3, r3, #4
 800eb6a:	1a5b      	subs	r3, r3, r1
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	1ad3      	subs	r3, r2, r3
 800eb70:	b2da      	uxtb	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	70da      	strb	r2, [r3, #3]

                    if (pTime->hours >= 24u)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	791b      	ldrb	r3, [r3, #4]
 800eb7a:	2b17      	cmp	r3, #23
 800eb7c:	d971      	bls.n	800ec62 <gos_timeAddMilliseconds+0x1de>
                    {
                        pTime->days += pTime->hours / 24u;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800eb84:	b29a      	uxth	r2, r3
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	791b      	ldrb	r3, [r3, #4]
 800eb8a:	493c      	ldr	r1, [pc, #240]	; (800ec7c <gos_timeAddMilliseconds+0x1f8>)
 800eb8c:	fba1 1303 	umull	r1, r3, r1, r3
 800eb90:	091b      	lsrs	r3, r3, #4
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	4413      	add	r3, r2
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8a3 2005 	strh.w	r2, [r3, #5]
                        pTime->hours %= 24u;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	791a      	ldrb	r2, [r3, #4]
 800eba4:	4b35      	ldr	r3, [pc, #212]	; (800ec7c <gos_timeAddMilliseconds+0x1f8>)
 800eba6:	fba3 1302 	umull	r1, r3, r3, r2
 800ebaa:	0919      	lsrs	r1, r3, #4
 800ebac:	460b      	mov	r3, r1
 800ebae:	005b      	lsls	r3, r3, #1
 800ebb0:	440b      	add	r3, r1
 800ebb2:	00db      	lsls	r3, r3, #3
 800ebb4:	1ad3      	subs	r3, r2, r3
 800ebb6:	b2da      	uxtb	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	711a      	strb	r2, [r3, #4]

                        // Check days.
                        if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	891b      	ldrh	r3, [r3, #8]
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	f003 0303 	and.w	r3, r3, #3
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d117      	bne.n	800ebfc <gos_timeAddMilliseconds+0x178>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	79db      	ldrb	r3, [r3, #7]
 800ebd0:	2b02      	cmp	r3, #2
 800ebd2:	d113      	bne.n	800ebfc <gos_timeAddMilliseconds+0x178>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	2b1d      	cmp	r3, #29
 800ebde:	d90d      	bls.n	800ebfc <gos_timeAddMilliseconds+0x178>
                        {
                            pTime->days = 1u;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f042 0201 	orr.w	r2, r2, #1
 800ebe8:	715a      	strb	r2, [r3, #5]
 800ebea:	2200      	movs	r2, #0
 800ebec:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	79db      	ldrb	r3, [r3, #7]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	b2da      	uxtb	r2, r3
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	71da      	strb	r2, [r3, #7]
 800ebfa:	e024      	b.n	800ec46 <gos_timeAddMilliseconds+0x1c2>
                        }
                        else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	891b      	ldrh	r3, [r3, #8]
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	f003 0303 	and.w	r3, r3, #3
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d103      	bne.n	800ec14 <gos_timeAddMilliseconds+0x190>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	79db      	ldrb	r3, [r3, #7]
 800ec10:	2b02      	cmp	r3, #2
 800ec12:	d018      	beq.n	800ec46 <gos_timeAddMilliseconds+0x1c2>
                        {
                            // Wait.
                        }
                        else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	79db      	ldrb	r3, [r3, #7]
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	4a19      	ldr	r2, [pc, #100]	; (800ec80 <gos_timeAddMilliseconds+0x1fc>)
 800ec1c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d20c      	bcs.n	800ec46 <gos_timeAddMilliseconds+0x1c2>
                        {
                            pTime->days = 1u;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f042 0201 	orr.w	r2, r2, #1
 800ec34:	715a      	strb	r2, [r3, #5]
 800ec36:	2200      	movs	r2, #0
 800ec38:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	79db      	ldrb	r3, [r3, #7]
 800ec3e:	3301      	adds	r3, #1
 800ec40:	b2da      	uxtb	r2, r3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	71da      	strb	r2, [r3, #7]
                        {
                            // Nothing to do.
                        }

                        // Check months.
                        if (pTime->months == 13)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	79db      	ldrb	r3, [r3, #7]
 800ec4a:	2b0d      	cmp	r3, #13
 800ec4c:	d109      	bne.n	800ec62 <gos_timeAddMilliseconds+0x1de>
                        {
                            pTime->months = 1;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2201      	movs	r2, #1
 800ec52:	71da      	strb	r2, [r3, #7]
                            pTime->years++;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	891b      	ldrh	r3, [r3, #8]
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	811a      	strh	r2, [r3, #8]
            {
                // Nothing to do.
            }
        }

        timeAddMillisecondsResult = GOS_SUCCESS;
 800ec62:	2355      	movs	r3, #85	; 0x55
 800ec64:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddMillisecondsResult;
 800ec66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3714      	adds	r7, #20
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr
 800ec74:	10624dd3 	.word	0x10624dd3
 800ec78:	88888889 	.word	0x88888889
 800ec7c:	aaaaaaab 	.word	0xaaaaaaab
 800ec80:	08014808 	.word	0x08014808

0800ec84 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b087      	sub	sp, #28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	4613      	mov	r3, r2
 800ec90:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 800ec92:	23ae      	movs	r3, #174	; 0xae
 800ec94:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d063      	beq.n	800ed64 <gos_runTimeAddMicroseconds+0xe0>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	881b      	ldrh	r3, [r3, #0]
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	88fb      	ldrh	r3, [r7, #6]
 800eca4:	4413      	add	r3, r2
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	881b      	ldrh	r3, [r3, #0]
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ecb6:	d355      	bcc.n	800ed64 <gos_runTimeAddMicroseconds+0xe0>
        {
            pRunTime1->microseconds -= 1000u;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	885b      	ldrh	r3, [r3, #2]
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	3301      	adds	r3, #1
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	885b      	ldrh	r3, [r3, #2]
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ece0:	d340      	bcc.n	800ed64 <gos_runTimeAddMicroseconds+0xe0>
            {
                pRunTime1->milliseconds -= 1000u;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	885b      	ldrh	r3, [r3, #2]
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	791b      	ldrb	r3, [r3, #4]
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	b2da      	uxtb	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	791b      	ldrb	r3, [r3, #4]
 800ed02:	2b3b      	cmp	r3, #59	; 0x3b
 800ed04:	d92e      	bls.n	800ed64 <gos_runTimeAddMicroseconds+0xe0>
                {
                    pRunTime1->seconds -= 60u;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	791b      	ldrb	r3, [r3, #4]
 800ed0a:	3b3c      	subs	r3, #60	; 0x3c
 800ed0c:	b2da      	uxtb	r2, r3
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	795b      	ldrb	r3, [r3, #5]
 800ed16:	3301      	adds	r3, #1
 800ed18:	b2da      	uxtb	r2, r3
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	795b      	ldrb	r3, [r3, #5]
 800ed22:	2b3b      	cmp	r3, #59	; 0x3b
 800ed24:	d91e      	bls.n	800ed64 <gos_runTimeAddMicroseconds+0xe0>
                    {
                        pRunTime1->minutes -= 60u;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	795b      	ldrb	r3, [r3, #5]
 800ed2a:	3b3c      	subs	r3, #60	; 0x3c
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	799b      	ldrb	r3, [r3, #6]
 800ed36:	3301      	adds	r3, #1
 800ed38:	b2da      	uxtb	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	799b      	ldrb	r3, [r3, #6]
 800ed42:	2b17      	cmp	r3, #23
 800ed44:	d90e      	bls.n	800ed64 <gos_runTimeAddMicroseconds+0xe0>
                        {
                            pRunTime1->hours -= 24u;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	799b      	ldrb	r3, [r3, #6]
 800ed4a:	3b18      	subs	r3, #24
 800ed4c:	b2da      	uxtb	r2, r3
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	b29a      	uxth	r2, r3
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d063      	beq.n	800ee32 <gos_runTimeAddMicroseconds+0x1ae>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	881b      	ldrh	r3, [r3, #0]
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	88fb      	ldrh	r3, [r7, #6]
 800ed72:	4413      	add	r3, r2
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed84:	d355      	bcc.n	800ee32 <gos_runTimeAddMicroseconds+0x1ae>
        {
            pRunTime2->microseconds -= 1000u;
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	881b      	ldrh	r3, [r3, #0]
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	885b      	ldrh	r3, [r3, #2]
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	b29a      	uxth	r2, r3
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	885b      	ldrh	r3, [r3, #2]
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800edae:	d340      	bcc.n	800ee32 <gos_runTimeAddMicroseconds+0x1ae>
            {
                pRunTime2->milliseconds -= 1000u;
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	885b      	ldrh	r3, [r3, #2]
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800edba:	b29a      	uxth	r2, r3
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	791b      	ldrb	r3, [r3, #4]
 800edc4:	3301      	adds	r3, #1
 800edc6:	b2da      	uxtb	r2, r3
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	791b      	ldrb	r3, [r3, #4]
 800edd0:	2b3b      	cmp	r3, #59	; 0x3b
 800edd2:	d92e      	bls.n	800ee32 <gos_runTimeAddMicroseconds+0x1ae>
                {
                    pRunTime2->seconds -= 60u;
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	791b      	ldrb	r3, [r3, #4]
 800edd8:	3b3c      	subs	r3, #60	; 0x3c
 800edda:	b2da      	uxtb	r2, r3
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	795b      	ldrb	r3, [r3, #5]
 800ede4:	3301      	adds	r3, #1
 800ede6:	b2da      	uxtb	r2, r3
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	795b      	ldrb	r3, [r3, #5]
 800edf0:	2b3b      	cmp	r3, #59	; 0x3b
 800edf2:	d91e      	bls.n	800ee32 <gos_runTimeAddMicroseconds+0x1ae>
                    {
                        pRunTime2->minutes -= 60u;
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	795b      	ldrb	r3, [r3, #5]
 800edf8:	3b3c      	subs	r3, #60	; 0x3c
 800edfa:	b2da      	uxtb	r2, r3
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	799b      	ldrb	r3, [r3, #6]
 800ee04:	3301      	adds	r3, #1
 800ee06:	b2da      	uxtb	r2, r3
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	799b      	ldrb	r3, [r3, #6]
 800ee10:	2b17      	cmp	r3, #23
 800ee12:	d90e      	bls.n	800ee32 <gos_runTimeAddMicroseconds+0x1ae>
                        {
                            pRunTime2->hours -= 24u;
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	799b      	ldrb	r3, [r3, #6]
 800ee18:	3b18      	subs	r3, #24
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	3301      	adds	r3, #1
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 800ee32:	2355      	movs	r3, #85	; 0x55
 800ee34:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 800ee36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	371c      	adds	r7, #28
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee42:	4770      	bx	lr

0800ee44 <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b085      	sub	sp, #20
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 800ee50:	23ae      	movs	r3, #174	; 0xae
 800ee52:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	f000 808f 	beq.w	800ef7a <gos_runTimeAddMilliseconds+0x136>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	885b      	ldrh	r3, [r3, #2]
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	887b      	ldrh	r3, [r7, #2]
 800ee64:	4413      	add	r3, r2
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	885b      	ldrh	r3, [r3, #2]
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ee76:	d37e      	bcc.n	800ef76 <gos_runTimeAddMilliseconds+0x132>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	791a      	ldrb	r2, [r3, #4]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	885b      	ldrh	r3, [r3, #2]
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	4941      	ldr	r1, [pc, #260]	; (800ef88 <gos_runTimeAddMilliseconds+0x144>)
 800ee84:	fba1 1303 	umull	r1, r3, r1, r3
 800ee88:	099b      	lsrs	r3, r3, #6
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	4413      	add	r3, r2
 800ee90:	b2da      	uxtb	r2, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	885b      	ldrh	r3, [r3, #2]
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	4a3a      	ldr	r2, [pc, #232]	; (800ef88 <gos_runTimeAddMilliseconds+0x144>)
 800ee9e:	fba2 1203 	umull	r1, r2, r2, r3
 800eea2:	0992      	lsrs	r2, r2, #6
 800eea4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800eea8:	fb01 f202 	mul.w	r2, r1, r2
 800eeac:	1a9b      	subs	r3, r3, r2
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	791b      	ldrb	r3, [r3, #4]
 800eeb8:	2b3b      	cmp	r3, #59	; 0x3b
 800eeba:	d95c      	bls.n	800ef76 <gos_runTimeAddMilliseconds+0x132>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	795a      	ldrb	r2, [r3, #5]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	791b      	ldrb	r3, [r3, #4]
 800eec4:	4931      	ldr	r1, [pc, #196]	; (800ef8c <gos_runTimeAddMilliseconds+0x148>)
 800eec6:	fba1 1303 	umull	r1, r3, r1, r3
 800eeca:	095b      	lsrs	r3, r3, #5
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	4413      	add	r3, r2
 800eed0:	b2da      	uxtb	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	791a      	ldrb	r2, [r3, #4]
 800eeda:	4b2c      	ldr	r3, [pc, #176]	; (800ef8c <gos_runTimeAddMilliseconds+0x148>)
 800eedc:	fba3 1302 	umull	r1, r3, r3, r2
 800eee0:	0959      	lsrs	r1, r3, #5
 800eee2:	460b      	mov	r3, r1
 800eee4:	011b      	lsls	r3, r3, #4
 800eee6:	1a5b      	subs	r3, r3, r1
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	1ad3      	subs	r3, r2, r3
 800eeec:	b2da      	uxtb	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	795b      	ldrb	r3, [r3, #5]
 800eef6:	2b3b      	cmp	r3, #59	; 0x3b
 800eef8:	d93d      	bls.n	800ef76 <gos_runTimeAddMilliseconds+0x132>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	799a      	ldrb	r2, [r3, #6]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	795b      	ldrb	r3, [r3, #5]
 800ef02:	4922      	ldr	r1, [pc, #136]	; (800ef8c <gos_runTimeAddMilliseconds+0x148>)
 800ef04:	fba1 1303 	umull	r1, r3, r1, r3
 800ef08:	095b      	lsrs	r3, r3, #5
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	4413      	add	r3, r2
 800ef0e:	b2da      	uxtb	r2, r3
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	795a      	ldrb	r2, [r3, #5]
 800ef18:	4b1c      	ldr	r3, [pc, #112]	; (800ef8c <gos_runTimeAddMilliseconds+0x148>)
 800ef1a:	fba3 1302 	umull	r1, r3, r3, r2
 800ef1e:	0959      	lsrs	r1, r3, #5
 800ef20:	460b      	mov	r3, r1
 800ef22:	011b      	lsls	r3, r3, #4
 800ef24:	1a5b      	subs	r3, r3, r1
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	1ad3      	subs	r3, r2, r3
 800ef2a:	b2da      	uxtb	r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	799b      	ldrb	r3, [r3, #6]
 800ef34:	2b17      	cmp	r3, #23
 800ef36:	d91e      	bls.n	800ef76 <gos_runTimeAddMilliseconds+0x132>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ef3e:	b29a      	uxth	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	799b      	ldrb	r3, [r3, #6]
 800ef44:	4912      	ldr	r1, [pc, #72]	; (800ef90 <gos_runTimeAddMilliseconds+0x14c>)
 800ef46:	fba1 1303 	umull	r1, r3, r1, r3
 800ef4a:	091b      	lsrs	r3, r3, #4
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	4413      	add	r3, r2
 800ef52:	b29a      	uxth	r2, r3
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8a3 2007 	strh.w	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	799a      	ldrb	r2, [r3, #6]
 800ef5e:	4b0c      	ldr	r3, [pc, #48]	; (800ef90 <gos_runTimeAddMilliseconds+0x14c>)
 800ef60:	fba3 1302 	umull	r1, r3, r3, r2
 800ef64:	0919      	lsrs	r1, r3, #4
 800ef66:	460b      	mov	r3, r1
 800ef68:	005b      	lsls	r3, r3, #1
 800ef6a:	440b      	add	r3, r1
 800ef6c:	00db      	lsls	r3, r3, #3
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	b2da      	uxtb	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 800ef76:	2355      	movs	r3, #85	; 0x55
 800ef78:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 800ef7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3714      	adds	r7, #20
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr
 800ef88:	10624dd3 	.word	0x10624dd3
 800ef8c:	88888889 	.word	0x88888889
 800ef90:	aaaaaaab 	.word	0xaaaaaaab

0800ef94 <gos_timeIncreaseSystemTime>:

/*
 * Function: gos_timeIncreaseSystemTime
 */
gos_result_t gos_timeIncreaseSystemTime (u16_t milliseconds)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t increaseSystemTimeResult = GOS_ERROR;
 800ef9e:	23ae      	movs	r3, #174	; 0xae
 800efa0:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 800efa2:	88fb      	ldrh	r3, [r7, #6]
 800efa4:	4619      	mov	r1, r3
 800efa6:	480a      	ldr	r0, [pc, #40]	; (800efd0 <gos_timeIncreaseSystemTime+0x3c>)
 800efa8:	f7ff ff4c 	bl	800ee44 <gos_runTimeAddMilliseconds>
 800efac:	4603      	mov	r3, r0
 800efae:	2b55      	cmp	r3, #85	; 0x55
 800efb0:	d109      	bne.n	800efc6 <gos_timeIncreaseSystemTime+0x32>
        gos_timeAddMilliseconds(&systemTime, milliseconds) == GOS_SUCCESS)
 800efb2:	88fb      	ldrh	r3, [r7, #6]
 800efb4:	4619      	mov	r1, r3
 800efb6:	4807      	ldr	r0, [pc, #28]	; (800efd4 <gos_timeIncreaseSystemTime+0x40>)
 800efb8:	f7ff fd64 	bl	800ea84 <gos_timeAddMilliseconds>
 800efbc:	4603      	mov	r3, r0
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 800efbe:	2b55      	cmp	r3, #85	; 0x55
 800efc0:	d101      	bne.n	800efc6 <gos_timeIncreaseSystemTime+0x32>
    {
        increaseSystemTimeResult = GOS_SUCCESS;
 800efc2:	2355      	movs	r3, #85	; 0x55
 800efc4:	73fb      	strb	r3, [r7, #15]
    else
    {
        // One of the operations failed.
    }

    return increaseSystemTimeResult;
 800efc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	2000b494 	.word	0x2000b494
 800efd4:	20001c30 	.word	0x20001c30

0800efd8 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 800efde:	1d3b      	adds	r3, r7, #4
 800efe0:	2200      	movs	r2, #0
 800efe2:	601a      	str	r2, [r3, #0]
 800efe4:	605a      	str	r2, [r3, #4]
 800efe6:	811a      	strh	r2, [r3, #8]
     * Function code.
     */
    for (;;)
    {
        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 800efe8:	4b27      	ldr	r3, [pc, #156]	; (800f088 <gos_timeDaemonTask+0xb0>)
 800efea:	789a      	ldrb	r2, [r3, #2]
 800efec:	79bb      	ldrb	r3, [r7, #6]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d905      	bls.n	800effe <gos_timeDaemonTask+0x26>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 800eff2:	4b26      	ldr	r3, [pc, #152]	; (800f08c <gos_timeDaemonTask+0xb4>)
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	2100      	movs	r1, #0
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fe ff95 	bl	800df28 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 800effe:	4b22      	ldr	r3, [pc, #136]	; (800f088 <gos_timeDaemonTask+0xb0>)
 800f000:	78da      	ldrb	r2, [r3, #3]
 800f002:	79fb      	ldrb	r3, [r7, #7]
 800f004:	429a      	cmp	r2, r3
 800f006:	d905      	bls.n	800f014 <gos_timeDaemonTask+0x3c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 800f008:	4b20      	ldr	r3, [pc, #128]	; (800f08c <gos_timeDaemonTask+0xb4>)
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	2101      	movs	r1, #1
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fe ff8a 	bl	800df28 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 800f014:	4b1c      	ldr	r3, [pc, #112]	; (800f088 <gos_timeDaemonTask+0xb0>)
 800f016:	791a      	ldrb	r2, [r3, #4]
 800f018:	7a3b      	ldrb	r3, [r7, #8]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d905      	bls.n	800f02a <gos_timeDaemonTask+0x52>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 800f01e:	4b1b      	ldr	r3, [pc, #108]	; (800f08c <gos_timeDaemonTask+0xb4>)
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	2102      	movs	r1, #2
 800f024:	4618      	mov	r0, r3
 800f026:	f7fe ff7f 	bl	800df28 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 800f02a:	4b17      	ldr	r3, [pc, #92]	; (800f088 <gos_timeDaemonTask+0xb0>)
 800f02c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f030:	b29a      	uxth	r2, r3
 800f032:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 800f036:	b29b      	uxth	r3, r3
 800f038:	429a      	cmp	r2, r3
 800f03a:	d905      	bls.n	800f048 <gos_timeDaemonTask+0x70>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 800f03c:	4b13      	ldr	r3, [pc, #76]	; (800f08c <gos_timeDaemonTask+0xb4>)
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	2103      	movs	r1, #3
 800f042:	4618      	mov	r0, r3
 800f044:	f7fe ff70 	bl	800df28 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 800f048:	4b0f      	ldr	r3, [pc, #60]	; (800f088 <gos_timeDaemonTask+0xb0>)
 800f04a:	79da      	ldrb	r2, [r3, #7]
 800f04c:	7afb      	ldrb	r3, [r7, #11]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d905      	bls.n	800f05e <gos_timeDaemonTask+0x86>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 800f052:	4b0e      	ldr	r3, [pc, #56]	; (800f08c <gos_timeDaemonTask+0xb4>)
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	2104      	movs	r1, #4
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fe ff65 	bl	800df28 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 800f05e:	4b0a      	ldr	r3, [pc, #40]	; (800f088 <gos_timeDaemonTask+0xb0>)
 800f060:	891a      	ldrh	r2, [r3, #8]
 800f062:	89bb      	ldrh	r3, [r7, #12]
 800f064:	429a      	cmp	r2, r3
 800f066:	d905      	bls.n	800f074 <gos_timeDaemonTask+0x9c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 800f068:	4b08      	ldr	r3, [pc, #32]	; (800f08c <gos_timeDaemonTask+0xb4>)
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	2105      	movs	r1, #5
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fe ff5a 	bl	800df28 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 800f074:	1d3b      	adds	r3, r7, #4
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff fcac 	bl	800e9d4 <gos_timeGet>
        (void_t) gos_taskSleep(TIME_SLEEP_TIME_MS);
 800f07c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f080:	f7fb fbbc 	bl	800a7fc <gos_taskSleep>
        if (systemTime.seconds > previousTime.seconds)
 800f084:	e7b0      	b.n	800efe8 <gos_timeDaemonTask+0x10>
 800f086:	bf00      	nop
 800f088:	20001c30 	.word	0x20001c30
 800f08c:	2000b4a0 	.word	0x2000b4a0

0800f090 <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_SUCCESS;
 800f096:	2355      	movs	r3, #85	; 0x55
 800f098:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 800f09a:	480d      	ldr	r0, [pc, #52]	; (800f0d0 <gos_traceInit+0x40>)
 800f09c:	f7fe f830 	bl	800d100 <gos_queueCreate>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2b55      	cmp	r3, #85	; 0x55
 800f0a4:	d10c      	bne.n	800f0c0 <gos_traceInit+0x30>
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 800f0a6:	2100      	movs	r1, #0
 800f0a8:	480a      	ldr	r0, [pc, #40]	; (800f0d4 <gos_traceInit+0x44>)
 800f0aa:	f7fb fa15 	bl	800a4d8 <gos_taskRegister>
 800f0ae:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 800f0b0:	2b55      	cmp	r3, #85	; 0x55
 800f0b2:	d105      	bne.n	800f0c0 <gos_traceInit+0x30>
        gos_mutexInit(&traceMutex) != GOS_SUCCESS
 800f0b4:	4808      	ldr	r0, [pc, #32]	; (800f0d8 <gos_traceInit+0x48>)
 800f0b6:	f7fd fe45 	bl	800cd44 <gos_mutexInit>
 800f0ba:	4603      	mov	r3, r0
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 800f0bc:	2b55      	cmp	r3, #85	; 0x55
 800f0be:	d001      	beq.n	800f0c4 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_ERROR;
 800f0c0:	23ae      	movs	r3, #174	; 0xae
 800f0c2:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 800f0c4:	79fb      	ldrb	r3, [r7, #7]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	20001ca8 	.word	0x20001ca8
 800f0d4:	20001cc4 	.word	0x20001cc4
 800f0d8:	2000b660 	.word	0x2000b660

0800f0dc <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 800f0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0de:	b0a9      	sub	sp, #164	; 0xa4
 800f0e0:	af06      	add	r7, sp, #24
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	6039      	str	r1, [r7, #0]
 800f0e6:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_ERROR;
 800f0e8:	23ae      	movs	r3, #174	; 0xae
 800f0ea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 800f0ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    gos_taskDescriptor_t     callerTaskDesc = {0};
 800f0f6:	f107 0318 	add.w	r3, r7, #24
 800f0fa:	226a      	movs	r2, #106	; 0x6a
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	4618      	mov	r0, r3
 800f100:	f001 fb40 	bl	8010784 <memset>
    gos_time_t               sysTime        = {0};
 800f104:	f107 030c 	add.w	r3, r7, #12
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
 800f10c:	605a      	str	r2, [r3, #4]
 800f10e:	811a      	strh	r2, [r3, #8]
    gos_taskPrivilegeLevel_t privileges     = 0u;
 800f110:	2300      	movs	r3, #0
 800f112:	817b      	strh	r3, [r7, #10]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	f000 80e6 	beq.w	800f2e8 <gos_traceTrace+0x20c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800f11c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f120:	4618      	mov	r0, r3
 800f122:	f7fc fdab 	bl	800bc7c <gos_taskGetCurrentId>
 800f126:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 800f128:	2b55      	cmp	r3, #85	; 0x55
 800f12a:	f040 80dd 	bne.w	800f2e8 <gos_traceTrace+0x20c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800f12e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f132:	f107 0218 	add.w	r2, r7, #24
 800f136:	4611      	mov	r1, r2
 800f138:	4618      	mov	r0, r3
 800f13a:	f7fc fdfb 	bl	800bd34 <gos_taskGetData>
 800f13e:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800f140:	2b55      	cmp	r3, #85	; 0x55
 800f142:	f040 80d1 	bne.w	800f2e8 <gos_traceTrace+0x20c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800f146:	8c3b      	ldrh	r3, [r7, #32]
 800f148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d105      	bne.n	800f15c <gos_traceTrace+0x80>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800f150:	f7fa fea2 	bl	8009e98 <gos_kernelIsCallerIsr>
 800f154:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800f156:	2b36      	cmp	r3, #54	; 0x36
 800f158:	f040 80c6 	bne.w	800f2e8 <gos_traceTrace+0x20c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 800f15c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f160:	4864      	ldr	r0, [pc, #400]	; (800f2f4 <gos_traceTrace+0x218>)
 800f162:	f7fd fe09 	bl	800cd78 <gos_mutexLock>
 800f166:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800f168:	2b55      	cmp	r3, #85	; 0x55
 800f16a:	f040 80bd 	bne.w	800f2e8 <gos_traceTrace+0x20c>
        )
    {
        // Pre-set result.
        traceResult = GOS_SUCCESS;
 800f16e:	2355      	movs	r3, #85	; 0x55
 800f170:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        if (addTimeStamp == GOS_TRUE)
 800f174:	79fb      	ldrb	r3, [r7, #7]
 800f176:	2b36      	cmp	r3, #54	; 0x36
 800f178:	d137      	bne.n	800f1ea <gos_traceTrace+0x10e>
        {
            traceResult &= gos_timeGet(&sysTime);
 800f17a:	f107 030c 	add.w	r3, r7, #12
 800f17e:	4618      	mov	r0, r3
 800f180:	f7ff fc28 	bl	800e9d4 <gos_timeGet>
 800f184:	4603      	mov	r3, r0
 800f186:	461a      	mov	r2, r3
 800f188:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f18c:	4013      	ands	r3, r2
 800f18e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 800f192:	8abb      	ldrh	r3, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800f194:	461d      	mov	r5, r3
                    sysTime.months,
 800f196:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800f198:	461e      	mov	r6, r3
                    sysTime.days,
 800f19a:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800f19e:	b29b      	uxth	r3, r3
                    sysTime.hours,
 800f1a0:	7c3a      	ldrb	r2, [r7, #16]
                    sysTime.minutes,
 800f1a2:	7bf9      	ldrb	r1, [r7, #15]
                    sysTime.seconds,
 800f1a4:	7bb8      	ldrb	r0, [r7, #14]
                    sysTime.milliseconds
 800f1a6:	89bc      	ldrh	r4, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800f1a8:	9404      	str	r4, [sp, #16]
 800f1aa:	9003      	str	r0, [sp, #12]
 800f1ac:	9102      	str	r1, [sp, #8]
 800f1ae:	9201      	str	r2, [sp, #4]
 800f1b0:	9300      	str	r3, [sp, #0]
 800f1b2:	4633      	mov	r3, r6
 800f1b4:	462a      	mov	r2, r5
 800f1b6:	4950      	ldr	r1, [pc, #320]	; (800f2f8 <gos_traceTrace+0x21c>)
 800f1b8:	4850      	ldr	r0, [pc, #320]	; (800f2fc <gos_traceTrace+0x220>)
 800f1ba:	f001 fa5f 	bl	801067c <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 800f1be:	4b50      	ldr	r3, [pc, #320]	; (800f300 <gos_traceTrace+0x224>)
 800f1c0:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 800f1c2:	484e      	ldr	r0, [pc, #312]	; (800f2fc <gos_traceTrace+0x220>)
 800f1c4:	f7f1 f884 	bl	80002d0 <strlen>
 800f1c8:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f1d4:	4949      	ldr	r1, [pc, #292]	; (800f2fc <gos_traceTrace+0x220>)
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f7fd ffee 	bl	800d1b8 <gos_queuePut>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	461a      	mov	r2, r3
 800f1e0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f1e4:	4013      	ands	r3, r2
 800f1e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        traceResult &= gos_queuePut(
 800f1ea:	4b45      	ldr	r3, [pc, #276]	; (800f300 <gos_traceTrace+0x224>)
 800f1ec:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
 800f1ee:	6838      	ldr	r0, [r7, #0]
 800f1f0:	f7f1 f86e 	bl	80002d0 <strlen>
 800f1f4:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	b2da      	uxtb	r2, r3
 800f1fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f200:	6839      	ldr	r1, [r7, #0]
 800f202:	4620      	mov	r0, r4
 800f204:	f7fd ffd8 	bl	800d1b8 <gos_queuePut>
 800f208:	4603      	mov	r3, r0
 800f20a:	461a      	mov	r2, r3
 800f20c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f210:	4013      	ands	r3, r2
 800f212:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 800f216:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f21a:	2b55      	cmp	r3, #85	; 0x55
 800f21c:	d002      	beq.n	800f224 <gos_traceTrace+0x148>
        {
            traceResult = GOS_ERROR;
 800f21e:	23ae      	movs	r3, #174	; 0xae
 800f220:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 800f224:	4b37      	ldr	r3, [pc, #220]	; (800f304 <gos_traceTrace+0x228>)
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d108      	bne.n	800f23e <gos_traceTrace+0x162>
 800f22c:	b672      	cpsid	i
 800f22e:	f3ef 8310 	mrs	r3, PRIMASK
 800f232:	4a35      	ldr	r2, [pc, #212]	; (800f308 <gos_traceTrace+0x22c>)
 800f234:	6013      	str	r3, [r2, #0]
 800f236:	f3bf 8f4f 	dsb	sy
 800f23a:	f3bf 8f6f 	isb	sy
 800f23e:	4b31      	ldr	r3, [pc, #196]	; (800f304 <gos_traceTrace+0x228>)
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	3301      	adds	r3, #1
 800f244:	b2da      	uxtb	r2, r3
 800f246:	4b2f      	ldr	r3, [pc, #188]	; (800f304 <gos_traceTrace+0x228>)
 800f248:	701a      	strb	r2, [r3, #0]
 800f24a:	4b30      	ldr	r3, [pc, #192]	; (800f30c <gos_traceTrace+0x230>)
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	3301      	adds	r3, #1
 800f250:	b2da      	uxtb	r2, r3
 800f252:	4b2e      	ldr	r3, [pc, #184]	; (800f30c <gos_traceTrace+0x230>)
 800f254:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 800f256:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f25a:	f107 020a 	add.w	r2, r7, #10
 800f25e:	4611      	mov	r1, r2
 800f260:	4618      	mov	r0, r3
 800f262:	f7fc fc63 	bl	800bb2c <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 800f266:	897b      	ldrh	r3, [r7, #10]
 800f268:	b21b      	sxth	r3, r3
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	db13      	blt.n	800f296 <gos_traceTrace+0x1ba>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800f26e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f276:	4618      	mov	r0, r3
 800f278:	f7fc faf4 	bl	800b864 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800f27c:	4b24      	ldr	r3, [pc, #144]	; (800f310 <gos_traceTrace+0x234>)
 800f27e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f280:	4618      	mov	r0, r3
 800f282:	f7fb fd29 	bl	800acd8 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800f286:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f28a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f28e:	4618      	mov	r0, r3
 800f290:	f7fc fb60 	bl	800b954 <gos_taskRemovePrivilege>
 800f294:	e004      	b.n	800f2a0 <gos_traceTrace+0x1c4>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800f296:	4b1e      	ldr	r3, [pc, #120]	; (800f310 <gos_traceTrace+0x234>)
 800f298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fb fd1c 	bl	800acd8 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 800f2a0:	4b18      	ldr	r3, [pc, #96]	; (800f304 <gos_traceTrace+0x228>)
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d005      	beq.n	800f2b4 <gos_traceTrace+0x1d8>
 800f2a8:	4b16      	ldr	r3, [pc, #88]	; (800f304 <gos_traceTrace+0x228>)
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	b2da      	uxtb	r2, r3
 800f2b0:	4b14      	ldr	r3, [pc, #80]	; (800f304 <gos_traceTrace+0x228>)
 800f2b2:	701a      	strb	r2, [r3, #0]
 800f2b4:	4b13      	ldr	r3, [pc, #76]	; (800f304 <gos_traceTrace+0x228>)
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d108      	bne.n	800f2ce <gos_traceTrace+0x1f2>
 800f2bc:	4b12      	ldr	r3, [pc, #72]	; (800f308 <gos_traceTrace+0x22c>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f383 8810 	msr	PRIMASK, r3
 800f2c4:	b662      	cpsie	i
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	4b0f      	ldr	r3, [pc, #60]	; (800f30c <gos_traceTrace+0x230>)
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d005      	beq.n	800f2e2 <gos_traceTrace+0x206>
 800f2d6:	4b0d      	ldr	r3, [pc, #52]	; (800f30c <gos_traceTrace+0x230>)
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	3b01      	subs	r3, #1
 800f2dc:	b2da      	uxtb	r2, r3
 800f2de:	4b0b      	ldr	r3, [pc, #44]	; (800f30c <gos_traceTrace+0x230>)
 800f2e0:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 800f2e2:	4804      	ldr	r0, [pc, #16]	; (800f2f4 <gos_traceTrace+0x218>)
 800f2e4:	f7fd fe4e 	bl	800cf84 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 800f2e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	378c      	adds	r7, #140	; 0x8c
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2f4:	2000b660 	.word	0x2000b660
 800f2f8:	08014288 	.word	0x08014288
 800f2fc:	2000b634 	.word	0x2000b634
 800f300:	20001ca8 	.word	0x20001ca8
 800f304:	20002bb3 	.word	0x20002bb3
 800f308:	20002bb4 	.word	0x20002bb4
 800f30c:	20002bb1 	.word	0x20002bb1
 800f310:	20001cc4 	.word	0x20001cc4

0800f314 <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 800f314:	b40e      	push	{r1, r2, r3}
 800f316:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f318:	b0aa      	sub	sp, #168	; 0xa8
 800f31a:	af06      	add	r7, sp, #24
 800f31c:	4603      	mov	r3, r0
 800f31e:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 800f320:	2355      	movs	r3, #85	; 0x55
 800f322:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 800f326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f32a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 800f32e:	f107 0320 	add.w	r3, r7, #32
 800f332:	226a      	movs	r2, #106	; 0x6a
 800f334:	2100      	movs	r1, #0
 800f336:	4618      	mov	r0, r3
 800f338:	f001 fa24 	bl	8010784 <memset>
    gos_time_t               sysTime        = {0};
 800f33c:	f107 0314 	add.w	r3, r7, #20
 800f340:	2200      	movs	r2, #0
 800f342:	601a      	str	r2, [r3, #0]
 800f344:	605a      	str	r2, [r3, #4]
 800f346:	811a      	strh	r2, [r3, #8]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 800f348:	2300      	movs	r3, #0
 800f34a:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 800f34c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f350:	2b00      	cmp	r3, #0
 800f352:	f000 80ed 	beq.w	800f530 <gos_traceTraceFormatted+0x21c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800f356:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7fc fc8e 	bl	800bc7c <gos_taskGetCurrentId>
 800f360:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 800f362:	2b55      	cmp	r3, #85	; 0x55
 800f364:	f040 80e4 	bne.w	800f530 <gos_traceTraceFormatted+0x21c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800f368:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800f36c:	f107 0220 	add.w	r2, r7, #32
 800f370:	4611      	mov	r1, r2
 800f372:	4618      	mov	r0, r3
 800f374:	f7fc fcde 	bl	800bd34 <gos_taskGetData>
 800f378:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800f37a:	2b55      	cmp	r3, #85	; 0x55
 800f37c:	f040 80d8 	bne.w	800f530 <gos_traceTraceFormatted+0x21c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800f380:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800f386:	2b00      	cmp	r3, #0
 800f388:	d105      	bne.n	800f396 <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800f38a:	f7fa fd85 	bl	8009e98 <gos_kernelIsCallerIsr>
 800f38e:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800f390:	2b36      	cmp	r3, #54	; 0x36
 800f392:	f040 80cd 	bne.w	800f530 <gos_traceTraceFormatted+0x21c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 800f396:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f39a:	486b      	ldr	r0, [pc, #428]	; (800f548 <gos_traceTraceFormatted+0x234>)
 800f39c:	f7fd fcec 	bl	800cd78 <gos_mutexLock>
 800f3a0:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800f3a2:	2b55      	cmp	r3, #85	; 0x55
 800f3a4:	f040 80c4 	bne.w	800f530 <gos_traceTraceFormatted+0x21c>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 800f3a8:	79fb      	ldrb	r3, [r7, #7]
 800f3aa:	2b36      	cmp	r3, #54	; 0x36
 800f3ac:	d137      	bne.n	800f41e <gos_traceTraceFormatted+0x10a>
        {
            traceResult &= gos_timeGet(&sysTime);
 800f3ae:	f107 0314 	add.w	r3, r7, #20
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7ff fb0e 	bl	800e9d4 <gos_timeGet>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f3c0:	4013      	ands	r3, r2
 800f3c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 800f3c6:	8bbb      	ldrh	r3, [r7, #28]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800f3c8:	461d      	mov	r5, r3
                    sysTime.months,
 800f3ca:	7efb      	ldrb	r3, [r7, #27]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800f3cc:	461e      	mov	r6, r3
                    sysTime.days,
 800f3ce:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800f3d2:	b29b      	uxth	r3, r3
                    sysTime.hours,
 800f3d4:	7e3a      	ldrb	r2, [r7, #24]
                    sysTime.minutes,
 800f3d6:	7df9      	ldrb	r1, [r7, #23]
                    sysTime.seconds,
 800f3d8:	7db8      	ldrb	r0, [r7, #22]
                    sysTime.milliseconds
 800f3da:	8abc      	ldrh	r4, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800f3dc:	9404      	str	r4, [sp, #16]
 800f3de:	9003      	str	r0, [sp, #12]
 800f3e0:	9102      	str	r1, [sp, #8]
 800f3e2:	9201      	str	r2, [sp, #4]
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	4633      	mov	r3, r6
 800f3e8:	462a      	mov	r2, r5
 800f3ea:	4958      	ldr	r1, [pc, #352]	; (800f54c <gos_traceTraceFormatted+0x238>)
 800f3ec:	4858      	ldr	r0, [pc, #352]	; (800f550 <gos_traceTraceFormatted+0x23c>)
 800f3ee:	f001 f945 	bl	801067c <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 800f3f2:	4b58      	ldr	r3, [pc, #352]	; (800f554 <gos_traceTraceFormatted+0x240>)
 800f3f4:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 800f3f6:	4856      	ldr	r0, [pc, #344]	; (800f550 <gos_traceTraceFormatted+0x23c>)
 800f3f8:	f7f0 ff6a 	bl	80002d0 <strlen>
 800f3fc:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	3301      	adds	r3, #1
 800f402:	b2da      	uxtb	r2, r3
 800f404:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f408:	4951      	ldr	r1, [pc, #324]	; (800f550 <gos_traceTraceFormatted+0x23c>)
 800f40a:	4620      	mov	r0, r4
 800f40c:	f7fd fed4 	bl	800d1b8 <gos_queuePut>
 800f410:	4603      	mov	r3, r0
 800f412:	461a      	mov	r2, r3
 800f414:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f418:	4013      	ands	r3, r2
 800f41a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 800f41e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800f422:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 800f424:	693a      	ldr	r2, [r7, #16]
 800f426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f42a:	484b      	ldr	r0, [pc, #300]	; (800f558 <gos_traceTraceFormatted+0x244>)
 800f42c:	f001 f9a0 	bl	8010770 <vsiprintf>
        va_end(args);
        traceResult &= gos_queuePut(
 800f430:	4b48      	ldr	r3, [pc, #288]	; (800f554 <gos_traceTraceFormatted+0x240>)
 800f432:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
 800f434:	4848      	ldr	r0, [pc, #288]	; (800f558 <gos_traceTraceFormatted+0x244>)
 800f436:	f7f0 ff4b 	bl	80002d0 <strlen>
 800f43a:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	3301      	adds	r3, #1
 800f440:	b2da      	uxtb	r2, r3
 800f442:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f446:	4944      	ldr	r1, [pc, #272]	; (800f558 <gos_traceTraceFormatted+0x244>)
 800f448:	4620      	mov	r0, r4
 800f44a:	f7fd feb5 	bl	800d1b8 <gos_queuePut>
 800f44e:	4603      	mov	r3, r0
 800f450:	461a      	mov	r2, r3
 800f452:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f456:	4013      	ands	r3, r2
 800f458:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 800f45c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f460:	2b55      	cmp	r3, #85	; 0x55
 800f462:	d002      	beq.n	800f46a <gos_traceTraceFormatted+0x156>
        {
            traceResult = GOS_ERROR;
 800f464:	23ae      	movs	r3, #174	; 0xae
 800f466:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 800f46a:	4b3c      	ldr	r3, [pc, #240]	; (800f55c <gos_traceTraceFormatted+0x248>)
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d108      	bne.n	800f484 <gos_traceTraceFormatted+0x170>
 800f472:	b672      	cpsid	i
 800f474:	f3ef 8310 	mrs	r3, PRIMASK
 800f478:	4a39      	ldr	r2, [pc, #228]	; (800f560 <gos_traceTraceFormatted+0x24c>)
 800f47a:	6013      	str	r3, [r2, #0]
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	f3bf 8f6f 	isb	sy
 800f484:	4b35      	ldr	r3, [pc, #212]	; (800f55c <gos_traceTraceFormatted+0x248>)
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	3301      	adds	r3, #1
 800f48a:	b2da      	uxtb	r2, r3
 800f48c:	4b33      	ldr	r3, [pc, #204]	; (800f55c <gos_traceTraceFormatted+0x248>)
 800f48e:	701a      	strb	r2, [r3, #0]
 800f490:	4b34      	ldr	r3, [pc, #208]	; (800f564 <gos_traceTraceFormatted+0x250>)
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	3301      	adds	r3, #1
 800f496:	b2da      	uxtb	r2, r3
 800f498:	4b32      	ldr	r3, [pc, #200]	; (800f564 <gos_traceTraceFormatted+0x250>)
 800f49a:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 800f49c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800f4a0:	f107 020e 	add.w	r2, r7, #14
 800f4a4:	4611      	mov	r1, r2
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fc fb40 	bl	800bb2c <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 800f4ac:	89fb      	ldrh	r3, [r7, #14]
 800f4ae:	b21b      	sxth	r3, r3
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	db13      	blt.n	800f4dc <gos_traceTraceFormatted+0x1c8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800f4b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800f4b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7fc f9d1 	bl	800b864 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800f4c2:	4b29      	ldr	r3, [pc, #164]	; (800f568 <gos_traceTraceFormatted+0x254>)
 800f4c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fb fc06 	bl	800acd8 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800f4cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800f4d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fc fa3d 	bl	800b954 <gos_taskRemovePrivilege>
 800f4da:	e004      	b.n	800f4e6 <gos_traceTraceFormatted+0x1d2>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800f4dc:	4b22      	ldr	r3, [pc, #136]	; (800f568 <gos_traceTraceFormatted+0x254>)
 800f4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fb fbf9 	bl	800acd8 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 800f4e6:	4b1d      	ldr	r3, [pc, #116]	; (800f55c <gos_traceTraceFormatted+0x248>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d005      	beq.n	800f4fa <gos_traceTraceFormatted+0x1e6>
 800f4ee:	4b1b      	ldr	r3, [pc, #108]	; (800f55c <gos_traceTraceFormatted+0x248>)
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	b2da      	uxtb	r2, r3
 800f4f6:	4b19      	ldr	r3, [pc, #100]	; (800f55c <gos_traceTraceFormatted+0x248>)
 800f4f8:	701a      	strb	r2, [r3, #0]
 800f4fa:	4b18      	ldr	r3, [pc, #96]	; (800f55c <gos_traceTraceFormatted+0x248>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d108      	bne.n	800f514 <gos_traceTraceFormatted+0x200>
 800f502:	4b17      	ldr	r3, [pc, #92]	; (800f560 <gos_traceTraceFormatted+0x24c>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f383 8810 	msr	PRIMASK, r3
 800f50a:	b662      	cpsie	i
 800f50c:	f3bf 8f4f 	dsb	sy
 800f510:	f3bf 8f6f 	isb	sy
 800f514:	4b13      	ldr	r3, [pc, #76]	; (800f564 <gos_traceTraceFormatted+0x250>)
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d005      	beq.n	800f528 <gos_traceTraceFormatted+0x214>
 800f51c:	4b11      	ldr	r3, [pc, #68]	; (800f564 <gos_traceTraceFormatted+0x250>)
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	3b01      	subs	r3, #1
 800f522:	b2da      	uxtb	r2, r3
 800f524:	4b0f      	ldr	r3, [pc, #60]	; (800f564 <gos_traceTraceFormatted+0x250>)
 800f526:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 800f528:	4807      	ldr	r0, [pc, #28]	; (800f548 <gos_traceTraceFormatted+0x234>)
 800f52a:	f7fd fd2b 	bl	800cf84 <gos_mutexUnlock>
 800f52e:	e002      	b.n	800f536 <gos_traceTraceFormatted+0x222>
    }
    else
    {
        traceResult = GOS_ERROR;
 800f530:	23ae      	movs	r3, #174	; 0xae
 800f532:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return traceResult;
 800f536:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3790      	adds	r7, #144	; 0x90
 800f53e:	46bd      	mov	sp, r7
 800f540:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f544:	b003      	add	sp, #12
 800f546:	4770      	bx	lr
 800f548:	2000b660 	.word	0x2000b660
 800f54c:	08014288 	.word	0x08014288
 800f550:	2000b634 	.word	0x2000b634
 800f554:	20001ca8 	.word	0x20001ca8
 800f558:	2000b56c 	.word	0x2000b56c
 800f55c:	20002bb3 	.word	0x20002bb3
 800f560:	20002bb4 	.word	0x20002bb4
 800f564:	20002bb1 	.word	0x20002bb1
 800f568:	20001cc4 	.word	0x20001cc4

0800f56c <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 800f56c:	b40f      	push	{r0, r1, r2, r3}
 800f56e:	b580      	push	{r7, lr}
 800f570:	b082      	sub	sp, #8
 800f572:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 800f574:	23ae      	movs	r3, #174	; 0xae
 800f576:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d01c      	beq.n	800f5b8 <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 800f57e:	4b12      	ldr	r3, [pc, #72]	; (800f5c8 <gos_traceTraceFormattedUnsafe+0x5c>)
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	3301      	adds	r3, #1
 800f584:	b2da      	uxtb	r2, r3
 800f586:	4b10      	ldr	r3, [pc, #64]	; (800f5c8 <gos_traceTraceFormattedUnsafe+0x5c>)
 800f588:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 800f58a:	f107 0314 	add.w	r3, r7, #20
 800f58e:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 800f590:	683a      	ldr	r2, [r7, #0]
 800f592:	6939      	ldr	r1, [r7, #16]
 800f594:	480d      	ldr	r0, [pc, #52]	; (800f5cc <gos_traceTraceFormattedUnsafe+0x60>)
 800f596:	f001 f8eb 	bl	8010770 <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 800f59a:	480c      	ldr	r0, [pc, #48]	; (800f5cc <gos_traceTraceFormattedUnsafe+0x60>)
 800f59c:	f7f9 fde4 	bl	8009168 <gos_traceDriverTransmitString_Unsafe>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 800f5a4:	4b08      	ldr	r3, [pc, #32]	; (800f5c8 <gos_traceTraceFormattedUnsafe+0x5c>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d005      	beq.n	800f5b8 <gos_traceTraceFormattedUnsafe+0x4c>
 800f5ac:	4b06      	ldr	r3, [pc, #24]	; (800f5c8 <gos_traceTraceFormattedUnsafe+0x5c>)
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	b2da      	uxtb	r2, r3
 800f5b4:	4b04      	ldr	r3, [pc, #16]	; (800f5c8 <gos_traceTraceFormattedUnsafe+0x5c>)
 800f5b6:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 800f5b8:	79fb      	ldrb	r3, [r7, #7]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3708      	adds	r7, #8
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5c4:	b004      	add	sp, #16
 800f5c6:	4770      	bx	lr
 800f5c8:	20002bb1 	.word	0x20002bb1
 800f5cc:	2000b56c 	.word	0x2000b56c

0800f5d0 <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 800f5d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800f5d8:	480e      	ldr	r0, [pc, #56]	; (800f614 <gos_traceDaemonTask+0x44>)
 800f5da:	f7fd fbcd 	bl	800cd78 <gos_mutexLock>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b55      	cmp	r3, #85	; 0x55
 800f5e2:	d10e      	bne.n	800f602 <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 800f5e4:	e002      	b.n	800f5ec <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 800f5e6:	480c      	ldr	r0, [pc, #48]	; (800f618 <gos_traceDaemonTask+0x48>)
 800f5e8:	f7f9 fda6 	bl	8009138 <gos_traceDriverTransmitString>
            while (gos_queueGet(
 800f5ec:	4b0b      	ldr	r3, [pc, #44]	; (800f61c <gos_traceDaemonTask+0x4c>)
 800f5ee:	8818      	ldrh	r0, [r3, #0]
 800f5f0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f5f4:	22c8      	movs	r2, #200	; 0xc8
 800f5f6:	4908      	ldr	r1, [pc, #32]	; (800f618 <gos_traceDaemonTask+0x48>)
 800f5f8:	f7fd feac 	bl	800d354 <gos_queueGet>
 800f5fc:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 800f5fe:	2b55      	cmp	r3, #85	; 0x55
 800f600:	d0f1      	beq.n	800f5e6 <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        (void_t) gos_mutexUnlock(&traceMutex);
 800f602:	4804      	ldr	r0, [pc, #16]	; (800f614 <gos_traceDaemonTask+0x44>)
 800f604:	f7fd fcbe 	bl	800cf84 <gos_mutexUnlock>
        (void_t) gos_taskSuspend(traceDaemonTaskDesc.taskId);
 800f608:	4b05      	ldr	r3, [pc, #20]	; (800f620 <gos_traceDaemonTask+0x50>)
 800f60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7fb fa41 	bl	800aa94 <gos_taskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 800f612:	e7df      	b.n	800f5d4 <gos_traceDaemonTask+0x4>
 800f614:	2000b660 	.word	0x2000b660
 800f618:	2000b4a4 	.word	0x2000b4a4
 800f61c:	20001ca8 	.word	0x20001ca8
 800f620:	20001cc4 	.word	0x20001cc4

0800f624 <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 800f62c:	23ae      	movs	r3, #174	; 0xae
 800f62e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d00b      	beq.n	800f64e <gos_triggerInit+0x2a>
    {
        pTrigger->valueCounter = 0u;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2200      	movs	r2, #0
 800f63a:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	605a      	str	r2, [r3, #4]
        pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f648:	811a      	strh	r2, [r3, #8]
        triggerInitResult      = GOS_SUCCESS;
 800f64a:	2355      	movs	r3, #85	; 0x55
 800f64c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 800f64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f650:	4618      	mov	r0, r3
 800f652:	3714      	adds	r7, #20
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE gos_result_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b085      	sub	sp, #20
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t resetResult = GOS_ERROR;
 800f664:	23ae      	movs	r3, #174	; 0xae
 800f666:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d041      	beq.n	800f6f2 <gos_triggerReset+0x96>
    {
        GOS_ATOMIC_ENTER
 800f66e:	4b24      	ldr	r3, [pc, #144]	; (800f700 <gos_triggerReset+0xa4>)
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d108      	bne.n	800f688 <gos_triggerReset+0x2c>
 800f676:	b672      	cpsid	i
 800f678:	f3ef 8310 	mrs	r3, PRIMASK
 800f67c:	4a21      	ldr	r2, [pc, #132]	; (800f704 <gos_triggerReset+0xa8>)
 800f67e:	6013      	str	r3, [r2, #0]
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	4b1d      	ldr	r3, [pc, #116]	; (800f700 <gos_triggerReset+0xa4>)
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	3301      	adds	r3, #1
 800f68e:	b2da      	uxtb	r2, r3
 800f690:	4b1b      	ldr	r3, [pc, #108]	; (800f700 <gos_triggerReset+0xa4>)
 800f692:	701a      	strb	r2, [r3, #0]
 800f694:	4b1c      	ldr	r3, [pc, #112]	; (800f708 <gos_triggerReset+0xac>)
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	3301      	adds	r3, #1
 800f69a:	b2da      	uxtb	r2, r3
 800f69c:	4b1a      	ldr	r3, [pc, #104]	; (800f708 <gos_triggerReset+0xac>)
 800f69e:	701a      	strb	r2, [r3, #0]

        pTrigger->valueCounter = 0u;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	605a      	str	r2, [r3, #4]

        resetResult = GOS_SUCCESS;
 800f6ac:	2355      	movs	r3, #85	; 0x55
 800f6ae:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 800f6b0:	4b13      	ldr	r3, [pc, #76]	; (800f700 <gos_triggerReset+0xa4>)
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d005      	beq.n	800f6c4 <gos_triggerReset+0x68>
 800f6b8:	4b11      	ldr	r3, [pc, #68]	; (800f700 <gos_triggerReset+0xa4>)
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	b2da      	uxtb	r2, r3
 800f6c0:	4b0f      	ldr	r3, [pc, #60]	; (800f700 <gos_triggerReset+0xa4>)
 800f6c2:	701a      	strb	r2, [r3, #0]
 800f6c4:	4b0e      	ldr	r3, [pc, #56]	; (800f700 <gos_triggerReset+0xa4>)
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d108      	bne.n	800f6de <gos_triggerReset+0x82>
 800f6cc:	4b0d      	ldr	r3, [pc, #52]	; (800f704 <gos_triggerReset+0xa8>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f383 8810 	msr	PRIMASK, r3
 800f6d4:	b662      	cpsie	i
 800f6d6:	f3bf 8f4f 	dsb	sy
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	4b0a      	ldr	r3, [pc, #40]	; (800f708 <gos_triggerReset+0xac>)
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d005      	beq.n	800f6f2 <gos_triggerReset+0x96>
 800f6e6:	4b08      	ldr	r3, [pc, #32]	; (800f708 <gos_triggerReset+0xac>)
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	b2da      	uxtb	r2, r3
 800f6ee:	4b06      	ldr	r3, [pc, #24]	; (800f708 <gos_triggerReset+0xac>)
 800f6f0:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return resetResult;
 800f6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3714      	adds	r7, #20
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr
 800f700:	20002bb3 	.word	0x20002bb3
 800f704:	20002bb4 	.word	0x20002bb4
 800f708:	20002bb1 	.word	0x20002bb1

0800f70c <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b086      	sub	sp, #24
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 800f718:	23ae      	movs	r3, #174	; 0xae
 800f71a:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 800f71c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f720:	82bb      	strh	r3, [r7, #20]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2b00      	cmp	r3, #0
 800f726:	f000 8096 	beq.w	800f856 <gos_triggerWait+0x14a>
    {
        // Set owner task ID.
        GOS_ATOMIC_ENTER
 800f72a:	4b4d      	ldr	r3, [pc, #308]	; (800f860 <gos_triggerWait+0x154>)
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d108      	bne.n	800f744 <gos_triggerWait+0x38>
 800f732:	b672      	cpsid	i
 800f734:	f3ef 8310 	mrs	r3, PRIMASK
 800f738:	4a4a      	ldr	r2, [pc, #296]	; (800f864 <gos_triggerWait+0x158>)
 800f73a:	6013      	str	r3, [r2, #0]
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	4b46      	ldr	r3, [pc, #280]	; (800f860 <gos_triggerWait+0x154>)
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	3301      	adds	r3, #1
 800f74a:	b2da      	uxtb	r2, r3
 800f74c:	4b44      	ldr	r3, [pc, #272]	; (800f860 <gos_triggerWait+0x154>)
 800f74e:	701a      	strb	r2, [r3, #0]
 800f750:	4b45      	ldr	r3, [pc, #276]	; (800f868 <gos_triggerWait+0x15c>)
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	3301      	adds	r3, #1
 800f756:	b2da      	uxtb	r2, r3
 800f758:	4b43      	ldr	r3, [pc, #268]	; (800f868 <gos_triggerWait+0x15c>)
 800f75a:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentId);
 800f75c:	f107 0314 	add.w	r3, r7, #20
 800f760:	4618      	mov	r0, r3
 800f762:	f7fc fa8b 	bl	800bc7c <gos_taskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 800f766:	8aba      	ldrh	r2, [r7, #20]
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	605a      	str	r2, [r3, #4]

        GOS_ATOMIC_EXIT
 800f772:	4b3b      	ldr	r3, [pc, #236]	; (800f860 <gos_triggerWait+0x154>)
 800f774:	781b      	ldrb	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d005      	beq.n	800f786 <gos_triggerWait+0x7a>
 800f77a:	4b39      	ldr	r3, [pc, #228]	; (800f860 <gos_triggerWait+0x154>)
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	3b01      	subs	r3, #1
 800f780:	b2da      	uxtb	r2, r3
 800f782:	4b37      	ldr	r3, [pc, #220]	; (800f860 <gos_triggerWait+0x154>)
 800f784:	701a      	strb	r2, [r3, #0]
 800f786:	4b36      	ldr	r3, [pc, #216]	; (800f860 <gos_triggerWait+0x154>)
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d108      	bne.n	800f7a0 <gos_triggerWait+0x94>
 800f78e:	4b35      	ldr	r3, [pc, #212]	; (800f864 <gos_triggerWait+0x158>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f383 8810 	msr	PRIMASK, r3
 800f796:	b662      	cpsie	i
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	f3bf 8f6f 	isb	sy
 800f7a0:	4b31      	ldr	r3, [pc, #196]	; (800f868 <gos_triggerWait+0x15c>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d005      	beq.n	800f7b4 <gos_triggerWait+0xa8>
 800f7a8:	4b2f      	ldr	r3, [pc, #188]	; (800f868 <gos_triggerWait+0x15c>)
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	b2da      	uxtb	r2, r3
 800f7b0:	4b2d      	ldr	r3, [pc, #180]	; (800f868 <gos_triggerWait+0x15c>)
 800f7b2:	701a      	strb	r2, [r3, #0]

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d204      	bcs.n	800f7ca <gos_triggerWait+0xbe>
        {
            (void_t) gos_taskBlock(currentId, timeout);
 800f7c0:	8abb      	ldrh	r3, [r7, #20]
 800f7c2:	6879      	ldr	r1, [r7, #4]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fb fb35 	bl	800ae34 <gos_taskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        GOS_ATOMIC_ENTER
 800f7ca:	4b25      	ldr	r3, [pc, #148]	; (800f860 <gos_triggerWait+0x154>)
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d108      	bne.n	800f7e4 <gos_triggerWait+0xd8>
 800f7d2:	b672      	cpsid	i
 800f7d4:	f3ef 8310 	mrs	r3, PRIMASK
 800f7d8:	4a22      	ldr	r2, [pc, #136]	; (800f864 <gos_triggerWait+0x158>)
 800f7da:	6013      	str	r3, [r2, #0]
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	f3bf 8f6f 	isb	sy
 800f7e4:	4b1e      	ldr	r3, [pc, #120]	; (800f860 <gos_triggerWait+0x154>)
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	b2da      	uxtb	r2, r3
 800f7ec:	4b1c      	ldr	r3, [pc, #112]	; (800f860 <gos_triggerWait+0x154>)
 800f7ee:	701a      	strb	r2, [r3, #0]
 800f7f0:	4b1d      	ldr	r3, [pc, #116]	; (800f868 <gos_triggerWait+0x15c>)
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	b2da      	uxtb	r2, r3
 800f7f8:	4b1b      	ldr	r3, [pc, #108]	; (800f868 <gos_triggerWait+0x15c>)
 800f7fa:	701a      	strb	r2, [r3, #0]

        if (pTrigger->valueCounter >= pTrigger->desiredValue)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	429a      	cmp	r2, r3
 800f806:	d305      	bcc.n	800f814 <gos_triggerWait+0x108>
        {
            triggerWaitResult      = GOS_SUCCESS;
 800f808:	2355      	movs	r3, #85	; 0x55
 800f80a:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f812:	811a      	strh	r2, [r3, #8]
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_EXIT
 800f814:	4b12      	ldr	r3, [pc, #72]	; (800f860 <gos_triggerWait+0x154>)
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d005      	beq.n	800f828 <gos_triggerWait+0x11c>
 800f81c:	4b10      	ldr	r3, [pc, #64]	; (800f860 <gos_triggerWait+0x154>)
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	3b01      	subs	r3, #1
 800f822:	b2da      	uxtb	r2, r3
 800f824:	4b0e      	ldr	r3, [pc, #56]	; (800f860 <gos_triggerWait+0x154>)
 800f826:	701a      	strb	r2, [r3, #0]
 800f828:	4b0d      	ldr	r3, [pc, #52]	; (800f860 <gos_triggerWait+0x154>)
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d108      	bne.n	800f842 <gos_triggerWait+0x136>
 800f830:	4b0c      	ldr	r3, [pc, #48]	; (800f864 <gos_triggerWait+0x158>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f383 8810 	msr	PRIMASK, r3
 800f838:	b662      	cpsie	i
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	f3bf 8f6f 	isb	sy
 800f842:	4b09      	ldr	r3, [pc, #36]	; (800f868 <gos_triggerWait+0x15c>)
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d005      	beq.n	800f856 <gos_triggerWait+0x14a>
 800f84a:	4b07      	ldr	r3, [pc, #28]	; (800f868 <gos_triggerWait+0x15c>)
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	3b01      	subs	r3, #1
 800f850:	b2da      	uxtb	r2, r3
 800f852:	4b05      	ldr	r3, [pc, #20]	; (800f868 <gos_triggerWait+0x15c>)
 800f854:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 800f856:	7dfb      	ldrb	r3, [r7, #23]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3718      	adds	r7, #24
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	20002bb3 	.word	0x20002bb3
 800f864:	20002bb4 	.word	0x20002bb4
 800f868:	20002bb1 	.word	0x20002bb1

0800f86c <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE gos_result_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
    /*
    * Local variables.
    */
    gos_result_t triggerIncrementResult = GOS_ERROR;
 800f874:	23ae      	movs	r3, #174	; 0xae
 800f876:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d073      	beq.n	800f966 <gos_triggerIncrement+0xfa>
    {
        GOS_ATOMIC_ENTER
 800f87e:	4b3c      	ldr	r3, [pc, #240]	; (800f970 <gos_triggerIncrement+0x104>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d108      	bne.n	800f898 <gos_triggerIncrement+0x2c>
 800f886:	b672      	cpsid	i
 800f888:	f3ef 8310 	mrs	r3, PRIMASK
 800f88c:	4a39      	ldr	r2, [pc, #228]	; (800f974 <gos_triggerIncrement+0x108>)
 800f88e:	6013      	str	r3, [r2, #0]
 800f890:	f3bf 8f4f 	dsb	sy
 800f894:	f3bf 8f6f 	isb	sy
 800f898:	4b35      	ldr	r3, [pc, #212]	; (800f970 <gos_triggerIncrement+0x104>)
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	3301      	adds	r3, #1
 800f89e:	b2da      	uxtb	r2, r3
 800f8a0:	4b33      	ldr	r3, [pc, #204]	; (800f970 <gos_triggerIncrement+0x104>)
 800f8a2:	701a      	strb	r2, [r3, #0]
 800f8a4:	4b34      	ldr	r3, [pc, #208]	; (800f978 <gos_triggerIncrement+0x10c>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	b2da      	uxtb	r2, r3
 800f8ac:	4b32      	ldr	r3, [pc, #200]	; (800f978 <gos_triggerIncrement+0x10c>)
 800f8ae:	701a      	strb	r2, [r3, #0]

        // Increment trigger value.
        pTrigger->valueCounter++;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	1c5a      	adds	r2, r3, #1
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	601a      	str	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d12c      	bne.n	800f920 <gos_triggerIncrement+0xb4>
        {
            GOS_ISR_ENTER
 800f8c6:	4b2d      	ldr	r3, [pc, #180]	; (800f97c <gos_triggerIncrement+0x110>)
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d105      	bne.n	800f8da <gos_triggerIncrement+0x6e>
 800f8ce:	4b2a      	ldr	r3, [pc, #168]	; (800f978 <gos_triggerIncrement+0x10c>)
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	4b28      	ldr	r3, [pc, #160]	; (800f978 <gos_triggerIncrement+0x10c>)
 800f8d8:	701a      	strb	r2, [r3, #0]
 800f8da:	4b28      	ldr	r3, [pc, #160]	; (800f97c <gos_triggerIncrement+0x110>)
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	b2da      	uxtb	r2, r3
 800f8e2:	4b26      	ldr	r3, [pc, #152]	; (800f97c <gos_triggerIncrement+0x110>)
 800f8e4:	701a      	strb	r2, [r3, #0]

            // Unblock owner task.
            (void_t) gos_taskUnblock(pTrigger->waiterTaskId);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	891b      	ldrh	r3, [r3, #8]
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fb fbb4 	bl	800b058 <gos_taskUnblock>

            GOS_ISR_EXIT
 800f8f0:	4b22      	ldr	r3, [pc, #136]	; (800f97c <gos_triggerIncrement+0x110>)
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d005      	beq.n	800f904 <gos_triggerIncrement+0x98>
 800f8f8:	4b20      	ldr	r3, [pc, #128]	; (800f97c <gos_triggerIncrement+0x110>)
 800f8fa:	781b      	ldrb	r3, [r3, #0]
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	b2da      	uxtb	r2, r3
 800f900:	4b1e      	ldr	r3, [pc, #120]	; (800f97c <gos_triggerIncrement+0x110>)
 800f902:	701a      	strb	r2, [r3, #0]
 800f904:	4b1d      	ldr	r3, [pc, #116]	; (800f97c <gos_triggerIncrement+0x110>)
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d109      	bne.n	800f920 <gos_triggerIncrement+0xb4>
 800f90c:	4b1a      	ldr	r3, [pc, #104]	; (800f978 <gos_triggerIncrement+0x10c>)
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d005      	beq.n	800f920 <gos_triggerIncrement+0xb4>
 800f914:	4b18      	ldr	r3, [pc, #96]	; (800f978 <gos_triggerIncrement+0x10c>)
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	3b01      	subs	r3, #1
 800f91a:	b2da      	uxtb	r2, r3
 800f91c:	4b16      	ldr	r3, [pc, #88]	; (800f978 <gos_triggerIncrement+0x10c>)
 800f91e:	701a      	strb	r2, [r3, #0]
        else
        {
            // Trigger value not reached yet.
        }

        triggerIncrementResult = GOS_SUCCESS;
 800f920:	2355      	movs	r3, #85	; 0x55
 800f922:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 800f924:	4b12      	ldr	r3, [pc, #72]	; (800f970 <gos_triggerIncrement+0x104>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d005      	beq.n	800f938 <gos_triggerIncrement+0xcc>
 800f92c:	4b10      	ldr	r3, [pc, #64]	; (800f970 <gos_triggerIncrement+0x104>)
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	3b01      	subs	r3, #1
 800f932:	b2da      	uxtb	r2, r3
 800f934:	4b0e      	ldr	r3, [pc, #56]	; (800f970 <gos_triggerIncrement+0x104>)
 800f936:	701a      	strb	r2, [r3, #0]
 800f938:	4b0d      	ldr	r3, [pc, #52]	; (800f970 <gos_triggerIncrement+0x104>)
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d108      	bne.n	800f952 <gos_triggerIncrement+0xe6>
 800f940:	4b0c      	ldr	r3, [pc, #48]	; (800f974 <gos_triggerIncrement+0x108>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f383 8810 	msr	PRIMASK, r3
 800f948:	b662      	cpsie	i
 800f94a:	f3bf 8f4f 	dsb	sy
 800f94e:	f3bf 8f6f 	isb	sy
 800f952:	4b09      	ldr	r3, [pc, #36]	; (800f978 <gos_triggerIncrement+0x10c>)
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d005      	beq.n	800f966 <gos_triggerIncrement+0xfa>
 800f95a:	4b07      	ldr	r3, [pc, #28]	; (800f978 <gos_triggerIncrement+0x10c>)
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	3b01      	subs	r3, #1
 800f960:	b2da      	uxtb	r2, r3
 800f962:	4b05      	ldr	r3, [pc, #20]	; (800f978 <gos_triggerIncrement+0x10c>)
 800f964:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerIncrementResult;
 800f966:	7bfb      	ldrb	r3, [r7, #15]
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3710      	adds	r7, #16
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	20002bb3 	.word	0x20002bb3
 800f974:	20002bb4 	.word	0x20002bb4
 800f978:	20002bb1 	.word	0x20002bb1
 800f97c:	20002bb2 	.word	0x20002bb2

0800f980 <gos_crcDriverGetCrc>:

/*
 * Function: gos_crcDriverGetCrc
 */
u32_t gos_crcDriverGetCrc (u8_t* pData, u32_t dataSize)
{
 800f980:	b480      	push	{r7}
 800f982:	b087      	sub	sp, #28
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    u32_t   crcValue   = CRC_INITIAL_VALUE;
 800f98a:	f04f 33ff 	mov.w	r3, #4294967295
 800f98e:	617b      	str	r3, [r7, #20]
    u32_t   index      = 0u;
 800f990:	2300      	movs	r3, #0
 800f992:	613b      	str	r3, [r7, #16]
    u32_t   mask       = 0u;
 800f994:	2300      	movs	r3, #0
 800f996:	60bb      	str	r3, [r7, #8]
    u8_t    bitCounter = 0u;
 800f998:	2300      	movs	r3, #0
 800f99a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < dataSize; index++)
 800f99c:	2300      	movs	r3, #0
 800f99e:	613b      	str	r3, [r7, #16]
 800f9a0:	e01e      	b.n	800f9e0 <gos_crcDriverGetCrc+0x60>
    {
        crcValue ^= pData[index];
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	693b      	ldr	r3, [r7, #16]
 800f9a6:	4413      	add	r3, r2
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	4053      	eors	r3, r2
 800f9b0:	617b      	str	r3, [r7, #20]

        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 800f9b2:	2308      	movs	r3, #8
 800f9b4:	73fb      	strb	r3, [r7, #15]
 800f9b6:	e00d      	b.n	800f9d4 <gos_crcDriverGetCrc+0x54>
        {
            mask = -(crcValue & 1);
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	f003 0301 	and.w	r3, r3, #1
 800f9be:	425b      	negs	r3, r3
 800f9c0:	60bb      	str	r3, [r7, #8]
            crcValue = (crcValue) ^ (CRC_POLYNOMIAL_VALUE & mask);
 800f9c2:	68ba      	ldr	r2, [r7, #8]
 800f9c4:	4b0c      	ldr	r3, [pc, #48]	; (800f9f8 <gos_crcDriverGetCrc+0x78>)
 800f9c6:	4013      	ands	r3, r2
 800f9c8:	697a      	ldr	r2, [r7, #20]
 800f9ca:	4053      	eors	r3, r2
 800f9cc:	617b      	str	r3, [r7, #20]
        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 800f9ce:	7bfb      	ldrb	r3, [r7, #15]
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	73fb      	strb	r3, [r7, #15]
 800f9d4:	7bfb      	ldrb	r3, [r7, #15]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d1ee      	bne.n	800f9b8 <gos_crcDriverGetCrc+0x38>
    for (index = 0u; index < dataSize; index++)
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	613b      	str	r3, [r7, #16]
 800f9e0:	693a      	ldr	r2, [r7, #16]
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d3dc      	bcc.n	800f9a2 <gos_crcDriverGetCrc+0x22>
        }
    }

    return ~crcValue;
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	43db      	mvns	r3, r3
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	371c      	adds	r7, #28
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr
 800f9f8:	edb88320 	.word	0xedb88320

0800f9fc <gos_shellDriverReceiveChar>:

/*
 * Function: gos_shellDriverReceiveChar
 */
gos_result_t gos_shellDriverReceiveChar (char_t* pChar)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t shellDriverReceiveResult = GOS_ERROR;
 800fa04:	23ae      	movs	r3, #174	; 0xae
 800fa06:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.shellDriverReceiveChar != NULL)
 800fa08:	4b07      	ldr	r3, [pc, #28]	; (800fa28 <gos_shellDriverReceiveChar+0x2c>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d005      	beq.n	800fa1c <gos_shellDriverReceiveChar+0x20>
    {
        shellDriverReceiveResult = driverFunctions.shellDriverReceiveChar(pChar);
 800fa10:	4b05      	ldr	r3, [pc, #20]	; (800fa28 <gos_shellDriverReceiveChar+0x2c>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	4798      	blx	r3
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return shellDriverReceiveResult;
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	20002b94 	.word	0x20002b94

0800fa2c <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 800fa2c:	b40f      	push	{r0, r1, r2, r3}
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b082      	sub	sp, #8
 800fa32:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 800fa34:	23ae      	movs	r3, #174	; 0xae
 800fa36:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 800fa38:	f107 0314 	add.w	r3, r7, #20
 800fa3c:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 800fa3e:	683a      	ldr	r2, [r7, #0]
 800fa40:	6939      	ldr	r1, [r7, #16]
 800fa42:	480a      	ldr	r0, [pc, #40]	; (800fa6c <gos_shellDriverTransmitString+0x40>)
 800fa44:	f000 fe94 	bl	8010770 <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 800fa48:	4b09      	ldr	r3, [pc, #36]	; (800fa70 <gos_shellDriverTransmitString+0x44>)
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d005      	beq.n	800fa5c <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 800fa50:	4b07      	ldr	r3, [pc, #28]	; (800fa70 <gos_shellDriverTransmitString+0x44>)
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	4805      	ldr	r0, [pc, #20]	; (800fa6c <gos_shellDriverTransmitString+0x40>)
 800fa56:	4798      	blx	r3
 800fa58:	4603      	mov	r3, r0
 800fa5a:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellDriverTransmitResult;
 800fa5c:	79fb      	ldrb	r3, [r7, #7]
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3708      	adds	r7, #8
 800fa62:	46bd      	mov	sp, r7
 800fa64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa68:	b004      	add	sp, #16
 800fa6a:	4770      	bx	lr
 800fa6c:	2000b664 	.word	0x2000b664
 800fa70:	20002b94 	.word	0x20002b94

0800fa74 <gos_sysmonDriverReceive>:

/*
 * Function: gos_sysmonDriverReceive
 */
gos_result_t gos_sysmonDriverReceive (u8_t* pBuffer, u16_t bufferSize)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverReceiveResult = GOS_ERROR;
 800fa80:	23ae      	movs	r3, #174	; 0xae
 800fa82:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverReceive != NULL)
 800fa84:	4b08      	ldr	r3, [pc, #32]	; (800faa8 <gos_sysmonDriverReceive+0x34>)
 800fa86:	699b      	ldr	r3, [r3, #24]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d007      	beq.n	800fa9c <gos_sysmonDriverReceive+0x28>
    {
        sysmonDriverReceiveResult = driverFunctions.sysmonDriverReceive(pBuffer, bufferSize);
 800fa8c:	4b06      	ldr	r3, [pc, #24]	; (800faa8 <gos_sysmonDriverReceive+0x34>)
 800fa8e:	699b      	ldr	r3, [r3, #24]
 800fa90:	887a      	ldrh	r2, [r7, #2]
 800fa92:	4611      	mov	r1, r2
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	4798      	blx	r3
 800fa98:	4603      	mov	r3, r0
 800fa9a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverReceiveResult;
 800fa9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3710      	adds	r7, #16
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	20002b94 	.word	0x20002b94

0800faac <gos_sysmonDriverTransmit>:

/*
 * Function: gos_sysmonDriverTransmit
 */
gos_result_t gos_sysmonDriverTransmit (u8_t* pBuffer, u16_t bufferSize)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	460b      	mov	r3, r1
 800fab6:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverTransmitResult = GOS_ERROR;
 800fab8:	23ae      	movs	r3, #174	; 0xae
 800faba:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverTransmit != NULL)
 800fabc:	4b08      	ldr	r3, [pc, #32]	; (800fae0 <gos_sysmonDriverTransmit+0x34>)
 800fabe:	695b      	ldr	r3, [r3, #20]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d007      	beq.n	800fad4 <gos_sysmonDriverTransmit+0x28>
    {
        sysmonDriverTransmitResult = driverFunctions.sysmonDriverTransmit(pBuffer, bufferSize);
 800fac4:	4b06      	ldr	r3, [pc, #24]	; (800fae0 <gos_sysmonDriverTransmit+0x34>)
 800fac6:	695b      	ldr	r3, [r3, #20]
 800fac8:	887a      	ldrh	r2, [r7, #2]
 800faca:	4611      	mov	r1, r2
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	4798      	blx	r3
 800fad0:	4603      	mov	r3, r0
 800fad2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverTransmitResult;
 800fad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3710      	adds	r7, #16
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	20002b94 	.word	0x20002b94

0800fae4 <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b084      	sub	sp, #16
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 800faec:	23ae      	movs	r3, #174	; 0xae
 800faee:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 800faf0:	4b07      	ldr	r3, [pc, #28]	; (800fb10 <gos_timerDriverSysTimerGet+0x2c>)
 800faf2:	691b      	ldr	r3, [r3, #16]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d005      	beq.n	800fb04 <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 800faf8:	4b05      	ldr	r3, [pc, #20]	; (800fb10 <gos_timerDriverSysTimerGet+0x2c>)
 800fafa:	691b      	ldr	r3, [r3, #16]
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	4798      	blx	r3
 800fb00:	4603      	mov	r3, r0
 800fb02:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timerDriverSysTimerGetResult;
 800fb04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	20002b94 	.word	0x20002b94

0800fb14 <_strtol_l.constprop.0>:
 800fb14:	2b01      	cmp	r3, #1
 800fb16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb1a:	d001      	beq.n	800fb20 <_strtol_l.constprop.0+0xc>
 800fb1c:	2b24      	cmp	r3, #36	; 0x24
 800fb1e:	d906      	bls.n	800fb2e <_strtol_l.constprop.0+0x1a>
 800fb20:	f000 fe82 	bl	8010828 <__errno>
 800fb24:	2316      	movs	r3, #22
 800fb26:	6003      	str	r3, [r0, #0]
 800fb28:	2000      	movs	r0, #0
 800fb2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fc14 <_strtol_l.constprop.0+0x100>
 800fb32:	460d      	mov	r5, r1
 800fb34:	462e      	mov	r6, r5
 800fb36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb3a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800fb3e:	f017 0708 	ands.w	r7, r7, #8
 800fb42:	d1f7      	bne.n	800fb34 <_strtol_l.constprop.0+0x20>
 800fb44:	2c2d      	cmp	r4, #45	; 0x2d
 800fb46:	d132      	bne.n	800fbae <_strtol_l.constprop.0+0x9a>
 800fb48:	782c      	ldrb	r4, [r5, #0]
 800fb4a:	2701      	movs	r7, #1
 800fb4c:	1cb5      	adds	r5, r6, #2
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d05b      	beq.n	800fc0a <_strtol_l.constprop.0+0xf6>
 800fb52:	2b10      	cmp	r3, #16
 800fb54:	d109      	bne.n	800fb6a <_strtol_l.constprop.0+0x56>
 800fb56:	2c30      	cmp	r4, #48	; 0x30
 800fb58:	d107      	bne.n	800fb6a <_strtol_l.constprop.0+0x56>
 800fb5a:	782c      	ldrb	r4, [r5, #0]
 800fb5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fb60:	2c58      	cmp	r4, #88	; 0x58
 800fb62:	d14d      	bne.n	800fc00 <_strtol_l.constprop.0+0xec>
 800fb64:	786c      	ldrb	r4, [r5, #1]
 800fb66:	2310      	movs	r3, #16
 800fb68:	3502      	adds	r5, #2
 800fb6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fb6e:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb72:	f04f 0e00 	mov.w	lr, #0
 800fb76:	fbb8 f9f3 	udiv	r9, r8, r3
 800fb7a:	4676      	mov	r6, lr
 800fb7c:	fb03 8a19 	mls	sl, r3, r9, r8
 800fb80:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fb84:	f1bc 0f09 	cmp.w	ip, #9
 800fb88:	d816      	bhi.n	800fbb8 <_strtol_l.constprop.0+0xa4>
 800fb8a:	4664      	mov	r4, ip
 800fb8c:	42a3      	cmp	r3, r4
 800fb8e:	dd24      	ble.n	800fbda <_strtol_l.constprop.0+0xc6>
 800fb90:	f1be 3fff 	cmp.w	lr, #4294967295
 800fb94:	d008      	beq.n	800fba8 <_strtol_l.constprop.0+0x94>
 800fb96:	45b1      	cmp	r9, r6
 800fb98:	d31c      	bcc.n	800fbd4 <_strtol_l.constprop.0+0xc0>
 800fb9a:	d101      	bne.n	800fba0 <_strtol_l.constprop.0+0x8c>
 800fb9c:	45a2      	cmp	sl, r4
 800fb9e:	db19      	blt.n	800fbd4 <_strtol_l.constprop.0+0xc0>
 800fba0:	fb06 4603 	mla	r6, r6, r3, r4
 800fba4:	f04f 0e01 	mov.w	lr, #1
 800fba8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbac:	e7e8      	b.n	800fb80 <_strtol_l.constprop.0+0x6c>
 800fbae:	2c2b      	cmp	r4, #43	; 0x2b
 800fbb0:	bf04      	itt	eq
 800fbb2:	782c      	ldrbeq	r4, [r5, #0]
 800fbb4:	1cb5      	addeq	r5, r6, #2
 800fbb6:	e7ca      	b.n	800fb4e <_strtol_l.constprop.0+0x3a>
 800fbb8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fbbc:	f1bc 0f19 	cmp.w	ip, #25
 800fbc0:	d801      	bhi.n	800fbc6 <_strtol_l.constprop.0+0xb2>
 800fbc2:	3c37      	subs	r4, #55	; 0x37
 800fbc4:	e7e2      	b.n	800fb8c <_strtol_l.constprop.0+0x78>
 800fbc6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fbca:	f1bc 0f19 	cmp.w	ip, #25
 800fbce:	d804      	bhi.n	800fbda <_strtol_l.constprop.0+0xc6>
 800fbd0:	3c57      	subs	r4, #87	; 0x57
 800fbd2:	e7db      	b.n	800fb8c <_strtol_l.constprop.0+0x78>
 800fbd4:	f04f 3eff 	mov.w	lr, #4294967295
 800fbd8:	e7e6      	b.n	800fba8 <_strtol_l.constprop.0+0x94>
 800fbda:	f1be 3fff 	cmp.w	lr, #4294967295
 800fbde:	d105      	bne.n	800fbec <_strtol_l.constprop.0+0xd8>
 800fbe0:	2322      	movs	r3, #34	; 0x22
 800fbe2:	6003      	str	r3, [r0, #0]
 800fbe4:	4646      	mov	r6, r8
 800fbe6:	b942      	cbnz	r2, 800fbfa <_strtol_l.constprop.0+0xe6>
 800fbe8:	4630      	mov	r0, r6
 800fbea:	e79e      	b.n	800fb2a <_strtol_l.constprop.0+0x16>
 800fbec:	b107      	cbz	r7, 800fbf0 <_strtol_l.constprop.0+0xdc>
 800fbee:	4276      	negs	r6, r6
 800fbf0:	2a00      	cmp	r2, #0
 800fbf2:	d0f9      	beq.n	800fbe8 <_strtol_l.constprop.0+0xd4>
 800fbf4:	f1be 0f00 	cmp.w	lr, #0
 800fbf8:	d000      	beq.n	800fbfc <_strtol_l.constprop.0+0xe8>
 800fbfa:	1e69      	subs	r1, r5, #1
 800fbfc:	6011      	str	r1, [r2, #0]
 800fbfe:	e7f3      	b.n	800fbe8 <_strtol_l.constprop.0+0xd4>
 800fc00:	2430      	movs	r4, #48	; 0x30
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d1b1      	bne.n	800fb6a <_strtol_l.constprop.0+0x56>
 800fc06:	2308      	movs	r3, #8
 800fc08:	e7af      	b.n	800fb6a <_strtol_l.constprop.0+0x56>
 800fc0a:	2c30      	cmp	r4, #48	; 0x30
 800fc0c:	d0a5      	beq.n	800fb5a <_strtol_l.constprop.0+0x46>
 800fc0e:	230a      	movs	r3, #10
 800fc10:	e7ab      	b.n	800fb6a <_strtol_l.constprop.0+0x56>
 800fc12:	bf00      	nop
 800fc14:	08014821 	.word	0x08014821

0800fc18 <strtol>:
 800fc18:	4613      	mov	r3, r2
 800fc1a:	460a      	mov	r2, r1
 800fc1c:	4601      	mov	r1, r0
 800fc1e:	4802      	ldr	r0, [pc, #8]	; (800fc28 <strtol+0x10>)
 800fc20:	6800      	ldr	r0, [r0, #0]
 800fc22:	f7ff bf77 	b.w	800fb14 <_strtol_l.constprop.0>
 800fc26:	bf00      	nop
 800fc28:	20001d88 	.word	0x20001d88

0800fc2c <__cvt>:
 800fc2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc30:	ec55 4b10 	vmov	r4, r5, d0
 800fc34:	2d00      	cmp	r5, #0
 800fc36:	460e      	mov	r6, r1
 800fc38:	4619      	mov	r1, r3
 800fc3a:	462b      	mov	r3, r5
 800fc3c:	bfbb      	ittet	lt
 800fc3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc42:	461d      	movlt	r5, r3
 800fc44:	2300      	movge	r3, #0
 800fc46:	232d      	movlt	r3, #45	; 0x2d
 800fc48:	700b      	strb	r3, [r1, #0]
 800fc4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fc50:	4691      	mov	r9, r2
 800fc52:	f023 0820 	bic.w	r8, r3, #32
 800fc56:	bfbc      	itt	lt
 800fc58:	4622      	movlt	r2, r4
 800fc5a:	4614      	movlt	r4, r2
 800fc5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc60:	d005      	beq.n	800fc6e <__cvt+0x42>
 800fc62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fc66:	d100      	bne.n	800fc6a <__cvt+0x3e>
 800fc68:	3601      	adds	r6, #1
 800fc6a:	2102      	movs	r1, #2
 800fc6c:	e000      	b.n	800fc70 <__cvt+0x44>
 800fc6e:	2103      	movs	r1, #3
 800fc70:	ab03      	add	r3, sp, #12
 800fc72:	9301      	str	r3, [sp, #4]
 800fc74:	ab02      	add	r3, sp, #8
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	ec45 4b10 	vmov	d0, r4, r5
 800fc7c:	4653      	mov	r3, sl
 800fc7e:	4632      	mov	r2, r6
 800fc80:	f000 fe9e 	bl	80109c0 <_dtoa_r>
 800fc84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fc88:	4607      	mov	r7, r0
 800fc8a:	d102      	bne.n	800fc92 <__cvt+0x66>
 800fc8c:	f019 0f01 	tst.w	r9, #1
 800fc90:	d022      	beq.n	800fcd8 <__cvt+0xac>
 800fc92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc96:	eb07 0906 	add.w	r9, r7, r6
 800fc9a:	d110      	bne.n	800fcbe <__cvt+0x92>
 800fc9c:	783b      	ldrb	r3, [r7, #0]
 800fc9e:	2b30      	cmp	r3, #48	; 0x30
 800fca0:	d10a      	bne.n	800fcb8 <__cvt+0x8c>
 800fca2:	2200      	movs	r2, #0
 800fca4:	2300      	movs	r3, #0
 800fca6:	4620      	mov	r0, r4
 800fca8:	4629      	mov	r1, r5
 800fcaa:	f7f0 ff3d 	bl	8000b28 <__aeabi_dcmpeq>
 800fcae:	b918      	cbnz	r0, 800fcb8 <__cvt+0x8c>
 800fcb0:	f1c6 0601 	rsb	r6, r6, #1
 800fcb4:	f8ca 6000 	str.w	r6, [sl]
 800fcb8:	f8da 3000 	ldr.w	r3, [sl]
 800fcbc:	4499      	add	r9, r3
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	f7f0 ff2f 	bl	8000b28 <__aeabi_dcmpeq>
 800fcca:	b108      	cbz	r0, 800fcd0 <__cvt+0xa4>
 800fccc:	f8cd 900c 	str.w	r9, [sp, #12]
 800fcd0:	2230      	movs	r2, #48	; 0x30
 800fcd2:	9b03      	ldr	r3, [sp, #12]
 800fcd4:	454b      	cmp	r3, r9
 800fcd6:	d307      	bcc.n	800fce8 <__cvt+0xbc>
 800fcd8:	9b03      	ldr	r3, [sp, #12]
 800fcda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcdc:	1bdb      	subs	r3, r3, r7
 800fcde:	4638      	mov	r0, r7
 800fce0:	6013      	str	r3, [r2, #0]
 800fce2:	b004      	add	sp, #16
 800fce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fce8:	1c59      	adds	r1, r3, #1
 800fcea:	9103      	str	r1, [sp, #12]
 800fcec:	701a      	strb	r2, [r3, #0]
 800fcee:	e7f0      	b.n	800fcd2 <__cvt+0xa6>

0800fcf0 <__exponent>:
 800fcf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2900      	cmp	r1, #0
 800fcf6:	bfb8      	it	lt
 800fcf8:	4249      	neglt	r1, r1
 800fcfa:	f803 2b02 	strb.w	r2, [r3], #2
 800fcfe:	bfb4      	ite	lt
 800fd00:	222d      	movlt	r2, #45	; 0x2d
 800fd02:	222b      	movge	r2, #43	; 0x2b
 800fd04:	2909      	cmp	r1, #9
 800fd06:	7042      	strb	r2, [r0, #1]
 800fd08:	dd2a      	ble.n	800fd60 <__exponent+0x70>
 800fd0a:	f10d 0207 	add.w	r2, sp, #7
 800fd0e:	4617      	mov	r7, r2
 800fd10:	260a      	movs	r6, #10
 800fd12:	4694      	mov	ip, r2
 800fd14:	fb91 f5f6 	sdiv	r5, r1, r6
 800fd18:	fb06 1415 	mls	r4, r6, r5, r1
 800fd1c:	3430      	adds	r4, #48	; 0x30
 800fd1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800fd22:	460c      	mov	r4, r1
 800fd24:	2c63      	cmp	r4, #99	; 0x63
 800fd26:	f102 32ff 	add.w	r2, r2, #4294967295
 800fd2a:	4629      	mov	r1, r5
 800fd2c:	dcf1      	bgt.n	800fd12 <__exponent+0x22>
 800fd2e:	3130      	adds	r1, #48	; 0x30
 800fd30:	f1ac 0402 	sub.w	r4, ip, #2
 800fd34:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fd38:	1c41      	adds	r1, r0, #1
 800fd3a:	4622      	mov	r2, r4
 800fd3c:	42ba      	cmp	r2, r7
 800fd3e:	d30a      	bcc.n	800fd56 <__exponent+0x66>
 800fd40:	f10d 0209 	add.w	r2, sp, #9
 800fd44:	eba2 020c 	sub.w	r2, r2, ip
 800fd48:	42bc      	cmp	r4, r7
 800fd4a:	bf88      	it	hi
 800fd4c:	2200      	movhi	r2, #0
 800fd4e:	4413      	add	r3, r2
 800fd50:	1a18      	subs	r0, r3, r0
 800fd52:	b003      	add	sp, #12
 800fd54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd56:	f812 5b01 	ldrb.w	r5, [r2], #1
 800fd5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800fd5e:	e7ed      	b.n	800fd3c <__exponent+0x4c>
 800fd60:	2330      	movs	r3, #48	; 0x30
 800fd62:	3130      	adds	r1, #48	; 0x30
 800fd64:	7083      	strb	r3, [r0, #2]
 800fd66:	70c1      	strb	r1, [r0, #3]
 800fd68:	1d03      	adds	r3, r0, #4
 800fd6a:	e7f1      	b.n	800fd50 <__exponent+0x60>

0800fd6c <_printf_float>:
 800fd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd70:	ed2d 8b02 	vpush	{d8}
 800fd74:	b08d      	sub	sp, #52	; 0x34
 800fd76:	460c      	mov	r4, r1
 800fd78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fd7c:	4616      	mov	r6, r2
 800fd7e:	461f      	mov	r7, r3
 800fd80:	4605      	mov	r5, r0
 800fd82:	f000 fd07 	bl	8010794 <_localeconv_r>
 800fd86:	f8d0 a000 	ldr.w	sl, [r0]
 800fd8a:	4650      	mov	r0, sl
 800fd8c:	f7f0 faa0 	bl	80002d0 <strlen>
 800fd90:	2300      	movs	r3, #0
 800fd92:	930a      	str	r3, [sp, #40]	; 0x28
 800fd94:	6823      	ldr	r3, [r4, #0]
 800fd96:	9305      	str	r3, [sp, #20]
 800fd98:	f8d8 3000 	ldr.w	r3, [r8]
 800fd9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fda0:	3307      	adds	r3, #7
 800fda2:	f023 0307 	bic.w	r3, r3, #7
 800fda6:	f103 0208 	add.w	r2, r3, #8
 800fdaa:	f8c8 2000 	str.w	r2, [r8]
 800fdae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fdb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fdb6:	9307      	str	r3, [sp, #28]
 800fdb8:	f8cd 8018 	str.w	r8, [sp, #24]
 800fdbc:	ee08 0a10 	vmov	s16, r0
 800fdc0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800fdc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdc8:	4b9e      	ldr	r3, [pc, #632]	; (8010044 <_printf_float+0x2d8>)
 800fdca:	f04f 32ff 	mov.w	r2, #4294967295
 800fdce:	f7f0 fedd 	bl	8000b8c <__aeabi_dcmpun>
 800fdd2:	bb88      	cbnz	r0, 800fe38 <_printf_float+0xcc>
 800fdd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdd8:	4b9a      	ldr	r3, [pc, #616]	; (8010044 <_printf_float+0x2d8>)
 800fdda:	f04f 32ff 	mov.w	r2, #4294967295
 800fdde:	f7f0 feb7 	bl	8000b50 <__aeabi_dcmple>
 800fde2:	bb48      	cbnz	r0, 800fe38 <_printf_float+0xcc>
 800fde4:	2200      	movs	r2, #0
 800fde6:	2300      	movs	r3, #0
 800fde8:	4640      	mov	r0, r8
 800fdea:	4649      	mov	r1, r9
 800fdec:	f7f0 fea6 	bl	8000b3c <__aeabi_dcmplt>
 800fdf0:	b110      	cbz	r0, 800fdf8 <_printf_float+0x8c>
 800fdf2:	232d      	movs	r3, #45	; 0x2d
 800fdf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdf8:	4a93      	ldr	r2, [pc, #588]	; (8010048 <_printf_float+0x2dc>)
 800fdfa:	4b94      	ldr	r3, [pc, #592]	; (801004c <_printf_float+0x2e0>)
 800fdfc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fe00:	bf94      	ite	ls
 800fe02:	4690      	movls	r8, r2
 800fe04:	4698      	movhi	r8, r3
 800fe06:	2303      	movs	r3, #3
 800fe08:	6123      	str	r3, [r4, #16]
 800fe0a:	9b05      	ldr	r3, [sp, #20]
 800fe0c:	f023 0304 	bic.w	r3, r3, #4
 800fe10:	6023      	str	r3, [r4, #0]
 800fe12:	f04f 0900 	mov.w	r9, #0
 800fe16:	9700      	str	r7, [sp, #0]
 800fe18:	4633      	mov	r3, r6
 800fe1a:	aa0b      	add	r2, sp, #44	; 0x2c
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	4628      	mov	r0, r5
 800fe20:	f000 f9da 	bl	80101d8 <_printf_common>
 800fe24:	3001      	adds	r0, #1
 800fe26:	f040 8090 	bne.w	800ff4a <_printf_float+0x1de>
 800fe2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2e:	b00d      	add	sp, #52	; 0x34
 800fe30:	ecbd 8b02 	vpop	{d8}
 800fe34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe38:	4642      	mov	r2, r8
 800fe3a:	464b      	mov	r3, r9
 800fe3c:	4640      	mov	r0, r8
 800fe3e:	4649      	mov	r1, r9
 800fe40:	f7f0 fea4 	bl	8000b8c <__aeabi_dcmpun>
 800fe44:	b140      	cbz	r0, 800fe58 <_printf_float+0xec>
 800fe46:	464b      	mov	r3, r9
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	bfbc      	itt	lt
 800fe4c:	232d      	movlt	r3, #45	; 0x2d
 800fe4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe52:	4a7f      	ldr	r2, [pc, #508]	; (8010050 <_printf_float+0x2e4>)
 800fe54:	4b7f      	ldr	r3, [pc, #508]	; (8010054 <_printf_float+0x2e8>)
 800fe56:	e7d1      	b.n	800fdfc <_printf_float+0x90>
 800fe58:	6863      	ldr	r3, [r4, #4]
 800fe5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fe5e:	9206      	str	r2, [sp, #24]
 800fe60:	1c5a      	adds	r2, r3, #1
 800fe62:	d13f      	bne.n	800fee4 <_printf_float+0x178>
 800fe64:	2306      	movs	r3, #6
 800fe66:	6063      	str	r3, [r4, #4]
 800fe68:	9b05      	ldr	r3, [sp, #20]
 800fe6a:	6861      	ldr	r1, [r4, #4]
 800fe6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fe70:	2300      	movs	r3, #0
 800fe72:	9303      	str	r3, [sp, #12]
 800fe74:	ab0a      	add	r3, sp, #40	; 0x28
 800fe76:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fe7a:	ab09      	add	r3, sp, #36	; 0x24
 800fe7c:	ec49 8b10 	vmov	d0, r8, r9
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	6022      	str	r2, [r4, #0]
 800fe84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fe88:	4628      	mov	r0, r5
 800fe8a:	f7ff fecf 	bl	800fc2c <__cvt>
 800fe8e:	9b06      	ldr	r3, [sp, #24]
 800fe90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe92:	2b47      	cmp	r3, #71	; 0x47
 800fe94:	4680      	mov	r8, r0
 800fe96:	d108      	bne.n	800feaa <_printf_float+0x13e>
 800fe98:	1cc8      	adds	r0, r1, #3
 800fe9a:	db02      	blt.n	800fea2 <_printf_float+0x136>
 800fe9c:	6863      	ldr	r3, [r4, #4]
 800fe9e:	4299      	cmp	r1, r3
 800fea0:	dd41      	ble.n	800ff26 <_printf_float+0x1ba>
 800fea2:	f1ab 0302 	sub.w	r3, fp, #2
 800fea6:	fa5f fb83 	uxtb.w	fp, r3
 800feaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800feae:	d820      	bhi.n	800fef2 <_printf_float+0x186>
 800feb0:	3901      	subs	r1, #1
 800feb2:	465a      	mov	r2, fp
 800feb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800feb8:	9109      	str	r1, [sp, #36]	; 0x24
 800feba:	f7ff ff19 	bl	800fcf0 <__exponent>
 800febe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fec0:	1813      	adds	r3, r2, r0
 800fec2:	2a01      	cmp	r2, #1
 800fec4:	4681      	mov	r9, r0
 800fec6:	6123      	str	r3, [r4, #16]
 800fec8:	dc02      	bgt.n	800fed0 <_printf_float+0x164>
 800feca:	6822      	ldr	r2, [r4, #0]
 800fecc:	07d2      	lsls	r2, r2, #31
 800fece:	d501      	bpl.n	800fed4 <_printf_float+0x168>
 800fed0:	3301      	adds	r3, #1
 800fed2:	6123      	str	r3, [r4, #16]
 800fed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d09c      	beq.n	800fe16 <_printf_float+0xaa>
 800fedc:	232d      	movs	r3, #45	; 0x2d
 800fede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fee2:	e798      	b.n	800fe16 <_printf_float+0xaa>
 800fee4:	9a06      	ldr	r2, [sp, #24]
 800fee6:	2a47      	cmp	r2, #71	; 0x47
 800fee8:	d1be      	bne.n	800fe68 <_printf_float+0xfc>
 800feea:	2b00      	cmp	r3, #0
 800feec:	d1bc      	bne.n	800fe68 <_printf_float+0xfc>
 800feee:	2301      	movs	r3, #1
 800fef0:	e7b9      	b.n	800fe66 <_printf_float+0xfa>
 800fef2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fef6:	d118      	bne.n	800ff2a <_printf_float+0x1be>
 800fef8:	2900      	cmp	r1, #0
 800fefa:	6863      	ldr	r3, [r4, #4]
 800fefc:	dd0b      	ble.n	800ff16 <_printf_float+0x1aa>
 800fefe:	6121      	str	r1, [r4, #16]
 800ff00:	b913      	cbnz	r3, 800ff08 <_printf_float+0x19c>
 800ff02:	6822      	ldr	r2, [r4, #0]
 800ff04:	07d0      	lsls	r0, r2, #31
 800ff06:	d502      	bpl.n	800ff0e <_printf_float+0x1a2>
 800ff08:	3301      	adds	r3, #1
 800ff0a:	440b      	add	r3, r1
 800ff0c:	6123      	str	r3, [r4, #16]
 800ff0e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ff10:	f04f 0900 	mov.w	r9, #0
 800ff14:	e7de      	b.n	800fed4 <_printf_float+0x168>
 800ff16:	b913      	cbnz	r3, 800ff1e <_printf_float+0x1b2>
 800ff18:	6822      	ldr	r2, [r4, #0]
 800ff1a:	07d2      	lsls	r2, r2, #31
 800ff1c:	d501      	bpl.n	800ff22 <_printf_float+0x1b6>
 800ff1e:	3302      	adds	r3, #2
 800ff20:	e7f4      	b.n	800ff0c <_printf_float+0x1a0>
 800ff22:	2301      	movs	r3, #1
 800ff24:	e7f2      	b.n	800ff0c <_printf_float+0x1a0>
 800ff26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ff2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff2c:	4299      	cmp	r1, r3
 800ff2e:	db05      	blt.n	800ff3c <_printf_float+0x1d0>
 800ff30:	6823      	ldr	r3, [r4, #0]
 800ff32:	6121      	str	r1, [r4, #16]
 800ff34:	07d8      	lsls	r0, r3, #31
 800ff36:	d5ea      	bpl.n	800ff0e <_printf_float+0x1a2>
 800ff38:	1c4b      	adds	r3, r1, #1
 800ff3a:	e7e7      	b.n	800ff0c <_printf_float+0x1a0>
 800ff3c:	2900      	cmp	r1, #0
 800ff3e:	bfd4      	ite	le
 800ff40:	f1c1 0202 	rsble	r2, r1, #2
 800ff44:	2201      	movgt	r2, #1
 800ff46:	4413      	add	r3, r2
 800ff48:	e7e0      	b.n	800ff0c <_printf_float+0x1a0>
 800ff4a:	6823      	ldr	r3, [r4, #0]
 800ff4c:	055a      	lsls	r2, r3, #21
 800ff4e:	d407      	bmi.n	800ff60 <_printf_float+0x1f4>
 800ff50:	6923      	ldr	r3, [r4, #16]
 800ff52:	4642      	mov	r2, r8
 800ff54:	4631      	mov	r1, r6
 800ff56:	4628      	mov	r0, r5
 800ff58:	47b8      	blx	r7
 800ff5a:	3001      	adds	r0, #1
 800ff5c:	d12c      	bne.n	800ffb8 <_printf_float+0x24c>
 800ff5e:	e764      	b.n	800fe2a <_printf_float+0xbe>
 800ff60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ff64:	f240 80e0 	bls.w	8010128 <_printf_float+0x3bc>
 800ff68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	2300      	movs	r3, #0
 800ff70:	f7f0 fdda 	bl	8000b28 <__aeabi_dcmpeq>
 800ff74:	2800      	cmp	r0, #0
 800ff76:	d034      	beq.n	800ffe2 <_printf_float+0x276>
 800ff78:	4a37      	ldr	r2, [pc, #220]	; (8010058 <_printf_float+0x2ec>)
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	4631      	mov	r1, r6
 800ff7e:	4628      	mov	r0, r5
 800ff80:	47b8      	blx	r7
 800ff82:	3001      	adds	r0, #1
 800ff84:	f43f af51 	beq.w	800fe2a <_printf_float+0xbe>
 800ff88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	db02      	blt.n	800ff96 <_printf_float+0x22a>
 800ff90:	6823      	ldr	r3, [r4, #0]
 800ff92:	07d8      	lsls	r0, r3, #31
 800ff94:	d510      	bpl.n	800ffb8 <_printf_float+0x24c>
 800ff96:	ee18 3a10 	vmov	r3, s16
 800ff9a:	4652      	mov	r2, sl
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	47b8      	blx	r7
 800ffa2:	3001      	adds	r0, #1
 800ffa4:	f43f af41 	beq.w	800fe2a <_printf_float+0xbe>
 800ffa8:	f04f 0800 	mov.w	r8, #0
 800ffac:	f104 091a 	add.w	r9, r4, #26
 800ffb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffb2:	3b01      	subs	r3, #1
 800ffb4:	4543      	cmp	r3, r8
 800ffb6:	dc09      	bgt.n	800ffcc <_printf_float+0x260>
 800ffb8:	6823      	ldr	r3, [r4, #0]
 800ffba:	079b      	lsls	r3, r3, #30
 800ffbc:	f100 8107 	bmi.w	80101ce <_printf_float+0x462>
 800ffc0:	68e0      	ldr	r0, [r4, #12]
 800ffc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffc4:	4298      	cmp	r0, r3
 800ffc6:	bfb8      	it	lt
 800ffc8:	4618      	movlt	r0, r3
 800ffca:	e730      	b.n	800fe2e <_printf_float+0xc2>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	464a      	mov	r2, r9
 800ffd0:	4631      	mov	r1, r6
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	47b8      	blx	r7
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	f43f af27 	beq.w	800fe2a <_printf_float+0xbe>
 800ffdc:	f108 0801 	add.w	r8, r8, #1
 800ffe0:	e7e6      	b.n	800ffb0 <_printf_float+0x244>
 800ffe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	dc39      	bgt.n	801005c <_printf_float+0x2f0>
 800ffe8:	4a1b      	ldr	r2, [pc, #108]	; (8010058 <_printf_float+0x2ec>)
 800ffea:	2301      	movs	r3, #1
 800ffec:	4631      	mov	r1, r6
 800ffee:	4628      	mov	r0, r5
 800fff0:	47b8      	blx	r7
 800fff2:	3001      	adds	r0, #1
 800fff4:	f43f af19 	beq.w	800fe2a <_printf_float+0xbe>
 800fff8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800fffc:	4313      	orrs	r3, r2
 800fffe:	d102      	bne.n	8010006 <_printf_float+0x29a>
 8010000:	6823      	ldr	r3, [r4, #0]
 8010002:	07d9      	lsls	r1, r3, #31
 8010004:	d5d8      	bpl.n	800ffb8 <_printf_float+0x24c>
 8010006:	ee18 3a10 	vmov	r3, s16
 801000a:	4652      	mov	r2, sl
 801000c:	4631      	mov	r1, r6
 801000e:	4628      	mov	r0, r5
 8010010:	47b8      	blx	r7
 8010012:	3001      	adds	r0, #1
 8010014:	f43f af09 	beq.w	800fe2a <_printf_float+0xbe>
 8010018:	f04f 0900 	mov.w	r9, #0
 801001c:	f104 0a1a 	add.w	sl, r4, #26
 8010020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010022:	425b      	negs	r3, r3
 8010024:	454b      	cmp	r3, r9
 8010026:	dc01      	bgt.n	801002c <_printf_float+0x2c0>
 8010028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801002a:	e792      	b.n	800ff52 <_printf_float+0x1e6>
 801002c:	2301      	movs	r3, #1
 801002e:	4652      	mov	r2, sl
 8010030:	4631      	mov	r1, r6
 8010032:	4628      	mov	r0, r5
 8010034:	47b8      	blx	r7
 8010036:	3001      	adds	r0, #1
 8010038:	f43f aef7 	beq.w	800fe2a <_printf_float+0xbe>
 801003c:	f109 0901 	add.w	r9, r9, #1
 8010040:	e7ee      	b.n	8010020 <_printf_float+0x2b4>
 8010042:	bf00      	nop
 8010044:	7fefffff 	.word	0x7fefffff
 8010048:	08014921 	.word	0x08014921
 801004c:	08014925 	.word	0x08014925
 8010050:	08014929 	.word	0x08014929
 8010054:	0801492d 	.word	0x0801492d
 8010058:	08014931 	.word	0x08014931
 801005c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801005e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010060:	429a      	cmp	r2, r3
 8010062:	bfa8      	it	ge
 8010064:	461a      	movge	r2, r3
 8010066:	2a00      	cmp	r2, #0
 8010068:	4691      	mov	r9, r2
 801006a:	dc37      	bgt.n	80100dc <_printf_float+0x370>
 801006c:	f04f 0b00 	mov.w	fp, #0
 8010070:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010074:	f104 021a 	add.w	r2, r4, #26
 8010078:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801007a:	9305      	str	r3, [sp, #20]
 801007c:	eba3 0309 	sub.w	r3, r3, r9
 8010080:	455b      	cmp	r3, fp
 8010082:	dc33      	bgt.n	80100ec <_printf_float+0x380>
 8010084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010088:	429a      	cmp	r2, r3
 801008a:	db3b      	blt.n	8010104 <_printf_float+0x398>
 801008c:	6823      	ldr	r3, [r4, #0]
 801008e:	07da      	lsls	r2, r3, #31
 8010090:	d438      	bmi.n	8010104 <_printf_float+0x398>
 8010092:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010096:	eba2 0903 	sub.w	r9, r2, r3
 801009a:	9b05      	ldr	r3, [sp, #20]
 801009c:	1ad2      	subs	r2, r2, r3
 801009e:	4591      	cmp	r9, r2
 80100a0:	bfa8      	it	ge
 80100a2:	4691      	movge	r9, r2
 80100a4:	f1b9 0f00 	cmp.w	r9, #0
 80100a8:	dc35      	bgt.n	8010116 <_printf_float+0x3aa>
 80100aa:	f04f 0800 	mov.w	r8, #0
 80100ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100b2:	f104 0a1a 	add.w	sl, r4, #26
 80100b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100ba:	1a9b      	subs	r3, r3, r2
 80100bc:	eba3 0309 	sub.w	r3, r3, r9
 80100c0:	4543      	cmp	r3, r8
 80100c2:	f77f af79 	ble.w	800ffb8 <_printf_float+0x24c>
 80100c6:	2301      	movs	r3, #1
 80100c8:	4652      	mov	r2, sl
 80100ca:	4631      	mov	r1, r6
 80100cc:	4628      	mov	r0, r5
 80100ce:	47b8      	blx	r7
 80100d0:	3001      	adds	r0, #1
 80100d2:	f43f aeaa 	beq.w	800fe2a <_printf_float+0xbe>
 80100d6:	f108 0801 	add.w	r8, r8, #1
 80100da:	e7ec      	b.n	80100b6 <_printf_float+0x34a>
 80100dc:	4613      	mov	r3, r2
 80100de:	4631      	mov	r1, r6
 80100e0:	4642      	mov	r2, r8
 80100e2:	4628      	mov	r0, r5
 80100e4:	47b8      	blx	r7
 80100e6:	3001      	adds	r0, #1
 80100e8:	d1c0      	bne.n	801006c <_printf_float+0x300>
 80100ea:	e69e      	b.n	800fe2a <_printf_float+0xbe>
 80100ec:	2301      	movs	r3, #1
 80100ee:	4631      	mov	r1, r6
 80100f0:	4628      	mov	r0, r5
 80100f2:	9205      	str	r2, [sp, #20]
 80100f4:	47b8      	blx	r7
 80100f6:	3001      	adds	r0, #1
 80100f8:	f43f ae97 	beq.w	800fe2a <_printf_float+0xbe>
 80100fc:	9a05      	ldr	r2, [sp, #20]
 80100fe:	f10b 0b01 	add.w	fp, fp, #1
 8010102:	e7b9      	b.n	8010078 <_printf_float+0x30c>
 8010104:	ee18 3a10 	vmov	r3, s16
 8010108:	4652      	mov	r2, sl
 801010a:	4631      	mov	r1, r6
 801010c:	4628      	mov	r0, r5
 801010e:	47b8      	blx	r7
 8010110:	3001      	adds	r0, #1
 8010112:	d1be      	bne.n	8010092 <_printf_float+0x326>
 8010114:	e689      	b.n	800fe2a <_printf_float+0xbe>
 8010116:	9a05      	ldr	r2, [sp, #20]
 8010118:	464b      	mov	r3, r9
 801011a:	4442      	add	r2, r8
 801011c:	4631      	mov	r1, r6
 801011e:	4628      	mov	r0, r5
 8010120:	47b8      	blx	r7
 8010122:	3001      	adds	r0, #1
 8010124:	d1c1      	bne.n	80100aa <_printf_float+0x33e>
 8010126:	e680      	b.n	800fe2a <_printf_float+0xbe>
 8010128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801012a:	2a01      	cmp	r2, #1
 801012c:	dc01      	bgt.n	8010132 <_printf_float+0x3c6>
 801012e:	07db      	lsls	r3, r3, #31
 8010130:	d53a      	bpl.n	80101a8 <_printf_float+0x43c>
 8010132:	2301      	movs	r3, #1
 8010134:	4642      	mov	r2, r8
 8010136:	4631      	mov	r1, r6
 8010138:	4628      	mov	r0, r5
 801013a:	47b8      	blx	r7
 801013c:	3001      	adds	r0, #1
 801013e:	f43f ae74 	beq.w	800fe2a <_printf_float+0xbe>
 8010142:	ee18 3a10 	vmov	r3, s16
 8010146:	4652      	mov	r2, sl
 8010148:	4631      	mov	r1, r6
 801014a:	4628      	mov	r0, r5
 801014c:	47b8      	blx	r7
 801014e:	3001      	adds	r0, #1
 8010150:	f43f ae6b 	beq.w	800fe2a <_printf_float+0xbe>
 8010154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010158:	2200      	movs	r2, #0
 801015a:	2300      	movs	r3, #0
 801015c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010160:	f7f0 fce2 	bl	8000b28 <__aeabi_dcmpeq>
 8010164:	b9d8      	cbnz	r0, 801019e <_printf_float+0x432>
 8010166:	f10a 33ff 	add.w	r3, sl, #4294967295
 801016a:	f108 0201 	add.w	r2, r8, #1
 801016e:	4631      	mov	r1, r6
 8010170:	4628      	mov	r0, r5
 8010172:	47b8      	blx	r7
 8010174:	3001      	adds	r0, #1
 8010176:	d10e      	bne.n	8010196 <_printf_float+0x42a>
 8010178:	e657      	b.n	800fe2a <_printf_float+0xbe>
 801017a:	2301      	movs	r3, #1
 801017c:	4652      	mov	r2, sl
 801017e:	4631      	mov	r1, r6
 8010180:	4628      	mov	r0, r5
 8010182:	47b8      	blx	r7
 8010184:	3001      	adds	r0, #1
 8010186:	f43f ae50 	beq.w	800fe2a <_printf_float+0xbe>
 801018a:	f108 0801 	add.w	r8, r8, #1
 801018e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010190:	3b01      	subs	r3, #1
 8010192:	4543      	cmp	r3, r8
 8010194:	dcf1      	bgt.n	801017a <_printf_float+0x40e>
 8010196:	464b      	mov	r3, r9
 8010198:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801019c:	e6da      	b.n	800ff54 <_printf_float+0x1e8>
 801019e:	f04f 0800 	mov.w	r8, #0
 80101a2:	f104 0a1a 	add.w	sl, r4, #26
 80101a6:	e7f2      	b.n	801018e <_printf_float+0x422>
 80101a8:	2301      	movs	r3, #1
 80101aa:	4642      	mov	r2, r8
 80101ac:	e7df      	b.n	801016e <_printf_float+0x402>
 80101ae:	2301      	movs	r3, #1
 80101b0:	464a      	mov	r2, r9
 80101b2:	4631      	mov	r1, r6
 80101b4:	4628      	mov	r0, r5
 80101b6:	47b8      	blx	r7
 80101b8:	3001      	adds	r0, #1
 80101ba:	f43f ae36 	beq.w	800fe2a <_printf_float+0xbe>
 80101be:	f108 0801 	add.w	r8, r8, #1
 80101c2:	68e3      	ldr	r3, [r4, #12]
 80101c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80101c6:	1a5b      	subs	r3, r3, r1
 80101c8:	4543      	cmp	r3, r8
 80101ca:	dcf0      	bgt.n	80101ae <_printf_float+0x442>
 80101cc:	e6f8      	b.n	800ffc0 <_printf_float+0x254>
 80101ce:	f04f 0800 	mov.w	r8, #0
 80101d2:	f104 0919 	add.w	r9, r4, #25
 80101d6:	e7f4      	b.n	80101c2 <_printf_float+0x456>

080101d8 <_printf_common>:
 80101d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101dc:	4616      	mov	r6, r2
 80101de:	4699      	mov	r9, r3
 80101e0:	688a      	ldr	r2, [r1, #8]
 80101e2:	690b      	ldr	r3, [r1, #16]
 80101e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101e8:	4293      	cmp	r3, r2
 80101ea:	bfb8      	it	lt
 80101ec:	4613      	movlt	r3, r2
 80101ee:	6033      	str	r3, [r6, #0]
 80101f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101f4:	4607      	mov	r7, r0
 80101f6:	460c      	mov	r4, r1
 80101f8:	b10a      	cbz	r2, 80101fe <_printf_common+0x26>
 80101fa:	3301      	adds	r3, #1
 80101fc:	6033      	str	r3, [r6, #0]
 80101fe:	6823      	ldr	r3, [r4, #0]
 8010200:	0699      	lsls	r1, r3, #26
 8010202:	bf42      	ittt	mi
 8010204:	6833      	ldrmi	r3, [r6, #0]
 8010206:	3302      	addmi	r3, #2
 8010208:	6033      	strmi	r3, [r6, #0]
 801020a:	6825      	ldr	r5, [r4, #0]
 801020c:	f015 0506 	ands.w	r5, r5, #6
 8010210:	d106      	bne.n	8010220 <_printf_common+0x48>
 8010212:	f104 0a19 	add.w	sl, r4, #25
 8010216:	68e3      	ldr	r3, [r4, #12]
 8010218:	6832      	ldr	r2, [r6, #0]
 801021a:	1a9b      	subs	r3, r3, r2
 801021c:	42ab      	cmp	r3, r5
 801021e:	dc26      	bgt.n	801026e <_printf_common+0x96>
 8010220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010224:	1e13      	subs	r3, r2, #0
 8010226:	6822      	ldr	r2, [r4, #0]
 8010228:	bf18      	it	ne
 801022a:	2301      	movne	r3, #1
 801022c:	0692      	lsls	r2, r2, #26
 801022e:	d42b      	bmi.n	8010288 <_printf_common+0xb0>
 8010230:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010234:	4649      	mov	r1, r9
 8010236:	4638      	mov	r0, r7
 8010238:	47c0      	blx	r8
 801023a:	3001      	adds	r0, #1
 801023c:	d01e      	beq.n	801027c <_printf_common+0xa4>
 801023e:	6823      	ldr	r3, [r4, #0]
 8010240:	6922      	ldr	r2, [r4, #16]
 8010242:	f003 0306 	and.w	r3, r3, #6
 8010246:	2b04      	cmp	r3, #4
 8010248:	bf02      	ittt	eq
 801024a:	68e5      	ldreq	r5, [r4, #12]
 801024c:	6833      	ldreq	r3, [r6, #0]
 801024e:	1aed      	subeq	r5, r5, r3
 8010250:	68a3      	ldr	r3, [r4, #8]
 8010252:	bf0c      	ite	eq
 8010254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010258:	2500      	movne	r5, #0
 801025a:	4293      	cmp	r3, r2
 801025c:	bfc4      	itt	gt
 801025e:	1a9b      	subgt	r3, r3, r2
 8010260:	18ed      	addgt	r5, r5, r3
 8010262:	2600      	movs	r6, #0
 8010264:	341a      	adds	r4, #26
 8010266:	42b5      	cmp	r5, r6
 8010268:	d11a      	bne.n	80102a0 <_printf_common+0xc8>
 801026a:	2000      	movs	r0, #0
 801026c:	e008      	b.n	8010280 <_printf_common+0xa8>
 801026e:	2301      	movs	r3, #1
 8010270:	4652      	mov	r2, sl
 8010272:	4649      	mov	r1, r9
 8010274:	4638      	mov	r0, r7
 8010276:	47c0      	blx	r8
 8010278:	3001      	adds	r0, #1
 801027a:	d103      	bne.n	8010284 <_printf_common+0xac>
 801027c:	f04f 30ff 	mov.w	r0, #4294967295
 8010280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010284:	3501      	adds	r5, #1
 8010286:	e7c6      	b.n	8010216 <_printf_common+0x3e>
 8010288:	18e1      	adds	r1, r4, r3
 801028a:	1c5a      	adds	r2, r3, #1
 801028c:	2030      	movs	r0, #48	; 0x30
 801028e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010292:	4422      	add	r2, r4
 8010294:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010298:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801029c:	3302      	adds	r3, #2
 801029e:	e7c7      	b.n	8010230 <_printf_common+0x58>
 80102a0:	2301      	movs	r3, #1
 80102a2:	4622      	mov	r2, r4
 80102a4:	4649      	mov	r1, r9
 80102a6:	4638      	mov	r0, r7
 80102a8:	47c0      	blx	r8
 80102aa:	3001      	adds	r0, #1
 80102ac:	d0e6      	beq.n	801027c <_printf_common+0xa4>
 80102ae:	3601      	adds	r6, #1
 80102b0:	e7d9      	b.n	8010266 <_printf_common+0x8e>
	...

080102b4 <_printf_i>:
 80102b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102b8:	7e0f      	ldrb	r7, [r1, #24]
 80102ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80102bc:	2f78      	cmp	r7, #120	; 0x78
 80102be:	4691      	mov	r9, r2
 80102c0:	4680      	mov	r8, r0
 80102c2:	460c      	mov	r4, r1
 80102c4:	469a      	mov	sl, r3
 80102c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80102ca:	d807      	bhi.n	80102dc <_printf_i+0x28>
 80102cc:	2f62      	cmp	r7, #98	; 0x62
 80102ce:	d80a      	bhi.n	80102e6 <_printf_i+0x32>
 80102d0:	2f00      	cmp	r7, #0
 80102d2:	f000 80d4 	beq.w	801047e <_printf_i+0x1ca>
 80102d6:	2f58      	cmp	r7, #88	; 0x58
 80102d8:	f000 80c0 	beq.w	801045c <_printf_i+0x1a8>
 80102dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80102e4:	e03a      	b.n	801035c <_printf_i+0xa8>
 80102e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80102ea:	2b15      	cmp	r3, #21
 80102ec:	d8f6      	bhi.n	80102dc <_printf_i+0x28>
 80102ee:	a101      	add	r1, pc, #4	; (adr r1, 80102f4 <_printf_i+0x40>)
 80102f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80102f4:	0801034d 	.word	0x0801034d
 80102f8:	08010361 	.word	0x08010361
 80102fc:	080102dd 	.word	0x080102dd
 8010300:	080102dd 	.word	0x080102dd
 8010304:	080102dd 	.word	0x080102dd
 8010308:	080102dd 	.word	0x080102dd
 801030c:	08010361 	.word	0x08010361
 8010310:	080102dd 	.word	0x080102dd
 8010314:	080102dd 	.word	0x080102dd
 8010318:	080102dd 	.word	0x080102dd
 801031c:	080102dd 	.word	0x080102dd
 8010320:	08010465 	.word	0x08010465
 8010324:	0801038d 	.word	0x0801038d
 8010328:	0801041f 	.word	0x0801041f
 801032c:	080102dd 	.word	0x080102dd
 8010330:	080102dd 	.word	0x080102dd
 8010334:	08010487 	.word	0x08010487
 8010338:	080102dd 	.word	0x080102dd
 801033c:	0801038d 	.word	0x0801038d
 8010340:	080102dd 	.word	0x080102dd
 8010344:	080102dd 	.word	0x080102dd
 8010348:	08010427 	.word	0x08010427
 801034c:	682b      	ldr	r3, [r5, #0]
 801034e:	1d1a      	adds	r2, r3, #4
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	602a      	str	r2, [r5, #0]
 8010354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801035c:	2301      	movs	r3, #1
 801035e:	e09f      	b.n	80104a0 <_printf_i+0x1ec>
 8010360:	6820      	ldr	r0, [r4, #0]
 8010362:	682b      	ldr	r3, [r5, #0]
 8010364:	0607      	lsls	r7, r0, #24
 8010366:	f103 0104 	add.w	r1, r3, #4
 801036a:	6029      	str	r1, [r5, #0]
 801036c:	d501      	bpl.n	8010372 <_printf_i+0xbe>
 801036e:	681e      	ldr	r6, [r3, #0]
 8010370:	e003      	b.n	801037a <_printf_i+0xc6>
 8010372:	0646      	lsls	r6, r0, #25
 8010374:	d5fb      	bpl.n	801036e <_printf_i+0xba>
 8010376:	f9b3 6000 	ldrsh.w	r6, [r3]
 801037a:	2e00      	cmp	r6, #0
 801037c:	da03      	bge.n	8010386 <_printf_i+0xd2>
 801037e:	232d      	movs	r3, #45	; 0x2d
 8010380:	4276      	negs	r6, r6
 8010382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010386:	485a      	ldr	r0, [pc, #360]	; (80104f0 <_printf_i+0x23c>)
 8010388:	230a      	movs	r3, #10
 801038a:	e012      	b.n	80103b2 <_printf_i+0xfe>
 801038c:	682b      	ldr	r3, [r5, #0]
 801038e:	6820      	ldr	r0, [r4, #0]
 8010390:	1d19      	adds	r1, r3, #4
 8010392:	6029      	str	r1, [r5, #0]
 8010394:	0605      	lsls	r5, r0, #24
 8010396:	d501      	bpl.n	801039c <_printf_i+0xe8>
 8010398:	681e      	ldr	r6, [r3, #0]
 801039a:	e002      	b.n	80103a2 <_printf_i+0xee>
 801039c:	0641      	lsls	r1, r0, #25
 801039e:	d5fb      	bpl.n	8010398 <_printf_i+0xe4>
 80103a0:	881e      	ldrh	r6, [r3, #0]
 80103a2:	4853      	ldr	r0, [pc, #332]	; (80104f0 <_printf_i+0x23c>)
 80103a4:	2f6f      	cmp	r7, #111	; 0x6f
 80103a6:	bf0c      	ite	eq
 80103a8:	2308      	moveq	r3, #8
 80103aa:	230a      	movne	r3, #10
 80103ac:	2100      	movs	r1, #0
 80103ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103b2:	6865      	ldr	r5, [r4, #4]
 80103b4:	60a5      	str	r5, [r4, #8]
 80103b6:	2d00      	cmp	r5, #0
 80103b8:	bfa2      	ittt	ge
 80103ba:	6821      	ldrge	r1, [r4, #0]
 80103bc:	f021 0104 	bicge.w	r1, r1, #4
 80103c0:	6021      	strge	r1, [r4, #0]
 80103c2:	b90e      	cbnz	r6, 80103c8 <_printf_i+0x114>
 80103c4:	2d00      	cmp	r5, #0
 80103c6:	d04b      	beq.n	8010460 <_printf_i+0x1ac>
 80103c8:	4615      	mov	r5, r2
 80103ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80103ce:	fb03 6711 	mls	r7, r3, r1, r6
 80103d2:	5dc7      	ldrb	r7, [r0, r7]
 80103d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80103d8:	4637      	mov	r7, r6
 80103da:	42bb      	cmp	r3, r7
 80103dc:	460e      	mov	r6, r1
 80103de:	d9f4      	bls.n	80103ca <_printf_i+0x116>
 80103e0:	2b08      	cmp	r3, #8
 80103e2:	d10b      	bne.n	80103fc <_printf_i+0x148>
 80103e4:	6823      	ldr	r3, [r4, #0]
 80103e6:	07de      	lsls	r6, r3, #31
 80103e8:	d508      	bpl.n	80103fc <_printf_i+0x148>
 80103ea:	6923      	ldr	r3, [r4, #16]
 80103ec:	6861      	ldr	r1, [r4, #4]
 80103ee:	4299      	cmp	r1, r3
 80103f0:	bfde      	ittt	le
 80103f2:	2330      	movle	r3, #48	; 0x30
 80103f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80103f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80103fc:	1b52      	subs	r2, r2, r5
 80103fe:	6122      	str	r2, [r4, #16]
 8010400:	f8cd a000 	str.w	sl, [sp]
 8010404:	464b      	mov	r3, r9
 8010406:	aa03      	add	r2, sp, #12
 8010408:	4621      	mov	r1, r4
 801040a:	4640      	mov	r0, r8
 801040c:	f7ff fee4 	bl	80101d8 <_printf_common>
 8010410:	3001      	adds	r0, #1
 8010412:	d14a      	bne.n	80104aa <_printf_i+0x1f6>
 8010414:	f04f 30ff 	mov.w	r0, #4294967295
 8010418:	b004      	add	sp, #16
 801041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801041e:	6823      	ldr	r3, [r4, #0]
 8010420:	f043 0320 	orr.w	r3, r3, #32
 8010424:	6023      	str	r3, [r4, #0]
 8010426:	4833      	ldr	r0, [pc, #204]	; (80104f4 <_printf_i+0x240>)
 8010428:	2778      	movs	r7, #120	; 0x78
 801042a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801042e:	6823      	ldr	r3, [r4, #0]
 8010430:	6829      	ldr	r1, [r5, #0]
 8010432:	061f      	lsls	r7, r3, #24
 8010434:	f851 6b04 	ldr.w	r6, [r1], #4
 8010438:	d402      	bmi.n	8010440 <_printf_i+0x18c>
 801043a:	065f      	lsls	r7, r3, #25
 801043c:	bf48      	it	mi
 801043e:	b2b6      	uxthmi	r6, r6
 8010440:	07df      	lsls	r7, r3, #31
 8010442:	bf48      	it	mi
 8010444:	f043 0320 	orrmi.w	r3, r3, #32
 8010448:	6029      	str	r1, [r5, #0]
 801044a:	bf48      	it	mi
 801044c:	6023      	strmi	r3, [r4, #0]
 801044e:	b91e      	cbnz	r6, 8010458 <_printf_i+0x1a4>
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	f023 0320 	bic.w	r3, r3, #32
 8010456:	6023      	str	r3, [r4, #0]
 8010458:	2310      	movs	r3, #16
 801045a:	e7a7      	b.n	80103ac <_printf_i+0xf8>
 801045c:	4824      	ldr	r0, [pc, #144]	; (80104f0 <_printf_i+0x23c>)
 801045e:	e7e4      	b.n	801042a <_printf_i+0x176>
 8010460:	4615      	mov	r5, r2
 8010462:	e7bd      	b.n	80103e0 <_printf_i+0x12c>
 8010464:	682b      	ldr	r3, [r5, #0]
 8010466:	6826      	ldr	r6, [r4, #0]
 8010468:	6961      	ldr	r1, [r4, #20]
 801046a:	1d18      	adds	r0, r3, #4
 801046c:	6028      	str	r0, [r5, #0]
 801046e:	0635      	lsls	r5, r6, #24
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	d501      	bpl.n	8010478 <_printf_i+0x1c4>
 8010474:	6019      	str	r1, [r3, #0]
 8010476:	e002      	b.n	801047e <_printf_i+0x1ca>
 8010478:	0670      	lsls	r0, r6, #25
 801047a:	d5fb      	bpl.n	8010474 <_printf_i+0x1c0>
 801047c:	8019      	strh	r1, [r3, #0]
 801047e:	2300      	movs	r3, #0
 8010480:	6123      	str	r3, [r4, #16]
 8010482:	4615      	mov	r5, r2
 8010484:	e7bc      	b.n	8010400 <_printf_i+0x14c>
 8010486:	682b      	ldr	r3, [r5, #0]
 8010488:	1d1a      	adds	r2, r3, #4
 801048a:	602a      	str	r2, [r5, #0]
 801048c:	681d      	ldr	r5, [r3, #0]
 801048e:	6862      	ldr	r2, [r4, #4]
 8010490:	2100      	movs	r1, #0
 8010492:	4628      	mov	r0, r5
 8010494:	f7ef fecc 	bl	8000230 <memchr>
 8010498:	b108      	cbz	r0, 801049e <_printf_i+0x1ea>
 801049a:	1b40      	subs	r0, r0, r5
 801049c:	6060      	str	r0, [r4, #4]
 801049e:	6863      	ldr	r3, [r4, #4]
 80104a0:	6123      	str	r3, [r4, #16]
 80104a2:	2300      	movs	r3, #0
 80104a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104a8:	e7aa      	b.n	8010400 <_printf_i+0x14c>
 80104aa:	6923      	ldr	r3, [r4, #16]
 80104ac:	462a      	mov	r2, r5
 80104ae:	4649      	mov	r1, r9
 80104b0:	4640      	mov	r0, r8
 80104b2:	47d0      	blx	sl
 80104b4:	3001      	adds	r0, #1
 80104b6:	d0ad      	beq.n	8010414 <_printf_i+0x160>
 80104b8:	6823      	ldr	r3, [r4, #0]
 80104ba:	079b      	lsls	r3, r3, #30
 80104bc:	d413      	bmi.n	80104e6 <_printf_i+0x232>
 80104be:	68e0      	ldr	r0, [r4, #12]
 80104c0:	9b03      	ldr	r3, [sp, #12]
 80104c2:	4298      	cmp	r0, r3
 80104c4:	bfb8      	it	lt
 80104c6:	4618      	movlt	r0, r3
 80104c8:	e7a6      	b.n	8010418 <_printf_i+0x164>
 80104ca:	2301      	movs	r3, #1
 80104cc:	4632      	mov	r2, r6
 80104ce:	4649      	mov	r1, r9
 80104d0:	4640      	mov	r0, r8
 80104d2:	47d0      	blx	sl
 80104d4:	3001      	adds	r0, #1
 80104d6:	d09d      	beq.n	8010414 <_printf_i+0x160>
 80104d8:	3501      	adds	r5, #1
 80104da:	68e3      	ldr	r3, [r4, #12]
 80104dc:	9903      	ldr	r1, [sp, #12]
 80104de:	1a5b      	subs	r3, r3, r1
 80104e0:	42ab      	cmp	r3, r5
 80104e2:	dcf2      	bgt.n	80104ca <_printf_i+0x216>
 80104e4:	e7eb      	b.n	80104be <_printf_i+0x20a>
 80104e6:	2500      	movs	r5, #0
 80104e8:	f104 0619 	add.w	r6, r4, #25
 80104ec:	e7f5      	b.n	80104da <_printf_i+0x226>
 80104ee:	bf00      	nop
 80104f0:	08014933 	.word	0x08014933
 80104f4:	08014944 	.word	0x08014944

080104f8 <std>:
 80104f8:	2300      	movs	r3, #0
 80104fa:	b510      	push	{r4, lr}
 80104fc:	4604      	mov	r4, r0
 80104fe:	e9c0 3300 	strd	r3, r3, [r0]
 8010502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010506:	6083      	str	r3, [r0, #8]
 8010508:	8181      	strh	r1, [r0, #12]
 801050a:	6643      	str	r3, [r0, #100]	; 0x64
 801050c:	81c2      	strh	r2, [r0, #14]
 801050e:	6183      	str	r3, [r0, #24]
 8010510:	4619      	mov	r1, r3
 8010512:	2208      	movs	r2, #8
 8010514:	305c      	adds	r0, #92	; 0x5c
 8010516:	f000 f935 	bl	8010784 <memset>
 801051a:	4b0d      	ldr	r3, [pc, #52]	; (8010550 <std+0x58>)
 801051c:	6263      	str	r3, [r4, #36]	; 0x24
 801051e:	4b0d      	ldr	r3, [pc, #52]	; (8010554 <std+0x5c>)
 8010520:	62a3      	str	r3, [r4, #40]	; 0x28
 8010522:	4b0d      	ldr	r3, [pc, #52]	; (8010558 <std+0x60>)
 8010524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010526:	4b0d      	ldr	r3, [pc, #52]	; (801055c <std+0x64>)
 8010528:	6323      	str	r3, [r4, #48]	; 0x30
 801052a:	4b0d      	ldr	r3, [pc, #52]	; (8010560 <std+0x68>)
 801052c:	6224      	str	r4, [r4, #32]
 801052e:	429c      	cmp	r4, r3
 8010530:	d006      	beq.n	8010540 <std+0x48>
 8010532:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010536:	4294      	cmp	r4, r2
 8010538:	d002      	beq.n	8010540 <std+0x48>
 801053a:	33d0      	adds	r3, #208	; 0xd0
 801053c:	429c      	cmp	r4, r3
 801053e:	d105      	bne.n	801054c <std+0x54>
 8010540:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010548:	f000 b998 	b.w	801087c <__retarget_lock_init_recursive>
 801054c:	bd10      	pop	{r4, pc}
 801054e:	bf00      	nop
 8010550:	080106bd 	.word	0x080106bd
 8010554:	080106df 	.word	0x080106df
 8010558:	08010717 	.word	0x08010717
 801055c:	0801073b 	.word	0x0801073b
 8010560:	2000b72c 	.word	0x2000b72c

08010564 <stdio_exit_handler>:
 8010564:	4a02      	ldr	r2, [pc, #8]	; (8010570 <stdio_exit_handler+0xc>)
 8010566:	4903      	ldr	r1, [pc, #12]	; (8010574 <stdio_exit_handler+0x10>)
 8010568:	4803      	ldr	r0, [pc, #12]	; (8010578 <stdio_exit_handler+0x14>)
 801056a:	f000 b869 	b.w	8010640 <_fwalk_sglue>
 801056e:	bf00      	nop
 8010570:	20001d30 	.word	0x20001d30
 8010574:	08012259 	.word	0x08012259
 8010578:	20001d3c 	.word	0x20001d3c

0801057c <cleanup_stdio>:
 801057c:	6841      	ldr	r1, [r0, #4]
 801057e:	4b0c      	ldr	r3, [pc, #48]	; (80105b0 <cleanup_stdio+0x34>)
 8010580:	4299      	cmp	r1, r3
 8010582:	b510      	push	{r4, lr}
 8010584:	4604      	mov	r4, r0
 8010586:	d001      	beq.n	801058c <cleanup_stdio+0x10>
 8010588:	f001 fe66 	bl	8012258 <_fflush_r>
 801058c:	68a1      	ldr	r1, [r4, #8]
 801058e:	4b09      	ldr	r3, [pc, #36]	; (80105b4 <cleanup_stdio+0x38>)
 8010590:	4299      	cmp	r1, r3
 8010592:	d002      	beq.n	801059a <cleanup_stdio+0x1e>
 8010594:	4620      	mov	r0, r4
 8010596:	f001 fe5f 	bl	8012258 <_fflush_r>
 801059a:	68e1      	ldr	r1, [r4, #12]
 801059c:	4b06      	ldr	r3, [pc, #24]	; (80105b8 <cleanup_stdio+0x3c>)
 801059e:	4299      	cmp	r1, r3
 80105a0:	d004      	beq.n	80105ac <cleanup_stdio+0x30>
 80105a2:	4620      	mov	r0, r4
 80105a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105a8:	f001 be56 	b.w	8012258 <_fflush_r>
 80105ac:	bd10      	pop	{r4, pc}
 80105ae:	bf00      	nop
 80105b0:	2000b72c 	.word	0x2000b72c
 80105b4:	2000b794 	.word	0x2000b794
 80105b8:	2000b7fc 	.word	0x2000b7fc

080105bc <global_stdio_init.part.0>:
 80105bc:	b510      	push	{r4, lr}
 80105be:	4b0b      	ldr	r3, [pc, #44]	; (80105ec <global_stdio_init.part.0+0x30>)
 80105c0:	4c0b      	ldr	r4, [pc, #44]	; (80105f0 <global_stdio_init.part.0+0x34>)
 80105c2:	4a0c      	ldr	r2, [pc, #48]	; (80105f4 <global_stdio_init.part.0+0x38>)
 80105c4:	601a      	str	r2, [r3, #0]
 80105c6:	4620      	mov	r0, r4
 80105c8:	2200      	movs	r2, #0
 80105ca:	2104      	movs	r1, #4
 80105cc:	f7ff ff94 	bl	80104f8 <std>
 80105d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80105d4:	2201      	movs	r2, #1
 80105d6:	2109      	movs	r1, #9
 80105d8:	f7ff ff8e 	bl	80104f8 <std>
 80105dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80105e0:	2202      	movs	r2, #2
 80105e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105e6:	2112      	movs	r1, #18
 80105e8:	f7ff bf86 	b.w	80104f8 <std>
 80105ec:	2000b864 	.word	0x2000b864
 80105f0:	2000b72c 	.word	0x2000b72c
 80105f4:	08010565 	.word	0x08010565

080105f8 <__sfp_lock_acquire>:
 80105f8:	4801      	ldr	r0, [pc, #4]	; (8010600 <__sfp_lock_acquire+0x8>)
 80105fa:	f000 b940 	b.w	801087e <__retarget_lock_acquire_recursive>
 80105fe:	bf00      	nop
 8010600:	2000b86d 	.word	0x2000b86d

08010604 <__sfp_lock_release>:
 8010604:	4801      	ldr	r0, [pc, #4]	; (801060c <__sfp_lock_release+0x8>)
 8010606:	f000 b93b 	b.w	8010880 <__retarget_lock_release_recursive>
 801060a:	bf00      	nop
 801060c:	2000b86d 	.word	0x2000b86d

08010610 <__sinit>:
 8010610:	b510      	push	{r4, lr}
 8010612:	4604      	mov	r4, r0
 8010614:	f7ff fff0 	bl	80105f8 <__sfp_lock_acquire>
 8010618:	6a23      	ldr	r3, [r4, #32]
 801061a:	b11b      	cbz	r3, 8010624 <__sinit+0x14>
 801061c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010620:	f7ff bff0 	b.w	8010604 <__sfp_lock_release>
 8010624:	4b04      	ldr	r3, [pc, #16]	; (8010638 <__sinit+0x28>)
 8010626:	6223      	str	r3, [r4, #32]
 8010628:	4b04      	ldr	r3, [pc, #16]	; (801063c <__sinit+0x2c>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d1f5      	bne.n	801061c <__sinit+0xc>
 8010630:	f7ff ffc4 	bl	80105bc <global_stdio_init.part.0>
 8010634:	e7f2      	b.n	801061c <__sinit+0xc>
 8010636:	bf00      	nop
 8010638:	0801057d 	.word	0x0801057d
 801063c:	2000b864 	.word	0x2000b864

08010640 <_fwalk_sglue>:
 8010640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010644:	4607      	mov	r7, r0
 8010646:	4688      	mov	r8, r1
 8010648:	4614      	mov	r4, r2
 801064a:	2600      	movs	r6, #0
 801064c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010650:	f1b9 0901 	subs.w	r9, r9, #1
 8010654:	d505      	bpl.n	8010662 <_fwalk_sglue+0x22>
 8010656:	6824      	ldr	r4, [r4, #0]
 8010658:	2c00      	cmp	r4, #0
 801065a:	d1f7      	bne.n	801064c <_fwalk_sglue+0xc>
 801065c:	4630      	mov	r0, r6
 801065e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010662:	89ab      	ldrh	r3, [r5, #12]
 8010664:	2b01      	cmp	r3, #1
 8010666:	d907      	bls.n	8010678 <_fwalk_sglue+0x38>
 8010668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801066c:	3301      	adds	r3, #1
 801066e:	d003      	beq.n	8010678 <_fwalk_sglue+0x38>
 8010670:	4629      	mov	r1, r5
 8010672:	4638      	mov	r0, r7
 8010674:	47c0      	blx	r8
 8010676:	4306      	orrs	r6, r0
 8010678:	3568      	adds	r5, #104	; 0x68
 801067a:	e7e9      	b.n	8010650 <_fwalk_sglue+0x10>

0801067c <siprintf>:
 801067c:	b40e      	push	{r1, r2, r3}
 801067e:	b500      	push	{lr}
 8010680:	b09c      	sub	sp, #112	; 0x70
 8010682:	ab1d      	add	r3, sp, #116	; 0x74
 8010684:	9002      	str	r0, [sp, #8]
 8010686:	9006      	str	r0, [sp, #24]
 8010688:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801068c:	4809      	ldr	r0, [pc, #36]	; (80106b4 <siprintf+0x38>)
 801068e:	9107      	str	r1, [sp, #28]
 8010690:	9104      	str	r1, [sp, #16]
 8010692:	4909      	ldr	r1, [pc, #36]	; (80106b8 <siprintf+0x3c>)
 8010694:	f853 2b04 	ldr.w	r2, [r3], #4
 8010698:	9105      	str	r1, [sp, #20]
 801069a:	6800      	ldr	r0, [r0, #0]
 801069c:	9301      	str	r3, [sp, #4]
 801069e:	a902      	add	r1, sp, #8
 80106a0:	f001 fc56 	bl	8011f50 <_svfiprintf_r>
 80106a4:	9b02      	ldr	r3, [sp, #8]
 80106a6:	2200      	movs	r2, #0
 80106a8:	701a      	strb	r2, [r3, #0]
 80106aa:	b01c      	add	sp, #112	; 0x70
 80106ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80106b0:	b003      	add	sp, #12
 80106b2:	4770      	bx	lr
 80106b4:	20001d88 	.word	0x20001d88
 80106b8:	ffff0208 	.word	0xffff0208

080106bc <__sread>:
 80106bc:	b510      	push	{r4, lr}
 80106be:	460c      	mov	r4, r1
 80106c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c4:	f000 f88c 	bl	80107e0 <_read_r>
 80106c8:	2800      	cmp	r0, #0
 80106ca:	bfab      	itete	ge
 80106cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80106ce:	89a3      	ldrhlt	r3, [r4, #12]
 80106d0:	181b      	addge	r3, r3, r0
 80106d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80106d6:	bfac      	ite	ge
 80106d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80106da:	81a3      	strhlt	r3, [r4, #12]
 80106dc:	bd10      	pop	{r4, pc}

080106de <__swrite>:
 80106de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106e2:	461f      	mov	r7, r3
 80106e4:	898b      	ldrh	r3, [r1, #12]
 80106e6:	05db      	lsls	r3, r3, #23
 80106e8:	4605      	mov	r5, r0
 80106ea:	460c      	mov	r4, r1
 80106ec:	4616      	mov	r6, r2
 80106ee:	d505      	bpl.n	80106fc <__swrite+0x1e>
 80106f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106f4:	2302      	movs	r3, #2
 80106f6:	2200      	movs	r2, #0
 80106f8:	f000 f860 	bl	80107bc <_lseek_r>
 80106fc:	89a3      	ldrh	r3, [r4, #12]
 80106fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010706:	81a3      	strh	r3, [r4, #12]
 8010708:	4632      	mov	r2, r6
 801070a:	463b      	mov	r3, r7
 801070c:	4628      	mov	r0, r5
 801070e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010712:	f000 b877 	b.w	8010804 <_write_r>

08010716 <__sseek>:
 8010716:	b510      	push	{r4, lr}
 8010718:	460c      	mov	r4, r1
 801071a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801071e:	f000 f84d 	bl	80107bc <_lseek_r>
 8010722:	1c43      	adds	r3, r0, #1
 8010724:	89a3      	ldrh	r3, [r4, #12]
 8010726:	bf15      	itete	ne
 8010728:	6560      	strne	r0, [r4, #84]	; 0x54
 801072a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801072e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010732:	81a3      	strheq	r3, [r4, #12]
 8010734:	bf18      	it	ne
 8010736:	81a3      	strhne	r3, [r4, #12]
 8010738:	bd10      	pop	{r4, pc}

0801073a <__sclose>:
 801073a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801073e:	f000 b82d 	b.w	801079c <_close_r>
	...

08010744 <_vsiprintf_r>:
 8010744:	b500      	push	{lr}
 8010746:	b09b      	sub	sp, #108	; 0x6c
 8010748:	9100      	str	r1, [sp, #0]
 801074a:	9104      	str	r1, [sp, #16]
 801074c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010750:	9105      	str	r1, [sp, #20]
 8010752:	9102      	str	r1, [sp, #8]
 8010754:	4905      	ldr	r1, [pc, #20]	; (801076c <_vsiprintf_r+0x28>)
 8010756:	9103      	str	r1, [sp, #12]
 8010758:	4669      	mov	r1, sp
 801075a:	f001 fbf9 	bl	8011f50 <_svfiprintf_r>
 801075e:	9b00      	ldr	r3, [sp, #0]
 8010760:	2200      	movs	r2, #0
 8010762:	701a      	strb	r2, [r3, #0]
 8010764:	b01b      	add	sp, #108	; 0x6c
 8010766:	f85d fb04 	ldr.w	pc, [sp], #4
 801076a:	bf00      	nop
 801076c:	ffff0208 	.word	0xffff0208

08010770 <vsiprintf>:
 8010770:	4613      	mov	r3, r2
 8010772:	460a      	mov	r2, r1
 8010774:	4601      	mov	r1, r0
 8010776:	4802      	ldr	r0, [pc, #8]	; (8010780 <vsiprintf+0x10>)
 8010778:	6800      	ldr	r0, [r0, #0]
 801077a:	f7ff bfe3 	b.w	8010744 <_vsiprintf_r>
 801077e:	bf00      	nop
 8010780:	20001d88 	.word	0x20001d88

08010784 <memset>:
 8010784:	4402      	add	r2, r0
 8010786:	4603      	mov	r3, r0
 8010788:	4293      	cmp	r3, r2
 801078a:	d100      	bne.n	801078e <memset+0xa>
 801078c:	4770      	bx	lr
 801078e:	f803 1b01 	strb.w	r1, [r3], #1
 8010792:	e7f9      	b.n	8010788 <memset+0x4>

08010794 <_localeconv_r>:
 8010794:	4800      	ldr	r0, [pc, #0]	; (8010798 <_localeconv_r+0x4>)
 8010796:	4770      	bx	lr
 8010798:	20001e7c 	.word	0x20001e7c

0801079c <_close_r>:
 801079c:	b538      	push	{r3, r4, r5, lr}
 801079e:	4d06      	ldr	r5, [pc, #24]	; (80107b8 <_close_r+0x1c>)
 80107a0:	2300      	movs	r3, #0
 80107a2:	4604      	mov	r4, r0
 80107a4:	4608      	mov	r0, r1
 80107a6:	602b      	str	r3, [r5, #0]
 80107a8:	f7f0 fcb9 	bl	800111e <_close>
 80107ac:	1c43      	adds	r3, r0, #1
 80107ae:	d102      	bne.n	80107b6 <_close_r+0x1a>
 80107b0:	682b      	ldr	r3, [r5, #0]
 80107b2:	b103      	cbz	r3, 80107b6 <_close_r+0x1a>
 80107b4:	6023      	str	r3, [r4, #0]
 80107b6:	bd38      	pop	{r3, r4, r5, pc}
 80107b8:	2000b868 	.word	0x2000b868

080107bc <_lseek_r>:
 80107bc:	b538      	push	{r3, r4, r5, lr}
 80107be:	4d07      	ldr	r5, [pc, #28]	; (80107dc <_lseek_r+0x20>)
 80107c0:	4604      	mov	r4, r0
 80107c2:	4608      	mov	r0, r1
 80107c4:	4611      	mov	r1, r2
 80107c6:	2200      	movs	r2, #0
 80107c8:	602a      	str	r2, [r5, #0]
 80107ca:	461a      	mov	r2, r3
 80107cc:	f7f0 fcce 	bl	800116c <_lseek>
 80107d0:	1c43      	adds	r3, r0, #1
 80107d2:	d102      	bne.n	80107da <_lseek_r+0x1e>
 80107d4:	682b      	ldr	r3, [r5, #0]
 80107d6:	b103      	cbz	r3, 80107da <_lseek_r+0x1e>
 80107d8:	6023      	str	r3, [r4, #0]
 80107da:	bd38      	pop	{r3, r4, r5, pc}
 80107dc:	2000b868 	.word	0x2000b868

080107e0 <_read_r>:
 80107e0:	b538      	push	{r3, r4, r5, lr}
 80107e2:	4d07      	ldr	r5, [pc, #28]	; (8010800 <_read_r+0x20>)
 80107e4:	4604      	mov	r4, r0
 80107e6:	4608      	mov	r0, r1
 80107e8:	4611      	mov	r1, r2
 80107ea:	2200      	movs	r2, #0
 80107ec:	602a      	str	r2, [r5, #0]
 80107ee:	461a      	mov	r2, r3
 80107f0:	f7f0 fc5c 	bl	80010ac <_read>
 80107f4:	1c43      	adds	r3, r0, #1
 80107f6:	d102      	bne.n	80107fe <_read_r+0x1e>
 80107f8:	682b      	ldr	r3, [r5, #0]
 80107fa:	b103      	cbz	r3, 80107fe <_read_r+0x1e>
 80107fc:	6023      	str	r3, [r4, #0]
 80107fe:	bd38      	pop	{r3, r4, r5, pc}
 8010800:	2000b868 	.word	0x2000b868

08010804 <_write_r>:
 8010804:	b538      	push	{r3, r4, r5, lr}
 8010806:	4d07      	ldr	r5, [pc, #28]	; (8010824 <_write_r+0x20>)
 8010808:	4604      	mov	r4, r0
 801080a:	4608      	mov	r0, r1
 801080c:	4611      	mov	r1, r2
 801080e:	2200      	movs	r2, #0
 8010810:	602a      	str	r2, [r5, #0]
 8010812:	461a      	mov	r2, r3
 8010814:	f7f0 fc67 	bl	80010e6 <_write>
 8010818:	1c43      	adds	r3, r0, #1
 801081a:	d102      	bne.n	8010822 <_write_r+0x1e>
 801081c:	682b      	ldr	r3, [r5, #0]
 801081e:	b103      	cbz	r3, 8010822 <_write_r+0x1e>
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	bd38      	pop	{r3, r4, r5, pc}
 8010824:	2000b868 	.word	0x2000b868

08010828 <__errno>:
 8010828:	4b01      	ldr	r3, [pc, #4]	; (8010830 <__errno+0x8>)
 801082a:	6818      	ldr	r0, [r3, #0]
 801082c:	4770      	bx	lr
 801082e:	bf00      	nop
 8010830:	20001d88 	.word	0x20001d88

08010834 <__libc_init_array>:
 8010834:	b570      	push	{r4, r5, r6, lr}
 8010836:	4d0d      	ldr	r5, [pc, #52]	; (801086c <__libc_init_array+0x38>)
 8010838:	4c0d      	ldr	r4, [pc, #52]	; (8010870 <__libc_init_array+0x3c>)
 801083a:	1b64      	subs	r4, r4, r5
 801083c:	10a4      	asrs	r4, r4, #2
 801083e:	2600      	movs	r6, #0
 8010840:	42a6      	cmp	r6, r4
 8010842:	d109      	bne.n	8010858 <__libc_init_array+0x24>
 8010844:	4d0b      	ldr	r5, [pc, #44]	; (8010874 <__libc_init_array+0x40>)
 8010846:	4c0c      	ldr	r4, [pc, #48]	; (8010878 <__libc_init_array+0x44>)
 8010848:	f002 f89c 	bl	8012984 <_init>
 801084c:	1b64      	subs	r4, r4, r5
 801084e:	10a4      	asrs	r4, r4, #2
 8010850:	2600      	movs	r6, #0
 8010852:	42a6      	cmp	r6, r4
 8010854:	d105      	bne.n	8010862 <__libc_init_array+0x2e>
 8010856:	bd70      	pop	{r4, r5, r6, pc}
 8010858:	f855 3b04 	ldr.w	r3, [r5], #4
 801085c:	4798      	blx	r3
 801085e:	3601      	adds	r6, #1
 8010860:	e7ee      	b.n	8010840 <__libc_init_array+0xc>
 8010862:	f855 3b04 	ldr.w	r3, [r5], #4
 8010866:	4798      	blx	r3
 8010868:	3601      	adds	r6, #1
 801086a:	e7f2      	b.n	8010852 <__libc_init_array+0x1e>
 801086c:	08014b9c 	.word	0x08014b9c
 8010870:	08014b9c 	.word	0x08014b9c
 8010874:	08014b9c 	.word	0x08014b9c
 8010878:	08014ba0 	.word	0x08014ba0

0801087c <__retarget_lock_init_recursive>:
 801087c:	4770      	bx	lr

0801087e <__retarget_lock_acquire_recursive>:
 801087e:	4770      	bx	lr

08010880 <__retarget_lock_release_recursive>:
 8010880:	4770      	bx	lr

08010882 <strcpy>:
 8010882:	4603      	mov	r3, r0
 8010884:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010888:	f803 2b01 	strb.w	r2, [r3], #1
 801088c:	2a00      	cmp	r2, #0
 801088e:	d1f9      	bne.n	8010884 <strcpy+0x2>
 8010890:	4770      	bx	lr

08010892 <memcpy>:
 8010892:	440a      	add	r2, r1
 8010894:	4291      	cmp	r1, r2
 8010896:	f100 33ff 	add.w	r3, r0, #4294967295
 801089a:	d100      	bne.n	801089e <memcpy+0xc>
 801089c:	4770      	bx	lr
 801089e:	b510      	push	{r4, lr}
 80108a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108a8:	4291      	cmp	r1, r2
 80108aa:	d1f9      	bne.n	80108a0 <memcpy+0xe>
 80108ac:	bd10      	pop	{r4, pc}

080108ae <quorem>:
 80108ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b2:	6903      	ldr	r3, [r0, #16]
 80108b4:	690c      	ldr	r4, [r1, #16]
 80108b6:	42a3      	cmp	r3, r4
 80108b8:	4607      	mov	r7, r0
 80108ba:	db7e      	blt.n	80109ba <quorem+0x10c>
 80108bc:	3c01      	subs	r4, #1
 80108be:	f101 0814 	add.w	r8, r1, #20
 80108c2:	f100 0514 	add.w	r5, r0, #20
 80108c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108ca:	9301      	str	r3, [sp, #4]
 80108cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80108d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108d4:	3301      	adds	r3, #1
 80108d6:	429a      	cmp	r2, r3
 80108d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80108dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80108e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80108e4:	d331      	bcc.n	801094a <quorem+0x9c>
 80108e6:	f04f 0e00 	mov.w	lr, #0
 80108ea:	4640      	mov	r0, r8
 80108ec:	46ac      	mov	ip, r5
 80108ee:	46f2      	mov	sl, lr
 80108f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80108f4:	b293      	uxth	r3, r2
 80108f6:	fb06 e303 	mla	r3, r6, r3, lr
 80108fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80108fe:	0c1a      	lsrs	r2, r3, #16
 8010900:	b29b      	uxth	r3, r3
 8010902:	ebaa 0303 	sub.w	r3, sl, r3
 8010906:	f8dc a000 	ldr.w	sl, [ip]
 801090a:	fa13 f38a 	uxtah	r3, r3, sl
 801090e:	fb06 220e 	mla	r2, r6, lr, r2
 8010912:	9300      	str	r3, [sp, #0]
 8010914:	9b00      	ldr	r3, [sp, #0]
 8010916:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801091a:	b292      	uxth	r2, r2
 801091c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010920:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010924:	f8bd 3000 	ldrh.w	r3, [sp]
 8010928:	4581      	cmp	r9, r0
 801092a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801092e:	f84c 3b04 	str.w	r3, [ip], #4
 8010932:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010936:	d2db      	bcs.n	80108f0 <quorem+0x42>
 8010938:	f855 300b 	ldr.w	r3, [r5, fp]
 801093c:	b92b      	cbnz	r3, 801094a <quorem+0x9c>
 801093e:	9b01      	ldr	r3, [sp, #4]
 8010940:	3b04      	subs	r3, #4
 8010942:	429d      	cmp	r5, r3
 8010944:	461a      	mov	r2, r3
 8010946:	d32c      	bcc.n	80109a2 <quorem+0xf4>
 8010948:	613c      	str	r4, [r7, #16]
 801094a:	4638      	mov	r0, r7
 801094c:	f001 f9a6 	bl	8011c9c <__mcmp>
 8010950:	2800      	cmp	r0, #0
 8010952:	db22      	blt.n	801099a <quorem+0xec>
 8010954:	3601      	adds	r6, #1
 8010956:	4629      	mov	r1, r5
 8010958:	2000      	movs	r0, #0
 801095a:	f858 2b04 	ldr.w	r2, [r8], #4
 801095e:	f8d1 c000 	ldr.w	ip, [r1]
 8010962:	b293      	uxth	r3, r2
 8010964:	1ac3      	subs	r3, r0, r3
 8010966:	0c12      	lsrs	r2, r2, #16
 8010968:	fa13 f38c 	uxtah	r3, r3, ip
 801096c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010974:	b29b      	uxth	r3, r3
 8010976:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801097a:	45c1      	cmp	r9, r8
 801097c:	f841 3b04 	str.w	r3, [r1], #4
 8010980:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010984:	d2e9      	bcs.n	801095a <quorem+0xac>
 8010986:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801098a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801098e:	b922      	cbnz	r2, 801099a <quorem+0xec>
 8010990:	3b04      	subs	r3, #4
 8010992:	429d      	cmp	r5, r3
 8010994:	461a      	mov	r2, r3
 8010996:	d30a      	bcc.n	80109ae <quorem+0x100>
 8010998:	613c      	str	r4, [r7, #16]
 801099a:	4630      	mov	r0, r6
 801099c:	b003      	add	sp, #12
 801099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a2:	6812      	ldr	r2, [r2, #0]
 80109a4:	3b04      	subs	r3, #4
 80109a6:	2a00      	cmp	r2, #0
 80109a8:	d1ce      	bne.n	8010948 <quorem+0x9a>
 80109aa:	3c01      	subs	r4, #1
 80109ac:	e7c9      	b.n	8010942 <quorem+0x94>
 80109ae:	6812      	ldr	r2, [r2, #0]
 80109b0:	3b04      	subs	r3, #4
 80109b2:	2a00      	cmp	r2, #0
 80109b4:	d1f0      	bne.n	8010998 <quorem+0xea>
 80109b6:	3c01      	subs	r4, #1
 80109b8:	e7eb      	b.n	8010992 <quorem+0xe4>
 80109ba:	2000      	movs	r0, #0
 80109bc:	e7ee      	b.n	801099c <quorem+0xee>
	...

080109c0 <_dtoa_r>:
 80109c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c4:	ed2d 8b04 	vpush	{d8-d9}
 80109c8:	69c5      	ldr	r5, [r0, #28]
 80109ca:	b093      	sub	sp, #76	; 0x4c
 80109cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80109d0:	ec57 6b10 	vmov	r6, r7, d0
 80109d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80109d8:	9107      	str	r1, [sp, #28]
 80109da:	4604      	mov	r4, r0
 80109dc:	920a      	str	r2, [sp, #40]	; 0x28
 80109de:	930d      	str	r3, [sp, #52]	; 0x34
 80109e0:	b975      	cbnz	r5, 8010a00 <_dtoa_r+0x40>
 80109e2:	2010      	movs	r0, #16
 80109e4:	f000 fe2a 	bl	801163c <malloc>
 80109e8:	4602      	mov	r2, r0
 80109ea:	61e0      	str	r0, [r4, #28]
 80109ec:	b920      	cbnz	r0, 80109f8 <_dtoa_r+0x38>
 80109ee:	4bae      	ldr	r3, [pc, #696]	; (8010ca8 <_dtoa_r+0x2e8>)
 80109f0:	21ef      	movs	r1, #239	; 0xef
 80109f2:	48ae      	ldr	r0, [pc, #696]	; (8010cac <_dtoa_r+0x2ec>)
 80109f4:	f001 fc82 	bl	80122fc <__assert_func>
 80109f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109fc:	6005      	str	r5, [r0, #0]
 80109fe:	60c5      	str	r5, [r0, #12]
 8010a00:	69e3      	ldr	r3, [r4, #28]
 8010a02:	6819      	ldr	r1, [r3, #0]
 8010a04:	b151      	cbz	r1, 8010a1c <_dtoa_r+0x5c>
 8010a06:	685a      	ldr	r2, [r3, #4]
 8010a08:	604a      	str	r2, [r1, #4]
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	4093      	lsls	r3, r2
 8010a0e:	608b      	str	r3, [r1, #8]
 8010a10:	4620      	mov	r0, r4
 8010a12:	f000 ff07 	bl	8011824 <_Bfree>
 8010a16:	69e3      	ldr	r3, [r4, #28]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	601a      	str	r2, [r3, #0]
 8010a1c:	1e3b      	subs	r3, r7, #0
 8010a1e:	bfbb      	ittet	lt
 8010a20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010a24:	9303      	strlt	r3, [sp, #12]
 8010a26:	2300      	movge	r3, #0
 8010a28:	2201      	movlt	r2, #1
 8010a2a:	bfac      	ite	ge
 8010a2c:	f8c8 3000 	strge.w	r3, [r8]
 8010a30:	f8c8 2000 	strlt.w	r2, [r8]
 8010a34:	4b9e      	ldr	r3, [pc, #632]	; (8010cb0 <_dtoa_r+0x2f0>)
 8010a36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010a3a:	ea33 0308 	bics.w	r3, r3, r8
 8010a3e:	d11b      	bne.n	8010a78 <_dtoa_r+0xb8>
 8010a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a42:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a46:	6013      	str	r3, [r2, #0]
 8010a48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010a4c:	4333      	orrs	r3, r6
 8010a4e:	f000 8593 	beq.w	8011578 <_dtoa_r+0xbb8>
 8010a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a54:	b963      	cbnz	r3, 8010a70 <_dtoa_r+0xb0>
 8010a56:	4b97      	ldr	r3, [pc, #604]	; (8010cb4 <_dtoa_r+0x2f4>)
 8010a58:	e027      	b.n	8010aaa <_dtoa_r+0xea>
 8010a5a:	4b97      	ldr	r3, [pc, #604]	; (8010cb8 <_dtoa_r+0x2f8>)
 8010a5c:	9300      	str	r3, [sp, #0]
 8010a5e:	3308      	adds	r3, #8
 8010a60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010a62:	6013      	str	r3, [r2, #0]
 8010a64:	9800      	ldr	r0, [sp, #0]
 8010a66:	b013      	add	sp, #76	; 0x4c
 8010a68:	ecbd 8b04 	vpop	{d8-d9}
 8010a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a70:	4b90      	ldr	r3, [pc, #576]	; (8010cb4 <_dtoa_r+0x2f4>)
 8010a72:	9300      	str	r3, [sp, #0]
 8010a74:	3303      	adds	r3, #3
 8010a76:	e7f3      	b.n	8010a60 <_dtoa_r+0xa0>
 8010a78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	ec51 0b17 	vmov	r0, r1, d7
 8010a82:	eeb0 8a47 	vmov.f32	s16, s14
 8010a86:	eef0 8a67 	vmov.f32	s17, s15
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	f7f0 f84c 	bl	8000b28 <__aeabi_dcmpeq>
 8010a90:	4681      	mov	r9, r0
 8010a92:	b160      	cbz	r0, 8010aae <_dtoa_r+0xee>
 8010a94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a96:	2301      	movs	r3, #1
 8010a98:	6013      	str	r3, [r2, #0]
 8010a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	f000 8568 	beq.w	8011572 <_dtoa_r+0xbb2>
 8010aa2:	4b86      	ldr	r3, [pc, #536]	; (8010cbc <_dtoa_r+0x2fc>)
 8010aa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010aa6:	6013      	str	r3, [r2, #0]
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	e7da      	b.n	8010a64 <_dtoa_r+0xa4>
 8010aae:	aa10      	add	r2, sp, #64	; 0x40
 8010ab0:	a911      	add	r1, sp, #68	; 0x44
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	eeb0 0a48 	vmov.f32	s0, s16
 8010ab8:	eef0 0a68 	vmov.f32	s1, s17
 8010abc:	f001 f994 	bl	8011de8 <__d2b>
 8010ac0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010ac4:	4682      	mov	sl, r0
 8010ac6:	2d00      	cmp	r5, #0
 8010ac8:	d07f      	beq.n	8010bca <_dtoa_r+0x20a>
 8010aca:	ee18 3a90 	vmov	r3, s17
 8010ace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ad2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010ad6:	ec51 0b18 	vmov	r0, r1, d8
 8010ada:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010ade:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010ae2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	2200      	movs	r2, #0
 8010aea:	4b75      	ldr	r3, [pc, #468]	; (8010cc0 <_dtoa_r+0x300>)
 8010aec:	f7ef fbfc 	bl	80002e8 <__aeabi_dsub>
 8010af0:	a367      	add	r3, pc, #412	; (adr r3, 8010c90 <_dtoa_r+0x2d0>)
 8010af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af6:	f7ef fdaf 	bl	8000658 <__aeabi_dmul>
 8010afa:	a367      	add	r3, pc, #412	; (adr r3, 8010c98 <_dtoa_r+0x2d8>)
 8010afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b00:	f7ef fbf4 	bl	80002ec <__adddf3>
 8010b04:	4606      	mov	r6, r0
 8010b06:	4628      	mov	r0, r5
 8010b08:	460f      	mov	r7, r1
 8010b0a:	f7ef fd3b 	bl	8000584 <__aeabi_i2d>
 8010b0e:	a364      	add	r3, pc, #400	; (adr r3, 8010ca0 <_dtoa_r+0x2e0>)
 8010b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b14:	f7ef fda0 	bl	8000658 <__aeabi_dmul>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	460b      	mov	r3, r1
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	4639      	mov	r1, r7
 8010b20:	f7ef fbe4 	bl	80002ec <__adddf3>
 8010b24:	4606      	mov	r6, r0
 8010b26:	460f      	mov	r7, r1
 8010b28:	f7f0 f846 	bl	8000bb8 <__aeabi_d2iz>
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	4683      	mov	fp, r0
 8010b30:	2300      	movs	r3, #0
 8010b32:	4630      	mov	r0, r6
 8010b34:	4639      	mov	r1, r7
 8010b36:	f7f0 f801 	bl	8000b3c <__aeabi_dcmplt>
 8010b3a:	b148      	cbz	r0, 8010b50 <_dtoa_r+0x190>
 8010b3c:	4658      	mov	r0, fp
 8010b3e:	f7ef fd21 	bl	8000584 <__aeabi_i2d>
 8010b42:	4632      	mov	r2, r6
 8010b44:	463b      	mov	r3, r7
 8010b46:	f7ef ffef 	bl	8000b28 <__aeabi_dcmpeq>
 8010b4a:	b908      	cbnz	r0, 8010b50 <_dtoa_r+0x190>
 8010b4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b50:	f1bb 0f16 	cmp.w	fp, #22
 8010b54:	d857      	bhi.n	8010c06 <_dtoa_r+0x246>
 8010b56:	4b5b      	ldr	r3, [pc, #364]	; (8010cc4 <_dtoa_r+0x304>)
 8010b58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b60:	ec51 0b18 	vmov	r0, r1, d8
 8010b64:	f7ef ffea 	bl	8000b3c <__aeabi_dcmplt>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d04e      	beq.n	8010c0a <_dtoa_r+0x24a>
 8010b6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010b70:	2300      	movs	r3, #0
 8010b72:	930c      	str	r3, [sp, #48]	; 0x30
 8010b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b76:	1b5b      	subs	r3, r3, r5
 8010b78:	1e5a      	subs	r2, r3, #1
 8010b7a:	bf45      	ittet	mi
 8010b7c:	f1c3 0301 	rsbmi	r3, r3, #1
 8010b80:	9305      	strmi	r3, [sp, #20]
 8010b82:	2300      	movpl	r3, #0
 8010b84:	2300      	movmi	r3, #0
 8010b86:	9206      	str	r2, [sp, #24]
 8010b88:	bf54      	ite	pl
 8010b8a:	9305      	strpl	r3, [sp, #20]
 8010b8c:	9306      	strmi	r3, [sp, #24]
 8010b8e:	f1bb 0f00 	cmp.w	fp, #0
 8010b92:	db3c      	blt.n	8010c0e <_dtoa_r+0x24e>
 8010b94:	9b06      	ldr	r3, [sp, #24]
 8010b96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010b9a:	445b      	add	r3, fp
 8010b9c:	9306      	str	r3, [sp, #24]
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	9308      	str	r3, [sp, #32]
 8010ba2:	9b07      	ldr	r3, [sp, #28]
 8010ba4:	2b09      	cmp	r3, #9
 8010ba6:	d868      	bhi.n	8010c7a <_dtoa_r+0x2ba>
 8010ba8:	2b05      	cmp	r3, #5
 8010baa:	bfc4      	itt	gt
 8010bac:	3b04      	subgt	r3, #4
 8010bae:	9307      	strgt	r3, [sp, #28]
 8010bb0:	9b07      	ldr	r3, [sp, #28]
 8010bb2:	f1a3 0302 	sub.w	r3, r3, #2
 8010bb6:	bfcc      	ite	gt
 8010bb8:	2500      	movgt	r5, #0
 8010bba:	2501      	movle	r5, #1
 8010bbc:	2b03      	cmp	r3, #3
 8010bbe:	f200 8085 	bhi.w	8010ccc <_dtoa_r+0x30c>
 8010bc2:	e8df f003 	tbb	[pc, r3]
 8010bc6:	3b2e      	.short	0x3b2e
 8010bc8:	5839      	.short	0x5839
 8010bca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010bce:	441d      	add	r5, r3
 8010bd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010bd4:	2b20      	cmp	r3, #32
 8010bd6:	bfc1      	itttt	gt
 8010bd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010bdc:	fa08 f803 	lslgt.w	r8, r8, r3
 8010be0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010be4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010be8:	bfd6      	itet	le
 8010bea:	f1c3 0320 	rsble	r3, r3, #32
 8010bee:	ea48 0003 	orrgt.w	r0, r8, r3
 8010bf2:	fa06 f003 	lslle.w	r0, r6, r3
 8010bf6:	f7ef fcb5 	bl	8000564 <__aeabi_ui2d>
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010c00:	3d01      	subs	r5, #1
 8010c02:	920e      	str	r2, [sp, #56]	; 0x38
 8010c04:	e76f      	b.n	8010ae6 <_dtoa_r+0x126>
 8010c06:	2301      	movs	r3, #1
 8010c08:	e7b3      	b.n	8010b72 <_dtoa_r+0x1b2>
 8010c0a:	900c      	str	r0, [sp, #48]	; 0x30
 8010c0c:	e7b2      	b.n	8010b74 <_dtoa_r+0x1b4>
 8010c0e:	9b05      	ldr	r3, [sp, #20]
 8010c10:	eba3 030b 	sub.w	r3, r3, fp
 8010c14:	9305      	str	r3, [sp, #20]
 8010c16:	f1cb 0300 	rsb	r3, fp, #0
 8010c1a:	9308      	str	r3, [sp, #32]
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c20:	e7bf      	b.n	8010ba2 <_dtoa_r+0x1e2>
 8010c22:	2300      	movs	r3, #0
 8010c24:	9309      	str	r3, [sp, #36]	; 0x24
 8010c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	dc52      	bgt.n	8010cd2 <_dtoa_r+0x312>
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	9301      	str	r3, [sp, #4]
 8010c30:	9304      	str	r3, [sp, #16]
 8010c32:	461a      	mov	r2, r3
 8010c34:	920a      	str	r2, [sp, #40]	; 0x28
 8010c36:	e00b      	b.n	8010c50 <_dtoa_r+0x290>
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e7f3      	b.n	8010c24 <_dtoa_r+0x264>
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8010c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c42:	445b      	add	r3, fp
 8010c44:	9301      	str	r3, [sp, #4]
 8010c46:	3301      	adds	r3, #1
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	9304      	str	r3, [sp, #16]
 8010c4c:	bfb8      	it	lt
 8010c4e:	2301      	movlt	r3, #1
 8010c50:	69e0      	ldr	r0, [r4, #28]
 8010c52:	2100      	movs	r1, #0
 8010c54:	2204      	movs	r2, #4
 8010c56:	f102 0614 	add.w	r6, r2, #20
 8010c5a:	429e      	cmp	r6, r3
 8010c5c:	d93d      	bls.n	8010cda <_dtoa_r+0x31a>
 8010c5e:	6041      	str	r1, [r0, #4]
 8010c60:	4620      	mov	r0, r4
 8010c62:	f000 fd9f 	bl	80117a4 <_Balloc>
 8010c66:	9000      	str	r0, [sp, #0]
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	d139      	bne.n	8010ce0 <_dtoa_r+0x320>
 8010c6c:	4b16      	ldr	r3, [pc, #88]	; (8010cc8 <_dtoa_r+0x308>)
 8010c6e:	4602      	mov	r2, r0
 8010c70:	f240 11af 	movw	r1, #431	; 0x1af
 8010c74:	e6bd      	b.n	80109f2 <_dtoa_r+0x32>
 8010c76:	2301      	movs	r3, #1
 8010c78:	e7e1      	b.n	8010c3e <_dtoa_r+0x27e>
 8010c7a:	2501      	movs	r5, #1
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	9307      	str	r3, [sp, #28]
 8010c80:	9509      	str	r5, [sp, #36]	; 0x24
 8010c82:	f04f 33ff 	mov.w	r3, #4294967295
 8010c86:	9301      	str	r3, [sp, #4]
 8010c88:	9304      	str	r3, [sp, #16]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	2312      	movs	r3, #18
 8010c8e:	e7d1      	b.n	8010c34 <_dtoa_r+0x274>
 8010c90:	636f4361 	.word	0x636f4361
 8010c94:	3fd287a7 	.word	0x3fd287a7
 8010c98:	8b60c8b3 	.word	0x8b60c8b3
 8010c9c:	3fc68a28 	.word	0x3fc68a28
 8010ca0:	509f79fb 	.word	0x509f79fb
 8010ca4:	3fd34413 	.word	0x3fd34413
 8010ca8:	08014962 	.word	0x08014962
 8010cac:	08014979 	.word	0x08014979
 8010cb0:	7ff00000 	.word	0x7ff00000
 8010cb4:	0801495e 	.word	0x0801495e
 8010cb8:	08014955 	.word	0x08014955
 8010cbc:	08014932 	.word	0x08014932
 8010cc0:	3ff80000 	.word	0x3ff80000
 8010cc4:	08014a68 	.word	0x08014a68
 8010cc8:	080149d1 	.word	0x080149d1
 8010ccc:	2301      	movs	r3, #1
 8010cce:	9309      	str	r3, [sp, #36]	; 0x24
 8010cd0:	e7d7      	b.n	8010c82 <_dtoa_r+0x2c2>
 8010cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cd4:	9301      	str	r3, [sp, #4]
 8010cd6:	9304      	str	r3, [sp, #16]
 8010cd8:	e7ba      	b.n	8010c50 <_dtoa_r+0x290>
 8010cda:	3101      	adds	r1, #1
 8010cdc:	0052      	lsls	r2, r2, #1
 8010cde:	e7ba      	b.n	8010c56 <_dtoa_r+0x296>
 8010ce0:	69e3      	ldr	r3, [r4, #28]
 8010ce2:	9a00      	ldr	r2, [sp, #0]
 8010ce4:	601a      	str	r2, [r3, #0]
 8010ce6:	9b04      	ldr	r3, [sp, #16]
 8010ce8:	2b0e      	cmp	r3, #14
 8010cea:	f200 80a8 	bhi.w	8010e3e <_dtoa_r+0x47e>
 8010cee:	2d00      	cmp	r5, #0
 8010cf0:	f000 80a5 	beq.w	8010e3e <_dtoa_r+0x47e>
 8010cf4:	f1bb 0f00 	cmp.w	fp, #0
 8010cf8:	dd38      	ble.n	8010d6c <_dtoa_r+0x3ac>
 8010cfa:	4bc0      	ldr	r3, [pc, #768]	; (8010ffc <_dtoa_r+0x63c>)
 8010cfc:	f00b 020f 	and.w	r2, fp, #15
 8010d00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010d08:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010d0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010d10:	d019      	beq.n	8010d46 <_dtoa_r+0x386>
 8010d12:	4bbb      	ldr	r3, [pc, #748]	; (8011000 <_dtoa_r+0x640>)
 8010d14:	ec51 0b18 	vmov	r0, r1, d8
 8010d18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010d1c:	f7ef fdc6 	bl	80008ac <__aeabi_ddiv>
 8010d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d24:	f008 080f 	and.w	r8, r8, #15
 8010d28:	2503      	movs	r5, #3
 8010d2a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011000 <_dtoa_r+0x640>
 8010d2e:	f1b8 0f00 	cmp.w	r8, #0
 8010d32:	d10a      	bne.n	8010d4a <_dtoa_r+0x38a>
 8010d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d38:	4632      	mov	r2, r6
 8010d3a:	463b      	mov	r3, r7
 8010d3c:	f7ef fdb6 	bl	80008ac <__aeabi_ddiv>
 8010d40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d44:	e02b      	b.n	8010d9e <_dtoa_r+0x3de>
 8010d46:	2502      	movs	r5, #2
 8010d48:	e7ef      	b.n	8010d2a <_dtoa_r+0x36a>
 8010d4a:	f018 0f01 	tst.w	r8, #1
 8010d4e:	d008      	beq.n	8010d62 <_dtoa_r+0x3a2>
 8010d50:	4630      	mov	r0, r6
 8010d52:	4639      	mov	r1, r7
 8010d54:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010d58:	f7ef fc7e 	bl	8000658 <__aeabi_dmul>
 8010d5c:	3501      	adds	r5, #1
 8010d5e:	4606      	mov	r6, r0
 8010d60:	460f      	mov	r7, r1
 8010d62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010d66:	f109 0908 	add.w	r9, r9, #8
 8010d6a:	e7e0      	b.n	8010d2e <_dtoa_r+0x36e>
 8010d6c:	f000 809f 	beq.w	8010eae <_dtoa_r+0x4ee>
 8010d70:	f1cb 0600 	rsb	r6, fp, #0
 8010d74:	4ba1      	ldr	r3, [pc, #644]	; (8010ffc <_dtoa_r+0x63c>)
 8010d76:	4fa2      	ldr	r7, [pc, #648]	; (8011000 <_dtoa_r+0x640>)
 8010d78:	f006 020f 	and.w	r2, r6, #15
 8010d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d84:	ec51 0b18 	vmov	r0, r1, d8
 8010d88:	f7ef fc66 	bl	8000658 <__aeabi_dmul>
 8010d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d90:	1136      	asrs	r6, r6, #4
 8010d92:	2300      	movs	r3, #0
 8010d94:	2502      	movs	r5, #2
 8010d96:	2e00      	cmp	r6, #0
 8010d98:	d17e      	bne.n	8010e98 <_dtoa_r+0x4d8>
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d1d0      	bne.n	8010d40 <_dtoa_r+0x380>
 8010d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010da0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	f000 8084 	beq.w	8010eb2 <_dtoa_r+0x4f2>
 8010daa:	4b96      	ldr	r3, [pc, #600]	; (8011004 <_dtoa_r+0x644>)
 8010dac:	2200      	movs	r2, #0
 8010dae:	4640      	mov	r0, r8
 8010db0:	4649      	mov	r1, r9
 8010db2:	f7ef fec3 	bl	8000b3c <__aeabi_dcmplt>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d07b      	beq.n	8010eb2 <_dtoa_r+0x4f2>
 8010dba:	9b04      	ldr	r3, [sp, #16]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d078      	beq.n	8010eb2 <_dtoa_r+0x4f2>
 8010dc0:	9b01      	ldr	r3, [sp, #4]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	dd39      	ble.n	8010e3a <_dtoa_r+0x47a>
 8010dc6:	4b90      	ldr	r3, [pc, #576]	; (8011008 <_dtoa_r+0x648>)
 8010dc8:	2200      	movs	r2, #0
 8010dca:	4640      	mov	r0, r8
 8010dcc:	4649      	mov	r1, r9
 8010dce:	f7ef fc43 	bl	8000658 <__aeabi_dmul>
 8010dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010dd6:	9e01      	ldr	r6, [sp, #4]
 8010dd8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010ddc:	3501      	adds	r5, #1
 8010dde:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010de2:	4628      	mov	r0, r5
 8010de4:	f7ef fbce 	bl	8000584 <__aeabi_i2d>
 8010de8:	4642      	mov	r2, r8
 8010dea:	464b      	mov	r3, r9
 8010dec:	f7ef fc34 	bl	8000658 <__aeabi_dmul>
 8010df0:	4b86      	ldr	r3, [pc, #536]	; (801100c <_dtoa_r+0x64c>)
 8010df2:	2200      	movs	r2, #0
 8010df4:	f7ef fa7a 	bl	80002ec <__adddf3>
 8010df8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e00:	9303      	str	r3, [sp, #12]
 8010e02:	2e00      	cmp	r6, #0
 8010e04:	d158      	bne.n	8010eb8 <_dtoa_r+0x4f8>
 8010e06:	4b82      	ldr	r3, [pc, #520]	; (8011010 <_dtoa_r+0x650>)
 8010e08:	2200      	movs	r2, #0
 8010e0a:	4640      	mov	r0, r8
 8010e0c:	4649      	mov	r1, r9
 8010e0e:	f7ef fa6b 	bl	80002e8 <__aeabi_dsub>
 8010e12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e16:	4680      	mov	r8, r0
 8010e18:	4689      	mov	r9, r1
 8010e1a:	f7ef fead 	bl	8000b78 <__aeabi_dcmpgt>
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	f040 8296 	bne.w	8011350 <_dtoa_r+0x990>
 8010e24:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010e28:	4640      	mov	r0, r8
 8010e2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010e2e:	4649      	mov	r1, r9
 8010e30:	f7ef fe84 	bl	8000b3c <__aeabi_dcmplt>
 8010e34:	2800      	cmp	r0, #0
 8010e36:	f040 8289 	bne.w	801134c <_dtoa_r+0x98c>
 8010e3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010e3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	f2c0 814e 	blt.w	80110e2 <_dtoa_r+0x722>
 8010e46:	f1bb 0f0e 	cmp.w	fp, #14
 8010e4a:	f300 814a 	bgt.w	80110e2 <_dtoa_r+0x722>
 8010e4e:	4b6b      	ldr	r3, [pc, #428]	; (8010ffc <_dtoa_r+0x63c>)
 8010e50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010e54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	f280 80dc 	bge.w	8011018 <_dtoa_r+0x658>
 8010e60:	9b04      	ldr	r3, [sp, #16]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	f300 80d8 	bgt.w	8011018 <_dtoa_r+0x658>
 8010e68:	f040 826f 	bne.w	801134a <_dtoa_r+0x98a>
 8010e6c:	4b68      	ldr	r3, [pc, #416]	; (8011010 <_dtoa_r+0x650>)
 8010e6e:	2200      	movs	r2, #0
 8010e70:	4640      	mov	r0, r8
 8010e72:	4649      	mov	r1, r9
 8010e74:	f7ef fbf0 	bl	8000658 <__aeabi_dmul>
 8010e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e7c:	f7ef fe72 	bl	8000b64 <__aeabi_dcmpge>
 8010e80:	9e04      	ldr	r6, [sp, #16]
 8010e82:	4637      	mov	r7, r6
 8010e84:	2800      	cmp	r0, #0
 8010e86:	f040 8245 	bne.w	8011314 <_dtoa_r+0x954>
 8010e8a:	9d00      	ldr	r5, [sp, #0]
 8010e8c:	2331      	movs	r3, #49	; 0x31
 8010e8e:	f805 3b01 	strb.w	r3, [r5], #1
 8010e92:	f10b 0b01 	add.w	fp, fp, #1
 8010e96:	e241      	b.n	801131c <_dtoa_r+0x95c>
 8010e98:	07f2      	lsls	r2, r6, #31
 8010e9a:	d505      	bpl.n	8010ea8 <_dtoa_r+0x4e8>
 8010e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ea0:	f7ef fbda 	bl	8000658 <__aeabi_dmul>
 8010ea4:	3501      	adds	r5, #1
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	1076      	asrs	r6, r6, #1
 8010eaa:	3708      	adds	r7, #8
 8010eac:	e773      	b.n	8010d96 <_dtoa_r+0x3d6>
 8010eae:	2502      	movs	r5, #2
 8010eb0:	e775      	b.n	8010d9e <_dtoa_r+0x3de>
 8010eb2:	9e04      	ldr	r6, [sp, #16]
 8010eb4:	465f      	mov	r7, fp
 8010eb6:	e792      	b.n	8010dde <_dtoa_r+0x41e>
 8010eb8:	9900      	ldr	r1, [sp, #0]
 8010eba:	4b50      	ldr	r3, [pc, #320]	; (8010ffc <_dtoa_r+0x63c>)
 8010ebc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ec0:	4431      	add	r1, r6
 8010ec2:	9102      	str	r1, [sp, #8]
 8010ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ec6:	eeb0 9a47 	vmov.f32	s18, s14
 8010eca:	eef0 9a67 	vmov.f32	s19, s15
 8010ece:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010ed2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010ed6:	2900      	cmp	r1, #0
 8010ed8:	d044      	beq.n	8010f64 <_dtoa_r+0x5a4>
 8010eda:	494e      	ldr	r1, [pc, #312]	; (8011014 <_dtoa_r+0x654>)
 8010edc:	2000      	movs	r0, #0
 8010ede:	f7ef fce5 	bl	80008ac <__aeabi_ddiv>
 8010ee2:	ec53 2b19 	vmov	r2, r3, d9
 8010ee6:	f7ef f9ff 	bl	80002e8 <__aeabi_dsub>
 8010eea:	9d00      	ldr	r5, [sp, #0]
 8010eec:	ec41 0b19 	vmov	d9, r0, r1
 8010ef0:	4649      	mov	r1, r9
 8010ef2:	4640      	mov	r0, r8
 8010ef4:	f7ef fe60 	bl	8000bb8 <__aeabi_d2iz>
 8010ef8:	4606      	mov	r6, r0
 8010efa:	f7ef fb43 	bl	8000584 <__aeabi_i2d>
 8010efe:	4602      	mov	r2, r0
 8010f00:	460b      	mov	r3, r1
 8010f02:	4640      	mov	r0, r8
 8010f04:	4649      	mov	r1, r9
 8010f06:	f7ef f9ef 	bl	80002e8 <__aeabi_dsub>
 8010f0a:	3630      	adds	r6, #48	; 0x30
 8010f0c:	f805 6b01 	strb.w	r6, [r5], #1
 8010f10:	ec53 2b19 	vmov	r2, r3, d9
 8010f14:	4680      	mov	r8, r0
 8010f16:	4689      	mov	r9, r1
 8010f18:	f7ef fe10 	bl	8000b3c <__aeabi_dcmplt>
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d164      	bne.n	8010fea <_dtoa_r+0x62a>
 8010f20:	4642      	mov	r2, r8
 8010f22:	464b      	mov	r3, r9
 8010f24:	4937      	ldr	r1, [pc, #220]	; (8011004 <_dtoa_r+0x644>)
 8010f26:	2000      	movs	r0, #0
 8010f28:	f7ef f9de 	bl	80002e8 <__aeabi_dsub>
 8010f2c:	ec53 2b19 	vmov	r2, r3, d9
 8010f30:	f7ef fe04 	bl	8000b3c <__aeabi_dcmplt>
 8010f34:	2800      	cmp	r0, #0
 8010f36:	f040 80b6 	bne.w	80110a6 <_dtoa_r+0x6e6>
 8010f3a:	9b02      	ldr	r3, [sp, #8]
 8010f3c:	429d      	cmp	r5, r3
 8010f3e:	f43f af7c 	beq.w	8010e3a <_dtoa_r+0x47a>
 8010f42:	4b31      	ldr	r3, [pc, #196]	; (8011008 <_dtoa_r+0x648>)
 8010f44:	ec51 0b19 	vmov	r0, r1, d9
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f7ef fb85 	bl	8000658 <__aeabi_dmul>
 8010f4e:	4b2e      	ldr	r3, [pc, #184]	; (8011008 <_dtoa_r+0x648>)
 8010f50:	ec41 0b19 	vmov	d9, r0, r1
 8010f54:	2200      	movs	r2, #0
 8010f56:	4640      	mov	r0, r8
 8010f58:	4649      	mov	r1, r9
 8010f5a:	f7ef fb7d 	bl	8000658 <__aeabi_dmul>
 8010f5e:	4680      	mov	r8, r0
 8010f60:	4689      	mov	r9, r1
 8010f62:	e7c5      	b.n	8010ef0 <_dtoa_r+0x530>
 8010f64:	ec51 0b17 	vmov	r0, r1, d7
 8010f68:	f7ef fb76 	bl	8000658 <__aeabi_dmul>
 8010f6c:	9b02      	ldr	r3, [sp, #8]
 8010f6e:	9d00      	ldr	r5, [sp, #0]
 8010f70:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f72:	ec41 0b19 	vmov	d9, r0, r1
 8010f76:	4649      	mov	r1, r9
 8010f78:	4640      	mov	r0, r8
 8010f7a:	f7ef fe1d 	bl	8000bb8 <__aeabi_d2iz>
 8010f7e:	4606      	mov	r6, r0
 8010f80:	f7ef fb00 	bl	8000584 <__aeabi_i2d>
 8010f84:	3630      	adds	r6, #48	; 0x30
 8010f86:	4602      	mov	r2, r0
 8010f88:	460b      	mov	r3, r1
 8010f8a:	4640      	mov	r0, r8
 8010f8c:	4649      	mov	r1, r9
 8010f8e:	f7ef f9ab 	bl	80002e8 <__aeabi_dsub>
 8010f92:	f805 6b01 	strb.w	r6, [r5], #1
 8010f96:	9b02      	ldr	r3, [sp, #8]
 8010f98:	429d      	cmp	r5, r3
 8010f9a:	4680      	mov	r8, r0
 8010f9c:	4689      	mov	r9, r1
 8010f9e:	f04f 0200 	mov.w	r2, #0
 8010fa2:	d124      	bne.n	8010fee <_dtoa_r+0x62e>
 8010fa4:	4b1b      	ldr	r3, [pc, #108]	; (8011014 <_dtoa_r+0x654>)
 8010fa6:	ec51 0b19 	vmov	r0, r1, d9
 8010faa:	f7ef f99f 	bl	80002ec <__adddf3>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	4640      	mov	r0, r8
 8010fb4:	4649      	mov	r1, r9
 8010fb6:	f7ef fddf 	bl	8000b78 <__aeabi_dcmpgt>
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	d173      	bne.n	80110a6 <_dtoa_r+0x6e6>
 8010fbe:	ec53 2b19 	vmov	r2, r3, d9
 8010fc2:	4914      	ldr	r1, [pc, #80]	; (8011014 <_dtoa_r+0x654>)
 8010fc4:	2000      	movs	r0, #0
 8010fc6:	f7ef f98f 	bl	80002e8 <__aeabi_dsub>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	460b      	mov	r3, r1
 8010fce:	4640      	mov	r0, r8
 8010fd0:	4649      	mov	r1, r9
 8010fd2:	f7ef fdb3 	bl	8000b3c <__aeabi_dcmplt>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	f43f af2f 	beq.w	8010e3a <_dtoa_r+0x47a>
 8010fdc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010fde:	1e6b      	subs	r3, r5, #1
 8010fe0:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fe2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010fe6:	2b30      	cmp	r3, #48	; 0x30
 8010fe8:	d0f8      	beq.n	8010fdc <_dtoa_r+0x61c>
 8010fea:	46bb      	mov	fp, r7
 8010fec:	e04a      	b.n	8011084 <_dtoa_r+0x6c4>
 8010fee:	4b06      	ldr	r3, [pc, #24]	; (8011008 <_dtoa_r+0x648>)
 8010ff0:	f7ef fb32 	bl	8000658 <__aeabi_dmul>
 8010ff4:	4680      	mov	r8, r0
 8010ff6:	4689      	mov	r9, r1
 8010ff8:	e7bd      	b.n	8010f76 <_dtoa_r+0x5b6>
 8010ffa:	bf00      	nop
 8010ffc:	08014a68 	.word	0x08014a68
 8011000:	08014a40 	.word	0x08014a40
 8011004:	3ff00000 	.word	0x3ff00000
 8011008:	40240000 	.word	0x40240000
 801100c:	401c0000 	.word	0x401c0000
 8011010:	40140000 	.word	0x40140000
 8011014:	3fe00000 	.word	0x3fe00000
 8011018:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801101c:	9d00      	ldr	r5, [sp, #0]
 801101e:	4642      	mov	r2, r8
 8011020:	464b      	mov	r3, r9
 8011022:	4630      	mov	r0, r6
 8011024:	4639      	mov	r1, r7
 8011026:	f7ef fc41 	bl	80008ac <__aeabi_ddiv>
 801102a:	f7ef fdc5 	bl	8000bb8 <__aeabi_d2iz>
 801102e:	9001      	str	r0, [sp, #4]
 8011030:	f7ef faa8 	bl	8000584 <__aeabi_i2d>
 8011034:	4642      	mov	r2, r8
 8011036:	464b      	mov	r3, r9
 8011038:	f7ef fb0e 	bl	8000658 <__aeabi_dmul>
 801103c:	4602      	mov	r2, r0
 801103e:	460b      	mov	r3, r1
 8011040:	4630      	mov	r0, r6
 8011042:	4639      	mov	r1, r7
 8011044:	f7ef f950 	bl	80002e8 <__aeabi_dsub>
 8011048:	9e01      	ldr	r6, [sp, #4]
 801104a:	9f04      	ldr	r7, [sp, #16]
 801104c:	3630      	adds	r6, #48	; 0x30
 801104e:	f805 6b01 	strb.w	r6, [r5], #1
 8011052:	9e00      	ldr	r6, [sp, #0]
 8011054:	1bae      	subs	r6, r5, r6
 8011056:	42b7      	cmp	r7, r6
 8011058:	4602      	mov	r2, r0
 801105a:	460b      	mov	r3, r1
 801105c:	d134      	bne.n	80110c8 <_dtoa_r+0x708>
 801105e:	f7ef f945 	bl	80002ec <__adddf3>
 8011062:	4642      	mov	r2, r8
 8011064:	464b      	mov	r3, r9
 8011066:	4606      	mov	r6, r0
 8011068:	460f      	mov	r7, r1
 801106a:	f7ef fd85 	bl	8000b78 <__aeabi_dcmpgt>
 801106e:	b9c8      	cbnz	r0, 80110a4 <_dtoa_r+0x6e4>
 8011070:	4642      	mov	r2, r8
 8011072:	464b      	mov	r3, r9
 8011074:	4630      	mov	r0, r6
 8011076:	4639      	mov	r1, r7
 8011078:	f7ef fd56 	bl	8000b28 <__aeabi_dcmpeq>
 801107c:	b110      	cbz	r0, 8011084 <_dtoa_r+0x6c4>
 801107e:	9b01      	ldr	r3, [sp, #4]
 8011080:	07db      	lsls	r3, r3, #31
 8011082:	d40f      	bmi.n	80110a4 <_dtoa_r+0x6e4>
 8011084:	4651      	mov	r1, sl
 8011086:	4620      	mov	r0, r4
 8011088:	f000 fbcc 	bl	8011824 <_Bfree>
 801108c:	2300      	movs	r3, #0
 801108e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011090:	702b      	strb	r3, [r5, #0]
 8011092:	f10b 0301 	add.w	r3, fp, #1
 8011096:	6013      	str	r3, [r2, #0]
 8011098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801109a:	2b00      	cmp	r3, #0
 801109c:	f43f ace2 	beq.w	8010a64 <_dtoa_r+0xa4>
 80110a0:	601d      	str	r5, [r3, #0]
 80110a2:	e4df      	b.n	8010a64 <_dtoa_r+0xa4>
 80110a4:	465f      	mov	r7, fp
 80110a6:	462b      	mov	r3, r5
 80110a8:	461d      	mov	r5, r3
 80110aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110ae:	2a39      	cmp	r2, #57	; 0x39
 80110b0:	d106      	bne.n	80110c0 <_dtoa_r+0x700>
 80110b2:	9a00      	ldr	r2, [sp, #0]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d1f7      	bne.n	80110a8 <_dtoa_r+0x6e8>
 80110b8:	9900      	ldr	r1, [sp, #0]
 80110ba:	2230      	movs	r2, #48	; 0x30
 80110bc:	3701      	adds	r7, #1
 80110be:	700a      	strb	r2, [r1, #0]
 80110c0:	781a      	ldrb	r2, [r3, #0]
 80110c2:	3201      	adds	r2, #1
 80110c4:	701a      	strb	r2, [r3, #0]
 80110c6:	e790      	b.n	8010fea <_dtoa_r+0x62a>
 80110c8:	4ba3      	ldr	r3, [pc, #652]	; (8011358 <_dtoa_r+0x998>)
 80110ca:	2200      	movs	r2, #0
 80110cc:	f7ef fac4 	bl	8000658 <__aeabi_dmul>
 80110d0:	2200      	movs	r2, #0
 80110d2:	2300      	movs	r3, #0
 80110d4:	4606      	mov	r6, r0
 80110d6:	460f      	mov	r7, r1
 80110d8:	f7ef fd26 	bl	8000b28 <__aeabi_dcmpeq>
 80110dc:	2800      	cmp	r0, #0
 80110de:	d09e      	beq.n	801101e <_dtoa_r+0x65e>
 80110e0:	e7d0      	b.n	8011084 <_dtoa_r+0x6c4>
 80110e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110e4:	2a00      	cmp	r2, #0
 80110e6:	f000 80ca 	beq.w	801127e <_dtoa_r+0x8be>
 80110ea:	9a07      	ldr	r2, [sp, #28]
 80110ec:	2a01      	cmp	r2, #1
 80110ee:	f300 80ad 	bgt.w	801124c <_dtoa_r+0x88c>
 80110f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110f4:	2a00      	cmp	r2, #0
 80110f6:	f000 80a5 	beq.w	8011244 <_dtoa_r+0x884>
 80110fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80110fe:	9e08      	ldr	r6, [sp, #32]
 8011100:	9d05      	ldr	r5, [sp, #20]
 8011102:	9a05      	ldr	r2, [sp, #20]
 8011104:	441a      	add	r2, r3
 8011106:	9205      	str	r2, [sp, #20]
 8011108:	9a06      	ldr	r2, [sp, #24]
 801110a:	2101      	movs	r1, #1
 801110c:	441a      	add	r2, r3
 801110e:	4620      	mov	r0, r4
 8011110:	9206      	str	r2, [sp, #24]
 8011112:	f000 fc3d 	bl	8011990 <__i2b>
 8011116:	4607      	mov	r7, r0
 8011118:	b165      	cbz	r5, 8011134 <_dtoa_r+0x774>
 801111a:	9b06      	ldr	r3, [sp, #24]
 801111c:	2b00      	cmp	r3, #0
 801111e:	dd09      	ble.n	8011134 <_dtoa_r+0x774>
 8011120:	42ab      	cmp	r3, r5
 8011122:	9a05      	ldr	r2, [sp, #20]
 8011124:	bfa8      	it	ge
 8011126:	462b      	movge	r3, r5
 8011128:	1ad2      	subs	r2, r2, r3
 801112a:	9205      	str	r2, [sp, #20]
 801112c:	9a06      	ldr	r2, [sp, #24]
 801112e:	1aed      	subs	r5, r5, r3
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	9306      	str	r3, [sp, #24]
 8011134:	9b08      	ldr	r3, [sp, #32]
 8011136:	b1f3      	cbz	r3, 8011176 <_dtoa_r+0x7b6>
 8011138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801113a:	2b00      	cmp	r3, #0
 801113c:	f000 80a3 	beq.w	8011286 <_dtoa_r+0x8c6>
 8011140:	2e00      	cmp	r6, #0
 8011142:	dd10      	ble.n	8011166 <_dtoa_r+0x7a6>
 8011144:	4639      	mov	r1, r7
 8011146:	4632      	mov	r2, r6
 8011148:	4620      	mov	r0, r4
 801114a:	f000 fce1 	bl	8011b10 <__pow5mult>
 801114e:	4652      	mov	r2, sl
 8011150:	4601      	mov	r1, r0
 8011152:	4607      	mov	r7, r0
 8011154:	4620      	mov	r0, r4
 8011156:	f000 fc31 	bl	80119bc <__multiply>
 801115a:	4651      	mov	r1, sl
 801115c:	4680      	mov	r8, r0
 801115e:	4620      	mov	r0, r4
 8011160:	f000 fb60 	bl	8011824 <_Bfree>
 8011164:	46c2      	mov	sl, r8
 8011166:	9b08      	ldr	r3, [sp, #32]
 8011168:	1b9a      	subs	r2, r3, r6
 801116a:	d004      	beq.n	8011176 <_dtoa_r+0x7b6>
 801116c:	4651      	mov	r1, sl
 801116e:	4620      	mov	r0, r4
 8011170:	f000 fcce 	bl	8011b10 <__pow5mult>
 8011174:	4682      	mov	sl, r0
 8011176:	2101      	movs	r1, #1
 8011178:	4620      	mov	r0, r4
 801117a:	f000 fc09 	bl	8011990 <__i2b>
 801117e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011180:	2b00      	cmp	r3, #0
 8011182:	4606      	mov	r6, r0
 8011184:	f340 8081 	ble.w	801128a <_dtoa_r+0x8ca>
 8011188:	461a      	mov	r2, r3
 801118a:	4601      	mov	r1, r0
 801118c:	4620      	mov	r0, r4
 801118e:	f000 fcbf 	bl	8011b10 <__pow5mult>
 8011192:	9b07      	ldr	r3, [sp, #28]
 8011194:	2b01      	cmp	r3, #1
 8011196:	4606      	mov	r6, r0
 8011198:	dd7a      	ble.n	8011290 <_dtoa_r+0x8d0>
 801119a:	f04f 0800 	mov.w	r8, #0
 801119e:	6933      	ldr	r3, [r6, #16]
 80111a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80111a4:	6918      	ldr	r0, [r3, #16]
 80111a6:	f000 fba5 	bl	80118f4 <__hi0bits>
 80111aa:	f1c0 0020 	rsb	r0, r0, #32
 80111ae:	9b06      	ldr	r3, [sp, #24]
 80111b0:	4418      	add	r0, r3
 80111b2:	f010 001f 	ands.w	r0, r0, #31
 80111b6:	f000 8094 	beq.w	80112e2 <_dtoa_r+0x922>
 80111ba:	f1c0 0320 	rsb	r3, r0, #32
 80111be:	2b04      	cmp	r3, #4
 80111c0:	f340 8085 	ble.w	80112ce <_dtoa_r+0x90e>
 80111c4:	9b05      	ldr	r3, [sp, #20]
 80111c6:	f1c0 001c 	rsb	r0, r0, #28
 80111ca:	4403      	add	r3, r0
 80111cc:	9305      	str	r3, [sp, #20]
 80111ce:	9b06      	ldr	r3, [sp, #24]
 80111d0:	4403      	add	r3, r0
 80111d2:	4405      	add	r5, r0
 80111d4:	9306      	str	r3, [sp, #24]
 80111d6:	9b05      	ldr	r3, [sp, #20]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	dd05      	ble.n	80111e8 <_dtoa_r+0x828>
 80111dc:	4651      	mov	r1, sl
 80111de:	461a      	mov	r2, r3
 80111e0:	4620      	mov	r0, r4
 80111e2:	f000 fcef 	bl	8011bc4 <__lshift>
 80111e6:	4682      	mov	sl, r0
 80111e8:	9b06      	ldr	r3, [sp, #24]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	dd05      	ble.n	80111fa <_dtoa_r+0x83a>
 80111ee:	4631      	mov	r1, r6
 80111f0:	461a      	mov	r2, r3
 80111f2:	4620      	mov	r0, r4
 80111f4:	f000 fce6 	bl	8011bc4 <__lshift>
 80111f8:	4606      	mov	r6, r0
 80111fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d072      	beq.n	80112e6 <_dtoa_r+0x926>
 8011200:	4631      	mov	r1, r6
 8011202:	4650      	mov	r0, sl
 8011204:	f000 fd4a 	bl	8011c9c <__mcmp>
 8011208:	2800      	cmp	r0, #0
 801120a:	da6c      	bge.n	80112e6 <_dtoa_r+0x926>
 801120c:	2300      	movs	r3, #0
 801120e:	4651      	mov	r1, sl
 8011210:	220a      	movs	r2, #10
 8011212:	4620      	mov	r0, r4
 8011214:	f000 fb28 	bl	8011868 <__multadd>
 8011218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801121a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801121e:	4682      	mov	sl, r0
 8011220:	2b00      	cmp	r3, #0
 8011222:	f000 81b0 	beq.w	8011586 <_dtoa_r+0xbc6>
 8011226:	2300      	movs	r3, #0
 8011228:	4639      	mov	r1, r7
 801122a:	220a      	movs	r2, #10
 801122c:	4620      	mov	r0, r4
 801122e:	f000 fb1b 	bl	8011868 <__multadd>
 8011232:	9b01      	ldr	r3, [sp, #4]
 8011234:	2b00      	cmp	r3, #0
 8011236:	4607      	mov	r7, r0
 8011238:	f300 8096 	bgt.w	8011368 <_dtoa_r+0x9a8>
 801123c:	9b07      	ldr	r3, [sp, #28]
 801123e:	2b02      	cmp	r3, #2
 8011240:	dc59      	bgt.n	80112f6 <_dtoa_r+0x936>
 8011242:	e091      	b.n	8011368 <_dtoa_r+0x9a8>
 8011244:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011246:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801124a:	e758      	b.n	80110fe <_dtoa_r+0x73e>
 801124c:	9b04      	ldr	r3, [sp, #16]
 801124e:	1e5e      	subs	r6, r3, #1
 8011250:	9b08      	ldr	r3, [sp, #32]
 8011252:	42b3      	cmp	r3, r6
 8011254:	bfbf      	itttt	lt
 8011256:	9b08      	ldrlt	r3, [sp, #32]
 8011258:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801125a:	9608      	strlt	r6, [sp, #32]
 801125c:	1af3      	sublt	r3, r6, r3
 801125e:	bfb4      	ite	lt
 8011260:	18d2      	addlt	r2, r2, r3
 8011262:	1b9e      	subge	r6, r3, r6
 8011264:	9b04      	ldr	r3, [sp, #16]
 8011266:	bfbc      	itt	lt
 8011268:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801126a:	2600      	movlt	r6, #0
 801126c:	2b00      	cmp	r3, #0
 801126e:	bfb7      	itett	lt
 8011270:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011274:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011278:	1a9d      	sublt	r5, r3, r2
 801127a:	2300      	movlt	r3, #0
 801127c:	e741      	b.n	8011102 <_dtoa_r+0x742>
 801127e:	9e08      	ldr	r6, [sp, #32]
 8011280:	9d05      	ldr	r5, [sp, #20]
 8011282:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011284:	e748      	b.n	8011118 <_dtoa_r+0x758>
 8011286:	9a08      	ldr	r2, [sp, #32]
 8011288:	e770      	b.n	801116c <_dtoa_r+0x7ac>
 801128a:	9b07      	ldr	r3, [sp, #28]
 801128c:	2b01      	cmp	r3, #1
 801128e:	dc19      	bgt.n	80112c4 <_dtoa_r+0x904>
 8011290:	9b02      	ldr	r3, [sp, #8]
 8011292:	b9bb      	cbnz	r3, 80112c4 <_dtoa_r+0x904>
 8011294:	9b03      	ldr	r3, [sp, #12]
 8011296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801129a:	b99b      	cbnz	r3, 80112c4 <_dtoa_r+0x904>
 801129c:	9b03      	ldr	r3, [sp, #12]
 801129e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80112a2:	0d1b      	lsrs	r3, r3, #20
 80112a4:	051b      	lsls	r3, r3, #20
 80112a6:	b183      	cbz	r3, 80112ca <_dtoa_r+0x90a>
 80112a8:	9b05      	ldr	r3, [sp, #20]
 80112aa:	3301      	adds	r3, #1
 80112ac:	9305      	str	r3, [sp, #20]
 80112ae:	9b06      	ldr	r3, [sp, #24]
 80112b0:	3301      	adds	r3, #1
 80112b2:	9306      	str	r3, [sp, #24]
 80112b4:	f04f 0801 	mov.w	r8, #1
 80112b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	f47f af6f 	bne.w	801119e <_dtoa_r+0x7de>
 80112c0:	2001      	movs	r0, #1
 80112c2:	e774      	b.n	80111ae <_dtoa_r+0x7ee>
 80112c4:	f04f 0800 	mov.w	r8, #0
 80112c8:	e7f6      	b.n	80112b8 <_dtoa_r+0x8f8>
 80112ca:	4698      	mov	r8, r3
 80112cc:	e7f4      	b.n	80112b8 <_dtoa_r+0x8f8>
 80112ce:	d082      	beq.n	80111d6 <_dtoa_r+0x816>
 80112d0:	9a05      	ldr	r2, [sp, #20]
 80112d2:	331c      	adds	r3, #28
 80112d4:	441a      	add	r2, r3
 80112d6:	9205      	str	r2, [sp, #20]
 80112d8:	9a06      	ldr	r2, [sp, #24]
 80112da:	441a      	add	r2, r3
 80112dc:	441d      	add	r5, r3
 80112de:	9206      	str	r2, [sp, #24]
 80112e0:	e779      	b.n	80111d6 <_dtoa_r+0x816>
 80112e2:	4603      	mov	r3, r0
 80112e4:	e7f4      	b.n	80112d0 <_dtoa_r+0x910>
 80112e6:	9b04      	ldr	r3, [sp, #16]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	dc37      	bgt.n	801135c <_dtoa_r+0x99c>
 80112ec:	9b07      	ldr	r3, [sp, #28]
 80112ee:	2b02      	cmp	r3, #2
 80112f0:	dd34      	ble.n	801135c <_dtoa_r+0x99c>
 80112f2:	9b04      	ldr	r3, [sp, #16]
 80112f4:	9301      	str	r3, [sp, #4]
 80112f6:	9b01      	ldr	r3, [sp, #4]
 80112f8:	b963      	cbnz	r3, 8011314 <_dtoa_r+0x954>
 80112fa:	4631      	mov	r1, r6
 80112fc:	2205      	movs	r2, #5
 80112fe:	4620      	mov	r0, r4
 8011300:	f000 fab2 	bl	8011868 <__multadd>
 8011304:	4601      	mov	r1, r0
 8011306:	4606      	mov	r6, r0
 8011308:	4650      	mov	r0, sl
 801130a:	f000 fcc7 	bl	8011c9c <__mcmp>
 801130e:	2800      	cmp	r0, #0
 8011310:	f73f adbb 	bgt.w	8010e8a <_dtoa_r+0x4ca>
 8011314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011316:	9d00      	ldr	r5, [sp, #0]
 8011318:	ea6f 0b03 	mvn.w	fp, r3
 801131c:	f04f 0800 	mov.w	r8, #0
 8011320:	4631      	mov	r1, r6
 8011322:	4620      	mov	r0, r4
 8011324:	f000 fa7e 	bl	8011824 <_Bfree>
 8011328:	2f00      	cmp	r7, #0
 801132a:	f43f aeab 	beq.w	8011084 <_dtoa_r+0x6c4>
 801132e:	f1b8 0f00 	cmp.w	r8, #0
 8011332:	d005      	beq.n	8011340 <_dtoa_r+0x980>
 8011334:	45b8      	cmp	r8, r7
 8011336:	d003      	beq.n	8011340 <_dtoa_r+0x980>
 8011338:	4641      	mov	r1, r8
 801133a:	4620      	mov	r0, r4
 801133c:	f000 fa72 	bl	8011824 <_Bfree>
 8011340:	4639      	mov	r1, r7
 8011342:	4620      	mov	r0, r4
 8011344:	f000 fa6e 	bl	8011824 <_Bfree>
 8011348:	e69c      	b.n	8011084 <_dtoa_r+0x6c4>
 801134a:	2600      	movs	r6, #0
 801134c:	4637      	mov	r7, r6
 801134e:	e7e1      	b.n	8011314 <_dtoa_r+0x954>
 8011350:	46bb      	mov	fp, r7
 8011352:	4637      	mov	r7, r6
 8011354:	e599      	b.n	8010e8a <_dtoa_r+0x4ca>
 8011356:	bf00      	nop
 8011358:	40240000 	.word	0x40240000
 801135c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801135e:	2b00      	cmp	r3, #0
 8011360:	f000 80c8 	beq.w	80114f4 <_dtoa_r+0xb34>
 8011364:	9b04      	ldr	r3, [sp, #16]
 8011366:	9301      	str	r3, [sp, #4]
 8011368:	2d00      	cmp	r5, #0
 801136a:	dd05      	ble.n	8011378 <_dtoa_r+0x9b8>
 801136c:	4639      	mov	r1, r7
 801136e:	462a      	mov	r2, r5
 8011370:	4620      	mov	r0, r4
 8011372:	f000 fc27 	bl	8011bc4 <__lshift>
 8011376:	4607      	mov	r7, r0
 8011378:	f1b8 0f00 	cmp.w	r8, #0
 801137c:	d05b      	beq.n	8011436 <_dtoa_r+0xa76>
 801137e:	6879      	ldr	r1, [r7, #4]
 8011380:	4620      	mov	r0, r4
 8011382:	f000 fa0f 	bl	80117a4 <_Balloc>
 8011386:	4605      	mov	r5, r0
 8011388:	b928      	cbnz	r0, 8011396 <_dtoa_r+0x9d6>
 801138a:	4b83      	ldr	r3, [pc, #524]	; (8011598 <_dtoa_r+0xbd8>)
 801138c:	4602      	mov	r2, r0
 801138e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011392:	f7ff bb2e 	b.w	80109f2 <_dtoa_r+0x32>
 8011396:	693a      	ldr	r2, [r7, #16]
 8011398:	3202      	adds	r2, #2
 801139a:	0092      	lsls	r2, r2, #2
 801139c:	f107 010c 	add.w	r1, r7, #12
 80113a0:	300c      	adds	r0, #12
 80113a2:	f7ff fa76 	bl	8010892 <memcpy>
 80113a6:	2201      	movs	r2, #1
 80113a8:	4629      	mov	r1, r5
 80113aa:	4620      	mov	r0, r4
 80113ac:	f000 fc0a 	bl	8011bc4 <__lshift>
 80113b0:	9b00      	ldr	r3, [sp, #0]
 80113b2:	3301      	adds	r3, #1
 80113b4:	9304      	str	r3, [sp, #16]
 80113b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113ba:	4413      	add	r3, r2
 80113bc:	9308      	str	r3, [sp, #32]
 80113be:	9b02      	ldr	r3, [sp, #8]
 80113c0:	f003 0301 	and.w	r3, r3, #1
 80113c4:	46b8      	mov	r8, r7
 80113c6:	9306      	str	r3, [sp, #24]
 80113c8:	4607      	mov	r7, r0
 80113ca:	9b04      	ldr	r3, [sp, #16]
 80113cc:	4631      	mov	r1, r6
 80113ce:	3b01      	subs	r3, #1
 80113d0:	4650      	mov	r0, sl
 80113d2:	9301      	str	r3, [sp, #4]
 80113d4:	f7ff fa6b 	bl	80108ae <quorem>
 80113d8:	4641      	mov	r1, r8
 80113da:	9002      	str	r0, [sp, #8]
 80113dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80113e0:	4650      	mov	r0, sl
 80113e2:	f000 fc5b 	bl	8011c9c <__mcmp>
 80113e6:	463a      	mov	r2, r7
 80113e8:	9005      	str	r0, [sp, #20]
 80113ea:	4631      	mov	r1, r6
 80113ec:	4620      	mov	r0, r4
 80113ee:	f000 fc71 	bl	8011cd4 <__mdiff>
 80113f2:	68c2      	ldr	r2, [r0, #12]
 80113f4:	4605      	mov	r5, r0
 80113f6:	bb02      	cbnz	r2, 801143a <_dtoa_r+0xa7a>
 80113f8:	4601      	mov	r1, r0
 80113fa:	4650      	mov	r0, sl
 80113fc:	f000 fc4e 	bl	8011c9c <__mcmp>
 8011400:	4602      	mov	r2, r0
 8011402:	4629      	mov	r1, r5
 8011404:	4620      	mov	r0, r4
 8011406:	9209      	str	r2, [sp, #36]	; 0x24
 8011408:	f000 fa0c 	bl	8011824 <_Bfree>
 801140c:	9b07      	ldr	r3, [sp, #28]
 801140e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011410:	9d04      	ldr	r5, [sp, #16]
 8011412:	ea43 0102 	orr.w	r1, r3, r2
 8011416:	9b06      	ldr	r3, [sp, #24]
 8011418:	4319      	orrs	r1, r3
 801141a:	d110      	bne.n	801143e <_dtoa_r+0xa7e>
 801141c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011420:	d029      	beq.n	8011476 <_dtoa_r+0xab6>
 8011422:	9b05      	ldr	r3, [sp, #20]
 8011424:	2b00      	cmp	r3, #0
 8011426:	dd02      	ble.n	801142e <_dtoa_r+0xa6e>
 8011428:	9b02      	ldr	r3, [sp, #8]
 801142a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801142e:	9b01      	ldr	r3, [sp, #4]
 8011430:	f883 9000 	strb.w	r9, [r3]
 8011434:	e774      	b.n	8011320 <_dtoa_r+0x960>
 8011436:	4638      	mov	r0, r7
 8011438:	e7ba      	b.n	80113b0 <_dtoa_r+0x9f0>
 801143a:	2201      	movs	r2, #1
 801143c:	e7e1      	b.n	8011402 <_dtoa_r+0xa42>
 801143e:	9b05      	ldr	r3, [sp, #20]
 8011440:	2b00      	cmp	r3, #0
 8011442:	db04      	blt.n	801144e <_dtoa_r+0xa8e>
 8011444:	9907      	ldr	r1, [sp, #28]
 8011446:	430b      	orrs	r3, r1
 8011448:	9906      	ldr	r1, [sp, #24]
 801144a:	430b      	orrs	r3, r1
 801144c:	d120      	bne.n	8011490 <_dtoa_r+0xad0>
 801144e:	2a00      	cmp	r2, #0
 8011450:	dded      	ble.n	801142e <_dtoa_r+0xa6e>
 8011452:	4651      	mov	r1, sl
 8011454:	2201      	movs	r2, #1
 8011456:	4620      	mov	r0, r4
 8011458:	f000 fbb4 	bl	8011bc4 <__lshift>
 801145c:	4631      	mov	r1, r6
 801145e:	4682      	mov	sl, r0
 8011460:	f000 fc1c 	bl	8011c9c <__mcmp>
 8011464:	2800      	cmp	r0, #0
 8011466:	dc03      	bgt.n	8011470 <_dtoa_r+0xab0>
 8011468:	d1e1      	bne.n	801142e <_dtoa_r+0xa6e>
 801146a:	f019 0f01 	tst.w	r9, #1
 801146e:	d0de      	beq.n	801142e <_dtoa_r+0xa6e>
 8011470:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011474:	d1d8      	bne.n	8011428 <_dtoa_r+0xa68>
 8011476:	9a01      	ldr	r2, [sp, #4]
 8011478:	2339      	movs	r3, #57	; 0x39
 801147a:	7013      	strb	r3, [r2, #0]
 801147c:	462b      	mov	r3, r5
 801147e:	461d      	mov	r5, r3
 8011480:	3b01      	subs	r3, #1
 8011482:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011486:	2a39      	cmp	r2, #57	; 0x39
 8011488:	d06c      	beq.n	8011564 <_dtoa_r+0xba4>
 801148a:	3201      	adds	r2, #1
 801148c:	701a      	strb	r2, [r3, #0]
 801148e:	e747      	b.n	8011320 <_dtoa_r+0x960>
 8011490:	2a00      	cmp	r2, #0
 8011492:	dd07      	ble.n	80114a4 <_dtoa_r+0xae4>
 8011494:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011498:	d0ed      	beq.n	8011476 <_dtoa_r+0xab6>
 801149a:	9a01      	ldr	r2, [sp, #4]
 801149c:	f109 0301 	add.w	r3, r9, #1
 80114a0:	7013      	strb	r3, [r2, #0]
 80114a2:	e73d      	b.n	8011320 <_dtoa_r+0x960>
 80114a4:	9b04      	ldr	r3, [sp, #16]
 80114a6:	9a08      	ldr	r2, [sp, #32]
 80114a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80114ac:	4293      	cmp	r3, r2
 80114ae:	d043      	beq.n	8011538 <_dtoa_r+0xb78>
 80114b0:	4651      	mov	r1, sl
 80114b2:	2300      	movs	r3, #0
 80114b4:	220a      	movs	r2, #10
 80114b6:	4620      	mov	r0, r4
 80114b8:	f000 f9d6 	bl	8011868 <__multadd>
 80114bc:	45b8      	cmp	r8, r7
 80114be:	4682      	mov	sl, r0
 80114c0:	f04f 0300 	mov.w	r3, #0
 80114c4:	f04f 020a 	mov.w	r2, #10
 80114c8:	4641      	mov	r1, r8
 80114ca:	4620      	mov	r0, r4
 80114cc:	d107      	bne.n	80114de <_dtoa_r+0xb1e>
 80114ce:	f000 f9cb 	bl	8011868 <__multadd>
 80114d2:	4680      	mov	r8, r0
 80114d4:	4607      	mov	r7, r0
 80114d6:	9b04      	ldr	r3, [sp, #16]
 80114d8:	3301      	adds	r3, #1
 80114da:	9304      	str	r3, [sp, #16]
 80114dc:	e775      	b.n	80113ca <_dtoa_r+0xa0a>
 80114de:	f000 f9c3 	bl	8011868 <__multadd>
 80114e2:	4639      	mov	r1, r7
 80114e4:	4680      	mov	r8, r0
 80114e6:	2300      	movs	r3, #0
 80114e8:	220a      	movs	r2, #10
 80114ea:	4620      	mov	r0, r4
 80114ec:	f000 f9bc 	bl	8011868 <__multadd>
 80114f0:	4607      	mov	r7, r0
 80114f2:	e7f0      	b.n	80114d6 <_dtoa_r+0xb16>
 80114f4:	9b04      	ldr	r3, [sp, #16]
 80114f6:	9301      	str	r3, [sp, #4]
 80114f8:	9d00      	ldr	r5, [sp, #0]
 80114fa:	4631      	mov	r1, r6
 80114fc:	4650      	mov	r0, sl
 80114fe:	f7ff f9d6 	bl	80108ae <quorem>
 8011502:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011506:	9b00      	ldr	r3, [sp, #0]
 8011508:	f805 9b01 	strb.w	r9, [r5], #1
 801150c:	1aea      	subs	r2, r5, r3
 801150e:	9b01      	ldr	r3, [sp, #4]
 8011510:	4293      	cmp	r3, r2
 8011512:	dd07      	ble.n	8011524 <_dtoa_r+0xb64>
 8011514:	4651      	mov	r1, sl
 8011516:	2300      	movs	r3, #0
 8011518:	220a      	movs	r2, #10
 801151a:	4620      	mov	r0, r4
 801151c:	f000 f9a4 	bl	8011868 <__multadd>
 8011520:	4682      	mov	sl, r0
 8011522:	e7ea      	b.n	80114fa <_dtoa_r+0xb3a>
 8011524:	9b01      	ldr	r3, [sp, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	bfc8      	it	gt
 801152a:	461d      	movgt	r5, r3
 801152c:	9b00      	ldr	r3, [sp, #0]
 801152e:	bfd8      	it	le
 8011530:	2501      	movle	r5, #1
 8011532:	441d      	add	r5, r3
 8011534:	f04f 0800 	mov.w	r8, #0
 8011538:	4651      	mov	r1, sl
 801153a:	2201      	movs	r2, #1
 801153c:	4620      	mov	r0, r4
 801153e:	f000 fb41 	bl	8011bc4 <__lshift>
 8011542:	4631      	mov	r1, r6
 8011544:	4682      	mov	sl, r0
 8011546:	f000 fba9 	bl	8011c9c <__mcmp>
 801154a:	2800      	cmp	r0, #0
 801154c:	dc96      	bgt.n	801147c <_dtoa_r+0xabc>
 801154e:	d102      	bne.n	8011556 <_dtoa_r+0xb96>
 8011550:	f019 0f01 	tst.w	r9, #1
 8011554:	d192      	bne.n	801147c <_dtoa_r+0xabc>
 8011556:	462b      	mov	r3, r5
 8011558:	461d      	mov	r5, r3
 801155a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801155e:	2a30      	cmp	r2, #48	; 0x30
 8011560:	d0fa      	beq.n	8011558 <_dtoa_r+0xb98>
 8011562:	e6dd      	b.n	8011320 <_dtoa_r+0x960>
 8011564:	9a00      	ldr	r2, [sp, #0]
 8011566:	429a      	cmp	r2, r3
 8011568:	d189      	bne.n	801147e <_dtoa_r+0xabe>
 801156a:	f10b 0b01 	add.w	fp, fp, #1
 801156e:	2331      	movs	r3, #49	; 0x31
 8011570:	e796      	b.n	80114a0 <_dtoa_r+0xae0>
 8011572:	4b0a      	ldr	r3, [pc, #40]	; (801159c <_dtoa_r+0xbdc>)
 8011574:	f7ff ba99 	b.w	8010aaa <_dtoa_r+0xea>
 8011578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801157a:	2b00      	cmp	r3, #0
 801157c:	f47f aa6d 	bne.w	8010a5a <_dtoa_r+0x9a>
 8011580:	4b07      	ldr	r3, [pc, #28]	; (80115a0 <_dtoa_r+0xbe0>)
 8011582:	f7ff ba92 	b.w	8010aaa <_dtoa_r+0xea>
 8011586:	9b01      	ldr	r3, [sp, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	dcb5      	bgt.n	80114f8 <_dtoa_r+0xb38>
 801158c:	9b07      	ldr	r3, [sp, #28]
 801158e:	2b02      	cmp	r3, #2
 8011590:	f73f aeb1 	bgt.w	80112f6 <_dtoa_r+0x936>
 8011594:	e7b0      	b.n	80114f8 <_dtoa_r+0xb38>
 8011596:	bf00      	nop
 8011598:	080149d1 	.word	0x080149d1
 801159c:	08014931 	.word	0x08014931
 80115a0:	08014955 	.word	0x08014955

080115a4 <_free_r>:
 80115a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115a6:	2900      	cmp	r1, #0
 80115a8:	d044      	beq.n	8011634 <_free_r+0x90>
 80115aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115ae:	9001      	str	r0, [sp, #4]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	f1a1 0404 	sub.w	r4, r1, #4
 80115b6:	bfb8      	it	lt
 80115b8:	18e4      	addlt	r4, r4, r3
 80115ba:	f000 f8e7 	bl	801178c <__malloc_lock>
 80115be:	4a1e      	ldr	r2, [pc, #120]	; (8011638 <_free_r+0x94>)
 80115c0:	9801      	ldr	r0, [sp, #4]
 80115c2:	6813      	ldr	r3, [r2, #0]
 80115c4:	b933      	cbnz	r3, 80115d4 <_free_r+0x30>
 80115c6:	6063      	str	r3, [r4, #4]
 80115c8:	6014      	str	r4, [r2, #0]
 80115ca:	b003      	add	sp, #12
 80115cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80115d0:	f000 b8e2 	b.w	8011798 <__malloc_unlock>
 80115d4:	42a3      	cmp	r3, r4
 80115d6:	d908      	bls.n	80115ea <_free_r+0x46>
 80115d8:	6825      	ldr	r5, [r4, #0]
 80115da:	1961      	adds	r1, r4, r5
 80115dc:	428b      	cmp	r3, r1
 80115de:	bf01      	itttt	eq
 80115e0:	6819      	ldreq	r1, [r3, #0]
 80115e2:	685b      	ldreq	r3, [r3, #4]
 80115e4:	1949      	addeq	r1, r1, r5
 80115e6:	6021      	streq	r1, [r4, #0]
 80115e8:	e7ed      	b.n	80115c6 <_free_r+0x22>
 80115ea:	461a      	mov	r2, r3
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	b10b      	cbz	r3, 80115f4 <_free_r+0x50>
 80115f0:	42a3      	cmp	r3, r4
 80115f2:	d9fa      	bls.n	80115ea <_free_r+0x46>
 80115f4:	6811      	ldr	r1, [r2, #0]
 80115f6:	1855      	adds	r5, r2, r1
 80115f8:	42a5      	cmp	r5, r4
 80115fa:	d10b      	bne.n	8011614 <_free_r+0x70>
 80115fc:	6824      	ldr	r4, [r4, #0]
 80115fe:	4421      	add	r1, r4
 8011600:	1854      	adds	r4, r2, r1
 8011602:	42a3      	cmp	r3, r4
 8011604:	6011      	str	r1, [r2, #0]
 8011606:	d1e0      	bne.n	80115ca <_free_r+0x26>
 8011608:	681c      	ldr	r4, [r3, #0]
 801160a:	685b      	ldr	r3, [r3, #4]
 801160c:	6053      	str	r3, [r2, #4]
 801160e:	440c      	add	r4, r1
 8011610:	6014      	str	r4, [r2, #0]
 8011612:	e7da      	b.n	80115ca <_free_r+0x26>
 8011614:	d902      	bls.n	801161c <_free_r+0x78>
 8011616:	230c      	movs	r3, #12
 8011618:	6003      	str	r3, [r0, #0]
 801161a:	e7d6      	b.n	80115ca <_free_r+0x26>
 801161c:	6825      	ldr	r5, [r4, #0]
 801161e:	1961      	adds	r1, r4, r5
 8011620:	428b      	cmp	r3, r1
 8011622:	bf04      	itt	eq
 8011624:	6819      	ldreq	r1, [r3, #0]
 8011626:	685b      	ldreq	r3, [r3, #4]
 8011628:	6063      	str	r3, [r4, #4]
 801162a:	bf04      	itt	eq
 801162c:	1949      	addeq	r1, r1, r5
 801162e:	6021      	streq	r1, [r4, #0]
 8011630:	6054      	str	r4, [r2, #4]
 8011632:	e7ca      	b.n	80115ca <_free_r+0x26>
 8011634:	b003      	add	sp, #12
 8011636:	bd30      	pop	{r4, r5, pc}
 8011638:	2000b870 	.word	0x2000b870

0801163c <malloc>:
 801163c:	4b02      	ldr	r3, [pc, #8]	; (8011648 <malloc+0xc>)
 801163e:	4601      	mov	r1, r0
 8011640:	6818      	ldr	r0, [r3, #0]
 8011642:	f000 b823 	b.w	801168c <_malloc_r>
 8011646:	bf00      	nop
 8011648:	20001d88 	.word	0x20001d88

0801164c <sbrk_aligned>:
 801164c:	b570      	push	{r4, r5, r6, lr}
 801164e:	4e0e      	ldr	r6, [pc, #56]	; (8011688 <sbrk_aligned+0x3c>)
 8011650:	460c      	mov	r4, r1
 8011652:	6831      	ldr	r1, [r6, #0]
 8011654:	4605      	mov	r5, r0
 8011656:	b911      	cbnz	r1, 801165e <sbrk_aligned+0x12>
 8011658:	f000 fe40 	bl	80122dc <_sbrk_r>
 801165c:	6030      	str	r0, [r6, #0]
 801165e:	4621      	mov	r1, r4
 8011660:	4628      	mov	r0, r5
 8011662:	f000 fe3b 	bl	80122dc <_sbrk_r>
 8011666:	1c43      	adds	r3, r0, #1
 8011668:	d00a      	beq.n	8011680 <sbrk_aligned+0x34>
 801166a:	1cc4      	adds	r4, r0, #3
 801166c:	f024 0403 	bic.w	r4, r4, #3
 8011670:	42a0      	cmp	r0, r4
 8011672:	d007      	beq.n	8011684 <sbrk_aligned+0x38>
 8011674:	1a21      	subs	r1, r4, r0
 8011676:	4628      	mov	r0, r5
 8011678:	f000 fe30 	bl	80122dc <_sbrk_r>
 801167c:	3001      	adds	r0, #1
 801167e:	d101      	bne.n	8011684 <sbrk_aligned+0x38>
 8011680:	f04f 34ff 	mov.w	r4, #4294967295
 8011684:	4620      	mov	r0, r4
 8011686:	bd70      	pop	{r4, r5, r6, pc}
 8011688:	2000b874 	.word	0x2000b874

0801168c <_malloc_r>:
 801168c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011690:	1ccd      	adds	r5, r1, #3
 8011692:	f025 0503 	bic.w	r5, r5, #3
 8011696:	3508      	adds	r5, #8
 8011698:	2d0c      	cmp	r5, #12
 801169a:	bf38      	it	cc
 801169c:	250c      	movcc	r5, #12
 801169e:	2d00      	cmp	r5, #0
 80116a0:	4607      	mov	r7, r0
 80116a2:	db01      	blt.n	80116a8 <_malloc_r+0x1c>
 80116a4:	42a9      	cmp	r1, r5
 80116a6:	d905      	bls.n	80116b4 <_malloc_r+0x28>
 80116a8:	230c      	movs	r3, #12
 80116aa:	603b      	str	r3, [r7, #0]
 80116ac:	2600      	movs	r6, #0
 80116ae:	4630      	mov	r0, r6
 80116b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011788 <_malloc_r+0xfc>
 80116b8:	f000 f868 	bl	801178c <__malloc_lock>
 80116bc:	f8d8 3000 	ldr.w	r3, [r8]
 80116c0:	461c      	mov	r4, r3
 80116c2:	bb5c      	cbnz	r4, 801171c <_malloc_r+0x90>
 80116c4:	4629      	mov	r1, r5
 80116c6:	4638      	mov	r0, r7
 80116c8:	f7ff ffc0 	bl	801164c <sbrk_aligned>
 80116cc:	1c43      	adds	r3, r0, #1
 80116ce:	4604      	mov	r4, r0
 80116d0:	d155      	bne.n	801177e <_malloc_r+0xf2>
 80116d2:	f8d8 4000 	ldr.w	r4, [r8]
 80116d6:	4626      	mov	r6, r4
 80116d8:	2e00      	cmp	r6, #0
 80116da:	d145      	bne.n	8011768 <_malloc_r+0xdc>
 80116dc:	2c00      	cmp	r4, #0
 80116de:	d048      	beq.n	8011772 <_malloc_r+0xe6>
 80116e0:	6823      	ldr	r3, [r4, #0]
 80116e2:	4631      	mov	r1, r6
 80116e4:	4638      	mov	r0, r7
 80116e6:	eb04 0903 	add.w	r9, r4, r3
 80116ea:	f000 fdf7 	bl	80122dc <_sbrk_r>
 80116ee:	4581      	cmp	r9, r0
 80116f0:	d13f      	bne.n	8011772 <_malloc_r+0xe6>
 80116f2:	6821      	ldr	r1, [r4, #0]
 80116f4:	1a6d      	subs	r5, r5, r1
 80116f6:	4629      	mov	r1, r5
 80116f8:	4638      	mov	r0, r7
 80116fa:	f7ff ffa7 	bl	801164c <sbrk_aligned>
 80116fe:	3001      	adds	r0, #1
 8011700:	d037      	beq.n	8011772 <_malloc_r+0xe6>
 8011702:	6823      	ldr	r3, [r4, #0]
 8011704:	442b      	add	r3, r5
 8011706:	6023      	str	r3, [r4, #0]
 8011708:	f8d8 3000 	ldr.w	r3, [r8]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d038      	beq.n	8011782 <_malloc_r+0xf6>
 8011710:	685a      	ldr	r2, [r3, #4]
 8011712:	42a2      	cmp	r2, r4
 8011714:	d12b      	bne.n	801176e <_malloc_r+0xe2>
 8011716:	2200      	movs	r2, #0
 8011718:	605a      	str	r2, [r3, #4]
 801171a:	e00f      	b.n	801173c <_malloc_r+0xb0>
 801171c:	6822      	ldr	r2, [r4, #0]
 801171e:	1b52      	subs	r2, r2, r5
 8011720:	d41f      	bmi.n	8011762 <_malloc_r+0xd6>
 8011722:	2a0b      	cmp	r2, #11
 8011724:	d917      	bls.n	8011756 <_malloc_r+0xca>
 8011726:	1961      	adds	r1, r4, r5
 8011728:	42a3      	cmp	r3, r4
 801172a:	6025      	str	r5, [r4, #0]
 801172c:	bf18      	it	ne
 801172e:	6059      	strne	r1, [r3, #4]
 8011730:	6863      	ldr	r3, [r4, #4]
 8011732:	bf08      	it	eq
 8011734:	f8c8 1000 	streq.w	r1, [r8]
 8011738:	5162      	str	r2, [r4, r5]
 801173a:	604b      	str	r3, [r1, #4]
 801173c:	4638      	mov	r0, r7
 801173e:	f104 060b 	add.w	r6, r4, #11
 8011742:	f000 f829 	bl	8011798 <__malloc_unlock>
 8011746:	f026 0607 	bic.w	r6, r6, #7
 801174a:	1d23      	adds	r3, r4, #4
 801174c:	1af2      	subs	r2, r6, r3
 801174e:	d0ae      	beq.n	80116ae <_malloc_r+0x22>
 8011750:	1b9b      	subs	r3, r3, r6
 8011752:	50a3      	str	r3, [r4, r2]
 8011754:	e7ab      	b.n	80116ae <_malloc_r+0x22>
 8011756:	42a3      	cmp	r3, r4
 8011758:	6862      	ldr	r2, [r4, #4]
 801175a:	d1dd      	bne.n	8011718 <_malloc_r+0x8c>
 801175c:	f8c8 2000 	str.w	r2, [r8]
 8011760:	e7ec      	b.n	801173c <_malloc_r+0xb0>
 8011762:	4623      	mov	r3, r4
 8011764:	6864      	ldr	r4, [r4, #4]
 8011766:	e7ac      	b.n	80116c2 <_malloc_r+0x36>
 8011768:	4634      	mov	r4, r6
 801176a:	6876      	ldr	r6, [r6, #4]
 801176c:	e7b4      	b.n	80116d8 <_malloc_r+0x4c>
 801176e:	4613      	mov	r3, r2
 8011770:	e7cc      	b.n	801170c <_malloc_r+0x80>
 8011772:	230c      	movs	r3, #12
 8011774:	603b      	str	r3, [r7, #0]
 8011776:	4638      	mov	r0, r7
 8011778:	f000 f80e 	bl	8011798 <__malloc_unlock>
 801177c:	e797      	b.n	80116ae <_malloc_r+0x22>
 801177e:	6025      	str	r5, [r4, #0]
 8011780:	e7dc      	b.n	801173c <_malloc_r+0xb0>
 8011782:	605b      	str	r3, [r3, #4]
 8011784:	deff      	udf	#255	; 0xff
 8011786:	bf00      	nop
 8011788:	2000b870 	.word	0x2000b870

0801178c <__malloc_lock>:
 801178c:	4801      	ldr	r0, [pc, #4]	; (8011794 <__malloc_lock+0x8>)
 801178e:	f7ff b876 	b.w	801087e <__retarget_lock_acquire_recursive>
 8011792:	bf00      	nop
 8011794:	2000b86c 	.word	0x2000b86c

08011798 <__malloc_unlock>:
 8011798:	4801      	ldr	r0, [pc, #4]	; (80117a0 <__malloc_unlock+0x8>)
 801179a:	f7ff b871 	b.w	8010880 <__retarget_lock_release_recursive>
 801179e:	bf00      	nop
 80117a0:	2000b86c 	.word	0x2000b86c

080117a4 <_Balloc>:
 80117a4:	b570      	push	{r4, r5, r6, lr}
 80117a6:	69c6      	ldr	r6, [r0, #28]
 80117a8:	4604      	mov	r4, r0
 80117aa:	460d      	mov	r5, r1
 80117ac:	b976      	cbnz	r6, 80117cc <_Balloc+0x28>
 80117ae:	2010      	movs	r0, #16
 80117b0:	f7ff ff44 	bl	801163c <malloc>
 80117b4:	4602      	mov	r2, r0
 80117b6:	61e0      	str	r0, [r4, #28]
 80117b8:	b920      	cbnz	r0, 80117c4 <_Balloc+0x20>
 80117ba:	4b18      	ldr	r3, [pc, #96]	; (801181c <_Balloc+0x78>)
 80117bc:	4818      	ldr	r0, [pc, #96]	; (8011820 <_Balloc+0x7c>)
 80117be:	216b      	movs	r1, #107	; 0x6b
 80117c0:	f000 fd9c 	bl	80122fc <__assert_func>
 80117c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117c8:	6006      	str	r6, [r0, #0]
 80117ca:	60c6      	str	r6, [r0, #12]
 80117cc:	69e6      	ldr	r6, [r4, #28]
 80117ce:	68f3      	ldr	r3, [r6, #12]
 80117d0:	b183      	cbz	r3, 80117f4 <_Balloc+0x50>
 80117d2:	69e3      	ldr	r3, [r4, #28]
 80117d4:	68db      	ldr	r3, [r3, #12]
 80117d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80117da:	b9b8      	cbnz	r0, 801180c <_Balloc+0x68>
 80117dc:	2101      	movs	r1, #1
 80117de:	fa01 f605 	lsl.w	r6, r1, r5
 80117e2:	1d72      	adds	r2, r6, #5
 80117e4:	0092      	lsls	r2, r2, #2
 80117e6:	4620      	mov	r0, r4
 80117e8:	f000 fda6 	bl	8012338 <_calloc_r>
 80117ec:	b160      	cbz	r0, 8011808 <_Balloc+0x64>
 80117ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80117f2:	e00e      	b.n	8011812 <_Balloc+0x6e>
 80117f4:	2221      	movs	r2, #33	; 0x21
 80117f6:	2104      	movs	r1, #4
 80117f8:	4620      	mov	r0, r4
 80117fa:	f000 fd9d 	bl	8012338 <_calloc_r>
 80117fe:	69e3      	ldr	r3, [r4, #28]
 8011800:	60f0      	str	r0, [r6, #12]
 8011802:	68db      	ldr	r3, [r3, #12]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d1e4      	bne.n	80117d2 <_Balloc+0x2e>
 8011808:	2000      	movs	r0, #0
 801180a:	bd70      	pop	{r4, r5, r6, pc}
 801180c:	6802      	ldr	r2, [r0, #0]
 801180e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011812:	2300      	movs	r3, #0
 8011814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011818:	e7f7      	b.n	801180a <_Balloc+0x66>
 801181a:	bf00      	nop
 801181c:	08014962 	.word	0x08014962
 8011820:	080149e2 	.word	0x080149e2

08011824 <_Bfree>:
 8011824:	b570      	push	{r4, r5, r6, lr}
 8011826:	69c6      	ldr	r6, [r0, #28]
 8011828:	4605      	mov	r5, r0
 801182a:	460c      	mov	r4, r1
 801182c:	b976      	cbnz	r6, 801184c <_Bfree+0x28>
 801182e:	2010      	movs	r0, #16
 8011830:	f7ff ff04 	bl	801163c <malloc>
 8011834:	4602      	mov	r2, r0
 8011836:	61e8      	str	r0, [r5, #28]
 8011838:	b920      	cbnz	r0, 8011844 <_Bfree+0x20>
 801183a:	4b09      	ldr	r3, [pc, #36]	; (8011860 <_Bfree+0x3c>)
 801183c:	4809      	ldr	r0, [pc, #36]	; (8011864 <_Bfree+0x40>)
 801183e:	218f      	movs	r1, #143	; 0x8f
 8011840:	f000 fd5c 	bl	80122fc <__assert_func>
 8011844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011848:	6006      	str	r6, [r0, #0]
 801184a:	60c6      	str	r6, [r0, #12]
 801184c:	b13c      	cbz	r4, 801185e <_Bfree+0x3a>
 801184e:	69eb      	ldr	r3, [r5, #28]
 8011850:	6862      	ldr	r2, [r4, #4]
 8011852:	68db      	ldr	r3, [r3, #12]
 8011854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011858:	6021      	str	r1, [r4, #0]
 801185a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801185e:	bd70      	pop	{r4, r5, r6, pc}
 8011860:	08014962 	.word	0x08014962
 8011864:	080149e2 	.word	0x080149e2

08011868 <__multadd>:
 8011868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801186c:	690d      	ldr	r5, [r1, #16]
 801186e:	4607      	mov	r7, r0
 8011870:	460c      	mov	r4, r1
 8011872:	461e      	mov	r6, r3
 8011874:	f101 0c14 	add.w	ip, r1, #20
 8011878:	2000      	movs	r0, #0
 801187a:	f8dc 3000 	ldr.w	r3, [ip]
 801187e:	b299      	uxth	r1, r3
 8011880:	fb02 6101 	mla	r1, r2, r1, r6
 8011884:	0c1e      	lsrs	r6, r3, #16
 8011886:	0c0b      	lsrs	r3, r1, #16
 8011888:	fb02 3306 	mla	r3, r2, r6, r3
 801188c:	b289      	uxth	r1, r1
 801188e:	3001      	adds	r0, #1
 8011890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011894:	4285      	cmp	r5, r0
 8011896:	f84c 1b04 	str.w	r1, [ip], #4
 801189a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801189e:	dcec      	bgt.n	801187a <__multadd+0x12>
 80118a0:	b30e      	cbz	r6, 80118e6 <__multadd+0x7e>
 80118a2:	68a3      	ldr	r3, [r4, #8]
 80118a4:	42ab      	cmp	r3, r5
 80118a6:	dc19      	bgt.n	80118dc <__multadd+0x74>
 80118a8:	6861      	ldr	r1, [r4, #4]
 80118aa:	4638      	mov	r0, r7
 80118ac:	3101      	adds	r1, #1
 80118ae:	f7ff ff79 	bl	80117a4 <_Balloc>
 80118b2:	4680      	mov	r8, r0
 80118b4:	b928      	cbnz	r0, 80118c2 <__multadd+0x5a>
 80118b6:	4602      	mov	r2, r0
 80118b8:	4b0c      	ldr	r3, [pc, #48]	; (80118ec <__multadd+0x84>)
 80118ba:	480d      	ldr	r0, [pc, #52]	; (80118f0 <__multadd+0x88>)
 80118bc:	21ba      	movs	r1, #186	; 0xba
 80118be:	f000 fd1d 	bl	80122fc <__assert_func>
 80118c2:	6922      	ldr	r2, [r4, #16]
 80118c4:	3202      	adds	r2, #2
 80118c6:	f104 010c 	add.w	r1, r4, #12
 80118ca:	0092      	lsls	r2, r2, #2
 80118cc:	300c      	adds	r0, #12
 80118ce:	f7fe ffe0 	bl	8010892 <memcpy>
 80118d2:	4621      	mov	r1, r4
 80118d4:	4638      	mov	r0, r7
 80118d6:	f7ff ffa5 	bl	8011824 <_Bfree>
 80118da:	4644      	mov	r4, r8
 80118dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80118e0:	3501      	adds	r5, #1
 80118e2:	615e      	str	r6, [r3, #20]
 80118e4:	6125      	str	r5, [r4, #16]
 80118e6:	4620      	mov	r0, r4
 80118e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ec:	080149d1 	.word	0x080149d1
 80118f0:	080149e2 	.word	0x080149e2

080118f4 <__hi0bits>:
 80118f4:	0c03      	lsrs	r3, r0, #16
 80118f6:	041b      	lsls	r3, r3, #16
 80118f8:	b9d3      	cbnz	r3, 8011930 <__hi0bits+0x3c>
 80118fa:	0400      	lsls	r0, r0, #16
 80118fc:	2310      	movs	r3, #16
 80118fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011902:	bf04      	itt	eq
 8011904:	0200      	lsleq	r0, r0, #8
 8011906:	3308      	addeq	r3, #8
 8011908:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801190c:	bf04      	itt	eq
 801190e:	0100      	lsleq	r0, r0, #4
 8011910:	3304      	addeq	r3, #4
 8011912:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011916:	bf04      	itt	eq
 8011918:	0080      	lsleq	r0, r0, #2
 801191a:	3302      	addeq	r3, #2
 801191c:	2800      	cmp	r0, #0
 801191e:	db05      	blt.n	801192c <__hi0bits+0x38>
 8011920:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011924:	f103 0301 	add.w	r3, r3, #1
 8011928:	bf08      	it	eq
 801192a:	2320      	moveq	r3, #32
 801192c:	4618      	mov	r0, r3
 801192e:	4770      	bx	lr
 8011930:	2300      	movs	r3, #0
 8011932:	e7e4      	b.n	80118fe <__hi0bits+0xa>

08011934 <__lo0bits>:
 8011934:	6803      	ldr	r3, [r0, #0]
 8011936:	f013 0207 	ands.w	r2, r3, #7
 801193a:	d00c      	beq.n	8011956 <__lo0bits+0x22>
 801193c:	07d9      	lsls	r1, r3, #31
 801193e:	d422      	bmi.n	8011986 <__lo0bits+0x52>
 8011940:	079a      	lsls	r2, r3, #30
 8011942:	bf49      	itett	mi
 8011944:	085b      	lsrmi	r3, r3, #1
 8011946:	089b      	lsrpl	r3, r3, #2
 8011948:	6003      	strmi	r3, [r0, #0]
 801194a:	2201      	movmi	r2, #1
 801194c:	bf5c      	itt	pl
 801194e:	6003      	strpl	r3, [r0, #0]
 8011950:	2202      	movpl	r2, #2
 8011952:	4610      	mov	r0, r2
 8011954:	4770      	bx	lr
 8011956:	b299      	uxth	r1, r3
 8011958:	b909      	cbnz	r1, 801195e <__lo0bits+0x2a>
 801195a:	0c1b      	lsrs	r3, r3, #16
 801195c:	2210      	movs	r2, #16
 801195e:	b2d9      	uxtb	r1, r3
 8011960:	b909      	cbnz	r1, 8011966 <__lo0bits+0x32>
 8011962:	3208      	adds	r2, #8
 8011964:	0a1b      	lsrs	r3, r3, #8
 8011966:	0719      	lsls	r1, r3, #28
 8011968:	bf04      	itt	eq
 801196a:	091b      	lsreq	r3, r3, #4
 801196c:	3204      	addeq	r2, #4
 801196e:	0799      	lsls	r1, r3, #30
 8011970:	bf04      	itt	eq
 8011972:	089b      	lsreq	r3, r3, #2
 8011974:	3202      	addeq	r2, #2
 8011976:	07d9      	lsls	r1, r3, #31
 8011978:	d403      	bmi.n	8011982 <__lo0bits+0x4e>
 801197a:	085b      	lsrs	r3, r3, #1
 801197c:	f102 0201 	add.w	r2, r2, #1
 8011980:	d003      	beq.n	801198a <__lo0bits+0x56>
 8011982:	6003      	str	r3, [r0, #0]
 8011984:	e7e5      	b.n	8011952 <__lo0bits+0x1e>
 8011986:	2200      	movs	r2, #0
 8011988:	e7e3      	b.n	8011952 <__lo0bits+0x1e>
 801198a:	2220      	movs	r2, #32
 801198c:	e7e1      	b.n	8011952 <__lo0bits+0x1e>
	...

08011990 <__i2b>:
 8011990:	b510      	push	{r4, lr}
 8011992:	460c      	mov	r4, r1
 8011994:	2101      	movs	r1, #1
 8011996:	f7ff ff05 	bl	80117a4 <_Balloc>
 801199a:	4602      	mov	r2, r0
 801199c:	b928      	cbnz	r0, 80119aa <__i2b+0x1a>
 801199e:	4b05      	ldr	r3, [pc, #20]	; (80119b4 <__i2b+0x24>)
 80119a0:	4805      	ldr	r0, [pc, #20]	; (80119b8 <__i2b+0x28>)
 80119a2:	f240 1145 	movw	r1, #325	; 0x145
 80119a6:	f000 fca9 	bl	80122fc <__assert_func>
 80119aa:	2301      	movs	r3, #1
 80119ac:	6144      	str	r4, [r0, #20]
 80119ae:	6103      	str	r3, [r0, #16]
 80119b0:	bd10      	pop	{r4, pc}
 80119b2:	bf00      	nop
 80119b4:	080149d1 	.word	0x080149d1
 80119b8:	080149e2 	.word	0x080149e2

080119bc <__multiply>:
 80119bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c0:	4691      	mov	r9, r2
 80119c2:	690a      	ldr	r2, [r1, #16]
 80119c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	bfb8      	it	lt
 80119cc:	460b      	movlt	r3, r1
 80119ce:	460c      	mov	r4, r1
 80119d0:	bfbc      	itt	lt
 80119d2:	464c      	movlt	r4, r9
 80119d4:	4699      	movlt	r9, r3
 80119d6:	6927      	ldr	r7, [r4, #16]
 80119d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80119dc:	68a3      	ldr	r3, [r4, #8]
 80119de:	6861      	ldr	r1, [r4, #4]
 80119e0:	eb07 060a 	add.w	r6, r7, sl
 80119e4:	42b3      	cmp	r3, r6
 80119e6:	b085      	sub	sp, #20
 80119e8:	bfb8      	it	lt
 80119ea:	3101      	addlt	r1, #1
 80119ec:	f7ff feda 	bl	80117a4 <_Balloc>
 80119f0:	b930      	cbnz	r0, 8011a00 <__multiply+0x44>
 80119f2:	4602      	mov	r2, r0
 80119f4:	4b44      	ldr	r3, [pc, #272]	; (8011b08 <__multiply+0x14c>)
 80119f6:	4845      	ldr	r0, [pc, #276]	; (8011b0c <__multiply+0x150>)
 80119f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80119fc:	f000 fc7e 	bl	80122fc <__assert_func>
 8011a00:	f100 0514 	add.w	r5, r0, #20
 8011a04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011a08:	462b      	mov	r3, r5
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	4543      	cmp	r3, r8
 8011a0e:	d321      	bcc.n	8011a54 <__multiply+0x98>
 8011a10:	f104 0314 	add.w	r3, r4, #20
 8011a14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011a18:	f109 0314 	add.w	r3, r9, #20
 8011a1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011a20:	9202      	str	r2, [sp, #8]
 8011a22:	1b3a      	subs	r2, r7, r4
 8011a24:	3a15      	subs	r2, #21
 8011a26:	f022 0203 	bic.w	r2, r2, #3
 8011a2a:	3204      	adds	r2, #4
 8011a2c:	f104 0115 	add.w	r1, r4, #21
 8011a30:	428f      	cmp	r7, r1
 8011a32:	bf38      	it	cc
 8011a34:	2204      	movcc	r2, #4
 8011a36:	9201      	str	r2, [sp, #4]
 8011a38:	9a02      	ldr	r2, [sp, #8]
 8011a3a:	9303      	str	r3, [sp, #12]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d80c      	bhi.n	8011a5a <__multiply+0x9e>
 8011a40:	2e00      	cmp	r6, #0
 8011a42:	dd03      	ble.n	8011a4c <__multiply+0x90>
 8011a44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d05b      	beq.n	8011b04 <__multiply+0x148>
 8011a4c:	6106      	str	r6, [r0, #16]
 8011a4e:	b005      	add	sp, #20
 8011a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a54:	f843 2b04 	str.w	r2, [r3], #4
 8011a58:	e7d8      	b.n	8011a0c <__multiply+0x50>
 8011a5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011a5e:	f1ba 0f00 	cmp.w	sl, #0
 8011a62:	d024      	beq.n	8011aae <__multiply+0xf2>
 8011a64:	f104 0e14 	add.w	lr, r4, #20
 8011a68:	46a9      	mov	r9, r5
 8011a6a:	f04f 0c00 	mov.w	ip, #0
 8011a6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011a72:	f8d9 1000 	ldr.w	r1, [r9]
 8011a76:	fa1f fb82 	uxth.w	fp, r2
 8011a7a:	b289      	uxth	r1, r1
 8011a7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011a80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011a84:	f8d9 2000 	ldr.w	r2, [r9]
 8011a88:	4461      	add	r1, ip
 8011a8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011a8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8011a92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011a96:	b289      	uxth	r1, r1
 8011a98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011a9c:	4577      	cmp	r7, lr
 8011a9e:	f849 1b04 	str.w	r1, [r9], #4
 8011aa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011aa6:	d8e2      	bhi.n	8011a6e <__multiply+0xb2>
 8011aa8:	9a01      	ldr	r2, [sp, #4]
 8011aaa:	f845 c002 	str.w	ip, [r5, r2]
 8011aae:	9a03      	ldr	r2, [sp, #12]
 8011ab0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011ab4:	3304      	adds	r3, #4
 8011ab6:	f1b9 0f00 	cmp.w	r9, #0
 8011aba:	d021      	beq.n	8011b00 <__multiply+0x144>
 8011abc:	6829      	ldr	r1, [r5, #0]
 8011abe:	f104 0c14 	add.w	ip, r4, #20
 8011ac2:	46ae      	mov	lr, r5
 8011ac4:	f04f 0a00 	mov.w	sl, #0
 8011ac8:	f8bc b000 	ldrh.w	fp, [ip]
 8011acc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011ad0:	fb09 220b 	mla	r2, r9, fp, r2
 8011ad4:	4452      	add	r2, sl
 8011ad6:	b289      	uxth	r1, r1
 8011ad8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011adc:	f84e 1b04 	str.w	r1, [lr], #4
 8011ae0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011ae4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011ae8:	f8be 1000 	ldrh.w	r1, [lr]
 8011aec:	fb09 110a 	mla	r1, r9, sl, r1
 8011af0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011af4:	4567      	cmp	r7, ip
 8011af6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011afa:	d8e5      	bhi.n	8011ac8 <__multiply+0x10c>
 8011afc:	9a01      	ldr	r2, [sp, #4]
 8011afe:	50a9      	str	r1, [r5, r2]
 8011b00:	3504      	adds	r5, #4
 8011b02:	e799      	b.n	8011a38 <__multiply+0x7c>
 8011b04:	3e01      	subs	r6, #1
 8011b06:	e79b      	b.n	8011a40 <__multiply+0x84>
 8011b08:	080149d1 	.word	0x080149d1
 8011b0c:	080149e2 	.word	0x080149e2

08011b10 <__pow5mult>:
 8011b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b14:	4615      	mov	r5, r2
 8011b16:	f012 0203 	ands.w	r2, r2, #3
 8011b1a:	4606      	mov	r6, r0
 8011b1c:	460f      	mov	r7, r1
 8011b1e:	d007      	beq.n	8011b30 <__pow5mult+0x20>
 8011b20:	4c25      	ldr	r4, [pc, #148]	; (8011bb8 <__pow5mult+0xa8>)
 8011b22:	3a01      	subs	r2, #1
 8011b24:	2300      	movs	r3, #0
 8011b26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011b2a:	f7ff fe9d 	bl	8011868 <__multadd>
 8011b2e:	4607      	mov	r7, r0
 8011b30:	10ad      	asrs	r5, r5, #2
 8011b32:	d03d      	beq.n	8011bb0 <__pow5mult+0xa0>
 8011b34:	69f4      	ldr	r4, [r6, #28]
 8011b36:	b97c      	cbnz	r4, 8011b58 <__pow5mult+0x48>
 8011b38:	2010      	movs	r0, #16
 8011b3a:	f7ff fd7f 	bl	801163c <malloc>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	61f0      	str	r0, [r6, #28]
 8011b42:	b928      	cbnz	r0, 8011b50 <__pow5mult+0x40>
 8011b44:	4b1d      	ldr	r3, [pc, #116]	; (8011bbc <__pow5mult+0xac>)
 8011b46:	481e      	ldr	r0, [pc, #120]	; (8011bc0 <__pow5mult+0xb0>)
 8011b48:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011b4c:	f000 fbd6 	bl	80122fc <__assert_func>
 8011b50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b54:	6004      	str	r4, [r0, #0]
 8011b56:	60c4      	str	r4, [r0, #12]
 8011b58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011b5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011b60:	b94c      	cbnz	r4, 8011b76 <__pow5mult+0x66>
 8011b62:	f240 2171 	movw	r1, #625	; 0x271
 8011b66:	4630      	mov	r0, r6
 8011b68:	f7ff ff12 	bl	8011990 <__i2b>
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011b72:	4604      	mov	r4, r0
 8011b74:	6003      	str	r3, [r0, #0]
 8011b76:	f04f 0900 	mov.w	r9, #0
 8011b7a:	07eb      	lsls	r3, r5, #31
 8011b7c:	d50a      	bpl.n	8011b94 <__pow5mult+0x84>
 8011b7e:	4639      	mov	r1, r7
 8011b80:	4622      	mov	r2, r4
 8011b82:	4630      	mov	r0, r6
 8011b84:	f7ff ff1a 	bl	80119bc <__multiply>
 8011b88:	4639      	mov	r1, r7
 8011b8a:	4680      	mov	r8, r0
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	f7ff fe49 	bl	8011824 <_Bfree>
 8011b92:	4647      	mov	r7, r8
 8011b94:	106d      	asrs	r5, r5, #1
 8011b96:	d00b      	beq.n	8011bb0 <__pow5mult+0xa0>
 8011b98:	6820      	ldr	r0, [r4, #0]
 8011b9a:	b938      	cbnz	r0, 8011bac <__pow5mult+0x9c>
 8011b9c:	4622      	mov	r2, r4
 8011b9e:	4621      	mov	r1, r4
 8011ba0:	4630      	mov	r0, r6
 8011ba2:	f7ff ff0b 	bl	80119bc <__multiply>
 8011ba6:	6020      	str	r0, [r4, #0]
 8011ba8:	f8c0 9000 	str.w	r9, [r0]
 8011bac:	4604      	mov	r4, r0
 8011bae:	e7e4      	b.n	8011b7a <__pow5mult+0x6a>
 8011bb0:	4638      	mov	r0, r7
 8011bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bb6:	bf00      	nop
 8011bb8:	08014b30 	.word	0x08014b30
 8011bbc:	08014962 	.word	0x08014962
 8011bc0:	080149e2 	.word	0x080149e2

08011bc4 <__lshift>:
 8011bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bc8:	460c      	mov	r4, r1
 8011bca:	6849      	ldr	r1, [r1, #4]
 8011bcc:	6923      	ldr	r3, [r4, #16]
 8011bce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011bd2:	68a3      	ldr	r3, [r4, #8]
 8011bd4:	4607      	mov	r7, r0
 8011bd6:	4691      	mov	r9, r2
 8011bd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011bdc:	f108 0601 	add.w	r6, r8, #1
 8011be0:	42b3      	cmp	r3, r6
 8011be2:	db0b      	blt.n	8011bfc <__lshift+0x38>
 8011be4:	4638      	mov	r0, r7
 8011be6:	f7ff fddd 	bl	80117a4 <_Balloc>
 8011bea:	4605      	mov	r5, r0
 8011bec:	b948      	cbnz	r0, 8011c02 <__lshift+0x3e>
 8011bee:	4602      	mov	r2, r0
 8011bf0:	4b28      	ldr	r3, [pc, #160]	; (8011c94 <__lshift+0xd0>)
 8011bf2:	4829      	ldr	r0, [pc, #164]	; (8011c98 <__lshift+0xd4>)
 8011bf4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011bf8:	f000 fb80 	bl	80122fc <__assert_func>
 8011bfc:	3101      	adds	r1, #1
 8011bfe:	005b      	lsls	r3, r3, #1
 8011c00:	e7ee      	b.n	8011be0 <__lshift+0x1c>
 8011c02:	2300      	movs	r3, #0
 8011c04:	f100 0114 	add.w	r1, r0, #20
 8011c08:	f100 0210 	add.w	r2, r0, #16
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	4553      	cmp	r3, sl
 8011c10:	db33      	blt.n	8011c7a <__lshift+0xb6>
 8011c12:	6920      	ldr	r0, [r4, #16]
 8011c14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011c18:	f104 0314 	add.w	r3, r4, #20
 8011c1c:	f019 091f 	ands.w	r9, r9, #31
 8011c20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011c24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011c28:	d02b      	beq.n	8011c82 <__lshift+0xbe>
 8011c2a:	f1c9 0e20 	rsb	lr, r9, #32
 8011c2e:	468a      	mov	sl, r1
 8011c30:	2200      	movs	r2, #0
 8011c32:	6818      	ldr	r0, [r3, #0]
 8011c34:	fa00 f009 	lsl.w	r0, r0, r9
 8011c38:	4310      	orrs	r0, r2
 8011c3a:	f84a 0b04 	str.w	r0, [sl], #4
 8011c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c42:	459c      	cmp	ip, r3
 8011c44:	fa22 f20e 	lsr.w	r2, r2, lr
 8011c48:	d8f3      	bhi.n	8011c32 <__lshift+0x6e>
 8011c4a:	ebac 0304 	sub.w	r3, ip, r4
 8011c4e:	3b15      	subs	r3, #21
 8011c50:	f023 0303 	bic.w	r3, r3, #3
 8011c54:	3304      	adds	r3, #4
 8011c56:	f104 0015 	add.w	r0, r4, #21
 8011c5a:	4584      	cmp	ip, r0
 8011c5c:	bf38      	it	cc
 8011c5e:	2304      	movcc	r3, #4
 8011c60:	50ca      	str	r2, [r1, r3]
 8011c62:	b10a      	cbz	r2, 8011c68 <__lshift+0xa4>
 8011c64:	f108 0602 	add.w	r6, r8, #2
 8011c68:	3e01      	subs	r6, #1
 8011c6a:	4638      	mov	r0, r7
 8011c6c:	612e      	str	r6, [r5, #16]
 8011c6e:	4621      	mov	r1, r4
 8011c70:	f7ff fdd8 	bl	8011824 <_Bfree>
 8011c74:	4628      	mov	r0, r5
 8011c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011c7e:	3301      	adds	r3, #1
 8011c80:	e7c5      	b.n	8011c0e <__lshift+0x4a>
 8011c82:	3904      	subs	r1, #4
 8011c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c88:	f841 2f04 	str.w	r2, [r1, #4]!
 8011c8c:	459c      	cmp	ip, r3
 8011c8e:	d8f9      	bhi.n	8011c84 <__lshift+0xc0>
 8011c90:	e7ea      	b.n	8011c68 <__lshift+0xa4>
 8011c92:	bf00      	nop
 8011c94:	080149d1 	.word	0x080149d1
 8011c98:	080149e2 	.word	0x080149e2

08011c9c <__mcmp>:
 8011c9c:	b530      	push	{r4, r5, lr}
 8011c9e:	6902      	ldr	r2, [r0, #16]
 8011ca0:	690c      	ldr	r4, [r1, #16]
 8011ca2:	1b12      	subs	r2, r2, r4
 8011ca4:	d10e      	bne.n	8011cc4 <__mcmp+0x28>
 8011ca6:	f100 0314 	add.w	r3, r0, #20
 8011caa:	3114      	adds	r1, #20
 8011cac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011cb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011cb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011cb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011cbc:	42a5      	cmp	r5, r4
 8011cbe:	d003      	beq.n	8011cc8 <__mcmp+0x2c>
 8011cc0:	d305      	bcc.n	8011cce <__mcmp+0x32>
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	4610      	mov	r0, r2
 8011cc6:	bd30      	pop	{r4, r5, pc}
 8011cc8:	4283      	cmp	r3, r0
 8011cca:	d3f3      	bcc.n	8011cb4 <__mcmp+0x18>
 8011ccc:	e7fa      	b.n	8011cc4 <__mcmp+0x28>
 8011cce:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd2:	e7f7      	b.n	8011cc4 <__mcmp+0x28>

08011cd4 <__mdiff>:
 8011cd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd8:	460c      	mov	r4, r1
 8011cda:	4606      	mov	r6, r0
 8011cdc:	4611      	mov	r1, r2
 8011cde:	4620      	mov	r0, r4
 8011ce0:	4690      	mov	r8, r2
 8011ce2:	f7ff ffdb 	bl	8011c9c <__mcmp>
 8011ce6:	1e05      	subs	r5, r0, #0
 8011ce8:	d110      	bne.n	8011d0c <__mdiff+0x38>
 8011cea:	4629      	mov	r1, r5
 8011cec:	4630      	mov	r0, r6
 8011cee:	f7ff fd59 	bl	80117a4 <_Balloc>
 8011cf2:	b930      	cbnz	r0, 8011d02 <__mdiff+0x2e>
 8011cf4:	4b3a      	ldr	r3, [pc, #232]	; (8011de0 <__mdiff+0x10c>)
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	f240 2137 	movw	r1, #567	; 0x237
 8011cfc:	4839      	ldr	r0, [pc, #228]	; (8011de4 <__mdiff+0x110>)
 8011cfe:	f000 fafd 	bl	80122fc <__assert_func>
 8011d02:	2301      	movs	r3, #1
 8011d04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011d08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d0c:	bfa4      	itt	ge
 8011d0e:	4643      	movge	r3, r8
 8011d10:	46a0      	movge	r8, r4
 8011d12:	4630      	mov	r0, r6
 8011d14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011d18:	bfa6      	itte	ge
 8011d1a:	461c      	movge	r4, r3
 8011d1c:	2500      	movge	r5, #0
 8011d1e:	2501      	movlt	r5, #1
 8011d20:	f7ff fd40 	bl	80117a4 <_Balloc>
 8011d24:	b920      	cbnz	r0, 8011d30 <__mdiff+0x5c>
 8011d26:	4b2e      	ldr	r3, [pc, #184]	; (8011de0 <__mdiff+0x10c>)
 8011d28:	4602      	mov	r2, r0
 8011d2a:	f240 2145 	movw	r1, #581	; 0x245
 8011d2e:	e7e5      	b.n	8011cfc <__mdiff+0x28>
 8011d30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011d34:	6926      	ldr	r6, [r4, #16]
 8011d36:	60c5      	str	r5, [r0, #12]
 8011d38:	f104 0914 	add.w	r9, r4, #20
 8011d3c:	f108 0514 	add.w	r5, r8, #20
 8011d40:	f100 0e14 	add.w	lr, r0, #20
 8011d44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011d48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011d4c:	f108 0210 	add.w	r2, r8, #16
 8011d50:	46f2      	mov	sl, lr
 8011d52:	2100      	movs	r1, #0
 8011d54:	f859 3b04 	ldr.w	r3, [r9], #4
 8011d58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011d5c:	fa11 f88b 	uxtah	r8, r1, fp
 8011d60:	b299      	uxth	r1, r3
 8011d62:	0c1b      	lsrs	r3, r3, #16
 8011d64:	eba8 0801 	sub.w	r8, r8, r1
 8011d68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011d6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011d70:	fa1f f888 	uxth.w	r8, r8
 8011d74:	1419      	asrs	r1, r3, #16
 8011d76:	454e      	cmp	r6, r9
 8011d78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011d7c:	f84a 3b04 	str.w	r3, [sl], #4
 8011d80:	d8e8      	bhi.n	8011d54 <__mdiff+0x80>
 8011d82:	1b33      	subs	r3, r6, r4
 8011d84:	3b15      	subs	r3, #21
 8011d86:	f023 0303 	bic.w	r3, r3, #3
 8011d8a:	3304      	adds	r3, #4
 8011d8c:	3415      	adds	r4, #21
 8011d8e:	42a6      	cmp	r6, r4
 8011d90:	bf38      	it	cc
 8011d92:	2304      	movcc	r3, #4
 8011d94:	441d      	add	r5, r3
 8011d96:	4473      	add	r3, lr
 8011d98:	469e      	mov	lr, r3
 8011d9a:	462e      	mov	r6, r5
 8011d9c:	4566      	cmp	r6, ip
 8011d9e:	d30e      	bcc.n	8011dbe <__mdiff+0xea>
 8011da0:	f10c 0203 	add.w	r2, ip, #3
 8011da4:	1b52      	subs	r2, r2, r5
 8011da6:	f022 0203 	bic.w	r2, r2, #3
 8011daa:	3d03      	subs	r5, #3
 8011dac:	45ac      	cmp	ip, r5
 8011dae:	bf38      	it	cc
 8011db0:	2200      	movcc	r2, #0
 8011db2:	4413      	add	r3, r2
 8011db4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011db8:	b17a      	cbz	r2, 8011dda <__mdiff+0x106>
 8011dba:	6107      	str	r7, [r0, #16]
 8011dbc:	e7a4      	b.n	8011d08 <__mdiff+0x34>
 8011dbe:	f856 8b04 	ldr.w	r8, [r6], #4
 8011dc2:	fa11 f288 	uxtah	r2, r1, r8
 8011dc6:	1414      	asrs	r4, r2, #16
 8011dc8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011dcc:	b292      	uxth	r2, r2
 8011dce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011dd2:	f84e 2b04 	str.w	r2, [lr], #4
 8011dd6:	1421      	asrs	r1, r4, #16
 8011dd8:	e7e0      	b.n	8011d9c <__mdiff+0xc8>
 8011dda:	3f01      	subs	r7, #1
 8011ddc:	e7ea      	b.n	8011db4 <__mdiff+0xe0>
 8011dde:	bf00      	nop
 8011de0:	080149d1 	.word	0x080149d1
 8011de4:	080149e2 	.word	0x080149e2

08011de8 <__d2b>:
 8011de8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011dec:	460f      	mov	r7, r1
 8011dee:	2101      	movs	r1, #1
 8011df0:	ec59 8b10 	vmov	r8, r9, d0
 8011df4:	4616      	mov	r6, r2
 8011df6:	f7ff fcd5 	bl	80117a4 <_Balloc>
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	b930      	cbnz	r0, 8011e0c <__d2b+0x24>
 8011dfe:	4602      	mov	r2, r0
 8011e00:	4b24      	ldr	r3, [pc, #144]	; (8011e94 <__d2b+0xac>)
 8011e02:	4825      	ldr	r0, [pc, #148]	; (8011e98 <__d2b+0xb0>)
 8011e04:	f240 310f 	movw	r1, #783	; 0x30f
 8011e08:	f000 fa78 	bl	80122fc <__assert_func>
 8011e0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011e10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e14:	bb2d      	cbnz	r5, 8011e62 <__d2b+0x7a>
 8011e16:	9301      	str	r3, [sp, #4]
 8011e18:	f1b8 0300 	subs.w	r3, r8, #0
 8011e1c:	d026      	beq.n	8011e6c <__d2b+0x84>
 8011e1e:	4668      	mov	r0, sp
 8011e20:	9300      	str	r3, [sp, #0]
 8011e22:	f7ff fd87 	bl	8011934 <__lo0bits>
 8011e26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011e2a:	b1e8      	cbz	r0, 8011e68 <__d2b+0x80>
 8011e2c:	f1c0 0320 	rsb	r3, r0, #32
 8011e30:	fa02 f303 	lsl.w	r3, r2, r3
 8011e34:	430b      	orrs	r3, r1
 8011e36:	40c2      	lsrs	r2, r0
 8011e38:	6163      	str	r3, [r4, #20]
 8011e3a:	9201      	str	r2, [sp, #4]
 8011e3c:	9b01      	ldr	r3, [sp, #4]
 8011e3e:	61a3      	str	r3, [r4, #24]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	bf14      	ite	ne
 8011e44:	2202      	movne	r2, #2
 8011e46:	2201      	moveq	r2, #1
 8011e48:	6122      	str	r2, [r4, #16]
 8011e4a:	b1bd      	cbz	r5, 8011e7c <__d2b+0x94>
 8011e4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011e50:	4405      	add	r5, r0
 8011e52:	603d      	str	r5, [r7, #0]
 8011e54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011e58:	6030      	str	r0, [r6, #0]
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	b003      	add	sp, #12
 8011e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e66:	e7d6      	b.n	8011e16 <__d2b+0x2e>
 8011e68:	6161      	str	r1, [r4, #20]
 8011e6a:	e7e7      	b.n	8011e3c <__d2b+0x54>
 8011e6c:	a801      	add	r0, sp, #4
 8011e6e:	f7ff fd61 	bl	8011934 <__lo0bits>
 8011e72:	9b01      	ldr	r3, [sp, #4]
 8011e74:	6163      	str	r3, [r4, #20]
 8011e76:	3020      	adds	r0, #32
 8011e78:	2201      	movs	r2, #1
 8011e7a:	e7e5      	b.n	8011e48 <__d2b+0x60>
 8011e7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011e84:	6038      	str	r0, [r7, #0]
 8011e86:	6918      	ldr	r0, [r3, #16]
 8011e88:	f7ff fd34 	bl	80118f4 <__hi0bits>
 8011e8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011e90:	e7e2      	b.n	8011e58 <__d2b+0x70>
 8011e92:	bf00      	nop
 8011e94:	080149d1 	.word	0x080149d1
 8011e98:	080149e2 	.word	0x080149e2

08011e9c <__ssputs_r>:
 8011e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ea0:	688e      	ldr	r6, [r1, #8]
 8011ea2:	461f      	mov	r7, r3
 8011ea4:	42be      	cmp	r6, r7
 8011ea6:	680b      	ldr	r3, [r1, #0]
 8011ea8:	4682      	mov	sl, r0
 8011eaa:	460c      	mov	r4, r1
 8011eac:	4690      	mov	r8, r2
 8011eae:	d82c      	bhi.n	8011f0a <__ssputs_r+0x6e>
 8011eb0:	898a      	ldrh	r2, [r1, #12]
 8011eb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011eb6:	d026      	beq.n	8011f06 <__ssputs_r+0x6a>
 8011eb8:	6965      	ldr	r5, [r4, #20]
 8011eba:	6909      	ldr	r1, [r1, #16]
 8011ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ec0:	eba3 0901 	sub.w	r9, r3, r1
 8011ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ec8:	1c7b      	adds	r3, r7, #1
 8011eca:	444b      	add	r3, r9
 8011ecc:	106d      	asrs	r5, r5, #1
 8011ece:	429d      	cmp	r5, r3
 8011ed0:	bf38      	it	cc
 8011ed2:	461d      	movcc	r5, r3
 8011ed4:	0553      	lsls	r3, r2, #21
 8011ed6:	d527      	bpl.n	8011f28 <__ssputs_r+0x8c>
 8011ed8:	4629      	mov	r1, r5
 8011eda:	f7ff fbd7 	bl	801168c <_malloc_r>
 8011ede:	4606      	mov	r6, r0
 8011ee0:	b360      	cbz	r0, 8011f3c <__ssputs_r+0xa0>
 8011ee2:	6921      	ldr	r1, [r4, #16]
 8011ee4:	464a      	mov	r2, r9
 8011ee6:	f7fe fcd4 	bl	8010892 <memcpy>
 8011eea:	89a3      	ldrh	r3, [r4, #12]
 8011eec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ef4:	81a3      	strh	r3, [r4, #12]
 8011ef6:	6126      	str	r6, [r4, #16]
 8011ef8:	6165      	str	r5, [r4, #20]
 8011efa:	444e      	add	r6, r9
 8011efc:	eba5 0509 	sub.w	r5, r5, r9
 8011f00:	6026      	str	r6, [r4, #0]
 8011f02:	60a5      	str	r5, [r4, #8]
 8011f04:	463e      	mov	r6, r7
 8011f06:	42be      	cmp	r6, r7
 8011f08:	d900      	bls.n	8011f0c <__ssputs_r+0x70>
 8011f0a:	463e      	mov	r6, r7
 8011f0c:	6820      	ldr	r0, [r4, #0]
 8011f0e:	4632      	mov	r2, r6
 8011f10:	4641      	mov	r1, r8
 8011f12:	f000 f9c9 	bl	80122a8 <memmove>
 8011f16:	68a3      	ldr	r3, [r4, #8]
 8011f18:	1b9b      	subs	r3, r3, r6
 8011f1a:	60a3      	str	r3, [r4, #8]
 8011f1c:	6823      	ldr	r3, [r4, #0]
 8011f1e:	4433      	add	r3, r6
 8011f20:	6023      	str	r3, [r4, #0]
 8011f22:	2000      	movs	r0, #0
 8011f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f28:	462a      	mov	r2, r5
 8011f2a:	f000 fa2d 	bl	8012388 <_realloc_r>
 8011f2e:	4606      	mov	r6, r0
 8011f30:	2800      	cmp	r0, #0
 8011f32:	d1e0      	bne.n	8011ef6 <__ssputs_r+0x5a>
 8011f34:	6921      	ldr	r1, [r4, #16]
 8011f36:	4650      	mov	r0, sl
 8011f38:	f7ff fb34 	bl	80115a4 <_free_r>
 8011f3c:	230c      	movs	r3, #12
 8011f3e:	f8ca 3000 	str.w	r3, [sl]
 8011f42:	89a3      	ldrh	r3, [r4, #12]
 8011f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f48:	81a3      	strh	r3, [r4, #12]
 8011f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f4e:	e7e9      	b.n	8011f24 <__ssputs_r+0x88>

08011f50 <_svfiprintf_r>:
 8011f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f54:	4698      	mov	r8, r3
 8011f56:	898b      	ldrh	r3, [r1, #12]
 8011f58:	061b      	lsls	r3, r3, #24
 8011f5a:	b09d      	sub	sp, #116	; 0x74
 8011f5c:	4607      	mov	r7, r0
 8011f5e:	460d      	mov	r5, r1
 8011f60:	4614      	mov	r4, r2
 8011f62:	d50e      	bpl.n	8011f82 <_svfiprintf_r+0x32>
 8011f64:	690b      	ldr	r3, [r1, #16]
 8011f66:	b963      	cbnz	r3, 8011f82 <_svfiprintf_r+0x32>
 8011f68:	2140      	movs	r1, #64	; 0x40
 8011f6a:	f7ff fb8f 	bl	801168c <_malloc_r>
 8011f6e:	6028      	str	r0, [r5, #0]
 8011f70:	6128      	str	r0, [r5, #16]
 8011f72:	b920      	cbnz	r0, 8011f7e <_svfiprintf_r+0x2e>
 8011f74:	230c      	movs	r3, #12
 8011f76:	603b      	str	r3, [r7, #0]
 8011f78:	f04f 30ff 	mov.w	r0, #4294967295
 8011f7c:	e0d0      	b.n	8012120 <_svfiprintf_r+0x1d0>
 8011f7e:	2340      	movs	r3, #64	; 0x40
 8011f80:	616b      	str	r3, [r5, #20]
 8011f82:	2300      	movs	r3, #0
 8011f84:	9309      	str	r3, [sp, #36]	; 0x24
 8011f86:	2320      	movs	r3, #32
 8011f88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f90:	2330      	movs	r3, #48	; 0x30
 8011f92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012138 <_svfiprintf_r+0x1e8>
 8011f96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f9a:	f04f 0901 	mov.w	r9, #1
 8011f9e:	4623      	mov	r3, r4
 8011fa0:	469a      	mov	sl, r3
 8011fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fa6:	b10a      	cbz	r2, 8011fac <_svfiprintf_r+0x5c>
 8011fa8:	2a25      	cmp	r2, #37	; 0x25
 8011faa:	d1f9      	bne.n	8011fa0 <_svfiprintf_r+0x50>
 8011fac:	ebba 0b04 	subs.w	fp, sl, r4
 8011fb0:	d00b      	beq.n	8011fca <_svfiprintf_r+0x7a>
 8011fb2:	465b      	mov	r3, fp
 8011fb4:	4622      	mov	r2, r4
 8011fb6:	4629      	mov	r1, r5
 8011fb8:	4638      	mov	r0, r7
 8011fba:	f7ff ff6f 	bl	8011e9c <__ssputs_r>
 8011fbe:	3001      	adds	r0, #1
 8011fc0:	f000 80a9 	beq.w	8012116 <_svfiprintf_r+0x1c6>
 8011fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fc6:	445a      	add	r2, fp
 8011fc8:	9209      	str	r2, [sp, #36]	; 0x24
 8011fca:	f89a 3000 	ldrb.w	r3, [sl]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	f000 80a1 	beq.w	8012116 <_svfiprintf_r+0x1c6>
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8011fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fde:	f10a 0a01 	add.w	sl, sl, #1
 8011fe2:	9304      	str	r3, [sp, #16]
 8011fe4:	9307      	str	r3, [sp, #28]
 8011fe6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fea:	931a      	str	r3, [sp, #104]	; 0x68
 8011fec:	4654      	mov	r4, sl
 8011fee:	2205      	movs	r2, #5
 8011ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ff4:	4850      	ldr	r0, [pc, #320]	; (8012138 <_svfiprintf_r+0x1e8>)
 8011ff6:	f7ee f91b 	bl	8000230 <memchr>
 8011ffa:	9a04      	ldr	r2, [sp, #16]
 8011ffc:	b9d8      	cbnz	r0, 8012036 <_svfiprintf_r+0xe6>
 8011ffe:	06d0      	lsls	r0, r2, #27
 8012000:	bf44      	itt	mi
 8012002:	2320      	movmi	r3, #32
 8012004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012008:	0711      	lsls	r1, r2, #28
 801200a:	bf44      	itt	mi
 801200c:	232b      	movmi	r3, #43	; 0x2b
 801200e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012012:	f89a 3000 	ldrb.w	r3, [sl]
 8012016:	2b2a      	cmp	r3, #42	; 0x2a
 8012018:	d015      	beq.n	8012046 <_svfiprintf_r+0xf6>
 801201a:	9a07      	ldr	r2, [sp, #28]
 801201c:	4654      	mov	r4, sl
 801201e:	2000      	movs	r0, #0
 8012020:	f04f 0c0a 	mov.w	ip, #10
 8012024:	4621      	mov	r1, r4
 8012026:	f811 3b01 	ldrb.w	r3, [r1], #1
 801202a:	3b30      	subs	r3, #48	; 0x30
 801202c:	2b09      	cmp	r3, #9
 801202e:	d94d      	bls.n	80120cc <_svfiprintf_r+0x17c>
 8012030:	b1b0      	cbz	r0, 8012060 <_svfiprintf_r+0x110>
 8012032:	9207      	str	r2, [sp, #28]
 8012034:	e014      	b.n	8012060 <_svfiprintf_r+0x110>
 8012036:	eba0 0308 	sub.w	r3, r0, r8
 801203a:	fa09 f303 	lsl.w	r3, r9, r3
 801203e:	4313      	orrs	r3, r2
 8012040:	9304      	str	r3, [sp, #16]
 8012042:	46a2      	mov	sl, r4
 8012044:	e7d2      	b.n	8011fec <_svfiprintf_r+0x9c>
 8012046:	9b03      	ldr	r3, [sp, #12]
 8012048:	1d19      	adds	r1, r3, #4
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	9103      	str	r1, [sp, #12]
 801204e:	2b00      	cmp	r3, #0
 8012050:	bfbb      	ittet	lt
 8012052:	425b      	neglt	r3, r3
 8012054:	f042 0202 	orrlt.w	r2, r2, #2
 8012058:	9307      	strge	r3, [sp, #28]
 801205a:	9307      	strlt	r3, [sp, #28]
 801205c:	bfb8      	it	lt
 801205e:	9204      	strlt	r2, [sp, #16]
 8012060:	7823      	ldrb	r3, [r4, #0]
 8012062:	2b2e      	cmp	r3, #46	; 0x2e
 8012064:	d10c      	bne.n	8012080 <_svfiprintf_r+0x130>
 8012066:	7863      	ldrb	r3, [r4, #1]
 8012068:	2b2a      	cmp	r3, #42	; 0x2a
 801206a:	d134      	bne.n	80120d6 <_svfiprintf_r+0x186>
 801206c:	9b03      	ldr	r3, [sp, #12]
 801206e:	1d1a      	adds	r2, r3, #4
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	9203      	str	r2, [sp, #12]
 8012074:	2b00      	cmp	r3, #0
 8012076:	bfb8      	it	lt
 8012078:	f04f 33ff 	movlt.w	r3, #4294967295
 801207c:	3402      	adds	r4, #2
 801207e:	9305      	str	r3, [sp, #20]
 8012080:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012148 <_svfiprintf_r+0x1f8>
 8012084:	7821      	ldrb	r1, [r4, #0]
 8012086:	2203      	movs	r2, #3
 8012088:	4650      	mov	r0, sl
 801208a:	f7ee f8d1 	bl	8000230 <memchr>
 801208e:	b138      	cbz	r0, 80120a0 <_svfiprintf_r+0x150>
 8012090:	9b04      	ldr	r3, [sp, #16]
 8012092:	eba0 000a 	sub.w	r0, r0, sl
 8012096:	2240      	movs	r2, #64	; 0x40
 8012098:	4082      	lsls	r2, r0
 801209a:	4313      	orrs	r3, r2
 801209c:	3401      	adds	r4, #1
 801209e:	9304      	str	r3, [sp, #16]
 80120a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120a4:	4825      	ldr	r0, [pc, #148]	; (801213c <_svfiprintf_r+0x1ec>)
 80120a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120aa:	2206      	movs	r2, #6
 80120ac:	f7ee f8c0 	bl	8000230 <memchr>
 80120b0:	2800      	cmp	r0, #0
 80120b2:	d038      	beq.n	8012126 <_svfiprintf_r+0x1d6>
 80120b4:	4b22      	ldr	r3, [pc, #136]	; (8012140 <_svfiprintf_r+0x1f0>)
 80120b6:	bb1b      	cbnz	r3, 8012100 <_svfiprintf_r+0x1b0>
 80120b8:	9b03      	ldr	r3, [sp, #12]
 80120ba:	3307      	adds	r3, #7
 80120bc:	f023 0307 	bic.w	r3, r3, #7
 80120c0:	3308      	adds	r3, #8
 80120c2:	9303      	str	r3, [sp, #12]
 80120c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c6:	4433      	add	r3, r6
 80120c8:	9309      	str	r3, [sp, #36]	; 0x24
 80120ca:	e768      	b.n	8011f9e <_svfiprintf_r+0x4e>
 80120cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80120d0:	460c      	mov	r4, r1
 80120d2:	2001      	movs	r0, #1
 80120d4:	e7a6      	b.n	8012024 <_svfiprintf_r+0xd4>
 80120d6:	2300      	movs	r3, #0
 80120d8:	3401      	adds	r4, #1
 80120da:	9305      	str	r3, [sp, #20]
 80120dc:	4619      	mov	r1, r3
 80120de:	f04f 0c0a 	mov.w	ip, #10
 80120e2:	4620      	mov	r0, r4
 80120e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120e8:	3a30      	subs	r2, #48	; 0x30
 80120ea:	2a09      	cmp	r2, #9
 80120ec:	d903      	bls.n	80120f6 <_svfiprintf_r+0x1a6>
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d0c6      	beq.n	8012080 <_svfiprintf_r+0x130>
 80120f2:	9105      	str	r1, [sp, #20]
 80120f4:	e7c4      	b.n	8012080 <_svfiprintf_r+0x130>
 80120f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80120fa:	4604      	mov	r4, r0
 80120fc:	2301      	movs	r3, #1
 80120fe:	e7f0      	b.n	80120e2 <_svfiprintf_r+0x192>
 8012100:	ab03      	add	r3, sp, #12
 8012102:	9300      	str	r3, [sp, #0]
 8012104:	462a      	mov	r2, r5
 8012106:	4b0f      	ldr	r3, [pc, #60]	; (8012144 <_svfiprintf_r+0x1f4>)
 8012108:	a904      	add	r1, sp, #16
 801210a:	4638      	mov	r0, r7
 801210c:	f7fd fe2e 	bl	800fd6c <_printf_float>
 8012110:	1c42      	adds	r2, r0, #1
 8012112:	4606      	mov	r6, r0
 8012114:	d1d6      	bne.n	80120c4 <_svfiprintf_r+0x174>
 8012116:	89ab      	ldrh	r3, [r5, #12]
 8012118:	065b      	lsls	r3, r3, #25
 801211a:	f53f af2d 	bmi.w	8011f78 <_svfiprintf_r+0x28>
 801211e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012120:	b01d      	add	sp, #116	; 0x74
 8012122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012126:	ab03      	add	r3, sp, #12
 8012128:	9300      	str	r3, [sp, #0]
 801212a:	462a      	mov	r2, r5
 801212c:	4b05      	ldr	r3, [pc, #20]	; (8012144 <_svfiprintf_r+0x1f4>)
 801212e:	a904      	add	r1, sp, #16
 8012130:	4638      	mov	r0, r7
 8012132:	f7fe f8bf 	bl	80102b4 <_printf_i>
 8012136:	e7eb      	b.n	8012110 <_svfiprintf_r+0x1c0>
 8012138:	08014b3c 	.word	0x08014b3c
 801213c:	08014b46 	.word	0x08014b46
 8012140:	0800fd6d 	.word	0x0800fd6d
 8012144:	08011e9d 	.word	0x08011e9d
 8012148:	08014b42 	.word	0x08014b42

0801214c <__sflush_r>:
 801214c:	898a      	ldrh	r2, [r1, #12]
 801214e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012152:	4605      	mov	r5, r0
 8012154:	0710      	lsls	r0, r2, #28
 8012156:	460c      	mov	r4, r1
 8012158:	d458      	bmi.n	801220c <__sflush_r+0xc0>
 801215a:	684b      	ldr	r3, [r1, #4]
 801215c:	2b00      	cmp	r3, #0
 801215e:	dc05      	bgt.n	801216c <__sflush_r+0x20>
 8012160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012162:	2b00      	cmp	r3, #0
 8012164:	dc02      	bgt.n	801216c <__sflush_r+0x20>
 8012166:	2000      	movs	r0, #0
 8012168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801216c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801216e:	2e00      	cmp	r6, #0
 8012170:	d0f9      	beq.n	8012166 <__sflush_r+0x1a>
 8012172:	2300      	movs	r3, #0
 8012174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012178:	682f      	ldr	r7, [r5, #0]
 801217a:	6a21      	ldr	r1, [r4, #32]
 801217c:	602b      	str	r3, [r5, #0]
 801217e:	d032      	beq.n	80121e6 <__sflush_r+0x9a>
 8012180:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012182:	89a3      	ldrh	r3, [r4, #12]
 8012184:	075a      	lsls	r2, r3, #29
 8012186:	d505      	bpl.n	8012194 <__sflush_r+0x48>
 8012188:	6863      	ldr	r3, [r4, #4]
 801218a:	1ac0      	subs	r0, r0, r3
 801218c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801218e:	b10b      	cbz	r3, 8012194 <__sflush_r+0x48>
 8012190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012192:	1ac0      	subs	r0, r0, r3
 8012194:	2300      	movs	r3, #0
 8012196:	4602      	mov	r2, r0
 8012198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801219a:	6a21      	ldr	r1, [r4, #32]
 801219c:	4628      	mov	r0, r5
 801219e:	47b0      	blx	r6
 80121a0:	1c43      	adds	r3, r0, #1
 80121a2:	89a3      	ldrh	r3, [r4, #12]
 80121a4:	d106      	bne.n	80121b4 <__sflush_r+0x68>
 80121a6:	6829      	ldr	r1, [r5, #0]
 80121a8:	291d      	cmp	r1, #29
 80121aa:	d82b      	bhi.n	8012204 <__sflush_r+0xb8>
 80121ac:	4a29      	ldr	r2, [pc, #164]	; (8012254 <__sflush_r+0x108>)
 80121ae:	410a      	asrs	r2, r1
 80121b0:	07d6      	lsls	r6, r2, #31
 80121b2:	d427      	bmi.n	8012204 <__sflush_r+0xb8>
 80121b4:	2200      	movs	r2, #0
 80121b6:	6062      	str	r2, [r4, #4]
 80121b8:	04d9      	lsls	r1, r3, #19
 80121ba:	6922      	ldr	r2, [r4, #16]
 80121bc:	6022      	str	r2, [r4, #0]
 80121be:	d504      	bpl.n	80121ca <__sflush_r+0x7e>
 80121c0:	1c42      	adds	r2, r0, #1
 80121c2:	d101      	bne.n	80121c8 <__sflush_r+0x7c>
 80121c4:	682b      	ldr	r3, [r5, #0]
 80121c6:	b903      	cbnz	r3, 80121ca <__sflush_r+0x7e>
 80121c8:	6560      	str	r0, [r4, #84]	; 0x54
 80121ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121cc:	602f      	str	r7, [r5, #0]
 80121ce:	2900      	cmp	r1, #0
 80121d0:	d0c9      	beq.n	8012166 <__sflush_r+0x1a>
 80121d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121d6:	4299      	cmp	r1, r3
 80121d8:	d002      	beq.n	80121e0 <__sflush_r+0x94>
 80121da:	4628      	mov	r0, r5
 80121dc:	f7ff f9e2 	bl	80115a4 <_free_r>
 80121e0:	2000      	movs	r0, #0
 80121e2:	6360      	str	r0, [r4, #52]	; 0x34
 80121e4:	e7c0      	b.n	8012168 <__sflush_r+0x1c>
 80121e6:	2301      	movs	r3, #1
 80121e8:	4628      	mov	r0, r5
 80121ea:	47b0      	blx	r6
 80121ec:	1c41      	adds	r1, r0, #1
 80121ee:	d1c8      	bne.n	8012182 <__sflush_r+0x36>
 80121f0:	682b      	ldr	r3, [r5, #0]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d0c5      	beq.n	8012182 <__sflush_r+0x36>
 80121f6:	2b1d      	cmp	r3, #29
 80121f8:	d001      	beq.n	80121fe <__sflush_r+0xb2>
 80121fa:	2b16      	cmp	r3, #22
 80121fc:	d101      	bne.n	8012202 <__sflush_r+0xb6>
 80121fe:	602f      	str	r7, [r5, #0]
 8012200:	e7b1      	b.n	8012166 <__sflush_r+0x1a>
 8012202:	89a3      	ldrh	r3, [r4, #12]
 8012204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012208:	81a3      	strh	r3, [r4, #12]
 801220a:	e7ad      	b.n	8012168 <__sflush_r+0x1c>
 801220c:	690f      	ldr	r7, [r1, #16]
 801220e:	2f00      	cmp	r7, #0
 8012210:	d0a9      	beq.n	8012166 <__sflush_r+0x1a>
 8012212:	0793      	lsls	r3, r2, #30
 8012214:	680e      	ldr	r6, [r1, #0]
 8012216:	bf08      	it	eq
 8012218:	694b      	ldreq	r3, [r1, #20]
 801221a:	600f      	str	r7, [r1, #0]
 801221c:	bf18      	it	ne
 801221e:	2300      	movne	r3, #0
 8012220:	eba6 0807 	sub.w	r8, r6, r7
 8012224:	608b      	str	r3, [r1, #8]
 8012226:	f1b8 0f00 	cmp.w	r8, #0
 801222a:	dd9c      	ble.n	8012166 <__sflush_r+0x1a>
 801222c:	6a21      	ldr	r1, [r4, #32]
 801222e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012230:	4643      	mov	r3, r8
 8012232:	463a      	mov	r2, r7
 8012234:	4628      	mov	r0, r5
 8012236:	47b0      	blx	r6
 8012238:	2800      	cmp	r0, #0
 801223a:	dc06      	bgt.n	801224a <__sflush_r+0xfe>
 801223c:	89a3      	ldrh	r3, [r4, #12]
 801223e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012242:	81a3      	strh	r3, [r4, #12]
 8012244:	f04f 30ff 	mov.w	r0, #4294967295
 8012248:	e78e      	b.n	8012168 <__sflush_r+0x1c>
 801224a:	4407      	add	r7, r0
 801224c:	eba8 0800 	sub.w	r8, r8, r0
 8012250:	e7e9      	b.n	8012226 <__sflush_r+0xda>
 8012252:	bf00      	nop
 8012254:	dfbffffe 	.word	0xdfbffffe

08012258 <_fflush_r>:
 8012258:	b538      	push	{r3, r4, r5, lr}
 801225a:	690b      	ldr	r3, [r1, #16]
 801225c:	4605      	mov	r5, r0
 801225e:	460c      	mov	r4, r1
 8012260:	b913      	cbnz	r3, 8012268 <_fflush_r+0x10>
 8012262:	2500      	movs	r5, #0
 8012264:	4628      	mov	r0, r5
 8012266:	bd38      	pop	{r3, r4, r5, pc}
 8012268:	b118      	cbz	r0, 8012272 <_fflush_r+0x1a>
 801226a:	6a03      	ldr	r3, [r0, #32]
 801226c:	b90b      	cbnz	r3, 8012272 <_fflush_r+0x1a>
 801226e:	f7fe f9cf 	bl	8010610 <__sinit>
 8012272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d0f3      	beq.n	8012262 <_fflush_r+0xa>
 801227a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801227c:	07d0      	lsls	r0, r2, #31
 801227e:	d404      	bmi.n	801228a <_fflush_r+0x32>
 8012280:	0599      	lsls	r1, r3, #22
 8012282:	d402      	bmi.n	801228a <_fflush_r+0x32>
 8012284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012286:	f7fe fafa 	bl	801087e <__retarget_lock_acquire_recursive>
 801228a:	4628      	mov	r0, r5
 801228c:	4621      	mov	r1, r4
 801228e:	f7ff ff5d 	bl	801214c <__sflush_r>
 8012292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012294:	07da      	lsls	r2, r3, #31
 8012296:	4605      	mov	r5, r0
 8012298:	d4e4      	bmi.n	8012264 <_fflush_r+0xc>
 801229a:	89a3      	ldrh	r3, [r4, #12]
 801229c:	059b      	lsls	r3, r3, #22
 801229e:	d4e1      	bmi.n	8012264 <_fflush_r+0xc>
 80122a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122a2:	f7fe faed 	bl	8010880 <__retarget_lock_release_recursive>
 80122a6:	e7dd      	b.n	8012264 <_fflush_r+0xc>

080122a8 <memmove>:
 80122a8:	4288      	cmp	r0, r1
 80122aa:	b510      	push	{r4, lr}
 80122ac:	eb01 0402 	add.w	r4, r1, r2
 80122b0:	d902      	bls.n	80122b8 <memmove+0x10>
 80122b2:	4284      	cmp	r4, r0
 80122b4:	4623      	mov	r3, r4
 80122b6:	d807      	bhi.n	80122c8 <memmove+0x20>
 80122b8:	1e43      	subs	r3, r0, #1
 80122ba:	42a1      	cmp	r1, r4
 80122bc:	d008      	beq.n	80122d0 <memmove+0x28>
 80122be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80122c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80122c6:	e7f8      	b.n	80122ba <memmove+0x12>
 80122c8:	4402      	add	r2, r0
 80122ca:	4601      	mov	r1, r0
 80122cc:	428a      	cmp	r2, r1
 80122ce:	d100      	bne.n	80122d2 <memmove+0x2a>
 80122d0:	bd10      	pop	{r4, pc}
 80122d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80122d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80122da:	e7f7      	b.n	80122cc <memmove+0x24>

080122dc <_sbrk_r>:
 80122dc:	b538      	push	{r3, r4, r5, lr}
 80122de:	4d06      	ldr	r5, [pc, #24]	; (80122f8 <_sbrk_r+0x1c>)
 80122e0:	2300      	movs	r3, #0
 80122e2:	4604      	mov	r4, r0
 80122e4:	4608      	mov	r0, r1
 80122e6:	602b      	str	r3, [r5, #0]
 80122e8:	f7ee ff4e 	bl	8001188 <_sbrk>
 80122ec:	1c43      	adds	r3, r0, #1
 80122ee:	d102      	bne.n	80122f6 <_sbrk_r+0x1a>
 80122f0:	682b      	ldr	r3, [r5, #0]
 80122f2:	b103      	cbz	r3, 80122f6 <_sbrk_r+0x1a>
 80122f4:	6023      	str	r3, [r4, #0]
 80122f6:	bd38      	pop	{r3, r4, r5, pc}
 80122f8:	2000b868 	.word	0x2000b868

080122fc <__assert_func>:
 80122fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80122fe:	4614      	mov	r4, r2
 8012300:	461a      	mov	r2, r3
 8012302:	4b09      	ldr	r3, [pc, #36]	; (8012328 <__assert_func+0x2c>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	4605      	mov	r5, r0
 8012308:	68d8      	ldr	r0, [r3, #12]
 801230a:	b14c      	cbz	r4, 8012320 <__assert_func+0x24>
 801230c:	4b07      	ldr	r3, [pc, #28]	; (801232c <__assert_func+0x30>)
 801230e:	9100      	str	r1, [sp, #0]
 8012310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012314:	4906      	ldr	r1, [pc, #24]	; (8012330 <__assert_func+0x34>)
 8012316:	462b      	mov	r3, r5
 8012318:	f000 f872 	bl	8012400 <fiprintf>
 801231c:	f000 f882 	bl	8012424 <abort>
 8012320:	4b04      	ldr	r3, [pc, #16]	; (8012334 <__assert_func+0x38>)
 8012322:	461c      	mov	r4, r3
 8012324:	e7f3      	b.n	801230e <__assert_func+0x12>
 8012326:	bf00      	nop
 8012328:	20001d88 	.word	0x20001d88
 801232c:	08014b57 	.word	0x08014b57
 8012330:	08014b64 	.word	0x08014b64
 8012334:	08014b92 	.word	0x08014b92

08012338 <_calloc_r>:
 8012338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801233a:	fba1 2402 	umull	r2, r4, r1, r2
 801233e:	b94c      	cbnz	r4, 8012354 <_calloc_r+0x1c>
 8012340:	4611      	mov	r1, r2
 8012342:	9201      	str	r2, [sp, #4]
 8012344:	f7ff f9a2 	bl	801168c <_malloc_r>
 8012348:	9a01      	ldr	r2, [sp, #4]
 801234a:	4605      	mov	r5, r0
 801234c:	b930      	cbnz	r0, 801235c <_calloc_r+0x24>
 801234e:	4628      	mov	r0, r5
 8012350:	b003      	add	sp, #12
 8012352:	bd30      	pop	{r4, r5, pc}
 8012354:	220c      	movs	r2, #12
 8012356:	6002      	str	r2, [r0, #0]
 8012358:	2500      	movs	r5, #0
 801235a:	e7f8      	b.n	801234e <_calloc_r+0x16>
 801235c:	4621      	mov	r1, r4
 801235e:	f7fe fa11 	bl	8010784 <memset>
 8012362:	e7f4      	b.n	801234e <_calloc_r+0x16>

08012364 <__ascii_mbtowc>:
 8012364:	b082      	sub	sp, #8
 8012366:	b901      	cbnz	r1, 801236a <__ascii_mbtowc+0x6>
 8012368:	a901      	add	r1, sp, #4
 801236a:	b142      	cbz	r2, 801237e <__ascii_mbtowc+0x1a>
 801236c:	b14b      	cbz	r3, 8012382 <__ascii_mbtowc+0x1e>
 801236e:	7813      	ldrb	r3, [r2, #0]
 8012370:	600b      	str	r3, [r1, #0]
 8012372:	7812      	ldrb	r2, [r2, #0]
 8012374:	1e10      	subs	r0, r2, #0
 8012376:	bf18      	it	ne
 8012378:	2001      	movne	r0, #1
 801237a:	b002      	add	sp, #8
 801237c:	4770      	bx	lr
 801237e:	4610      	mov	r0, r2
 8012380:	e7fb      	b.n	801237a <__ascii_mbtowc+0x16>
 8012382:	f06f 0001 	mvn.w	r0, #1
 8012386:	e7f8      	b.n	801237a <__ascii_mbtowc+0x16>

08012388 <_realloc_r>:
 8012388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801238c:	4680      	mov	r8, r0
 801238e:	4614      	mov	r4, r2
 8012390:	460e      	mov	r6, r1
 8012392:	b921      	cbnz	r1, 801239e <_realloc_r+0x16>
 8012394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012398:	4611      	mov	r1, r2
 801239a:	f7ff b977 	b.w	801168c <_malloc_r>
 801239e:	b92a      	cbnz	r2, 80123ac <_realloc_r+0x24>
 80123a0:	f7ff f900 	bl	80115a4 <_free_r>
 80123a4:	4625      	mov	r5, r4
 80123a6:	4628      	mov	r0, r5
 80123a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ac:	f000 f841 	bl	8012432 <_malloc_usable_size_r>
 80123b0:	4284      	cmp	r4, r0
 80123b2:	4607      	mov	r7, r0
 80123b4:	d802      	bhi.n	80123bc <_realloc_r+0x34>
 80123b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80123ba:	d812      	bhi.n	80123e2 <_realloc_r+0x5a>
 80123bc:	4621      	mov	r1, r4
 80123be:	4640      	mov	r0, r8
 80123c0:	f7ff f964 	bl	801168c <_malloc_r>
 80123c4:	4605      	mov	r5, r0
 80123c6:	2800      	cmp	r0, #0
 80123c8:	d0ed      	beq.n	80123a6 <_realloc_r+0x1e>
 80123ca:	42bc      	cmp	r4, r7
 80123cc:	4622      	mov	r2, r4
 80123ce:	4631      	mov	r1, r6
 80123d0:	bf28      	it	cs
 80123d2:	463a      	movcs	r2, r7
 80123d4:	f7fe fa5d 	bl	8010892 <memcpy>
 80123d8:	4631      	mov	r1, r6
 80123da:	4640      	mov	r0, r8
 80123dc:	f7ff f8e2 	bl	80115a4 <_free_r>
 80123e0:	e7e1      	b.n	80123a6 <_realloc_r+0x1e>
 80123e2:	4635      	mov	r5, r6
 80123e4:	e7df      	b.n	80123a6 <_realloc_r+0x1e>

080123e6 <__ascii_wctomb>:
 80123e6:	b149      	cbz	r1, 80123fc <__ascii_wctomb+0x16>
 80123e8:	2aff      	cmp	r2, #255	; 0xff
 80123ea:	bf85      	ittet	hi
 80123ec:	238a      	movhi	r3, #138	; 0x8a
 80123ee:	6003      	strhi	r3, [r0, #0]
 80123f0:	700a      	strbls	r2, [r1, #0]
 80123f2:	f04f 30ff 	movhi.w	r0, #4294967295
 80123f6:	bf98      	it	ls
 80123f8:	2001      	movls	r0, #1
 80123fa:	4770      	bx	lr
 80123fc:	4608      	mov	r0, r1
 80123fe:	4770      	bx	lr

08012400 <fiprintf>:
 8012400:	b40e      	push	{r1, r2, r3}
 8012402:	b503      	push	{r0, r1, lr}
 8012404:	4601      	mov	r1, r0
 8012406:	ab03      	add	r3, sp, #12
 8012408:	4805      	ldr	r0, [pc, #20]	; (8012420 <fiprintf+0x20>)
 801240a:	f853 2b04 	ldr.w	r2, [r3], #4
 801240e:	6800      	ldr	r0, [r0, #0]
 8012410:	9301      	str	r3, [sp, #4]
 8012412:	f000 f83f 	bl	8012494 <_vfiprintf_r>
 8012416:	b002      	add	sp, #8
 8012418:	f85d eb04 	ldr.w	lr, [sp], #4
 801241c:	b003      	add	sp, #12
 801241e:	4770      	bx	lr
 8012420:	20001d88 	.word	0x20001d88

08012424 <abort>:
 8012424:	b508      	push	{r3, lr}
 8012426:	2006      	movs	r0, #6
 8012428:	f000 fa0c 	bl	8012844 <raise>
 801242c:	2001      	movs	r0, #1
 801242e:	f7ee fe33 	bl	8001098 <_exit>

08012432 <_malloc_usable_size_r>:
 8012432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012436:	1f18      	subs	r0, r3, #4
 8012438:	2b00      	cmp	r3, #0
 801243a:	bfbc      	itt	lt
 801243c:	580b      	ldrlt	r3, [r1, r0]
 801243e:	18c0      	addlt	r0, r0, r3
 8012440:	4770      	bx	lr

08012442 <__sfputc_r>:
 8012442:	6893      	ldr	r3, [r2, #8]
 8012444:	3b01      	subs	r3, #1
 8012446:	2b00      	cmp	r3, #0
 8012448:	b410      	push	{r4}
 801244a:	6093      	str	r3, [r2, #8]
 801244c:	da08      	bge.n	8012460 <__sfputc_r+0x1e>
 801244e:	6994      	ldr	r4, [r2, #24]
 8012450:	42a3      	cmp	r3, r4
 8012452:	db01      	blt.n	8012458 <__sfputc_r+0x16>
 8012454:	290a      	cmp	r1, #10
 8012456:	d103      	bne.n	8012460 <__sfputc_r+0x1e>
 8012458:	f85d 4b04 	ldr.w	r4, [sp], #4
 801245c:	f000 b934 	b.w	80126c8 <__swbuf_r>
 8012460:	6813      	ldr	r3, [r2, #0]
 8012462:	1c58      	adds	r0, r3, #1
 8012464:	6010      	str	r0, [r2, #0]
 8012466:	7019      	strb	r1, [r3, #0]
 8012468:	4608      	mov	r0, r1
 801246a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801246e:	4770      	bx	lr

08012470 <__sfputs_r>:
 8012470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012472:	4606      	mov	r6, r0
 8012474:	460f      	mov	r7, r1
 8012476:	4614      	mov	r4, r2
 8012478:	18d5      	adds	r5, r2, r3
 801247a:	42ac      	cmp	r4, r5
 801247c:	d101      	bne.n	8012482 <__sfputs_r+0x12>
 801247e:	2000      	movs	r0, #0
 8012480:	e007      	b.n	8012492 <__sfputs_r+0x22>
 8012482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012486:	463a      	mov	r2, r7
 8012488:	4630      	mov	r0, r6
 801248a:	f7ff ffda 	bl	8012442 <__sfputc_r>
 801248e:	1c43      	adds	r3, r0, #1
 8012490:	d1f3      	bne.n	801247a <__sfputs_r+0xa>
 8012492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012494 <_vfiprintf_r>:
 8012494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012498:	460d      	mov	r5, r1
 801249a:	b09d      	sub	sp, #116	; 0x74
 801249c:	4614      	mov	r4, r2
 801249e:	4698      	mov	r8, r3
 80124a0:	4606      	mov	r6, r0
 80124a2:	b118      	cbz	r0, 80124ac <_vfiprintf_r+0x18>
 80124a4:	6a03      	ldr	r3, [r0, #32]
 80124a6:	b90b      	cbnz	r3, 80124ac <_vfiprintf_r+0x18>
 80124a8:	f7fe f8b2 	bl	8010610 <__sinit>
 80124ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124ae:	07d9      	lsls	r1, r3, #31
 80124b0:	d405      	bmi.n	80124be <_vfiprintf_r+0x2a>
 80124b2:	89ab      	ldrh	r3, [r5, #12]
 80124b4:	059a      	lsls	r2, r3, #22
 80124b6:	d402      	bmi.n	80124be <_vfiprintf_r+0x2a>
 80124b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124ba:	f7fe f9e0 	bl	801087e <__retarget_lock_acquire_recursive>
 80124be:	89ab      	ldrh	r3, [r5, #12]
 80124c0:	071b      	lsls	r3, r3, #28
 80124c2:	d501      	bpl.n	80124c8 <_vfiprintf_r+0x34>
 80124c4:	692b      	ldr	r3, [r5, #16]
 80124c6:	b99b      	cbnz	r3, 80124f0 <_vfiprintf_r+0x5c>
 80124c8:	4629      	mov	r1, r5
 80124ca:	4630      	mov	r0, r6
 80124cc:	f000 f93a 	bl	8012744 <__swsetup_r>
 80124d0:	b170      	cbz	r0, 80124f0 <_vfiprintf_r+0x5c>
 80124d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124d4:	07dc      	lsls	r4, r3, #31
 80124d6:	d504      	bpl.n	80124e2 <_vfiprintf_r+0x4e>
 80124d8:	f04f 30ff 	mov.w	r0, #4294967295
 80124dc:	b01d      	add	sp, #116	; 0x74
 80124de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124e2:	89ab      	ldrh	r3, [r5, #12]
 80124e4:	0598      	lsls	r0, r3, #22
 80124e6:	d4f7      	bmi.n	80124d8 <_vfiprintf_r+0x44>
 80124e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124ea:	f7fe f9c9 	bl	8010880 <__retarget_lock_release_recursive>
 80124ee:	e7f3      	b.n	80124d8 <_vfiprintf_r+0x44>
 80124f0:	2300      	movs	r3, #0
 80124f2:	9309      	str	r3, [sp, #36]	; 0x24
 80124f4:	2320      	movs	r3, #32
 80124f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80124fe:	2330      	movs	r3, #48	; 0x30
 8012500:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80126b4 <_vfiprintf_r+0x220>
 8012504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012508:	f04f 0901 	mov.w	r9, #1
 801250c:	4623      	mov	r3, r4
 801250e:	469a      	mov	sl, r3
 8012510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012514:	b10a      	cbz	r2, 801251a <_vfiprintf_r+0x86>
 8012516:	2a25      	cmp	r2, #37	; 0x25
 8012518:	d1f9      	bne.n	801250e <_vfiprintf_r+0x7a>
 801251a:	ebba 0b04 	subs.w	fp, sl, r4
 801251e:	d00b      	beq.n	8012538 <_vfiprintf_r+0xa4>
 8012520:	465b      	mov	r3, fp
 8012522:	4622      	mov	r2, r4
 8012524:	4629      	mov	r1, r5
 8012526:	4630      	mov	r0, r6
 8012528:	f7ff ffa2 	bl	8012470 <__sfputs_r>
 801252c:	3001      	adds	r0, #1
 801252e:	f000 80a9 	beq.w	8012684 <_vfiprintf_r+0x1f0>
 8012532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012534:	445a      	add	r2, fp
 8012536:	9209      	str	r2, [sp, #36]	; 0x24
 8012538:	f89a 3000 	ldrb.w	r3, [sl]
 801253c:	2b00      	cmp	r3, #0
 801253e:	f000 80a1 	beq.w	8012684 <_vfiprintf_r+0x1f0>
 8012542:	2300      	movs	r3, #0
 8012544:	f04f 32ff 	mov.w	r2, #4294967295
 8012548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801254c:	f10a 0a01 	add.w	sl, sl, #1
 8012550:	9304      	str	r3, [sp, #16]
 8012552:	9307      	str	r3, [sp, #28]
 8012554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012558:	931a      	str	r3, [sp, #104]	; 0x68
 801255a:	4654      	mov	r4, sl
 801255c:	2205      	movs	r2, #5
 801255e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012562:	4854      	ldr	r0, [pc, #336]	; (80126b4 <_vfiprintf_r+0x220>)
 8012564:	f7ed fe64 	bl	8000230 <memchr>
 8012568:	9a04      	ldr	r2, [sp, #16]
 801256a:	b9d8      	cbnz	r0, 80125a4 <_vfiprintf_r+0x110>
 801256c:	06d1      	lsls	r1, r2, #27
 801256e:	bf44      	itt	mi
 8012570:	2320      	movmi	r3, #32
 8012572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012576:	0713      	lsls	r3, r2, #28
 8012578:	bf44      	itt	mi
 801257a:	232b      	movmi	r3, #43	; 0x2b
 801257c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012580:	f89a 3000 	ldrb.w	r3, [sl]
 8012584:	2b2a      	cmp	r3, #42	; 0x2a
 8012586:	d015      	beq.n	80125b4 <_vfiprintf_r+0x120>
 8012588:	9a07      	ldr	r2, [sp, #28]
 801258a:	4654      	mov	r4, sl
 801258c:	2000      	movs	r0, #0
 801258e:	f04f 0c0a 	mov.w	ip, #10
 8012592:	4621      	mov	r1, r4
 8012594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012598:	3b30      	subs	r3, #48	; 0x30
 801259a:	2b09      	cmp	r3, #9
 801259c:	d94d      	bls.n	801263a <_vfiprintf_r+0x1a6>
 801259e:	b1b0      	cbz	r0, 80125ce <_vfiprintf_r+0x13a>
 80125a0:	9207      	str	r2, [sp, #28]
 80125a2:	e014      	b.n	80125ce <_vfiprintf_r+0x13a>
 80125a4:	eba0 0308 	sub.w	r3, r0, r8
 80125a8:	fa09 f303 	lsl.w	r3, r9, r3
 80125ac:	4313      	orrs	r3, r2
 80125ae:	9304      	str	r3, [sp, #16]
 80125b0:	46a2      	mov	sl, r4
 80125b2:	e7d2      	b.n	801255a <_vfiprintf_r+0xc6>
 80125b4:	9b03      	ldr	r3, [sp, #12]
 80125b6:	1d19      	adds	r1, r3, #4
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	9103      	str	r1, [sp, #12]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	bfbb      	ittet	lt
 80125c0:	425b      	neglt	r3, r3
 80125c2:	f042 0202 	orrlt.w	r2, r2, #2
 80125c6:	9307      	strge	r3, [sp, #28]
 80125c8:	9307      	strlt	r3, [sp, #28]
 80125ca:	bfb8      	it	lt
 80125cc:	9204      	strlt	r2, [sp, #16]
 80125ce:	7823      	ldrb	r3, [r4, #0]
 80125d0:	2b2e      	cmp	r3, #46	; 0x2e
 80125d2:	d10c      	bne.n	80125ee <_vfiprintf_r+0x15a>
 80125d4:	7863      	ldrb	r3, [r4, #1]
 80125d6:	2b2a      	cmp	r3, #42	; 0x2a
 80125d8:	d134      	bne.n	8012644 <_vfiprintf_r+0x1b0>
 80125da:	9b03      	ldr	r3, [sp, #12]
 80125dc:	1d1a      	adds	r2, r3, #4
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	9203      	str	r2, [sp, #12]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	bfb8      	it	lt
 80125e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80125ea:	3402      	adds	r4, #2
 80125ec:	9305      	str	r3, [sp, #20]
 80125ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80126c4 <_vfiprintf_r+0x230>
 80125f2:	7821      	ldrb	r1, [r4, #0]
 80125f4:	2203      	movs	r2, #3
 80125f6:	4650      	mov	r0, sl
 80125f8:	f7ed fe1a 	bl	8000230 <memchr>
 80125fc:	b138      	cbz	r0, 801260e <_vfiprintf_r+0x17a>
 80125fe:	9b04      	ldr	r3, [sp, #16]
 8012600:	eba0 000a 	sub.w	r0, r0, sl
 8012604:	2240      	movs	r2, #64	; 0x40
 8012606:	4082      	lsls	r2, r0
 8012608:	4313      	orrs	r3, r2
 801260a:	3401      	adds	r4, #1
 801260c:	9304      	str	r3, [sp, #16]
 801260e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012612:	4829      	ldr	r0, [pc, #164]	; (80126b8 <_vfiprintf_r+0x224>)
 8012614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012618:	2206      	movs	r2, #6
 801261a:	f7ed fe09 	bl	8000230 <memchr>
 801261e:	2800      	cmp	r0, #0
 8012620:	d03f      	beq.n	80126a2 <_vfiprintf_r+0x20e>
 8012622:	4b26      	ldr	r3, [pc, #152]	; (80126bc <_vfiprintf_r+0x228>)
 8012624:	bb1b      	cbnz	r3, 801266e <_vfiprintf_r+0x1da>
 8012626:	9b03      	ldr	r3, [sp, #12]
 8012628:	3307      	adds	r3, #7
 801262a:	f023 0307 	bic.w	r3, r3, #7
 801262e:	3308      	adds	r3, #8
 8012630:	9303      	str	r3, [sp, #12]
 8012632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012634:	443b      	add	r3, r7
 8012636:	9309      	str	r3, [sp, #36]	; 0x24
 8012638:	e768      	b.n	801250c <_vfiprintf_r+0x78>
 801263a:	fb0c 3202 	mla	r2, ip, r2, r3
 801263e:	460c      	mov	r4, r1
 8012640:	2001      	movs	r0, #1
 8012642:	e7a6      	b.n	8012592 <_vfiprintf_r+0xfe>
 8012644:	2300      	movs	r3, #0
 8012646:	3401      	adds	r4, #1
 8012648:	9305      	str	r3, [sp, #20]
 801264a:	4619      	mov	r1, r3
 801264c:	f04f 0c0a 	mov.w	ip, #10
 8012650:	4620      	mov	r0, r4
 8012652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012656:	3a30      	subs	r2, #48	; 0x30
 8012658:	2a09      	cmp	r2, #9
 801265a:	d903      	bls.n	8012664 <_vfiprintf_r+0x1d0>
 801265c:	2b00      	cmp	r3, #0
 801265e:	d0c6      	beq.n	80125ee <_vfiprintf_r+0x15a>
 8012660:	9105      	str	r1, [sp, #20]
 8012662:	e7c4      	b.n	80125ee <_vfiprintf_r+0x15a>
 8012664:	fb0c 2101 	mla	r1, ip, r1, r2
 8012668:	4604      	mov	r4, r0
 801266a:	2301      	movs	r3, #1
 801266c:	e7f0      	b.n	8012650 <_vfiprintf_r+0x1bc>
 801266e:	ab03      	add	r3, sp, #12
 8012670:	9300      	str	r3, [sp, #0]
 8012672:	462a      	mov	r2, r5
 8012674:	4b12      	ldr	r3, [pc, #72]	; (80126c0 <_vfiprintf_r+0x22c>)
 8012676:	a904      	add	r1, sp, #16
 8012678:	4630      	mov	r0, r6
 801267a:	f7fd fb77 	bl	800fd6c <_printf_float>
 801267e:	4607      	mov	r7, r0
 8012680:	1c78      	adds	r0, r7, #1
 8012682:	d1d6      	bne.n	8012632 <_vfiprintf_r+0x19e>
 8012684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012686:	07d9      	lsls	r1, r3, #31
 8012688:	d405      	bmi.n	8012696 <_vfiprintf_r+0x202>
 801268a:	89ab      	ldrh	r3, [r5, #12]
 801268c:	059a      	lsls	r2, r3, #22
 801268e:	d402      	bmi.n	8012696 <_vfiprintf_r+0x202>
 8012690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012692:	f7fe f8f5 	bl	8010880 <__retarget_lock_release_recursive>
 8012696:	89ab      	ldrh	r3, [r5, #12]
 8012698:	065b      	lsls	r3, r3, #25
 801269a:	f53f af1d 	bmi.w	80124d8 <_vfiprintf_r+0x44>
 801269e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126a0:	e71c      	b.n	80124dc <_vfiprintf_r+0x48>
 80126a2:	ab03      	add	r3, sp, #12
 80126a4:	9300      	str	r3, [sp, #0]
 80126a6:	462a      	mov	r2, r5
 80126a8:	4b05      	ldr	r3, [pc, #20]	; (80126c0 <_vfiprintf_r+0x22c>)
 80126aa:	a904      	add	r1, sp, #16
 80126ac:	4630      	mov	r0, r6
 80126ae:	f7fd fe01 	bl	80102b4 <_printf_i>
 80126b2:	e7e4      	b.n	801267e <_vfiprintf_r+0x1ea>
 80126b4:	08014b3c 	.word	0x08014b3c
 80126b8:	08014b46 	.word	0x08014b46
 80126bc:	0800fd6d 	.word	0x0800fd6d
 80126c0:	08012471 	.word	0x08012471
 80126c4:	08014b42 	.word	0x08014b42

080126c8 <__swbuf_r>:
 80126c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ca:	460e      	mov	r6, r1
 80126cc:	4614      	mov	r4, r2
 80126ce:	4605      	mov	r5, r0
 80126d0:	b118      	cbz	r0, 80126da <__swbuf_r+0x12>
 80126d2:	6a03      	ldr	r3, [r0, #32]
 80126d4:	b90b      	cbnz	r3, 80126da <__swbuf_r+0x12>
 80126d6:	f7fd ff9b 	bl	8010610 <__sinit>
 80126da:	69a3      	ldr	r3, [r4, #24]
 80126dc:	60a3      	str	r3, [r4, #8]
 80126de:	89a3      	ldrh	r3, [r4, #12]
 80126e0:	071a      	lsls	r2, r3, #28
 80126e2:	d525      	bpl.n	8012730 <__swbuf_r+0x68>
 80126e4:	6923      	ldr	r3, [r4, #16]
 80126e6:	b31b      	cbz	r3, 8012730 <__swbuf_r+0x68>
 80126e8:	6823      	ldr	r3, [r4, #0]
 80126ea:	6922      	ldr	r2, [r4, #16]
 80126ec:	1a98      	subs	r0, r3, r2
 80126ee:	6963      	ldr	r3, [r4, #20]
 80126f0:	b2f6      	uxtb	r6, r6
 80126f2:	4283      	cmp	r3, r0
 80126f4:	4637      	mov	r7, r6
 80126f6:	dc04      	bgt.n	8012702 <__swbuf_r+0x3a>
 80126f8:	4621      	mov	r1, r4
 80126fa:	4628      	mov	r0, r5
 80126fc:	f7ff fdac 	bl	8012258 <_fflush_r>
 8012700:	b9e0      	cbnz	r0, 801273c <__swbuf_r+0x74>
 8012702:	68a3      	ldr	r3, [r4, #8]
 8012704:	3b01      	subs	r3, #1
 8012706:	60a3      	str	r3, [r4, #8]
 8012708:	6823      	ldr	r3, [r4, #0]
 801270a:	1c5a      	adds	r2, r3, #1
 801270c:	6022      	str	r2, [r4, #0]
 801270e:	701e      	strb	r6, [r3, #0]
 8012710:	6962      	ldr	r2, [r4, #20]
 8012712:	1c43      	adds	r3, r0, #1
 8012714:	429a      	cmp	r2, r3
 8012716:	d004      	beq.n	8012722 <__swbuf_r+0x5a>
 8012718:	89a3      	ldrh	r3, [r4, #12]
 801271a:	07db      	lsls	r3, r3, #31
 801271c:	d506      	bpl.n	801272c <__swbuf_r+0x64>
 801271e:	2e0a      	cmp	r6, #10
 8012720:	d104      	bne.n	801272c <__swbuf_r+0x64>
 8012722:	4621      	mov	r1, r4
 8012724:	4628      	mov	r0, r5
 8012726:	f7ff fd97 	bl	8012258 <_fflush_r>
 801272a:	b938      	cbnz	r0, 801273c <__swbuf_r+0x74>
 801272c:	4638      	mov	r0, r7
 801272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012730:	4621      	mov	r1, r4
 8012732:	4628      	mov	r0, r5
 8012734:	f000 f806 	bl	8012744 <__swsetup_r>
 8012738:	2800      	cmp	r0, #0
 801273a:	d0d5      	beq.n	80126e8 <__swbuf_r+0x20>
 801273c:	f04f 37ff 	mov.w	r7, #4294967295
 8012740:	e7f4      	b.n	801272c <__swbuf_r+0x64>
	...

08012744 <__swsetup_r>:
 8012744:	b538      	push	{r3, r4, r5, lr}
 8012746:	4b2a      	ldr	r3, [pc, #168]	; (80127f0 <__swsetup_r+0xac>)
 8012748:	4605      	mov	r5, r0
 801274a:	6818      	ldr	r0, [r3, #0]
 801274c:	460c      	mov	r4, r1
 801274e:	b118      	cbz	r0, 8012758 <__swsetup_r+0x14>
 8012750:	6a03      	ldr	r3, [r0, #32]
 8012752:	b90b      	cbnz	r3, 8012758 <__swsetup_r+0x14>
 8012754:	f7fd ff5c 	bl	8010610 <__sinit>
 8012758:	89a3      	ldrh	r3, [r4, #12]
 801275a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801275e:	0718      	lsls	r0, r3, #28
 8012760:	d422      	bmi.n	80127a8 <__swsetup_r+0x64>
 8012762:	06d9      	lsls	r1, r3, #27
 8012764:	d407      	bmi.n	8012776 <__swsetup_r+0x32>
 8012766:	2309      	movs	r3, #9
 8012768:	602b      	str	r3, [r5, #0]
 801276a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801276e:	81a3      	strh	r3, [r4, #12]
 8012770:	f04f 30ff 	mov.w	r0, #4294967295
 8012774:	e034      	b.n	80127e0 <__swsetup_r+0x9c>
 8012776:	0758      	lsls	r0, r3, #29
 8012778:	d512      	bpl.n	80127a0 <__swsetup_r+0x5c>
 801277a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801277c:	b141      	cbz	r1, 8012790 <__swsetup_r+0x4c>
 801277e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012782:	4299      	cmp	r1, r3
 8012784:	d002      	beq.n	801278c <__swsetup_r+0x48>
 8012786:	4628      	mov	r0, r5
 8012788:	f7fe ff0c 	bl	80115a4 <_free_r>
 801278c:	2300      	movs	r3, #0
 801278e:	6363      	str	r3, [r4, #52]	; 0x34
 8012790:	89a3      	ldrh	r3, [r4, #12]
 8012792:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012796:	81a3      	strh	r3, [r4, #12]
 8012798:	2300      	movs	r3, #0
 801279a:	6063      	str	r3, [r4, #4]
 801279c:	6923      	ldr	r3, [r4, #16]
 801279e:	6023      	str	r3, [r4, #0]
 80127a0:	89a3      	ldrh	r3, [r4, #12]
 80127a2:	f043 0308 	orr.w	r3, r3, #8
 80127a6:	81a3      	strh	r3, [r4, #12]
 80127a8:	6923      	ldr	r3, [r4, #16]
 80127aa:	b94b      	cbnz	r3, 80127c0 <__swsetup_r+0x7c>
 80127ac:	89a3      	ldrh	r3, [r4, #12]
 80127ae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80127b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127b6:	d003      	beq.n	80127c0 <__swsetup_r+0x7c>
 80127b8:	4621      	mov	r1, r4
 80127ba:	4628      	mov	r0, r5
 80127bc:	f000 f884 	bl	80128c8 <__smakebuf_r>
 80127c0:	89a0      	ldrh	r0, [r4, #12]
 80127c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80127c6:	f010 0301 	ands.w	r3, r0, #1
 80127ca:	d00a      	beq.n	80127e2 <__swsetup_r+0x9e>
 80127cc:	2300      	movs	r3, #0
 80127ce:	60a3      	str	r3, [r4, #8]
 80127d0:	6963      	ldr	r3, [r4, #20]
 80127d2:	425b      	negs	r3, r3
 80127d4:	61a3      	str	r3, [r4, #24]
 80127d6:	6923      	ldr	r3, [r4, #16]
 80127d8:	b943      	cbnz	r3, 80127ec <__swsetup_r+0xa8>
 80127da:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80127de:	d1c4      	bne.n	801276a <__swsetup_r+0x26>
 80127e0:	bd38      	pop	{r3, r4, r5, pc}
 80127e2:	0781      	lsls	r1, r0, #30
 80127e4:	bf58      	it	pl
 80127e6:	6963      	ldrpl	r3, [r4, #20]
 80127e8:	60a3      	str	r3, [r4, #8]
 80127ea:	e7f4      	b.n	80127d6 <__swsetup_r+0x92>
 80127ec:	2000      	movs	r0, #0
 80127ee:	e7f7      	b.n	80127e0 <__swsetup_r+0x9c>
 80127f0:	20001d88 	.word	0x20001d88

080127f4 <_raise_r>:
 80127f4:	291f      	cmp	r1, #31
 80127f6:	b538      	push	{r3, r4, r5, lr}
 80127f8:	4604      	mov	r4, r0
 80127fa:	460d      	mov	r5, r1
 80127fc:	d904      	bls.n	8012808 <_raise_r+0x14>
 80127fe:	2316      	movs	r3, #22
 8012800:	6003      	str	r3, [r0, #0]
 8012802:	f04f 30ff 	mov.w	r0, #4294967295
 8012806:	bd38      	pop	{r3, r4, r5, pc}
 8012808:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801280a:	b112      	cbz	r2, 8012812 <_raise_r+0x1e>
 801280c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012810:	b94b      	cbnz	r3, 8012826 <_raise_r+0x32>
 8012812:	4620      	mov	r0, r4
 8012814:	f000 f830 	bl	8012878 <_getpid_r>
 8012818:	462a      	mov	r2, r5
 801281a:	4601      	mov	r1, r0
 801281c:	4620      	mov	r0, r4
 801281e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012822:	f000 b817 	b.w	8012854 <_kill_r>
 8012826:	2b01      	cmp	r3, #1
 8012828:	d00a      	beq.n	8012840 <_raise_r+0x4c>
 801282a:	1c59      	adds	r1, r3, #1
 801282c:	d103      	bne.n	8012836 <_raise_r+0x42>
 801282e:	2316      	movs	r3, #22
 8012830:	6003      	str	r3, [r0, #0]
 8012832:	2001      	movs	r0, #1
 8012834:	e7e7      	b.n	8012806 <_raise_r+0x12>
 8012836:	2400      	movs	r4, #0
 8012838:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801283c:	4628      	mov	r0, r5
 801283e:	4798      	blx	r3
 8012840:	2000      	movs	r0, #0
 8012842:	e7e0      	b.n	8012806 <_raise_r+0x12>

08012844 <raise>:
 8012844:	4b02      	ldr	r3, [pc, #8]	; (8012850 <raise+0xc>)
 8012846:	4601      	mov	r1, r0
 8012848:	6818      	ldr	r0, [r3, #0]
 801284a:	f7ff bfd3 	b.w	80127f4 <_raise_r>
 801284e:	bf00      	nop
 8012850:	20001d88 	.word	0x20001d88

08012854 <_kill_r>:
 8012854:	b538      	push	{r3, r4, r5, lr}
 8012856:	4d07      	ldr	r5, [pc, #28]	; (8012874 <_kill_r+0x20>)
 8012858:	2300      	movs	r3, #0
 801285a:	4604      	mov	r4, r0
 801285c:	4608      	mov	r0, r1
 801285e:	4611      	mov	r1, r2
 8012860:	602b      	str	r3, [r5, #0]
 8012862:	f7ee fc09 	bl	8001078 <_kill>
 8012866:	1c43      	adds	r3, r0, #1
 8012868:	d102      	bne.n	8012870 <_kill_r+0x1c>
 801286a:	682b      	ldr	r3, [r5, #0]
 801286c:	b103      	cbz	r3, 8012870 <_kill_r+0x1c>
 801286e:	6023      	str	r3, [r4, #0]
 8012870:	bd38      	pop	{r3, r4, r5, pc}
 8012872:	bf00      	nop
 8012874:	2000b868 	.word	0x2000b868

08012878 <_getpid_r>:
 8012878:	f7ee bbf6 	b.w	8001068 <_getpid>

0801287c <__swhatbuf_r>:
 801287c:	b570      	push	{r4, r5, r6, lr}
 801287e:	460c      	mov	r4, r1
 8012880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012884:	2900      	cmp	r1, #0
 8012886:	b096      	sub	sp, #88	; 0x58
 8012888:	4615      	mov	r5, r2
 801288a:	461e      	mov	r6, r3
 801288c:	da0d      	bge.n	80128aa <__swhatbuf_r+0x2e>
 801288e:	89a3      	ldrh	r3, [r4, #12]
 8012890:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012894:	f04f 0100 	mov.w	r1, #0
 8012898:	bf0c      	ite	eq
 801289a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801289e:	2340      	movne	r3, #64	; 0x40
 80128a0:	2000      	movs	r0, #0
 80128a2:	6031      	str	r1, [r6, #0]
 80128a4:	602b      	str	r3, [r5, #0]
 80128a6:	b016      	add	sp, #88	; 0x58
 80128a8:	bd70      	pop	{r4, r5, r6, pc}
 80128aa:	466a      	mov	r2, sp
 80128ac:	f000 f848 	bl	8012940 <_fstat_r>
 80128b0:	2800      	cmp	r0, #0
 80128b2:	dbec      	blt.n	801288e <__swhatbuf_r+0x12>
 80128b4:	9901      	ldr	r1, [sp, #4]
 80128b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80128ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80128be:	4259      	negs	r1, r3
 80128c0:	4159      	adcs	r1, r3
 80128c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128c6:	e7eb      	b.n	80128a0 <__swhatbuf_r+0x24>

080128c8 <__smakebuf_r>:
 80128c8:	898b      	ldrh	r3, [r1, #12]
 80128ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128cc:	079d      	lsls	r5, r3, #30
 80128ce:	4606      	mov	r6, r0
 80128d0:	460c      	mov	r4, r1
 80128d2:	d507      	bpl.n	80128e4 <__smakebuf_r+0x1c>
 80128d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80128d8:	6023      	str	r3, [r4, #0]
 80128da:	6123      	str	r3, [r4, #16]
 80128dc:	2301      	movs	r3, #1
 80128de:	6163      	str	r3, [r4, #20]
 80128e0:	b002      	add	sp, #8
 80128e2:	bd70      	pop	{r4, r5, r6, pc}
 80128e4:	ab01      	add	r3, sp, #4
 80128e6:	466a      	mov	r2, sp
 80128e8:	f7ff ffc8 	bl	801287c <__swhatbuf_r>
 80128ec:	9900      	ldr	r1, [sp, #0]
 80128ee:	4605      	mov	r5, r0
 80128f0:	4630      	mov	r0, r6
 80128f2:	f7fe fecb 	bl	801168c <_malloc_r>
 80128f6:	b948      	cbnz	r0, 801290c <__smakebuf_r+0x44>
 80128f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128fc:	059a      	lsls	r2, r3, #22
 80128fe:	d4ef      	bmi.n	80128e0 <__smakebuf_r+0x18>
 8012900:	f023 0303 	bic.w	r3, r3, #3
 8012904:	f043 0302 	orr.w	r3, r3, #2
 8012908:	81a3      	strh	r3, [r4, #12]
 801290a:	e7e3      	b.n	80128d4 <__smakebuf_r+0xc>
 801290c:	89a3      	ldrh	r3, [r4, #12]
 801290e:	6020      	str	r0, [r4, #0]
 8012910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012914:	81a3      	strh	r3, [r4, #12]
 8012916:	9b00      	ldr	r3, [sp, #0]
 8012918:	6163      	str	r3, [r4, #20]
 801291a:	9b01      	ldr	r3, [sp, #4]
 801291c:	6120      	str	r0, [r4, #16]
 801291e:	b15b      	cbz	r3, 8012938 <__smakebuf_r+0x70>
 8012920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012924:	4630      	mov	r0, r6
 8012926:	f000 f81d 	bl	8012964 <_isatty_r>
 801292a:	b128      	cbz	r0, 8012938 <__smakebuf_r+0x70>
 801292c:	89a3      	ldrh	r3, [r4, #12]
 801292e:	f023 0303 	bic.w	r3, r3, #3
 8012932:	f043 0301 	orr.w	r3, r3, #1
 8012936:	81a3      	strh	r3, [r4, #12]
 8012938:	89a3      	ldrh	r3, [r4, #12]
 801293a:	431d      	orrs	r5, r3
 801293c:	81a5      	strh	r5, [r4, #12]
 801293e:	e7cf      	b.n	80128e0 <__smakebuf_r+0x18>

08012940 <_fstat_r>:
 8012940:	b538      	push	{r3, r4, r5, lr}
 8012942:	4d07      	ldr	r5, [pc, #28]	; (8012960 <_fstat_r+0x20>)
 8012944:	2300      	movs	r3, #0
 8012946:	4604      	mov	r4, r0
 8012948:	4608      	mov	r0, r1
 801294a:	4611      	mov	r1, r2
 801294c:	602b      	str	r3, [r5, #0]
 801294e:	f7ee fbf2 	bl	8001136 <_fstat>
 8012952:	1c43      	adds	r3, r0, #1
 8012954:	d102      	bne.n	801295c <_fstat_r+0x1c>
 8012956:	682b      	ldr	r3, [r5, #0]
 8012958:	b103      	cbz	r3, 801295c <_fstat_r+0x1c>
 801295a:	6023      	str	r3, [r4, #0]
 801295c:	bd38      	pop	{r3, r4, r5, pc}
 801295e:	bf00      	nop
 8012960:	2000b868 	.word	0x2000b868

08012964 <_isatty_r>:
 8012964:	b538      	push	{r3, r4, r5, lr}
 8012966:	4d06      	ldr	r5, [pc, #24]	; (8012980 <_isatty_r+0x1c>)
 8012968:	2300      	movs	r3, #0
 801296a:	4604      	mov	r4, r0
 801296c:	4608      	mov	r0, r1
 801296e:	602b      	str	r3, [r5, #0]
 8012970:	f7ee fbf1 	bl	8001156 <_isatty>
 8012974:	1c43      	adds	r3, r0, #1
 8012976:	d102      	bne.n	801297e <_isatty_r+0x1a>
 8012978:	682b      	ldr	r3, [r5, #0]
 801297a:	b103      	cbz	r3, 801297e <_isatty_r+0x1a>
 801297c:	6023      	str	r3, [r4, #0]
 801297e:	bd38      	pop	{r3, r4, r5, pc}
 8012980:	2000b868 	.word	0x2000b868

08012984 <_init>:
 8012984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012986:	bf00      	nop
 8012988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801298a:	bc08      	pop	{r3}
 801298c:	469e      	mov	lr, r3
 801298e:	4770      	bx	lr

08012990 <_fini>:
 8012990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012992:	bf00      	nop
 8012994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012996:	bc08      	pop	{r3}
 8012998:	469e      	mov	lr, r3
 801299a:	4770      	bx	lr
