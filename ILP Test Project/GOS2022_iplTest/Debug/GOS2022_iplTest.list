
GOS2022_iplTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d9c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002164  08017f70  08017f70  00027f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a0d4  0801a0d4  00032354  2**0
                  CONTENTS
  4 .ARM          00000008  0801a0d4  0801a0d4  0002a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a0dc  0801a0dc  00032354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a0dc  0801a0dc  0002a0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a0e0  0801a0e0  0002a0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002354  20000000  0801a0e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ca1c  20002354  0801c438  00032354  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  2000ed70  0801c438  0003ed70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032354  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00032384  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a078  00000000  00000000  000323c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008562  00000000  00000000  0005c43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002300  00000000  00000000  000649a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019f8  00000000  00000000  00066ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004dc68  00000000  00000000  000686a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d254  00000000  00000000  000b6308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efb79  00000000  00000000  000f355c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000989c  00000000  00000000  001e30d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001ec974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20002354 	.word	0x20002354
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017f54 	.word	0x08017f54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20002358 	.word	0x20002358
 800020c:	08017f54 	.word	0x08017f54

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b970 	b.w	8000f00 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	460f      	mov	r7, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d965      	bls.n	8000d1a <__udivmoddi4+0xe2>
 8000c4e:	fab2 f382 	clz	r3, r2
 8000c52:	b143      	cbz	r3, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c58:	f1c3 0220 	rsb	r2, r3, #32
 8000c5c:	409f      	lsls	r7, r3
 8000c5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c62:	4317      	orrs	r7, r2
 8000c64:	409c      	lsls	r4, r3
 8000c66:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c6a:	fa1f f58c 	uxth.w	r5, ip
 8000c6e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c72:	0c22      	lsrs	r2, r4, #16
 8000c74:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c78:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c7c:	fb01 f005 	mul.w	r0, r1, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c8c:	f080 811c 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000c90:	4290      	cmp	r0, r2
 8000c92:	f240 8119 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000c96:	3902      	subs	r1, #2
 8000c98:	4462      	add	r2, ip
 8000c9a:	1a12      	subs	r2, r2, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	fb00 f505 	mul.w	r5, r0, r5
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	d90a      	bls.n	8000cc8 <__udivmoddi4+0x90>
 8000cb2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cba:	f080 8107 	bcs.w	8000ecc <__udivmoddi4+0x294>
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	f240 8104 	bls.w	8000ecc <__udivmoddi4+0x294>
 8000cc4:	4464      	add	r4, ip
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11e      	cbz	r6, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40dc      	lsrs	r4, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0xbc>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80ed 	beq.w	8000ec2 <__udivmoddi4+0x28a>
 8000ce8:	2100      	movs	r1, #0
 8000cea:	e9c6 0500 	strd	r0, r5, [r6]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf4:	fab3 f183 	clz	r1, r3
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d149      	bne.n	8000d90 <__udivmoddi4+0x158>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	d302      	bcc.n	8000d06 <__udivmoddi4+0xce>
 8000d00:	4282      	cmp	r2, r0
 8000d02:	f200 80f8 	bhi.w	8000ef6 <__udivmoddi4+0x2be>
 8000d06:	1a84      	subs	r4, r0, r2
 8000d08:	eb65 0203 	sbc.w	r2, r5, r3
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	4617      	mov	r7, r2
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d0e2      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	e9c6 4700 	strd	r4, r7, [r6]
 8000d18:	e7df      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d1a:	b902      	cbnz	r2, 8000d1e <__udivmoddi4+0xe6>
 8000d1c:	deff      	udf	#255	; 0xff
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8090 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d28:	1a8a      	subs	r2, r1, r2
 8000d2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2e:	fa1f fe8c 	uxth.w	lr, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d38:	fb07 2015 	mls	r0, r7, r5, r2
 8000d3c:	0c22      	lsrs	r2, r4, #16
 8000d3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d42:	fb0e f005 	mul.w	r0, lr, r5
 8000d46:	4290      	cmp	r0, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d4e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4290      	cmp	r0, r2
 8000d56:	f200 80cb 	bhi.w	8000ef0 <__udivmoddi4+0x2b8>
 8000d5a:	4645      	mov	r5, r8
 8000d5c:	1a12      	subs	r2, r2, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d64:	fb07 2210 	mls	r2, r7, r0, r2
 8000d68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x14e>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x14c>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f200 80bb 	bhi.w	8000efa <__udivmoddi4+0x2c2>
 8000d84:	4610      	mov	r0, r2
 8000d86:	eba4 040e 	sub.w	r4, r4, lr
 8000d8a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d8e:	e79f      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d90:	f1c1 0720 	rsb	r7, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa05 f401 	lsl.w	r4, r5, r1
 8000da2:	fa20 f307 	lsr.w	r3, r0, r7
 8000da6:	40fd      	lsrs	r5, r7
 8000da8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dac:	4323      	orrs	r3, r4
 8000dae:	fbb5 f8f9 	udiv	r8, r5, r9
 8000db2:	fa1f fe8c 	uxth.w	lr, ip
 8000db6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dba:	0c1c      	lsrs	r4, r3, #16
 8000dbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dc0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	fa00 f001 	lsl.w	r0, r0, r1
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd8:	f080 8088 	bcs.w	8000eec <__udivmoddi4+0x2b4>
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	f240 8085 	bls.w	8000eec <__udivmoddi4+0x2b4>
 8000de2:	f1a8 0802 	sub.w	r8, r8, #2
 8000de6:	4464      	add	r4, ip
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	b29d      	uxth	r5, r3
 8000dec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df0:	fb09 4413 	mls	r4, r9, r3, r4
 8000df4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000df8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e08:	d26c      	bcs.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0a:	45a6      	cmp	lr, r4
 8000e0c:	d96a      	bls.n	8000ee4 <__udivmoddi4+0x2ac>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e16:	fba3 9502 	umull	r9, r5, r3, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	46c8      	mov	r8, r9
 8000e22:	46ae      	mov	lr, r5
 8000e24:	d356      	bcc.n	8000ed4 <__udivmoddi4+0x29c>
 8000e26:	d053      	beq.n	8000ed0 <__udivmoddi4+0x298>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x208>
 8000e2a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e2e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40ca      	lsrs	r2, r1
 8000e38:	40cc      	lsrs	r4, r1
 8000e3a:	4317      	orrs	r7, r2
 8000e3c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e48:	f1c3 0120 	rsb	r1, r3, #32
 8000e4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e50:	fa20 f201 	lsr.w	r2, r0, r1
 8000e54:	fa25 f101 	lsr.w	r1, r5, r1
 8000e58:	409d      	lsls	r5, r3
 8000e5a:	432a      	orrs	r2, r5
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1510 	mls	r5, r7, r0, r1
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e72:	fb00 f50e 	mul.w	r5, r0, lr
 8000e76:	428d      	cmp	r5, r1
 8000e78:	fa04 f403 	lsl.w	r4, r4, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x258>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e86:	d22f      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e88:	428d      	cmp	r5, r1
 8000e8a:	d92d      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1b49      	subs	r1, r1, r5
 8000e92:	b292      	uxth	r2, r2
 8000e94:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e98:	fb07 1115 	mls	r1, r7, r5, r1
 8000e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ea4:	4291      	cmp	r1, r2
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x282>
 8000ea8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eb0:	d216      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	d914      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000eb6:	3d02      	subs	r5, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	1a52      	subs	r2, r2, r1
 8000ebc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ec0:	e738      	b.n	8000d34 <__udivmoddi4+0xfc>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	4630      	mov	r0, r6
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xa2>
 8000ec8:	4639      	mov	r1, r7
 8000eca:	e6e6      	b.n	8000c9a <__udivmoddi4+0x62>
 8000ecc:	4610      	mov	r0, r2
 8000ece:	e6fb      	b.n	8000cc8 <__udivmoddi4+0x90>
 8000ed0:	4548      	cmp	r0, r9
 8000ed2:	d2a9      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000edc:	3b01      	subs	r3, #1
 8000ede:	e7a3      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ee0:	4645      	mov	r5, r8
 8000ee2:	e7ea      	b.n	8000eba <__udivmoddi4+0x282>
 8000ee4:	462b      	mov	r3, r5
 8000ee6:	e794      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee8:	4640      	mov	r0, r8
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x258>
 8000eec:	46d0      	mov	r8, sl
 8000eee:	e77b      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000ef0:	3d02      	subs	r5, #2
 8000ef2:	4462      	add	r2, ip
 8000ef4:	e732      	b.n	8000d5c <__udivmoddi4+0x124>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e70a      	b.n	8000d10 <__udivmoddi4+0xd8>
 8000efa:	4464      	add	r4, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e742      	b.n	8000d86 <__udivmoddi4+0x14e>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <gos_platformDriverInit>:

/*
 * Function: gos_platformDriverInit
 */
gos_result_t gos_platformDriverInit (void_t)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	// Platform driver initialization result.
	gos_result_t platformDriverInitResult = GOS_SUCCESS;
 8000f0a:	2355      	movs	r3, #85	; 0x55
 8000f0c:	71fb      	strb	r3, [r7, #7]

	// Driver init.
	if (HAL_Init() != HAL_OK)
 8000f0e:	f000 fcbb 	bl	8001888 <HAL_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <gos_platformDriverInit+0x18>
	{
		platformDriverInitResult = GOS_ERROR;
 8000f18:	23ae      	movs	r3, #174	; 0xae
 8000f1a:	71fb      	strb	r3, [r7, #7]
	}

	platformDriverInitResult = driver_init();
 8000f1c:	f000 fab0 	bl	8001480 <driver_init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]

	// Register kernel drivers.
	platformDriverInitResult &= gos_driverInit(&driverFunctions);
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <gos_platformDriverInit+0x54>)
 8000f26:	f00d fa2b 	bl	800e380 <gos_driverInit>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4013      	ands	r3, r2
 8000f32:	71fb      	strb	r3, [r7, #7]

    if (platformDriverInitResult != GOS_SUCCESS)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	2b55      	cmp	r3, #85	; 0x55
 8000f38:	d001      	beq.n	8000f3e <gos_platformDriverInit+0x3a>
	{
    	platformDriverInitResult = GOS_ERROR;
 8000f3a:	23ae      	movs	r3, #174	; 0xae
 8000f3c:	71fb      	strb	r3, [r7, #7]
	}

    SysTick->VAL = 0;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <gos_platformDriverInit+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <gos_platformDriverInit+0x58>)
 8000f46:	2207      	movs	r2, #7
 8000f48:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f4a:	b662      	cpsie	i
}
 8000f4c:	bf00      	nop

    __enable_irq();

	return platformDriverInitResult;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <gos_userApplicationInit>:

/*
 * Function: gos_userApplicationInit
 */
gos_result_t gos_userApplicationInit (void_t)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	gos_result_t appInitResult = GOS_SUCCESS;
 8000f66:	2355      	movs	r3, #85	; 0x55
 8000f68:	71fb      	strb	r3, [r7, #7]

	// Initialize device state manager for startup.
	appInitResult &= svl_dsmInit();
 8000f6a:	f00b fb51 	bl	800c610 <svl_dsmInit>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4013      	ands	r3, r2
 8000f76:	71fb      	strb	r3, [r7, #7]

	// Welcome message.
	(void_t) gos_traceTrace(GOS_FALSE, "Welcome to IPL test application!");
 8000f78:	4906      	ldr	r1, [pc, #24]	; (8000f94 <gos_userApplicationInit+0x34>)
 8000f7a:	2049      	movs	r0, #73	; 0x49
 8000f7c:	f013 fb96 	bl	80146ac <gos_traceTrace>

	if (appInitResult != GOS_SUCCESS)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b55      	cmp	r3, #85	; 0x55
 8000f84:	d001      	beq.n	8000f8a <gos_userApplicationInit+0x2a>
	{
		appInitResult = GOS_ERROR;
 8000f86:	23ae      	movs	r3, #174	; 0xae
 8000f88:	71fb      	strb	r3, [r7, #7]
	}

	return appInitResult;
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08017f70 	.word	0x08017f70

08000f98 <app_iplBdSpecInit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout);
GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout);

gos_result_t app_iplBdSpecInit (void_t)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	return svl_iplConfigure(app_iplBdSpecTransmit, app_iplBdSpecReceive);
 8000f9c:	4903      	ldr	r1, [pc, #12]	; (8000fac <app_iplBdSpecInit+0x14>)
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <app_iplBdSpecInit+0x18>)
 8000fa0:	f00b fe60 	bl	800cc64 <svl_iplConfigure>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	08000fdd 	.word	0x08000fdd
 8000fb0:	08000fb5 	.word	0x08000fb5

08000fb4 <app_iplBdSpecTransmit>:

GOS_STATIC gos_result_t app_iplBdSpecTransmit (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	return drv_uartTransmitIT(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68f9      	ldr	r1, [r7, #12]
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f00a fce7 	bl	800b9a0 <drv_uartTransmitIT>
 8000fd2:	4603      	mov	r3, r0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <app_iplBdSpecReceive>:

GOS_STATIC gos_result_t app_iplBdSpecReceive (u8_t* pData, u32_t dataSize, u32_t timeout)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	if (timeout < 0xFFFFFFFFu)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fee:	d008      	beq.n	8001002 <app_iplBdSpecReceive+0x26>
	{
		return drv_uartReceiveBlocking(DRV_UART_INSTANCE_4, pData, dataSize, timeout);
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68f9      	ldr	r1, [r7, #12]
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f00a fba5 	bl	800b748 <drv_uartReceiveBlocking>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e009      	b.n	8001016 <app_iplBdSpecReceive+0x3a>
	}
	else
	{
		return drv_uartReceiveDMA(DRV_UART_INSTANCE_4, pData, dataSize, timeout, timeout);
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	b29a      	uxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68f9      	ldr	r1, [r7, #12]
 800100e:	2003      	movs	r0, #3
 8001010:	f00a fc56 	bl	800b8c0 <drv_uartReceiveDMA>
 8001014:	4603      	mov	r3, r0
	}
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <APP_LedInit>:
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER,
	.taskStackSize      = 0x300
};

gos_result_t APP_LedInit (void_t)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	gos_result_t ledInitResult = GOS_SUCCESS;
 8001026:	2355      	movs	r3, #85	; 0x55
 8001028:	71fb      	strb	r3, [r7, #7]

	ledInitResult &= gos_taskRegister(&ledTaskDesc, NULL);
 800102a:	2100      	movs	r1, #0
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <APP_LedInit+0x30>)
 800102e:	f00e fb8f 	bl	800f750 <gos_taskRegister>
 8001032:	4603      	mov	r3, r0
 8001034:	461a      	mov	r2, r3
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4013      	ands	r3, r2
 800103a:	71fb      	strb	r3, [r7, #7]

	if (ledInitResult != GOS_SUCCESS)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b55      	cmp	r3, #85	; 0x55
 8001040:	d001      	beq.n	8001046 <APP_LedInit+0x26>
	{
		ledInitResult = GOS_ERROR;
 8001042:	23ae      	movs	r3, #174	; 0xae
 8001044:	71fb      	strb	r3, [r7, #7]
	}

	return ledInitResult;
 8001046:	79fb      	ldrb	r3, [r7, #7]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000001c 	.word	0x2000001c

08001054 <APP_LedTask>:

GOS_STATIC void_t APP_LedTask (void_t)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	for (;;)
	{
		drv_gpioTgglePin(IO_USER_LED);
 8001058:	2000      	movs	r0, #0
 800105a:	f008 fd41 	bl	8009ae0 <drv_gpioTgglePin>
		gos_taskSleep(LED_TASK_PERIOD);
 800105e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001062:	f00e fd07 	bl	800fa74 <gos_taskSleep>
		drv_gpioTgglePin(IO_USER_LED);
 8001066:	e7f7      	b.n	8001058 <APP_LedTask+0x4>

08001068 <app_pdhBdSpecInit>:
	.taskPriority 	= 10,
	.taskPrivilegeLevel	= GOS_TASK_PRIVILEGED_USER
};

gos_result_t app_pdhBdSpecInit (void_t)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	gos_result_t pdhBdSpecInitRes = GOS_SUCCESS;
 800106e:	2355      	movs	r3, #85	; 0x55
 8001070:	71fb      	strb	r3, [r7, #7]

	pdhBdSpecInitRes &= drv_25lc640Init((void_t*)&mem01a1_eeprom2);
 8001072:	4811      	ldr	r0, [pc, #68]	; (80010b8 <app_pdhBdSpecInit+0x50>)
 8001074:	f007 fc6a 	bl	800894c <drv_25lc640Init>
 8001078:	4603      	mov	r3, r0
 800107a:	461a      	mov	r2, r3
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	4013      	ands	r3, r2
 8001080:	71fb      	strb	r3, [r7, #7]
	pdhBdSpecInitRes &= svl_pdhConfigure(&pdhCfg);
 8001082:	480e      	ldr	r0, [pc, #56]	; (80010bc <app_pdhBdSpecInit+0x54>)
 8001084:	f00c fa98 	bl	800d5b8 <svl_pdhConfigure>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4013      	ands	r3, r2
 8001090:	71fb      	strb	r3, [r7, #7]
	pdhBdSpecInitRes &= gos_taskRegister(&pdhTestTask, NULL);
 8001092:	2100      	movs	r1, #0
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <app_pdhBdSpecInit+0x58>)
 8001096:	f00e fb5b 	bl	800f750 <gos_taskRegister>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4013      	ands	r3, r2
 80010a2:	71fb      	strb	r3, [r7, #7]

	if (pdhBdSpecInitRes != GOS_SUCCESS)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b55      	cmp	r3, #85	; 0x55
 80010a8:	d001      	beq.n	80010ae <app_pdhBdSpecInit+0x46>
		pdhBdSpecInitRes = GOS_ERROR;
 80010aa:	23ae      	movs	r3, #174	; 0xae
 80010ac:	71fb      	strb	r3, [r7, #7]

	return pdhBdSpecInitRes;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000088 	.word	0x20000088
 80010bc:	20000344 	.word	0x20000344
 80010c0:	2000034c 	.word	0x2000034c

080010c4 <app_pdhTestTask>:
	.gateway   = { 192, 168, 100, 1   },
	.subnet    = { 255, 255, 0,   0   }
};

GOS_STATIC void_t app_pdhTestTask (void_t)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	u32_t sysTicks = gos_kernelGetSysTicks();
 80010ca:	f00d fb23 	bl	800e714 <gos_kernelGetSysTicks>
 80010ce:	6078      	str	r0, [r7, #4]

	app_pdhBdSpecCheckSoftwareInfo();
 80010d0:	f000 f812 	bl	80010f8 <app_pdhBdSpecCheckSoftwareInfo>

	for (;;)
	{
		// Fake load generation.
		gos_kernelDelayMs(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f00d fb59 	bl	800e78c <gos_kernelDelayMs>
		(void_t) gos_taskSleep(5);
 80010da:	2005      	movs	r0, #5
 80010dc:	f00e fcca 	bl	800fa74 <gos_taskSleep>

		if (gos_kernelGetSysTicks() - sysTicks >= 1000)
 80010e0:	f00d fb18 	bl	800e714 <gos_kernelGetSysTicks>
 80010e4:	4602      	mov	r2, r0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ee:	d3f1      	bcc.n	80010d4 <app_pdhTestTask+0x10>
		{
			//gos_traceTrace(GOS_TRUE, "\r");
			sysTicks = gos_kernelGetSysTicks();
 80010f0:	f00d fb10 	bl	800e714 <gos_kernelGetSysTicks>
 80010f4:	6078      	str	r0, [r7, #4]
		gos_kernelDelayMs(1);
 80010f6:	e7ed      	b.n	80010d4 <app_pdhTestTask+0x10>

080010f8 <app_pdhBdSpecCheckSoftwareInfo>:
		}
	}
}

GOS_STATIC void_t app_pdhBdSpecCheckSoftwareInfo (void_t)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
	u32_t swInfoCrc     = 0u;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
	u32_t testSwInfoCrc = 0u;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]

	(void_t) svl_pdhGetSwInfo(&testSwInfo);
 8001106:	4813      	ldr	r0, [pc, #76]	; (8001154 <app_pdhBdSpecCheckSoftwareInfo+0x5c>)
 8001108:	f00c faf0 	bl	800d6ec <svl_pdhGetSwInfo>

	(void_t) drv_crcGetCrc32((u8_t*)&swInfo.appSwVerInfo, sizeof(swInfo.appSwVerInfo), &swInfoCrc);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	461a      	mov	r2, r3
 8001110:	21a0      	movs	r1, #160	; 0xa0
 8001112:	4811      	ldr	r0, [pc, #68]	; (8001158 <app_pdhBdSpecCheckSoftwareInfo+0x60>)
 8001114:	f007 fea2 	bl	8008e5c <drv_crcGetCrc32>
	(void_t) drv_crcGetCrc32((u8_t*)&testSwInfo.appSwVerInfo, sizeof(testSwInfo.appSwVerInfo), &testSwInfoCrc);
 8001118:	463b      	mov	r3, r7
 800111a:	461a      	mov	r2, r3
 800111c:	21a0      	movs	r1, #160	; 0xa0
 800111e:	480f      	ldr	r0, [pc, #60]	; (800115c <app_pdhBdSpecCheckSoftwareInfo+0x64>)
 8001120:	f007 fe9c 	bl	8008e5c <drv_crcGetCrc32>

	// Check if application information has been modified.
	if (swInfoCrc != testSwInfoCrc)
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d00f      	beq.n	800114c <app_pdhBdSpecCheckSoftwareInfo+0x54>
	{
		(void_t) svl_pdhGetLibVersion(&swInfo.appLibVerInfo);
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <app_pdhBdSpecCheckSoftwareInfo+0x68>)
 800112e:	f00c fa69 	bl	800d604 <svl_pdhGetLibVersion>
		(void_t) svl_pdhSetSwInfo(&swInfo);
 8001132:	480c      	ldr	r0, [pc, #48]	; (8001164 <app_pdhBdSpecCheckSoftwareInfo+0x6c>)
 8001134:	f00c fb3a 	bl	800d7ac <svl_pdhSetSwInfo>

		(void_t) gos_traceTrace(GOS_TRUE, "Software info updated. Restarting device...\r\n");
 8001138:	490b      	ldr	r1, [pc, #44]	; (8001168 <app_pdhBdSpecCheckSoftwareInfo+0x70>)
 800113a:	2036      	movs	r0, #54	; 0x36
 800113c:	f013 fab6 	bl	80146ac <gos_traceTrace>
		(void_t) gos_taskSleep(1000);
 8001140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001144:	f00e fc96 	bl	800fa74 <gos_taskSleep>
		gos_kernelReset();
 8001148:	f00d fb02 	bl	800e750 <gos_kernelReset>
	}
	else
	{
		// Application information is up to date.
	}
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20002370 	.word	0x20002370
 8001158:	20000294 	.word	0x20000294
 800115c:	20002560 	.word	0x20002560
 8001160:	200001f4 	.word	0x200001f4
 8001164:	200000a4 	.word	0x200000a4
 8001168:	08017f94 	.word	0x08017f94

0800116c <app_pdhBdSpecRead>:

GOS_STATIC gos_result_t app_pdhBdSpecRead  (u32_t address, u8_t* pData, u16_t size)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	4613      	mov	r3, r2
 8001178:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Read((void_t*)&mem01a1_eeprom2, address, pData, size);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	b299      	uxth	r1, r3
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	4804      	ldr	r0, [pc, #16]	; (8001194 <app_pdhBdSpecRead+0x28>)
 8001184:	f007 fc10 	bl	80089a8 <drv_25lc640Read>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000088 	.word	0x20000088

08001198 <app_pdhBdSpecWrite>:

GOS_STATIC gos_result_t app_pdhBdSpecWrite (u32_t address, u8_t* pData, u16_t size)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	4613      	mov	r3, r2
 80011a4:	80fb      	strh	r3, [r7, #6]
	return drv_25lc640Write((void_t*)&mem01a1_eeprom2, address, pData, size);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	b299      	uxth	r1, r3
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4804      	ldr	r0, [pc, #16]	; (80011c0 <app_pdhBdSpecWrite+0x28>)
 80011b0:	f007 fd0f 	bl	8008bd2 <drv_25lc640Write>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000088 	.word	0x20000088

080011c4 <app_sdhBdSpecInit>:
	.readFunction  = app_sdhBdSpecRead,
	.writeFunction = app_sdhBdSpecWrite
};

gos_result_t app_sdhBdSpecInit (void_t)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	gos_result_t sdhBdSpecInitRes = GOS_SUCCESS;
 80011ca:	2355      	movs	r3, #85	; 0x55
 80011cc:	71fb      	strb	r3, [r7, #7]

	sdhBdSpecInitRes &= drv_w25q64Init((void_t*)&mem01a1flash);
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <app_sdhBdSpecInit+0x40>)
 80011d0:	f00a fee8 	bl	800bfa4 <drv_w25q64Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	461a      	mov	r2, r3
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4013      	ands	r3, r2
 80011dc:	71fb      	strb	r3, [r7, #7]
	sdhBdSpecInitRes &= svl_sdhConfigure(&sdhCfg);
 80011de:	480a      	ldr	r0, [pc, #40]	; (8001208 <app_sdhBdSpecInit+0x44>)
 80011e0:	f00c fb8e 	bl	800d900 <svl_sdhConfigure>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4013      	ands	r3, r2
 80011ec:	71fb      	strb	r3, [r7, #7]

	if (sdhBdSpecInitRes != GOS_SUCCESS)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b55      	cmp	r3, #85	; 0x55
 80011f2:	d001      	beq.n	80011f8 <app_sdhBdSpecInit+0x34>
		sdhBdSpecInitRes = GOS_ERROR;
 80011f4:	23ae      	movs	r3, #174	; 0xae
 80011f6:	71fb      	strb	r3, [r7, #7]

	return sdhBdSpecInitRes;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200003b8 	.word	0x200003b8
 8001208:	200003d4 	.word	0x200003d4

0800120c <app_sdhBdSpecRead>:

GOS_STATIC gos_result_t app_sdhBdSpecRead (u32_t address, u8_t* pData, u32_t size)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
	drv_w25q64ReadData((void_t*)&mem01a1flash, address, pData, size);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	68f9      	ldr	r1, [r7, #12]
 800121e:	4808      	ldr	r0, [pc, #32]	; (8001240 <app_sdhBdSpecRead+0x34>)
 8001220:	f00a feee 	bl	800c000 <drv_w25q64ReadData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_READ) == 0u)
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <app_sdhBdSpecRead+0x34>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <app_sdhBdSpecRead+0x28>
	{
		return GOS_SUCCESS;
 8001230:	2355      	movs	r3, #85	; 0x55
 8001232:	e000      	b.n	8001236 <app_sdhBdSpecRead+0x2a>
	}
	else
	{
		return GOS_ERROR;
 8001234:	23ae      	movs	r3, #174	; 0xae
	}
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200003b8 	.word	0x200003b8

08001244 <app_sdhBdSpecWrite>:

GOS_STATIC gos_result_t app_sdhBdSpecWrite (u32_t address, u8_t* pData, u32_t size)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	drv_w25q64WriteData((void_t*)&mem01a1flash, address, pData, size);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	68f9      	ldr	r1, [r7, #12]
 8001256:	4808      	ldr	r0, [pc, #32]	; (8001278 <app_sdhBdSpecWrite+0x34>)
 8001258:	f00a ff28 	bl	800c0ac <drv_w25q64WriteData>

	if ((mem01a1flash.errorFlags & DRV_ERROR_W25Q64_WRITE) == 0u)
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <app_sdhBdSpecWrite+0x34>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <app_sdhBdSpecWrite+0x28>
	{
		return GOS_SUCCESS;
 8001268:	2355      	movs	r3, #85	; 0x55
 800126a:	e000      	b.n	800126e <app_sdhBdSpecWrite+0x2a>
	}
	else
	{
		return GOS_ERROR;
 800126c:	23ae      	movs	r3, #174	; 0xae
	}
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200003b8 	.word	0x200003b8

0800127c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
	return 1;
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_kill>:

int _kill(int pid, int sig)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001296:	f014 fdaf 	bl	8015df8 <__errno>
 800129a:	4603      	mov	r3, r0
 800129c:	2216      	movs	r2, #22
 800129e:	601a      	str	r2, [r3, #0]
	return -1;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_exit>:

void _exit (int status)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ffe7 	bl	800128c <_kill>
	while (1) {}		/* Make sure we hang here */
 80012be:	e7fe      	b.n	80012be <_exit+0x12>

080012c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e00a      	b.n	80012e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012d2:	f3af 8000 	nop.w
 80012d6:	4601      	mov	r1, r0
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	60ba      	str	r2, [r7, #8]
 80012de:	b2ca      	uxtb	r2, r1
 80012e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf0      	blt.n	80012d2 <_read+0x12>
	}

return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	e009      	b.n	8001320 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	60ba      	str	r2, [r7, #8]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf1      	blt.n	800130c <_write+0x12>
	}
	return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_close>:

int _close(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	return -1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
 8001352:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135a:	605a      	str	r2, [r3, #4]
	return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <_isatty>:

int _isatty(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	return 1;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
	return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f014 fd14 	bl	8015df8 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20020000 	.word	0x20020000
 80013fc:	00000400 	.word	0x00000400
 8001400:	20002610 	.word	0x20002610
 8001404:	2000ed70 	.word	0x2000ed70

08001408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001430:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001432:	e003      	b.n	800143c <LoopCopyDataInit>

08001434 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001436:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001438:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800143a:	3104      	adds	r1, #4

0800143c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800143c:	480b      	ldr	r0, [pc, #44]	; (800146c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001440:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001442:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001444:	d3f6      	bcc.n	8001434 <CopyDataInit>
  ldr  r2, =_sbss
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001448:	e002      	b.n	8001450 <LoopFillZerobss>

0800144a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800144a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800144c:	f842 3b04 	str.w	r3, [r2], #4

08001450 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001452:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001454:	d3f9      	bcc.n	800144a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001456:	f7ff ffd7 	bl	8001408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145a:	f014 fcd3 	bl	8015e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145e:	f00f ff13 	bl	8011288 <main>
  bx  lr    
 8001462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001464:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001468:	0801a0e4 	.word	0x0801a0e4
  ldr  r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001470:	20002354 	.word	0x20002354
  ldr  r2, =_sbss
 8001474:	20002354 	.word	0x20002354
  ldr  r3, = _ebss
 8001478:	2000ed70 	.word	0x2000ed70

0800147c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC_IRQHandler>
	...

08001480 <driver_init>:
#include "drv_uart.h"

GOS_STATIC void_t sysTickHook (void_t);

gos_result_t driver_init (void_t)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	gos_result_t driverInitResult = GOS_SUCCESS;
 8001486:	2355      	movs	r3, #85	; 0x55
 8001488:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= rcc_driver_init();
 800148a:	f000 f84f 	bl	800152c <rcc_driver_init>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4013      	ands	r3, r2
 8001496:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_tmrInit();
 8001498:	f009 fc42 	bl	800ad20 <drv_tmrInit>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4013      	ands	r3, r2
 80014a4:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_systimerStart();
 80014a6:	f009 fbfd 	bl	800aca4 <drv_systimerStart>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4013      	ands	r3, r2
 80014b2:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_gpioInit();
 80014b4:	f008 fa18 	bl	80098e8 <drv_gpioInit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	4013      	ands	r3, r2
 80014c0:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_i2cInit();
 80014c2:	f008 fc25 	bl	8009d10 <drv_i2cInit>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4013      	ands	r3, r2
 80014ce:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_spiInit();
 80014d0:	f008 ff64 	bl	800a39c <drv_spiInit>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b25a      	sxtb	r2, r3
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4013      	ands	r3, r2
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_dmaInit();
 80014e2:	f007 fd31 	bl	8008f48 <drv_dmaInit>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4013      	ands	r3, r2
 80014ee:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_uartInit();
 80014f0:	f009 ff8e 	bl	800b410 <drv_uartInit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4013      	ands	r3, r2
 80014fc:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_itInit();
 80014fe:	f008 feb3 	bl	800a268 <drv_itInit>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4013      	ands	r3, r2
 800150a:	71fb      	strb	r3, [r7, #7]

	gos_kernelRegisterSysTickHook(sysTickHook);
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <driver_init+0x9c>)
 800150e:	f00d f8ad 	bl	800e66c <gos_kernelRegisterSysTickHook>

	return driverInitResult;
 8001512:	79fb      	ldrb	r3, [r7, #7]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	08001521 	.word	0x08001521

08001520 <sysTickHook>:

GOS_STATIC void_t sysTickHook (void_t)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001524:	f000 fa0a 	bl	800193c <HAL_IncTick>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <rcc_driver_init>:
#include "rcc_driver.h"
//#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"

gos_result_t rcc_driver_init (void_t)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0ac      	sub	sp, #176	; 0xb0
 8001530:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 8001532:	23ae      	movs	r3, #174	; 0xae
 8001534:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001538:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800153c:	2234      	movs	r2, #52	; 0x34
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f014 fc07 	bl	8015d54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001546:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]

	/*
	 * Function code.
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	663b      	str	r3, [r7, #96]	; 0x60
 800155a:	4ba3      	ldr	r3, [pc, #652]	; (80017e8 <rcc_driver_init+0x2bc>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4aa2      	ldr	r2, [pc, #648]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4ba0      	ldr	r3, [pc, #640]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	663b      	str	r3, [r7, #96]	; 0x60
 8001570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001572:	2300      	movs	r3, #0
 8001574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001576:	4b9d      	ldr	r3, [pc, #628]	; (80017ec <rcc_driver_init+0x2c0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800157e:	4a9b      	ldr	r2, [pc, #620]	; (80017ec <rcc_driver_init+0x2c0>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b99      	ldr	r3, [pc, #612]	; (80017ec <rcc_driver_init+0x2c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800158e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001592:	2301      	movs	r3, #1
 8001594:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159a:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLM = 4;
 80015aa:	2304      	movs	r3, #4
 80015ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLN = 50;
 80015b0:	2332      	movs	r3, #50	; 0x32
 80015b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80015bc:	2302      	movs	r3, #2
 80015be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLR = 2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 80015c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 fbe9 	bl	8004da4 <HAL_RCC_OscConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d116      	bne.n	8001606 <rcc_driver_init+0xda>
	{
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d8:	230f      	movs	r3, #15
 80015da:	667b      	str	r3, [r7, #100]	; 0x64
		                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015dc:	2302      	movs	r3, #2
 80015de:	66bb      	str	r3, [r7, #104]	; 0x68
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	66fb      	str	r3, [r7, #108]	; 0x6c
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e8:	673b      	str	r3, [r7, #112]	; 0x70
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	677b      	str	r3, [r7, #116]	; 0x74

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, /*FLASH_LATENCY_2*/ FLASH_LATENCY_1) == HAL_OK)
 80015ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015f2:	2101      	movs	r1, #1
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 f88b 	bl	8004710 <HAL_RCC_ClockConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <rcc_driver_init+0xda>
		{
			initResult = GOS_SUCCESS;
 8001600:	2355      	movs	r3, #85	; 0x55
 8001602:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		}
	}

	// TODO
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	65bb      	str	r3, [r7, #88]	; 0x58
 800160a:	4b77      	ldr	r3, [pc, #476]	; (80017e8 <rcc_driver_init+0x2bc>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a76      	ldr	r2, [pc, #472]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b74      	ldr	r3, [pc, #464]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001620:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	657b      	str	r3, [r7, #84]	; 0x54
 8001626:	4b70      	ldr	r3, [pc, #448]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a6f      	ldr	r2, [pc, #444]	; (80017e8 <rcc_driver_init+0x2bc>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	657b      	str	r3, [r7, #84]	; 0x54
 800163c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	653b      	str	r3, [r7, #80]	; 0x50
 8001642:	4b69      	ldr	r3, [pc, #420]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a68      	ldr	r2, [pc, #416]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b66      	ldr	r3, [pc, #408]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	653b      	str	r3, [r7, #80]	; 0x50
 8001658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800165e:	4b62      	ldr	r3, [pc, #392]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a61      	ldr	r2, [pc, #388]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b5f      	ldr	r3, [pc, #380]	; (80017e8 <rcc_driver_init+0x2bc>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	64bb      	str	r3, [r7, #72]	; 0x48
 800167a:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <rcc_driver_init+0x2bc>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a5a      	ldr	r2, [pc, #360]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001690:	6cbb      	ldr	r3, [r7, #72]	; 0x48

	__HAL_RCC_ADC1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	647b      	str	r3, [r7, #68]	; 0x44
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a53      	ldr	r2, [pc, #332]	; (80017e8 <rcc_driver_init+0x2bc>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <rcc_driver_init+0x2bc>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
 80016ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	__HAL_RCC_DMA1_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	643b      	str	r3, [r7, #64]	; 0x40
 80016b2:	4b4d      	ldr	r3, [pc, #308]	; (80017e8 <rcc_driver_init+0x2bc>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a4c      	ldr	r2, [pc, #304]	; (80017e8 <rcc_driver_init+0x2bc>)
 80016b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <rcc_driver_init+0x2bc>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c6:	643b      	str	r3, [r7, #64]	; 0x40
 80016c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	__HAL_RCC_DMA2_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ce:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <rcc_driver_init+0x2bc>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a45      	ldr	r2, [pc, #276]	; (80017e8 <rcc_driver_init+0x2bc>)
 80016d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <rcc_driver_init+0x2bc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	__HAL_RCC_I2C1_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80016ea:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <rcc_driver_init+0x2bc>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a3e      	ldr	r2, [pc, #248]	; (80017e8 <rcc_driver_init+0x2bc>)
 80016f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <rcc_driver_init+0x2bc>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	__HAL_RCC_I2C2_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
 8001706:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a37      	ldr	r2, [pc, #220]	; (80017e8 <rcc_driver_init+0x2bc>)
 800170c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
 800171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	__HAL_RCC_SPI2_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	633b      	str	r3, [r7, #48]	; 0x30
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a30      	ldr	r2, [pc, #192]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
 8001738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	__HAL_RCC_SPI3_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173e:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <rcc_driver_init+0x2bc>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <rcc_driver_init+0x2bc>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001770:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <rcc_driver_init+0x2bc>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_TIM12_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <rcc_driver_init+0x2bc>)
 8001798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <rcc_driver_init+0x2bc>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a6:	623b      	str	r3, [r7, #32]
 80017a8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DAC_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <rcc_driver_init+0x2bc>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <rcc_driver_init+0x2bc>)
 80017b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <rcc_driver_init+0x2bc>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	69fb      	ldr	r3, [r7, #28]

	__HAL_RCC_USART1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <rcc_driver_init+0x2bc>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <rcc_driver_init+0x2bc>)
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <rcc_driver_init+0x2bc>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_USART2_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e003      	b.n	80017f0 <rcc_driver_init+0x2c4>
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <rcc_driver_init+0x358>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	4a23      	ldr	r2, [pc, #140]	; (8001884 <rcc_driver_init+0x358>)
 80017f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fa:	6413      	str	r3, [r2, #64]	; 0x40
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <rcc_driver_init+0x358>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_USART3_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <rcc_driver_init+0x358>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <rcc_driver_init+0x358>)
 8001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <rcc_driver_init+0x358>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_UART4_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <rcc_driver_init+0x358>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	4a15      	ldr	r2, [pc, #84]	; (8001884 <rcc_driver_init+0x358>)
 800182e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001832:	6413      	str	r3, [r2, #64]	; 0x40
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <rcc_driver_init+0x358>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_UART5_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <rcc_driver_init+0x358>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <rcc_driver_init+0x358>)
 800184a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800184e:	6413      	str	r3, [r2, #64]	; 0x40
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <rcc_driver_init+0x358>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART6_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <rcc_driver_init+0x358>)
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <rcc_driver_init+0x358>)
 8001866:	f043 0320 	orr.w	r3, r3, #32
 800186a:	6453      	str	r3, [r2, #68]	; 0x44
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <rcc_driver_init+0x358>)
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	f003 0320 	and.w	r3, r3, #32
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]

	return initResult;
 8001878:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 800187c:	4618      	mov	r0, r3
 800187e:	37b0      	adds	r7, #176	; 0xb0
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f933 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f810 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f000 f806 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f943 	bl	8001b86 <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f90b 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	; (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200003dc 	.word	0x200003dc
 8001934:	2000066c 	.word	0x2000066c
 8001938:	20000668 	.word	0x20000668

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	2000066c 	.word	0x2000066c
 8001960:	20002620 	.word	0x20002620

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20002620 	.word	0x20002620

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	; (8001a18 <__NVIC_EnableIRQ+0x38>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	; 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff8e 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff29 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff3e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff8e 	bl	8001a70 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5d 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff31 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa2 	bl	8001ad8 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff feda 	bl	8001964 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e099      	b.n	8001cf0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bdc:	e00f      	b.n	8001bfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bde:	f7ff fec1 	bl	8001964 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d908      	bls.n	8001bfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e078      	b.n	8001cf0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e8      	bne.n	8001bde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4b38      	ldr	r3, [pc, #224]	; (8001cf8 <HAL_DMA_Init+0x158>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d107      	bne.n	8001c68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	4313      	orrs	r3, r2
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f023 0307 	bic.w	r3, r3, #7
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d117      	bne.n	8001cc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00e      	beq.n	8001cc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fb1b 	bl	80022e0 <DMA_CheckFifoParam>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e016      	b.n	8001cf0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fad2 	bl	8002274 <DMA_CalcBaseAndBitshift>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	223f      	movs	r2, #63	; 0x3f
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	f010803f 	.word	0xf010803f

08001cfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_DMA_Start_IT+0x26>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e040      	b.n	8001da4 <HAL_DMA_Start_IT+0xa8>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d12f      	bne.n	8001d96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 fa64 	bl	8002218 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	223f      	movs	r2, #63	; 0x3f
 8001d56:	409a      	lsls	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0216 	orr.w	r2, r2, #22
 8001d6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d007      	beq.n	8001d84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0208 	orr.w	r2, r2, #8
 8001d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e005      	b.n	8001da2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dba:	f7ff fdd3 	bl	8001964 <HAL_GetTick>
 8001dbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d008      	beq.n	8001dde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e052      	b.n	8001e84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0216 	bic.w	r2, r2, #22
 8001dec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <HAL_DMA_Abort+0x62>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d007      	beq.n	8001e1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0208 	bic.w	r2, r2, #8
 8001e1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2e:	e013      	b.n	8001e58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e30:	f7ff fd98 	bl	8001964 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b05      	cmp	r3, #5
 8001e3c:	d90c      	bls.n	8001e58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2220      	movs	r2, #32
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e015      	b.n	8001e84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1e4      	bne.n	8001e30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	223f      	movs	r2, #63	; 0x3f
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d004      	beq.n	8001eaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00c      	b.n	8001ec4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2205      	movs	r2, #5
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001edc:	4b8e      	ldr	r3, [pc, #568]	; (8002118 <HAL_DMA_IRQHandler+0x248>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a8e      	ldr	r2, [pc, #568]	; (800211c <HAL_DMA_IRQHandler+0x24c>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0a9b      	lsrs	r3, r3, #10
 8001ee8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2208      	movs	r2, #8
 8001efc:	409a      	lsls	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01a      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0204 	bic.w	r2, r2, #4
 8001f22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	2208      	movs	r2, #8
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	2201      	movs	r2, #1
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d012      	beq.n	8001f72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2201      	movs	r2, #1
 8001f60:	409a      	lsls	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6a:	f043 0202 	orr.w	r2, r3, #2
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	2204      	movs	r2, #4
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00b      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	2204      	movs	r2, #4
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	f043 0204 	orr.w	r2, r3, #4
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	2210      	movs	r2, #16
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d043      	beq.n	8002040 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d03c      	beq.n	8002040 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	2210      	movs	r2, #16
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d018      	beq.n	8002012 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d024      	beq.n	8002040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
 8001ffe:	e01f      	b.n	8002040 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01b      	beq.n	8002040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
 8002010:	e016      	b.n	8002040 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0208 	bic.w	r2, r2, #8
 800202e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2220      	movs	r2, #32
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 808f 	beq.w	8002170 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8087 	beq.w	8002170 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2220      	movs	r2, #32
 8002068:	409a      	lsls	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b05      	cmp	r3, #5
 8002078:	d136      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0216 	bic.w	r2, r2, #22
 8002088:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002098:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <HAL_DMA_IRQHandler+0x1da>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 0208 	bic.w	r2, r2, #8
 80020b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	223f      	movs	r2, #63	; 0x3f
 80020c0:	409a      	lsls	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d07e      	beq.n	80021dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
        }
        return;
 80020e6:	e079      	b.n	80021dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01d      	beq.n	8002132 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	2b00      	cmp	r3, #0
 800210a:	d031      	beq.n	8002170 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
 8002114:	e02c      	b.n	8002170 <HAL_DMA_IRQHandler+0x2a0>
 8002116:	bf00      	nop
 8002118:	200003dc 	.word	0x200003dc
 800211c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d023      	beq.n	8002170 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
 8002130:	e01e      	b.n	8002170 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10f      	bne.n	8002160 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0210 	bic.w	r2, r2, #16
 800214e:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	2b00      	cmp	r3, #0
 8002176:	d032      	beq.n	80021de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d022      	beq.n	80021ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2205      	movs	r2, #5
 8002188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	3301      	adds	r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d307      	bcc.n	80021b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f2      	bne.n	800219c <HAL_DMA_IRQHandler+0x2cc>
 80021b6:	e000      	b.n	80021ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021b8:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
 80021da:	e000      	b.n	80021de <HAL_DMA_IRQHandler+0x30e>
        return;
 80021dc:	bf00      	nop
    }
  }
}
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f2:	b2db      	uxtb	r3, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002234:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b40      	cmp	r3, #64	; 0x40
 8002244:	d108      	bne.n	8002258 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002256:	e007      	b.n	8002268 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	60da      	str	r2, [r3, #12]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	3b10      	subs	r3, #16
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800228e:	4a13      	ldr	r2, [pc, #76]	; (80022dc <DMA_CalcBaseAndBitshift+0x68>)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d909      	bls.n	80022b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	1d1a      	adds	r2, r3, #4
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	659a      	str	r2, [r3, #88]	; 0x58
 80022b4:	e007      	b.n	80022c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022be:	f023 0303 	bic.w	r3, r3, #3
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	aaaaaaab 	.word	0xaaaaaaab
 80022dc:	08019b98 	.word	0x08019b98

080022e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d11f      	bne.n	800233a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d856      	bhi.n	80023ae <DMA_CheckFifoParam+0xce>
 8002300:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <DMA_CheckFifoParam+0x28>)
 8002302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002306:	bf00      	nop
 8002308:	08002319 	.word	0x08002319
 800230c:	0800232b 	.word	0x0800232b
 8002310:	08002319 	.word	0x08002319
 8002314:	080023af 	.word	0x080023af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d046      	beq.n	80023b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002328:	e043      	b.n	80023b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002332:	d140      	bne.n	80023b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002338:	e03d      	b.n	80023b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002342:	d121      	bne.n	8002388 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d837      	bhi.n	80023ba <DMA_CheckFifoParam+0xda>
 800234a:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <DMA_CheckFifoParam+0x70>)
 800234c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002350:	08002361 	.word	0x08002361
 8002354:	08002367 	.word	0x08002367
 8002358:	08002361 	.word	0x08002361
 800235c:	08002379 	.word	0x08002379
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      break;
 8002364:	e030      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d025      	beq.n	80023be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002376:	e022      	b.n	80023be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002380:	d11f      	bne.n	80023c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002386:	e01c      	b.n	80023c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d903      	bls.n	8002396 <DMA_CheckFifoParam+0xb6>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d003      	beq.n	800239c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002394:	e018      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
      break;
 800239a:	e015      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00e      	beq.n	80023c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
      break;
 80023ac:	e00b      	b.n	80023c6 <DMA_CheckFifoParam+0xe6>
      break;
 80023ae:	bf00      	nop
 80023b0:	e00a      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;
 80023b2:	bf00      	nop
 80023b4:	e008      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;
 80023b6:	bf00      	nop
 80023b8:	e006      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ba:	bf00      	nop
 80023bc:	e004      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;
 80023be:	bf00      	nop
 80023c0:	e002      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c6:	bf00      	nop
    }
  } 
  
  return status; 
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop

080023d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_FLASH_Program+0xa0>)
 80023ec:	7e1b      	ldrb	r3, [r3, #24]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_FLASH_Program+0x1e>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e03b      	b.n	800246e <HAL_FLASH_Program+0x96>
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_FLASH_Program+0xa0>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002400:	f000 f870 	bl	80024e4 <FLASH_WaitForLastOperation>
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d12b      	bne.n	8002466 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002414:	783b      	ldrb	r3, [r7, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	68b8      	ldr	r0, [r7, #8]
 800241a:	f000 f91b 	bl	8002654 <FLASH_Program_Byte>
 800241e:	e016      	b.n	800244e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d105      	bne.n	8002432 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002426:	883b      	ldrh	r3, [r7, #0]
 8002428:	4619      	mov	r1, r3
 800242a:	68b8      	ldr	r0, [r7, #8]
 800242c:	f000 f8ee 	bl	800260c <FLASH_Program_HalfWord>
 8002430:	e00d      	b.n	800244e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d105      	bne.n	8002444 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	68b8      	ldr	r0, [r7, #8]
 800243e:	f000 f8c3 	bl	80025c8 <FLASH_Program_Word>
 8002442:	e004      	b.n	800244e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002448:	68b8      	ldr	r0, [r7, #8]
 800244a:	f000 f88b 	bl	8002564 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800244e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002452:	f000 f847 	bl	80024e4 <FLASH_WaitForLastOperation>
 8002456:	4603      	mov	r3, r0
 8002458:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_FLASH_Program+0xa4>)
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_FLASH_Program+0xa4>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <HAL_FLASH_Program+0xa0>)
 8002468:	2200      	movs	r2, #0
 800246a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800246c:	7dfb      	ldrb	r3, [r7, #23]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20002624 	.word	0x20002624
 800247c:	40023c00 	.word	0x40023c00

08002480 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_FLASH_Unlock+0x38>)
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	da0b      	bge.n	80024aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_FLASH_Unlock+0x38>)
 8002494:	4a09      	ldr	r2, [pc, #36]	; (80024bc <HAL_FLASH_Unlock+0x3c>)
 8002496:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <HAL_FLASH_Unlock+0x38>)
 800249a:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <HAL_FLASH_Unlock+0x40>)
 800249c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_FLASH_Unlock+0x38>)
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	da01      	bge.n	80024aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80024aa:	79fb      	ldrb	r3, [r7, #7]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40023c00 	.word	0x40023c00
 80024bc:	45670123 	.word	0x45670123
 80024c0:	cdef89ab 	.word	0xcdef89ab

080024c4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_FLASH_Lock+0x1c>)
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <HAL_FLASH_Lock+0x1c>)
 80024ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024d2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40023c00 	.word	0x40023c00

080024e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <FLASH_WaitForLastOperation+0x78>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80024f6:	f7ff fa35 	bl	8001964 <HAL_GetTick>
 80024fa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80024fc:	e010      	b.n	8002520 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d00c      	beq.n	8002520 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <FLASH_WaitForLastOperation+0x38>
 800250c:	f7ff fa2a 	bl	8001964 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	429a      	cmp	r2, r3
 800251a:	d201      	bcs.n	8002520 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e019      	b.n	8002554 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <FLASH_WaitForLastOperation+0x7c>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1e8      	bne.n	80024fe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <FLASH_WaitForLastOperation+0x7c>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <FLASH_WaitForLastOperation+0x7c>)
 800253a:	2201      	movs	r2, #1
 800253c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800253e:	4b08      	ldr	r3, [pc, #32]	; (8002560 <FLASH_WaitForLastOperation+0x7c>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800254a:	f000 f8a5 	bl	8002698 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
  
}  
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20002624 	.word	0x20002624
 8002560:	40023c00 	.word	0x40023c00

08002564 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <FLASH_Program_DoubleWord+0x60>)
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <FLASH_Program_DoubleWord+0x60>)
 8002576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <FLASH_Program_DoubleWord+0x60>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	4a10      	ldr	r2, [pc, #64]	; (80025c4 <FLASH_Program_DoubleWord+0x60>)
 8002582:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002586:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <FLASH_Program_DoubleWord+0x60>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <FLASH_Program_DoubleWord+0x60>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800259a:	f3bf 8f6f 	isb	sy
}
 800259e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80025a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	000a      	movs	r2, r1
 80025ae:	2300      	movs	r3, #0
 80025b0:	68f9      	ldr	r1, [r7, #12]
 80025b2:	3104      	adds	r1, #4
 80025b4:	4613      	mov	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40023c00 	.word	0x40023c00

080025c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <FLASH_Program_Word+0x40>)
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <FLASH_Program_Word+0x40>)
 80025d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <FLASH_Program_Word+0x40>)
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <FLASH_Program_Word+0x40>)
 80025e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <FLASH_Program_Word+0x40>)
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	4a06      	ldr	r2, [pc, #24]	; (8002608 <FLASH_Program_Word+0x40>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	601a      	str	r2, [r3, #0]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40023c00 	.word	0x40023c00

0800260c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002618:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <FLASH_Program_HalfWord+0x44>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <FLASH_Program_HalfWord+0x44>)
 800261e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002624:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <FLASH_Program_HalfWord+0x44>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	4a09      	ldr	r2, [pc, #36]	; (8002650 <FLASH_Program_HalfWord+0x44>)
 800262a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <FLASH_Program_HalfWord+0x44>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <FLASH_Program_HalfWord+0x44>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	801a      	strh	r2, [r3, #0]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40023c00 	.word	0x40023c00

08002654 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <FLASH_Program_Byte+0x40>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <FLASH_Program_Byte+0x40>)
 8002666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <FLASH_Program_Byte+0x40>)
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <FLASH_Program_Byte+0x40>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <FLASH_Program_Byte+0x40>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	4a06      	ldr	r2, [pc, #24]	; (8002694 <FLASH_Program_Byte+0x40>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	701a      	strb	r2, [r3, #0]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40023c00 	.word	0x40023c00

08002698 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800269c:	4b2f      	ldr	r3, [pc, #188]	; (800275c <FLASH_SetErrorCode+0xc4>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80026a8:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f043 0310 	orr.w	r3, r3, #16
 80026b0:	4a2b      	ldr	r2, [pc, #172]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 80026b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80026b4:	4b29      	ldr	r3, [pc, #164]	; (800275c <FLASH_SetErrorCode+0xc4>)
 80026b6:	2210      	movs	r2, #16
 80026b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80026ba:	4b28      	ldr	r3, [pc, #160]	; (800275c <FLASH_SetErrorCode+0xc4>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	4a24      	ldr	r2, [pc, #144]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 80026d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80026d2:	4b22      	ldr	r3, [pc, #136]	; (800275c <FLASH_SetErrorCode+0xc4>)
 80026d4:	2220      	movs	r2, #32
 80026d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80026d8:	4b20      	ldr	r3, [pc, #128]	; (800275c <FLASH_SetErrorCode+0xc4>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 80026ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <FLASH_SetErrorCode+0xc4>)
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <FLASH_SetErrorCode+0xc4>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	4a15      	ldr	r2, [pc, #84]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 800270c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <FLASH_SetErrorCode+0xc4>)
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <FLASH_SetErrorCode+0xc4>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 800272a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <FLASH_SetErrorCode+0xc4>)
 800272e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002732:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <FLASH_SetErrorCode+0xc4>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f043 0320 	orr.w	r3, r3, #32
 8002748:	4a05      	ldr	r2, [pc, #20]	; (8002760 <FLASH_SetErrorCode+0xc8>)
 800274a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <FLASH_SetErrorCode+0xc4>)
 800274e:	2202      	movs	r2, #2
 8002750:	60da      	str	r2, [r3, #12]
  }
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40023c00 	.word	0x40023c00
 8002760:	20002624 	.word	0x20002624

08002764 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002776:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_FLASHEx_Erase+0xd8>)
 8002778:	7e1b      	ldrb	r3, [r3, #24]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_FLASHEx_Erase+0x1e>
 800277e:	2302      	movs	r3, #2
 8002780:	e058      	b.n	8002834 <HAL_FLASHEx_Erase+0xd0>
 8002782:	4b2e      	ldr	r3, [pc, #184]	; (800283c <HAL_FLASHEx_Erase+0xd8>)
 8002784:	2201      	movs	r2, #1
 8002786:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002788:	f24c 3050 	movw	r0, #50000	; 0xc350
 800278c:	f7ff feaa 	bl	80024e4 <FLASH_WaitForLastOperation>
 8002790:	4603      	mov	r3, r0
 8002792:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d148      	bne.n	800282c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d115      	bne.n	80027d6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 f844 	bl	8002844 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027c0:	f7ff fe90 	bl	80024e4 <FLASH_WaitForLastOperation>
 80027c4:	4603      	mov	r3, r0
 80027c6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_FLASHEx_Erase+0xdc>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <HAL_FLASHEx_Erase+0xdc>)
 80027ce:	f023 0304 	bic.w	r3, r3, #4
 80027d2:	6113      	str	r3, [r2, #16]
 80027d4:	e028      	b.n	8002828 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	e01c      	b.n	8002818 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	4619      	mov	r1, r3
 80027e6:	68b8      	ldr	r0, [r7, #8]
 80027e8:	f000 f850 	bl	800288c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027f0:	f7ff fe78 	bl	80024e4 <FLASH_WaitForLastOperation>
 80027f4:	4603      	mov	r3, r0
 80027f6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_FLASHEx_Erase+0xdc>)
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	4a10      	ldr	r2, [pc, #64]	; (8002840 <HAL_FLASHEx_Erase+0xdc>)
 80027fe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002802:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	601a      	str	r2, [r3, #0]
          break;
 8002810:	e00a      	b.n	8002828 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3301      	adds	r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4413      	add	r3, r2
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	429a      	cmp	r2, r3
 8002826:	d3da      	bcc.n	80027de <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002828:	f000 f878 	bl	800291c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_FLASHEx_Erase+0xd8>)
 800282e:	2200      	movs	r2, #0
 8002830:	761a      	strb	r2, [r3, #24]

  return status;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20002624 	.word	0x20002624
 8002840:	40023c00 	.word	0x40023c00

08002844 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <FLASH_MassErase+0x44>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4a0c      	ldr	r2, [pc, #48]	; (8002888 <FLASH_MassErase+0x44>)
 8002856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <FLASH_MassErase+0x44>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	4a09      	ldr	r2, [pc, #36]	; (8002888 <FLASH_MassErase+0x44>)
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <FLASH_MassErase+0x44>)
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	4313      	orrs	r3, r2
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <FLASH_MassErase+0x44>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6113      	str	r3, [r2, #16]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00

0800288c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e010      	b.n	80028ca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d103      	bne.n	80028b6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80028ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	e009      	b.n	80028ca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d103      	bne.n	80028c4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80028bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e002      	b.n	80028ca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80028c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <FLASH_Erase_Sector+0x8c>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <FLASH_Erase_Sector+0x8c>)
 80028d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <FLASH_Erase_Sector+0x8c>)
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	490f      	ldr	r1, [pc, #60]	; (8002918 <FLASH_Erase_Sector+0x8c>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <FLASH_Erase_Sector+0x8c>)
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	4a0c      	ldr	r2, [pc, #48]	; (8002918 <FLASH_Erase_Sector+0x8c>)
 80028e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <FLASH_Erase_Sector+0x8c>)
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4313      	orrs	r3, r2
 80028f8:	4a07      	ldr	r2, [pc, #28]	; (8002918 <FLASH_Erase_Sector+0x8c>)
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <FLASH_Erase_Sector+0x8c>)
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <FLASH_Erase_Sector+0x8c>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	6113      	str	r3, [r2, #16]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40023c00 	.word	0x40023c00

0800291c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <FLASH_FlushCaches+0x88>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002928:	2b00      	cmp	r3, #0
 800292a:	d017      	beq.n	800295c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <FLASH_FlushCaches+0x88>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <FLASH_FlushCaches+0x88>)
 8002932:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002936:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <FLASH_FlushCaches+0x88>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <FLASH_FlushCaches+0x88>)
 800293e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <FLASH_FlushCaches+0x88>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <FLASH_FlushCaches+0x88>)
 800294a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800294e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <FLASH_FlushCaches+0x88>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <FLASH_FlushCaches+0x88>)
 8002956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800295a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <FLASH_FlushCaches+0x88>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d017      	beq.n	8002998 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <FLASH_FlushCaches+0x88>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <FLASH_FlushCaches+0x88>)
 800296e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002972:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <FLASH_FlushCaches+0x88>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <FLASH_FlushCaches+0x88>)
 800297a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <FLASH_FlushCaches+0x88>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <FLASH_FlushCaches+0x88>)
 8002986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800298a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <FLASH_FlushCaches+0x88>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <FLASH_FlushCaches+0x88>)
 8002992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002996:	6013      	str	r3, [r2, #0]
  }
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00

080029a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	e165      	b.n	8002c90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029c4:	2201      	movs	r2, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	429a      	cmp	r2, r3
 80029de:	f040 8154 	bne.w	8002c8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d00b      	beq.n	8002a02 <HAL_GPIO_Init+0x5a>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029f6:	2b11      	cmp	r3, #17
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b12      	cmp	r3, #18
 8002a00:	d130      	bne.n	8002a64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0xfc>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b12      	cmp	r3, #18
 8002aa2:	d123      	bne.n	8002aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3208      	adds	r2, #8
 8002aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	220f      	movs	r2, #15
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	08da      	lsrs	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3208      	adds	r2, #8
 8002ae6:	69b9      	ldr	r1, [r7, #24]
 8002ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2203      	movs	r2, #3
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0203 	and.w	r2, r3, #3
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80ae 	beq.w	8002c8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b5d      	ldr	r3, [pc, #372]	; (8002ca8 <HAL_GPIO_Init+0x300>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	4a5c      	ldr	r2, [pc, #368]	; (8002ca8 <HAL_GPIO_Init+0x300>)
 8002b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ca8 <HAL_GPIO_Init+0x300>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b4a:	4a58      	ldr	r2, [pc, #352]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	089b      	lsrs	r3, r3, #2
 8002b50:	3302      	adds	r3, #2
 8002b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	220f      	movs	r2, #15
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4f      	ldr	r2, [pc, #316]	; (8002cb0 <HAL_GPIO_Init+0x308>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d025      	beq.n	8002bc2 <HAL_GPIO_Init+0x21a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4e      	ldr	r2, [pc, #312]	; (8002cb4 <HAL_GPIO_Init+0x30c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01f      	beq.n	8002bbe <HAL_GPIO_Init+0x216>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4d      	ldr	r2, [pc, #308]	; (8002cb8 <HAL_GPIO_Init+0x310>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d019      	beq.n	8002bba <HAL_GPIO_Init+0x212>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4c      	ldr	r2, [pc, #304]	; (8002cbc <HAL_GPIO_Init+0x314>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <HAL_GPIO_Init+0x20e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4b      	ldr	r2, [pc, #300]	; (8002cc0 <HAL_GPIO_Init+0x318>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00d      	beq.n	8002bb2 <HAL_GPIO_Init+0x20a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4a      	ldr	r2, [pc, #296]	; (8002cc4 <HAL_GPIO_Init+0x31c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <HAL_GPIO_Init+0x206>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a49      	ldr	r2, [pc, #292]	; (8002cc8 <HAL_GPIO_Init+0x320>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <HAL_GPIO_Init+0x202>
 8002ba6:	2306      	movs	r3, #6
 8002ba8:	e00c      	b.n	8002bc4 <HAL_GPIO_Init+0x21c>
 8002baa:	2307      	movs	r3, #7
 8002bac:	e00a      	b.n	8002bc4 <HAL_GPIO_Init+0x21c>
 8002bae:	2305      	movs	r3, #5
 8002bb0:	e008      	b.n	8002bc4 <HAL_GPIO_Init+0x21c>
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	e006      	b.n	8002bc4 <HAL_GPIO_Init+0x21c>
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e004      	b.n	8002bc4 <HAL_GPIO_Init+0x21c>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e002      	b.n	8002bc4 <HAL_GPIO_Init+0x21c>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_GPIO_Init+0x21c>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	f002 0203 	and.w	r2, r2, #3
 8002bca:	0092      	lsls	r2, r2, #2
 8002bcc:	4093      	lsls	r3, r2
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd4:	4935      	ldr	r1, [pc, #212]	; (8002cac <HAL_GPIO_Init+0x304>)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be2:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <HAL_GPIO_Init+0x324>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c06:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <HAL_GPIO_Init+0x324>)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_GPIO_Init+0x324>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c30:	4a26      	ldr	r2, [pc, #152]	; (8002ccc <HAL_GPIO_Init+0x324>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <HAL_GPIO_Init+0x324>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ccc <HAL_GPIO_Init+0x324>)
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c60:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_GPIO_Init+0x324>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c84:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <HAL_GPIO_Init+0x324>)
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	2b0f      	cmp	r3, #15
 8002c94:	f67f ae96 	bls.w	80029c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3724      	adds	r7, #36	; 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40013800 	.word	0x40013800
 8002cb0:	40020000 	.word	0x40020000
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40020800 	.word	0x40020800
 8002cbc:	40020c00 	.word	0x40020c00
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40021400 	.word	0x40021400
 8002cc8:	40021800 	.word	0x40021800
 8002ccc:	40013c00 	.word	0x40013c00

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cec:	e003      	b.n	8002cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cee:	887b      	ldrh	r3, [r7, #2]
 8002cf0:	041a      	lsls	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	401a      	ands	r2, r3
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d104      	bne.n	8002d26 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	041a      	lsls	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002d24:	e002      	b.n	8002d2c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f006 ff7e 	bl	8009c58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e12b      	b.n	8002fd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f007 f9ea 	bl	800a168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2224      	movs	r2, #36	; 0x24
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dcc:	f001 fd92 	bl	80048f4 <HAL_RCC_GetPCLK1Freq>
 8002dd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a81      	ldr	r2, [pc, #516]	; (8002fdc <HAL_I2C_Init+0x274>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d807      	bhi.n	8002dec <HAL_I2C_Init+0x84>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	4a80      	ldr	r2, [pc, #512]	; (8002fe0 <HAL_I2C_Init+0x278>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	bf94      	ite	ls
 8002de4:	2301      	movls	r3, #1
 8002de6:	2300      	movhi	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e006      	b.n	8002dfa <HAL_I2C_Init+0x92>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a7d      	ldr	r2, [pc, #500]	; (8002fe4 <HAL_I2C_Init+0x27c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bf94      	ite	ls
 8002df4:	2301      	movls	r3, #1
 8002df6:	2300      	movhi	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0e7      	b.n	8002fd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a78      	ldr	r2, [pc, #480]	; (8002fe8 <HAL_I2C_Init+0x280>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	0c9b      	lsrs	r3, r3, #18
 8002e0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4a6a      	ldr	r2, [pc, #424]	; (8002fdc <HAL_I2C_Init+0x274>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d802      	bhi.n	8002e3c <HAL_I2C_Init+0xd4>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	e009      	b.n	8002e50 <HAL_I2C_Init+0xe8>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e42:	fb02 f303 	mul.w	r3, r2, r3
 8002e46:	4a69      	ldr	r2, [pc, #420]	; (8002fec <HAL_I2C_Init+0x284>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	3301      	adds	r3, #1
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	495c      	ldr	r1, [pc, #368]	; (8002fdc <HAL_I2C_Init+0x274>)
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	d819      	bhi.n	8002ea4 <HAL_I2C_Init+0x13c>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1e59      	subs	r1, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7e:	1c59      	adds	r1, r3, #1
 8002e80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e84:	400b      	ands	r3, r1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_I2C_Init+0x138>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1e59      	subs	r1, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e98:	3301      	adds	r3, #1
 8002e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9e:	e051      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	e04f      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d111      	bne.n	8002ed0 <HAL_I2C_Init+0x168>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	1e58      	subs	r0, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6859      	ldr	r1, [r3, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	440b      	add	r3, r1
 8002eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e012      	b.n	8002ef6 <HAL_I2C_Init+0x18e>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1e58      	subs	r0, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	0099      	lsls	r1, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Init+0x196>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e022      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10e      	bne.n	8002f24 <HAL_I2C_Init+0x1bc>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1e58      	subs	r0, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	440b      	add	r3, r1
 8002f14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f22:	e00f      	b.n	8002f44 <HAL_I2C_Init+0x1dc>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	1e58      	subs	r0, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	0099      	lsls	r1, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	6809      	ldr	r1, [r1, #0]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6911      	ldr	r1, [r2, #16]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68d2      	ldr	r2, [r2, #12]
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0201 	orr.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	000186a0 	.word	0x000186a0
 8002fe0:	001e847f 	.word	0x001e847f
 8002fe4:	003d08ff 	.word	0x003d08ff
 8002fe8:	431bde83 	.word	0x431bde83
 8002fec:	10624dd3 	.word	0x10624dd3

08002ff0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e021      	b.n	8003046 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2224      	movs	r2, #36	; 0x24
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f817 	bl	800304e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b088      	sub	sp, #32
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003082:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b10      	cmp	r3, #16
 8003090:	d003      	beq.n	800309a <HAL_I2C_EV_IRQHandler+0x38>
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	f040 80ad 	bne.w	80031f4 <HAL_I2C_EV_IRQHandler+0x192>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10d      	bne.n	80030d0 <HAL_I2C_EV_IRQHandler+0x6e>
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80030ba:	d003      	beq.n	80030c4 <HAL_I2C_EV_IRQHandler+0x62>
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80030c2:	d101      	bne.n	80030c8 <HAL_I2C_EV_IRQHandler+0x66>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <HAL_I2C_EV_IRQHandler+0x68>
 80030c8:	2300      	movs	r3, #0
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	f000 8110 	beq.w	80032f0 <HAL_I2C_EV_IRQHandler+0x28e>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_I2C_EV_IRQHandler+0x90>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f001 faf7 	bl	80046d8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fc76 	bl	80039dc <I2C_Master_SB>
 80030f0:	e07f      	b.n	80031f2 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_I2C_EV_IRQHandler+0xac>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fcee 	bl	8003ae8 <I2C_Master_ADD10>
 800310c:	e071      	b.n	80031f2 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_I2C_EV_IRQHandler+0xc8>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fd0a 	bl	8003b3c <I2C_Master_ADDR>
 8003128:	e063      	b.n	80031f2 <HAL_I2C_EV_IRQHandler+0x190>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d032      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0x138>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003142:	f000 80d7 	beq.w	80032f4 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <HAL_I2C_EV_IRQHandler+0x10a>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_I2C_EV_IRQHandler+0x10a>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d103      	bne.n	800316c <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f90b 	bl	8003380 <I2C_MasterTransmit_TXE>
 800316a:	e042      	b.n	80031f2 <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80be 	beq.w	80032f4 <HAL_I2C_EV_IRQHandler+0x292>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80b8 	beq.w	80032f4 <HAL_I2C_EV_IRQHandler+0x292>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b10      	cmp	r3, #16
 8003188:	d103      	bne.n	8003192 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f994 	bl	80034b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003190:	e0b0      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x292>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f9f8 	bl	8003588 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003198:	e0ac      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x292>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a8:	f000 80a4 	beq.w	80032f4 <HAL_I2C_EV_IRQHandler+0x292>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <HAL_I2C_EV_IRQHandler+0x170>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_I2C_EV_IRQHandler+0x170>
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <HAL_I2C_EV_IRQHandler+0x170>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa6b 	bl	80036a6 <I2C_MasterReceive_RXNE>
 80031d0:	e00f      	b.n	80031f2 <HAL_I2C_EV_IRQHandler+0x190>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 808b 	beq.w	80032f4 <HAL_I2C_EV_IRQHandler+0x292>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8085 	beq.w	80032f4 <HAL_I2C_EV_IRQHandler+0x292>
        {
          I2C_MasterReceive_BTF(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fb0c 	bl	8003808 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f0:	e080      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x292>
 80031f2:	e07f      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x292>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d004      	beq.n	8003206 <HAL_I2C_EV_IRQHandler+0x1a4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	e007      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x1b4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d011      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x1e2>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x1e2>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x1d8>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800323a:	69b9      	ldr	r1, [r7, #24]
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fecc 	bl	8003fda <I2C_Slave_ADDR>
 8003242:	e05a      	b.n	80032fa <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_I2C_EV_IRQHandler+0x1fe>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_I2C_EV_IRQHandler+0x1fe>
    {
      I2C_Slave_STOPF(hi2c);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 ff01 	bl	8004060 <I2C_Slave_STOPF>
 800325e:	e04c      	b.n	80032fa <HAL_I2C_EV_IRQHandler+0x298>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003260:	7bbb      	ldrb	r3, [r7, #14]
 8003262:	2b21      	cmp	r3, #33	; 0x21
 8003264:	d002      	beq.n	800326c <HAL_I2C_EV_IRQHandler+0x20a>
 8003266:	7bbb      	ldrb	r3, [r7, #14]
 8003268:	2b29      	cmp	r3, #41	; 0x29
 800326a:	d120      	bne.n	80032ae <HAL_I2C_EV_IRQHandler+0x24c>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x230>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x230>
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <HAL_I2C_EV_IRQHandler+0x230>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fde7 	bl	8003e5e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003290:	e032      	b.n	80032f8 <HAL_I2C_EV_IRQHandler+0x296>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02d      	beq.n	80032f8 <HAL_I2C_EV_IRQHandler+0x296>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d028      	beq.n	80032f8 <HAL_I2C_EV_IRQHandler+0x296>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fe16 	bl	8003ed8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ac:	e024      	b.n	80032f8 <HAL_I2C_EV_IRQHandler+0x296>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00d      	beq.n	80032d4 <HAL_I2C_EV_IRQHandler+0x272>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_I2C_EV_IRQHandler+0x272>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d103      	bne.n	80032d4 <HAL_I2C_EV_IRQHandler+0x272>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fe24 	bl	8003f1a <I2C_SlaveReceive_RXNE>
 80032d2:	e012      	b.n	80032fa <HAL_I2C_EV_IRQHandler+0x298>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00d      	beq.n	80032fa <HAL_I2C_EV_IRQHandler+0x298>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_I2C_EV_IRQHandler+0x298>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fe54 	bl	8003f96 <I2C_SlaveReceive_BTF>
 80032ee:	e004      	b.n	80032fa <HAL_I2C_EV_IRQHandler+0x298>
      return;
 80032f0:	bf00      	nop
 80032f2:	e002      	b.n	80032fa <HAL_I2C_EV_IRQHandler+0x298>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f4:	bf00      	nop
 80032f6:	e000      	b.n	80032fa <HAL_I2C_EV_IRQHandler+0x298>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032f8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	70fb      	strb	r3, [r7, #3]
 8003334:	4613      	mov	r3, r2
 8003336:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003396:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d150      	bne.n	8003448 <I2C_MasterTransmit_TXE+0xc8>
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b21      	cmp	r3, #33	; 0x21
 80033aa:	d14d      	bne.n	8003448 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d01d      	beq.n	80033ee <I2C_MasterTransmit_TXE+0x6e>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d01a      	beq.n	80033ee <I2C_MasterTransmit_TXE+0x6e>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033be:	d016      	beq.n	80033ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2211      	movs	r2, #17
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f006 fdca 	bl	8009f80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ec:	e060      	b.n	80034b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	d107      	bne.n	8003438 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f006 fdc7 	bl	8009fc4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003436:	e03b      	b.n	80034b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f006 fd9d 	bl	8009f80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003446:	e033      	b.n	80034b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b21      	cmp	r3, #33	; 0x21
 800344c:	d005      	beq.n	800345a <I2C_MasterTransmit_TXE+0xda>
 800344e:	7bbb      	ldrb	r3, [r7, #14]
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d12d      	bne.n	80034b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b22      	cmp	r3, #34	; 0x22
 8003458:	d12a      	bne.n	80034b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d108      	bne.n	8003476 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003472:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003474:	e01c      	b.n	80034b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	d103      	bne.n	800348a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f880 	bl	8003588 <I2C_MemoryTransmit_TXE_BTF>
}
 8003488:	e012      	b.n	80034b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034ae:	e7ff      	b.n	80034b0 <I2C_MasterTransmit_TXE+0x130>
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b21      	cmp	r3, #33	; 0x21
 80034d0:	d156      	bne.n	8003580 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d012      	beq.n	8003502 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003500:	e03e      	b.n	8003580 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d01d      	beq.n	8003544 <I2C_MasterTransmit_BTF+0x8c>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b20      	cmp	r3, #32
 800350c:	d01a      	beq.n	8003544 <I2C_MasterTransmit_BTF+0x8c>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003514:	d016      	beq.n	8003544 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003524:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2211      	movs	r2, #17
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f006 fd1f 	bl	8009f80 <HAL_I2C_MasterTxCpltCallback>
}
 8003542:	e01d      	b.n	8003580 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003552:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f006 fd00 	bl	8009f80 <HAL_I2C_MasterTxCpltCallback>
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003596:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11d      	bne.n	80035dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10b      	bne.n	80035c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80035be:	e06e      	b.n	800369e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	121b      	asrs	r3, r3, #8
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035da:	e060      	b.n	800369e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10b      	bne.n	80035fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035fa:	e050      	b.n	800369e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003600:	2b02      	cmp	r3, #2
 8003602:	d14c      	bne.n	800369e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b22      	cmp	r3, #34	; 0x22
 8003608:	d108      	bne.n	800361c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003618:	601a      	str	r2, [r3, #0]
}
 800361a:	e040      	b.n	800369e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d015      	beq.n	8003652 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2b21      	cmp	r3, #33	; 0x21
 800362a:	d112      	bne.n	8003652 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003650:	e025      	b.n	800369e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d120      	bne.n	800369e <I2C_MemoryTransmit_TXE_BTF+0x116>
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b21      	cmp	r3, #33	; 0x21
 8003660:	d11d      	bne.n	800369e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003670:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003680:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f006 fc93 	bl	8009fc4 <HAL_I2C_MemTxCpltCallback>
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b22      	cmp	r3, #34	; 0x22
 80036b8:	f040 80a2 	bne.w	8003800 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d921      	bls.n	800370e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	f040 8082 	bne.w	8003800 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800370a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800370c:	e078      	b.n	8003800 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	2b02      	cmp	r3, #2
 8003714:	d074      	beq.n	8003800 <I2C_MasterReceive_RXNE+0x15a>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d002      	beq.n	8003722 <I2C_MasterReceive_RXNE+0x7c>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d16e      	bne.n	8003800 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 ffa6 	bl	8004674 <I2C_WaitOnSTOPRequestThroughIT>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d142      	bne.n	80037b4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800374c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d10a      	bne.n	800379e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f006 fc58 	bl	800a04c <HAL_I2C_MemRxCpltCallback>
}
 800379c:	e030      	b.n	8003800 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2212      	movs	r2, #18
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f006 fc2b 	bl	800a008 <HAL_I2C_MasterRxCpltCallback>
}
 80037b2:	e025      	b.n	8003800 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037c2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fdac 	bl	8003358 <HAL_I2C_ErrorCallback>
}
 8003800:	bf00      	nop
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b04      	cmp	r3, #4
 800381e:	d11b      	bne.n	8003858 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003856:	e0bd      	b.n	80039d4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b03      	cmp	r3, #3
 8003860:	d129      	bne.n	80038b6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003870:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d00a      	beq.n	800388e <I2C_MasterReceive_BTF+0x86>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d007      	beq.n	800388e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038b4:	e08e      	b.n	80039d4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d176      	bne.n	80039ae <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d002      	beq.n	80038cc <I2C_MasterReceive_BTF+0xc4>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d108      	bne.n	80038de <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	e019      	b.n	8003912 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d002      	beq.n	80038ea <I2C_MasterReceive_BTF+0xe2>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d108      	bne.n	80038fc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e00a      	b.n	8003912 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d007      	beq.n	8003912 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003910:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800396c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d10a      	bne.n	8003998 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f006 fb5b 	bl	800a04c <HAL_I2C_MemRxCpltCallback>
}
 8003996:	e01d      	b.n	80039d4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2212      	movs	r2, #18
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f006 fb2e 	bl	800a008 <HAL_I2C_MasterRxCpltCallback>
}
 80039ac:	e012      	b.n	80039d4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d117      	bne.n	8003a20 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a08:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a0a:	e067      	b.n	8003adc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]
}
 8003a1e:	e05d      	b.n	8003adc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a28:	d133      	bne.n	8003a92 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b21      	cmp	r3, #33	; 0x21
 8003a34:	d109      	bne.n	8003a4a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a46:	611a      	str	r2, [r3, #16]
 8003a48:	e008      	b.n	8003a5c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <I2C_Master_SB+0x92>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d108      	bne.n	8003a80 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d032      	beq.n	8003adc <I2C_Master_SB+0x100>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d02d      	beq.n	8003adc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8e:	605a      	str	r2, [r3, #4]
}
 8003a90:	e024      	b.n	8003adc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10e      	bne.n	8003ab8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	11db      	asrs	r3, r3, #7
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	f003 0306 	and.w	r3, r3, #6
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f063 030f 	orn	r3, r3, #15
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	611a      	str	r2, [r3, #16]
}
 8003ab6:	e011      	b.n	8003adc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10d      	bne.n	8003adc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	11db      	asrs	r3, r3, #7
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	f003 0306 	and.w	r3, r3, #6
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f063 030e 	orn	r3, r3, #14
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <I2C_Master_ADD10+0x24>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d011      	beq.n	8003b30 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d104      	bne.n	8003b20 <I2C_Master_ADD10+0x38>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2e:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b091      	sub	sp, #68	; 0x44
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b22      	cmp	r3, #34	; 0x22
 8003b64:	f040 8169 	bne.w	8003e3a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10f      	bne.n	8003b90 <I2C_Master_ADDR+0x54>
 8003b70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d10b      	bne.n	8003b90 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	e160      	b.n	8003e52 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11d      	bne.n	8003bd4 <I2C_Master_ADDR+0x98>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ba0:	d118      	bne.n	8003bd4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	651a      	str	r2, [r3, #80]	; 0x50
 8003bd2:	e13e      	b.n	8003e52 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d113      	bne.n	8003c06 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bde:	2300      	movs	r3, #0
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e115      	b.n	8003e32 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f040 808a 	bne.w	8003d26 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c18:	d137      	bne.n	8003c8a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c28:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c38:	d113      	bne.n	8003c62 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c48:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	e0e7      	b.n	8003e32 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c62:	2300      	movs	r3, #0
 8003c64:	623b      	str	r3, [r7, #32]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	623b      	str	r3, [r7, #32]
 8003c76:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e0d3      	b.n	8003e32 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d02e      	beq.n	8003cee <I2C_Master_ADDR+0x1b2>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d02b      	beq.n	8003cee <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	2b12      	cmp	r3, #18
 8003c9a:	d102      	bne.n	8003ca2 <I2C_Master_ADDR+0x166>
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d125      	bne.n	8003cee <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d00e      	beq.n	8003cc6 <I2C_Master_ADDR+0x18a>
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d00b      	beq.n	8003cc6 <I2C_Master_ADDR+0x18a>
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d008      	beq.n	8003cc6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e007      	b.n	8003cd6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	e0a1      	b.n	8003e32 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e085      	b.n	8003e32 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d14d      	bne.n	8003dcc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d016      	beq.n	8003d64 <I2C_Master_ADDR+0x228>
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d013      	beq.n	8003d64 <I2C_Master_ADDR+0x228>
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d010      	beq.n	8003d64 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d50:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e007      	b.n	8003d74 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d72:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d82:	d117      	bne.n	8003db4 <I2C_Master_ADDR+0x278>
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d8a:	d00b      	beq.n	8003da4 <I2C_Master_ADDR+0x268>
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d008      	beq.n	8003da4 <I2C_Master_ADDR+0x268>
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d005      	beq.n	8003da4 <I2C_Master_ADDR+0x268>
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	2b10      	cmp	r3, #16
 8003d9c:	d002      	beq.n	8003da4 <I2C_Master_ADDR+0x268>
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d107      	bne.n	8003db4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003db2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	e032      	b.n	8003e32 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dda:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dea:	d117      	bne.n	8003e1c <I2C_Master_ADDR+0x2e0>
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df2:	d00b      	beq.n	8003e0c <I2C_Master_ADDR+0x2d0>
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d008      	beq.n	8003e0c <I2C_Master_ADDR+0x2d0>
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d005      	beq.n	8003e0c <I2C_Master_ADDR+0x2d0>
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d002      	beq.n	8003e0c <I2C_Master_ADDR+0x2d0>
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d107      	bne.n	8003e1c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e1a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e38:	e00b      	b.n	8003e52 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	e7ff      	b.n	8003e52 <I2C_Master_ADDR+0x316>
 8003e52:	bf00      	nop
 8003e54:	3744      	adds	r7, #68	; 0x44
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d02b      	beq.n	8003ed0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d114      	bne.n	8003ed0 <I2C_SlaveTransmit_TXE+0x72>
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b29      	cmp	r3, #41	; 0x29
 8003eaa:	d111      	bne.n	8003ed0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2221      	movs	r2, #33	; 0x21
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2228      	movs	r2, #40	; 0x28
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff fa18 	bl	8003300 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d011      	beq.n	8003f0e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d02c      	beq.n	8003f8e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d114      	bne.n	8003f8e <I2C_SlaveReceive_RXNE+0x74>
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b2a      	cmp	r3, #42	; 0x2a
 8003f68:	d111      	bne.n	8003f8e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2222      	movs	r2, #34	; 0x22
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2228      	movs	r2, #40	; 0x28
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff f9c3 	bl	8003314 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d012      	beq.n	8003fce <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ff4:	2b28      	cmp	r3, #40	; 0x28
 8003ff6:	d125      	bne.n	8004044 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004006:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	81bb      	strh	r3, [r7, #12]
 8004026:	e002      	b.n	800402e <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004036:	89ba      	ldrh	r2, [r7, #12]
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff f973 	bl	8003328 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004042:	e008      	b.n	8004056 <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0202 	mvn.w	r2, #2
 800404c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800407e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040bc:	d172      	bne.n	80041a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	2b22      	cmp	r3, #34	; 0x22
 80040c2:	d002      	beq.n	80040ca <I2C_Slave_STOPF+0x6a>
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b2a      	cmp	r3, #42	; 0x2a
 80040c8:	d135      	bne.n	8004136 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f043 0204 	orr.w	r2, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe f86e 	bl	80021e4 <HAL_DMA_GetState>
 8004108:	4603      	mov	r3, r0
 800410a:	2b01      	cmp	r3, #1
 800410c:	d049      	beq.n	80041a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	4a69      	ldr	r2, [pc, #420]	; (80042b8 <I2C_Slave_STOPF+0x258>)
 8004114:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd feb6 	bl	8001e8c <HAL_DMA_Abort_IT>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d03d      	beq.n	80041a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004130:	4610      	mov	r0, r2
 8004132:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004134:	e035      	b.n	80041a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	b29a      	uxth	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f043 0204 	orr.w	r2, r3, #4
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004168:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe f838 	bl	80021e4 <HAL_DMA_GetState>
 8004174:	4603      	mov	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d014      	beq.n	80041a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	4a4e      	ldr	r2, [pc, #312]	; (80042b8 <I2C_Slave_STOPF+0x258>)
 8004180:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd fe80 	bl	8001e8c <HAL_DMA_Abort_IT>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800419c:	4610      	mov	r0, r2
 800419e:	4798      	blx	r3
 80041a0:	e000      	b.n	80041a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d03e      	beq.n	800422c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d112      	bne.n	80041e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d112      	bne.n	8004216 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f043 0204 	orr.w	r2, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f843 	bl	80042c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800423a:	e039      	b.n	80042b0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b2a      	cmp	r3, #42	; 0x2a
 8004240:	d109      	bne.n	8004256 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2228      	movs	r2, #40	; 0x28
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff f85f 	bl	8003314 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b28      	cmp	r3, #40	; 0x28
 8004260:	d111      	bne.n	8004286 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a15      	ldr	r2, [pc, #84]	; (80042bc <I2C_Slave_STOPF+0x25c>)
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff f860 	bl	8003344 <HAL_I2C_ListenCpltCallback>
}
 8004284:	e014      	b.n	80042b0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	2b22      	cmp	r3, #34	; 0x22
 800428c:	d002      	beq.n	8004294 <I2C_Slave_STOPF+0x234>
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	2b22      	cmp	r3, #34	; 0x22
 8004292:	d10d      	bne.n	80042b0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff f832 	bl	8003314 <HAL_I2C_SlaveRxCpltCallback>
}
 80042b0:	bf00      	nop
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	08004525 	.word	0x08004525
 80042bc:	ffff0000 	.word	0xffff0000

080042c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042d8:	7bbb      	ldrb	r3, [r7, #14]
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d002      	beq.n	80042e4 <I2C_ITError+0x24>
 80042de:	7bbb      	ldrb	r3, [r7, #14]
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d10a      	bne.n	80042fa <I2C_ITError+0x3a>
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b22      	cmp	r3, #34	; 0x22
 80042e8:	d107      	bne.n	80042fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004300:	2b28      	cmp	r3, #40	; 0x28
 8004302:	d107      	bne.n	8004314 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2228      	movs	r2, #40	; 0x28
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004312:	e015      	b.n	8004340 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d00a      	beq.n	800433a <I2C_ITError+0x7a>
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b60      	cmp	r3, #96	; 0x60
 8004328:	d007      	beq.n	800433a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800434e:	d162      	bne.n	8004416 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800435e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d020      	beq.n	80043b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	4a6a      	ldr	r2, [pc, #424]	; (800451c <I2C_ITError+0x25c>)
 8004374:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd fd86 	bl	8001e8c <HAL_DMA_Abort_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8089 	beq.w	800449a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043aa:	4610      	mov	r0, r2
 80043ac:	4798      	blx	r3
 80043ae:	e074      	b.n	800449a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	4a59      	ldr	r2, [pc, #356]	; (800451c <I2C_ITError+0x25c>)
 80043b6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fd fd65 	bl	8001e8c <HAL_DMA_Abort_IT>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d068      	beq.n	800449a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d10b      	bne.n	80043ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004410:	4610      	mov	r0, r2
 8004412:	4798      	blx	r3
 8004414:	e041      	b.n	800449a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b60      	cmp	r3, #96	; 0x60
 8004420:	d125      	bne.n	800446e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d10b      	bne.n	8004456 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fe ff80 	bl	800336c <HAL_I2C_AbortCpltCallback>
 800446c:	e015      	b.n	800449a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d10b      	bne.n	8004494 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7fe ff5f 	bl	8003358 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10e      	bne.n	80044c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d113      	bne.n	8004514 <I2C_ITError+0x254>
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b28      	cmp	r3, #40	; 0x28
 80044f0:	d110      	bne.n	8004514 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <I2C_ITError+0x260>)
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fe ff18 	bl	8003344 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	08004525 	.word	0x08004525
 8004520:	ffff0000 	.word	0xffff0000

08004524 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800453e:	4b4b      	ldr	r3, [pc, #300]	; (800466c <I2C_DMAAbort+0x148>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	08db      	lsrs	r3, r3, #3
 8004544:	4a4a      	ldr	r2, [pc, #296]	; (8004670 <I2C_DMAAbort+0x14c>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	0a1a      	lsrs	r2, r3, #8
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	00da      	lsls	r2, r3, #3
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800456a:	e00a      	b.n	8004582 <I2C_DMAAbort+0x5e>
    }
    count--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	3b01      	subs	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004580:	d0ea      	beq.n	8004558 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458e:	2200      	movs	r2, #0
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	2200      	movs	r2, #0
 80045a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	2200      	movs	r2, #0
 80045c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	2200      	movs	r2, #0
 80045d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b60      	cmp	r3, #96	; 0x60
 80045f2:	d10e      	bne.n	8004612 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2200      	movs	r2, #0
 8004608:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800460a:	6978      	ldr	r0, [r7, #20]
 800460c:	f7fe feae 	bl	800336c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004610:	e027      	b.n	8004662 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004612:	7cfb      	ldrb	r3, [r7, #19]
 8004614:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004618:	2b28      	cmp	r3, #40	; 0x28
 800461a:	d117      	bne.n	800464c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800463a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2228      	movs	r2, #40	; 0x28
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800464a:	e007      	b.n	800465c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800465c:	6978      	ldr	r0, [r7, #20]
 800465e:	f7fe fe7b 	bl	8003358 <HAL_I2C_ErrorCallback>
}
 8004662:	bf00      	nop
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	200003dc 	.word	0x200003dc
 8004670:	14f8b589 	.word	0x14f8b589

08004674 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004680:	4b13      	ldr	r3, [pc, #76]	; (80046d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	08db      	lsrs	r3, r3, #3
 8004686:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	0a1a      	lsrs	r2, r3, #8
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3b01      	subs	r3, #1
 800469a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d107      	bne.n	80046b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f043 0220 	orr.w	r2, r3, #32
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e008      	b.n	80046c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c0:	d0e9      	beq.n	8004696 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	200003dc 	.word	0x200003dc
 80046d4:	14f8b589 	.word	0x14f8b589

080046d8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80046e8:	d103      	bne.n	80046f2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80046f0:	e007      	b.n	8004702 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80046fa:	d102      	bne.n	8004702 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2208      	movs	r2, #8
 8004700:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0cc      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004724:	4b68      	ldr	r3, [pc, #416]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 030f 	and.w	r3, r3, #15
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d90c      	bls.n	800474c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	4b65      	ldr	r3, [pc, #404]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0b8      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d020      	beq.n	800479a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004764:	4b59      	ldr	r3, [pc, #356]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a58      	ldr	r2, [pc, #352]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800476e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800477c:	4b53      	ldr	r3, [pc, #332]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a52      	ldr	r2, [pc, #328]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004788:	4b50      	ldr	r3, [pc, #320]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	494d      	ldr	r1, [pc, #308]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	4313      	orrs	r3, r2
 8004798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d044      	beq.n	8004830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b47      	ldr	r3, [pc, #284]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d119      	bne.n	80047ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e07f      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d003      	beq.n	80047ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ce:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e06f      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047de:	4b3b      	ldr	r3, [pc, #236]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e067      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ee:	4b37      	ldr	r3, [pc, #220]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 0203 	bic.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4934      	ldr	r1, [pc, #208]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004800:	f7fd f8b0 	bl	8001964 <HAL_GetTick>
 8004804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004806:	e00a      	b.n	800481e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004808:	f7fd f8ac 	bl	8001964 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e04f      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800481e:	4b2b      	ldr	r3, [pc, #172]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 020c 	and.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	429a      	cmp	r2, r3
 800482e:	d1eb      	bne.n	8004808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d20c      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e032      	b.n	80048be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004864:	4b19      	ldr	r3, [pc, #100]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4916      	ldr	r1, [pc, #88]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004882:	4b12      	ldr	r3, [pc, #72]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	490e      	ldr	r1, [pc, #56]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004896:	f000 f855 	bl	8004944 <HAL_RCC_GetSysClockFreq>
 800489a:	4602      	mov	r2, r0
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	490a      	ldr	r1, [pc, #40]	; (80048d0 <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	5ccb      	ldrb	r3, [r1, r3]
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
 80048ae:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048b2:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_RCC_ClockConfig+0x1c8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fd f810 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023c00 	.word	0x40023c00
 80048cc:	40023800 	.word	0x40023800
 80048d0:	080196f4 	.word	0x080196f4
 80048d4:	200003dc 	.word	0x200003dc
 80048d8:	20000668 	.word	0x20000668

080048dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e2:	681b      	ldr	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	200003dc 	.word	0x200003dc

080048f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048f8:	f7ff fff0 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	0a9b      	lsrs	r3, r3, #10
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4903      	ldr	r1, [pc, #12]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40023800 	.word	0x40023800
 8004918:	08019704 	.word	0x08019704

0800491c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004920:	f7ff ffdc 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	0b5b      	lsrs	r3, r3, #13
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	4903      	ldr	r1, [pc, #12]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004932:	5ccb      	ldrb	r3, [r1, r3]
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40023800 	.word	0x40023800
 8004940:	08019704 	.word	0x08019704

08004944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004948:	b0ae      	sub	sp, #184	; 0xb8
 800494a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496a:	4bcb      	ldr	r3, [pc, #812]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x354>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b0c      	cmp	r3, #12
 8004974:	f200 8206 	bhi.w	8004d84 <HAL_RCC_GetSysClockFreq+0x440>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <HAL_RCC_GetSysClockFreq+0x3c>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049b5 	.word	0x080049b5
 8004984:	08004d85 	.word	0x08004d85
 8004988:	08004d85 	.word	0x08004d85
 800498c:	08004d85 	.word	0x08004d85
 8004990:	080049bd 	.word	0x080049bd
 8004994:	08004d85 	.word	0x08004d85
 8004998:	08004d85 	.word	0x08004d85
 800499c:	08004d85 	.word	0x08004d85
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	08004d85 	.word	0x08004d85
 80049a8:	08004d85 	.word	0x08004d85
 80049ac:	08004d85 	.word	0x08004d85
 80049b0:	08004bb5 	.word	0x08004bb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b4:	4bb9      	ldr	r3, [pc, #740]	; (8004c9c <HAL_RCC_GetSysClockFreq+0x358>)
 80049b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80049ba:	e1e7      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049bc:	4bb8      	ldr	r3, [pc, #736]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80049be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049c2:	e1e3      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c4:	4bb4      	ldr	r3, [pc, #720]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x354>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049d0:	4bb1      	ldr	r3, [pc, #708]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x354>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d071      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049dc:	4bae      	ldr	r3, [pc, #696]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x354>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	099b      	lsrs	r3, r3, #6
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80049ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049f8:	2300      	movs	r3, #0
 80049fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a02:	4622      	mov	r2, r4
 8004a04:	462b      	mov	r3, r5
 8004a06:	f04f 0000 	mov.w	r0, #0
 8004a0a:	f04f 0100 	mov.w	r1, #0
 8004a0e:	0159      	lsls	r1, r3, #5
 8004a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a14:	0150      	lsls	r0, r2, #5
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	1a51      	subs	r1, r2, r1
 8004a1e:	6439      	str	r1, [r7, #64]	; 0x40
 8004a20:	4629      	mov	r1, r5
 8004a22:	eb63 0301 	sbc.w	r3, r3, r1
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004a34:	4649      	mov	r1, r9
 8004a36:	018b      	lsls	r3, r1, #6
 8004a38:	4641      	mov	r1, r8
 8004a3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a3e:	4641      	mov	r1, r8
 8004a40:	018a      	lsls	r2, r1, #6
 8004a42:	4641      	mov	r1, r8
 8004a44:	1a51      	subs	r1, r2, r1
 8004a46:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a48:	4649      	mov	r1, r9
 8004a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	00cb      	lsls	r3, r1, #3
 8004a60:	4641      	mov	r1, r8
 8004a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a66:	4641      	mov	r1, r8
 8004a68:	00ca      	lsls	r2, r1, #3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4622      	mov	r2, r4
 8004a72:	189b      	adds	r3, r3, r2
 8004a74:	633b      	str	r3, [r7, #48]	; 0x30
 8004a76:	462b      	mov	r3, r5
 8004a78:	460a      	mov	r2, r1
 8004a7a:	eb42 0303 	adc.w	r3, r2, r3
 8004a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	024b      	lsls	r3, r1, #9
 8004a90:	4621      	mov	r1, r4
 8004a92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a96:	4621      	mov	r1, r4
 8004a98:	024a      	lsls	r2, r1, #9
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004aa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004aac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004ab0:	f7fc f8aa 	bl	8000c08 <__aeabi_uldivmod>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004abe:	e067      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac0:	4b75      	ldr	r3, [pc, #468]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	099b      	lsrs	r3, r3, #6
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004acc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ada:	2300      	movs	r3, #0
 8004adc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ade:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	462b      	mov	r3, r5
 8004ae6:	f04f 0000 	mov.w	r0, #0
 8004aea:	f04f 0100 	mov.w	r1, #0
 8004aee:	0159      	lsls	r1, r3, #5
 8004af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af4:	0150      	lsls	r0, r2, #5
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4621      	mov	r1, r4
 8004afc:	1a51      	subs	r1, r2, r1
 8004afe:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b00:	4629      	mov	r1, r5
 8004b02:	eb63 0301 	sbc.w	r3, r3, r1
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004b14:	4649      	mov	r1, r9
 8004b16:	018b      	lsls	r3, r1, #6
 8004b18:	4641      	mov	r1, r8
 8004b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b1e:	4641      	mov	r1, r8
 8004b20:	018a      	lsls	r2, r1, #6
 8004b22:	4641      	mov	r1, r8
 8004b24:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b28:	4649      	mov	r1, r9
 8004b2a:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b42:	4692      	mov	sl, r2
 8004b44:	469b      	mov	fp, r3
 8004b46:	4623      	mov	r3, r4
 8004b48:	eb1a 0303 	adds.w	r3, sl, r3
 8004b4c:	623b      	str	r3, [r7, #32]
 8004b4e:	462b      	mov	r3, r5
 8004b50:	eb4b 0303 	adc.w	r3, fp, r3
 8004b54:	627b      	str	r3, [r7, #36]	; 0x24
 8004b56:	f04f 0200 	mov.w	r2, #0
 8004b5a:	f04f 0300 	mov.w	r3, #0
 8004b5e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004b62:	4629      	mov	r1, r5
 8004b64:	028b      	lsls	r3, r1, #10
 8004b66:	4621      	mov	r1, r4
 8004b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	028a      	lsls	r2, r1, #10
 8004b70:	4610      	mov	r0, r2
 8004b72:	4619      	mov	r1, r3
 8004b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b78:	2200      	movs	r2, #0
 8004b7a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b7c:	677a      	str	r2, [r7, #116]	; 0x74
 8004b7e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004b82:	f7fc f841 	bl	8000c08 <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b90:	4b41      	ldr	r3, [pc, #260]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	0c1b      	lsrs	r3, r3, #16
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bb2:	e0eb      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb4:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc0:	4b35      	ldr	r3, [pc, #212]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d06b      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bcc:	4b32      	ldr	r3, [pc, #200]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	663b      	str	r3, [r7, #96]	; 0x60
 8004be0:	2300      	movs	r3, #0
 8004be2:	667b      	str	r3, [r7, #100]	; 0x64
 8004be4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004be8:	4622      	mov	r2, r4
 8004bea:	462b      	mov	r3, r5
 8004bec:	f04f 0000 	mov.w	r0, #0
 8004bf0:	f04f 0100 	mov.w	r1, #0
 8004bf4:	0159      	lsls	r1, r3, #5
 8004bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bfa:	0150      	lsls	r0, r2, #5
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4621      	mov	r1, r4
 8004c02:	1a51      	subs	r1, r2, r1
 8004c04:	61b9      	str	r1, [r7, #24]
 8004c06:	4629      	mov	r1, r5
 8004c08:	eb63 0301 	sbc.w	r3, r3, r1
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c1a:	4659      	mov	r1, fp
 8004c1c:	018b      	lsls	r3, r1, #6
 8004c1e:	4651      	mov	r1, sl
 8004c20:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c24:	4651      	mov	r1, sl
 8004c26:	018a      	lsls	r2, r1, #6
 8004c28:	4651      	mov	r1, sl
 8004c2a:	ebb2 0801 	subs.w	r8, r2, r1
 8004c2e:	4659      	mov	r1, fp
 8004c30:	eb63 0901 	sbc.w	r9, r3, r1
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c48:	4690      	mov	r8, r2
 8004c4a:	4699      	mov	r9, r3
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	eb18 0303 	adds.w	r3, r8, r3
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	462b      	mov	r3, r5
 8004c56:	eb49 0303 	adc.w	r3, r9, r3
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004c68:	4629      	mov	r1, r5
 8004c6a:	024b      	lsls	r3, r1, #9
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c72:	4621      	mov	r1, r4
 8004c74:	024a      	lsls	r2, r1, #9
 8004c76:	4610      	mov	r0, r2
 8004c78:	4619      	mov	r1, r3
 8004c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c7e:	2200      	movs	r2, #0
 8004c80:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004c84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c88:	f7fb ffbe 	bl	8000c08 <__aeabi_uldivmod>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4613      	mov	r3, r2
 8004c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c96:	e065      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x420>
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	00f42400 	.word	0x00f42400
 8004ca0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca4:	4b3d      	ldr	r3, [pc, #244]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x458>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	099b      	lsrs	r3, r3, #6
 8004caa:	2200      	movs	r2, #0
 8004cac:	4618      	mov	r0, r3
 8004cae:	4611      	mov	r1, r2
 8004cb0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cb4:	653b      	str	r3, [r7, #80]	; 0x50
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	657b      	str	r3, [r7, #84]	; 0x54
 8004cba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004cbe:	4642      	mov	r2, r8
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	0159      	lsls	r1, r3, #5
 8004ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd0:	0150      	lsls	r0, r2, #5
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	1a51      	subs	r1, r2, r1
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	4649      	mov	r1, r9
 8004cde:	eb63 0301 	sbc.w	r3, r3, r1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004cf0:	4659      	mov	r1, fp
 8004cf2:	018b      	lsls	r3, r1, #6
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cfa:	4651      	mov	r1, sl
 8004cfc:	018a      	lsls	r2, r1, #6
 8004cfe:	4651      	mov	r1, sl
 8004d00:	1a54      	subs	r4, r2, r1
 8004d02:	4659      	mov	r1, fp
 8004d04:	eb63 0501 	sbc.w	r5, r3, r1
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	00eb      	lsls	r3, r5, #3
 8004d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d16:	00e2      	lsls	r2, r4, #3
 8004d18:	4614      	mov	r4, r2
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	4643      	mov	r3, r8
 8004d1e:	18e3      	adds	r3, r4, r3
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	464b      	mov	r3, r9
 8004d24:	eb45 0303 	adc.w	r3, r5, r3
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d36:	4629      	mov	r1, r5
 8004d38:	028b      	lsls	r3, r1, #10
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d40:	4621      	mov	r1, r4
 8004d42:	028a      	lsls	r2, r1, #10
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d50:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004d52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d56:	f7fb ff57 	bl	8000c08 <__aeabi_uldivmod>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4613      	mov	r3, r2
 8004d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x458>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	0f1b      	lsrs	r3, r3, #28
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004d72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004d82:	e003      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d84:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004d8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	37b8      	adds	r7, #184	; 0xb8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	00f42400 	.word	0x00f42400

08004da4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8083 	beq.w	8004ec4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004dbe:	4b95      	ldr	r3, [pc, #596]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d019      	beq.n	8004dfe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004dca:	4b92      	ldr	r3, [pc, #584]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004dd6:	4b8f      	ldr	r3, [pc, #572]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004de2:	d00c      	beq.n	8004dfe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004de4:	4b8b      	ldr	r3, [pc, #556]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004dec:	2b0c      	cmp	r3, #12
 8004dee:	d112      	bne.n	8004e16 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004df0:	4b88      	ldr	r3, [pc, #544]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dfc:	d10b      	bne.n	8004e16 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dfe:	4b85      	ldr	r3, [pc, #532]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d05b      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x11e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d157      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e216      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCC_OscConfig+0x8a>
 8004e20:	4b7c      	ldr	r3, [pc, #496]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7b      	ldr	r2, [pc, #492]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e01d      	b.n	8004e6a <HAL_RCC_OscConfig+0xc6>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e36:	d10c      	bne.n	8004e52 <HAL_RCC_OscConfig+0xae>
 8004e38:	4b76      	ldr	r3, [pc, #472]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a75      	ldr	r2, [pc, #468]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b73      	ldr	r3, [pc, #460]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a72      	ldr	r2, [pc, #456]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	e00b      	b.n	8004e6a <HAL_RCC_OscConfig+0xc6>
 8004e52:	4b70      	ldr	r3, [pc, #448]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a6f      	ldr	r2, [pc, #444]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	4b6d      	ldr	r3, [pc, #436]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a6c      	ldr	r2, [pc, #432]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d013      	beq.n	8004e9a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e72:	f7fc fd77 	bl	8001964 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e7a:	f7fc fd73 	bl	8001964 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b64      	cmp	r3, #100	; 0x64
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e1db      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8c:	4b61      	ldr	r3, [pc, #388]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0xd6>
 8004e98:	e014      	b.n	8004ec4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e9a:	f7fc fd63 	bl	8001964 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea2:	f7fc fd5f 	bl	8001964 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b64      	cmp	r3, #100	; 0x64
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e1c7      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb4:	4b57      	ldr	r3, [pc, #348]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCC_OscConfig+0xfe>
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d06f      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ed0:	4b50      	ldr	r3, [pc, #320]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 030c 	and.w	r3, r3, #12
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d017      	beq.n	8004f0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004edc:	4b4d      	ldr	r3, [pc, #308]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ee8:	4b4a      	ldr	r3, [pc, #296]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00b      	beq.n	8004f0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ef4:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004efc:	2b0c      	cmp	r3, #12
 8004efe:	d11c      	bne.n	8004f3a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f00:	4b44      	ldr	r3, [pc, #272]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d116      	bne.n	8004f3a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f0c:	4b41      	ldr	r3, [pc, #260]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_OscConfig+0x180>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e18f      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f24:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4938      	ldr	r1, [pc, #224]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f38:	e03a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d020      	beq.n	8004f84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f42:	4b35      	ldr	r3, [pc, #212]	; (8005018 <HAL_RCC_OscConfig+0x274>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fc fd0c 	bl	8001964 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f50:	f7fc fd08 	bl	8001964 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e170      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f62:	4b2c      	ldr	r3, [pc, #176]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f6e:	4b29      	ldr	r3, [pc, #164]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4925      	ldr	r1, [pc, #148]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	600b      	str	r3, [r1, #0]
 8004f82:	e015      	b.n	8004fb0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f84:	4b24      	ldr	r3, [pc, #144]	; (8005018 <HAL_RCC_OscConfig+0x274>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8a:	f7fc fceb 	bl	8001964 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f92:	f7fc fce7 	bl	8001964 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e14f      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fa4:	4b1b      	ldr	r3, [pc, #108]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d037      	beq.n	800502c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d016      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc4:	4b15      	ldr	r3, [pc, #84]	; (800501c <HAL_RCC_OscConfig+0x278>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fca:	f7fc fccb 	bl	8001964 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fd2:	f7fc fcc7 	bl	8001964 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e12f      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_OscConfig+0x270>)
 8004fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x22e>
 8004ff0:	e01c      	b.n	800502c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ff2:	4b0a      	ldr	r3, [pc, #40]	; (800501c <HAL_RCC_OscConfig+0x278>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff8:	f7fc fcb4 	bl	8001964 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ffe:	e00f      	b.n	8005020 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005000:	f7fc fcb0 	bl	8001964 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d908      	bls.n	8005020 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e118      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
 8005012:	bf00      	nop
 8005014:	40023800 	.word	0x40023800
 8005018:	42470000 	.word	0x42470000
 800501c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005020:	4b8a      	ldr	r3, [pc, #552]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 8005022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e9      	bne.n	8005000 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8097 	beq.w	8005168 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800503e:	4b83      	ldr	r3, [pc, #524]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10f      	bne.n	800506a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	4b7f      	ldr	r3, [pc, #508]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	4a7e      	ldr	r2, [pc, #504]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005058:	6413      	str	r3, [r2, #64]	; 0x40
 800505a:	4b7c      	ldr	r3, [pc, #496]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506a:	4b79      	ldr	r3, [pc, #484]	; (8005250 <HAL_RCC_OscConfig+0x4ac>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d118      	bne.n	80050a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005076:	4b76      	ldr	r3, [pc, #472]	; (8005250 <HAL_RCC_OscConfig+0x4ac>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a75      	ldr	r2, [pc, #468]	; (8005250 <HAL_RCC_OscConfig+0x4ac>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005082:	f7fc fc6f 	bl	8001964 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508a:	f7fc fc6b 	bl	8001964 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e0d3      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509c:	4b6c      	ldr	r3, [pc, #432]	; (8005250 <HAL_RCC_OscConfig+0x4ac>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d106      	bne.n	80050be <HAL_RCC_OscConfig+0x31a>
 80050b0:	4b66      	ldr	r3, [pc, #408]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	4a65      	ldr	r2, [pc, #404]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	6713      	str	r3, [r2, #112]	; 0x70
 80050bc:	e01c      	b.n	80050f8 <HAL_RCC_OscConfig+0x354>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b05      	cmp	r3, #5
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCC_OscConfig+0x33c>
 80050c6:	4b61      	ldr	r3, [pc, #388]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	4a60      	ldr	r2, [pc, #384]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80050cc:	f043 0304 	orr.w	r3, r3, #4
 80050d0:	6713      	str	r3, [r2, #112]	; 0x70
 80050d2:	4b5e      	ldr	r3, [pc, #376]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	4a5d      	ldr	r2, [pc, #372]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6713      	str	r3, [r2, #112]	; 0x70
 80050de:	e00b      	b.n	80050f8 <HAL_RCC_OscConfig+0x354>
 80050e0:	4b5a      	ldr	r3, [pc, #360]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	4a59      	ldr	r2, [pc, #356]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	6713      	str	r3, [r2, #112]	; 0x70
 80050ec:	4b57      	ldr	r3, [pc, #348]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	4a56      	ldr	r2, [pc, #344]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80050f2:	f023 0304 	bic.w	r3, r3, #4
 80050f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d015      	beq.n	800512c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fc fc30 	bl	8001964 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005106:	e00a      	b.n	800511e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005108:	f7fc fc2c 	bl	8001964 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e092      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511e:	4b4b      	ldr	r3, [pc, #300]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ee      	beq.n	8005108 <HAL_RCC_OscConfig+0x364>
 800512a:	e014      	b.n	8005156 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512c:	f7fc fc1a 	bl	8001964 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005132:	e00a      	b.n	800514a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005134:	f7fc fc16 	bl	8001964 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005142:	4293      	cmp	r3, r2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e07c      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514a:	4b40      	ldr	r3, [pc, #256]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ee      	bne.n	8005134 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005156:	7dfb      	ldrb	r3, [r7, #23]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d105      	bne.n	8005168 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515c:	4b3b      	ldr	r3, [pc, #236]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	4a3a      	ldr	r2, [pc, #232]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 8005162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005166:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d068      	beq.n	8005242 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005170:	4b36      	ldr	r3, [pc, #216]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b08      	cmp	r3, #8
 800517a:	d060      	beq.n	800523e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d145      	bne.n	8005210 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005184:	4b33      	ldr	r3, [pc, #204]	; (8005254 <HAL_RCC_OscConfig+0x4b0>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7fc fbeb 	bl	8001964 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005192:	f7fc fbe7 	bl	8001964 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e04f      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a4:	4b29      	ldr	r3, [pc, #164]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f0      	bne.n	8005192 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	019b      	lsls	r3, r3, #6
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	3b01      	subs	r3, #1
 80051ca:	041b      	lsls	r3, r3, #16
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	061b      	lsls	r3, r3, #24
 80051d4:	431a      	orrs	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	071b      	lsls	r3, r3, #28
 80051dc:	491b      	ldr	r1, [pc, #108]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e2:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <HAL_RCC_OscConfig+0x4b0>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fc fbbc 	bl	8001964 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fc fbb8 	bl	8001964 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e020      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x44c>
 800520e:	e018      	b.n	8005242 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005210:	4b10      	ldr	r3, [pc, #64]	; (8005254 <HAL_RCC_OscConfig+0x4b0>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005216:	f7fc fba5 	bl	8001964 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521e:	f7fc fba1 	bl	8001964 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e009      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_RCC_OscConfig+0x4a8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f0      	bne.n	800521e <HAL_RCC_OscConfig+0x47a>
 800523c:	e001      	b.n	8005242 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40023800 	.word	0x40023800
 8005250:	40007000 	.word	0x40007000
 8005254:	42470060 	.word	0x42470060

08005258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e056      	b.n	8005318 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f005 fc3f 	bl	800ab08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	431a      	orrs	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	ea42 0103 	orr.w	r1, r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	f003 0104 	and.w	r1, r3, #4
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005306:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_SPI_Transmit_IT+0x20>
 800533c:	2302      	movs	r3, #2
 800533e:	e067      	b.n	8005410 <HAL_SPI_Transmit_IT+0xf0>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_SPI_Transmit_IT+0x34>
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005358:	e055      	b.n	8005406 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d002      	beq.n	800536c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8005366:	2302      	movs	r3, #2
 8005368:	75fb      	strb	r3, [r7, #23]
    goto error;
 800536a:	e04c      	b.n	8005406 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2203      	movs	r2, #3
 8005370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	88fa      	ldrh	r2, [r7, #6]
 8005384:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	88fa      	ldrh	r2, [r7, #6]
 800538a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4a1b      	ldr	r2, [pc, #108]	; (800541c <HAL_SPI_Transmit_IT+0xfc>)
 80053b0:	645a      	str	r2, [r3, #68]	; 0x44
 80053b2:	e002      	b.n	80053ba <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a1a      	ldr	r2, [pc, #104]	; (8005420 <HAL_SPI_Transmit_IT+0x100>)
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c2:	d107      	bne.n	80053d4 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80053e2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	d008      	beq.n	8005404 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e000      	b.n	8005406 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8005404:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800540e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005410:	4618      	mov	r0, r3
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	08005e91 	.word	0x08005e91
 8005420:	08005e4b 	.word	0x08005e4b

08005424 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d110      	bne.n	8005460 <HAL_SPI_Receive_IT+0x3c>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005446:	d10b      	bne.n	8005460 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2204      	movs	r2, #4
 800544c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f87a 	bl	8005550 <HAL_SPI_TransmitReceive_IT>
 800545c:	4603      	mov	r3, r0
 800545e:	e06e      	b.n	800553e <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_SPI_Receive_IT+0x4a>
 800546a:	2302      	movs	r3, #2
 800546c:	e067      	b.n	800553e <HAL_SPI_Receive_IT+0x11a>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d002      	beq.n	8005488 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8005482:	2302      	movs	r3, #2
 8005484:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005486:	e055      	b.n	8005534 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_SPI_Receive_IT+0x70>
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005498:	e04c      	b.n	8005534 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2204      	movs	r2, #4
 800549e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	88fa      	ldrh	r2, [r7, #6]
 80054b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	88fa      	ldrh	r2, [r7, #6]
 80054b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4a1a      	ldr	r2, [pc, #104]	; (8005548 <HAL_SPI_Receive_IT+0x124>)
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
 80054e0:	e002      	b.n	80054e8 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4a19      	ldr	r2, [pc, #100]	; (800554c <HAL_SPI_Receive_IT+0x128>)
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f0:	d107      	bne.n	8005502 <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005500:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005510:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d008      	beq.n	8005532 <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e000      	b.n	8005534 <HAL_SPI_Receive_IT+0x110>
  }

error :
 8005532:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800553c:	7dfb      	ldrb	r3, [r7, #23]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	08005e05 	.word	0x08005e05
 800554c:	08005dbb 	.word	0x08005dbb

08005550 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_SPI_TransmitReceive_IT+0x20>
 800556c:	2302      	movs	r3, #2
 800556e:	e075      	b.n	800565c <HAL_SPI_TransmitReceive_IT+0x10c>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800557e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005586:	7dbb      	ldrb	r3, [r7, #22]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d00d      	beq.n	80055a8 <HAL_SPI_TransmitReceive_IT+0x58>
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005592:	d106      	bne.n	80055a2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <HAL_SPI_TransmitReceive_IT+0x52>
 800559c:	7dbb      	ldrb	r3, [r7, #22]
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d002      	beq.n	80055a8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
 80055a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055a6:	e054      	b.n	8005652 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_SPI_TransmitReceive_IT+0x6a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <HAL_SPI_TransmitReceive_IT+0x6a>
 80055b4:	887b      	ldrh	r3, [r7, #2]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d102      	bne.n	80055c0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055be:	e048      	b.n	8005652 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d003      	beq.n	80055d4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2205      	movs	r2, #5
 80055d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	887a      	ldrh	r2, [r7, #2]
 80055e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	887a      	ldrh	r2, [r7, #2]
 80055ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	887a      	ldrh	r2, [r7, #2]
 80055f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	887a      	ldrh	r2, [r7, #2]
 80055fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <HAL_SPI_TransmitReceive_IT+0x118>)
 800560a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4a17      	ldr	r2, [pc, #92]	; (800566c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8005610:	645a      	str	r2, [r3, #68]	; 0x44
 8005612:	e005      	b.n	8005620 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a16      	ldr	r2, [pc, #88]	; (8005670 <HAL_SPI_TransmitReceive_IT+0x120>)
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4a15      	ldr	r2, [pc, #84]	; (8005674 <HAL_SPI_TransmitReceive_IT+0x124>)
 800561e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800562e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d008      	beq.n	8005650 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e000      	b.n	8005652 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8005650:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800565a:	7dfb      	ldrb	r3, [r7, #23]
}
 800565c:	4618      	mov	r0, r3
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	08005cfd 	.word	0x08005cfd
 800566c:	08005d5d 	.word	0x08005d5d
 8005670:	08005c39 	.word	0x08005c39
 8005674:	08005c9d 	.word	0x08005c9d

08005678 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8005684:	2301      	movs	r3, #1
 8005686:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005688:	4b72      	ldr	r3, [pc, #456]	; (8005854 <HAL_SPI_Abort_IT+0x1dc>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a72      	ldr	r2, [pc, #456]	; (8005858 <HAL_SPI_Abort_IT+0x1e0>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	0a5b      	lsrs	r3, r3, #9
 8005694:	2264      	movs	r2, #100	; 0x64
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	613b      	str	r3, [r7, #16]
  count = resetcount;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0220 	bic.w	r2, r2, #32
 80056ae:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ba:	2b80      	cmp	r3, #128	; 0x80
 80056bc:	d117      	bne.n	80056ee <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a66      	ldr	r2, [pc, #408]	; (800585c <HAL_SPI_Abort_IT+0x1e4>)
 80056c2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80056d6:	e008      	b.n	80056ea <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	3b01      	subs	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b07      	cmp	r3, #7
 80056e8:	d1ec      	bne.n	80056c4 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d117      	bne.n	800572c <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a58      	ldr	r2, [pc, #352]	; (8005860 <HAL_SPI_Abort_IT+0x1e8>)
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d106      	bne.n	8005716 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8005714:	e008      	b.n	8005728 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	3b01      	subs	r3, #1
 800571a:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b07      	cmp	r3, #7
 8005726:	d1ec      	bne.n	8005702 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00f      	beq.n	8005754 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b02      	cmp	r3, #2
 8005740:	d104      	bne.n	800574c <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005746:	4a47      	ldr	r2, [pc, #284]	; (8005864 <HAL_SPI_Abort_IT+0x1ec>)
 8005748:	651a      	str	r2, [r3, #80]	; 0x50
 800574a:	e003      	b.n	8005754 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005750:	2200      	movs	r2, #0
 8005752:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00f      	beq.n	800577c <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d104      	bne.n	8005774 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576e:	4a3e      	ldr	r2, [pc, #248]	; (8005868 <HAL_SPI_Abort_IT+0x1f0>)
 8005770:	651a      	str	r2, [r3, #80]	; 0x50
 8005772:	e003      	b.n	800577c <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005778:	2200      	movs	r2, #0
 800577a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b02      	cmp	r3, #2
 8005788:	d115      	bne.n	80057b6 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578e:	2b00      	cmp	r3, #0
 8005790:	d011      	beq.n	80057b6 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005796:	4618      	mov	r0, r3
 8005798:	f7fc fb78 	bl	8001e8c <HAL_DMA_Abort_IT>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a6:	2200      	movs	r2, #0
 80057a8:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2240      	movs	r2, #64	; 0x40
 80057ae:	655a      	str	r2, [r3, #84]	; 0x54
 80057b0:	e001      	b.n	80057b6 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d115      	bne.n	80057f0 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d011      	beq.n	80057f0 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fc fb5b 	bl	8001e8c <HAL_DMA_Abort_IT>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d007      	beq.n	80057ec <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e0:	2200      	movs	r2, #0
 80057e2:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2240      	movs	r2, #64	; 0x40
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54
 80057ea:	e001      	b.n	80057f0 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d128      	bne.n	8005848 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d102      	bne.n	8005810 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e002      	b.n	8005816 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800582c:	2300      	movs	r3, #0
 800582e:	60bb      	str	r3, [r7, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f910 	bl	8005a68 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8005848:	7ffb      	ldrb	r3, [r7, #31]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	200003dc 	.word	0x200003dc
 8005858:	057619f1 	.word	0x057619f1
 800585c:	080063ad 	.word	0x080063ad
 8005860:	08006325 	.word	0x08006325
 8005864:	08005aa5 	.word	0x08005aa5
 8005868:	08005b79 	.word	0x08005b79

0800586c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10e      	bne.n	80058ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d004      	beq.n	80058ac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
    return;
 80058aa:	e0ce      	b.n	8005a4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_SPI_IRQHandler+0x5e>
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d004      	beq.n	80058ca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	4798      	blx	r3
    return;
 80058c8:	e0bf      	b.n	8005a4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	f003 0320 	and.w	r3, r3, #32
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10a      	bne.n	80058ea <HAL_SPI_IRQHandler+0x7e>
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d105      	bne.n	80058ea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 80b0 	beq.w	8005a4a <HAL_SPI_IRQHandler+0x1de>
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 80aa 	beq.w	8005a4a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d023      	beq.n	8005948 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b03      	cmp	r3, #3
 800590a:	d011      	beq.n	8005930 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005910:	f043 0204 	orr.w	r2, r3, #4
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	e00b      	b.n	8005948 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	693b      	ldr	r3, [r7, #16]
        return;
 8005946:	e080      	b.n	8005a4a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d014      	beq.n	800597c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f043 0201 	orr.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00c      	beq.n	80059a0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598a:	f043 0208 	orr.w	r2, r3, #8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005992:	2300      	movs	r3, #0
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d04f      	beq.n	8005a48 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059b6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <HAL_SPI_IRQHandler+0x168>
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d034      	beq.n	8005a3e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0203 	bic.w	r2, r2, #3
 80059e2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d011      	beq.n	8005a10 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f0:	4a17      	ldr	r2, [pc, #92]	; (8005a50 <HAL_SPI_IRQHandler+0x1e4>)
 80059f2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fc fa47 	bl	8001e8c <HAL_DMA_Abort_IT>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d016      	beq.n	8005a46 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a1c:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <HAL_SPI_IRQHandler+0x1e4>)
 8005a1e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fc fa31 	bl	8001e8c <HAL_DMA_Abort_IT>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005a3c:	e003      	b.n	8005a46 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f808 	bl	8005a54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005a44:	e000      	b.n	8005a48 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005a46:	bf00      	nop
    return;
 8005a48:	bf00      	nop
  }
}
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	08005a7d 	.word	0x08005a7d

08005a54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff ffdc 	bl	8005a54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005aba:	4b2d      	ldr	r3, [pc, #180]	; (8005b70 <SPI_DMATxAbortCallback+0xcc>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a2d      	ldr	r2, [pc, #180]	; (8005b74 <SPI_DMATxAbortCallback+0xd0>)
 8005ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac4:	0a5b      	lsrs	r3, r3, #9
 8005ac6:	2264      	movs	r2, #100	; 0x64
 8005ac8:	fb02 f303 	mul.w	r3, r2, r3
 8005acc:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0202 	bic.w	r2, r2, #2
 8005adc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005af0:	e009      	b.n	8005b06 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0eb      	beq.n	8005ade <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d004      	beq.n	8005b18 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d126      	bne.n	8005b66 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d002      	beq.n	8005b32 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f7ff ff82 	bl	8005a68 <HAL_SPI_AbortCpltCallback>
 8005b64:	e000      	b.n	8005b68 <SPI_DMATxAbortCallback+0xc4>
      return;
 8005b66:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	200003dc 	.word	0x200003dc
 8005b74:	057619f1 	.word	0x057619f1

08005b78 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b94:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0201 	bic.w	r2, r2, #1
 8005bac:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005bae:	f7fb fed9 	bl	8001964 <HAL_GetTick>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2164      	movs	r1, #100	; 0x64
 8005bb8:	6978      	ldr	r0, [r7, #20]
 8005bba:	f000 fa5b 	bl	8006074 <SPI_EndRxTxTransaction>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d126      	bne.n	8005c30 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2200      	movs	r2, #0
 8005be6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2200      	movs	r2, #0
 8005bec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	d002      	beq.n	8005bfc <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8005c28:	6978      	ldr	r0, [r7, #20]
 8005c2a:	f7ff ff1d 	bl	8005a68 <HAL_SPI_AbortCpltCallback>
 8005c2e:	e000      	b.n	8005c32 <SPI_DMARxAbortCallback+0xba>
      return;
 8005c30:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f103 020c 	add.w	r2, r3, #12
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10f      	bne.n	8005c94 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c82:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa32 	bl	80060f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005c94:	bf00      	nop
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	7812      	ldrb	r2, [r2, #0]
 8005cb0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10f      	bne.n	8005cf4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ce2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fa02 	bl	80060f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	b292      	uxth	r2, r2
 8005d10:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	1c9a      	adds	r2, r3, #2
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10f      	bne.n	8005d54 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d42:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9d2 	bl	80060f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	881a      	ldrh	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	1c9a      	adds	r2, r3, #2
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10f      	bne.n	8005db2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005da0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f9a3 	bl	80060f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f103 020c 	add.w	r2, r3, #12
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	7812      	ldrb	r2, [r2, #0]
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d102      	bne.n	8005dfc <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f9f2 	bl	80061e0 <SPI_CloseRx_ISR>
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	b292      	uxth	r2, r2
 8005e18:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	1c9a      	adds	r2, r3, #2
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f9cf 	bl	80061e0 <SPI_CloseRx_ISR>
  }
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	7812      	ldrb	r2, [r2, #0]
 8005e5e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f9ec 	bl	8006260 <SPI_CloseTx_ISR>
  }
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	881a      	ldrh	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	1c9a      	adds	r2, r3, #2
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f9ca 	bl	8006260 <SPI_CloseTx_ISR>
  }
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ee4:	e04c      	b.n	8005f80 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d048      	beq.n	8005f80 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005eee:	f7fb fd39 	bl	8001964 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d902      	bls.n	8005f04 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d13d      	bne.n	8005f80 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1c:	d111      	bne.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f26:	d004      	beq.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f30:	d107      	bne.n	8005f42 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4a:	d10f      	bne.n	8005f6c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e00f      	b.n	8005fa0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	79fb      	ldrb	r3, [r7, #7]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d1a3      	bne.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fbc:	d111      	bne.n	8005fe2 <SPI_EndRxTransaction+0x3a>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc6:	d004      	beq.n	8005fd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd0:	d107      	bne.n	8005fe2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fea:	d12a      	bne.n	8006042 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d012      	beq.n	800601c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2180      	movs	r1, #128	; 0x80
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7ff ff67 	bl	8005ed4 <SPI_WaitFlagStateUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d02d      	beq.n	8006068 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	f043 0220 	orr.w	r2, r3, #32
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e026      	b.n	800606a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2200      	movs	r2, #0
 8006024:	2101      	movs	r1, #1
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff ff54 	bl	8005ed4 <SPI_WaitFlagStateUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d01a      	beq.n	8006068 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006036:	f043 0220 	orr.w	r2, r3, #32
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e013      	b.n	800606a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2200      	movs	r2, #0
 800604a:	2101      	movs	r1, #1
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff ff41 	bl	8005ed4 <SPI_WaitFlagStateUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605c:	f043 0220 	orr.w	r2, r3, #32
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e000      	b.n	800606a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af02      	add	r7, sp, #8
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <SPI_EndRxTxTransaction+0x7c>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a1b      	ldr	r2, [pc, #108]	; (80060f4 <SPI_EndRxTxTransaction+0x80>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	0d5b      	lsrs	r3, r3, #21
 800608c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006090:	fb02 f303 	mul.w	r3, r2, r3
 8006094:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800609e:	d112      	bne.n	80060c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	2180      	movs	r1, #128	; 0x80
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f7ff ff12 	bl	8005ed4 <SPI_WaitFlagStateUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	f043 0220 	orr.w	r2, r3, #32
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e00f      	b.n	80060e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060dc:	2b80      	cmp	r3, #128	; 0x80
 80060de:	d0f2      	beq.n	80060c6 <SPI_EndRxTxTransaction+0x52>
 80060e0:	e000      	b.n	80060e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80060e2:	bf00      	nop
  }

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	200003dc 	.word	0x200003dc
 80060f4:	165e9f81 	.word	0x165e9f81

080060f8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006100:	4b35      	ldr	r3, [pc, #212]	; (80061d8 <SPI_CloseRxTx_ISR+0xe0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a35      	ldr	r2, [pc, #212]	; (80061dc <SPI_CloseRxTx_ISR+0xe4>)
 8006106:	fba2 2303 	umull	r2, r3, r2, r3
 800610a:	0a5b      	lsrs	r3, r3, #9
 800610c:	2264      	movs	r2, #100	; 0x64
 800610e:	fb02 f303 	mul.w	r3, r2, r3
 8006112:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006114:	f7fb fc26 	bl	8001964 <HAL_GetTick>
 8006118:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0220 	bic.w	r2, r2, #32
 8006128:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006134:	f043 0220 	orr.w	r2, r3, #32
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800613c:	e009      	b.n	8006152 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3b01      	subs	r3, #1
 8006142:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0eb      	beq.n	800612a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	2164      	movs	r1, #100	; 0x64
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff ff8c 	bl	8006074 <SPI_EndRxTxTransaction>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	f043 0220 	orr.w	r2, r3, #32
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006190:	2b00      	cmp	r3, #0
 8006192:	d115      	bne.n	80061c0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b04      	cmp	r3, #4
 800619e:	d107      	bne.n	80061b0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f004 fb79 	bl	800a8a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80061ae:	e00e      	b.n	80061ce <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f004 fb9f 	bl	800a8fc <HAL_SPI_TxRxCpltCallback>
}
 80061be:	e006      	b.n	80061ce <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff fc43 	bl	8005a54 <HAL_SPI_ErrorCallback>
}
 80061ce:	bf00      	nop
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200003dc 	.word	0x200003dc
 80061dc:	057619f1 	.word	0x057619f1

080061e0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061f6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80061f8:	f7fb fbb4 	bl	8001964 <HAL_GetTick>
 80061fc:	4603      	mov	r3, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	2164      	movs	r1, #100	; 0x64
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff fed0 	bl	8005fa8 <SPI_EndRxTransaction>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006212:	f043 0220 	orr.w	r2, r3, #32
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006244:	2b00      	cmp	r3, #0
 8006246:	d103      	bne.n	8006250 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f004 fb29 	bl	800a8a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800624e:	e002      	b.n	8006256 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff fbff 	bl	8005a54 <HAL_SPI_ErrorCallback>
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006268:	4b2c      	ldr	r3, [pc, #176]	; (800631c <SPI_CloseTx_ISR+0xbc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2c      	ldr	r2, [pc, #176]	; (8006320 <SPI_CloseTx_ISR+0xc0>)
 800626e:	fba2 2303 	umull	r2, r3, r2, r3
 8006272:	0a5b      	lsrs	r3, r3, #9
 8006274:	2264      	movs	r2, #100	; 0x64
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800627c:	f7fb fb72 	bl	8001964 <HAL_GetTick>
 8006280:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006294:	e009      	b.n	80062aa <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	3b01      	subs	r3, #1
 800629a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0eb      	beq.n	8006282 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062b8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	2164      	movs	r1, #100	; 0x64
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fed8 	bl	8006074 <SPI_EndRxTxTransaction>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff fba5 	bl	8005a54 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800630a:	e002      	b.n	8006312 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f004 fa99 	bl	800a844 <HAL_SPI_TxCpltCallback>
}
 8006312:	bf00      	nop
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	200003dc 	.word	0x200003dc
 8006320:	057619f1 	.word	0x057619f1

08006324 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800632c:	4b1d      	ldr	r3, [pc, #116]	; (80063a4 <SPI_AbortRx_ISR+0x80>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <SPI_AbortRx_ISR+0x84>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	0a5b      	lsrs	r3, r3, #9
 8006338:	2264      	movs	r2, #100	; 0x64
 800633a:	fb02 f303 	mul.w	r3, r2, r3
 800633e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <SPI_AbortRx_ISR+0x30>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006352:	e009      	b.n	8006368 <SPI_AbortRx_ISR+0x44>
    }
    count--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3b01      	subs	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0eb      	beq.n	8006340 <SPI_AbortRx_ISR+0x1c>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006376:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006386:	605a      	str	r2, [r3, #4]

  /* Read CRC to flush Data Register */
  READ_REG(hspi->Instance->DR);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2207      	movs	r2, #7
 8006392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8006396:	bf00      	nop
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	200003dc 	.word	0x200003dc
 80063a8:	057619f1 	.word	0x057619f1

080063ac <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063c2:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d2:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2207      	movs	r2, #7
 80063d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e01d      	b.n	8006436 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f815 	bl	800643e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f000 fa2c 	bl	8006884 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b06      	cmp	r3, #6
 8006472:	d007      	beq.n	8006484 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b082      	sub	sp, #8
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d122      	bne.n	80064f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d11b      	bne.n	80064f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f06f 0202 	mvn.w	r2, #2
 80064c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f003 0303 	and.w	r3, r3, #3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f9b2 	bl	8006846 <HAL_TIM_IC_CaptureCallback>
 80064e2:	e005      	b.n	80064f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9a4 	bl	8006832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f9b5 	bl	800685a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b04      	cmp	r3, #4
 8006502:	d122      	bne.n	800654a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b04      	cmp	r3, #4
 8006510:	d11b      	bne.n	800654a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f06f 0204 	mvn.w	r2, #4
 800651a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f988 	bl	8006846 <HAL_TIM_IC_CaptureCallback>
 8006536:	e005      	b.n	8006544 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f97a 	bl	8006832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f98b 	bl	800685a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b08      	cmp	r3, #8
 8006556:	d122      	bne.n	800659e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b08      	cmp	r3, #8
 8006564:	d11b      	bne.n	800659e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f06f 0208 	mvn.w	r2, #8
 800656e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2204      	movs	r2, #4
 8006574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f95e 	bl	8006846 <HAL_TIM_IC_CaptureCallback>
 800658a:	e005      	b.n	8006598 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f950 	bl	8006832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f961 	bl	800685a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d122      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f003 0310 	and.w	r3, r3, #16
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d11b      	bne.n	80065f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f06f 0210 	mvn.w	r2, #16
 80065c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2208      	movs	r2, #8
 80065c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f934 	bl	8006846 <HAL_TIM_IC_CaptureCallback>
 80065de:	e005      	b.n	80065ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f926 	bl	8006832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f937 	bl	800685a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d10e      	bne.n	800661e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b01      	cmp	r3, #1
 800660c:	d107      	bne.n	800661e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f06f 0201 	mvn.w	r2, #1
 8006616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f004 fd49 	bl	800b0b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006628:	2b80      	cmp	r3, #128	; 0x80
 800662a:	d10e      	bne.n	800664a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006636:	2b80      	cmp	r3, #128	; 0x80
 8006638:	d107      	bne.n	800664a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fadd 	bl	8006c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d10e      	bne.n	8006676 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d107      	bne.n	8006676 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800666e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8fc 	bl	800686e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b20      	cmp	r3, #32
 8006682:	d10e      	bne.n	80066a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b20      	cmp	r3, #32
 8006690:	d107      	bne.n	80066a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f06f 0220 	mvn.w	r2, #32
 800669a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 faa7 	bl	8006bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
 80066b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_TIM_ConfigClockSource+0x18>
 80066be:	2302      	movs	r3, #2
 80066c0:	e0b3      	b.n	800682a <HAL_TIM_ConfigClockSource+0x180>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2202      	movs	r2, #2
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066fa:	d03e      	beq.n	800677a <HAL_TIM_ConfigClockSource+0xd0>
 80066fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006700:	f200 8087 	bhi.w	8006812 <HAL_TIM_ConfigClockSource+0x168>
 8006704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006708:	f000 8085 	beq.w	8006816 <HAL_TIM_ConfigClockSource+0x16c>
 800670c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006710:	d87f      	bhi.n	8006812 <HAL_TIM_ConfigClockSource+0x168>
 8006712:	2b70      	cmp	r3, #112	; 0x70
 8006714:	d01a      	beq.n	800674c <HAL_TIM_ConfigClockSource+0xa2>
 8006716:	2b70      	cmp	r3, #112	; 0x70
 8006718:	d87b      	bhi.n	8006812 <HAL_TIM_ConfigClockSource+0x168>
 800671a:	2b60      	cmp	r3, #96	; 0x60
 800671c:	d050      	beq.n	80067c0 <HAL_TIM_ConfigClockSource+0x116>
 800671e:	2b60      	cmp	r3, #96	; 0x60
 8006720:	d877      	bhi.n	8006812 <HAL_TIM_ConfigClockSource+0x168>
 8006722:	2b50      	cmp	r3, #80	; 0x50
 8006724:	d03c      	beq.n	80067a0 <HAL_TIM_ConfigClockSource+0xf6>
 8006726:	2b50      	cmp	r3, #80	; 0x50
 8006728:	d873      	bhi.n	8006812 <HAL_TIM_ConfigClockSource+0x168>
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d058      	beq.n	80067e0 <HAL_TIM_ConfigClockSource+0x136>
 800672e:	2b40      	cmp	r3, #64	; 0x40
 8006730:	d86f      	bhi.n	8006812 <HAL_TIM_ConfigClockSource+0x168>
 8006732:	2b30      	cmp	r3, #48	; 0x30
 8006734:	d064      	beq.n	8006800 <HAL_TIM_ConfigClockSource+0x156>
 8006736:	2b30      	cmp	r3, #48	; 0x30
 8006738:	d86b      	bhi.n	8006812 <HAL_TIM_ConfigClockSource+0x168>
 800673a:	2b20      	cmp	r3, #32
 800673c:	d060      	beq.n	8006800 <HAL_TIM_ConfigClockSource+0x156>
 800673e:	2b20      	cmp	r3, #32
 8006740:	d867      	bhi.n	8006812 <HAL_TIM_ConfigClockSource+0x168>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d05c      	beq.n	8006800 <HAL_TIM_ConfigClockSource+0x156>
 8006746:	2b10      	cmp	r3, #16
 8006748:	d05a      	beq.n	8006800 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800674a:	e062      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	6899      	ldr	r1, [r3, #8]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f000 f9ac 	bl	8006ab8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800676e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	609a      	str	r2, [r3, #8]
      break;
 8006778:	e04e      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6899      	ldr	r1, [r3, #8]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f000 f995 	bl	8006ab8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800679c:	609a      	str	r2, [r3, #8]
      break;
 800679e:	e03b      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6818      	ldr	r0, [r3, #0]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6859      	ldr	r1, [r3, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	461a      	mov	r2, r3
 80067ae:	f000 f909 	bl	80069c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2150      	movs	r1, #80	; 0x50
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 f962 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 80067be:	e02b      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	6859      	ldr	r1, [r3, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	461a      	mov	r2, r3
 80067ce:	f000 f928 	bl	8006a22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2160      	movs	r1, #96	; 0x60
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 f952 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 80067de:	e01b      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6818      	ldr	r0, [r3, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	6859      	ldr	r1, [r3, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	461a      	mov	r2, r3
 80067ee:	f000 f8e9 	bl	80069c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2140      	movs	r1, #64	; 0x40
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 f942 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 80067fe:	e00b      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4619      	mov	r1, r3
 800680a:	4610      	mov	r0, r2
 800680c:	f000 f939 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 8006810:	e002      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006812:	bf00      	nop
 8006814:	e000      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
	...

08006884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a40      	ldr	r2, [pc, #256]	; (8006998 <TIM_Base_SetConfig+0x114>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a2:	d00f      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a3d      	ldr	r2, [pc, #244]	; (800699c <TIM_Base_SetConfig+0x118>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00b      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a3c      	ldr	r2, [pc, #240]	; (80069a0 <TIM_Base_SetConfig+0x11c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d007      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3b      	ldr	r2, [pc, #236]	; (80069a4 <TIM_Base_SetConfig+0x120>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3a      	ldr	r2, [pc, #232]	; (80069a8 <TIM_Base_SetConfig+0x124>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d108      	bne.n	80068d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2f      	ldr	r2, [pc, #188]	; (8006998 <TIM_Base_SetConfig+0x114>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d02b      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e4:	d027      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2c      	ldr	r2, [pc, #176]	; (800699c <TIM_Base_SetConfig+0x118>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d023      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a2b      	ldr	r2, [pc, #172]	; (80069a0 <TIM_Base_SetConfig+0x11c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01f      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2a      	ldr	r2, [pc, #168]	; (80069a4 <TIM_Base_SetConfig+0x120>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01b      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a29      	ldr	r2, [pc, #164]	; (80069a8 <TIM_Base_SetConfig+0x124>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d017      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a28      	ldr	r2, [pc, #160]	; (80069ac <TIM_Base_SetConfig+0x128>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a27      	ldr	r2, [pc, #156]	; (80069b0 <TIM_Base_SetConfig+0x12c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00f      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a26      	ldr	r2, [pc, #152]	; (80069b4 <TIM_Base_SetConfig+0x130>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00b      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a25      	ldr	r2, [pc, #148]	; (80069b8 <TIM_Base_SetConfig+0x134>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d007      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a24      	ldr	r2, [pc, #144]	; (80069bc <TIM_Base_SetConfig+0x138>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d003      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a23      	ldr	r2, [pc, #140]	; (80069c0 <TIM_Base_SetConfig+0x13c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d108      	bne.n	8006948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800693c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4313      	orrs	r3, r2
 8006946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a0a      	ldr	r2, [pc, #40]	; (8006998 <TIM_Base_SetConfig+0x114>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_Base_SetConfig+0xf8>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <TIM_Base_SetConfig+0x124>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d103      	bne.n	8006984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	615a      	str	r2, [r3, #20]
}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000
 800699c:	40000400 	.word	0x40000400
 80069a0:	40000800 	.word	0x40000800
 80069a4:	40000c00 	.word	0x40000c00
 80069a8:	40010400 	.word	0x40010400
 80069ac:	40014000 	.word	0x40014000
 80069b0:	40014400 	.word	0x40014400
 80069b4:	40014800 	.word	0x40014800
 80069b8:	40001800 	.word	0x40001800
 80069bc:	40001c00 	.word	0x40001c00
 80069c0:	40002000 	.word	0x40002000

080069c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f023 0201 	bic.w	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f023 030a 	bic.w	r3, r3, #10
 8006a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b087      	sub	sp, #28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f023 0210 	bic.w	r2, r3, #16
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	031b      	lsls	r3, r3, #12
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b085      	sub	sp, #20
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f043 0307 	orr.w	r3, r3, #7
 8006aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	609a      	str	r2, [r3, #8]
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	021a      	lsls	r2, r3, #8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	609a      	str	r2, [r3, #8]
}
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e05a      	b.n	8006bc6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a21      	ldr	r2, [pc, #132]	; (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d022      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5c:	d01d      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d018      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d013      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00e      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d009      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d004      	beq.n	8006b9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a15      	ldr	r2, [pc, #84]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d10c      	bne.n	8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ba0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40000c00 	.word	0x40000c00
 8006be4:	40010400 	.word	0x40010400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40001800 	.word	0x40001800

08006bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e03f      	b.n	8006caa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f005 f92a 	bl	800be98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2224      	movs	r2, #36	; 0x24
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 fc01 	bl	8008464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691a      	ldr	r2, [r3, #16]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	695a      	ldr	r2, [r3, #20]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b08a      	sub	sp, #40	; 0x28
 8006cb6:	af02      	add	r7, sp, #8
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	603b      	str	r3, [r7, #0]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d17c      	bne.n	8006dcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_UART_Transmit+0x2c>
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e075      	b.n	8006dce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_UART_Transmit+0x3e>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e06e      	b.n	8006dce <HAL_UART_Transmit+0x11c>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2221      	movs	r2, #33	; 0x21
 8006d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d06:	f7fa fe2d 	bl	8001964 <HAL_GetTick>
 8006d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	88fa      	ldrh	r2, [r7, #6]
 8006d10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	88fa      	ldrh	r2, [r7, #6]
 8006d16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d20:	d108      	bne.n	8006d34 <HAL_UART_Transmit+0x82>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	e003      	b.n	8006d3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d44:	e02a      	b.n	8006d9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2180      	movs	r1, #128	; 0x80
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f001 f81a 	bl	8007d8a <UART_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e036      	b.n	8006dce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10b      	bne.n	8006d7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	3302      	adds	r3, #2
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	e007      	b.n	8006d8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	781a      	ldrb	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1cf      	bne.n	8006d46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2200      	movs	r2, #0
 8006dae:	2140      	movs	r1, #64	; 0x40
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 ffea 	bl	8007d8a <UART_WaitOnFlagUntilTimeout>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e006      	b.n	8006dce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e000      	b.n	8006dce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006dcc:	2302      	movs	r3, #2
  }
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3720      	adds	r7, #32
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b08a      	sub	sp, #40	; 0x28
 8006dda:	af02      	add	r7, sp, #8
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	f040 808c 	bne.w	8006f10 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <HAL_UART_Receive+0x2e>
 8006dfe:	88fb      	ldrh	r3, [r7, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e084      	b.n	8006f12 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_UART_Receive+0x40>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e07d      	b.n	8006f12 <HAL_UART_Receive+0x13c>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2222      	movs	r2, #34	; 0x22
 8006e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e32:	f7fa fd97 	bl	8001964 <HAL_GetTick>
 8006e36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	88fa      	ldrh	r2, [r7, #6]
 8006e3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	88fa      	ldrh	r2, [r7, #6]
 8006e42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e4c:	d108      	bne.n	8006e60 <HAL_UART_Receive+0x8a>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d104      	bne.n	8006e60 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	61bb      	str	r3, [r7, #24]
 8006e5e:	e003      	b.n	8006e68 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006e70:	e043      	b.n	8006efa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2120      	movs	r1, #32
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 ff84 	bl	8007d8a <UART_WaitOnFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e042      	b.n	8006f12 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10c      	bne.n	8006eac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	3302      	adds	r3, #2
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	e01f      	b.n	8006eec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb4:	d007      	beq.n	8006ec6 <HAL_UART_Receive+0xf0>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <HAL_UART_Receive+0xfe>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	e008      	b.n	8006ee6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1b6      	bne.n	8006e72 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e000      	b.n	8006f12 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
  }
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	4613      	mov	r3, r2
 8006f26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	d130      	bne.n	8006f96 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <HAL_UART_Transmit_IT+0x26>
 8006f3a:	88fb      	ldrh	r3, [r7, #6]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e029      	b.n	8006f98 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_UART_Transmit_IT+0x38>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e022      	b.n	8006f98 <HAL_UART_Transmit_IT+0x7e>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	88fa      	ldrh	r2, [r7, #6]
 8006f64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	88fa      	ldrh	r2, [r7, #6]
 8006f6a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2221      	movs	r2, #33	; 0x21
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f90:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e000      	b.n	8006f98 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006f96:	2302      	movs	r3, #2
  }
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d11d      	bne.n	8006ffa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <HAL_UART_Receive_IT+0x26>
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e016      	b.n	8006ffc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_UART_Receive_IT+0x38>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e00f      	b.n	8006ffc <HAL_UART_Receive_IT+0x58>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	461a      	mov	r2, r3
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 ff38 	bl	8007e66 <UART_Start_Receive_IT>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	e000      	b.n	8006ffc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ffa:	2302      	movs	r3, #2
  }
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08c      	sub	sp, #48	; 0x30
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	4613      	mov	r3, r2
 8007010:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b20      	cmp	r3, #32
 800701c:	d165      	bne.n	80070ea <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <HAL_UART_Transmit_DMA+0x26>
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e05e      	b.n	80070ec <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_UART_Transmit_DMA+0x38>
 8007038:	2302      	movs	r3, #2
 800703a:	e057      	b.n	80070ec <HAL_UART_Transmit_DMA+0xe8>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	88fa      	ldrh	r2, [r7, #6]
 800704e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2221      	movs	r2, #33	; 0x21
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007068:	4a22      	ldr	r2, [pc, #136]	; (80070f4 <HAL_UART_Transmit_DMA+0xf0>)
 800706a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007070:	4a21      	ldr	r2, [pc, #132]	; (80070f8 <HAL_UART_Transmit_DMA+0xf4>)
 8007072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007078:	4a20      	ldr	r2, [pc, #128]	; (80070fc <HAL_UART_Transmit_DMA+0xf8>)
 800707a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007080:	2200      	movs	r2, #0
 8007082:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007084:	f107 0308 	add.w	r3, r7, #8
 8007088:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	6819      	ldr	r1, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3304      	adds	r3, #4
 8007098:	461a      	mov	r2, r3
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	f7fa fe2e 	bl	8001cfc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3314      	adds	r3, #20
 80070b8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	617b      	str	r3, [r7, #20]
   return(result);
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3314      	adds	r3, #20
 80070d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070d2:	627a      	str	r2, [r7, #36]	; 0x24
 80070d4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6a39      	ldr	r1, [r7, #32]
 80070d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	61fb      	str	r3, [r7, #28]
   return(result);
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e5      	bne.n	80070b2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	e000      	b.n	80070ec <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80070ea:	2302      	movs	r3, #2
  }
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3730      	adds	r7, #48	; 0x30
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	08007ae5 	.word	0x08007ae5
 80070f8:	08007b7f 	.word	0x08007b7f
 80070fc:	08007cf7 	.word	0x08007cf7

08007100 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b20      	cmp	r3, #32
 8007118:	d11d      	bne.n	8007156 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <HAL_UART_Receive_DMA+0x26>
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e016      	b.n	8007158 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007130:	2b01      	cmp	r3, #1
 8007132:	d101      	bne.n	8007138 <HAL_UART_Receive_DMA+0x38>
 8007134:	2302      	movs	r3, #2
 8007136:	e00f      	b.n	8007158 <HAL_UART_Receive_DMA+0x58>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	461a      	mov	r2, r3
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fec9 	bl	8007ee4 <UART_Start_Receive_DMA>
 8007152:	4603      	mov	r3, r0
 8007154:	e000      	b.n	8007158 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007156:	2302      	movs	r3, #2
  }
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b0a0      	sub	sp, #128	; 0x80
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	330c      	adds	r3, #12
 800716e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007172:	e853 3f00 	ldrex	r3, [r3]
 8007176:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800717a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800717e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	330c      	adds	r3, #12
 8007186:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007188:	66ba      	str	r2, [r7, #104]	; 0x68
 800718a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800718e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007190:	e841 2300 	strex	r3, r2, [r1]
 8007194:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1e5      	bne.n	8007168 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3314      	adds	r3, #20
 80071a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80071ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3314      	adds	r3, #20
 80071ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071bc:	657a      	str	r2, [r7, #84]	; 0x54
 80071be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80071c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e5      	bne.n	800719c <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d119      	bne.n	800720c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	330c      	adds	r3, #12
 80071de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ea:	f023 0310 	bic.w	r3, r3, #16
 80071ee:	677b      	str	r3, [r7, #116]	; 0x74
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	330c      	adds	r3, #12
 80071f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80071f8:	643a      	str	r2, [r7, #64]	; 0x40
 80071fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e5      	bne.n	80071d8 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b80      	cmp	r3, #128	; 0x80
 8007218:	d136      	bne.n	8007288 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3314      	adds	r3, #20
 8007220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	61fb      	str	r3, [r7, #28]
   return(result);
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007230:	673b      	str	r3, [r7, #112]	; 0x70
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3314      	adds	r3, #20
 8007238:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800723a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e5      	bne.n	800721a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	2b00      	cmp	r3, #0
 8007254:	d018      	beq.n	8007288 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	2200      	movs	r2, #0
 800725c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007262:	4618      	mov	r0, r3
 8007264:	f7fa fda2 	bl	8001dac <HAL_DMA_Abort>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00c      	beq.n	8007288 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007272:	4618      	mov	r0, r3
 8007274:	f7fa ffc4 	bl	8002200 <HAL_DMA_GetError>
 8007278:	4603      	mov	r3, r0
 800727a:	2b20      	cmp	r3, #32
 800727c:	d104      	bne.n	8007288 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2210      	movs	r2, #16
 8007282:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e052      	b.n	800732e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007292:	2b40      	cmp	r3, #64	; 0x40
 8007294:	d136      	bne.n	8007304 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3314      	adds	r3, #20
 800729c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3314      	adds	r3, #20
 80072b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80072b6:	61ba      	str	r2, [r7, #24]
 80072b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6979      	ldr	r1, [r7, #20]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	613b      	str	r3, [r7, #16]
   return(result);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e5      	bne.n	8007296 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d018      	beq.n	8007304 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	2200      	movs	r2, #0
 80072d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fa fd64 	bl	8001dac <HAL_DMA_Abort>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00c      	beq.n	8007304 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fa ff86 	bl	8002200 <HAL_DMA_GetError>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d104      	bne.n	8007304 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2210      	movs	r2, #16
 80072fe:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e014      	b.n	800732e <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3780      	adds	r7, #128	; 0x80
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b0a2      	sub	sp, #136	; 0x88
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8007340:	2301      	movs	r3, #1
 8007342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007358:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800735c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	330c      	adds	r3, #12
 8007366:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800736a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800736c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007370:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e3      	bne.n	8007346 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3314      	adds	r3, #20
 8007384:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800738e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007390:	f023 0301 	bic.w	r3, r3, #1
 8007394:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3314      	adds	r3, #20
 800739c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800739e:	65ba      	str	r2, [r7, #88]	; 0x58
 80073a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e5      	bne.n	800737e <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d119      	bne.n	80073ee <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	330c      	adds	r3, #12
 80073c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073cc:	f023 0310 	bic.w	r3, r3, #16
 80073d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	330c      	adds	r3, #12
 80073d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073da:	647a      	str	r2, [r7, #68]	; 0x44
 80073dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e5      	bne.n	80073ba <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00f      	beq.n	8007416 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007400:	2b80      	cmp	r3, #128	; 0x80
 8007402:	d104      	bne.n	800740e <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007408:	4a53      	ldr	r2, [pc, #332]	; (8007558 <HAL_UART_Abort_IT+0x220>)
 800740a:	651a      	str	r2, [r3, #80]	; 0x50
 800740c:	e003      	b.n	8007416 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	2200      	movs	r2, #0
 8007414:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00f      	beq.n	800743e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007428:	2b40      	cmp	r3, #64	; 0x40
 800742a:	d104      	bne.n	8007436 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	4a4a      	ldr	r2, [pc, #296]	; (800755c <HAL_UART_Abort_IT+0x224>)
 8007432:	651a      	str	r2, [r3, #80]	; 0x50
 8007434:	e003      	b.n	800743e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743a:	2200      	movs	r2, #0
 800743c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007448:	2b80      	cmp	r3, #128	; 0x80
 800744a:	d12d      	bne.n	80074a8 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3314      	adds	r3, #20
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	623b      	str	r3, [r7, #32]
   return(result);
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007462:	677b      	str	r3, [r7, #116]	; 0x74
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3314      	adds	r3, #20
 800746a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800746c:	633a      	str	r2, [r7, #48]	; 0x30
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e5      	bne.n	800744c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00f      	beq.n	80074a8 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748c:	4618      	mov	r0, r3
 800748e:	f7fa fcfd 	bl	8001e8c <HAL_DMA_Abort_IT>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749c:	2200      	movs	r2, #0
 800749e:	651a      	str	r2, [r3, #80]	; 0x50
 80074a0:	e002      	b.n	80074a8 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b2:	2b40      	cmp	r3, #64	; 0x40
 80074b4:	d130      	bne.n	8007518 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3314      	adds	r3, #20
 80074bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074cc:	673b      	str	r3, [r7, #112]	; 0x70
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3314      	adds	r3, #20
 80074d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80074d6:	61fa      	str	r2, [r7, #28]
 80074d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	69b9      	ldr	r1, [r7, #24]
 80074dc:	69fa      	ldr	r2, [r7, #28]
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	617b      	str	r3, [r7, #20]
   return(result);
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e5      	bne.n	80074b6 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d012      	beq.n	8007518 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fa fcc8 	bl	8001e8c <HAL_DMA_Abort_IT>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007506:	2200      	movs	r2, #0
 8007508:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 800750a:	2301      	movs	r3, #1
 800750c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007510:	e002      	b.n	8007518 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8007512:	2300      	movs	r3, #0
 8007514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8007518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800751c:	2b01      	cmp	r3, #1
 800751e:	d116      	bne.n	800754e <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fab5 	bl	8007ab8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3788      	adds	r7, #136	; 0x88
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	0800815f 	.word	0x0800815f
 800755c:	080081bf 	.word	0x080081bf

08007560 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b0ba      	sub	sp, #232	; 0xe8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	695b      	ldr	r3, [r3, #20]
 8007582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007586:	2300      	movs	r3, #0
 8007588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800758c:	2300      	movs	r3, #0
 800758e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800759e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10f      	bne.n	80075c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d009      	beq.n	80075c6 <HAL_UART_IRQHandler+0x66>
 80075b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fe95 	bl	80082ee <UART_Receive_IT>
      return;
 80075c4:	e256      	b.n	8007a74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80de 	beq.w	800778c <HAL_UART_IRQHandler+0x22c>
 80075d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 80d1 	beq.w	800778c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <HAL_UART_IRQHandler+0xae>
 80075f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f043 0201 	orr.w	r2, r3, #1
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800760e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <HAL_UART_IRQHandler+0xd2>
 800761a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d005      	beq.n	8007632 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f043 0202 	orr.w	r2, r3, #2
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <HAL_UART_IRQHandler+0xf6>
 800763e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d005      	beq.n	8007656 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f043 0204 	orr.w	r2, r3, #4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d011      	beq.n	8007686 <HAL_UART_IRQHandler+0x126>
 8007662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007666:	f003 0320 	and.w	r3, r3, #32
 800766a:	2b00      	cmp	r3, #0
 800766c:	d105      	bne.n	800767a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800766e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	f043 0208 	orr.w	r2, r3, #8
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 81ed 	beq.w	8007a6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_UART_IRQHandler+0x14e>
 800769c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fe20 	bl	80082ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b8:	2b40      	cmp	r3, #64	; 0x40
 80076ba:	bf0c      	ite	eq
 80076bc:	2301      	moveq	r3, #1
 80076be:	2300      	movne	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	f003 0308 	and.w	r3, r3, #8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <HAL_UART_IRQHandler+0x17a>
 80076d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d04f      	beq.n	800777a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fcc8 	bl	8008070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d141      	bne.n	8007772 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3314      	adds	r3, #20
 80076f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3314      	adds	r3, #20
 8007716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800771a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800771e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1d9      	bne.n	80076ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	2b00      	cmp	r3, #0
 8007740:	d013      	beq.n	800776a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	4a7d      	ldr	r2, [pc, #500]	; (800793c <HAL_UART_IRQHandler+0x3dc>)
 8007748:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774e:	4618      	mov	r0, r3
 8007750:	f7fa fb9c 	bl	8001e8c <HAL_DMA_Abort_IT>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d016      	beq.n	8007788 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007768:	e00e      	b.n	8007788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f99a 	bl	8007aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007770:	e00a      	b.n	8007788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f996 	bl	8007aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	e006      	b.n	8007788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f992 	bl	8007aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007786:	e170      	b.n	8007a6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	bf00      	nop
    return;
 800778a:	e16e      	b.n	8007a6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007790:	2b01      	cmp	r3, #1
 8007792:	f040 814a 	bne.w	8007a2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8143 	beq.w	8007a2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80077a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a8:	f003 0310 	and.w	r3, r3, #16
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 813c 	beq.w	8007a2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077b2:	2300      	movs	r3, #0
 80077b4:	60bb      	str	r3, [r7, #8]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d2:	2b40      	cmp	r3, #64	; 0x40
 80077d4:	f040 80b4 	bne.w	8007940 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 8140 	beq.w	8007a6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077f6:	429a      	cmp	r2, r3
 80077f8:	f080 8139 	bcs.w	8007a6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007802:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800780e:	f000 8088 	beq.w	8007922 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	330c      	adds	r3, #12
 8007818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800782c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800783e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007842:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800784a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1d9      	bne.n	8007812 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3314      	adds	r3, #20
 8007864:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800786e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3314      	adds	r3, #20
 800787e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007882:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007886:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800788a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e1      	bne.n	800785e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3314      	adds	r3, #20
 80078a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3314      	adds	r3, #20
 80078ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e3      	bne.n	800789a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f2:	f023 0310 	bic.w	r3, r3, #16
 80078f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	330c      	adds	r3, #12
 8007900:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007904:	65ba      	str	r2, [r7, #88]	; 0x58
 8007906:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800790a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e3      	bne.n	80078e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	4618      	mov	r0, r3
 800791e:	f7fa fa45 	bl	8001dac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800792a:	b29b      	uxth	r3, r3
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	b29b      	uxth	r3, r3
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f8ca 	bl	8007acc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007938:	e099      	b.n	8007a6e <HAL_UART_IRQHandler+0x50e>
 800793a:	bf00      	nop
 800793c:	08008137 	.word	0x08008137
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007948:	b29b      	uxth	r3, r3
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 808b 	beq.w	8007a72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800795c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8086 	beq.w	8007a72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	330c      	adds	r3, #12
 800796c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007978:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	330c      	adds	r3, #12
 8007986:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800798a:	647a      	str	r2, [r7, #68]	; 0x44
 800798c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007990:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e3      	bne.n	8007966 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3314      	adds	r3, #20
 80079a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	e853 3f00 	ldrex	r3, [r3]
 80079ac:	623b      	str	r3, [r7, #32]
   return(result);
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	f023 0301 	bic.w	r3, r3, #1
 80079b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3314      	adds	r3, #20
 80079be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079c2:	633a      	str	r2, [r7, #48]	; 0x30
 80079c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e3      	bne.n	800799e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2220      	movs	r2, #32
 80079da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	330c      	adds	r3, #12
 80079ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0310 	bic.w	r3, r3, #16
 80079fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	330c      	adds	r3, #12
 8007a04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a08:	61fa      	str	r2, [r7, #28]
 8007a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	69b9      	ldr	r1, [r7, #24]
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	617b      	str	r3, [r7, #20]
   return(result);
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e3      	bne.n	80079e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f852 	bl	8007acc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a28:	e023      	b.n	8007a72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <HAL_UART_IRQHandler+0x4ea>
 8007a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d003      	beq.n	8007a4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fbeb 	bl	800821e <UART_Transmit_IT>
    return;
 8007a48:	e014      	b.n	8007a74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00e      	beq.n	8007a74 <HAL_UART_IRQHandler+0x514>
 8007a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fc2b 	bl	80082be <UART_EndTransmit_IT>
    return;
 8007a68:	e004      	b.n	8007a74 <HAL_UART_IRQHandler+0x514>
    return;
 8007a6a:	bf00      	nop
 8007a6c:	e002      	b.n	8007a74 <HAL_UART_IRQHandler+0x514>
      return;
 8007a6e:	bf00      	nop
 8007a70:	e000      	b.n	8007a74 <HAL_UART_IRQHandler+0x514>
      return;
 8007a72:	bf00      	nop
  }
}
 8007a74:	37e8      	adds	r7, #232	; 0xe8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop

08007a7c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b090      	sub	sp, #64	; 0x40
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d137      	bne.n	8007b70 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b02:	2200      	movs	r2, #0
 8007b04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	3314      	adds	r3, #20
 8007b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	623b      	str	r3, [r7, #32]
   return(result);
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3314      	adds	r3, #20
 8007b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b26:	633a      	str	r2, [r7, #48]	; 0x30
 8007b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b2e:	e841 2300 	strex	r3, r2, [r1]
 8007b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1e5      	bne.n	8007b06 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	330c      	adds	r3, #12
 8007b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
 8007b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	330c      	adds	r3, #12
 8007b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b5a:	61fa      	str	r2, [r7, #28]
 8007b5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	69b9      	ldr	r1, [r7, #24]
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	617b      	str	r3, [r7, #20]
   return(result);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b6e:	e002      	b.n	8007b76 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007b70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007b72:	f004 f939 	bl	800bde8 <HAL_UART_TxCpltCallback>
}
 8007b76:	bf00      	nop
 8007b78:	3740      	adds	r7, #64	; 0x40
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff ff75 	bl	8007a7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b92:	bf00      	nop
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b09c      	sub	sp, #112	; 0x70
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d172      	bne.n	8007c9c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb8:	2200      	movs	r2, #0
 8007bba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	330c      	adds	r3, #12
 8007bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	330c      	adds	r3, #12
 8007bda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007be2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e5      	bne.n	8007bbc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3314      	adds	r3, #20
 8007bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c02:	f023 0301 	bic.w	r3, r3, #1
 8007c06:	667b      	str	r3, [r7, #100]	; 0x64
 8007c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3314      	adds	r3, #20
 8007c0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c10:	647a      	str	r2, [r7, #68]	; 0x44
 8007c12:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e5      	bne.n	8007bf0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3314      	adds	r3, #20
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	623b      	str	r3, [r7, #32]
   return(result);
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8007c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3314      	adds	r3, #20
 8007c42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c44:	633a      	str	r2, [r7, #48]	; 0x30
 8007c46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e5      	bne.n	8007c24 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d119      	bne.n	8007c9c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0310 	bic.w	r3, r3, #16
 8007c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	330c      	adds	r3, #12
 8007c86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c88:	61fa      	str	r2, [r7, #28]
 8007c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	69b9      	ldr	r1, [r7, #24]
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	617b      	str	r3, [r7, #20]
   return(result);
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e5      	bne.n	8007c68 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d106      	bne.n	8007cb2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007cac:	f7ff ff0e 	bl	8007acc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cb0:	e002      	b.n	8007cb8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007cb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007cb4:	f004 f8c4 	bl	800be40 <HAL_UART_RxCpltCallback>
}
 8007cb8:	bf00      	nop
 8007cba:	3770      	adds	r7, #112	; 0x70
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d108      	bne.n	8007ce8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cda:	085b      	lsrs	r3, r3, #1
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	4619      	mov	r1, r3
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff fef3 	bl	8007acc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ce6:	e002      	b.n	8007cee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f7ff fed1 	bl	8007a90 <HAL_UART_RxHalfCpltCallback>
}
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d12:	2b80      	cmp	r3, #128	; 0x80
 8007d14:	bf0c      	ite	eq
 8007d16:	2301      	moveq	r3, #1
 8007d18:	2300      	movne	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b21      	cmp	r3, #33	; 0x21
 8007d28:	d108      	bne.n	8007d3c <UART_DMAError+0x46>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2200      	movs	r2, #0
 8007d34:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007d36:	68b8      	ldr	r0, [r7, #8]
 8007d38:	f000 f972 	bl	8008020 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d46:	2b40      	cmp	r3, #64	; 0x40
 8007d48:	bf0c      	ite	eq
 8007d4a:	2301      	moveq	r3, #1
 8007d4c:	2300      	movne	r3, #0
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b22      	cmp	r3, #34	; 0x22
 8007d5c:	d108      	bne.n	8007d70 <UART_DMAError+0x7a>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2200      	movs	r2, #0
 8007d68:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007d6a:	68b8      	ldr	r0, [r7, #8]
 8007d6c:	f000 f980 	bl	8008070 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	f043 0210 	orr.w	r2, r3, #16
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d7c:	68b8      	ldr	r0, [r7, #8]
 8007d7e:	f7ff fe91 	bl	8007aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b090      	sub	sp, #64	; 0x40
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	603b      	str	r3, [r7, #0]
 8007d96:	4613      	mov	r3, r2
 8007d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d9a:	e050      	b.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da2:	d04c      	beq.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <UART_WaitOnFlagUntilTimeout+0x30>
 8007daa:	f7f9 fddb 	bl	8001964 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d241      	bcs.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	330c      	adds	r3, #12
 8007dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	330c      	adds	r3, #12
 8007dd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dda:	637a      	str	r2, [r7, #52]	; 0x34
 8007ddc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e5      	bne.n	8007dba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3314      	adds	r3, #20
 8007df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3314      	adds	r3, #20
 8007e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e0e:	623a      	str	r2, [r7, #32]
 8007e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	69f9      	ldr	r1, [r7, #28]
 8007e14:	6a3a      	ldr	r2, [r7, #32]
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e5      	bne.n	8007dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e00f      	b.n	8007e5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4013      	ands	r3, r2
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	bf0c      	ite	eq
 8007e4e:	2301      	moveq	r3, #1
 8007e50:	2300      	movne	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	461a      	mov	r2, r3
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d09f      	beq.n	8007d9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3740      	adds	r7, #64	; 0x40
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	4613      	mov	r3, r2
 8007e72:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	88fa      	ldrh	r2, [r7, #6]
 8007e7e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	88fa      	ldrh	r2, [r7, #6]
 8007e84:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2222      	movs	r2, #34	; 0x22
 8007e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d007      	beq.n	8007eb4 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eb2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695a      	ldr	r2, [r3, #20]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0220 	orr.w	r2, r2, #32
 8007ed2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
	...

08007ee4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b098      	sub	sp, #96	; 0x60
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	88fa      	ldrh	r2, [r7, #6]
 8007efc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2222      	movs	r2, #34	; 0x22
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f10:	4a40      	ldr	r2, [pc, #256]	; (8008014 <UART_Start_Receive_DMA+0x130>)
 8007f12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	4a3f      	ldr	r2, [pc, #252]	; (8008018 <UART_Start_Receive_DMA+0x134>)
 8007f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	4a3e      	ldr	r2, [pc, #248]	; (800801c <UART_Start_Receive_DMA+0x138>)
 8007f22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	2200      	movs	r2, #0
 8007f2a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007f2c:	f107 0308 	add.w	r3, r7, #8
 8007f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	f7f9 feda 	bl	8001cfc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007f48:	2300      	movs	r3, #0
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d019      	beq.n	8007fa2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	330c      	adds	r3, #12
 8007f74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f84:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	330c      	adds	r3, #12
 8007f8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007f90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007f94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e5      	bne.n	8007f6e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3314      	adds	r3, #20
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	f043 0301 	orr.w	r3, r3, #1
 8007fb8:	657b      	str	r3, [r7, #84]	; 0x54
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3314      	adds	r3, #20
 8007fc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007fc2:	63ba      	str	r2, [r7, #56]	; 0x38
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3314      	adds	r3, #20
 8007fdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fec:	653b      	str	r3, [r7, #80]	; 0x50
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3314      	adds	r3, #20
 8007ff4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ff6:	627a      	str	r2, [r7, #36]	; 0x24
 8007ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6a39      	ldr	r1, [r7, #32]
 8007ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	61fb      	str	r3, [r7, #28]
   return(result);
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e5      	bne.n	8007fd6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3760      	adds	r7, #96	; 0x60
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	08007b9b 	.word	0x08007b9b
 8008018:	08007cc1 	.word	0x08007cc1
 800801c:	08007cf7 	.word	0x08007cf7

08008020 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008020:	b480      	push	{r7}
 8008022:	b089      	sub	sp, #36	; 0x24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	330c      	adds	r3, #12
 800802e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	60bb      	str	r3, [r7, #8]
   return(result);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	330c      	adds	r3, #12
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	61ba      	str	r2, [r7, #24]
 800804a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6979      	ldr	r1, [r7, #20]
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	613b      	str	r3, [r7, #16]
   return(result);
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e5      	bne.n	8008028 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008064:	bf00      	nop
 8008066:	3724      	adds	r7, #36	; 0x24
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b095      	sub	sp, #84	; 0x54
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	330c      	adds	r3, #12
 800807e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008082:	e853 3f00 	ldrex	r3, [r3]
 8008086:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800808e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	330c      	adds	r3, #12
 8008096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008098:	643a      	str	r2, [r7, #64]	; 0x40
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800809e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080a0:	e841 2300 	strex	r3, r2, [r1]
 80080a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e5      	bne.n	8008078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3314      	adds	r3, #20
 80080b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	e853 3f00 	ldrex	r3, [r3]
 80080ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	f023 0301 	bic.w	r3, r3, #1
 80080c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3314      	adds	r3, #20
 80080ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e5      	bne.n	80080ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d119      	bne.n	800811c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	330c      	adds	r3, #12
 80080ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f023 0310 	bic.w	r3, r3, #16
 80080fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	330c      	adds	r3, #12
 8008106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008108:	61ba      	str	r2, [r7, #24]
 800810a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6979      	ldr	r1, [r7, #20]
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	613b      	str	r3, [r7, #16]
   return(result);
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e5      	bne.n	80080e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	631a      	str	r2, [r3, #48]	; 0x30
}
 800812a:	bf00      	nop
 800812c:	3754      	adds	r7, #84	; 0x54
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7ff fca7 	bl	8007aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008156:	bf00      	nop
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008170:	2200      	movs	r2, #0
 8008172:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	2b00      	cmp	r3, #0
 800817a:	d004      	beq.n	8008186 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008182:	2b00      	cmp	r3, #0
 8008184:	d117      	bne.n	80081b6 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2220      	movs	r2, #32
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f7ff fc82 	bl	8007ab8 <HAL_UART_AbortCpltCallback>
 80081b4:	e000      	b.n	80081b8 <UART_DMATxAbortCallback+0x5a>
      return;
 80081b6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ca:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d0:	2200      	movs	r2, #0
 80081d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d117      	bne.n	8008216 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2220      	movs	r2, #32
 8008204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7ff fc52 	bl	8007ab8 <HAL_UART_AbortCpltCallback>
 8008214:	e000      	b.n	8008218 <UART_DMARxAbortCallback+0x5a>
      return;
 8008216:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800821e:	b480      	push	{r7}
 8008220:	b085      	sub	sp, #20
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b21      	cmp	r3, #33	; 0x21
 8008230:	d13e      	bne.n	80082b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823a:	d114      	bne.n	8008266 <UART_Transmit_IT+0x48>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d110      	bne.n	8008266 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008258:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	1c9a      	adds	r2, r3, #2
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	621a      	str	r2, [r3, #32]
 8008264:	e008      	b.n	8008278 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	1c59      	adds	r1, r3, #1
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6211      	str	r1, [r2, #32]
 8008270:	781a      	ldrb	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800827c:	b29b      	uxth	r3, r3
 800827e:	3b01      	subs	r3, #1
 8008280:	b29b      	uxth	r3, r3
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	4619      	mov	r1, r3
 8008286:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10f      	bne.n	80082ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800829a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	e000      	b.n	80082b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082b0:	2302      	movs	r3, #2
  }
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68da      	ldr	r2, [r3, #12]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f003 fd82 	bl	800bde8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b08c      	sub	sp, #48	; 0x30
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b22      	cmp	r3, #34	; 0x22
 8008300:	f040 80ab 	bne.w	800845a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800830c:	d117      	bne.n	800833e <UART_Receive_IT+0x50>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d113      	bne.n	800833e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	b29b      	uxth	r3, r3
 8008328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832c:	b29a      	uxth	r2, r3
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008336:	1c9a      	adds	r2, r3, #2
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	629a      	str	r2, [r3, #40]	; 0x28
 800833c:	e026      	b.n	800838c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008342:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008350:	d007      	beq.n	8008362 <UART_Receive_IT+0x74>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10a      	bne.n	8008370 <UART_Receive_IT+0x82>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	b2da      	uxtb	r2, r3
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	e008      	b.n	8008382 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800837c:	b2da      	uxtb	r2, r3
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	b29b      	uxth	r3, r3
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	4619      	mov	r1, r3
 800839a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800839c:	2b00      	cmp	r3, #0
 800839e:	d15a      	bne.n	8008456 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f022 0220 	bic.w	r2, r2, #32
 80083ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	695a      	ldr	r2, [r3, #20]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0201 	bic.w	r2, r2, #1
 80083ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d135      	bne.n	800844c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	330c      	adds	r3, #12
 80083ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	613b      	str	r3, [r7, #16]
   return(result);
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f023 0310 	bic.w	r3, r3, #16
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	330c      	adds	r3, #12
 8008404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008406:	623a      	str	r2, [r7, #32]
 8008408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	69f9      	ldr	r1, [r7, #28]
 800840c:	6a3a      	ldr	r2, [r7, #32]
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	61bb      	str	r3, [r7, #24]
   return(result);
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e5      	bne.n	80083e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0310 	and.w	r3, r3, #16
 8008424:	2b10      	cmp	r3, #16
 8008426:	d10a      	bne.n	800843e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff fb41 	bl	8007acc <HAL_UARTEx_RxEventCallback>
 800844a:	e002      	b.n	8008452 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f003 fcf7 	bl	800be40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	e002      	b.n	800845c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	e000      	b.n	800845c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800845a:	2302      	movs	r3, #2
  }
}
 800845c:	4618      	mov	r0, r3
 800845e:	3730      	adds	r7, #48	; 0x30
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008468:	b0c0      	sub	sp, #256	; 0x100
 800846a:	af00      	add	r7, sp, #0
 800846c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008480:	68d9      	ldr	r1, [r3, #12]
 8008482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	ea40 0301 	orr.w	r3, r0, r1
 800848c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800848e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	431a      	orrs	r2, r3
 800849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	431a      	orrs	r2, r3
 80084a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084bc:	f021 010c 	bic.w	r1, r1, #12
 80084c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084ca:	430b      	orrs	r3, r1
 80084cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084de:	6999      	ldr	r1, [r3, #24]
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	ea40 0301 	orr.w	r3, r0, r1
 80084ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b8f      	ldr	r3, [pc, #572]	; (8008730 <UART_SetConfig+0x2cc>)
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d005      	beq.n	8008504 <UART_SetConfig+0xa0>
 80084f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4b8d      	ldr	r3, [pc, #564]	; (8008734 <UART_SetConfig+0x2d0>)
 8008500:	429a      	cmp	r2, r3
 8008502:	d104      	bne.n	800850e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008504:	f7fc fa0a 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 8008508:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800850c:	e003      	b.n	8008516 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800850e:	f7fc f9f1 	bl	80048f4 <HAL_RCC_GetPCLK1Freq>
 8008512:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008520:	f040 810c 	bne.w	800873c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008528:	2200      	movs	r2, #0
 800852a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800852e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008532:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008536:	4622      	mov	r2, r4
 8008538:	462b      	mov	r3, r5
 800853a:	1891      	adds	r1, r2, r2
 800853c:	65b9      	str	r1, [r7, #88]	; 0x58
 800853e:	415b      	adcs	r3, r3
 8008540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008542:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008546:	4621      	mov	r1, r4
 8008548:	eb12 0801 	adds.w	r8, r2, r1
 800854c:	4629      	mov	r1, r5
 800854e:	eb43 0901 	adc.w	r9, r3, r1
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800855e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008566:	4690      	mov	r8, r2
 8008568:	4699      	mov	r9, r3
 800856a:	4623      	mov	r3, r4
 800856c:	eb18 0303 	adds.w	r3, r8, r3
 8008570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008574:	462b      	mov	r3, r5
 8008576:	eb49 0303 	adc.w	r3, r9, r3
 800857a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800857e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800858a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800858e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008592:	460b      	mov	r3, r1
 8008594:	18db      	adds	r3, r3, r3
 8008596:	653b      	str	r3, [r7, #80]	; 0x50
 8008598:	4613      	mov	r3, r2
 800859a:	eb42 0303 	adc.w	r3, r2, r3
 800859e:	657b      	str	r3, [r7, #84]	; 0x54
 80085a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085a8:	f7f8 fb2e 	bl	8000c08 <__aeabi_uldivmod>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4b61      	ldr	r3, [pc, #388]	; (8008738 <UART_SetConfig+0x2d4>)
 80085b2:	fba3 2302 	umull	r2, r3, r3, r2
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	011c      	lsls	r4, r3, #4
 80085ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085be:	2200      	movs	r2, #0
 80085c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085cc:	4642      	mov	r2, r8
 80085ce:	464b      	mov	r3, r9
 80085d0:	1891      	adds	r1, r2, r2
 80085d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80085d4:	415b      	adcs	r3, r3
 80085d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085dc:	4641      	mov	r1, r8
 80085de:	eb12 0a01 	adds.w	sl, r2, r1
 80085e2:	4649      	mov	r1, r9
 80085e4:	eb43 0b01 	adc.w	fp, r3, r1
 80085e8:	f04f 0200 	mov.w	r2, #0
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80085f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80085f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80085fc:	4692      	mov	sl, r2
 80085fe:	469b      	mov	fp, r3
 8008600:	4643      	mov	r3, r8
 8008602:	eb1a 0303 	adds.w	r3, sl, r3
 8008606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800860a:	464b      	mov	r3, r9
 800860c:	eb4b 0303 	adc.w	r3, fp, r3
 8008610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008620:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008624:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008628:	460b      	mov	r3, r1
 800862a:	18db      	adds	r3, r3, r3
 800862c:	643b      	str	r3, [r7, #64]	; 0x40
 800862e:	4613      	mov	r3, r2
 8008630:	eb42 0303 	adc.w	r3, r2, r3
 8008634:	647b      	str	r3, [r7, #68]	; 0x44
 8008636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800863a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800863e:	f7f8 fae3 	bl	8000c08 <__aeabi_uldivmod>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4611      	mov	r1, r2
 8008648:	4b3b      	ldr	r3, [pc, #236]	; (8008738 <UART_SetConfig+0x2d4>)
 800864a:	fba3 2301 	umull	r2, r3, r3, r1
 800864e:	095b      	lsrs	r3, r3, #5
 8008650:	2264      	movs	r2, #100	; 0x64
 8008652:	fb02 f303 	mul.w	r3, r2, r3
 8008656:	1acb      	subs	r3, r1, r3
 8008658:	00db      	lsls	r3, r3, #3
 800865a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800865e:	4b36      	ldr	r3, [pc, #216]	; (8008738 <UART_SetConfig+0x2d4>)
 8008660:	fba3 2302 	umull	r2, r3, r3, r2
 8008664:	095b      	lsrs	r3, r3, #5
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800866c:	441c      	add	r4, r3
 800866e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008672:	2200      	movs	r2, #0
 8008674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008678:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800867c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008680:	4642      	mov	r2, r8
 8008682:	464b      	mov	r3, r9
 8008684:	1891      	adds	r1, r2, r2
 8008686:	63b9      	str	r1, [r7, #56]	; 0x38
 8008688:	415b      	adcs	r3, r3
 800868a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800868c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008690:	4641      	mov	r1, r8
 8008692:	1851      	adds	r1, r2, r1
 8008694:	6339      	str	r1, [r7, #48]	; 0x30
 8008696:	4649      	mov	r1, r9
 8008698:	414b      	adcs	r3, r1
 800869a:	637b      	str	r3, [r7, #52]	; 0x34
 800869c:	f04f 0200 	mov.w	r2, #0
 80086a0:	f04f 0300 	mov.w	r3, #0
 80086a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086a8:	4659      	mov	r1, fp
 80086aa:	00cb      	lsls	r3, r1, #3
 80086ac:	4651      	mov	r1, sl
 80086ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086b2:	4651      	mov	r1, sl
 80086b4:	00ca      	lsls	r2, r1, #3
 80086b6:	4610      	mov	r0, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	4603      	mov	r3, r0
 80086bc:	4642      	mov	r2, r8
 80086be:	189b      	adds	r3, r3, r2
 80086c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086c4:	464b      	mov	r3, r9
 80086c6:	460a      	mov	r2, r1
 80086c8:	eb42 0303 	adc.w	r3, r2, r3
 80086cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80086e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80086e4:	460b      	mov	r3, r1
 80086e6:	18db      	adds	r3, r3, r3
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ea:	4613      	mov	r3, r2
 80086ec:	eb42 0303 	adc.w	r3, r2, r3
 80086f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80086f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80086fa:	f7f8 fa85 	bl	8000c08 <__aeabi_uldivmod>
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <UART_SetConfig+0x2d4>)
 8008704:	fba3 1302 	umull	r1, r3, r3, r2
 8008708:	095b      	lsrs	r3, r3, #5
 800870a:	2164      	movs	r1, #100	; 0x64
 800870c:	fb01 f303 	mul.w	r3, r1, r3
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	3332      	adds	r3, #50	; 0x32
 8008716:	4a08      	ldr	r2, [pc, #32]	; (8008738 <UART_SetConfig+0x2d4>)
 8008718:	fba2 2303 	umull	r2, r3, r2, r3
 800871c:	095b      	lsrs	r3, r3, #5
 800871e:	f003 0207 	and.w	r2, r3, #7
 8008722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4422      	add	r2, r4
 800872a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800872c:	e106      	b.n	800893c <UART_SetConfig+0x4d8>
 800872e:	bf00      	nop
 8008730:	40011000 	.word	0x40011000
 8008734:	40011400 	.word	0x40011400
 8008738:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800873c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008740:	2200      	movs	r2, #0
 8008742:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008746:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800874a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800874e:	4642      	mov	r2, r8
 8008750:	464b      	mov	r3, r9
 8008752:	1891      	adds	r1, r2, r2
 8008754:	6239      	str	r1, [r7, #32]
 8008756:	415b      	adcs	r3, r3
 8008758:	627b      	str	r3, [r7, #36]	; 0x24
 800875a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800875e:	4641      	mov	r1, r8
 8008760:	1854      	adds	r4, r2, r1
 8008762:	4649      	mov	r1, r9
 8008764:	eb43 0501 	adc.w	r5, r3, r1
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	00eb      	lsls	r3, r5, #3
 8008772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008776:	00e2      	lsls	r2, r4, #3
 8008778:	4614      	mov	r4, r2
 800877a:	461d      	mov	r5, r3
 800877c:	4643      	mov	r3, r8
 800877e:	18e3      	adds	r3, r4, r3
 8008780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008784:	464b      	mov	r3, r9
 8008786:	eb45 0303 	adc.w	r3, r5, r3
 800878a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800878e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800879a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800879e:	f04f 0200 	mov.w	r2, #0
 80087a2:	f04f 0300 	mov.w	r3, #0
 80087a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087aa:	4629      	mov	r1, r5
 80087ac:	008b      	lsls	r3, r1, #2
 80087ae:	4621      	mov	r1, r4
 80087b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087b4:	4621      	mov	r1, r4
 80087b6:	008a      	lsls	r2, r1, #2
 80087b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087bc:	f7f8 fa24 	bl	8000c08 <__aeabi_uldivmod>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4b60      	ldr	r3, [pc, #384]	; (8008948 <UART_SetConfig+0x4e4>)
 80087c6:	fba3 2302 	umull	r2, r3, r3, r2
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	011c      	lsls	r4, r3, #4
 80087ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80087e0:	4642      	mov	r2, r8
 80087e2:	464b      	mov	r3, r9
 80087e4:	1891      	adds	r1, r2, r2
 80087e6:	61b9      	str	r1, [r7, #24]
 80087e8:	415b      	adcs	r3, r3
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087f0:	4641      	mov	r1, r8
 80087f2:	1851      	adds	r1, r2, r1
 80087f4:	6139      	str	r1, [r7, #16]
 80087f6:	4649      	mov	r1, r9
 80087f8:	414b      	adcs	r3, r1
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	f04f 0300 	mov.w	r3, #0
 8008804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008808:	4659      	mov	r1, fp
 800880a:	00cb      	lsls	r3, r1, #3
 800880c:	4651      	mov	r1, sl
 800880e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008812:	4651      	mov	r1, sl
 8008814:	00ca      	lsls	r2, r1, #3
 8008816:	4610      	mov	r0, r2
 8008818:	4619      	mov	r1, r3
 800881a:	4603      	mov	r3, r0
 800881c:	4642      	mov	r2, r8
 800881e:	189b      	adds	r3, r3, r2
 8008820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008824:	464b      	mov	r3, r9
 8008826:	460a      	mov	r2, r1
 8008828:	eb42 0303 	adc.w	r3, r2, r3
 800882c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	67bb      	str	r3, [r7, #120]	; 0x78
 800883a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008848:	4649      	mov	r1, r9
 800884a:	008b      	lsls	r3, r1, #2
 800884c:	4641      	mov	r1, r8
 800884e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008852:	4641      	mov	r1, r8
 8008854:	008a      	lsls	r2, r1, #2
 8008856:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800885a:	f7f8 f9d5 	bl	8000c08 <__aeabi_uldivmod>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4611      	mov	r1, r2
 8008864:	4b38      	ldr	r3, [pc, #224]	; (8008948 <UART_SetConfig+0x4e4>)
 8008866:	fba3 2301 	umull	r2, r3, r3, r1
 800886a:	095b      	lsrs	r3, r3, #5
 800886c:	2264      	movs	r2, #100	; 0x64
 800886e:	fb02 f303 	mul.w	r3, r2, r3
 8008872:	1acb      	subs	r3, r1, r3
 8008874:	011b      	lsls	r3, r3, #4
 8008876:	3332      	adds	r3, #50	; 0x32
 8008878:	4a33      	ldr	r2, [pc, #204]	; (8008948 <UART_SetConfig+0x4e4>)
 800887a:	fba2 2303 	umull	r2, r3, r2, r3
 800887e:	095b      	lsrs	r3, r3, #5
 8008880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008884:	441c      	add	r4, r3
 8008886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800888a:	2200      	movs	r2, #0
 800888c:	673b      	str	r3, [r7, #112]	; 0x70
 800888e:	677a      	str	r2, [r7, #116]	; 0x74
 8008890:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008894:	4642      	mov	r2, r8
 8008896:	464b      	mov	r3, r9
 8008898:	1891      	adds	r1, r2, r2
 800889a:	60b9      	str	r1, [r7, #8]
 800889c:	415b      	adcs	r3, r3
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088a4:	4641      	mov	r1, r8
 80088a6:	1851      	adds	r1, r2, r1
 80088a8:	6039      	str	r1, [r7, #0]
 80088aa:	4649      	mov	r1, r9
 80088ac:	414b      	adcs	r3, r1
 80088ae:	607b      	str	r3, [r7, #4]
 80088b0:	f04f 0200 	mov.w	r2, #0
 80088b4:	f04f 0300 	mov.w	r3, #0
 80088b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088bc:	4659      	mov	r1, fp
 80088be:	00cb      	lsls	r3, r1, #3
 80088c0:	4651      	mov	r1, sl
 80088c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088c6:	4651      	mov	r1, sl
 80088c8:	00ca      	lsls	r2, r1, #3
 80088ca:	4610      	mov	r0, r2
 80088cc:	4619      	mov	r1, r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	4642      	mov	r2, r8
 80088d2:	189b      	adds	r3, r3, r2
 80088d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80088d6:	464b      	mov	r3, r9
 80088d8:	460a      	mov	r2, r1
 80088da:	eb42 0303 	adc.w	r3, r2, r3
 80088de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	663b      	str	r3, [r7, #96]	; 0x60
 80088ea:	667a      	str	r2, [r7, #100]	; 0x64
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80088f8:	4649      	mov	r1, r9
 80088fa:	008b      	lsls	r3, r1, #2
 80088fc:	4641      	mov	r1, r8
 80088fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008902:	4641      	mov	r1, r8
 8008904:	008a      	lsls	r2, r1, #2
 8008906:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800890a:	f7f8 f97d 	bl	8000c08 <__aeabi_uldivmod>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4b0d      	ldr	r3, [pc, #52]	; (8008948 <UART_SetConfig+0x4e4>)
 8008914:	fba3 1302 	umull	r1, r3, r3, r2
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	2164      	movs	r1, #100	; 0x64
 800891c:	fb01 f303 	mul.w	r3, r1, r3
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	3332      	adds	r3, #50	; 0x32
 8008926:	4a08      	ldr	r2, [pc, #32]	; (8008948 <UART_SetConfig+0x4e4>)
 8008928:	fba2 2303 	umull	r2, r3, r2, r3
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	f003 020f 	and.w	r2, r3, #15
 8008932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4422      	add	r2, r4
 800893a:	609a      	str	r2, [r3, #8]
}
 800893c:	bf00      	nop
 800893e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008942:	46bd      	mov	sp, r7
 8008944:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008948:	51eb851f 	.word	0x51eb851f

0800894c <drv_25lc640Init>:

/*
 * Function: drv_25lc640Init
 */
gos_result_t drv_25lc640Init (void_t* pDevice)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 8008954:	2355      	movs	r3, #85	; 0x55
 8008956:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 8008958:	2300      	movs	r3, #0
 800895a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d103      	bne.n	800896a <drv_25lc640Init+0x1e>
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f043 0301 	orr.w	r3, r3, #1
 8008968:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex), ((drv_25lc640Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_25LC640_MUTEX_INIT);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10d      	bne.n	800898e <drv_25lc640Init+0x42>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3302      	adds	r3, #2
 8008976:	4618      	mov	r0, r3
 8008978:	f009 fc8c 	bl	8012294 <gos_mutexInit>
 800897c:	4603      	mov	r3, r0
 800897e:	2b55      	cmp	r3, #85	; 0x55
 8008980:	d005      	beq.n	800898e <drv_25lc640Init+0x42>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	f043 0208 	orr.w	r2, r3, #8
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d102      	bne.n	800899a <drv_25lc640Init+0x4e>
 8008994:	2355      	movs	r3, #85	; 0x55
 8008996:	73fb      	strb	r3, [r7, #15]
 8008998:	e001      	b.n	800899e <drv_25lc640Init+0x52>
 800899a:	23ae      	movs	r3, #174	; 0xae
 800899c:	73fb      	strb	r3, [r7, #15]

    return initResult;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <drv_25lc640Read>:

/*
 * Function: drv_25lc640Read
 */
GOS_INLINE gos_result_t drv_25lc640Read (void_t* pDevice, u16_t address, u8_t* pTarget, u16_t size)
{
 80089a8:	b590      	push	{r4, r7, lr}
 80089aa:	b08f      	sub	sp, #60	; 0x3c
 80089ac:	af02      	add	r7, sp, #8
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	607a      	str	r2, [r7, #4]
 80089b2:	461a      	mov	r2, r3
 80089b4:	460b      	mov	r3, r1
 80089b6:	817b      	strh	r3, [r7, #10]
 80089b8:	4613      	mov	r3, r2
 80089ba:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t readResult    = GOS_SUCCESS;
 80089bc:	2355      	movs	r3, #85	; 0x55
 80089be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    u16_t        startPage     = 0u;
 80089c2:	2300      	movs	r3, #0
 80089c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    u16_t        endPage       = 0u;
 80089c6:	2300      	movs	r3, #0
 80089c8:	83fb      	strh	r3, [r7, #30]
    u16_t        numofpages    = 0u;
 80089ca:	2300      	movs	r3, #0
 80089cc:	83bb      	strh	r3, [r7, #28]
    u16_t        idx           = 0u;
 80089ce:	2300      	movs	r3, #0
 80089d0:	857b      	strh	r3, [r7, #42]	; 0x2a
    u16_t        pos           = 0u;
 80089d2:	2300      	movs	r3, #0
 80089d4:	853b      	strh	r3, [r7, #40]	; 0x28
    u16_t        offset        = 0u;
 80089d6:	2300      	movs	r3, #0
 80089d8:	84fb      	strh	r3, [r7, #38]	; 0x26
    u16_t        memAddress    = 0u;
 80089da:	2300      	movs	r3, #0
 80089dc:	837b      	strh	r3, [r7, #26]
    u16_t        bytesRem      = 0u;
 80089de:	2300      	movs	r3, #0
 80089e0:	833b      	strh	r3, [r7, #24]
    s32_t        paddrposition = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	617b      	str	r3, [r7, #20]
    u32_t        errorFlags    = 0u;
 80089e6:	2300      	movs	r3, #0
 80089e8:	623b      	str	r3, [r7, #32]
    u8_t         txBuffer[3];

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d103      	bne.n	80089f8 <drv_25lc640Read+0x50>
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	f043 0301 	orr.w	r3, r3, #1
 80089f6:	623b      	str	r3, [r7, #32]
    DRV_ERROR_CHK_NULL_PTR(pTarget, errorFlags, DRV_ERROR_25LC640_TARGET_NULL);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d103      	bne.n	8008a06 <drv_25lc640Read+0x5e>
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	f043 0302 	orr.w	r3, r3, #2
 8008a04:	623b      	str	r3, [r7, #32]

    if ((errorFlags == 0u) && (address + size) < TOTAL_SIZE)
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f040 80cc 	bne.w	8008ba6 <drv_25lc640Read+0x1fe>
 8008a0e:	897a      	ldrh	r2, [r7, #10]
 8008a10:	893b      	ldrh	r3, [r7, #8]
 8008a12:	4413      	add	r3, r2
 8008a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a18:	f080 80c5 	bcs.w	8008ba6 <drv_25lc640Read+0x1fe>
    {
        DRV_ERROR_CHK_SET(
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10e      	bne.n	8008a40 <drv_25lc640Read+0x98>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	1c9a      	adds	r2, r3, #2
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f009 fc4b 	bl	80122c8 <gos_mutexLock>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b55      	cmp	r3, #85	; 0x55
 8008a36:	d003      	beq.n	8008a40 <drv_25lc640Read+0x98>
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	f043 0310 	orr.w	r3, r3, #16
 8008a3e:	623b      	str	r3, [r7, #32]
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->readMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d103      	bne.n	8008a4e <drv_25lc640Read+0xa6>
 8008a46:	2355      	movs	r3, #85	; 0x55
 8008a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008a4c:	e002      	b.n	8008a54 <drv_25lc640Read+0xac>
 8008a4e:	23ae      	movs	r3, #174	; 0xae
 8008a50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        paddrposition = log(PAGE_SIZE)/log(2);
 8008a54:	2305      	movs	r3, #5
 8008a56:	617b      	str	r3, [r7, #20]
        startPage     = address / PAGE_SIZE;
 8008a58:	897b      	ldrh	r3, [r7, #10]
 8008a5a:	095b      	lsrs	r3, r3, #5
 8008a5c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        endPage       = ((size+address)/PAGE_SIZE);
 8008a5e:	893a      	ldrh	r2, [r7, #8]
 8008a60:	897b      	ldrh	r3, [r7, #10]
 8008a62:	4413      	add	r3, r2
 8008a64:	095b      	lsrs	r3, r3, #5
 8008a66:	83fb      	strh	r3, [r7, #30]
        numofpages    = (endPage-startPage) + 1;
 8008a68:	8bfa      	ldrh	r2, [r7, #30]
 8008a6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	3301      	adds	r3, #1
 8008a72:	83bb      	strh	r3, [r7, #28]
        pos           = 0u;
 8008a74:	2300      	movs	r3, #0
 8008a76:	853b      	strh	r3, [r7, #40]	; 0x28
        offset        = address % PAGE_SIZE;
 8008a78:	897b      	ldrh	r3, [r7, #10]
 8008a7a:	f003 031f 	and.w	r3, r3, #31
 8008a7e:	84fb      	strh	r3, [r7, #38]	; 0x26

        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 8008a80:	2300      	movs	r3, #0
 8008a82:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008a84:	e081      	b.n	8008b8a <drv_25lc640Read+0x1e2>
        {
            memAddress = startPage << paddrposition | offset;
 8008a86:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8e:	b21a      	sxth	r2, r3
 8008a90:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008a94:	4313      	orrs	r3, r2
 8008a96:	b21b      	sxth	r3, r3
 8008a98:	837b      	strh	r3, [r7, #26]
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 8008a9a:	893a      	ldrh	r2, [r7, #8]
 8008a9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a9e:	4413      	add	r3, r2
 8008aa0:	2b1f      	cmp	r3, #31
 8008aa2:	d904      	bls.n	8008aae <drv_25lc640Read+0x106>
 8008aa4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008aa6:	f1c3 0320 	rsb	r3, r3, #32
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	e000      	b.n	8008ab0 <drv_25lc640Read+0x108>
 8008aae:	893b      	ldrh	r3, [r7, #8]
 8008ab0:	833b      	strh	r3, [r7, #24]
            txBuffer[0] = 0x03;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	743b      	strb	r3, [r7, #16]
            txBuffer[1] = (u8_t)(memAddress >> 8);
 8008ab6:	8b7b      	ldrh	r3, [r7, #26]
 8008ab8:	0a1b      	lsrs	r3, r3, #8
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	747b      	strb	r3, [r7, #17]
            txBuffer[2] = (u8_t)(memAddress & 0xFF);
 8008ac0:	8b7b      	ldrh	r3, [r7, #26]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	74bb      	strb	r3, [r7, #18]

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	785b      	ldrb	r3, [r3, #1]
 8008aca:	2100      	movs	r1, #0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 ffcf 	bl	8009a70 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d113      	bne.n	8008b00 <drv_25lc640Read+0x158>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	7818      	ldrb	r0, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f107 0110 	add.w	r1, r7, #16
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	4613      	mov	r3, r2
 8008aec:	2203      	movs	r2, #3
 8008aee:	f001 fde1 	bl	800a6b4 <drv_spiTransmitIT>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b55      	cmp	r3, #85	; 0x55
 8008af6:	d003      	beq.n	8008b00 <drv_25lc640Read+0x158>
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	f043 0320 	orr.w	r3, r3, #32
 8008afe:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d103      	bne.n	8008b0e <drv_25lc640Read+0x166>
 8008b06:	2355      	movs	r3, #85	; 0x55
 8008b08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b0c:	e002      	b.n	8008b14 <drv_25lc640Read+0x16c>
 8008b0e:	23ae      	movs	r3, #174	; 0xae
 8008b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            DRV_ERROR_CHK_SET(
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d114      	bne.n	8008b44 <drv_25lc640Read+0x19c>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	7818      	ldrb	r0, [r3, #0]
 8008b1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	18d1      	adds	r1, r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	689c      	ldr	r4, [r3, #8]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	8b3a      	ldrh	r2, [r7, #24]
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	4623      	mov	r3, r4
 8008b32:	f001 fe23 	bl	800a77c <drv_spiReceiveIT>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b55      	cmp	r3, #85	; 0x55
 8008b3a:	d003      	beq.n	8008b44 <drv_25lc640Read+0x19c>
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	f043 0320 	orr.w	r3, r3, #32
 8008b42:	623b      	str	r3, [r7, #32]
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_READ
                    );
            DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <drv_25lc640Read+0x1aa>
 8008b4a:	2355      	movs	r3, #85	; 0x55
 8008b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b50:	e002      	b.n	8008b58 <drv_25lc640Read+0x1b0>
 8008b52:	23ae      	movs	r3, #174	; 0xae
 8008b54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	785b      	ldrb	r3, [r3, #1]
 8008b5c:	2101      	movs	r1, #1
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 ff86 	bl	8009a70 <drv_gpioWritePin>

            (void_t) gos_taskSleep(10);
 8008b64:	200a      	movs	r0, #10
 8008b66:	f006 ff85 	bl	800fa74 <gos_taskSleep>

            startPage += 1;
 8008b6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
            offset    =  0u;
 8008b70:	2300      	movs	r3, #0
 8008b72:	84fb      	strh	r3, [r7, #38]	; 0x26
            size      =  size - bytesRem;
 8008b74:	893a      	ldrh	r2, [r7, #8]
 8008b76:	8b3b      	ldrh	r3, [r7, #24]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 8008b7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b7e:	8b3b      	ldrh	r3, [r7, #24]
 8008b80:	4413      	add	r3, r2
 8008b82:	853b      	strh	r3, [r7, #40]	; 0x28
        for (idx = 0u; idx < numofpages && readResult == GOS_SUCCESS; idx++)
 8008b84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008b86:	3301      	adds	r3, #1
 8008b88:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008b8a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8008b8c:	8bbb      	ldrh	r3, [r7, #28]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d204      	bcs.n	8008b9c <drv_25lc640Read+0x1f4>
 8008b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b96:	2b55      	cmp	r3, #85	; 0x55
 8008b98:	f43f af75 	beq.w	8008a86 <drv_25lc640Read+0xde>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3302      	adds	r3, #2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f009 fc97 	bl	80124d4 <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	699a      	ldr	r2, [r3, #24]
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	431a      	orrs	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(readResult, errorFlags);
 8008bb2:	6a3b      	ldr	r3, [r7, #32]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <drv_25lc640Read+0x218>
 8008bb8:	2355      	movs	r3, #85	; 0x55
 8008bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008bbe:	e002      	b.n	8008bc6 <drv_25lc640Read+0x21e>
 8008bc0:	23ae      	movs	r3, #174	; 0xae
 8008bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    return readResult;
 8008bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3734      	adds	r7, #52	; 0x34
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd90      	pop	{r4, r7, pc}

08008bd2 <drv_25lc640Write>:

/*
 * Function: drv_25lc640Write
 */
GOS_INLINE gos_result_t drv_25lc640Write (void_t* pDevice, u16_t address, u8_t* pData, u16_t size)
{
 8008bd2:	b590      	push	{r4, r7, lr}
 8008bd4:	b097      	sub	sp, #92	; 0x5c
 8008bd6:	af02      	add	r7, sp, #8
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	460b      	mov	r3, r1
 8008be0:	817b      	strh	r3, [r7, #10]
 8008be2:	4613      	mov	r3, r2
 8008be4:	813b      	strh	r3, [r7, #8]
    /*
     * Local variables.
     */
    gos_result_t writeResult     = GOS_SUCCESS;
 8008be6:	2355      	movs	r3, #85	; 0x55
 8008be8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    u16_t        startPage       = 0u;
 8008bec:	2300      	movs	r3, #0
 8008bee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    u16_t        endPage         = 0u;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    u16_t        numofpages      = 0u;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    u16_t        idx             = 0u;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    u16_t        pos             = 0u;
 8008c00:	2300      	movs	r3, #0
 8008c02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    u16_t        offset          = 0u;
 8008c06:	2300      	movs	r3, #0
 8008c08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    u16_t        memAddress      = 0u;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	877b      	strh	r3, [r7, #58]	; 0x3a
    u16_t        bytesRem        = 0u;
 8008c10:	2300      	movs	r3, #0
 8008c12:	873b      	strh	r3, [r7, #56]	; 0x38
    s32_t        paddrposition   = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	637b      	str	r3, [r7, #52]	; 0x34
    u32_t        errorFlags      = 0u;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	643b      	str	r3, [r7, #64]	; 0x40
    u8_t         wrenInstruction = 0x06;
 8008c1c:	2306      	movs	r3, #6
 8008c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    u8_t         txBuffer [PAGE_SIZE + 3];

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_25LC640_DEVICE_NULL);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d103      	bne.n	8008c30 <drv_25lc640Write+0x5e>
 8008c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2a:	f043 0301 	orr.w	r3, r3, #1
 8008c2e:	643b      	str	r3, [r7, #64]	; 0x40
    DRV_ERROR_CHK_NULL_PTR(pData, errorFlags, DRV_ERROR_25LC640_DATA_NULL);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d103      	bne.n	8008c3e <drv_25lc640Write+0x6c>
 8008c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c38:	f043 0304 	orr.w	r3, r3, #4
 8008c3c:	643b      	str	r3, [r7, #64]	; 0x40

    if ((errorFlags == 0u) && ((address + size) < TOTAL_SIZE))
 8008c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f040 80f4 	bne.w	8008e2e <drv_25lc640Write+0x25c>
 8008c46:	897a      	ldrh	r2, [r7, #10]
 8008c48:	893b      	ldrh	r3, [r7, #8]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c50:	f080 80ed 	bcs.w	8008e2e <drv_25lc640Write+0x25c>
    {
        DRV_ERROR_CHK_SET(
 8008c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d10e      	bne.n	8008c78 <drv_25lc640Write+0xa6>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	1c9a      	adds	r2, r3, #2
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	4619      	mov	r1, r3
 8008c64:	4610      	mov	r0, r2
 8008c66:	f009 fb2f 	bl	80122c8 <gos_mutexLock>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b55      	cmp	r3, #85	; 0x55
 8008c6e:	d003      	beq.n	8008c78 <drv_25lc640Write+0xa6>
 8008c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c72:	f043 0310 	orr.w	r3, r3, #16
 8008c76:	643b      	str	r3, [r7, #64]	; 0x40
                gos_mutexLock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex, ((drv_25lc640Descriptor_t*)pDevice)->writeMutexTmo),
                errorFlags,
                DRV_ERROR_25LC640_MUTEX_LOCK
                );
        DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8008c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <drv_25lc640Write+0xb4>
 8008c7e:	2355      	movs	r3, #85	; 0x55
 8008c80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008c84:	e002      	b.n	8008c8c <drv_25lc640Write+0xba>
 8008c86:	23ae      	movs	r3, #174	; 0xae
 8008c88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        paddrposition = log(PAGE_SIZE)/log(2);
 8008c8c:	2305      	movs	r3, #5
 8008c8e:	637b      	str	r3, [r7, #52]	; 0x34
        startPage     = address / PAGE_SIZE;
 8008c90:	897b      	ldrh	r3, [r7, #10]
 8008c92:	095b      	lsrs	r3, r3, #5
 8008c94:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
        endPage       = ((size+address)/PAGE_SIZE);
 8008c98:	893a      	ldrh	r2, [r7, #8]
 8008c9a:	897b      	ldrh	r3, [r7, #10]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	095b      	lsrs	r3, r3, #5
 8008ca0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        numofpages    = (endPage-startPage) + 1;
 8008ca2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8008ca4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	3301      	adds	r3, #1
 8008cae:	87bb      	strh	r3, [r7, #60]	; 0x3c
        pos           = 0u;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        offset        = address % PAGE_SIZE;
 8008cb6:	897b      	ldrh	r3, [r7, #10]
 8008cb8:	f003 031f 	and.w	r3, r3, #31
 8008cbc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008cc6:	e0a3      	b.n	8008e10 <drv_25lc640Write+0x23e>
        {
            memAddress = startPage << paddrposition | offset;
 8008cc8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	b21a      	sxth	r2, r3
 8008cd4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	b21b      	sxth	r3, r3
 8008cdc:	877b      	strh	r3, [r7, #58]	; 0x3a
            bytesRem   = ((size + offset) < PAGE_SIZE) ? size : (PAGE_SIZE - offset);
 8008cde:	893a      	ldrh	r2, [r7, #8]
 8008ce0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008ce4:	4413      	add	r3, r2
 8008ce6:	2b1f      	cmp	r3, #31
 8008ce8:	d905      	bls.n	8008cf6 <drv_25lc640Write+0x124>
 8008cea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008cee:	f1c3 0320 	rsb	r3, r3, #32
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	e000      	b.n	8008cf8 <drv_25lc640Write+0x126>
 8008cf6:	893b      	ldrh	r3, [r7, #8]
 8008cf8:	873b      	strh	r3, [r7, #56]	; 0x38

            txBuffer[0] = 0x02;
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	743b      	strb	r3, [r7, #16]
            txBuffer[1] = (memAddress >> 8);
 8008cfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008d00:	0a1b      	lsrs	r3, r3, #8
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	747b      	strb	r3, [r7, #17]
            txBuffer[2] = memAddress & 0xFF;
 8008d08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	74bb      	strb	r3, [r7, #18]

            (void_t) memcpy(txBuffer + 3, &pData[pos], bytesRem);
 8008d0e:	f107 0310 	add.w	r3, r7, #16
 8008d12:	3303      	adds	r3, #3
 8008d14:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8008d18:	6879      	ldr	r1, [r7, #4]
 8008d1a:	4411      	add	r1, r2
 8008d1c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f00d f89f 	bl	8015e62 <memcpy>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 fea0 	bl	8009a70 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 8008d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d113      	bne.n	8008d5e <drv_25lc640Write+0x18c>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	7818      	ldrb	r0, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	f107 0133 	add.w	r1, r7, #51	; 0x33
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f001 fcb2 	bl	800a6b4 <drv_spiTransmitIT>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b55      	cmp	r3, #85	; 0x55
 8008d54:	d003      	beq.n	8008d5e <drv_25lc640Write+0x18c>
 8008d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d5c:	643b      	str	r3, [r7, #64]	; 0x40
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8008d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d103      	bne.n	8008d6c <drv_25lc640Write+0x19a>
 8008d64:	2355      	movs	r3, #85	; 0x55
 8008d66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008d6a:	e002      	b.n	8008d72 <drv_25lc640Write+0x1a0>
 8008d6c:	23ae      	movs	r3, #174	; 0xae
 8008d6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	785b      	ldrb	r3, [r3, #1]
 8008d76:	2101      	movs	r1, #1
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fe79 	bl	8009a70 <drv_gpioWritePin>
            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	785b      	ldrb	r3, [r3, #1]
 8008d82:	2100      	movs	r1, #0
 8008d84:	4618      	mov	r0, r3
 8008d86:	f000 fe73 	bl	8009a70 <drv_gpioWritePin>

            DRV_ERROR_CHK_SET(
 8008d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d115      	bne.n	8008dbc <drv_25lc640Write+0x1ea>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	7818      	ldrb	r0, [r3, #0]
 8008d94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d96:	3303      	adds	r3, #3
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	689c      	ldr	r4, [r3, #8]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f107 0110 	add.w	r1, r7, #16
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	4623      	mov	r3, r4
 8008daa:	f001 fc83 	bl	800a6b4 <drv_spiTransmitIT>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b55      	cmp	r3, #85	; 0x55
 8008db2:	d003      	beq.n	8008dbc <drv_25lc640Write+0x1ea>
 8008db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dba:	643b      	str	r3, [r7, #64]	; 0x40
        					((drv_25lc640Descriptor_t*)pDevice)->readTriggerTmo
        					),
                    errorFlags,
                    DRV_ERROR_25LC640_WRITE
                    );
            DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8008dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d103      	bne.n	8008dca <drv_25lc640Write+0x1f8>
 8008dc2:	2355      	movs	r3, #85	; 0x55
 8008dc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008dc8:	e002      	b.n	8008dd0 <drv_25lc640Write+0x1fe>
 8008dca:	23ae      	movs	r3, #174	; 0xae
 8008dcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            (void_t) drv_gpioWritePin(((drv_25lc640Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	785b      	ldrb	r3, [r3, #1]
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 fe4a 	bl	8009a70 <drv_gpioWritePin>

            startPage += 1;
 8008ddc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008de0:	3301      	adds	r3, #1
 8008de2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            offset    =  0u;
 8008de6:	2300      	movs	r3, #0
 8008de8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            size      =  size - bytesRem;
 8008dec:	893a      	ldrh	r2, [r7, #8]
 8008dee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	813b      	strh	r3, [r7, #8]
            pos       += bytesRem;
 8008df4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8008df8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

            (void_t) gos_taskSleep(5);
 8008e00:	2005      	movs	r0, #5
 8008e02:	f006 fe37 	bl	800fa74 <gos_taskSleep>
        for (idx = 0u; idx < numofpages && writeResult == GOS_SUCCESS; idx++)
 8008e06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008e10:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8008e14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d204      	bcs.n	8008e24 <drv_25lc640Write+0x252>
 8008e1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008e1e:	2b55      	cmp	r3, #85	; 0x55
 8008e20:	f43f af52 	beq.w	8008cc8 <drv_25lc640Write+0xf6>
        }

        (void_t) gos_mutexUnlock(&((drv_25lc640Descriptor_t*)pDevice)->deviceMutex);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3302      	adds	r3, #2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f009 fb53 	bl	80124d4 <gos_mutexUnlock>
    else
    {
        // Initial check failed.
    }

    DRV_ERROR_SET(((drv_25lc640Descriptor_t*)pDevice)->errorFlags, errorFlags);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	699a      	ldr	r2, [r3, #24]
 8008e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e34:	431a      	orrs	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(writeResult, errorFlags);
 8008e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d103      	bne.n	8008e48 <drv_25lc640Write+0x276>
 8008e40:	2355      	movs	r3, #85	; 0x55
 8008e42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008e46:	e002      	b.n	8008e4e <drv_25lc640Write+0x27c>
 8008e48:	23ae      	movs	r3, #174	; 0xae
 8008e4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    return writeResult;
 8008e4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3754      	adds	r7, #84	; 0x54
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd90      	pop	{r4, r7, pc}
	...

08008e5c <drv_crcGetCrc32>:

/*
 * Function: drv_crcGetCrc32
 */
gos_result_t drv_crcGetCrc32 (u8_t* pData, u32_t dataSize, u32_t* pCrc)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b089      	sub	sp, #36	; 0x24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t crcGetResult = GOS_ERROR;
 8008e68:	23ae      	movs	r3, #174	; 0xae
 8008e6a:	77fb      	strb	r3, [r7, #31]
    u32_t        index        = 0u;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	61bb      	str	r3, [r7, #24]
    u8_t         bitCounter   = 0u;
 8008e70:	2300      	movs	r3, #0
 8008e72:	75fb      	strb	r3, [r7, #23]
    u32_t        crcValue     = DRV_CRC_INIT_VALUE_CRC32;
 8008e74:	f04f 33ff 	mov.w	r3, #4294967295
 8008e78:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && pCrc != NULL)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d030      	beq.n	8008ee2 <drv_crcGetCrc32+0x86>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d02d      	beq.n	8008ee2 <drv_crcGetCrc32+0x86>
    {
        for (index = 0u; index < dataSize; index++)
 8008e86:	2300      	movs	r3, #0
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	e021      	b.n	8008ed0 <drv_crcGetCrc32+0x74>
        {
            crcValue ^= pData[index];
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	4413      	add	r3, r2
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	461a      	mov	r2, r3
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	4053      	eors	r3, r2
 8008e9a:	613b      	str	r3, [r7, #16]

            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	75fb      	strb	r3, [r7, #23]
 8008ea0:	e010      	b.n	8008ec4 <drv_crcGetCrc32+0x68>
            {
                if (0 != (DRV_CRC_MASK_CRC32 & crcValue))
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	da07      	bge.n	8008eb8 <drv_crcGetCrc32+0x5c>
                {
                    crcValue <<= 1u;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	613b      	str	r3, [r7, #16]
                    crcValue ^= DRV_CRC_POLYNOMIAL_CRC32;
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	4b0f      	ldr	r3, [pc, #60]	; (8008ef0 <drv_crcGetCrc32+0x94>)
 8008eb2:	4053      	eors	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
 8008eb6:	e002      	b.n	8008ebe <drv_crcGetCrc32+0x62>
                }
                else
                {
                    crcValue <<= 1u;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	613b      	str	r3, [r7, #16]
            for (bitCounter = 0; bitCounter < 32u; bitCounter++)
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	75fb      	strb	r3, [r7, #23]
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	2b1f      	cmp	r3, #31
 8008ec8:	d9eb      	bls.n	8008ea2 <drv_crcGetCrc32+0x46>
        for (index = 0u; index < dataSize; index++)
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d3d9      	bcc.n	8008e8c <drv_crcGetCrc32+0x30>
                }
            }
        }

        *pCrc = crcValue;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	601a      	str	r2, [r3, #0]
        crcGetResult = GOS_SUCCESS;
 8008ede:	2355      	movs	r3, #85	; 0x55
 8008ee0:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Error.
    }

    return crcGetResult;
 8008ee2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3724      	adds	r7, #36	; 0x24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	04c11db7 	.word	0x04c11db7

08008ef4 <drv_crcCheckCrc32>:

/*
 * Function: drv_crcCheckCrc32
 */
drv_crcCheckResult_t drv_crcCheckCrc32 (u8_t* pData, u32_t dataSize, u32_t expCrc, u32_t* calcCrc)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
    /*
     * Local variables.
     */
    drv_crcCheckResult_t crcCheckResult = DRV_CRC_CHECK_ERROR;
 8008f02:	239c      	movs	r3, #156	; 0x9c
 8008f04:	75fb      	strb	r3, [r7, #23]
    u32_t                crcTempValue   = 0u;
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]

    /*
     * Function code.
     */
    if (pData != NULL && drv_crcGetCrc32(pData, dataSize, &crcTempValue) == GOS_SUCCESS)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d015      	beq.n	8008f3c <drv_crcCheckCrc32+0x48>
 8008f10:	f107 0310 	add.w	r3, r7, #16
 8008f14:	461a      	mov	r2, r3
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f7ff ff9f 	bl	8008e5c <drv_crcGetCrc32>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b55      	cmp	r3, #85	; 0x55
 8008f22:	d10b      	bne.n	8008f3c <drv_crcCheckCrc32+0x48>
    {
        // Check if CRCs match.
        if (crcTempValue == expCrc)
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d101      	bne.n	8008f30 <drv_crcCheckCrc32+0x3c>
        {
            crcCheckResult = DRV_CRC_CHECK_OK;
 8008f2c:	23ca      	movs	r3, #202	; 0xca
 8008f2e:	75fb      	strb	r3, [r7, #23]
        {
            // CRC mismatch.
        }

        // Return calculated CRC value.
        if (calcCrc != NULL)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <drv_crcCheckCrc32+0x48>
        {
            *calcCrc = crcTempValue;
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	601a      	str	r2, [r3, #0]
    else
    {
        // Error.
    }

    return crcCheckResult;
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
	...

08008f48 <drv_dmaInit>:

/*
 * Function: drv_dmaInit
 */
gos_result_t drv_dmaInit (void_t)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t dmaInitResult = GOS_SUCCESS;
 8008f4e:	2355      	movs	r3, #85	; 0x55
 8008f50:	71fb      	strb	r3, [r7, #7]
    u8_t         idx           = 0u;
 8008f52:	2300      	movs	r3, #0
 8008f54:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 8008f56:	2300      	movs	r3, #0
 8008f58:	71bb      	strb	r3, [r7, #6]
 8008f5a:	e0c9      	b.n	80090f0 <drv_dmaInit+0x1a8>
    {
        dmaConfig[idx].hdma.Instance                 = dmaStreamLut[dmaConfig[idx].dmaStream];
 8008f5c:	79ba      	ldrb	r2, [r7, #6]
 8008f5e:	496c      	ldr	r1, [pc, #432]	; (8009110 <drv_dmaInit+0x1c8>)
 8008f60:	4613      	mov	r3, r2
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	4413      	add	r3, r2
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	440b      	add	r3, r1
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	79ba      	ldrb	r2, [r7, #6]
 8008f70:	4b68      	ldr	r3, [pc, #416]	; (8009114 <drv_dmaInit+0x1cc>)
 8008f72:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8008f76:	4866      	ldr	r0, [pc, #408]	; (8009110 <drv_dmaInit+0x1c8>)
 8008f78:	4613      	mov	r3, r2
 8008f7a:	011b      	lsls	r3, r3, #4
 8008f7c:	4413      	add	r3, r2
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	4403      	add	r3, r0
 8008f82:	3304      	adds	r3, #4
 8008f84:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Channel             = dmaConfig[idx].channel;
 8008f86:	79b9      	ldrb	r1, [r7, #6]
 8008f88:	79ba      	ldrb	r2, [r7, #6]
 8008f8a:	4861      	ldr	r0, [pc, #388]	; (8009110 <drv_dmaInit+0x1c8>)
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	011b      	lsls	r3, r3, #4
 8008f90:	440b      	add	r3, r1
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	4403      	add	r3, r0
 8008f96:	3364      	adds	r3, #100	; 0x64
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	485d      	ldr	r0, [pc, #372]	; (8009110 <drv_dmaInit+0x1c8>)
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	011b      	lsls	r3, r3, #4
 8008fa0:	4413      	add	r3, r2
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	4403      	add	r3, r0
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Direction           = dmaConfig[idx].direction;
 8008faa:	79b9      	ldrb	r1, [r7, #6]
 8008fac:	79ba      	ldrb	r2, [r7, #6]
 8008fae:	4858      	ldr	r0, [pc, #352]	; (8009110 <drv_dmaInit+0x1c8>)
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	440b      	add	r3, r1
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	4403      	add	r3, r0
 8008fba:	3368      	adds	r3, #104	; 0x68
 8008fbc:	6819      	ldr	r1, [r3, #0]
 8008fbe:	4854      	ldr	r0, [pc, #336]	; (8009110 <drv_dmaInit+0x1c8>)
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	4413      	add	r3, r2
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	4403      	add	r3, r0
 8008fca:	330c      	adds	r3, #12
 8008fcc:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphInc           = dmaConfig[idx].periphInc;
 8008fce:	79b9      	ldrb	r1, [r7, #6]
 8008fd0:	79ba      	ldrb	r2, [r7, #6]
 8008fd2:	484f      	ldr	r0, [pc, #316]	; (8009110 <drv_dmaInit+0x1c8>)
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	440b      	add	r3, r1
 8008fda:	00db      	lsls	r3, r3, #3
 8008fdc:	4403      	add	r3, r0
 8008fde:	336c      	adds	r3, #108	; 0x6c
 8008fe0:	6819      	ldr	r1, [r3, #0]
 8008fe2:	484b      	ldr	r0, [pc, #300]	; (8009110 <drv_dmaInit+0x1c8>)
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	011b      	lsls	r3, r3, #4
 8008fe8:	4413      	add	r3, r2
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	4403      	add	r3, r0
 8008fee:	3310      	adds	r3, #16
 8008ff0:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemInc              = dmaConfig[idx].memInc;
 8008ff2:	79b9      	ldrb	r1, [r7, #6]
 8008ff4:	79ba      	ldrb	r2, [r7, #6]
 8008ff6:	4846      	ldr	r0, [pc, #280]	; (8009110 <drv_dmaInit+0x1c8>)
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	011b      	lsls	r3, r3, #4
 8008ffc:	440b      	add	r3, r1
 8008ffe:	00db      	lsls	r3, r3, #3
 8009000:	4403      	add	r3, r0
 8009002:	3370      	adds	r3, #112	; 0x70
 8009004:	6819      	ldr	r1, [r3, #0]
 8009006:	4842      	ldr	r0, [pc, #264]	; (8009110 <drv_dmaInit+0x1c8>)
 8009008:	4613      	mov	r3, r2
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	4413      	add	r3, r2
 800900e:	00db      	lsls	r3, r3, #3
 8009010:	4403      	add	r3, r0
 8009012:	3314      	adds	r3, #20
 8009014:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.PeriphDataAlignment = dmaConfig[idx].periphDataAlignment;
 8009016:	79b9      	ldrb	r1, [r7, #6]
 8009018:	79ba      	ldrb	r2, [r7, #6]
 800901a:	483d      	ldr	r0, [pc, #244]	; (8009110 <drv_dmaInit+0x1c8>)
 800901c:	460b      	mov	r3, r1
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	440b      	add	r3, r1
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	4403      	add	r3, r0
 8009026:	3374      	adds	r3, #116	; 0x74
 8009028:	6819      	ldr	r1, [r3, #0]
 800902a:	4839      	ldr	r0, [pc, #228]	; (8009110 <drv_dmaInit+0x1c8>)
 800902c:	4613      	mov	r3, r2
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	4413      	add	r3, r2
 8009032:	00db      	lsls	r3, r3, #3
 8009034:	4403      	add	r3, r0
 8009036:	3318      	adds	r3, #24
 8009038:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.MemDataAlignment    = dmaConfig[idx].memDataAlignment;
 800903a:	79b9      	ldrb	r1, [r7, #6]
 800903c:	79ba      	ldrb	r2, [r7, #6]
 800903e:	4834      	ldr	r0, [pc, #208]	; (8009110 <drv_dmaInit+0x1c8>)
 8009040:	460b      	mov	r3, r1
 8009042:	011b      	lsls	r3, r3, #4
 8009044:	440b      	add	r3, r1
 8009046:	00db      	lsls	r3, r3, #3
 8009048:	4403      	add	r3, r0
 800904a:	3378      	adds	r3, #120	; 0x78
 800904c:	6819      	ldr	r1, [r3, #0]
 800904e:	4830      	ldr	r0, [pc, #192]	; (8009110 <drv_dmaInit+0x1c8>)
 8009050:	4613      	mov	r3, r2
 8009052:	011b      	lsls	r3, r3, #4
 8009054:	4413      	add	r3, r2
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	4403      	add	r3, r0
 800905a:	331c      	adds	r3, #28
 800905c:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Mode                = dmaConfig[idx].mode;
 800905e:	79b9      	ldrb	r1, [r7, #6]
 8009060:	79ba      	ldrb	r2, [r7, #6]
 8009062:	482b      	ldr	r0, [pc, #172]	; (8009110 <drv_dmaInit+0x1c8>)
 8009064:	460b      	mov	r3, r1
 8009066:	011b      	lsls	r3, r3, #4
 8009068:	440b      	add	r3, r1
 800906a:	00db      	lsls	r3, r3, #3
 800906c:	4403      	add	r3, r0
 800906e:	337c      	adds	r3, #124	; 0x7c
 8009070:	6819      	ldr	r1, [r3, #0]
 8009072:	4827      	ldr	r0, [pc, #156]	; (8009110 <drv_dmaInit+0x1c8>)
 8009074:	4613      	mov	r3, r2
 8009076:	011b      	lsls	r3, r3, #4
 8009078:	4413      	add	r3, r2
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	4403      	add	r3, r0
 800907e:	3320      	adds	r3, #32
 8009080:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.Priority            = dmaConfig[idx].priority;
 8009082:	79b9      	ldrb	r1, [r7, #6]
 8009084:	79ba      	ldrb	r2, [r7, #6]
 8009086:	4822      	ldr	r0, [pc, #136]	; (8009110 <drv_dmaInit+0x1c8>)
 8009088:	460b      	mov	r3, r1
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	440b      	add	r3, r1
 800908e:	00db      	lsls	r3, r3, #3
 8009090:	4403      	add	r3, r0
 8009092:	3380      	adds	r3, #128	; 0x80
 8009094:	6819      	ldr	r1, [r3, #0]
 8009096:	481e      	ldr	r0, [pc, #120]	; (8009110 <drv_dmaInit+0x1c8>)
 8009098:	4613      	mov	r3, r2
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	4413      	add	r3, r2
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	4403      	add	r3, r0
 80090a2:	3324      	adds	r3, #36	; 0x24
 80090a4:	6019      	str	r1, [r3, #0]
        dmaConfig[idx].hdma.Init.FIFOMode            = dmaConfig[idx].fifoMode;
 80090a6:	79b9      	ldrb	r1, [r7, #6]
 80090a8:	79ba      	ldrb	r2, [r7, #6]
 80090aa:	4819      	ldr	r0, [pc, #100]	; (8009110 <drv_dmaInit+0x1c8>)
 80090ac:	460b      	mov	r3, r1
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	440b      	add	r3, r1
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	4403      	add	r3, r0
 80090b6:	3384      	adds	r3, #132	; 0x84
 80090b8:	6819      	ldr	r1, [r3, #0]
 80090ba:	4815      	ldr	r0, [pc, #84]	; (8009110 <drv_dmaInit+0x1c8>)
 80090bc:	4613      	mov	r3, r2
 80090be:	011b      	lsls	r3, r3, #4
 80090c0:	4413      	add	r3, r2
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	4403      	add	r3, r0
 80090c6:	3328      	adds	r3, #40	; 0x28
 80090c8:	6019      	str	r1, [r3, #0]

        if (HAL_DMA_Init(&(dmaConfig[idx].hdma)) != HAL_OK)
 80090ca:	79ba      	ldrb	r2, [r7, #6]
 80090cc:	4613      	mov	r3, r2
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	4413      	add	r3, r2
 80090d2:	00db      	lsls	r3, r3, #3
 80090d4:	4a0e      	ldr	r2, [pc, #56]	; (8009110 <drv_dmaInit+0x1c8>)
 80090d6:	4413      	add	r3, r2
 80090d8:	3304      	adds	r3, #4
 80090da:	4618      	mov	r0, r3
 80090dc:	f7f8 fd60 	bl	8001ba0 <HAL_DMA_Init>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <drv_dmaInit+0x1a2>
        {
            dmaInitResult = GOS_ERROR;
 80090e6:	23ae      	movs	r3, #174	; 0xae
 80090e8:	71fb      	strb	r3, [r7, #7]
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 80090ea:	79bb      	ldrb	r3, [r7, #6]
 80090ec:	3301      	adds	r3, #1
 80090ee:	71bb      	strb	r3, [r7, #6]
 80090f0:	79ba      	ldrb	r2, [r7, #6]
 80090f2:	4b09      	ldr	r3, [pc, #36]	; (8009118 <drv_dmaInit+0x1d0>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4909      	ldr	r1, [pc, #36]	; (800911c <drv_dmaInit+0x1d4>)
 80090f8:	fba1 1303 	umull	r1, r3, r1, r3
 80090fc:	09db      	lsrs	r3, r3, #7
 80090fe:	429a      	cmp	r2, r3
 8009100:	f4ff af2c 	bcc.w	8008f5c <drv_dmaInit+0x14>
        {
            // Init OK.
        }
    }

    return dmaInitResult;
 8009104:	79fb      	ldrb	r3, [r7, #7]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200003e0 	.word	0x200003e0
 8009114:	20000670 	.word	0x20000670
 8009118:	20000578 	.word	0x20000578
 800911c:	f0f0f0f1 	.word	0xf0f0f0f1

08009120 <DMA1_Stream0_IRQHandler>:

/*
 * Function: DMA1_Stream0_IRQHandler
 */
void_t DMA1_Stream0_IRQHandler (void_t)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8009124:	4b19      	ldr	r3, [pc, #100]	; (800918c <DMA1_Stream0_IRQHandler+0x6c>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d105      	bne.n	8009138 <DMA1_Stream0_IRQHandler+0x18>
 800912c:	4b18      	ldr	r3, [pc, #96]	; (8009190 <DMA1_Stream0_IRQHandler+0x70>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	3301      	adds	r3, #1
 8009132:	b2da      	uxtb	r2, r3
 8009134:	4b16      	ldr	r3, [pc, #88]	; (8009190 <DMA1_Stream0_IRQHandler+0x70>)
 8009136:	701a      	strb	r2, [r3, #0]
 8009138:	4b14      	ldr	r3, [pc, #80]	; (800918c <DMA1_Stream0_IRQHandler+0x6c>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	3301      	adds	r3, #1
 800913e:	b2da      	uxtb	r2, r3
 8009140:	4b12      	ldr	r3, [pc, #72]	; (800918c <DMA1_Stream0_IRQHandler+0x6c>)
 8009142:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_0] != NULL)
 8009144:	4b13      	ldr	r3, [pc, #76]	; (8009194 <DMA1_Stream0_IRQHandler+0x74>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d005      	beq.n	8009158 <DMA1_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_0]->hdma);
 800914c:	4b11      	ldr	r3, [pc, #68]	; (8009194 <DMA1_Stream0_IRQHandler+0x74>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3304      	adds	r3, #4
 8009152:	4618      	mov	r0, r3
 8009154:	f7f8 febc 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8009158:	4b0c      	ldr	r3, [pc, #48]	; (800918c <DMA1_Stream0_IRQHandler+0x6c>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <DMA1_Stream0_IRQHandler+0x4c>
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <DMA1_Stream0_IRQHandler+0x6c>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	3b01      	subs	r3, #1
 8009166:	b2da      	uxtb	r2, r3
 8009168:	4b08      	ldr	r3, [pc, #32]	; (800918c <DMA1_Stream0_IRQHandler+0x6c>)
 800916a:	701a      	strb	r2, [r3, #0]
 800916c:	4b07      	ldr	r3, [pc, #28]	; (800918c <DMA1_Stream0_IRQHandler+0x6c>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d109      	bne.n	8009188 <DMA1_Stream0_IRQHandler+0x68>
 8009174:	4b06      	ldr	r3, [pc, #24]	; (8009190 <DMA1_Stream0_IRQHandler+0x70>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d005      	beq.n	8009188 <DMA1_Stream0_IRQHandler+0x68>
 800917c:	4b04      	ldr	r3, [pc, #16]	; (8009190 <DMA1_Stream0_IRQHandler+0x70>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	3b01      	subs	r3, #1
 8009182:	b2da      	uxtb	r2, r3
 8009184:	4b02      	ldr	r3, [pc, #8]	; (8009190 <DMA1_Stream0_IRQHandler+0x70>)
 8009186:	701a      	strb	r2, [r3, #0]
}
 8009188:	bf00      	nop
 800918a:	bd80      	pop	{r7, pc}
 800918c:	200050ea 	.word	0x200050ea
 8009190:	200050e9 	.word	0x200050e9
 8009194:	2000057c 	.word	0x2000057c

08009198 <DMA1_Stream1_IRQHandler>:

/*
 * Function: DMA1_Stream1_IRQHandler
 */
void_t DMA1_Stream1_IRQHandler (void_t)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800919c:	4b19      	ldr	r3, [pc, #100]	; (8009204 <DMA1_Stream1_IRQHandler+0x6c>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d105      	bne.n	80091b0 <DMA1_Stream1_IRQHandler+0x18>
 80091a4:	4b18      	ldr	r3, [pc, #96]	; (8009208 <DMA1_Stream1_IRQHandler+0x70>)
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	3301      	adds	r3, #1
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	4b16      	ldr	r3, [pc, #88]	; (8009208 <DMA1_Stream1_IRQHandler+0x70>)
 80091ae:	701a      	strb	r2, [r3, #0]
 80091b0:	4b14      	ldr	r3, [pc, #80]	; (8009204 <DMA1_Stream1_IRQHandler+0x6c>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	4b12      	ldr	r3, [pc, #72]	; (8009204 <DMA1_Stream1_IRQHandler+0x6c>)
 80091ba:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_1] != NULL)
 80091bc:	4b13      	ldr	r3, [pc, #76]	; (800920c <DMA1_Stream1_IRQHandler+0x74>)
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <DMA1_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_1]->hdma);
 80091c4:	4b11      	ldr	r3, [pc, #68]	; (800920c <DMA1_Stream1_IRQHandler+0x74>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7f8 fe80 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80091d0:	4b0c      	ldr	r3, [pc, #48]	; (8009204 <DMA1_Stream1_IRQHandler+0x6c>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d005      	beq.n	80091e4 <DMA1_Stream1_IRQHandler+0x4c>
 80091d8:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <DMA1_Stream1_IRQHandler+0x6c>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	3b01      	subs	r3, #1
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	4b08      	ldr	r3, [pc, #32]	; (8009204 <DMA1_Stream1_IRQHandler+0x6c>)
 80091e2:	701a      	strb	r2, [r3, #0]
 80091e4:	4b07      	ldr	r3, [pc, #28]	; (8009204 <DMA1_Stream1_IRQHandler+0x6c>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d109      	bne.n	8009200 <DMA1_Stream1_IRQHandler+0x68>
 80091ec:	4b06      	ldr	r3, [pc, #24]	; (8009208 <DMA1_Stream1_IRQHandler+0x70>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <DMA1_Stream1_IRQHandler+0x68>
 80091f4:	4b04      	ldr	r3, [pc, #16]	; (8009208 <DMA1_Stream1_IRQHandler+0x70>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b2da      	uxtb	r2, r3
 80091fc:	4b02      	ldr	r3, [pc, #8]	; (8009208 <DMA1_Stream1_IRQHandler+0x70>)
 80091fe:	701a      	strb	r2, [r3, #0]
}
 8009200:	bf00      	nop
 8009202:	bd80      	pop	{r7, pc}
 8009204:	200050ea 	.word	0x200050ea
 8009208:	200050e9 	.word	0x200050e9
 800920c:	2000057c 	.word	0x2000057c

08009210 <DMA1_Stream2_IRQHandler>:

/*
 * Function: DMA1_Stream2_IRQHandler
 */
void_t DMA1_Stream2_IRQHandler (void_t)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8009214:	4b19      	ldr	r3, [pc, #100]	; (800927c <DMA1_Stream2_IRQHandler+0x6c>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d105      	bne.n	8009228 <DMA1_Stream2_IRQHandler+0x18>
 800921c:	4b18      	ldr	r3, [pc, #96]	; (8009280 <DMA1_Stream2_IRQHandler+0x70>)
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	3301      	adds	r3, #1
 8009222:	b2da      	uxtb	r2, r3
 8009224:	4b16      	ldr	r3, [pc, #88]	; (8009280 <DMA1_Stream2_IRQHandler+0x70>)
 8009226:	701a      	strb	r2, [r3, #0]
 8009228:	4b14      	ldr	r3, [pc, #80]	; (800927c <DMA1_Stream2_IRQHandler+0x6c>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	4b12      	ldr	r3, [pc, #72]	; (800927c <DMA1_Stream2_IRQHandler+0x6c>)
 8009232:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_2] != NULL)
 8009234:	4b13      	ldr	r3, [pc, #76]	; (8009284 <DMA1_Stream2_IRQHandler+0x74>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <DMA1_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_2]->hdma);
 800923c:	4b11      	ldr	r3, [pc, #68]	; (8009284 <DMA1_Stream2_IRQHandler+0x74>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	3304      	adds	r3, #4
 8009242:	4618      	mov	r0, r3
 8009244:	f7f8 fe44 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8009248:	4b0c      	ldr	r3, [pc, #48]	; (800927c <DMA1_Stream2_IRQHandler+0x6c>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <DMA1_Stream2_IRQHandler+0x4c>
 8009250:	4b0a      	ldr	r3, [pc, #40]	; (800927c <DMA1_Stream2_IRQHandler+0x6c>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	3b01      	subs	r3, #1
 8009256:	b2da      	uxtb	r2, r3
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <DMA1_Stream2_IRQHandler+0x6c>)
 800925a:	701a      	strb	r2, [r3, #0]
 800925c:	4b07      	ldr	r3, [pc, #28]	; (800927c <DMA1_Stream2_IRQHandler+0x6c>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d109      	bne.n	8009278 <DMA1_Stream2_IRQHandler+0x68>
 8009264:	4b06      	ldr	r3, [pc, #24]	; (8009280 <DMA1_Stream2_IRQHandler+0x70>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d005      	beq.n	8009278 <DMA1_Stream2_IRQHandler+0x68>
 800926c:	4b04      	ldr	r3, [pc, #16]	; (8009280 <DMA1_Stream2_IRQHandler+0x70>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	3b01      	subs	r3, #1
 8009272:	b2da      	uxtb	r2, r3
 8009274:	4b02      	ldr	r3, [pc, #8]	; (8009280 <DMA1_Stream2_IRQHandler+0x70>)
 8009276:	701a      	strb	r2, [r3, #0]
}
 8009278:	bf00      	nop
 800927a:	bd80      	pop	{r7, pc}
 800927c:	200050ea 	.word	0x200050ea
 8009280:	200050e9 	.word	0x200050e9
 8009284:	2000057c 	.word	0x2000057c

08009288 <DMA1_Stream3_IRQHandler>:

/*
 * Function: DMA1_Stream3_IRQHandler
 */
void_t DMA1_Stream3_IRQHandler (void_t)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800928c:	4b19      	ldr	r3, [pc, #100]	; (80092f4 <DMA1_Stream3_IRQHandler+0x6c>)
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d105      	bne.n	80092a0 <DMA1_Stream3_IRQHandler+0x18>
 8009294:	4b18      	ldr	r3, [pc, #96]	; (80092f8 <DMA1_Stream3_IRQHandler+0x70>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	3301      	adds	r3, #1
 800929a:	b2da      	uxtb	r2, r3
 800929c:	4b16      	ldr	r3, [pc, #88]	; (80092f8 <DMA1_Stream3_IRQHandler+0x70>)
 800929e:	701a      	strb	r2, [r3, #0]
 80092a0:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <DMA1_Stream3_IRQHandler+0x6c>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	3301      	adds	r3, #1
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	4b12      	ldr	r3, [pc, #72]	; (80092f4 <DMA1_Stream3_IRQHandler+0x6c>)
 80092aa:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_3] != NULL)
 80092ac:	4b13      	ldr	r3, [pc, #76]	; (80092fc <DMA1_Stream3_IRQHandler+0x74>)
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d005      	beq.n	80092c0 <DMA1_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_3]->hdma);
 80092b4:	4b11      	ldr	r3, [pc, #68]	; (80092fc <DMA1_Stream3_IRQHandler+0x74>)
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	3304      	adds	r3, #4
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7f8 fe08 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80092c0:	4b0c      	ldr	r3, [pc, #48]	; (80092f4 <DMA1_Stream3_IRQHandler+0x6c>)
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <DMA1_Stream3_IRQHandler+0x4c>
 80092c8:	4b0a      	ldr	r3, [pc, #40]	; (80092f4 <DMA1_Stream3_IRQHandler+0x6c>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <DMA1_Stream3_IRQHandler+0x6c>)
 80092d2:	701a      	strb	r2, [r3, #0]
 80092d4:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <DMA1_Stream3_IRQHandler+0x6c>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d109      	bne.n	80092f0 <DMA1_Stream3_IRQHandler+0x68>
 80092dc:	4b06      	ldr	r3, [pc, #24]	; (80092f8 <DMA1_Stream3_IRQHandler+0x70>)
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d005      	beq.n	80092f0 <DMA1_Stream3_IRQHandler+0x68>
 80092e4:	4b04      	ldr	r3, [pc, #16]	; (80092f8 <DMA1_Stream3_IRQHandler+0x70>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	4b02      	ldr	r3, [pc, #8]	; (80092f8 <DMA1_Stream3_IRQHandler+0x70>)
 80092ee:	701a      	strb	r2, [r3, #0]
}
 80092f0:	bf00      	nop
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	200050ea 	.word	0x200050ea
 80092f8:	200050e9 	.word	0x200050e9
 80092fc:	2000057c 	.word	0x2000057c

08009300 <DMA1_Stream4_IRQHandler>:

/*
 * Function: DMA1_Stream4_IRQHandler
 */
void_t DMA1_Stream4_IRQHandler (void_t)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8009304:	4b19      	ldr	r3, [pc, #100]	; (800936c <DMA1_Stream4_IRQHandler+0x6c>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d105      	bne.n	8009318 <DMA1_Stream4_IRQHandler+0x18>
 800930c:	4b18      	ldr	r3, [pc, #96]	; (8009370 <DMA1_Stream4_IRQHandler+0x70>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	3301      	adds	r3, #1
 8009312:	b2da      	uxtb	r2, r3
 8009314:	4b16      	ldr	r3, [pc, #88]	; (8009370 <DMA1_Stream4_IRQHandler+0x70>)
 8009316:	701a      	strb	r2, [r3, #0]
 8009318:	4b14      	ldr	r3, [pc, #80]	; (800936c <DMA1_Stream4_IRQHandler+0x6c>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	3301      	adds	r3, #1
 800931e:	b2da      	uxtb	r2, r3
 8009320:	4b12      	ldr	r3, [pc, #72]	; (800936c <DMA1_Stream4_IRQHandler+0x6c>)
 8009322:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_4] != NULL)
 8009324:	4b13      	ldr	r3, [pc, #76]	; (8009374 <DMA1_Stream4_IRQHandler+0x74>)
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <DMA1_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_4]->hdma);
 800932c:	4b11      	ldr	r3, [pc, #68]	; (8009374 <DMA1_Stream4_IRQHandler+0x74>)
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	3304      	adds	r3, #4
 8009332:	4618      	mov	r0, r3
 8009334:	f7f8 fdcc 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8009338:	4b0c      	ldr	r3, [pc, #48]	; (800936c <DMA1_Stream4_IRQHandler+0x6c>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <DMA1_Stream4_IRQHandler+0x4c>
 8009340:	4b0a      	ldr	r3, [pc, #40]	; (800936c <DMA1_Stream4_IRQHandler+0x6c>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	3b01      	subs	r3, #1
 8009346:	b2da      	uxtb	r2, r3
 8009348:	4b08      	ldr	r3, [pc, #32]	; (800936c <DMA1_Stream4_IRQHandler+0x6c>)
 800934a:	701a      	strb	r2, [r3, #0]
 800934c:	4b07      	ldr	r3, [pc, #28]	; (800936c <DMA1_Stream4_IRQHandler+0x6c>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d109      	bne.n	8009368 <DMA1_Stream4_IRQHandler+0x68>
 8009354:	4b06      	ldr	r3, [pc, #24]	; (8009370 <DMA1_Stream4_IRQHandler+0x70>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d005      	beq.n	8009368 <DMA1_Stream4_IRQHandler+0x68>
 800935c:	4b04      	ldr	r3, [pc, #16]	; (8009370 <DMA1_Stream4_IRQHandler+0x70>)
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	3b01      	subs	r3, #1
 8009362:	b2da      	uxtb	r2, r3
 8009364:	4b02      	ldr	r3, [pc, #8]	; (8009370 <DMA1_Stream4_IRQHandler+0x70>)
 8009366:	701a      	strb	r2, [r3, #0]
}
 8009368:	bf00      	nop
 800936a:	bd80      	pop	{r7, pc}
 800936c:	200050ea 	.word	0x200050ea
 8009370:	200050e9 	.word	0x200050e9
 8009374:	2000057c 	.word	0x2000057c

08009378 <DMA1_Stream5_IRQHandler>:

/*
 * Function: DMA1_Stream5_IRQHandler
 */
void_t DMA1_Stream5_IRQHandler (void_t)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u8_t idx = 0u;
 800937e:	2300      	movs	r3, #0
 8009380:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8009382:	4b28      	ldr	r3, [pc, #160]	; (8009424 <DMA1_Stream5_IRQHandler+0xac>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d105      	bne.n	8009396 <DMA1_Stream5_IRQHandler+0x1e>
 800938a:	4b27      	ldr	r3, [pc, #156]	; (8009428 <DMA1_Stream5_IRQHandler+0xb0>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	3301      	adds	r3, #1
 8009390:	b2da      	uxtb	r2, r3
 8009392:	4b25      	ldr	r3, [pc, #148]	; (8009428 <DMA1_Stream5_IRQHandler+0xb0>)
 8009394:	701a      	strb	r2, [r3, #0]
 8009396:	4b23      	ldr	r3, [pc, #140]	; (8009424 <DMA1_Stream5_IRQHandler+0xac>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	3301      	adds	r3, #1
 800939c:	b2da      	uxtb	r2, r3
 800939e:	4b21      	ldr	r3, [pc, #132]	; (8009424 <DMA1_Stream5_IRQHandler+0xac>)
 80093a0:	701a      	strb	r2, [r3, #0]

    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 80093a2:	2300      	movs	r3, #0
 80093a4:	71fb      	strb	r3, [r7, #7]
 80093a6:	e017      	b.n	80093d8 <DMA1_Stream5_IRQHandler+0x60>
    {
        if (dmaConfig[idx].dmaStream == DRV_DMA_1_STREAM_5)
 80093a8:	79fa      	ldrb	r2, [r7, #7]
 80093aa:	4920      	ldr	r1, [pc, #128]	; (800942c <DMA1_Stream5_IRQHandler+0xb4>)
 80093ac:	4613      	mov	r3, r2
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	4413      	add	r3, r2
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	440b      	add	r3, r1
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	2b05      	cmp	r3, #5
 80093ba:	d10a      	bne.n	80093d2 <DMA1_Stream5_IRQHandler+0x5a>
        {
            HAL_DMA_IRQHandler(&dmaConfig[idx].hdma);
 80093bc:	79fa      	ldrb	r2, [r7, #7]
 80093be:	4613      	mov	r3, r2
 80093c0:	011b      	lsls	r3, r3, #4
 80093c2:	4413      	add	r3, r2
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	4a19      	ldr	r2, [pc, #100]	; (800942c <DMA1_Stream5_IRQHandler+0xb4>)
 80093c8:	4413      	add	r3, r2
 80093ca:	3304      	adds	r3, #4
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7f8 fd7f 	bl	8001ed0 <HAL_DMA_IRQHandler>
    for (idx = 0u; idx < dmaConfigSize / sizeof(drv_dmaDescriptor_t); idx++)
 80093d2:	79fb      	ldrb	r3, [r7, #7]
 80093d4:	3301      	adds	r3, #1
 80093d6:	71fb      	strb	r3, [r7, #7]
 80093d8:	79fa      	ldrb	r2, [r7, #7]
 80093da:	4b15      	ldr	r3, [pc, #84]	; (8009430 <DMA1_Stream5_IRQHandler+0xb8>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4915      	ldr	r1, [pc, #84]	; (8009434 <DMA1_Stream5_IRQHandler+0xbc>)
 80093e0:	fba1 1303 	umull	r1, r3, r1, r3
 80093e4:	09db      	lsrs	r3, r3, #7
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d3de      	bcc.n	80093a8 <DMA1_Stream5_IRQHandler+0x30>
        {
            // Continue.
        }
    }

    GOS_ISR_EXIT
 80093ea:	4b0e      	ldr	r3, [pc, #56]	; (8009424 <DMA1_Stream5_IRQHandler+0xac>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <DMA1_Stream5_IRQHandler+0x86>
 80093f2:	4b0c      	ldr	r3, [pc, #48]	; (8009424 <DMA1_Stream5_IRQHandler+0xac>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	4b0a      	ldr	r3, [pc, #40]	; (8009424 <DMA1_Stream5_IRQHandler+0xac>)
 80093fc:	701a      	strb	r2, [r3, #0]
 80093fe:	4b09      	ldr	r3, [pc, #36]	; (8009424 <DMA1_Stream5_IRQHandler+0xac>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d109      	bne.n	800941a <DMA1_Stream5_IRQHandler+0xa2>
 8009406:	4b08      	ldr	r3, [pc, #32]	; (8009428 <DMA1_Stream5_IRQHandler+0xb0>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d005      	beq.n	800941a <DMA1_Stream5_IRQHandler+0xa2>
 800940e:	4b06      	ldr	r3, [pc, #24]	; (8009428 <DMA1_Stream5_IRQHandler+0xb0>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	3b01      	subs	r3, #1
 8009414:	b2da      	uxtb	r2, r3
 8009416:	4b04      	ldr	r3, [pc, #16]	; (8009428 <DMA1_Stream5_IRQHandler+0xb0>)
 8009418:	701a      	strb	r2, [r3, #0]
}
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	200050ea 	.word	0x200050ea
 8009428:	200050e9 	.word	0x200050e9
 800942c:	200003e0 	.word	0x200003e0
 8009430:	20000578 	.word	0x20000578
 8009434:	f0f0f0f1 	.word	0xf0f0f0f1

08009438 <DMA1_Stream6_IRQHandler>:

/*
 * Function: DMA1_Stream6_IRQHandler
 */
void_t DMA1_Stream6_IRQHandler (void_t)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800943c:	4b19      	ldr	r3, [pc, #100]	; (80094a4 <DMA1_Stream6_IRQHandler+0x6c>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d105      	bne.n	8009450 <DMA1_Stream6_IRQHandler+0x18>
 8009444:	4b18      	ldr	r3, [pc, #96]	; (80094a8 <DMA1_Stream6_IRQHandler+0x70>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	b2da      	uxtb	r2, r3
 800944c:	4b16      	ldr	r3, [pc, #88]	; (80094a8 <DMA1_Stream6_IRQHandler+0x70>)
 800944e:	701a      	strb	r2, [r3, #0]
 8009450:	4b14      	ldr	r3, [pc, #80]	; (80094a4 <DMA1_Stream6_IRQHandler+0x6c>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	3301      	adds	r3, #1
 8009456:	b2da      	uxtb	r2, r3
 8009458:	4b12      	ldr	r3, [pc, #72]	; (80094a4 <DMA1_Stream6_IRQHandler+0x6c>)
 800945a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_6] != NULL)
 800945c:	4b13      	ldr	r3, [pc, #76]	; (80094ac <DMA1_Stream6_IRQHandler+0x74>)
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <DMA1_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_6]->hdma);
 8009464:	4b11      	ldr	r3, [pc, #68]	; (80094ac <DMA1_Stream6_IRQHandler+0x74>)
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	3304      	adds	r3, #4
 800946a:	4618      	mov	r0, r3
 800946c:	f7f8 fd30 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8009470:	4b0c      	ldr	r3, [pc, #48]	; (80094a4 <DMA1_Stream6_IRQHandler+0x6c>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <DMA1_Stream6_IRQHandler+0x4c>
 8009478:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <DMA1_Stream6_IRQHandler+0x6c>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	3b01      	subs	r3, #1
 800947e:	b2da      	uxtb	r2, r3
 8009480:	4b08      	ldr	r3, [pc, #32]	; (80094a4 <DMA1_Stream6_IRQHandler+0x6c>)
 8009482:	701a      	strb	r2, [r3, #0]
 8009484:	4b07      	ldr	r3, [pc, #28]	; (80094a4 <DMA1_Stream6_IRQHandler+0x6c>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d109      	bne.n	80094a0 <DMA1_Stream6_IRQHandler+0x68>
 800948c:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <DMA1_Stream6_IRQHandler+0x70>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <DMA1_Stream6_IRQHandler+0x68>
 8009494:	4b04      	ldr	r3, [pc, #16]	; (80094a8 <DMA1_Stream6_IRQHandler+0x70>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	3b01      	subs	r3, #1
 800949a:	b2da      	uxtb	r2, r3
 800949c:	4b02      	ldr	r3, [pc, #8]	; (80094a8 <DMA1_Stream6_IRQHandler+0x70>)
 800949e:	701a      	strb	r2, [r3, #0]
}
 80094a0:	bf00      	nop
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	200050ea 	.word	0x200050ea
 80094a8:	200050e9 	.word	0x200050e9
 80094ac:	2000057c 	.word	0x2000057c

080094b0 <DMA1_Stream7_IRQHandler>:

/*
 * Function: DMA1_Stream7_IRQHandler
 */
void_t DMA1_Stream7_IRQHandler (void_t)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80094b4:	4b19      	ldr	r3, [pc, #100]	; (800951c <DMA1_Stream7_IRQHandler+0x6c>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d105      	bne.n	80094c8 <DMA1_Stream7_IRQHandler+0x18>
 80094bc:	4b18      	ldr	r3, [pc, #96]	; (8009520 <DMA1_Stream7_IRQHandler+0x70>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	3301      	adds	r3, #1
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	4b16      	ldr	r3, [pc, #88]	; (8009520 <DMA1_Stream7_IRQHandler+0x70>)
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	4b14      	ldr	r3, [pc, #80]	; (800951c <DMA1_Stream7_IRQHandler+0x6c>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	3301      	adds	r3, #1
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	4b12      	ldr	r3, [pc, #72]	; (800951c <DMA1_Stream7_IRQHandler+0x6c>)
 80094d2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_1_STREAM_7] != NULL)
 80094d4:	4b13      	ldr	r3, [pc, #76]	; (8009524 <DMA1_Stream7_IRQHandler+0x74>)
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <DMA1_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_1_STREAM_7]->hdma);
 80094dc:	4b11      	ldr	r3, [pc, #68]	; (8009524 <DMA1_Stream7_IRQHandler+0x74>)
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f8 fcf4 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80094e8:	4b0c      	ldr	r3, [pc, #48]	; (800951c <DMA1_Stream7_IRQHandler+0x6c>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <DMA1_Stream7_IRQHandler+0x4c>
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <DMA1_Stream7_IRQHandler+0x6c>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	3b01      	subs	r3, #1
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	4b08      	ldr	r3, [pc, #32]	; (800951c <DMA1_Stream7_IRQHandler+0x6c>)
 80094fa:	701a      	strb	r2, [r3, #0]
 80094fc:	4b07      	ldr	r3, [pc, #28]	; (800951c <DMA1_Stream7_IRQHandler+0x6c>)
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d109      	bne.n	8009518 <DMA1_Stream7_IRQHandler+0x68>
 8009504:	4b06      	ldr	r3, [pc, #24]	; (8009520 <DMA1_Stream7_IRQHandler+0x70>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <DMA1_Stream7_IRQHandler+0x68>
 800950c:	4b04      	ldr	r3, [pc, #16]	; (8009520 <DMA1_Stream7_IRQHandler+0x70>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	3b01      	subs	r3, #1
 8009512:	b2da      	uxtb	r2, r3
 8009514:	4b02      	ldr	r3, [pc, #8]	; (8009520 <DMA1_Stream7_IRQHandler+0x70>)
 8009516:	701a      	strb	r2, [r3, #0]
}
 8009518:	bf00      	nop
 800951a:	bd80      	pop	{r7, pc}
 800951c:	200050ea 	.word	0x200050ea
 8009520:	200050e9 	.word	0x200050e9
 8009524:	2000057c 	.word	0x2000057c

08009528 <DMA2_Stream0_IRQHandler>:

/*
 * Function: DMA2_Stream0_IRQHandler
 */
void_t DMA2_Stream0_IRQHandler (void_t)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800952c:	4b19      	ldr	r3, [pc, #100]	; (8009594 <DMA2_Stream0_IRQHandler+0x6c>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d105      	bne.n	8009540 <DMA2_Stream0_IRQHandler+0x18>
 8009534:	4b18      	ldr	r3, [pc, #96]	; (8009598 <DMA2_Stream0_IRQHandler+0x70>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	3301      	adds	r3, #1
 800953a:	b2da      	uxtb	r2, r3
 800953c:	4b16      	ldr	r3, [pc, #88]	; (8009598 <DMA2_Stream0_IRQHandler+0x70>)
 800953e:	701a      	strb	r2, [r3, #0]
 8009540:	4b14      	ldr	r3, [pc, #80]	; (8009594 <DMA2_Stream0_IRQHandler+0x6c>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	3301      	adds	r3, #1
 8009546:	b2da      	uxtb	r2, r3
 8009548:	4b12      	ldr	r3, [pc, #72]	; (8009594 <DMA2_Stream0_IRQHandler+0x6c>)
 800954a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_0] != NULL)
 800954c:	4b13      	ldr	r3, [pc, #76]	; (800959c <DMA2_Stream0_IRQHandler+0x74>)
 800954e:	6a1b      	ldr	r3, [r3, #32]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d005      	beq.n	8009560 <DMA2_Stream0_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_0]->hdma);
 8009554:	4b11      	ldr	r3, [pc, #68]	; (800959c <DMA2_Stream0_IRQHandler+0x74>)
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	3304      	adds	r3, #4
 800955a:	4618      	mov	r0, r3
 800955c:	f7f8 fcb8 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8009560:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <DMA2_Stream0_IRQHandler+0x6c>)
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d005      	beq.n	8009574 <DMA2_Stream0_IRQHandler+0x4c>
 8009568:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <DMA2_Stream0_IRQHandler+0x6c>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	3b01      	subs	r3, #1
 800956e:	b2da      	uxtb	r2, r3
 8009570:	4b08      	ldr	r3, [pc, #32]	; (8009594 <DMA2_Stream0_IRQHandler+0x6c>)
 8009572:	701a      	strb	r2, [r3, #0]
 8009574:	4b07      	ldr	r3, [pc, #28]	; (8009594 <DMA2_Stream0_IRQHandler+0x6c>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d109      	bne.n	8009590 <DMA2_Stream0_IRQHandler+0x68>
 800957c:	4b06      	ldr	r3, [pc, #24]	; (8009598 <DMA2_Stream0_IRQHandler+0x70>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d005      	beq.n	8009590 <DMA2_Stream0_IRQHandler+0x68>
 8009584:	4b04      	ldr	r3, [pc, #16]	; (8009598 <DMA2_Stream0_IRQHandler+0x70>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	3b01      	subs	r3, #1
 800958a:	b2da      	uxtb	r2, r3
 800958c:	4b02      	ldr	r3, [pc, #8]	; (8009598 <DMA2_Stream0_IRQHandler+0x70>)
 800958e:	701a      	strb	r2, [r3, #0]
}
 8009590:	bf00      	nop
 8009592:	bd80      	pop	{r7, pc}
 8009594:	200050ea 	.word	0x200050ea
 8009598:	200050e9 	.word	0x200050e9
 800959c:	2000057c 	.word	0x2000057c

080095a0 <DMA2_Stream1_IRQHandler>:

/*
 * Function: DMA2_Stream1_IRQHandler
 */
void_t DMA2_Stream1_IRQHandler (void_t)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80095a4:	4b19      	ldr	r3, [pc, #100]	; (800960c <DMA2_Stream1_IRQHandler+0x6c>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d105      	bne.n	80095b8 <DMA2_Stream1_IRQHandler+0x18>
 80095ac:	4b18      	ldr	r3, [pc, #96]	; (8009610 <DMA2_Stream1_IRQHandler+0x70>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	3301      	adds	r3, #1
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	4b16      	ldr	r3, [pc, #88]	; (8009610 <DMA2_Stream1_IRQHandler+0x70>)
 80095b6:	701a      	strb	r2, [r3, #0]
 80095b8:	4b14      	ldr	r3, [pc, #80]	; (800960c <DMA2_Stream1_IRQHandler+0x6c>)
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	3301      	adds	r3, #1
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	4b12      	ldr	r3, [pc, #72]	; (800960c <DMA2_Stream1_IRQHandler+0x6c>)
 80095c2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_1] != NULL)
 80095c4:	4b13      	ldr	r3, [pc, #76]	; (8009614 <DMA2_Stream1_IRQHandler+0x74>)
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d005      	beq.n	80095d8 <DMA2_Stream1_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_1]->hdma);
 80095cc:	4b11      	ldr	r3, [pc, #68]	; (8009614 <DMA2_Stream1_IRQHandler+0x74>)
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	3304      	adds	r3, #4
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7f8 fc7c 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80095d8:	4b0c      	ldr	r3, [pc, #48]	; (800960c <DMA2_Stream1_IRQHandler+0x6c>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d005      	beq.n	80095ec <DMA2_Stream1_IRQHandler+0x4c>
 80095e0:	4b0a      	ldr	r3, [pc, #40]	; (800960c <DMA2_Stream1_IRQHandler+0x6c>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	4b08      	ldr	r3, [pc, #32]	; (800960c <DMA2_Stream1_IRQHandler+0x6c>)
 80095ea:	701a      	strb	r2, [r3, #0]
 80095ec:	4b07      	ldr	r3, [pc, #28]	; (800960c <DMA2_Stream1_IRQHandler+0x6c>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d109      	bne.n	8009608 <DMA2_Stream1_IRQHandler+0x68>
 80095f4:	4b06      	ldr	r3, [pc, #24]	; (8009610 <DMA2_Stream1_IRQHandler+0x70>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d005      	beq.n	8009608 <DMA2_Stream1_IRQHandler+0x68>
 80095fc:	4b04      	ldr	r3, [pc, #16]	; (8009610 <DMA2_Stream1_IRQHandler+0x70>)
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	3b01      	subs	r3, #1
 8009602:	b2da      	uxtb	r2, r3
 8009604:	4b02      	ldr	r3, [pc, #8]	; (8009610 <DMA2_Stream1_IRQHandler+0x70>)
 8009606:	701a      	strb	r2, [r3, #0]
}
 8009608:	bf00      	nop
 800960a:	bd80      	pop	{r7, pc}
 800960c:	200050ea 	.word	0x200050ea
 8009610:	200050e9 	.word	0x200050e9
 8009614:	2000057c 	.word	0x2000057c

08009618 <DMA2_Stream2_IRQHandler>:

/*
 * Function: DMA2_Stream2_IRQHandler
 */
void_t DMA2_Stream2_IRQHandler (void_t)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800961c:	4b19      	ldr	r3, [pc, #100]	; (8009684 <DMA2_Stream2_IRQHandler+0x6c>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d105      	bne.n	8009630 <DMA2_Stream2_IRQHandler+0x18>
 8009624:	4b18      	ldr	r3, [pc, #96]	; (8009688 <DMA2_Stream2_IRQHandler+0x70>)
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	3301      	adds	r3, #1
 800962a:	b2da      	uxtb	r2, r3
 800962c:	4b16      	ldr	r3, [pc, #88]	; (8009688 <DMA2_Stream2_IRQHandler+0x70>)
 800962e:	701a      	strb	r2, [r3, #0]
 8009630:	4b14      	ldr	r3, [pc, #80]	; (8009684 <DMA2_Stream2_IRQHandler+0x6c>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	3301      	adds	r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	4b12      	ldr	r3, [pc, #72]	; (8009684 <DMA2_Stream2_IRQHandler+0x6c>)
 800963a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_2] != NULL)
 800963c:	4b13      	ldr	r3, [pc, #76]	; (800968c <DMA2_Stream2_IRQHandler+0x74>)
 800963e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <DMA2_Stream2_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_2]->hdma);
 8009644:	4b11      	ldr	r3, [pc, #68]	; (800968c <DMA2_Stream2_IRQHandler+0x74>)
 8009646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009648:	3304      	adds	r3, #4
 800964a:	4618      	mov	r0, r3
 800964c:	f7f8 fc40 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8009650:	4b0c      	ldr	r3, [pc, #48]	; (8009684 <DMA2_Stream2_IRQHandler+0x6c>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d005      	beq.n	8009664 <DMA2_Stream2_IRQHandler+0x4c>
 8009658:	4b0a      	ldr	r3, [pc, #40]	; (8009684 <DMA2_Stream2_IRQHandler+0x6c>)
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	3b01      	subs	r3, #1
 800965e:	b2da      	uxtb	r2, r3
 8009660:	4b08      	ldr	r3, [pc, #32]	; (8009684 <DMA2_Stream2_IRQHandler+0x6c>)
 8009662:	701a      	strb	r2, [r3, #0]
 8009664:	4b07      	ldr	r3, [pc, #28]	; (8009684 <DMA2_Stream2_IRQHandler+0x6c>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d109      	bne.n	8009680 <DMA2_Stream2_IRQHandler+0x68>
 800966c:	4b06      	ldr	r3, [pc, #24]	; (8009688 <DMA2_Stream2_IRQHandler+0x70>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <DMA2_Stream2_IRQHandler+0x68>
 8009674:	4b04      	ldr	r3, [pc, #16]	; (8009688 <DMA2_Stream2_IRQHandler+0x70>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	3b01      	subs	r3, #1
 800967a:	b2da      	uxtb	r2, r3
 800967c:	4b02      	ldr	r3, [pc, #8]	; (8009688 <DMA2_Stream2_IRQHandler+0x70>)
 800967e:	701a      	strb	r2, [r3, #0]
}
 8009680:	bf00      	nop
 8009682:	bd80      	pop	{r7, pc}
 8009684:	200050ea 	.word	0x200050ea
 8009688:	200050e9 	.word	0x200050e9
 800968c:	2000057c 	.word	0x2000057c

08009690 <DMA2_Stream3_IRQHandler>:

/*
 * Function: DMA2_Stream3_IRQHandler
 */
void_t DMA2_Stream3_IRQHandler (void_t)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8009694:	4b19      	ldr	r3, [pc, #100]	; (80096fc <DMA2_Stream3_IRQHandler+0x6c>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d105      	bne.n	80096a8 <DMA2_Stream3_IRQHandler+0x18>
 800969c:	4b18      	ldr	r3, [pc, #96]	; (8009700 <DMA2_Stream3_IRQHandler+0x70>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	3301      	adds	r3, #1
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	4b16      	ldr	r3, [pc, #88]	; (8009700 <DMA2_Stream3_IRQHandler+0x70>)
 80096a6:	701a      	strb	r2, [r3, #0]
 80096a8:	4b14      	ldr	r3, [pc, #80]	; (80096fc <DMA2_Stream3_IRQHandler+0x6c>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	3301      	adds	r3, #1
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	4b12      	ldr	r3, [pc, #72]	; (80096fc <DMA2_Stream3_IRQHandler+0x6c>)
 80096b2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_3] != NULL)
 80096b4:	4b13      	ldr	r3, [pc, #76]	; (8009704 <DMA2_Stream3_IRQHandler+0x74>)
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d005      	beq.n	80096c8 <DMA2_Stream3_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_3]->hdma);
 80096bc:	4b11      	ldr	r3, [pc, #68]	; (8009704 <DMA2_Stream3_IRQHandler+0x74>)
 80096be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c0:	3304      	adds	r3, #4
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7f8 fc04 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80096c8:	4b0c      	ldr	r3, [pc, #48]	; (80096fc <DMA2_Stream3_IRQHandler+0x6c>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d005      	beq.n	80096dc <DMA2_Stream3_IRQHandler+0x4c>
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <DMA2_Stream3_IRQHandler+0x6c>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	4b08      	ldr	r3, [pc, #32]	; (80096fc <DMA2_Stream3_IRQHandler+0x6c>)
 80096da:	701a      	strb	r2, [r3, #0]
 80096dc:	4b07      	ldr	r3, [pc, #28]	; (80096fc <DMA2_Stream3_IRQHandler+0x6c>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d109      	bne.n	80096f8 <DMA2_Stream3_IRQHandler+0x68>
 80096e4:	4b06      	ldr	r3, [pc, #24]	; (8009700 <DMA2_Stream3_IRQHandler+0x70>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <DMA2_Stream3_IRQHandler+0x68>
 80096ec:	4b04      	ldr	r3, [pc, #16]	; (8009700 <DMA2_Stream3_IRQHandler+0x70>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	4b02      	ldr	r3, [pc, #8]	; (8009700 <DMA2_Stream3_IRQHandler+0x70>)
 80096f6:	701a      	strb	r2, [r3, #0]
}
 80096f8:	bf00      	nop
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	200050ea 	.word	0x200050ea
 8009700:	200050e9 	.word	0x200050e9
 8009704:	2000057c 	.word	0x2000057c

08009708 <DMA2_Stream4_IRQHandler>:

/*
 * Function: DMA2_Stream4_IRQHandler
 */
void_t DMA2_Stream4_IRQHandler (void_t)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800970c:	4b19      	ldr	r3, [pc, #100]	; (8009774 <DMA2_Stream4_IRQHandler+0x6c>)
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d105      	bne.n	8009720 <DMA2_Stream4_IRQHandler+0x18>
 8009714:	4b18      	ldr	r3, [pc, #96]	; (8009778 <DMA2_Stream4_IRQHandler+0x70>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	3301      	adds	r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	4b16      	ldr	r3, [pc, #88]	; (8009778 <DMA2_Stream4_IRQHandler+0x70>)
 800971e:	701a      	strb	r2, [r3, #0]
 8009720:	4b14      	ldr	r3, [pc, #80]	; (8009774 <DMA2_Stream4_IRQHandler+0x6c>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	b2da      	uxtb	r2, r3
 8009728:	4b12      	ldr	r3, [pc, #72]	; (8009774 <DMA2_Stream4_IRQHandler+0x6c>)
 800972a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_4] != NULL)
 800972c:	4b13      	ldr	r3, [pc, #76]	; (800977c <DMA2_Stream4_IRQHandler+0x74>)
 800972e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009730:	2b00      	cmp	r3, #0
 8009732:	d005      	beq.n	8009740 <DMA2_Stream4_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_4]->hdma);
 8009734:	4b11      	ldr	r3, [pc, #68]	; (800977c <DMA2_Stream4_IRQHandler+0x74>)
 8009736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009738:	3304      	adds	r3, #4
 800973a:	4618      	mov	r0, r3
 800973c:	f7f8 fbc8 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8009740:	4b0c      	ldr	r3, [pc, #48]	; (8009774 <DMA2_Stream4_IRQHandler+0x6c>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <DMA2_Stream4_IRQHandler+0x4c>
 8009748:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <DMA2_Stream4_IRQHandler+0x6c>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	3b01      	subs	r3, #1
 800974e:	b2da      	uxtb	r2, r3
 8009750:	4b08      	ldr	r3, [pc, #32]	; (8009774 <DMA2_Stream4_IRQHandler+0x6c>)
 8009752:	701a      	strb	r2, [r3, #0]
 8009754:	4b07      	ldr	r3, [pc, #28]	; (8009774 <DMA2_Stream4_IRQHandler+0x6c>)
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d109      	bne.n	8009770 <DMA2_Stream4_IRQHandler+0x68>
 800975c:	4b06      	ldr	r3, [pc, #24]	; (8009778 <DMA2_Stream4_IRQHandler+0x70>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d005      	beq.n	8009770 <DMA2_Stream4_IRQHandler+0x68>
 8009764:	4b04      	ldr	r3, [pc, #16]	; (8009778 <DMA2_Stream4_IRQHandler+0x70>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	3b01      	subs	r3, #1
 800976a:	b2da      	uxtb	r2, r3
 800976c:	4b02      	ldr	r3, [pc, #8]	; (8009778 <DMA2_Stream4_IRQHandler+0x70>)
 800976e:	701a      	strb	r2, [r3, #0]
}
 8009770:	bf00      	nop
 8009772:	bd80      	pop	{r7, pc}
 8009774:	200050ea 	.word	0x200050ea
 8009778:	200050e9 	.word	0x200050e9
 800977c:	2000057c 	.word	0x2000057c

08009780 <DMA2_Stream5_IRQHandler>:

/*
 * Function: DMA2_Stream5_IRQHandler
 */
void_t DMA2_Stream5_IRQHandler (void_t)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8009784:	4b19      	ldr	r3, [pc, #100]	; (80097ec <DMA2_Stream5_IRQHandler+0x6c>)
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d105      	bne.n	8009798 <DMA2_Stream5_IRQHandler+0x18>
 800978c:	4b18      	ldr	r3, [pc, #96]	; (80097f0 <DMA2_Stream5_IRQHandler+0x70>)
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	3301      	adds	r3, #1
 8009792:	b2da      	uxtb	r2, r3
 8009794:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <DMA2_Stream5_IRQHandler+0x70>)
 8009796:	701a      	strb	r2, [r3, #0]
 8009798:	4b14      	ldr	r3, [pc, #80]	; (80097ec <DMA2_Stream5_IRQHandler+0x6c>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	3301      	adds	r3, #1
 800979e:	b2da      	uxtb	r2, r3
 80097a0:	4b12      	ldr	r3, [pc, #72]	; (80097ec <DMA2_Stream5_IRQHandler+0x6c>)
 80097a2:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_5] != NULL)
 80097a4:	4b13      	ldr	r3, [pc, #76]	; (80097f4 <DMA2_Stream5_IRQHandler+0x74>)
 80097a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d005      	beq.n	80097b8 <DMA2_Stream5_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_5]->hdma);
 80097ac:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <DMA2_Stream5_IRQHandler+0x74>)
 80097ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b0:	3304      	adds	r3, #4
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7f8 fb8c 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80097b8:	4b0c      	ldr	r3, [pc, #48]	; (80097ec <DMA2_Stream5_IRQHandler+0x6c>)
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d005      	beq.n	80097cc <DMA2_Stream5_IRQHandler+0x4c>
 80097c0:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <DMA2_Stream5_IRQHandler+0x6c>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	4b08      	ldr	r3, [pc, #32]	; (80097ec <DMA2_Stream5_IRQHandler+0x6c>)
 80097ca:	701a      	strb	r2, [r3, #0]
 80097cc:	4b07      	ldr	r3, [pc, #28]	; (80097ec <DMA2_Stream5_IRQHandler+0x6c>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d109      	bne.n	80097e8 <DMA2_Stream5_IRQHandler+0x68>
 80097d4:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <DMA2_Stream5_IRQHandler+0x70>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d005      	beq.n	80097e8 <DMA2_Stream5_IRQHandler+0x68>
 80097dc:	4b04      	ldr	r3, [pc, #16]	; (80097f0 <DMA2_Stream5_IRQHandler+0x70>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <DMA2_Stream5_IRQHandler+0x70>)
 80097e6:	701a      	strb	r2, [r3, #0]
}
 80097e8:	bf00      	nop
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	200050ea 	.word	0x200050ea
 80097f0:	200050e9 	.word	0x200050e9
 80097f4:	2000057c 	.word	0x2000057c

080097f8 <DMA2_Stream6_IRQHandler>:

/*
 * Function: DMA2_Stream6_IRQHandler
 */
void_t DMA2_Stream6_IRQHandler (void_t)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80097fc:	4b19      	ldr	r3, [pc, #100]	; (8009864 <DMA2_Stream6_IRQHandler+0x6c>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <DMA2_Stream6_IRQHandler+0x18>
 8009804:	4b18      	ldr	r3, [pc, #96]	; (8009868 <DMA2_Stream6_IRQHandler+0x70>)
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	3301      	adds	r3, #1
 800980a:	b2da      	uxtb	r2, r3
 800980c:	4b16      	ldr	r3, [pc, #88]	; (8009868 <DMA2_Stream6_IRQHandler+0x70>)
 800980e:	701a      	strb	r2, [r3, #0]
 8009810:	4b14      	ldr	r3, [pc, #80]	; (8009864 <DMA2_Stream6_IRQHandler+0x6c>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	b2da      	uxtb	r2, r3
 8009818:	4b12      	ldr	r3, [pc, #72]	; (8009864 <DMA2_Stream6_IRQHandler+0x6c>)
 800981a:	701a      	strb	r2, [r3, #0]

    if (pDMADescriptorLut[DRV_DMA_2_STREAM_6] != NULL)
 800981c:	4b13      	ldr	r3, [pc, #76]	; (800986c <DMA2_Stream6_IRQHandler+0x74>)
 800981e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009820:	2b00      	cmp	r3, #0
 8009822:	d005      	beq.n	8009830 <DMA2_Stream6_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_6]->hdma);
 8009824:	4b11      	ldr	r3, [pc, #68]	; (800986c <DMA2_Stream6_IRQHandler+0x74>)
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	3304      	adds	r3, #4
 800982a:	4618      	mov	r0, r3
 800982c:	f7f8 fb50 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 8009830:	4b0c      	ldr	r3, [pc, #48]	; (8009864 <DMA2_Stream6_IRQHandler+0x6c>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d005      	beq.n	8009844 <DMA2_Stream6_IRQHandler+0x4c>
 8009838:	4b0a      	ldr	r3, [pc, #40]	; (8009864 <DMA2_Stream6_IRQHandler+0x6c>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	3b01      	subs	r3, #1
 800983e:	b2da      	uxtb	r2, r3
 8009840:	4b08      	ldr	r3, [pc, #32]	; (8009864 <DMA2_Stream6_IRQHandler+0x6c>)
 8009842:	701a      	strb	r2, [r3, #0]
 8009844:	4b07      	ldr	r3, [pc, #28]	; (8009864 <DMA2_Stream6_IRQHandler+0x6c>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d109      	bne.n	8009860 <DMA2_Stream6_IRQHandler+0x68>
 800984c:	4b06      	ldr	r3, [pc, #24]	; (8009868 <DMA2_Stream6_IRQHandler+0x70>)
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <DMA2_Stream6_IRQHandler+0x68>
 8009854:	4b04      	ldr	r3, [pc, #16]	; (8009868 <DMA2_Stream6_IRQHandler+0x70>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	3b01      	subs	r3, #1
 800985a:	b2da      	uxtb	r2, r3
 800985c:	4b02      	ldr	r3, [pc, #8]	; (8009868 <DMA2_Stream6_IRQHandler+0x70>)
 800985e:	701a      	strb	r2, [r3, #0]
}
 8009860:	bf00      	nop
 8009862:	bd80      	pop	{r7, pc}
 8009864:	200050ea 	.word	0x200050ea
 8009868:	200050e9 	.word	0x200050e9
 800986c:	2000057c 	.word	0x2000057c

08009870 <DMA2_Stream7_IRQHandler>:

/*
 * Function: DMA2_Stream7_IRQHandler
 */
void_t DMA2_Stream7_IRQHandler (void_t)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8009874:	4b19      	ldr	r3, [pc, #100]	; (80098dc <DMA2_Stream7_IRQHandler+0x6c>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d105      	bne.n	8009888 <DMA2_Stream7_IRQHandler+0x18>
 800987c:	4b18      	ldr	r3, [pc, #96]	; (80098e0 <DMA2_Stream7_IRQHandler+0x70>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	3301      	adds	r3, #1
 8009882:	b2da      	uxtb	r2, r3
 8009884:	4b16      	ldr	r3, [pc, #88]	; (80098e0 <DMA2_Stream7_IRQHandler+0x70>)
 8009886:	701a      	strb	r2, [r3, #0]
 8009888:	4b14      	ldr	r3, [pc, #80]	; (80098dc <DMA2_Stream7_IRQHandler+0x6c>)
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	3301      	adds	r3, #1
 800988e:	b2da      	uxtb	r2, r3
 8009890:	4b12      	ldr	r3, [pc, #72]	; (80098dc <DMA2_Stream7_IRQHandler+0x6c>)
 8009892:	701a      	strb	r2, [r3, #0]


    if (pDMADescriptorLut[DRV_DMA_2_STREAM_7] != NULL)
 8009894:	4b13      	ldr	r3, [pc, #76]	; (80098e4 <DMA2_Stream7_IRQHandler+0x74>)
 8009896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <DMA2_Stream7_IRQHandler+0x38>
    {
        HAL_DMA_IRQHandler(&pDMADescriptorLut[DRV_DMA_2_STREAM_7]->hdma);
 800989c:	4b11      	ldr	r3, [pc, #68]	; (80098e4 <DMA2_Stream7_IRQHandler+0x74>)
 800989e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a0:	3304      	adds	r3, #4
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7f8 fb14 	bl	8001ed0 <HAL_DMA_IRQHandler>
    else
    {
        // Undefined interrupt.
    }

    GOS_ISR_EXIT
 80098a8:	4b0c      	ldr	r3, [pc, #48]	; (80098dc <DMA2_Stream7_IRQHandler+0x6c>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d005      	beq.n	80098bc <DMA2_Stream7_IRQHandler+0x4c>
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <DMA2_Stream7_IRQHandler+0x6c>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	4b08      	ldr	r3, [pc, #32]	; (80098dc <DMA2_Stream7_IRQHandler+0x6c>)
 80098ba:	701a      	strb	r2, [r3, #0]
 80098bc:	4b07      	ldr	r3, [pc, #28]	; (80098dc <DMA2_Stream7_IRQHandler+0x6c>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d109      	bne.n	80098d8 <DMA2_Stream7_IRQHandler+0x68>
 80098c4:	4b06      	ldr	r3, [pc, #24]	; (80098e0 <DMA2_Stream7_IRQHandler+0x70>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d005      	beq.n	80098d8 <DMA2_Stream7_IRQHandler+0x68>
 80098cc:	4b04      	ldr	r3, [pc, #16]	; (80098e0 <DMA2_Stream7_IRQHandler+0x70>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	4b02      	ldr	r3, [pc, #8]	; (80098e0 <DMA2_Stream7_IRQHandler+0x70>)
 80098d6:	701a      	strb	r2, [r3, #0]
}
 80098d8:	bf00      	nop
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	200050ea 	.word	0x200050ea
 80098e0:	200050e9 	.word	0x200050e9
 80098e4:	2000057c 	.word	0x2000057c

080098e8 <drv_gpioInit>:

/*
 * Function: drv_gpioInit
 */
gos_result_t drv_gpioInit (void_t)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gpioInitResult = GOS_SUCCESS;
 80098ee:	2355      	movs	r3, #85	; 0x55
 80098f0:	71fb      	strb	r3, [r7, #7]
    u8_t         gpioIdx        = 0u;
 80098f2:	2300      	movs	r3, #0
 80098f4:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (gpioConfig != NULL)
    {
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 80098f6:	2300      	movs	r3, #0
 80098f8:	71bb      	strb	r3, [r7, #6]
 80098fa:	e00e      	b.n	800991a <drv_gpioInit+0x32>
        {
            GOS_CONCAT_RESULT(gpioInitResult, drv_gpioInitPin(gpioIdx));
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	2b55      	cmp	r3, #85	; 0x55
 8009900:	d106      	bne.n	8009910 <drv_gpioInit+0x28>
 8009902:	79bb      	ldrb	r3, [r7, #6]
 8009904:	4618      	mov	r0, r3
 8009906:	f000 f81b 	bl	8009940 <drv_gpioInitPin>
 800990a:	4603      	mov	r3, r0
 800990c:	71fb      	strb	r3, [r7, #7]
 800990e:	e001      	b.n	8009914 <drv_gpioInit+0x2c>
 8009910:	23ae      	movs	r3, #174	; 0xae
 8009912:	71fb      	strb	r3, [r7, #7]
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 8009914:	79bb      	ldrb	r3, [r7, #6]
 8009916:	3301      	adds	r3, #1
 8009918:	71bb      	strb	r3, [r7, #6]
 800991a:	79bb      	ldrb	r3, [r7, #6]
 800991c:	4a06      	ldr	r2, [pc, #24]	; (8009938 <drv_gpioInit+0x50>)
 800991e:	6812      	ldr	r2, [r2, #0]
 8009920:	0892      	lsrs	r2, r2, #2
 8009922:	4906      	ldr	r1, [pc, #24]	; (800993c <drv_gpioInit+0x54>)
 8009924:	fba1 1202 	umull	r1, r2, r1, r2
 8009928:	4293      	cmp	r3, r2
 800992a:	d3e7      	bcc.n	80098fc <drv_gpioInit+0x14>
    else
    {
        // Configuration array is NULL pointer.
    }

    return gpioInitResult;
 800992c:	79fb      	ldrb	r3, [r7, #7]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	200005c0 	.word	0x200005c0
 800993c:	24924925 	.word	0x24924925

08009940 <drv_gpioInitPin>:

/*
 * Function: drv_gpioInitPin
 */
gos_result_t drv_gpioInitPin (u8_t pinIndex)
{
 8009940:	b590      	push	{r4, r7, lr}
 8009942:	b089      	sub	sp, #36	; 0x24
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 800994a:	23ae      	movs	r3, #174	; 0xae
 800994c:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 800994e:	f107 0308 	add.w	r3, r7, #8
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	605a      	str	r2, [r3, #4]
 8009958:	609a      	str	r2, [r3, #8]
 800995a:	60da      	str	r2, [r3, #12]
 800995c:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pinIndex < (gpioConfigSize / sizeof(drv_gpioDescriptor_t)))
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	4a40      	ldr	r2, [pc, #256]	; (8009a64 <drv_gpioInitPin+0x124>)
 8009962:	6812      	ldr	r2, [r2, #0]
 8009964:	0892      	lsrs	r2, r2, #2
 8009966:	4940      	ldr	r1, [pc, #256]	; (8009a68 <drv_gpioInitPin+0x128>)
 8009968:	fba1 1202 	umull	r1, r2, r1, r2
 800996c:	4293      	cmp	r3, r2
 800996e:	d274      	bcs.n	8009a5a <drv_gpioInitPin+0x11a>
    {
        gpioInit.Pin       = gpioConfig[pinIndex].pin;
 8009970:	79fa      	ldrb	r2, [r7, #7]
 8009972:	493e      	ldr	r1, [pc, #248]	; (8009a6c <drv_gpioInitPin+0x12c>)
 8009974:	4613      	mov	r3, r2
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	1a9b      	subs	r3, r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	440b      	add	r3, r1
 800997e:	3304      	adds	r3, #4
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = gpioConfig[pinIndex].mode;
 8009984:	79fa      	ldrb	r2, [r7, #7]
 8009986:	4939      	ldr	r1, [pc, #228]	; (8009a6c <drv_gpioInitPin+0x12c>)
 8009988:	4613      	mov	r3, r2
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	440b      	add	r3, r1
 8009992:	3308      	adds	r3, #8
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = gpioConfig[pinIndex].pull;
 8009998:	79fa      	ldrb	r2, [r7, #7]
 800999a:	4934      	ldr	r1, [pc, #208]	; (8009a6c <drv_gpioInitPin+0x12c>)
 800999c:	4613      	mov	r3, r2
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	1a9b      	subs	r3, r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	440b      	add	r3, r1
 80099a6:	3310      	adds	r3, #16
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = gpioConfig[pinIndex].speed;
 80099ac:	79fa      	ldrb	r2, [r7, #7]
 80099ae:	492f      	ldr	r1, [pc, #188]	; (8009a6c <drv_gpioInitPin+0x12c>)
 80099b0:	4613      	mov	r3, r2
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	440b      	add	r3, r1
 80099ba:	330c      	adds	r3, #12
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = gpioConfig[pinIndex].alternate;
 80099c0:	79fa      	ldrb	r2, [r7, #7]
 80099c2:	492a      	ldr	r1, [pc, #168]	; (8009a6c <drv_gpioInitPin+0x12c>)
 80099c4:	4613      	mov	r3, r2
 80099c6:	00db      	lsls	r3, r3, #3
 80099c8:	1a9b      	subs	r3, r3, r2
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	440b      	add	r3, r1
 80099ce:	3314      	adds	r3, #20
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	61bb      	str	r3, [r7, #24]

        HAL_GPIO_Init(gpioConfig[pinIndex].port, &gpioInit);
 80099d4:	79fa      	ldrb	r2, [r7, #7]
 80099d6:	4925      	ldr	r1, [pc, #148]	; (8009a6c <drv_gpioInitPin+0x12c>)
 80099d8:	4613      	mov	r3, r2
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	1a9b      	subs	r3, r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f107 0208 	add.w	r2, r7, #8
 80099e8:	4611      	mov	r1, r2
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f8 ffdc 	bl	80029a8 <HAL_GPIO_Init>

        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 80099f0:	79fa      	ldrb	r2, [r7, #7]
 80099f2:	491e      	ldr	r1, [pc, #120]	; (8009a6c <drv_gpioInitPin+0x12c>)
 80099f4:	4613      	mov	r3, r2
 80099f6:	00db      	lsls	r3, r3, #3
 80099f8:	1a9b      	subs	r3, r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	440b      	add	r3, r1
 80099fe:	3318      	adds	r3, #24
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d00a      	beq.n	8009a1c <drv_gpioInitPin+0xdc>
        	gpioConfig[pinIndex].defaultState == GPIO_STATE_LOW)
 8009a06:	79fa      	ldrb	r2, [r7, #7]
 8009a08:	4918      	ldr	r1, [pc, #96]	; (8009a6c <drv_gpioInitPin+0x12c>)
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	440b      	add	r3, r1
 8009a14:	3318      	adds	r3, #24
 8009a16:	781b      	ldrb	r3, [r3, #0]
        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d11c      	bne.n	8009a56 <drv_gpioInitPin+0x116>
        {
        	HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, gpioConfig[pinIndex].defaultState);
 8009a1c:	79fa      	ldrb	r2, [r7, #7]
 8009a1e:	4913      	ldr	r1, [pc, #76]	; (8009a6c <drv_gpioInitPin+0x12c>)
 8009a20:	4613      	mov	r3, r2
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	1a9b      	subs	r3, r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	6818      	ldr	r0, [r3, #0]
 8009a2c:	79fa      	ldrb	r2, [r7, #7]
 8009a2e:	490f      	ldr	r1, [pc, #60]	; (8009a6c <drv_gpioInitPin+0x12c>)
 8009a30:	4613      	mov	r3, r2
 8009a32:	00db      	lsls	r3, r3, #3
 8009a34:	1a9b      	subs	r3, r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	440b      	add	r3, r1
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	8819      	ldrh	r1, [r3, #0]
 8009a3e:	79fa      	ldrb	r2, [r7, #7]
 8009a40:	4c0a      	ldr	r4, [pc, #40]	; (8009a6c <drv_gpioInitPin+0x12c>)
 8009a42:	4613      	mov	r3, r2
 8009a44:	00db      	lsls	r3, r3, #3
 8009a46:	1a9b      	subs	r3, r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4423      	add	r3, r4
 8009a4c:	3318      	adds	r3, #24
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	f7f9 f93d 	bl	8002cd0 <HAL_GPIO_WritePin>
        else
        {
        	// No default state is defined.
        }

        gpioInitPinResult = GOS_SUCCESS;
 8009a56:	2355      	movs	r3, #85	; 0x55
 8009a58:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Index error.
    }

    return gpioInitPinResult;
 8009a5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3724      	adds	r7, #36	; 0x24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd90      	pop	{r4, r7, pc}
 8009a64:	200005c0 	.word	0x200005c0
 8009a68:	24924925 	.word	0x24924925
 8009a6c:	08019914 	.word	0x08019914

08009a70 <drv_gpioWritePin>:

/*
 * Function: drv_gpioWritePin
 */
gos_result_t drv_gpioWritePin (u8_t pinIndex, drv_gpioState_t state)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	460a      	mov	r2, r1
 8009a7a:	71fb      	strb	r3, [r7, #7]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	71bb      	strb	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t gpioWritePinResult = GOS_ERROR;
 8009a80:	23ae      	movs	r3, #174	; 0xae
 8009a82:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t) && state >= GPIO_STATE_LOW &&
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	4a13      	ldr	r2, [pc, #76]	; (8009ad4 <drv_gpioWritePin+0x64>)
 8009a88:	6812      	ldr	r2, [r2, #0]
 8009a8a:	0892      	lsrs	r2, r2, #2
 8009a8c:	4912      	ldr	r1, [pc, #72]	; (8009ad8 <drv_gpioWritePin+0x68>)
 8009a8e:	fba1 1202 	umull	r1, r2, r1, r2
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d219      	bcs.n	8009aca <drv_gpioWritePin+0x5a>
 8009a96:	79bb      	ldrb	r3, [r7, #6]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d816      	bhi.n	8009aca <drv_gpioWritePin+0x5a>
        state <= GPIO_STATE_HIGH)
    {
        HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, state);
 8009a9c:	79fa      	ldrb	r2, [r7, #7]
 8009a9e:	490f      	ldr	r1, [pc, #60]	; (8009adc <drv_gpioWritePin+0x6c>)
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	1a9b      	subs	r3, r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	440b      	add	r3, r1
 8009aaa:	6818      	ldr	r0, [r3, #0]
 8009aac:	79fa      	ldrb	r2, [r7, #7]
 8009aae:	490b      	ldr	r1, [pc, #44]	; (8009adc <drv_gpioWritePin+0x6c>)
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	1a9b      	subs	r3, r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	440b      	add	r3, r1
 8009aba:	3304      	adds	r3, #4
 8009abc:	881b      	ldrh	r3, [r3, #0]
 8009abe:	79ba      	ldrb	r2, [r7, #6]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	f7f9 f905 	bl	8002cd0 <HAL_GPIO_WritePin>
        gpioWritePinResult = GOS_SUCCESS;
 8009ac6:	2355      	movs	r3, #85	; 0x55
 8009ac8:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioWritePinResult;
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	200005c0 	.word	0x200005c0
 8009ad8:	24924925 	.word	0x24924925
 8009adc:	08019914 	.word	0x08019914

08009ae0 <drv_gpioTgglePin>:

/*
 * Function: drv_gpioTgglePin
 */
gos_result_t drv_gpioTgglePin (u8_t pinIndex)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t gpioTogglePinResult = GOS_ERROR;
 8009aea:	23ae      	movs	r3, #174	; 0xae
 8009aec:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t))
 8009aee:	79fb      	ldrb	r3, [r7, #7]
 8009af0:	4a11      	ldr	r2, [pc, #68]	; (8009b38 <drv_gpioTgglePin+0x58>)
 8009af2:	6812      	ldr	r2, [r2, #0]
 8009af4:	0892      	lsrs	r2, r2, #2
 8009af6:	4911      	ldr	r1, [pc, #68]	; (8009b3c <drv_gpioTgglePin+0x5c>)
 8009af8:	fba1 1202 	umull	r1, r2, r1, r2
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d215      	bcs.n	8009b2c <drv_gpioTgglePin+0x4c>
    {
        HAL_GPIO_TogglePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin);
 8009b00:	79fa      	ldrb	r2, [r7, #7]
 8009b02:	490f      	ldr	r1, [pc, #60]	; (8009b40 <drv_gpioTgglePin+0x60>)
 8009b04:	4613      	mov	r3, r2
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	1a9b      	subs	r3, r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	440b      	add	r3, r1
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	79fa      	ldrb	r2, [r7, #7]
 8009b12:	490b      	ldr	r1, [pc, #44]	; (8009b40 <drv_gpioTgglePin+0x60>)
 8009b14:	4613      	mov	r3, r2
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	1a9b      	subs	r3, r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	440b      	add	r3, r1
 8009b1e:	3304      	adds	r3, #4
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	4619      	mov	r1, r3
 8009b24:	f7f9 f8ed 	bl	8002d02 <HAL_GPIO_TogglePin>
        gpioTogglePinResult = GOS_SUCCESS;
 8009b28:	2355      	movs	r3, #85	; 0x55
 8009b2a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioTogglePinResult;
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	200005c0 	.word	0x200005c0
 8009b3c:	24924925 	.word	0x24924925
 8009b40:	08019914 	.word	0x08019914

08009b44 <EXTI9_5_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI9_5_IRQHandler (void_t)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8009b48:	4b1d      	ldr	r3, [pc, #116]	; (8009bc0 <EXTI9_5_IRQHandler+0x7c>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d105      	bne.n	8009b5c <EXTI9_5_IRQHandler+0x18>
 8009b50:	4b1c      	ldr	r3, [pc, #112]	; (8009bc4 <EXTI9_5_IRQHandler+0x80>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	4b1a      	ldr	r3, [pc, #104]	; (8009bc4 <EXTI9_5_IRQHandler+0x80>)
 8009b5a:	701a      	strb	r2, [r3, #0]
 8009b5c:	4b18      	ldr	r3, [pc, #96]	; (8009bc0 <EXTI9_5_IRQHandler+0x7c>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	3301      	adds	r3, #1
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	4b16      	ldr	r3, [pc, #88]	; (8009bc0 <EXTI9_5_IRQHandler+0x7c>)
 8009b66:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8009b68:	2020      	movs	r0, #32
 8009b6a:	f7f9 f8e5 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8009b6e:	2040      	movs	r0, #64	; 0x40
 8009b70:	f7f9 f8e2 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8009b74:	2080      	movs	r0, #128	; 0x80
 8009b76:	f7f9 f8df 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8009b7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009b7e:	f7f9 f8db 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8009b82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009b86:	f7f9 f8d7 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <EXTI9_5_IRQHandler+0x7c>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d005      	beq.n	8009b9e <EXTI9_5_IRQHandler+0x5a>
 8009b92:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <EXTI9_5_IRQHandler+0x7c>)
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <EXTI9_5_IRQHandler+0x7c>)
 8009b9c:	701a      	strb	r2, [r3, #0]
 8009b9e:	4b08      	ldr	r3, [pc, #32]	; (8009bc0 <EXTI9_5_IRQHandler+0x7c>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d109      	bne.n	8009bba <EXTI9_5_IRQHandler+0x76>
 8009ba6:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <EXTI9_5_IRQHandler+0x80>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d005      	beq.n	8009bba <EXTI9_5_IRQHandler+0x76>
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <EXTI9_5_IRQHandler+0x80>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <EXTI9_5_IRQHandler+0x80>)
 8009bb8:	701a      	strb	r2, [r3, #0]
}
 8009bba:	bf00      	nop
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	200050ea 	.word	0x200050ea
 8009bc4:	200050e9 	.word	0x200050e9

08009bc8 <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI15_10_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8009bcc:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <EXTI15_10_IRQHandler+0x88>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d105      	bne.n	8009be0 <EXTI15_10_IRQHandler+0x18>
 8009bd4:	4b1f      	ldr	r3, [pc, #124]	; (8009c54 <EXTI15_10_IRQHandler+0x8c>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	3301      	adds	r3, #1
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	4b1d      	ldr	r3, [pc, #116]	; (8009c54 <EXTI15_10_IRQHandler+0x8c>)
 8009bde:	701a      	strb	r2, [r3, #0]
 8009be0:	4b1b      	ldr	r3, [pc, #108]	; (8009c50 <EXTI15_10_IRQHandler+0x88>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	3301      	adds	r3, #1
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	4b19      	ldr	r3, [pc, #100]	; (8009c50 <EXTI15_10_IRQHandler+0x88>)
 8009bea:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8009bec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009bf0:	f7f9 f8a2 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8009bf4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009bf8:	f7f9 f89e 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8009bfc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009c00:	f7f9 f89a 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8009c04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009c08:	f7f9 f896 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8009c0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009c10:	f7f9 f892 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8009c14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009c18:	f7f9 f88e 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 8009c1c:	4b0c      	ldr	r3, [pc, #48]	; (8009c50 <EXTI15_10_IRQHandler+0x88>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d005      	beq.n	8009c30 <EXTI15_10_IRQHandler+0x68>
 8009c24:	4b0a      	ldr	r3, [pc, #40]	; (8009c50 <EXTI15_10_IRQHandler+0x88>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	4b08      	ldr	r3, [pc, #32]	; (8009c50 <EXTI15_10_IRQHandler+0x88>)
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <EXTI15_10_IRQHandler+0x88>)
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d109      	bne.n	8009c4c <EXTI15_10_IRQHandler+0x84>
 8009c38:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <EXTI15_10_IRQHandler+0x8c>)
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <EXTI15_10_IRQHandler+0x84>
 8009c40:	4b04      	ldr	r3, [pc, #16]	; (8009c54 <EXTI15_10_IRQHandler+0x8c>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <EXTI15_10_IRQHandler+0x8c>)
 8009c4a:	701a      	strb	r2, [r3, #0]
}
 8009c4c:	bf00      	nop
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	200050ea 	.word	0x200050ea
 8009c54:	200050e9 	.word	0x200050e9

08009c58 <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t pin)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 8009c62:	4b27      	ldr	r3, [pc, #156]	; (8009d00 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d105      	bne.n	8009c76 <HAL_GPIO_EXTI_Callback+0x1e>
 8009c6a:	4b26      	ldr	r3, [pc, #152]	; (8009d04 <HAL_GPIO_EXTI_Callback+0xac>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	4b24      	ldr	r3, [pc, #144]	; (8009d04 <HAL_GPIO_EXTI_Callback+0xac>)
 8009c74:	701a      	strb	r2, [r3, #0]
 8009c76:	4b22      	ldr	r3, [pc, #136]	; (8009d00 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	4b20      	ldr	r3, [pc, #128]	; (8009d00 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009c80:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */
    if (gpioItConfig != NULL)
    {
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]
 8009c8a:	e016      	b.n	8009cba <HAL_GPIO_EXTI_Callback+0x62>
        {
            if (gpioItConfig[callbackIndex].pin == pin && gpioItConfig[callbackIndex].callback != NULL)
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
 8009c8e:	4a1e      	ldr	r2, [pc, #120]	; (8009d08 <HAL_GPIO_EXTI_Callback+0xb0>)
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	4413      	add	r3, r2
 8009c94:	889b      	ldrh	r3, [r3, #4]
 8009c96:	88fa      	ldrh	r2, [r7, #6]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d10b      	bne.n	8009cb4 <HAL_GPIO_EXTI_Callback+0x5c>
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	4a1a      	ldr	r2, [pc, #104]	; (8009d08 <HAL_GPIO_EXTI_Callback+0xb0>)
 8009ca0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <HAL_GPIO_EXTI_Callback+0x5c>
            {
                gpioItConfig[callbackIndex].callback();
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
 8009caa:	4a17      	ldr	r2, [pc, #92]	; (8009d08 <HAL_GPIO_EXTI_Callback+0xb0>)
 8009cac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cb0:	4798      	blx	r3
                break;
 8009cb2:	e008      	b.n	8009cc6 <HAL_GPIO_EXTI_Callback+0x6e>
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	73fb      	strb	r3, [r7, #15]
 8009cba:	7bfa      	ldrb	r2, [r7, #15]
 8009cbc:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <HAL_GPIO_EXTI_Callback+0xb4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	08db      	lsrs	r3, r3, #3
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d3e2      	bcc.n	8009c8c <HAL_GPIO_EXTI_Callback+0x34>
    else
    {
        // Configuration array is NULL.
    }

    GOS_ISR_EXIT
 8009cc6:	4b0e      	ldr	r3, [pc, #56]	; (8009d00 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d005      	beq.n	8009cda <HAL_GPIO_EXTI_Callback+0x82>
 8009cce:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009cd8:	701a      	strb	r2, [r3, #0]
 8009cda:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <HAL_GPIO_EXTI_Callback+0xa8>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d109      	bne.n	8009cf6 <HAL_GPIO_EXTI_Callback+0x9e>
 8009ce2:	4b08      	ldr	r3, [pc, #32]	; (8009d04 <HAL_GPIO_EXTI_Callback+0xac>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d005      	beq.n	8009cf6 <HAL_GPIO_EXTI_Callback+0x9e>
 8009cea:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <HAL_GPIO_EXTI_Callback+0xac>)
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	4b04      	ldr	r3, [pc, #16]	; (8009d04 <HAL_GPIO_EXTI_Callback+0xac>)
 8009cf4:	701a      	strb	r2, [r3, #0]
}
 8009cf6:	bf00      	nop
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	200050ea 	.word	0x200050ea
 8009d04:	200050e9 	.word	0x200050e9
 8009d08:	08019a80 	.word	0x08019a80
 8009d0c:	20002618 	.word	0x20002618

08009d10 <drv_i2cInit>:

/*
 * Function: drv_i2cInit
 */
gos_result_t drv_i2cInit (void_t)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t i2cDriverInitResult = GOS_SUCCESS;
 8009d16:	2355      	movs	r3, #85	; 0x55
 8009d18:	71fb      	strb	r3, [r7, #7]
    u8_t         i2cIdx              = 0u;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (i2cConfig != NULL)
    {
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 8009d1e:	2300      	movs	r3, #0
 8009d20:	71bb      	strb	r3, [r7, #6]
 8009d22:	e013      	b.n	8009d4c <drv_i2cInit+0x3c>
        {
            GOS_CONCAT_RESULT(i2cDriverInitResult, drv_i2cInitInstance(&i2cConfig[i2cIdx]));
 8009d24:	79fb      	ldrb	r3, [r7, #7]
 8009d26:	2b55      	cmp	r3, #85	; 0x55
 8009d28:	d10b      	bne.n	8009d42 <drv_i2cInit+0x32>
 8009d2a:	79bb      	ldrb	r3, [r7, #6]
 8009d2c:	222c      	movs	r2, #44	; 0x2c
 8009d2e:	fb02 f303 	mul.w	r3, r2, r3
 8009d32:	4a0d      	ldr	r2, [pc, #52]	; (8009d68 <drv_i2cInit+0x58>)
 8009d34:	4413      	add	r3, r2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f81c 	bl	8009d74 <drv_i2cInitInstance>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	71fb      	strb	r3, [r7, #7]
 8009d40:	e001      	b.n	8009d46 <drv_i2cInit+0x36>
 8009d42:	23ae      	movs	r3, #174	; 0xae
 8009d44:	71fb      	strb	r3, [r7, #7]
        for (i2cIdx = 0u; i2cIdx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); i2cIdx++)
 8009d46:	79bb      	ldrb	r3, [r7, #6]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	71bb      	strb	r3, [r7, #6]
 8009d4c:	79ba      	ldrb	r2, [r7, #6]
 8009d4e:	4b07      	ldr	r3, [pc, #28]	; (8009d6c <drv_i2cInit+0x5c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4907      	ldr	r1, [pc, #28]	; (8009d70 <drv_i2cInit+0x60>)
 8009d54:	fba1 1303 	umull	r1, r3, r1, r3
 8009d58:	095b      	lsrs	r3, r3, #5
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d3e2      	bcc.n	8009d24 <drv_i2cInit+0x14>
    {
        // Configuration array is NULL pointer.
        i2cDriverInitResult = GOS_ERROR;
    }

    return i2cDriverInitResult;
 8009d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	08019a80 	.word	0x08019a80
 8009d6c:	2000261c 	.word	0x2000261c
 8009d70:	ba2e8ba3 	.word	0xba2e8ba3

08009d74 <drv_i2cInitInstance>:

/*
 * Function: drv_i2cInitInstance
 */
gos_result_t drv_i2cInitInstance (GOS_CONST drv_i2cDescriptor_t* pInstance)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            i2cInitResult = GOS_ERROR;
 8009d7c:	23ae      	movs	r3, #174	; 0xae
 8009d7e:	73fb      	strb	r3, [r7, #15]
    drv_i2cPeriphInstance_t instance      = 0u;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pInstance != NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 80e7 	beq.w	8009f5a <drv_i2cInitInstance+0x1e6>
    {
        instance = pInstance->periphInstance;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	73bb      	strb	r3, [r7, #14]

        hi2cs[instance].Instance             = i2cInstanceLut[instance];
 8009d92:	7bba      	ldrb	r2, [r7, #14]
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	4973      	ldr	r1, [pc, #460]	; (8009f64 <drv_i2cInitInstance+0x1f0>)
 8009d98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009d9c:	4972      	ldr	r1, [pc, #456]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009d9e:	2054      	movs	r0, #84	; 0x54
 8009da0:	fb00 f303 	mul.w	r3, r0, r3
 8009da4:	440b      	add	r3, r1
 8009da6:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.ClockSpeed      = pInstance->clockSpeed;
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	6852      	ldr	r2, [r2, #4]
 8009dae:	496e      	ldr	r1, [pc, #440]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009db0:	2054      	movs	r0, #84	; 0x54
 8009db2:	fb00 f303 	mul.w	r3, r0, r3
 8009db6:	440b      	add	r3, r1
 8009db8:	3304      	adds	r3, #4
 8009dba:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DutyCycle       = pInstance->dutyCycle;
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	6892      	ldr	r2, [r2, #8]
 8009dc2:	4969      	ldr	r1, [pc, #420]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009dc4:	2054      	movs	r0, #84	; 0x54
 8009dc6:	fb00 f303 	mul.w	r3, r0, r3
 8009dca:	440b      	add	r3, r1
 8009dcc:	3308      	adds	r3, #8
 8009dce:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.AddressingMode  = pInstance->addressingMode;
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6912      	ldr	r2, [r2, #16]
 8009dd6:	4964      	ldr	r1, [pc, #400]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009dd8:	2054      	movs	r0, #84	; 0x54
 8009dda:	fb00 f303 	mul.w	r3, r0, r3
 8009dde:	440b      	add	r3, r1
 8009de0:	3310      	adds	r3, #16
 8009de2:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress1     = pInstance->ownAddress1;
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	68d2      	ldr	r2, [r2, #12]
 8009dea:	495f      	ldr	r1, [pc, #380]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009dec:	2054      	movs	r0, #84	; 0x54
 8009dee:	fb00 f303 	mul.w	r3, r0, r3
 8009df2:	440b      	add	r3, r1
 8009df4:	330c      	adds	r3, #12
 8009df6:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.OwnAddress2     = pInstance->ownAddress2;
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	6992      	ldr	r2, [r2, #24]
 8009dfe:	495a      	ldr	r1, [pc, #360]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009e00:	2054      	movs	r0, #84	; 0x54
 8009e02:	fb00 f303 	mul.w	r3, r0, r3
 8009e06:	440b      	add	r3, r1
 8009e08:	3318      	adds	r3, #24
 8009e0a:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.DualAddressMode = pInstance->dualAddressMode;
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	6952      	ldr	r2, [r2, #20]
 8009e12:	4955      	ldr	r1, [pc, #340]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009e14:	2054      	movs	r0, #84	; 0x54
 8009e16:	fb00 f303 	mul.w	r3, r0, r3
 8009e1a:	440b      	add	r3, r1
 8009e1c:	3314      	adds	r3, #20
 8009e1e:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.GeneralCallMode = pInstance->generalCallMode;
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	69d2      	ldr	r2, [r2, #28]
 8009e26:	4950      	ldr	r1, [pc, #320]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009e28:	2054      	movs	r0, #84	; 0x54
 8009e2a:	fb00 f303 	mul.w	r3, r0, r3
 8009e2e:	440b      	add	r3, r1
 8009e30:	331c      	adds	r3, #28
 8009e32:	601a      	str	r2, [r3, #0]
        hi2cs[instance].Init.NoStretchMode   = pInstance->noStretchMode;
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	6a12      	ldr	r2, [r2, #32]
 8009e3a:	494b      	ldr	r1, [pc, #300]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009e3c:	2054      	movs	r0, #84	; 0x54
 8009e3e:	fb00 f303 	mul.w	r3, r0, r3
 8009e42:	440b      	add	r3, r1
 8009e44:	3320      	adds	r3, #32
 8009e46:	601a      	str	r2, [r3, #0]

        HAL_I2C_DeInit(&hi2cs[instance]);
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	2254      	movs	r2, #84	; 0x54
 8009e4c:	fb02 f303 	mul.w	r3, r2, r3
 8009e50:	4a45      	ldr	r2, [pc, #276]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009e52:	4413      	add	r3, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7f9 f8cb 	bl	8002ff0 <HAL_I2C_DeInit>

        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	2254      	movs	r2, #84	; 0x54
 8009e5e:	fb02 f303 	mul.w	r3, r2, r3
 8009e62:	4a41      	ldr	r2, [pc, #260]	; (8009f68 <drv_i2cInitInstance+0x1f4>)
 8009e64:	4413      	add	r3, r2
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7f8 ff7e 	bl	8002d68 <HAL_I2C_Init>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d173      	bne.n	8009f5a <drv_i2cInitInstance+0x1e6>
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4a3d      	ldr	r2, [pc, #244]	; (8009f6c <drv_i2cInitInstance+0x1f8>)
 8009e78:	4413      	add	r3, r2
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f008 fa0a 	bl	8012294 <gos_mutexInit>
 8009e80:	4603      	mov	r3, r0
        if (HAL_I2C_Init    (&hi2cs[instance])                 == HAL_OK      &&
 8009e82:	2b55      	cmp	r3, #85	; 0x55
 8009e84:	d169      	bne.n	8009f5a <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8009e86:	7bba      	ldrb	r2, [r7, #14]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	4413      	add	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4a37      	ldr	r2, [pc, #220]	; (8009f70 <drv_i2cInitInstance+0x1fc>)
 8009e92:	4413      	add	r3, r2
 8009e94:	4618      	mov	r0, r3
 8009e96:	f00a fead 	bl	8014bf4 <gos_triggerInit>
 8009e9a:	4603      	mov	r3, r0
            gos_mutexInit   (&i2cMutexes[instance])            == GOS_SUCCESS &&
 8009e9c:	2b55      	cmp	r3, #85	; 0x55
 8009e9e:	d15c      	bne.n	8009f5a <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8009ea0:	7bba      	ldrb	r2, [r7, #14]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	4413      	add	r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4a32      	ldr	r2, [pc, #200]	; (8009f74 <drv_i2cInitInstance+0x200>)
 8009eac:	4413      	add	r3, r2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f00a fea0 	bl	8014bf4 <gos_triggerInit>
 8009eb4:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8009eb6:	2b55      	cmp	r3, #85	; 0x55
 8009eb8:	d14f      	bne.n	8009f5a <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 8009eba:	7bba      	ldrb	r2, [r7, #14]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	4413      	add	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4a2c      	ldr	r2, [pc, #176]	; (8009f78 <drv_i2cInitInstance+0x204>)
 8009ec6:	4413      	add	r3, r2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f00a fe93 	bl	8014bf4 <gos_triggerInit>
 8009ece:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8009ed0:	2b55      	cmp	r3, #85	; 0x55
 8009ed2:	d142      	bne.n	8009f5a <drv_i2cInitInstance+0x1e6>
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 8009ed4:	7bba      	ldrb	r2, [r7, #14]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	4413      	add	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4a27      	ldr	r2, [pc, #156]	; (8009f7c <drv_i2cInitInstance+0x208>)
 8009ee0:	4413      	add	r3, r2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f00a fe86 	bl	8014bf4 <gos_triggerInit>
 8009ee8:	4603      	mov	r3, r0
            gos_triggerInit (&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 8009eea:	2b55      	cmp	r3, #85	; 0x55
 8009eec:	d135      	bne.n	8009f5a <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8009eee:	7bba      	ldrb	r2, [r7, #14]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	4413      	add	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4a1d      	ldr	r2, [pc, #116]	; (8009f70 <drv_i2cInitInstance+0x1fc>)
 8009efa:	4413      	add	r3, r2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f00a fe95 	bl	8014c2c <gos_triggerReset>
 8009f02:	4603      	mov	r3, r0
            gos_triggerInit (&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 8009f04:	2b55      	cmp	r3, #85	; 0x55
 8009f06:	d128      	bne.n	8009f5a <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8009f08:	7bba      	ldrb	r2, [r7, #14]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	005b      	lsls	r3, r3, #1
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4a18      	ldr	r2, [pc, #96]	; (8009f74 <drv_i2cInitInstance+0x200>)
 8009f14:	4413      	add	r3, r2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f00a fe88 	bl	8014c2c <gos_triggerReset>
 8009f1c:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxReadyTriggers[instance])    == GOS_SUCCESS &&
 8009f1e:	2b55      	cmp	r3, #85	; 0x55
 8009f20:	d11b      	bne.n	8009f5a <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 8009f22:	7bba      	ldrb	r2, [r7, #14]
 8009f24:	4613      	mov	r3, r2
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4a12      	ldr	r2, [pc, #72]	; (8009f78 <drv_i2cInitInstance+0x204>)
 8009f2e:	4413      	add	r3, r2
 8009f30:	4618      	mov	r0, r3
 8009f32:	f00a fe7b 	bl	8014c2c <gos_triggerReset>
 8009f36:	4603      	mov	r3, r0
            gos_triggerReset(&i2cTxReadyTriggers[instance])    == GOS_SUCCESS &&
 8009f38:	2b55      	cmp	r3, #85	; 0x55
 8009f3a:	d10e      	bne.n	8009f5a <drv_i2cInitInstance+0x1e6>
            gos_triggerReset(&i2cTxMemReadyTriggers[instance]) == GOS_SUCCESS
 8009f3c:	7bba      	ldrb	r2, [r7, #14]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	4413      	add	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4a0d      	ldr	r2, [pc, #52]	; (8009f7c <drv_i2cInitInstance+0x208>)
 8009f48:	4413      	add	r3, r2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f00a fe6e 	bl	8014c2c <gos_triggerReset>
 8009f50:	4603      	mov	r3, r0
            gos_triggerReset(&i2cRxMemReadyTriggers[instance]) == GOS_SUCCESS &&
 8009f52:	2b55      	cmp	r3, #85	; 0x55
 8009f54:	d101      	bne.n	8009f5a <drv_i2cInitInstance+0x1e6>
            )
        {
            i2cInitResult = GOS_SUCCESS;
 8009f56:	2355      	movs	r3, #85	; 0x55
 8009f58:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return i2cInitResult;
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	200006b0 	.word	0x200006b0
 8009f68:	20002644 	.word	0x20002644
 8009f6c:	20002740 	.word	0x20002740
 8009f70:	2000274c 	.word	0x2000274c
 8009f74:	20002770 	.word	0x20002770
 8009f78:	20002794 	.word	0x20002794
 8009f7c:	200027b8 	.word	0x200027b8

08009f80 <HAL_I2C_MasterTxCpltCallback>:

/*
 * Function: HAL_I2C_MasterTxCpltCallback
 */
void_t HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d103      	bne.n	8009f9c <HAL_I2C_MasterTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_1]);
 8009f94:	4809      	ldr	r0, [pc, #36]	; (8009fbc <HAL_I2C_MasterTxCpltCallback+0x3c>)
 8009f96:	f00a ff51 	bl	8014e3c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8009f9a:	e008      	b.n	8009fae <HAL_I2C_MasterTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d102      	bne.n	8009fae <HAL_I2C_MasterTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxReadyTriggers[DRV_I2C_INSTANCE_2]);
 8009fa8:	4805      	ldr	r0, [pc, #20]	; (8009fc0 <HAL_I2C_MasterTxCpltCallback+0x40>)
 8009faa:	f00a ff47 	bl	8014e3c <gos_triggerIncrement>
}
 8009fae:	bf00      	nop
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	200006b0 	.word	0x200006b0
 8009fbc:	20002770 	.word	0x20002770
 8009fc0:	2000277c 	.word	0x2000277c

08009fc4 <HAL_I2C_MemTxCpltCallback>:

/*
 * Function: HAL_I2C_MemTxCpltCallback
 */
void_t HAL_I2C_MemTxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <HAL_I2C_MemTxCpltCallback+0x38>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d103      	bne.n	8009fe0 <HAL_I2C_MemTxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 8009fd8:	4809      	ldr	r0, [pc, #36]	; (800a000 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8009fda:	f00a ff2f 	bl	8014e3c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 8009fde:	e008      	b.n	8009ff2 <HAL_I2C_MemTxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <HAL_I2C_MemTxCpltCallback+0x38>)
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d102      	bne.n	8009ff2 <HAL_I2C_MemTxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cTxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 8009fec:	4805      	ldr	r0, [pc, #20]	; (800a004 <HAL_I2C_MemTxCpltCallback+0x40>)
 8009fee:	f00a ff25 	bl	8014e3c <gos_triggerIncrement>
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	200006b0 	.word	0x200006b0
 800a000:	200027b8 	.word	0x200027b8
 800a004:	200027c4 	.word	0x200027c4

0800a008 <HAL_I2C_MasterRxCpltCallback>:

/*
 * Function: HAL_I2C_MasterRxCpltCallback
 */
void_t HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	4b0a      	ldr	r3, [pc, #40]	; (800a040 <HAL_I2C_MasterRxCpltCallback+0x38>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d103      	bne.n	800a024 <HAL_I2C_MasterRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_1]);
 800a01c:	4809      	ldr	r0, [pc, #36]	; (800a044 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 800a01e:	f00a ff0d 	bl	8014e3c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800a022:	e008      	b.n	800a036 <HAL_I2C_MasterRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	4b05      	ldr	r3, [pc, #20]	; (800a040 <HAL_I2C_MasterRxCpltCallback+0x38>)
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d102      	bne.n	800a036 <HAL_I2C_MasterRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxReadyTriggers[DRV_I2C_INSTANCE_2]);
 800a030:	4805      	ldr	r0, [pc, #20]	; (800a048 <HAL_I2C_MasterRxCpltCallback+0x40>)
 800a032:	f00a ff03 	bl	8014e3c <gos_triggerIncrement>
}
 800a036:	bf00      	nop
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	200006b0 	.word	0x200006b0
 800a044:	2000274c 	.word	0x2000274c
 800a048:	20002758 	.word	0x20002758

0800a04c <HAL_I2C_MemRxCpltCallback>:

/*
 * Function: HAL_I2C_MemRxCpltCallback
 */
void_t HAL_I2C_MemRxCpltCallback (I2C_HandleTypeDef* hi2c)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_1])
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <HAL_I2C_MemRxCpltCallback+0x38>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d103      	bne.n	800a068 <HAL_I2C_MemRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_1]);
 800a060:	4809      	ldr	r0, [pc, #36]	; (800a088 <HAL_I2C_MemRxCpltCallback+0x3c>)
 800a062:	f00a feeb 	bl	8014e3c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800a066:	e008      	b.n	800a07a <HAL_I2C_MemRxCpltCallback+0x2e>
    else if (hi2c->Instance == i2cInstanceLut[DRV_I2C_INSTANCE_2])
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	4b05      	ldr	r3, [pc, #20]	; (800a084 <HAL_I2C_MemRxCpltCallback+0x38>)
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	429a      	cmp	r2, r3
 800a072:	d102      	bne.n	800a07a <HAL_I2C_MemRxCpltCallback+0x2e>
        (void_t) gos_triggerIncrement(&i2cRxMemReadyTriggers[DRV_I2C_INSTANCE_2]);
 800a074:	4805      	ldr	r0, [pc, #20]	; (800a08c <HAL_I2C_MemRxCpltCallback+0x40>)
 800a076:	f00a fee1 	bl	8014e3c <gos_triggerIncrement>
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	200006b0 	.word	0x200006b0
 800a088:	20002794 	.word	0x20002794
 800a08c:	200027a0 	.word	0x200027a0

0800a090 <I2C1_EV_IRQHandler>:

/*
 * Function: I2C1_EV_IRQHandler
 */
void_t I2C1_EV_IRQHandler (void_t)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a094:	4b16      	ldr	r3, [pc, #88]	; (800a0f0 <I2C1_EV_IRQHandler+0x60>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d105      	bne.n	800a0a8 <I2C1_EV_IRQHandler+0x18>
 800a09c:	4b15      	ldr	r3, [pc, #84]	; (800a0f4 <I2C1_EV_IRQHandler+0x64>)
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <I2C1_EV_IRQHandler+0x64>)
 800a0a6:	701a      	strb	r2, [r3, #0]
 800a0a8:	4b11      	ldr	r3, [pc, #68]	; (800a0f0 <I2C1_EV_IRQHandler+0x60>)
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <I2C1_EV_IRQHandler+0x60>)
 800a0b2:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_1]);
 800a0b4:	4810      	ldr	r0, [pc, #64]	; (800a0f8 <I2C1_EV_IRQHandler+0x68>)
 800a0b6:	f7f8 ffd4 	bl	8003062 <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 800a0ba:	4b0d      	ldr	r3, [pc, #52]	; (800a0f0 <I2C1_EV_IRQHandler+0x60>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d005      	beq.n	800a0ce <I2C1_EV_IRQHandler+0x3e>
 800a0c2:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <I2C1_EV_IRQHandler+0x60>)
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	b2da      	uxtb	r2, r3
 800a0ca:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <I2C1_EV_IRQHandler+0x60>)
 800a0cc:	701a      	strb	r2, [r3, #0]
 800a0ce:	4b08      	ldr	r3, [pc, #32]	; (800a0f0 <I2C1_EV_IRQHandler+0x60>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d109      	bne.n	800a0ea <I2C1_EV_IRQHandler+0x5a>
 800a0d6:	4b07      	ldr	r3, [pc, #28]	; (800a0f4 <I2C1_EV_IRQHandler+0x64>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d005      	beq.n	800a0ea <I2C1_EV_IRQHandler+0x5a>
 800a0de:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <I2C1_EV_IRQHandler+0x64>)
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	b2da      	uxtb	r2, r3
 800a0e6:	4b03      	ldr	r3, [pc, #12]	; (800a0f4 <I2C1_EV_IRQHandler+0x64>)
 800a0e8:	701a      	strb	r2, [r3, #0]
}
 800a0ea:	bf00      	nop
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	200050ea 	.word	0x200050ea
 800a0f4:	200050e9 	.word	0x200050e9
 800a0f8:	20002644 	.word	0x20002644

0800a0fc <I2C2_EV_IRQHandler>:

/*
 * Function: I2C2_EV_IRQHandler
 */
void_t I2C2_EV_IRQHandler (void_t)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a100:	4b16      	ldr	r3, [pc, #88]	; (800a15c <I2C2_EV_IRQHandler+0x60>)
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d105      	bne.n	800a114 <I2C2_EV_IRQHandler+0x18>
 800a108:	4b15      	ldr	r3, [pc, #84]	; (800a160 <I2C2_EV_IRQHandler+0x64>)
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	3301      	adds	r3, #1
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	4b13      	ldr	r3, [pc, #76]	; (800a160 <I2C2_EV_IRQHandler+0x64>)
 800a112:	701a      	strb	r2, [r3, #0]
 800a114:	4b11      	ldr	r3, [pc, #68]	; (800a15c <I2C2_EV_IRQHandler+0x60>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	3301      	adds	r3, #1
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	4b0f      	ldr	r3, [pc, #60]	; (800a15c <I2C2_EV_IRQHandler+0x60>)
 800a11e:	701a      	strb	r2, [r3, #0]

    HAL_I2C_EV_IRQHandler(&hi2cs[DRV_I2C_INSTANCE_2]);
 800a120:	4810      	ldr	r0, [pc, #64]	; (800a164 <I2C2_EV_IRQHandler+0x68>)
 800a122:	f7f8 ff9e 	bl	8003062 <HAL_I2C_EV_IRQHandler>

    GOS_ISR_EXIT
 800a126:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <I2C2_EV_IRQHandler+0x60>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d005      	beq.n	800a13a <I2C2_EV_IRQHandler+0x3e>
 800a12e:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <I2C2_EV_IRQHandler+0x60>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	3b01      	subs	r3, #1
 800a134:	b2da      	uxtb	r2, r3
 800a136:	4b09      	ldr	r3, [pc, #36]	; (800a15c <I2C2_EV_IRQHandler+0x60>)
 800a138:	701a      	strb	r2, [r3, #0]
 800a13a:	4b08      	ldr	r3, [pc, #32]	; (800a15c <I2C2_EV_IRQHandler+0x60>)
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d109      	bne.n	800a156 <I2C2_EV_IRQHandler+0x5a>
 800a142:	4b07      	ldr	r3, [pc, #28]	; (800a160 <I2C2_EV_IRQHandler+0x64>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d005      	beq.n	800a156 <I2C2_EV_IRQHandler+0x5a>
 800a14a:	4b05      	ldr	r3, [pc, #20]	; (800a160 <I2C2_EV_IRQHandler+0x64>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	3b01      	subs	r3, #1
 800a150:	b2da      	uxtb	r2, r3
 800a152:	4b03      	ldr	r3, [pc, #12]	; (800a160 <I2C2_EV_IRQHandler+0x64>)
 800a154:	701a      	strb	r2, [r3, #0]
}
 800a156:	bf00      	nop
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	200050ea 	.word	0x200050ea
 800a160:	200050e9 	.word	0x200050e9
 800a164:	20002698 	.word	0x20002698

0800a168 <HAL_I2C_MspInit>:

/*
 * Function: HAL_I2C_MspInit
 */
void_t HAL_I2C_MspInit (I2C_HandleTypeDef* hi2c)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_i2cPeriphInstance_t instance = 0u;
 800a170:	2300      	movs	r3, #0
 800a172:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800a174:	2300      	movs	r3, #0
 800a176:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]
 800a17c:	e061      	b.n	800a242 <HAL_I2C_MspInit+0xda>
    {
        if (i2cInstanceLut[instance] == hi2c->Instance)
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	4a35      	ldr	r2, [pc, #212]	; (800a258 <HAL_I2C_MspInit+0xf0>)
 800a182:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d156      	bne.n	800a23c <HAL_I2C_MspInit+0xd4>
        {
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 800a18e:	2300      	movs	r3, #0
 800a190:	73bb      	strb	r3, [r7, #14]
 800a192:	e04a      	b.n	800a22a <HAL_I2C_MspInit+0xc2>
            {
                if (i2cConfig[idx].periphInstance == instance)
 800a194:	7bbb      	ldrb	r3, [r7, #14]
 800a196:	4a31      	ldr	r2, [pc, #196]	; (800a25c <HAL_I2C_MspInit+0xf4>)
 800a198:	212c      	movs	r1, #44	; 0x2c
 800a19a:	fb01 f303 	mul.w	r3, r1, r3
 800a19e:	4413      	add	r3, r2
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	7bfa      	ldrb	r2, [r7, #15]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d13d      	bne.n	800a224 <HAL_I2C_MspInit+0xbc>
                {
                    if (i2cConfig[idx].dmaConfigRx != NULL)
 800a1a8:	7bbb      	ldrb	r3, [r7, #14]
 800a1aa:	4a2c      	ldr	r2, [pc, #176]	; (800a25c <HAL_I2C_MspInit+0xf4>)
 800a1ac:	212c      	movs	r1, #44	; 0x2c
 800a1ae:	fb01 f303 	mul.w	r3, r1, r3
 800a1b2:	4413      	add	r3, r2
 800a1b4:	3324      	adds	r3, #36	; 0x24
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d014      	beq.n	800a1e6 <HAL_I2C_MspInit+0x7e>
                    {
                        __HAL_LINKDMA(hi2c, hdmarx, i2cConfig[idx].dmaConfigRx->hdma);
 800a1bc:	7bbb      	ldrb	r3, [r7, #14]
 800a1be:	4a27      	ldr	r2, [pc, #156]	; (800a25c <HAL_I2C_MspInit+0xf4>)
 800a1c0:	212c      	movs	r1, #44	; 0x2c
 800a1c2:	fb01 f303 	mul.w	r3, r1, r3
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3324      	adds	r3, #36	; 0x24
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	1d1a      	adds	r2, r3, #4
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	639a      	str	r2, [r3, #56]	; 0x38
 800a1d2:	7bbb      	ldrb	r3, [r7, #14]
 800a1d4:	4a21      	ldr	r2, [pc, #132]	; (800a25c <HAL_I2C_MspInit+0xf4>)
 800a1d6:	212c      	movs	r1, #44	; 0x2c
 800a1d8:	fb01 f303 	mul.w	r3, r1, r3
 800a1dc:	4413      	add	r3, r2
 800a1de:	3324      	adds	r3, #36	; 0x24
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	63da      	str	r2, [r3, #60]	; 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (i2cConfig[idx].dmaConfigTx != NULL)
 800a1e6:	7bbb      	ldrb	r3, [r7, #14]
 800a1e8:	4a1c      	ldr	r2, [pc, #112]	; (800a25c <HAL_I2C_MspInit+0xf4>)
 800a1ea:	212c      	movs	r1, #44	; 0x2c
 800a1ec:	fb01 f303 	mul.w	r3, r1, r3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3328      	adds	r3, #40	; 0x28
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d014      	beq.n	800a224 <HAL_I2C_MspInit+0xbc>
                    {
                        __HAL_LINKDMA(hi2c, hdmatx, i2cConfig[idx].dmaConfigTx->hdma);
 800a1fa:	7bbb      	ldrb	r3, [r7, #14]
 800a1fc:	4a17      	ldr	r2, [pc, #92]	; (800a25c <HAL_I2C_MspInit+0xf4>)
 800a1fe:	212c      	movs	r1, #44	; 0x2c
 800a200:	fb01 f303 	mul.w	r3, r1, r3
 800a204:	4413      	add	r3, r2
 800a206:	3328      	adds	r3, #40	; 0x28
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	1d1a      	adds	r2, r3, #4
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	635a      	str	r2, [r3, #52]	; 0x34
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	4a12      	ldr	r2, [pc, #72]	; (800a25c <HAL_I2C_MspInit+0xf4>)
 800a214:	212c      	movs	r1, #44	; 0x2c
 800a216:	fb01 f303 	mul.w	r3, r1, r3
 800a21a:	4413      	add	r3, r2
 800a21c:	3328      	adds	r3, #40	; 0x28
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	63da      	str	r2, [r3, #60]	; 0x3c
            for (idx = 0u; idx < i2cConfigSize / sizeof(drv_i2cDescriptor_t); idx++)
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	3301      	adds	r3, #1
 800a228:	73bb      	strb	r3, [r7, #14]
 800a22a:	7bba      	ldrb	r2, [r7, #14]
 800a22c:	4b0c      	ldr	r3, [pc, #48]	; (800a260 <HAL_I2C_MspInit+0xf8>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	490c      	ldr	r1, [pc, #48]	; (800a264 <HAL_I2C_MspInit+0xfc>)
 800a232:	fba1 1303 	umull	r1, r3, r1, r3
 800a236:	095b      	lsrs	r3, r3, #5
 800a238:	429a      	cmp	r2, r3
 800a23a:	d3ab      	bcc.n	800a194 <HAL_I2C_MspInit+0x2c>
    for (instance = 0u; instance < DRV_I2C_NUM_OF_INSTANCES; instance++)
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	3301      	adds	r3, #1
 800a240:	73fb      	strb	r3, [r7, #15]
 800a242:	7bfb      	ldrb	r3, [r7, #15]
 800a244:	2b02      	cmp	r3, #2
 800a246:	d99a      	bls.n	800a17e <HAL_I2C_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	200006b0 	.word	0x200006b0
 800a25c:	08019a80 	.word	0x08019a80
 800a260:	2000261c 	.word	0x2000261c
 800a264:	ba2e8ba3 	.word	0xba2e8ba3

0800a268 <drv_itInit>:

/*
 * Function: drv_itInit
 */
gos_result_t drv_itInit (void_t)
{
 800a268:	b590      	push	{r4, r7, lr}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t itDriverInitResult = GOS_ERROR;
 800a26e:	23ae      	movs	r3, #174	; 0xae
 800a270:	71bb      	strb	r3, [r7, #6]
    u8_t         itIdx              = 0u;
 800a272:	2300      	movs	r3, #0
 800a274:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (itConfig != NULL)
    {
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 800a276:	2300      	movs	r3, #0
 800a278:	71fb      	strb	r3, [r7, #7]
 800a27a:	e02c      	b.n	800a2d6 <drv_itInit+0x6e>
        {
            HAL_NVIC_SetPriority(itConfig[itIdx].irqType, itConfig[itIdx].preemtPriority, itConfig[itIdx].subPriority);
 800a27c:	79fa      	ldrb	r2, [r7, #7]
 800a27e:	491e      	ldr	r1, [pc, #120]	; (800a2f8 <drv_itInit+0x90>)
 800a280:	4613      	mov	r3, r2
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	4413      	add	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	440b      	add	r3, r1
 800a28a:	f993 0000 	ldrsb.w	r0, [r3]
 800a28e:	79fa      	ldrb	r2, [r7, #7]
 800a290:	4919      	ldr	r1, [pc, #100]	; (800a2f8 <drv_itInit+0x90>)
 800a292:	4613      	mov	r3, r2
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	4413      	add	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	440b      	add	r3, r1
 800a29c:	3304      	adds	r3, #4
 800a29e:	6819      	ldr	r1, [r3, #0]
 800a2a0:	79fa      	ldrb	r2, [r7, #7]
 800a2a2:	4c15      	ldr	r4, [pc, #84]	; (800a2f8 <drv_itInit+0x90>)
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	4413      	add	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4423      	add	r3, r4
 800a2ae:	3308      	adds	r3, #8
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f7f7 fc3d 	bl	8001b32 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(itConfig[itIdx].irqType);
 800a2b8:	79fa      	ldrb	r2, [r7, #7]
 800a2ba:	490f      	ldr	r1, [pc, #60]	; (800a2f8 <drv_itInit+0x90>)
 800a2bc:	4613      	mov	r3, r2
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	f993 3000 	ldrsb.w	r3, [r3]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7f7 fc4d 	bl	8001b6a <HAL_NVIC_EnableIRQ>
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 800a2d0:	79fb      	ldrb	r3, [r7, #7]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	71fb      	strb	r3, [r7, #7]
 800a2d6:	79fa      	ldrb	r2, [r7, #7]
 800a2d8:	4b08      	ldr	r3, [pc, #32]	; (800a2fc <drv_itInit+0x94>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4908      	ldr	r1, [pc, #32]	; (800a300 <drv_itInit+0x98>)
 800a2de:	fba1 1303 	umull	r1, r3, r1, r3
 800a2e2:	08db      	lsrs	r3, r3, #3
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d3c9      	bcc.n	800a27c <drv_itInit+0x14>
        }

        itDriverInitResult = GOS_SUCCESS;
 800a2e8:	2355      	movs	r3, #85	; 0x55
 800a2ea:	71bb      	strb	r3, [r7, #6]
    else
    {
        // Configuration array is NULL pointer.
    }

    return itDriverInitResult;
 800a2ec:	79bb      	ldrb	r3, [r7, #6]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd90      	pop	{r4, r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	08019a80 	.word	0x08019a80
 800a2fc:	200005c4 	.word	0x200005c4
 800a300:	aaaaaaab 	.word	0xaaaaaaab

0800a304 <drv_shellTransmitString>:

/*
 * Function: drv_shellTransmitString
 */
GOS_INLINE gos_result_t drv_shellTransmitString (char_t* pString)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af02      	add	r7, sp, #8
 800a30a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800a30c:	23ae      	movs	r3, #174	; 0xae
 800a30e:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800a310:	2300      	movs	r3, #0
 800a312:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 800a314:	4b0d      	ldr	r3, [pc, #52]	; (800a34c <drv_shellTransmitString+0x48>)
 800a316:	785b      	ldrb	r3, [r3, #1]
 800a318:	73bb      	strb	r3, [r7, #14]

        if (instance < DRV_UART_NUM_OF_INSTANCES)
 800a31a:	7bbb      	ldrb	r3, [r7, #14]
 800a31c:	2b05      	cmp	r3, #5
 800a31e:	d810      	bhi.n	800a342 <drv_shellTransmitString+0x3e>
        {
            uartTransmitResult = drv_uartTransmitIT(instance, (u8_t*)pString, strlen(pString),
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7f5 ffd5 	bl	80002d0 <strlen>
 800a326:	4603      	mov	r3, r0
 800a328:	b29a      	uxth	r2, r3
 800a32a:	4b09      	ldr	r3, [pc, #36]	; (800a350 <drv_shellTransmitString+0x4c>)
 800a32c:	6959      	ldr	r1, [r3, #20]
 800a32e:	4b08      	ldr	r3, [pc, #32]	; (800a350 <drv_shellTransmitString+0x4c>)
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	7bb8      	ldrb	r0, [r7, #14]
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	460b      	mov	r3, r1
 800a338:	6879      	ldr	r1, [r7, #4]
 800a33a:	f001 fb31 	bl	800b9a0 <drv_uartTransmitIT>
 800a33e:	4603      	mov	r3, r0
 800a340:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800a342:	7bfb      	ldrb	r3, [r7, #15]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	08019b94 	.word	0x08019b94
 800a350:	20000638 	.word	0x20000638

0800a354 <drv_shellReceiveChar>:

/*
 * Function: drv_shellReceiveChar
 */
GOS_INLINE gos_result_t drv_shellReceiveChar (char_t* pBuffer)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af02      	add	r7, sp, #8
 800a35a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 800a35c:	23ae      	movs	r3, #174	; 0xae
 800a35e:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800a360:	2300      	movs	r3, #0
 800a362:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SHELL_INSTANCE];
 800a364:	4b0b      	ldr	r3, [pc, #44]	; (800a394 <drv_shellReceiveChar+0x40>)
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	73bb      	strb	r3, [r7, #14]

        if (instance < DRV_UART_NUM_OF_INSTANCES)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b05      	cmp	r3, #5
 800a36e:	d80c      	bhi.n	800a38a <drv_shellReceiveChar+0x36>
        {
            uartReceiveResult = drv_uartReceiveIT(instance, (u8_t*)pBuffer, sizeof(char_t),
 800a370:	4b09      	ldr	r3, [pc, #36]	; (800a398 <drv_shellReceiveChar+0x44>)
 800a372:	68da      	ldr	r2, [r3, #12]
 800a374:	4b08      	ldr	r3, [pc, #32]	; (800a398 <drv_shellReceiveChar+0x44>)
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	7bb8      	ldrb	r0, [r7, #14]
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	4613      	mov	r3, r2
 800a37e:	2201      	movs	r2, #1
 800a380:	6879      	ldr	r1, [r7, #4]
 800a382:	f001 fb7d 	bl	800ba80 <drv_uartReceiveIT>
 800a386:	4603      	mov	r3, r0
 800a388:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	08019b94 	.word	0x08019b94
 800a398:	20000638 	.word	0x20000638

0800a39c <drv_spiInit>:

/*
 * Function: drv_spiInit
 */
gos_result_t drv_spiInit (void_t)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t spiDriverInitResult = GOS_SUCCESS;
 800a3a2:	2355      	movs	r3, #85	; 0x55
 800a3a4:	71fb      	strb	r3, [r7, #7]
    u8_t         spiIdx              = 0u;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (spiConfig != NULL)
    {
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	71bb      	strb	r3, [r7, #6]
 800a3ae:	e00e      	b.n	800a3ce <drv_spiInit+0x32>
        {
            GOS_CONCAT_RESULT(spiDriverInitResult, drv_spiInitInstance(spiIdx));
 800a3b0:	79fb      	ldrb	r3, [r7, #7]
 800a3b2:	2b55      	cmp	r3, #85	; 0x55
 800a3b4:	d106      	bne.n	800a3c4 <drv_spiInit+0x28>
 800a3b6:	79bb      	ldrb	r3, [r7, #6]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 f81b 	bl	800a3f4 <drv_spiInitInstance>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	71fb      	strb	r3, [r7, #7]
 800a3c2:	e001      	b.n	800a3c8 <drv_spiInit+0x2c>
 800a3c4:	23ae      	movs	r3, #174	; 0xae
 800a3c6:	71fb      	strb	r3, [r7, #7]
        for (spiIdx = 0u; spiIdx < spiConfigSize / sizeof(drv_spiDescriptor_t); spiIdx++)
 800a3c8:	79bb      	ldrb	r3, [r7, #6]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	71bb      	strb	r3, [r7, #6]
 800a3ce:	79bb      	ldrb	r3, [r7, #6]
 800a3d0:	4a06      	ldr	r2, [pc, #24]	; (800a3ec <drv_spiInit+0x50>)
 800a3d2:	6812      	ldr	r2, [r2, #0]
 800a3d4:	08d2      	lsrs	r2, r2, #3
 800a3d6:	4906      	ldr	r1, [pc, #24]	; (800a3f0 <drv_spiInit+0x54>)
 800a3d8:	fba1 1202 	umull	r1, r2, r1, r2
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d3e7      	bcc.n	800a3b0 <drv_spiInit+0x14>
    {
        // Configuration array is NULL pointer.
        spiDriverInitResult = GOS_ERROR;
    }

    return spiDriverInitResult;
 800a3e0:	79fb      	ldrb	r3, [r7, #7]
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	200005c8 	.word	0x200005c8
 800a3f0:	24924925 	.word	0x24924925

0800a3f4 <drv_spiInitInstance>:

/*
 * Function: drv_spiInitInstance
 */
gos_result_t drv_spiInitInstance (u8_t spiInstanceIndex)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            spiInitResult = GOS_ERROR;
 800a3fe:	23ae      	movs	r3, #174	; 0xae
 800a400:	73fb      	strb	r3, [r7, #15]
    drv_spiPeriphInstance_t instance      = 0u;
 800a402:	2300      	movs	r3, #0
 800a404:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (spiConfig != NULL && spiInstanceIndex < (spiConfigSize / sizeof(drv_spiDescriptor_t)))
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	4aa1      	ldr	r2, [pc, #644]	; (800a690 <drv_spiInitInstance+0x29c>)
 800a40a:	6812      	ldr	r2, [r2, #0]
 800a40c:	08d2      	lsrs	r2, r2, #3
 800a40e:	49a1      	ldr	r1, [pc, #644]	; (800a694 <drv_spiInitInstance+0x2a0>)
 800a410:	fba1 1202 	umull	r1, r2, r1, r2
 800a414:	4293      	cmp	r3, r2
 800a416:	f080 8135 	bcs.w	800a684 <drv_spiInitInstance+0x290>
    {
        instance = spiConfig[spiInstanceIndex].periphInstance;
 800a41a:	79fa      	ldrb	r2, [r7, #7]
 800a41c:	499e      	ldr	r1, [pc, #632]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a41e:	4613      	mov	r3, r2
 800a420:	00db      	lsls	r3, r3, #3
 800a422:	1a9b      	subs	r3, r3, r2
 800a424:	00db      	lsls	r3, r3, #3
 800a426:	440b      	add	r3, r1
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	73bb      	strb	r3, [r7, #14]

        hspis[instance].Instance               = spiInstanceLut[instance];
 800a42c:	7bba      	ldrb	r2, [r7, #14]
 800a42e:	7bbb      	ldrb	r3, [r7, #14]
 800a430:	499a      	ldr	r1, [pc, #616]	; (800a69c <drv_spiInitInstance+0x2a8>)
 800a432:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a436:	499a      	ldr	r1, [pc, #616]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a438:	2058      	movs	r0, #88	; 0x58
 800a43a:	fb00 f303 	mul.w	r3, r0, r3
 800a43e:	440b      	add	r3, r1
 800a440:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Mode              = spiConfig[spiInstanceIndex].mode;
 800a442:	79fa      	ldrb	r2, [r7, #7]
 800a444:	7bb9      	ldrb	r1, [r7, #14]
 800a446:	4894      	ldr	r0, [pc, #592]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a448:	4613      	mov	r3, r2
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	1a9b      	subs	r3, r3, r2
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	4403      	add	r3, r0
 800a452:	3304      	adds	r3, #4
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	4892      	ldr	r0, [pc, #584]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a458:	2358      	movs	r3, #88	; 0x58
 800a45a:	fb01 f303 	mul.w	r3, r1, r3
 800a45e:	4403      	add	r3, r0
 800a460:	3304      	adds	r3, #4
 800a462:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.Direction         = spiConfig[spiInstanceIndex].direction;
 800a464:	79fa      	ldrb	r2, [r7, #7]
 800a466:	7bb9      	ldrb	r1, [r7, #14]
 800a468:	488b      	ldr	r0, [pc, #556]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a46a:	4613      	mov	r3, r2
 800a46c:	00db      	lsls	r3, r3, #3
 800a46e:	1a9b      	subs	r3, r3, r2
 800a470:	00db      	lsls	r3, r3, #3
 800a472:	4403      	add	r3, r0
 800a474:	3308      	adds	r3, #8
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	4889      	ldr	r0, [pc, #548]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a47a:	2358      	movs	r3, #88	; 0x58
 800a47c:	fb01 f303 	mul.w	r3, r1, r3
 800a480:	4403      	add	r3, r0
 800a482:	3308      	adds	r3, #8
 800a484:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.DataSize          = spiConfig[spiInstanceIndex].dataSize;
 800a486:	79fa      	ldrb	r2, [r7, #7]
 800a488:	7bb9      	ldrb	r1, [r7, #14]
 800a48a:	4883      	ldr	r0, [pc, #524]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a48c:	4613      	mov	r3, r2
 800a48e:	00db      	lsls	r3, r3, #3
 800a490:	1a9b      	subs	r3, r3, r2
 800a492:	00db      	lsls	r3, r3, #3
 800a494:	4403      	add	r3, r0
 800a496:	330c      	adds	r3, #12
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	4881      	ldr	r0, [pc, #516]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a49c:	2358      	movs	r3, #88	; 0x58
 800a49e:	fb01 f303 	mul.w	r3, r1, r3
 800a4a2:	4403      	add	r3, r0
 800a4a4:	330c      	adds	r3, #12
 800a4a6:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPolarity       = spiConfig[spiInstanceIndex].clkPolarity;
 800a4a8:	79fa      	ldrb	r2, [r7, #7]
 800a4aa:	7bb9      	ldrb	r1, [r7, #14]
 800a4ac:	487a      	ldr	r0, [pc, #488]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	1a9b      	subs	r3, r3, r2
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	4403      	add	r3, r0
 800a4b8:	3310      	adds	r3, #16
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	4878      	ldr	r0, [pc, #480]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a4be:	2358      	movs	r3, #88	; 0x58
 800a4c0:	fb01 f303 	mul.w	r3, r1, r3
 800a4c4:	4403      	add	r3, r0
 800a4c6:	3310      	adds	r3, #16
 800a4c8:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CLKPhase          = spiConfig[spiInstanceIndex].clkPhase;
 800a4ca:	79fa      	ldrb	r2, [r7, #7]
 800a4cc:	7bb9      	ldrb	r1, [r7, #14]
 800a4ce:	4872      	ldr	r0, [pc, #456]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	00db      	lsls	r3, r3, #3
 800a4d4:	1a9b      	subs	r3, r3, r2
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	4403      	add	r3, r0
 800a4da:	3314      	adds	r3, #20
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	4870      	ldr	r0, [pc, #448]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a4e0:	2358      	movs	r3, #88	; 0x58
 800a4e2:	fb01 f303 	mul.w	r3, r1, r3
 800a4e6:	4403      	add	r3, r0
 800a4e8:	3314      	adds	r3, #20
 800a4ea:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.NSS               = spiConfig[spiInstanceIndex].nss;
 800a4ec:	79fa      	ldrb	r2, [r7, #7]
 800a4ee:	7bb9      	ldrb	r1, [r7, #14]
 800a4f0:	4869      	ldr	r0, [pc, #420]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	00db      	lsls	r3, r3, #3
 800a4f6:	1a9b      	subs	r3, r3, r2
 800a4f8:	00db      	lsls	r3, r3, #3
 800a4fa:	4403      	add	r3, r0
 800a4fc:	3318      	adds	r3, #24
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	4867      	ldr	r0, [pc, #412]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a502:	2358      	movs	r3, #88	; 0x58
 800a504:	fb01 f303 	mul.w	r3, r1, r3
 800a508:	4403      	add	r3, r0
 800a50a:	3318      	adds	r3, #24
 800a50c:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.BaudRatePrescaler = spiConfig[spiInstanceIndex].baudRatePrescaler;
 800a50e:	79fa      	ldrb	r2, [r7, #7]
 800a510:	7bb9      	ldrb	r1, [r7, #14]
 800a512:	4861      	ldr	r0, [pc, #388]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a514:	4613      	mov	r3, r2
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	1a9b      	subs	r3, r3, r2
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	4403      	add	r3, r0
 800a51e:	331c      	adds	r3, #28
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	485f      	ldr	r0, [pc, #380]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a524:	2358      	movs	r3, #88	; 0x58
 800a526:	fb01 f303 	mul.w	r3, r1, r3
 800a52a:	4403      	add	r3, r0
 800a52c:	331c      	adds	r3, #28
 800a52e:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.FirstBit          = spiConfig[spiInstanceIndex].firstBit;
 800a530:	79fa      	ldrb	r2, [r7, #7]
 800a532:	7bb9      	ldrb	r1, [r7, #14]
 800a534:	4858      	ldr	r0, [pc, #352]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a536:	4613      	mov	r3, r2
 800a538:	00db      	lsls	r3, r3, #3
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	00db      	lsls	r3, r3, #3
 800a53e:	4403      	add	r3, r0
 800a540:	3320      	adds	r3, #32
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	4856      	ldr	r0, [pc, #344]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a546:	2358      	movs	r3, #88	; 0x58
 800a548:	fb01 f303 	mul.w	r3, r1, r3
 800a54c:	4403      	add	r3, r0
 800a54e:	3320      	adds	r3, #32
 800a550:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.TIMode            = spiConfig[spiInstanceIndex].tiMode;
 800a552:	79fa      	ldrb	r2, [r7, #7]
 800a554:	7bb9      	ldrb	r1, [r7, #14]
 800a556:	4850      	ldr	r0, [pc, #320]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a558:	4613      	mov	r3, r2
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	1a9b      	subs	r3, r3, r2
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	4403      	add	r3, r0
 800a562:	3324      	adds	r3, #36	; 0x24
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	484e      	ldr	r0, [pc, #312]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a568:	2358      	movs	r3, #88	; 0x58
 800a56a:	fb01 f303 	mul.w	r3, r1, r3
 800a56e:	4403      	add	r3, r0
 800a570:	3324      	adds	r3, #36	; 0x24
 800a572:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCCalculation    = spiConfig[spiInstanceIndex].crcCalculation;
 800a574:	79fa      	ldrb	r2, [r7, #7]
 800a576:	7bb9      	ldrb	r1, [r7, #14]
 800a578:	4847      	ldr	r0, [pc, #284]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a57a:	4613      	mov	r3, r2
 800a57c:	00db      	lsls	r3, r3, #3
 800a57e:	1a9b      	subs	r3, r3, r2
 800a580:	00db      	lsls	r3, r3, #3
 800a582:	4403      	add	r3, r0
 800a584:	3328      	adds	r3, #40	; 0x28
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	4845      	ldr	r0, [pc, #276]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a58a:	2358      	movs	r3, #88	; 0x58
 800a58c:	fb01 f303 	mul.w	r3, r1, r3
 800a590:	4403      	add	r3, r0
 800a592:	3328      	adds	r3, #40	; 0x28
 800a594:	601a      	str	r2, [r3, #0]
        hspis[instance].Init.CRCPolynomial     = spiConfig[spiInstanceIndex].crcPolynomial;
 800a596:	79fa      	ldrb	r2, [r7, #7]
 800a598:	7bb9      	ldrb	r1, [r7, #14]
 800a59a:	483f      	ldr	r0, [pc, #252]	; (800a698 <drv_spiInitInstance+0x2a4>)
 800a59c:	4613      	mov	r3, r2
 800a59e:	00db      	lsls	r3, r3, #3
 800a5a0:	1a9b      	subs	r3, r3, r2
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	4403      	add	r3, r0
 800a5a6:	332c      	adds	r3, #44	; 0x2c
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	483d      	ldr	r0, [pc, #244]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a5ac:	2358      	movs	r3, #88	; 0x58
 800a5ae:	fb01 f303 	mul.w	r3, r1, r3
 800a5b2:	4403      	add	r3, r0
 800a5b4:	332c      	adds	r3, #44	; 0x2c
 800a5b6:	601a      	str	r2, [r3, #0]

        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ba:	2258      	movs	r2, #88	; 0x58
 800a5bc:	fb02 f303 	mul.w	r3, r2, r3
 800a5c0:	4a37      	ldr	r2, [pc, #220]	; (800a6a0 <drv_spiInitInstance+0x2ac>)
 800a5c2:	4413      	add	r3, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fa fe47 	bl	8005258 <HAL_SPI_Init>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d159      	bne.n	800a684 <drv_spiInitInstance+0x290>
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4a33      	ldr	r2, [pc, #204]	; (800a6a4 <drv_spiInitInstance+0x2b0>)
 800a5d6:	4413      	add	r3, r2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f007 fe5b 	bl	8012294 <gos_mutexInit>
 800a5de:	4603      	mov	r3, r0
        if (HAL_SPI_Init    (&hspis[instance])                 == HAL_OK      &&
 800a5e0:	2b55      	cmp	r3, #85	; 0x55
 800a5e2:	d14f      	bne.n	800a684 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800a5e4:	7bba      	ldrb	r2, [r7, #14]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	005b      	lsls	r3, r3, #1
 800a5ea:	4413      	add	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4a2e      	ldr	r2, [pc, #184]	; (800a6a8 <drv_spiInitInstance+0x2b4>)
 800a5f0:	4413      	add	r3, r2
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f00a fafe 	bl	8014bf4 <gos_triggerInit>
 800a5f8:	4603      	mov	r3, r0
            gos_mutexInit   (&spiMutexes[instance])            == GOS_SUCCESS &&
 800a5fa:	2b55      	cmp	r3, #85	; 0x55
 800a5fc:	d142      	bne.n	800a684 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800a5fe:	7bba      	ldrb	r2, [r7, #14]
 800a600:	4613      	mov	r3, r2
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	4413      	add	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4a28      	ldr	r2, [pc, #160]	; (800a6ac <drv_spiInitInstance+0x2b8>)
 800a60a:	4413      	add	r3, r2
 800a60c:	4618      	mov	r0, r3
 800a60e:	f00a faf1 	bl	8014bf4 <gos_triggerInit>
 800a612:	4603      	mov	r3, r0
            gos_triggerInit (&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800a614:	2b55      	cmp	r3, #85	; 0x55
 800a616:	d135      	bne.n	800a684 <drv_spiInitInstance+0x290>
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 800a618:	7bba      	ldrb	r2, [r7, #14]
 800a61a:	4613      	mov	r3, r2
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	4413      	add	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4a23      	ldr	r2, [pc, #140]	; (800a6b0 <drv_spiInitInstance+0x2bc>)
 800a624:	4413      	add	r3, r2
 800a626:	4618      	mov	r0, r3
 800a628:	f00a fae4 	bl	8014bf4 <gos_triggerInit>
 800a62c:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800a62e:	2b55      	cmp	r3, #85	; 0x55
 800a630:	d128      	bne.n	800a684 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800a632:	7bba      	ldrb	r2, [r7, #14]
 800a634:	4613      	mov	r3, r2
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4a1a      	ldr	r2, [pc, #104]	; (800a6a8 <drv_spiInitInstance+0x2b4>)
 800a63e:	4413      	add	r3, r2
 800a640:	4618      	mov	r0, r3
 800a642:	f00a faf3 	bl	8014c2c <gos_triggerReset>
 800a646:	4603      	mov	r3, r0
            gos_triggerInit (&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS &&
 800a648:	2b55      	cmp	r3, #85	; 0x55
 800a64a:	d11b      	bne.n	800a684 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800a64c:	7bba      	ldrb	r2, [r7, #14]
 800a64e:	4613      	mov	r3, r2
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	4413      	add	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4a15      	ldr	r2, [pc, #84]	; (800a6ac <drv_spiInitInstance+0x2b8>)
 800a658:	4413      	add	r3, r2
 800a65a:	4618      	mov	r0, r3
 800a65c:	f00a fae6 	bl	8014c2c <gos_triggerReset>
 800a660:	4603      	mov	r3, r0
            gos_triggerReset(&spiRxReadyTriggers[instance])    == GOS_SUCCESS &&
 800a662:	2b55      	cmp	r3, #85	; 0x55
 800a664:	d10e      	bne.n	800a684 <drv_spiInitInstance+0x290>
            gos_triggerReset(&spiTxRxReadyTriggers[instance])  == GOS_SUCCESS
 800a666:	7bba      	ldrb	r2, [r7, #14]
 800a668:	4613      	mov	r3, r2
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4a0f      	ldr	r2, [pc, #60]	; (800a6b0 <drv_spiInitInstance+0x2bc>)
 800a672:	4413      	add	r3, r2
 800a674:	4618      	mov	r0, r3
 800a676:	f00a fad9 	bl	8014c2c <gos_triggerReset>
 800a67a:	4603      	mov	r3, r0
            gos_triggerReset(&spiTxReadyTriggers[instance])    == GOS_SUCCESS &&
 800a67c:	2b55      	cmp	r3, #85	; 0x55
 800a67e:	d101      	bne.n	800a684 <drv_spiInitInstance+0x290>
            )
        {
            spiInitResult = GOS_SUCCESS;
 800a680:	2355      	movs	r3, #85	; 0x55
 800a682:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return spiInitResult;
 800a684:	7bfb      	ldrb	r3, [r7, #15]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	200005c8 	.word	0x200005c8
 800a694:	24924925 	.word	0x24924925
 800a698:	08019ae0 	.word	0x08019ae0
 800a69c:	200006bc 	.word	0x200006bc
 800a6a0:	200027dc 	.word	0x200027dc
 800a6a4:	2000293c 	.word	0x2000293c
 800a6a8:	2000294c 	.word	0x2000294c
 800a6ac:	2000297c 	.word	0x2000297c
 800a6b0:	200029ac 	.word	0x200029ac

0800a6b4 <drv_spiTransmitIT>:
 */
gos_result_t drv_spiTransmitIT (
        drv_spiPeriphInstance_t instance, u8_t* pData,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b086      	sub	sp, #24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60b9      	str	r1, [r7, #8]
 800a6bc:	607b      	str	r3, [r7, #4]
 800a6be:	4603      	mov	r3, r0
 800a6c0:	73fb      	strb	r3, [r7, #15]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverTransmitResult = GOS_ERROR;
 800a6c6:	23ae      	movs	r3, #174	; 0xae
 800a6c8:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4a28      	ldr	r2, [pc, #160]	; (800a770 <drv_spiTransmitIT+0xbc>)
 800a6d0:	4413      	add	r3, r2
 800a6d2:	6879      	ldr	r1, [r7, #4]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f007 fdf7 	bl	80122c8 <gos_mutexLock>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b55      	cmp	r3, #85	; 0x55
 800a6de:	d13a      	bne.n	800a756 <drv_spiTransmitIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
 800a6e2:	2258      	movs	r2, #88	; 0x58
 800a6e4:	fb02 f303 	mul.w	r3, r2, r3
 800a6e8:	4a22      	ldr	r2, [pc, #136]	; (800a774 <drv_spiTransmitIT+0xc0>)
 800a6ea:	4413      	add	r3, r2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fa ffc3 	bl	8005678 <HAL_SPI_Abort_IT>

        if (HAL_SPI_Transmit_IT(&hspis[instance], pData, size) == HAL_OK)
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	2258      	movs	r2, #88	; 0x58
 800a6f6:	fb02 f303 	mul.w	r3, r2, r3
 800a6fa:	4a1e      	ldr	r2, [pc, #120]	; (800a774 <drv_spiTransmitIT+0xc0>)
 800a6fc:	4413      	add	r3, r2
 800a6fe:	89ba      	ldrh	r2, [r7, #12]
 800a700:	68b9      	ldr	r1, [r7, #8]
 800a702:	4618      	mov	r0, r3
 800a704:	f7fa fe0c 	bl	8005320 <HAL_SPI_Transmit_IT>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d123      	bne.n	800a756 <drv_spiTransmitIT+0xa2>
        {
            if (triggerTmo > 0u)
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d01e      	beq.n	800a752 <drv_spiTransmitIT+0x9e>
            {
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800a714:	7bfa      	ldrb	r2, [r7, #15]
 800a716:	4613      	mov	r3, r2
 800a718:	005b      	lsls	r3, r3, #1
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4a16      	ldr	r2, [pc, #88]	; (800a778 <drv_spiTransmitIT+0xc4>)
 800a720:	4413      	add	r3, r2
 800a722:	6a3a      	ldr	r2, [r7, #32]
 800a724:	2101      	movs	r1, #1
 800a726:	4618      	mov	r0, r3
 800a728:	f00a fad8 	bl	8014cdc <gos_triggerWait>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b55      	cmp	r3, #85	; 0x55
 800a730:	d111      	bne.n	800a756 <drv_spiTransmitIT+0xa2>
                    gos_triggerReset(&spiTxReadyTriggers[instance])                == GOS_SUCCESS)
 800a732:	7bfa      	ldrb	r2, [r7, #15]
 800a734:	4613      	mov	r3, r2
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	4413      	add	r3, r2
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	4a0e      	ldr	r2, [pc, #56]	; (800a778 <drv_spiTransmitIT+0xc4>)
 800a73e:	4413      	add	r3, r2
 800a740:	4618      	mov	r0, r3
 800a742:	f00a fa73 	bl	8014c2c <gos_triggerReset>
 800a746:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800a748:	2b55      	cmp	r3, #85	; 0x55
 800a74a:	d104      	bne.n	800a756 <drv_spiTransmitIT+0xa2>
                {
                    spiDriverTransmitResult = GOS_SUCCESS;
 800a74c:	2355      	movs	r3, #85	; 0x55
 800a74e:	75fb      	strb	r3, [r7, #23]
 800a750:	e001      	b.n	800a756 <drv_spiTransmitIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverTransmitResult = GOS_SUCCESS;
 800a752:	2355      	movs	r3, #85	; 0x55
 800a754:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 800a756:	7bfb      	ldrb	r3, [r7, #15]
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4a05      	ldr	r2, [pc, #20]	; (800a770 <drv_spiTransmitIT+0xbc>)
 800a75c:	4413      	add	r3, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f007 feb8 	bl	80124d4 <gos_mutexUnlock>

    return spiDriverTransmitResult;
 800a764:	7dfb      	ldrb	r3, [r7, #23]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	2000293c 	.word	0x2000293c
 800a774:	200027dc 	.word	0x200027dc
 800a778:	2000297c 	.word	0x2000297c

0800a77c <drv_spiReceiveIT>:
 */
gos_result_t drv_spiReceiveIT (
        drv_spiPeriphInstance_t instance, u8_t* pBuffer,
        u16_t                   size,     u32_t mutexTmo, u32_t triggerTmo
        )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	60b9      	str	r1, [r7, #8]
 800a784:	607b      	str	r3, [r7, #4]
 800a786:	4603      	mov	r3, r0
 800a788:	73fb      	strb	r3, [r7, #15]
 800a78a:	4613      	mov	r3, r2
 800a78c:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t spiDriverReceiveResult = GOS_ERROR;
 800a78e:	23ae      	movs	r3, #174	; 0xae
 800a790:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&spiMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4a28      	ldr	r2, [pc, #160]	; (800a838 <drv_spiReceiveIT+0xbc>)
 800a798:	4413      	add	r3, r2
 800a79a:	6879      	ldr	r1, [r7, #4]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f007 fd93 	bl	80122c8 <gos_mutexLock>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b55      	cmp	r3, #85	; 0x55
 800a7a6:	d13a      	bne.n	800a81e <drv_spiReceiveIT+0xa2>
    {
    	(void_t) HAL_SPI_Abort_IT(&hspis[instance]);
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
 800a7aa:	2258      	movs	r2, #88	; 0x58
 800a7ac:	fb02 f303 	mul.w	r3, r2, r3
 800a7b0:	4a22      	ldr	r2, [pc, #136]	; (800a83c <drv_spiReceiveIT+0xc0>)
 800a7b2:	4413      	add	r3, r2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fa ff5f 	bl	8005678 <HAL_SPI_Abort_IT>

        if (HAL_SPI_Receive_IT(&hspis[instance], pBuffer, size) == HAL_OK)
 800a7ba:	7bfb      	ldrb	r3, [r7, #15]
 800a7bc:	2258      	movs	r2, #88	; 0x58
 800a7be:	fb02 f303 	mul.w	r3, r2, r3
 800a7c2:	4a1e      	ldr	r2, [pc, #120]	; (800a83c <drv_spiReceiveIT+0xc0>)
 800a7c4:	4413      	add	r3, r2
 800a7c6:	89ba      	ldrh	r2, [r7, #12]
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fa fe2a 	bl	8005424 <HAL_SPI_Receive_IT>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d123      	bne.n	800a81e <drv_spiReceiveIT+0xa2>
        {
            if (triggerTmo > 0u)
 800a7d6:	6a3b      	ldr	r3, [r7, #32]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d01e      	beq.n	800a81a <drv_spiReceiveIT+0x9e>
            {
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800a7dc:	7bfa      	ldrb	r2, [r7, #15]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	005b      	lsls	r3, r3, #1
 800a7e2:	4413      	add	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4a16      	ldr	r2, [pc, #88]	; (800a840 <drv_spiReceiveIT+0xc4>)
 800a7e8:	4413      	add	r3, r2
 800a7ea:	6a3a      	ldr	r2, [r7, #32]
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f00a fa74 	bl	8014cdc <gos_triggerWait>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b55      	cmp	r3, #85	; 0x55
 800a7f8:	d111      	bne.n	800a81e <drv_spiReceiveIT+0xa2>
                    gos_triggerReset(&spiRxReadyTriggers[instance])                == GOS_SUCCESS)
 800a7fa:	7bfa      	ldrb	r2, [r7, #15]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	005b      	lsls	r3, r3, #1
 800a800:	4413      	add	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4a0e      	ldr	r2, [pc, #56]	; (800a840 <drv_spiReceiveIT+0xc4>)
 800a806:	4413      	add	r3, r2
 800a808:	4618      	mov	r0, r3
 800a80a:	f00a fa0f 	bl	8014c2c <gos_triggerReset>
 800a80e:	4603      	mov	r3, r0
                if (gos_triggerWait (&spiRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800a810:	2b55      	cmp	r3, #85	; 0x55
 800a812:	d104      	bne.n	800a81e <drv_spiReceiveIT+0xa2>
                {
                    spiDriverReceiveResult = GOS_SUCCESS;
 800a814:	2355      	movs	r3, #85	; 0x55
 800a816:	75fb      	strb	r3, [r7, #23]
 800a818:	e001      	b.n	800a81e <drv_spiReceiveIT+0xa2>
                    // Trigger error.
                }
            }
            else
            {
                spiDriverReceiveResult = GOS_SUCCESS;
 800a81a:	2355      	movs	r3, #85	; 0x55
 800a81c:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Mutex error.
    }

    (void_t) gos_mutexUnlock(&spiMutexes[instance]);
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4a05      	ldr	r2, [pc, #20]	; (800a838 <drv_spiReceiveIT+0xbc>)
 800a824:	4413      	add	r3, r2
 800a826:	4618      	mov	r0, r3
 800a828:	f007 fe54 	bl	80124d4 <gos_mutexUnlock>

    return spiDriverReceiveResult;
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	2000293c 	.word	0x2000293c
 800a83c:	200027dc 	.word	0x200027dc
 800a840:	2000294c 	.word	0x2000294c

0800a844 <HAL_SPI_TxCpltCallback>:

/*
 * Function: HAL_SPI_TxCpltCallback
 */
void_t HAL_SPI_TxCpltCallback (SPI_HandleTypeDef* hspi)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	4b0f      	ldr	r3, [pc, #60]	; (800a890 <HAL_SPI_TxCpltCallback+0x4c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	429a      	cmp	r2, r3
 800a856:	d103      	bne.n	800a860 <HAL_SPI_TxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800a858:	480e      	ldr	r0, [pc, #56]	; (800a894 <HAL_SPI_TxCpltCallback+0x50>)
 800a85a:	f00a faef 	bl	8014e3c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800a85e:	e012      	b.n	800a886 <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <HAL_SPI_TxCpltCallback+0x4c>)
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d103      	bne.n	800a874 <HAL_SPI_TxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800a86c:	480a      	ldr	r0, [pc, #40]	; (800a898 <HAL_SPI_TxCpltCallback+0x54>)
 800a86e:	f00a fae5 	bl	8014e3c <gos_triggerIncrement>
}
 800a872:	e008      	b.n	800a886 <HAL_SPI_TxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <HAL_SPI_TxCpltCallback+0x4c>)
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d102      	bne.n	800a886 <HAL_SPI_TxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800a880:	4806      	ldr	r0, [pc, #24]	; (800a89c <HAL_SPI_TxCpltCallback+0x58>)
 800a882:	f00a fadb 	bl	8014e3c <gos_triggerIncrement>
}
 800a886:	bf00      	nop
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	200006bc 	.word	0x200006bc
 800a894:	2000297c 	.word	0x2000297c
 800a898:	20002988 	.word	0x20002988
 800a89c:	20002994 	.word	0x20002994

0800a8a0 <HAL_SPI_RxCpltCallback>:

/*
 * Function: HAL_SPI_RxCpltCallback
 */
void_t HAL_SPI_RxCpltCallback (SPI_HandleTypeDef* hspi)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <HAL_SPI_RxCpltCallback+0x4c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d103      	bne.n	800a8bc <HAL_SPI_RxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800a8b4:	480e      	ldr	r0, [pc, #56]	; (800a8f0 <HAL_SPI_RxCpltCallback+0x50>)
 800a8b6:	f00a fac1 	bl	8014e3c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800a8ba:	e012      	b.n	800a8e2 <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <HAL_SPI_RxCpltCallback+0x4c>)
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d103      	bne.n	800a8d0 <HAL_SPI_RxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800a8c8:	480a      	ldr	r0, [pc, #40]	; (800a8f4 <HAL_SPI_RxCpltCallback+0x54>)
 800a8ca:	f00a fab7 	bl	8014e3c <gos_triggerIncrement>
}
 800a8ce:	e008      	b.n	800a8e2 <HAL_SPI_RxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	4b05      	ldr	r3, [pc, #20]	; (800a8ec <HAL_SPI_RxCpltCallback+0x4c>)
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d102      	bne.n	800a8e2 <HAL_SPI_RxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800a8dc:	4806      	ldr	r0, [pc, #24]	; (800a8f8 <HAL_SPI_RxCpltCallback+0x58>)
 800a8de:	f00a faad 	bl	8014e3c <gos_triggerIncrement>
}
 800a8e2:	bf00      	nop
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	200006bc 	.word	0x200006bc
 800a8f0:	2000294c 	.word	0x2000294c
 800a8f4:	20002958 	.word	0x20002958
 800a8f8:	20002964 	.word	0x20002964

0800a8fc <HAL_SPI_TxRxCpltCallback>:

/*
 * Function: HAL_SPI_TxRxCpltCallback
 */
void_t HAL_SPI_TxRxCpltCallback (SPI_HandleTypeDef *hspi)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_1])
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	4b0f      	ldr	r3, [pc, #60]	; (800a948 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d103      	bne.n	800a918 <HAL_SPI_TxRxCpltCallback+0x1c>
    {
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_1]);
 800a910:	480e      	ldr	r0, [pc, #56]	; (800a94c <HAL_SPI_TxRxCpltCallback+0x50>)
 800a912:	f00a fa93 	bl	8014e3c <gos_triggerIncrement>
    }
    else
    {
        // Wrong instance.
    }
}
 800a916:	e012      	b.n	800a93e <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_2])
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	4b0a      	ldr	r3, [pc, #40]	; (800a948 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	429a      	cmp	r2, r3
 800a922:	d103      	bne.n	800a92c <HAL_SPI_TxRxCpltCallback+0x30>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_2]);
 800a924:	480a      	ldr	r0, [pc, #40]	; (800a950 <HAL_SPI_TxRxCpltCallback+0x54>)
 800a926:	f00a fa89 	bl	8014e3c <gos_triggerIncrement>
}
 800a92a:	e008      	b.n	800a93e <HAL_SPI_TxRxCpltCallback+0x42>
    else if (hspi->Instance == spiInstanceLut[DRV_SPI_INSTANCE_3])
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	429a      	cmp	r2, r3
 800a936:	d102      	bne.n	800a93e <HAL_SPI_TxRxCpltCallback+0x42>
        (void_t) gos_triggerIncrement(&spiTxRxReadyTriggers[DRV_SPI_INSTANCE_3]);
 800a938:	4806      	ldr	r0, [pc, #24]	; (800a954 <HAL_SPI_TxRxCpltCallback+0x58>)
 800a93a:	f00a fa7f 	bl	8014e3c <gos_triggerIncrement>
}
 800a93e:	bf00      	nop
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	200006bc 	.word	0x200006bc
 800a94c:	200029ac 	.word	0x200029ac
 800a950:	200029b8 	.word	0x200029b8
 800a954:	200029c4 	.word	0x200029c4

0800a958 <SPI1_IRQHandler>:

/*
 * Function: SPI1_IRQHandler
 */
void_t SPI1_IRQHandler (void_t)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a95c:	4b16      	ldr	r3, [pc, #88]	; (800a9b8 <SPI1_IRQHandler+0x60>)
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d105      	bne.n	800a970 <SPI1_IRQHandler+0x18>
 800a964:	4b15      	ldr	r3, [pc, #84]	; (800a9bc <SPI1_IRQHandler+0x64>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	3301      	adds	r3, #1
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <SPI1_IRQHandler+0x64>)
 800a96e:	701a      	strb	r2, [r3, #0]
 800a970:	4b11      	ldr	r3, [pc, #68]	; (800a9b8 <SPI1_IRQHandler+0x60>)
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	3301      	adds	r3, #1
 800a976:	b2da      	uxtb	r2, r3
 800a978:	4b0f      	ldr	r3, [pc, #60]	; (800a9b8 <SPI1_IRQHandler+0x60>)
 800a97a:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_1]);
 800a97c:	4810      	ldr	r0, [pc, #64]	; (800a9c0 <SPI1_IRQHandler+0x68>)
 800a97e:	f7fa ff75 	bl	800586c <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800a982:	4b0d      	ldr	r3, [pc, #52]	; (800a9b8 <SPI1_IRQHandler+0x60>)
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d005      	beq.n	800a996 <SPI1_IRQHandler+0x3e>
 800a98a:	4b0b      	ldr	r3, [pc, #44]	; (800a9b8 <SPI1_IRQHandler+0x60>)
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	3b01      	subs	r3, #1
 800a990:	b2da      	uxtb	r2, r3
 800a992:	4b09      	ldr	r3, [pc, #36]	; (800a9b8 <SPI1_IRQHandler+0x60>)
 800a994:	701a      	strb	r2, [r3, #0]
 800a996:	4b08      	ldr	r3, [pc, #32]	; (800a9b8 <SPI1_IRQHandler+0x60>)
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d109      	bne.n	800a9b2 <SPI1_IRQHandler+0x5a>
 800a99e:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <SPI1_IRQHandler+0x64>)
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d005      	beq.n	800a9b2 <SPI1_IRQHandler+0x5a>
 800a9a6:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <SPI1_IRQHandler+0x64>)
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	4b03      	ldr	r3, [pc, #12]	; (800a9bc <SPI1_IRQHandler+0x64>)
 800a9b0:	701a      	strb	r2, [r3, #0]
}
 800a9b2:	bf00      	nop
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	200050ea 	.word	0x200050ea
 800a9bc:	200050e9 	.word	0x200050e9
 800a9c0:	200027dc 	.word	0x200027dc

0800a9c4 <SPI2_IRQHandler>:

/*
 * Function: SPI2_IRQHandler
 */
void_t SPI2_IRQHandler (void_t)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800a9c8:	4b16      	ldr	r3, [pc, #88]	; (800aa24 <SPI2_IRQHandler+0x60>)
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d105      	bne.n	800a9dc <SPI2_IRQHandler+0x18>
 800a9d0:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <SPI2_IRQHandler+0x64>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	4b13      	ldr	r3, [pc, #76]	; (800aa28 <SPI2_IRQHandler+0x64>)
 800a9da:	701a      	strb	r2, [r3, #0]
 800a9dc:	4b11      	ldr	r3, [pc, #68]	; (800aa24 <SPI2_IRQHandler+0x60>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <SPI2_IRQHandler+0x60>)
 800a9e6:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_2]);
 800a9e8:	4810      	ldr	r0, [pc, #64]	; (800aa2c <SPI2_IRQHandler+0x68>)
 800a9ea:	f7fa ff3f 	bl	800586c <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <SPI2_IRQHandler+0x60>)
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d005      	beq.n	800aa02 <SPI2_IRQHandler+0x3e>
 800a9f6:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <SPI2_IRQHandler+0x60>)
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	b2da      	uxtb	r2, r3
 800a9fe:	4b09      	ldr	r3, [pc, #36]	; (800aa24 <SPI2_IRQHandler+0x60>)
 800aa00:	701a      	strb	r2, [r3, #0]
 800aa02:	4b08      	ldr	r3, [pc, #32]	; (800aa24 <SPI2_IRQHandler+0x60>)
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d109      	bne.n	800aa1e <SPI2_IRQHandler+0x5a>
 800aa0a:	4b07      	ldr	r3, [pc, #28]	; (800aa28 <SPI2_IRQHandler+0x64>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d005      	beq.n	800aa1e <SPI2_IRQHandler+0x5a>
 800aa12:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <SPI2_IRQHandler+0x64>)
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	4b03      	ldr	r3, [pc, #12]	; (800aa28 <SPI2_IRQHandler+0x64>)
 800aa1c:	701a      	strb	r2, [r3, #0]
}
 800aa1e:	bf00      	nop
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	200050ea 	.word	0x200050ea
 800aa28:	200050e9 	.word	0x200050e9
 800aa2c:	20002834 	.word	0x20002834

0800aa30 <SPI3_IRQHandler>:

void_t SPI3_IRQHandler (void_t)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800aa34:	4b16      	ldr	r3, [pc, #88]	; (800aa90 <SPI3_IRQHandler+0x60>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d105      	bne.n	800aa48 <SPI3_IRQHandler+0x18>
 800aa3c:	4b15      	ldr	r3, [pc, #84]	; (800aa94 <SPI3_IRQHandler+0x64>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	3301      	adds	r3, #1
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	4b13      	ldr	r3, [pc, #76]	; (800aa94 <SPI3_IRQHandler+0x64>)
 800aa46:	701a      	strb	r2, [r3, #0]
 800aa48:	4b11      	ldr	r3, [pc, #68]	; (800aa90 <SPI3_IRQHandler+0x60>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b2da      	uxtb	r2, r3
 800aa50:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <SPI3_IRQHandler+0x60>)
 800aa52:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_3]);
 800aa54:	4810      	ldr	r0, [pc, #64]	; (800aa98 <SPI3_IRQHandler+0x68>)
 800aa56:	f7fa ff09 	bl	800586c <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800aa5a:	4b0d      	ldr	r3, [pc, #52]	; (800aa90 <SPI3_IRQHandler+0x60>)
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d005      	beq.n	800aa6e <SPI3_IRQHandler+0x3e>
 800aa62:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <SPI3_IRQHandler+0x60>)
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	b2da      	uxtb	r2, r3
 800aa6a:	4b09      	ldr	r3, [pc, #36]	; (800aa90 <SPI3_IRQHandler+0x60>)
 800aa6c:	701a      	strb	r2, [r3, #0]
 800aa6e:	4b08      	ldr	r3, [pc, #32]	; (800aa90 <SPI3_IRQHandler+0x60>)
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d109      	bne.n	800aa8a <SPI3_IRQHandler+0x5a>
 800aa76:	4b07      	ldr	r3, [pc, #28]	; (800aa94 <SPI3_IRQHandler+0x64>)
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d005      	beq.n	800aa8a <SPI3_IRQHandler+0x5a>
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <SPI3_IRQHandler+0x64>)
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	3b01      	subs	r3, #1
 800aa84:	b2da      	uxtb	r2, r3
 800aa86:	4b03      	ldr	r3, [pc, #12]	; (800aa94 <SPI3_IRQHandler+0x64>)
 800aa88:	701a      	strb	r2, [r3, #0]
}
 800aa8a:	bf00      	nop
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	200050ea 	.word	0x200050ea
 800aa94:	200050e9 	.word	0x200050e9
 800aa98:	2000288c 	.word	0x2000288c

0800aa9c <SPI4_IRQHandler>:

/*
 * Function: SPI4_IRQHandler
 */
void_t SPI4_IRQHandler (void_t)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800aaa0:	4b16      	ldr	r3, [pc, #88]	; (800aafc <SPI4_IRQHandler+0x60>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d105      	bne.n	800aab4 <SPI4_IRQHandler+0x18>
 800aaa8:	4b15      	ldr	r3, [pc, #84]	; (800ab00 <SPI4_IRQHandler+0x64>)
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	3301      	adds	r3, #1
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	4b13      	ldr	r3, [pc, #76]	; (800ab00 <SPI4_IRQHandler+0x64>)
 800aab2:	701a      	strb	r2, [r3, #0]
 800aab4:	4b11      	ldr	r3, [pc, #68]	; (800aafc <SPI4_IRQHandler+0x60>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	3301      	adds	r3, #1
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <SPI4_IRQHandler+0x60>)
 800aabe:	701a      	strb	r2, [r3, #0]

    HAL_SPI_IRQHandler(&hspis[DRV_SPI_INSTANCE_4]);
 800aac0:	4810      	ldr	r0, [pc, #64]	; (800ab04 <SPI4_IRQHandler+0x68>)
 800aac2:	f7fa fed3 	bl	800586c <HAL_SPI_IRQHandler>

    GOS_ISR_EXIT
 800aac6:	4b0d      	ldr	r3, [pc, #52]	; (800aafc <SPI4_IRQHandler+0x60>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d005      	beq.n	800aada <SPI4_IRQHandler+0x3e>
 800aace:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <SPI4_IRQHandler+0x60>)
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	4b09      	ldr	r3, [pc, #36]	; (800aafc <SPI4_IRQHandler+0x60>)
 800aad8:	701a      	strb	r2, [r3, #0]
 800aada:	4b08      	ldr	r3, [pc, #32]	; (800aafc <SPI4_IRQHandler+0x60>)
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d109      	bne.n	800aaf6 <SPI4_IRQHandler+0x5a>
 800aae2:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <SPI4_IRQHandler+0x64>)
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d005      	beq.n	800aaf6 <SPI4_IRQHandler+0x5a>
 800aaea:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <SPI4_IRQHandler+0x64>)
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	4b03      	ldr	r3, [pc, #12]	; (800ab00 <SPI4_IRQHandler+0x64>)
 800aaf4:	701a      	strb	r2, [r3, #0]
}
 800aaf6:	bf00      	nop
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	200050ea 	.word	0x200050ea
 800ab00:	200050e9 	.word	0x200050e9
 800ab04:	200028e4 	.word	0x200028e4

0800ab08 <HAL_SPI_MspInit>:

/*
 * Function: HAL_SPI_MspInit
 */
void_t HAL_SPI_MspInit (SPI_HandleTypeDef* hspi)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_spiPeriphInstance_t instance = 0u;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800ab14:	2300      	movs	r3, #0
 800ab16:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 800ab18:	2300      	movs	r3, #0
 800ab1a:	73fb      	strb	r3, [r7, #15]
 800ab1c:	e068      	b.n	800abf0 <HAL_SPI_MspInit+0xe8>
    {
        if (spiInstanceLut[instance] == hspi->Instance)
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
 800ab20:	4a38      	ldr	r2, [pc, #224]	; (800ac04 <HAL_SPI_MspInit+0xfc>)
 800ab22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d15d      	bne.n	800abea <HAL_SPI_MspInit+0xe2>
        {
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73bb      	strb	r3, [r7, #14]
 800ab32:	e051      	b.n	800abd8 <HAL_SPI_MspInit+0xd0>
            {
                if (spiConfig[idx].periphInstance == instance)
 800ab34:	7bba      	ldrb	r2, [r7, #14]
 800ab36:	4934      	ldr	r1, [pc, #208]	; (800ac08 <HAL_SPI_MspInit+0x100>)
 800ab38:	4613      	mov	r3, r2
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	1a9b      	subs	r3, r3, r2
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	440b      	add	r3, r1
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	7bfa      	ldrb	r2, [r7, #15]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d143      	bne.n	800abd2 <HAL_SPI_MspInit+0xca>
                {
                    if (spiConfig[idx].dmaConfigRx != NULL)
 800ab4a:	7bba      	ldrb	r2, [r7, #14]
 800ab4c:	492e      	ldr	r1, [pc, #184]	; (800ac08 <HAL_SPI_MspInit+0x100>)
 800ab4e:	4613      	mov	r3, r2
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	1a9b      	subs	r3, r3, r2
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	440b      	add	r3, r1
 800ab58:	3330      	adds	r3, #48	; 0x30
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d016      	beq.n	800ab8e <HAL_SPI_MspInit+0x86>
                    {
                        __HAL_LINKDMA(hspi, hdmarx, spiConfig[idx].dmaConfigRx->hdma);
 800ab60:	7bba      	ldrb	r2, [r7, #14]
 800ab62:	4929      	ldr	r1, [pc, #164]	; (800ac08 <HAL_SPI_MspInit+0x100>)
 800ab64:	4613      	mov	r3, r2
 800ab66:	00db      	lsls	r3, r3, #3
 800ab68:	1a9b      	subs	r3, r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	440b      	add	r3, r1
 800ab6e:	3330      	adds	r3, #48	; 0x30
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	1d1a      	adds	r2, r3, #4
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	64da      	str	r2, [r3, #76]	; 0x4c
 800ab78:	7bba      	ldrb	r2, [r7, #14]
 800ab7a:	4923      	ldr	r1, [pc, #140]	; (800ac08 <HAL_SPI_MspInit+0x100>)
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	1a9b      	subs	r3, r3, r2
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	440b      	add	r3, r1
 800ab86:	3330      	adds	r3, #48	; 0x30
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	63da      	str	r2, [r3, #60]	; 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (spiConfig[idx].dmaConfigTx != NULL)
 800ab8e:	7bba      	ldrb	r2, [r7, #14]
 800ab90:	491d      	ldr	r1, [pc, #116]	; (800ac08 <HAL_SPI_MspInit+0x100>)
 800ab92:	4613      	mov	r3, r2
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	1a9b      	subs	r3, r3, r2
 800ab98:	00db      	lsls	r3, r3, #3
 800ab9a:	440b      	add	r3, r1
 800ab9c:	3334      	adds	r3, #52	; 0x34
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d016      	beq.n	800abd2 <HAL_SPI_MspInit+0xca>
                    {
                        __HAL_LINKDMA(hspi, hdmatx, spiConfig[idx].dmaConfigTx->hdma);
 800aba4:	7bba      	ldrb	r2, [r7, #14]
 800aba6:	4918      	ldr	r1, [pc, #96]	; (800ac08 <HAL_SPI_MspInit+0x100>)
 800aba8:	4613      	mov	r3, r2
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	1a9b      	subs	r3, r3, r2
 800abae:	00db      	lsls	r3, r3, #3
 800abb0:	440b      	add	r3, r1
 800abb2:	3334      	adds	r3, #52	; 0x34
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	1d1a      	adds	r2, r3, #4
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	649a      	str	r2, [r3, #72]	; 0x48
 800abbc:	7bba      	ldrb	r2, [r7, #14]
 800abbe:	4912      	ldr	r1, [pc, #72]	; (800ac08 <HAL_SPI_MspInit+0x100>)
 800abc0:	4613      	mov	r3, r2
 800abc2:	00db      	lsls	r3, r3, #3
 800abc4:	1a9b      	subs	r3, r3, r2
 800abc6:	00db      	lsls	r3, r3, #3
 800abc8:	440b      	add	r3, r1
 800abca:	3334      	adds	r3, #52	; 0x34
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	63da      	str	r2, [r3, #60]	; 0x3c
            for (idx = 0u; idx < spiConfigSize / sizeof(drv_spiDescriptor_t); idx++)
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	3301      	adds	r3, #1
 800abd6:	73bb      	strb	r3, [r7, #14]
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	4a0c      	ldr	r2, [pc, #48]	; (800ac0c <HAL_SPI_MspInit+0x104>)
 800abdc:	6812      	ldr	r2, [r2, #0]
 800abde:	08d2      	lsrs	r2, r2, #3
 800abe0:	490b      	ldr	r1, [pc, #44]	; (800ac10 <HAL_SPI_MspInit+0x108>)
 800abe2:	fba1 1202 	umull	r1, r2, r1, r2
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d3a4      	bcc.n	800ab34 <HAL_SPI_MspInit+0x2c>
    for (instance = 0u; instance < DRV_SPI_NUM_OF_INSTANCES; instance++)
 800abea:	7bfb      	ldrb	r3, [r7, #15]
 800abec:	3301      	adds	r3, #1
 800abee:	73fb      	strb	r3, [r7, #15]
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d993      	bls.n	800ab1e <HAL_SPI_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800abf6:	bf00      	nop
 800abf8:	bf00      	nop
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr
 800ac04:	200006bc 	.word	0x200006bc
 800ac08:	08019ae0 	.word	0x08019ae0
 800ac0c:	200005c8 	.word	0x200005c8
 800ac10:	24924925 	.word	0x24924925

0800ac14 <drv_sysmonTransmit>:

/*
 * Function: drv_sysmonTransmit
 */
GOS_INLINE gos_result_t drv_sysmonTransmit (u8_t* pData, u16_t size)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af02      	add	r7, sp, #8
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800ac20:	23ae      	movs	r3, #174	; 0xae
 800ac22:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 800ac28:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <drv_sysmonTransmit+0x40>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, pData, size,
 800ac2e:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <drv_sysmonTransmit+0x44>)
 800ac30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ac32:	4b09      	ldr	r3, [pc, #36]	; (800ac58 <drv_sysmonTransmit+0x44>)
 800ac34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac36:	887a      	ldrh	r2, [r7, #2]
 800ac38:	7bb8      	ldrb	r0, [r7, #14]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	6879      	ldr	r1, [r7, #4]
 800ac40:	f000 feae 	bl	800b9a0 <drv_uartTransmitIT>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	08019b94 	.word	0x08019b94
 800ac58:	20000638 	.word	0x20000638

0800ac5c <drv_sysmonReceive>:

/*
 * Function: drv_sysmonReceive
 */
GOS_INLINE gos_result_t drv_sysmonReceive (u8_t* pBuffer, u16_t size)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af02      	add	r7, sp, #8
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	460b      	mov	r3, r1
 800ac66:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t             uartReceiveResult  = GOS_ERROR;
 800ac68:	23ae      	movs	r3, #174	; 0xae
 800ac6a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_SYSMON_INSTANCE];
 800ac70:	4b0a      	ldr	r3, [pc, #40]	; (800ac9c <drv_sysmonReceive+0x40>)
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	73bb      	strb	r3, [r7, #14]

        uartReceiveResult = drv_uartReceiveDMA(instance, pBuffer, size,
 800ac76:	4b0a      	ldr	r3, [pc, #40]	; (800aca0 <drv_sysmonReceive+0x44>)
 800ac78:	69d9      	ldr	r1, [r3, #28]
 800ac7a:	4b09      	ldr	r3, [pc, #36]	; (800aca0 <drv_sysmonReceive+0x44>)
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	887a      	ldrh	r2, [r7, #2]
 800ac80:	7bb8      	ldrb	r0, [r7, #14]
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	460b      	mov	r3, r1
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	f000 fe1a 	bl	800b8c0 <drv_uartReceiveDMA>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartReceiveResult;
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	08019b94 	.word	0x08019b94
 800aca0:	20000638 	.word	0x20000638

0800aca4 <drv_systimerStart>:

/*
 * Function: drv_systimerStart
 */
gos_result_t drv_systimerStart (void_t)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            systimerStartResult = GOS_ERROR;
 800acaa:	23ae      	movs	r3, #174	; 0xae
 800acac:	71fb      	strb	r3, [r7, #7]
    drv_tmrPeriphInstance_t instance            = 0u;
 800acae:	2300      	movs	r3, #0
 800acb0:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL)
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 800acb2:	4b08      	ldr	r3, [pc, #32]	; (800acd4 <drv_systimerStart+0x30>)
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	71bb      	strb	r3, [r7, #6]

        systimerStartResult = drv_tmrStart(instance, GOS_MUTEX_ENDLESS_TMO);
 800acb8:	79bb      	ldrb	r3, [r7, #6]
 800acba:	f04f 31ff 	mov.w	r1, #4294967295
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 f9a2 	bl	800b008 <drv_tmrStart>
 800acc4:	4603      	mov	r3, r0
 800acc6:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL.
    }

    return systimerStartResult;
 800acc8:	79fb      	ldrb	r3, [r7, #7]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	08019b18 	.word	0x08019b18

0800acd8 <drv_systimerGetValue>:

/*
 * Function: drv_systimerGetValue
 */
gos_result_t drv_systimerGetValue (u16_t* pValue)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            systimerGetValueResult = GOS_ERROR;
 800ace0:	23ae      	movs	r3, #174	; 0xae
 800ace2:	73fb      	strb	r3, [r7, #15]
    drv_tmrPeriphInstance_t instance               = 0u;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73bb      	strb	r3, [r7, #14]
    u32_t                   temp                   = 0u;
 800ace8:	2300      	movs	r3, #0
 800acea:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL && pValue != NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00f      	beq.n	800ad12 <drv_systimerGetValue+0x3a>
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 800acf2:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <drv_systimerGetValue+0x44>)
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	73bb      	strb	r3, [r7, #14]
        systimerGetValueResult = drv_tmrGetValue(instance, &temp);
 800acf8:	f107 0208 	add.w	r2, r7, #8
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	4611      	mov	r1, r2
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 f9b3 	bl	800b06c <drv_tmrGetValue>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73fb      	strb	r3, [r7, #15]
        *pValue = (u16_t)temp;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	801a      	strh	r2, [r3, #0]
    else
    {
        // Configuration array is NULL or output parameter is NULL.
    }

    return systimerGetValueResult;
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	08019b18 	.word	0x08019b18

0800ad20 <drv_tmrInit>:

/*
 * Function: drv_tmrInit
 */
gos_result_t drv_tmrInit (void_t)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t tmrDriverInitResult = GOS_SUCCESS;
 800ad26:	2355      	movs	r3, #85	; 0x55
 800ad28:	71fb      	strb	r3, [r7, #7]
    u8_t         tmrIdx              = 0u;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrConfig != NULL)
    {
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 800ad2e:	2300      	movs	r3, #0
 800ad30:	71bb      	strb	r3, [r7, #6]
 800ad32:	e00e      	b.n	800ad52 <drv_tmrInit+0x32>
        {
            GOS_CONCAT_RESULT(tmrDriverInitResult, drv_tmrInitInstance(tmrIdx));
 800ad34:	79fb      	ldrb	r3, [r7, #7]
 800ad36:	2b55      	cmp	r3, #85	; 0x55
 800ad38:	d106      	bne.n	800ad48 <drv_tmrInit+0x28>
 800ad3a:	79bb      	ldrb	r3, [r7, #6]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 f81b 	bl	800ad78 <drv_tmrInitInstance>
 800ad42:	4603      	mov	r3, r0
 800ad44:	71fb      	strb	r3, [r7, #7]
 800ad46:	e001      	b.n	800ad4c <drv_tmrInit+0x2c>
 800ad48:	23ae      	movs	r3, #174	; 0xae
 800ad4a:	71fb      	strb	r3, [r7, #7]
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 800ad4c:	79bb      	ldrb	r3, [r7, #6]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	71bb      	strb	r3, [r7, #6]
 800ad52:	79ba      	ldrb	r2, [r7, #6]
 800ad54:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <drv_tmrInit+0x50>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4906      	ldr	r1, [pc, #24]	; (800ad74 <drv_tmrInit+0x54>)
 800ad5a:	fba1 1303 	umull	r1, r3, r1, r3
 800ad5e:	091b      	lsrs	r3, r3, #4
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d3e7      	bcc.n	800ad34 <drv_tmrInit+0x14>
    {
        // Configuration array is NULL pointer.
        tmrDriverInitResult = GOS_ERROR;
    }

    return tmrDriverInitResult;
 800ad64:	79fb      	ldrb	r3, [r7, #7]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20000634 	.word	0x20000634
 800ad74:	4ec4ec4f 	.word	0x4ec4ec4f

0800ad78 <drv_tmrInitInstance>:

/*
 * Function: drv_tmrInitInstance
 */
gos_result_t drv_tmrInitInstance (u8_t tmrInstanceIndex)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08a      	sub	sp, #40	; 0x28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            tmrInitResult      = GOS_ERROR;
 800ad82:	23ae      	movs	r3, #174	; 0xae
 800ad84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    drv_tmrPeriphInstance_t instance           = 0u;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 800ad8e:	f107 031c 	add.w	r3, r7, #28
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
 800ad96:	605a      	str	r2, [r3, #4]
    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 800ad98:	f107 030c 	add.w	r3, r7, #12
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	605a      	str	r2, [r3, #4]
 800ada2:	609a      	str	r2, [r3, #8]
 800ada4:	60da      	str	r2, [r3, #12]

    /*
     * Function code.
     */
    if (tmrConfig != NULL && tmrInstanceIndex < (tmrConfigSize / sizeof(drv_tmrDescriptor_t)))
 800ada6:	79fa      	ldrb	r2, [r7, #7]
 800ada8:	4b90      	ldr	r3, [pc, #576]	; (800afec <drv_tmrInitInstance+0x274>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4990      	ldr	r1, [pc, #576]	; (800aff0 <drv_tmrInitInstance+0x278>)
 800adae:	fba1 1303 	umull	r1, r3, r1, r3
 800adb2:	091b      	lsrs	r3, r3, #4
 800adb4:	429a      	cmp	r2, r3
 800adb6:	f080 8112 	bcs.w	800afde <drv_tmrInitInstance+0x266>
    {
        instance = tmrConfig[tmrInstanceIndex].periphInstance;
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	4a8d      	ldr	r2, [pc, #564]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800adbe:	2134      	movs	r1, #52	; 0x34
 800adc0:	fb01 f303 	mul.w	r3, r1, r3
 800adc4:	4413      	add	r3, r2
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        htims[instance].Instance               = tmrInstanceLut[instance];
 800adcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800add0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800add4:	4988      	ldr	r1, [pc, #544]	; (800aff8 <drv_tmrInitInstance+0x280>)
 800add6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800adda:	4888      	ldr	r0, [pc, #544]	; (800affc <drv_tmrInitInstance+0x284>)
 800addc:	4613      	mov	r3, r2
 800adde:	00db      	lsls	r3, r3, #3
 800ade0:	4413      	add	r3, r2
 800ade2:	00db      	lsls	r3, r3, #3
 800ade4:	4403      	add	r3, r0
 800ade6:	6019      	str	r1, [r3, #0]
        htims[instance].Init.AutoReloadPreload = tmrConfig[tmrInstanceIndex].autoReloadPreload;
 800ade8:	79fb      	ldrb	r3, [r7, #7]
 800adea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800adee:	4981      	ldr	r1, [pc, #516]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800adf0:	2034      	movs	r0, #52	; 0x34
 800adf2:	fb00 f303 	mul.w	r3, r0, r3
 800adf6:	440b      	add	r3, r1
 800adf8:	3318      	adds	r3, #24
 800adfa:	6819      	ldr	r1, [r3, #0]
 800adfc:	487f      	ldr	r0, [pc, #508]	; (800affc <drv_tmrInitInstance+0x284>)
 800adfe:	4613      	mov	r3, r2
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	4413      	add	r3, r2
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	4403      	add	r3, r0
 800ae08:	3318      	adds	r3, #24
 800ae0a:	6019      	str	r1, [r3, #0]
        htims[instance].Init.ClockDivision     = tmrConfig[tmrInstanceIndex].clockDivision;
 800ae0c:	79fb      	ldrb	r3, [r7, #7]
 800ae0e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ae12:	4978      	ldr	r1, [pc, #480]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800ae14:	2034      	movs	r0, #52	; 0x34
 800ae16:	fb00 f303 	mul.w	r3, r0, r3
 800ae1a:	440b      	add	r3, r1
 800ae1c:	3314      	adds	r3, #20
 800ae1e:	6819      	ldr	r1, [r3, #0]
 800ae20:	4876      	ldr	r0, [pc, #472]	; (800affc <drv_tmrInitInstance+0x284>)
 800ae22:	4613      	mov	r3, r2
 800ae24:	00db      	lsls	r3, r3, #3
 800ae26:	4413      	add	r3, r2
 800ae28:	00db      	lsls	r3, r3, #3
 800ae2a:	4403      	add	r3, r0
 800ae2c:	3310      	adds	r3, #16
 800ae2e:	6019      	str	r1, [r3, #0]
        htims[instance].Init.CounterMode       = tmrConfig[tmrInstanceIndex].counterMode;
 800ae30:	79fb      	ldrb	r3, [r7, #7]
 800ae32:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ae36:	496f      	ldr	r1, [pc, #444]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800ae38:	2034      	movs	r0, #52	; 0x34
 800ae3a:	fb00 f303 	mul.w	r3, r0, r3
 800ae3e:	440b      	add	r3, r1
 800ae40:	330c      	adds	r3, #12
 800ae42:	6819      	ldr	r1, [r3, #0]
 800ae44:	486d      	ldr	r0, [pc, #436]	; (800affc <drv_tmrInitInstance+0x284>)
 800ae46:	4613      	mov	r3, r2
 800ae48:	00db      	lsls	r3, r3, #3
 800ae4a:	4413      	add	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	4403      	add	r3, r0
 800ae50:	3308      	adds	r3, #8
 800ae52:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Period            = tmrConfig[tmrInstanceIndex].period;
 800ae54:	79fb      	ldrb	r3, [r7, #7]
 800ae56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ae5a:	4966      	ldr	r1, [pc, #408]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800ae5c:	2034      	movs	r0, #52	; 0x34
 800ae5e:	fb00 f303 	mul.w	r3, r0, r3
 800ae62:	440b      	add	r3, r1
 800ae64:	3310      	adds	r3, #16
 800ae66:	6819      	ldr	r1, [r3, #0]
 800ae68:	4864      	ldr	r0, [pc, #400]	; (800affc <drv_tmrInitInstance+0x284>)
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	00db      	lsls	r3, r3, #3
 800ae6e:	4413      	add	r3, r2
 800ae70:	00db      	lsls	r3, r3, #3
 800ae72:	4403      	add	r3, r0
 800ae74:	330c      	adds	r3, #12
 800ae76:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Prescaler         = tmrConfig[tmrInstanceIndex].prescaler;
 800ae78:	79fb      	ldrb	r3, [r7, #7]
 800ae7a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ae7e:	495d      	ldr	r1, [pc, #372]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800ae80:	2034      	movs	r0, #52	; 0x34
 800ae82:	fb00 f303 	mul.w	r3, r0, r3
 800ae86:	440b      	add	r3, r1
 800ae88:	3304      	adds	r3, #4
 800ae8a:	6819      	ldr	r1, [r3, #0]
 800ae8c:	485b      	ldr	r0, [pc, #364]	; (800affc <drv_tmrInitInstance+0x284>)
 800ae8e:	4613      	mov	r3, r2
 800ae90:	00db      	lsls	r3, r3, #3
 800ae92:	4413      	add	r3, r2
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	4403      	add	r3, r0
 800ae98:	3304      	adds	r3, #4
 800ae9a:	6019      	str	r1, [r3, #0]
        htims[instance].Init.RepetitionCounter = tmrConfig[tmrInstanceIndex].repetitionCounter;
 800ae9c:	79fb      	ldrb	r3, [r7, #7]
 800ae9e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aea2:	4954      	ldr	r1, [pc, #336]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800aea4:	2034      	movs	r0, #52	; 0x34
 800aea6:	fb00 f303 	mul.w	r3, r0, r3
 800aeaa:	440b      	add	r3, r1
 800aeac:	3308      	adds	r3, #8
 800aeae:	6819      	ldr	r1, [r3, #0]
 800aeb0:	4852      	ldr	r0, [pc, #328]	; (800affc <drv_tmrInitInstance+0x284>)
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	00db      	lsls	r3, r3, #3
 800aeb6:	4413      	add	r3, r2
 800aeb8:	00db      	lsls	r3, r3, #3
 800aeba:	4403      	add	r3, r0
 800aebc:	3314      	adds	r3, #20
 800aebe:	6019      	str	r1, [r3, #0]
        sMasterConfig.MasterOutputTrigger      = tmrConfig[tmrInstanceIndex].masterOutputTrigger;
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	4a4c      	ldr	r2, [pc, #304]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800aec4:	2134      	movs	r1, #52	; 0x34
 800aec6:	fb01 f303 	mul.w	r3, r1, r3
 800aeca:	4413      	add	r3, r2
 800aecc:	3328      	adds	r3, #40	; 0x28
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	61fb      	str	r3, [r7, #28]
        sMasterConfig.MasterSlaveMode          = tmrConfig[tmrInstanceIndex].masterSlaveMode;
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	4a47      	ldr	r2, [pc, #284]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800aed6:	2134      	movs	r1, #52	; 0x34
 800aed8:	fb01 f303 	mul.w	r3, r1, r3
 800aedc:	4413      	add	r3, r2
 800aede:	332c      	adds	r3, #44	; 0x2c
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	623b      	str	r3, [r7, #32]
        sClockSourceConfig.ClockSource         = tmrConfig[tmrInstanceIndex].clockSource;
 800aee4:	79fb      	ldrb	r3, [r7, #7]
 800aee6:	4a43      	ldr	r2, [pc, #268]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800aee8:	2134      	movs	r1, #52	; 0x34
 800aeea:	fb01 f303 	mul.w	r3, r1, r3
 800aeee:	4413      	add	r3, r2
 800aef0:	3320      	adds	r3, #32
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60fb      	str	r3, [r7, #12]

        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 800aef6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aefa:	4613      	mov	r3, r2
 800aefc:	00db      	lsls	r3, r3, #3
 800aefe:	4413      	add	r3, r2
 800af00:	00db      	lsls	r3, r3, #3
 800af02:	4a3e      	ldr	r2, [pc, #248]	; (800affc <drv_tmrInitInstance+0x284>)
 800af04:	4413      	add	r3, r2
 800af06:	4618      	mov	r0, r3
 800af08:	f7fb fa6e 	bl	80063e8 <HAL_TIM_Base_Init>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d165      	bne.n	800afde <drv_tmrInitInstance+0x266>
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 800af12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4a39      	ldr	r2, [pc, #228]	; (800b000 <drv_tmrInitInstance+0x288>)
 800af1a:	4413      	add	r3, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f007 f9b9 	bl	8012294 <gos_mutexInit>
 800af22:	4603      	mov	r3, r0
        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 800af24:	2b55      	cmp	r3, #85	; 0x55
 800af26:	d15a      	bne.n	800afde <drv_tmrInitInstance+0x266>
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 800af28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af2c:	4613      	mov	r3, r2
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4a33      	ldr	r2, [pc, #204]	; (800b004 <drv_tmrInitInstance+0x28c>)
 800af36:	4413      	add	r3, r2
 800af38:	4618      	mov	r0, r3
 800af3a:	f009 fe5b 	bl	8014bf4 <gos_triggerInit>
 800af3e:	4603      	mov	r3, r0
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 800af40:	2b55      	cmp	r3, #85	; 0x55
 800af42:	d14c      	bne.n	800afde <drv_tmrInitInstance+0x266>
            gos_triggerReset  (&tmrReadyTriggers[instance]) == GOS_SUCCESS
 800af44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af48:	4613      	mov	r3, r2
 800af4a:	005b      	lsls	r3, r3, #1
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4a2c      	ldr	r2, [pc, #176]	; (800b004 <drv_tmrInitInstance+0x28c>)
 800af52:	4413      	add	r3, r2
 800af54:	4618      	mov	r0, r3
 800af56:	f009 fe69 	bl	8014c2c <gos_triggerReset>
 800af5a:	4603      	mov	r3, r0
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 800af5c:	2b55      	cmp	r3, #85	; 0x55
 800af5e:	d13e      	bne.n	800afde <drv_tmrInitInstance+0x266>
            )
        {
            tmrInitResult = GOS_SUCCESS;
 800af60:	2355      	movs	r3, #85	; 0x55
 800af62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (tmrConfig[tmrInstanceIndex].useClockConfig == GOS_TRUE)
 800af66:	79fb      	ldrb	r3, [r7, #7]
 800af68:	4a22      	ldr	r2, [pc, #136]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800af6a:	2134      	movs	r1, #52	; 0x34
 800af6c:	fb01 f303 	mul.w	r3, r1, r3
 800af70:	4413      	add	r3, r2
 800af72:	331c      	adds	r3, #28
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	2b36      	cmp	r3, #54	; 0x36
 800af78:	d113      	bne.n	800afa2 <drv_tmrInitInstance+0x22a>
            {
                if (HAL_TIM_ConfigClockSource(&htims[instance], &sClockSourceConfig) != HAL_OK)
 800af7a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af7e:	4613      	mov	r3, r2
 800af80:	00db      	lsls	r3, r3, #3
 800af82:	4413      	add	r3, r2
 800af84:	00db      	lsls	r3, r3, #3
 800af86:	4a1d      	ldr	r2, [pc, #116]	; (800affc <drv_tmrInitInstance+0x284>)
 800af88:	4413      	add	r3, r2
 800af8a:	f107 020c 	add.w	r2, r7, #12
 800af8e:	4611      	mov	r1, r2
 800af90:	4618      	mov	r0, r3
 800af92:	f7fb fb8a 	bl	80066aa <HAL_TIM_ConfigClockSource>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <drv_tmrInitInstance+0x22a>
                {
                    tmrInitResult = GOS_ERROR;
 800af9c:	23ae      	movs	r3, #174	; 0xae
 800af9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            else
            {
                // Not used.
            }

            if (tmrConfig[tmrInstanceIndex].useMasterConfig == GOS_TRUE)
 800afa2:	79fb      	ldrb	r3, [r7, #7]
 800afa4:	4a13      	ldr	r2, [pc, #76]	; (800aff4 <drv_tmrInitInstance+0x27c>)
 800afa6:	2134      	movs	r1, #52	; 0x34
 800afa8:	fb01 f303 	mul.w	r3, r1, r3
 800afac:	4413      	add	r3, r2
 800afae:	3324      	adds	r3, #36	; 0x24
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	2b36      	cmp	r3, #54	; 0x36
 800afb4:	d113      	bne.n	800afde <drv_tmrInitInstance+0x266>
            {
                if (HAL_TIMEx_MasterConfigSynchronization(&htims[instance], &sMasterConfig) != HAL_OK)
 800afb6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800afba:	4613      	mov	r3, r2
 800afbc:	00db      	lsls	r3, r3, #3
 800afbe:	4413      	add	r3, r2
 800afc0:	00db      	lsls	r3, r3, #3
 800afc2:	4a0e      	ldr	r2, [pc, #56]	; (800affc <drv_tmrInitInstance+0x284>)
 800afc4:	4413      	add	r3, r2
 800afc6:	f107 021c 	add.w	r2, r7, #28
 800afca:	4611      	mov	r1, r2
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fb fd93 	bl	8006af8 <HAL_TIMEx_MasterConfigSynchronization>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d002      	beq.n	800afde <drv_tmrInitInstance+0x266>
                {
                    tmrInitResult = GOS_ERROR;
 800afd8:	23ae      	movs	r3, #174	; 0xae
 800afda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return tmrInitResult;
 800afde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3728      	adds	r7, #40	; 0x28
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20000634 	.word	0x20000634
 800aff0:	4ec4ec4f 	.word	0x4ec4ec4f
 800aff4:	200005cc 	.word	0x200005cc
 800aff8:	200006cc 	.word	0x200006cc
 800affc:	200029dc 	.word	0x200029dc
 800b000:	20002dcc 	.word	0x20002dcc
 800b004:	20002e04 	.word	0x20002e04

0800b008 <drv_tmrStart>:

/*
 * Function: drv_tmrStart
 */
gos_result_t drv_tmrStart (drv_tmrPeriphInstance_t instance, u32_t mutexTmo)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	6039      	str	r1, [r7, #0]
 800b012:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrStartResult = GOS_ERROR;
 800b014:	23ae      	movs	r3, #174	; 0xae
 800b016:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4a11      	ldr	r2, [pc, #68]	; (800b064 <drv_tmrStart+0x5c>)
 800b01e:	4413      	add	r3, r2
 800b020:	6839      	ldr	r1, [r7, #0]
 800b022:	4618      	mov	r0, r3
 800b024:	f007 f950 	bl	80122c8 <gos_mutexLock>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b55      	cmp	r3, #85	; 0x55
 800b02c:	d10e      	bne.n	800b04c <drv_tmrStart+0x44>
        HAL_TIM_Base_Start(&htims[instance])           == HAL_OK)
 800b02e:	79fa      	ldrb	r2, [r7, #7]
 800b030:	4613      	mov	r3, r2
 800b032:	00db      	lsls	r3, r3, #3
 800b034:	4413      	add	r3, r2
 800b036:	00db      	lsls	r3, r3, #3
 800b038:	4a0b      	ldr	r2, [pc, #44]	; (800b068 <drv_tmrStart+0x60>)
 800b03a:	4413      	add	r3, r2
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7fb fa08 	bl	8006452 <HAL_TIM_Base_Start>
 800b042:	4603      	mov	r3, r0
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 800b044:	2b00      	cmp	r3, #0
 800b046:	d101      	bne.n	800b04c <drv_tmrStart+0x44>
    {
        tmrStartResult = GOS_SUCCESS;
 800b048:	2355      	movs	r3, #85	; 0x55
 800b04a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    (void_t) gos_mutexUnlock(&tmrMutexes[instance]);
 800b04c:	79fb      	ldrb	r3, [r7, #7]
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4a04      	ldr	r2, [pc, #16]	; (800b064 <drv_tmrStart+0x5c>)
 800b052:	4413      	add	r3, r2
 800b054:	4618      	mov	r0, r3
 800b056:	f007 fa3d 	bl	80124d4 <gos_mutexUnlock>

    return tmrStartResult;
 800b05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	20002dcc 	.word	0x20002dcc
 800b068:	200029dc 	.word	0x200029dc

0800b06c <drv_tmrGetValue>:

/*
 * Function: drv_tmrGetValue
 */
GOS_INLINE gos_result_t drv_tmrGetValue (drv_tmrPeriphInstance_t instance, u32_t* pValue)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	4603      	mov	r3, r0
 800b074:	6039      	str	r1, [r7, #0]
 800b076:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrGetResult = GOS_ERROR;
 800b078:	23ae      	movs	r3, #174	; 0xae
 800b07a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00c      	beq.n	800b09c <drv_tmrGetValue+0x30>
    {
        *pValue = __HAL_TIM_GET_COUNTER(&htims[instance]);
 800b082:	79fa      	ldrb	r2, [r7, #7]
 800b084:	4909      	ldr	r1, [pc, #36]	; (800b0ac <drv_tmrGetValue+0x40>)
 800b086:	4613      	mov	r3, r2
 800b088:	00db      	lsls	r3, r3, #3
 800b08a:	4413      	add	r3, r2
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	440b      	add	r3, r1
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	601a      	str	r2, [r3, #0]
        tmrGetResult = GOS_SUCCESS;
 800b098:	2355      	movs	r3, #85	; 0x55
 800b09a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return tmrGetResult;
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	200029dc 	.word	0x200029dc

0800b0b0 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Function: HAL_TIM_PeriodElapsedCallback
 */
void_t HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *pHtim)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_tmrPeriphInstance_t instance = DRV_TMR_INSTANCE_1;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pHtim != NULL && tmrConfig != NULL)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d041      	beq.n	800b14a <HAL_TIM_PeriodElapsedCallback+0x9a>
    {
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	73fb      	strb	r3, [r7, #15]
 800b0ca:	e03a      	b.n	800b142 <HAL_TIM_PeriodElapsedCallback+0x92>
        {
            if (tmrInstanceLut[instance] == pHtim->Instance)
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	4a21      	ldr	r2, [pc, #132]	; (800b154 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800b0d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d12f      	bne.n	800b13c <HAL_TIM_PeriodElapsedCallback+0x8c>
            {
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73bb      	strb	r3, [r7, #14]
 800b0e0:	e020      	b.n	800b124 <HAL_TIM_PeriodElapsedCallback+0x74>
                {
                    if (tmrConfig[idx].periphInstance == instance)
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	4a1c      	ldr	r2, [pc, #112]	; (800b158 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b0e6:	2134      	movs	r1, #52	; 0x34
 800b0e8:	fb01 f303 	mul.w	r3, r1, r3
 800b0ec:	4413      	add	r3, r2
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	7bfa      	ldrb	r2, [r7, #15]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d113      	bne.n	800b11e <HAL_TIM_PeriodElapsedCallback+0x6e>
                    {
                        if (tmrConfig[idx].periodCallback != NULL)
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
 800b0f8:	4a17      	ldr	r2, [pc, #92]	; (800b158 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b0fa:	2134      	movs	r1, #52	; 0x34
 800b0fc:	fb01 f303 	mul.w	r3, r1, r3
 800b100:	4413      	add	r3, r2
 800b102:	3330      	adds	r3, #48	; 0x30
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d016      	beq.n	800b138 <HAL_TIM_PeriodElapsedCallback+0x88>
                        {
                            tmrConfig[idx].periodCallback();
 800b10a:	7bbb      	ldrb	r3, [r7, #14]
 800b10c:	4a12      	ldr	r2, [pc, #72]	; (800b158 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b10e:	2134      	movs	r1, #52	; 0x34
 800b110:	fb01 f303 	mul.w	r3, r1, r3
 800b114:	4413      	add	r3, r2
 800b116:	3330      	adds	r3, #48	; 0x30
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4798      	blx	r3
                        }
                        else
                        {
                            // No registered callback.
                        }
                        break;
 800b11c:	e00c      	b.n	800b138 <HAL_TIM_PeriodElapsedCallback+0x88>
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 800b11e:	7bbb      	ldrb	r3, [r7, #14]
 800b120:	3301      	adds	r3, #1
 800b122:	73bb      	strb	r3, [r7, #14]
 800b124:	7bba      	ldrb	r2, [r7, #14]
 800b126:	4b0d      	ldr	r3, [pc, #52]	; (800b15c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	490d      	ldr	r1, [pc, #52]	; (800b160 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800b12c:	fba1 1303 	umull	r1, r3, r1, r3
 800b130:	091b      	lsrs	r3, r3, #4
 800b132:	429a      	cmp	r2, r3
 800b134:	d3d5      	bcc.n	800b0e2 <HAL_TIM_PeriodElapsedCallback+0x32>
                    else
                    {
                        // Continue.
                    }
                }
                break;
 800b136:	e008      	b.n	800b14a <HAL_TIM_PeriodElapsedCallback+0x9a>
                        break;
 800b138:	bf00      	nop
                break;
 800b13a:	e006      	b.n	800b14a <HAL_TIM_PeriodElapsedCallback+0x9a>
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
 800b13e:	3301      	adds	r3, #1
 800b140:	73fb      	strb	r3, [r7, #15]
 800b142:	7bfb      	ldrb	r3, [r7, #15]
 800b144:	2b0d      	cmp	r3, #13
 800b146:	d9c1      	bls.n	800b0cc <HAL_TIM_PeriodElapsedCallback+0x1c>
    }
    else
    {
        // NULL pointer fail.
    }
}
 800b148:	e7ff      	b.n	800b14a <HAL_TIM_PeriodElapsedCallback+0x9a>
 800b14a:	bf00      	nop
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	200006cc 	.word	0x200006cc
 800b158:	200005cc 	.word	0x200005cc
 800b15c:	20000634 	.word	0x20000634
 800b160:	4ec4ec4f 	.word	0x4ec4ec4f

0800b164 <TIM2_IRQHandler>:

/*
 * Function: TIM2_IRQHandler
 */
void_t TIM2_IRQHandler (void_t)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800b168:	4b16      	ldr	r3, [pc, #88]	; (800b1c4 <TIM2_IRQHandler+0x60>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d105      	bne.n	800b17c <TIM2_IRQHandler+0x18>
 800b170:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <TIM2_IRQHandler+0x64>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	3301      	adds	r3, #1
 800b176:	b2da      	uxtb	r2, r3
 800b178:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <TIM2_IRQHandler+0x64>)
 800b17a:	701a      	strb	r2, [r3, #0]
 800b17c:	4b11      	ldr	r3, [pc, #68]	; (800b1c4 <TIM2_IRQHandler+0x60>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	3301      	adds	r3, #1
 800b182:	b2da      	uxtb	r2, r3
 800b184:	4b0f      	ldr	r3, [pc, #60]	; (800b1c4 <TIM2_IRQHandler+0x60>)
 800b186:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_2]);
 800b188:	4810      	ldr	r0, [pc, #64]	; (800b1cc <TIM2_IRQHandler+0x68>)
 800b18a:	f7fb f986 	bl	800649a <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800b18e:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <TIM2_IRQHandler+0x60>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d005      	beq.n	800b1a2 <TIM2_IRQHandler+0x3e>
 800b196:	4b0b      	ldr	r3, [pc, #44]	; (800b1c4 <TIM2_IRQHandler+0x60>)
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	3b01      	subs	r3, #1
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	4b09      	ldr	r3, [pc, #36]	; (800b1c4 <TIM2_IRQHandler+0x60>)
 800b1a0:	701a      	strb	r2, [r3, #0]
 800b1a2:	4b08      	ldr	r3, [pc, #32]	; (800b1c4 <TIM2_IRQHandler+0x60>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d109      	bne.n	800b1be <TIM2_IRQHandler+0x5a>
 800b1aa:	4b07      	ldr	r3, [pc, #28]	; (800b1c8 <TIM2_IRQHandler+0x64>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d005      	beq.n	800b1be <TIM2_IRQHandler+0x5a>
 800b1b2:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <TIM2_IRQHandler+0x64>)
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	4b03      	ldr	r3, [pc, #12]	; (800b1c8 <TIM2_IRQHandler+0x64>)
 800b1bc:	701a      	strb	r2, [r3, #0]
}
 800b1be:	bf00      	nop
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	200050ea 	.word	0x200050ea
 800b1c8:	200050e9 	.word	0x200050e9
 800b1cc:	20002a24 	.word	0x20002a24

0800b1d0 <TIM3_IRQHandler>:

/*
 * Function: TIM3_IRQHandler
 */
void_t TIM3_IRQHandler (void_t)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800b1d4:	4b16      	ldr	r3, [pc, #88]	; (800b230 <TIM3_IRQHandler+0x60>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d105      	bne.n	800b1e8 <TIM3_IRQHandler+0x18>
 800b1dc:	4b15      	ldr	r3, [pc, #84]	; (800b234 <TIM3_IRQHandler+0x64>)
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	4b13      	ldr	r3, [pc, #76]	; (800b234 <TIM3_IRQHandler+0x64>)
 800b1e6:	701a      	strb	r2, [r3, #0]
 800b1e8:	4b11      	ldr	r3, [pc, #68]	; (800b230 <TIM3_IRQHandler+0x60>)
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	4b0f      	ldr	r3, [pc, #60]	; (800b230 <TIM3_IRQHandler+0x60>)
 800b1f2:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_3]);
 800b1f4:	4810      	ldr	r0, [pc, #64]	; (800b238 <TIM3_IRQHandler+0x68>)
 800b1f6:	f7fb f950 	bl	800649a <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800b1fa:	4b0d      	ldr	r3, [pc, #52]	; (800b230 <TIM3_IRQHandler+0x60>)
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d005      	beq.n	800b20e <TIM3_IRQHandler+0x3e>
 800b202:	4b0b      	ldr	r3, [pc, #44]	; (800b230 <TIM3_IRQHandler+0x60>)
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	3b01      	subs	r3, #1
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	4b09      	ldr	r3, [pc, #36]	; (800b230 <TIM3_IRQHandler+0x60>)
 800b20c:	701a      	strb	r2, [r3, #0]
 800b20e:	4b08      	ldr	r3, [pc, #32]	; (800b230 <TIM3_IRQHandler+0x60>)
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d109      	bne.n	800b22a <TIM3_IRQHandler+0x5a>
 800b216:	4b07      	ldr	r3, [pc, #28]	; (800b234 <TIM3_IRQHandler+0x64>)
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d005      	beq.n	800b22a <TIM3_IRQHandler+0x5a>
 800b21e:	4b05      	ldr	r3, [pc, #20]	; (800b234 <TIM3_IRQHandler+0x64>)
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	3b01      	subs	r3, #1
 800b224:	b2da      	uxtb	r2, r3
 800b226:	4b03      	ldr	r3, [pc, #12]	; (800b234 <TIM3_IRQHandler+0x64>)
 800b228:	701a      	strb	r2, [r3, #0]
}
 800b22a:	bf00      	nop
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	200050ea 	.word	0x200050ea
 800b234:	200050e9 	.word	0x200050e9
 800b238:	20002a6c 	.word	0x20002a6c

0800b23c <TIM4_IRQHandler>:

/*
 * Function: TIM4_IRQHandler
 */
void_t TIM4_IRQHandler (void_t)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800b240:	4b16      	ldr	r3, [pc, #88]	; (800b29c <TIM4_IRQHandler+0x60>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d105      	bne.n	800b254 <TIM4_IRQHandler+0x18>
 800b248:	4b15      	ldr	r3, [pc, #84]	; (800b2a0 <TIM4_IRQHandler+0x64>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	3301      	adds	r3, #1
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	4b13      	ldr	r3, [pc, #76]	; (800b2a0 <TIM4_IRQHandler+0x64>)
 800b252:	701a      	strb	r2, [r3, #0]
 800b254:	4b11      	ldr	r3, [pc, #68]	; (800b29c <TIM4_IRQHandler+0x60>)
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	3301      	adds	r3, #1
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	4b0f      	ldr	r3, [pc, #60]	; (800b29c <TIM4_IRQHandler+0x60>)
 800b25e:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_4]);
 800b260:	4810      	ldr	r0, [pc, #64]	; (800b2a4 <TIM4_IRQHandler+0x68>)
 800b262:	f7fb f91a 	bl	800649a <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800b266:	4b0d      	ldr	r3, [pc, #52]	; (800b29c <TIM4_IRQHandler+0x60>)
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d005      	beq.n	800b27a <TIM4_IRQHandler+0x3e>
 800b26e:	4b0b      	ldr	r3, [pc, #44]	; (800b29c <TIM4_IRQHandler+0x60>)
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	3b01      	subs	r3, #1
 800b274:	b2da      	uxtb	r2, r3
 800b276:	4b09      	ldr	r3, [pc, #36]	; (800b29c <TIM4_IRQHandler+0x60>)
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	4b08      	ldr	r3, [pc, #32]	; (800b29c <TIM4_IRQHandler+0x60>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d109      	bne.n	800b296 <TIM4_IRQHandler+0x5a>
 800b282:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <TIM4_IRQHandler+0x64>)
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d005      	beq.n	800b296 <TIM4_IRQHandler+0x5a>
 800b28a:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <TIM4_IRQHandler+0x64>)
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	3b01      	subs	r3, #1
 800b290:	b2da      	uxtb	r2, r3
 800b292:	4b03      	ldr	r3, [pc, #12]	; (800b2a0 <TIM4_IRQHandler+0x64>)
 800b294:	701a      	strb	r2, [r3, #0]
}
 800b296:	bf00      	nop
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	200050ea 	.word	0x200050ea
 800b2a0:	200050e9 	.word	0x200050e9
 800b2a4:	20002ab4 	.word	0x20002ab4

0800b2a8 <TIM5_IRQHandler>:

/*
 * Function: TIM5_IRQHandler
 */
void_t TIM5_IRQHandler (void_t)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800b2ac:	4b16      	ldr	r3, [pc, #88]	; (800b308 <TIM5_IRQHandler+0x60>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d105      	bne.n	800b2c0 <TIM5_IRQHandler+0x18>
 800b2b4:	4b15      	ldr	r3, [pc, #84]	; (800b30c <TIM5_IRQHandler+0x64>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	4b13      	ldr	r3, [pc, #76]	; (800b30c <TIM5_IRQHandler+0x64>)
 800b2be:	701a      	strb	r2, [r3, #0]
 800b2c0:	4b11      	ldr	r3, [pc, #68]	; (800b308 <TIM5_IRQHandler+0x60>)
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	4b0f      	ldr	r3, [pc, #60]	; (800b308 <TIM5_IRQHandler+0x60>)
 800b2ca:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_5]);
 800b2cc:	4810      	ldr	r0, [pc, #64]	; (800b310 <TIM5_IRQHandler+0x68>)
 800b2ce:	f7fb f8e4 	bl	800649a <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800b2d2:	4b0d      	ldr	r3, [pc, #52]	; (800b308 <TIM5_IRQHandler+0x60>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d005      	beq.n	800b2e6 <TIM5_IRQHandler+0x3e>
 800b2da:	4b0b      	ldr	r3, [pc, #44]	; (800b308 <TIM5_IRQHandler+0x60>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	4b09      	ldr	r3, [pc, #36]	; (800b308 <TIM5_IRQHandler+0x60>)
 800b2e4:	701a      	strb	r2, [r3, #0]
 800b2e6:	4b08      	ldr	r3, [pc, #32]	; (800b308 <TIM5_IRQHandler+0x60>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d109      	bne.n	800b302 <TIM5_IRQHandler+0x5a>
 800b2ee:	4b07      	ldr	r3, [pc, #28]	; (800b30c <TIM5_IRQHandler+0x64>)
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d005      	beq.n	800b302 <TIM5_IRQHandler+0x5a>
 800b2f6:	4b05      	ldr	r3, [pc, #20]	; (800b30c <TIM5_IRQHandler+0x64>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	4b03      	ldr	r3, [pc, #12]	; (800b30c <TIM5_IRQHandler+0x64>)
 800b300:	701a      	strb	r2, [r3, #0]
}
 800b302:	bf00      	nop
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	200050ea 	.word	0x200050ea
 800b30c:	200050e9 	.word	0x200050e9
 800b310:	20002afc 	.word	0x20002afc

0800b314 <TIM7_IRQHandler>:

/*
 * Function: TIM7_IRQHandler
 */
void_t TIM7_IRQHandler (void_t)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800b318:	4b16      	ldr	r3, [pc, #88]	; (800b374 <TIM7_IRQHandler+0x60>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d105      	bne.n	800b32c <TIM7_IRQHandler+0x18>
 800b320:	4b15      	ldr	r3, [pc, #84]	; (800b378 <TIM7_IRQHandler+0x64>)
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	3301      	adds	r3, #1
 800b326:	b2da      	uxtb	r2, r3
 800b328:	4b13      	ldr	r3, [pc, #76]	; (800b378 <TIM7_IRQHandler+0x64>)
 800b32a:	701a      	strb	r2, [r3, #0]
 800b32c:	4b11      	ldr	r3, [pc, #68]	; (800b374 <TIM7_IRQHandler+0x60>)
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	3301      	adds	r3, #1
 800b332:	b2da      	uxtb	r2, r3
 800b334:	4b0f      	ldr	r3, [pc, #60]	; (800b374 <TIM7_IRQHandler+0x60>)
 800b336:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_7]);
 800b338:	4810      	ldr	r0, [pc, #64]	; (800b37c <TIM7_IRQHandler+0x68>)
 800b33a:	f7fb f8ae 	bl	800649a <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 800b33e:	4b0d      	ldr	r3, [pc, #52]	; (800b374 <TIM7_IRQHandler+0x60>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d005      	beq.n	800b352 <TIM7_IRQHandler+0x3e>
 800b346:	4b0b      	ldr	r3, [pc, #44]	; (800b374 <TIM7_IRQHandler+0x60>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	3b01      	subs	r3, #1
 800b34c:	b2da      	uxtb	r2, r3
 800b34e:	4b09      	ldr	r3, [pc, #36]	; (800b374 <TIM7_IRQHandler+0x60>)
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	4b08      	ldr	r3, [pc, #32]	; (800b374 <TIM7_IRQHandler+0x60>)
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d109      	bne.n	800b36e <TIM7_IRQHandler+0x5a>
 800b35a:	4b07      	ldr	r3, [pc, #28]	; (800b378 <TIM7_IRQHandler+0x64>)
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d005      	beq.n	800b36e <TIM7_IRQHandler+0x5a>
 800b362:	4b05      	ldr	r3, [pc, #20]	; (800b378 <TIM7_IRQHandler+0x64>)
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	3b01      	subs	r3, #1
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	4b03      	ldr	r3, [pc, #12]	; (800b378 <TIM7_IRQHandler+0x64>)
 800b36c:	701a      	strb	r2, [r3, #0]
}
 800b36e:	bf00      	nop
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	200050ea 	.word	0x200050ea
 800b378:	200050e9 	.word	0x200050e9
 800b37c:	20002b8c 	.word	0x20002b8c

0800b380 <drv_traceTransmitUnsafe>:

/*
 * Function: drv_traceTransmitUnsafe
 */
GOS_INLINE gos_result_t drv_traceTransmitUnsafe (char_t* pMessage)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800b388:	23ae      	movs	r3, #174	; 0xae
 800b38a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800b38c:	2300      	movs	r3, #0
 800b38e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 800b390:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <drv_traceTransmitUnsafe+0x3c>)
 800b392:	789b      	ldrb	r3, [r3, #2]
 800b394:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitBlocking(instance, (u8_t*)pMessage, strlen(pMessage),
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7f4 ff9a 	bl	80002d0 <strlen>
 800b39c:	4603      	mov	r3, r0
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	4b07      	ldr	r3, [pc, #28]	; (800b3c0 <drv_traceTransmitUnsafe+0x40>)
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	7bb8      	ldrb	r0, [r7, #14]
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	f000 f982 	bl	800b6b0 <drv_uartTransmitBlocking>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	08019b94 	.word	0x08019b94
 800b3c0:	20000638 	.word	0x20000638

0800b3c4 <drv_traceTransmit>:

/*
 * Function: drv_traceTransmit
 */
GOS_INLINE gos_result_t drv_traceTransmit (char_t* pMessage)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af02      	add	r7, sp, #8
 800b3ca:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800b3cc:	23ae      	movs	r3, #174	; 0xae
 800b3ce:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 800b3d4:	4b0c      	ldr	r3, [pc, #48]	; (800b408 <drv_traceTransmit+0x44>)
 800b3d6:	789b      	ldrb	r3, [r3, #2]
 800b3d8:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitDMA(instance, (u8_t*)pMessage, strlen(pMessage),
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7f4 ff78 	bl	80002d0 <strlen>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	4b09      	ldr	r3, [pc, #36]	; (800b40c <drv_traceTransmit+0x48>)
 800b3e6:	6819      	ldr	r1, [r3, #0]
 800b3e8:	4b08      	ldr	r3, [pc, #32]	; (800b40c <drv_traceTransmit+0x48>)
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	7bb8      	ldrb	r0, [r7, #14]
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	6879      	ldr	r1, [r7, #4]
 800b3f4:	f000 f9f4 	bl	800b7e0 <drv_uartTransmitDMA>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	08019b94 	.word	0x08019b94
 800b40c:	20000638 	.word	0x20000638

0800b410 <drv_uartInit>:

/*
 * Function: drv_uartInit
 */
gos_result_t drv_uartInit (void_t)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 800b416:	2355      	movs	r3, #85	; 0x55
 800b418:	71fb      	strb	r3, [r7, #7]
    u8_t         uartIdx              = 0u;
 800b41a:	2300      	movs	r3, #0
 800b41c:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 800b41e:	2300      	movs	r3, #0
 800b420:	71bb      	strb	r3, [r7, #6]
 800b422:	e00e      	b.n	800b442 <drv_uartInit+0x32>
        {
            GOS_CONCAT_RESULT(uartDriverInitResult, drv_uartInitInstance(uartIdx));
 800b424:	79fb      	ldrb	r3, [r7, #7]
 800b426:	2b55      	cmp	r3, #85	; 0x55
 800b428:	d106      	bne.n	800b438 <drv_uartInit+0x28>
 800b42a:	79bb      	ldrb	r3, [r7, #6]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f000 f81b 	bl	800b468 <drv_uartInitInstance>
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]
 800b436:	e001      	b.n	800b43c <drv_uartInit+0x2c>
 800b438:	23ae      	movs	r3, #174	; 0xae
 800b43a:	71fb      	strb	r3, [r7, #7]
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 800b43c:	79bb      	ldrb	r3, [r7, #6]
 800b43e:	3301      	adds	r3, #1
 800b440:	71bb      	strb	r3, [r7, #6]
 800b442:	79ba      	ldrb	r2, [r7, #6]
 800b444:	4b06      	ldr	r3, [pc, #24]	; (800b460 <drv_uartInit+0x50>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4906      	ldr	r1, [pc, #24]	; (800b464 <drv_uartInit+0x54>)
 800b44a:	fba1 1303 	umull	r1, r3, r1, r3
 800b44e:	095b      	lsrs	r3, r3, #5
 800b450:	429a      	cmp	r2, r3
 800b452:	d3e7      	bcc.n	800b424 <drv_uartInit+0x14>
        // Configuration array is NULL pointer.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
        uartDriverInitResult = GOS_ERROR;
    }

    return uartDriverInitResult;
 800b454:	79fb      	ldrb	r3, [r7, #7]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	20000664 	.word	0x20000664
 800b464:	cccccccd 	.word	0xcccccccd

0800b468 <drv_uartInitInstance>:

/*
 * Function: drv_uartInitInstance
 */
gos_result_t drv_uartInitInstance (u8_t uartInstanceIndex)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	4603      	mov	r3, r0
 800b470:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             uartInitResult = GOS_ERROR;
 800b472:	23ae      	movs	r3, #174	; 0xae
 800b474:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance       = 0u;
 800b476:	2300      	movs	r3, #0
 800b478:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        if (uartInstanceIndex < (uartConfigSize / sizeof(drv_uartDescriptor_t)))
 800b47a:	79fa      	ldrb	r2, [r7, #7]
 800b47c:	4b82      	ldr	r3, [pc, #520]	; (800b688 <drv_uartInitInstance+0x220>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4982      	ldr	r1, [pc, #520]	; (800b68c <drv_uartInitInstance+0x224>)
 800b482:	fba1 1303 	umull	r1, r3, r1, r3
 800b486:	095b      	lsrs	r3, r3, #5
 800b488:	429a      	cmp	r2, r3
 800b48a:	f080 80f2 	bcs.w	800b672 <drv_uartInitInstance+0x20a>
        {
            instance = uartConfig[uartInstanceIndex].periphInstance;
 800b48e:	79fa      	ldrb	r2, [r7, #7]
 800b490:	497f      	ldr	r1, [pc, #508]	; (800b690 <drv_uartInitInstance+0x228>)
 800b492:	4613      	mov	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4413      	add	r3, r2
 800b498:	00db      	lsls	r3, r3, #3
 800b49a:	440b      	add	r3, r1
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	73bb      	strb	r3, [r7, #14]

            huarts[instance].Instance          = uartInstanceLut[instance];
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	7bba      	ldrb	r2, [r7, #14]
 800b4a4:	497b      	ldr	r1, [pc, #492]	; (800b694 <drv_uartInitInstance+0x22c>)
 800b4a6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b4aa:	487b      	ldr	r0, [pc, #492]	; (800b698 <drv_uartInitInstance+0x230>)
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	011b      	lsls	r3, r3, #4
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4403      	add	r3, r0
 800b4b6:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.BaudRate     = uartConfig[uartInstanceIndex].baudRate;
 800b4b8:	79f9      	ldrb	r1, [r7, #7]
 800b4ba:	7bba      	ldrb	r2, [r7, #14]
 800b4bc:	4874      	ldr	r0, [pc, #464]	; (800b690 <drv_uartInitInstance+0x228>)
 800b4be:	460b      	mov	r3, r1
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	440b      	add	r3, r1
 800b4c4:	00db      	lsls	r3, r3, #3
 800b4c6:	4403      	add	r3, r0
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	6819      	ldr	r1, [r3, #0]
 800b4cc:	4872      	ldr	r0, [pc, #456]	; (800b698 <drv_uartInitInstance+0x230>)
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	011b      	lsls	r3, r3, #4
 800b4d2:	4413      	add	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4403      	add	r3, r0
 800b4d8:	3304      	adds	r3, #4
 800b4da:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.WordLength   = uartConfig[uartInstanceIndex].wordLength;
 800b4dc:	79f9      	ldrb	r1, [r7, #7]
 800b4de:	7bba      	ldrb	r2, [r7, #14]
 800b4e0:	486b      	ldr	r0, [pc, #428]	; (800b690 <drv_uartInitInstance+0x228>)
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	440b      	add	r3, r1
 800b4e8:	00db      	lsls	r3, r3, #3
 800b4ea:	4403      	add	r3, r0
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	6819      	ldr	r1, [r3, #0]
 800b4f0:	4869      	ldr	r0, [pc, #420]	; (800b698 <drv_uartInitInstance+0x230>)
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	011b      	lsls	r3, r3, #4
 800b4f6:	4413      	add	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4403      	add	r3, r0
 800b4fc:	3308      	adds	r3, #8
 800b4fe:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.StopBits     = uartConfig[uartInstanceIndex].stopBits;
 800b500:	79f9      	ldrb	r1, [r7, #7]
 800b502:	7bba      	ldrb	r2, [r7, #14]
 800b504:	4862      	ldr	r0, [pc, #392]	; (800b690 <drv_uartInitInstance+0x228>)
 800b506:	460b      	mov	r3, r1
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	440b      	add	r3, r1
 800b50c:	00db      	lsls	r3, r3, #3
 800b50e:	4403      	add	r3, r0
 800b510:	330c      	adds	r3, #12
 800b512:	6819      	ldr	r1, [r3, #0]
 800b514:	4860      	ldr	r0, [pc, #384]	; (800b698 <drv_uartInitInstance+0x230>)
 800b516:	4613      	mov	r3, r2
 800b518:	011b      	lsls	r3, r3, #4
 800b51a:	4413      	add	r3, r2
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	4403      	add	r3, r0
 800b520:	330c      	adds	r3, #12
 800b522:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Parity       = uartConfig[uartInstanceIndex].parity;
 800b524:	79f9      	ldrb	r1, [r7, #7]
 800b526:	7bba      	ldrb	r2, [r7, #14]
 800b528:	4859      	ldr	r0, [pc, #356]	; (800b690 <drv_uartInitInstance+0x228>)
 800b52a:	460b      	mov	r3, r1
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	440b      	add	r3, r1
 800b530:	00db      	lsls	r3, r3, #3
 800b532:	4403      	add	r3, r0
 800b534:	3310      	adds	r3, #16
 800b536:	6819      	ldr	r1, [r3, #0]
 800b538:	4857      	ldr	r0, [pc, #348]	; (800b698 <drv_uartInitInstance+0x230>)
 800b53a:	4613      	mov	r3, r2
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	4413      	add	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4403      	add	r3, r0
 800b544:	3310      	adds	r3, #16
 800b546:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Mode         = uartConfig[uartInstanceIndex].mode;
 800b548:	79f9      	ldrb	r1, [r7, #7]
 800b54a:	7bba      	ldrb	r2, [r7, #14]
 800b54c:	4850      	ldr	r0, [pc, #320]	; (800b690 <drv_uartInitInstance+0x228>)
 800b54e:	460b      	mov	r3, r1
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	00db      	lsls	r3, r3, #3
 800b556:	4403      	add	r3, r0
 800b558:	3314      	adds	r3, #20
 800b55a:	6819      	ldr	r1, [r3, #0]
 800b55c:	484e      	ldr	r0, [pc, #312]	; (800b698 <drv_uartInitInstance+0x230>)
 800b55e:	4613      	mov	r3, r2
 800b560:	011b      	lsls	r3, r3, #4
 800b562:	4413      	add	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	4403      	add	r3, r0
 800b568:	3314      	adds	r3, #20
 800b56a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.HwFlowCtl    = uartConfig[uartInstanceIndex].hwFlowControl;
 800b56c:	79f9      	ldrb	r1, [r7, #7]
 800b56e:	7bba      	ldrb	r2, [r7, #14]
 800b570:	4847      	ldr	r0, [pc, #284]	; (800b690 <drv_uartInitInstance+0x228>)
 800b572:	460b      	mov	r3, r1
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	440b      	add	r3, r1
 800b578:	00db      	lsls	r3, r3, #3
 800b57a:	4403      	add	r3, r0
 800b57c:	3318      	adds	r3, #24
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	4845      	ldr	r0, [pc, #276]	; (800b698 <drv_uartInitInstance+0x230>)
 800b582:	4613      	mov	r3, r2
 800b584:	011b      	lsls	r3, r3, #4
 800b586:	4413      	add	r3, r2
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	4403      	add	r3, r0
 800b58c:	3318      	adds	r3, #24
 800b58e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.OverSampling = uartConfig[uartInstanceIndex].overSampling;
 800b590:	79f9      	ldrb	r1, [r7, #7]
 800b592:	7bba      	ldrb	r2, [r7, #14]
 800b594:	483e      	ldr	r0, [pc, #248]	; (800b690 <drv_uartInitInstance+0x228>)
 800b596:	460b      	mov	r3, r1
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	440b      	add	r3, r1
 800b59c:	00db      	lsls	r3, r3, #3
 800b59e:	4403      	add	r3, r0
 800b5a0:	331c      	adds	r3, #28
 800b5a2:	6819      	ldr	r1, [r3, #0]
 800b5a4:	483c      	ldr	r0, [pc, #240]	; (800b698 <drv_uartInitInstance+0x230>)
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	011b      	lsls	r3, r3, #4
 800b5aa:	4413      	add	r3, r2
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4403      	add	r3, r0
 800b5b0:	331c      	adds	r3, #28
 800b5b2:	6019      	str	r1, [r3, #0]

            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 800b5b4:	7bba      	ldrb	r2, [r7, #14]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4a36      	ldr	r2, [pc, #216]	; (800b698 <drv_uartInitInstance+0x230>)
 800b5c0:	4413      	add	r3, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fb fb28 	bl	8006c18 <HAL_UART_Init>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d14a      	bne.n	800b664 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4a32      	ldr	r2, [pc, #200]	; (800b69c <drv_uartInitInstance+0x234>)
 800b5d4:	4413      	add	r3, r2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f006 fe5c 	bl	8012294 <gos_mutexInit>
 800b5dc:	4603      	mov	r3, r0
            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 800b5de:	2b55      	cmp	r3, #85	; 0x55
 800b5e0:	d140      	bne.n	800b664 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 800b5e2:	7bbb      	ldrb	r3, [r7, #14]
 800b5e4:	009b      	lsls	r3, r3, #2
 800b5e6:	4a2e      	ldr	r2, [pc, #184]	; (800b6a0 <drv_uartInitInstance+0x238>)
 800b5e8:	4413      	add	r3, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f006 fe52 	bl	8012294 <gos_mutexInit>
 800b5f0:	4603      	mov	r3, r0
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 800b5f2:	2b55      	cmp	r3, #85	; 0x55
 800b5f4:	d136      	bne.n	800b664 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800b5f6:	7bba      	ldrb	r2, [r7, #14]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	4413      	add	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4a28      	ldr	r2, [pc, #160]	; (800b6a4 <drv_uartInitInstance+0x23c>)
 800b602:	4413      	add	r3, r2
 800b604:	4618      	mov	r0, r3
 800b606:	f009 faf5 	bl	8014bf4 <gos_triggerInit>
 800b60a:	4603      	mov	r3, r0
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 800b60c:	2b55      	cmp	r3, #85	; 0x55
 800b60e:	d129      	bne.n	800b664 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 800b610:	7bba      	ldrb	r2, [r7, #14]
 800b612:	4613      	mov	r3, r2
 800b614:	005b      	lsls	r3, r3, #1
 800b616:	4413      	add	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	4a23      	ldr	r2, [pc, #140]	; (800b6a8 <drv_uartInitInstance+0x240>)
 800b61c:	4413      	add	r3, r2
 800b61e:	4618      	mov	r0, r3
 800b620:	f009 fae8 	bl	8014bf4 <gos_triggerInit>
 800b624:	4603      	mov	r3, r0
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800b626:	2b55      	cmp	r3, #85	; 0x55
 800b628:	d11c      	bne.n	800b664 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800b62a:	7bba      	ldrb	r2, [r7, #14]
 800b62c:	4613      	mov	r3, r2
 800b62e:	005b      	lsls	r3, r3, #1
 800b630:	4413      	add	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4a1b      	ldr	r2, [pc, #108]	; (800b6a4 <drv_uartInitInstance+0x23c>)
 800b636:	4413      	add	r3, r2
 800b638:	4618      	mov	r0, r3
 800b63a:	f009 faf7 	bl	8014c2c <gos_triggerReset>
 800b63e:	4603      	mov	r3, r0
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 800b640:	2b55      	cmp	r3, #85	; 0x55
 800b642:	d10f      	bne.n	800b664 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartTxReadyTriggers[instance]) == GOS_SUCCESS
 800b644:	7bba      	ldrb	r2, [r7, #14]
 800b646:	4613      	mov	r3, r2
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	4413      	add	r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	4a16      	ldr	r2, [pc, #88]	; (800b6a8 <drv_uartInitInstance+0x240>)
 800b650:	4413      	add	r3, r2
 800b652:	4618      	mov	r0, r3
 800b654:	f009 faea 	bl	8014c2c <gos_triggerReset>
 800b658:	4603      	mov	r3, r0
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800b65a:	2b55      	cmp	r3, #85	; 0x55
 800b65c:	d102      	bne.n	800b664 <drv_uartInitInstance+0x1fc>
                )
            {
                uartInitResult = GOS_SUCCESS;
 800b65e:	2355      	movs	r3, #85	; 0x55
 800b660:	73fb      	strb	r3, [r7, #15]
 800b662:	e00c      	b.n	800b67e <drv_uartInitInstance+0x216>
            }
            else
            {
                // Init error.
                DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INSTANCE_INIT);
 800b664:	4b11      	ldr	r3, [pc, #68]	; (800b6ac <drv_uartInitInstance+0x244>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f043 0304 	orr.w	r3, r3, #4
 800b66c:	4a0f      	ldr	r2, [pc, #60]	; (800b6ac <drv_uartInitInstance+0x244>)
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	e005      	b.n	800b67e <drv_uartInitInstance+0x216>
            }
        }
        else
        {
            // Index is out of array boundary.
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INDEX_OUT_OF_BOUND);
 800b672:	4b0e      	ldr	r3, [pc, #56]	; (800b6ac <drv_uartInitInstance+0x244>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f043 0302 	orr.w	r3, r3, #2
 800b67a:	4a0c      	ldr	r2, [pc, #48]	; (800b6ac <drv_uartInitInstance+0x244>)
 800b67c:	6013      	str	r3, [r2, #0]
    {
        // Configuration is NULL.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
    }

    return uartInitResult;
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20000664 	.word	0x20000664
 800b68c:	cccccccd 	.word	0xcccccccd
 800b690:	08019b1c 	.word	0x08019b1c
 800b694:	20000704 	.word	0x20000704
 800b698:	20002eb0 	.word	0x20002eb0
 800b69c:	20003048 	.word	0x20003048
 800b6a0:	20003060 	.word	0x20003060
 800b6a4:	20003078 	.word	0x20003078
 800b6a8:	200030c0 	.word	0x200030c0
 800b6ac:	20002eac 	.word	0x20002eac

0800b6b0 <drv_uartTransmitBlocking>:
 */
GOS_INLINE gos_result_t drv_uartTransmitBlocking (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t timeout
        )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	607b      	str	r3, [r7, #4]
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	73fb      	strb	r3, [r7, #15]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800b6c2:	23ae      	movs	r3, #174	; 0xae
 800b6c4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800b6c6:	4b1d      	ldr	r3, [pc, #116]	; (800b73c <drv_uartTransmitBlocking+0x8c>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	4b1b      	ldr	r3, [pc, #108]	; (800b73c <drv_uartTransmitBlocking+0x8c>)
 800b6d0:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 800b6d2:	7bfa      	ldrb	r2, [r7, #15]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	011b      	lsls	r3, r3, #4
 800b6d8:	4413      	add	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4a18      	ldr	r2, [pc, #96]	; (800b740 <drv_uartTransmitBlocking+0x90>)
 800b6de:	4413      	add	r3, r2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fb fd3d 	bl	8007160 <HAL_UART_Abort>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d111      	bne.n	800b710 <drv_uartTransmitBlocking+0x60>
        HAL_UART_Transmit(&huarts[instance], message, size, timeout) == HAL_OK)
 800b6ec:	7bfa      	ldrb	r2, [r7, #15]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	011b      	lsls	r3, r3, #4
 800b6f2:	4413      	add	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4a12      	ldr	r2, [pc, #72]	; (800b740 <drv_uartTransmitBlocking+0x90>)
 800b6f8:	1898      	adds	r0, r3, r2
 800b6fa:	89ba      	ldrh	r2, [r7, #12]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	68b9      	ldr	r1, [r7, #8]
 800b700:	f7fb fad7 	bl	8006cb2 <HAL_UART_Transmit>
 800b704:	4603      	mov	r3, r0
    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 800b706:	2b00      	cmp	r3, #0
 800b708:	d102      	bne.n	800b710 <drv_uartTransmitBlocking+0x60>
    {
        uartTransmitResult = GOS_SUCCESS;
 800b70a:	2355      	movs	r3, #85	; 0x55
 800b70c:	75fb      	strb	r3, [r7, #23]
 800b70e:	e005      	b.n	800b71c <drv_uartTransmitBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_BLOCKING);
 800b710:	4b0c      	ldr	r3, [pc, #48]	; (800b744 <drv_uartTransmitBlocking+0x94>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f043 0310 	orr.w	r3, r3, #16
 800b718:	4a0a      	ldr	r2, [pc, #40]	; (800b744 <drv_uartTransmitBlocking+0x94>)
 800b71a:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 800b71c:	4b07      	ldr	r3, [pc, #28]	; (800b73c <drv_uartTransmitBlocking+0x8c>)
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d005      	beq.n	800b730 <drv_uartTransmitBlocking+0x80>
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <drv_uartTransmitBlocking+0x8c>)
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	3b01      	subs	r3, #1
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	4b03      	ldr	r3, [pc, #12]	; (800b73c <drv_uartTransmitBlocking+0x8c>)
 800b72e:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 800b730:	7dfb      	ldrb	r3, [r7, #23]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	200050e9 	.word	0x200050e9
 800b740:	20002eb0 	.word	0x20002eb0
 800b744:	20002eac 	.word	0x20002eac

0800b748 <drv_uartReceiveBlocking>:
 */
GOS_INLINE gos_result_t drv_uartReceiveBlocking (
        drv_uartPeriphInstance_t instance, u8_t* pData,
        u16_t                    size,     u32_t timeout
        )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607b      	str	r3, [r7, #4]
 800b752:	4603      	mov	r3, r0
 800b754:	73fb      	strb	r3, [r7, #15]
 800b756:	4613      	mov	r3, r2
 800b758:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 800b75a:	23ae      	movs	r3, #174	; 0xae
 800b75c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800b75e:	4b1d      	ldr	r3, [pc, #116]	; (800b7d4 <drv_uartReceiveBlocking+0x8c>)
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	b2da      	uxtb	r2, r3
 800b766:	4b1b      	ldr	r3, [pc, #108]	; (800b7d4 <drv_uartReceiveBlocking+0x8c>)
 800b768:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 800b76a:	7bfa      	ldrb	r2, [r7, #15]
 800b76c:	4613      	mov	r3, r2
 800b76e:	011b      	lsls	r3, r3, #4
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4a18      	ldr	r2, [pc, #96]	; (800b7d8 <drv_uartReceiveBlocking+0x90>)
 800b776:	4413      	add	r3, r2
 800b778:	4618      	mov	r0, r3
 800b77a:	f7fb fcf1 	bl	8007160 <HAL_UART_Abort>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d111      	bne.n	800b7a8 <drv_uartReceiveBlocking+0x60>
    	HAL_UART_Receive(&huarts[instance], pData, size, timeout) == HAL_OK)
 800b784:	7bfa      	ldrb	r2, [r7, #15]
 800b786:	4613      	mov	r3, r2
 800b788:	011b      	lsls	r3, r3, #4
 800b78a:	4413      	add	r3, r2
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	4a12      	ldr	r2, [pc, #72]	; (800b7d8 <drv_uartReceiveBlocking+0x90>)
 800b790:	1898      	adds	r0, r3, r2
 800b792:	89ba      	ldrh	r2, [r7, #12]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68b9      	ldr	r1, [r7, #8]
 800b798:	f7fb fb1d 	bl	8006dd6 <HAL_UART_Receive>
 800b79c:	4603      	mov	r3, r0
    if (HAL_UART_Abort  (&huarts[instance])                       == HAL_OK &&
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d102      	bne.n	800b7a8 <drv_uartReceiveBlocking+0x60>
    {
    	uartReceiveResult = GOS_SUCCESS;
 800b7a2:	2355      	movs	r3, #85	; 0x55
 800b7a4:	75fb      	strb	r3, [r7, #23]
 800b7a6:	e005      	b.n	800b7b4 <drv_uartReceiveBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_BLOCKING);
 800b7a8:	4b0c      	ldr	r3, [pc, #48]	; (800b7dc <drv_uartReceiveBlocking+0x94>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7b0:	4a0a      	ldr	r2, [pc, #40]	; (800b7dc <drv_uartReceiveBlocking+0x94>)
 800b7b2:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 800b7b4:	4b07      	ldr	r3, [pc, #28]	; (800b7d4 <drv_uartReceiveBlocking+0x8c>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d005      	beq.n	800b7c8 <drv_uartReceiveBlocking+0x80>
 800b7bc:	4b05      	ldr	r3, [pc, #20]	; (800b7d4 <drv_uartReceiveBlocking+0x8c>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	4b03      	ldr	r3, [pc, #12]	; (800b7d4 <drv_uartReceiveBlocking+0x8c>)
 800b7c6:	701a      	strb	r2, [r3, #0]

    return uartReceiveResult;
 800b7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	200050e9 	.word	0x200050e9
 800b7d8:	20002eb0 	.word	0x20002eb0
 800b7dc:	20002eac 	.word	0x20002eac

0800b7e0 <drv_uartTransmitDMA>:
GOS_INLINE gos_result_t drv_uartTransmitDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60b9      	str	r1, [r7, #8]
 800b7e8:	607b      	str	r3, [r7, #4]
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	73fb      	strb	r3, [r7, #15]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800b7f2:	23ae      	movs	r3, #174	; 0xae
 800b7f4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	4a2d      	ldr	r2, [pc, #180]	; (800b8b0 <drv_uartTransmitDMA+0xd0>)
 800b7fc:	4413      	add	r3, r2
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	4618      	mov	r0, r3
 800b802:	f006 fd61 	bl	80122c8 <gos_mutexLock>
 800b806:	4603      	mov	r3, r0
 800b808:	2b55      	cmp	r3, #85	; 0x55
 800b80a:	d13e      	bne.n	800b88a <drv_uartTransmitDMA+0xaa>
    {
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 800b80c:	7bfa      	ldrb	r2, [r7, #15]
 800b80e:	4613      	mov	r3, r2
 800b810:	011b      	lsls	r3, r3, #4
 800b812:	4413      	add	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4a27      	ldr	r2, [pc, #156]	; (800b8b4 <drv_uartTransmitDMA+0xd4>)
 800b818:	4413      	add	r3, r2
 800b81a:	89ba      	ldrh	r2, [r7, #12]
 800b81c:	68b9      	ldr	r1, [r7, #8]
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fb fbf0 	bl	8007004 <HAL_UART_Transmit_DMA>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d11e      	bne.n	800b868 <drv_uartTransmitDMA+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800b82a:	7bfa      	ldrb	r2, [r7, #15]
 800b82c:	4613      	mov	r3, r2
 800b82e:	005b      	lsls	r3, r3, #1
 800b830:	4413      	add	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4a20      	ldr	r2, [pc, #128]	; (800b8b8 <drv_uartTransmitDMA+0xd8>)
 800b836:	4413      	add	r3, r2
 800b838:	6a3a      	ldr	r2, [r7, #32]
 800b83a:	2101      	movs	r1, #1
 800b83c:	4618      	mov	r0, r3
 800b83e:	f009 fa4d 	bl	8014cdc <gos_triggerWait>
 800b842:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_DMA(&huarts[instance], message, size)        == HAL_OK      &&
 800b844:	2b55      	cmp	r3, #85	; 0x55
 800b846:	d10f      	bne.n	800b868 <drv_uartTransmitDMA+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 800b848:	7bfa      	ldrb	r2, [r7, #15]
 800b84a:	4613      	mov	r3, r2
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	4413      	add	r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	4a19      	ldr	r2, [pc, #100]	; (800b8b8 <drv_uartTransmitDMA+0xd8>)
 800b854:	4413      	add	r3, r2
 800b856:	4618      	mov	r0, r3
 800b858:	f009 f9e8 	bl	8014c2c <gos_triggerReset>
 800b85c:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800b85e:	2b55      	cmp	r3, #85	; 0x55
 800b860:	d102      	bne.n	800b868 <drv_uartTransmitDMA+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 800b862:	2355      	movs	r3, #85	; 0x55
 800b864:	75fb      	strb	r3, [r7, #23]
 800b866:	e016      	b.n	800b896 <drv_uartTransmitDMA+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800b868:	7bfa      	ldrb	r2, [r7, #15]
 800b86a:	4613      	mov	r3, r2
 800b86c:	011b      	lsls	r3, r3, #4
 800b86e:	4413      	add	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	4a10      	ldr	r2, [pc, #64]	; (800b8b4 <drv_uartTransmitDMA+0xd4>)
 800b874:	4413      	add	r3, r2
 800b876:	4618      	mov	r0, r3
 800b878:	f7fb fd5e 	bl	8007338 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_TRIG_HAL);
 800b87c:	4b0f      	ldr	r3, [pc, #60]	; (800b8bc <drv_uartTransmitDMA+0xdc>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b884:	4a0d      	ldr	r2, [pc, #52]	; (800b8bc <drv_uartTransmitDMA+0xdc>)
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	e005      	b.n	800b896 <drv_uartTransmitDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_DMA_MUTEX);
 800b88a:	4b0c      	ldr	r3, [pc, #48]	; (800b8bc <drv_uartTransmitDMA+0xdc>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f043 0320 	orr.w	r3, r3, #32
 800b892:	4a0a      	ldr	r2, [pc, #40]	; (800b8bc <drv_uartTransmitDMA+0xdc>)
 800b894:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 800b896:	7bfb      	ldrb	r3, [r7, #15]
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4a05      	ldr	r2, [pc, #20]	; (800b8b0 <drv_uartTransmitDMA+0xd0>)
 800b89c:	4413      	add	r3, r2
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f006 fe18 	bl	80124d4 <gos_mutexUnlock>

    return uartTransmitResult;
 800b8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	20003060 	.word	0x20003060
 800b8b4:	20002eb0 	.word	0x20002eb0
 800b8b8:	200030c0 	.word	0x200030c0
 800b8bc:	20002eac 	.word	0x20002eac

0800b8c0 <drv_uartReceiveDMA>:
GOS_INLINE gos_result_t drv_uartReceiveDMA (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60b9      	str	r1, [r7, #8]
 800b8c8:	607b      	str	r3, [r7, #4]
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73fb      	strb	r3, [r7, #15]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult = GOS_ERROR;
 800b8d2:	23ae      	movs	r3, #174	; 0xae
 800b8d4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800b8d6:	7bfb      	ldrb	r3, [r7, #15]
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4a2d      	ldr	r2, [pc, #180]	; (800b990 <drv_uartReceiveDMA+0xd0>)
 800b8dc:	4413      	add	r3, r2
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f006 fcf1 	bl	80122c8 <gos_mutexLock>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b55      	cmp	r3, #85	; 0x55
 800b8ea:	d13e      	bne.n	800b96a <drv_uartReceiveDMA+0xaa>
    {
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 800b8ec:	7bfa      	ldrb	r2, [r7, #15]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	011b      	lsls	r3, r3, #4
 800b8f2:	4413      	add	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4a27      	ldr	r2, [pc, #156]	; (800b994 <drv_uartReceiveDMA+0xd4>)
 800b8f8:	4413      	add	r3, r2
 800b8fa:	89ba      	ldrh	r2, [r7, #12]
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fb fbfe 	bl	8007100 <HAL_UART_Receive_DMA>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d11e      	bne.n	800b948 <drv_uartReceiveDMA+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800b90a:	7bfa      	ldrb	r2, [r7, #15]
 800b90c:	4613      	mov	r3, r2
 800b90e:	005b      	lsls	r3, r3, #1
 800b910:	4413      	add	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4a20      	ldr	r2, [pc, #128]	; (800b998 <drv_uartReceiveDMA+0xd8>)
 800b916:	4413      	add	r3, r2
 800b918:	6a3a      	ldr	r2, [r7, #32]
 800b91a:	2101      	movs	r1, #1
 800b91c:	4618      	mov	r0, r3
 800b91e:	f009 f9dd 	bl	8014cdc <gos_triggerWait>
 800b922:	4603      	mov	r3, r0
        if (HAL_UART_Receive_DMA(&huarts[instance], message, size)         == HAL_OK      &&
 800b924:	2b55      	cmp	r3, #85	; 0x55
 800b926:	d10f      	bne.n	800b948 <drv_uartReceiveDMA+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 800b928:	7bfa      	ldrb	r2, [r7, #15]
 800b92a:	4613      	mov	r3, r2
 800b92c:	005b      	lsls	r3, r3, #1
 800b92e:	4413      	add	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4a19      	ldr	r2, [pc, #100]	; (800b998 <drv_uartReceiveDMA+0xd8>)
 800b934:	4413      	add	r3, r2
 800b936:	4618      	mov	r0, r3
 800b938:	f009 f978 	bl	8014c2c <gos_triggerReset>
 800b93c:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800b93e:	2b55      	cmp	r3, #85	; 0x55
 800b940:	d102      	bne.n	800b948 <drv_uartReceiveDMA+0x88>
        {
            uartReceiveResult = GOS_SUCCESS;
 800b942:	2355      	movs	r3, #85	; 0x55
 800b944:	75fb      	strb	r3, [r7, #23]
 800b946:	e016      	b.n	800b976 <drv_uartReceiveDMA+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800b948:	7bfa      	ldrb	r2, [r7, #15]
 800b94a:	4613      	mov	r3, r2
 800b94c:	011b      	lsls	r3, r3, #4
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4a10      	ldr	r2, [pc, #64]	; (800b994 <drv_uartReceiveDMA+0xd4>)
 800b954:	4413      	add	r3, r2
 800b956:	4618      	mov	r0, r3
 800b958:	f7fb fcee 	bl	8007338 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_TRIG_HAL);
 800b95c:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <drv_uartReceiveDMA+0xdc>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b964:	4a0d      	ldr	r2, [pc, #52]	; (800b99c <drv_uartReceiveDMA+0xdc>)
 800b966:	6013      	str	r3, [r2, #0]
 800b968:	e005      	b.n	800b976 <drv_uartReceiveDMA+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_DMA_MUTEX);
 800b96a:	4b0c      	ldr	r3, [pc, #48]	; (800b99c <drv_uartReceiveDMA+0xdc>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b972:	4a0a      	ldr	r2, [pc, #40]	; (800b99c <drv_uartReceiveDMA+0xdc>)
 800b974:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 800b976:	7bfb      	ldrb	r3, [r7, #15]
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4a05      	ldr	r2, [pc, #20]	; (800b990 <drv_uartReceiveDMA+0xd0>)
 800b97c:	4413      	add	r3, r2
 800b97e:	4618      	mov	r0, r3
 800b980:	f006 fda8 	bl	80124d4 <gos_mutexUnlock>

    return uartReceiveResult;
 800b984:	7dfb      	ldrb	r3, [r7, #23]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	20003048 	.word	0x20003048
 800b994:	20002eb0 	.word	0x20002eb0
 800b998:	20003078 	.word	0x20003078
 800b99c:	20002eac 	.word	0x20002eac

0800b9a0 <drv_uartTransmitIT>:
GOS_INLINE gos_result_t drv_uartTransmitIT (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	607b      	str	r3, [r7, #4]
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	73fb      	strb	r3, [r7, #15]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800b9b2:	23ae      	movs	r3, #174	; 0xae
 800b9b4:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4a2d      	ldr	r2, [pc, #180]	; (800ba70 <drv_uartTransmitIT+0xd0>)
 800b9bc:	4413      	add	r3, r2
 800b9be:	6879      	ldr	r1, [r7, #4]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f006 fc81 	bl	80122c8 <gos_mutexLock>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b55      	cmp	r3, #85	; 0x55
 800b9ca:	d13e      	bne.n	800ba4a <drv_uartTransmitIT+0xaa>
    {

        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 800b9cc:	7bfa      	ldrb	r2, [r7, #15]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	011b      	lsls	r3, r3, #4
 800b9d2:	4413      	add	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4a27      	ldr	r2, [pc, #156]	; (800ba74 <drv_uartTransmitIT+0xd4>)
 800b9d8:	4413      	add	r3, r2
 800b9da:	89ba      	ldrh	r2, [r7, #12]
 800b9dc:	68b9      	ldr	r1, [r7, #8]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7fb fa9b 	bl	8006f1a <HAL_UART_Transmit_IT>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d11e      	bne.n	800ba28 <drv_uartTransmitIT+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800b9ea:	7bfa      	ldrb	r2, [r7, #15]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	4413      	add	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4a20      	ldr	r2, [pc, #128]	; (800ba78 <drv_uartTransmitIT+0xd8>)
 800b9f6:	4413      	add	r3, r2
 800b9f8:	6a3a      	ldr	r2, [r7, #32]
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f009 f96d 	bl	8014cdc <gos_triggerWait>
 800ba02:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 800ba04:	2b55      	cmp	r3, #85	; 0x55
 800ba06:	d10f      	bne.n	800ba28 <drv_uartTransmitIT+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 800ba08:	7bfa      	ldrb	r2, [r7, #15]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	4413      	add	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4a19      	ldr	r2, [pc, #100]	; (800ba78 <drv_uartTransmitIT+0xd8>)
 800ba14:	4413      	add	r3, r2
 800ba16:	4618      	mov	r0, r3
 800ba18:	f009 f908 	bl	8014c2c <gos_triggerReset>
 800ba1c:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800ba1e:	2b55      	cmp	r3, #85	; 0x55
 800ba20:	d102      	bne.n	800ba28 <drv_uartTransmitIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 800ba22:	2355      	movs	r3, #85	; 0x55
 800ba24:	75fb      	strb	r3, [r7, #23]
 800ba26:	e016      	b.n	800ba56 <drv_uartTransmitIT+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800ba28:	7bfa      	ldrb	r2, [r7, #15]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	011b      	lsls	r3, r3, #4
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4a10      	ldr	r2, [pc, #64]	; (800ba74 <drv_uartTransmitIT+0xd4>)
 800ba34:	4413      	add	r3, r2
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fb fc7e 	bl	8007338 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_TRIG_HAL);
 800ba3c:	4b0f      	ldr	r3, [pc, #60]	; (800ba7c <drv_uartTransmitIT+0xdc>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ba44:	4a0d      	ldr	r2, [pc, #52]	; (800ba7c <drv_uartTransmitIT+0xdc>)
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	e005      	b.n	800ba56 <drv_uartTransmitIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_MUTEX);
 800ba4a:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <drv_uartTransmitIT+0xdc>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ba52:	4a0a      	ldr	r2, [pc, #40]	; (800ba7c <drv_uartTransmitIT+0xdc>)
 800ba54:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	4a05      	ldr	r2, [pc, #20]	; (800ba70 <drv_uartTransmitIT+0xd0>)
 800ba5c:	4413      	add	r3, r2
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f006 fd38 	bl	80124d4 <gos_mutexUnlock>

    return uartTransmitResult;
 800ba64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	20003060 	.word	0x20003060
 800ba74:	20002eb0 	.word	0x20002eb0
 800ba78:	200030c0 	.word	0x200030c0
 800ba7c:	20002eac 	.word	0x20002eac

0800ba80 <drv_uartReceiveIT>:

/*
 * Function: drv_uartReceiveIT
 */
GOS_INLINE gos_result_t drv_uartReceiveIT (drv_uartPeriphInstance_t instance, u8_t* message, u16_t size, u32_t mutexTmo, u32_t triggerTmo)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60b9      	str	r1, [r7, #8]
 800ba88:	607b      	str	r3, [r7, #4]
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73fb      	strb	r3, [r7, #15]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartReceiveResult  = GOS_ERROR;
 800ba92:	23ae      	movs	r3, #174	; 0xae
 800ba94:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartRxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4a2d      	ldr	r2, [pc, #180]	; (800bb50 <drv_uartReceiveIT+0xd0>)
 800ba9c:	4413      	add	r3, r2
 800ba9e:	6879      	ldr	r1, [r7, #4]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f006 fc11 	bl	80122c8 <gos_mutexLock>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b55      	cmp	r3, #85	; 0x55
 800baaa:	d13e      	bne.n	800bb2a <drv_uartReceiveIT+0xaa>
    {
    	//__HAL_UART_CLEAR_OREFLAG(&huarts[instance]);
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 800baac:	7bfa      	ldrb	r2, [r7, #15]
 800baae:	4613      	mov	r3, r2
 800bab0:	011b      	lsls	r3, r3, #4
 800bab2:	4413      	add	r3, r2
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4a27      	ldr	r2, [pc, #156]	; (800bb54 <drv_uartReceiveIT+0xd4>)
 800bab8:	4413      	add	r3, r2
 800baba:	89ba      	ldrh	r2, [r7, #12]
 800babc:	68b9      	ldr	r1, [r7, #8]
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fb fa70 	bl	8006fa4 <HAL_UART_Receive_IT>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d11e      	bne.n	800bb08 <drv_uartReceiveIT+0x88>
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800baca:	7bfa      	ldrb	r2, [r7, #15]
 800bacc:	4613      	mov	r3, r2
 800bace:	005b      	lsls	r3, r3, #1
 800bad0:	4413      	add	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4a20      	ldr	r2, [pc, #128]	; (800bb58 <drv_uartReceiveIT+0xd8>)
 800bad6:	4413      	add	r3, r2
 800bad8:	6a3a      	ldr	r2, [r7, #32]
 800bada:	2101      	movs	r1, #1
 800badc:	4618      	mov	r0, r3
 800bade:	f009 f8fd 	bl	8014cdc <gos_triggerWait>
 800bae2:	4603      	mov	r3, r0
        if (HAL_UART_Receive_IT(&huarts[instance], message, size)          == HAL_OK      &&
 800bae4:	2b55      	cmp	r3, #85	; 0x55
 800bae6:	d10f      	bne.n	800bb08 <drv_uartReceiveIT+0x88>
            gos_triggerReset(&uartRxReadyTriggers[instance])               == GOS_SUCCESS)
 800bae8:	7bfa      	ldrb	r2, [r7, #15]
 800baea:	4613      	mov	r3, r2
 800baec:	005b      	lsls	r3, r3, #1
 800baee:	4413      	add	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4a19      	ldr	r2, [pc, #100]	; (800bb58 <drv_uartReceiveIT+0xd8>)
 800baf4:	4413      	add	r3, r2
 800baf6:	4618      	mov	r0, r3
 800baf8:	f009 f898 	bl	8014c2c <gos_triggerReset>
 800bafc:	4603      	mov	r3, r0
            gos_triggerWait(&uartRxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 800bafe:	2b55      	cmp	r3, #85	; 0x55
 800bb00:	d102      	bne.n	800bb08 <drv_uartReceiveIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * reception ready, we can return.
             */
            uartReceiveResult = GOS_SUCCESS;
 800bb02:	2355      	movs	r3, #85	; 0x55
 800bb04:	75fb      	strb	r3, [r7, #23]
 800bb06:	e016      	b.n	800bb36 <drv_uartReceiveIT+0xb6>
        }
        else
        {
            // Receive or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 800bb08:	7bfa      	ldrb	r2, [r7, #15]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	011b      	lsls	r3, r3, #4
 800bb0e:	4413      	add	r3, r2
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4a10      	ldr	r2, [pc, #64]	; (800bb54 <drv_uartReceiveIT+0xd4>)
 800bb14:	4413      	add	r3, r2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fb fc0e 	bl	8007338 <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_TRIG_HAL);
 800bb1c:	4b0f      	ldr	r3, [pc, #60]	; (800bb5c <drv_uartReceiveIT+0xdc>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bb24:	4a0d      	ldr	r2, [pc, #52]	; (800bb5c <drv_uartReceiveIT+0xdc>)
 800bb26:	6013      	str	r3, [r2, #0]
 800bb28:	e005      	b.n	800bb36 <drv_uartReceiveIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_RX_IT_MUTEX);
 800bb2a:	4b0c      	ldr	r3, [pc, #48]	; (800bb5c <drv_uartReceiveIT+0xdc>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bb32:	4a0a      	ldr	r2, [pc, #40]	; (800bb5c <drv_uartReceiveIT+0xdc>)
 800bb34:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartRxMutexes[instance]);
 800bb36:	7bfb      	ldrb	r3, [r7, #15]
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4a05      	ldr	r2, [pc, #20]	; (800bb50 <drv_uartReceiveIT+0xd0>)
 800bb3c:	4413      	add	r3, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f006 fcc8 	bl	80124d4 <gos_mutexUnlock>

    return uartReceiveResult;
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3718      	adds	r7, #24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20003048 	.word	0x20003048
 800bb54:	20002eb0 	.word	0x20002eb0
 800bb58:	20003078 	.word	0x20003078
 800bb5c:	20002eac 	.word	0x20002eac

0800bb60 <USART1_IRQHandler>:

/*
 * Function: USART1_IRQHandler
 */
void_t USART1_IRQHandler (void_t)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800bb64:	4b16      	ldr	r3, [pc, #88]	; (800bbc0 <USART1_IRQHandler+0x60>)
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d105      	bne.n	800bb78 <USART1_IRQHandler+0x18>
 800bb6c:	4b15      	ldr	r3, [pc, #84]	; (800bbc4 <USART1_IRQHandler+0x64>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	3301      	adds	r3, #1
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	4b13      	ldr	r3, [pc, #76]	; (800bbc4 <USART1_IRQHandler+0x64>)
 800bb76:	701a      	strb	r2, [r3, #0]
 800bb78:	4b11      	ldr	r3, [pc, #68]	; (800bbc0 <USART1_IRQHandler+0x60>)
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	4b0f      	ldr	r3, [pc, #60]	; (800bbc0 <USART1_IRQHandler+0x60>)
 800bb82:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_1]);
 800bb84:	4810      	ldr	r0, [pc, #64]	; (800bbc8 <USART1_IRQHandler+0x68>)
 800bb86:	f7fb fceb 	bl	8007560 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800bb8a:	4b0d      	ldr	r3, [pc, #52]	; (800bbc0 <USART1_IRQHandler+0x60>)
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <USART1_IRQHandler+0x3e>
 800bb92:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <USART1_IRQHandler+0x60>)
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	4b09      	ldr	r3, [pc, #36]	; (800bbc0 <USART1_IRQHandler+0x60>)
 800bb9c:	701a      	strb	r2, [r3, #0]
 800bb9e:	4b08      	ldr	r3, [pc, #32]	; (800bbc0 <USART1_IRQHandler+0x60>)
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d109      	bne.n	800bbba <USART1_IRQHandler+0x5a>
 800bba6:	4b07      	ldr	r3, [pc, #28]	; (800bbc4 <USART1_IRQHandler+0x64>)
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d005      	beq.n	800bbba <USART1_IRQHandler+0x5a>
 800bbae:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <USART1_IRQHandler+0x64>)
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	b2da      	uxtb	r2, r3
 800bbb6:	4b03      	ldr	r3, [pc, #12]	; (800bbc4 <USART1_IRQHandler+0x64>)
 800bbb8:	701a      	strb	r2, [r3, #0]
}
 800bbba:	bf00      	nop
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	200050ea 	.word	0x200050ea
 800bbc4:	200050e9 	.word	0x200050e9
 800bbc8:	20002eb0 	.word	0x20002eb0

0800bbcc <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800bbd0:	4b16      	ldr	r3, [pc, #88]	; (800bc2c <USART2_IRQHandler+0x60>)
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d105      	bne.n	800bbe4 <USART2_IRQHandler+0x18>
 800bbd8:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <USART2_IRQHandler+0x64>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	4b13      	ldr	r3, [pc, #76]	; (800bc30 <USART2_IRQHandler+0x64>)
 800bbe2:	701a      	strb	r2, [r3, #0]
 800bbe4:	4b11      	ldr	r3, [pc, #68]	; (800bc2c <USART2_IRQHandler+0x60>)
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <USART2_IRQHandler+0x60>)
 800bbee:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_2]);
 800bbf0:	4810      	ldr	r0, [pc, #64]	; (800bc34 <USART2_IRQHandler+0x68>)
 800bbf2:	f7fb fcb5 	bl	8007560 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800bbf6:	4b0d      	ldr	r3, [pc, #52]	; (800bc2c <USART2_IRQHandler+0x60>)
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d005      	beq.n	800bc0a <USART2_IRQHandler+0x3e>
 800bbfe:	4b0b      	ldr	r3, [pc, #44]	; (800bc2c <USART2_IRQHandler+0x60>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	3b01      	subs	r3, #1
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	4b09      	ldr	r3, [pc, #36]	; (800bc2c <USART2_IRQHandler+0x60>)
 800bc08:	701a      	strb	r2, [r3, #0]
 800bc0a:	4b08      	ldr	r3, [pc, #32]	; (800bc2c <USART2_IRQHandler+0x60>)
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d109      	bne.n	800bc26 <USART2_IRQHandler+0x5a>
 800bc12:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <USART2_IRQHandler+0x64>)
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d005      	beq.n	800bc26 <USART2_IRQHandler+0x5a>
 800bc1a:	4b05      	ldr	r3, [pc, #20]	; (800bc30 <USART2_IRQHandler+0x64>)
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	4b03      	ldr	r3, [pc, #12]	; (800bc30 <USART2_IRQHandler+0x64>)
 800bc24:	701a      	strb	r2, [r3, #0]
}
 800bc26:	bf00      	nop
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	200050ea 	.word	0x200050ea
 800bc30:	200050e9 	.word	0x200050e9
 800bc34:	20002ef4 	.word	0x20002ef4

0800bc38 <USART3_IRQHandler>:

/*
 * Function: USART3_IRQHandler
 */
void_t USART3_IRQHandler (void_t)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800bc3c:	4b16      	ldr	r3, [pc, #88]	; (800bc98 <USART3_IRQHandler+0x60>)
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d105      	bne.n	800bc50 <USART3_IRQHandler+0x18>
 800bc44:	4b15      	ldr	r3, [pc, #84]	; (800bc9c <USART3_IRQHandler+0x64>)
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <USART3_IRQHandler+0x64>)
 800bc4e:	701a      	strb	r2, [r3, #0]
 800bc50:	4b11      	ldr	r3, [pc, #68]	; (800bc98 <USART3_IRQHandler+0x60>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	3301      	adds	r3, #1
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	4b0f      	ldr	r3, [pc, #60]	; (800bc98 <USART3_IRQHandler+0x60>)
 800bc5a:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_3]);
 800bc5c:	4810      	ldr	r0, [pc, #64]	; (800bca0 <USART3_IRQHandler+0x68>)
 800bc5e:	f7fb fc7f 	bl	8007560 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800bc62:	4b0d      	ldr	r3, [pc, #52]	; (800bc98 <USART3_IRQHandler+0x60>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d005      	beq.n	800bc76 <USART3_IRQHandler+0x3e>
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	; (800bc98 <USART3_IRQHandler+0x60>)
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	4b09      	ldr	r3, [pc, #36]	; (800bc98 <USART3_IRQHandler+0x60>)
 800bc74:	701a      	strb	r2, [r3, #0]
 800bc76:	4b08      	ldr	r3, [pc, #32]	; (800bc98 <USART3_IRQHandler+0x60>)
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d109      	bne.n	800bc92 <USART3_IRQHandler+0x5a>
 800bc7e:	4b07      	ldr	r3, [pc, #28]	; (800bc9c <USART3_IRQHandler+0x64>)
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d005      	beq.n	800bc92 <USART3_IRQHandler+0x5a>
 800bc86:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <USART3_IRQHandler+0x64>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b2da      	uxtb	r2, r3
 800bc8e:	4b03      	ldr	r3, [pc, #12]	; (800bc9c <USART3_IRQHandler+0x64>)
 800bc90:	701a      	strb	r2, [r3, #0]
}
 800bc92:	bf00      	nop
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	200050ea 	.word	0x200050ea
 800bc9c:	200050e9 	.word	0x200050e9
 800bca0:	20002f38 	.word	0x20002f38

0800bca4 <UART4_IRQHandler>:

/*
 * Function: UART4_IRQHandler
 */
void_t UART4_IRQHandler (void_t)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800bca8:	4b16      	ldr	r3, [pc, #88]	; (800bd04 <UART4_IRQHandler+0x60>)
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d105      	bne.n	800bcbc <UART4_IRQHandler+0x18>
 800bcb0:	4b15      	ldr	r3, [pc, #84]	; (800bd08 <UART4_IRQHandler+0x64>)
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	4b13      	ldr	r3, [pc, #76]	; (800bd08 <UART4_IRQHandler+0x64>)
 800bcba:	701a      	strb	r2, [r3, #0]
 800bcbc:	4b11      	ldr	r3, [pc, #68]	; (800bd04 <UART4_IRQHandler+0x60>)
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	4b0f      	ldr	r3, [pc, #60]	; (800bd04 <UART4_IRQHandler+0x60>)
 800bcc6:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_4]);
 800bcc8:	4810      	ldr	r0, [pc, #64]	; (800bd0c <UART4_IRQHandler+0x68>)
 800bcca:	f7fb fc49 	bl	8007560 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800bcce:	4b0d      	ldr	r3, [pc, #52]	; (800bd04 <UART4_IRQHandler+0x60>)
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d005      	beq.n	800bce2 <UART4_IRQHandler+0x3e>
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <UART4_IRQHandler+0x60>)
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	4b09      	ldr	r3, [pc, #36]	; (800bd04 <UART4_IRQHandler+0x60>)
 800bce0:	701a      	strb	r2, [r3, #0]
 800bce2:	4b08      	ldr	r3, [pc, #32]	; (800bd04 <UART4_IRQHandler+0x60>)
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d109      	bne.n	800bcfe <UART4_IRQHandler+0x5a>
 800bcea:	4b07      	ldr	r3, [pc, #28]	; (800bd08 <UART4_IRQHandler+0x64>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d005      	beq.n	800bcfe <UART4_IRQHandler+0x5a>
 800bcf2:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <UART4_IRQHandler+0x64>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	4b03      	ldr	r3, [pc, #12]	; (800bd08 <UART4_IRQHandler+0x64>)
 800bcfc:	701a      	strb	r2, [r3, #0]
}
 800bcfe:	bf00      	nop
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	200050ea 	.word	0x200050ea
 800bd08:	200050e9 	.word	0x200050e9
 800bd0c:	20002f7c 	.word	0x20002f7c

0800bd10 <UART5_IRQHandler>:

/*
 * Function: UART5_IRQHandler
 */
void_t UART5_IRQHandler (void_t)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800bd14:	4b16      	ldr	r3, [pc, #88]	; (800bd70 <UART5_IRQHandler+0x60>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d105      	bne.n	800bd28 <UART5_IRQHandler+0x18>
 800bd1c:	4b15      	ldr	r3, [pc, #84]	; (800bd74 <UART5_IRQHandler+0x64>)
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	3301      	adds	r3, #1
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	4b13      	ldr	r3, [pc, #76]	; (800bd74 <UART5_IRQHandler+0x64>)
 800bd26:	701a      	strb	r2, [r3, #0]
 800bd28:	4b11      	ldr	r3, [pc, #68]	; (800bd70 <UART5_IRQHandler+0x60>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	4b0f      	ldr	r3, [pc, #60]	; (800bd70 <UART5_IRQHandler+0x60>)
 800bd32:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_5]);
 800bd34:	4810      	ldr	r0, [pc, #64]	; (800bd78 <UART5_IRQHandler+0x68>)
 800bd36:	f7fb fc13 	bl	8007560 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	; (800bd70 <UART5_IRQHandler+0x60>)
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d005      	beq.n	800bd4e <UART5_IRQHandler+0x3e>
 800bd42:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <UART5_IRQHandler+0x60>)
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	3b01      	subs	r3, #1
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	4b09      	ldr	r3, [pc, #36]	; (800bd70 <UART5_IRQHandler+0x60>)
 800bd4c:	701a      	strb	r2, [r3, #0]
 800bd4e:	4b08      	ldr	r3, [pc, #32]	; (800bd70 <UART5_IRQHandler+0x60>)
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d109      	bne.n	800bd6a <UART5_IRQHandler+0x5a>
 800bd56:	4b07      	ldr	r3, [pc, #28]	; (800bd74 <UART5_IRQHandler+0x64>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d005      	beq.n	800bd6a <UART5_IRQHandler+0x5a>
 800bd5e:	4b05      	ldr	r3, [pc, #20]	; (800bd74 <UART5_IRQHandler+0x64>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	3b01      	subs	r3, #1
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	4b03      	ldr	r3, [pc, #12]	; (800bd74 <UART5_IRQHandler+0x64>)
 800bd68:	701a      	strb	r2, [r3, #0]
}
 800bd6a:	bf00      	nop
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	200050ea 	.word	0x200050ea
 800bd74:	200050e9 	.word	0x200050e9
 800bd78:	20002fc0 	.word	0x20002fc0

0800bd7c <USART6_IRQHandler>:

/*
 * Function: USART6_IRQHandler
 */
void_t USART6_IRQHandler (void_t)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 800bd80:	4b16      	ldr	r3, [pc, #88]	; (800bddc <USART6_IRQHandler+0x60>)
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d105      	bne.n	800bd94 <USART6_IRQHandler+0x18>
 800bd88:	4b15      	ldr	r3, [pc, #84]	; (800bde0 <USART6_IRQHandler+0x64>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	4b13      	ldr	r3, [pc, #76]	; (800bde0 <USART6_IRQHandler+0x64>)
 800bd92:	701a      	strb	r2, [r3, #0]
 800bd94:	4b11      	ldr	r3, [pc, #68]	; (800bddc <USART6_IRQHandler+0x60>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	4b0f      	ldr	r3, [pc, #60]	; (800bddc <USART6_IRQHandler+0x60>)
 800bd9e:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_6]);
 800bda0:	4810      	ldr	r0, [pc, #64]	; (800bde4 <USART6_IRQHandler+0x68>)
 800bda2:	f7fb fbdd 	bl	8007560 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800bda6:	4b0d      	ldr	r3, [pc, #52]	; (800bddc <USART6_IRQHandler+0x60>)
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d005      	beq.n	800bdba <USART6_IRQHandler+0x3e>
 800bdae:	4b0b      	ldr	r3, [pc, #44]	; (800bddc <USART6_IRQHandler+0x60>)
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	4b09      	ldr	r3, [pc, #36]	; (800bddc <USART6_IRQHandler+0x60>)
 800bdb8:	701a      	strb	r2, [r3, #0]
 800bdba:	4b08      	ldr	r3, [pc, #32]	; (800bddc <USART6_IRQHandler+0x60>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d109      	bne.n	800bdd6 <USART6_IRQHandler+0x5a>
 800bdc2:	4b07      	ldr	r3, [pc, #28]	; (800bde0 <USART6_IRQHandler+0x64>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <USART6_IRQHandler+0x5a>
 800bdca:	4b05      	ldr	r3, [pc, #20]	; (800bde0 <USART6_IRQHandler+0x64>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	b2da      	uxtb	r2, r3
 800bdd2:	4b03      	ldr	r3, [pc, #12]	; (800bde0 <USART6_IRQHandler+0x64>)
 800bdd4:	701a      	strb	r2, [r3, #0]
}
 800bdd6:	bf00      	nop
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	200050ea 	.word	0x200050ea
 800bde0:	200050e9 	.word	0x200050e9
 800bde4:	20003004 	.word	0x20003004

0800bde8 <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73fb      	strb	r3, [r7, #15]
 800bdf8:	e015      	b.n	800be26 <HAL_UART_TxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	4a0e      	ldr	r2, [pc, #56]	; (800be38 <HAL_UART_TxCpltCallback+0x50>)
 800bdfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	429a      	cmp	r2, r3
 800be08:	d10a      	bne.n	800be20 <HAL_UART_TxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartTxReadyTriggers[instance]);
 800be0a:	7bfa      	ldrb	r2, [r7, #15]
 800be0c:	4613      	mov	r3, r2
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	4413      	add	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4a09      	ldr	r2, [pc, #36]	; (800be3c <HAL_UART_TxCpltCallback+0x54>)
 800be16:	4413      	add	r3, r2
 800be18:	4618      	mov	r0, r3
 800be1a:	f009 f80f 	bl	8014e3c <gos_triggerIncrement>
            break;
 800be1e:	e006      	b.n	800be2e <HAL_UART_TxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	3301      	adds	r3, #1
 800be24:	73fb      	strb	r3, [r7, #15]
 800be26:	7bfb      	ldrb	r3, [r7, #15]
 800be28:	2b05      	cmp	r3, #5
 800be2a:	d9e6      	bls.n	800bdfa <HAL_UART_TxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 800be2c:	bf00      	nop
 800be2e:	bf00      	nop
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20000704 	.word	0x20000704
 800be3c:	200030c0 	.word	0x200030c0

0800be40 <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 800be48:	2300      	movs	r3, #0
 800be4a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800be4c:	2300      	movs	r3, #0
 800be4e:	73fb      	strb	r3, [r7, #15]
 800be50:	e015      	b.n	800be7e <HAL_UART_RxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	4a0e      	ldr	r2, [pc, #56]	; (800be90 <HAL_UART_RxCpltCallback+0x50>)
 800be56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d10a      	bne.n	800be78 <HAL_UART_RxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartRxReadyTriggers[instance]);
 800be62:	7bfa      	ldrb	r2, [r7, #15]
 800be64:	4613      	mov	r3, r2
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	4413      	add	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4a09      	ldr	r2, [pc, #36]	; (800be94 <HAL_UART_RxCpltCallback+0x54>)
 800be6e:	4413      	add	r3, r2
 800be70:	4618      	mov	r0, r3
 800be72:	f008 ffe3 	bl	8014e3c <gos_triggerIncrement>
            break;
 800be76:	e006      	b.n	800be86 <HAL_UART_RxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800be78:	7bfb      	ldrb	r3, [r7, #15]
 800be7a:	3301      	adds	r3, #1
 800be7c:	73fb      	strb	r3, [r7, #15]
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
 800be80:	2b05      	cmp	r3, #5
 800be82:	d9e6      	bls.n	800be52 <HAL_UART_RxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20000704 	.word	0x20000704
 800be94:	20003078 	.word	0x20003078

0800be98 <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 800bea0:	2300      	movs	r3, #0
 800bea2:	73fb      	strb	r3, [r7, #15]
    u8_t                     idx      = 0u;
 800bea4:	2300      	movs	r3, #0
 800bea6:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800bea8:	2300      	movs	r3, #0
 800beaa:	73fb      	strb	r3, [r7, #15]
 800beac:	e068      	b.n	800bf80 <HAL_UART_MspInit+0xe8>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 800beae:	7bfb      	ldrb	r3, [r7, #15]
 800beb0:	4a38      	ldr	r2, [pc, #224]	; (800bf94 <HAL_UART_MspInit+0xfc>)
 800beb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d15d      	bne.n	800bf7a <HAL_UART_MspInit+0xe2>
        {
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 800bebe:	2300      	movs	r3, #0
 800bec0:	73bb      	strb	r3, [r7, #14]
 800bec2:	e051      	b.n	800bf68 <HAL_UART_MspInit+0xd0>
            {
                if (uartConfig[idx].periphInstance == instance)
 800bec4:	7bba      	ldrb	r2, [r7, #14]
 800bec6:	4934      	ldr	r1, [pc, #208]	; (800bf98 <HAL_UART_MspInit+0x100>)
 800bec8:	4613      	mov	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	440b      	add	r3, r1
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	7bfa      	ldrb	r2, [r7, #15]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d143      	bne.n	800bf62 <HAL_UART_MspInit+0xca>
                {
                    if (uartConfig[idx].dmaConfigRx != NULL)
 800beda:	7bba      	ldrb	r2, [r7, #14]
 800bedc:	492e      	ldr	r1, [pc, #184]	; (800bf98 <HAL_UART_MspInit+0x100>)
 800bede:	4613      	mov	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4413      	add	r3, r2
 800bee4:	00db      	lsls	r3, r3, #3
 800bee6:	440b      	add	r3, r1
 800bee8:	3320      	adds	r3, #32
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d016      	beq.n	800bf1e <HAL_UART_MspInit+0x86>
                    {
                        __HAL_LINKDMA(pHuart, hdmarx, uartConfig[idx].dmaConfigRx->hdma);
 800bef0:	7bba      	ldrb	r2, [r7, #14]
 800bef2:	4929      	ldr	r1, [pc, #164]	; (800bf98 <HAL_UART_MspInit+0x100>)
 800bef4:	4613      	mov	r3, r2
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	00db      	lsls	r3, r3, #3
 800befc:	440b      	add	r3, r1
 800befe:	3320      	adds	r3, #32
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	639a      	str	r2, [r3, #56]	; 0x38
 800bf08:	7bba      	ldrb	r2, [r7, #14]
 800bf0a:	4923      	ldr	r1, [pc, #140]	; (800bf98 <HAL_UART_MspInit+0x100>)
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	00db      	lsls	r3, r3, #3
 800bf14:	440b      	add	r3, r1
 800bf16:	3320      	adds	r3, #32
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	63da      	str	r2, [r3, #60]	; 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (uartConfig[idx].dmaConfigTx != NULL)
 800bf1e:	7bba      	ldrb	r2, [r7, #14]
 800bf20:	491d      	ldr	r1, [pc, #116]	; (800bf98 <HAL_UART_MspInit+0x100>)
 800bf22:	4613      	mov	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4413      	add	r3, r2
 800bf28:	00db      	lsls	r3, r3, #3
 800bf2a:	440b      	add	r3, r1
 800bf2c:	3324      	adds	r3, #36	; 0x24
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d016      	beq.n	800bf62 <HAL_UART_MspInit+0xca>
                    {
                        __HAL_LINKDMA(pHuart, hdmatx, uartConfig[idx].dmaConfigTx->hdma);
 800bf34:	7bba      	ldrb	r2, [r7, #14]
 800bf36:	4918      	ldr	r1, [pc, #96]	; (800bf98 <HAL_UART_MspInit+0x100>)
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	440b      	add	r3, r1
 800bf42:	3324      	adds	r3, #36	; 0x24
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	1d1a      	adds	r2, r3, #4
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	635a      	str	r2, [r3, #52]	; 0x34
 800bf4c:	7bba      	ldrb	r2, [r7, #14]
 800bf4e:	4912      	ldr	r1, [pc, #72]	; (800bf98 <HAL_UART_MspInit+0x100>)
 800bf50:	4613      	mov	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	00db      	lsls	r3, r3, #3
 800bf58:	440b      	add	r3, r1
 800bf5a:	3324      	adds	r3, #36	; 0x24
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	63da      	str	r2, [r3, #60]	; 0x3c
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
 800bf64:	3301      	adds	r3, #1
 800bf66:	73bb      	strb	r3, [r7, #14]
 800bf68:	7bba      	ldrb	r2, [r7, #14]
 800bf6a:	4b0c      	ldr	r3, [pc, #48]	; (800bf9c <HAL_UART_MspInit+0x104>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	490c      	ldr	r1, [pc, #48]	; (800bfa0 <HAL_UART_MspInit+0x108>)
 800bf70:	fba1 1303 	umull	r1, r3, r1, r3
 800bf74:	095b      	lsrs	r3, r3, #5
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d3a4      	bcc.n	800bec4 <HAL_UART_MspInit+0x2c>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 800bf7a:	7bfb      	ldrb	r3, [r7, #15]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	73fb      	strb	r3, [r7, #15]
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
 800bf82:	2b05      	cmp	r3, #5
 800bf84:	d993      	bls.n	800beae <HAL_UART_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 800bf86:	bf00      	nop
 800bf88:	bf00      	nop
 800bf8a:	3714      	adds	r7, #20
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	20000704 	.word	0x20000704
 800bf98:	08019b1c 	.word	0x08019b1c
 800bf9c:	20000664 	.word	0x20000664
 800bfa0:	cccccccd 	.word	0xcccccccd

0800bfa4 <drv_w25q64Init>:

/*
 * Function: drv_w25q64Init
 */
gos_result_t drv_w25q64Init (void_t* pDevice)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_SUCCESS;
 800bfac:	2355      	movs	r3, #85	; 0x55
 800bfae:	73fb      	strb	r3, [r7, #15]
    u32_t        errorFlags = 0u;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    DRV_ERROR_CHK_NULL_PTR(pDevice, errorFlags, DRV_ERROR_W25Q64_DEVICE_NULL);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d103      	bne.n	800bfc2 <drv_w25q64Init+0x1e>
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	f043 0301 	orr.w	r3, r3, #1
 800bfc0:	60bb      	str	r3, [r7, #8]
    DRV_ERROR_CHK_SET(gos_mutexInit(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex), ((drv_w25q64Descriptor_t*)pDevice)->errorFlags, DRV_ERROR_W25Q64_MUTEX_INIT);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10d      	bne.n	800bfe6 <drv_w25q64Init+0x42>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	3302      	adds	r3, #2
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f006 f960 	bl	8012294 <gos_mutexInit>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b55      	cmp	r3, #85	; 0x55
 800bfd8:	d005      	beq.n	800bfe6 <drv_w25q64Init+0x42>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	f043 0202 	orr.w	r2, r3, #2
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	619a      	str	r2, [r3, #24]
    DRV_ERROR_SET_RESULT(initResult, errorFlags);
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d102      	bne.n	800bff2 <drv_w25q64Init+0x4e>
 800bfec:	2355      	movs	r3, #85	; 0x55
 800bfee:	73fb      	strb	r3, [r7, #15]
 800bff0:	e001      	b.n	800bff6 <drv_w25q64Init+0x52>
 800bff2:	23ae      	movs	r3, #174	; 0xae
 800bff4:	73fb      	strb	r3, [r7, #15]

    return initResult;
 800bff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <drv_w25q64ReadData>:

/*
 * Function: drv_w25q64ReadData
 */
GOS_INLINE void_t drv_w25q64ReadData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b088      	sub	sp, #32
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
 800c00c:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage  = address / W25Q64_PAGE_SIZE;
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	0a1b      	lsrs	r3, r3, #8
 800c012:	61fb      	str	r3, [r7, #28]
    u8_t  offset     = address % W25Q64_PAGE_SIZE;
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	76fb      	strb	r3, [r7, #27]
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	021a      	lsls	r2, r3, #8
 800c01c:	7efb      	ldrb	r3, [r7, #27]
 800c01e:	4413      	add	r3, r2
 800c020:	617b      	str	r3, [r7, #20]
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800c022:	2303      	movs	r3, #3
 800c024:	743b      	strb	r3, [r7, #16]
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	0c1b      	lsrs	r3, r3, #16
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	747b      	strb	r3, [r7, #17]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	0a1b      	lsrs	r3, r3, #8
 800c032:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800c034:	74bb      	strb	r3, [r7, #18]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF)};
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x03, (u8_t)((memAddress >> 16) & 0xFF),
 800c03a:	74fb      	strb	r3, [r7, #19]

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d030      	beq.n	800c0a4 <drv_w25q64ReadData+0xa4>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d02d      	beq.n	800c0a4 <drv_w25q64ReadData+0xa4>
	{
        DRV_ERROR_CHK_SET(
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d110      	bne.n	800c072 <drv_w25q64ReadData+0x72>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	1c9a      	adds	r2, r3, #2
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	4619      	mov	r1, r3
 800c05a:	4610      	mov	r0, r2
 800c05c:	f006 f934 	bl	80122c8 <gos_mutexLock>
 800c060:	4603      	mov	r3, r0
 800c062:	2b55      	cmp	r3, #85	; 0x55
 800c064:	d005      	beq.n	800c072 <drv_w25q64ReadData+0x72>
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	699b      	ldr	r3, [r3, #24]
 800c06a:	f043 0204 	orr.w	r2, r3, #4
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		drv_w25q64ChipSelectLow(pDevice);
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f000 f9cf 	bl	800c416 <drv_w25q64ChipSelectLow>
		drv_w25q64Write(pDevice, command, 4);
 800c078:	f107 0310 	add.w	r3, r7, #16
 800c07c:	2204      	movs	r2, #4
 800c07e:	4619      	mov	r1, r3
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f000 fa18 	bl	800c4b6 <drv_w25q64Write>
		drv_w25q64Read(pDevice, pData, size);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	b29b      	uxth	r3, r3
 800c08a:	461a      	mov	r2, r3
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	f000 fa35 	bl	800c4fe <drv_w25q64Read>
		drv_w25q64ChipSelectHigh(pDevice);
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f000 f9cc 	bl	800c432 <drv_w25q64ChipSelectHigh>

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	3302      	adds	r3, #2
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f006 fa18 	bl	80124d4 <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 800c0a4:	bf00      	nop
 800c0a6:	3720      	adds	r7, #32
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <drv_w25q64WriteData>:

/*
 * Function: drv_w25q64WriteData
 */
GOS_INLINE void_t drv_w25q64WriteData (void_t* pDevice, u32_t address, u8_t* pData, u32_t size)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b090      	sub	sp, #64	; 0x40
 800c0b0:	af02      	add	r7, sp, #8
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
 800c0b8:	603b      	str	r3, [r7, #0]
	/*
	 * Local variables.
	 */
    u32_t startPage    = address / W25Q64_PAGE_SIZE;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	0a1b      	lsrs	r3, r3, #8
 800c0be:	627b      	str	r3, [r7, #36]	; 0x24
    u8_t  offset       = address % W25Q64_PAGE_SIZE;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	u16_t startSector  = startPage / 16;
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c8:	091b      	lsrs	r3, r3, #4
 800c0ca:	86fb      	strh	r3, [r7, #54]	; 0x36
	u16_t endSector    = (startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE)) / 16;
 800c0cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	3b01      	subs	r3, #1
 800c0d6:	0a1a      	lsrs	r2, r3, #8
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	4413      	add	r3, r2
 800c0dc:	091b      	lsrs	r3, r3, #4
 800c0de:	843b      	strh	r3, [r7, #32]
	u16_t numOfSectors = endSector - startSector + 1;
 800c0e0:	8c3a      	ldrh	r2, [r7, #32]
 800c0e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	83fb      	strh	r3, [r7, #30]
	u32_t sectorOffset = ((startPage % 16) * W25Q64_PAGE_SIZE) + offset;
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ee:	f003 030f 	and.w	r3, r3, #15
 800c0f2:	021a      	lsls	r2, r3, #8
 800c0f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c0f8:	4413      	add	r3, r2
 800c0fa:	633b      	str	r3, [r7, #48]	; 0x30
	u32_t dataIndx     = 0u;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Function code.
     */
	if ((pDevice != NULL) && (pData != NULL))
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d06b      	beq.n	800c1de <drv_w25q64WriteData+0x132>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d068      	beq.n	800c1de <drv_w25q64WriteData+0x132>
	{
        DRV_ERROR_CHK_SET(
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d110      	bne.n	800c136 <drv_w25q64WriteData+0x8a>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	1c9a      	adds	r2, r3, #2
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	4619      	mov	r1, r3
 800c11e:	4610      	mov	r0, r2
 800c120:	f006 f8d2 	bl	80122c8 <gos_mutexLock>
 800c124:	4603      	mov	r3, r0
 800c126:	2b55      	cmp	r3, #85	; 0x55
 800c128:	d005      	beq.n	800c136 <drv_w25q64WriteData+0x8a>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	f043 0204 	orr.w	r2, r3, #4
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	619a      	str	r2, [r3, #24]
                gos_mutexLock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex, ((drv_w25q64Descriptor_t*)pDevice)->readMutexTmo),
				((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
                DRV_ERROR_W25Q64_MUTEX_LOCK
                );

		for (u16_t i = 0u; i < numOfSectors; i++)
 800c136:	2300      	movs	r3, #0
 800c138:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c13a:	e047      	b.n	800c1cc <drv_w25q64WriteData+0x120>
		{
			u32_t _startPage = startSector * 16;
 800c13c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c13e:	011b      	lsls	r3, r3, #4
 800c140:	61bb      	str	r3, [r7, #24]

			(void_t) memset(sectorBuffer, 0, SECTOR_SIZE);
 800c142:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c146:	2100      	movs	r1, #0
 800c148:	4827      	ldr	r0, [pc, #156]	; (800c1e8 <drv_w25q64WriteData+0x13c>)
 800c14a:	f009 fe03 	bl	8015d54 <memset>

			drv_w25q64ReadDataFast(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 800c14e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c152:	9300      	str	r3, [sp, #0]
 800c154:	4b24      	ldr	r3, [pc, #144]	; (800c1e8 <drv_w25q64WriteData+0x13c>)
 800c156:	2200      	movs	r2, #0
 800c158:	69b9      	ldr	r1, [r7, #24]
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f000 f846 	bl	800c1ec <drv_w25q64ReadDataFast>

			u16_t bytesRem = drv_w25q64BytesToModify(size, sectorOffset);
 800c160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c162:	b29b      	uxth	r3, r3
 800c164:	4619      	mov	r1, r3
 800c166:	6838      	ldr	r0, [r7, #0]
 800c168:	f000 f939 	bl	800c3de <drv_w25q64BytesToModify>
 800c16c:	4603      	mov	r3, r0
 800c16e:	82fb      	strh	r3, [r7, #22]

			for (u16_t j = 0u; j < bytesRem; j++)
 800c170:	2300      	movs	r3, #0
 800c172:	853b      	strh	r3, [r7, #40]	; 0x28
 800c174:	e00d      	b.n	800c192 <drv_w25q64WriteData+0xe6>
			{
				sectorBuffer[j + sectorOffset] = pData[j + dataIndx];
 800c176:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17a:	4413      	add	r3, r2
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	441a      	add	r2, r3
 800c180:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800c182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c184:	440b      	add	r3, r1
 800c186:	7811      	ldrb	r1, [r2, #0]
 800c188:	4a17      	ldr	r2, [pc, #92]	; (800c1e8 <drv_w25q64WriteData+0x13c>)
 800c18a:	54d1      	strb	r1, [r2, r3]
			for (u16_t j = 0u; j < bytesRem; j++)
 800c18c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c18e:	3301      	adds	r3, #1
 800c190:	853b      	strh	r3, [r7, #40]	; 0x28
 800c192:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c194:	8afb      	ldrh	r3, [r7, #22]
 800c196:	429a      	cmp	r2, r3
 800c198:	d3ed      	bcc.n	800c176 <drv_w25q64WriteData+0xca>
			}

			drv_w25q64WriteDataClean(pDevice, _startPage, 0, sectorBuffer, SECTOR_SIZE);
 800c19a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	4b11      	ldr	r3, [pc, #68]	; (800c1e8 <drv_w25q64WriteData+0x13c>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	69b9      	ldr	r1, [r7, #24]
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f000 f854 	bl	800c254 <drv_w25q64WriteDataClean>

			startSector++;
 800c1ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	86fb      	strh	r3, [r7, #54]	; 0x36
			sectorOffset = 0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	633b      	str	r3, [r7, #48]	; 0x30
			dataIndx = dataIndx + bytesRem;
 800c1b6:	8afb      	ldrh	r3, [r7, #22]
 800c1b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ba:	4413      	add	r3, r2
 800c1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
			size = size - bytesRem;
 800c1be:	8afb      	ldrh	r3, [r7, #22]
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	603b      	str	r3, [r7, #0]
		for (u16_t i = 0u; i < numOfSectors; i++)
 800c1c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c1cc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800c1ce:	8bfb      	ldrh	r3, [r7, #30]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d3b3      	bcc.n	800c13c <drv_w25q64WriteData+0x90>
		}

		(void_t) gos_mutexUnlock(&((drv_w25q64Descriptor_t*)pDevice)->deviceMutex);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	3302      	adds	r3, #2
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f006 f97b 	bl	80124d4 <gos_mutexUnlock>
	}
	else
	{
		// Device or data is NULL pointer.
	}
}
 800c1de:	bf00      	nop
 800c1e0:	3738      	adds	r7, #56	; 0x38
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20003108 	.word	0x20003108

0800c1ec <drv_w25q64ReadDataFast>:
 * @param   size      : Size of data to be read.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ReadDataFast (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	603b      	str	r3, [r7, #0]
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t memAddress = startPage * W25Q64_PAGE_SIZE + offset;
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	021a      	lsls	r2, r3, #8
 800c200:	79fb      	ldrb	r3, [r7, #7]
 800c202:	4413      	add	r3, r2
 800c204:	61fb      	str	r3, [r7, #28]
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800c206:	230b      	movs	r3, #11
 800c208:	753b      	strb	r3, [r7, #20]
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	0c1b      	lsrs	r3, r3, #16
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	757b      	strb	r3, [r7, #21]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	0a1b      	lsrs	r3, r3, #8
 800c216:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800c218:	75bb      	strb	r3, [r7, #22]
						(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF), 0x00 };
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x0b, (u8_t)((memAddress >> 16) & 0xFF),
 800c21e:	75fb      	strb	r3, [r7, #23]
 800c220:	2300      	movs	r3, #0
 800c222:	763b      	strb	r3, [r7, #24]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 f8f6 	bl	800c416 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 5);
 800c22a:	f107 0314 	add.w	r3, r7, #20
 800c22e:	2205      	movs	r2, #5
 800c230:	4619      	mov	r1, r3
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f000 f93f 	bl	800c4b6 <drv_w25q64Write>
	drv_w25q64Read(pDevice, pData, size);
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	461a      	mov	r2, r3
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f000 f95c 	bl	800c4fe <drv_w25q64Read>
	drv_w25q64ChipSelectHigh(pDevice);
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f000 f8f3 	bl	800c432 <drv_w25q64ChipSelectHigh>
}
 800c24c:	bf00      	nop
 800c24e:	3720      	adds	r7, #32
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <drv_w25q64WriteDataClean>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64WriteDataClean (void_t* pDevice, u32_t startPage, u8_t offset, u8_t* pData, u32_t size)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b090      	sub	sp, #64	; 0x40
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	603b      	str	r3, [r7, #0]
 800c260:	4613      	mov	r3, r2
 800c262:	71fb      	strb	r3, [r7, #7]
	/*
	 * Local variables.
	 */
	u32_t endPage      = startPage + ((size + offset - 1) / W25Q64_PAGE_SIZE);
 800c264:	79fa      	ldrb	r2, [r7, #7]
 800c266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c268:	4413      	add	r3, r2
 800c26a:	3b01      	subs	r3, #1
 800c26c:	0a1b      	lsrs	r3, r3, #8
 800c26e:	68ba      	ldr	r2, [r7, #8]
 800c270:	4413      	add	r3, r2
 800c272:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32_t numOfPages   = endPage - startPage + 1;
 800c274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	3301      	adds	r3, #1
 800c27c:	62bb      	str	r3, [r7, #40]	; 0x28
	u16_t startSector  = startPage / 16;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	091b      	lsrs	r3, r3, #4
 800c282:	84fb      	strh	r3, [r7, #38]	; 0x26
	u16_t endSector    = endPage / 16;
 800c284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c286:	091b      	lsrs	r3, r3, #4
 800c288:	84bb      	strh	r3, [r7, #36]	; 0x24
	u16_t numOfSectors = endSector - startSector + 1;
 800c28a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c28c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	b29b      	uxth	r3, r3
 800c292:	3301      	adds	r3, #1
 800c294:	847b      	strh	r3, [r7, #34]	; 0x22
	u32_t dataPosition = 0u;
 800c296:	2300      	movs	r3, #0
 800c298:	63fb      	str	r3, [r7, #60]	; 0x3c
	u32_t idx;

    /*
     * Function code.
     */
	for (idx = 0u; idx < numOfSectors; idx++)
 800c29a:	2300      	movs	r3, #0
 800c29c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c29e:	e00b      	b.n	800c2b8 <drv_w25q64WriteDataClean+0x64>
	{
		drv_w25q64EraseSector(pDevice, (startSector + idx));
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2a6:	4413      	add	r3, r2
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f000 f94a 	bl	800c546 <drv_w25q64EraseSector>
	for (idx = 0u; idx < numOfSectors; idx++)
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d3ef      	bcc.n	800c2a0 <drv_w25q64WriteDataClean+0x4c>
	}

	(void_t) memset(pageWriteBuffer, 0, 266);
 800c2c0:	f44f 7285 	mov.w	r2, #266	; 0x10a
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	4837      	ldr	r0, [pc, #220]	; (800c3a4 <drv_w25q64WriteDataClean+0x150>)
 800c2c8:	f009 fd44 	bl	8015d54 <memset>

	for (idx = 0; idx < numOfPages; idx++)
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2d0:	e05e      	b.n	800c390 <drv_w25q64WriteDataClean+0x13c>
	{
		u32_t memAddress = (startPage * W25Q64_PAGE_SIZE) + offset;
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	021a      	lsls	r2, r3, #8
 800c2d6:	79fb      	ldrb	r3, [r7, #7]
 800c2d8:	4413      	add	r3, r2
 800c2da:	61fb      	str	r3, [r7, #28]
		u32_t bytesRem = drv_w25q64BytesToWrite(size, offset);
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c2e4:	f000 f860 	bl	800c3a8 <drv_w25q64BytesToWrite>
 800c2e8:	61b8      	str	r0, [r7, #24]
		u32_t indx = 4;
 800c2ea:	2304      	movs	r3, #4
 800c2ec:	637b      	str	r3, [r7, #52]	; 0x34

		drv_w25q64WriteEnable(pDevice);
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f000 f8ad 	bl	800c44e <drv_w25q64WriteEnable>

		pageWriteBuffer[0] = 0x02;
 800c2f4:	4b2b      	ldr	r3, [pc, #172]	; (800c3a4 <drv_w25q64WriteDataClean+0x150>)
 800c2f6:	2202      	movs	r2, #2
 800c2f8:	701a      	strb	r2, [r3, #0]
		pageWriteBuffer[1] = (u8_t)((memAddress >> 16) & 0xFF);
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	0c1b      	lsrs	r3, r3, #16
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	4b28      	ldr	r3, [pc, #160]	; (800c3a4 <drv_w25q64WriteDataClean+0x150>)
 800c302:	705a      	strb	r2, [r3, #1]
		pageWriteBuffer[2] = (u8_t)((memAddress >> 8) & 0xFF);
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	0a1b      	lsrs	r3, r3, #8
 800c308:	b2da      	uxtb	r2, r3
 800c30a:	4b26      	ldr	r3, [pc, #152]	; (800c3a4 <drv_w25q64WriteDataClean+0x150>)
 800c30c:	709a      	strb	r2, [r3, #2]
		pageWriteBuffer[3] = (u8_t)(memAddress & 0xFF);
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	b2da      	uxtb	r2, r3
 800c312:	4b24      	ldr	r3, [pc, #144]	; (800c3a4 <drv_w25q64WriteDataClean+0x150>)
 800c314:	70da      	strb	r2, [r3, #3]

		u16_t bytesToSend = bytesRem + indx;
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	b29a      	uxth	r2, r3
 800c31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	4413      	add	r3, r2
 800c320:	82fb      	strh	r3, [r7, #22]

		for (u16_t i = 0; i < bytesRem; i++)
 800c322:	2300      	movs	r3, #0
 800c324:	867b      	strh	r3, [r7, #50]	; 0x32
 800c326:	e00d      	b.n	800c344 <drv_w25q64WriteDataClean+0xf0>
		{
			pageWriteBuffer[indx++] = pData[ i + dataPosition];
 800c328:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800c32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32c:	4413      	add	r3, r2
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	441a      	add	r2, r3
 800c332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c334:	1c59      	adds	r1, r3, #1
 800c336:	6379      	str	r1, [r7, #52]	; 0x34
 800c338:	7811      	ldrb	r1, [r2, #0]
 800c33a:	4a1a      	ldr	r2, [pc, #104]	; (800c3a4 <drv_w25q64WriteDataClean+0x150>)
 800c33c:	54d1      	strb	r1, [r2, r3]
		for (u16_t i = 0; i < bytesRem; i++)
 800c33e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c340:	3301      	adds	r3, #1
 800c342:	867b      	strh	r3, [r7, #50]	; 0x32
 800c344:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d8ed      	bhi.n	800c328 <drv_w25q64WriteDataClean+0xd4>
		}

		drv_w25q64ChipSelectLow(pDevice);
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f000 f862 	bl	800c416 <drv_w25q64ChipSelectLow>

		drv_w25q64Write(pDevice, pageWriteBuffer, bytesToSend);
 800c352:	8afb      	ldrh	r3, [r7, #22]
 800c354:	461a      	mov	r2, r3
 800c356:	4913      	ldr	r1, [pc, #76]	; (800c3a4 <drv_w25q64WriteDataClean+0x150>)
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f000 f8ac 	bl	800c4b6 <drv_w25q64Write>

		drv_w25q64ChipSelectHigh(pDevice);
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f000 f867 	bl	800c432 <drv_w25q64ChipSelectHigh>

		startPage++;
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	3301      	adds	r3, #1
 800c368:	60bb      	str	r3, [r7, #8]
		offset = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	71fb      	strb	r3, [r7, #7]
		size = size - bytesRem;
 800c36e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	64bb      	str	r3, [r7, #72]	; 0x48
		dataPosition = dataPosition + bytesRem;
 800c376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	4413      	add	r3, r2
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c

		(void_t) gos_taskSleep(5);
 800c37e:	2005      	movs	r0, #5
 800c380:	f003 fb78 	bl	800fa74 <gos_taskSleep>

		drv_w25q64WriteDisable(pDevice);
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f000 f87c 	bl	800c482 <drv_w25q64WriteDisable>
	for (idx = 0; idx < numOfPages; idx++)
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	3301      	adds	r3, #1
 800c38e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c394:	429a      	cmp	r2, r3
 800c396:	d39c      	bcc.n	800c2d2 <drv_w25q64WriteDataClean+0x7e>
	}
}
 800c398:	bf00      	nop
 800c39a:	bf00      	nop
 800c39c:	3740      	adds	r7, #64	; 0x40
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20004108 	.word	0x20004108

0800c3a8 <drv_w25q64BytesToWrite>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to write.
 */
GOS_STATIC u32_t drv_w25q64BytesToWrite (u32_t size, u16_t offset)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < W25Q64_PAGE_SIZE)
 800c3b8:	887a      	ldrh	r2, [r7, #2]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4413      	add	r3, r2
 800c3be:	2bff      	cmp	r3, #255	; 0xff
 800c3c0:	d802      	bhi.n	800c3c8 <drv_w25q64BytesToWrite+0x20>
	{
		bytesToWrite = size;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	60fb      	str	r3, [r7, #12]
 800c3c6:	e003      	b.n	800c3d0 <drv_w25q64BytesToWrite+0x28>
	}
	else
	{
		bytesToWrite = W25Q64_PAGE_SIZE - offset;
 800c3c8:	887b      	ldrh	r3, [r7, #2]
 800c3ca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c3ce:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <drv_w25q64BytesToModify>:
 * @param   offset : Offset.
 *
 * @return  Number of bytes to modify.
 */
GOS_STATIC u32_t drv_w25q64BytesToModify (u32_t size, u16_t offset)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b085      	sub	sp, #20
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t bytesToWrite = 0u;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
	if ((size + offset) < SECTOR_SIZE)
 800c3ee:	887a      	ldrh	r2, [r7, #2]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3f8:	d202      	bcs.n	800c400 <drv_w25q64BytesToModify+0x22>
	{
		bytesToWrite = size;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	e003      	b.n	800c408 <drv_w25q64BytesToModify+0x2a>
	}
	else
	{
		bytesToWrite = SECTOR_SIZE - offset;
 800c400:	887b      	ldrh	r3, [r7, #2]
 800c402:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800c406:	60fb      	str	r3, [r7, #12]
	}

	return bytesToWrite;
 800c408:	68fb      	ldr	r3, [r7, #12]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <drv_w25q64ChipSelectLow>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectLow (void_t* pDevice)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b082      	sub	sp, #8
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_LOW);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	785b      	ldrb	r3, [r3, #1]
 800c422:	2100      	movs	r1, #0
 800c424:	4618      	mov	r0, r3
 800c426:	f7fd fb23 	bl	8009a70 <drv_gpioWritePin>
}
 800c42a:	bf00      	nop
 800c42c:	3708      	adds	r7, #8
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <drv_w25q64ChipSelectHigh>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64ChipSelectHigh (void_t* pDevice)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b082      	sub	sp, #8
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
	(void_t) drv_gpioWritePin(((drv_w25q64Descriptor_t*)pDevice)->csPin, GPIO_STATE_HIGH);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	785b      	ldrb	r3, [r3, #1]
 800c43e:	2101      	movs	r1, #1
 800c440:	4618      	mov	r0, r3
 800c442:	f7fd fb15 	bl	8009a70 <drv_gpioWritePin>
}
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <drv_w25q64WriteEnable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteEnable (void_t* pDevice)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b084      	sub	sp, #16
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x06;
 800c456:	2306      	movs	r3, #6
 800c458:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff ffdb 	bl	800c416 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 800c460:	f107 030f 	add.w	r3, r7, #15
 800c464:	2201      	movs	r2, #1
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 f824 	bl	800c4b6 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7ff ffdf 	bl	800c432 <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 800c474:	2005      	movs	r0, #5
 800c476:	f003 fafd 	bl	800fa74 <gos_taskSleep>
}
 800c47a:	bf00      	nop
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <drv_w25q64WriteDisable>:
 * @param   pDevice : Pointer to the device descriptor.
 *
 * @return  -
 */
GOS_STATIC void_t drv_w25q64WriteDisable (void_t* pDevice)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b084      	sub	sp, #16
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	u8_t command = 0x04;
 800c48a:	2304      	movs	r3, #4
 800c48c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
	drv_w25q64ChipSelectLow(pDevice);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f7ff ffc1 	bl	800c416 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, &command, 1);
 800c494:	f107 030f 	add.w	r3, r7, #15
 800c498:	2201      	movs	r2, #1
 800c49a:	4619      	mov	r1, r3
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f80a 	bl	800c4b6 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff ffc5 	bl	800c432 <drv_w25q64ChipSelectHigh>
	(void_t) gos_taskSleep(5);
 800c4a8:	2005      	movs	r0, #5
 800c4aa:	f003 fae3 	bl	800fa74 <gos_taskSleep>
}
 800c4ae:	bf00      	nop
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <drv_w25q64Write>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Write (void_t* pDevice, u8_t* pData, u16_t size)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b086      	sub	sp, #24
 800c4ba:	af02      	add	r7, sp, #8
 800c4bc:	60f8      	str	r0, [r7, #12]
 800c4be:	60b9      	str	r1, [r7, #8]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d114      	bne.n	800c4f6 <drv_w25q64Write+0x40>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	7818      	ldrb	r0, [r3, #0]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6919      	ldr	r1, [r3, #16]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	88fa      	ldrh	r2, [r7, #6]
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	460b      	mov	r3, r1
 800c4de:	68b9      	ldr	r1, [r7, #8]
 800c4e0:	f7fe f8e8 	bl	800a6b4 <drv_spiTransmitIT>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b55      	cmp	r3, #85	; 0x55
 800c4e8:	d005      	beq.n	800c4f6 <drv_w25q64Write+0x40>
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	699b      	ldr	r3, [r3, #24]
 800c4ee:	f043 0210 	orr.w	r2, r3, #16
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->writeTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_WRITE
            );
}
 800c4f6:	bf00      	nop
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <drv_w25q64Read>:
 * @param pData
 * @param size
 * @return
 */
GOS_STATIC void_t drv_w25q64Read (void_t* pDevice, u8_t* pData, u16_t size)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b086      	sub	sp, #24
 800c502:	af02      	add	r7, sp, #8
 800c504:	60f8      	str	r0, [r7, #12]
 800c506:	60b9      	str	r1, [r7, #8]
 800c508:	4613      	mov	r3, r2
 800c50a:	80fb      	strh	r3, [r7, #6]
    /*
     * Function code.
     */
    DRV_ERROR_CHK_SET(
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d114      	bne.n	800c53e <drv_w25q64Read+0x40>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	7818      	ldrb	r0, [r3, #0]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6899      	ldr	r1, [r3, #8]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	88fa      	ldrh	r2, [r7, #6]
 800c522:	9300      	str	r3, [sp, #0]
 800c524:	460b      	mov	r3, r1
 800c526:	68b9      	ldr	r1, [r7, #8]
 800c528:	f7fe f928 	bl	800a77c <drv_spiReceiveIT>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b55      	cmp	r3, #85	; 0x55
 800c530:	d005      	beq.n	800c53e <drv_w25q64Read+0x40>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	699b      	ldr	r3, [r3, #24]
 800c536:	f043 0208 	orr.w	r2, r3, #8
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	619a      	str	r2, [r3, #24]
					((drv_w25q64Descriptor_t*)pDevice)->readTriggerTmo
					),
			((drv_w25q64Descriptor_t*)pDevice)->errorFlags,
			DRV_ERROR_W25Q64_READ
            );
}
 800c53e:	bf00      	nop
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <drv_w25q64EraseSector>:
 * @param pDevice
 * @param sector
 * @return
 */
GOS_STATIC void_t drv_w25q64EraseSector (void_t* pDevice, u16_t sector)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	460b      	mov	r3, r1
 800c550:	807b      	strh	r3, [r7, #2]
	/*
	 * Local variables.
	 */
	u32_t memAddress = sector * 16 * W25Q64_PAGE_SIZE;
 800c552:	887b      	ldrh	r3, [r7, #2]
 800c554:	031b      	lsls	r3, r3, #12
 800c556:	60fb      	str	r3, [r7, #12]
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800c558:	2320      	movs	r3, #32
 800c55a:	723b      	strb	r3, [r7, #8]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	0c1b      	lsrs	r3, r3, #16
 800c560:	b2db      	uxtb	r3, r3
 800c562:	727b      	strb	r3, [r7, #9]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	0a1b      	lsrs	r3, r3, #8
 800c568:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800c56a:	72bb      	strb	r3, [r7, #10]
		(u8_t)((memAddress >> 8) & 0xFF), (u8_t)(memAddress & 0xFF) };
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	b2db      	uxtb	r3, r3
	u8_t  command [] = { 0x20, (u8_t)((memAddress >> 16) & 0xFF),
 800c570:	72fb      	strb	r3, [r7, #11]

    /*
     * Function code.
     */
	drv_w25q64WriteEnable(pDevice);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff ff6b 	bl	800c44e <drv_w25q64WriteEnable>
	drv_w25q64ChipSelectLow(pDevice);
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff ff4c 	bl	800c416 <drv_w25q64ChipSelectLow>
	drv_w25q64Write(pDevice, command, 4);
 800c57e:	f107 0308 	add.w	r3, r7, #8
 800c582:	2204      	movs	r2, #4
 800c584:	4619      	mov	r1, r3
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7ff ff95 	bl	800c4b6 <drv_w25q64Write>
	drv_w25q64ChipSelectHigh(pDevice);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f7ff ff50 	bl	800c432 <drv_w25q64ChipSelectHigh>

	(void_t) gos_taskSleep(450);
 800c592:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800c596:	f003 fa6d 	bl	800fa74 <gos_taskSleep>

	drv_w25q64WriteDisable(pDevice);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff ff71 	bl	800c482 <drv_w25q64WriteDisable>
}
 800c5a0:	bf00      	nop
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <svl_bldHandlerInit>:

/*
 * Function: svl_bldHandlerInit
 */
gos_result_t svl_bldHandlerInit (void_t)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t bldHandlerInitResult = GOS_ERROR;
 800c5ae:	23ae      	movs	r3, #174	; 0xae
 800c5b0:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	if (gos_sysmonRegisterUserMessage(&bootMsg)            == GOS_SUCCESS)/* &&
 800c5b2:	4806      	ldr	r0, [pc, #24]	; (800c5cc <svl_bldHandlerInit+0x24>)
 800c5b4:	f007 f8a2 	bl	80136fc <gos_sysmonRegisterUserMessage>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b55      	cmp	r3, #85	; 0x55
 800c5bc:	d101      	bne.n	800c5c2 <svl_bldHandlerInit+0x1a>
	    gos_sysmonRegisterUserMessage(&softwareInfoReqMsg) == GOS_SUCCESS) TODO */
	{
		bldHandlerInitResult = GOS_SUCCESS;
 800c5be:	2355      	movs	r3, #85	; 0x55
 800c5c0:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Register error.
	}

	return bldHandlerInitResult;
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3708      	adds	r7, #8
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	2000071c 	.word	0x2000071c

0800c5d0 <svl_bldHandlerBootModeReqMsgReceived>:
 * @details Sets the update mode flag in the bootloader data.
 *
 * @return  -
 */
GOS_STATIC void_t svl_bldHandlerBootModeReqMsgReceived (void_t)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	bld_bootloaderData_t bldData = {0};
 800c5d6:	463b      	mov	r3, r7
 800c5d8:	2220      	movs	r2, #32
 800c5da:	2100      	movs	r1, #0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f009 fbb9 	bl	8015d54 <memset>

	/*
	 * Function code.
	 */
	if (bld_dataGet(&bldData) == GOS_SUCCESS)
 800c5e2:	463b      	mov	r3, r7
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f001 fd39 	bl	800e05c <bld_dataGet>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b55      	cmp	r3, #85	; 0x55
 800c5ee:	d10a      	bne.n	800c606 <svl_bldHandlerBootModeReqMsgReceived+0x36>
	{
		// Set update mode flag.
		bldData.updateMode = GOS_TRUE;
 800c5f0:	2336      	movs	r3, #54	; 0x36
 800c5f2:	753b      	strb	r3, [r7, #20]

		// Store data.
		if (bld_dataSet(&bldData) == GOS_SUCCESS)
 800c5f4:	463b      	mov	r3, r7
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f001 fd5a 	bl	800e0b0 <bld_dataSet>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b55      	cmp	r3, #85	; 0x55
 800c600:	d101      	bne.n	800c606 <svl_bldHandlerBootModeReqMsgReceived+0x36>
		{
			gos_kernelReset();
 800c602:	f002 f8a5 	bl	800e750 <gos_kernelReset>
	}
	else
	{
		// Data error.
	}
}
 800c606:	bf00      	nop
 800c608:	3720      	adds	r7, #32
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
	...

0800c610 <svl_dsmInit>:

/*
 * Function: svl_dsmInit
 */
gos_result_t svl_dsmInit (void_t)
{
 800c610:	b590      	push	{r4, r7, lr}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t dsmInitResult = GOS_SUCCESS;
 800c616:	2355      	movs	r3, #85	; 0x55
 800c618:	71fb      	strb	r3, [r7, #7]
	u8_t         initIdx       = 0u;
 800c61a:	2300      	movs	r3, #0
 800c61c:	71bb      	strb	r3, [r7, #6]
	u8_t         initBlockIdx  = 0u;
 800c61e:	2300      	movs	r3, #0
 800c620:	717b      	strb	r3, [r7, #5]

	/*
	 * Function code.
	 */
	if (initPhaseConfig != NULL && initPhaseConfigSize > 0u)
 800c622:	4b39      	ldr	r3, [pc, #228]	; (800c708 <svl_dsmInit+0xf8>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d064      	beq.n	800c6f4 <svl_dsmInit+0xe4>
	{
		// Register DSM task.
		dsmInitResult &= gos_taskRegister(&svlDsmDaemonDesc, NULL);
 800c62a:	2100      	movs	r1, #0
 800c62c:	4837      	ldr	r0, [pc, #220]	; (800c70c <svl_dsmInit+0xfc>)
 800c62e:	f003 f88f 	bl	800f750 <gos_taskRegister>
 800c632:	4603      	mov	r3, r0
 800c634:	461a      	mov	r2, r3
 800c636:	79fb      	ldrb	r3, [r7, #7]
 800c638:	4013      	ands	r3, r2
 800c63a:	71fb      	strb	r3, [r7, #7]

		// Loop through all init phases.
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 800c63c:	2300      	movs	r3, #0
 800c63e:	71bb      	strb	r3, [r7, #6]
 800c640:	e04f      	b.n	800c6e2 <svl_dsmInit+0xd2>
		{
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 800c642:	4833      	ldr	r0, [pc, #204]	; (800c710 <svl_dsmInit+0x100>)
 800c644:	f001 fecc 	bl	800e3e0 <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe(initPhaseConfig[initIdx].phaseName);
 800c648:	79ba      	ldrb	r2, [r7, #6]
 800c64a:	4932      	ldr	r1, [pc, #200]	; (800c714 <svl_dsmInit+0x104>)
 800c64c:	4613      	mov	r3, r2
 800c64e:	019b      	lsls	r3, r3, #6
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	440b      	add	r3, r1
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4618      	mov	r0, r3
 800c65a:	f001 fec1 	bl	800e3e0 <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 800c65e:	482c      	ldr	r0, [pc, #176]	; (800c710 <svl_dsmInit+0x100>)
 800c660:	f001 febe 	bl	800e3e0 <gos_traceDriverTransmitString_Unsafe>

			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 800c664:	2300      	movs	r3, #0
 800c666:	717b      	strb	r3, [r7, #5]
 800c668:	e033      	b.n	800c6d2 <svl_dsmInit+0xc2>
			{
				if (initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer != NULL)
 800c66a:	79ba      	ldrb	r2, [r7, #6]
 800c66c:	797b      	ldrb	r3, [r7, #5]
 800c66e:	4829      	ldr	r0, [pc, #164]	; (800c714 <svl_dsmInit+0x104>)
 800c670:	00d9      	lsls	r1, r3, #3
 800c672:	4613      	mov	r3, r2
 800c674:	019b      	lsls	r3, r3, #6
 800c676:	4413      	add	r3, r2
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	440b      	add	r3, r1
 800c67c:	4403      	add	r3, r0
 800c67e:	3308      	adds	r3, #8
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d029      	beq.n	800c6da <svl_dsmInit+0xca>
				{
					dsmInitResult &= gos_errorTraceInit(
 800c686:	79ba      	ldrb	r2, [r7, #6]
 800c688:	797b      	ldrb	r3, [r7, #5]
							initPhaseConfig[initIdx].initBlock[initBlockIdx].description,
 800c68a:	4822      	ldr	r0, [pc, #136]	; (800c714 <svl_dsmInit+0x104>)
 800c68c:	00d9      	lsls	r1, r3, #3
 800c68e:	4613      	mov	r3, r2
 800c690:	019b      	lsls	r3, r3, #6
 800c692:	4413      	add	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	440b      	add	r3, r1
 800c698:	4403      	add	r3, r0
 800c69a:	3304      	adds	r3, #4
 800c69c:	681c      	ldr	r4, [r3, #0]
							initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer());
 800c69e:	79ba      	ldrb	r2, [r7, #6]
 800c6a0:	797b      	ldrb	r3, [r7, #5]
 800c6a2:	481c      	ldr	r0, [pc, #112]	; (800c714 <svl_dsmInit+0x104>)
 800c6a4:	00d9      	lsls	r1, r3, #3
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	019b      	lsls	r3, r3, #6
 800c6aa:	4413      	add	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	440b      	add	r3, r1
 800c6b0:	4403      	add	r3, r0
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	681b      	ldr	r3, [r3, #0]
					dsmInitResult &= gos_errorTraceInit(
 800c6b6:	4798      	blx	r3
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f004 ffc9 	bl	8011654 <gos_errorTraceInit>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	79fb      	ldrb	r3, [r7, #7]
 800c6c8:	4013      	ands	r3, r2
 800c6ca:	71fb      	strb	r3, [r7, #7]
			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 800c6cc:	797b      	ldrb	r3, [r7, #5]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	717b      	strb	r3, [r7, #5]
 800c6d2:	797b      	ldrb	r3, [r7, #5]
 800c6d4:	2b1f      	cmp	r3, #31
 800c6d6:	d9c8      	bls.n	800c66a <svl_dsmInit+0x5a>
 800c6d8:	e000      	b.n	800c6dc <svl_dsmInit+0xcc>
				}
				else
				{
					// End of initializers.
					break;
 800c6da:	bf00      	nop
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 800c6dc:	79bb      	ldrb	r3, [r7, #6]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	71bb      	strb	r3, [r7, #6]
 800c6e2:	79ba      	ldrb	r2, [r7, #6]
 800c6e4:	4b08      	ldr	r3, [pc, #32]	; (800c708 <svl_dsmInit+0xf8>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	490b      	ldr	r1, [pc, #44]	; (800c718 <svl_dsmInit+0x108>)
 800c6ea:	fba1 1303 	umull	r1, r3, r1, r3
 800c6ee:	0a1b      	lsrs	r3, r3, #8
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d3a6      	bcc.n	800c642 <svl_dsmInit+0x32>
	else
	{
		// Configuration is empty.
	}

	if (dsmInitResult != GOS_SUCCESS)
 800c6f4:	79fb      	ldrb	r3, [r7, #7]
 800c6f6:	2b55      	cmp	r3, #85	; 0x55
 800c6f8:	d001      	beq.n	800c6fe <svl_dsmInit+0xee>
	{
		dsmInitResult = GOS_ERROR;
 800c6fa:	23ae      	movs	r3, #174	; 0xae
 800c6fc:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Success.
	}

	return dsmInitResult;
 800c6fe:	79fb      	ldrb	r3, [r7, #7]
}
 800c700:	4618      	mov	r0, r3
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	bd90      	pop	{r4, r7, pc}
 800c708:	200005bc 	.word	0x200005bc
 800c70c:	2000072c 	.word	0x2000072c
 800c710:	080180d4 	.word	0x080180d4
 800c714:	0801970c 	.word	0x0801970c
 800c718:	fc0fc0fd 	.word	0xfc0fc0fd

0800c71c <svl_dsmPrintOSInfo>:

/*
 * Function: svl_dsmPrintOSInfo
 */
gos_result_t svl_dsmPrintOSInfo (void_t)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t printResult = GOS_SUCCESS;
 800c722:	2355      	movs	r3, #85	; 0x55
 800c724:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"OS Info"TRACE_FORMAT_RESET"\r\n");
 800c726:	490f      	ldr	r1, [pc, #60]	; (800c764 <svl_dsmPrintOSInfo+0x48>)
 800c728:	2049      	movs	r0, #73	; 0x49
 800c72a:	f008 f8db 	bl	80148e4 <gos_traceTraceFormatted>
 800c72e:	4603      	mov	r3, r0
 800c730:	461a      	mov	r2, r3
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	4013      	ands	r3, r2
 800c736:	71fb      	strb	r3, [r7, #7]
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version: %02u.%02u\r\n", GOS_VERSION_MAJOR, GOS_VERSION_MINOR);
 800c738:	2300      	movs	r3, #0
 800c73a:	2201      	movs	r2, #1
 800c73c:	490a      	ldr	r1, [pc, #40]	; (800c768 <svl_dsmPrintOSInfo+0x4c>)
 800c73e:	2049      	movs	r0, #73	; 0x49
 800c740:	f008 f8d0 	bl	80148e4 <gos_traceTraceFormatted>
 800c744:	4603      	mov	r3, r0
 800c746:	461a      	mov	r2, r3
 800c748:	79fb      	ldrb	r3, [r7, #7]
 800c74a:	4013      	ands	r3, r2
 800c74c:	71fb      	strb	r3, [r7, #7]

	if (printResult != GOS_SUCCESS)
 800c74e:	79fb      	ldrb	r3, [r7, #7]
 800c750:	2b55      	cmp	r3, #85	; 0x55
 800c752:	d001      	beq.n	800c758 <svl_dsmPrintOSInfo+0x3c>
	{
		printResult = GOS_ERROR;
 800c754:	23ae      	movs	r3, #174	; 0xae
 800c756:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Success.
	}

	return printResult;
 800c758:	79fb      	ldrb	r3, [r7, #7]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	080180d8 	.word	0x080180d8
 800c768:	080180f0 	.word	0x080180f0

0800c76c <svl_dsmPrintLibInfo>:

/*
 * Function: svl_dsmPrintLibInfo
 */
gos_result_t svl_dsmPrintLibInfo (void_t)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b0ac      	sub	sp, #176	; 0xb0
 800c770:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t       printResult = GOS_SUCCESS;
 800c772:	2355      	movs	r3, #85	; 0x55
 800c774:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	svl_pdhSwVerInfo_t libVer      = {0};
 800c778:	1d3b      	adds	r3, r7, #4
 800c77a:	22a0      	movs	r2, #160	; 0xa0
 800c77c:	2100      	movs	r1, #0
 800c77e:	4618      	mov	r0, r3
 800c780:	f009 fae8 	bl	8015d54 <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_pdhGetLibVersion(&libVer);
 800c784:	1d3b      	adds	r3, r7, #4
 800c786:	4618      	mov	r0, r3
 800c788:	f000 ff3c 	bl	800d604 <svl_pdhGetLibVersion>
 800c78c:	4603      	mov	r3, r0
 800c78e:	461a      	mov	r2, r3
 800c790:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800c794:	4013      	ands	r3, r2
 800c796:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Library Info"TRACE_FORMAT_RESET"\r\n");
 800c79a:	4934      	ldr	r1, [pc, #208]	; (800c86c <svl_dsmPrintLibInfo+0x100>)
 800c79c:	2049      	movs	r0, #73	; 0x49
 800c79e:	f008 f8a1 	bl	80148e4 <gos_traceTraceFormatted>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800c7aa:	4013      	ands	r3, r2
 800c7ac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", libVer.name);
 800c7b0:	1d3b      	adds	r3, r7, #4
 800c7b2:	3310      	adds	r3, #16
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	492e      	ldr	r1, [pc, #184]	; (800c870 <svl_dsmPrintLibInfo+0x104>)
 800c7b8:	2049      	movs	r0, #73	; 0x49
 800c7ba:	f008 f893 	bl	80148e4 <gos_traceTraceFormatted>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", libVer.description);
 800c7cc:	1d3b      	adds	r3, r7, #4
 800c7ce:	3340      	adds	r3, #64	; 0x40
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	4928      	ldr	r1, [pc, #160]	; (800c874 <svl_dsmPrintLibInfo+0x108>)
 800c7d4:	2049      	movs	r0, #73	; 0x49
 800c7d6:	f008 f885 	bl	80148e4 <gos_traceTraceFormatted>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	461a      	mov	r2, r3
 800c7de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800c7e2:	4013      	ands	r3, r2
 800c7e4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", libVer.major, libVer.minor, libVer.build);
 800c7e8:	88bb      	ldrh	r3, [r7, #4]
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	88fb      	ldrh	r3, [r7, #6]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	893b      	ldrh	r3, [r7, #8]
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4920      	ldr	r1, [pc, #128]	; (800c878 <svl_dsmPrintLibInfo+0x10c>)
 800c7f8:	2049      	movs	r0, #73	; 0x49
 800c7fa:	f008 f873 	bl	80148e4 <gos_traceTraceFormatted>
 800c7fe:	4603      	mov	r3, r0
 800c800:	461a      	mov	r2, r3
 800c802:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800c806:	4013      	ands	r3, r2
 800c808:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", libVer.date.years, libVer.date.months, libVer.date.days);
 800c80c:	8a7b      	ldrh	r3, [r7, #18]
 800c80e:	461a      	mov	r2, r3
 800c810:	7c7b      	ldrb	r3, [r7, #17]
 800c812:	4619      	mov	r1, r3
 800c814:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800c818:	b29b      	uxth	r3, r3
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	460b      	mov	r3, r1
 800c81e:	4917      	ldr	r1, [pc, #92]	; (800c87c <svl_dsmPrintLibInfo+0x110>)
 800c820:	2049      	movs	r0, #73	; 0x49
 800c822:	f008 f85f 	bl	80148e4 <gos_traceTraceFormatted>
 800c826:	4603      	mov	r3, r0
 800c828:	461a      	mov	r2, r3
 800c82a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800c82e:	4013      	ands	r3, r2
 800c830:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", libVer.author);
 800c834:	1d3b      	adds	r3, r7, #4
 800c836:	3370      	adds	r3, #112	; 0x70
 800c838:	461a      	mov	r2, r3
 800c83a:	4911      	ldr	r1, [pc, #68]	; (800c880 <svl_dsmPrintLibInfo+0x114>)
 800c83c:	2049      	movs	r0, #73	; 0x49
 800c83e:	f008 f851 	bl	80148e4 <gos_traceTraceFormatted>
 800c842:	4603      	mov	r3, r0
 800c844:	461a      	mov	r2, r3
 800c846:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800c84a:	4013      	ands	r3, r2
 800c84c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	if (printResult != GOS_SUCCESS)
 800c850:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800c854:	2b55      	cmp	r3, #85	; 0x55
 800c856:	d002      	beq.n	800c85e <svl_dsmPrintLibInfo+0xf2>
	{
		printResult = GOS_ERROR;
 800c858:	23ae      	movs	r3, #174	; 0xae
 800c85a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	else
	{
		// Success.
	}

	return printResult;
 800c85e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 800c862:	4618      	mov	r0, r3
 800c864:	37a8      	adds	r7, #168	; 0xa8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	08018108 	.word	0x08018108
 800c870:	08018124 	.word	0x08018124
 800c874:	08018138 	.word	0x08018138
 800c878:	0801814c 	.word	0x0801814c
 800c87c:	0801816c 	.word	0x0801816c
 800c880:	0801818c 	.word	0x0801818c

0800c884 <svl_dsmPrintHwInfo>:

/*
 * Function: svl_dsmPrintHwInfo
 */
gos_result_t svl_dsmPrintHwInfo (void_t)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b0c2      	sub	sp, #264	; 0x108
 800c888:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 800c88a:	2355      	movs	r3, #85	; 0x55
 800c88c:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	svl_pdhHwInfo_t hwInfo      = {0};
 800c890:	1d3b      	adds	r3, r7, #4
 800c892:	22fa      	movs	r2, #250	; 0xfa
 800c894:	2100      	movs	r1, #0
 800c896:	4618      	mov	r0, r3
 800c898:	f009 fa5c 	bl	8015d54 <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_pdhGetHwInfo(&hwInfo);
 800c89c:	1d3b      	adds	r3, r7, #4
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 ff44 	bl	800d72c <svl_pdhGetHwInfo>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Hardware Info"TRACE_FORMAT_RESET"\r\n");
 800c8b2:	493a      	ldr	r1, [pc, #232]	; (800c99c <svl_dsmPrintHwInfo+0x118>)
 800c8b4:	2049      	movs	r0, #73	; 0x49
 800c8b6:	f008 f815 	bl	80148e4 <gos_traceTraceFormatted>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	461a      	mov	r2, r3
 800c8be:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Board name:    %s\r\n", hwInfo.boardName);
 800c8c8:	1d3b      	adds	r3, r7, #4
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	4934      	ldr	r1, [pc, #208]	; (800c9a0 <svl_dsmPrintHwInfo+0x11c>)
 800c8ce:	2049      	movs	r0, #73	; 0x49
 800c8d0:	f008 f808 	bl	80148e4 <gos_traceTraceFormatted>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c8dc:	4013      	ands	r3, r2
 800c8de:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:        %s\r\n", hwInfo.author);
 800c8e2:	1d3b      	adds	r3, r7, #4
 800c8e4:	3360      	adds	r3, #96	; 0x60
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	492e      	ldr	r1, [pc, #184]	; (800c9a4 <svl_dsmPrintHwInfo+0x120>)
 800c8ea:	2049      	movs	r0, #73	; 0x49
 800c8ec:	f007 fffa 	bl	80148e4 <gos_traceTraceFormatted>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c8f8:	4013      	ands	r3, r2
 800c8fa:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description:   %s\r\n", hwInfo.description);
 800c8fe:	1d3b      	adds	r3, r7, #4
 800c900:	3390      	adds	r3, #144	; 0x90
 800c902:	461a      	mov	r2, r3
 800c904:	4928      	ldr	r1, [pc, #160]	; (800c9a8 <svl_dsmPrintHwInfo+0x124>)
 800c906:	2049      	movs	r0, #73	; 0x49
 800c908:	f007 ffec 	bl	80148e4 <gos_traceTraceFormatted>
 800c90c:	4603      	mov	r3, r0
 800c90e:	461a      	mov	r2, r3
 800c910:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c914:	4013      	ands	r3, r2
 800c916:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Revision:      %s\r\n", hwInfo.revision);
 800c91a:	1d3b      	adds	r3, r7, #4
 800c91c:	3330      	adds	r3, #48	; 0x30
 800c91e:	461a      	mov	r2, r3
 800c920:	4922      	ldr	r1, [pc, #136]	; (800c9ac <svl_dsmPrintHwInfo+0x128>)
 800c922:	2049      	movs	r0, #73	; 0x49
 800c924:	f007 ffde 	bl	80148e4 <gos_traceTraceFormatted>
 800c928:	4603      	mov	r3, r0
 800c92a:	461a      	mov	r2, r3
 800c92c:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c930:	4013      	ands	r3, r2
 800c932:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Serial number: %s\r\n", hwInfo.serialNumber);
 800c936:	1d3b      	adds	r3, r7, #4
 800c938:	33ca      	adds	r3, #202	; 0xca
 800c93a:	461a      	mov	r2, r3
 800c93c:	491c      	ldr	r1, [pc, #112]	; (800c9b0 <svl_dsmPrintHwInfo+0x12c>)
 800c93e:	2049      	movs	r0, #73	; 0x49
 800c940:	f007 ffd0 	bl	80148e4 <gos_traceTraceFormatted>
 800c944:	4603      	mov	r3, r0
 800c946:	461a      	mov	r2, r3
 800c948:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c94c:	4013      	ands	r3, r2
 800c94e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
			hwInfo.date.years,
 800c952:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
 800c956:	461a      	mov	r2, r3
			hwInfo.date.months,
 800c958:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
 800c95c:	4619      	mov	r1, r3
			hwInfo.date.days
 800c95e:	f8b7 30c9 	ldrh.w	r3, [r7, #201]	; 0xc9
 800c962:	b29b      	uxth	r3, r3
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          %04hu-%02u-%02u\r\n",
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	460b      	mov	r3, r1
 800c968:	4912      	ldr	r1, [pc, #72]	; (800c9b4 <svl_dsmPrintHwInfo+0x130>)
 800c96a:	2049      	movs	r0, #73	; 0x49
 800c96c:	f007 ffba 	bl	80148e4 <gos_traceTraceFormatted>
 800c970:	4603      	mov	r3, r0
 800c972:	461a      	mov	r2, r3
 800c974:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c978:	4013      	ands	r3, r2
 800c97a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			);

	if (printResult != GOS_SUCCESS)
 800c97e:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800c982:	2b55      	cmp	r3, #85	; 0x55
 800c984:	d002      	beq.n	800c98c <svl_dsmPrintHwInfo+0x108>
	{
		printResult = GOS_ERROR;
 800c986:	23ae      	movs	r3, #174	; 0xae
 800c988:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	else
	{
		// Success.
	}

	return printResult;
 800c98c:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
}
 800c990:	4618      	mov	r0, r3
 800c992:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	080181a0 	.word	0x080181a0
 800c9a0:	080181bc 	.word	0x080181bc
 800c9a4:	080181d0 	.word	0x080181d0
 800c9a8:	080181e4 	.word	0x080181e4
 800c9ac:	080181f8 	.word	0x080181f8
 800c9b0:	0801820c 	.word	0x0801820c
 800c9b4:	08018220 	.word	0x08018220

0800c9b8 <svl_dsmPrintAppInfo>:

/*
 * Function: svl_dsmPrintAppInfo
 */
gos_result_t svl_dsmPrintAppInfo (void_t)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 800c9be:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 800c9c0:	2355      	movs	r3, #85	; 0x55
 800c9c2:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
	svl_pdhSwInfo_t swInfo      = {0};
 800c9c6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800c9ca:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	f009 f9bc 	bl	8015d54 <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_pdhGetSwInfo(&swInfo);
 800c9dc:	1d3b      	adds	r3, r7, #4
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f000 fe84 	bl	800d6ec <svl_pdhGetSwInfo>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800c9ec:	4013      	ands	r3, r2
 800c9ee:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Application Info"TRACE_FORMAT_RESET"\r\n");
 800c9f2:	4944      	ldr	r1, [pc, #272]	; (800cb04 <svl_dsmPrintAppInfo+0x14c>)
 800c9f4:	2049      	movs	r0, #73	; 0x49
 800c9f6:	f007 ff75 	bl	80148e4 <gos_traceTraceFormatted>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800ca02:	4013      	ands	r3, r2
 800ca04:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.appSwVerInfo.name);
 800ca08:	1d3b      	adds	r3, r7, #4
 800ca0a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ca0e:	461a      	mov	r2, r3
 800ca10:	493d      	ldr	r1, [pc, #244]	; (800cb08 <svl_dsmPrintAppInfo+0x150>)
 800ca12:	2049      	movs	r0, #73	; 0x49
 800ca14:	f007 ff66 	bl	80148e4 <gos_traceTraceFormatted>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800ca20:	4013      	ands	r3, r2
 800ca22:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.appSwVerInfo.description);
 800ca26:	1d3b      	adds	r3, r7, #4
 800ca28:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	4937      	ldr	r1, [pc, #220]	; (800cb0c <svl_dsmPrintAppInfo+0x154>)
 800ca30:	2049      	movs	r0, #73	; 0x49
 800ca32:	f007 ff57 	bl	80148e4 <gos_traceTraceFormatted>
 800ca36:	4603      	mov	r3, r0
 800ca38:	461a      	mov	r2, r3
 800ca3a:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800ca3e:	4013      	ands	r3, r2
 800ca40:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.appSwVerInfo.major, swInfo.appSwVerInfo.minor, swInfo.appSwVerInfo.build);
 800ca44:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800ca48:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ca4c:	f8b3 31f0 	ldrh.w	r3, [r3, #496]	; 0x1f0
 800ca50:	461a      	mov	r2, r3
 800ca52:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800ca56:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ca5a:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	; 0x1f2
 800ca5e:	4619      	mov	r1, r3
 800ca60:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800ca64:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ca68:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	; 0x1f4
 800ca6c:	9300      	str	r3, [sp, #0]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	4927      	ldr	r1, [pc, #156]	; (800cb10 <svl_dsmPrintAppInfo+0x158>)
 800ca72:	2049      	movs	r0, #73	; 0x49
 800ca74:	f007 ff36 	bl	80148e4 <gos_traceTraceFormatted>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800ca80:	4013      	ands	r3, r2
 800ca82:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.appSwVerInfo.date.years, swInfo.appSwVerInfo.date.months, swInfo.appSwVerInfo.date.days);
 800ca86:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800ca8a:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ca8e:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	; 0x1fe
 800ca92:	461a      	mov	r2, r3
 800ca94:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800ca98:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800ca9c:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
 800caa0:	4619      	mov	r1, r3
 800caa2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800caa6:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800caaa:	f8b3 31fb 	ldrh.w	r3, [r3, #507]	; 0x1fb
 800caae:	b29b      	uxth	r3, r3
 800cab0:	9300      	str	r3, [sp, #0]
 800cab2:	460b      	mov	r3, r1
 800cab4:	4917      	ldr	r1, [pc, #92]	; (800cb14 <svl_dsmPrintAppInfo+0x15c>)
 800cab6:	2049      	movs	r0, #73	; 0x49
 800cab8:	f007 ff14 	bl	80148e4 <gos_traceTraceFormatted>
 800cabc:	4603      	mov	r3, r0
 800cabe:	461a      	mov	r2, r3
 800cac0:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800cac4:	4013      	ands	r3, r2
 800cac6:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.appSwVerInfo.author);
 800caca:	1d3b      	adds	r3, r7, #4
 800cacc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800cad0:	461a      	mov	r2, r3
 800cad2:	4911      	ldr	r1, [pc, #68]	; (800cb18 <svl_dsmPrintAppInfo+0x160>)
 800cad4:	2049      	movs	r0, #73	; 0x49
 800cad6:	f007 ff05 	bl	80148e4 <gos_traceTraceFormatted>
 800cada:	4603      	mov	r3, r0
 800cadc:	461a      	mov	r2, r3
 800cade:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800cae2:	4013      	ands	r3, r2
 800cae4:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7

	if (printResult != GOS_SUCCESS)
 800cae8:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800caec:	2b55      	cmp	r3, #85	; 0x55
 800caee:	d002      	beq.n	800caf6 <svl_dsmPrintAppInfo+0x13e>
	{
		printResult = GOS_ERROR;
 800caf0:	23ae      	movs	r3, #174	; 0xae
 800caf2:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
	else
	{
		// Success.
	}

	return printResult;
 800caf6:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	f507 772a 	add.w	r7, r7, #680	; 0x2a8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	08018244 	.word	0x08018244
 800cb08:	08018124 	.word	0x08018124
 800cb0c:	08018138 	.word	0x08018138
 800cb10:	0801814c 	.word	0x0801814c
 800cb14:	0801816c 	.word	0x0801816c
 800cb18:	0801818c 	.word	0x0801818c

0800cb1c <svl_dsmTask>:
 * TODO
 * @param
 * @return
 */
GOS_STATIC void_t svl_dsmTask (void_t)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t reactionIdx = 0u;
 800cb22:	2300      	movs	r3, #0
 800cb24:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Print out OS info.
	(void_t) svl_dsmPrintOSInfo();
 800cb26:	f7ff fdf9 	bl	800c71c <svl_dsmPrintOSInfo>

	// Print out library info.
	(void_t) svl_dsmPrintLibInfo();
 800cb2a:	f7ff fe1f 	bl	800c76c <svl_dsmPrintLibInfo>

	// Print out Hardware Info.
	(void_t) svl_dsmPrintHwInfo();
 800cb2e:	f7ff fea9 	bl	800c884 <svl_dsmPrintHwInfo>

	// Print out Application Info.
	(void_t) svl_dsmPrintAppInfo();
 800cb32:	f7ff ff41 	bl	800c9b8 <svl_dsmPrintAppInfo>

	// Change priority.
	(void_t) gos_taskSetPriority(svlDsmDaemonDesc.taskId, SVL_DSM_DAEMON_PRIO);
 800cb36:	4b26      	ldr	r3, [pc, #152]	; (800cbd0 <svl_dsmTask+0xb4>)
 800cb38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb3a:	21c8      	movs	r1, #200	; 0xc8
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f003 fdd5 	bl	80106ec <gos_taskSetPriority>
 800cb42:	2301      	movs	r3, #1
 800cb44:	71bb      	strb	r3, [r7, #6]
	devicePrevState = deviceState;
 800cb46:	4b23      	ldr	r3, [pc, #140]	; (800cbd4 <svl_dsmTask+0xb8>)
 800cb48:	781a      	ldrb	r2, [r3, #0]
 800cb4a:	4b23      	ldr	r3, [pc, #140]	; (800cbd8 <svl_dsmTask+0xbc>)
 800cb4c:	701a      	strb	r2, [r3, #0]
	deviceState = requiredState;
 800cb4e:	4a21      	ldr	r2, [pc, #132]	; (800cbd4 <svl_dsmTask+0xb8>)
 800cb50:	79bb      	ldrb	r3, [r7, #6]
 800cb52:	7013      	strb	r3, [r2, #0]
}
 800cb54:	bf00      	nop
	svl_dsmSetState(DSM_STATE_STARTUP_READY);

	for (;;)
	{
		// Check for state change.
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 800cb56:	4b20      	ldr	r3, [pc, #128]	; (800cbd8 <svl_dsmTask+0xbc>)
 800cb58:	781a      	ldrb	r2, [r3, #0]
 800cb5a:	4b1e      	ldr	r3, [pc, #120]	; (800cbd4 <svl_dsmTask+0xb8>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d031      	beq.n	800cbc6 <svl_dsmTask+0xaa>
 800cb62:	4b1e      	ldr	r3, [pc, #120]	; (800cbdc <svl_dsmTask+0xc0>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d02d      	beq.n	800cbc6 <svl_dsmTask+0xaa>
		{
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	71fb      	strb	r3, [r7, #7]
 800cb6e:	e020      	b.n	800cbb2 <svl_dsmTask+0x96>
			{
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 800cb70:	79fb      	ldrb	r3, [r7, #7]
 800cb72:	4a1b      	ldr	r2, [pc, #108]	; (800cbe0 <svl_dsmTask+0xc4>)
 800cb74:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800cb78:	4b17      	ldr	r3, [pc, #92]	; (800cbd8 <svl_dsmTask+0xbc>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d115      	bne.n	800cbac <svl_dsmTask+0x90>
					reactionConfig[reactionIdx].currState == deviceState &&
 800cb80:	79fb      	ldrb	r3, [r7, #7]
 800cb82:	4a17      	ldr	r2, [pc, #92]	; (800cbe0 <svl_dsmTask+0xc4>)
 800cb84:	00db      	lsls	r3, r3, #3
 800cb86:	4413      	add	r3, r2
 800cb88:	785a      	ldrb	r2, [r3, #1]
 800cb8a:	4b12      	ldr	r3, [pc, #72]	; (800cbd4 <svl_dsmTask+0xb8>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d10c      	bne.n	800cbac <svl_dsmTask+0x90>
					reactionConfig[reactionIdx].pReaction != NULL)
 800cb92:	79fb      	ldrb	r3, [r7, #7]
 800cb94:	4a12      	ldr	r2, [pc, #72]	; (800cbe0 <svl_dsmTask+0xc4>)
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	4413      	add	r3, r2
 800cb9a:	685b      	ldr	r3, [r3, #4]
					reactionConfig[reactionIdx].currState == deviceState &&
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d005      	beq.n	800cbac <svl_dsmTask+0x90>
				{
					// Execute reaction.
					reactionConfig[reactionIdx].pReaction();
 800cba0:	79fb      	ldrb	r3, [r7, #7]
 800cba2:	4a0f      	ldr	r2, [pc, #60]	; (800cbe0 <svl_dsmTask+0xc4>)
 800cba4:	00db      	lsls	r3, r3, #3
 800cba6:	4413      	add	r3, r2
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	4798      	blx	r3
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 800cbac:	79fb      	ldrb	r3, [r7, #7]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	71fb      	strb	r3, [r7, #7]
 800cbb2:	79fa      	ldrb	r2, [r7, #7]
 800cbb4:	4b09      	ldr	r3, [pc, #36]	; (800cbdc <svl_dsmTask+0xc0>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	08db      	lsrs	r3, r3, #3
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d3d8      	bcc.n	800cb70 <svl_dsmTask+0x54>
					// No match.
				}
			}

			// Resolve device state change.
			devicePrevState = deviceState;
 800cbbe:	4b05      	ldr	r3, [pc, #20]	; (800cbd4 <svl_dsmTask+0xb8>)
 800cbc0:	781a      	ldrb	r2, [r3, #0]
 800cbc2:	4b05      	ldr	r3, [pc, #20]	; (800cbd8 <svl_dsmTask+0xbc>)
 800cbc4:	701a      	strb	r2, [r3, #0]
		else
		{
			// State change not detected.
		}

		(void_t) gos_taskSleep(SVL_DSM_DAEMON_POLL_MS);
 800cbc6:	2014      	movs	r0, #20
 800cbc8:	f002 ff54 	bl	800fa74 <gos_taskSleep>
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 800cbcc:	e7c3      	b.n	800cb56 <svl_dsmTask+0x3a>
 800cbce:	bf00      	nop
 800cbd0:	2000072c 	.word	0x2000072c
 800cbd4:	20004212 	.word	0x20004212
 800cbd8:	20004213 	.word	0x20004213
 800cbdc:	20002614 	.word	0x20002614
 800cbe0:	08019914 	.word	0x08019914

0800cbe4 <svl_iplInit>:

/*
 * Function: svl_iplInit
 */
gos_result_t svl_iplInit (void_t)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t initResult = GOS_ERROR;
 800cbea:	23ae      	movs	r3, #174	; 0xae
 800cbec:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    initResult = gos_taskRegister(&svlIplTaskDesc, NULL);
 800cbee:	2100      	movs	r1, #0
 800cbf0:	4804      	ldr	r0, [pc, #16]	; (800cc04 <svl_iplInit+0x20>)
 800cbf2:	f002 fdad 	bl	800f750 <gos_taskRegister>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	71fb      	strb	r3, [r7, #7]

    return initResult;
 800cbfa:	79fb      	ldrb	r3, [r7, #7]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	20000798 	.word	0x20000798

0800cc08 <svl_iplRegisterUserMsg>:

/*
 * Function: svl_iplRegisterUserMsg
 */
gos_result_t svl_iplRegisterUserMsg (svl_iplUserMsgDesc_t* pUserMsgDesc)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t registerResult = GOS_ERROR;
 800cc10:	23ae      	movs	r3, #174	; 0xae
 800cc12:	73fb      	strb	r3, [r7, #15]
	u8_t         lutIndex       = 0u;
 800cc14:	2300      	movs	r3, #0
 800cc16:	73bb      	strb	r3, [r7, #14]

	/*
	 * Function code.
	 */
	if (pUserMsgDesc != NULL)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d01b      	beq.n	800cc56 <svl_iplRegisterUserMsg+0x4e>
	{
		for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800cc1e:	2300      	movs	r3, #0
 800cc20:	73bb      	strb	r3, [r7, #14]
 800cc22:	e015      	b.n	800cc50 <svl_iplRegisterUserMsg+0x48>
		{
			if (userMsgLut[lutIndex].callback == NULL)
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	4a0e      	ldr	r2, [pc, #56]	; (800cc60 <svl_iplRegisterUserMsg+0x58>)
 800cc28:	00db      	lsls	r3, r3, #3
 800cc2a:	4413      	add	r3, r2
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d10b      	bne.n	800cc4a <svl_iplRegisterUserMsg+0x42>
			{
				(void_t) memcpy((void_t*)&userMsgLut[lutIndex], (void_t*)pUserMsgDesc, sizeof(*pUserMsgDesc));
 800cc32:	7bbb      	ldrb	r3, [r7, #14]
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	4a0a      	ldr	r2, [pc, #40]	; (800cc60 <svl_iplRegisterUserMsg+0x58>)
 800cc38:	4413      	add	r3, r2
 800cc3a:	2208      	movs	r2, #8
 800cc3c:	6879      	ldr	r1, [r7, #4]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f009 f90f 	bl	8015e62 <memcpy>
				registerResult = GOS_SUCCESS;
 800cc44:	2355      	movs	r3, #85	; 0x55
 800cc46:	73fb      	strb	r3, [r7, #15]
				break;
 800cc48:	e005      	b.n	800cc56 <svl_iplRegisterUserMsg+0x4e>
		for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800cc4a:	7bbb      	ldrb	r3, [r7, #14]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	73bb      	strb	r3, [r7, #14]
 800cc50:	7bbb      	ldrb	r3, [r7, #14]
 800cc52:	2b07      	cmp	r3, #7
 800cc54:	d9e6      	bls.n	800cc24 <svl_iplRegisterUserMsg+0x1c>
	else
	{
		// NULL pointer.
	}

	return registerResult;
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	2000485c 	.word	0x2000485c

0800cc64 <svl_iplConfigure>:

/*
 * Function: svl_iplConfigure
 */
gos_result_t svl_iplConfigure (svl_iplTransmitFunction transmitFunc, svl_iplReceiveFunction receiveFunc)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
	/*
	 * Local variables.
	 */
	gos_result_t configureResult = GOS_SUCCESS;
 800cc6e:	2355      	movs	r3, #85	; 0x55
 800cc70:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	svl_iplTransmit = transmitFunc;
 800cc72:	4a0e      	ldr	r2, [pc, #56]	; (800ccac <svl_iplConfigure+0x48>)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6013      	str	r3, [r2, #0]
	svl_iplReceive  = receiveFunc;
 800cc78:	4a0d      	ldr	r2, [pc, #52]	; (800ccb0 <svl_iplConfigure+0x4c>)
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	6013      	str	r3, [r2, #0]

	// Set IPL state machine based on NULL pointer check.
	if (svl_iplTransmit != NULL && svl_iplReceive != NULL)
 800cc7e:	4b0b      	ldr	r3, [pc, #44]	; (800ccac <svl_iplConfigure+0x48>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d007      	beq.n	800cc96 <svl_iplConfigure+0x32>
 800cc86:	4b0a      	ldr	r3, [pc, #40]	; (800ccb0 <svl_iplConfigure+0x4c>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <svl_iplConfigure+0x32>
	{
		iplState = SVL_IPL_STATE_DISCOVER_START;
 800cc8e:	4b09      	ldr	r3, [pc, #36]	; (800ccb4 <svl_iplConfigure+0x50>)
 800cc90:	2201      	movs	r2, #1
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	e002      	b.n	800cc9c <svl_iplConfigure+0x38>
	}
	else
	{
		iplState = SVL_IPL_STATE_NOT_CONFIGURED;
 800cc96:	4b07      	ldr	r3, [pc, #28]	; (800ccb4 <svl_iplConfigure+0x50>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	701a      	strb	r2, [r3, #0]
	}

	return configureResult;
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3714      	adds	r7, #20
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	2000489c 	.word	0x2000489c
 800ccb0:	200048a0 	.word	0x200048a0
 800ccb4:	20004214 	.word	0x20004214

0800ccb8 <svl_iplSendMessage>:

/*
 * Function: svl_iplSendMessage
 */
gos_result_t svl_iplSendMessage (u32_t msgId, u8_t* pData, u32_t dataLength)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b08a      	sub	sp, #40	; 0x28
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t       sendResult = GOS_ERROR;
 800ccc4:	23ae      	movs	r3, #174	; 0xae
 800ccc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	svl_iplMsgHeader_t header;

	/*
	 * Function code.
	 */
	header.messageId     = msgId;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	617b      	str	r3, [r7, #20]
	header.messageLength = dataLength;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	61bb      	str	r3, [r7, #24]

	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 800ccd2:	f107 0314 	add.w	r3, r7, #20
 800ccd6:	330c      	adds	r3, #12
 800ccd8:	461a      	mov	r2, r3
 800ccda:	6879      	ldr	r1, [r7, #4]
 800ccdc:	68b8      	ldr	r0, [r7, #8]
 800ccde:	f7fc f8bd 	bl	8008e5c <drv_crcGetCrc32>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b55      	cmp	r3, #85	; 0x55
 800cce6:	d117      	bne.n	800cd18 <svl_iplSendMessage+0x60>
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800cce8:	4b0e      	ldr	r3, [pc, #56]	; (800cd24 <svl_iplSendMessage+0x6c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f107 0014 	add.w	r0, r7, #20
 800ccf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ccf4:	2110      	movs	r1, #16
 800ccf6:	4798      	blx	r3
 800ccf8:	4603      	mov	r3, r0
	if (drv_crcGetCrc32((u8_t*)pData, dataLength, &header.messageCrc) == GOS_SUCCESS &&
 800ccfa:	2b55      	cmp	r3, #85	; 0x55
 800ccfc:	d10c      	bne.n	800cd18 <svl_iplSendMessage+0x60>
		svl_iplTransmit(pData, dataLength, 1000u) == GOS_SUCCESS)
 800ccfe:	4b09      	ldr	r3, [pc, #36]	; (800cd24 <svl_iplSendMessage+0x6c>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd06:	6879      	ldr	r1, [r7, #4]
 800cd08:	68b8      	ldr	r0, [r7, #8]
 800cd0a:	4798      	blx	r3
 800cd0c:	4603      	mov	r3, r0
		svl_iplTransmit((u8_t*)&header, sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800cd0e:	2b55      	cmp	r3, #85	; 0x55
 800cd10:	d102      	bne.n	800cd18 <svl_iplSendMessage+0x60>
	{
		sendResult = GOS_SUCCESS;
 800cd12:	2355      	movs	r3, #85	; 0x55
 800cd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	else
	{
		// Error.
	}

	return sendResult;
 800cd18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3728      	adds	r7, #40	; 0x28
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	2000489c 	.word	0x2000489c

0800cd28 <svl_iplDaemon>:
 * @details Handles IPL state machine and incoming IPL messages.
 *
 * @return  -
 */
GOS_STATIC void_t svl_iplDaemon (void_t)
{
 800cd28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd2a:	b097      	sub	sp, #92	; 0x5c
 800cd2c:	af0e      	add	r7, sp, #56	; 0x38
	/*
	 * Local variables.
	 */
	u8_t lutIndex = 0u;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	77fb      	strb	r3, [r7, #31]

	/*
	 * Function code.
	 */
	// Delay service start.
	(void_t) gos_taskSleep(2000);
 800cd32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cd36:	f002 fe9d 	bl	800fa74 <gos_taskSleep>

	for (;;)
	{
		switch (iplState)
 800cd3a:	4ba7      	ldr	r3, [pc, #668]	; (800cfd8 <svl_iplDaemon+0x2b0>)
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b07      	cmp	r3, #7
 800cd40:	f200 83d5 	bhi.w	800d4ee <svl_iplDaemon+0x7c6>
 800cd44:	a201      	add	r2, pc, #4	; (adr r2, 800cd4c <svl_iplDaemon+0x24>)
 800cd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd4a:	bf00      	nop
 800cd4c:	0800d537 	.word	0x0800d537
 800cd50:	0800cd6d 	.word	0x0800cd6d
 800cd54:	0800cda3 	.word	0x0800cda3
 800cd58:	0800ce6f 	.word	0x0800ce6f
 800cd5c:	0800ce7f 	.word	0x0800ce7f
 800cd60:	0800d029 	.word	0x0800d029
 800cd64:	0800d039 	.word	0x0800d039
 800cd68:	0800d10b 	.word	0x0800d10b
				// Wait until transmit and receive functions are registered.
				break;
			}
			case SVL_IPL_STATE_DISCOVER_START:
			{
				attemptCount++;
 800cd6c:	4b9b      	ldr	r3, [pc, #620]	; (800cfdc <svl_iplDaemon+0x2b4>)
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	3301      	adds	r3, #1
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	4b99      	ldr	r3, [pc, #612]	; (800cfdc <svl_iplDaemon+0x2b4>)
 800cd76:	701a      	strb	r2, [r3, #0]

				if (attemptCount <= SVL_IPL_MAX_ATTEMPTS)
 800cd78:	4b98      	ldr	r3, [pc, #608]	; (800cfdc <svl_iplDaemon+0x2b4>)
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b05      	cmp	r3, #5
 800cd7e:	d807      	bhi.n	800cd90 <svl_iplDaemon+0x68>
				{
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery start...\r\n");
 800cd80:	4997      	ldr	r1, [pc, #604]	; (800cfe0 <svl_iplDaemon+0x2b8>)
 800cd82:	2036      	movs	r0, #54	; 0x36
 800cd84:	f007 fc92 	bl	80146ac <gos_traceTrace>
#endif
					iplState = SVL_IPL_STATE_DISCOVER;
 800cd88:	4b93      	ldr	r3, [pc, #588]	; (800cfd8 <svl_iplDaemon+0x2b0>)
 800cd8a:	2202      	movs	r2, #2
 800cd8c:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSuspend(svlIplTaskDesc.taskId);

					// If task gets resumed externally, restart state-machine.
					attemptCount = 0u;
				}
				break;
 800cd8e:	e3d7      	b.n	800d540 <svl_iplDaemon+0x818>
					(void_t) gos_taskSuspend(svlIplTaskDesc.taskId);
 800cd90:	4b94      	ldr	r3, [pc, #592]	; (800cfe4 <svl_iplDaemon+0x2bc>)
 800cd92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd94:	4618      	mov	r0, r3
 800cd96:	f002 ffb9 	bl	800fd0c <gos_taskSuspend>
					attemptCount = 0u;
 800cd9a:	4b90      	ldr	r3, [pc, #576]	; (800cfdc <svl_iplDaemon+0x2b4>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	701a      	strb	r2, [r3, #0]
				break;
 800cda0:	e3ce      	b.n	800d540 <svl_iplDaemon+0x818>
			}
			case SVL_IPL_STATE_DISCOVER:
			{
				msgHeader.messageId     = IPL_MSG_ID_DISCOVERY;
 800cda2:	4b91      	ldr	r3, [pc, #580]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800cda4:	2201      	movs	r2, #1
 800cda6:	601a      	str	r2, [r3, #0]
				msgHeader.messageLength = sizeof(discoveryMsg);
 800cda8:	4b8f      	ldr	r3, [pc, #572]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800cdaa:	2240      	movs	r2, #64	; 0x40
 800cdac:	605a      	str	r2, [r3, #4]

				(void_t) strcpy(discoveryMsg.masterDeviceId, "STM32F446-0001");
 800cdae:	4a8f      	ldr	r2, [pc, #572]	; (800cfec <svl_iplDaemon+0x2c4>)
 800cdb0:	4b8f      	ldr	r3, [pc, #572]	; (800cff0 <svl_iplDaemon+0x2c8>)
 800cdb2:	4614      	mov	r4, r2
 800cdb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cdb6:	c407      	stmia	r4!, {r0, r1, r2}
 800cdb8:	8023      	strh	r3, [r4, #0]
 800cdba:	3402      	adds	r4, #2
 800cdbc:	0c1b      	lsrs	r3, r3, #16
 800cdbe:	7023      	strb	r3, [r4, #0]
				(void_t) drv_crcGetCrc32((u8_t*)&discoveryMsg, sizeof(discoveryMsg), &msgHeader.messageCrc);
 800cdc0:	4a8c      	ldr	r2, [pc, #560]	; (800cff4 <svl_iplDaemon+0x2cc>)
 800cdc2:	2140      	movs	r1, #64	; 0x40
 800cdc4:	4889      	ldr	r0, [pc, #548]	; (800cfec <svl_iplDaemon+0x2c4>)
 800cdc6:	f7fc f849 	bl	8008e5c <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800cdca:	4b8b      	ldr	r3, [pc, #556]	; (800cff8 <svl_iplDaemon+0x2d0>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2264      	movs	r2, #100	; 0x64
 800cdd0:	2110      	movs	r1, #16
 800cdd2:	4885      	ldr	r0, [pc, #532]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800cdd4:	4798      	blx	r3
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b55      	cmp	r3, #85	; 0x55
 800cdda:	d13c      	bne.n	800ce56 <svl_iplDaemon+0x12e>
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       100u) == GOS_SUCCESS &&
 800cddc:	4b86      	ldr	r3, [pc, #536]	; (800cff8 <svl_iplDaemon+0x2d0>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2264      	movs	r2, #100	; 0x64
 800cde2:	2140      	movs	r1, #64	; 0x40
 800cde4:	4881      	ldr	r0, [pc, #516]	; (800cfec <svl_iplDaemon+0x2c4>)
 800cde6:	4798      	blx	r3
 800cde8:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 100u) == GOS_SUCCESS &&
 800cdea:	2b55      	cmp	r3, #85	; 0x55
 800cdec:	d133      	bne.n	800ce56 <svl_iplDaemon+0x12e>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 800cdee:	4b83      	ldr	r3, [pc, #524]	; (800cffc <svl_iplDaemon+0x2d4>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	22c8      	movs	r2, #200	; 0xc8
 800cdf4:	2110      	movs	r1, #16
 800cdf6:	487c      	ldr	r0, [pc, #496]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800cdf8:	4798      	blx	r3
 800cdfa:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&discoveryMsg, sizeof(discoveryMsg),       100u) == GOS_SUCCESS &&
 800cdfc:	2b55      	cmp	r3, #85	; 0x55
 800cdfe:	d12a      	bne.n	800ce56 <svl_iplDaemon+0x12e>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800ce00:	4b7e      	ldr	r3, [pc, #504]	; (800cffc <svl_iplDaemon+0x2d4>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a78      	ldr	r2, [pc, #480]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800ce06:	6851      	ldr	r1, [r2, #4]
 800ce08:	22c8      	movs	r2, #200	; 0xc8
 800ce0a:	487d      	ldr	r0, [pc, #500]	; (800d000 <svl_iplDaemon+0x2d8>)
 800ce0c:	4798      	blx	r3
 800ce0e:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          200u) == GOS_SUCCESS &&
 800ce10:	2b55      	cmp	r3, #85	; 0x55
 800ce12:	d120      	bne.n	800ce56 <svl_iplDaemon+0x12e>
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 800ce14:	4b74      	ldr	r3, [pc, #464]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800ce16:	681b      	ldr	r3, [r3, #0]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    200u) == GOS_SUCCESS &&
 800ce18:	f640 2201 	movw	r2, #2561	; 0xa01
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d11a      	bne.n	800ce56 <svl_iplDaemon+0x12e>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800ce20:	4b71      	ldr	r3, [pc, #452]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800ce22:	6859      	ldr	r1, [r3, #4]
 800ce24:	4b70      	ldr	r3, [pc, #448]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800ce26:	68da      	ldr	r2, [r3, #12]
 800ce28:	2300      	movs	r3, #0
 800ce2a:	4875      	ldr	r0, [pc, #468]	; (800d000 <svl_iplDaemon+0x2d8>)
 800ce2c:	f7fc f862 	bl	8008ef4 <drv_crcCheckCrc32>
 800ce30:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_DISCOVERY_ACK &&
 800ce32:	2bca      	cmp	r3, #202	; 0xca
 800ce34:	d10f      	bne.n	800ce56 <svl_iplDaemon+0x12e>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&discoveryMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800ce36:	4b6c      	ldr	r3, [pc, #432]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	4970      	ldr	r1, [pc, #448]	; (800d000 <svl_iplDaemon+0x2d8>)
 800ce3e:	486b      	ldr	r0, [pc, #428]	; (800cfec <svl_iplDaemon+0x2c4>)
 800ce40:	f009 f80f 	bl	8015e62 <memcpy>
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL device discovered: %s\r\n", discoveryMsg.slaveDeviceId);
 800ce44:	4a6f      	ldr	r2, [pc, #444]	; (800d004 <svl_iplDaemon+0x2dc>)
 800ce46:	4970      	ldr	r1, [pc, #448]	; (800d008 <svl_iplDaemon+0x2e0>)
 800ce48:	2036      	movs	r0, #54	; 0x36
 800ce4a:	f007 fd4b 	bl	80148e4 <gos_traceTraceFormatted>
#endif
					iplState = SVL_IPL_STATE_CONFIG_START;
 800ce4e:	4b62      	ldr	r3, [pc, #392]	; (800cfd8 <svl_iplDaemon+0x2b0>)
 800ce50:	2203      	movs	r2, #3
 800ce52:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(5000);
				}
				break;
 800ce54:	e374      	b.n	800d540 <svl_iplDaemon+0x818>
					(void_t) gos_traceTrace(GOS_TRUE, "IPL discovery failed.\r\n");
 800ce56:	496d      	ldr	r1, [pc, #436]	; (800d00c <svl_iplDaemon+0x2e4>)
 800ce58:	2036      	movs	r0, #54	; 0x36
 800ce5a:	f007 fc27 	bl	80146ac <gos_traceTrace>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 800ce5e:	4b5e      	ldr	r3, [pc, #376]	; (800cfd8 <svl_iplDaemon+0x2b0>)
 800ce60:	2201      	movs	r2, #1
 800ce62:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(5000);
 800ce64:	f241 3088 	movw	r0, #5000	; 0x1388
 800ce68:	f002 fe04 	bl	800fa74 <gos_taskSleep>
				break;
 800ce6c:	e368      	b.n	800d540 <svl_iplDaemon+0x818>
			}
			case SVL_IPL_STATE_CONFIG_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Configuring device...\r\n");
 800ce6e:	4968      	ldr	r1, [pc, #416]	; (800d010 <svl_iplDaemon+0x2e8>)
 800ce70:	2036      	movs	r0, #54	; 0x36
 800ce72:	f007 fc1b 	bl	80146ac <gos_traceTrace>
#endif
				iplState = SVL_IPL_STATE_CONFIG;
 800ce76:	4b58      	ldr	r3, [pc, #352]	; (800cfd8 <svl_iplDaemon+0x2b0>)
 800ce78:	2204      	movs	r2, #4
 800ce7a:	701a      	strb	r2, [r3, #0]
				break;
 800ce7c:	e360      	b.n	800d540 <svl_iplDaemon+0x818>
			}
			case SVL_IPL_STATE_CONFIG:
			{
				(void_t) svl_pdhGetWifiCfg(&devConfigMsg);
 800ce7e:	4865      	ldr	r0, [pc, #404]	; (800d014 <svl_iplDaemon+0x2ec>)
 800ce80:	f000 fc74 	bl	800d76c <svl_pdhGetWifiCfg>

				msgHeader.messageId     = IPL_MSG_ID_CONFIG;
 800ce84:	4b58      	ldr	r3, [pc, #352]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800ce86:	2211      	movs	r2, #17
 800ce88:	601a      	str	r2, [r3, #0]
				msgHeader.messageLength = sizeof(devConfigMsg);
 800ce8a:	4b57      	ldr	r3, [pc, #348]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800ce8c:	226e      	movs	r2, #110	; 0x6e
 800ce8e:	605a      	str	r2, [r3, #4]

				(void_t) drv_crcGetCrc32((u8_t*)&devConfigMsg, sizeof(devConfigMsg), &msgHeader.messageCrc);
 800ce90:	4a58      	ldr	r2, [pc, #352]	; (800cff4 <svl_iplDaemon+0x2cc>)
 800ce92:	216e      	movs	r1, #110	; 0x6e
 800ce94:	485f      	ldr	r0, [pc, #380]	; (800d014 <svl_iplDaemon+0x2ec>)
 800ce96:	f7fb ffe1 	bl	8008e5c <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800ce9a:	4b57      	ldr	r3, [pc, #348]	; (800cff8 <svl_iplDaemon+0x2d0>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cea2:	2110      	movs	r1, #16
 800cea4:	4850      	ldr	r0, [pc, #320]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800cea6:	4798      	blx	r3
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b55      	cmp	r3, #85	; 0x55
 800ceac:	f040 8087 	bne.w	800cfbe <svl_iplDaemon+0x296>
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       1000u) == GOS_SUCCESS &&
 800ceb0:	4b51      	ldr	r3, [pc, #324]	; (800cff8 <svl_iplDaemon+0x2d0>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ceb8:	216e      	movs	r1, #110	; 0x6e
 800ceba:	4856      	ldr	r0, [pc, #344]	; (800d014 <svl_iplDaemon+0x2ec>)
 800cebc:	4798      	blx	r3
 800cebe:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,    sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800cec0:	2b55      	cmp	r3, #85	; 0x55
 800cec2:	d17c      	bne.n	800cfbe <svl_iplDaemon+0x296>
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          2000u) == GOS_SUCCESS &&
 800cec4:	4b4d      	ldr	r3, [pc, #308]	; (800cffc <svl_iplDaemon+0x2d4>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cecc:	2110      	movs	r1, #16
 800cece:	4846      	ldr	r0, [pc, #280]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800ced0:	4798      	blx	r3
 800ced2:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&devConfigMsg, sizeof(devConfigMsg),       1000u) == GOS_SUCCESS &&
 800ced4:	2b55      	cmp	r3, #85	; 0x55
 800ced6:	d172      	bne.n	800cfbe <svl_iplDaemon+0x296>
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 800ced8:	4b48      	ldr	r3, [pc, #288]	; (800cffc <svl_iplDaemon+0x2d4>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4a42      	ldr	r2, [pc, #264]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800cede:	6851      	ldr	r1, [r2, #4]
 800cee0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800cee4:	4846      	ldr	r0, [pc, #280]	; (800d000 <svl_iplDaemon+0x2d8>)
 800cee6:	4798      	blx	r3
 800cee8:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,     sizeof(msgHeader),          2000u) == GOS_SUCCESS &&
 800ceea:	2b55      	cmp	r3, #85	; 0x55
 800ceec:	d167      	bne.n	800cfbe <svl_iplDaemon+0x296>
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 800ceee:	4b3e      	ldr	r3, [pc, #248]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800cef0:	681b      	ldr	r3, [r3, #0]
					svl_iplReceive(iplRxBuffer,           msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 800cef2:	f640 2211 	movw	r2, #2577	; 0xa11
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d161      	bne.n	800cfbe <svl_iplDaemon+0x296>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800cefa:	4b3b      	ldr	r3, [pc, #236]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800cefc:	6859      	ldr	r1, [r3, #4]
 800cefe:	4b3a      	ldr	r3, [pc, #232]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800cf00:	68da      	ldr	r2, [r3, #12]
 800cf02:	2300      	movs	r3, #0
 800cf04:	483e      	ldr	r0, [pc, #248]	; (800d000 <svl_iplDaemon+0x2d8>)
 800cf06:	f7fb fff5 	bl	8008ef4 <drv_crcCheckCrc32>
 800cf0a:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONFIG_ACK &&
 800cf0c:	2bca      	cmp	r3, #202	; 0xca
 800cf0e:	d156      	bne.n	800cfbe <svl_iplDaemon+0x296>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&receivedDevConfigMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800cf10:	4b35      	ldr	r3, [pc, #212]	; (800cfe8 <svl_iplDaemon+0x2c0>)
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	461a      	mov	r2, r3
 800cf16:	493a      	ldr	r1, [pc, #232]	; (800d000 <svl_iplDaemon+0x2d8>)
 800cf18:	483f      	ldr	r0, [pc, #252]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf1a:	f008 ffa2 	bl	8015e62 <memcpy>
							"Port:      \t%u\r\n"
							"Subnet:    \t%u.%u.%u.%u\r\n"
							"Gateway:   \t%u.%u.%u.%u\r\n",
							receivedDevConfigMsg.ssid,
							receivedDevConfigMsg.pwd,
							receivedDevConfigMsg.ipAddress[0], receivedDevConfigMsg.ipAddress[1],
 800cf1e:	4b3e      	ldr	r3, [pc, #248]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf20:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
					(void_t) gos_traceTraceFormatted(
 800cf24:	461a      	mov	r2, r3
							receivedDevConfigMsg.ipAddress[0], receivedDevConfigMsg.ipAddress[1],
 800cf26:	4b3c      	ldr	r3, [pc, #240]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf28:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
					(void_t) gos_traceTraceFormatted(
 800cf2c:	4619      	mov	r1, r3
							receivedDevConfigMsg.ipAddress[2], receivedDevConfigMsg.ipAddress[3],
 800cf2e:	4b3a      	ldr	r3, [pc, #232]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf30:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
					(void_t) gos_traceTraceFormatted(
 800cf34:	4618      	mov	r0, r3
							receivedDevConfigMsg.ipAddress[2], receivedDevConfigMsg.ipAddress[3],
 800cf36:	4b38      	ldr	r3, [pc, #224]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf38:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
					(void_t) gos_traceTraceFormatted(
 800cf3c:	461c      	mov	r4, r3
							receivedDevConfigMsg.port,
 800cf3e:	4b36      	ldr	r3, [pc, #216]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf40:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
					(void_t) gos_traceTraceFormatted(
 800cf44:	461d      	mov	r5, r3
							receivedDevConfigMsg.subnet[0],  receivedDevConfigMsg.subnet[1],
 800cf46:	4b34      	ldr	r3, [pc, #208]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf48:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
					(void_t) gos_traceTraceFormatted(
 800cf4c:	461e      	mov	r6, r3
							receivedDevConfigMsg.subnet[0],  receivedDevConfigMsg.subnet[1],
 800cf4e:	4b32      	ldr	r3, [pc, #200]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf50:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
					(void_t) gos_traceTraceFormatted(
 800cf54:	617b      	str	r3, [r7, #20]
							receivedDevConfigMsg.subnet[2],  receivedDevConfigMsg.subnet[3],
 800cf56:	4b30      	ldr	r3, [pc, #192]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf58:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
					(void_t) gos_traceTraceFormatted(
 800cf5c:	613b      	str	r3, [r7, #16]
							receivedDevConfigMsg.subnet[2],  receivedDevConfigMsg.subnet[3],
 800cf5e:	4b2e      	ldr	r3, [pc, #184]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf60:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
					(void_t) gos_traceTraceFormatted(
 800cf64:	60fb      	str	r3, [r7, #12]
							receivedDevConfigMsg.gateway[0], receivedDevConfigMsg.gateway[1],
 800cf66:	4b2c      	ldr	r3, [pc, #176]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf68:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
					(void_t) gos_traceTraceFormatted(
 800cf6c:	60bb      	str	r3, [r7, #8]
							receivedDevConfigMsg.gateway[0], receivedDevConfigMsg.gateway[1],
 800cf6e:	4b2a      	ldr	r3, [pc, #168]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf70:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
					(void_t) gos_traceTraceFormatted(
 800cf74:	607b      	str	r3, [r7, #4]
							receivedDevConfigMsg.gateway[2], receivedDevConfigMsg.gateway[3]
 800cf76:	4b28      	ldr	r3, [pc, #160]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf78:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
					(void_t) gos_traceTraceFormatted(
 800cf7c:	603b      	str	r3, [r7, #0]
							receivedDevConfigMsg.gateway[2], receivedDevConfigMsg.gateway[3]
 800cf7e:	4b26      	ldr	r3, [pc, #152]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cf80:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
					(void_t) gos_traceTraceFormatted(
 800cf84:	930c      	str	r3, [sp, #48]	; 0x30
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	930a      	str	r3, [sp, #40]	; 0x28
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	9309      	str	r3, [sp, #36]	; 0x24
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	9308      	str	r3, [sp, #32]
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	9307      	str	r3, [sp, #28]
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	9306      	str	r3, [sp, #24]
 800cf9e:	9605      	str	r6, [sp, #20]
 800cfa0:	9504      	str	r5, [sp, #16]
 800cfa2:	9403      	str	r4, [sp, #12]
 800cfa4:	9002      	str	r0, [sp, #8]
 800cfa6:	9101      	str	r1, [sp, #4]
 800cfa8:	9200      	str	r2, [sp, #0]
 800cfaa:	4b1c      	ldr	r3, [pc, #112]	; (800d01c <svl_iplDaemon+0x2f4>)
 800cfac:	4a1a      	ldr	r2, [pc, #104]	; (800d018 <svl_iplDaemon+0x2f0>)
 800cfae:	491c      	ldr	r1, [pc, #112]	; (800d020 <svl_iplDaemon+0x2f8>)
 800cfb0:	2036      	movs	r0, #54	; 0x36
 800cfb2:	f007 fc97 	bl	80148e4 <gos_traceTraceFormatted>
						);
#endif
					iplState = SVL_IPL_STATE_CONNECT_START;
 800cfb6:	4b08      	ldr	r3, [pc, #32]	; (800cfd8 <svl_iplDaemon+0x2b0>)
 800cfb8:	2205      	movs	r2, #5
 800cfba:	701a      	strb	r2, [r3, #0]
					(void_t) gos_traceTrace(GOS_TRUE, "IPL configuration failed.\r\n");
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
					(void_t) gos_taskSleep(1000);
				}
				break;
 800cfbc:	e2c0      	b.n	800d540 <svl_iplDaemon+0x818>
					(void_t) gos_traceTrace(GOS_TRUE, "IPL configuration failed.\r\n");
 800cfbe:	4919      	ldr	r1, [pc, #100]	; (800d024 <svl_iplDaemon+0x2fc>)
 800cfc0:	2036      	movs	r0, #54	; 0x36
 800cfc2:	f007 fb73 	bl	80146ac <gos_traceTrace>
					iplState = SVL_IPL_STATE_DISCOVER_START;
 800cfc6:	4b04      	ldr	r3, [pc, #16]	; (800cfd8 <svl_iplDaemon+0x2b0>)
 800cfc8:	2201      	movs	r2, #1
 800cfca:	701a      	strb	r2, [r3, #0]
					(void_t) gos_taskSleep(1000);
 800cfcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cfd0:	f002 fd50 	bl	800fa74 <gos_taskSleep>
				break;
 800cfd4:	e2b4      	b.n	800d540 <svl_iplDaemon+0x818>
 800cfd6:	bf00      	nop
 800cfd8:	20004214 	.word	0x20004214
 800cfdc:	200048a4 	.word	0x200048a4
 800cfe0:	08018264 	.word	0x08018264
 800cfe4:	20000798 	.word	0x20000798
 800cfe8:	20004370 	.word	0x20004370
 800cfec:	20004470 	.word	0x20004470
 800cff0:	08018280 	.word	0x08018280
 800cff4:	2000437c 	.word	0x2000437c
 800cff8:	2000489c 	.word	0x2000489c
 800cffc:	200048a0 	.word	0x200048a0
 800d000:	20004218 	.word	0x20004218
 800d004:	20004490 	.word	0x20004490
 800d008:	08018290 	.word	0x08018290
 800d00c:	080182ac 	.word	0x080182ac
 800d010:	080182c4 	.word	0x080182c4
 800d014:	20004390 	.word	0x20004390
 800d018:	20004400 	.word	0x20004400
 800d01c:	20004430 	.word	0x20004430
 800d020:	080182dc 	.word	0x080182dc
 800d024:	0801837c 	.word	0x0801837c
			}
			case SVL_IPL_STATE_CONNECT_START:
			{
#if SVL_IPL_TRACE_LEVEL > 0
				(void_t) gos_traceTrace(GOS_TRUE, "Connecting to network...\r\n");
 800d028:	49a4      	ldr	r1, [pc, #656]	; (800d2bc <svl_iplDaemon+0x594>)
 800d02a:	2036      	movs	r0, #54	; 0x36
 800d02c:	f007 fb3e 	bl	80146ac <gos_traceTrace>
#endif
				iplState = SVL_IPL_STATE_CONNECT;
 800d030:	4ba3      	ldr	r3, [pc, #652]	; (800d2c0 <svl_iplDaemon+0x598>)
 800d032:	2206      	movs	r2, #6
 800d034:	701a      	strb	r2, [r3, #0]
				break;
 800d036:	e283      	b.n	800d540 <svl_iplDaemon+0x818>
			}
			case SVL_IPL_STATE_CONNECT:
			{
				msgHeader.messageId     = IPL_MSG_ID_CONNECT;
 800d038:	4ba2      	ldr	r3, [pc, #648]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d03a:	2221      	movs	r2, #33	; 0x21
 800d03c:	601a      	str	r2, [r3, #0]
				msgHeader.messageLength = sizeof(connectMsg);
 800d03e:	4ba1      	ldr	r3, [pc, #644]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d040:	2201      	movs	r2, #1
 800d042:	605a      	str	r2, [r3, #4]

				(void_t) drv_crcGetCrc32((u8_t*)&connectMsg, sizeof(connectMsg), &msgHeader.messageCrc);
 800d044:	4aa0      	ldr	r2, [pc, #640]	; (800d2c8 <svl_iplDaemon+0x5a0>)
 800d046:	2101      	movs	r1, #1
 800d048:	48a0      	ldr	r0, [pc, #640]	; (800d2cc <svl_iplDaemon+0x5a4>)
 800d04a:	f7fb ff07 	bl	8008e5c <drv_crcGetCrc32>

				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800d04e:	4ba0      	ldr	r3, [pc, #640]	; (800d2d0 <svl_iplDaemon+0x5a8>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d056:	2110      	movs	r1, #16
 800d058:	489a      	ldr	r0, [pc, #616]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d05a:	4798      	blx	r3
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b55      	cmp	r3, #85	; 0x55
 800d060:	d14a      	bne.n	800d0f8 <svl_iplDaemon+0x3d0>
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         1000u) == GOS_SUCCESS &&
 800d062:	4b9b      	ldr	r3, [pc, #620]	; (800d2d0 <svl_iplDaemon+0x5a8>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d06a:	2101      	movs	r1, #1
 800d06c:	4897      	ldr	r0, [pc, #604]	; (800d2cc <svl_iplDaemon+0x5a4>)
 800d06e:	4798      	blx	r3
 800d070:	4603      	mov	r3, r0
				if (svl_iplTransmit((u8_t*)&msgHeader,  sizeof(svl_iplMsgHeader_t), 1000u) == GOS_SUCCESS &&
 800d072:	2b55      	cmp	r3, #85	; 0x55
 800d074:	d140      	bne.n	800d0f8 <svl_iplDaemon+0x3d0>
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),         10000u) == GOS_SUCCESS &&
 800d076:	4b97      	ldr	r3, [pc, #604]	; (800d2d4 <svl_iplDaemon+0x5ac>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f242 7210 	movw	r2, #10000	; 0x2710
 800d07e:	2110      	movs	r1, #16
 800d080:	4890      	ldr	r0, [pc, #576]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d082:	4798      	blx	r3
 800d084:	4603      	mov	r3, r0
					svl_iplTransmit((u8_t*)&connectMsg, sizeof(connectMsg),         1000u) == GOS_SUCCESS &&
 800d086:	2b55      	cmp	r3, #85	; 0x55
 800d088:	d136      	bne.n	800d0f8 <svl_iplDaemon+0x3d0>
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 800d08a:	4b92      	ldr	r3, [pc, #584]	; (800d2d4 <svl_iplDaemon+0x5ac>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a8d      	ldr	r2, [pc, #564]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d090:	6851      	ldr	r1, [r2, #4]
 800d092:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800d096:	4890      	ldr	r0, [pc, #576]	; (800d2d8 <svl_iplDaemon+0x5b0>)
 800d098:	4798      	blx	r3
 800d09a:	4603      	mov	r3, r0
					svl_iplReceive((u8_t*)&msgHeader,   sizeof(msgHeader),         10000u) == GOS_SUCCESS &&
 800d09c:	2b55      	cmp	r3, #85	; 0x55
 800d09e:	d12b      	bne.n	800d0f8 <svl_iplDaemon+0x3d0>
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 800d0a0:	4b88      	ldr	r3, [pc, #544]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
					svl_iplReceive(iplRxBuffer,         msgHeader.messageLength,    2000u) == GOS_SUCCESS &&
 800d0a4:	f640 2221 	movw	r2, #2593	; 0xa21
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d125      	bne.n	800d0f8 <svl_iplDaemon+0x3d0>
					drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800d0ac:	4b85      	ldr	r3, [pc, #532]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d0ae:	6859      	ldr	r1, [r3, #4]
 800d0b0:	4b84      	ldr	r3, [pc, #528]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d0b2:	68da      	ldr	r2, [r3, #12]
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	4888      	ldr	r0, [pc, #544]	; (800d2d8 <svl_iplDaemon+0x5b0>)
 800d0b8:	f7fb ff1c 	bl	8008ef4 <drv_crcCheckCrc32>
 800d0bc:	4603      	mov	r3, r0
					msgHeader.messageId == IPL_MSG_ID_CONNECT_ACK &&
 800d0be:	2bca      	cmp	r3, #202	; 0xca
 800d0c0:	d11a      	bne.n	800d0f8 <svl_iplDaemon+0x3d0>
				{
                    // Convert buffer to received message.
                    (void_t) memcpy((void_t*)&connectResultMsg, (void_t*)iplRxBuffer, msgHeader.messageLength);
 800d0c2:	4b80      	ldr	r3, [pc, #512]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	4983      	ldr	r1, [pc, #524]	; (800d2d8 <svl_iplDaemon+0x5b0>)
 800d0ca:	4884      	ldr	r0, [pc, #528]	; (800d2dc <svl_iplDaemon+0x5b4>)
 800d0cc:	f008 fec9 	bl	8015e62 <memcpy>

					if (connectResultMsg.connectSuccess == GOS_TRUE)
 800d0d0:	4b82      	ldr	r3, [pc, #520]	; (800d2dc <svl_iplDaemon+0x5b4>)
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	2b36      	cmp	r3, #54	; 0x36
 800d0d6:	d107      	bne.n	800d0e8 <svl_iplDaemon+0x3c0>
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Successfully connected to the network.\r\n");
 800d0d8:	4981      	ldr	r1, [pc, #516]	; (800d2e0 <svl_iplDaemon+0x5b8>)
 800d0da:	2036      	movs	r0, #54	; 0x36
 800d0dc:	f007 fae6 	bl	80146ac <gos_traceTrace>
#endif
						iplState = SVL_IPL_STATE_CONNECTED;
 800d0e0:	4b77      	ldr	r3, [pc, #476]	; (800d2c0 <svl_iplDaemon+0x598>)
 800d0e2:	2207      	movs	r2, #7
 800d0e4:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 800d0e6:	e00f      	b.n	800d108 <svl_iplDaemon+0x3e0>
					}
					else
					{
#if SVL_IPL_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "Network connection failed.\r\n");
 800d0e8:	497e      	ldr	r1, [pc, #504]	; (800d2e4 <svl_iplDaemon+0x5bc>)
 800d0ea:	2036      	movs	r0, #54	; 0x36
 800d0ec:	f007 fade 	bl	80146ac <gos_traceTrace>
#endif
						iplState = SVL_IPL_STATE_DISCOVER_START;
 800d0f0:	4b73      	ldr	r3, [pc, #460]	; (800d2c0 <svl_iplDaemon+0x598>)
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	701a      	strb	r2, [r3, #0]
					if (connectResultMsg.connectSuccess == GOS_TRUE)
 800d0f6:	e007      	b.n	800d108 <svl_iplDaemon+0x3e0>
				}
				else
				{
					// No response.
#if SVL_IPL_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "No response was received.\r\n");
 800d0f8:	497b      	ldr	r1, [pc, #492]	; (800d2e8 <svl_iplDaemon+0x5c0>)
 800d0fa:	2036      	movs	r0, #54	; 0x36
 800d0fc:	f007 fad6 	bl	80146ac <gos_traceTrace>
#endif
					iplState = SVL_IPL_STATE_DISCOVER_START;
 800d100:	4b6f      	ldr	r3, [pc, #444]	; (800d2c0 <svl_iplDaemon+0x598>)
 800d102:	2201      	movs	r2, #1
 800d104:	701a      	strb	r2, [r3, #0]
				}

				break;
 800d106:	e21b      	b.n	800d540 <svl_iplDaemon+0x818>
 800d108:	e21a      	b.n	800d540 <svl_iplDaemon+0x818>
			}
			case SVL_IPL_STATE_CONNECTED:
			{
				// Check if there is an incoming request.
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 800d10a:	4b72      	ldr	r3, [pc, #456]	; (800d2d4 <svl_iplDaemon+0x5ac>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f04f 32ff 	mov.w	r2, #4294967295
 800d112:	2110      	movs	r1, #16
 800d114:	486b      	ldr	r0, [pc, #428]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d116:	4798      	blx	r3
 800d118:	4603      	mov	r3, r0
 800d11a:	2b55      	cmp	r3, #85	; 0x55
 800d11c:	f040 820d 	bne.w	800d53a <svl_iplDaemon+0x812>
					svl_iplReceive(iplRxBuffer,       msgHeader.messageLength, 0xFFFFFFFFu) == GOS_SUCCESS)
 800d120:	4b6c      	ldr	r3, [pc, #432]	; (800d2d4 <svl_iplDaemon+0x5ac>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a67      	ldr	r2, [pc, #412]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d126:	6851      	ldr	r1, [r2, #4]
 800d128:	f04f 32ff 	mov.w	r2, #4294967295
 800d12c:	486a      	ldr	r0, [pc, #424]	; (800d2d8 <svl_iplDaemon+0x5b0>)
 800d12e:	4798      	blx	r3
 800d130:	4603      	mov	r3, r0
				if (svl_iplReceive((u8_t*)&msgHeader, sizeof(msgHeader),       0xFFFFFFFFu) == GOS_SUCCESS &&
 800d132:	2b55      	cmp	r3, #85	; 0x55
 800d134:	f040 8201 	bne.w	800d53a <svl_iplDaemon+0x812>
				{
					if (drv_crcCheckCrc32(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc, NULL) == DRV_CRC_CHECK_OK)
 800d138:	4b62      	ldr	r3, [pc, #392]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d13a:	6859      	ldr	r1, [r3, #4]
 800d13c:	4b61      	ldr	r3, [pc, #388]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d13e:	68da      	ldr	r2, [r3, #12]
 800d140:	2300      	movs	r3, #0
 800d142:	4865      	ldr	r0, [pc, #404]	; (800d2d8 <svl_iplDaemon+0x5b0>)
 800d144:	f7fb fed6 	bl	8008ef4 <drv_crcCheckCrc32>
 800d148:	4603      	mov	r3, r0
 800d14a:	2bca      	cmp	r3, #202	; 0xca
 800d14c:	f040 81c9 	bne.w	800d4e2 <svl_iplDaemon+0x7ba>
					{
						switch (msgHeader.messageId)
 800d150:	4b5c      	ldr	r3, [pc, #368]	; (800d2c4 <svl_iplDaemon+0x59c>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2bd1      	cmp	r3, #209	; 0xd1
 800d156:	f000 8131 	beq.w	800d3bc <svl_iplDaemon+0x694>
 800d15a:	2bd1      	cmp	r3, #209	; 0xd1
 800d15c:	f200 81c5 	bhi.w	800d4ea <svl_iplDaemon+0x7c2>
 800d160:	2bc1      	cmp	r3, #193	; 0xc1
 800d162:	f000 8116 	beq.w	800d392 <svl_iplDaemon+0x66a>
 800d166:	2bc1      	cmp	r3, #193	; 0xc1
 800d168:	f200 81bf 	bhi.w	800d4ea <svl_iplDaemon+0x7c2>
 800d16c:	2bb1      	cmp	r3, #177	; 0xb1
 800d16e:	f000 8134 	beq.w	800d3da <svl_iplDaemon+0x6b2>
 800d172:	2bb1      	cmp	r3, #177	; 0xb1
 800d174:	f200 81b9 	bhi.w	800d4ea <svl_iplDaemon+0x7c2>
 800d178:	2ba1      	cmp	r3, #161	; 0xa1
 800d17a:	f000 8114 	beq.w	800d3a6 <svl_iplDaemon+0x67e>
 800d17e:	2ba1      	cmp	r3, #161	; 0xa1
 800d180:	f200 81b3 	bhi.w	800d4ea <svl_iplDaemon+0x7c2>
 800d184:	2b91      	cmp	r3, #145	; 0x91
 800d186:	f000 80fa 	beq.w	800d37e <svl_iplDaemon+0x656>
 800d18a:	2b91      	cmp	r3, #145	; 0x91
 800d18c:	f200 81ad 	bhi.w	800d4ea <svl_iplDaemon+0x7c2>
 800d190:	2b81      	cmp	r3, #129	; 0x81
 800d192:	f000 80bb 	beq.w	800d30c <svl_iplDaemon+0x5e4>
 800d196:	2b81      	cmp	r3, #129	; 0x81
 800d198:	f200 81a7 	bhi.w	800d4ea <svl_iplDaemon+0x7c2>
 800d19c:	2b71      	cmp	r3, #113	; 0x71
 800d19e:	d039      	beq.n	800d214 <svl_iplDaemon+0x4ec>
 800d1a0:	2b71      	cmp	r3, #113	; 0x71
 800d1a2:	f200 81a2 	bhi.w	800d4ea <svl_iplDaemon+0x7c2>
 800d1a6:	2b61      	cmp	r3, #97	; 0x61
 800d1a8:	d02a      	beq.n	800d200 <svl_iplDaemon+0x4d8>
 800d1aa:	2b61      	cmp	r3, #97	; 0x61
 800d1ac:	f200 819d 	bhi.w	800d4ea <svl_iplDaemon+0x7c2>
 800d1b0:	2b51      	cmp	r3, #81	; 0x51
 800d1b2:	d01b      	beq.n	800d1ec <svl_iplDaemon+0x4c4>
 800d1b4:	2b51      	cmp	r3, #81	; 0x51
 800d1b6:	f200 8198 	bhi.w	800d4ea <svl_iplDaemon+0x7c2>
 800d1ba:	2b31      	cmp	r3, #49	; 0x31
 800d1bc:	d002      	beq.n	800d1c4 <svl_iplDaemon+0x49c>
 800d1be:	2b41      	cmp	r3, #65	; 0x41
 800d1c0:	d00d      	beq.n	800d1de <svl_iplDaemon+0x4b6>
								}

								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_MODIFY_ACK, (u8_t*)&taskModifyMsg, sizeof(taskModifyMsg));
								break;
							}
							default: break;
 800d1c2:	e192      	b.n	800d4ea <svl_iplDaemon+0x7c2>
								cpuLoadMsg.cpuLoad = gos_kernelGetCpuUsage();
 800d1c4:	f001 fab2 	bl	800e72c <gos_kernelGetCpuUsage>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	4b47      	ldr	r3, [pc, #284]	; (800d2ec <svl_iplDaemon+0x5c4>)
 800d1ce:	801a      	strh	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_CPU_LOAD_ACK, (u8_t*)&cpuLoadMsg, sizeof(cpuLoadMsg));
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	4946      	ldr	r1, [pc, #280]	; (800d2ec <svl_iplDaemon+0x5c4>)
 800d1d4:	f640 2031 	movw	r0, #2609	; 0xa31
 800d1d8:	f7ff fd6e 	bl	800ccb8 <svl_iplSendMessage>
								break;
 800d1dc:	e186      	b.n	800d4ec <svl_iplDaemon+0x7c4>
								(void_t) gos_taskSleep(2000);
 800d1de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d1e2:	f002 fc47 	bl	800fa74 <gos_taskSleep>
								gos_kernelReset();
 800d1e6:	f001 fab3 	bl	800e750 <gos_kernelReset>
								break;
 800d1ea:	e17f      	b.n	800d4ec <svl_iplDaemon+0x7c4>
								pingMsg.pingResult = SVL_IPL_PING_OK;
 800d1ec:	4b40      	ldr	r3, [pc, #256]	; (800d2f0 <svl_iplDaemon+0x5c8>)
 800d1ee:	2228      	movs	r2, #40	; 0x28
 800d1f0:	701a      	strb	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_PING_ACK, (u8_t*)&pingMsg, sizeof(pingMsg));
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	493e      	ldr	r1, [pc, #248]	; (800d2f0 <svl_iplDaemon+0x5c8>)
 800d1f6:	f640 2051 	movw	r0, #2641	; 0xa51
 800d1fa:	f7ff fd5d 	bl	800ccb8 <svl_iplSendMessage>
								break;
 800d1fe:	e175      	b.n	800d4ec <svl_iplDaemon+0x7c4>
								(void_t) gos_taskGetNumber(&taskNumMsg.taskNumber);
 800d200:	483c      	ldr	r0, [pc, #240]	; (800d2f4 <svl_iplDaemon+0x5cc>)
 800d202:	f003 ffb3 	bl	801116c <gos_taskGetNumber>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_NUM_ACK, (u8_t*)&taskNumMsg, sizeof(taskNumMsg));
 800d206:	2202      	movs	r2, #2
 800d208:	493a      	ldr	r1, [pc, #232]	; (800d2f4 <svl_iplDaemon+0x5cc>)
 800d20a:	f640 2061 	movw	r0, #2657	; 0xa61
 800d20e:	f7ff fd53 	bl	800ccb8 <svl_iplSendMessage>
								break;
 800d212:	e16b      	b.n	800d4ec <svl_iplDaemon+0x7c4>
 800d214:	4b30      	ldr	r3, [pc, #192]	; (800d2d8 <svl_iplDaemon+0x5b0>)
 800d216:	881a      	ldrh	r2, [r3, #0]
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 800d218:	4b37      	ldr	r3, [pc, #220]	; (800d2f8 <svl_iplDaemon+0x5d0>)
 800d21a:	801a      	strh	r2, [r3, #0]
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 800d21c:	4b36      	ldr	r3, [pc, #216]	; (800d2f8 <svl_iplDaemon+0x5d0>)
 800d21e:	881b      	ldrh	r3, [r3, #0]
 800d220:	4936      	ldr	r1, [pc, #216]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d222:	4618      	mov	r0, r3
 800d224:	f003 ff30 	bl	8011088 <gos_taskGetDataByIndex>
								taskDataMsg.taskCpuUsage         = taskData.taskCpuUsage;
 800d228:	4b34      	ldr	r3, [pc, #208]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d22a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d22e:	4b34      	ldr	r3, [pc, #208]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d230:	875a      	strh	r2, [r3, #58]	; 0x3a
								taskDataMsg.taskCpuUsageLimit    = taskData.taskCpuUsageLimit;
 800d232:	4b32      	ldr	r3, [pc, #200]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d234:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d238:	4b31      	ldr	r3, [pc, #196]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d23a:	86da      	strh	r2, [r3, #54]	; 0x36
								taskDataMsg.taskCpuUsageMax      = taskData.taskCpuUsageMax;
 800d23c:	4b2f      	ldr	r3, [pc, #188]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d23e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d242:	4b2f      	ldr	r3, [pc, #188]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d244:	871a      	strh	r2, [r3, #56]	; 0x38
								taskDataMsg.taskCsCounter        = taskData.taskCsCounter;
 800d246:	4b2d      	ldr	r3, [pc, #180]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d24a:	4a2d      	ldr	r2, [pc, #180]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d24c:	f8c2 3027 	str.w	r3, [r2, #39]	; 0x27
								taskDataMsg.taskId               = taskData.taskId;
 800d250:	4b2a      	ldr	r3, [pc, #168]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d252:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d254:	4b2a      	ldr	r3, [pc, #168]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d256:	f8a3 2025 	strh.w	r2, [r3, #37]	; 0x25
								(void_t) strcpy(taskDataMsg.taskName, taskData.taskName);
 800d25a:	492a      	ldr	r1, [pc, #168]	; (800d304 <svl_iplDaemon+0x5dc>)
 800d25c:	482a      	ldr	r0, [pc, #168]	; (800d308 <svl_iplDaemon+0x5e0>)
 800d25e:	f008 fdf8 	bl	8015e52 <strcpy>
								taskDataMsg.taskOriginalPriority = taskData.taskOriginalPriority;
 800d262:	4b26      	ldr	r3, [pc, #152]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d264:	79da      	ldrb	r2, [r3, #7]
 800d266:	4b26      	ldr	r3, [pc, #152]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d268:	709a      	strb	r2, [r3, #2]
								taskDataMsg.taskPriority         = taskData.taskPriority;
 800d26a:	4b24      	ldr	r3, [pc, #144]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d26c:	799a      	ldrb	r2, [r3, #6]
 800d26e:	4b24      	ldr	r3, [pc, #144]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d270:	705a      	strb	r2, [r3, #1]
								taskDataMsg.taskPrivilegeLevel   = taskData.taskPrivilegeLevel;
 800d272:	4b22      	ldr	r3, [pc, #136]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d274:	891a      	ldrh	r2, [r3, #8]
 800d276:	4b22      	ldr	r3, [pc, #136]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d278:	f8a3 2003 	strh.w	r2, [r3, #3]
								(void_t) memcpy(&taskDataMsg.taskRunTime, &taskData.taskRunTime, sizeof(taskData.taskRunTime));
 800d27c:	4a20      	ldr	r2, [pc, #128]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d27e:	4b1f      	ldr	r3, [pc, #124]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d280:	322d      	adds	r2, #45	; 0x2d
 800d282:	334c      	adds	r3, #76	; 0x4c
 800d284:	cb03      	ldmia	r3!, {r0, r1}
 800d286:	6010      	str	r0, [r2, #0]
 800d288:	6051      	str	r1, [r2, #4]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	7213      	strb	r3, [r2, #8]
								taskDataMsg.taskStackMaxUsage    = taskData.taskStackSizeMaxUsage;
 800d28e:	4b1b      	ldr	r3, [pc, #108]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d290:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d294:	4b1a      	ldr	r3, [pc, #104]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d296:	879a      	strh	r2, [r3, #60]	; 0x3c
								taskDataMsg.taskStackSize        = taskData.taskStackSize;
 800d298:	4b18      	ldr	r3, [pc, #96]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d29a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d29e:	4b18      	ldr	r3, [pc, #96]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d2a0:	f8a3 202b 	strh.w	r2, [r3, #43]	; 0x2b
								taskDataMsg.taskState            = taskData.taskState;
 800d2a4:	4b15      	ldr	r3, [pc, #84]	; (800d2fc <svl_iplDaemon+0x5d4>)
 800d2a6:	791a      	ldrb	r2, [r3, #4]
 800d2a8:	4b15      	ldr	r3, [pc, #84]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d2aa:	701a      	strb	r2, [r3, #0]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_DATA_ACK, (u8_t*)&taskDataMsg, sizeof(taskDataMsg));
 800d2ac:	223e      	movs	r2, #62	; 0x3e
 800d2ae:	4914      	ldr	r1, [pc, #80]	; (800d300 <svl_iplDaemon+0x5d8>)
 800d2b0:	f640 2071 	movw	r0, #2673	; 0xa71
 800d2b4:	f7ff fd00 	bl	800ccb8 <svl_iplSendMessage>
								break;
 800d2b8:	e118      	b.n	800d4ec <svl_iplDaemon+0x7c4>
 800d2ba:	bf00      	nop
 800d2bc:	08018398 	.word	0x08018398
 800d2c0:	20004214 	.word	0x20004214
 800d2c4:	20004370 	.word	0x20004370
 800d2c8:	2000437c 	.word	0x2000437c
 800d2cc:	20004380 	.word	0x20004380
 800d2d0:	2000489c 	.word	0x2000489c
 800d2d4:	200048a0 	.word	0x200048a0
 800d2d8:	20004218 	.word	0x20004218
 800d2dc:	20004384 	.word	0x20004384
 800d2e0:	080183b4 	.word	0x080183b4
 800d2e4:	080183e0 	.word	0x080183e0
 800d2e8:	08018400 	.word	0x08018400
 800d2ec:	2000436c 	.word	0x2000436c
 800d2f0:	20004388 	.word	0x20004388
 800d2f4:	2000438c 	.word	0x2000438c
 800d2f8:	20004304 	.word	0x20004304
 800d2fc:	20004298 	.word	0x20004298
 800d300:	2000432c 	.word	0x2000432c
 800d304:	200042a2 	.word	0x200042a2
 800d308:	20004331 	.word	0x20004331
 800d30c:	4b8f      	ldr	r3, [pc, #572]	; (800d54c <svl_iplDaemon+0x824>)
 800d30e:	881a      	ldrh	r2, [r3, #0]
								(void_t) memcpy((void_t*)&taskDataGetMsg, (void_t*)iplRxBuffer, sizeof(taskDataGetMsg));
 800d310:	4b8f      	ldr	r3, [pc, #572]	; (800d550 <svl_iplDaemon+0x828>)
 800d312:	801a      	strh	r2, [r3, #0]
								(void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIdx, &taskData);
 800d314:	4b8e      	ldr	r3, [pc, #568]	; (800d550 <svl_iplDaemon+0x828>)
 800d316:	881b      	ldrh	r3, [r3, #0]
 800d318:	498e      	ldr	r1, [pc, #568]	; (800d554 <svl_iplDaemon+0x82c>)
 800d31a:	4618      	mov	r0, r3
 800d31c:	f003 feb4 	bl	8011088 <gos_taskGetDataByIndex>
								taskVarDataMsg.taskStackMaxUsage = taskData.taskStackSizeMaxUsage;
 800d320:	4b8c      	ldr	r3, [pc, #560]	; (800d554 <svl_iplDaemon+0x82c>)
 800d322:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d326:	4b8c      	ldr	r3, [pc, #560]	; (800d558 <svl_iplDaemon+0x830>)
 800d328:	f8a3 2013 	strh.w	r2, [r3, #19]
								taskVarDataMsg.taskCpuUsage      = taskData.taskCpuUsage;
 800d32c:	4b89      	ldr	r3, [pc, #548]	; (800d554 <svl_iplDaemon+0x82c>)
 800d32e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d332:	4b89      	ldr	r3, [pc, #548]	; (800d558 <svl_iplDaemon+0x830>)
 800d334:	f8a3 2011 	strh.w	r2, [r3, #17]
								taskVarDataMsg.taskCpuUsageMax   = taskData.taskCpuUsageMax;
 800d338:	4b86      	ldr	r3, [pc, #536]	; (800d554 <svl_iplDaemon+0x82c>)
 800d33a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d33e:	4b86      	ldr	r3, [pc, #536]	; (800d558 <svl_iplDaemon+0x830>)
 800d340:	f8a3 200f 	strh.w	r2, [r3, #15]
								taskVarDataMsg.taskPriority      = taskData.taskPriority;
 800d344:	4b83      	ldr	r3, [pc, #524]	; (800d554 <svl_iplDaemon+0x82c>)
 800d346:	799a      	ldrb	r2, [r3, #6]
 800d348:	4b83      	ldr	r3, [pc, #524]	; (800d558 <svl_iplDaemon+0x830>)
 800d34a:	705a      	strb	r2, [r3, #1]
								taskVarDataMsg.taskCsCounter     = taskData.taskCsCounter;
 800d34c:	4b81      	ldr	r3, [pc, #516]	; (800d554 <svl_iplDaemon+0x82c>)
 800d34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d350:	4a81      	ldr	r2, [pc, #516]	; (800d558 <svl_iplDaemon+0x830>)
 800d352:	f8c2 3002 	str.w	r3, [r2, #2]
			                    taskVarDataMsg.taskState         = taskData.taskState;
 800d356:	4b7f      	ldr	r3, [pc, #508]	; (800d554 <svl_iplDaemon+0x82c>)
 800d358:	791a      	ldrb	r2, [r3, #4]
 800d35a:	4b7f      	ldr	r3, [pc, #508]	; (800d558 <svl_iplDaemon+0x830>)
 800d35c:	701a      	strb	r2, [r3, #0]
			                    (void_t) memcpy((void_t*)&taskVarDataMsg.taskRunTime, (void_t*)&taskData.taskRunTime, sizeof(taskData.taskRunTime));
 800d35e:	4a7e      	ldr	r2, [pc, #504]	; (800d558 <svl_iplDaemon+0x830>)
 800d360:	4b7c      	ldr	r3, [pc, #496]	; (800d554 <svl_iplDaemon+0x82c>)
 800d362:	3206      	adds	r2, #6
 800d364:	334c      	adds	r3, #76	; 0x4c
 800d366:	cb03      	ldmia	r3!, {r0, r1}
 800d368:	6010      	str	r0, [r2, #0]
 800d36a:	6051      	str	r1, [r2, #4]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	7213      	strb	r3, [r2, #8]
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_VAR_DATA_ACK, (u8_t*)&taskVarDataMsg, sizeof(taskVarDataMsg));
 800d370:	2215      	movs	r2, #21
 800d372:	4979      	ldr	r1, [pc, #484]	; (800d558 <svl_iplDaemon+0x830>)
 800d374:	f640 2081 	movw	r0, #2689	; 0xa81
 800d378:	f7ff fc9e 	bl	800ccb8 <svl_iplSendMessage>
								break;
 800d37c:	e0b6      	b.n	800d4ec <svl_iplDaemon+0x7c4>
								(void_t) gos_runTimeGet(&runTimeMsg.sysRunTime);
 800d37e:	4877      	ldr	r0, [pc, #476]	; (800d55c <svl_iplDaemon+0x834>)
 800d380:	f006 fe4a 	bl	8014018 <gos_runTimeGet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_RUNTIME_ACK, (u8_t*)&runTimeMsg, sizeof(runTimeMsg));
 800d384:	2209      	movs	r2, #9
 800d386:	4975      	ldr	r1, [pc, #468]	; (800d55c <svl_iplDaemon+0x834>)
 800d388:	f640 2091 	movw	r0, #2705	; 0xa91
 800d38c:	f7ff fc94 	bl	800ccb8 <svl_iplSendMessage>
								break;
 800d390:	e0ac      	b.n	800d4ec <svl_iplDaemon+0x7c4>
								(void_t) svl_pdhGetHwInfo(&hwInfoMsg);
 800d392:	4873      	ldr	r0, [pc, #460]	; (800d560 <svl_iplDaemon+0x838>)
 800d394:	f000 f9ca 	bl	800d72c <svl_pdhGetHwInfo>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_HWINFO_ACK, (u8_t*)&hwInfoMsg, sizeof(hwInfoMsg));
 800d398:	22fa      	movs	r2, #250	; 0xfa
 800d39a:	4971      	ldr	r1, [pc, #452]	; (800d560 <svl_iplDaemon+0x838>)
 800d39c:	f640 20c1 	movw	r0, #2753	; 0xac1
 800d3a0:	f7ff fc8a 	bl	800ccb8 <svl_iplSendMessage>
								break;
 800d3a4:	e0a2      	b.n	800d4ec <svl_iplDaemon+0x7c4>
								(void_t) svl_pdhGetSwInfo(&swInfoMsg);
 800d3a6:	486f      	ldr	r0, [pc, #444]	; (800d564 <svl_iplDaemon+0x83c>)
 800d3a8:	f000 f9a0 	bl	800d6ec <svl_pdhGetSwInfo>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SWINFO_ACK, (u8_t*)&swInfoMsg, sizeof(swInfoMsg));
 800d3ac:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800d3b0:	496c      	ldr	r1, [pc, #432]	; (800d564 <svl_iplDaemon+0x83c>)
 800d3b2:	f640 20a1 	movw	r0, #2721	; 0xaa1
 800d3b6:	f7ff fc7f 	bl	800ccb8 <svl_iplSendMessage>
								break;
 800d3ba:	e097      	b.n	800d4ec <svl_iplDaemon+0x7c4>
								(void_t) memcpy((void_t*)&sysTimeSetMsg, (void_t*)iplRxBuffer, sizeof(sysTimeSetMsg));
 800d3bc:	4b6a      	ldr	r3, [pc, #424]	; (800d568 <svl_iplDaemon+0x840>)
 800d3be:	4a63      	ldr	r2, [pc, #396]	; (800d54c <svl_iplDaemon+0x824>)
 800d3c0:	ca07      	ldmia	r2, {r0, r1, r2}
 800d3c2:	c303      	stmia	r3!, {r0, r1}
 800d3c4:	801a      	strh	r2, [r3, #0]
								(void_t) gos_timeSet(&sysTimeSetMsg.desiredSystemTime);
 800d3c6:	4868      	ldr	r0, [pc, #416]	; (800d568 <svl_iplDaemon+0x840>)
 800d3c8:	f006 fe0a 	bl	8013fe0 <gos_timeSet>
								(void_t) svl_iplSendMessage(IPL_MSG_ID_SYNC_TIME_ACK, (u8_t*)&sysTimeSetMsg, sizeof(sysTimeSetMsg));
 800d3cc:	220a      	movs	r2, #10
 800d3ce:	4966      	ldr	r1, [pc, #408]	; (800d568 <svl_iplDaemon+0x840>)
 800d3d0:	f640 20d1 	movw	r0, #2769	; 0xad1
 800d3d4:	f7ff fc70 	bl	800ccb8 <svl_iplSendMessage>
								break;
 800d3d8:	e088      	b.n	800d4ec <svl_iplDaemon+0x7c4>
 800d3da:	4b5c      	ldr	r3, [pc, #368]	; (800d54c <svl_iplDaemon+0x824>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
								(void_t) memcpy((void_t*)&taskModifyMsg, (void_t*)iplRxBuffer, sizeof(taskModifyMsg));
 800d3de:	4a63      	ldr	r2, [pc, #396]	; (800d56c <svl_iplDaemon+0x844>)
 800d3e0:	6013      	str	r3, [r2, #0]
								(void_t) gos_taskGetDataByIndex(taskModifyMsg.taskIdx, &taskData);
 800d3e2:	4b62      	ldr	r3, [pc, #392]	; (800d56c <svl_iplDaemon+0x844>)
 800d3e4:	881b      	ldrh	r3, [r3, #0]
 800d3e6:	495b      	ldr	r1, [pc, #364]	; (800d554 <svl_iplDaemon+0x82c>)
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f003 fe4d 	bl	8011088 <gos_taskGetDataByIndex>
								switch (taskModifyMsg.modificationType)
 800d3ee:	4b5f      	ldr	r3, [pc, #380]	; (800d56c <svl_iplDaemon+0x844>)
 800d3f0:	789b      	ldrb	r3, [r3, #2]
 800d3f2:	2b05      	cmp	r3, #5
 800d3f4:	d86a      	bhi.n	800d4cc <svl_iplDaemon+0x7a4>
 800d3f6:	a201      	add	r2, pc, #4	; (adr r2, 800d3fc <svl_iplDaemon+0x6d4>)
 800d3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fc:	0800d415 	.word	0x0800d415
 800d400:	0800d433 	.word	0x0800d433
 800d404:	0800d451 	.word	0x0800d451
 800d408:	0800d46f 	.word	0x0800d46f
 800d40c:	0800d491 	.word	0x0800d491
 800d410:	0800d4af 	.word	0x0800d4af
										taskModifyMsg.result = gos_taskSuspend(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800d414:	4b4f      	ldr	r3, [pc, #316]	; (800d554 <svl_iplDaemon+0x82c>)
 800d416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d418:	4618      	mov	r0, r3
 800d41a:	f002 fc77 	bl	800fd0c <gos_taskSuspend>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b55      	cmp	r3, #85	; 0x55
 800d422:	bf0c      	ite	eq
 800d424:	2301      	moveq	r3, #1
 800d426:	2300      	movne	r3, #0
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	461a      	mov	r2, r3
 800d42c:	4b4f      	ldr	r3, [pc, #316]	; (800d56c <svl_iplDaemon+0x844>)
 800d42e:	70da      	strb	r2, [r3, #3]
										break;
 800d430:	e050      	b.n	800d4d4 <svl_iplDaemon+0x7ac>
										taskModifyMsg.result = gos_taskResume(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800d432:	4b48      	ldr	r3, [pc, #288]	; (800d554 <svl_iplDaemon+0x82c>)
 800d434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d436:	4618      	mov	r0, r3
 800d438:	f002 fd8a 	bl	800ff50 <gos_taskResume>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b55      	cmp	r3, #85	; 0x55
 800d440:	bf0c      	ite	eq
 800d442:	2301      	moveq	r3, #1
 800d444:	2300      	movne	r3, #0
 800d446:	b2db      	uxtb	r3, r3
 800d448:	461a      	mov	r2, r3
 800d44a:	4b48      	ldr	r3, [pc, #288]	; (800d56c <svl_iplDaemon+0x844>)
 800d44c:	70da      	strb	r2, [r3, #3]
										break;
 800d44e:	e041      	b.n	800d4d4 <svl_iplDaemon+0x7ac>
										taskModifyMsg.result = gos_taskDelete(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800d450:	4b40      	ldr	r3, [pc, #256]	; (800d554 <svl_iplDaemon+0x82c>)
 800d452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d454:	4618      	mov	r0, r3
 800d456:	f003 f825 	bl	80104a4 <gos_taskDelete>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b55      	cmp	r3, #85	; 0x55
 800d45e:	bf0c      	ite	eq
 800d460:	2301      	moveq	r3, #1
 800d462:	2300      	movne	r3, #0
 800d464:	b2db      	uxtb	r3, r3
 800d466:	461a      	mov	r2, r3
 800d468:	4b40      	ldr	r3, [pc, #256]	; (800d56c <svl_iplDaemon+0x844>)
 800d46a:	70da      	strb	r2, [r3, #3]
										break;
 800d46c:	e032      	b.n	800d4d4 <svl_iplDaemon+0x7ac>
										taskModifyMsg.result = gos_taskBlock(taskData.taskId, GOS_TASK_MAX_BLOCK_TIME_MS) == GOS_SUCCESS ? 1 : 0;
 800d46e:	4b39      	ldr	r3, [pc, #228]	; (800d554 <svl_iplDaemon+0x82c>)
 800d470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d472:	f04f 31ff 	mov.w	r1, #4294967295
 800d476:	4618      	mov	r0, r3
 800d478:	f002 fe18 	bl	80100ac <gos_taskBlock>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b55      	cmp	r3, #85	; 0x55
 800d480:	bf0c      	ite	eq
 800d482:	2301      	moveq	r3, #1
 800d484:	2300      	movne	r3, #0
 800d486:	b2db      	uxtb	r3, r3
 800d488:	461a      	mov	r2, r3
 800d48a:	4b38      	ldr	r3, [pc, #224]	; (800d56c <svl_iplDaemon+0x844>)
 800d48c:	70da      	strb	r2, [r3, #3]
										break;
 800d48e:	e021      	b.n	800d4d4 <svl_iplDaemon+0x7ac>
										taskModifyMsg.result = gos_taskUnblock(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800d490:	4b30      	ldr	r3, [pc, #192]	; (800d554 <svl_iplDaemon+0x82c>)
 800d492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d494:	4618      	mov	r0, r3
 800d496:	f002 ff1b 	bl	80102d0 <gos_taskUnblock>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b55      	cmp	r3, #85	; 0x55
 800d49e:	bf0c      	ite	eq
 800d4a0:	2301      	moveq	r3, #1
 800d4a2:	2300      	movne	r3, #0
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	4b30      	ldr	r3, [pc, #192]	; (800d56c <svl_iplDaemon+0x844>)
 800d4aa:	70da      	strb	r2, [r3, #3]
										break;
 800d4ac:	e012      	b.n	800d4d4 <svl_iplDaemon+0x7ac>
										taskModifyMsg.result = gos_taskWakeup(taskData.taskId) == GOS_SUCCESS ? 1 : 0;
 800d4ae:	4b29      	ldr	r3, [pc, #164]	; (800d554 <svl_iplDaemon+0x82c>)
 800d4b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f002 fb64 	bl	800fb80 <gos_taskWakeup>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b55      	cmp	r3, #85	; 0x55
 800d4bc:	bf0c      	ite	eq
 800d4be:	2301      	moveq	r3, #1
 800d4c0:	2300      	movne	r3, #0
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	4b29      	ldr	r3, [pc, #164]	; (800d56c <svl_iplDaemon+0x844>)
 800d4c8:	70da      	strb	r2, [r3, #3]
										break;
 800d4ca:	e003      	b.n	800d4d4 <svl_iplDaemon+0x7ac>
										taskModifyMsg.result = 0;
 800d4cc:	4b27      	ldr	r3, [pc, #156]	; (800d56c <svl_iplDaemon+0x844>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	70da      	strb	r2, [r3, #3]
										break;
 800d4d2:	bf00      	nop
								(void_t) svl_iplSendMessage(IPL_MSG_ID_TASK_MODIFY_ACK, (u8_t*)&taskModifyMsg, sizeof(taskModifyMsg));
 800d4d4:	2204      	movs	r2, #4
 800d4d6:	4925      	ldr	r1, [pc, #148]	; (800d56c <svl_iplDaemon+0x844>)
 800d4d8:	f640 20b1 	movw	r0, #2737	; 0xab1
 800d4dc:	f7ff fbec 	bl	800ccb8 <svl_iplSendMessage>
								break;
 800d4e0:	e004      	b.n	800d4ec <svl_iplDaemon+0x7c4>
						}
					}
					else
					{
						(void_t) gos_taskSleep(10);
 800d4e2:	200a      	movs	r0, #10
 800d4e4:	f002 fac6 	bl	800fa74 <gos_taskSleep>
					}
				}
				break;
 800d4e8:	e027      	b.n	800d53a <svl_iplDaemon+0x812>
							default: break;
 800d4ea:	bf00      	nop
				break;
 800d4ec:	e025      	b.n	800d53a <svl_iplDaemon+0x812>
			default:
			{
#if SVL_IPL_TRACE_LEVEL == 2
				(void_t) gos_traceTraceFormatted(GOS_TRUE, "IPL request received with ID: %u.\r\n", msgHeader.messageId);
#endif
				for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	77fb      	strb	r3, [r7, #31]
 800d4f2:	e01c      	b.n	800d52e <svl_iplDaemon+0x806>
				{
					if (userMsgLut[lutIndex].callback == NULL)
 800d4f4:	7ffb      	ldrb	r3, [r7, #31]
 800d4f6:	4a1e      	ldr	r2, [pc, #120]	; (800d570 <svl_iplDaemon+0x848>)
 800d4f8:	00db      	lsls	r3, r3, #3
 800d4fa:	4413      	add	r3, r2
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d01d      	beq.n	800d53e <svl_iplDaemon+0x816>
						// Last registered message found, break loop.
						break;
					}
					else
					{
						if (userMsgLut[lutIndex].msgId == msgHeader.messageId)
 800d502:	7ffb      	ldrb	r3, [r7, #31]
 800d504:	4a1a      	ldr	r2, [pc, #104]	; (800d570 <svl_iplDaemon+0x848>)
 800d506:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d50a:	4b1a      	ldr	r3, [pc, #104]	; (800d574 <svl_iplDaemon+0x84c>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d10a      	bne.n	800d528 <svl_iplDaemon+0x800>
						{
							userMsgLut[lutIndex].callback(iplRxBuffer, msgHeader.messageLength, msgHeader.messageCrc);
 800d512:	7ffb      	ldrb	r3, [r7, #31]
 800d514:	4a16      	ldr	r2, [pc, #88]	; (800d570 <svl_iplDaemon+0x848>)
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	4413      	add	r3, r2
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	4a15      	ldr	r2, [pc, #84]	; (800d574 <svl_iplDaemon+0x84c>)
 800d51e:	6851      	ldr	r1, [r2, #4]
 800d520:	4a14      	ldr	r2, [pc, #80]	; (800d574 <svl_iplDaemon+0x84c>)
 800d522:	68d2      	ldr	r2, [r2, #12]
 800d524:	4809      	ldr	r0, [pc, #36]	; (800d54c <svl_iplDaemon+0x824>)
 800d526:	4798      	blx	r3
				for (lutIndex = 0u; lutIndex < SVL_IPL_USER_MSG_CALLBACK_MAX_NUM; lutIndex++)
 800d528:	7ffb      	ldrb	r3, [r7, #31]
 800d52a:	3301      	adds	r3, #1
 800d52c:	77fb      	strb	r3, [r7, #31]
 800d52e:	7ffb      	ldrb	r3, [r7, #31]
 800d530:	2b07      	cmp	r3, #7
 800d532:	d9df      	bls.n	800d4f4 <svl_iplDaemon+0x7cc>
 800d534:	e004      	b.n	800d540 <svl_iplDaemon+0x818>
				break;
 800d536:	bf00      	nop
 800d538:	e002      	b.n	800d540 <svl_iplDaemon+0x818>
				break;
 800d53a:	bf00      	nop
 800d53c:	e000      	b.n	800d540 <svl_iplDaemon+0x818>
						break;
 800d53e:	bf00      	nop
						}
					}
				}
			}
		}
		(void_t) gos_taskSleep(10);
 800d540:	200a      	movs	r0, #10
 800d542:	f002 fa97 	bl	800fa74 <gos_taskSleep>
		switch (iplState)
 800d546:	f7ff bbf8 	b.w	800cd3a <svl_iplDaemon+0x12>
 800d54a:	bf00      	nop
 800d54c:	20004218 	.word	0x20004218
 800d550:	20004304 	.word	0x20004304
 800d554:	20004298 	.word	0x20004298
 800d558:	20004308 	.word	0x20004308
 800d55c:	20004320 	.word	0x20004320
 800d560:	200044b0 	.word	0x200044b0
 800d564:	200045ac 	.word	0x200045ac
 800d568:	20004850 	.word	0x20004850
 800d56c:	2000484c 	.word	0x2000484c
 800d570:	2000485c 	.word	0x2000485c
 800d574:	20004370 	.word	0x20004370

0800d578 <svl_pdhInit>:

/*
 * Function: svl_pdhInit
 */
gos_result_t svl_pdhInit (void_t)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 800d57e:	23ae      	movs	r3, #174	; 0xae
 800d580:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	initResult = gos_sysmonRegisterUserMessage(&softwareInfoReqMsg);
 800d582:	480b      	ldr	r0, [pc, #44]	; (800d5b0 <svl_pdhInit+0x38>)
 800d584:	f006 f8ba 	bl	80136fc <gos_sysmonRegisterUserMessage>
 800d588:	4603      	mov	r3, r0
 800d58a:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&hardwareInfoReqMsg);
 800d58c:	4809      	ldr	r0, [pc, #36]	; (800d5b4 <svl_pdhInit+0x3c>)
 800d58e:	f006 f8b5 	bl	80136fc <gos_sysmonRegisterUserMessage>
 800d592:	4603      	mov	r3, r0
 800d594:	461a      	mov	r2, r3
 800d596:	79fb      	ldrb	r3, [r7, #7]
 800d598:	4013      	ands	r3, r2
 800d59a:	71fb      	strb	r3, [r7, #7]

	if (initResult != GOS_SUCCESS)
 800d59c:	79fb      	ldrb	r3, [r7, #7]
 800d59e:	2b55      	cmp	r3, #85	; 0x55
 800d5a0:	d001      	beq.n	800d5a6 <svl_pdhInit+0x2e>
	{
		initResult = GOS_ERROR;
 800d5a2:	23ae      	movs	r3, #174	; 0xae
 800d5a4:	71fb      	strb	r3, [r7, #7]
	else
	{
		// OK.
	}

	return initResult;
 800d5a6:	79fb      	ldrb	r3, [r7, #7]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	20000804 	.word	0x20000804
 800d5b4:	20000814 	.word	0x20000814

0800d5b8 <svl_pdhConfigure>:

/*
 * Function: svl_pdhConfigure
 */
gos_result_t svl_pdhConfigure (svl_pdhCfg_t* pCfg)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t cfgResult = GOS_ERROR;
 800d5c0:	23ae      	movs	r3, #174	; 0xae
 800d5c2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d011      	beq.n	800d5ee <svl_pdhConfigure+0x36>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00d      	beq.n	800d5ee <svl_pdhConfigure+0x36>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d009      	beq.n	800d5ee <svl_pdhConfigure+0x36>
	{
		pdhReadFunction  = pCfg->readFunction;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a07      	ldr	r2, [pc, #28]	; (800d5fc <svl_pdhConfigure+0x44>)
 800d5e0:	6013      	str	r3, [r2, #0]
		pdhWriteFunction = pCfg->writeFunction;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	4a06      	ldr	r2, [pc, #24]	; (800d600 <svl_pdhConfigure+0x48>)
 800d5e8:	6013      	str	r3, [r2, #0]
		cfgResult        = GOS_SUCCESS;
 800d5ea:	2355      	movs	r3, #85	; 0x55
 800d5ec:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return cfgResult;
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3714      	adds	r7, #20
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr
 800d5fc:	200048a8 	.word	0x200048a8
 800d600:	200048ac 	.word	0x200048ac

0800d604 <svl_pdhGetLibVersion>:

/*
 * Function: svl_pdhGetLibVersion
 */
gos_result_t svl_pdhGetLibVersion (svl_pdhSwVerInfo_t* pLibVer)
{
 800d604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800d60c:	23ae      	movs	r3, #174	; 0xae
 800d60e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pLibVer != NULL && pdhReadFunction != NULL)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d05b      	beq.n	800d6ce <svl_pdhGetLibVersion+0xca>
 800d616:	4b31      	ldr	r3, [pc, #196]	; (800d6dc <svl_pdhGetLibVersion+0xd8>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d057      	beq.n	800d6ce <svl_pdhGetLibVersion+0xca>
	{
		pLibVer->major       = PDH_LIBVER_VERSION_MAJOR;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	701a      	strb	r2, [r3, #0]
 800d624:	2200      	movs	r2, #0
 800d626:	705a      	strb	r2, [r3, #1]
		pLibVer->minor       = PDH_LIBVER_VERSION_MINOR;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f042 020c 	orr.w	r2, r2, #12
 800d630:	709a      	strb	r2, [r3, #2]
 800d632:	2200      	movs	r2, #0
 800d634:	70da      	strb	r2, [r3, #3]
		pLibVer->build       = PDH_LIBVER_VERSION_BUILD;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	711a      	strb	r2, [r3, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	715a      	strb	r2, [r3, #5]
		pLibVer->date.years  = PDH_LIBVER_VERSION_DATE_YEAR;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	f062 0217 	orn	r2, r2, #23
 800d648:	739a      	strb	r2, [r3, #14]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f042 0207 	orr.w	r2, r2, #7
 800d650:	73da      	strb	r2, [r3, #15]
		pLibVer->date.months = PDH_LIBVER_VERSION_DATE_MONTH;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	220c      	movs	r2, #12
 800d656:	735a      	strb	r2, [r3, #13]
		pLibVer->date.days   = PDH_LIBVER_VERSION_DATE_DAY;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	f042 0218 	orr.w	r2, r2, #24
 800d660:	72da      	strb	r2, [r3, #11]
 800d662:	2200      	movs	r2, #0
 800d664:	731a      	strb	r2, [r3, #12]

		(void_t) strcpy(pLibVer->name,        PDH_LIBVER_NAME);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	3310      	adds	r3, #16
 800d66a:	4a1d      	ldr	r2, [pc, #116]	; (800d6e0 <svl_pdhGetLibVersion+0xdc>)
 800d66c:	461c      	mov	r4, r3
 800d66e:	4613      	mov	r3, r2
 800d670:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d672:	6020      	str	r0, [r4, #0]
 800d674:	6061      	str	r1, [r4, #4]
 800d676:	60a2      	str	r2, [r4, #8]
		(void_t) strcpy(pLibVer->author,      PDH_LIBVER_AUTHOR);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	3370      	adds	r3, #112	; 0x70
 800d67c:	4a19      	ldr	r2, [pc, #100]	; (800d6e4 <svl_pdhGetLibVersion+0xe0>)
 800d67e:	461d      	mov	r5, r3
 800d680:	4614      	mov	r4, r2
 800d682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d684:	6028      	str	r0, [r5, #0]
 800d686:	6069      	str	r1, [r5, #4]
 800d688:	60aa      	str	r2, [r5, #8]
 800d68a:	60eb      	str	r3, [r5, #12]
 800d68c:	6820      	ldr	r0, [r4, #0]
 800d68e:	6128      	str	r0, [r5, #16]
		(void_t) strcpy(pLibVer->description, PDH_LIBVER_DESCRIPTION);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	3340      	adds	r3, #64	; 0x40
 800d694:	4a14      	ldr	r2, [pc, #80]	; (800d6e8 <svl_pdhGetLibVersion+0xe4>)
 800d696:	4614      	mov	r4, r2
 800d698:	469c      	mov	ip, r3
 800d69a:	f104 0e20 	add.w	lr, r4, #32
 800d69e:	4665      	mov	r5, ip
 800d6a0:	4626      	mov	r6, r4
 800d6a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d6a4:	6028      	str	r0, [r5, #0]
 800d6a6:	6069      	str	r1, [r5, #4]
 800d6a8:	60aa      	str	r2, [r5, #8]
 800d6aa:	60eb      	str	r3, [r5, #12]
 800d6ac:	3410      	adds	r4, #16
 800d6ae:	f10c 0c10 	add.w	ip, ip, #16
 800d6b2:	4574      	cmp	r4, lr
 800d6b4:	d1f3      	bne.n	800d69e <svl_pdhGetLibVersion+0x9a>
 800d6b6:	4662      	mov	r2, ip
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	cb03      	ldmia	r3!, {r0, r1}
 800d6bc:	6010      	str	r0, [r2, #0]
 800d6be:	6051      	str	r1, [r2, #4]
 800d6c0:	8819      	ldrh	r1, [r3, #0]
 800d6c2:	789b      	ldrb	r3, [r3, #2]
 800d6c4:	8111      	strh	r1, [r2, #8]
 800d6c6:	7293      	strb	r3, [r2, #10]

		getResult = GOS_SUCCESS;
 800d6c8:	2355      	movs	r3, #85	; 0x55
 800d6ca:	73fb      	strb	r3, [r7, #15]
 800d6cc:	e001      	b.n	800d6d2 <svl_pdhGetLibVersion+0xce>
	}
	else
	{
		getResult = GOS_ERROR;
 800d6ce:	23ae      	movs	r3, #174	; 0xae
 800d6d0:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800d6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3714      	adds	r7, #20
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6dc:	200048a8 	.word	0x200048a8
 800d6e0:	0801841c 	.word	0x0801841c
 800d6e4:	08018428 	.word	0x08018428
 800d6e8:	0801843c 	.word	0x0801843c

0800d6ec <svl_pdhGetSwInfo>:

/*
 * Function: svl_pdhGetSwInfo
 */
gos_result_t svl_pdhGetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800d6f4:	23ae      	movs	r3, #174	; 0xae
 800d6f6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pSwInfo != NULL && pdhReadFunction != NULL)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00d      	beq.n	800d71a <svl_pdhGetSwInfo+0x2e>
 800d6fe:	4b0a      	ldr	r3, [pc, #40]	; (800d728 <svl_pdhGetSwInfo+0x3c>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d009      	beq.n	800d71a <svl_pdhGetSwInfo+0x2e>
	{
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800d706:	4b08      	ldr	r3, [pc, #32]	; (800d728 <svl_pdhGetSwInfo+0x3c>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800d70e:	6879      	ldr	r1, [r7, #4]
 800d710:	2000      	movs	r0, #0
 800d712:	4798      	blx	r3
 800d714:	4603      	mov	r3, r0
 800d716:	73fb      	strb	r3, [r7, #15]
 800d718:	e001      	b.n	800d71e <svl_pdhGetSwInfo+0x32>
	}
	else
	{
		getResult = GOS_ERROR;
 800d71a:	23ae      	movs	r3, #174	; 0xae
 800d71c:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	200048a8 	.word	0x200048a8

0800d72c <svl_pdhGetHwInfo>:

/*
 * Function: svl_pdhGetHwInfo
 */
gos_result_t svl_pdhGetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800d734:	23ae      	movs	r3, #174	; 0xae
 800d736:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pHwInfo != NULL && pdhReadFunction != NULL)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00d      	beq.n	800d75a <svl_pdhGetHwInfo+0x2e>
 800d73e:	4b0a      	ldr	r3, [pc, #40]	; (800d768 <svl_pdhGetHwInfo+0x3c>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d009      	beq.n	800d75a <svl_pdhGetHwInfo+0x2e>
	{
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 800d746:	4b08      	ldr	r3, [pc, #32]	; (800d768 <svl_pdhGetHwInfo+0x3c>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	22fa      	movs	r2, #250	; 0xfa
 800d74c:	6879      	ldr	r1, [r7, #4]
 800d74e:	f44f 7028 	mov.w	r0, #672	; 0x2a0
 800d752:	4798      	blx	r3
 800d754:	4603      	mov	r3, r0
 800d756:	73fb      	strb	r3, [r7, #15]
 800d758:	e001      	b.n	800d75e <svl_pdhGetHwInfo+0x32>
	}
	else
	{
		getResult = GOS_ERROR;
 800d75a:	23ae      	movs	r3, #174	; 0xae
 800d75c:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	200048a8 	.word	0x200048a8

0800d76c <svl_pdhGetWifiCfg>:

/*
 * Function: svl_pdhGetWifiCfg
 */
gos_result_t svl_pdhGetWifiCfg (svl_pdhWifiCfg_t* pWifiCfg)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800d774:	23ae      	movs	r3, #174	; 0xae
 800d776:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pWifiCfg != NULL && pdhReadFunction != NULL)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00d      	beq.n	800d79a <svl_pdhGetWifiCfg+0x2e>
 800d77e:	4b0a      	ldr	r3, [pc, #40]	; (800d7a8 <svl_pdhGetWifiCfg+0x3c>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d009      	beq.n	800d79a <svl_pdhGetWifiCfg+0x2e>
	{
		getResult = pdhReadFunction(PDH_ADDR_WIFI_CFG, (u8_t*)pWifiCfg, sizeof(*pWifiCfg));
 800d786:	4b08      	ldr	r3, [pc, #32]	; (800d7a8 <svl_pdhGetWifiCfg+0x3c>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	226e      	movs	r2, #110	; 0x6e
 800d78c:	6879      	ldr	r1, [r7, #4]
 800d78e:	f44f 6081 	mov.w	r0, #1032	; 0x408
 800d792:	4798      	blx	r3
 800d794:	4603      	mov	r3, r0
 800d796:	73fb      	strb	r3, [r7, #15]
 800d798:	e001      	b.n	800d79e <svl_pdhGetWifiCfg+0x32>
	}
	else
	{
		getResult = GOS_ERROR;
 800d79a:	23ae      	movs	r3, #174	; 0xae
 800d79c:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800d79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	200048a8 	.word	0x200048a8

0800d7ac <svl_pdhSetSwInfo>:

/*
 * Function: svl_pdhSetSwInfo
 */
gos_result_t svl_pdhSetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t setResult = GOS_ERROR;
 800d7b4:	23ae      	movs	r3, #174	; 0xae
 800d7b6:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pSwInfo != NULL && pdhWriteFunction != NULL)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00d      	beq.n	800d7da <svl_pdhSetSwInfo+0x2e>
 800d7be:	4b0a      	ldr	r3, [pc, #40]	; (800d7e8 <svl_pdhSetSwInfo+0x3c>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d009      	beq.n	800d7da <svl_pdhSetSwInfo+0x2e>
	{
		setResult = pdhWriteFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800d7c6:	4b08      	ldr	r3, [pc, #32]	; (800d7e8 <svl_pdhSetSwInfo+0x3c>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f44f 7228 	mov.w	r2, #672	; 0x2a0
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	4798      	blx	r3
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	73fb      	strb	r3, [r7, #15]
 800d7d8:	e001      	b.n	800d7de <svl_pdhSetSwInfo+0x32>
	}
	else
	{
		setResult = GOS_ERROR;
 800d7da:	23ae      	movs	r3, #174	; 0xae
 800d7dc:	73fb      	strb	r3, [r7, #15]
	}

	return setResult;
 800d7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	200048ac 	.word	0x200048ac

0800d7ec <svl_pdhSoftwareInfoReqMsgReceived>:
 * @details Sends out the software info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhSoftwareInfoReqMsgReceived (void_t)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 800d7f2:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	svl_pdhSwInfo_t swInfoMsg = {0};
 800d7f4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800d7f8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800d802:	461a      	mov	r2, r3
 800d804:	2100      	movs	r1, #0
 800d806:	f008 faa5 	bl	8015d54 <memset>

	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetSwInfo(&swInfoMsg);
 800d80a:	463b      	mov	r3, r7
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7ff ff6d 	bl	800d6ec <svl_pdhGetSwInfo>

	(void_t) gos_gcpTransmitMessage(
 800d812:	463a      	mov	r2, r7
 800d814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800d81e:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 800d822:	2000      	movs	r0, #0
 800d824:	f003 ffaa 	bl	801177c <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			0xB000,
			(void_t*)&swInfoMsg,
			sizeof(swInfoMsg),
			0xFFFF);
}
 800d828:	bf00      	nop
 800d82a:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <svl_pdhHardwareInfoReqMsgReceived>:
 * @details Sends out the hardware info via the sysmon GCP channel.
 *
 * @return  -
 */
GOS_STATIC void_t svl_pdhHardwareInfoReqMsgReceived (void_t)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b0c2      	sub	sp, #264	; 0x108
 800d836:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	svl_pdhHwInfo_t hwInfoMsg = {0};
 800d838:	1d3b      	adds	r3, r7, #4
 800d83a:	22fa      	movs	r2, #250	; 0xfa
 800d83c:	2100      	movs	r1, #0
 800d83e:	4618      	mov	r0, r3
 800d840:	f008 fa88 	bl	8015d54 <memset>

	/*
	 * Function code.
	 */
	(void_t) svl_pdhGetHwInfo(&hwInfoMsg);
 800d844:	1d3b      	adds	r3, r7, #4
 800d846:	4618      	mov	r0, r3
 800d848:	f7ff ff70 	bl	800d72c <svl_pdhGetHwInfo>

	(void_t) gos_gcpTransmitMessage(
 800d84c:	1d3a      	adds	r2, r7, #4
 800d84e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	23fa      	movs	r3, #250	; 0xfa
 800d856:	f24b 0101 	movw	r1, #45057	; 0xb001
 800d85a:	2000      	movs	r0, #0
 800d85c:	f003 ff8e 	bl	801177c <gos_gcpTransmitMessage>
    		CFG_SYSMON_GCP_CHANNEL_NUM,
			0xB001,
			(void_t*)&hwInfoMsg,
			sizeof(hwInfoMsg),
			0xFFFF);
}
 800d860:	bf00      	nop
 800d862:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
	...

0800d86c <svl_sdhInit>:

/*
 * Function: svl_sdhInit
 */
gos_result_t svl_sdhInit (void_t)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 800d872:	23ae      	movs	r3, #174	; 0xae
 800d874:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// TODO:
	initResult = gos_sysmonRegisterUserMessage(&sysmonBinaryNumReqMsg);
 800d876:	481c      	ldr	r0, [pc, #112]	; (800d8e8 <svl_sdhInit+0x7c>)
 800d878:	f005 ff40 	bl	80136fc <gos_sysmonRegisterUserMessage>
 800d87c:	4603      	mov	r3, r0
 800d87e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&sysmonBinaryInfoReqMsg);
 800d880:	481a      	ldr	r0, [pc, #104]	; (800d8ec <svl_sdhInit+0x80>)
 800d882:	f005 ff3b 	bl	80136fc <gos_sysmonRegisterUserMessage>
 800d886:	4603      	mov	r3, r0
 800d888:	461a      	mov	r2, r3
 800d88a:	79fb      	ldrb	r3, [r7, #7]
 800d88c:	4013      	ands	r3, r2
 800d88e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&sysmonDownloadReqMsg);
 800d890:	4817      	ldr	r0, [pc, #92]	; (800d8f0 <svl_sdhInit+0x84>)
 800d892:	f005 ff33 	bl	80136fc <gos_sysmonRegisterUserMessage>
 800d896:	4603      	mov	r3, r0
 800d898:	461a      	mov	r2, r3
 800d89a:	79fb      	ldrb	r3, [r7, #7]
 800d89c:	4013      	ands	r3, r2
 800d89e:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_sysmonRegisterUserMessage(&sysmonBinaryChunkReqMsg);
 800d8a0:	4814      	ldr	r0, [pc, #80]	; (800d8f4 <svl_sdhInit+0x88>)
 800d8a2:	f005 ff2b 	bl	80136fc <gos_sysmonRegisterUserMessage>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	4013      	ands	r3, r2
 800d8ae:	71fb      	strb	r3, [r7, #7]

	initResult &= svl_iplRegisterUserMsg(&iplBinaryInfoReqMsg);
 800d8b0:	4811      	ldr	r0, [pc, #68]	; (800d8f8 <svl_sdhInit+0x8c>)
 800d8b2:	f7ff f9a9 	bl	800cc08 <svl_iplRegisterUserMsg>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	79fb      	ldrb	r3, [r7, #7]
 800d8bc:	4013      	ands	r3, r2
 800d8be:	71fb      	strb	r3, [r7, #7]
	initResult &= gos_taskRegister(&svlSdhTaskDesc, NULL);
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	480e      	ldr	r0, [pc, #56]	; (800d8fc <svl_sdhInit+0x90>)
 800d8c4:	f001 ff44 	bl	800f750 <gos_taskRegister>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	79fb      	ldrb	r3, [r7, #7]
 800d8ce:	4013      	ands	r3, r2
 800d8d0:	71fb      	strb	r3, [r7, #7]

	if (initResult != GOS_SUCCESS)
 800d8d2:	79fb      	ldrb	r3, [r7, #7]
 800d8d4:	2b55      	cmp	r3, #85	; 0x55
 800d8d6:	d001      	beq.n	800d8dc <svl_sdhInit+0x70>
	{
		initResult = GOS_ERROR;
 800d8d8:	23ae      	movs	r3, #174	; 0xae
 800d8da:	71fb      	strb	r3, [r7, #7]
	else
	{
		// OK.
	}

	return initResult;
 800d8dc:	79fb      	ldrb	r3, [r7, #7]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20000878 	.word	0x20000878
 800d8ec:	20000888 	.word	0x20000888
 800d8f0:	20000898 	.word	0x20000898
 800d8f4:	200008a8 	.word	0x200008a8
 800d8f8:	200008b8 	.word	0x200008b8
 800d8fc:	200008c0 	.word	0x200008c0

0800d900 <svl_sdhConfigure>:

/*
 * Function: svl_sdhConfigure
 */
gos_result_t svl_sdhConfigure (svl_sdhCfg_t* pCfg)
{
 800d900:	b480      	push	{r7}
 800d902:	b085      	sub	sp, #20
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t cfgResult = GOS_ERROR;
 800d908:	23ae      	movs	r3, #174	; 0xae
 800d90a:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pCfg != NULL && pCfg->readFunction != NULL && pCfg->writeFunction != NULL)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d011      	beq.n	800d936 <svl_sdhConfigure+0x36>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00d      	beq.n	800d936 <svl_sdhConfigure+0x36>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d009      	beq.n	800d936 <svl_sdhConfigure+0x36>
	{
		sdhReadFunction  = pCfg->readFunction;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a07      	ldr	r2, [pc, #28]	; (800d944 <svl_sdhConfigure+0x44>)
 800d928:	6013      	str	r3, [r2, #0]
		sdhWriteFunction = pCfg->writeFunction;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	4a06      	ldr	r2, [pc, #24]	; (800d948 <svl_sdhConfigure+0x48>)
 800d930:	6013      	str	r3, [r2, #0]
		cfgResult        = GOS_SUCCESS;
 800d932:	2355      	movs	r3, #85	; 0x55
 800d934:	73fb      	strb	r3, [r7, #15]
	else
	{
		// Error.
	}

	return cfgResult;
 800d936:	7bfb      	ldrb	r3, [r7, #15]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3714      	adds	r7, #20
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr
 800d944:	200048b0 	.word	0x200048b0
 800d948:	200048b4 	.word	0x200048b4

0800d94c <svl_sdhDaemon>:

GOS_STATIC void_t svl_sdhDaemon (void_t)
{
 800d94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d94e:	b0d1      	sub	sp, #324	; 0x144
 800d950:	af04      	add	r7, sp, #16
	gos_message_t gosMsg = {0};
 800d952:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d956:	2254      	movs	r2, #84	; 0x54
 800d958:	2100      	movs	r1, #0
 800d95a:	4618      	mov	r0, r3
 800d95c:	f008 f9fa 	bl	8015d54 <memset>
	gos_message_t gosRespMsg = {0};
 800d960:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d964:	2254      	movs	r2, #84	; 0x54
 800d966:	2100      	movs	r1, #0
 800d968:	4618      	mov	r0, r3
 800d96a:	f008 f9f3 	bl	8015d54 <memset>
	svl_sdhControlMsg_t controlMsg = {0};
 800d96e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d972:	2200      	movs	r2, #0
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	605a      	str	r2, [r3, #4]
 800d978:	609a      	str	r2, [r3, #8]
	gos_messageId_t msgIds [] = { SVL_SDH_STATE_CONT_MSG_ID, 0 };
 800d97a:	f24a 33ed 	movw	r3, #41965	; 0xa3ed
 800d97e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800d982:	2300      	movs	r3, #0
 800d984:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	svl_sdhBinaryDesc_t newBinaryDescriptor = {0};
 800d988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d98c:	2230      	movs	r2, #48	; 0x30
 800d98e:	2100      	movs	r1, #0
 800d990:	4618      	mov	r0, r3
 800d992:	f008 f9df 	bl	8015d54 <memset>
	u16_t chunkIndex = 0u;
 800d996:	2300      	movs	r3, #0
 800d998:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
	u16_t numOfChunks = 0u;
 800d99c:	2300      	movs	r3, #0
 800d99e:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e

	for (;;)
	{
		if (gos_messageRx(msgIds, &gosMsg, 5000u) == GOS_SUCCESS)
 800d9a2:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800d9a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800d9aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f004 fa12 	bl	8011dd8 <gos_messageRx>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b55      	cmp	r3, #85	; 0x55
 800d9b8:	f040 81fd 	bne.w	800ddb6 <svl_sdhDaemon+0x46a>
		{
			(void_t) memcpy((void_t*)&controlMsg, (void_t*)gosMsg.messageBytes, sizeof(controlMsg));
 800d9bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800d9c0:	1cd9      	adds	r1, r3, #3
 800d9c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d9c6:	220c      	movs	r2, #12
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f008 fa4a 	bl	8015e62 <memcpy>

			switch (controlMsg.requiredState)
 800d9ce:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800d9d2:	3b01      	subs	r3, #1
 800d9d4:	2b03      	cmp	r3, #3
 800d9d6:	f200 81fd 	bhi.w	800ddd4 <svl_sdhDaemon+0x488>
 800d9da:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <svl_sdhDaemon+0x94>)
 800d9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e0:	0800dc9d 	.word	0x0800dc9d
 800d9e4:	0800d9f1 	.word	0x0800d9f1
 800d9e8:	0800da5b 	.word	0x0800da5b
 800d9ec:	0800db19 	.word	0x0800db19
			{
				case SDH_STATE_BINARY_NUM_REQ:
				{
					if (sdhReadFunction != NULL && sdhWriteFunction != NULL)
 800d9f0:	4ba2      	ldr	r3, [pc, #648]	; (800dc7c <svl_sdhDaemon+0x330>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f000 81ef 	beq.w	800ddd8 <svl_sdhDaemon+0x48c>
 800d9fa:	4ba1      	ldr	r3, [pc, #644]	; (800dc80 <svl_sdhDaemon+0x334>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f000 81ea 	beq.w	800ddd8 <svl_sdhDaemon+0x48c>
					{
#if SVL_SDH_TRACE_LEVEL > 0
					(void_t) gos_traceTrace(GOS_TRUE, "SDH binary number request received.\r\n");
 800da04:	499f      	ldr	r1, [pc, #636]	; (800dc84 <svl_sdhDaemon+0x338>)
 800da06:	2036      	movs	r0, #54	; 0x36
 800da08:	f006 fe50 	bl	80146ac <gos_traceTrace>
#endif
						u16_t numOfBinaries = 0u;
 800da0c:	2300      	movs	r3, #0
 800da0e:	87fb      	strh	r3, [r7, #62]	; 0x3e

						(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800da10:	4b9a      	ldr	r3, [pc, #616]	; (800dc7c <svl_sdhDaemon+0x330>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 800da18:	2202      	movs	r2, #2
 800da1a:	2000      	movs	r0, #0
 800da1c:	4798      	blx	r3

						if (numOfBinaries == 0xFFFF)
 800da1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800da20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da24:	4293      	cmp	r3, r2
 800da26:	d108      	bne.n	800da3a <svl_sdhDaemon+0xee>
						{
							numOfBinaries = 0u;
 800da28:	2300      	movs	r3, #0
 800da2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
							(void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800da2c:	4b94      	ldr	r3, [pc, #592]	; (800dc80 <svl_sdhDaemon+0x334>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 800da34:	2202      	movs	r2, #2
 800da36:	2000      	movs	r0, #0
 800da38:	4798      	blx	r3
						else
						{
							// Number OK.
						}

						gosRespMsg.messageId = SVL_SDH_STATE_CONT_RESP_MSG_ID;
 800da3a:	f24a 33ef 	movw	r3, #41967	; 0xa3ef
 800da3e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
						gosRespMsg.messageSize = sizeof(numOfBinaries);
 800da42:	2302      	movs	r3, #2
 800da44:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800da48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e

						(void_t) memcpy((void_t*)gosRespMsg.messageBytes, (void_t*)&numOfBinaries, sizeof(numOfBinaries));
 800da4a:	f8a7 3083 	strh.w	r3, [r7, #131]	; 0x83
						(void_t) gos_messageTx(&gosRespMsg);
 800da4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800da52:	4618      	mov	r0, r3
 800da54:	f004 fac0 	bl	8011fd8 <gos_messageTx>
					}
					break;
 800da58:	e1be      	b.n	800ddd8 <svl_sdhDaemon+0x48c>
				}
				case SDH_STATE_BINARY_INFO_REQ:
				{
					if (sdhReadFunction != NULL)
 800da5a:	4b88      	ldr	r3, [pc, #544]	; (800dc7c <svl_sdhDaemon+0x330>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	f000 81bc 	beq.w	800dddc <svl_sdhDaemon+0x490>
					{
						u16_t index = 0u;
 800da64:	2300      	movs	r3, #0
 800da66:	87bb      	strh	r3, [r7, #60]	; 0x3c
						u16_t numOfBinaries = 0u;
 800da68:	2300      	movs	r3, #0
 800da6a:	877b      	strh	r3, [r7, #58]	; 0x3a
						svl_sdhBinaryDesc_t binaryDescriptor = {0};
 800da6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800da70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800da74:	4618      	mov	r0, r3
 800da76:	2330      	movs	r3, #48	; 0x30
 800da78:	461a      	mov	r2, r3
 800da7a:	2100      	movs	r1, #0
 800da7c:	f008 f96a 	bl	8015d54 <memset>

						(void_t) memcpy((void_t*)&index, (void_t*)controlMsg.pData, sizeof(index));
 800da80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da82:	881b      	ldrh	r3, [r3, #0]
 800da84:	b29b      	uxth	r3, r3
 800da86:	87bb      	strh	r3, [r7, #60]	; 0x3c

#if SVL_SDH_TRACE_LEVEL > 0
					(void_t) gos_traceTraceFormatted(GOS_TRUE, "SDH binary info request received. Index: %u\r\n", index);
 800da88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800da8a:	461a      	mov	r2, r3
 800da8c:	497e      	ldr	r1, [pc, #504]	; (800dc88 <svl_sdhDaemon+0x33c>)
 800da8e:	2036      	movs	r0, #54	; 0x36
 800da90:	f006 ff28 	bl	80148e4 <gos_traceTraceFormatted>
#endif

						(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800da94:	4b79      	ldr	r3, [pc, #484]	; (800dc7c <svl_sdhDaemon+0x330>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800da9c:	2202      	movs	r2, #2
 800da9e:	2000      	movs	r0, #0
 800daa0:	4798      	blx	r3

						(void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800daa2:	4b77      	ldr	r3, [pc, #476]	; (800dc80 <svl_sdhDaemon+0x334>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800daaa:	2202      	movs	r2, #2
 800daac:	2000      	movs	r0, #0
 800daae:	4798      	blx	r3

						if (index < numOfBinaries)
 800dab0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800dab2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dab4:	429a      	cmp	r2, r3
 800dab6:	f080 8191 	bcs.w	800dddc <svl_sdhDaemon+0x490>
						{
							(void_t) sdhReadFunction(
 800daba:	4b70      	ldr	r3, [pc, #448]	; (800dc7c <svl_sdhDaemon+0x330>)
 800dabc:	681c      	ldr	r4, [r3, #0]
									SVL_SDH_STORAGE_DESC_BIN_DESC_START + index * sizeof(svl_sdhBinaryDesc_t),
 800dabe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dac0:	461a      	mov	r2, r3
 800dac2:	4613      	mov	r3, r2
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	4413      	add	r3, r2
 800dac8:	011b      	lsls	r3, r3, #4
 800daca:	3302      	adds	r3, #2
							(void_t) sdhReadFunction(
 800dacc:	4639      	mov	r1, r7
 800dace:	2230      	movs	r2, #48	; 0x30
 800dad0:	4618      	mov	r0, r3
 800dad2:	47a0      	blx	r4
									(u8_t*)&binaryDescriptor,
									sizeof(binaryDescriptor)
									);

							gosRespMsg.messageId = SVL_SDH_STATE_CONT_RESP_MSG_ID;
 800dad4:	f24a 33ef 	movw	r3, #41967	; 0xa3ef
 800dad8:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
							gosRespMsg.messageSize = sizeof(binaryDescriptor);
 800dadc:	2330      	movs	r3, #48	; 0x30
 800dade:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

							(void_t) memcpy((void_t*)gosRespMsg.messageBytes, (void_t*)&binaryDescriptor, sizeof(binaryDescriptor));
 800dae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800daea:	461c      	mov	r4, r3
 800daec:	f107 0c83 	add.w	ip, r7, #131	; 0x83
 800daf0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800daf4:	4665      	mov	r5, ip
 800daf6:	4626      	mov	r6, r4
 800daf8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dafa:	6028      	str	r0, [r5, #0]
 800dafc:	6069      	str	r1, [r5, #4]
 800dafe:	60aa      	str	r2, [r5, #8]
 800db00:	60eb      	str	r3, [r5, #12]
 800db02:	3410      	adds	r4, #16
 800db04:	f10c 0c10 	add.w	ip, ip, #16
 800db08:	4574      	cmp	r4, lr
 800db0a:	d1f3      	bne.n	800daf4 <svl_sdhDaemon+0x1a8>
							(void_t) gos_messageTx(&gosRespMsg);
 800db0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800db10:	4618      	mov	r0, r3
 800db12:	f004 fa61 	bl	8011fd8 <gos_messageTx>
						else
						{
							// Invalid index.
						}
					}
					break;
 800db16:	e161      	b.n	800dddc <svl_sdhDaemon+0x490>
				}
				case SDH_STATE_BINARY_DOWNLOAD_REQ:
				{
					if (sdhReadFunction != NULL && sdhState == SDH_STATE_IDLE)
 800db18:	4b58      	ldr	r3, [pc, #352]	; (800dc7c <svl_sdhDaemon+0x330>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f000 815f 	beq.w	800dde0 <svl_sdhDaemon+0x494>
 800db22:	4b5a      	ldr	r3, [pc, #360]	; (800dc8c <svl_sdhDaemon+0x340>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	f040 815a 	bne.w	800dde0 <svl_sdhDaemon+0x494>
					{
#if SVL_SDH_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "SDH binary download request received.\r\n");
 800db2c:	4958      	ldr	r1, [pc, #352]	; (800dc90 <svl_sdhDaemon+0x344>)
 800db2e:	2036      	movs	r0, #54	; 0x36
 800db30:	f006 fdbc 	bl	80146ac <gos_traceTrace>
#endif
						// Check if descriptor fits.
						u16_t numOfBinaries = 0u;
 800db34:	2300      	movs	r3, #0
 800db36:	873b      	strh	r3, [r7, #56]	; 0x38
						u8_t  result;
						(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800db38:	4b50      	ldr	r3, [pc, #320]	; (800dc7c <svl_sdhDaemon+0x330>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800db40:	2202      	movs	r2, #2
 800db42:	2000      	movs	r0, #0
 800db44:	4798      	blx	r3

						if ((SVL_SDH_STORAGE_DESC_BIN_DESC_START + ((numOfBinaries + 1) * sizeof(svl_sdhBinaryDesc_t))) < SVL_SDH_STORAGE_DESC_AREA_SIZE)
 800db46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800db48:	3301      	adds	r3, #1
 800db4a:	461a      	mov	r2, r3
 800db4c:	4613      	mov	r3, r2
 800db4e:	005b      	lsls	r3, r3, #1
 800db50:	4413      	add	r3, r2
 800db52:	011b      	lsls	r3, r3, #4
 800db54:	3302      	adds	r3, #2
 800db56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db5a:	d27b      	bcs.n	800dc54 <svl_sdhDaemon+0x308>
						{
							// Check if binary fits.
							svl_sdhBinaryDesc_t binaryDescriptor = {0};
 800db5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800db60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800db64:	4618      	mov	r0, r3
 800db66:	2330      	movs	r3, #48	; 0x30
 800db68:	461a      	mov	r2, r3
 800db6a:	2100      	movs	r1, #0
 800db6c:	f008 f8f2 	bl	8015d54 <memset>

							(void_t) memcpy((void_t*)&newBinaryDescriptor, (void_t*)controlMsg.pData, sizeof(newBinaryDescriptor));
 800db70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db72:	461c      	mov	r4, r3
 800db74:	f107 0640 	add.w	r6, r7, #64	; 0x40
 800db78:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800db7c:	4635      	mov	r5, r6
 800db7e:	4623      	mov	r3, r4
 800db80:	6818      	ldr	r0, [r3, #0]
 800db82:	6859      	ldr	r1, [r3, #4]
 800db84:	689a      	ldr	r2, [r3, #8]
 800db86:	68db      	ldr	r3, [r3, #12]
 800db88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800db8a:	3410      	adds	r4, #16
 800db8c:	3610      	adds	r6, #16
 800db8e:	4564      	cmp	r4, ip
 800db90:	d1f4      	bne.n	800db7c <svl_sdhDaemon+0x230>

							if (numOfBinaries > 0)
 800db92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800db94:	2b00      	cmp	r3, #0
 800db96:	d01a      	beq.n	800dbce <svl_sdhDaemon+0x282>
							{
								(void_t) sdhReadFunction(
 800db98:	4b38      	ldr	r3, [pc, #224]	; (800dc7c <svl_sdhDaemon+0x330>)
 800db9a:	681c      	ldr	r4, [r3, #0]
										SVL_SDH_STORAGE_DESC_BIN_DESC_START + (numOfBinaries - 1) * sizeof(svl_sdhBinaryDesc_t),
 800db9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800db9e:	3b01      	subs	r3, #1
 800dba0:	461a      	mov	r2, r3
 800dba2:	4613      	mov	r3, r2
 800dba4:	005b      	lsls	r3, r3, #1
 800dba6:	4413      	add	r3, r2
 800dba8:	011b      	lsls	r3, r3, #4
 800dbaa:	3302      	adds	r3, #2
								(void_t) sdhReadFunction(
 800dbac:	4639      	mov	r1, r7
 800dbae:	2230      	movs	r2, #48	; 0x30
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	47a0      	blx	r4
										(u8_t*)&binaryDescriptor,
										sizeof(binaryDescriptor)
										);

								newBinaryDescriptor.binaryLocation = binaryDescriptor.binaryLocation + binaryDescriptor.binaryInfo.size;
 800dbb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dbb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dbbc:	6a1a      	ldr	r2, [r3, #32]
 800dbbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dbc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800dbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc8:	4413      	add	r3, r2
 800dbca:	663b      	str	r3, [r7, #96]	; 0x60
 800dbcc:	e002      	b.n	800dbd4 <svl_sdhDaemon+0x288>

							}
							else
							{
								newBinaryDescriptor.binaryLocation = SVL_SDH_BINARY_AREA_START;
 800dbce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbd2:	663b      	str	r3, [r7, #96]	; 0x60
							}

#if SVL_SDH_TRACE_LEVEL == 2
							(void_t) gos_traceTraceFormatted(
 800dbd4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 800dbd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dbda:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dbdc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800dbe0:	9102      	str	r1, [sp, #8]
 800dbe2:	9201      	str	r2, [sp, #4]
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	4623      	mov	r3, r4
 800dbe8:	4602      	mov	r2, r0
 800dbea:	492a      	ldr	r1, [pc, #168]	; (800dc94 <svl_sdhDaemon+0x348>)
 800dbec:	2036      	movs	r0, #54	; 0x36
 800dbee:	f006 fe79 	bl	80148e4 <gos_traceTraceFormatted>
									newBinaryDescriptor.binaryInfo.size,
									newBinaryDescriptor.binaryInfo.startAddress,
									newBinaryDescriptor.binaryInfo.crc);
#endif

							if ((newBinaryDescriptor.binaryLocation + newBinaryDescriptor.binaryInfo.size) < SVL_SDH_BINARY_AREA_END)
 800dbf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dbf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbf6:	4413      	add	r3, r2
 800dbf8:	4a27      	ldr	r2, [pc, #156]	; (800dc98 <svl_sdhDaemon+0x34c>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d826      	bhi.n	800dc4c <svl_sdhDaemon+0x300>
							{
								(void_t) sdhWriteFunction(
 800dbfe:	4b20      	ldr	r3, [pc, #128]	; (800dc80 <svl_sdhDaemon+0x334>)
 800dc00:	681c      	ldr	r4, [r3, #0]
										SVL_SDH_STORAGE_DESC_BIN_DESC_START + numOfBinaries * sizeof(svl_sdhBinaryDesc_t),
 800dc02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dc04:	461a      	mov	r2, r3
 800dc06:	4613      	mov	r3, r2
 800dc08:	005b      	lsls	r3, r3, #1
 800dc0a:	4413      	add	r3, r2
 800dc0c:	011b      	lsls	r3, r3, #4
 800dc0e:	3302      	adds	r3, #2
								(void_t) sdhWriteFunction(
 800dc10:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800dc14:	2230      	movs	r2, #48	; 0x30
 800dc16:	4618      	mov	r0, r3
 800dc18:	47a0      	blx	r4
										(u8_t*)&newBinaryDescriptor,
										sizeof(newBinaryDescriptor)
								);
								result = SDH_DOWNLOAD_REQ_OK;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

								chunkIndex  = 0u;
 800dc20:	2300      	movs	r3, #0
 800dc22:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
								numOfChunks = newBinaryDescriptor.binaryInfo.size / SVL_SDH_CHUNK_SIZE + (newBinaryDescriptor.binaryInfo.size % SVL_SDH_CHUNK_SIZE == 0 ? 0 : 1);
 800dc26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc28:	0adb      	lsrs	r3, r3, #11
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	bf14      	ite	ne
 800dc36:	2301      	movne	r3, #1
 800dc38:	2300      	moveq	r3, #0
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	4413      	add	r3, r2
 800dc40:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e

								sdhState = SDH_STATE_DOWNLOADING_BINARY;
 800dc44:	4b11      	ldr	r3, [pc, #68]	; (800dc8c <svl_sdhDaemon+0x340>)
 800dc46:	2201      	movs	r2, #1
 800dc48:	701a      	strb	r2, [r3, #0]
 800dc4a:	e006      	b.n	800dc5a <svl_sdhDaemon+0x30e>
							}
							else
							{
								// New binary does not fit.
								result = SDH_DOWNLOAD_REQ_FILE_SIZE_ERR;
 800dc4c:	2304      	movs	r3, #4
 800dc4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dc52:	e002      	b.n	800dc5a <svl_sdhDaemon+0x30e>
							}
						}
						else
						{
							// There is not enough size for descriptor.
							result = SDH_DOWNLOAD_REQ_DESC_SIZE_ERR;
 800dc54:	2302      	movs	r3, #2
 800dc56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						}

						gosRespMsg.messageId = SVL_SDH_STATE_CONT_RESP_MSG_ID;
 800dc5a:	f24a 33ef 	movw	r3, #41967	; 0xa3ef
 800dc5e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
						gosRespMsg.messageSize = sizeof(result);
 800dc62:	2301      	movs	r3, #1
 800dc64:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800dc68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37

						(void_t) memcpy((void_t*)gosRespMsg.messageBytes, (void_t*)&result, sizeof(result));
 800dc6c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
						(void_t) gos_messageTx(&gosRespMsg);
 800dc70:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dc74:	4618      	mov	r0, r3
 800dc76:	f004 f9af 	bl	8011fd8 <gos_messageTx>
					}
					break;
 800dc7a:	e0b1      	b.n	800dde0 <svl_sdhDaemon+0x494>
 800dc7c:	200048b0 	.word	0x200048b0
 800dc80:	200048b4 	.word	0x200048b4
 800dc84:	08018468 	.word	0x08018468
 800dc88:	08018490 	.word	0x08018490
 800dc8c:	200050c8 	.word	0x200050c8
 800dc90:	080184c0 	.word	0x080184c0
 800dc94:	080184e8 	.word	0x080184e8
 800dc98:	007ffffe 	.word	0x007ffffe
				}
				case SDH_STATE_DOWNLOADING_BINARY:
				{
					if (sdhReadFunction != NULL && sdhWriteFunction != NULL && sdhState == SDH_STATE_DOWNLOADING_BINARY)
 800dc9c:	4b52      	ldr	r3, [pc, #328]	; (800dde8 <svl_sdhDaemon+0x49c>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f000 809f 	beq.w	800dde4 <svl_sdhDaemon+0x498>
 800dca6:	4b51      	ldr	r3, [pc, #324]	; (800ddec <svl_sdhDaemon+0x4a0>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f000 809a 	beq.w	800dde4 <svl_sdhDaemon+0x498>
 800dcb0:	4b4f      	ldr	r3, [pc, #316]	; (800ddf0 <svl_sdhDaemon+0x4a4>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	f040 8095 	bne.w	800dde4 <svl_sdhDaemon+0x498>
					{
						// Get chunk descriptor.
						svl_sdhChunkDesc_t chunkDesc = {0};
 800dcba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	460a      	mov	r2, r1
 800dcc2:	801a      	strh	r2, [r3, #0]
 800dcc4:	460a      	mov	r2, r1
 800dcc6:	709a      	strb	r2, [r3, #2]
						(void_t) memcpy((void_t*)&chunkDesc, (void_t*)controlMsg.pData, sizeof(chunkDesc));
 800dcc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dcca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dcce:	8811      	ldrh	r1, [r2, #0]
 800dcd0:	7892      	ldrb	r2, [r2, #2]
 800dcd2:	8019      	strh	r1, [r3, #0]
 800dcd4:	709a      	strb	r2, [r3, #2]

#if SVL_SDH_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "SDH binary chunk request received.\r\n");
 800dcd6:	4947      	ldr	r1, [pc, #284]	; (800ddf4 <svl_sdhDaemon+0x4a8>)
 800dcd8:	2036      	movs	r0, #54	; 0x36
 800dcda:	f006 fce7 	bl	80146ac <gos_traceTrace>
#endif

#if SVL_SDH_TRACE_LEVEL == 2
						u32_t percentage = 100 * 100 * (chunkDesc.chunkIdx + 1) / numOfChunks;
 800dcde:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dce0:	3301      	adds	r3, #1
 800dce2:	f242 7210 	movw	r2, #10000	; 0x2710
 800dce6:	fb03 f202 	mul.w	r2, r3, r2
 800dcea:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800dcee:	fb92 f3f3 	sdiv	r3, r2, r3
 800dcf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
						(void_t) gos_traceTraceFormatted(
								GOS_TRUE,
								"SDH chunk counter [%u/%u] ... %3u.%02u%%\r\n",
								chunkDesc.chunkIdx + 1,
 800dcf6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
						(void_t) gos_traceTraceFormatted(
 800dcf8:	1c58      	adds	r0, r3, #1
 800dcfa:	f8b7 412e 	ldrh.w	r4, [r7, #302]	; 0x12e
 800dcfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd02:	4a3d      	ldr	r2, [pc, #244]	; (800ddf8 <svl_sdhDaemon+0x4ac>)
 800dd04:	fba2 2303 	umull	r2, r3, r2, r3
 800dd08:	0959      	lsrs	r1, r3, #5
 800dd0a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800dd0e:	4b3a      	ldr	r3, [pc, #232]	; (800ddf8 <svl_sdhDaemon+0x4ac>)
 800dd10:	fba3 5302 	umull	r5, r3, r3, r2
 800dd14:	095b      	lsrs	r3, r3, #5
 800dd16:	2564      	movs	r5, #100	; 0x64
 800dd18:	fb05 f303 	mul.w	r3, r5, r3
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	9301      	str	r3, [sp, #4]
 800dd20:	9100      	str	r1, [sp, #0]
 800dd22:	4623      	mov	r3, r4
 800dd24:	4602      	mov	r2, r0
 800dd26:	4935      	ldr	r1, [pc, #212]	; (800ddfc <svl_sdhDaemon+0x4b0>)
 800dd28:	2036      	movs	r0, #54	; 0x36
 800dd2a:	f006 fddb 	bl	80148e4 <gos_traceTraceFormatted>
								percentage % 100
						);
#endif

						// Save chunk.
						(void_t) sdhWriteFunction(
 800dd2e:	4b2f      	ldr	r3, [pc, #188]	; (800ddec <svl_sdhDaemon+0x4a0>)
 800dd30:	681b      	ldr	r3, [r3, #0]
								newBinaryDescriptor.binaryLocation + chunkDesc.chunkIdx * SVL_SDH_CHUNK_SIZE,
 800dd32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dd34:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800dd36:	02d2      	lsls	r2, r2, #11
						(void_t) sdhWriteFunction(
 800dd38:	1888      	adds	r0, r1, r2
 800dd3a:	4931      	ldr	r1, [pc, #196]	; (800de00 <svl_sdhDaemon+0x4b4>)
 800dd3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd40:	4798      	blx	r3
								(u8_t*)(sdhBuffer + sizeof(chunkDesc)),
								SVL_SDH_CHUNK_SIZE
						);

						// Send response.
						chunkDesc.result = 1;
 800dd42:	2301      	movs	r3, #1
 800dd44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

						gosRespMsg.messageId = SVL_SDH_STATE_CONT_RESP_MSG_ID;
 800dd48:	f24a 33ef 	movw	r3, #41967	; 0xa3ef
 800dd4c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
						gosRespMsg.messageSize = sizeof(chunkDesc);
 800dd50:	2303      	movs	r3, #3
 800dd52:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

						(void_t) memcpy((void_t*)gosRespMsg.messageBytes, (void_t*)&chunkDesc, sizeof(chunkDesc));
 800dd56:	f107 0383 	add.w	r3, r7, #131	; 0x83
 800dd5a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800dd5e:	8811      	ldrh	r1, [r2, #0]
 800dd60:	7892      	ldrb	r2, [r2, #2]
 800dd62:	8019      	strh	r1, [r3, #0]
 800dd64:	709a      	strb	r2, [r3, #2]
						(void_t) gos_messageTx(&gosRespMsg);
 800dd66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f004 f934 	bl	8011fd8 <gos_messageTx>

						// Check if all chunks have been received.
						if (chunkDesc.chunkIdx == (numOfChunks - 1))
 800dd70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dd72:	461a      	mov	r2, r3
 800dd74:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800dd78:	3b01      	subs	r3, #1
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d132      	bne.n	800dde4 <svl_sdhDaemon+0x498>
						{
#if SVL_SDH_TRACE_LEVEL > 0
						(void_t) gos_traceTrace(GOS_TRUE, "SDH binary download finished.\r\n");
 800dd7e:	4921      	ldr	r1, [pc, #132]	; (800de04 <svl_sdhDaemon+0x4b8>)
 800dd80:	2036      	movs	r0, #54	; 0x36
 800dd82:	f006 fc93 	bl	80146ac <gos_traceTrace>
#endif
							u16_t numOfBinaries = 0u;
 800dd86:	2300      	movs	r3, #0
 800dd88:	867b      	strh	r3, [r7, #50]	; 0x32

							(void_t) sdhReadFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800dd8a:	4b17      	ldr	r3, [pc, #92]	; (800dde8 <svl_sdhDaemon+0x49c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f107 0132 	add.w	r1, r7, #50	; 0x32
 800dd92:	2202      	movs	r2, #2
 800dd94:	2000      	movs	r0, #0
 800dd96:	4798      	blx	r3
							numOfBinaries++;
 800dd98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	867b      	strh	r3, [r7, #50]	; 0x32
							(void_t) sdhWriteFunction(SVL_SDH_STORAGE_DESC_AREA_START, (u8_t*)&numOfBinaries, sizeof(numOfBinaries));
 800dda0:	4b12      	ldr	r3, [pc, #72]	; (800ddec <svl_sdhDaemon+0x4a0>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f107 0132 	add.w	r1, r7, #50	; 0x32
 800dda8:	2202      	movs	r2, #2
 800ddaa:	2000      	movs	r0, #0
 800ddac:	4798      	blx	r3

							sdhState = SDH_STATE_IDLE;
 800ddae:	4b10      	ldr	r3, [pc, #64]	; (800ddf0 <svl_sdhDaemon+0x4a4>)
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	701a      	strb	r2, [r3, #0]
						else
						{
							// Continue reception.
						}
					}
					break;
 800ddb4:	e016      	b.n	800dde4 <svl_sdhDaemon+0x498>
		}
		else
		{
			// Timeout.
#if SVL_SDH_TRACE_LEVEL > 0
			if (sdhState != SDH_STATE_IDLE)
 800ddb6:	4b0e      	ldr	r3, [pc, #56]	; (800ddf0 <svl_sdhDaemon+0x4a4>)
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d003      	beq.n	800ddc6 <svl_sdhDaemon+0x47a>
			{
				(void_t) gos_traceTrace(GOS_TRUE, "SDH timeout.\r\n");
 800ddbe:	4912      	ldr	r1, [pc, #72]	; (800de08 <svl_sdhDaemon+0x4bc>)
 800ddc0:	2036      	movs	r0, #54	; 0x36
 800ddc2:	f006 fc73 	bl	80146ac <gos_traceTrace>
			else
			{
				// Just message RX timeout in idle state.
			}
#endif
			sdhState = SDH_STATE_IDLE;
 800ddc6:	4b0a      	ldr	r3, [pc, #40]	; (800ddf0 <svl_sdhDaemon+0x4a4>)
 800ddc8:	2200      	movs	r2, #0
 800ddca:	701a      	strb	r2, [r3, #0]
			(void_t) gos_taskSleep(100);
 800ddcc:	2064      	movs	r0, #100	; 0x64
 800ddce:	f001 fe51 	bl	800fa74 <gos_taskSleep>
 800ddd2:	e5e6      	b.n	800d9a2 <svl_sdhDaemon+0x56>
				default: break;
 800ddd4:	bf00      	nop
 800ddd6:	e5e4      	b.n	800d9a2 <svl_sdhDaemon+0x56>
					break;
 800ddd8:	bf00      	nop
 800ddda:	e5e2      	b.n	800d9a2 <svl_sdhDaemon+0x56>
					break;
 800dddc:	bf00      	nop
 800ddde:	e5e0      	b.n	800d9a2 <svl_sdhDaemon+0x56>
					break;
 800dde0:	bf00      	nop
 800dde2:	e5de      	b.n	800d9a2 <svl_sdhDaemon+0x56>
					break;
 800dde4:	bf00      	nop
		if (gos_messageRx(msgIds, &gosMsg, 5000u) == GOS_SUCCESS)
 800dde6:	e5dc      	b.n	800d9a2 <svl_sdhDaemon+0x56>
 800dde8:	200048b0 	.word	0x200048b0
 800ddec:	200048b4 	.word	0x200048b4
 800ddf0:	200050c8 	.word	0x200050c8
 800ddf4:	08018538 	.word	0x08018538
 800ddf8:	51eb851f 	.word	0x51eb851f
 800ddfc:	08018560 	.word	0x08018560
 800de00:	200048bb 	.word	0x200048bb
 800de04:	0801858c 	.word	0x0801858c
 800de08:	080185ac 	.word	0x080185ac

0800de0c <svl_sdhSysmonBinaryNumReqCallback>:
		}
	}
}

GOS_STATIC void_t svl_sdhSysmonBinaryNumReqCallback (void_t)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b09c      	sub	sp, #112	; 0x70
 800de10:	af02      	add	r7, sp, #8
	svl_sdhControlMsg_t controlMsg = {0};
 800de12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800de16:	2200      	movs	r2, #0
 800de18:	601a      	str	r2, [r3, #0]
 800de1a:	605a      	str	r2, [r3, #4]
 800de1c:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 800de1e:	f24a 33ef 	movw	r3, #41967	; 0xa3ef
 800de22:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800de26:	2300      	movs	r3, #0
 800de28:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	gos_message_t respMsg = {0};
 800de2c:	1d3b      	adds	r3, r7, #4
 800de2e:	2254      	movs	r2, #84	; 0x54
 800de30:	2100      	movs	r1, #0
 800de32:	4618      	mov	r0, r3
 800de34:	f007 ff8e 	bl	8015d54 <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_NUM_REQ;
 800de38:	2302      	movs	r3, #2
 800de3a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 800de3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800de42:	220c      	movs	r2, #12
 800de44:	4619      	mov	r1, r3
 800de46:	4810      	ldr	r0, [pc, #64]	; (800de88 <svl_sdhSysmonBinaryNumReqCallback+0x7c>)
 800de48:	f008 f80b 	bl	8015e62 <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 800de4c:	480f      	ldr	r0, [pc, #60]	; (800de8c <svl_sdhSysmonBinaryNumReqCallback+0x80>)
 800de4e:	f004 f8c3 	bl	8011fd8 <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 800de52:	1d39      	adds	r1, r7, #4
 800de54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800de58:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800de5c:	4618      	mov	r0, r3
 800de5e:	f003 ffbb 	bl	8011dd8 <gos_messageRx>
 800de62:	4603      	mov	r3, r0
 800de64:	2b55      	cmp	r3, #85	; 0x55
 800de66:	d10a      	bne.n	800de7e <svl_sdhSysmonBinaryNumReqCallback+0x72>
	{
		(void_t) gos_gcpTransmitMessage(
 800de68:	1d3b      	adds	r3, r7, #4
 800de6a:	1cda      	adds	r2, r3, #3
 800de6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de70:	9300      	str	r3, [sp, #0]
 800de72:	2302      	movs	r3, #2
 800de74:	f24b 1101 	movw	r1, #45313	; 0xb101
 800de78:	2000      	movs	r0, #0
 800de7a:	f003 fc7f 	bl	801177c <gos_gcpTransmitMessage>
				0xB101,
				(void_t*)respMsg.messageBytes,
				sizeof(u16_t),
				0xFFFF);
	}
}
 800de7e:	bf00      	nop
 800de80:	3768      	adds	r7, #104	; 0x68
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	20000827 	.word	0x20000827
 800de8c:	20000824 	.word	0x20000824

0800de90 <svl_sdhSysmonBinaryInfoReqCallback>:

GOS_STATIC void_t svl_sdhSysmonBinaryInfoReqCallback (void_t)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b09c      	sub	sp, #112	; 0x70
 800de94:	af02      	add	r7, sp, #8
	svl_sdhControlMsg_t controlMsg = {0};
 800de96:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800de9a:	2200      	movs	r2, #0
 800de9c:	601a      	str	r2, [r3, #0]
 800de9e:	605a      	str	r2, [r3, #4]
 800dea0:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 800dea2:	f24a 33ef 	movw	r3, #41967	; 0xa3ef
 800dea6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800deaa:	2300      	movs	r3, #0
 800deac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	gos_message_t respMsg = {0};
 800deb0:	1d3b      	adds	r3, r7, #4
 800deb2:	2254      	movs	r2, #84	; 0x54
 800deb4:	2100      	movs	r1, #0
 800deb6:	4618      	mov	r0, r3
 800deb8:	f007 ff4c 	bl	8015d54 <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_INFO_REQ;
 800debc:	2303      	movs	r3, #3
 800debe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	controlMsg.pData = sdhBuffer;
 800dec2:	4b14      	ldr	r3, [pc, #80]	; (800df14 <svl_sdhSysmonBinaryInfoReqCallback+0x84>)
 800dec4:	663b      	str	r3, [r7, #96]	; 0x60
	controlMsg.dataSize = sizeof(u16_t);
 800dec6:	2302      	movs	r3, #2
 800dec8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 800decc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ded0:	220c      	movs	r2, #12
 800ded2:	4619      	mov	r1, r3
 800ded4:	4810      	ldr	r0, [pc, #64]	; (800df18 <svl_sdhSysmonBinaryInfoReqCallback+0x88>)
 800ded6:	f007 ffc4 	bl	8015e62 <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 800deda:	4810      	ldr	r0, [pc, #64]	; (800df1c <svl_sdhSysmonBinaryInfoReqCallback+0x8c>)
 800dedc:	f004 f87c 	bl	8011fd8 <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 800dee0:	1d39      	adds	r1, r7, #4
 800dee2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dee6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800deea:	4618      	mov	r0, r3
 800deec:	f003 ff74 	bl	8011dd8 <gos_messageRx>
 800def0:	4603      	mov	r3, r0
 800def2:	2b55      	cmp	r3, #85	; 0x55
 800def4:	d10a      	bne.n	800df0c <svl_sdhSysmonBinaryInfoReqCallback+0x7c>
	{
		(void_t) gos_gcpTransmitMessage(
 800def6:	1d3b      	adds	r3, r7, #4
 800def8:	1cda      	adds	r2, r3, #3
 800defa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800defe:	9300      	str	r3, [sp, #0]
 800df00:	2330      	movs	r3, #48	; 0x30
 800df02:	f24b 1102 	movw	r1, #45314	; 0xb102
 800df06:	2000      	movs	r0, #0
 800df08:	f003 fc38 	bl	801177c <gos_gcpTransmitMessage>
				0xB102,
				(void_t*)respMsg.messageBytes,
				sizeof(svl_sdhBinaryDesc_t),
				0xFFFF);
	}
}
 800df0c:	bf00      	nop
 800df0e:	3768      	adds	r7, #104	; 0x68
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	200048b8 	.word	0x200048b8
 800df18:	20000827 	.word	0x20000827
 800df1c:	20000824 	.word	0x20000824

0800df20 <svl_sdhSysmonDownloadReqCallback>:

GOS_STATIC void_t svl_sdhSysmonDownloadReqCallback (void_t)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b09c      	sub	sp, #112	; 0x70
 800df24:	af02      	add	r7, sp, #8
	svl_sdhControlMsg_t controlMsg = {0};
 800df26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800df2a:	2200      	movs	r2, #0
 800df2c:	601a      	str	r2, [r3, #0]
 800df2e:	605a      	str	r2, [r3, #4]
 800df30:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 800df32:	f24a 33ef 	movw	r3, #41967	; 0xa3ef
 800df36:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800df3a:	2300      	movs	r3, #0
 800df3c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	gos_message_t respMsg = {0};
 800df40:	1d3b      	adds	r3, r7, #4
 800df42:	2254      	movs	r2, #84	; 0x54
 800df44:	2100      	movs	r1, #0
 800df46:	4618      	mov	r0, r3
 800df48:	f007 ff04 	bl	8015d54 <memset>

	controlMsg.requiredState = SDH_STATE_BINARY_DOWNLOAD_REQ;
 800df4c:	2304      	movs	r3, #4
 800df4e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	controlMsg.pData = sdhBuffer;
 800df52:	4b14      	ldr	r3, [pc, #80]	; (800dfa4 <svl_sdhSysmonDownloadReqCallback+0x84>)
 800df54:	663b      	str	r3, [r7, #96]	; 0x60
	controlMsg.dataSize = sizeof(u32_t);
 800df56:	2304      	movs	r3, #4
 800df58:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 800df5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800df60:	220c      	movs	r2, #12
 800df62:	4619      	mov	r1, r3
 800df64:	4810      	ldr	r0, [pc, #64]	; (800dfa8 <svl_sdhSysmonDownloadReqCallback+0x88>)
 800df66:	f007 ff7c 	bl	8015e62 <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 800df6a:	4810      	ldr	r0, [pc, #64]	; (800dfac <svl_sdhSysmonDownloadReqCallback+0x8c>)
 800df6c:	f004 f834 	bl	8011fd8 <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 800df70:	1d39      	adds	r1, r7, #4
 800df72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800df76:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800df7a:	4618      	mov	r0, r3
 800df7c:	f003 ff2c 	bl	8011dd8 <gos_messageRx>
 800df80:	4603      	mov	r3, r0
 800df82:	2b55      	cmp	r3, #85	; 0x55
 800df84:	d10a      	bne.n	800df9c <svl_sdhSysmonDownloadReqCallback+0x7c>
	{
		(void_t) gos_gcpTransmitMessage(
 800df86:	1d3b      	adds	r3, r7, #4
 800df88:	1cda      	adds	r2, r3, #3
 800df8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df8e:	9300      	str	r3, [sp, #0]
 800df90:	2301      	movs	r3, #1
 800df92:	f24b 1103 	movw	r1, #45315	; 0xb103
 800df96:	2000      	movs	r0, #0
 800df98:	f003 fbf0 	bl	801177c <gos_gcpTransmitMessage>
				0xB103,
				(void_t*)respMsg.messageBytes,
				sizeof(u8_t),
				0xFFFF);
	}
}
 800df9c:	bf00      	nop
 800df9e:	3768      	adds	r7, #104	; 0x68
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	200048b8 	.word	0x200048b8
 800dfa8:	20000827 	.word	0x20000827
 800dfac:	20000824 	.word	0x20000824

0800dfb0 <svl_sdhSysmonBinaryChunkReqCallback>:

GOS_STATIC void_t svl_sdhSysmonBinaryChunkReqCallback (void_t)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b09c      	sub	sp, #112	; 0x70
 800dfb4:	af02      	add	r7, sp, #8
	svl_sdhControlMsg_t controlMsg = {0};
 800dfb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800dfba:	2200      	movs	r2, #0
 800dfbc:	601a      	str	r2, [r3, #0]
 800dfbe:	605a      	str	r2, [r3, #4]
 800dfc0:	609a      	str	r2, [r3, #8]
	gos_messageId_t respMsgId [] = { SVL_SDH_STATE_CONT_RESP_MSG_ID, 0 };
 800dfc2:	f24a 33ef 	movw	r3, #41967	; 0xa3ef
 800dfc6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	gos_message_t respMsg = {0};
 800dfd0:	1d3b      	adds	r3, r7, #4
 800dfd2:	2254      	movs	r2, #84	; 0x54
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f007 febc 	bl	8015d54 <memset>

	controlMsg.requiredState = SDH_STATE_DOWNLOADING_BINARY;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	controlMsg.pData = sdhBuffer;
 800dfe2:	4b15      	ldr	r3, [pc, #84]	; (800e038 <svl_sdhSysmonBinaryChunkReqCallback+0x88>)
 800dfe4:	663b      	str	r3, [r7, #96]	; 0x60
	controlMsg.dataSize = sizeof(svl_sdhChunkDesc_t) + SVL_SDH_CHUNK_SIZE;
 800dfe6:	f640 0303 	movw	r3, #2051	; 0x803
 800dfea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	(void_t) memcpy((void_t*)sdhStateControlMsg.messageBytes, (void_t*)&controlMsg, sizeof(controlMsg));
 800dfee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800dff2:	220c      	movs	r2, #12
 800dff4:	4619      	mov	r1, r3
 800dff6:	4811      	ldr	r0, [pc, #68]	; (800e03c <svl_sdhSysmonBinaryChunkReqCallback+0x8c>)
 800dff8:	f007 ff33 	bl	8015e62 <memcpy>

	(void_t) gos_messageTx(&sdhStateControlMsg);
 800dffc:	4810      	ldr	r0, [pc, #64]	; (800e040 <svl_sdhSysmonBinaryChunkReqCallback+0x90>)
 800dffe:	f003 ffeb 	bl	8011fd8 <gos_messageTx>

	if (gos_messageRx(respMsgId, &respMsg, 3000) == GOS_SUCCESS)
 800e002:	1d39      	adds	r1, r7, #4
 800e004:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e008:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800e00c:	4618      	mov	r0, r3
 800e00e:	f003 fee3 	bl	8011dd8 <gos_messageRx>
 800e012:	4603      	mov	r3, r0
 800e014:	2b55      	cmp	r3, #85	; 0x55
 800e016:	d10a      	bne.n	800e02e <svl_sdhSysmonBinaryChunkReqCallback+0x7e>
	{
		(void_t) gos_gcpTransmitMessage(
 800e018:	1d3b      	adds	r3, r7, #4
 800e01a:	1cda      	adds	r2, r3, #3
 800e01c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	2303      	movs	r3, #3
 800e024:	f24b 1104 	movw	r1, #45316	; 0xb104
 800e028:	2000      	movs	r0, #0
 800e02a:	f003 fba7 	bl	801177c <gos_gcpTransmitMessage>
				0xB104,
				(void_t*)respMsg.messageBytes,
				sizeof(svl_sdhChunkDesc_t),
				0xFFFF);
	}
}
 800e02e:	bf00      	nop
 800e030:	3768      	adds	r7, #104	; 0x68
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	200048b8 	.word	0x200048b8
 800e03c:	20000827 	.word	0x20000827
 800e040:	20000824 	.word	0x20000824

0800e044 <svl_sdhIplBinaryInfoReqCallback>:

GOS_STATIC void_t svl_sdhIplBinaryInfoReqCallback (u8_t* pData, u32_t size, u32_t crc)
{
 800e044:	b480      	push	{r7}
 800e046:	b085      	sub	sp, #20
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
	/*
	 * Function code.
	 */
	(void_t) svl_iplSendMessage(0xA02, pData, dataLength);
#endif
}
 800e050:	bf00      	nop
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <bld_dataGet>:

/*
 * Function: bld_dataGet
 */
gos_result_t bld_dataGet (bld_bootloaderData_t* pData)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b09a      	sub	sp, #104	; 0x68
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t dataGetResult = GOS_ERROR;
 800e064:	23ae      	movs	r3, #174	; 0xae
 800e066:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bld_packedData bldPackedData = {0};
 800e06a:	f107 030c 	add.w	r3, r7, #12
 800e06e:	2258      	movs	r2, #88	; 0x58
 800e070:	2100      	movs	r1, #0
 800e072:	4618      	mov	r0, r3
 800e074:	f007 fe6e 	bl	8015d54 <memset>

    /*
     * Function code.
     */
    if (pData != NULL)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d010      	beq.n	800e0a0 <bld_dataGet+0x44>
    {
        dataGetResult = drv_flashRead(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData));
 800e07e:	f107 030c 	add.w	r3, r7, #12
 800e082:	2258      	movs	r2, #88	; 0x58
 800e084:	4619      	mov	r1, r3
 800e086:	4809      	ldr	r0, [pc, #36]	; (800e0ac <bld_dataGet+0x50>)
 800e088:	f000 f8df 	bl	800e24a <drv_flashRead>
 800e08c:	4603      	mov	r3, r0
 800e08e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        (void_t*) memcpy((void_t*)pData, (void_t*)&bldPackedData.bldData, sizeof(bldPackedData.bldData));
 800e092:	f107 030c 	add.w	r3, r7, #12
 800e096:	2220      	movs	r2, #32
 800e098:	4619      	mov	r1, r3
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f007 fee1 	bl	8015e62 <memcpy>
    else
    {
        // Error.
    }

    return dataGetResult;
 800e0a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3768      	adds	r7, #104	; 0x68
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	08004000 	.word	0x08004000

0800e0b0 <bld_dataSet>:

/*
 * Function: bld_dataSet
 */
gos_result_t bld_dataSet (bld_bootloaderData_t* pData)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b09a      	sub	sp, #104	; 0x68
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t dataSetResult = GOS_ERROR;
 800e0b8:	23ae      	movs	r3, #174	; 0xae
 800e0ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bld_packedData bldPackedData = {0};
 800e0be:	f107 030c 	add.w	r3, r7, #12
 800e0c2:	2258      	movs	r2, #88	; 0x58
 800e0c4:	2100      	movs	r1, #0
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f007 fe44 	bl	8015d54 <memset>

    /*
     * Function code.
     */
    if (pData != NULL && drv_flashRead(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData)) == GOS_SUCCESS)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d02f      	beq.n	800e132 <bld_dataSet+0x82>
 800e0d2:	f107 030c 	add.w	r3, r7, #12
 800e0d6:	2258      	movs	r2, #88	; 0x58
 800e0d8:	4619      	mov	r1, r3
 800e0da:	4819      	ldr	r0, [pc, #100]	; (800e140 <bld_dataSet+0x90>)
 800e0dc:	f000 f8b5 	bl	800e24a <drv_flashRead>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b55      	cmp	r3, #85	; 0x55
 800e0e4:	d125      	bne.n	800e132 <bld_dataSet+0x82>
    {
        // Calculate CRC.
        (void_t) drv_crcGetCrc32((u8_t*)pData, sizeof(*pData) - sizeof(pData->dataCrc), &pData->dataCrc);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3318      	adds	r3, #24
 800e0ea:	461a      	mov	r2, r3
 800e0ec:	211c      	movs	r1, #28
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7fa feb4 	bl	8008e5c <drv_crcGetCrc32>

        // Copy bootloader data to packed data.
        (void_t*) memcpy((void_t*)&bldPackedData.bldData, (void_t*)pData, sizeof(*pData));
 800e0f4:	f107 030c 	add.w	r3, r7, #12
 800e0f8:	2220      	movs	r2, #32
 800e0fa:	6879      	ldr	r1, [r7, #4]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f007 feb0 	bl	8015e62 <memcpy>

        // Save updated packed data.
        if (drv_flashErase(BLD_DATA_START_ADDRESS, sizeof(bldPackedData)) != GOS_SUCCESS ||
 800e102:	2158      	movs	r1, #88	; 0x58
 800e104:	480e      	ldr	r0, [pc, #56]	; (800e140 <bld_dataSet+0x90>)
 800e106:	f000 f81f 	bl	800e148 <drv_flashErase>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b55      	cmp	r3, #85	; 0x55
 800e10e:	d109      	bne.n	800e124 <bld_dataSet+0x74>
            drv_flashWrite(BLD_DATA_START_ADDRESS, (void_t*)&bldPackedData, sizeof(bldPackedData)) != GOS_SUCCESS)
 800e110:	f107 030c 	add.w	r3, r7, #12
 800e114:	2258      	movs	r2, #88	; 0x58
 800e116:	4619      	mov	r1, r3
 800e118:	4809      	ldr	r0, [pc, #36]	; (800e140 <bld_dataSet+0x90>)
 800e11a:	f000 f85d 	bl	800e1d8 <drv_flashWrite>
 800e11e:	4603      	mov	r3, r0
        if (drv_flashErase(BLD_DATA_START_ADDRESS, sizeof(bldPackedData)) != GOS_SUCCESS ||
 800e120:	2b55      	cmp	r3, #85	; 0x55
 800e122:	d003      	beq.n	800e12c <bld_dataSet+0x7c>
        {
            (void_t) gos_traceTraceFormattedUnsafe("Bootloader data set ERROR\r\n");
 800e124:	4807      	ldr	r0, [pc, #28]	; (800e144 <bld_dataSet+0x94>)
 800e126:	f006 fd09 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
 800e12a:	e002      	b.n	800e132 <bld_dataSet+0x82>
        }
        else
        {
            dataSetResult = GOS_SUCCESS;
 800e12c:	2355      	movs	r3, #85	; 0x55
 800e12e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    else
    {
        // Error.
    }

    return dataSetResult;
 800e132:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e136:	4618      	mov	r0, r3
 800e138:	3768      	adds	r7, #104	; 0x68
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	08004000 	.word	0x08004000
 800e144:	08018610 	.word	0x08018610

0800e148 <drv_flashErase>:

/*
 * Function: drv_flashErase
 */
gos_result_t drv_flashErase (u32_t address, u32_t requiredSize)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b08c      	sub	sp, #48	; 0x30
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t           flashEraseResult = GOS_ERROR;
 800e152:	23ae      	movs	r3, #174	; 0xae
 800e154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    FLASH_EraseInitTypeDef eraseInitStruct  = {0};
 800e158:	f107 030c 	add.w	r3, r7, #12
 800e15c:	2200      	movs	r2, #0
 800e15e:	601a      	str	r2, [r3, #0]
 800e160:	605a      	str	r2, [r3, #4]
 800e162:	609a      	str	r2, [r3, #8]
 800e164:	60da      	str	r2, [r3, #12]
 800e166:	611a      	str	r2, [r3, #16]
    u32_t                  startSector      = 0u;
 800e168:	2300      	movs	r3, #0
 800e16a:	62bb      	str	r3, [r7, #40]	; 0x28
    u32_t                  endSector        = 0u;
 800e16c:	2300      	movs	r3, #0
 800e16e:	627b      	str	r3, [r7, #36]	; 0x24
    u32_t                  endSectorAddress = 0u;
 800e170:	2300      	movs	r3, #0
 800e172:	623b      	str	r3, [r7, #32]
    u32_t                  sectorError      = 0u;
 800e174:	2300      	movs	r3, #0
 800e176:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 800e178:	f7f4 f982 	bl	8002480 <HAL_FLASH_Unlock>

    startSector = drv_flashGetSector(address);
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 f88b 	bl	800e298 <drv_flashGetSector>
 800e182:	62b8      	str	r0, [r7, #40]	; 0x28
    endSectorAddress = address + requiredSize - 1;
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	4413      	add	r3, r2
 800e18a:	3b01      	subs	r3, #1
 800e18c:	623b      	str	r3, [r7, #32]
    endSector = drv_flashGetSector(endSectorAddress);
 800e18e:	6a38      	ldr	r0, [r7, #32]
 800e190:	f000 f882 	bl	800e298 <drv_flashGetSector>
 800e194:	6278      	str	r0, [r7, #36]	; 0x24

    eraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800e196:	2300      	movs	r3, #0
 800e198:	60fb      	str	r3, [r7, #12]
    eraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800e19a:	2302      	movs	r3, #2
 800e19c:	61fb      	str	r3, [r7, #28]
    eraseInitStruct.Sector        = startSector;
 800e19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a0:	617b      	str	r3, [r7, #20]
    eraseInitStruct.NbSectors     = (endSector - startSector) + 1;
 800e1a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) == HAL_OK)
 800e1ac:	f107 0208 	add.w	r2, r7, #8
 800e1b0:	f107 030c 	add.w	r3, r7, #12
 800e1b4:	4611      	mov	r1, r2
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7f4 fad4 	bl	8002764 <HAL_FLASHEx_Erase>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d102      	bne.n	800e1c8 <drv_flashErase+0x80>
    {
        flashEraseResult = GOS_SUCCESS;
 800e1c2:	2355      	movs	r3, #85	; 0x55
 800e1c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    else
    {
        // Flash erase error.
    }

    (void_t) HAL_FLASH_Lock();
 800e1c8:	f7f4 f97c 	bl	80024c4 <HAL_FLASH_Lock>

    return flashEraseResult;
 800e1cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3730      	adds	r7, #48	; 0x30
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <drv_flashWrite>:

/*
 * Function: drv_flashWrite
 */
gos_result_t drv_flashWrite (u32_t address, void_t* pData, u32_t size)
{
 800e1d8:	b5b0      	push	{r4, r5, r7, lr}
 800e1da:	b088      	sub	sp, #32
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t flashWriteResult = GOS_ERROR;
 800e1e4:	23ae      	movs	r3, #174	; 0xae
 800e1e6:	77fb      	strb	r3, [r7, #31]
    u32_t        addressCounter   = 0u;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	61bb      	str	r3, [r7, #24]
    u32_t        idx              = 0u;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	617b      	str	r3, [r7, #20]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 800e1f0:	f7f4 f946 	bl	8002480 <HAL_FLASH_Unlock>

    // Preset flag.
    flashWriteResult = GOS_SUCCESS;
 800e1f4:	2355      	movs	r3, #85	; 0x55
 800e1f6:	77fb      	strb	r3, [r7, #31]

    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	61bb      	str	r3, [r7, #24]
 800e1fc:	e01a      	b.n	800e234 <drv_flashWrite+0x5c>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	18d1      	adds	r1, r2, r3
            ((u32_t*)pData)[idx++]) == HAL_OK)
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	1c5a      	adds	r2, r3, #1
 800e208:	617a      	str	r2, [r7, #20]
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	68ba      	ldr	r2, [r7, #8]
 800e20e:	4413      	add	r3, r2
 800e210:	681b      	ldr	r3, [r3, #0]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (address + addressCounter),
 800e212:	2200      	movs	r2, #0
 800e214:	461c      	mov	r4, r3
 800e216:	4615      	mov	r5, r2
 800e218:	4622      	mov	r2, r4
 800e21a:	462b      	mov	r3, r5
 800e21c:	2002      	movs	r0, #2
 800e21e:	f7f4 f8db 	bl	80023d8 <HAL_FLASH_Program>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d002      	beq.n	800e22e <drv_flashWrite+0x56>
        {
            // Programming OK, continue.
        }
        else
        {
            flashWriteResult = GOS_ERROR;
 800e228:	23ae      	movs	r3, #174	; 0xae
 800e22a:	77fb      	strb	r3, [r7, #31]
            break;
 800e22c:	e006      	b.n	800e23c <drv_flashWrite+0x64>
    for (addressCounter = 0u; addressCounter < size; addressCounter+=4)
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	3304      	adds	r3, #4
 800e232:	61bb      	str	r3, [r7, #24]
 800e234:	69ba      	ldr	r2, [r7, #24]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d3e0      	bcc.n	800e1fe <drv_flashWrite+0x26>
        }
    }

    (void_t) HAL_FLASH_Lock();
 800e23c:	f7f4 f942 	bl	80024c4 <HAL_FLASH_Lock>

    return flashWriteResult;
 800e240:	7ffb      	ldrb	r3, [r7, #31]
}
 800e242:	4618      	mov	r0, r3
 800e244:	3720      	adds	r7, #32
 800e246:	46bd      	mov	sp, r7
 800e248:	bdb0      	pop	{r4, r5, r7, pc}

0800e24a <drv_flashRead>:

/*
 * Function: drv_flashRead
 */
gos_result_t drv_flashRead (u32_t address, void_t* pData, u32_t size)
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b086      	sub	sp, #24
 800e24e:	af00      	add	r7, sp, #0
 800e250:	60f8      	str	r0, [r7, #12]
 800e252:	60b9      	str	r1, [r7, #8]
 800e254:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t flashReadResult = GOS_SUCCESS;
 800e256:	2355      	movs	r3, #85	; 0x55
 800e258:	74fb      	strb	r3, [r7, #19]
    u32_t        addressCounter  = 0u;
 800e25a:	2300      	movs	r3, #0
 800e25c:	617b      	str	r3, [r7, #20]

    /*
     * Function code.
     */
    (void_t) HAL_FLASH_Unlock();
 800e25e:	f7f4 f90f 	bl	8002480 <HAL_FLASH_Unlock>

    for (addressCounter = 0u; addressCounter < size; addressCounter++)
 800e262:	2300      	movs	r3, #0
 800e264:	617b      	str	r3, [r7, #20]
 800e266:	e00c      	b.n	800e282 <drv_flashRead+0x38>
    {
        ((u8_t*)pData)[addressCounter] = *(__IO u8_t*)(address + addressCounter);
 800e268:	68fa      	ldr	r2, [r7, #12]
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	4413      	add	r3, r2
 800e26e:	4619      	mov	r1, r3
 800e270:	68ba      	ldr	r2, [r7, #8]
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	4413      	add	r3, r2
 800e276:	780a      	ldrb	r2, [r1, #0]
 800e278:	b2d2      	uxtb	r2, r2
 800e27a:	701a      	strb	r2, [r3, #0]
    for (addressCounter = 0u; addressCounter < size; addressCounter++)
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	3301      	adds	r3, #1
 800e280:	617b      	str	r3, [r7, #20]
 800e282:	697a      	ldr	r2, [r7, #20]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	429a      	cmp	r2, r3
 800e288:	d3ee      	bcc.n	800e268 <drv_flashRead+0x1e>
    }

    (void_t) HAL_FLASH_Lock();
 800e28a:	f7f4 f91b 	bl	80024c4 <HAL_FLASH_Lock>

    return flashReadResult;
 800e28e:	7cfb      	ldrb	r3, [r7, #19]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3718      	adds	r7, #24
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <drv_flashGetSector>:
 * @param   address : Address to get the related sector number for.
 *
 * @return  Sector number.
 */
GOS_STATIC u32_t drv_flashGetSector (u32_t address)
{
 800e298:	b480      	push	{r7}
 800e29a:	b085      	sub	sp, #20
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u32_t sector = 0u;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    if ((address <= 0x08003FFF) && (address >= 0x08000000))
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	4a2e      	ldr	r2, [pc, #184]	; (800e360 <drv_flashGetSector+0xc8>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d206      	bcs.n	800e2ba <drv_flashGetSector+0x22>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e2b2:	d302      	bcc.n	800e2ba <drv_flashGetSector+0x22>
    {
        sector = FLASH_SECTOR_0;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	60fb      	str	r3, [r7, #12]
 800e2b8:	e04b      	b.n	800e352 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x08007FFF) && (address >= 0x08004000))
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	4a29      	ldr	r2, [pc, #164]	; (800e364 <drv_flashGetSector+0xcc>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d206      	bcs.n	800e2d0 <drv_flashGetSector+0x38>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4a26      	ldr	r2, [pc, #152]	; (800e360 <drv_flashGetSector+0xc8>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d302      	bcc.n	800e2d0 <drv_flashGetSector+0x38>
    {
        sector = FLASH_SECTOR_1;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	60fb      	str	r3, [r7, #12]
 800e2ce:	e040      	b.n	800e352 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800BFFF) && (address >= 0x08008000))
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	4a25      	ldr	r2, [pc, #148]	; (800e368 <drv_flashGetSector+0xd0>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d206      	bcs.n	800e2e6 <drv_flashGetSector+0x4e>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a22      	ldr	r2, [pc, #136]	; (800e364 <drv_flashGetSector+0xcc>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d302      	bcc.n	800e2e6 <drv_flashGetSector+0x4e>
    {
        sector = FLASH_SECTOR_2;
 800e2e0:	2302      	movs	r3, #2
 800e2e2:	60fb      	str	r3, [r7, #12]
 800e2e4:	e035      	b.n	800e352 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0800FFFF) && (address >= 0x0800C000))
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	4a20      	ldr	r2, [pc, #128]	; (800e36c <drv_flashGetSector+0xd4>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d806      	bhi.n	800e2fc <drv_flashGetSector+0x64>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	4a1d      	ldr	r2, [pc, #116]	; (800e368 <drv_flashGetSector+0xd0>)
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d302      	bcc.n	800e2fc <drv_flashGetSector+0x64>
    {
        sector = FLASH_SECTOR_3;
 800e2f6:	2303      	movs	r3, #3
 800e2f8:	60fb      	str	r3, [r7, #12]
 800e2fa:	e02a      	b.n	800e352 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0801FFFF) && (address >= 0x08010000))
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4a1c      	ldr	r2, [pc, #112]	; (800e370 <drv_flashGetSector+0xd8>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d806      	bhi.n	800e312 <drv_flashGetSector+0x7a>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4a19      	ldr	r2, [pc, #100]	; (800e36c <drv_flashGetSector+0xd4>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d902      	bls.n	800e312 <drv_flashGetSector+0x7a>
    {
        sector = FLASH_SECTOR_4;
 800e30c:	2304      	movs	r3, #4
 800e30e:	60fb      	str	r3, [r7, #12]
 800e310:	e01f      	b.n	800e352 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0803FFFF) && (address >= 0x08020000))
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	4a17      	ldr	r2, [pc, #92]	; (800e374 <drv_flashGetSector+0xdc>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d806      	bhi.n	800e328 <drv_flashGetSector+0x90>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4a14      	ldr	r2, [pc, #80]	; (800e370 <drv_flashGetSector+0xd8>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d902      	bls.n	800e328 <drv_flashGetSector+0x90>
    {
        sector = FLASH_SECTOR_5;
 800e322:	2305      	movs	r3, #5
 800e324:	60fb      	str	r3, [r7, #12]
 800e326:	e014      	b.n	800e352 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0805FFFF) && (address >= 0x08040000))
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	4a13      	ldr	r2, [pc, #76]	; (800e378 <drv_flashGetSector+0xe0>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d806      	bhi.n	800e33e <drv_flashGetSector+0xa6>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4a10      	ldr	r2, [pc, #64]	; (800e374 <drv_flashGetSector+0xdc>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d902      	bls.n	800e33e <drv_flashGetSector+0xa6>
    {
        sector = FLASH_SECTOR_6;
 800e338:	2306      	movs	r3, #6
 800e33a:	60fb      	str	r3, [r7, #12]
 800e33c:	e009      	b.n	800e352 <drv_flashGetSector+0xba>
    }
    else if ((address <= 0x0807FFFF) && (address >= 0x08060000))
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	4a0e      	ldr	r2, [pc, #56]	; (800e37c <drv_flashGetSector+0xe4>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d805      	bhi.n	800e352 <drv_flashGetSector+0xba>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4a0b      	ldr	r2, [pc, #44]	; (800e378 <drv_flashGetSector+0xe0>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d901      	bls.n	800e352 <drv_flashGetSector+0xba>
    {
        sector = FLASH_SECTOR_7;
 800e34e:	2307      	movs	r3, #7
 800e350:	60fb      	str	r3, [r7, #12]
    else
    {
        // Wrong address.
    }

    return sector;
 800e352:	68fb      	ldr	r3, [r7, #12]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3714      	adds	r7, #20
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr
 800e360:	08004000 	.word	0x08004000
 800e364:	08008000 	.word	0x08008000
 800e368:	0800c000 	.word	0x0800c000
 800e36c:	0800ffff 	.word	0x0800ffff
 800e370:	0801ffff 	.word	0x0801ffff
 800e374:	0803ffff 	.word	0x0803ffff
 800e378:	0805ffff 	.word	0x0805ffff
 800e37c:	0807ffff 	.word	0x0807ffff

0800e380 <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 800e388:	23ae      	movs	r3, #174	; 0xae
 800e38a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d006      	beq.n	800e3a0 <gos_driverInit+0x20>
    {
        (void_t) memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 800e392:	221c      	movs	r2, #28
 800e394:	6879      	ldr	r1, [r7, #4]
 800e396:	4805      	ldr	r0, [pc, #20]	; (800e3ac <gos_driverInit+0x2c>)
 800e398:	f007 fd63 	bl	8015e62 <memcpy>
        driverInitResult = GOS_SUCCESS;
 800e39c:	2355      	movs	r3, #85	; 0x55
 800e39e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return driverInitResult;
 800e3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	200050cc 	.word	0x200050cc

0800e3b0 <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 800e3b8:	23ae      	movs	r3, #174	; 0xae
 800e3ba:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 800e3bc:	4b07      	ldr	r3, [pc, #28]	; (800e3dc <gos_traceDriverTransmitString+0x2c>)
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d005      	beq.n	800e3d0 <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 800e3c4:	4b05      	ldr	r3, [pc, #20]	; (800e3dc <gos_traceDriverTransmitString+0x2c>)
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	4798      	blx	r3
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	200050cc 	.word	0x200050cc

0800e3e0 <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 800e3e8:	23ae      	movs	r3, #174	; 0xae
 800e3ea:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 800e3ec:	4b07      	ldr	r3, [pc, #28]	; (800e40c <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d005      	beq.n	800e400 <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 800e3f4:	4b05      	ldr	r3, [pc, #20]	; (800e40c <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	4798      	blx	r3
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 800e400:	7bfb      	ldrb	r3, [r7, #15]
}
 800e402:	4618      	mov	r0, r3
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	200050cc 	.word	0x200050cc

0800e410 <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 800e416:	23ae      	movs	r3, #174	; 0xae
 800e418:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 800e41a:	2301      	movs	r3, #1
 800e41c:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800e41e:	2301      	movs	r3, #1
 800e420:	80fb      	strh	r3, [r7, #6]
 800e422:	e038      	b.n	800e496 <gos_kernelInit+0x86>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 800e424:	88fb      	ldrh	r3, [r7, #6]
 800e426:	4a6b      	ldr	r2, [pc, #428]	; (800e5d4 <gos_kernelInit+0x1c4>)
 800e428:	216a      	movs	r1, #106	; 0x6a
 800e42a:	fb01 f303 	mul.w	r3, r1, r3
 800e42e:	4413      	add	r3, r2
 800e430:	2200      	movs	r2, #0
 800e432:	701a      	strb	r2, [r3, #0]
 800e434:	2200      	movs	r2, #0
 800e436:	705a      	strb	r2, [r3, #1]
 800e438:	2200      	movs	r2, #0
 800e43a:	709a      	strb	r2, [r3, #2]
 800e43c:	2200      	movs	r2, #0
 800e43e:	70da      	strb	r2, [r3, #3]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 800e440:	88fb      	ldrh	r3, [r7, #6]
 800e442:	4a64      	ldr	r2, [pc, #400]	; (800e5d4 <gos_kernelInit+0x1c4>)
 800e444:	216a      	movs	r1, #106	; 0x6a
 800e446:	fb01 f303 	mul.w	r3, r1, r3
 800e44a:	4413      	add	r3, r2
 800e44c:	3306      	adds	r3, #6
 800e44e:	22ff      	movs	r2, #255	; 0xff
 800e450:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 800e452:	88fb      	ldrh	r3, [r7, #6]
 800e454:	4a5f      	ldr	r2, [pc, #380]	; (800e5d4 <gos_kernelInit+0x1c4>)
 800e456:	216a      	movs	r1, #106	; 0x6a
 800e458:	fb01 f303 	mul.w	r3, r1, r3
 800e45c:	4413      	add	r3, r2
 800e45e:	3307      	adds	r3, #7
 800e460:	22ff      	movs	r2, #255	; 0xff
 800e462:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 800e464:	88fb      	ldrh	r3, [r7, #6]
 800e466:	4a5b      	ldr	r2, [pc, #364]	; (800e5d4 <gos_kernelInit+0x1c4>)
 800e468:	216a      	movs	r1, #106	; 0x6a
 800e46a:	fb01 f303 	mul.w	r3, r1, r3
 800e46e:	4413      	add	r3, r2
 800e470:	3304      	adds	r3, #4
 800e472:	2205      	movs	r2, #5
 800e474:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 800e476:	88fb      	ldrh	r3, [r7, #6]
 800e478:	4a56      	ldr	r2, [pc, #344]	; (800e5d4 <gos_kernelInit+0x1c4>)
 800e47a:	216a      	movs	r1, #106	; 0x6a
 800e47c:	fb01 f303 	mul.w	r3, r1, r3
 800e480:	4413      	add	r3, r2
 800e482:	3328      	adds	r3, #40	; 0x28
 800e484:	2200      	movs	r2, #0
 800e486:	709a      	strb	r2, [r3, #2]
 800e488:	2200      	movs	r2, #0
 800e48a:	f042 0201 	orr.w	r2, r2, #1
 800e48e:	70da      	strb	r2, [r3, #3]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800e490:	88fb      	ldrh	r3, [r7, #6]
 800e492:	3301      	adds	r3, #1
 800e494:	80fb      	strh	r3, [r7, #6]
 800e496:	88fb      	ldrh	r3, [r7, #6]
 800e498:	2b2f      	cmp	r3, #47	; 0x2f
 800e49a:	d9c3      	bls.n	800e424 <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 800e49c:	4b4e      	ldr	r3, [pc, #312]	; (800e5d8 <gos_kernelInit+0x1c8>)
 800e49e:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	3b04      	subs	r3, #4
 800e4a4:	603b      	str	r3, [r7, #0]
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e4ac:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_idleTask; // PC
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	3b04      	subs	r3, #4
 800e4b2:	603b      	str	r3, [r7, #0]
 800e4b4:	4a49      	ldr	r2, [pc, #292]	; (800e5dc <gos_kernelInit+0x1cc>)
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	3b04      	subs	r3, #4
 800e4be:	603b      	str	r3, [r7, #0]
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	f06f 0202 	mvn.w	r2, #2
 800e4c6:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	3b04      	subs	r3, #4
 800e4cc:	603b      	str	r3, [r7, #0]
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800e4d4:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	3b04      	subs	r3, #4
 800e4da:	603b      	str	r3, [r7, #0]
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800e4e2:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	3b04      	subs	r3, #4
 800e4e8:	603b      	str	r3, [r7, #0]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800e4f0:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	3b04      	subs	r3, #4
 800e4f6:	603b      	str	r3, [r7, #0]
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800e4fe:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	3b04      	subs	r3, #4
 800e504:	603b      	str	r3, [r7, #0]
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	2200      	movs	r2, #0
 800e50a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	3b04      	subs	r3, #4
 800e510:	603b      	str	r3, [r7, #0]
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800e518:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	3b04      	subs	r3, #4
 800e51e:	603b      	str	r3, [r7, #0]
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800e526:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	3b04      	subs	r3, #4
 800e52c:	603b      	str	r3, [r7, #0]
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800e534:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	3b04      	subs	r3, #4
 800e53a:	603b      	str	r3, [r7, #0]
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800e542:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	3b04      	subs	r3, #4
 800e548:	603b      	str	r3, [r7, #0]
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800e550:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	3b04      	subs	r3, #4
 800e556:	603b      	str	r3, [r7, #0]
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800e55e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	3b04      	subs	r3, #4
 800e564:	603b      	str	r3, [r7, #0]
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800e56c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	3b04      	subs	r3, #4
 800e572:	603b      	str	r3, [r7, #0]
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800e57a:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	4a15      	ldr	r2, [pc, #84]	; (800e5d4 <gos_kernelInit+0x1c4>)
 800e580:	63d3      	str	r3, [r2, #60]	; 0x3c

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 800e582:	4b14      	ldr	r3, [pc, #80]	; (800e5d4 <gos_kernelInit+0x1c4>)
 800e584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e586:	4a13      	ldr	r2, [pc, #76]	; (800e5d4 <gos_kernelInit+0x1c4>)
 800e588:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800e58c:	b292      	uxth	r2, r2
 800e58e:	1a9b      	subs	r3, r3, r2
 800e590:	3340      	adds	r3, #64	; 0x40
 800e592:	4a10      	ldr	r2, [pc, #64]	; (800e5d4 <gos_kernelInit+0x1c4>)
 800e594:	f8c2 3066 	str.w	r3, [r2, #102]	; 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 800e598:	4b11      	ldr	r3, [pc, #68]	; (800e5e0 <gos_kernelInit+0x1d0>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a10      	ldr	r2, [pc, #64]	; (800e5e0 <gos_kernelInit+0x1d0>)
 800e59e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e5a2:	6013      	str	r3, [r2, #0]
 800e5a4:	4b0e      	ldr	r3, [pc, #56]	; (800e5e0 <gos_kernelInit+0x1d0>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a0d      	ldr	r2, [pc, #52]	; (800e5e0 <gos_kernelInit+0x1d0>)
 800e5aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5ae:	6013      	str	r3, [r2, #0]
 800e5b0:	4b0b      	ldr	r3, [pc, #44]	; (800e5e0 <gos_kernelInit+0x1d0>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a0a      	ldr	r2, [pc, #40]	; (800e5e0 <gos_kernelInit+0x1d0>)
 800e5b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e5ba:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 800e5bc:	4b09      	ldr	r3, [pc, #36]	; (800e5e4 <gos_kernelInit+0x1d4>)
 800e5be:	2200      	movs	r2, #0
 800e5c0:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 800e5c2:	2355      	movs	r3, #85	; 0x55
 800e5c4:	717b      	strb	r3, [r7, #5]

    return initResult;
 800e5c6:	797b      	ldrb	r3, [r7, #5]
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	20000930 	.word	0x20000930
 800e5d8:	2001ee00 	.word	0x2001ee00
 800e5dc:	08011241 	.word	0x08011241
 800e5e0:	e000ed24 	.word	0xe000ed24
 800e5e4:	200050e9 	.word	0x200050e9

0800e5e8 <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 800e5ee:	23ae      	movs	r3, #174	; 0xae
 800e5f0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 800e5f2:	4b19      	ldr	r3, [pc, #100]	; (800e658 <gos_kernelStart+0x70>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 800e5f8:	f000 fe9c 	bl	800f334 <gos_kernelGetCurrentPsp>
 800e5fc:	f380 8809 	msr	PSP, r0
 800e600:	f3ef 8014 	mrs	r0, CONTROL
 800e604:	f040 0002 	orr.w	r0, r0, #2
 800e608:	f380 8814 	msr	CONTROL, r0
 800e60c:	f3ef 8014 	mrs	r0, CONTROL
 800e610:	f040 0001 	orr.w	r0, r0, #1
 800e614:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 800e618:	4b0f      	ldr	r3, [pc, #60]	; (800e658 <gos_kernelStart+0x70>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a0f      	ldr	r2, [pc, #60]	; (800e65c <gos_kernelStart+0x74>)
 800e61e:	216a      	movs	r1, #106	; 0x6a
 800e620:	fb01 f303 	mul.w	r3, r1, r3
 800e624:	4413      	add	r3, r2
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 800e62a:	480d      	ldr	r0, [pc, #52]	; (800e660 <gos_kernelStart+0x78>)
 800e62c:	f006 fd42 	bl	80150b4 <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 800e630:	4b0c      	ldr	r3, [pc, #48]	; (800e664 <gos_kernelStart+0x7c>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d005      	beq.n	800e644 <gos_kernelStart+0x5c>
 800e638:	4b0a      	ldr	r3, [pc, #40]	; (800e664 <gos_kernelStart+0x7c>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	3b01      	subs	r3, #1
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	4b08      	ldr	r3, [pc, #32]	; (800e664 <gos_kernelStart+0x7c>)
 800e642:	701a      	strb	r2, [r3, #0]

    // Set kernel running flag.
    isKernelRunning = GOS_TRUE;
 800e644:	4b08      	ldr	r3, [pc, #32]	; (800e668 <gos_kernelStart+0x80>)
 800e646:	2236      	movs	r2, #54	; 0x36
 800e648:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 800e64e:	79fb      	ldrb	r3, [r7, #7]
}
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	200050f0 	.word	0x200050f0
 800e65c:	20000930 	.word	0x20000930
 800e660:	200050f8 	.word	0x200050f8
 800e664:	200050e9 	.word	0x200050e9
 800e668:	2000092e 	.word	0x2000092e

0800e66c <gos_kernelRegisterSysTickHook>:

/*
 * Function: gos_kernelRegisterSysTickHook
 */
gos_result_t gos_kernelRegisterSysTickHook (gos_sysTickHook_t sysTickHookFunction)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t hookRegisterResult = GOS_ERROR;
 800e674:	23ae      	movs	r3, #174	; 0xae
 800e676:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d008      	beq.n	800e690 <gos_kernelRegisterSysTickHook+0x24>
 800e67e:	4b08      	ldr	r3, [pc, #32]	; (800e6a0 <gos_kernelRegisterSysTickHook+0x34>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d104      	bne.n	800e690 <gos_kernelRegisterSysTickHook+0x24>
    {
        kernelSysTickHookFunction = sysTickHookFunction;
 800e686:	4a06      	ldr	r2, [pc, #24]	; (800e6a0 <gos_kernelRegisterSysTickHook+0x34>)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 800e68c:	2355      	movs	r3, #85	; 0x55
 800e68e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return hookRegisterResult;
 800e690:	7bfb      	ldrb	r3, [r7, #15]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3714      	adds	r7, #20
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop
 800e6a0:	2000510c 	.word	0x2000510c

0800e6a4 <SysTick_Handler>:
/*
 * Function: gos_ported_sysTickInterrupt
 */
#include <gos_time.h>
void_t gos_ported_sysTickInterrupt (void_t)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    sysTicks++;
 800e6aa:	4b15      	ldr	r3, [pc, #84]	; (800e700 <SysTick_Handler+0x5c>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	4a13      	ldr	r2, [pc, #76]	; (800e700 <SysTick_Handler+0x5c>)
 800e6b2:	6013      	str	r3, [r2, #0]
    (void_t) gos_timeIncreaseSystemTime(1);
 800e6b4:	2001      	movs	r0, #1
 800e6b6:	f005 ff55 	bl	8014564 <gos_timeIncreaseSystemTime>

    // Periodic stack overflow check on currently running task.
    if (isKernelRunning == GOS_TRUE)
 800e6ba:	4b12      	ldr	r3, [pc, #72]	; (800e704 <SysTick_Handler+0x60>)
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	2b36      	cmp	r3, #54	; 0x36
 800e6c0:	d113      	bne.n	800e6ea <SysTick_Handler+0x46>
    {
        gos_kernelCheckTaskStack();
 800e6c2:	f000 fda7 	bl	800f214 <gos_kernelCheckTaskStack>

#if CFG_SCHED_COOPERATIVE == 0
        if (schedDisableCntr == 0u)
 800e6c6:	4b10      	ldr	r3, [pc, #64]	; (800e708 <SysTick_Handler+0x64>)
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d10d      	bne.n	800e6ea <SysTick_Handler+0x46>
 800e6ce:	2316      	movs	r3, #22
 800e6d0:	71fb      	strb	r3, [r7, #7]
GOS_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 800e6d2:	79fb      	ldrb	r3, [r7, #7]
 800e6d4:	2b16      	cmp	r3, #22
 800e6d6:	d106      	bne.n	800e6e6 <SysTick_Handler+0x42>
 800e6d8:	4b0c      	ldr	r3, [pc, #48]	; (800e70c <SysTick_Handler+0x68>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4a0b      	ldr	r2, [pc, #44]	; (800e70c <SysTick_Handler+0x68>)
 800e6de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e6e2:	6013      	str	r3, [r2, #0]
}
 800e6e4:	e000      	b.n	800e6e8 <SysTick_Handler+0x44>
    gos_ported_reschedule(privilege);
 800e6e6:	dfff      	svc	255	; 0xff
}
 800e6e8:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 800e6ea:	4b09      	ldr	r3, [pc, #36]	; (800e710 <SysTick_Handler+0x6c>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d002      	beq.n	800e6f8 <SysTick_Handler+0x54>
        kernelSysTickHookFunction();
 800e6f2:	4b07      	ldr	r3, [pc, #28]	; (800e710 <SysTick_Handler+0x6c>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4798      	blx	r3
}
 800e6f8:	bf00      	nop
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	200050f4 	.word	0x200050f4
 800e704:	2000092e 	.word	0x2000092e
 800e708:	200050e9 	.word	0x200050e9
 800e70c:	e000ed04 	.word	0xe000ed04
 800e710:	2000510c 	.word	0x2000510c

0800e714 <gos_kernelGetSysTicks>:
{
 800e714:	b480      	push	{r7}
 800e716:	af00      	add	r7, sp, #0
    return sysTicks;
 800e718:	4b03      	ldr	r3, [pc, #12]	; (800e728 <gos_kernelGetSysTicks+0x14>)
 800e71a:	681b      	ldr	r3, [r3, #0]
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	200050f4 	.word	0x200050f4

0800e72c <gos_kernelGetCpuUsage>:
{
 800e72c:	b480      	push	{r7}
 800e72e:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 800e730:	4b06      	ldr	r3, [pc, #24]	; (800e74c <gos_kernelGetCpuUsage+0x20>)
 800e732:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e736:	b29b      	uxth	r3, r3
 800e738:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 800e73c:	3310      	adds	r3, #16
 800e73e:	b29b      	uxth	r3, r3
}
 800e740:	4618      	mov	r0, r3
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	20000930 	.word	0x20000930

0800e750 <gos_kernelReset>:
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
    resetRequired = GOS_TRUE;
 800e756:	4b0b      	ldr	r3, [pc, #44]	; (800e784 <gos_kernelReset+0x34>)
 800e758:	2236      	movs	r2, #54	; 0x36
 800e75a:	701a      	strb	r2, [r3, #0]
 800e75c:	2309      	movs	r3, #9
 800e75e:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	2b16      	cmp	r3, #22
 800e764:	d106      	bne.n	800e774 <gos_kernelReset+0x24>
 800e766:	4b08      	ldr	r3, [pc, #32]	; (800e788 <gos_kernelReset+0x38>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a07      	ldr	r2, [pc, #28]	; (800e788 <gos_kernelReset+0x38>)
 800e76c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e770:	6013      	str	r3, [r2, #0]
}
 800e772:	e000      	b.n	800e776 <gos_kernelReset+0x26>
    gos_ported_reschedule(privilege);
 800e774:	dfff      	svc	255	; 0xff
}
 800e776:	bf00      	nop
}
 800e778:	bf00      	nop
 800e77a:	370c      	adds	r7, #12
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr
 800e784:	2000092c 	.word	0x2000092c
 800e788:	e000ed04 	.word	0xe000ed04

0800e78c <gos_kernelDelayMs>:
{
 800e78c:	b480      	push	{r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	4603      	mov	r3, r0
 800e794:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 800e796:	4b0a      	ldr	r3, [pc, #40]	; (800e7c0 <gos_kernelDelayMs+0x34>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 800e79c:	bf00      	nop
 800e79e:	4b08      	ldr	r3, [pc, #32]	; (800e7c0 <gos_kernelDelayMs+0x34>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	88fa      	ldrh	r2, [r7, #6]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d8f5      	bhi.n	800e79e <gos_kernelDelayMs+0x12>
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	200050f4 	.word	0x200050f4

0800e7c4 <gos_kernelCalculateTaskCpuUsages>:
{
 800e7c4:	b590      	push	{r4, r7, lr}
 800e7c6:	b087      	sub	sp, #28
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800e7da:	4ba9      	ldr	r3, [pc, #676]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800e7dc:	795b      	ldrb	r3, [r3, #5]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	4ba8      	ldr	r3, [pc, #672]	; (800ea84 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 800e7e2:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 800e7e6:	4ba6      	ldr	r3, [pc, #664]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800e7e8:	791b      	ldrb	r3, [r3, #4]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	4ba6      	ldr	r3, [pc, #664]	; (800ea88 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 800e7ee:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800e7f2:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 800e7f4:	4ba2      	ldr	r3, [pc, #648]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800e7f6:	885b      	ldrh	r3, [r3, #2]
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e7fe:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 800e802:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 800e804:	4a9e      	ldr	r2, [pc, #632]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800e806:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 800e808:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800e80a:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800e80c:	2300      	movs	r3, #0
 800e80e:	82fb      	strh	r3, [r7, #22]
 800e810:	e110      	b.n	800ea34 <gos_kernelCalculateTaskCpuUsages+0x270>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 800e812:	8afb      	ldrh	r3, [r7, #22]
 800e814:	4a9d      	ldr	r2, [pc, #628]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e816:	216a      	movs	r1, #106	; 0x6a
 800e818:	fb01 f303 	mul.w	r3, r1, r3
 800e81c:	4413      	add	r3, r2
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2b00      	cmp	r3, #0
 800e822:	f000 810c 	beq.w	800ea3e <gos_kernelCalculateTaskCpuUsages+0x27a>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 800e826:	8afb      	ldrh	r3, [r7, #22]
 800e828:	4a98      	ldr	r2, [pc, #608]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e82a:	216a      	movs	r1, #106	; 0x6a
 800e82c:	fb01 f303 	mul.w	r3, r1, r3
 800e830:	4413      	add	r3, r2
 800e832:	335a      	adds	r3, #90	; 0x5a
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	461a      	mov	r2, r3
 800e838:	4b92      	ldr	r3, [pc, #584]	; (800ea84 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 800e83a:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 800e83e:	8afb      	ldrh	r3, [r7, #22]
 800e840:	4992      	ldr	r1, [pc, #584]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e842:	206a      	movs	r0, #106	; 0x6a
 800e844:	fb00 f303 	mul.w	r3, r0, r3
 800e848:	440b      	add	r3, r1
 800e84a:	3359      	adds	r3, #89	; 0x59
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	4619      	mov	r1, r3
 800e850:	4b8d      	ldr	r3, [pc, #564]	; (800ea88 <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 800e852:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 800e856:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 800e858:	8afb      	ldrh	r3, [r7, #22]
 800e85a:	498c      	ldr	r1, [pc, #560]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e85c:	206a      	movs	r0, #106	; 0x6a
 800e85e:	fb00 f303 	mul.w	r3, r0, r3
 800e862:	440b      	add	r3, r1
 800e864:	3350      	adds	r3, #80	; 0x50
 800e866:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	4619      	mov	r1, r3
 800e86e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e872:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 800e876:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 800e878:	8afa      	ldrh	r2, [r7, #22]
 800e87a:	4984      	ldr	r1, [pc, #528]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e87c:	206a      	movs	r0, #106	; 0x6a
 800e87e:	fb00 f202 	mul.w	r2, r0, r2
 800e882:	440a      	add	r2, r1
 800e884:	3250      	adds	r2, #80	; 0x50
 800e886:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 800e88a:	b292      	uxth	r2, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 800e88c:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 800e88e:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	f000 80cb 	beq.w	800ea2e <gos_kernelCalculateTaskCpuUsages+0x26a>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f242 7210 	movw	r2, #10000	; 0x2710
 800e89e:	fb03 f202 	mul.w	r2, r3, r2
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	fbb2 f2f3 	udiv	r2, r2, r3
 800e8a8:	8afb      	ldrh	r3, [r7, #22]
 800e8aa:	b290      	uxth	r0, r2
 800e8ac:	4a77      	ldr	r2, [pc, #476]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e8ae:	216a      	movs	r1, #106	; 0x6a
 800e8b0:	fb01 f303 	mul.w	r3, r1, r3
 800e8b4:	4413      	add	r3, r2
 800e8b6:	3360      	adds	r3, #96	; 0x60
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	809a      	strh	r2, [r3, #4]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 800e8bc:	79fb      	ldrb	r3, [r7, #7]
 800e8be:	2b36      	cmp	r3, #54	; 0x36
 800e8c0:	d004      	beq.n	800e8cc <gos_kernelCalculateTaskCpuUsages+0x108>
 800e8c2:	4b6f      	ldr	r3, [pc, #444]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800e8c4:	791b      	ldrb	r3, [r3, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	f000 80b1 	beq.w	800ea2e <gos_kernelCalculateTaskCpuUsages+0x26a>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f242 7210 	movw	r2, #10000	; 0x2710
 800e8d2:	fb03 f202 	mul.w	r2, r3, r2
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	fbb2 f2f3 	udiv	r2, r2, r3
 800e8dc:	8afb      	ldrh	r3, [r7, #22]
 800e8de:	b290      	uxth	r0, r2
 800e8e0:	4a6a      	ldr	r2, [pc, #424]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e8e2:	216a      	movs	r1, #106	; 0x6a
 800e8e4:	fb01 f303 	mul.w	r3, r1, r3
 800e8e8:	4413      	add	r3, r2
 800e8ea:	3360      	adds	r3, #96	; 0x60
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	805a      	strh	r2, [r3, #2]
                        &taskDescriptors[taskIndex].taskRunTime,
 800e8f0:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMicroseconds(
 800e8f2:	226a      	movs	r2, #106	; 0x6a
 800e8f4:	fb02 f303 	mul.w	r3, r2, r3
 800e8f8:	3348      	adds	r3, #72	; 0x48
 800e8fa:	4a64      	ldr	r2, [pc, #400]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e8fc:	4413      	add	r3, r2
 800e8fe:	1d18      	adds	r0, r3, #4
 800e900:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 800e902:	4a62      	ldr	r2, [pc, #392]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e904:	216a      	movs	r1, #106	; 0x6a
 800e906:	fb01 f303 	mul.w	r3, r1, r3
 800e90a:	4413      	add	r3, r2
 800e90c:	3350      	adds	r3, #80	; 0x50
 800e90e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e912:	b29b      	uxth	r3, r3
                (void_t) gos_runTimeAddMicroseconds(
 800e914:	461a      	mov	r2, r3
 800e916:	2100      	movs	r1, #0
 800e918:	f005 fc9c 	bl	8014254 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 800e91c:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMilliseconds(
 800e91e:	226a      	movs	r2, #106	; 0x6a
 800e920:	fb02 f303 	mul.w	r3, r2, r3
 800e924:	3348      	adds	r3, #72	; 0x48
 800e926:	4a59      	ldr	r2, [pc, #356]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e928:	4413      	add	r3, r2
 800e92a:	1d18      	adds	r0, r3, #4
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 800e92c:	8afb      	ldrh	r3, [r7, #22]
 800e92e:	4a57      	ldr	r2, [pc, #348]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e930:	216a      	movs	r1, #106	; 0x6a
 800e932:	fb01 f303 	mul.w	r3, r1, r3
 800e936:	4413      	add	r3, r2
 800e938:	3350      	adds	r3, #80	; 0x50
 800e93a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e93e:	b29a      	uxth	r2, r3
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 800e940:	8afb      	ldrh	r3, [r7, #22]
 800e942:	4952      	ldr	r1, [pc, #328]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e944:	246a      	movs	r4, #106	; 0x6a
 800e946:	fb04 f303 	mul.w	r3, r4, r3
 800e94a:	440b      	add	r3, r1
 800e94c:	3359      	adds	r3, #89	; 0x59
 800e94e:	781b      	ldrb	r3, [r3, #0]
                (void_t) gos_runTimeAddMilliseconds(
 800e950:	b29b      	uxth	r3, r3
 800e952:	4619      	mov	r1, r3
 800e954:	0149      	lsls	r1, r1, #5
 800e956:	1ac9      	subs	r1, r1, r3
 800e958:	0089      	lsls	r1, r1, #2
 800e95a:	440b      	add	r3, r1
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	b29b      	uxth	r3, r3
 800e960:	4413      	add	r3, r2
 800e962:	b29b      	uxth	r3, r3
 800e964:	4619      	mov	r1, r3
 800e966:	f005 fd55 	bl	8014414 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 800e96a:	8afb      	ldrh	r3, [r7, #22]
 800e96c:	4a47      	ldr	r2, [pc, #284]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e96e:	216a      	movs	r1, #106	; 0x6a
 800e970:	fb01 f303 	mul.w	r3, r1, r3
 800e974:	4413      	add	r3, r2
 800e976:	3350      	adds	r3, #80	; 0x50
 800e978:	2200      	movs	r2, #0
 800e97a:	731a      	strb	r2, [r3, #12]
 800e97c:	2200      	movs	r2, #0
 800e97e:	735a      	strb	r2, [r3, #13]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 800e980:	8afb      	ldrh	r3, [r7, #22]
 800e982:	4a42      	ldr	r2, [pc, #264]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e984:	216a      	movs	r1, #106	; 0x6a
 800e986:	fb01 f303 	mul.w	r3, r1, r3
 800e98a:	4413      	add	r3, r2
 800e98c:	335b      	adds	r3, #91	; 0x5b
 800e98e:	2200      	movs	r2, #0
 800e990:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 800e992:	8afb      	ldrh	r3, [r7, #22]
 800e994:	4a3d      	ldr	r2, [pc, #244]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e996:	216a      	movs	r1, #106	; 0x6a
 800e998:	fb01 f303 	mul.w	r3, r1, r3
 800e99c:	4413      	add	r3, r2
 800e99e:	335a      	adds	r3, #90	; 0x5a
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 800e9a4:	8afb      	ldrh	r3, [r7, #22]
 800e9a6:	4a39      	ldr	r2, [pc, #228]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e9a8:	216a      	movs	r1, #106	; 0x6a
 800e9aa:	fb01 f303 	mul.w	r3, r1, r3
 800e9ae:	4413      	add	r3, r2
 800e9b0:	3359      	adds	r3, #89	; 0x59
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 800e9b6:	8afb      	ldrh	r3, [r7, #22]
 800e9b8:	4a34      	ldr	r2, [pc, #208]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e9ba:	216a      	movs	r1, #106	; 0x6a
 800e9bc:	fb01 f303 	mul.w	r3, r1, r3
 800e9c0:	4413      	add	r3, r2
 800e9c2:	3350      	adds	r3, #80	; 0x50
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	71da      	strb	r2, [r3, #7]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	721a      	strb	r2, [r3, #8]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 800e9cc:	8afb      	ldrh	r3, [r7, #22]
 800e9ce:	4a2f      	ldr	r2, [pc, #188]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e9d0:	216a      	movs	r1, #106	; 0x6a
 800e9d2:	fb01 f303 	mul.w	r3, r1, r3
 800e9d6:	4413      	add	r3, r2
 800e9d8:	3350      	adds	r3, #80	; 0x50
 800e9da:	2200      	movs	r2, #0
 800e9dc:	715a      	strb	r2, [r3, #5]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	719a      	strb	r2, [r3, #6]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 800e9e2:	8afb      	ldrh	r3, [r7, #22]
 800e9e4:	4a29      	ldr	r2, [pc, #164]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e9e6:	216a      	movs	r1, #106	; 0x6a
 800e9e8:	fb01 f303 	mul.w	r3, r1, r3
 800e9ec:	4413      	add	r3, r2
 800e9ee:	3360      	adds	r3, #96	; 0x60
 800e9f0:	885b      	ldrh	r3, [r3, #2]
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	8afb      	ldrh	r3, [r7, #22]
 800e9f6:	4925      	ldr	r1, [pc, #148]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800e9f8:	206a      	movs	r0, #106	; 0x6a
 800e9fa:	fb00 f303 	mul.w	r3, r0, r3
 800e9fe:	440b      	add	r3, r1
 800ea00:	3360      	adds	r3, #96	; 0x60
 800ea02:	881b      	ldrh	r3, [r3, #0]
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d911      	bls.n	800ea2e <gos_kernelCalculateTaskCpuUsages+0x26a>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 800ea0a:	8afa      	ldrh	r2, [r7, #22]
 800ea0c:	8afb      	ldrh	r3, [r7, #22]
 800ea0e:	491f      	ldr	r1, [pc, #124]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800ea10:	206a      	movs	r0, #106	; 0x6a
 800ea12:	fb00 f202 	mul.w	r2, r0, r2
 800ea16:	440a      	add	r2, r1
 800ea18:	3260      	adds	r2, #96	; 0x60
 800ea1a:	8852      	ldrh	r2, [r2, #2]
 800ea1c:	b290      	uxth	r0, r2
 800ea1e:	4a1b      	ldr	r2, [pc, #108]	; (800ea8c <gos_kernelCalculateTaskCpuUsages+0x2c8>)
 800ea20:	216a      	movs	r1, #106	; 0x6a
 800ea22:	fb01 f303 	mul.w	r3, r1, r3
 800ea26:	4413      	add	r3, r2
 800ea28:	3360      	adds	r3, #96	; 0x60
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800ea2e:	8afb      	ldrh	r3, [r7, #22]
 800ea30:	3301      	adds	r3, #1
 800ea32:	82fb      	strh	r3, [r7, #22]
 800ea34:	8afb      	ldrh	r3, [r7, #22]
 800ea36:	2b2f      	cmp	r3, #47	; 0x2f
 800ea38:	f67f aeeb 	bls.w	800e812 <gos_kernelCalculateTaskCpuUsages+0x4e>
 800ea3c:	e000      	b.n	800ea40 <gos_kernelCalculateTaskCpuUsages+0x27c>
            break;
 800ea3e:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 800ea40:	79fb      	ldrb	r3, [r7, #7]
 800ea42:	2b36      	cmp	r3, #54	; 0x36
 800ea44:	d003      	beq.n	800ea4e <gos_kernelCalculateTaskCpuUsages+0x28a>
 800ea46:	4b0e      	ldr	r3, [pc, #56]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800ea48:	791b      	ldrb	r3, [r3, #4]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d013      	beq.n	800ea76 <gos_kernelCalculateTaskCpuUsages+0x2b2>
        monitoringTime.days         = 0u;
 800ea4e:	4b0c      	ldr	r3, [pc, #48]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	71da      	strb	r2, [r3, #7]
 800ea54:	2200      	movs	r2, #0
 800ea56:	721a      	strb	r2, [r3, #8]
        monitoringTime.hours        = 0u;
 800ea58:	4b09      	ldr	r3, [pc, #36]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 800ea5e:	4b08      	ldr	r3, [pc, #32]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800ea60:	2200      	movs	r2, #0
 800ea62:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 800ea64:	4b06      	ldr	r3, [pc, #24]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800ea66:	2200      	movs	r2, #0
 800ea68:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 800ea6a:	4b05      	ldr	r3, [pc, #20]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 800ea70:	4b03      	ldr	r3, [pc, #12]	; (800ea80 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	801a      	strh	r2, [r3, #0]
}
 800ea76:	bf00      	nop
 800ea78:	371c      	adds	r7, #28
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd90      	pop	{r4, r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	200050fc 	.word	0x200050fc
 800ea84:	03938700 	.word	0x03938700
 800ea88:	000f4240 	.word	0x000f4240
 800ea8c:	20000930 	.word	0x20000930

0800ea90 <gos_kernelDump>:
{
 800ea90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea94:	b0a6      	sub	sp, #152	; 0x98
 800ea96:	af14      	add	r7, sp, #80	; 0x50
    u16_t taskIndex = 0u;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 800ea9e:	48ae      	ldr	r0, [pc, #696]	; (800ed58 <gos_kernelDump+0x2c8>)
 800eaa0:	f006 faac 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 800eaa4:	48ad      	ldr	r0, [pc, #692]	; (800ed5c <gos_kernelDump+0x2cc>)
 800eaa6:	f006 faa9 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 800eaaa:	4bad      	ldr	r3, [pc, #692]	; (800ed60 <gos_kernelDump+0x2d0>)
 800eaac:	9302      	str	r3, [sp, #8]
 800eaae:	4bad      	ldr	r3, [pc, #692]	; (800ed64 <gos_kernelDump+0x2d4>)
 800eab0:	9301      	str	r3, [sp, #4]
 800eab2:	4bad      	ldr	r3, [pc, #692]	; (800ed68 <gos_kernelDump+0x2d8>)
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	4bad      	ldr	r3, [pc, #692]	; (800ed6c <gos_kernelDump+0x2dc>)
 800eab8:	4aad      	ldr	r2, [pc, #692]	; (800ed70 <gos_kernelDump+0x2e0>)
 800eaba:	49ae      	ldr	r1, [pc, #696]	; (800ed74 <gos_kernelDump+0x2e4>)
 800eabc:	48ae      	ldr	r0, [pc, #696]	; (800ed78 <gos_kernelDump+0x2e8>)
 800eabe:	f006 fa9d 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 800eac2:	48a6      	ldr	r0, [pc, #664]	; (800ed5c <gos_kernelDump+0x2cc>)
 800eac4:	f006 fa9a 	bl	8014ffc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800eac8:	2300      	movs	r3, #0
 800eaca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800eace:	e1cc      	b.n	800ee6a <gos_kernelDump+0x3da>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 800ead0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ead4:	4aa9      	ldr	r2, [pc, #676]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ead6:	216a      	movs	r1, #106	; 0x6a
 800ead8:	fb01 f303 	mul.w	r3, r1, r3
 800eadc:	4413      	add	r3, r2
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f000 81c8 	beq.w	800ee76 <gos_kernelDump+0x3e6>
                    taskDescriptors[taskIndex].taskId,
 800eae6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eaea:	4aa4      	ldr	r2, [pc, #656]	; (800ed7c <gos_kernelDump+0x2ec>)
 800eaec:	216a      	movs	r1, #106	; 0x6a
 800eaee:	fb01 f303 	mul.w	r3, r1, r3
 800eaf2:	4413      	add	r3, r2
 800eaf4:	3328      	adds	r3, #40	; 0x28
 800eaf6:	885b      	ldrh	r3, [r3, #2]
 800eaf8:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800eafa:	4699      	mov	r9, r3
                    taskDescriptors[taskIndex].taskName,
 800eafc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb00:	226a      	movs	r2, #106	; 0x6a
 800eb02:	fb02 f303 	mul.w	r3, r2, r3
 800eb06:	3308      	adds	r3, #8
 800eb08:	4a9c      	ldr	r2, [pc, #624]	; (800ed7c <gos_kernelDump+0x2ec>)
 800eb0a:	4413      	add	r3, r2
 800eb0c:	f103 0802 	add.w	r8, r3, #2
                    taskDescriptors[taskIndex].taskPriority,
 800eb10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb14:	4a99      	ldr	r2, [pc, #612]	; (800ed7c <gos_kernelDump+0x2ec>)
 800eb16:	216a      	movs	r1, #106	; 0x6a
 800eb18:	fb01 f303 	mul.w	r3, r1, r3
 800eb1c:	4413      	add	r3, r2
 800eb1e:	3306      	adds	r3, #6
 800eb20:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 800eb22:	469a      	mov	sl, r3
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800eb24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb28:	4a94      	ldr	r2, [pc, #592]	; (800ed7c <gos_kernelDump+0x2ec>)
 800eb2a:	216a      	movs	r1, #106	; 0x6a
 800eb2c:	fb01 f303 	mul.w	r3, r1, r3
 800eb30:	4413      	add	r3, r2
 800eb32:	3308      	adds	r3, #8
 800eb34:	881b      	ldrh	r3, [r3, #0]
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	b21b      	sxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	da02      	bge.n	800eb44 <gos_kernelDump+0xb4>
 800eb3e:	4b90      	ldr	r3, [pc, #576]	; (800ed80 <gos_kernelDump+0x2f0>)
 800eb40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb42:	e001      	b.n	800eb48 <gos_kernelDump+0xb8>
 800eb44:	4b8f      	ldr	r3, [pc, #572]	; (800ed84 <gos_kernelDump+0x2f4>)
 800eb46:	63fb      	str	r3, [r7, #60]	; 0x3c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800eb48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb4c:	4a8b      	ldr	r2, [pc, #556]	; (800ed7c <gos_kernelDump+0x2ec>)
 800eb4e:	216a      	movs	r1, #106	; 0x6a
 800eb50:	fb01 f303 	mul.w	r3, r1, r3
 800eb54:	4413      	add	r3, r2
 800eb56:	3308      	adds	r3, #8
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
            (void_t) gos_shellDriverTransmitString(
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d002      	beq.n	800eb6a <gos_kernelDump+0xda>
 800eb64:	4b86      	ldr	r3, [pc, #536]	; (800ed80 <gos_kernelDump+0x2f0>)
 800eb66:	63bb      	str	r3, [r7, #56]	; 0x38
 800eb68:	e001      	b.n	800eb6e <gos_kernelDump+0xde>
 800eb6a:	4b86      	ldr	r3, [pc, #536]	; (800ed84 <gos_kernelDump+0x2f4>)
 800eb6c:	63bb      	str	r3, [r7, #56]	; 0x38
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800eb6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb72:	4a82      	ldr	r2, [pc, #520]	; (800ed7c <gos_kernelDump+0x2ec>)
 800eb74:	216a      	movs	r1, #106	; 0x6a
 800eb76:	fb01 f303 	mul.w	r3, r1, r3
 800eb7a:	4413      	add	r3, r2
 800eb7c:	3308      	adds	r3, #8
 800eb7e:	881b      	ldrh	r3, [r3, #0]
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
            (void_t) gos_shellDriverTransmitString(
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d002      	beq.n	800eb90 <gos_kernelDump+0x100>
 800eb8a:	4b7d      	ldr	r3, [pc, #500]	; (800ed80 <gos_kernelDump+0x2f0>)
 800eb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800eb8e:	e001      	b.n	800eb94 <gos_kernelDump+0x104>
 800eb90:	4b7c      	ldr	r3, [pc, #496]	; (800ed84 <gos_kernelDump+0x2f4>)
 800eb92:	637b      	str	r3, [r7, #52]	; 0x34
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800eb94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb98:	4a78      	ldr	r2, [pc, #480]	; (800ed7c <gos_kernelDump+0x2ec>)
 800eb9a:	216a      	movs	r1, #106	; 0x6a
 800eb9c:	fb01 f303 	mul.w	r3, r1, r3
 800eba0:	4413      	add	r3, r2
 800eba2:	3308      	adds	r3, #8
 800eba4:	881b      	ldrh	r3, [r3, #0]
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
            (void_t) gos_shellDriverTransmitString(
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d002      	beq.n	800ebb6 <gos_kernelDump+0x126>
 800ebb0:	4b73      	ldr	r3, [pc, #460]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ebb2:	633b      	str	r3, [r7, #48]	; 0x30
 800ebb4:	e001      	b.n	800ebba <gos_kernelDump+0x12a>
 800ebb6:	4b73      	ldr	r3, [pc, #460]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ebb8:	633b      	str	r3, [r7, #48]	; 0x30
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ebba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ebbe:	4a6f      	ldr	r2, [pc, #444]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ebc0:	216a      	movs	r1, #106	; 0x6a
 800ebc2:	fb01 f303 	mul.w	r3, r1, r3
 800ebc6:	4413      	add	r3, r2
 800ebc8:	3308      	adds	r3, #8
 800ebca:	881b      	ldrh	r3, [r3, #0]
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
            (void_t) gos_shellDriverTransmitString(
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d002      	beq.n	800ebdc <gos_kernelDump+0x14c>
 800ebd6:	4b6a      	ldr	r3, [pc, #424]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ebd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebda:	e001      	b.n	800ebe0 <gos_kernelDump+0x150>
 800ebdc:	4b69      	ldr	r3, [pc, #420]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ebde:	62fb      	str	r3, [r7, #44]	; 0x2c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ebe0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ebe4:	4a65      	ldr	r2, [pc, #404]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ebe6:	216a      	movs	r1, #106	; 0x6a
 800ebe8:	fb01 f303 	mul.w	r3, r1, r3
 800ebec:	4413      	add	r3, r2
 800ebee:	3308      	adds	r3, #8
 800ebf0:	881b      	ldrh	r3, [r3, #0]
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
            (void_t) gos_shellDriverTransmitString(
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d002      	beq.n	800ec02 <gos_kernelDump+0x172>
 800ebfc:	4b60      	ldr	r3, [pc, #384]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ebfe:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec00:	e001      	b.n	800ec06 <gos_kernelDump+0x176>
 800ec02:	4b60      	ldr	r3, [pc, #384]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ec04:	62bb      	str	r3, [r7, #40]	; 0x28
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ec06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ec0a:	4a5c      	ldr	r2, [pc, #368]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ec0c:	216a      	movs	r1, #106	; 0x6a
 800ec0e:	fb01 f303 	mul.w	r3, r1, r3
 800ec12:	4413      	add	r3, r2
 800ec14:	3308      	adds	r3, #8
 800ec16:	881b      	ldrh	r3, [r3, #0]
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
            (void_t) gos_shellDriverTransmitString(
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d002      	beq.n	800ec28 <gos_kernelDump+0x198>
 800ec22:	4b57      	ldr	r3, [pc, #348]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ec24:	627b      	str	r3, [r7, #36]	; 0x24
 800ec26:	e001      	b.n	800ec2c <gos_kernelDump+0x19c>
 800ec28:	4b56      	ldr	r3, [pc, #344]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ec2a:	627b      	str	r3, [r7, #36]	; 0x24
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ec2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ec30:	4a52      	ldr	r2, [pc, #328]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ec32:	216a      	movs	r1, #106	; 0x6a
 800ec34:	fb01 f303 	mul.w	r3, r1, r3
 800ec38:	4413      	add	r3, r2
 800ec3a:	3308      	adds	r3, #8
 800ec3c:	881b      	ldrh	r3, [r3, #0]
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	f403 7380 	and.w	r3, r3, #256	; 0x100
            (void_t) gos_shellDriverTransmitString(
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d002      	beq.n	800ec4e <gos_kernelDump+0x1be>
 800ec48:	4b4d      	ldr	r3, [pc, #308]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ec4a:	623b      	str	r3, [r7, #32]
 800ec4c:	e001      	b.n	800ec52 <gos_kernelDump+0x1c2>
 800ec4e:	4b4d      	ldr	r3, [pc, #308]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ec50:	623b      	str	r3, [r7, #32]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ec52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ec56:	4a49      	ldr	r2, [pc, #292]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ec58:	216a      	movs	r1, #106	; 0x6a
 800ec5a:	fb01 f303 	mul.w	r3, r1, r3
 800ec5e:	4413      	add	r3, r2
 800ec60:	3308      	adds	r3, #8
 800ec62:	881b      	ldrh	r3, [r3, #0]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	f003 0380 	and.w	r3, r3, #128	; 0x80
            (void_t) gos_shellDriverTransmitString(
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d002      	beq.n	800ec74 <gos_kernelDump+0x1e4>
 800ec6e:	4b44      	ldr	r3, [pc, #272]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ec70:	61fb      	str	r3, [r7, #28]
 800ec72:	e001      	b.n	800ec78 <gos_kernelDump+0x1e8>
 800ec74:	4b43      	ldr	r3, [pc, #268]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ec76:	61fb      	str	r3, [r7, #28]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ec78:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ec7c:	493f      	ldr	r1, [pc, #252]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ec7e:	236a      	movs	r3, #106	; 0x6a
 800ec80:	fb02 f303 	mul.w	r3, r2, r3
 800ec84:	440b      	add	r3, r1
 800ec86:	3308      	adds	r3, #8
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
            (void_t) gos_shellDriverTransmitString(
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d002      	beq.n	800ec9a <gos_kernelDump+0x20a>
 800ec94:	4b3a      	ldr	r3, [pc, #232]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ec96:	61bb      	str	r3, [r7, #24]
 800ec98:	e001      	b.n	800ec9e <gos_kernelDump+0x20e>
 800ec9a:	4b3a      	ldr	r3, [pc, #232]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ec9c:	61bb      	str	r3, [r7, #24]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ec9e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800eca2:	4936      	ldr	r1, [pc, #216]	; (800ed7c <gos_kernelDump+0x2ec>)
 800eca4:	236a      	movs	r3, #106	; 0x6a
 800eca6:	fb02 f303 	mul.w	r3, r2, r3
 800ecaa:	440b      	add	r3, r1
 800ecac:	3308      	adds	r3, #8
 800ecae:	881b      	ldrh	r3, [r3, #0]
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	f003 0320 	and.w	r3, r3, #32
            (void_t) gos_shellDriverTransmitString(
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d002      	beq.n	800ecc0 <gos_kernelDump+0x230>
 800ecba:	4b31      	ldr	r3, [pc, #196]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ecbc:	617b      	str	r3, [r7, #20]
 800ecbe:	e001      	b.n	800ecc4 <gos_kernelDump+0x234>
 800ecc0:	4b30      	ldr	r3, [pc, #192]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ecc2:	617b      	str	r3, [r7, #20]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ecc4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ecc8:	492c      	ldr	r1, [pc, #176]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ecca:	236a      	movs	r3, #106	; 0x6a
 800eccc:	fb02 f303 	mul.w	r3, r2, r3
 800ecd0:	440b      	add	r3, r1
 800ecd2:	3308      	adds	r3, #8
 800ecd4:	881b      	ldrh	r3, [r3, #0]
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	f003 0310 	and.w	r3, r3, #16
            (void_t) gos_shellDriverTransmitString(
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d002      	beq.n	800ece6 <gos_kernelDump+0x256>
 800ece0:	4b27      	ldr	r3, [pc, #156]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ece2:	613b      	str	r3, [r7, #16]
 800ece4:	e001      	b.n	800ecea <gos_kernelDump+0x25a>
 800ece6:	4b27      	ldr	r3, [pc, #156]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ece8:	613b      	str	r3, [r7, #16]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ecea:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ecee:	4923      	ldr	r1, [pc, #140]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ecf0:	236a      	movs	r3, #106	; 0x6a
 800ecf2:	fb02 f303 	mul.w	r3, r2, r3
 800ecf6:	440b      	add	r3, r1
 800ecf8:	3308      	adds	r3, #8
 800ecfa:	881b      	ldrh	r3, [r3, #0]
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	f003 0308 	and.w	r3, r3, #8
            (void_t) gos_shellDriverTransmitString(
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d002      	beq.n	800ed0c <gos_kernelDump+0x27c>
 800ed06:	4b1e      	ldr	r3, [pc, #120]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ed08:	60fb      	str	r3, [r7, #12]
 800ed0a:	e001      	b.n	800ed10 <gos_kernelDump+0x280>
 800ed0c:	4b1d      	ldr	r3, [pc, #116]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ed0e:	60fb      	str	r3, [r7, #12]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ed10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ed14:	4919      	ldr	r1, [pc, #100]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ed16:	236a      	movs	r3, #106	; 0x6a
 800ed18:	fb02 f303 	mul.w	r3, r2, r3
 800ed1c:	440b      	add	r3, r1
 800ed1e:	3308      	adds	r3, #8
 800ed20:	881b      	ldrh	r3, [r3, #0]
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	f003 0304 	and.w	r3, r3, #4
            (void_t) gos_shellDriverTransmitString(
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d002      	beq.n	800ed32 <gos_kernelDump+0x2a2>
 800ed2c:	4b14      	ldr	r3, [pc, #80]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ed2e:	60bb      	str	r3, [r7, #8]
 800ed30:	e001      	b.n	800ed36 <gos_kernelDump+0x2a6>
 800ed32:	4b14      	ldr	r3, [pc, #80]	; (800ed84 <gos_kernelDump+0x2f4>)
 800ed34:	60bb      	str	r3, [r7, #8]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ed36:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ed3a:	4910      	ldr	r1, [pc, #64]	; (800ed7c <gos_kernelDump+0x2ec>)
 800ed3c:	236a      	movs	r3, #106	; 0x6a
 800ed3e:	fb02 f303 	mul.w	r3, r2, r3
 800ed42:	440b      	add	r3, r1
 800ed44:	3308      	adds	r3, #8
 800ed46:	881b      	ldrh	r3, [r3, #0]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	f003 0302 	and.w	r3, r3, #2
            (void_t) gos_shellDriverTransmitString(
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d01a      	beq.n	800ed88 <gos_kernelDump+0x2f8>
 800ed52:	4b0b      	ldr	r3, [pc, #44]	; (800ed80 <gos_kernelDump+0x2f0>)
 800ed54:	607b      	str	r3, [r7, #4]
 800ed56:	e019      	b.n	800ed8c <gos_kernelDump+0x2fc>
 800ed58:	08018668 	.word	0x08018668
 800ed5c:	08018678 	.word	0x08018678
 800ed60:	08018714 	.word	0x08018714
 800ed64:	0801871c 	.word	0x0801871c
 800ed68:	08018724 	.word	0x08018724
 800ed6c:	080186d4 	.word	0x080186d4
 800ed70:	080186dc 	.word	0x080186dc
 800ed74:	080186e4 	.word	0x080186e4
 800ed78:	080186e8 	.word	0x080186e8
 800ed7c:	20000930 	.word	0x20000930
 800ed80:	08018730 	.word	0x08018730
 800ed84:	08018738 	.word	0x08018738
 800ed88:	4b7d      	ldr	r3, [pc, #500]	; (800ef80 <gos_kernelDump+0x4f0>)
 800ed8a:	607b      	str	r3, [r7, #4]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 800ed8c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ed90:	497c      	ldr	r1, [pc, #496]	; (800ef84 <gos_kernelDump+0x4f4>)
 800ed92:	236a      	movs	r3, #106	; 0x6a
 800ed94:	fb02 f303 	mul.w	r3, r2, r3
 800ed98:	440b      	add	r3, r1
 800ed9a:	3308      	adds	r3, #8
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	f003 0301 	and.w	r3, r3, #1
            (void_t) gos_shellDriverTransmitString(
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d001      	beq.n	800edac <gos_kernelDump+0x31c>
 800eda8:	4d77      	ldr	r5, [pc, #476]	; (800ef88 <gos_kernelDump+0x4f8>)
 800edaa:	e000      	b.n	800edae <gos_kernelDump+0x31e>
 800edac:	4d74      	ldr	r5, [pc, #464]	; (800ef80 <gos_kernelDump+0x4f0>)
                    taskDescriptors[taskIndex].taskCpuUsage / 100,
 800edae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800edb2:	4974      	ldr	r1, [pc, #464]	; (800ef84 <gos_kernelDump+0x4f4>)
 800edb4:	236a      	movs	r3, #106	; 0x6a
 800edb6:	fb02 f303 	mul.w	r3, r2, r3
 800edba:	440b      	add	r3, r1
 800edbc:	3360      	adds	r3, #96	; 0x60
 800edbe:	885b      	ldrh	r3, [r3, #2]
 800edc0:	b29a      	uxth	r2, r3
            (void_t) gos_shellDriverTransmitString(
 800edc2:	4b72      	ldr	r3, [pc, #456]	; (800ef8c <gos_kernelDump+0x4fc>)
 800edc4:	fba3 2302 	umull	r2, r3, r3, r2
 800edc8:	095b      	lsrs	r3, r3, #5
 800edca:	b29b      	uxth	r3, r3
 800edcc:	461e      	mov	r6, r3
                    taskDescriptors[taskIndex].taskCpuUsage % 100,
 800edce:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800edd2:	496c      	ldr	r1, [pc, #432]	; (800ef84 <gos_kernelDump+0x4f4>)
 800edd4:	236a      	movs	r3, #106	; 0x6a
 800edd6:	fb02 f303 	mul.w	r3, r2, r3
 800edda:	440b      	add	r3, r1
 800eddc:	3360      	adds	r3, #96	; 0x60
 800edde:	885b      	ldrh	r3, [r3, #2]
 800ede0:	b299      	uxth	r1, r3
            (void_t) gos_shellDriverTransmitString(
 800ede2:	4b6a      	ldr	r3, [pc, #424]	; (800ef8c <gos_kernelDump+0x4fc>)
 800ede4:	fba3 2301 	umull	r2, r3, r3, r1
 800ede8:	095a      	lsrs	r2, r3, #5
 800edea:	2364      	movs	r3, #100	; 0x64
 800edec:	fb02 f303 	mul.w	r3, r2, r3
 800edf0:	1acb      	subs	r3, r1, r3
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	461c      	mov	r4, r3
 800edf6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800edfa:	4962      	ldr	r1, [pc, #392]	; (800ef84 <gos_kernelDump+0x4f4>)
 800edfc:	236a      	movs	r3, #106	; 0x6a
 800edfe:	fb02 f303 	mul.w	r3, r2, r3
 800ee02:	440b      	add	r3, r1
 800ee04:	3304      	adds	r3, #4
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f000 fc25 	bl	800f658 <gos_kernelGetTaskStateString>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	9312      	str	r3, [sp, #72]	; 0x48
 800ee12:	9411      	str	r4, [sp, #68]	; 0x44
 800ee14:	9610      	str	r6, [sp, #64]	; 0x40
 800ee16:	950f      	str	r5, [sp, #60]	; 0x3c
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	930e      	str	r3, [sp, #56]	; 0x38
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	930d      	str	r3, [sp, #52]	; 0x34
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	930c      	str	r3, [sp, #48]	; 0x30
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	9308      	str	r3, [sp, #32]
 800ee34:	6a3b      	ldr	r3, [r7, #32]
 800ee36:	9307      	str	r3, [sp, #28]
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3a:	9306      	str	r3, [sp, #24]
 800ee3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3e:	9305      	str	r3, [sp, #20]
 800ee40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee42:	9304      	str	r3, [sp, #16]
 800ee44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee46:	9303      	str	r3, [sp, #12]
 800ee48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee4a:	9302      	str	r3, [sp, #8]
 800ee4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4e:	9301      	str	r3, [sp, #4]
 800ee50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee52:	9300      	str	r3, [sp, #0]
 800ee54:	4653      	mov	r3, sl
 800ee56:	4642      	mov	r2, r8
 800ee58:	4649      	mov	r1, r9
 800ee5a:	484d      	ldr	r0, [pc, #308]	; (800ef90 <gos_kernelDump+0x500>)
 800ee5c:	f006 f8ce 	bl	8014ffc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800ee60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee64:	3301      	adds	r3, #1
 800ee66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ee6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee6e:	2b2f      	cmp	r3, #47	; 0x2f
 800ee70:	f67f ae2e 	bls.w	800ead0 <gos_kernelDump+0x40>
 800ee74:	e000      	b.n	800ee78 <gos_kernelDump+0x3e8>
            break;
 800ee76:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 800ee78:	4846      	ldr	r0, [pc, #280]	; (800ef94 <gos_kernelDump+0x504>)
 800ee7a:	f006 f8bf 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 800ee7e:	4846      	ldr	r0, [pc, #280]	; (800ef98 <gos_kernelDump+0x508>)
 800ee80:	f006 f8bc 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 800ee84:	4845      	ldr	r0, [pc, #276]	; (800ef9c <gos_kernelDump+0x50c>)
 800ee86:	f006 f8b9 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 800ee8a:	4b45      	ldr	r3, [pc, #276]	; (800efa0 <gos_kernelDump+0x510>)
 800ee8c:	4a45      	ldr	r2, [pc, #276]	; (800efa4 <gos_kernelDump+0x514>)
 800ee8e:	4946      	ldr	r1, [pc, #280]	; (800efa8 <gos_kernelDump+0x518>)
 800ee90:	4846      	ldr	r0, [pc, #280]	; (800efac <gos_kernelDump+0x51c>)
 800ee92:	f006 f8b3 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 800ee96:	4841      	ldr	r0, [pc, #260]	; (800ef9c <gos_kernelDump+0x50c>)
 800ee98:	f006 f8b0 	bl	8014ffc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800eea2:	e04c      	b.n	800ef3e <gos_kernelDump+0x4ae>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 800eea4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eea8:	4a36      	ldr	r2, [pc, #216]	; (800ef84 <gos_kernelDump+0x4f4>)
 800eeaa:	216a      	movs	r1, #106	; 0x6a
 800eeac:	fb01 f303 	mul.w	r3, r1, r3
 800eeb0:	4413      	add	r3, r2
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d047      	beq.n	800ef48 <gos_kernelDump+0x4b8>
                    taskDescriptors[taskIndex].taskId,
 800eeb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eebc:	4a31      	ldr	r2, [pc, #196]	; (800ef84 <gos_kernelDump+0x4f4>)
 800eebe:	216a      	movs	r1, #106	; 0x6a
 800eec0:	fb01 f303 	mul.w	r3, r1, r3
 800eec4:	4413      	add	r3, r2
 800eec6:	3328      	adds	r3, #40	; 0x28
 800eec8:	885b      	ldrh	r3, [r3, #2]
 800eeca:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800eecc:	461c      	mov	r4, r3
                    taskDescriptors[taskIndex].taskName,
 800eece:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eed2:	226a      	movs	r2, #106	; 0x6a
 800eed4:	fb02 f303 	mul.w	r3, r2, r3
 800eed8:	3308      	adds	r3, #8
 800eeda:	4a2a      	ldr	r2, [pc, #168]	; (800ef84 <gos_kernelDump+0x4f4>)
 800eedc:	4413      	add	r3, r2
 800eede:	1c99      	adds	r1, r3, #2
                    taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 800eee0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eee4:	4a27      	ldr	r2, [pc, #156]	; (800ef84 <gos_kernelDump+0x4f4>)
 800eee6:	206a      	movs	r0, #106	; 0x6a
 800eee8:	fb00 f303 	mul.w	r3, r0, r3
 800eeec:	4413      	add	r3, r2
 800eeee:	3360      	adds	r3, #96	; 0x60
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800eef4:	4a25      	ldr	r2, [pc, #148]	; (800ef8c <gos_kernelDump+0x4fc>)
 800eef6:	fba2 2303 	umull	r2, r3, r2, r3
 800eefa:	095b      	lsrs	r3, r3, #5
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	461d      	mov	r5, r3
                    taskDescriptors[taskIndex].taskCpuUsageMax % 100
 800ef00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ef04:	4a1f      	ldr	r2, [pc, #124]	; (800ef84 <gos_kernelDump+0x4f4>)
 800ef06:	206a      	movs	r0, #106	; 0x6a
 800ef08:	fb00 f303 	mul.w	r3, r0, r3
 800ef0c:	4413      	add	r3, r2
 800ef0e:	3360      	adds	r3, #96	; 0x60
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800ef14:	4a1d      	ldr	r2, [pc, #116]	; (800ef8c <gos_kernelDump+0x4fc>)
 800ef16:	fba2 0203 	umull	r0, r2, r2, r3
 800ef1a:	0952      	lsrs	r2, r2, #5
 800ef1c:	2064      	movs	r0, #100	; 0x64
 800ef1e:	fb00 f202 	mul.w	r2, r0, r2
 800ef22:	1a9b      	subs	r3, r3, r2
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	462b      	mov	r3, r5
 800ef2a:	460a      	mov	r2, r1
 800ef2c:	4621      	mov	r1, r4
 800ef2e:	4820      	ldr	r0, [pc, #128]	; (800efb0 <gos_kernelDump+0x520>)
 800ef30:	f006 f864 	bl	8014ffc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800ef34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ef38:	3301      	adds	r3, #1
 800ef3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ef3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ef42:	2b2f      	cmp	r3, #47	; 0x2f
 800ef44:	d9ae      	bls.n	800eea4 <gos_kernelDump+0x414>
 800ef46:	e000      	b.n	800ef4a <gos_kernelDump+0x4ba>
            break;
 800ef48:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 800ef4a:	481a      	ldr	r0, [pc, #104]	; (800efb4 <gos_kernelDump+0x524>)
 800ef4c:	f006 f856 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 800ef50:	4819      	ldr	r0, [pc, #100]	; (800efb8 <gos_kernelDump+0x528>)
 800ef52:	f006 f853 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 800ef56:	4819      	ldr	r0, [pc, #100]	; (800efbc <gos_kernelDump+0x52c>)
 800ef58:	f006 f850 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 800ef5c:	4b18      	ldr	r3, [pc, #96]	; (800efc0 <gos_kernelDump+0x530>)
 800ef5e:	9301      	str	r3, [sp, #4]
 800ef60:	4b18      	ldr	r3, [pc, #96]	; (800efc4 <gos_kernelDump+0x534>)
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	4b18      	ldr	r3, [pc, #96]	; (800efc8 <gos_kernelDump+0x538>)
 800ef66:	4a0f      	ldr	r2, [pc, #60]	; (800efa4 <gos_kernelDump+0x514>)
 800ef68:	490f      	ldr	r1, [pc, #60]	; (800efa8 <gos_kernelDump+0x518>)
 800ef6a:	4818      	ldr	r0, [pc, #96]	; (800efcc <gos_kernelDump+0x53c>)
 800ef6c:	f006 f846 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 800ef70:	4812      	ldr	r0, [pc, #72]	; (800efbc <gos_kernelDump+0x52c>)
 800ef72:	f006 f843 	bl	8014ffc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800ef76:	2300      	movs	r3, #0
 800ef78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ef7c:	e0b1      	b.n	800f0e2 <gos_kernelDump+0x652>
 800ef7e:	bf00      	nop
 800ef80:	08018738 	.word	0x08018738
 800ef84:	20000930 	.word	0x20000930
 800ef88:	08018730 	.word	0x08018730
 800ef8c:	51eb851f 	.word	0x51eb851f
 800ef90:	08018740 	.word	0x08018740
 800ef94:	08018794 	.word	0x08018794
 800ef98:	080187f4 	.word	0x080187f4
 800ef9c:	08018808 	.word	0x08018808
 800efa0:	08018844 	.word	0x08018844
 800efa4:	080186dc 	.word	0x080186dc
 800efa8:	080186e4 	.word	0x080186e4
 800efac:	08018850 	.word	0x08018850
 800efb0:	08018868 	.word	0x08018868
 800efb4:	08018888 	.word	0x08018888
 800efb8:	080188c4 	.word	0x080188c4
 800efbc:	080188d8 	.word	0x080188d8
 800efc0:	08018958 	.word	0x08018958
 800efc4:	08018964 	.word	0x08018964
 800efc8:	0801892c 	.word	0x0801892c
 800efcc:	08018934 	.word	0x08018934
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 800efd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800efd4:	4a4a      	ldr	r2, [pc, #296]	; (800f100 <gos_kernelDump+0x670>)
 800efd6:	216a      	movs	r1, #106	; 0x6a
 800efd8:	fb01 f303 	mul.w	r3, r1, r3
 800efdc:	4413      	add	r3, r2
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f000 8084 	beq.w	800f0ee <gos_kernelDump+0x65e>
                    taskDescriptors[taskIndex].taskId,
 800efe6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800efea:	4a45      	ldr	r2, [pc, #276]	; (800f100 <gos_kernelDump+0x670>)
 800efec:	216a      	movs	r1, #106	; 0x6a
 800efee:	fb01 f303 	mul.w	r3, r1, r3
 800eff2:	4413      	add	r3, r2
 800eff4:	3328      	adds	r3, #40	; 0x28
 800eff6:	885b      	ldrh	r3, [r3, #2]
 800eff8:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800effa:	469c      	mov	ip, r3
                    taskDescriptors[taskIndex].taskName,
 800effc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f000:	226a      	movs	r2, #106	; 0x6a
 800f002:	fb02 f303 	mul.w	r3, r2, r3
 800f006:	3308      	adds	r3, #8
 800f008:	4a3d      	ldr	r2, [pc, #244]	; (800f100 <gos_kernelDump+0x670>)
 800f00a:	4413      	add	r3, r2
 800f00c:	1c9c      	adds	r4, r3, #2
                    taskDescriptors[taskIndex].taskStackSize,
 800f00e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f012:	4a3b      	ldr	r2, [pc, #236]	; (800f100 <gos_kernelDump+0x670>)
 800f014:	216a      	movs	r1, #106	; 0x6a
 800f016:	fb01 f303 	mul.w	r3, r1, r3
 800f01a:	4413      	add	r3, r2
 800f01c:	3348      	adds	r3, #72	; 0x48
 800f01e:	881b      	ldrh	r3, [r3, #0]
 800f020:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800f022:	469e      	mov	lr, r3
                    taskDescriptors[taskIndex].taskStackSizeMaxUsage,
 800f024:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f028:	4a35      	ldr	r2, [pc, #212]	; (800f100 <gos_kernelDump+0x670>)
 800f02a:	216a      	movs	r1, #106	; 0x6a
 800f02c:	fb01 f303 	mul.w	r3, r1, r3
 800f030:	4413      	add	r3, r2
 800f032:	3348      	adds	r3, #72	; 0x48
 800f034:	885b      	ldrh	r3, [r3, #2]
 800f036:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800f038:	461e      	mov	r6, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 800f03a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f03e:	4a30      	ldr	r2, [pc, #192]	; (800f100 <gos_kernelDump+0x670>)
 800f040:	216a      	movs	r1, #106	; 0x6a
 800f042:	fb01 f303 	mul.w	r3, r1, r3
 800f046:	4413      	add	r3, r2
 800f048:	3348      	adds	r3, #72	; 0x48
 800f04a:	885b      	ldrh	r3, [r3, #2]
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	461a      	mov	r2, r3
 800f050:	f242 7310 	movw	r3, #10000	; 0x2710
 800f054:	fb02 f303 	mul.w	r3, r2, r3
 800f058:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f05c:	4928      	ldr	r1, [pc, #160]	; (800f100 <gos_kernelDump+0x670>)
 800f05e:	206a      	movs	r0, #106	; 0x6a
 800f060:	fb00 f202 	mul.w	r2, r0, r2
 800f064:	440a      	add	r2, r1
 800f066:	3248      	adds	r2, #72	; 0x48
 800f068:	8812      	ldrh	r2, [r2, #0]
 800f06a:	b292      	uxth	r2, r2
 800f06c:	fb93 f3f2 	sdiv	r3, r3, r2
            (void_t) gos_shellDriverTransmitString(
 800f070:	4a24      	ldr	r2, [pc, #144]	; (800f104 <gos_kernelDump+0x674>)
 800f072:	fb82 1203 	smull	r1, r2, r2, r3
 800f076:	1152      	asrs	r2, r2, #5
 800f078:	17db      	asrs	r3, r3, #31
 800f07a:	1ad1      	subs	r1, r2, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 800f07c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f080:	4a1f      	ldr	r2, [pc, #124]	; (800f100 <gos_kernelDump+0x670>)
 800f082:	206a      	movs	r0, #106	; 0x6a
 800f084:	fb00 f303 	mul.w	r3, r0, r3
 800f088:	4413      	add	r3, r2
 800f08a:	3348      	adds	r3, #72	; 0x48
 800f08c:	885b      	ldrh	r3, [r3, #2]
 800f08e:	b29b      	uxth	r3, r3
 800f090:	461a      	mov	r2, r3
 800f092:	f242 7310 	movw	r3, #10000	; 0x2710
 800f096:	fb02 f303 	mul.w	r3, r2, r3
 800f09a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f09e:	4818      	ldr	r0, [pc, #96]	; (800f100 <gos_kernelDump+0x670>)
 800f0a0:	256a      	movs	r5, #106	; 0x6a
 800f0a2:	fb05 f202 	mul.w	r2, r5, r2
 800f0a6:	4402      	add	r2, r0
 800f0a8:	3248      	adds	r2, #72	; 0x48
 800f0aa:	8812      	ldrh	r2, [r2, #0]
 800f0ac:	b292      	uxth	r2, r2
 800f0ae:	fb93 f2f2 	sdiv	r2, r3, r2
            (void_t) gos_shellDriverTransmitString(
 800f0b2:	4b14      	ldr	r3, [pc, #80]	; (800f104 <gos_kernelDump+0x674>)
 800f0b4:	fb83 0302 	smull	r0, r3, r3, r2
 800f0b8:	1158      	asrs	r0, r3, #5
 800f0ba:	17d3      	asrs	r3, r2, #31
 800f0bc:	1ac3      	subs	r3, r0, r3
 800f0be:	2064      	movs	r0, #100	; 0x64
 800f0c0:	fb00 f303 	mul.w	r3, r0, r3
 800f0c4:	1ad3      	subs	r3, r2, r3
 800f0c6:	9302      	str	r3, [sp, #8]
 800f0c8:	9101      	str	r1, [sp, #4]
 800f0ca:	9600      	str	r6, [sp, #0]
 800f0cc:	4673      	mov	r3, lr
 800f0ce:	4622      	mov	r2, r4
 800f0d0:	4661      	mov	r1, ip
 800f0d2:	480d      	ldr	r0, [pc, #52]	; (800f108 <gos_kernelDump+0x678>)
 800f0d4:	f005 ff92 	bl	8014ffc <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800f0d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f0dc:	3301      	adds	r3, #1
 800f0de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f0e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f0e6:	2b2f      	cmp	r3, #47	; 0x2f
 800f0e8:	f67f af72 	bls.w	800efd0 <gos_kernelDump+0x540>
 800f0ec:	e000      	b.n	800f0f0 <gos_kernelDump+0x660>
            break;
 800f0ee:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 800f0f0:	4806      	ldr	r0, [pc, #24]	; (800f10c <gos_kernelDump+0x67c>)
 800f0f2:	f005 ff83 	bl	8014ffc <gos_shellDriverTransmitString>
}
 800f0f6:	bf00      	nop
 800f0f8:	3748      	adds	r7, #72	; 0x48
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f100:	20000930 	.word	0x20000930
 800f104:	51eb851f 	.word	0x51eb851f
 800f108:	08018974 	.word	0x08018974
 800f10c:	080189a8 	.word	0x080189a8

0800f110 <gos_kernelIsCallerIsr>:
{
 800f110:	b480      	push	{r7}
 800f112:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 800f114:	4b05      	ldr	r3, [pc, #20]	; (800f12c <gos_kernelIsCallerIsr+0x1c>)
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d001      	beq.n	800f120 <gos_kernelIsCallerIsr+0x10>
 800f11c:	2336      	movs	r3, #54	; 0x36
 800f11e:	e000      	b.n	800f122 <gos_kernelIsCallerIsr+0x12>
 800f120:	2349      	movs	r3, #73	; 0x49
}
 800f122:	4618      	mov	r0, r3
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	200050ea 	.word	0x200050ea

0800f130 <SVC_Handler>:
    gos_ported_handleSVC();
 800f130:	f01e 0f04 	tst.w	lr, #4
 800f134:	bf0c      	ite	eq
 800f136:	f3ef 8008 	mrseq	r0, MSP
 800f13a:	f3ef 8009 	mrsne	r0, PSP
 800f13e:	4b06      	ldr	r3, [pc, #24]	; (800f158 <SVC_Handler+0x28>)
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	2b36      	cmp	r3, #54	; 0x36
 800f144:	d104      	bne.n	800f150 <SVC_Handler+0x20>
 800f146:	4b04      	ldr	r3, [pc, #16]	; (800f158 <SVC_Handler+0x28>)
 800f148:	2249      	movs	r2, #73	; 0x49
 800f14a:	701a      	strb	r2, [r3, #0]
 800f14c:	f000 fad8 	bl	800f700 <gos_kernelProcessorReset>
 800f150:	f000 b804 	b.w	800f15c <gos_kernelSVC_HandlerMain>
}
 800f154:	bf00      	nop
 800f156:	bf00      	nop
 800f158:	2000092c 	.word	0x2000092c

0800f15c <gos_kernelSVC_HandlerMain>:
{
 800f15c:	b480      	push	{r7}
 800f15e:	b085      	sub	sp, #20
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	3318      	adds	r3, #24
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	60fb      	str	r3, [r7, #12]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	3b02      	subs	r3, #2
 800f170:	60fb      	str	r3, [r7, #12]
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	72fb      	strb	r3, [r7, #11]
 800f178:	7afb      	ldrb	r3, [r7, #11]
 800f17a:	2bff      	cmp	r3, #255	; 0xff
 800f17c:	d105      	bne.n	800f18a <gos_kernelSVC_HandlerMain+0x2e>
 800f17e:	4b06      	ldr	r3, [pc, #24]	; (800f198 <gos_kernelSVC_HandlerMain+0x3c>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	4a05      	ldr	r2, [pc, #20]	; (800f198 <gos_kernelSVC_HandlerMain+0x3c>)
 800f184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f188:	6013      	str	r3, [r2, #0]
}
 800f18a:	bf00      	nop
 800f18c:	3714      	adds	r7, #20
 800f18e:	46bd      	mov	sp, r7
 800f190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f194:	4770      	bx	lr
 800f196:	bf00      	nop
 800f198:	e000ed04 	.word	0xe000ed04

0800f19c <PendSV_Handler>:
    if (privilegedModeSetRequired == GOS_TRUE)
 800f19c:	4b10      	ldr	r3, [pc, #64]	; (800f1e0 <PendSV_Handler+0x44>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	2b36      	cmp	r3, #54	; 0x36
 800f1a2:	d109      	bne.n	800f1b8 <PendSV_Handler+0x1c>
        GOS_ASM("MRS R0, CONTROL");
 800f1a4:	f3ef 8014 	mrs	r0, CONTROL
        GOS_ASM("BIC R0, R0, #1");
 800f1a8:	f020 0001 	bic.w	r0, r0, #1
        GOS_ASM("MSR CONTROL, R0");
 800f1ac:	f380 8814 	msr	CONTROL, r0
        privilegedModeSetRequired = GOS_FALSE;
 800f1b0:	4b0b      	ldr	r3, [pc, #44]	; (800f1e0 <PendSV_Handler+0x44>)
 800f1b2:	2249      	movs	r2, #73	; 0x49
 800f1b4:	701a      	strb	r2, [r3, #0]
}
 800f1b6:	e011      	b.n	800f1dc <PendSV_Handler+0x40>
        gos_ported_doContextSwitch();
 800f1b8:	b500      	push	{lr}
 800f1ba:	f3ef 8009 	mrs	r0, PSP
 800f1be:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f1c2:	f000 f8cb 	bl	800f35c <gos_kernelSaveCurrentPsp>
 800f1c6:	f000 f8e1 	bl	800f38c <gos_kernelSelectNextTask>
 800f1ca:	f000 f8b3 	bl	800f334 <gos_kernelGetCurrentPsp>
 800f1ce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800f1d2:	f380 8809 	msr	PSP, r0
 800f1d6:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1da:	4770      	bx	lr
}
 800f1dc:	bf00      	nop
 800f1de:	bf00      	nop
 800f1e0:	2000092d 	.word	0x2000092d

0800f1e4 <gos_kernelReschedule>:
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 800f1ee:	79fb      	ldrb	r3, [r7, #7]
 800f1f0:	2b16      	cmp	r3, #22
 800f1f2:	d106      	bne.n	800f202 <gos_kernelReschedule+0x1e>
 800f1f4:	4b06      	ldr	r3, [pc, #24]	; (800f210 <gos_kernelReschedule+0x2c>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4a05      	ldr	r2, [pc, #20]	; (800f210 <gos_kernelReschedule+0x2c>)
 800f1fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1fe:	6013      	str	r3, [r2, #0]
}
 800f200:	e000      	b.n	800f204 <gos_kernelReschedule+0x20>
    gos_ported_reschedule(privilege);
 800f202:	dfff      	svc	255	; 0xff
}
 800f204:	bf00      	nop
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr
 800f210:	e000ed04 	.word	0xe000ed04

0800f214 <gos_kernelCheckTaskStack>:
 *          goes to system error.
 *
 * @return  -
 */
GOS_STATIC void_t gos_kernelCheckTaskStack (void_t)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b086      	sub	sp, #24
 800f218:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    u32_t sp = 0u;
 800f21a:	2300      	movs	r3, #0
 800f21c:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 800f21e:	f3ef 8309 	mrs	r3, PSP
 800f222:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d02b      	beq.n	800f282 <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 800f22a:	4b3f      	ldr	r3, [pc, #252]	; (800f328 <gos_kernelCheckTaskStack+0x114>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	4a3f      	ldr	r2, [pc, #252]	; (800f32c <gos_kernelCheckTaskStack+0x118>)
 800f230:	216a      	movs	r1, #106	; 0x6a
 800f232:	fb01 f303 	mul.w	r3, r1, r3
 800f236:	4413      	add	r3, r2
 800f238:	3360      	adds	r3, #96	; 0x60
 800f23a:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	429a      	cmp	r2, r3
 800f242:	d21e      	bcs.n	800f282 <gos_kernelCheckTaskStack+0x6e>
        gos_errorHandler(
                GOS_ERROR_LEVEL_OS_FATAL,
                NULL,
                0,
                "Stack overflow detected in <%s>. \r\nPSP: 0x%x overflown by %d bytes.",
                taskDescriptors[currentTaskIndex].taskName,
 800f244:	4b38      	ldr	r3, [pc, #224]	; (800f328 <gos_kernelCheckTaskStack+0x114>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	226a      	movs	r2, #106	; 0x6a
 800f24a:	fb02 f303 	mul.w	r3, r2, r3
 800f24e:	3308      	adds	r3, #8
 800f250:	4a36      	ldr	r2, [pc, #216]	; (800f32c <gos_kernelCheckTaskStack+0x118>)
 800f252:	4413      	add	r3, r2
 800f254:	3302      	adds	r3, #2
                sp,
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 800f256:	4a34      	ldr	r2, [pc, #208]	; (800f328 <gos_kernelCheckTaskStack+0x114>)
 800f258:	6812      	ldr	r2, [r2, #0]
 800f25a:	4934      	ldr	r1, [pc, #208]	; (800f32c <gos_kernelCheckTaskStack+0x118>)
 800f25c:	206a      	movs	r0, #106	; 0x6a
 800f25e:	fb00 f202 	mul.w	r2, r0, r2
 800f262:	440a      	add	r2, r1
 800f264:	3260      	adds	r2, #96	; 0x60
 800f266:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	1a8a      	subs	r2, r1, r2
 800f26e:	9202      	str	r2, [sp, #8]
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	9201      	str	r2, [sp, #4]
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	4b2e      	ldr	r3, [pc, #184]	; (800f330 <gos_kernelCheckTaskStack+0x11c>)
 800f278:	2200      	movs	r2, #0
 800f27a:	2100      	movs	r1, #0
 800f27c:	2034      	movs	r0, #52	; 0x34
 800f27e:	f002 f953 	bl	8011528 <gos_errorHandler>
    else
    {
        // No stack overflow was detected.
    }

    if (sp != 0 &&
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d04a      	beq.n	800f31e <gos_kernelCheckTaskStack+0x10a>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 800f288:	4b27      	ldr	r3, [pc, #156]	; (800f328 <gos_kernelCheckTaskStack+0x114>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	4a27      	ldr	r2, [pc, #156]	; (800f32c <gos_kernelCheckTaskStack+0x118>)
 800f28e:	216a      	movs	r1, #106	; 0x6a
 800f290:	fb01 f303 	mul.w	r3, r1, r3
 800f294:	4413      	add	r3, r2
 800f296:	3360      	adds	r3, #96	; 0x60
 800f298:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800f29c:	4a22      	ldr	r2, [pc, #136]	; (800f328 <gos_kernelCheckTaskStack+0x114>)
 800f29e:	6812      	ldr	r2, [r2, #0]
 800f2a0:	4922      	ldr	r1, [pc, #136]	; (800f32c <gos_kernelCheckTaskStack+0x118>)
 800f2a2:	206a      	movs	r0, #106	; 0x6a
 800f2a4:	fb00 f202 	mul.w	r2, r0, r2
 800f2a8:	440a      	add	r2, r1
 800f2aa:	3248      	adds	r2, #72	; 0x48
 800f2ac:	8812      	ldrh	r2, [r2, #0]
 800f2ae:	b292      	uxth	r2, r2
 800f2b0:	441a      	add	r2, r3
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	3b40      	subs	r3, #64	; 0x40
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage)
 800f2b8:	4a1b      	ldr	r2, [pc, #108]	; (800f328 <gos_kernelCheckTaskStack+0x114>)
 800f2ba:	6812      	ldr	r2, [r2, #0]
 800f2bc:	491b      	ldr	r1, [pc, #108]	; (800f32c <gos_kernelCheckTaskStack+0x118>)
 800f2be:	206a      	movs	r0, #106	; 0x6a
 800f2c0:	fb00 f202 	mul.w	r2, r0, r2
 800f2c4:	440a      	add	r2, r1
 800f2c6:	3248      	adds	r2, #72	; 0x48
 800f2c8:	8852      	ldrh	r2, [r2, #2]
 800f2ca:	b292      	uxth	r2, r2
    if (sp != 0 &&
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d926      	bls.n	800f31e <gos_kernelCheckTaskStack+0x10a>
    {
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 800f2d0:	4b15      	ldr	r3, [pc, #84]	; (800f328 <gos_kernelCheckTaskStack+0x114>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a15      	ldr	r2, [pc, #84]	; (800f32c <gos_kernelCheckTaskStack+0x118>)
 800f2d6:	216a      	movs	r1, #106	; 0x6a
 800f2d8:	fb01 f303 	mul.w	r3, r1, r3
 800f2dc:	4413      	add	r3, r2
 800f2de:	3360      	adds	r3, #96	; 0x60
 800f2e0:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	4b10      	ldr	r3, [pc, #64]	; (800f328 <gos_kernelCheckTaskStack+0x114>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	4910      	ldr	r1, [pc, #64]	; (800f32c <gos_kernelCheckTaskStack+0x118>)
 800f2ec:	206a      	movs	r0, #106	; 0x6a
 800f2ee:	fb00 f303 	mul.w	r3, r0, r3
 800f2f2:	440b      	add	r3, r1
 800f2f4:	3348      	adds	r3, #72	; 0x48
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	4413      	add	r3, r2
 800f2fc:	b29a      	uxth	r2, r3
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	b29b      	uxth	r3, r3
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	b29a      	uxth	r2, r3
 800f306:	4b08      	ldr	r3, [pc, #32]	; (800f328 <gos_kernelCheckTaskStack+0x114>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	3a20      	subs	r2, #32
 800f30c:	b290      	uxth	r0, r2
 800f30e:	4a07      	ldr	r2, [pc, #28]	; (800f32c <gos_kernelCheckTaskStack+0x118>)
 800f310:	216a      	movs	r1, #106	; 0x6a
 800f312:	fb01 f303 	mul.w	r3, r1, r3
 800f316:	4413      	add	r3, r2
 800f318:	3348      	adds	r3, #72	; 0x48
 800f31a:	4602      	mov	r2, r0
 800f31c:	805a      	strh	r2, [r3, #2]
    }
    else
    {
        // Max. value has not been exceeded.
    }
}
 800f31e:	bf00      	nop
 800f320:	3708      	adds	r7, #8
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	200050f0 	.word	0x200050f0
 800f32c:	20000930 	.word	0x20000930
 800f330:	080189fc 	.word	0x080189fc

0800f334 <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 800f334:	b480      	push	{r7}
 800f336:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 800f338:	4b06      	ldr	r3, [pc, #24]	; (800f354 <gos_kernelGetCurrentPsp+0x20>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4a06      	ldr	r2, [pc, #24]	; (800f358 <gos_kernelGetCurrentPsp+0x24>)
 800f33e:	216a      	movs	r1, #106	; 0x6a
 800f340:	fb01 f303 	mul.w	r3, r1, r3
 800f344:	4413      	add	r3, r2
 800f346:	3338      	adds	r3, #56	; 0x38
 800f348:	685b      	ldr	r3, [r3, #4]
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr
 800f354:	200050f0 	.word	0x200050f0
 800f358:	20000930 	.word	0x20000930

0800f35c <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 800f364:	4b07      	ldr	r3, [pc, #28]	; (800f384 <gos_kernelSaveCurrentPsp+0x28>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a07      	ldr	r2, [pc, #28]	; (800f388 <gos_kernelSaveCurrentPsp+0x2c>)
 800f36a:	216a      	movs	r1, #106	; 0x6a
 800f36c:	fb01 f303 	mul.w	r3, r1, r3
 800f370:	4413      	add	r3, r2
 800f372:	3338      	adds	r3, #56	; 0x38
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	605a      	str	r2, [r3, #4]
}
 800f378:	bf00      	nop
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr
 800f384:	200050f0 	.word	0x200050f0
 800f388:	20000930 	.word	0x20000930

0800f38c <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 800f38c:	b590      	push	{r4, r7, lr}
 800f38e:	b085      	sub	sp, #20
 800f390:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 800f392:	2300      	movs	r3, #0
 800f394:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 800f396:	23ff      	movs	r3, #255	; 0xff
 800f398:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 800f39a:	2300      	movs	r3, #0
 800f39c:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 800f3a6:	4ba3      	ldr	r3, [pc, #652]	; (800f634 <gos_kernelSelectNextTask+0x2a8>)
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	4ba3      	ldr	r3, [pc, #652]	; (800f638 <gos_kernelSelectNextTask+0x2ac>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	1ad3      	subs	r3, r2, r3
 800f3b0:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 800f3b2:	f7ff ff2f 	bl	800f214 <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 800f3b6:	4ba1      	ldr	r3, [pc, #644]	; (800f63c <gos_kernelSelectNextTask+0x2b0>)
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f040 8136 	bne.w	800f62c <gos_kernelSelectNextTask+0x2a0>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	81fb      	strh	r3, [r7, #14]
 800f3c4:	e0d0      	b.n	800f568 <gos_kernelSelectNextTask+0x1dc>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 800f3c6:	89fb      	ldrh	r3, [r7, #14]
 800f3c8:	4a9d      	ldr	r2, [pc, #628]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f3ca:	216a      	movs	r1, #106	; 0x6a
 800f3cc:	fb01 f303 	mul.w	r3, r1, r3
 800f3d0:	4413      	add	r3, r2
 800f3d2:	3304      	adds	r3, #4
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	2b16      	cmp	r3, #22
 800f3d8:	d12c      	bne.n	800f434 <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskSleepTicks)
 800f3da:	89fb      	ldrh	r3, [r7, #14]
 800f3dc:	4a98      	ldr	r2, [pc, #608]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f3de:	216a      	movs	r1, #106	; 0x6a
 800f3e0:	fb01 f303 	mul.w	r3, r1, r3
 800f3e4:	4413      	add	r3, r2
 800f3e6:	3330      	adds	r3, #48	; 0x30
 800f3e8:	6819      	ldr	r1, [r3, #0]
 800f3ea:	89fb      	ldrh	r3, [r7, #14]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	4411      	add	r1, r2
 800f3f0:	4893      	ldr	r0, [pc, #588]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f3f2:	226a      	movs	r2, #106	; 0x6a
 800f3f4:	fb03 f202 	mul.w	r2, r3, r2
 800f3f8:	4402      	add	r2, r0
 800f3fa:	3230      	adds	r2, #48	; 0x30
 800f3fc:	6011      	str	r1, [r2, #0]
 800f3fe:	4a90      	ldr	r2, [pc, #576]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f400:	216a      	movs	r1, #106	; 0x6a
 800f402:	fb01 f303 	mul.w	r3, r1, r3
 800f406:	4413      	add	r3, r2
 800f408:	3330      	adds	r3, #48	; 0x30
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	89fb      	ldrh	r3, [r7, #14]
 800f40e:	498c      	ldr	r1, [pc, #560]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f410:	206a      	movs	r0, #106	; 0x6a
 800f412:	fb00 f303 	mul.w	r3, r0, r3
 800f416:	440b      	add	r3, r1
 800f418:	3328      	adds	r3, #40	; 0x28
 800f41a:	685b      	ldr	r3, [r3, #4]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d309      	bcc.n	800f434 <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 800f420:	89fb      	ldrh	r3, [r7, #14]
 800f422:	4a87      	ldr	r2, [pc, #540]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f424:	216a      	movs	r1, #106	; 0x6a
 800f426:	fb01 f303 	mul.w	r3, r1, r3
 800f42a:	4413      	add	r3, r2
 800f42c:	3304      	adds	r3, #4
 800f42e:	220a      	movs	r2, #10
 800f430:	701a      	strb	r2, [r3, #0]
 800f432:	e040      	b.n	800f4b6 <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 800f434:	89fb      	ldrh	r3, [r7, #14]
 800f436:	4a82      	ldr	r2, [pc, #520]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f438:	216a      	movs	r1, #106	; 0x6a
 800f43a:	fb01 f303 	mul.w	r3, r1, r3
 800f43e:	4413      	add	r3, r2
 800f440:	3304      	adds	r3, #4
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	2b19      	cmp	r3, #25
 800f446:	d136      	bne.n	800f4b6 <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 800f448:	89fb      	ldrh	r3, [r7, #14]
 800f44a:	4a7d      	ldr	r2, [pc, #500]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f44c:	216a      	movs	r1, #106	; 0x6a
 800f44e:	fb01 f303 	mul.w	r3, r1, r3
 800f452:	4413      	add	r3, r2
 800f454:	3330      	adds	r3, #48	; 0x30
 800f456:	685b      	ldr	r3, [r3, #4]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 800f458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f45c:	d02b      	beq.n	800f4b6 <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskBlockTicks))
 800f45e:	89fb      	ldrh	r3, [r7, #14]
 800f460:	4a77      	ldr	r2, [pc, #476]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f462:	216a      	movs	r1, #106	; 0x6a
 800f464:	fb01 f303 	mul.w	r3, r1, r3
 800f468:	4413      	add	r3, r2
 800f46a:	3338      	adds	r3, #56	; 0x38
 800f46c:	6819      	ldr	r1, [r3, #0]
 800f46e:	89fb      	ldrh	r3, [r7, #14]
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	4411      	add	r1, r2
 800f474:	4872      	ldr	r0, [pc, #456]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f476:	226a      	movs	r2, #106	; 0x6a
 800f478:	fb03 f202 	mul.w	r2, r3, r2
 800f47c:	4402      	add	r2, r0
 800f47e:	3238      	adds	r2, #56	; 0x38
 800f480:	6011      	str	r1, [r2, #0]
 800f482:	4a6f      	ldr	r2, [pc, #444]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f484:	216a      	movs	r1, #106	; 0x6a
 800f486:	fb01 f303 	mul.w	r3, r1, r3
 800f48a:	4413      	add	r3, r2
 800f48c:	3338      	adds	r3, #56	; 0x38
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	89fb      	ldrh	r3, [r7, #14]
 800f492:	496b      	ldr	r1, [pc, #428]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f494:	206a      	movs	r0, #106	; 0x6a
 800f496:	fb00 f303 	mul.w	r3, r0, r3
 800f49a:	440b      	add	r3, r1
 800f49c:	3330      	adds	r3, #48	; 0x30
 800f49e:	685b      	ldr	r3, [r3, #4]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d308      	bcc.n	800f4b6 <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 800f4a4:	89fb      	ldrh	r3, [r7, #14]
 800f4a6:	4a66      	ldr	r2, [pc, #408]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f4a8:	216a      	movs	r1, #106	; 0x6a
 800f4aa:	fb01 f303 	mul.w	r3, r1, r3
 800f4ae:	4413      	add	r3, r2
 800f4b0:	3304      	adds	r3, #4
 800f4b2:	220a      	movs	r2, #10
 800f4b4:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 800f4b6:	89fa      	ldrh	r2, [r7, #14]
 800f4b8:	4b62      	ldr	r3, [pc, #392]	; (800f644 <gos_kernelSelectNextTask+0x2b8>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d047      	beq.n	800f550 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 800f4c0:	89fb      	ldrh	r3, [r7, #14]
 800f4c2:	4a5f      	ldr	r2, [pc, #380]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f4c4:	216a      	movs	r1, #106	; 0x6a
 800f4c6:	fb01 f303 	mul.w	r3, r1, r3
 800f4ca:	4413      	add	r3, r2
 800f4cc:	3304      	adds	r3, #4
 800f4ce:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 800f4d0:	2b0a      	cmp	r3, #10
 800f4d2:	d13d      	bne.n	800f550 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 800f4d4:	89fb      	ldrh	r3, [r7, #14]
 800f4d6:	4a5a      	ldr	r2, [pc, #360]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f4d8:	216a      	movs	r1, #106	; 0x6a
 800f4da:	fb01 f303 	mul.w	r3, r1, r3
 800f4de:	4413      	add	r3, r2
 800f4e0:	3306      	adds	r3, #6
 800f4e2:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 800f4e4:	7b7a      	ldrb	r2, [r7, #13]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d932      	bls.n	800f550 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 800f4ea:	89fb      	ldrh	r3, [r7, #14]
 800f4ec:	4a54      	ldr	r2, [pc, #336]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f4ee:	216a      	movs	r1, #106	; 0x6a
 800f4f0:	fb01 f303 	mul.w	r3, r1, r3
 800f4f4:	4413      	add	r3, r2
 800f4f6:	3360      	adds	r3, #96	; 0x60
 800f4f8:	889b      	ldrh	r3, [r3, #4]
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	89fb      	ldrh	r3, [r7, #14]
 800f4fe:	4950      	ldr	r1, [pc, #320]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f500:	206a      	movs	r0, #106	; 0x6a
 800f502:	fb00 f303 	mul.w	r3, r0, r3
 800f506:	440b      	add	r3, r1
 800f508:	3358      	adds	r3, #88	; 0x58
 800f50a:	88db      	ldrh	r3, [r3, #6]
 800f50c:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 800f50e:	429a      	cmp	r2, r3
 800f510:	d21e      	bcs.n	800f550 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 800f512:	89fb      	ldrh	r3, [r7, #14]
 800f514:	4a4a      	ldr	r2, [pc, #296]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f516:	216a      	movs	r1, #106	; 0x6a
 800f518:	fb01 f303 	mul.w	r3, r1, r3
 800f51c:	4413      	add	r3, r2
 800f51e:	3360      	adds	r3, #96	; 0x60
 800f520:	885b      	ldrh	r3, [r3, #2]
 800f522:	b29a      	uxth	r2, r3
 800f524:	89fb      	ldrh	r3, [r7, #14]
 800f526:	4946      	ldr	r1, [pc, #280]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f528:	206a      	movs	r0, #106	; 0x6a
 800f52a:	fb00 f303 	mul.w	r3, r0, r3
 800f52e:	440b      	add	r3, r1
 800f530:	3358      	adds	r3, #88	; 0x58
 800f532:	88db      	ldrh	r3, [r3, #6]
 800f534:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 800f536:	429a      	cmp	r2, r3
 800f538:	d20a      	bcs.n	800f550 <gos_kernelSelectNextTask+0x1c4>
            {
                nextTask = taskIndex;
 800f53a:	89fb      	ldrh	r3, [r7, #14]
 800f53c:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 800f53e:	89fb      	ldrh	r3, [r7, #14]
 800f540:	4a3f      	ldr	r2, [pc, #252]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f542:	216a      	movs	r1, #106	; 0x6a
 800f544:	fb01 f303 	mul.w	r3, r1, r3
 800f548:	4413      	add	r3, r2
 800f54a:	3306      	adds	r3, #6
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 800f550:	89fb      	ldrh	r3, [r7, #14]
 800f552:	4a3b      	ldr	r2, [pc, #236]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f554:	216a      	movs	r1, #106	; 0x6a
 800f556:	fb01 f303 	mul.w	r3, r1, r3
 800f55a:	4413      	add	r3, r2
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d007      	beq.n	800f572 <gos_kernelSelectNextTask+0x1e6>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800f562:	89fb      	ldrh	r3, [r7, #14]
 800f564:	3301      	adds	r3, #1
 800f566:	81fb      	strh	r3, [r7, #14]
 800f568:	89fb      	ldrh	r3, [r7, #14]
 800f56a:	2b2f      	cmp	r3, #47	; 0x2f
 800f56c:	f67f af2b 	bls.w	800f3c6 <gos_kernelSelectNextTask+0x3a>
 800f570:	e000      	b.n	800f574 <gos_kernelSelectNextTask+0x1e8>
            {
                break;
 800f572:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 800f574:	f7ff f8da 	bl	800e72c <gos_kernelGetCpuUsage>
 800f578:	4603      	mov	r3, r0
 800f57a:	461a      	mov	r2, r3
 800f57c:	4b32      	ldr	r3, [pc, #200]	; (800f648 <gos_kernelSelectNextTask+0x2bc>)
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	429a      	cmp	r2, r3
 800f582:	d901      	bls.n	800f588 <gos_kernelSelectNextTask+0x1fc>
        {
            nextTask = 0u;
 800f584:	2300      	movs	r3, #0
 800f586:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 800f588:	897a      	ldrh	r2, [r7, #10]
 800f58a:	4b2e      	ldr	r3, [pc, #184]	; (800f644 <gos_kernelSelectNextTask+0x2b8>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d02b      	beq.n	800f5ea <gos_kernelSelectNextTask+0x25e>
        {
            if (kernelSwapHookFunction != NULL)
 800f592:	4b2e      	ldr	r3, [pc, #184]	; (800f64c <gos_kernelSelectNextTask+0x2c0>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d016      	beq.n	800f5c8 <gos_kernelSelectNextTask+0x23c>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 800f59a:	4b2c      	ldr	r3, [pc, #176]	; (800f64c <gos_kernelSelectNextTask+0x2c0>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a29      	ldr	r2, [pc, #164]	; (800f644 <gos_kernelSelectNextTask+0x2b8>)
 800f5a0:	6812      	ldr	r2, [r2, #0]
 800f5a2:	4927      	ldr	r1, [pc, #156]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f5a4:	206a      	movs	r0, #106	; 0x6a
 800f5a6:	fb00 f202 	mul.w	r2, r0, r2
 800f5aa:	440a      	add	r2, r1
 800f5ac:	3228      	adds	r2, #40	; 0x28
 800f5ae:	8852      	ldrh	r2, [r2, #2]
 800f5b0:	b290      	uxth	r0, r2
 800f5b2:	897a      	ldrh	r2, [r7, #10]
 800f5b4:	4922      	ldr	r1, [pc, #136]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f5b6:	246a      	movs	r4, #106	; 0x6a
 800f5b8:	fb04 f202 	mul.w	r2, r4, r2
 800f5bc:	440a      	add	r2, r1
 800f5be:	3228      	adds	r2, #40	; 0x28
 800f5c0:	8852      	ldrh	r2, [r2, #2]
 800f5c2:	b292      	uxth	r2, r2
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 800f5c8:	4b1e      	ldr	r3, [pc, #120]	; (800f644 <gos_kernelSelectNextTask+0x2b8>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	491c      	ldr	r1, [pc, #112]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f5ce:	226a      	movs	r2, #106	; 0x6a
 800f5d0:	fb03 f202 	mul.w	r2, r3, r2
 800f5d4:	440a      	add	r2, r1
 800f5d6:	3240      	adds	r2, #64	; 0x40
 800f5d8:	6852      	ldr	r2, [r2, #4]
 800f5da:	3201      	adds	r2, #1
 800f5dc:	4918      	ldr	r1, [pc, #96]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f5de:	206a      	movs	r0, #106	; 0x6a
 800f5e0:	fb00 f303 	mul.w	r3, r0, r3
 800f5e4:	440b      	add	r3, r1
 800f5e6:	3340      	adds	r3, #64	; 0x40
 800f5e8:	605a      	str	r2, [r3, #4]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 800f5ea:	1cbb      	adds	r3, r7, #2
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f005 fd61 	bl	80150b4 <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 800f5f2:	887a      	ldrh	r2, [r7, #2]
 800f5f4:	4b16      	ldr	r3, [pc, #88]	; (800f650 <gos_kernelSelectNextTask+0x2c4>)
 800f5f6:	881b      	ldrh	r3, [r3, #0]
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 800f5fc:	4b11      	ldr	r3, [pc, #68]	; (800f644 <gos_kernelSelectNextTask+0x2b8>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	226a      	movs	r2, #106	; 0x6a
 800f602:	fb02 f303 	mul.w	r3, r2, r3
 800f606:	3350      	adds	r3, #80	; 0x50
 800f608:	4a0d      	ldr	r2, [pc, #52]	; (800f640 <gos_kernelSelectNextTask+0x2b4>)
 800f60a:	4413      	add	r3, r2
 800f60c:	3305      	adds	r3, #5
 800f60e:	893a      	ldrh	r2, [r7, #8]
 800f610:	4619      	mov	r1, r3
 800f612:	4810      	ldr	r0, [pc, #64]	; (800f654 <gos_kernelSelectNextTask+0x2c8>)
 800f614:	f004 fe1e 	bl	8014254 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 800f618:	480d      	ldr	r0, [pc, #52]	; (800f650 <gos_kernelSelectNextTask+0x2c4>)
 800f61a:	f005 fd4b 	bl	80150b4 <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 800f61e:	897b      	ldrh	r3, [r7, #10]
 800f620:	4a08      	ldr	r2, [pc, #32]	; (800f644 <gos_kernelSelectNextTask+0x2b8>)
 800f622:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 800f624:	4b03      	ldr	r3, [pc, #12]	; (800f634 <gos_kernelSelectNextTask+0x2a8>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a03      	ldr	r2, [pc, #12]	; (800f638 <gos_kernelSelectNextTask+0x2ac>)
 800f62a:	6013      	str	r3, [r2, #0]
    }
    else
    {
        // Nothing to do.
    }
}
 800f62c:	bf00      	nop
 800f62e:	3714      	adds	r7, #20
 800f630:	46bd      	mov	sp, r7
 800f632:	bd90      	pop	{r4, r7, pc}
 800f634:	200050f4 	.word	0x200050f4
 800f638:	20005110 	.word	0x20005110
 800f63c:	200050e9 	.word	0x200050e9
 800f640:	20000930 	.word	0x20000930
 800f644:	200050f0 	.word	0x200050f0
 800f648:	2000092a 	.word	0x2000092a
 800f64c:	20005108 	.word	0x20005108
 800f650:	200050f8 	.word	0x200050f8
 800f654:	200050fc 	.word	0x200050fc

0800f658 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	4603      	mov	r3, r0
 800f660:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 800f662:	79fb      	ldrb	r3, [r7, #7]
 800f664:	3b05      	subs	r3, #5
 800f666:	2b14      	cmp	r3, #20
 800f668:	d836      	bhi.n	800f6d8 <gos_kernelGetTaskStateString+0x80>
 800f66a:	a201      	add	r2, pc, #4	; (adr r2, 800f670 <gos_kernelGetTaskStateString+0x18>)
 800f66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f670:	0800f6cd 	.word	0x0800f6cd
 800f674:	0800f6d9 	.word	0x0800f6d9
 800f678:	0800f6d9 	.word	0x0800f6d9
 800f67c:	0800f6d9 	.word	0x0800f6d9
 800f680:	0800f6d9 	.word	0x0800f6d9
 800f684:	0800f6c5 	.word	0x0800f6c5
 800f688:	0800f6d9 	.word	0x0800f6d9
 800f68c:	0800f6d9 	.word	0x0800f6d9
 800f690:	0800f6d5 	.word	0x0800f6d5
 800f694:	0800f6d9 	.word	0x0800f6d9
 800f698:	0800f6d9 	.word	0x0800f6d9
 800f69c:	0800f6d9 	.word	0x0800f6d9
 800f6a0:	0800f6d9 	.word	0x0800f6d9
 800f6a4:	0800f6d9 	.word	0x0800f6d9
 800f6a8:	0800f6d9 	.word	0x0800f6d9
 800f6ac:	0800f6d9 	.word	0x0800f6d9
 800f6b0:	0800f6d9 	.word	0x0800f6d9
 800f6b4:	0800f6c9 	.word	0x0800f6c9
 800f6b8:	0800f6d9 	.word	0x0800f6d9
 800f6bc:	0800f6d9 	.word	0x0800f6d9
 800f6c0:	0800f6d1 	.word	0x0800f6d1
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 800f6c4:	4b08      	ldr	r3, [pc, #32]	; (800f6e8 <gos_kernelGetTaskStateString+0x90>)
 800f6c6:	e008      	b.n	800f6da <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 800f6c8:	4b08      	ldr	r3, [pc, #32]	; (800f6ec <gos_kernelGetTaskStateString+0x94>)
 800f6ca:	e006      	b.n	800f6da <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 800f6cc:	4b08      	ldr	r3, [pc, #32]	; (800f6f0 <gos_kernelGetTaskStateString+0x98>)
 800f6ce:	e004      	b.n	800f6da <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 800f6d0:	4b08      	ldr	r3, [pc, #32]	; (800f6f4 <gos_kernelGetTaskStateString+0x9c>)
 800f6d2:	e002      	b.n	800f6da <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 800f6d4:	4b08      	ldr	r3, [pc, #32]	; (800f6f8 <gos_kernelGetTaskStateString+0xa0>)
 800f6d6:	e000      	b.n	800f6da <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 800f6d8:	4b08      	ldr	r3, [pc, #32]	; (800f6fc <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	370c      	adds	r7, #12
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr
 800f6e6:	bf00      	nop
 800f6e8:	08018a40 	.word	0x08018a40
 800f6ec:	08018a50 	.word	0x08018a50
 800f6f0:	08018a64 	.word	0x08018a64
 800f6f4:	08018a78 	.word	0x08018a78
 800f6f8:	08018a8c 	.word	0x08018a8c
 800f6fc:	08018a9c 	.word	0x08018a9c

0800f700 <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 800f700:	b480      	push	{r7}
 800f702:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 800f704:	f3bf 8f4f 	dsb	sy
 800f708:	4b05      	ldr	r3, [pc, #20]	; (800f720 <gos_kernelProcessorReset+0x20>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f710:	4903      	ldr	r1, [pc, #12]	; (800f720 <gos_kernelProcessorReset+0x20>)
 800f712:	4b04      	ldr	r3, [pc, #16]	; (800f724 <gos_kernelProcessorReset+0x24>)
 800f714:	4313      	orrs	r3, r2
 800f716:	600b      	str	r3, [r1, #0]
 800f718:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 800f71c:	bf00      	nop
 800f71e:	e7fd      	b.n	800f71c <gos_kernelProcessorReset+0x1c>
 800f720:	e000ed0c 	.word	0xe000ed0c
 800f724:	05fa0004 	.word	0x05fa0004

0800f728 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 800f728:	b480      	push	{r7}
 800f72a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800f72c:	bf00      	nop
 800f72e:	e7fd      	b.n	800f72c <NMI_Handler+0x4>

0800f730 <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 800f730:	b480      	push	{r7}
 800f732:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 800f734:	bf00      	nop
 800f736:	e7fd      	b.n	800f734 <HardFault_Handler+0x4>

0800f738 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 800f738:	b480      	push	{r7}
 800f73a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800f73c:	bf00      	nop
 800f73e:	e7fd      	b.n	800f73c <MemManage_Handler+0x4>

0800f740 <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 800f740:	b480      	push	{r7}
 800f742:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800f744:	bf00      	nop
 800f746:	e7fd      	b.n	800f744 <BusFault_Handler+0x4>

0800f748 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 800f748:	b480      	push	{r7}
 800f74a:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 800f74c:	bf00      	nop
 800f74e:	e7fd      	b.n	800f74c <UsageFault_Handler+0x4>

0800f750 <gos_taskRegister>:

/*
 * Function: gos_taskRegister
 */
gos_result_t gos_taskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b086      	sub	sp, #24
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 800f75a:	2355      	movs	r3, #85	; 0x55
 800f75c:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 800f75e:	2300      	movs	r3, #0
 800f760:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 800f762:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800f766:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 800f768:	2300      	movs	r3, #0
 800f76a:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_taskCheckDescriptor(taskDescriptor) == GOS_ERROR)
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f001 fd31 	bl	80111d4 <gos_taskCheckDescriptor>
 800f772:	4603      	mov	r3, r0
 800f774:	2bae      	cmp	r3, #174	; 0xae
 800f776:	d102      	bne.n	800f77e <gos_taskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 800f778:	23ae      	movs	r3, #174	; 0xae
 800f77a:	75fb      	strb	r3, [r7, #23]
 800f77c:	e173      	b.n	800fa66 <gos_taskRegister+0x316>
    }
    else
    {
        taskRegisterResult = GOS_ERROR;
 800f77e:	23ae      	movs	r3, #174	; 0xae
 800f780:	75fb      	strb	r3, [r7, #23]

        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800f782:	2300      	movs	r3, #0
 800f784:	82bb      	strh	r3, [r7, #20]
 800f786:	e01a      	b.n	800f7be <gos_taskRegister+0x6e>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 800f788:	8abb      	ldrh	r3, [r7, #20]
 800f78a:	4a89      	ldr	r2, [pc, #548]	; (800f9b0 <gos_taskRegister+0x260>)
 800f78c:	216a      	movs	r1, #106	; 0x6a
 800f78e:	fb01 f303 	mul.w	r3, r1, r3
 800f792:	4413      	add	r3, r2
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d102      	bne.n	800f7a0 <gos_taskRegister+0x50>
            {
                taskRegisterResult = GOS_SUCCESS;
 800f79a:	2355      	movs	r3, #85	; 0x55
 800f79c:	75fb      	strb	r3, [r7, #23]
                break;
 800f79e:	e011      	b.n	800f7c4 <gos_taskRegister+0x74>
            }
            else
            {
                // Continue.
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 800f7a0:	8abb      	ldrh	r3, [r7, #20]
 800f7a2:	4a83      	ldr	r2, [pc, #524]	; (800f9b0 <gos_taskRegister+0x260>)
 800f7a4:	216a      	movs	r1, #106	; 0x6a
 800f7a6:	fb01 f303 	mul.w	r3, r1, r3
 800f7aa:	4413      	add	r3, r2
 800f7ac:	3348      	adds	r3, #72	; 0x48
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	4413      	add	r3, r2
 800f7b6:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800f7b8:	8abb      	ldrh	r3, [r7, #20]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	82bb      	strh	r3, [r7, #20]
 800f7be:	8abb      	ldrh	r3, [r7, #20]
 800f7c0:	2b2f      	cmp	r3, #47	; 0x2f
 800f7c2:	d9e1      	bls.n	800f788 <gos_taskRegister+0x38>
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 800f7c4:	8abb      	ldrh	r3, [r7, #20]
 800f7c6:	2b2f      	cmp	r3, #47	; 0x2f
 800f7c8:	d902      	bls.n	800f7d0 <gos_taskRegister+0x80>
        {
            taskRegisterResult = GOS_ERROR;
 800f7ca:	23ae      	movs	r3, #174	; 0xae
 800f7cc:	75fb      	strb	r3, [r7, #23]
 800f7ce:	e14a      	b.n	800fa66 <gos_taskRegister+0x316>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 800f7d6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800f7da:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	3b04      	subs	r3, #4
 800f7e0:	60fb      	str	r3, [r7, #12]
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f7e8:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	3b04      	subs	r3, #4
 800f7f2:	60fb      	str	r3, [r7, #12]
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	3b04      	subs	r3, #4
 800f7fc:	60fb      	str	r3, [r7, #12]
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f06f 0202 	mvn.w	r2, #2
 800f804:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	3b04      	subs	r3, #4
 800f80a:	60fb      	str	r3, [r7, #12]
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800f812:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	3b04      	subs	r3, #4
 800f818:	60fb      	str	r3, [r7, #12]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800f820:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	3b04      	subs	r3, #4
 800f826:	60fb      	str	r3, [r7, #12]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800f82e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	3b04      	subs	r3, #4
 800f834:	60fb      	str	r3, [r7, #12]
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800f83c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	3b04      	subs	r3, #4
 800f842:	60fb      	str	r3, [r7, #12]
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2200      	movs	r2, #0
 800f848:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	3b04      	subs	r3, #4
 800f84e:	60fb      	str	r3, [r7, #12]
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800f856:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	3b04      	subs	r3, #4
 800f85c:	60fb      	str	r3, [r7, #12]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800f864:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	3b04      	subs	r3, #4
 800f86a:	60fb      	str	r3, [r7, #12]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800f872:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	3b04      	subs	r3, #4
 800f878:	60fb      	str	r3, [r7, #12]
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800f880:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	3b04      	subs	r3, #4
 800f886:	60fb      	str	r3, [r7, #12]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800f88e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	3b04      	subs	r3, #4
 800f894:	60fb      	str	r3, [r7, #12]
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800f89c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	3b04      	subs	r3, #4
 800f8a2:	60fb      	str	r3, [r7, #12]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800f8aa:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	3b04      	subs	r3, #4
 800f8b0:	60fb      	str	r3, [r7, #12]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800f8b8:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 800f8ba:	8abb      	ldrh	r3, [r7, #20]
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	493c      	ldr	r1, [pc, #240]	; (800f9b0 <gos_taskRegister+0x260>)
 800f8c0:	206a      	movs	r0, #106	; 0x6a
 800f8c2:	fb00 f303 	mul.w	r3, r0, r3
 800f8c6:	440b      	add	r3, r1
 800f8c8:	333c      	adds	r3, #60	; 0x3c
 800f8ca:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 800f8cc:	8abb      	ldrh	r3, [r7, #20]
 800f8ce:	4a38      	ldr	r2, [pc, #224]	; (800f9b0 <gos_taskRegister+0x260>)
 800f8d0:	216a      	movs	r1, #106	; 0x6a
 800f8d2:	fb01 f303 	mul.w	r3, r1, r3
 800f8d6:	4413      	add	r3, r2
 800f8d8:	3304      	adds	r3, #4
 800f8da:	220a      	movs	r2, #10
 800f8dc:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 800f8de:	8abb      	ldrh	r3, [r7, #20]
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	6812      	ldr	r2, [r2, #0]
 800f8e4:	4932      	ldr	r1, [pc, #200]	; (800f9b0 <gos_taskRegister+0x260>)
 800f8e6:	206a      	movs	r0, #106	; 0x6a
 800f8e8:	fb00 f303 	mul.w	r3, r0, r3
 800f8ec:	440b      	add	r3, r1
 800f8ee:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 800f8f0:	8abb      	ldrh	r3, [r7, #20]
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	7990      	ldrb	r0, [r2, #6]
 800f8f6:	4a2e      	ldr	r2, [pc, #184]	; (800f9b0 <gos_taskRegister+0x260>)
 800f8f8:	216a      	movs	r1, #106	; 0x6a
 800f8fa:	fb01 f303 	mul.w	r3, r1, r3
 800f8fe:	4413      	add	r3, r2
 800f900:	3306      	adds	r3, #6
 800f902:	4602      	mov	r2, r0
 800f904:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 800f906:	8abb      	ldrh	r3, [r7, #20]
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	7990      	ldrb	r0, [r2, #6]
 800f90c:	4a28      	ldr	r2, [pc, #160]	; (800f9b0 <gos_taskRegister+0x260>)
 800f90e:	216a      	movs	r1, #106	; 0x6a
 800f910:	fb01 f303 	mul.w	r3, r1, r3
 800f914:	4413      	add	r3, r2
 800f916:	3307      	adds	r3, #7
 800f918:	4602      	mov	r2, r0
 800f91a:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 800f91c:	8abb      	ldrh	r3, [r7, #20]
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800f924:	b290      	uxth	r0, r2
 800f926:	4a22      	ldr	r2, [pc, #136]	; (800f9b0 <gos_taskRegister+0x260>)
 800f928:	216a      	movs	r1, #106	; 0x6a
 800f92a:	fb01 f303 	mul.w	r3, r1, r3
 800f92e:	4413      	add	r3, r2
 800f930:	3348      	adds	r3, #72	; 0x48
 800f932:	4602      	mov	r2, r0
 800f934:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 800f936:	8abb      	ldrh	r3, [r7, #20]
 800f938:	8aba      	ldrh	r2, [r7, #20]
 800f93a:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800f93e:	b290      	uxth	r0, r2
 800f940:	4a1b      	ldr	r2, [pc, #108]	; (800f9b0 <gos_taskRegister+0x260>)
 800f942:	216a      	movs	r1, #106	; 0x6a
 800f944:	fb01 f303 	mul.w	r3, r1, r3
 800f948:	4413      	add	r3, r2
 800f94a:	332a      	adds	r3, #42	; 0x2a
 800f94c:	4602      	mov	r2, r0
 800f94e:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 800f950:	8abb      	ldrh	r3, [r7, #20]
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	8912      	ldrh	r2, [r2, #8]
 800f956:	b290      	uxth	r0, r2
 800f958:	4a15      	ldr	r2, [pc, #84]	; (800f9b0 <gos_taskRegister+0x260>)
 800f95a:	216a      	movs	r1, #106	; 0x6a
 800f95c:	fb01 f303 	mul.w	r3, r1, r3
 800f960:	4413      	add	r3, r2
 800f962:	3308      	adds	r3, #8
 800f964:	4602      	mov	r2, r0
 800f966:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f96e:	b29b      	uxth	r3, r3
 800f970:	2b00      	cmp	r3, #0
 800f972:	d10a      	bne.n	800f98a <gos_taskRegister+0x23a>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 800f974:	8abb      	ldrh	r3, [r7, #20]
 800f976:	4a0e      	ldr	r2, [pc, #56]	; (800f9b0 <gos_taskRegister+0x260>)
 800f978:	216a      	movs	r1, #106	; 0x6a
 800f97a:	fb01 f303 	mul.w	r3, r1, r3
 800f97e:	4413      	add	r3, r2
 800f980:	335e      	adds	r3, #94	; 0x5e
 800f982:	f242 7210 	movw	r2, #10000	; 0x2710
 800f986:	801a      	strh	r2, [r3, #0]
 800f988:	e021      	b.n	800f9ce <gos_taskRegister+0x27e>
            }
            else if (taskDescriptor->taskCpuUsageLimit > 10000u)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f990:	b29b      	uxth	r3, r3
 800f992:	f242 7210 	movw	r2, #10000	; 0x2710
 800f996:	4293      	cmp	r3, r2
 800f998:	d90c      	bls.n	800f9b4 <gos_taskRegister+0x264>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 800f99a:	8abb      	ldrh	r3, [r7, #20]
 800f99c:	4a04      	ldr	r2, [pc, #16]	; (800f9b0 <gos_taskRegister+0x260>)
 800f99e:	216a      	movs	r1, #106	; 0x6a
 800f9a0:	fb01 f303 	mul.w	r3, r1, r3
 800f9a4:	4413      	add	r3, r2
 800f9a6:	335e      	adds	r3, #94	; 0x5e
 800f9a8:	f242 7210 	movw	r2, #10000	; 0x2710
 800f9ac:	801a      	strh	r2, [r3, #0]
 800f9ae:	e00e      	b.n	800f9ce <gos_taskRegister+0x27e>
 800f9b0:	20000930 	.word	0x20000930
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 800f9b4:	8abb      	ldrh	r3, [r7, #20]
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800f9bc:	b290      	uxth	r0, r2
 800f9be:	4a2c      	ldr	r2, [pc, #176]	; (800fa70 <gos_taskRegister+0x320>)
 800f9c0:	216a      	movs	r1, #106	; 0x6a
 800f9c2:	fb01 f303 	mul.w	r3, r1, r3
 800f9c6:	4413      	add	r3, r2
 800f9c8:	335e      	adds	r3, #94	; 0x5e
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	330a      	adds	r3, #10
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d015      	beq.n	800fa02 <gos_taskRegister+0x2b2>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	330a      	adds	r3, #10
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7f0 fc78 	bl	80002d0 <strlen>
 800f9e0:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 800f9e2:	2b20      	cmp	r3, #32
 800f9e4:	d80d      	bhi.n	800fa02 <gos_taskRegister+0x2b2>
            {
                (void_t) strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 800f9e6:	8abb      	ldrh	r3, [r7, #20]
 800f9e8:	226a      	movs	r2, #106	; 0x6a
 800f9ea:	fb02 f303 	mul.w	r3, r2, r3
 800f9ee:	3308      	adds	r3, #8
 800f9f0:	4a1f      	ldr	r2, [pc, #124]	; (800fa70 <gos_taskRegister+0x320>)
 800f9f2:	4413      	add	r3, r2
 800f9f4:	1c9a      	adds	r2, r3, #2
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	330a      	adds	r3, #10
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	f006 fa28 	bl	8015e52 <strcpy>
            {
                // Task name is not requried.
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 800fa02:	8abb      	ldrh	r3, [r7, #20]
 800fa04:	4a1a      	ldr	r2, [pc, #104]	; (800fa70 <gos_taskRegister+0x320>)
 800fa06:	216a      	movs	r1, #106	; 0x6a
 800fa08:	fb01 f303 	mul.w	r3, r1, r3
 800fa0c:	4413      	add	r3, r2
 800fa0e:	332a      	adds	r3, #42	; 0x2a
 800fa10:	881a      	ldrh	r2, [r3, #0]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	855a      	strh	r2, [r3, #42]	; 0x2a
            if (taskId != NULL)
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d009      	beq.n	800fa30 <gos_taskRegister+0x2e0>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 800fa1c:	8abb      	ldrh	r3, [r7, #20]
 800fa1e:	4a14      	ldr	r2, [pc, #80]	; (800fa70 <gos_taskRegister+0x320>)
 800fa20:	216a      	movs	r1, #106	; 0x6a
 800fa22:	fb01 f303 	mul.w	r3, r1, r3
 800fa26:	4413      	add	r3, r2
 800fa28:	332a      	adds	r3, #42	; 0x2a
 800fa2a:	881a      	ldrh	r2, [r3, #0]
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	801a      	strh	r2, [r3, #0]
                // External task ID not required.
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 800fa30:	8abb      	ldrh	r3, [r7, #20]
 800fa32:	4a0f      	ldr	r2, [pc, #60]	; (800fa70 <gos_taskRegister+0x320>)
 800fa34:	216a      	movs	r1, #106	; 0x6a
 800fa36:	fb01 f303 	mul.w	r3, r1, r3
 800fa3a:	4413      	add	r3, r2
 800fa3c:	333c      	adds	r3, #60	; 0x3c
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	8aba      	ldrh	r2, [r7, #20]
 800fa42:	490b      	ldr	r1, [pc, #44]	; (800fa70 <gos_taskRegister+0x320>)
 800fa44:	206a      	movs	r0, #106	; 0x6a
 800fa46:	fb00 f202 	mul.w	r2, r0, r2
 800fa4a:	440a      	add	r2, r1
 800fa4c:	3248      	adds	r2, #72	; 0x48
 800fa4e:	8812      	ldrh	r2, [r2, #0]
 800fa50:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 800fa52:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 800fa54:	3240      	adds	r2, #64	; 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 800fa56:	4906      	ldr	r1, [pc, #24]	; (800fa70 <gos_taskRegister+0x320>)
 800fa58:	206a      	movs	r0, #106	; 0x6a
 800fa5a:	fb00 f303 	mul.w	r3, r0, r3
 800fa5e:	440b      	add	r3, r1
 800fa60:	3360      	adds	r3, #96	; 0x60
 800fa62:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 800fa66:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3718      	adds	r7, #24
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	20000930 	.word	0x20000930

0800fa74 <gos_taskSleep>:

/*
 * Function: gos_taskSleep
 */
GOS_INLINE gos_result_t gos_taskSleep (gos_taskSleepTick_t sleepTicks)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 800fa7c:	23ae      	movs	r3, #174	; 0xae
 800fa7e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (currentTaskIndex > 0u)
 800fa80:	4b3a      	ldr	r3, [pc, #232]	; (800fb6c <gos_taskSleep+0xf8>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d06c      	beq.n	800fb62 <gos_taskSleep+0xee>
    {
        GOS_ATOMIC_ENTER
 800fa88:	4b39      	ldr	r3, [pc, #228]	; (800fb70 <gos_taskSleep+0xfc>)
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d108      	bne.n	800faa2 <gos_taskSleep+0x2e>
 800fa90:	b672      	cpsid	i
 800fa92:	f3ef 8310 	mrs	r3, PRIMASK
 800fa96:	4a37      	ldr	r2, [pc, #220]	; (800fb74 <gos_taskSleep+0x100>)
 800fa98:	6013      	str	r3, [r2, #0]
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	f3bf 8f6f 	isb	sy
 800faa2:	4b33      	ldr	r3, [pc, #204]	; (800fb70 <gos_taskSleep+0xfc>)
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	3301      	adds	r3, #1
 800faa8:	b2da      	uxtb	r2, r3
 800faaa:	4b31      	ldr	r3, [pc, #196]	; (800fb70 <gos_taskSleep+0xfc>)
 800faac:	701a      	strb	r2, [r3, #0]
 800faae:	4b32      	ldr	r3, [pc, #200]	; (800fb78 <gos_taskSleep+0x104>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	3301      	adds	r3, #1
 800fab4:	b2da      	uxtb	r2, r3
 800fab6:	4b30      	ldr	r3, [pc, #192]	; (800fb78 <gos_taskSleep+0x104>)
 800fab8:	701a      	strb	r2, [r3, #0]
        {
            if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 800faba:	4b2c      	ldr	r3, [pc, #176]	; (800fb6c <gos_taskSleep+0xf8>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4a2f      	ldr	r2, [pc, #188]	; (800fb7c <gos_taskSleep+0x108>)
 800fac0:	216a      	movs	r1, #106	; 0x6a
 800fac2:	fb01 f303 	mul.w	r3, r1, r3
 800fac6:	4413      	add	r3, r2
 800fac8:	3304      	adds	r3, #4
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	2b0a      	cmp	r3, #10
 800face:	d121      	bne.n	800fb14 <gos_taskSleep+0xa0>
            {
                taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 800fad0:	4b26      	ldr	r3, [pc, #152]	; (800fb6c <gos_taskSleep+0xf8>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a29      	ldr	r2, [pc, #164]	; (800fb7c <gos_taskSleep+0x108>)
 800fad6:	216a      	movs	r1, #106	; 0x6a
 800fad8:	fb01 f303 	mul.w	r3, r1, r3
 800fadc:	4413      	add	r3, r2
 800fade:	3304      	adds	r3, #4
 800fae0:	2216      	movs	r2, #22
 800fae2:	701a      	strb	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 800fae4:	4b21      	ldr	r3, [pc, #132]	; (800fb6c <gos_taskSleep+0xf8>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4a24      	ldr	r2, [pc, #144]	; (800fb7c <gos_taskSleep+0x108>)
 800faea:	216a      	movs	r1, #106	; 0x6a
 800faec:	fb01 f303 	mul.w	r3, r1, r3
 800faf0:	4413      	add	r3, r2
 800faf2:	332c      	adds	r3, #44	; 0x2c
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	601a      	str	r2, [r3, #0]
                taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 800faf8:	4b1c      	ldr	r3, [pc, #112]	; (800fb6c <gos_taskSleep+0xf8>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4a1f      	ldr	r2, [pc, #124]	; (800fb7c <gos_taskSleep+0x108>)
 800fafe:	216a      	movs	r1, #106	; 0x6a
 800fb00:	fb01 f303 	mul.w	r3, r1, r3
 800fb04:	4413      	add	r3, r2
 800fb06:	3330      	adds	r3, #48	; 0x30
 800fb08:	2200      	movs	r2, #0
 800fb0a:	801a      	strh	r2, [r3, #0]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	805a      	strh	r2, [r3, #2]
                taskSleepResult = GOS_SUCCESS;
 800fb10:	2355      	movs	r3, #85	; 0x55
 800fb12:	73fb      	strb	r3, [r7, #15]
            else
            {
                // Nothing to do.
            }
        }
        GOS_ATOMIC_EXIT
 800fb14:	4b16      	ldr	r3, [pc, #88]	; (800fb70 <gos_taskSleep+0xfc>)
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d005      	beq.n	800fb28 <gos_taskSleep+0xb4>
 800fb1c:	4b14      	ldr	r3, [pc, #80]	; (800fb70 <gos_taskSleep+0xfc>)
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	3b01      	subs	r3, #1
 800fb22:	b2da      	uxtb	r2, r3
 800fb24:	4b12      	ldr	r3, [pc, #72]	; (800fb70 <gos_taskSleep+0xfc>)
 800fb26:	701a      	strb	r2, [r3, #0]
 800fb28:	4b11      	ldr	r3, [pc, #68]	; (800fb70 <gos_taskSleep+0xfc>)
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d108      	bne.n	800fb42 <gos_taskSleep+0xce>
 800fb30:	4b10      	ldr	r3, [pc, #64]	; (800fb74 <gos_taskSleep+0x100>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	f383 8810 	msr	PRIMASK, r3
 800fb38:	b662      	cpsie	i
 800fb3a:	f3bf 8f4f 	dsb	sy
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	4b0d      	ldr	r3, [pc, #52]	; (800fb78 <gos_taskSleep+0x104>)
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d005      	beq.n	800fb56 <gos_taskSleep+0xe2>
 800fb4a:	4b0b      	ldr	r3, [pc, #44]	; (800fb78 <gos_taskSleep+0x104>)
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	b2da      	uxtb	r2, r3
 800fb52:	4b09      	ldr	r3, [pc, #36]	; (800fb78 <gos_taskSleep+0x104>)
 800fb54:	701a      	strb	r2, [r3, #0]

        if (taskSleepResult == GOS_SUCCESS)
 800fb56:	7bfb      	ldrb	r3, [r7, #15]
 800fb58:	2b55      	cmp	r3, #85	; 0x55
 800fb5a:	d102      	bne.n	800fb62 <gos_taskSleep+0xee>
        {
            // Unprivileged.
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 800fb5c:	2009      	movs	r0, #9
 800fb5e:	f7ff fb41 	bl	800f1e4 <gos_kernelReschedule>
    else
    {
        // Idle task cannot sleep.
    }

    return taskSleepResult;
 800fb62:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3710      	adds	r7, #16
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	200050f0 	.word	0x200050f0
 800fb70:	200050eb 	.word	0x200050eb
 800fb74:	200050ec 	.word	0x200050ec
 800fb78:	200050e9 	.word	0x200050e9
 800fb7c:	20000930 	.word	0x20000930

0800fb80 <gos_taskWakeup>:

/*
 * Function: gos_taskWakeup
 */
GOS_INLINE gos_result_t gos_taskWakeup (gos_tid_t taskId)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b086      	sub	sp, #24
 800fb84:	af02      	add	r7, sp, #8
 800fb86:	4603      	mov	r3, r0
 800fb88:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskWakeupResult = GOS_ERROR;
 800fb8a:	23ae      	movs	r3, #174	; 0xae
 800fb8c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800fb92:	4b56      	ldr	r3, [pc, #344]	; (800fcec <gos_taskWakeup+0x16c>)
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d108      	bne.n	800fbac <gos_taskWakeup+0x2c>
 800fb9a:	b672      	cpsid	i
 800fb9c:	f3ef 8310 	mrs	r3, PRIMASK
 800fba0:	4a53      	ldr	r2, [pc, #332]	; (800fcf0 <gos_taskWakeup+0x170>)
 800fba2:	6013      	str	r3, [r2, #0]
 800fba4:	f3bf 8f4f 	dsb	sy
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	4b4f      	ldr	r3, [pc, #316]	; (800fcec <gos_taskWakeup+0x16c>)
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	b2da      	uxtb	r2, r3
 800fbb4:	4b4d      	ldr	r3, [pc, #308]	; (800fcec <gos_taskWakeup+0x16c>)
 800fbb6:	701a      	strb	r2, [r3, #0]
 800fbb8:	4b4e      	ldr	r3, [pc, #312]	; (800fcf4 <gos_taskWakeup+0x174>)
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	3301      	adds	r3, #1
 800fbbe:	b2da      	uxtb	r2, r3
 800fbc0:	4b4c      	ldr	r3, [pc, #304]	; (800fcf4 <gos_taskWakeup+0x174>)
 800fbc2:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800fbc4:	88fb      	ldrh	r3, [r7, #6]
 800fbc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fbca:	d969      	bls.n	800fca0 <gos_taskWakeup+0x120>
 800fbcc:	88fb      	ldrh	r3, [r7, #6]
 800fbce:	f248 022f 	movw	r2, #32815	; 0x802f
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d864      	bhi.n	800fca0 <gos_taskWakeup+0x120>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800fbd6:	88fb      	ldrh	r3, [r7, #6]
 800fbd8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800fbdc:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800fbde:	4b46      	ldr	r3, [pc, #280]	; (800fcf8 <gos_taskWakeup+0x178>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a46      	ldr	r2, [pc, #280]	; (800fcfc <gos_taskWakeup+0x17c>)
 800fbe4:	216a      	movs	r1, #106	; 0x6a
 800fbe6:	fb01 f303 	mul.w	r3, r1, r3
 800fbea:	4413      	add	r3, r2
 800fbec:	3308      	adds	r3, #8
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	b21b      	sxth	r3, r3
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	db03      	blt.n	800fbfe <gos_taskWakeup+0x7e>
            inIsr > 0)
 800fbf6:	4b42      	ldr	r3, [pc, #264]	; (800fd00 <gos_taskWakeup+0x180>)
 800fbf8:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d015      	beq.n	800fc2a <gos_taskWakeup+0xaa>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 800fbfe:	4a3f      	ldr	r2, [pc, #252]	; (800fcfc <gos_taskWakeup+0x17c>)
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	216a      	movs	r1, #106	; 0x6a
 800fc04:	fb01 f303 	mul.w	r3, r1, r3
 800fc08:	4413      	add	r3, r2
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	2b16      	cmp	r3, #22
 800fc10:	d146      	bne.n	800fca0 <gos_taskWakeup+0x120>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 800fc12:	4a3a      	ldr	r2, [pc, #232]	; (800fcfc <gos_taskWakeup+0x17c>)
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	216a      	movs	r1, #106	; 0x6a
 800fc18:	fb01 f303 	mul.w	r3, r1, r3
 800fc1c:	4413      	add	r3, r2
 800fc1e:	3304      	adds	r3, #4
 800fc20:	220a      	movs	r2, #10
 800fc22:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 800fc24:	2355      	movs	r3, #85	; 0x55
 800fc26:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 800fc28:	e03a      	b.n	800fca0 <gos_taskWakeup+0x120>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800fc2a:	4b30      	ldr	r3, [pc, #192]	; (800fcec <gos_taskWakeup+0x16c>)
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d005      	beq.n	800fc3e <gos_taskWakeup+0xbe>
 800fc32:	4b2e      	ldr	r3, [pc, #184]	; (800fcec <gos_taskWakeup+0x16c>)
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	3b01      	subs	r3, #1
 800fc38:	b2da      	uxtb	r2, r3
 800fc3a:	4b2c      	ldr	r3, [pc, #176]	; (800fcec <gos_taskWakeup+0x16c>)
 800fc3c:	701a      	strb	r2, [r3, #0]
 800fc3e:	4b2b      	ldr	r3, [pc, #172]	; (800fcec <gos_taskWakeup+0x16c>)
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d108      	bne.n	800fc58 <gos_taskWakeup+0xd8>
 800fc46:	4b2a      	ldr	r3, [pc, #168]	; (800fcf0 <gos_taskWakeup+0x170>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f383 8810 	msr	PRIMASK, r3
 800fc4e:	b662      	cpsie	i
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	4b26      	ldr	r3, [pc, #152]	; (800fcf4 <gos_taskWakeup+0x174>)
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d005      	beq.n	800fc6c <gos_taskWakeup+0xec>
 800fc60:	4b24      	ldr	r3, [pc, #144]	; (800fcf4 <gos_taskWakeup+0x174>)
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	3b01      	subs	r3, #1
 800fc66:	b2da      	uxtb	r2, r3
 800fc68:	4b22      	ldr	r3, [pc, #136]	; (800fcf4 <gos_taskWakeup+0x174>)
 800fc6a:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800fc6c:	4b22      	ldr	r3, [pc, #136]	; (800fcf8 <gos_taskWakeup+0x178>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	226a      	movs	r2, #106	; 0x6a
 800fc72:	fb02 f303 	mul.w	r3, r2, r3
 800fc76:	3308      	adds	r3, #8
 800fc78:	4a20      	ldr	r2, [pc, #128]	; (800fcfc <gos_taskWakeup+0x17c>)
 800fc7a:	4413      	add	r3, r2
 800fc7c:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800fc7e:	68ba      	ldr	r2, [r7, #8]
 800fc80:	216a      	movs	r1, #106	; 0x6a
 800fc82:	fb01 f202 	mul.w	r2, r1, r2
 800fc86:	3208      	adds	r2, #8
 800fc88:	491c      	ldr	r1, [pc, #112]	; (800fcfc <gos_taskWakeup+0x17c>)
 800fc8a:	440a      	add	r2, r1
 800fc8c:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 800fc8e:	9201      	str	r2, [sp, #4]
 800fc90:	9300      	str	r3, [sp, #0]
 800fc92:	4b1c      	ldr	r3, [pc, #112]	; (800fd04 <gos_taskWakeup+0x184>)
 800fc94:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fc98:	491b      	ldr	r1, [pc, #108]	; (800fd08 <gos_taskWakeup+0x188>)
 800fc9a:	2034      	movs	r0, #52	; 0x34
 800fc9c:	f001 fc44 	bl	8011528 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 800fca0:	4b12      	ldr	r3, [pc, #72]	; (800fcec <gos_taskWakeup+0x16c>)
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d005      	beq.n	800fcb4 <gos_taskWakeup+0x134>
 800fca8:	4b10      	ldr	r3, [pc, #64]	; (800fcec <gos_taskWakeup+0x16c>)
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	3b01      	subs	r3, #1
 800fcae:	b2da      	uxtb	r2, r3
 800fcb0:	4b0e      	ldr	r3, [pc, #56]	; (800fcec <gos_taskWakeup+0x16c>)
 800fcb2:	701a      	strb	r2, [r3, #0]
 800fcb4:	4b0d      	ldr	r3, [pc, #52]	; (800fcec <gos_taskWakeup+0x16c>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d108      	bne.n	800fcce <gos_taskWakeup+0x14e>
 800fcbc:	4b0c      	ldr	r3, [pc, #48]	; (800fcf0 <gos_taskWakeup+0x170>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f383 8810 	msr	PRIMASK, r3
 800fcc4:	b662      	cpsie	i
 800fcc6:	f3bf 8f4f 	dsb	sy
 800fcca:	f3bf 8f6f 	isb	sy
 800fcce:	4b09      	ldr	r3, [pc, #36]	; (800fcf4 <gos_taskWakeup+0x174>)
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d005      	beq.n	800fce2 <gos_taskWakeup+0x162>
 800fcd6:	4b07      	ldr	r3, [pc, #28]	; (800fcf4 <gos_taskWakeup+0x174>)
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	b2da      	uxtb	r2, r3
 800fcde:	4b05      	ldr	r3, [pc, #20]	; (800fcf4 <gos_taskWakeup+0x174>)
 800fce0:	701a      	strb	r2, [r3, #0]

    return taskWakeupResult;
 800fce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3710      	adds	r7, #16
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	200050eb 	.word	0x200050eb
 800fcf0:	200050ec 	.word	0x200050ec
 800fcf4:	200050e9 	.word	0x200050e9
 800fcf8:	200050f0 	.word	0x200050f0
 800fcfc:	20000930 	.word	0x20000930
 800fd00:	200050ea 	.word	0x200050ea
 800fd04:	08018aa0 	.word	0x08018aa0
 800fd08:	08019ba0 	.word	0x08019ba0

0800fd0c <gos_taskSuspend>:

/*
 * Function: gos_taskSuspend
 */
GOS_INLINE gos_result_t gos_taskSuspend (gos_tid_t taskId)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af02      	add	r7, sp, #8
 800fd12:	4603      	mov	r3, r0
 800fd14:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskSuspendResult = GOS_ERROR;
 800fd16:	23ae      	movs	r3, #174	; 0xae
 800fd18:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800fd1e:	4b84      	ldr	r3, [pc, #528]	; (800ff30 <gos_taskSuspend+0x224>)
 800fd20:	781b      	ldrb	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d108      	bne.n	800fd38 <gos_taskSuspend+0x2c>
 800fd26:	b672      	cpsid	i
 800fd28:	f3ef 8310 	mrs	r3, PRIMASK
 800fd2c:	4a81      	ldr	r2, [pc, #516]	; (800ff34 <gos_taskSuspend+0x228>)
 800fd2e:	6013      	str	r3, [r2, #0]
 800fd30:	f3bf 8f4f 	dsb	sy
 800fd34:	f3bf 8f6f 	isb	sy
 800fd38:	4b7d      	ldr	r3, [pc, #500]	; (800ff30 <gos_taskSuspend+0x224>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	b2da      	uxtb	r2, r3
 800fd40:	4b7b      	ldr	r3, [pc, #492]	; (800ff30 <gos_taskSuspend+0x224>)
 800fd42:	701a      	strb	r2, [r3, #0]
 800fd44:	4b7c      	ldr	r3, [pc, #496]	; (800ff38 <gos_taskSuspend+0x22c>)
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	b2da      	uxtb	r2, r3
 800fd4c:	4b7a      	ldr	r3, [pc, #488]	; (800ff38 <gos_taskSuspend+0x22c>)
 800fd4e:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800fd50:	88fb      	ldrh	r3, [r7, #6]
 800fd52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd56:	f240 80c1 	bls.w	800fedc <gos_taskSuspend+0x1d0>
 800fd5a:	88fb      	ldrh	r3, [r7, #6]
 800fd5c:	f248 022f 	movw	r2, #32815	; 0x802f
 800fd60:	4293      	cmp	r3, r2
 800fd62:	f200 80bb 	bhi.w	800fedc <gos_taskSuspend+0x1d0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800fd66:	88fb      	ldrh	r3, [r7, #6]
 800fd68:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800fd6c:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800fd6e:	4b73      	ldr	r3, [pc, #460]	; (800ff3c <gos_taskSuspend+0x230>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	4a73      	ldr	r2, [pc, #460]	; (800ff40 <gos_taskSuspend+0x234>)
 800fd74:	216a      	movs	r1, #106	; 0x6a
 800fd76:	fb01 f303 	mul.w	r3, r1, r3
 800fd7a:	4413      	add	r3, r2
 800fd7c:	3308      	adds	r3, #8
 800fd7e:	881b      	ldrh	r3, [r3, #0]
 800fd80:	b21b      	sxth	r3, r3
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	db08      	blt.n	800fd98 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 800fd86:	4b6d      	ldr	r3, [pc, #436]	; (800ff3c <gos_taskSuspend+0x230>)
 800fd88:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800fd8a:	68ba      	ldr	r2, [r7, #8]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d003      	beq.n	800fd98 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 800fd90:	4b6c      	ldr	r3, [pc, #432]	; (800ff44 <gos_taskSuspend+0x238>)
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d064      	beq.n	800fe62 <gos_taskSuspend+0x156>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800fd98:	4a69      	ldr	r2, [pc, #420]	; (800ff40 <gos_taskSuspend+0x234>)
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	216a      	movs	r1, #106	; 0x6a
 800fd9e:	fb01 f303 	mul.w	r3, r1, r3
 800fda2:	4413      	add	r3, r2
 800fda4:	3304      	adds	r3, #4
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b0a      	cmp	r3, #10
 800fdaa:	d014      	beq.n	800fdd6 <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 800fdac:	4a64      	ldr	r2, [pc, #400]	; (800ff40 <gos_taskSuspend+0x234>)
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	216a      	movs	r1, #106	; 0x6a
 800fdb2:	fb01 f303 	mul.w	r3, r1, r3
 800fdb6:	4413      	add	r3, r2
 800fdb8:	3304      	adds	r3, #4
 800fdba:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800fdbc:	2b16      	cmp	r3, #22
 800fdbe:	d00a      	beq.n	800fdd6 <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800fdc0:	4a5f      	ldr	r2, [pc, #380]	; (800ff40 <gos_taskSuspend+0x234>)
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	216a      	movs	r1, #106	; 0x6a
 800fdc6:	fb01 f303 	mul.w	r3, r1, r3
 800fdca:	4413      	add	r3, r2
 800fdcc:	3304      	adds	r3, #4
 800fdce:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 800fdd0:	2b19      	cmp	r3, #25
 800fdd2:	f040 8082 	bne.w	800feda <gos_taskSuspend+0x1ce>
            {
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 800fdd6:	4a5a      	ldr	r2, [pc, #360]	; (800ff40 <gos_taskSuspend+0x234>)
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	216a      	movs	r1, #106	; 0x6a
 800fddc:	fb01 f303 	mul.w	r3, r1, r3
 800fde0:	4413      	add	r3, r2
 800fde2:	3304      	adds	r3, #4
 800fde4:	7818      	ldrb	r0, [r3, #0]
 800fde6:	4a56      	ldr	r2, [pc, #344]	; (800ff40 <gos_taskSuspend+0x234>)
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	216a      	movs	r1, #106	; 0x6a
 800fdec:	fb01 f303 	mul.w	r3, r1, r3
 800fdf0:	4413      	add	r3, r2
 800fdf2:	3305      	adds	r3, #5
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 800fdf8:	4a51      	ldr	r2, [pc, #324]	; (800ff40 <gos_taskSuspend+0x234>)
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	216a      	movs	r1, #106	; 0x6a
 800fdfe:	fb01 f303 	mul.w	r3, r1, r3
 800fe02:	4413      	add	r3, r2
 800fe04:	3304      	adds	r3, #4
 800fe06:	2205      	movs	r2, #5
 800fe08:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 800fe0a:	2355      	movs	r3, #85	; 0x55
 800fe0c:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 800fe0e:	4b48      	ldr	r3, [pc, #288]	; (800ff30 <gos_taskSuspend+0x224>)
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d005      	beq.n	800fe22 <gos_taskSuspend+0x116>
 800fe16:	4b46      	ldr	r3, [pc, #280]	; (800ff30 <gos_taskSuspend+0x224>)
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	3b01      	subs	r3, #1
 800fe1c:	b2da      	uxtb	r2, r3
 800fe1e:	4b44      	ldr	r3, [pc, #272]	; (800ff30 <gos_taskSuspend+0x224>)
 800fe20:	701a      	strb	r2, [r3, #0]
 800fe22:	4b43      	ldr	r3, [pc, #268]	; (800ff30 <gos_taskSuspend+0x224>)
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d108      	bne.n	800fe3c <gos_taskSuspend+0x130>
 800fe2a:	4b42      	ldr	r3, [pc, #264]	; (800ff34 <gos_taskSuspend+0x228>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f383 8810 	msr	PRIMASK, r3
 800fe32:	b662      	cpsie	i
 800fe34:	f3bf 8f4f 	dsb	sy
 800fe38:	f3bf 8f6f 	isb	sy
 800fe3c:	4b3e      	ldr	r3, [pc, #248]	; (800ff38 <gos_taskSuspend+0x22c>)
 800fe3e:	781b      	ldrb	r3, [r3, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d005      	beq.n	800fe50 <gos_taskSuspend+0x144>
 800fe44:	4b3c      	ldr	r3, [pc, #240]	; (800ff38 <gos_taskSuspend+0x22c>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	3b01      	subs	r3, #1
 800fe4a:	b2da      	uxtb	r2, r3
 800fe4c:	4b3a      	ldr	r3, [pc, #232]	; (800ff38 <gos_taskSuspend+0x22c>)
 800fe4e:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 800fe50:	4b3a      	ldr	r3, [pc, #232]	; (800ff3c <gos_taskSuspend+0x230>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68ba      	ldr	r2, [r7, #8]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d13f      	bne.n	800feda <gos_taskSuspend+0x1ce>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 800fe5a:	2009      	movs	r0, #9
 800fe5c:	f7ff f9c2 	bl	800f1e4 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800fe60:	e03b      	b.n	800feda <gos_taskSuspend+0x1ce>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800fe62:	4b33      	ldr	r3, [pc, #204]	; (800ff30 <gos_taskSuspend+0x224>)
 800fe64:	781b      	ldrb	r3, [r3, #0]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d005      	beq.n	800fe76 <gos_taskSuspend+0x16a>
 800fe6a:	4b31      	ldr	r3, [pc, #196]	; (800ff30 <gos_taskSuspend+0x224>)
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	4b2f      	ldr	r3, [pc, #188]	; (800ff30 <gos_taskSuspend+0x224>)
 800fe74:	701a      	strb	r2, [r3, #0]
 800fe76:	4b2e      	ldr	r3, [pc, #184]	; (800ff30 <gos_taskSuspend+0x224>)
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d108      	bne.n	800fe90 <gos_taskSuspend+0x184>
 800fe7e:	4b2d      	ldr	r3, [pc, #180]	; (800ff34 <gos_taskSuspend+0x228>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f383 8810 	msr	PRIMASK, r3
 800fe86:	b662      	cpsie	i
 800fe88:	f3bf 8f4f 	dsb	sy
 800fe8c:	f3bf 8f6f 	isb	sy
 800fe90:	4b29      	ldr	r3, [pc, #164]	; (800ff38 <gos_taskSuspend+0x22c>)
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d005      	beq.n	800fea4 <gos_taskSuspend+0x198>
 800fe98:	4b27      	ldr	r3, [pc, #156]	; (800ff38 <gos_taskSuspend+0x22c>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	3b01      	subs	r3, #1
 800fe9e:	b2da      	uxtb	r2, r3
 800fea0:	4b25      	ldr	r3, [pc, #148]	; (800ff38 <gos_taskSuspend+0x22c>)
 800fea2:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800fea4:	4b25      	ldr	r3, [pc, #148]	; (800ff3c <gos_taskSuspend+0x230>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	226a      	movs	r2, #106	; 0x6a
 800feaa:	fb02 f303 	mul.w	r3, r2, r3
 800feae:	3308      	adds	r3, #8
 800feb0:	4a23      	ldr	r2, [pc, #140]	; (800ff40 <gos_taskSuspend+0x234>)
 800feb2:	4413      	add	r3, r2
 800feb4:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800feb6:	68ba      	ldr	r2, [r7, #8]
 800feb8:	216a      	movs	r1, #106	; 0x6a
 800feba:	fb01 f202 	mul.w	r2, r1, r2
 800febe:	3208      	adds	r2, #8
 800fec0:	491f      	ldr	r1, [pc, #124]	; (800ff40 <gos_taskSuspend+0x234>)
 800fec2:	440a      	add	r2, r1
 800fec4:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 800fec6:	9201      	str	r2, [sp, #4]
 800fec8:	9300      	str	r3, [sp, #0]
 800feca:	4b1f      	ldr	r3, [pc, #124]	; (800ff48 <gos_taskSuspend+0x23c>)
 800fecc:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800fed0:	491e      	ldr	r1, [pc, #120]	; (800ff4c <gos_taskSuspend+0x240>)
 800fed2:	2034      	movs	r0, #52	; 0x34
 800fed4:	f001 fb28 	bl	8011528 <gos_errorHandler>
 800fed8:	e000      	b.n	800fedc <gos_taskSuspend+0x1d0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 800feda:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskSuspendResult != GOS_SUCCESS)
 800fedc:	7bfb      	ldrb	r3, [r7, #15]
 800fede:	2b55      	cmp	r3, #85	; 0x55
 800fee0:	d020      	beq.n	800ff24 <gos_taskSuspend+0x218>
    {
        GOS_ATOMIC_EXIT
 800fee2:	4b13      	ldr	r3, [pc, #76]	; (800ff30 <gos_taskSuspend+0x224>)
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d005      	beq.n	800fef6 <gos_taskSuspend+0x1ea>
 800feea:	4b11      	ldr	r3, [pc, #68]	; (800ff30 <gos_taskSuspend+0x224>)
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	3b01      	subs	r3, #1
 800fef0:	b2da      	uxtb	r2, r3
 800fef2:	4b0f      	ldr	r3, [pc, #60]	; (800ff30 <gos_taskSuspend+0x224>)
 800fef4:	701a      	strb	r2, [r3, #0]
 800fef6:	4b0e      	ldr	r3, [pc, #56]	; (800ff30 <gos_taskSuspend+0x224>)
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d108      	bne.n	800ff10 <gos_taskSuspend+0x204>
 800fefe:	4b0d      	ldr	r3, [pc, #52]	; (800ff34 <gos_taskSuspend+0x228>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f383 8810 	msr	PRIMASK, r3
 800ff06:	b662      	cpsie	i
 800ff08:	f3bf 8f4f 	dsb	sy
 800ff0c:	f3bf 8f6f 	isb	sy
 800ff10:	4b09      	ldr	r3, [pc, #36]	; (800ff38 <gos_taskSuspend+0x22c>)
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d005      	beq.n	800ff24 <gos_taskSuspend+0x218>
 800ff18:	4b07      	ldr	r3, [pc, #28]	; (800ff38 <gos_taskSuspend+0x22c>)
 800ff1a:	781b      	ldrb	r3, [r3, #0]
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	b2da      	uxtb	r2, r3
 800ff20:	4b05      	ldr	r3, [pc, #20]	; (800ff38 <gos_taskSuspend+0x22c>)
 800ff22:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskSuspendResult;
 800ff24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3710      	adds	r7, #16
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	200050eb 	.word	0x200050eb
 800ff34:	200050ec 	.word	0x200050ec
 800ff38:	200050e9 	.word	0x200050e9
 800ff3c:	200050f0 	.word	0x200050f0
 800ff40:	20000930 	.word	0x20000930
 800ff44:	200050ea 	.word	0x200050ea
 800ff48:	08018ac8 	.word	0x08018ac8
 800ff4c:	08019bb0 	.word	0x08019bb0

0800ff50 <gos_taskResume>:

/*
 * Function: gos_taskResume
 */
GOS_INLINE gos_result_t gos_taskResume (gos_tid_t taskId)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b086      	sub	sp, #24
 800ff54:	af02      	add	r7, sp, #8
 800ff56:	4603      	mov	r3, r0
 800ff58:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskResumeResult = GOS_ERROR;
 800ff5a:	23ae      	movs	r3, #174	; 0xae
 800ff5c:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800ff62:	4b4a      	ldr	r3, [pc, #296]	; (801008c <gos_taskResume+0x13c>)
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d108      	bne.n	800ff7c <gos_taskResume+0x2c>
 800ff6a:	b672      	cpsid	i
 800ff6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ff70:	4a47      	ldr	r2, [pc, #284]	; (8010090 <gos_taskResume+0x140>)
 800ff72:	6013      	str	r3, [r2, #0]
 800ff74:	f3bf 8f4f 	dsb	sy
 800ff78:	f3bf 8f6f 	isb	sy
 800ff7c:	4b43      	ldr	r3, [pc, #268]	; (801008c <gos_taskResume+0x13c>)
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	3301      	adds	r3, #1
 800ff82:	b2da      	uxtb	r2, r3
 800ff84:	4b41      	ldr	r3, [pc, #260]	; (801008c <gos_taskResume+0x13c>)
 800ff86:	701a      	strb	r2, [r3, #0]
 800ff88:	4b42      	ldr	r3, [pc, #264]	; (8010094 <gos_taskResume+0x144>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	b2da      	uxtb	r2, r3
 800ff90:	4b40      	ldr	r3, [pc, #256]	; (8010094 <gos_taskResume+0x144>)
 800ff92:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800ff94:	88fb      	ldrh	r3, [r7, #6]
 800ff96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff9a:	d950      	bls.n	801003e <gos_taskResume+0xee>
 800ff9c:	88fb      	ldrh	r3, [r7, #6]
 800ff9e:	f248 022f 	movw	r2, #32815	; 0x802f
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d84b      	bhi.n	801003e <gos_taskResume+0xee>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 800ffa6:	88fb      	ldrh	r3, [r7, #6]
 800ffa8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800ffac:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800ffae:	4b3a      	ldr	r3, [pc, #232]	; (8010098 <gos_taskResume+0x148>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a3a      	ldr	r2, [pc, #232]	; (801009c <gos_taskResume+0x14c>)
 800ffb4:	216a      	movs	r1, #106	; 0x6a
 800ffb6:	fb01 f303 	mul.w	r3, r1, r3
 800ffba:	4413      	add	r3, r2
 800ffbc:	3308      	adds	r3, #8
 800ffbe:	881b      	ldrh	r3, [r3, #0]
 800ffc0:	b21b      	sxth	r3, r3
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	db03      	blt.n	800ffce <gos_taskResume+0x7e>
            inIsr > 0)
 800ffc6:	4b36      	ldr	r3, [pc, #216]	; (80100a0 <gos_taskResume+0x150>)
 800ffc8:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d01d      	beq.n	801000a <gos_taskResume+0xba>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 800ffce:	4a33      	ldr	r2, [pc, #204]	; (801009c <gos_taskResume+0x14c>)
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	216a      	movs	r1, #106	; 0x6a
 800ffd4:	fb01 f303 	mul.w	r3, r1, r3
 800ffd8:	4413      	add	r3, r2
 800ffda:	3304      	adds	r3, #4
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	2b05      	cmp	r3, #5
 800ffe0:	d12d      	bne.n	801003e <gos_taskResume+0xee>
            {
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 800ffe2:	4a2e      	ldr	r2, [pc, #184]	; (801009c <gos_taskResume+0x14c>)
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	216a      	movs	r1, #106	; 0x6a
 800ffe8:	fb01 f303 	mul.w	r3, r1, r3
 800ffec:	4413      	add	r3, r2
 800ffee:	3305      	adds	r3, #5
 800fff0:	7818      	ldrb	r0, [r3, #0]
 800fff2:	4a2a      	ldr	r2, [pc, #168]	; (801009c <gos_taskResume+0x14c>)
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	216a      	movs	r1, #106	; 0x6a
 800fff8:	fb01 f303 	mul.w	r3, r1, r3
 800fffc:	4413      	add	r3, r2
 800fffe:	3304      	adds	r3, #4
 8010000:	4602      	mov	r2, r0
 8010002:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 8010004:	2355      	movs	r3, #85	; 0x55
 8010006:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8010008:	e019      	b.n	801003e <gos_taskResume+0xee>
            }
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 801000a:	4b23      	ldr	r3, [pc, #140]	; (8010098 <gos_taskResume+0x148>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	226a      	movs	r2, #106	; 0x6a
 8010010:	fb02 f303 	mul.w	r3, r2, r3
 8010014:	3308      	adds	r3, #8
 8010016:	4a21      	ldr	r2, [pc, #132]	; (801009c <gos_taskResume+0x14c>)
 8010018:	4413      	add	r3, r2
 801001a:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 801001c:	68ba      	ldr	r2, [r7, #8]
 801001e:	216a      	movs	r1, #106	; 0x6a
 8010020:	fb01 f202 	mul.w	r2, r1, r2
 8010024:	3208      	adds	r2, #8
 8010026:	491d      	ldr	r1, [pc, #116]	; (801009c <gos_taskResume+0x14c>)
 8010028:	440a      	add	r2, r1
 801002a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 801002c:	9201      	str	r2, [sp, #4]
 801002e:	9300      	str	r3, [sp, #0]
 8010030:	4b1c      	ldr	r3, [pc, #112]	; (80100a4 <gos_taskResume+0x154>)
 8010032:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010036:	491c      	ldr	r1, [pc, #112]	; (80100a8 <gos_taskResume+0x158>)
 8010038:	2034      	movs	r0, #52	; 0x34
 801003a:	f001 fa75 	bl	8011528 <gos_errorHandler>
    else
    {
        // Task ID error.
    }

    GOS_ATOMIC_EXIT
 801003e:	4b13      	ldr	r3, [pc, #76]	; (801008c <gos_taskResume+0x13c>)
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d005      	beq.n	8010052 <gos_taskResume+0x102>
 8010046:	4b11      	ldr	r3, [pc, #68]	; (801008c <gos_taskResume+0x13c>)
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	3b01      	subs	r3, #1
 801004c:	b2da      	uxtb	r2, r3
 801004e:	4b0f      	ldr	r3, [pc, #60]	; (801008c <gos_taskResume+0x13c>)
 8010050:	701a      	strb	r2, [r3, #0]
 8010052:	4b0e      	ldr	r3, [pc, #56]	; (801008c <gos_taskResume+0x13c>)
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d108      	bne.n	801006c <gos_taskResume+0x11c>
 801005a:	4b0d      	ldr	r3, [pc, #52]	; (8010090 <gos_taskResume+0x140>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f383 8810 	msr	PRIMASK, r3
 8010062:	b662      	cpsie	i
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	4b09      	ldr	r3, [pc, #36]	; (8010094 <gos_taskResume+0x144>)
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d005      	beq.n	8010080 <gos_taskResume+0x130>
 8010074:	4b07      	ldr	r3, [pc, #28]	; (8010094 <gos_taskResume+0x144>)
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	3b01      	subs	r3, #1
 801007a:	b2da      	uxtb	r2, r3
 801007c:	4b05      	ldr	r3, [pc, #20]	; (8010094 <gos_taskResume+0x144>)
 801007e:	701a      	strb	r2, [r3, #0]

    return taskResumeResult;
 8010080:	7bfb      	ldrb	r3, [r7, #15]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3710      	adds	r7, #16
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	200050eb 	.word	0x200050eb
 8010090:	200050ec 	.word	0x200050ec
 8010094:	200050e9 	.word	0x200050e9
 8010098:	200050f0 	.word	0x200050f0
 801009c:	20000930 	.word	0x20000930
 80100a0:	200050ea 	.word	0x200050ea
 80100a4:	08018af0 	.word	0x08018af0
 80100a8:	08019bc0 	.word	0x08019bc0

080100ac <gos_taskBlock>:

/*
 * Function: gos_taskBlock
 */
GOS_INLINE gos_result_t gos_taskBlock (gos_tid_t taskId, gos_blockMaxTick_t blockTicks)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b086      	sub	sp, #24
 80100b0:	af02      	add	r7, sp, #8
 80100b2:	4603      	mov	r3, r0
 80100b4:	6039      	str	r1, [r7, #0]
 80100b6:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskBlockResult = GOS_ERROR;
 80100b8:	23ae      	movs	r3, #174	; 0xae
 80100ba:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 80100bc:	2300      	movs	r3, #0
 80100be:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80100c0:	4b7b      	ldr	r3, [pc, #492]	; (80102b0 <gos_taskBlock+0x204>)
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d108      	bne.n	80100da <gos_taskBlock+0x2e>
 80100c8:	b672      	cpsid	i
 80100ca:	f3ef 8310 	mrs	r3, PRIMASK
 80100ce:	4a79      	ldr	r2, [pc, #484]	; (80102b4 <gos_taskBlock+0x208>)
 80100d0:	6013      	str	r3, [r2, #0]
 80100d2:	f3bf 8f4f 	dsb	sy
 80100d6:	f3bf 8f6f 	isb	sy
 80100da:	4b75      	ldr	r3, [pc, #468]	; (80102b0 <gos_taskBlock+0x204>)
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	3301      	adds	r3, #1
 80100e0:	b2da      	uxtb	r2, r3
 80100e2:	4b73      	ldr	r3, [pc, #460]	; (80102b0 <gos_taskBlock+0x204>)
 80100e4:	701a      	strb	r2, [r3, #0]
 80100e6:	4b74      	ldr	r3, [pc, #464]	; (80102b8 <gos_taskBlock+0x20c>)
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	3301      	adds	r3, #1
 80100ec:	b2da      	uxtb	r2, r3
 80100ee:	4b72      	ldr	r3, [pc, #456]	; (80102b8 <gos_taskBlock+0x20c>)
 80100f0:	701a      	strb	r2, [r3, #0]

    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80100f2:	88fb      	ldrh	r3, [r7, #6]
 80100f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100f8:	f240 80b0 	bls.w	801025c <gos_taskBlock+0x1b0>
 80100fc:	88fb      	ldrh	r3, [r7, #6]
 80100fe:	f248 022f 	movw	r2, #32815	; 0x802f
 8010102:	4293      	cmp	r3, r2
 8010104:	f200 80aa 	bhi.w	801025c <gos_taskBlock+0x1b0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8010108:	88fb      	ldrh	r3, [r7, #6]
 801010a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 801010e:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8010110:	4b6a      	ldr	r3, [pc, #424]	; (80102bc <gos_taskBlock+0x210>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	4a6a      	ldr	r2, [pc, #424]	; (80102c0 <gos_taskBlock+0x214>)
 8010116:	216a      	movs	r1, #106	; 0x6a
 8010118:	fb01 f303 	mul.w	r3, r1, r3
 801011c:	4413      	add	r3, r2
 801011e:	3308      	adds	r3, #8
 8010120:	881b      	ldrh	r3, [r3, #0]
 8010122:	b21b      	sxth	r3, r3
 8010124:	2b00      	cmp	r3, #0
 8010126:	db08      	blt.n	801013a <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 8010128:	4b64      	ldr	r3, [pc, #400]	; (80102bc <gos_taskBlock+0x210>)
 801012a:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 801012c:	68ba      	ldr	r2, [r7, #8]
 801012e:	429a      	cmp	r2, r3
 8010130:	d003      	beq.n	801013a <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 8010132:	4b64      	ldr	r3, [pc, #400]	; (80102c4 <gos_taskBlock+0x218>)
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d053      	beq.n	80101e2 <gos_taskBlock+0x136>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 801013a:	4a61      	ldr	r2, [pc, #388]	; (80102c0 <gos_taskBlock+0x214>)
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	216a      	movs	r1, #106	; 0x6a
 8010140:	fb01 f303 	mul.w	r3, r1, r3
 8010144:	4413      	add	r3, r2
 8010146:	3304      	adds	r3, #4
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	2b0a      	cmp	r3, #10
 801014c:	f040 8085 	bne.w	801025a <gos_taskBlock+0x1ae>
            {
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 8010150:	4a5b      	ldr	r2, [pc, #364]	; (80102c0 <gos_taskBlock+0x214>)
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	216a      	movs	r1, #106	; 0x6a
 8010156:	fb01 f303 	mul.w	r3, r1, r3
 801015a:	4413      	add	r3, r2
 801015c:	3304      	adds	r3, #4
 801015e:	2219      	movs	r2, #25
 8010160:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 8010162:	4a57      	ldr	r2, [pc, #348]	; (80102c0 <gos_taskBlock+0x214>)
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	216a      	movs	r1, #106	; 0x6a
 8010168:	fb01 f303 	mul.w	r3, r1, r3
 801016c:	4413      	add	r3, r2
 801016e:	3334      	adds	r3, #52	; 0x34
 8010170:	683a      	ldr	r2, [r7, #0]
 8010172:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 8010174:	4a52      	ldr	r2, [pc, #328]	; (80102c0 <gos_taskBlock+0x214>)
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	216a      	movs	r1, #106	; 0x6a
 801017a:	fb01 f303 	mul.w	r3, r1, r3
 801017e:	4413      	add	r3, r2
 8010180:	3338      	adds	r3, #56	; 0x38
 8010182:	2200      	movs	r2, #0
 8010184:	801a      	strh	r2, [r3, #0]
 8010186:	2200      	movs	r2, #0
 8010188:	805a      	strh	r2, [r3, #2]

                taskBlockResult = GOS_SUCCESS;
 801018a:	2355      	movs	r3, #85	; 0x55
 801018c:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 801018e:	4b48      	ldr	r3, [pc, #288]	; (80102b0 <gos_taskBlock+0x204>)
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d005      	beq.n	80101a2 <gos_taskBlock+0xf6>
 8010196:	4b46      	ldr	r3, [pc, #280]	; (80102b0 <gos_taskBlock+0x204>)
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	3b01      	subs	r3, #1
 801019c:	b2da      	uxtb	r2, r3
 801019e:	4b44      	ldr	r3, [pc, #272]	; (80102b0 <gos_taskBlock+0x204>)
 80101a0:	701a      	strb	r2, [r3, #0]
 80101a2:	4b43      	ldr	r3, [pc, #268]	; (80102b0 <gos_taskBlock+0x204>)
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d108      	bne.n	80101bc <gos_taskBlock+0x110>
 80101aa:	4b42      	ldr	r3, [pc, #264]	; (80102b4 <gos_taskBlock+0x208>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f383 8810 	msr	PRIMASK, r3
 80101b2:	b662      	cpsie	i
 80101b4:	f3bf 8f4f 	dsb	sy
 80101b8:	f3bf 8f6f 	isb	sy
 80101bc:	4b3e      	ldr	r3, [pc, #248]	; (80102b8 <gos_taskBlock+0x20c>)
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d005      	beq.n	80101d0 <gos_taskBlock+0x124>
 80101c4:	4b3c      	ldr	r3, [pc, #240]	; (80102b8 <gos_taskBlock+0x20c>)
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	3b01      	subs	r3, #1
 80101ca:	b2da      	uxtb	r2, r3
 80101cc:	4b3a      	ldr	r3, [pc, #232]	; (80102b8 <gos_taskBlock+0x20c>)
 80101ce:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 80101d0:	4b3a      	ldr	r3, [pc, #232]	; (80102bc <gos_taskBlock+0x210>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	68ba      	ldr	r2, [r7, #8]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d13f      	bne.n	801025a <gos_taskBlock+0x1ae>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 80101da:	2009      	movs	r0, #9
 80101dc:	f7ff f802 	bl	800f1e4 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 80101e0:	e03b      	b.n	801025a <gos_taskBlock+0x1ae>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 80101e2:	4b33      	ldr	r3, [pc, #204]	; (80102b0 <gos_taskBlock+0x204>)
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d005      	beq.n	80101f6 <gos_taskBlock+0x14a>
 80101ea:	4b31      	ldr	r3, [pc, #196]	; (80102b0 <gos_taskBlock+0x204>)
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	3b01      	subs	r3, #1
 80101f0:	b2da      	uxtb	r2, r3
 80101f2:	4b2f      	ldr	r3, [pc, #188]	; (80102b0 <gos_taskBlock+0x204>)
 80101f4:	701a      	strb	r2, [r3, #0]
 80101f6:	4b2e      	ldr	r3, [pc, #184]	; (80102b0 <gos_taskBlock+0x204>)
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d108      	bne.n	8010210 <gos_taskBlock+0x164>
 80101fe:	4b2d      	ldr	r3, [pc, #180]	; (80102b4 <gos_taskBlock+0x208>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f383 8810 	msr	PRIMASK, r3
 8010206:	b662      	cpsie	i
 8010208:	f3bf 8f4f 	dsb	sy
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	4b29      	ldr	r3, [pc, #164]	; (80102b8 <gos_taskBlock+0x20c>)
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d005      	beq.n	8010224 <gos_taskBlock+0x178>
 8010218:	4b27      	ldr	r3, [pc, #156]	; (80102b8 <gos_taskBlock+0x20c>)
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	3b01      	subs	r3, #1
 801021e:	b2da      	uxtb	r2, r3
 8010220:	4b25      	ldr	r3, [pc, #148]	; (80102b8 <gos_taskBlock+0x20c>)
 8010222:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8010224:	4b25      	ldr	r3, [pc, #148]	; (80102bc <gos_taskBlock+0x210>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	226a      	movs	r2, #106	; 0x6a
 801022a:	fb02 f303 	mul.w	r3, r2, r3
 801022e:	3308      	adds	r3, #8
 8010230:	4a23      	ldr	r2, [pc, #140]	; (80102c0 <gos_taskBlock+0x214>)
 8010232:	4413      	add	r3, r2
 8010234:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8010236:	68ba      	ldr	r2, [r7, #8]
 8010238:	216a      	movs	r1, #106	; 0x6a
 801023a:	fb01 f202 	mul.w	r2, r1, r2
 801023e:	3208      	adds	r2, #8
 8010240:	491f      	ldr	r1, [pc, #124]	; (80102c0 <gos_taskBlock+0x214>)
 8010242:	440a      	add	r2, r1
 8010244:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 8010246:	9201      	str	r2, [sp, #4]
 8010248:	9300      	str	r3, [sp, #0]
 801024a:	4b1f      	ldr	r3, [pc, #124]	; (80102c8 <gos_taskBlock+0x21c>)
 801024c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8010250:	491e      	ldr	r1, [pc, #120]	; (80102cc <gos_taskBlock+0x220>)
 8010252:	2034      	movs	r0, #52	; 0x34
 8010254:	f001 f968 	bl	8011528 <gos_errorHandler>
 8010258:	e000      	b.n	801025c <gos_taskBlock+0x1b0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 801025a:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskBlockResult != GOS_SUCCESS)
 801025c:	7bfb      	ldrb	r3, [r7, #15]
 801025e:	2b55      	cmp	r3, #85	; 0x55
 8010260:	d020      	beq.n	80102a4 <gos_taskBlock+0x1f8>
    {
        GOS_ATOMIC_EXIT
 8010262:	4b13      	ldr	r3, [pc, #76]	; (80102b0 <gos_taskBlock+0x204>)
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d005      	beq.n	8010276 <gos_taskBlock+0x1ca>
 801026a:	4b11      	ldr	r3, [pc, #68]	; (80102b0 <gos_taskBlock+0x204>)
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	3b01      	subs	r3, #1
 8010270:	b2da      	uxtb	r2, r3
 8010272:	4b0f      	ldr	r3, [pc, #60]	; (80102b0 <gos_taskBlock+0x204>)
 8010274:	701a      	strb	r2, [r3, #0]
 8010276:	4b0e      	ldr	r3, [pc, #56]	; (80102b0 <gos_taskBlock+0x204>)
 8010278:	781b      	ldrb	r3, [r3, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d108      	bne.n	8010290 <gos_taskBlock+0x1e4>
 801027e:	4b0d      	ldr	r3, [pc, #52]	; (80102b4 <gos_taskBlock+0x208>)
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	f383 8810 	msr	PRIMASK, r3
 8010286:	b662      	cpsie	i
 8010288:	f3bf 8f4f 	dsb	sy
 801028c:	f3bf 8f6f 	isb	sy
 8010290:	4b09      	ldr	r3, [pc, #36]	; (80102b8 <gos_taskBlock+0x20c>)
 8010292:	781b      	ldrb	r3, [r3, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d005      	beq.n	80102a4 <gos_taskBlock+0x1f8>
 8010298:	4b07      	ldr	r3, [pc, #28]	; (80102b8 <gos_taskBlock+0x20c>)
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	3b01      	subs	r3, #1
 801029e:	b2da      	uxtb	r2, r3
 80102a0:	4b05      	ldr	r3, [pc, #20]	; (80102b8 <gos_taskBlock+0x20c>)
 80102a2:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskBlockResult;
 80102a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3710      	adds	r7, #16
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	bf00      	nop
 80102b0:	200050eb 	.word	0x200050eb
 80102b4:	200050ec 	.word	0x200050ec
 80102b8:	200050e9 	.word	0x200050e9
 80102bc:	200050f0 	.word	0x200050f0
 80102c0:	20000930 	.word	0x20000930
 80102c4:	200050ea 	.word	0x200050ea
 80102c8:	08018b18 	.word	0x08018b18
 80102cc:	08019bd0 	.word	0x08019bd0

080102d0 <gos_taskUnblock>:

/*
 * Function: gos_taskUnblock
 */
GOS_INLINE gos_result_t gos_taskUnblock (gos_tid_t taskId)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b086      	sub	sp, #24
 80102d4:	af02      	add	r7, sp, #8
 80102d6:	4603      	mov	r3, r0
 80102d8:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskUnblockResult = GOS_ERROR;
 80102da:	23ae      	movs	r3, #174	; 0xae
 80102dc:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 80102de:	2300      	movs	r3, #0
 80102e0:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80102e2:	4b68      	ldr	r3, [pc, #416]	; (8010484 <gos_taskUnblock+0x1b4>)
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d108      	bne.n	80102fc <gos_taskUnblock+0x2c>
 80102ea:	b672      	cpsid	i
 80102ec:	f3ef 8310 	mrs	r3, PRIMASK
 80102f0:	4a65      	ldr	r2, [pc, #404]	; (8010488 <gos_taskUnblock+0x1b8>)
 80102f2:	6013      	str	r3, [r2, #0]
 80102f4:	f3bf 8f4f 	dsb	sy
 80102f8:	f3bf 8f6f 	isb	sy
 80102fc:	4b61      	ldr	r3, [pc, #388]	; (8010484 <gos_taskUnblock+0x1b4>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	3301      	adds	r3, #1
 8010302:	b2da      	uxtb	r2, r3
 8010304:	4b5f      	ldr	r3, [pc, #380]	; (8010484 <gos_taskUnblock+0x1b4>)
 8010306:	701a      	strb	r2, [r3, #0]
 8010308:	4b60      	ldr	r3, [pc, #384]	; (801048c <gos_taskUnblock+0x1bc>)
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	3301      	adds	r3, #1
 801030e:	b2da      	uxtb	r2, r3
 8010310:	4b5e      	ldr	r3, [pc, #376]	; (801048c <gos_taskUnblock+0x1bc>)
 8010312:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8010314:	88fb      	ldrh	r3, [r7, #6]
 8010316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801031a:	f240 808d 	bls.w	8010438 <gos_taskUnblock+0x168>
 801031e:	88fb      	ldrh	r3, [r7, #6]
 8010320:	f248 022f 	movw	r2, #32815	; 0x802f
 8010324:	4293      	cmp	r3, r2
 8010326:	f200 8087 	bhi.w	8010438 <gos_taskUnblock+0x168>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 801032a:	88fb      	ldrh	r3, [r7, #6]
 801032c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010330:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8010332:	4b57      	ldr	r3, [pc, #348]	; (8010490 <gos_taskUnblock+0x1c0>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4a57      	ldr	r2, [pc, #348]	; (8010494 <gos_taskUnblock+0x1c4>)
 8010338:	216a      	movs	r1, #106	; 0x6a
 801033a:	fb01 f303 	mul.w	r3, r1, r3
 801033e:	4413      	add	r3, r2
 8010340:	3308      	adds	r3, #8
 8010342:	881b      	ldrh	r3, [r3, #0]
 8010344:	b21b      	sxth	r3, r3
 8010346:	2b00      	cmp	r3, #0
 8010348:	db03      	blt.n	8010352 <gos_taskUnblock+0x82>
            inIsr > 0)
 801034a:	4b53      	ldr	r3, [pc, #332]	; (8010498 <gos_taskUnblock+0x1c8>)
 801034c:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 801034e:	2b00      	cmp	r3, #0
 8010350:	d035      	beq.n	80103be <gos_taskUnblock+0xee>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8010352:	4a50      	ldr	r2, [pc, #320]	; (8010494 <gos_taskUnblock+0x1c4>)
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	216a      	movs	r1, #106	; 0x6a
 8010358:	fb01 f303 	mul.w	r3, r1, r3
 801035c:	4413      	add	r3, r2
 801035e:	3304      	adds	r3, #4
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	2b19      	cmp	r3, #25
 8010364:	d10b      	bne.n	801037e <gos_taskUnblock+0xae>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8010366:	4a4b      	ldr	r2, [pc, #300]	; (8010494 <gos_taskUnblock+0x1c4>)
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	216a      	movs	r1, #106	; 0x6a
 801036c:	fb01 f303 	mul.w	r3, r1, r3
 8010370:	4413      	add	r3, r2
 8010372:	3304      	adds	r3, #4
 8010374:	220a      	movs	r2, #10
 8010376:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 8010378:	2355      	movs	r3, #85	; 0x55
 801037a:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 801037c:	e05b      	b.n	8010436 <gos_taskUnblock+0x166>
            }
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 801037e:	4a45      	ldr	r2, [pc, #276]	; (8010494 <gos_taskUnblock+0x1c4>)
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	216a      	movs	r1, #106	; 0x6a
 8010384:	fb01 f303 	mul.w	r3, r1, r3
 8010388:	4413      	add	r3, r2
 801038a:	3304      	adds	r3, #4
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	2b05      	cmp	r3, #5
 8010390:	d151      	bne.n	8010436 <gos_taskUnblock+0x166>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 8010392:	4a40      	ldr	r2, [pc, #256]	; (8010494 <gos_taskUnblock+0x1c4>)
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	216a      	movs	r1, #106	; 0x6a
 8010398:	fb01 f303 	mul.w	r3, r1, r3
 801039c:	4413      	add	r3, r2
 801039e:	3305      	adds	r3, #5
 80103a0:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 80103a2:	2b19      	cmp	r3, #25
 80103a4:	d147      	bne.n	8010436 <gos_taskUnblock+0x166>
            {
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 80103a6:	4a3b      	ldr	r2, [pc, #236]	; (8010494 <gos_taskUnblock+0x1c4>)
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	216a      	movs	r1, #106	; 0x6a
 80103ac:	fb01 f303 	mul.w	r3, r1, r3
 80103b0:	4413      	add	r3, r2
 80103b2:	3305      	adds	r3, #5
 80103b4:	220a      	movs	r2, #10
 80103b6:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 80103b8:	2355      	movs	r3, #85	; 0x55
 80103ba:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80103bc:	e03b      	b.n	8010436 <gos_taskUnblock+0x166>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 80103be:	4b31      	ldr	r3, [pc, #196]	; (8010484 <gos_taskUnblock+0x1b4>)
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d005      	beq.n	80103d2 <gos_taskUnblock+0x102>
 80103c6:	4b2f      	ldr	r3, [pc, #188]	; (8010484 <gos_taskUnblock+0x1b4>)
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	3b01      	subs	r3, #1
 80103cc:	b2da      	uxtb	r2, r3
 80103ce:	4b2d      	ldr	r3, [pc, #180]	; (8010484 <gos_taskUnblock+0x1b4>)
 80103d0:	701a      	strb	r2, [r3, #0]
 80103d2:	4b2c      	ldr	r3, [pc, #176]	; (8010484 <gos_taskUnblock+0x1b4>)
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d108      	bne.n	80103ec <gos_taskUnblock+0x11c>
 80103da:	4b2b      	ldr	r3, [pc, #172]	; (8010488 <gos_taskUnblock+0x1b8>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	f383 8810 	msr	PRIMASK, r3
 80103e2:	b662      	cpsie	i
 80103e4:	f3bf 8f4f 	dsb	sy
 80103e8:	f3bf 8f6f 	isb	sy
 80103ec:	4b27      	ldr	r3, [pc, #156]	; (801048c <gos_taskUnblock+0x1bc>)
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d005      	beq.n	8010400 <gos_taskUnblock+0x130>
 80103f4:	4b25      	ldr	r3, [pc, #148]	; (801048c <gos_taskUnblock+0x1bc>)
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	3b01      	subs	r3, #1
 80103fa:	b2da      	uxtb	r2, r3
 80103fc:	4b23      	ldr	r3, [pc, #140]	; (801048c <gos_taskUnblock+0x1bc>)
 80103fe:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8010400:	4b23      	ldr	r3, [pc, #140]	; (8010490 <gos_taskUnblock+0x1c0>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	226a      	movs	r2, #106	; 0x6a
 8010406:	fb02 f303 	mul.w	r3, r2, r3
 801040a:	3308      	adds	r3, #8
 801040c:	4a21      	ldr	r2, [pc, #132]	; (8010494 <gos_taskUnblock+0x1c4>)
 801040e:	4413      	add	r3, r2
 8010410:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8010412:	68ba      	ldr	r2, [r7, #8]
 8010414:	216a      	movs	r1, #106	; 0x6a
 8010416:	fb01 f202 	mul.w	r2, r1, r2
 801041a:	3208      	adds	r2, #8
 801041c:	491d      	ldr	r1, [pc, #116]	; (8010494 <gos_taskUnblock+0x1c4>)
 801041e:	440a      	add	r2, r1
 8010420:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 8010422:	9201      	str	r2, [sp, #4]
 8010424:	9300      	str	r3, [sp, #0]
 8010426:	4b1d      	ldr	r3, [pc, #116]	; (801049c <gos_taskUnblock+0x1cc>)
 8010428:	f240 226d 	movw	r2, #621	; 0x26d
 801042c:	491c      	ldr	r1, [pc, #112]	; (80104a0 <gos_taskUnblock+0x1d0>)
 801042e:	2034      	movs	r0, #52	; 0x34
 8010430:	f001 f87a 	bl	8011528 <gos_errorHandler>
 8010434:	e000      	b.n	8010438 <gos_taskUnblock+0x168>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8010436:	bf00      	nop
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8010438:	4b12      	ldr	r3, [pc, #72]	; (8010484 <gos_taskUnblock+0x1b4>)
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d005      	beq.n	801044c <gos_taskUnblock+0x17c>
 8010440:	4b10      	ldr	r3, [pc, #64]	; (8010484 <gos_taskUnblock+0x1b4>)
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	3b01      	subs	r3, #1
 8010446:	b2da      	uxtb	r2, r3
 8010448:	4b0e      	ldr	r3, [pc, #56]	; (8010484 <gos_taskUnblock+0x1b4>)
 801044a:	701a      	strb	r2, [r3, #0]
 801044c:	4b0d      	ldr	r3, [pc, #52]	; (8010484 <gos_taskUnblock+0x1b4>)
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d108      	bne.n	8010466 <gos_taskUnblock+0x196>
 8010454:	4b0c      	ldr	r3, [pc, #48]	; (8010488 <gos_taskUnblock+0x1b8>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f383 8810 	msr	PRIMASK, r3
 801045c:	b662      	cpsie	i
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	4b09      	ldr	r3, [pc, #36]	; (801048c <gos_taskUnblock+0x1bc>)
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d005      	beq.n	801047a <gos_taskUnblock+0x1aa>
 801046e:	4b07      	ldr	r3, [pc, #28]	; (801048c <gos_taskUnblock+0x1bc>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	3b01      	subs	r3, #1
 8010474:	b2da      	uxtb	r2, r3
 8010476:	4b05      	ldr	r3, [pc, #20]	; (801048c <gos_taskUnblock+0x1bc>)
 8010478:	701a      	strb	r2, [r3, #0]

    return taskUnblockResult;
 801047a:	7bfb      	ldrb	r3, [r7, #15]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3710      	adds	r7, #16
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}
 8010484:	200050eb 	.word	0x200050eb
 8010488:	200050ec 	.word	0x200050ec
 801048c:	200050e9 	.word	0x200050e9
 8010490:	200050f0 	.word	0x200050f0
 8010494:	20000930 	.word	0x20000930
 8010498:	200050ea 	.word	0x200050ea
 801049c:	08018b40 	.word	0x08018b40
 80104a0:	08019be0 	.word	0x08019be0

080104a4 <gos_taskDelete>:

/*
 * Function: gos_taskDelete
 */
GOS_INLINE gos_result_t gos_taskDelete (gos_tid_t taskId)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	af02      	add	r7, sp, #8
 80104aa:	4603      	mov	r3, r0
 80104ac:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskDeleteResult = GOS_ERROR;
 80104ae:	23ae      	movs	r3, #174	; 0xae
 80104b0:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 80104b2:	2300      	movs	r3, #0
 80104b4:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80104b6:	4b84      	ldr	r3, [pc, #528]	; (80106c8 <gos_taskDelete+0x224>)
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d108      	bne.n	80104d0 <gos_taskDelete+0x2c>
 80104be:	b672      	cpsid	i
 80104c0:	f3ef 8310 	mrs	r3, PRIMASK
 80104c4:	4a81      	ldr	r2, [pc, #516]	; (80106cc <gos_taskDelete+0x228>)
 80104c6:	6013      	str	r3, [r2, #0]
 80104c8:	f3bf 8f4f 	dsb	sy
 80104cc:	f3bf 8f6f 	isb	sy
 80104d0:	4b7d      	ldr	r3, [pc, #500]	; (80106c8 <gos_taskDelete+0x224>)
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	3301      	adds	r3, #1
 80104d6:	b2da      	uxtb	r2, r3
 80104d8:	4b7b      	ldr	r3, [pc, #492]	; (80106c8 <gos_taskDelete+0x224>)
 80104da:	701a      	strb	r2, [r3, #0]
 80104dc:	4b7c      	ldr	r3, [pc, #496]	; (80106d0 <gos_taskDelete+0x22c>)
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	3301      	adds	r3, #1
 80104e2:	b2da      	uxtb	r2, r3
 80104e4:	4b7a      	ldr	r3, [pc, #488]	; (80106d0 <gos_taskDelete+0x22c>)
 80104e6:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80104e8:	88fb      	ldrh	r3, [r7, #6]
 80104ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104ee:	f240 80b9 	bls.w	8010664 <gos_taskDelete+0x1c0>
 80104f2:	88fb      	ldrh	r3, [r7, #6]
 80104f4:	f248 022f 	movw	r2, #32815	; 0x802f
 80104f8:	4293      	cmp	r3, r2
 80104fa:	f200 80b3 	bhi.w	8010664 <gos_taskDelete+0x1c0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80104fe:	88fb      	ldrh	r3, [r7, #6]
 8010500:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010504:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8010506:	4b73      	ldr	r3, [pc, #460]	; (80106d4 <gos_taskDelete+0x230>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a73      	ldr	r2, [pc, #460]	; (80106d8 <gos_taskDelete+0x234>)
 801050c:	216a      	movs	r1, #106	; 0x6a
 801050e:	fb01 f303 	mul.w	r3, r1, r3
 8010512:	4413      	add	r3, r2
 8010514:	3308      	adds	r3, #8
 8010516:	881b      	ldrh	r3, [r3, #0]
 8010518:	b21b      	sxth	r3, r3
 801051a:	2b00      	cmp	r3, #0
 801051c:	db08      	blt.n	8010530 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 801051e:	4b6d      	ldr	r3, [pc, #436]	; (80106d4 <gos_taskDelete+0x230>)
 8010520:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8010522:	68ba      	ldr	r2, [r7, #8]
 8010524:	429a      	cmp	r2, r3
 8010526:	d003      	beq.n	8010530 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8010528:	4b6c      	ldr	r3, [pc, #432]	; (80106dc <gos_taskDelete+0x238>)
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d05e      	beq.n	80105ee <gos_taskDelete+0x14a>
        {
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8010530:	4a69      	ldr	r2, [pc, #420]	; (80106d8 <gos_taskDelete+0x234>)
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	216a      	movs	r1, #106	; 0x6a
 8010536:	fb01 f303 	mul.w	r3, r1, r3
 801053a:	4413      	add	r3, r2
 801053c:	3304      	adds	r3, #4
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	2b0d      	cmp	r3, #13
 8010542:	f000 808f 	beq.w	8010664 <gos_taskDelete+0x1c0>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 8010546:	4a64      	ldr	r2, [pc, #400]	; (80106d8 <gos_taskDelete+0x234>)
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	216a      	movs	r1, #106	; 0x6a
 801054c:	fb01 f303 	mul.w	r3, r1, r3
 8010550:	4413      	add	r3, r2
 8010552:	3304      	adds	r3, #4
 8010554:	220d      	movs	r2, #13
 8010556:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 8010558:	2355      	movs	r3, #85	; 0x55
 801055a:	73fb      	strb	r3, [r7, #15]

                // Invoke signal.
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 801055c:	4b5d      	ldr	r3, [pc, #372]	; (80106d4 <gos_taskDelete+0x230>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	4a5d      	ldr	r2, [pc, #372]	; (80106d8 <gos_taskDelete+0x234>)
 8010562:	216a      	movs	r1, #106	; 0x6a
 8010564:	fb01 f303 	mul.w	r3, r1, r3
 8010568:	4413      	add	r3, r2
 801056a:	3308      	adds	r3, #8
 801056c:	881b      	ldrh	r3, [r3, #0]
 801056e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010572:	2b00      	cmp	r3, #0
 8010574:	d133      	bne.n	80105de <gos_taskDelete+0x13a>
                {
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 8010576:	4b57      	ldr	r3, [pc, #348]	; (80106d4 <gos_taskDelete+0x230>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	4a57      	ldr	r2, [pc, #348]	; (80106d8 <gos_taskDelete+0x234>)
 801057c:	216a      	movs	r1, #106	; 0x6a
 801057e:	fb01 f303 	mul.w	r3, r1, r3
 8010582:	4413      	add	r3, r2
 8010584:	3308      	adds	r3, #8
 8010586:	881a      	ldrh	r2, [r3, #0]
 8010588:	4b52      	ldr	r3, [pc, #328]	; (80106d4 <gos_taskDelete+0x230>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010590:	b290      	uxth	r0, r2
 8010592:	4a51      	ldr	r2, [pc, #324]	; (80106d8 <gos_taskDelete+0x234>)
 8010594:	216a      	movs	r1, #106	; 0x6a
 8010596:	fb01 f303 	mul.w	r3, r1, r3
 801059a:	4413      	add	r3, r2
 801059c:	3308      	adds	r3, #8
 801059e:	4602      	mov	r2, r0
 80105a0:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 80105a2:	4b4f      	ldr	r3, [pc, #316]	; (80106e0 <gos_taskDelete+0x23c>)
 80105a4:	781b      	ldrb	r3, [r3, #0]
 80105a6:	88fa      	ldrh	r2, [r7, #6]
 80105a8:	4611      	mov	r1, r2
 80105aa:	4618      	mov	r0, r3
 80105ac:	f002 ff68 	bl	8013480 <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 80105b0:	4b48      	ldr	r3, [pc, #288]	; (80106d4 <gos_taskDelete+0x230>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4a48      	ldr	r2, [pc, #288]	; (80106d8 <gos_taskDelete+0x234>)
 80105b6:	216a      	movs	r1, #106	; 0x6a
 80105b8:	fb01 f303 	mul.w	r3, r1, r3
 80105bc:	4413      	add	r3, r2
 80105be:	3308      	adds	r3, #8
 80105c0:	881a      	ldrh	r2, [r3, #0]
 80105c2:	4b44      	ldr	r3, [pc, #272]	; (80106d4 <gos_taskDelete+0x230>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80105ca:	b290      	uxth	r0, r2
 80105cc:	4a42      	ldr	r2, [pc, #264]	; (80106d8 <gos_taskDelete+0x234>)
 80105ce:	216a      	movs	r1, #106	; 0x6a
 80105d0:	fb01 f303 	mul.w	r3, r1, r3
 80105d4:	4413      	add	r3, r2
 80105d6:	3308      	adds	r3, #8
 80105d8:	4602      	mov	r2, r0
 80105da:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 80105dc:	e042      	b.n	8010664 <gos_taskDelete+0x1c0>
                }
                else
                {
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 80105de:	4b40      	ldr	r3, [pc, #256]	; (80106e0 <gos_taskDelete+0x23c>)
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	88fa      	ldrh	r2, [r7, #6]
 80105e4:	4611      	mov	r1, r2
 80105e6:	4618      	mov	r0, r3
 80105e8:	f002 ff4a 	bl	8013480 <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 80105ec:	e03a      	b.n	8010664 <gos_taskDelete+0x1c0>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 80105ee:	4b36      	ldr	r3, [pc, #216]	; (80106c8 <gos_taskDelete+0x224>)
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d005      	beq.n	8010602 <gos_taskDelete+0x15e>
 80105f6:	4b34      	ldr	r3, [pc, #208]	; (80106c8 <gos_taskDelete+0x224>)
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	3b01      	subs	r3, #1
 80105fc:	b2da      	uxtb	r2, r3
 80105fe:	4b32      	ldr	r3, [pc, #200]	; (80106c8 <gos_taskDelete+0x224>)
 8010600:	701a      	strb	r2, [r3, #0]
 8010602:	4b31      	ldr	r3, [pc, #196]	; (80106c8 <gos_taskDelete+0x224>)
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d108      	bne.n	801061c <gos_taskDelete+0x178>
 801060a:	4b30      	ldr	r3, [pc, #192]	; (80106cc <gos_taskDelete+0x228>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f383 8810 	msr	PRIMASK, r3
 8010612:	b662      	cpsie	i
 8010614:	f3bf 8f4f 	dsb	sy
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	4b2c      	ldr	r3, [pc, #176]	; (80106d0 <gos_taskDelete+0x22c>)
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d005      	beq.n	8010630 <gos_taskDelete+0x18c>
 8010624:	4b2a      	ldr	r3, [pc, #168]	; (80106d0 <gos_taskDelete+0x22c>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	3b01      	subs	r3, #1
 801062a:	b2da      	uxtb	r2, r3
 801062c:	4b28      	ldr	r3, [pc, #160]	; (80106d0 <gos_taskDelete+0x22c>)
 801062e:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8010630:	4b28      	ldr	r3, [pc, #160]	; (80106d4 <gos_taskDelete+0x230>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	226a      	movs	r2, #106	; 0x6a
 8010636:	fb02 f303 	mul.w	r3, r2, r3
 801063a:	3308      	adds	r3, #8
 801063c:	4a26      	ldr	r2, [pc, #152]	; (80106d8 <gos_taskDelete+0x234>)
 801063e:	4413      	add	r3, r2
 8010640:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8010642:	68ba      	ldr	r2, [r7, #8]
 8010644:	216a      	movs	r1, #106	; 0x6a
 8010646:	fb01 f202 	mul.w	r2, r1, r2
 801064a:	3208      	adds	r2, #8
 801064c:	4922      	ldr	r1, [pc, #136]	; (80106d8 <gos_taskDelete+0x234>)
 801064e:	440a      	add	r2, r1
 8010650:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 8010652:	9201      	str	r2, [sp, #4]
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	4b23      	ldr	r3, [pc, #140]	; (80106e4 <gos_taskDelete+0x240>)
 8010658:	f240 22ad 	movw	r2, #685	; 0x2ad
 801065c:	4922      	ldr	r1, [pc, #136]	; (80106e8 <gos_taskDelete+0x244>)
 801065e:	2034      	movs	r0, #52	; 0x34
 8010660:	f000 ff62 	bl	8011528 <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8010664:	4b18      	ldr	r3, [pc, #96]	; (80106c8 <gos_taskDelete+0x224>)
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d005      	beq.n	8010678 <gos_taskDelete+0x1d4>
 801066c:	4b16      	ldr	r3, [pc, #88]	; (80106c8 <gos_taskDelete+0x224>)
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	3b01      	subs	r3, #1
 8010672:	b2da      	uxtb	r2, r3
 8010674:	4b14      	ldr	r3, [pc, #80]	; (80106c8 <gos_taskDelete+0x224>)
 8010676:	701a      	strb	r2, [r3, #0]
 8010678:	4b13      	ldr	r3, [pc, #76]	; (80106c8 <gos_taskDelete+0x224>)
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d108      	bne.n	8010692 <gos_taskDelete+0x1ee>
 8010680:	4b12      	ldr	r3, [pc, #72]	; (80106cc <gos_taskDelete+0x228>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f383 8810 	msr	PRIMASK, r3
 8010688:	b662      	cpsie	i
 801068a:	f3bf 8f4f 	dsb	sy
 801068e:	f3bf 8f6f 	isb	sy
 8010692:	4b0f      	ldr	r3, [pc, #60]	; (80106d0 <gos_taskDelete+0x22c>)
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d005      	beq.n	80106a6 <gos_taskDelete+0x202>
 801069a:	4b0d      	ldr	r3, [pc, #52]	; (80106d0 <gos_taskDelete+0x22c>)
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	3b01      	subs	r3, #1
 80106a0:	b2da      	uxtb	r2, r3
 80106a2:	4b0b      	ldr	r3, [pc, #44]	; (80106d0 <gos_taskDelete+0x22c>)
 80106a4:	701a      	strb	r2, [r3, #0]

    if (taskDeleteResult == GOS_SUCCESS)
 80106a6:	7bfb      	ldrb	r3, [r7, #15]
 80106a8:	2b55      	cmp	r3, #85	; 0x55
 80106aa:	d107      	bne.n	80106bc <gos_taskDelete+0x218>
    {
        if (currentTaskIndex == taskIndex)
 80106ac:	4b09      	ldr	r3, [pc, #36]	; (80106d4 <gos_taskDelete+0x230>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	68ba      	ldr	r2, [r7, #8]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d102      	bne.n	80106bc <gos_taskDelete+0x218>
        {
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 80106b6:	2009      	movs	r0, #9
 80106b8:	f7fe fd94 	bl	800f1e4 <gos_kernelReschedule>
    else
    {
        // Nothing to do.
    }

    return taskDeleteResult;
 80106bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3710      	adds	r7, #16
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	200050eb 	.word	0x200050eb
 80106cc:	200050ec 	.word	0x200050ec
 80106d0:	200050e9 	.word	0x200050e9
 80106d4:	200050f0 	.word	0x200050f0
 80106d8:	20000930 	.word	0x20000930
 80106dc:	200050ea 	.word	0x200050ea
 80106e0:	20005114 	.word	0x20005114
 80106e4:	08018b68 	.word	0x08018b68
 80106e8:	08019bf0 	.word	0x08019bf0

080106ec <gos_taskSetPriority>:

/*
 * Function: gos_taskSetPriority
 */
GOS_INLINE gos_result_t gos_taskSetPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b086      	sub	sp, #24
 80106f0:	af02      	add	r7, sp, #8
 80106f2:	4603      	mov	r3, r0
 80106f4:	460a      	mov	r2, r1
 80106f6:	80fb      	strh	r3, [r7, #6]
 80106f8:	4613      	mov	r3, r2
 80106fa:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 80106fc:	23ae      	movs	r3, #174	; 0xae
 80106fe:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8010700:	2300      	movs	r3, #0
 8010702:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8010704:	4b53      	ldr	r3, [pc, #332]	; (8010854 <gos_taskSetPriority+0x168>)
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d108      	bne.n	801071e <gos_taskSetPriority+0x32>
 801070c:	b672      	cpsid	i
 801070e:	f3ef 8310 	mrs	r3, PRIMASK
 8010712:	4a51      	ldr	r2, [pc, #324]	; (8010858 <gos_taskSetPriority+0x16c>)
 8010714:	6013      	str	r3, [r2, #0]
 8010716:	f3bf 8f4f 	dsb	sy
 801071a:	f3bf 8f6f 	isb	sy
 801071e:	4b4d      	ldr	r3, [pc, #308]	; (8010854 <gos_taskSetPriority+0x168>)
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	3301      	adds	r3, #1
 8010724:	b2da      	uxtb	r2, r3
 8010726:	4b4b      	ldr	r3, [pc, #300]	; (8010854 <gos_taskSetPriority+0x168>)
 8010728:	701a      	strb	r2, [r3, #0]
 801072a:	4b4c      	ldr	r3, [pc, #304]	; (801085c <gos_taskSetPriority+0x170>)
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	3301      	adds	r3, #1
 8010730:	b2da      	uxtb	r2, r3
 8010732:	4b4a      	ldr	r3, [pc, #296]	; (801085c <gos_taskSetPriority+0x170>)
 8010734:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8010736:	88fb      	ldrh	r3, [r7, #6]
 8010738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801073c:	d963      	bls.n	8010806 <gos_taskSetPriority+0x11a>
 801073e:	88fb      	ldrh	r3, [r7, #6]
 8010740:	f248 022f 	movw	r2, #32815	; 0x802f
 8010744:	4293      	cmp	r3, r2
 8010746:	d85e      	bhi.n	8010806 <gos_taskSetPriority+0x11a>
 8010748:	797b      	ldrb	r3, [r7, #5]
 801074a:	2bff      	cmp	r3, #255	; 0xff
 801074c:	d05b      	beq.n	8010806 <gos_taskSetPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 801074e:	88fb      	ldrh	r3, [r7, #6]
 8010750:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010754:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8010756:	4b42      	ldr	r3, [pc, #264]	; (8010860 <gos_taskSetPriority+0x174>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	4a42      	ldr	r2, [pc, #264]	; (8010864 <gos_taskSetPriority+0x178>)
 801075c:	216a      	movs	r1, #106	; 0x6a
 801075e:	fb01 f303 	mul.w	r3, r1, r3
 8010762:	4413      	add	r3, r2
 8010764:	3308      	adds	r3, #8
 8010766:	881b      	ldrh	r3, [r3, #0]
 8010768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801076c:	2b00      	cmp	r3, #0
 801076e:	d103      	bne.n	8010778 <gos_taskSetPriority+0x8c>
            inIsr > 0)
 8010770:	4b3d      	ldr	r3, [pc, #244]	; (8010868 <gos_taskSetPriority+0x17c>)
 8010772:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8010774:	2b00      	cmp	r3, #0
 8010776:	d00b      	beq.n	8010790 <gos_taskSetPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 8010778:	4a3a      	ldr	r2, [pc, #232]	; (8010864 <gos_taskSetPriority+0x178>)
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	216a      	movs	r1, #106	; 0x6a
 801077e:	fb01 f303 	mul.w	r3, r1, r3
 8010782:	4413      	add	r3, r2
 8010784:	3306      	adds	r3, #6
 8010786:	797a      	ldrb	r2, [r7, #5]
 8010788:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 801078a:	2355      	movs	r3, #85	; 0x55
 801078c:	73fb      	strb	r3, [r7, #15]
 801078e:	e03a      	b.n	8010806 <gos_taskSetPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 8010790:	4b30      	ldr	r3, [pc, #192]	; (8010854 <gos_taskSetPriority+0x168>)
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d005      	beq.n	80107a4 <gos_taskSetPriority+0xb8>
 8010798:	4b2e      	ldr	r3, [pc, #184]	; (8010854 <gos_taskSetPriority+0x168>)
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	3b01      	subs	r3, #1
 801079e:	b2da      	uxtb	r2, r3
 80107a0:	4b2c      	ldr	r3, [pc, #176]	; (8010854 <gos_taskSetPriority+0x168>)
 80107a2:	701a      	strb	r2, [r3, #0]
 80107a4:	4b2b      	ldr	r3, [pc, #172]	; (8010854 <gos_taskSetPriority+0x168>)
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d108      	bne.n	80107be <gos_taskSetPriority+0xd2>
 80107ac:	4b2a      	ldr	r3, [pc, #168]	; (8010858 <gos_taskSetPriority+0x16c>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f383 8810 	msr	PRIMASK, r3
 80107b4:	b662      	cpsie	i
 80107b6:	f3bf 8f4f 	dsb	sy
 80107ba:	f3bf 8f6f 	isb	sy
 80107be:	4b27      	ldr	r3, [pc, #156]	; (801085c <gos_taskSetPriority+0x170>)
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d005      	beq.n	80107d2 <gos_taskSetPriority+0xe6>
 80107c6:	4b25      	ldr	r3, [pc, #148]	; (801085c <gos_taskSetPriority+0x170>)
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	3b01      	subs	r3, #1
 80107cc:	b2da      	uxtb	r2, r3
 80107ce:	4b23      	ldr	r3, [pc, #140]	; (801085c <gos_taskSetPriority+0x170>)
 80107d0:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 80107d2:	4b23      	ldr	r3, [pc, #140]	; (8010860 <gos_taskSetPriority+0x174>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	226a      	movs	r2, #106	; 0x6a
 80107d8:	fb02 f303 	mul.w	r3, r2, r3
 80107dc:	3308      	adds	r3, #8
 80107de:	4a21      	ldr	r2, [pc, #132]	; (8010864 <gos_taskSetPriority+0x178>)
 80107e0:	4413      	add	r3, r2
 80107e2:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 80107e4:	68ba      	ldr	r2, [r7, #8]
 80107e6:	216a      	movs	r1, #106	; 0x6a
 80107e8:	fb01 f202 	mul.w	r2, r1, r2
 80107ec:	3208      	adds	r2, #8
 80107ee:	491d      	ldr	r1, [pc, #116]	; (8010864 <gos_taskSetPriority+0x178>)
 80107f0:	440a      	add	r2, r1
 80107f2:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 80107f4:	9201      	str	r2, [sp, #4]
 80107f6:	9300      	str	r3, [sp, #0]
 80107f8:	4b1c      	ldr	r3, [pc, #112]	; (801086c <gos_taskSetPriority+0x180>)
 80107fa:	f240 22eb 	movw	r2, #747	; 0x2eb
 80107fe:	491c      	ldr	r1, [pc, #112]	; (8010870 <gos_taskSetPriority+0x184>)
 8010800:	2034      	movs	r0, #52	; 0x34
 8010802:	f000 fe91 	bl	8011528 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 8010806:	4b13      	ldr	r3, [pc, #76]	; (8010854 <gos_taskSetPriority+0x168>)
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d005      	beq.n	801081a <gos_taskSetPriority+0x12e>
 801080e:	4b11      	ldr	r3, [pc, #68]	; (8010854 <gos_taskSetPriority+0x168>)
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	3b01      	subs	r3, #1
 8010814:	b2da      	uxtb	r2, r3
 8010816:	4b0f      	ldr	r3, [pc, #60]	; (8010854 <gos_taskSetPriority+0x168>)
 8010818:	701a      	strb	r2, [r3, #0]
 801081a:	4b0e      	ldr	r3, [pc, #56]	; (8010854 <gos_taskSetPriority+0x168>)
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d108      	bne.n	8010834 <gos_taskSetPriority+0x148>
 8010822:	4b0d      	ldr	r3, [pc, #52]	; (8010858 <gos_taskSetPriority+0x16c>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f383 8810 	msr	PRIMASK, r3
 801082a:	b662      	cpsie	i
 801082c:	f3bf 8f4f 	dsb	sy
 8010830:	f3bf 8f6f 	isb	sy
 8010834:	4b09      	ldr	r3, [pc, #36]	; (801085c <gos_taskSetPriority+0x170>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d005      	beq.n	8010848 <gos_taskSetPriority+0x15c>
 801083c:	4b07      	ldr	r3, [pc, #28]	; (801085c <gos_taskSetPriority+0x170>)
 801083e:	781b      	ldrb	r3, [r3, #0]
 8010840:	3b01      	subs	r3, #1
 8010842:	b2da      	uxtb	r2, r3
 8010844:	4b05      	ldr	r3, [pc, #20]	; (801085c <gos_taskSetPriority+0x170>)
 8010846:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 8010848:	7bfb      	ldrb	r3, [r7, #15]
}
 801084a:	4618      	mov	r0, r3
 801084c:	3710      	adds	r7, #16
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}
 8010852:	bf00      	nop
 8010854:	200050eb 	.word	0x200050eb
 8010858:	200050ec 	.word	0x200050ec
 801085c:	200050e9 	.word	0x200050e9
 8010860:	200050f0 	.word	0x200050f0
 8010864:	20000930 	.word	0x20000930
 8010868:	200050ea 	.word	0x200050ea
 801086c:	08018b90 	.word	0x08018b90
 8010870:	08019c00 	.word	0x08019c00

08010874 <gos_taskSetOriginalPriority>:

/*
 * Function: gos_taskSetOriginalPriority
 */
GOS_INLINE gos_result_t gos_taskSetOriginalPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b086      	sub	sp, #24
 8010878:	af02      	add	r7, sp, #8
 801087a:	4603      	mov	r3, r0
 801087c:	460a      	mov	r2, r1
 801087e:	80fb      	strh	r3, [r7, #6]
 8010880:	4613      	mov	r3, r2
 8010882:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 8010884:	23ae      	movs	r3, #174	; 0xae
 8010886:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8010888:	2300      	movs	r3, #0
 801088a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 801088c:	4b53      	ldr	r3, [pc, #332]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d108      	bne.n	80108a6 <gos_taskSetOriginalPriority+0x32>
 8010894:	b672      	cpsid	i
 8010896:	f3ef 8310 	mrs	r3, PRIMASK
 801089a:	4a51      	ldr	r2, [pc, #324]	; (80109e0 <gos_taskSetOriginalPriority+0x16c>)
 801089c:	6013      	str	r3, [r2, #0]
 801089e:	f3bf 8f4f 	dsb	sy
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	4b4d      	ldr	r3, [pc, #308]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	3301      	adds	r3, #1
 80108ac:	b2da      	uxtb	r2, r3
 80108ae:	4b4b      	ldr	r3, [pc, #300]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 80108b0:	701a      	strb	r2, [r3, #0]
 80108b2:	4b4c      	ldr	r3, [pc, #304]	; (80109e4 <gos_taskSetOriginalPriority+0x170>)
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	3301      	adds	r3, #1
 80108b8:	b2da      	uxtb	r2, r3
 80108ba:	4b4a      	ldr	r3, [pc, #296]	; (80109e4 <gos_taskSetOriginalPriority+0x170>)
 80108bc:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 80108be:	88fb      	ldrh	r3, [r7, #6]
 80108c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80108c4:	d963      	bls.n	801098e <gos_taskSetOriginalPriority+0x11a>
 80108c6:	88fb      	ldrh	r3, [r7, #6]
 80108c8:	f248 022f 	movw	r2, #32815	; 0x802f
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d85e      	bhi.n	801098e <gos_taskSetOriginalPriority+0x11a>
 80108d0:	797b      	ldrb	r3, [r7, #5]
 80108d2:	2bff      	cmp	r3, #255	; 0xff
 80108d4:	d05b      	beq.n	801098e <gos_taskSetOriginalPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80108d6:	88fb      	ldrh	r3, [r7, #6]
 80108d8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80108dc:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 80108de:	4b42      	ldr	r3, [pc, #264]	; (80109e8 <gos_taskSetOriginalPriority+0x174>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4a42      	ldr	r2, [pc, #264]	; (80109ec <gos_taskSetOriginalPriority+0x178>)
 80108e4:	216a      	movs	r1, #106	; 0x6a
 80108e6:	fb01 f303 	mul.w	r3, r1, r3
 80108ea:	4413      	add	r3, r2
 80108ec:	3308      	adds	r3, #8
 80108ee:	881b      	ldrh	r3, [r3, #0]
 80108f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d103      	bne.n	8010900 <gos_taskSetOriginalPriority+0x8c>
            inIsr > 0)
 80108f8:	4b3d      	ldr	r3, [pc, #244]	; (80109f0 <gos_taskSetOriginalPriority+0x17c>)
 80108fa:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d00b      	beq.n	8010918 <gos_taskSetOriginalPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 8010900:	4a3a      	ldr	r2, [pc, #232]	; (80109ec <gos_taskSetOriginalPriority+0x178>)
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	216a      	movs	r1, #106	; 0x6a
 8010906:	fb01 f303 	mul.w	r3, r1, r3
 801090a:	4413      	add	r3, r2
 801090c:	3307      	adds	r3, #7
 801090e:	797a      	ldrb	r2, [r7, #5]
 8010910:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 8010912:	2355      	movs	r3, #85	; 0x55
 8010914:	73fb      	strb	r3, [r7, #15]
 8010916:	e03a      	b.n	801098e <gos_taskSetOriginalPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 8010918:	4b30      	ldr	r3, [pc, #192]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d005      	beq.n	801092c <gos_taskSetOriginalPriority+0xb8>
 8010920:	4b2e      	ldr	r3, [pc, #184]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	3b01      	subs	r3, #1
 8010926:	b2da      	uxtb	r2, r3
 8010928:	4b2c      	ldr	r3, [pc, #176]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 801092a:	701a      	strb	r2, [r3, #0]
 801092c:	4b2b      	ldr	r3, [pc, #172]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 801092e:	781b      	ldrb	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d108      	bne.n	8010946 <gos_taskSetOriginalPriority+0xd2>
 8010934:	4b2a      	ldr	r3, [pc, #168]	; (80109e0 <gos_taskSetOriginalPriority+0x16c>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f383 8810 	msr	PRIMASK, r3
 801093c:	b662      	cpsie	i
 801093e:	f3bf 8f4f 	dsb	sy
 8010942:	f3bf 8f6f 	isb	sy
 8010946:	4b27      	ldr	r3, [pc, #156]	; (80109e4 <gos_taskSetOriginalPriority+0x170>)
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d005      	beq.n	801095a <gos_taskSetOriginalPriority+0xe6>
 801094e:	4b25      	ldr	r3, [pc, #148]	; (80109e4 <gos_taskSetOriginalPriority+0x170>)
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	3b01      	subs	r3, #1
 8010954:	b2da      	uxtb	r2, r3
 8010956:	4b23      	ldr	r3, [pc, #140]	; (80109e4 <gos_taskSetOriginalPriority+0x170>)
 8010958:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 801095a:	4b23      	ldr	r3, [pc, #140]	; (80109e8 <gos_taskSetOriginalPriority+0x174>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	226a      	movs	r2, #106	; 0x6a
 8010960:	fb02 f303 	mul.w	r3, r2, r3
 8010964:	3308      	adds	r3, #8
 8010966:	4a21      	ldr	r2, [pc, #132]	; (80109ec <gos_taskSetOriginalPriority+0x178>)
 8010968:	4413      	add	r3, r2
 801096a:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 801096c:	68ba      	ldr	r2, [r7, #8]
 801096e:	216a      	movs	r1, #106	; 0x6a
 8010970:	fb01 f202 	mul.w	r2, r1, r2
 8010974:	3208      	adds	r2, #8
 8010976:	491d      	ldr	r1, [pc, #116]	; (80109ec <gos_taskSetOriginalPriority+0x178>)
 8010978:	440a      	add	r2, r1
 801097a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 801097c:	9201      	str	r2, [sp, #4]
 801097e:	9300      	str	r3, [sp, #0]
 8010980:	4b1c      	ldr	r3, [pc, #112]	; (80109f4 <gos_taskSetOriginalPriority+0x180>)
 8010982:	f240 3219 	movw	r2, #793	; 0x319
 8010986:	491c      	ldr	r1, [pc, #112]	; (80109f8 <gos_taskSetOriginalPriority+0x184>)
 8010988:	2034      	movs	r0, #52	; 0x34
 801098a:	f000 fdcd 	bl	8011528 <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 801098e:	4b13      	ldr	r3, [pc, #76]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d005      	beq.n	80109a2 <gos_taskSetOriginalPriority+0x12e>
 8010996:	4b11      	ldr	r3, [pc, #68]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	3b01      	subs	r3, #1
 801099c:	b2da      	uxtb	r2, r3
 801099e:	4b0f      	ldr	r3, [pc, #60]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 80109a0:	701a      	strb	r2, [r3, #0]
 80109a2:	4b0e      	ldr	r3, [pc, #56]	; (80109dc <gos_taskSetOriginalPriority+0x168>)
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d108      	bne.n	80109bc <gos_taskSetOriginalPriority+0x148>
 80109aa:	4b0d      	ldr	r3, [pc, #52]	; (80109e0 <gos_taskSetOriginalPriority+0x16c>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f383 8810 	msr	PRIMASK, r3
 80109b2:	b662      	cpsie	i
 80109b4:	f3bf 8f4f 	dsb	sy
 80109b8:	f3bf 8f6f 	isb	sy
 80109bc:	4b09      	ldr	r3, [pc, #36]	; (80109e4 <gos_taskSetOriginalPriority+0x170>)
 80109be:	781b      	ldrb	r3, [r3, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d005      	beq.n	80109d0 <gos_taskSetOriginalPriority+0x15c>
 80109c4:	4b07      	ldr	r3, [pc, #28]	; (80109e4 <gos_taskSetOriginalPriority+0x170>)
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	3b01      	subs	r3, #1
 80109ca:	b2da      	uxtb	r2, r3
 80109cc:	4b05      	ldr	r3, [pc, #20]	; (80109e4 <gos_taskSetOriginalPriority+0x170>)
 80109ce:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 80109d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	200050eb 	.word	0x200050eb
 80109e0:	200050ec 	.word	0x200050ec
 80109e4:	200050e9 	.word	0x200050e9
 80109e8:	200050f0 	.word	0x200050f0
 80109ec:	20000930 	.word	0x20000930
 80109f0:	200050ea 	.word	0x200050ea
 80109f4:	08018b90 	.word	0x08018b90
 80109f8:	08019c14 	.word	0x08019c14

080109fc <gos_taskGetPriority>:

/*
 * Function: gos_taskGetPriority
 */
gos_result_t gos_taskGetPriority (gos_tid_t taskId, gos_taskPrio_t* taskPriority)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	4603      	mov	r3, r0
 8010a04:	6039      	str	r1, [r7, #0]
 8010a06:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 8010a08:	23ae      	movs	r3, #174	; 0xae
 8010a0a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8010a10:	4b2e      	ldr	r3, [pc, #184]	; (8010acc <gos_taskGetPriority+0xd0>)
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d108      	bne.n	8010a2a <gos_taskGetPriority+0x2e>
 8010a18:	b672      	cpsid	i
 8010a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8010a1e:	4a2c      	ldr	r2, [pc, #176]	; (8010ad0 <gos_taskGetPriority+0xd4>)
 8010a20:	6013      	str	r3, [r2, #0]
 8010a22:	f3bf 8f4f 	dsb	sy
 8010a26:	f3bf 8f6f 	isb	sy
 8010a2a:	4b28      	ldr	r3, [pc, #160]	; (8010acc <gos_taskGetPriority+0xd0>)
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	3301      	adds	r3, #1
 8010a30:	b2da      	uxtb	r2, r3
 8010a32:	4b26      	ldr	r3, [pc, #152]	; (8010acc <gos_taskGetPriority+0xd0>)
 8010a34:	701a      	strb	r2, [r3, #0]
 8010a36:	4b27      	ldr	r3, [pc, #156]	; (8010ad4 <gos_taskGetPriority+0xd8>)
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	b2da      	uxtb	r2, r3
 8010a3e:	4b25      	ldr	r3, [pc, #148]	; (8010ad4 <gos_taskGetPriority+0xd8>)
 8010a40:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8010a42:	88fb      	ldrh	r3, [r7, #6]
 8010a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010a48:	d917      	bls.n	8010a7a <gos_taskGetPriority+0x7e>
 8010a4a:	88fb      	ldrh	r3, [r7, #6]
 8010a4c:	f248 022f 	movw	r2, #32815	; 0x802f
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d812      	bhi.n	8010a7a <gos_taskGetPriority+0x7e>
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d00f      	beq.n	8010a7a <gos_taskGetPriority+0x7e>
        taskPriority != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8010a5a:	88fb      	ldrh	r3, [r7, #6]
 8010a5c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010a60:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 8010a62:	4a1d      	ldr	r2, [pc, #116]	; (8010ad8 <gos_taskGetPriority+0xdc>)
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	216a      	movs	r1, #106	; 0x6a
 8010a68:	fb01 f303 	mul.w	r3, r1, r3
 8010a6c:	4413      	add	r3, r2
 8010a6e:	3306      	adds	r3, #6
 8010a70:	781a      	ldrb	r2, [r3, #0]
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 8010a76:	2355      	movs	r3, #85	; 0x55
 8010a78:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or task priority is NULL.
    }
    GOS_ATOMIC_EXIT
 8010a7a:	4b14      	ldr	r3, [pc, #80]	; (8010acc <gos_taskGetPriority+0xd0>)
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d005      	beq.n	8010a8e <gos_taskGetPriority+0x92>
 8010a82:	4b12      	ldr	r3, [pc, #72]	; (8010acc <gos_taskGetPriority+0xd0>)
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	3b01      	subs	r3, #1
 8010a88:	b2da      	uxtb	r2, r3
 8010a8a:	4b10      	ldr	r3, [pc, #64]	; (8010acc <gos_taskGetPriority+0xd0>)
 8010a8c:	701a      	strb	r2, [r3, #0]
 8010a8e:	4b0f      	ldr	r3, [pc, #60]	; (8010acc <gos_taskGetPriority+0xd0>)
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d108      	bne.n	8010aa8 <gos_taskGetPriority+0xac>
 8010a96:	4b0e      	ldr	r3, [pc, #56]	; (8010ad0 <gos_taskGetPriority+0xd4>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	f383 8810 	msr	PRIMASK, r3
 8010a9e:	b662      	cpsie	i
 8010aa0:	f3bf 8f4f 	dsb	sy
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	4b0a      	ldr	r3, [pc, #40]	; (8010ad4 <gos_taskGetPriority+0xd8>)
 8010aaa:	781b      	ldrb	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d005      	beq.n	8010abc <gos_taskGetPriority+0xc0>
 8010ab0:	4b08      	ldr	r3, [pc, #32]	; (8010ad4 <gos_taskGetPriority+0xd8>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	3b01      	subs	r3, #1
 8010ab6:	b2da      	uxtb	r2, r3
 8010ab8:	4b06      	ldr	r3, [pc, #24]	; (8010ad4 <gos_taskGetPriority+0xd8>)
 8010aba:	701a      	strb	r2, [r3, #0]

    return taskGetPriorityResult;
 8010abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3714      	adds	r7, #20
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	200050eb 	.word	0x200050eb
 8010ad0:	200050ec 	.word	0x200050ec
 8010ad4:	200050e9 	.word	0x200050e9
 8010ad8:	20000930 	.word	0x20000930

08010adc <gos_taskAddPrivilege>:

/*
 * Function: gos_taskAddPrivilege
 */
GOS_INLINE gos_result_t gos_taskAddPrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b085      	sub	sp, #20
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	460a      	mov	r2, r1
 8010ae6:	80fb      	strh	r3, [r7, #6]
 8010ae8:	4613      	mov	r3, r2
 8010aea:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 8010aec:	23ae      	movs	r3, #174	; 0xae
 8010aee:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 8010af0:	2300      	movs	r3, #0
 8010af2:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8010af4:	4b31      	ldr	r3, [pc, #196]	; (8010bbc <gos_taskAddPrivilege+0xe0>)
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d108      	bne.n	8010b0e <gos_taskAddPrivilege+0x32>
 8010afc:	b672      	cpsid	i
 8010afe:	f3ef 8310 	mrs	r3, PRIMASK
 8010b02:	4a2f      	ldr	r2, [pc, #188]	; (8010bc0 <gos_taskAddPrivilege+0xe4>)
 8010b04:	6013      	str	r3, [r2, #0]
 8010b06:	f3bf 8f4f 	dsb	sy
 8010b0a:	f3bf 8f6f 	isb	sy
 8010b0e:	4b2b      	ldr	r3, [pc, #172]	; (8010bbc <gos_taskAddPrivilege+0xe0>)
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	3301      	adds	r3, #1
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	4b29      	ldr	r3, [pc, #164]	; (8010bbc <gos_taskAddPrivilege+0xe0>)
 8010b18:	701a      	strb	r2, [r3, #0]
 8010b1a:	4b2a      	ldr	r3, [pc, #168]	; (8010bc4 <gos_taskAddPrivilege+0xe8>)
 8010b1c:	781b      	ldrb	r3, [r3, #0]
 8010b1e:	3301      	adds	r3, #1
 8010b20:	b2da      	uxtb	r2, r3
 8010b22:	4b28      	ldr	r3, [pc, #160]	; (8010bc4 <gos_taskAddPrivilege+0xe8>)
 8010b24:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8010b26:	88fb      	ldrh	r3, [r7, #6]
 8010b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b2c:	d91e      	bls.n	8010b6c <gos_taskAddPrivilege+0x90>
 8010b2e:	88fb      	ldrh	r3, [r7, #6]
 8010b30:	f248 022f 	movw	r2, #32815	; 0x802f
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d819      	bhi.n	8010b6c <gos_taskAddPrivilege+0x90>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8010b38:	88fb      	ldrh	r3, [r7, #6]
 8010b3a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010b3e:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 8010b40:	4a21      	ldr	r2, [pc, #132]	; (8010bc8 <gos_taskAddPrivilege+0xec>)
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	216a      	movs	r1, #106	; 0x6a
 8010b46:	fb01 f303 	mul.w	r3, r1, r3
 8010b4a:	4413      	add	r3, r2
 8010b4c:	3308      	adds	r3, #8
 8010b4e:	881a      	ldrh	r2, [r3, #0]
 8010b50:	88bb      	ldrh	r3, [r7, #4]
 8010b52:	4313      	orrs	r3, r2
 8010b54:	b298      	uxth	r0, r3
 8010b56:	4a1c      	ldr	r2, [pc, #112]	; (8010bc8 <gos_taskAddPrivilege+0xec>)
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	216a      	movs	r1, #106	; 0x6a
 8010b5c:	fb01 f303 	mul.w	r3, r1, r3
 8010b60:	4413      	add	r3, r2
 8010b62:	3308      	adds	r3, #8
 8010b64:	4602      	mov	r2, r0
 8010b66:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 8010b68:	2355      	movs	r3, #85	; 0x55
 8010b6a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8010b6c:	4b13      	ldr	r3, [pc, #76]	; (8010bbc <gos_taskAddPrivilege+0xe0>)
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d005      	beq.n	8010b80 <gos_taskAddPrivilege+0xa4>
 8010b74:	4b11      	ldr	r3, [pc, #68]	; (8010bbc <gos_taskAddPrivilege+0xe0>)
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	b2da      	uxtb	r2, r3
 8010b7c:	4b0f      	ldr	r3, [pc, #60]	; (8010bbc <gos_taskAddPrivilege+0xe0>)
 8010b7e:	701a      	strb	r2, [r3, #0]
 8010b80:	4b0e      	ldr	r3, [pc, #56]	; (8010bbc <gos_taskAddPrivilege+0xe0>)
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d108      	bne.n	8010b9a <gos_taskAddPrivilege+0xbe>
 8010b88:	4b0d      	ldr	r3, [pc, #52]	; (8010bc0 <gos_taskAddPrivilege+0xe4>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f383 8810 	msr	PRIMASK, r3
 8010b90:	b662      	cpsie	i
 8010b92:	f3bf 8f4f 	dsb	sy
 8010b96:	f3bf 8f6f 	isb	sy
 8010b9a:	4b0a      	ldr	r3, [pc, #40]	; (8010bc4 <gos_taskAddPrivilege+0xe8>)
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d005      	beq.n	8010bae <gos_taskAddPrivilege+0xd2>
 8010ba2:	4b08      	ldr	r3, [pc, #32]	; (8010bc4 <gos_taskAddPrivilege+0xe8>)
 8010ba4:	781b      	ldrb	r3, [r3, #0]
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	b2da      	uxtb	r2, r3
 8010baa:	4b06      	ldr	r3, [pc, #24]	; (8010bc4 <gos_taskAddPrivilege+0xe8>)
 8010bac:	701a      	strb	r2, [r3, #0]

    return taskAddPrivilegeResult;
 8010bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3714      	adds	r7, #20
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr
 8010bbc:	200050eb 	.word	0x200050eb
 8010bc0:	200050ec 	.word	0x200050ec
 8010bc4:	200050e9 	.word	0x200050e9
 8010bc8:	20000930 	.word	0x20000930

08010bcc <gos_taskRemovePrivilege>:

/*
 * Function: gos_taskRemovePrivilege
 */
GOS_INLINE gos_result_t gos_taskRemovePrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	460a      	mov	r2, r1
 8010bd6:	80fb      	strh	r3, [r7, #6]
 8010bd8:	4613      	mov	r3, r2
 8010bda:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 8010bdc:	23ae      	movs	r3, #174	; 0xae
 8010bde:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 8010be0:	2300      	movs	r3, #0
 8010be2:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8010be4:	4b34      	ldr	r3, [pc, #208]	; (8010cb8 <gos_taskRemovePrivilege+0xec>)
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d108      	bne.n	8010bfe <gos_taskRemovePrivilege+0x32>
 8010bec:	b672      	cpsid	i
 8010bee:	f3ef 8310 	mrs	r3, PRIMASK
 8010bf2:	4a32      	ldr	r2, [pc, #200]	; (8010cbc <gos_taskRemovePrivilege+0xf0>)
 8010bf4:	6013      	str	r3, [r2, #0]
 8010bf6:	f3bf 8f4f 	dsb	sy
 8010bfa:	f3bf 8f6f 	isb	sy
 8010bfe:	4b2e      	ldr	r3, [pc, #184]	; (8010cb8 <gos_taskRemovePrivilege+0xec>)
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	3301      	adds	r3, #1
 8010c04:	b2da      	uxtb	r2, r3
 8010c06:	4b2c      	ldr	r3, [pc, #176]	; (8010cb8 <gos_taskRemovePrivilege+0xec>)
 8010c08:	701a      	strb	r2, [r3, #0]
 8010c0a:	4b2d      	ldr	r3, [pc, #180]	; (8010cc0 <gos_taskRemovePrivilege+0xf4>)
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	b2da      	uxtb	r2, r3
 8010c12:	4b2b      	ldr	r3, [pc, #172]	; (8010cc0 <gos_taskRemovePrivilege+0xf4>)
 8010c14:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8010c16:	88fb      	ldrh	r3, [r7, #6]
 8010c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c1c:	d923      	bls.n	8010c66 <gos_taskRemovePrivilege+0x9a>
 8010c1e:	88fb      	ldrh	r3, [r7, #6]
 8010c20:	f248 022f 	movw	r2, #32815	; 0x802f
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d81e      	bhi.n	8010c66 <gos_taskRemovePrivilege+0x9a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8010c28:	88fb      	ldrh	r3, [r7, #6]
 8010c2a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010c2e:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 8010c30:	4a24      	ldr	r2, [pc, #144]	; (8010cc4 <gos_taskRemovePrivilege+0xf8>)
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	216a      	movs	r1, #106	; 0x6a
 8010c36:	fb01 f303 	mul.w	r3, r1, r3
 8010c3a:	4413      	add	r3, r2
 8010c3c:	3308      	adds	r3, #8
 8010c3e:	881b      	ldrh	r3, [r3, #0]
 8010c40:	b21a      	sxth	r2, r3
 8010c42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010c46:	43db      	mvns	r3, r3
 8010c48:	b21b      	sxth	r3, r3
 8010c4a:	4013      	ands	r3, r2
 8010c4c:	b21b      	sxth	r3, r3
 8010c4e:	b298      	uxth	r0, r3
 8010c50:	4a1c      	ldr	r2, [pc, #112]	; (8010cc4 <gos_taskRemovePrivilege+0xf8>)
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	216a      	movs	r1, #106	; 0x6a
 8010c56:	fb01 f303 	mul.w	r3, r1, r3
 8010c5a:	4413      	add	r3, r2
 8010c5c:	3308      	adds	r3, #8
 8010c5e:	4602      	mov	r2, r0
 8010c60:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 8010c62:	2355      	movs	r3, #85	; 0x55
 8010c64:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8010c66:	4b14      	ldr	r3, [pc, #80]	; (8010cb8 <gos_taskRemovePrivilege+0xec>)
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d005      	beq.n	8010c7a <gos_taskRemovePrivilege+0xae>
 8010c6e:	4b12      	ldr	r3, [pc, #72]	; (8010cb8 <gos_taskRemovePrivilege+0xec>)
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	3b01      	subs	r3, #1
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	4b10      	ldr	r3, [pc, #64]	; (8010cb8 <gos_taskRemovePrivilege+0xec>)
 8010c78:	701a      	strb	r2, [r3, #0]
 8010c7a:	4b0f      	ldr	r3, [pc, #60]	; (8010cb8 <gos_taskRemovePrivilege+0xec>)
 8010c7c:	781b      	ldrb	r3, [r3, #0]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d108      	bne.n	8010c94 <gos_taskRemovePrivilege+0xc8>
 8010c82:	4b0e      	ldr	r3, [pc, #56]	; (8010cbc <gos_taskRemovePrivilege+0xf0>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f383 8810 	msr	PRIMASK, r3
 8010c8a:	b662      	cpsie	i
 8010c8c:	f3bf 8f4f 	dsb	sy
 8010c90:	f3bf 8f6f 	isb	sy
 8010c94:	4b0a      	ldr	r3, [pc, #40]	; (8010cc0 <gos_taskRemovePrivilege+0xf4>)
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d005      	beq.n	8010ca8 <gos_taskRemovePrivilege+0xdc>
 8010c9c:	4b08      	ldr	r3, [pc, #32]	; (8010cc0 <gos_taskRemovePrivilege+0xf4>)
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	3b01      	subs	r3, #1
 8010ca2:	b2da      	uxtb	r2, r3
 8010ca4:	4b06      	ldr	r3, [pc, #24]	; (8010cc0 <gos_taskRemovePrivilege+0xf4>)
 8010ca6:	701a      	strb	r2, [r3, #0]

    return taskRemovePrivilegeResult;
 8010ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3714      	adds	r7, #20
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop
 8010cb8:	200050eb 	.word	0x200050eb
 8010cbc:	200050ec 	.word	0x200050ec
 8010cc0:	200050e9 	.word	0x200050e9
 8010cc4:	20000930 	.word	0x20000930

08010cc8 <gos_taskSetPrivileges>:

/*
 * Function: gos_taskSetPrivileges
 */
GOS_INLINE gos_result_t gos_taskSetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	460a      	mov	r2, r1
 8010cd2:	80fb      	strh	r3, [r7, #6]
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 8010cd8:	23ae      	movs	r3, #174	; 0xae
 8010cda:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8010ce0:	4b2c      	ldr	r3, [pc, #176]	; (8010d94 <gos_taskSetPrivileges+0xcc>)
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d108      	bne.n	8010cfa <gos_taskSetPrivileges+0x32>
 8010ce8:	b672      	cpsid	i
 8010cea:	f3ef 8310 	mrs	r3, PRIMASK
 8010cee:	4a2a      	ldr	r2, [pc, #168]	; (8010d98 <gos_taskSetPrivileges+0xd0>)
 8010cf0:	6013      	str	r3, [r2, #0]
 8010cf2:	f3bf 8f4f 	dsb	sy
 8010cf6:	f3bf 8f6f 	isb	sy
 8010cfa:	4b26      	ldr	r3, [pc, #152]	; (8010d94 <gos_taskSetPrivileges+0xcc>)
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	b2da      	uxtb	r2, r3
 8010d02:	4b24      	ldr	r3, [pc, #144]	; (8010d94 <gos_taskSetPrivileges+0xcc>)
 8010d04:	701a      	strb	r2, [r3, #0]
 8010d06:	4b25      	ldr	r3, [pc, #148]	; (8010d9c <gos_taskSetPrivileges+0xd4>)
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	b2da      	uxtb	r2, r3
 8010d0e:	4b23      	ldr	r3, [pc, #140]	; (8010d9c <gos_taskSetPrivileges+0xd4>)
 8010d10:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8010d12:	88fb      	ldrh	r3, [r7, #6]
 8010d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d18:	d913      	bls.n	8010d42 <gos_taskSetPrivileges+0x7a>
 8010d1a:	88fb      	ldrh	r3, [r7, #6]
 8010d1c:	f248 022f 	movw	r2, #32815	; 0x802f
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d80e      	bhi.n	8010d42 <gos_taskSetPrivileges+0x7a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8010d24:	88fb      	ldrh	r3, [r7, #6]
 8010d26:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010d2a:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 8010d2c:	4a1c      	ldr	r2, [pc, #112]	; (8010da0 <gos_taskSetPrivileges+0xd8>)
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	216a      	movs	r1, #106	; 0x6a
 8010d32:	fb01 f303 	mul.w	r3, r1, r3
 8010d36:	4413      	add	r3, r2
 8010d38:	3308      	adds	r3, #8
 8010d3a:	88ba      	ldrh	r2, [r7, #4]
 8010d3c:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 8010d3e:	2355      	movs	r3, #85	; 0x55
 8010d40:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8010d42:	4b14      	ldr	r3, [pc, #80]	; (8010d94 <gos_taskSetPrivileges+0xcc>)
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d005      	beq.n	8010d56 <gos_taskSetPrivileges+0x8e>
 8010d4a:	4b12      	ldr	r3, [pc, #72]	; (8010d94 <gos_taskSetPrivileges+0xcc>)
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	3b01      	subs	r3, #1
 8010d50:	b2da      	uxtb	r2, r3
 8010d52:	4b10      	ldr	r3, [pc, #64]	; (8010d94 <gos_taskSetPrivileges+0xcc>)
 8010d54:	701a      	strb	r2, [r3, #0]
 8010d56:	4b0f      	ldr	r3, [pc, #60]	; (8010d94 <gos_taskSetPrivileges+0xcc>)
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d108      	bne.n	8010d70 <gos_taskSetPrivileges+0xa8>
 8010d5e:	4b0e      	ldr	r3, [pc, #56]	; (8010d98 <gos_taskSetPrivileges+0xd0>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f383 8810 	msr	PRIMASK, r3
 8010d66:	b662      	cpsie	i
 8010d68:	f3bf 8f4f 	dsb	sy
 8010d6c:	f3bf 8f6f 	isb	sy
 8010d70:	4b0a      	ldr	r3, [pc, #40]	; (8010d9c <gos_taskSetPrivileges+0xd4>)
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d005      	beq.n	8010d84 <gos_taskSetPrivileges+0xbc>
 8010d78:	4b08      	ldr	r3, [pc, #32]	; (8010d9c <gos_taskSetPrivileges+0xd4>)
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	3b01      	subs	r3, #1
 8010d7e:	b2da      	uxtb	r2, r3
 8010d80:	4b06      	ldr	r3, [pc, #24]	; (8010d9c <gos_taskSetPrivileges+0xd4>)
 8010d82:	701a      	strb	r2, [r3, #0]

    return taskSetPrivilegesResult;
 8010d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3714      	adds	r7, #20
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d90:	4770      	bx	lr
 8010d92:	bf00      	nop
 8010d94:	200050eb 	.word	0x200050eb
 8010d98:	200050ec 	.word	0x200050ec
 8010d9c:	200050e9 	.word	0x200050e9
 8010da0:	20000930 	.word	0x20000930

08010da4 <gos_taskGetPrivileges>:

/*
 * Function: gos_taskGetPrivileges
 */
GOS_INLINE gos_result_t gos_taskGetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t* privileges)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b085      	sub	sp, #20
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	4603      	mov	r3, r0
 8010dac:	6039      	str	r1, [r7, #0]
 8010dae:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 8010db0:	23ae      	movs	r3, #174	; 0xae
 8010db2:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8010db4:	2300      	movs	r3, #0
 8010db6:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8010db8:	4b2e      	ldr	r3, [pc, #184]	; (8010e74 <gos_taskGetPrivileges+0xd0>)
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d108      	bne.n	8010dd2 <gos_taskGetPrivileges+0x2e>
 8010dc0:	b672      	cpsid	i
 8010dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8010dc6:	4a2c      	ldr	r2, [pc, #176]	; (8010e78 <gos_taskGetPrivileges+0xd4>)
 8010dc8:	6013      	str	r3, [r2, #0]
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	4b28      	ldr	r3, [pc, #160]	; (8010e74 <gos_taskGetPrivileges+0xd0>)
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	b2da      	uxtb	r2, r3
 8010dda:	4b26      	ldr	r3, [pc, #152]	; (8010e74 <gos_taskGetPrivileges+0xd0>)
 8010ddc:	701a      	strb	r2, [r3, #0]
 8010dde:	4b27      	ldr	r3, [pc, #156]	; (8010e7c <gos_taskGetPrivileges+0xd8>)
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	3301      	adds	r3, #1
 8010de4:	b2da      	uxtb	r2, r3
 8010de6:	4b25      	ldr	r3, [pc, #148]	; (8010e7c <gos_taskGetPrivileges+0xd8>)
 8010de8:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8010dea:	88fb      	ldrh	r3, [r7, #6]
 8010dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010df0:	d917      	bls.n	8010e22 <gos_taskGetPrivileges+0x7e>
 8010df2:	88fb      	ldrh	r3, [r7, #6]
 8010df4:	f248 022f 	movw	r2, #32815	; 0x802f
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d812      	bhi.n	8010e22 <gos_taskGetPrivileges+0x7e>
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d00f      	beq.n	8010e22 <gos_taskGetPrivileges+0x7e>
        privileges != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8010e02:	88fb      	ldrh	r3, [r7, #6]
 8010e04:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010e08:	60bb      	str	r3, [r7, #8]

        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 8010e0a:	4a1d      	ldr	r2, [pc, #116]	; (8010e80 <gos_taskGetPrivileges+0xdc>)
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	216a      	movs	r1, #106	; 0x6a
 8010e10:	fb01 f303 	mul.w	r3, r1, r3
 8010e14:	4413      	add	r3, r2
 8010e16:	3308      	adds	r3, #8
 8010e18:	881a      	ldrh	r2, [r3, #0]
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 8010e1e:	2355      	movs	r3, #85	; 0x55
 8010e20:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or privileges is NULL pointer.
    }
    GOS_ATOMIC_EXIT
 8010e22:	4b14      	ldr	r3, [pc, #80]	; (8010e74 <gos_taskGetPrivileges+0xd0>)
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d005      	beq.n	8010e36 <gos_taskGetPrivileges+0x92>
 8010e2a:	4b12      	ldr	r3, [pc, #72]	; (8010e74 <gos_taskGetPrivileges+0xd0>)
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	3b01      	subs	r3, #1
 8010e30:	b2da      	uxtb	r2, r3
 8010e32:	4b10      	ldr	r3, [pc, #64]	; (8010e74 <gos_taskGetPrivileges+0xd0>)
 8010e34:	701a      	strb	r2, [r3, #0]
 8010e36:	4b0f      	ldr	r3, [pc, #60]	; (8010e74 <gos_taskGetPrivileges+0xd0>)
 8010e38:	781b      	ldrb	r3, [r3, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d108      	bne.n	8010e50 <gos_taskGetPrivileges+0xac>
 8010e3e:	4b0e      	ldr	r3, [pc, #56]	; (8010e78 <gos_taskGetPrivileges+0xd4>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f383 8810 	msr	PRIMASK, r3
 8010e46:	b662      	cpsie	i
 8010e48:	f3bf 8f4f 	dsb	sy
 8010e4c:	f3bf 8f6f 	isb	sy
 8010e50:	4b0a      	ldr	r3, [pc, #40]	; (8010e7c <gos_taskGetPrivileges+0xd8>)
 8010e52:	781b      	ldrb	r3, [r3, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d005      	beq.n	8010e64 <gos_taskGetPrivileges+0xc0>
 8010e58:	4b08      	ldr	r3, [pc, #32]	; (8010e7c <gos_taskGetPrivileges+0xd8>)
 8010e5a:	781b      	ldrb	r3, [r3, #0]
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	b2da      	uxtb	r2, r3
 8010e60:	4b06      	ldr	r3, [pc, #24]	; (8010e7c <gos_taskGetPrivileges+0xd8>)
 8010e62:	701a      	strb	r2, [r3, #0]

    return taskGetPrivilegesResult;
 8010e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3714      	adds	r7, #20
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	200050eb 	.word	0x200050eb
 8010e78:	200050ec 	.word	0x200050ec
 8010e7c:	200050e9 	.word	0x200050e9
 8010e80:	20000930 	.word	0x20000930

08010e84 <gos_taskGetId>:

/*
 * Function: gos_taskGetId
 */
gos_result_t gos_taskGetId (gos_taskName_t taskName, gos_tid_t* taskId)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskGetIdResult = GOS_ERROR;
 8010e8e:	23ae      	movs	r3, #174	; 0xae
 8010e90:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 8010e92:	2300      	movs	r3, #0
 8010e94:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 8010e96:	2300      	movs	r3, #0
 8010e98:	60bb      	str	r3, [r7, #8]
 8010e9a:	e01e      	b.n	8010eda <gos_taskGetId+0x56>
    {
        if (strcmp(taskName, taskDescriptors[taskIndex].taskName) == 0u)
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	226a      	movs	r2, #106	; 0x6a
 8010ea0:	fb02 f303 	mul.w	r3, r2, r3
 8010ea4:	3308      	adds	r3, #8
 8010ea6:	4a12      	ldr	r2, [pc, #72]	; (8010ef0 <gos_taskGetId+0x6c>)
 8010ea8:	4413      	add	r3, r2
 8010eaa:	3302      	adds	r3, #2
 8010eac:	4619      	mov	r1, r3
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f7ef f9ae 	bl	8000210 <strcmp>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d10c      	bne.n	8010ed4 <gos_taskGetId+0x50>
        {
            *taskId = taskDescriptors[taskIndex].taskId;
 8010eba:	4a0d      	ldr	r2, [pc, #52]	; (8010ef0 <gos_taskGetId+0x6c>)
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	216a      	movs	r1, #106	; 0x6a
 8010ec0:	fb01 f303 	mul.w	r3, r1, r3
 8010ec4:	4413      	add	r3, r2
 8010ec6:	332a      	adds	r3, #42	; 0x2a
 8010ec8:	881a      	ldrh	r2, [r3, #0]
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	801a      	strh	r2, [r3, #0]
            taskGetIdResult = GOS_SUCCESS;
 8010ece:	2355      	movs	r3, #85	; 0x55
 8010ed0:	73fb      	strb	r3, [r7, #15]
            break;
 8010ed2:	e008      	b.n	8010ee6 <gos_taskGetId+0x62>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	60bb      	str	r3, [r7, #8]
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	2b2f      	cmp	r3, #47	; 0x2f
 8010ede:	d802      	bhi.n	8010ee6 <gos_taskGetId+0x62>
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d1da      	bne.n	8010e9c <gos_taskGetId+0x18>
        {
            // Continue.
        }
    }

    return taskGetIdResult;
 8010ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3710      	adds	r7, #16
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	20000930 	.word	0x20000930

08010ef4 <gos_taskGetCurrentId>:

/*
 * Function: gos_taskGetCurrentId
 */
GOS_INLINE gos_result_t gos_taskGetCurrentId (gos_tid_t* taskId)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b085      	sub	sp, #20
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 8010efc:	23ae      	movs	r3, #174	; 0xae
 8010efe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8010f00:	4b26      	ldr	r3, [pc, #152]	; (8010f9c <gos_taskGetCurrentId+0xa8>)
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d108      	bne.n	8010f1a <gos_taskGetCurrentId+0x26>
 8010f08:	b672      	cpsid	i
 8010f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8010f0e:	4a24      	ldr	r2, [pc, #144]	; (8010fa0 <gos_taskGetCurrentId+0xac>)
 8010f10:	6013      	str	r3, [r2, #0]
 8010f12:	f3bf 8f4f 	dsb	sy
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	4b20      	ldr	r3, [pc, #128]	; (8010f9c <gos_taskGetCurrentId+0xa8>)
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	4b1e      	ldr	r3, [pc, #120]	; (8010f9c <gos_taskGetCurrentId+0xa8>)
 8010f24:	701a      	strb	r2, [r3, #0]
 8010f26:	4b1f      	ldr	r3, [pc, #124]	; (8010fa4 <gos_taskGetCurrentId+0xb0>)
 8010f28:	781b      	ldrb	r3, [r3, #0]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	b2da      	uxtb	r2, r3
 8010f2e:	4b1d      	ldr	r3, [pc, #116]	; (8010fa4 <gos_taskGetCurrentId+0xb0>)
 8010f30:	701a      	strb	r2, [r3, #0]
    if (taskId != NULL)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d009      	beq.n	8010f4c <gos_taskGetCurrentId+0x58>
    {
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 8010f38:	4b1b      	ldr	r3, [pc, #108]	; (8010fa8 <gos_taskGetCurrentId+0xb4>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 8010f48:	2355      	movs	r3, #85	; 0x55
 8010f4a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID pointer is NULL.
    }
    GOS_ATOMIC_EXIT
 8010f4c:	4b13      	ldr	r3, [pc, #76]	; (8010f9c <gos_taskGetCurrentId+0xa8>)
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d005      	beq.n	8010f60 <gos_taskGetCurrentId+0x6c>
 8010f54:	4b11      	ldr	r3, [pc, #68]	; (8010f9c <gos_taskGetCurrentId+0xa8>)
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	3b01      	subs	r3, #1
 8010f5a:	b2da      	uxtb	r2, r3
 8010f5c:	4b0f      	ldr	r3, [pc, #60]	; (8010f9c <gos_taskGetCurrentId+0xa8>)
 8010f5e:	701a      	strb	r2, [r3, #0]
 8010f60:	4b0e      	ldr	r3, [pc, #56]	; (8010f9c <gos_taskGetCurrentId+0xa8>)
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d108      	bne.n	8010f7a <gos_taskGetCurrentId+0x86>
 8010f68:	4b0d      	ldr	r3, [pc, #52]	; (8010fa0 <gos_taskGetCurrentId+0xac>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	f383 8810 	msr	PRIMASK, r3
 8010f70:	b662      	cpsie	i
 8010f72:	f3bf 8f4f 	dsb	sy
 8010f76:	f3bf 8f6f 	isb	sy
 8010f7a:	4b0a      	ldr	r3, [pc, #40]	; (8010fa4 <gos_taskGetCurrentId+0xb0>)
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d005      	beq.n	8010f8e <gos_taskGetCurrentId+0x9a>
 8010f82:	4b08      	ldr	r3, [pc, #32]	; (8010fa4 <gos_taskGetCurrentId+0xb0>)
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	3b01      	subs	r3, #1
 8010f88:	b2da      	uxtb	r2, r3
 8010f8a:	4b06      	ldr	r3, [pc, #24]	; (8010fa4 <gos_taskGetCurrentId+0xb0>)
 8010f8c:	701a      	strb	r2, [r3, #0]

    return taskGetCurrentIdResult;
 8010f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3714      	adds	r7, #20
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	200050eb 	.word	0x200050eb
 8010fa0:	200050ec 	.word	0x200050ec
 8010fa4:	200050e9 	.word	0x200050e9
 8010fa8:	200050f0 	.word	0x200050f0

08010fac <gos_taskGetData>:

/*
 * Function: gos_taskGetData
 */
gos_result_t gos_taskGetData (gos_tid_t taskId, gos_taskDescriptor_t* taskData)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	6039      	str	r1, [r7, #0]
 8010fb6:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8010fb8:	23ae      	movs	r3, #174	; 0xae
 8010fba:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8010fc0:	4b2d      	ldr	r3, [pc, #180]	; (8011078 <gos_taskGetData+0xcc>)
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d108      	bne.n	8010fda <gos_taskGetData+0x2e>
 8010fc8:	b672      	cpsid	i
 8010fca:	f3ef 8310 	mrs	r3, PRIMASK
 8010fce:	4a2b      	ldr	r2, [pc, #172]	; (801107c <gos_taskGetData+0xd0>)
 8010fd0:	6013      	str	r3, [r2, #0]
 8010fd2:	f3bf 8f4f 	dsb	sy
 8010fd6:	f3bf 8f6f 	isb	sy
 8010fda:	4b27      	ldr	r3, [pc, #156]	; (8011078 <gos_taskGetData+0xcc>)
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	3301      	adds	r3, #1
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	4b25      	ldr	r3, [pc, #148]	; (8011078 <gos_taskGetData+0xcc>)
 8010fe4:	701a      	strb	r2, [r3, #0]
 8010fe6:	4b26      	ldr	r3, [pc, #152]	; (8011080 <gos_taskGetData+0xd4>)
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	3301      	adds	r3, #1
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	4b24      	ldr	r3, [pc, #144]	; (8011080 <gos_taskGetData+0xd4>)
 8010ff0:	701a      	strb	r2, [r3, #0]
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8010ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	da18      	bge.n	801102c <gos_taskGetData+0x80>
 8010ffa:	88fb      	ldrh	r3, [r7, #6]
 8010ffc:	f248 022f 	movw	r2, #32815	; 0x802f
 8011000:	4293      	cmp	r3, r2
 8011002:	d813      	bhi.n	801102c <gos_taskGetData+0x80>
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d010      	beq.n	801102c <gos_taskGetData+0x80>
        taskData != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 801100a:	88fb      	ldrh	r3, [r7, #6]
 801100c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8011010:	60bb      	str	r3, [r7, #8]

        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	226a      	movs	r2, #106	; 0x6a
 8011016:	fb02 f303 	mul.w	r3, r2, r3
 801101a:	4a1a      	ldr	r2, [pc, #104]	; (8011084 <gos_taskGetData+0xd8>)
 801101c:	4413      	add	r3, r2
 801101e:	226a      	movs	r2, #106	; 0x6a
 8011020:	4619      	mov	r1, r3
 8011022:	6838      	ldr	r0, [r7, #0]
 8011024:	f004 ff1d 	bl	8015e62 <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8011028:	2355      	movs	r3, #85	; 0x55
 801102a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 801102c:	4b12      	ldr	r3, [pc, #72]	; (8011078 <gos_taskGetData+0xcc>)
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d005      	beq.n	8011040 <gos_taskGetData+0x94>
 8011034:	4b10      	ldr	r3, [pc, #64]	; (8011078 <gos_taskGetData+0xcc>)
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	3b01      	subs	r3, #1
 801103a:	b2da      	uxtb	r2, r3
 801103c:	4b0e      	ldr	r3, [pc, #56]	; (8011078 <gos_taskGetData+0xcc>)
 801103e:	701a      	strb	r2, [r3, #0]
 8011040:	4b0d      	ldr	r3, [pc, #52]	; (8011078 <gos_taskGetData+0xcc>)
 8011042:	781b      	ldrb	r3, [r3, #0]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d108      	bne.n	801105a <gos_taskGetData+0xae>
 8011048:	4b0c      	ldr	r3, [pc, #48]	; (801107c <gos_taskGetData+0xd0>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f383 8810 	msr	PRIMASK, r3
 8011050:	b662      	cpsie	i
 8011052:	f3bf 8f4f 	dsb	sy
 8011056:	f3bf 8f6f 	isb	sy
 801105a:	4b09      	ldr	r3, [pc, #36]	; (8011080 <gos_taskGetData+0xd4>)
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d005      	beq.n	801106e <gos_taskGetData+0xc2>
 8011062:	4b07      	ldr	r3, [pc, #28]	; (8011080 <gos_taskGetData+0xd4>)
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	3b01      	subs	r3, #1
 8011068:	b2da      	uxtb	r2, r3
 801106a:	4b05      	ldr	r3, [pc, #20]	; (8011080 <gos_taskGetData+0xd4>)
 801106c:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 801106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011070:	4618      	mov	r0, r3
 8011072:	3710      	adds	r7, #16
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	200050eb 	.word	0x200050eb
 801107c:	200050ec 	.word	0x200050ec
 8011080:	200050e9 	.word	0x200050e9
 8011084:	20000930 	.word	0x20000930

08011088 <gos_taskGetDataByIndex>:

/*
 * Function: gos_taskGetDataByIndex
 */
gos_result_t gos_taskGetDataByIndex (u16_t taskIndex, gos_taskDescriptor_t* taskData)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	4603      	mov	r3, r0
 8011090:	6039      	str	r1, [r7, #0]
 8011092:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8011094:	23ae      	movs	r3, #174	; 0xae
 8011096:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8011098:	4b2f      	ldr	r3, [pc, #188]	; (8011158 <gos_taskGetDataByIndex+0xd0>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d108      	bne.n	80110b2 <gos_taskGetDataByIndex+0x2a>
 80110a0:	b672      	cpsid	i
 80110a2:	f3ef 8310 	mrs	r3, PRIMASK
 80110a6:	4a2d      	ldr	r2, [pc, #180]	; (801115c <gos_taskGetDataByIndex+0xd4>)
 80110a8:	6013      	str	r3, [r2, #0]
 80110aa:	f3bf 8f4f 	dsb	sy
 80110ae:	f3bf 8f6f 	isb	sy
 80110b2:	4b29      	ldr	r3, [pc, #164]	; (8011158 <gos_taskGetDataByIndex+0xd0>)
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	3301      	adds	r3, #1
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	4b27      	ldr	r3, [pc, #156]	; (8011158 <gos_taskGetDataByIndex+0xd0>)
 80110bc:	701a      	strb	r2, [r3, #0]
 80110be:	4b28      	ldr	r3, [pc, #160]	; (8011160 <gos_taskGetDataByIndex+0xd8>)
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	3301      	adds	r3, #1
 80110c4:	b2da      	uxtb	r2, r3
 80110c6:	4b26      	ldr	r3, [pc, #152]	; (8011160 <gos_taskGetDataByIndex+0xd8>)
 80110c8:	701a      	strb	r2, [r3, #0]
    if (taskIndex < CFG_TASK_MAX_NUMBER &&
 80110ca:	88fb      	ldrh	r3, [r7, #6]
 80110cc:	2b2f      	cmp	r3, #47	; 0x2f
 80110ce:	d81d      	bhi.n	801110c <gos_taskGetDataByIndex+0x84>
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d01a      	beq.n	801110c <gos_taskGetDataByIndex+0x84>
        taskData != NULL &&
        (taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_TASK_PRIVILEGE_KERNEL) == GOS_TASK_PRIVILEGE_KERNEL)
 80110d6:	4b23      	ldr	r3, [pc, #140]	; (8011164 <gos_taskGetDataByIndex+0xdc>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4a23      	ldr	r2, [pc, #140]	; (8011168 <gos_taskGetDataByIndex+0xe0>)
 80110dc:	216a      	movs	r1, #106	; 0x6a
 80110de:	fb01 f303 	mul.w	r3, r1, r3
 80110e2:	4413      	add	r3, r2
 80110e4:	3308      	adds	r3, #8
 80110e6:	881b      	ldrh	r3, [r3, #0]
 80110e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        taskData != NULL &&
 80110ec:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80110f0:	d10c      	bne.n	801110c <gos_taskGetDataByIndex+0x84>
    {
        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 80110f2:	88fb      	ldrh	r3, [r7, #6]
 80110f4:	226a      	movs	r2, #106	; 0x6a
 80110f6:	fb02 f303 	mul.w	r3, r2, r3
 80110fa:	4a1b      	ldr	r2, [pc, #108]	; (8011168 <gos_taskGetDataByIndex+0xe0>)
 80110fc:	4413      	add	r3, r2
 80110fe:	226a      	movs	r2, #106	; 0x6a
 8011100:	4619      	mov	r1, r3
 8011102:	6838      	ldr	r0, [r7, #0]
 8011104:	f004 fead 	bl	8015e62 <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8011108:	2355      	movs	r3, #85	; 0x55
 801110a:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 801110c:	4b12      	ldr	r3, [pc, #72]	; (8011158 <gos_taskGetDataByIndex+0xd0>)
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d005      	beq.n	8011120 <gos_taskGetDataByIndex+0x98>
 8011114:	4b10      	ldr	r3, [pc, #64]	; (8011158 <gos_taskGetDataByIndex+0xd0>)
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	3b01      	subs	r3, #1
 801111a:	b2da      	uxtb	r2, r3
 801111c:	4b0e      	ldr	r3, [pc, #56]	; (8011158 <gos_taskGetDataByIndex+0xd0>)
 801111e:	701a      	strb	r2, [r3, #0]
 8011120:	4b0d      	ldr	r3, [pc, #52]	; (8011158 <gos_taskGetDataByIndex+0xd0>)
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d108      	bne.n	801113a <gos_taskGetDataByIndex+0xb2>
 8011128:	4b0c      	ldr	r3, [pc, #48]	; (801115c <gos_taskGetDataByIndex+0xd4>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f383 8810 	msr	PRIMASK, r3
 8011130:	b662      	cpsie	i
 8011132:	f3bf 8f4f 	dsb	sy
 8011136:	f3bf 8f6f 	isb	sy
 801113a:	4b09      	ldr	r3, [pc, #36]	; (8011160 <gos_taskGetDataByIndex+0xd8>)
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d005      	beq.n	801114e <gos_taskGetDataByIndex+0xc6>
 8011142:	4b07      	ldr	r3, [pc, #28]	; (8011160 <gos_taskGetDataByIndex+0xd8>)
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	3b01      	subs	r3, #1
 8011148:	b2da      	uxtb	r2, r3
 801114a:	4b05      	ldr	r3, [pc, #20]	; (8011160 <gos_taskGetDataByIndex+0xd8>)
 801114c:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 801114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011150:	4618      	mov	r0, r3
 8011152:	3710      	adds	r7, #16
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	200050eb 	.word	0x200050eb
 801115c:	200050ec 	.word	0x200050ec
 8011160:	200050e9 	.word	0x200050e9
 8011164:	200050f0 	.word	0x200050f0
 8011168:	20000930 	.word	0x20000930

0801116c <gos_taskGetNumber>:

/*
 * Function: gos_taskGetNumber
 */
gos_result_t gos_taskGetNumber (u16_t* pTaskNum)
{
 801116c:	b480      	push	{r7}
 801116e:	b085      	sub	sp, #20
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetNumResult = GOS_ERROR;
 8011174:	23ae      	movs	r3, #174	; 0xae
 8011176:	73fb      	strb	r3, [r7, #15]
    u16_t        taskIndex        = 0u;
 8011178:	2300      	movs	r3, #0
 801117a:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pTaskNum != NULL)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d01e      	beq.n	80111c0 <gos_taskGetNumber+0x54>
    {
        // Initialize variable.
        *pTaskNum = 0u;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2200      	movs	r2, #0
 8011186:	801a      	strh	r2, [r3, #0]

        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8011188:	2300      	movs	r3, #0
 801118a:	81bb      	strh	r3, [r7, #12]
 801118c:	e011      	b.n	80111b2 <gos_taskGetNumber+0x46>
        {
            if (taskDescriptors[taskIndex].taskFunction != NULL)
 801118e:	89bb      	ldrh	r3, [r7, #12]
 8011190:	4a0f      	ldr	r2, [pc, #60]	; (80111d0 <gos_taskGetNumber+0x64>)
 8011192:	216a      	movs	r1, #106	; 0x6a
 8011194:	fb01 f303 	mul.w	r3, r1, r3
 8011198:	4413      	add	r3, r2
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d00c      	beq.n	80111ba <gos_taskGetNumber+0x4e>
            {
                // Increase counter.
                (*pTaskNum)++;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	881b      	ldrh	r3, [r3, #0]
 80111a4:	3301      	adds	r3, #1
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	801a      	strh	r2, [r3, #0]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80111ac:	89bb      	ldrh	r3, [r7, #12]
 80111ae:	3301      	adds	r3, #1
 80111b0:	81bb      	strh	r3, [r7, #12]
 80111b2:	89bb      	ldrh	r3, [r7, #12]
 80111b4:	2b2f      	cmp	r3, #47	; 0x2f
 80111b6:	d9ea      	bls.n	801118e <gos_taskGetNumber+0x22>
 80111b8:	e000      	b.n	80111bc <gos_taskGetNumber+0x50>
            }
            else
            {
                // Last task found.
                break;
 80111ba:	bf00      	nop
            }
        }

        taskGetNumResult = GOS_SUCCESS;
 80111bc:	2355      	movs	r3, #85	; 0x55
 80111be:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return taskGetNumResult;
 80111c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3714      	adds	r7, #20
 80111c6:	46bd      	mov	sp, r7
 80111c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111cc:	4770      	bx	lr
 80111ce:	bf00      	nop
 80111d0:	20000930 	.word	0x20000930

080111d4 <gos_taskCheckDescriptor>:
 *                              - Stack size is smaller than the minimum allowed
 *                              - Stack size is greater than the maximum allowed
 *                              - Stack size is not 4-byte aligned
 */
GOS_STATIC gos_result_t gos_taskCheckDescriptor (gos_taskDescriptor_t* taskDescriptor)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b085      	sub	sp, #20
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskDescCheckResult = GOS_SUCCESS;
 80111dc:	2355      	movs	r3, #85	; 0x55
 80111de:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (taskDescriptor->taskFunction == NULL                    ||
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d020      	beq.n	801122a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPrivilegeLevel == 0                 ||
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	891b      	ldrh	r3, [r3, #8]
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d01b      	beq.n	801122a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
        taskDescriptor->taskFunction == gos_idleTask      ||
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
 80111f6:	4a11      	ldr	r2, [pc, #68]	; (801123c <gos_taskCheckDescriptor+0x68>)
 80111f8:	4293      	cmp	r3, r2
 80111fa:	d016      	beq.n	801122a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011202:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction == gos_idleTask      ||
 8011204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011208:	d80f      	bhi.n	801122a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011210:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 8011212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011216:	d308      	bcc.n	801122a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize % 4 != 0u)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801121e:	b29b      	uxth	r3, r3
 8011220:	f003 0303 	and.w	r3, r3, #3
 8011224:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 8011226:	2b00      	cmp	r3, #0
 8011228:	d001      	beq.n	801122e <gos_taskCheckDescriptor+0x5a>
    {
        taskDescCheckResult = GOS_ERROR;
 801122a:	23ae      	movs	r3, #174	; 0xae
 801122c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task descriptor OK.
    }

    return taskDescCheckResult;
 801122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011230:	4618      	mov	r0, r3
 8011232:	3714      	adds	r7, #20
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr
 801123c:	08011241 	.word	0x08011241

08011240 <gos_idleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
void_t gos_idleTask (void_t)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 8011246:	2155      	movs	r1, #85	; 0x55
 8011248:	480c      	ldr	r0, [pc, #48]	; (801127c <gos_idleTask+0x3c>)
 801124a:	f000 fa03 	bl	8011654 <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 801124e:	4b0c      	ldr	r3, [pc, #48]	; (8011280 <gos_idleTask+0x40>)
 8011250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011252:	3301      	adds	r3, #1
 8011254:	4a0a      	ldr	r2, [pc, #40]	; (8011280 <gos_idleTask+0x40>)
 8011256:	6413      	str	r3, [r2, #64]	; 0x40

        if (kernelIdleHookFunction != NULL)
 8011258:	4b0a      	ldr	r3, [pc, #40]	; (8011284 <gos_idleTask+0x44>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d002      	beq.n	8011266 <gos_idleTask+0x26>
        {
            kernelIdleHookFunction();
 8011260:	4b08      	ldr	r3, [pc, #32]	; (8011284 <gos_idleTask+0x44>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4798      	blx	r3
        else
        {
            // Idle hook does not exist.
        }

        gos_kernelCalculateTaskCpuUsages(GOS_FALSE);
 8011266:	2049      	movs	r0, #73	; 0x49
 8011268:	f7fd faac 	bl	800e7c4 <gos_kernelCalculateTaskCpuUsages>
    gos_result_t taskYieldResult = GOS_SUCCESS;
 801126c:	2355      	movs	r3, #85	; 0x55
 801126e:	71fb      	strb	r3, [r7, #7]
    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8011270:	2009      	movs	r0, #9
 8011272:	f7fd ffb7 	bl	800f1e4 <gos_kernelReschedule>
    return taskYieldResult;
 8011276:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 8011278:	e7e9      	b.n	801124e <gos_idleTask+0xe>
 801127a:	bf00      	nop
 801127c:	08018bc4 	.word	0x08018bc4
 8011280:	20000930 	.word	0x20000930
 8011284:	20005118 	.word	0x20005118

08011288 <main>:

/*
 * Main
 */
int main (void_t)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 801128e:	4b1c      	ldr	r3, [pc, #112]	; (8011300 <main+0x78>)
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	3301      	adds	r3, #1
 8011294:	b2da      	uxtb	r2, r3
 8011296:	4b1a      	ldr	r3, [pc, #104]	; (8011300 <main+0x78>)
 8011298:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 801129a:	f7ef fe33 	bl	8000f04 <gos_platformDriverInit>
 801129e:	4603      	mov	r3, r0
 80112a0:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 80112a2:	f000 f907 	bl	80114b4 <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 80112a6:	79fb      	ldrb	r3, [r7, #7]
 80112a8:	4619      	mov	r1, r3
 80112aa:	4816      	ldr	r0, [pc, #88]	; (8011304 <main+0x7c>)
 80112ac:	f000 f9d2 	bl	8011654 <gos_errorTraceInit>

    // Initialize the kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 80112b0:	f7fd f8ae 	bl	800e410 <gos_kernelInit>
 80112b4:	4603      	mov	r3, r0
 80112b6:	4619      	mov	r1, r3
 80112b8:	4813      	ldr	r0, [pc, #76]	; (8011308 <main+0x80>)
 80112ba:	f000 f9cb 	bl	8011654 <gos_errorTraceInit>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b55      	cmp	r3, #85	; 0x55
 80112c2:	d109      	bne.n	80112d8 <main+0x50>
        gos_taskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 80112c4:	4911      	ldr	r1, [pc, #68]	; (801130c <main+0x84>)
 80112c6:	4812      	ldr	r0, [pc, #72]	; (8011310 <main+0x88>)
 80112c8:	f7fe fa42 	bl	800f750 <gos_taskRegister>
 80112cc:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 80112ce:	2b55      	cmp	r3, #85	; 0x55
 80112d0:	d102      	bne.n	80112d8 <main+0x50>
    {
        initError = GOS_FALSE;
 80112d2:	4b10      	ldr	r3, [pc, #64]	; (8011314 <main+0x8c>)
 80112d4:	2249      	movs	r2, #73	; 0x49
 80112d6:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 80112d8:	f000 f85e 	bl	8011398 <gos_Start>
 80112dc:	4603      	mov	r3, r0
 80112de:	2bae      	cmp	r3, #174	; 0xae
 80112e0:	d106      	bne.n	80112f0 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 80112e2:	4b0d      	ldr	r3, [pc, #52]	; (8011318 <main+0x90>)
 80112e4:	22c0      	movs	r2, #192	; 0xc0
 80112e6:	490d      	ldr	r1, [pc, #52]	; (801131c <main+0x94>)
 80112e8:	2034      	movs	r0, #52	; 0x34
 80112ea:	f000 f91d 	bl	8011528 <gos_errorHandler>
 80112ee:	e005      	b.n	80112fc <main+0x74>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 80112f0:	4b0b      	ldr	r3, [pc, #44]	; (8011320 <main+0x98>)
 80112f2:	22c4      	movs	r2, #196	; 0xc4
 80112f4:	4909      	ldr	r1, [pc, #36]	; (801131c <main+0x94>)
 80112f6:	2034      	movs	r0, #52	; 0x34
 80112f8:	f000 f916 	bl	8011528 <gos_errorHandler>
    }

    for (;;);
 80112fc:	e7fe      	b.n	80112fc <main+0x74>
 80112fe:	bf00      	nop
 8011300:	200050e9 	.word	0x200050e9
 8011304:	08018bd4 	.word	0x08018bd4
 8011308:	08018bf4 	.word	0x08018bf4
 801130c:	2000511e 	.word	0x2000511e
 8011310:	20001e54 	.word	0x20001e54
 8011314:	2000511c 	.word	0x2000511c
 8011318:	08018c0c 	.word	0x08018c0c
 801131c:	08019c30 	.word	0x08019c30
 8011320:	08018c2c 	.word	0x08018c2c

08011324 <gos_Dump>:

/*
 * Function: gos_Dump
 */
void_t gos_Dump (void_t)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b082      	sub	sp, #8
 8011328:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_taskPrivilegeLevel_t privileges    = 0u;
 801132a:	2300      	movs	r3, #0
 801132c:	80fb      	strh	r3, [r7, #6]
    gos_tid_t                currentTaskId = GOS_INVALID_TASK_ID;
 801132e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011332:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    dumpRequired = GOS_TRUE;
 8011334:	4b16      	ldr	r3, [pc, #88]	; (8011390 <gos_Dump+0x6c>)
 8011336:	2236      	movs	r2, #54	; 0x36
 8011338:	701a      	strb	r2, [r3, #0]

    (void_t) gos_taskGetCurrentId(&currentTaskId);
 801133a:	1d3b      	adds	r3, r7, #4
 801133c:	4618      	mov	r0, r3
 801133e:	f7ff fdd9 	bl	8010ef4 <gos_taskGetCurrentId>
    (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 8011342:	88bb      	ldrh	r3, [r7, #4]
 8011344:	1dba      	adds	r2, r7, #6
 8011346:	4611      	mov	r1, r2
 8011348:	4618      	mov	r0, r3
 801134a:	f7ff fd2b 	bl	8010da4 <gos_taskGetPrivileges>

    if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 801134e:	88fb      	ldrh	r3, [r7, #6]
 8011350:	b21b      	sxth	r3, r3
 8011352:	2b00      	cmp	r3, #0
 8011354:	db11      	blt.n	801137a <gos_Dump+0x56>
    {
        (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8011356:	88bb      	ldrh	r3, [r7, #4]
 8011358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801135c:	4618      	mov	r0, r3
 801135e:	f7ff fbbd 	bl	8010adc <gos_taskAddPrivilege>
        (void_t) gos_taskWakeup(systemTaskId);
 8011362:	4b0c      	ldr	r3, [pc, #48]	; (8011394 <gos_Dump+0x70>)
 8011364:	881b      	ldrh	r3, [r3, #0]
 8011366:	4618      	mov	r0, r3
 8011368:	f7fe fc0a 	bl	800fb80 <gos_taskWakeup>
        (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 801136c:	88bb      	ldrh	r3, [r7, #4]
 801136e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011372:	4618      	mov	r0, r3
 8011374:	f7ff fc2a 	bl	8010bcc <gos_taskRemovePrivilege>
 8011378:	e004      	b.n	8011384 <gos_Dump+0x60>
    }
    else
    {
        (void_t) gos_taskWakeup(systemTaskId);
 801137a:	4b06      	ldr	r3, [pc, #24]	; (8011394 <gos_Dump+0x70>)
 801137c:	881b      	ldrh	r3, [r3, #0]
 801137e:	4618      	mov	r0, r3
 8011380:	f7fe fbfe 	bl	800fb80 <gos_taskWakeup>
    }

    (void_t) gos_shellSuspend();
 8011384:	f001 fc60 	bl	8012c48 <gos_shellSuspend>
}
 8011388:	bf00      	nop
 801138a:	3708      	adds	r7, #8
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	2000511d 	.word	0x2000511d
 8011394:	2000511e 	.word	0x2000511e

08011398 <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 801139e:	23b1      	movs	r3, #177	; 0xb1
 80113a0:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 80113a2:	4b06      	ldr	r3, [pc, #24]	; (80113bc <gos_Start+0x24>)
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	2b49      	cmp	r3, #73	; 0x49
 80113a8:	d103      	bne.n	80113b2 <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 80113aa:	f7fd f91d 	bl	800e5e8 <gos_kernelStart>
 80113ae:	4603      	mov	r3, r0
 80113b0:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 80113b2:	79fb      	ldrb	r3, [r7, #7]
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3708      	adds	r7, #8
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	2000511c 	.word	0x2000511c

080113c0 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 80113c0:	b590      	push	{r4, r7, lr}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 80113c6:	2355      	movs	r3, #85	; 0x55
 80113c8:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 80113ca:	2300      	movs	r3, #0
 80113cc:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 80113ce:	4b33      	ldr	r3, [pc, #204]	; (801149c <gos_systemTask+0xdc>)
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	3301      	adds	r3, #1
 80113d4:	b2da      	uxtb	r2, r3
 80113d6:	4b31      	ldr	r3, [pc, #196]	; (801149c <gos_systemTask+0xdc>)
 80113d8:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 80113da:	2300      	movs	r3, #0
 80113dc:	71bb      	strb	r3, [r7, #6]
 80113de:	e01d      	b.n	801141c <gos_systemTask+0x5c>
    {
        sysInitResult &= gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc());
 80113e0:	79ba      	ldrb	r2, [r7, #6]
 80113e2:	4613      	mov	r3, r2
 80113e4:	00db      	lsls	r3, r3, #3
 80113e6:	4413      	add	r3, r2
 80113e8:	009b      	lsls	r3, r3, #2
 80113ea:	4a2d      	ldr	r2, [pc, #180]	; (80114a0 <gos_systemTask+0xe0>)
 80113ec:	189c      	adds	r4, r3, r2
 80113ee:	79ba      	ldrb	r2, [r7, #6]
 80113f0:	492b      	ldr	r1, [pc, #172]	; (80114a0 <gos_systemTask+0xe0>)
 80113f2:	4613      	mov	r3, r2
 80113f4:	00db      	lsls	r3, r3, #3
 80113f6:	4413      	add	r3, r2
 80113f8:	009b      	lsls	r3, r3, #2
 80113fa:	440b      	add	r3, r1
 80113fc:	3320      	adds	r3, #32
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	4798      	blx	r3
 8011402:	4603      	mov	r3, r0
 8011404:	4619      	mov	r1, r3
 8011406:	4620      	mov	r0, r4
 8011408:	f000 f924 	bl	8011654 <gos_errorTraceInit>
 801140c:	4603      	mov	r3, r0
 801140e:	461a      	mov	r2, r3
 8011410:	79fb      	ldrb	r3, [r7, #7]
 8011412:	4013      	ands	r3, r2
 8011414:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 8011416:	79bb      	ldrb	r3, [r7, #6]
 8011418:	3301      	adds	r3, #1
 801141a:	71bb      	strb	r3, [r7, #6]
 801141c:	79bb      	ldrb	r3, [r7, #6]
 801141e:	2b08      	cmp	r3, #8
 8011420:	d9de      	bls.n	80113e0 <gos_systemTask+0x20>
    }

    // Check and correct flag value.
    if (sysInitResult != GOS_SUCCESS)
 8011422:	79fb      	ldrb	r3, [r7, #7]
 8011424:	2b55      	cmp	r3, #85	; 0x55
 8011426:	d001      	beq.n	801142c <gos_systemTask+0x6c>
    {
        sysInitResult = GOS_ERROR;
 8011428:	23ae      	movs	r3, #174	; 0xae
 801142a:	71fb      	strb	r3, [r7, #7]
    {
        // Nothing to do.
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 801142c:	79fb      	ldrb	r3, [r7, #7]
 801142e:	4619      	mov	r1, r3
 8011430:	481c      	ldr	r0, [pc, #112]	; (80114a4 <gos_systemTask+0xe4>)
 8011432:	f000 f90f 	bl	8011654 <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 8011436:	4b19      	ldr	r3, [pc, #100]	; (801149c <gos_systemTask+0xdc>)
 8011438:	781b      	ldrb	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d005      	beq.n	801144a <gos_systemTask+0x8a>
 801143e:	4b17      	ldr	r3, [pc, #92]	; (801149c <gos_systemTask+0xdc>)
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	3b01      	subs	r3, #1
 8011444:	b2da      	uxtb	r2, r3
 8011446:	4b15      	ldr	r3, [pc, #84]	; (801149c <gos_systemTask+0xdc>)
 8011448:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_taskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 801144a:	4b17      	ldr	r3, [pc, #92]	; (80114a8 <gos_systemTask+0xe8>)
 801144c:	881b      	ldrh	r3, [r3, #0]
 801144e:	21c3      	movs	r1, #195	; 0xc3
 8011450:	4618      	mov	r0, r3
 8011452:	f7ff fa0f 	bl	8010874 <gos_taskSetOriginalPriority>
    (void_t) gos_taskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 8011456:	4b14      	ldr	r3, [pc, #80]	; (80114a8 <gos_systemTask+0xe8>)
 8011458:	881b      	ldrh	r3, [r3, #0]
 801145a:	21c3      	movs	r1, #195	; 0xc3
 801145c:	4618      	mov	r0, r3
 801145e:	f7ff f945 	bl	80106ec <gos_taskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8011462:	2036      	movs	r0, #54	; 0x36
 8011464:	f7fd f9ae 	bl	800e7c4 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 8011468:	4b10      	ldr	r3, [pc, #64]	; (80114ac <gos_systemTask+0xec>)
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	2b36      	cmp	r3, #54	; 0x36
 801146e:	d111      	bne.n	8011494 <gos_systemTask+0xd4>
        {
            (void_t) gos_taskSleep(100);
 8011470:	2064      	movs	r0, #100	; 0x64
 8011472:	f7fe faff 	bl	800fa74 <gos_taskSleep>
            gos_kernelDump();
 8011476:	f7fd fb0b 	bl	800ea90 <gos_kernelDump>
            gos_queueDump();
 801147a:	f001 faf5 	bl	8012a68 <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 801147e:	4b0c      	ldr	r3, [pc, #48]	; (80114b0 <gos_systemTask+0xf0>)
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	2100      	movs	r1, #0
 8011484:	4618      	mov	r0, r3
 8011486:	f001 fffb 	bl	8013480 <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 801148a:	4b08      	ldr	r3, [pc, #32]	; (80114ac <gos_systemTask+0xec>)
 801148c:	2249      	movs	r2, #73	; 0x49
 801148e:	701a      	strb	r2, [r3, #0]
            (void_t) gos_shellResume();
 8011490:	f001 fbee 	bl	8012c70 <gos_shellResume>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_SYS_TASK_SLEEP_TIME);
 8011494:	2064      	movs	r0, #100	; 0x64
 8011496:	f7fe faed 	bl	800fa74 <gos_taskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 801149a:	e7e2      	b.n	8011462 <gos_systemTask+0xa2>
 801149c:	200050e9 	.word	0x200050e9
 80114a0:	20001d10 	.word	0x20001d10
 80114a4:	08018ca8 	.word	0x08018ca8
 80114a8:	2000511e 	.word	0x2000511e
 80114ac:	2000511d 	.word	0x2000511d
 80114b0:	200050e8 	.word	0x200050e8

080114b4 <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
__attribute__((weak)) void_t gos_printStartupLogo (void_t)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 80114b8:	4811      	ldr	r0, [pc, #68]	; (8011500 <gos_printStartupLogo+0x4c>)
 80114ba:	f003 fb3f 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 80114be:	4811      	ldr	r0, [pc, #68]	; (8011504 <gos_printStartupLogo+0x50>)
 80114c0:	f003 fb3c 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 80114c4:	4810      	ldr	r0, [pc, #64]	; (8011508 <gos_printStartupLogo+0x54>)
 80114c6:	f003 fb39 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 80114ca:	4810      	ldr	r0, [pc, #64]	; (801150c <gos_printStartupLogo+0x58>)
 80114cc:	f003 fb36 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 80114d0:	480f      	ldr	r0, [pc, #60]	; (8011510 <gos_printStartupLogo+0x5c>)
 80114d2:	f003 fb33 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 80114d6:	480f      	ldr	r0, [pc, #60]	; (8011514 <gos_printStartupLogo+0x60>)
 80114d8:	f003 fb30 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 80114dc:	480e      	ldr	r0, [pc, #56]	; (8011518 <gos_printStartupLogo+0x64>)
 80114de:	f003 fb2d 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 80114e2:	4809      	ldr	r0, [pc, #36]	; (8011508 <gos_printStartupLogo+0x54>)
 80114e4:	f003 fb2a 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 80114e8:	480c      	ldr	r0, [pc, #48]	; (801151c <gos_printStartupLogo+0x68>)
 80114ea:	f003 fb27 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                        (c) Ahmed Gazar, 2022-2024                        \r\n\r\n");
 80114ee:	480c      	ldr	r0, [pc, #48]	; (8011520 <gos_printStartupLogo+0x6c>)
 80114f0:	f003 fb24 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 80114f4:	480b      	ldr	r0, [pc, #44]	; (8011524 <gos_printStartupLogo+0x70>)
 80114f6:	f003 fb21 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
}
 80114fa:	bf00      	nop
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	08018cc0 	.word	0x08018cc0
 8011504:	08018d10 	.word	0x08018d10
 8011508:	08018d60 	.word	0x08018d60
 801150c:	08018db0 	.word	0x08018db0
 8011510:	08018e00 	.word	0x08018e00
 8011514:	08018e50 	.word	0x08018e50
 8011518:	08018ea0 	.word	0x08018ea0
 801151c:	08018ef0 	.word	0x08018ef0
 8011520:	08018f40 	.word	0x08018f40
 8011524:	08018f90 	.word	0x08018f90

08011528 <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 8011528:	b408      	push	{r3}
 801152a:	b580      	push	{r7, lr}
 801152c:	b087      	sub	sp, #28
 801152e:	af00      	add	r7, sp, #0
 8011530:	4603      	mov	r3, r0
 8011532:	60b9      	str	r1, [r7, #8]
 8011534:	607a      	str	r2, [r7, #4]
 8011536:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 8011538:	4839      	ldr	r0, [pc, #228]	; (8011620 <gos_errorHandler+0xf8>)
 801153a:	f003 faff 	bl	8014b3c <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 801153e:	7bfb      	ldrb	r3, [r7, #15]
 8011540:	2b34      	cmp	r3, #52	; 0x34
 8011542:	d103      	bne.n	801154c <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8011544:	4837      	ldr	r0, [pc, #220]	; (8011624 <gos_errorHandler+0xfc>)
 8011546:	f003 faf9 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
 801154a:	e013      	b.n	8011574 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 801154c:	7bfb      	ldrb	r3, [r7, #15]
 801154e:	2b2e      	cmp	r3, #46	; 0x2e
 8011550:	d103      	bne.n	801155a <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8011552:	4835      	ldr	r0, [pc, #212]	; (8011628 <gos_errorHandler+0x100>)
 8011554:	f003 faf2 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
 8011558:	e00c      	b.n	8011574 <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 801155a:	7bfb      	ldrb	r3, [r7, #15]
 801155c:	2b1a      	cmp	r3, #26
 801155e:	d103      	bne.n	8011568 <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8011560:	4832      	ldr	r0, [pc, #200]	; (801162c <gos_errorHandler+0x104>)
 8011562:	f003 faeb 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
 8011566:	e005      	b.n	8011574 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 8011568:	7bfb      	ldrb	r3, [r7, #15]
 801156a:	2b3a      	cmp	r3, #58	; 0x3a
 801156c:	d102      	bne.n	8011574 <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 801156e:	4830      	ldr	r0, [pc, #192]	; (8011630 <gos_errorHandler+0x108>)
 8011570:	f003 fae4 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d005      	beq.n	8011586 <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	68b9      	ldr	r1, [r7, #8]
 801157e:	482d      	ldr	r0, [pc, #180]	; (8011634 <gos_errorHandler+0x10c>)
 8011580:	f003 fadc 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
 8011584:	e006      	b.n	8011594 <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d003      	beq.n	8011594 <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 801158c:	6879      	ldr	r1, [r7, #4]
 801158e:	482a      	ldr	r0, [pc, #168]	; (8011638 <gos_errorHandler+0x110>)
 8011590:	f003 fad4 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 8011594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011596:	2b00      	cmp	r3, #0
 8011598:	d00b      	beq.n	80115b2 <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 801159a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801159e:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 80115a0:	697a      	ldr	r2, [r7, #20]
 80115a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115a4:	4825      	ldr	r0, [pc, #148]	; (801163c <gos_errorHandler+0x114>)
 80115a6:	f004 fbcb 	bl	8015d40 <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 80115aa:	4924      	ldr	r1, [pc, #144]	; (801163c <gos_errorHandler+0x114>)
 80115ac:	4824      	ldr	r0, [pc, #144]	; (8011640 <gos_errorHandler+0x118>)
 80115ae:	f003 fac5 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 80115b2:	4824      	ldr	r0, [pc, #144]	; (8011644 <gos_errorHandler+0x11c>)
 80115b4:	f003 fac2 	bl	8014b3c <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 80115b8:	7bfb      	ldrb	r3, [r7, #15]
 80115ba:	2b34      	cmp	r3, #52	; 0x34
 80115bc:	d002      	beq.n	80115c4 <gos_errorHandler+0x9c>
 80115be:	7bfb      	ldrb	r3, [r7, #15]
 80115c0:	2b1a      	cmp	r3, #26
 80115c2:	d126      	bne.n	8011612 <gos_errorHandler+0xea>
    {
        GOS_DISABLE_SCHED
 80115c4:	4b20      	ldr	r3, [pc, #128]	; (8011648 <gos_errorHandler+0x120>)
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	3301      	adds	r3, #1
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	4b1e      	ldr	r3, [pc, #120]	; (8011648 <gos_errorHandler+0x120>)
 80115ce:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 80115d0:	4b1e      	ldr	r3, [pc, #120]	; (801164c <gos_errorHandler+0x124>)
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d108      	bne.n	80115ea <gos_errorHandler+0xc2>
 80115d8:	b672      	cpsid	i
 80115da:	f3ef 8310 	mrs	r3, PRIMASK
 80115de:	4a1c      	ldr	r2, [pc, #112]	; (8011650 <gos_errorHandler+0x128>)
 80115e0:	6013      	str	r3, [r2, #0]
 80115e2:	f3bf 8f4f 	dsb	sy
 80115e6:	f3bf 8f6f 	isb	sy
 80115ea:	4b18      	ldr	r3, [pc, #96]	; (801164c <gos_errorHandler+0x124>)
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	3301      	adds	r3, #1
 80115f0:	b2da      	uxtb	r2, r3
 80115f2:	4b16      	ldr	r3, [pc, #88]	; (801164c <gos_errorHandler+0x124>)
 80115f4:	701a      	strb	r2, [r3, #0]
 80115f6:	4b14      	ldr	r3, [pc, #80]	; (8011648 <gos_errorHandler+0x120>)
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	3301      	adds	r3, #1
 80115fc:	b2da      	uxtb	r2, r3
 80115fe:	4b12      	ldr	r3, [pc, #72]	; (8011648 <gos_errorHandler+0x120>)
 8011600:	701a      	strb	r2, [r3, #0]
        for (;;)
        {
            GOS_NOP;
 8011602:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 8011604:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011608:	f7fd f8c0 	bl	800e78c <gos_kernelDelayMs>
            gos_kernelReset();
 801160c:	f7fd f8a0 	bl	800e750 <gos_kernelReset>
            GOS_NOP;
 8011610:	e7f7      	b.n	8011602 <gos_errorHandler+0xda>
    }
    else
    {
        // Nothing to do.
    }
}
 8011612:	bf00      	nop
 8011614:	371c      	adds	r7, #28
 8011616:	46bd      	mov	sp, r7
 8011618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801161c:	b001      	add	sp, #4
 801161e:	4770      	bx	lr
 8011620:	08018fe0 	.word	0x08018fe0
 8011624:	08019034 	.word	0x08019034
 8011628:	08019060 	.word	0x08019060
 801162c:	08019080 	.word	0x08019080
 8011630:	080190b0 	.word	0x080190b0
 8011634:	080190d0 	.word	0x080190d0
 8011638:	080190f4 	.word	0x080190f4
 801163c:	20005120 	.word	0x20005120
 8011640:	08019120 	.word	0x08019120
 8011644:	08019128 	.word	0x08019128
 8011648:	200050e9 	.word	0x200050e9
 801164c:	200050eb 	.word	0x200050eb
 8011650:	200050ec 	.word	0x200050ec

08011654 <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 8011654:	b590      	push	{r4, r7, lr}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	460b      	mov	r3, r1
 801165e:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */

    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 8011660:	f7fd f858 	bl	800e714 <gos_kernelGetSysTicks>
 8011664:	4604      	mov	r4, r0
 8011666:	1cfb      	adds	r3, r7, #3
 8011668:	4618      	mov	r0, r3
 801166a:	f000 f80d 	bl	8011688 <gos_traceResultToString>
 801166e:	4603      	mov	r3, r0
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	4621      	mov	r1, r4
 8011674:	4803      	ldr	r0, [pc, #12]	; (8011684 <gos_errorTraceInit+0x30>)
 8011676:	f003 fa61 	bl	8014b3c <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 801167a:	78fb      	ldrb	r3, [r7, #3]
}
 801167c:	4618      	mov	r0, r3
 801167e:	370c      	adds	r7, #12
 8011680:	46bd      	mov	sp, r7
 8011682:	bd90      	pop	{r4, r7, pc}
 8011684:	08019178 	.word	0x08019178

08011688 <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	2b55      	cmp	r3, #85	; 0x55
 8011696:	d002      	beq.n	801169e <gos_traceResultToString+0x16>
 8011698:	2bae      	cmp	r3, #174	; 0xae
 801169a:	d002      	beq.n	80116a2 <gos_traceResultToString+0x1a>
 801169c:	e003      	b.n	80116a6 <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 801169e:	4b05      	ldr	r3, [pc, #20]	; (80116b4 <gos_traceResultToString+0x2c>)
 80116a0:	e002      	b.n	80116a8 <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 80116a2:	4b05      	ldr	r3, [pc, #20]	; (80116b8 <gos_traceResultToString+0x30>)
 80116a4:	e000      	b.n	80116a8 <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 80116a6:	4b05      	ldr	r3, [pc, #20]	; (80116bc <gos_traceResultToString+0x34>)
        }
    }
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	370c      	adds	r7, #12
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr
 80116b4:	08019194 	.word	0x08019194
 80116b8:	080191a8 	.word	0x080191a8
 80116bc:	080191bc 	.word	0x080191bc

080116c0 <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b082      	sub	sp, #8
 80116c4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 80116c6:	2355      	movs	r3, #85	; 0x55
 80116c8:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 80116ca:	2300      	movs	r3, #0
 80116cc:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 80116ce:	2300      	movs	r3, #0
 80116d0:	80bb      	strh	r3, [r7, #4]
 80116d2:	e01a      	b.n	801170a <gos_gcpInit+0x4a>
    {
        gcpInitResult &= gos_mutexInit(&gcpRxMutexes[mutexIdx]);
 80116d4:	88bb      	ldrh	r3, [r7, #4]
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	4a12      	ldr	r2, [pc, #72]	; (8011724 <gos_gcpInit+0x64>)
 80116da:	4413      	add	r3, r2
 80116dc:	4618      	mov	r0, r3
 80116de:	f000 fdd9 	bl	8012294 <gos_mutexInit>
 80116e2:	4603      	mov	r3, r0
 80116e4:	461a      	mov	r2, r3
 80116e6:	79fb      	ldrb	r3, [r7, #7]
 80116e8:	4013      	ands	r3, r2
 80116ea:	71fb      	strb	r3, [r7, #7]
        gcpInitResult &= gos_mutexInit(&gcpTxMutexes[mutexIdx]);
 80116ec:	88bb      	ldrh	r3, [r7, #4]
 80116ee:	009b      	lsls	r3, r3, #2
 80116f0:	4a0d      	ldr	r2, [pc, #52]	; (8011728 <gos_gcpInit+0x68>)
 80116f2:	4413      	add	r3, r2
 80116f4:	4618      	mov	r0, r3
 80116f6:	f000 fdcd 	bl	8012294 <gos_mutexInit>
 80116fa:	4603      	mov	r3, r0
 80116fc:	461a      	mov	r2, r3
 80116fe:	79fb      	ldrb	r3, [r7, #7]
 8011700:	4013      	ands	r3, r2
 8011702:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 8011704:	88bb      	ldrh	r3, [r7, #4]
 8011706:	3301      	adds	r3, #1
 8011708:	80bb      	strh	r3, [r7, #4]
 801170a:	88bb      	ldrh	r3, [r7, #4]
 801170c:	2b03      	cmp	r3, #3
 801170e:	d9e1      	bls.n	80116d4 <gos_gcpInit+0x14>
    }

    if (gcpInitResult != GOS_SUCCESS)
 8011710:	79fb      	ldrb	r3, [r7, #7]
 8011712:	2b55      	cmp	r3, #85	; 0x55
 8011714:	d001      	beq.n	801171a <gos_gcpInit+0x5a>
    {
        gcpInitResult = GOS_ERROR;
 8011716:	23ae      	movs	r3, #174	; 0xae
 8011718:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return gcpInitResult;
 801171a:	79fb      	ldrb	r3, [r7, #7]
}
 801171c:	4618      	mov	r0, r3
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}
 8011724:	20005190 	.word	0x20005190
 8011728:	200051a0 	.word	0x200051a0

0801172c <gos_gcpRegisterPhysicalDriver>:
gos_result_t gos_gcpRegisterPhysicalDriver (
        gos_gcpChannelNumber_t    channelNumber,
        gos_gcpTransmitFunction_t transmitFunction,
        gos_gcpReceiveFunction_t  receiveFunction
        )
{
 801172c:	b480      	push	{r7}
 801172e:	b087      	sub	sp, #28
 8011730:	af00      	add	r7, sp, #0
 8011732:	4603      	mov	r3, r0
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	607a      	str	r2, [r7, #4]
 8011738:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t registerPhysicalDriverResult = GOS_ERROR;
 801173a:	23ae      	movs	r3, #174	; 0xae
 801173c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (channelNumber < CFG_GCP_CHANNELS_MAX_NUMBER && transmitFunction != NULL && receiveFunction != NULL)
 801173e:	7bfb      	ldrb	r3, [r7, #15]
 8011740:	2b03      	cmp	r3, #3
 8011742:	d812      	bhi.n	801176a <gos_gcpRegisterPhysicalDriver+0x3e>
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d00f      	beq.n	801176a <gos_gcpRegisterPhysicalDriver+0x3e>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00c      	beq.n	801176a <gos_gcpRegisterPhysicalDriver+0x3e>
    {
        channelFunctions[channelNumber].gcpReceiveFunction  = receiveFunction;
 8011750:	7bfb      	ldrb	r3, [r7, #15]
 8011752:	4a09      	ldr	r2, [pc, #36]	; (8011778 <gos_gcpRegisterPhysicalDriver+0x4c>)
 8011754:	00db      	lsls	r3, r3, #3
 8011756:	4413      	add	r3, r2
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	605a      	str	r2, [r3, #4]
        channelFunctions[channelNumber].gcpTransmitFunction = transmitFunction;
 801175c:	7bfb      	ldrb	r3, [r7, #15]
 801175e:	4906      	ldr	r1, [pc, #24]	; (8011778 <gos_gcpRegisterPhysicalDriver+0x4c>)
 8011760:	68ba      	ldr	r2, [r7, #8]
 8011762:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        registerPhysicalDriverResult                        = GOS_SUCCESS;
 8011766:	2355      	movs	r3, #85	; 0x55
 8011768:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Nothing to do.
    }

    return registerPhysicalDriverResult;
 801176a:	7dfb      	ldrb	r3, [r7, #23]
}
 801176c:	4618      	mov	r0, r3
 801176e:	371c      	adds	r7, #28
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr
 8011778:	20005170 	.word	0x20005170

0801177c <gos_gcpTransmitMessage>:
        u16_t                   messageId,
        void_t*                 pMessagePayload,
        u16_t                   payloadSize,
		u16_t                   maxChunkSize
        )
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b092      	sub	sp, #72	; 0x48
 8011780:	af00      	add	r7, sp, #0
 8011782:	60ba      	str	r2, [r7, #8]
 8011784:	461a      	mov	r2, r3
 8011786:	4603      	mov	r3, r0
 8011788:	73fb      	strb	r3, [r7, #15]
 801178a:	460b      	mov	r3, r1
 801178c:	81bb      	strh	r3, [r7, #12]
 801178e:	4613      	mov	r3, r2
 8011790:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t transmitMessageResult = GOS_ERROR;
 8011792:	23ae      	movs	r3, #174	; 0xae
 8011794:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /*
     * Function code.
     */
    if (gos_mutexLock(&gcpTxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8011798:	7bfb      	ldrb	r3, [r7, #15]
 801179a:	009b      	lsls	r3, r3, #2
 801179c:	4a8e      	ldr	r2, [pc, #568]	; (80119d8 <gos_gcpTransmitMessage+0x25c>)
 801179e:	4413      	add	r3, r2
 80117a0:	f04f 31ff 	mov.w	r1, #4294967295
 80117a4:	4618      	mov	r0, r3
 80117a6:	f000 fd8f 	bl	80122c8 <gos_mutexLock>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b55      	cmp	r3, #85	; 0x55
 80117ae:	f040 8105 	bne.w	80119bc <gos_gcpTransmitMessage+0x240>
 80117b2:	7bfb      	ldrb	r3, [r7, #15]
 80117b4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80117b8:	89bb      	ldrh	r3, [r7, #12]
 80117ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	643b      	str	r3, [r7, #64]	; 0x40
 80117c2:	88fb      	ldrh	r3, [r7, #6]
 80117c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80117c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80117ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
)
{
    /*
     * Local variables.
     */
    gos_result_t         transmitMessageResult = GOS_ERROR;
 80117cc:	23ae      	movs	r3, #174	; 0xae
 80117ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 80117d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117d6:	2200      	movs	r2, #0
 80117d8:	601a      	str	r2, [r3, #0]
 80117da:	605a      	str	r2, [r3, #4]
 80117dc:	609a      	str	r2, [r3, #8]
 80117de:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 80117e0:	f107 0314 	add.w	r3, r7, #20
 80117e4:	2200      	movs	r2, #0
 80117e6:	601a      	str	r2, [r3, #0]
 80117e8:	605a      	str	r2, [r3, #4]
 80117ea:	609a      	str	r2, [r3, #8]
 80117ec:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 80117ee:	2300      	movs	r3, #0
 80117f0:	74fb      	strb	r3, [r7, #19]
    u8_t                 dataChunks            = 0u;
 80117f2:	2300      	movs	r3, #0
 80117f4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    u8_t                 chunkIndex            = 0u;
 80117f8:	2300      	movs	r3, #0
 80117fa:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    u16_t                tempSize              = 0u;
 80117fe:	2300      	movs	r3, #0
 8011800:	86fb      	strh	r3, [r7, #54]	; 0x36

    /*
     * Function code.
     */
    if ((pMessagePayload                              != NULL                        ||
 8011802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011804:	2b00      	cmp	r3, #0
 8011806:	d107      	bne.n	8011818 <gos_gcpTransmitMessage+0x9c>
 8011808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801180a:	2b00      	cmp	r3, #0
 801180c:	f040 80d2 	bne.w	80119b4 <gos_gcpTransmitMessage+0x238>
        (pMessagePayload                              == NULL                        &&
 8011810:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011812:	2b00      	cmp	r3, #0
 8011814:	f040 80ce 	bne.w	80119b4 <gos_gcpTransmitMessage+0x238>
        payloadSize                                   == 0u))                        &&
 8011818:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801181c:	2b03      	cmp	r3, #3
 801181e:	f200 80c9 	bhi.w	80119b4 <gos_gcpTransmitMessage+0x238>
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpTransmitFunction != NULL)
 8011822:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011826:	4a6d      	ldr	r2, [pc, #436]	; (80119dc <gos_gcpTransmitMessage+0x260>)
 8011828:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 801182c:	2b00      	cmp	r3, #0
 801182e:	f000 80c1 	beq.w	80119b4 <gos_gcpTransmitMessage+0x238>
    {
        // Fill out header frame.
        requestHeaderFrame.ackType       = GCP_ACK_REQ;
 8011832:	2300      	movs	r3, #0
 8011834:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        requestHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 8011838:	2302      	movs	r3, #2
 801183a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        requestHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 801183e:	2300      	movs	r3, #0
 8011840:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        requestHeaderFrame.dataSize      = payloadSize;
 8011844:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011846:	857b      	strh	r3, [r7, #42]	; 0x2a
        requestHeaderFrame.messageId     = messageId;
 8011848:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801184c:	853b      	strh	r3, [r7, #40]	; 0x28
        requestHeaderFrame.dataCrc       = gos_crcDriverGetCrc((u8_t*)pMessagePayload, payloadSize);
 801184e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011850:	4619      	mov	r1, r3
 8011852:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011854:	f003 fb7c 	bl	8014f50 <gos_crcDriverGetCrc>
 8011858:	4603      	mov	r3, r0
 801185a:	62fb      	str	r3, [r7, #44]	; 0x2c
        requestHeaderFrame.headerCrc     = gos_crcDriverGetCrc((u8_t*)&requestHeaderFrame, (u32_t)(sizeof(requestHeaderFrame) - sizeof(requestHeaderFrame.headerCrc)));
 801185c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011860:	210c      	movs	r1, #12
 8011862:	4618      	mov	r0, r3
 8011864:	f003 fb74 	bl	8014f50 <gos_crcDriverGetCrc>
 8011868:	4603      	mov	r3, r0
 801186a:	633b      	str	r3, [r7, #48]	; 0x30
        else
        {
            // Error.
        }*/

        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS)
 801186c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011870:	4a5a      	ldr	r2, [pc, #360]	; (80119dc <gos_gcpTransmitMessage+0x260>)
 8011872:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011876:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801187a:	2110      	movs	r1, #16
 801187c:	4610      	mov	r0, r2
 801187e:	4798      	blx	r3
 8011880:	4603      	mov	r3, r0
 8011882:	2b55      	cmp	r3, #85	; 0x55
 8011884:	f040 8096 	bne.w	80119b4 <gos_gcpTransmitMessage+0x238>
        {
        	if (requestHeaderFrame.dataSize == 0u)
 8011888:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801188a:	2b00      	cmp	r3, #0
 801188c:	d120      	bne.n	80118d0 <gos_gcpTransmitMessage+0x154>
        	{
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 801188e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011892:	4a52      	ldr	r2, [pc, #328]	; (80119dc <gos_gcpTransmitMessage+0x260>)
 8011894:	00db      	lsls	r3, r3, #3
 8011896:	4413      	add	r3, r2
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	f107 0214 	add.w	r2, r7, #20
 801189e:	2110      	movs	r1, #16
 80118a0:	4610      	mov	r0, r2
 80118a2:	4798      	blx	r3
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b55      	cmp	r3, #85	; 0x55
 80118a8:	f040 8084 	bne.w	80119b4 <gos_gcpTransmitMessage+0x238>
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 80118ac:	f107 0213 	add.w	r2, r7, #19
 80118b0:	f107 0314 	add.w	r3, r7, #20
 80118b4:	4611      	mov	r1, r2
 80118b6:	4618      	mov	r0, r3
 80118b8:	f000 f9de 	bl	8011c78 <gos_gcpValidateHeader>
 80118bc:	4603      	mov	r3, r0
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 80118be:	2b55      	cmp	r3, #85	; 0x55
 80118c0:	d178      	bne.n	80119b4 <gos_gcpTransmitMessage+0x238>
			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 80118c2:	7dbb      	ldrb	r3, [r7, #22]
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d175      	bne.n	80119b4 <gos_gcpTransmitMessage+0x238>
        		{
                    // Transmission successful.
                    transmitMessageResult = GOS_SUCCESS;
 80118c8:	2355      	movs	r3, #85	; 0x55
 80118ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80118ce:	e071      	b.n	80119b4 <gos_gcpTransmitMessage+0x238>
        			// Error.
        		}
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 80118d0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80118d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80118d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80118d8:	b29b      	uxth	r3, r3
 80118da:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 80118de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80118e0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80118e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80118e6:	fb01 f202 	mul.w	r2, r1, r2
 80118ea:	1a9b      	subs	r3, r3, r2
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d004      	beq.n	80118fc <gos_gcpTransmitMessage+0x180>
            	{
            		dataChunks++;
 80118f2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80118f6:	3301      	adds	r3, #1
 80118f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 80118fc:	2300      	movs	r3, #0
 80118fe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8011902:	e051      	b.n	80119a8 <gos_gcpTransmitMessage+0x22c>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 8011904:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011908:	3301      	adds	r3, #1
 801190a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801190c:	fb02 f303 	mul.w	r3, r2, r3
 8011910:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8011912:	4293      	cmp	r3, r2
 8011914:	dd0a      	ble.n	801192c <gos_gcpTransmitMessage+0x1b0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 8011916:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8011918:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 801191c:	b29b      	uxth	r3, r3
 801191e:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8011920:	fb11 f303 	smulbb	r3, r1, r3
 8011924:	b29b      	uxth	r3, r3
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	86fb      	strh	r3, [r7, #54]	; 0x36
 801192a:	e001      	b.n	8011930 <gos_gcpTransmitMessage+0x1b4>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 801192c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801192e:	86fb      	strh	r3, [r7, #54]	; 0x36
            		}

            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 8011930:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011934:	4a29      	ldr	r2, [pc, #164]	; (80119dc <gos_gcpTransmitMessage+0x260>)
 8011936:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801193a:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 801193e:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8011940:	fb01 f202 	mul.w	r2, r1, r2
 8011944:	4611      	mov	r1, r2
 8011946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011948:	440a      	add	r2, r1
 801194a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 801194c:	4610      	mov	r0, r2
 801194e:	4798      	blx	r3
 8011950:	4603      	mov	r3, r0
 8011952:	2b55      	cmp	r3, #85	; 0x55
 8011954:	d124      	bne.n	80119a0 <gos_gcpTransmitMessage+0x224>
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8011956:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801195a:	4a20      	ldr	r2, [pc, #128]	; (80119dc <gos_gcpTransmitMessage+0x260>)
 801195c:	00db      	lsls	r3, r3, #3
 801195e:	4413      	add	r3, r2
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	f107 0214 	add.w	r2, r7, #20
 8011966:	2110      	movs	r1, #16
 8011968:	4610      	mov	r0, r2
 801196a:	4798      	blx	r3
 801196c:	4603      	mov	r3, r0
            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 801196e:	2b55      	cmp	r3, #85	; 0x55
 8011970:	d116      	bne.n	80119a0 <gos_gcpTransmitMessage+0x224>
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8011972:	f107 0213 	add.w	r2, r7, #19
 8011976:	f107 0314 	add.w	r3, r7, #20
 801197a:	4611      	mov	r1, r2
 801197c:	4618      	mov	r0, r3
 801197e:	f000 f97b 	bl	8011c78 <gos_gcpValidateHeader>
 8011982:	4603      	mov	r3, r0
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8011984:	2b55      	cmp	r3, #85	; 0x55
 8011986:	d10b      	bne.n	80119a0 <gos_gcpTransmitMessage+0x224>
    			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 8011988:	7dbb      	ldrb	r3, [r7, #22]
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 801198a:	2b01      	cmp	r3, #1
 801198c:	d108      	bne.n	80119a0 <gos_gcpTransmitMessage+0x224>
            		{
                        // Transmission successful.
            			// Set temporary success.
                        transmitMessageResult = GOS_SUCCESS;
 801198e:	2355      	movs	r3, #85	; 0x55
 8011990:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8011994:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011998:	3301      	adds	r3, #1
 801199a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 801199e:	e003      	b.n	80119a8 <gos_gcpTransmitMessage+0x22c>
            		}
            		else
            		{
            			// Error.
            			transmitMessageResult = GOS_ERROR;
 80119a0:	23ae      	movs	r3, #174	; 0xae
 80119a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            			break;
 80119a6:	e005      	b.n	80119b4 <gos_gcpTransmitMessage+0x238>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 80119a8:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80119ac:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d3a7      	bcc.n	8011904 <gos_gcpTransmitMessage+0x188>
    else
    {
        // Nothing to do.
    }

    return transmitMessageResult;
 80119b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
        transmitMessageResult = gos_gcpTransmitMessageInternal(channel, messageId, pMessagePayload, payloadSize, maxChunkSize);
 80119b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    (void_t) gos_mutexUnlock(&gcpTxMutexes[channel]);
 80119bc:	7bfb      	ldrb	r3, [r7, #15]
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	4a05      	ldr	r2, [pc, #20]	; (80119d8 <gos_gcpTransmitMessage+0x25c>)
 80119c2:	4413      	add	r3, r2
 80119c4:	4618      	mov	r0, r3
 80119c6:	f000 fd85 	bl	80124d4 <gos_mutexUnlock>
    return transmitMessageResult;
 80119ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3748      	adds	r7, #72	; 0x48
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	200051a0 	.word	0x200051a0
 80119dc:	20005170 	.word	0x20005170

080119e0 <gos_gcpReceiveMessage>:
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b094      	sub	sp, #80	; 0x50
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60b9      	str	r1, [r7, #8]
 80119e8:	607a      	str	r2, [r7, #4]
 80119ea:	461a      	mov	r2, r3
 80119ec:	4603      	mov	r3, r0
 80119ee:	73fb      	strb	r3, [r7, #15]
 80119f0:	4613      	mov	r3, r2
 80119f2:	81bb      	strh	r3, [r7, #12]
    gos_result_t receiveMessageResult = GOS_ERROR;
 80119f4:	23ae      	movs	r3, #174	; 0xae
 80119f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (gos_mutexLock(&gcpRxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 80119fa:	7bfb      	ldrb	r3, [r7, #15]
 80119fc:	009b      	lsls	r3, r3, #2
 80119fe:	4a9c      	ldr	r2, [pc, #624]	; (8011c70 <gos_gcpReceiveMessage+0x290>)
 8011a00:	4413      	add	r3, r2
 8011a02:	f04f 31ff 	mov.w	r1, #4294967295
 8011a06:	4618      	mov	r0, r3
 8011a08:	f000 fc5e 	bl	80122c8 <gos_mutexLock>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b55      	cmp	r3, #85	; 0x55
 8011a10:	f040 8120 	bne.w	8011c54 <gos_gcpReceiveMessage+0x274>
 8011a14:	7bfb      	ldrb	r3, [r7, #15]
 8011a16:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	647b      	str	r3, [r7, #68]	; 0x44
 8011a22:	89bb      	ldrh	r3, [r7, #12]
 8011a24:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011a28:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8011a2c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        )
{
    /*
     * Local variables.
     */
    gos_result_t         receiveMessageResult  = GOS_ERROR;
 8011a30:	23ae      	movs	r3, #174	; 0xae
 8011a32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 8011a36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	601a      	str	r2, [r3, #0]
 8011a3e:	605a      	str	r2, [r3, #4]
 8011a40:	609a      	str	r2, [r3, #8]
 8011a42:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 8011a44:	f107 0318 	add.w	r3, r7, #24
 8011a48:	2200      	movs	r2, #0
 8011a4a:	601a      	str	r2, [r3, #0]
 8011a4c:	605a      	str	r2, [r3, #4]
 8011a4e:	609a      	str	r2, [r3, #8]
 8011a50:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 8011a52:	2300      	movs	r3, #0
 8011a54:	75fb      	strb	r3, [r7, #23]
    u8_t                 dataChunks            = 0u;
 8011a56:	2300      	movs	r3, #0
 8011a58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    u8_t                 chunkIndex            = 0u;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    u16_t                tempSize              = 0u;
 8011a62:	2300      	movs	r3, #0
 8011a64:	877b      	strh	r3, [r7, #58]	; 0x3a

    /*
     * Function code.
     */
    if (pMessageId                                   != NULL                        &&
 8011a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	f000 80ef 	beq.w	8011c4c <gos_gcpReceiveMessage+0x26c>
 8011a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	f000 80eb 	beq.w	8011c4c <gos_gcpReceiveMessage+0x26c>
        pPayloadTarget                               != NULL                        &&
 8011a76:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8011a7a:	2b03      	cmp	r3, #3
 8011a7c:	f200 80e6 	bhi.w	8011c4c <gos_gcpReceiveMessage+0x26c>
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpReceiveFunction != NULL
 8011a80:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8011a84:	4a7b      	ldr	r2, [pc, #492]	; (8011c74 <gos_gcpReceiveMessage+0x294>)
 8011a86:	00db      	lsls	r3, r3, #3
 8011a88:	4413      	add	r3, r2
 8011a8a:	685b      	ldr	r3, [r3, #4]
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	f000 80dd 	beq.w	8011c4c <gos_gcpReceiveMessage+0x26c>
        )
    {
        // Prepare response header frame.
        responseHeaderFrame.dataSize      = 0u;
 8011a92:	2300      	movs	r3, #0
 8011a94:	83fb      	strh	r3, [r7, #30]
        responseHeaderFrame.dataCrc       = 0u;
 8011a96:	2300      	movs	r3, #0
 8011a98:	623b      	str	r3, [r7, #32]
        responseHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 8011a9a:	2302      	movs	r3, #2
 8011a9c:	763b      	strb	r3, [r7, #24]
        responseHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	767b      	strb	r3, [r7, #25]
            responseHeaderFrame.ackType   = (u8_t)headerAck;
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
        }*/

        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8011aa2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8011aa6:	4a73      	ldr	r2, [pc, #460]	; (8011c74 <gos_gcpReceiveMessage+0x294>)
 8011aa8:	00db      	lsls	r3, r3, #3
 8011aaa:	4413      	add	r3, r2
 8011aac:	685b      	ldr	r3, [r3, #4]
 8011aae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011ab2:	2110      	movs	r1, #16
 8011ab4:	4610      	mov	r0, r2
 8011ab6:	4798      	blx	r3
 8011ab8:	4603      	mov	r3, r0
 8011aba:	2b55      	cmp	r3, #85	; 0x55
 8011abc:	f040 80b0 	bne.w	8011c20 <gos_gcpReceiveMessage+0x240>
            gos_gcpValidateHeader(&requestHeaderFrame, &headerAck) == GOS_SUCCESS)
 8011ac0:	f107 0217 	add.w	r2, r7, #23
 8011ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011ac8:	4611      	mov	r1, r2
 8011aca:	4618      	mov	r0, r3
 8011acc:	f000 f8d4 	bl	8011c78 <gos_gcpValidateHeader>
 8011ad0:	4603      	mov	r3, r0
        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8011ad2:	2b55      	cmp	r3, #85	; 0x55
 8011ad4:	f040 80a4 	bne.w	8011c20 <gos_gcpReceiveMessage+0x240>
        {
        	if (requestHeaderFrame.dataSize == 0)
 8011ad8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d11e      	bne.n	8011b1c <gos_gcpReceiveMessage+0x13c>
        	{
        		// OK.
                // Data OK. Send response.
                *pMessageId = requestHeaderFrame.messageId;
 8011ade:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8011ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ae2:	801a      	strh	r2, [r3, #0]
                responseHeaderFrame.ackType = GCP_ACK_OK;
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	76bb      	strb	r3, [r7, #26]
                responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8011ae8:	f107 0318 	add.w	r3, r7, #24
 8011aec:	210c      	movs	r1, #12
 8011aee:	4618      	mov	r0, r3
 8011af0:	f003 fa2e 	bl	8014f50 <gos_crcDriverGetCrc>
 8011af4:	4603      	mov	r3, r0
 8011af6:	627b      	str	r3, [r7, #36]	; 0x24
                if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 8011af8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8011afc:	4a5d      	ldr	r2, [pc, #372]	; (8011c74 <gos_gcpReceiveMessage+0x294>)
 8011afe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011b02:	f107 0218 	add.w	r2, r7, #24
 8011b06:	2110      	movs	r1, #16
 8011b08:	4610      	mov	r0, r2
 8011b0a:	4798      	blx	r3
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	2b55      	cmp	r3, #85	; 0x55
 8011b10:	f040 809b 	bne.w	8011c4a <gos_gcpReceiveMessage+0x26a>
                {
                    // Reception successful.
                    receiveMessageResult = GOS_SUCCESS;
 8011b14:	2355      	movs	r3, #85	; 0x55
 8011b16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 8011b1a:	e096      	b.n	8011c4a <gos_gcpReceiveMessage+0x26a>
                    // Transmit error.
                }
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 8011b1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011b1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b26:	b29b      	uxth	r3, r3
 8011b28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 8011b2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011b2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011b32:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b36:	fb01 f202 	mul.w	r2, r1, r2
 8011b3a:	1a9b      	subs	r3, r3, r2
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d004      	beq.n	8011b4c <gos_gcpReceiveMessage+0x16c>
            	{
            		dataChunks++;
 8011b42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8011b46:	3301      	adds	r3, #1
 8011b48:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8011b52:	e04c      	b.n	8011bee <gos_gcpReceiveMessage+0x20e>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 8011b54:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8011b58:	3301      	adds	r3, #1
 8011b5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011b5e:	fb02 f303 	mul.w	r3, r2, r3
 8011b62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011b64:	4293      	cmp	r3, r2
 8011b66:	dd0b      	ble.n	8011b80 <gos_gcpReceiveMessage+0x1a0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 8011b68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011b6a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8011b74:	fb11 f303 	smulbb	r3, r1, r3
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011b7e:	e002      	b.n	8011b86 <gos_gcpReceiveMessage+0x1a6>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 8011b80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011b84:	877b      	strh	r3, [r7, #58]	; 0x3a
            		}

            		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)(pPayloadTarget + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS)
 8011b86:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8011b8a:	4a3a      	ldr	r2, [pc, #232]	; (8011c74 <gos_gcpReceiveMessage+0x294>)
 8011b8c:	00db      	lsls	r3, r3, #3
 8011b8e:	4413      	add	r3, r2
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8011b96:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8011b9a:	fb01 f202 	mul.w	r2, r1, r2
 8011b9e:	4611      	mov	r1, r2
 8011ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ba2:	440a      	add	r2, r1
 8011ba4:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8011ba6:	4610      	mov	r0, r2
 8011ba8:	4798      	blx	r3
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b55      	cmp	r3, #85	; 0x55
 8011bae:	d125      	bne.n	8011bfc <gos_gcpReceiveMessage+0x21c>
            		{
            			// OK, send response.
                        // Data OK. Send response.
                        *pMessageId = requestHeaderFrame.messageId;
 8011bb0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8011bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bb4:	801a      	strh	r2, [r3, #0]
                        responseHeaderFrame.ackType = GCP_ACK_OK;
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	76bb      	strb	r3, [r7, #26]
                        responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8011bba:	f107 0318 	add.w	r3, r7, #24
 8011bbe:	210c      	movs	r1, #12
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f003 f9c5 	bl	8014f50 <gos_crcDriverGetCrc>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	627b      	str	r3, [r7, #36]	; 0x24
                        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 8011bca:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8011bce:	4a29      	ldr	r2, [pc, #164]	; (8011c74 <gos_gcpReceiveMessage+0x294>)
 8011bd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011bd4:	f107 0218 	add.w	r2, r7, #24
 8011bd8:	2110      	movs	r1, #16
 8011bda:	4610      	mov	r0, r2
 8011bdc:	4798      	blx	r3
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b55      	cmp	r3, #85	; 0x55
 8011be2:	d10d      	bne.n	8011c00 <gos_gcpReceiveMessage+0x220>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8011be4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8011be8:	3301      	adds	r3, #1
 8011bea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8011bee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8011bf2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d3ac      	bcc.n	8011b54 <gos_gcpReceiveMessage+0x174>
 8011bfa:	e002      	b.n	8011c02 <gos_gcpReceiveMessage+0x222>
                        	break;
                        }
            		}
            		else
            		{
            			break;
 8011bfc:	bf00      	nop
 8011bfe:	e000      	b.n	8011c02 <gos_gcpReceiveMessage+0x222>
                        	break;
 8011c00:	bf00      	nop
            		}
            	}

            	// Integrity check.
            	if (gos_gcpValidateData(&requestHeaderFrame, pPayloadTarget, &headerAck) == GOS_SUCCESS)
 8011c02:	f107 0217 	add.w	r2, r7, #23
 8011c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011c0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f000 f860 	bl	8011cd2 <gos_gcpValidateData>
 8011c12:	4603      	mov	r3, r0
 8011c14:	2b55      	cmp	r3, #85	; 0x55
 8011c16:	d118      	bne.n	8011c4a <gos_gcpReceiveMessage+0x26a>
            	{
            		receiveMessageResult = GOS_SUCCESS;
 8011c18:	2355      	movs	r3, #85	; 0x55
 8011c1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 8011c1e:	e014      	b.n	8011c4a <gos_gcpReceiveMessage+0x26a>
        	}
        }
        else
        {
            // Send response.
            responseHeaderFrame.ackType   = (u8_t)headerAck;
 8011c20:	7dfb      	ldrb	r3, [r7, #23]
 8011c22:	76bb      	strb	r3, [r7, #26]
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8011c24:	f107 0318 	add.w	r3, r7, #24
 8011c28:	210c      	movs	r1, #12
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f003 f990 	bl	8014f50 <gos_crcDriverGetCrc>
 8011c30:	4603      	mov	r3, r0
 8011c32:	627b      	str	r3, [r7, #36]	; 0x24
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
 8011c34:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8011c38:	4a0e      	ldr	r2, [pc, #56]	; (8011c74 <gos_gcpReceiveMessage+0x294>)
 8011c3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011c3e:	f107 0218 	add.w	r2, r7, #24
 8011c42:	2110      	movs	r1, #16
 8011c44:	4610      	mov	r0, r2
 8011c46:	4798      	blx	r3
 8011c48:	e000      	b.n	8011c4c <gos_gcpReceiveMessage+0x26c>
        	if (requestHeaderFrame.dataSize == 0)
 8011c4a:	bf00      	nop
    else
    {
        // Nothing to do.
    }

    return receiveMessageResult;
 8011c4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        receiveMessageResult = gos_gcpReceiveMessageInternal(channel, pMessageId, pPayloadTarget, targetSize, maxChunkSize);
 8011c50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    gos_mutexUnlock(&gcpRxMutexes[channel]);
 8011c54:	7bfb      	ldrb	r3, [r7, #15]
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	4a05      	ldr	r2, [pc, #20]	; (8011c70 <gos_gcpReceiveMessage+0x290>)
 8011c5a:	4413      	add	r3, r2
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f000 fc39 	bl	80124d4 <gos_mutexUnlock>
    return receiveMessageResult;
 8011c62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3750      	adds	r7, #80	; 0x50
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	20005190 	.word	0x20005190
 8011c74:	20005170 	.word	0x20005170

08011c78 <gos_gcpValidateHeader>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC or PV error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateHeader (gos_gcpHeaderFrame_t* pHeader, gos_gcpAck_t* pAck)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 8011c82:	23ae      	movs	r3, #174	; 0xae
 8011c84:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pHeader != NULL && pAck != NULL)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d01d      	beq.n	8011cc8 <gos_gcpValidateHeader+0x50>
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d01a      	beq.n	8011cc8 <gos_gcpValidateHeader+0x50>
    {
        // Check header CRC.
        if (gos_crcDriverGetCrc((u8_t*)pHeader, (u16_t)(sizeof(*pHeader) - sizeof(pHeader->headerCrc))) == pHeader->headerCrc)
 8011c92:	210c      	movs	r1, #12
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f003 f95b 	bl	8014f50 <gos_crcDriverGetCrc>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	68db      	ldr	r3, [r3, #12]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d10e      	bne.n	8011cc2 <gos_gcpValidateHeader+0x4a>
        {
            // Validate protocol version
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	2b02      	cmp	r3, #2
 8011caa:	d106      	bne.n	8011cba <gos_gcpValidateHeader+0x42>
                pHeader->protocolMinor == GCP_PROTOCOL_VERSION_MINOR)
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	785b      	ldrb	r3, [r3, #1]
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d102      	bne.n	8011cba <gos_gcpValidateHeader+0x42>
            {
                validateSuccess = GOS_SUCCESS;
 8011cb4:	2355      	movs	r3, #85	; 0x55
 8011cb6:	73fb      	strb	r3, [r7, #15]
 8011cb8:	e006      	b.n	8011cc8 <gos_gcpValidateHeader+0x50>
            }
            else
            {
                // Protocol version error.
                *pAck = GCP_ACK_PV_ERROR;
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	2205      	movs	r2, #5
 8011cbe:	701a      	strb	r2, [r3, #0]
 8011cc0:	e002      	b.n	8011cc8 <gos_gcpValidateHeader+0x50>
            }
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	2202      	movs	r2, #2
 8011cc6:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 8011cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3710      	adds	r7, #16
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}

08011cd2 <gos_gcpValidateData>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateData (gos_gcpHeaderFrame_t* pHeader, void_t* pData, gos_gcpAck_t* pAck)
{
 8011cd2:	b580      	push	{r7, lr}
 8011cd4:	b086      	sub	sp, #24
 8011cd6:	af00      	add	r7, sp, #0
 8011cd8:	60f8      	str	r0, [r7, #12]
 8011cda:	60b9      	str	r1, [r7, #8]
 8011cdc:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 8011cde:	23ae      	movs	r3, #174	; 0xae
 8011ce0:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pHeader != NULL && pData != NULL && pAck != NULL)
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d016      	beq.n	8011d16 <gos_gcpValidateData+0x44>
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d013      	beq.n	8011d16 <gos_gcpValidateData+0x44>
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d010      	beq.n	8011d16 <gos_gcpValidateData+0x44>
    {
        // Check data CRC.
        if (gos_crcDriverGetCrc((u8_t*)pData, (u16_t)(pHeader->dataSize)) == pHeader->dataCrc)
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	88db      	ldrh	r3, [r3, #6]
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	68b8      	ldr	r0, [r7, #8]
 8011cfc:	f003 f928 	bl	8014f50 <gos_crcDriverGetCrc>
 8011d00:	4602      	mov	r2, r0
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	689b      	ldr	r3, [r3, #8]
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d102      	bne.n	8011d10 <gos_gcpValidateData+0x3e>
        {
            // Data OK.
            validateSuccess = GOS_SUCCESS;
 8011d0a:	2355      	movs	r3, #85	; 0x55
 8011d0c:	75fb      	strb	r3, [r7, #23]
 8011d0e:	e002      	b.n	8011d16 <gos_gcpValidateData+0x44>
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2202      	movs	r2, #2
 8011d14:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 8011d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3718      	adds	r7, #24
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_SUCCESS;
 8011d26:	2355      	movs	r3, #85	; 0x55
 8011d28:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 8011d32:	4b22      	ldr	r3, [pc, #136]	; (8011dbc <gos_messageInit+0x9c>)
 8011d34:	2200      	movs	r2, #0
 8011d36:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 8011d38:	4b21      	ldr	r3, [pc, #132]	; (8011dc0 <gos_messageInit+0xa0>)
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8011d3e:	2300      	movs	r3, #0
 8011d40:	71bb      	strb	r3, [r7, #6]
 8011d42:	e014      	b.n	8011d6e <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 8011d44:	79bb      	ldrb	r3, [r7, #6]
 8011d46:	4a1f      	ldr	r2, [pc, #124]	; (8011dc4 <gos_messageInit+0xa4>)
 8011d48:	2154      	movs	r1, #84	; 0x54
 8011d4a:	fb01 f303 	mul.w	r3, r1, r3
 8011d4e:	4413      	add	r3, r2
 8011d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d54:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 8011d56:	79bb      	ldrb	r3, [r7, #6]
 8011d58:	4a1a      	ldr	r2, [pc, #104]	; (8011dc4 <gos_messageInit+0xa4>)
 8011d5a:	2154      	movs	r1, #84	; 0x54
 8011d5c:	fb01 f303 	mul.w	r3, r1, r3
 8011d60:	4413      	add	r3, r2
 8011d62:	3302      	adds	r3, #2
 8011d64:	2200      	movs	r2, #0
 8011d66:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8011d68:	79bb      	ldrb	r3, [r7, #6]
 8011d6a:	3301      	adds	r3, #1
 8011d6c:	71bb      	strb	r3, [r7, #6]
 8011d6e:	79bb      	ldrb	r3, [r7, #6]
 8011d70:	2b07      	cmp	r3, #7
 8011d72:	d9e7      	bls.n	8011d44 <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8011d74:	2300      	movs	r3, #0
 8011d76:	717b      	strb	r3, [r7, #5]
 8011d78:	e009      	b.n	8011d8e <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8011d7a:	797b      	ldrb	r3, [r7, #5]
 8011d7c:	4a12      	ldr	r2, [pc, #72]	; (8011dc8 <gos_messageInit+0xa8>)
 8011d7e:	015b      	lsls	r3, r3, #5
 8011d80:	4413      	add	r3, r2
 8011d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d86:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8011d88:	797b      	ldrb	r3, [r7, #5]
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	717b      	strb	r3, [r7, #5]
 8011d8e:	797b      	ldrb	r3, [r7, #5]
 8011d90:	2b09      	cmp	r3, #9
 8011d92:	d9f2      	bls.n	8011d7a <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 8011d94:	480d      	ldr	r0, [pc, #52]	; (8011dcc <gos_messageInit+0xac>)
 8011d96:	f000 fa7d 	bl	8012294 <gos_mutexInit>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b55      	cmp	r3, #85	; 0x55
 8011d9e:	d106      	bne.n	8011dae <gos_messageInit+0x8e>
        gos_taskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) != GOS_SUCCESS)
 8011da0:	490b      	ldr	r1, [pc, #44]	; (8011dd0 <gos_messageInit+0xb0>)
 8011da2:	480c      	ldr	r0, [pc, #48]	; (8011dd4 <gos_messageInit+0xb4>)
 8011da4:	f7fd fcd4 	bl	800f750 <gos_taskRegister>
 8011da8:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 8011daa:	2b55      	cmp	r3, #85	; 0x55
 8011dac:	d001      	beq.n	8011db2 <gos_messageInit+0x92>
    {
        messageInitResult = GOS_ERROR;
 8011dae:	23ae      	movs	r3, #174	; 0xae
 8011db0:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 8011db2:	79fb      	ldrb	r3, [r7, #7]
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3708      	adds	r7, #8
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}
 8011dbc:	20005592 	.word	0x20005592
 8011dc0:	20005593 	.word	0x20005593
 8011dc4:	200051b0 	.word	0x200051b0
 8011dc8:	20005450 	.word	0x20005450
 8011dcc:	20005594 	.word	0x20005594
 8011dd0:	20005590 	.word	0x20005590
 8011dd4:	20001ec0 	.word	0x20001ec0

08011dd8 <gos_messageRx>:
GOS_INLINE gos_result_t gos_messageRx (
        gos_messageId_t* messageIdArray,
        gos_message_t*   target,
        gos_messageTimeout_t tmo
        )
{
 8011dd8:	b590      	push	{r4, r7, lr}
 8011dda:	b087      	sub	sp, #28
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60f8      	str	r0, [r7, #12]
 8011de0:	60b9      	str	r1, [r7, #8]
 8011de2:	4613      	mov	r3, r2
 8011de4:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t             messageRxResult    = GOS_ERROR;
 8011de6:	23ae      	movs	r3, #174	; 0xae
 8011de8:	75fb      	strb	r3, [r7, #23]
    gos_tid_t                currentTaskId      = GOS_INVALID_TASK_ID;
 8011dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011dee:	827b      	strh	r3, [r7, #18]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8011df0:	2300      	movs	r3, #0
 8011df2:	753b      	strb	r3, [r7, #20]
    gos_messageWaiterIndex_t index              = 0u;
 8011df4:	2300      	movs	r3, #0
 8011df6:	75bb      	strb	r3, [r7, #22]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	757b      	strb	r3, [r7, #21]
    gos_taskPrivilegeLevel_t privileges         = 0u;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	823b      	strh	r3, [r7, #16]

    /*
     * Function code.
     */
    if (target                                              != NULL &&
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	f000 80d9 	beq.w	8011fba <gos_messageRx+0x1e2>
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	f000 80d5 	beq.w	8011fba <gos_messageRx+0x1e2>
        messageIdArray                                      != NULL &&
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8011e10:	f04f 31ff 	mov.w	r1, #4294967295
 8011e14:	486d      	ldr	r0, [pc, #436]	; (8011fcc <gos_messageRx+0x1f4>)
 8011e16:	f000 fa57 	bl	80122c8 <gos_mutexLock>
 8011e1a:	4603      	mov	r3, r0
        messageIdArray                                      != NULL &&
 8011e1c:	2b55      	cmp	r3, #85	; 0x55
 8011e1e:	f040 80cc 	bne.w	8011fba <gos_messageRx+0x1e2>
    {
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 8011e22:	4b6b      	ldr	r3, [pc, #428]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	4a6b      	ldr	r2, [pc, #428]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011e28:	015b      	lsls	r3, r3, #5
 8011e2a:	4413      	add	r3, r2
 8011e2c:	881b      	ldrh	r3, [r3, #0]
 8011e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e32:	f040 80c2 	bne.w	8011fba <gos_messageRx+0x1e2>
            gos_taskGetCurrentId(&currentTaskId)       == GOS_SUCCESS)
 8011e36:	f107 0312 	add.w	r3, r7, #18
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7ff f85a 	bl	8010ef4 <gos_taskGetCurrentId>
 8011e40:	4603      	mov	r3, r0
        if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID &&
 8011e42:	2b55      	cmp	r3, #85	; 0x55
 8011e44:	f040 80b9 	bne.w	8011fba <gos_messageRx+0x1e2>
        {
            // Add waiter to array.
            messageWaiterArray[nextWaiterIndex].waiterTaskId   = currentTaskId;
 8011e48:	4b61      	ldr	r3, [pc, #388]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	8a79      	ldrh	r1, [r7, #18]
 8011e4e:	4a61      	ldr	r2, [pc, #388]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011e50:	015b      	lsls	r3, r3, #5
 8011e52:	4413      	add	r3, r2
 8011e54:	460a      	mov	r2, r1
 8011e56:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmo        = tmo;
 8011e58:	4b5d      	ldr	r3, [pc, #372]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	4a5d      	ldr	r2, [pc, #372]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011e5e:	015b      	lsls	r3, r3, #5
 8011e60:	4413      	add	r3, r2
 8011e62:	3302      	adds	r3, #2
 8011e64:	88fa      	ldrh	r2, [r7, #6]
 8011e66:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waitTmoCounter = 0u;
 8011e68:	4b59      	ldr	r3, [pc, #356]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	4a59      	ldr	r2, [pc, #356]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011e6e:	015b      	lsls	r3, r3, #5
 8011e70:	4413      	add	r3, r2
 8011e72:	3304      	adds	r3, #4
 8011e74:	2200      	movs	r2, #0
 8011e76:	801a      	strh	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].target         = target;
 8011e78:	4b55      	ldr	r3, [pc, #340]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011e7a:	781b      	ldrb	r3, [r3, #0]
 8011e7c:	4a55      	ldr	r2, [pc, #340]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011e7e:	015b      	lsls	r3, r3, #5
 8011e80:	4413      	add	r3, r2
 8011e82:	3318      	adds	r3, #24
 8011e84:	68ba      	ldr	r2, [r7, #8]
 8011e86:	601a      	str	r2, [r3, #0]
            messageWaiterArray[nextWaiterIndex].waiterServed   = GOS_FALSE;
 8011e88:	4b51      	ldr	r3, [pc, #324]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	4a51      	ldr	r2, [pc, #324]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011e8e:	015b      	lsls	r3, r3, #5
 8011e90:	4413      	add	r3, r2
 8011e92:	331c      	adds	r3, #28
 8011e94:	2249      	movs	r2, #73	; 0x49
 8011e96:	701a      	strb	r2, [r3, #0]

            (void_t*) memset(messageWaiterArray[nextWaiterIndex].messageIdArray, 0, CFG_MESSAGE_MAX_WAITER_IDS * sizeof(gos_messageId_t));
 8011e98:	4b4d      	ldr	r3, [pc, #308]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	015b      	lsls	r3, r3, #5
 8011e9e:	4a4d      	ldr	r2, [pc, #308]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011ea0:	4413      	add	r3, r2
 8011ea2:	3306      	adds	r3, #6
 8011ea4:	2210      	movs	r2, #16
 8011ea6:	2100      	movs	r1, #0
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f003 ff53 	bl	8015d54 <memset>

            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8011eae:	2300      	movs	r3, #0
 8011eb0:	757b      	strb	r3, [r7, #21]
 8011eb2:	e019      	b.n	8011ee8 <gos_messageRx+0x110>
            {
                if (messageIdArray[messageIdIndex] == 0u)
 8011eb4:	7d7b      	ldrb	r3, [r7, #21]
 8011eb6:	005b      	lsls	r3, r3, #1
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	4413      	add	r3, r2
 8011ebc:	881b      	ldrh	r3, [r3, #0]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d016      	beq.n	8011ef0 <gos_messageRx+0x118>
                {
                    break;
                }
                else
                {
                    messageWaiterArray[nextWaiterIndex].messageIdArray[messageIdIndex] = messageIdArray[messageIdIndex];
 8011ec2:	7d7b      	ldrb	r3, [r7, #21]
 8011ec4:	005b      	lsls	r3, r3, #1
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	441a      	add	r2, r3
 8011eca:	4b41      	ldr	r3, [pc, #260]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	461c      	mov	r4, r3
 8011ed0:	7d7b      	ldrb	r3, [r7, #21]
 8011ed2:	8810      	ldrh	r0, [r2, #0]
 8011ed4:	493f      	ldr	r1, [pc, #252]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011ed6:	0122      	lsls	r2, r4, #4
 8011ed8:	4413      	add	r3, r2
 8011eda:	005b      	lsls	r3, r3, #1
 8011edc:	440b      	add	r3, r1
 8011ede:	4602      	mov	r2, r0
 8011ee0:	80da      	strh	r2, [r3, #6]
            for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8011ee2:	7d7b      	ldrb	r3, [r7, #21]
 8011ee4:	3301      	adds	r3, #1
 8011ee6:	757b      	strb	r3, [r7, #21]
 8011ee8:	7d7b      	ldrb	r3, [r7, #21]
 8011eea:	2b07      	cmp	r3, #7
 8011eec:	d9e2      	bls.n	8011eb4 <gos_messageRx+0xdc>
 8011eee:	e000      	b.n	8011ef2 <gos_messageRx+0x11a>
                    break;
 8011ef0:	bf00      	nop
                }
            }

            messageWaiterIndex = nextWaiterIndex;
 8011ef2:	4b37      	ldr	r3, [pc, #220]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	753b      	strb	r3, [r7, #20]

            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 8011ef8:	2300      	movs	r3, #0
 8011efa:	75bb      	strb	r3, [r7, #22]
 8011efc:	e018      	b.n	8011f30 <gos_messageRx+0x158>
            {
                if (++nextWaiterIndex == CFG_MESSAGE_MAX_WAITERS)
 8011efe:	4b34      	ldr	r3, [pc, #208]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	3301      	adds	r3, #1
 8011f04:	b2da      	uxtb	r2, r3
 8011f06:	4b32      	ldr	r3, [pc, #200]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011f08:	701a      	strb	r2, [r3, #0]
 8011f0a:	4b31      	ldr	r3, [pc, #196]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	2b0a      	cmp	r3, #10
 8011f10:	d102      	bne.n	8011f18 <gos_messageRx+0x140>
                {
                    nextWaiterIndex = 0u;
 8011f12:	4b2f      	ldr	r3, [pc, #188]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011f14:	2200      	movs	r2, #0
 8011f16:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageWaiterArray[nextWaiterIndex].waiterTaskId == GOS_INVALID_TASK_ID)
 8011f18:	4b2d      	ldr	r3, [pc, #180]	; (8011fd0 <gos_messageRx+0x1f8>)
 8011f1a:	781b      	ldrb	r3, [r3, #0]
 8011f1c:	4a2d      	ldr	r2, [pc, #180]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011f1e:	015b      	lsls	r3, r3, #5
 8011f20:	4413      	add	r3, r2
 8011f22:	881b      	ldrh	r3, [r3, #0]
 8011f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f28:	d006      	beq.n	8011f38 <gos_messageRx+0x160>
            for (index = 0u; index < CFG_MESSAGE_MAX_WAITERS; index++)
 8011f2a:	7dbb      	ldrb	r3, [r7, #22]
 8011f2c:	3301      	adds	r3, #1
 8011f2e:	75bb      	strb	r3, [r7, #22]
 8011f30:	7dbb      	ldrb	r3, [r7, #22]
 8011f32:	2b09      	cmp	r3, #9
 8011f34:	d9e3      	bls.n	8011efe <gos_messageRx+0x126>
 8011f36:	e000      	b.n	8011f3a <gos_messageRx+0x162>
                {
                    break;
 8011f38:	bf00      	nop
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 8011f3a:	4824      	ldr	r0, [pc, #144]	; (8011fcc <gos_messageRx+0x1f4>)
 8011f3c:	f000 faca 	bl	80124d4 <gos_mutexUnlock>

            // Block task (to be unblocked by daemon).
            (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 8011f40:	8a7b      	ldrh	r3, [r7, #18]
 8011f42:	f107 0210 	add.w	r2, r7, #16
 8011f46:	4611      	mov	r1, r2
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7fe ff2b 	bl	8010da4 <gos_taskGetPrivileges>

            if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8011f4e:	8a3b      	ldrh	r3, [r7, #16]
 8011f50:	b21b      	sxth	r3, r3
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	db12      	blt.n	8011f7c <gos_messageRx+0x1a4>
            {
                (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8011f56:	8a7b      	ldrh	r3, [r7, #18]
 8011f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7fe fdbd 	bl	8010adc <gos_taskAddPrivilege>
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 8011f62:	8a7b      	ldrh	r3, [r7, #18]
 8011f64:	f04f 31ff 	mov.w	r1, #4294967295
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fe f89f 	bl	80100ac <gos_taskBlock>
                (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8011f6e:	8a7b      	ldrh	r3, [r7, #18]
 8011f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7fe fe29 	bl	8010bcc <gos_taskRemovePrivilege>
 8011f7a:	e005      	b.n	8011f88 <gos_messageRx+0x1b0>
            }
            else
            {
                (void_t) gos_taskBlock(currentTaskId, GOS_TASK_MAX_BLOCK_TIME_MS);
 8011f7c:	8a7b      	ldrh	r3, [r7, #18]
 8011f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fe f892 	bl	80100ac <gos_taskBlock>
            }

            // Task unblocked, check TMO.
            if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_TRUE)
 8011f88:	7d3b      	ldrb	r3, [r7, #20]
 8011f8a:	4a12      	ldr	r2, [pc, #72]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011f8c:	015b      	lsls	r3, r3, #5
 8011f8e:	4413      	add	r3, r2
 8011f90:	331c      	adds	r3, #28
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	2b36      	cmp	r3, #54	; 0x36
 8011f96:	d102      	bne.n	8011f9e <gos_messageRx+0x1c6>
            {
                // Message received successfully.
                messageRxResult = GOS_SUCCESS;
 8011f98:	2355      	movs	r3, #85	; 0x55
 8011f9a:	75fb      	strb	r3, [r7, #23]
 8011f9c:	e006      	b.n	8011fac <gos_messageRx+0x1d4>
            }
            else
            {
                // Remove waiter.
                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8011f9e:	7d3b      	ldrb	r3, [r7, #20]
 8011fa0:	4a0c      	ldr	r2, [pc, #48]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011fa2:	015b      	lsls	r3, r3, #5
 8011fa4:	4413      	add	r3, r2
 8011fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011faa:	801a      	strh	r2, [r3, #0]
            }

            // Reset flag.
            messageWaiterArray[messageWaiterIndex].waiterServed = GOS_FALSE;
 8011fac:	7d3b      	ldrb	r3, [r7, #20]
 8011fae:	4a09      	ldr	r2, [pc, #36]	; (8011fd4 <gos_messageRx+0x1fc>)
 8011fb0:	015b      	lsls	r3, r3, #5
 8011fb2:	4413      	add	r3, r2
 8011fb4:	331c      	adds	r3, #28
 8011fb6:	2249      	movs	r2, #73	; 0x49
 8011fb8:	701a      	strb	r2, [r3, #0]
        }
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 8011fba:	4804      	ldr	r0, [pc, #16]	; (8011fcc <gos_messageRx+0x1f4>)
 8011fbc:	f000 fa8a 	bl	80124d4 <gos_mutexUnlock>

    return messageRxResult;
 8011fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	371c      	adds	r7, #28
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd90      	pop	{r4, r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	20005594 	.word	0x20005594
 8011fd0:	20005593 	.word	0x20005593
 8011fd4:	20005450 	.word	0x20005450

08011fd8 <gos_messageTx>:
 * Function: gos_messageTx
 */
GOS_INLINE gos_result_t gos_messageTx (
        gos_message_t* message
        )
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b084      	sub	sp, #16
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t       messageTxResult = GOS_ERROR;
 8011fe0:	23ae      	movs	r3, #174	; 0xae
 8011fe2:	73fb      	strb	r3, [r7, #15]
    gos_messageIndex_t msgIndex        = 0u;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	73bb      	strb	r3, [r7, #14]

    /**
     * Function code.
     */
    if (message                                             != NULL &&
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d052      	beq.n	8012094 <gos_messageTx+0xbc>
        message->messageId                                  != GOS_MESSAGE_INVALID_ID &&
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	881b      	ldrh	r3, [r3, #0]
    if (message                                             != NULL &&
 8011ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ff6:	4293      	cmp	r3, r2
 8011ff8:	d04c      	beq.n	8012094 <gos_messageTx+0xbc>
        message->messageSize                                <  CFG_MESSAGE_MAX_LENGTH &&
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	789b      	ldrb	r3, [r3, #2]
        message->messageId                                  != GOS_MESSAGE_INVALID_ID &&
 8011ffe:	2b4f      	cmp	r3, #79	; 0x4f
 8012000:	d848      	bhi.n	8012094 <gos_messageTx+0xbc>
        gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8012002:	f04f 31ff 	mov.w	r1, #4294967295
 8012006:	4827      	ldr	r0, [pc, #156]	; (80120a4 <gos_messageTx+0xcc>)
 8012008:	f000 f95e 	bl	80122c8 <gos_mutexLock>
 801200c:	4603      	mov	r3, r0
        message->messageSize                                <  CFG_MESSAGE_MAX_LENGTH &&
 801200e:	2b55      	cmp	r3, #85	; 0x55
 8012010:	d140      	bne.n	8012094 <gos_messageTx+0xbc>
    {
        if (messageArray[nextMessageIndex].messageId == GOS_MESSAGE_INVALID_ID)
 8012012:	4b25      	ldr	r3, [pc, #148]	; (80120a8 <gos_messageTx+0xd0>)
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	4619      	mov	r1, r3
 8012018:	4a24      	ldr	r2, [pc, #144]	; (80120ac <gos_messageTx+0xd4>)
 801201a:	2354      	movs	r3, #84	; 0x54
 801201c:	fb01 f303 	mul.w	r3, r1, r3
 8012020:	4413      	add	r3, r2
 8012022:	881b      	ldrh	r3, [r3, #0]
 8012024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012028:	4293      	cmp	r3, r2
 801202a:	d133      	bne.n	8012094 <gos_messageTx+0xbc>
        {
            (void_t*) memcpy((void_t*)&messageArray[nextMessageIndex], (void_t*)message, sizeof(*message));
 801202c:	4b1e      	ldr	r3, [pc, #120]	; (80120a8 <gos_messageTx+0xd0>)
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	461a      	mov	r2, r3
 8012032:	2354      	movs	r3, #84	; 0x54
 8012034:	fb02 f303 	mul.w	r3, r2, r3
 8012038:	4a1c      	ldr	r2, [pc, #112]	; (80120ac <gos_messageTx+0xd4>)
 801203a:	4413      	add	r3, r2
 801203c:	2254      	movs	r2, #84	; 0x54
 801203e:	6879      	ldr	r1, [r7, #4]
 8012040:	4618      	mov	r0, r3
 8012042:	f003 ff0e 	bl	8015e62 <memcpy>

            messageTxResult = GOS_SUCCESS;
 8012046:	2355      	movs	r3, #85	; 0x55
 8012048:	73fb      	strb	r3, [r7, #15]

            for (msgIndex = 0u; msgIndex < CFG_MESSAGE_MAX_NUMBER; msgIndex++)
 801204a:	2300      	movs	r3, #0
 801204c:	73bb      	strb	r3, [r7, #14]
 801204e:	e01c      	b.n	801208a <gos_messageTx+0xb2>
            {
                if (++nextMessageIndex == CFG_MESSAGE_MAX_NUMBER)
 8012050:	4b15      	ldr	r3, [pc, #84]	; (80120a8 <gos_messageTx+0xd0>)
 8012052:	781b      	ldrb	r3, [r3, #0]
 8012054:	3301      	adds	r3, #1
 8012056:	b2da      	uxtb	r2, r3
 8012058:	4b13      	ldr	r3, [pc, #76]	; (80120a8 <gos_messageTx+0xd0>)
 801205a:	701a      	strb	r2, [r3, #0]
 801205c:	4b12      	ldr	r3, [pc, #72]	; (80120a8 <gos_messageTx+0xd0>)
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	2b08      	cmp	r3, #8
 8012062:	d102      	bne.n	801206a <gos_messageTx+0x92>
                {
                    nextMessageIndex = 0u;
 8012064:	4b10      	ldr	r3, [pc, #64]	; (80120a8 <gos_messageTx+0xd0>)
 8012066:	2200      	movs	r2, #0
 8012068:	701a      	strb	r2, [r3, #0]
                else
                {
                    // Nothing to do.
                }

                if (messageArray[nextMessageIndex].messageId == GOS_MESSAGE_INVALID_ID)
 801206a:	4b0f      	ldr	r3, [pc, #60]	; (80120a8 <gos_messageTx+0xd0>)
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	4619      	mov	r1, r3
 8012070:	4a0e      	ldr	r2, [pc, #56]	; (80120ac <gos_messageTx+0xd4>)
 8012072:	2354      	movs	r3, #84	; 0x54
 8012074:	fb01 f303 	mul.w	r3, r1, r3
 8012078:	4413      	add	r3, r2
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012080:	4293      	cmp	r3, r2
 8012082:	d006      	beq.n	8012092 <gos_messageTx+0xba>
            for (msgIndex = 0u; msgIndex < CFG_MESSAGE_MAX_NUMBER; msgIndex++)
 8012084:	7bbb      	ldrb	r3, [r7, #14]
 8012086:	3301      	adds	r3, #1
 8012088:	73bb      	strb	r3, [r7, #14]
 801208a:	7bbb      	ldrb	r3, [r7, #14]
 801208c:	2b07      	cmp	r3, #7
 801208e:	d9df      	bls.n	8012050 <gos_messageTx+0x78>
 8012090:	e000      	b.n	8012094 <gos_messageTx+0xbc>
                {
                    break;
 8012092:	bf00      	nop
    {
        // Nothing to do.
    }

    // Unlock message mutex.
    (void_t) gos_mutexUnlock(&messageMutex);
 8012094:	4803      	ldr	r0, [pc, #12]	; (80120a4 <gos_messageTx+0xcc>)
 8012096:	f000 fa1d 	bl	80124d4 <gos_mutexUnlock>

    return messageTxResult;
 801209a:	7bfb      	ldrb	r3, [r7, #15]
}
 801209c:	4618      	mov	r0, r3
 801209e:	3710      	adds	r7, #16
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	20005594 	.word	0x20005594
 80120a8:	20005592 	.word	0x20005592
 80120ac:	200051b0 	.word	0x200051b0

080120b0 <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 80120b0:	b590      	push	{r4, r7, lr}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 80120b6:	2300      	movs	r3, #0
 80120b8:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 80120ba:	2300      	movs	r3, #0
 80120bc:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 80120be:	2300      	movs	r3, #0
 80120c0:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 80120c2:	f04f 31ff 	mov.w	r1, #4294967295
 80120c6:	4870      	ldr	r0, [pc, #448]	; (8012288 <gos_messageDaemonTask+0x1d8>)
 80120c8:	f000 f8fe 	bl	80122c8 <gos_mutexLock>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b55      	cmp	r3, #85	; 0x55
 80120d0:	f040 80d5 	bne.w	801227e <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 80120d4:	2300      	movs	r3, #0
 80120d6:	71bb      	strb	r3, [r7, #6]
 80120d8:	e0ca      	b.n	8012270 <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 80120da:	79bb      	ldrb	r3, [r7, #6]
 80120dc:	4a6b      	ldr	r2, [pc, #428]	; (801228c <gos_messageDaemonTask+0x1dc>)
 80120de:	015b      	lsls	r3, r3, #5
 80120e0:	4413      	add	r3, r2
 80120e2:	881b      	ldrh	r3, [r3, #0]
 80120e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120e8:	f000 80bf 	beq.w	801226a <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 80120ec:	2300      	movs	r3, #0
 80120ee:	717b      	strb	r3, [r7, #5]
 80120f0:	e077      	b.n	80121e2 <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 80120f2:	2300      	movs	r3, #0
 80120f4:	71fb      	strb	r3, [r7, #7]
 80120f6:	e06e      	b.n	80121d6 <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 80120f8:	79ba      	ldrb	r2, [r7, #6]
 80120fa:	797b      	ldrb	r3, [r7, #5]
 80120fc:	4963      	ldr	r1, [pc, #396]	; (801228c <gos_messageDaemonTask+0x1dc>)
 80120fe:	0112      	lsls	r2, r2, #4
 8012100:	4413      	add	r3, r2
 8012102:	005b      	lsls	r3, r3, #1
 8012104:	440b      	add	r3, r1
 8012106:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 8012108:	79fb      	ldrb	r3, [r7, #7]
 801210a:	4961      	ldr	r1, [pc, #388]	; (8012290 <gos_messageDaemonTask+0x1e0>)
 801210c:	2054      	movs	r0, #84	; 0x54
 801210e:	fb00 f303 	mul.w	r3, r0, r3
 8012112:	440b      	add	r3, r1
 8012114:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8012116:	429a      	cmp	r2, r3
 8012118:	d15a      	bne.n	80121d0 <gos_messageDaemonTask+0x120>
                            {
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 801211a:	79bb      	ldrb	r3, [r7, #6]
 801211c:	4a5b      	ldr	r2, [pc, #364]	; (801228c <gos_messageDaemonTask+0x1dc>)
 801211e:	015b      	lsls	r3, r3, #5
 8012120:	4413      	add	r3, r2
 8012122:	3318      	adds	r3, #24
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 8012128:	79fb      	ldrb	r3, [r7, #7]
 801212a:	2254      	movs	r2, #84	; 0x54
 801212c:	fb02 f303 	mul.w	r3, r2, r3
 8012130:	4a57      	ldr	r2, [pc, #348]	; (8012290 <gos_messageDaemonTask+0x1e0>)
 8012132:	4413      	add	r3, r2
 8012134:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 8012136:	79fb      	ldrb	r3, [r7, #7]
 8012138:	4a55      	ldr	r2, [pc, #340]	; (8012290 <gos_messageDaemonTask+0x1e0>)
 801213a:	2454      	movs	r4, #84	; 0x54
 801213c:	fb04 f303 	mul.w	r3, r4, r3
 8012140:	4413      	add	r3, r2
 8012142:	3302      	adds	r3, #2
 8012144:	781b      	ldrb	r3, [r3, #0]
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 8012146:	461a      	mov	r2, r3
 8012148:	f003 fe8b 	bl	8015e62 <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize  = messageArray[messageIndex].messageSize;
 801214c:	79fa      	ldrb	r2, [r7, #7]
 801214e:	79bb      	ldrb	r3, [r7, #6]
 8012150:	494e      	ldr	r1, [pc, #312]	; (801228c <gos_messageDaemonTask+0x1dc>)
 8012152:	015b      	lsls	r3, r3, #5
 8012154:	440b      	add	r3, r1
 8012156:	3318      	adds	r3, #24
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	494d      	ldr	r1, [pc, #308]	; (8012290 <gos_messageDaemonTask+0x1e0>)
 801215c:	2054      	movs	r0, #84	; 0x54
 801215e:	fb00 f202 	mul.w	r2, r0, r2
 8012162:	440a      	add	r2, r1
 8012164:	3202      	adds	r2, #2
 8012166:	7812      	ldrb	r2, [r2, #0]
 8012168:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 801216a:	79fa      	ldrb	r2, [r7, #7]
 801216c:	79bb      	ldrb	r3, [r7, #6]
 801216e:	4947      	ldr	r1, [pc, #284]	; (801228c <gos_messageDaemonTask+0x1dc>)
 8012170:	015b      	lsls	r3, r3, #5
 8012172:	440b      	add	r3, r1
 8012174:	3318      	adds	r3, #24
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	4945      	ldr	r1, [pc, #276]	; (8012290 <gos_messageDaemonTask+0x1e0>)
 801217a:	2054      	movs	r0, #84	; 0x54
 801217c:	fb00 f202 	mul.w	r2, r0, r2
 8012180:	440a      	add	r2, r1
 8012182:	8812      	ldrh	r2, [r2, #0]
 8012184:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 8012186:	79bb      	ldrb	r3, [r7, #6]
 8012188:	4a40      	ldr	r2, [pc, #256]	; (801228c <gos_messageDaemonTask+0x1dc>)
 801218a:	015b      	lsls	r3, r3, #5
 801218c:	4413      	add	r3, r2
 801218e:	881b      	ldrh	r3, [r3, #0]
 8012190:	4618      	mov	r0, r3
 8012192:	f7fe f89d 	bl	80102d0 <gos_taskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 8012196:	79fb      	ldrb	r3, [r7, #7]
 8012198:	4a3d      	ldr	r2, [pc, #244]	; (8012290 <gos_messageDaemonTask+0x1e0>)
 801219a:	2154      	movs	r1, #84	; 0x54
 801219c:	fb01 f303 	mul.w	r3, r1, r3
 80121a0:	4413      	add	r3, r2
 80121a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121a6:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 80121a8:	79bb      	ldrb	r3, [r7, #6]
 80121aa:	4a38      	ldr	r2, [pc, #224]	; (801228c <gos_messageDaemonTask+0x1dc>)
 80121ac:	015b      	lsls	r3, r3, #5
 80121ae:	4413      	add	r3, r2
 80121b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80121b4:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 80121b6:	79bb      	ldrb	r3, [r7, #6]
 80121b8:	4a34      	ldr	r2, [pc, #208]	; (801228c <gos_messageDaemonTask+0x1dc>)
 80121ba:	015b      	lsls	r3, r3, #5
 80121bc:	4413      	add	r3, r2
 80121be:	331c      	adds	r3, #28
 80121c0:	2236      	movs	r2, #54	; 0x36
 80121c2:	701a      	strb	r2, [r3, #0]

                                messageIndex       = CFG_MESSAGE_MAX_NUMBER;
 80121c4:	2308      	movs	r3, #8
 80121c6:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex     = CFG_MESSAGE_MAX_WAITER_IDS;
 80121c8:	2308      	movs	r3, #8
 80121ca:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 80121cc:	230a      	movs	r3, #10
 80121ce:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 80121d0:	79fb      	ldrb	r3, [r7, #7]
 80121d2:	3301      	adds	r3, #1
 80121d4:	71fb      	strb	r3, [r7, #7]
 80121d6:	79fb      	ldrb	r3, [r7, #7]
 80121d8:	2b07      	cmp	r3, #7
 80121da:	d98d      	bls.n	80120f8 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 80121dc:	797b      	ldrb	r3, [r7, #5]
 80121de:	3301      	adds	r3, #1
 80121e0:	717b      	strb	r3, [r7, #5]
 80121e2:	797b      	ldrb	r3, [r7, #5]
 80121e4:	2b07      	cmp	r3, #7
 80121e6:	d984      	bls.n	80120f2 <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 80121e8:	79bb      	ldrb	r3, [r7, #6]
 80121ea:	4a28      	ldr	r2, [pc, #160]	; (801228c <gos_messageDaemonTask+0x1dc>)
 80121ec:	015b      	lsls	r3, r3, #5
 80121ee:	4413      	add	r3, r2
 80121f0:	331c      	adds	r3, #28
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	2b49      	cmp	r3, #73	; 0x49
 80121f6:	d138      	bne.n	801226a <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 80121f8:	79bb      	ldrb	r3, [r7, #6]
 80121fa:	4a24      	ldr	r2, [pc, #144]	; (801228c <gos_messageDaemonTask+0x1dc>)
 80121fc:	015b      	lsls	r3, r3, #5
 80121fe:	4413      	add	r3, r2
 8012200:	3302      	adds	r3, #2
 8012202:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8012204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012208:	4293      	cmp	r3, r2
 801220a:	d02e      	beq.n	801226a <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 801220c:	79bb      	ldrb	r3, [r7, #6]
 801220e:	491f      	ldr	r1, [pc, #124]	; (801228c <gos_messageDaemonTask+0x1dc>)
 8012210:	015a      	lsls	r2, r3, #5
 8012212:	440a      	add	r2, r1
 8012214:	3204      	adds	r2, #4
 8012216:	8812      	ldrh	r2, [r2, #0]
 8012218:	3201      	adds	r2, #1
 801221a:	b291      	uxth	r1, r2
 801221c:	4a1b      	ldr	r2, [pc, #108]	; (801228c <gos_messageDaemonTask+0x1dc>)
 801221e:	015b      	lsls	r3, r3, #5
 8012220:	4413      	add	r3, r2
 8012222:	3304      	adds	r3, #4
 8012224:	460a      	mov	r2, r1
 8012226:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 8012228:	79bb      	ldrb	r3, [r7, #6]
 801222a:	4a18      	ldr	r2, [pc, #96]	; (801228c <gos_messageDaemonTask+0x1dc>)
 801222c:	015b      	lsls	r3, r3, #5
 801222e:	4413      	add	r3, r2
 8012230:	3304      	adds	r3, #4
 8012232:	881b      	ldrh	r3, [r3, #0]
 8012234:	461a      	mov	r2, r3
 8012236:	2332      	movs	r3, #50	; 0x32
 8012238:	fb02 f303 	mul.w	r3, r2, r3
                             messageWaiterArray[messageWaiterIndex].waitTmo)
 801223c:	79ba      	ldrb	r2, [r7, #6]
 801223e:	4913      	ldr	r1, [pc, #76]	; (801228c <gos_messageDaemonTask+0x1dc>)
 8012240:	0152      	lsls	r2, r2, #5
 8012242:	440a      	add	r2, r1
 8012244:	3202      	adds	r2, #2
 8012246:	8812      	ldrh	r2, [r2, #0]
                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 8012248:	4293      	cmp	r3, r2
 801224a:	d90e      	bls.n	801226a <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 801224c:	79bb      	ldrb	r3, [r7, #6]
 801224e:	4a0f      	ldr	r2, [pc, #60]	; (801228c <gos_messageDaemonTask+0x1dc>)
 8012250:	015b      	lsls	r3, r3, #5
 8012252:	4413      	add	r3, r2
 8012254:	881b      	ldrh	r3, [r3, #0]
 8012256:	4618      	mov	r0, r3
 8012258:	f7fe f83a 	bl	80102d0 <gos_taskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 801225c:	79bb      	ldrb	r3, [r7, #6]
 801225e:	4a0b      	ldr	r2, [pc, #44]	; (801228c <gos_messageDaemonTask+0x1dc>)
 8012260:	015b      	lsls	r3, r3, #5
 8012262:	4413      	add	r3, r2
 8012264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012268:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 801226a:	79bb      	ldrb	r3, [r7, #6]
 801226c:	3301      	adds	r3, #1
 801226e:	71bb      	strb	r3, [r7, #6]
 8012270:	79bb      	ldrb	r3, [r7, #6]
 8012272:	2b09      	cmp	r3, #9
 8012274:	f67f af31 	bls.w	80120da <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 8012278:	4803      	ldr	r0, [pc, #12]	; (8012288 <gos_messageDaemonTask+0x1d8>)
 801227a:	f000 f92b 	bl	80124d4 <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 801227e:	2032      	movs	r0, #50	; 0x32
 8012280:	f7fd fbf8 	bl	800fa74 <gos_taskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8012284:	e71d      	b.n	80120c2 <gos_messageDaemonTask+0x12>
 8012286:	bf00      	nop
 8012288:	20005594 	.word	0x20005594
 801228c:	20005450 	.word	0x20005450
 8012290:	200051b0 	.word	0x200051b0

08012294 <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 8012294:	b480      	push	{r7}
 8012296:	b085      	sub	sp, #20
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 801229c:	23ae      	movs	r3, #174	; 0xae
 801229e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d008      	beq.n	80122b8 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	22d2      	movs	r2, #210	; 0xd2
 80122aa:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80122b2:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 80122b4:	2355      	movs	r3, #85	; 0x55
 80122b6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 80122b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3714      	adds	r7, #20
 80122be:	46bd      	mov	sp, r7
 80122c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c4:	4770      	bx	lr
	...

080122c8 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b086      	sub	sp, #24
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t   lockResult   = GOS_ERROR;
 80122d2:	23ae      	movs	r3, #174	; 0xae
 80122d4:	75fb      	strb	r3, [r7, #23]
    u32_t          sysTickStart = gos_kernelGetSysTicks();
 80122d6:	f7fc fa1d 	bl	800e714 <gos_kernelGetSysTicks>
 80122da:	60f8      	str	r0, [r7, #12]

#if CFG_USE_PRIO_INHERITANCE
    gos_tid_t      currentId    = GOS_INVALID_TASK_ID;
 80122dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122e0:	817b      	strh	r3, [r7, #10]
    gos_tid_t      ownerId      = GOS_INVALID_TASK_ID;
 80122e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122e6:	82bb      	strh	r3, [r7, #20]
    gos_taskPrio_t ownerPrio    = GOS_TASK_IDLE_PRIO;
 80122e8:	23ff      	movs	r3, #255	; 0xff
 80122ea:	727b      	strb	r3, [r7, #9]
    gos_taskPrio_t currentPrio  = GOS_TASK_IDLE_PRIO;
 80122ec:	23ff      	movs	r3, #255	; 0xff
 80122ee:	723b      	strb	r3, [r7, #8]
    bool_t         prioChanged  = GOS_FALSE;
 80122f0:	2349      	movs	r3, #73	; 0x49
 80122f2:	74fb      	strb	r3, [r7, #19]
#endif

    /*
     * Function code.
     */
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 80122f4:	e0ce      	b.n	8012494 <gos_mutexLock+0x1cc>
    {
        GOS_ATOMIC_ENTER
 80122f6:	4b73      	ldr	r3, [pc, #460]	; (80124c4 <gos_mutexLock+0x1fc>)
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d108      	bne.n	8012310 <gos_mutexLock+0x48>
 80122fe:	b672      	cpsid	i
 8012300:	f3ef 8310 	mrs	r3, PRIMASK
 8012304:	4a70      	ldr	r2, [pc, #448]	; (80124c8 <gos_mutexLock+0x200>)
 8012306:	6013      	str	r3, [r2, #0]
 8012308:	f3bf 8f4f 	dsb	sy
 801230c:	f3bf 8f6f 	isb	sy
 8012310:	4b6c      	ldr	r3, [pc, #432]	; (80124c4 <gos_mutexLock+0x1fc>)
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	3301      	adds	r3, #1
 8012316:	b2da      	uxtb	r2, r3
 8012318:	4b6a      	ldr	r3, [pc, #424]	; (80124c4 <gos_mutexLock+0x1fc>)
 801231a:	701a      	strb	r2, [r3, #0]
 801231c:	4b6b      	ldr	r3, [pc, #428]	; (80124cc <gos_mutexLock+0x204>)
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	3301      	adds	r3, #1
 8012322:	b2da      	uxtb	r2, r3
 8012324:	4b69      	ldr	r3, [pc, #420]	; (80124cc <gos_mutexLock+0x204>)
 8012326:	701a      	strb	r2, [r3, #0]

        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	781b      	ldrb	r3, [r3, #0]
 801232c:	2bd2      	cmp	r3, #210	; 0xd2
 801232e:	d13b      	bne.n	80123a8 <gos_mutexLock+0xe0>
        {
#if CFG_USE_PRIO_INHERITANCE
            // Restore priority if it was changed.
            if (prioChanged == GOS_TRUE)
 8012330:	7cfb      	ldrb	r3, [r7, #19]
 8012332:	2b36      	cmp	r3, #54	; 0x36
 8012334:	d12d      	bne.n	8012392 <gos_mutexLock+0xca>
            {
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 8012336:	4b66      	ldr	r3, [pc, #408]	; (80124d0 <gos_mutexLock+0x208>)
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d105      	bne.n	801234a <gos_mutexLock+0x82>
 801233e:	4b63      	ldr	r3, [pc, #396]	; (80124cc <gos_mutexLock+0x204>)
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	3301      	adds	r3, #1
 8012344:	b2da      	uxtb	r2, r3
 8012346:	4b61      	ldr	r3, [pc, #388]	; (80124cc <gos_mutexLock+0x204>)
 8012348:	701a      	strb	r2, [r3, #0]
 801234a:	4b61      	ldr	r3, [pc, #388]	; (80124d0 <gos_mutexLock+0x208>)
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	3301      	adds	r3, #1
 8012350:	b2da      	uxtb	r2, r3
 8012352:	4b5f      	ldr	r3, [pc, #380]	; (80124d0 <gos_mutexLock+0x208>)
 8012354:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(ownerId, ownerPrio);
 8012356:	7a7a      	ldrb	r2, [r7, #9]
 8012358:	8abb      	ldrh	r3, [r7, #20]
 801235a:	4611      	mov	r1, r2
 801235c:	4618      	mov	r0, r3
 801235e:	f7fe f9c5 	bl	80106ec <gos_taskSetPriority>
                GOS_ISR_EXIT
 8012362:	4b5b      	ldr	r3, [pc, #364]	; (80124d0 <gos_mutexLock+0x208>)
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d005      	beq.n	8012376 <gos_mutexLock+0xae>
 801236a:	4b59      	ldr	r3, [pc, #356]	; (80124d0 <gos_mutexLock+0x208>)
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	3b01      	subs	r3, #1
 8012370:	b2da      	uxtb	r2, r3
 8012372:	4b57      	ldr	r3, [pc, #348]	; (80124d0 <gos_mutexLock+0x208>)
 8012374:	701a      	strb	r2, [r3, #0]
 8012376:	4b56      	ldr	r3, [pc, #344]	; (80124d0 <gos_mutexLock+0x208>)
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d109      	bne.n	8012392 <gos_mutexLock+0xca>
 801237e:	4b53      	ldr	r3, [pc, #332]	; (80124cc <gos_mutexLock+0x204>)
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d005      	beq.n	8012392 <gos_mutexLock+0xca>
 8012386:	4b51      	ldr	r3, [pc, #324]	; (80124cc <gos_mutexLock+0x204>)
 8012388:	781b      	ldrb	r3, [r3, #0]
 801238a:	3b01      	subs	r3, #1
 801238c:	b2da      	uxtb	r2, r3
 801238e:	4b4f      	ldr	r3, [pc, #316]	; (80124cc <gos_mutexLock+0x204>)
 8012390:	701a      	strb	r2, [r3, #0]
            else
            {
                // Priority was not changed.
            }
#endif
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	226b      	movs	r2, #107	; 0x6b
 8012396:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskGetCurrentId(&(pMutex->owner));
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	3302      	adds	r3, #2
 801239c:	4618      	mov	r0, r3
 801239e:	f7fe fda9 	bl	8010ef4 <gos_taskGetCurrentId>

            lockResult = GOS_SUCCESS;
 80123a2:	2355      	movs	r3, #85	; 0x55
 80123a4:	75fb      	strb	r3, [r7, #23]
 80123a6:	e04b      	b.n	8012440 <gos_mutexLock+0x178>
        {
            // Mutex is locked.

#if CFG_USE_PRIO_INHERITANCE
            // Check priority.
            (void_t) gos_taskGetPriority(pMutex->owner, &ownerPrio);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	885b      	ldrh	r3, [r3, #2]
 80123ac:	f107 0209 	add.w	r2, r7, #9
 80123b0:	4611      	mov	r1, r2
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7fe fb22 	bl	80109fc <gos_taskGetPriority>
            (void_t) gos_taskGetCurrentId(&currentId);
 80123b8:	f107 030a 	add.w	r3, r7, #10
 80123bc:	4618      	mov	r0, r3
 80123be:	f7fe fd99 	bl	8010ef4 <gos_taskGetCurrentId>
            (void_t) gos_taskGetPriority(currentId, &currentPrio);
 80123c2:	897b      	ldrh	r3, [r7, #10]
 80123c4:	f107 0208 	add.w	r2, r7, #8
 80123c8:	4611      	mov	r1, r2
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7fe fb16 	bl	80109fc <gos_taskGetPriority>
            ownerId = pMutex->owner;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	885b      	ldrh	r3, [r3, #2]
 80123d4:	82bb      	strh	r3, [r7, #20]

            // If the current task has a higher priority,
            // then modify the owner priority.
            if (currentPrio < ownerPrio)
 80123d6:	7a3a      	ldrb	r2, [r7, #8]
 80123d8:	7a7b      	ldrb	r3, [r7, #9]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d230      	bcs.n	8012440 <gos_mutexLock+0x178>
            {
                // Add temporary priority.
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 80123de:	4b3c      	ldr	r3, [pc, #240]	; (80124d0 <gos_mutexLock+0x208>)
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d105      	bne.n	80123f2 <gos_mutexLock+0x12a>
 80123e6:	4b39      	ldr	r3, [pc, #228]	; (80124cc <gos_mutexLock+0x204>)
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	3301      	adds	r3, #1
 80123ec:	b2da      	uxtb	r2, r3
 80123ee:	4b37      	ldr	r3, [pc, #220]	; (80124cc <gos_mutexLock+0x204>)
 80123f0:	701a      	strb	r2, [r3, #0]
 80123f2:	4b37      	ldr	r3, [pc, #220]	; (80124d0 <gos_mutexLock+0x208>)
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	3301      	adds	r3, #1
 80123f8:	b2da      	uxtb	r2, r3
 80123fa:	4b35      	ldr	r3, [pc, #212]	; (80124d0 <gos_mutexLock+0x208>)
 80123fc:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(pMutex->owner, currentPrio);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	885b      	ldrh	r3, [r3, #2]
 8012402:	7a3a      	ldrb	r2, [r7, #8]
 8012404:	4611      	mov	r1, r2
 8012406:	4618      	mov	r0, r3
 8012408:	f7fe f970 	bl	80106ec <gos_taskSetPriority>
                GOS_ISR_EXIT
 801240c:	4b30      	ldr	r3, [pc, #192]	; (80124d0 <gos_mutexLock+0x208>)
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d005      	beq.n	8012420 <gos_mutexLock+0x158>
 8012414:	4b2e      	ldr	r3, [pc, #184]	; (80124d0 <gos_mutexLock+0x208>)
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	3b01      	subs	r3, #1
 801241a:	b2da      	uxtb	r2, r3
 801241c:	4b2c      	ldr	r3, [pc, #176]	; (80124d0 <gos_mutexLock+0x208>)
 801241e:	701a      	strb	r2, [r3, #0]
 8012420:	4b2b      	ldr	r3, [pc, #172]	; (80124d0 <gos_mutexLock+0x208>)
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d109      	bne.n	801243c <gos_mutexLock+0x174>
 8012428:	4b28      	ldr	r3, [pc, #160]	; (80124cc <gos_mutexLock+0x204>)
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d005      	beq.n	801243c <gos_mutexLock+0x174>
 8012430:	4b26      	ldr	r3, [pc, #152]	; (80124cc <gos_mutexLock+0x204>)
 8012432:	781b      	ldrb	r3, [r3, #0]
 8012434:	3b01      	subs	r3, #1
 8012436:	b2da      	uxtb	r2, r3
 8012438:	4b24      	ldr	r3, [pc, #144]	; (80124cc <gos_mutexLock+0x204>)
 801243a:	701a      	strb	r2, [r3, #0]

                prioChanged = GOS_TRUE;
 801243c:	2336      	movs	r3, #54	; 0x36
 801243e:	74fb      	strb	r3, [r7, #19]
                // There is no priority inversion.
            }
#endif
        }

        GOS_ATOMIC_EXIT
 8012440:	4b20      	ldr	r3, [pc, #128]	; (80124c4 <gos_mutexLock+0x1fc>)
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d005      	beq.n	8012454 <gos_mutexLock+0x18c>
 8012448:	4b1e      	ldr	r3, [pc, #120]	; (80124c4 <gos_mutexLock+0x1fc>)
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	3b01      	subs	r3, #1
 801244e:	b2da      	uxtb	r2, r3
 8012450:	4b1c      	ldr	r3, [pc, #112]	; (80124c4 <gos_mutexLock+0x1fc>)
 8012452:	701a      	strb	r2, [r3, #0]
 8012454:	4b1b      	ldr	r3, [pc, #108]	; (80124c4 <gos_mutexLock+0x1fc>)
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d108      	bne.n	801246e <gos_mutexLock+0x1a6>
 801245c:	4b1a      	ldr	r3, [pc, #104]	; (80124c8 <gos_mutexLock+0x200>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	f383 8810 	msr	PRIMASK, r3
 8012464:	b662      	cpsie	i
 8012466:	f3bf 8f4f 	dsb	sy
 801246a:	f3bf 8f6f 	isb	sy
 801246e:	4b17      	ldr	r3, [pc, #92]	; (80124cc <gos_mutexLock+0x204>)
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d005      	beq.n	8012482 <gos_mutexLock+0x1ba>
 8012476:	4b15      	ldr	r3, [pc, #84]	; (80124cc <gos_mutexLock+0x204>)
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	3b01      	subs	r3, #1
 801247c:	b2da      	uxtb	r2, r3
 801247e:	4b13      	ldr	r3, [pc, #76]	; (80124cc <gos_mutexLock+0x204>)
 8012480:	701a      	strb	r2, [r3, #0]

        if (lockResult == GOS_SUCCESS)
 8012482:	7dfb      	ldrb	r3, [r7, #23]
 8012484:	2b55      	cmp	r3, #85	; 0x55
 8012486:	d017      	beq.n	80124b8 <gos_mutexLock+0x1f0>
        {
            break;
        }
        else
        {
            if (timeout > 0u)
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d002      	beq.n	8012494 <gos_mutexLock+0x1cc>
            {
                (void_t) gos_taskSleep(MUTEX_LOCK_SLEEP_MS);
 801248e:	2002      	movs	r0, #2
 8012490:	f7fd faf0 	bl	800fa74 <gos_taskSleep>
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d00f      	beq.n	80124ba <gos_mutexLock+0x1f2>
 801249a:	f7fc f93b 	bl	800e714 <gos_kernelGetSysTicks>
 801249e:	4602      	mov	r2, r0
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	1ad3      	subs	r3, r2, r3
 80124a4:	683a      	ldr	r2, [r7, #0]
 80124a6:	429a      	cmp	r2, r3
 80124a8:	f4bf af25 	bcs.w	80122f6 <gos_mutexLock+0x2e>
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124b2:	f43f af20 	beq.w	80122f6 <gos_mutexLock+0x2e>
 80124b6:	e000      	b.n	80124ba <gos_mutexLock+0x1f2>
            break;
 80124b8:	bf00      	nop
                // Zero timeout, no sleep needed.
            }
        }
    }

    return lockResult;
 80124ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80124bc:	4618      	mov	r0, r3
 80124be:	3718      	adds	r7, #24
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	200050eb 	.word	0x200050eb
 80124c8:	200050ec 	.word	0x200050ec
 80124cc:	200050e9 	.word	0x200050e9
 80124d0:	200050ea 	.word	0x200050ea

080124d4 <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
gos_result_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b084      	sub	sp, #16
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 80124dc:	23ae      	movs	r3, #174	; 0xae
 80124de:	73fb      	strb	r3, [r7, #15]
    gos_tid_t    currentTask  = GOS_INVALID_TASK_ID;
 80124e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124e4:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d04c      	beq.n	8012586 <gos_mutexUnlock+0xb2>
    {
        GOS_ATOMIC_ENTER
 80124ec:	4b28      	ldr	r3, [pc, #160]	; (8012590 <gos_mutexUnlock+0xbc>)
 80124ee:	781b      	ldrb	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d108      	bne.n	8012506 <gos_mutexUnlock+0x32>
 80124f4:	b672      	cpsid	i
 80124f6:	f3ef 8310 	mrs	r3, PRIMASK
 80124fa:	4a26      	ldr	r2, [pc, #152]	; (8012594 <gos_mutexUnlock+0xc0>)
 80124fc:	6013      	str	r3, [r2, #0]
 80124fe:	f3bf 8f4f 	dsb	sy
 8012502:	f3bf 8f6f 	isb	sy
 8012506:	4b22      	ldr	r3, [pc, #136]	; (8012590 <gos_mutexUnlock+0xbc>)
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	3301      	adds	r3, #1
 801250c:	b2da      	uxtb	r2, r3
 801250e:	4b20      	ldr	r3, [pc, #128]	; (8012590 <gos_mutexUnlock+0xbc>)
 8012510:	701a      	strb	r2, [r3, #0]
 8012512:	4b21      	ldr	r3, [pc, #132]	; (8012598 <gos_mutexUnlock+0xc4>)
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	3301      	adds	r3, #1
 8012518:	b2da      	uxtb	r2, r3
 801251a:	4b1f      	ldr	r3, [pc, #124]	; (8012598 <gos_mutexUnlock+0xc4>)
 801251c:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentTask);
 801251e:	f107 030c 	add.w	r3, r7, #12
 8012522:	4618      	mov	r0, r3
 8012524:	f7fe fce6 	bl	8010ef4 <gos_taskGetCurrentId>

        if (pMutex->owner == currentTask)
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	885a      	ldrh	r2, [r3, #2]
 801252c:	89bb      	ldrh	r3, [r7, #12]
 801252e:	429a      	cmp	r2, r3
 8012530:	d108      	bne.n	8012544 <gos_mutexUnlock+0x70>
        {
            pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	22d2      	movs	r2, #210	; 0xd2
 8012536:	701a      	strb	r2, [r3, #0]
            pMutex->owner      = GOS_INVALID_TASK_ID;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801253e:	805a      	strh	r2, [r3, #2]
            unlockResult       = GOS_SUCCESS;
 8012540:	2355      	movs	r3, #85	; 0x55
 8012542:	73fb      	strb	r3, [r7, #15]
        else
        {
            // Only the owner can unlock it.
        }

        GOS_ATOMIC_EXIT
 8012544:	4b12      	ldr	r3, [pc, #72]	; (8012590 <gos_mutexUnlock+0xbc>)
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d005      	beq.n	8012558 <gos_mutexUnlock+0x84>
 801254c:	4b10      	ldr	r3, [pc, #64]	; (8012590 <gos_mutexUnlock+0xbc>)
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	3b01      	subs	r3, #1
 8012552:	b2da      	uxtb	r2, r3
 8012554:	4b0e      	ldr	r3, [pc, #56]	; (8012590 <gos_mutexUnlock+0xbc>)
 8012556:	701a      	strb	r2, [r3, #0]
 8012558:	4b0d      	ldr	r3, [pc, #52]	; (8012590 <gos_mutexUnlock+0xbc>)
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d108      	bne.n	8012572 <gos_mutexUnlock+0x9e>
 8012560:	4b0c      	ldr	r3, [pc, #48]	; (8012594 <gos_mutexUnlock+0xc0>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	f383 8810 	msr	PRIMASK, r3
 8012568:	b662      	cpsie	i
 801256a:	f3bf 8f4f 	dsb	sy
 801256e:	f3bf 8f6f 	isb	sy
 8012572:	4b09      	ldr	r3, [pc, #36]	; (8012598 <gos_mutexUnlock+0xc4>)
 8012574:	781b      	ldrb	r3, [r3, #0]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d005      	beq.n	8012586 <gos_mutexUnlock+0xb2>
 801257a:	4b07      	ldr	r3, [pc, #28]	; (8012598 <gos_mutexUnlock+0xc4>)
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	3b01      	subs	r3, #1
 8012580:	b2da      	uxtb	r2, r3
 8012582:	4b05      	ldr	r3, [pc, #20]	; (8012598 <gos_mutexUnlock+0xc4>)
 8012584:	701a      	strb	r2, [r3, #0]
    else
    {
        // Null pointer.
    }

    return unlockResult;
 8012586:	7bfb      	ldrb	r3, [r7, #15]
}
 8012588:	4618      	mov	r0, r3
 801258a:	3710      	adds	r7, #16
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}
 8012590:	200050eb 	.word	0x200050eb
 8012594:	200050ec 	.word	0x200050ec
 8012598:	200050e9 	.word	0x200050e9

0801259c <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b082      	sub	sp, #8
 80125a0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_SUCCESS;
 80125a2:	2355      	movs	r3, #85	; 0x55
 80125a4:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 80125a6:	2300      	movs	r3, #0
 80125a8:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 80125aa:	2300      	movs	r3, #0
 80125ac:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80125ae:	2300      	movs	r3, #0
 80125b0:	71fb      	strb	r3, [r7, #7]
 80125b2:	e038      	b.n	8012626 <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 80125b4:	79fb      	ldrb	r3, [r7, #7]
 80125b6:	4a22      	ldr	r2, [pc, #136]	; (8012640 <gos_queueInit+0xa4>)
 80125b8:	2100      	movs	r1, #0
 80125ba:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 80125bc:	79fb      	ldrb	r3, [r7, #7]
 80125be:	4a21      	ldr	r2, [pc, #132]	; (8012644 <gos_queueInit+0xa8>)
 80125c0:	2100      	movs	r1, #0
 80125c2:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 80125c4:	79fb      	ldrb	r3, [r7, #7]
 80125c6:	4a20      	ldr	r2, [pc, #128]	; (8012648 <gos_queueInit+0xac>)
 80125c8:	f641 7184 	movw	r1, #8068	; 0x1f84
 80125cc:	fb01 f303 	mul.w	r3, r1, r3
 80125d0:	4413      	add	r3, r2
 80125d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80125d6:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 80125d8:	79fb      	ldrb	r3, [r7, #7]
 80125da:	4a1b      	ldr	r2, [pc, #108]	; (8012648 <gos_queueInit+0xac>)
 80125dc:	f641 7184 	movw	r1, #8068	; 0x1f84
 80125e0:	fb01 f303 	mul.w	r3, r1, r3
 80125e4:	4413      	add	r3, r2
 80125e6:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 80125ea:	3302      	adds	r3, #2
 80125ec:	2200      	movs	r2, #0
 80125ee:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 80125f0:	2300      	movs	r3, #0
 80125f2:	71bb      	strb	r3, [r7, #6]
 80125f4:	e011      	b.n	801261a <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 80125f6:	79fb      	ldrb	r3, [r7, #7]
 80125f8:	79ba      	ldrb	r2, [r7, #6]
 80125fa:	4913      	ldr	r1, [pc, #76]	; (8012648 <gos_queueInit+0xac>)
 80125fc:	20c9      	movs	r0, #201	; 0xc9
 80125fe:	fb00 f202 	mul.w	r2, r0, r2
 8012602:	f641 7084 	movw	r0, #8068	; 0x1f84
 8012606:	fb00 f303 	mul.w	r3, r0, r3
 801260a:	4413      	add	r3, r2
 801260c:	440b      	add	r3, r1
 801260e:	33e2      	adds	r3, #226	; 0xe2
 8012610:	2200      	movs	r2, #0
 8012612:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 8012614:	79bb      	ldrb	r3, [r7, #6]
 8012616:	3301      	adds	r3, #1
 8012618:	71bb      	strb	r3, [r7, #6]
 801261a:	79bb      	ldrb	r3, [r7, #6]
 801261c:	2b27      	cmp	r3, #39	; 0x27
 801261e:	d9ea      	bls.n	80125f6 <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8012620:	79fb      	ldrb	r3, [r7, #7]
 8012622:	3301      	adds	r3, #1
 8012624:	71fb      	strb	r3, [r7, #7]
 8012626:	79fb      	ldrb	r3, [r7, #7]
 8012628:	2b03      	cmp	r3, #3
 801262a:	d9c3      	bls.n	80125b4 <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 801262c:	4807      	ldr	r0, [pc, #28]	; (801264c <gos_queueInit+0xb0>)
 801262e:	f7ff fe31 	bl	8012294 <gos_mutexInit>
 8012632:	4603      	mov	r3, r0
 8012634:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 8012636:	797b      	ldrb	r3, [r7, #5]
}
 8012638:	4618      	mov	r0, r3
 801263a:	3708      	adds	r7, #8
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}
 8012640:	2000d3a8 	.word	0x2000d3a8
 8012644:	2000d3ac 	.word	0x2000d3ac
 8012648:	20005598 	.word	0x20005598
 801264c:	2000d3b0 	.word	0x2000d3b0

08012650 <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b084      	sub	sp, #16
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 8012658:	23ae      	movs	r3, #174	; 0xae
 801265a:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 801265c:	2300      	movs	r3, #0
 801265e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d048      	beq.n	80126f8 <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8012666:	2300      	movs	r3, #0
 8012668:	73bb      	strb	r3, [r7, #14]
 801266a:	e042      	b.n	80126f2 <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 801266c:	7bbb      	ldrb	r3, [r7, #14]
 801266e:	4a25      	ldr	r2, [pc, #148]	; (8012704 <gos_queueCreate+0xb4>)
 8012670:	f641 7184 	movw	r1, #8068	; 0x1f84
 8012674:	fb01 f303 	mul.w	r3, r1, r3
 8012678:	4413      	add	r3, r2
 801267a:	881b      	ldrh	r3, [r3, #0]
 801267c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012680:	d134      	bne.n	80126ec <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 8012682:	7bbb      	ldrb	r3, [r7, #14]
 8012684:	b29a      	uxth	r2, r3
 8012686:	7bbb      	ldrb	r3, [r7, #14]
 8012688:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 801268c:	b290      	uxth	r0, r2
 801268e:	4a1d      	ldr	r2, [pc, #116]	; (8012704 <gos_queueCreate+0xb4>)
 8012690:	f641 7184 	movw	r1, #8068	; 0x1f84
 8012694:	fb01 f303 	mul.w	r3, r1, r3
 8012698:	4413      	add	r3, r2
 801269a:	4602      	mov	r2, r0
 801269c:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 801269e:	7bbb      	ldrb	r3, [r7, #14]
 80126a0:	4a18      	ldr	r2, [pc, #96]	; (8012704 <gos_queueCreate+0xb4>)
 80126a2:	f641 7184 	movw	r1, #8068	; 0x1f84
 80126a6:	fb01 f303 	mul.w	r3, r1, r3
 80126aa:	4413      	add	r3, r2
 80126ac:	881a      	ldrh	r2, [r3, #0]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	3302      	adds	r3, #2
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d015      	beq.n	80126e6 <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	3302      	adds	r3, #2
 80126be:	4618      	mov	r0, r3
 80126c0:	f7ed fe06 	bl	80002d0 <strlen>
 80126c4:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 80126c6:	2b18      	cmp	r3, #24
 80126c8:	d80d      	bhi.n	80126e6 <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 80126ca:	7bbb      	ldrb	r3, [r7, #14]
 80126cc:	f641 7284 	movw	r2, #8068	; 0x1f84
 80126d0:	fb02 f303 	mul.w	r3, r2, r3
 80126d4:	4a0b      	ldr	r2, [pc, #44]	; (8012704 <gos_queueCreate+0xb4>)
 80126d6:	4413      	add	r3, r2
 80126d8:	1c9a      	adds	r2, r3, #2
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	3302      	adds	r3, #2
 80126de:	4619      	mov	r1, r3
 80126e0:	4610      	mov	r0, r2
 80126e2:	f003 fbb6 	bl	8015e52 <strcpy>
                else
                {
                    // Nothing to do.
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 80126e6:	2355      	movs	r3, #85	; 0x55
 80126e8:	73fb      	strb	r3, [r7, #15]
                break;
 80126ea:	e005      	b.n	80126f8 <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80126ec:	7bbb      	ldrb	r3, [r7, #14]
 80126ee:	3301      	adds	r3, #1
 80126f0:	73bb      	strb	r3, [r7, #14]
 80126f2:	7bbb      	ldrb	r3, [r7, #14]
 80126f4:	2b03      	cmp	r3, #3
 80126f6:	d9b9      	bls.n	801266c <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 80126f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	20005598 	.word	0x20005598

08012708 <gos_queuePut>:
 */
gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b086      	sub	sp, #24
 801270c:	af00      	add	r7, sp, #0
 801270e:	60b9      	str	r1, [r7, #8]
 8012710:	607b      	str	r3, [r7, #4]
 8012712:	4603      	mov	r3, r0
 8012714:	81fb      	strh	r3, [r7, #14]
 8012716:	4613      	mov	r3, r2
 8012718:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 801271a:	23ae      	movs	r3, #174	; 0xae
 801271c:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 801271e:	2300      	movs	r3, #0
 8012720:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 8012722:	6879      	ldr	r1, [r7, #4]
 8012724:	485a      	ldr	r0, [pc, #360]	; (8012890 <gos_queuePut+0x188>)
 8012726:	f7ff fdcf 	bl	80122c8 <gos_mutexLock>
 801272a:	4603      	mov	r3, r0
 801272c:	2b55      	cmp	r3, #85	; 0x55
 801272e:	f040 80a7 	bne.w	8012880 <gos_queuePut+0x178>
 8012732:	89fb      	ldrh	r3, [r7, #14]
 8012734:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012738:	f0c0 80a2 	bcc.w	8012880 <gos_queuePut+0x178>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 801273c:	89fb      	ldrh	r3, [r7, #14]
 801273e:	f243 0203 	movw	r2, #12291	; 0x3003
 8012742:	4293      	cmp	r3, r2
 8012744:	f200 809c 	bhi.w	8012880 <gos_queuePut+0x178>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	2b00      	cmp	r3, #0
 801274c:	f000 8098 	beq.w	8012880 <gos_queuePut+0x178>
        element                                          != NULL                 &&
 8012750:	7b7b      	ldrb	r3, [r7, #13]
 8012752:	2bc8      	cmp	r3, #200	; 0xc8
 8012754:	f200 8094 	bhi.w	8012880 <gos_queuePut+0x178>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 8012758:	89fb      	ldrh	r3, [r7, #14]
 801275a:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 801275e:	4a4d      	ldr	r2, [pc, #308]	; (8012894 <gos_queuePut+0x18c>)
 8012760:	f641 7184 	movw	r1, #8068	; 0x1f84
 8012764:	fb01 f303 	mul.w	r3, r1, r3
 8012768:	4413      	add	r3, r2
 801276a:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 801276c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012770:	f000 8086 	beq.w	8012880 <gos_queuePut+0x178>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8012774:	89fb      	ldrh	r3, [r7, #14]
 8012776:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8012778:	7dbb      	ldrb	r3, [r7, #22]
 801277a:	4a47      	ldr	r2, [pc, #284]	; (8012898 <gos_queuePut+0x190>)
 801277c:	5cd3      	ldrb	r3, [r2, r3]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d009      	beq.n	8012796 <gos_queuePut+0x8e>
 8012782:	7dbb      	ldrb	r3, [r7, #22]
 8012784:	4a45      	ldr	r2, [pc, #276]	; (801289c <gos_queuePut+0x194>)
 8012786:	5cd3      	ldrb	r3, [r2, r3]
 8012788:	4619      	mov	r1, r3
 801278a:	7dbb      	ldrb	r3, [r7, #22]
 801278c:	4a42      	ldr	r2, [pc, #264]	; (8012898 <gos_queuePut+0x190>)
 801278e:	5cd3      	ldrb	r3, [r2, r3]
 8012790:	3b01      	subs	r3, #1
 8012792:	4299      	cmp	r1, r3
 8012794:	d109      	bne.n	80127aa <gos_queuePut+0xa2>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 8012796:	7dbb      	ldrb	r3, [r7, #22]
 8012798:	4a3f      	ldr	r2, [pc, #252]	; (8012898 <gos_queuePut+0x190>)
 801279a:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 801279c:	2b00      	cmp	r3, #0
 801279e:	d16f      	bne.n	8012880 <gos_queuePut+0x178>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 80127a0:	7dbb      	ldrb	r3, [r7, #22]
 80127a2:	4a3e      	ldr	r2, [pc, #248]	; (801289c <gos_queuePut+0x194>)
 80127a4:	5cd3      	ldrb	r3, [r2, r3]
 80127a6:	2b27      	cmp	r3, #39	; 0x27
 80127a8:	d06a      	beq.n	8012880 <gos_queuePut+0x178>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 80127aa:	7dbb      	ldrb	r3, [r7, #22]
 80127ac:	7dba      	ldrb	r2, [r7, #22]
 80127ae:	493b      	ldr	r1, [pc, #236]	; (801289c <gos_queuePut+0x194>)
 80127b0:	5c8a      	ldrb	r2, [r1, r2]
 80127b2:	4611      	mov	r1, r2
 80127b4:	22c9      	movs	r2, #201	; 0xc9
 80127b6:	fb01 f202 	mul.w	r2, r1, r2
 80127ba:	f641 7184 	movw	r1, #8068	; 0x1f84
 80127be:	fb01 f303 	mul.w	r3, r1, r3
 80127c2:	4413      	add	r3, r2
 80127c4:	3318      	adds	r3, #24
 80127c6:	4a33      	ldr	r2, [pc, #204]	; (8012894 <gos_queuePut+0x18c>)
 80127c8:	4413      	add	r3, r2
 80127ca:	3302      	adds	r3, #2
            (void_t) memcpy(
 80127cc:	7b7a      	ldrb	r2, [r7, #13]
 80127ce:	68b9      	ldr	r1, [r7, #8]
 80127d0:	4618      	mov	r0, r3
 80127d2:	f003 fb46 	bl	8015e62 <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 80127d6:	7dbb      	ldrb	r3, [r7, #22]
 80127d8:	7dba      	ldrb	r2, [r7, #22]
 80127da:	4930      	ldr	r1, [pc, #192]	; (801289c <gos_queuePut+0x194>)
 80127dc:	5c8a      	ldrb	r2, [r1, r2]
 80127de:	4610      	mov	r0, r2
 80127e0:	492c      	ldr	r1, [pc, #176]	; (8012894 <gos_queuePut+0x18c>)
 80127e2:	22c9      	movs	r2, #201	; 0xc9
 80127e4:	fb00 f202 	mul.w	r2, r0, r2
 80127e8:	f641 7084 	movw	r0, #8068	; 0x1f84
 80127ec:	fb00 f303 	mul.w	r3, r0, r3
 80127f0:	4413      	add	r3, r2
 80127f2:	440b      	add	r3, r1
 80127f4:	33e2      	adds	r3, #226	; 0xe2
 80127f6:	7b7a      	ldrb	r2, [r7, #13]
 80127f8:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 80127fa:	7dbb      	ldrb	r3, [r7, #22]
 80127fc:	4a27      	ldr	r2, [pc, #156]	; (801289c <gos_queuePut+0x194>)
 80127fe:	5cd2      	ldrb	r2, [r2, r3]
 8012800:	3201      	adds	r2, #1
 8012802:	b2d1      	uxtb	r1, r2
 8012804:	4a25      	ldr	r2, [pc, #148]	; (801289c <gos_queuePut+0x194>)
 8012806:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 8012808:	7dba      	ldrb	r2, [r7, #22]
 801280a:	4922      	ldr	r1, [pc, #136]	; (8012894 <gos_queuePut+0x18c>)
 801280c:	f641 7384 	movw	r3, #8068	; 0x1f84
 8012810:	fb02 f303 	mul.w	r3, r2, r3
 8012814:	440b      	add	r3, r1
 8012816:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 801281a:	3302      	adds	r3, #2
 801281c:	781b      	ldrb	r3, [r3, #0]
 801281e:	3301      	adds	r3, #1
 8012820:	b2d8      	uxtb	r0, r3
 8012822:	491c      	ldr	r1, [pc, #112]	; (8012894 <gos_queuePut+0x18c>)
 8012824:	f641 7384 	movw	r3, #8068	; 0x1f84
 8012828:	fb02 f303 	mul.w	r3, r2, r3
 801282c:	440b      	add	r3, r1
 801282e:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8012832:	3302      	adds	r3, #2
 8012834:	4602      	mov	r2, r0
 8012836:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8012838:	7dbb      	ldrb	r3, [r7, #22]
 801283a:	4a18      	ldr	r2, [pc, #96]	; (801289c <gos_queuePut+0x194>)
 801283c:	5cd3      	ldrb	r3, [r2, r3]
 801283e:	2b27      	cmp	r3, #39	; 0x27
 8012840:	d903      	bls.n	801284a <gos_queuePut+0x142>
            {
                writeCounters[queueIndex] = 0u;
 8012842:	7dbb      	ldrb	r3, [r7, #22]
 8012844:	4a15      	ldr	r2, [pc, #84]	; (801289c <gos_queuePut+0x194>)
 8012846:	2100      	movs	r1, #0
 8012848:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 801284a:	7dbb      	ldrb	r3, [r7, #22]
 801284c:	4a11      	ldr	r2, [pc, #68]	; (8012894 <gos_queuePut+0x18c>)
 801284e:	f641 7184 	movw	r1, #8068	; 0x1f84
 8012852:	fb01 f303 	mul.w	r3, r1, r3
 8012856:	4413      	add	r3, r2
 8012858:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 801285c:	3302      	adds	r3, #2
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	2b27      	cmp	r3, #39	; 0x27
 8012862:	d10b      	bne.n	801287c <gos_queuePut+0x174>
                queueFullHook != NULL)
 8012864:	4b0e      	ldr	r3, [pc, #56]	; (80128a0 <gos_queuePut+0x198>)
 8012866:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8012868:	2b00      	cmp	r3, #0
 801286a:	d007      	beq.n	801287c <gos_queuePut+0x174>
            {
                gos_mutexUnlock(&queueMutex);
 801286c:	4808      	ldr	r0, [pc, #32]	; (8012890 <gos_queuePut+0x188>)
 801286e:	f7ff fe31 	bl	80124d4 <gos_mutexUnlock>
                queueFullHook(queueId);
 8012872:	4b0b      	ldr	r3, [pc, #44]	; (80128a0 <gos_queuePut+0x198>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	89fa      	ldrh	r2, [r7, #14]
 8012878:	4610      	mov	r0, r2
 801287a:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 801287c:	2355      	movs	r3, #85	; 0x55
 801287e:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 8012880:	4803      	ldr	r0, [pc, #12]	; (8012890 <gos_queuePut+0x188>)
 8012882:	f7ff fe27 	bl	80124d4 <gos_mutexUnlock>

    return queuePutResult;
 8012886:	7dfb      	ldrb	r3, [r7, #23]
}
 8012888:	4618      	mov	r0, r3
 801288a:	3718      	adds	r7, #24
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	2000d3b0 	.word	0x2000d3b0
 8012894:	20005598 	.word	0x20005598
 8012898:	2000d3a8 	.word	0x2000d3a8
 801289c:	2000d3ac 	.word	0x2000d3ac
 80128a0:	2000d3b4 	.word	0x2000d3b4

080128a4 <gos_queueGet>:
 */
gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 80128a4:	b590      	push	{r4, r7, lr}
 80128a6:	b087      	sub	sp, #28
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	60b9      	str	r1, [r7, #8]
 80128ac:	607b      	str	r3, [r7, #4]
 80128ae:	4603      	mov	r3, r0
 80128b0:	81fb      	strh	r3, [r7, #14]
 80128b2:	4613      	mov	r3, r2
 80128b4:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 80128b6:	23ae      	movs	r3, #174	; 0xae
 80128b8:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 80128ba:	2300      	movs	r3, #0
 80128bc:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 80128be:	6879      	ldr	r1, [r7, #4]
 80128c0:	4864      	ldr	r0, [pc, #400]	; (8012a54 <gos_queueGet+0x1b0>)
 80128c2:	f7ff fd01 	bl	80122c8 <gos_mutexLock>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b55      	cmp	r3, #85	; 0x55
 80128ca:	f040 80bb 	bne.w	8012a44 <gos_queueGet+0x1a0>
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	f000 80b7 	beq.w	8012a44 <gos_queueGet+0x1a0>
        target                                           != NULL                 &&
 80128d6:	89fb      	ldrh	r3, [r7, #14]
 80128d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80128dc:	f0c0 80b2 	bcc.w	8012a44 <gos_queueGet+0x1a0>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 80128e0:	89fb      	ldrh	r3, [r7, #14]
 80128e2:	f243 0203 	movw	r2, #12291	; 0x3003
 80128e6:	4293      	cmp	r3, r2
 80128e8:	f200 80ac 	bhi.w	8012a44 <gos_queueGet+0x1a0>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 80128ec:	89fb      	ldrh	r3, [r7, #14]
 80128ee:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 80128f2:	4a59      	ldr	r2, [pc, #356]	; (8012a58 <gos_queueGet+0x1b4>)
 80128f4:	f641 7184 	movw	r1, #8068	; 0x1f84
 80128f8:	fb01 f303 	mul.w	r3, r1, r3
 80128fc:	4413      	add	r3, r2
 80128fe:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8012900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012904:	f000 809e 	beq.w	8012a44 <gos_queueGet+0x1a0>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 8012908:	89fb      	ldrh	r3, [r7, #14]
 801290a:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 801290e:	89fa      	ldrh	r2, [r7, #14]
 8012910:	f5a2 5240 	sub.w	r2, r2, #12288	; 0x3000
 8012914:	4951      	ldr	r1, [pc, #324]	; (8012a5c <gos_queueGet+0x1b8>)
 8012916:	5c8a      	ldrb	r2, [r1, r2]
 8012918:	4610      	mov	r0, r2
 801291a:	494f      	ldr	r1, [pc, #316]	; (8012a58 <gos_queueGet+0x1b4>)
 801291c:	22c9      	movs	r2, #201	; 0xc9
 801291e:	fb00 f202 	mul.w	r2, r0, r2
 8012922:	f641 7084 	movw	r0, #8068	; 0x1f84
 8012926:	fb00 f303 	mul.w	r3, r0, r3
 801292a:	4413      	add	r3, r2
 801292c:	440b      	add	r3, r1
 801292e:	33e2      	adds	r3, #226	; 0xe2
 8012930:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 8012932:	7b7a      	ldrb	r2, [r7, #13]
 8012934:	429a      	cmp	r2, r3
 8012936:	f0c0 8085 	bcc.w	8012a44 <gos_queueGet+0x1a0>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 801293a:	89fb      	ldrh	r3, [r7, #14]
 801293c:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 801293e:	7dbb      	ldrb	r3, [r7, #22]
 8012940:	4a46      	ldr	r2, [pc, #280]	; (8012a5c <gos_queueGet+0x1b8>)
 8012942:	5cd2      	ldrb	r2, [r2, r3]
 8012944:	7dbb      	ldrb	r3, [r7, #22]
 8012946:	4946      	ldr	r1, [pc, #280]	; (8012a60 <gos_queueGet+0x1bc>)
 8012948:	5ccb      	ldrb	r3, [r1, r3]
 801294a:	429a      	cmp	r2, r3
 801294c:	d07a      	beq.n	8012a44 <gos_queueGet+0x1a0>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 801294e:	7dbb      	ldrb	r3, [r7, #22]
 8012950:	7dba      	ldrb	r2, [r7, #22]
 8012952:	4942      	ldr	r1, [pc, #264]	; (8012a5c <gos_queueGet+0x1b8>)
 8012954:	5c8a      	ldrb	r2, [r1, r2]
 8012956:	4611      	mov	r1, r2
 8012958:	22c9      	movs	r2, #201	; 0xc9
 801295a:	fb01 f202 	mul.w	r2, r1, r2
 801295e:	f641 7184 	movw	r1, #8068	; 0x1f84
 8012962:	fb01 f303 	mul.w	r3, r1, r3
 8012966:	4413      	add	r3, r2
 8012968:	3318      	adds	r3, #24
 801296a:	4a3b      	ldr	r2, [pc, #236]	; (8012a58 <gos_queueGet+0x1b4>)
 801296c:	4413      	add	r3, r2
 801296e:	1c99      	adds	r1, r3, #2
 8012970:	7dbb      	ldrb	r3, [r7, #22]
 8012972:	7dba      	ldrb	r2, [r7, #22]
 8012974:	4839      	ldr	r0, [pc, #228]	; (8012a5c <gos_queueGet+0x1b8>)
 8012976:	5c82      	ldrb	r2, [r0, r2]
 8012978:	4614      	mov	r4, r2
 801297a:	4837      	ldr	r0, [pc, #220]	; (8012a58 <gos_queueGet+0x1b4>)
 801297c:	22c9      	movs	r2, #201	; 0xc9
 801297e:	fb04 f202 	mul.w	r2, r4, r2
 8012982:	f641 7484 	movw	r4, #8068	; 0x1f84
 8012986:	fb04 f303 	mul.w	r3, r4, r3
 801298a:	4413      	add	r3, r2
 801298c:	4403      	add	r3, r0
 801298e:	33e2      	adds	r3, #226	; 0xe2
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	461a      	mov	r2, r3
 8012994:	68b8      	ldr	r0, [r7, #8]
 8012996:	f003 fa64 	bl	8015e62 <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 801299a:	7dbb      	ldrb	r3, [r7, #22]
 801299c:	7dba      	ldrb	r2, [r7, #22]
 801299e:	492f      	ldr	r1, [pc, #188]	; (8012a5c <gos_queueGet+0x1b8>)
 80129a0:	5c8a      	ldrb	r2, [r1, r2]
 80129a2:	4610      	mov	r0, r2
 80129a4:	492c      	ldr	r1, [pc, #176]	; (8012a58 <gos_queueGet+0x1b4>)
 80129a6:	22c9      	movs	r2, #201	; 0xc9
 80129a8:	fb00 f202 	mul.w	r2, r0, r2
 80129ac:	f641 7084 	movw	r0, #8068	; 0x1f84
 80129b0:	fb00 f303 	mul.w	r3, r0, r3
 80129b4:	4413      	add	r3, r2
 80129b6:	440b      	add	r3, r1
 80129b8:	33e2      	adds	r3, #226	; 0xe2
 80129ba:	2200      	movs	r2, #0
 80129bc:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 80129be:	7dbb      	ldrb	r3, [r7, #22]
 80129c0:	4a26      	ldr	r2, [pc, #152]	; (8012a5c <gos_queueGet+0x1b8>)
 80129c2:	5cd2      	ldrb	r2, [r2, r3]
 80129c4:	3201      	adds	r2, #1
 80129c6:	b2d1      	uxtb	r1, r2
 80129c8:	4a24      	ldr	r2, [pc, #144]	; (8012a5c <gos_queueGet+0x1b8>)
 80129ca:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 80129cc:	7dba      	ldrb	r2, [r7, #22]
 80129ce:	4922      	ldr	r1, [pc, #136]	; (8012a58 <gos_queueGet+0x1b4>)
 80129d0:	f641 7384 	movw	r3, #8068	; 0x1f84
 80129d4:	fb02 f303 	mul.w	r3, r2, r3
 80129d8:	440b      	add	r3, r1
 80129da:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 80129de:	3302      	adds	r3, #2
 80129e0:	781b      	ldrb	r3, [r3, #0]
 80129e2:	3b01      	subs	r3, #1
 80129e4:	b2d8      	uxtb	r0, r3
 80129e6:	491c      	ldr	r1, [pc, #112]	; (8012a58 <gos_queueGet+0x1b4>)
 80129e8:	f641 7384 	movw	r3, #8068	; 0x1f84
 80129ec:	fb02 f303 	mul.w	r3, r2, r3
 80129f0:	440b      	add	r3, r1
 80129f2:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 80129f6:	3302      	adds	r3, #2
 80129f8:	4602      	mov	r2, r0
 80129fa:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 80129fc:	7dbb      	ldrb	r3, [r7, #22]
 80129fe:	4a17      	ldr	r2, [pc, #92]	; (8012a5c <gos_queueGet+0x1b8>)
 8012a00:	5cd3      	ldrb	r3, [r2, r3]
 8012a02:	2b27      	cmp	r3, #39	; 0x27
 8012a04:	d903      	bls.n	8012a0e <gos_queueGet+0x16a>
            {
                readCounters[queueIndex] = 0u;
 8012a06:	7dbb      	ldrb	r3, [r7, #22]
 8012a08:	4a14      	ldr	r2, [pc, #80]	; (8012a5c <gos_queueGet+0x1b8>)
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 8012a0e:	7dbb      	ldrb	r3, [r7, #22]
 8012a10:	4a11      	ldr	r2, [pc, #68]	; (8012a58 <gos_queueGet+0x1b4>)
 8012a12:	f641 7184 	movw	r1, #8068	; 0x1f84
 8012a16:	fb01 f303 	mul.w	r3, r1, r3
 8012a1a:	4413      	add	r3, r2
 8012a1c:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8012a20:	3302      	adds	r3, #2
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d10b      	bne.n	8012a40 <gos_queueGet+0x19c>
                queueEmptyHook != NULL)
 8012a28:	4b0e      	ldr	r3, [pc, #56]	; (8012a64 <gos_queueGet+0x1c0>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d007      	beq.n	8012a40 <gos_queueGet+0x19c>
            {
                gos_mutexUnlock(&queueMutex);
 8012a30:	4808      	ldr	r0, [pc, #32]	; (8012a54 <gos_queueGet+0x1b0>)
 8012a32:	f7ff fd4f 	bl	80124d4 <gos_mutexUnlock>
                queueEmptyHook(queueId);
 8012a36:	4b0b      	ldr	r3, [pc, #44]	; (8012a64 <gos_queueGet+0x1c0>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	89fa      	ldrh	r2, [r7, #14]
 8012a3c:	4610      	mov	r0, r2
 8012a3e:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 8012a40:	2355      	movs	r3, #85	; 0x55
 8012a42:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 8012a44:	4803      	ldr	r0, [pc, #12]	; (8012a54 <gos_queueGet+0x1b0>)
 8012a46:	f7ff fd45 	bl	80124d4 <gos_mutexUnlock>

    return queueGetResult;
 8012a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	371c      	adds	r7, #28
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd90      	pop	{r4, r7, pc}
 8012a54:	2000d3b0 	.word	0x2000d3b0
 8012a58:	20005598 	.word	0x20005598
 8012a5c:	2000d3a8 	.word	0x2000d3a8
 8012a60:	2000d3ac 	.word	0x2000d3ac
 8012a64:	2000d3b8 	.word	0x2000d3b8

08012a68 <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 8012a68:	b590      	push	{r4, r7, lr}
 8012a6a:	b083      	sub	sp, #12
 8012a6c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 8012a72:	4826      	ldr	r0, [pc, #152]	; (8012b0c <gos_queueDump+0xa4>)
 8012a74:	f002 fac2 	bl	8014ffc <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8012a78:	4825      	ldr	r0, [pc, #148]	; (8012b10 <gos_queueDump+0xa8>)
 8012a7a:	f002 fabf 	bl	8014ffc <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 8012a7e:	4b25      	ldr	r3, [pc, #148]	; (8012b14 <gos_queueDump+0xac>)
 8012a80:	4a25      	ldr	r2, [pc, #148]	; (8012b18 <gos_queueDump+0xb0>)
 8012a82:	4926      	ldr	r1, [pc, #152]	; (8012b1c <gos_queueDump+0xb4>)
 8012a84:	4826      	ldr	r0, [pc, #152]	; (8012b20 <gos_queueDump+0xb8>)
 8012a86:	f002 fab9 	bl	8014ffc <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8012a8a:	4821      	ldr	r0, [pc, #132]	; (8012b10 <gos_queueDump+0xa8>)
 8012a8c:	f002 fab6 	bl	8014ffc <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8012a90:	2300      	movs	r3, #0
 8012a92:	71fb      	strb	r3, [r7, #7]
 8012a94:	e02d      	b.n	8012af2 <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 8012a96:	79fb      	ldrb	r3, [r7, #7]
 8012a98:	4a22      	ldr	r2, [pc, #136]	; (8012b24 <gos_queueDump+0xbc>)
 8012a9a:	f641 7184 	movw	r1, #8068	; 0x1f84
 8012a9e:	fb01 f303 	mul.w	r3, r1, r3
 8012aa2:	4413      	add	r3, r2
 8012aa4:	881b      	ldrh	r3, [r3, #0]
 8012aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012aaa:	d026      	beq.n	8012afa <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 8012aac:	79fb      	ldrb	r3, [r7, #7]
 8012aae:	4a1d      	ldr	r2, [pc, #116]	; (8012b24 <gos_queueDump+0xbc>)
 8012ab0:	f641 7184 	movw	r1, #8068	; 0x1f84
 8012ab4:	fb01 f303 	mul.w	r3, r1, r3
 8012ab8:	4413      	add	r3, r2
 8012aba:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8012abc:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 8012abe:	79fb      	ldrb	r3, [r7, #7]
 8012ac0:	f641 7284 	movw	r2, #8068	; 0x1f84
 8012ac4:	fb02 f303 	mul.w	r3, r2, r3
 8012ac8:	4a16      	ldr	r2, [pc, #88]	; (8012b24 <gos_queueDump+0xbc>)
 8012aca:	4413      	add	r3, r2
 8012acc:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 8012ace:	79fb      	ldrb	r3, [r7, #7]
 8012ad0:	4914      	ldr	r1, [pc, #80]	; (8012b24 <gos_queueDump+0xbc>)
 8012ad2:	f641 7084 	movw	r0, #8068	; 0x1f84
 8012ad6:	fb00 f303 	mul.w	r3, r0, r3
 8012ada:	440b      	add	r3, r1
 8012adc:	f503 53fc 	add.w	r3, r3, #8064	; 0x1f80
 8012ae0:	3302      	adds	r3, #2
 8012ae2:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8012ae4:	4621      	mov	r1, r4
 8012ae6:	4810      	ldr	r0, [pc, #64]	; (8012b28 <gos_queueDump+0xc0>)
 8012ae8:	f002 fa88 	bl	8014ffc <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8012aec:	79fb      	ldrb	r3, [r7, #7]
 8012aee:	3301      	adds	r3, #1
 8012af0:	71fb      	strb	r3, [r7, #7]
 8012af2:	79fb      	ldrb	r3, [r7, #7]
 8012af4:	2b03      	cmp	r3, #3
 8012af6:	d9ce      	bls.n	8012a96 <gos_queueDump+0x2e>
 8012af8:	e000      	b.n	8012afc <gos_queueDump+0x94>
            break;
 8012afa:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 8012afc:	480b      	ldr	r0, [pc, #44]	; (8012b2c <gos_queueDump+0xc4>)
 8012afe:	f002 fa7d 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8012b02:	bf00      	nop
 8012b04:	370c      	adds	r7, #12
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd90      	pop	{r4, r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	080191d0 	.word	0x080191d0
 8012b10:	080191e0 	.word	0x080191e0
 8012b14:	0801921c 	.word	0x0801921c
 8012b18:	08019228 	.word	0x08019228
 8012b1c:	08019230 	.word	0x08019230
 8012b20:	08019234 	.word	0x08019234
 8012b24:	20005598 	.word	0x20005598
 8012b28:	0801924c 	.word	0x0801924c
 8012b2c:	08019268 	.word	0x08019268

08012b30 <gos_shellInit>:

/*
 * Function: gos_shellInit
 */
gos_result_t gos_shellInit (void_t)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            shellInitResult = GOS_ERROR;
 8012b36:	23ae      	movs	r3, #174	; 0xae
 8012b38:	71fb      	strb	r3, [r7, #7]
    gos_shellCommandIndex_t index           = 0u;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    useEcho = GOS_TRUE;
 8012b3e:	4b15      	ldr	r3, [pc, #84]	; (8012b94 <gos_shellInit+0x64>)
 8012b40:	2236      	movs	r2, #54	; 0x36
 8012b42:	701a      	strb	r2, [r3, #0]

    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8012b44:	2300      	movs	r3, #0
 8012b46:	71bb      	strb	r3, [r7, #6]
 8012b48:	e00c      	b.n	8012b64 <gos_shellInit+0x34>
    {
        shellCommands[index].commandHandler = NULL;
 8012b4a:	79ba      	ldrb	r2, [r7, #6]
 8012b4c:	4912      	ldr	r1, [pc, #72]	; (8012b98 <gos_shellInit+0x68>)
 8012b4e:	4613      	mov	r3, r2
 8012b50:	00db      	lsls	r3, r3, #3
 8012b52:	1a9b      	subs	r3, r3, r2
 8012b54:	009b      	lsls	r3, r3, #2
 8012b56:	440b      	add	r3, r1
 8012b58:	3314      	adds	r3, #20
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	601a      	str	r2, [r3, #0]
    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8012b5e:	79bb      	ldrb	r3, [r7, #6]
 8012b60:	3301      	adds	r3, #1
 8012b62:	71bb      	strb	r3, [r7, #6]
 8012b64:	79bb      	ldrb	r3, [r7, #6]
 8012b66:	2b0f      	cmp	r3, #15
 8012b68:	d9ef      	bls.n	8012b4a <gos_shellInit+0x1a>
    }

    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 8012b6a:	490c      	ldr	r1, [pc, #48]	; (8012b9c <gos_shellInit+0x6c>)
 8012b6c:	480c      	ldr	r0, [pc, #48]	; (8012ba0 <gos_shellInit+0x70>)
 8012b6e:	f7fc fdef 	bl	800f750 <gos_taskRegister>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b55      	cmp	r3, #85	; 0x55
 8012b76:	d107      	bne.n	8012b88 <gos_shellInit+0x58>
        gos_shellRegisterCommand(&shellCommand) == GOS_SUCCESS)
 8012b78:	480a      	ldr	r0, [pc, #40]	; (8012ba4 <gos_shellInit+0x74>)
 8012b7a:	f000 f815 	bl	8012ba8 <gos_shellRegisterCommand>
 8012b7e:	4603      	mov	r3, r0
    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 8012b80:	2b55      	cmp	r3, #85	; 0x55
 8012b82:	d101      	bne.n	8012b88 <gos_shellInit+0x58>
    {
        shellInitResult = GOS_SUCCESS;
 8012b84:	2355      	movs	r3, #85	; 0x55
 8012b86:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellInitResult;
 8012b88:	79fb      	ldrb	r3, [r7, #7]
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3708      	adds	r7, #8
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	2000d64a 	.word	0x2000d64a
 8012b98:	2000d3bc 	.word	0x2000d3bc
 8012b9c:	2000d57c 	.word	0x2000d57c
 8012ba0:	20001f2c 	.word	0x20001f2c
 8012ba4:	20001f98 	.word	0x20001f98

08012ba8 <gos_shellRegisterCommand>:

/*
 * Function: gos_shellRegisterCommand
 */
gos_result_t gos_shellRegisterCommand (gos_shellCommand_t* command)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b084      	sub	sp, #16
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            shellRegisterCommandResult = GOS_ERROR;
 8012bb0:	23ae      	movs	r3, #174	; 0xae
 8012bb2:	73fb      	strb	r3, [r7, #15]
    gos_shellCommandIndex_t index                      = 0u;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (command->commandHandler != NULL && command->command != NULL)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	695b      	ldr	r3, [r3, #20]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d03c      	beq.n	8012c3a <gos_shellRegisterCommand+0x92>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d039      	beq.n	8012c3a <gos_shellRegisterCommand+0x92>
    {
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	73bb      	strb	r3, [r7, #14]
 8012bca:	e033      	b.n	8012c34 <gos_shellRegisterCommand+0x8c>
        {
            if (shellCommands[index].commandHandler == NULL)
 8012bcc:	7bba      	ldrb	r2, [r7, #14]
 8012bce:	491d      	ldr	r1, [pc, #116]	; (8012c44 <gos_shellRegisterCommand+0x9c>)
 8012bd0:	4613      	mov	r3, r2
 8012bd2:	00db      	lsls	r3, r3, #3
 8012bd4:	1a9b      	subs	r3, r3, r2
 8012bd6:	009b      	lsls	r3, r3, #2
 8012bd8:	440b      	add	r3, r1
 8012bda:	3314      	adds	r3, #20
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d125      	bne.n	8012c2e <gos_shellRegisterCommand+0x86>
            {
                shellCommands[index].commandHandler = command->commandHandler;
 8012be2:	7bba      	ldrb	r2, [r7, #14]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6959      	ldr	r1, [r3, #20]
 8012be8:	4816      	ldr	r0, [pc, #88]	; (8012c44 <gos_shellRegisterCommand+0x9c>)
 8012bea:	4613      	mov	r3, r2
 8012bec:	00db      	lsls	r3, r3, #3
 8012bee:	1a9b      	subs	r3, r3, r2
 8012bf0:	009b      	lsls	r3, r3, #2
 8012bf2:	4403      	add	r3, r0
 8012bf4:	3314      	adds	r3, #20
 8012bf6:	6019      	str	r1, [r3, #0]
                shellCommands[index].commandHandlerPrivileges = command->commandHandlerPrivileges;
 8012bf8:	7bba      	ldrb	r2, [r7, #14]
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	8b18      	ldrh	r0, [r3, #24]
 8012bfe:	4911      	ldr	r1, [pc, #68]	; (8012c44 <gos_shellRegisterCommand+0x9c>)
 8012c00:	4613      	mov	r3, r2
 8012c02:	00db      	lsls	r3, r3, #3
 8012c04:	1a9b      	subs	r3, r3, r2
 8012c06:	009b      	lsls	r3, r3, #2
 8012c08:	440b      	add	r3, r1
 8012c0a:	3318      	adds	r3, #24
 8012c0c:	4602      	mov	r2, r0
 8012c0e:	801a      	strh	r2, [r3, #0]
                (void_t) strcpy(shellCommands[index].command, command->command);
 8012c10:	7bba      	ldrb	r2, [r7, #14]
 8012c12:	4613      	mov	r3, r2
 8012c14:	00db      	lsls	r3, r3, #3
 8012c16:	1a9b      	subs	r3, r3, r2
 8012c18:	009b      	lsls	r3, r3, #2
 8012c1a:	4a0a      	ldr	r2, [pc, #40]	; (8012c44 <gos_shellRegisterCommand+0x9c>)
 8012c1c:	4413      	add	r3, r2
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	4611      	mov	r1, r2
 8012c22:	4618      	mov	r0, r3
 8012c24:	f003 f915 	bl	8015e52 <strcpy>
                shellRegisterCommandResult = GOS_SUCCESS;
 8012c28:	2355      	movs	r3, #85	; 0x55
 8012c2a:	73fb      	strb	r3, [r7, #15]
                break;
 8012c2c:	e005      	b.n	8012c3a <gos_shellRegisterCommand+0x92>
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8012c2e:	7bbb      	ldrb	r3, [r7, #14]
 8012c30:	3301      	adds	r3, #1
 8012c32:	73bb      	strb	r3, [r7, #14]
 8012c34:	7bbb      	ldrb	r3, [r7, #14]
 8012c36:	2b0f      	cmp	r3, #15
 8012c38:	d9c8      	bls.n	8012bcc <gos_shellRegisterCommand+0x24>
            {
                // Nothing to do.
            }
        }
    }
    return shellRegisterCommandResult;
 8012c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3710      	adds	r7, #16
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}
 8012c44:	2000d3bc 	.word	0x2000d3bc

08012c48 <gos_shellSuspend>:

/*
 * Function: gos_shellSuspend
 */
gos_result_t gos_shellSuspend (void_t)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellSuspendResult = GOS_ERROR;
 8012c4e:	23ae      	movs	r3, #174	; 0xae
 8012c50:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellSuspendResult = gos_taskSuspend(shellDaemonTaskId);
 8012c52:	4b06      	ldr	r3, [pc, #24]	; (8012c6c <gos_shellSuspend+0x24>)
 8012c54:	881b      	ldrh	r3, [r3, #0]
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7fd f858 	bl	800fd0c <gos_taskSuspend>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	71fb      	strb	r3, [r7, #7]

    return shellSuspendResult;
 8012c60:	79fb      	ldrb	r3, [r7, #7]
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3708      	adds	r7, #8
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}
 8012c6a:	bf00      	nop
 8012c6c:	2000d57c 	.word	0x2000d57c

08012c70 <gos_shellResume>:

/*
 * Function: gos_shellResume
 */
gos_result_t gos_shellResume (void_t)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b082      	sub	sp, #8
 8012c74:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellResumeResult = GOS_ERROR;
 8012c76:	23ae      	movs	r3, #174	; 0xae
 8012c78:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellResumeResult = gos_taskResume(shellDaemonTaskId);
 8012c7a:	4b06      	ldr	r3, [pc, #24]	; (8012c94 <gos_shellResume+0x24>)
 8012c7c:	881b      	ldrh	r3, [r3, #0]
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7fd f966 	bl	800ff50 <gos_taskResume>
 8012c84:	4603      	mov	r3, r0
 8012c86:	71fb      	strb	r3, [r7, #7]

    return shellResumeResult;
 8012c88:	79fb      	ldrb	r3, [r7, #7]
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3708      	adds	r7, #8
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
 8012c92:	bf00      	nop
 8012c94:	2000d57c 	.word	0x2000d57c

08012c98 <gos_shellDaemonTask>:
 *          a string.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellDaemonTask (void_t)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_shellCommandIndex_t index              = 0u;
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	71fb      	strb	r3, [r7, #7]
    u16_t                   actualCommandIndex = 0u;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	80bb      	strh	r3, [r7, #4]
    u16_t                   paramIndex         = 0u;
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	807b      	strh	r3, [r7, #2]

    /*
     * Function code.
     */
    (void_t) gos_taskSleep(CFG_SHELL_STARTUP_DELAY_MS);
 8012caa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012cae:	f7fc fee1 	bl	800fa74 <gos_taskSleep>
    (void_t) gos_shellDriverTransmitString(GOS_SHELL_DISPLAY_TEXT);
 8012cb2:	4873      	ldr	r0, [pc, #460]	; (8012e80 <gos_shellDaemonTask+0x1e8>)
 8012cb4:	f002 f9a2 	bl	8014ffc <gos_shellDriverTransmitString>

    for (;;)
    {
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 8012cb8:	4b72      	ldr	r3, [pc, #456]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012cba:	881b      	ldrh	r3, [r3, #0]
 8012cbc:	461a      	mov	r2, r3
 8012cbe:	4b72      	ldr	r3, [pc, #456]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012cc0:	4413      	add	r3, r2
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f002 f982 	bl	8014fcc <gos_shellDriverReceiveChar>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	2b55      	cmp	r3, #85	; 0x55
 8012ccc:	f040 80d3 	bne.w	8012e76 <gos_shellDaemonTask+0x1de>
        {
            if (useEcho == GOS_TRUE)
 8012cd0:	4b6e      	ldr	r3, [pc, #440]	; (8012e8c <gos_shellDaemonTask+0x1f4>)
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	2b36      	cmp	r3, #54	; 0x36
 8012cd6:	d107      	bne.n	8012ce8 <gos_shellDaemonTask+0x50>
            {
                (void_t) gos_shellDriverTransmitString(&commandBuffer[commandBufferIndex]);
 8012cd8:	4b6a      	ldr	r3, [pc, #424]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012cda:	881b      	ldrh	r3, [r3, #0]
 8012cdc:	461a      	mov	r2, r3
 8012cde:	4b6a      	ldr	r3, [pc, #424]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012ce0:	4413      	add	r3, r2
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f002 f98a 	bl	8014ffc <gos_shellDriverTransmitString>
            }

            /*
             * Backspace character check
             */
            if (commandBuffer[commandBufferIndex] == '\177')
 8012ce8:	4b66      	ldr	r3, [pc, #408]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012cea:	881b      	ldrh	r3, [r3, #0]
 8012cec:	461a      	mov	r2, r3
 8012cee:	4b66      	ldr	r3, [pc, #408]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012cf0:	5c9b      	ldrb	r3, [r3, r2]
 8012cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8012cf4:	d10c      	bne.n	8012d10 <gos_shellDaemonTask+0x78>
            {
                commandBuffer[commandBufferIndex] = '\0';
 8012cf6:	4b63      	ldr	r3, [pc, #396]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012cf8:	881b      	ldrh	r3, [r3, #0]
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	4b62      	ldr	r3, [pc, #392]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012cfe:	2100      	movs	r1, #0
 8012d00:	5499      	strb	r1, [r3, r2]
                commandBufferIndex--;
 8012d02:	4b60      	ldr	r3, [pc, #384]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	3b01      	subs	r3, #1
 8012d08:	b29a      	uxth	r2, r3
 8012d0a:	4b5e      	ldr	r3, [pc, #376]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012d0c:	801a      	strh	r2, [r3, #0]
 8012d0e:	e0b2      	b.n	8012e76 <gos_shellDaemonTask+0x1de>
            }
            /*
             * Enter character check
             */
            else if (commandBuffer[commandBufferIndex] == '\r')
 8012d10:	4b5c      	ldr	r3, [pc, #368]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012d12:	881b      	ldrh	r3, [r3, #0]
 8012d14:	461a      	mov	r2, r3
 8012d16:	4b5c      	ldr	r3, [pc, #368]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012d18:	5c9b      	ldrb	r3, [r3, r2]
 8012d1a:	2b0d      	cmp	r3, #13
 8012d1c:	f040 8099 	bne.w	8012e52 <gos_shellDaemonTask+0x1ba>
            {
                if (useEcho == GOS_TRUE)
 8012d20:	4b5a      	ldr	r3, [pc, #360]	; (8012e8c <gos_shellDaemonTask+0x1f4>)
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	2b36      	cmp	r3, #54	; 0x36
 8012d26:	d102      	bne.n	8012d2e <gos_shellDaemonTask+0x96>
                {
                    (void_t) gos_shellDriverTransmitString("\n");
 8012d28:	4859      	ldr	r0, [pc, #356]	; (8012e90 <gos_shellDaemonTask+0x1f8>)
 8012d2a:	f002 f967 	bl	8014ffc <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                commandBuffer[commandBufferIndex] = '\0';
 8012d2e:	4b55      	ldr	r3, [pc, #340]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012d30:	881b      	ldrh	r3, [r3, #0]
 8012d32:	461a      	mov	r2, r3
 8012d34:	4b54      	ldr	r3, [pc, #336]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012d36:	2100      	movs	r1, #0
 8012d38:	5499      	strb	r1, [r3, r2]
                actualCommandIndex = 0u;
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	80bb      	strh	r3, [r7, #4]
                paramIndex = 0u;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	807b      	strh	r3, [r7, #2]

                // Get command.
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 8012d42:	e008      	b.n	8012d56 <gos_shellDaemonTask+0xbe>
                {
                    actualCommand[actualCommandIndex] = commandBuffer[actualCommandIndex];
 8012d44:	88ba      	ldrh	r2, [r7, #4]
 8012d46:	88bb      	ldrh	r3, [r7, #4]
 8012d48:	494f      	ldr	r1, [pc, #316]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012d4a:	5c89      	ldrb	r1, [r1, r2]
 8012d4c:	4a51      	ldr	r2, [pc, #324]	; (8012e94 <gos_shellDaemonTask+0x1fc>)
 8012d4e:	54d1      	strb	r1, [r2, r3]
                    actualCommandIndex++;
 8012d50:	88bb      	ldrh	r3, [r7, #4]
 8012d52:	3301      	adds	r3, #1
 8012d54:	80bb      	strh	r3, [r7, #4]
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 8012d56:	88bb      	ldrh	r3, [r7, #4]
 8012d58:	4a4b      	ldr	r2, [pc, #300]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012d5a:	5cd3      	ldrb	r3, [r2, r3]
 8012d5c:	2b20      	cmp	r3, #32
 8012d5e:	d004      	beq.n	8012d6a <gos_shellDaemonTask+0xd2>
 8012d60:	88bb      	ldrh	r3, [r7, #4]
 8012d62:	4a49      	ldr	r2, [pc, #292]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012d64:	5cd3      	ldrb	r3, [r2, r3]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d1ec      	bne.n	8012d44 <gos_shellDaemonTask+0xac>
                }
                actualCommand[actualCommandIndex] = '\0';
 8012d6a:	88bb      	ldrh	r3, [r7, #4]
 8012d6c:	4a49      	ldr	r2, [pc, #292]	; (8012e94 <gos_shellDaemonTask+0x1fc>)
 8012d6e:	2100      	movs	r1, #0
 8012d70:	54d1      	strb	r1, [r2, r3]
                actualCommandIndex++;
 8012d72:	88bb      	ldrh	r3, [r7, #4]
 8012d74:	3301      	adds	r3, #1
 8012d76:	80bb      	strh	r3, [r7, #4]

                // Get parameters.
                while (commandBuffer[actualCommandIndex] != '\0')
 8012d78:	e00b      	b.n	8012d92 <gos_shellDaemonTask+0xfa>
                {
                    commandParams[paramIndex++] = commandBuffer[actualCommandIndex++];
 8012d7a:	88bb      	ldrh	r3, [r7, #4]
 8012d7c:	1c5a      	adds	r2, r3, #1
 8012d7e:	80ba      	strh	r2, [r7, #4]
 8012d80:	4619      	mov	r1, r3
 8012d82:	887b      	ldrh	r3, [r7, #2]
 8012d84:	1c5a      	adds	r2, r3, #1
 8012d86:	807a      	strh	r2, [r7, #2]
 8012d88:	461a      	mov	r2, r3
 8012d8a:	4b3f      	ldr	r3, [pc, #252]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012d8c:	5c59      	ldrb	r1, [r3, r1]
 8012d8e:	4b42      	ldr	r3, [pc, #264]	; (8012e98 <gos_shellDaemonTask+0x200>)
 8012d90:	5499      	strb	r1, [r3, r2]
                while (commandBuffer[actualCommandIndex] != '\0')
 8012d92:	88bb      	ldrh	r3, [r7, #4]
 8012d94:	4a3c      	ldr	r2, [pc, #240]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012d96:	5cd3      	ldrb	r3, [r2, r3]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d1ee      	bne.n	8012d7a <gos_shellDaemonTask+0xe2>
                }
                commandParams[paramIndex] = '\0';
 8012d9c:	887b      	ldrh	r3, [r7, #2]
 8012d9e:	4a3e      	ldr	r2, [pc, #248]	; (8012e98 <gos_shellDaemonTask+0x200>)
 8012da0:	2100      	movs	r1, #0
 8012da2:	54d1      	strb	r1, [r2, r3]

                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8012da4:	2300      	movs	r3, #0
 8012da6:	71fb      	strb	r3, [r7, #7]
 8012da8:	e03c      	b.n	8012e24 <gos_shellDaemonTask+0x18c>
                {
                    if (strcmp(shellCommands[index].command, actualCommand) == 0)
 8012daa:	79fa      	ldrb	r2, [r7, #7]
 8012dac:	4613      	mov	r3, r2
 8012dae:	00db      	lsls	r3, r3, #3
 8012db0:	1a9b      	subs	r3, r3, r2
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	4a39      	ldr	r2, [pc, #228]	; (8012e9c <gos_shellDaemonTask+0x204>)
 8012db6:	4413      	add	r3, r2
 8012db8:	4936      	ldr	r1, [pc, #216]	; (8012e94 <gos_shellDaemonTask+0x1fc>)
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7ed fa28 	bl	8000210 <strcmp>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d12b      	bne.n	8012e1e <gos_shellDaemonTask+0x186>
                    {
                        if (shellCommands[index].commandHandler != NULL)
 8012dc6:	79fa      	ldrb	r2, [r7, #7]
 8012dc8:	4934      	ldr	r1, [pc, #208]	; (8012e9c <gos_shellDaemonTask+0x204>)
 8012dca:	4613      	mov	r3, r2
 8012dcc:	00db      	lsls	r3, r3, #3
 8012dce:	1a9b      	subs	r3, r3, r2
 8012dd0:	009b      	lsls	r3, r3, #2
 8012dd2:	440b      	add	r3, r1
 8012dd4:	3314      	adds	r3, #20
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d027      	beq.n	8012e2c <gos_shellDaemonTask+0x194>
                        {
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, shellCommands[index].commandHandlerPrivileges);
 8012ddc:	4b30      	ldr	r3, [pc, #192]	; (8012ea0 <gos_shellDaemonTask+0x208>)
 8012dde:	8818      	ldrh	r0, [r3, #0]
 8012de0:	79fa      	ldrb	r2, [r7, #7]
 8012de2:	492e      	ldr	r1, [pc, #184]	; (8012e9c <gos_shellDaemonTask+0x204>)
 8012de4:	4613      	mov	r3, r2
 8012de6:	00db      	lsls	r3, r3, #3
 8012de8:	1a9b      	subs	r3, r3, r2
 8012dea:	009b      	lsls	r3, r3, #2
 8012dec:	440b      	add	r3, r1
 8012dee:	3318      	adds	r3, #24
 8012df0:	881b      	ldrh	r3, [r3, #0]
 8012df2:	4619      	mov	r1, r3
 8012df4:	f7fd ff68 	bl	8010cc8 <gos_taskSetPrivileges>
                            shellCommands[index].commandHandler(commandParams);
 8012df8:	79fa      	ldrb	r2, [r7, #7]
 8012dfa:	4928      	ldr	r1, [pc, #160]	; (8012e9c <gos_shellDaemonTask+0x204>)
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	00db      	lsls	r3, r3, #3
 8012e00:	1a9b      	subs	r3, r3, r2
 8012e02:	009b      	lsls	r3, r3, #2
 8012e04:	440b      	add	r3, r1
 8012e06:	3314      	adds	r3, #20
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4823      	ldr	r0, [pc, #140]	; (8012e98 <gos_shellDaemonTask+0x200>)
 8012e0c:	4798      	blx	r3
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, GOS_TASK_PRIVILEGE_KERNEL);
 8012e0e:	4b24      	ldr	r3, [pc, #144]	; (8012ea0 <gos_shellDaemonTask+0x208>)
 8012e10:	881b      	ldrh	r3, [r3, #0]
 8012e12:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7fd ff56 	bl	8010cc8 <gos_taskSetPrivileges>
                        }
                        else
                        {
                            // Nothing to do.
                        }
                        break;
 8012e1c:	e006      	b.n	8012e2c <gos_shellDaemonTask+0x194>
                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8012e1e:	79fb      	ldrb	r3, [r7, #7]
 8012e20:	3301      	adds	r3, #1
 8012e22:	71fb      	strb	r3, [r7, #7]
 8012e24:	79fb      	ldrb	r3, [r7, #7]
 8012e26:	2b0f      	cmp	r3, #15
 8012e28:	d9bf      	bls.n	8012daa <gos_shellDaemonTask+0x112>
 8012e2a:	e000      	b.n	8012e2e <gos_shellDaemonTask+0x196>
                        break;
 8012e2c:	bf00      	nop
                        // Nothing to do.
                    }
                }

                // If command not found.
                if (index == CFG_SHELL_MAX_COMMAND_NUMBER)
 8012e2e:	79fb      	ldrb	r3, [r7, #7]
 8012e30:	2b10      	cmp	r3, #16
 8012e32:	d102      	bne.n	8012e3a <gos_shellDaemonTask+0x1a2>
                {
                    (void_t) gos_shellDriverTransmitString("Unrecognized command!\r\n");
 8012e34:	481b      	ldr	r0, [pc, #108]	; (8012ea4 <gos_shellDaemonTask+0x20c>)
 8012e36:	f002 f8e1 	bl	8014ffc <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 8012e3a:	22c8      	movs	r2, #200	; 0xc8
 8012e3c:	2100      	movs	r1, #0
 8012e3e:	4812      	ldr	r0, [pc, #72]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012e40:	f002 ff88 	bl	8015d54 <memset>
                commandBufferIndex = 0u;
 8012e44:	4b0f      	ldr	r3, [pc, #60]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012e46:	2200      	movs	r2, #0
 8012e48:	801a      	strh	r2, [r3, #0]

                (void_t) gos_shellDriverTransmitString(GOS_SHELL_DISPLAY_TEXT);
 8012e4a:	480d      	ldr	r0, [pc, #52]	; (8012e80 <gos_shellDaemonTask+0x1e8>)
 8012e4c:	f002 f8d6 	bl	8014ffc <gos_shellDriverTransmitString>
 8012e50:	e011      	b.n	8012e76 <gos_shellDaemonTask+0x1de>
            }
            else
            {
                commandBufferIndex++;
 8012e52:	4b0c      	ldr	r3, [pc, #48]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	3301      	adds	r3, #1
 8012e58:	b29a      	uxth	r2, r3
 8012e5a:	4b0a      	ldr	r3, [pc, #40]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012e5c:	801a      	strh	r2, [r3, #0]

                if (commandBufferIndex >= CFG_SHELL_COMMAND_BUFFER_SIZE)
 8012e5e:	4b09      	ldr	r3, [pc, #36]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012e60:	881b      	ldrh	r3, [r3, #0]
 8012e62:	2bc7      	cmp	r3, #199	; 0xc7
 8012e64:	d907      	bls.n	8012e76 <gos_shellDaemonTask+0x1de>
                {
                    (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 8012e66:	22c8      	movs	r2, #200	; 0xc8
 8012e68:	2100      	movs	r1, #0
 8012e6a:	4807      	ldr	r0, [pc, #28]	; (8012e88 <gos_shellDaemonTask+0x1f0>)
 8012e6c:	f002 ff72 	bl	8015d54 <memset>
                    commandBufferIndex = 0u;
 8012e70:	4b04      	ldr	r3, [pc, #16]	; (8012e84 <gos_shellDaemonTask+0x1ec>)
 8012e72:	2200      	movs	r2, #0
 8012e74:	801a      	strh	r2, [r3, #0]
                {
                    // Nothing to do.
                }
            }
        }
        (void_t) gos_taskSleep(GOS_SHELL_DAEMON_POLL_TIME_MS);
 8012e76:	2032      	movs	r0, #50	; 0x32
 8012e78:	f7fc fdfc 	bl	800fa74 <gos_taskSleep>
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 8012e7c:	e71c      	b.n	8012cb8 <gos_shellDaemonTask+0x20>
 8012e7e:	bf00      	nop
 8012e80:	080192a8 	.word	0x080192a8
 8012e84:	2000d648 	.word	0x2000d648
 8012e88:	2000d580 	.word	0x2000d580
 8012e8c:	2000d64a 	.word	0x2000d64a
 8012e90:	080192c4 	.word	0x080192c4
 8012e94:	2000d64c 	.word	0x2000d64c
 8012e98:	2000d660 	.word	0x2000d660
 8012e9c:	2000d3bc 	.word	0x2000d3bc
 8012ea0:	2000d57c 	.word	0x2000d57c
 8012ea4:	080192c8 	.word	0x080192c8

08012ea8 <gos_shellCommandHandler>:
 * @details Handles the built-in shell command.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellCommandHandler (char_t* params)
{
 8012ea8:	b590      	push	{r4, r7, lr}
 8012eaa:	b089      	sub	sp, #36	; 0x24
 8012eac:	af02      	add	r7, sp, #8
 8012eae:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u8_t                    index        = 0u;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	75fb      	strb	r3, [r7, #23]
    gos_shellCommandIndex_t commandIndex = 0u;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	75bb      	strb	r3, [r7, #22]
    gos_tid_t               taskId       = GOS_INVALID_TASK_ID;
 8012eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ebc:	82bb      	strh	r3, [r7, #20]
    gos_runtime_t           totalRunTime = {0};
 8012ebe:	f107 0308 	add.w	r3, r7, #8
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	601a      	str	r2, [r3, #0]
 8012ec6:	605a      	str	r2, [r3, #4]
 8012ec8:	721a      	strb	r2, [r3, #8]

    /*
     * Function code.
     */
    if (strcmp(params, "dump") == 0)
 8012eca:	499f      	ldr	r1, [pc, #636]	; (8013148 <gos_shellCommandHandler+0x2a0>)
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f7ed f99f 	bl	8000210 <strcmp>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d102      	bne.n	8012ede <gos_shellCommandHandler+0x36>
    {
        gos_Dump();
 8012ed8:	f7fe fa24 	bl	8011324 <gos_Dump>
        else
        {
            // Nothing to do.
        }
    }
}
 8012edc:	e22d      	b.n	801333a <gos_shellCommandHandler+0x492>
    else if (strcmp(params, "reset") == 0)
 8012ede:	499b      	ldr	r1, [pc, #620]	; (801314c <gos_shellCommandHandler+0x2a4>)
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7ed f995 	bl	8000210 <strcmp>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d102      	bne.n	8012ef2 <gos_shellCommandHandler+0x4a>
        gos_kernelReset();
 8012eec:	f7fb fc30 	bl	800e750 <gos_kernelReset>
}
 8012ef0:	e223      	b.n	801333a <gos_shellCommandHandler+0x492>
    else if (strcmp(params, "help") == 0)
 8012ef2:	4997      	ldr	r1, [pc, #604]	; (8013150 <gos_shellCommandHandler+0x2a8>)
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f7ed f98b 	bl	8000210 <strcmp>
 8012efa:	4603      	mov	r3, r0
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d137      	bne.n	8012f70 <gos_shellCommandHandler+0xc8>
        (void_t) gos_shellDriverTransmitString("List of registered shell commands: \r\n");
 8012f00:	4894      	ldr	r0, [pc, #592]	; (8013154 <gos_shellCommandHandler+0x2ac>)
 8012f02:	f002 f87b 	bl	8014ffc <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 8012f06:	2300      	movs	r3, #0
 8012f08:	75bb      	strb	r3, [r7, #22]
 8012f0a:	e02a      	b.n	8012f62 <gos_shellCommandHandler+0xba>
            if (strcmp(shellCommands[commandIndex].command, "") == 0)
 8012f0c:	7dba      	ldrb	r2, [r7, #22]
 8012f0e:	4613      	mov	r3, r2
 8012f10:	00db      	lsls	r3, r3, #3
 8012f12:	1a9b      	subs	r3, r3, r2
 8012f14:	009b      	lsls	r3, r3, #2
 8012f16:	4a90      	ldr	r2, [pc, #576]	; (8013158 <gos_shellCommandHandler+0x2b0>)
 8012f18:	4413      	add	r3, r2
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	f000 820b 	beq.w	8013338 <gos_shellCommandHandler+0x490>
            else if (strcmp(shellCommands[commandIndex].command, "shell") == 0)
 8012f22:	7dba      	ldrb	r2, [r7, #22]
 8012f24:	4613      	mov	r3, r2
 8012f26:	00db      	lsls	r3, r3, #3
 8012f28:	1a9b      	subs	r3, r3, r2
 8012f2a:	009b      	lsls	r3, r3, #2
 8012f2c:	4a8a      	ldr	r2, [pc, #552]	; (8013158 <gos_shellCommandHandler+0x2b0>)
 8012f2e:	4413      	add	r3, r2
 8012f30:	498a      	ldr	r1, [pc, #552]	; (801315c <gos_shellCommandHandler+0x2b4>)
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7ed f96c 	bl	8000210 <strcmp>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d103      	bne.n	8012f46 <gos_shellCommandHandler+0x9e>
                (void_t) gos_shellDriverTransmitString("\t"
 8012f3e:	4888      	ldr	r0, [pc, #544]	; (8013160 <gos_shellCommandHandler+0x2b8>)
 8012f40:	f002 f85c 	bl	8014ffc <gos_shellDriverTransmitString>
 8012f44:	e00a      	b.n	8012f5c <gos_shellCommandHandler+0xb4>
                (void_t) gos_shellDriverTransmitString("\t- %s\r\n", shellCommands[commandIndex].command);
 8012f46:	7dba      	ldrb	r2, [r7, #22]
 8012f48:	4613      	mov	r3, r2
 8012f4a:	00db      	lsls	r3, r3, #3
 8012f4c:	1a9b      	subs	r3, r3, r2
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	4a81      	ldr	r2, [pc, #516]	; (8013158 <gos_shellCommandHandler+0x2b0>)
 8012f52:	4413      	add	r3, r2
 8012f54:	4619      	mov	r1, r3
 8012f56:	4883      	ldr	r0, [pc, #524]	; (8013164 <gos_shellCommandHandler+0x2bc>)
 8012f58:	f002 f850 	bl	8014ffc <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 8012f5c:	7dbb      	ldrb	r3, [r7, #22]
 8012f5e:	3301      	adds	r3, #1
 8012f60:	75bb      	strb	r3, [r7, #22]
 8012f62:	7dbb      	ldrb	r3, [r7, #22]
 8012f64:	2b0f      	cmp	r3, #15
 8012f66:	d9d1      	bls.n	8012f0c <gos_shellCommandHandler+0x64>
}
 8012f68:	e1e7      	b.n	801333a <gos_shellCommandHandler+0x492>
            index++;
 8012f6a:	7dfb      	ldrb	r3, [r7, #23]
 8012f6c:	3301      	adds	r3, #1
 8012f6e:	75fb      	strb	r3, [r7, #23]
        while (params[index] != ' ' && params[index])
 8012f70:	7dfb      	ldrb	r3, [r7, #23]
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	4413      	add	r3, r2
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	2b20      	cmp	r3, #32
 8012f7a:	d005      	beq.n	8012f88 <gos_shellCommandHandler+0xe0>
 8012f7c:	7dfb      	ldrb	r3, [r7, #23]
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	4413      	add	r3, r2
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d1f0      	bne.n	8012f6a <gos_shellCommandHandler+0xc2>
        params[index] = '\0';
 8012f88:	7dfb      	ldrb	r3, [r7, #23]
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	2200      	movs	r2, #0
 8012f90:	701a      	strb	r2, [r3, #0]
        if (strcmp(params, "delete_tid") == 0)
 8012f92:	4975      	ldr	r1, [pc, #468]	; (8013168 <gos_shellCommandHandler+0x2c0>)
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f7ed f93b 	bl	8000210 <strcmp>
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d120      	bne.n	8012fe2 <gos_shellCommandHandler+0x13a>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8012fa0:	7dfb      	ldrb	r3, [r7, #23]
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	75fb      	strb	r3, [r7, #23]
 8012fa6:	7dfb      	ldrb	r3, [r7, #23]
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	4413      	add	r3, r2
 8012fac:	2210      	movs	r2, #16
 8012fae:	2100      	movs	r1, #0
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f002 f919 	bl	80151e8 <strtol>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	82bb      	strh	r3, [r7, #20]
            if (gos_taskDelete(taskId) == GOS_SUCCESS)
 8012fbc:	8abb      	ldrh	r3, [r7, #20]
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f7fd fa70 	bl	80104a4 <gos_taskDelete>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2b55      	cmp	r3, #85	; 0x55
 8012fc8:	d105      	bne.n	8012fd6 <gos_shellCommandHandler+0x12e>
                (void_t) gos_shellDriverTransmitString("0x%X task has been deleted.\r\n", taskId);
 8012fca:	8abb      	ldrh	r3, [r7, #20]
 8012fcc:	4619      	mov	r1, r3
 8012fce:	4867      	ldr	r0, [pc, #412]	; (801316c <gos_shellCommandHandler+0x2c4>)
 8012fd0:	f002 f814 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8012fd4:	e1b1      	b.n	801333a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be deleted.\r\n", taskId);
 8012fd6:	8abb      	ldrh	r3, [r7, #20]
 8012fd8:	4619      	mov	r1, r3
 8012fda:	4865      	ldr	r0, [pc, #404]	; (8013170 <gos_shellCommandHandler+0x2c8>)
 8012fdc:	f002 f80e 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8012fe0:	e1ab      	b.n	801333a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "delete") == 0)
 8012fe2:	4964      	ldr	r1, [pc, #400]	; (8013174 <gos_shellCommandHandler+0x2cc>)
 8012fe4:	6878      	ldr	r0, [r7, #4]
 8012fe6:	f7ed f913 	bl	8000210 <strcmp>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d129      	bne.n	8013044 <gos_shellCommandHandler+0x19c>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 8012ff0:	7dfb      	ldrb	r3, [r7, #23]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	75fb      	strb	r3, [r7, #23]
 8012ff6:	7dfb      	ldrb	r3, [r7, #23]
 8012ff8:	687a      	ldr	r2, [r7, #4]
 8012ffa:	4413      	add	r3, r2
 8012ffc:	f107 0214 	add.w	r2, r7, #20
 8013000:	4611      	mov	r1, r2
 8013002:	4618      	mov	r0, r3
 8013004:	f7fd ff3e 	bl	8010e84 <gos_taskGetId>
 8013008:	4603      	mov	r3, r0
 801300a:	2b55      	cmp	r3, #85	; 0x55
 801300c:	d116      	bne.n	801303c <gos_shellCommandHandler+0x194>
                if (gos_taskDelete(taskId) == GOS_SUCCESS)
 801300e:	8abb      	ldrh	r3, [r7, #20]
 8013010:	4618      	mov	r0, r3
 8013012:	f7fd fa47 	bl	80104a4 <gos_taskDelete>
 8013016:	4603      	mov	r3, r0
 8013018:	2b55      	cmp	r3, #85	; 0x55
 801301a:	d107      	bne.n	801302c <gos_shellCommandHandler+0x184>
                    (void_t) gos_shellDriverTransmitString("%s has been deleted.\r\n", &params[index]);
 801301c:	7dfb      	ldrb	r3, [r7, #23]
 801301e:	687a      	ldr	r2, [r7, #4]
 8013020:	4413      	add	r3, r2
 8013022:	4619      	mov	r1, r3
 8013024:	4854      	ldr	r0, [pc, #336]	; (8013178 <gos_shellCommandHandler+0x2d0>)
 8013026:	f001 ffe9 	bl	8014ffc <gos_shellDriverTransmitString>
}
 801302a:	e186      	b.n	801333a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be deleted.\r\n", &params[index]);
 801302c:	7dfb      	ldrb	r3, [r7, #23]
 801302e:	687a      	ldr	r2, [r7, #4]
 8013030:	4413      	add	r3, r2
 8013032:	4619      	mov	r1, r3
 8013034:	4851      	ldr	r0, [pc, #324]	; (801317c <gos_shellCommandHandler+0x2d4>)
 8013036:	f001 ffe1 	bl	8014ffc <gos_shellDriverTransmitString>
}
 801303a:	e17e      	b.n	801333a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 801303c:	4850      	ldr	r0, [pc, #320]	; (8013180 <gos_shellCommandHandler+0x2d8>)
 801303e:	f001 ffdd 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8013042:	e17a      	b.n	801333a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "suspend_tid") == 0)
 8013044:	494f      	ldr	r1, [pc, #316]	; (8013184 <gos_shellCommandHandler+0x2dc>)
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f7ed f8e2 	bl	8000210 <strcmp>
 801304c:	4603      	mov	r3, r0
 801304e:	2b00      	cmp	r3, #0
 8013050:	d120      	bne.n	8013094 <gos_shellCommandHandler+0x1ec>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8013052:	7dfb      	ldrb	r3, [r7, #23]
 8013054:	3301      	adds	r3, #1
 8013056:	75fb      	strb	r3, [r7, #23]
 8013058:	7dfb      	ldrb	r3, [r7, #23]
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	4413      	add	r3, r2
 801305e:	2210      	movs	r2, #16
 8013060:	2100      	movs	r1, #0
 8013062:	4618      	mov	r0, r3
 8013064:	f002 f8c0 	bl	80151e8 <strtol>
 8013068:	4603      	mov	r3, r0
 801306a:	b29b      	uxth	r3, r3
 801306c:	82bb      	strh	r3, [r7, #20]
            if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 801306e:	8abb      	ldrh	r3, [r7, #20]
 8013070:	4618      	mov	r0, r3
 8013072:	f7fc fe4b 	bl	800fd0c <gos_taskSuspend>
 8013076:	4603      	mov	r3, r0
 8013078:	2b55      	cmp	r3, #85	; 0x55
 801307a:	d105      	bne.n	8013088 <gos_shellCommandHandler+0x1e0>
                (void_t) gos_shellDriverTransmitString("0x%X task has been suspended.\r\n", taskId);
 801307c:	8abb      	ldrh	r3, [r7, #20]
 801307e:	4619      	mov	r1, r3
 8013080:	4841      	ldr	r0, [pc, #260]	; (8013188 <gos_shellCommandHandler+0x2e0>)
 8013082:	f001 ffbb 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8013086:	e158      	b.n	801333a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be suspended.\r\n", taskId);
 8013088:	8abb      	ldrh	r3, [r7, #20]
 801308a:	4619      	mov	r1, r3
 801308c:	483f      	ldr	r0, [pc, #252]	; (801318c <gos_shellCommandHandler+0x2e4>)
 801308e:	f001 ffb5 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8013092:	e152      	b.n	801333a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "suspend") == 0)
 8013094:	493e      	ldr	r1, [pc, #248]	; (8013190 <gos_shellCommandHandler+0x2e8>)
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f7ed f8ba 	bl	8000210 <strcmp>
 801309c:	4603      	mov	r3, r0
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d129      	bne.n	80130f6 <gos_shellCommandHandler+0x24e>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 80130a2:	7dfb      	ldrb	r3, [r7, #23]
 80130a4:	3301      	adds	r3, #1
 80130a6:	75fb      	strb	r3, [r7, #23]
 80130a8:	7dfb      	ldrb	r3, [r7, #23]
 80130aa:	687a      	ldr	r2, [r7, #4]
 80130ac:	4413      	add	r3, r2
 80130ae:	f107 0214 	add.w	r2, r7, #20
 80130b2:	4611      	mov	r1, r2
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fd fee5 	bl	8010e84 <gos_taskGetId>
 80130ba:	4603      	mov	r3, r0
 80130bc:	2b55      	cmp	r3, #85	; 0x55
 80130be:	d116      	bne.n	80130ee <gos_shellCommandHandler+0x246>
                if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 80130c0:	8abb      	ldrh	r3, [r7, #20]
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7fc fe22 	bl	800fd0c <gos_taskSuspend>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b55      	cmp	r3, #85	; 0x55
 80130cc:	d107      	bne.n	80130de <gos_shellCommandHandler+0x236>
                    (void_t) gos_shellDriverTransmitString("%s has been suspended.\r\n", &params[index]);
 80130ce:	7dfb      	ldrb	r3, [r7, #23]
 80130d0:	687a      	ldr	r2, [r7, #4]
 80130d2:	4413      	add	r3, r2
 80130d4:	4619      	mov	r1, r3
 80130d6:	482f      	ldr	r0, [pc, #188]	; (8013194 <gos_shellCommandHandler+0x2ec>)
 80130d8:	f001 ff90 	bl	8014ffc <gos_shellDriverTransmitString>
}
 80130dc:	e12d      	b.n	801333a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be suspended.\r\n", &params[index]);
 80130de:	7dfb      	ldrb	r3, [r7, #23]
 80130e0:	687a      	ldr	r2, [r7, #4]
 80130e2:	4413      	add	r3, r2
 80130e4:	4619      	mov	r1, r3
 80130e6:	482c      	ldr	r0, [pc, #176]	; (8013198 <gos_shellCommandHandler+0x2f0>)
 80130e8:	f001 ff88 	bl	8014ffc <gos_shellDriverTransmitString>
}
 80130ec:	e125      	b.n	801333a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 80130ee:	4824      	ldr	r0, [pc, #144]	; (8013180 <gos_shellCommandHandler+0x2d8>)
 80130f0:	f001 ff84 	bl	8014ffc <gos_shellDriverTransmitString>
}
 80130f4:	e121      	b.n	801333a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "resume_tid") == 0)
 80130f6:	4929      	ldr	r1, [pc, #164]	; (801319c <gos_shellCommandHandler+0x2f4>)
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f7ed f889 	bl	8000210 <strcmp>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d151      	bne.n	80131a8 <gos_shellCommandHandler+0x300>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8013104:	7dfb      	ldrb	r3, [r7, #23]
 8013106:	3301      	adds	r3, #1
 8013108:	75fb      	strb	r3, [r7, #23]
 801310a:	7dfb      	ldrb	r3, [r7, #23]
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	4413      	add	r3, r2
 8013110:	2210      	movs	r2, #16
 8013112:	2100      	movs	r1, #0
 8013114:	4618      	mov	r0, r3
 8013116:	f002 f867 	bl	80151e8 <strtol>
 801311a:	4603      	mov	r3, r0
 801311c:	b29b      	uxth	r3, r3
 801311e:	82bb      	strh	r3, [r7, #20]
            if (gos_taskResume(taskId) == GOS_SUCCESS)
 8013120:	8abb      	ldrh	r3, [r7, #20]
 8013122:	4618      	mov	r0, r3
 8013124:	f7fc ff14 	bl	800ff50 <gos_taskResume>
 8013128:	4603      	mov	r3, r0
 801312a:	2b55      	cmp	r3, #85	; 0x55
 801312c:	d105      	bne.n	801313a <gos_shellCommandHandler+0x292>
                (void_t) gos_shellDriverTransmitString("0x%X task has been resumed.\r\n", taskId);
 801312e:	8abb      	ldrh	r3, [r7, #20]
 8013130:	4619      	mov	r1, r3
 8013132:	481b      	ldr	r0, [pc, #108]	; (80131a0 <gos_shellCommandHandler+0x2f8>)
 8013134:	f001 ff62 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8013138:	e0ff      	b.n	801333a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be resumed.\r\n", taskId);
 801313a:	8abb      	ldrh	r3, [r7, #20]
 801313c:	4619      	mov	r1, r3
 801313e:	4819      	ldr	r0, [pc, #100]	; (80131a4 <gos_shellCommandHandler+0x2fc>)
 8013140:	f001 ff5c 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8013144:	e0f9      	b.n	801333a <gos_shellCommandHandler+0x492>
 8013146:	bf00      	nop
 8013148:	080192e0 	.word	0x080192e0
 801314c:	080192e8 	.word	0x080192e8
 8013150:	080192f0 	.word	0x080192f0
 8013154:	080192f8 	.word	0x080192f8
 8013158:	2000d3bc 	.word	0x2000d3bc
 801315c:	08019320 	.word	0x08019320
 8013160:	08019328 	.word	0x08019328
 8013164:	080193d4 	.word	0x080193d4
 8013168:	080193dc 	.word	0x080193dc
 801316c:	080193e8 	.word	0x080193e8
 8013170:	08019408 	.word	0x08019408
 8013174:	0801942c 	.word	0x0801942c
 8013178:	08019434 	.word	0x08019434
 801317c:	0801944c 	.word	0x0801944c
 8013180:	08019468 	.word	0x08019468
 8013184:	08019484 	.word	0x08019484
 8013188:	08019490 	.word	0x08019490
 801318c:	080194b0 	.word	0x080194b0
 8013190:	080194d4 	.word	0x080194d4
 8013194:	080194dc 	.word	0x080194dc
 8013198:	080194f8 	.word	0x080194f8
 801319c:	08019518 	.word	0x08019518
 80131a0:	08019524 	.word	0x08019524
 80131a4:	08019544 	.word	0x08019544
        else if (strcmp(params, "resume") == 0)
 80131a8:	4966      	ldr	r1, [pc, #408]	; (8013344 <gos_shellCommandHandler+0x49c>)
 80131aa:	6878      	ldr	r0, [r7, #4]
 80131ac:	f7ed f830 	bl	8000210 <strcmp>
 80131b0:	4603      	mov	r3, r0
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d129      	bne.n	801320a <gos_shellCommandHandler+0x362>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 80131b6:	7dfb      	ldrb	r3, [r7, #23]
 80131b8:	3301      	adds	r3, #1
 80131ba:	75fb      	strb	r3, [r7, #23]
 80131bc:	7dfb      	ldrb	r3, [r7, #23]
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	4413      	add	r3, r2
 80131c2:	f107 0214 	add.w	r2, r7, #20
 80131c6:	4611      	mov	r1, r2
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7fd fe5b 	bl	8010e84 <gos_taskGetId>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b55      	cmp	r3, #85	; 0x55
 80131d2:	d116      	bne.n	8013202 <gos_shellCommandHandler+0x35a>
                if (gos_taskResume(taskId) == GOS_SUCCESS)
 80131d4:	8abb      	ldrh	r3, [r7, #20]
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7fc feba 	bl	800ff50 <gos_taskResume>
 80131dc:	4603      	mov	r3, r0
 80131de:	2b55      	cmp	r3, #85	; 0x55
 80131e0:	d107      	bne.n	80131f2 <gos_shellCommandHandler+0x34a>
                    (void_t) gos_shellDriverTransmitString("%s has been resumed.\r\n", &params[index]);
 80131e2:	7dfb      	ldrb	r3, [r7, #23]
 80131e4:	687a      	ldr	r2, [r7, #4]
 80131e6:	4413      	add	r3, r2
 80131e8:	4619      	mov	r1, r3
 80131ea:	4857      	ldr	r0, [pc, #348]	; (8013348 <gos_shellCommandHandler+0x4a0>)
 80131ec:	f001 ff06 	bl	8014ffc <gos_shellDriverTransmitString>
}
 80131f0:	e0a3      	b.n	801333a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be resumed.\r\n", &params[index]);
 80131f2:	7dfb      	ldrb	r3, [r7, #23]
 80131f4:	687a      	ldr	r2, [r7, #4]
 80131f6:	4413      	add	r3, r2
 80131f8:	4619      	mov	r1, r3
 80131fa:	4854      	ldr	r0, [pc, #336]	; (801334c <gos_shellCommandHandler+0x4a4>)
 80131fc:	f001 fefe 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8013200:	e09b      	b.n	801333a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 8013202:	4853      	ldr	r0, [pc, #332]	; (8013350 <gos_shellCommandHandler+0x4a8>)
 8013204:	f001 fefa 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8013208:	e097      	b.n	801333a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "unblock_tid") == 0)
 801320a:	4952      	ldr	r1, [pc, #328]	; (8013354 <gos_shellCommandHandler+0x4ac>)
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f7ec ffff 	bl	8000210 <strcmp>
 8013212:	4603      	mov	r3, r0
 8013214:	2b00      	cmp	r3, #0
 8013216:	d120      	bne.n	801325a <gos_shellCommandHandler+0x3b2>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8013218:	7dfb      	ldrb	r3, [r7, #23]
 801321a:	3301      	adds	r3, #1
 801321c:	75fb      	strb	r3, [r7, #23]
 801321e:	7dfb      	ldrb	r3, [r7, #23]
 8013220:	687a      	ldr	r2, [r7, #4]
 8013222:	4413      	add	r3, r2
 8013224:	2210      	movs	r2, #16
 8013226:	2100      	movs	r1, #0
 8013228:	4618      	mov	r0, r3
 801322a:	f001 ffdd 	bl	80151e8 <strtol>
 801322e:	4603      	mov	r3, r0
 8013230:	b29b      	uxth	r3, r3
 8013232:	82bb      	strh	r3, [r7, #20]
            if (gos_taskUnblock(taskId) == GOS_SUCCESS)
 8013234:	8abb      	ldrh	r3, [r7, #20]
 8013236:	4618      	mov	r0, r3
 8013238:	f7fd f84a 	bl	80102d0 <gos_taskUnblock>
 801323c:	4603      	mov	r3, r0
 801323e:	2b55      	cmp	r3, #85	; 0x55
 8013240:	d105      	bne.n	801324e <gos_shellCommandHandler+0x3a6>
                (void_t) gos_shellDriverTransmitString("0x%X task has been unblocked.\r\n", taskId);
 8013242:	8abb      	ldrh	r3, [r7, #20]
 8013244:	4619      	mov	r1, r3
 8013246:	4844      	ldr	r0, [pc, #272]	; (8013358 <gos_shellCommandHandler+0x4b0>)
 8013248:	f001 fed8 	bl	8014ffc <gos_shellDriverTransmitString>
}
 801324c:	e075      	b.n	801333a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be unblocked.\r\n", taskId);
 801324e:	8abb      	ldrh	r3, [r7, #20]
 8013250:	4619      	mov	r1, r3
 8013252:	4842      	ldr	r0, [pc, #264]	; (801335c <gos_shellCommandHandler+0x4b4>)
 8013254:	f001 fed2 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8013258:	e06f      	b.n	801333a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "unblock") == 0)
 801325a:	4941      	ldr	r1, [pc, #260]	; (8013360 <gos_shellCommandHandler+0x4b8>)
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f7ec ffd7 	bl	8000210 <strcmp>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d129      	bne.n	80132bc <gos_shellCommandHandler+0x414>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 8013268:	7dfb      	ldrb	r3, [r7, #23]
 801326a:	3301      	adds	r3, #1
 801326c:	75fb      	strb	r3, [r7, #23]
 801326e:	7dfb      	ldrb	r3, [r7, #23]
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	4413      	add	r3, r2
 8013274:	f107 0214 	add.w	r2, r7, #20
 8013278:	4611      	mov	r1, r2
 801327a:	4618      	mov	r0, r3
 801327c:	f7fd fe02 	bl	8010e84 <gos_taskGetId>
 8013280:	4603      	mov	r3, r0
 8013282:	2b55      	cmp	r3, #85	; 0x55
 8013284:	d116      	bne.n	80132b4 <gos_shellCommandHandler+0x40c>
                if (gos_taskUnblock(taskId) == GOS_SUCCESS)
 8013286:	8abb      	ldrh	r3, [r7, #20]
 8013288:	4618      	mov	r0, r3
 801328a:	f7fd f821 	bl	80102d0 <gos_taskUnblock>
 801328e:	4603      	mov	r3, r0
 8013290:	2b55      	cmp	r3, #85	; 0x55
 8013292:	d107      	bne.n	80132a4 <gos_shellCommandHandler+0x3fc>
                    (void_t) gos_shellDriverTransmitString("%s has been unblocked.\r\n", &params[index]);
 8013294:	7dfb      	ldrb	r3, [r7, #23]
 8013296:	687a      	ldr	r2, [r7, #4]
 8013298:	4413      	add	r3, r2
 801329a:	4619      	mov	r1, r3
 801329c:	4831      	ldr	r0, [pc, #196]	; (8013364 <gos_shellCommandHandler+0x4bc>)
 801329e:	f001 fead 	bl	8014ffc <gos_shellDriverTransmitString>
}
 80132a2:	e04a      	b.n	801333a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be unblocked.\r\n", &params[index]);
 80132a4:	7dfb      	ldrb	r3, [r7, #23]
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	4413      	add	r3, r2
 80132aa:	4619      	mov	r1, r3
 80132ac:	482e      	ldr	r0, [pc, #184]	; (8013368 <gos_shellCommandHandler+0x4c0>)
 80132ae:	f001 fea5 	bl	8014ffc <gos_shellDriverTransmitString>
}
 80132b2:	e042      	b.n	801333a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 80132b4:	4826      	ldr	r0, [pc, #152]	; (8013350 <gos_shellCommandHandler+0x4a8>)
 80132b6:	f001 fea1 	bl	8014ffc <gos_shellDriverTransmitString>
}
 80132ba:	e03e      	b.n	801333a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "cpu") == 0)
 80132bc:	492b      	ldr	r1, [pc, #172]	; (801336c <gos_shellCommandHandler+0x4c4>)
 80132be:	6878      	ldr	r0, [r7, #4]
 80132c0:	f7ec ffa6 	bl	8000210 <strcmp>
 80132c4:	4603      	mov	r3, r0
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d11b      	bne.n	8013302 <gos_shellCommandHandler+0x45a>
            (void_t) gos_shellDriverTransmitString("CPU usage: %u.%02u%%\r\n", (gos_kernelGetCpuUsage() / 100), (gos_kernelGetCpuUsage() % 100));
 80132ca:	f7fb fa2f 	bl	800e72c <gos_kernelGetCpuUsage>
 80132ce:	4603      	mov	r3, r0
 80132d0:	461a      	mov	r2, r3
 80132d2:	4b27      	ldr	r3, [pc, #156]	; (8013370 <gos_shellCommandHandler+0x4c8>)
 80132d4:	fba3 2302 	umull	r2, r3, r3, r2
 80132d8:	095b      	lsrs	r3, r3, #5
 80132da:	b29b      	uxth	r3, r3
 80132dc:	461c      	mov	r4, r3
 80132de:	f7fb fa25 	bl	800e72c <gos_kernelGetCpuUsage>
 80132e2:	4603      	mov	r3, r0
 80132e4:	4a22      	ldr	r2, [pc, #136]	; (8013370 <gos_shellCommandHandler+0x4c8>)
 80132e6:	fba2 1203 	umull	r1, r2, r2, r3
 80132ea:	0952      	lsrs	r2, r2, #5
 80132ec:	2164      	movs	r1, #100	; 0x64
 80132ee:	fb01 f202 	mul.w	r2, r1, r2
 80132f2:	1a9b      	subs	r3, r3, r2
 80132f4:	b29b      	uxth	r3, r3
 80132f6:	461a      	mov	r2, r3
 80132f8:	4621      	mov	r1, r4
 80132fa:	481e      	ldr	r0, [pc, #120]	; (8013374 <gos_shellCommandHandler+0x4cc>)
 80132fc:	f001 fe7e 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8013300:	e01b      	b.n	801333a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "runtime") == 0)
 8013302:	491d      	ldr	r1, [pc, #116]	; (8013378 <gos_shellCommandHandler+0x4d0>)
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f7ec ff83 	bl	8000210 <strcmp>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d114      	bne.n	801333a <gos_shellCommandHandler+0x492>
            (void_t) gos_runTimeGet(&totalRunTime);
 8013310:	f107 0308 	add.w	r3, r7, #8
 8013314:	4618      	mov	r0, r3
 8013316:	f000 fe7f 	bl	8014018 <gos_runTimeGet>
                    totalRunTime.days,
 801331a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 801331e:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8013320:	4619      	mov	r1, r3
                    totalRunTime.hours,
 8013322:	7bbb      	ldrb	r3, [r7, #14]
            (void_t) gos_shellDriverTransmitString(
 8013324:	461a      	mov	r2, r3
                    totalRunTime.minutes,
 8013326:	7b7b      	ldrb	r3, [r7, #13]
            (void_t) gos_shellDriverTransmitString(
 8013328:	4618      	mov	r0, r3
                    totalRunTime.seconds
 801332a:	7b3b      	ldrb	r3, [r7, #12]
            (void_t) gos_shellDriverTransmitString(
 801332c:	9300      	str	r3, [sp, #0]
 801332e:	4603      	mov	r3, r0
 8013330:	4812      	ldr	r0, [pc, #72]	; (801337c <gos_shellCommandHandler+0x4d4>)
 8013332:	f001 fe63 	bl	8014ffc <gos_shellDriverTransmitString>
}
 8013336:	e000      	b.n	801333a <gos_shellCommandHandler+0x492>
                break;
 8013338:	bf00      	nop
}
 801333a:	bf00      	nop
 801333c:	371c      	adds	r7, #28
 801333e:	46bd      	mov	sp, r7
 8013340:	bd90      	pop	{r4, r7, pc}
 8013342:	bf00      	nop
 8013344:	08019568 	.word	0x08019568
 8013348:	08019570 	.word	0x08019570
 801334c:	08019588 	.word	0x08019588
 8013350:	08019468 	.word	0x08019468
 8013354:	080195a4 	.word	0x080195a4
 8013358:	080195b0 	.word	0x080195b0
 801335c:	080195d0 	.word	0x080195d0
 8013360:	080195f4 	.word	0x080195f4
 8013364:	080195fc 	.word	0x080195fc
 8013368:	08019618 	.word	0x08019618
 801336c:	08019638 	.word	0x08019638
 8013370:	51eb851f 	.word	0x51eb851f
 8013374:	0801963c 	.word	0x0801963c
 8013378:	08019654 	.word	0x08019654
 801337c:	0801965c 	.word	0x0801965c

08013380 <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b082      	sub	sp, #8
 8013384:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_SUCCESS;
 8013386:	2355      	movs	r3, #85	; 0x55
 8013388:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 801338a:	2300      	movs	r3, #0
 801338c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 801338e:	2300      	movs	r3, #0
 8013390:	71bb      	strb	r3, [r7, #6]
 8013392:	e00a      	b.n	80133aa <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 8013394:	79bb      	ldrb	r3, [r7, #6]
 8013396:	4a16      	ldr	r2, [pc, #88]	; (80133f0 <gos_signalInit+0x70>)
 8013398:	212c      	movs	r1, #44	; 0x2c
 801339a:	fb01 f303 	mul.w	r3, r1, r3
 801339e:	4413      	add	r3, r2
 80133a0:	2249      	movs	r2, #73	; 0x49
 80133a2:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 80133a4:	79bb      	ldrb	r3, [r7, #6]
 80133a6:	3301      	adds	r3, #1
 80133a8:	71bb      	strb	r3, [r7, #6]
 80133aa:	79bb      	ldrb	r3, [r7, #6]
 80133ac:	2b05      	cmp	r3, #5
 80133ae:	d9f1      	bls.n	8013394 <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 80133b0:	2100      	movs	r1, #0
 80133b2:	4810      	ldr	r0, [pc, #64]	; (80133f4 <gos_signalInit+0x74>)
 80133b4:	f7fc f9cc 	bl	800f750 <gos_taskRegister>
 80133b8:	4603      	mov	r3, r0
 80133ba:	2b55      	cmp	r3, #85	; 0x55
 80133bc:	d111      	bne.n	80133e2 <gos_signalInit+0x62>
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 80133be:	480e      	ldr	r0, [pc, #56]	; (80133f8 <gos_signalInit+0x78>)
 80133c0:	f000 f820 	bl	8013404 <gos_signalCreate>
 80133c4:	4603      	mov	r3, r0
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 80133c6:	2b55      	cmp	r3, #85	; 0x55
 80133c8:	d10b      	bne.n	80133e2 <gos_signalInit+0x62>
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 80133ca:	480c      	ldr	r0, [pc, #48]	; (80133fc <gos_signalInit+0x7c>)
 80133cc:	f000 f81a 	bl	8013404 <gos_signalCreate>
 80133d0:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 80133d2:	2b55      	cmp	r3, #85	; 0x55
 80133d4:	d105      	bne.n	80133e2 <gos_signalInit+0x62>
        gos_triggerInit(&signalInvokeTrigger)               != GOS_SUCCESS
 80133d6:	480a      	ldr	r0, [pc, #40]	; (8013400 <gos_signalInit+0x80>)
 80133d8:	f001 fc0c 	bl	8014bf4 <gos_triggerInit>
 80133dc:	4603      	mov	r3, r0
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 80133de:	2b55      	cmp	r3, #85	; 0x55
 80133e0:	d001      	beq.n	80133e6 <gos_signalInit+0x66>
    )
    {
        signalInitResult = GOS_ERROR;
 80133e2:	23ae      	movs	r3, #174	; 0xae
 80133e4:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 80133e6:	79fb      	ldrb	r3, [r7, #7]
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3708      	adds	r7, #8
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}
 80133f0:	2000d6e0 	.word	0x2000d6e0
 80133f4:	20001fb4 	.word	0x20001fb4
 80133f8:	20005114 	.word	0x20005114
 80133fc:	200050e8 	.word	0x200050e8
 8013400:	2000d7e8 	.word	0x2000d7e8

08013404 <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 8013404:	b480      	push	{r7}
 8013406:	b085      	sub	sp, #20
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 801340c:	23ae      	movs	r3, #174	; 0xae
 801340e:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 8013410:	2300      	movs	r3, #0
 8013412:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8013414:	2300      	movs	r3, #0
 8013416:	73bb      	strb	r3, [r7, #14]
 8013418:	e025      	b.n	8013466 <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 801341a:	7bbb      	ldrb	r3, [r7, #14]
 801341c:	4a17      	ldr	r2, [pc, #92]	; (801347c <gos_signalCreate+0x78>)
 801341e:	212c      	movs	r1, #44	; 0x2c
 8013420:	fb01 f303 	mul.w	r3, r1, r3
 8013424:	4413      	add	r3, r2
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	2b49      	cmp	r3, #73	; 0x49
 801342a:	d119      	bne.n	8013460 <gos_signalCreate+0x5c>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d016      	beq.n	8013460 <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	7bba      	ldrb	r2, [r7, #14]
 8013436:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 8013438:	7bbb      	ldrb	r3, [r7, #14]
 801343a:	4a10      	ldr	r2, [pc, #64]	; (801347c <gos_signalCreate+0x78>)
 801343c:	212c      	movs	r1, #44	; 0x2c
 801343e:	fb01 f303 	mul.w	r3, r1, r3
 8013442:	4413      	add	r3, r2
 8013444:	2236      	movs	r2, #54	; 0x36
 8013446:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 8013448:	7bbb      	ldrb	r3, [r7, #14]
 801344a:	4a0c      	ldr	r2, [pc, #48]	; (801347c <gos_signalCreate+0x78>)
 801344c:	212c      	movs	r1, #44	; 0x2c
 801344e:	fb01 f303 	mul.w	r3, r1, r3
 8013452:	4413      	add	r3, r2
 8013454:	3328      	adds	r3, #40	; 0x28
 8013456:	2249      	movs	r2, #73	; 0x49
 8013458:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 801345a:	2355      	movs	r3, #85	; 0x55
 801345c:	73fb      	strb	r3, [r7, #15]
            break;
 801345e:	e005      	b.n	801346c <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8013460:	7bbb      	ldrb	r3, [r7, #14]
 8013462:	3301      	adds	r3, #1
 8013464:	73bb      	strb	r3, [r7, #14]
 8013466:	7bbb      	ldrb	r3, [r7, #14]
 8013468:	2b05      	cmp	r3, #5
 801346a:	d9d6      	bls.n	801341a <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 801346c:	7bfb      	ldrb	r3, [r7, #15]
}
 801346e:	4618      	mov	r0, r3
 8013470:	3714      	adds	r7, #20
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr
 801347a:	bf00      	nop
 801347c:	2000d6e0 	.word	0x2000d6e0

08013480 <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b0a0      	sub	sp, #128	; 0x80
 8013484:	af02      	add	r7, sp, #8
 8013486:	4603      	mov	r3, r0
 8013488:	460a      	mov	r2, r1
 801348a:	71fb      	strb	r3, [r7, #7]
 801348c:	4613      	mov	r3, r2
 801348e:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 8013490:	23ae      	movs	r3, #174	; 0xae
 8013492:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 8013496:	f44f 7380 	mov.w	r3, #256	; 0x100
 801349a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
    gos_taskDescriptor_t callerTaskDesc     = {0};
 801349e:	f107 0308 	add.w	r3, r7, #8
 80134a2:	226a      	movs	r2, #106	; 0x6a
 80134a4:	2100      	movs	r1, #0
 80134a6:	4618      	mov	r0, r3
 80134a8:	f002 fc54 	bl	8015d54 <memset>

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 80134ac:	79fb      	ldrb	r3, [r7, #7]
 80134ae:	2b05      	cmp	r3, #5
 80134b0:	d849      	bhi.n	8013546 <gos_signalInvoke+0xc6>
 80134b2:	79fb      	ldrb	r3, [r7, #7]
 80134b4:	4a27      	ldr	r2, [pc, #156]	; (8013554 <gos_signalInvoke+0xd4>)
 80134b6:	212c      	movs	r1, #44	; 0x2c
 80134b8:	fb01 f303 	mul.w	r3, r1, r3
 80134bc:	4413      	add	r3, r2
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	2b36      	cmp	r3, #54	; 0x36
 80134c2:	d140      	bne.n	8013546 <gos_signalInvoke+0xc6>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 80134c4:	f7fb fe24 	bl	800f110 <gos_kernelIsCallerIsr>
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b36      	cmp	r3, #54	; 0x36
 80134cc:	d017      	beq.n	80134fe <gos_signalInvoke+0x7e>
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 80134ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7fd fd0e 	bl	8010ef4 <gos_taskGetCurrentId>
 80134d8:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 80134da:	2b55      	cmp	r3, #85	; 0x55
 80134dc:	d128      	bne.n	8013530 <gos_signalInvoke+0xb0>
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 80134de:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80134e2:	f107 0208 	add.w	r2, r7, #8
 80134e6:	4611      	mov	r1, r2
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7fd fd5f 	bl	8010fac <gos_taskGetData>
 80134ee:	4603      	mov	r3, r0
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 80134f0:	2b55      	cmp	r3, #85	; 0x55
 80134f2:	d11d      	bne.n	8013530 <gos_signalInvoke+0xb0>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 80134f4:	8a3b      	ldrh	r3, [r7, #16]
 80134f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d018      	beq.n	8013530 <gos_signalInvoke+0xb0>
            )
        {
            signalArray[signalId].senderId       = senderId;
 80134fe:	79fb      	ldrb	r3, [r7, #7]
 8013500:	4a14      	ldr	r2, [pc, #80]	; (8013554 <gos_signalInvoke+0xd4>)
 8013502:	212c      	movs	r1, #44	; 0x2c
 8013504:	fb01 f303 	mul.w	r3, r1, r3
 8013508:	4413      	add	r3, r2
 801350a:	332a      	adds	r3, #42	; 0x2a
 801350c:	88ba      	ldrh	r2, [r7, #4]
 801350e:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 8013510:	79fb      	ldrb	r3, [r7, #7]
 8013512:	4a10      	ldr	r2, [pc, #64]	; (8013554 <gos_signalInvoke+0xd4>)
 8013514:	212c      	movs	r1, #44	; 0x2c
 8013516:	fb01 f303 	mul.w	r3, r1, r3
 801351a:	4413      	add	r3, r2
 801351c:	3328      	adds	r3, #40	; 0x28
 801351e:	2236      	movs	r2, #54	; 0x36
 8013520:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 8013522:	2355      	movs	r3, #85	; 0x55
 8013524:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

            // Unblock signal daemon to handle signal invoking by
            // incrementing the invoke trigger.
            (void_t) gos_triggerIncrement(&signalInvokeTrigger);
 8013528:	480b      	ldr	r0, [pc, #44]	; (8013558 <gos_signalInvoke+0xd8>)
 801352a:	f001 fc87 	bl	8014e3c <gos_triggerIncrement>
 801352e:	e00a      	b.n	8013546 <gos_signalInvoke+0xc6>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 8013530:	f107 0308 	add.w	r3, r7, #8
 8013534:	330a      	adds	r3, #10
 8013536:	9300      	str	r3, [sp, #0]
 8013538:	4b08      	ldr	r3, [pc, #32]	; (801355c <gos_signalInvoke+0xdc>)
 801353a:	f240 1213 	movw	r2, #275	; 0x113
 801353e:	4908      	ldr	r1, [pc, #32]	; (8013560 <gos_signalInvoke+0xe0>)
 8013540:	202e      	movs	r0, #46	; 0x2e
 8013542:	f7fd fff1 	bl	8011528 <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 8013546:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801354a:	4618      	mov	r0, r3
 801354c:	3778      	adds	r7, #120	; 0x78
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	2000d6e0 	.word	0x2000d6e0
 8013558:	2000d7e8 	.word	0x2000d7e8
 801355c:	08019698 	.word	0x08019698
 8013560:	08019c38 	.word	0x08019c38

08013564 <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 8013564:	b590      	push	{r4, r7, lr}
 8013566:	b083      	sub	sp, #12
 8013568:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 801356a:	2300      	movs	r3, #0
 801356c:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 801356e:	2300      	movs	r3, #0
 8013570:	71bb      	strb	r3, [r7, #6]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger.
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 8013572:	f04f 32ff 	mov.w	r2, #4294967295
 8013576:	2101      	movs	r1, #1
 8013578:	4835      	ldr	r0, [pc, #212]	; (8013650 <gos_signalDaemonTask+0xec>)
 801357a:	f001 fbaf 	bl	8014cdc <gos_triggerWait>
 801357e:	4603      	mov	r3, r0
 8013580:	2b55      	cmp	r3, #85	; 0x55
 8013582:	d1f6      	bne.n	8013572 <gos_signalDaemonTask+0xe>
        {
            (void_t) gos_triggerReset(&signalInvokeTrigger);
 8013584:	4832      	ldr	r0, [pc, #200]	; (8013650 <gos_signalDaemonTask+0xec>)
 8013586:	f001 fb51 	bl	8014c2c <gos_triggerReset>
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 801358a:	2300      	movs	r3, #0
 801358c:	71bb      	strb	r3, [r7, #6]
 801358e:	e05b      	b.n	8013648 <gos_signalDaemonTask+0xe4>
            {
                if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 8013590:	79bb      	ldrb	r3, [r7, #6]
 8013592:	4a30      	ldr	r2, [pc, #192]	; (8013654 <gos_signalDaemonTask+0xf0>)
 8013594:	212c      	movs	r1, #44	; 0x2c
 8013596:	fb01 f303 	mul.w	r3, r1, r3
 801359a:	4413      	add	r3, r2
 801359c:	3328      	adds	r3, #40	; 0x28
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	2b36      	cmp	r3, #54	; 0x36
 80135a2:	d14e      	bne.n	8013642 <gos_signalDaemonTask+0xde>
                {
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 80135a4:	2300      	movs	r3, #0
 80135a6:	71fb      	strb	r3, [r7, #7]
 80135a8:	e03d      	b.n	8013626 <gos_signalDaemonTask+0xc2>
                    {
                        if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 80135aa:	79ba      	ldrb	r2, [r7, #6]
 80135ac:	79f9      	ldrb	r1, [r7, #7]
 80135ae:	4829      	ldr	r0, [pc, #164]	; (8013654 <gos_signalDaemonTask+0xf0>)
 80135b0:	4613      	mov	r3, r2
 80135b2:	009b      	lsls	r3, r3, #2
 80135b4:	4413      	add	r3, r2
 80135b6:	005b      	lsls	r3, r3, #1
 80135b8:	4413      	add	r3, r2
 80135ba:	440b      	add	r3, r1
 80135bc:	009b      	lsls	r3, r3, #2
 80135be:	4403      	add	r3, r0
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d033      	beq.n	801362e <gos_signalDaemonTask+0xca>
                            break;
                        }
                        else
                        {
                            // Switch to signal handler privilege.
                            (void_t) gos_taskSetPrivileges(
 80135c6:	4b24      	ldr	r3, [pc, #144]	; (8013658 <gos_signalDaemonTask+0xf4>)
 80135c8:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
 80135ca:	79ba      	ldrb	r2, [r7, #6]
 80135cc:	79fb      	ldrb	r3, [r7, #7]
 80135ce:	4921      	ldr	r1, [pc, #132]	; (8013654 <gos_signalDaemonTask+0xf0>)
 80135d0:	2416      	movs	r4, #22
 80135d2:	fb04 f202 	mul.w	r2, r4, r2
 80135d6:	4413      	add	r3, r2
 80135d8:	330c      	adds	r3, #12
 80135da:	005b      	lsls	r3, r3, #1
 80135dc:	440b      	add	r3, r1
 80135de:	889b      	ldrh	r3, [r3, #4]
 80135e0:	4619      	mov	r1, r3
 80135e2:	f7fd fb71 	bl	8010cc8 <gos_taskSetPrivileges>
                                    signalDaemonTaskDescriptor.taskId,
                                    signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                    );
                            // Call signal handler.
                            signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 80135e6:	79ba      	ldrb	r2, [r7, #6]
 80135e8:	79f9      	ldrb	r1, [r7, #7]
 80135ea:	481a      	ldr	r0, [pc, #104]	; (8013654 <gos_signalDaemonTask+0xf0>)
 80135ec:	4613      	mov	r3, r2
 80135ee:	009b      	lsls	r3, r3, #2
 80135f0:	4413      	add	r3, r2
 80135f2:	005b      	lsls	r3, r3, #1
 80135f4:	4413      	add	r3, r2
 80135f6:	440b      	add	r3, r1
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	4403      	add	r3, r0
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	79ba      	ldrb	r2, [r7, #6]
 8013600:	4914      	ldr	r1, [pc, #80]	; (8013654 <gos_signalDaemonTask+0xf0>)
 8013602:	202c      	movs	r0, #44	; 0x2c
 8013604:	fb00 f202 	mul.w	r2, r0, r2
 8013608:	440a      	add	r2, r1
 801360a:	322a      	adds	r2, #42	; 0x2a
 801360c:	8812      	ldrh	r2, [r2, #0]
 801360e:	4610      	mov	r0, r2
 8013610:	4798      	blx	r3

                            // Switch back to kernel privilege.
                            (void_t) gos_taskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 8013612:	4b11      	ldr	r3, [pc, #68]	; (8013658 <gos_signalDaemonTask+0xf4>)
 8013614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013616:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 801361a:	4618      	mov	r0, r3
 801361c:	f7fd fb54 	bl	8010cc8 <gos_taskSetPrivileges>
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 8013620:	79fb      	ldrb	r3, [r7, #7]
 8013622:	3301      	adds	r3, #1
 8013624:	71fb      	strb	r3, [r7, #7]
 8013626:	79fb      	ldrb	r3, [r7, #7]
 8013628:	2b05      	cmp	r3, #5
 801362a:	d9be      	bls.n	80135aa <gos_signalDaemonTask+0x46>
 801362c:	e000      	b.n	8013630 <gos_signalDaemonTask+0xcc>
                            break;
 801362e:	bf00      	nop
                        }
                    }
                    signalArray[signalIndex].invokeRequired = GOS_FALSE;
 8013630:	79bb      	ldrb	r3, [r7, #6]
 8013632:	4a08      	ldr	r2, [pc, #32]	; (8013654 <gos_signalDaemonTask+0xf0>)
 8013634:	212c      	movs	r1, #44	; 0x2c
 8013636:	fb01 f303 	mul.w	r3, r1, r3
 801363a:	4413      	add	r3, r2
 801363c:	3328      	adds	r3, #40	; 0x28
 801363e:	2249      	movs	r2, #73	; 0x49
 8013640:	701a      	strb	r2, [r3, #0]
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 8013642:	79bb      	ldrb	r3, [r7, #6]
 8013644:	3301      	adds	r3, #1
 8013646:	71bb      	strb	r3, [r7, #6]
 8013648:	79bb      	ldrb	r3, [r7, #6]
 801364a:	2b05      	cmp	r3, #5
 801364c:	d9a0      	bls.n	8013590 <gos_signalDaemonTask+0x2c>
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 801364e:	e790      	b.n	8013572 <gos_signalDaemonTask+0xe>
 8013650:	2000d7e8 	.word	0x2000d7e8
 8013654:	2000d6e0 	.word	0x2000d6e0
 8013658:	20001fb4 	.word	0x20001fb4

0801365c <gos_sysmonInit>:

/*
 * Function: gos_sysmonInit
 */
gos_result_t gos_sysmonInit (void_t)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysmonInitResult = GOS_ERROR;
 8013662:	23ae      	movs	r3, #174	; 0xae
 8013664:	71fb      	strb	r3, [r7, #7]
    u8_t         userMessageIndex = 0u;
 8013666:	2300      	movs	r3, #0
 8013668:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 801366a:	2300      	movs	r3, #0
 801366c:	71bb      	strb	r3, [r7, #6]
 801366e:	e024      	b.n	80136ba <gos_sysmonInit+0x5e>
    {
        userMessages[userMessageIndex].callback        = NULL;
 8013670:	79bb      	ldrb	r3, [r7, #6]
 8013672:	4a1e      	ldr	r2, [pc, #120]	; (80136ec <gos_sysmonInit+0x90>)
 8013674:	011b      	lsls	r3, r3, #4
 8013676:	4413      	add	r3, r2
 8013678:	330c      	adds	r3, #12
 801367a:	2200      	movs	r2, #0
 801367c:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payload         = NULL;
 801367e:	79bb      	ldrb	r3, [r7, #6]
 8013680:	4a1a      	ldr	r2, [pc, #104]	; (80136ec <gos_sysmonInit+0x90>)
 8013682:	011b      	lsls	r3, r3, #4
 8013684:	4413      	add	r3, r2
 8013686:	3304      	adds	r3, #4
 8013688:	2200      	movs	r2, #0
 801368a:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payloadSize     = 0u;
 801368c:	79bb      	ldrb	r3, [r7, #6]
 801368e:	4a17      	ldr	r2, [pc, #92]	; (80136ec <gos_sysmonInit+0x90>)
 8013690:	011b      	lsls	r3, r3, #4
 8013692:	4413      	add	r3, r2
 8013694:	3308      	adds	r3, #8
 8013696:	2200      	movs	r2, #0
 8013698:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].protocolVersion = 0u;
 801369a:	79bb      	ldrb	r3, [r7, #6]
 801369c:	4a13      	ldr	r2, [pc, #76]	; (80136ec <gos_sysmonInit+0x90>)
 801369e:	011b      	lsls	r3, r3, #4
 80136a0:	4413      	add	r3, r2
 80136a2:	3302      	adds	r3, #2
 80136a4:	2200      	movs	r2, #0
 80136a6:	801a      	strh	r2, [r3, #0]
        userMessages[userMessageIndex].messageId       = 0u;
 80136a8:	79bb      	ldrb	r3, [r7, #6]
 80136aa:	4a10      	ldr	r2, [pc, #64]	; (80136ec <gos_sysmonInit+0x90>)
 80136ac:	011b      	lsls	r3, r3, #4
 80136ae:	4413      	add	r3, r2
 80136b0:	2200      	movs	r2, #0
 80136b2:	801a      	strh	r2, [r3, #0]
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 80136b4:	79bb      	ldrb	r3, [r7, #6]
 80136b6:	3301      	adds	r3, #1
 80136b8:	71bb      	strb	r3, [r7, #6]
 80136ba:	79bb      	ldrb	r3, [r7, #6]
 80136bc:	2b09      	cmp	r3, #9
 80136be:	d9d7      	bls.n	8013670 <gos_sysmonInit+0x14>
    }

    if (gos_gcpRegisterPhysicalDriver(CFG_SYSMON_GCP_CHANNEL_NUM, gos_sysmonDriverTransmit,
 80136c0:	4a0b      	ldr	r2, [pc, #44]	; (80136f0 <gos_sysmonInit+0x94>)
 80136c2:	490c      	ldr	r1, [pc, #48]	; (80136f4 <gos_sysmonInit+0x98>)
 80136c4:	2000      	movs	r0, #0
 80136c6:	f7fe f831 	bl	801172c <gos_gcpRegisterPhysicalDriver>
 80136ca:	4603      	mov	r3, r0
 80136cc:	2b55      	cmp	r3, #85	; 0x55
 80136ce:	d108      	bne.n	80136e2 <gos_sysmonInit+0x86>
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
        gos_taskRegister(&sysmonDaemonTaskDesc, NULL) == GOS_SUCCESS)
 80136d0:	2100      	movs	r1, #0
 80136d2:	4809      	ldr	r0, [pc, #36]	; (80136f8 <gos_sysmonInit+0x9c>)
 80136d4:	f7fc f83c 	bl	800f750 <gos_taskRegister>
 80136d8:	4603      	mov	r3, r0
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
 80136da:	2b55      	cmp	r3, #85	; 0x55
 80136dc:	d101      	bne.n	80136e2 <gos_sysmonInit+0x86>
    {
        sysmonInitResult = GOS_SUCCESS;
 80136de:	2355      	movs	r3, #85	; 0x55
 80136e0:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Initialization failed.
    }

    return sysmonInitResult;
 80136e2:	79fb      	ldrb	r3, [r7, #7]
}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3708      	adds	r7, #8
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}
 80136ec:	2000e8ec 	.word	0x2000e8ec
 80136f0:	08015045 	.word	0x08015045
 80136f4:	0801507d 	.word	0x0801507d
 80136f8:	20002020 	.word	0x20002020

080136fc <gos_sysmonRegisterUserMessage>:

/*
 * Function: gos_sysmonRegisterUserMessage
 */
gos_result_t gos_sysmonRegisterUserMessage (gos_sysmonUserMessageDescriptor_t* pDesc)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b084      	sub	sp, #16
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t registerResult   = GOS_ERROR;
 8013704:	23ae      	movs	r3, #174	; 0xae
 8013706:	73fb      	strb	r3, [r7, #15]
    u8_t         userMessageIndex = 0u;
 8013708:	2300      	movs	r3, #0
 801370a:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pDesc != NULL && pDesc->callback != NULL)
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d027      	beq.n	8013762 <gos_sysmonRegisterUserMessage+0x66>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	68db      	ldr	r3, [r3, #12]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d023      	beq.n	8013762 <gos_sysmonRegisterUserMessage+0x66>
    {
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 801371a:	2300      	movs	r3, #0
 801371c:	73bb      	strb	r3, [r7, #14]
 801371e:	e01d      	b.n	801375c <gos_sysmonRegisterUserMessage+0x60>
        {
            if (userMessages[userMessageIndex].messageId == 0u &&
 8013720:	7bbb      	ldrb	r3, [r7, #14]
 8013722:	4a12      	ldr	r2, [pc, #72]	; (801376c <gos_sysmonRegisterUserMessage+0x70>)
 8013724:	011b      	lsls	r3, r3, #4
 8013726:	4413      	add	r3, r2
 8013728:	881b      	ldrh	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d113      	bne.n	8013756 <gos_sysmonRegisterUserMessage+0x5a>
                userMessages[userMessageIndex].callback == NULL)
 801372e:	7bbb      	ldrb	r3, [r7, #14]
 8013730:	4a0e      	ldr	r2, [pc, #56]	; (801376c <gos_sysmonRegisterUserMessage+0x70>)
 8013732:	011b      	lsls	r3, r3, #4
 8013734:	4413      	add	r3, r2
 8013736:	330c      	adds	r3, #12
 8013738:	681b      	ldr	r3, [r3, #0]
            if (userMessages[userMessageIndex].messageId == 0u &&
 801373a:	2b00      	cmp	r3, #0
 801373c:	d10b      	bne.n	8013756 <gos_sysmonRegisterUserMessage+0x5a>
            {
                // Store user message descriptor.
                (void_t) memcpy((void_t*)&userMessages[userMessageIndex], (void_t*)pDesc, sizeof(*pDesc));
 801373e:	7bbb      	ldrb	r3, [r7, #14]
 8013740:	011b      	lsls	r3, r3, #4
 8013742:	4a0a      	ldr	r2, [pc, #40]	; (801376c <gos_sysmonRegisterUserMessage+0x70>)
 8013744:	4413      	add	r3, r2
 8013746:	2210      	movs	r2, #16
 8013748:	6879      	ldr	r1, [r7, #4]
 801374a:	4618      	mov	r0, r3
 801374c:	f002 fb89 	bl	8015e62 <memcpy>
                registerResult = GOS_SUCCESS;
 8013750:	2355      	movs	r3, #85	; 0x55
 8013752:	73fb      	strb	r3, [r7, #15]
                break;
 8013754:	e005      	b.n	8013762 <gos_sysmonRegisterUserMessage+0x66>
        for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 8013756:	7bbb      	ldrb	r3, [r7, #14]
 8013758:	3301      	adds	r3, #1
 801375a:	73bb      	strb	r3, [r7, #14]
 801375c:	7bbb      	ldrb	r3, [r7, #14]
 801375e:	2b09      	cmp	r3, #9
 8013760:	d9de      	bls.n	8013720 <gos_sysmonRegisterUserMessage+0x24>
    else
    {
        // Error.
    }

    return registerResult;
 8013762:	7bfb      	ldrb	r3, [r7, #15]
}
 8013764:	4618      	mov	r0, r3
 8013766:	3710      	adds	r7, #16
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	2000e8ec 	.word	0x2000e8ec

08013770 <gos_sysmonDaemonTask>:
 * @details Serves the incoming system monitoring messages.
 *
 * @return -
 */
GOS_STATIC void_t gos_sysmonDaemonTask (void_t)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af02      	add	r7, sp, #8
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t lutIndex         = 0u;
 8013776:	2300      	movs	r3, #0
 8013778:	71bb      	strb	r3, [r7, #6]
    u8_t                    userMessageIndex = 0u;
 801377a:	2300      	movs	r3, #0
 801377c:	71fb      	strb	r3, [r7, #7]
    u16_t                   messageId        = 0u;
 801377e:	2300      	movs	r3, #0
 8013780:	80bb      	strh	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Reset message ID.
        messageId = 0u;
 8013782:	2300      	movs	r3, #0
 8013784:	80bb      	strh	r3, [r7, #4]

        // Check if a message was received.
        if (gos_gcpReceiveMessage(CFG_SYSMON_GCP_CHANNEL_NUM, &messageId, receiveBuffer, RECEIVE_BUFFER_SIZE, 0xFFFF) == GOS_SUCCESS)
 8013786:	1d39      	adds	r1, r7, #4
 8013788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801378c:	9300      	str	r3, [sp, #0]
 801378e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013792:	4a33      	ldr	r2, [pc, #204]	; (8013860 <gos_sysmonDaemonTask+0xf0>)
 8013794:	2000      	movs	r0, #0
 8013796:	f7fe f923 	bl	80119e0 <gos_gcpReceiveMessage>
 801379a:	4603      	mov	r3, r0
 801379c:	2b55      	cmp	r3, #85	; 0x55
 801379e:	d15a      	bne.n	8013856 <gos_sysmonDaemonTask+0xe6>
        {
            // Get LUT index.
            lutIndex = gos_sysmonGetLutIndex(messageId);
 80137a0:	88bb      	ldrh	r3, [r7, #4]
 80137a2:	4618      	mov	r0, r3
 80137a4:	f000 f862 	bl	801386c <gos_sysmonGetLutIndex>
 80137a8:	4603      	mov	r3, r0
 80137aa:	71bb      	strb	r3, [r7, #6]

            // Check user registered messages.
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 80137ac:	79bb      	ldrb	r3, [r7, #6]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d002      	beq.n	80137b8 <gos_sysmonDaemonTask+0x48>
 80137b2:	79bb      	ldrb	r3, [r7, #6]
 80137b4:	2b10      	cmp	r3, #16
 80137b6:	d138      	bne.n	801382a <gos_sysmonDaemonTask+0xba>
            {
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 80137b8:	2300      	movs	r3, #0
 80137ba:	71fb      	strb	r3, [r7, #7]
 80137bc:	e031      	b.n	8013822 <gos_sysmonDaemonTask+0xb2>
                {
                    if (userMessages[userMessageIndex].messageId == messageId)
 80137be:	79fb      	ldrb	r3, [r7, #7]
 80137c0:	4a28      	ldr	r2, [pc, #160]	; (8013864 <gos_sysmonDaemonTask+0xf4>)
 80137c2:	011b      	lsls	r3, r3, #4
 80137c4:	4413      	add	r3, r2
 80137c6:	881a      	ldrh	r2, [r3, #0]
 80137c8:	88bb      	ldrh	r3, [r7, #4]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d126      	bne.n	801381c <gos_sysmonDaemonTask+0xac>
                    {
                        // If payload is not NULL, copy it.
                        if (userMessages[userMessageIndex].payload != NULL)
 80137ce:	79fb      	ldrb	r3, [r7, #7]
 80137d0:	4a24      	ldr	r2, [pc, #144]	; (8013864 <gos_sysmonDaemonTask+0xf4>)
 80137d2:	011b      	lsls	r3, r3, #4
 80137d4:	4413      	add	r3, r2
 80137d6:	3304      	adds	r3, #4
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d00f      	beq.n	80137fe <gos_sysmonDaemonTask+0x8e>
                        {
                            (void_t) memcpy(userMessages[userMessageIndex].payload, (void_t*)receiveBuffer, userMessages[userMessageIndex].payloadSize);
 80137de:	79fb      	ldrb	r3, [r7, #7]
 80137e0:	4a20      	ldr	r2, [pc, #128]	; (8013864 <gos_sysmonDaemonTask+0xf4>)
 80137e2:	011b      	lsls	r3, r3, #4
 80137e4:	4413      	add	r3, r2
 80137e6:	3304      	adds	r3, #4
 80137e8:	6818      	ldr	r0, [r3, #0]
 80137ea:	79fb      	ldrb	r3, [r7, #7]
 80137ec:	4a1d      	ldr	r2, [pc, #116]	; (8013864 <gos_sysmonDaemonTask+0xf4>)
 80137ee:	011b      	lsls	r3, r3, #4
 80137f0:	4413      	add	r3, r2
 80137f2:	3308      	adds	r3, #8
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	461a      	mov	r2, r3
 80137f8:	4919      	ldr	r1, [pc, #100]	; (8013860 <gos_sysmonDaemonTask+0xf0>)
 80137fa:	f002 fb32 	bl	8015e62 <memcpy>
                        {
                            // Message has no payload.
                        }

                        // Call callback function.
                        if (userMessages[userMessageIndex].callback != NULL)
 80137fe:	79fb      	ldrb	r3, [r7, #7]
 8013800:	4a18      	ldr	r2, [pc, #96]	; (8013864 <gos_sysmonDaemonTask+0xf4>)
 8013802:	011b      	lsls	r3, r3, #4
 8013804:	4413      	add	r3, r2
 8013806:	330c      	adds	r3, #12
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d006      	beq.n	801381c <gos_sysmonDaemonTask+0xac>
                        {
                        	userMessages[userMessageIndex].callback();
 801380e:	79fb      	ldrb	r3, [r7, #7]
 8013810:	4a14      	ldr	r2, [pc, #80]	; (8013864 <gos_sysmonDaemonTask+0xf4>)
 8013812:	011b      	lsls	r3, r3, #4
 8013814:	4413      	add	r3, r2
 8013816:	330c      	adds	r3, #12
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	4798      	blx	r3
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 801381c:	79fb      	ldrb	r3, [r7, #7]
 801381e:	3301      	adds	r3, #1
 8013820:	71fb      	strb	r3, [r7, #7]
 8013822:	79fb      	ldrb	r3, [r7, #7]
 8013824:	2b09      	cmp	r3, #9
 8013826:	d9ca      	bls.n	80137be <gos_sysmonDaemonTask+0x4e>
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 8013828:	e018      	b.n	801385c <gos_sysmonDaemonTask+0xec>
                    }
                }
            }
            else
            {
                if (sysmonLut[lutIndex].pHandler != NULL)
 801382a:	79bb      	ldrb	r3, [r7, #6]
 801382c:	4a0e      	ldr	r2, [pc, #56]	; (8013868 <gos_sysmonDaemonTask+0xf8>)
 801382e:	011b      	lsls	r3, r3, #4
 8013830:	4413      	add	r3, r2
 8013832:	330c      	adds	r3, #12
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d009      	beq.n	801384e <gos_sysmonDaemonTask+0xde>
                {
                    sysmonLut[lutIndex].pHandler(lutIndex);
 801383a:	79bb      	ldrb	r3, [r7, #6]
 801383c:	4a0a      	ldr	r2, [pc, #40]	; (8013868 <gos_sysmonDaemonTask+0xf8>)
 801383e:	011b      	lsls	r3, r3, #4
 8013840:	4413      	add	r3, r2
 8013842:	330c      	adds	r3, #12
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	79ba      	ldrb	r2, [r7, #6]
 8013848:	4610      	mov	r0, r2
 801384a:	4798      	blx	r3
 801384c:	e799      	b.n	8013782 <gos_sysmonDaemonTask+0x12>
                }
                else
                {
                    gos_sysmonSendResponse(GOS_SYSMON_MSG_UNKNOWN);
 801384e:	2000      	movs	r0, #0
 8013850:	f000 f830 	bl	80138b4 <gos_sysmonSendResponse>
 8013854:	e795      	b.n	8013782 <gos_sysmonDaemonTask+0x12>
            }
        }
        else
        {
            // Reception error.
            (void_t) gos_taskSleep(10);
 8013856:	200a      	movs	r0, #10
 8013858:	f7fc f90c 	bl	800fa74 <gos_taskSleep>
        messageId = 0u;
 801385c:	e791      	b.n	8013782 <gos_sysmonDaemonTask+0x12>
 801385e:	bf00      	nop
 8013860:	2000d7f4 	.word	0x2000d7f4
 8013864:	2000e8ec 	.word	0x2000e8ec
 8013868:	08019c4c 	.word	0x08019c4c

0801386c <gos_sysmonGetLutIndex>:
 * @param   messageId : ID of the message to get the index for.
 *
 * @return  Look-up table index of the message.
 */
GOS_STATIC gos_sysmonMessageEnum_t gos_sysmonGetLutIndex (gos_sysmonMessageId_t messageId)
{
 801386c:	b480      	push	{r7}
 801386e:	b085      	sub	sp, #20
 8013870:	af00      	add	r7, sp, #0
 8013872:	4603      	mov	r3, r0
 8013874:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t index = 0u;
 8013876:	2300      	movs	r3, #0
 8013878:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 801387a:	2300      	movs	r3, #0
 801387c:	73fb      	strb	r3, [r7, #15]
 801387e:	e00a      	b.n	8013896 <gos_sysmonGetLutIndex+0x2a>
    {
        if (sysmonLut[index].messageId == messageId)
 8013880:	7bfb      	ldrb	r3, [r7, #15]
 8013882:	4a0b      	ldr	r2, [pc, #44]	; (80138b0 <gos_sysmonGetLutIndex+0x44>)
 8013884:	011b      	lsls	r3, r3, #4
 8013886:	4413      	add	r3, r2
 8013888:	881b      	ldrh	r3, [r3, #0]
 801388a:	88fa      	ldrh	r2, [r7, #6]
 801388c:	429a      	cmp	r2, r3
 801388e:	d006      	beq.n	801389e <gos_sysmonGetLutIndex+0x32>
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 8013890:	7bfb      	ldrb	r3, [r7, #15]
 8013892:	3301      	adds	r3, #1
 8013894:	73fb      	strb	r3, [r7, #15]
 8013896:	7bfb      	ldrb	r3, [r7, #15]
 8013898:	2b0f      	cmp	r3, #15
 801389a:	d9f1      	bls.n	8013880 <gos_sysmonGetLutIndex+0x14>
 801389c:	e000      	b.n	80138a0 <gos_sysmonGetLutIndex+0x34>
        {
            break;
 801389e:	bf00      	nop
        {
            // Continue searching.
        }
    }

    return index;
 80138a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3714      	adds	r7, #20
 80138a6:	46bd      	mov	sp, r7
 80138a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ac:	4770      	bx	lr
 80138ae:	bf00      	nop
 80138b0:	08019c4c 	.word	0x08019c4c

080138b4 <gos_sysmonSendResponse>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonSendResponse (gos_sysmonMessageEnum_t lutIndex)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af02      	add	r7, sp, #8
 80138ba:	4603      	mov	r3, r0
 80138bc:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    (void_t) gos_gcpTransmitMessage(
 80138be:	79fb      	ldrb	r3, [r7, #7]
            CFG_SYSMON_GCP_CHANNEL_NUM,          sysmonLut[lutIndex].messageId,
 80138c0:	4a0c      	ldr	r2, [pc, #48]	; (80138f4 <gos_sysmonSendResponse+0x40>)
 80138c2:	011b      	lsls	r3, r3, #4
 80138c4:	4413      	add	r3, r2
 80138c6:	8819      	ldrh	r1, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 80138c8:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 80138ca:	4a0a      	ldr	r2, [pc, #40]	; (80138f4 <gos_sysmonSendResponse+0x40>)
 80138cc:	011b      	lsls	r3, r3, #4
 80138ce:	4413      	add	r3, r2
 80138d0:	3304      	adds	r3, #4
 80138d2:	681a      	ldr	r2, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 80138d4:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 80138d6:	4807      	ldr	r0, [pc, #28]	; (80138f4 <gos_sysmonSendResponse+0x40>)
 80138d8:	011b      	lsls	r3, r3, #4
 80138da:	4403      	add	r3, r0
 80138dc:	3308      	adds	r3, #8
 80138de:	881b      	ldrh	r3, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 80138e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80138e4:	9000      	str	r0, [sp, #0]
 80138e6:	2000      	movs	r0, #0
 80138e8:	f7fd ff48 	bl	801177c <gos_gcpTransmitMessage>
			0xFFFF
            );
}
 80138ec:	bf00      	nop
 80138ee:	3708      	adds	r7, #8
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	08019c4c 	.word	0x08019c4c

080138f8 <gos_sysmonHandlePingRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandlePingRequest (gos_sysmonMessageEnum_t lutIndex)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	4603      	mov	r3, r0
 8013900:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    pingMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8013902:	79fb      	ldrb	r3, [r7, #7]
 8013904:	4618      	mov	r0, r3
 8013906:	f000 fb05 	bl	8013f14 <gos_sysmonCheckMessage>
 801390a:	4603      	mov	r3, r0
 801390c:	461a      	mov	r2, r3
 801390e:	4b06      	ldr	r3, [pc, #24]	; (8013928 <gos_sysmonHandlePingRequest+0x30>)
 8013910:	701a      	strb	r2, [r3, #0]
    gos_sysmonSendResponse(lutIndex + 1);
 8013912:	79fb      	ldrb	r3, [r7, #7]
 8013914:	3301      	adds	r3, #1
 8013916:	b2db      	uxtb	r3, r3
 8013918:	4618      	mov	r0, r3
 801391a:	f7ff ffcb 	bl	80138b4 <gos_sysmonSendResponse>
}
 801391e:	bf00      	nop
 8013920:	3708      	adds	r7, #8
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
 8013926:	bf00      	nop
 8013928:	2000e7f4 	.word	0x2000e7f4

0801392c <gos_sysmonHandleCpuUsageGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleCpuUsageGet (gos_sysmonMessageEnum_t lutIndex)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	4603      	mov	r3, r0
 8013934:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    cpuMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8013936:	79fb      	ldrb	r3, [r7, #7]
 8013938:	4618      	mov	r0, r3
 801393a:	f000 faeb 	bl	8013f14 <gos_sysmonCheckMessage>
 801393e:	4603      	mov	r3, r0
 8013940:	461a      	mov	r2, r3
 8013942:	4b0b      	ldr	r3, [pc, #44]	; (8013970 <gos_sysmonHandleCpuUsageGet+0x44>)
 8013944:	701a      	strb	r2, [r3, #0]

    if (cpuMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8013946:	4b0a      	ldr	r3, [pc, #40]	; (8013970 <gos_sysmonHandleCpuUsageGet+0x44>)
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	2b28      	cmp	r3, #40	; 0x28
 801394c:	d106      	bne.n	801395c <gos_sysmonHandleCpuUsageGet+0x30>
    {
        cpuMessage.cpuUsage = gos_kernelGetCpuUsage();
 801394e:	f7fa feed 	bl	800e72c <gos_kernelGetCpuUsage>
 8013952:	4603      	mov	r3, r0
 8013954:	461a      	mov	r2, r3
 8013956:	4b06      	ldr	r3, [pc, #24]	; (8013970 <gos_sysmonHandleCpuUsageGet+0x44>)
 8013958:	f8a3 2001 	strh.w	r2, [r3, #1]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 801395c:	79fb      	ldrb	r3, [r7, #7]
 801395e:	3301      	adds	r3, #1
 8013960:	b2db      	uxtb	r3, r3
 8013962:	4618      	mov	r0, r3
 8013964:	f7ff ffa6 	bl	80138b4 <gos_sysmonSendResponse>
}
 8013968:	bf00      	nop
 801396a:	3708      	adds	r7, #8
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	2000e7f8 	.word	0x2000e7f8

08013974 <gos_sysmonHandleTaskDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
 801397a:	4603      	mov	r3, r0
 801397c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 801397e:	2300      	movs	r3, #0
 8013980:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 8013982:	2349      	movs	r3, #73	; 0x49
 8013984:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 8013986:	79fb      	ldrb	r3, [r7, #7]
 8013988:	4618      	mov	r0, r3
 801398a:	f000 fac3 	bl	8013f14 <gos_sysmonCheckMessage>
 801398e:	4603      	mov	r3, r0
 8013990:	461a      	mov	r2, r3
 8013992:	4b66      	ldr	r3, [pc, #408]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013994:	701a      	strb	r2, [r3, #0]

    if (taskDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 8013996:	4b65      	ldr	r3, [pc, #404]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	2b28      	cmp	r3, #40	; 0x28
 801399c:	f040 80c2 	bne.w	8013b24 <gos_sysmonHandleTaskDataGet+0x1b0>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 80139a0:	4b63      	ldr	r3, [pc, #396]	; (8013b30 <gos_sysmonHandleTaskDataGet+0x1bc>)
 80139a2:	881b      	ldrh	r3, [r3, #0]
 80139a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d168      	bne.n	8013a7e <gos_sysmonHandleTaskDataGet+0x10a>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80139ac:	2300      	movs	r3, #0
 80139ae:	81fb      	strh	r3, [r7, #14]
 80139b0:	e061      	b.n	8013a76 <gos_sysmonHandleTaskDataGet+0x102>
            {
                if (breakLoop == GOS_TRUE)
 80139b2:	7b7b      	ldrb	r3, [r7, #13]
 80139b4:	2b36      	cmp	r3, #54	; 0x36
 80139b6:	f000 80b4 	beq.w	8013b22 <gos_sysmonHandleTaskDataGet+0x1ae>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 80139ba:	89fb      	ldrh	r3, [r7, #14]
 80139bc:	495d      	ldr	r1, [pc, #372]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80139be:	4618      	mov	r0, r3
 80139c0:	f7fd fb62 	bl	8011088 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 80139c4:	4b5b      	ldr	r3, [pc, #364]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80139c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80139c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80139cc:	d045      	beq.n	8013a5a <gos_sysmonHandleTaskDataGet+0xe6>
                {
                    taskDataMsg.taskData.taskId               = taskDesc.taskId;
 80139ce:	4b59      	ldr	r3, [pc, #356]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80139d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80139d2:	4b56      	ldr	r3, [pc, #344]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 80139d4:	84da      	strh	r2, [r3, #38]	; 0x26
                    taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 80139d6:	4b57      	ldr	r3, [pc, #348]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80139d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80139dc:	4b53      	ldr	r3, [pc, #332]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 80139de:	859a      	strh	r2, [r3, #44]	; 0x2c
                    taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 80139e0:	4b54      	ldr	r3, [pc, #336]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80139e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80139e6:	4b51      	ldr	r3, [pc, #324]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 80139e8:	f8a3 203d 	strh.w	r2, [r3, #61]	; 0x3d
                    taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 80139ec:	4b51      	ldr	r3, [pc, #324]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80139ee:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80139f2:	4b4e      	ldr	r3, [pc, #312]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 80139f4:	f8a3 2037 	strh.w	r2, [r3, #55]	; 0x37
                    taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 80139f8:	4b4e      	ldr	r3, [pc, #312]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 80139fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80139fe:	4b4b      	ldr	r3, [pc, #300]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a00:	f8a3 203b 	strh.w	r2, [r3, #59]	; 0x3b
                    taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 8013a04:	4b4b      	ldr	r3, [pc, #300]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013a0a:	4b48      	ldr	r3, [pc, #288]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a0c:	f8a3 2039 	strh.w	r2, [r3, #57]	; 0x39
                    taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 8013a10:	4b48      	ldr	r3, [pc, #288]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a12:	79da      	ldrb	r2, [r3, #7]
 8013a14:	4b45      	ldr	r3, [pc, #276]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a16:	70da      	strb	r2, [r3, #3]
                    taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 8013a18:	4b46      	ldr	r3, [pc, #280]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a1a:	799a      	ldrb	r2, [r3, #6]
 8013a1c:	4b43      	ldr	r3, [pc, #268]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a1e:	709a      	strb	r2, [r3, #2]
                    taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 8013a20:	4b44      	ldr	r3, [pc, #272]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a24:	4a41      	ldr	r2, [pc, #260]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a26:	6293      	str	r3, [r2, #40]	; 0x28
                    taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 8013a28:	4b42      	ldr	r3, [pc, #264]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a2a:	891a      	ldrh	r2, [r3, #8]
 8013a2c:	4b3f      	ldr	r3, [pc, #252]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a2e:	809a      	strh	r2, [r3, #4]
                    taskDataMsg.taskData.taskState            = taskDesc.taskState;
 8013a30:	4b40      	ldr	r3, [pc, #256]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a32:	791a      	ldrb	r2, [r3, #4]
 8013a34:	4b3d      	ldr	r3, [pc, #244]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a36:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8013a38:	4a3c      	ldr	r2, [pc, #240]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a3a:	4b3e      	ldr	r3, [pc, #248]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a3c:	322e      	adds	r2, #46	; 0x2e
 8013a3e:	334c      	adds	r3, #76	; 0x4c
 8013a40:	cb03      	ldmia	r3!, {r0, r1}
 8013a42:	6010      	str	r0, [r2, #0]
 8013a44:	6051      	str	r1, [r2, #4]
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	7213      	strb	r3, [r2, #8]
                    (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 8013a4a:	493b      	ldr	r1, [pc, #236]	; (8013b38 <gos_sysmonHandleTaskDataGet+0x1c4>)
 8013a4c:	483b      	ldr	r0, [pc, #236]	; (8013b3c <gos_sysmonHandleTaskDataGet+0x1c8>)
 8013a4e:	f002 fa00 	bl	8015e52 <strcpy>

                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013a52:	4b36      	ldr	r3, [pc, #216]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a54:	2228      	movs	r2, #40	; 0x28
 8013a56:	701a      	strb	r2, [r3, #0]
 8013a58:	e004      	b.n	8013a64 <gos_sysmonHandleTaskDataGet+0xf0>
                }
                else
                {
                    // Last task found.
                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013a5a:	4b34      	ldr	r3, [pc, #208]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a5c:	2263      	movs	r2, #99	; 0x63
 8013a5e:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 8013a60:	2336      	movs	r3, #54	; 0x36
 8013a62:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 8013a64:	79fb      	ldrb	r3, [r7, #7]
 8013a66:	3301      	adds	r3, #1
 8013a68:	b2db      	uxtb	r3, r3
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7ff ff22 	bl	80138b4 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8013a70:	89fb      	ldrh	r3, [r7, #14]
 8013a72:	3301      	adds	r3, #1
 8013a74:	81fb      	strh	r3, [r7, #14]
 8013a76:	89fb      	ldrh	r3, [r7, #14]
 8013a78:	2b2f      	cmp	r3, #47	; 0x2f
 8013a7a:	d99a      	bls.n	80139b2 <gos_sysmonHandleTaskDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 8013a7c:	e052      	b.n	8013b24 <gos_sysmonHandleTaskDataGet+0x1b0>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 8013a7e:	4b2c      	ldr	r3, [pc, #176]	; (8013b30 <gos_sysmonHandleTaskDataGet+0x1bc>)
 8013a80:	881b      	ldrh	r3, [r3, #0]
 8013a82:	492c      	ldr	r1, [pc, #176]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7fd faff 	bl	8011088 <gos_taskGetDataByIndex>
            taskDataMsg.taskData.taskId               = taskDesc.taskId;
 8013a8a:	4b2a      	ldr	r3, [pc, #168]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013a8e:	4b27      	ldr	r3, [pc, #156]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a90:	84da      	strh	r2, [r3, #38]	; 0x26
            taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 8013a92:	4b28      	ldr	r3, [pc, #160]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a98:	4b24      	ldr	r3, [pc, #144]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013a9a:	859a      	strh	r2, [r3, #44]	; 0x2c
            taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 8013a9c:	4b25      	ldr	r3, [pc, #148]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013a9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013aa2:	4b22      	ldr	r3, [pc, #136]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013aa4:	f8a3 203d 	strh.w	r2, [r3, #61]	; 0x3d
            taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 8013aa8:	4b22      	ldr	r3, [pc, #136]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013aaa:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8013aae:	4b1f      	ldr	r3, [pc, #124]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013ab0:	f8a3 2037 	strh.w	r2, [r3, #55]	; 0x37
            taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 8013ab4:	4b1f      	ldr	r3, [pc, #124]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013ab6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013aba:	4b1c      	ldr	r3, [pc, #112]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013abc:	f8a3 203b 	strh.w	r2, [r3, #59]	; 0x3b
            taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 8013ac0:	4b1c      	ldr	r3, [pc, #112]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013ac2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013ac6:	4b19      	ldr	r3, [pc, #100]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013ac8:	f8a3 2039 	strh.w	r2, [r3, #57]	; 0x39
            taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 8013acc:	4b19      	ldr	r3, [pc, #100]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013ace:	79da      	ldrb	r2, [r3, #7]
 8013ad0:	4b16      	ldr	r3, [pc, #88]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013ad2:	70da      	strb	r2, [r3, #3]
            taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 8013ad4:	4b17      	ldr	r3, [pc, #92]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013ad6:	799a      	ldrb	r2, [r3, #6]
 8013ad8:	4b14      	ldr	r3, [pc, #80]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013ada:	709a      	strb	r2, [r3, #2]
            taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 8013adc:	4b15      	ldr	r3, [pc, #84]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ae0:	4a12      	ldr	r2, [pc, #72]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013ae2:	6293      	str	r3, [r2, #40]	; 0x28
            taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 8013ae4:	4b13      	ldr	r3, [pc, #76]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013ae6:	891a      	ldrh	r2, [r3, #8]
 8013ae8:	4b10      	ldr	r3, [pc, #64]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013aea:	809a      	strh	r2, [r3, #4]
            taskDataMsg.taskData.taskState            = taskDesc.taskState;
 8013aec:	4b11      	ldr	r3, [pc, #68]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013aee:	791a      	ldrb	r2, [r3, #4]
 8013af0:	4b0e      	ldr	r3, [pc, #56]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013af2:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8013af4:	4a0d      	ldr	r2, [pc, #52]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013af6:	4b0f      	ldr	r3, [pc, #60]	; (8013b34 <gos_sysmonHandleTaskDataGet+0x1c0>)
 8013af8:	322e      	adds	r2, #46	; 0x2e
 8013afa:	334c      	adds	r3, #76	; 0x4c
 8013afc:	cb03      	ldmia	r3!, {r0, r1}
 8013afe:	6010      	str	r0, [r2, #0]
 8013b00:	6051      	str	r1, [r2, #4]
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	7213      	strb	r3, [r2, #8]
            (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 8013b06:	490c      	ldr	r1, [pc, #48]	; (8013b38 <gos_sysmonHandleTaskDataGet+0x1c4>)
 8013b08:	480c      	ldr	r0, [pc, #48]	; (8013b3c <gos_sysmonHandleTaskDataGet+0x1c8>)
 8013b0a:	f002 f9a2 	bl	8015e52 <strcpy>
            taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013b0e:	4b07      	ldr	r3, [pc, #28]	; (8013b2c <gos_sysmonHandleTaskDataGet+0x1b8>)
 8013b10:	2228      	movs	r2, #40	; 0x28
 8013b12:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 8013b14:	79fb      	ldrb	r3, [r7, #7]
 8013b16:	3301      	adds	r3, #1
 8013b18:	b2db      	uxtb	r3, r3
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7ff feca 	bl	80138b4 <gos_sysmonSendResponse>
}
 8013b20:	e000      	b.n	8013b24 <gos_sysmonHandleTaskDataGet+0x1b0>
                    break;
 8013b22:	bf00      	nop
}
 8013b24:	bf00      	nop
 8013b26:	3710      	adds	r7, #16
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}
 8013b2c:	2000e800 	.word	0x2000e800
 8013b30:	2000e7fc 	.word	0x2000e7fc
 8013b34:	2000e858 	.word	0x2000e858
 8013b38:	2000e862 	.word	0x2000e862
 8013b3c:	2000e806 	.word	0x2000e806

08013b40 <gos_sysmonHandleTaskVariableDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskVariableDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	4603      	mov	r3, r0
 8013b48:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 8013b4e:	2349      	movs	r3, #73	; 0x49
 8013b50:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskVariableDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 8013b52:	79fb      	ldrb	r3, [r7, #7]
 8013b54:	4618      	mov	r0, r3
 8013b56:	f000 f9dd 	bl	8013f14 <gos_sysmonCheckMessage>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	4b49      	ldr	r3, [pc, #292]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013b60:	701a      	strb	r2, [r3, #0]

    if (taskVariableDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 8013b62:	4b48      	ldr	r3, [pc, #288]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	2b28      	cmp	r3, #40	; 0x28
 8013b68:	f040 8087 	bne.w	8013c7a <gos_sysmonHandleTaskVariableDataGet+0x13a>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 8013b6c:	4b46      	ldr	r3, [pc, #280]	; (8013c88 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 8013b6e:	881b      	ldrh	r3, [r3, #0]
 8013b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b74:	4293      	cmp	r3, r2
 8013b76:	d14a      	bne.n	8013c0e <gos_sysmonHandleTaskVariableDataGet+0xce>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8013b78:	2300      	movs	r3, #0
 8013b7a:	81fb      	strh	r3, [r7, #14]
 8013b7c:	e043      	b.n	8013c06 <gos_sysmonHandleTaskVariableDataGet+0xc6>
            {
                if (breakLoop == GOS_TRUE)
 8013b7e:	7b7b      	ldrb	r3, [r7, #13]
 8013b80:	2b36      	cmp	r3, #54	; 0x36
 8013b82:	d079      	beq.n	8013c78 <gos_sysmonHandleTaskVariableDataGet+0x138>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 8013b84:	89fb      	ldrh	r3, [r7, #14]
 8013b86:	4941      	ldr	r1, [pc, #260]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f7fd fa7d 	bl	8011088 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 8013b8e:	4b3f      	ldr	r3, [pc, #252]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b96:	d028      	beq.n	8013bea <gos_sysmonHandleTaskVariableDataGet+0xaa>
                {
                    taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 8013b98:	4b3c      	ldr	r3, [pc, #240]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013b9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013b9e:	4b39      	ldr	r3, [pc, #228]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013ba0:	829a      	strh	r2, [r3, #20]
                    taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 8013ba2:	4b3a      	ldr	r3, [pc, #232]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013ba4:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013ba8:	4b36      	ldr	r3, [pc, #216]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013baa:	825a      	strh	r2, [r3, #18]
                    taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 8013bac:	4b37      	ldr	r3, [pc, #220]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013bae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013bb2:	4b34      	ldr	r3, [pc, #208]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013bb4:	821a      	strh	r2, [r3, #16]
                    taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 8013bb6:	4b35      	ldr	r3, [pc, #212]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013bb8:	799a      	ldrb	r2, [r3, #6]
 8013bba:	4b32      	ldr	r3, [pc, #200]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013bbc:	709a      	strb	r2, [r3, #2]
                    taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 8013bbe:	4b33      	ldr	r3, [pc, #204]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bc2:	4a30      	ldr	r2, [pc, #192]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013bc4:	f8c2 3003 	str.w	r3, [r2, #3]
                    taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 8013bc8:	4b30      	ldr	r3, [pc, #192]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013bca:	791a      	ldrb	r2, [r3, #4]
 8013bcc:	4b2d      	ldr	r3, [pc, #180]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013bce:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8013bd0:	4a2c      	ldr	r2, [pc, #176]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013bd2:	4b2e      	ldr	r3, [pc, #184]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013bd4:	3207      	adds	r2, #7
 8013bd6:	334c      	adds	r3, #76	; 0x4c
 8013bd8:	cb03      	ldmia	r3!, {r0, r1}
 8013bda:	6010      	str	r0, [r2, #0]
 8013bdc:	6051      	str	r1, [r2, #4]
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	7213      	strb	r3, [r2, #8]

                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013be2:	4b28      	ldr	r3, [pc, #160]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013be4:	2228      	movs	r2, #40	; 0x28
 8013be6:	701a      	strb	r2, [r3, #0]
 8013be8:	e004      	b.n	8013bf4 <gos_sysmonHandleTaskVariableDataGet+0xb4>

                }
                else
                {
                    // Last task found.
                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013bea:	4b26      	ldr	r3, [pc, #152]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013bec:	2263      	movs	r2, #99	; 0x63
 8013bee:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 8013bf0:	2336      	movs	r3, #54	; 0x36
 8013bf2:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 8013bf4:	79fb      	ldrb	r3, [r7, #7]
 8013bf6:	3301      	adds	r3, #1
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7ff fe5a 	bl	80138b4 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8013c00:	89fb      	ldrh	r3, [r7, #14]
 8013c02:	3301      	adds	r3, #1
 8013c04:	81fb      	strh	r3, [r7, #14]
 8013c06:	89fb      	ldrh	r3, [r7, #14]
 8013c08:	2b2f      	cmp	r3, #47	; 0x2f
 8013c0a:	d9b8      	bls.n	8013b7e <gos_sysmonHandleTaskVariableDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 8013c0c:	e035      	b.n	8013c7a <gos_sysmonHandleTaskVariableDataGet+0x13a>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 8013c0e:	4b1e      	ldr	r3, [pc, #120]	; (8013c88 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 8013c10:	881b      	ldrh	r3, [r3, #0]
 8013c12:	491e      	ldr	r1, [pc, #120]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fd fa37 	bl	8011088 <gos_taskGetDataByIndex>
            taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 8013c1a:	4b1c      	ldr	r3, [pc, #112]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013c1c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013c20:	4b18      	ldr	r3, [pc, #96]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013c22:	829a      	strh	r2, [r3, #20]
            taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 8013c24:	4b19      	ldr	r3, [pc, #100]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013c26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013c2a:	4b16      	ldr	r3, [pc, #88]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013c2c:	825a      	strh	r2, [r3, #18]
            taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 8013c2e:	4b17      	ldr	r3, [pc, #92]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013c30:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013c34:	4b13      	ldr	r3, [pc, #76]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013c36:	821a      	strh	r2, [r3, #16]
            taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 8013c38:	4b14      	ldr	r3, [pc, #80]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013c3a:	799a      	ldrb	r2, [r3, #6]
 8013c3c:	4b11      	ldr	r3, [pc, #68]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013c3e:	709a      	strb	r2, [r3, #2]
            taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 8013c40:	4b12      	ldr	r3, [pc, #72]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c44:	4a0f      	ldr	r2, [pc, #60]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013c46:	f8c2 3003 	str.w	r3, [r2, #3]
            taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 8013c4a:	4b10      	ldr	r3, [pc, #64]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013c4c:	791a      	ldrb	r2, [r3, #4]
 8013c4e:	4b0d      	ldr	r3, [pc, #52]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013c50:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 8013c52:	4a0c      	ldr	r2, [pc, #48]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013c54:	4b0d      	ldr	r3, [pc, #52]	; (8013c8c <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 8013c56:	3207      	adds	r2, #7
 8013c58:	334c      	adds	r3, #76	; 0x4c
 8013c5a:	cb03      	ldmia	r3!, {r0, r1}
 8013c5c:	6010      	str	r0, [r2, #0]
 8013c5e:	6051      	str	r1, [r2, #4]
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	7213      	strb	r3, [r2, #8]
            taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013c64:	4b07      	ldr	r3, [pc, #28]	; (8013c84 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 8013c66:	2228      	movs	r2, #40	; 0x28
 8013c68:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 8013c6a:	79fb      	ldrb	r3, [r7, #7]
 8013c6c:	3301      	adds	r3, #1
 8013c6e:	b2db      	uxtb	r3, r3
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7ff fe1f 	bl	80138b4 <gos_sysmonSendResponse>
}
 8013c76:	e000      	b.n	8013c7a <gos_sysmonHandleTaskVariableDataGet+0x13a>
                    break;
 8013c78:	bf00      	nop
}
 8013c7a:	bf00      	nop
 8013c7c:	3710      	adds	r7, #16
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
 8013c82:	bf00      	nop
 8013c84:	2000e840 	.word	0x2000e840
 8013c88:	2000e7fc 	.word	0x2000e7fc
 8013c8c:	2000e858 	.word	0x2000e858

08013c90 <gos_sysmonHandleTaskModification>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskModification (gos_sysmonMessageEnum_t lutIndex)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b082      	sub	sp, #8
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	4603      	mov	r3, r0
 8013c98:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    taskModifyResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8013c9a:	79fb      	ldrb	r3, [r7, #7]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f000 f939 	bl	8013f14 <gos_sysmonCheckMessage>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	4b63      	ldr	r3, [pc, #396]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013ca8:	701a      	strb	r2, [r3, #0]

    if (taskModifyResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8013caa:	4b62      	ldr	r3, [pc, #392]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013cac:	781b      	ldrb	r3, [r3, #0]
 8013cae:	2b28      	cmp	r3, #40	; 0x28
 8013cb0:	f040 80b5 	bne.w	8013e1e <gos_sysmonHandleTaskModification+0x18e>
    {
        // Send specific task data.
        (void_t) gos_taskGetDataByIndex(taskModifyMessage.taskIndex, &taskDesc);
 8013cb4:	4b60      	ldr	r3, [pc, #384]	; (8013e38 <gos_sysmonHandleTaskModification+0x1a8>)
 8013cb6:	881b      	ldrh	r3, [r3, #0]
 8013cb8:	4960      	ldr	r1, [pc, #384]	; (8013e3c <gos_sysmonHandleTaskModification+0x1ac>)
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f7fd f9e4 	bl	8011088 <gos_taskGetDataByIndex>

         // Perform request based on modification type.
         switch (taskModifyMessage.modificationType)
 8013cc0:	4b5d      	ldr	r3, [pc, #372]	; (8013e38 <gos_sysmonHandleTaskModification+0x1a8>)
 8013cc2:	789b      	ldrb	r3, [r3, #2]
 8013cc4:	2b4a      	cmp	r3, #74	; 0x4a
 8013cc6:	f300 80a7 	bgt.w	8013e18 <gos_sysmonHandleTaskModification+0x188>
 8013cca:	2b31      	cmp	r3, #49	; 0x31
 8013ccc:	da04      	bge.n	8013cd8 <gos_sysmonHandleTaskModification+0x48>
 8013cce:	2b0c      	cmp	r3, #12
 8013cd0:	d03e      	beq.n	8013d50 <gos_sysmonHandleTaskModification+0xc0>
 8013cd2:	2b22      	cmp	r3, #34	; 0x22
 8013cd4:	d04c      	beq.n	8013d70 <gos_sysmonHandleTaskModification+0xe0>
 8013cd6:	e09f      	b.n	8013e18 <gos_sysmonHandleTaskModification+0x188>
 8013cd8:	3b31      	subs	r3, #49	; 0x31
 8013cda:	2b19      	cmp	r3, #25
 8013cdc:	f200 809c 	bhi.w	8013e18 <gos_sysmonHandleTaskModification+0x188>
 8013ce0:	a201      	add	r2, pc, #4	; (adr r2, 8013ce8 <gos_sysmonHandleTaskModification+0x58>)
 8013ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ce6:	bf00      	nop
 8013ce8:	08013d91 	.word	0x08013d91
 8013cec:	08013e19 	.word	0x08013e19
 8013cf0:	08013e19 	.word	0x08013e19
 8013cf4:	08013db1 	.word	0x08013db1
 8013cf8:	08013e19 	.word	0x08013e19
 8013cfc:	08013e19 	.word	0x08013e19
 8013d00:	08013e19 	.word	0x08013e19
 8013d04:	08013e19 	.word	0x08013e19
 8013d08:	08013e19 	.word	0x08013e19
 8013d0c:	08013e19 	.word	0x08013e19
 8013d10:	08013e19 	.word	0x08013e19
 8013d14:	08013e19 	.word	0x08013e19
 8013d18:	08013e19 	.word	0x08013e19
 8013d1c:	08013e19 	.word	0x08013e19
 8013d20:	08013dd9 	.word	0x08013dd9
 8013d24:	08013e19 	.word	0x08013e19
 8013d28:	08013e19 	.word	0x08013e19
 8013d2c:	08013e19 	.word	0x08013e19
 8013d30:	08013e19 	.word	0x08013e19
 8013d34:	08013e19 	.word	0x08013e19
 8013d38:	08013e19 	.word	0x08013e19
 8013d3c:	08013e19 	.word	0x08013e19
 8013d40:	08013e19 	.word	0x08013e19
 8013d44:	08013e19 	.word	0x08013e19
 8013d48:	08013e19 	.word	0x08013e19
 8013d4c:	08013df9 	.word	0x08013df9
         {
             case GOS_SYSMON_TASK_MOD_TYPE_SUSPEND:
             {
                 if (gos_taskSuspend(taskDesc.taskId) == GOS_SUCCESS)
 8013d50:	4b3a      	ldr	r3, [pc, #232]	; (8013e3c <gos_sysmonHandleTaskModification+0x1ac>)
 8013d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fb ffd9 	bl	800fd0c <gos_taskSuspend>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	2b55      	cmp	r3, #85	; 0x55
 8013d5e:	d103      	bne.n	8013d68 <gos_sysmonHandleTaskModification+0xd8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013d60:	4b34      	ldr	r3, [pc, #208]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013d62:	2228      	movs	r2, #40	; 0x28
 8013d64:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8013d66:	e05a      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013d68:	4b32      	ldr	r3, [pc, #200]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013d6a:	2263      	movs	r2, #99	; 0x63
 8013d6c:	701a      	strb	r2, [r3, #0]
                 break;
 8013d6e:	e056      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_RESUME:
             {
                 if (gos_taskResume(taskDesc.taskId) == GOS_SUCCESS)
 8013d70:	4b32      	ldr	r3, [pc, #200]	; (8013e3c <gos_sysmonHandleTaskModification+0x1ac>)
 8013d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7fc f8eb 	bl	800ff50 <gos_taskResume>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	2b55      	cmp	r3, #85	; 0x55
 8013d7e:	d103      	bne.n	8013d88 <gos_sysmonHandleTaskModification+0xf8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013d80:	4b2c      	ldr	r3, [pc, #176]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013d82:	2228      	movs	r2, #40	; 0x28
 8013d84:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8013d86:	e04a      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013d88:	4b2a      	ldr	r3, [pc, #168]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013d8a:	2263      	movs	r2, #99	; 0x63
 8013d8c:	701a      	strb	r2, [r3, #0]
                 break;
 8013d8e:	e046      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_DELETE:
             {
                 if (gos_taskDelete(taskDesc.taskId) == GOS_SUCCESS)
 8013d90:	4b2a      	ldr	r3, [pc, #168]	; (8013e3c <gos_sysmonHandleTaskModification+0x1ac>)
 8013d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7fc fb85 	bl	80104a4 <gos_taskDelete>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	2b55      	cmp	r3, #85	; 0x55
 8013d9e:	d103      	bne.n	8013da8 <gos_sysmonHandleTaskModification+0x118>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013da0:	4b24      	ldr	r3, [pc, #144]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013da2:	2228      	movs	r2, #40	; 0x28
 8013da4:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8013da6:	e03a      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013da8:	4b22      	ldr	r3, [pc, #136]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013daa:	2263      	movs	r2, #99	; 0x63
 8013dac:	701a      	strb	r2, [r3, #0]
                 break;
 8013dae:	e036      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_BLOCK:
             {
                 if (gos_taskBlock(taskDesc.taskId, taskModifyMessage.param) == GOS_SUCCESS)
 8013db0:	4b22      	ldr	r3, [pc, #136]	; (8013e3c <gos_sysmonHandleTaskModification+0x1ac>)
 8013db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013db4:	4a20      	ldr	r2, [pc, #128]	; (8013e38 <gos_sysmonHandleTaskModification+0x1a8>)
 8013db6:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8013dba:	4611      	mov	r1, r2
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7fc f975 	bl	80100ac <gos_taskBlock>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	2b55      	cmp	r3, #85	; 0x55
 8013dc6:	d103      	bne.n	8013dd0 <gos_sysmonHandleTaskModification+0x140>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013dc8:	4b1a      	ldr	r3, [pc, #104]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013dca:	2228      	movs	r2, #40	; 0x28
 8013dcc:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8013dce:	e026      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013dd0:	4b18      	ldr	r3, [pc, #96]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013dd2:	2263      	movs	r2, #99	; 0x63
 8013dd4:	701a      	strb	r2, [r3, #0]
                 break;
 8013dd6:	e022      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_UNBLOCK:
             {
                 if (gos_taskUnblock(taskDesc.taskId) == GOS_SUCCESS)
 8013dd8:	4b18      	ldr	r3, [pc, #96]	; (8013e3c <gos_sysmonHandleTaskModification+0x1ac>)
 8013dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7fc fa77 	bl	80102d0 <gos_taskUnblock>
 8013de2:	4603      	mov	r3, r0
 8013de4:	2b55      	cmp	r3, #85	; 0x55
 8013de6:	d103      	bne.n	8013df0 <gos_sysmonHandleTaskModification+0x160>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013de8:	4b12      	ldr	r3, [pc, #72]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013dea:	2228      	movs	r2, #40	; 0x28
 8013dec:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8013dee:	e016      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013df0:	4b10      	ldr	r3, [pc, #64]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013df2:	2263      	movs	r2, #99	; 0x63
 8013df4:	701a      	strb	r2, [r3, #0]
                 break;
 8013df6:	e012      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_WAKEUP:
             {
                 if (gos_taskWakeup(taskDesc.taskId) == GOS_SUCCESS)
 8013df8:	4b10      	ldr	r3, [pc, #64]	; (8013e3c <gos_sysmonHandleTaskModification+0x1ac>)
 8013dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7fb febf 	bl	800fb80 <gos_taskWakeup>
 8013e02:	4603      	mov	r3, r0
 8013e04:	2b55      	cmp	r3, #85	; 0x55
 8013e06:	d103      	bne.n	8013e10 <gos_sysmonHandleTaskModification+0x180>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013e08:	4b0a      	ldr	r3, [pc, #40]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013e0a:	2228      	movs	r2, #40	; 0x28
 8013e0c:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 8013e0e:	e006      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013e10:	4b08      	ldr	r3, [pc, #32]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013e12:	2263      	movs	r2, #99	; 0x63
 8013e14:	701a      	strb	r2, [r3, #0]
                 break;
 8013e16:	e002      	b.n	8013e1e <gos_sysmonHandleTaskModification+0x18e>
             }
             default:
             {
                 taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013e18:	4b06      	ldr	r3, [pc, #24]	; (8013e34 <gos_sysmonHandleTaskModification+0x1a4>)
 8013e1a:	2263      	movs	r2, #99	; 0x63
 8013e1c:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8013e1e:	79fb      	ldrb	r3, [r7, #7]
 8013e20:	3301      	adds	r3, #1
 8013e22:	b2db      	uxtb	r3, r3
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7ff fd45 	bl	80138b4 <gos_sysmonSendResponse>
}
 8013e2a:	bf00      	nop
 8013e2c:	3708      	adds	r7, #8
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop
 8013e34:	2000e8cc 	.word	0x2000e8cc
 8013e38:	2000e8c4 	.word	0x2000e8c4
 8013e3c:	2000e858 	.word	0x2000e858

08013e40 <gos_sysmonHandleSysRuntimeGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSysRuntimeGet (gos_sysmonMessageEnum_t lutIndex)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	4603      	mov	r3, r0
 8013e48:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysRuntimeGetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8013e4a:	79fb      	ldrb	r3, [r7, #7]
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f000 f861 	bl	8013f14 <gos_sysmonCheckMessage>
 8013e52:	4603      	mov	r3, r0
 8013e54:	461a      	mov	r2, r3
 8013e56:	4b0e      	ldr	r3, [pc, #56]	; (8013e90 <gos_sysmonHandleSysRuntimeGet+0x50>)
 8013e58:	701a      	strb	r2, [r3, #0]

    if (sysRuntimeGetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8013e5a:	4b0d      	ldr	r3, [pc, #52]	; (8013e90 <gos_sysmonHandleSysRuntimeGet+0x50>)
 8013e5c:	781b      	ldrb	r3, [r3, #0]
 8013e5e:	2b28      	cmp	r3, #40	; 0x28
 8013e60:	d10c      	bne.n	8013e7c <gos_sysmonHandleSysRuntimeGet+0x3c>
    {
        if (gos_runTimeGet(&sysRuntimeGetResultMessage.sysRuntime) == GOS_SUCCESS)
 8013e62:	480c      	ldr	r0, [pc, #48]	; (8013e94 <gos_sysmonHandleSysRuntimeGet+0x54>)
 8013e64:	f000 f8d8 	bl	8014018 <gos_runTimeGet>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	2b55      	cmp	r3, #85	; 0x55
 8013e6c:	d103      	bne.n	8013e76 <gos_sysmonHandleSysRuntimeGet+0x36>
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013e6e:	4b08      	ldr	r3, [pc, #32]	; (8013e90 <gos_sysmonHandleSysRuntimeGet+0x50>)
 8013e70:	2228      	movs	r2, #40	; 0x28
 8013e72:	701a      	strb	r2, [r3, #0]
 8013e74:	e002      	b.n	8013e7c <gos_sysmonHandleSysRuntimeGet+0x3c>
        }
        else
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013e76:	4b06      	ldr	r3, [pc, #24]	; (8013e90 <gos_sysmonHandleSysRuntimeGet+0x50>)
 8013e78:	2263      	movs	r2, #99	; 0x63
 8013e7a:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8013e7c:	79fb      	ldrb	r3, [r7, #7]
 8013e7e:	3301      	adds	r3, #1
 8013e80:	b2db      	uxtb	r3, r3
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7ff fd16 	bl	80138b4 <gos_sysmonSendResponse>
}
 8013e88:	bf00      	nop
 8013e8a:	3708      	adds	r7, #8
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	2000e8d0 	.word	0x2000e8d0
 8013e94:	2000e8d1 	.word	0x2000e8d1

08013e98 <gos_sysmonHandleSystimeSet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSystimeSet (gos_sysmonMessageEnum_t lutIndex)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysTimeSetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 8013ea2:	79fb      	ldrb	r3, [r7, #7]
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f000 f835 	bl	8013f14 <gos_sysmonCheckMessage>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	461a      	mov	r2, r3
 8013eae:	4b0e      	ldr	r3, [pc, #56]	; (8013ee8 <gos_sysmonHandleSystimeSet+0x50>)
 8013eb0:	701a      	strb	r2, [r3, #0]

    if (sysTimeSetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 8013eb2:	4b0d      	ldr	r3, [pc, #52]	; (8013ee8 <gos_sysmonHandleSystimeSet+0x50>)
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	2b28      	cmp	r3, #40	; 0x28
 8013eb8:	d10c      	bne.n	8013ed4 <gos_sysmonHandleSystimeSet+0x3c>
    {
        if (gos_timeSet(&sysTimeSetMessage.desiredSystemTime) == GOS_SUCCESS)
 8013eba:	480c      	ldr	r0, [pc, #48]	; (8013eec <gos_sysmonHandleSystimeSet+0x54>)
 8013ebc:	f000 f890 	bl	8013fe0 <gos_timeSet>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	2b55      	cmp	r3, #85	; 0x55
 8013ec4:	d103      	bne.n	8013ece <gos_sysmonHandleSystimeSet+0x36>
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 8013ec6:	4b08      	ldr	r3, [pc, #32]	; (8013ee8 <gos_sysmonHandleSystimeSet+0x50>)
 8013ec8:	2228      	movs	r2, #40	; 0x28
 8013eca:	701a      	strb	r2, [r3, #0]
 8013ecc:	e002      	b.n	8013ed4 <gos_sysmonHandleSystimeSet+0x3c>
        }
        else
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 8013ece:	4b06      	ldr	r3, [pc, #24]	; (8013ee8 <gos_sysmonHandleSystimeSet+0x50>)
 8013ed0:	2263      	movs	r2, #99	; 0x63
 8013ed2:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 8013ed4:	79fb      	ldrb	r3, [r7, #7]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7ff fcea 	bl	80138b4 <gos_sysmonSendResponse>
}
 8013ee0:	bf00      	nop
 8013ee2:	3708      	adds	r7, #8
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	2000e8e8 	.word	0x2000e8e8
 8013eec:	2000e8dc 	.word	0x2000e8dc

08013ef0 <gos_sysmonHandleResetRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleResetRequest (gos_sysmonMessageEnum_t lutIndex)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (gos_sysmonCheckMessage(lutIndex) == GOS_SYSMON_MSG_RES_OK)
 8013efa:	79fb      	ldrb	r3, [r7, #7]
 8013efc:	4618      	mov	r0, r3
 8013efe:	f000 f809 	bl	8013f14 <gos_sysmonCheckMessage>
 8013f02:	4603      	mov	r3, r0
 8013f04:	2b28      	cmp	r3, #40	; 0x28
 8013f06:	d101      	bne.n	8013f0c <gos_sysmonHandleResetRequest+0x1c>
    {
        gos_kernelReset();
 8013f08:	f7fa fc22 	bl	800e750 <gos_kernelReset>
    }
    else
    {
        // Nothing to do.
    }
}
 8013f0c:	bf00      	nop
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}

08013f14 <gos_sysmonCheckMessage>:
 * @retval  GOS_SYSMON_MSG_RES_OK          : Message OK.
 * @retval  GOS_SYSMON_MSG_INV_PV          : Invalid protocol version.
 * @retval  GOS_SYSMON_MSG_INV_PAYLOAD_CRC : Payload CRC mismatch.
 */
GOS_STATIC gos_sysmonMessageResult_t gos_sysmonCheckMessage (gos_sysmonMessageEnum_t lutIndex)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b084      	sub	sp, #16
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_sysmonMessageResult_t result = GOS_SYSMON_MSG_RES_OK;
 8013f1e:	2328      	movs	r3, #40	; 0x28
 8013f20:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check if there is a payload to be copied.
    if (sysmonLut[lutIndex].pMessagePayload != NULL)
 8013f22:	79fb      	ldrb	r3, [r7, #7]
 8013f24:	4a0d      	ldr	r2, [pc, #52]	; (8013f5c <gos_sysmonCheckMessage+0x48>)
 8013f26:	011b      	lsls	r3, r3, #4
 8013f28:	4413      	add	r3, r2
 8013f2a:	3304      	adds	r3, #4
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d00f      	beq.n	8013f52 <gos_sysmonCheckMessage+0x3e>
    {
        (void_t) memcpy(sysmonLut[lutIndex].pMessagePayload, (void_t*)receiveBuffer, sysmonLut[lutIndex].payloadSize);
 8013f32:	79fb      	ldrb	r3, [r7, #7]
 8013f34:	4a09      	ldr	r2, [pc, #36]	; (8013f5c <gos_sysmonCheckMessage+0x48>)
 8013f36:	011b      	lsls	r3, r3, #4
 8013f38:	4413      	add	r3, r2
 8013f3a:	3304      	adds	r3, #4
 8013f3c:	6818      	ldr	r0, [r3, #0]
 8013f3e:	79fb      	ldrb	r3, [r7, #7]
 8013f40:	4a06      	ldr	r2, [pc, #24]	; (8013f5c <gos_sysmonCheckMessage+0x48>)
 8013f42:	011b      	lsls	r3, r3, #4
 8013f44:	4413      	add	r3, r2
 8013f46:	3308      	adds	r3, #8
 8013f48:	881b      	ldrh	r3, [r3, #0]
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	4904      	ldr	r1, [pc, #16]	; (8013f60 <gos_sysmonCheckMessage+0x4c>)
 8013f4e:	f001 ff88 	bl	8015e62 <memcpy>
    else
    {
        // Nothing to do.
    }

    return result;
 8013f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3710      	adds	r7, #16
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}
 8013f5c:	08019c4c 	.word	0x08019c4c
 8013f60:	2000d7f4 	.word	0x2000d7f4

08013f64 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_SUCCESS;
 8013f6a:	2355      	movs	r3, #85	; 0x55
 8013f6c:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                          != GOS_SUCCESS ||
 8013f6e:	480a      	ldr	r0, [pc, #40]	; (8013f98 <gos_timeInit+0x34>)
 8013f70:	f7ff fa48 	bl	8013404 <gos_signalCreate>
 8013f74:	4603      	mov	r3, r0
 8013f76:	2b55      	cmp	r3, #85	; 0x55
 8013f78:	d106      	bne.n	8013f88 <gos_timeInit+0x24>
        gos_taskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) != GOS_SUCCESS
 8013f7a:	4908      	ldr	r1, [pc, #32]	; (8013f9c <gos_timeInit+0x38>)
 8013f7c:	4808      	ldr	r0, [pc, #32]	; (8013fa0 <gos_timeInit+0x3c>)
 8013f7e:	f7fb fbe7 	bl	800f750 <gos_taskRegister>
 8013f82:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                          != GOS_SUCCESS ||
 8013f84:	2b55      	cmp	r3, #85	; 0x55
 8013f86:	d001      	beq.n	8013f8c <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_ERROR;
 8013f88:	23ae      	movs	r3, #174	; 0xae
 8013f8a:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 8013f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3708      	adds	r7, #8
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	2000e998 	.word	0x2000e998
 8013f9c:	2000e996 	.word	0x2000e996
 8013fa0:	20002098 	.word	0x20002098

08013fa4 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b085      	sub	sp, #20
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 8013fac:	23ae      	movs	r3, #174	; 0xae
 8013fae:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d00a      	beq.n	8013fcc <gos_timeGet+0x28>
    {
        (void_t) memcpy((void_t*)pTime, (GOS_CONST void_t*)&systemTime, sizeof(systemTime));
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	4908      	ldr	r1, [pc, #32]	; (8013fdc <gos_timeGet+0x38>)
 8013fba:	461a      	mov	r2, r3
 8013fbc:	460b      	mov	r3, r1
 8013fbe:	cb03      	ldmia	r3!, {r0, r1}
 8013fc0:	6010      	str	r0, [r2, #0]
 8013fc2:	6051      	str	r1, [r2, #4]
 8013fc4:	881b      	ldrh	r3, [r3, #0]
 8013fc6:	8113      	strh	r3, [r2, #8]

        timeGetResult = GOS_SUCCESS;
 8013fc8:	2355      	movs	r3, #85	; 0x55
 8013fca:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 8013fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3714      	adds	r7, #20
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd8:	4770      	bx	lr
 8013fda:	bf00      	nop
 8013fdc:	2000208c 	.word	0x2000208c

08013fe0 <gos_timeSet>:

/*
 * Function: gos_timeSet
 */
gos_result_t gos_timeSet (gos_time_t* pTime)
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b085      	sub	sp, #20
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeSetResult = GOS_ERROR;
 8013fe8:	23ae      	movs	r3, #174	; 0xae
 8013fea:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d008      	beq.n	8014004 <gos_timeSet+0x24>
    {
        (void_t) memcpy((void_t*)&systemTime, (GOS_CONST void_t*)pTime, sizeof(*pTime));
 8013ff2:	4b08      	ldr	r3, [pc, #32]	; (8014014 <gos_timeSet+0x34>)
 8013ff4:	687a      	ldr	r2, [r7, #4]
 8013ff6:	6810      	ldr	r0, [r2, #0]
 8013ff8:	6851      	ldr	r1, [r2, #4]
 8013ffa:	c303      	stmia	r3!, {r0, r1}
 8013ffc:	8912      	ldrh	r2, [r2, #8]
 8013ffe:	801a      	strh	r2, [r3, #0]

        timeSetResult = GOS_SUCCESS;
 8014000:	2355      	movs	r3, #85	; 0x55
 8014002:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeSetResult;
 8014004:	7bfb      	ldrb	r3, [r7, #15]
}
 8014006:	4618      	mov	r0, r3
 8014008:	3714      	adds	r7, #20
 801400a:	46bd      	mov	sp, r7
 801400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014010:	4770      	bx	lr
 8014012:	bf00      	nop
 8014014:	2000208c 	.word	0x2000208c

08014018 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 8014018:	b480      	push	{r7}
 801401a:	b085      	sub	sp, #20
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 8014020:	23ae      	movs	r3, #174	; 0xae
 8014022:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d00a      	beq.n	8014040 <gos_runTimeGet+0x28>
    {
        (void_t) memcpy((void_t*)pRunTime, (void_t*)&systemRunTime, sizeof(systemRunTime));
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	4908      	ldr	r1, [pc, #32]	; (8014050 <gos_runTimeGet+0x38>)
 801402e:	461a      	mov	r2, r3
 8014030:	460b      	mov	r3, r1
 8014032:	cb03      	ldmia	r3!, {r0, r1}
 8014034:	6010      	str	r0, [r2, #0]
 8014036:	6051      	str	r1, [r2, #4]
 8014038:	781b      	ldrb	r3, [r3, #0]
 801403a:	7213      	strb	r3, [r2, #8]

        runtimeGetResult = GOS_SUCCESS;
 801403c:	2355      	movs	r3, #85	; 0x55
 801403e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 8014040:	7bfb      	ldrb	r3, [r7, #15]
}
 8014042:	4618      	mov	r0, r3
 8014044:	3714      	adds	r7, #20
 8014046:	46bd      	mov	sp, r7
 8014048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404c:	4770      	bx	lr
 801404e:	bf00      	nop
 8014050:	2000e98c 	.word	0x2000e98c

08014054 <gos_timeAddMilliseconds>:

/*
 * Function: gos_timeAddMilliseconds
 */
gos_result_t gos_timeAddMilliseconds (gos_time_t* pTime, u16_t milliseconds)
{
 8014054:	b480      	push	{r7}
 8014056:	b085      	sub	sp, #20
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
 801405c:	460b      	mov	r3, r1
 801405e:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddMillisecondsResult = GOS_ERROR;
 8014060:	23ae      	movs	r3, #174	; 0xae
 8014062:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	f000 80e5 	beq.w	8014236 <gos_timeAddMilliseconds+0x1e2>
    {
        // 1. Raw increment.
        pTime->milliseconds += milliseconds;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	881b      	ldrh	r3, [r3, #0]
 8014070:	b29a      	uxth	r2, r3
 8014072:	887b      	ldrh	r3, [r7, #2]
 8014074:	4413      	add	r3, r2
 8014076:	b29a      	uxth	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->milliseconds >= 1000u)
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	881b      	ldrh	r3, [r3, #0]
 8014080:	b29b      	uxth	r3, r3
 8014082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014086:	f0c0 80d4 	bcc.w	8014232 <gos_timeAddMilliseconds+0x1de>
        {
            pTime->seconds += pTime->milliseconds / 1000u;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	789a      	ldrb	r2, [r3, #2]
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	881b      	ldrh	r3, [r3, #0]
 8014092:	b29b      	uxth	r3, r3
 8014094:	496b      	ldr	r1, [pc, #428]	; (8014244 <gos_timeAddMilliseconds+0x1f0>)
 8014096:	fba1 1303 	umull	r1, r3, r1, r3
 801409a:	099b      	lsrs	r3, r3, #6
 801409c:	b29b      	uxth	r3, r3
 801409e:	b2db      	uxtb	r3, r3
 80140a0:	4413      	add	r3, r2
 80140a2:	b2da      	uxtb	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	709a      	strb	r2, [r3, #2]
            pTime->milliseconds %= 1000u;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	881b      	ldrh	r3, [r3, #0]
 80140ac:	b29b      	uxth	r3, r3
 80140ae:	4a65      	ldr	r2, [pc, #404]	; (8014244 <gos_timeAddMilliseconds+0x1f0>)
 80140b0:	fba2 1203 	umull	r1, r2, r2, r3
 80140b4:	0992      	lsrs	r2, r2, #6
 80140b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80140ba:	fb01 f202 	mul.w	r2, r1, r2
 80140be:	1a9b      	subs	r3, r3, r2
 80140c0:	b29a      	uxth	r2, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	801a      	strh	r2, [r3, #0]

            if (pTime->seconds >= 60u)
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	789b      	ldrb	r3, [r3, #2]
 80140ca:	2b3b      	cmp	r3, #59	; 0x3b
 80140cc:	f240 80b1 	bls.w	8014232 <gos_timeAddMilliseconds+0x1de>
            {
                pTime->minutes += pTime->seconds / 60u;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	78da      	ldrb	r2, [r3, #3]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	789b      	ldrb	r3, [r3, #2]
 80140d8:	495b      	ldr	r1, [pc, #364]	; (8014248 <gos_timeAddMilliseconds+0x1f4>)
 80140da:	fba1 1303 	umull	r1, r3, r1, r3
 80140de:	095b      	lsrs	r3, r3, #5
 80140e0:	b2db      	uxtb	r3, r3
 80140e2:	4413      	add	r3, r2
 80140e4:	b2da      	uxtb	r2, r3
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	70da      	strb	r2, [r3, #3]
                pTime->seconds %= 60u;
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	789a      	ldrb	r2, [r3, #2]
 80140ee:	4b56      	ldr	r3, [pc, #344]	; (8014248 <gos_timeAddMilliseconds+0x1f4>)
 80140f0:	fba3 1302 	umull	r1, r3, r3, r2
 80140f4:	0959      	lsrs	r1, r3, #5
 80140f6:	460b      	mov	r3, r1
 80140f8:	011b      	lsls	r3, r3, #4
 80140fa:	1a5b      	subs	r3, r3, r1
 80140fc:	009b      	lsls	r3, r3, #2
 80140fe:	1ad3      	subs	r3, r2, r3
 8014100:	b2da      	uxtb	r2, r3
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	709a      	strb	r2, [r3, #2]

                if (pTime->minutes >= 60u)
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	78db      	ldrb	r3, [r3, #3]
 801410a:	2b3b      	cmp	r3, #59	; 0x3b
 801410c:	f240 8091 	bls.w	8014232 <gos_timeAddMilliseconds+0x1de>
                {
                    pTime->hours += pTime->minutes / 60u;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	791a      	ldrb	r2, [r3, #4]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	78db      	ldrb	r3, [r3, #3]
 8014118:	494b      	ldr	r1, [pc, #300]	; (8014248 <gos_timeAddMilliseconds+0x1f4>)
 801411a:	fba1 1303 	umull	r1, r3, r1, r3
 801411e:	095b      	lsrs	r3, r3, #5
 8014120:	b2db      	uxtb	r3, r3
 8014122:	4413      	add	r3, r2
 8014124:	b2da      	uxtb	r2, r3
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	711a      	strb	r2, [r3, #4]
                    pTime->minutes %= 60u;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	78da      	ldrb	r2, [r3, #3]
 801412e:	4b46      	ldr	r3, [pc, #280]	; (8014248 <gos_timeAddMilliseconds+0x1f4>)
 8014130:	fba3 1302 	umull	r1, r3, r3, r2
 8014134:	0959      	lsrs	r1, r3, #5
 8014136:	460b      	mov	r3, r1
 8014138:	011b      	lsls	r3, r3, #4
 801413a:	1a5b      	subs	r3, r3, r1
 801413c:	009b      	lsls	r3, r3, #2
 801413e:	1ad3      	subs	r3, r2, r3
 8014140:	b2da      	uxtb	r2, r3
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	70da      	strb	r2, [r3, #3]

                    if (pTime->hours >= 24u)
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	791b      	ldrb	r3, [r3, #4]
 801414a:	2b17      	cmp	r3, #23
 801414c:	d971      	bls.n	8014232 <gos_timeAddMilliseconds+0x1de>
                    {
                        pTime->days += pTime->hours / 24u;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8014154:	b29a      	uxth	r2, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	791b      	ldrb	r3, [r3, #4]
 801415a:	493c      	ldr	r1, [pc, #240]	; (801424c <gos_timeAddMilliseconds+0x1f8>)
 801415c:	fba1 1303 	umull	r1, r3, r1, r3
 8014160:	091b      	lsrs	r3, r3, #4
 8014162:	b2db      	uxtb	r3, r3
 8014164:	b29b      	uxth	r3, r3
 8014166:	4413      	add	r3, r2
 8014168:	b29a      	uxth	r2, r3
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f8a3 2005 	strh.w	r2, [r3, #5]
                        pTime->hours %= 24u;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	791a      	ldrb	r2, [r3, #4]
 8014174:	4b35      	ldr	r3, [pc, #212]	; (801424c <gos_timeAddMilliseconds+0x1f8>)
 8014176:	fba3 1302 	umull	r1, r3, r3, r2
 801417a:	0919      	lsrs	r1, r3, #4
 801417c:	460b      	mov	r3, r1
 801417e:	005b      	lsls	r3, r3, #1
 8014180:	440b      	add	r3, r1
 8014182:	00db      	lsls	r3, r3, #3
 8014184:	1ad3      	subs	r3, r2, r3
 8014186:	b2da      	uxtb	r2, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	711a      	strb	r2, [r3, #4]

                        // Check days.
                        if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	891b      	ldrh	r3, [r3, #8]
 8014190:	b29b      	uxth	r3, r3
 8014192:	f003 0303 	and.w	r3, r3, #3
 8014196:	b29b      	uxth	r3, r3
 8014198:	2b00      	cmp	r3, #0
 801419a:	d117      	bne.n	80141cc <gos_timeAddMilliseconds+0x178>
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	79db      	ldrb	r3, [r3, #7]
 80141a0:	2b02      	cmp	r3, #2
 80141a2:	d113      	bne.n	80141cc <gos_timeAddMilliseconds+0x178>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	2b1d      	cmp	r3, #29
 80141ae:	d90d      	bls.n	80141cc <gos_timeAddMilliseconds+0x178>
                        {
                            pTime->days = 1u;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2200      	movs	r2, #0
 80141b4:	f042 0201 	orr.w	r2, r2, #1
 80141b8:	715a      	strb	r2, [r3, #5]
 80141ba:	2200      	movs	r2, #0
 80141bc:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	79db      	ldrb	r3, [r3, #7]
 80141c2:	3301      	adds	r3, #1
 80141c4:	b2da      	uxtb	r2, r3
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	71da      	strb	r2, [r3, #7]
 80141ca:	e024      	b.n	8014216 <gos_timeAddMilliseconds+0x1c2>
                        }
                        else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	891b      	ldrh	r3, [r3, #8]
 80141d0:	b29b      	uxth	r3, r3
 80141d2:	f003 0303 	and.w	r3, r3, #3
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d103      	bne.n	80141e4 <gos_timeAddMilliseconds+0x190>
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	79db      	ldrb	r3, [r3, #7]
 80141e0:	2b02      	cmp	r3, #2
 80141e2:	d018      	beq.n	8014216 <gos_timeAddMilliseconds+0x1c2>
                        {
                            // Wait.
                        }
                        else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	79db      	ldrb	r3, [r3, #7]
 80141e8:	3b01      	subs	r3, #1
 80141ea:	4a19      	ldr	r2, [pc, #100]	; (8014250 <gos_timeAddMilliseconds+0x1fc>)
 80141ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d20c      	bcs.n	8014216 <gos_timeAddMilliseconds+0x1c2>
                        {
                            pTime->days = 1u;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2200      	movs	r2, #0
 8014200:	f042 0201 	orr.w	r2, r2, #1
 8014204:	715a      	strb	r2, [r3, #5]
 8014206:	2200      	movs	r2, #0
 8014208:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	79db      	ldrb	r3, [r3, #7]
 801420e:	3301      	adds	r3, #1
 8014210:	b2da      	uxtb	r2, r3
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	71da      	strb	r2, [r3, #7]
                        {
                            // Nothing to do.
                        }

                        // Check months.
                        if (pTime->months == 13)
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	79db      	ldrb	r3, [r3, #7]
 801421a:	2b0d      	cmp	r3, #13
 801421c:	d109      	bne.n	8014232 <gos_timeAddMilliseconds+0x1de>
                        {
                            pTime->months = 1;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2201      	movs	r2, #1
 8014222:	71da      	strb	r2, [r3, #7]
                            pTime->years++;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	891b      	ldrh	r3, [r3, #8]
 8014228:	b29b      	uxth	r3, r3
 801422a:	3301      	adds	r3, #1
 801422c:	b29a      	uxth	r2, r3
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	811a      	strh	r2, [r3, #8]
            {
                // Nothing to do.
            }
        }

        timeAddMillisecondsResult = GOS_SUCCESS;
 8014232:	2355      	movs	r3, #85	; 0x55
 8014234:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddMillisecondsResult;
 8014236:	7bfb      	ldrb	r3, [r7, #15]
}
 8014238:	4618      	mov	r0, r3
 801423a:	3714      	adds	r7, #20
 801423c:	46bd      	mov	sp, r7
 801423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014242:	4770      	bx	lr
 8014244:	10624dd3 	.word	0x10624dd3
 8014248:	88888889 	.word	0x88888889
 801424c:	aaaaaaab 	.word	0xaaaaaaab
 8014250:	08019d4c 	.word	0x08019d4c

08014254 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 8014254:	b480      	push	{r7}
 8014256:	b087      	sub	sp, #28
 8014258:	af00      	add	r7, sp, #0
 801425a:	60f8      	str	r0, [r7, #12]
 801425c:	60b9      	str	r1, [r7, #8]
 801425e:	4613      	mov	r3, r2
 8014260:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 8014262:	23ae      	movs	r3, #174	; 0xae
 8014264:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d063      	beq.n	8014334 <gos_runTimeAddMicroseconds+0xe0>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	881b      	ldrh	r3, [r3, #0]
 8014270:	b29a      	uxth	r2, r3
 8014272:	88fb      	ldrh	r3, [r7, #6]
 8014274:	4413      	add	r3, r2
 8014276:	b29a      	uxth	r2, r3
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	881b      	ldrh	r3, [r3, #0]
 8014280:	b29b      	uxth	r3, r3
 8014282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014286:	d355      	bcc.n	8014334 <gos_runTimeAddMicroseconds+0xe0>
        {
            pRunTime1->microseconds -= 1000u;
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	881b      	ldrh	r3, [r3, #0]
 801428c:	b29b      	uxth	r3, r3
 801428e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8014292:	b29a      	uxth	r2, r3
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	885b      	ldrh	r3, [r3, #2]
 801429c:	b29b      	uxth	r3, r3
 801429e:	3301      	adds	r3, #1
 80142a0:	b29a      	uxth	r2, r3
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	885b      	ldrh	r3, [r3, #2]
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80142b0:	d340      	bcc.n	8014334 <gos_runTimeAddMicroseconds+0xe0>
            {
                pRunTime1->milliseconds -= 1000u;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	885b      	ldrh	r3, [r3, #2]
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80142bc:	b29a      	uxth	r2, r3
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	791b      	ldrb	r3, [r3, #4]
 80142c6:	3301      	adds	r3, #1
 80142c8:	b2da      	uxtb	r2, r3
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	791b      	ldrb	r3, [r3, #4]
 80142d2:	2b3b      	cmp	r3, #59	; 0x3b
 80142d4:	d92e      	bls.n	8014334 <gos_runTimeAddMicroseconds+0xe0>
                {
                    pRunTime1->seconds -= 60u;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	791b      	ldrb	r3, [r3, #4]
 80142da:	3b3c      	subs	r3, #60	; 0x3c
 80142dc:	b2da      	uxtb	r2, r3
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	795b      	ldrb	r3, [r3, #5]
 80142e6:	3301      	adds	r3, #1
 80142e8:	b2da      	uxtb	r2, r3
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	795b      	ldrb	r3, [r3, #5]
 80142f2:	2b3b      	cmp	r3, #59	; 0x3b
 80142f4:	d91e      	bls.n	8014334 <gos_runTimeAddMicroseconds+0xe0>
                    {
                        pRunTime1->minutes -= 60u;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	795b      	ldrb	r3, [r3, #5]
 80142fa:	3b3c      	subs	r3, #60	; 0x3c
 80142fc:	b2da      	uxtb	r2, r3
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	799b      	ldrb	r3, [r3, #6]
 8014306:	3301      	adds	r3, #1
 8014308:	b2da      	uxtb	r2, r3
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	799b      	ldrb	r3, [r3, #6]
 8014312:	2b17      	cmp	r3, #23
 8014314:	d90e      	bls.n	8014334 <gos_runTimeAddMicroseconds+0xe0>
                        {
                            pRunTime1->hours -= 24u;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	799b      	ldrb	r3, [r3, #6]
 801431a:	3b18      	subs	r3, #24
 801431c:	b2da      	uxtb	r2, r3
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8014328:	b29b      	uxth	r3, r3
 801432a:	3301      	adds	r3, #1
 801432c:	b29a      	uxth	r2, r3
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d063      	beq.n	8014402 <gos_runTimeAddMicroseconds+0x1ae>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 801433a:	68bb      	ldr	r3, [r7, #8]
 801433c:	881b      	ldrh	r3, [r3, #0]
 801433e:	b29a      	uxth	r2, r3
 8014340:	88fb      	ldrh	r3, [r7, #6]
 8014342:	4413      	add	r3, r2
 8014344:	b29a      	uxth	r2, r3
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	881b      	ldrh	r3, [r3, #0]
 801434e:	b29b      	uxth	r3, r3
 8014350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014354:	d355      	bcc.n	8014402 <gos_runTimeAddMicroseconds+0x1ae>
        {
            pRunTime2->microseconds -= 1000u;
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	b29b      	uxth	r3, r3
 801435c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8014360:	b29a      	uxth	r2, r3
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	885b      	ldrh	r3, [r3, #2]
 801436a:	b29b      	uxth	r3, r3
 801436c:	3301      	adds	r3, #1
 801436e:	b29a      	uxth	r2, r3
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	885b      	ldrh	r3, [r3, #2]
 8014378:	b29b      	uxth	r3, r3
 801437a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801437e:	d340      	bcc.n	8014402 <gos_runTimeAddMicroseconds+0x1ae>
            {
                pRunTime2->milliseconds -= 1000u;
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	885b      	ldrh	r3, [r3, #2]
 8014384:	b29b      	uxth	r3, r3
 8014386:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801438a:	b29a      	uxth	r2, r3
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	791b      	ldrb	r3, [r3, #4]
 8014394:	3301      	adds	r3, #1
 8014396:	b2da      	uxtb	r2, r3
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	791b      	ldrb	r3, [r3, #4]
 80143a0:	2b3b      	cmp	r3, #59	; 0x3b
 80143a2:	d92e      	bls.n	8014402 <gos_runTimeAddMicroseconds+0x1ae>
                {
                    pRunTime2->seconds -= 60u;
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	791b      	ldrb	r3, [r3, #4]
 80143a8:	3b3c      	subs	r3, #60	; 0x3c
 80143aa:	b2da      	uxtb	r2, r3
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	795b      	ldrb	r3, [r3, #5]
 80143b4:	3301      	adds	r3, #1
 80143b6:	b2da      	uxtb	r2, r3
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	795b      	ldrb	r3, [r3, #5]
 80143c0:	2b3b      	cmp	r3, #59	; 0x3b
 80143c2:	d91e      	bls.n	8014402 <gos_runTimeAddMicroseconds+0x1ae>
                    {
                        pRunTime2->minutes -= 60u;
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	795b      	ldrb	r3, [r3, #5]
 80143c8:	3b3c      	subs	r3, #60	; 0x3c
 80143ca:	b2da      	uxtb	r2, r3
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	799b      	ldrb	r3, [r3, #6]
 80143d4:	3301      	adds	r3, #1
 80143d6:	b2da      	uxtb	r2, r3
 80143d8:	68bb      	ldr	r3, [r7, #8]
 80143da:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	799b      	ldrb	r3, [r3, #6]
 80143e0:	2b17      	cmp	r3, #23
 80143e2:	d90e      	bls.n	8014402 <gos_runTimeAddMicroseconds+0x1ae>
                        {
                            pRunTime2->hours -= 24u;
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	799b      	ldrb	r3, [r3, #6]
 80143e8:	3b18      	subs	r3, #24
 80143ea:	b2da      	uxtb	r2, r3
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	3301      	adds	r3, #1
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 8014402:	2355      	movs	r3, #85	; 0x55
 8014404:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 8014406:	7dfb      	ldrb	r3, [r7, #23]
}
 8014408:	4618      	mov	r0, r3
 801440a:	371c      	adds	r7, #28
 801440c:	46bd      	mov	sp, r7
 801440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014412:	4770      	bx	lr

08014414 <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 8014414:	b480      	push	{r7}
 8014416:	b085      	sub	sp, #20
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	460b      	mov	r3, r1
 801441e:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 8014420:	23ae      	movs	r3, #174	; 0xae
 8014422:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2b00      	cmp	r3, #0
 8014428:	f000 808f 	beq.w	801454a <gos_runTimeAddMilliseconds+0x136>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	885b      	ldrh	r3, [r3, #2]
 8014430:	b29a      	uxth	r2, r3
 8014432:	887b      	ldrh	r3, [r7, #2]
 8014434:	4413      	add	r3, r2
 8014436:	b29a      	uxth	r2, r3
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	885b      	ldrh	r3, [r3, #2]
 8014440:	b29b      	uxth	r3, r3
 8014442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014446:	d37e      	bcc.n	8014546 <gos_runTimeAddMilliseconds+0x132>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	791a      	ldrb	r2, [r3, #4]
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	885b      	ldrh	r3, [r3, #2]
 8014450:	b29b      	uxth	r3, r3
 8014452:	4941      	ldr	r1, [pc, #260]	; (8014558 <gos_runTimeAddMilliseconds+0x144>)
 8014454:	fba1 1303 	umull	r1, r3, r1, r3
 8014458:	099b      	lsrs	r3, r3, #6
 801445a:	b29b      	uxth	r3, r3
 801445c:	b2db      	uxtb	r3, r3
 801445e:	4413      	add	r3, r2
 8014460:	b2da      	uxtb	r2, r3
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	885b      	ldrh	r3, [r3, #2]
 801446a:	b29b      	uxth	r3, r3
 801446c:	4a3a      	ldr	r2, [pc, #232]	; (8014558 <gos_runTimeAddMilliseconds+0x144>)
 801446e:	fba2 1203 	umull	r1, r2, r2, r3
 8014472:	0992      	lsrs	r2, r2, #6
 8014474:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014478:	fb01 f202 	mul.w	r2, r1, r2
 801447c:	1a9b      	subs	r3, r3, r2
 801447e:	b29a      	uxth	r2, r3
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	791b      	ldrb	r3, [r3, #4]
 8014488:	2b3b      	cmp	r3, #59	; 0x3b
 801448a:	d95c      	bls.n	8014546 <gos_runTimeAddMilliseconds+0x132>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	795a      	ldrb	r2, [r3, #5]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	791b      	ldrb	r3, [r3, #4]
 8014494:	4931      	ldr	r1, [pc, #196]	; (801455c <gos_runTimeAddMilliseconds+0x148>)
 8014496:	fba1 1303 	umull	r1, r3, r1, r3
 801449a:	095b      	lsrs	r3, r3, #5
 801449c:	b2db      	uxtb	r3, r3
 801449e:	4413      	add	r3, r2
 80144a0:	b2da      	uxtb	r2, r3
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	791a      	ldrb	r2, [r3, #4]
 80144aa:	4b2c      	ldr	r3, [pc, #176]	; (801455c <gos_runTimeAddMilliseconds+0x148>)
 80144ac:	fba3 1302 	umull	r1, r3, r3, r2
 80144b0:	0959      	lsrs	r1, r3, #5
 80144b2:	460b      	mov	r3, r1
 80144b4:	011b      	lsls	r3, r3, #4
 80144b6:	1a5b      	subs	r3, r3, r1
 80144b8:	009b      	lsls	r3, r3, #2
 80144ba:	1ad3      	subs	r3, r2, r3
 80144bc:	b2da      	uxtb	r2, r3
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	795b      	ldrb	r3, [r3, #5]
 80144c6:	2b3b      	cmp	r3, #59	; 0x3b
 80144c8:	d93d      	bls.n	8014546 <gos_runTimeAddMilliseconds+0x132>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	799a      	ldrb	r2, [r3, #6]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	795b      	ldrb	r3, [r3, #5]
 80144d2:	4922      	ldr	r1, [pc, #136]	; (801455c <gos_runTimeAddMilliseconds+0x148>)
 80144d4:	fba1 1303 	umull	r1, r3, r1, r3
 80144d8:	095b      	lsrs	r3, r3, #5
 80144da:	b2db      	uxtb	r3, r3
 80144dc:	4413      	add	r3, r2
 80144de:	b2da      	uxtb	r2, r3
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	795a      	ldrb	r2, [r3, #5]
 80144e8:	4b1c      	ldr	r3, [pc, #112]	; (801455c <gos_runTimeAddMilliseconds+0x148>)
 80144ea:	fba3 1302 	umull	r1, r3, r3, r2
 80144ee:	0959      	lsrs	r1, r3, #5
 80144f0:	460b      	mov	r3, r1
 80144f2:	011b      	lsls	r3, r3, #4
 80144f4:	1a5b      	subs	r3, r3, r1
 80144f6:	009b      	lsls	r3, r3, #2
 80144f8:	1ad3      	subs	r3, r2, r3
 80144fa:	b2da      	uxtb	r2, r3
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	799b      	ldrb	r3, [r3, #6]
 8014504:	2b17      	cmp	r3, #23
 8014506:	d91e      	bls.n	8014546 <gos_runTimeAddMilliseconds+0x132>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801450e:	b29a      	uxth	r2, r3
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	799b      	ldrb	r3, [r3, #6]
 8014514:	4912      	ldr	r1, [pc, #72]	; (8014560 <gos_runTimeAddMilliseconds+0x14c>)
 8014516:	fba1 1303 	umull	r1, r3, r1, r3
 801451a:	091b      	lsrs	r3, r3, #4
 801451c:	b2db      	uxtb	r3, r3
 801451e:	b29b      	uxth	r3, r3
 8014520:	4413      	add	r3, r2
 8014522:	b29a      	uxth	r2, r3
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	f8a3 2007 	strh.w	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	799a      	ldrb	r2, [r3, #6]
 801452e:	4b0c      	ldr	r3, [pc, #48]	; (8014560 <gos_runTimeAddMilliseconds+0x14c>)
 8014530:	fba3 1302 	umull	r1, r3, r3, r2
 8014534:	0919      	lsrs	r1, r3, #4
 8014536:	460b      	mov	r3, r1
 8014538:	005b      	lsls	r3, r3, #1
 801453a:	440b      	add	r3, r1
 801453c:	00db      	lsls	r3, r3, #3
 801453e:	1ad3      	subs	r3, r2, r3
 8014540:	b2da      	uxtb	r2, r3
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 8014546:	2355      	movs	r3, #85	; 0x55
 8014548:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 801454a:	7bfb      	ldrb	r3, [r7, #15]
}
 801454c:	4618      	mov	r0, r3
 801454e:	3714      	adds	r7, #20
 8014550:	46bd      	mov	sp, r7
 8014552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014556:	4770      	bx	lr
 8014558:	10624dd3 	.word	0x10624dd3
 801455c:	88888889 	.word	0x88888889
 8014560:	aaaaaaab 	.word	0xaaaaaaab

08014564 <gos_timeIncreaseSystemTime>:

/*
 * Function: gos_timeIncreaseSystemTime
 */
gos_result_t gos_timeIncreaseSystemTime (u16_t milliseconds)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b084      	sub	sp, #16
 8014568:	af00      	add	r7, sp, #0
 801456a:	4603      	mov	r3, r0
 801456c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t increaseSystemTimeResult = GOS_ERROR;
 801456e:	23ae      	movs	r3, #174	; 0xae
 8014570:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 8014572:	88fb      	ldrh	r3, [r7, #6]
 8014574:	4619      	mov	r1, r3
 8014576:	480a      	ldr	r0, [pc, #40]	; (80145a0 <gos_timeIncreaseSystemTime+0x3c>)
 8014578:	f7ff ff4c 	bl	8014414 <gos_runTimeAddMilliseconds>
 801457c:	4603      	mov	r3, r0
 801457e:	2b55      	cmp	r3, #85	; 0x55
 8014580:	d109      	bne.n	8014596 <gos_timeIncreaseSystemTime+0x32>
        gos_timeAddMilliseconds(&systemTime, milliseconds) == GOS_SUCCESS)
 8014582:	88fb      	ldrh	r3, [r7, #6]
 8014584:	4619      	mov	r1, r3
 8014586:	4807      	ldr	r0, [pc, #28]	; (80145a4 <gos_timeIncreaseSystemTime+0x40>)
 8014588:	f7ff fd64 	bl	8014054 <gos_timeAddMilliseconds>
 801458c:	4603      	mov	r3, r0
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 801458e:	2b55      	cmp	r3, #85	; 0x55
 8014590:	d101      	bne.n	8014596 <gos_timeIncreaseSystemTime+0x32>
    {
        increaseSystemTimeResult = GOS_SUCCESS;
 8014592:	2355      	movs	r3, #85	; 0x55
 8014594:	73fb      	strb	r3, [r7, #15]
    else
    {
        // One of the operations failed.
    }

    return increaseSystemTimeResult;
 8014596:	7bfb      	ldrb	r3, [r7, #15]
}
 8014598:	4618      	mov	r0, r3
 801459a:	3710      	adds	r7, #16
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	2000e98c 	.word	0x2000e98c
 80145a4:	2000208c 	.word	0x2000208c

080145a8 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b084      	sub	sp, #16
 80145ac:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 80145ae:	1d3b      	adds	r3, r7, #4
 80145b0:	2200      	movs	r2, #0
 80145b2:	601a      	str	r2, [r3, #0]
 80145b4:	605a      	str	r2, [r3, #4]
 80145b6:	811a      	strh	r2, [r3, #8]
     * Function code.
     */
    for (;;)
    {
        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 80145b8:	4b27      	ldr	r3, [pc, #156]	; (8014658 <gos_timeDaemonTask+0xb0>)
 80145ba:	789a      	ldrb	r2, [r3, #2]
 80145bc:	79bb      	ldrb	r3, [r7, #6]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d905      	bls.n	80145ce <gos_timeDaemonTask+0x26>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 80145c2:	4b26      	ldr	r3, [pc, #152]	; (801465c <gos_timeDaemonTask+0xb4>)
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	2100      	movs	r1, #0
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7fe ff59 	bl	8013480 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 80145ce:	4b22      	ldr	r3, [pc, #136]	; (8014658 <gos_timeDaemonTask+0xb0>)
 80145d0:	78da      	ldrb	r2, [r3, #3]
 80145d2:	79fb      	ldrb	r3, [r7, #7]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d905      	bls.n	80145e4 <gos_timeDaemonTask+0x3c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 80145d8:	4b20      	ldr	r3, [pc, #128]	; (801465c <gos_timeDaemonTask+0xb4>)
 80145da:	781b      	ldrb	r3, [r3, #0]
 80145dc:	2101      	movs	r1, #1
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fe ff4e 	bl	8013480 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 80145e4:	4b1c      	ldr	r3, [pc, #112]	; (8014658 <gos_timeDaemonTask+0xb0>)
 80145e6:	791a      	ldrb	r2, [r3, #4]
 80145e8:	7a3b      	ldrb	r3, [r7, #8]
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d905      	bls.n	80145fa <gos_timeDaemonTask+0x52>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 80145ee:	4b1b      	ldr	r3, [pc, #108]	; (801465c <gos_timeDaemonTask+0xb4>)
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	2102      	movs	r1, #2
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7fe ff43 	bl	8013480 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 80145fa:	4b17      	ldr	r3, [pc, #92]	; (8014658 <gos_timeDaemonTask+0xb0>)
 80145fc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8014600:	b29a      	uxth	r2, r3
 8014602:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 8014606:	b29b      	uxth	r3, r3
 8014608:	429a      	cmp	r2, r3
 801460a:	d905      	bls.n	8014618 <gos_timeDaemonTask+0x70>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 801460c:	4b13      	ldr	r3, [pc, #76]	; (801465c <gos_timeDaemonTask+0xb4>)
 801460e:	781b      	ldrb	r3, [r3, #0]
 8014610:	2103      	movs	r1, #3
 8014612:	4618      	mov	r0, r3
 8014614:	f7fe ff34 	bl	8013480 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 8014618:	4b0f      	ldr	r3, [pc, #60]	; (8014658 <gos_timeDaemonTask+0xb0>)
 801461a:	79da      	ldrb	r2, [r3, #7]
 801461c:	7afb      	ldrb	r3, [r7, #11]
 801461e:	429a      	cmp	r2, r3
 8014620:	d905      	bls.n	801462e <gos_timeDaemonTask+0x86>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 8014622:	4b0e      	ldr	r3, [pc, #56]	; (801465c <gos_timeDaemonTask+0xb4>)
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	2104      	movs	r1, #4
 8014628:	4618      	mov	r0, r3
 801462a:	f7fe ff29 	bl	8013480 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 801462e:	4b0a      	ldr	r3, [pc, #40]	; (8014658 <gos_timeDaemonTask+0xb0>)
 8014630:	891a      	ldrh	r2, [r3, #8]
 8014632:	89bb      	ldrh	r3, [r7, #12]
 8014634:	429a      	cmp	r2, r3
 8014636:	d905      	bls.n	8014644 <gos_timeDaemonTask+0x9c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 8014638:	4b08      	ldr	r3, [pc, #32]	; (801465c <gos_timeDaemonTask+0xb4>)
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	2105      	movs	r1, #5
 801463e:	4618      	mov	r0, r3
 8014640:	f7fe ff1e 	bl	8013480 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 8014644:	1d3b      	adds	r3, r7, #4
 8014646:	4618      	mov	r0, r3
 8014648:	f7ff fcac 	bl	8013fa4 <gos_timeGet>
        (void_t) gos_taskSleep(TIME_SLEEP_TIME_MS);
 801464c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014650:	f7fb fa10 	bl	800fa74 <gos_taskSleep>
        if (systemTime.seconds > previousTime.seconds)
 8014654:	e7b0      	b.n	80145b8 <gos_timeDaemonTask+0x10>
 8014656:	bf00      	nop
 8014658:	2000208c 	.word	0x2000208c
 801465c:	2000e998 	.word	0x2000e998

08014660 <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b082      	sub	sp, #8
 8014664:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_SUCCESS;
 8014666:	2355      	movs	r3, #85	; 0x55
 8014668:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 801466a:	480d      	ldr	r0, [pc, #52]	; (80146a0 <gos_traceInit+0x40>)
 801466c:	f7fd fff0 	bl	8012650 <gos_queueCreate>
 8014670:	4603      	mov	r3, r0
 8014672:	2b55      	cmp	r3, #85	; 0x55
 8014674:	d10c      	bne.n	8014690 <gos_traceInit+0x30>
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 8014676:	2100      	movs	r1, #0
 8014678:	480a      	ldr	r0, [pc, #40]	; (80146a4 <gos_traceInit+0x44>)
 801467a:	f7fb f869 	bl	800f750 <gos_taskRegister>
 801467e:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 8014680:	2b55      	cmp	r3, #85	; 0x55
 8014682:	d105      	bne.n	8014690 <gos_traceInit+0x30>
        gos_mutexInit(&traceMutex) != GOS_SUCCESS
 8014684:	4808      	ldr	r0, [pc, #32]	; (80146a8 <gos_traceInit+0x48>)
 8014686:	f7fd fe05 	bl	8012294 <gos_mutexInit>
 801468a:	4603      	mov	r3, r0
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 801468c:	2b55      	cmp	r3, #85	; 0x55
 801468e:	d001      	beq.n	8014694 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_ERROR;
 8014690:	23ae      	movs	r3, #174	; 0xae
 8014692:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 8014694:	79fb      	ldrb	r3, [r7, #7]
}
 8014696:	4618      	mov	r0, r3
 8014698:	3708      	adds	r7, #8
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}
 801469e:	bf00      	nop
 80146a0:	20002104 	.word	0x20002104
 80146a4:	20002120 	.word	0x20002120
 80146a8:	2000eb58 	.word	0x2000eb58

080146ac <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 80146ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146ae:	b0a9      	sub	sp, #164	; 0xa4
 80146b0:	af06      	add	r7, sp, #24
 80146b2:	4603      	mov	r3, r0
 80146b4:	6039      	str	r1, [r7, #0]
 80146b6:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_ERROR;
 80146b8:	23ae      	movs	r3, #174	; 0xae
 80146ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 80146be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80146c2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    gos_taskDescriptor_t     callerTaskDesc = {0};
 80146c6:	f107 0318 	add.w	r3, r7, #24
 80146ca:	226a      	movs	r2, #106	; 0x6a
 80146cc:	2100      	movs	r1, #0
 80146ce:	4618      	mov	r0, r3
 80146d0:	f001 fb40 	bl	8015d54 <memset>
    gos_time_t               sysTime        = {0};
 80146d4:	f107 030c 	add.w	r3, r7, #12
 80146d8:	2200      	movs	r2, #0
 80146da:	601a      	str	r2, [r3, #0]
 80146dc:	605a      	str	r2, [r3, #4]
 80146de:	811a      	strh	r2, [r3, #8]
    gos_taskPrivilegeLevel_t privileges     = 0u;
 80146e0:	2300      	movs	r3, #0
 80146e2:	817b      	strh	r3, [r7, #10]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	f000 80e6 	beq.w	80148b8 <gos_traceTrace+0x20c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 80146ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80146f0:	4618      	mov	r0, r3
 80146f2:	f7fc fbff 	bl	8010ef4 <gos_taskGetCurrentId>
 80146f6:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 80146f8:	2b55      	cmp	r3, #85	; 0x55
 80146fa:	f040 80dd 	bne.w	80148b8 <gos_traceTrace+0x20c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 80146fe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8014702:	f107 0218 	add.w	r2, r7, #24
 8014706:	4611      	mov	r1, r2
 8014708:	4618      	mov	r0, r3
 801470a:	f7fc fc4f 	bl	8010fac <gos_taskGetData>
 801470e:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8014710:	2b55      	cmp	r3, #85	; 0x55
 8014712:	f040 80d1 	bne.w	80148b8 <gos_traceTrace+0x20c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8014716:	8c3b      	ldrh	r3, [r7, #32]
 8014718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 801471c:	2b00      	cmp	r3, #0
 801471e:	d105      	bne.n	801472c <gos_traceTrace+0x80>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8014720:	f7fa fcf6 	bl	800f110 <gos_kernelIsCallerIsr>
 8014724:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8014726:	2b36      	cmp	r3, #54	; 0x36
 8014728:	f040 80c6 	bne.w	80148b8 <gos_traceTrace+0x20c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 801472c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8014730:	4864      	ldr	r0, [pc, #400]	; (80148c4 <gos_traceTrace+0x218>)
 8014732:	f7fd fdc9 	bl	80122c8 <gos_mutexLock>
 8014736:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8014738:	2b55      	cmp	r3, #85	; 0x55
 801473a:	f040 80bd 	bne.w	80148b8 <gos_traceTrace+0x20c>
        )
    {
        // Pre-set result.
        traceResult = GOS_SUCCESS;
 801473e:	2355      	movs	r3, #85	; 0x55
 8014740:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

        if (addTimeStamp == GOS_TRUE)
 8014744:	79fb      	ldrb	r3, [r7, #7]
 8014746:	2b36      	cmp	r3, #54	; 0x36
 8014748:	d137      	bne.n	80147ba <gos_traceTrace+0x10e>
        {
            traceResult &= gos_timeGet(&sysTime);
 801474a:	f107 030c 	add.w	r3, r7, #12
 801474e:	4618      	mov	r0, r3
 8014750:	f7ff fc28 	bl	8013fa4 <gos_timeGet>
 8014754:	4603      	mov	r3, r0
 8014756:	461a      	mov	r2, r3
 8014758:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801475c:	4013      	ands	r3, r2
 801475e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8014762:	8abb      	ldrh	r3, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8014764:	461d      	mov	r5, r3
                    sysTime.months,
 8014766:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8014768:	461e      	mov	r6, r3
                    sysTime.days,
 801476a:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 801476e:	b29b      	uxth	r3, r3
                    sysTime.hours,
 8014770:	7c3a      	ldrb	r2, [r7, #16]
                    sysTime.minutes,
 8014772:	7bf9      	ldrb	r1, [r7, #15]
                    sysTime.seconds,
 8014774:	7bb8      	ldrb	r0, [r7, #14]
                    sysTime.milliseconds
 8014776:	89bc      	ldrh	r4, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8014778:	9404      	str	r4, [sp, #16]
 801477a:	9003      	str	r0, [sp, #12]
 801477c:	9102      	str	r1, [sp, #8]
 801477e:	9201      	str	r2, [sp, #4]
 8014780:	9300      	str	r3, [sp, #0]
 8014782:	4633      	mov	r3, r6
 8014784:	462a      	mov	r2, r5
 8014786:	4950      	ldr	r1, [pc, #320]	; (80148c8 <gos_traceTrace+0x21c>)
 8014788:	4850      	ldr	r0, [pc, #320]	; (80148cc <gos_traceTrace+0x220>)
 801478a:	f001 fa5f 	bl	8015c4c <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 801478e:	4b50      	ldr	r3, [pc, #320]	; (80148d0 <gos_traceTrace+0x224>)
 8014790:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 8014792:	484e      	ldr	r0, [pc, #312]	; (80148cc <gos_traceTrace+0x220>)
 8014794:	f7eb fd9c 	bl	80002d0 <strlen>
 8014798:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 801479a:	b2db      	uxtb	r3, r3
 801479c:	3301      	adds	r3, #1
 801479e:	b2da      	uxtb	r2, r3
 80147a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80147a4:	4949      	ldr	r1, [pc, #292]	; (80148cc <gos_traceTrace+0x220>)
 80147a6:	4620      	mov	r0, r4
 80147a8:	f7fd ffae 	bl	8012708 <gos_queuePut>
 80147ac:	4603      	mov	r3, r0
 80147ae:	461a      	mov	r2, r3
 80147b0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80147b4:	4013      	ands	r3, r2
 80147b6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        traceResult &= gos_queuePut(
 80147ba:	4b45      	ldr	r3, [pc, #276]	; (80148d0 <gos_traceTrace+0x224>)
 80147bc:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
 80147be:	6838      	ldr	r0, [r7, #0]
 80147c0:	f7eb fd86 	bl	80002d0 <strlen>
 80147c4:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 80147c6:	b2db      	uxtb	r3, r3
 80147c8:	3301      	adds	r3, #1
 80147ca:	b2da      	uxtb	r2, r3
 80147cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80147d0:	6839      	ldr	r1, [r7, #0]
 80147d2:	4620      	mov	r0, r4
 80147d4:	f7fd ff98 	bl	8012708 <gos_queuePut>
 80147d8:	4603      	mov	r3, r0
 80147da:	461a      	mov	r2, r3
 80147dc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80147e0:	4013      	ands	r3, r2
 80147e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 80147e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80147ea:	2b55      	cmp	r3, #85	; 0x55
 80147ec:	d002      	beq.n	80147f4 <gos_traceTrace+0x148>
        {
            traceResult = GOS_ERROR;
 80147ee:	23ae      	movs	r3, #174	; 0xae
 80147f0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 80147f4:	4b37      	ldr	r3, [pc, #220]	; (80148d4 <gos_traceTrace+0x228>)
 80147f6:	781b      	ldrb	r3, [r3, #0]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d108      	bne.n	801480e <gos_traceTrace+0x162>
 80147fc:	b672      	cpsid	i
 80147fe:	f3ef 8310 	mrs	r3, PRIMASK
 8014802:	4a35      	ldr	r2, [pc, #212]	; (80148d8 <gos_traceTrace+0x22c>)
 8014804:	6013      	str	r3, [r2, #0]
 8014806:	f3bf 8f4f 	dsb	sy
 801480a:	f3bf 8f6f 	isb	sy
 801480e:	4b31      	ldr	r3, [pc, #196]	; (80148d4 <gos_traceTrace+0x228>)
 8014810:	781b      	ldrb	r3, [r3, #0]
 8014812:	3301      	adds	r3, #1
 8014814:	b2da      	uxtb	r2, r3
 8014816:	4b2f      	ldr	r3, [pc, #188]	; (80148d4 <gos_traceTrace+0x228>)
 8014818:	701a      	strb	r2, [r3, #0]
 801481a:	4b30      	ldr	r3, [pc, #192]	; (80148dc <gos_traceTrace+0x230>)
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	3301      	adds	r3, #1
 8014820:	b2da      	uxtb	r2, r3
 8014822:	4b2e      	ldr	r3, [pc, #184]	; (80148dc <gos_traceTrace+0x230>)
 8014824:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 8014826:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801482a:	f107 020a 	add.w	r2, r7, #10
 801482e:	4611      	mov	r1, r2
 8014830:	4618      	mov	r0, r3
 8014832:	f7fc fab7 	bl	8010da4 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8014836:	897b      	ldrh	r3, [r7, #10]
 8014838:	b21b      	sxth	r3, r3
 801483a:	2b00      	cmp	r3, #0
 801483c:	db13      	blt.n	8014866 <gos_traceTrace+0x1ba>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 801483e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8014842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014846:	4618      	mov	r0, r3
 8014848:	f7fc f948 	bl	8010adc <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 801484c:	4b24      	ldr	r3, [pc, #144]	; (80148e0 <gos_traceTrace+0x234>)
 801484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014850:	4618      	mov	r0, r3
 8014852:	f7fb fb7d 	bl	800ff50 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8014856:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801485a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801485e:	4618      	mov	r0, r3
 8014860:	f7fc f9b4 	bl	8010bcc <gos_taskRemovePrivilege>
 8014864:	e004      	b.n	8014870 <gos_traceTrace+0x1c4>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8014866:	4b1e      	ldr	r3, [pc, #120]	; (80148e0 <gos_traceTrace+0x234>)
 8014868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801486a:	4618      	mov	r0, r3
 801486c:	f7fb fb70 	bl	800ff50 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 8014870:	4b18      	ldr	r3, [pc, #96]	; (80148d4 <gos_traceTrace+0x228>)
 8014872:	781b      	ldrb	r3, [r3, #0]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d005      	beq.n	8014884 <gos_traceTrace+0x1d8>
 8014878:	4b16      	ldr	r3, [pc, #88]	; (80148d4 <gos_traceTrace+0x228>)
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	3b01      	subs	r3, #1
 801487e:	b2da      	uxtb	r2, r3
 8014880:	4b14      	ldr	r3, [pc, #80]	; (80148d4 <gos_traceTrace+0x228>)
 8014882:	701a      	strb	r2, [r3, #0]
 8014884:	4b13      	ldr	r3, [pc, #76]	; (80148d4 <gos_traceTrace+0x228>)
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d108      	bne.n	801489e <gos_traceTrace+0x1f2>
 801488c:	4b12      	ldr	r3, [pc, #72]	; (80148d8 <gos_traceTrace+0x22c>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	f383 8810 	msr	PRIMASK, r3
 8014894:	b662      	cpsie	i
 8014896:	f3bf 8f4f 	dsb	sy
 801489a:	f3bf 8f6f 	isb	sy
 801489e:	4b0f      	ldr	r3, [pc, #60]	; (80148dc <gos_traceTrace+0x230>)
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d005      	beq.n	80148b2 <gos_traceTrace+0x206>
 80148a6:	4b0d      	ldr	r3, [pc, #52]	; (80148dc <gos_traceTrace+0x230>)
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	3b01      	subs	r3, #1
 80148ac:	b2da      	uxtb	r2, r3
 80148ae:	4b0b      	ldr	r3, [pc, #44]	; (80148dc <gos_traceTrace+0x230>)
 80148b0:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 80148b2:	4804      	ldr	r0, [pc, #16]	; (80148c4 <gos_traceTrace+0x218>)
 80148b4:	f7fd fe0e 	bl	80124d4 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 80148b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80148bc:	4618      	mov	r0, r3
 80148be:	378c      	adds	r7, #140	; 0x8c
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148c4:	2000eb58 	.word	0x2000eb58
 80148c8:	080196c4 	.word	0x080196c4
 80148cc:	2000eb2c 	.word	0x2000eb2c
 80148d0:	20002104 	.word	0x20002104
 80148d4:	200050eb 	.word	0x200050eb
 80148d8:	200050ec 	.word	0x200050ec
 80148dc:	200050e9 	.word	0x200050e9
 80148e0:	20002120 	.word	0x20002120

080148e4 <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 80148e4:	b40e      	push	{r1, r2, r3}
 80148e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148e8:	b0aa      	sub	sp, #168	; 0xa8
 80148ea:	af06      	add	r7, sp, #24
 80148ec:	4603      	mov	r3, r0
 80148ee:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 80148f0:	2355      	movs	r3, #85	; 0x55
 80148f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 80148f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80148fa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 80148fe:	f107 0320 	add.w	r3, r7, #32
 8014902:	226a      	movs	r2, #106	; 0x6a
 8014904:	2100      	movs	r1, #0
 8014906:	4618      	mov	r0, r3
 8014908:	f001 fa24 	bl	8015d54 <memset>
    gos_time_t               sysTime        = {0};
 801490c:	f107 0314 	add.w	r3, r7, #20
 8014910:	2200      	movs	r2, #0
 8014912:	601a      	str	r2, [r3, #0]
 8014914:	605a      	str	r2, [r3, #4]
 8014916:	811a      	strh	r2, [r3, #8]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 8014918:	2300      	movs	r3, #0
 801491a:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 801491c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014920:	2b00      	cmp	r3, #0
 8014922:	f000 80ed 	beq.w	8014b00 <gos_traceTraceFormatted+0x21c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 8014926:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801492a:	4618      	mov	r0, r3
 801492c:	f7fc fae2 	bl	8010ef4 <gos_taskGetCurrentId>
 8014930:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 8014932:	2b55      	cmp	r3, #85	; 0x55
 8014934:	f040 80e4 	bne.w	8014b00 <gos_traceTraceFormatted+0x21c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8014938:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 801493c:	f107 0220 	add.w	r2, r7, #32
 8014940:	4611      	mov	r1, r2
 8014942:	4618      	mov	r0, r3
 8014944:	f7fc fb32 	bl	8010fac <gos_taskGetData>
 8014948:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 801494a:	2b55      	cmp	r3, #85	; 0x55
 801494c:	f040 80d8 	bne.w	8014b00 <gos_traceTraceFormatted+0x21c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8014950:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 8014956:	2b00      	cmp	r3, #0
 8014958:	d105      	bne.n	8014966 <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 801495a:	f7fa fbd9 	bl	800f110 <gos_kernelIsCallerIsr>
 801495e:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 8014960:	2b36      	cmp	r3, #54	; 0x36
 8014962:	f040 80cd 	bne.w	8014b00 <gos_traceTraceFormatted+0x21c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 8014966:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 801496a:	486b      	ldr	r0, [pc, #428]	; (8014b18 <gos_traceTraceFormatted+0x234>)
 801496c:	f7fd fcac 	bl	80122c8 <gos_mutexLock>
 8014970:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 8014972:	2b55      	cmp	r3, #85	; 0x55
 8014974:	f040 80c4 	bne.w	8014b00 <gos_traceTraceFormatted+0x21c>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 8014978:	79fb      	ldrb	r3, [r7, #7]
 801497a:	2b36      	cmp	r3, #54	; 0x36
 801497c:	d137      	bne.n	80149ee <gos_traceTraceFormatted+0x10a>
        {
            traceResult &= gos_timeGet(&sysTime);
 801497e:	f107 0314 	add.w	r3, r7, #20
 8014982:	4618      	mov	r0, r3
 8014984:	f7ff fb0e 	bl	8013fa4 <gos_timeGet>
 8014988:	4603      	mov	r3, r0
 801498a:	461a      	mov	r2, r3
 801498c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014990:	4013      	ands	r3, r2
 8014992:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 8014996:	8bbb      	ldrh	r3, [r7, #28]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 8014998:	461d      	mov	r5, r3
                    sysTime.months,
 801499a:	7efb      	ldrb	r3, [r7, #27]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 801499c:	461e      	mov	r6, r3
                    sysTime.days,
 801499e:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80149a2:	b29b      	uxth	r3, r3
                    sysTime.hours,
 80149a4:	7e3a      	ldrb	r2, [r7, #24]
                    sysTime.minutes,
 80149a6:	7df9      	ldrb	r1, [r7, #23]
                    sysTime.seconds,
 80149a8:	7db8      	ldrb	r0, [r7, #22]
                    sysTime.milliseconds
 80149aa:	8abc      	ldrh	r4, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 80149ac:	9404      	str	r4, [sp, #16]
 80149ae:	9003      	str	r0, [sp, #12]
 80149b0:	9102      	str	r1, [sp, #8]
 80149b2:	9201      	str	r2, [sp, #4]
 80149b4:	9300      	str	r3, [sp, #0]
 80149b6:	4633      	mov	r3, r6
 80149b8:	462a      	mov	r2, r5
 80149ba:	4958      	ldr	r1, [pc, #352]	; (8014b1c <gos_traceTraceFormatted+0x238>)
 80149bc:	4858      	ldr	r0, [pc, #352]	; (8014b20 <gos_traceTraceFormatted+0x23c>)
 80149be:	f001 f945 	bl	8015c4c <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 80149c2:	4b58      	ldr	r3, [pc, #352]	; (8014b24 <gos_traceTraceFormatted+0x240>)
 80149c4:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 80149c6:	4856      	ldr	r0, [pc, #344]	; (8014b20 <gos_traceTraceFormatted+0x23c>)
 80149c8:	f7eb fc82 	bl	80002d0 <strlen>
 80149cc:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 80149ce:	b2db      	uxtb	r3, r3
 80149d0:	3301      	adds	r3, #1
 80149d2:	b2da      	uxtb	r2, r3
 80149d4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80149d8:	4951      	ldr	r1, [pc, #324]	; (8014b20 <gos_traceTraceFormatted+0x23c>)
 80149da:	4620      	mov	r0, r4
 80149dc:	f7fd fe94 	bl	8012708 <gos_queuePut>
 80149e0:	4603      	mov	r3, r0
 80149e2:	461a      	mov	r2, r3
 80149e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80149e8:	4013      	ands	r3, r2
 80149ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 80149ee:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80149f2:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 80149f4:	693a      	ldr	r2, [r7, #16]
 80149f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80149fa:	484b      	ldr	r0, [pc, #300]	; (8014b28 <gos_traceTraceFormatted+0x244>)
 80149fc:	f001 f9a0 	bl	8015d40 <vsiprintf>
        va_end(args);
        traceResult &= gos_queuePut(
 8014a00:	4b48      	ldr	r3, [pc, #288]	; (8014b24 <gos_traceTraceFormatted+0x240>)
 8014a02:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
 8014a04:	4848      	ldr	r0, [pc, #288]	; (8014b28 <gos_traceTraceFormatted+0x244>)
 8014a06:	f7eb fc63 	bl	80002d0 <strlen>
 8014a0a:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 8014a0c:	b2db      	uxtb	r3, r3
 8014a0e:	3301      	adds	r3, #1
 8014a10:	b2da      	uxtb	r2, r3
 8014a12:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8014a16:	4944      	ldr	r1, [pc, #272]	; (8014b28 <gos_traceTraceFormatted+0x244>)
 8014a18:	4620      	mov	r0, r4
 8014a1a:	f7fd fe75 	bl	8012708 <gos_queuePut>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	461a      	mov	r2, r3
 8014a22:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014a26:	4013      	ands	r3, r2
 8014a28:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 8014a2c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8014a30:	2b55      	cmp	r3, #85	; 0x55
 8014a32:	d002      	beq.n	8014a3a <gos_traceTraceFormatted+0x156>
        {
            traceResult = GOS_ERROR;
 8014a34:	23ae      	movs	r3, #174	; 0xae
 8014a36:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 8014a3a:	4b3c      	ldr	r3, [pc, #240]	; (8014b2c <gos_traceTraceFormatted+0x248>)
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d108      	bne.n	8014a54 <gos_traceTraceFormatted+0x170>
 8014a42:	b672      	cpsid	i
 8014a44:	f3ef 8310 	mrs	r3, PRIMASK
 8014a48:	4a39      	ldr	r2, [pc, #228]	; (8014b30 <gos_traceTraceFormatted+0x24c>)
 8014a4a:	6013      	str	r3, [r2, #0]
 8014a4c:	f3bf 8f4f 	dsb	sy
 8014a50:	f3bf 8f6f 	isb	sy
 8014a54:	4b35      	ldr	r3, [pc, #212]	; (8014b2c <gos_traceTraceFormatted+0x248>)
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	3301      	adds	r3, #1
 8014a5a:	b2da      	uxtb	r2, r3
 8014a5c:	4b33      	ldr	r3, [pc, #204]	; (8014b2c <gos_traceTraceFormatted+0x248>)
 8014a5e:	701a      	strb	r2, [r3, #0]
 8014a60:	4b34      	ldr	r3, [pc, #208]	; (8014b34 <gos_traceTraceFormatted+0x250>)
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	3301      	adds	r3, #1
 8014a66:	b2da      	uxtb	r2, r3
 8014a68:	4b32      	ldr	r3, [pc, #200]	; (8014b34 <gos_traceTraceFormatted+0x250>)
 8014a6a:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 8014a6c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8014a70:	f107 020e 	add.w	r2, r7, #14
 8014a74:	4611      	mov	r1, r2
 8014a76:	4618      	mov	r0, r3
 8014a78:	f7fc f994 	bl	8010da4 <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8014a7c:	89fb      	ldrh	r3, [r7, #14]
 8014a7e:	b21b      	sxth	r3, r3
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	db13      	blt.n	8014aac <gos_traceTraceFormatted+0x1c8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8014a84:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8014a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7fc f825 	bl	8010adc <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8014a92:	4b29      	ldr	r3, [pc, #164]	; (8014b38 <gos_traceTraceFormatted+0x254>)
 8014a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7fb fa5a 	bl	800ff50 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 8014a9c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8014aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7fc f891 	bl	8010bcc <gos_taskRemovePrivilege>
 8014aaa:	e004      	b.n	8014ab6 <gos_traceTraceFormatted+0x1d2>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 8014aac:	4b22      	ldr	r3, [pc, #136]	; (8014b38 <gos_traceTraceFormatted+0x254>)
 8014aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7fb fa4d 	bl	800ff50 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 8014ab6:	4b1d      	ldr	r3, [pc, #116]	; (8014b2c <gos_traceTraceFormatted+0x248>)
 8014ab8:	781b      	ldrb	r3, [r3, #0]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d005      	beq.n	8014aca <gos_traceTraceFormatted+0x1e6>
 8014abe:	4b1b      	ldr	r3, [pc, #108]	; (8014b2c <gos_traceTraceFormatted+0x248>)
 8014ac0:	781b      	ldrb	r3, [r3, #0]
 8014ac2:	3b01      	subs	r3, #1
 8014ac4:	b2da      	uxtb	r2, r3
 8014ac6:	4b19      	ldr	r3, [pc, #100]	; (8014b2c <gos_traceTraceFormatted+0x248>)
 8014ac8:	701a      	strb	r2, [r3, #0]
 8014aca:	4b18      	ldr	r3, [pc, #96]	; (8014b2c <gos_traceTraceFormatted+0x248>)
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d108      	bne.n	8014ae4 <gos_traceTraceFormatted+0x200>
 8014ad2:	4b17      	ldr	r3, [pc, #92]	; (8014b30 <gos_traceTraceFormatted+0x24c>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	f383 8810 	msr	PRIMASK, r3
 8014ada:	b662      	cpsie	i
 8014adc:	f3bf 8f4f 	dsb	sy
 8014ae0:	f3bf 8f6f 	isb	sy
 8014ae4:	4b13      	ldr	r3, [pc, #76]	; (8014b34 <gos_traceTraceFormatted+0x250>)
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d005      	beq.n	8014af8 <gos_traceTraceFormatted+0x214>
 8014aec:	4b11      	ldr	r3, [pc, #68]	; (8014b34 <gos_traceTraceFormatted+0x250>)
 8014aee:	781b      	ldrb	r3, [r3, #0]
 8014af0:	3b01      	subs	r3, #1
 8014af2:	b2da      	uxtb	r2, r3
 8014af4:	4b0f      	ldr	r3, [pc, #60]	; (8014b34 <gos_traceTraceFormatted+0x250>)
 8014af6:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 8014af8:	4807      	ldr	r0, [pc, #28]	; (8014b18 <gos_traceTraceFormatted+0x234>)
 8014afa:	f7fd fceb 	bl	80124d4 <gos_mutexUnlock>
 8014afe:	e002      	b.n	8014b06 <gos_traceTraceFormatted+0x222>
    }
    else
    {
        traceResult = GOS_ERROR;
 8014b00:	23ae      	movs	r3, #174	; 0xae
 8014b02:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }

    return traceResult;
 8014b06:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3790      	adds	r7, #144	; 0x90
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014b14:	b003      	add	sp, #12
 8014b16:	4770      	bx	lr
 8014b18:	2000eb58 	.word	0x2000eb58
 8014b1c:	080196c4 	.word	0x080196c4
 8014b20:	2000eb2c 	.word	0x2000eb2c
 8014b24:	20002104 	.word	0x20002104
 8014b28:	2000ea64 	.word	0x2000ea64
 8014b2c:	200050eb 	.word	0x200050eb
 8014b30:	200050ec 	.word	0x200050ec
 8014b34:	200050e9 	.word	0x200050e9
 8014b38:	20002120 	.word	0x20002120

08014b3c <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 8014b3c:	b40f      	push	{r0, r1, r2, r3}
 8014b3e:	b580      	push	{r7, lr}
 8014b40:	b082      	sub	sp, #8
 8014b42:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 8014b44:	23ae      	movs	r3, #174	; 0xae
 8014b46:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 8014b48:	693b      	ldr	r3, [r7, #16]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d01c      	beq.n	8014b88 <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 8014b4e:	4b12      	ldr	r3, [pc, #72]	; (8014b98 <gos_traceTraceFormattedUnsafe+0x5c>)
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	3301      	adds	r3, #1
 8014b54:	b2da      	uxtb	r2, r3
 8014b56:	4b10      	ldr	r3, [pc, #64]	; (8014b98 <gos_traceTraceFormattedUnsafe+0x5c>)
 8014b58:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 8014b5a:	f107 0314 	add.w	r3, r7, #20
 8014b5e:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 8014b60:	683a      	ldr	r2, [r7, #0]
 8014b62:	6939      	ldr	r1, [r7, #16]
 8014b64:	480d      	ldr	r0, [pc, #52]	; (8014b9c <gos_traceTraceFormattedUnsafe+0x60>)
 8014b66:	f001 f8eb 	bl	8015d40 <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 8014b6a:	480c      	ldr	r0, [pc, #48]	; (8014b9c <gos_traceTraceFormattedUnsafe+0x60>)
 8014b6c:	f7f9 fc38 	bl	800e3e0 <gos_traceDriverTransmitString_Unsafe>
 8014b70:	4603      	mov	r3, r0
 8014b72:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 8014b74:	4b08      	ldr	r3, [pc, #32]	; (8014b98 <gos_traceTraceFormattedUnsafe+0x5c>)
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d005      	beq.n	8014b88 <gos_traceTraceFormattedUnsafe+0x4c>
 8014b7c:	4b06      	ldr	r3, [pc, #24]	; (8014b98 <gos_traceTraceFormattedUnsafe+0x5c>)
 8014b7e:	781b      	ldrb	r3, [r3, #0]
 8014b80:	3b01      	subs	r3, #1
 8014b82:	b2da      	uxtb	r2, r3
 8014b84:	4b04      	ldr	r3, [pc, #16]	; (8014b98 <gos_traceTraceFormattedUnsafe+0x5c>)
 8014b86:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 8014b88:	79fb      	ldrb	r3, [r7, #7]
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3708      	adds	r7, #8
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014b94:	b004      	add	sp, #16
 8014b96:	4770      	bx	lr
 8014b98:	200050e9 	.word	0x200050e9
 8014b9c:	2000ea64 	.word	0x2000ea64

08014ba0 <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8014ba4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8014ba8:	480e      	ldr	r0, [pc, #56]	; (8014be4 <gos_traceDaemonTask+0x44>)
 8014baa:	f7fd fb8d 	bl	80122c8 <gos_mutexLock>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	2b55      	cmp	r3, #85	; 0x55
 8014bb2:	d10e      	bne.n	8014bd2 <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 8014bb4:	e002      	b.n	8014bbc <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 8014bb6:	480c      	ldr	r0, [pc, #48]	; (8014be8 <gos_traceDaemonTask+0x48>)
 8014bb8:	f7f9 fbfa 	bl	800e3b0 <gos_traceDriverTransmitString>
            while (gos_queueGet(
 8014bbc:	4b0b      	ldr	r3, [pc, #44]	; (8014bec <gos_traceDaemonTask+0x4c>)
 8014bbe:	8818      	ldrh	r0, [r3, #0]
 8014bc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8014bc4:	22c8      	movs	r2, #200	; 0xc8
 8014bc6:	4908      	ldr	r1, [pc, #32]	; (8014be8 <gos_traceDaemonTask+0x48>)
 8014bc8:	f7fd fe6c 	bl	80128a4 <gos_queueGet>
 8014bcc:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 8014bce:	2b55      	cmp	r3, #85	; 0x55
 8014bd0:	d0f1      	beq.n	8014bb6 <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        (void_t) gos_mutexUnlock(&traceMutex);
 8014bd2:	4804      	ldr	r0, [pc, #16]	; (8014be4 <gos_traceDaemonTask+0x44>)
 8014bd4:	f7fd fc7e 	bl	80124d4 <gos_mutexUnlock>
        (void_t) gos_taskSuspend(traceDaemonTaskDesc.taskId);
 8014bd8:	4b05      	ldr	r3, [pc, #20]	; (8014bf0 <gos_traceDaemonTask+0x50>)
 8014bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fb f895 	bl	800fd0c <gos_taskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 8014be2:	e7df      	b.n	8014ba4 <gos_traceDaemonTask+0x4>
 8014be4:	2000eb58 	.word	0x2000eb58
 8014be8:	2000e99c 	.word	0x2000e99c
 8014bec:	20002104 	.word	0x20002104
 8014bf0:	20002120 	.word	0x20002120

08014bf4 <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 8014bf4:	b480      	push	{r7}
 8014bf6:	b085      	sub	sp, #20
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 8014bfc:	23ae      	movs	r3, #174	; 0xae
 8014bfe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d00b      	beq.n	8014c1e <gos_triggerInit+0x2a>
    {
        pTrigger->valueCounter = 0u;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	605a      	str	r2, [r3, #4]
        pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014c18:	811a      	strh	r2, [r3, #8]
        triggerInitResult      = GOS_SUCCESS;
 8014c1a:	2355      	movs	r3, #85	; 0x55
 8014c1c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 8014c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c20:	4618      	mov	r0, r3
 8014c22:	3714      	adds	r7, #20
 8014c24:	46bd      	mov	sp, r7
 8014c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2a:	4770      	bx	lr

08014c2c <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE gos_result_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 8014c2c:	b480      	push	{r7}
 8014c2e:	b085      	sub	sp, #20
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t resetResult = GOS_ERROR;
 8014c34:	23ae      	movs	r3, #174	; 0xae
 8014c36:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d041      	beq.n	8014cc2 <gos_triggerReset+0x96>
    {
        GOS_ATOMIC_ENTER
 8014c3e:	4b24      	ldr	r3, [pc, #144]	; (8014cd0 <gos_triggerReset+0xa4>)
 8014c40:	781b      	ldrb	r3, [r3, #0]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d108      	bne.n	8014c58 <gos_triggerReset+0x2c>
 8014c46:	b672      	cpsid	i
 8014c48:	f3ef 8310 	mrs	r3, PRIMASK
 8014c4c:	4a21      	ldr	r2, [pc, #132]	; (8014cd4 <gos_triggerReset+0xa8>)
 8014c4e:	6013      	str	r3, [r2, #0]
 8014c50:	f3bf 8f4f 	dsb	sy
 8014c54:	f3bf 8f6f 	isb	sy
 8014c58:	4b1d      	ldr	r3, [pc, #116]	; (8014cd0 <gos_triggerReset+0xa4>)
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	3301      	adds	r3, #1
 8014c5e:	b2da      	uxtb	r2, r3
 8014c60:	4b1b      	ldr	r3, [pc, #108]	; (8014cd0 <gos_triggerReset+0xa4>)
 8014c62:	701a      	strb	r2, [r3, #0]
 8014c64:	4b1c      	ldr	r3, [pc, #112]	; (8014cd8 <gos_triggerReset+0xac>)
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	3301      	adds	r3, #1
 8014c6a:	b2da      	uxtb	r2, r3
 8014c6c:	4b1a      	ldr	r3, [pc, #104]	; (8014cd8 <gos_triggerReset+0xac>)
 8014c6e:	701a      	strb	r2, [r3, #0]

        pTrigger->valueCounter = 0u;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2200      	movs	r2, #0
 8014c74:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	605a      	str	r2, [r3, #4]

        resetResult = GOS_SUCCESS;
 8014c7c:	2355      	movs	r3, #85	; 0x55
 8014c7e:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 8014c80:	4b13      	ldr	r3, [pc, #76]	; (8014cd0 <gos_triggerReset+0xa4>)
 8014c82:	781b      	ldrb	r3, [r3, #0]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d005      	beq.n	8014c94 <gos_triggerReset+0x68>
 8014c88:	4b11      	ldr	r3, [pc, #68]	; (8014cd0 <gos_triggerReset+0xa4>)
 8014c8a:	781b      	ldrb	r3, [r3, #0]
 8014c8c:	3b01      	subs	r3, #1
 8014c8e:	b2da      	uxtb	r2, r3
 8014c90:	4b0f      	ldr	r3, [pc, #60]	; (8014cd0 <gos_triggerReset+0xa4>)
 8014c92:	701a      	strb	r2, [r3, #0]
 8014c94:	4b0e      	ldr	r3, [pc, #56]	; (8014cd0 <gos_triggerReset+0xa4>)
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d108      	bne.n	8014cae <gos_triggerReset+0x82>
 8014c9c:	4b0d      	ldr	r3, [pc, #52]	; (8014cd4 <gos_triggerReset+0xa8>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	f383 8810 	msr	PRIMASK, r3
 8014ca4:	b662      	cpsie	i
 8014ca6:	f3bf 8f4f 	dsb	sy
 8014caa:	f3bf 8f6f 	isb	sy
 8014cae:	4b0a      	ldr	r3, [pc, #40]	; (8014cd8 <gos_triggerReset+0xac>)
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d005      	beq.n	8014cc2 <gos_triggerReset+0x96>
 8014cb6:	4b08      	ldr	r3, [pc, #32]	; (8014cd8 <gos_triggerReset+0xac>)
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	3b01      	subs	r3, #1
 8014cbc:	b2da      	uxtb	r2, r3
 8014cbe:	4b06      	ldr	r3, [pc, #24]	; (8014cd8 <gos_triggerReset+0xac>)
 8014cc0:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return resetResult;
 8014cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	3714      	adds	r7, #20
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cce:	4770      	bx	lr
 8014cd0:	200050eb 	.word	0x200050eb
 8014cd4:	200050ec 	.word	0x200050ec
 8014cd8:	200050e9 	.word	0x200050e9

08014cdc <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 8014cdc:	b580      	push	{r7, lr}
 8014cde:	b086      	sub	sp, #24
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	60f8      	str	r0, [r7, #12]
 8014ce4:	60b9      	str	r1, [r7, #8]
 8014ce6:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 8014ce8:	23ae      	movs	r3, #174	; 0xae
 8014cea:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 8014cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014cf0:	82bb      	strh	r3, [r7, #20]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	f000 8096 	beq.w	8014e26 <gos_triggerWait+0x14a>
    {
        // Set owner task ID.
        GOS_ATOMIC_ENTER
 8014cfa:	4b4d      	ldr	r3, [pc, #308]	; (8014e30 <gos_triggerWait+0x154>)
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d108      	bne.n	8014d14 <gos_triggerWait+0x38>
 8014d02:	b672      	cpsid	i
 8014d04:	f3ef 8310 	mrs	r3, PRIMASK
 8014d08:	4a4a      	ldr	r2, [pc, #296]	; (8014e34 <gos_triggerWait+0x158>)
 8014d0a:	6013      	str	r3, [r2, #0]
 8014d0c:	f3bf 8f4f 	dsb	sy
 8014d10:	f3bf 8f6f 	isb	sy
 8014d14:	4b46      	ldr	r3, [pc, #280]	; (8014e30 <gos_triggerWait+0x154>)
 8014d16:	781b      	ldrb	r3, [r3, #0]
 8014d18:	3301      	adds	r3, #1
 8014d1a:	b2da      	uxtb	r2, r3
 8014d1c:	4b44      	ldr	r3, [pc, #272]	; (8014e30 <gos_triggerWait+0x154>)
 8014d1e:	701a      	strb	r2, [r3, #0]
 8014d20:	4b45      	ldr	r3, [pc, #276]	; (8014e38 <gos_triggerWait+0x15c>)
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	3301      	adds	r3, #1
 8014d26:	b2da      	uxtb	r2, r3
 8014d28:	4b43      	ldr	r3, [pc, #268]	; (8014e38 <gos_triggerWait+0x15c>)
 8014d2a:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentId);
 8014d2c:	f107 0314 	add.w	r3, r7, #20
 8014d30:	4618      	mov	r0, r3
 8014d32:	f7fc f8df 	bl	8010ef4 <gos_taskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 8014d36:	8aba      	ldrh	r2, [r7, #20]
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	68ba      	ldr	r2, [r7, #8]
 8014d40:	605a      	str	r2, [r3, #4]

        GOS_ATOMIC_EXIT
 8014d42:	4b3b      	ldr	r3, [pc, #236]	; (8014e30 <gos_triggerWait+0x154>)
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d005      	beq.n	8014d56 <gos_triggerWait+0x7a>
 8014d4a:	4b39      	ldr	r3, [pc, #228]	; (8014e30 <gos_triggerWait+0x154>)
 8014d4c:	781b      	ldrb	r3, [r3, #0]
 8014d4e:	3b01      	subs	r3, #1
 8014d50:	b2da      	uxtb	r2, r3
 8014d52:	4b37      	ldr	r3, [pc, #220]	; (8014e30 <gos_triggerWait+0x154>)
 8014d54:	701a      	strb	r2, [r3, #0]
 8014d56:	4b36      	ldr	r3, [pc, #216]	; (8014e30 <gos_triggerWait+0x154>)
 8014d58:	781b      	ldrb	r3, [r3, #0]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d108      	bne.n	8014d70 <gos_triggerWait+0x94>
 8014d5e:	4b35      	ldr	r3, [pc, #212]	; (8014e34 <gos_triggerWait+0x158>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	f383 8810 	msr	PRIMASK, r3
 8014d66:	b662      	cpsie	i
 8014d68:	f3bf 8f4f 	dsb	sy
 8014d6c:	f3bf 8f6f 	isb	sy
 8014d70:	4b31      	ldr	r3, [pc, #196]	; (8014e38 <gos_triggerWait+0x15c>)
 8014d72:	781b      	ldrb	r3, [r3, #0]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d005      	beq.n	8014d84 <gos_triggerWait+0xa8>
 8014d78:	4b2f      	ldr	r3, [pc, #188]	; (8014e38 <gos_triggerWait+0x15c>)
 8014d7a:	781b      	ldrb	r3, [r3, #0]
 8014d7c:	3b01      	subs	r3, #1
 8014d7e:	b2da      	uxtb	r2, r3
 8014d80:	4b2d      	ldr	r3, [pc, #180]	; (8014e38 <gos_triggerWait+0x15c>)
 8014d82:	701a      	strb	r2, [r3, #0]

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	685b      	ldr	r3, [r3, #4]
 8014d8c:	429a      	cmp	r2, r3
 8014d8e:	d204      	bcs.n	8014d9a <gos_triggerWait+0xbe>
        {
            (void_t) gos_taskBlock(currentId, timeout);
 8014d90:	8abb      	ldrh	r3, [r7, #20]
 8014d92:	6879      	ldr	r1, [r7, #4]
 8014d94:	4618      	mov	r0, r3
 8014d96:	f7fb f989 	bl	80100ac <gos_taskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        GOS_ATOMIC_ENTER
 8014d9a:	4b25      	ldr	r3, [pc, #148]	; (8014e30 <gos_triggerWait+0x154>)
 8014d9c:	781b      	ldrb	r3, [r3, #0]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d108      	bne.n	8014db4 <gos_triggerWait+0xd8>
 8014da2:	b672      	cpsid	i
 8014da4:	f3ef 8310 	mrs	r3, PRIMASK
 8014da8:	4a22      	ldr	r2, [pc, #136]	; (8014e34 <gos_triggerWait+0x158>)
 8014daa:	6013      	str	r3, [r2, #0]
 8014dac:	f3bf 8f4f 	dsb	sy
 8014db0:	f3bf 8f6f 	isb	sy
 8014db4:	4b1e      	ldr	r3, [pc, #120]	; (8014e30 <gos_triggerWait+0x154>)
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	3301      	adds	r3, #1
 8014dba:	b2da      	uxtb	r2, r3
 8014dbc:	4b1c      	ldr	r3, [pc, #112]	; (8014e30 <gos_triggerWait+0x154>)
 8014dbe:	701a      	strb	r2, [r3, #0]
 8014dc0:	4b1d      	ldr	r3, [pc, #116]	; (8014e38 <gos_triggerWait+0x15c>)
 8014dc2:	781b      	ldrb	r3, [r3, #0]
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	b2da      	uxtb	r2, r3
 8014dc8:	4b1b      	ldr	r3, [pc, #108]	; (8014e38 <gos_triggerWait+0x15c>)
 8014dca:	701a      	strb	r2, [r3, #0]

        if (pTrigger->valueCounter >= pTrigger->desiredValue)
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	681a      	ldr	r2, [r3, #0]
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	685b      	ldr	r3, [r3, #4]
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d305      	bcc.n	8014de4 <gos_triggerWait+0x108>
        {
            triggerWaitResult      = GOS_SUCCESS;
 8014dd8:	2355      	movs	r3, #85	; 0x55
 8014dda:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014de2:	811a      	strh	r2, [r3, #8]
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_EXIT
 8014de4:	4b12      	ldr	r3, [pc, #72]	; (8014e30 <gos_triggerWait+0x154>)
 8014de6:	781b      	ldrb	r3, [r3, #0]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d005      	beq.n	8014df8 <gos_triggerWait+0x11c>
 8014dec:	4b10      	ldr	r3, [pc, #64]	; (8014e30 <gos_triggerWait+0x154>)
 8014dee:	781b      	ldrb	r3, [r3, #0]
 8014df0:	3b01      	subs	r3, #1
 8014df2:	b2da      	uxtb	r2, r3
 8014df4:	4b0e      	ldr	r3, [pc, #56]	; (8014e30 <gos_triggerWait+0x154>)
 8014df6:	701a      	strb	r2, [r3, #0]
 8014df8:	4b0d      	ldr	r3, [pc, #52]	; (8014e30 <gos_triggerWait+0x154>)
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d108      	bne.n	8014e12 <gos_triggerWait+0x136>
 8014e00:	4b0c      	ldr	r3, [pc, #48]	; (8014e34 <gos_triggerWait+0x158>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	f383 8810 	msr	PRIMASK, r3
 8014e08:	b662      	cpsie	i
 8014e0a:	f3bf 8f4f 	dsb	sy
 8014e0e:	f3bf 8f6f 	isb	sy
 8014e12:	4b09      	ldr	r3, [pc, #36]	; (8014e38 <gos_triggerWait+0x15c>)
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d005      	beq.n	8014e26 <gos_triggerWait+0x14a>
 8014e1a:	4b07      	ldr	r3, [pc, #28]	; (8014e38 <gos_triggerWait+0x15c>)
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	3b01      	subs	r3, #1
 8014e20:	b2da      	uxtb	r2, r3
 8014e22:	4b05      	ldr	r3, [pc, #20]	; (8014e38 <gos_triggerWait+0x15c>)
 8014e24:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 8014e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3718      	adds	r7, #24
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}
 8014e30:	200050eb 	.word	0x200050eb
 8014e34:	200050ec 	.word	0x200050ec
 8014e38:	200050e9 	.word	0x200050e9

08014e3c <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE gos_result_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b084      	sub	sp, #16
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
    /*
    * Local variables.
    */
    gos_result_t triggerIncrementResult = GOS_ERROR;
 8014e44:	23ae      	movs	r3, #174	; 0xae
 8014e46:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d073      	beq.n	8014f36 <gos_triggerIncrement+0xfa>
    {
        GOS_ATOMIC_ENTER
 8014e4e:	4b3c      	ldr	r3, [pc, #240]	; (8014f40 <gos_triggerIncrement+0x104>)
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d108      	bne.n	8014e68 <gos_triggerIncrement+0x2c>
 8014e56:	b672      	cpsid	i
 8014e58:	f3ef 8310 	mrs	r3, PRIMASK
 8014e5c:	4a39      	ldr	r2, [pc, #228]	; (8014f44 <gos_triggerIncrement+0x108>)
 8014e5e:	6013      	str	r3, [r2, #0]
 8014e60:	f3bf 8f4f 	dsb	sy
 8014e64:	f3bf 8f6f 	isb	sy
 8014e68:	4b35      	ldr	r3, [pc, #212]	; (8014f40 <gos_triggerIncrement+0x104>)
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	b2da      	uxtb	r2, r3
 8014e70:	4b33      	ldr	r3, [pc, #204]	; (8014f40 <gos_triggerIncrement+0x104>)
 8014e72:	701a      	strb	r2, [r3, #0]
 8014e74:	4b34      	ldr	r3, [pc, #208]	; (8014f48 <gos_triggerIncrement+0x10c>)
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	3301      	adds	r3, #1
 8014e7a:	b2da      	uxtb	r2, r3
 8014e7c:	4b32      	ldr	r3, [pc, #200]	; (8014f48 <gos_triggerIncrement+0x10c>)
 8014e7e:	701a      	strb	r2, [r3, #0]

        // Increment trigger value.
        pTrigger->valueCounter++;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	1c5a      	adds	r2, r3, #1
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	601a      	str	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681a      	ldr	r2, [r3, #0]
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	429a      	cmp	r2, r3
 8014e94:	d12c      	bne.n	8014ef0 <gos_triggerIncrement+0xb4>
        {
            GOS_ISR_ENTER
 8014e96:	4b2d      	ldr	r3, [pc, #180]	; (8014f4c <gos_triggerIncrement+0x110>)
 8014e98:	781b      	ldrb	r3, [r3, #0]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d105      	bne.n	8014eaa <gos_triggerIncrement+0x6e>
 8014e9e:	4b2a      	ldr	r3, [pc, #168]	; (8014f48 <gos_triggerIncrement+0x10c>)
 8014ea0:	781b      	ldrb	r3, [r3, #0]
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	b2da      	uxtb	r2, r3
 8014ea6:	4b28      	ldr	r3, [pc, #160]	; (8014f48 <gos_triggerIncrement+0x10c>)
 8014ea8:	701a      	strb	r2, [r3, #0]
 8014eaa:	4b28      	ldr	r3, [pc, #160]	; (8014f4c <gos_triggerIncrement+0x110>)
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	3301      	adds	r3, #1
 8014eb0:	b2da      	uxtb	r2, r3
 8014eb2:	4b26      	ldr	r3, [pc, #152]	; (8014f4c <gos_triggerIncrement+0x110>)
 8014eb4:	701a      	strb	r2, [r3, #0]

            // Unblock owner task.
            (void_t) gos_taskUnblock(pTrigger->waiterTaskId);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	891b      	ldrh	r3, [r3, #8]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7fb fa08 	bl	80102d0 <gos_taskUnblock>

            GOS_ISR_EXIT
 8014ec0:	4b22      	ldr	r3, [pc, #136]	; (8014f4c <gos_triggerIncrement+0x110>)
 8014ec2:	781b      	ldrb	r3, [r3, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d005      	beq.n	8014ed4 <gos_triggerIncrement+0x98>
 8014ec8:	4b20      	ldr	r3, [pc, #128]	; (8014f4c <gos_triggerIncrement+0x110>)
 8014eca:	781b      	ldrb	r3, [r3, #0]
 8014ecc:	3b01      	subs	r3, #1
 8014ece:	b2da      	uxtb	r2, r3
 8014ed0:	4b1e      	ldr	r3, [pc, #120]	; (8014f4c <gos_triggerIncrement+0x110>)
 8014ed2:	701a      	strb	r2, [r3, #0]
 8014ed4:	4b1d      	ldr	r3, [pc, #116]	; (8014f4c <gos_triggerIncrement+0x110>)
 8014ed6:	781b      	ldrb	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d109      	bne.n	8014ef0 <gos_triggerIncrement+0xb4>
 8014edc:	4b1a      	ldr	r3, [pc, #104]	; (8014f48 <gos_triggerIncrement+0x10c>)
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d005      	beq.n	8014ef0 <gos_triggerIncrement+0xb4>
 8014ee4:	4b18      	ldr	r3, [pc, #96]	; (8014f48 <gos_triggerIncrement+0x10c>)
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	3b01      	subs	r3, #1
 8014eea:	b2da      	uxtb	r2, r3
 8014eec:	4b16      	ldr	r3, [pc, #88]	; (8014f48 <gos_triggerIncrement+0x10c>)
 8014eee:	701a      	strb	r2, [r3, #0]
        else
        {
            // Trigger value not reached yet.
        }

        triggerIncrementResult = GOS_SUCCESS;
 8014ef0:	2355      	movs	r3, #85	; 0x55
 8014ef2:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 8014ef4:	4b12      	ldr	r3, [pc, #72]	; (8014f40 <gos_triggerIncrement+0x104>)
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d005      	beq.n	8014f08 <gos_triggerIncrement+0xcc>
 8014efc:	4b10      	ldr	r3, [pc, #64]	; (8014f40 <gos_triggerIncrement+0x104>)
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	3b01      	subs	r3, #1
 8014f02:	b2da      	uxtb	r2, r3
 8014f04:	4b0e      	ldr	r3, [pc, #56]	; (8014f40 <gos_triggerIncrement+0x104>)
 8014f06:	701a      	strb	r2, [r3, #0]
 8014f08:	4b0d      	ldr	r3, [pc, #52]	; (8014f40 <gos_triggerIncrement+0x104>)
 8014f0a:	781b      	ldrb	r3, [r3, #0]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d108      	bne.n	8014f22 <gos_triggerIncrement+0xe6>
 8014f10:	4b0c      	ldr	r3, [pc, #48]	; (8014f44 <gos_triggerIncrement+0x108>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	f383 8810 	msr	PRIMASK, r3
 8014f18:	b662      	cpsie	i
 8014f1a:	f3bf 8f4f 	dsb	sy
 8014f1e:	f3bf 8f6f 	isb	sy
 8014f22:	4b09      	ldr	r3, [pc, #36]	; (8014f48 <gos_triggerIncrement+0x10c>)
 8014f24:	781b      	ldrb	r3, [r3, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d005      	beq.n	8014f36 <gos_triggerIncrement+0xfa>
 8014f2a:	4b07      	ldr	r3, [pc, #28]	; (8014f48 <gos_triggerIncrement+0x10c>)
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	3b01      	subs	r3, #1
 8014f30:	b2da      	uxtb	r2, r3
 8014f32:	4b05      	ldr	r3, [pc, #20]	; (8014f48 <gos_triggerIncrement+0x10c>)
 8014f34:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerIncrementResult;
 8014f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f38:	4618      	mov	r0, r3
 8014f3a:	3710      	adds	r7, #16
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bd80      	pop	{r7, pc}
 8014f40:	200050eb 	.word	0x200050eb
 8014f44:	200050ec 	.word	0x200050ec
 8014f48:	200050e9 	.word	0x200050e9
 8014f4c:	200050ea 	.word	0x200050ea

08014f50 <gos_crcDriverGetCrc>:

/*
 * Function: gos_crcDriverGetCrc
 */
u32_t gos_crcDriverGetCrc (u8_t* pData, u32_t dataSize)
{
 8014f50:	b480      	push	{r7}
 8014f52:	b087      	sub	sp, #28
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    u32_t   crcValue   = CRC_INITIAL_VALUE;
 8014f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f5e:	617b      	str	r3, [r7, #20]
    u32_t   index      = 0u;
 8014f60:	2300      	movs	r3, #0
 8014f62:	613b      	str	r3, [r7, #16]
    u32_t   mask       = 0u;
 8014f64:	2300      	movs	r3, #0
 8014f66:	60bb      	str	r3, [r7, #8]
    u8_t    bitCounter = 0u;
 8014f68:	2300      	movs	r3, #0
 8014f6a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < dataSize; index++)
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	613b      	str	r3, [r7, #16]
 8014f70:	e01e      	b.n	8014fb0 <gos_crcDriverGetCrc+0x60>
    {
        crcValue ^= pData[index];
 8014f72:	687a      	ldr	r2, [r7, #4]
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	4413      	add	r3, r2
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	4053      	eors	r3, r2
 8014f80:	617b      	str	r3, [r7, #20]

        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 8014f82:	2308      	movs	r3, #8
 8014f84:	73fb      	strb	r3, [r7, #15]
 8014f86:	e00d      	b.n	8014fa4 <gos_crcDriverGetCrc+0x54>
        {
            mask = -(crcValue & 1);
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	f003 0301 	and.w	r3, r3, #1
 8014f8e:	425b      	negs	r3, r3
 8014f90:	60bb      	str	r3, [r7, #8]
            crcValue = (crcValue) ^ (CRC_POLYNOMIAL_VALUE & mask);
 8014f92:	68ba      	ldr	r2, [r7, #8]
 8014f94:	4b0c      	ldr	r3, [pc, #48]	; (8014fc8 <gos_crcDriverGetCrc+0x78>)
 8014f96:	4013      	ands	r3, r2
 8014f98:	697a      	ldr	r2, [r7, #20]
 8014f9a:	4053      	eors	r3, r2
 8014f9c:	617b      	str	r3, [r7, #20]
        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 8014f9e:	7bfb      	ldrb	r3, [r7, #15]
 8014fa0:	3b01      	subs	r3, #1
 8014fa2:	73fb      	strb	r3, [r7, #15]
 8014fa4:	7bfb      	ldrb	r3, [r7, #15]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d1ee      	bne.n	8014f88 <gos_crcDriverGetCrc+0x38>
    for (index = 0u; index < dataSize; index++)
 8014faa:	693b      	ldr	r3, [r7, #16]
 8014fac:	3301      	adds	r3, #1
 8014fae:	613b      	str	r3, [r7, #16]
 8014fb0:	693a      	ldr	r2, [r7, #16]
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d3dc      	bcc.n	8014f72 <gos_crcDriverGetCrc+0x22>
        }
    }

    return ~crcValue;
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	43db      	mvns	r3, r3
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	371c      	adds	r7, #28
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc6:	4770      	bx	lr
 8014fc8:	edb88320 	.word	0xedb88320

08014fcc <gos_shellDriverReceiveChar>:

/*
 * Function: gos_shellDriverReceiveChar
 */
gos_result_t gos_shellDriverReceiveChar (char_t* pChar)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b084      	sub	sp, #16
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t shellDriverReceiveResult = GOS_ERROR;
 8014fd4:	23ae      	movs	r3, #174	; 0xae
 8014fd6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.shellDriverReceiveChar != NULL)
 8014fd8:	4b07      	ldr	r3, [pc, #28]	; (8014ff8 <gos_shellDriverReceiveChar+0x2c>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d005      	beq.n	8014fec <gos_shellDriverReceiveChar+0x20>
    {
        shellDriverReceiveResult = driverFunctions.shellDriverReceiveChar(pChar);
 8014fe0:	4b05      	ldr	r3, [pc, #20]	; (8014ff8 <gos_shellDriverReceiveChar+0x2c>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	4798      	blx	r3
 8014fe8:	4603      	mov	r3, r0
 8014fea:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return shellDriverReceiveResult;
 8014fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3710      	adds	r7, #16
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	bf00      	nop
 8014ff8:	200050cc 	.word	0x200050cc

08014ffc <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 8014ffc:	b40f      	push	{r0, r1, r2, r3}
 8014ffe:	b580      	push	{r7, lr}
 8015000:	b082      	sub	sp, #8
 8015002:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 8015004:	23ae      	movs	r3, #174	; 0xae
 8015006:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 8015008:	f107 0314 	add.w	r3, r7, #20
 801500c:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 801500e:	683a      	ldr	r2, [r7, #0]
 8015010:	6939      	ldr	r1, [r7, #16]
 8015012:	480a      	ldr	r0, [pc, #40]	; (801503c <gos_shellDriverTransmitString+0x40>)
 8015014:	f000 fe94 	bl	8015d40 <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 8015018:	4b09      	ldr	r3, [pc, #36]	; (8015040 <gos_shellDriverTransmitString+0x44>)
 801501a:	685b      	ldr	r3, [r3, #4]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d005      	beq.n	801502c <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 8015020:	4b07      	ldr	r3, [pc, #28]	; (8015040 <gos_shellDriverTransmitString+0x44>)
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	4805      	ldr	r0, [pc, #20]	; (801503c <gos_shellDriverTransmitString+0x40>)
 8015026:	4798      	blx	r3
 8015028:	4603      	mov	r3, r0
 801502a:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellDriverTransmitResult;
 801502c:	79fb      	ldrb	r3, [r7, #7]
}
 801502e:	4618      	mov	r0, r3
 8015030:	3708      	adds	r7, #8
 8015032:	46bd      	mov	sp, r7
 8015034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015038:	b004      	add	sp, #16
 801503a:	4770      	bx	lr
 801503c:	2000eb5c 	.word	0x2000eb5c
 8015040:	200050cc 	.word	0x200050cc

08015044 <gos_sysmonDriverReceive>:

/*
 * Function: gos_sysmonDriverReceive
 */
gos_result_t gos_sysmonDriverReceive (u8_t* pBuffer, u16_t bufferSize)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b084      	sub	sp, #16
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	460b      	mov	r3, r1
 801504e:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverReceiveResult = GOS_ERROR;
 8015050:	23ae      	movs	r3, #174	; 0xae
 8015052:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverReceive != NULL)
 8015054:	4b08      	ldr	r3, [pc, #32]	; (8015078 <gos_sysmonDriverReceive+0x34>)
 8015056:	699b      	ldr	r3, [r3, #24]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d007      	beq.n	801506c <gos_sysmonDriverReceive+0x28>
    {
        sysmonDriverReceiveResult = driverFunctions.sysmonDriverReceive(pBuffer, bufferSize);
 801505c:	4b06      	ldr	r3, [pc, #24]	; (8015078 <gos_sysmonDriverReceive+0x34>)
 801505e:	699b      	ldr	r3, [r3, #24]
 8015060:	887a      	ldrh	r2, [r7, #2]
 8015062:	4611      	mov	r1, r2
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	4798      	blx	r3
 8015068:	4603      	mov	r3, r0
 801506a:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverReceiveResult;
 801506c:	7bfb      	ldrb	r3, [r7, #15]
}
 801506e:	4618      	mov	r0, r3
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}
 8015076:	bf00      	nop
 8015078:	200050cc 	.word	0x200050cc

0801507c <gos_sysmonDriverTransmit>:

/*
 * Function: gos_sysmonDriverTransmit
 */
gos_result_t gos_sysmonDriverTransmit (u8_t* pBuffer, u16_t bufferSize)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	460b      	mov	r3, r1
 8015086:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverTransmitResult = GOS_ERROR;
 8015088:	23ae      	movs	r3, #174	; 0xae
 801508a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverTransmit != NULL)
 801508c:	4b08      	ldr	r3, [pc, #32]	; (80150b0 <gos_sysmonDriverTransmit+0x34>)
 801508e:	695b      	ldr	r3, [r3, #20]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d007      	beq.n	80150a4 <gos_sysmonDriverTransmit+0x28>
    {
        sysmonDriverTransmitResult = driverFunctions.sysmonDriverTransmit(pBuffer, bufferSize);
 8015094:	4b06      	ldr	r3, [pc, #24]	; (80150b0 <gos_sysmonDriverTransmit+0x34>)
 8015096:	695b      	ldr	r3, [r3, #20]
 8015098:	887a      	ldrh	r2, [r7, #2]
 801509a:	4611      	mov	r1, r2
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	4798      	blx	r3
 80150a0:	4603      	mov	r3, r0
 80150a2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverTransmitResult;
 80150a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80150a6:	4618      	mov	r0, r3
 80150a8:	3710      	adds	r7, #16
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}
 80150ae:	bf00      	nop
 80150b0:	200050cc 	.word	0x200050cc

080150b4 <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b084      	sub	sp, #16
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 80150bc:	23ae      	movs	r3, #174	; 0xae
 80150be:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 80150c0:	4b07      	ldr	r3, [pc, #28]	; (80150e0 <gos_timerDriverSysTimerGet+0x2c>)
 80150c2:	691b      	ldr	r3, [r3, #16]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d005      	beq.n	80150d4 <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 80150c8:	4b05      	ldr	r3, [pc, #20]	; (80150e0 <gos_timerDriverSysTimerGet+0x2c>)
 80150ca:	691b      	ldr	r3, [r3, #16]
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	4798      	blx	r3
 80150d0:	4603      	mov	r3, r0
 80150d2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timerDriverSysTimerGetResult;
 80150d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	3710      	adds	r7, #16
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}
 80150de:	bf00      	nop
 80150e0:	200050cc 	.word	0x200050cc

080150e4 <_strtol_l.constprop.0>:
 80150e4:	2b01      	cmp	r3, #1
 80150e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150ea:	d001      	beq.n	80150f0 <_strtol_l.constprop.0+0xc>
 80150ec:	2b24      	cmp	r3, #36	; 0x24
 80150ee:	d906      	bls.n	80150fe <_strtol_l.constprop.0+0x1a>
 80150f0:	f000 fe82 	bl	8015df8 <__errno>
 80150f4:	2316      	movs	r3, #22
 80150f6:	6003      	str	r3, [r0, #0]
 80150f8:	2000      	movs	r0, #0
 80150fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80151e4 <_strtol_l.constprop.0+0x100>
 8015102:	460d      	mov	r5, r1
 8015104:	462e      	mov	r6, r5
 8015106:	f815 4b01 	ldrb.w	r4, [r5], #1
 801510a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801510e:	f017 0708 	ands.w	r7, r7, #8
 8015112:	d1f7      	bne.n	8015104 <_strtol_l.constprop.0+0x20>
 8015114:	2c2d      	cmp	r4, #45	; 0x2d
 8015116:	d132      	bne.n	801517e <_strtol_l.constprop.0+0x9a>
 8015118:	782c      	ldrb	r4, [r5, #0]
 801511a:	2701      	movs	r7, #1
 801511c:	1cb5      	adds	r5, r6, #2
 801511e:	2b00      	cmp	r3, #0
 8015120:	d05b      	beq.n	80151da <_strtol_l.constprop.0+0xf6>
 8015122:	2b10      	cmp	r3, #16
 8015124:	d109      	bne.n	801513a <_strtol_l.constprop.0+0x56>
 8015126:	2c30      	cmp	r4, #48	; 0x30
 8015128:	d107      	bne.n	801513a <_strtol_l.constprop.0+0x56>
 801512a:	782c      	ldrb	r4, [r5, #0]
 801512c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015130:	2c58      	cmp	r4, #88	; 0x58
 8015132:	d14d      	bne.n	80151d0 <_strtol_l.constprop.0+0xec>
 8015134:	786c      	ldrb	r4, [r5, #1]
 8015136:	2310      	movs	r3, #16
 8015138:	3502      	adds	r5, #2
 801513a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801513e:	f108 38ff 	add.w	r8, r8, #4294967295
 8015142:	f04f 0e00 	mov.w	lr, #0
 8015146:	fbb8 f9f3 	udiv	r9, r8, r3
 801514a:	4676      	mov	r6, lr
 801514c:	fb03 8a19 	mls	sl, r3, r9, r8
 8015150:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015154:	f1bc 0f09 	cmp.w	ip, #9
 8015158:	d816      	bhi.n	8015188 <_strtol_l.constprop.0+0xa4>
 801515a:	4664      	mov	r4, ip
 801515c:	42a3      	cmp	r3, r4
 801515e:	dd24      	ble.n	80151aa <_strtol_l.constprop.0+0xc6>
 8015160:	f1be 3fff 	cmp.w	lr, #4294967295
 8015164:	d008      	beq.n	8015178 <_strtol_l.constprop.0+0x94>
 8015166:	45b1      	cmp	r9, r6
 8015168:	d31c      	bcc.n	80151a4 <_strtol_l.constprop.0+0xc0>
 801516a:	d101      	bne.n	8015170 <_strtol_l.constprop.0+0x8c>
 801516c:	45a2      	cmp	sl, r4
 801516e:	db19      	blt.n	80151a4 <_strtol_l.constprop.0+0xc0>
 8015170:	fb06 4603 	mla	r6, r6, r3, r4
 8015174:	f04f 0e01 	mov.w	lr, #1
 8015178:	f815 4b01 	ldrb.w	r4, [r5], #1
 801517c:	e7e8      	b.n	8015150 <_strtol_l.constprop.0+0x6c>
 801517e:	2c2b      	cmp	r4, #43	; 0x2b
 8015180:	bf04      	itt	eq
 8015182:	782c      	ldrbeq	r4, [r5, #0]
 8015184:	1cb5      	addeq	r5, r6, #2
 8015186:	e7ca      	b.n	801511e <_strtol_l.constprop.0+0x3a>
 8015188:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801518c:	f1bc 0f19 	cmp.w	ip, #25
 8015190:	d801      	bhi.n	8015196 <_strtol_l.constprop.0+0xb2>
 8015192:	3c37      	subs	r4, #55	; 0x37
 8015194:	e7e2      	b.n	801515c <_strtol_l.constprop.0+0x78>
 8015196:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801519a:	f1bc 0f19 	cmp.w	ip, #25
 801519e:	d804      	bhi.n	80151aa <_strtol_l.constprop.0+0xc6>
 80151a0:	3c57      	subs	r4, #87	; 0x57
 80151a2:	e7db      	b.n	801515c <_strtol_l.constprop.0+0x78>
 80151a4:	f04f 3eff 	mov.w	lr, #4294967295
 80151a8:	e7e6      	b.n	8015178 <_strtol_l.constprop.0+0x94>
 80151aa:	f1be 3fff 	cmp.w	lr, #4294967295
 80151ae:	d105      	bne.n	80151bc <_strtol_l.constprop.0+0xd8>
 80151b0:	2322      	movs	r3, #34	; 0x22
 80151b2:	6003      	str	r3, [r0, #0]
 80151b4:	4646      	mov	r6, r8
 80151b6:	b942      	cbnz	r2, 80151ca <_strtol_l.constprop.0+0xe6>
 80151b8:	4630      	mov	r0, r6
 80151ba:	e79e      	b.n	80150fa <_strtol_l.constprop.0+0x16>
 80151bc:	b107      	cbz	r7, 80151c0 <_strtol_l.constprop.0+0xdc>
 80151be:	4276      	negs	r6, r6
 80151c0:	2a00      	cmp	r2, #0
 80151c2:	d0f9      	beq.n	80151b8 <_strtol_l.constprop.0+0xd4>
 80151c4:	f1be 0f00 	cmp.w	lr, #0
 80151c8:	d000      	beq.n	80151cc <_strtol_l.constprop.0+0xe8>
 80151ca:	1e69      	subs	r1, r5, #1
 80151cc:	6011      	str	r1, [r2, #0]
 80151ce:	e7f3      	b.n	80151b8 <_strtol_l.constprop.0+0xd4>
 80151d0:	2430      	movs	r4, #48	; 0x30
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d1b1      	bne.n	801513a <_strtol_l.constprop.0+0x56>
 80151d6:	2308      	movs	r3, #8
 80151d8:	e7af      	b.n	801513a <_strtol_l.constprop.0+0x56>
 80151da:	2c30      	cmp	r4, #48	; 0x30
 80151dc:	d0a5      	beq.n	801512a <_strtol_l.constprop.0+0x46>
 80151de:	230a      	movs	r3, #10
 80151e0:	e7ab      	b.n	801513a <_strtol_l.constprop.0+0x56>
 80151e2:	bf00      	nop
 80151e4:	08019d65 	.word	0x08019d65

080151e8 <strtol>:
 80151e8:	4613      	mov	r3, r2
 80151ea:	460a      	mov	r2, r1
 80151ec:	4601      	mov	r1, r0
 80151ee:	4802      	ldr	r0, [pc, #8]	; (80151f8 <strtol+0x10>)
 80151f0:	6800      	ldr	r0, [r0, #0]
 80151f2:	f7ff bf77 	b.w	80150e4 <_strtol_l.constprop.0>
 80151f6:	bf00      	nop
 80151f8:	200021e4 	.word	0x200021e4

080151fc <__cvt>:
 80151fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015200:	ec55 4b10 	vmov	r4, r5, d0
 8015204:	2d00      	cmp	r5, #0
 8015206:	460e      	mov	r6, r1
 8015208:	4619      	mov	r1, r3
 801520a:	462b      	mov	r3, r5
 801520c:	bfbb      	ittet	lt
 801520e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015212:	461d      	movlt	r5, r3
 8015214:	2300      	movge	r3, #0
 8015216:	232d      	movlt	r3, #45	; 0x2d
 8015218:	700b      	strb	r3, [r1, #0]
 801521a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801521c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015220:	4691      	mov	r9, r2
 8015222:	f023 0820 	bic.w	r8, r3, #32
 8015226:	bfbc      	itt	lt
 8015228:	4622      	movlt	r2, r4
 801522a:	4614      	movlt	r4, r2
 801522c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015230:	d005      	beq.n	801523e <__cvt+0x42>
 8015232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015236:	d100      	bne.n	801523a <__cvt+0x3e>
 8015238:	3601      	adds	r6, #1
 801523a:	2102      	movs	r1, #2
 801523c:	e000      	b.n	8015240 <__cvt+0x44>
 801523e:	2103      	movs	r1, #3
 8015240:	ab03      	add	r3, sp, #12
 8015242:	9301      	str	r3, [sp, #4]
 8015244:	ab02      	add	r3, sp, #8
 8015246:	9300      	str	r3, [sp, #0]
 8015248:	ec45 4b10 	vmov	d0, r4, r5
 801524c:	4653      	mov	r3, sl
 801524e:	4632      	mov	r2, r6
 8015250:	f000 fe9e 	bl	8015f90 <_dtoa_r>
 8015254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015258:	4607      	mov	r7, r0
 801525a:	d102      	bne.n	8015262 <__cvt+0x66>
 801525c:	f019 0f01 	tst.w	r9, #1
 8015260:	d022      	beq.n	80152a8 <__cvt+0xac>
 8015262:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015266:	eb07 0906 	add.w	r9, r7, r6
 801526a:	d110      	bne.n	801528e <__cvt+0x92>
 801526c:	783b      	ldrb	r3, [r7, #0]
 801526e:	2b30      	cmp	r3, #48	; 0x30
 8015270:	d10a      	bne.n	8015288 <__cvt+0x8c>
 8015272:	2200      	movs	r2, #0
 8015274:	2300      	movs	r3, #0
 8015276:	4620      	mov	r0, r4
 8015278:	4629      	mov	r1, r5
 801527a:	f7eb fc55 	bl	8000b28 <__aeabi_dcmpeq>
 801527e:	b918      	cbnz	r0, 8015288 <__cvt+0x8c>
 8015280:	f1c6 0601 	rsb	r6, r6, #1
 8015284:	f8ca 6000 	str.w	r6, [sl]
 8015288:	f8da 3000 	ldr.w	r3, [sl]
 801528c:	4499      	add	r9, r3
 801528e:	2200      	movs	r2, #0
 8015290:	2300      	movs	r3, #0
 8015292:	4620      	mov	r0, r4
 8015294:	4629      	mov	r1, r5
 8015296:	f7eb fc47 	bl	8000b28 <__aeabi_dcmpeq>
 801529a:	b108      	cbz	r0, 80152a0 <__cvt+0xa4>
 801529c:	f8cd 900c 	str.w	r9, [sp, #12]
 80152a0:	2230      	movs	r2, #48	; 0x30
 80152a2:	9b03      	ldr	r3, [sp, #12]
 80152a4:	454b      	cmp	r3, r9
 80152a6:	d307      	bcc.n	80152b8 <__cvt+0xbc>
 80152a8:	9b03      	ldr	r3, [sp, #12]
 80152aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152ac:	1bdb      	subs	r3, r3, r7
 80152ae:	4638      	mov	r0, r7
 80152b0:	6013      	str	r3, [r2, #0]
 80152b2:	b004      	add	sp, #16
 80152b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152b8:	1c59      	adds	r1, r3, #1
 80152ba:	9103      	str	r1, [sp, #12]
 80152bc:	701a      	strb	r2, [r3, #0]
 80152be:	e7f0      	b.n	80152a2 <__cvt+0xa6>

080152c0 <__exponent>:
 80152c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80152c2:	4603      	mov	r3, r0
 80152c4:	2900      	cmp	r1, #0
 80152c6:	bfb8      	it	lt
 80152c8:	4249      	neglt	r1, r1
 80152ca:	f803 2b02 	strb.w	r2, [r3], #2
 80152ce:	bfb4      	ite	lt
 80152d0:	222d      	movlt	r2, #45	; 0x2d
 80152d2:	222b      	movge	r2, #43	; 0x2b
 80152d4:	2909      	cmp	r1, #9
 80152d6:	7042      	strb	r2, [r0, #1]
 80152d8:	dd2a      	ble.n	8015330 <__exponent+0x70>
 80152da:	f10d 0207 	add.w	r2, sp, #7
 80152de:	4617      	mov	r7, r2
 80152e0:	260a      	movs	r6, #10
 80152e2:	4694      	mov	ip, r2
 80152e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80152e8:	fb06 1415 	mls	r4, r6, r5, r1
 80152ec:	3430      	adds	r4, #48	; 0x30
 80152ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80152f2:	460c      	mov	r4, r1
 80152f4:	2c63      	cmp	r4, #99	; 0x63
 80152f6:	f102 32ff 	add.w	r2, r2, #4294967295
 80152fa:	4629      	mov	r1, r5
 80152fc:	dcf1      	bgt.n	80152e2 <__exponent+0x22>
 80152fe:	3130      	adds	r1, #48	; 0x30
 8015300:	f1ac 0402 	sub.w	r4, ip, #2
 8015304:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015308:	1c41      	adds	r1, r0, #1
 801530a:	4622      	mov	r2, r4
 801530c:	42ba      	cmp	r2, r7
 801530e:	d30a      	bcc.n	8015326 <__exponent+0x66>
 8015310:	f10d 0209 	add.w	r2, sp, #9
 8015314:	eba2 020c 	sub.w	r2, r2, ip
 8015318:	42bc      	cmp	r4, r7
 801531a:	bf88      	it	hi
 801531c:	2200      	movhi	r2, #0
 801531e:	4413      	add	r3, r2
 8015320:	1a18      	subs	r0, r3, r0
 8015322:	b003      	add	sp, #12
 8015324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015326:	f812 5b01 	ldrb.w	r5, [r2], #1
 801532a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801532e:	e7ed      	b.n	801530c <__exponent+0x4c>
 8015330:	2330      	movs	r3, #48	; 0x30
 8015332:	3130      	adds	r1, #48	; 0x30
 8015334:	7083      	strb	r3, [r0, #2]
 8015336:	70c1      	strb	r1, [r0, #3]
 8015338:	1d03      	adds	r3, r0, #4
 801533a:	e7f1      	b.n	8015320 <__exponent+0x60>

0801533c <_printf_float>:
 801533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015340:	ed2d 8b02 	vpush	{d8}
 8015344:	b08d      	sub	sp, #52	; 0x34
 8015346:	460c      	mov	r4, r1
 8015348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801534c:	4616      	mov	r6, r2
 801534e:	461f      	mov	r7, r3
 8015350:	4605      	mov	r5, r0
 8015352:	f000 fd07 	bl	8015d64 <_localeconv_r>
 8015356:	f8d0 a000 	ldr.w	sl, [r0]
 801535a:	4650      	mov	r0, sl
 801535c:	f7ea ffb8 	bl	80002d0 <strlen>
 8015360:	2300      	movs	r3, #0
 8015362:	930a      	str	r3, [sp, #40]	; 0x28
 8015364:	6823      	ldr	r3, [r4, #0]
 8015366:	9305      	str	r3, [sp, #20]
 8015368:	f8d8 3000 	ldr.w	r3, [r8]
 801536c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015370:	3307      	adds	r3, #7
 8015372:	f023 0307 	bic.w	r3, r3, #7
 8015376:	f103 0208 	add.w	r2, r3, #8
 801537a:	f8c8 2000 	str.w	r2, [r8]
 801537e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015386:	9307      	str	r3, [sp, #28]
 8015388:	f8cd 8018 	str.w	r8, [sp, #24]
 801538c:	ee08 0a10 	vmov	s16, r0
 8015390:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8015394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015398:	4b9e      	ldr	r3, [pc, #632]	; (8015614 <_printf_float+0x2d8>)
 801539a:	f04f 32ff 	mov.w	r2, #4294967295
 801539e:	f7eb fbf5 	bl	8000b8c <__aeabi_dcmpun>
 80153a2:	bb88      	cbnz	r0, 8015408 <_printf_float+0xcc>
 80153a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80153a8:	4b9a      	ldr	r3, [pc, #616]	; (8015614 <_printf_float+0x2d8>)
 80153aa:	f04f 32ff 	mov.w	r2, #4294967295
 80153ae:	f7eb fbcf 	bl	8000b50 <__aeabi_dcmple>
 80153b2:	bb48      	cbnz	r0, 8015408 <_printf_float+0xcc>
 80153b4:	2200      	movs	r2, #0
 80153b6:	2300      	movs	r3, #0
 80153b8:	4640      	mov	r0, r8
 80153ba:	4649      	mov	r1, r9
 80153bc:	f7eb fbbe 	bl	8000b3c <__aeabi_dcmplt>
 80153c0:	b110      	cbz	r0, 80153c8 <_printf_float+0x8c>
 80153c2:	232d      	movs	r3, #45	; 0x2d
 80153c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153c8:	4a93      	ldr	r2, [pc, #588]	; (8015618 <_printf_float+0x2dc>)
 80153ca:	4b94      	ldr	r3, [pc, #592]	; (801561c <_printf_float+0x2e0>)
 80153cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80153d0:	bf94      	ite	ls
 80153d2:	4690      	movls	r8, r2
 80153d4:	4698      	movhi	r8, r3
 80153d6:	2303      	movs	r3, #3
 80153d8:	6123      	str	r3, [r4, #16]
 80153da:	9b05      	ldr	r3, [sp, #20]
 80153dc:	f023 0304 	bic.w	r3, r3, #4
 80153e0:	6023      	str	r3, [r4, #0]
 80153e2:	f04f 0900 	mov.w	r9, #0
 80153e6:	9700      	str	r7, [sp, #0]
 80153e8:	4633      	mov	r3, r6
 80153ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80153ec:	4621      	mov	r1, r4
 80153ee:	4628      	mov	r0, r5
 80153f0:	f000 f9da 	bl	80157a8 <_printf_common>
 80153f4:	3001      	adds	r0, #1
 80153f6:	f040 8090 	bne.w	801551a <_printf_float+0x1de>
 80153fa:	f04f 30ff 	mov.w	r0, #4294967295
 80153fe:	b00d      	add	sp, #52	; 0x34
 8015400:	ecbd 8b02 	vpop	{d8}
 8015404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015408:	4642      	mov	r2, r8
 801540a:	464b      	mov	r3, r9
 801540c:	4640      	mov	r0, r8
 801540e:	4649      	mov	r1, r9
 8015410:	f7eb fbbc 	bl	8000b8c <__aeabi_dcmpun>
 8015414:	b140      	cbz	r0, 8015428 <_printf_float+0xec>
 8015416:	464b      	mov	r3, r9
 8015418:	2b00      	cmp	r3, #0
 801541a:	bfbc      	itt	lt
 801541c:	232d      	movlt	r3, #45	; 0x2d
 801541e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015422:	4a7f      	ldr	r2, [pc, #508]	; (8015620 <_printf_float+0x2e4>)
 8015424:	4b7f      	ldr	r3, [pc, #508]	; (8015624 <_printf_float+0x2e8>)
 8015426:	e7d1      	b.n	80153cc <_printf_float+0x90>
 8015428:	6863      	ldr	r3, [r4, #4]
 801542a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801542e:	9206      	str	r2, [sp, #24]
 8015430:	1c5a      	adds	r2, r3, #1
 8015432:	d13f      	bne.n	80154b4 <_printf_float+0x178>
 8015434:	2306      	movs	r3, #6
 8015436:	6063      	str	r3, [r4, #4]
 8015438:	9b05      	ldr	r3, [sp, #20]
 801543a:	6861      	ldr	r1, [r4, #4]
 801543c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015440:	2300      	movs	r3, #0
 8015442:	9303      	str	r3, [sp, #12]
 8015444:	ab0a      	add	r3, sp, #40	; 0x28
 8015446:	e9cd b301 	strd	fp, r3, [sp, #4]
 801544a:	ab09      	add	r3, sp, #36	; 0x24
 801544c:	ec49 8b10 	vmov	d0, r8, r9
 8015450:	9300      	str	r3, [sp, #0]
 8015452:	6022      	str	r2, [r4, #0]
 8015454:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015458:	4628      	mov	r0, r5
 801545a:	f7ff fecf 	bl	80151fc <__cvt>
 801545e:	9b06      	ldr	r3, [sp, #24]
 8015460:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015462:	2b47      	cmp	r3, #71	; 0x47
 8015464:	4680      	mov	r8, r0
 8015466:	d108      	bne.n	801547a <_printf_float+0x13e>
 8015468:	1cc8      	adds	r0, r1, #3
 801546a:	db02      	blt.n	8015472 <_printf_float+0x136>
 801546c:	6863      	ldr	r3, [r4, #4]
 801546e:	4299      	cmp	r1, r3
 8015470:	dd41      	ble.n	80154f6 <_printf_float+0x1ba>
 8015472:	f1ab 0302 	sub.w	r3, fp, #2
 8015476:	fa5f fb83 	uxtb.w	fp, r3
 801547a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801547e:	d820      	bhi.n	80154c2 <_printf_float+0x186>
 8015480:	3901      	subs	r1, #1
 8015482:	465a      	mov	r2, fp
 8015484:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015488:	9109      	str	r1, [sp, #36]	; 0x24
 801548a:	f7ff ff19 	bl	80152c0 <__exponent>
 801548e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015490:	1813      	adds	r3, r2, r0
 8015492:	2a01      	cmp	r2, #1
 8015494:	4681      	mov	r9, r0
 8015496:	6123      	str	r3, [r4, #16]
 8015498:	dc02      	bgt.n	80154a0 <_printf_float+0x164>
 801549a:	6822      	ldr	r2, [r4, #0]
 801549c:	07d2      	lsls	r2, r2, #31
 801549e:	d501      	bpl.n	80154a4 <_printf_float+0x168>
 80154a0:	3301      	adds	r3, #1
 80154a2:	6123      	str	r3, [r4, #16]
 80154a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d09c      	beq.n	80153e6 <_printf_float+0xaa>
 80154ac:	232d      	movs	r3, #45	; 0x2d
 80154ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80154b2:	e798      	b.n	80153e6 <_printf_float+0xaa>
 80154b4:	9a06      	ldr	r2, [sp, #24]
 80154b6:	2a47      	cmp	r2, #71	; 0x47
 80154b8:	d1be      	bne.n	8015438 <_printf_float+0xfc>
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d1bc      	bne.n	8015438 <_printf_float+0xfc>
 80154be:	2301      	movs	r3, #1
 80154c0:	e7b9      	b.n	8015436 <_printf_float+0xfa>
 80154c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80154c6:	d118      	bne.n	80154fa <_printf_float+0x1be>
 80154c8:	2900      	cmp	r1, #0
 80154ca:	6863      	ldr	r3, [r4, #4]
 80154cc:	dd0b      	ble.n	80154e6 <_printf_float+0x1aa>
 80154ce:	6121      	str	r1, [r4, #16]
 80154d0:	b913      	cbnz	r3, 80154d8 <_printf_float+0x19c>
 80154d2:	6822      	ldr	r2, [r4, #0]
 80154d4:	07d0      	lsls	r0, r2, #31
 80154d6:	d502      	bpl.n	80154de <_printf_float+0x1a2>
 80154d8:	3301      	adds	r3, #1
 80154da:	440b      	add	r3, r1
 80154dc:	6123      	str	r3, [r4, #16]
 80154de:	65a1      	str	r1, [r4, #88]	; 0x58
 80154e0:	f04f 0900 	mov.w	r9, #0
 80154e4:	e7de      	b.n	80154a4 <_printf_float+0x168>
 80154e6:	b913      	cbnz	r3, 80154ee <_printf_float+0x1b2>
 80154e8:	6822      	ldr	r2, [r4, #0]
 80154ea:	07d2      	lsls	r2, r2, #31
 80154ec:	d501      	bpl.n	80154f2 <_printf_float+0x1b6>
 80154ee:	3302      	adds	r3, #2
 80154f0:	e7f4      	b.n	80154dc <_printf_float+0x1a0>
 80154f2:	2301      	movs	r3, #1
 80154f4:	e7f2      	b.n	80154dc <_printf_float+0x1a0>
 80154f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80154fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154fc:	4299      	cmp	r1, r3
 80154fe:	db05      	blt.n	801550c <_printf_float+0x1d0>
 8015500:	6823      	ldr	r3, [r4, #0]
 8015502:	6121      	str	r1, [r4, #16]
 8015504:	07d8      	lsls	r0, r3, #31
 8015506:	d5ea      	bpl.n	80154de <_printf_float+0x1a2>
 8015508:	1c4b      	adds	r3, r1, #1
 801550a:	e7e7      	b.n	80154dc <_printf_float+0x1a0>
 801550c:	2900      	cmp	r1, #0
 801550e:	bfd4      	ite	le
 8015510:	f1c1 0202 	rsble	r2, r1, #2
 8015514:	2201      	movgt	r2, #1
 8015516:	4413      	add	r3, r2
 8015518:	e7e0      	b.n	80154dc <_printf_float+0x1a0>
 801551a:	6823      	ldr	r3, [r4, #0]
 801551c:	055a      	lsls	r2, r3, #21
 801551e:	d407      	bmi.n	8015530 <_printf_float+0x1f4>
 8015520:	6923      	ldr	r3, [r4, #16]
 8015522:	4642      	mov	r2, r8
 8015524:	4631      	mov	r1, r6
 8015526:	4628      	mov	r0, r5
 8015528:	47b8      	blx	r7
 801552a:	3001      	adds	r0, #1
 801552c:	d12c      	bne.n	8015588 <_printf_float+0x24c>
 801552e:	e764      	b.n	80153fa <_printf_float+0xbe>
 8015530:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015534:	f240 80e0 	bls.w	80156f8 <_printf_float+0x3bc>
 8015538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801553c:	2200      	movs	r2, #0
 801553e:	2300      	movs	r3, #0
 8015540:	f7eb faf2 	bl	8000b28 <__aeabi_dcmpeq>
 8015544:	2800      	cmp	r0, #0
 8015546:	d034      	beq.n	80155b2 <_printf_float+0x276>
 8015548:	4a37      	ldr	r2, [pc, #220]	; (8015628 <_printf_float+0x2ec>)
 801554a:	2301      	movs	r3, #1
 801554c:	4631      	mov	r1, r6
 801554e:	4628      	mov	r0, r5
 8015550:	47b8      	blx	r7
 8015552:	3001      	adds	r0, #1
 8015554:	f43f af51 	beq.w	80153fa <_printf_float+0xbe>
 8015558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801555c:	429a      	cmp	r2, r3
 801555e:	db02      	blt.n	8015566 <_printf_float+0x22a>
 8015560:	6823      	ldr	r3, [r4, #0]
 8015562:	07d8      	lsls	r0, r3, #31
 8015564:	d510      	bpl.n	8015588 <_printf_float+0x24c>
 8015566:	ee18 3a10 	vmov	r3, s16
 801556a:	4652      	mov	r2, sl
 801556c:	4631      	mov	r1, r6
 801556e:	4628      	mov	r0, r5
 8015570:	47b8      	blx	r7
 8015572:	3001      	adds	r0, #1
 8015574:	f43f af41 	beq.w	80153fa <_printf_float+0xbe>
 8015578:	f04f 0800 	mov.w	r8, #0
 801557c:	f104 091a 	add.w	r9, r4, #26
 8015580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015582:	3b01      	subs	r3, #1
 8015584:	4543      	cmp	r3, r8
 8015586:	dc09      	bgt.n	801559c <_printf_float+0x260>
 8015588:	6823      	ldr	r3, [r4, #0]
 801558a:	079b      	lsls	r3, r3, #30
 801558c:	f100 8107 	bmi.w	801579e <_printf_float+0x462>
 8015590:	68e0      	ldr	r0, [r4, #12]
 8015592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015594:	4298      	cmp	r0, r3
 8015596:	bfb8      	it	lt
 8015598:	4618      	movlt	r0, r3
 801559a:	e730      	b.n	80153fe <_printf_float+0xc2>
 801559c:	2301      	movs	r3, #1
 801559e:	464a      	mov	r2, r9
 80155a0:	4631      	mov	r1, r6
 80155a2:	4628      	mov	r0, r5
 80155a4:	47b8      	blx	r7
 80155a6:	3001      	adds	r0, #1
 80155a8:	f43f af27 	beq.w	80153fa <_printf_float+0xbe>
 80155ac:	f108 0801 	add.w	r8, r8, #1
 80155b0:	e7e6      	b.n	8015580 <_printf_float+0x244>
 80155b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	dc39      	bgt.n	801562c <_printf_float+0x2f0>
 80155b8:	4a1b      	ldr	r2, [pc, #108]	; (8015628 <_printf_float+0x2ec>)
 80155ba:	2301      	movs	r3, #1
 80155bc:	4631      	mov	r1, r6
 80155be:	4628      	mov	r0, r5
 80155c0:	47b8      	blx	r7
 80155c2:	3001      	adds	r0, #1
 80155c4:	f43f af19 	beq.w	80153fa <_printf_float+0xbe>
 80155c8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80155cc:	4313      	orrs	r3, r2
 80155ce:	d102      	bne.n	80155d6 <_printf_float+0x29a>
 80155d0:	6823      	ldr	r3, [r4, #0]
 80155d2:	07d9      	lsls	r1, r3, #31
 80155d4:	d5d8      	bpl.n	8015588 <_printf_float+0x24c>
 80155d6:	ee18 3a10 	vmov	r3, s16
 80155da:	4652      	mov	r2, sl
 80155dc:	4631      	mov	r1, r6
 80155de:	4628      	mov	r0, r5
 80155e0:	47b8      	blx	r7
 80155e2:	3001      	adds	r0, #1
 80155e4:	f43f af09 	beq.w	80153fa <_printf_float+0xbe>
 80155e8:	f04f 0900 	mov.w	r9, #0
 80155ec:	f104 0a1a 	add.w	sl, r4, #26
 80155f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155f2:	425b      	negs	r3, r3
 80155f4:	454b      	cmp	r3, r9
 80155f6:	dc01      	bgt.n	80155fc <_printf_float+0x2c0>
 80155f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155fa:	e792      	b.n	8015522 <_printf_float+0x1e6>
 80155fc:	2301      	movs	r3, #1
 80155fe:	4652      	mov	r2, sl
 8015600:	4631      	mov	r1, r6
 8015602:	4628      	mov	r0, r5
 8015604:	47b8      	blx	r7
 8015606:	3001      	adds	r0, #1
 8015608:	f43f aef7 	beq.w	80153fa <_printf_float+0xbe>
 801560c:	f109 0901 	add.w	r9, r9, #1
 8015610:	e7ee      	b.n	80155f0 <_printf_float+0x2b4>
 8015612:	bf00      	nop
 8015614:	7fefffff 	.word	0x7fefffff
 8015618:	08019e65 	.word	0x08019e65
 801561c:	08019e69 	.word	0x08019e69
 8015620:	08019e6d 	.word	0x08019e6d
 8015624:	08019e71 	.word	0x08019e71
 8015628:	08019e75 	.word	0x08019e75
 801562c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801562e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015630:	429a      	cmp	r2, r3
 8015632:	bfa8      	it	ge
 8015634:	461a      	movge	r2, r3
 8015636:	2a00      	cmp	r2, #0
 8015638:	4691      	mov	r9, r2
 801563a:	dc37      	bgt.n	80156ac <_printf_float+0x370>
 801563c:	f04f 0b00 	mov.w	fp, #0
 8015640:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015644:	f104 021a 	add.w	r2, r4, #26
 8015648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801564a:	9305      	str	r3, [sp, #20]
 801564c:	eba3 0309 	sub.w	r3, r3, r9
 8015650:	455b      	cmp	r3, fp
 8015652:	dc33      	bgt.n	80156bc <_printf_float+0x380>
 8015654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015658:	429a      	cmp	r2, r3
 801565a:	db3b      	blt.n	80156d4 <_printf_float+0x398>
 801565c:	6823      	ldr	r3, [r4, #0]
 801565e:	07da      	lsls	r2, r3, #31
 8015660:	d438      	bmi.n	80156d4 <_printf_float+0x398>
 8015662:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015666:	eba2 0903 	sub.w	r9, r2, r3
 801566a:	9b05      	ldr	r3, [sp, #20]
 801566c:	1ad2      	subs	r2, r2, r3
 801566e:	4591      	cmp	r9, r2
 8015670:	bfa8      	it	ge
 8015672:	4691      	movge	r9, r2
 8015674:	f1b9 0f00 	cmp.w	r9, #0
 8015678:	dc35      	bgt.n	80156e6 <_printf_float+0x3aa>
 801567a:	f04f 0800 	mov.w	r8, #0
 801567e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015682:	f104 0a1a 	add.w	sl, r4, #26
 8015686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801568a:	1a9b      	subs	r3, r3, r2
 801568c:	eba3 0309 	sub.w	r3, r3, r9
 8015690:	4543      	cmp	r3, r8
 8015692:	f77f af79 	ble.w	8015588 <_printf_float+0x24c>
 8015696:	2301      	movs	r3, #1
 8015698:	4652      	mov	r2, sl
 801569a:	4631      	mov	r1, r6
 801569c:	4628      	mov	r0, r5
 801569e:	47b8      	blx	r7
 80156a0:	3001      	adds	r0, #1
 80156a2:	f43f aeaa 	beq.w	80153fa <_printf_float+0xbe>
 80156a6:	f108 0801 	add.w	r8, r8, #1
 80156aa:	e7ec      	b.n	8015686 <_printf_float+0x34a>
 80156ac:	4613      	mov	r3, r2
 80156ae:	4631      	mov	r1, r6
 80156b0:	4642      	mov	r2, r8
 80156b2:	4628      	mov	r0, r5
 80156b4:	47b8      	blx	r7
 80156b6:	3001      	adds	r0, #1
 80156b8:	d1c0      	bne.n	801563c <_printf_float+0x300>
 80156ba:	e69e      	b.n	80153fa <_printf_float+0xbe>
 80156bc:	2301      	movs	r3, #1
 80156be:	4631      	mov	r1, r6
 80156c0:	4628      	mov	r0, r5
 80156c2:	9205      	str	r2, [sp, #20]
 80156c4:	47b8      	blx	r7
 80156c6:	3001      	adds	r0, #1
 80156c8:	f43f ae97 	beq.w	80153fa <_printf_float+0xbe>
 80156cc:	9a05      	ldr	r2, [sp, #20]
 80156ce:	f10b 0b01 	add.w	fp, fp, #1
 80156d2:	e7b9      	b.n	8015648 <_printf_float+0x30c>
 80156d4:	ee18 3a10 	vmov	r3, s16
 80156d8:	4652      	mov	r2, sl
 80156da:	4631      	mov	r1, r6
 80156dc:	4628      	mov	r0, r5
 80156de:	47b8      	blx	r7
 80156e0:	3001      	adds	r0, #1
 80156e2:	d1be      	bne.n	8015662 <_printf_float+0x326>
 80156e4:	e689      	b.n	80153fa <_printf_float+0xbe>
 80156e6:	9a05      	ldr	r2, [sp, #20]
 80156e8:	464b      	mov	r3, r9
 80156ea:	4442      	add	r2, r8
 80156ec:	4631      	mov	r1, r6
 80156ee:	4628      	mov	r0, r5
 80156f0:	47b8      	blx	r7
 80156f2:	3001      	adds	r0, #1
 80156f4:	d1c1      	bne.n	801567a <_printf_float+0x33e>
 80156f6:	e680      	b.n	80153fa <_printf_float+0xbe>
 80156f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156fa:	2a01      	cmp	r2, #1
 80156fc:	dc01      	bgt.n	8015702 <_printf_float+0x3c6>
 80156fe:	07db      	lsls	r3, r3, #31
 8015700:	d53a      	bpl.n	8015778 <_printf_float+0x43c>
 8015702:	2301      	movs	r3, #1
 8015704:	4642      	mov	r2, r8
 8015706:	4631      	mov	r1, r6
 8015708:	4628      	mov	r0, r5
 801570a:	47b8      	blx	r7
 801570c:	3001      	adds	r0, #1
 801570e:	f43f ae74 	beq.w	80153fa <_printf_float+0xbe>
 8015712:	ee18 3a10 	vmov	r3, s16
 8015716:	4652      	mov	r2, sl
 8015718:	4631      	mov	r1, r6
 801571a:	4628      	mov	r0, r5
 801571c:	47b8      	blx	r7
 801571e:	3001      	adds	r0, #1
 8015720:	f43f ae6b 	beq.w	80153fa <_printf_float+0xbe>
 8015724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015728:	2200      	movs	r2, #0
 801572a:	2300      	movs	r3, #0
 801572c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015730:	f7eb f9fa 	bl	8000b28 <__aeabi_dcmpeq>
 8015734:	b9d8      	cbnz	r0, 801576e <_printf_float+0x432>
 8015736:	f10a 33ff 	add.w	r3, sl, #4294967295
 801573a:	f108 0201 	add.w	r2, r8, #1
 801573e:	4631      	mov	r1, r6
 8015740:	4628      	mov	r0, r5
 8015742:	47b8      	blx	r7
 8015744:	3001      	adds	r0, #1
 8015746:	d10e      	bne.n	8015766 <_printf_float+0x42a>
 8015748:	e657      	b.n	80153fa <_printf_float+0xbe>
 801574a:	2301      	movs	r3, #1
 801574c:	4652      	mov	r2, sl
 801574e:	4631      	mov	r1, r6
 8015750:	4628      	mov	r0, r5
 8015752:	47b8      	blx	r7
 8015754:	3001      	adds	r0, #1
 8015756:	f43f ae50 	beq.w	80153fa <_printf_float+0xbe>
 801575a:	f108 0801 	add.w	r8, r8, #1
 801575e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015760:	3b01      	subs	r3, #1
 8015762:	4543      	cmp	r3, r8
 8015764:	dcf1      	bgt.n	801574a <_printf_float+0x40e>
 8015766:	464b      	mov	r3, r9
 8015768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801576c:	e6da      	b.n	8015524 <_printf_float+0x1e8>
 801576e:	f04f 0800 	mov.w	r8, #0
 8015772:	f104 0a1a 	add.w	sl, r4, #26
 8015776:	e7f2      	b.n	801575e <_printf_float+0x422>
 8015778:	2301      	movs	r3, #1
 801577a:	4642      	mov	r2, r8
 801577c:	e7df      	b.n	801573e <_printf_float+0x402>
 801577e:	2301      	movs	r3, #1
 8015780:	464a      	mov	r2, r9
 8015782:	4631      	mov	r1, r6
 8015784:	4628      	mov	r0, r5
 8015786:	47b8      	blx	r7
 8015788:	3001      	adds	r0, #1
 801578a:	f43f ae36 	beq.w	80153fa <_printf_float+0xbe>
 801578e:	f108 0801 	add.w	r8, r8, #1
 8015792:	68e3      	ldr	r3, [r4, #12]
 8015794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015796:	1a5b      	subs	r3, r3, r1
 8015798:	4543      	cmp	r3, r8
 801579a:	dcf0      	bgt.n	801577e <_printf_float+0x442>
 801579c:	e6f8      	b.n	8015590 <_printf_float+0x254>
 801579e:	f04f 0800 	mov.w	r8, #0
 80157a2:	f104 0919 	add.w	r9, r4, #25
 80157a6:	e7f4      	b.n	8015792 <_printf_float+0x456>

080157a8 <_printf_common>:
 80157a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157ac:	4616      	mov	r6, r2
 80157ae:	4699      	mov	r9, r3
 80157b0:	688a      	ldr	r2, [r1, #8]
 80157b2:	690b      	ldr	r3, [r1, #16]
 80157b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80157b8:	4293      	cmp	r3, r2
 80157ba:	bfb8      	it	lt
 80157bc:	4613      	movlt	r3, r2
 80157be:	6033      	str	r3, [r6, #0]
 80157c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80157c4:	4607      	mov	r7, r0
 80157c6:	460c      	mov	r4, r1
 80157c8:	b10a      	cbz	r2, 80157ce <_printf_common+0x26>
 80157ca:	3301      	adds	r3, #1
 80157cc:	6033      	str	r3, [r6, #0]
 80157ce:	6823      	ldr	r3, [r4, #0]
 80157d0:	0699      	lsls	r1, r3, #26
 80157d2:	bf42      	ittt	mi
 80157d4:	6833      	ldrmi	r3, [r6, #0]
 80157d6:	3302      	addmi	r3, #2
 80157d8:	6033      	strmi	r3, [r6, #0]
 80157da:	6825      	ldr	r5, [r4, #0]
 80157dc:	f015 0506 	ands.w	r5, r5, #6
 80157e0:	d106      	bne.n	80157f0 <_printf_common+0x48>
 80157e2:	f104 0a19 	add.w	sl, r4, #25
 80157e6:	68e3      	ldr	r3, [r4, #12]
 80157e8:	6832      	ldr	r2, [r6, #0]
 80157ea:	1a9b      	subs	r3, r3, r2
 80157ec:	42ab      	cmp	r3, r5
 80157ee:	dc26      	bgt.n	801583e <_printf_common+0x96>
 80157f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80157f4:	1e13      	subs	r3, r2, #0
 80157f6:	6822      	ldr	r2, [r4, #0]
 80157f8:	bf18      	it	ne
 80157fa:	2301      	movne	r3, #1
 80157fc:	0692      	lsls	r2, r2, #26
 80157fe:	d42b      	bmi.n	8015858 <_printf_common+0xb0>
 8015800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015804:	4649      	mov	r1, r9
 8015806:	4638      	mov	r0, r7
 8015808:	47c0      	blx	r8
 801580a:	3001      	adds	r0, #1
 801580c:	d01e      	beq.n	801584c <_printf_common+0xa4>
 801580e:	6823      	ldr	r3, [r4, #0]
 8015810:	6922      	ldr	r2, [r4, #16]
 8015812:	f003 0306 	and.w	r3, r3, #6
 8015816:	2b04      	cmp	r3, #4
 8015818:	bf02      	ittt	eq
 801581a:	68e5      	ldreq	r5, [r4, #12]
 801581c:	6833      	ldreq	r3, [r6, #0]
 801581e:	1aed      	subeq	r5, r5, r3
 8015820:	68a3      	ldr	r3, [r4, #8]
 8015822:	bf0c      	ite	eq
 8015824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015828:	2500      	movne	r5, #0
 801582a:	4293      	cmp	r3, r2
 801582c:	bfc4      	itt	gt
 801582e:	1a9b      	subgt	r3, r3, r2
 8015830:	18ed      	addgt	r5, r5, r3
 8015832:	2600      	movs	r6, #0
 8015834:	341a      	adds	r4, #26
 8015836:	42b5      	cmp	r5, r6
 8015838:	d11a      	bne.n	8015870 <_printf_common+0xc8>
 801583a:	2000      	movs	r0, #0
 801583c:	e008      	b.n	8015850 <_printf_common+0xa8>
 801583e:	2301      	movs	r3, #1
 8015840:	4652      	mov	r2, sl
 8015842:	4649      	mov	r1, r9
 8015844:	4638      	mov	r0, r7
 8015846:	47c0      	blx	r8
 8015848:	3001      	adds	r0, #1
 801584a:	d103      	bne.n	8015854 <_printf_common+0xac>
 801584c:	f04f 30ff 	mov.w	r0, #4294967295
 8015850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015854:	3501      	adds	r5, #1
 8015856:	e7c6      	b.n	80157e6 <_printf_common+0x3e>
 8015858:	18e1      	adds	r1, r4, r3
 801585a:	1c5a      	adds	r2, r3, #1
 801585c:	2030      	movs	r0, #48	; 0x30
 801585e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015862:	4422      	add	r2, r4
 8015864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801586c:	3302      	adds	r3, #2
 801586e:	e7c7      	b.n	8015800 <_printf_common+0x58>
 8015870:	2301      	movs	r3, #1
 8015872:	4622      	mov	r2, r4
 8015874:	4649      	mov	r1, r9
 8015876:	4638      	mov	r0, r7
 8015878:	47c0      	blx	r8
 801587a:	3001      	adds	r0, #1
 801587c:	d0e6      	beq.n	801584c <_printf_common+0xa4>
 801587e:	3601      	adds	r6, #1
 8015880:	e7d9      	b.n	8015836 <_printf_common+0x8e>
	...

08015884 <_printf_i>:
 8015884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015888:	7e0f      	ldrb	r7, [r1, #24]
 801588a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801588c:	2f78      	cmp	r7, #120	; 0x78
 801588e:	4691      	mov	r9, r2
 8015890:	4680      	mov	r8, r0
 8015892:	460c      	mov	r4, r1
 8015894:	469a      	mov	sl, r3
 8015896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801589a:	d807      	bhi.n	80158ac <_printf_i+0x28>
 801589c:	2f62      	cmp	r7, #98	; 0x62
 801589e:	d80a      	bhi.n	80158b6 <_printf_i+0x32>
 80158a0:	2f00      	cmp	r7, #0
 80158a2:	f000 80d4 	beq.w	8015a4e <_printf_i+0x1ca>
 80158a6:	2f58      	cmp	r7, #88	; 0x58
 80158a8:	f000 80c0 	beq.w	8015a2c <_printf_i+0x1a8>
 80158ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80158b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80158b4:	e03a      	b.n	801592c <_printf_i+0xa8>
 80158b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80158ba:	2b15      	cmp	r3, #21
 80158bc:	d8f6      	bhi.n	80158ac <_printf_i+0x28>
 80158be:	a101      	add	r1, pc, #4	; (adr r1, 80158c4 <_printf_i+0x40>)
 80158c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80158c4:	0801591d 	.word	0x0801591d
 80158c8:	08015931 	.word	0x08015931
 80158cc:	080158ad 	.word	0x080158ad
 80158d0:	080158ad 	.word	0x080158ad
 80158d4:	080158ad 	.word	0x080158ad
 80158d8:	080158ad 	.word	0x080158ad
 80158dc:	08015931 	.word	0x08015931
 80158e0:	080158ad 	.word	0x080158ad
 80158e4:	080158ad 	.word	0x080158ad
 80158e8:	080158ad 	.word	0x080158ad
 80158ec:	080158ad 	.word	0x080158ad
 80158f0:	08015a35 	.word	0x08015a35
 80158f4:	0801595d 	.word	0x0801595d
 80158f8:	080159ef 	.word	0x080159ef
 80158fc:	080158ad 	.word	0x080158ad
 8015900:	080158ad 	.word	0x080158ad
 8015904:	08015a57 	.word	0x08015a57
 8015908:	080158ad 	.word	0x080158ad
 801590c:	0801595d 	.word	0x0801595d
 8015910:	080158ad 	.word	0x080158ad
 8015914:	080158ad 	.word	0x080158ad
 8015918:	080159f7 	.word	0x080159f7
 801591c:	682b      	ldr	r3, [r5, #0]
 801591e:	1d1a      	adds	r2, r3, #4
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	602a      	str	r2, [r5, #0]
 8015924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801592c:	2301      	movs	r3, #1
 801592e:	e09f      	b.n	8015a70 <_printf_i+0x1ec>
 8015930:	6820      	ldr	r0, [r4, #0]
 8015932:	682b      	ldr	r3, [r5, #0]
 8015934:	0607      	lsls	r7, r0, #24
 8015936:	f103 0104 	add.w	r1, r3, #4
 801593a:	6029      	str	r1, [r5, #0]
 801593c:	d501      	bpl.n	8015942 <_printf_i+0xbe>
 801593e:	681e      	ldr	r6, [r3, #0]
 8015940:	e003      	b.n	801594a <_printf_i+0xc6>
 8015942:	0646      	lsls	r6, r0, #25
 8015944:	d5fb      	bpl.n	801593e <_printf_i+0xba>
 8015946:	f9b3 6000 	ldrsh.w	r6, [r3]
 801594a:	2e00      	cmp	r6, #0
 801594c:	da03      	bge.n	8015956 <_printf_i+0xd2>
 801594e:	232d      	movs	r3, #45	; 0x2d
 8015950:	4276      	negs	r6, r6
 8015952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015956:	485a      	ldr	r0, [pc, #360]	; (8015ac0 <_printf_i+0x23c>)
 8015958:	230a      	movs	r3, #10
 801595a:	e012      	b.n	8015982 <_printf_i+0xfe>
 801595c:	682b      	ldr	r3, [r5, #0]
 801595e:	6820      	ldr	r0, [r4, #0]
 8015960:	1d19      	adds	r1, r3, #4
 8015962:	6029      	str	r1, [r5, #0]
 8015964:	0605      	lsls	r5, r0, #24
 8015966:	d501      	bpl.n	801596c <_printf_i+0xe8>
 8015968:	681e      	ldr	r6, [r3, #0]
 801596a:	e002      	b.n	8015972 <_printf_i+0xee>
 801596c:	0641      	lsls	r1, r0, #25
 801596e:	d5fb      	bpl.n	8015968 <_printf_i+0xe4>
 8015970:	881e      	ldrh	r6, [r3, #0]
 8015972:	4853      	ldr	r0, [pc, #332]	; (8015ac0 <_printf_i+0x23c>)
 8015974:	2f6f      	cmp	r7, #111	; 0x6f
 8015976:	bf0c      	ite	eq
 8015978:	2308      	moveq	r3, #8
 801597a:	230a      	movne	r3, #10
 801597c:	2100      	movs	r1, #0
 801597e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015982:	6865      	ldr	r5, [r4, #4]
 8015984:	60a5      	str	r5, [r4, #8]
 8015986:	2d00      	cmp	r5, #0
 8015988:	bfa2      	ittt	ge
 801598a:	6821      	ldrge	r1, [r4, #0]
 801598c:	f021 0104 	bicge.w	r1, r1, #4
 8015990:	6021      	strge	r1, [r4, #0]
 8015992:	b90e      	cbnz	r6, 8015998 <_printf_i+0x114>
 8015994:	2d00      	cmp	r5, #0
 8015996:	d04b      	beq.n	8015a30 <_printf_i+0x1ac>
 8015998:	4615      	mov	r5, r2
 801599a:	fbb6 f1f3 	udiv	r1, r6, r3
 801599e:	fb03 6711 	mls	r7, r3, r1, r6
 80159a2:	5dc7      	ldrb	r7, [r0, r7]
 80159a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80159a8:	4637      	mov	r7, r6
 80159aa:	42bb      	cmp	r3, r7
 80159ac:	460e      	mov	r6, r1
 80159ae:	d9f4      	bls.n	801599a <_printf_i+0x116>
 80159b0:	2b08      	cmp	r3, #8
 80159b2:	d10b      	bne.n	80159cc <_printf_i+0x148>
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	07de      	lsls	r6, r3, #31
 80159b8:	d508      	bpl.n	80159cc <_printf_i+0x148>
 80159ba:	6923      	ldr	r3, [r4, #16]
 80159bc:	6861      	ldr	r1, [r4, #4]
 80159be:	4299      	cmp	r1, r3
 80159c0:	bfde      	ittt	le
 80159c2:	2330      	movle	r3, #48	; 0x30
 80159c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80159c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80159cc:	1b52      	subs	r2, r2, r5
 80159ce:	6122      	str	r2, [r4, #16]
 80159d0:	f8cd a000 	str.w	sl, [sp]
 80159d4:	464b      	mov	r3, r9
 80159d6:	aa03      	add	r2, sp, #12
 80159d8:	4621      	mov	r1, r4
 80159da:	4640      	mov	r0, r8
 80159dc:	f7ff fee4 	bl	80157a8 <_printf_common>
 80159e0:	3001      	adds	r0, #1
 80159e2:	d14a      	bne.n	8015a7a <_printf_i+0x1f6>
 80159e4:	f04f 30ff 	mov.w	r0, #4294967295
 80159e8:	b004      	add	sp, #16
 80159ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159ee:	6823      	ldr	r3, [r4, #0]
 80159f0:	f043 0320 	orr.w	r3, r3, #32
 80159f4:	6023      	str	r3, [r4, #0]
 80159f6:	4833      	ldr	r0, [pc, #204]	; (8015ac4 <_printf_i+0x240>)
 80159f8:	2778      	movs	r7, #120	; 0x78
 80159fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80159fe:	6823      	ldr	r3, [r4, #0]
 8015a00:	6829      	ldr	r1, [r5, #0]
 8015a02:	061f      	lsls	r7, r3, #24
 8015a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8015a08:	d402      	bmi.n	8015a10 <_printf_i+0x18c>
 8015a0a:	065f      	lsls	r7, r3, #25
 8015a0c:	bf48      	it	mi
 8015a0e:	b2b6      	uxthmi	r6, r6
 8015a10:	07df      	lsls	r7, r3, #31
 8015a12:	bf48      	it	mi
 8015a14:	f043 0320 	orrmi.w	r3, r3, #32
 8015a18:	6029      	str	r1, [r5, #0]
 8015a1a:	bf48      	it	mi
 8015a1c:	6023      	strmi	r3, [r4, #0]
 8015a1e:	b91e      	cbnz	r6, 8015a28 <_printf_i+0x1a4>
 8015a20:	6823      	ldr	r3, [r4, #0]
 8015a22:	f023 0320 	bic.w	r3, r3, #32
 8015a26:	6023      	str	r3, [r4, #0]
 8015a28:	2310      	movs	r3, #16
 8015a2a:	e7a7      	b.n	801597c <_printf_i+0xf8>
 8015a2c:	4824      	ldr	r0, [pc, #144]	; (8015ac0 <_printf_i+0x23c>)
 8015a2e:	e7e4      	b.n	80159fa <_printf_i+0x176>
 8015a30:	4615      	mov	r5, r2
 8015a32:	e7bd      	b.n	80159b0 <_printf_i+0x12c>
 8015a34:	682b      	ldr	r3, [r5, #0]
 8015a36:	6826      	ldr	r6, [r4, #0]
 8015a38:	6961      	ldr	r1, [r4, #20]
 8015a3a:	1d18      	adds	r0, r3, #4
 8015a3c:	6028      	str	r0, [r5, #0]
 8015a3e:	0635      	lsls	r5, r6, #24
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	d501      	bpl.n	8015a48 <_printf_i+0x1c4>
 8015a44:	6019      	str	r1, [r3, #0]
 8015a46:	e002      	b.n	8015a4e <_printf_i+0x1ca>
 8015a48:	0670      	lsls	r0, r6, #25
 8015a4a:	d5fb      	bpl.n	8015a44 <_printf_i+0x1c0>
 8015a4c:	8019      	strh	r1, [r3, #0]
 8015a4e:	2300      	movs	r3, #0
 8015a50:	6123      	str	r3, [r4, #16]
 8015a52:	4615      	mov	r5, r2
 8015a54:	e7bc      	b.n	80159d0 <_printf_i+0x14c>
 8015a56:	682b      	ldr	r3, [r5, #0]
 8015a58:	1d1a      	adds	r2, r3, #4
 8015a5a:	602a      	str	r2, [r5, #0]
 8015a5c:	681d      	ldr	r5, [r3, #0]
 8015a5e:	6862      	ldr	r2, [r4, #4]
 8015a60:	2100      	movs	r1, #0
 8015a62:	4628      	mov	r0, r5
 8015a64:	f7ea fbe4 	bl	8000230 <memchr>
 8015a68:	b108      	cbz	r0, 8015a6e <_printf_i+0x1ea>
 8015a6a:	1b40      	subs	r0, r0, r5
 8015a6c:	6060      	str	r0, [r4, #4]
 8015a6e:	6863      	ldr	r3, [r4, #4]
 8015a70:	6123      	str	r3, [r4, #16]
 8015a72:	2300      	movs	r3, #0
 8015a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a78:	e7aa      	b.n	80159d0 <_printf_i+0x14c>
 8015a7a:	6923      	ldr	r3, [r4, #16]
 8015a7c:	462a      	mov	r2, r5
 8015a7e:	4649      	mov	r1, r9
 8015a80:	4640      	mov	r0, r8
 8015a82:	47d0      	blx	sl
 8015a84:	3001      	adds	r0, #1
 8015a86:	d0ad      	beq.n	80159e4 <_printf_i+0x160>
 8015a88:	6823      	ldr	r3, [r4, #0]
 8015a8a:	079b      	lsls	r3, r3, #30
 8015a8c:	d413      	bmi.n	8015ab6 <_printf_i+0x232>
 8015a8e:	68e0      	ldr	r0, [r4, #12]
 8015a90:	9b03      	ldr	r3, [sp, #12]
 8015a92:	4298      	cmp	r0, r3
 8015a94:	bfb8      	it	lt
 8015a96:	4618      	movlt	r0, r3
 8015a98:	e7a6      	b.n	80159e8 <_printf_i+0x164>
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	4632      	mov	r2, r6
 8015a9e:	4649      	mov	r1, r9
 8015aa0:	4640      	mov	r0, r8
 8015aa2:	47d0      	blx	sl
 8015aa4:	3001      	adds	r0, #1
 8015aa6:	d09d      	beq.n	80159e4 <_printf_i+0x160>
 8015aa8:	3501      	adds	r5, #1
 8015aaa:	68e3      	ldr	r3, [r4, #12]
 8015aac:	9903      	ldr	r1, [sp, #12]
 8015aae:	1a5b      	subs	r3, r3, r1
 8015ab0:	42ab      	cmp	r3, r5
 8015ab2:	dcf2      	bgt.n	8015a9a <_printf_i+0x216>
 8015ab4:	e7eb      	b.n	8015a8e <_printf_i+0x20a>
 8015ab6:	2500      	movs	r5, #0
 8015ab8:	f104 0619 	add.w	r6, r4, #25
 8015abc:	e7f5      	b.n	8015aaa <_printf_i+0x226>
 8015abe:	bf00      	nop
 8015ac0:	08019e77 	.word	0x08019e77
 8015ac4:	08019e88 	.word	0x08019e88

08015ac8 <std>:
 8015ac8:	2300      	movs	r3, #0
 8015aca:	b510      	push	{r4, lr}
 8015acc:	4604      	mov	r4, r0
 8015ace:	e9c0 3300 	strd	r3, r3, [r0]
 8015ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015ad6:	6083      	str	r3, [r0, #8]
 8015ad8:	8181      	strh	r1, [r0, #12]
 8015ada:	6643      	str	r3, [r0, #100]	; 0x64
 8015adc:	81c2      	strh	r2, [r0, #14]
 8015ade:	6183      	str	r3, [r0, #24]
 8015ae0:	4619      	mov	r1, r3
 8015ae2:	2208      	movs	r2, #8
 8015ae4:	305c      	adds	r0, #92	; 0x5c
 8015ae6:	f000 f935 	bl	8015d54 <memset>
 8015aea:	4b0d      	ldr	r3, [pc, #52]	; (8015b20 <std+0x58>)
 8015aec:	6263      	str	r3, [r4, #36]	; 0x24
 8015aee:	4b0d      	ldr	r3, [pc, #52]	; (8015b24 <std+0x5c>)
 8015af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8015af2:	4b0d      	ldr	r3, [pc, #52]	; (8015b28 <std+0x60>)
 8015af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015af6:	4b0d      	ldr	r3, [pc, #52]	; (8015b2c <std+0x64>)
 8015af8:	6323      	str	r3, [r4, #48]	; 0x30
 8015afa:	4b0d      	ldr	r3, [pc, #52]	; (8015b30 <std+0x68>)
 8015afc:	6224      	str	r4, [r4, #32]
 8015afe:	429c      	cmp	r4, r3
 8015b00:	d006      	beq.n	8015b10 <std+0x48>
 8015b02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015b06:	4294      	cmp	r4, r2
 8015b08:	d002      	beq.n	8015b10 <std+0x48>
 8015b0a:	33d0      	adds	r3, #208	; 0xd0
 8015b0c:	429c      	cmp	r4, r3
 8015b0e:	d105      	bne.n	8015b1c <std+0x54>
 8015b10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b18:	f000 b998 	b.w	8015e4c <__retarget_lock_init_recursive>
 8015b1c:	bd10      	pop	{r4, pc}
 8015b1e:	bf00      	nop
 8015b20:	08015c8d 	.word	0x08015c8d
 8015b24:	08015caf 	.word	0x08015caf
 8015b28:	08015ce7 	.word	0x08015ce7
 8015b2c:	08015d0b 	.word	0x08015d0b
 8015b30:	2000ec24 	.word	0x2000ec24

08015b34 <stdio_exit_handler>:
 8015b34:	4a02      	ldr	r2, [pc, #8]	; (8015b40 <stdio_exit_handler+0xc>)
 8015b36:	4903      	ldr	r1, [pc, #12]	; (8015b44 <stdio_exit_handler+0x10>)
 8015b38:	4803      	ldr	r0, [pc, #12]	; (8015b48 <stdio_exit_handler+0x14>)
 8015b3a:	f000 b869 	b.w	8015c10 <_fwalk_sglue>
 8015b3e:	bf00      	nop
 8015b40:	2000218c 	.word	0x2000218c
 8015b44:	08017829 	.word	0x08017829
 8015b48:	20002198 	.word	0x20002198

08015b4c <cleanup_stdio>:
 8015b4c:	6841      	ldr	r1, [r0, #4]
 8015b4e:	4b0c      	ldr	r3, [pc, #48]	; (8015b80 <cleanup_stdio+0x34>)
 8015b50:	4299      	cmp	r1, r3
 8015b52:	b510      	push	{r4, lr}
 8015b54:	4604      	mov	r4, r0
 8015b56:	d001      	beq.n	8015b5c <cleanup_stdio+0x10>
 8015b58:	f001 fe66 	bl	8017828 <_fflush_r>
 8015b5c:	68a1      	ldr	r1, [r4, #8]
 8015b5e:	4b09      	ldr	r3, [pc, #36]	; (8015b84 <cleanup_stdio+0x38>)
 8015b60:	4299      	cmp	r1, r3
 8015b62:	d002      	beq.n	8015b6a <cleanup_stdio+0x1e>
 8015b64:	4620      	mov	r0, r4
 8015b66:	f001 fe5f 	bl	8017828 <_fflush_r>
 8015b6a:	68e1      	ldr	r1, [r4, #12]
 8015b6c:	4b06      	ldr	r3, [pc, #24]	; (8015b88 <cleanup_stdio+0x3c>)
 8015b6e:	4299      	cmp	r1, r3
 8015b70:	d004      	beq.n	8015b7c <cleanup_stdio+0x30>
 8015b72:	4620      	mov	r0, r4
 8015b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b78:	f001 be56 	b.w	8017828 <_fflush_r>
 8015b7c:	bd10      	pop	{r4, pc}
 8015b7e:	bf00      	nop
 8015b80:	2000ec24 	.word	0x2000ec24
 8015b84:	2000ec8c 	.word	0x2000ec8c
 8015b88:	2000ecf4 	.word	0x2000ecf4

08015b8c <global_stdio_init.part.0>:
 8015b8c:	b510      	push	{r4, lr}
 8015b8e:	4b0b      	ldr	r3, [pc, #44]	; (8015bbc <global_stdio_init.part.0+0x30>)
 8015b90:	4c0b      	ldr	r4, [pc, #44]	; (8015bc0 <global_stdio_init.part.0+0x34>)
 8015b92:	4a0c      	ldr	r2, [pc, #48]	; (8015bc4 <global_stdio_init.part.0+0x38>)
 8015b94:	601a      	str	r2, [r3, #0]
 8015b96:	4620      	mov	r0, r4
 8015b98:	2200      	movs	r2, #0
 8015b9a:	2104      	movs	r1, #4
 8015b9c:	f7ff ff94 	bl	8015ac8 <std>
 8015ba0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015ba4:	2201      	movs	r2, #1
 8015ba6:	2109      	movs	r1, #9
 8015ba8:	f7ff ff8e 	bl	8015ac8 <std>
 8015bac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015bb0:	2202      	movs	r2, #2
 8015bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bb6:	2112      	movs	r1, #18
 8015bb8:	f7ff bf86 	b.w	8015ac8 <std>
 8015bbc:	2000ed5c 	.word	0x2000ed5c
 8015bc0:	2000ec24 	.word	0x2000ec24
 8015bc4:	08015b35 	.word	0x08015b35

08015bc8 <__sfp_lock_acquire>:
 8015bc8:	4801      	ldr	r0, [pc, #4]	; (8015bd0 <__sfp_lock_acquire+0x8>)
 8015bca:	f000 b940 	b.w	8015e4e <__retarget_lock_acquire_recursive>
 8015bce:	bf00      	nop
 8015bd0:	2000ed65 	.word	0x2000ed65

08015bd4 <__sfp_lock_release>:
 8015bd4:	4801      	ldr	r0, [pc, #4]	; (8015bdc <__sfp_lock_release+0x8>)
 8015bd6:	f000 b93b 	b.w	8015e50 <__retarget_lock_release_recursive>
 8015bda:	bf00      	nop
 8015bdc:	2000ed65 	.word	0x2000ed65

08015be0 <__sinit>:
 8015be0:	b510      	push	{r4, lr}
 8015be2:	4604      	mov	r4, r0
 8015be4:	f7ff fff0 	bl	8015bc8 <__sfp_lock_acquire>
 8015be8:	6a23      	ldr	r3, [r4, #32]
 8015bea:	b11b      	cbz	r3, 8015bf4 <__sinit+0x14>
 8015bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bf0:	f7ff bff0 	b.w	8015bd4 <__sfp_lock_release>
 8015bf4:	4b04      	ldr	r3, [pc, #16]	; (8015c08 <__sinit+0x28>)
 8015bf6:	6223      	str	r3, [r4, #32]
 8015bf8:	4b04      	ldr	r3, [pc, #16]	; (8015c0c <__sinit+0x2c>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d1f5      	bne.n	8015bec <__sinit+0xc>
 8015c00:	f7ff ffc4 	bl	8015b8c <global_stdio_init.part.0>
 8015c04:	e7f2      	b.n	8015bec <__sinit+0xc>
 8015c06:	bf00      	nop
 8015c08:	08015b4d 	.word	0x08015b4d
 8015c0c:	2000ed5c 	.word	0x2000ed5c

08015c10 <_fwalk_sglue>:
 8015c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c14:	4607      	mov	r7, r0
 8015c16:	4688      	mov	r8, r1
 8015c18:	4614      	mov	r4, r2
 8015c1a:	2600      	movs	r6, #0
 8015c1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015c20:	f1b9 0901 	subs.w	r9, r9, #1
 8015c24:	d505      	bpl.n	8015c32 <_fwalk_sglue+0x22>
 8015c26:	6824      	ldr	r4, [r4, #0]
 8015c28:	2c00      	cmp	r4, #0
 8015c2a:	d1f7      	bne.n	8015c1c <_fwalk_sglue+0xc>
 8015c2c:	4630      	mov	r0, r6
 8015c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c32:	89ab      	ldrh	r3, [r5, #12]
 8015c34:	2b01      	cmp	r3, #1
 8015c36:	d907      	bls.n	8015c48 <_fwalk_sglue+0x38>
 8015c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c3c:	3301      	adds	r3, #1
 8015c3e:	d003      	beq.n	8015c48 <_fwalk_sglue+0x38>
 8015c40:	4629      	mov	r1, r5
 8015c42:	4638      	mov	r0, r7
 8015c44:	47c0      	blx	r8
 8015c46:	4306      	orrs	r6, r0
 8015c48:	3568      	adds	r5, #104	; 0x68
 8015c4a:	e7e9      	b.n	8015c20 <_fwalk_sglue+0x10>

08015c4c <siprintf>:
 8015c4c:	b40e      	push	{r1, r2, r3}
 8015c4e:	b500      	push	{lr}
 8015c50:	b09c      	sub	sp, #112	; 0x70
 8015c52:	ab1d      	add	r3, sp, #116	; 0x74
 8015c54:	9002      	str	r0, [sp, #8]
 8015c56:	9006      	str	r0, [sp, #24]
 8015c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c5c:	4809      	ldr	r0, [pc, #36]	; (8015c84 <siprintf+0x38>)
 8015c5e:	9107      	str	r1, [sp, #28]
 8015c60:	9104      	str	r1, [sp, #16]
 8015c62:	4909      	ldr	r1, [pc, #36]	; (8015c88 <siprintf+0x3c>)
 8015c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c68:	9105      	str	r1, [sp, #20]
 8015c6a:	6800      	ldr	r0, [r0, #0]
 8015c6c:	9301      	str	r3, [sp, #4]
 8015c6e:	a902      	add	r1, sp, #8
 8015c70:	f001 fc56 	bl	8017520 <_svfiprintf_r>
 8015c74:	9b02      	ldr	r3, [sp, #8]
 8015c76:	2200      	movs	r2, #0
 8015c78:	701a      	strb	r2, [r3, #0]
 8015c7a:	b01c      	add	sp, #112	; 0x70
 8015c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c80:	b003      	add	sp, #12
 8015c82:	4770      	bx	lr
 8015c84:	200021e4 	.word	0x200021e4
 8015c88:	ffff0208 	.word	0xffff0208

08015c8c <__sread>:
 8015c8c:	b510      	push	{r4, lr}
 8015c8e:	460c      	mov	r4, r1
 8015c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c94:	f000 f88c 	bl	8015db0 <_read_r>
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	bfab      	itete	ge
 8015c9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8015ca0:	181b      	addge	r3, r3, r0
 8015ca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015ca6:	bfac      	ite	ge
 8015ca8:	6563      	strge	r3, [r4, #84]	; 0x54
 8015caa:	81a3      	strhlt	r3, [r4, #12]
 8015cac:	bd10      	pop	{r4, pc}

08015cae <__swrite>:
 8015cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb2:	461f      	mov	r7, r3
 8015cb4:	898b      	ldrh	r3, [r1, #12]
 8015cb6:	05db      	lsls	r3, r3, #23
 8015cb8:	4605      	mov	r5, r0
 8015cba:	460c      	mov	r4, r1
 8015cbc:	4616      	mov	r6, r2
 8015cbe:	d505      	bpl.n	8015ccc <__swrite+0x1e>
 8015cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cc4:	2302      	movs	r3, #2
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	f000 f860 	bl	8015d8c <_lseek_r>
 8015ccc:	89a3      	ldrh	r3, [r4, #12]
 8015cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015cd6:	81a3      	strh	r3, [r4, #12]
 8015cd8:	4632      	mov	r2, r6
 8015cda:	463b      	mov	r3, r7
 8015cdc:	4628      	mov	r0, r5
 8015cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ce2:	f000 b877 	b.w	8015dd4 <_write_r>

08015ce6 <__sseek>:
 8015ce6:	b510      	push	{r4, lr}
 8015ce8:	460c      	mov	r4, r1
 8015cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cee:	f000 f84d 	bl	8015d8c <_lseek_r>
 8015cf2:	1c43      	adds	r3, r0, #1
 8015cf4:	89a3      	ldrh	r3, [r4, #12]
 8015cf6:	bf15      	itete	ne
 8015cf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8015cfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015cfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d02:	81a3      	strheq	r3, [r4, #12]
 8015d04:	bf18      	it	ne
 8015d06:	81a3      	strhne	r3, [r4, #12]
 8015d08:	bd10      	pop	{r4, pc}

08015d0a <__sclose>:
 8015d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d0e:	f000 b82d 	b.w	8015d6c <_close_r>
	...

08015d14 <_vsiprintf_r>:
 8015d14:	b500      	push	{lr}
 8015d16:	b09b      	sub	sp, #108	; 0x6c
 8015d18:	9100      	str	r1, [sp, #0]
 8015d1a:	9104      	str	r1, [sp, #16]
 8015d1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015d20:	9105      	str	r1, [sp, #20]
 8015d22:	9102      	str	r1, [sp, #8]
 8015d24:	4905      	ldr	r1, [pc, #20]	; (8015d3c <_vsiprintf_r+0x28>)
 8015d26:	9103      	str	r1, [sp, #12]
 8015d28:	4669      	mov	r1, sp
 8015d2a:	f001 fbf9 	bl	8017520 <_svfiprintf_r>
 8015d2e:	9b00      	ldr	r3, [sp, #0]
 8015d30:	2200      	movs	r2, #0
 8015d32:	701a      	strb	r2, [r3, #0]
 8015d34:	b01b      	add	sp, #108	; 0x6c
 8015d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d3a:	bf00      	nop
 8015d3c:	ffff0208 	.word	0xffff0208

08015d40 <vsiprintf>:
 8015d40:	4613      	mov	r3, r2
 8015d42:	460a      	mov	r2, r1
 8015d44:	4601      	mov	r1, r0
 8015d46:	4802      	ldr	r0, [pc, #8]	; (8015d50 <vsiprintf+0x10>)
 8015d48:	6800      	ldr	r0, [r0, #0]
 8015d4a:	f7ff bfe3 	b.w	8015d14 <_vsiprintf_r>
 8015d4e:	bf00      	nop
 8015d50:	200021e4 	.word	0x200021e4

08015d54 <memset>:
 8015d54:	4402      	add	r2, r0
 8015d56:	4603      	mov	r3, r0
 8015d58:	4293      	cmp	r3, r2
 8015d5a:	d100      	bne.n	8015d5e <memset+0xa>
 8015d5c:	4770      	bx	lr
 8015d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8015d62:	e7f9      	b.n	8015d58 <memset+0x4>

08015d64 <_localeconv_r>:
 8015d64:	4800      	ldr	r0, [pc, #0]	; (8015d68 <_localeconv_r+0x4>)
 8015d66:	4770      	bx	lr
 8015d68:	200022d8 	.word	0x200022d8

08015d6c <_close_r>:
 8015d6c:	b538      	push	{r3, r4, r5, lr}
 8015d6e:	4d06      	ldr	r5, [pc, #24]	; (8015d88 <_close_r+0x1c>)
 8015d70:	2300      	movs	r3, #0
 8015d72:	4604      	mov	r4, r0
 8015d74:	4608      	mov	r0, r1
 8015d76:	602b      	str	r3, [r5, #0]
 8015d78:	f7eb fadb 	bl	8001332 <_close>
 8015d7c:	1c43      	adds	r3, r0, #1
 8015d7e:	d102      	bne.n	8015d86 <_close_r+0x1a>
 8015d80:	682b      	ldr	r3, [r5, #0]
 8015d82:	b103      	cbz	r3, 8015d86 <_close_r+0x1a>
 8015d84:	6023      	str	r3, [r4, #0]
 8015d86:	bd38      	pop	{r3, r4, r5, pc}
 8015d88:	2000ed60 	.word	0x2000ed60

08015d8c <_lseek_r>:
 8015d8c:	b538      	push	{r3, r4, r5, lr}
 8015d8e:	4d07      	ldr	r5, [pc, #28]	; (8015dac <_lseek_r+0x20>)
 8015d90:	4604      	mov	r4, r0
 8015d92:	4608      	mov	r0, r1
 8015d94:	4611      	mov	r1, r2
 8015d96:	2200      	movs	r2, #0
 8015d98:	602a      	str	r2, [r5, #0]
 8015d9a:	461a      	mov	r2, r3
 8015d9c:	f7eb faf0 	bl	8001380 <_lseek>
 8015da0:	1c43      	adds	r3, r0, #1
 8015da2:	d102      	bne.n	8015daa <_lseek_r+0x1e>
 8015da4:	682b      	ldr	r3, [r5, #0]
 8015da6:	b103      	cbz	r3, 8015daa <_lseek_r+0x1e>
 8015da8:	6023      	str	r3, [r4, #0]
 8015daa:	bd38      	pop	{r3, r4, r5, pc}
 8015dac:	2000ed60 	.word	0x2000ed60

08015db0 <_read_r>:
 8015db0:	b538      	push	{r3, r4, r5, lr}
 8015db2:	4d07      	ldr	r5, [pc, #28]	; (8015dd0 <_read_r+0x20>)
 8015db4:	4604      	mov	r4, r0
 8015db6:	4608      	mov	r0, r1
 8015db8:	4611      	mov	r1, r2
 8015dba:	2200      	movs	r2, #0
 8015dbc:	602a      	str	r2, [r5, #0]
 8015dbe:	461a      	mov	r2, r3
 8015dc0:	f7eb fa7e 	bl	80012c0 <_read>
 8015dc4:	1c43      	adds	r3, r0, #1
 8015dc6:	d102      	bne.n	8015dce <_read_r+0x1e>
 8015dc8:	682b      	ldr	r3, [r5, #0]
 8015dca:	b103      	cbz	r3, 8015dce <_read_r+0x1e>
 8015dcc:	6023      	str	r3, [r4, #0]
 8015dce:	bd38      	pop	{r3, r4, r5, pc}
 8015dd0:	2000ed60 	.word	0x2000ed60

08015dd4 <_write_r>:
 8015dd4:	b538      	push	{r3, r4, r5, lr}
 8015dd6:	4d07      	ldr	r5, [pc, #28]	; (8015df4 <_write_r+0x20>)
 8015dd8:	4604      	mov	r4, r0
 8015dda:	4608      	mov	r0, r1
 8015ddc:	4611      	mov	r1, r2
 8015dde:	2200      	movs	r2, #0
 8015de0:	602a      	str	r2, [r5, #0]
 8015de2:	461a      	mov	r2, r3
 8015de4:	f7eb fa89 	bl	80012fa <_write>
 8015de8:	1c43      	adds	r3, r0, #1
 8015dea:	d102      	bne.n	8015df2 <_write_r+0x1e>
 8015dec:	682b      	ldr	r3, [r5, #0]
 8015dee:	b103      	cbz	r3, 8015df2 <_write_r+0x1e>
 8015df0:	6023      	str	r3, [r4, #0]
 8015df2:	bd38      	pop	{r3, r4, r5, pc}
 8015df4:	2000ed60 	.word	0x2000ed60

08015df8 <__errno>:
 8015df8:	4b01      	ldr	r3, [pc, #4]	; (8015e00 <__errno+0x8>)
 8015dfa:	6818      	ldr	r0, [r3, #0]
 8015dfc:	4770      	bx	lr
 8015dfe:	bf00      	nop
 8015e00:	200021e4 	.word	0x200021e4

08015e04 <__libc_init_array>:
 8015e04:	b570      	push	{r4, r5, r6, lr}
 8015e06:	4d0d      	ldr	r5, [pc, #52]	; (8015e3c <__libc_init_array+0x38>)
 8015e08:	4c0d      	ldr	r4, [pc, #52]	; (8015e40 <__libc_init_array+0x3c>)
 8015e0a:	1b64      	subs	r4, r4, r5
 8015e0c:	10a4      	asrs	r4, r4, #2
 8015e0e:	2600      	movs	r6, #0
 8015e10:	42a6      	cmp	r6, r4
 8015e12:	d109      	bne.n	8015e28 <__libc_init_array+0x24>
 8015e14:	4d0b      	ldr	r5, [pc, #44]	; (8015e44 <__libc_init_array+0x40>)
 8015e16:	4c0c      	ldr	r4, [pc, #48]	; (8015e48 <__libc_init_array+0x44>)
 8015e18:	f002 f89c 	bl	8017f54 <_init>
 8015e1c:	1b64      	subs	r4, r4, r5
 8015e1e:	10a4      	asrs	r4, r4, #2
 8015e20:	2600      	movs	r6, #0
 8015e22:	42a6      	cmp	r6, r4
 8015e24:	d105      	bne.n	8015e32 <__libc_init_array+0x2e>
 8015e26:	bd70      	pop	{r4, r5, r6, pc}
 8015e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e2c:	4798      	blx	r3
 8015e2e:	3601      	adds	r6, #1
 8015e30:	e7ee      	b.n	8015e10 <__libc_init_array+0xc>
 8015e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e36:	4798      	blx	r3
 8015e38:	3601      	adds	r6, #1
 8015e3a:	e7f2      	b.n	8015e22 <__libc_init_array+0x1e>
 8015e3c:	0801a0dc 	.word	0x0801a0dc
 8015e40:	0801a0dc 	.word	0x0801a0dc
 8015e44:	0801a0dc 	.word	0x0801a0dc
 8015e48:	0801a0e0 	.word	0x0801a0e0

08015e4c <__retarget_lock_init_recursive>:
 8015e4c:	4770      	bx	lr

08015e4e <__retarget_lock_acquire_recursive>:
 8015e4e:	4770      	bx	lr

08015e50 <__retarget_lock_release_recursive>:
 8015e50:	4770      	bx	lr

08015e52 <strcpy>:
 8015e52:	4603      	mov	r3, r0
 8015e54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015e58:	f803 2b01 	strb.w	r2, [r3], #1
 8015e5c:	2a00      	cmp	r2, #0
 8015e5e:	d1f9      	bne.n	8015e54 <strcpy+0x2>
 8015e60:	4770      	bx	lr

08015e62 <memcpy>:
 8015e62:	440a      	add	r2, r1
 8015e64:	4291      	cmp	r1, r2
 8015e66:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e6a:	d100      	bne.n	8015e6e <memcpy+0xc>
 8015e6c:	4770      	bx	lr
 8015e6e:	b510      	push	{r4, lr}
 8015e70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e78:	4291      	cmp	r1, r2
 8015e7a:	d1f9      	bne.n	8015e70 <memcpy+0xe>
 8015e7c:	bd10      	pop	{r4, pc}

08015e7e <quorem>:
 8015e7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e82:	6903      	ldr	r3, [r0, #16]
 8015e84:	690c      	ldr	r4, [r1, #16]
 8015e86:	42a3      	cmp	r3, r4
 8015e88:	4607      	mov	r7, r0
 8015e8a:	db7e      	blt.n	8015f8a <quorem+0x10c>
 8015e8c:	3c01      	subs	r4, #1
 8015e8e:	f101 0814 	add.w	r8, r1, #20
 8015e92:	f100 0514 	add.w	r5, r0, #20
 8015e96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015e9a:	9301      	str	r3, [sp, #4]
 8015e9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015ea0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015ea4:	3301      	adds	r3, #1
 8015ea6:	429a      	cmp	r2, r3
 8015ea8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015eac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015eb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8015eb4:	d331      	bcc.n	8015f1a <quorem+0x9c>
 8015eb6:	f04f 0e00 	mov.w	lr, #0
 8015eba:	4640      	mov	r0, r8
 8015ebc:	46ac      	mov	ip, r5
 8015ebe:	46f2      	mov	sl, lr
 8015ec0:	f850 2b04 	ldr.w	r2, [r0], #4
 8015ec4:	b293      	uxth	r3, r2
 8015ec6:	fb06 e303 	mla	r3, r6, r3, lr
 8015eca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015ece:	0c1a      	lsrs	r2, r3, #16
 8015ed0:	b29b      	uxth	r3, r3
 8015ed2:	ebaa 0303 	sub.w	r3, sl, r3
 8015ed6:	f8dc a000 	ldr.w	sl, [ip]
 8015eda:	fa13 f38a 	uxtah	r3, r3, sl
 8015ede:	fb06 220e 	mla	r2, r6, lr, r2
 8015ee2:	9300      	str	r3, [sp, #0]
 8015ee4:	9b00      	ldr	r3, [sp, #0]
 8015ee6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015eea:	b292      	uxth	r2, r2
 8015eec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015ef0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015ef4:	f8bd 3000 	ldrh.w	r3, [sp]
 8015ef8:	4581      	cmp	r9, r0
 8015efa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015efe:	f84c 3b04 	str.w	r3, [ip], #4
 8015f02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015f06:	d2db      	bcs.n	8015ec0 <quorem+0x42>
 8015f08:	f855 300b 	ldr.w	r3, [r5, fp]
 8015f0c:	b92b      	cbnz	r3, 8015f1a <quorem+0x9c>
 8015f0e:	9b01      	ldr	r3, [sp, #4]
 8015f10:	3b04      	subs	r3, #4
 8015f12:	429d      	cmp	r5, r3
 8015f14:	461a      	mov	r2, r3
 8015f16:	d32c      	bcc.n	8015f72 <quorem+0xf4>
 8015f18:	613c      	str	r4, [r7, #16]
 8015f1a:	4638      	mov	r0, r7
 8015f1c:	f001 f9a6 	bl	801726c <__mcmp>
 8015f20:	2800      	cmp	r0, #0
 8015f22:	db22      	blt.n	8015f6a <quorem+0xec>
 8015f24:	3601      	adds	r6, #1
 8015f26:	4629      	mov	r1, r5
 8015f28:	2000      	movs	r0, #0
 8015f2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8015f2e:	f8d1 c000 	ldr.w	ip, [r1]
 8015f32:	b293      	uxth	r3, r2
 8015f34:	1ac3      	subs	r3, r0, r3
 8015f36:	0c12      	lsrs	r2, r2, #16
 8015f38:	fa13 f38c 	uxtah	r3, r3, ip
 8015f3c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8015f40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015f44:	b29b      	uxth	r3, r3
 8015f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f4a:	45c1      	cmp	r9, r8
 8015f4c:	f841 3b04 	str.w	r3, [r1], #4
 8015f50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015f54:	d2e9      	bcs.n	8015f2a <quorem+0xac>
 8015f56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015f5e:	b922      	cbnz	r2, 8015f6a <quorem+0xec>
 8015f60:	3b04      	subs	r3, #4
 8015f62:	429d      	cmp	r5, r3
 8015f64:	461a      	mov	r2, r3
 8015f66:	d30a      	bcc.n	8015f7e <quorem+0x100>
 8015f68:	613c      	str	r4, [r7, #16]
 8015f6a:	4630      	mov	r0, r6
 8015f6c:	b003      	add	sp, #12
 8015f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f72:	6812      	ldr	r2, [r2, #0]
 8015f74:	3b04      	subs	r3, #4
 8015f76:	2a00      	cmp	r2, #0
 8015f78:	d1ce      	bne.n	8015f18 <quorem+0x9a>
 8015f7a:	3c01      	subs	r4, #1
 8015f7c:	e7c9      	b.n	8015f12 <quorem+0x94>
 8015f7e:	6812      	ldr	r2, [r2, #0]
 8015f80:	3b04      	subs	r3, #4
 8015f82:	2a00      	cmp	r2, #0
 8015f84:	d1f0      	bne.n	8015f68 <quorem+0xea>
 8015f86:	3c01      	subs	r4, #1
 8015f88:	e7eb      	b.n	8015f62 <quorem+0xe4>
 8015f8a:	2000      	movs	r0, #0
 8015f8c:	e7ee      	b.n	8015f6c <quorem+0xee>
	...

08015f90 <_dtoa_r>:
 8015f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f94:	ed2d 8b04 	vpush	{d8-d9}
 8015f98:	69c5      	ldr	r5, [r0, #28]
 8015f9a:	b093      	sub	sp, #76	; 0x4c
 8015f9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015fa0:	ec57 6b10 	vmov	r6, r7, d0
 8015fa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015fa8:	9107      	str	r1, [sp, #28]
 8015faa:	4604      	mov	r4, r0
 8015fac:	920a      	str	r2, [sp, #40]	; 0x28
 8015fae:	930d      	str	r3, [sp, #52]	; 0x34
 8015fb0:	b975      	cbnz	r5, 8015fd0 <_dtoa_r+0x40>
 8015fb2:	2010      	movs	r0, #16
 8015fb4:	f000 fe2a 	bl	8016c0c <malloc>
 8015fb8:	4602      	mov	r2, r0
 8015fba:	61e0      	str	r0, [r4, #28]
 8015fbc:	b920      	cbnz	r0, 8015fc8 <_dtoa_r+0x38>
 8015fbe:	4bae      	ldr	r3, [pc, #696]	; (8016278 <_dtoa_r+0x2e8>)
 8015fc0:	21ef      	movs	r1, #239	; 0xef
 8015fc2:	48ae      	ldr	r0, [pc, #696]	; (801627c <_dtoa_r+0x2ec>)
 8015fc4:	f001 fc82 	bl	80178cc <__assert_func>
 8015fc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015fcc:	6005      	str	r5, [r0, #0]
 8015fce:	60c5      	str	r5, [r0, #12]
 8015fd0:	69e3      	ldr	r3, [r4, #28]
 8015fd2:	6819      	ldr	r1, [r3, #0]
 8015fd4:	b151      	cbz	r1, 8015fec <_dtoa_r+0x5c>
 8015fd6:	685a      	ldr	r2, [r3, #4]
 8015fd8:	604a      	str	r2, [r1, #4]
 8015fda:	2301      	movs	r3, #1
 8015fdc:	4093      	lsls	r3, r2
 8015fde:	608b      	str	r3, [r1, #8]
 8015fe0:	4620      	mov	r0, r4
 8015fe2:	f000 ff07 	bl	8016df4 <_Bfree>
 8015fe6:	69e3      	ldr	r3, [r4, #28]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	601a      	str	r2, [r3, #0]
 8015fec:	1e3b      	subs	r3, r7, #0
 8015fee:	bfbb      	ittet	lt
 8015ff0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015ff4:	9303      	strlt	r3, [sp, #12]
 8015ff6:	2300      	movge	r3, #0
 8015ff8:	2201      	movlt	r2, #1
 8015ffa:	bfac      	ite	ge
 8015ffc:	f8c8 3000 	strge.w	r3, [r8]
 8016000:	f8c8 2000 	strlt.w	r2, [r8]
 8016004:	4b9e      	ldr	r3, [pc, #632]	; (8016280 <_dtoa_r+0x2f0>)
 8016006:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801600a:	ea33 0308 	bics.w	r3, r3, r8
 801600e:	d11b      	bne.n	8016048 <_dtoa_r+0xb8>
 8016010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016012:	f242 730f 	movw	r3, #9999	; 0x270f
 8016016:	6013      	str	r3, [r2, #0]
 8016018:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801601c:	4333      	orrs	r3, r6
 801601e:	f000 8593 	beq.w	8016b48 <_dtoa_r+0xbb8>
 8016022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016024:	b963      	cbnz	r3, 8016040 <_dtoa_r+0xb0>
 8016026:	4b97      	ldr	r3, [pc, #604]	; (8016284 <_dtoa_r+0x2f4>)
 8016028:	e027      	b.n	801607a <_dtoa_r+0xea>
 801602a:	4b97      	ldr	r3, [pc, #604]	; (8016288 <_dtoa_r+0x2f8>)
 801602c:	9300      	str	r3, [sp, #0]
 801602e:	3308      	adds	r3, #8
 8016030:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016032:	6013      	str	r3, [r2, #0]
 8016034:	9800      	ldr	r0, [sp, #0]
 8016036:	b013      	add	sp, #76	; 0x4c
 8016038:	ecbd 8b04 	vpop	{d8-d9}
 801603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016040:	4b90      	ldr	r3, [pc, #576]	; (8016284 <_dtoa_r+0x2f4>)
 8016042:	9300      	str	r3, [sp, #0]
 8016044:	3303      	adds	r3, #3
 8016046:	e7f3      	b.n	8016030 <_dtoa_r+0xa0>
 8016048:	ed9d 7b02 	vldr	d7, [sp, #8]
 801604c:	2200      	movs	r2, #0
 801604e:	ec51 0b17 	vmov	r0, r1, d7
 8016052:	eeb0 8a47 	vmov.f32	s16, s14
 8016056:	eef0 8a67 	vmov.f32	s17, s15
 801605a:	2300      	movs	r3, #0
 801605c:	f7ea fd64 	bl	8000b28 <__aeabi_dcmpeq>
 8016060:	4681      	mov	r9, r0
 8016062:	b160      	cbz	r0, 801607e <_dtoa_r+0xee>
 8016064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016066:	2301      	movs	r3, #1
 8016068:	6013      	str	r3, [r2, #0]
 801606a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801606c:	2b00      	cmp	r3, #0
 801606e:	f000 8568 	beq.w	8016b42 <_dtoa_r+0xbb2>
 8016072:	4b86      	ldr	r3, [pc, #536]	; (801628c <_dtoa_r+0x2fc>)
 8016074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016076:	6013      	str	r3, [r2, #0]
 8016078:	3b01      	subs	r3, #1
 801607a:	9300      	str	r3, [sp, #0]
 801607c:	e7da      	b.n	8016034 <_dtoa_r+0xa4>
 801607e:	aa10      	add	r2, sp, #64	; 0x40
 8016080:	a911      	add	r1, sp, #68	; 0x44
 8016082:	4620      	mov	r0, r4
 8016084:	eeb0 0a48 	vmov.f32	s0, s16
 8016088:	eef0 0a68 	vmov.f32	s1, s17
 801608c:	f001 f994 	bl	80173b8 <__d2b>
 8016090:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016094:	4682      	mov	sl, r0
 8016096:	2d00      	cmp	r5, #0
 8016098:	d07f      	beq.n	801619a <_dtoa_r+0x20a>
 801609a:	ee18 3a90 	vmov	r3, s17
 801609e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80160a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80160a6:	ec51 0b18 	vmov	r0, r1, d8
 80160aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80160ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80160b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80160b6:	4619      	mov	r1, r3
 80160b8:	2200      	movs	r2, #0
 80160ba:	4b75      	ldr	r3, [pc, #468]	; (8016290 <_dtoa_r+0x300>)
 80160bc:	f7ea f914 	bl	80002e8 <__aeabi_dsub>
 80160c0:	a367      	add	r3, pc, #412	; (adr r3, 8016260 <_dtoa_r+0x2d0>)
 80160c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c6:	f7ea fac7 	bl	8000658 <__aeabi_dmul>
 80160ca:	a367      	add	r3, pc, #412	; (adr r3, 8016268 <_dtoa_r+0x2d8>)
 80160cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d0:	f7ea f90c 	bl	80002ec <__adddf3>
 80160d4:	4606      	mov	r6, r0
 80160d6:	4628      	mov	r0, r5
 80160d8:	460f      	mov	r7, r1
 80160da:	f7ea fa53 	bl	8000584 <__aeabi_i2d>
 80160de:	a364      	add	r3, pc, #400	; (adr r3, 8016270 <_dtoa_r+0x2e0>)
 80160e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160e4:	f7ea fab8 	bl	8000658 <__aeabi_dmul>
 80160e8:	4602      	mov	r2, r0
 80160ea:	460b      	mov	r3, r1
 80160ec:	4630      	mov	r0, r6
 80160ee:	4639      	mov	r1, r7
 80160f0:	f7ea f8fc 	bl	80002ec <__adddf3>
 80160f4:	4606      	mov	r6, r0
 80160f6:	460f      	mov	r7, r1
 80160f8:	f7ea fd5e 	bl	8000bb8 <__aeabi_d2iz>
 80160fc:	2200      	movs	r2, #0
 80160fe:	4683      	mov	fp, r0
 8016100:	2300      	movs	r3, #0
 8016102:	4630      	mov	r0, r6
 8016104:	4639      	mov	r1, r7
 8016106:	f7ea fd19 	bl	8000b3c <__aeabi_dcmplt>
 801610a:	b148      	cbz	r0, 8016120 <_dtoa_r+0x190>
 801610c:	4658      	mov	r0, fp
 801610e:	f7ea fa39 	bl	8000584 <__aeabi_i2d>
 8016112:	4632      	mov	r2, r6
 8016114:	463b      	mov	r3, r7
 8016116:	f7ea fd07 	bl	8000b28 <__aeabi_dcmpeq>
 801611a:	b908      	cbnz	r0, 8016120 <_dtoa_r+0x190>
 801611c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016120:	f1bb 0f16 	cmp.w	fp, #22
 8016124:	d857      	bhi.n	80161d6 <_dtoa_r+0x246>
 8016126:	4b5b      	ldr	r3, [pc, #364]	; (8016294 <_dtoa_r+0x304>)
 8016128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016130:	ec51 0b18 	vmov	r0, r1, d8
 8016134:	f7ea fd02 	bl	8000b3c <__aeabi_dcmplt>
 8016138:	2800      	cmp	r0, #0
 801613a:	d04e      	beq.n	80161da <_dtoa_r+0x24a>
 801613c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016140:	2300      	movs	r3, #0
 8016142:	930c      	str	r3, [sp, #48]	; 0x30
 8016144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016146:	1b5b      	subs	r3, r3, r5
 8016148:	1e5a      	subs	r2, r3, #1
 801614a:	bf45      	ittet	mi
 801614c:	f1c3 0301 	rsbmi	r3, r3, #1
 8016150:	9305      	strmi	r3, [sp, #20]
 8016152:	2300      	movpl	r3, #0
 8016154:	2300      	movmi	r3, #0
 8016156:	9206      	str	r2, [sp, #24]
 8016158:	bf54      	ite	pl
 801615a:	9305      	strpl	r3, [sp, #20]
 801615c:	9306      	strmi	r3, [sp, #24]
 801615e:	f1bb 0f00 	cmp.w	fp, #0
 8016162:	db3c      	blt.n	80161de <_dtoa_r+0x24e>
 8016164:	9b06      	ldr	r3, [sp, #24]
 8016166:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801616a:	445b      	add	r3, fp
 801616c:	9306      	str	r3, [sp, #24]
 801616e:	2300      	movs	r3, #0
 8016170:	9308      	str	r3, [sp, #32]
 8016172:	9b07      	ldr	r3, [sp, #28]
 8016174:	2b09      	cmp	r3, #9
 8016176:	d868      	bhi.n	801624a <_dtoa_r+0x2ba>
 8016178:	2b05      	cmp	r3, #5
 801617a:	bfc4      	itt	gt
 801617c:	3b04      	subgt	r3, #4
 801617e:	9307      	strgt	r3, [sp, #28]
 8016180:	9b07      	ldr	r3, [sp, #28]
 8016182:	f1a3 0302 	sub.w	r3, r3, #2
 8016186:	bfcc      	ite	gt
 8016188:	2500      	movgt	r5, #0
 801618a:	2501      	movle	r5, #1
 801618c:	2b03      	cmp	r3, #3
 801618e:	f200 8085 	bhi.w	801629c <_dtoa_r+0x30c>
 8016192:	e8df f003 	tbb	[pc, r3]
 8016196:	3b2e      	.short	0x3b2e
 8016198:	5839      	.short	0x5839
 801619a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801619e:	441d      	add	r5, r3
 80161a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80161a4:	2b20      	cmp	r3, #32
 80161a6:	bfc1      	itttt	gt
 80161a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80161ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80161b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80161b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80161b8:	bfd6      	itet	le
 80161ba:	f1c3 0320 	rsble	r3, r3, #32
 80161be:	ea48 0003 	orrgt.w	r0, r8, r3
 80161c2:	fa06 f003 	lslle.w	r0, r6, r3
 80161c6:	f7ea f9cd 	bl	8000564 <__aeabi_ui2d>
 80161ca:	2201      	movs	r2, #1
 80161cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80161d0:	3d01      	subs	r5, #1
 80161d2:	920e      	str	r2, [sp, #56]	; 0x38
 80161d4:	e76f      	b.n	80160b6 <_dtoa_r+0x126>
 80161d6:	2301      	movs	r3, #1
 80161d8:	e7b3      	b.n	8016142 <_dtoa_r+0x1b2>
 80161da:	900c      	str	r0, [sp, #48]	; 0x30
 80161dc:	e7b2      	b.n	8016144 <_dtoa_r+0x1b4>
 80161de:	9b05      	ldr	r3, [sp, #20]
 80161e0:	eba3 030b 	sub.w	r3, r3, fp
 80161e4:	9305      	str	r3, [sp, #20]
 80161e6:	f1cb 0300 	rsb	r3, fp, #0
 80161ea:	9308      	str	r3, [sp, #32]
 80161ec:	2300      	movs	r3, #0
 80161ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80161f0:	e7bf      	b.n	8016172 <_dtoa_r+0x1e2>
 80161f2:	2300      	movs	r3, #0
 80161f4:	9309      	str	r3, [sp, #36]	; 0x24
 80161f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	dc52      	bgt.n	80162a2 <_dtoa_r+0x312>
 80161fc:	2301      	movs	r3, #1
 80161fe:	9301      	str	r3, [sp, #4]
 8016200:	9304      	str	r3, [sp, #16]
 8016202:	461a      	mov	r2, r3
 8016204:	920a      	str	r2, [sp, #40]	; 0x28
 8016206:	e00b      	b.n	8016220 <_dtoa_r+0x290>
 8016208:	2301      	movs	r3, #1
 801620a:	e7f3      	b.n	80161f4 <_dtoa_r+0x264>
 801620c:	2300      	movs	r3, #0
 801620e:	9309      	str	r3, [sp, #36]	; 0x24
 8016210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016212:	445b      	add	r3, fp
 8016214:	9301      	str	r3, [sp, #4]
 8016216:	3301      	adds	r3, #1
 8016218:	2b01      	cmp	r3, #1
 801621a:	9304      	str	r3, [sp, #16]
 801621c:	bfb8      	it	lt
 801621e:	2301      	movlt	r3, #1
 8016220:	69e0      	ldr	r0, [r4, #28]
 8016222:	2100      	movs	r1, #0
 8016224:	2204      	movs	r2, #4
 8016226:	f102 0614 	add.w	r6, r2, #20
 801622a:	429e      	cmp	r6, r3
 801622c:	d93d      	bls.n	80162aa <_dtoa_r+0x31a>
 801622e:	6041      	str	r1, [r0, #4]
 8016230:	4620      	mov	r0, r4
 8016232:	f000 fd9f 	bl	8016d74 <_Balloc>
 8016236:	9000      	str	r0, [sp, #0]
 8016238:	2800      	cmp	r0, #0
 801623a:	d139      	bne.n	80162b0 <_dtoa_r+0x320>
 801623c:	4b16      	ldr	r3, [pc, #88]	; (8016298 <_dtoa_r+0x308>)
 801623e:	4602      	mov	r2, r0
 8016240:	f240 11af 	movw	r1, #431	; 0x1af
 8016244:	e6bd      	b.n	8015fc2 <_dtoa_r+0x32>
 8016246:	2301      	movs	r3, #1
 8016248:	e7e1      	b.n	801620e <_dtoa_r+0x27e>
 801624a:	2501      	movs	r5, #1
 801624c:	2300      	movs	r3, #0
 801624e:	9307      	str	r3, [sp, #28]
 8016250:	9509      	str	r5, [sp, #36]	; 0x24
 8016252:	f04f 33ff 	mov.w	r3, #4294967295
 8016256:	9301      	str	r3, [sp, #4]
 8016258:	9304      	str	r3, [sp, #16]
 801625a:	2200      	movs	r2, #0
 801625c:	2312      	movs	r3, #18
 801625e:	e7d1      	b.n	8016204 <_dtoa_r+0x274>
 8016260:	636f4361 	.word	0x636f4361
 8016264:	3fd287a7 	.word	0x3fd287a7
 8016268:	8b60c8b3 	.word	0x8b60c8b3
 801626c:	3fc68a28 	.word	0x3fc68a28
 8016270:	509f79fb 	.word	0x509f79fb
 8016274:	3fd34413 	.word	0x3fd34413
 8016278:	08019ea6 	.word	0x08019ea6
 801627c:	08019ebd 	.word	0x08019ebd
 8016280:	7ff00000 	.word	0x7ff00000
 8016284:	08019ea2 	.word	0x08019ea2
 8016288:	08019e99 	.word	0x08019e99
 801628c:	08019e76 	.word	0x08019e76
 8016290:	3ff80000 	.word	0x3ff80000
 8016294:	08019fa8 	.word	0x08019fa8
 8016298:	08019f15 	.word	0x08019f15
 801629c:	2301      	movs	r3, #1
 801629e:	9309      	str	r3, [sp, #36]	; 0x24
 80162a0:	e7d7      	b.n	8016252 <_dtoa_r+0x2c2>
 80162a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162a4:	9301      	str	r3, [sp, #4]
 80162a6:	9304      	str	r3, [sp, #16]
 80162a8:	e7ba      	b.n	8016220 <_dtoa_r+0x290>
 80162aa:	3101      	adds	r1, #1
 80162ac:	0052      	lsls	r2, r2, #1
 80162ae:	e7ba      	b.n	8016226 <_dtoa_r+0x296>
 80162b0:	69e3      	ldr	r3, [r4, #28]
 80162b2:	9a00      	ldr	r2, [sp, #0]
 80162b4:	601a      	str	r2, [r3, #0]
 80162b6:	9b04      	ldr	r3, [sp, #16]
 80162b8:	2b0e      	cmp	r3, #14
 80162ba:	f200 80a8 	bhi.w	801640e <_dtoa_r+0x47e>
 80162be:	2d00      	cmp	r5, #0
 80162c0:	f000 80a5 	beq.w	801640e <_dtoa_r+0x47e>
 80162c4:	f1bb 0f00 	cmp.w	fp, #0
 80162c8:	dd38      	ble.n	801633c <_dtoa_r+0x3ac>
 80162ca:	4bc0      	ldr	r3, [pc, #768]	; (80165cc <_dtoa_r+0x63c>)
 80162cc:	f00b 020f 	and.w	r2, fp, #15
 80162d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80162d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80162d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80162dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80162e0:	d019      	beq.n	8016316 <_dtoa_r+0x386>
 80162e2:	4bbb      	ldr	r3, [pc, #748]	; (80165d0 <_dtoa_r+0x640>)
 80162e4:	ec51 0b18 	vmov	r0, r1, d8
 80162e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80162ec:	f7ea fade 	bl	80008ac <__aeabi_ddiv>
 80162f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80162f4:	f008 080f 	and.w	r8, r8, #15
 80162f8:	2503      	movs	r5, #3
 80162fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80165d0 <_dtoa_r+0x640>
 80162fe:	f1b8 0f00 	cmp.w	r8, #0
 8016302:	d10a      	bne.n	801631a <_dtoa_r+0x38a>
 8016304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016308:	4632      	mov	r2, r6
 801630a:	463b      	mov	r3, r7
 801630c:	f7ea face 	bl	80008ac <__aeabi_ddiv>
 8016310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016314:	e02b      	b.n	801636e <_dtoa_r+0x3de>
 8016316:	2502      	movs	r5, #2
 8016318:	e7ef      	b.n	80162fa <_dtoa_r+0x36a>
 801631a:	f018 0f01 	tst.w	r8, #1
 801631e:	d008      	beq.n	8016332 <_dtoa_r+0x3a2>
 8016320:	4630      	mov	r0, r6
 8016322:	4639      	mov	r1, r7
 8016324:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016328:	f7ea f996 	bl	8000658 <__aeabi_dmul>
 801632c:	3501      	adds	r5, #1
 801632e:	4606      	mov	r6, r0
 8016330:	460f      	mov	r7, r1
 8016332:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016336:	f109 0908 	add.w	r9, r9, #8
 801633a:	e7e0      	b.n	80162fe <_dtoa_r+0x36e>
 801633c:	f000 809f 	beq.w	801647e <_dtoa_r+0x4ee>
 8016340:	f1cb 0600 	rsb	r6, fp, #0
 8016344:	4ba1      	ldr	r3, [pc, #644]	; (80165cc <_dtoa_r+0x63c>)
 8016346:	4fa2      	ldr	r7, [pc, #648]	; (80165d0 <_dtoa_r+0x640>)
 8016348:	f006 020f 	and.w	r2, r6, #15
 801634c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016354:	ec51 0b18 	vmov	r0, r1, d8
 8016358:	f7ea f97e 	bl	8000658 <__aeabi_dmul>
 801635c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016360:	1136      	asrs	r6, r6, #4
 8016362:	2300      	movs	r3, #0
 8016364:	2502      	movs	r5, #2
 8016366:	2e00      	cmp	r6, #0
 8016368:	d17e      	bne.n	8016468 <_dtoa_r+0x4d8>
 801636a:	2b00      	cmp	r3, #0
 801636c:	d1d0      	bne.n	8016310 <_dtoa_r+0x380>
 801636e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016370:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016374:	2b00      	cmp	r3, #0
 8016376:	f000 8084 	beq.w	8016482 <_dtoa_r+0x4f2>
 801637a:	4b96      	ldr	r3, [pc, #600]	; (80165d4 <_dtoa_r+0x644>)
 801637c:	2200      	movs	r2, #0
 801637e:	4640      	mov	r0, r8
 8016380:	4649      	mov	r1, r9
 8016382:	f7ea fbdb 	bl	8000b3c <__aeabi_dcmplt>
 8016386:	2800      	cmp	r0, #0
 8016388:	d07b      	beq.n	8016482 <_dtoa_r+0x4f2>
 801638a:	9b04      	ldr	r3, [sp, #16]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d078      	beq.n	8016482 <_dtoa_r+0x4f2>
 8016390:	9b01      	ldr	r3, [sp, #4]
 8016392:	2b00      	cmp	r3, #0
 8016394:	dd39      	ble.n	801640a <_dtoa_r+0x47a>
 8016396:	4b90      	ldr	r3, [pc, #576]	; (80165d8 <_dtoa_r+0x648>)
 8016398:	2200      	movs	r2, #0
 801639a:	4640      	mov	r0, r8
 801639c:	4649      	mov	r1, r9
 801639e:	f7ea f95b 	bl	8000658 <__aeabi_dmul>
 80163a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80163a6:	9e01      	ldr	r6, [sp, #4]
 80163a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80163ac:	3501      	adds	r5, #1
 80163ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80163b2:	4628      	mov	r0, r5
 80163b4:	f7ea f8e6 	bl	8000584 <__aeabi_i2d>
 80163b8:	4642      	mov	r2, r8
 80163ba:	464b      	mov	r3, r9
 80163bc:	f7ea f94c 	bl	8000658 <__aeabi_dmul>
 80163c0:	4b86      	ldr	r3, [pc, #536]	; (80165dc <_dtoa_r+0x64c>)
 80163c2:	2200      	movs	r2, #0
 80163c4:	f7e9 ff92 	bl	80002ec <__adddf3>
 80163c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80163cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80163d0:	9303      	str	r3, [sp, #12]
 80163d2:	2e00      	cmp	r6, #0
 80163d4:	d158      	bne.n	8016488 <_dtoa_r+0x4f8>
 80163d6:	4b82      	ldr	r3, [pc, #520]	; (80165e0 <_dtoa_r+0x650>)
 80163d8:	2200      	movs	r2, #0
 80163da:	4640      	mov	r0, r8
 80163dc:	4649      	mov	r1, r9
 80163de:	f7e9 ff83 	bl	80002e8 <__aeabi_dsub>
 80163e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80163e6:	4680      	mov	r8, r0
 80163e8:	4689      	mov	r9, r1
 80163ea:	f7ea fbc5 	bl	8000b78 <__aeabi_dcmpgt>
 80163ee:	2800      	cmp	r0, #0
 80163f0:	f040 8296 	bne.w	8016920 <_dtoa_r+0x990>
 80163f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80163f8:	4640      	mov	r0, r8
 80163fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80163fe:	4649      	mov	r1, r9
 8016400:	f7ea fb9c 	bl	8000b3c <__aeabi_dcmplt>
 8016404:	2800      	cmp	r0, #0
 8016406:	f040 8289 	bne.w	801691c <_dtoa_r+0x98c>
 801640a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801640e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016410:	2b00      	cmp	r3, #0
 8016412:	f2c0 814e 	blt.w	80166b2 <_dtoa_r+0x722>
 8016416:	f1bb 0f0e 	cmp.w	fp, #14
 801641a:	f300 814a 	bgt.w	80166b2 <_dtoa_r+0x722>
 801641e:	4b6b      	ldr	r3, [pc, #428]	; (80165cc <_dtoa_r+0x63c>)
 8016420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016424:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801642a:	2b00      	cmp	r3, #0
 801642c:	f280 80dc 	bge.w	80165e8 <_dtoa_r+0x658>
 8016430:	9b04      	ldr	r3, [sp, #16]
 8016432:	2b00      	cmp	r3, #0
 8016434:	f300 80d8 	bgt.w	80165e8 <_dtoa_r+0x658>
 8016438:	f040 826f 	bne.w	801691a <_dtoa_r+0x98a>
 801643c:	4b68      	ldr	r3, [pc, #416]	; (80165e0 <_dtoa_r+0x650>)
 801643e:	2200      	movs	r2, #0
 8016440:	4640      	mov	r0, r8
 8016442:	4649      	mov	r1, r9
 8016444:	f7ea f908 	bl	8000658 <__aeabi_dmul>
 8016448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801644c:	f7ea fb8a 	bl	8000b64 <__aeabi_dcmpge>
 8016450:	9e04      	ldr	r6, [sp, #16]
 8016452:	4637      	mov	r7, r6
 8016454:	2800      	cmp	r0, #0
 8016456:	f040 8245 	bne.w	80168e4 <_dtoa_r+0x954>
 801645a:	9d00      	ldr	r5, [sp, #0]
 801645c:	2331      	movs	r3, #49	; 0x31
 801645e:	f805 3b01 	strb.w	r3, [r5], #1
 8016462:	f10b 0b01 	add.w	fp, fp, #1
 8016466:	e241      	b.n	80168ec <_dtoa_r+0x95c>
 8016468:	07f2      	lsls	r2, r6, #31
 801646a:	d505      	bpl.n	8016478 <_dtoa_r+0x4e8>
 801646c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016470:	f7ea f8f2 	bl	8000658 <__aeabi_dmul>
 8016474:	3501      	adds	r5, #1
 8016476:	2301      	movs	r3, #1
 8016478:	1076      	asrs	r6, r6, #1
 801647a:	3708      	adds	r7, #8
 801647c:	e773      	b.n	8016366 <_dtoa_r+0x3d6>
 801647e:	2502      	movs	r5, #2
 8016480:	e775      	b.n	801636e <_dtoa_r+0x3de>
 8016482:	9e04      	ldr	r6, [sp, #16]
 8016484:	465f      	mov	r7, fp
 8016486:	e792      	b.n	80163ae <_dtoa_r+0x41e>
 8016488:	9900      	ldr	r1, [sp, #0]
 801648a:	4b50      	ldr	r3, [pc, #320]	; (80165cc <_dtoa_r+0x63c>)
 801648c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016490:	4431      	add	r1, r6
 8016492:	9102      	str	r1, [sp, #8]
 8016494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016496:	eeb0 9a47 	vmov.f32	s18, s14
 801649a:	eef0 9a67 	vmov.f32	s19, s15
 801649e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80164a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80164a6:	2900      	cmp	r1, #0
 80164a8:	d044      	beq.n	8016534 <_dtoa_r+0x5a4>
 80164aa:	494e      	ldr	r1, [pc, #312]	; (80165e4 <_dtoa_r+0x654>)
 80164ac:	2000      	movs	r0, #0
 80164ae:	f7ea f9fd 	bl	80008ac <__aeabi_ddiv>
 80164b2:	ec53 2b19 	vmov	r2, r3, d9
 80164b6:	f7e9 ff17 	bl	80002e8 <__aeabi_dsub>
 80164ba:	9d00      	ldr	r5, [sp, #0]
 80164bc:	ec41 0b19 	vmov	d9, r0, r1
 80164c0:	4649      	mov	r1, r9
 80164c2:	4640      	mov	r0, r8
 80164c4:	f7ea fb78 	bl	8000bb8 <__aeabi_d2iz>
 80164c8:	4606      	mov	r6, r0
 80164ca:	f7ea f85b 	bl	8000584 <__aeabi_i2d>
 80164ce:	4602      	mov	r2, r0
 80164d0:	460b      	mov	r3, r1
 80164d2:	4640      	mov	r0, r8
 80164d4:	4649      	mov	r1, r9
 80164d6:	f7e9 ff07 	bl	80002e8 <__aeabi_dsub>
 80164da:	3630      	adds	r6, #48	; 0x30
 80164dc:	f805 6b01 	strb.w	r6, [r5], #1
 80164e0:	ec53 2b19 	vmov	r2, r3, d9
 80164e4:	4680      	mov	r8, r0
 80164e6:	4689      	mov	r9, r1
 80164e8:	f7ea fb28 	bl	8000b3c <__aeabi_dcmplt>
 80164ec:	2800      	cmp	r0, #0
 80164ee:	d164      	bne.n	80165ba <_dtoa_r+0x62a>
 80164f0:	4642      	mov	r2, r8
 80164f2:	464b      	mov	r3, r9
 80164f4:	4937      	ldr	r1, [pc, #220]	; (80165d4 <_dtoa_r+0x644>)
 80164f6:	2000      	movs	r0, #0
 80164f8:	f7e9 fef6 	bl	80002e8 <__aeabi_dsub>
 80164fc:	ec53 2b19 	vmov	r2, r3, d9
 8016500:	f7ea fb1c 	bl	8000b3c <__aeabi_dcmplt>
 8016504:	2800      	cmp	r0, #0
 8016506:	f040 80b6 	bne.w	8016676 <_dtoa_r+0x6e6>
 801650a:	9b02      	ldr	r3, [sp, #8]
 801650c:	429d      	cmp	r5, r3
 801650e:	f43f af7c 	beq.w	801640a <_dtoa_r+0x47a>
 8016512:	4b31      	ldr	r3, [pc, #196]	; (80165d8 <_dtoa_r+0x648>)
 8016514:	ec51 0b19 	vmov	r0, r1, d9
 8016518:	2200      	movs	r2, #0
 801651a:	f7ea f89d 	bl	8000658 <__aeabi_dmul>
 801651e:	4b2e      	ldr	r3, [pc, #184]	; (80165d8 <_dtoa_r+0x648>)
 8016520:	ec41 0b19 	vmov	d9, r0, r1
 8016524:	2200      	movs	r2, #0
 8016526:	4640      	mov	r0, r8
 8016528:	4649      	mov	r1, r9
 801652a:	f7ea f895 	bl	8000658 <__aeabi_dmul>
 801652e:	4680      	mov	r8, r0
 8016530:	4689      	mov	r9, r1
 8016532:	e7c5      	b.n	80164c0 <_dtoa_r+0x530>
 8016534:	ec51 0b17 	vmov	r0, r1, d7
 8016538:	f7ea f88e 	bl	8000658 <__aeabi_dmul>
 801653c:	9b02      	ldr	r3, [sp, #8]
 801653e:	9d00      	ldr	r5, [sp, #0]
 8016540:	930f      	str	r3, [sp, #60]	; 0x3c
 8016542:	ec41 0b19 	vmov	d9, r0, r1
 8016546:	4649      	mov	r1, r9
 8016548:	4640      	mov	r0, r8
 801654a:	f7ea fb35 	bl	8000bb8 <__aeabi_d2iz>
 801654e:	4606      	mov	r6, r0
 8016550:	f7ea f818 	bl	8000584 <__aeabi_i2d>
 8016554:	3630      	adds	r6, #48	; 0x30
 8016556:	4602      	mov	r2, r0
 8016558:	460b      	mov	r3, r1
 801655a:	4640      	mov	r0, r8
 801655c:	4649      	mov	r1, r9
 801655e:	f7e9 fec3 	bl	80002e8 <__aeabi_dsub>
 8016562:	f805 6b01 	strb.w	r6, [r5], #1
 8016566:	9b02      	ldr	r3, [sp, #8]
 8016568:	429d      	cmp	r5, r3
 801656a:	4680      	mov	r8, r0
 801656c:	4689      	mov	r9, r1
 801656e:	f04f 0200 	mov.w	r2, #0
 8016572:	d124      	bne.n	80165be <_dtoa_r+0x62e>
 8016574:	4b1b      	ldr	r3, [pc, #108]	; (80165e4 <_dtoa_r+0x654>)
 8016576:	ec51 0b19 	vmov	r0, r1, d9
 801657a:	f7e9 feb7 	bl	80002ec <__adddf3>
 801657e:	4602      	mov	r2, r0
 8016580:	460b      	mov	r3, r1
 8016582:	4640      	mov	r0, r8
 8016584:	4649      	mov	r1, r9
 8016586:	f7ea faf7 	bl	8000b78 <__aeabi_dcmpgt>
 801658a:	2800      	cmp	r0, #0
 801658c:	d173      	bne.n	8016676 <_dtoa_r+0x6e6>
 801658e:	ec53 2b19 	vmov	r2, r3, d9
 8016592:	4914      	ldr	r1, [pc, #80]	; (80165e4 <_dtoa_r+0x654>)
 8016594:	2000      	movs	r0, #0
 8016596:	f7e9 fea7 	bl	80002e8 <__aeabi_dsub>
 801659a:	4602      	mov	r2, r0
 801659c:	460b      	mov	r3, r1
 801659e:	4640      	mov	r0, r8
 80165a0:	4649      	mov	r1, r9
 80165a2:	f7ea facb 	bl	8000b3c <__aeabi_dcmplt>
 80165a6:	2800      	cmp	r0, #0
 80165a8:	f43f af2f 	beq.w	801640a <_dtoa_r+0x47a>
 80165ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80165ae:	1e6b      	subs	r3, r5, #1
 80165b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80165b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80165b6:	2b30      	cmp	r3, #48	; 0x30
 80165b8:	d0f8      	beq.n	80165ac <_dtoa_r+0x61c>
 80165ba:	46bb      	mov	fp, r7
 80165bc:	e04a      	b.n	8016654 <_dtoa_r+0x6c4>
 80165be:	4b06      	ldr	r3, [pc, #24]	; (80165d8 <_dtoa_r+0x648>)
 80165c0:	f7ea f84a 	bl	8000658 <__aeabi_dmul>
 80165c4:	4680      	mov	r8, r0
 80165c6:	4689      	mov	r9, r1
 80165c8:	e7bd      	b.n	8016546 <_dtoa_r+0x5b6>
 80165ca:	bf00      	nop
 80165cc:	08019fa8 	.word	0x08019fa8
 80165d0:	08019f80 	.word	0x08019f80
 80165d4:	3ff00000 	.word	0x3ff00000
 80165d8:	40240000 	.word	0x40240000
 80165dc:	401c0000 	.word	0x401c0000
 80165e0:	40140000 	.word	0x40140000
 80165e4:	3fe00000 	.word	0x3fe00000
 80165e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80165ec:	9d00      	ldr	r5, [sp, #0]
 80165ee:	4642      	mov	r2, r8
 80165f0:	464b      	mov	r3, r9
 80165f2:	4630      	mov	r0, r6
 80165f4:	4639      	mov	r1, r7
 80165f6:	f7ea f959 	bl	80008ac <__aeabi_ddiv>
 80165fa:	f7ea fadd 	bl	8000bb8 <__aeabi_d2iz>
 80165fe:	9001      	str	r0, [sp, #4]
 8016600:	f7e9 ffc0 	bl	8000584 <__aeabi_i2d>
 8016604:	4642      	mov	r2, r8
 8016606:	464b      	mov	r3, r9
 8016608:	f7ea f826 	bl	8000658 <__aeabi_dmul>
 801660c:	4602      	mov	r2, r0
 801660e:	460b      	mov	r3, r1
 8016610:	4630      	mov	r0, r6
 8016612:	4639      	mov	r1, r7
 8016614:	f7e9 fe68 	bl	80002e8 <__aeabi_dsub>
 8016618:	9e01      	ldr	r6, [sp, #4]
 801661a:	9f04      	ldr	r7, [sp, #16]
 801661c:	3630      	adds	r6, #48	; 0x30
 801661e:	f805 6b01 	strb.w	r6, [r5], #1
 8016622:	9e00      	ldr	r6, [sp, #0]
 8016624:	1bae      	subs	r6, r5, r6
 8016626:	42b7      	cmp	r7, r6
 8016628:	4602      	mov	r2, r0
 801662a:	460b      	mov	r3, r1
 801662c:	d134      	bne.n	8016698 <_dtoa_r+0x708>
 801662e:	f7e9 fe5d 	bl	80002ec <__adddf3>
 8016632:	4642      	mov	r2, r8
 8016634:	464b      	mov	r3, r9
 8016636:	4606      	mov	r6, r0
 8016638:	460f      	mov	r7, r1
 801663a:	f7ea fa9d 	bl	8000b78 <__aeabi_dcmpgt>
 801663e:	b9c8      	cbnz	r0, 8016674 <_dtoa_r+0x6e4>
 8016640:	4642      	mov	r2, r8
 8016642:	464b      	mov	r3, r9
 8016644:	4630      	mov	r0, r6
 8016646:	4639      	mov	r1, r7
 8016648:	f7ea fa6e 	bl	8000b28 <__aeabi_dcmpeq>
 801664c:	b110      	cbz	r0, 8016654 <_dtoa_r+0x6c4>
 801664e:	9b01      	ldr	r3, [sp, #4]
 8016650:	07db      	lsls	r3, r3, #31
 8016652:	d40f      	bmi.n	8016674 <_dtoa_r+0x6e4>
 8016654:	4651      	mov	r1, sl
 8016656:	4620      	mov	r0, r4
 8016658:	f000 fbcc 	bl	8016df4 <_Bfree>
 801665c:	2300      	movs	r3, #0
 801665e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016660:	702b      	strb	r3, [r5, #0]
 8016662:	f10b 0301 	add.w	r3, fp, #1
 8016666:	6013      	str	r3, [r2, #0]
 8016668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801666a:	2b00      	cmp	r3, #0
 801666c:	f43f ace2 	beq.w	8016034 <_dtoa_r+0xa4>
 8016670:	601d      	str	r5, [r3, #0]
 8016672:	e4df      	b.n	8016034 <_dtoa_r+0xa4>
 8016674:	465f      	mov	r7, fp
 8016676:	462b      	mov	r3, r5
 8016678:	461d      	mov	r5, r3
 801667a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801667e:	2a39      	cmp	r2, #57	; 0x39
 8016680:	d106      	bne.n	8016690 <_dtoa_r+0x700>
 8016682:	9a00      	ldr	r2, [sp, #0]
 8016684:	429a      	cmp	r2, r3
 8016686:	d1f7      	bne.n	8016678 <_dtoa_r+0x6e8>
 8016688:	9900      	ldr	r1, [sp, #0]
 801668a:	2230      	movs	r2, #48	; 0x30
 801668c:	3701      	adds	r7, #1
 801668e:	700a      	strb	r2, [r1, #0]
 8016690:	781a      	ldrb	r2, [r3, #0]
 8016692:	3201      	adds	r2, #1
 8016694:	701a      	strb	r2, [r3, #0]
 8016696:	e790      	b.n	80165ba <_dtoa_r+0x62a>
 8016698:	4ba3      	ldr	r3, [pc, #652]	; (8016928 <_dtoa_r+0x998>)
 801669a:	2200      	movs	r2, #0
 801669c:	f7e9 ffdc 	bl	8000658 <__aeabi_dmul>
 80166a0:	2200      	movs	r2, #0
 80166a2:	2300      	movs	r3, #0
 80166a4:	4606      	mov	r6, r0
 80166a6:	460f      	mov	r7, r1
 80166a8:	f7ea fa3e 	bl	8000b28 <__aeabi_dcmpeq>
 80166ac:	2800      	cmp	r0, #0
 80166ae:	d09e      	beq.n	80165ee <_dtoa_r+0x65e>
 80166b0:	e7d0      	b.n	8016654 <_dtoa_r+0x6c4>
 80166b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166b4:	2a00      	cmp	r2, #0
 80166b6:	f000 80ca 	beq.w	801684e <_dtoa_r+0x8be>
 80166ba:	9a07      	ldr	r2, [sp, #28]
 80166bc:	2a01      	cmp	r2, #1
 80166be:	f300 80ad 	bgt.w	801681c <_dtoa_r+0x88c>
 80166c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80166c4:	2a00      	cmp	r2, #0
 80166c6:	f000 80a5 	beq.w	8016814 <_dtoa_r+0x884>
 80166ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80166ce:	9e08      	ldr	r6, [sp, #32]
 80166d0:	9d05      	ldr	r5, [sp, #20]
 80166d2:	9a05      	ldr	r2, [sp, #20]
 80166d4:	441a      	add	r2, r3
 80166d6:	9205      	str	r2, [sp, #20]
 80166d8:	9a06      	ldr	r2, [sp, #24]
 80166da:	2101      	movs	r1, #1
 80166dc:	441a      	add	r2, r3
 80166de:	4620      	mov	r0, r4
 80166e0:	9206      	str	r2, [sp, #24]
 80166e2:	f000 fc3d 	bl	8016f60 <__i2b>
 80166e6:	4607      	mov	r7, r0
 80166e8:	b165      	cbz	r5, 8016704 <_dtoa_r+0x774>
 80166ea:	9b06      	ldr	r3, [sp, #24]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	dd09      	ble.n	8016704 <_dtoa_r+0x774>
 80166f0:	42ab      	cmp	r3, r5
 80166f2:	9a05      	ldr	r2, [sp, #20]
 80166f4:	bfa8      	it	ge
 80166f6:	462b      	movge	r3, r5
 80166f8:	1ad2      	subs	r2, r2, r3
 80166fa:	9205      	str	r2, [sp, #20]
 80166fc:	9a06      	ldr	r2, [sp, #24]
 80166fe:	1aed      	subs	r5, r5, r3
 8016700:	1ad3      	subs	r3, r2, r3
 8016702:	9306      	str	r3, [sp, #24]
 8016704:	9b08      	ldr	r3, [sp, #32]
 8016706:	b1f3      	cbz	r3, 8016746 <_dtoa_r+0x7b6>
 8016708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801670a:	2b00      	cmp	r3, #0
 801670c:	f000 80a3 	beq.w	8016856 <_dtoa_r+0x8c6>
 8016710:	2e00      	cmp	r6, #0
 8016712:	dd10      	ble.n	8016736 <_dtoa_r+0x7a6>
 8016714:	4639      	mov	r1, r7
 8016716:	4632      	mov	r2, r6
 8016718:	4620      	mov	r0, r4
 801671a:	f000 fce1 	bl	80170e0 <__pow5mult>
 801671e:	4652      	mov	r2, sl
 8016720:	4601      	mov	r1, r0
 8016722:	4607      	mov	r7, r0
 8016724:	4620      	mov	r0, r4
 8016726:	f000 fc31 	bl	8016f8c <__multiply>
 801672a:	4651      	mov	r1, sl
 801672c:	4680      	mov	r8, r0
 801672e:	4620      	mov	r0, r4
 8016730:	f000 fb60 	bl	8016df4 <_Bfree>
 8016734:	46c2      	mov	sl, r8
 8016736:	9b08      	ldr	r3, [sp, #32]
 8016738:	1b9a      	subs	r2, r3, r6
 801673a:	d004      	beq.n	8016746 <_dtoa_r+0x7b6>
 801673c:	4651      	mov	r1, sl
 801673e:	4620      	mov	r0, r4
 8016740:	f000 fcce 	bl	80170e0 <__pow5mult>
 8016744:	4682      	mov	sl, r0
 8016746:	2101      	movs	r1, #1
 8016748:	4620      	mov	r0, r4
 801674a:	f000 fc09 	bl	8016f60 <__i2b>
 801674e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016750:	2b00      	cmp	r3, #0
 8016752:	4606      	mov	r6, r0
 8016754:	f340 8081 	ble.w	801685a <_dtoa_r+0x8ca>
 8016758:	461a      	mov	r2, r3
 801675a:	4601      	mov	r1, r0
 801675c:	4620      	mov	r0, r4
 801675e:	f000 fcbf 	bl	80170e0 <__pow5mult>
 8016762:	9b07      	ldr	r3, [sp, #28]
 8016764:	2b01      	cmp	r3, #1
 8016766:	4606      	mov	r6, r0
 8016768:	dd7a      	ble.n	8016860 <_dtoa_r+0x8d0>
 801676a:	f04f 0800 	mov.w	r8, #0
 801676e:	6933      	ldr	r3, [r6, #16]
 8016770:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016774:	6918      	ldr	r0, [r3, #16]
 8016776:	f000 fba5 	bl	8016ec4 <__hi0bits>
 801677a:	f1c0 0020 	rsb	r0, r0, #32
 801677e:	9b06      	ldr	r3, [sp, #24]
 8016780:	4418      	add	r0, r3
 8016782:	f010 001f 	ands.w	r0, r0, #31
 8016786:	f000 8094 	beq.w	80168b2 <_dtoa_r+0x922>
 801678a:	f1c0 0320 	rsb	r3, r0, #32
 801678e:	2b04      	cmp	r3, #4
 8016790:	f340 8085 	ble.w	801689e <_dtoa_r+0x90e>
 8016794:	9b05      	ldr	r3, [sp, #20]
 8016796:	f1c0 001c 	rsb	r0, r0, #28
 801679a:	4403      	add	r3, r0
 801679c:	9305      	str	r3, [sp, #20]
 801679e:	9b06      	ldr	r3, [sp, #24]
 80167a0:	4403      	add	r3, r0
 80167a2:	4405      	add	r5, r0
 80167a4:	9306      	str	r3, [sp, #24]
 80167a6:	9b05      	ldr	r3, [sp, #20]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	dd05      	ble.n	80167b8 <_dtoa_r+0x828>
 80167ac:	4651      	mov	r1, sl
 80167ae:	461a      	mov	r2, r3
 80167b0:	4620      	mov	r0, r4
 80167b2:	f000 fcef 	bl	8017194 <__lshift>
 80167b6:	4682      	mov	sl, r0
 80167b8:	9b06      	ldr	r3, [sp, #24]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	dd05      	ble.n	80167ca <_dtoa_r+0x83a>
 80167be:	4631      	mov	r1, r6
 80167c0:	461a      	mov	r2, r3
 80167c2:	4620      	mov	r0, r4
 80167c4:	f000 fce6 	bl	8017194 <__lshift>
 80167c8:	4606      	mov	r6, r0
 80167ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d072      	beq.n	80168b6 <_dtoa_r+0x926>
 80167d0:	4631      	mov	r1, r6
 80167d2:	4650      	mov	r0, sl
 80167d4:	f000 fd4a 	bl	801726c <__mcmp>
 80167d8:	2800      	cmp	r0, #0
 80167da:	da6c      	bge.n	80168b6 <_dtoa_r+0x926>
 80167dc:	2300      	movs	r3, #0
 80167de:	4651      	mov	r1, sl
 80167e0:	220a      	movs	r2, #10
 80167e2:	4620      	mov	r0, r4
 80167e4:	f000 fb28 	bl	8016e38 <__multadd>
 80167e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80167ee:	4682      	mov	sl, r0
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	f000 81b0 	beq.w	8016b56 <_dtoa_r+0xbc6>
 80167f6:	2300      	movs	r3, #0
 80167f8:	4639      	mov	r1, r7
 80167fa:	220a      	movs	r2, #10
 80167fc:	4620      	mov	r0, r4
 80167fe:	f000 fb1b 	bl	8016e38 <__multadd>
 8016802:	9b01      	ldr	r3, [sp, #4]
 8016804:	2b00      	cmp	r3, #0
 8016806:	4607      	mov	r7, r0
 8016808:	f300 8096 	bgt.w	8016938 <_dtoa_r+0x9a8>
 801680c:	9b07      	ldr	r3, [sp, #28]
 801680e:	2b02      	cmp	r3, #2
 8016810:	dc59      	bgt.n	80168c6 <_dtoa_r+0x936>
 8016812:	e091      	b.n	8016938 <_dtoa_r+0x9a8>
 8016814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801681a:	e758      	b.n	80166ce <_dtoa_r+0x73e>
 801681c:	9b04      	ldr	r3, [sp, #16]
 801681e:	1e5e      	subs	r6, r3, #1
 8016820:	9b08      	ldr	r3, [sp, #32]
 8016822:	42b3      	cmp	r3, r6
 8016824:	bfbf      	itttt	lt
 8016826:	9b08      	ldrlt	r3, [sp, #32]
 8016828:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801682a:	9608      	strlt	r6, [sp, #32]
 801682c:	1af3      	sublt	r3, r6, r3
 801682e:	bfb4      	ite	lt
 8016830:	18d2      	addlt	r2, r2, r3
 8016832:	1b9e      	subge	r6, r3, r6
 8016834:	9b04      	ldr	r3, [sp, #16]
 8016836:	bfbc      	itt	lt
 8016838:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801683a:	2600      	movlt	r6, #0
 801683c:	2b00      	cmp	r3, #0
 801683e:	bfb7      	itett	lt
 8016840:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8016844:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8016848:	1a9d      	sublt	r5, r3, r2
 801684a:	2300      	movlt	r3, #0
 801684c:	e741      	b.n	80166d2 <_dtoa_r+0x742>
 801684e:	9e08      	ldr	r6, [sp, #32]
 8016850:	9d05      	ldr	r5, [sp, #20]
 8016852:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016854:	e748      	b.n	80166e8 <_dtoa_r+0x758>
 8016856:	9a08      	ldr	r2, [sp, #32]
 8016858:	e770      	b.n	801673c <_dtoa_r+0x7ac>
 801685a:	9b07      	ldr	r3, [sp, #28]
 801685c:	2b01      	cmp	r3, #1
 801685e:	dc19      	bgt.n	8016894 <_dtoa_r+0x904>
 8016860:	9b02      	ldr	r3, [sp, #8]
 8016862:	b9bb      	cbnz	r3, 8016894 <_dtoa_r+0x904>
 8016864:	9b03      	ldr	r3, [sp, #12]
 8016866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801686a:	b99b      	cbnz	r3, 8016894 <_dtoa_r+0x904>
 801686c:	9b03      	ldr	r3, [sp, #12]
 801686e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016872:	0d1b      	lsrs	r3, r3, #20
 8016874:	051b      	lsls	r3, r3, #20
 8016876:	b183      	cbz	r3, 801689a <_dtoa_r+0x90a>
 8016878:	9b05      	ldr	r3, [sp, #20]
 801687a:	3301      	adds	r3, #1
 801687c:	9305      	str	r3, [sp, #20]
 801687e:	9b06      	ldr	r3, [sp, #24]
 8016880:	3301      	adds	r3, #1
 8016882:	9306      	str	r3, [sp, #24]
 8016884:	f04f 0801 	mov.w	r8, #1
 8016888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801688a:	2b00      	cmp	r3, #0
 801688c:	f47f af6f 	bne.w	801676e <_dtoa_r+0x7de>
 8016890:	2001      	movs	r0, #1
 8016892:	e774      	b.n	801677e <_dtoa_r+0x7ee>
 8016894:	f04f 0800 	mov.w	r8, #0
 8016898:	e7f6      	b.n	8016888 <_dtoa_r+0x8f8>
 801689a:	4698      	mov	r8, r3
 801689c:	e7f4      	b.n	8016888 <_dtoa_r+0x8f8>
 801689e:	d082      	beq.n	80167a6 <_dtoa_r+0x816>
 80168a0:	9a05      	ldr	r2, [sp, #20]
 80168a2:	331c      	adds	r3, #28
 80168a4:	441a      	add	r2, r3
 80168a6:	9205      	str	r2, [sp, #20]
 80168a8:	9a06      	ldr	r2, [sp, #24]
 80168aa:	441a      	add	r2, r3
 80168ac:	441d      	add	r5, r3
 80168ae:	9206      	str	r2, [sp, #24]
 80168b0:	e779      	b.n	80167a6 <_dtoa_r+0x816>
 80168b2:	4603      	mov	r3, r0
 80168b4:	e7f4      	b.n	80168a0 <_dtoa_r+0x910>
 80168b6:	9b04      	ldr	r3, [sp, #16]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	dc37      	bgt.n	801692c <_dtoa_r+0x99c>
 80168bc:	9b07      	ldr	r3, [sp, #28]
 80168be:	2b02      	cmp	r3, #2
 80168c0:	dd34      	ble.n	801692c <_dtoa_r+0x99c>
 80168c2:	9b04      	ldr	r3, [sp, #16]
 80168c4:	9301      	str	r3, [sp, #4]
 80168c6:	9b01      	ldr	r3, [sp, #4]
 80168c8:	b963      	cbnz	r3, 80168e4 <_dtoa_r+0x954>
 80168ca:	4631      	mov	r1, r6
 80168cc:	2205      	movs	r2, #5
 80168ce:	4620      	mov	r0, r4
 80168d0:	f000 fab2 	bl	8016e38 <__multadd>
 80168d4:	4601      	mov	r1, r0
 80168d6:	4606      	mov	r6, r0
 80168d8:	4650      	mov	r0, sl
 80168da:	f000 fcc7 	bl	801726c <__mcmp>
 80168de:	2800      	cmp	r0, #0
 80168e0:	f73f adbb 	bgt.w	801645a <_dtoa_r+0x4ca>
 80168e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168e6:	9d00      	ldr	r5, [sp, #0]
 80168e8:	ea6f 0b03 	mvn.w	fp, r3
 80168ec:	f04f 0800 	mov.w	r8, #0
 80168f0:	4631      	mov	r1, r6
 80168f2:	4620      	mov	r0, r4
 80168f4:	f000 fa7e 	bl	8016df4 <_Bfree>
 80168f8:	2f00      	cmp	r7, #0
 80168fa:	f43f aeab 	beq.w	8016654 <_dtoa_r+0x6c4>
 80168fe:	f1b8 0f00 	cmp.w	r8, #0
 8016902:	d005      	beq.n	8016910 <_dtoa_r+0x980>
 8016904:	45b8      	cmp	r8, r7
 8016906:	d003      	beq.n	8016910 <_dtoa_r+0x980>
 8016908:	4641      	mov	r1, r8
 801690a:	4620      	mov	r0, r4
 801690c:	f000 fa72 	bl	8016df4 <_Bfree>
 8016910:	4639      	mov	r1, r7
 8016912:	4620      	mov	r0, r4
 8016914:	f000 fa6e 	bl	8016df4 <_Bfree>
 8016918:	e69c      	b.n	8016654 <_dtoa_r+0x6c4>
 801691a:	2600      	movs	r6, #0
 801691c:	4637      	mov	r7, r6
 801691e:	e7e1      	b.n	80168e4 <_dtoa_r+0x954>
 8016920:	46bb      	mov	fp, r7
 8016922:	4637      	mov	r7, r6
 8016924:	e599      	b.n	801645a <_dtoa_r+0x4ca>
 8016926:	bf00      	nop
 8016928:	40240000 	.word	0x40240000
 801692c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801692e:	2b00      	cmp	r3, #0
 8016930:	f000 80c8 	beq.w	8016ac4 <_dtoa_r+0xb34>
 8016934:	9b04      	ldr	r3, [sp, #16]
 8016936:	9301      	str	r3, [sp, #4]
 8016938:	2d00      	cmp	r5, #0
 801693a:	dd05      	ble.n	8016948 <_dtoa_r+0x9b8>
 801693c:	4639      	mov	r1, r7
 801693e:	462a      	mov	r2, r5
 8016940:	4620      	mov	r0, r4
 8016942:	f000 fc27 	bl	8017194 <__lshift>
 8016946:	4607      	mov	r7, r0
 8016948:	f1b8 0f00 	cmp.w	r8, #0
 801694c:	d05b      	beq.n	8016a06 <_dtoa_r+0xa76>
 801694e:	6879      	ldr	r1, [r7, #4]
 8016950:	4620      	mov	r0, r4
 8016952:	f000 fa0f 	bl	8016d74 <_Balloc>
 8016956:	4605      	mov	r5, r0
 8016958:	b928      	cbnz	r0, 8016966 <_dtoa_r+0x9d6>
 801695a:	4b83      	ldr	r3, [pc, #524]	; (8016b68 <_dtoa_r+0xbd8>)
 801695c:	4602      	mov	r2, r0
 801695e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8016962:	f7ff bb2e 	b.w	8015fc2 <_dtoa_r+0x32>
 8016966:	693a      	ldr	r2, [r7, #16]
 8016968:	3202      	adds	r2, #2
 801696a:	0092      	lsls	r2, r2, #2
 801696c:	f107 010c 	add.w	r1, r7, #12
 8016970:	300c      	adds	r0, #12
 8016972:	f7ff fa76 	bl	8015e62 <memcpy>
 8016976:	2201      	movs	r2, #1
 8016978:	4629      	mov	r1, r5
 801697a:	4620      	mov	r0, r4
 801697c:	f000 fc0a 	bl	8017194 <__lshift>
 8016980:	9b00      	ldr	r3, [sp, #0]
 8016982:	3301      	adds	r3, #1
 8016984:	9304      	str	r3, [sp, #16]
 8016986:	e9dd 2300 	ldrd	r2, r3, [sp]
 801698a:	4413      	add	r3, r2
 801698c:	9308      	str	r3, [sp, #32]
 801698e:	9b02      	ldr	r3, [sp, #8]
 8016990:	f003 0301 	and.w	r3, r3, #1
 8016994:	46b8      	mov	r8, r7
 8016996:	9306      	str	r3, [sp, #24]
 8016998:	4607      	mov	r7, r0
 801699a:	9b04      	ldr	r3, [sp, #16]
 801699c:	4631      	mov	r1, r6
 801699e:	3b01      	subs	r3, #1
 80169a0:	4650      	mov	r0, sl
 80169a2:	9301      	str	r3, [sp, #4]
 80169a4:	f7ff fa6b 	bl	8015e7e <quorem>
 80169a8:	4641      	mov	r1, r8
 80169aa:	9002      	str	r0, [sp, #8]
 80169ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80169b0:	4650      	mov	r0, sl
 80169b2:	f000 fc5b 	bl	801726c <__mcmp>
 80169b6:	463a      	mov	r2, r7
 80169b8:	9005      	str	r0, [sp, #20]
 80169ba:	4631      	mov	r1, r6
 80169bc:	4620      	mov	r0, r4
 80169be:	f000 fc71 	bl	80172a4 <__mdiff>
 80169c2:	68c2      	ldr	r2, [r0, #12]
 80169c4:	4605      	mov	r5, r0
 80169c6:	bb02      	cbnz	r2, 8016a0a <_dtoa_r+0xa7a>
 80169c8:	4601      	mov	r1, r0
 80169ca:	4650      	mov	r0, sl
 80169cc:	f000 fc4e 	bl	801726c <__mcmp>
 80169d0:	4602      	mov	r2, r0
 80169d2:	4629      	mov	r1, r5
 80169d4:	4620      	mov	r0, r4
 80169d6:	9209      	str	r2, [sp, #36]	; 0x24
 80169d8:	f000 fa0c 	bl	8016df4 <_Bfree>
 80169dc:	9b07      	ldr	r3, [sp, #28]
 80169de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169e0:	9d04      	ldr	r5, [sp, #16]
 80169e2:	ea43 0102 	orr.w	r1, r3, r2
 80169e6:	9b06      	ldr	r3, [sp, #24]
 80169e8:	4319      	orrs	r1, r3
 80169ea:	d110      	bne.n	8016a0e <_dtoa_r+0xa7e>
 80169ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80169f0:	d029      	beq.n	8016a46 <_dtoa_r+0xab6>
 80169f2:	9b05      	ldr	r3, [sp, #20]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	dd02      	ble.n	80169fe <_dtoa_r+0xa6e>
 80169f8:	9b02      	ldr	r3, [sp, #8]
 80169fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80169fe:	9b01      	ldr	r3, [sp, #4]
 8016a00:	f883 9000 	strb.w	r9, [r3]
 8016a04:	e774      	b.n	80168f0 <_dtoa_r+0x960>
 8016a06:	4638      	mov	r0, r7
 8016a08:	e7ba      	b.n	8016980 <_dtoa_r+0x9f0>
 8016a0a:	2201      	movs	r2, #1
 8016a0c:	e7e1      	b.n	80169d2 <_dtoa_r+0xa42>
 8016a0e:	9b05      	ldr	r3, [sp, #20]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	db04      	blt.n	8016a1e <_dtoa_r+0xa8e>
 8016a14:	9907      	ldr	r1, [sp, #28]
 8016a16:	430b      	orrs	r3, r1
 8016a18:	9906      	ldr	r1, [sp, #24]
 8016a1a:	430b      	orrs	r3, r1
 8016a1c:	d120      	bne.n	8016a60 <_dtoa_r+0xad0>
 8016a1e:	2a00      	cmp	r2, #0
 8016a20:	dded      	ble.n	80169fe <_dtoa_r+0xa6e>
 8016a22:	4651      	mov	r1, sl
 8016a24:	2201      	movs	r2, #1
 8016a26:	4620      	mov	r0, r4
 8016a28:	f000 fbb4 	bl	8017194 <__lshift>
 8016a2c:	4631      	mov	r1, r6
 8016a2e:	4682      	mov	sl, r0
 8016a30:	f000 fc1c 	bl	801726c <__mcmp>
 8016a34:	2800      	cmp	r0, #0
 8016a36:	dc03      	bgt.n	8016a40 <_dtoa_r+0xab0>
 8016a38:	d1e1      	bne.n	80169fe <_dtoa_r+0xa6e>
 8016a3a:	f019 0f01 	tst.w	r9, #1
 8016a3e:	d0de      	beq.n	80169fe <_dtoa_r+0xa6e>
 8016a40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016a44:	d1d8      	bne.n	80169f8 <_dtoa_r+0xa68>
 8016a46:	9a01      	ldr	r2, [sp, #4]
 8016a48:	2339      	movs	r3, #57	; 0x39
 8016a4a:	7013      	strb	r3, [r2, #0]
 8016a4c:	462b      	mov	r3, r5
 8016a4e:	461d      	mov	r5, r3
 8016a50:	3b01      	subs	r3, #1
 8016a52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016a56:	2a39      	cmp	r2, #57	; 0x39
 8016a58:	d06c      	beq.n	8016b34 <_dtoa_r+0xba4>
 8016a5a:	3201      	adds	r2, #1
 8016a5c:	701a      	strb	r2, [r3, #0]
 8016a5e:	e747      	b.n	80168f0 <_dtoa_r+0x960>
 8016a60:	2a00      	cmp	r2, #0
 8016a62:	dd07      	ble.n	8016a74 <_dtoa_r+0xae4>
 8016a64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8016a68:	d0ed      	beq.n	8016a46 <_dtoa_r+0xab6>
 8016a6a:	9a01      	ldr	r2, [sp, #4]
 8016a6c:	f109 0301 	add.w	r3, r9, #1
 8016a70:	7013      	strb	r3, [r2, #0]
 8016a72:	e73d      	b.n	80168f0 <_dtoa_r+0x960>
 8016a74:	9b04      	ldr	r3, [sp, #16]
 8016a76:	9a08      	ldr	r2, [sp, #32]
 8016a78:	f803 9c01 	strb.w	r9, [r3, #-1]
 8016a7c:	4293      	cmp	r3, r2
 8016a7e:	d043      	beq.n	8016b08 <_dtoa_r+0xb78>
 8016a80:	4651      	mov	r1, sl
 8016a82:	2300      	movs	r3, #0
 8016a84:	220a      	movs	r2, #10
 8016a86:	4620      	mov	r0, r4
 8016a88:	f000 f9d6 	bl	8016e38 <__multadd>
 8016a8c:	45b8      	cmp	r8, r7
 8016a8e:	4682      	mov	sl, r0
 8016a90:	f04f 0300 	mov.w	r3, #0
 8016a94:	f04f 020a 	mov.w	r2, #10
 8016a98:	4641      	mov	r1, r8
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	d107      	bne.n	8016aae <_dtoa_r+0xb1e>
 8016a9e:	f000 f9cb 	bl	8016e38 <__multadd>
 8016aa2:	4680      	mov	r8, r0
 8016aa4:	4607      	mov	r7, r0
 8016aa6:	9b04      	ldr	r3, [sp, #16]
 8016aa8:	3301      	adds	r3, #1
 8016aaa:	9304      	str	r3, [sp, #16]
 8016aac:	e775      	b.n	801699a <_dtoa_r+0xa0a>
 8016aae:	f000 f9c3 	bl	8016e38 <__multadd>
 8016ab2:	4639      	mov	r1, r7
 8016ab4:	4680      	mov	r8, r0
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	220a      	movs	r2, #10
 8016aba:	4620      	mov	r0, r4
 8016abc:	f000 f9bc 	bl	8016e38 <__multadd>
 8016ac0:	4607      	mov	r7, r0
 8016ac2:	e7f0      	b.n	8016aa6 <_dtoa_r+0xb16>
 8016ac4:	9b04      	ldr	r3, [sp, #16]
 8016ac6:	9301      	str	r3, [sp, #4]
 8016ac8:	9d00      	ldr	r5, [sp, #0]
 8016aca:	4631      	mov	r1, r6
 8016acc:	4650      	mov	r0, sl
 8016ace:	f7ff f9d6 	bl	8015e7e <quorem>
 8016ad2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8016ad6:	9b00      	ldr	r3, [sp, #0]
 8016ad8:	f805 9b01 	strb.w	r9, [r5], #1
 8016adc:	1aea      	subs	r2, r5, r3
 8016ade:	9b01      	ldr	r3, [sp, #4]
 8016ae0:	4293      	cmp	r3, r2
 8016ae2:	dd07      	ble.n	8016af4 <_dtoa_r+0xb64>
 8016ae4:	4651      	mov	r1, sl
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	220a      	movs	r2, #10
 8016aea:	4620      	mov	r0, r4
 8016aec:	f000 f9a4 	bl	8016e38 <__multadd>
 8016af0:	4682      	mov	sl, r0
 8016af2:	e7ea      	b.n	8016aca <_dtoa_r+0xb3a>
 8016af4:	9b01      	ldr	r3, [sp, #4]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	bfc8      	it	gt
 8016afa:	461d      	movgt	r5, r3
 8016afc:	9b00      	ldr	r3, [sp, #0]
 8016afe:	bfd8      	it	le
 8016b00:	2501      	movle	r5, #1
 8016b02:	441d      	add	r5, r3
 8016b04:	f04f 0800 	mov.w	r8, #0
 8016b08:	4651      	mov	r1, sl
 8016b0a:	2201      	movs	r2, #1
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	f000 fb41 	bl	8017194 <__lshift>
 8016b12:	4631      	mov	r1, r6
 8016b14:	4682      	mov	sl, r0
 8016b16:	f000 fba9 	bl	801726c <__mcmp>
 8016b1a:	2800      	cmp	r0, #0
 8016b1c:	dc96      	bgt.n	8016a4c <_dtoa_r+0xabc>
 8016b1e:	d102      	bne.n	8016b26 <_dtoa_r+0xb96>
 8016b20:	f019 0f01 	tst.w	r9, #1
 8016b24:	d192      	bne.n	8016a4c <_dtoa_r+0xabc>
 8016b26:	462b      	mov	r3, r5
 8016b28:	461d      	mov	r5, r3
 8016b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016b2e:	2a30      	cmp	r2, #48	; 0x30
 8016b30:	d0fa      	beq.n	8016b28 <_dtoa_r+0xb98>
 8016b32:	e6dd      	b.n	80168f0 <_dtoa_r+0x960>
 8016b34:	9a00      	ldr	r2, [sp, #0]
 8016b36:	429a      	cmp	r2, r3
 8016b38:	d189      	bne.n	8016a4e <_dtoa_r+0xabe>
 8016b3a:	f10b 0b01 	add.w	fp, fp, #1
 8016b3e:	2331      	movs	r3, #49	; 0x31
 8016b40:	e796      	b.n	8016a70 <_dtoa_r+0xae0>
 8016b42:	4b0a      	ldr	r3, [pc, #40]	; (8016b6c <_dtoa_r+0xbdc>)
 8016b44:	f7ff ba99 	b.w	801607a <_dtoa_r+0xea>
 8016b48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	f47f aa6d 	bne.w	801602a <_dtoa_r+0x9a>
 8016b50:	4b07      	ldr	r3, [pc, #28]	; (8016b70 <_dtoa_r+0xbe0>)
 8016b52:	f7ff ba92 	b.w	801607a <_dtoa_r+0xea>
 8016b56:	9b01      	ldr	r3, [sp, #4]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	dcb5      	bgt.n	8016ac8 <_dtoa_r+0xb38>
 8016b5c:	9b07      	ldr	r3, [sp, #28]
 8016b5e:	2b02      	cmp	r3, #2
 8016b60:	f73f aeb1 	bgt.w	80168c6 <_dtoa_r+0x936>
 8016b64:	e7b0      	b.n	8016ac8 <_dtoa_r+0xb38>
 8016b66:	bf00      	nop
 8016b68:	08019f15 	.word	0x08019f15
 8016b6c:	08019e75 	.word	0x08019e75
 8016b70:	08019e99 	.word	0x08019e99

08016b74 <_free_r>:
 8016b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b76:	2900      	cmp	r1, #0
 8016b78:	d044      	beq.n	8016c04 <_free_r+0x90>
 8016b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b7e:	9001      	str	r0, [sp, #4]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	f1a1 0404 	sub.w	r4, r1, #4
 8016b86:	bfb8      	it	lt
 8016b88:	18e4      	addlt	r4, r4, r3
 8016b8a:	f000 f8e7 	bl	8016d5c <__malloc_lock>
 8016b8e:	4a1e      	ldr	r2, [pc, #120]	; (8016c08 <_free_r+0x94>)
 8016b90:	9801      	ldr	r0, [sp, #4]
 8016b92:	6813      	ldr	r3, [r2, #0]
 8016b94:	b933      	cbnz	r3, 8016ba4 <_free_r+0x30>
 8016b96:	6063      	str	r3, [r4, #4]
 8016b98:	6014      	str	r4, [r2, #0]
 8016b9a:	b003      	add	sp, #12
 8016b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ba0:	f000 b8e2 	b.w	8016d68 <__malloc_unlock>
 8016ba4:	42a3      	cmp	r3, r4
 8016ba6:	d908      	bls.n	8016bba <_free_r+0x46>
 8016ba8:	6825      	ldr	r5, [r4, #0]
 8016baa:	1961      	adds	r1, r4, r5
 8016bac:	428b      	cmp	r3, r1
 8016bae:	bf01      	itttt	eq
 8016bb0:	6819      	ldreq	r1, [r3, #0]
 8016bb2:	685b      	ldreq	r3, [r3, #4]
 8016bb4:	1949      	addeq	r1, r1, r5
 8016bb6:	6021      	streq	r1, [r4, #0]
 8016bb8:	e7ed      	b.n	8016b96 <_free_r+0x22>
 8016bba:	461a      	mov	r2, r3
 8016bbc:	685b      	ldr	r3, [r3, #4]
 8016bbe:	b10b      	cbz	r3, 8016bc4 <_free_r+0x50>
 8016bc0:	42a3      	cmp	r3, r4
 8016bc2:	d9fa      	bls.n	8016bba <_free_r+0x46>
 8016bc4:	6811      	ldr	r1, [r2, #0]
 8016bc6:	1855      	adds	r5, r2, r1
 8016bc8:	42a5      	cmp	r5, r4
 8016bca:	d10b      	bne.n	8016be4 <_free_r+0x70>
 8016bcc:	6824      	ldr	r4, [r4, #0]
 8016bce:	4421      	add	r1, r4
 8016bd0:	1854      	adds	r4, r2, r1
 8016bd2:	42a3      	cmp	r3, r4
 8016bd4:	6011      	str	r1, [r2, #0]
 8016bd6:	d1e0      	bne.n	8016b9a <_free_r+0x26>
 8016bd8:	681c      	ldr	r4, [r3, #0]
 8016bda:	685b      	ldr	r3, [r3, #4]
 8016bdc:	6053      	str	r3, [r2, #4]
 8016bde:	440c      	add	r4, r1
 8016be0:	6014      	str	r4, [r2, #0]
 8016be2:	e7da      	b.n	8016b9a <_free_r+0x26>
 8016be4:	d902      	bls.n	8016bec <_free_r+0x78>
 8016be6:	230c      	movs	r3, #12
 8016be8:	6003      	str	r3, [r0, #0]
 8016bea:	e7d6      	b.n	8016b9a <_free_r+0x26>
 8016bec:	6825      	ldr	r5, [r4, #0]
 8016bee:	1961      	adds	r1, r4, r5
 8016bf0:	428b      	cmp	r3, r1
 8016bf2:	bf04      	itt	eq
 8016bf4:	6819      	ldreq	r1, [r3, #0]
 8016bf6:	685b      	ldreq	r3, [r3, #4]
 8016bf8:	6063      	str	r3, [r4, #4]
 8016bfa:	bf04      	itt	eq
 8016bfc:	1949      	addeq	r1, r1, r5
 8016bfe:	6021      	streq	r1, [r4, #0]
 8016c00:	6054      	str	r4, [r2, #4]
 8016c02:	e7ca      	b.n	8016b9a <_free_r+0x26>
 8016c04:	b003      	add	sp, #12
 8016c06:	bd30      	pop	{r4, r5, pc}
 8016c08:	2000ed68 	.word	0x2000ed68

08016c0c <malloc>:
 8016c0c:	4b02      	ldr	r3, [pc, #8]	; (8016c18 <malloc+0xc>)
 8016c0e:	4601      	mov	r1, r0
 8016c10:	6818      	ldr	r0, [r3, #0]
 8016c12:	f000 b823 	b.w	8016c5c <_malloc_r>
 8016c16:	bf00      	nop
 8016c18:	200021e4 	.word	0x200021e4

08016c1c <sbrk_aligned>:
 8016c1c:	b570      	push	{r4, r5, r6, lr}
 8016c1e:	4e0e      	ldr	r6, [pc, #56]	; (8016c58 <sbrk_aligned+0x3c>)
 8016c20:	460c      	mov	r4, r1
 8016c22:	6831      	ldr	r1, [r6, #0]
 8016c24:	4605      	mov	r5, r0
 8016c26:	b911      	cbnz	r1, 8016c2e <sbrk_aligned+0x12>
 8016c28:	f000 fe40 	bl	80178ac <_sbrk_r>
 8016c2c:	6030      	str	r0, [r6, #0]
 8016c2e:	4621      	mov	r1, r4
 8016c30:	4628      	mov	r0, r5
 8016c32:	f000 fe3b 	bl	80178ac <_sbrk_r>
 8016c36:	1c43      	adds	r3, r0, #1
 8016c38:	d00a      	beq.n	8016c50 <sbrk_aligned+0x34>
 8016c3a:	1cc4      	adds	r4, r0, #3
 8016c3c:	f024 0403 	bic.w	r4, r4, #3
 8016c40:	42a0      	cmp	r0, r4
 8016c42:	d007      	beq.n	8016c54 <sbrk_aligned+0x38>
 8016c44:	1a21      	subs	r1, r4, r0
 8016c46:	4628      	mov	r0, r5
 8016c48:	f000 fe30 	bl	80178ac <_sbrk_r>
 8016c4c:	3001      	adds	r0, #1
 8016c4e:	d101      	bne.n	8016c54 <sbrk_aligned+0x38>
 8016c50:	f04f 34ff 	mov.w	r4, #4294967295
 8016c54:	4620      	mov	r0, r4
 8016c56:	bd70      	pop	{r4, r5, r6, pc}
 8016c58:	2000ed6c 	.word	0x2000ed6c

08016c5c <_malloc_r>:
 8016c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c60:	1ccd      	adds	r5, r1, #3
 8016c62:	f025 0503 	bic.w	r5, r5, #3
 8016c66:	3508      	adds	r5, #8
 8016c68:	2d0c      	cmp	r5, #12
 8016c6a:	bf38      	it	cc
 8016c6c:	250c      	movcc	r5, #12
 8016c6e:	2d00      	cmp	r5, #0
 8016c70:	4607      	mov	r7, r0
 8016c72:	db01      	blt.n	8016c78 <_malloc_r+0x1c>
 8016c74:	42a9      	cmp	r1, r5
 8016c76:	d905      	bls.n	8016c84 <_malloc_r+0x28>
 8016c78:	230c      	movs	r3, #12
 8016c7a:	603b      	str	r3, [r7, #0]
 8016c7c:	2600      	movs	r6, #0
 8016c7e:	4630      	mov	r0, r6
 8016c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016d58 <_malloc_r+0xfc>
 8016c88:	f000 f868 	bl	8016d5c <__malloc_lock>
 8016c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8016c90:	461c      	mov	r4, r3
 8016c92:	bb5c      	cbnz	r4, 8016cec <_malloc_r+0x90>
 8016c94:	4629      	mov	r1, r5
 8016c96:	4638      	mov	r0, r7
 8016c98:	f7ff ffc0 	bl	8016c1c <sbrk_aligned>
 8016c9c:	1c43      	adds	r3, r0, #1
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	d155      	bne.n	8016d4e <_malloc_r+0xf2>
 8016ca2:	f8d8 4000 	ldr.w	r4, [r8]
 8016ca6:	4626      	mov	r6, r4
 8016ca8:	2e00      	cmp	r6, #0
 8016caa:	d145      	bne.n	8016d38 <_malloc_r+0xdc>
 8016cac:	2c00      	cmp	r4, #0
 8016cae:	d048      	beq.n	8016d42 <_malloc_r+0xe6>
 8016cb0:	6823      	ldr	r3, [r4, #0]
 8016cb2:	4631      	mov	r1, r6
 8016cb4:	4638      	mov	r0, r7
 8016cb6:	eb04 0903 	add.w	r9, r4, r3
 8016cba:	f000 fdf7 	bl	80178ac <_sbrk_r>
 8016cbe:	4581      	cmp	r9, r0
 8016cc0:	d13f      	bne.n	8016d42 <_malloc_r+0xe6>
 8016cc2:	6821      	ldr	r1, [r4, #0]
 8016cc4:	1a6d      	subs	r5, r5, r1
 8016cc6:	4629      	mov	r1, r5
 8016cc8:	4638      	mov	r0, r7
 8016cca:	f7ff ffa7 	bl	8016c1c <sbrk_aligned>
 8016cce:	3001      	adds	r0, #1
 8016cd0:	d037      	beq.n	8016d42 <_malloc_r+0xe6>
 8016cd2:	6823      	ldr	r3, [r4, #0]
 8016cd4:	442b      	add	r3, r5
 8016cd6:	6023      	str	r3, [r4, #0]
 8016cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d038      	beq.n	8016d52 <_malloc_r+0xf6>
 8016ce0:	685a      	ldr	r2, [r3, #4]
 8016ce2:	42a2      	cmp	r2, r4
 8016ce4:	d12b      	bne.n	8016d3e <_malloc_r+0xe2>
 8016ce6:	2200      	movs	r2, #0
 8016ce8:	605a      	str	r2, [r3, #4]
 8016cea:	e00f      	b.n	8016d0c <_malloc_r+0xb0>
 8016cec:	6822      	ldr	r2, [r4, #0]
 8016cee:	1b52      	subs	r2, r2, r5
 8016cf0:	d41f      	bmi.n	8016d32 <_malloc_r+0xd6>
 8016cf2:	2a0b      	cmp	r2, #11
 8016cf4:	d917      	bls.n	8016d26 <_malloc_r+0xca>
 8016cf6:	1961      	adds	r1, r4, r5
 8016cf8:	42a3      	cmp	r3, r4
 8016cfa:	6025      	str	r5, [r4, #0]
 8016cfc:	bf18      	it	ne
 8016cfe:	6059      	strne	r1, [r3, #4]
 8016d00:	6863      	ldr	r3, [r4, #4]
 8016d02:	bf08      	it	eq
 8016d04:	f8c8 1000 	streq.w	r1, [r8]
 8016d08:	5162      	str	r2, [r4, r5]
 8016d0a:	604b      	str	r3, [r1, #4]
 8016d0c:	4638      	mov	r0, r7
 8016d0e:	f104 060b 	add.w	r6, r4, #11
 8016d12:	f000 f829 	bl	8016d68 <__malloc_unlock>
 8016d16:	f026 0607 	bic.w	r6, r6, #7
 8016d1a:	1d23      	adds	r3, r4, #4
 8016d1c:	1af2      	subs	r2, r6, r3
 8016d1e:	d0ae      	beq.n	8016c7e <_malloc_r+0x22>
 8016d20:	1b9b      	subs	r3, r3, r6
 8016d22:	50a3      	str	r3, [r4, r2]
 8016d24:	e7ab      	b.n	8016c7e <_malloc_r+0x22>
 8016d26:	42a3      	cmp	r3, r4
 8016d28:	6862      	ldr	r2, [r4, #4]
 8016d2a:	d1dd      	bne.n	8016ce8 <_malloc_r+0x8c>
 8016d2c:	f8c8 2000 	str.w	r2, [r8]
 8016d30:	e7ec      	b.n	8016d0c <_malloc_r+0xb0>
 8016d32:	4623      	mov	r3, r4
 8016d34:	6864      	ldr	r4, [r4, #4]
 8016d36:	e7ac      	b.n	8016c92 <_malloc_r+0x36>
 8016d38:	4634      	mov	r4, r6
 8016d3a:	6876      	ldr	r6, [r6, #4]
 8016d3c:	e7b4      	b.n	8016ca8 <_malloc_r+0x4c>
 8016d3e:	4613      	mov	r3, r2
 8016d40:	e7cc      	b.n	8016cdc <_malloc_r+0x80>
 8016d42:	230c      	movs	r3, #12
 8016d44:	603b      	str	r3, [r7, #0]
 8016d46:	4638      	mov	r0, r7
 8016d48:	f000 f80e 	bl	8016d68 <__malloc_unlock>
 8016d4c:	e797      	b.n	8016c7e <_malloc_r+0x22>
 8016d4e:	6025      	str	r5, [r4, #0]
 8016d50:	e7dc      	b.n	8016d0c <_malloc_r+0xb0>
 8016d52:	605b      	str	r3, [r3, #4]
 8016d54:	deff      	udf	#255	; 0xff
 8016d56:	bf00      	nop
 8016d58:	2000ed68 	.word	0x2000ed68

08016d5c <__malloc_lock>:
 8016d5c:	4801      	ldr	r0, [pc, #4]	; (8016d64 <__malloc_lock+0x8>)
 8016d5e:	f7ff b876 	b.w	8015e4e <__retarget_lock_acquire_recursive>
 8016d62:	bf00      	nop
 8016d64:	2000ed64 	.word	0x2000ed64

08016d68 <__malloc_unlock>:
 8016d68:	4801      	ldr	r0, [pc, #4]	; (8016d70 <__malloc_unlock+0x8>)
 8016d6a:	f7ff b871 	b.w	8015e50 <__retarget_lock_release_recursive>
 8016d6e:	bf00      	nop
 8016d70:	2000ed64 	.word	0x2000ed64

08016d74 <_Balloc>:
 8016d74:	b570      	push	{r4, r5, r6, lr}
 8016d76:	69c6      	ldr	r6, [r0, #28]
 8016d78:	4604      	mov	r4, r0
 8016d7a:	460d      	mov	r5, r1
 8016d7c:	b976      	cbnz	r6, 8016d9c <_Balloc+0x28>
 8016d7e:	2010      	movs	r0, #16
 8016d80:	f7ff ff44 	bl	8016c0c <malloc>
 8016d84:	4602      	mov	r2, r0
 8016d86:	61e0      	str	r0, [r4, #28]
 8016d88:	b920      	cbnz	r0, 8016d94 <_Balloc+0x20>
 8016d8a:	4b18      	ldr	r3, [pc, #96]	; (8016dec <_Balloc+0x78>)
 8016d8c:	4818      	ldr	r0, [pc, #96]	; (8016df0 <_Balloc+0x7c>)
 8016d8e:	216b      	movs	r1, #107	; 0x6b
 8016d90:	f000 fd9c 	bl	80178cc <__assert_func>
 8016d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016d98:	6006      	str	r6, [r0, #0]
 8016d9a:	60c6      	str	r6, [r0, #12]
 8016d9c:	69e6      	ldr	r6, [r4, #28]
 8016d9e:	68f3      	ldr	r3, [r6, #12]
 8016da0:	b183      	cbz	r3, 8016dc4 <_Balloc+0x50>
 8016da2:	69e3      	ldr	r3, [r4, #28]
 8016da4:	68db      	ldr	r3, [r3, #12]
 8016da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016daa:	b9b8      	cbnz	r0, 8016ddc <_Balloc+0x68>
 8016dac:	2101      	movs	r1, #1
 8016dae:	fa01 f605 	lsl.w	r6, r1, r5
 8016db2:	1d72      	adds	r2, r6, #5
 8016db4:	0092      	lsls	r2, r2, #2
 8016db6:	4620      	mov	r0, r4
 8016db8:	f000 fda6 	bl	8017908 <_calloc_r>
 8016dbc:	b160      	cbz	r0, 8016dd8 <_Balloc+0x64>
 8016dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016dc2:	e00e      	b.n	8016de2 <_Balloc+0x6e>
 8016dc4:	2221      	movs	r2, #33	; 0x21
 8016dc6:	2104      	movs	r1, #4
 8016dc8:	4620      	mov	r0, r4
 8016dca:	f000 fd9d 	bl	8017908 <_calloc_r>
 8016dce:	69e3      	ldr	r3, [r4, #28]
 8016dd0:	60f0      	str	r0, [r6, #12]
 8016dd2:	68db      	ldr	r3, [r3, #12]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d1e4      	bne.n	8016da2 <_Balloc+0x2e>
 8016dd8:	2000      	movs	r0, #0
 8016dda:	bd70      	pop	{r4, r5, r6, pc}
 8016ddc:	6802      	ldr	r2, [r0, #0]
 8016dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016de2:	2300      	movs	r3, #0
 8016de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016de8:	e7f7      	b.n	8016dda <_Balloc+0x66>
 8016dea:	bf00      	nop
 8016dec:	08019ea6 	.word	0x08019ea6
 8016df0:	08019f26 	.word	0x08019f26

08016df4 <_Bfree>:
 8016df4:	b570      	push	{r4, r5, r6, lr}
 8016df6:	69c6      	ldr	r6, [r0, #28]
 8016df8:	4605      	mov	r5, r0
 8016dfa:	460c      	mov	r4, r1
 8016dfc:	b976      	cbnz	r6, 8016e1c <_Bfree+0x28>
 8016dfe:	2010      	movs	r0, #16
 8016e00:	f7ff ff04 	bl	8016c0c <malloc>
 8016e04:	4602      	mov	r2, r0
 8016e06:	61e8      	str	r0, [r5, #28]
 8016e08:	b920      	cbnz	r0, 8016e14 <_Bfree+0x20>
 8016e0a:	4b09      	ldr	r3, [pc, #36]	; (8016e30 <_Bfree+0x3c>)
 8016e0c:	4809      	ldr	r0, [pc, #36]	; (8016e34 <_Bfree+0x40>)
 8016e0e:	218f      	movs	r1, #143	; 0x8f
 8016e10:	f000 fd5c 	bl	80178cc <__assert_func>
 8016e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016e18:	6006      	str	r6, [r0, #0]
 8016e1a:	60c6      	str	r6, [r0, #12]
 8016e1c:	b13c      	cbz	r4, 8016e2e <_Bfree+0x3a>
 8016e1e:	69eb      	ldr	r3, [r5, #28]
 8016e20:	6862      	ldr	r2, [r4, #4]
 8016e22:	68db      	ldr	r3, [r3, #12]
 8016e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016e28:	6021      	str	r1, [r4, #0]
 8016e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016e2e:	bd70      	pop	{r4, r5, r6, pc}
 8016e30:	08019ea6 	.word	0x08019ea6
 8016e34:	08019f26 	.word	0x08019f26

08016e38 <__multadd>:
 8016e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e3c:	690d      	ldr	r5, [r1, #16]
 8016e3e:	4607      	mov	r7, r0
 8016e40:	460c      	mov	r4, r1
 8016e42:	461e      	mov	r6, r3
 8016e44:	f101 0c14 	add.w	ip, r1, #20
 8016e48:	2000      	movs	r0, #0
 8016e4a:	f8dc 3000 	ldr.w	r3, [ip]
 8016e4e:	b299      	uxth	r1, r3
 8016e50:	fb02 6101 	mla	r1, r2, r1, r6
 8016e54:	0c1e      	lsrs	r6, r3, #16
 8016e56:	0c0b      	lsrs	r3, r1, #16
 8016e58:	fb02 3306 	mla	r3, r2, r6, r3
 8016e5c:	b289      	uxth	r1, r1
 8016e5e:	3001      	adds	r0, #1
 8016e60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016e64:	4285      	cmp	r5, r0
 8016e66:	f84c 1b04 	str.w	r1, [ip], #4
 8016e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016e6e:	dcec      	bgt.n	8016e4a <__multadd+0x12>
 8016e70:	b30e      	cbz	r6, 8016eb6 <__multadd+0x7e>
 8016e72:	68a3      	ldr	r3, [r4, #8]
 8016e74:	42ab      	cmp	r3, r5
 8016e76:	dc19      	bgt.n	8016eac <__multadd+0x74>
 8016e78:	6861      	ldr	r1, [r4, #4]
 8016e7a:	4638      	mov	r0, r7
 8016e7c:	3101      	adds	r1, #1
 8016e7e:	f7ff ff79 	bl	8016d74 <_Balloc>
 8016e82:	4680      	mov	r8, r0
 8016e84:	b928      	cbnz	r0, 8016e92 <__multadd+0x5a>
 8016e86:	4602      	mov	r2, r0
 8016e88:	4b0c      	ldr	r3, [pc, #48]	; (8016ebc <__multadd+0x84>)
 8016e8a:	480d      	ldr	r0, [pc, #52]	; (8016ec0 <__multadd+0x88>)
 8016e8c:	21ba      	movs	r1, #186	; 0xba
 8016e8e:	f000 fd1d 	bl	80178cc <__assert_func>
 8016e92:	6922      	ldr	r2, [r4, #16]
 8016e94:	3202      	adds	r2, #2
 8016e96:	f104 010c 	add.w	r1, r4, #12
 8016e9a:	0092      	lsls	r2, r2, #2
 8016e9c:	300c      	adds	r0, #12
 8016e9e:	f7fe ffe0 	bl	8015e62 <memcpy>
 8016ea2:	4621      	mov	r1, r4
 8016ea4:	4638      	mov	r0, r7
 8016ea6:	f7ff ffa5 	bl	8016df4 <_Bfree>
 8016eaa:	4644      	mov	r4, r8
 8016eac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016eb0:	3501      	adds	r5, #1
 8016eb2:	615e      	str	r6, [r3, #20]
 8016eb4:	6125      	str	r5, [r4, #16]
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ebc:	08019f15 	.word	0x08019f15
 8016ec0:	08019f26 	.word	0x08019f26

08016ec4 <__hi0bits>:
 8016ec4:	0c03      	lsrs	r3, r0, #16
 8016ec6:	041b      	lsls	r3, r3, #16
 8016ec8:	b9d3      	cbnz	r3, 8016f00 <__hi0bits+0x3c>
 8016eca:	0400      	lsls	r0, r0, #16
 8016ecc:	2310      	movs	r3, #16
 8016ece:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016ed2:	bf04      	itt	eq
 8016ed4:	0200      	lsleq	r0, r0, #8
 8016ed6:	3308      	addeq	r3, #8
 8016ed8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016edc:	bf04      	itt	eq
 8016ede:	0100      	lsleq	r0, r0, #4
 8016ee0:	3304      	addeq	r3, #4
 8016ee2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016ee6:	bf04      	itt	eq
 8016ee8:	0080      	lsleq	r0, r0, #2
 8016eea:	3302      	addeq	r3, #2
 8016eec:	2800      	cmp	r0, #0
 8016eee:	db05      	blt.n	8016efc <__hi0bits+0x38>
 8016ef0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016ef4:	f103 0301 	add.w	r3, r3, #1
 8016ef8:	bf08      	it	eq
 8016efa:	2320      	moveq	r3, #32
 8016efc:	4618      	mov	r0, r3
 8016efe:	4770      	bx	lr
 8016f00:	2300      	movs	r3, #0
 8016f02:	e7e4      	b.n	8016ece <__hi0bits+0xa>

08016f04 <__lo0bits>:
 8016f04:	6803      	ldr	r3, [r0, #0]
 8016f06:	f013 0207 	ands.w	r2, r3, #7
 8016f0a:	d00c      	beq.n	8016f26 <__lo0bits+0x22>
 8016f0c:	07d9      	lsls	r1, r3, #31
 8016f0e:	d422      	bmi.n	8016f56 <__lo0bits+0x52>
 8016f10:	079a      	lsls	r2, r3, #30
 8016f12:	bf49      	itett	mi
 8016f14:	085b      	lsrmi	r3, r3, #1
 8016f16:	089b      	lsrpl	r3, r3, #2
 8016f18:	6003      	strmi	r3, [r0, #0]
 8016f1a:	2201      	movmi	r2, #1
 8016f1c:	bf5c      	itt	pl
 8016f1e:	6003      	strpl	r3, [r0, #0]
 8016f20:	2202      	movpl	r2, #2
 8016f22:	4610      	mov	r0, r2
 8016f24:	4770      	bx	lr
 8016f26:	b299      	uxth	r1, r3
 8016f28:	b909      	cbnz	r1, 8016f2e <__lo0bits+0x2a>
 8016f2a:	0c1b      	lsrs	r3, r3, #16
 8016f2c:	2210      	movs	r2, #16
 8016f2e:	b2d9      	uxtb	r1, r3
 8016f30:	b909      	cbnz	r1, 8016f36 <__lo0bits+0x32>
 8016f32:	3208      	adds	r2, #8
 8016f34:	0a1b      	lsrs	r3, r3, #8
 8016f36:	0719      	lsls	r1, r3, #28
 8016f38:	bf04      	itt	eq
 8016f3a:	091b      	lsreq	r3, r3, #4
 8016f3c:	3204      	addeq	r2, #4
 8016f3e:	0799      	lsls	r1, r3, #30
 8016f40:	bf04      	itt	eq
 8016f42:	089b      	lsreq	r3, r3, #2
 8016f44:	3202      	addeq	r2, #2
 8016f46:	07d9      	lsls	r1, r3, #31
 8016f48:	d403      	bmi.n	8016f52 <__lo0bits+0x4e>
 8016f4a:	085b      	lsrs	r3, r3, #1
 8016f4c:	f102 0201 	add.w	r2, r2, #1
 8016f50:	d003      	beq.n	8016f5a <__lo0bits+0x56>
 8016f52:	6003      	str	r3, [r0, #0]
 8016f54:	e7e5      	b.n	8016f22 <__lo0bits+0x1e>
 8016f56:	2200      	movs	r2, #0
 8016f58:	e7e3      	b.n	8016f22 <__lo0bits+0x1e>
 8016f5a:	2220      	movs	r2, #32
 8016f5c:	e7e1      	b.n	8016f22 <__lo0bits+0x1e>
	...

08016f60 <__i2b>:
 8016f60:	b510      	push	{r4, lr}
 8016f62:	460c      	mov	r4, r1
 8016f64:	2101      	movs	r1, #1
 8016f66:	f7ff ff05 	bl	8016d74 <_Balloc>
 8016f6a:	4602      	mov	r2, r0
 8016f6c:	b928      	cbnz	r0, 8016f7a <__i2b+0x1a>
 8016f6e:	4b05      	ldr	r3, [pc, #20]	; (8016f84 <__i2b+0x24>)
 8016f70:	4805      	ldr	r0, [pc, #20]	; (8016f88 <__i2b+0x28>)
 8016f72:	f240 1145 	movw	r1, #325	; 0x145
 8016f76:	f000 fca9 	bl	80178cc <__assert_func>
 8016f7a:	2301      	movs	r3, #1
 8016f7c:	6144      	str	r4, [r0, #20]
 8016f7e:	6103      	str	r3, [r0, #16]
 8016f80:	bd10      	pop	{r4, pc}
 8016f82:	bf00      	nop
 8016f84:	08019f15 	.word	0x08019f15
 8016f88:	08019f26 	.word	0x08019f26

08016f8c <__multiply>:
 8016f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f90:	4691      	mov	r9, r2
 8016f92:	690a      	ldr	r2, [r1, #16]
 8016f94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	bfb8      	it	lt
 8016f9c:	460b      	movlt	r3, r1
 8016f9e:	460c      	mov	r4, r1
 8016fa0:	bfbc      	itt	lt
 8016fa2:	464c      	movlt	r4, r9
 8016fa4:	4699      	movlt	r9, r3
 8016fa6:	6927      	ldr	r7, [r4, #16]
 8016fa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016fac:	68a3      	ldr	r3, [r4, #8]
 8016fae:	6861      	ldr	r1, [r4, #4]
 8016fb0:	eb07 060a 	add.w	r6, r7, sl
 8016fb4:	42b3      	cmp	r3, r6
 8016fb6:	b085      	sub	sp, #20
 8016fb8:	bfb8      	it	lt
 8016fba:	3101      	addlt	r1, #1
 8016fbc:	f7ff feda 	bl	8016d74 <_Balloc>
 8016fc0:	b930      	cbnz	r0, 8016fd0 <__multiply+0x44>
 8016fc2:	4602      	mov	r2, r0
 8016fc4:	4b44      	ldr	r3, [pc, #272]	; (80170d8 <__multiply+0x14c>)
 8016fc6:	4845      	ldr	r0, [pc, #276]	; (80170dc <__multiply+0x150>)
 8016fc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016fcc:	f000 fc7e 	bl	80178cc <__assert_func>
 8016fd0:	f100 0514 	add.w	r5, r0, #20
 8016fd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016fd8:	462b      	mov	r3, r5
 8016fda:	2200      	movs	r2, #0
 8016fdc:	4543      	cmp	r3, r8
 8016fde:	d321      	bcc.n	8017024 <__multiply+0x98>
 8016fe0:	f104 0314 	add.w	r3, r4, #20
 8016fe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016fe8:	f109 0314 	add.w	r3, r9, #20
 8016fec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016ff0:	9202      	str	r2, [sp, #8]
 8016ff2:	1b3a      	subs	r2, r7, r4
 8016ff4:	3a15      	subs	r2, #21
 8016ff6:	f022 0203 	bic.w	r2, r2, #3
 8016ffa:	3204      	adds	r2, #4
 8016ffc:	f104 0115 	add.w	r1, r4, #21
 8017000:	428f      	cmp	r7, r1
 8017002:	bf38      	it	cc
 8017004:	2204      	movcc	r2, #4
 8017006:	9201      	str	r2, [sp, #4]
 8017008:	9a02      	ldr	r2, [sp, #8]
 801700a:	9303      	str	r3, [sp, #12]
 801700c:	429a      	cmp	r2, r3
 801700e:	d80c      	bhi.n	801702a <__multiply+0x9e>
 8017010:	2e00      	cmp	r6, #0
 8017012:	dd03      	ble.n	801701c <__multiply+0x90>
 8017014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017018:	2b00      	cmp	r3, #0
 801701a:	d05b      	beq.n	80170d4 <__multiply+0x148>
 801701c:	6106      	str	r6, [r0, #16]
 801701e:	b005      	add	sp, #20
 8017020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017024:	f843 2b04 	str.w	r2, [r3], #4
 8017028:	e7d8      	b.n	8016fdc <__multiply+0x50>
 801702a:	f8b3 a000 	ldrh.w	sl, [r3]
 801702e:	f1ba 0f00 	cmp.w	sl, #0
 8017032:	d024      	beq.n	801707e <__multiply+0xf2>
 8017034:	f104 0e14 	add.w	lr, r4, #20
 8017038:	46a9      	mov	r9, r5
 801703a:	f04f 0c00 	mov.w	ip, #0
 801703e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017042:	f8d9 1000 	ldr.w	r1, [r9]
 8017046:	fa1f fb82 	uxth.w	fp, r2
 801704a:	b289      	uxth	r1, r1
 801704c:	fb0a 110b 	mla	r1, sl, fp, r1
 8017050:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017054:	f8d9 2000 	ldr.w	r2, [r9]
 8017058:	4461      	add	r1, ip
 801705a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801705e:	fb0a c20b 	mla	r2, sl, fp, ip
 8017062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017066:	b289      	uxth	r1, r1
 8017068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801706c:	4577      	cmp	r7, lr
 801706e:	f849 1b04 	str.w	r1, [r9], #4
 8017072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017076:	d8e2      	bhi.n	801703e <__multiply+0xb2>
 8017078:	9a01      	ldr	r2, [sp, #4]
 801707a:	f845 c002 	str.w	ip, [r5, r2]
 801707e:	9a03      	ldr	r2, [sp, #12]
 8017080:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017084:	3304      	adds	r3, #4
 8017086:	f1b9 0f00 	cmp.w	r9, #0
 801708a:	d021      	beq.n	80170d0 <__multiply+0x144>
 801708c:	6829      	ldr	r1, [r5, #0]
 801708e:	f104 0c14 	add.w	ip, r4, #20
 8017092:	46ae      	mov	lr, r5
 8017094:	f04f 0a00 	mov.w	sl, #0
 8017098:	f8bc b000 	ldrh.w	fp, [ip]
 801709c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80170a0:	fb09 220b 	mla	r2, r9, fp, r2
 80170a4:	4452      	add	r2, sl
 80170a6:	b289      	uxth	r1, r1
 80170a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80170ac:	f84e 1b04 	str.w	r1, [lr], #4
 80170b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80170b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80170b8:	f8be 1000 	ldrh.w	r1, [lr]
 80170bc:	fb09 110a 	mla	r1, r9, sl, r1
 80170c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80170c4:	4567      	cmp	r7, ip
 80170c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80170ca:	d8e5      	bhi.n	8017098 <__multiply+0x10c>
 80170cc:	9a01      	ldr	r2, [sp, #4]
 80170ce:	50a9      	str	r1, [r5, r2]
 80170d0:	3504      	adds	r5, #4
 80170d2:	e799      	b.n	8017008 <__multiply+0x7c>
 80170d4:	3e01      	subs	r6, #1
 80170d6:	e79b      	b.n	8017010 <__multiply+0x84>
 80170d8:	08019f15 	.word	0x08019f15
 80170dc:	08019f26 	.word	0x08019f26

080170e0 <__pow5mult>:
 80170e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170e4:	4615      	mov	r5, r2
 80170e6:	f012 0203 	ands.w	r2, r2, #3
 80170ea:	4606      	mov	r6, r0
 80170ec:	460f      	mov	r7, r1
 80170ee:	d007      	beq.n	8017100 <__pow5mult+0x20>
 80170f0:	4c25      	ldr	r4, [pc, #148]	; (8017188 <__pow5mult+0xa8>)
 80170f2:	3a01      	subs	r2, #1
 80170f4:	2300      	movs	r3, #0
 80170f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80170fa:	f7ff fe9d 	bl	8016e38 <__multadd>
 80170fe:	4607      	mov	r7, r0
 8017100:	10ad      	asrs	r5, r5, #2
 8017102:	d03d      	beq.n	8017180 <__pow5mult+0xa0>
 8017104:	69f4      	ldr	r4, [r6, #28]
 8017106:	b97c      	cbnz	r4, 8017128 <__pow5mult+0x48>
 8017108:	2010      	movs	r0, #16
 801710a:	f7ff fd7f 	bl	8016c0c <malloc>
 801710e:	4602      	mov	r2, r0
 8017110:	61f0      	str	r0, [r6, #28]
 8017112:	b928      	cbnz	r0, 8017120 <__pow5mult+0x40>
 8017114:	4b1d      	ldr	r3, [pc, #116]	; (801718c <__pow5mult+0xac>)
 8017116:	481e      	ldr	r0, [pc, #120]	; (8017190 <__pow5mult+0xb0>)
 8017118:	f240 11b3 	movw	r1, #435	; 0x1b3
 801711c:	f000 fbd6 	bl	80178cc <__assert_func>
 8017120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017124:	6004      	str	r4, [r0, #0]
 8017126:	60c4      	str	r4, [r0, #12]
 8017128:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801712c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017130:	b94c      	cbnz	r4, 8017146 <__pow5mult+0x66>
 8017132:	f240 2171 	movw	r1, #625	; 0x271
 8017136:	4630      	mov	r0, r6
 8017138:	f7ff ff12 	bl	8016f60 <__i2b>
 801713c:	2300      	movs	r3, #0
 801713e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017142:	4604      	mov	r4, r0
 8017144:	6003      	str	r3, [r0, #0]
 8017146:	f04f 0900 	mov.w	r9, #0
 801714a:	07eb      	lsls	r3, r5, #31
 801714c:	d50a      	bpl.n	8017164 <__pow5mult+0x84>
 801714e:	4639      	mov	r1, r7
 8017150:	4622      	mov	r2, r4
 8017152:	4630      	mov	r0, r6
 8017154:	f7ff ff1a 	bl	8016f8c <__multiply>
 8017158:	4639      	mov	r1, r7
 801715a:	4680      	mov	r8, r0
 801715c:	4630      	mov	r0, r6
 801715e:	f7ff fe49 	bl	8016df4 <_Bfree>
 8017162:	4647      	mov	r7, r8
 8017164:	106d      	asrs	r5, r5, #1
 8017166:	d00b      	beq.n	8017180 <__pow5mult+0xa0>
 8017168:	6820      	ldr	r0, [r4, #0]
 801716a:	b938      	cbnz	r0, 801717c <__pow5mult+0x9c>
 801716c:	4622      	mov	r2, r4
 801716e:	4621      	mov	r1, r4
 8017170:	4630      	mov	r0, r6
 8017172:	f7ff ff0b 	bl	8016f8c <__multiply>
 8017176:	6020      	str	r0, [r4, #0]
 8017178:	f8c0 9000 	str.w	r9, [r0]
 801717c:	4604      	mov	r4, r0
 801717e:	e7e4      	b.n	801714a <__pow5mult+0x6a>
 8017180:	4638      	mov	r0, r7
 8017182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017186:	bf00      	nop
 8017188:	0801a070 	.word	0x0801a070
 801718c:	08019ea6 	.word	0x08019ea6
 8017190:	08019f26 	.word	0x08019f26

08017194 <__lshift>:
 8017194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017198:	460c      	mov	r4, r1
 801719a:	6849      	ldr	r1, [r1, #4]
 801719c:	6923      	ldr	r3, [r4, #16]
 801719e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80171a2:	68a3      	ldr	r3, [r4, #8]
 80171a4:	4607      	mov	r7, r0
 80171a6:	4691      	mov	r9, r2
 80171a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80171ac:	f108 0601 	add.w	r6, r8, #1
 80171b0:	42b3      	cmp	r3, r6
 80171b2:	db0b      	blt.n	80171cc <__lshift+0x38>
 80171b4:	4638      	mov	r0, r7
 80171b6:	f7ff fddd 	bl	8016d74 <_Balloc>
 80171ba:	4605      	mov	r5, r0
 80171bc:	b948      	cbnz	r0, 80171d2 <__lshift+0x3e>
 80171be:	4602      	mov	r2, r0
 80171c0:	4b28      	ldr	r3, [pc, #160]	; (8017264 <__lshift+0xd0>)
 80171c2:	4829      	ldr	r0, [pc, #164]	; (8017268 <__lshift+0xd4>)
 80171c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80171c8:	f000 fb80 	bl	80178cc <__assert_func>
 80171cc:	3101      	adds	r1, #1
 80171ce:	005b      	lsls	r3, r3, #1
 80171d0:	e7ee      	b.n	80171b0 <__lshift+0x1c>
 80171d2:	2300      	movs	r3, #0
 80171d4:	f100 0114 	add.w	r1, r0, #20
 80171d8:	f100 0210 	add.w	r2, r0, #16
 80171dc:	4618      	mov	r0, r3
 80171de:	4553      	cmp	r3, sl
 80171e0:	db33      	blt.n	801724a <__lshift+0xb6>
 80171e2:	6920      	ldr	r0, [r4, #16]
 80171e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80171e8:	f104 0314 	add.w	r3, r4, #20
 80171ec:	f019 091f 	ands.w	r9, r9, #31
 80171f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80171f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80171f8:	d02b      	beq.n	8017252 <__lshift+0xbe>
 80171fa:	f1c9 0e20 	rsb	lr, r9, #32
 80171fe:	468a      	mov	sl, r1
 8017200:	2200      	movs	r2, #0
 8017202:	6818      	ldr	r0, [r3, #0]
 8017204:	fa00 f009 	lsl.w	r0, r0, r9
 8017208:	4310      	orrs	r0, r2
 801720a:	f84a 0b04 	str.w	r0, [sl], #4
 801720e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017212:	459c      	cmp	ip, r3
 8017214:	fa22 f20e 	lsr.w	r2, r2, lr
 8017218:	d8f3      	bhi.n	8017202 <__lshift+0x6e>
 801721a:	ebac 0304 	sub.w	r3, ip, r4
 801721e:	3b15      	subs	r3, #21
 8017220:	f023 0303 	bic.w	r3, r3, #3
 8017224:	3304      	adds	r3, #4
 8017226:	f104 0015 	add.w	r0, r4, #21
 801722a:	4584      	cmp	ip, r0
 801722c:	bf38      	it	cc
 801722e:	2304      	movcc	r3, #4
 8017230:	50ca      	str	r2, [r1, r3]
 8017232:	b10a      	cbz	r2, 8017238 <__lshift+0xa4>
 8017234:	f108 0602 	add.w	r6, r8, #2
 8017238:	3e01      	subs	r6, #1
 801723a:	4638      	mov	r0, r7
 801723c:	612e      	str	r6, [r5, #16]
 801723e:	4621      	mov	r1, r4
 8017240:	f7ff fdd8 	bl	8016df4 <_Bfree>
 8017244:	4628      	mov	r0, r5
 8017246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801724a:	f842 0f04 	str.w	r0, [r2, #4]!
 801724e:	3301      	adds	r3, #1
 8017250:	e7c5      	b.n	80171de <__lshift+0x4a>
 8017252:	3904      	subs	r1, #4
 8017254:	f853 2b04 	ldr.w	r2, [r3], #4
 8017258:	f841 2f04 	str.w	r2, [r1, #4]!
 801725c:	459c      	cmp	ip, r3
 801725e:	d8f9      	bhi.n	8017254 <__lshift+0xc0>
 8017260:	e7ea      	b.n	8017238 <__lshift+0xa4>
 8017262:	bf00      	nop
 8017264:	08019f15 	.word	0x08019f15
 8017268:	08019f26 	.word	0x08019f26

0801726c <__mcmp>:
 801726c:	b530      	push	{r4, r5, lr}
 801726e:	6902      	ldr	r2, [r0, #16]
 8017270:	690c      	ldr	r4, [r1, #16]
 8017272:	1b12      	subs	r2, r2, r4
 8017274:	d10e      	bne.n	8017294 <__mcmp+0x28>
 8017276:	f100 0314 	add.w	r3, r0, #20
 801727a:	3114      	adds	r1, #20
 801727c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017280:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017284:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017288:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801728c:	42a5      	cmp	r5, r4
 801728e:	d003      	beq.n	8017298 <__mcmp+0x2c>
 8017290:	d305      	bcc.n	801729e <__mcmp+0x32>
 8017292:	2201      	movs	r2, #1
 8017294:	4610      	mov	r0, r2
 8017296:	bd30      	pop	{r4, r5, pc}
 8017298:	4283      	cmp	r3, r0
 801729a:	d3f3      	bcc.n	8017284 <__mcmp+0x18>
 801729c:	e7fa      	b.n	8017294 <__mcmp+0x28>
 801729e:	f04f 32ff 	mov.w	r2, #4294967295
 80172a2:	e7f7      	b.n	8017294 <__mcmp+0x28>

080172a4 <__mdiff>:
 80172a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172a8:	460c      	mov	r4, r1
 80172aa:	4606      	mov	r6, r0
 80172ac:	4611      	mov	r1, r2
 80172ae:	4620      	mov	r0, r4
 80172b0:	4690      	mov	r8, r2
 80172b2:	f7ff ffdb 	bl	801726c <__mcmp>
 80172b6:	1e05      	subs	r5, r0, #0
 80172b8:	d110      	bne.n	80172dc <__mdiff+0x38>
 80172ba:	4629      	mov	r1, r5
 80172bc:	4630      	mov	r0, r6
 80172be:	f7ff fd59 	bl	8016d74 <_Balloc>
 80172c2:	b930      	cbnz	r0, 80172d2 <__mdiff+0x2e>
 80172c4:	4b3a      	ldr	r3, [pc, #232]	; (80173b0 <__mdiff+0x10c>)
 80172c6:	4602      	mov	r2, r0
 80172c8:	f240 2137 	movw	r1, #567	; 0x237
 80172cc:	4839      	ldr	r0, [pc, #228]	; (80173b4 <__mdiff+0x110>)
 80172ce:	f000 fafd 	bl	80178cc <__assert_func>
 80172d2:	2301      	movs	r3, #1
 80172d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80172d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172dc:	bfa4      	itt	ge
 80172de:	4643      	movge	r3, r8
 80172e0:	46a0      	movge	r8, r4
 80172e2:	4630      	mov	r0, r6
 80172e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80172e8:	bfa6      	itte	ge
 80172ea:	461c      	movge	r4, r3
 80172ec:	2500      	movge	r5, #0
 80172ee:	2501      	movlt	r5, #1
 80172f0:	f7ff fd40 	bl	8016d74 <_Balloc>
 80172f4:	b920      	cbnz	r0, 8017300 <__mdiff+0x5c>
 80172f6:	4b2e      	ldr	r3, [pc, #184]	; (80173b0 <__mdiff+0x10c>)
 80172f8:	4602      	mov	r2, r0
 80172fa:	f240 2145 	movw	r1, #581	; 0x245
 80172fe:	e7e5      	b.n	80172cc <__mdiff+0x28>
 8017300:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017304:	6926      	ldr	r6, [r4, #16]
 8017306:	60c5      	str	r5, [r0, #12]
 8017308:	f104 0914 	add.w	r9, r4, #20
 801730c:	f108 0514 	add.w	r5, r8, #20
 8017310:	f100 0e14 	add.w	lr, r0, #20
 8017314:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017318:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801731c:	f108 0210 	add.w	r2, r8, #16
 8017320:	46f2      	mov	sl, lr
 8017322:	2100      	movs	r1, #0
 8017324:	f859 3b04 	ldr.w	r3, [r9], #4
 8017328:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801732c:	fa11 f88b 	uxtah	r8, r1, fp
 8017330:	b299      	uxth	r1, r3
 8017332:	0c1b      	lsrs	r3, r3, #16
 8017334:	eba8 0801 	sub.w	r8, r8, r1
 8017338:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801733c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017340:	fa1f f888 	uxth.w	r8, r8
 8017344:	1419      	asrs	r1, r3, #16
 8017346:	454e      	cmp	r6, r9
 8017348:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801734c:	f84a 3b04 	str.w	r3, [sl], #4
 8017350:	d8e8      	bhi.n	8017324 <__mdiff+0x80>
 8017352:	1b33      	subs	r3, r6, r4
 8017354:	3b15      	subs	r3, #21
 8017356:	f023 0303 	bic.w	r3, r3, #3
 801735a:	3304      	adds	r3, #4
 801735c:	3415      	adds	r4, #21
 801735e:	42a6      	cmp	r6, r4
 8017360:	bf38      	it	cc
 8017362:	2304      	movcc	r3, #4
 8017364:	441d      	add	r5, r3
 8017366:	4473      	add	r3, lr
 8017368:	469e      	mov	lr, r3
 801736a:	462e      	mov	r6, r5
 801736c:	4566      	cmp	r6, ip
 801736e:	d30e      	bcc.n	801738e <__mdiff+0xea>
 8017370:	f10c 0203 	add.w	r2, ip, #3
 8017374:	1b52      	subs	r2, r2, r5
 8017376:	f022 0203 	bic.w	r2, r2, #3
 801737a:	3d03      	subs	r5, #3
 801737c:	45ac      	cmp	ip, r5
 801737e:	bf38      	it	cc
 8017380:	2200      	movcc	r2, #0
 8017382:	4413      	add	r3, r2
 8017384:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017388:	b17a      	cbz	r2, 80173aa <__mdiff+0x106>
 801738a:	6107      	str	r7, [r0, #16]
 801738c:	e7a4      	b.n	80172d8 <__mdiff+0x34>
 801738e:	f856 8b04 	ldr.w	r8, [r6], #4
 8017392:	fa11 f288 	uxtah	r2, r1, r8
 8017396:	1414      	asrs	r4, r2, #16
 8017398:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801739c:	b292      	uxth	r2, r2
 801739e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80173a2:	f84e 2b04 	str.w	r2, [lr], #4
 80173a6:	1421      	asrs	r1, r4, #16
 80173a8:	e7e0      	b.n	801736c <__mdiff+0xc8>
 80173aa:	3f01      	subs	r7, #1
 80173ac:	e7ea      	b.n	8017384 <__mdiff+0xe0>
 80173ae:	bf00      	nop
 80173b0:	08019f15 	.word	0x08019f15
 80173b4:	08019f26 	.word	0x08019f26

080173b8 <__d2b>:
 80173b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80173bc:	460f      	mov	r7, r1
 80173be:	2101      	movs	r1, #1
 80173c0:	ec59 8b10 	vmov	r8, r9, d0
 80173c4:	4616      	mov	r6, r2
 80173c6:	f7ff fcd5 	bl	8016d74 <_Balloc>
 80173ca:	4604      	mov	r4, r0
 80173cc:	b930      	cbnz	r0, 80173dc <__d2b+0x24>
 80173ce:	4602      	mov	r2, r0
 80173d0:	4b24      	ldr	r3, [pc, #144]	; (8017464 <__d2b+0xac>)
 80173d2:	4825      	ldr	r0, [pc, #148]	; (8017468 <__d2b+0xb0>)
 80173d4:	f240 310f 	movw	r1, #783	; 0x30f
 80173d8:	f000 fa78 	bl	80178cc <__assert_func>
 80173dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80173e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80173e4:	bb2d      	cbnz	r5, 8017432 <__d2b+0x7a>
 80173e6:	9301      	str	r3, [sp, #4]
 80173e8:	f1b8 0300 	subs.w	r3, r8, #0
 80173ec:	d026      	beq.n	801743c <__d2b+0x84>
 80173ee:	4668      	mov	r0, sp
 80173f0:	9300      	str	r3, [sp, #0]
 80173f2:	f7ff fd87 	bl	8016f04 <__lo0bits>
 80173f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80173fa:	b1e8      	cbz	r0, 8017438 <__d2b+0x80>
 80173fc:	f1c0 0320 	rsb	r3, r0, #32
 8017400:	fa02 f303 	lsl.w	r3, r2, r3
 8017404:	430b      	orrs	r3, r1
 8017406:	40c2      	lsrs	r2, r0
 8017408:	6163      	str	r3, [r4, #20]
 801740a:	9201      	str	r2, [sp, #4]
 801740c:	9b01      	ldr	r3, [sp, #4]
 801740e:	61a3      	str	r3, [r4, #24]
 8017410:	2b00      	cmp	r3, #0
 8017412:	bf14      	ite	ne
 8017414:	2202      	movne	r2, #2
 8017416:	2201      	moveq	r2, #1
 8017418:	6122      	str	r2, [r4, #16]
 801741a:	b1bd      	cbz	r5, 801744c <__d2b+0x94>
 801741c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017420:	4405      	add	r5, r0
 8017422:	603d      	str	r5, [r7, #0]
 8017424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017428:	6030      	str	r0, [r6, #0]
 801742a:	4620      	mov	r0, r4
 801742c:	b003      	add	sp, #12
 801742e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017436:	e7d6      	b.n	80173e6 <__d2b+0x2e>
 8017438:	6161      	str	r1, [r4, #20]
 801743a:	e7e7      	b.n	801740c <__d2b+0x54>
 801743c:	a801      	add	r0, sp, #4
 801743e:	f7ff fd61 	bl	8016f04 <__lo0bits>
 8017442:	9b01      	ldr	r3, [sp, #4]
 8017444:	6163      	str	r3, [r4, #20]
 8017446:	3020      	adds	r0, #32
 8017448:	2201      	movs	r2, #1
 801744a:	e7e5      	b.n	8017418 <__d2b+0x60>
 801744c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017450:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017454:	6038      	str	r0, [r7, #0]
 8017456:	6918      	ldr	r0, [r3, #16]
 8017458:	f7ff fd34 	bl	8016ec4 <__hi0bits>
 801745c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017460:	e7e2      	b.n	8017428 <__d2b+0x70>
 8017462:	bf00      	nop
 8017464:	08019f15 	.word	0x08019f15
 8017468:	08019f26 	.word	0x08019f26

0801746c <__ssputs_r>:
 801746c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017470:	688e      	ldr	r6, [r1, #8]
 8017472:	461f      	mov	r7, r3
 8017474:	42be      	cmp	r6, r7
 8017476:	680b      	ldr	r3, [r1, #0]
 8017478:	4682      	mov	sl, r0
 801747a:	460c      	mov	r4, r1
 801747c:	4690      	mov	r8, r2
 801747e:	d82c      	bhi.n	80174da <__ssputs_r+0x6e>
 8017480:	898a      	ldrh	r2, [r1, #12]
 8017482:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017486:	d026      	beq.n	80174d6 <__ssputs_r+0x6a>
 8017488:	6965      	ldr	r5, [r4, #20]
 801748a:	6909      	ldr	r1, [r1, #16]
 801748c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017490:	eba3 0901 	sub.w	r9, r3, r1
 8017494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017498:	1c7b      	adds	r3, r7, #1
 801749a:	444b      	add	r3, r9
 801749c:	106d      	asrs	r5, r5, #1
 801749e:	429d      	cmp	r5, r3
 80174a0:	bf38      	it	cc
 80174a2:	461d      	movcc	r5, r3
 80174a4:	0553      	lsls	r3, r2, #21
 80174a6:	d527      	bpl.n	80174f8 <__ssputs_r+0x8c>
 80174a8:	4629      	mov	r1, r5
 80174aa:	f7ff fbd7 	bl	8016c5c <_malloc_r>
 80174ae:	4606      	mov	r6, r0
 80174b0:	b360      	cbz	r0, 801750c <__ssputs_r+0xa0>
 80174b2:	6921      	ldr	r1, [r4, #16]
 80174b4:	464a      	mov	r2, r9
 80174b6:	f7fe fcd4 	bl	8015e62 <memcpy>
 80174ba:	89a3      	ldrh	r3, [r4, #12]
 80174bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80174c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174c4:	81a3      	strh	r3, [r4, #12]
 80174c6:	6126      	str	r6, [r4, #16]
 80174c8:	6165      	str	r5, [r4, #20]
 80174ca:	444e      	add	r6, r9
 80174cc:	eba5 0509 	sub.w	r5, r5, r9
 80174d0:	6026      	str	r6, [r4, #0]
 80174d2:	60a5      	str	r5, [r4, #8]
 80174d4:	463e      	mov	r6, r7
 80174d6:	42be      	cmp	r6, r7
 80174d8:	d900      	bls.n	80174dc <__ssputs_r+0x70>
 80174da:	463e      	mov	r6, r7
 80174dc:	6820      	ldr	r0, [r4, #0]
 80174de:	4632      	mov	r2, r6
 80174e0:	4641      	mov	r1, r8
 80174e2:	f000 f9c9 	bl	8017878 <memmove>
 80174e6:	68a3      	ldr	r3, [r4, #8]
 80174e8:	1b9b      	subs	r3, r3, r6
 80174ea:	60a3      	str	r3, [r4, #8]
 80174ec:	6823      	ldr	r3, [r4, #0]
 80174ee:	4433      	add	r3, r6
 80174f0:	6023      	str	r3, [r4, #0]
 80174f2:	2000      	movs	r0, #0
 80174f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174f8:	462a      	mov	r2, r5
 80174fa:	f000 fa2d 	bl	8017958 <_realloc_r>
 80174fe:	4606      	mov	r6, r0
 8017500:	2800      	cmp	r0, #0
 8017502:	d1e0      	bne.n	80174c6 <__ssputs_r+0x5a>
 8017504:	6921      	ldr	r1, [r4, #16]
 8017506:	4650      	mov	r0, sl
 8017508:	f7ff fb34 	bl	8016b74 <_free_r>
 801750c:	230c      	movs	r3, #12
 801750e:	f8ca 3000 	str.w	r3, [sl]
 8017512:	89a3      	ldrh	r3, [r4, #12]
 8017514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017518:	81a3      	strh	r3, [r4, #12]
 801751a:	f04f 30ff 	mov.w	r0, #4294967295
 801751e:	e7e9      	b.n	80174f4 <__ssputs_r+0x88>

08017520 <_svfiprintf_r>:
 8017520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017524:	4698      	mov	r8, r3
 8017526:	898b      	ldrh	r3, [r1, #12]
 8017528:	061b      	lsls	r3, r3, #24
 801752a:	b09d      	sub	sp, #116	; 0x74
 801752c:	4607      	mov	r7, r0
 801752e:	460d      	mov	r5, r1
 8017530:	4614      	mov	r4, r2
 8017532:	d50e      	bpl.n	8017552 <_svfiprintf_r+0x32>
 8017534:	690b      	ldr	r3, [r1, #16]
 8017536:	b963      	cbnz	r3, 8017552 <_svfiprintf_r+0x32>
 8017538:	2140      	movs	r1, #64	; 0x40
 801753a:	f7ff fb8f 	bl	8016c5c <_malloc_r>
 801753e:	6028      	str	r0, [r5, #0]
 8017540:	6128      	str	r0, [r5, #16]
 8017542:	b920      	cbnz	r0, 801754e <_svfiprintf_r+0x2e>
 8017544:	230c      	movs	r3, #12
 8017546:	603b      	str	r3, [r7, #0]
 8017548:	f04f 30ff 	mov.w	r0, #4294967295
 801754c:	e0d0      	b.n	80176f0 <_svfiprintf_r+0x1d0>
 801754e:	2340      	movs	r3, #64	; 0x40
 8017550:	616b      	str	r3, [r5, #20]
 8017552:	2300      	movs	r3, #0
 8017554:	9309      	str	r3, [sp, #36]	; 0x24
 8017556:	2320      	movs	r3, #32
 8017558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801755c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017560:	2330      	movs	r3, #48	; 0x30
 8017562:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017708 <_svfiprintf_r+0x1e8>
 8017566:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801756a:	f04f 0901 	mov.w	r9, #1
 801756e:	4623      	mov	r3, r4
 8017570:	469a      	mov	sl, r3
 8017572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017576:	b10a      	cbz	r2, 801757c <_svfiprintf_r+0x5c>
 8017578:	2a25      	cmp	r2, #37	; 0x25
 801757a:	d1f9      	bne.n	8017570 <_svfiprintf_r+0x50>
 801757c:	ebba 0b04 	subs.w	fp, sl, r4
 8017580:	d00b      	beq.n	801759a <_svfiprintf_r+0x7a>
 8017582:	465b      	mov	r3, fp
 8017584:	4622      	mov	r2, r4
 8017586:	4629      	mov	r1, r5
 8017588:	4638      	mov	r0, r7
 801758a:	f7ff ff6f 	bl	801746c <__ssputs_r>
 801758e:	3001      	adds	r0, #1
 8017590:	f000 80a9 	beq.w	80176e6 <_svfiprintf_r+0x1c6>
 8017594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017596:	445a      	add	r2, fp
 8017598:	9209      	str	r2, [sp, #36]	; 0x24
 801759a:	f89a 3000 	ldrb.w	r3, [sl]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	f000 80a1 	beq.w	80176e6 <_svfiprintf_r+0x1c6>
 80175a4:	2300      	movs	r3, #0
 80175a6:	f04f 32ff 	mov.w	r2, #4294967295
 80175aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175ae:	f10a 0a01 	add.w	sl, sl, #1
 80175b2:	9304      	str	r3, [sp, #16]
 80175b4:	9307      	str	r3, [sp, #28]
 80175b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80175ba:	931a      	str	r3, [sp, #104]	; 0x68
 80175bc:	4654      	mov	r4, sl
 80175be:	2205      	movs	r2, #5
 80175c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175c4:	4850      	ldr	r0, [pc, #320]	; (8017708 <_svfiprintf_r+0x1e8>)
 80175c6:	f7e8 fe33 	bl	8000230 <memchr>
 80175ca:	9a04      	ldr	r2, [sp, #16]
 80175cc:	b9d8      	cbnz	r0, 8017606 <_svfiprintf_r+0xe6>
 80175ce:	06d0      	lsls	r0, r2, #27
 80175d0:	bf44      	itt	mi
 80175d2:	2320      	movmi	r3, #32
 80175d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175d8:	0711      	lsls	r1, r2, #28
 80175da:	bf44      	itt	mi
 80175dc:	232b      	movmi	r3, #43	; 0x2b
 80175de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175e2:	f89a 3000 	ldrb.w	r3, [sl]
 80175e6:	2b2a      	cmp	r3, #42	; 0x2a
 80175e8:	d015      	beq.n	8017616 <_svfiprintf_r+0xf6>
 80175ea:	9a07      	ldr	r2, [sp, #28]
 80175ec:	4654      	mov	r4, sl
 80175ee:	2000      	movs	r0, #0
 80175f0:	f04f 0c0a 	mov.w	ip, #10
 80175f4:	4621      	mov	r1, r4
 80175f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175fa:	3b30      	subs	r3, #48	; 0x30
 80175fc:	2b09      	cmp	r3, #9
 80175fe:	d94d      	bls.n	801769c <_svfiprintf_r+0x17c>
 8017600:	b1b0      	cbz	r0, 8017630 <_svfiprintf_r+0x110>
 8017602:	9207      	str	r2, [sp, #28]
 8017604:	e014      	b.n	8017630 <_svfiprintf_r+0x110>
 8017606:	eba0 0308 	sub.w	r3, r0, r8
 801760a:	fa09 f303 	lsl.w	r3, r9, r3
 801760e:	4313      	orrs	r3, r2
 8017610:	9304      	str	r3, [sp, #16]
 8017612:	46a2      	mov	sl, r4
 8017614:	e7d2      	b.n	80175bc <_svfiprintf_r+0x9c>
 8017616:	9b03      	ldr	r3, [sp, #12]
 8017618:	1d19      	adds	r1, r3, #4
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	9103      	str	r1, [sp, #12]
 801761e:	2b00      	cmp	r3, #0
 8017620:	bfbb      	ittet	lt
 8017622:	425b      	neglt	r3, r3
 8017624:	f042 0202 	orrlt.w	r2, r2, #2
 8017628:	9307      	strge	r3, [sp, #28]
 801762a:	9307      	strlt	r3, [sp, #28]
 801762c:	bfb8      	it	lt
 801762e:	9204      	strlt	r2, [sp, #16]
 8017630:	7823      	ldrb	r3, [r4, #0]
 8017632:	2b2e      	cmp	r3, #46	; 0x2e
 8017634:	d10c      	bne.n	8017650 <_svfiprintf_r+0x130>
 8017636:	7863      	ldrb	r3, [r4, #1]
 8017638:	2b2a      	cmp	r3, #42	; 0x2a
 801763a:	d134      	bne.n	80176a6 <_svfiprintf_r+0x186>
 801763c:	9b03      	ldr	r3, [sp, #12]
 801763e:	1d1a      	adds	r2, r3, #4
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	9203      	str	r2, [sp, #12]
 8017644:	2b00      	cmp	r3, #0
 8017646:	bfb8      	it	lt
 8017648:	f04f 33ff 	movlt.w	r3, #4294967295
 801764c:	3402      	adds	r4, #2
 801764e:	9305      	str	r3, [sp, #20]
 8017650:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017718 <_svfiprintf_r+0x1f8>
 8017654:	7821      	ldrb	r1, [r4, #0]
 8017656:	2203      	movs	r2, #3
 8017658:	4650      	mov	r0, sl
 801765a:	f7e8 fde9 	bl	8000230 <memchr>
 801765e:	b138      	cbz	r0, 8017670 <_svfiprintf_r+0x150>
 8017660:	9b04      	ldr	r3, [sp, #16]
 8017662:	eba0 000a 	sub.w	r0, r0, sl
 8017666:	2240      	movs	r2, #64	; 0x40
 8017668:	4082      	lsls	r2, r0
 801766a:	4313      	orrs	r3, r2
 801766c:	3401      	adds	r4, #1
 801766e:	9304      	str	r3, [sp, #16]
 8017670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017674:	4825      	ldr	r0, [pc, #148]	; (801770c <_svfiprintf_r+0x1ec>)
 8017676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801767a:	2206      	movs	r2, #6
 801767c:	f7e8 fdd8 	bl	8000230 <memchr>
 8017680:	2800      	cmp	r0, #0
 8017682:	d038      	beq.n	80176f6 <_svfiprintf_r+0x1d6>
 8017684:	4b22      	ldr	r3, [pc, #136]	; (8017710 <_svfiprintf_r+0x1f0>)
 8017686:	bb1b      	cbnz	r3, 80176d0 <_svfiprintf_r+0x1b0>
 8017688:	9b03      	ldr	r3, [sp, #12]
 801768a:	3307      	adds	r3, #7
 801768c:	f023 0307 	bic.w	r3, r3, #7
 8017690:	3308      	adds	r3, #8
 8017692:	9303      	str	r3, [sp, #12]
 8017694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017696:	4433      	add	r3, r6
 8017698:	9309      	str	r3, [sp, #36]	; 0x24
 801769a:	e768      	b.n	801756e <_svfiprintf_r+0x4e>
 801769c:	fb0c 3202 	mla	r2, ip, r2, r3
 80176a0:	460c      	mov	r4, r1
 80176a2:	2001      	movs	r0, #1
 80176a4:	e7a6      	b.n	80175f4 <_svfiprintf_r+0xd4>
 80176a6:	2300      	movs	r3, #0
 80176a8:	3401      	adds	r4, #1
 80176aa:	9305      	str	r3, [sp, #20]
 80176ac:	4619      	mov	r1, r3
 80176ae:	f04f 0c0a 	mov.w	ip, #10
 80176b2:	4620      	mov	r0, r4
 80176b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176b8:	3a30      	subs	r2, #48	; 0x30
 80176ba:	2a09      	cmp	r2, #9
 80176bc:	d903      	bls.n	80176c6 <_svfiprintf_r+0x1a6>
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d0c6      	beq.n	8017650 <_svfiprintf_r+0x130>
 80176c2:	9105      	str	r1, [sp, #20]
 80176c4:	e7c4      	b.n	8017650 <_svfiprintf_r+0x130>
 80176c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80176ca:	4604      	mov	r4, r0
 80176cc:	2301      	movs	r3, #1
 80176ce:	e7f0      	b.n	80176b2 <_svfiprintf_r+0x192>
 80176d0:	ab03      	add	r3, sp, #12
 80176d2:	9300      	str	r3, [sp, #0]
 80176d4:	462a      	mov	r2, r5
 80176d6:	4b0f      	ldr	r3, [pc, #60]	; (8017714 <_svfiprintf_r+0x1f4>)
 80176d8:	a904      	add	r1, sp, #16
 80176da:	4638      	mov	r0, r7
 80176dc:	f7fd fe2e 	bl	801533c <_printf_float>
 80176e0:	1c42      	adds	r2, r0, #1
 80176e2:	4606      	mov	r6, r0
 80176e4:	d1d6      	bne.n	8017694 <_svfiprintf_r+0x174>
 80176e6:	89ab      	ldrh	r3, [r5, #12]
 80176e8:	065b      	lsls	r3, r3, #25
 80176ea:	f53f af2d 	bmi.w	8017548 <_svfiprintf_r+0x28>
 80176ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176f0:	b01d      	add	sp, #116	; 0x74
 80176f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176f6:	ab03      	add	r3, sp, #12
 80176f8:	9300      	str	r3, [sp, #0]
 80176fa:	462a      	mov	r2, r5
 80176fc:	4b05      	ldr	r3, [pc, #20]	; (8017714 <_svfiprintf_r+0x1f4>)
 80176fe:	a904      	add	r1, sp, #16
 8017700:	4638      	mov	r0, r7
 8017702:	f7fe f8bf 	bl	8015884 <_printf_i>
 8017706:	e7eb      	b.n	80176e0 <_svfiprintf_r+0x1c0>
 8017708:	0801a07c 	.word	0x0801a07c
 801770c:	0801a086 	.word	0x0801a086
 8017710:	0801533d 	.word	0x0801533d
 8017714:	0801746d 	.word	0x0801746d
 8017718:	0801a082 	.word	0x0801a082

0801771c <__sflush_r>:
 801771c:	898a      	ldrh	r2, [r1, #12]
 801771e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017722:	4605      	mov	r5, r0
 8017724:	0710      	lsls	r0, r2, #28
 8017726:	460c      	mov	r4, r1
 8017728:	d458      	bmi.n	80177dc <__sflush_r+0xc0>
 801772a:	684b      	ldr	r3, [r1, #4]
 801772c:	2b00      	cmp	r3, #0
 801772e:	dc05      	bgt.n	801773c <__sflush_r+0x20>
 8017730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017732:	2b00      	cmp	r3, #0
 8017734:	dc02      	bgt.n	801773c <__sflush_r+0x20>
 8017736:	2000      	movs	r0, #0
 8017738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801773c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801773e:	2e00      	cmp	r6, #0
 8017740:	d0f9      	beq.n	8017736 <__sflush_r+0x1a>
 8017742:	2300      	movs	r3, #0
 8017744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017748:	682f      	ldr	r7, [r5, #0]
 801774a:	6a21      	ldr	r1, [r4, #32]
 801774c:	602b      	str	r3, [r5, #0]
 801774e:	d032      	beq.n	80177b6 <__sflush_r+0x9a>
 8017750:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017752:	89a3      	ldrh	r3, [r4, #12]
 8017754:	075a      	lsls	r2, r3, #29
 8017756:	d505      	bpl.n	8017764 <__sflush_r+0x48>
 8017758:	6863      	ldr	r3, [r4, #4]
 801775a:	1ac0      	subs	r0, r0, r3
 801775c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801775e:	b10b      	cbz	r3, 8017764 <__sflush_r+0x48>
 8017760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017762:	1ac0      	subs	r0, r0, r3
 8017764:	2300      	movs	r3, #0
 8017766:	4602      	mov	r2, r0
 8017768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801776a:	6a21      	ldr	r1, [r4, #32]
 801776c:	4628      	mov	r0, r5
 801776e:	47b0      	blx	r6
 8017770:	1c43      	adds	r3, r0, #1
 8017772:	89a3      	ldrh	r3, [r4, #12]
 8017774:	d106      	bne.n	8017784 <__sflush_r+0x68>
 8017776:	6829      	ldr	r1, [r5, #0]
 8017778:	291d      	cmp	r1, #29
 801777a:	d82b      	bhi.n	80177d4 <__sflush_r+0xb8>
 801777c:	4a29      	ldr	r2, [pc, #164]	; (8017824 <__sflush_r+0x108>)
 801777e:	410a      	asrs	r2, r1
 8017780:	07d6      	lsls	r6, r2, #31
 8017782:	d427      	bmi.n	80177d4 <__sflush_r+0xb8>
 8017784:	2200      	movs	r2, #0
 8017786:	6062      	str	r2, [r4, #4]
 8017788:	04d9      	lsls	r1, r3, #19
 801778a:	6922      	ldr	r2, [r4, #16]
 801778c:	6022      	str	r2, [r4, #0]
 801778e:	d504      	bpl.n	801779a <__sflush_r+0x7e>
 8017790:	1c42      	adds	r2, r0, #1
 8017792:	d101      	bne.n	8017798 <__sflush_r+0x7c>
 8017794:	682b      	ldr	r3, [r5, #0]
 8017796:	b903      	cbnz	r3, 801779a <__sflush_r+0x7e>
 8017798:	6560      	str	r0, [r4, #84]	; 0x54
 801779a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801779c:	602f      	str	r7, [r5, #0]
 801779e:	2900      	cmp	r1, #0
 80177a0:	d0c9      	beq.n	8017736 <__sflush_r+0x1a>
 80177a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177a6:	4299      	cmp	r1, r3
 80177a8:	d002      	beq.n	80177b0 <__sflush_r+0x94>
 80177aa:	4628      	mov	r0, r5
 80177ac:	f7ff f9e2 	bl	8016b74 <_free_r>
 80177b0:	2000      	movs	r0, #0
 80177b2:	6360      	str	r0, [r4, #52]	; 0x34
 80177b4:	e7c0      	b.n	8017738 <__sflush_r+0x1c>
 80177b6:	2301      	movs	r3, #1
 80177b8:	4628      	mov	r0, r5
 80177ba:	47b0      	blx	r6
 80177bc:	1c41      	adds	r1, r0, #1
 80177be:	d1c8      	bne.n	8017752 <__sflush_r+0x36>
 80177c0:	682b      	ldr	r3, [r5, #0]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d0c5      	beq.n	8017752 <__sflush_r+0x36>
 80177c6:	2b1d      	cmp	r3, #29
 80177c8:	d001      	beq.n	80177ce <__sflush_r+0xb2>
 80177ca:	2b16      	cmp	r3, #22
 80177cc:	d101      	bne.n	80177d2 <__sflush_r+0xb6>
 80177ce:	602f      	str	r7, [r5, #0]
 80177d0:	e7b1      	b.n	8017736 <__sflush_r+0x1a>
 80177d2:	89a3      	ldrh	r3, [r4, #12]
 80177d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177d8:	81a3      	strh	r3, [r4, #12]
 80177da:	e7ad      	b.n	8017738 <__sflush_r+0x1c>
 80177dc:	690f      	ldr	r7, [r1, #16]
 80177de:	2f00      	cmp	r7, #0
 80177e0:	d0a9      	beq.n	8017736 <__sflush_r+0x1a>
 80177e2:	0793      	lsls	r3, r2, #30
 80177e4:	680e      	ldr	r6, [r1, #0]
 80177e6:	bf08      	it	eq
 80177e8:	694b      	ldreq	r3, [r1, #20]
 80177ea:	600f      	str	r7, [r1, #0]
 80177ec:	bf18      	it	ne
 80177ee:	2300      	movne	r3, #0
 80177f0:	eba6 0807 	sub.w	r8, r6, r7
 80177f4:	608b      	str	r3, [r1, #8]
 80177f6:	f1b8 0f00 	cmp.w	r8, #0
 80177fa:	dd9c      	ble.n	8017736 <__sflush_r+0x1a>
 80177fc:	6a21      	ldr	r1, [r4, #32]
 80177fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017800:	4643      	mov	r3, r8
 8017802:	463a      	mov	r2, r7
 8017804:	4628      	mov	r0, r5
 8017806:	47b0      	blx	r6
 8017808:	2800      	cmp	r0, #0
 801780a:	dc06      	bgt.n	801781a <__sflush_r+0xfe>
 801780c:	89a3      	ldrh	r3, [r4, #12]
 801780e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017812:	81a3      	strh	r3, [r4, #12]
 8017814:	f04f 30ff 	mov.w	r0, #4294967295
 8017818:	e78e      	b.n	8017738 <__sflush_r+0x1c>
 801781a:	4407      	add	r7, r0
 801781c:	eba8 0800 	sub.w	r8, r8, r0
 8017820:	e7e9      	b.n	80177f6 <__sflush_r+0xda>
 8017822:	bf00      	nop
 8017824:	dfbffffe 	.word	0xdfbffffe

08017828 <_fflush_r>:
 8017828:	b538      	push	{r3, r4, r5, lr}
 801782a:	690b      	ldr	r3, [r1, #16]
 801782c:	4605      	mov	r5, r0
 801782e:	460c      	mov	r4, r1
 8017830:	b913      	cbnz	r3, 8017838 <_fflush_r+0x10>
 8017832:	2500      	movs	r5, #0
 8017834:	4628      	mov	r0, r5
 8017836:	bd38      	pop	{r3, r4, r5, pc}
 8017838:	b118      	cbz	r0, 8017842 <_fflush_r+0x1a>
 801783a:	6a03      	ldr	r3, [r0, #32]
 801783c:	b90b      	cbnz	r3, 8017842 <_fflush_r+0x1a>
 801783e:	f7fe f9cf 	bl	8015be0 <__sinit>
 8017842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d0f3      	beq.n	8017832 <_fflush_r+0xa>
 801784a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801784c:	07d0      	lsls	r0, r2, #31
 801784e:	d404      	bmi.n	801785a <_fflush_r+0x32>
 8017850:	0599      	lsls	r1, r3, #22
 8017852:	d402      	bmi.n	801785a <_fflush_r+0x32>
 8017854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017856:	f7fe fafa 	bl	8015e4e <__retarget_lock_acquire_recursive>
 801785a:	4628      	mov	r0, r5
 801785c:	4621      	mov	r1, r4
 801785e:	f7ff ff5d 	bl	801771c <__sflush_r>
 8017862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017864:	07da      	lsls	r2, r3, #31
 8017866:	4605      	mov	r5, r0
 8017868:	d4e4      	bmi.n	8017834 <_fflush_r+0xc>
 801786a:	89a3      	ldrh	r3, [r4, #12]
 801786c:	059b      	lsls	r3, r3, #22
 801786e:	d4e1      	bmi.n	8017834 <_fflush_r+0xc>
 8017870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017872:	f7fe faed 	bl	8015e50 <__retarget_lock_release_recursive>
 8017876:	e7dd      	b.n	8017834 <_fflush_r+0xc>

08017878 <memmove>:
 8017878:	4288      	cmp	r0, r1
 801787a:	b510      	push	{r4, lr}
 801787c:	eb01 0402 	add.w	r4, r1, r2
 8017880:	d902      	bls.n	8017888 <memmove+0x10>
 8017882:	4284      	cmp	r4, r0
 8017884:	4623      	mov	r3, r4
 8017886:	d807      	bhi.n	8017898 <memmove+0x20>
 8017888:	1e43      	subs	r3, r0, #1
 801788a:	42a1      	cmp	r1, r4
 801788c:	d008      	beq.n	80178a0 <memmove+0x28>
 801788e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017896:	e7f8      	b.n	801788a <memmove+0x12>
 8017898:	4402      	add	r2, r0
 801789a:	4601      	mov	r1, r0
 801789c:	428a      	cmp	r2, r1
 801789e:	d100      	bne.n	80178a2 <memmove+0x2a>
 80178a0:	bd10      	pop	{r4, pc}
 80178a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80178a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80178aa:	e7f7      	b.n	801789c <memmove+0x24>

080178ac <_sbrk_r>:
 80178ac:	b538      	push	{r3, r4, r5, lr}
 80178ae:	4d06      	ldr	r5, [pc, #24]	; (80178c8 <_sbrk_r+0x1c>)
 80178b0:	2300      	movs	r3, #0
 80178b2:	4604      	mov	r4, r0
 80178b4:	4608      	mov	r0, r1
 80178b6:	602b      	str	r3, [r5, #0]
 80178b8:	f7e9 fd70 	bl	800139c <_sbrk>
 80178bc:	1c43      	adds	r3, r0, #1
 80178be:	d102      	bne.n	80178c6 <_sbrk_r+0x1a>
 80178c0:	682b      	ldr	r3, [r5, #0]
 80178c2:	b103      	cbz	r3, 80178c6 <_sbrk_r+0x1a>
 80178c4:	6023      	str	r3, [r4, #0]
 80178c6:	bd38      	pop	{r3, r4, r5, pc}
 80178c8:	2000ed60 	.word	0x2000ed60

080178cc <__assert_func>:
 80178cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80178ce:	4614      	mov	r4, r2
 80178d0:	461a      	mov	r2, r3
 80178d2:	4b09      	ldr	r3, [pc, #36]	; (80178f8 <__assert_func+0x2c>)
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	4605      	mov	r5, r0
 80178d8:	68d8      	ldr	r0, [r3, #12]
 80178da:	b14c      	cbz	r4, 80178f0 <__assert_func+0x24>
 80178dc:	4b07      	ldr	r3, [pc, #28]	; (80178fc <__assert_func+0x30>)
 80178de:	9100      	str	r1, [sp, #0]
 80178e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80178e4:	4906      	ldr	r1, [pc, #24]	; (8017900 <__assert_func+0x34>)
 80178e6:	462b      	mov	r3, r5
 80178e8:	f000 f872 	bl	80179d0 <fiprintf>
 80178ec:	f000 f882 	bl	80179f4 <abort>
 80178f0:	4b04      	ldr	r3, [pc, #16]	; (8017904 <__assert_func+0x38>)
 80178f2:	461c      	mov	r4, r3
 80178f4:	e7f3      	b.n	80178de <__assert_func+0x12>
 80178f6:	bf00      	nop
 80178f8:	200021e4 	.word	0x200021e4
 80178fc:	0801a097 	.word	0x0801a097
 8017900:	0801a0a4 	.word	0x0801a0a4
 8017904:	0801a0d2 	.word	0x0801a0d2

08017908 <_calloc_r>:
 8017908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801790a:	fba1 2402 	umull	r2, r4, r1, r2
 801790e:	b94c      	cbnz	r4, 8017924 <_calloc_r+0x1c>
 8017910:	4611      	mov	r1, r2
 8017912:	9201      	str	r2, [sp, #4]
 8017914:	f7ff f9a2 	bl	8016c5c <_malloc_r>
 8017918:	9a01      	ldr	r2, [sp, #4]
 801791a:	4605      	mov	r5, r0
 801791c:	b930      	cbnz	r0, 801792c <_calloc_r+0x24>
 801791e:	4628      	mov	r0, r5
 8017920:	b003      	add	sp, #12
 8017922:	bd30      	pop	{r4, r5, pc}
 8017924:	220c      	movs	r2, #12
 8017926:	6002      	str	r2, [r0, #0]
 8017928:	2500      	movs	r5, #0
 801792a:	e7f8      	b.n	801791e <_calloc_r+0x16>
 801792c:	4621      	mov	r1, r4
 801792e:	f7fe fa11 	bl	8015d54 <memset>
 8017932:	e7f4      	b.n	801791e <_calloc_r+0x16>

08017934 <__ascii_mbtowc>:
 8017934:	b082      	sub	sp, #8
 8017936:	b901      	cbnz	r1, 801793a <__ascii_mbtowc+0x6>
 8017938:	a901      	add	r1, sp, #4
 801793a:	b142      	cbz	r2, 801794e <__ascii_mbtowc+0x1a>
 801793c:	b14b      	cbz	r3, 8017952 <__ascii_mbtowc+0x1e>
 801793e:	7813      	ldrb	r3, [r2, #0]
 8017940:	600b      	str	r3, [r1, #0]
 8017942:	7812      	ldrb	r2, [r2, #0]
 8017944:	1e10      	subs	r0, r2, #0
 8017946:	bf18      	it	ne
 8017948:	2001      	movne	r0, #1
 801794a:	b002      	add	sp, #8
 801794c:	4770      	bx	lr
 801794e:	4610      	mov	r0, r2
 8017950:	e7fb      	b.n	801794a <__ascii_mbtowc+0x16>
 8017952:	f06f 0001 	mvn.w	r0, #1
 8017956:	e7f8      	b.n	801794a <__ascii_mbtowc+0x16>

08017958 <_realloc_r>:
 8017958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801795c:	4680      	mov	r8, r0
 801795e:	4614      	mov	r4, r2
 8017960:	460e      	mov	r6, r1
 8017962:	b921      	cbnz	r1, 801796e <_realloc_r+0x16>
 8017964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017968:	4611      	mov	r1, r2
 801796a:	f7ff b977 	b.w	8016c5c <_malloc_r>
 801796e:	b92a      	cbnz	r2, 801797c <_realloc_r+0x24>
 8017970:	f7ff f900 	bl	8016b74 <_free_r>
 8017974:	4625      	mov	r5, r4
 8017976:	4628      	mov	r0, r5
 8017978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801797c:	f000 f841 	bl	8017a02 <_malloc_usable_size_r>
 8017980:	4284      	cmp	r4, r0
 8017982:	4607      	mov	r7, r0
 8017984:	d802      	bhi.n	801798c <_realloc_r+0x34>
 8017986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801798a:	d812      	bhi.n	80179b2 <_realloc_r+0x5a>
 801798c:	4621      	mov	r1, r4
 801798e:	4640      	mov	r0, r8
 8017990:	f7ff f964 	bl	8016c5c <_malloc_r>
 8017994:	4605      	mov	r5, r0
 8017996:	2800      	cmp	r0, #0
 8017998:	d0ed      	beq.n	8017976 <_realloc_r+0x1e>
 801799a:	42bc      	cmp	r4, r7
 801799c:	4622      	mov	r2, r4
 801799e:	4631      	mov	r1, r6
 80179a0:	bf28      	it	cs
 80179a2:	463a      	movcs	r2, r7
 80179a4:	f7fe fa5d 	bl	8015e62 <memcpy>
 80179a8:	4631      	mov	r1, r6
 80179aa:	4640      	mov	r0, r8
 80179ac:	f7ff f8e2 	bl	8016b74 <_free_r>
 80179b0:	e7e1      	b.n	8017976 <_realloc_r+0x1e>
 80179b2:	4635      	mov	r5, r6
 80179b4:	e7df      	b.n	8017976 <_realloc_r+0x1e>

080179b6 <__ascii_wctomb>:
 80179b6:	b149      	cbz	r1, 80179cc <__ascii_wctomb+0x16>
 80179b8:	2aff      	cmp	r2, #255	; 0xff
 80179ba:	bf85      	ittet	hi
 80179bc:	238a      	movhi	r3, #138	; 0x8a
 80179be:	6003      	strhi	r3, [r0, #0]
 80179c0:	700a      	strbls	r2, [r1, #0]
 80179c2:	f04f 30ff 	movhi.w	r0, #4294967295
 80179c6:	bf98      	it	ls
 80179c8:	2001      	movls	r0, #1
 80179ca:	4770      	bx	lr
 80179cc:	4608      	mov	r0, r1
 80179ce:	4770      	bx	lr

080179d0 <fiprintf>:
 80179d0:	b40e      	push	{r1, r2, r3}
 80179d2:	b503      	push	{r0, r1, lr}
 80179d4:	4601      	mov	r1, r0
 80179d6:	ab03      	add	r3, sp, #12
 80179d8:	4805      	ldr	r0, [pc, #20]	; (80179f0 <fiprintf+0x20>)
 80179da:	f853 2b04 	ldr.w	r2, [r3], #4
 80179de:	6800      	ldr	r0, [r0, #0]
 80179e0:	9301      	str	r3, [sp, #4]
 80179e2:	f000 f83f 	bl	8017a64 <_vfiprintf_r>
 80179e6:	b002      	add	sp, #8
 80179e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80179ec:	b003      	add	sp, #12
 80179ee:	4770      	bx	lr
 80179f0:	200021e4 	.word	0x200021e4

080179f4 <abort>:
 80179f4:	b508      	push	{r3, lr}
 80179f6:	2006      	movs	r0, #6
 80179f8:	f000 fa0c 	bl	8017e14 <raise>
 80179fc:	2001      	movs	r0, #1
 80179fe:	f7e9 fc55 	bl	80012ac <_exit>

08017a02 <_malloc_usable_size_r>:
 8017a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a06:	1f18      	subs	r0, r3, #4
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	bfbc      	itt	lt
 8017a0c:	580b      	ldrlt	r3, [r1, r0]
 8017a0e:	18c0      	addlt	r0, r0, r3
 8017a10:	4770      	bx	lr

08017a12 <__sfputc_r>:
 8017a12:	6893      	ldr	r3, [r2, #8]
 8017a14:	3b01      	subs	r3, #1
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	b410      	push	{r4}
 8017a1a:	6093      	str	r3, [r2, #8]
 8017a1c:	da08      	bge.n	8017a30 <__sfputc_r+0x1e>
 8017a1e:	6994      	ldr	r4, [r2, #24]
 8017a20:	42a3      	cmp	r3, r4
 8017a22:	db01      	blt.n	8017a28 <__sfputc_r+0x16>
 8017a24:	290a      	cmp	r1, #10
 8017a26:	d103      	bne.n	8017a30 <__sfputc_r+0x1e>
 8017a28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a2c:	f000 b934 	b.w	8017c98 <__swbuf_r>
 8017a30:	6813      	ldr	r3, [r2, #0]
 8017a32:	1c58      	adds	r0, r3, #1
 8017a34:	6010      	str	r0, [r2, #0]
 8017a36:	7019      	strb	r1, [r3, #0]
 8017a38:	4608      	mov	r0, r1
 8017a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a3e:	4770      	bx	lr

08017a40 <__sfputs_r>:
 8017a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a42:	4606      	mov	r6, r0
 8017a44:	460f      	mov	r7, r1
 8017a46:	4614      	mov	r4, r2
 8017a48:	18d5      	adds	r5, r2, r3
 8017a4a:	42ac      	cmp	r4, r5
 8017a4c:	d101      	bne.n	8017a52 <__sfputs_r+0x12>
 8017a4e:	2000      	movs	r0, #0
 8017a50:	e007      	b.n	8017a62 <__sfputs_r+0x22>
 8017a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a56:	463a      	mov	r2, r7
 8017a58:	4630      	mov	r0, r6
 8017a5a:	f7ff ffda 	bl	8017a12 <__sfputc_r>
 8017a5e:	1c43      	adds	r3, r0, #1
 8017a60:	d1f3      	bne.n	8017a4a <__sfputs_r+0xa>
 8017a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017a64 <_vfiprintf_r>:
 8017a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a68:	460d      	mov	r5, r1
 8017a6a:	b09d      	sub	sp, #116	; 0x74
 8017a6c:	4614      	mov	r4, r2
 8017a6e:	4698      	mov	r8, r3
 8017a70:	4606      	mov	r6, r0
 8017a72:	b118      	cbz	r0, 8017a7c <_vfiprintf_r+0x18>
 8017a74:	6a03      	ldr	r3, [r0, #32]
 8017a76:	b90b      	cbnz	r3, 8017a7c <_vfiprintf_r+0x18>
 8017a78:	f7fe f8b2 	bl	8015be0 <__sinit>
 8017a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017a7e:	07d9      	lsls	r1, r3, #31
 8017a80:	d405      	bmi.n	8017a8e <_vfiprintf_r+0x2a>
 8017a82:	89ab      	ldrh	r3, [r5, #12]
 8017a84:	059a      	lsls	r2, r3, #22
 8017a86:	d402      	bmi.n	8017a8e <_vfiprintf_r+0x2a>
 8017a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017a8a:	f7fe f9e0 	bl	8015e4e <__retarget_lock_acquire_recursive>
 8017a8e:	89ab      	ldrh	r3, [r5, #12]
 8017a90:	071b      	lsls	r3, r3, #28
 8017a92:	d501      	bpl.n	8017a98 <_vfiprintf_r+0x34>
 8017a94:	692b      	ldr	r3, [r5, #16]
 8017a96:	b99b      	cbnz	r3, 8017ac0 <_vfiprintf_r+0x5c>
 8017a98:	4629      	mov	r1, r5
 8017a9a:	4630      	mov	r0, r6
 8017a9c:	f000 f93a 	bl	8017d14 <__swsetup_r>
 8017aa0:	b170      	cbz	r0, 8017ac0 <_vfiprintf_r+0x5c>
 8017aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017aa4:	07dc      	lsls	r4, r3, #31
 8017aa6:	d504      	bpl.n	8017ab2 <_vfiprintf_r+0x4e>
 8017aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8017aac:	b01d      	add	sp, #116	; 0x74
 8017aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab2:	89ab      	ldrh	r3, [r5, #12]
 8017ab4:	0598      	lsls	r0, r3, #22
 8017ab6:	d4f7      	bmi.n	8017aa8 <_vfiprintf_r+0x44>
 8017ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017aba:	f7fe f9c9 	bl	8015e50 <__retarget_lock_release_recursive>
 8017abe:	e7f3      	b.n	8017aa8 <_vfiprintf_r+0x44>
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ac4:	2320      	movs	r3, #32
 8017ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ace:	2330      	movs	r3, #48	; 0x30
 8017ad0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017c84 <_vfiprintf_r+0x220>
 8017ad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ad8:	f04f 0901 	mov.w	r9, #1
 8017adc:	4623      	mov	r3, r4
 8017ade:	469a      	mov	sl, r3
 8017ae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ae4:	b10a      	cbz	r2, 8017aea <_vfiprintf_r+0x86>
 8017ae6:	2a25      	cmp	r2, #37	; 0x25
 8017ae8:	d1f9      	bne.n	8017ade <_vfiprintf_r+0x7a>
 8017aea:	ebba 0b04 	subs.w	fp, sl, r4
 8017aee:	d00b      	beq.n	8017b08 <_vfiprintf_r+0xa4>
 8017af0:	465b      	mov	r3, fp
 8017af2:	4622      	mov	r2, r4
 8017af4:	4629      	mov	r1, r5
 8017af6:	4630      	mov	r0, r6
 8017af8:	f7ff ffa2 	bl	8017a40 <__sfputs_r>
 8017afc:	3001      	adds	r0, #1
 8017afe:	f000 80a9 	beq.w	8017c54 <_vfiprintf_r+0x1f0>
 8017b02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b04:	445a      	add	r2, fp
 8017b06:	9209      	str	r2, [sp, #36]	; 0x24
 8017b08:	f89a 3000 	ldrb.w	r3, [sl]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	f000 80a1 	beq.w	8017c54 <_vfiprintf_r+0x1f0>
 8017b12:	2300      	movs	r3, #0
 8017b14:	f04f 32ff 	mov.w	r2, #4294967295
 8017b18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b1c:	f10a 0a01 	add.w	sl, sl, #1
 8017b20:	9304      	str	r3, [sp, #16]
 8017b22:	9307      	str	r3, [sp, #28]
 8017b24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b28:	931a      	str	r3, [sp, #104]	; 0x68
 8017b2a:	4654      	mov	r4, sl
 8017b2c:	2205      	movs	r2, #5
 8017b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b32:	4854      	ldr	r0, [pc, #336]	; (8017c84 <_vfiprintf_r+0x220>)
 8017b34:	f7e8 fb7c 	bl	8000230 <memchr>
 8017b38:	9a04      	ldr	r2, [sp, #16]
 8017b3a:	b9d8      	cbnz	r0, 8017b74 <_vfiprintf_r+0x110>
 8017b3c:	06d1      	lsls	r1, r2, #27
 8017b3e:	bf44      	itt	mi
 8017b40:	2320      	movmi	r3, #32
 8017b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b46:	0713      	lsls	r3, r2, #28
 8017b48:	bf44      	itt	mi
 8017b4a:	232b      	movmi	r3, #43	; 0x2b
 8017b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b50:	f89a 3000 	ldrb.w	r3, [sl]
 8017b54:	2b2a      	cmp	r3, #42	; 0x2a
 8017b56:	d015      	beq.n	8017b84 <_vfiprintf_r+0x120>
 8017b58:	9a07      	ldr	r2, [sp, #28]
 8017b5a:	4654      	mov	r4, sl
 8017b5c:	2000      	movs	r0, #0
 8017b5e:	f04f 0c0a 	mov.w	ip, #10
 8017b62:	4621      	mov	r1, r4
 8017b64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b68:	3b30      	subs	r3, #48	; 0x30
 8017b6a:	2b09      	cmp	r3, #9
 8017b6c:	d94d      	bls.n	8017c0a <_vfiprintf_r+0x1a6>
 8017b6e:	b1b0      	cbz	r0, 8017b9e <_vfiprintf_r+0x13a>
 8017b70:	9207      	str	r2, [sp, #28]
 8017b72:	e014      	b.n	8017b9e <_vfiprintf_r+0x13a>
 8017b74:	eba0 0308 	sub.w	r3, r0, r8
 8017b78:	fa09 f303 	lsl.w	r3, r9, r3
 8017b7c:	4313      	orrs	r3, r2
 8017b7e:	9304      	str	r3, [sp, #16]
 8017b80:	46a2      	mov	sl, r4
 8017b82:	e7d2      	b.n	8017b2a <_vfiprintf_r+0xc6>
 8017b84:	9b03      	ldr	r3, [sp, #12]
 8017b86:	1d19      	adds	r1, r3, #4
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	9103      	str	r1, [sp, #12]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	bfbb      	ittet	lt
 8017b90:	425b      	neglt	r3, r3
 8017b92:	f042 0202 	orrlt.w	r2, r2, #2
 8017b96:	9307      	strge	r3, [sp, #28]
 8017b98:	9307      	strlt	r3, [sp, #28]
 8017b9a:	bfb8      	it	lt
 8017b9c:	9204      	strlt	r2, [sp, #16]
 8017b9e:	7823      	ldrb	r3, [r4, #0]
 8017ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8017ba2:	d10c      	bne.n	8017bbe <_vfiprintf_r+0x15a>
 8017ba4:	7863      	ldrb	r3, [r4, #1]
 8017ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8017ba8:	d134      	bne.n	8017c14 <_vfiprintf_r+0x1b0>
 8017baa:	9b03      	ldr	r3, [sp, #12]
 8017bac:	1d1a      	adds	r2, r3, #4
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	9203      	str	r2, [sp, #12]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	bfb8      	it	lt
 8017bb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8017bba:	3402      	adds	r4, #2
 8017bbc:	9305      	str	r3, [sp, #20]
 8017bbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017c94 <_vfiprintf_r+0x230>
 8017bc2:	7821      	ldrb	r1, [r4, #0]
 8017bc4:	2203      	movs	r2, #3
 8017bc6:	4650      	mov	r0, sl
 8017bc8:	f7e8 fb32 	bl	8000230 <memchr>
 8017bcc:	b138      	cbz	r0, 8017bde <_vfiprintf_r+0x17a>
 8017bce:	9b04      	ldr	r3, [sp, #16]
 8017bd0:	eba0 000a 	sub.w	r0, r0, sl
 8017bd4:	2240      	movs	r2, #64	; 0x40
 8017bd6:	4082      	lsls	r2, r0
 8017bd8:	4313      	orrs	r3, r2
 8017bda:	3401      	adds	r4, #1
 8017bdc:	9304      	str	r3, [sp, #16]
 8017bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017be2:	4829      	ldr	r0, [pc, #164]	; (8017c88 <_vfiprintf_r+0x224>)
 8017be4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017be8:	2206      	movs	r2, #6
 8017bea:	f7e8 fb21 	bl	8000230 <memchr>
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	d03f      	beq.n	8017c72 <_vfiprintf_r+0x20e>
 8017bf2:	4b26      	ldr	r3, [pc, #152]	; (8017c8c <_vfiprintf_r+0x228>)
 8017bf4:	bb1b      	cbnz	r3, 8017c3e <_vfiprintf_r+0x1da>
 8017bf6:	9b03      	ldr	r3, [sp, #12]
 8017bf8:	3307      	adds	r3, #7
 8017bfa:	f023 0307 	bic.w	r3, r3, #7
 8017bfe:	3308      	adds	r3, #8
 8017c00:	9303      	str	r3, [sp, #12]
 8017c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c04:	443b      	add	r3, r7
 8017c06:	9309      	str	r3, [sp, #36]	; 0x24
 8017c08:	e768      	b.n	8017adc <_vfiprintf_r+0x78>
 8017c0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c0e:	460c      	mov	r4, r1
 8017c10:	2001      	movs	r0, #1
 8017c12:	e7a6      	b.n	8017b62 <_vfiprintf_r+0xfe>
 8017c14:	2300      	movs	r3, #0
 8017c16:	3401      	adds	r4, #1
 8017c18:	9305      	str	r3, [sp, #20]
 8017c1a:	4619      	mov	r1, r3
 8017c1c:	f04f 0c0a 	mov.w	ip, #10
 8017c20:	4620      	mov	r0, r4
 8017c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c26:	3a30      	subs	r2, #48	; 0x30
 8017c28:	2a09      	cmp	r2, #9
 8017c2a:	d903      	bls.n	8017c34 <_vfiprintf_r+0x1d0>
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d0c6      	beq.n	8017bbe <_vfiprintf_r+0x15a>
 8017c30:	9105      	str	r1, [sp, #20]
 8017c32:	e7c4      	b.n	8017bbe <_vfiprintf_r+0x15a>
 8017c34:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c38:	4604      	mov	r4, r0
 8017c3a:	2301      	movs	r3, #1
 8017c3c:	e7f0      	b.n	8017c20 <_vfiprintf_r+0x1bc>
 8017c3e:	ab03      	add	r3, sp, #12
 8017c40:	9300      	str	r3, [sp, #0]
 8017c42:	462a      	mov	r2, r5
 8017c44:	4b12      	ldr	r3, [pc, #72]	; (8017c90 <_vfiprintf_r+0x22c>)
 8017c46:	a904      	add	r1, sp, #16
 8017c48:	4630      	mov	r0, r6
 8017c4a:	f7fd fb77 	bl	801533c <_printf_float>
 8017c4e:	4607      	mov	r7, r0
 8017c50:	1c78      	adds	r0, r7, #1
 8017c52:	d1d6      	bne.n	8017c02 <_vfiprintf_r+0x19e>
 8017c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c56:	07d9      	lsls	r1, r3, #31
 8017c58:	d405      	bmi.n	8017c66 <_vfiprintf_r+0x202>
 8017c5a:	89ab      	ldrh	r3, [r5, #12]
 8017c5c:	059a      	lsls	r2, r3, #22
 8017c5e:	d402      	bmi.n	8017c66 <_vfiprintf_r+0x202>
 8017c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c62:	f7fe f8f5 	bl	8015e50 <__retarget_lock_release_recursive>
 8017c66:	89ab      	ldrh	r3, [r5, #12]
 8017c68:	065b      	lsls	r3, r3, #25
 8017c6a:	f53f af1d 	bmi.w	8017aa8 <_vfiprintf_r+0x44>
 8017c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c70:	e71c      	b.n	8017aac <_vfiprintf_r+0x48>
 8017c72:	ab03      	add	r3, sp, #12
 8017c74:	9300      	str	r3, [sp, #0]
 8017c76:	462a      	mov	r2, r5
 8017c78:	4b05      	ldr	r3, [pc, #20]	; (8017c90 <_vfiprintf_r+0x22c>)
 8017c7a:	a904      	add	r1, sp, #16
 8017c7c:	4630      	mov	r0, r6
 8017c7e:	f7fd fe01 	bl	8015884 <_printf_i>
 8017c82:	e7e4      	b.n	8017c4e <_vfiprintf_r+0x1ea>
 8017c84:	0801a07c 	.word	0x0801a07c
 8017c88:	0801a086 	.word	0x0801a086
 8017c8c:	0801533d 	.word	0x0801533d
 8017c90:	08017a41 	.word	0x08017a41
 8017c94:	0801a082 	.word	0x0801a082

08017c98 <__swbuf_r>:
 8017c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c9a:	460e      	mov	r6, r1
 8017c9c:	4614      	mov	r4, r2
 8017c9e:	4605      	mov	r5, r0
 8017ca0:	b118      	cbz	r0, 8017caa <__swbuf_r+0x12>
 8017ca2:	6a03      	ldr	r3, [r0, #32]
 8017ca4:	b90b      	cbnz	r3, 8017caa <__swbuf_r+0x12>
 8017ca6:	f7fd ff9b 	bl	8015be0 <__sinit>
 8017caa:	69a3      	ldr	r3, [r4, #24]
 8017cac:	60a3      	str	r3, [r4, #8]
 8017cae:	89a3      	ldrh	r3, [r4, #12]
 8017cb0:	071a      	lsls	r2, r3, #28
 8017cb2:	d525      	bpl.n	8017d00 <__swbuf_r+0x68>
 8017cb4:	6923      	ldr	r3, [r4, #16]
 8017cb6:	b31b      	cbz	r3, 8017d00 <__swbuf_r+0x68>
 8017cb8:	6823      	ldr	r3, [r4, #0]
 8017cba:	6922      	ldr	r2, [r4, #16]
 8017cbc:	1a98      	subs	r0, r3, r2
 8017cbe:	6963      	ldr	r3, [r4, #20]
 8017cc0:	b2f6      	uxtb	r6, r6
 8017cc2:	4283      	cmp	r3, r0
 8017cc4:	4637      	mov	r7, r6
 8017cc6:	dc04      	bgt.n	8017cd2 <__swbuf_r+0x3a>
 8017cc8:	4621      	mov	r1, r4
 8017cca:	4628      	mov	r0, r5
 8017ccc:	f7ff fdac 	bl	8017828 <_fflush_r>
 8017cd0:	b9e0      	cbnz	r0, 8017d0c <__swbuf_r+0x74>
 8017cd2:	68a3      	ldr	r3, [r4, #8]
 8017cd4:	3b01      	subs	r3, #1
 8017cd6:	60a3      	str	r3, [r4, #8]
 8017cd8:	6823      	ldr	r3, [r4, #0]
 8017cda:	1c5a      	adds	r2, r3, #1
 8017cdc:	6022      	str	r2, [r4, #0]
 8017cde:	701e      	strb	r6, [r3, #0]
 8017ce0:	6962      	ldr	r2, [r4, #20]
 8017ce2:	1c43      	adds	r3, r0, #1
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	d004      	beq.n	8017cf2 <__swbuf_r+0x5a>
 8017ce8:	89a3      	ldrh	r3, [r4, #12]
 8017cea:	07db      	lsls	r3, r3, #31
 8017cec:	d506      	bpl.n	8017cfc <__swbuf_r+0x64>
 8017cee:	2e0a      	cmp	r6, #10
 8017cf0:	d104      	bne.n	8017cfc <__swbuf_r+0x64>
 8017cf2:	4621      	mov	r1, r4
 8017cf4:	4628      	mov	r0, r5
 8017cf6:	f7ff fd97 	bl	8017828 <_fflush_r>
 8017cfa:	b938      	cbnz	r0, 8017d0c <__swbuf_r+0x74>
 8017cfc:	4638      	mov	r0, r7
 8017cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d00:	4621      	mov	r1, r4
 8017d02:	4628      	mov	r0, r5
 8017d04:	f000 f806 	bl	8017d14 <__swsetup_r>
 8017d08:	2800      	cmp	r0, #0
 8017d0a:	d0d5      	beq.n	8017cb8 <__swbuf_r+0x20>
 8017d0c:	f04f 37ff 	mov.w	r7, #4294967295
 8017d10:	e7f4      	b.n	8017cfc <__swbuf_r+0x64>
	...

08017d14 <__swsetup_r>:
 8017d14:	b538      	push	{r3, r4, r5, lr}
 8017d16:	4b2a      	ldr	r3, [pc, #168]	; (8017dc0 <__swsetup_r+0xac>)
 8017d18:	4605      	mov	r5, r0
 8017d1a:	6818      	ldr	r0, [r3, #0]
 8017d1c:	460c      	mov	r4, r1
 8017d1e:	b118      	cbz	r0, 8017d28 <__swsetup_r+0x14>
 8017d20:	6a03      	ldr	r3, [r0, #32]
 8017d22:	b90b      	cbnz	r3, 8017d28 <__swsetup_r+0x14>
 8017d24:	f7fd ff5c 	bl	8015be0 <__sinit>
 8017d28:	89a3      	ldrh	r3, [r4, #12]
 8017d2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017d2e:	0718      	lsls	r0, r3, #28
 8017d30:	d422      	bmi.n	8017d78 <__swsetup_r+0x64>
 8017d32:	06d9      	lsls	r1, r3, #27
 8017d34:	d407      	bmi.n	8017d46 <__swsetup_r+0x32>
 8017d36:	2309      	movs	r3, #9
 8017d38:	602b      	str	r3, [r5, #0]
 8017d3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017d3e:	81a3      	strh	r3, [r4, #12]
 8017d40:	f04f 30ff 	mov.w	r0, #4294967295
 8017d44:	e034      	b.n	8017db0 <__swsetup_r+0x9c>
 8017d46:	0758      	lsls	r0, r3, #29
 8017d48:	d512      	bpl.n	8017d70 <__swsetup_r+0x5c>
 8017d4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017d4c:	b141      	cbz	r1, 8017d60 <__swsetup_r+0x4c>
 8017d4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d52:	4299      	cmp	r1, r3
 8017d54:	d002      	beq.n	8017d5c <__swsetup_r+0x48>
 8017d56:	4628      	mov	r0, r5
 8017d58:	f7fe ff0c 	bl	8016b74 <_free_r>
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	6363      	str	r3, [r4, #52]	; 0x34
 8017d60:	89a3      	ldrh	r3, [r4, #12]
 8017d62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017d66:	81a3      	strh	r3, [r4, #12]
 8017d68:	2300      	movs	r3, #0
 8017d6a:	6063      	str	r3, [r4, #4]
 8017d6c:	6923      	ldr	r3, [r4, #16]
 8017d6e:	6023      	str	r3, [r4, #0]
 8017d70:	89a3      	ldrh	r3, [r4, #12]
 8017d72:	f043 0308 	orr.w	r3, r3, #8
 8017d76:	81a3      	strh	r3, [r4, #12]
 8017d78:	6923      	ldr	r3, [r4, #16]
 8017d7a:	b94b      	cbnz	r3, 8017d90 <__swsetup_r+0x7c>
 8017d7c:	89a3      	ldrh	r3, [r4, #12]
 8017d7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d86:	d003      	beq.n	8017d90 <__swsetup_r+0x7c>
 8017d88:	4621      	mov	r1, r4
 8017d8a:	4628      	mov	r0, r5
 8017d8c:	f000 f884 	bl	8017e98 <__smakebuf_r>
 8017d90:	89a0      	ldrh	r0, [r4, #12]
 8017d92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017d96:	f010 0301 	ands.w	r3, r0, #1
 8017d9a:	d00a      	beq.n	8017db2 <__swsetup_r+0x9e>
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	60a3      	str	r3, [r4, #8]
 8017da0:	6963      	ldr	r3, [r4, #20]
 8017da2:	425b      	negs	r3, r3
 8017da4:	61a3      	str	r3, [r4, #24]
 8017da6:	6923      	ldr	r3, [r4, #16]
 8017da8:	b943      	cbnz	r3, 8017dbc <__swsetup_r+0xa8>
 8017daa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017dae:	d1c4      	bne.n	8017d3a <__swsetup_r+0x26>
 8017db0:	bd38      	pop	{r3, r4, r5, pc}
 8017db2:	0781      	lsls	r1, r0, #30
 8017db4:	bf58      	it	pl
 8017db6:	6963      	ldrpl	r3, [r4, #20]
 8017db8:	60a3      	str	r3, [r4, #8]
 8017dba:	e7f4      	b.n	8017da6 <__swsetup_r+0x92>
 8017dbc:	2000      	movs	r0, #0
 8017dbe:	e7f7      	b.n	8017db0 <__swsetup_r+0x9c>
 8017dc0:	200021e4 	.word	0x200021e4

08017dc4 <_raise_r>:
 8017dc4:	291f      	cmp	r1, #31
 8017dc6:	b538      	push	{r3, r4, r5, lr}
 8017dc8:	4604      	mov	r4, r0
 8017dca:	460d      	mov	r5, r1
 8017dcc:	d904      	bls.n	8017dd8 <_raise_r+0x14>
 8017dce:	2316      	movs	r3, #22
 8017dd0:	6003      	str	r3, [r0, #0]
 8017dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8017dd6:	bd38      	pop	{r3, r4, r5, pc}
 8017dd8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017dda:	b112      	cbz	r2, 8017de2 <_raise_r+0x1e>
 8017ddc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017de0:	b94b      	cbnz	r3, 8017df6 <_raise_r+0x32>
 8017de2:	4620      	mov	r0, r4
 8017de4:	f000 f830 	bl	8017e48 <_getpid_r>
 8017de8:	462a      	mov	r2, r5
 8017dea:	4601      	mov	r1, r0
 8017dec:	4620      	mov	r0, r4
 8017dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017df2:	f000 b817 	b.w	8017e24 <_kill_r>
 8017df6:	2b01      	cmp	r3, #1
 8017df8:	d00a      	beq.n	8017e10 <_raise_r+0x4c>
 8017dfa:	1c59      	adds	r1, r3, #1
 8017dfc:	d103      	bne.n	8017e06 <_raise_r+0x42>
 8017dfe:	2316      	movs	r3, #22
 8017e00:	6003      	str	r3, [r0, #0]
 8017e02:	2001      	movs	r0, #1
 8017e04:	e7e7      	b.n	8017dd6 <_raise_r+0x12>
 8017e06:	2400      	movs	r4, #0
 8017e08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017e0c:	4628      	mov	r0, r5
 8017e0e:	4798      	blx	r3
 8017e10:	2000      	movs	r0, #0
 8017e12:	e7e0      	b.n	8017dd6 <_raise_r+0x12>

08017e14 <raise>:
 8017e14:	4b02      	ldr	r3, [pc, #8]	; (8017e20 <raise+0xc>)
 8017e16:	4601      	mov	r1, r0
 8017e18:	6818      	ldr	r0, [r3, #0]
 8017e1a:	f7ff bfd3 	b.w	8017dc4 <_raise_r>
 8017e1e:	bf00      	nop
 8017e20:	200021e4 	.word	0x200021e4

08017e24 <_kill_r>:
 8017e24:	b538      	push	{r3, r4, r5, lr}
 8017e26:	4d07      	ldr	r5, [pc, #28]	; (8017e44 <_kill_r+0x20>)
 8017e28:	2300      	movs	r3, #0
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	4608      	mov	r0, r1
 8017e2e:	4611      	mov	r1, r2
 8017e30:	602b      	str	r3, [r5, #0]
 8017e32:	f7e9 fa2b 	bl	800128c <_kill>
 8017e36:	1c43      	adds	r3, r0, #1
 8017e38:	d102      	bne.n	8017e40 <_kill_r+0x1c>
 8017e3a:	682b      	ldr	r3, [r5, #0]
 8017e3c:	b103      	cbz	r3, 8017e40 <_kill_r+0x1c>
 8017e3e:	6023      	str	r3, [r4, #0]
 8017e40:	bd38      	pop	{r3, r4, r5, pc}
 8017e42:	bf00      	nop
 8017e44:	2000ed60 	.word	0x2000ed60

08017e48 <_getpid_r>:
 8017e48:	f7e9 ba18 	b.w	800127c <_getpid>

08017e4c <__swhatbuf_r>:
 8017e4c:	b570      	push	{r4, r5, r6, lr}
 8017e4e:	460c      	mov	r4, r1
 8017e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e54:	2900      	cmp	r1, #0
 8017e56:	b096      	sub	sp, #88	; 0x58
 8017e58:	4615      	mov	r5, r2
 8017e5a:	461e      	mov	r6, r3
 8017e5c:	da0d      	bge.n	8017e7a <__swhatbuf_r+0x2e>
 8017e5e:	89a3      	ldrh	r3, [r4, #12]
 8017e60:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017e64:	f04f 0100 	mov.w	r1, #0
 8017e68:	bf0c      	ite	eq
 8017e6a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017e6e:	2340      	movne	r3, #64	; 0x40
 8017e70:	2000      	movs	r0, #0
 8017e72:	6031      	str	r1, [r6, #0]
 8017e74:	602b      	str	r3, [r5, #0]
 8017e76:	b016      	add	sp, #88	; 0x58
 8017e78:	bd70      	pop	{r4, r5, r6, pc}
 8017e7a:	466a      	mov	r2, sp
 8017e7c:	f000 f848 	bl	8017f10 <_fstat_r>
 8017e80:	2800      	cmp	r0, #0
 8017e82:	dbec      	blt.n	8017e5e <__swhatbuf_r+0x12>
 8017e84:	9901      	ldr	r1, [sp, #4]
 8017e86:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017e8a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017e8e:	4259      	negs	r1, r3
 8017e90:	4159      	adcs	r1, r3
 8017e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e96:	e7eb      	b.n	8017e70 <__swhatbuf_r+0x24>

08017e98 <__smakebuf_r>:
 8017e98:	898b      	ldrh	r3, [r1, #12]
 8017e9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017e9c:	079d      	lsls	r5, r3, #30
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	460c      	mov	r4, r1
 8017ea2:	d507      	bpl.n	8017eb4 <__smakebuf_r+0x1c>
 8017ea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017ea8:	6023      	str	r3, [r4, #0]
 8017eaa:	6123      	str	r3, [r4, #16]
 8017eac:	2301      	movs	r3, #1
 8017eae:	6163      	str	r3, [r4, #20]
 8017eb0:	b002      	add	sp, #8
 8017eb2:	bd70      	pop	{r4, r5, r6, pc}
 8017eb4:	ab01      	add	r3, sp, #4
 8017eb6:	466a      	mov	r2, sp
 8017eb8:	f7ff ffc8 	bl	8017e4c <__swhatbuf_r>
 8017ebc:	9900      	ldr	r1, [sp, #0]
 8017ebe:	4605      	mov	r5, r0
 8017ec0:	4630      	mov	r0, r6
 8017ec2:	f7fe fecb 	bl	8016c5c <_malloc_r>
 8017ec6:	b948      	cbnz	r0, 8017edc <__smakebuf_r+0x44>
 8017ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ecc:	059a      	lsls	r2, r3, #22
 8017ece:	d4ef      	bmi.n	8017eb0 <__smakebuf_r+0x18>
 8017ed0:	f023 0303 	bic.w	r3, r3, #3
 8017ed4:	f043 0302 	orr.w	r3, r3, #2
 8017ed8:	81a3      	strh	r3, [r4, #12]
 8017eda:	e7e3      	b.n	8017ea4 <__smakebuf_r+0xc>
 8017edc:	89a3      	ldrh	r3, [r4, #12]
 8017ede:	6020      	str	r0, [r4, #0]
 8017ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ee4:	81a3      	strh	r3, [r4, #12]
 8017ee6:	9b00      	ldr	r3, [sp, #0]
 8017ee8:	6163      	str	r3, [r4, #20]
 8017eea:	9b01      	ldr	r3, [sp, #4]
 8017eec:	6120      	str	r0, [r4, #16]
 8017eee:	b15b      	cbz	r3, 8017f08 <__smakebuf_r+0x70>
 8017ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ef4:	4630      	mov	r0, r6
 8017ef6:	f000 f81d 	bl	8017f34 <_isatty_r>
 8017efa:	b128      	cbz	r0, 8017f08 <__smakebuf_r+0x70>
 8017efc:	89a3      	ldrh	r3, [r4, #12]
 8017efe:	f023 0303 	bic.w	r3, r3, #3
 8017f02:	f043 0301 	orr.w	r3, r3, #1
 8017f06:	81a3      	strh	r3, [r4, #12]
 8017f08:	89a3      	ldrh	r3, [r4, #12]
 8017f0a:	431d      	orrs	r5, r3
 8017f0c:	81a5      	strh	r5, [r4, #12]
 8017f0e:	e7cf      	b.n	8017eb0 <__smakebuf_r+0x18>

08017f10 <_fstat_r>:
 8017f10:	b538      	push	{r3, r4, r5, lr}
 8017f12:	4d07      	ldr	r5, [pc, #28]	; (8017f30 <_fstat_r+0x20>)
 8017f14:	2300      	movs	r3, #0
 8017f16:	4604      	mov	r4, r0
 8017f18:	4608      	mov	r0, r1
 8017f1a:	4611      	mov	r1, r2
 8017f1c:	602b      	str	r3, [r5, #0]
 8017f1e:	f7e9 fa14 	bl	800134a <_fstat>
 8017f22:	1c43      	adds	r3, r0, #1
 8017f24:	d102      	bne.n	8017f2c <_fstat_r+0x1c>
 8017f26:	682b      	ldr	r3, [r5, #0]
 8017f28:	b103      	cbz	r3, 8017f2c <_fstat_r+0x1c>
 8017f2a:	6023      	str	r3, [r4, #0]
 8017f2c:	bd38      	pop	{r3, r4, r5, pc}
 8017f2e:	bf00      	nop
 8017f30:	2000ed60 	.word	0x2000ed60

08017f34 <_isatty_r>:
 8017f34:	b538      	push	{r3, r4, r5, lr}
 8017f36:	4d06      	ldr	r5, [pc, #24]	; (8017f50 <_isatty_r+0x1c>)
 8017f38:	2300      	movs	r3, #0
 8017f3a:	4604      	mov	r4, r0
 8017f3c:	4608      	mov	r0, r1
 8017f3e:	602b      	str	r3, [r5, #0]
 8017f40:	f7e9 fa13 	bl	800136a <_isatty>
 8017f44:	1c43      	adds	r3, r0, #1
 8017f46:	d102      	bne.n	8017f4e <_isatty_r+0x1a>
 8017f48:	682b      	ldr	r3, [r5, #0]
 8017f4a:	b103      	cbz	r3, 8017f4e <_isatty_r+0x1a>
 8017f4c:	6023      	str	r3, [r4, #0]
 8017f4e:	bd38      	pop	{r3, r4, r5, pc}
 8017f50:	2000ed60 	.word	0x2000ed60

08017f54 <_init>:
 8017f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f56:	bf00      	nop
 8017f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f5a:	bc08      	pop	{r3}
 8017f5c:	469e      	mov	lr, r3
 8017f5e:	4770      	bx	lr

08017f60 <_fini>:
 8017f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f62:	bf00      	nop
 8017f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f66:	bc08      	pop	{r3}
 8017f68:	469e      	mov	lr, r3
 8017f6a:	4770      	bx	lr
