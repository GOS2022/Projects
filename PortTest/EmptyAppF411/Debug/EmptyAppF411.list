
EmptyAppF411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001794  0800c940  0800c940  0000d940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0d4  0800e0d4  00011a54  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0d4  0800e0d4  0000f0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0dc  0800e0dc  00011a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0dc  0800e0dc  0000f0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e0e0  0800e0e0  0000f0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001a54  20000000  0800e0e4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a0c8  20001a54  0800fb38  00011a54  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bb1c  0800fb38  00011b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011a54  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a946  00000000  00000000  00011a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005656  00000000  00000000  0002c3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00031a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001047  00000000  00000000  00033008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028665  00000000  00000000  0003404f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002684c  00000000  00000000  0005c6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb061  00000000  00000000  00082f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013df61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005990  00000000  00000000  0013dfa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00143934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001a54 	.word	0x20001a54
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c928 	.word	0x0800c928

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001a58 	.word	0x20001a58
 80001dc:	0800c928 	.word	0x0800c928

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <gos_platformDriverInit>:

/*
 * Function: gos_platformDriverInit
 */
gos_result_t gos_platformDriverInit (void_t)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	// Platform driver initialization result.
	gos_result_t platformDriverInitResult = GOS_SUCCESS;
 80005a6:	2355      	movs	r3, #85	@ 0x55
 80005a8:	71fb      	strb	r3, [r7, #7]

	// Driver init.
	if (HAL_Init() != HAL_OK)
 80005aa:	f000 fa8d 	bl	8000ac8 <HAL_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <gos_platformDriverInit+0x18>
	{
		platformDriverInitResult = GOS_ERROR;
 80005b4:	23ae      	movs	r3, #174	@ 0xae
 80005b6:	71fb      	strb	r3, [r7, #7]
	}

	platformDriverInitResult = driver_init();
 80005b8:	f000 f8d4 	bl	8000764 <driver_init>
 80005bc:	4603      	mov	r3, r0
 80005be:	71fb      	strb	r3, [r7, #7]

	// Register kernel drivers.
	platformDriverInitResult &= gos_driverInit(&driverFunctions);
 80005c0:	480c      	ldr	r0, [pc, #48]	@ (80005f4 <gos_platformDriverInit+0x54>)
 80005c2:	f004 ff7f 	bl	80054c4 <gos_driverInit>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4013      	ands	r3, r2
 80005ce:	71fb      	strb	r3, [r7, #7]

    if (platformDriverInitResult != GOS_SUCCESS)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b55      	cmp	r3, #85	@ 0x55
 80005d4:	d001      	beq.n	80005da <gos_platformDriverInit+0x3a>
	{
    	platformDriverInitResult = GOS_ERROR;
 80005d6:	23ae      	movs	r3, #174	@ 0xae
 80005d8:	71fb      	strb	r3, [r7, #7]
	}

    SysTick->VAL = 0;
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <gos_platformDriverInit+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0b111;
 80005e0:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <gos_platformDriverInit+0x58>)
 80005e2:	2207      	movs	r2, #7
 80005e4:	601a      	str	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005e6:	b662      	cpsie	i
}
 80005e8:	bf00      	nop

    __enable_irq();

	return platformDriverInitResult;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	e000e010 	.word	0xe000e010

080005fc <gos_userApplicationInit>:

/*
 * Function: gos_userApplicationInit
 */
gos_result_t gos_userApplicationInit (void_t)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	gos_result_t appInitResult = GOS_SUCCESS;
 8000602:	2355      	movs	r3, #85	@ 0x55
 8000604:	71fb      	strb	r3, [r7, #7]

	// Initialize device state manager for startup.
	appInitResult &= svl_dsmInit();
 8000606:	f004 faef 	bl	8004be8 <svl_dsmInit>
 800060a:	4603      	mov	r3, r0
 800060c:	461a      	mov	r2, r3
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	4013      	ands	r3, r2
 8000612:	71fb      	strb	r3, [r7, #7]

	// Welcome message.
	(void_t) gos_traceTrace(GOS_FALSE, "Welcome to IPL test application!");
 8000614:	4906      	ldr	r1, [pc, #24]	@ (8000630 <gos_userApplicationInit+0x34>)
 8000616:	2049      	movs	r0, #73	@ 0x49
 8000618:	f00a ff1e 	bl	800b458 <gos_traceTrace>

	if (appInitResult != GOS_SUCCESS)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	2b55      	cmp	r3, #85	@ 0x55
 8000620:	d001      	beq.n	8000626 <gos_userApplicationInit+0x2a>
	{
		appInitResult = GOS_ERROR;
 8000622:	23ae      	movs	r3, #174	@ 0xae
 8000624:	71fb      	strb	r3, [r7, #7]
	}

	return appInitResult;
 8000626:	79fb      	ldrb	r3, [r7, #7]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	0800c940 	.word	0x0800c940

08000634 <APP_LedInit>:
	.taskPrivilegeLevel = GOS_TASK_PRIVILEGE_USER,
	.taskStackSize      = 0x300
};

gos_result_t APP_LedInit (void_t)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	gos_result_t ledInitResult = GOS_SUCCESS;
 800063a:	2355      	movs	r3, #85	@ 0x55
 800063c:	71fb      	strb	r3, [r7, #7]

	ledInitResult &= gos_taskRegister(&ledTaskDesc, NULL);
 800063e:	2100      	movs	r1, #0
 8000640:	4808      	ldr	r0, [pc, #32]	@ (8000664 <APP_LedInit+0x30>)
 8000642:	f006 f925 	bl	8006890 <gos_taskRegister>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	4013      	ands	r3, r2
 800064e:	71fb      	strb	r3, [r7, #7]

	if (ledInitResult != GOS_SUCCESS)
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b55      	cmp	r3, #85	@ 0x55
 8000654:	d001      	beq.n	800065a <APP_LedInit+0x26>
	{
		ledInitResult = GOS_ERROR;
 8000656:	23ae      	movs	r3, #174	@ 0xae
 8000658:	71fb      	strb	r3, [r7, #7]
	}

	return ledInitResult;
 800065a:	79fb      	ldrb	r3, [r7, #7]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000001c 	.word	0x2000001c

08000668 <APP_LedTask>:

GOS_STATIC void_t APP_LedTask (void_t)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	for (;;)
	{
		drv_gpioTgglePin(IO_USER_LED);
 800066c:	2000      	movs	r0, #0
 800066e:	f003 fa49 	bl	8003b04 <drv_gpioTgglePin>
		(void_t) gos_taskSleep(LED_TASK_PERIOD);
 8000672:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000676:	f006 fa9d 	bl	8006bb4 <gos_taskSleep>
		drv_gpioTgglePin(IO_USER_LED);
 800067a:	bf00      	nop
 800067c:	e7f6      	b.n	800066c <APP_LedTask+0x4>
	...

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	@ (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f00b fcba 	bl	800c028 <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	220c      	movs	r2, #12
 80006b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20020000 	.word	0x20020000
 80006e0:	00000400 	.word	0x00000400
 80006e4:	20001a70 	.word	0x20001a70
 80006e8:	2000bb20 	.word	0x2000bb20

080006ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	@ (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000748 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000714:	f7ff ffea 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	@ (8000750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	@ (800075c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f00b fc79 	bl	800c034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000742:	f007 fe19 	bl	8008378 <main>
  bx  lr    
 8000746:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20001a54 	.word	0x20001a54
  ldr r2, =_sidata
 8000754:	0800e0e4 	.word	0x0800e0e4
  ldr r2, =_sbss
 8000758:	20001a54 	.word	0x20001a54
  ldr r4, =_ebss
 800075c:	2000bb1c 	.word	0x2000bb1c

08000760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC_IRQHandler>
	...

08000764 <driver_init>:
#include "drv_uart.h"

GOS_STATIC void_t sysTickHook (void_t);

gos_result_t driver_init (void_t)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
	gos_result_t driverInitResult = GOS_SUCCESS;
 800076a:	2355      	movs	r3, #85	@ 0x55
 800076c:	71fb      	strb	r3, [r7, #7]

	driverInitResult &= rcc_driver_init();
 800076e:	f000 f839 	bl	80007e4 <rcc_driver_init>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4013      	ands	r3, r2
 800077a:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_tmrInit();
 800077c:	f003 fb66 	bl	8003e4c <drv_tmrInit>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4013      	ands	r3, r2
 8000788:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_systimerStart();
 800078a:	f003 fb21 	bl	8003dd0 <drv_systimerStart>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4013      	ands	r3, r2
 8000796:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_gpioInit();
 8000798:	f003 f8f0 	bl	800397c <drv_gpioInit>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4013      	ands	r3, r2
 80007a4:	71fb      	strb	r3, [r7, #7]
	//driverInitResult &= drv_i2cInit();
	//driverInitResult &= drv_spiInit();
	//driverInitResult &= drv_dmaInit();
	driverInitResult &= drv_uartInit();
 80007a6:	f003 fe93 	bl	80044d0 <drv_uartInit>
 80007aa:	4603      	mov	r3, r0
 80007ac:	461a      	mov	r2, r3
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4013      	ands	r3, r2
 80007b2:	71fb      	strb	r3, [r7, #7]
	driverInitResult &= drv_itInit();
 80007b4:	f003 fabe 	bl	8003d34 <drv_itInit>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	4013      	ands	r3, r2
 80007c0:	71fb      	strb	r3, [r7, #7]

	gos_kernelRegisterSysTickHook(sysTickHook);
 80007c2:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <driver_init+0x70>)
 80007c4:	f004 fff4 	bl	80057b0 <gos_kernelRegisterSysTickHook>

	return driverInitResult;
 80007c8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	080007d9 	.word	0x080007d9

080007d8 <sysTickHook>:

GOS_STATIC void_t sysTickHook (void_t)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80007dc:	f000 f9ce 	bl	8000b7c <HAL_IncTick>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <rcc_driver_init>:
#include "rcc_driver.h"
//#include "stm32f4xx_hal.h"
#include "stm32f4xx.h"

gos_result_t rcc_driver_init (void_t)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0a6      	sub	sp, #152	@ 0x98
 80007e8:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t initResult = GOS_ERROR;
 80007ea:	23ae      	movs	r3, #174	@ 0xae
 80007ec:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80007f4:	2230      	movs	r2, #48	@ 0x30
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f00b fc0d 	bl	800c018 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

	/*
	 * Function code.
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000812:	4ba1      	ldr	r3, [pc, #644]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	4aa0      	ldr	r2, [pc, #640]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	@ 0x40
 800081e:	4b9e      	ldr	r3, [pc, #632]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082a:	2300      	movs	r3, #0
 800082c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800082e:	4b9b      	ldr	r3, [pc, #620]	@ (8000a9c <rcc_driver_init+0x2b8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a9a      	ldr	r2, [pc, #616]	@ (8000a9c <rcc_driver_init+0x2b8>)
 8000834:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	4b98      	ldr	r3, [pc, #608]	@ (8000a9c <rcc_driver_init+0x2b8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000846:	2302      	movs	r3, #2
 8000848:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084a:	2301      	movs	r3, #1
 800084c:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084e:	2310      	movs	r3, #16
 8000850:	677b      	str	r3, [r7, #116]	@ 0x74
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	RCC_OscInitStruct.PLL.PLLM = 16;
 800085c:	2310      	movs	r3, #16
 800085e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000862:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000866:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800086a:	2304      	movs	r3, #4
 800086c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 8000876:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fd1e 	bl	80012bc <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d116      	bne.n	80008b4 <rcc_driver_init+0xd0>
	{
		  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	653b      	str	r3, [r7, #80]	@ 0x50
		                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	657b      	str	r3, [r7, #84]	@ 0x54
		  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	65bb      	str	r3, [r7, #88]	@ 0x58
		  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000896:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	663b      	str	r3, [r7, #96]	@ 0x60

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) == HAL_OK)
 800089c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 ff82 	bl	80017ac <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d102      	bne.n	80008b4 <rcc_driver_init+0xd0>
		{
			initResult = GOS_SUCCESS;
 80008ae:	2355      	movs	r3, #85	@ 0x55
 80008b0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
	}

	// TODO
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80008b8:	4b77      	ldr	r3, [pc, #476]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008bc:	4a76      	ldr	r2, [pc, #472]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c4:	4b74      	ldr	r3, [pc, #464]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80008ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80008d4:	4b70      	ldr	r3, [pc, #448]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d8:	4a6f      	ldr	r2, [pc, #444]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80008da:	f043 0302 	orr.w	r3, r3, #2
 80008de:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e0:	4b6d      	ldr	r3, [pc, #436]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80008ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80008f0:	4b69      	ldr	r3, [pc, #420]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f4:	4a68      	ldr	r2, [pc, #416]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fc:	4b66      	ldr	r3, [pc, #408]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800090c:	4b62      	ldr	r3, [pc, #392]	@ (8000a98 <rcc_driver_init+0x2b4>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000910:	4a61      	ldr	r2, [pc, #388]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	6313      	str	r3, [r2, #48]	@ 0x30
 8000918:	4b5f      	ldr	r3, [pc, #380]	@ (8000a98 <rcc_driver_init+0x2b4>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091c:	f003 0308 	and.w	r3, r3, #8
 8000920:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	637b      	str	r3, [r7, #52]	@ 0x34
 8000928:	4b5b      	ldr	r3, [pc, #364]	@ (8000a98 <rcc_driver_init+0x2b4>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092c:	4a5a      	ldr	r2, [pc, #360]	@ (8000a98 <rcc_driver_init+0x2b4>)
 800092e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000932:	6313      	str	r3, [r2, #48]	@ 0x30
 8000934:	4b58      	ldr	r3, [pc, #352]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093c:	637b      	str	r3, [r7, #52]	@ 0x34
 800093e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	633b      	str	r3, [r7, #48]	@ 0x30
 8000944:	4b54      	ldr	r3, [pc, #336]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000948:	4a53      	ldr	r2, [pc, #332]	@ (8000a98 <rcc_driver_init+0x2b4>)
 800094a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800094e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000950:	4b51      	ldr	r3, [pc, #324]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000958:	633b      	str	r3, [r7, #48]	@ 0x30
 800095a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
	__HAL_RCC_DMA1_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000960:	4b4d      	ldr	r3, [pc, #308]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000964:	4a4c      	ldr	r2, [pc, #304]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000966:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800096a:	6313      	str	r3, [r2, #48]	@ 0x30
 800096c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a98 <rcc_driver_init+0x2b4>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800097c:	4b46      	ldr	r3, [pc, #280]	@ (8000a98 <rcc_driver_init+0x2b4>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000980:	4a45      	ldr	r2, [pc, #276]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000982:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000986:	6313      	str	r3, [r2, #48]	@ 0x30
 8000988:	4b43      	ldr	r3, [pc, #268]	@ (8000a98 <rcc_driver_init+0x2b4>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
 8000998:	4b3f      	ldr	r3, [pc, #252]	@ (8000a98 <rcc_driver_init+0x2b4>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a3e      	ldr	r2, [pc, #248]	@ (8000a98 <rcc_driver_init+0x2b4>)
 800099e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_I2C2_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
 80009b4:	4b38      	ldr	r3, [pc, #224]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	4a37      	ldr	r2, [pc, #220]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80009ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009be:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c0:	4b35      	ldr	r3, [pc, #212]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009c8:	623b      	str	r3, [r7, #32]
 80009ca:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_SPI2_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
 80009d0:	4b31      	ldr	r3, [pc, #196]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	4a30      	ldr	r2, [pc, #192]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009da:	6413      	str	r3, [r2, #64]	@ 0x40
 80009dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e4:	61fb      	str	r3, [r7, #28]
 80009e6:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_SPI3_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	4a29      	ldr	r2, [pc, #164]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80009f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <rcc_driver_init+0x2b4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	4b23      	ldr	r3, [pc, #140]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a22      	ldr	r2, [pc, #136]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a14:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	4a1b      	ldr	r2, [pc, #108]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a30:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a34:	f003 0302 	and.w	r3, r3, #2
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_TIM11_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a44:	4a14      	ldr	r2, [pc, #80]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
	//__HAL_RCC_DAC_CLK_ENABLE();

	__HAL_RCC_USART1_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a60:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	4a06      	ldr	r2, [pc, #24]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <rcc_driver_init+0x2b4>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_USART3_CLK_ENABLE();
	//__HAL_RCC_UART4_CLK_ENABLE();
	//__HAL_RCC_UART5_CLK_ENABLE();
	__HAL_RCC_USART6_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	e004      	b.n	8000aa0 <rcc_driver_init+0x2bc>
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <rcc_driver_init+0x2e0>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa4:	4a07      	ldr	r2, [pc, #28]	@ (8000ac4 <rcc_driver_init+0x2e0>)
 8000aa6:	f043 0320 	orr.w	r3, r3, #32
 8000aaa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <rcc_driver_init+0x2e0>)
 8000aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab0:	f003 0320 	and.w	r3, r3, #32
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]

	return initResult;
 8000ab8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3798      	adds	r7, #152	@ 0x98
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	@ (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f933 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 f810 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f000 f806 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <HAL_InitTick+0x54>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <HAL_InitTick+0x58>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f943 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f000 f90b 	bl	8000d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	@ (8000b78 <HAL_InitTick+0x5c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000088 	.word	0x20000088
 8000b74:	20000104 	.word	0x20000104
 8000b78:	20000100 	.word	0x20000100

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000104 	.word	0x20000104
 8000ba0:	20001a7c 	.word	0x20001a7c

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20001a7c 	.word	0x20001a7c

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	@ (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	@ (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	@ (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	@ 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff29 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff3e 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff31 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffa2 	bl	8000d18 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff feda 	bl	8000ba4 <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d008      	beq.n	8000e10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2280      	movs	r2, #128	@ 0x80
 8000e02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e052      	b.n	8000eb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0216 	bic.w	r2, r2, #22
 8000e1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d103      	bne.n	8000e40 <HAL_DMA_Abort+0x62>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d007      	beq.n	8000e50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0208 	bic.w	r2, r2, #8
 8000e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e60:	e013      	b.n	8000e8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e62:	f7ff fe9f 	bl	8000ba4 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d90c      	bls.n	8000e8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2220      	movs	r2, #32
 8000e74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e015      	b.n	8000eb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e4      	bne.n	8000e62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e9c:	223f      	movs	r2, #63	@ 0x3f
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d004      	beq.n	8000edc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2280      	movs	r2, #128	@ 0x80
 8000ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e00c      	b.n	8000ef6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2205      	movs	r2, #5
 8000ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e159      	b.n	80011ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 8148 	bne.w	80011e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80a2 	beq.w	80011e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b57      	ldr	r3, [pc, #348]	@ (8001204 <HAL_GPIO_Init+0x2e8>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	4a56      	ldr	r2, [pc, #344]	@ (8001204 <HAL_GPIO_Init+0x2e8>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b2:	4b54      	ldr	r3, [pc, #336]	@ (8001204 <HAL_GPIO_Init+0x2e8>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a52      	ldr	r2, [pc, #328]	@ (8001208 <HAL_GPIO_Init+0x2ec>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a49      	ldr	r2, [pc, #292]	@ (800120c <HAL_GPIO_Init+0x2f0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x202>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a48      	ldr	r2, [pc, #288]	@ (8001210 <HAL_GPIO_Init+0x2f4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x1fe>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a47      	ldr	r2, [pc, #284]	@ (8001214 <HAL_GPIO_Init+0x2f8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x1fa>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a46      	ldr	r2, [pc, #280]	@ (8001218 <HAL_GPIO_Init+0x2fc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x1f6>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a45      	ldr	r2, [pc, #276]	@ (800121c <HAL_GPIO_Init+0x300>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x1f2>
 800110a:	2304      	movs	r3, #4
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800110e:	2307      	movs	r3, #7
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x204>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x204>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	@ (8001208 <HAL_GPIO_Init+0x2ec>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <HAL_GPIO_Init+0x304>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a2f      	ldr	r2, [pc, #188]	@ (8001220 <HAL_GPIO_Init+0x304>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <HAL_GPIO_Init+0x304>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a24      	ldr	r2, [pc, #144]	@ (8001220 <HAL_GPIO_Init+0x304>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <HAL_GPIO_Init+0x304>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001220 <HAL_GPIO_Init+0x304>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HAL_GPIO_Init+0x304>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <HAL_GPIO_Init+0x304>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f aea2 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001268:	887a      	ldrh	r2, [r7, #2]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4013      	ands	r3, r2
 800126e:	041a      	lsls	r2, r3, #16
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	43d9      	mvns	r1, r3
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	400b      	ands	r3, r1
 8001278:	431a      	orrs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fce6 	bl	8003c7c <HAL_GPIO_EXTI_Callback>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40013c00 	.word	0x40013c00

080012bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e267      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d075      	beq.n	80013c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012da:	4b88      	ldr	r3, [pc, #544]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d00c      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4b85      	ldr	r3, [pc, #532]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b82      	ldr	r3, [pc, #520]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b7e      	ldr	r3, [pc, #504]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e242      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001322:	4b76      	ldr	r3, [pc, #472]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a75      	ldr	r2, [pc, #468]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b70      	ldr	r3, [pc, #448]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6f      	ldr	r2, [pc, #444]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b6d      	ldr	r3, [pc, #436]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6c      	ldr	r2, [pc, #432]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001354:	4b69      	ldr	r3, [pc, #420]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a68      	ldr	r2, [pc, #416]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b66      	ldr	r3, [pc, #408]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a65      	ldr	r2, [pc, #404]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fc16 	bl	8000ba4 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fc12 	bl	8000ba4 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e207      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b5b      	ldr	r3, [pc, #364]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xc0>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc02 	bl	8000ba4 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fbfe 	bl	8000ba4 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1f3      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013d2:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b47      	ldr	r3, [pc, #284]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c7      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4937      	ldr	r1, [pc, #220]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <HAL_RCC_OscConfig+0x244>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fbb7 	bl	8000ba4 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fbb3 	bl	8000ba4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a8      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b28      	ldr	r3, [pc, #160]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4925      	ldr	r1, [pc, #148]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_RCC_OscConfig+0x244>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fb96 	bl	8000ba4 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fb92 	bl	8000ba4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e187      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d036      	beq.n	8001514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_RCC_OscConfig+0x248>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff fb76 	bl	8000ba4 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fb72 	bl	8000ba4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e167      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
 80014da:	e01b      	b.n	8001514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_RCC_OscConfig+0x248>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fb5f 	bl	8000ba4 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	e00e      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff fb5b 	bl	8000ba4 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d907      	bls.n	8001508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e150      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 80014fc:	40023800 	.word	0x40023800
 8001500:	42470000 	.word	0x42470000
 8001504:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4b88      	ldr	r3, [pc, #544]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ea      	bne.n	80014ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8097 	beq.w	8001650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b81      	ldr	r3, [pc, #516]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b7d      	ldr	r3, [pc, #500]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	4a7c      	ldr	r2, [pc, #496]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	@ 0x40
 8001542:	4b7a      	ldr	r3, [pc, #488]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154e:	2301      	movs	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001552:	4b77      	ldr	r3, [pc, #476]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d118      	bne.n	8001590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	4b74      	ldr	r3, [pc, #464]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a73      	ldr	r2, [pc, #460]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156a:	f7ff fb1b 	bl	8000ba4 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7ff fb17 	bl	8000ba4 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e10c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2ea>
 8001598:	4b64      	ldr	r3, [pc, #400]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159c:	4a63      	ldr	r2, [pc, #396]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a4:	e01c      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x30c>
 80015ae:	4b5f      	ldr	r3, [pc, #380]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b2:	4a5e      	ldr	r2, [pc, #376]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ba:	4b5c      	ldr	r3, [pc, #368]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015be:	4a5b      	ldr	r2, [pc, #364]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015c8:	4b58      	ldr	r3, [pc, #352]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015cc:	4a57      	ldr	r2, [pc, #348]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d4:	4b55      	ldr	r3, [pc, #340]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d8:	4a54      	ldr	r2, [pc, #336]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0304 	bic.w	r3, r3, #4
 80015de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d015      	beq.n	8001614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fadc 	bl	8000ba4 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fad8 	bl	8000ba4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0cb      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001606:	4b49      	ldr	r3, [pc, #292]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ee      	beq.n	80015f0 <HAL_RCC_OscConfig+0x334>
 8001612:	e014      	b.n	800163e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fac6 	bl	8000ba4 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fac2 	bl	8000ba4 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0b5      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ee      	bne.n	800161c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	4b39      	ldr	r3, [pc, #228]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	4a38      	ldr	r2, [pc, #224]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800164e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a1 	beq.w	800179c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165a:	4b34      	ldr	r3, [pc, #208]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d05c      	beq.n	8001720 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d141      	bne.n	80016f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fa96 	bl	8000ba4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fa92 	bl	8000ba4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e087      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b27      	ldr	r3, [pc, #156]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	3b01      	subs	r3, #1
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	061b      	lsls	r3, r3, #24
 80016be:	491b      	ldr	r1, [pc, #108]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fa6b 	bl	8000ba4 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fa67 	bl	8000ba4 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e05c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x416>
 80016f0:	e054      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fa54 	bl	8000ba4 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fa50 	bl	8000ba4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e045      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x444>
 800171e:	e03d      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e038      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000
 8001734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d028      	beq.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d121      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d11a      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001768:	4013      	ands	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800176e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001770:	4293      	cmp	r3, r2
 8001772:	d111      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	3b01      	subs	r3, #1
 8001782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0cc      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b68      	ldr	r3, [pc, #416]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d90c      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b65      	ldr	r3, [pc, #404]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4b59      	ldr	r3, [pc, #356]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a58      	ldr	r2, [pc, #352]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800180a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a52      	ldr	r2, [pc, #328]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b50      	ldr	r3, [pc, #320]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	494d      	ldr	r1, [pc, #308]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d044      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d119      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d003      	beq.n	800186a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b3f      	ldr	r3, [pc, #252]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e067      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 0203 	bic.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4934      	ldr	r1, [pc, #208]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff f982 	bl	8000ba4 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7ff f97e 	bl	8000ba4 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 020c 	and.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1eb      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d20c      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4916      	ldr	r1, [pc, #88]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490e      	ldr	r1, [pc, #56]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	490a      	ldr	r1, [pc, #40]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f8e2 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00
 8001968:	40023800 	.word	0x40023800
 800196c:	0800dc30 	.word	0x0800dc30
 8001970:	20000088 	.word	0x20000088
 8001974:	20000100 	.word	0x20000100

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800197c:	b094      	sub	sp, #80	@ 0x50
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	4b79      	ldr	r3, [pc, #484]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d00d      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x40>
 800199c:	2b08      	cmp	r3, #8
 800199e:	f200 80e1 	bhi.w	8001b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x34>
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019aa:	e0db      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b73      	ldr	r3, [pc, #460]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80019ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b0:	e0db      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b2:	4b73      	ldr	r3, [pc, #460]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80019b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b6:	e0d8      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	2200      	movs	r2, #0
 80019d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e2:	2300      	movs	r3, #0
 80019e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019ea:	4622      	mov	r2, r4
 80019ec:	462b      	mov	r3, r5
 80019ee:	f04f 0000 	mov.w	r0, #0
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	0159      	lsls	r1, r3, #5
 80019f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019fc:	0150      	lsls	r0, r2, #5
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4621      	mov	r1, r4
 8001a04:	1a51      	subs	r1, r2, r1
 8001a06:	6139      	str	r1, [r7, #16]
 8001a08:	4629      	mov	r1, r5
 8001a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a1c:	4659      	mov	r1, fp
 8001a1e:	018b      	lsls	r3, r1, #6
 8001a20:	4651      	mov	r1, sl
 8001a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a26:	4651      	mov	r1, sl
 8001a28:	018a      	lsls	r2, r1, #6
 8001a2a:	4651      	mov	r1, sl
 8001a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a30:	4659      	mov	r1, fp
 8001a32:	eb63 0901 	sbc.w	r9, r3, r1
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a4a:	4690      	mov	r8, r2
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	eb18 0303 	adds.w	r3, r8, r3
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	462b      	mov	r3, r5
 8001a58:	eb49 0303 	adc.w	r3, r9, r3
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	024b      	lsls	r3, r1, #9
 8001a6e:	4621      	mov	r1, r4
 8001a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a74:	4621      	mov	r1, r4
 8001a76:	024a      	lsls	r2, r1, #9
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a7e:	2200      	movs	r2, #0
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a88:	f7fe fc12 	bl	80002b0 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4613      	mov	r3, r2
 8001a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a94:	e058      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a96:	4b38      	ldr	r3, [pc, #224]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aa6:	623b      	str	r3, [r7, #32]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab0:	4642      	mov	r2, r8
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	0159      	lsls	r1, r3, #5
 8001abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac2:	0150      	lsls	r0, r2, #5
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ace:	4649      	mov	r1, r9
 8001ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8001aec:	eb63 050b 	sbc.w	r5, r3, fp
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	00eb      	lsls	r3, r5, #3
 8001afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001afe:	00e2      	lsls	r2, r4, #3
 8001b00:	4614      	mov	r4, r2
 8001b02:	461d      	mov	r5, r3
 8001b04:	4643      	mov	r3, r8
 8001b06:	18e3      	adds	r3, r4, r3
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	464b      	mov	r3, r9
 8001b0c:	eb45 0303 	adc.w	r3, r5, r3
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1e:	4629      	mov	r1, r5
 8001b20:	028b      	lsls	r3, r1, #10
 8001b22:	4621      	mov	r1, r4
 8001b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b28:	4621      	mov	r1, r4
 8001b2a:	028a      	lsls	r2, r1, #10
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b32:	2200      	movs	r2, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	61fa      	str	r2, [r7, #28]
 8001b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3c:	f7fe fbb8 	bl	80002b0 <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4613      	mov	r3, r2
 8001b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	3301      	adds	r3, #1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b62:	e002      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3750      	adds	r7, #80	@ 0x50
 8001b70:	46bd      	mov	sp, r7
 8001b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	007a1200 	.word	0x007a1200

08001b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000088 	.word	0x20000088

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	@ (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	0800dc40 	.word	0x0800dc40

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc8:	f7ff ffdc 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0b5b      	lsrs	r3, r3, #13
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4903      	ldr	r1, [pc, #12]	@ (8001be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	0800dc40 	.word	0x0800dc40

08001bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e041      	b.n	8001c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f839 	bl	8001c8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f000 fa72 	bl	8002114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d001      	beq.n	8001cb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e03c      	b.n	8001d32 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <HAL_TIM_Base_Start+0xa0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d018      	beq.n	8001cfc <HAL_TIM_Base_Start+0x5c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cd2:	d013      	beq.n	8001cfc <HAL_TIM_Base_Start+0x5c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d44 <HAL_TIM_Base_Start+0xa4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00e      	beq.n	8001cfc <HAL_TIM_Base_Start+0x5c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a19      	ldr	r2, [pc, #100]	@ (8001d48 <HAL_TIM_Base_Start+0xa8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <HAL_TIM_Base_Start+0x5c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <HAL_TIM_Base_Start+0xac>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d004      	beq.n	8001cfc <HAL_TIM_Base_Start+0x5c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a16      	ldr	r2, [pc, #88]	@ (8001d50 <HAL_TIM_Base_Start+0xb0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d111      	bne.n	8001d20 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d010      	beq.n	8001d30 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1e:	e007      	b.n	8001d30 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40000400 	.word	0x40000400
 8001d48:	40000800 	.word	0x40000800
 8001d4c:	40000c00 	.word	0x40000c00
 8001d50:	40014000 	.word	0x40014000

08001d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d020      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01b      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0202 	mvn.w	r2, #2
 8001d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f999 	bl	80020d6 <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f98b 	bl	80020c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f99c 	bl	80020ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d020      	beq.n	8001e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01b      	beq.n	8001e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0204 	mvn.w	r2, #4
 8001dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f973 	bl	80020d6 <HAL_TIM_IC_CaptureCallback>
 8001df0:	e005      	b.n	8001dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f965 	bl	80020c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f976 	bl	80020ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d020      	beq.n	8001e50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0208 	mvn.w	r2, #8
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2204      	movs	r2, #4
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f94d 	bl	80020d6 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f93f 	bl	80020c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f950 	bl	80020ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d020      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0210 	mvn.w	r2, #16
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2208      	movs	r2, #8
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f927 	bl	80020d6 <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f919 	bl	80020c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f92a 	bl	80020ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0201 	mvn.w	r2, #1
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f002 f98e 	bl	80041dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fab6 	bl	8002450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00c      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8fb 	bl	80020fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00c      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0220 	mvn.w	r2, #32
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fa88 	bl	800243c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_TIM_ConfigClockSource+0x1c>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e0b4      	b.n	80020ba <HAL_TIM_ConfigClockSource+0x186>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f88:	d03e      	beq.n	8002008 <HAL_TIM_ConfigClockSource+0xd4>
 8001f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f8e:	f200 8087 	bhi.w	80020a0 <HAL_TIM_ConfigClockSource+0x16c>
 8001f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f96:	f000 8086 	beq.w	80020a6 <HAL_TIM_ConfigClockSource+0x172>
 8001f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f9e:	d87f      	bhi.n	80020a0 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa0:	2b70      	cmp	r3, #112	@ 0x70
 8001fa2:	d01a      	beq.n	8001fda <HAL_TIM_ConfigClockSource+0xa6>
 8001fa4:	2b70      	cmp	r3, #112	@ 0x70
 8001fa6:	d87b      	bhi.n	80020a0 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa8:	2b60      	cmp	r3, #96	@ 0x60
 8001faa:	d050      	beq.n	800204e <HAL_TIM_ConfigClockSource+0x11a>
 8001fac:	2b60      	cmp	r3, #96	@ 0x60
 8001fae:	d877      	bhi.n	80020a0 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb0:	2b50      	cmp	r3, #80	@ 0x50
 8001fb2:	d03c      	beq.n	800202e <HAL_TIM_ConfigClockSource+0xfa>
 8001fb4:	2b50      	cmp	r3, #80	@ 0x50
 8001fb6:	d873      	bhi.n	80020a0 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb8:	2b40      	cmp	r3, #64	@ 0x40
 8001fba:	d058      	beq.n	800206e <HAL_TIM_ConfigClockSource+0x13a>
 8001fbc:	2b40      	cmp	r3, #64	@ 0x40
 8001fbe:	d86f      	bhi.n	80020a0 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc0:	2b30      	cmp	r3, #48	@ 0x30
 8001fc2:	d064      	beq.n	800208e <HAL_TIM_ConfigClockSource+0x15a>
 8001fc4:	2b30      	cmp	r3, #48	@ 0x30
 8001fc6:	d86b      	bhi.n	80020a0 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d060      	beq.n	800208e <HAL_TIM_ConfigClockSource+0x15a>
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	d867      	bhi.n	80020a0 <HAL_TIM_ConfigClockSource+0x16c>
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d05c      	beq.n	800208e <HAL_TIM_ConfigClockSource+0x15a>
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	d05a      	beq.n	800208e <HAL_TIM_ConfigClockSource+0x15a>
 8001fd8:	e062      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fea:	f000 f999 	bl	8002320 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	609a      	str	r2, [r3, #8]
      break;
 8002006:	e04f      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002018:	f000 f982 	bl	8002320 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800202a:	609a      	str	r2, [r3, #8]
      break;
 800202c:	e03c      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800203a:	461a      	mov	r2, r3
 800203c:	f000 f8f6 	bl	800222c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2150      	movs	r1, #80	@ 0x50
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f94f 	bl	80022ea <TIM_ITRx_SetConfig>
      break;
 800204c:	e02c      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800205a:	461a      	mov	r2, r3
 800205c:	f000 f915 	bl	800228a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2160      	movs	r1, #96	@ 0x60
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f93f 	bl	80022ea <TIM_ITRx_SetConfig>
      break;
 800206c:	e01c      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800207a:	461a      	mov	r2, r3
 800207c:	f000 f8d6 	bl	800222c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2140      	movs	r1, #64	@ 0x40
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f92f 	bl	80022ea <TIM_ITRx_SetConfig>
      break;
 800208c:	e00c      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	4610      	mov	r0, r2
 800209a:	f000 f926 	bl	80022ea <TIM_ITRx_SetConfig>
      break;
 800209e:	e003      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
      break;
 80020a4:	e000      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3a      	ldr	r2, [pc, #232]	@ (8002210 <TIM_Base_SetConfig+0xfc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00f      	beq.n	800214c <TIM_Base_SetConfig+0x38>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002132:	d00b      	beq.n	800214c <TIM_Base_SetConfig+0x38>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a37      	ldr	r2, [pc, #220]	@ (8002214 <TIM_Base_SetConfig+0x100>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <TIM_Base_SetConfig+0x38>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a36      	ldr	r2, [pc, #216]	@ (8002218 <TIM_Base_SetConfig+0x104>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d003      	beq.n	800214c <TIM_Base_SetConfig+0x38>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a35      	ldr	r2, [pc, #212]	@ (800221c <TIM_Base_SetConfig+0x108>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d108      	bne.n	800215e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002152:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2b      	ldr	r2, [pc, #172]	@ (8002210 <TIM_Base_SetConfig+0xfc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01b      	beq.n	800219e <TIM_Base_SetConfig+0x8a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216c:	d017      	beq.n	800219e <TIM_Base_SetConfig+0x8a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a28      	ldr	r2, [pc, #160]	@ (8002214 <TIM_Base_SetConfig+0x100>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <TIM_Base_SetConfig+0x8a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a27      	ldr	r2, [pc, #156]	@ (8002218 <TIM_Base_SetConfig+0x104>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00f      	beq.n	800219e <TIM_Base_SetConfig+0x8a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a26      	ldr	r2, [pc, #152]	@ (800221c <TIM_Base_SetConfig+0x108>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00b      	beq.n	800219e <TIM_Base_SetConfig+0x8a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a25      	ldr	r2, [pc, #148]	@ (8002220 <TIM_Base_SetConfig+0x10c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <TIM_Base_SetConfig+0x8a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a24      	ldr	r2, [pc, #144]	@ (8002224 <TIM_Base_SetConfig+0x110>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d003      	beq.n	800219e <TIM_Base_SetConfig+0x8a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a23      	ldr	r2, [pc, #140]	@ (8002228 <TIM_Base_SetConfig+0x114>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002210 <TIM_Base_SetConfig+0xfc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d103      	bne.n	80021e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d105      	bne.n	8002202 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f023 0201 	bic.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	611a      	str	r2, [r3, #16]
  }
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40000400 	.word	0x40000400
 8002218:	40000800 	.word	0x40000800
 800221c:	40000c00 	.word	0x40000c00
 8002220:	40014000 	.word	0x40014000
 8002224:	40014400 	.word	0x40014400
 8002228:	40014800 	.word	0x40014800

0800222c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	f023 0201 	bic.w	r2, r3, #1
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f023 030a 	bic.w	r3, r3, #10
 8002268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
 8002270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	621a      	str	r2, [r3, #32]
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800228a:	b480      	push	{r7}
 800228c:	b087      	sub	sp, #28
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f023 0210 	bic.w	r2, r3, #16
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80022b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	031b      	lsls	r3, r3, #12
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80022c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	621a      	str	r2, [r3, #32]
}
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b085      	sub	sp, #20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	f043 0307 	orr.w	r3, r3, #7
 800230c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	609a      	str	r2, [r3, #8]
}
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800233a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	021a      	lsls	r2, r3, #8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	431a      	orrs	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	609a      	str	r2, [r3, #8]
}
 8002354:	bf00      	nop
 8002356:	371c      	adds	r7, #28
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002374:	2302      	movs	r3, #2
 8002376:	e050      	b.n	800241a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800239e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d018      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c4:	d013      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a18      	ldr	r2, [pc, #96]	@ (800242c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00e      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a16      	ldr	r2, [pc, #88]	@ (8002430 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a15      	ldr	r2, [pc, #84]	@ (8002434 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d004      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10c      	bne.n	8002408 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80023f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40010000 	.word	0x40010000
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800
 8002434:	40000c00 	.word	0x40000c00
 8002438:	40014000 	.word	0x40014000

0800243c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e042      	b.n	80024fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f002 fb26 	bl	8004adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	@ 0x24
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fff3 	bl	8003494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	@ 0x28
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b20      	cmp	r3, #32
 8002522:	d175      	bne.n	8002610 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_UART_Transmit+0x2c>
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e06e      	b.n	8002612 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2221      	movs	r2, #33	@ 0x21
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002542:	f7fe fb2f 	bl	8000ba4 <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	88fa      	ldrh	r2, [r7, #6]
 800254c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	88fa      	ldrh	r2, [r7, #6]
 8002552:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800255c:	d108      	bne.n	8002570 <HAL_UART_Transmit+0x6c>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d104      	bne.n	8002570 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	e003      	b.n	8002578 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002578:	e02e      	b.n	80025d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	2180      	movs	r1, #128	@ 0x80
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 fd2f 	bl	8002fe8 <UART_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e03a      	b.n	8002612 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10b      	bne.n	80025ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	3302      	adds	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e007      	b.n	80025ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3301      	adds	r3, #1
 80025c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1cb      	bne.n	800257a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2200      	movs	r2, #0
 80025ea:	2140      	movs	r1, #64	@ 0x40
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fcfb 	bl	8002fe8 <UART_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e006      	b.n	8002612 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	e000      	b.n	8002612 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002610:	2302      	movs	r3, #2
  }
}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	4613      	mov	r3, r2
 8002626:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	d121      	bne.n	8002678 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_UART_Transmit_IT+0x26>
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e01a      	b.n	800267a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	88fa      	ldrh	r2, [r7, #6]
 800264e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2221      	movs	r2, #33	@ 0x21
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002672:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b0a0      	sub	sp, #128	@ 0x80
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	330c      	adds	r3, #12
 8002694:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002698:	e853 3f00 	ldrex	r3, [r3]
 800269c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800269e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026a0:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80026a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	330c      	adds	r3, #12
 80026ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80026ae:	66ba      	str	r2, [r7, #104]	@ 0x68
 80026b0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80026b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80026b6:	e841 2300 	strex	r3, r2, [r1]
 80026ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80026bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e5      	bne.n	800268e <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3314      	adds	r3, #20
 80026c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026cc:	e853 3f00 	ldrex	r3, [r3]
 80026d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80026d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3314      	adds	r3, #20
 80026e0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80026e2:	657a      	str	r2, [r7, #84]	@ 0x54
 80026e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80026e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80026ea:	e841 2300 	strex	r3, r2, [r1]
 80026ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80026f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e5      	bne.n	80026c2 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d119      	bne.n	8002732 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	330c      	adds	r3, #12
 8002704:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002708:	e853 3f00 	ldrex	r3, [r3]
 800270c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800270e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002710:	f023 0310 	bic.w	r3, r3, #16
 8002714:	677b      	str	r3, [r7, #116]	@ 0x74
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	330c      	adds	r3, #12
 800271c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800271e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002722:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800272c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e5      	bne.n	80026fe <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273c:	2b80      	cmp	r3, #128	@ 0x80
 800273e:	d136      	bne.n	80027ae <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3314      	adds	r3, #20
 8002746:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	e853 3f00 	ldrex	r3, [r3]
 800274e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002756:	673b      	str	r3, [r7, #112]	@ 0x70
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3314      	adds	r3, #20
 800275e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002762:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002768:	e841 2300 	strex	r3, r2, [r1]
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1e5      	bne.n	8002740 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002778:	2b00      	cmp	r3, #0
 800277a:	d018      	beq.n	80027ae <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002780:	2200      	movs	r2, #0
 8002782:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fb28 	bl	8000dde <HAL_DMA_Abort>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00c      	beq.n	80027ae <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fbb2 	bl	8000f02 <HAL_DMA_GetError>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b20      	cmp	r3, #32
 80027a2:	d104      	bne.n	80027ae <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2210      	movs	r2, #16
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e052      	b.n	8002854 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b8:	2b40      	cmp	r3, #64	@ 0x40
 80027ba:	d136      	bne.n	800282a <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	3314      	adds	r3, #20
 80027c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	e853 3f00 	ldrex	r3, [r3]
 80027ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3314      	adds	r3, #20
 80027da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027dc:	61ba      	str	r2, [r7, #24]
 80027de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6979      	ldr	r1, [r7, #20]
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	e841 2300 	strex	r3, r2, [r1]
 80027e8:	613b      	str	r3, [r7, #16]
   return(result);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e5      	bne.n	80027bc <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d018      	beq.n	800282a <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	2200      	movs	r2, #0
 80027fe:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe faea 	bl	8000dde <HAL_DMA_Abort>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00c      	beq.n	800282a <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fb74 	bl	8000f02 <HAL_DMA_GetError>
 800281a:	4603      	mov	r3, r0
 800281c:	2b20      	cmp	r3, #32
 800281e:	d104      	bne.n	800282a <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2210      	movs	r2, #16
 8002824:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e014      	b.n	8002854 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3780      	adds	r7, #128	@ 0x80
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b0a2      	sub	sp, #136	@ 0x88
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8002864:	2301      	movs	r3, #1
 8002866:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800287a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800287c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8002880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	330c      	adds	r3, #12
 800288a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800288e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002890:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002894:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800289c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e3      	bne.n	800286a <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	3314      	adds	r3, #20
 80028a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80028b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3314      	adds	r3, #20
 80028c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80028c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80028c4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028ca:	e841 2300 	strex	r3, r2, [r1]
 80028ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80028d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1e5      	bne.n	80028a2 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d119      	bne.n	8002912 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	330c      	adds	r3, #12
 80028e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e8:	e853 3f00 	ldrex	r3, [r3]
 80028ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f0:	f023 0310 	bic.w	r3, r3, #16
 80028f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80028fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002900:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800290c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e5      	bne.n	80028de <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00f      	beq.n	800293a <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002924:	2b80      	cmp	r3, #128	@ 0x80
 8002926:	d104      	bne.n	8002932 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292c:	4a53      	ldr	r2, [pc, #332]	@ (8002a7c <HAL_UART_Abort_IT+0x220>)
 800292e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002930:	e003      	b.n	800293a <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002936:	2200      	movs	r2, #0
 8002938:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00f      	beq.n	8002962 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294c:	2b40      	cmp	r3, #64	@ 0x40
 800294e:	d104      	bne.n	800295a <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	4a4a      	ldr	r2, [pc, #296]	@ (8002a80 <HAL_UART_Abort_IT+0x224>)
 8002956:	651a      	str	r2, [r3, #80]	@ 0x50
 8002958:	e003      	b.n	8002962 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295e:	2200      	movs	r2, #0
 8002960:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296c:	2b80      	cmp	r3, #128	@ 0x80
 800296e:	d12d      	bne.n	80029cc <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	e853 3f00 	ldrex	r3, [r3]
 800297e:	623b      	str	r3, [r7, #32]
   return(result);
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002986:	677b      	str	r3, [r7, #116]	@ 0x74
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3314      	adds	r3, #20
 800298e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002990:	633a      	str	r2, [r7, #48]	@ 0x30
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800299e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e5      	bne.n	8002970 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00f      	beq.n	80029cc <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe fa84 	bl	8000ebe <HAL_DMA_Abort_IT>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d004      	beq.n	80029c6 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c0:	2200      	movs	r2, #0
 80029c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80029c4:	e002      	b.n	80029cc <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d6:	2b40      	cmp	r3, #64	@ 0x40
 80029d8:	d130      	bne.n	8002a3c <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3314      	adds	r3, #20
 80029e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	e853 3f00 	ldrex	r3, [r3]
 80029e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3314      	adds	r3, #20
 80029f8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80029fa:	61fa      	str	r2, [r7, #28]
 80029fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	69b9      	ldr	r1, [r7, #24]
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	e841 2300 	strex	r3, r2, [r1]
 8002a06:	617b      	str	r3, [r7, #20]
   return(result);
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e5      	bne.n	80029da <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fa4f 	bl	8000ebe <HAL_DMA_Abort_IT>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a34:	e002      	b.n	8002a3c <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8002a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d116      	bne.n	8002a72 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 faa5 	bl	8002fbc <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3788      	adds	r7, #136	@ 0x88
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	08003189 	.word	0x08003189
 8002a80:	080031e9 	.word	0x080031e9

08002a84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b0ba      	sub	sp, #232	@ 0xe8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_UART_IRQHandler+0x66>
 8002ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fc18 	bl	8003318 <UART_Receive_IT>
      return;
 8002ae8:	e25b      	b.n	8002fa2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80de 	beq.w	8002cb0 <HAL_UART_IRQHandler+0x22c>
 8002af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d106      	bne.n	8002b0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80d1 	beq.w	8002cb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_UART_IRQHandler+0xae>
 8002b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_UART_IRQHandler+0xd2>
 8002b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	f043 0202 	orr.w	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <HAL_UART_IRQHandler+0xf6>
 8002b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f043 0204 	orr.w	r2, r3, #4
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d011      	beq.n	8002baa <HAL_UART_IRQHandler+0x126>
 8002b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f043 0208 	orr.w	r2, r3, #8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 81f2 	beq.w	8002f98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x14e>
 8002bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fba3 	bl	8003318 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bdc:	2b40      	cmp	r3, #64	@ 0x40
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <HAL_UART_IRQHandler+0x17a>
 8002bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d04f      	beq.n	8002c9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fa4b 	bl	800309a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0e:	2b40      	cmp	r3, #64	@ 0x40
 8002c10:	d141      	bne.n	8002c96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3314      	adds	r3, #20
 8002c18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3314      	adds	r3, #20
 8002c3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c4e:	e841 2300 	strex	r3, r2, [r1]
 8002c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1d9      	bne.n	8002c12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d013      	beq.n	8002c8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e64 <HAL_UART_IRQHandler+0x3e0>)
 8002c6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe f923 	bl	8000ebe <HAL_DMA_Abort_IT>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d016      	beq.n	8002cac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	e00e      	b.n	8002cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f98a 	bl	8002fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c94:	e00a      	b.n	8002cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f986 	bl	8002fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9c:	e006      	b.n	8002cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f982 	bl	8002fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002caa:	e175      	b.n	8002f98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cac:	bf00      	nop
    return;
 8002cae:	e173      	b.n	8002f98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	f040 814f 	bne.w	8002f58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8148 	beq.w	8002f58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8141 	beq.w	8002f58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf6:	2b40      	cmp	r3, #64	@ 0x40
 8002cf8:	f040 80b6 	bne.w	8002e68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8145 	beq.w	8002f9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	f080 813e 	bcs.w	8002f9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d32:	f000 8088 	beq.w	8002e46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d72:	e841 2300 	strex	r3, r2, [r1]
 8002d76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1d9      	bne.n	8002d36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3314      	adds	r3, #20
 8002d88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d8c:	e853 3f00 	ldrex	r3, [r3]
 8002d90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d94:	f023 0301 	bic.w	r3, r3, #1
 8002d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002da6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002daa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002dae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002db2:	e841 2300 	strex	r3, r2, [r1]
 8002db6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002db8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1e1      	bne.n	8002d82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3314      	adds	r3, #20
 8002dc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002de2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002de4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002de8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e3      	bne.n	8002dbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	330c      	adds	r3, #12
 8002e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e16:	f023 0310 	bic.w	r3, r3, #16
 8002e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	330c      	adds	r3, #12
 8002e24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e30:	e841 2300 	strex	r3, r2, [r1]
 8002e34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e3      	bne.n	8002e04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd ffcc 	bl	8000dde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f8b7 	bl	8002fd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e62:	e09b      	b.n	8002f9c <HAL_UART_IRQHandler+0x518>
 8002e64:	08003161 	.word	0x08003161
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 808e 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8089 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	330c      	adds	r3, #12
 8002e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e98:	e853 3f00 	ldrex	r3, [r3]
 8002e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002eb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8002eb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002eb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eba:	e841 2300 	strex	r3, r2, [r1]
 8002ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e3      	bne.n	8002e8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3314      	adds	r3, #20
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3314      	adds	r3, #20
 8002ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002eea:	633a      	str	r2, [r7, #48]	@ 0x30
 8002eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e3      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	330c      	adds	r3, #12
 8002f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0310 	bic.w	r3, r3, #16
 8002f22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	330c      	adds	r3, #12
 8002f2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f30:	61fa      	str	r2, [r7, #28]
 8002f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f34:	69b9      	ldr	r1, [r7, #24]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	e841 2300 	strex	r3, r2, [r1]
 8002f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e3      	bne.n	8002f0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f83d 	bl	8002fd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f56:	e023      	b.n	8002fa0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <HAL_UART_IRQHandler+0x4f4>
 8002f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f969 	bl	8003248 <UART_Transmit_IT>
    return;
 8002f76:	e014      	b.n	8002fa2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00e      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x51e>
 8002f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f9a9 	bl	80032e8 <UART_EndTransmit_IT>
    return;
 8002f96:	e004      	b.n	8002fa2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002f98:	bf00      	nop
 8002f9a:	e002      	b.n	8002fa2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f9c:	bf00      	nop
 8002f9e:	e000      	b.n	8002fa2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002fa0:	bf00      	nop
  }
}
 8002fa2:	37e8      	adds	r7, #232	@ 0xe8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff8:	e03b      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d037      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7fd fdcf 	bl	8000ba4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <UART_WaitOnFlagUntilTimeout+0x30>
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e03a      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d023      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x8a>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b80      	cmp	r3, #128	@ 0x80
 800302e:	d020      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b40      	cmp	r3, #64	@ 0x40
 8003034:	d01d      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d116      	bne.n	8003072 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f81d 	bl	800309a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2208      	movs	r2, #8
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e00f      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d0b4      	beq.n	8002ffa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800309a:	b480      	push	{r7}
 800309c:	b095      	sub	sp, #84	@ 0x54
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	330c      	adds	r3, #12
 80030c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80030c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030ca:	e841 2300 	strex	r3, r2, [r1]
 80030ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e5      	bne.n	80030a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3314      	adds	r3, #20
 80030dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e5      	bne.n	80030d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	2b01      	cmp	r3, #1
 8003110:	d119      	bne.n	8003146 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	330c      	adds	r3, #12
 8003118:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	60bb      	str	r3, [r7, #8]
   return(result);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f023 0310 	bic.w	r3, r3, #16
 8003128:	647b      	str	r3, [r7, #68]	@ 0x44
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	330c      	adds	r3, #12
 8003130:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003132:	61ba      	str	r2, [r7, #24]
 8003134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	6979      	ldr	r1, [r7, #20]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	613b      	str	r3, [r7, #16]
   return(result);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1e5      	bne.n	8003112 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003154:	bf00      	nop
 8003156:	3754      	adds	r7, #84	@ 0x54
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff ff14 	bl	8002fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003194:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319a:	2200      	movs	r2, #0
 800319c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d004      	beq.n	80031b0 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d117      	bne.n	80031e0 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff feef 	bl	8002fbc <HAL_UART_AbortCpltCallback>
 80031de:	e000      	b.n	80031e2 <UART_DMATxAbortCallback+0x5a>
      return;
 80031e0:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f4:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fa:	2200      	movs	r2, #0
 80031fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003202:	2b00      	cmp	r3, #0
 8003204:	d004      	beq.n	8003210 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320c:	2b00      	cmp	r3, #0
 800320e:	d117      	bne.n	8003240 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff febf 	bl	8002fbc <HAL_UART_AbortCpltCallback>
 800323e:	e000      	b.n	8003242 <UART_DMARxAbortCallback+0x5a>
      return;
 8003240:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b21      	cmp	r3, #33	@ 0x21
 800325a:	d13e      	bne.n	80032da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003264:	d114      	bne.n	8003290 <UART_Transmit_IT+0x48>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d110      	bne.n	8003290 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003282:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	1c9a      	adds	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	621a      	str	r2, [r3, #32]
 800328e:	e008      	b.n	80032a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	1c59      	adds	r1, r3, #1
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6211      	str	r1, [r2, #32]
 800329a:	781a      	ldrb	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4619      	mov	r1, r3
 80032b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032da:	2302      	movs	r3, #2
  }
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f001 fb8f 	bl	8004a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08c      	sub	sp, #48	@ 0x30
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b22      	cmp	r3, #34	@ 0x22
 800332a:	f040 80ae 	bne.w	800348a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003336:	d117      	bne.n	8003368 <UART_Receive_IT+0x50>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d113      	bne.n	8003368 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003340:	2300      	movs	r3, #0
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	b29b      	uxth	r3, r3
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	b29a      	uxth	r2, r3
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	629a      	str	r2, [r3, #40]	@ 0x28
 8003366:	e026      	b.n	80033b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800336e:	2300      	movs	r3, #0
 8003370:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337a:	d007      	beq.n	800338c <UART_Receive_IT+0x74>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <UART_Receive_IT+0x82>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d106      	bne.n	800339a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e008      	b.n	80033ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29b      	uxth	r3, r3
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4619      	mov	r1, r3
 80033c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d15d      	bne.n	8003486 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0220 	bic.w	r2, r2, #32
 80033d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340c:	2b01      	cmp	r3, #1
 800340e:	d135      	bne.n	800347c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	613b      	str	r3, [r7, #16]
   return(result);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f023 0310 	bic.w	r3, r3, #16
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003436:	623a      	str	r2, [r7, #32]
 8003438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	69f9      	ldr	r1, [r7, #28]
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	61bb      	str	r3, [r7, #24]
   return(result);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e5      	bne.n	8003416 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d10a      	bne.n	800346e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003472:	4619      	mov	r1, r3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fdab 	bl	8002fd0 <HAL_UARTEx_RxEventCallback>
 800347a:	e002      	b.n	8003482 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f001 fb01 	bl	8004a84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e002      	b.n	800348c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800348a:	2302      	movs	r3, #2
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	3730      	adds	r7, #48	@ 0x30
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003498:	b0c0      	sub	sp, #256	@ 0x100
 800349a:	af00      	add	r7, sp, #0
 800349c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b0:	68d9      	ldr	r1, [r3, #12]
 80034b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	ea40 0301 	orr.w	r3, r0, r1
 80034bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80034ec:	f021 010c 	bic.w	r1, r1, #12
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034fa:	430b      	orrs	r3, r1
 80034fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350e:	6999      	ldr	r1, [r3, #24]
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	ea40 0301 	orr.w	r3, r0, r1
 800351a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b8f      	ldr	r3, [pc, #572]	@ (8003760 <UART_SetConfig+0x2cc>)
 8003524:	429a      	cmp	r2, r3
 8003526:	d005      	beq.n	8003534 <UART_SetConfig+0xa0>
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b8d      	ldr	r3, [pc, #564]	@ (8003764 <UART_SetConfig+0x2d0>)
 8003530:	429a      	cmp	r2, r3
 8003532:	d104      	bne.n	800353e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003534:	f7fe fb46 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8003538:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800353c:	e003      	b.n	8003546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800353e:	f7fe fb2d 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8003542:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003550:	f040 810c 	bne.w	800376c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003558:	2200      	movs	r2, #0
 800355a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800355e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003566:	4622      	mov	r2, r4
 8003568:	462b      	mov	r3, r5
 800356a:	1891      	adds	r1, r2, r2
 800356c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800356e:	415b      	adcs	r3, r3
 8003570:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003576:	4621      	mov	r1, r4
 8003578:	eb12 0801 	adds.w	r8, r2, r1
 800357c:	4629      	mov	r1, r5
 800357e:	eb43 0901 	adc.w	r9, r3, r1
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800358e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003596:	4690      	mov	r8, r2
 8003598:	4699      	mov	r9, r3
 800359a:	4623      	mov	r3, r4
 800359c:	eb18 0303 	adds.w	r3, r8, r3
 80035a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035a4:	462b      	mov	r3, r5
 80035a6:	eb49 0303 	adc.w	r3, r9, r3
 80035aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035c2:	460b      	mov	r3, r1
 80035c4:	18db      	adds	r3, r3, r3
 80035c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c8:	4613      	mov	r3, r2
 80035ca:	eb42 0303 	adc.w	r3, r2, r3
 80035ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80035d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035d8:	f7fc fe6a 	bl	80002b0 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4b61      	ldr	r3, [pc, #388]	@ (8003768 <UART_SetConfig+0x2d4>)
 80035e2:	fba3 2302 	umull	r2, r3, r3, r2
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	011c      	lsls	r4, r3, #4
 80035ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035fc:	4642      	mov	r2, r8
 80035fe:	464b      	mov	r3, r9
 8003600:	1891      	adds	r1, r2, r2
 8003602:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003604:	415b      	adcs	r3, r3
 8003606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800360c:	4641      	mov	r1, r8
 800360e:	eb12 0a01 	adds.w	sl, r2, r1
 8003612:	4649      	mov	r1, r9
 8003614:	eb43 0b01 	adc.w	fp, r3, r1
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800362c:	4692      	mov	sl, r2
 800362e:	469b      	mov	fp, r3
 8003630:	4643      	mov	r3, r8
 8003632:	eb1a 0303 	adds.w	r3, sl, r3
 8003636:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800363a:	464b      	mov	r3, r9
 800363c:	eb4b 0303 	adc.w	r3, fp, r3
 8003640:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003650:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003658:	460b      	mov	r3, r1
 800365a:	18db      	adds	r3, r3, r3
 800365c:	643b      	str	r3, [r7, #64]	@ 0x40
 800365e:	4613      	mov	r3, r2
 8003660:	eb42 0303 	adc.w	r3, r2, r3
 8003664:	647b      	str	r3, [r7, #68]	@ 0x44
 8003666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800366a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800366e:	f7fc fe1f 	bl	80002b0 <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4611      	mov	r1, r2
 8003678:	4b3b      	ldr	r3, [pc, #236]	@ (8003768 <UART_SetConfig+0x2d4>)
 800367a:	fba3 2301 	umull	r2, r3, r3, r1
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2264      	movs	r2, #100	@ 0x64
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	1acb      	subs	r3, r1, r3
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800368e:	4b36      	ldr	r3, [pc, #216]	@ (8003768 <UART_SetConfig+0x2d4>)
 8003690:	fba3 2302 	umull	r2, r3, r3, r2
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800369c:	441c      	add	r4, r3
 800369e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036b0:	4642      	mov	r2, r8
 80036b2:	464b      	mov	r3, r9
 80036b4:	1891      	adds	r1, r2, r2
 80036b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036b8:	415b      	adcs	r3, r3
 80036ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036c0:	4641      	mov	r1, r8
 80036c2:	1851      	adds	r1, r2, r1
 80036c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80036c6:	4649      	mov	r1, r9
 80036c8:	414b      	adcs	r3, r1
 80036ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036d8:	4659      	mov	r1, fp
 80036da:	00cb      	lsls	r3, r1, #3
 80036dc:	4651      	mov	r1, sl
 80036de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e2:	4651      	mov	r1, sl
 80036e4:	00ca      	lsls	r2, r1, #3
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	4642      	mov	r2, r8
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036f4:	464b      	mov	r3, r9
 80036f6:	460a      	mov	r2, r1
 80036f8:	eb42 0303 	adc.w	r3, r2, r3
 80036fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800370c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003714:	460b      	mov	r3, r1
 8003716:	18db      	adds	r3, r3, r3
 8003718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800371a:	4613      	mov	r3, r2
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800372a:	f7fc fdc1 	bl	80002b0 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <UART_SetConfig+0x2d4>)
 8003734:	fba3 1302 	umull	r1, r3, r3, r2
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	2164      	movs	r1, #100	@ 0x64
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	3332      	adds	r3, #50	@ 0x32
 8003746:	4a08      	ldr	r2, [pc, #32]	@ (8003768 <UART_SetConfig+0x2d4>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	f003 0207 	and.w	r2, r3, #7
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4422      	add	r2, r4
 800375a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800375c:	e106      	b.n	800396c <UART_SetConfig+0x4d8>
 800375e:	bf00      	nop
 8003760:	40011000 	.word	0x40011000
 8003764:	40011400 	.word	0x40011400
 8003768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800376c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003776:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800377a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800377e:	4642      	mov	r2, r8
 8003780:	464b      	mov	r3, r9
 8003782:	1891      	adds	r1, r2, r2
 8003784:	6239      	str	r1, [r7, #32]
 8003786:	415b      	adcs	r3, r3
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
 800378a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800378e:	4641      	mov	r1, r8
 8003790:	1854      	adds	r4, r2, r1
 8003792:	4649      	mov	r1, r9
 8003794:	eb43 0501 	adc.w	r5, r3, r1
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	00eb      	lsls	r3, r5, #3
 80037a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037a6:	00e2      	lsls	r2, r4, #3
 80037a8:	4614      	mov	r4, r2
 80037aa:	461d      	mov	r5, r3
 80037ac:	4643      	mov	r3, r8
 80037ae:	18e3      	adds	r3, r4, r3
 80037b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037b4:	464b      	mov	r3, r9
 80037b6:	eb45 0303 	adc.w	r3, r5, r3
 80037ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037da:	4629      	mov	r1, r5
 80037dc:	008b      	lsls	r3, r1, #2
 80037de:	4621      	mov	r1, r4
 80037e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e4:	4621      	mov	r1, r4
 80037e6:	008a      	lsls	r2, r1, #2
 80037e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80037ec:	f7fc fd60 	bl	80002b0 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4b60      	ldr	r3, [pc, #384]	@ (8003978 <UART_SetConfig+0x4e4>)
 80037f6:	fba3 2302 	umull	r2, r3, r3, r2
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	011c      	lsls	r4, r3, #4
 80037fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003802:	2200      	movs	r2, #0
 8003804:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003808:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800380c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	1891      	adds	r1, r2, r2
 8003816:	61b9      	str	r1, [r7, #24]
 8003818:	415b      	adcs	r3, r3
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003820:	4641      	mov	r1, r8
 8003822:	1851      	adds	r1, r2, r1
 8003824:	6139      	str	r1, [r7, #16]
 8003826:	4649      	mov	r1, r9
 8003828:	414b      	adcs	r3, r1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003838:	4659      	mov	r1, fp
 800383a:	00cb      	lsls	r3, r1, #3
 800383c:	4651      	mov	r1, sl
 800383e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003842:	4651      	mov	r1, sl
 8003844:	00ca      	lsls	r2, r1, #3
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	4603      	mov	r3, r0
 800384c:	4642      	mov	r2, r8
 800384e:	189b      	adds	r3, r3, r2
 8003850:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003854:	464b      	mov	r3, r9
 8003856:	460a      	mov	r2, r1
 8003858:	eb42 0303 	adc.w	r3, r2, r3
 800385c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	67bb      	str	r3, [r7, #120]	@ 0x78
 800386a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003878:	4649      	mov	r1, r9
 800387a:	008b      	lsls	r3, r1, #2
 800387c:	4641      	mov	r1, r8
 800387e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003882:	4641      	mov	r1, r8
 8003884:	008a      	lsls	r2, r1, #2
 8003886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800388a:	f7fc fd11 	bl	80002b0 <__aeabi_uldivmod>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4611      	mov	r1, r2
 8003894:	4b38      	ldr	r3, [pc, #224]	@ (8003978 <UART_SetConfig+0x4e4>)
 8003896:	fba3 2301 	umull	r2, r3, r3, r1
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2264      	movs	r2, #100	@ 0x64
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	1acb      	subs	r3, r1, r3
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	3332      	adds	r3, #50	@ 0x32
 80038a8:	4a33      	ldr	r2, [pc, #204]	@ (8003978 <UART_SetConfig+0x4e4>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038b4:	441c      	add	r4, r3
 80038b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ba:	2200      	movs	r2, #0
 80038bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80038be:	677a      	str	r2, [r7, #116]	@ 0x74
 80038c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038c4:	4642      	mov	r2, r8
 80038c6:	464b      	mov	r3, r9
 80038c8:	1891      	adds	r1, r2, r2
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	415b      	adcs	r3, r3
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038d4:	4641      	mov	r1, r8
 80038d6:	1851      	adds	r1, r2, r1
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	4649      	mov	r1, r9
 80038dc:	414b      	adcs	r3, r1
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038ec:	4659      	mov	r1, fp
 80038ee:	00cb      	lsls	r3, r1, #3
 80038f0:	4651      	mov	r1, sl
 80038f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f6:	4651      	mov	r1, sl
 80038f8:	00ca      	lsls	r2, r1, #3
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	4642      	mov	r2, r8
 8003902:	189b      	adds	r3, r3, r2
 8003904:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003906:	464b      	mov	r3, r9
 8003908:	460a      	mov	r2, r1
 800390a:	eb42 0303 	adc.w	r3, r2, r3
 800390e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	663b      	str	r3, [r7, #96]	@ 0x60
 800391a:	667a      	str	r2, [r7, #100]	@ 0x64
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003928:	4649      	mov	r1, r9
 800392a:	008b      	lsls	r3, r1, #2
 800392c:	4641      	mov	r1, r8
 800392e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003932:	4641      	mov	r1, r8
 8003934:	008a      	lsls	r2, r1, #2
 8003936:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800393a:	f7fc fcb9 	bl	80002b0 <__aeabi_uldivmod>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <UART_SetConfig+0x4e4>)
 8003944:	fba3 1302 	umull	r1, r3, r3, r2
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	2164      	movs	r1, #100	@ 0x64
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	3332      	adds	r3, #50	@ 0x32
 8003956:	4a08      	ldr	r2, [pc, #32]	@ (8003978 <UART_SetConfig+0x4e4>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	f003 020f 	and.w	r2, r3, #15
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4422      	add	r2, r4
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003972:	46bd      	mov	sp, r7
 8003974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003978:	51eb851f 	.word	0x51eb851f

0800397c <drv_gpioInit>:

/*
 * Function: drv_gpioInit
 */
gos_result_t drv_gpioInit (void_t)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gpioInitResult = GOS_SUCCESS;
 8003982:	2355      	movs	r3, #85	@ 0x55
 8003984:	71fb      	strb	r3, [r7, #7]
    u8_t         gpioIdx        = 0u;
 8003986:	2300      	movs	r3, #0
 8003988:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (gpioConfig != NULL)
    {
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 800398a:	2300      	movs	r3, #0
 800398c:	71bb      	strb	r3, [r7, #6]
 800398e:	e00e      	b.n	80039ae <drv_gpioInit+0x32>
        {
            GOS_CONCAT_RESULT(gpioInitResult, drv_gpioInitPin(gpioIdx));
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	2b55      	cmp	r3, #85	@ 0x55
 8003994:	d106      	bne.n	80039a4 <drv_gpioInit+0x28>
 8003996:	79bb      	ldrb	r3, [r7, #6]
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f81b 	bl	80039d4 <drv_gpioInitPin>
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
 80039a2:	e001      	b.n	80039a8 <drv_gpioInit+0x2c>
 80039a4:	23ae      	movs	r3, #174	@ 0xae
 80039a6:	71fb      	strb	r3, [r7, #7]
        for (gpioIdx = 0u; gpioIdx < gpioConfigSize / sizeof(drv_gpioDescriptor_t); gpioIdx++)
 80039a8:	79bb      	ldrb	r3, [r7, #6]
 80039aa:	3301      	adds	r3, #1
 80039ac:	71bb      	strb	r3, [r7, #6]
 80039ae:	79bb      	ldrb	r3, [r7, #6]
 80039b0:	4a06      	ldr	r2, [pc, #24]	@ (80039cc <drv_gpioInit+0x50>)
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	0892      	lsrs	r2, r2, #2
 80039b6:	4906      	ldr	r1, [pc, #24]	@ (80039d0 <drv_gpioInit+0x54>)
 80039b8:	fba1 1202 	umull	r1, r2, r1, r2
 80039bc:	4293      	cmp	r3, r2
 80039be:	d3e7      	bcc.n	8003990 <drv_gpioInit+0x14>
    else
    {
        // Configuration array is NULL pointer.
    }

    return gpioInitResult;
 80039c0:	79fb      	ldrb	r3, [r7, #7]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000090 	.word	0x20000090
 80039d0:	24924925 	.word	0x24924925

080039d4 <drv_gpioInitPin>:

/*
 * Function: drv_gpioInitPin
 */
gos_result_t drv_gpioInitPin (u8_t pinIndex)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b089      	sub	sp, #36	@ 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t     gpioInitPinResult = GOS_ERROR;
 80039de:	23ae      	movs	r3, #174	@ 0xae
 80039e0:	77fb      	strb	r3, [r7, #31]
    GPIO_InitTypeDef gpioInit          = {0};
 80039e2:	f107 0308 	add.w	r3, r7, #8
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	609a      	str	r2, [r3, #8]
 80039ee:	60da      	str	r2, [r3, #12]
 80039f0:	611a      	str	r2, [r3, #16]

    /*
     * Function code.
     */
    if (pinIndex < (gpioConfigSize / sizeof(drv_gpioDescriptor_t)))
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	4a40      	ldr	r2, [pc, #256]	@ (8003af8 <drv_gpioInitPin+0x124>)
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	0892      	lsrs	r2, r2, #2
 80039fa:	4940      	ldr	r1, [pc, #256]	@ (8003afc <drv_gpioInitPin+0x128>)
 80039fc:	fba1 1202 	umull	r1, r2, r1, r2
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d274      	bcs.n	8003aee <drv_gpioInitPin+0x11a>
    {
        gpioInit.Pin       = gpioConfig[pinIndex].pin;
 8003a04:	79fa      	ldrb	r2, [r7, #7]
 8003a06:	493e      	ldr	r1, [pc, #248]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	3304      	adds	r3, #4
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	60bb      	str	r3, [r7, #8]
        gpioInit.Mode      = gpioConfig[pinIndex].mode;
 8003a18:	79fa      	ldrb	r2, [r7, #7]
 8003a1a:	4939      	ldr	r1, [pc, #228]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3308      	adds	r3, #8
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
        gpioInit.Pull      = gpioConfig[pinIndex].pull;
 8003a2c:	79fa      	ldrb	r2, [r7, #7]
 8003a2e:	4934      	ldr	r1, [pc, #208]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3310      	adds	r3, #16
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	613b      	str	r3, [r7, #16]
        gpioInit.Speed     = gpioConfig[pinIndex].speed;
 8003a40:	79fa      	ldrb	r2, [r7, #7]
 8003a42:	492f      	ldr	r1, [pc, #188]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	330c      	adds	r3, #12
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	617b      	str	r3, [r7, #20]
        gpioInit.Alternate = gpioConfig[pinIndex].alternate;
 8003a54:	79fa      	ldrb	r2, [r7, #7]
 8003a56:	492a      	ldr	r1, [pc, #168]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3314      	adds	r3, #20
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	61bb      	str	r3, [r7, #24]

        HAL_GPIO_Init(gpioConfig[pinIndex].port, &gpioInit);
 8003a68:	79fa      	ldrb	r2, [r7, #7]
 8003a6a:	4925      	ldr	r1, [pc, #148]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f107 0208 	add.w	r2, r7, #8
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fa4c 	bl	8000f1c <HAL_GPIO_Init>

        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 8003a84:	79fa      	ldrb	r2, [r7, #7]
 8003a86:	491e      	ldr	r1, [pc, #120]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3318      	adds	r3, #24
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d00a      	beq.n	8003ab0 <drv_gpioInitPin+0xdc>
        	gpioConfig[pinIndex].defaultState == GPIO_STATE_LOW)
 8003a9a:	79fa      	ldrb	r2, [r7, #7]
 8003a9c:	4918      	ldr	r1, [pc, #96]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	3318      	adds	r3, #24
 8003aaa:	781b      	ldrb	r3, [r3, #0]
        if (gpioConfig[pinIndex].defaultState == GPIO_STATE_HIGH ||
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d11c      	bne.n	8003aea <drv_gpioInitPin+0x116>
        {
        	HAL_GPIO_WritePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin, gpioConfig[pinIndex].defaultState);
 8003ab0:	79fa      	ldrb	r2, [r7, #7]
 8003ab2:	4913      	ldr	r1, [pc, #76]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	79fa      	ldrb	r2, [r7, #7]
 8003ac2:	490f      	ldr	r1, [pc, #60]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3304      	adds	r3, #4
 8003ad0:	8819      	ldrh	r1, [r3, #0]
 8003ad2:	79fa      	ldrb	r2, [r7, #7]
 8003ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8003b00 <drv_gpioInitPin+0x12c>)
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4423      	add	r3, r4
 8003ae0:	3318      	adds	r3, #24
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f7fd fb9d 	bl	8001224 <HAL_GPIO_WritePin>
        else
        {
        	// No default state is defined.
        }

        gpioInitPinResult = GOS_SUCCESS;
 8003aea:	2355      	movs	r3, #85	@ 0x55
 8003aec:	77fb      	strb	r3, [r7, #31]
    else
    {
        // Index error.
    }

    return gpioInitPinResult;
 8003aee:	7ffb      	ldrb	r3, [r7, #31]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3724      	adds	r7, #36	@ 0x24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd90      	pop	{r4, r7, pc}
 8003af8:	20000090 	.word	0x20000090
 8003afc:	24924925 	.word	0x24924925
 8003b00:	0800dd4c 	.word	0x0800dd4c

08003b04 <drv_gpioTgglePin>:

/*
 * Function: drv_gpioTgglePin
 */
gos_result_t drv_gpioTgglePin (u8_t pinIndex)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t gpioTogglePinResult = GOS_ERROR;
 8003b0e:	23ae      	movs	r3, #174	@ 0xae
 8003b10:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pinIndex < gpioConfigSize / sizeof(drv_gpioDescriptor_t))
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	4a11      	ldr	r2, [pc, #68]	@ (8003b5c <drv_gpioTgglePin+0x58>)
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	0892      	lsrs	r2, r2, #2
 8003b1a:	4911      	ldr	r1, [pc, #68]	@ (8003b60 <drv_gpioTgglePin+0x5c>)
 8003b1c:	fba1 1202 	umull	r1, r2, r1, r2
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d215      	bcs.n	8003b50 <drv_gpioTgglePin+0x4c>
    {
        HAL_GPIO_TogglePin(gpioConfig[pinIndex].port, gpioConfig[pinIndex].pin);
 8003b24:	79fa      	ldrb	r2, [r7, #7]
 8003b26:	490f      	ldr	r1, [pc, #60]	@ (8003b64 <drv_gpioTgglePin+0x60>)
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	79fa      	ldrb	r2, [r7, #7]
 8003b36:	490b      	ldr	r1, [pc, #44]	@ (8003b64 <drv_gpioTgglePin+0x60>)
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3304      	adds	r3, #4
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	4619      	mov	r1, r3
 8003b48:	f7fd fb85 	bl	8001256 <HAL_GPIO_TogglePin>
        gpioTogglePinResult = GOS_SUCCESS;
 8003b4c:	2355      	movs	r3, #85	@ 0x55
 8003b4e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Wrong index or invalid state.
    }

    return gpioTogglePinResult;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000090 	.word	0x20000090
 8003b60:	24924925 	.word	0x24924925
 8003b64:	0800dd4c 	.word	0x0800dd4c

08003b68 <EXTI9_5_IRQHandler>:

/*
 * Function: EXTI9_5_IRQHandler
 */
void_t EXTI9_5_IRQHandler (void_t)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003be4 <EXTI9_5_IRQHandler+0x7c>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <EXTI9_5_IRQHandler+0x18>
 8003b74:	4b1c      	ldr	r3, [pc, #112]	@ (8003be8 <EXTI9_5_IRQHandler+0x80>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003be8 <EXTI9_5_IRQHandler+0x80>)
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	4b18      	ldr	r3, [pc, #96]	@ (8003be4 <EXTI9_5_IRQHandler+0x7c>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <EXTI9_5_IRQHandler+0x7c>)
 8003b8a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003b8c:	2020      	movs	r0, #32
 8003b8e:	f7fd fb7d 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003b92:	2040      	movs	r0, #64	@ 0x40
 8003b94:	f7fd fb7a 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003b98:	2080      	movs	r0, #128	@ 0x80
 8003b9a:	f7fd fb77 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003b9e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003ba2:	f7fd fb73 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003ba6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003baa:	f7fd fb6f 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 8003bae:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <EXTI9_5_IRQHandler+0x7c>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <EXTI9_5_IRQHandler+0x5a>
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003be4 <EXTI9_5_IRQHandler+0x7c>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <EXTI9_5_IRQHandler+0x7c>)
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	4b08      	ldr	r3, [pc, #32]	@ (8003be4 <EXTI9_5_IRQHandler+0x7c>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <EXTI9_5_IRQHandler+0x76>
 8003bca:	4b07      	ldr	r3, [pc, #28]	@ (8003be8 <EXTI9_5_IRQHandler+0x80>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <EXTI9_5_IRQHandler+0x76>
 8003bd2:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <EXTI9_5_IRQHandler+0x80>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b03      	ldr	r3, [pc, #12]	@ (8003be8 <EXTI9_5_IRQHandler+0x80>)
 8003bdc:	701a      	strb	r2, [r3, #0]
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20001e9a 	.word	0x20001e9a
 8003be8:	20001e99 	.word	0x20001e99

08003bec <EXTI15_10_IRQHandler>:

/*
 * Function: EXTI15_10_IRQHandler
 */
void_t EXTI15_10_IRQHandler (void_t)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8003bf0:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <EXTI15_10_IRQHandler+0x88>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <EXTI15_10_IRQHandler+0x18>
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <EXTI15_10_IRQHandler+0x8c>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	4b1d      	ldr	r3, [pc, #116]	@ (8003c78 <EXTI15_10_IRQHandler+0x8c>)
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <EXTI15_10_IRQHandler+0x88>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	4b19      	ldr	r3, [pc, #100]	@ (8003c74 <EXTI15_10_IRQHandler+0x88>)
 8003c0e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003c10:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003c14:	f7fd fb3a 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003c18:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003c1c:	f7fd fb36 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003c20:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003c24:	f7fd fb32 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003c28:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003c2c:	f7fd fb2e 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003c30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003c34:	f7fd fb2a 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003c38:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003c3c:	f7fd fb26 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
    GOS_ISR_EXIT
 8003c40:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <EXTI15_10_IRQHandler+0x88>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <EXTI15_10_IRQHandler+0x68>
 8003c48:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <EXTI15_10_IRQHandler+0x88>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	4b08      	ldr	r3, [pc, #32]	@ (8003c74 <EXTI15_10_IRQHandler+0x88>)
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <EXTI15_10_IRQHandler+0x88>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d109      	bne.n	8003c70 <EXTI15_10_IRQHandler+0x84>
 8003c5c:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <EXTI15_10_IRQHandler+0x8c>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <EXTI15_10_IRQHandler+0x84>
 8003c64:	4b04      	ldr	r3, [pc, #16]	@ (8003c78 <EXTI15_10_IRQHandler+0x8c>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	4b02      	ldr	r3, [pc, #8]	@ (8003c78 <EXTI15_10_IRQHandler+0x8c>)
 8003c6e:	701a      	strb	r2, [r3, #0]
}
 8003c70:	bf00      	nop
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20001e9a 	.word	0x20001e9a
 8003c78:	20001e99 	.word	0x20001e99

08003c7c <HAL_GPIO_EXTI_Callback>:

/*
 * Function: HAL_GPIO_EXTI_Callback
 */
void_t HAL_GPIO_EXTI_Callback (u16_t pin)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
    GOS_ISR_ENTER
 8003c86:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d105      	bne.n	8003c9a <HAL_GPIO_EXTI_Callback+0x1e>
 8003c8e:	4b26      	ldr	r3, [pc, #152]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0xac>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	3301      	adds	r3, #1
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4b24      	ldr	r3, [pc, #144]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0xac>)
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003ca4:	701a      	strb	r2, [r3, #0]
    /*
     * Local variables.
     */
    u8_t callbackIndex = 0u;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
    /*
     * Function code.
     */
    if (gpioItConfig != NULL)
    {
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	e016      	b.n	8003cde <HAL_GPIO_EXTI_Callback+0x62>
        {
            if (gpioItConfig[callbackIndex].pin == pin && gpioItConfig[callbackIndex].callback != NULL)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d2c <HAL_GPIO_EXTI_Callback+0xb0>)
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	889b      	ldrh	r3, [r3, #4]
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_GPIO_EXTI_Callback+0x5c>
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d2c <HAL_GPIO_EXTI_Callback+0xb0>)
 8003cc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_GPIO_EXTI_Callback+0x5c>
            {
                gpioItConfig[callbackIndex].callback();
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	4a17      	ldr	r2, [pc, #92]	@ (8003d2c <HAL_GPIO_EXTI_Callback+0xb0>)
 8003cd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cd4:	4798      	blx	r3
                break;
 8003cd6:	e008      	b.n	8003cea <HAL_GPIO_EXTI_Callback+0x6e>
        for (callbackIndex = 0u; callbackIndex < gpioItConfigSize / sizeof(drv_gpioItCallbackDescriptor_t); callbackIndex++)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	4b13      	ldr	r3, [pc, #76]	@ (8003d30 <HAL_GPIO_EXTI_Callback+0xb4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	08db      	lsrs	r3, r3, #3
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d3e2      	bcc.n	8003cb0 <HAL_GPIO_EXTI_Callback+0x34>
    else
    {
        // Configuration array is NULL.
    }

    GOS_ISR_EXIT
 8003cea:	4b0e      	ldr	r3, [pc, #56]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_GPIO_EXTI_Callback+0x82>
 8003cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_GPIO_EXTI_Callback+0x9e>
 8003d06:	4b08      	ldr	r3, [pc, #32]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0xac>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_GPIO_EXTI_Callback+0x9e>
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0xac>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	4b04      	ldr	r3, [pc, #16]	@ (8003d28 <HAL_GPIO_EXTI_Callback+0xac>)
 8003d18:	701a      	strb	r2, [r3, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20001e9a 	.word	0x20001e9a
 8003d28:	20001e99 	.word	0x20001e99
 8003d2c:	0800dda0 	.word	0x0800dda0
 8003d30:	20001a78 	.word	0x20001a78

08003d34 <drv_itInit>:

/*
 * Function: drv_itInit
 */
gos_result_t drv_itInit (void_t)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t itDriverInitResult = GOS_ERROR;
 8003d3a:	23ae      	movs	r3, #174	@ 0xae
 8003d3c:	71fb      	strb	r3, [r7, #7]
    u8_t         itIdx              = 0u;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (itConfig != NULL)
    {
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	71bb      	strb	r3, [r7, #6]
 8003d46:	e02c      	b.n	8003da2 <drv_itInit+0x6e>
        {
            HAL_NVIC_SetPriority(itConfig[itIdx].irqType, itConfig[itIdx].preemtPriority, itConfig[itIdx].subPriority);
 8003d48:	79ba      	ldrb	r2, [r7, #6]
 8003d4a:	491e      	ldr	r1, [pc, #120]	@ (8003dc4 <drv_itInit+0x90>)
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	f993 0000 	ldrsb.w	r0, [r3]
 8003d5a:	79ba      	ldrb	r2, [r7, #6]
 8003d5c:	4919      	ldr	r1, [pc, #100]	@ (8003dc4 <drv_itInit+0x90>)
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	3304      	adds	r3, #4
 8003d6a:	6819      	ldr	r1, [r3, #0]
 8003d6c:	79ba      	ldrb	r2, [r7, #6]
 8003d6e:	4c15      	ldr	r4, [pc, #84]	@ (8003dc4 <drv_itInit+0x90>)
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4423      	add	r3, r4
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7fc fff7 	bl	8000d72 <HAL_NVIC_SetPriority>
            HAL_NVIC_EnableIRQ(itConfig[itIdx].irqType);
 8003d84:	79ba      	ldrb	r2, [r7, #6]
 8003d86:	490f      	ldr	r1, [pc, #60]	@ (8003dc4 <drv_itInit+0x90>)
 8003d88:	4613      	mov	r3, r2
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	f993 3000 	ldrsb.w	r3, [r3]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fd f807 	bl	8000daa <HAL_NVIC_EnableIRQ>
        for (itIdx = 0u; itIdx < itConfigSize / sizeof(drv_itDescriptor_t); itIdx++)
 8003d9c:	79bb      	ldrb	r3, [r7, #6]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	71bb      	strb	r3, [r7, #6]
 8003da2:	79ba      	ldrb	r2, [r7, #6]
 8003da4:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <drv_itInit+0x94>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4908      	ldr	r1, [pc, #32]	@ (8003dcc <drv_itInit+0x98>)
 8003daa:	fba1 1303 	umull	r1, r3, r1, r3
 8003dae:	08db      	lsrs	r3, r3, #3
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d3c9      	bcc.n	8003d48 <drv_itInit+0x14>
        }

        itDriverInitResult = GOS_SUCCESS;
 8003db4:	2355      	movs	r3, #85	@ 0x55
 8003db6:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL pointer.
    }

    return itDriverInitResult;
 8003db8:	79fb      	ldrb	r3, [r7, #7]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd90      	pop	{r4, r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	0800dda0 	.word	0x0800dda0
 8003dc8:	20000094 	.word	0x20000094
 8003dcc:	aaaaaaab 	.word	0xaaaaaaab

08003dd0 <drv_systimerStart>:

/*
 * Function: drv_systimerStart
 */
gos_result_t drv_systimerStart (void_t)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            systimerStartResult = GOS_ERROR;
 8003dd6:	23ae      	movs	r3, #174	@ 0xae
 8003dd8:	71fb      	strb	r3, [r7, #7]
    drv_tmrPeriphInstance_t instance            = 0u;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL)
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 8003dde:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <drv_systimerStart+0x30>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	71bb      	strb	r3, [r7, #6]

        systimerStartResult = drv_tmrStart(instance, GOS_MUTEX_ENDLESS_TMO);
 8003de4:	79bb      	ldrb	r3, [r7, #6]
 8003de6:	f04f 31ff 	mov.w	r1, #4294967295
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 f9a2 	bl	8004134 <drv_tmrStart>
 8003df0:	4603      	mov	r3, r0
 8003df2:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Configuration array is NULL.
    }

    return systimerStartResult;
 8003df4:	79fb      	ldrb	r3, [r7, #7]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	0800ddac 	.word	0x0800ddac

08003e04 <drv_systimerGetValue>:

/*
 * Function: drv_systimerGetValue
 */
gos_result_t drv_systimerGetValue (u16_t* pValue)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            systimerGetValueResult = GOS_ERROR;
 8003e0c:	23ae      	movs	r3, #174	@ 0xae
 8003e0e:	73fb      	strb	r3, [r7, #15]
    drv_tmrPeriphInstance_t instance               = 0u;
 8003e10:	2300      	movs	r3, #0
 8003e12:	73bb      	strb	r3, [r7, #14]
    u32_t                   temp                   = 0u;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    if (tmrServiceConfig != NULL && pValue != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00f      	beq.n	8003e3e <drv_systimerGetValue+0x3a>
    {
        instance = tmrServiceConfig[DRV_TMR_SYSTIMER_INSTANCE];
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <drv_systimerGetValue+0x44>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	73bb      	strb	r3, [r7, #14]
        systimerGetValueResult = drv_tmrGetValue(instance, &temp);
 8003e24:	f107 0208 	add.w	r2, r7, #8
 8003e28:	7bbb      	ldrb	r3, [r7, #14]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 f9b3 	bl	8004198 <drv_tmrGetValue>
 8003e32:	4603      	mov	r3, r0
 8003e34:	73fb      	strb	r3, [r7, #15]
        *pValue = (u16_t)temp;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	801a      	strh	r2, [r3, #0]
    else
    {
        // Configuration array is NULL or output parameter is NULL.
    }

    return systimerGetValueResult;
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	0800ddac 	.word	0x0800ddac

08003e4c <drv_tmrInit>:

/*
 * Function: drv_tmrInit
 */
gos_result_t drv_tmrInit (void_t)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t tmrDriverInitResult = GOS_SUCCESS;
 8003e52:	2355      	movs	r3, #85	@ 0x55
 8003e54:	71fb      	strb	r3, [r7, #7]
    u8_t         tmrIdx              = 0u;
 8003e56:	2300      	movs	r3, #0
 8003e58:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (tmrConfig != NULL)
    {
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	71bb      	strb	r3, [r7, #6]
 8003e5e:	e00e      	b.n	8003e7e <drv_tmrInit+0x32>
        {
            GOS_CONCAT_RESULT(tmrDriverInitResult, drv_tmrInitInstance(tmrIdx));
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	2b55      	cmp	r3, #85	@ 0x55
 8003e64:	d106      	bne.n	8003e74 <drv_tmrInit+0x28>
 8003e66:	79bb      	ldrb	r3, [r7, #6]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f81b 	bl	8003ea4 <drv_tmrInitInstance>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
 8003e72:	e001      	b.n	8003e78 <drv_tmrInit+0x2c>
 8003e74:	23ae      	movs	r3, #174	@ 0xae
 8003e76:	71fb      	strb	r3, [r7, #7]
        for (tmrIdx = 0u; tmrIdx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); tmrIdx++)
 8003e78:	79bb      	ldrb	r3, [r7, #6]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	71bb      	strb	r3, [r7, #6]
 8003e7e:	79ba      	ldrb	r2, [r7, #6]
 8003e80:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <drv_tmrInit+0x50>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4906      	ldr	r1, [pc, #24]	@ (8003ea0 <drv_tmrInit+0x54>)
 8003e86:	fba1 1303 	umull	r1, r3, r1, r3
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d3e7      	bcc.n	8003e60 <drv_tmrInit+0x14>
    {
        // Configuration array is NULL pointer.
        tmrDriverInitResult = GOS_ERROR;
    }

    return tmrDriverInitResult;
 8003e90:	79fb      	ldrb	r3, [r7, #7]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200000cc 	.word	0x200000cc
 8003ea0:	4ec4ec4f 	.word	0x4ec4ec4f

08003ea4 <drv_tmrInitInstance>:

/*
 * Function: drv_tmrInitInstance
 */
gos_result_t drv_tmrInitInstance (u8_t tmrInstanceIndex)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	@ 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t            tmrInitResult      = GOS_ERROR;
 8003eae:	23ae      	movs	r3, #174	@ 0xae
 8003eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    drv_tmrPeriphInstance_t instance           = 0u;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    TIM_MasterConfigTypeDef sMasterConfig      = {0};
 8003eba:	f107 031c 	add.w	r3, r7, #28
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	605a      	str	r2, [r3, #4]
    TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
 8003ec4:	f107 030c 	add.w	r3, r7, #12
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]

    /*
     * Function code.
     */
    if (tmrConfig != NULL && tmrInstanceIndex < (tmrConfigSize / sizeof(drv_tmrDescriptor_t)))
 8003ed2:	79fa      	ldrb	r2, [r7, #7]
 8003ed4:	4b90      	ldr	r3, [pc, #576]	@ (8004118 <drv_tmrInitInstance+0x274>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4990      	ldr	r1, [pc, #576]	@ (800411c <drv_tmrInitInstance+0x278>)
 8003eda:	fba1 1303 	umull	r1, r3, r1, r3
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	f080 8112 	bcs.w	800410a <drv_tmrInitInstance+0x266>
    {
        instance = tmrConfig[tmrInstanceIndex].periphInstance;
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	4a8d      	ldr	r2, [pc, #564]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8003eea:	2134      	movs	r1, #52	@ 0x34
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

        htims[instance].Instance               = tmrInstanceLut[instance];
 8003ef8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003efc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003f00:	4988      	ldr	r1, [pc, #544]	@ (8004124 <drv_tmrInitInstance+0x280>)
 8003f02:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003f06:	4888      	ldr	r0, [pc, #544]	@ (8004128 <drv_tmrInitInstance+0x284>)
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4403      	add	r3, r0
 8003f12:	6019      	str	r1, [r3, #0]
        htims[instance].Init.AutoReloadPreload = tmrConfig[tmrInstanceIndex].autoReloadPreload;
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003f1a:	4981      	ldr	r1, [pc, #516]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8003f1c:	2034      	movs	r0, #52	@ 0x34
 8003f1e:	fb00 f303 	mul.w	r3, r0, r3
 8003f22:	440b      	add	r3, r1
 8003f24:	3318      	adds	r3, #24
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	487f      	ldr	r0, [pc, #508]	@ (8004128 <drv_tmrInitInstance+0x284>)
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4403      	add	r3, r0
 8003f34:	3318      	adds	r3, #24
 8003f36:	6019      	str	r1, [r3, #0]
        htims[instance].Init.ClockDivision     = tmrConfig[tmrInstanceIndex].clockDivision;
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003f3e:	4978      	ldr	r1, [pc, #480]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8003f40:	2034      	movs	r0, #52	@ 0x34
 8003f42:	fb00 f303 	mul.w	r3, r0, r3
 8003f46:	440b      	add	r3, r1
 8003f48:	3314      	adds	r3, #20
 8003f4a:	6819      	ldr	r1, [r3, #0]
 8003f4c:	4876      	ldr	r0, [pc, #472]	@ (8004128 <drv_tmrInitInstance+0x284>)
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	4403      	add	r3, r0
 8003f58:	3310      	adds	r3, #16
 8003f5a:	6019      	str	r1, [r3, #0]
        htims[instance].Init.CounterMode       = tmrConfig[tmrInstanceIndex].counterMode;
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003f62:	496f      	ldr	r1, [pc, #444]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8003f64:	2034      	movs	r0, #52	@ 0x34
 8003f66:	fb00 f303 	mul.w	r3, r0, r3
 8003f6a:	440b      	add	r3, r1
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	6819      	ldr	r1, [r3, #0]
 8003f70:	486d      	ldr	r0, [pc, #436]	@ (8004128 <drv_tmrInitInstance+0x284>)
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4403      	add	r3, r0
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Period            = tmrConfig[tmrInstanceIndex].period;
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003f86:	4966      	ldr	r1, [pc, #408]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8003f88:	2034      	movs	r0, #52	@ 0x34
 8003f8a:	fb00 f303 	mul.w	r3, r0, r3
 8003f8e:	440b      	add	r3, r1
 8003f90:	3310      	adds	r3, #16
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	4864      	ldr	r0, [pc, #400]	@ (8004128 <drv_tmrInitInstance+0x284>)
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4403      	add	r3, r0
 8003fa0:	330c      	adds	r3, #12
 8003fa2:	6019      	str	r1, [r3, #0]
        htims[instance].Init.Prescaler         = tmrConfig[tmrInstanceIndex].prescaler;
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003faa:	495d      	ldr	r1, [pc, #372]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8003fac:	2034      	movs	r0, #52	@ 0x34
 8003fae:	fb00 f303 	mul.w	r3, r0, r3
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	6819      	ldr	r1, [r3, #0]
 8003fb8:	485b      	ldr	r0, [pc, #364]	@ (8004128 <drv_tmrInitInstance+0x284>)
 8003fba:	4613      	mov	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4403      	add	r3, r0
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	6019      	str	r1, [r3, #0]
        htims[instance].Init.RepetitionCounter = tmrConfig[tmrInstanceIndex].repetitionCounter;
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003fce:	4954      	ldr	r1, [pc, #336]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8003fd0:	2034      	movs	r0, #52	@ 0x34
 8003fd2:	fb00 f303 	mul.w	r3, r0, r3
 8003fd6:	440b      	add	r3, r1
 8003fd8:	3308      	adds	r3, #8
 8003fda:	6819      	ldr	r1, [r3, #0]
 8003fdc:	4852      	ldr	r0, [pc, #328]	@ (8004128 <drv_tmrInitInstance+0x284>)
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4403      	add	r3, r0
 8003fe8:	3314      	adds	r3, #20
 8003fea:	6019      	str	r1, [r3, #0]
        sMasterConfig.MasterOutputTrigger      = tmrConfig[tmrInstanceIndex].masterOutputTrigger;
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	4a4c      	ldr	r2, [pc, #304]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8003ff0:	2134      	movs	r1, #52	@ 0x34
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3328      	adds	r3, #40	@ 0x28
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61fb      	str	r3, [r7, #28]
        sMasterConfig.MasterSlaveMode          = tmrConfig[tmrInstanceIndex].masterSlaveMode;
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	4a47      	ldr	r2, [pc, #284]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8004002:	2134      	movs	r1, #52	@ 0x34
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	4413      	add	r3, r2
 800400a:	332c      	adds	r3, #44	@ 0x2c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	623b      	str	r3, [r7, #32]
        sClockSourceConfig.ClockSource         = tmrConfig[tmrInstanceIndex].clockSource;
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	4a43      	ldr	r2, [pc, #268]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8004014:	2134      	movs	r1, #52	@ 0x34
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3320      	adds	r3, #32
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]

        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 8004022:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4a3e      	ldr	r2, [pc, #248]	@ (8004128 <drv_tmrInitInstance+0x284>)
 8004030:	4413      	add	r3, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd fdda 	bl	8001bec <HAL_TIM_Base_Init>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d165      	bne.n	800410a <drv_tmrInitInstance+0x266>
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 800403e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4a39      	ldr	r2, [pc, #228]	@ (800412c <drv_tmrInitInstance+0x288>)
 8004046:	4413      	add	r3, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f005 f833 	bl	80090b4 <gos_mutexInit>
 800404e:	4603      	mov	r3, r0
        if (HAL_TIM_Base_Init (&htims[instance])            == HAL_OK      &&
 8004050:	2b55      	cmp	r3, #85	@ 0x55
 8004052:	d15a      	bne.n	800410a <drv_tmrInitInstance+0x266>
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 8004054:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004058:	4613      	mov	r3, r2
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4a33      	ldr	r2, [pc, #204]	@ (8004130 <drv_tmrInitInstance+0x28c>)
 8004062:	4413      	add	r3, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f007 fc9b 	bl	800b9a0 <gos_triggerInit>
 800406a:	4603      	mov	r3, r0
            gos_mutexInit     (&tmrMutexes[instance])       == GOS_SUCCESS &&
 800406c:	2b55      	cmp	r3, #85	@ 0x55
 800406e:	d14c      	bne.n	800410a <drv_tmrInitInstance+0x266>
            gos_triggerReset  (&tmrReadyTriggers[instance]) == GOS_SUCCESS
 8004070:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <drv_tmrInitInstance+0x28c>)
 800407e:	4413      	add	r3, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f007 fca9 	bl	800b9d8 <gos_triggerReset>
 8004086:	4603      	mov	r3, r0
            gos_triggerInit   (&tmrReadyTriggers[instance]) == GOS_SUCCESS &&
 8004088:	2b55      	cmp	r3, #85	@ 0x55
 800408a:	d13e      	bne.n	800410a <drv_tmrInitInstance+0x266>
            )
        {
            tmrInitResult = GOS_SUCCESS;
 800408c:	2355      	movs	r3, #85	@ 0x55
 800408e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            if (tmrConfig[tmrInstanceIndex].useClockConfig == GOS_TRUE)
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	4a22      	ldr	r2, [pc, #136]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 8004096:	2134      	movs	r1, #52	@ 0x34
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	331c      	adds	r3, #28
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b36      	cmp	r3, #54	@ 0x36
 80040a4:	d113      	bne.n	80040ce <drv_tmrInitInstance+0x22a>
            {
                if (HAL_TIM_ConfigClockSource(&htims[instance], &sClockSourceConfig) != HAL_OK)
 80040a6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004128 <drv_tmrInitInstance+0x284>)
 80040b4:	4413      	add	r3, r2
 80040b6:	f107 020c 	add.w	r2, r7, #12
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd ff39 	bl	8001f34 <HAL_TIM_ConfigClockSource>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <drv_tmrInitInstance+0x22a>
                {
                    tmrInitResult = GOS_ERROR;
 80040c8:	23ae      	movs	r3, #174	@ 0xae
 80040ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            else
            {
                // Not used.
            }

            if (tmrConfig[tmrInstanceIndex].useMasterConfig == GOS_TRUE)
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	4a13      	ldr	r2, [pc, #76]	@ (8004120 <drv_tmrInitInstance+0x27c>)
 80040d2:	2134      	movs	r1, #52	@ 0x34
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	3324      	adds	r3, #36	@ 0x24
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b36      	cmp	r3, #54	@ 0x36
 80040e0:	d113      	bne.n	800410a <drv_tmrInitInstance+0x266>
            {
                if (HAL_TIMEx_MasterConfigSynchronization(&htims[instance], &sMasterConfig) != HAL_OK)
 80040e2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004128 <drv_tmrInitInstance+0x284>)
 80040f0:	4413      	add	r3, r2
 80040f2:	f107 021c 	add.w	r2, r7, #28
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe f931 	bl	8002360 <HAL_TIMEx_MasterConfigSynchronization>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <drv_tmrInitInstance+0x266>
                {
                    tmrInitResult = GOS_ERROR;
 8004104:	23ae      	movs	r3, #174	@ 0xae
 8004106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    else
    {
        // Configuration missing or index is out of array boundary.
    }

    return tmrInitResult;
 800410a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800410e:	4618      	mov	r0, r3
 8004110:	3728      	adds	r7, #40	@ 0x28
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	200000cc 	.word	0x200000cc
 800411c:	4ec4ec4f 	.word	0x4ec4ec4f
 8004120:	20000098 	.word	0x20000098
 8004124:	20000108 	.word	0x20000108
 8004128:	20001a80 	.word	0x20001a80
 800412c:	20001cc0 	.word	0x20001cc0
 8004130:	20001ce0 	.word	0x20001ce0

08004134 <drv_tmrStart>:

/*
 * Function: drv_tmrStart
 */
gos_result_t drv_tmrStart (drv_tmrPeriphInstance_t instance, u32_t mutexTmo)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	6039      	str	r1, [r7, #0]
 800413e:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrStartResult = GOS_ERROR;
 8004140:	23ae      	movs	r3, #174	@ 0xae
 8004142:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4a11      	ldr	r2, [pc, #68]	@ (8004190 <drv_tmrStart+0x5c>)
 800414a:	4413      	add	r3, r2
 800414c:	6839      	ldr	r1, [r7, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f004 ffca 	bl	80090e8 <gos_mutexLock>
 8004154:	4603      	mov	r3, r0
 8004156:	2b55      	cmp	r3, #85	@ 0x55
 8004158:	d10e      	bne.n	8004178 <drv_tmrStart+0x44>
        HAL_TIM_Base_Start(&htims[instance])           == HAL_OK)
 800415a:	79fa      	ldrb	r2, [r7, #7]
 800415c:	4613      	mov	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4a0b      	ldr	r2, [pc, #44]	@ (8004194 <drv_tmrStart+0x60>)
 8004166:	4413      	add	r3, r2
 8004168:	4618      	mov	r0, r3
 800416a:	f7fd fd99 	bl	8001ca0 <HAL_TIM_Base_Start>
 800416e:	4603      	mov	r3, r0
    if (gos_mutexLock(&tmrMutexes[instance], mutexTmo) == GOS_SUCCESS &&
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <drv_tmrStart+0x44>
    {
        tmrStartResult = GOS_SUCCESS;
 8004174:	2355      	movs	r3, #85	@ 0x55
 8004176:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Error.
    }

    (void_t) gos_mutexUnlock(&tmrMutexes[instance]);
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4a04      	ldr	r2, [pc, #16]	@ (8004190 <drv_tmrStart+0x5c>)
 800417e:	4413      	add	r3, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f005 f8b7 	bl	80092f4 <gos_mutexUnlock>

    return tmrStartResult;
 8004186:	7bfb      	ldrb	r3, [r7, #15]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20001cc0 	.word	0x20001cc0
 8004194:	20001a80 	.word	0x20001a80

08004198 <drv_tmrGetValue>:

/*
 * Function: drv_tmrGetValue
 */
GOS_INLINE gos_result_t drv_tmrGetValue (drv_tmrPeriphInstance_t instance, u32_t* pValue)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	6039      	str	r1, [r7, #0]
 80041a2:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t tmrGetResult = GOS_ERROR;
 80041a4:	23ae      	movs	r3, #174	@ 0xae
 80041a6:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pValue != NULL)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00c      	beq.n	80041c8 <drv_tmrGetValue+0x30>
    {
        *pValue = __HAL_TIM_GET_COUNTER(&htims[instance]);
 80041ae:	79fa      	ldrb	r2, [r7, #7]
 80041b0:	4909      	ldr	r1, [pc, #36]	@ (80041d8 <drv_tmrGetValue+0x40>)
 80041b2:	4613      	mov	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	601a      	str	r2, [r3, #0]
        tmrGetResult = GOS_SUCCESS;
 80041c4:	2355      	movs	r3, #85	@ 0x55
 80041c6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // NULL pointer.
    }

    return tmrGetResult;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20001a80 	.word	0x20001a80

080041dc <HAL_TIM_PeriodElapsedCallback>:

/*
 * Function: HAL_TIM_PeriodElapsedCallback
 */
void_t HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *pHtim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_tmrPeriphInstance_t instance = DRV_TMR_INSTANCE_1;
 80041e4:	2300      	movs	r3, #0
 80041e6:	73fb      	strb	r3, [r7, #15]
    u8_t                    idx      = 0u;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pHtim != NULL && tmrConfig != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d041      	beq.n	8004276 <HAL_TIM_PeriodElapsedCallback+0x9a>
    {
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
 80041f6:	e03a      	b.n	800426e <HAL_TIM_PeriodElapsedCallback+0x92>
        {
            if (tmrInstanceLut[instance] == pHtim->Instance)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	4a21      	ldr	r2, [pc, #132]	@ (8004280 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80041fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d12f      	bne.n	8004268 <HAL_TIM_PeriodElapsedCallback+0x8c>
            {
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 8004208:	2300      	movs	r3, #0
 800420a:	73bb      	strb	r3, [r7, #14]
 800420c:	e020      	b.n	8004250 <HAL_TIM_PeriodElapsedCallback+0x74>
                {
                    if (tmrConfig[idx].periphInstance == instance)
 800420e:	7bbb      	ldrb	r3, [r7, #14]
 8004210:	4a1c      	ldr	r2, [pc, #112]	@ (8004284 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004212:	2134      	movs	r1, #52	@ 0x34
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	429a      	cmp	r2, r3
 8004220:	d113      	bne.n	800424a <HAL_TIM_PeriodElapsedCallback+0x6e>
                    {
                        if (tmrConfig[idx].periodCallback != NULL)
 8004222:	7bbb      	ldrb	r3, [r7, #14]
 8004224:	4a17      	ldr	r2, [pc, #92]	@ (8004284 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004226:	2134      	movs	r1, #52	@ 0x34
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	3330      	adds	r3, #48	@ 0x30
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_TIM_PeriodElapsedCallback+0x88>
                        {
                            tmrConfig[idx].periodCallback();
 8004236:	7bbb      	ldrb	r3, [r7, #14]
 8004238:	4a12      	ldr	r2, [pc, #72]	@ (8004284 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800423a:	2134      	movs	r1, #52	@ 0x34
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	3330      	adds	r3, #48	@ 0x30
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4798      	blx	r3
                        }
                        else
                        {
                            // No registered callback.
                        }
                        break;
 8004248:	e00c      	b.n	8004264 <HAL_TIM_PeriodElapsedCallback+0x88>
                for (idx = 0u; idx < tmrConfigSize / sizeof(drv_tmrDescriptor_t); idx++)
 800424a:	7bbb      	ldrb	r3, [r7, #14]
 800424c:	3301      	adds	r3, #1
 800424e:	73bb      	strb	r3, [r7, #14]
 8004250:	7bba      	ldrb	r2, [r7, #14]
 8004252:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	490d      	ldr	r1, [pc, #52]	@ (800428c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004258:	fba1 1303 	umull	r1, r3, r1, r3
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	429a      	cmp	r2, r3
 8004260:	d3d5      	bcc.n	800420e <HAL_TIM_PeriodElapsedCallback+0x32>
                    else
                    {
                        // Continue.
                    }
                }
                break;
 8004262:	e008      	b.n	8004276 <HAL_TIM_PeriodElapsedCallback+0x9a>
                        break;
 8004264:	bf00      	nop
                break;
 8004266:	e006      	b.n	8004276 <HAL_TIM_PeriodElapsedCallback+0x9a>
        for (instance = DRV_TMR_INSTANCE_1; instance < DRV_TMR_NUM_OF_INSTANCES; instance++)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	3301      	adds	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b07      	cmp	r3, #7
 8004272:	d9c1      	bls.n	80041f8 <HAL_TIM_PeriodElapsedCallback+0x1c>
    }
    else
    {
        // NULL pointer fail.
    }
}
 8004274:	e7ff      	b.n	8004276 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8004276:	bf00      	nop
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000108 	.word	0x20000108
 8004284:	20000098 	.word	0x20000098
 8004288:	200000cc 	.word	0x200000cc
 800428c:	4ec4ec4f 	.word	0x4ec4ec4f

08004290 <TIM2_IRQHandler>:

/*
 * Function: TIM2_IRQHandler
 */
void_t TIM2_IRQHandler (void_t)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8004294:	4b16      	ldr	r3, [pc, #88]	@ (80042f0 <TIM2_IRQHandler+0x60>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <TIM2_IRQHandler+0x18>
 800429c:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <TIM2_IRQHandler+0x64>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	3301      	adds	r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	4b13      	ldr	r3, [pc, #76]	@ (80042f4 <TIM2_IRQHandler+0x64>)
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	4b11      	ldr	r3, [pc, #68]	@ (80042f0 <TIM2_IRQHandler+0x60>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	4b0f      	ldr	r3, [pc, #60]	@ (80042f0 <TIM2_IRQHandler+0x60>)
 80042b2:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_2]);
 80042b4:	4810      	ldr	r0, [pc, #64]	@ (80042f8 <TIM2_IRQHandler+0x68>)
 80042b6:	f7fd fd4d 	bl	8001d54 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 80042ba:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <TIM2_IRQHandler+0x60>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <TIM2_IRQHandler+0x3e>
 80042c2:	4b0b      	ldr	r3, [pc, #44]	@ (80042f0 <TIM2_IRQHandler+0x60>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	4b09      	ldr	r3, [pc, #36]	@ (80042f0 <TIM2_IRQHandler+0x60>)
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	4b08      	ldr	r3, [pc, #32]	@ (80042f0 <TIM2_IRQHandler+0x60>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <TIM2_IRQHandler+0x5a>
 80042d6:	4b07      	ldr	r3, [pc, #28]	@ (80042f4 <TIM2_IRQHandler+0x64>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <TIM2_IRQHandler+0x5a>
 80042de:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <TIM2_IRQHandler+0x64>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	4b03      	ldr	r3, [pc, #12]	@ (80042f4 <TIM2_IRQHandler+0x64>)
 80042e8:	701a      	strb	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20001e9a 	.word	0x20001e9a
 80042f4:	20001e99 	.word	0x20001e99
 80042f8:	20001ac8 	.word	0x20001ac8

080042fc <TIM3_IRQHandler>:

/*
 * Function: TIM3_IRQHandler
 */
void_t TIM3_IRQHandler (void_t)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 8004300:	4b16      	ldr	r3, [pc, #88]	@ (800435c <TIM3_IRQHandler+0x60>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <TIM3_IRQHandler+0x18>
 8004308:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <TIM3_IRQHandler+0x64>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	3301      	adds	r3, #1
 800430e:	b2da      	uxtb	r2, r3
 8004310:	4b13      	ldr	r3, [pc, #76]	@ (8004360 <TIM3_IRQHandler+0x64>)
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	4b11      	ldr	r3, [pc, #68]	@ (800435c <TIM3_IRQHandler+0x60>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	3301      	adds	r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	4b0f      	ldr	r3, [pc, #60]	@ (800435c <TIM3_IRQHandler+0x60>)
 800431e:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_3]);
 8004320:	4810      	ldr	r0, [pc, #64]	@ (8004364 <TIM3_IRQHandler+0x68>)
 8004322:	f7fd fd17 	bl	8001d54 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8004326:	4b0d      	ldr	r3, [pc, #52]	@ (800435c <TIM3_IRQHandler+0x60>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <TIM3_IRQHandler+0x3e>
 800432e:	4b0b      	ldr	r3, [pc, #44]	@ (800435c <TIM3_IRQHandler+0x60>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	3b01      	subs	r3, #1
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4b09      	ldr	r3, [pc, #36]	@ (800435c <TIM3_IRQHandler+0x60>)
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	4b08      	ldr	r3, [pc, #32]	@ (800435c <TIM3_IRQHandler+0x60>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <TIM3_IRQHandler+0x5a>
 8004342:	4b07      	ldr	r3, [pc, #28]	@ (8004360 <TIM3_IRQHandler+0x64>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <TIM3_IRQHandler+0x5a>
 800434a:	4b05      	ldr	r3, [pc, #20]	@ (8004360 <TIM3_IRQHandler+0x64>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	3b01      	subs	r3, #1
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4b03      	ldr	r3, [pc, #12]	@ (8004360 <TIM3_IRQHandler+0x64>)
 8004354:	701a      	strb	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20001e9a 	.word	0x20001e9a
 8004360:	20001e99 	.word	0x20001e99
 8004364:	20001b10 	.word	0x20001b10

08004368 <TIM4_IRQHandler>:

/*
 * Function: TIM4_IRQHandler
 */
void_t TIM4_IRQHandler (void_t)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 800436c:	4b16      	ldr	r3, [pc, #88]	@ (80043c8 <TIM4_IRQHandler+0x60>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <TIM4_IRQHandler+0x18>
 8004374:	4b15      	ldr	r3, [pc, #84]	@ (80043cc <TIM4_IRQHandler+0x64>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	4b13      	ldr	r3, [pc, #76]	@ (80043cc <TIM4_IRQHandler+0x64>)
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	4b11      	ldr	r3, [pc, #68]	@ (80043c8 <TIM4_IRQHandler+0x60>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <TIM4_IRQHandler+0x60>)
 800438a:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_4]);
 800438c:	4810      	ldr	r0, [pc, #64]	@ (80043d0 <TIM4_IRQHandler+0x68>)
 800438e:	f7fd fce1 	bl	8001d54 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 8004392:	4b0d      	ldr	r3, [pc, #52]	@ (80043c8 <TIM4_IRQHandler+0x60>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <TIM4_IRQHandler+0x3e>
 800439a:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <TIM4_IRQHandler+0x60>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	3b01      	subs	r3, #1
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <TIM4_IRQHandler+0x60>)
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <TIM4_IRQHandler+0x60>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <TIM4_IRQHandler+0x5a>
 80043ae:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <TIM4_IRQHandler+0x64>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <TIM4_IRQHandler+0x5a>
 80043b6:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <TIM4_IRQHandler+0x64>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b03      	ldr	r3, [pc, #12]	@ (80043cc <TIM4_IRQHandler+0x64>)
 80043c0:	701a      	strb	r2, [r3, #0]
}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20001e9a 	.word	0x20001e9a
 80043cc:	20001e99 	.word	0x20001e99
 80043d0:	20001b58 	.word	0x20001b58

080043d4 <TIM5_IRQHandler>:

/*
 * Function: TIM5_IRQHandler
 */
void_t TIM5_IRQHandler (void_t)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    GOS_ISR_ENTER
 80043d8:	4b16      	ldr	r3, [pc, #88]	@ (8004434 <TIM5_IRQHandler+0x60>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <TIM5_IRQHandler+0x18>
 80043e0:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <TIM5_IRQHandler+0x64>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	4b13      	ldr	r3, [pc, #76]	@ (8004438 <TIM5_IRQHandler+0x64>)
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	4b11      	ldr	r3, [pc, #68]	@ (8004434 <TIM5_IRQHandler+0x60>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004434 <TIM5_IRQHandler+0x60>)
 80043f6:	701a      	strb	r2, [r3, #0]

    HAL_TIM_IRQHandler(&htims[DRV_TMR_INSTANCE_5]);
 80043f8:	4810      	ldr	r0, [pc, #64]	@ (800443c <TIM5_IRQHandler+0x68>)
 80043fa:	f7fd fcab 	bl	8001d54 <HAL_TIM_IRQHandler>

    GOS_ISR_EXIT
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <TIM5_IRQHandler+0x60>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <TIM5_IRQHandler+0x3e>
 8004406:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <TIM5_IRQHandler+0x60>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	3b01      	subs	r3, #1
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4b09      	ldr	r3, [pc, #36]	@ (8004434 <TIM5_IRQHandler+0x60>)
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	4b08      	ldr	r3, [pc, #32]	@ (8004434 <TIM5_IRQHandler+0x60>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <TIM5_IRQHandler+0x5a>
 800441a:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <TIM5_IRQHandler+0x64>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <TIM5_IRQHandler+0x5a>
 8004422:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <TIM5_IRQHandler+0x64>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	3b01      	subs	r3, #1
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4b03      	ldr	r3, [pc, #12]	@ (8004438 <TIM5_IRQHandler+0x64>)
 800442c:	701a      	strb	r2, [r3, #0]
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20001e9a 	.word	0x20001e9a
 8004438:	20001e99 	.word	0x20001e99
 800443c:	20001ba0 	.word	0x20001ba0

08004440 <drv_traceTransmitUnsafe>:

/*
 * Function: drv_traceTransmitUnsafe
 */
GOS_INLINE gos_result_t drv_traceTransmitUnsafe (char_t* pMessage)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 8004448:	23ae      	movs	r3, #174	@ 0xae
 800444a:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 800444c:	2300      	movs	r3, #0
 800444e:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 8004450:	4b0a      	ldr	r3, [pc, #40]	@ (800447c <drv_traceTransmitUnsafe+0x3c>)
 8004452:	789b      	ldrb	r3, [r3, #2]
 8004454:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitBlocking(instance, (u8_t*)pMessage, strlen(pMessage),
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fb fecc 	bl	80001f4 <strlen>
 800445c:	4603      	mov	r3, r0
 800445e:	b29a      	uxth	r2, r3
 8004460:	4b07      	ldr	r3, [pc, #28]	@ (8004480 <drv_traceTransmitUnsafe+0x40>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	7bb8      	ldrb	r0, [r7, #14]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	f000 f982 	bl	8004770 <drv_uartTransmitBlocking>
 800446c:	4603      	mov	r3, r0
 800446e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	0800ddd8 	.word	0x0800ddd8
 8004480:	200000d0 	.word	0x200000d0

08004484 <drv_traceTransmit>:

/*
 * Function: drv_traceTransmit
 */
GOS_INLINE gos_result_t drv_traceTransmit (char_t* pMessage)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af02      	add	r7, sp, #8
 800448a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t             uartTransmitResult = GOS_ERROR;
 800448c:	23ae      	movs	r3, #174	@ 0xae
 800448e:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance           = 0u;
 8004490:	2300      	movs	r3, #0
 8004492:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartServiceConfig != NULL)
    {
        instance = uartServiceConfig[DRV_UART_TRACE_INSTANCE];
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <drv_traceTransmit+0x44>)
 8004496:	789b      	ldrb	r3, [r3, #2]
 8004498:	73bb      	strb	r3, [r7, #14]

        uartTransmitResult = drv_uartTransmitIT(instance, (u8_t*)pMessage, strlen(pMessage),
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fb feaa 	bl	80001f4 <strlen>
 80044a0:	4603      	mov	r3, r0
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <drv_traceTransmit+0x48>)
 80044a6:	6819      	ldr	r1, [r3, #0]
 80044a8:	4b08      	ldr	r3, [pc, #32]	@ (80044cc <drv_traceTransmit+0x48>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	7bb8      	ldrb	r0, [r7, #14]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	460b      	mov	r3, r1
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	f000 f9a8 	bl	8004808 <drv_uartTransmitIT>
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Configuration array is NULL.
    }

    return uartTransmitResult;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	0800ddd8 	.word	0x0800ddd8
 80044cc:	200000d0 	.word	0x200000d0

080044d0 <drv_uartInit>:

/*
 * Function: drv_uartInit
 */
gos_result_t drv_uartInit (void_t)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t uartDriverInitResult = GOS_SUCCESS;
 80044d6:	2355      	movs	r3, #85	@ 0x55
 80044d8:	71fb      	strb	r3, [r7, #7]
    u8_t         uartIdx              = 0u;
 80044da:	2300      	movs	r3, #0
 80044dc:	71bb      	strb	r3, [r7, #6]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 80044de:	2300      	movs	r3, #0
 80044e0:	71bb      	strb	r3, [r7, #6]
 80044e2:	e00e      	b.n	8004502 <drv_uartInit+0x32>
        {
            GOS_CONCAT_RESULT(uartDriverInitResult, drv_uartInitInstance(uartIdx));
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	2b55      	cmp	r3, #85	@ 0x55
 80044e8:	d106      	bne.n	80044f8 <drv_uartInit+0x28>
 80044ea:	79bb      	ldrb	r3, [r7, #6]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 f81b 	bl	8004528 <drv_uartInitInstance>
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
 80044f6:	e001      	b.n	80044fc <drv_uartInit+0x2c>
 80044f8:	23ae      	movs	r3, #174	@ 0xae
 80044fa:	71fb      	strb	r3, [r7, #7]
        for (uartIdx = 0u; uartIdx < uartConfigSize / sizeof(drv_uartDescriptor_t); uartIdx++)
 80044fc:	79bb      	ldrb	r3, [r7, #6]
 80044fe:	3301      	adds	r3, #1
 8004500:	71bb      	strb	r3, [r7, #6]
 8004502:	79ba      	ldrb	r2, [r7, #6]
 8004504:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <drv_uartInit+0x50>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4906      	ldr	r1, [pc, #24]	@ (8004524 <drv_uartInit+0x54>)
 800450a:	fba1 1303 	umull	r1, r3, r1, r3
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	429a      	cmp	r2, r3
 8004512:	d3e7      	bcc.n	80044e4 <drv_uartInit+0x14>
        // Configuration array is NULL pointer.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
        uartDriverInitResult = GOS_ERROR;
    }

    return uartDriverInitResult;
 8004514:	79fb      	ldrb	r3, [r7, #7]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	200000fc 	.word	0x200000fc
 8004524:	cccccccd 	.word	0xcccccccd

08004528 <drv_uartInitInstance>:

/*
 * Function: drv_uartInitInstance
 */
gos_result_t drv_uartInitInstance (u8_t uartInstanceIndex)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             uartInitResult = GOS_ERROR;
 8004532:	23ae      	movs	r3, #174	@ 0xae
 8004534:	73fb      	strb	r3, [r7, #15]
    drv_uartPeriphInstance_t instance       = 0u;
 8004536:	2300      	movs	r3, #0
 8004538:	73bb      	strb	r3, [r7, #14]
    /*
     * Function code.
     */
    if (uartConfig != NULL)
    {
        if (uartInstanceIndex < (uartConfigSize / sizeof(drv_uartDescriptor_t)))
 800453a:	79fa      	ldrb	r2, [r7, #7]
 800453c:	4b82      	ldr	r3, [pc, #520]	@ (8004748 <drv_uartInitInstance+0x220>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4982      	ldr	r1, [pc, #520]	@ (800474c <drv_uartInitInstance+0x224>)
 8004542:	fba1 1303 	umull	r1, r3, r1, r3
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	429a      	cmp	r2, r3
 800454a:	f080 80f2 	bcs.w	8004732 <drv_uartInitInstance+0x20a>
        {
            instance = uartConfig[uartInstanceIndex].periphInstance;
 800454e:	79fa      	ldrb	r2, [r7, #7]
 8004550:	497f      	ldr	r1, [pc, #508]	@ (8004750 <drv_uartInitInstance+0x228>)
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	440b      	add	r3, r1
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	73bb      	strb	r3, [r7, #14]

            huarts[instance].Instance          = uartInstanceLut[instance];
 8004560:	7bbb      	ldrb	r3, [r7, #14]
 8004562:	7bba      	ldrb	r2, [r7, #14]
 8004564:	497b      	ldr	r1, [pc, #492]	@ (8004754 <drv_uartInitInstance+0x22c>)
 8004566:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800456a:	487b      	ldr	r0, [pc, #492]	@ (8004758 <drv_uartInitInstance+0x230>)
 800456c:	4613      	mov	r3, r2
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4403      	add	r3, r0
 8004576:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.BaudRate     = uartConfig[uartInstanceIndex].baudRate;
 8004578:	79f9      	ldrb	r1, [r7, #7]
 800457a:	7bba      	ldrb	r2, [r7, #14]
 800457c:	4874      	ldr	r0, [pc, #464]	@ (8004750 <drv_uartInitInstance+0x228>)
 800457e:	460b      	mov	r3, r1
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4403      	add	r3, r0
 8004588:	3304      	adds	r3, #4
 800458a:	6819      	ldr	r1, [r3, #0]
 800458c:	4872      	ldr	r0, [pc, #456]	@ (8004758 <drv_uartInitInstance+0x230>)
 800458e:	4613      	mov	r3, r2
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4403      	add	r3, r0
 8004598:	3304      	adds	r3, #4
 800459a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.WordLength   = uartConfig[uartInstanceIndex].wordLength;
 800459c:	79f9      	ldrb	r1, [r7, #7]
 800459e:	7bba      	ldrb	r2, [r7, #14]
 80045a0:	486b      	ldr	r0, [pc, #428]	@ (8004750 <drv_uartInitInstance+0x228>)
 80045a2:	460b      	mov	r3, r1
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4403      	add	r3, r0
 80045ac:	3308      	adds	r3, #8
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	4869      	ldr	r0, [pc, #420]	@ (8004758 <drv_uartInitInstance+0x230>)
 80045b2:	4613      	mov	r3, r2
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4403      	add	r3, r0
 80045bc:	3308      	adds	r3, #8
 80045be:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.StopBits     = uartConfig[uartInstanceIndex].stopBits;
 80045c0:	79f9      	ldrb	r1, [r7, #7]
 80045c2:	7bba      	ldrb	r2, [r7, #14]
 80045c4:	4862      	ldr	r0, [pc, #392]	@ (8004750 <drv_uartInitInstance+0x228>)
 80045c6:	460b      	mov	r3, r1
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4403      	add	r3, r0
 80045d0:	330c      	adds	r3, #12
 80045d2:	6819      	ldr	r1, [r3, #0]
 80045d4:	4860      	ldr	r0, [pc, #384]	@ (8004758 <drv_uartInitInstance+0x230>)
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4403      	add	r3, r0
 80045e0:	330c      	adds	r3, #12
 80045e2:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Parity       = uartConfig[uartInstanceIndex].parity;
 80045e4:	79f9      	ldrb	r1, [r7, #7]
 80045e6:	7bba      	ldrb	r2, [r7, #14]
 80045e8:	4859      	ldr	r0, [pc, #356]	@ (8004750 <drv_uartInitInstance+0x228>)
 80045ea:	460b      	mov	r3, r1
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4403      	add	r3, r0
 80045f4:	3310      	adds	r3, #16
 80045f6:	6819      	ldr	r1, [r3, #0]
 80045f8:	4857      	ldr	r0, [pc, #348]	@ (8004758 <drv_uartInitInstance+0x230>)
 80045fa:	4613      	mov	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4403      	add	r3, r0
 8004604:	3310      	adds	r3, #16
 8004606:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.Mode         = uartConfig[uartInstanceIndex].mode;
 8004608:	79f9      	ldrb	r1, [r7, #7]
 800460a:	7bba      	ldrb	r2, [r7, #14]
 800460c:	4850      	ldr	r0, [pc, #320]	@ (8004750 <drv_uartInitInstance+0x228>)
 800460e:	460b      	mov	r3, r1
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4403      	add	r3, r0
 8004618:	3314      	adds	r3, #20
 800461a:	6819      	ldr	r1, [r3, #0]
 800461c:	484e      	ldr	r0, [pc, #312]	@ (8004758 <drv_uartInitInstance+0x230>)
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4403      	add	r3, r0
 8004628:	3314      	adds	r3, #20
 800462a:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.HwFlowCtl    = uartConfig[uartInstanceIndex].hwFlowControl;
 800462c:	79f9      	ldrb	r1, [r7, #7]
 800462e:	7bba      	ldrb	r2, [r7, #14]
 8004630:	4847      	ldr	r0, [pc, #284]	@ (8004750 <drv_uartInitInstance+0x228>)
 8004632:	460b      	mov	r3, r1
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4403      	add	r3, r0
 800463c:	3318      	adds	r3, #24
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	4845      	ldr	r0, [pc, #276]	@ (8004758 <drv_uartInitInstance+0x230>)
 8004642:	4613      	mov	r3, r2
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4403      	add	r3, r0
 800464c:	3318      	adds	r3, #24
 800464e:	6019      	str	r1, [r3, #0]
            huarts[instance].Init.OverSampling = uartConfig[uartInstanceIndex].overSampling;
 8004650:	79f9      	ldrb	r1, [r7, #7]
 8004652:	7bba      	ldrb	r2, [r7, #14]
 8004654:	483e      	ldr	r0, [pc, #248]	@ (8004750 <drv_uartInitInstance+0x228>)
 8004656:	460b      	mov	r3, r1
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4403      	add	r3, r0
 8004660:	331c      	adds	r3, #28
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	483c      	ldr	r0, [pc, #240]	@ (8004758 <drv_uartInitInstance+0x230>)
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4403      	add	r3, r0
 8004670:	331c      	adds	r3, #28
 8004672:	6019      	str	r1, [r3, #0]

            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 8004674:	7bba      	ldrb	r2, [r7, #14]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4a36      	ldr	r2, [pc, #216]	@ (8004758 <drv_uartInitInstance+0x230>)
 8004680:	4413      	add	r3, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd feee 	bl	8002464 <HAL_UART_Init>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d14a      	bne.n	8004724 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 800468e:	7bbb      	ldrb	r3, [r7, #14]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4a32      	ldr	r2, [pc, #200]	@ (800475c <drv_uartInitInstance+0x234>)
 8004694:	4413      	add	r3, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f004 fd0c 	bl	80090b4 <gos_mutexInit>
 800469c:	4603      	mov	r3, r0
            if (HAL_UART_Init   (&huarts[instance])              == HAL_OK      &&
 800469e:	2b55      	cmp	r3, #85	@ 0x55
 80046a0:	d140      	bne.n	8004724 <drv_uartInitInstance+0x1fc>
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 80046a2:	7bbb      	ldrb	r3, [r7, #14]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4a2e      	ldr	r2, [pc, #184]	@ (8004760 <drv_uartInitInstance+0x238>)
 80046a8:	4413      	add	r3, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f004 fd02 	bl	80090b4 <gos_mutexInit>
 80046b0:	4603      	mov	r3, r0
                gos_mutexInit   (&uartRxMutexes[instance])       == GOS_SUCCESS &&
 80046b2:	2b55      	cmp	r3, #85	@ 0x55
 80046b4:	d136      	bne.n	8004724 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 80046b6:	7bba      	ldrb	r2, [r7, #14]
 80046b8:	4613      	mov	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4a28      	ldr	r2, [pc, #160]	@ (8004764 <drv_uartInitInstance+0x23c>)
 80046c2:	4413      	add	r3, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f007 f96b 	bl	800b9a0 <gos_triggerInit>
 80046ca:	4603      	mov	r3, r0
                gos_mutexInit   (&uartTxMutexes[instance])       == GOS_SUCCESS &&
 80046cc:	2b55      	cmp	r3, #85	@ 0x55
 80046ce:	d129      	bne.n	8004724 <drv_uartInitInstance+0x1fc>
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 80046d0:	7bba      	ldrb	r2, [r7, #14]
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4a23      	ldr	r2, [pc, #140]	@ (8004768 <drv_uartInitInstance+0x240>)
 80046dc:	4413      	add	r3, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f007 f95e 	bl	800b9a0 <gos_triggerInit>
 80046e4:	4603      	mov	r3, r0
                gos_triggerInit (&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 80046e6:	2b55      	cmp	r3, #85	@ 0x55
 80046e8:	d11c      	bne.n	8004724 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 80046ea:	7bba      	ldrb	r2, [r7, #14]
 80046ec:	4613      	mov	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004764 <drv_uartInitInstance+0x23c>)
 80046f6:	4413      	add	r3, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f007 f96d 	bl	800b9d8 <gos_triggerReset>
 80046fe:	4603      	mov	r3, r0
                gos_triggerInit (&uartTxReadyTriggers[instance]) == GOS_SUCCESS &&
 8004700:	2b55      	cmp	r3, #85	@ 0x55
 8004702:	d10f      	bne.n	8004724 <drv_uartInitInstance+0x1fc>
                gos_triggerReset(&uartTxReadyTriggers[instance]) == GOS_SUCCESS
 8004704:	7bba      	ldrb	r2, [r7, #14]
 8004706:	4613      	mov	r3, r2
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4a16      	ldr	r2, [pc, #88]	@ (8004768 <drv_uartInitInstance+0x240>)
 8004710:	4413      	add	r3, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f007 f960 	bl	800b9d8 <gos_triggerReset>
 8004718:	4603      	mov	r3, r0
                gos_triggerReset(&uartRxReadyTriggers[instance]) == GOS_SUCCESS &&
 800471a:	2b55      	cmp	r3, #85	@ 0x55
 800471c:	d102      	bne.n	8004724 <drv_uartInitInstance+0x1fc>
                )
            {
                uartInitResult = GOS_SUCCESS;
 800471e:	2355      	movs	r3, #85	@ 0x55
 8004720:	73fb      	strb	r3, [r7, #15]
 8004722:	e00c      	b.n	800473e <drv_uartInitInstance+0x216>
            }
            else
            {
                // Init error.
                DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INSTANCE_INIT);
 8004724:	4b11      	ldr	r3, [pc, #68]	@ (800476c <drv_uartInitInstance+0x244>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f043 0304 	orr.w	r3, r3, #4
 800472c:	4a0f      	ldr	r2, [pc, #60]	@ (800476c <drv_uartInitInstance+0x244>)
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e005      	b.n	800473e <drv_uartInitInstance+0x216>
            }
        }
        else
        {
            // Index is out of array boundary.
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_INDEX_OUT_OF_BOUND);
 8004732:	4b0e      	ldr	r3, [pc, #56]	@ (800476c <drv_uartInitInstance+0x244>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f043 0302 	orr.w	r3, r3, #2
 800473a:	4a0c      	ldr	r2, [pc, #48]	@ (800476c <drv_uartInitInstance+0x244>)
 800473c:	6013      	str	r3, [r2, #0]
    {
        // Configuration is NULL.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_CFG_ARRAY_NULL);
    }

    return uartInitResult;
 800473e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	200000fc 	.word	0x200000fc
 800474c:	cccccccd 	.word	0xcccccccd
 8004750:	0800ddb0 	.word	0x0800ddb0
 8004754:	20000128 	.word	0x20000128
 8004758:	20001d44 	.word	0x20001d44
 800475c:	20001e10 	.word	0x20001e10
 8004760:	20001e1c 	.word	0x20001e1c
 8004764:	20001e28 	.word	0x20001e28
 8004768:	20001e4c 	.word	0x20001e4c
 800476c:	20001d40 	.word	0x20001d40

08004770 <drv_uartTransmitBlocking>:
 */
GOS_INLINE gos_result_t drv_uartTransmitBlocking (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t timeout
        )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	4603      	mov	r3, r0
 800477c:	73fb      	strb	r3, [r7, #15]
 800477e:	4613      	mov	r3, r2
 8004780:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 8004782:	23ae      	movs	r3, #174	@ 0xae
 8004784:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 8004786:	4b1d      	ldr	r3, [pc, #116]	@ (80047fc <drv_uartTransmitBlocking+0x8c>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	b2da      	uxtb	r2, r3
 800478e:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <drv_uartTransmitBlocking+0x8c>)
 8004790:	701a      	strb	r2, [r3, #0]

    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4a18      	ldr	r2, [pc, #96]	@ (8004800 <drv_uartTransmitBlocking+0x90>)
 800479e:	4413      	add	r3, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fd ff70 	bl	8002686 <HAL_UART_Abort>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d111      	bne.n	80047d0 <drv_uartTransmitBlocking+0x60>
        HAL_UART_Transmit(&huarts[instance], message, size, timeout) == HAL_OK)
 80047ac:	7bfa      	ldrb	r2, [r7, #15]
 80047ae:	4613      	mov	r3, r2
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4a12      	ldr	r2, [pc, #72]	@ (8004800 <drv_uartTransmitBlocking+0x90>)
 80047b8:	1898      	adds	r0, r3, r2
 80047ba:	89ba      	ldrh	r2, [r7, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	f7fd fea0 	bl	8002504 <HAL_UART_Transmit>
 80047c4:	4603      	mov	r3, r0
    if (HAL_UART_Abort   (&huarts[instance])                         == HAL_OK &&
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <drv_uartTransmitBlocking+0x60>
    {
        uartTransmitResult = GOS_SUCCESS;
 80047ca:	2355      	movs	r3, #85	@ 0x55
 80047cc:	75fb      	strb	r3, [r7, #23]
 80047ce:	e005      	b.n	80047dc <drv_uartTransmitBlocking+0x6c>
    }
    else
    {
        // Error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_BLOCKING);
 80047d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004804 <drv_uartTransmitBlocking+0x94>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f043 0310 	orr.w	r3, r3, #16
 80047d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004804 <drv_uartTransmitBlocking+0x94>)
 80047da:	6013      	str	r3, [r2, #0]
    }
    GOS_ENABLE_SCHED
 80047dc:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <drv_uartTransmitBlocking+0x8c>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <drv_uartTransmitBlocking+0x80>
 80047e4:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <drv_uartTransmitBlocking+0x8c>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	4b03      	ldr	r3, [pc, #12]	@ (80047fc <drv_uartTransmitBlocking+0x8c>)
 80047ee:	701a      	strb	r2, [r3, #0]

    return uartTransmitResult;
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20001e99 	.word	0x20001e99
 8004800:	20001d44 	.word	0x20001d44
 8004804:	20001d40 	.word	0x20001d40

08004808 <drv_uartTransmitIT>:
GOS_INLINE gos_result_t drv_uartTransmitIT (
        drv_uartPeriphInstance_t instance, u8_t* message,
        u16_t                    size,     u32_t mutexTmo,
        u32_t                    triggerTmo
        )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	4603      	mov	r3, r0
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	4613      	mov	r3, r2
 8004818:	81bb      	strh	r3, [r7, #12]
    /*
     * Local variables.
     */
    gos_result_t uartTransmitResult = GOS_ERROR;
 800481a:	23ae      	movs	r3, #174	@ 0xae
 800481c:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (gos_mutexLock(&uartTxMutexes[instance], mutexTmo) == GOS_SUCCESS)
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4a2d      	ldr	r2, [pc, #180]	@ (80048d8 <drv_uartTransmitIT+0xd0>)
 8004824:	4413      	add	r3, r2
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4618      	mov	r0, r3
 800482a:	f004 fc5d 	bl	80090e8 <gos_mutexLock>
 800482e:	4603      	mov	r3, r0
 8004830:	2b55      	cmp	r3, #85	@ 0x55
 8004832:	d13e      	bne.n	80048b2 <drv_uartTransmitIT+0xaa>
    {

        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4a27      	ldr	r2, [pc, #156]	@ (80048dc <drv_uartTransmitIT+0xd4>)
 8004840:	4413      	add	r3, r2
 8004842:	89ba      	ldrh	r2, [r7, #12]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fd fee7 	bl	800261a <HAL_UART_Transmit_IT>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11e      	bne.n	8004890 <drv_uartTransmitIT+0x88>
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	4613      	mov	r3, r2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4a20      	ldr	r2, [pc, #128]	@ (80048e0 <drv_uartTransmitIT+0xd8>)
 800485e:	4413      	add	r3, r2
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	2101      	movs	r1, #1
 8004864:	4618      	mov	r0, r3
 8004866:	f007 f90f 	bl	800ba88 <gos_triggerWait>
 800486a:	4603      	mov	r3, r0
        if (HAL_UART_Transmit_IT(&huarts[instance], message, size)         == HAL_OK      &&
 800486c:	2b55      	cmp	r3, #85	@ 0x55
 800486e:	d10f      	bne.n	8004890 <drv_uartTransmitIT+0x88>
            gos_triggerReset(&uartTxReadyTriggers[instance])               == GOS_SUCCESS)
 8004870:	7bfa      	ldrb	r2, [r7, #15]
 8004872:	4613      	mov	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4a19      	ldr	r2, [pc, #100]	@ (80048e0 <drv_uartTransmitIT+0xd8>)
 800487c:	4413      	add	r3, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f007 f8aa 	bl	800b9d8 <gos_triggerReset>
 8004884:	4603      	mov	r3, r0
            gos_triggerWait(&uartTxReadyTriggers[instance], 1, triggerTmo) == GOS_SUCCESS &&
 8004886:	2b55      	cmp	r3, #85	@ 0x55
 8004888:	d102      	bne.n	8004890 <drv_uartTransmitIT+0x88>
        {
            /*
             * At this point the caller task is unblocked,
             * transmission ready, we can return.
             */
            uartTransmitResult = GOS_SUCCESS;
 800488a:	2355      	movs	r3, #85	@ 0x55
 800488c:	75fb      	strb	r3, [r7, #23]
 800488e:	e016      	b.n	80048be <drv_uartTransmitIT+0xb6>
        }
        else
        {
            // Transmit or trigger error.
            (void_t) HAL_UART_Abort_IT(&huarts[instance]);
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4a10      	ldr	r2, [pc, #64]	@ (80048dc <drv_uartTransmitIT+0xd4>)
 800489c:	4413      	add	r3, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fd ffdc 	bl	800285c <HAL_UART_Abort_IT>
            DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_TRIG_HAL);
 80048a4:	4b0f      	ldr	r3, [pc, #60]	@ (80048e4 <drv_uartTransmitIT+0xdc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80048ac:	4a0d      	ldr	r2, [pc, #52]	@ (80048e4 <drv_uartTransmitIT+0xdc>)
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	e005      	b.n	80048be <drv_uartTransmitIT+0xb6>
        }
    }
    else
    {
        // Mutex error.
        DRV_ERROR_SET(uartErrorFlags, DRV_ERROR_UART_TX_IT_MUTEX);
 80048b2:	4b0c      	ldr	r3, [pc, #48]	@ (80048e4 <drv_uartTransmitIT+0xdc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048ba:	4a0a      	ldr	r2, [pc, #40]	@ (80048e4 <drv_uartTransmitIT+0xdc>)
 80048bc:	6013      	str	r3, [r2, #0]
    }

    (void_t) gos_mutexUnlock(&uartTxMutexes[instance]);
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4a05      	ldr	r2, [pc, #20]	@ (80048d8 <drv_uartTransmitIT+0xd0>)
 80048c4:	4413      	add	r3, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f004 fd14 	bl	80092f4 <gos_mutexUnlock>

    return uartTransmitResult;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20001e1c 	.word	0x20001e1c
 80048dc:	20001d44 	.word	0x20001d44
 80048e0:	20001e4c 	.word	0x20001e4c
 80048e4:	20001d40 	.word	0x20001d40

080048e8 <USART1_IRQHandler>:

/*
 * Function: USART1_IRQHandler
 */
void_t USART1_IRQHandler (void_t)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 80048ec:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <USART1_IRQHandler+0x60>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <USART1_IRQHandler+0x18>
 80048f4:	4b15      	ldr	r3, [pc, #84]	@ (800494c <USART1_IRQHandler+0x64>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	3301      	adds	r3, #1
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	4b13      	ldr	r3, [pc, #76]	@ (800494c <USART1_IRQHandler+0x64>)
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <USART1_IRQHandler+0x60>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	b2da      	uxtb	r2, r3
 8004908:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <USART1_IRQHandler+0x60>)
 800490a:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_1]);
 800490c:	4810      	ldr	r0, [pc, #64]	@ (8004950 <USART1_IRQHandler+0x68>)
 800490e:	f7fe f8b9 	bl	8002a84 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 8004912:	4b0d      	ldr	r3, [pc, #52]	@ (8004948 <USART1_IRQHandler+0x60>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <USART1_IRQHandler+0x3e>
 800491a:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <USART1_IRQHandler+0x60>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	3b01      	subs	r3, #1
 8004920:	b2da      	uxtb	r2, r3
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <USART1_IRQHandler+0x60>)
 8004924:	701a      	strb	r2, [r3, #0]
 8004926:	4b08      	ldr	r3, [pc, #32]	@ (8004948 <USART1_IRQHandler+0x60>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <USART1_IRQHandler+0x5a>
 800492e:	4b07      	ldr	r3, [pc, #28]	@ (800494c <USART1_IRQHandler+0x64>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <USART1_IRQHandler+0x5a>
 8004936:	4b05      	ldr	r3, [pc, #20]	@ (800494c <USART1_IRQHandler+0x64>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	3b01      	subs	r3, #1
 800493c:	b2da      	uxtb	r2, r3
 800493e:	4b03      	ldr	r3, [pc, #12]	@ (800494c <USART1_IRQHandler+0x64>)
 8004940:	701a      	strb	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20001e9a 	.word	0x20001e9a
 800494c:	20001e99 	.word	0x20001e99
 8004950:	20001d44 	.word	0x20001d44

08004954 <USART2_IRQHandler>:

/*
 * Function: USART2_IRQHandler
 */
void_t USART2_IRQHandler (void_t)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 8004958:	4b16      	ldr	r3, [pc, #88]	@ (80049b4 <USART2_IRQHandler+0x60>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <USART2_IRQHandler+0x18>
 8004960:	4b15      	ldr	r3, [pc, #84]	@ (80049b8 <USART2_IRQHandler+0x64>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	3301      	adds	r3, #1
 8004966:	b2da      	uxtb	r2, r3
 8004968:	4b13      	ldr	r3, [pc, #76]	@ (80049b8 <USART2_IRQHandler+0x64>)
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <USART2_IRQHandler+0x60>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	b2da      	uxtb	r2, r3
 8004974:	4b0f      	ldr	r3, [pc, #60]	@ (80049b4 <USART2_IRQHandler+0x60>)
 8004976:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_2]);
 8004978:	4810      	ldr	r0, [pc, #64]	@ (80049bc <USART2_IRQHandler+0x68>)
 800497a:	f7fe f883 	bl	8002a84 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 800497e:	4b0d      	ldr	r3, [pc, #52]	@ (80049b4 <USART2_IRQHandler+0x60>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <USART2_IRQHandler+0x3e>
 8004986:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <USART2_IRQHandler+0x60>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	3b01      	subs	r3, #1
 800498c:	b2da      	uxtb	r2, r3
 800498e:	4b09      	ldr	r3, [pc, #36]	@ (80049b4 <USART2_IRQHandler+0x60>)
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	4b08      	ldr	r3, [pc, #32]	@ (80049b4 <USART2_IRQHandler+0x60>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <USART2_IRQHandler+0x5a>
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <USART2_IRQHandler+0x64>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <USART2_IRQHandler+0x5a>
 80049a2:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <USART2_IRQHandler+0x64>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	4b03      	ldr	r3, [pc, #12]	@ (80049b8 <USART2_IRQHandler+0x64>)
 80049ac:	701a      	strb	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20001e9a 	.word	0x20001e9a
 80049b8:	20001e99 	.word	0x20001e99
 80049bc:	20001d88 	.word	0x20001d88

080049c0 <USART6_IRQHandler>:

/*
 * Function: USART6_IRQHandler
 */
void_t USART6_IRQHandler (void_t)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
    GOS_ISR_ENTER
 80049c4:	4b16      	ldr	r3, [pc, #88]	@ (8004a20 <USART6_IRQHandler+0x60>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d105      	bne.n	80049d8 <USART6_IRQHandler+0x18>
 80049cc:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <USART6_IRQHandler+0x64>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	3301      	adds	r3, #1
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	4b13      	ldr	r3, [pc, #76]	@ (8004a24 <USART6_IRQHandler+0x64>)
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	4b11      	ldr	r3, [pc, #68]	@ (8004a20 <USART6_IRQHandler+0x60>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	3301      	adds	r3, #1
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a20 <USART6_IRQHandler+0x60>)
 80049e2:	701a      	strb	r2, [r3, #0]

    HAL_UART_IRQHandler(&huarts[DRV_UART_INSTANCE_6]);
 80049e4:	4810      	ldr	r0, [pc, #64]	@ (8004a28 <USART6_IRQHandler+0x68>)
 80049e6:	f7fe f84d 	bl	8002a84 <HAL_UART_IRQHandler>

    GOS_ISR_EXIT
 80049ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <USART6_IRQHandler+0x60>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <USART6_IRQHandler+0x3e>
 80049f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a20 <USART6_IRQHandler+0x60>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	4b09      	ldr	r3, [pc, #36]	@ (8004a20 <USART6_IRQHandler+0x60>)
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	4b08      	ldr	r3, [pc, #32]	@ (8004a20 <USART6_IRQHandler+0x60>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <USART6_IRQHandler+0x5a>
 8004a06:	4b07      	ldr	r3, [pc, #28]	@ (8004a24 <USART6_IRQHandler+0x64>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <USART6_IRQHandler+0x5a>
 8004a0e:	4b05      	ldr	r3, [pc, #20]	@ (8004a24 <USART6_IRQHandler+0x64>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4b03      	ldr	r3, [pc, #12]	@ (8004a24 <USART6_IRQHandler+0x64>)
 8004a18:	701a      	strb	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20001e9a 	.word	0x20001e9a
 8004a24:	20001e99 	.word	0x20001e99
 8004a28:	20001dcc 	.word	0x20001dcc

08004a2c <HAL_UART_TxCpltCallback>:

/*
 * Function: HAL_UART_TxCpltCallback
 */
void_t HAL_UART_TxCpltCallback (UART_HandleTypeDef *pHuart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	73fb      	strb	r3, [r7, #15]
 8004a3c:	e015      	b.n	8004a6a <HAL_UART_TxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	4a0e      	ldr	r2, [pc, #56]	@ (8004a7c <HAL_UART_TxCpltCallback+0x50>)
 8004a42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d10a      	bne.n	8004a64 <HAL_UART_TxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartTxReadyTriggers[instance]);
 8004a4e:	7bfa      	ldrb	r2, [r7, #15]
 8004a50:	4613      	mov	r3, r2
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4a09      	ldr	r2, [pc, #36]	@ (8004a80 <HAL_UART_TxCpltCallback+0x54>)
 8004a5a:	4413      	add	r3, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f007 f8c3 	bl	800bbe8 <gos_triggerIncrement>
            break;
 8004a62:	e006      	b.n	8004a72 <HAL_UART_TxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	3301      	adds	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d9e6      	bls.n	8004a3e <HAL_UART_TxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000128 	.word	0x20000128
 8004a80:	20001e4c 	.word	0x20001e4c

08004a84 <HAL_UART_RxCpltCallback>:

/*
 * Function: HAL_UART_RxCpltCallback
 */
void_t HAL_UART_RxCpltCallback (UART_HandleTypeDef *pHuart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = DRV_UART_INSTANCE_1;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8004a90:	2300      	movs	r3, #0
 8004a92:	73fb      	strb	r3, [r7, #15]
 8004a94:	e015      	b.n	8004ac2 <HAL_UART_RxCpltCallback+0x3e>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	4a0e      	ldr	r2, [pc, #56]	@ (8004ad4 <HAL_UART_RxCpltCallback+0x50>)
 8004a9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d10a      	bne.n	8004abc <HAL_UART_RxCpltCallback+0x38>
        {
            (void_t) gos_triggerIncrement(&uartRxReadyTriggers[instance]);
 8004aa6:	7bfa      	ldrb	r2, [r7, #15]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4a09      	ldr	r2, [pc, #36]	@ (8004ad8 <HAL_UART_RxCpltCallback+0x54>)
 8004ab2:	4413      	add	r3, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f007 f897 	bl	800bbe8 <gos_triggerIncrement>
            break;
 8004aba:	e006      	b.n	8004aca <HAL_UART_RxCpltCallback+0x46>
    for (instance = DRV_UART_INSTANCE_1; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d9e6      	bls.n	8004a96 <HAL_UART_RxCpltCallback+0x12>
        else
        {
            // Continue.
        }
    }
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000128 	.word	0x20000128
 8004ad8:	20001e28 	.word	0x20001e28

08004adc <HAL_UART_MspInit>:

/*
 * Function: HAL_UART_MspInit
 */
void_t HAL_UART_MspInit (UART_HandleTypeDef* pHuart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    drv_uartPeriphInstance_t instance = 0u;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	73fb      	strb	r3, [r7, #15]
    u8_t                     idx      = 0u;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8004aec:	2300      	movs	r3, #0
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	e068      	b.n	8004bc4 <HAL_UART_MspInit+0xe8>
    {
        if (uartInstanceLut[instance] == pHuart->Instance)
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	4a38      	ldr	r2, [pc, #224]	@ (8004bd8 <HAL_UART_MspInit+0xfc>)
 8004af6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d15d      	bne.n	8004bbe <HAL_UART_MspInit+0xe2>
        {
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	73bb      	strb	r3, [r7, #14]
 8004b06:	e051      	b.n	8004bac <HAL_UART_MspInit+0xd0>
            {
                if (uartConfig[idx].periphInstance == instance)
 8004b08:	7bba      	ldrb	r2, [r7, #14]
 8004b0a:	4934      	ldr	r1, [pc, #208]	@ (8004bdc <HAL_UART_MspInit+0x100>)
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	440b      	add	r3, r1
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	7bfa      	ldrb	r2, [r7, #15]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d143      	bne.n	8004ba6 <HAL_UART_MspInit+0xca>
                {
                    if (uartConfig[idx].dmaConfigRx != NULL)
 8004b1e:	7bba      	ldrb	r2, [r7, #14]
 8004b20:	492e      	ldr	r1, [pc, #184]	@ (8004bdc <HAL_UART_MspInit+0x100>)
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3320      	adds	r3, #32
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d016      	beq.n	8004b62 <HAL_UART_MspInit+0x86>
                    {
                        __HAL_LINKDMA(pHuart, hdmarx, uartConfig[idx].dmaConfigRx->hdma);
 8004b34:	7bba      	ldrb	r2, [r7, #14]
 8004b36:	4929      	ldr	r1, [pc, #164]	@ (8004bdc <HAL_UART_MspInit+0x100>)
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	440b      	add	r3, r1
 8004b42:	3320      	adds	r3, #32
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	1d1a      	adds	r2, r3, #4
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b4c:	7bba      	ldrb	r2, [r7, #14]
 8004b4e:	4923      	ldr	r1, [pc, #140]	@ (8004bdc <HAL_UART_MspInit+0x100>)
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	440b      	add	r3, r1
 8004b5a:	3320      	adds	r3, #32
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	63da      	str	r2, [r3, #60]	@ 0x3c
                    else
                    {
                        // There is no DMA assigned.
                    }

                    if (uartConfig[idx].dmaConfigTx != NULL)
 8004b62:	7bba      	ldrb	r2, [r7, #14]
 8004b64:	491d      	ldr	r1, [pc, #116]	@ (8004bdc <HAL_UART_MspInit+0x100>)
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	440b      	add	r3, r1
 8004b70:	3324      	adds	r3, #36	@ 0x24
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d016      	beq.n	8004ba6 <HAL_UART_MspInit+0xca>
                    {
                        __HAL_LINKDMA(pHuart, hdmatx, uartConfig[idx].dmaConfigTx->hdma);
 8004b78:	7bba      	ldrb	r2, [r7, #14]
 8004b7a:	4918      	ldr	r1, [pc, #96]	@ (8004bdc <HAL_UART_MspInit+0x100>)
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	440b      	add	r3, r1
 8004b86:	3324      	adds	r3, #36	@ 0x24
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	1d1a      	adds	r2, r3, #4
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b90:	7bba      	ldrb	r2, [r7, #14]
 8004b92:	4912      	ldr	r1, [pc, #72]	@ (8004bdc <HAL_UART_MspInit+0x100>)
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3324      	adds	r3, #36	@ 0x24
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	63da      	str	r2, [r3, #60]	@ 0x3c
            for (idx = 0u; idx < uartConfigSize / sizeof(drv_uartDescriptor_t); idx++)
 8004ba6:	7bbb      	ldrb	r3, [r7, #14]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	73bb      	strb	r3, [r7, #14]
 8004bac:	7bba      	ldrb	r2, [r7, #14]
 8004bae:	4b0c      	ldr	r3, [pc, #48]	@ (8004be0 <HAL_UART_MspInit+0x104>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	490c      	ldr	r1, [pc, #48]	@ (8004be4 <HAL_UART_MspInit+0x108>)
 8004bb4:	fba1 1303 	umull	r1, r3, r1, r3
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d3a4      	bcc.n	8004b08 <HAL_UART_MspInit+0x2c>
    for (instance = 0u; instance < DRV_UART_NUM_OF_INSTANCES; instance++)
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	73fb      	strb	r3, [r7, #15]
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d993      	bls.n	8004af2 <HAL_UART_MspInit+0x16>
        else
        {
            // Continue.
        }
    }
}
 8004bca:	bf00      	nop
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	20000128 	.word	0x20000128
 8004bdc:	0800ddb0 	.word	0x0800ddb0
 8004be0:	200000fc 	.word	0x200000fc
 8004be4:	cccccccd 	.word	0xcccccccd

08004be8 <svl_dsmInit>:

/*
 * Function: svl_dsmInit
 */
gos_result_t svl_dsmInit (void_t)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t dsmInitResult = GOS_SUCCESS;
 8004bee:	2355      	movs	r3, #85	@ 0x55
 8004bf0:	71fb      	strb	r3, [r7, #7]
	u8_t         initIdx       = 0u;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	71bb      	strb	r3, [r7, #6]
	u8_t         initBlockIdx  = 0u;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	717b      	strb	r3, [r7, #5]

	/*
	 * Function code.
	 */
	if (initPhaseConfig != NULL && initPhaseConfigSize > 0u)
 8004bfa:	4b39      	ldr	r3, [pc, #228]	@ (8004ce0 <svl_dsmInit+0xf8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d064      	beq.n	8004ccc <svl_dsmInit+0xe4>
	{
		// Register DSM task.
		dsmInitResult &= gos_taskRegister(&svlDsmDaemonDesc, NULL);
 8004c02:	2100      	movs	r1, #0
 8004c04:	4837      	ldr	r0, [pc, #220]	@ (8004ce4 <svl_dsmInit+0xfc>)
 8004c06:	f001 fe43 	bl	8006890 <gos_taskRegister>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	4013      	ands	r3, r2
 8004c12:	71fb      	strb	r3, [r7, #7]

		// Loop through all init phases.
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 8004c14:	2300      	movs	r3, #0
 8004c16:	71bb      	strb	r3, [r7, #6]
 8004c18:	e04f      	b.n	8004cba <svl_dsmInit+0xd2>
		{
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 8004c1a:	4833      	ldr	r0, [pc, #204]	@ (8004ce8 <svl_dsmInit+0x100>)
 8004c1c:	f000 fc82 	bl	8005524 <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe(initPhaseConfig[initIdx].phaseName);
 8004c20:	79ba      	ldrb	r2, [r7, #6]
 8004c22:	4932      	ldr	r1, [pc, #200]	@ (8004cec <svl_dsmInit+0x104>)
 8004c24:	4613      	mov	r3, r2
 8004c26:	019b      	lsls	r3, r3, #6
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fc77 	bl	8005524 <gos_traceDriverTransmitString_Unsafe>
			(void_t) gos_traceDriverTransmitString_Unsafe("\r\n");
 8004c36:	482c      	ldr	r0, [pc, #176]	@ (8004ce8 <svl_dsmInit+0x100>)
 8004c38:	f000 fc74 	bl	8005524 <gos_traceDriverTransmitString_Unsafe>

			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	717b      	strb	r3, [r7, #5]
 8004c40:	e033      	b.n	8004caa <svl_dsmInit+0xc2>
			{
				if (initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer != NULL)
 8004c42:	79ba      	ldrb	r2, [r7, #6]
 8004c44:	797b      	ldrb	r3, [r7, #5]
 8004c46:	4829      	ldr	r0, [pc, #164]	@ (8004cec <svl_dsmInit+0x104>)
 8004c48:	00d9      	lsls	r1, r3, #3
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	019b      	lsls	r3, r3, #6
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	4403      	add	r3, r0
 8004c56:	3308      	adds	r3, #8
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d029      	beq.n	8004cb2 <svl_dsmInit+0xca>
				{
					dsmInitResult &= gos_errorTraceInit(
 8004c5e:	79ba      	ldrb	r2, [r7, #6]
 8004c60:	797b      	ldrb	r3, [r7, #5]
							initPhaseConfig[initIdx].initBlock[initBlockIdx].description,
 8004c62:	4822      	ldr	r0, [pc, #136]	@ (8004cec <svl_dsmInit+0x104>)
 8004c64:	00d9      	lsls	r1, r3, #3
 8004c66:	4613      	mov	r3, r2
 8004c68:	019b      	lsls	r3, r3, #6
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	4403      	add	r3, r0
 8004c72:	3304      	adds	r3, #4
 8004c74:	681c      	ldr	r4, [r3, #0]
							initPhaseConfig[initIdx].initBlock[initBlockIdx].pInitializer());
 8004c76:	79ba      	ldrb	r2, [r7, #6]
 8004c78:	797b      	ldrb	r3, [r7, #5]
 8004c7a:	481c      	ldr	r0, [pc, #112]	@ (8004cec <svl_dsmInit+0x104>)
 8004c7c:	00d9      	lsls	r1, r3, #3
 8004c7e:	4613      	mov	r3, r2
 8004c80:	019b      	lsls	r3, r3, #6
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	4403      	add	r3, r0
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	681b      	ldr	r3, [r3, #0]
					dsmInitResult &= gos_errorTraceInit(
 8004c8e:	4798      	blx	r3
 8004c90:	4603      	mov	r3, r0
 8004c92:	4619      	mov	r1, r3
 8004c94:	4620      	mov	r0, r4
 8004c96:	f003 fd59 	bl	800874c <gos_errorTraceInit>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	71fb      	strb	r3, [r7, #7]
			for (initBlockIdx = 0u; initBlockIdx < SVL_DSM_MAX_INITIALIZERS; initBlockIdx++)
 8004ca4:	797b      	ldrb	r3, [r7, #5]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	717b      	strb	r3, [r7, #5]
 8004caa:	797b      	ldrb	r3, [r7, #5]
 8004cac:	2b1f      	cmp	r3, #31
 8004cae:	d9c8      	bls.n	8004c42 <svl_dsmInit+0x5a>
 8004cb0:	e000      	b.n	8004cb4 <svl_dsmInit+0xcc>
				}
				else
				{
					// End of initializers.
					break;
 8004cb2:	bf00      	nop
		for (initIdx = 0u; initIdx < initPhaseConfigSize / sizeof(svl_dsmInitPhaseDesc_t); initIdx++)
 8004cb4:	79bb      	ldrb	r3, [r7, #6]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	71bb      	strb	r3, [r7, #6]
 8004cba:	79ba      	ldrb	r2, [r7, #6]
 8004cbc:	4b08      	ldr	r3, [pc, #32]	@ (8004ce0 <svl_dsmInit+0xf8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	490b      	ldr	r1, [pc, #44]	@ (8004cf0 <svl_dsmInit+0x108>)
 8004cc2:	fba1 1303 	umull	r1, r3, r1, r3
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d3a6      	bcc.n	8004c1a <svl_dsmInit+0x32>
	else
	{
		// Configuration is empty.
	}

	if (dsmInitResult != GOS_SUCCESS)
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	2b55      	cmp	r3, #85	@ 0x55
 8004cd0:	d001      	beq.n	8004cd6 <svl_dsmInit+0xee>
	{
		dsmInitResult = GOS_ERROR;
 8004cd2:	23ae      	movs	r3, #174	@ 0xae
 8004cd4:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Success.
	}

	return dsmInitResult;
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd90      	pop	{r4, r7, pc}
 8004ce0:	2000008c 	.word	0x2000008c
 8004ce4:	20000134 	.word	0x20000134
 8004ce8:	0800c994 	.word	0x0800c994
 8004cec:	0800dc48 	.word	0x0800dc48
 8004cf0:	fc0fc0fd 	.word	0xfc0fc0fd

08004cf4 <svl_dsmPrintOSInfo>:

/*
 * Function: svl_dsmPrintOSInfo
 */
gos_result_t svl_dsmPrintOSInfo (void_t)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	gos_result_t printResult = GOS_SUCCESS;
 8004cfa:	2355      	movs	r3, #85	@ 0x55
 8004cfc:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"OS Info"TRACE_FORMAT_RESET"\r\n");
 8004cfe:	490f      	ldr	r1, [pc, #60]	@ (8004d3c <svl_dsmPrintOSInfo+0x48>)
 8004d00:	2049      	movs	r0, #73	@ 0x49
 8004d02:	f006 fcc5 	bl	800b690 <gos_traceTraceFormatted>
 8004d06:	4603      	mov	r3, r0
 8004d08:	461a      	mov	r2, r3
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	71fb      	strb	r3, [r7, #7]
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version: %02u.%02u\r\n", GOS_VERSION_MAJOR, GOS_VERSION_MINOR);
 8004d10:	2300      	movs	r3, #0
 8004d12:	2201      	movs	r2, #1
 8004d14:	490a      	ldr	r1, [pc, #40]	@ (8004d40 <svl_dsmPrintOSInfo+0x4c>)
 8004d16:	2049      	movs	r0, #73	@ 0x49
 8004d18:	f006 fcba 	bl	800b690 <gos_traceTraceFormatted>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	461a      	mov	r2, r3
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	4013      	ands	r3, r2
 8004d24:	71fb      	strb	r3, [r7, #7]

	if (printResult != GOS_SUCCESS)
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	2b55      	cmp	r3, #85	@ 0x55
 8004d2a:	d001      	beq.n	8004d30 <svl_dsmPrintOSInfo+0x3c>
	{
		printResult = GOS_ERROR;
 8004d2c:	23ae      	movs	r3, #174	@ 0xae
 8004d2e:	71fb      	strb	r3, [r7, #7]
	else
	{
		// Success.
	}

	return printResult;
 8004d30:	79fb      	ldrb	r3, [r7, #7]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	0800c998 	.word	0x0800c998
 8004d40:	0800c9b0 	.word	0x0800c9b0

08004d44 <svl_dsmPrintLibInfo>:

/*
 * Function: svl_dsmPrintLibInfo
 */
gos_result_t svl_dsmPrintLibInfo (void_t)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b0ac      	sub	sp, #176	@ 0xb0
 8004d48:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t       printResult = GOS_SUCCESS;
 8004d4a:	2355      	movs	r3, #85	@ 0x55
 8004d4c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	svl_pdhSwVerInfo_t libVer      = {0};
 8004d50:	1d3b      	adds	r3, r7, #4
 8004d52:	22a0      	movs	r2, #160	@ 0xa0
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f007 f95e 	bl	800c018 <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_pdhGetLibVersion(&libVer);
 8004d5c:	1d3b      	adds	r3, r7, #4
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fab8 	bl	80052d4 <svl_pdhGetLibVersion>
 8004d64:	4603      	mov	r3, r0
 8004d66:	461a      	mov	r2, r3
 8004d68:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Library Info"TRACE_FORMAT_RESET"\r\n");
 8004d72:	4934      	ldr	r1, [pc, #208]	@ (8004e44 <svl_dsmPrintLibInfo+0x100>)
 8004d74:	2049      	movs	r0, #73	@ 0x49
 8004d76:	f006 fc8b 	bl	800b690 <gos_traceTraceFormatted>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004d82:	4013      	ands	r3, r2
 8004d84:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", libVer.name);
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	3310      	adds	r3, #16
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	492e      	ldr	r1, [pc, #184]	@ (8004e48 <svl_dsmPrintLibInfo+0x104>)
 8004d90:	2049      	movs	r0, #73	@ 0x49
 8004d92:	f006 fc7d 	bl	800b690 <gos_traceTraceFormatted>
 8004d96:	4603      	mov	r3, r0
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004d9e:	4013      	ands	r3, r2
 8004da0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", libVer.description);
 8004da4:	1d3b      	adds	r3, r7, #4
 8004da6:	3340      	adds	r3, #64	@ 0x40
 8004da8:	461a      	mov	r2, r3
 8004daa:	4928      	ldr	r1, [pc, #160]	@ (8004e4c <svl_dsmPrintLibInfo+0x108>)
 8004dac:	2049      	movs	r0, #73	@ 0x49
 8004dae:	f006 fc6f 	bl	800b690 <gos_traceTraceFormatted>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004dba:	4013      	ands	r3, r2
 8004dbc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", libVer.major, libVer.minor, libVer.build);
 8004dc0:	88bb      	ldrh	r3, [r7, #4]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	893b      	ldrh	r3, [r7, #8]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4920      	ldr	r1, [pc, #128]	@ (8004e50 <svl_dsmPrintLibInfo+0x10c>)
 8004dd0:	2049      	movs	r0, #73	@ 0x49
 8004dd2:	f006 fc5d 	bl	800b690 <gos_traceTraceFormatted>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004dde:	4013      	ands	r3, r2
 8004de0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", libVer.date.years, libVer.date.months, libVer.date.days);
 8004de4:	8a7b      	ldrh	r3, [r7, #18]
 8004de6:	461a      	mov	r2, r3
 8004de8:	7c7b      	ldrb	r3, [r7, #17]
 8004dea:	4619      	mov	r1, r3
 8004dec:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	460b      	mov	r3, r1
 8004df6:	4917      	ldr	r1, [pc, #92]	@ (8004e54 <svl_dsmPrintLibInfo+0x110>)
 8004df8:	2049      	movs	r0, #73	@ 0x49
 8004dfa:	f006 fc49 	bl	800b690 <gos_traceTraceFormatted>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461a      	mov	r2, r3
 8004e02:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004e06:	4013      	ands	r3, r2
 8004e08:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", libVer.author);
 8004e0c:	1d3b      	adds	r3, r7, #4
 8004e0e:	3370      	adds	r3, #112	@ 0x70
 8004e10:	461a      	mov	r2, r3
 8004e12:	4911      	ldr	r1, [pc, #68]	@ (8004e58 <svl_dsmPrintLibInfo+0x114>)
 8004e14:	2049      	movs	r0, #73	@ 0x49
 8004e16:	f006 fc3b 	bl	800b690 <gos_traceTraceFormatted>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004e22:	4013      	ands	r3, r2
 8004e24:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	if (printResult != GOS_SUCCESS)
 8004e28:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8004e2c:	2b55      	cmp	r3, #85	@ 0x55
 8004e2e:	d002      	beq.n	8004e36 <svl_dsmPrintLibInfo+0xf2>
	{
		printResult = GOS_ERROR;
 8004e30:	23ae      	movs	r3, #174	@ 0xae
 8004e32:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	else
	{
		// Success.
	}

	return printResult;
 8004e36:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	37a8      	adds	r7, #168	@ 0xa8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	0800c9c8 	.word	0x0800c9c8
 8004e48:	0800c9e4 	.word	0x0800c9e4
 8004e4c:	0800c9f8 	.word	0x0800c9f8
 8004e50:	0800ca0c 	.word	0x0800ca0c
 8004e54:	0800ca2c 	.word	0x0800ca2c
 8004e58:	0800ca4c 	.word	0x0800ca4c

08004e5c <svl_dsmPrintHwInfo>:

/*
 * Function: svl_dsmPrintHwInfo
 */
gos_result_t svl_dsmPrintHwInfo (void_t)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b0c2      	sub	sp, #264	@ 0x108
 8004e60:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 8004e62:	2355      	movs	r3, #85	@ 0x55
 8004e64:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	svl_pdhHwInfo_t hwInfo      = {0};
 8004e68:	1d3b      	adds	r3, r7, #4
 8004e6a:	22fa      	movs	r2, #250	@ 0xfa
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f007 f8d2 	bl	800c018 <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_pdhGetHwInfo(&hwInfo);
 8004e74:	1d3b      	adds	r3, r7, #4
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 faec 	bl	8005454 <svl_pdhGetHwInfo>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8004e84:	4013      	ands	r3, r2
 8004e86:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff

	printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Hardware Info"TRACE_FORMAT_RESET"\r\n");
 8004e8a:	493a      	ldr	r1, [pc, #232]	@ (8004f74 <svl_dsmPrintHwInfo+0x118>)
 8004e8c:	2049      	movs	r0, #73	@ 0x49
 8004e8e:	f006 fbff 	bl	800b690 <gos_traceTraceFormatted>
 8004e92:	4603      	mov	r3, r0
 8004e94:	461a      	mov	r2, r3
 8004e96:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Board name:    \t%s\r\n", hwInfo.boardName);
 8004ea0:	1d3b      	adds	r3, r7, #4
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4934      	ldr	r1, [pc, #208]	@ (8004f78 <svl_dsmPrintHwInfo+0x11c>)
 8004ea6:	2049      	movs	r0, #73	@ 0x49
 8004ea8:	f006 fbf2 	bl	800b690 <gos_traceTraceFormatted>
 8004eac:	4603      	mov	r3, r0
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:        \t%s\r\n", hwInfo.author);
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	3360      	adds	r3, #96	@ 0x60
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	492e      	ldr	r1, [pc, #184]	@ (8004f7c <svl_dsmPrintHwInfo+0x120>)
 8004ec2:	2049      	movs	r0, #73	@ 0x49
 8004ec4:	f006 fbe4 	bl	800b690 <gos_traceTraceFormatted>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description:   \t%s\r\n", hwInfo.description);
 8004ed6:	1d3b      	adds	r3, r7, #4
 8004ed8:	3390      	adds	r3, #144	@ 0x90
 8004eda:	461a      	mov	r2, r3
 8004edc:	4928      	ldr	r1, [pc, #160]	@ (8004f80 <svl_dsmPrintHwInfo+0x124>)
 8004ede:	2049      	movs	r0, #73	@ 0x49
 8004ee0:	f006 fbd6 	bl	800b690 <gos_traceTraceFormatted>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8004eec:	4013      	ands	r3, r2
 8004eee:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Revision:      \t%s\r\n", hwInfo.revision);
 8004ef2:	1d3b      	adds	r3, r7, #4
 8004ef4:	3330      	adds	r3, #48	@ 0x30
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4922      	ldr	r1, [pc, #136]	@ (8004f84 <svl_dsmPrintHwInfo+0x128>)
 8004efa:	2049      	movs	r0, #73	@ 0x49
 8004efc:	f006 fbc8 	bl	800b690 <gos_traceTraceFormatted>
 8004f00:	4603      	mov	r3, r0
 8004f02:	461a      	mov	r2, r3
 8004f04:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8004f08:	4013      	ands	r3, r2
 8004f0a:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Serial number: \t%s\r\n", hwInfo.serialNumber);
 8004f0e:	1d3b      	adds	r3, r7, #4
 8004f10:	33ca      	adds	r3, #202	@ 0xca
 8004f12:	461a      	mov	r2, r3
 8004f14:	491c      	ldr	r1, [pc, #112]	@ (8004f88 <svl_dsmPrintHwInfo+0x12c>)
 8004f16:	2049      	movs	r0, #73	@ 0x49
 8004f18:	f006 fbba 	bl	800b690 <gos_traceTraceFormatted>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8004f24:	4013      	ands	r3, r2
 8004f26:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
			hwInfo.date.years,
 8004f2a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
 8004f2e:	461a      	mov	r2, r3
			hwInfo.date.months,
 8004f30:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
 8004f34:	4619      	mov	r1, r3
			hwInfo.date.days
 8004f36:	f8b7 30c9 	ldrh.w	r3, [r7, #201]	@ 0xc9
 8004f3a:	b29b      	uxth	r3, r3
	printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:          \t%04hu-%02u-%02u\r\n",
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4912      	ldr	r1, [pc, #72]	@ (8004f8c <svl_dsmPrintHwInfo+0x130>)
 8004f42:	2049      	movs	r0, #73	@ 0x49
 8004f44:	f006 fba4 	bl	800b690 <gos_traceTraceFormatted>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8004f50:	4013      	ands	r3, r2
 8004f52:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
			);

	if (printResult != GOS_SUCCESS)
 8004f56:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
 8004f5a:	2b55      	cmp	r3, #85	@ 0x55
 8004f5c:	d002      	beq.n	8004f64 <svl_dsmPrintHwInfo+0x108>
	{
		printResult = GOS_ERROR;
 8004f5e:	23ae      	movs	r3, #174	@ 0xae
 8004f60:	f887 30ff 	strb.w	r3, [r7, #255]	@ 0xff
	else
	{
		// Success.
	}

	return printResult;
 8004f64:	f897 30ff 	ldrb.w	r3, [r7, #255]	@ 0xff
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	0800ca60 	.word	0x0800ca60
 8004f78:	0800ca7c 	.word	0x0800ca7c
 8004f7c:	0800ca94 	.word	0x0800ca94
 8004f80:	0800caac 	.word	0x0800caac
 8004f84:	0800cac4 	.word	0x0800cac4
 8004f88:	0800cadc 	.word	0x0800cadc
 8004f8c:	0800caf4 	.word	0x0800caf4

08004f90 <svl_dsmPrintAppInfo>:

/*
 * Function: svl_dsmPrintAppInfo
 */
gos_result_t svl_dsmPrintAppInfo (void_t)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	f5ad 7d2c 	sub.w	sp, sp, #688	@ 0x2b0
 8004f96:	af02      	add	r7, sp, #8
	/*
	 * Local variables.
	 */
	gos_result_t    printResult = GOS_SUCCESS;
 8004f98:	2355      	movs	r3, #85	@ 0x55
 8004f9a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	svl_pdhSwInfo_t swInfo      = {0};
 8004f9e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8004fa2:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f44f 7328 	mov.w	r3, #672	@ 0x2a0
 8004fac:	461a      	mov	r2, r3
 8004fae:	2100      	movs	r1, #0
 8004fb0:	f007 f832 	bl	800c018 <memset>

	/*
	 * Function code.
	 */
	printResult &= svl_pdhGetSwInfo(&swInfo);
 8004fb4:	1d3b      	adds	r3, r7, #4
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fa14 	bl	80053e4 <svl_pdhGetSwInfo>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7

	if (strcmp(swInfo.bldSwVerInfo.name, "") != 0)
 8004fca:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8004fce:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8004fd2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d078      	beq.n	80050cc <svl_dsmPrintAppInfo+0x13c>
	{
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Bootloader Info"TRACE_FORMAT_RESET"\r\n");
 8004fda:	4985      	ldr	r1, [pc, #532]	@ (80051f0 <svl_dsmPrintAppInfo+0x260>)
 8004fdc:	2049      	movs	r0, #73	@ 0x49
 8004fde:	f006 fb57 	bl	800b690 <gos_traceTraceFormatted>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8004fea:	4013      	ands	r3, r2
 8004fec:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.bldSwVerInfo.name);
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	33b0      	adds	r3, #176	@ 0xb0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	497f      	ldr	r1, [pc, #508]	@ (80051f4 <svl_dsmPrintAppInfo+0x264>)
 8004ff8:	2049      	movs	r0, #73	@ 0x49
 8004ffa:	f006 fb49 	bl	800b690 <gos_traceTraceFormatted>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461a      	mov	r2, r3
 8005002:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8005006:	4013      	ands	r3, r2
 8005008:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.bldSwVerInfo.description);
 800500c:	1d3b      	adds	r3, r7, #4
 800500e:	33e0      	adds	r3, #224	@ 0xe0
 8005010:	461a      	mov	r2, r3
 8005012:	4979      	ldr	r1, [pc, #484]	@ (80051f8 <svl_dsmPrintAppInfo+0x268>)
 8005014:	2049      	movs	r0, #73	@ 0x49
 8005016:	f006 fb3b 	bl	800b690 <gos_traceTraceFormatted>
 800501a:	4603      	mov	r3, r0
 800501c:	461a      	mov	r2, r3
 800501e:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8005022:	4013      	ands	r3, r2
 8005024:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.bldSwVerInfo.major, swInfo.bldSwVerInfo.minor, swInfo.bldSwVerInfo.build);
 8005028:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800502c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8005030:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8005034:	461a      	mov	r2, r3
 8005036:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800503a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800503e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	@ 0xa2
 8005042:	4619      	mov	r1, r3
 8005044:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8005048:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800504c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	460b      	mov	r3, r1
 8005054:	4969      	ldr	r1, [pc, #420]	@ (80051fc <svl_dsmPrintAppInfo+0x26c>)
 8005056:	2049      	movs	r0, #73	@ 0x49
 8005058:	f006 fb1a 	bl	800b690 <gos_traceTraceFormatted>
 800505c:	4603      	mov	r3, r0
 800505e:	461a      	mov	r2, r3
 8005060:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8005064:	4013      	ands	r3, r2
 8005066:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.bldSwVerInfo.date.years, swInfo.bldSwVerInfo.date.months, swInfo.bldSwVerInfo.date.days);
 800506a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800506e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8005072:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8005076:	461a      	mov	r2, r3
 8005078:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800507c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8005080:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8005084:	4619      	mov	r1, r3
 8005086:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800508a:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 800508e:	f8b3 30ab 	ldrh.w	r3, [r3, #171]	@ 0xab
 8005092:	b29b      	uxth	r3, r3
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	460b      	mov	r3, r1
 8005098:	4959      	ldr	r1, [pc, #356]	@ (8005200 <svl_dsmPrintAppInfo+0x270>)
 800509a:	2049      	movs	r0, #73	@ 0x49
 800509c:	f006 faf8 	bl	800b690 <gos_traceTraceFormatted>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80050a8:	4013      	ands	r3, r2
 80050aa:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.bldSwVerInfo.author);
 80050ae:	1d3b      	adds	r3, r7, #4
 80050b0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80050b4:	461a      	mov	r2, r3
 80050b6:	4953      	ldr	r1, [pc, #332]	@ (8005204 <svl_dsmPrintAppInfo+0x274>)
 80050b8:	2049      	movs	r0, #73	@ 0x49
 80050ba:	f006 fae9 	bl	800b690 <gos_traceTraceFormatted>
 80050be:	4603      	mov	r3, r0
 80050c0:	461a      	mov	r2, r3
 80050c2:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80050c6:	4013      	ands	r3, r2
 80050c8:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Bootloader does not exist.
	}

	if (strcmp(swInfo.appSwVerInfo.name, "") != 0)
 80050cc:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80050d0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80050d4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d07a      	beq.n	80051d2 <svl_dsmPrintAppInfo+0x242>
	{
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "\r\n"TRACE_BG_BLUE_START"Application Info"TRACE_FORMAT_RESET"\r\n");
 80050dc:	494a      	ldr	r1, [pc, #296]	@ (8005208 <svl_dsmPrintAppInfo+0x278>)
 80050de:	2049      	movs	r0, #73	@ 0x49
 80050e0:	f006 fad6 	bl	800b690 <gos_traceTraceFormatted>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80050ec:	4013      	ands	r3, r2
 80050ee:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Name:        \t%s\r\n", swInfo.appSwVerInfo.name);
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80050f8:	461a      	mov	r2, r3
 80050fa:	493e      	ldr	r1, [pc, #248]	@ (80051f4 <svl_dsmPrintAppInfo+0x264>)
 80050fc:	2049      	movs	r0, #73	@ 0x49
 80050fe:	f006 fac7 	bl	800b690 <gos_traceTraceFormatted>
 8005102:	4603      	mov	r3, r0
 8005104:	461a      	mov	r2, r3
 8005106:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800510a:	4013      	ands	r3, r2
 800510c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Description: \t%s\r\n", swInfo.appSwVerInfo.description);
 8005110:	1d3b      	adds	r3, r7, #4
 8005112:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005116:	461a      	mov	r2, r3
 8005118:	4937      	ldr	r1, [pc, #220]	@ (80051f8 <svl_dsmPrintAppInfo+0x268>)
 800511a:	2049      	movs	r0, #73	@ 0x49
 800511c:	f006 fab8 	bl	800b690 <gos_traceTraceFormatted>
 8005120:	4603      	mov	r3, r0
 8005122:	461a      	mov	r2, r3
 8005124:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8005128:	4013      	ands	r3, r2
 800512a:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Version:     \t%02u.%02u.%02u\r\n", swInfo.appSwVerInfo.major, swInfo.appSwVerInfo.minor, swInfo.appSwVerInfo.build);
 800512e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8005132:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8005136:	f8b3 31f0 	ldrh.w	r3, [r3, #496]	@ 0x1f0
 800513a:	461a      	mov	r2, r3
 800513c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8005140:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8005144:	f8b3 31f2 	ldrh.w	r3, [r3, #498]	@ 0x1f2
 8005148:	4619      	mov	r1, r3
 800514a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800514e:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8005152:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	460b      	mov	r3, r1
 800515a:	4928      	ldr	r1, [pc, #160]	@ (80051fc <svl_dsmPrintAppInfo+0x26c>)
 800515c:	2049      	movs	r0, #73	@ 0x49
 800515e:	f006 fa97 	bl	800b690 <gos_traceTraceFormatted>
 8005162:	4603      	mov	r3, r0
 8005164:	461a      	mov	r2, r3
 8005166:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800516a:	4013      	ands	r3, r2
 800516c:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Date:        \t%4u-%02u-%02u\r\n", swInfo.appSwVerInfo.date.years, swInfo.appSwVerInfo.date.months, swInfo.appSwVerInfo.date.days);
 8005170:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8005174:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8005178:	f8b3 31fe 	ldrh.w	r3, [r3, #510]	@ 0x1fe
 800517c:	461a      	mov	r2, r3
 800517e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8005182:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8005186:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 800518a:	4619      	mov	r1, r3
 800518c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8005190:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8005194:	f8b3 31fb 	ldrh.w	r3, [r3, #507]	@ 0x1fb
 8005198:	b29b      	uxth	r3, r3
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	460b      	mov	r3, r1
 800519e:	4918      	ldr	r1, [pc, #96]	@ (8005200 <svl_dsmPrintAppInfo+0x270>)
 80051a0:	2049      	movs	r0, #73	@ 0x49
 80051a2:	f006 fa75 	bl	800b690 <gos_traceTraceFormatted>
 80051a6:	4603      	mov	r3, r0
 80051a8:	461a      	mov	r2, r3
 80051aa:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80051ae:	4013      	ands	r3, r2
 80051b0:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
		printResult &= gos_traceTraceFormatted(GOS_FALSE, "Author:      \t%s\r\n", swInfo.appSwVerInfo.author);
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80051ba:	461a      	mov	r2, r3
 80051bc:	4911      	ldr	r1, [pc, #68]	@ (8005204 <svl_dsmPrintAppInfo+0x274>)
 80051be:	2049      	movs	r0, #73	@ 0x49
 80051c0:	f006 fa66 	bl	800b690 <gos_traceTraceFormatted>
 80051c4:	4603      	mov	r3, r0
 80051c6:	461a      	mov	r2, r3
 80051c8:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80051cc:	4013      	ands	r3, r2
 80051ce:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Application does not exist.
	}

	if (printResult != GOS_SUCCESS)
 80051d2:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80051d6:	2b55      	cmp	r3, #85	@ 0x55
 80051d8:	d002      	beq.n	80051e0 <svl_dsmPrintAppInfo+0x250>
	{
		printResult = GOS_ERROR;
 80051da:	23ae      	movs	r3, #174	@ 0xae
 80051dc:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	else
	{
		// Success.
	}

	return printResult;
 80051e0:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	0800cb18 	.word	0x0800cb18
 80051f4:	0800c9e4 	.word	0x0800c9e4
 80051f8:	0800c9f8 	.word	0x0800c9f8
 80051fc:	0800ca0c 	.word	0x0800ca0c
 8005200:	0800ca2c 	.word	0x0800ca2c
 8005204:	0800ca4c 	.word	0x0800ca4c
 8005208:	0800cb38 	.word	0x0800cb38

0800520c <svl_dsmTask>:
 * TODO
 * @param
 * @return
 */
GOS_STATIC void_t svl_dsmTask (void_t)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
	/*
	 * Local variables.
	 */
	u8_t reactionIdx = 0u;
 8005212:	2300      	movs	r3, #0
 8005214:	71fb      	strb	r3, [r7, #7]

	/*
	 * Function code.
	 */
	// Print out OS info.
	(void_t) svl_dsmPrintOSInfo();
 8005216:	f7ff fd6d 	bl	8004cf4 <svl_dsmPrintOSInfo>

	// Print out library info.
	(void_t) svl_dsmPrintLibInfo();
 800521a:	f7ff fd93 	bl	8004d44 <svl_dsmPrintLibInfo>

	// Print out Hardware Info.
	(void_t) svl_dsmPrintHwInfo();
 800521e:	f7ff fe1d 	bl	8004e5c <svl_dsmPrintHwInfo>

	// Print out Application Info.
	(void_t) svl_dsmPrintAppInfo();
 8005222:	f7ff feb5 	bl	8004f90 <svl_dsmPrintAppInfo>

	// Change priority.
	(void_t) gos_taskSetPriority(svlDsmDaemonDesc.taskId, SVL_DSM_DAEMON_PRIO);
 8005226:	4b26      	ldr	r3, [pc, #152]	@ (80052c0 <svl_dsmTask+0xb4>)
 8005228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522a:	21c8      	movs	r1, #200	@ 0xc8
 800522c:	4618      	mov	r0, r3
 800522e:	f002 fb09 	bl	8007844 <gos_taskSetPriority>
 8005232:	2301      	movs	r3, #1
 8005234:	71bb      	strb	r3, [r7, #6]
	devicePrevState = deviceState;
 8005236:	4b23      	ldr	r3, [pc, #140]	@ (80052c4 <svl_dsmTask+0xb8>)
 8005238:	781a      	ldrb	r2, [r3, #0]
 800523a:	4b23      	ldr	r3, [pc, #140]	@ (80052c8 <svl_dsmTask+0xbc>)
 800523c:	701a      	strb	r2, [r3, #0]
	deviceState = requiredState;
 800523e:	4a21      	ldr	r2, [pc, #132]	@ (80052c4 <svl_dsmTask+0xb8>)
 8005240:	79bb      	ldrb	r3, [r7, #6]
 8005242:	7013      	strb	r3, [r2, #0]
}
 8005244:	bf00      	nop
	svl_dsmSetState(DSM_STATE_STARTUP_READY);

	for (;;)
	{
		// Check for state change.
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 8005246:	4b20      	ldr	r3, [pc, #128]	@ (80052c8 <svl_dsmTask+0xbc>)
 8005248:	781a      	ldrb	r2, [r3, #0]
 800524a:	4b1e      	ldr	r3, [pc, #120]	@ (80052c4 <svl_dsmTask+0xb8>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d031      	beq.n	80052b6 <svl_dsmTask+0xaa>
 8005252:	4b1e      	ldr	r3, [pc, #120]	@ (80052cc <svl_dsmTask+0xc0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02d      	beq.n	80052b6 <svl_dsmTask+0xaa>
		{
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 800525a:	2300      	movs	r3, #0
 800525c:	71fb      	strb	r3, [r7, #7]
 800525e:	e020      	b.n	80052a2 <svl_dsmTask+0x96>
			{
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 8005260:	79fb      	ldrb	r3, [r7, #7]
 8005262:	4a1b      	ldr	r2, [pc, #108]	@ (80052d0 <svl_dsmTask+0xc4>)
 8005264:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8005268:	4b17      	ldr	r3, [pc, #92]	@ (80052c8 <svl_dsmTask+0xbc>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d115      	bne.n	800529c <svl_dsmTask+0x90>
					reactionConfig[reactionIdx].currState == deviceState &&
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	4a17      	ldr	r2, [pc, #92]	@ (80052d0 <svl_dsmTask+0xc4>)
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	4413      	add	r3, r2
 8005278:	785a      	ldrb	r2, [r3, #1]
 800527a:	4b12      	ldr	r3, [pc, #72]	@ (80052c4 <svl_dsmTask+0xb8>)
 800527c:	781b      	ldrb	r3, [r3, #0]
				if (reactionConfig[reactionIdx].prevState == devicePrevState &&
 800527e:	429a      	cmp	r2, r3
 8005280:	d10c      	bne.n	800529c <svl_dsmTask+0x90>
					reactionConfig[reactionIdx].pReaction != NULL)
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	4a12      	ldr	r2, [pc, #72]	@ (80052d0 <svl_dsmTask+0xc4>)
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	4413      	add	r3, r2
 800528a:	685b      	ldr	r3, [r3, #4]
					reactionConfig[reactionIdx].currState == deviceState &&
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <svl_dsmTask+0x90>
				{
					// Execute reaction.
					reactionConfig[reactionIdx].pReaction();
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	4a0f      	ldr	r2, [pc, #60]	@ (80052d0 <svl_dsmTask+0xc4>)
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4798      	blx	r3
			for (reactionIdx = 0u; reactionIdx < reactionConfigSize / sizeof(svl_dsmReaction_t); reactionIdx++)
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	3301      	adds	r3, #1
 80052a0:	71fb      	strb	r3, [r7, #7]
 80052a2:	79fa      	ldrb	r2, [r7, #7]
 80052a4:	4b09      	ldr	r3, [pc, #36]	@ (80052cc <svl_dsmTask+0xc0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	08db      	lsrs	r3, r3, #3
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d3d8      	bcc.n	8005260 <svl_dsmTask+0x54>
					// No match.
				}
			}

			// Resolve device state change.
			devicePrevState = deviceState;
 80052ae:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <svl_dsmTask+0xb8>)
 80052b0:	781a      	ldrb	r2, [r3, #0]
 80052b2:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <svl_dsmTask+0xbc>)
 80052b4:	701a      	strb	r2, [r3, #0]
		else
		{
			// State change not detected.
		}

		(void_t) gos_taskSleep(SVL_DSM_DAEMON_POLL_MS);
 80052b6:	2014      	movs	r0, #20
 80052b8:	f001 fc7c 	bl	8006bb4 <gos_taskSleep>
		if (devicePrevState != deviceState && reactionConfig != NULL && reactionConfigSize > 0u)
 80052bc:	e7c3      	b.n	8005246 <svl_dsmTask+0x3a>
 80052be:	bf00      	nop
 80052c0:	20000134 	.word	0x20000134
 80052c4:	20001e70 	.word	0x20001e70
 80052c8:	20001e71 	.word	0x20001e71
 80052cc:	20001a74 	.word	0x20001a74
 80052d0:	0800dd4c 	.word	0x0800dd4c

080052d4 <svl_pdhGetLibVersion>:

/*
 * Function: svl_pdhGetLibVersion
 */
gos_result_t svl_pdhGetLibVersion (svl_pdhSwVerInfo_t* pLibVer)
{
 80052d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 80052dc:	23ae      	movs	r3, #174	@ 0xae
 80052de:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if (pLibVer != NULL && pdhReadFunction != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d06e      	beq.n	80053c4 <svl_pdhGetLibVersion+0xf0>
 80052e6:	4b3b      	ldr	r3, [pc, #236]	@ (80053d4 <svl_pdhGetLibVersion+0x100>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d06a      	beq.n	80053c4 <svl_pdhGetLibVersion+0xf0>
	{
		(void_t) memset((void_t*)pLibVer, 0, sizeof(*pLibVer));
 80052ee:	22a0      	movs	r2, #160	@ 0xa0
 80052f0:	2100      	movs	r1, #0
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f006 fe90 	bl	800c018 <memset>

		pLibVer->major             = PDH_LIBVER_VERSION_MAJOR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	705a      	strb	r2, [r3, #1]
		pLibVer->minor             = PDH_LIBVER_VERSION_MINOR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f042 0211 	orr.w	r2, r2, #17
 800530a:	709a      	strb	r2, [r3, #2]
 800530c:	2200      	movs	r2, #0
 800530e:	70da      	strb	r2, [r3, #3]
		pLibVer->build             = PDH_LIBVER_VERSION_BUILD;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	711a      	strb	r2, [r3, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	715a      	strb	r2, [r3, #5]
		pLibVer->date.years        = PDH_LIBVER_VERSION_DATE_YEAR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f062 0216 	orn	r2, r2, #22
 8005322:	739a      	strb	r2, [r3, #14]
 8005324:	2200      	movs	r2, #0
 8005326:	f042 0207 	orr.w	r2, r2, #7
 800532a:	73da      	strb	r2, [r3, #15]
		pLibVer->date.months       = PDH_LIBVER_VERSION_DATE_MONTH;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	735a      	strb	r2, [r3, #13]
		pLibVer->date.days         = PDH_LIBVER_VERSION_DATE_DAY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f042 0202 	orr.w	r2, r2, #2
 800533a:	72da      	strb	r2, [r3, #11]
 800533c:	2200      	movs	r2, #0
 800533e:	731a      	strb	r2, [r3, #12]
		pLibVer->date.hours        = 0u;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	729a      	strb	r2, [r3, #10]
		pLibVer->date.minutes      = 0u;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	725a      	strb	r2, [r3, #9]
		pLibVer->date.seconds      = 0u;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	721a      	strb	r2, [r3, #8]
		pLibVer->date.milliseconds = 0u;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	719a      	strb	r2, [r3, #6]
 8005358:	2200      	movs	r2, #0
 800535a:	71da      	strb	r2, [r3, #7]

		(void_t) strcpy(pLibVer->name,        PDH_LIBVER_NAME);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3310      	adds	r3, #16
 8005360:	4a1d      	ldr	r2, [pc, #116]	@ (80053d8 <svl_pdhGetLibVersion+0x104>)
 8005362:	461c      	mov	r4, r3
 8005364:	4613      	mov	r3, r2
 8005366:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005368:	6020      	str	r0, [r4, #0]
 800536a:	6061      	str	r1, [r4, #4]
 800536c:	60a2      	str	r2, [r4, #8]
		(void_t) strcpy(pLibVer->author,      PDH_LIBVER_AUTHOR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3370      	adds	r3, #112	@ 0x70
 8005372:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <svl_pdhGetLibVersion+0x108>)
 8005374:	461d      	mov	r5, r3
 8005376:	4614      	mov	r4, r2
 8005378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800537a:	6028      	str	r0, [r5, #0]
 800537c:	6069      	str	r1, [r5, #4]
 800537e:	60aa      	str	r2, [r5, #8]
 8005380:	60eb      	str	r3, [r5, #12]
 8005382:	6820      	ldr	r0, [r4, #0]
 8005384:	6128      	str	r0, [r5, #16]
		(void_t) strcpy(pLibVer->description, PDH_LIBVER_DESCRIPTION);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3340      	adds	r3, #64	@ 0x40
 800538a:	4a15      	ldr	r2, [pc, #84]	@ (80053e0 <svl_pdhGetLibVersion+0x10c>)
 800538c:	4614      	mov	r4, r2
 800538e:	469c      	mov	ip, r3
 8005390:	f104 0e20 	add.w	lr, r4, #32
 8005394:	4665      	mov	r5, ip
 8005396:	4626      	mov	r6, r4
 8005398:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800539a:	6028      	str	r0, [r5, #0]
 800539c:	6069      	str	r1, [r5, #4]
 800539e:	60aa      	str	r2, [r5, #8]
 80053a0:	60eb      	str	r3, [r5, #12]
 80053a2:	3410      	adds	r4, #16
 80053a4:	f10c 0c10 	add.w	ip, ip, #16
 80053a8:	4574      	cmp	r4, lr
 80053aa:	d1f3      	bne.n	8005394 <svl_pdhGetLibVersion+0xc0>
 80053ac:	4662      	mov	r2, ip
 80053ae:	4623      	mov	r3, r4
 80053b0:	cb03      	ldmia	r3!, {r0, r1}
 80053b2:	6010      	str	r0, [r2, #0]
 80053b4:	6051      	str	r1, [r2, #4]
 80053b6:	8819      	ldrh	r1, [r3, #0]
 80053b8:	789b      	ldrb	r3, [r3, #2]
 80053ba:	8111      	strh	r1, [r2, #8]
 80053bc:	7293      	strb	r3, [r2, #10]

		getResult = GOS_SUCCESS;
 80053be:	2355      	movs	r3, #85	@ 0x55
 80053c0:	73fb      	strb	r3, [r7, #15]
 80053c2:	e001      	b.n	80053c8 <svl_pdhGetLibVersion+0xf4>
	}
	else
	{
		getResult = GOS_ERROR;
 80053c4:	23ae      	movs	r3, #174	@ 0xae
 80053c6:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20001e74 	.word	0x20001e74
 80053d8:	0800cb58 	.word	0x0800cb58
 80053dc:	0800cb64 	.word	0x0800cb64
 80053e0:	0800cb78 	.word	0x0800cb78

080053e4 <svl_pdhGetSwInfo>:

/*
 * Function: svl_pdhGetSwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetSwInfo (svl_pdhSwInfo_t* pSwInfo)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 80053ec:	23ae      	movs	r3, #174	@ 0xae
 80053ee:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d020      	beq.n	8005438 <svl_pdhGetSwInfo+0x54>
 80053f6:	4b14      	ldr	r3, [pc, #80]	@ (8005448 <svl_pdhGetSwInfo+0x64>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01c      	beq.n	8005438 <svl_pdhGetSwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 80053fe:	4b13      	ldr	r3, [pc, #76]	@ (800544c <svl_pdhGetSwInfo+0x68>)
 8005400:	781b      	ldrb	r3, [r3, #0]
	if ((pSwInfo != NULL) && (pdhReadFunction != NULL) &&
 8005402:	2b49      	cmp	r3, #73	@ 0x49
 8005404:	d00b      	beq.n	800541e <svl_pdhGetSwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8005406:	4b11      	ldr	r3, [pc, #68]	@ (800544c <svl_pdhGetSwInfo+0x68>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b36      	cmp	r3, #54	@ 0x36
 800540c:	d114      	bne.n	8005438 <svl_pdhGetSwInfo+0x54>
 800540e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005412:	480f      	ldr	r0, [pc, #60]	@ (8005450 <svl_pdhGetSwInfo+0x6c>)
 8005414:	f003 fe68 	bl	80090e8 <gos_mutexLock>
 8005418:	4603      	mov	r3, r0
 800541a:	2b55      	cmp	r3, #85	@ 0x55
 800541c:	d10c      	bne.n	8005438 <svl_pdhGetSwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_SW_INFO, (u8_t*)pSwInfo, sizeof(*pSwInfo));
 800541e:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <svl_pdhGetSwInfo+0x64>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f44f 7228 	mov.w	r2, #672	@ 0x2a0
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	2000      	movs	r0, #0
 800542a:	4798      	blx	r3
 800542c:	4603      	mov	r3, r0
 800542e:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 8005430:	4807      	ldr	r0, [pc, #28]	@ (8005450 <svl_pdhGetSwInfo+0x6c>)
 8005432:	f003 ff5f 	bl	80092f4 <gos_mutexUnlock>
 8005436:	e001      	b.n	800543c <svl_pdhGetSwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 8005438:	23ae      	movs	r3, #174	@ 0xae
 800543a:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 800543c:	7bfb      	ldrb	r3, [r7, #15]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20001e74 	.word	0x20001e74
 800544c:	2000019e 	.word	0x2000019e
 8005450:	20001e78 	.word	0x20001e78

08005454 <svl_pdhGetHwInfo>:

/*
 * Function: svl_pdhGetHwInfo
 */
GOS_INLINE gos_result_t svl_pdhGetHwInfo (svl_pdhHwInfo_t* pHwInfo)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	/*
	 * Local variables.
	 */
	gos_result_t getResult = GOS_ERROR;
 800545c:	23ae      	movs	r3, #174	@ 0xae
 800545e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Function code.
	 */
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d020      	beq.n	80054a8 <svl_pdhGetHwInfo+0x54>
 8005466:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <svl_pdhGetHwInfo+0x64>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01c      	beq.n	80054a8 <svl_pdhGetHwInfo+0x54>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 800546e:	4b13      	ldr	r3, [pc, #76]	@ (80054bc <svl_pdhGetHwInfo+0x68>)
 8005470:	781b      	ldrb	r3, [r3, #0]
	if ((pHwInfo != NULL) && (pdhReadFunction != NULL) &&
 8005472:	2b49      	cmp	r3, #73	@ 0x49
 8005474:	d00b      	beq.n	800548e <svl_pdhGetHwInfo+0x3a>
		((pdhInited == GOS_FALSE) || (pdhInited == GOS_TRUE && gos_mutexLock(&pdhMutex, 5000) == GOS_SUCCESS)))
 8005476:	4b11      	ldr	r3, [pc, #68]	@ (80054bc <svl_pdhGetHwInfo+0x68>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b36      	cmp	r3, #54	@ 0x36
 800547c:	d114      	bne.n	80054a8 <svl_pdhGetHwInfo+0x54>
 800547e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005482:	480f      	ldr	r0, [pc, #60]	@ (80054c0 <svl_pdhGetHwInfo+0x6c>)
 8005484:	f003 fe30 	bl	80090e8 <gos_mutexLock>
 8005488:	4603      	mov	r3, r0
 800548a:	2b55      	cmp	r3, #85	@ 0x55
 800548c:	d10c      	bne.n	80054a8 <svl_pdhGetHwInfo+0x54>
	{
		getResult = pdhReadFunction(PDH_ADDR_HW_INFO, (u8_t*)pHwInfo, sizeof(*pHwInfo));
 800548e:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <svl_pdhGetHwInfo+0x64>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	22fa      	movs	r2, #250	@ 0xfa
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 800549a:	4798      	blx	r3
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]
		(void_t) gos_mutexUnlock(&pdhMutex);
 80054a0:	4807      	ldr	r0, [pc, #28]	@ (80054c0 <svl_pdhGetHwInfo+0x6c>)
 80054a2:	f003 ff27 	bl	80092f4 <gos_mutexUnlock>
 80054a6:	e001      	b.n	80054ac <svl_pdhGetHwInfo+0x58>
	}
	else
	{
		getResult = GOS_ERROR;
 80054a8:	23ae      	movs	r3, #174	@ 0xae
 80054aa:	73fb      	strb	r3, [r7, #15]
	}

	return getResult;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20001e74 	.word	0x20001e74
 80054bc:	2000019e 	.word	0x2000019e
 80054c0:	20001e78 	.word	0x20001e78

080054c4 <gos_driverInit>:

/*
 * Function: gos_driverInit
 */
gos_result_t gos_driverInit (gos_driver_functions_t* pDriverFunctions)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t driverInitResult = GOS_ERROR;
 80054cc:	23ae      	movs	r3, #174	@ 0xae
 80054ce:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pDriverFunctions != NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d006      	beq.n	80054e4 <gos_driverInit+0x20>
    {
        (void_t) memcpy((void_t*)&driverFunctions, (void_t*)pDriverFunctions, sizeof(gos_driver_functions_t));
 80054d6:	221c      	movs	r2, #28
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	4805      	ldr	r0, [pc, #20]	@ (80054f0 <gos_driverInit+0x2c>)
 80054dc:	f006 fdd8 	bl	800c090 <memcpy>
        driverInitResult = GOS_SUCCESS;
 80054e0:	2355      	movs	r3, #85	@ 0x55
 80054e2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return driverInitResult;
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20001e7c 	.word	0x20001e7c

080054f4 <gos_traceDriverTransmitString>:

/*
 * Function: gos_traceDriverTransmitString
 */
gos_result_t gos_traceDriverTransmitString (char_t* pString)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 80054fc:	23ae      	movs	r3, #174	@ 0xae
 80054fe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitString != NULL)
 8005500:	4b07      	ldr	r3, [pc, #28]	@ (8005520 <gos_traceDriverTransmitString+0x2c>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <gos_traceDriverTransmitString+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitString(pString);
 8005508:	4b05      	ldr	r3, [pc, #20]	@ (8005520 <gos_traceDriverTransmitString+0x2c>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
 8005510:	4603      	mov	r3, r0
 8005512:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20001e7c 	.word	0x20001e7c

08005524 <gos_traceDriverTransmitString_Unsafe>:

/*
 * Function: gos_traceDriverTransmitString_Unsafe
 */
gos_result_t gos_traceDriverTransmitString_Unsafe (char_t* pString)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t traceDriverTransmitResult = GOS_ERROR;
 800552c:	23ae      	movs	r3, #174	@ 0xae
 800552e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.traceDriverTransmitStringUnsafe != NULL)
 8005530:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <gos_traceDriverTransmitString_Unsafe+0x20>
    {
        traceDriverTransmitResult = driverFunctions.traceDriverTransmitStringUnsafe(pString);
 8005538:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <gos_traceDriverTransmitString_Unsafe+0x2c>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
 8005540:	4603      	mov	r3, r0
 8005542:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return traceDriverTransmitResult;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20001e7c 	.word	0x20001e7c

08005554 <gos_kernelInit>:

/*
 * Function: gos_kernelInit
 */
gos_result_t gos_kernelInit (void_t)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t  initResult = GOS_ERROR;
 800555a:	23ae      	movs	r3, #174	@ 0xae
 800555c:	717b      	strb	r3, [r7, #5]
    u16_t         taskIndex  = 1u;
 800555e:	2301      	movs	r3, #1
 8005560:	80fb      	strh	r3, [r7, #6]

    /*
     * Function code.
     */
    // Initialize task descriptors.
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8005562:	2301      	movs	r3, #1
 8005564:	80fb      	strh	r3, [r7, #6]
 8005566:	e038      	b.n	80055da <gos_kernelInit+0x86>
    {
        taskDescriptors[taskIndex].taskFunction         = NULL;
 8005568:	88fb      	ldrh	r3, [r7, #6]
 800556a:	4a6b      	ldr	r2, [pc, #428]	@ (8005718 <gos_kernelInit+0x1c4>)
 800556c:	216a      	movs	r1, #106	@ 0x6a
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	4413      	add	r3, r2
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	2200      	movs	r2, #0
 800557a:	705a      	strb	r2, [r3, #1]
 800557c:	2200      	movs	r2, #0
 800557e:	709a      	strb	r2, [r3, #2]
 8005580:	2200      	movs	r2, #0
 8005582:	70da      	strb	r2, [r3, #3]
        taskDescriptors[taskIndex].taskPriority         = GOS_TASK_MAX_PRIO_LEVELS;
 8005584:	88fb      	ldrh	r3, [r7, #6]
 8005586:	4a64      	ldr	r2, [pc, #400]	@ (8005718 <gos_kernelInit+0x1c4>)
 8005588:	216a      	movs	r1, #106	@ 0x6a
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	4413      	add	r3, r2
 8005590:	3306      	adds	r3, #6
 8005592:	22ff      	movs	r2, #255	@ 0xff
 8005594:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskOriginalPriority = GOS_TASK_MAX_PRIO_LEVELS;
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	4a5f      	ldr	r2, [pc, #380]	@ (8005718 <gos_kernelInit+0x1c4>)
 800559a:	216a      	movs	r1, #106	@ 0x6a
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	3307      	adds	r3, #7
 80055a4:	22ff      	movs	r2, #255	@ 0xff
 80055a6:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskState            = GOS_TASK_SUSPENDED;
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005718 <gos_kernelInit+0x1c4>)
 80055ac:	216a      	movs	r1, #106	@ 0x6a
 80055ae:	fb01 f303 	mul.w	r3, r1, r3
 80055b2:	4413      	add	r3, r2
 80055b4:	3304      	adds	r3, #4
 80055b6:	2205      	movs	r2, #5
 80055b8:	701a      	strb	r2, [r3, #0]
        taskDescriptors[taskIndex].taskId               = GOS_INVALID_TASK_ID;
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	4a56      	ldr	r2, [pc, #344]	@ (8005718 <gos_kernelInit+0x1c4>)
 80055be:	216a      	movs	r1, #106	@ 0x6a
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	4413      	add	r3, r2
 80055c6:	3328      	adds	r3, #40	@ 0x28
 80055c8:	2200      	movs	r2, #0
 80055ca:	709a      	strb	r2, [r3, #2]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	70da      	strb	r2, [r3, #3]
    for (taskIndex = 1u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	3301      	adds	r3, #1
 80055d8:	80fb      	strh	r3, [r7, #6]
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80055de:	d9c3      	bls.n	8005568 <gos_kernelInit+0x14>
    }

    // Register idle task PSP.
    u32_t* psp = (u32_t*)(MAIN_STACK - GLOBAL_STACK);
 80055e0:	4b4e      	ldr	r3, [pc, #312]	@ (800571c <gos_kernelInit+0x1c8>)
 80055e2:	603b      	str	r3, [r7, #0]

    // Fill dummy stack frame.
    *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	3b04      	subs	r3, #4
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80055f0:	601a      	str	r2, [r3, #0]
    *(--psp) = (u32_t) gos_idleTask; // PC
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	3b04      	subs	r3, #4
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4a49      	ldr	r2, [pc, #292]	@ (8005720 <gos_kernelInit+0x1cc>)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	601a      	str	r2, [r3, #0]
    *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	3b04      	subs	r3, #4
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f06f 0202 	mvn.w	r2, #2
 800560a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x12121212u; // Dummy R12
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	3b04      	subs	r3, #4
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8005618:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x03030303u; // Dummy R3
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	3b04      	subs	r3, #4
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8005626:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x02020202u; // Dummy R2
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	3b04      	subs	r3, #4
 800562c:	603b      	str	r3, [r7, #0]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 8005634:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x01010101u; // Dummy R1
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	3b04      	subs	r3, #4
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 8005642:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x00000000u; // Dummy R0
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	3b04      	subs	r3, #4
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x11111111u; // Dummy R11
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	3b04      	subs	r3, #4
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800565c:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x10101010u; // Dummy R10
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	3b04      	subs	r3, #4
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800566a:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x09090909u; // Dummy R9
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	3b04      	subs	r3, #4
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8005678:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x08080808u; // Dummy R8
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	3b04      	subs	r3, #4
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 8005686:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x07070707u; // Dummy R7
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	3b04      	subs	r3, #4
 800568c:	603b      	str	r3, [r7, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 8005694:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x06060606u; // Dummy R6
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	3b04      	subs	r3, #4
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80056a2:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x05050505u; // Dummy R5
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	3b04      	subs	r3, #4
 80056a8:	603b      	str	r3, [r7, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80056b0:	601a      	str	r2, [r3, #0]
    *(--psp) = 0x04040404u; // Dummy R4
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	3b04      	subs	r3, #4
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80056be:	601a      	str	r2, [r3, #0]

    // Save PSP.
    taskDescriptors[0].taskPsp = (u32_t)psp;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	4a15      	ldr	r2, [pc, #84]	@ (8005718 <gos_kernelInit+0x1c4>)
 80056c4:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Calculate stack overflow threshold.
    taskDescriptors[0].taskStackOverflowThreshold = taskDescriptors[0].taskPsp - taskDescriptors[0].taskStackSize + 64;
 80056c6:	4b14      	ldr	r3, [pc, #80]	@ (8005718 <gos_kernelInit+0x1c4>)
 80056c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ca:	4a13      	ldr	r2, [pc, #76]	@ (8005718 <gos_kernelInit+0x1c4>)
 80056cc:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 80056d0:	b292      	uxth	r2, r2
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	3340      	adds	r3, #64	@ 0x40
 80056d6:	4a10      	ldr	r2, [pc, #64]	@ (8005718 <gos_kernelInit+0x1c4>)
 80056d8:	f8c2 3066 	str.w	r3, [r2, #102]	@ 0x66

    // Enable Fault Handlers
    gos_ported_enableFaultHandlers();
 80056dc:	4b11      	ldr	r3, [pc, #68]	@ (8005724 <gos_kernelInit+0x1d0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a10      	ldr	r2, [pc, #64]	@ (8005724 <gos_kernelInit+0x1d0>)
 80056e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005724 <gos_kernelInit+0x1d0>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005724 <gos_kernelInit+0x1d0>)
 80056ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <gos_kernelInit+0x1d0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005724 <gos_kernelInit+0x1d0>)
 80056fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056fe:	6013      	str	r3, [r2, #0]

    schedDisableCntr = 0u;
 8005700:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <gos_kernelInit+0x1d4>)
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]

    initResult = GOS_SUCCESS;
 8005706:	2355      	movs	r3, #85	@ 0x55
 8005708:	717b      	strb	r3, [r7, #5]

    return initResult;
 800570a:	797b      	ldrb	r3, [r7, #5]
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	200001a8 	.word	0x200001a8
 800571c:	2001ee00 	.word	0x2001ee00
 8005720:	08008331 	.word	0x08008331
 8005724:	e000ed24 	.word	0xe000ed24
 8005728:	20001e99 	.word	0x20001e99

0800572c <gos_kernelStart>:

/*
 * Function: gos_kernelStart
 */
gos_result_t gos_kernelStart (void_t)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t kernelStartResult = GOS_ERROR;
 8005732:	23ae      	movs	r3, #174	@ 0xae
 8005734:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Start with the first task.
    currentTaskIndex = 0;
 8005736:	4b19      	ldr	r3, [pc, #100]	@ (800579c <gos_kernelStart+0x70>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]

    // Do low-level initialization.
    gos_ported_kernelStartInit();
 800573c:	f000 fe9a 	bl	8006474 <gos_kernelGetCurrentPsp>
 8005740:	f380 8809 	msr	PSP, r0
 8005744:	f3ef 8014 	mrs	r0, CONTROL
 8005748:	f040 0002 	orr.w	r0, r0, #2
 800574c:	f380 8814 	msr	CONTROL, r0
 8005750:	f3ef 8014 	mrs	r0, CONTROL
 8005754:	f040 0001 	orr.w	r0, r0, #1
 8005758:	f380 8814 	msr	CONTROL, r0

    // Get the handler of the first task by tracing back from PSP which is at R4 slot.
    gos_task_t firstTask = taskDescriptors[currentTaskIndex].taskFunction;
 800575c:	4b0f      	ldr	r3, [pc, #60]	@ (800579c <gos_kernelStart+0x70>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0f      	ldr	r2, [pc, #60]	@ (80057a0 <gos_kernelStart+0x74>)
 8005762:	216a      	movs	r1, #106	@ 0x6a
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	4413      	add	r3, r2
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	603b      	str	r3, [r7, #0]

    // Initialize system timer value.
    (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 800576e:	480d      	ldr	r0, [pc, #52]	@ (80057a4 <gos_kernelStart+0x78>)
 8005770:	f006 fb76 	bl	800be60 <gos_timerDriverSysTimerGet>

    // Enable scheduling.
    GOS_ENABLE_SCHED
 8005774:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <gos_kernelStart+0x7c>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <gos_kernelStart+0x5c>
 800577c:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <gos_kernelStart+0x7c>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	3b01      	subs	r3, #1
 8005782:	b2da      	uxtb	r2, r3
 8005784:	4b08      	ldr	r3, [pc, #32]	@ (80057a8 <gos_kernelStart+0x7c>)
 8005786:	701a      	strb	r2, [r3, #0]

    // Set kernel running flag.
    isKernelRunning = GOS_TRUE;
 8005788:	4b08      	ldr	r3, [pc, #32]	@ (80057ac <gos_kernelStart+0x80>)
 800578a:	2236      	movs	r2, #54	@ 0x36
 800578c:	701a      	strb	r2, [r3, #0]

    // Execute the handler.
    firstTask();
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	4798      	blx	r3

    // This point should not be reached.
    return kernelStartResult;
 8005792:	79fb      	ldrb	r3, [r7, #7]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20001ea0 	.word	0x20001ea0
 80057a0:	200001a8 	.word	0x200001a8
 80057a4:	20001ea8 	.word	0x20001ea8
 80057a8:	20001e99 	.word	0x20001e99
 80057ac:	200001a2 	.word	0x200001a2

080057b0 <gos_kernelRegisterSysTickHook>:

/*
 * Function: gos_kernelRegisterSysTickHook
 */
gos_result_t gos_kernelRegisterSysTickHook (gos_sysTickHook_t sysTickHookFunction)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t hookRegisterResult = GOS_ERROR;
 80057b8:	23ae      	movs	r3, #174	@ 0xae
 80057ba:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (sysTickHookFunction != NULL && kernelSysTickHookFunction == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <gos_kernelRegisterSysTickHook+0x24>
 80057c2:	4b08      	ldr	r3, [pc, #32]	@ (80057e4 <gos_kernelRegisterSysTickHook+0x34>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <gos_kernelRegisterSysTickHook+0x24>
    {
        kernelSysTickHookFunction = sysTickHookFunction;
 80057ca:	4a06      	ldr	r2, [pc, #24]	@ (80057e4 <gos_kernelRegisterSysTickHook+0x34>)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6013      	str	r3, [r2, #0]
        hookRegisterResult = GOS_SUCCESS;
 80057d0:	2355      	movs	r3, #85	@ 0x55
 80057d2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return hookRegisterResult;
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20001ebc 	.word	0x20001ebc

080057e8 <SysTick_Handler>:
/*
 * Function: gos_ported_sysTickInterrupt
 */
#include <gos_time.h>
void_t gos_ported_sysTickInterrupt (void_t)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    sysTicks++;
 80057ee:	4b15      	ldr	r3, [pc, #84]	@ (8005844 <SysTick_Handler+0x5c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3301      	adds	r3, #1
 80057f4:	4a13      	ldr	r2, [pc, #76]	@ (8005844 <SysTick_Handler+0x5c>)
 80057f6:	6013      	str	r3, [r2, #0]
    (void_t) gos_timeIncreaseSystemTime(1);
 80057f8:	2001      	movs	r0, #1
 80057fa:	f005 fd89 	bl	800b310 <gos_timeIncreaseSystemTime>

    // Periodic stack overflow check on currently running task.
    if (isKernelRunning == GOS_TRUE)
 80057fe:	4b12      	ldr	r3, [pc, #72]	@ (8005848 <SysTick_Handler+0x60>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b36      	cmp	r3, #54	@ 0x36
 8005804:	d113      	bne.n	800582e <SysTick_Handler+0x46>
    {
        gos_kernelCheckTaskStack();
 8005806:	f000 fda5 	bl	8006354 <gos_kernelCheckTaskStack>

#if CFG_SCHED_COOPERATIVE == 0
        if (schedDisableCntr == 0u)
 800580a:	4b10      	ldr	r3, [pc, #64]	@ (800584c <SysTick_Handler+0x64>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10d      	bne.n	800582e <SysTick_Handler+0x46>
 8005812:	2316      	movs	r3, #22
 8005814:	71fb      	strb	r3, [r7, #7]
GOS_INLINE void_t gos_kernelReschedule (gos_kernel_privilege_t privilege)
{
    /*
     * Function code.
     */
    gos_ported_reschedule(privilege);
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	2b16      	cmp	r3, #22
 800581a:	d106      	bne.n	800582a <SysTick_Handler+0x42>
 800581c:	4b0c      	ldr	r3, [pc, #48]	@ (8005850 <SysTick_Handler+0x68>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a0b      	ldr	r2, [pc, #44]	@ (8005850 <SysTick_Handler+0x68>)
 8005822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005826:	6013      	str	r3, [r2, #0]
}
 8005828:	e000      	b.n	800582c <SysTick_Handler+0x44>
    gos_ported_reschedule(privilege);
 800582a:	dfff      	svc	255	@ 0xff
}
 800582c:	bf00      	nop
    if (kernelSysTickHookFunction != NULL)
 800582e:	4b09      	ldr	r3, [pc, #36]	@ (8005854 <SysTick_Handler+0x6c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <SysTick_Handler+0x54>
        kernelSysTickHookFunction();
 8005836:	4b07      	ldr	r3, [pc, #28]	@ (8005854 <SysTick_Handler+0x6c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4798      	blx	r3
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20001ea4 	.word	0x20001ea4
 8005848:	200001a2 	.word	0x200001a2
 800584c:	20001e99 	.word	0x20001e99
 8005850:	e000ed04 	.word	0xe000ed04
 8005854:	20001ebc 	.word	0x20001ebc

08005858 <gos_kernelGetSysTicks>:
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
    return sysTicks;
 800585c:	4b03      	ldr	r3, [pc, #12]	@ (800586c <gos_kernelGetSysTicks+0x14>)
 800585e:	681b      	ldr	r3, [r3, #0]
}
 8005860:	4618      	mov	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	20001ea4 	.word	0x20001ea4

08005870 <gos_kernelGetCpuUsage>:
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
    return (10000 - taskDescriptors[0].taskCpuMonitoringUsage);
 8005874:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <gos_kernelGetCpuUsage+0x20>)
 8005876:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800587a:	b29b      	uxth	r3, r3
 800587c:	f5c3 531c 	rsb	r3, r3, #9984	@ 0x2700
 8005880:	3310      	adds	r3, #16
 8005882:	b29b      	uxth	r3, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	200001a8 	.word	0x200001a8

08005894 <gos_kernelReset>:
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
    resetRequired = GOS_TRUE;
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <gos_kernelReset+0x34>)
 800589c:	2236      	movs	r2, #54	@ 0x36
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	2309      	movs	r3, #9
 80058a2:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	2b16      	cmp	r3, #22
 80058a8:	d106      	bne.n	80058b8 <gos_kernelReset+0x24>
 80058aa:	4b08      	ldr	r3, [pc, #32]	@ (80058cc <gos_kernelReset+0x38>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a07      	ldr	r2, [pc, #28]	@ (80058cc <gos_kernelReset+0x38>)
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	6013      	str	r3, [r2, #0]
}
 80058b6:	e000      	b.n	80058ba <gos_kernelReset+0x26>
    gos_ported_reschedule(privilege);
 80058b8:	dfff      	svc	255	@ 0xff
}
 80058ba:	bf00      	nop
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	200001a3 	.word	0x200001a3
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <gos_kernelDelayMs>:
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	80fb      	strh	r3, [r7, #6]
    u32_t sysTickVal = sysTicks;
 80058da:	4b0a      	ldr	r3, [pc, #40]	@ (8005904 <gos_kernelDelayMs+0x34>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]
    while ((u16_t)(sysTicks - sysTickVal) < milliseconds);
 80058e0:	bf00      	nop
 80058e2:	4b08      	ldr	r3, [pc, #32]	@ (8005904 <gos_kernelDelayMs+0x34>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	88fa      	ldrh	r2, [r7, #6]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d8f5      	bhi.n	80058e2 <gos_kernelDelayMs+0x12>
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	20001ea4 	.word	0x20001ea4

08005908 <gos_kernelCalculateTaskCpuUsages>:
{
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	71fb      	strb	r3, [r7, #7]
    u16_t taskIndex           = 0u;
 8005912:	2300      	movs	r3, #0
 8005914:	82fb      	strh	r3, [r7, #22]
    u32_t systemConvertedTime = 0u;
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
    u32_t taskConvertedTime   = 0u;
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800591e:	4ba8      	ldr	r3, [pc, #672]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8005920:	795b      	ldrb	r3, [r3, #5]
 8005922:	461a      	mov	r2, r3
 8005924:	4ba7      	ldr	r3, [pc, #668]	@ (8005bc4 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 8005926:	fb03 f202 	mul.w	r2, r3, r2
                          monitoringTime.seconds * 1000 * 1000 +
 800592a:	4ba5      	ldr	r3, [pc, #660]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 800592c:	791b      	ldrb	r3, [r3, #4]
 800592e:	4619      	mov	r1, r3
 8005930:	4ba5      	ldr	r3, [pc, #660]	@ (8005bc8 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 8005932:	fb01 f303 	mul.w	r3, r1, r3
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 8005936:	441a      	add	r2, r3
                          monitoringTime.milliseconds * 1000 +
 8005938:	4ba1      	ldr	r3, [pc, #644]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 800593a:	885b      	ldrh	r3, [r3, #2]
 800593c:	4619      	mov	r1, r3
 800593e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005942:	fb01 f303 	mul.w	r3, r1, r3
                          monitoringTime.seconds * 1000 * 1000 +
 8005946:	4413      	add	r3, r2
                          monitoringTime.microseconds;
 8005948:	4a9d      	ldr	r2, [pc, #628]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 800594a:	8812      	ldrh	r2, [r2, #0]
                          monitoringTime.milliseconds * 1000 +
 800594c:	4413      	add	r3, r2
    systemConvertedTime = monitoringTime.minutes * 60 * 1000 * 1000 +
 800594e:	613b      	str	r3, [r7, #16]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8005950:	2300      	movs	r3, #0
 8005952:	82fb      	strh	r3, [r7, #22]
 8005954:	e10f      	b.n	8005b76 <gos_kernelCalculateTaskCpuUsages+0x26e>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8005956:	8afb      	ldrh	r3, [r7, #22]
 8005958:	4a9c      	ldr	r2, [pc, #624]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 800595a:	216a      	movs	r1, #106	@ 0x6a
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	4413      	add	r3, r2
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 810b 	beq.w	8005b80 <gos_kernelCalculateTaskCpuUsages+0x278>
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 800596a:	8afb      	ldrh	r3, [r7, #22]
 800596c:	4a97      	ldr	r2, [pc, #604]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 800596e:	216a      	movs	r1, #106	@ 0x6a
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	4413      	add	r3, r2
 8005976:	335a      	adds	r3, #90	@ 0x5a
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	4b91      	ldr	r3, [pc, #580]	@ (8005bc4 <gos_kernelCalculateTaskCpuUsages+0x2bc>)
 800597e:	fb03 f202 	mul.w	r2, r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 8005982:	8afb      	ldrh	r3, [r7, #22]
 8005984:	4991      	ldr	r1, [pc, #580]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005986:	206a      	movs	r0, #106	@ 0x6a
 8005988:	fb00 f303 	mul.w	r3, r0, r3
 800598c:	440b      	add	r3, r1
 800598e:	3359      	adds	r3, #89	@ 0x59
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	4619      	mov	r1, r3
 8005994:	4b8c      	ldr	r3, [pc, #560]	@ (8005bc8 <gos_kernelCalculateTaskCpuUsages+0x2c0>)
 8005996:	fb01 f303 	mul.w	r3, r1, r3
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 800599a:	441a      	add	r2, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 800599c:	8afb      	ldrh	r3, [r7, #22]
 800599e:	498b      	ldr	r1, [pc, #556]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80059a0:	206a      	movs	r0, #106	@ 0x6a
 80059a2:	fb00 f303 	mul.w	r3, r0, r3
 80059a6:	440b      	add	r3, r1
 80059a8:	3350      	adds	r3, #80	@ 0x50
 80059aa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	4619      	mov	r1, r3
 80059b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
                              taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000 * 1000 +
 80059ba:	4413      	add	r3, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds;
 80059bc:	8afa      	ldrh	r2, [r7, #22]
 80059be:	4983      	ldr	r1, [pc, #524]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80059c0:	206a      	movs	r0, #106	@ 0x6a
 80059c2:	fb00 f202 	mul.w	r2, r0, r2
 80059c6:	440a      	add	r2, r1
 80059c8:	3250      	adds	r2, #80	@ 0x50
 80059ca:	f8b2 2005 	ldrh.w	r2, [r2, #5]
 80059ce:	b292      	uxth	r2, r2
                              taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds * 1000 +
 80059d0:	4413      	add	r3, r2
        taskConvertedTime   = taskDescriptors[taskIndex].taskMonitoringRunTime.minutes * 60 * 1000 * 1000 +
 80059d2:	60fb      	str	r3, [r7, #12]
        if (systemConvertedTime > 0)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 80ca 	beq.w	8005b70 <gos_kernelCalculateTaskCpuUsages+0x268>
            taskDescriptors[taskIndex].taskCpuMonitoringUsage = (u16_t)(((u32_t)10000 * taskConvertedTime) / systemConvertedTime);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80059e2:	fb03 f202 	mul.w	r2, r3, r2
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ec:	8afb      	ldrh	r3, [r7, #22]
 80059ee:	b290      	uxth	r0, r2
 80059f0:	4a76      	ldr	r2, [pc, #472]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 80059f2:	216a      	movs	r1, #106	@ 0x6a
 80059f4:	fb01 f303 	mul.w	r3, r1, r3
 80059f8:	4413      	add	r3, r2
 80059fa:	3360      	adds	r3, #96	@ 0x60
 80059fc:	4602      	mov	r2, r0
 80059fe:	809a      	strh	r2, [r3, #4]
            if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	2b36      	cmp	r3, #54	@ 0x36
 8005a04:	d004      	beq.n	8005a10 <gos_kernelCalculateTaskCpuUsages+0x108>
 8005a06:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8005a08:	791b      	ldrb	r3, [r3, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80b0 	beq.w	8005b70 <gos_kernelCalculateTaskCpuUsages+0x268>
                taskDescriptors[taskIndex].taskCpuUsage = (u16_t)((u32_t)(10000 * taskConvertedTime) / systemConvertedTime);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005a16:	fb03 f202 	mul.w	r2, r3, r2
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a20:	8afb      	ldrh	r3, [r7, #22]
 8005a22:	b290      	uxth	r0, r2
 8005a24:	4a69      	ldr	r2, [pc, #420]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005a26:	216a      	movs	r1, #106	@ 0x6a
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3360      	adds	r3, #96	@ 0x60
 8005a30:	4602      	mov	r2, r0
 8005a32:	805a      	strh	r2, [r3, #2]
                        &taskDescriptors[taskIndex].taskRunTime,
 8005a34:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMicroseconds(
 8005a36:	226a      	movs	r2, #106	@ 0x6a
 8005a38:	fb02 f303 	mul.w	r3, r2, r3
 8005a3c:	3348      	adds	r3, #72	@ 0x48
 8005a3e:	4a63      	ldr	r2, [pc, #396]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005a40:	4413      	add	r3, r2
 8005a42:	1d18      	adds	r0, r3, #4
 8005a44:	8afb      	ldrh	r3, [r7, #22]
                        (u16_t)taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds);
 8005a46:	4a61      	ldr	r2, [pc, #388]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005a48:	216a      	movs	r1, #106	@ 0x6a
 8005a4a:	fb01 f303 	mul.w	r3, r1, r3
 8005a4e:	4413      	add	r3, r2
 8005a50:	3350      	adds	r3, #80	@ 0x50
 8005a52:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005a56:	b29b      	uxth	r3, r3
                (void_t) gos_runTimeAddMicroseconds(
 8005a58:	461a      	mov	r2, r3
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	f005 fad0 	bl	800b000 <gos_runTimeAddMicroseconds>
                        &taskDescriptors[taskIndex].taskRunTime,
 8005a60:	8afb      	ldrh	r3, [r7, #22]
                (void_t) gos_runTimeAddMilliseconds(
 8005a62:	226a      	movs	r2, #106	@ 0x6a
 8005a64:	fb02 f303 	mul.w	r3, r2, r3
 8005a68:	3348      	adds	r3, #72	@ 0x48
 8005a6a:	4a58      	ldr	r2, [pc, #352]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005a6c:	4413      	add	r3, r2
 8005a6e:	1d18      	adds	r0, r3, #4
                        (u32_t)(taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds +
 8005a70:	8afb      	ldrh	r3, [r7, #22]
 8005a72:	4a56      	ldr	r2, [pc, #344]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005a74:	216a      	movs	r1, #106	@ 0x6a
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3350      	adds	r3, #80	@ 0x50
 8005a7e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8005a82:	b29a      	uxth	r2, r3
                        taskDescriptors[taskIndex].taskMonitoringRunTime.seconds * 1000));
 8005a84:	8afb      	ldrh	r3, [r7, #22]
 8005a86:	4951      	ldr	r1, [pc, #324]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005a88:	246a      	movs	r4, #106	@ 0x6a
 8005a8a:	fb04 f303 	mul.w	r3, r4, r3
 8005a8e:	440b      	add	r3, r1
 8005a90:	3359      	adds	r3, #89	@ 0x59
 8005a92:	781b      	ldrb	r3, [r3, #0]
                (void_t) gos_runTimeAddMilliseconds(
 8005a94:	4619      	mov	r1, r3
 8005a96:	0149      	lsls	r1, r1, #5
 8005a98:	1ac9      	subs	r1, r1, r3
 8005a9a:	0089      	lsls	r1, r1, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f005 fb8a 	bl	800b1c0 <gos_runTimeAddMilliseconds>
                taskDescriptors[taskIndex].taskMonitoringRunTime.days         = 0u;
 8005aac:	8afb      	ldrh	r3, [r7, #22]
 8005aae:	4a47      	ldr	r2, [pc, #284]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005ab0:	216a      	movs	r1, #106	@ 0x6a
 8005ab2:	fb01 f303 	mul.w	r3, r1, r3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3350      	adds	r3, #80	@ 0x50
 8005aba:	2200      	movs	r2, #0
 8005abc:	731a      	strb	r2, [r3, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	735a      	strb	r2, [r3, #13]
                taskDescriptors[taskIndex].taskMonitoringRunTime.hours        = 0u;
 8005ac2:	8afb      	ldrh	r3, [r7, #22]
 8005ac4:	4a41      	ldr	r2, [pc, #260]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005ac6:	216a      	movs	r1, #106	@ 0x6a
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	4413      	add	r3, r2
 8005ace:	335b      	adds	r3, #91	@ 0x5b
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.minutes      = 0u;
 8005ad4:	8afb      	ldrh	r3, [r7, #22]
 8005ad6:	4a3d      	ldr	r2, [pc, #244]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005ad8:	216a      	movs	r1, #106	@ 0x6a
 8005ada:	fb01 f303 	mul.w	r3, r1, r3
 8005ade:	4413      	add	r3, r2
 8005ae0:	335a      	adds	r3, #90	@ 0x5a
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.seconds      = 0u;
 8005ae6:	8afb      	ldrh	r3, [r7, #22]
 8005ae8:	4a38      	ldr	r2, [pc, #224]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005aea:	216a      	movs	r1, #106	@ 0x6a
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	4413      	add	r3, r2
 8005af2:	3359      	adds	r3, #89	@ 0x59
 8005af4:	2200      	movs	r2, #0
 8005af6:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskMonitoringRunTime.milliseconds = 0u;
 8005af8:	8afb      	ldrh	r3, [r7, #22]
 8005afa:	4a34      	ldr	r2, [pc, #208]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005afc:	216a      	movs	r1, #106	@ 0x6a
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
 8005b02:	4413      	add	r3, r2
 8005b04:	3350      	adds	r3, #80	@ 0x50
 8005b06:	2200      	movs	r2, #0
 8005b08:	71da      	strb	r2, [r3, #7]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	721a      	strb	r2, [r3, #8]
                taskDescriptors[taskIndex].taskMonitoringRunTime.microseconds = 0u;
 8005b0e:	8afb      	ldrh	r3, [r7, #22]
 8005b10:	4a2e      	ldr	r2, [pc, #184]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005b12:	216a      	movs	r1, #106	@ 0x6a
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	3350      	adds	r3, #80	@ 0x50
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	715a      	strb	r2, [r3, #5]
 8005b20:	2200      	movs	r2, #0
 8005b22:	719a      	strb	r2, [r3, #6]
                if (taskDescriptors[taskIndex].taskCpuUsage > taskDescriptors[taskIndex].taskCpuUsageMax)
 8005b24:	8afb      	ldrh	r3, [r7, #22]
 8005b26:	4a29      	ldr	r2, [pc, #164]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005b28:	216a      	movs	r1, #106	@ 0x6a
 8005b2a:	fb01 f303 	mul.w	r3, r1, r3
 8005b2e:	4413      	add	r3, r2
 8005b30:	3360      	adds	r3, #96	@ 0x60
 8005b32:	885b      	ldrh	r3, [r3, #2]
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	8afb      	ldrh	r3, [r7, #22]
 8005b38:	4924      	ldr	r1, [pc, #144]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005b3a:	206a      	movs	r0, #106	@ 0x6a
 8005b3c:	fb00 f303 	mul.w	r3, r0, r3
 8005b40:	440b      	add	r3, r1
 8005b42:	3360      	adds	r3, #96	@ 0x60
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d911      	bls.n	8005b70 <gos_kernelCalculateTaskCpuUsages+0x268>
                    taskDescriptors[taskIndex].taskCpuUsageMax = taskDescriptors[taskIndex].taskCpuUsage;
 8005b4c:	8afa      	ldrh	r2, [r7, #22]
 8005b4e:	8afb      	ldrh	r3, [r7, #22]
 8005b50:	491e      	ldr	r1, [pc, #120]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005b52:	206a      	movs	r0, #106	@ 0x6a
 8005b54:	fb00 f202 	mul.w	r2, r0, r2
 8005b58:	440a      	add	r2, r1
 8005b5a:	3260      	adds	r2, #96	@ 0x60
 8005b5c:	8852      	ldrh	r2, [r2, #2]
 8005b5e:	b290      	uxth	r0, r2
 8005b60:	4a1a      	ldr	r2, [pc, #104]	@ (8005bcc <gos_kernelCalculateTaskCpuUsages+0x2c4>)
 8005b62:	216a      	movs	r1, #106	@ 0x6a
 8005b64:	fb01 f303 	mul.w	r3, r1, r3
 8005b68:	4413      	add	r3, r2
 8005b6a:	3360      	adds	r3, #96	@ 0x60
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	801a      	strh	r2, [r3, #0]
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8005b70:	8afb      	ldrh	r3, [r7, #22]
 8005b72:	3301      	adds	r3, #1
 8005b74:	82fb      	strh	r3, [r7, #22]
 8005b76:	8afb      	ldrh	r3, [r7, #22]
 8005b78:	2b2f      	cmp	r3, #47	@ 0x2f
 8005b7a:	f67f aeec 	bls.w	8005956 <gos_kernelCalculateTaskCpuUsages+0x4e>
 8005b7e:	e000      	b.n	8005b82 <gos_kernelCalculateTaskCpuUsages+0x27a>
            break;
 8005b80:	bf00      	nop
    if (isResetRequired == GOS_TRUE || monitoringTime.seconds > 0)
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	2b36      	cmp	r3, #54	@ 0x36
 8005b86:	d003      	beq.n	8005b90 <gos_kernelCalculateTaskCpuUsages+0x288>
 8005b88:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8005b8a:	791b      	ldrb	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d013      	beq.n	8005bb8 <gos_kernelCalculateTaskCpuUsages+0x2b0>
        monitoringTime.days         = 0u;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	71da      	strb	r2, [r3, #7]
 8005b96:	2200      	movs	r2, #0
 8005b98:	721a      	strb	r2, [r3, #8]
        monitoringTime.hours        = 0u;
 8005b9a:	4b09      	ldr	r3, [pc, #36]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	719a      	strb	r2, [r3, #6]
        monitoringTime.minutes      = 0u;
 8005ba0:	4b07      	ldr	r3, [pc, #28]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	715a      	strb	r2, [r3, #5]
        monitoringTime.seconds      = 0u;
 8005ba6:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	711a      	strb	r2, [r3, #4]
        monitoringTime.milliseconds = 0u;
 8005bac:	4b04      	ldr	r3, [pc, #16]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	805a      	strh	r2, [r3, #2]
        monitoringTime.microseconds = 0u;
 8005bb2:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <gos_kernelCalculateTaskCpuUsages+0x2b8>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	801a      	strh	r2, [r3, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd90      	pop	{r4, r7, pc}
 8005bc0:	20001eac 	.word	0x20001eac
 8005bc4:	03938700 	.word	0x03938700
 8005bc8:	000f4240 	.word	0x000f4240
 8005bcc:	200001a8 	.word	0x200001a8

08005bd0 <gos_kernelDump>:
{
 8005bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	b0a6      	sub	sp, #152	@ 0x98
 8005bd6:	af14      	add	r7, sp, #80	@ 0x50
    u16_t taskIndex = 0u;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    (void_t) gos_shellDriverTransmitString("Task dump:\r\n");
 8005bde:	48ae      	ldr	r0, [pc, #696]	@ (8005e98 <gos_kernelDump+0x2c8>)
 8005be0:	f006 f8e2 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8005be4:	48ad      	ldr	r0, [pc, #692]	@ (8005e9c <gos_kernelDump+0x2cc>)
 8005be6:	f006 f8df 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8005bea:	4bad      	ldr	r3, [pc, #692]	@ (8005ea0 <gos_kernelDump+0x2d0>)
 8005bec:	9302      	str	r3, [sp, #8]
 8005bee:	4bad      	ldr	r3, [pc, #692]	@ (8005ea4 <gos_kernelDump+0x2d4>)
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	4bad      	ldr	r3, [pc, #692]	@ (8005ea8 <gos_kernelDump+0x2d8>)
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	4bad      	ldr	r3, [pc, #692]	@ (8005eac <gos_kernelDump+0x2dc>)
 8005bf8:	4aad      	ldr	r2, [pc, #692]	@ (8005eb0 <gos_kernelDump+0x2e0>)
 8005bfa:	49ae      	ldr	r1, [pc, #696]	@ (8005eb4 <gos_kernelDump+0x2e4>)
 8005bfc:	48ae      	ldr	r0, [pc, #696]	@ (8005eb8 <gos_kernelDump+0x2e8>)
 8005bfe:	f006 f8d3 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR);
 8005c02:	48a6      	ldr	r0, [pc, #664]	@ (8005e9c <gos_kernelDump+0x2cc>)
 8005c04:	f006 f8d0 	bl	800bda8 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005c0e:	e1cc      	b.n	8005faa <gos_kernelDump+0x3da>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8005c10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c14:	4aa9      	ldr	r2, [pc, #676]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005c16:	216a      	movs	r1, #106	@ 0x6a
 8005c18:	fb01 f303 	mul.w	r3, r1, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 81c8 	beq.w	8005fb6 <gos_kernelDump+0x3e6>
                    taskDescriptors[taskIndex].taskId,
 8005c26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c2a:	4aa4      	ldr	r2, [pc, #656]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005c2c:	216a      	movs	r1, #106	@ 0x6a
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	3328      	adds	r3, #40	@ 0x28
 8005c36:	885b      	ldrh	r3, [r3, #2]
 8005c38:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8005c3a:	4699      	mov	r9, r3
                    taskDescriptors[taskIndex].taskName,
 8005c3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c40:	226a      	movs	r2, #106	@ 0x6a
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	3308      	adds	r3, #8
 8005c48:	4a9c      	ldr	r2, [pc, #624]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f103 0802 	add.w	r8, r3, #2
                    taskDescriptors[taskIndex].taskPriority,
 8005c50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c54:	4a99      	ldr	r2, [pc, #612]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005c56:	216a      	movs	r1, #106	@ 0x6a
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3306      	adds	r3, #6
 8005c60:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8005c62:	469a      	mov	sl, r3
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005c64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c68:	4a94      	ldr	r2, [pc, #592]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005c6a:	216a      	movs	r1, #106	@ 0x6a
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	4413      	add	r3, r2
 8005c72:	3308      	adds	r3, #8
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	b21b      	sxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da02      	bge.n	8005c84 <gos_kernelDump+0xb4>
 8005c7e:	4b90      	ldr	r3, [pc, #576]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c82:	e001      	b.n	8005c88 <gos_kernelDump+0xb8>
 8005c84:	4b8f      	ldr	r3, [pc, #572]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005c88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005c8c:	4a8b      	ldr	r2, [pc, #556]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005c8e:	216a      	movs	r1, #106	@ 0x6a
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	4413      	add	r3, r2
 8005c96:	3308      	adds	r3, #8
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
            (void_t) gos_shellDriverTransmitString(
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <gos_kernelDump+0xda>
 8005ca4:	4b86      	ldr	r3, [pc, #536]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ca8:	e001      	b.n	8005cae <gos_kernelDump+0xde>
 8005caa:	4b86      	ldr	r3, [pc, #536]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005cac:	63bb      	str	r3, [r7, #56]	@ 0x38
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005cae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005cb2:	4a82      	ldr	r2, [pc, #520]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005cb4:	216a      	movs	r1, #106	@ 0x6a
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
            (void_t) gos_shellDriverTransmitString(
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <gos_kernelDump+0x100>
 8005cca:	4b7d      	ldr	r3, [pc, #500]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cce:	e001      	b.n	8005cd4 <gos_kernelDump+0x104>
 8005cd0:	4b7c      	ldr	r3, [pc, #496]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005cd2:	637b      	str	r3, [r7, #52]	@ 0x34
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005cd4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005cd8:	4a78      	ldr	r2, [pc, #480]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005cda:	216a      	movs	r1, #106	@ 0x6a
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
            (void_t) gos_shellDriverTransmitString(
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <gos_kernelDump+0x126>
 8005cf0:	4b73      	ldr	r3, [pc, #460]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cf4:	e001      	b.n	8005cfa <gos_kernelDump+0x12a>
 8005cf6:	4b73      	ldr	r3, [pc, #460]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005cf8:	633b      	str	r3, [r7, #48]	@ 0x30
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005cfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005cfe:	4a6f      	ldr	r2, [pc, #444]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005d00:	216a      	movs	r1, #106	@ 0x6a
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	4413      	add	r3, r2
 8005d08:	3308      	adds	r3, #8
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            (void_t) gos_shellDriverTransmitString(
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <gos_kernelDump+0x14c>
 8005d16:	4b6a      	ldr	r3, [pc, #424]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d1a:	e001      	b.n	8005d20 <gos_kernelDump+0x150>
 8005d1c:	4b69      	ldr	r3, [pc, #420]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005d20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d24:	4a65      	ldr	r2, [pc, #404]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005d26:	216a      	movs	r1, #106	@ 0x6a
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3308      	adds	r3, #8
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
            (void_t) gos_shellDriverTransmitString(
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <gos_kernelDump+0x172>
 8005d3c:	4b60      	ldr	r3, [pc, #384]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d40:	e001      	b.n	8005d46 <gos_kernelDump+0x176>
 8005d42:	4b60      	ldr	r3, [pc, #384]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005d44:	62bb      	str	r3, [r7, #40]	@ 0x28
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005d46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005d4c:	216a      	movs	r1, #106	@ 0x6a
 8005d4e:	fb01 f303 	mul.w	r3, r1, r3
 8005d52:	4413      	add	r3, r2
 8005d54:	3308      	adds	r3, #8
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
            (void_t) gos_shellDriverTransmitString(
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <gos_kernelDump+0x198>
 8005d62:	4b57      	ldr	r3, [pc, #348]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d66:	e001      	b.n	8005d6c <gos_kernelDump+0x19c>
 8005d68:	4b56      	ldr	r3, [pc, #344]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005d6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d70:	4a52      	ldr	r2, [pc, #328]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005d72:	216a      	movs	r1, #106	@ 0x6a
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
            (void_t) gos_shellDriverTransmitString(
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <gos_kernelDump+0x1be>
 8005d88:	4b4d      	ldr	r3, [pc, #308]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005d8a:	623b      	str	r3, [r7, #32]
 8005d8c:	e001      	b.n	8005d92 <gos_kernelDump+0x1c2>
 8005d8e:	4b4d      	ldr	r3, [pc, #308]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005d90:	623b      	str	r3, [r7, #32]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005d92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d96:	4a49      	ldr	r2, [pc, #292]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005d98:	216a      	movs	r1, #106	@ 0x6a
 8005d9a:	fb01 f303 	mul.w	r3, r1, r3
 8005d9e:	4413      	add	r3, r2
 8005da0:	3308      	adds	r3, #8
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
            (void_t) gos_shellDriverTransmitString(
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <gos_kernelDump+0x1e4>
 8005dae:	4b44      	ldr	r3, [pc, #272]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e001      	b.n	8005db8 <gos_kernelDump+0x1e8>
 8005db4:	4b43      	ldr	r3, [pc, #268]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005db6:	61fb      	str	r3, [r7, #28]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005db8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005dbc:	493f      	ldr	r1, [pc, #252]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005dbe:	236a      	movs	r3, #106	@ 0x6a
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	440b      	add	r3, r1
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
            (void_t) gos_shellDriverTransmitString(
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <gos_kernelDump+0x20a>
 8005dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	e001      	b.n	8005dde <gos_kernelDump+0x20e>
 8005dda:	4b3a      	ldr	r3, [pc, #232]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005ddc:	61bb      	str	r3, [r7, #24]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005dde:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005de2:	4936      	ldr	r1, [pc, #216]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005de4:	236a      	movs	r3, #106	@ 0x6a
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	440b      	add	r3, r1
 8005dec:	3308      	adds	r3, #8
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f003 0320 	and.w	r3, r3, #32
            (void_t) gos_shellDriverTransmitString(
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <gos_kernelDump+0x230>
 8005dfa:	4b31      	ldr	r3, [pc, #196]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	e001      	b.n	8005e04 <gos_kernelDump+0x234>
 8005e00:	4b30      	ldr	r3, [pc, #192]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005e02:	617b      	str	r3, [r7, #20]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005e04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005e08:	492c      	ldr	r1, [pc, #176]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005e0a:	236a      	movs	r3, #106	@ 0x6a
 8005e0c:	fb02 f303 	mul.w	r3, r2, r3
 8005e10:	440b      	add	r3, r1
 8005e12:	3308      	adds	r3, #8
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f003 0310 	and.w	r3, r3, #16
            (void_t) gos_shellDriverTransmitString(
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <gos_kernelDump+0x256>
 8005e20:	4b27      	ldr	r3, [pc, #156]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	e001      	b.n	8005e2a <gos_kernelDump+0x25a>
 8005e26:	4b27      	ldr	r3, [pc, #156]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005e28:	613b      	str	r3, [r7, #16]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005e2a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005e2e:	4923      	ldr	r1, [pc, #140]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005e30:	236a      	movs	r3, #106	@ 0x6a
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	440b      	add	r3, r1
 8005e38:	3308      	adds	r3, #8
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f003 0308 	and.w	r3, r3, #8
            (void_t) gos_shellDriverTransmitString(
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <gos_kernelDump+0x27c>
 8005e46:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	e001      	b.n	8005e50 <gos_kernelDump+0x280>
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005e4e:	60fb      	str	r3, [r7, #12]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005e50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005e54:	4919      	ldr	r1, [pc, #100]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005e56:	236a      	movs	r3, #106	@ 0x6a
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
 8005e5c:	440b      	add	r3, r1
 8005e5e:	3308      	adds	r3, #8
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f003 0304 	and.w	r3, r3, #4
            (void_t) gos_shellDriverTransmitString(
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <gos_kernelDump+0x2a2>
 8005e6c:	4b14      	ldr	r3, [pc, #80]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	e001      	b.n	8005e76 <gos_kernelDump+0x2a6>
 8005e72:	4b14      	ldr	r3, [pc, #80]	@ (8005ec4 <gos_kernelDump+0x2f4>)
 8005e74:	60bb      	str	r3, [r7, #8]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005e76:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005e7a:	4910      	ldr	r1, [pc, #64]	@ (8005ebc <gos_kernelDump+0x2ec>)
 8005e7c:	236a      	movs	r3, #106	@ 0x6a
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	440b      	add	r3, r1
 8005e84:	3308      	adds	r3, #8
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f003 0302 	and.w	r3, r3, #2
            (void_t) gos_shellDriverTransmitString(
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01a      	beq.n	8005ec8 <gos_kernelDump+0x2f8>
 8005e92:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec0 <gos_kernelDump+0x2f0>)
 8005e94:	607b      	str	r3, [r7, #4]
 8005e96:	e019      	b.n	8005ecc <gos_kernelDump+0x2fc>
 8005e98:	0800cba4 	.word	0x0800cba4
 8005e9c:	0800cbb4 	.word	0x0800cbb4
 8005ea0:	0800cc50 	.word	0x0800cc50
 8005ea4:	0800cc58 	.word	0x0800cc58
 8005ea8:	0800cc60 	.word	0x0800cc60
 8005eac:	0800cc10 	.word	0x0800cc10
 8005eb0:	0800cc18 	.word	0x0800cc18
 8005eb4:	0800cc20 	.word	0x0800cc20
 8005eb8:	0800cc24 	.word	0x0800cc24
 8005ebc:	200001a8 	.word	0x200001a8
 8005ec0:	0800cc6c 	.word	0x0800cc6c
 8005ec4:	0800cc74 	.word	0x0800cc74
 8005ec8:	4b7d      	ldr	r3, [pc, #500]	@ (80060c0 <gos_kernelDump+0x4f0>)
 8005eca:	607b      	str	r3, [r7, #4]
                    TO_BINARY((u16_t)taskDescriptors[taskIndex].taskPrivilegeLevel),
 8005ecc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005ed0:	497c      	ldr	r1, [pc, #496]	@ (80060c4 <gos_kernelDump+0x4f4>)
 8005ed2:	236a      	movs	r3, #106	@ 0x6a
 8005ed4:	fb02 f303 	mul.w	r3, r2, r3
 8005ed8:	440b      	add	r3, r1
 8005eda:	3308      	adds	r3, #8
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f003 0301 	and.w	r3, r3, #1
            (void_t) gos_shellDriverTransmitString(
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <gos_kernelDump+0x31c>
 8005ee8:	4d77      	ldr	r5, [pc, #476]	@ (80060c8 <gos_kernelDump+0x4f8>)
 8005eea:	e000      	b.n	8005eee <gos_kernelDump+0x31e>
 8005eec:	4d74      	ldr	r5, [pc, #464]	@ (80060c0 <gos_kernelDump+0x4f0>)
                    taskDescriptors[taskIndex].taskCpuUsage / 100,
 8005eee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005ef2:	4974      	ldr	r1, [pc, #464]	@ (80060c4 <gos_kernelDump+0x4f4>)
 8005ef4:	236a      	movs	r3, #106	@ 0x6a
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	440b      	add	r3, r1
 8005efc:	3360      	adds	r3, #96	@ 0x60
 8005efe:	885b      	ldrh	r3, [r3, #2]
 8005f00:	b29a      	uxth	r2, r3
            (void_t) gos_shellDriverTransmitString(
 8005f02:	4b72      	ldr	r3, [pc, #456]	@ (80060cc <gos_kernelDump+0x4fc>)
 8005f04:	fba3 2302 	umull	r2, r3, r3, r2
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	461e      	mov	r6, r3
                    taskDescriptors[taskIndex].taskCpuUsage % 100,
 8005f0e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005f12:	496c      	ldr	r1, [pc, #432]	@ (80060c4 <gos_kernelDump+0x4f4>)
 8005f14:	236a      	movs	r3, #106	@ 0x6a
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3360      	adds	r3, #96	@ 0x60
 8005f1e:	885b      	ldrh	r3, [r3, #2]
 8005f20:	b299      	uxth	r1, r3
            (void_t) gos_shellDriverTransmitString(
 8005f22:	4b6a      	ldr	r3, [pc, #424]	@ (80060cc <gos_kernelDump+0x4fc>)
 8005f24:	fba3 2301 	umull	r2, r3, r3, r1
 8005f28:	095a      	lsrs	r2, r3, #5
 8005f2a:	2364      	movs	r3, #100	@ 0x64
 8005f2c:	fb02 f303 	mul.w	r3, r2, r3
 8005f30:	1acb      	subs	r3, r1, r3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	461c      	mov	r4, r3
 8005f36:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8005f3a:	4962      	ldr	r1, [pc, #392]	@ (80060c4 <gos_kernelDump+0x4f4>)
 8005f3c:	236a      	movs	r3, #106	@ 0x6a
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	440b      	add	r3, r1
 8005f44:	3304      	adds	r3, #4
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fc25 	bl	8006798 <gos_kernelGetTaskStateString>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	9312      	str	r3, [sp, #72]	@ 0x48
 8005f52:	9411      	str	r4, [sp, #68]	@ 0x44
 8005f54:	9610      	str	r6, [sp, #64]	@ 0x40
 8005f56:	950f      	str	r5, [sp, #60]	@ 0x3c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	9308      	str	r3, [sp, #32]
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	9307      	str	r3, [sp, #28]
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	9306      	str	r3, [sp, #24]
 8005f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7e:	9305      	str	r3, [sp, #20]
 8005f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f82:	9304      	str	r3, [sp, #16]
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	9303      	str	r3, [sp, #12]
 8005f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8a:	9302      	str	r3, [sp, #8]
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	4653      	mov	r3, sl
 8005f96:	4642      	mov	r2, r8
 8005f98:	4649      	mov	r1, r9
 8005f9a:	484d      	ldr	r0, [pc, #308]	@ (80060d0 <gos_kernelDump+0x500>)
 8005f9c:	f005 ff04 	bl	800bda8 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8005fa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005faa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005fae:	2b2f      	cmp	r3, #47	@ 0x2f
 8005fb0:	f67f ae2e 	bls.w	8005c10 <gos_kernelDump+0x40>
 8005fb4:	e000      	b.n	8005fb8 <gos_kernelDump+0x3e8>
            break;
 8005fb6:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(TASK_DUMP_SEPARATOR"\n");
 8005fb8:	4846      	ldr	r0, [pc, #280]	@ (80060d4 <gos_kernelDump+0x504>)
 8005fba:	f005 fef5 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("CPU max loads:\r\n");
 8005fbe:	4846      	ldr	r0, [pc, #280]	@ (80060d8 <gos_kernelDump+0x508>)
 8005fc0:	f005 fef2 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8005fc4:	4845      	ldr	r0, [pc, #276]	@ (80060dc <gos_kernelDump+0x50c>)
 8005fc6:	f005 feef 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 8005fca:	4b45      	ldr	r3, [pc, #276]	@ (80060e0 <gos_kernelDump+0x510>)
 8005fcc:	4a45      	ldr	r2, [pc, #276]	@ (80060e4 <gos_kernelDump+0x514>)
 8005fce:	4946      	ldr	r1, [pc, #280]	@ (80060e8 <gos_kernelDump+0x518>)
 8005fd0:	4846      	ldr	r0, [pc, #280]	@ (80060ec <gos_kernelDump+0x51c>)
 8005fd2:	f005 fee9 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR);
 8005fd6:	4841      	ldr	r0, [pc, #260]	@ (80060dc <gos_kernelDump+0x50c>)
 8005fd8:	f005 fee6 	bl	800bda8 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005fe2:	e04c      	b.n	800607e <gos_kernelDump+0x4ae>
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8005fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005fe8:	4a36      	ldr	r2, [pc, #216]	@ (80060c4 <gos_kernelDump+0x4f4>)
 8005fea:	216a      	movs	r1, #106	@ 0x6a
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d047      	beq.n	8006088 <gos_kernelDump+0x4b8>
                    taskDescriptors[taskIndex].taskId,
 8005ff8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ffc:	4a31      	ldr	r2, [pc, #196]	@ (80060c4 <gos_kernelDump+0x4f4>)
 8005ffe:	216a      	movs	r1, #106	@ 0x6a
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	4413      	add	r3, r2
 8006006:	3328      	adds	r3, #40	@ 0x28
 8006008:	885b      	ldrh	r3, [r3, #2]
 800600a:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800600c:	461c      	mov	r4, r3
                    taskDescriptors[taskIndex].taskName,
 800600e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006012:	226a      	movs	r2, #106	@ 0x6a
 8006014:	fb02 f303 	mul.w	r3, r2, r3
 8006018:	3308      	adds	r3, #8
 800601a:	4a2a      	ldr	r2, [pc, #168]	@ (80060c4 <gos_kernelDump+0x4f4>)
 800601c:	4413      	add	r3, r2
 800601e:	1c99      	adds	r1, r3, #2
                    taskDescriptors[taskIndex].taskCpuUsageMax / 100,
 8006020:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006024:	4a27      	ldr	r2, [pc, #156]	@ (80060c4 <gos_kernelDump+0x4f4>)
 8006026:	206a      	movs	r0, #106	@ 0x6a
 8006028:	fb00 f303 	mul.w	r3, r0, r3
 800602c:	4413      	add	r3, r2
 800602e:	3360      	adds	r3, #96	@ 0x60
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006034:	4a25      	ldr	r2, [pc, #148]	@ (80060cc <gos_kernelDump+0x4fc>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	b29b      	uxth	r3, r3
 800603e:	461d      	mov	r5, r3
                    taskDescriptors[taskIndex].taskCpuUsageMax % 100
 8006040:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006044:	4a1f      	ldr	r2, [pc, #124]	@ (80060c4 <gos_kernelDump+0x4f4>)
 8006046:	206a      	movs	r0, #106	@ 0x6a
 8006048:	fb00 f303 	mul.w	r3, r0, r3
 800604c:	4413      	add	r3, r2
 800604e:	3360      	adds	r3, #96	@ 0x60
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006054:	4a1d      	ldr	r2, [pc, #116]	@ (80060cc <gos_kernelDump+0x4fc>)
 8006056:	fba2 0203 	umull	r0, r2, r2, r3
 800605a:	0952      	lsrs	r2, r2, #5
 800605c:	2064      	movs	r0, #100	@ 0x64
 800605e:	fb00 f202 	mul.w	r2, r0, r2
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	b29b      	uxth	r3, r3
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	462b      	mov	r3, r5
 800606a:	460a      	mov	r2, r1
 800606c:	4621      	mov	r1, r4
 800606e:	4820      	ldr	r0, [pc, #128]	@ (80060f0 <gos_kernelDump+0x520>)
 8006070:	f005 fe9a 	bl	800bda8 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006074:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006078:	3301      	adds	r3, #1
 800607a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800607e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006082:	2b2f      	cmp	r3, #47	@ 0x2f
 8006084:	d9ae      	bls.n	8005fe4 <gos_kernelDump+0x414>
 8006086:	e000      	b.n	800608a <gos_kernelDump+0x4ba>
            break;
 8006088:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(MAX_CPU_DUMP_SEPARATOR"\n");
 800608a:	481a      	ldr	r0, [pc, #104]	@ (80060f4 <gos_kernelDump+0x524>)
 800608c:	f005 fe8c 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString("Stack statistics:\r\n");
 8006090:	4819      	ldr	r0, [pc, #100]	@ (80060f8 <gos_kernelDump+0x528>)
 8006092:	f005 fe89 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 8006096:	4819      	ldr	r0, [pc, #100]	@ (80060fc <gos_kernelDump+0x52c>)
 8006098:	f005 fe86 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(
 800609c:	4b18      	ldr	r3, [pc, #96]	@ (8006100 <gos_kernelDump+0x530>)
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	4b18      	ldr	r3, [pc, #96]	@ (8006104 <gos_kernelDump+0x534>)
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	4b18      	ldr	r3, [pc, #96]	@ (8006108 <gos_kernelDump+0x538>)
 80060a6:	4a0f      	ldr	r2, [pc, #60]	@ (80060e4 <gos_kernelDump+0x514>)
 80060a8:	490f      	ldr	r1, [pc, #60]	@ (80060e8 <gos_kernelDump+0x518>)
 80060aa:	4818      	ldr	r0, [pc, #96]	@ (800610c <gos_kernelDump+0x53c>)
 80060ac:	f005 fe7c 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR);
 80060b0:	4812      	ldr	r0, [pc, #72]	@ (80060fc <gos_kernelDump+0x52c>)
 80060b2:	f005 fe79 	bl	800bda8 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80060b6:	2300      	movs	r3, #0
 80060b8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80060bc:	e0b1      	b.n	8006222 <gos_kernelDump+0x652>
 80060be:	bf00      	nop
 80060c0:	0800cc74 	.word	0x0800cc74
 80060c4:	200001a8 	.word	0x200001a8
 80060c8:	0800cc6c 	.word	0x0800cc6c
 80060cc:	51eb851f 	.word	0x51eb851f
 80060d0:	0800cc7c 	.word	0x0800cc7c
 80060d4:	0800ccd0 	.word	0x0800ccd0
 80060d8:	0800cd30 	.word	0x0800cd30
 80060dc:	0800cd44 	.word	0x0800cd44
 80060e0:	0800cd80 	.word	0x0800cd80
 80060e4:	0800cc18 	.word	0x0800cc18
 80060e8:	0800cc20 	.word	0x0800cc20
 80060ec:	0800cd8c 	.word	0x0800cd8c
 80060f0:	0800cda4 	.word	0x0800cda4
 80060f4:	0800cdc4 	.word	0x0800cdc4
 80060f8:	0800ce00 	.word	0x0800ce00
 80060fc:	0800ce14 	.word	0x0800ce14
 8006100:	0800ce94 	.word	0x0800ce94
 8006104:	0800cea0 	.word	0x0800cea0
 8006108:	0800ce68 	.word	0x0800ce68
 800610c:	0800ce70 	.word	0x0800ce70
        if (taskDescriptors[taskIndex].taskFunction == NULL)
 8006110:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006114:	4a4a      	ldr	r2, [pc, #296]	@ (8006240 <gos_kernelDump+0x670>)
 8006116:	216a      	movs	r1, #106	@ 0x6a
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	4413      	add	r3, r2
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8084 	beq.w	800622e <gos_kernelDump+0x65e>
                    taskDescriptors[taskIndex].taskId,
 8006126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800612a:	4a45      	ldr	r2, [pc, #276]	@ (8006240 <gos_kernelDump+0x670>)
 800612c:	216a      	movs	r1, #106	@ 0x6a
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	4413      	add	r3, r2
 8006134:	3328      	adds	r3, #40	@ 0x28
 8006136:	885b      	ldrh	r3, [r3, #2]
 8006138:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800613a:	469c      	mov	ip, r3
                    taskDescriptors[taskIndex].taskName,
 800613c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006140:	226a      	movs	r2, #106	@ 0x6a
 8006142:	fb02 f303 	mul.w	r3, r2, r3
 8006146:	3308      	adds	r3, #8
 8006148:	4a3d      	ldr	r2, [pc, #244]	@ (8006240 <gos_kernelDump+0x670>)
 800614a:	4413      	add	r3, r2
 800614c:	1c9c      	adds	r4, r3, #2
                    taskDescriptors[taskIndex].taskStackSize,
 800614e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006152:	4a3b      	ldr	r2, [pc, #236]	@ (8006240 <gos_kernelDump+0x670>)
 8006154:	216a      	movs	r1, #106	@ 0x6a
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	4413      	add	r3, r2
 800615c:	3348      	adds	r3, #72	@ 0x48
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006162:	469e      	mov	lr, r3
                    taskDescriptors[taskIndex].taskStackSizeMaxUsage,
 8006164:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006168:	4a35      	ldr	r2, [pc, #212]	@ (8006240 <gos_kernelDump+0x670>)
 800616a:	216a      	movs	r1, #106	@ 0x6a
 800616c:	fb01 f303 	mul.w	r3, r1, r3
 8006170:	4413      	add	r3, r2
 8006172:	3348      	adds	r3, #72	@ 0x48
 8006174:	885b      	ldrh	r3, [r3, #2]
 8006176:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 8006178:	461e      	mov	r6, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) / 100,
 800617a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800617e:	4a30      	ldr	r2, [pc, #192]	@ (8006240 <gos_kernelDump+0x670>)
 8006180:	216a      	movs	r1, #106	@ 0x6a
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	4413      	add	r3, r2
 8006188:	3348      	adds	r3, #72	@ 0x48
 800618a:	885b      	ldrh	r3, [r3, #2]
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	f242 7310 	movw	r3, #10000	@ 0x2710
 8006194:	fb02 f303 	mul.w	r3, r2, r3
 8006198:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800619c:	4928      	ldr	r1, [pc, #160]	@ (8006240 <gos_kernelDump+0x670>)
 800619e:	206a      	movs	r0, #106	@ 0x6a
 80061a0:	fb00 f202 	mul.w	r2, r0, r2
 80061a4:	440a      	add	r2, r1
 80061a6:	3248      	adds	r2, #72	@ 0x48
 80061a8:	8812      	ldrh	r2, [r2, #0]
 80061aa:	b292      	uxth	r2, r2
 80061ac:	fb93 f3f2 	sdiv	r3, r3, r2
            (void_t) gos_shellDriverTransmitString(
 80061b0:	4a24      	ldr	r2, [pc, #144]	@ (8006244 <gos_kernelDump+0x674>)
 80061b2:	fb82 1203 	smull	r1, r2, r2, r3
 80061b6:	1152      	asrs	r2, r2, #5
 80061b8:	17db      	asrs	r3, r3, #31
 80061ba:	1ad1      	subs	r1, r2, r3
                    ((10000 * taskDescriptors[taskIndex].taskStackSizeMaxUsage) / taskDescriptors[taskIndex].taskStackSize) % 100
 80061bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80061c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006240 <gos_kernelDump+0x670>)
 80061c2:	206a      	movs	r0, #106	@ 0x6a
 80061c4:	fb00 f303 	mul.w	r3, r0, r3
 80061c8:	4413      	add	r3, r2
 80061ca:	3348      	adds	r3, #72	@ 0x48
 80061cc:	885b      	ldrh	r3, [r3, #2]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80061de:	4818      	ldr	r0, [pc, #96]	@ (8006240 <gos_kernelDump+0x670>)
 80061e0:	256a      	movs	r5, #106	@ 0x6a
 80061e2:	fb05 f202 	mul.w	r2, r5, r2
 80061e6:	4402      	add	r2, r0
 80061e8:	3248      	adds	r2, #72	@ 0x48
 80061ea:	8812      	ldrh	r2, [r2, #0]
 80061ec:	b292      	uxth	r2, r2
 80061ee:	fb93 f2f2 	sdiv	r2, r3, r2
            (void_t) gos_shellDriverTransmitString(
 80061f2:	4b14      	ldr	r3, [pc, #80]	@ (8006244 <gos_kernelDump+0x674>)
 80061f4:	fb83 0302 	smull	r0, r3, r3, r2
 80061f8:	1158      	asrs	r0, r3, #5
 80061fa:	17d3      	asrs	r3, r2, #31
 80061fc:	1ac3      	subs	r3, r0, r3
 80061fe:	2064      	movs	r0, #100	@ 0x64
 8006200:	fb00 f303 	mul.w	r3, r0, r3
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	9302      	str	r3, [sp, #8]
 8006208:	9101      	str	r1, [sp, #4]
 800620a:	9600      	str	r6, [sp, #0]
 800620c:	4673      	mov	r3, lr
 800620e:	4622      	mov	r2, r4
 8006210:	4661      	mov	r1, ip
 8006212:	480d      	ldr	r0, [pc, #52]	@ (8006248 <gos_kernelDump+0x678>)
 8006214:	f005 fdc8 	bl	800bda8 <gos_shellDriverTransmitString>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006218:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800621c:	3301      	adds	r3, #1
 800621e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006222:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006226:	2b2f      	cmp	r3, #47	@ 0x2f
 8006228:	f67f af72 	bls.w	8006110 <gos_kernelDump+0x540>
 800622c:	e000      	b.n	8006230 <gos_kernelDump+0x660>
            break;
 800622e:	bf00      	nop
    (void_t) gos_shellDriverTransmitString(STACK_STATS_SEPARATOR"\n");
 8006230:	4806      	ldr	r0, [pc, #24]	@ (800624c <gos_kernelDump+0x67c>)
 8006232:	f005 fdb9 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8006236:	bf00      	nop
 8006238:	3748      	adds	r7, #72	@ 0x48
 800623a:	46bd      	mov	sp, r7
 800623c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006240:	200001a8 	.word	0x200001a8
 8006244:	51eb851f 	.word	0x51eb851f
 8006248:	0800ceb0 	.word	0x0800ceb0
 800624c:	0800cee4 	.word	0x0800cee4

08006250 <gos_kernelIsCallerIsr>:
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
    return inIsr > 0u ? GOS_TRUE : GOS_FALSE;
 8006254:	4b05      	ldr	r3, [pc, #20]	@ (800626c <gos_kernelIsCallerIsr+0x1c>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <gos_kernelIsCallerIsr+0x10>
 800625c:	2336      	movs	r3, #54	@ 0x36
 800625e:	e000      	b.n	8006262 <gos_kernelIsCallerIsr+0x12>
 8006260:	2349      	movs	r3, #73	@ 0x49
}
 8006262:	4618      	mov	r0, r3
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20001e9a 	.word	0x20001e9a

08006270 <SVC_Handler>:
    gos_ported_handleSVC();
 8006270:	f01e 0f04 	tst.w	lr, #4
 8006274:	bf0c      	ite	eq
 8006276:	f3ef 8008 	mrseq	r0, MSP
 800627a:	f3ef 8009 	mrsne	r0, PSP
 800627e:	4b06      	ldr	r3, [pc, #24]	@ (8006298 <SVC_Handler+0x28>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b36      	cmp	r3, #54	@ 0x36
 8006284:	d104      	bne.n	8006290 <SVC_Handler+0x20>
 8006286:	4b04      	ldr	r3, [pc, #16]	@ (8006298 <SVC_Handler+0x28>)
 8006288:	2249      	movs	r2, #73	@ 0x49
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	f000 fad8 	bl	8006840 <gos_kernelProcessorReset>
 8006290:	f000 b804 	b.w	800629c <gos_kernelSVC_HandlerMain>
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	200001a3 	.word	0x200001a3

0800629c <gos_kernelSVC_HandlerMain>:
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
    gos_ported_handleSVCMain(sp);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	3318      	adds	r3, #24
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3b02      	subs	r3, #2
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	72fb      	strb	r3, [r7, #11]
 80062b8:	7afb      	ldrb	r3, [r7, #11]
 80062ba:	2bff      	cmp	r3, #255	@ 0xff
 80062bc:	d105      	bne.n	80062ca <gos_kernelSVC_HandlerMain+0x2e>
 80062be:	4b06      	ldr	r3, [pc, #24]	@ (80062d8 <gos_kernelSVC_HandlerMain+0x3c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a05      	ldr	r2, [pc, #20]	@ (80062d8 <gos_kernelSVC_HandlerMain+0x3c>)
 80062c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c8:	6013      	str	r3, [r2, #0]
}
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <PendSV_Handler>:
    if (privilegedModeSetRequired == GOS_TRUE)
 80062dc:	4b10      	ldr	r3, [pc, #64]	@ (8006320 <PendSV_Handler+0x44>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b36      	cmp	r3, #54	@ 0x36
 80062e2:	d109      	bne.n	80062f8 <PendSV_Handler+0x1c>
        GOS_ASM("MRS R0, CONTROL");
 80062e4:	f3ef 8014 	mrs	r0, CONTROL
        GOS_ASM("BIC R0, R0, #1");
 80062e8:	f020 0001 	bic.w	r0, r0, #1
        GOS_ASM("MSR CONTROL, R0");
 80062ec:	f380 8814 	msr	CONTROL, r0
        privilegedModeSetRequired = GOS_FALSE;
 80062f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006320 <PendSV_Handler+0x44>)
 80062f2:	2249      	movs	r2, #73	@ 0x49
 80062f4:	701a      	strb	r2, [r3, #0]
}
 80062f6:	e011      	b.n	800631c <PendSV_Handler+0x40>
        gos_ported_doContextSwitch();
 80062f8:	b500      	push	{lr}
 80062fa:	f3ef 8009 	mrs	r0, PSP
 80062fe:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006302:	f000 f8cb 	bl	800649c <gos_kernelSaveCurrentPsp>
 8006306:	f000 f8e1 	bl	80064cc <gos_kernelSelectNextTask>
 800630a:	f000 f8b3 	bl	8006474 <gos_kernelGetCurrentPsp>
 800630e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006312:	f380 8809 	msr	PSP, r0
 8006316:	f85d eb04 	ldr.w	lr, [sp], #4
 800631a:	4770      	bx	lr
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	200001a4 	.word	0x200001a4

08006324 <gos_kernelReschedule>:
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	71fb      	strb	r3, [r7, #7]
    gos_ported_reschedule(privilege);
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	2b16      	cmp	r3, #22
 8006332:	d106      	bne.n	8006342 <gos_kernelReschedule+0x1e>
 8006334:	4b06      	ldr	r3, [pc, #24]	@ (8006350 <gos_kernelReschedule+0x2c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a05      	ldr	r2, [pc, #20]	@ (8006350 <gos_kernelReschedule+0x2c>)
 800633a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800633e:	6013      	str	r3, [r2, #0]
}
 8006340:	e000      	b.n	8006344 <gos_kernelReschedule+0x20>
    gos_ported_reschedule(privilege);
 8006342:	dfff      	svc	255	@ 0xff
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	e000ed04 	.word	0xe000ed04

08006354 <gos_kernelCheckTaskStack>:
 *          goes to system error.
 *
 * @return  -
 */
GOS_STATIC void_t gos_kernelCheckTaskStack (void_t)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af04      	add	r7, sp, #16
    /*
     * Local variables.
     */
    u32_t sp = 0u;
 800635a:	2300      	movs	r3, #0
 800635c:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    __asm volatile ("MRS %0, psp\n\t" : "=r" (sp));
 800635e:	f3ef 8309 	mrs	r3, PSP
 8006362:	607b      	str	r3, [r7, #4]
    if (sp != 0 &&
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d02b      	beq.n	80063c2 <gos_kernelCheckTaskStack+0x6e>
        sp < taskDescriptors[currentTaskIndex].taskStackOverflowThreshold)
 800636a:	4b3f      	ldr	r3, [pc, #252]	@ (8006468 <gos_kernelCheckTaskStack+0x114>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a3f      	ldr	r2, [pc, #252]	@ (800646c <gos_kernelCheckTaskStack+0x118>)
 8006370:	216a      	movs	r1, #106	@ 0x6a
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	3360      	adds	r3, #96	@ 0x60
 800637a:	f8d3 3006 	ldr.w	r3, [r3, #6]
    if (sp != 0 &&
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	d21e      	bcs.n	80063c2 <gos_kernelCheckTaskStack+0x6e>
        gos_errorHandler(
                GOS_ERROR_LEVEL_OS_FATAL,
                NULL,
                0,
                "Stack overflow detected in <%s>. \r\nPSP: 0x%x overflown by %d bytes.",
                taskDescriptors[currentTaskIndex].taskName,
 8006384:	4b38      	ldr	r3, [pc, #224]	@ (8006468 <gos_kernelCheckTaskStack+0x114>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	226a      	movs	r2, #106	@ 0x6a
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	3308      	adds	r3, #8
 8006390:	4a36      	ldr	r2, [pc, #216]	@ (800646c <gos_kernelCheckTaskStack+0x118>)
 8006392:	4413      	add	r3, r2
 8006394:	3302      	adds	r3, #2
                sp,
                (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - sp));
 8006396:	4a34      	ldr	r2, [pc, #208]	@ (8006468 <gos_kernelCheckTaskStack+0x114>)
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	4934      	ldr	r1, [pc, #208]	@ (800646c <gos_kernelCheckTaskStack+0x118>)
 800639c:	206a      	movs	r0, #106	@ 0x6a
 800639e:	fb00 f202 	mul.w	r2, r0, r2
 80063a2:	440a      	add	r2, r1
 80063a4:	3260      	adds	r2, #96	@ 0x60
 80063a6:	f8d2 1006 	ldr.w	r1, [r2, #6]
        gos_errorHandler(
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	1a8a      	subs	r2, r1, r2
 80063ae:	9202      	str	r2, [sp, #8]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	9201      	str	r2, [sp, #4]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	4b2e      	ldr	r3, [pc, #184]	@ (8006470 <gos_kernelCheckTaskStack+0x11c>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	2100      	movs	r1, #0
 80063bc:	2034      	movs	r0, #52	@ 0x34
 80063be:	f002 f92d 	bl	800861c <gos_errorHandler>
    else
    {
        // No stack overflow was detected.
    }

    if (sp != 0 &&
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d04a      	beq.n	800645e <gos_kernelCheckTaskStack+0x10a>
        (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + taskDescriptors[currentTaskIndex].taskStackSize - sp) >
 80063c8:	4b27      	ldr	r3, [pc, #156]	@ (8006468 <gos_kernelCheckTaskStack+0x114>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a27      	ldr	r2, [pc, #156]	@ (800646c <gos_kernelCheckTaskStack+0x118>)
 80063ce:	216a      	movs	r1, #106	@ 0x6a
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	4413      	add	r3, r2
 80063d6:	3360      	adds	r3, #96	@ 0x60
 80063d8:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80063dc:	4a22      	ldr	r2, [pc, #136]	@ (8006468 <gos_kernelCheckTaskStack+0x114>)
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	4922      	ldr	r1, [pc, #136]	@ (800646c <gos_kernelCheckTaskStack+0x118>)
 80063e2:	206a      	movs	r0, #106	@ 0x6a
 80063e4:	fb00 f202 	mul.w	r2, r0, r2
 80063e8:	440a      	add	r2, r1
 80063ea:	3248      	adds	r2, #72	@ 0x48
 80063ec:	8812      	ldrh	r2, [r2, #0]
 80063ee:	b292      	uxth	r2, r2
 80063f0:	441a      	add	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	3b40      	subs	r3, #64	@ 0x40
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage)
 80063f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006468 <gos_kernelCheckTaskStack+0x114>)
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	491b      	ldr	r1, [pc, #108]	@ (800646c <gos_kernelCheckTaskStack+0x118>)
 80063fe:	206a      	movs	r0, #106	@ 0x6a
 8006400:	fb00 f202 	mul.w	r2, r0, r2
 8006404:	440a      	add	r2, r1
 8006406:	3248      	adds	r2, #72	@ 0x48
 8006408:	8852      	ldrh	r2, [r2, #2]
 800640a:	b292      	uxth	r2, r2
    if (sp != 0 &&
 800640c:	4293      	cmp	r3, r2
 800640e:	d926      	bls.n	800645e <gos_kernelCheckTaskStack+0x10a>
    {
        taskDescriptors[currentTaskIndex].taskStackSizeMaxUsage = (taskDescriptors[currentTaskIndex].taskStackOverflowThreshold - 64 + 32 + taskDescriptors[currentTaskIndex].taskStackSize - sp);
 8006410:	4b15      	ldr	r3, [pc, #84]	@ (8006468 <gos_kernelCheckTaskStack+0x114>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a15      	ldr	r2, [pc, #84]	@ (800646c <gos_kernelCheckTaskStack+0x118>)
 8006416:	216a      	movs	r1, #106	@ 0x6a
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	4413      	add	r3, r2
 800641e:	3360      	adds	r3, #96	@ 0x60
 8006420:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8006424:	b29a      	uxth	r2, r3
 8006426:	4b10      	ldr	r3, [pc, #64]	@ (8006468 <gos_kernelCheckTaskStack+0x114>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4910      	ldr	r1, [pc, #64]	@ (800646c <gos_kernelCheckTaskStack+0x118>)
 800642c:	206a      	movs	r0, #106	@ 0x6a
 800642e:	fb00 f303 	mul.w	r3, r0, r3
 8006432:	440b      	add	r3, r1
 8006434:	3348      	adds	r3, #72	@ 0x48
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29b      	uxth	r3, r3
 800643a:	4413      	add	r3, r2
 800643c:	b29a      	uxth	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	b29b      	uxth	r3, r3
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	b29a      	uxth	r2, r3
 8006446:	4b08      	ldr	r3, [pc, #32]	@ (8006468 <gos_kernelCheckTaskStack+0x114>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3a20      	subs	r2, #32
 800644c:	b290      	uxth	r0, r2
 800644e:	4a07      	ldr	r2, [pc, #28]	@ (800646c <gos_kernelCheckTaskStack+0x118>)
 8006450:	216a      	movs	r1, #106	@ 0x6a
 8006452:	fb01 f303 	mul.w	r3, r1, r3
 8006456:	4413      	add	r3, r2
 8006458:	3348      	adds	r3, #72	@ 0x48
 800645a:	4602      	mov	r2, r0
 800645c:	805a      	strh	r2, [r3, #2]
    }
    else
    {
        // Max. value has not been exceeded.
    }
}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20001ea0 	.word	0x20001ea0
 800646c:	200001a8 	.word	0x200001a8
 8006470:	0800cf38 	.word	0x0800cf38

08006474 <gos_kernelGetCurrentPsp>:
 * @details  Returns the current PSP.
 *
 * @return   Current PSP value.
 */
GOS_UNUSED GOS_STATIC u32_t gos_kernelGetCurrentPsp (void_t)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    return taskDescriptors[currentTaskIndex].taskPsp;
 8006478:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <gos_kernelGetCurrentPsp+0x20>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a06      	ldr	r2, [pc, #24]	@ (8006498 <gos_kernelGetCurrentPsp+0x24>)
 800647e:	216a      	movs	r1, #106	@ 0x6a
 8006480:	fb01 f303 	mul.w	r3, r1, r3
 8006484:	4413      	add	r3, r2
 8006486:	3338      	adds	r3, #56	@ 0x38
 8006488:	685b      	ldr	r3, [r3, #4]
}
 800648a:	4618      	mov	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	20001ea0 	.word	0x20001ea0
 8006498:	200001a8 	.word	0x200001a8

0800649c <gos_kernelSaveCurrentPsp>:
 * @param   psp : Current PSP value.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSaveCurrentPsp (u32_t psp)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    taskDescriptors[currentTaskIndex].taskPsp = psp;
 80064a4:	4b07      	ldr	r3, [pc, #28]	@ (80064c4 <gos_kernelSaveCurrentPsp+0x28>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a07      	ldr	r2, [pc, #28]	@ (80064c8 <gos_kernelSaveCurrentPsp+0x2c>)
 80064aa:	216a      	movs	r1, #106	@ 0x6a
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	4413      	add	r3, r2
 80064b2:	3338      	adds	r3, #56	@ 0x38
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	605a      	str	r2, [r3, #4]
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	20001ea0 	.word	0x20001ea0
 80064c8:	200001a8 	.word	0x200001a8

080064cc <gos_kernelSelectNextTask>:
 *          statistics.
 *
 * @return    -
 */
GOS_UNUSED GOS_STATIC void_t gos_kernelSelectNextTask (void_t)
{
 80064cc:	b590      	push	{r4, r7, lr}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    u16_t          taskIndex      = 0u;
 80064d2:	2300      	movs	r3, #0
 80064d4:	81fb      	strh	r3, [r7, #14]
    gos_taskPrio_t lowestPrio     = GOS_TASK_IDLE_PRIO;
 80064d6:	23ff      	movs	r3, #255	@ 0xff
 80064d8:	737b      	strb	r3, [r7, #13]
    u16_t          nextTask       = 0u;
 80064da:	2300      	movs	r3, #0
 80064dc:	817b      	strh	r3, [r7, #10]
    u16_t          sysTimerActVal = 0u;
 80064de:	2300      	movs	r3, #0
 80064e0:	807b      	strh	r3, [r7, #2]
    u16_t          currentRunTime = 0u;
 80064e2:	2300      	movs	r3, #0
 80064e4:	813b      	strh	r3, [r7, #8]
    u32_t          elapsedTicks   = sysTicks - previousTick;
 80064e6:	4ba3      	ldr	r3, [pc, #652]	@ (8006774 <gos_kernelSelectNextTask+0x2a8>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4ba3      	ldr	r3, [pc, #652]	@ (8006778 <gos_kernelSelectNextTask+0x2ac>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	607b      	str	r3, [r7, #4]

    /*
     * Function code.
     */
    // Run stack check.
    gos_kernelCheckTaskStack();
 80064f2:	f7ff ff2f 	bl	8006354 <gos_kernelCheckTaskStack>

    if (schedDisableCntr == 0u)
 80064f6:	4ba1      	ldr	r3, [pc, #644]	@ (800677c <gos_kernelSelectNextTask+0x2b0>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 8136 	bne.w	800676c <gos_kernelSelectNextTask+0x2a0>
    {
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 8006500:	2300      	movs	r3, #0
 8006502:	81fb      	strh	r3, [r7, #14]
 8006504:	e0d0      	b.n	80066a8 <gos_kernelSelectNextTask+0x1dc>
        {
            // Wake-up sleeping tasks if their sleep time has elapsed.
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 8006506:	89fb      	ldrh	r3, [r7, #14]
 8006508:	4a9d      	ldr	r2, [pc, #628]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 800650a:	216a      	movs	r1, #106	@ 0x6a
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	4413      	add	r3, r2
 8006512:	3304      	adds	r3, #4
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b16      	cmp	r3, #22
 8006518:	d12c      	bne.n	8006574 <gos_kernelSelectNextTask+0xa8>
                (taskDescriptors[taskIndex].taskSleepTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskSleepTicks)
 800651a:	89fb      	ldrh	r3, [r7, #14]
 800651c:	4a98      	ldr	r2, [pc, #608]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 800651e:	216a      	movs	r1, #106	@ 0x6a
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	4413      	add	r3, r2
 8006526:	3330      	adds	r3, #48	@ 0x30
 8006528:	6819      	ldr	r1, [r3, #0]
 800652a:	89fb      	ldrh	r3, [r7, #14]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	4411      	add	r1, r2
 8006530:	4893      	ldr	r0, [pc, #588]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006532:	226a      	movs	r2, #106	@ 0x6a
 8006534:	fb03 f202 	mul.w	r2, r3, r2
 8006538:	4402      	add	r2, r0
 800653a:	3230      	adds	r2, #48	@ 0x30
 800653c:	6011      	str	r1, [r2, #0]
 800653e:	4a90      	ldr	r2, [pc, #576]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006540:	216a      	movs	r1, #106	@ 0x6a
 8006542:	fb01 f303 	mul.w	r3, r1, r3
 8006546:	4413      	add	r3, r2
 8006548:	3330      	adds	r3, #48	@ 0x30
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	89fb      	ldrh	r3, [r7, #14]
 800654e:	498c      	ldr	r1, [pc, #560]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006550:	206a      	movs	r0, #106	@ 0x6a
 8006552:	fb00 f303 	mul.w	r3, r0, r3
 8006556:	440b      	add	r3, r1
 8006558:	3328      	adds	r3, #40	@ 0x28
 800655a:	685b      	ldr	r3, [r3, #4]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING &&
 800655c:	429a      	cmp	r2, r3
 800655e:	d309      	bcc.n	8006574 <gos_kernelSelectNextTask+0xa8>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8006560:	89fb      	ldrh	r3, [r7, #14]
 8006562:	4a87      	ldr	r2, [pc, #540]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006564:	216a      	movs	r1, #106	@ 0x6a
 8006566:	fb01 f303 	mul.w	r3, r1, r3
 800656a:	4413      	add	r3, r2
 800656c:	3304      	adds	r3, #4
 800656e:	220a      	movs	r2, #10
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e040      	b.n	80065f6 <gos_kernelSelectNextTask+0x12a>
            }
            // Unblock tasks if their timeout time has elapsed.
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8006574:	89fb      	ldrh	r3, [r7, #14]
 8006576:	4a82      	ldr	r2, [pc, #520]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006578:	216a      	movs	r1, #106	@ 0x6a
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4413      	add	r3, r2
 8006580:	3304      	adds	r3, #4
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b19      	cmp	r3, #25
 8006586:	d136      	bne.n	80065f6 <gos_kernelSelectNextTask+0x12a>
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 8006588:	89fb      	ldrh	r3, [r7, #14]
 800658a:	4a7d      	ldr	r2, [pc, #500]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 800658c:	216a      	movs	r1, #106	@ 0x6a
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	4413      	add	r3, r2
 8006594:	3330      	adds	r3, #48	@ 0x30
 8006596:	685b      	ldr	r3, [r3, #4]
            else if ((taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED) &&
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d02b      	beq.n	80065f6 <gos_kernelSelectNextTask+0x12a>
                    ((taskDescriptors[taskIndex].taskBlockTickCounter += elapsedTicks) >= taskDescriptors[taskIndex].taskBlockTicks))
 800659e:	89fb      	ldrh	r3, [r7, #14]
 80065a0:	4a77      	ldr	r2, [pc, #476]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 80065a2:	216a      	movs	r1, #106	@ 0x6a
 80065a4:	fb01 f303 	mul.w	r3, r1, r3
 80065a8:	4413      	add	r3, r2
 80065aa:	3338      	adds	r3, #56	@ 0x38
 80065ac:	6819      	ldr	r1, [r3, #0]
 80065ae:	89fb      	ldrh	r3, [r7, #14]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4411      	add	r1, r2
 80065b4:	4872      	ldr	r0, [pc, #456]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 80065b6:	226a      	movs	r2, #106	@ 0x6a
 80065b8:	fb03 f202 	mul.w	r2, r3, r2
 80065bc:	4402      	add	r2, r0
 80065be:	3238      	adds	r2, #56	@ 0x38
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	4a6f      	ldr	r2, [pc, #444]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 80065c4:	216a      	movs	r1, #106	@ 0x6a
 80065c6:	fb01 f303 	mul.w	r3, r1, r3
 80065ca:	4413      	add	r3, r2
 80065cc:	3338      	adds	r3, #56	@ 0x38
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	89fb      	ldrh	r3, [r7, #14]
 80065d2:	496b      	ldr	r1, [pc, #428]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 80065d4:	206a      	movs	r0, #106	@ 0x6a
 80065d6:	fb00 f303 	mul.w	r3, r0, r3
 80065da:	440b      	add	r3, r1
 80065dc:	3330      	adds	r3, #48	@ 0x30
 80065de:	685b      	ldr	r3, [r3, #4]
                    (taskDescriptors[taskIndex].taskBlockTicks != GOS_TASK_MAX_BLOCK_TIME_MS) &&
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d308      	bcc.n	80065f6 <gos_kernelSelectNextTask+0x12a>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 80065e4:	89fb      	ldrh	r3, [r7, #14]
 80065e6:	4a66      	ldr	r2, [pc, #408]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 80065e8:	216a      	movs	r1, #106	@ 0x6a
 80065ea:	fb01 f303 	mul.w	r3, r1, r3
 80065ee:	4413      	add	r3, r2
 80065f0:	3304      	adds	r3, #4
 80065f2:	220a      	movs	r2, #10
 80065f4:	701a      	strb	r2, [r3, #0]
                // Nothing to do.
            }

            // Choose the highest priority task - that is not the current one, and is ready - to run.
            // Also, check if task has reached the CPU usage limit.
            if (taskIndex != currentTaskIndex &&
 80065f6:	89fa      	ldrh	r2, [r7, #14]
 80065f8:	4b62      	ldr	r3, [pc, #392]	@ (8006784 <gos_kernelSelectNextTask+0x2b8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d047      	beq.n	8006690 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 8006600:	89fb      	ldrh	r3, [r7, #14]
 8006602:	4a5f      	ldr	r2, [pc, #380]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006604:	216a      	movs	r1, #106	@ 0x6a
 8006606:	fb01 f303 	mul.w	r3, r1, r3
 800660a:	4413      	add	r3, r2
 800660c:	3304      	adds	r3, #4
 800660e:	781b      	ldrb	r3, [r3, #0]
            if (taskIndex != currentTaskIndex &&
 8006610:	2b0a      	cmp	r3, #10
 8006612:	d13d      	bne.n	8006690 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 8006614:	89fb      	ldrh	r3, [r7, #14]
 8006616:	4a5a      	ldr	r2, [pc, #360]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006618:	216a      	movs	r1, #106	@ 0x6a
 800661a:	fb01 f303 	mul.w	r3, r1, r3
 800661e:	4413      	add	r3, r2
 8006620:	3306      	adds	r3, #6
 8006622:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_READY &&
 8006624:	7b7a      	ldrb	r2, [r7, #13]
 8006626:	429a      	cmp	r2, r3
 8006628:	d932      	bls.n	8006690 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 800662a:	89fb      	ldrh	r3, [r7, #14]
 800662c:	4a54      	ldr	r2, [pc, #336]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 800662e:	216a      	movs	r1, #106	@ 0x6a
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	4413      	add	r3, r2
 8006636:	3360      	adds	r3, #96	@ 0x60
 8006638:	889b      	ldrh	r3, [r3, #4]
 800663a:	b29a      	uxth	r2, r3
 800663c:	89fb      	ldrh	r3, [r7, #14]
 800663e:	4950      	ldr	r1, [pc, #320]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006640:	206a      	movs	r0, #106	@ 0x6a
 8006642:	fb00 f303 	mul.w	r3, r0, r3
 8006646:	440b      	add	r3, r1
 8006648:	3358      	adds	r3, #88	@ 0x58
 800664a:	88db      	ldrh	r3, [r3, #6]
 800664c:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskPriority < lowestPrio &&
 800664e:	429a      	cmp	r2, r3
 8006650:	d21e      	bcs.n	8006690 <gos_kernelSelectNextTask+0x1c4>
                taskDescriptors[taskIndex].taskCpuUsage < taskDescriptors[taskIndex].taskCpuUsageLimit)
 8006652:	89fb      	ldrh	r3, [r7, #14]
 8006654:	4a4a      	ldr	r2, [pc, #296]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006656:	216a      	movs	r1, #106	@ 0x6a
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	4413      	add	r3, r2
 800665e:	3360      	adds	r3, #96	@ 0x60
 8006660:	885b      	ldrh	r3, [r3, #2]
 8006662:	b29a      	uxth	r2, r3
 8006664:	89fb      	ldrh	r3, [r7, #14]
 8006666:	4946      	ldr	r1, [pc, #280]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006668:	206a      	movs	r0, #106	@ 0x6a
 800666a:	fb00 f303 	mul.w	r3, r0, r3
 800666e:	440b      	add	r3, r1
 8006670:	3358      	adds	r3, #88	@ 0x58
 8006672:	88db      	ldrh	r3, [r3, #6]
 8006674:	b29b      	uxth	r3, r3
                taskDescriptors[taskIndex].taskCpuMonitoringUsage < taskDescriptors[taskIndex].taskCpuUsageLimit &&
 8006676:	429a      	cmp	r2, r3
 8006678:	d20a      	bcs.n	8006690 <gos_kernelSelectNextTask+0x1c4>
            {
                nextTask = taskIndex;
 800667a:	89fb      	ldrh	r3, [r7, #14]
 800667c:	817b      	strh	r3, [r7, #10]
                lowestPrio = taskDescriptors[taskIndex].taskPriority;
 800667e:	89fb      	ldrh	r3, [r7, #14]
 8006680:	4a3f      	ldr	r2, [pc, #252]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006682:	216a      	movs	r1, #106	@ 0x6a
 8006684:	fb01 f303 	mul.w	r3, r1, r3
 8006688:	4413      	add	r3, r2
 800668a:	3306      	adds	r3, #6
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	737b      	strb	r3, [r7, #13]
            else
            {
                // Nothing to do.
            }

            if (taskDescriptors[taskIndex].taskFunction == NULL)
 8006690:	89fb      	ldrh	r3, [r7, #14]
 8006692:	4a3b      	ldr	r2, [pc, #236]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 8006694:	216a      	movs	r1, #106	@ 0x6a
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	4413      	add	r3, r2
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d007      	beq.n	80066b2 <gos_kernelSelectNextTask+0x1e6>
        for (taskIndex = 0U; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80066a2:	89fb      	ldrh	r3, [r7, #14]
 80066a4:	3301      	adds	r3, #1
 80066a6:	81fb      	strh	r3, [r7, #14]
 80066a8:	89fb      	ldrh	r3, [r7, #14]
 80066aa:	2b2f      	cmp	r3, #47	@ 0x2f
 80066ac:	f67f af2b 	bls.w	8006506 <gos_kernelSelectNextTask+0x3a>
 80066b0:	e000      	b.n	80066b4 <gos_kernelSelectNextTask+0x1e8>
            {
                break;
 80066b2:	bf00      	nop
                // Continue.
            }
        }

        // If CPU limit exceeded, override scheduling, and select the idle task to run.
        if (gos_kernelGetCpuUsage() > cpuUseLimit)
 80066b4:	f7ff f8dc 	bl	8005870 <gos_kernelGetCpuUsage>
 80066b8:	4603      	mov	r3, r0
 80066ba:	461a      	mov	r2, r3
 80066bc:	4b32      	ldr	r3, [pc, #200]	@ (8006788 <gos_kernelSelectNextTask+0x2bc>)
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d901      	bls.n	80066c8 <gos_kernelSelectNextTask+0x1fc>
        {
            nextTask = 0u;
 80066c4:	2300      	movs	r3, #0
 80066c6:	817b      	strh	r3, [r7, #10]
        {
            // Nothing to do.
        }

        // If there was a task-swap, call the hook function.
        if (currentTaskIndex != nextTask)
 80066c8:	897a      	ldrh	r2, [r7, #10]
 80066ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006784 <gos_kernelSelectNextTask+0x2b8>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d02b      	beq.n	800672a <gos_kernelSelectNextTask+0x25e>
        {
            if (kernelSwapHookFunction != NULL)
 80066d2:	4b2e      	ldr	r3, [pc, #184]	@ (800678c <gos_kernelSelectNextTask+0x2c0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d016      	beq.n	8006708 <gos_kernelSelectNextTask+0x23c>
            {
                kernelSwapHookFunction(taskDescriptors[currentTaskIndex].taskId, taskDescriptors[nextTask].taskId);
 80066da:	4b2c      	ldr	r3, [pc, #176]	@ (800678c <gos_kernelSelectNextTask+0x2c0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a29      	ldr	r2, [pc, #164]	@ (8006784 <gos_kernelSelectNextTask+0x2b8>)
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	4927      	ldr	r1, [pc, #156]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 80066e4:	206a      	movs	r0, #106	@ 0x6a
 80066e6:	fb00 f202 	mul.w	r2, r0, r2
 80066ea:	440a      	add	r2, r1
 80066ec:	3228      	adds	r2, #40	@ 0x28
 80066ee:	8852      	ldrh	r2, [r2, #2]
 80066f0:	b290      	uxth	r0, r2
 80066f2:	897a      	ldrh	r2, [r7, #10]
 80066f4:	4922      	ldr	r1, [pc, #136]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 80066f6:	246a      	movs	r4, #106	@ 0x6a
 80066f8:	fb04 f202 	mul.w	r2, r4, r2
 80066fc:	440a      	add	r2, r1
 80066fe:	3228      	adds	r2, #40	@ 0x28
 8006700:	8852      	ldrh	r2, [r2, #2]
 8006702:	b292      	uxth	r2, r2
 8006704:	4611      	mov	r1, r2
 8006706:	4798      	blx	r3
            }
            else
            {
                // Nothing to do.
            }
            taskDescriptors[currentTaskIndex].taskCsCounter++;
 8006708:	4b1e      	ldr	r3, [pc, #120]	@ (8006784 <gos_kernelSelectNextTask+0x2b8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	491c      	ldr	r1, [pc, #112]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 800670e:	226a      	movs	r2, #106	@ 0x6a
 8006710:	fb03 f202 	mul.w	r2, r3, r2
 8006714:	440a      	add	r2, r1
 8006716:	3240      	adds	r2, #64	@ 0x40
 8006718:	6852      	ldr	r2, [r2, #4]
 800671a:	3201      	adds	r2, #1
 800671c:	4918      	ldr	r1, [pc, #96]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 800671e:	206a      	movs	r0, #106	@ 0x6a
 8006720:	fb00 f303 	mul.w	r3, r0, r3
 8006724:	440b      	add	r3, r1
 8006726:	3340      	adds	r3, #64	@ 0x40
 8006728:	605a      	str	r2, [r3, #4]
        {
            // Nothing to do.
        }

        // Calculate current task run-time.
        gos_timerDriverSysTimerGet(&sysTimerActVal);
 800672a:	1cbb      	adds	r3, r7, #2
 800672c:	4618      	mov	r0, r3
 800672e:	f005 fb97 	bl	800be60 <gos_timerDriverSysTimerGet>
        currentRunTime = sysTimerActVal - sysTimerValue;
 8006732:	887a      	ldrh	r2, [r7, #2]
 8006734:	4b16      	ldr	r3, [pc, #88]	@ (8006790 <gos_kernelSelectNextTask+0x2c4>)
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	813b      	strh	r3, [r7, #8]

        // Increase monitoring system time and current task runtime.
        (void_t) gos_runTimeAddMicroseconds(&monitoringTime, &taskDescriptors[currentTaskIndex].taskMonitoringRunTime, currentRunTime);
 800673c:	4b11      	ldr	r3, [pc, #68]	@ (8006784 <gos_kernelSelectNextTask+0x2b8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	226a      	movs	r2, #106	@ 0x6a
 8006742:	fb02 f303 	mul.w	r3, r2, r3
 8006746:	3350      	adds	r3, #80	@ 0x50
 8006748:	4a0d      	ldr	r2, [pc, #52]	@ (8006780 <gos_kernelSelectNextTask+0x2b4>)
 800674a:	4413      	add	r3, r2
 800674c:	3305      	adds	r3, #5
 800674e:	893a      	ldrh	r2, [r7, #8]
 8006750:	4619      	mov	r1, r3
 8006752:	4810      	ldr	r0, [pc, #64]	@ (8006794 <gos_kernelSelectNextTask+0x2c8>)
 8006754:	f004 fc54 	bl	800b000 <gos_runTimeAddMicroseconds>

        // Refresh system timer value.
        (void_t) gos_timerDriverSysTimerGet(&sysTimerValue);
 8006758:	480d      	ldr	r0, [pc, #52]	@ (8006790 <gos_kernelSelectNextTask+0x2c4>)
 800675a:	f005 fb81 	bl	800be60 <gos_timerDriverSysTimerGet>

        // Set current task.
        currentTaskIndex = nextTask;
 800675e:	897b      	ldrh	r3, [r7, #10]
 8006760:	4a08      	ldr	r2, [pc, #32]	@ (8006784 <gos_kernelSelectNextTask+0x2b8>)
 8006762:	6013      	str	r3, [r2, #0]

        // Update previous tick value.
        previousTick = sysTicks;
 8006764:	4b03      	ldr	r3, [pc, #12]	@ (8006774 <gos_kernelSelectNextTask+0x2a8>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a03      	ldr	r2, [pc, #12]	@ (8006778 <gos_kernelSelectNextTask+0x2ac>)
 800676a:	6013      	str	r3, [r2, #0]
    }
    else
    {
        // Nothing to do.
    }
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	bd90      	pop	{r4, r7, pc}
 8006774:	20001ea4 	.word	0x20001ea4
 8006778:	20001ec0 	.word	0x20001ec0
 800677c:	20001e99 	.word	0x20001e99
 8006780:	200001a8 	.word	0x200001a8
 8006784:	20001ea0 	.word	0x20001ea0
 8006788:	200001a0 	.word	0x200001a0
 800678c:	20001eb8 	.word	0x20001eb8
 8006790:	20001ea8 	.word	0x20001ea8
 8006794:	20001eac 	.word	0x20001eac

08006798 <gos_kernelGetTaskStateString>:
 * @param   taskState : The task state variable to be translated.
 *
 * @return  String with the task state.
 */
GOS_STATIC char_t* gos_kernelGetTaskStateString (gos_taskState_t taskState)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	4603      	mov	r3, r0
 80067a0:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    switch (taskState)
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	3b05      	subs	r3, #5
 80067a6:	2b14      	cmp	r3, #20
 80067a8:	d836      	bhi.n	8006818 <gos_kernelGetTaskStateString+0x80>
 80067aa:	a201      	add	r2, pc, #4	@ (adr r2, 80067b0 <gos_kernelGetTaskStateString+0x18>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	0800680d 	.word	0x0800680d
 80067b4:	08006819 	.word	0x08006819
 80067b8:	08006819 	.word	0x08006819
 80067bc:	08006819 	.word	0x08006819
 80067c0:	08006819 	.word	0x08006819
 80067c4:	08006805 	.word	0x08006805
 80067c8:	08006819 	.word	0x08006819
 80067cc:	08006819 	.word	0x08006819
 80067d0:	08006815 	.word	0x08006815
 80067d4:	08006819 	.word	0x08006819
 80067d8:	08006819 	.word	0x08006819
 80067dc:	08006819 	.word	0x08006819
 80067e0:	08006819 	.word	0x08006819
 80067e4:	08006819 	.word	0x08006819
 80067e8:	08006819 	.word	0x08006819
 80067ec:	08006819 	.word	0x08006819
 80067f0:	08006819 	.word	0x08006819
 80067f4:	08006809 	.word	0x08006809
 80067f8:	08006819 	.word	0x08006819
 80067fc:	08006819 	.word	0x08006819
 8006800:	08006811 	.word	0x08006811
    {
        case GOS_TASK_READY:
        {
            return TRACE_FG_GREEN_START"ready"TRACE_FORMAT_RESET;
 8006804:	4b08      	ldr	r3, [pc, #32]	@ (8006828 <gos_kernelGetTaskStateString+0x90>)
 8006806:	e008      	b.n	800681a <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SLEEPING:
        {
            return TRACE_FG_YELLOW_START"sleeping"TRACE_FORMAT_RESET;
 8006808:	4b08      	ldr	r3, [pc, #32]	@ (800682c <gos_kernelGetTaskStateString+0x94>)
 800680a:	e006      	b.n	800681a <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_SUSPENDED:
        {
            return TRACE_FG_MAGENTA_START"suspended"TRACE_FORMAT_RESET;
 800680c:	4b08      	ldr	r3, [pc, #32]	@ (8006830 <gos_kernelGetTaskStateString+0x98>)
 800680e:	e004      	b.n	800681a <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_BLOCKED:
        {
            return TRACE_FG_CYAN_START"blocked"TRACE_FORMAT_RESET;
 8006810:	4b08      	ldr	r3, [pc, #32]	@ (8006834 <gos_kernelGetTaskStateString+0x9c>)
 8006812:	e002      	b.n	800681a <gos_kernelGetTaskStateString+0x82>
        }break;
        case GOS_TASK_ZOMBIE:
        {
            return TRACE_FG_RED_START"zombie"TRACE_FORMAT_RESET;
 8006814:	4b08      	ldr	r3, [pc, #32]	@ (8006838 <gos_kernelGetTaskStateString+0xa0>)
 8006816:	e000      	b.n	800681a <gos_kernelGetTaskStateString+0x82>
        }
        default:
        {
            return "";
 8006818:	4b08      	ldr	r3, [pc, #32]	@ (800683c <gos_kernelGetTaskStateString+0xa4>)
        }
    }
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	0800cf7c 	.word	0x0800cf7c
 800682c:	0800cf8c 	.word	0x0800cf8c
 8006830:	0800cfa0 	.word	0x0800cfa0
 8006834:	0800cfb4 	.word	0x0800cfb4
 8006838:	0800cfc8 	.word	0x0800cfc8
 800683c:	0800cfd8 	.word	0x0800cfd8

08006840 <gos_kernelProcessorReset>:
 * @details Resets the processor.
 *
 * @return    -
 */
GOS_STATIC void_t gos_kernelProcessorReset (void_t)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    // Reset processor.
    gos_ported_procReset();
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <gos_kernelProcessorReset+0x20>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006850:	4903      	ldr	r1, [pc, #12]	@ (8006860 <gos_kernelProcessorReset+0x20>)
 8006852:	4b04      	ldr	r3, [pc, #16]	@ (8006864 <gos_kernelProcessorReset+0x24>)
 8006854:	4313      	orrs	r3, r2
 8006856:	600b      	str	r3, [r1, #0]
 8006858:	f3bf 8f4f 	dsb	sy

    // Wait for reset.
    for (;;)
    {
        GOS_NOP;
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <gos_kernelProcessorReset+0x1c>
 8006860:	e000ed0c 	.word	0xe000ed0c
 8006864:	05fa0004 	.word	0x05fa0004

08006868 <NMI_Handler>:
 */
/*
 * Function: NMI_Handler
 */
void_t NMI_Handler (void_t)
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <NMI_Handler+0x4>

08006870 <HardFault_Handler>:

/*
 * Function: HardFault_Handler
 */
void_t HardFault_Handler (void_t)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 8006874:	bf00      	nop
 8006876:	e7fd      	b.n	8006874 <HardFault_Handler+0x4>

08006878 <MemManage_Handler>:

/*
 * Function: MemManage_Handler
 */
void_t MemManage_Handler (void_t)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 800687c:	bf00      	nop
 800687e:	e7fd      	b.n	800687c <MemManage_Handler+0x4>

08006880 <BusFault_Handler>:

/*
 * Function: BusFault_Handler
 */
void_t BusFault_Handler (void_t)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        GOS_NOP;
 8006884:	bf00      	nop
 8006886:	e7fd      	b.n	8006884 <BusFault_Handler+0x4>

08006888 <UsageFault_Handler>:

/*
 * Function: UsageFault_Handler
 */
void_t UsageFault_Handler (void_t)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
     * Function code.
     */

    for (;;)
    {
        GOS_NOP;
 800688c:	bf00      	nop
 800688e:	e7fd      	b.n	800688c <UsageFault_Handler+0x4>

08006890 <gos_taskRegister>:

/*
 * Function: gos_taskRegister
 */
gos_result_t gos_taskRegister (gos_taskDescriptor_t* taskDescriptor, gos_tid_t* taskId)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskRegisterResult = GOS_SUCCESS;
 800689a:	2355      	movs	r3, #85	@ 0x55
 800689c:	75fb      	strb	r3, [r7, #23]
    u16_t        taskIndex          = 0u;
 800689e:	2300      	movs	r3, #0
 80068a0:	82bb      	strh	r3, [r7, #20]
    u32_t        taskStackOffset    = GLOBAL_STACK;
 80068a2:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80068a6:	613b      	str	r3, [r7, #16]
    u32_t*       psp                = NULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	60fb      	str	r3, [r7, #12]

    /*
     * Function code.
     */
    // Check descriptor structure.
    if (gos_taskCheckDescriptor(taskDescriptor) == GOS_ERROR)
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fd09 	bl	80082c4 <gos_taskCheckDescriptor>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2bae      	cmp	r3, #174	@ 0xae
 80068b6:	d102      	bne.n	80068be <gos_taskRegister+0x2e>
    {
        taskRegisterResult = GOS_ERROR;
 80068b8:	23ae      	movs	r3, #174	@ 0xae
 80068ba:	75fb      	strb	r3, [r7, #23]
 80068bc:	e173      	b.n	8006ba6 <gos_taskRegister+0x316>
    }
    else
    {
        taskRegisterResult = GOS_ERROR;
 80068be:	23ae      	movs	r3, #174	@ 0xae
 80068c0:	75fb      	strb	r3, [r7, #23]

        // Find empty slot.
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80068c2:	2300      	movs	r3, #0
 80068c4:	82bb      	strh	r3, [r7, #20]
 80068c6:	e01a      	b.n	80068fe <gos_taskRegister+0x6e>
        {
            if (taskDescriptors[taskIndex].taskFunction == NULL)
 80068c8:	8abb      	ldrh	r3, [r7, #20]
 80068ca:	4a89      	ldr	r2, [pc, #548]	@ (8006af0 <gos_taskRegister+0x260>)
 80068cc:	216a      	movs	r1, #106	@ 0x6a
 80068ce:	fb01 f303 	mul.w	r3, r1, r3
 80068d2:	4413      	add	r3, r2
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <gos_taskRegister+0x50>
            {
                taskRegisterResult = GOS_SUCCESS;
 80068da:	2355      	movs	r3, #85	@ 0x55
 80068dc:	75fb      	strb	r3, [r7, #23]
                break;
 80068de:	e011      	b.n	8006904 <gos_taskRegister+0x74>
            }
            else
            {
                // Continue.
            }
            taskStackOffset += taskDescriptors[taskIndex].taskStackSize;
 80068e0:	8abb      	ldrh	r3, [r7, #20]
 80068e2:	4a83      	ldr	r2, [pc, #524]	@ (8006af0 <gos_taskRegister+0x260>)
 80068e4:	216a      	movs	r1, #106	@ 0x6a
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	4413      	add	r3, r2
 80068ec:	3348      	adds	r3, #72	@ 0x48
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	4413      	add	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
        for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 80068f8:	8abb      	ldrh	r3, [r7, #20]
 80068fa:	3301      	adds	r3, #1
 80068fc:	82bb      	strh	r3, [r7, #20]
 80068fe:	8abb      	ldrh	r3, [r7, #20]
 8006900:	2b2f      	cmp	r3, #47	@ 0x2f
 8006902:	d9e1      	bls.n	80068c8 <gos_taskRegister+0x38>
        }
        // Check if empty slot was found.
        if (taskIndex >= CFG_TASK_MAX_NUMBER)
 8006904:	8abb      	ldrh	r3, [r7, #20]
 8006906:	2b2f      	cmp	r3, #47	@ 0x2f
 8006908:	d902      	bls.n	8006910 <gos_taskRegister+0x80>
        {
            taskRegisterResult = GOS_ERROR;
 800690a:	23ae      	movs	r3, #174	@ 0xae
 800690c:	75fb      	strb	r3, [r7, #23]
 800690e:	e14a      	b.n	8006ba6 <gos_taskRegister+0x316>
        }
        else
        {
            // Calculate new PSP.
            psp = (u32_t*)(MAIN_STACK - taskStackOffset);
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
 8006916:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800691a:	60fb      	str	r3, [r7, #12]

            // Fill dummy stack frame.
            *(--psp) = 0x01000000u; // Dummy xPSR, just enable Thumb State bit;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3b04      	subs	r3, #4
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006928:	601a      	str	r2, [r3, #0]
            *(--psp) = (u32_t)taskDescriptor->taskFunction; // PC
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3b04      	subs	r3, #4
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	601a      	str	r2, [r3, #0]
            *(--psp) = 0xFFFFFFFDu; // LR with EXC_RETURN to return to Thread using PSP
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3b04      	subs	r3, #4
 800693c:	60fb      	str	r3, [r7, #12]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f06f 0202 	mvn.w	r2, #2
 8006944:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x12121212u; // Dummy R12
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3b04      	subs	r3, #4
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 8006952:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x03030303u; // Dummy R3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3b04      	subs	r3, #4
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 8006960:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x02020202u; // Dummy R2
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3b04      	subs	r3, #4
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800696e:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x01010101u; // Dummy R1
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3b04      	subs	r3, #4
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800697c:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x00000000u; // Dummy R0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3b04      	subs	r3, #4
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x11111111u; // Dummy R11
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3b04      	subs	r3, #4
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8006996:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x10101010u; // Dummy R10
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3b04      	subs	r3, #4
 800699c:	60fb      	str	r3, [r7, #12]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 80069a4:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x09090909u; // Dummy R9
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3b04      	subs	r3, #4
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 80069b2:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x08080808u; // Dummy R8
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3b04      	subs	r3, #4
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 80069c0:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x07070707u; // Dummy R7
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3b04      	subs	r3, #4
 80069c6:	60fb      	str	r3, [r7, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 80069ce:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x06060606u; // Dummy R6
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3b04      	subs	r3, #4
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 80069dc:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x05050505u; // Dummy R5
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3b04      	subs	r3, #4
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 80069ea:	601a      	str	r2, [r3, #0]
            *(--psp) = 0x04040404u; // Dummy R4
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3b04      	subs	r3, #4
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 80069f8:	601a      	str	r2, [r3, #0]

            // Save PSP.
            taskDescriptors[taskIndex].taskPsp      = (u32_t)psp;
 80069fa:	8abb      	ldrh	r3, [r7, #20]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	493c      	ldr	r1, [pc, #240]	@ (8006af0 <gos_taskRegister+0x260>)
 8006a00:	206a      	movs	r0, #106	@ 0x6a
 8006a02:	fb00 f303 	mul.w	r3, r0, r3
 8006a06:	440b      	add	r3, r1
 8006a08:	333c      	adds	r3, #60	@ 0x3c
 8006a0a:	601a      	str	r2, [r3, #0]

            // Initial state.
            taskDescriptors[taskIndex].taskState            = GOS_TASK_READY;
 8006a0c:	8abb      	ldrh	r3, [r7, #20]
 8006a0e:	4a38      	ldr	r2, [pc, #224]	@ (8006af0 <gos_taskRegister+0x260>)
 8006a10:	216a      	movs	r1, #106	@ 0x6a
 8006a12:	fb01 f303 	mul.w	r3, r1, r3
 8006a16:	4413      	add	r3, r2
 8006a18:	3304      	adds	r3, #4
 8006a1a:	220a      	movs	r2, #10
 8006a1c:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskFunction         = taskDescriptor->taskFunction;
 8006a1e:	8abb      	ldrh	r3, [r7, #20]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	4932      	ldr	r1, [pc, #200]	@ (8006af0 <gos_taskRegister+0x260>)
 8006a26:	206a      	movs	r0, #106	@ 0x6a
 8006a28:	fb00 f303 	mul.w	r3, r0, r3
 8006a2c:	440b      	add	r3, r1
 8006a2e:	601a      	str	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPriority         = taskDescriptor->taskPriority;
 8006a30:	8abb      	ldrh	r3, [r7, #20]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	7990      	ldrb	r0, [r2, #6]
 8006a36:	4a2e      	ldr	r2, [pc, #184]	@ (8006af0 <gos_taskRegister+0x260>)
 8006a38:	216a      	movs	r1, #106	@ 0x6a
 8006a3a:	fb01 f303 	mul.w	r3, r1, r3
 8006a3e:	4413      	add	r3, r2
 8006a40:	3306      	adds	r3, #6
 8006a42:	4602      	mov	r2, r0
 8006a44:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskOriginalPriority = taskDescriptor->taskPriority;
 8006a46:	8abb      	ldrh	r3, [r7, #20]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	7990      	ldrb	r0, [r2, #6]
 8006a4c:	4a28      	ldr	r2, [pc, #160]	@ (8006af0 <gos_taskRegister+0x260>)
 8006a4e:	216a      	movs	r1, #106	@ 0x6a
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	4413      	add	r3, r2
 8006a56:	3307      	adds	r3, #7
 8006a58:	4602      	mov	r2, r0
 8006a5a:	701a      	strb	r2, [r3, #0]
            taskDescriptors[taskIndex].taskStackSize        = taskDescriptor->taskStackSize;
 8006a5c:	8abb      	ldrh	r3, [r7, #20]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	f8b2 2048 	ldrh.w	r2, [r2, #72]	@ 0x48
 8006a64:	b290      	uxth	r0, r2
 8006a66:	4a22      	ldr	r2, [pc, #136]	@ (8006af0 <gos_taskRegister+0x260>)
 8006a68:	216a      	movs	r1, #106	@ 0x6a
 8006a6a:	fb01 f303 	mul.w	r3, r1, r3
 8006a6e:	4413      	add	r3, r2
 8006a70:	3348      	adds	r3, #72	@ 0x48
 8006a72:	4602      	mov	r2, r0
 8006a74:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskId               = (GOS_DEFAULT_TASK_ID + taskIndex);
 8006a76:	8abb      	ldrh	r3, [r7, #20]
 8006a78:	8aba      	ldrh	r2, [r7, #20]
 8006a7a:	f5a2 4200 	sub.w	r2, r2, #32768	@ 0x8000
 8006a7e:	b290      	uxth	r0, r2
 8006a80:	4a1b      	ldr	r2, [pc, #108]	@ (8006af0 <gos_taskRegister+0x260>)
 8006a82:	216a      	movs	r1, #106	@ 0x6a
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	332a      	adds	r3, #42	@ 0x2a
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	801a      	strh	r2, [r3, #0]
            taskDescriptors[taskIndex].taskPrivilegeLevel   = taskDescriptor->taskPrivilegeLevel;
 8006a90:	8abb      	ldrh	r3, [r7, #20]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	8912      	ldrh	r2, [r2, #8]
 8006a96:	b290      	uxth	r0, r2
 8006a98:	4a15      	ldr	r2, [pc, #84]	@ (8006af0 <gos_taskRegister+0x260>)
 8006a9a:	216a      	movs	r1, #106	@ 0x6a
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	801a      	strh	r2, [r3, #0]

            if (taskDescriptor->taskCpuUsageLimit == 0u)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10a      	bne.n	8006aca <gos_taskRegister+0x23a>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 8006ab4:	8abb      	ldrh	r3, [r7, #20]
 8006ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8006af0 <gos_taskRegister+0x260>)
 8006ab8:	216a      	movs	r1, #106	@ 0x6a
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	4413      	add	r3, r2
 8006ac0:	335e      	adds	r3, #94	@ 0x5e
 8006ac2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e021      	b.n	8006b0e <gos_taskRegister+0x27e>
            }
            else if (taskDescriptor->taskCpuUsageLimit > 10000u)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d90c      	bls.n	8006af4 <gos_taskRegister+0x264>
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = 10000u;
 8006ada:	8abb      	ldrh	r3, [r7, #20]
 8006adc:	4a04      	ldr	r2, [pc, #16]	@ (8006af0 <gos_taskRegister+0x260>)
 8006ade:	216a      	movs	r1, #106	@ 0x6a
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	335e      	adds	r3, #94	@ 0x5e
 8006ae8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006aec:	801a      	strh	r2, [r3, #0]
 8006aee:	e00e      	b.n	8006b0e <gos_taskRegister+0x27e>
 8006af0:	200001a8 	.word	0x200001a8
            }
            else
            {
                taskDescriptors[taskIndex].taskCpuUsageLimit = taskDescriptor->taskCpuUsageLimit;
 8006af4:	8abb      	ldrh	r3, [r7, #20]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8006afc:	b290      	uxth	r0, r2
 8006afe:	4a2c      	ldr	r2, [pc, #176]	@ (8006bb0 <gos_taskRegister+0x320>)
 8006b00:	216a      	movs	r1, #106	@ 0x6a
 8006b02:	fb01 f303 	mul.w	r3, r1, r3
 8006b06:	4413      	add	r3, r2
 8006b08:	335e      	adds	r3, #94	@ 0x5e
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	801a      	strh	r2, [r3, #0]
            }

            // Copy task name.
            if (taskDescriptor->taskName != NULL &&
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	330a      	adds	r3, #10
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d015      	beq.n	8006b42 <gos_taskRegister+0x2b2>
                strlen(taskDescriptor->taskName) <= CFG_TASK_MAX_NAME_LENGTH)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	330a      	adds	r3, #10
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7f9 fb6a 	bl	80001f4 <strlen>
 8006b20:	4603      	mov	r3, r0
            if (taskDescriptor->taskName != NULL &&
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d80d      	bhi.n	8006b42 <gos_taskRegister+0x2b2>
            {
                (void_t) strcpy(taskDescriptors[taskIndex].taskName, taskDescriptor->taskName);
 8006b26:	8abb      	ldrh	r3, [r7, #20]
 8006b28:	226a      	movs	r2, #106	@ 0x6a
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
 8006b2e:	3308      	adds	r3, #8
 8006b30:	4a1f      	ldr	r2, [pc, #124]	@ (8006bb0 <gos_taskRegister+0x320>)
 8006b32:	4413      	add	r3, r2
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	330a      	adds	r3, #10
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f005 fa9f 	bl	800c080 <strcpy>
            {
                // Task name is not requried.
            }

            // Set task ID.
            taskDescriptor->taskId = taskDescriptors[taskIndex].taskId;
 8006b42:	8abb      	ldrh	r3, [r7, #20]
 8006b44:	4a1a      	ldr	r2, [pc, #104]	@ (8006bb0 <gos_taskRegister+0x320>)
 8006b46:	216a      	movs	r1, #106	@ 0x6a
 8006b48:	fb01 f303 	mul.w	r3, r1, r3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	332a      	adds	r3, #42	@ 0x2a
 8006b50:	881a      	ldrh	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
            if (taskId != NULL)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d009      	beq.n	8006b70 <gos_taskRegister+0x2e0>
            {
                *taskId = taskDescriptors[taskIndex].taskId;
 8006b5c:	8abb      	ldrh	r3, [r7, #20]
 8006b5e:	4a14      	ldr	r2, [pc, #80]	@ (8006bb0 <gos_taskRegister+0x320>)
 8006b60:	216a      	movs	r1, #106	@ 0x6a
 8006b62:	fb01 f303 	mul.w	r3, r1, r3
 8006b66:	4413      	add	r3, r2
 8006b68:	332a      	adds	r3, #42	@ 0x2a
 8006b6a:	881a      	ldrh	r2, [r3, #0]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	801a      	strh	r2, [r3, #0]
                // External task ID not required.
            }

            // Calculate stack overflow threshold value (64 byte reserved for protection).
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 8006b70:	8abb      	ldrh	r3, [r7, #20]
 8006b72:	4a0f      	ldr	r2, [pc, #60]	@ (8006bb0 <gos_taskRegister+0x320>)
 8006b74:	216a      	movs	r1, #106	@ 0x6a
 8006b76:	fb01 f303 	mul.w	r3, r1, r3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	333c      	adds	r3, #60	@ 0x3c
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	8aba      	ldrh	r2, [r7, #20]
 8006b82:	490b      	ldr	r1, [pc, #44]	@ (8006bb0 <gos_taskRegister+0x320>)
 8006b84:	206a      	movs	r0, #106	@ 0x6a
 8006b86:	fb00 f202 	mul.w	r2, r0, r2
 8006b8a:	440a      	add	r2, r1
 8006b8c:	3248      	adds	r2, #72	@ 0x48
 8006b8e:	8812      	ldrh	r2, [r2, #0]
 8006b90:	1a9a      	subs	r2, r3, r2
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8006b92:	8abb      	ldrh	r3, [r7, #20]
                    taskDescriptors[taskIndex].taskPsp - taskDescriptors[taskIndex].taskStackSize + 64;
 8006b94:	3240      	adds	r2, #64	@ 0x40
            taskDescriptors[taskIndex].taskStackOverflowThreshold =
 8006b96:	4906      	ldr	r1, [pc, #24]	@ (8006bb0 <gos_taskRegister+0x320>)
 8006b98:	206a      	movs	r0, #106	@ 0x6a
 8006b9a:	fb00 f303 	mul.w	r3, r0, r3
 8006b9e:	440b      	add	r3, r1
 8006ba0:	3360      	adds	r3, #96	@ 0x60
 8006ba2:	f8c3 2006 	str.w	r2, [r3, #6]
        }
    }

    return taskRegisterResult;
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	200001a8 	.word	0x200001a8

08006bb4 <gos_taskSleep>:

/*
 * Function: gos_taskSleep
 */
GOS_INLINE gos_result_t gos_taskSleep (gos_taskSleepTick_t sleepTicks)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSleepResult = GOS_ERROR;
 8006bbc:	23ae      	movs	r3, #174	@ 0xae
 8006bbe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // TODO: support pre-os delays (?)
    if (isKernelRunning == GOS_FALSE)
 8006bc0:	4b3f      	ldr	r3, [pc, #252]	@ (8006cc0 <gos_taskSleep+0x10c>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b49      	cmp	r3, #73	@ 0x49
 8006bc6:	d105      	bne.n	8006bd4 <gos_taskSleep+0x20>
    {
    	gos_kernelDelayMs(sleepTicks);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe fe7f 	bl	80058d0 <gos_kernelDelayMs>
 8006bd2:	e070      	b.n	8006cb6 <gos_taskSleep+0x102>
    }
    else
    {
        if (currentTaskIndex > 0u)
 8006bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8006cc4 <gos_taskSleep+0x110>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d06c      	beq.n	8006cb6 <gos_taskSleep+0x102>
        {
            GOS_ATOMIC_ENTER
 8006bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8006cc8 <gos_taskSleep+0x114>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d108      	bne.n	8006bf6 <gos_taskSleep+0x42>
 8006be4:	b672      	cpsid	i
 8006be6:	f3ef 8310 	mrs	r3, PRIMASK
 8006bea:	4a38      	ldr	r2, [pc, #224]	@ (8006ccc <gos_taskSleep+0x118>)
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	4b34      	ldr	r3, [pc, #208]	@ (8006cc8 <gos_taskSleep+0x114>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	4b32      	ldr	r3, [pc, #200]	@ (8006cc8 <gos_taskSleep+0x114>)
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	4b33      	ldr	r3, [pc, #204]	@ (8006cd0 <gos_taskSleep+0x11c>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	3301      	adds	r3, #1
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	4b31      	ldr	r3, [pc, #196]	@ (8006cd0 <gos_taskSleep+0x11c>)
 8006c0c:	701a      	strb	r2, [r3, #0]
            {
                if (taskDescriptors[currentTaskIndex].taskState == GOS_TASK_READY)
 8006c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8006cc4 <gos_taskSleep+0x110>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a30      	ldr	r2, [pc, #192]	@ (8006cd4 <gos_taskSleep+0x120>)
 8006c14:	216a      	movs	r1, #106	@ 0x6a
 8006c16:	fb01 f303 	mul.w	r3, r1, r3
 8006c1a:	4413      	add	r3, r2
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b0a      	cmp	r3, #10
 8006c22:	d121      	bne.n	8006c68 <gos_taskSleep+0xb4>
                {
                    taskDescriptors[currentTaskIndex].taskState            = GOS_TASK_SLEEPING;
 8006c24:	4b27      	ldr	r3, [pc, #156]	@ (8006cc4 <gos_taskSleep+0x110>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a2a      	ldr	r2, [pc, #168]	@ (8006cd4 <gos_taskSleep+0x120>)
 8006c2a:	216a      	movs	r1, #106	@ 0x6a
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	4413      	add	r3, r2
 8006c32:	3304      	adds	r3, #4
 8006c34:	2216      	movs	r2, #22
 8006c36:	701a      	strb	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTicks       = sleepTicks;
 8006c38:	4b22      	ldr	r3, [pc, #136]	@ (8006cc4 <gos_taskSleep+0x110>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a25      	ldr	r2, [pc, #148]	@ (8006cd4 <gos_taskSleep+0x120>)
 8006c3e:	216a      	movs	r1, #106	@ 0x6a
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	4413      	add	r3, r2
 8006c46:	332c      	adds	r3, #44	@ 0x2c
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	601a      	str	r2, [r3, #0]
                    taskDescriptors[currentTaskIndex].taskSleepTickCounter = 0u;
 8006c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cc4 <gos_taskSleep+0x110>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a20      	ldr	r2, [pc, #128]	@ (8006cd4 <gos_taskSleep+0x120>)
 8006c52:	216a      	movs	r1, #106	@ 0x6a
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	4413      	add	r3, r2
 8006c5a:	3330      	adds	r3, #48	@ 0x30
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	2200      	movs	r2, #0
 8006c62:	805a      	strh	r2, [r3, #2]
                    taskSleepResult = GOS_SUCCESS;
 8006c64:	2355      	movs	r3, #85	@ 0x55
 8006c66:	73fb      	strb	r3, [r7, #15]
                else
                {
                    // Nothing to do.
                }
            }
            GOS_ATOMIC_EXIT
 8006c68:	4b17      	ldr	r3, [pc, #92]	@ (8006cc8 <gos_taskSleep+0x114>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <gos_taskSleep+0xc8>
 8006c70:	4b15      	ldr	r3, [pc, #84]	@ (8006cc8 <gos_taskSleep+0x114>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	4b13      	ldr	r3, [pc, #76]	@ (8006cc8 <gos_taskSleep+0x114>)
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	4b12      	ldr	r3, [pc, #72]	@ (8006cc8 <gos_taskSleep+0x114>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d108      	bne.n	8006c96 <gos_taskSleep+0xe2>
 8006c84:	4b11      	ldr	r3, [pc, #68]	@ (8006ccc <gos_taskSleep+0x118>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f383 8810 	msr	PRIMASK, r3
 8006c8c:	b662      	cpsie	i
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	4b0e      	ldr	r3, [pc, #56]	@ (8006cd0 <gos_taskSleep+0x11c>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d005      	beq.n	8006caa <gos_taskSleep+0xf6>
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd0 <gos_taskSleep+0x11c>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd0 <gos_taskSleep+0x11c>)
 8006ca8:	701a      	strb	r2, [r3, #0]

            if (taskSleepResult == GOS_SUCCESS)
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	2b55      	cmp	r3, #85	@ 0x55
 8006cae:	d102      	bne.n	8006cb6 <gos_taskSleep+0x102>
            {
                // Unprivileged.
                gos_kernelReschedule(GOS_UNPRIVILEGED);
 8006cb0:	2009      	movs	r0, #9
 8006cb2:	f7ff fb37 	bl	8006324 <gos_kernelReschedule>
        {
            // Idle task cannot sleep.
        }
    }

    return taskSleepResult;
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	200001a2 	.word	0x200001a2
 8006cc4:	20001ea0 	.word	0x20001ea0
 8006cc8:	20001e9b 	.word	0x20001e9b
 8006ccc:	20001e9c 	.word	0x20001e9c
 8006cd0:	20001e99 	.word	0x20001e99
 8006cd4:	200001a8 	.word	0x200001a8

08006cd8 <gos_taskWakeup>:

/*
 * Function: gos_taskWakeup
 */
GOS_INLINE gos_result_t gos_taskWakeup (gos_tid_t taskId)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	4603      	mov	r3, r0
 8006ce0:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskWakeupResult = GOS_ERROR;
 8006ce2:	23ae      	movs	r3, #174	@ 0xae
 8006ce4:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8006cea:	4b56      	ldr	r3, [pc, #344]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d108      	bne.n	8006d04 <gos_taskWakeup+0x2c>
 8006cf2:	b672      	cpsid	i
 8006cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf8:	4a53      	ldr	r2, [pc, #332]	@ (8006e48 <gos_taskWakeup+0x170>)
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	4b4f      	ldr	r3, [pc, #316]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	4b4e      	ldr	r3, [pc, #312]	@ (8006e4c <gos_taskWakeup+0x174>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	4b4c      	ldr	r3, [pc, #304]	@ (8006e4c <gos_taskWakeup+0x174>)
 8006d1a:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8006d1c:	88fb      	ldrh	r3, [r7, #6]
 8006d1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d22:	d969      	bls.n	8006df8 <gos_taskWakeup+0x120>
 8006d24:	88fb      	ldrh	r3, [r7, #6]
 8006d26:	f248 022f 	movw	r2, #32815	@ 0x802f
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d864      	bhi.n	8006df8 <gos_taskWakeup+0x120>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8006d34:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8006d36:	4b46      	ldr	r3, [pc, #280]	@ (8006e50 <gos_taskWakeup+0x178>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a46      	ldr	r2, [pc, #280]	@ (8006e54 <gos_taskWakeup+0x17c>)
 8006d3c:	216a      	movs	r1, #106	@ 0x6a
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	4413      	add	r3, r2
 8006d44:	3308      	adds	r3, #8
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	b21b      	sxth	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	db03      	blt.n	8006d56 <gos_taskWakeup+0x7e>
            inIsr > 0)
 8006d4e:	4b42      	ldr	r3, [pc, #264]	@ (8006e58 <gos_taskWakeup+0x180>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d015      	beq.n	8006d82 <gos_taskWakeup+0xaa>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8006d56:	4a3f      	ldr	r2, [pc, #252]	@ (8006e54 <gos_taskWakeup+0x17c>)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	216a      	movs	r1, #106	@ 0x6a
 8006d5c:	fb01 f303 	mul.w	r3, r1, r3
 8006d60:	4413      	add	r3, r2
 8006d62:	3304      	adds	r3, #4
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b16      	cmp	r3, #22
 8006d68:	d146      	bne.n	8006df8 <gos_taskWakeup+0x120>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 8006d6a:	4a3a      	ldr	r2, [pc, #232]	@ (8006e54 <gos_taskWakeup+0x17c>)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	216a      	movs	r1, #106	@ 0x6a
 8006d70:	fb01 f303 	mul.w	r3, r1, r3
 8006d74:	4413      	add	r3, r2
 8006d76:	3304      	adds	r3, #4
 8006d78:	220a      	movs	r2, #10
 8006d7a:	701a      	strb	r2, [r3, #0]
                taskWakeupResult = GOS_SUCCESS;
 8006d7c:	2355      	movs	r3, #85	@ 0x55
 8006d7e:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING)
 8006d80:	e03a      	b.n	8006df8 <gos_taskWakeup+0x120>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8006d82:	4b30      	ldr	r3, [pc, #192]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <gos_taskWakeup+0xbe>
 8006d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	4b2c      	ldr	r3, [pc, #176]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	4b2b      	ldr	r3, [pc, #172]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d108      	bne.n	8006db0 <gos_taskWakeup+0xd8>
 8006d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e48 <gos_taskWakeup+0x170>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f383 8810 	msr	PRIMASK, r3
 8006da6:	b662      	cpsie	i
 8006da8:	f3bf 8f4f 	dsb	sy
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	4b26      	ldr	r3, [pc, #152]	@ (8006e4c <gos_taskWakeup+0x174>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <gos_taskWakeup+0xec>
 8006db8:	4b24      	ldr	r3, [pc, #144]	@ (8006e4c <gos_taskWakeup+0x174>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	4b22      	ldr	r3, [pc, #136]	@ (8006e4c <gos_taskWakeup+0x174>)
 8006dc2:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8006dc4:	4b22      	ldr	r3, [pc, #136]	@ (8006e50 <gos_taskWakeup+0x178>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	226a      	movs	r2, #106	@ 0x6a
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
 8006dce:	3308      	adds	r3, #8
 8006dd0:	4a20      	ldr	r2, [pc, #128]	@ (8006e54 <gos_taskWakeup+0x17c>)
 8006dd2:	4413      	add	r3, r2
 8006dd4:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	216a      	movs	r1, #106	@ 0x6a
 8006dda:	fb01 f202 	mul.w	r2, r1, r2
 8006dde:	3208      	adds	r2, #8
 8006de0:	491c      	ldr	r1, [pc, #112]	@ (8006e54 <gos_taskWakeup+0x17c>)
 8006de2:	440a      	add	r2, r1
 8006de4:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to wake up <%s>!",
 8006de6:	9201      	str	r2, [sp, #4]
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	4b1c      	ldr	r3, [pc, #112]	@ (8006e5c <gos_taskWakeup+0x184>)
 8006dec:	f240 1275 	movw	r2, #373	@ 0x175
 8006df0:	491b      	ldr	r1, [pc, #108]	@ (8006e60 <gos_taskWakeup+0x188>)
 8006df2:	2034      	movs	r0, #52	@ 0x34
 8006df4:	f001 fc12 	bl	800861c <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8006df8:	4b12      	ldr	r3, [pc, #72]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <gos_taskWakeup+0x134>
 8006e00:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	4b0e      	ldr	r3, [pc, #56]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e44 <gos_taskWakeup+0x16c>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d108      	bne.n	8006e26 <gos_taskWakeup+0x14e>
 8006e14:	4b0c      	ldr	r3, [pc, #48]	@ (8006e48 <gos_taskWakeup+0x170>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f383 8810 	msr	PRIMASK, r3
 8006e1c:	b662      	cpsie	i
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	4b09      	ldr	r3, [pc, #36]	@ (8006e4c <gos_taskWakeup+0x174>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <gos_taskWakeup+0x162>
 8006e2e:	4b07      	ldr	r3, [pc, #28]	@ (8006e4c <gos_taskWakeup+0x174>)
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <gos_taskWakeup+0x174>)
 8006e38:	701a      	strb	r2, [r3, #0]

    return taskWakeupResult;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20001e9b 	.word	0x20001e9b
 8006e48:	20001e9c 	.word	0x20001e9c
 8006e4c:	20001e99 	.word	0x20001e99
 8006e50:	20001ea0 	.word	0x20001ea0
 8006e54:	200001a8 	.word	0x200001a8
 8006e58:	20001e9a 	.word	0x20001e9a
 8006e5c:	0800cfdc 	.word	0x0800cfdc
 8006e60:	0800dddc 	.word	0x0800dddc

08006e64 <gos_taskSuspend>:

/*
 * Function: gos_taskSuspend
 */
GOS_INLINE gos_result_t gos_taskSuspend (gos_tid_t taskId)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskSuspendResult = GOS_ERROR;
 8006e6e:	23ae      	movs	r3, #174	@ 0xae
 8006e70:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8006e76:	4b84      	ldr	r3, [pc, #528]	@ (8007088 <gos_taskSuspend+0x224>)
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d108      	bne.n	8006e90 <gos_taskSuspend+0x2c>
 8006e7e:	b672      	cpsid	i
 8006e80:	f3ef 8310 	mrs	r3, PRIMASK
 8006e84:	4a81      	ldr	r2, [pc, #516]	@ (800708c <gos_taskSuspend+0x228>)
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	4b7d      	ldr	r3, [pc, #500]	@ (8007088 <gos_taskSuspend+0x224>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	3301      	adds	r3, #1
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	4b7b      	ldr	r3, [pc, #492]	@ (8007088 <gos_taskSuspend+0x224>)
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	4b7c      	ldr	r3, [pc, #496]	@ (8007090 <gos_taskSuspend+0x22c>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	4b7a      	ldr	r3, [pc, #488]	@ (8007090 <gos_taskSuspend+0x22c>)
 8006ea6:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eae:	f240 80c1 	bls.w	8007034 <gos_taskSuspend+0x1d0>
 8006eb2:	88fb      	ldrh	r3, [r7, #6]
 8006eb4:	f248 022f 	movw	r2, #32815	@ 0x802f
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	f200 80bb 	bhi.w	8007034 <gos_taskSuspend+0x1d0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8006ec4:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8006ec6:	4b73      	ldr	r3, [pc, #460]	@ (8007094 <gos_taskSuspend+0x230>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a73      	ldr	r2, [pc, #460]	@ (8007098 <gos_taskSuspend+0x234>)
 8006ecc:	216a      	movs	r1, #106	@ 0x6a
 8006ece:	fb01 f303 	mul.w	r3, r1, r3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b21b      	sxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	db08      	blt.n	8006ef0 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8006ede:	4b6d      	ldr	r3, [pc, #436]	@ (8007094 <gos_taskSuspend+0x230>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d003      	beq.n	8006ef0 <gos_taskSuspend+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8006ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800709c <gos_taskSuspend+0x238>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d064      	beq.n	8006fba <gos_taskSuspend+0x156>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8006ef0:	4a69      	ldr	r2, [pc, #420]	@ (8007098 <gos_taskSuspend+0x234>)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	216a      	movs	r1, #106	@ 0x6a
 8006ef6:	fb01 f303 	mul.w	r3, r1, r3
 8006efa:	4413      	add	r3, r2
 8006efc:	3304      	adds	r3, #4
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b0a      	cmp	r3, #10
 8006f02:	d014      	beq.n	8006f2e <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8006f04:	4a64      	ldr	r2, [pc, #400]	@ (8007098 <gos_taskSuspend+0x234>)
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	216a      	movs	r1, #106	@ 0x6a
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	4413      	add	r3, r2
 8006f10:	3304      	adds	r3, #4
 8006f12:	781b      	ldrb	r3, [r3, #0]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8006f14:	2b16      	cmp	r3, #22
 8006f16:	d00a      	beq.n	8006f2e <gos_taskSuspend+0xca>
                taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8006f18:	4a5f      	ldr	r2, [pc, #380]	@ (8007098 <gos_taskSuspend+0x234>)
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	216a      	movs	r1, #106	@ 0x6a
 8006f1e:	fb01 f303 	mul.w	r3, r1, r3
 8006f22:	4413      	add	r3, r2
 8006f24:	3304      	adds	r3, #4
 8006f26:	781b      	ldrb	r3, [r3, #0]
                taskDescriptors[taskIndex].taskState == GOS_TASK_SLEEPING ||
 8006f28:	2b19      	cmp	r3, #25
 8006f2a:	f040 8082 	bne.w	8007032 <gos_taskSuspend+0x1ce>
            {
                taskDescriptors[taskIndex].taskPreviousState = taskDescriptors[taskIndex].taskState;
 8006f2e:	4a5a      	ldr	r2, [pc, #360]	@ (8007098 <gos_taskSuspend+0x234>)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	216a      	movs	r1, #106	@ 0x6a
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	4413      	add	r3, r2
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	7818      	ldrb	r0, [r3, #0]
 8006f3e:	4a56      	ldr	r2, [pc, #344]	@ (8007098 <gos_taskSuspend+0x234>)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	216a      	movs	r1, #106	@ 0x6a
 8006f44:	fb01 f303 	mul.w	r3, r1, r3
 8006f48:	4413      	add	r3, r2
 8006f4a:	3305      	adds	r3, #5
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskState = GOS_TASK_SUSPENDED;
 8006f50:	4a51      	ldr	r2, [pc, #324]	@ (8007098 <gos_taskSuspend+0x234>)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	216a      	movs	r1, #106	@ 0x6a
 8006f56:	fb01 f303 	mul.w	r3, r1, r3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	2205      	movs	r2, #5
 8006f60:	701a      	strb	r2, [r3, #0]
                taskSuspendResult = GOS_SUCCESS;
 8006f62:	2355      	movs	r3, #85	@ 0x55
 8006f64:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 8006f66:	4b48      	ldr	r3, [pc, #288]	@ (8007088 <gos_taskSuspend+0x224>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <gos_taskSuspend+0x116>
 8006f6e:	4b46      	ldr	r3, [pc, #280]	@ (8007088 <gos_taskSuspend+0x224>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	4b44      	ldr	r3, [pc, #272]	@ (8007088 <gos_taskSuspend+0x224>)
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	4b43      	ldr	r3, [pc, #268]	@ (8007088 <gos_taskSuspend+0x224>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d108      	bne.n	8006f94 <gos_taskSuspend+0x130>
 8006f82:	4b42      	ldr	r3, [pc, #264]	@ (800708c <gos_taskSuspend+0x228>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f383 8810 	msr	PRIMASK, r3
 8006f8a:	b662      	cpsie	i
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	4b3e      	ldr	r3, [pc, #248]	@ (8007090 <gos_taskSuspend+0x22c>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <gos_taskSuspend+0x144>
 8006f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8007090 <gos_taskSuspend+0x22c>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8007090 <gos_taskSuspend+0x22c>)
 8006fa6:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8006fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8007094 <gos_taskSuspend+0x230>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d13f      	bne.n	8007032 <gos_taskSuspend+0x1ce>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8006fb2:	2009      	movs	r0, #9
 8006fb4:	f7ff f9b6 	bl	8006324 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8006fb8:	e03b      	b.n	8007032 <gos_taskSuspend+0x1ce>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8006fba:	4b33      	ldr	r3, [pc, #204]	@ (8007088 <gos_taskSuspend+0x224>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d005      	beq.n	8006fce <gos_taskSuspend+0x16a>
 8006fc2:	4b31      	ldr	r3, [pc, #196]	@ (8007088 <gos_taskSuspend+0x224>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	4b2f      	ldr	r3, [pc, #188]	@ (8007088 <gos_taskSuspend+0x224>)
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	4b2e      	ldr	r3, [pc, #184]	@ (8007088 <gos_taskSuspend+0x224>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d108      	bne.n	8006fe8 <gos_taskSuspend+0x184>
 8006fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800708c <gos_taskSuspend+0x228>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f383 8810 	msr	PRIMASK, r3
 8006fde:	b662      	cpsie	i
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	4b29      	ldr	r3, [pc, #164]	@ (8007090 <gos_taskSuspend+0x22c>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <gos_taskSuspend+0x198>
 8006ff0:	4b27      	ldr	r3, [pc, #156]	@ (8007090 <gos_taskSuspend+0x22c>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	4b25      	ldr	r3, [pc, #148]	@ (8007090 <gos_taskSuspend+0x22c>)
 8006ffa:	701a      	strb	r2, [r3, #0]
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8006ffc:	4b25      	ldr	r3, [pc, #148]	@ (8007094 <gos_taskSuspend+0x230>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	226a      	movs	r2, #106	@ 0x6a
 8007002:	fb02 f303 	mul.w	r3, r2, r3
 8007006:	3308      	adds	r3, #8
 8007008:	4a23      	ldr	r2, [pc, #140]	@ (8007098 <gos_taskSuspend+0x234>)
 800700a:	4413      	add	r3, r2
 800700c:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	216a      	movs	r1, #106	@ 0x6a
 8007012:	fb01 f202 	mul.w	r2, r1, r2
 8007016:	3208      	adds	r2, #8
 8007018:	491f      	ldr	r1, [pc, #124]	@ (8007098 <gos_taskSuspend+0x234>)
 800701a:	440a      	add	r2, r1
 800701c:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to suspend <%s>!",
 800701e:	9201      	str	r2, [sp, #4]
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	4b1f      	ldr	r3, [pc, #124]	@ (80070a0 <gos_taskSuspend+0x23c>)
 8007024:	f240 12b7 	movw	r2, #439	@ 0x1b7
 8007028:	491e      	ldr	r1, [pc, #120]	@ (80070a4 <gos_taskSuspend+0x240>)
 800702a:	2034      	movs	r0, #52	@ 0x34
 800702c:	f001 faf6 	bl	800861c <gos_errorHandler>
 8007030:	e000      	b.n	8007034 <gos_taskSuspend+0x1d0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY ||
 8007032:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskSuspendResult != GOS_SUCCESS)
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	2b55      	cmp	r3, #85	@ 0x55
 8007038:	d020      	beq.n	800707c <gos_taskSuspend+0x218>
    {
        GOS_ATOMIC_EXIT
 800703a:	4b13      	ldr	r3, [pc, #76]	@ (8007088 <gos_taskSuspend+0x224>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <gos_taskSuspend+0x1ea>
 8007042:	4b11      	ldr	r3, [pc, #68]	@ (8007088 <gos_taskSuspend+0x224>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	3b01      	subs	r3, #1
 8007048:	b2da      	uxtb	r2, r3
 800704a:	4b0f      	ldr	r3, [pc, #60]	@ (8007088 <gos_taskSuspend+0x224>)
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	4b0e      	ldr	r3, [pc, #56]	@ (8007088 <gos_taskSuspend+0x224>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d108      	bne.n	8007068 <gos_taskSuspend+0x204>
 8007056:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <gos_taskSuspend+0x228>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f383 8810 	msr	PRIMASK, r3
 800705e:	b662      	cpsie	i
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	4b09      	ldr	r3, [pc, #36]	@ (8007090 <gos_taskSuspend+0x22c>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d005      	beq.n	800707c <gos_taskSuspend+0x218>
 8007070:	4b07      	ldr	r3, [pc, #28]	@ (8007090 <gos_taskSuspend+0x22c>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	3b01      	subs	r3, #1
 8007076:	b2da      	uxtb	r2, r3
 8007078:	4b05      	ldr	r3, [pc, #20]	@ (8007090 <gos_taskSuspend+0x22c>)
 800707a:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskSuspendResult;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20001e9b 	.word	0x20001e9b
 800708c:	20001e9c 	.word	0x20001e9c
 8007090:	20001e99 	.word	0x20001e99
 8007094:	20001ea0 	.word	0x20001ea0
 8007098:	200001a8 	.word	0x200001a8
 800709c:	20001e9a 	.word	0x20001e9a
 80070a0:	0800d004 	.word	0x0800d004
 80070a4:	0800ddec 	.word	0x0800ddec

080070a8 <gos_taskResume>:

/*
 * Function: gos_taskResume
 */
GOS_INLINE gos_result_t gos_taskResume (gos_tid_t taskId)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	4603      	mov	r3, r0
 80070b0:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskResumeResult = GOS_ERROR;
 80070b2:	23ae      	movs	r3, #174	@ 0xae
 80070b4:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex        = 0u;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80070ba:	4b4a      	ldr	r3, [pc, #296]	@ (80071e4 <gos_taskResume+0x13c>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d108      	bne.n	80070d4 <gos_taskResume+0x2c>
 80070c2:	b672      	cpsid	i
 80070c4:	f3ef 8310 	mrs	r3, PRIMASK
 80070c8:	4a47      	ldr	r2, [pc, #284]	@ (80071e8 <gos_taskResume+0x140>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	4b43      	ldr	r3, [pc, #268]	@ (80071e4 <gos_taskResume+0x13c>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	3301      	adds	r3, #1
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	4b41      	ldr	r3, [pc, #260]	@ (80071e4 <gos_taskResume+0x13c>)
 80070de:	701a      	strb	r2, [r3, #0]
 80070e0:	4b42      	ldr	r3, [pc, #264]	@ (80071ec <gos_taskResume+0x144>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	4b40      	ldr	r3, [pc, #256]	@ (80071ec <gos_taskResume+0x144>)
 80070ea:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f2:	d950      	bls.n	8007196 <gos_taskResume+0xee>
 80070f4:	88fb      	ldrh	r3, [r7, #6]
 80070f6:	f248 022f 	movw	r2, #32815	@ 0x802f
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d84b      	bhi.n	8007196 <gos_taskResume+0xee>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007104:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8007106:	4b3a      	ldr	r3, [pc, #232]	@ (80071f0 <gos_taskResume+0x148>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a3a      	ldr	r2, [pc, #232]	@ (80071f4 <gos_taskResume+0x14c>)
 800710c:	216a      	movs	r1, #106	@ 0x6a
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	4413      	add	r3, r2
 8007114:	3308      	adds	r3, #8
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	b21b      	sxth	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	db03      	blt.n	8007126 <gos_taskResume+0x7e>
            inIsr > 0)
 800711e:	4b36      	ldr	r3, [pc, #216]	@ (80071f8 <gos_taskResume+0x150>)
 8007120:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8007122:	2b00      	cmp	r3, #0
 8007124:	d01d      	beq.n	8007162 <gos_taskResume+0xba>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8007126:	4a33      	ldr	r2, [pc, #204]	@ (80071f4 <gos_taskResume+0x14c>)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	216a      	movs	r1, #106	@ 0x6a
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	4413      	add	r3, r2
 8007132:	3304      	adds	r3, #4
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b05      	cmp	r3, #5
 8007138:	d12d      	bne.n	8007196 <gos_taskResume+0xee>
            {
                taskDescriptors[taskIndex].taskState = taskDescriptors[taskIndex].taskPreviousState;
 800713a:	4a2e      	ldr	r2, [pc, #184]	@ (80071f4 <gos_taskResume+0x14c>)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	216a      	movs	r1, #106	@ 0x6a
 8007140:	fb01 f303 	mul.w	r3, r1, r3
 8007144:	4413      	add	r3, r2
 8007146:	3305      	adds	r3, #5
 8007148:	7818      	ldrb	r0, [r3, #0]
 800714a:	4a2a      	ldr	r2, [pc, #168]	@ (80071f4 <gos_taskResume+0x14c>)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	216a      	movs	r1, #106	@ 0x6a
 8007150:	fb01 f303 	mul.w	r3, r1, r3
 8007154:	4413      	add	r3, r2
 8007156:	3304      	adds	r3, #4
 8007158:	4602      	mov	r2, r0
 800715a:	701a      	strb	r2, [r3, #0]
                taskResumeResult = GOS_SUCCESS;
 800715c:	2355      	movs	r3, #85	@ 0x55
 800715e:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED)
 8007160:	e019      	b.n	8007196 <gos_taskResume+0xee>
            }
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8007162:	4b23      	ldr	r3, [pc, #140]	@ (80071f0 <gos_taskResume+0x148>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	226a      	movs	r2, #106	@ 0x6a
 8007168:	fb02 f303 	mul.w	r3, r2, r3
 800716c:	3308      	adds	r3, #8
 800716e:	4a21      	ldr	r2, [pc, #132]	@ (80071f4 <gos_taskResume+0x14c>)
 8007170:	4413      	add	r3, r2
 8007172:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	216a      	movs	r1, #106	@ 0x6a
 8007178:	fb01 f202 	mul.w	r2, r1, r2
 800717c:	3208      	adds	r2, #8
 800717e:	491d      	ldr	r1, [pc, #116]	@ (80071f4 <gos_taskResume+0x14c>)
 8007180:	440a      	add	r2, r1
 8007182:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to resume <%s>!",
 8007184:	9201      	str	r2, [sp, #4]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	4b1c      	ldr	r3, [pc, #112]	@ (80071fc <gos_taskResume+0x154>)
 800718a:	f240 12f1 	movw	r2, #497	@ 0x1f1
 800718e:	491c      	ldr	r1, [pc, #112]	@ (8007200 <gos_taskResume+0x158>)
 8007190:	2034      	movs	r0, #52	@ 0x34
 8007192:	f001 fa43 	bl	800861c <gos_errorHandler>
    else
    {
        // Task ID error.
    }

    GOS_ATOMIC_EXIT
 8007196:	4b13      	ldr	r3, [pc, #76]	@ (80071e4 <gos_taskResume+0x13c>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <gos_taskResume+0x102>
 800719e:	4b11      	ldr	r3, [pc, #68]	@ (80071e4 <gos_taskResume+0x13c>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	4b0f      	ldr	r3, [pc, #60]	@ (80071e4 <gos_taskResume+0x13c>)
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	4b0e      	ldr	r3, [pc, #56]	@ (80071e4 <gos_taskResume+0x13c>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d108      	bne.n	80071c4 <gos_taskResume+0x11c>
 80071b2:	4b0d      	ldr	r3, [pc, #52]	@ (80071e8 <gos_taskResume+0x140>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f383 8810 	msr	PRIMASK, r3
 80071ba:	b662      	cpsie	i
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	4b09      	ldr	r3, [pc, #36]	@ (80071ec <gos_taskResume+0x144>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <gos_taskResume+0x130>
 80071cc:	4b07      	ldr	r3, [pc, #28]	@ (80071ec <gos_taskResume+0x144>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	4b05      	ldr	r3, [pc, #20]	@ (80071ec <gos_taskResume+0x144>)
 80071d6:	701a      	strb	r2, [r3, #0]

    return taskResumeResult;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20001e9b 	.word	0x20001e9b
 80071e8:	20001e9c 	.word	0x20001e9c
 80071ec:	20001e99 	.word	0x20001e99
 80071f0:	20001ea0 	.word	0x20001ea0
 80071f4:	200001a8 	.word	0x200001a8
 80071f8:	20001e9a 	.word	0x20001e9a
 80071fc:	0800d02c 	.word	0x0800d02c
 8007200:	0800ddfc 	.word	0x0800ddfc

08007204 <gos_taskBlock>:

/*
 * Function: gos_taskBlock
 */
GOS_INLINE gos_result_t gos_taskBlock (gos_tid_t taskId, gos_blockMaxTick_t blockTicks)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af02      	add	r7, sp, #8
 800720a:	4603      	mov	r3, r0
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskBlockResult = GOS_ERROR;
 8007210:	23ae      	movs	r3, #174	@ 0xae
 8007212:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 8007214:	2300      	movs	r3, #0
 8007216:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8007218:	4b7b      	ldr	r3, [pc, #492]	@ (8007408 <gos_taskBlock+0x204>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d108      	bne.n	8007232 <gos_taskBlock+0x2e>
 8007220:	b672      	cpsid	i
 8007222:	f3ef 8310 	mrs	r3, PRIMASK
 8007226:	4a79      	ldr	r2, [pc, #484]	@ (800740c <gos_taskBlock+0x208>)
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	4b75      	ldr	r3, [pc, #468]	@ (8007408 <gos_taskBlock+0x204>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	b2da      	uxtb	r2, r3
 800723a:	4b73      	ldr	r3, [pc, #460]	@ (8007408 <gos_taskBlock+0x204>)
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	4b74      	ldr	r3, [pc, #464]	@ (8007410 <gos_taskBlock+0x20c>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	b2da      	uxtb	r2, r3
 8007246:	4b72      	ldr	r3, [pc, #456]	@ (8007410 <gos_taskBlock+0x20c>)
 8007248:	701a      	strb	r2, [r3, #0]

    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007250:	f240 80b0 	bls.w	80073b4 <gos_taskBlock+0x1b0>
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	f248 022f 	movw	r2, #32815	@ 0x802f
 800725a:	4293      	cmp	r3, r2
 800725c:	f200 80aa 	bhi.w	80073b4 <gos_taskBlock+0x1b0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007260:	88fb      	ldrh	r3, [r7, #6]
 8007262:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007266:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8007268:	4b6a      	ldr	r3, [pc, #424]	@ (8007414 <gos_taskBlock+0x210>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a6a      	ldr	r2, [pc, #424]	@ (8007418 <gos_taskBlock+0x214>)
 800726e:	216a      	movs	r1, #106	@ 0x6a
 8007270:	fb01 f303 	mul.w	r3, r1, r3
 8007274:	4413      	add	r3, r2
 8007276:	3308      	adds	r3, #8
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b21b      	sxth	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	db08      	blt.n	8007292 <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 8007280:	4b64      	ldr	r3, [pc, #400]	@ (8007414 <gos_taskBlock+0x210>)
 8007282:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	429a      	cmp	r2, r3
 8007288:	d003      	beq.n	8007292 <gos_taskBlock+0x8e>
            currentTaskIndex == taskIndex || inIsr > 0)
 800728a:	4b64      	ldr	r3, [pc, #400]	@ (800741c <gos_taskBlock+0x218>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d053      	beq.n	800733a <gos_taskBlock+0x136>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8007292:	4a61      	ldr	r2, [pc, #388]	@ (8007418 <gos_taskBlock+0x214>)
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	216a      	movs	r1, #106	@ 0x6a
 8007298:	fb01 f303 	mul.w	r3, r1, r3
 800729c:	4413      	add	r3, r2
 800729e:	3304      	adds	r3, #4
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b0a      	cmp	r3, #10
 80072a4:	f040 8085 	bne.w	80073b2 <gos_taskBlock+0x1ae>
            {
                taskDescriptors[taskIndex].taskState            = GOS_TASK_BLOCKED;
 80072a8:	4a5b      	ldr	r2, [pc, #364]	@ (8007418 <gos_taskBlock+0x214>)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	216a      	movs	r1, #106	@ 0x6a
 80072ae:	fb01 f303 	mul.w	r3, r1, r3
 80072b2:	4413      	add	r3, r2
 80072b4:	3304      	adds	r3, #4
 80072b6:	2219      	movs	r2, #25
 80072b8:	701a      	strb	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTicks       = blockTicks;
 80072ba:	4a57      	ldr	r2, [pc, #348]	@ (8007418 <gos_taskBlock+0x214>)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	216a      	movs	r1, #106	@ 0x6a
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	4413      	add	r3, r2
 80072c6:	3334      	adds	r3, #52	@ 0x34
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	601a      	str	r2, [r3, #0]
                taskDescriptors[taskIndex].taskBlockTickCounter = 0u;
 80072cc:	4a52      	ldr	r2, [pc, #328]	@ (8007418 <gos_taskBlock+0x214>)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	216a      	movs	r1, #106	@ 0x6a
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	3338      	adds	r3, #56	@ 0x38
 80072da:	2200      	movs	r2, #0
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	2200      	movs	r2, #0
 80072e0:	805a      	strh	r2, [r3, #2]

                taskBlockResult = GOS_SUCCESS;
 80072e2:	2355      	movs	r3, #85	@ 0x55
 80072e4:	73fb      	strb	r3, [r7, #15]

                GOS_ATOMIC_EXIT
 80072e6:	4b48      	ldr	r3, [pc, #288]	@ (8007408 <gos_taskBlock+0x204>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <gos_taskBlock+0xf6>
 80072ee:	4b46      	ldr	r3, [pc, #280]	@ (8007408 <gos_taskBlock+0x204>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	4b44      	ldr	r3, [pc, #272]	@ (8007408 <gos_taskBlock+0x204>)
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	4b43      	ldr	r3, [pc, #268]	@ (8007408 <gos_taskBlock+0x204>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d108      	bne.n	8007314 <gos_taskBlock+0x110>
 8007302:	4b42      	ldr	r3, [pc, #264]	@ (800740c <gos_taskBlock+0x208>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f383 8810 	msr	PRIMASK, r3
 800730a:	b662      	cpsie	i
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	4b3e      	ldr	r3, [pc, #248]	@ (8007410 <gos_taskBlock+0x20c>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <gos_taskBlock+0x124>
 800731c:	4b3c      	ldr	r3, [pc, #240]	@ (8007410 <gos_taskBlock+0x20c>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	3b01      	subs	r3, #1
 8007322:	b2da      	uxtb	r2, r3
 8007324:	4b3a      	ldr	r3, [pc, #232]	@ (8007410 <gos_taskBlock+0x20c>)
 8007326:	701a      	strb	r2, [r3, #0]

                if (currentTaskIndex == taskIndex)
 8007328:	4b3a      	ldr	r3, [pc, #232]	@ (8007414 <gos_taskBlock+0x210>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	429a      	cmp	r2, r3
 8007330:	d13f      	bne.n	80073b2 <gos_taskBlock+0x1ae>
                {
                    // Unprivileged.
                    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8007332:	2009      	movs	r0, #9
 8007334:	f7fe fff6 	bl	8006324 <gos_kernelReschedule>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 8007338:	e03b      	b.n	80073b2 <gos_taskBlock+0x1ae>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 800733a:	4b33      	ldr	r3, [pc, #204]	@ (8007408 <gos_taskBlock+0x204>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d005      	beq.n	800734e <gos_taskBlock+0x14a>
 8007342:	4b31      	ldr	r3, [pc, #196]	@ (8007408 <gos_taskBlock+0x204>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	3b01      	subs	r3, #1
 8007348:	b2da      	uxtb	r2, r3
 800734a:	4b2f      	ldr	r3, [pc, #188]	@ (8007408 <gos_taskBlock+0x204>)
 800734c:	701a      	strb	r2, [r3, #0]
 800734e:	4b2e      	ldr	r3, [pc, #184]	@ (8007408 <gos_taskBlock+0x204>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d108      	bne.n	8007368 <gos_taskBlock+0x164>
 8007356:	4b2d      	ldr	r3, [pc, #180]	@ (800740c <gos_taskBlock+0x208>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f383 8810 	msr	PRIMASK, r3
 800735e:	b662      	cpsie	i
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	4b29      	ldr	r3, [pc, #164]	@ (8007410 <gos_taskBlock+0x20c>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <gos_taskBlock+0x178>
 8007370:	4b27      	ldr	r3, [pc, #156]	@ (8007410 <gos_taskBlock+0x20c>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	3b01      	subs	r3, #1
 8007376:	b2da      	uxtb	r2, r3
 8007378:	4b25      	ldr	r3, [pc, #148]	@ (8007410 <gos_taskBlock+0x20c>)
 800737a:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800737c:	4b25      	ldr	r3, [pc, #148]	@ (8007414 <gos_taskBlock+0x210>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	226a      	movs	r2, #106	@ 0x6a
 8007382:	fb02 f303 	mul.w	r3, r2, r3
 8007386:	3308      	adds	r3, #8
 8007388:	4a23      	ldr	r2, [pc, #140]	@ (8007418 <gos_taskBlock+0x214>)
 800738a:	4413      	add	r3, r2
 800738c:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	216a      	movs	r1, #106	@ 0x6a
 8007392:	fb01 f202 	mul.w	r2, r1, r2
 8007396:	3208      	adds	r2, #8
 8007398:	491f      	ldr	r1, [pc, #124]	@ (8007418 <gos_taskBlock+0x214>)
 800739a:	440a      	add	r2, r1
 800739c:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to block <%s>!",
 800739e:	9201      	str	r2, [sp, #4]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007420 <gos_taskBlock+0x21c>)
 80073a4:	f240 2235 	movw	r2, #565	@ 0x235
 80073a8:	491e      	ldr	r1, [pc, #120]	@ (8007424 <gos_taskBlock+0x220>)
 80073aa:	2034      	movs	r0, #52	@ 0x34
 80073ac:	f001 f936 	bl	800861c <gos_errorHandler>
 80073b0:	e000      	b.n	80073b4 <gos_taskBlock+0x1b0>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_READY)
 80073b2:	bf00      	nop
    else
    {
        // Task ID error.
    }

    if (taskBlockResult != GOS_SUCCESS)
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	2b55      	cmp	r3, #85	@ 0x55
 80073b8:	d020      	beq.n	80073fc <gos_taskBlock+0x1f8>
    {
        GOS_ATOMIC_EXIT
 80073ba:	4b13      	ldr	r3, [pc, #76]	@ (8007408 <gos_taskBlock+0x204>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <gos_taskBlock+0x1ca>
 80073c2:	4b11      	ldr	r3, [pc, #68]	@ (8007408 <gos_taskBlock+0x204>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007408 <gos_taskBlock+0x204>)
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007408 <gos_taskBlock+0x204>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d108      	bne.n	80073e8 <gos_taskBlock+0x1e4>
 80073d6:	4b0d      	ldr	r3, [pc, #52]	@ (800740c <gos_taskBlock+0x208>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f383 8810 	msr	PRIMASK, r3
 80073de:	b662      	cpsie	i
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	4b09      	ldr	r3, [pc, #36]	@ (8007410 <gos_taskBlock+0x20c>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d005      	beq.n	80073fc <gos_taskBlock+0x1f8>
 80073f0:	4b07      	ldr	r3, [pc, #28]	@ (8007410 <gos_taskBlock+0x20c>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	4b05      	ldr	r3, [pc, #20]	@ (8007410 <gos_taskBlock+0x20c>)
 80073fa:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return taskBlockResult;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20001e9b 	.word	0x20001e9b
 800740c:	20001e9c 	.word	0x20001e9c
 8007410:	20001e99 	.word	0x20001e99
 8007414:	20001ea0 	.word	0x20001ea0
 8007418:	200001a8 	.word	0x200001a8
 800741c:	20001e9a 	.word	0x20001e9a
 8007420:	0800d054 	.word	0x0800d054
 8007424:	0800de0c 	.word	0x0800de0c

08007428 <gos_taskUnblock>:

/*
 * Function: gos_taskUnblock
 */
GOS_INLINE gos_result_t gos_taskUnblock (gos_tid_t taskId)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af02      	add	r7, sp, #8
 800742e:	4603      	mov	r3, r0
 8007430:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskUnblockResult = GOS_ERROR;
 8007432:	23ae      	movs	r3, #174	@ 0xae
 8007434:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8007436:	2300      	movs	r3, #0
 8007438:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800743a:	4b68      	ldr	r3, [pc, #416]	@ (80075dc <gos_taskUnblock+0x1b4>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d108      	bne.n	8007454 <gos_taskUnblock+0x2c>
 8007442:	b672      	cpsid	i
 8007444:	f3ef 8310 	mrs	r3, PRIMASK
 8007448:	4a65      	ldr	r2, [pc, #404]	@ (80075e0 <gos_taskUnblock+0x1b8>)
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	4b61      	ldr	r3, [pc, #388]	@ (80075dc <gos_taskUnblock+0x1b4>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	3301      	adds	r3, #1
 800745a:	b2da      	uxtb	r2, r3
 800745c:	4b5f      	ldr	r3, [pc, #380]	@ (80075dc <gos_taskUnblock+0x1b4>)
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	4b60      	ldr	r3, [pc, #384]	@ (80075e4 <gos_taskUnblock+0x1bc>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	3301      	adds	r3, #1
 8007466:	b2da      	uxtb	r2, r3
 8007468:	4b5e      	ldr	r3, [pc, #376]	@ (80075e4 <gos_taskUnblock+0x1bc>)
 800746a:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 800746c:	88fb      	ldrh	r3, [r7, #6]
 800746e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007472:	f240 808d 	bls.w	8007590 <gos_taskUnblock+0x168>
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	f248 022f 	movw	r2, #32815	@ 0x802f
 800747c:	4293      	cmp	r3, r2
 800747e:	f200 8087 	bhi.w	8007590 <gos_taskUnblock+0x168>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007488:	60bb      	str	r3, [r7, #8]

        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800748a:	4b57      	ldr	r3, [pc, #348]	@ (80075e8 <gos_taskUnblock+0x1c0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a57      	ldr	r2, [pc, #348]	@ (80075ec <gos_taskUnblock+0x1c4>)
 8007490:	216a      	movs	r1, #106	@ 0x6a
 8007492:	fb01 f303 	mul.w	r3, r1, r3
 8007496:	4413      	add	r3, r2
 8007498:	3308      	adds	r3, #8
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b21b      	sxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	db03      	blt.n	80074aa <gos_taskUnblock+0x82>
            inIsr > 0)
 80074a2:	4b53      	ldr	r3, [pc, #332]	@ (80075f0 <gos_taskUnblock+0x1c8>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d035      	beq.n	8007516 <gos_taskUnblock+0xee>
        {
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80074aa:	4a50      	ldr	r2, [pc, #320]	@ (80075ec <gos_taskUnblock+0x1c4>)
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	216a      	movs	r1, #106	@ 0x6a
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	3304      	adds	r3, #4
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b19      	cmp	r3, #25
 80074bc:	d10b      	bne.n	80074d6 <gos_taskUnblock+0xae>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_READY;
 80074be:	4a4b      	ldr	r2, [pc, #300]	@ (80075ec <gos_taskUnblock+0x1c4>)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	216a      	movs	r1, #106	@ 0x6a
 80074c4:	fb01 f303 	mul.w	r3, r1, r3
 80074c8:	4413      	add	r3, r2
 80074ca:	3304      	adds	r3, #4
 80074cc:	220a      	movs	r2, #10
 80074ce:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 80074d0:	2355      	movs	r3, #85	@ 0x55
 80074d2:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 80074d4:	e05b      	b.n	800758e <gos_taskUnblock+0x166>
            }
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 80074d6:	4a45      	ldr	r2, [pc, #276]	@ (80075ec <gos_taskUnblock+0x1c4>)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	216a      	movs	r1, #106	@ 0x6a
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	4413      	add	r3, r2
 80074e2:	3304      	adds	r3, #4
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b05      	cmp	r3, #5
 80074e8:	d151      	bne.n	800758e <gos_taskUnblock+0x166>
                    taskDescriptors[taskIndex].taskPreviousState == GOS_TASK_BLOCKED)
 80074ea:	4a40      	ldr	r2, [pc, #256]	@ (80075ec <gos_taskUnblock+0x1c4>)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	216a      	movs	r1, #106	@ 0x6a
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
 80074f4:	4413      	add	r3, r2
 80074f6:	3305      	adds	r3, #5
 80074f8:	781b      	ldrb	r3, [r3, #0]
            else if (taskDescriptors[taskIndex].taskState == GOS_TASK_SUSPENDED &&
 80074fa:	2b19      	cmp	r3, #25
 80074fc:	d147      	bne.n	800758e <gos_taskUnblock+0x166>
            {
                taskDescriptors[taskIndex].taskPreviousState = GOS_TASK_READY;
 80074fe:	4a3b      	ldr	r2, [pc, #236]	@ (80075ec <gos_taskUnblock+0x1c4>)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	216a      	movs	r1, #106	@ 0x6a
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	4413      	add	r3, r2
 800750a:	3305      	adds	r3, #5
 800750c:	220a      	movs	r2, #10
 800750e:	701a      	strb	r2, [r3, #0]
                taskUnblockResult = GOS_SUCCESS;
 8007510:	2355      	movs	r3, #85	@ 0x55
 8007512:	73fb      	strb	r3, [r7, #15]
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 8007514:	e03b      	b.n	800758e <gos_taskUnblock+0x166>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8007516:	4b31      	ldr	r3, [pc, #196]	@ (80075dc <gos_taskUnblock+0x1b4>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <gos_taskUnblock+0x102>
 800751e:	4b2f      	ldr	r3, [pc, #188]	@ (80075dc <gos_taskUnblock+0x1b4>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	3b01      	subs	r3, #1
 8007524:	b2da      	uxtb	r2, r3
 8007526:	4b2d      	ldr	r3, [pc, #180]	@ (80075dc <gos_taskUnblock+0x1b4>)
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	4b2c      	ldr	r3, [pc, #176]	@ (80075dc <gos_taskUnblock+0x1b4>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d108      	bne.n	8007544 <gos_taskUnblock+0x11c>
 8007532:	4b2b      	ldr	r3, [pc, #172]	@ (80075e0 <gos_taskUnblock+0x1b8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f383 8810 	msr	PRIMASK, r3
 800753a:	b662      	cpsie	i
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	4b27      	ldr	r3, [pc, #156]	@ (80075e4 <gos_taskUnblock+0x1bc>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <gos_taskUnblock+0x130>
 800754c:	4b25      	ldr	r3, [pc, #148]	@ (80075e4 <gos_taskUnblock+0x1bc>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	3b01      	subs	r3, #1
 8007552:	b2da      	uxtb	r2, r3
 8007554:	4b23      	ldr	r3, [pc, #140]	@ (80075e4 <gos_taskUnblock+0x1bc>)
 8007556:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8007558:	4b23      	ldr	r3, [pc, #140]	@ (80075e8 <gos_taskUnblock+0x1c0>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	226a      	movs	r2, #106	@ 0x6a
 800755e:	fb02 f303 	mul.w	r3, r2, r3
 8007562:	3308      	adds	r3, #8
 8007564:	4a21      	ldr	r2, [pc, #132]	@ (80075ec <gos_taskUnblock+0x1c4>)
 8007566:	4413      	add	r3, r2
 8007568:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	216a      	movs	r1, #106	@ 0x6a
 800756e:	fb01 f202 	mul.w	r2, r1, r2
 8007572:	3208      	adds	r2, #8
 8007574:	491d      	ldr	r1, [pc, #116]	@ (80075ec <gos_taskUnblock+0x1c4>)
 8007576:	440a      	add	r2, r1
 8007578:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to unblock <%s>!",
 800757a:	9201      	str	r2, [sp, #4]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	4b1d      	ldr	r3, [pc, #116]	@ (80075f4 <gos_taskUnblock+0x1cc>)
 8007580:	f240 2276 	movw	r2, #630	@ 0x276
 8007584:	491c      	ldr	r1, [pc, #112]	@ (80075f8 <gos_taskUnblock+0x1d0>)
 8007586:	2034      	movs	r0, #52	@ 0x34
 8007588:	f001 f848 	bl	800861c <gos_errorHandler>
 800758c:	e000      	b.n	8007590 <gos_taskUnblock+0x168>
            if (taskDescriptors[taskIndex].taskState == GOS_TASK_BLOCKED)
 800758e:	bf00      	nop
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8007590:	4b12      	ldr	r3, [pc, #72]	@ (80075dc <gos_taskUnblock+0x1b4>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <gos_taskUnblock+0x17c>
 8007598:	4b10      	ldr	r3, [pc, #64]	@ (80075dc <gos_taskUnblock+0x1b4>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	3b01      	subs	r3, #1
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	4b0e      	ldr	r3, [pc, #56]	@ (80075dc <gos_taskUnblock+0x1b4>)
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <gos_taskUnblock+0x1b4>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d108      	bne.n	80075be <gos_taskUnblock+0x196>
 80075ac:	4b0c      	ldr	r3, [pc, #48]	@ (80075e0 <gos_taskUnblock+0x1b8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f383 8810 	msr	PRIMASK, r3
 80075b4:	b662      	cpsie	i
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	4b09      	ldr	r3, [pc, #36]	@ (80075e4 <gos_taskUnblock+0x1bc>)
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <gos_taskUnblock+0x1aa>
 80075c6:	4b07      	ldr	r3, [pc, #28]	@ (80075e4 <gos_taskUnblock+0x1bc>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	4b05      	ldr	r3, [pc, #20]	@ (80075e4 <gos_taskUnblock+0x1bc>)
 80075d0:	701a      	strb	r2, [r3, #0]

    return taskUnblockResult;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20001e9b 	.word	0x20001e9b
 80075e0:	20001e9c 	.word	0x20001e9c
 80075e4:	20001e99 	.word	0x20001e99
 80075e8:	20001ea0 	.word	0x20001ea0
 80075ec:	200001a8 	.word	0x200001a8
 80075f0:	20001e9a 	.word	0x20001e9a
 80075f4:	0800d07c 	.word	0x0800d07c
 80075f8:	0800de1c 	.word	0x0800de1c

080075fc <gos_taskDelete>:

/*
 * Function: gos_taskDelete
 */
GOS_INLINE gos_result_t gos_taskDelete (gos_tid_t taskId)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af02      	add	r7, sp, #8
 8007602:	4603      	mov	r3, r0
 8007604:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskDeleteResult = GOS_ERROR;
 8007606:	23ae      	movs	r3, #174	@ 0xae
 8007608:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800760e:	4b84      	ldr	r3, [pc, #528]	@ (8007820 <gos_taskDelete+0x224>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d108      	bne.n	8007628 <gos_taskDelete+0x2c>
 8007616:	b672      	cpsid	i
 8007618:	f3ef 8310 	mrs	r3, PRIMASK
 800761c:	4a81      	ldr	r2, [pc, #516]	@ (8007824 <gos_taskDelete+0x228>)
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	4b7d      	ldr	r3, [pc, #500]	@ (8007820 <gos_taskDelete+0x224>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	b2da      	uxtb	r2, r3
 8007630:	4b7b      	ldr	r3, [pc, #492]	@ (8007820 <gos_taskDelete+0x224>)
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	4b7c      	ldr	r3, [pc, #496]	@ (8007828 <gos_taskDelete+0x22c>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	3301      	adds	r3, #1
 800763a:	b2da      	uxtb	r2, r3
 800763c:	4b7a      	ldr	r3, [pc, #488]	@ (8007828 <gos_taskDelete+0x22c>)
 800763e:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007646:	f240 80b9 	bls.w	80077bc <gos_taskDelete+0x1c0>
 800764a:	88fb      	ldrh	r3, [r7, #6]
 800764c:	f248 022f 	movw	r2, #32815	@ 0x802f
 8007650:	4293      	cmp	r3, r2
 8007652:	f200 80b3 	bhi.w	80077bc <gos_taskDelete+0x1c0>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007656:	88fb      	ldrh	r3, [r7, #6]
 8007658:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800765c:	60bb      	str	r3, [r7, #8]

        // Check task manipulation privilege.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800765e:	4b73      	ldr	r3, [pc, #460]	@ (800782c <gos_taskDelete+0x230>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a73      	ldr	r2, [pc, #460]	@ (8007830 <gos_taskDelete+0x234>)
 8007664:	216a      	movs	r1, #106	@ 0x6a
 8007666:	fb01 f303 	mul.w	r3, r1, r3
 800766a:	4413      	add	r3, r2
 800766c:	3308      	adds	r3, #8
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b21b      	sxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	db08      	blt.n	8007688 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8007676:	4b6d      	ldr	r3, [pc, #436]	@ (800782c <gos_taskDelete+0x230>)
 8007678:	681b      	ldr	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_MANIPULATE) == GOS_PRIV_TASK_MANIPULATE ||
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	429a      	cmp	r2, r3
 800767e:	d003      	beq.n	8007688 <gos_taskDelete+0x8c>
            currentTaskIndex == taskIndex || inIsr > 0)
 8007680:	4b6c      	ldr	r3, [pc, #432]	@ (8007834 <gos_taskDelete+0x238>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d05e      	beq.n	8007746 <gos_taskDelete+0x14a>
        {
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8007688:	4a69      	ldr	r2, [pc, #420]	@ (8007830 <gos_taskDelete+0x234>)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	216a      	movs	r1, #106	@ 0x6a
 800768e:	fb01 f303 	mul.w	r3, r1, r3
 8007692:	4413      	add	r3, r2
 8007694:	3304      	adds	r3, #4
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b0d      	cmp	r3, #13
 800769a:	f000 808f 	beq.w	80077bc <gos_taskDelete+0x1c0>
            {
                taskDescriptors[taskIndex].taskState = GOS_TASK_ZOMBIE;
 800769e:	4a64      	ldr	r2, [pc, #400]	@ (8007830 <gos_taskDelete+0x234>)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	216a      	movs	r1, #106	@ 0x6a
 80076a4:	fb01 f303 	mul.w	r3, r1, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	3304      	adds	r3, #4
 80076ac:	220d      	movs	r2, #13
 80076ae:	701a      	strb	r2, [r3, #0]
                taskDeleteResult = GOS_SUCCESS;
 80076b0:	2355      	movs	r3, #85	@ 0x55
 80076b2:	73fb      	strb	r3, [r7, #15]

                // Invoke signal.
                if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_SIGNALING) != GOS_PRIV_SIGNALING)
 80076b4:	4b5d      	ldr	r3, [pc, #372]	@ (800782c <gos_taskDelete+0x230>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a5d      	ldr	r2, [pc, #372]	@ (8007830 <gos_taskDelete+0x234>)
 80076ba:	216a      	movs	r1, #106	@ 0x6a
 80076bc:	fb01 f303 	mul.w	r3, r1, r3
 80076c0:	4413      	add	r3, r2
 80076c2:	3308      	adds	r3, #8
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d133      	bne.n	8007736 <gos_taskDelete+0x13a>
                {
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel |= GOS_PRIV_SIGNALING;
 80076ce:	4b57      	ldr	r3, [pc, #348]	@ (800782c <gos_taskDelete+0x230>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a57      	ldr	r2, [pc, #348]	@ (8007830 <gos_taskDelete+0x234>)
 80076d4:	216a      	movs	r1, #106	@ 0x6a
 80076d6:	fb01 f303 	mul.w	r3, r1, r3
 80076da:	4413      	add	r3, r2
 80076dc:	3308      	adds	r3, #8
 80076de:	881a      	ldrh	r2, [r3, #0]
 80076e0:	4b52      	ldr	r3, [pc, #328]	@ (800782c <gos_taskDelete+0x230>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076e8:	b290      	uxth	r0, r2
 80076ea:	4a51      	ldr	r2, [pc, #324]	@ (8007830 <gos_taskDelete+0x234>)
 80076ec:	216a      	movs	r1, #106	@ 0x6a
 80076ee:	fb01 f303 	mul.w	r3, r1, r3
 80076f2:	4413      	add	r3, r2
 80076f4:	3308      	adds	r3, #8
 80076f6:	4602      	mov	r2, r0
 80076f8:	801a      	strh	r2, [r3, #0]
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 80076fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007838 <gos_taskDelete+0x23c>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	88fa      	ldrh	r2, [r7, #6]
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f002 fdcc 	bl	800a2a0 <gos_signalInvoke>
                    taskDescriptors[currentTaskIndex].taskPrivilegeLevel &= ~GOS_PRIV_SIGNALING;
 8007708:	4b48      	ldr	r3, [pc, #288]	@ (800782c <gos_taskDelete+0x230>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a48      	ldr	r2, [pc, #288]	@ (8007830 <gos_taskDelete+0x234>)
 800770e:	216a      	movs	r1, #106	@ 0x6a
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	4413      	add	r3, r2
 8007716:	3308      	adds	r3, #8
 8007718:	881a      	ldrh	r2, [r3, #0]
 800771a:	4b44      	ldr	r3, [pc, #272]	@ (800782c <gos_taskDelete+0x230>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007722:	b290      	uxth	r0, r2
 8007724:	4a42      	ldr	r2, [pc, #264]	@ (8007830 <gos_taskDelete+0x234>)
 8007726:	216a      	movs	r1, #106	@ 0x6a
 8007728:	fb01 f303 	mul.w	r3, r1, r3
 800772c:	4413      	add	r3, r2
 800772e:	3308      	adds	r3, #8
 8007730:	4602      	mov	r2, r0
 8007732:	801a      	strh	r2, [r3, #0]
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8007734:	e042      	b.n	80077bc <gos_taskDelete+0x1c0>
                }
                else
                {
                    (void_t) gos_signalInvoke(kernelTaskDeleteSignal, taskId);
 8007736:	4b40      	ldr	r3, [pc, #256]	@ (8007838 <gos_taskDelete+0x23c>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f002 fdae 	bl	800a2a0 <gos_signalInvoke>
            if (taskDescriptors[taskIndex].taskState != GOS_TASK_ZOMBIE)
 8007744:	e03a      	b.n	80077bc <gos_taskDelete+0x1c0>
                // Nothing to do.
            }
        }
        else
        {
            GOS_ATOMIC_EXIT
 8007746:	4b36      	ldr	r3, [pc, #216]	@ (8007820 <gos_taskDelete+0x224>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <gos_taskDelete+0x15e>
 800774e:	4b34      	ldr	r3, [pc, #208]	@ (8007820 <gos_taskDelete+0x224>)
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	3b01      	subs	r3, #1
 8007754:	b2da      	uxtb	r2, r3
 8007756:	4b32      	ldr	r3, [pc, #200]	@ (8007820 <gos_taskDelete+0x224>)
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	4b31      	ldr	r3, [pc, #196]	@ (8007820 <gos_taskDelete+0x224>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d108      	bne.n	8007774 <gos_taskDelete+0x178>
 8007762:	4b30      	ldr	r3, [pc, #192]	@ (8007824 <gos_taskDelete+0x228>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f383 8810 	msr	PRIMASK, r3
 800776a:	b662      	cpsie	i
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	4b2c      	ldr	r3, [pc, #176]	@ (8007828 <gos_taskDelete+0x22c>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <gos_taskDelete+0x18c>
 800777c:	4b2a      	ldr	r3, [pc, #168]	@ (8007828 <gos_taskDelete+0x22c>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	3b01      	subs	r3, #1
 8007782:	b2da      	uxtb	r2, r3
 8007784:	4b28      	ldr	r3, [pc, #160]	@ (8007828 <gos_taskDelete+0x22c>)
 8007786:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8007788:	4b28      	ldr	r3, [pc, #160]	@ (800782c <gos_taskDelete+0x230>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	226a      	movs	r2, #106	@ 0x6a
 800778e:	fb02 f303 	mul.w	r3, r2, r3
 8007792:	3308      	adds	r3, #8
 8007794:	4a26      	ldr	r2, [pc, #152]	@ (8007830 <gos_taskDelete+0x234>)
 8007796:	4413      	add	r3, r2
 8007798:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	216a      	movs	r1, #106	@ 0x6a
 800779e:	fb01 f202 	mul.w	r2, r1, r2
 80077a2:	3208      	adds	r2, #8
 80077a4:	4922      	ldr	r1, [pc, #136]	@ (8007830 <gos_taskDelete+0x234>)
 80077a6:	440a      	add	r2, r1
 80077a8:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to delete <%s>!",
 80077aa:	9201      	str	r2, [sp, #4]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	4b23      	ldr	r3, [pc, #140]	@ (800783c <gos_taskDelete+0x240>)
 80077b0:	f240 22b6 	movw	r2, #694	@ 0x2b6
 80077b4:	4922      	ldr	r1, [pc, #136]	@ (8007840 <gos_taskDelete+0x244>)
 80077b6:	2034      	movs	r0, #52	@ 0x34
 80077b8:	f000 ff30 	bl	800861c <gos_errorHandler>
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 80077bc:	4b18      	ldr	r3, [pc, #96]	@ (8007820 <gos_taskDelete+0x224>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <gos_taskDelete+0x1d4>
 80077c4:	4b16      	ldr	r3, [pc, #88]	@ (8007820 <gos_taskDelete+0x224>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	4b14      	ldr	r3, [pc, #80]	@ (8007820 <gos_taskDelete+0x224>)
 80077ce:	701a      	strb	r2, [r3, #0]
 80077d0:	4b13      	ldr	r3, [pc, #76]	@ (8007820 <gos_taskDelete+0x224>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d108      	bne.n	80077ea <gos_taskDelete+0x1ee>
 80077d8:	4b12      	ldr	r3, [pc, #72]	@ (8007824 <gos_taskDelete+0x228>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f383 8810 	msr	PRIMASK, r3
 80077e0:	b662      	cpsie	i
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007828 <gos_taskDelete+0x22c>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d005      	beq.n	80077fe <gos_taskDelete+0x202>
 80077f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007828 <gos_taskDelete+0x22c>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007828 <gos_taskDelete+0x22c>)
 80077fc:	701a      	strb	r2, [r3, #0]

    if (taskDeleteResult == GOS_SUCCESS)
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	2b55      	cmp	r3, #85	@ 0x55
 8007802:	d107      	bne.n	8007814 <gos_taskDelete+0x218>
    {
        if (currentTaskIndex == taskIndex)
 8007804:	4b09      	ldr	r3, [pc, #36]	@ (800782c <gos_taskDelete+0x230>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	429a      	cmp	r2, r3
 800780c:	d102      	bne.n	8007814 <gos_taskDelete+0x218>
        {
            gos_kernelReschedule(GOS_UNPRIVILEGED);
 800780e:	2009      	movs	r0, #9
 8007810:	f7fe fd88 	bl	8006324 <gos_kernelReschedule>
    else
    {
        // Nothing to do.
    }

    return taskDeleteResult;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20001e9b 	.word	0x20001e9b
 8007824:	20001e9c 	.word	0x20001e9c
 8007828:	20001e99 	.word	0x20001e99
 800782c:	20001ea0 	.word	0x20001ea0
 8007830:	200001a8 	.word	0x200001a8
 8007834:	20001e9a 	.word	0x20001e9a
 8007838:	20001ec4 	.word	0x20001ec4
 800783c:	0800d0a4 	.word	0x0800d0a4
 8007840:	0800de2c 	.word	0x0800de2c

08007844 <gos_taskSetPriority>:

/*
 * Function: gos_taskSetPriority
 */
GOS_INLINE gos_result_t gos_taskSetPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af02      	add	r7, sp, #8
 800784a:	4603      	mov	r3, r0
 800784c:	460a      	mov	r2, r1
 800784e:	80fb      	strh	r3, [r7, #6]
 8007850:	4613      	mov	r3, r2
 8007852:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 8007854:	23ae      	movs	r3, #174	@ 0xae
 8007856:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8007858:	2300      	movs	r3, #0
 800785a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 800785c:	4b53      	ldr	r3, [pc, #332]	@ (80079ac <gos_taskSetPriority+0x168>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d108      	bne.n	8007876 <gos_taskSetPriority+0x32>
 8007864:	b672      	cpsid	i
 8007866:	f3ef 8310 	mrs	r3, PRIMASK
 800786a:	4a51      	ldr	r2, [pc, #324]	@ (80079b0 <gos_taskSetPriority+0x16c>)
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	4b4d      	ldr	r3, [pc, #308]	@ (80079ac <gos_taskSetPriority+0x168>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	b2da      	uxtb	r2, r3
 800787e:	4b4b      	ldr	r3, [pc, #300]	@ (80079ac <gos_taskSetPriority+0x168>)
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	4b4c      	ldr	r3, [pc, #304]	@ (80079b4 <gos_taskSetPriority+0x170>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	3301      	adds	r3, #1
 8007888:	b2da      	uxtb	r2, r3
 800788a:	4b4a      	ldr	r3, [pc, #296]	@ (80079b4 <gos_taskSetPriority+0x170>)
 800788c:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007894:	d963      	bls.n	800795e <gos_taskSetPriority+0x11a>
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	f248 022f 	movw	r2, #32815	@ 0x802f
 800789c:	4293      	cmp	r3, r2
 800789e:	d85e      	bhi.n	800795e <gos_taskSetPriority+0x11a>
 80078a0:	797b      	ldrb	r3, [r7, #5]
 80078a2:	2bff      	cmp	r3, #255	@ 0xff
 80078a4:	d05b      	beq.n	800795e <gos_taskSetPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 80078a6:	88fb      	ldrh	r3, [r7, #6]
 80078a8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80078ac:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 80078ae:	4b42      	ldr	r3, [pc, #264]	@ (80079b8 <gos_taskSetPriority+0x174>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a42      	ldr	r2, [pc, #264]	@ (80079bc <gos_taskSetPriority+0x178>)
 80078b4:	216a      	movs	r1, #106	@ 0x6a
 80078b6:	fb01 f303 	mul.w	r3, r1, r3
 80078ba:	4413      	add	r3, r2
 80078bc:	3308      	adds	r3, #8
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d103      	bne.n	80078d0 <gos_taskSetPriority+0x8c>
            inIsr > 0)
 80078c8:	4b3d      	ldr	r3, [pc, #244]	@ (80079c0 <gos_taskSetPriority+0x17c>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <gos_taskSetPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskPriority = taskPriority;
 80078d0:	4a3a      	ldr	r2, [pc, #232]	@ (80079bc <gos_taskSetPriority+0x178>)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	216a      	movs	r1, #106	@ 0x6a
 80078d6:	fb01 f303 	mul.w	r3, r1, r3
 80078da:	4413      	add	r3, r2
 80078dc:	3306      	adds	r3, #6
 80078de:	797a      	ldrb	r2, [r7, #5]
 80078e0:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 80078e2:	2355      	movs	r3, #85	@ 0x55
 80078e4:	73fb      	strb	r3, [r7, #15]
 80078e6:	e03a      	b.n	800795e <gos_taskSetPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 80078e8:	4b30      	ldr	r3, [pc, #192]	@ (80079ac <gos_taskSetPriority+0x168>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <gos_taskSetPriority+0xb8>
 80078f0:	4b2e      	ldr	r3, [pc, #184]	@ (80079ac <gos_taskSetPriority+0x168>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	4b2c      	ldr	r3, [pc, #176]	@ (80079ac <gos_taskSetPriority+0x168>)
 80078fa:	701a      	strb	r2, [r3, #0]
 80078fc:	4b2b      	ldr	r3, [pc, #172]	@ (80079ac <gos_taskSetPriority+0x168>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d108      	bne.n	8007916 <gos_taskSetPriority+0xd2>
 8007904:	4b2a      	ldr	r3, [pc, #168]	@ (80079b0 <gos_taskSetPriority+0x16c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f383 8810 	msr	PRIMASK, r3
 800790c:	b662      	cpsie	i
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	4b27      	ldr	r3, [pc, #156]	@ (80079b4 <gos_taskSetPriority+0x170>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d005      	beq.n	800792a <gos_taskSetPriority+0xe6>
 800791e:	4b25      	ldr	r3, [pc, #148]	@ (80079b4 <gos_taskSetPriority+0x170>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	3b01      	subs	r3, #1
 8007924:	b2da      	uxtb	r2, r3
 8007926:	4b23      	ldr	r3, [pc, #140]	@ (80079b4 <gos_taskSetPriority+0x170>)
 8007928:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 800792a:	4b23      	ldr	r3, [pc, #140]	@ (80079b8 <gos_taskSetPriority+0x174>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	226a      	movs	r2, #106	@ 0x6a
 8007930:	fb02 f303 	mul.w	r3, r2, r3
 8007934:	3308      	adds	r3, #8
 8007936:	4a21      	ldr	r2, [pc, #132]	@ (80079bc <gos_taskSetPriority+0x178>)
 8007938:	4413      	add	r3, r2
 800793a:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	216a      	movs	r1, #106	@ 0x6a
 8007940:	fb01 f202 	mul.w	r2, r1, r2
 8007944:	3208      	adds	r2, #8
 8007946:	491d      	ldr	r1, [pc, #116]	@ (80079bc <gos_taskSetPriority+0x178>)
 8007948:	440a      	add	r2, r1
 800794a:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 800794c:	9201      	str	r2, [sp, #4]
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4b1c      	ldr	r3, [pc, #112]	@ (80079c4 <gos_taskSetPriority+0x180>)
 8007952:	f44f 723d 	mov.w	r2, #756	@ 0x2f4
 8007956:	491c      	ldr	r1, [pc, #112]	@ (80079c8 <gos_taskSetPriority+0x184>)
 8007958:	2034      	movs	r0, #52	@ 0x34
 800795a:	f000 fe5f 	bl	800861c <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 800795e:	4b13      	ldr	r3, [pc, #76]	@ (80079ac <gos_taskSetPriority+0x168>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d005      	beq.n	8007972 <gos_taskSetPriority+0x12e>
 8007966:	4b11      	ldr	r3, [pc, #68]	@ (80079ac <gos_taskSetPriority+0x168>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	3b01      	subs	r3, #1
 800796c:	b2da      	uxtb	r2, r3
 800796e:	4b0f      	ldr	r3, [pc, #60]	@ (80079ac <gos_taskSetPriority+0x168>)
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	4b0e      	ldr	r3, [pc, #56]	@ (80079ac <gos_taskSetPriority+0x168>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d108      	bne.n	800798c <gos_taskSetPriority+0x148>
 800797a:	4b0d      	ldr	r3, [pc, #52]	@ (80079b0 <gos_taskSetPriority+0x16c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f383 8810 	msr	PRIMASK, r3
 8007982:	b662      	cpsie	i
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	4b09      	ldr	r3, [pc, #36]	@ (80079b4 <gos_taskSetPriority+0x170>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d005      	beq.n	80079a0 <gos_taskSetPriority+0x15c>
 8007994:	4b07      	ldr	r3, [pc, #28]	@ (80079b4 <gos_taskSetPriority+0x170>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	3b01      	subs	r3, #1
 800799a:	b2da      	uxtb	r2, r3
 800799c:	4b05      	ldr	r3, [pc, #20]	@ (80079b4 <gos_taskSetPriority+0x170>)
 800799e:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20001e9b 	.word	0x20001e9b
 80079b0:	20001e9c 	.word	0x20001e9c
 80079b4:	20001e99 	.word	0x20001e99
 80079b8:	20001ea0 	.word	0x20001ea0
 80079bc:	200001a8 	.word	0x200001a8
 80079c0:	20001e9a 	.word	0x20001e9a
 80079c4:	0800d0cc 	.word	0x0800d0cc
 80079c8:	0800de3c 	.word	0x0800de3c

080079cc <gos_taskSetOriginalPriority>:

/*
 * Function: gos_taskSetOriginalPriority
 */
GOS_INLINE gos_result_t gos_taskSetOriginalPriority (gos_tid_t taskId, gos_taskPrio_t taskPriority)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	4603      	mov	r3, r0
 80079d4:	460a      	mov	r2, r1
 80079d6:	80fb      	strh	r3, [r7, #6]
 80079d8:	4613      	mov	r3, r2
 80079da:	717b      	strb	r3, [r7, #5]
    /*
     * Local variables.
     */
    gos_result_t taskSetPriorityResult = GOS_ERROR;
 80079dc:	23ae      	movs	r3, #174	@ 0xae
 80079de:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80079e4:	4b53      	ldr	r3, [pc, #332]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d108      	bne.n	80079fe <gos_taskSetOriginalPriority+0x32>
 80079ec:	b672      	cpsid	i
 80079ee:	f3ef 8310 	mrs	r3, PRIMASK
 80079f2:	4a51      	ldr	r2, [pc, #324]	@ (8007b38 <gos_taskSetOriginalPriority+0x16c>)
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	4b4d      	ldr	r3, [pc, #308]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	3301      	adds	r3, #1
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	4b4b      	ldr	r3, [pc, #300]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8007b3c <gos_taskSetOriginalPriority+0x170>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4b4a      	ldr	r3, [pc, #296]	@ (8007b3c <gos_taskSetOriginalPriority+0x170>)
 8007a14:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a1c:	d963      	bls.n	8007ae6 <gos_taskSetOriginalPriority+0x11a>
 8007a1e:	88fb      	ldrh	r3, [r7, #6]
 8007a20:	f248 022f 	movw	r2, #32815	@ 0x802f
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d85e      	bhi.n	8007ae6 <gos_taskSetOriginalPriority+0x11a>
 8007a28:	797b      	ldrb	r3, [r7, #5]
 8007a2a:	2bff      	cmp	r3, #255	@ 0xff
 8007a2c:	d05b      	beq.n	8007ae6 <gos_taskSetOriginalPriority+0x11a>
        taskPriority < GOS_TASK_MAX_PRIO_LEVELS)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007a34:	60bb      	str	r3, [r7, #8]

        // Check privilege level.
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8007a36:	4b42      	ldr	r3, [pc, #264]	@ (8007b40 <gos_taskSetOriginalPriority+0x174>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a42      	ldr	r2, [pc, #264]	@ (8007b44 <gos_taskSetOriginalPriority+0x178>)
 8007a3c:	216a      	movs	r1, #106	@ 0x6a
 8007a3e:	fb01 f303 	mul.w	r3, r1, r3
 8007a42:	4413      	add	r3, r2
 8007a44:	3308      	adds	r3, #8
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d103      	bne.n	8007a58 <gos_taskSetOriginalPriority+0x8c>
            inIsr > 0)
 8007a50:	4b3d      	ldr	r3, [pc, #244]	@ (8007b48 <gos_taskSetOriginalPriority+0x17c>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
        if ((taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_PRIV_TASK_PRIO_CHANGE) == GOS_PRIV_TASK_PRIO_CHANGE ||
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <gos_taskSetOriginalPriority+0xa4>
        {
            taskDescriptors[taskIndex].taskOriginalPriority = taskPriority;
 8007a58:	4a3a      	ldr	r2, [pc, #232]	@ (8007b44 <gos_taskSetOriginalPriority+0x178>)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	216a      	movs	r1, #106	@ 0x6a
 8007a5e:	fb01 f303 	mul.w	r3, r1, r3
 8007a62:	4413      	add	r3, r2
 8007a64:	3307      	adds	r3, #7
 8007a66:	797a      	ldrb	r2, [r7, #5]
 8007a68:	701a      	strb	r2, [r3, #0]
            taskSetPriorityResult = GOS_SUCCESS;
 8007a6a:	2355      	movs	r3, #85	@ 0x55
 8007a6c:	73fb      	strb	r3, [r7, #15]
 8007a6e:	e03a      	b.n	8007ae6 <gos_taskSetOriginalPriority+0x11a>
        }
        else
        {
            GOS_ATOMIC_EXIT
 8007a70:	4b30      	ldr	r3, [pc, #192]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <gos_taskSetOriginalPriority+0xb8>
 8007a78:	4b2e      	ldr	r3, [pc, #184]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b2da      	uxtb	r2, r3
 8007a80:	4b2c      	ldr	r3, [pc, #176]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	4b2b      	ldr	r3, [pc, #172]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d108      	bne.n	8007a9e <gos_taskSetOriginalPriority+0xd2>
 8007a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8007b38 <gos_taskSetOriginalPriority+0x16c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f383 8810 	msr	PRIMASK, r3
 8007a94:	b662      	cpsie	i
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	4b27      	ldr	r3, [pc, #156]	@ (8007b3c <gos_taskSetOriginalPriority+0x170>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <gos_taskSetOriginalPriority+0xe6>
 8007aa6:	4b25      	ldr	r3, [pc, #148]	@ (8007b3c <gos_taskSetOriginalPriority+0x170>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	4b23      	ldr	r3, [pc, #140]	@ (8007b3c <gos_taskSetOriginalPriority+0x170>)
 8007ab0:	701a      	strb	r2, [r3, #0]

            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
                taskDescriptors[currentTaskIndex].taskName,
 8007ab2:	4b23      	ldr	r3, [pc, #140]	@ (8007b40 <gos_taskSetOriginalPriority+0x174>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	226a      	movs	r2, #106	@ 0x6a
 8007ab8:	fb02 f303 	mul.w	r3, r2, r3
 8007abc:	3308      	adds	r3, #8
 8007abe:	4a21      	ldr	r2, [pc, #132]	@ (8007b44 <gos_taskSetOriginalPriority+0x178>)
 8007ac0:	4413      	add	r3, r2
 8007ac2:	3302      	adds	r3, #2
                taskDescriptors[taskIndex].taskName
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	216a      	movs	r1, #106	@ 0x6a
 8007ac8:	fb01 f202 	mul.w	r2, r1, r2
 8007acc:	3208      	adds	r2, #8
 8007ace:	491d      	ldr	r1, [pc, #116]	@ (8007b44 <gos_taskSetOriginalPriority+0x178>)
 8007ad0:	440a      	add	r2, r1
 8007ad2:	3202      	adds	r2, #2
            gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "<%s> has no privilege to set the priority of <%s>!",
 8007ad4:	9201      	str	r2, [sp, #4]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8007b4c <gos_taskSetOriginalPriority+0x180>)
 8007ada:	f240 3222 	movw	r2, #802	@ 0x322
 8007ade:	491c      	ldr	r1, [pc, #112]	@ (8007b50 <gos_taskSetOriginalPriority+0x184>)
 8007ae0:	2034      	movs	r0, #52	@ 0x34
 8007ae2:	f000 fd9b 	bl	800861c <gos_errorHandler>
    }
    else
    {
        // Task ID or task priority error.
    }
    GOS_ATOMIC_EXIT
 8007ae6:	4b13      	ldr	r3, [pc, #76]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <gos_taskSetOriginalPriority+0x12e>
 8007aee:	4b11      	ldr	r3, [pc, #68]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	4b0e      	ldr	r3, [pc, #56]	@ (8007b34 <gos_taskSetOriginalPriority+0x168>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d108      	bne.n	8007b14 <gos_taskSetOriginalPriority+0x148>
 8007b02:	4b0d      	ldr	r3, [pc, #52]	@ (8007b38 <gos_taskSetOriginalPriority+0x16c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f383 8810 	msr	PRIMASK, r3
 8007b0a:	b662      	cpsie	i
 8007b0c:	f3bf 8f4f 	dsb	sy
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	4b09      	ldr	r3, [pc, #36]	@ (8007b3c <gos_taskSetOriginalPriority+0x170>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <gos_taskSetOriginalPriority+0x15c>
 8007b1c:	4b07      	ldr	r3, [pc, #28]	@ (8007b3c <gos_taskSetOriginalPriority+0x170>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	4b05      	ldr	r3, [pc, #20]	@ (8007b3c <gos_taskSetOriginalPriority+0x170>)
 8007b26:	701a      	strb	r2, [r3, #0]

    return taskSetPriorityResult;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20001e9b 	.word	0x20001e9b
 8007b38:	20001e9c 	.word	0x20001e9c
 8007b3c:	20001e99 	.word	0x20001e99
 8007b40:	20001ea0 	.word	0x20001ea0
 8007b44:	200001a8 	.word	0x200001a8
 8007b48:	20001e9a 	.word	0x20001e9a
 8007b4c:	0800d0cc 	.word	0x0800d0cc
 8007b50:	0800de50 	.word	0x0800de50

08007b54 <gos_taskGetPriority>:

/*
 * Function: gos_taskGetPriority
 */
gos_result_t gos_taskGetPriority (gos_tid_t taskId, gos_taskPrio_t* taskPriority)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	6039      	str	r1, [r7, #0]
 8007b5e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPriorityResult = GOS_ERROR;
 8007b60:	23ae      	movs	r3, #174	@ 0xae
 8007b62:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex             = 0u;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8007b68:	4b2e      	ldr	r3, [pc, #184]	@ (8007c24 <gos_taskGetPriority+0xd0>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d108      	bne.n	8007b82 <gos_taskGetPriority+0x2e>
 8007b70:	b672      	cpsid	i
 8007b72:	f3ef 8310 	mrs	r3, PRIMASK
 8007b76:	4a2c      	ldr	r2, [pc, #176]	@ (8007c28 <gos_taskGetPriority+0xd4>)
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	4b28      	ldr	r3, [pc, #160]	@ (8007c24 <gos_taskGetPriority+0xd0>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	3301      	adds	r3, #1
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	4b26      	ldr	r3, [pc, #152]	@ (8007c24 <gos_taskGetPriority+0xd0>)
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	4b27      	ldr	r3, [pc, #156]	@ (8007c2c <gos_taskGetPriority+0xd8>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	4b25      	ldr	r3, [pc, #148]	@ (8007c2c <gos_taskGetPriority+0xd8>)
 8007b98:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ba0:	d917      	bls.n	8007bd2 <gos_taskGetPriority+0x7e>
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	f248 022f 	movw	r2, #32815	@ 0x802f
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d812      	bhi.n	8007bd2 <gos_taskGetPriority+0x7e>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00f      	beq.n	8007bd2 <gos_taskGetPriority+0x7e>
        taskPriority != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007bb8:	60bb      	str	r3, [r7, #8]
        *taskPriority = taskDescriptors[taskIndex].taskPriority;
 8007bba:	4a1d      	ldr	r2, [pc, #116]	@ (8007c30 <gos_taskGetPriority+0xdc>)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	216a      	movs	r1, #106	@ 0x6a
 8007bc0:	fb01 f303 	mul.w	r3, r1, r3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3306      	adds	r3, #6
 8007bc8:	781a      	ldrb	r2, [r3, #0]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	701a      	strb	r2, [r3, #0]
        taskGetPriorityResult = GOS_SUCCESS;
 8007bce:	2355      	movs	r3, #85	@ 0x55
 8007bd0:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or task priority is NULL.
    }
    GOS_ATOMIC_EXIT
 8007bd2:	4b14      	ldr	r3, [pc, #80]	@ (8007c24 <gos_taskGetPriority+0xd0>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <gos_taskGetPriority+0x92>
 8007bda:	4b12      	ldr	r3, [pc, #72]	@ (8007c24 <gos_taskGetPriority+0xd0>)
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	4b10      	ldr	r3, [pc, #64]	@ (8007c24 <gos_taskGetPriority+0xd0>)
 8007be4:	701a      	strb	r2, [r3, #0]
 8007be6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c24 <gos_taskGetPriority+0xd0>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d108      	bne.n	8007c00 <gos_taskGetPriority+0xac>
 8007bee:	4b0e      	ldr	r3, [pc, #56]	@ (8007c28 <gos_taskGetPriority+0xd4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f383 8810 	msr	PRIMASK, r3
 8007bf6:	b662      	cpsie	i
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	4b0a      	ldr	r3, [pc, #40]	@ (8007c2c <gos_taskGetPriority+0xd8>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d005      	beq.n	8007c14 <gos_taskGetPriority+0xc0>
 8007c08:	4b08      	ldr	r3, [pc, #32]	@ (8007c2c <gos_taskGetPriority+0xd8>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	4b06      	ldr	r3, [pc, #24]	@ (8007c2c <gos_taskGetPriority+0xd8>)
 8007c12:	701a      	strb	r2, [r3, #0]

    return taskGetPriorityResult;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20001e9b 	.word	0x20001e9b
 8007c28:	20001e9c 	.word	0x20001e9c
 8007c2c:	20001e99 	.word	0x20001e99
 8007c30:	200001a8 	.word	0x200001a8

08007c34 <gos_taskAddPrivilege>:

/*
 * Function: gos_taskAddPrivilege
 */
GOS_INLINE gos_result_t gos_taskAddPrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	460a      	mov	r2, r1
 8007c3e:	80fb      	strh	r3, [r7, #6]
 8007c40:	4613      	mov	r3, r2
 8007c42:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskAddPrivilegeResult = GOS_ERROR;
 8007c44:	23ae      	movs	r3, #174	@ 0xae
 8007c46:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex              = 0u;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8007c4c:	4b31      	ldr	r3, [pc, #196]	@ (8007d14 <gos_taskAddPrivilege+0xe0>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d108      	bne.n	8007c66 <gos_taskAddPrivilege+0x32>
 8007c54:	b672      	cpsid	i
 8007c56:	f3ef 8310 	mrs	r3, PRIMASK
 8007c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8007d18 <gos_taskAddPrivilege+0xe4>)
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	4b2b      	ldr	r3, [pc, #172]	@ (8007d14 <gos_taskAddPrivilege+0xe0>)
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	4b29      	ldr	r3, [pc, #164]	@ (8007d14 <gos_taskAddPrivilege+0xe0>)
 8007c70:	701a      	strb	r2, [r3, #0]
 8007c72:	4b2a      	ldr	r3, [pc, #168]	@ (8007d1c <gos_taskAddPrivilege+0xe8>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	3301      	adds	r3, #1
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	4b28      	ldr	r3, [pc, #160]	@ (8007d1c <gos_taskAddPrivilege+0xe8>)
 8007c7c:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c84:	d91e      	bls.n	8007cc4 <gos_taskAddPrivilege+0x90>
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	f248 022f 	movw	r2, #32815	@ 0x802f
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d819      	bhi.n	8007cc4 <gos_taskAddPrivilege+0x90>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007c90:	88fb      	ldrh	r3, [r7, #6]
 8007c92:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007c96:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel |= privileges;
 8007c98:	4a21      	ldr	r2, [pc, #132]	@ (8007d20 <gos_taskAddPrivilege+0xec>)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	216a      	movs	r1, #106	@ 0x6a
 8007c9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	881a      	ldrh	r2, [r3, #0]
 8007ca8:	88bb      	ldrh	r3, [r7, #4]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	b298      	uxth	r0, r3
 8007cae:	4a1c      	ldr	r2, [pc, #112]	@ (8007d20 <gos_taskAddPrivilege+0xec>)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	216a      	movs	r1, #106	@ 0x6a
 8007cb4:	fb01 f303 	mul.w	r3, r1, r3
 8007cb8:	4413      	add	r3, r2
 8007cba:	3308      	adds	r3, #8
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	801a      	strh	r2, [r3, #0]
        taskAddPrivilegeResult = GOS_SUCCESS;
 8007cc0:	2355      	movs	r3, #85	@ 0x55
 8007cc2:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8007cc4:	4b13      	ldr	r3, [pc, #76]	@ (8007d14 <gos_taskAddPrivilege+0xe0>)
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <gos_taskAddPrivilege+0xa4>
 8007ccc:	4b11      	ldr	r3, [pc, #68]	@ (8007d14 <gos_taskAddPrivilege+0xe0>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8007d14 <gos_taskAddPrivilege+0xe0>)
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d14 <gos_taskAddPrivilege+0xe0>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d108      	bne.n	8007cf2 <gos_taskAddPrivilege+0xbe>
 8007ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <gos_taskAddPrivilege+0xe4>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f383 8810 	msr	PRIMASK, r3
 8007ce8:	b662      	cpsie	i
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8007d1c <gos_taskAddPrivilege+0xe8>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d005      	beq.n	8007d06 <gos_taskAddPrivilege+0xd2>
 8007cfa:	4b08      	ldr	r3, [pc, #32]	@ (8007d1c <gos_taskAddPrivilege+0xe8>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	4b06      	ldr	r3, [pc, #24]	@ (8007d1c <gos_taskAddPrivilege+0xe8>)
 8007d04:	701a      	strb	r2, [r3, #0]

    return taskAddPrivilegeResult;
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	20001e9b 	.word	0x20001e9b
 8007d18:	20001e9c 	.word	0x20001e9c
 8007d1c:	20001e99 	.word	0x20001e99
 8007d20:	200001a8 	.word	0x200001a8

08007d24 <gos_taskRemovePrivilege>:

/*
 * Function: gos_taskRemovePrivilege
 */
GOS_INLINE gos_result_t gos_taskRemovePrivilege (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	460a      	mov	r2, r1
 8007d2e:	80fb      	strh	r3, [r7, #6]
 8007d30:	4613      	mov	r3, r2
 8007d32:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskRemovePrivilegeResult = GOS_ERROR;
 8007d34:	23ae      	movs	r3, #174	@ 0xae
 8007d36:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex                 = 0u;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8007d3c:	4b34      	ldr	r3, [pc, #208]	@ (8007e10 <gos_taskRemovePrivilege+0xec>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d108      	bne.n	8007d56 <gos_taskRemovePrivilege+0x32>
 8007d44:	b672      	cpsid	i
 8007d46:	f3ef 8310 	mrs	r3, PRIMASK
 8007d4a:	4a32      	ldr	r2, [pc, #200]	@ (8007e14 <gos_taskRemovePrivilege+0xf0>)
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	4b2e      	ldr	r3, [pc, #184]	@ (8007e10 <gos_taskRemovePrivilege+0xec>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007e10 <gos_taskRemovePrivilege+0xec>)
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	4b2d      	ldr	r3, [pc, #180]	@ (8007e18 <gos_taskRemovePrivilege+0xf4>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	3301      	adds	r3, #1
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8007e18 <gos_taskRemovePrivilege+0xf4>)
 8007d6c:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8007d6e:	88fb      	ldrh	r3, [r7, #6]
 8007d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d74:	d923      	bls.n	8007dbe <gos_taskRemovePrivilege+0x9a>
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	f248 022f 	movw	r2, #32815	@ 0x802f
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d81e      	bhi.n	8007dbe <gos_taskRemovePrivilege+0x9a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007d80:	88fb      	ldrh	r3, [r7, #6]
 8007d82:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007d86:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel &= ~privileges;
 8007d88:	4a24      	ldr	r2, [pc, #144]	@ (8007e1c <gos_taskRemovePrivilege+0xf8>)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	216a      	movs	r1, #106	@ 0x6a
 8007d8e:	fb01 f303 	mul.w	r3, r1, r3
 8007d92:	4413      	add	r3, r2
 8007d94:	3308      	adds	r3, #8
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	b21a      	sxth	r2, r3
 8007d9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007d9e:	43db      	mvns	r3, r3
 8007da0:	b21b      	sxth	r3, r3
 8007da2:	4013      	ands	r3, r2
 8007da4:	b21b      	sxth	r3, r3
 8007da6:	b298      	uxth	r0, r3
 8007da8:	4a1c      	ldr	r2, [pc, #112]	@ (8007e1c <gos_taskRemovePrivilege+0xf8>)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	216a      	movs	r1, #106	@ 0x6a
 8007dae:	fb01 f303 	mul.w	r3, r1, r3
 8007db2:	4413      	add	r3, r2
 8007db4:	3308      	adds	r3, #8
 8007db6:	4602      	mov	r2, r0
 8007db8:	801a      	strh	r2, [r3, #0]
        taskRemovePrivilegeResult = GOS_SUCCESS;
 8007dba:	2355      	movs	r3, #85	@ 0x55
 8007dbc:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8007dbe:	4b14      	ldr	r3, [pc, #80]	@ (8007e10 <gos_taskRemovePrivilege+0xec>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d005      	beq.n	8007dd2 <gos_taskRemovePrivilege+0xae>
 8007dc6:	4b12      	ldr	r3, [pc, #72]	@ (8007e10 <gos_taskRemovePrivilege+0xec>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	4b10      	ldr	r3, [pc, #64]	@ (8007e10 <gos_taskRemovePrivilege+0xec>)
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e10 <gos_taskRemovePrivilege+0xec>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d108      	bne.n	8007dec <gos_taskRemovePrivilege+0xc8>
 8007dda:	4b0e      	ldr	r3, [pc, #56]	@ (8007e14 <gos_taskRemovePrivilege+0xf0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f383 8810 	msr	PRIMASK, r3
 8007de2:	b662      	cpsie	i
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	4b0a      	ldr	r3, [pc, #40]	@ (8007e18 <gos_taskRemovePrivilege+0xf4>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <gos_taskRemovePrivilege+0xdc>
 8007df4:	4b08      	ldr	r3, [pc, #32]	@ (8007e18 <gos_taskRemovePrivilege+0xf4>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	4b06      	ldr	r3, [pc, #24]	@ (8007e18 <gos_taskRemovePrivilege+0xf4>)
 8007dfe:	701a      	strb	r2, [r3, #0]

    return taskRemovePrivilegeResult;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20001e9b 	.word	0x20001e9b
 8007e14:	20001e9c 	.word	0x20001e9c
 8007e18:	20001e99 	.word	0x20001e99
 8007e1c:	200001a8 	.word	0x200001a8

08007e20 <gos_taskSetPrivileges>:

/*
 * Function: gos_taskSetPrivileges
 */
GOS_INLINE gos_result_t gos_taskSetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t privileges)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	4603      	mov	r3, r0
 8007e28:	460a      	mov	r2, r1
 8007e2a:	80fb      	strh	r3, [r7, #6]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskSetPrivilegesResult = GOS_ERROR;
 8007e30:	23ae      	movs	r3, #174	@ 0xae
 8007e32:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8007e38:	4b2c      	ldr	r3, [pc, #176]	@ (8007eec <gos_taskSetPrivileges+0xcc>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d108      	bne.n	8007e52 <gos_taskSetPrivileges+0x32>
 8007e40:	b672      	cpsid	i
 8007e42:	f3ef 8310 	mrs	r3, PRIMASK
 8007e46:	4a2a      	ldr	r2, [pc, #168]	@ (8007ef0 <gos_taskSetPrivileges+0xd0>)
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	4b26      	ldr	r3, [pc, #152]	@ (8007eec <gos_taskSetPrivileges+0xcc>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	3301      	adds	r3, #1
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	4b24      	ldr	r3, [pc, #144]	@ (8007eec <gos_taskSetPrivileges+0xcc>)
 8007e5c:	701a      	strb	r2, [r3, #0]
 8007e5e:	4b25      	ldr	r3, [pc, #148]	@ (8007ef4 <gos_taskSetPrivileges+0xd4>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	3301      	adds	r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	4b23      	ldr	r3, [pc, #140]	@ (8007ef4 <gos_taskSetPrivileges+0xd4>)
 8007e68:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER)
 8007e6a:	88fb      	ldrh	r3, [r7, #6]
 8007e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e70:	d913      	bls.n	8007e9a <gos_taskSetPrivileges+0x7a>
 8007e72:	88fb      	ldrh	r3, [r7, #6]
 8007e74:	f248 022f 	movw	r2, #32815	@ 0x802f
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d80e      	bhi.n	8007e9a <gos_taskSetPrivileges+0x7a>
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007e7c:	88fb      	ldrh	r3, [r7, #6]
 8007e7e:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007e82:	60bb      	str	r3, [r7, #8]
        taskDescriptors[taskIndex].taskPrivilegeLevel = privileges;
 8007e84:	4a1c      	ldr	r2, [pc, #112]	@ (8007ef8 <gos_taskSetPrivileges+0xd8>)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	216a      	movs	r1, #106	@ 0x6a
 8007e8a:	fb01 f303 	mul.w	r3, r1, r3
 8007e8e:	4413      	add	r3, r2
 8007e90:	3308      	adds	r3, #8
 8007e92:	88ba      	ldrh	r2, [r7, #4]
 8007e94:	801a      	strh	r2, [r3, #0]
        taskSetPrivilegesResult = GOS_SUCCESS;
 8007e96:	2355      	movs	r3, #85	@ 0x55
 8007e98:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error.
    }
    GOS_ATOMIC_EXIT
 8007e9a:	4b14      	ldr	r3, [pc, #80]	@ (8007eec <gos_taskSetPrivileges+0xcc>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <gos_taskSetPrivileges+0x8e>
 8007ea2:	4b12      	ldr	r3, [pc, #72]	@ (8007eec <gos_taskSetPrivileges+0xcc>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	4b10      	ldr	r3, [pc, #64]	@ (8007eec <gos_taskSetPrivileges+0xcc>)
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	4b0f      	ldr	r3, [pc, #60]	@ (8007eec <gos_taskSetPrivileges+0xcc>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d108      	bne.n	8007ec8 <gos_taskSetPrivileges+0xa8>
 8007eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8007ef0 <gos_taskSetPrivileges+0xd0>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f383 8810 	msr	PRIMASK, r3
 8007ebe:	b662      	cpsie	i
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef4 <gos_taskSetPrivileges+0xd4>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d005      	beq.n	8007edc <gos_taskSetPrivileges+0xbc>
 8007ed0:	4b08      	ldr	r3, [pc, #32]	@ (8007ef4 <gos_taskSetPrivileges+0xd4>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	4b06      	ldr	r3, [pc, #24]	@ (8007ef4 <gos_taskSetPrivileges+0xd4>)
 8007eda:	701a      	strb	r2, [r3, #0]

    return taskSetPrivilegesResult;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	20001e9b 	.word	0x20001e9b
 8007ef0:	20001e9c 	.word	0x20001e9c
 8007ef4:	20001e99 	.word	0x20001e99
 8007ef8:	200001a8 	.word	0x200001a8

08007efc <gos_taskGetPrivileges>:

/*
 * Function: gos_taskGetPrivileges
 */
GOS_INLINE gos_result_t gos_taskGetPrivileges (gos_tid_t taskId, gos_taskPrivilegeLevel_t* privileges)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	6039      	str	r1, [r7, #0]
 8007f06:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetPrivilegesResult = GOS_ERROR;
 8007f08:	23ae      	movs	r3, #174	@ 0xae
 8007f0a:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex               = 0u;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8007f10:	4b2e      	ldr	r3, [pc, #184]	@ (8007fcc <gos_taskGetPrivileges+0xd0>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d108      	bne.n	8007f2a <gos_taskGetPrivileges+0x2e>
 8007f18:	b672      	cpsid	i
 8007f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8007fd0 <gos_taskGetPrivileges+0xd4>)
 8007f20:	6013      	str	r3, [r2, #0]
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	4b28      	ldr	r3, [pc, #160]	@ (8007fcc <gos_taskGetPrivileges+0xd0>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	4b26      	ldr	r3, [pc, #152]	@ (8007fcc <gos_taskGetPrivileges+0xd0>)
 8007f34:	701a      	strb	r2, [r3, #0]
 8007f36:	4b27      	ldr	r3, [pc, #156]	@ (8007fd4 <gos_taskGetPrivileges+0xd8>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	4b25      	ldr	r3, [pc, #148]	@ (8007fd4 <gos_taskGetPrivileges+0xd8>)
 8007f40:	701a      	strb	r2, [r3, #0]
    if (taskId > GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f48:	d917      	bls.n	8007f7a <gos_taskGetPrivileges+0x7e>
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	f248 022f 	movw	r2, #32815	@ 0x802f
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d812      	bhi.n	8007f7a <gos_taskGetPrivileges+0x7e>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00f      	beq.n	8007f7a <gos_taskGetPrivileges+0x7e>
        privileges != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8007f5a:	88fb      	ldrh	r3, [r7, #6]
 8007f5c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8007f60:	60bb      	str	r3, [r7, #8]

        *privileges = taskDescriptors[taskIndex].taskPrivilegeLevel;
 8007f62:	4a1d      	ldr	r2, [pc, #116]	@ (8007fd8 <gos_taskGetPrivileges+0xdc>)
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	216a      	movs	r1, #106	@ 0x6a
 8007f68:	fb01 f303 	mul.w	r3, r1, r3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	3308      	adds	r3, #8
 8007f70:	881a      	ldrh	r2, [r3, #0]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	801a      	strh	r2, [r3, #0]
        taskGetPrivilegesResult = GOS_SUCCESS;
 8007f76:	2355      	movs	r3, #85	@ 0x55
 8007f78:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID error or privileges is NULL pointer.
    }
    GOS_ATOMIC_EXIT
 8007f7a:	4b14      	ldr	r3, [pc, #80]	@ (8007fcc <gos_taskGetPrivileges+0xd0>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d005      	beq.n	8007f8e <gos_taskGetPrivileges+0x92>
 8007f82:	4b12      	ldr	r3, [pc, #72]	@ (8007fcc <gos_taskGetPrivileges+0xd0>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	4b10      	ldr	r3, [pc, #64]	@ (8007fcc <gos_taskGetPrivileges+0xd0>)
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8007fcc <gos_taskGetPrivileges+0xd0>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d108      	bne.n	8007fa8 <gos_taskGetPrivileges+0xac>
 8007f96:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd0 <gos_taskGetPrivileges+0xd4>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f383 8810 	msr	PRIMASK, r3
 8007f9e:	b662      	cpsie	i
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd4 <gos_taskGetPrivileges+0xd8>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d005      	beq.n	8007fbc <gos_taskGetPrivileges+0xc0>
 8007fb0:	4b08      	ldr	r3, [pc, #32]	@ (8007fd4 <gos_taskGetPrivileges+0xd8>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	4b06      	ldr	r3, [pc, #24]	@ (8007fd4 <gos_taskGetPrivileges+0xd8>)
 8007fba:	701a      	strb	r2, [r3, #0]

    return taskGetPrivilegesResult;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	20001e9b 	.word	0x20001e9b
 8007fd0:	20001e9c 	.word	0x20001e9c
 8007fd4:	20001e99 	.word	0x20001e99
 8007fd8:	200001a8 	.word	0x200001a8

08007fdc <gos_taskGetId>:

/*
 * Function: gos_taskGetId
 */
gos_result_t gos_taskGetId (gos_taskName_t taskName, gos_tid_t* taskId)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t taskGetIdResult = GOS_ERROR;
 8007fe6:	23ae      	movs	r3, #174	@ 0xae
 8007fe8:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex       = 0u;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60bb      	str	r3, [r7, #8]
 8007ff2:	e01e      	b.n	8008032 <gos_taskGetId+0x56>
    {
        if (strcmp(taskName, taskDescriptors[taskIndex].taskName) == 0u)
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	226a      	movs	r2, #106	@ 0x6a
 8007ff8:	fb02 f303 	mul.w	r3, r2, r3
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	4a12      	ldr	r2, [pc, #72]	@ (8008048 <gos_taskGetId+0x6c>)
 8008000:	4413      	add	r3, r2
 8008002:	3302      	adds	r3, #2
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7f8 f8ea 	bl	80001e0 <strcmp>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10c      	bne.n	800802c <gos_taskGetId+0x50>
        {
            *taskId = taskDescriptors[taskIndex].taskId;
 8008012:	4a0d      	ldr	r2, [pc, #52]	@ (8008048 <gos_taskGetId+0x6c>)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	216a      	movs	r1, #106	@ 0x6a
 8008018:	fb01 f303 	mul.w	r3, r1, r3
 800801c:	4413      	add	r3, r2
 800801e:	332a      	adds	r3, #42	@ 0x2a
 8008020:	881a      	ldrh	r2, [r3, #0]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	801a      	strh	r2, [r3, #0]
            taskGetIdResult = GOS_SUCCESS;
 8008026:	2355      	movs	r3, #85	@ 0x55
 8008028:	73fb      	strb	r3, [r7, #15]
            break;
 800802a:	e008      	b.n	800803e <gos_taskGetId+0x62>
    for (taskIndex = 0u; taskIndex < CFG_TASK_MAX_NUMBER && taskId != NULL; taskIndex++)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	3301      	adds	r3, #1
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b2f      	cmp	r3, #47	@ 0x2f
 8008036:	d802      	bhi.n	800803e <gos_taskGetId+0x62>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1da      	bne.n	8007ff4 <gos_taskGetId+0x18>
        {
            // Continue.
        }
    }

    return taskGetIdResult;
 800803e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	200001a8 	.word	0x200001a8

0800804c <gos_taskGetCurrentId>:

/*
 * Function: gos_taskGetCurrentId
 */
GOS_INLINE gos_result_t gos_taskGetCurrentId (gos_tid_t* taskId)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskGetCurrentIdResult = GOS_ERROR;
 8008054:	23ae      	movs	r3, #174	@ 0xae
 8008056:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8008058:	4b26      	ldr	r3, [pc, #152]	@ (80080f4 <gos_taskGetCurrentId+0xa8>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d108      	bne.n	8008072 <gos_taskGetCurrentId+0x26>
 8008060:	b672      	cpsid	i
 8008062:	f3ef 8310 	mrs	r3, PRIMASK
 8008066:	4a24      	ldr	r2, [pc, #144]	@ (80080f8 <gos_taskGetCurrentId+0xac>)
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	4b20      	ldr	r3, [pc, #128]	@ (80080f4 <gos_taskGetCurrentId+0xa8>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	3301      	adds	r3, #1
 8008078:	b2da      	uxtb	r2, r3
 800807a:	4b1e      	ldr	r3, [pc, #120]	@ (80080f4 <gos_taskGetCurrentId+0xa8>)
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	4b1f      	ldr	r3, [pc, #124]	@ (80080fc <gos_taskGetCurrentId+0xb0>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	3301      	adds	r3, #1
 8008084:	b2da      	uxtb	r2, r3
 8008086:	4b1d      	ldr	r3, [pc, #116]	@ (80080fc <gos_taskGetCurrentId+0xb0>)
 8008088:	701a      	strb	r2, [r3, #0]
    if (taskId != NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d009      	beq.n	80080a4 <gos_taskGetCurrentId+0x58>
    {
        *taskId = (gos_tid_t)(GOS_DEFAULT_TASK_ID + currentTaskIndex);
 8008090:	4b1b      	ldr	r3, [pc, #108]	@ (8008100 <gos_taskGetCurrentId+0xb4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b29b      	uxth	r3, r3
 8008096:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800809a:	b29a      	uxth	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	801a      	strh	r2, [r3, #0]
        taskGetCurrentIdResult = GOS_SUCCESS;
 80080a0:	2355      	movs	r3, #85	@ 0x55
 80080a2:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task ID pointer is NULL.
    }
    GOS_ATOMIC_EXIT
 80080a4:	4b13      	ldr	r3, [pc, #76]	@ (80080f4 <gos_taskGetCurrentId+0xa8>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <gos_taskGetCurrentId+0x6c>
 80080ac:	4b11      	ldr	r3, [pc, #68]	@ (80080f4 <gos_taskGetCurrentId+0xa8>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	4b0f      	ldr	r3, [pc, #60]	@ (80080f4 <gos_taskGetCurrentId+0xa8>)
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	4b0e      	ldr	r3, [pc, #56]	@ (80080f4 <gos_taskGetCurrentId+0xa8>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d108      	bne.n	80080d2 <gos_taskGetCurrentId+0x86>
 80080c0:	4b0d      	ldr	r3, [pc, #52]	@ (80080f8 <gos_taskGetCurrentId+0xac>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f383 8810 	msr	PRIMASK, r3
 80080c8:	b662      	cpsie	i
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	4b0a      	ldr	r3, [pc, #40]	@ (80080fc <gos_taskGetCurrentId+0xb0>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <gos_taskGetCurrentId+0x9a>
 80080da:	4b08      	ldr	r3, [pc, #32]	@ (80080fc <gos_taskGetCurrentId+0xb0>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	3b01      	subs	r3, #1
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	4b06      	ldr	r3, [pc, #24]	@ (80080fc <gos_taskGetCurrentId+0xb0>)
 80080e4:	701a      	strb	r2, [r3, #0]

    return taskGetCurrentIdResult;
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	20001e9b 	.word	0x20001e9b
 80080f8:	20001e9c 	.word	0x20001e9c
 80080fc:	20001e99 	.word	0x20001e99
 8008100:	20001ea0 	.word	0x20001ea0

08008104 <gos_taskGetData>:

/*
 * Function: gos_taskGetData
 */
gos_result_t gos_taskGetData (gos_tid_t taskId, gos_taskDescriptor_t* taskData)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 8008110:	23ae      	movs	r3, #174	@ 0xae
 8008112:	73fb      	strb	r3, [r7, #15]
    u32_t        taskIndex         = 0u;
 8008114:	2300      	movs	r3, #0
 8008116:	60bb      	str	r3, [r7, #8]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 8008118:	4b2d      	ldr	r3, [pc, #180]	@ (80081d0 <gos_taskGetData+0xcc>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d108      	bne.n	8008132 <gos_taskGetData+0x2e>
 8008120:	b672      	cpsid	i
 8008122:	f3ef 8310 	mrs	r3, PRIMASK
 8008126:	4a2b      	ldr	r2, [pc, #172]	@ (80081d4 <gos_taskGetData+0xd0>)
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	4b27      	ldr	r3, [pc, #156]	@ (80081d0 <gos_taskGetData+0xcc>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	3301      	adds	r3, #1
 8008138:	b2da      	uxtb	r2, r3
 800813a:	4b25      	ldr	r3, [pc, #148]	@ (80081d0 <gos_taskGetData+0xcc>)
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	4b26      	ldr	r3, [pc, #152]	@ (80081d8 <gos_taskGetData+0xd4>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	3301      	adds	r3, #1
 8008144:	b2da      	uxtb	r2, r3
 8008146:	4b24      	ldr	r3, [pc, #144]	@ (80081d8 <gos_taskGetData+0xd4>)
 8008148:	701a      	strb	r2, [r3, #0]
    if (taskId >= GOS_DEFAULT_TASK_ID && (taskId - GOS_DEFAULT_TASK_ID) < CFG_TASK_MAX_NUMBER &&
 800814a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800814e:	2b00      	cmp	r3, #0
 8008150:	da18      	bge.n	8008184 <gos_taskGetData+0x80>
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	f248 022f 	movw	r2, #32815	@ 0x802f
 8008158:	4293      	cmp	r3, r2
 800815a:	d813      	bhi.n	8008184 <gos_taskGetData+0x80>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d010      	beq.n	8008184 <gos_taskGetData+0x80>
        taskData != NULL)
    {
        taskIndex = (u32_t)(taskId - GOS_DEFAULT_TASK_ID);
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8008168:	60bb      	str	r3, [r7, #8]

        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	226a      	movs	r2, #106	@ 0x6a
 800816e:	fb02 f303 	mul.w	r3, r2, r3
 8008172:	4a1a      	ldr	r2, [pc, #104]	@ (80081dc <gos_taskGetData+0xd8>)
 8008174:	4413      	add	r3, r2
 8008176:	226a      	movs	r2, #106	@ 0x6a
 8008178:	4619      	mov	r1, r3
 800817a:	6838      	ldr	r0, [r7, #0]
 800817c:	f003 ff88 	bl	800c090 <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8008180:	2355      	movs	r3, #85	@ 0x55
 8008182:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 8008184:	4b12      	ldr	r3, [pc, #72]	@ (80081d0 <gos_taskGetData+0xcc>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <gos_taskGetData+0x94>
 800818c:	4b10      	ldr	r3, [pc, #64]	@ (80081d0 <gos_taskGetData+0xcc>)
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	3b01      	subs	r3, #1
 8008192:	b2da      	uxtb	r2, r3
 8008194:	4b0e      	ldr	r3, [pc, #56]	@ (80081d0 <gos_taskGetData+0xcc>)
 8008196:	701a      	strb	r2, [r3, #0]
 8008198:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <gos_taskGetData+0xcc>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d108      	bne.n	80081b2 <gos_taskGetData+0xae>
 80081a0:	4b0c      	ldr	r3, [pc, #48]	@ (80081d4 <gos_taskGetData+0xd0>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f383 8810 	msr	PRIMASK, r3
 80081a8:	b662      	cpsie	i
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	4b09      	ldr	r3, [pc, #36]	@ (80081d8 <gos_taskGetData+0xd4>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <gos_taskGetData+0xc2>
 80081ba:	4b07      	ldr	r3, [pc, #28]	@ (80081d8 <gos_taskGetData+0xd4>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	3b01      	subs	r3, #1
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	4b05      	ldr	r3, [pc, #20]	@ (80081d8 <gos_taskGetData+0xd4>)
 80081c4:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20001e9b 	.word	0x20001e9b
 80081d4:	20001e9c 	.word	0x20001e9c
 80081d8:	20001e99 	.word	0x20001e99
 80081dc:	200001a8 	.word	0x200001a8

080081e0 <gos_taskGetDataByIndex>:

/*
 * Function: gos_taskGetDataByIndex
 */
gos_result_t gos_taskGetDataByIndex (u16_t taskIndex, gos_taskDescriptor_t* taskData)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	6039      	str	r1, [r7, #0]
 80081ea:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t taskGetDataResult = GOS_ERROR;
 80081ec:	23ae      	movs	r3, #174	@ 0xae
 80081ee:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    GOS_ATOMIC_ENTER
 80081f0:	4b2f      	ldr	r3, [pc, #188]	@ (80082b0 <gos_taskGetDataByIndex+0xd0>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d108      	bne.n	800820a <gos_taskGetDataByIndex+0x2a>
 80081f8:	b672      	cpsid	i
 80081fa:	f3ef 8310 	mrs	r3, PRIMASK
 80081fe:	4a2d      	ldr	r2, [pc, #180]	@ (80082b4 <gos_taskGetDataByIndex+0xd4>)
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	4b29      	ldr	r3, [pc, #164]	@ (80082b0 <gos_taskGetDataByIndex+0xd0>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	3301      	adds	r3, #1
 8008210:	b2da      	uxtb	r2, r3
 8008212:	4b27      	ldr	r3, [pc, #156]	@ (80082b0 <gos_taskGetDataByIndex+0xd0>)
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	4b28      	ldr	r3, [pc, #160]	@ (80082b8 <gos_taskGetDataByIndex+0xd8>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	3301      	adds	r3, #1
 800821c:	b2da      	uxtb	r2, r3
 800821e:	4b26      	ldr	r3, [pc, #152]	@ (80082b8 <gos_taskGetDataByIndex+0xd8>)
 8008220:	701a      	strb	r2, [r3, #0]
    if (taskIndex < CFG_TASK_MAX_NUMBER &&
 8008222:	88fb      	ldrh	r3, [r7, #6]
 8008224:	2b2f      	cmp	r3, #47	@ 0x2f
 8008226:	d81d      	bhi.n	8008264 <gos_taskGetDataByIndex+0x84>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d01a      	beq.n	8008264 <gos_taskGetDataByIndex+0x84>
        taskData != NULL &&
        (taskDescriptors[currentTaskIndex].taskPrivilegeLevel & GOS_TASK_PRIVILEGE_KERNEL) == GOS_TASK_PRIVILEGE_KERNEL)
 800822e:	4b23      	ldr	r3, [pc, #140]	@ (80082bc <gos_taskGetDataByIndex+0xdc>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a23      	ldr	r2, [pc, #140]	@ (80082c0 <gos_taskGetDataByIndex+0xe0>)
 8008234:	216a      	movs	r1, #106	@ 0x6a
 8008236:	fb01 f303 	mul.w	r3, r1, r3
 800823a:	4413      	add	r3, r2
 800823c:	3308      	adds	r3, #8
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
        taskData != NULL &&
 8008244:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8008248:	d10c      	bne.n	8008264 <gos_taskGetDataByIndex+0x84>
    {
        (void_t) memcpy((void*)taskData, (void*)&taskDescriptors[taskIndex], sizeof(*taskData));
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	226a      	movs	r2, #106	@ 0x6a
 800824e:	fb02 f303 	mul.w	r3, r2, r3
 8008252:	4a1b      	ldr	r2, [pc, #108]	@ (80082c0 <gos_taskGetDataByIndex+0xe0>)
 8008254:	4413      	add	r3, r2
 8008256:	226a      	movs	r2, #106	@ 0x6a
 8008258:	4619      	mov	r1, r3
 800825a:	6838      	ldr	r0, [r7, #0]
 800825c:	f003 ff18 	bl	800c090 <memcpy>

        taskGetDataResult = GOS_SUCCESS;
 8008260:	2355      	movs	r3, #85	@ 0x55
 8008262:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
        // Task data does not exist.
    }
    GOS_ATOMIC_EXIT
 8008264:	4b12      	ldr	r3, [pc, #72]	@ (80082b0 <gos_taskGetDataByIndex+0xd0>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d005      	beq.n	8008278 <gos_taskGetDataByIndex+0x98>
 800826c:	4b10      	ldr	r3, [pc, #64]	@ (80082b0 <gos_taskGetDataByIndex+0xd0>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	3b01      	subs	r3, #1
 8008272:	b2da      	uxtb	r2, r3
 8008274:	4b0e      	ldr	r3, [pc, #56]	@ (80082b0 <gos_taskGetDataByIndex+0xd0>)
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	4b0d      	ldr	r3, [pc, #52]	@ (80082b0 <gos_taskGetDataByIndex+0xd0>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d108      	bne.n	8008292 <gos_taskGetDataByIndex+0xb2>
 8008280:	4b0c      	ldr	r3, [pc, #48]	@ (80082b4 <gos_taskGetDataByIndex+0xd4>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f383 8810 	msr	PRIMASK, r3
 8008288:	b662      	cpsie	i
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	4b09      	ldr	r3, [pc, #36]	@ (80082b8 <gos_taskGetDataByIndex+0xd8>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <gos_taskGetDataByIndex+0xc6>
 800829a:	4b07      	ldr	r3, [pc, #28]	@ (80082b8 <gos_taskGetDataByIndex+0xd8>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	3b01      	subs	r3, #1
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	4b05      	ldr	r3, [pc, #20]	@ (80082b8 <gos_taskGetDataByIndex+0xd8>)
 80082a4:	701a      	strb	r2, [r3, #0]

    return taskGetDataResult;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20001e9b 	.word	0x20001e9b
 80082b4:	20001e9c 	.word	0x20001e9c
 80082b8:	20001e99 	.word	0x20001e99
 80082bc:	20001ea0 	.word	0x20001ea0
 80082c0:	200001a8 	.word	0x200001a8

080082c4 <gos_taskCheckDescriptor>:
 *                              - Stack size is smaller than the minimum allowed
 *                              - Stack size is greater than the maximum allowed
 *                              - Stack size is not 4-byte aligned
 */
GOS_STATIC gos_result_t gos_taskCheckDescriptor (gos_taskDescriptor_t* taskDescriptor)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t taskDescCheckResult = GOS_SUCCESS;
 80082cc:	2355      	movs	r3, #85	@ 0x55
 80082ce:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (taskDescriptor->taskFunction == NULL                    ||
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d020      	beq.n	800831a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPrivilegeLevel == 0                 ||
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	891b      	ldrh	r3, [r3, #8]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d01b      	beq.n	800831a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
        taskDescriptor->taskFunction == gos_idleTask      ||
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
        taskDescriptor->taskPriority > GOS_TASK_MAX_PRIO_LEVELS ||
 80082e6:	4a11      	ldr	r2, [pc, #68]	@ (800832c <gos_taskCheckDescriptor+0x68>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d016      	beq.n	800831a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80082f2:	b29b      	uxth	r3, r3
        taskDescriptor->taskFunction == gos_idleTask      ||
 80082f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082f8:	d80f      	bhi.n	800831a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008300:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize > CFG_TASK_MAX_STACK_SIZE ||
 8008302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008306:	d308      	bcc.n	800831a <gos_taskCheckDescriptor+0x56>
        taskDescriptor->taskStackSize % 4 != 0u)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800830e:	b29b      	uxth	r3, r3
 8008310:	f003 0303 	and.w	r3, r3, #3
 8008314:	b29b      	uxth	r3, r3
        taskDescriptor->taskStackSize < CFG_TASK_MIN_STACK_SIZE ||
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <gos_taskCheckDescriptor+0x5a>
    {
        taskDescCheckResult = GOS_ERROR;
 800831a:	23ae      	movs	r3, #174	@ 0xae
 800831c:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Task descriptor OK.
    }

    return taskDescCheckResult;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	08008331 	.word	0x08008331

08008330 <gos_idleTask>:
 *          When executed, this function refreshes the CPU-usage statistics of tasks.
 *
 * @return    -
 */
void_t gos_idleTask (void_t)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_errorTraceInit("Starting OS...", GOS_SUCCESS);
 8008336:	2155      	movs	r1, #85	@ 0x55
 8008338:	480c      	ldr	r0, [pc, #48]	@ (800836c <gos_idleTask+0x3c>)
 800833a:	f000 fa07 	bl	800874c <gos_errorTraceInit>

    for (;;)
    {
        taskDescriptors[0].taskRunCounter++;
 800833e:	4b0c      	ldr	r3, [pc, #48]	@ (8008370 <gos_idleTask+0x40>)
 8008340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008342:	3301      	adds	r3, #1
 8008344:	4a0a      	ldr	r2, [pc, #40]	@ (8008370 <gos_idleTask+0x40>)
 8008346:	6413      	str	r3, [r2, #64]	@ 0x40

        if (kernelIdleHookFunction != NULL)
 8008348:	4b0a      	ldr	r3, [pc, #40]	@ (8008374 <gos_idleTask+0x44>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <gos_idleTask+0x26>
        {
            kernelIdleHookFunction();
 8008350:	4b08      	ldr	r3, [pc, #32]	@ (8008374 <gos_idleTask+0x44>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4798      	blx	r3
        else
        {
            // Idle hook does not exist.
        }

        gos_kernelCalculateTaskCpuUsages(GOS_FALSE);
 8008356:	2049      	movs	r0, #73	@ 0x49
 8008358:	f7fd fad6 	bl	8005908 <gos_kernelCalculateTaskCpuUsages>
    gos_result_t taskYieldResult = GOS_SUCCESS;
 800835c:	2355      	movs	r3, #85	@ 0x55
 800835e:	71fb      	strb	r3, [r7, #7]
    gos_kernelReschedule(GOS_UNPRIVILEGED);
 8008360:	2009      	movs	r0, #9
 8008362:	f7fd ffdf 	bl	8006324 <gos_kernelReschedule>
    return taskYieldResult;
 8008366:	bf00      	nop
        taskDescriptors[0].taskRunCounter++;
 8008368:	e7e9      	b.n	800833e <gos_idleTask+0xe>
 800836a:	bf00      	nop
 800836c:	0800d100 	.word	0x0800d100
 8008370:	200001a8 	.word	0x200001a8
 8008374:	20001ec8 	.word	0x20001ec8

08008378 <main>:

/*
 * Main
 */
int main (void_t)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
    gos_result_t platformDriverInitResult;

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 800837e:	4b1d      	ldr	r3, [pc, #116]	@ (80083f4 <main+0x7c>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	3301      	adds	r3, #1
 8008384:	b2da      	uxtb	r2, r3
 8008386:	4b1b      	ldr	r3, [pc, #108]	@ (80083f4 <main+0x7c>)
 8008388:	701a      	strb	r2, [r3, #0]

    // Initialize platform drivers.
    platformDriverInitResult = gos_platformDriverInit();
 800838a:	f7f8 f909 	bl	80005a0 <gos_platformDriverInit>
 800838e:	4603      	mov	r3, r0
 8008390:	71fb      	strb	r3, [r7, #7]

    // Print startup logo.
    gos_printStartupLogo();
 8008392:	f000 f909 	bl	80085a8 <gos_printStartupLogo>

    // Pre-initialize.
    (void_t) gos_errorTraceInit("Platform driver initialization", platformDriverInitResult);
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	4619      	mov	r1, r3
 800839a:	4817      	ldr	r0, [pc, #92]	@ (80083f8 <main+0x80>)
 800839c:	f000 f9d6 	bl	800874c <gos_errorTraceInit>

    // Initialize the kernel and register initializer task.
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 80083a0:	f7fd f8d8 	bl	8005554 <gos_kernelInit>
 80083a4:	4603      	mov	r3, r0
 80083a6:	4619      	mov	r1, r3
 80083a8:	4814      	ldr	r0, [pc, #80]	@ (80083fc <main+0x84>)
 80083aa:	f000 f9cf 	bl	800874c <gos_errorTraceInit>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b55      	cmp	r3, #85	@ 0x55
 80083b2:	d109      	bne.n	80083c8 <main+0x50>
        gos_taskRegister(&systemTaskDesc, &systemTaskId) == GOS_SUCCESS)
 80083b4:	4912      	ldr	r1, [pc, #72]	@ (8008400 <main+0x88>)
 80083b6:	4813      	ldr	r0, [pc, #76]	@ (8008404 <main+0x8c>)
 80083b8:	f7fe fa6a 	bl	8006890 <gos_taskRegister>
 80083bc:	4603      	mov	r3, r0
    if (gos_errorTraceInit("Kernel initialization", gos_kernelInit()) == GOS_SUCCESS &&
 80083be:	2b55      	cmp	r3, #85	@ 0x55
 80083c0:	d102      	bne.n	80083c8 <main+0x50>
    {
        initError = GOS_FALSE;
 80083c2:	4b11      	ldr	r3, [pc, #68]	@ (8008408 <main+0x90>)
 80083c4:	2249      	movs	r2, #73	@ 0x49
 80083c6:	701a      	strb	r2, [r3, #0]
    {
        // Nothing to do.
    }

    // Start OS.
    if (gos_Start() == GOS_ERROR)
 80083c8:	f000 f860 	bl	800848c <gos_Start>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2bae      	cmp	r3, #174	@ 0xae
 80083d0:	d106      	bne.n	80083e0 <main+0x68>
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Kernel could not be started.");
 80083d2:	4b0e      	ldr	r3, [pc, #56]	@ (800840c <main+0x94>)
 80083d4:	22c0      	movs	r2, #192	@ 0xc0
 80083d6:	490e      	ldr	r1, [pc, #56]	@ (8008410 <main+0x98>)
 80083d8:	2034      	movs	r0, #52	@ 0x34
 80083da:	f000 f91f 	bl	800861c <gos_errorHandler>
 80083de:	e006      	b.n	80083ee <main+0x76>
    }
    else
    {
        (void_t) gos_errorHandler(GOS_ERROR_LEVEL_OS_FATAL, __func__, __LINE__, "Initializer task could not be registered.");
 80083e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008414 <main+0x9c>)
 80083e2:	22c4      	movs	r2, #196	@ 0xc4
 80083e4:	490a      	ldr	r1, [pc, #40]	@ (8008410 <main+0x98>)
 80083e6:	2034      	movs	r0, #52	@ 0x34
 80083e8:	f000 f918 	bl	800861c <gos_errorHandler>
    }

    for (;;);
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	e7fd      	b.n	80083ee <main+0x76>
 80083f2:	bf00      	nop
 80083f4:	20001e99 	.word	0x20001e99
 80083f8:	0800d110 	.word	0x0800d110
 80083fc:	0800d130 	.word	0x0800d130
 8008400:	20001ece 	.word	0x20001ece
 8008404:	200016cc 	.word	0x200016cc
 8008408:	20001ecc 	.word	0x20001ecc
 800840c:	0800d148 	.word	0x0800d148
 8008410:	0800de6c 	.word	0x0800de6c
 8008414:	0800d168 	.word	0x0800d168

08008418 <gos_Dump>:

/*
 * Function: gos_Dump
 */
void_t gos_Dump (void_t)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_taskPrivilegeLevel_t privileges    = 0u;
 800841e:	2300      	movs	r3, #0
 8008420:	80fb      	strh	r3, [r7, #6]
    gos_tid_t                currentTaskId = GOS_INVALID_TASK_ID;
 8008422:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008426:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    dumpRequired = GOS_TRUE;
 8008428:	4b16      	ldr	r3, [pc, #88]	@ (8008484 <gos_Dump+0x6c>)
 800842a:	2236      	movs	r2, #54	@ 0x36
 800842c:	701a      	strb	r2, [r3, #0]

    (void_t) gos_taskGetCurrentId(&currentTaskId);
 800842e:	1d3b      	adds	r3, r7, #4
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff fe0b 	bl	800804c <gos_taskGetCurrentId>
    (void_t) gos_taskGetPrivileges(currentTaskId, &privileges);
 8008436:	88bb      	ldrh	r3, [r7, #4]
 8008438:	1dba      	adds	r2, r7, #6
 800843a:	4611      	mov	r1, r2
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff fd5d 	bl	8007efc <gos_taskGetPrivileges>

    if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	b21b      	sxth	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	db11      	blt.n	800846e <gos_Dump+0x56>
    {
        (void_t) gos_taskAddPrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 800844a:	88bb      	ldrh	r3, [r7, #4]
 800844c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff fbef 	bl	8007c34 <gos_taskAddPrivilege>
        (void_t) gos_taskWakeup(systemTaskId);
 8008456:	4b0c      	ldr	r3, [pc, #48]	@ (8008488 <gos_Dump+0x70>)
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe fc3c 	bl	8006cd8 <gos_taskWakeup>
        (void_t) gos_taskRemovePrivilege(currentTaskId, GOS_PRIV_TASK_MANIPULATE);
 8008460:	88bb      	ldrh	r3, [r7, #4]
 8008462:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fc5c 	bl	8007d24 <gos_taskRemovePrivilege>
 800846c:	e004      	b.n	8008478 <gos_Dump+0x60>
    }
    else
    {
        (void_t) gos_taskWakeup(systemTaskId);
 800846e:	4b06      	ldr	r3, [pc, #24]	@ (8008488 <gos_Dump+0x70>)
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe fc30 	bl	8006cd8 <gos_taskWakeup>
    }

    (void_t) gos_shellSuspend();
 8008478:	f001 faf6 	bl	8009a68 <gos_shellSuspend>
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20001ecd 	.word	0x20001ecd
 8008488:	20001ece 	.word	0x20001ece

0800848c <gos_Start>:
 *
 * @remark  This function should only return with error. If the initialization is successful,
 *          the function is not expected to return.
 */
GOS_STATIC gos_result_t gos_Start (void_t)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t startStatus = GOS_BUSY;
 8008492:	23b1      	movs	r3, #177	@ 0xb1
 8008494:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (initError == GOS_FALSE)
 8008496:	4b06      	ldr	r3, [pc, #24]	@ (80084b0 <gos_Start+0x24>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b49      	cmp	r3, #73	@ 0x49
 800849c:	d103      	bne.n	80084a6 <gos_Start+0x1a>
    {
        startStatus = gos_kernelStart();
 800849e:	f7fd f945 	bl	800572c <gos_kernelStart>
 80084a2:	4603      	mov	r3, r0
 80084a4:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return startStatus;
 80084a6:	79fb      	ldrb	r3, [r7, #7]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20001ecc 	.word	0x20001ecc

080084b4 <gos_systemTask>:
 *          deletes itself.

 * @return  -
 */
GOS_STATIC void_t gos_systemTask (void_t)
{
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysInitResult = GOS_SUCCESS;
 80084ba:	2355      	movs	r3, #85	@ 0x55
 80084bc:	71fb      	strb	r3, [r7, #7]
    u8_t         initIndex     = 0u;
 80084be:	2300      	movs	r3, #0
 80084c0:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    GOS_DISABLE_SCHED
 80084c2:	4b33      	ldr	r3, [pc, #204]	@ (8008590 <gos_systemTask+0xdc>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	3301      	adds	r3, #1
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	4b31      	ldr	r3, [pc, #196]	@ (8008590 <gos_systemTask+0xdc>)
 80084cc:	701a      	strb	r2, [r3, #0]

    // Loop through the initializers and call them while tracing the results.
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 80084ce:	2300      	movs	r3, #0
 80084d0:	71bb      	strb	r3, [r7, #6]
 80084d2:	e01d      	b.n	8008510 <gos_systemTask+0x5c>
    {
        sysInitResult &= gos_errorTraceInit(initializers[initIndex].initDesc, initializers[initIndex].initFunc());
 80084d4:	79ba      	ldrb	r2, [r7, #6]
 80084d6:	4613      	mov	r3, r2
 80084d8:	00db      	lsls	r3, r3, #3
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4a2d      	ldr	r2, [pc, #180]	@ (8008594 <gos_systemTask+0xe0>)
 80084e0:	189c      	adds	r4, r3, r2
 80084e2:	79ba      	ldrb	r2, [r7, #6]
 80084e4:	492b      	ldr	r1, [pc, #172]	@ (8008594 <gos_systemTask+0xe0>)
 80084e6:	4613      	mov	r3, r2
 80084e8:	00db      	lsls	r3, r3, #3
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	440b      	add	r3, r1
 80084f0:	3320      	adds	r3, #32
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4798      	blx	r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	4619      	mov	r1, r3
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 f926 	bl	800874c <gos_errorTraceInit>
 8008500:	4603      	mov	r3, r0
 8008502:	461a      	mov	r2, r3
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	4013      	ands	r3, r2
 8008508:	71fb      	strb	r3, [r7, #7]
    for (initIndex = 0u; initIndex < sizeof(initializers) / sizeof(gos_initStruct_t); initIndex++)
 800850a:	79bb      	ldrb	r3, [r7, #6]
 800850c:	3301      	adds	r3, #1
 800850e:	71bb      	strb	r3, [r7, #6]
 8008510:	79bb      	ldrb	r3, [r7, #6]
 8008512:	2b08      	cmp	r3, #8
 8008514:	d9de      	bls.n	80084d4 <gos_systemTask+0x20>
    }

    // Check and correct flag value.
    if (sysInitResult != GOS_SUCCESS)
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	2b55      	cmp	r3, #85	@ 0x55
 800851a:	d001      	beq.n	8008520 <gos_systemTask+0x6c>
    {
        sysInitResult = GOS_ERROR;
 800851c:	23ae      	movs	r3, #174	@ 0xae
 800851e:	71fb      	strb	r3, [r7, #7]
    {
        // Nothing to do.
    }

    // Trace overall result.
    (void_t) gos_errorTraceInit("System initialization", sysInitResult);
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	4619      	mov	r1, r3
 8008524:	481c      	ldr	r0, [pc, #112]	@ (8008598 <gos_systemTask+0xe4>)
 8008526:	f000 f911 	bl	800874c <gos_errorTraceInit>

    GOS_ENABLE_SCHED
 800852a:	4b19      	ldr	r3, [pc, #100]	@ (8008590 <gos_systemTask+0xdc>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <gos_systemTask+0x8a>
 8008532:	4b17      	ldr	r3, [pc, #92]	@ (8008590 <gos_systemTask+0xdc>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	3b01      	subs	r3, #1
 8008538:	b2da      	uxtb	r2, r3
 800853a:	4b15      	ldr	r3, [pc, #84]	@ (8008590 <gos_systemTask+0xdc>)
 800853c:	701a      	strb	r2, [r3, #0]

    // Set priority to kernel-level.
    (void_t) gos_taskSetOriginalPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 800853e:	4b17      	ldr	r3, [pc, #92]	@ (800859c <gos_systemTask+0xe8>)
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	21c3      	movs	r1, #195	@ 0xc3
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff fa41 	bl	80079cc <gos_taskSetOriginalPriority>
    (void_t) gos_taskSetPriority(systemTaskId, CFG_TASK_SYS_PRIO);
 800854a:	4b14      	ldr	r3, [pc, #80]	@ (800859c <gos_systemTask+0xe8>)
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	21c3      	movs	r1, #195	@ 0xc3
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff f977 	bl	8007844 <gos_taskSetPriority>

    for (;;)
    {
        // Refresh task statistics.
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 8008556:	2036      	movs	r0, #54	@ 0x36
 8008558:	f7fd f9d6 	bl	8005908 <gos_kernelCalculateTaskCpuUsages>

        if (dumpRequired == GOS_TRUE)
 800855c:	4b10      	ldr	r3, [pc, #64]	@ (80085a0 <gos_systemTask+0xec>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b36      	cmp	r3, #54	@ 0x36
 8008562:	d111      	bne.n	8008588 <gos_systemTask+0xd4>
        {
            (void_t) gos_taskSleep(100);
 8008564:	2064      	movs	r0, #100	@ 0x64
 8008566:	f7fe fb25 	bl	8006bb4 <gos_taskSleep>
            gos_kernelDump();
 800856a:	f7fd fb31 	bl	8005bd0 <gos_kernelDump>
            gos_queueDump();
 800856e:	f001 f98b 	bl	8009888 <gos_queueDump>

            // Invoke dump ready signal.
            (void_t) gos_signalInvoke(kernelDumpReadySignal, 0u);
 8008572:	4b0c      	ldr	r3, [pc, #48]	@ (80085a4 <gos_systemTask+0xf0>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2100      	movs	r1, #0
 8008578:	4618      	mov	r0, r3
 800857a:	f001 fe91 	bl	800a2a0 <gos_signalInvoke>
            dumpRequired = GOS_FALSE;
 800857e:	4b08      	ldr	r3, [pc, #32]	@ (80085a0 <gos_systemTask+0xec>)
 8008580:	2249      	movs	r2, #73	@ 0x49
 8008582:	701a      	strb	r2, [r3, #0]
            (void_t) gos_shellResume();
 8008584:	f001 fa84 	bl	8009a90 <gos_shellResume>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_SYS_TASK_SLEEP_TIME);
 8008588:	2064      	movs	r0, #100	@ 0x64
 800858a:	f7fe fb13 	bl	8006bb4 <gos_taskSleep>
        gos_kernelCalculateTaskCpuUsages(GOS_TRUE);
 800858e:	e7e2      	b.n	8008556 <gos_systemTask+0xa2>
 8008590:	20001e99 	.word	0x20001e99
 8008594:	20001588 	.word	0x20001588
 8008598:	0800d1e4 	.word	0x0800d1e4
 800859c:	20001ece 	.word	0x20001ece
 80085a0:	20001ecd 	.word	0x20001ecd
 80085a4:	20001e98 	.word	0x20001e98

080085a8 <gos_printStartupLogo>:

/*
 * Function: gos_printStartupLogo
 */
__attribute__((weak)) void_t gos_printStartupLogo (void_t)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n\r\n");
 80085ac:	4811      	ldr	r0, [pc, #68]	@ (80085f4 <gos_printStartupLogo+0x4c>)
 80085ae:	f003 f99b 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n");
 80085b2:	4811      	ldr	r0, [pc, #68]	@ (80085f8 <gos_printStartupLogo+0x50>)
 80085b4:	f003 f998 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 80085b8:	4810      	ldr	r0, [pc, #64]	@ (80085fc <gos_printStartupLogo+0x54>)
 80085ba:	f003 f995 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##                ##       ##       ##                      \r\n");
 80085be:	4810      	ldr	r0, [pc, #64]	@ (8008600 <gos_printStartupLogo+0x58>)
 80085c0:	f003 f992 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##                ##         ##        #####                 \r\n");
 80085c4:	480f      	ldr	r0, [pc, #60]	@ (8008604 <gos_printStartupLogo+0x5c>)
 80085c6:	f003 f98f 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("             ##     #####      ##         ##           #####              \r\n");
 80085ca:	480f      	ldr	r0, [pc, #60]	@ (8008608 <gos_printStartupLogo+0x60>)
 80085cc:	f003 f98c 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("              ##       ##       ##       ##                ##             \r\n");
 80085d0:	480e      	ldr	r0, [pc, #56]	@ (800860c <gos_printStartupLogo+0x64>)
 80085d2:	f003 f989 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("               #########         #########         #########              \r\n");
 80085d6:	4809      	ldr	r0, [pc, #36]	@ (80085fc <gos_printStartupLogo+0x54>)
 80085d8:	f003 f986 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                 #####             #####             #####                \r\n\r\n");
 80085dc:	480c      	ldr	r0, [pc, #48]	@ (8008610 <gos_printStartupLogo+0x68>)
 80085de:	f003 f983 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("                        (c) Ahmed Gazar, 2022-2024                        \r\n\r\n");
 80085e2:	480c      	ldr	r0, [pc, #48]	@ (8008614 <gos_printStartupLogo+0x6c>)
 80085e4:	f003 f980 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    (void_t) gos_traceTraceFormattedUnsafe("**************************************************************************\r\n");
 80085e8:	480b      	ldr	r0, [pc, #44]	@ (8008618 <gos_printStartupLogo+0x70>)
 80085ea:	f003 f97d 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
}
 80085ee:	bf00      	nop
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	0800d1fc 	.word	0x0800d1fc
 80085f8:	0800d24c 	.word	0x0800d24c
 80085fc:	0800d29c 	.word	0x0800d29c
 8008600:	0800d2ec 	.word	0x0800d2ec
 8008604:	0800d33c 	.word	0x0800d33c
 8008608:	0800d38c 	.word	0x0800d38c
 800860c:	0800d3dc 	.word	0x0800d3dc
 8008610:	0800d42c 	.word	0x0800d42c
 8008614:	0800d47c 	.word	0x0800d47c
 8008618:	0800d4cc 	.word	0x0800d4cc

0800861c <gos_errorHandler>:

/*
 * Function: gos_errorHandler
 */
void_t gos_errorHandler (gos_errorLevel_t errorLevel, const char_t* function, u32_t line, const char_t* errorMessage, ...)
{
 800861c:	b408      	push	{r3}
 800861e:	b580      	push	{r7, lr}
 8008620:	b087      	sub	sp, #28
 8008622:	af00      	add	r7, sp, #0
 8008624:	4603      	mov	r3, r0
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
 800862a:	73fb      	strb	r3, [r7, #15]
    va_list args;

    /*
     * Function code.
     */
    (void_t) gos_traceTraceFormattedUnsafe(TRACE_FORMAT_RESET"\r\n"SEPARATOR_LINE);
 800862c:	483a      	ldr	r0, [pc, #232]	@ (8008718 <gos_errorHandler+0xfc>)
 800862e:	f003 f95b 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL)
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	2b34      	cmp	r3, #52	@ 0x34
 8008636:	d103      	bne.n	8008640 <gos_errorHandler+0x24>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8008638:	4838      	ldr	r0, [pc, #224]	@ (800871c <gos_errorHandler+0x100>)
 800863a:	f003 f955 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
 800863e:	e013      	b.n	8008668 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "OS-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_OS_WARNING)
 8008640:	7bfb      	ldrb	r3, [r7, #15]
 8008642:	2b2e      	cmp	r3, #46	@ 0x2e
 8008644:	d103      	bne.n	800864e <gos_errorHandler+0x32>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8008646:	4836      	ldr	r0, [pc, #216]	@ (8008720 <gos_errorHandler+0x104>)
 8008648:	f003 f94e 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
 800864c:	e00c      	b.n	8008668 <gos_errorHandler+0x4c>
                TRACE_FG_YELLOW_START
                "OS-level warning.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b1a      	cmp	r3, #26
 8008652:	d103      	bne.n	800865c <gos_errorHandler+0x40>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8008654:	4833      	ldr	r0, [pc, #204]	@ (8008724 <gos_errorHandler+0x108>)
 8008656:	f003 f947 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
 800865a:	e005      	b.n	8008668 <gos_errorHandler+0x4c>
                TRACE_FG_RED_START
                "User-level error - system stopped.\r\n"
                TRACE_FORMAT_RESET
                );
    }
    else if (errorLevel == GOS_ERROR_LEVEL_USER_WARNING)
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008660:	d102      	bne.n	8008668 <gos_errorHandler+0x4c>
    {
        (void_t) gos_traceTraceFormattedUnsafe(
 8008662:	4831      	ldr	r0, [pc, #196]	@ (8008728 <gos_errorHandler+0x10c>)
 8008664:	f003 f940 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (function != NULL)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d005      	beq.n	800867a <gos_errorHandler+0x5e>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	482e      	ldr	r0, [pc, #184]	@ (800872c <gos_errorHandler+0x110>)
 8008674:	f003 f938 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
 8008678:	e006      	b.n	8008688 <gos_errorHandler+0x6c>
                                  TRACE_FG_YELLOW_START
                                  "%s"
                                  TRACE_FORMAT_RESET
                                  ">, line: %d\r\n", function, line);
    }
    else if (line != 0)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d003      	beq.n	8008688 <gos_errorHandler+0x6c>
    {
        (void_t) gos_traceTraceFormattedUnsafe("Function: <"
 8008680:	6879      	ldr	r1, [r7, #4]
 8008682:	482b      	ldr	r0, [pc, #172]	@ (8008730 <gos_errorHandler+0x114>)
 8008684:	f003 f930 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    if (errorMessage != NULL)
 8008688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00b      	beq.n	80086a6 <gos_errorHandler+0x8a>
    {
        va_start(args, errorMessage);
 800868e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008692:	617b      	str	r3, [r7, #20]
        (void_t) vsprintf(errorBuffer, errorMessage, args);
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008698:	4826      	ldr	r0, [pc, #152]	@ (8008734 <gos_errorHandler+0x118>)
 800869a:	f003 fcb3 	bl	800c004 <vsiprintf>
        va_end(args);

        (void_t) gos_traceTraceFormattedUnsafe("%s\r\n", errorBuffer);
 800869e:	4925      	ldr	r1, [pc, #148]	@ (8008734 <gos_errorHandler+0x118>)
 80086a0:	4825      	ldr	r0, [pc, #148]	@ (8008738 <gos_errorHandler+0x11c>)
 80086a2:	f003 f921 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
    else
    {
        // Nothing to do.
    }

    (void_t) gos_traceTraceFormattedUnsafe(SEPARATOR_LINE);
 80086a6:	4825      	ldr	r0, [pc, #148]	@ (800873c <gos_errorHandler+0x120>)
 80086a8:	f003 f91e 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>

    if (errorLevel == GOS_ERROR_LEVEL_OS_FATAL || errorLevel == GOS_ERROR_LEVEL_USER_FATAL)
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	2b34      	cmp	r3, #52	@ 0x34
 80086b0:	d002      	beq.n	80086b8 <gos_errorHandler+0x9c>
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	2b1a      	cmp	r3, #26
 80086b6:	d127      	bne.n	8008708 <gos_errorHandler+0xec>
    {
        GOS_DISABLE_SCHED
 80086b8:	4b21      	ldr	r3, [pc, #132]	@ (8008740 <gos_errorHandler+0x124>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	3301      	adds	r3, #1
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	4b1f      	ldr	r3, [pc, #124]	@ (8008740 <gos_errorHandler+0x124>)
 80086c2:	701a      	strb	r2, [r3, #0]
        GOS_ATOMIC_ENTER
 80086c4:	4b1f      	ldr	r3, [pc, #124]	@ (8008744 <gos_errorHandler+0x128>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d108      	bne.n	80086de <gos_errorHandler+0xc2>
 80086cc:	b672      	cpsid	i
 80086ce:	f3ef 8310 	mrs	r3, PRIMASK
 80086d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008748 <gos_errorHandler+0x12c>)
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	4b19      	ldr	r3, [pc, #100]	@ (8008744 <gos_errorHandler+0x128>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	3301      	adds	r3, #1
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	4b17      	ldr	r3, [pc, #92]	@ (8008744 <gos_errorHandler+0x128>)
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	4b15      	ldr	r3, [pc, #84]	@ (8008740 <gos_errorHandler+0x124>)
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	3301      	adds	r3, #1
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	4b13      	ldr	r3, [pc, #76]	@ (8008740 <gos_errorHandler+0x124>)
 80086f4:	701a      	strb	r2, [r3, #0]
        for (;;)
        {
            GOS_NOP;
 80086f6:	bf00      	nop
#if CFG_RESET_ON_ERROR == 1

            gos_kernelDelayMs(CFG_RESET_ON_ERROR_DELAY_MS);
 80086f8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80086fc:	f7fd f8e8 	bl	80058d0 <gos_kernelDelayMs>
            gos_kernelReset();
 8008700:	f7fd f8c8 	bl	8005894 <gos_kernelReset>
            GOS_NOP;
 8008704:	bf00      	nop
 8008706:	e7f6      	b.n	80086f6 <gos_errorHandler+0xda>
    }
    else
    {
        // Nothing to do.
    }
}
 8008708:	bf00      	nop
 800870a:	371c      	adds	r7, #28
 800870c:	46bd      	mov	sp, r7
 800870e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008712:	b001      	add	sp, #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	0800d51c 	.word	0x0800d51c
 800871c:	0800d570 	.word	0x0800d570
 8008720:	0800d59c 	.word	0x0800d59c
 8008724:	0800d5bc 	.word	0x0800d5bc
 8008728:	0800d5ec 	.word	0x0800d5ec
 800872c:	0800d60c 	.word	0x0800d60c
 8008730:	0800d630 	.word	0x0800d630
 8008734:	20001ed0 	.word	0x20001ed0
 8008738:	0800d65c 	.word	0x0800d65c
 800873c:	0800d664 	.word	0x0800d664
 8008740:	20001e99 	.word	0x20001e99
 8008744:	20001e9b 	.word	0x20001e9b
 8008748:	20001e9c 	.word	0x20001e9c

0800874c <gos_errorTraceInit>:

/*
 * Function: gos_errorTraceInit
 */
gos_result_t gos_errorTraceInit (const char_t* initDescription, gos_result_t initResult)
{
 800874c:	b590      	push	{r4, r7, lr}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
    /*
     * Function code.
     */

    (void_t) gos_traceTraceFormattedUnsafe("[%-5lu]    %-51s [ "
 8008758:	f7fd f87e 	bl	8005858 <gos_kernelGetSysTicks>
 800875c:	4604      	mov	r4, r0
 800875e:	1cfb      	adds	r3, r7, #3
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f80d 	bl	8008780 <gos_traceResultToString>
 8008766:	4603      	mov	r3, r0
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	4621      	mov	r1, r4
 800876c:	4803      	ldr	r0, [pc, #12]	@ (800877c <gos_errorTraceInit+0x30>)
 800876e:	f003 f8bb 	bl	800b8e8 <gos_traceTraceFormattedUnsafe>
            " ]\r\n",
            gos_kernelGetSysTicks(),
            initDescription,
            gos_traceResultToString(&initResult));

    return initResult;
 8008772:	78fb      	ldrb	r3, [r7, #3]
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	bd90      	pop	{r4, r7, pc}
 800877c:	0800d6b4 	.word	0x0800d6b4

08008780 <gos_traceResultToString>:
 * @param   pResult : Pointer to the result variable.
 *
 * @return  Formatted string.
 */
GOS_STATIC char_t* gos_traceResultToString (gos_result_t* pResult)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
    /*
     * Function code.
     */
    switch (*pResult)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b55      	cmp	r3, #85	@ 0x55
 800878e:	d002      	beq.n	8008796 <gos_traceResultToString+0x16>
 8008790:	2bae      	cmp	r3, #174	@ 0xae
 8008792:	d002      	beq.n	800879a <gos_traceResultToString+0x1a>
 8008794:	e003      	b.n	800879e <gos_traceResultToString+0x1e>
    {
        case GOS_SUCCESS:
        {
            return TRACE_FG_GREEN_START RESULT_STRING_SUCCESS TRACE_FORMAT_RESET;
 8008796:	4b05      	ldr	r3, [pc, #20]	@ (80087ac <gos_traceResultToString+0x2c>)
 8008798:	e002      	b.n	80087a0 <gos_traceResultToString+0x20>
        }
        case GOS_ERROR:
        {
            return TRACE_FG_RED_START RESULT_STRING_ERROR TRACE_FORMAT_RESET;
 800879a:	4b05      	ldr	r3, [pc, #20]	@ (80087b0 <gos_traceResultToString+0x30>)
 800879c:	e000      	b.n	80087a0 <gos_traceResultToString+0x20>
        }
        default:
        {
            return TRACE_FG_YELLOW_START RESULT_STRING_UNKNOWN TRACE_FORMAT_RESET;
 800879e:	4b05      	ldr	r3, [pc, #20]	@ (80087b4 <gos_traceResultToString+0x34>)
        }
    }
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	0800d6d0 	.word	0x0800d6d0
 80087b0:	0800d6e4 	.word	0x0800d6e4
 80087b4:	0800d6f8 	.word	0x0800d6f8

080087b8 <gos_gcpInit>:

/*
 * Function: gos_gcpInit
 */
gos_result_t gos_gcpInit (void_t)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t gcpInitResult = GOS_SUCCESS;
 80087be:	2355      	movs	r3, #85	@ 0x55
 80087c0:	71fb      	strb	r3, [r7, #7]
    u16_t        mutexIdx      = 0u;
 80087c2:	2300      	movs	r3, #0
 80087c4:	80bb      	strh	r3, [r7, #4]

    /*
     * Function code.
     */
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 80087c6:	2300      	movs	r3, #0
 80087c8:	80bb      	strh	r3, [r7, #4]
 80087ca:	e01a      	b.n	8008802 <gos_gcpInit+0x4a>
    {
        gcpInitResult &= gos_mutexInit(&gcpRxMutexes[mutexIdx]);
 80087cc:	88bb      	ldrh	r3, [r7, #4]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4a12      	ldr	r2, [pc, #72]	@ (800881c <gos_gcpInit+0x64>)
 80087d2:	4413      	add	r3, r2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fc6d 	bl	80090b4 <gos_mutexInit>
 80087da:	4603      	mov	r3, r0
 80087dc:	461a      	mov	r2, r3
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	4013      	ands	r3, r2
 80087e2:	71fb      	strb	r3, [r7, #7]
        gcpInitResult &= gos_mutexInit(&gcpTxMutexes[mutexIdx]);
 80087e4:	88bb      	ldrh	r3, [r7, #4]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4a0d      	ldr	r2, [pc, #52]	@ (8008820 <gos_gcpInit+0x68>)
 80087ea:	4413      	add	r3, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fc61 	bl	80090b4 <gos_mutexInit>
 80087f2:	4603      	mov	r3, r0
 80087f4:	461a      	mov	r2, r3
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	4013      	ands	r3, r2
 80087fa:	71fb      	strb	r3, [r7, #7]
    for (mutexIdx = 0u; mutexIdx < CFG_GCP_CHANNELS_MAX_NUMBER; mutexIdx++)
 80087fc:	88bb      	ldrh	r3, [r7, #4]
 80087fe:	3301      	adds	r3, #1
 8008800:	80bb      	strh	r3, [r7, #4]
 8008802:	88bb      	ldrh	r3, [r7, #4]
 8008804:	2b03      	cmp	r3, #3
 8008806:	d9e1      	bls.n	80087cc <gos_gcpInit+0x14>
    }

    if (gcpInitResult != GOS_SUCCESS)
 8008808:	79fb      	ldrb	r3, [r7, #7]
 800880a:	2b55      	cmp	r3, #85	@ 0x55
 800880c:	d001      	beq.n	8008812 <gos_gcpInit+0x5a>
    {
        gcpInitResult = GOS_ERROR;
 800880e:	23ae      	movs	r3, #174	@ 0xae
 8008810:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return gcpInitResult;
 8008812:	79fb      	ldrb	r3, [r7, #7]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20001f40 	.word	0x20001f40
 8008820:	20001f50 	.word	0x20001f50

08008824 <gos_gcpRegisterPhysicalDriver>:
gos_result_t gos_gcpRegisterPhysicalDriver (
        gos_gcpChannelNumber_t    channelNumber,
        gos_gcpTransmitFunction_t transmitFunction,
        gos_gcpReceiveFunction_t  receiveFunction
        )
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	73fb      	strb	r3, [r7, #15]
    /*
     * Local variables.
     */
    gos_result_t registerPhysicalDriverResult = GOS_ERROR;
 8008832:	23ae      	movs	r3, #174	@ 0xae
 8008834:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (channelNumber < CFG_GCP_CHANNELS_MAX_NUMBER && transmitFunction != NULL && receiveFunction != NULL)
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	2b03      	cmp	r3, #3
 800883a:	d812      	bhi.n	8008862 <gos_gcpRegisterPhysicalDriver+0x3e>
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00f      	beq.n	8008862 <gos_gcpRegisterPhysicalDriver+0x3e>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00c      	beq.n	8008862 <gos_gcpRegisterPhysicalDriver+0x3e>
    {
        channelFunctions[channelNumber].gcpReceiveFunction  = receiveFunction;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	4a09      	ldr	r2, [pc, #36]	@ (8008870 <gos_gcpRegisterPhysicalDriver+0x4c>)
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	4413      	add	r3, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	605a      	str	r2, [r3, #4]
        channelFunctions[channelNumber].gcpTransmitFunction = transmitFunction;
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	4906      	ldr	r1, [pc, #24]	@ (8008870 <gos_gcpRegisterPhysicalDriver+0x4c>)
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        registerPhysicalDriverResult                        = GOS_SUCCESS;
 800885e:	2355      	movs	r3, #85	@ 0x55
 8008860:	75fb      	strb	r3, [r7, #23]
    else
    {
        // Nothing to do.
    }

    return registerPhysicalDriverResult;
 8008862:	7dfb      	ldrb	r3, [r7, #23]
}
 8008864:	4618      	mov	r0, r3
 8008866:	371c      	adds	r7, #28
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	20001f20 	.word	0x20001f20

08008874 <gos_gcpTransmitMessage>:
        u16_t                   messageId,
        void_t*                 pMessagePayload,
        u16_t                   payloadSize,
		u16_t                   maxChunkSize
        )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b092      	sub	sp, #72	@ 0x48
 8008878:	af00      	add	r7, sp, #0
 800887a:	60ba      	str	r2, [r7, #8]
 800887c:	461a      	mov	r2, r3
 800887e:	4603      	mov	r3, r0
 8008880:	73fb      	strb	r3, [r7, #15]
 8008882:	460b      	mov	r3, r1
 8008884:	81bb      	strh	r3, [r7, #12]
 8008886:	4613      	mov	r3, r2
 8008888:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t transmitMessageResult = GOS_ERROR;
 800888a:	23ae      	movs	r3, #174	@ 0xae
 800888c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    /*
     * Function code.
     */
    if (gos_mutexLock(&gcpTxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4a8e      	ldr	r2, [pc, #568]	@ (8008ad0 <gos_gcpTransmitMessage+0x25c>)
 8008896:	4413      	add	r3, r2
 8008898:	f04f 31ff 	mov.w	r1, #4294967295
 800889c:	4618      	mov	r0, r3
 800889e:	f000 fc23 	bl	80090e8 <gos_mutexLock>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b55      	cmp	r3, #85	@ 0x55
 80088a6:	f040 8105 	bne.w	8008ab4 <gos_gcpTransmitMessage+0x240>
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80088b0:	89bb      	ldrh	r3, [r7, #12]
 80088b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ba:	88fb      	ldrh	r3, [r7, #6]
 80088bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80088be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80088c2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
)
{
    /*
     * Local variables.
     */
    gos_result_t         transmitMessageResult = GOS_ERROR;
 80088c4:	23ae      	movs	r3, #174	@ 0xae
 80088c6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 80088ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	605a      	str	r2, [r3, #4]
 80088d4:	609a      	str	r2, [r3, #8]
 80088d6:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 80088d8:	f107 0314 	add.w	r3, r7, #20
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	609a      	str	r2, [r3, #8]
 80088e4:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 80088e6:	2300      	movs	r3, #0
 80088e8:	74fb      	strb	r3, [r7, #19]
    u8_t                 dataChunks            = 0u;
 80088ea:	2300      	movs	r3, #0
 80088ec:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    u8_t                 chunkIndex            = 0u;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    u16_t                tempSize              = 0u;
 80088f6:	2300      	movs	r3, #0
 80088f8:	86fb      	strh	r3, [r7, #54]	@ 0x36

    /*
     * Function code.
     */
    if ((pMessagePayload                              != NULL                        ||
 80088fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d107      	bne.n	8008910 <gos_gcpTransmitMessage+0x9c>
 8008900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	f040 80d2 	bne.w	8008aac <gos_gcpTransmitMessage+0x238>
        (pMessagePayload                              == NULL                        &&
 8008908:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800890a:	2b00      	cmp	r3, #0
 800890c:	f040 80ce 	bne.w	8008aac <gos_gcpTransmitMessage+0x238>
        payloadSize                                   == 0u))                        &&
 8008910:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008914:	2b03      	cmp	r3, #3
 8008916:	f200 80c9 	bhi.w	8008aac <gos_gcpTransmitMessage+0x238>
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpTransmitFunction != NULL)
 800891a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800891e:	4a6d      	ldr	r2, [pc, #436]	@ (8008ad4 <gos_gcpTransmitMessage+0x260>)
 8008920:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
        channel                                       <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 80c1 	beq.w	8008aac <gos_gcpTransmitMessage+0x238>
    {
        // Fill out header frame.
        requestHeaderFrame.ackType       = GCP_ACK_REQ;
 800892a:	2300      	movs	r3, #0
 800892c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        requestHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 8008930:	2302      	movs	r3, #2
 8008932:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        requestHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 8008936:	2300      	movs	r3, #0
 8008938:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        requestHeaderFrame.dataSize      = payloadSize;
 800893c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800893e:	857b      	strh	r3, [r7, #42]	@ 0x2a
        requestHeaderFrame.messageId     = messageId;
 8008940:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008944:	853b      	strh	r3, [r7, #40]	@ 0x28
        requestHeaderFrame.dataCrc       = gos_crcDriverGetCrc((u8_t*)pMessagePayload, payloadSize);
 8008946:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008948:	4619      	mov	r1, r3
 800894a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800894c:	f003 f9d6 	bl	800bcfc <gos_crcDriverGetCrc>
 8008950:	4603      	mov	r3, r0
 8008952:	62fb      	str	r3, [r7, #44]	@ 0x2c
        requestHeaderFrame.headerCrc     = gos_crcDriverGetCrc((u8_t*)&requestHeaderFrame, (u32_t)(sizeof(requestHeaderFrame) - sizeof(requestHeaderFrame.headerCrc)));
 8008954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008958:	210c      	movs	r1, #12
 800895a:	4618      	mov	r0, r3
 800895c:	f003 f9ce 	bl	800bcfc <gos_crcDriverGetCrc>
 8008960:	4603      	mov	r3, r0
 8008962:	633b      	str	r3, [r7, #48]	@ 0x30
        else
        {
            // Error.
        }*/

        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS)
 8008964:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008968:	4a5a      	ldr	r2, [pc, #360]	@ (8008ad4 <gos_gcpTransmitMessage+0x260>)
 800896a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800896e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8008972:	2110      	movs	r1, #16
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	4603      	mov	r3, r0
 800897a:	2b55      	cmp	r3, #85	@ 0x55
 800897c:	f040 8096 	bne.w	8008aac <gos_gcpTransmitMessage+0x238>
        {
        	if (requestHeaderFrame.dataSize == 0u)
 8008980:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008982:	2b00      	cmp	r3, #0
 8008984:	d120      	bne.n	80089c8 <gos_gcpTransmitMessage+0x154>
        	{
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8008986:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800898a:	4a52      	ldr	r2, [pc, #328]	@ (8008ad4 <gos_gcpTransmitMessage+0x260>)
 800898c:	00db      	lsls	r3, r3, #3
 800898e:	4413      	add	r3, r2
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f107 0214 	add.w	r2, r7, #20
 8008996:	2110      	movs	r1, #16
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	4603      	mov	r3, r0
 800899e:	2b55      	cmp	r3, #85	@ 0x55
 80089a0:	f040 8084 	bne.w	8008aac <gos_gcpTransmitMessage+0x238>
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 80089a4:	f107 0213 	add.w	r2, r7, #19
 80089a8:	f107 0314 	add.w	r3, r7, #20
 80089ac:	4611      	mov	r1, r2
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 f9de 	bl	8008d70 <gos_gcpValidateHeader>
 80089b4:	4603      	mov	r3, r0
        		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 80089b6:	2b55      	cmp	r3, #85	@ 0x55
 80089b8:	d178      	bne.n	8008aac <gos_gcpTransmitMessage+0x238>
			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 80089ba:	7dbb      	ldrb	r3, [r7, #22]
			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d175      	bne.n	8008aac <gos_gcpTransmitMessage+0x238>
        		{
                    // Transmission successful.
                    transmitMessageResult = GOS_SUCCESS;
 80089c0:	2355      	movs	r3, #85	@ 0x55
 80089c2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80089c6:	e071      	b.n	8008aac <gos_gcpTransmitMessage+0x238>
        			// Error.
        		}
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 80089c8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80089ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80089cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 80089d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80089d8:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80089da:	fbb3 f1f2 	udiv	r1, r3, r2
 80089de:	fb01 f202 	mul.w	r2, r1, r2
 80089e2:	1a9b      	subs	r3, r3, r2
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d004      	beq.n	80089f4 <gos_gcpTransmitMessage+0x180>
            	{
            		dataChunks++;
 80089ea:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80089ee:	3301      	adds	r3, #1
 80089f0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 80089f4:	2300      	movs	r3, #0
 80089f6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80089fa:	e051      	b.n	8008aa0 <gos_gcpTransmitMessage+0x22c>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 80089fc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8008a00:	3301      	adds	r3, #1
 8008a02:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8008a04:	fb02 f303 	mul.w	r3, r2, r3
 8008a08:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	dd0a      	ble.n	8008a24 <gos_gcpTransmitMessage+0x1b0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 8008a0e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8008a10:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8008a18:	fb11 f303 	smulbb	r3, r1, r3
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008a22:	e001      	b.n	8008a28 <gos_gcpTransmitMessage+0x1b4>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 8008a24:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008a26:	86fb      	strh	r3, [r7, #54]	@ 0x36
            		}

            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 8008a28:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008a2c:	4a29      	ldr	r2, [pc, #164]	@ (8008ad4 <gos_gcpTransmitMessage+0x260>)
 8008a2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008a32:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8008a36:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8008a38:	fb01 f202 	mul.w	r2, r1, r2
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a40:	440a      	add	r2, r1
 8008a42:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b55      	cmp	r3, #85	@ 0x55
 8008a4c:	d124      	bne.n	8008a98 <gos_gcpTransmitMessage+0x224>
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8008a4e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008a52:	4a20      	ldr	r2, [pc, #128]	@ (8008ad4 <gos_gcpTransmitMessage+0x260>)
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	4413      	add	r3, r2
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f107 0214 	add.w	r2, r7, #20
 8008a5e:	2110      	movs	r1, #16
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	4603      	mov	r3, r0
            		if (channelFunctions[channel].gcpTransmitFunction((u8_t*)(pMessagePayload + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS &&
 8008a66:	2b55      	cmp	r3, #85	@ 0x55
 8008a68:	d116      	bne.n	8008a98 <gos_gcpTransmitMessage+0x224>
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8008a6a:	f107 0213 	add.w	r2, r7, #19
 8008a6e:	f107 0314 	add.w	r3, r7, #20
 8008a72:	4611      	mov	r1, r2
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 f97b 	bl	8008d70 <gos_gcpValidateHeader>
 8008a7a:	4603      	mov	r3, r0
            			channelFunctions[channel].gcpReceiveFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS &&
 8008a7c:	2b55      	cmp	r3, #85	@ 0x55
 8008a7e:	d10b      	bne.n	8008a98 <gos_gcpTransmitMessage+0x224>
    			        responseHeaderFrame.ackType == GCP_ACK_OK	)
 8008a80:	7dbb      	ldrb	r3, [r7, #22]
    			        gos_gcpValidateHeader(&responseHeaderFrame, &headerAck) == GOS_SUCCESS &&
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d108      	bne.n	8008a98 <gos_gcpTransmitMessage+0x224>
            		{
                        // Transmission successful.
            			// Set temporary success.
                        transmitMessageResult = GOS_SUCCESS;
 8008a86:	2355      	movs	r3, #85	@ 0x55
 8008a88:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8008a8c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8008a90:	3301      	adds	r3, #1
 8008a92:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8008a96:	e003      	b.n	8008aa0 <gos_gcpTransmitMessage+0x22c>
            		}
            		else
            		{
            			// Error.
            			transmitMessageResult = GOS_ERROR;
 8008a98:	23ae      	movs	r3, #174	@ 0xae
 8008a9a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            			break;
 8008a9e:	e005      	b.n	8008aac <gos_gcpTransmitMessage+0x238>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8008aa0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8008aa4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d3a7      	bcc.n	80089fc <gos_gcpTransmitMessage+0x188>
    else
    {
        // Nothing to do.
    }

    return transmitMessageResult;
 8008aac:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
        transmitMessageResult = gos_gcpTransmitMessageInternal(channel, messageId, pMessagePayload, payloadSize, maxChunkSize);
 8008ab0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    (void_t) gos_mutexUnlock(&gcpTxMutexes[channel]);
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4a05      	ldr	r2, [pc, #20]	@ (8008ad0 <gos_gcpTransmitMessage+0x25c>)
 8008aba:	4413      	add	r3, r2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 fc19 	bl	80092f4 <gos_mutexUnlock>
    return transmitMessageResult;
 8008ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3748      	adds	r7, #72	@ 0x48
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20001f50 	.word	0x20001f50
 8008ad4:	20001f20 	.word	0x20001f20

08008ad8 <gos_gcpReceiveMessage>:
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b094      	sub	sp, #80	@ 0x50
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	607a      	str	r2, [r7, #4]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73fb      	strb	r3, [r7, #15]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	81bb      	strh	r3, [r7, #12]
    gos_result_t receiveMessageResult = GOS_ERROR;
 8008aec:	23ae      	movs	r3, #174	@ 0xae
 8008aee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (gos_mutexLock(&gcpRxMutexes[channel], GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4a9c      	ldr	r2, [pc, #624]	@ (8008d68 <gos_gcpReceiveMessage+0x290>)
 8008af8:	4413      	add	r3, r2
 8008afa:	f04f 31ff 	mov.w	r1, #4294967295
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 faf2 	bl	80090e8 <gos_mutexLock>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b55      	cmp	r3, #85	@ 0x55
 8008b08:	f040 8120 	bne.w	8008d4c <gos_gcpReceiveMessage+0x274>
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b1a:	89bb      	ldrh	r3, [r7, #12]
 8008b1c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008b20:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8008b24:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        )
{
    /*
     * Local variables.
     */
    gos_result_t         receiveMessageResult  = GOS_ERROR;
 8008b28:	23ae      	movs	r3, #174	@ 0xae
 8008b2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    gos_gcpHeaderFrame_t requestHeaderFrame    = {0};
 8008b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	605a      	str	r2, [r3, #4]
 8008b38:	609a      	str	r2, [r3, #8]
 8008b3a:	60da      	str	r2, [r3, #12]
    gos_gcpHeaderFrame_t responseHeaderFrame   = {0};
 8008b3c:	f107 0318 	add.w	r3, r7, #24
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	605a      	str	r2, [r3, #4]
 8008b46:	609a      	str	r2, [r3, #8]
 8008b48:	60da      	str	r2, [r3, #12]
    gos_gcpAck_t         headerAck             = (gos_gcpAck_t)0u;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	75fb      	strb	r3, [r7, #23]
    u8_t                 dataChunks            = 0u;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    u8_t                 chunkIndex            = 0u;
 8008b54:	2300      	movs	r3, #0
 8008b56:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    u16_t                tempSize              = 0u;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /*
     * Function code.
     */
    if (pMessageId                                   != NULL                        &&
 8008b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 80ef 	beq.w	8008d44 <gos_gcpReceiveMessage+0x26c>
 8008b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80eb 	beq.w	8008d44 <gos_gcpReceiveMessage+0x26c>
        pPayloadTarget                               != NULL                        &&
 8008b6e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	f200 80e6 	bhi.w	8008d44 <gos_gcpReceiveMessage+0x26c>
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
        channelFunctions[channel].gcpReceiveFunction != NULL
 8008b78:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008b7c:	4a7b      	ldr	r2, [pc, #492]	@ (8008d6c <gos_gcpReceiveMessage+0x294>)
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	4413      	add	r3, r2
 8008b82:	685b      	ldr	r3, [r3, #4]
        channel                                      <  CFG_GCP_CHANNELS_MAX_NUMBER &&
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 80dd 	beq.w	8008d44 <gos_gcpReceiveMessage+0x26c>
        )
    {
        // Prepare response header frame.
        responseHeaderFrame.dataSize      = 0u;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	83fb      	strh	r3, [r7, #30]
        responseHeaderFrame.dataCrc       = 0u;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	623b      	str	r3, [r7, #32]
        responseHeaderFrame.protocolMajor = GCP_PROTOCOL_VERSION_MAJOR;
 8008b92:	2302      	movs	r3, #2
 8008b94:	763b      	strb	r3, [r7, #24]
        responseHeaderFrame.protocolMinor = GCP_PROTOCOL_VERSION_MINOR;
 8008b96:	2300      	movs	r3, #0
 8008b98:	767b      	strb	r3, [r7, #25]
            responseHeaderFrame.ackType   = (u8_t)headerAck;
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
        }*/

        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8008b9a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008b9e:	4a73      	ldr	r2, [pc, #460]	@ (8008d6c <gos_gcpReceiveMessage+0x294>)
 8008ba0:	00db      	lsls	r3, r3, #3
 8008ba2:	4413      	add	r3, r2
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8008baa:	2110      	movs	r1, #16
 8008bac:	4610      	mov	r0, r2
 8008bae:	4798      	blx	r3
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b55      	cmp	r3, #85	@ 0x55
 8008bb4:	f040 80b0 	bne.w	8008d18 <gos_gcpReceiveMessage+0x240>
            gos_gcpValidateHeader(&requestHeaderFrame, &headerAck) == GOS_SUCCESS)
 8008bb8:	f107 0217 	add.w	r2, r7, #23
 8008bbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f8d4 	bl	8008d70 <gos_gcpValidateHeader>
 8008bc8:	4603      	mov	r3, r0
        if (channelFunctions[channel].gcpReceiveFunction((u8_t*)&requestHeaderFrame, (u16_t)sizeof(requestHeaderFrame)) == GOS_SUCCESS &&
 8008bca:	2b55      	cmp	r3, #85	@ 0x55
 8008bcc:	f040 80a4 	bne.w	8008d18 <gos_gcpReceiveMessage+0x240>
        {
        	if (requestHeaderFrame.dataSize == 0)
 8008bd0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d11e      	bne.n	8008c14 <gos_gcpReceiveMessage+0x13c>
        	{
        		// OK.
                // Data OK. Send response.
                *pMessageId = requestHeaderFrame.messageId;
 8008bd6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008bd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bda:	801a      	strh	r2, [r3, #0]
                responseHeaderFrame.ackType = GCP_ACK_OK;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	76bb      	strb	r3, [r7, #26]
                responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8008be0:	f107 0318 	add.w	r3, r7, #24
 8008be4:	210c      	movs	r1, #12
 8008be6:	4618      	mov	r0, r3
 8008be8:	f003 f888 	bl	800bcfc <gos_crcDriverGetCrc>
 8008bec:	4603      	mov	r3, r0
 8008bee:	627b      	str	r3, [r7, #36]	@ 0x24
                if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 8008bf0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008bf4:	4a5d      	ldr	r2, [pc, #372]	@ (8008d6c <gos_gcpReceiveMessage+0x294>)
 8008bf6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008bfa:	f107 0218 	add.w	r2, r7, #24
 8008bfe:	2110      	movs	r1, #16
 8008c00:	4610      	mov	r0, r2
 8008c02:	4798      	blx	r3
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b55      	cmp	r3, #85	@ 0x55
 8008c08:	f040 809b 	bne.w	8008d42 <gos_gcpReceiveMessage+0x26a>
                {
                    // Reception successful.
                    receiveMessageResult = GOS_SUCCESS;
 8008c0c:	2355      	movs	r3, #85	@ 0x55
 8008c0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 8008c12:	e096      	b.n	8008d42 <gos_gcpReceiveMessage+0x26a>
                    // Transmit error.
                }
        	}
        	else
        	{
            	dataChunks = requestHeaderFrame.dataSize / maxChunkSize;
 8008c14:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008c16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

            	if (requestHeaderFrame.dataSize % maxChunkSize != 0)
 8008c24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008c26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8008c2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c2e:	fb01 f202 	mul.w	r2, r1, r2
 8008c32:	1a9b      	subs	r3, r3, r2
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d004      	beq.n	8008c44 <gos_gcpReceiveMessage+0x16c>
            	{
            		dataChunks++;
 8008c3a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008c3e:	3301      	adds	r3, #1
 8008c40:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            	else
            	{
            		// Chunk number is exact.
            	}

            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8008c44:	2300      	movs	r3, #0
 8008c46:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8008c4a:	e04c      	b.n	8008ce6 <gos_gcpReceiveMessage+0x20e>
            	{
            		if ((chunkIndex + 1) * maxChunkSize > requestHeaderFrame.dataSize)
 8008c4c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008c50:	3301      	adds	r3, #1
 8008c52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8008c56:	fb02 f303 	mul.w	r3, r2, r3
 8008c5a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	dd0b      	ble.n	8008c78 <gos_gcpReceiveMessage+0x1a0>
            		{
            			tempSize = requestHeaderFrame.dataSize - chunkIndex * maxChunkSize;
 8008c60:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008c62:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8008c6c:	fb11 f303 	smulbb	r3, r1, r3
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008c76:	e002      	b.n	8008c7e <gos_gcpReceiveMessage+0x1a6>
            		}
            		else
            		{
                		tempSize = maxChunkSize;
 8008c78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c7c:	877b      	strh	r3, [r7, #58]	@ 0x3a
            		}

            		if (channelFunctions[channel].gcpReceiveFunction((u8_t*)(pPayloadTarget + chunkIndex * maxChunkSize), tempSize) == GOS_SUCCESS)
 8008c7e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008c82:	4a3a      	ldr	r2, [pc, #232]	@ (8008d6c <gos_gcpReceiveMessage+0x294>)
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	4413      	add	r3, r2
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8008c8e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8008c92:	fb01 f202 	mul.w	r2, r1, r2
 8008c96:	4611      	mov	r1, r2
 8008c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c9a:	440a      	add	r2, r1
 8008c9c:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4798      	blx	r3
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b55      	cmp	r3, #85	@ 0x55
 8008ca6:	d125      	bne.n	8008cf4 <gos_gcpReceiveMessage+0x21c>
            		{
            			// OK, send response.
                        // Data OK. Send response.
                        *pMessageId = requestHeaderFrame.messageId;
 8008ca8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cac:	801a      	strh	r2, [r3, #0]
                        responseHeaderFrame.ackType = GCP_ACK_OK;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	76bb      	strb	r3, [r7, #26]
                        responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8008cb2:	f107 0318 	add.w	r3, r7, #24
 8008cb6:	210c      	movs	r1, #12
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f003 f81f 	bl	800bcfc <gos_crcDriverGetCrc>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	627b      	str	r3, [r7, #36]	@ 0x24
                        if (channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame)) == GOS_SUCCESS)
 8008cc2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008cc6:	4a29      	ldr	r2, [pc, #164]	@ (8008d6c <gos_gcpReceiveMessage+0x294>)
 8008cc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ccc:	f107 0218 	add.w	r2, r7, #24
 8008cd0:	2110      	movs	r1, #16
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	4798      	blx	r3
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b55      	cmp	r3, #85	@ 0x55
 8008cda:	d10d      	bne.n	8008cf8 <gos_gcpReceiveMessage+0x220>
            	for (chunkIndex = 0u; chunkIndex < dataChunks; chunkIndex++)
 8008cdc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8008ce6:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8008cea:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d3ac      	bcc.n	8008c4c <gos_gcpReceiveMessage+0x174>
 8008cf2:	e002      	b.n	8008cfa <gos_gcpReceiveMessage+0x222>
                        	break;
                        }
            		}
            		else
            		{
            			break;
 8008cf4:	bf00      	nop
 8008cf6:	e000      	b.n	8008cfa <gos_gcpReceiveMessage+0x222>
                        	break;
 8008cf8:	bf00      	nop
            		}
            	}

            	// Integrity check.
            	if (gos_gcpValidateData(&requestHeaderFrame, pPayloadTarget, &headerAck) == GOS_SUCCESS)
 8008cfa:	f107 0217 	add.w	r2, r7, #23
 8008cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008d02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 f860 	bl	8008dca <gos_gcpValidateData>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b55      	cmp	r3, #85	@ 0x55
 8008d0e:	d118      	bne.n	8008d42 <gos_gcpReceiveMessage+0x26a>
            	{
            		receiveMessageResult = GOS_SUCCESS;
 8008d10:	2355      	movs	r3, #85	@ 0x55
 8008d12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        	if (requestHeaderFrame.dataSize == 0)
 8008d16:	e014      	b.n	8008d42 <gos_gcpReceiveMessage+0x26a>
        	}
        }
        else
        {
            // Send response.
            responseHeaderFrame.ackType   = (u8_t)headerAck;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	76bb      	strb	r3, [r7, #26]
            responseHeaderFrame.headerCrc = gos_crcDriverGetCrc((u8_t*)&responseHeaderFrame, (u16_t)(sizeof(responseHeaderFrame) - sizeof(responseHeaderFrame.headerCrc)));
 8008d1c:	f107 0318 	add.w	r3, r7, #24
 8008d20:	210c      	movs	r1, #12
 8008d22:	4618      	mov	r0, r3
 8008d24:	f002 ffea 	bl	800bcfc <gos_crcDriverGetCrc>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	627b      	str	r3, [r7, #36]	@ 0x24
            (void_t) channelFunctions[channel].gcpTransmitFunction((u8_t*)&responseHeaderFrame, (u16_t)sizeof(responseHeaderFrame));
 8008d2c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008d30:	4a0e      	ldr	r2, [pc, #56]	@ (8008d6c <gos_gcpReceiveMessage+0x294>)
 8008d32:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d36:	f107 0218 	add.w	r2, r7, #24
 8008d3a:	2110      	movs	r1, #16
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	e000      	b.n	8008d44 <gos_gcpReceiveMessage+0x26c>
        	if (requestHeaderFrame.dataSize == 0)
 8008d42:	bf00      	nop
    else
    {
        // Nothing to do.
    }

    return receiveMessageResult;
 8008d44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        receiveMessageResult = gos_gcpReceiveMessageInternal(channel, pMessageId, pPayloadTarget, targetSize, maxChunkSize);
 8008d48:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    gos_mutexUnlock(&gcpRxMutexes[channel]);
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4a05      	ldr	r2, [pc, #20]	@ (8008d68 <gos_gcpReceiveMessage+0x290>)
 8008d52:	4413      	add	r3, r2
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 facd 	bl	80092f4 <gos_mutexUnlock>
    return receiveMessageResult;
 8008d5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3750      	adds	r7, #80	@ 0x50
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20001f40 	.word	0x20001f40
 8008d6c:	20001f20 	.word	0x20001f20

08008d70 <gos_gcpValidateHeader>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC or PV error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateHeader (gos_gcpHeaderFrame_t* pHeader, gos_gcpAck_t* pAck)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 8008d7a:	23ae      	movs	r3, #174	@ 0xae
 8008d7c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pHeader != NULL && pAck != NULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d01d      	beq.n	8008dc0 <gos_gcpValidateHeader+0x50>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d01a      	beq.n	8008dc0 <gos_gcpValidateHeader+0x50>
    {
        // Check header CRC.
        if (gos_crcDriverGetCrc((u8_t*)pHeader, (u16_t)(sizeof(*pHeader) - sizeof(pHeader->headerCrc))) == pHeader->headerCrc)
 8008d8a:	210c      	movs	r1, #12
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f002 ffb5 	bl	800bcfc <gos_crcDriverGetCrc>
 8008d92:	4602      	mov	r2, r0
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d10e      	bne.n	8008dba <gos_gcpValidateHeader+0x4a>
        {
            // Validate protocol version
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d106      	bne.n	8008db2 <gos_gcpValidateHeader+0x42>
                pHeader->protocolMinor == GCP_PROTOCOL_VERSION_MINOR)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	785b      	ldrb	r3, [r3, #1]
            if (pHeader->protocolMajor == GCP_PROTOCOL_VERSION_MAJOR &&
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d102      	bne.n	8008db2 <gos_gcpValidateHeader+0x42>
            {
                validateSuccess = GOS_SUCCESS;
 8008dac:	2355      	movs	r3, #85	@ 0x55
 8008dae:	73fb      	strb	r3, [r7, #15]
 8008db0:	e006      	b.n	8008dc0 <gos_gcpValidateHeader+0x50>
            }
            else
            {
                // Protocol version error.
                *pAck = GCP_ACK_PV_ERROR;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2205      	movs	r2, #5
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	e002      	b.n	8008dc0 <gos_gcpValidateHeader+0x50>
            }
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 8008dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <gos_gcpValidateData>:
 *
 * @retval  GOS_SUCCESS : Validation successful.
 * @retval  GOS_ERROR   : CRC error or NULL pointer parameter.
 */
GOS_STATIC gos_result_t gos_gcpValidateData (gos_gcpHeaderFrame_t* pHeader, void_t* pData, gos_gcpAck_t* pAck)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b086      	sub	sp, #24
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t validateSuccess = GOS_ERROR;
 8008dd6:	23ae      	movs	r3, #174	@ 0xae
 8008dd8:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pHeader != NULL && pData != NULL && pAck != NULL)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d016      	beq.n	8008e0e <gos_gcpValidateData+0x44>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d013      	beq.n	8008e0e <gos_gcpValidateData+0x44>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d010      	beq.n	8008e0e <gos_gcpValidateData+0x44>
    {
        // Check data CRC.
        if (gos_crcDriverGetCrc((u8_t*)pData, (u16_t)(pHeader->dataSize)) == pHeader->dataCrc)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	88db      	ldrh	r3, [r3, #6]
 8008df0:	4619      	mov	r1, r3
 8008df2:	68b8      	ldr	r0, [r7, #8]
 8008df4:	f002 ff82 	bl	800bcfc <gos_crcDriverGetCrc>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d102      	bne.n	8008e08 <gos_gcpValidateData+0x3e>
        {
            // Data OK.
            validateSuccess = GOS_SUCCESS;
 8008e02:	2355      	movs	r3, #85	@ 0x55
 8008e04:	75fb      	strb	r3, [r7, #23]
 8008e06:	e002      	b.n	8008e0e <gos_gcpValidateData+0x44>
        }
        else
        {
            *pAck = GCP_ACK_CRC_ERROR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	701a      	strb	r2, [r3, #0]
    else
    {
        // NULL pointer error.
    }

    return validateSuccess;
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <gos_messageInit>:

/*
 * Function: gos_messageInit
 */
gos_result_t gos_messageInit (void_t)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t             messageInitResult  = GOS_SUCCESS;
 8008e1e:	2355      	movs	r3, #85	@ 0x55
 8008e20:	71fb      	strb	r3, [r7, #7]
    gos_messageIndex_t       messageIndex       = 0u;
 8008e22:	2300      	movs	r3, #0
 8008e24:	71bb      	strb	r3, [r7, #6]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8008e26:	2300      	movs	r3, #0
 8008e28:	717b      	strb	r3, [r7, #5]

    /*
     * Function code.
     */
    nextMessageIndex = 0u;
 8008e2a:	4b22      	ldr	r3, [pc, #136]	@ (8008eb4 <gos_messageInit+0x9c>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	701a      	strb	r2, [r3, #0]
    nextWaiterIndex  = 0u;
 8008e30:	4b21      	ldr	r3, [pc, #132]	@ (8008eb8 <gos_messageInit+0xa0>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]

    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8008e36:	2300      	movs	r3, #0
 8008e38:	71bb      	strb	r3, [r7, #6]
 8008e3a:	e014      	b.n	8008e66 <gos_messageInit+0x4e>
    {
        messageArray[messageIndex].messageId   = GOS_MESSAGE_INVALID_ID;
 8008e3c:	79bb      	ldrb	r3, [r7, #6]
 8008e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008ebc <gos_messageInit+0xa4>)
 8008e40:	2154      	movs	r1, #84	@ 0x54
 8008e42:	fb01 f303 	mul.w	r3, r1, r3
 8008e46:	4413      	add	r3, r2
 8008e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e4c:	801a      	strh	r2, [r3, #0]
        messageArray[messageIndex].messageSize = 0u;
 8008e4e:	79bb      	ldrb	r3, [r7, #6]
 8008e50:	4a1a      	ldr	r2, [pc, #104]	@ (8008ebc <gos_messageInit+0xa4>)
 8008e52:	2154      	movs	r1, #84	@ 0x54
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	4413      	add	r3, r2
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
    for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8008e60:	79bb      	ldrb	r3, [r7, #6]
 8008e62:	3301      	adds	r3, #1
 8008e64:	71bb      	strb	r3, [r7, #6]
 8008e66:	79bb      	ldrb	r3, [r7, #6]
 8008e68:	2b07      	cmp	r3, #7
 8008e6a:	d9e7      	bls.n	8008e3c <gos_messageInit+0x24>
    }

    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	717b      	strb	r3, [r7, #5]
 8008e70:	e009      	b.n	8008e86 <gos_messageInit+0x6e>
    {
        messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8008e72:	797b      	ldrb	r3, [r7, #5]
 8008e74:	4a12      	ldr	r2, [pc, #72]	@ (8008ec0 <gos_messageInit+0xa8>)
 8008e76:	015b      	lsls	r3, r3, #5
 8008e78:	4413      	add	r3, r2
 8008e7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e7e:	801a      	strh	r2, [r3, #0]
    for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8008e80:	797b      	ldrb	r3, [r7, #5]
 8008e82:	3301      	adds	r3, #1
 8008e84:	717b      	strb	r3, [r7, #5]
 8008e86:	797b      	ldrb	r3, [r7, #5]
 8008e88:	2b09      	cmp	r3, #9
 8008e8a:	d9f2      	bls.n	8008e72 <gos_messageInit+0x5a>
    }

    // Initialize message mutex, and register message daemon task.
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 8008e8c:	480d      	ldr	r0, [pc, #52]	@ (8008ec4 <gos_messageInit+0xac>)
 8008e8e:	f000 f911 	bl	80090b4 <gos_mutexInit>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b55      	cmp	r3, #85	@ 0x55
 8008e96:	d106      	bne.n	8008ea6 <gos_messageInit+0x8e>
        gos_taskRegister(&messageDaemonTaskDesc, &messageDaemonTaskId) != GOS_SUCCESS)
 8008e98:	490b      	ldr	r1, [pc, #44]	@ (8008ec8 <gos_messageInit+0xb0>)
 8008e9a:	480c      	ldr	r0, [pc, #48]	@ (8008ecc <gos_messageInit+0xb4>)
 8008e9c:	f7fd fcf8 	bl	8006890 <gos_taskRegister>
 8008ea0:	4603      	mov	r3, r0
    if (gos_mutexInit(&messageMutex) != GOS_SUCCESS ||
 8008ea2:	2b55      	cmp	r3, #85	@ 0x55
 8008ea4:	d001      	beq.n	8008eaa <gos_messageInit+0x92>
    {
        messageInitResult = GOS_ERROR;
 8008ea6:	23ae      	movs	r3, #174	@ 0xae
 8008ea8:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return messageInitResult;
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20002342 	.word	0x20002342
 8008eb8:	20002343 	.word	0x20002343
 8008ebc:	20001f60 	.word	0x20001f60
 8008ec0:	20002200 	.word	0x20002200
 8008ec4:	20002344 	.word	0x20002344
 8008ec8:	20002340 	.word	0x20002340
 8008ecc:	20001738 	.word	0x20001738

08008ed0 <gos_messageDaemonTask>:
 *          buffer and unblocks the previously blocked task.
 *
 * @return    -
 */
GOS_STATIC void_t gos_messageDaemonTask (void_t)
{
 8008ed0:	b590      	push	{r4, r7, lr}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_messageIndex_t       messageIndex       = 0u;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	71fb      	strb	r3, [r7, #7]
    gos_messageWaiterIndex_t messageWaiterIndex = 0u;
 8008eda:	2300      	movs	r3, #0
 8008edc:	71bb      	strb	r3, [r7, #6]
    gos_messageIdIndex_t     messageIdIndex     = 0u;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	717b      	strb	r3, [r7, #5]
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 8008ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ee6:	4870      	ldr	r0, [pc, #448]	@ (80090a8 <gos_messageDaemonTask+0x1d8>)
 8008ee8:	f000 f8fe 	bl	80090e8 <gos_mutexLock>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b55      	cmp	r3, #85	@ 0x55
 8008ef0:	f040 80d5 	bne.w	800909e <gos_messageDaemonTask+0x1ce>
        {
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	71bb      	strb	r3, [r7, #6]
 8008ef8:	e0ca      	b.n	8009090 <gos_messageDaemonTask+0x1c0>
            {
                if (messageWaiterArray[messageWaiterIndex].waiterTaskId != GOS_INVALID_TASK_ID)
 8008efa:	79bb      	ldrb	r3, [r7, #6]
 8008efc:	4a6b      	ldr	r2, [pc, #428]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8008efe:	015b      	lsls	r3, r3, #5
 8008f00:	4413      	add	r3, r2
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f08:	f000 80bf 	beq.w	800908a <gos_messageDaemonTask+0x1ba>
                {
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	717b      	strb	r3, [r7, #5]
 8008f10:	e077      	b.n	8009002 <gos_messageDaemonTask+0x132>
                    {
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8008f12:	2300      	movs	r3, #0
 8008f14:	71fb      	strb	r3, [r7, #7]
 8008f16:	e06e      	b.n	8008ff6 <gos_messageDaemonTask+0x126>
                        {
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8008f18:	79ba      	ldrb	r2, [r7, #6]
 8008f1a:	797b      	ldrb	r3, [r7, #5]
 8008f1c:	4963      	ldr	r1, [pc, #396]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8008f1e:	0112      	lsls	r2, r2, #4
 8008f20:	4413      	add	r3, r2
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	440b      	add	r3, r1
 8008f26:	88da      	ldrh	r2, [r3, #6]
                                messageArray[messageIndex].messageId)
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	4961      	ldr	r1, [pc, #388]	@ (80090b0 <gos_messageDaemonTask+0x1e0>)
 8008f2c:	2054      	movs	r0, #84	@ 0x54
 8008f2e:	fb00 f303 	mul.w	r3, r0, r3
 8008f32:	440b      	add	r3, r1
 8008f34:	881b      	ldrh	r3, [r3, #0]
                            if (messageWaiterArray[messageWaiterIndex].messageIdArray[messageIdIndex] ==
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d15a      	bne.n	8008ff0 <gos_messageDaemonTask+0x120>
                            {
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 8008f3a:	79bb      	ldrb	r3, [r7, #6]
 8008f3c:	4a5b      	ldr	r2, [pc, #364]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8008f3e:	015b      	lsls	r3, r3, #5
 8008f40:	4413      	add	r3, r2
 8008f42:	3318      	adds	r3, #24
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	1cd8      	adds	r0, r3, #3
                                      (void_t*)messageArray[messageIndex].messageBytes,
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	2254      	movs	r2, #84	@ 0x54
 8008f4c:	fb02 f303 	mul.w	r3, r2, r3
 8008f50:	4a57      	ldr	r2, [pc, #348]	@ (80090b0 <gos_messageDaemonTask+0x1e0>)
 8008f52:	4413      	add	r3, r2
 8008f54:	1cd9      	adds	r1, r3, #3
                                      messageArray[messageIndex].messageSize);
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	4a55      	ldr	r2, [pc, #340]	@ (80090b0 <gos_messageDaemonTask+0x1e0>)
 8008f5a:	2454      	movs	r4, #84	@ 0x54
 8008f5c:	fb04 f303 	mul.w	r3, r4, r3
 8008f60:	4413      	add	r3, r2
 8008f62:	3302      	adds	r3, #2
 8008f64:	781b      	ldrb	r3, [r3, #0]
                                (void_t*) memcpy(messageWaiterArray[messageWaiterIndex].target->messageBytes,
 8008f66:	461a      	mov	r2, r3
 8008f68:	f003 f892 	bl	800c090 <memcpy>
                                messageWaiterArray[messageWaiterIndex].target->messageSize  = messageArray[messageIndex].messageSize;
 8008f6c:	79fa      	ldrb	r2, [r7, #7]
 8008f6e:	79bb      	ldrb	r3, [r7, #6]
 8008f70:	494e      	ldr	r1, [pc, #312]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8008f72:	015b      	lsls	r3, r3, #5
 8008f74:	440b      	add	r3, r1
 8008f76:	3318      	adds	r3, #24
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	494d      	ldr	r1, [pc, #308]	@ (80090b0 <gos_messageDaemonTask+0x1e0>)
 8008f7c:	2054      	movs	r0, #84	@ 0x54
 8008f7e:	fb00 f202 	mul.w	r2, r0, r2
 8008f82:	440a      	add	r2, r1
 8008f84:	3202      	adds	r2, #2
 8008f86:	7812      	ldrb	r2, [r2, #0]
 8008f88:	709a      	strb	r2, [r3, #2]
                                messageWaiterArray[messageWaiterIndex].target->messageId    = messageArray[messageIndex].messageId;
 8008f8a:	79fa      	ldrb	r2, [r7, #7]
 8008f8c:	79bb      	ldrb	r3, [r7, #6]
 8008f8e:	4947      	ldr	r1, [pc, #284]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8008f90:	015b      	lsls	r3, r3, #5
 8008f92:	440b      	add	r3, r1
 8008f94:	3318      	adds	r3, #24
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4945      	ldr	r1, [pc, #276]	@ (80090b0 <gos_messageDaemonTask+0x1e0>)
 8008f9a:	2054      	movs	r0, #84	@ 0x54
 8008f9c:	fb00 f202 	mul.w	r2, r0, r2
 8008fa0:	440a      	add	r2, r1
 8008fa2:	8812      	ldrh	r2, [r2, #0]
 8008fa4:	801a      	strh	r2, [r3, #0]

                                (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 8008fa6:	79bb      	ldrb	r3, [r7, #6]
 8008fa8:	4a40      	ldr	r2, [pc, #256]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8008faa:	015b      	lsls	r3, r3, #5
 8008fac:	4413      	add	r3, r2
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fe fa39 	bl	8007428 <gos_taskUnblock>

                                messageArray[messageIndex].messageId = GOS_MESSAGE_INVALID_ID;
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	4a3d      	ldr	r2, [pc, #244]	@ (80090b0 <gos_messageDaemonTask+0x1e0>)
 8008fba:	2154      	movs	r1, #84	@ 0x54
 8008fbc:	fb01 f303 	mul.w	r3, r1, r3
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008fc6:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 8008fc8:	79bb      	ldrb	r3, [r7, #6]
 8008fca:	4a38      	ldr	r2, [pc, #224]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8008fcc:	015b      	lsls	r3, r3, #5
 8008fce:	4413      	add	r3, r2
 8008fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fd4:	801a      	strh	r2, [r3, #0]
                                messageWaiterArray[messageWaiterIndex].waiterServed = GOS_TRUE;
 8008fd6:	79bb      	ldrb	r3, [r7, #6]
 8008fd8:	4a34      	ldr	r2, [pc, #208]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8008fda:	015b      	lsls	r3, r3, #5
 8008fdc:	4413      	add	r3, r2
 8008fde:	331c      	adds	r3, #28
 8008fe0:	2236      	movs	r2, #54	@ 0x36
 8008fe2:	701a      	strb	r2, [r3, #0]

                                messageIndex       = CFG_MESSAGE_MAX_NUMBER;
 8008fe4:	2308      	movs	r3, #8
 8008fe6:	71fb      	strb	r3, [r7, #7]
                                messageIdIndex     = CFG_MESSAGE_MAX_WAITER_IDS;
 8008fe8:	2308      	movs	r3, #8
 8008fea:	717b      	strb	r3, [r7, #5]
                                messageWaiterIndex = CFG_MESSAGE_MAX_WAITERS;
 8008fec:	230a      	movs	r3, #10
 8008fee:	71bb      	strb	r3, [r7, #6]
                        for (messageIndex = 0u; messageIndex < CFG_MESSAGE_MAX_NUMBER; messageIndex++)
 8008ff0:	79fb      	ldrb	r3, [r7, #7]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	71fb      	strb	r3, [r7, #7]
 8008ff6:	79fb      	ldrb	r3, [r7, #7]
 8008ff8:	2b07      	cmp	r3, #7
 8008ffa:	d98d      	bls.n	8008f18 <gos_messageDaemonTask+0x48>
                    for (messageIdIndex = 0u; messageIdIndex < CFG_MESSAGE_MAX_WAITER_IDS; messageIdIndex++)
 8008ffc:	797b      	ldrb	r3, [r7, #5]
 8008ffe:	3301      	adds	r3, #1
 8009000:	717b      	strb	r3, [r7, #5]
 8009002:	797b      	ldrb	r3, [r7, #5]
 8009004:	2b07      	cmp	r3, #7
 8009006:	d984      	bls.n	8008f12 <gos_messageDaemonTask+0x42>
                                // Nothing to do.
                            }
                        }
                    }

                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8009008:	79bb      	ldrb	r3, [r7, #6]
 800900a:	4a28      	ldr	r2, [pc, #160]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 800900c:	015b      	lsls	r3, r3, #5
 800900e:	4413      	add	r3, r2
 8009010:	331c      	adds	r3, #28
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2b49      	cmp	r3, #73	@ 0x49
 8009016:	d138      	bne.n	800908a <gos_messageDaemonTask+0x1ba>
                        messageWaiterArray[messageWaiterIndex].waitTmo != GOS_MESSAGE_ENDLESS_TMO)
 8009018:	79bb      	ldrb	r3, [r7, #6]
 800901a:	4a24      	ldr	r2, [pc, #144]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 800901c:	015b      	lsls	r3, r3, #5
 800901e:	4413      	add	r3, r2
 8009020:	3302      	adds	r3, #2
 8009022:	881b      	ldrh	r3, [r3, #0]
                    if (messageWaiterArray[messageWaiterIndex].waiterServed == GOS_FALSE &&
 8009024:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009028:	4293      	cmp	r3, r2
 800902a:	d02e      	beq.n	800908a <gos_messageDaemonTask+0x1ba>
                    {
                        messageWaiterArray[messageWaiterIndex].waitTmoCounter++;
 800902c:	79bb      	ldrb	r3, [r7, #6]
 800902e:	491f      	ldr	r1, [pc, #124]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	440a      	add	r2, r1
 8009034:	3204      	adds	r2, #4
 8009036:	8812      	ldrh	r2, [r2, #0]
 8009038:	3201      	adds	r2, #1
 800903a:	b291      	uxth	r1, r2
 800903c:	4a1b      	ldr	r2, [pc, #108]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 800903e:	015b      	lsls	r3, r3, #5
 8009040:	4413      	add	r3, r2
 8009042:	3304      	adds	r3, #4
 8009044:	460a      	mov	r2, r1
 8009046:	801a      	strh	r2, [r3, #0]

                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 8009048:	79bb      	ldrb	r3, [r7, #6]
 800904a:	4a18      	ldr	r2, [pc, #96]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 800904c:	015b      	lsls	r3, r3, #5
 800904e:	4413      	add	r3, r2
 8009050:	3304      	adds	r3, #4
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	2332      	movs	r3, #50	@ 0x32
 8009058:	fb02 f303 	mul.w	r3, r2, r3
                             messageWaiterArray[messageWaiterIndex].waitTmo)
 800905c:	79ba      	ldrb	r2, [r7, #6]
 800905e:	4913      	ldr	r1, [pc, #76]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8009060:	0152      	lsls	r2, r2, #5
 8009062:	440a      	add	r2, r1
 8009064:	3202      	adds	r2, #2
 8009066:	8812      	ldrh	r2, [r2, #0]
                        if ((messageWaiterArray[messageWaiterIndex].waitTmoCounter * GOS_MESSAGE_DAEMON_POLL_TIME_MS) >
 8009068:	4293      	cmp	r3, r2
 800906a:	d90e      	bls.n	800908a <gos_messageDaemonTask+0x1ba>
                        {
                            // Timeout. Delete waiter, unblock task.
                            (void_t) gos_taskUnblock(messageWaiterArray[messageWaiterIndex].waiterTaskId);
 800906c:	79bb      	ldrb	r3, [r7, #6]
 800906e:	4a0f      	ldr	r2, [pc, #60]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8009070:	015b      	lsls	r3, r3, #5
 8009072:	4413      	add	r3, r2
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe f9d6 	bl	8007428 <gos_taskUnblock>
                            messageWaiterArray[messageWaiterIndex].waiterTaskId = GOS_INVALID_TASK_ID;
 800907c:	79bb      	ldrb	r3, [r7, #6]
 800907e:	4a0b      	ldr	r2, [pc, #44]	@ (80090ac <gos_messageDaemonTask+0x1dc>)
 8009080:	015b      	lsls	r3, r3, #5
 8009082:	4413      	add	r3, r2
 8009084:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009088:	801a      	strh	r2, [r3, #0]
            for (messageWaiterIndex = 0u; messageWaiterIndex < CFG_MESSAGE_MAX_WAITERS; messageWaiterIndex++)
 800908a:	79bb      	ldrb	r3, [r7, #6]
 800908c:	3301      	adds	r3, #1
 800908e:	71bb      	strb	r3, [r7, #6]
 8009090:	79bb      	ldrb	r3, [r7, #6]
 8009092:	2b09      	cmp	r3, #9
 8009094:	f67f af31 	bls.w	8008efa <gos_messageDaemonTask+0x2a>
                    // Nothing to do.
                }
            }

            // Unlock message mutex.
            (void_t) gos_mutexUnlock(&messageMutex);
 8009098:	4803      	ldr	r0, [pc, #12]	@ (80090a8 <gos_messageDaemonTask+0x1d8>)
 800909a:	f000 f92b 	bl	80092f4 <gos_mutexUnlock>
        else
        {
            // Nothing to do.
        }

        (void_t) gos_taskSleep(GOS_MESSAGE_DAEMON_POLL_TIME_MS);
 800909e:	2032      	movs	r0, #50	@ 0x32
 80090a0:	f7fd fd88 	bl	8006bb4 <gos_taskSleep>
        if (gos_mutexLock(&messageMutex, GOS_MUTEX_ENDLESS_TMO) == GOS_SUCCESS)
 80090a4:	e71d      	b.n	8008ee2 <gos_messageDaemonTask+0x12>
 80090a6:	bf00      	nop
 80090a8:	20002344 	.word	0x20002344
 80090ac:	20002200 	.word	0x20002200
 80090b0:	20001f60 	.word	0x20001f60

080090b4 <gos_mutexInit>:

/*
 * Function: gos_mutexInit
 */
gos_result_t gos_mutexInit (gos_mutex_t* pMutex)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t mutexInitResult = GOS_ERROR;
 80090bc:	23ae      	movs	r3, #174	@ 0xae
 80090be:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d008      	beq.n	80090d8 <gos_mutexInit+0x24>
    {
        pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	22d2      	movs	r2, #210	@ 0xd2
 80090ca:	701a      	strb	r2, [r3, #0]
        pMutex->owner      = GOS_INVALID_TASK_ID;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80090d2:	805a      	strh	r2, [r3, #2]
        mutexInitResult    = GOS_SUCCESS;
 80090d4:	2355      	movs	r3, #85	@ 0x55
 80090d6:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return mutexInitResult;
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <gos_mutexLock>:

/*
 * Function: gos_mutexLock
 */
gos_result_t gos_mutexLock (gos_mutex_t* pMutex, u32_t timeout)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    gos_result_t   lockResult   = GOS_ERROR;
 80090f2:	23ae      	movs	r3, #174	@ 0xae
 80090f4:	75fb      	strb	r3, [r7, #23]
    u32_t          sysTickStart = gos_kernelGetSysTicks();
 80090f6:	f7fc fbaf 	bl	8005858 <gos_kernelGetSysTicks>
 80090fa:	60f8      	str	r0, [r7, #12]

#if CFG_USE_PRIO_INHERITANCE
    gos_tid_t      currentId    = GOS_INVALID_TASK_ID;
 80090fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009100:	817b      	strh	r3, [r7, #10]
    gos_tid_t      ownerId      = GOS_INVALID_TASK_ID;
 8009102:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009106:	82bb      	strh	r3, [r7, #20]
    gos_taskPrio_t ownerPrio    = GOS_TASK_IDLE_PRIO;
 8009108:	23ff      	movs	r3, #255	@ 0xff
 800910a:	727b      	strb	r3, [r7, #9]
    gos_taskPrio_t currentPrio  = GOS_TASK_IDLE_PRIO;
 800910c:	23ff      	movs	r3, #255	@ 0xff
 800910e:	723b      	strb	r3, [r7, #8]
    bool_t         prioChanged  = GOS_FALSE;
 8009110:	2349      	movs	r3, #73	@ 0x49
 8009112:	74fb      	strb	r3, [r7, #19]
#endif

    /*
     * Function code.
     */
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 8009114:	e0ce      	b.n	80092b4 <gos_mutexLock+0x1cc>
    {
        GOS_ATOMIC_ENTER
 8009116:	4b73      	ldr	r3, [pc, #460]	@ (80092e4 <gos_mutexLock+0x1fc>)
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d108      	bne.n	8009130 <gos_mutexLock+0x48>
 800911e:	b672      	cpsid	i
 8009120:	f3ef 8310 	mrs	r3, PRIMASK
 8009124:	4a70      	ldr	r2, [pc, #448]	@ (80092e8 <gos_mutexLock+0x200>)
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	4b6c      	ldr	r3, [pc, #432]	@ (80092e4 <gos_mutexLock+0x1fc>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	3301      	adds	r3, #1
 8009136:	b2da      	uxtb	r2, r3
 8009138:	4b6a      	ldr	r3, [pc, #424]	@ (80092e4 <gos_mutexLock+0x1fc>)
 800913a:	701a      	strb	r2, [r3, #0]
 800913c:	4b6b      	ldr	r3, [pc, #428]	@ (80092ec <gos_mutexLock+0x204>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	3301      	adds	r3, #1
 8009142:	b2da      	uxtb	r2, r3
 8009144:	4b69      	ldr	r3, [pc, #420]	@ (80092ec <gos_mutexLock+0x204>)
 8009146:	701a      	strb	r2, [r3, #0]

        if (pMutex->mutexState == GOS_MUTEX_UNLOCKED)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	2bd2      	cmp	r3, #210	@ 0xd2
 800914e:	d13b      	bne.n	80091c8 <gos_mutexLock+0xe0>
        {
#if CFG_USE_PRIO_INHERITANCE
            // Restore priority if it was changed.
            if (prioChanged == GOS_TRUE)
 8009150:	7cfb      	ldrb	r3, [r7, #19]
 8009152:	2b36      	cmp	r3, #54	@ 0x36
 8009154:	d12d      	bne.n	80091b2 <gos_mutexLock+0xca>
            {
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 8009156:	4b66      	ldr	r3, [pc, #408]	@ (80092f0 <gos_mutexLock+0x208>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d105      	bne.n	800916a <gos_mutexLock+0x82>
 800915e:	4b63      	ldr	r3, [pc, #396]	@ (80092ec <gos_mutexLock+0x204>)
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	b2da      	uxtb	r2, r3
 8009166:	4b61      	ldr	r3, [pc, #388]	@ (80092ec <gos_mutexLock+0x204>)
 8009168:	701a      	strb	r2, [r3, #0]
 800916a:	4b61      	ldr	r3, [pc, #388]	@ (80092f0 <gos_mutexLock+0x208>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	3301      	adds	r3, #1
 8009170:	b2da      	uxtb	r2, r3
 8009172:	4b5f      	ldr	r3, [pc, #380]	@ (80092f0 <gos_mutexLock+0x208>)
 8009174:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(ownerId, ownerPrio);
 8009176:	7a7a      	ldrb	r2, [r7, #9]
 8009178:	8abb      	ldrh	r3, [r7, #20]
 800917a:	4611      	mov	r1, r2
 800917c:	4618      	mov	r0, r3
 800917e:	f7fe fb61 	bl	8007844 <gos_taskSetPriority>
                GOS_ISR_EXIT
 8009182:	4b5b      	ldr	r3, [pc, #364]	@ (80092f0 <gos_mutexLock+0x208>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <gos_mutexLock+0xae>
 800918a:	4b59      	ldr	r3, [pc, #356]	@ (80092f0 <gos_mutexLock+0x208>)
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	3b01      	subs	r3, #1
 8009190:	b2da      	uxtb	r2, r3
 8009192:	4b57      	ldr	r3, [pc, #348]	@ (80092f0 <gos_mutexLock+0x208>)
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	4b56      	ldr	r3, [pc, #344]	@ (80092f0 <gos_mutexLock+0x208>)
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d109      	bne.n	80091b2 <gos_mutexLock+0xca>
 800919e:	4b53      	ldr	r3, [pc, #332]	@ (80092ec <gos_mutexLock+0x204>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d005      	beq.n	80091b2 <gos_mutexLock+0xca>
 80091a6:	4b51      	ldr	r3, [pc, #324]	@ (80092ec <gos_mutexLock+0x204>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	4b4f      	ldr	r3, [pc, #316]	@ (80092ec <gos_mutexLock+0x204>)
 80091b0:	701a      	strb	r2, [r3, #0]
            else
            {
                // Priority was not changed.
            }
#endif
            pMutex->mutexState = GOS_MUTEX_LOCKED;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	226b      	movs	r2, #107	@ 0x6b
 80091b6:	701a      	strb	r2, [r3, #0]
            (void_t) gos_taskGetCurrentId(&(pMutex->owner));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	3302      	adds	r3, #2
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fe ff45 	bl	800804c <gos_taskGetCurrentId>

            lockResult = GOS_SUCCESS;
 80091c2:	2355      	movs	r3, #85	@ 0x55
 80091c4:	75fb      	strb	r3, [r7, #23]
 80091c6:	e04b      	b.n	8009260 <gos_mutexLock+0x178>
        {
            // Mutex is locked.

#if CFG_USE_PRIO_INHERITANCE
            // Check priority.
            (void_t) gos_taskGetPriority(pMutex->owner, &ownerPrio);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	885b      	ldrh	r3, [r3, #2]
 80091cc:	f107 0209 	add.w	r2, r7, #9
 80091d0:	4611      	mov	r1, r2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe fcbe 	bl	8007b54 <gos_taskGetPriority>
            (void_t) gos_taskGetCurrentId(&currentId);
 80091d8:	f107 030a 	add.w	r3, r7, #10
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe ff35 	bl	800804c <gos_taskGetCurrentId>
            (void_t) gos_taskGetPriority(currentId, &currentPrio);
 80091e2:	897b      	ldrh	r3, [r7, #10]
 80091e4:	f107 0208 	add.w	r2, r7, #8
 80091e8:	4611      	mov	r1, r2
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe fcb2 	bl	8007b54 <gos_taskGetPriority>
            ownerId = pMutex->owner;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	885b      	ldrh	r3, [r3, #2]
 80091f4:	82bb      	strh	r3, [r7, #20]

            // If the current task has a higher priority,
            // then modify the owner priority.
            if (currentPrio < ownerPrio)
 80091f6:	7a3a      	ldrb	r2, [r7, #8]
 80091f8:	7a7b      	ldrb	r3, [r7, #9]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d230      	bcs.n	8009260 <gos_mutexLock+0x178>
            {
                // Add temporary priority.
                // ISR enter to avoid privilege issues.
                GOS_ISR_ENTER
 80091fe:	4b3c      	ldr	r3, [pc, #240]	@ (80092f0 <gos_mutexLock+0x208>)
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d105      	bne.n	8009212 <gos_mutexLock+0x12a>
 8009206:	4b39      	ldr	r3, [pc, #228]	@ (80092ec <gos_mutexLock+0x204>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	3301      	adds	r3, #1
 800920c:	b2da      	uxtb	r2, r3
 800920e:	4b37      	ldr	r3, [pc, #220]	@ (80092ec <gos_mutexLock+0x204>)
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	4b37      	ldr	r3, [pc, #220]	@ (80092f0 <gos_mutexLock+0x208>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	3301      	adds	r3, #1
 8009218:	b2da      	uxtb	r2, r3
 800921a:	4b35      	ldr	r3, [pc, #212]	@ (80092f0 <gos_mutexLock+0x208>)
 800921c:	701a      	strb	r2, [r3, #0]
                (void_t) gos_taskSetPriority(pMutex->owner, currentPrio);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	885b      	ldrh	r3, [r3, #2]
 8009222:	7a3a      	ldrb	r2, [r7, #8]
 8009224:	4611      	mov	r1, r2
 8009226:	4618      	mov	r0, r3
 8009228:	f7fe fb0c 	bl	8007844 <gos_taskSetPriority>
                GOS_ISR_EXIT
 800922c:	4b30      	ldr	r3, [pc, #192]	@ (80092f0 <gos_mutexLock+0x208>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d005      	beq.n	8009240 <gos_mutexLock+0x158>
 8009234:	4b2e      	ldr	r3, [pc, #184]	@ (80092f0 <gos_mutexLock+0x208>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	3b01      	subs	r3, #1
 800923a:	b2da      	uxtb	r2, r3
 800923c:	4b2c      	ldr	r3, [pc, #176]	@ (80092f0 <gos_mutexLock+0x208>)
 800923e:	701a      	strb	r2, [r3, #0]
 8009240:	4b2b      	ldr	r3, [pc, #172]	@ (80092f0 <gos_mutexLock+0x208>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d109      	bne.n	800925c <gos_mutexLock+0x174>
 8009248:	4b28      	ldr	r3, [pc, #160]	@ (80092ec <gos_mutexLock+0x204>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <gos_mutexLock+0x174>
 8009250:	4b26      	ldr	r3, [pc, #152]	@ (80092ec <gos_mutexLock+0x204>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	3b01      	subs	r3, #1
 8009256:	b2da      	uxtb	r2, r3
 8009258:	4b24      	ldr	r3, [pc, #144]	@ (80092ec <gos_mutexLock+0x204>)
 800925a:	701a      	strb	r2, [r3, #0]

                prioChanged = GOS_TRUE;
 800925c:	2336      	movs	r3, #54	@ 0x36
 800925e:	74fb      	strb	r3, [r7, #19]
                // There is no priority inversion.
            }
#endif
        }

        GOS_ATOMIC_EXIT
 8009260:	4b20      	ldr	r3, [pc, #128]	@ (80092e4 <gos_mutexLock+0x1fc>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d005      	beq.n	8009274 <gos_mutexLock+0x18c>
 8009268:	4b1e      	ldr	r3, [pc, #120]	@ (80092e4 <gos_mutexLock+0x1fc>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	3b01      	subs	r3, #1
 800926e:	b2da      	uxtb	r2, r3
 8009270:	4b1c      	ldr	r3, [pc, #112]	@ (80092e4 <gos_mutexLock+0x1fc>)
 8009272:	701a      	strb	r2, [r3, #0]
 8009274:	4b1b      	ldr	r3, [pc, #108]	@ (80092e4 <gos_mutexLock+0x1fc>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d108      	bne.n	800928e <gos_mutexLock+0x1a6>
 800927c:	4b1a      	ldr	r3, [pc, #104]	@ (80092e8 <gos_mutexLock+0x200>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f383 8810 	msr	PRIMASK, r3
 8009284:	b662      	cpsie	i
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	4b17      	ldr	r3, [pc, #92]	@ (80092ec <gos_mutexLock+0x204>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d005      	beq.n	80092a2 <gos_mutexLock+0x1ba>
 8009296:	4b15      	ldr	r3, [pc, #84]	@ (80092ec <gos_mutexLock+0x204>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	3b01      	subs	r3, #1
 800929c:	b2da      	uxtb	r2, r3
 800929e:	4b13      	ldr	r3, [pc, #76]	@ (80092ec <gos_mutexLock+0x204>)
 80092a0:	701a      	strb	r2, [r3, #0]

        if (lockResult == GOS_SUCCESS)
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	2b55      	cmp	r3, #85	@ 0x55
 80092a6:	d017      	beq.n	80092d8 <gos_mutexLock+0x1f0>
        {
            break;
        }
        else
        {
            if (timeout > 0u)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <gos_mutexLock+0x1cc>
            {
                (void_t) gos_taskSleep(MUTEX_LOCK_SLEEP_MS);
 80092ae:	2002      	movs	r0, #2
 80092b0:	f7fd fc80 	bl	8006bb4 <gos_taskSleep>
    while ((pMutex != NULL) && (((gos_kernelGetSysTicks() - sysTickStart) <= timeout) || (timeout == GOS_MUTEX_ENDLESS_TMO)))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00f      	beq.n	80092da <gos_mutexLock+0x1f2>
 80092ba:	f7fc facd 	bl	8005858 <gos_kernelGetSysTicks>
 80092be:	4602      	mov	r2, r0
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	f4bf af25 	bcs.w	8009116 <gos_mutexLock+0x2e>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	f43f af20 	beq.w	8009116 <gos_mutexLock+0x2e>
 80092d6:	e000      	b.n	80092da <gos_mutexLock+0x1f2>
            break;
 80092d8:	bf00      	nop
                // Zero timeout, no sleep needed.
            }
        }
    }

    return lockResult;
 80092da:	7dfb      	ldrb	r3, [r7, #23]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3718      	adds	r7, #24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20001e9b 	.word	0x20001e9b
 80092e8:	20001e9c 	.word	0x20001e9c
 80092ec:	20001e99 	.word	0x20001e99
 80092f0:	20001e9a 	.word	0x20001e9a

080092f4 <gos_mutexUnlock>:

/*
 * Function: gos_mutexUnlock
 */
gos_result_t gos_mutexUnlock (gos_mutex_t* pMutex)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t unlockResult = GOS_ERROR;
 80092fc:	23ae      	movs	r3, #174	@ 0xae
 80092fe:	73fb      	strb	r3, [r7, #15]
    gos_tid_t    currentTask  = GOS_INVALID_TASK_ID;
 8009300:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009304:	81bb      	strh	r3, [r7, #12]

    /*
     * Function code.
     */
    if (pMutex != NULL)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d04c      	beq.n	80093a6 <gos_mutexUnlock+0xb2>
    {
        GOS_ATOMIC_ENTER
 800930c:	4b28      	ldr	r3, [pc, #160]	@ (80093b0 <gos_mutexUnlock+0xbc>)
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d108      	bne.n	8009326 <gos_mutexUnlock+0x32>
 8009314:	b672      	cpsid	i
 8009316:	f3ef 8310 	mrs	r3, PRIMASK
 800931a:	4a26      	ldr	r2, [pc, #152]	@ (80093b4 <gos_mutexUnlock+0xc0>)
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	4b22      	ldr	r3, [pc, #136]	@ (80093b0 <gos_mutexUnlock+0xbc>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	3301      	adds	r3, #1
 800932c:	b2da      	uxtb	r2, r3
 800932e:	4b20      	ldr	r3, [pc, #128]	@ (80093b0 <gos_mutexUnlock+0xbc>)
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	4b21      	ldr	r3, [pc, #132]	@ (80093b8 <gos_mutexUnlock+0xc4>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	3301      	adds	r3, #1
 8009338:	b2da      	uxtb	r2, r3
 800933a:	4b1f      	ldr	r3, [pc, #124]	@ (80093b8 <gos_mutexUnlock+0xc4>)
 800933c:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentTask);
 800933e:	f107 030c 	add.w	r3, r7, #12
 8009342:	4618      	mov	r0, r3
 8009344:	f7fe fe82 	bl	800804c <gos_taskGetCurrentId>

        if (pMutex->owner == currentTask)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	885a      	ldrh	r2, [r3, #2]
 800934c:	89bb      	ldrh	r3, [r7, #12]
 800934e:	429a      	cmp	r2, r3
 8009350:	d108      	bne.n	8009364 <gos_mutexUnlock+0x70>
        {
            pMutex->mutexState = GOS_MUTEX_UNLOCKED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	22d2      	movs	r2, #210	@ 0xd2
 8009356:	701a      	strb	r2, [r3, #0]
            pMutex->owner      = GOS_INVALID_TASK_ID;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800935e:	805a      	strh	r2, [r3, #2]
            unlockResult       = GOS_SUCCESS;
 8009360:	2355      	movs	r3, #85	@ 0x55
 8009362:	73fb      	strb	r3, [r7, #15]
        else
        {
            // Only the owner can unlock it.
        }

        GOS_ATOMIC_EXIT
 8009364:	4b12      	ldr	r3, [pc, #72]	@ (80093b0 <gos_mutexUnlock+0xbc>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <gos_mutexUnlock+0x84>
 800936c:	4b10      	ldr	r3, [pc, #64]	@ (80093b0 <gos_mutexUnlock+0xbc>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	3b01      	subs	r3, #1
 8009372:	b2da      	uxtb	r2, r3
 8009374:	4b0e      	ldr	r3, [pc, #56]	@ (80093b0 <gos_mutexUnlock+0xbc>)
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	4b0d      	ldr	r3, [pc, #52]	@ (80093b0 <gos_mutexUnlock+0xbc>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d108      	bne.n	8009392 <gos_mutexUnlock+0x9e>
 8009380:	4b0c      	ldr	r3, [pc, #48]	@ (80093b4 <gos_mutexUnlock+0xc0>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f383 8810 	msr	PRIMASK, r3
 8009388:	b662      	cpsie	i
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	4b09      	ldr	r3, [pc, #36]	@ (80093b8 <gos_mutexUnlock+0xc4>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d005      	beq.n	80093a6 <gos_mutexUnlock+0xb2>
 800939a:	4b07      	ldr	r3, [pc, #28]	@ (80093b8 <gos_mutexUnlock+0xc4>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	3b01      	subs	r3, #1
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	4b05      	ldr	r3, [pc, #20]	@ (80093b8 <gos_mutexUnlock+0xc4>)
 80093a4:	701a      	strb	r2, [r3, #0]
    else
    {
        // Null pointer.
    }

    return unlockResult;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20001e9b 	.word	0x20001e9b
 80093b4:	20001e9c 	.word	0x20001e9c
 80093b8:	20001e99 	.word	0x20001e99

080093bc <gos_queueInit>:

/*
 * Function: gos_queueInit
 */
gos_result_t gos_queueInit (void_t)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t     queueInitResult   = GOS_SUCCESS;
 80093c2:	2355      	movs	r3, #85	@ 0x55
 80093c4:	717b      	strb	r3, [r7, #5]
    gos_queueIndex_t queueIndex        = 0u;
 80093c6:	2300      	movs	r3, #0
 80093c8:	71fb      	strb	r3, [r7, #7]
    gos_queueIndex_t queueElementIndex = 0u;
 80093ca:	2300      	movs	r3, #0
 80093cc:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80093ce:	2300      	movs	r3, #0
 80093d0:	71fb      	strb	r3, [r7, #7]
 80093d2:	e038      	b.n	8009446 <gos_queueInit+0x8a>
    {
        readCounters[queueIndex]               = 0u;
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	4a22      	ldr	r2, [pc, #136]	@ (8009460 <gos_queueInit+0xa4>)
 80093d8:	2100      	movs	r1, #0
 80093da:	54d1      	strb	r1, [r2, r3]
        writeCounters[queueIndex]              = 0u;
 80093dc:	79fb      	ldrb	r3, [r7, #7]
 80093de:	4a21      	ldr	r2, [pc, #132]	@ (8009464 <gos_queueInit+0xa8>)
 80093e0:	2100      	movs	r1, #0
 80093e2:	54d1      	strb	r1, [r2, r3]
        queues[queueIndex].queueId             = GOS_INVALID_QUEUE_ID;
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	4a20      	ldr	r2, [pc, #128]	@ (8009468 <gos_queueInit+0xac>)
 80093e8:	f641 7184 	movw	r1, #8068	@ 0x1f84
 80093ec:	fb01 f303 	mul.w	r3, r1, r3
 80093f0:	4413      	add	r3, r2
 80093f2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80093f6:	801a      	strh	r2, [r3, #0]
        queues[queueIndex].actualElementNumber = 0u;
 80093f8:	79fb      	ldrb	r3, [r7, #7]
 80093fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009468 <gos_queueInit+0xac>)
 80093fc:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8009400:	fb01 f303 	mul.w	r3, r1, r3
 8009404:	4413      	add	r3, r2
 8009406:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 800940a:	3302      	adds	r3, #2
 800940c:	2200      	movs	r2, #0
 800940e:	701a      	strb	r2, [r3, #0]

        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 8009410:	2300      	movs	r3, #0
 8009412:	71bb      	strb	r3, [r7, #6]
 8009414:	e011      	b.n	800943a <gos_queueInit+0x7e>
        {
            queues[queueIndex].queueElements[queueElementIndex].elementLength = 0u;
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	79ba      	ldrb	r2, [r7, #6]
 800941a:	4913      	ldr	r1, [pc, #76]	@ (8009468 <gos_queueInit+0xac>)
 800941c:	20c9      	movs	r0, #201	@ 0xc9
 800941e:	fb00 f202 	mul.w	r2, r0, r2
 8009422:	f641 7084 	movw	r0, #8068	@ 0x1f84
 8009426:	fb00 f303 	mul.w	r3, r0, r3
 800942a:	4413      	add	r3, r2
 800942c:	440b      	add	r3, r1
 800942e:	33e2      	adds	r3, #226	@ 0xe2
 8009430:	2200      	movs	r2, #0
 8009432:	701a      	strb	r2, [r3, #0]
        for (queueElementIndex = 0u; queueElementIndex < CFG_QUEUE_MAX_ELEMENTS; queueElementIndex++)
 8009434:	79bb      	ldrb	r3, [r7, #6]
 8009436:	3301      	adds	r3, #1
 8009438:	71bb      	strb	r3, [r7, #6]
 800943a:	79bb      	ldrb	r3, [r7, #6]
 800943c:	2b27      	cmp	r3, #39	@ 0x27
 800943e:	d9ea      	bls.n	8009416 <gos_queueInit+0x5a>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	3301      	adds	r3, #1
 8009444:	71fb      	strb	r3, [r7, #7]
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	2b03      	cmp	r3, #3
 800944a:	d9c3      	bls.n	80093d4 <gos_queueInit+0x18>
        }
    }

    // Initialize mutex.
    queueInitResult = gos_mutexInit(&queueMutex);
 800944c:	4807      	ldr	r0, [pc, #28]	@ (800946c <gos_queueInit+0xb0>)
 800944e:	f7ff fe31 	bl	80090b4 <gos_mutexInit>
 8009452:	4603      	mov	r3, r0
 8009454:	717b      	strb	r3, [r7, #5]

    return queueInitResult;
 8009456:	797b      	ldrb	r3, [r7, #5]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	2000a158 	.word	0x2000a158
 8009464:	2000a15c 	.word	0x2000a15c
 8009468:	20002348 	.word	0x20002348
 800946c:	2000a160 	.word	0x2000a160

08009470 <gos_queueCreate>:

/*
 * Function: gos_queueCreate
 */
gos_result_t gos_queueCreate (gos_queueDescriptor_t* pQueueDescriptor)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t     queueCreateResult = GOS_ERROR;
 8009478:	23ae      	movs	r3, #174	@ 0xae
 800947a:	73fb      	strb	r3, [r7, #15]
    gos_queueIndex_t queueIndex        = 0u;
 800947c:	2300      	movs	r3, #0
 800947e:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (pQueueDescriptor != NULL)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d048      	beq.n	8009518 <gos_queueCreate+0xa8>
    {
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 8009486:	2300      	movs	r3, #0
 8009488:	73bb      	strb	r3, [r7, #14]
 800948a:	e042      	b.n	8009512 <gos_queueCreate+0xa2>
        {
            if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 800948c:	7bbb      	ldrb	r3, [r7, #14]
 800948e:	4a25      	ldr	r2, [pc, #148]	@ (8009524 <gos_queueCreate+0xb4>)
 8009490:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	4413      	add	r3, r2
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80094a0:	d134      	bne.n	800950c <gos_queueCreate+0x9c>
            {
                queues[queueIndex].queueId = (GOS_DEFAULT_QUEUE_ID + queueIndex);
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
 80094a8:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80094ac:	b290      	uxth	r0, r2
 80094ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009524 <gos_queueCreate+0xb4>)
 80094b0:	f641 7184 	movw	r1, #8068	@ 0x1f84
 80094b4:	fb01 f303 	mul.w	r3, r1, r3
 80094b8:	4413      	add	r3, r2
 80094ba:	4602      	mov	r2, r0
 80094bc:	801a      	strh	r2, [r3, #0]
                pQueueDescriptor->queueId = queues[queueIndex].queueId;
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	4a18      	ldr	r2, [pc, #96]	@ (8009524 <gos_queueCreate+0xb4>)
 80094c2:	f641 7184 	movw	r1, #8068	@ 0x1f84
 80094c6:	fb01 f303 	mul.w	r3, r1, r3
 80094ca:	4413      	add	r3, r2
 80094cc:	881a      	ldrh	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	801a      	strh	r2, [r3, #0]
#if CFG_QUEUE_USE_NAME == 1
                if (pQueueDescriptor->queueName != NULL &&
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	3302      	adds	r3, #2
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d015      	beq.n	8009506 <gos_queueCreate+0x96>
                    strlen(pQueueDescriptor->queueName) <= CFG_QUEUE_MAX_NAME_LENGTH)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	3302      	adds	r3, #2
 80094de:	4618      	mov	r0, r3
 80094e0:	f7f6 fe88 	bl	80001f4 <strlen>
 80094e4:	4603      	mov	r3, r0
                if (pQueueDescriptor->queueName != NULL &&
 80094e6:	2b18      	cmp	r3, #24
 80094e8:	d80d      	bhi.n	8009506 <gos_queueCreate+0x96>
                {
                    (void_t) strcpy(queues[queueIndex].queueName, pQueueDescriptor->queueName);
 80094ea:	7bbb      	ldrb	r3, [r7, #14]
 80094ec:	f641 7284 	movw	r2, #8068	@ 0x1f84
 80094f0:	fb02 f303 	mul.w	r3, r2, r3
 80094f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009524 <gos_queueCreate+0xb4>)
 80094f6:	4413      	add	r3, r2
 80094f8:	1c9a      	adds	r2, r3, #2
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3302      	adds	r3, #2
 80094fe:	4619      	mov	r1, r3
 8009500:	4610      	mov	r0, r2
 8009502:	f002 fdbd 	bl	800c080 <strcpy>
                else
                {
                    // Nothing to do.
                }
#endif
                queueCreateResult = GOS_SUCCESS;
 8009506:	2355      	movs	r3, #85	@ 0x55
 8009508:	73fb      	strb	r3, [r7, #15]
                break;
 800950a:	e005      	b.n	8009518 <gos_queueCreate+0xa8>
        for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	3301      	adds	r3, #1
 8009510:	73bb      	strb	r3, [r7, #14]
 8009512:	7bbb      	ldrb	r3, [r7, #14]
 8009514:	2b03      	cmp	r3, #3
 8009516:	d9b9      	bls.n	800948c <gos_queueCreate+0x1c>
    else
    {
        // Nothing to do.
    }

    return queueCreateResult;
 8009518:	7bfb      	ldrb	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20002348 	.word	0x20002348

08009528 <gos_queuePut>:
 */
gos_result_t gos_queuePut (
        gos_queueId_t     queueId,     void_t* element,
        gos_queueLength_t elementSize, u32_t   timeout
        )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607b      	str	r3, [r7, #4]
 8009532:	4603      	mov	r3, r0
 8009534:	81fb      	strh	r3, [r7, #14]
 8009536:	4613      	mov	r3, r2
 8009538:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queuePutResult = GOS_ERROR;
 800953a:	23ae      	movs	r3, #174	@ 0xae
 800953c:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 800953e:	2300      	movs	r3, #0
 8009540:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	485a      	ldr	r0, [pc, #360]	@ (80096b0 <gos_queuePut+0x188>)
 8009546:	f7ff fdcf 	bl	80090e8 <gos_mutexLock>
 800954a:	4603      	mov	r3, r0
 800954c:	2b55      	cmp	r3, #85	@ 0x55
 800954e:	f040 80a7 	bne.w	80096a0 <gos_queuePut+0x178>
 8009552:	89fb      	ldrh	r3, [r7, #14]
 8009554:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009558:	f0c0 80a2 	bcc.w	80096a0 <gos_queuePut+0x178>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	f243 0203 	movw	r2, #12291	@ 0x3003
 8009562:	4293      	cmp	r3, r2
 8009564:	f200 809c 	bhi.w	80096a0 <gos_queuePut+0x178>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8098 	beq.w	80096a0 <gos_queuePut+0x178>
        element                                          != NULL                 &&
 8009570:	7b7b      	ldrb	r3, [r7, #13]
 8009572:	2bc8      	cmp	r3, #200	@ 0xc8
 8009574:	f200 8094 	bhi.w	80096a0 <gos_queuePut+0x178>
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID
 8009578:	89fb      	ldrh	r3, [r7, #14]
 800957a:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 800957e:	4a4d      	ldr	r2, [pc, #308]	@ (80096b4 <gos_queuePut+0x18c>)
 8009580:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8009584:	fb01 f303 	mul.w	r3, r1, r3
 8009588:	4413      	add	r3, r2
 800958a:	881b      	ldrh	r3, [r3, #0]
        elementSize                                      <= CFG_QUEUE_MAX_LENGTH &&
 800958c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009590:	f000 8086 	beq.w	80096a0 <gos_queuePut+0x178>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 8009594:	89fb      	ldrh	r3, [r7, #14]
 8009596:	75bb      	strb	r3, [r7, #22]

        // Check if queue is full.
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 8009598:	7dbb      	ldrb	r3, [r7, #22]
 800959a:	4a47      	ldr	r2, [pc, #284]	@ (80096b8 <gos_queuePut+0x190>)
 800959c:	5cd3      	ldrb	r3, [r2, r3]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d009      	beq.n	80095b6 <gos_queuePut+0x8e>
 80095a2:	7dbb      	ldrb	r3, [r7, #22]
 80095a4:	4a45      	ldr	r2, [pc, #276]	@ (80096bc <gos_queuePut+0x194>)
 80095a6:	5cd3      	ldrb	r3, [r2, r3]
 80095a8:	4619      	mov	r1, r3
 80095aa:	7dbb      	ldrb	r3, [r7, #22]
 80095ac:	4a42      	ldr	r2, [pc, #264]	@ (80096b8 <gos_queuePut+0x190>)
 80095ae:	5cd3      	ldrb	r3, [r2, r3]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	4299      	cmp	r1, r3
 80095b4:	d109      	bne.n	80095ca <gos_queuePut+0xa2>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 80095b6:	7dbb      	ldrb	r3, [r7, #22]
 80095b8:	4a3f      	ldr	r2, [pc, #252]	@ (80096b8 <gos_queuePut+0x190>)
 80095ba:	5cd3      	ldrb	r3, [r2, r3]
        if ((readCounters[queueIndex] > 0 && writeCounters[queueIndex] != (readCounters[queueIndex] - 1)) ||
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d16f      	bne.n	80096a0 <gos_queuePut+0x178>
            ((readCounters[queueIndex] == 0) && writeCounters[queueIndex] != CFG_QUEUE_MAX_ELEMENTS - 1))
 80095c0:	7dbb      	ldrb	r3, [r7, #22]
 80095c2:	4a3e      	ldr	r2, [pc, #248]	@ (80096bc <gos_queuePut+0x194>)
 80095c4:	5cd3      	ldrb	r3, [r2, r3]
 80095c6:	2b27      	cmp	r3, #39	@ 0x27
 80095c8:	d06a      	beq.n	80096a0 <gos_queuePut+0x178>
        {
            (void_t) memcpy(
                    queues[queueIndex].queueElements[writeCounters[queueIndex]].queueElementBytes,
 80095ca:	7dbb      	ldrb	r3, [r7, #22]
 80095cc:	7dba      	ldrb	r2, [r7, #22]
 80095ce:	493b      	ldr	r1, [pc, #236]	@ (80096bc <gos_queuePut+0x194>)
 80095d0:	5c8a      	ldrb	r2, [r1, r2]
 80095d2:	4611      	mov	r1, r2
 80095d4:	22c9      	movs	r2, #201	@ 0xc9
 80095d6:	fb01 f202 	mul.w	r2, r1, r2
 80095da:	f641 7184 	movw	r1, #8068	@ 0x1f84
 80095de:	fb01 f303 	mul.w	r3, r1, r3
 80095e2:	4413      	add	r3, r2
 80095e4:	3318      	adds	r3, #24
 80095e6:	4a33      	ldr	r2, [pc, #204]	@ (80096b4 <gos_queuePut+0x18c>)
 80095e8:	4413      	add	r3, r2
 80095ea:	3302      	adds	r3, #2
            (void_t) memcpy(
 80095ec:	7b7a      	ldrb	r2, [r7, #13]
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f002 fd4d 	bl	800c090 <memcpy>
                    element,
                    elementSize
                    );
            queues[queueIndex].queueElements[writeCounters[queueIndex]].elementLength = elementSize;
 80095f6:	7dbb      	ldrb	r3, [r7, #22]
 80095f8:	7dba      	ldrb	r2, [r7, #22]
 80095fa:	4930      	ldr	r1, [pc, #192]	@ (80096bc <gos_queuePut+0x194>)
 80095fc:	5c8a      	ldrb	r2, [r1, r2]
 80095fe:	4610      	mov	r0, r2
 8009600:	492c      	ldr	r1, [pc, #176]	@ (80096b4 <gos_queuePut+0x18c>)
 8009602:	22c9      	movs	r2, #201	@ 0xc9
 8009604:	fb00 f202 	mul.w	r2, r0, r2
 8009608:	f641 7084 	movw	r0, #8068	@ 0x1f84
 800960c:	fb00 f303 	mul.w	r3, r0, r3
 8009610:	4413      	add	r3, r2
 8009612:	440b      	add	r3, r1
 8009614:	33e2      	adds	r3, #226	@ 0xe2
 8009616:	7b7a      	ldrb	r2, [r7, #13]
 8009618:	701a      	strb	r2, [r3, #0]
            writeCounters[queueIndex]++;
 800961a:	7dbb      	ldrb	r3, [r7, #22]
 800961c:	4a27      	ldr	r2, [pc, #156]	@ (80096bc <gos_queuePut+0x194>)
 800961e:	5cd2      	ldrb	r2, [r2, r3]
 8009620:	3201      	adds	r2, #1
 8009622:	b2d1      	uxtb	r1, r2
 8009624:	4a25      	ldr	r2, [pc, #148]	@ (80096bc <gos_queuePut+0x194>)
 8009626:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber++;
 8009628:	7dba      	ldrb	r2, [r7, #22]
 800962a:	4922      	ldr	r1, [pc, #136]	@ (80096b4 <gos_queuePut+0x18c>)
 800962c:	f641 7384 	movw	r3, #8068	@ 0x1f84
 8009630:	fb02 f303 	mul.w	r3, r2, r3
 8009634:	440b      	add	r3, r1
 8009636:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 800963a:	3302      	adds	r3, #2
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	3301      	adds	r3, #1
 8009640:	b2d8      	uxtb	r0, r3
 8009642:	491c      	ldr	r1, [pc, #112]	@ (80096b4 <gos_queuePut+0x18c>)
 8009644:	f641 7384 	movw	r3, #8068	@ 0x1f84
 8009648:	fb02 f303 	mul.w	r3, r2, r3
 800964c:	440b      	add	r3, r1
 800964e:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8009652:	3302      	adds	r3, #2
 8009654:	4602      	mov	r2, r0
 8009656:	701a      	strb	r2, [r3, #0]

            if (writeCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 8009658:	7dbb      	ldrb	r3, [r7, #22]
 800965a:	4a18      	ldr	r2, [pc, #96]	@ (80096bc <gos_queuePut+0x194>)
 800965c:	5cd3      	ldrb	r3, [r2, r3]
 800965e:	2b27      	cmp	r3, #39	@ 0x27
 8009660:	d903      	bls.n	800966a <gos_queuePut+0x142>
            {
                writeCounters[queueIndex] = 0u;
 8009662:	7dbb      	ldrb	r3, [r7, #22]
 8009664:	4a15      	ldr	r2, [pc, #84]	@ (80096bc <gos_queuePut+0x194>)
 8009666:	2100      	movs	r1, #0
 8009668:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue gets full and there is a registered hook function, call it.
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 800966a:	7dbb      	ldrb	r3, [r7, #22]
 800966c:	4a11      	ldr	r2, [pc, #68]	@ (80096b4 <gos_queuePut+0x18c>)
 800966e:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8009672:	fb01 f303 	mul.w	r3, r1, r3
 8009676:	4413      	add	r3, r2
 8009678:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 800967c:	3302      	adds	r3, #2
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b27      	cmp	r3, #39	@ 0x27
 8009682:	d10b      	bne.n	800969c <gos_queuePut+0x174>
                queueFullHook != NULL)
 8009684:	4b0e      	ldr	r3, [pc, #56]	@ (80096c0 <gos_queuePut+0x198>)
 8009686:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == CFG_QUEUE_MAX_ELEMENTS - 1 &&
 8009688:	2b00      	cmp	r3, #0
 800968a:	d007      	beq.n	800969c <gos_queuePut+0x174>
            {
                gos_mutexUnlock(&queueMutex);
 800968c:	4808      	ldr	r0, [pc, #32]	@ (80096b0 <gos_queuePut+0x188>)
 800968e:	f7ff fe31 	bl	80092f4 <gos_mutexUnlock>
                queueFullHook(queueId);
 8009692:	4b0b      	ldr	r3, [pc, #44]	@ (80096c0 <gos_queuePut+0x198>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	89fa      	ldrh	r2, [r7, #14]
 8009698:	4610      	mov	r0, r2
 800969a:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queuePutResult = GOS_SUCCESS;
 800969c:	2355      	movs	r3, #85	@ 0x55
 800969e:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 80096a0:	4803      	ldr	r0, [pc, #12]	@ (80096b0 <gos_queuePut+0x188>)
 80096a2:	f7ff fe27 	bl	80092f4 <gos_mutexUnlock>

    return queuePutResult;
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	2000a160 	.word	0x2000a160
 80096b4:	20002348 	.word	0x20002348
 80096b8:	2000a158 	.word	0x2000a158
 80096bc:	2000a15c 	.word	0x2000a15c
 80096c0:	2000a164 	.word	0x2000a164

080096c4 <gos_queueGet>:
 */
gos_result_t gos_queueGet (
        gos_queueId_t     queueId,    void_t* target,
        gos_queueLength_t targetSize, u32_t   timeout
        )
{
 80096c4:	b590      	push	{r4, r7, lr}
 80096c6:	b087      	sub	sp, #28
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607b      	str	r3, [r7, #4]
 80096ce:	4603      	mov	r3, r0
 80096d0:	81fb      	strh	r3, [r7, #14]
 80096d2:	4613      	mov	r3, r2
 80096d4:	737b      	strb	r3, [r7, #13]
    /*
     * Local variables.
     */
    gos_result_t     queueGetResult = GOS_ERROR;
 80096d6:	23ae      	movs	r3, #174	@ 0xae
 80096d8:	75fb      	strb	r3, [r7, #23]
    gos_queueIndex_t queueIndex     = 0u;
 80096da:	2300      	movs	r3, #0
 80096dc:	75bb      	strb	r3, [r7, #22]

    /*
     * Function code.
     */
    if (gos_mutexLock(&queueMutex, timeout)              == GOS_SUCCESS          &&
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	4864      	ldr	r0, [pc, #400]	@ (8009874 <gos_queueGet+0x1b0>)
 80096e2:	f7ff fd01 	bl	80090e8 <gos_mutexLock>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b55      	cmp	r3, #85	@ 0x55
 80096ea:	f040 80bb 	bne.w	8009864 <gos_queueGet+0x1a0>
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 80b7 	beq.w	8009864 <gos_queueGet+0x1a0>
        target                                           != NULL                 &&
 80096f6:	89fb      	ldrh	r3, [r7, #14]
 80096f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096fc:	f0c0 80b2 	bcc.w	8009864 <gos_queueGet+0x1a0>
        queueId                                          >= GOS_DEFAULT_QUEUE_ID &&
 8009700:	89fb      	ldrh	r3, [r7, #14]
 8009702:	f243 0203 	movw	r2, #12291	@ 0x3003
 8009706:	4293      	cmp	r3, r2
 8009708:	f200 80ac 	bhi.w	8009864 <gos_queueGet+0x1a0>
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 800970c:	89fb      	ldrh	r3, [r7, #14]
 800970e:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 8009712:	4a59      	ldr	r2, [pc, #356]	@ (8009878 <gos_queueGet+0x1b4>)
 8009714:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8009718:	fb01 f303 	mul.w	r3, r1, r3
 800971c:	4413      	add	r3, r2
 800971e:	881b      	ldrh	r3, [r3, #0]
        (queueId - GOS_DEFAULT_QUEUE_ID)                 <  CFG_QUEUE_MAX_NUMBER &&
 8009720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009724:	f000 809e 	beq.w	8009864 <gos_queueGet+0x1a0>
        targetSize                                       >=
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueElements[readCounters[(queueId - GOS_DEFAULT_QUEUE_ID)]].elementLength
 8009728:	89fb      	ldrh	r3, [r7, #14]
 800972a:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 800972e:	89fa      	ldrh	r2, [r7, #14]
 8009730:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 8009734:	4951      	ldr	r1, [pc, #324]	@ (800987c <gos_queueGet+0x1b8>)
 8009736:	5c8a      	ldrb	r2, [r1, r2]
 8009738:	4610      	mov	r0, r2
 800973a:	494f      	ldr	r1, [pc, #316]	@ (8009878 <gos_queueGet+0x1b4>)
 800973c:	22c9      	movs	r2, #201	@ 0xc9
 800973e:	fb00 f202 	mul.w	r2, r0, r2
 8009742:	f641 7084 	movw	r0, #8068	@ 0x1f84
 8009746:	fb00 f303 	mul.w	r3, r0, r3
 800974a:	4413      	add	r3, r2
 800974c:	440b      	add	r3, r1
 800974e:	33e2      	adds	r3, #226	@ 0xe2
 8009750:	781b      	ldrb	r3, [r3, #0]
        queues[(queueId - GOS_DEFAULT_QUEUE_ID)].queueId != GOS_INVALID_QUEUE_ID &&
 8009752:	7b7a      	ldrb	r2, [r7, #13]
 8009754:	429a      	cmp	r2, r3
 8009756:	f0c0 8085 	bcc.w	8009864 <gos_queueGet+0x1a0>
        )
    {
        queueIndex = (gos_queueIndex_t)(queueId - GOS_DEFAULT_QUEUE_ID);
 800975a:	89fb      	ldrh	r3, [r7, #14]
 800975c:	75bb      	strb	r3, [r7, #22]

        // Check if queue is empty.
        if (readCounters[queueIndex] != writeCounters[queueIndex])
 800975e:	7dbb      	ldrb	r3, [r7, #22]
 8009760:	4a46      	ldr	r2, [pc, #280]	@ (800987c <gos_queueGet+0x1b8>)
 8009762:	5cd2      	ldrb	r2, [r2, r3]
 8009764:	7dbb      	ldrb	r3, [r7, #22]
 8009766:	4946      	ldr	r1, [pc, #280]	@ (8009880 <gos_queueGet+0x1bc>)
 8009768:	5ccb      	ldrb	r3, [r1, r3]
 800976a:	429a      	cmp	r2, r3
 800976c:	d07a      	beq.n	8009864 <gos_queueGet+0x1a0>
        {
            (void_t) memcpy(target, queues[queueIndex].queueElements[readCounters[queueIndex]].queueElementBytes, queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength);
 800976e:	7dbb      	ldrb	r3, [r7, #22]
 8009770:	7dba      	ldrb	r2, [r7, #22]
 8009772:	4942      	ldr	r1, [pc, #264]	@ (800987c <gos_queueGet+0x1b8>)
 8009774:	5c8a      	ldrb	r2, [r1, r2]
 8009776:	4611      	mov	r1, r2
 8009778:	22c9      	movs	r2, #201	@ 0xc9
 800977a:	fb01 f202 	mul.w	r2, r1, r2
 800977e:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8009782:	fb01 f303 	mul.w	r3, r1, r3
 8009786:	4413      	add	r3, r2
 8009788:	3318      	adds	r3, #24
 800978a:	4a3b      	ldr	r2, [pc, #236]	@ (8009878 <gos_queueGet+0x1b4>)
 800978c:	4413      	add	r3, r2
 800978e:	1c99      	adds	r1, r3, #2
 8009790:	7dbb      	ldrb	r3, [r7, #22]
 8009792:	7dba      	ldrb	r2, [r7, #22]
 8009794:	4839      	ldr	r0, [pc, #228]	@ (800987c <gos_queueGet+0x1b8>)
 8009796:	5c82      	ldrb	r2, [r0, r2]
 8009798:	4614      	mov	r4, r2
 800979a:	4837      	ldr	r0, [pc, #220]	@ (8009878 <gos_queueGet+0x1b4>)
 800979c:	22c9      	movs	r2, #201	@ 0xc9
 800979e:	fb04 f202 	mul.w	r2, r4, r2
 80097a2:	f641 7484 	movw	r4, #8068	@ 0x1f84
 80097a6:	fb04 f303 	mul.w	r3, r4, r3
 80097aa:	4413      	add	r3, r2
 80097ac:	4403      	add	r3, r0
 80097ae:	33e2      	adds	r3, #226	@ 0xe2
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	68b8      	ldr	r0, [r7, #8]
 80097b6:	f002 fc6b 	bl	800c090 <memcpy>
            queues[queueIndex].queueElements[readCounters[queueIndex]].elementLength = 0u;
 80097ba:	7dbb      	ldrb	r3, [r7, #22]
 80097bc:	7dba      	ldrb	r2, [r7, #22]
 80097be:	492f      	ldr	r1, [pc, #188]	@ (800987c <gos_queueGet+0x1b8>)
 80097c0:	5c8a      	ldrb	r2, [r1, r2]
 80097c2:	4610      	mov	r0, r2
 80097c4:	492c      	ldr	r1, [pc, #176]	@ (8009878 <gos_queueGet+0x1b4>)
 80097c6:	22c9      	movs	r2, #201	@ 0xc9
 80097c8:	fb00 f202 	mul.w	r2, r0, r2
 80097cc:	f641 7084 	movw	r0, #8068	@ 0x1f84
 80097d0:	fb00 f303 	mul.w	r3, r0, r3
 80097d4:	4413      	add	r3, r2
 80097d6:	440b      	add	r3, r1
 80097d8:	33e2      	adds	r3, #226	@ 0xe2
 80097da:	2200      	movs	r2, #0
 80097dc:	701a      	strb	r2, [r3, #0]
            readCounters[queueIndex]++;
 80097de:	7dbb      	ldrb	r3, [r7, #22]
 80097e0:	4a26      	ldr	r2, [pc, #152]	@ (800987c <gos_queueGet+0x1b8>)
 80097e2:	5cd2      	ldrb	r2, [r2, r3]
 80097e4:	3201      	adds	r2, #1
 80097e6:	b2d1      	uxtb	r1, r2
 80097e8:	4a24      	ldr	r2, [pc, #144]	@ (800987c <gos_queueGet+0x1b8>)
 80097ea:	54d1      	strb	r1, [r2, r3]
            queues[queueIndex].actualElementNumber--;
 80097ec:	7dba      	ldrb	r2, [r7, #22]
 80097ee:	4922      	ldr	r1, [pc, #136]	@ (8009878 <gos_queueGet+0x1b4>)
 80097f0:	f641 7384 	movw	r3, #8068	@ 0x1f84
 80097f4:	fb02 f303 	mul.w	r3, r2, r3
 80097f8:	440b      	add	r3, r1
 80097fa:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 80097fe:	3302      	adds	r3, #2
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	3b01      	subs	r3, #1
 8009804:	b2d8      	uxtb	r0, r3
 8009806:	491c      	ldr	r1, [pc, #112]	@ (8009878 <gos_queueGet+0x1b4>)
 8009808:	f641 7384 	movw	r3, #8068	@ 0x1f84
 800980c:	fb02 f303 	mul.w	r3, r2, r3
 8009810:	440b      	add	r3, r1
 8009812:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8009816:	3302      	adds	r3, #2
 8009818:	4602      	mov	r2, r0
 800981a:	701a      	strb	r2, [r3, #0]

            if (readCounters[queueIndex] >= CFG_QUEUE_MAX_ELEMENTS)
 800981c:	7dbb      	ldrb	r3, [r7, #22]
 800981e:	4a17      	ldr	r2, [pc, #92]	@ (800987c <gos_queueGet+0x1b8>)
 8009820:	5cd3      	ldrb	r3, [r2, r3]
 8009822:	2b27      	cmp	r3, #39	@ 0x27
 8009824:	d903      	bls.n	800982e <gos_queueGet+0x16a>
            {
                readCounters[queueIndex] = 0u;
 8009826:	7dbb      	ldrb	r3, [r7, #22]
 8009828:	4a14      	ldr	r2, [pc, #80]	@ (800987c <gos_queueGet+0x1b8>)
 800982a:	2100      	movs	r1, #0
 800982c:	54d1      	strb	r1, [r2, r3]
            {
                // Nothing to do.
            }

            // If queue is empty now and empty hook function is registered, call it.
            if (queues[queueIndex].actualElementNumber == 0u &&
 800982e:	7dbb      	ldrb	r3, [r7, #22]
 8009830:	4a11      	ldr	r2, [pc, #68]	@ (8009878 <gos_queueGet+0x1b4>)
 8009832:	f641 7184 	movw	r1, #8068	@ 0x1f84
 8009836:	fb01 f303 	mul.w	r3, r1, r3
 800983a:	4413      	add	r3, r2
 800983c:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8009840:	3302      	adds	r3, #2
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10b      	bne.n	8009860 <gos_queueGet+0x19c>
                queueEmptyHook != NULL)
 8009848:	4b0e      	ldr	r3, [pc, #56]	@ (8009884 <gos_queueGet+0x1c0>)
 800984a:	681b      	ldr	r3, [r3, #0]
            if (queues[queueIndex].actualElementNumber == 0u &&
 800984c:	2b00      	cmp	r3, #0
 800984e:	d007      	beq.n	8009860 <gos_queueGet+0x19c>
            {
                gos_mutexUnlock(&queueMutex);
 8009850:	4808      	ldr	r0, [pc, #32]	@ (8009874 <gos_queueGet+0x1b0>)
 8009852:	f7ff fd4f 	bl	80092f4 <gos_mutexUnlock>
                queueEmptyHook(queueId);
 8009856:	4b0b      	ldr	r3, [pc, #44]	@ (8009884 <gos_queueGet+0x1c0>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	89fa      	ldrh	r2, [r7, #14]
 800985c:	4610      	mov	r0, r2
 800985e:	4798      	blx	r3
            else
            {
                // Nothing to do.
            }

            queueGetResult = GOS_SUCCESS;
 8009860:	2355      	movs	r3, #85	@ 0x55
 8009862:	75fb      	strb	r3, [r7, #23]
    {
        // Nothing to do.
    }

    // Unlock mutex.
    (void_t) gos_mutexUnlock(&queueMutex);
 8009864:	4803      	ldr	r0, [pc, #12]	@ (8009874 <gos_queueGet+0x1b0>)
 8009866:	f7ff fd45 	bl	80092f4 <gos_mutexUnlock>

    return queueGetResult;
 800986a:	7dfb      	ldrb	r3, [r7, #23]
}
 800986c:	4618      	mov	r0, r3
 800986e:	371c      	adds	r7, #28
 8009870:	46bd      	mov	sp, r7
 8009872:	bd90      	pop	{r4, r7, pc}
 8009874:	2000a160 	.word	0x2000a160
 8009878:	20002348 	.word	0x20002348
 800987c:	2000a158 	.word	0x2000a158
 8009880:	2000a15c 	.word	0x2000a15c
 8009884:	2000a168 	.word	0x2000a168

08009888 <gos_queueDump>:

/*
 * Function: gos_queueDump
 */
void_t gos_queueDump (void_t)
{
 8009888:	b590      	push	{r4, r7, lr}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_queueIndex_t queueIndex = 0u;
 800988e:	2300      	movs	r3, #0
 8009890:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    (void_t) gos_shellDriverTransmitString("Queue dump:\r\n");
 8009892:	4826      	ldr	r0, [pc, #152]	@ (800992c <gos_queueDump+0xa4>)
 8009894:	f002 fa88 	bl	800bda8 <gos_shellDriverTransmitString>
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 8009898:	4825      	ldr	r0, [pc, #148]	@ (8009930 <gos_queueDump+0xa8>)
 800989a:	f002 fa85 	bl	800bda8 <gos_shellDriverTransmitString>

#if CFG_QUEUE_USE_NAME == 1
    (void_t) gos_shellDriverTransmitString(
 800989e:	4b25      	ldr	r3, [pc, #148]	@ (8009934 <gos_queueDump+0xac>)
 80098a0:	4a25      	ldr	r2, [pc, #148]	@ (8009938 <gos_queueDump+0xb0>)
 80098a2:	4926      	ldr	r1, [pc, #152]	@ (800993c <gos_queueDump+0xb4>)
 80098a4:	4826      	ldr	r0, [pc, #152]	@ (8009940 <gos_queueDump+0xb8>)
 80098a6:	f002 fa7f 	bl	800bda8 <gos_shellDriverTransmitString>
            "| %6s | %28s |\r\n",
            "qid",
            "elements"
            );
#endif
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR);
 80098aa:	4821      	ldr	r0, [pc, #132]	@ (8009930 <gos_queueDump+0xa8>)
 80098ac:	f002 fa7c 	bl	800bda8 <gos_shellDriverTransmitString>

    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 80098b0:	2300      	movs	r3, #0
 80098b2:	71fb      	strb	r3, [r7, #7]
 80098b4:	e02d      	b.n	8009912 <gos_queueDump+0x8a>
    {
        if (queues[queueIndex].queueId == GOS_INVALID_QUEUE_ID)
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	4a22      	ldr	r2, [pc, #136]	@ (8009944 <gos_queueDump+0xbc>)
 80098ba:	f641 7184 	movw	r1, #8068	@ 0x1f84
 80098be:	fb01 f303 	mul.w	r3, r1, r3
 80098c2:	4413      	add	r3, r2
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098ca:	d026      	beq.n	800991a <gos_queueDump+0x92>
        else
        {
#if CFG_QUEUE_USE_NAME == 1
            (void_t) gos_shellDriverTransmitString(
                    "| 0x%04X | %28s | %13d |\r\n",
                    queues[queueIndex].queueId,
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	4a1d      	ldr	r2, [pc, #116]	@ (8009944 <gos_queueDump+0xbc>)
 80098d0:	f641 7184 	movw	r1, #8068	@ 0x1f84
 80098d4:	fb01 f303 	mul.w	r3, r1, r3
 80098d8:	4413      	add	r3, r2
 80098da:	881b      	ldrh	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 80098dc:	461c      	mov	r4, r3
                    queues[queueIndex].queueName,
 80098de:	79fb      	ldrb	r3, [r7, #7]
 80098e0:	f641 7284 	movw	r2, #8068	@ 0x1f84
 80098e4:	fb02 f303 	mul.w	r3, r2, r3
 80098e8:	4a16      	ldr	r2, [pc, #88]	@ (8009944 <gos_queueDump+0xbc>)
 80098ea:	4413      	add	r3, r2
 80098ec:	1c9a      	adds	r2, r3, #2
                    queues[queueIndex].actualElementNumber
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	4914      	ldr	r1, [pc, #80]	@ (8009944 <gos_queueDump+0xbc>)
 80098f2:	f641 7084 	movw	r0, #8068	@ 0x1f84
 80098f6:	fb00 f303 	mul.w	r3, r0, r3
 80098fa:	440b      	add	r3, r1
 80098fc:	f503 53fc 	add.w	r3, r3, #8064	@ 0x1f80
 8009900:	3302      	adds	r3, #2
 8009902:	781b      	ldrb	r3, [r3, #0]
            (void_t) gos_shellDriverTransmitString(
 8009904:	4621      	mov	r1, r4
 8009906:	4810      	ldr	r0, [pc, #64]	@ (8009948 <gos_queueDump+0xc0>)
 8009908:	f002 fa4e 	bl	800bda8 <gos_shellDriverTransmitString>
    for (queueIndex = 0u; queueIndex < CFG_QUEUE_MAX_NUMBER; queueIndex++)
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	3301      	adds	r3, #1
 8009910:	71fb      	strb	r3, [r7, #7]
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	2b03      	cmp	r3, #3
 8009916:	d9ce      	bls.n	80098b6 <gos_queueDump+0x2e>
 8009918:	e000      	b.n	800991c <gos_queueDump+0x94>
            break;
 800991a:	bf00      	nop
                    queues[queueIndex].actualElementNumber
                    );
#endif
        }
    }
    (void_t) gos_shellDriverTransmitString(DUMP_SEPARATOR"\n");
 800991c:	480b      	ldr	r0, [pc, #44]	@ (800994c <gos_queueDump+0xc4>)
 800991e:	f002 fa43 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009922:	bf00      	nop
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	bd90      	pop	{r4, r7, pc}
 800992a:	bf00      	nop
 800992c:	0800d70c 	.word	0x0800d70c
 8009930:	0800d71c 	.word	0x0800d71c
 8009934:	0800d758 	.word	0x0800d758
 8009938:	0800d764 	.word	0x0800d764
 800993c:	0800d76c 	.word	0x0800d76c
 8009940:	0800d770 	.word	0x0800d770
 8009944:	20002348 	.word	0x20002348
 8009948:	0800d788 	.word	0x0800d788
 800994c:	0800d7a4 	.word	0x0800d7a4

08009950 <gos_shellInit>:

/*
 * Function: gos_shellInit
 */
gos_result_t gos_shellInit (void_t)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t            shellInitResult = GOS_ERROR;
 8009956:	23ae      	movs	r3, #174	@ 0xae
 8009958:	71fb      	strb	r3, [r7, #7]
    gos_shellCommandIndex_t index           = 0u;
 800995a:	2300      	movs	r3, #0
 800995c:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    useEcho = GOS_TRUE;
 800995e:	4b15      	ldr	r3, [pc, #84]	@ (80099b4 <gos_shellInit+0x64>)
 8009960:	2236      	movs	r2, #54	@ 0x36
 8009962:	701a      	strb	r2, [r3, #0]

    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8009964:	2300      	movs	r3, #0
 8009966:	71bb      	strb	r3, [r7, #6]
 8009968:	e00c      	b.n	8009984 <gos_shellInit+0x34>
    {
        shellCommands[index].commandHandler = NULL;
 800996a:	79ba      	ldrb	r2, [r7, #6]
 800996c:	4912      	ldr	r1, [pc, #72]	@ (80099b8 <gos_shellInit+0x68>)
 800996e:	4613      	mov	r3, r2
 8009970:	00db      	lsls	r3, r3, #3
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	440b      	add	r3, r1
 8009978:	3314      	adds	r3, #20
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
    for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 800997e:	79bb      	ldrb	r3, [r7, #6]
 8009980:	3301      	adds	r3, #1
 8009982:	71bb      	strb	r3, [r7, #6]
 8009984:	79bb      	ldrb	r3, [r7, #6]
 8009986:	2b0f      	cmp	r3, #15
 8009988:	d9ef      	bls.n	800996a <gos_shellInit+0x1a>
    }

    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 800998a:	490c      	ldr	r1, [pc, #48]	@ (80099bc <gos_shellInit+0x6c>)
 800998c:	480c      	ldr	r0, [pc, #48]	@ (80099c0 <gos_shellInit+0x70>)
 800998e:	f7fc ff7f 	bl	8006890 <gos_taskRegister>
 8009992:	4603      	mov	r3, r0
 8009994:	2b55      	cmp	r3, #85	@ 0x55
 8009996:	d107      	bne.n	80099a8 <gos_shellInit+0x58>
        gos_shellRegisterCommand(&shellCommand) == GOS_SUCCESS)
 8009998:	480a      	ldr	r0, [pc, #40]	@ (80099c4 <gos_shellInit+0x74>)
 800999a:	f000 f815 	bl	80099c8 <gos_shellRegisterCommand>
 800999e:	4603      	mov	r3, r0
    if (gos_taskRegister(&shellDaemonTaskDesc, &shellDaemonTaskId) == GOS_SUCCESS &&
 80099a0:	2b55      	cmp	r3, #85	@ 0x55
 80099a2:	d101      	bne.n	80099a8 <gos_shellInit+0x58>
    {
        shellInitResult = GOS_SUCCESS;
 80099a4:	2355      	movs	r3, #85	@ 0x55
 80099a6:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellInitResult;
 80099a8:	79fb      	ldrb	r3, [r7, #7]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	2000a3fa 	.word	0x2000a3fa
 80099b8:	2000a16c 	.word	0x2000a16c
 80099bc:	2000a32c 	.word	0x2000a32c
 80099c0:	200017a4 	.word	0x200017a4
 80099c4:	20001810 	.word	0x20001810

080099c8 <gos_shellRegisterCommand>:

/*
 * Function: gos_shellRegisterCommand
 */
gos_result_t gos_shellRegisterCommand (gos_shellCommand_t* command)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t            shellRegisterCommandResult = GOS_ERROR;
 80099d0:	23ae      	movs	r3, #174	@ 0xae
 80099d2:	73fb      	strb	r3, [r7, #15]
    gos_shellCommandIndex_t index                      = 0u;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    if (command->commandHandler != NULL && command->command != NULL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d03c      	beq.n	8009a5a <gos_shellRegisterCommand+0x92>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d039      	beq.n	8009a5a <gos_shellRegisterCommand+0x92>
    {
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 80099e6:	2300      	movs	r3, #0
 80099e8:	73bb      	strb	r3, [r7, #14]
 80099ea:	e033      	b.n	8009a54 <gos_shellRegisterCommand+0x8c>
        {
            if (shellCommands[index].commandHandler == NULL)
 80099ec:	7bba      	ldrb	r2, [r7, #14]
 80099ee:	491d      	ldr	r1, [pc, #116]	@ (8009a64 <gos_shellRegisterCommand+0x9c>)
 80099f0:	4613      	mov	r3, r2
 80099f2:	00db      	lsls	r3, r3, #3
 80099f4:	1a9b      	subs	r3, r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	440b      	add	r3, r1
 80099fa:	3314      	adds	r3, #20
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d125      	bne.n	8009a4e <gos_shellRegisterCommand+0x86>
            {
                shellCommands[index].commandHandler = command->commandHandler;
 8009a02:	7bba      	ldrb	r2, [r7, #14]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6959      	ldr	r1, [r3, #20]
 8009a08:	4816      	ldr	r0, [pc, #88]	@ (8009a64 <gos_shellRegisterCommand+0x9c>)
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4403      	add	r3, r0
 8009a14:	3314      	adds	r3, #20
 8009a16:	6019      	str	r1, [r3, #0]
                shellCommands[index].commandHandlerPrivileges = command->commandHandlerPrivileges;
 8009a18:	7bba      	ldrb	r2, [r7, #14]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	8b18      	ldrh	r0, [r3, #24]
 8009a1e:	4911      	ldr	r1, [pc, #68]	@ (8009a64 <gos_shellRegisterCommand+0x9c>)
 8009a20:	4613      	mov	r3, r2
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	1a9b      	subs	r3, r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	3318      	adds	r3, #24
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	801a      	strh	r2, [r3, #0]
                (void_t) strcpy(shellCommands[index].command, command->command);
 8009a30:	7bba      	ldrb	r2, [r7, #14]
 8009a32:	4613      	mov	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8009a64 <gos_shellRegisterCommand+0x9c>)
 8009a3c:	4413      	add	r3, r2
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4611      	mov	r1, r2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f002 fb1c 	bl	800c080 <strcpy>
                shellRegisterCommandResult = GOS_SUCCESS;
 8009a48:	2355      	movs	r3, #85	@ 0x55
 8009a4a:	73fb      	strb	r3, [r7, #15]
                break;
 8009a4c:	e005      	b.n	8009a5a <gos_shellRegisterCommand+0x92>
        for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	3301      	adds	r3, #1
 8009a52:	73bb      	strb	r3, [r7, #14]
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	2b0f      	cmp	r3, #15
 8009a58:	d9c8      	bls.n	80099ec <gos_shellRegisterCommand+0x24>
            {
                // Nothing to do.
            }
        }
    }
    return shellRegisterCommandResult;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	2000a16c 	.word	0x2000a16c

08009a68 <gos_shellSuspend>:

/*
 * Function: gos_shellSuspend
 */
gos_result_t gos_shellSuspend (void_t)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellSuspendResult = GOS_ERROR;
 8009a6e:	23ae      	movs	r3, #174	@ 0xae
 8009a70:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellSuspendResult = gos_taskSuspend(shellDaemonTaskId);
 8009a72:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <gos_shellSuspend+0x24>)
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fd f9f4 	bl	8006e64 <gos_taskSuspend>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	71fb      	strb	r3, [r7, #7]

    return shellSuspendResult;
 8009a80:	79fb      	ldrb	r3, [r7, #7]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	2000a32c 	.word	0x2000a32c

08009a90 <gos_shellResume>:

/*
 * Function: gos_shellResume
 */
gos_result_t gos_shellResume (void_t)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellResumeResult = GOS_ERROR;
 8009a96:	23ae      	movs	r3, #174	@ 0xae
 8009a98:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    shellResumeResult = gos_taskResume(shellDaemonTaskId);
 8009a9a:	4b06      	ldr	r3, [pc, #24]	@ (8009ab4 <gos_shellResume+0x24>)
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7fd fb02 	bl	80070a8 <gos_taskResume>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	71fb      	strb	r3, [r7, #7]

    return shellResumeResult;
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	2000a32c 	.word	0x2000a32c

08009ab8 <gos_shellDaemonTask>:
 *          a string.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellDaemonTask (void_t)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_shellCommandIndex_t index              = 0u;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	71fb      	strb	r3, [r7, #7]
    u16_t                   actualCommandIndex = 0u;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	80bb      	strh	r3, [r7, #4]
    u16_t                   paramIndex         = 0u;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	807b      	strh	r3, [r7, #2]

    /*
     * Function code.
     */
    (void_t) gos_taskSleep(CFG_SHELL_STARTUP_DELAY_MS);
 8009aca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009ace:	f7fd f871 	bl	8006bb4 <gos_taskSleep>
    (void_t) gos_shellDriverTransmitString(GOS_SHELL_DISPLAY_TEXT);
 8009ad2:	4873      	ldr	r0, [pc, #460]	@ (8009ca0 <gos_shellDaemonTask+0x1e8>)
 8009ad4:	f002 f968 	bl	800bda8 <gos_shellDriverTransmitString>

    for (;;)
    {
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 8009ad8:	4b72      	ldr	r3, [pc, #456]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	4b72      	ldr	r3, [pc, #456]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009ae0:	4413      	add	r3, r2
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f002 f948 	bl	800bd78 <gos_shellDriverReceiveChar>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b55      	cmp	r3, #85	@ 0x55
 8009aec:	f040 80d3 	bne.w	8009c96 <gos_shellDaemonTask+0x1de>
        {
            if (useEcho == GOS_TRUE)
 8009af0:	4b6e      	ldr	r3, [pc, #440]	@ (8009cac <gos_shellDaemonTask+0x1f4>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b36      	cmp	r3, #54	@ 0x36
 8009af6:	d107      	bne.n	8009b08 <gos_shellDaemonTask+0x50>
            {
                (void_t) gos_shellDriverTransmitString(&commandBuffer[commandBufferIndex]);
 8009af8:	4b6a      	ldr	r3, [pc, #424]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	461a      	mov	r2, r3
 8009afe:	4b6a      	ldr	r3, [pc, #424]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009b00:	4413      	add	r3, r2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f002 f950 	bl	800bda8 <gos_shellDriverTransmitString>
            }

            /*
             * Backspace character check
             */
            if (commandBuffer[commandBufferIndex] == '\177')
 8009b08:	4b66      	ldr	r3, [pc, #408]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009b0a:	881b      	ldrh	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	4b66      	ldr	r3, [pc, #408]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009b10:	5c9b      	ldrb	r3, [r3, r2]
 8009b12:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b14:	d10c      	bne.n	8009b30 <gos_shellDaemonTask+0x78>
            {
                commandBuffer[commandBufferIndex] = '\0';
 8009b16:	4b63      	ldr	r3, [pc, #396]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4b62      	ldr	r3, [pc, #392]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009b1e:	2100      	movs	r1, #0
 8009b20:	5499      	strb	r1, [r3, r2]
                commandBufferIndex--;
 8009b22:	4b60      	ldr	r3, [pc, #384]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	4b5e      	ldr	r3, [pc, #376]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009b2c:	801a      	strh	r2, [r3, #0]
 8009b2e:	e0b2      	b.n	8009c96 <gos_shellDaemonTask+0x1de>
            }
            /*
             * Enter character check
             */
            else if (commandBuffer[commandBufferIndex] == '\r')
 8009b30:	4b5c      	ldr	r3, [pc, #368]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	461a      	mov	r2, r3
 8009b36:	4b5c      	ldr	r3, [pc, #368]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009b38:	5c9b      	ldrb	r3, [r3, r2]
 8009b3a:	2b0d      	cmp	r3, #13
 8009b3c:	f040 8099 	bne.w	8009c72 <gos_shellDaemonTask+0x1ba>
            {
                if (useEcho == GOS_TRUE)
 8009b40:	4b5a      	ldr	r3, [pc, #360]	@ (8009cac <gos_shellDaemonTask+0x1f4>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b36      	cmp	r3, #54	@ 0x36
 8009b46:	d102      	bne.n	8009b4e <gos_shellDaemonTask+0x96>
                {
                    (void_t) gos_shellDriverTransmitString("\n");
 8009b48:	4859      	ldr	r0, [pc, #356]	@ (8009cb0 <gos_shellDaemonTask+0x1f8>)
 8009b4a:	f002 f92d 	bl	800bda8 <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                commandBuffer[commandBufferIndex] = '\0';
 8009b4e:	4b55      	ldr	r3, [pc, #340]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	4b54      	ldr	r3, [pc, #336]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009b56:	2100      	movs	r1, #0
 8009b58:	5499      	strb	r1, [r3, r2]
                actualCommandIndex = 0u;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	80bb      	strh	r3, [r7, #4]
                paramIndex = 0u;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	807b      	strh	r3, [r7, #2]

                // Get command.
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 8009b62:	e008      	b.n	8009b76 <gos_shellDaemonTask+0xbe>
                {
                    actualCommand[actualCommandIndex] = commandBuffer[actualCommandIndex];
 8009b64:	88ba      	ldrh	r2, [r7, #4]
 8009b66:	88bb      	ldrh	r3, [r7, #4]
 8009b68:	494f      	ldr	r1, [pc, #316]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009b6a:	5c89      	ldrb	r1, [r1, r2]
 8009b6c:	4a51      	ldr	r2, [pc, #324]	@ (8009cb4 <gos_shellDaemonTask+0x1fc>)
 8009b6e:	54d1      	strb	r1, [r2, r3]
                    actualCommandIndex++;
 8009b70:	88bb      	ldrh	r3, [r7, #4]
 8009b72:	3301      	adds	r3, #1
 8009b74:	80bb      	strh	r3, [r7, #4]
                while (commandBuffer[actualCommandIndex] != ' ' && commandBuffer[actualCommandIndex] != '\0')
 8009b76:	88bb      	ldrh	r3, [r7, #4]
 8009b78:	4a4b      	ldr	r2, [pc, #300]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009b7a:	5cd3      	ldrb	r3, [r2, r3]
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d004      	beq.n	8009b8a <gos_shellDaemonTask+0xd2>
 8009b80:	88bb      	ldrh	r3, [r7, #4]
 8009b82:	4a49      	ldr	r2, [pc, #292]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009b84:	5cd3      	ldrb	r3, [r2, r3]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1ec      	bne.n	8009b64 <gos_shellDaemonTask+0xac>
                }
                actualCommand[actualCommandIndex] = '\0';
 8009b8a:	88bb      	ldrh	r3, [r7, #4]
 8009b8c:	4a49      	ldr	r2, [pc, #292]	@ (8009cb4 <gos_shellDaemonTask+0x1fc>)
 8009b8e:	2100      	movs	r1, #0
 8009b90:	54d1      	strb	r1, [r2, r3]
                actualCommandIndex++;
 8009b92:	88bb      	ldrh	r3, [r7, #4]
 8009b94:	3301      	adds	r3, #1
 8009b96:	80bb      	strh	r3, [r7, #4]

                // Get parameters.
                while (commandBuffer[actualCommandIndex] != '\0')
 8009b98:	e00b      	b.n	8009bb2 <gos_shellDaemonTask+0xfa>
                {
                    commandParams[paramIndex++] = commandBuffer[actualCommandIndex++];
 8009b9a:	88bb      	ldrh	r3, [r7, #4]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	80ba      	strh	r2, [r7, #4]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	887b      	ldrh	r3, [r7, #2]
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	807a      	strh	r2, [r7, #2]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	4b3f      	ldr	r3, [pc, #252]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009bac:	5c59      	ldrb	r1, [r3, r1]
 8009bae:	4b42      	ldr	r3, [pc, #264]	@ (8009cb8 <gos_shellDaemonTask+0x200>)
 8009bb0:	5499      	strb	r1, [r3, r2]
                while (commandBuffer[actualCommandIndex] != '\0')
 8009bb2:	88bb      	ldrh	r3, [r7, #4]
 8009bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009bb6:	5cd3      	ldrb	r3, [r2, r3]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1ee      	bne.n	8009b9a <gos_shellDaemonTask+0xe2>
                }
                commandParams[paramIndex] = '\0';
 8009bbc:	887b      	ldrh	r3, [r7, #2]
 8009bbe:	4a3e      	ldr	r2, [pc, #248]	@ (8009cb8 <gos_shellDaemonTask+0x200>)
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	54d1      	strb	r1, [r2, r3]

                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	71fb      	strb	r3, [r7, #7]
 8009bc8:	e03c      	b.n	8009c44 <gos_shellDaemonTask+0x18c>
                {
                    if (strcmp(shellCommands[index].command, actualCommand) == 0)
 8009bca:	79fa      	ldrb	r2, [r7, #7]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	1a9b      	subs	r3, r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4a39      	ldr	r2, [pc, #228]	@ (8009cbc <gos_shellDaemonTask+0x204>)
 8009bd6:	4413      	add	r3, r2
 8009bd8:	4936      	ldr	r1, [pc, #216]	@ (8009cb4 <gos_shellDaemonTask+0x1fc>)
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7f6 fb00 	bl	80001e0 <strcmp>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d12b      	bne.n	8009c3e <gos_shellDaemonTask+0x186>
                    {
                        if (shellCommands[index].commandHandler != NULL)
 8009be6:	79fa      	ldrb	r2, [r7, #7]
 8009be8:	4934      	ldr	r1, [pc, #208]	@ (8009cbc <gos_shellDaemonTask+0x204>)
 8009bea:	4613      	mov	r3, r2
 8009bec:	00db      	lsls	r3, r3, #3
 8009bee:	1a9b      	subs	r3, r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	3314      	adds	r3, #20
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d027      	beq.n	8009c4c <gos_shellDaemonTask+0x194>
                        {
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, shellCommands[index].commandHandlerPrivileges);
 8009bfc:	4b30      	ldr	r3, [pc, #192]	@ (8009cc0 <gos_shellDaemonTask+0x208>)
 8009bfe:	8818      	ldrh	r0, [r3, #0]
 8009c00:	79fa      	ldrb	r2, [r7, #7]
 8009c02:	492e      	ldr	r1, [pc, #184]	@ (8009cbc <gos_shellDaemonTask+0x204>)
 8009c04:	4613      	mov	r3, r2
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	1a9b      	subs	r3, r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	3318      	adds	r3, #24
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	4619      	mov	r1, r3
 8009c14:	f7fe f904 	bl	8007e20 <gos_taskSetPrivileges>
                            shellCommands[index].commandHandler(commandParams);
 8009c18:	79fa      	ldrb	r2, [r7, #7]
 8009c1a:	4928      	ldr	r1, [pc, #160]	@ (8009cbc <gos_shellDaemonTask+0x204>)
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	1a9b      	subs	r3, r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	440b      	add	r3, r1
 8009c26:	3314      	adds	r3, #20
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4823      	ldr	r0, [pc, #140]	@ (8009cb8 <gos_shellDaemonTask+0x200>)
 8009c2c:	4798      	blx	r3
                            (void_t) gos_taskSetPrivileges(shellDaemonTaskId, GOS_TASK_PRIVILEGE_KERNEL);
 8009c2e:	4b24      	ldr	r3, [pc, #144]	@ (8009cc0 <gos_shellDaemonTask+0x208>)
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fe f8f2 	bl	8007e20 <gos_taskSetPrivileges>
                        }
                        else
                        {
                            // Nothing to do.
                        }
                        break;
 8009c3c:	e006      	b.n	8009c4c <gos_shellDaemonTask+0x194>
                for (index = 0u; index < CFG_SHELL_MAX_COMMAND_NUMBER; index++)
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	3301      	adds	r3, #1
 8009c42:	71fb      	strb	r3, [r7, #7]
 8009c44:	79fb      	ldrb	r3, [r7, #7]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	d9bf      	bls.n	8009bca <gos_shellDaemonTask+0x112>
 8009c4a:	e000      	b.n	8009c4e <gos_shellDaemonTask+0x196>
                        break;
 8009c4c:	bf00      	nop
                        // Nothing to do.
                    }
                }

                // If command not found.
                if (index == CFG_SHELL_MAX_COMMAND_NUMBER)
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	2b10      	cmp	r3, #16
 8009c52:	d102      	bne.n	8009c5a <gos_shellDaemonTask+0x1a2>
                {
                    (void_t) gos_shellDriverTransmitString("Unrecognized command!\r\n");
 8009c54:	481b      	ldr	r0, [pc, #108]	@ (8009cc4 <gos_shellDaemonTask+0x20c>)
 8009c56:	f002 f8a7 	bl	800bda8 <gos_shellDriverTransmitString>
                else
                {
                    // Nothing to do.
                }

                (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 8009c5a:	22c8      	movs	r2, #200	@ 0xc8
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	4812      	ldr	r0, [pc, #72]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009c60:	f002 f9da 	bl	800c018 <memset>
                commandBufferIndex = 0u;
 8009c64:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	801a      	strh	r2, [r3, #0]

                (void_t) gos_shellDriverTransmitString(GOS_SHELL_DISPLAY_TEXT);
 8009c6a:	480d      	ldr	r0, [pc, #52]	@ (8009ca0 <gos_shellDaemonTask+0x1e8>)
 8009c6c:	f002 f89c 	bl	800bda8 <gos_shellDriverTransmitString>
 8009c70:	e011      	b.n	8009c96 <gos_shellDaemonTask+0x1de>
            }
            else
            {
                commandBufferIndex++;
 8009c72:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	3301      	adds	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009c7c:	801a      	strh	r2, [r3, #0]

                if (commandBufferIndex >= CFG_SHELL_COMMAND_BUFFER_SIZE)
 8009c7e:	4b09      	ldr	r3, [pc, #36]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	2bc7      	cmp	r3, #199	@ 0xc7
 8009c84:	d907      	bls.n	8009c96 <gos_shellDaemonTask+0x1de>
                {
                    (void_t) memset((void_t*)commandBuffer, '\0', CFG_SHELL_COMMAND_BUFFER_SIZE);
 8009c86:	22c8      	movs	r2, #200	@ 0xc8
 8009c88:	2100      	movs	r1, #0
 8009c8a:	4807      	ldr	r0, [pc, #28]	@ (8009ca8 <gos_shellDaemonTask+0x1f0>)
 8009c8c:	f002 f9c4 	bl	800c018 <memset>
                    commandBufferIndex = 0u;
 8009c90:	4b04      	ldr	r3, [pc, #16]	@ (8009ca4 <gos_shellDaemonTask+0x1ec>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	801a      	strh	r2, [r3, #0]
                {
                    // Nothing to do.
                }
            }
        }
        (void_t) gos_taskSleep(GOS_SHELL_DAEMON_POLL_TIME_MS);
 8009c96:	2032      	movs	r0, #50	@ 0x32
 8009c98:	f7fc ff8c 	bl	8006bb4 <gos_taskSleep>
        if (gos_shellDriverReceiveChar(&commandBuffer[commandBufferIndex]) == GOS_SUCCESS)
 8009c9c:	e71c      	b.n	8009ad8 <gos_shellDaemonTask+0x20>
 8009c9e:	bf00      	nop
 8009ca0:	0800d7e4 	.word	0x0800d7e4
 8009ca4:	2000a3f8 	.word	0x2000a3f8
 8009ca8:	2000a330 	.word	0x2000a330
 8009cac:	2000a3fa 	.word	0x2000a3fa
 8009cb0:	0800d800 	.word	0x0800d800
 8009cb4:	2000a3fc 	.word	0x2000a3fc
 8009cb8:	2000a410 	.word	0x2000a410
 8009cbc:	2000a16c 	.word	0x2000a16c
 8009cc0:	2000a32c 	.word	0x2000a32c
 8009cc4:	0800d804 	.word	0x0800d804

08009cc8 <gos_shellCommandHandler>:
 * @details Handles the built-in shell command.
 *
 * @return    -
 */
GOS_STATIC void_t gos_shellCommandHandler (char_t* params)
{
 8009cc8:	b590      	push	{r4, r7, lr}
 8009cca:	b089      	sub	sp, #36	@ 0x24
 8009ccc:	af02      	add	r7, sp, #8
 8009cce:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    u8_t                    index        = 0u;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	75fb      	strb	r3, [r7, #23]
    gos_shellCommandIndex_t commandIndex = 0u;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75bb      	strb	r3, [r7, #22]
    gos_tid_t               taskId       = GOS_INVALID_TASK_ID;
 8009cd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009cdc:	82bb      	strh	r3, [r7, #20]
    gos_runtime_t           totalRunTime = {0};
 8009cde:	f107 0308 	add.w	r3, r7, #8
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	605a      	str	r2, [r3, #4]
 8009ce8:	721a      	strb	r2, [r3, #8]

    /*
     * Function code.
     */
    if (strcmp(params, "dump") == 0)
 8009cea:	499f      	ldr	r1, [pc, #636]	@ (8009f68 <gos_shellCommandHandler+0x2a0>)
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7f6 fa77 	bl	80001e0 <strcmp>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d102      	bne.n	8009cfe <gos_shellCommandHandler+0x36>
    {
        gos_Dump();
 8009cf8:	f7fe fb8e 	bl	8008418 <gos_Dump>
        else
        {
            // Nothing to do.
        }
    }
}
 8009cfc:	e22d      	b.n	800a15a <gos_shellCommandHandler+0x492>
    else if (strcmp(params, "reset") == 0)
 8009cfe:	499b      	ldr	r1, [pc, #620]	@ (8009f6c <gos_shellCommandHandler+0x2a4>)
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7f6 fa6d 	bl	80001e0 <strcmp>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d102      	bne.n	8009d12 <gos_shellCommandHandler+0x4a>
        gos_kernelReset();
 8009d0c:	f7fb fdc2 	bl	8005894 <gos_kernelReset>
}
 8009d10:	e223      	b.n	800a15a <gos_shellCommandHandler+0x492>
    else if (strcmp(params, "help") == 0)
 8009d12:	4997      	ldr	r1, [pc, #604]	@ (8009f70 <gos_shellCommandHandler+0x2a8>)
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7f6 fa63 	bl	80001e0 <strcmp>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d137      	bne.n	8009d90 <gos_shellCommandHandler+0xc8>
        (void_t) gos_shellDriverTransmitString("List of registered shell commands: \r\n");
 8009d20:	4894      	ldr	r0, [pc, #592]	@ (8009f74 <gos_shellCommandHandler+0x2ac>)
 8009d22:	f002 f841 	bl	800bda8 <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 8009d26:	2300      	movs	r3, #0
 8009d28:	75bb      	strb	r3, [r7, #22]
 8009d2a:	e02a      	b.n	8009d82 <gos_shellCommandHandler+0xba>
            if (strcmp(shellCommands[commandIndex].command, "") == 0)
 8009d2c:	7dba      	ldrb	r2, [r7, #22]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	1a9b      	subs	r3, r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4a90      	ldr	r2, [pc, #576]	@ (8009f78 <gos_shellCommandHandler+0x2b0>)
 8009d38:	4413      	add	r3, r2
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 820b 	beq.w	800a158 <gos_shellCommandHandler+0x490>
            else if (strcmp(shellCommands[commandIndex].command, "shell") == 0)
 8009d42:	7dba      	ldrb	r2, [r7, #22]
 8009d44:	4613      	mov	r3, r2
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	1a9b      	subs	r3, r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4a8a      	ldr	r2, [pc, #552]	@ (8009f78 <gos_shellCommandHandler+0x2b0>)
 8009d4e:	4413      	add	r3, r2
 8009d50:	498a      	ldr	r1, [pc, #552]	@ (8009f7c <gos_shellCommandHandler+0x2b4>)
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7f6 fa44 	bl	80001e0 <strcmp>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d103      	bne.n	8009d66 <gos_shellCommandHandler+0x9e>
                (void_t) gos_shellDriverTransmitString("\t"
 8009d5e:	4888      	ldr	r0, [pc, #544]	@ (8009f80 <gos_shellCommandHandler+0x2b8>)
 8009d60:	f002 f822 	bl	800bda8 <gos_shellDriverTransmitString>
 8009d64:	e00a      	b.n	8009d7c <gos_shellCommandHandler+0xb4>
                (void_t) gos_shellDriverTransmitString("\t- %s\r\n", shellCommands[commandIndex].command);
 8009d66:	7dba      	ldrb	r2, [r7, #22]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	1a9b      	subs	r3, r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4a81      	ldr	r2, [pc, #516]	@ (8009f78 <gos_shellCommandHandler+0x2b0>)
 8009d72:	4413      	add	r3, r2
 8009d74:	4619      	mov	r1, r3
 8009d76:	4883      	ldr	r0, [pc, #524]	@ (8009f84 <gos_shellCommandHandler+0x2bc>)
 8009d78:	f002 f816 	bl	800bda8 <gos_shellDriverTransmitString>
        for (commandIndex = 0u; commandIndex < CFG_SHELL_MAX_COMMAND_NUMBER; commandIndex++)
 8009d7c:	7dbb      	ldrb	r3, [r7, #22]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	75bb      	strb	r3, [r7, #22]
 8009d82:	7dbb      	ldrb	r3, [r7, #22]
 8009d84:	2b0f      	cmp	r3, #15
 8009d86:	d9d1      	bls.n	8009d2c <gos_shellCommandHandler+0x64>
}
 8009d88:	e1e7      	b.n	800a15a <gos_shellCommandHandler+0x492>
            index++;
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	75fb      	strb	r3, [r7, #23]
        while (params[index] != ' ' && params[index])
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	4413      	add	r3, r2
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	2b20      	cmp	r3, #32
 8009d9a:	d005      	beq.n	8009da8 <gos_shellCommandHandler+0xe0>
 8009d9c:	7dfb      	ldrb	r3, [r7, #23]
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	4413      	add	r3, r2
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1f0      	bne.n	8009d8a <gos_shellCommandHandler+0xc2>
        params[index] = '\0';
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	4413      	add	r3, r2
 8009dae:	2200      	movs	r2, #0
 8009db0:	701a      	strb	r2, [r3, #0]
        if (strcmp(params, "delete_tid") == 0)
 8009db2:	4975      	ldr	r1, [pc, #468]	@ (8009f88 <gos_shellCommandHandler+0x2c0>)
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7f6 fa13 	bl	80001e0 <strcmp>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d120      	bne.n	8009e02 <gos_shellCommandHandler+0x13a>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	75fb      	strb	r3, [r7, #23]
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	4413      	add	r3, r2
 8009dcc:	2210      	movs	r2, #16
 8009dce:	2100      	movs	r1, #0
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f002 f8d7 	bl	800bf84 <strtol>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	82bb      	strh	r3, [r7, #20]
            if (gos_taskDelete(taskId) == GOS_SUCCESS)
 8009ddc:	8abb      	ldrh	r3, [r7, #20]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fd fc0c 	bl	80075fc <gos_taskDelete>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b55      	cmp	r3, #85	@ 0x55
 8009de8:	d105      	bne.n	8009df6 <gos_shellCommandHandler+0x12e>
                (void_t) gos_shellDriverTransmitString("0x%X task has been deleted.\r\n", taskId);
 8009dea:	8abb      	ldrh	r3, [r7, #20]
 8009dec:	4619      	mov	r1, r3
 8009dee:	4867      	ldr	r0, [pc, #412]	@ (8009f8c <gos_shellCommandHandler+0x2c4>)
 8009df0:	f001 ffda 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009df4:	e1b1      	b.n	800a15a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be deleted.\r\n", taskId);
 8009df6:	8abb      	ldrh	r3, [r7, #20]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4865      	ldr	r0, [pc, #404]	@ (8009f90 <gos_shellCommandHandler+0x2c8>)
 8009dfc:	f001 ffd4 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009e00:	e1ab      	b.n	800a15a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "delete") == 0)
 8009e02:	4964      	ldr	r1, [pc, #400]	@ (8009f94 <gos_shellCommandHandler+0x2cc>)
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7f6 f9eb 	bl	80001e0 <strcmp>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d129      	bne.n	8009e64 <gos_shellCommandHandler+0x19c>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	3301      	adds	r3, #1
 8009e14:	75fb      	strb	r3, [r7, #23]
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f107 0214 	add.w	r2, r7, #20
 8009e20:	4611      	mov	r1, r2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe f8da 	bl	8007fdc <gos_taskGetId>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b55      	cmp	r3, #85	@ 0x55
 8009e2c:	d116      	bne.n	8009e5c <gos_shellCommandHandler+0x194>
                if (gos_taskDelete(taskId) == GOS_SUCCESS)
 8009e2e:	8abb      	ldrh	r3, [r7, #20]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fd fbe3 	bl	80075fc <gos_taskDelete>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b55      	cmp	r3, #85	@ 0x55
 8009e3a:	d107      	bne.n	8009e4c <gos_shellCommandHandler+0x184>
                    (void_t) gos_shellDriverTransmitString("%s has been deleted.\r\n", &params[index]);
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	4413      	add	r3, r2
 8009e42:	4619      	mov	r1, r3
 8009e44:	4854      	ldr	r0, [pc, #336]	@ (8009f98 <gos_shellCommandHandler+0x2d0>)
 8009e46:	f001 ffaf 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009e4a:	e186      	b.n	800a15a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be deleted.\r\n", &params[index]);
 8009e4c:	7dfb      	ldrb	r3, [r7, #23]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	4413      	add	r3, r2
 8009e52:	4619      	mov	r1, r3
 8009e54:	4851      	ldr	r0, [pc, #324]	@ (8009f9c <gos_shellCommandHandler+0x2d4>)
 8009e56:	f001 ffa7 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009e5a:	e17e      	b.n	800a15a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 8009e5c:	4850      	ldr	r0, [pc, #320]	@ (8009fa0 <gos_shellCommandHandler+0x2d8>)
 8009e5e:	f001 ffa3 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009e62:	e17a      	b.n	800a15a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "suspend_tid") == 0)
 8009e64:	494f      	ldr	r1, [pc, #316]	@ (8009fa4 <gos_shellCommandHandler+0x2dc>)
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7f6 f9ba 	bl	80001e0 <strcmp>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d120      	bne.n	8009eb4 <gos_shellCommandHandler+0x1ec>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
 8009e74:	3301      	adds	r3, #1
 8009e76:	75fb      	strb	r3, [r7, #23]
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	2210      	movs	r2, #16
 8009e80:	2100      	movs	r1, #0
 8009e82:	4618      	mov	r0, r3
 8009e84:	f002 f87e 	bl	800bf84 <strtol>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	82bb      	strh	r3, [r7, #20]
            if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 8009e8e:	8abb      	ldrh	r3, [r7, #20]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7fc ffe7 	bl	8006e64 <gos_taskSuspend>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b55      	cmp	r3, #85	@ 0x55
 8009e9a:	d105      	bne.n	8009ea8 <gos_shellCommandHandler+0x1e0>
                (void_t) gos_shellDriverTransmitString("0x%X task has been suspended.\r\n", taskId);
 8009e9c:	8abb      	ldrh	r3, [r7, #20]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4841      	ldr	r0, [pc, #260]	@ (8009fa8 <gos_shellCommandHandler+0x2e0>)
 8009ea2:	f001 ff81 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009ea6:	e158      	b.n	800a15a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be suspended.\r\n", taskId);
 8009ea8:	8abb      	ldrh	r3, [r7, #20]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	483f      	ldr	r0, [pc, #252]	@ (8009fac <gos_shellCommandHandler+0x2e4>)
 8009eae:	f001 ff7b 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009eb2:	e152      	b.n	800a15a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "suspend") == 0)
 8009eb4:	493e      	ldr	r1, [pc, #248]	@ (8009fb0 <gos_shellCommandHandler+0x2e8>)
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7f6 f992 	bl	80001e0 <strcmp>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d129      	bne.n	8009f16 <gos_shellCommandHandler+0x24e>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	75fb      	strb	r3, [r7, #23]
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f107 0214 	add.w	r2, r7, #20
 8009ed2:	4611      	mov	r1, r2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fe f881 	bl	8007fdc <gos_taskGetId>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b55      	cmp	r3, #85	@ 0x55
 8009ede:	d116      	bne.n	8009f0e <gos_shellCommandHandler+0x246>
                if (gos_taskSuspend(taskId) == GOS_SUCCESS)
 8009ee0:	8abb      	ldrh	r3, [r7, #20]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fc ffbe 	bl	8006e64 <gos_taskSuspend>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b55      	cmp	r3, #85	@ 0x55
 8009eec:	d107      	bne.n	8009efe <gos_shellCommandHandler+0x236>
                    (void_t) gos_shellDriverTransmitString("%s has been suspended.\r\n", &params[index]);
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	482f      	ldr	r0, [pc, #188]	@ (8009fb4 <gos_shellCommandHandler+0x2ec>)
 8009ef8:	f001 ff56 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009efc:	e12d      	b.n	800a15a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be suspended.\r\n", &params[index]);
 8009efe:	7dfb      	ldrb	r3, [r7, #23]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	4413      	add	r3, r2
 8009f04:	4619      	mov	r1, r3
 8009f06:	482c      	ldr	r0, [pc, #176]	@ (8009fb8 <gos_shellCommandHandler+0x2f0>)
 8009f08:	f001 ff4e 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009f0c:	e125      	b.n	800a15a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 8009f0e:	4824      	ldr	r0, [pc, #144]	@ (8009fa0 <gos_shellCommandHandler+0x2d8>)
 8009f10:	f001 ff4a 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009f14:	e121      	b.n	800a15a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "resume_tid") == 0)
 8009f16:	4929      	ldr	r1, [pc, #164]	@ (8009fbc <gos_shellCommandHandler+0x2f4>)
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7f6 f961 	bl	80001e0 <strcmp>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d151      	bne.n	8009fc8 <gos_shellCommandHandler+0x300>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	3301      	adds	r3, #1
 8009f28:	75fb      	strb	r3, [r7, #23]
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	4413      	add	r3, r2
 8009f30:	2210      	movs	r2, #16
 8009f32:	2100      	movs	r1, #0
 8009f34:	4618      	mov	r0, r3
 8009f36:	f002 f825 	bl	800bf84 <strtol>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	82bb      	strh	r3, [r7, #20]
            if (gos_taskResume(taskId) == GOS_SUCCESS)
 8009f40:	8abb      	ldrh	r3, [r7, #20]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fd f8b0 	bl	80070a8 <gos_taskResume>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b55      	cmp	r3, #85	@ 0x55
 8009f4c:	d105      	bne.n	8009f5a <gos_shellCommandHandler+0x292>
                (void_t) gos_shellDriverTransmitString("0x%X task has been resumed.\r\n", taskId);
 8009f4e:	8abb      	ldrh	r3, [r7, #20]
 8009f50:	4619      	mov	r1, r3
 8009f52:	481b      	ldr	r0, [pc, #108]	@ (8009fc0 <gos_shellCommandHandler+0x2f8>)
 8009f54:	f001 ff28 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009f58:	e0ff      	b.n	800a15a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be resumed.\r\n", taskId);
 8009f5a:	8abb      	ldrh	r3, [r7, #20]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	4819      	ldr	r0, [pc, #100]	@ (8009fc4 <gos_shellCommandHandler+0x2fc>)
 8009f60:	f001 ff22 	bl	800bda8 <gos_shellDriverTransmitString>
}
 8009f64:	e0f9      	b.n	800a15a <gos_shellCommandHandler+0x492>
 8009f66:	bf00      	nop
 8009f68:	0800d81c 	.word	0x0800d81c
 8009f6c:	0800d824 	.word	0x0800d824
 8009f70:	0800d82c 	.word	0x0800d82c
 8009f74:	0800d834 	.word	0x0800d834
 8009f78:	2000a16c 	.word	0x2000a16c
 8009f7c:	0800d85c 	.word	0x0800d85c
 8009f80:	0800d864 	.word	0x0800d864
 8009f84:	0800d910 	.word	0x0800d910
 8009f88:	0800d918 	.word	0x0800d918
 8009f8c:	0800d924 	.word	0x0800d924
 8009f90:	0800d944 	.word	0x0800d944
 8009f94:	0800d968 	.word	0x0800d968
 8009f98:	0800d970 	.word	0x0800d970
 8009f9c:	0800d988 	.word	0x0800d988
 8009fa0:	0800d9a4 	.word	0x0800d9a4
 8009fa4:	0800d9c0 	.word	0x0800d9c0
 8009fa8:	0800d9cc 	.word	0x0800d9cc
 8009fac:	0800d9ec 	.word	0x0800d9ec
 8009fb0:	0800da10 	.word	0x0800da10
 8009fb4:	0800da18 	.word	0x0800da18
 8009fb8:	0800da34 	.word	0x0800da34
 8009fbc:	0800da54 	.word	0x0800da54
 8009fc0:	0800da60 	.word	0x0800da60
 8009fc4:	0800da80 	.word	0x0800da80
        else if (strcmp(params, "resume") == 0)
 8009fc8:	4966      	ldr	r1, [pc, #408]	@ (800a164 <gos_shellCommandHandler+0x49c>)
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7f6 f908 	bl	80001e0 <strcmp>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d129      	bne.n	800a02a <gos_shellCommandHandler+0x362>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 8009fd6:	7dfb      	ldrb	r3, [r7, #23]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]
 8009fdc:	7dfb      	ldrb	r3, [r7, #23]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f107 0214 	add.w	r2, r7, #20
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fd fff7 	bl	8007fdc <gos_taskGetId>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b55      	cmp	r3, #85	@ 0x55
 8009ff2:	d116      	bne.n	800a022 <gos_shellCommandHandler+0x35a>
                if (gos_taskResume(taskId) == GOS_SUCCESS)
 8009ff4:	8abb      	ldrh	r3, [r7, #20]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fd f856 	bl	80070a8 <gos_taskResume>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b55      	cmp	r3, #85	@ 0x55
 800a000:	d107      	bne.n	800a012 <gos_shellCommandHandler+0x34a>
                    (void_t) gos_shellDriverTransmitString("%s has been resumed.\r\n", &params[index]);
 800a002:	7dfb      	ldrb	r3, [r7, #23]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	4413      	add	r3, r2
 800a008:	4619      	mov	r1, r3
 800a00a:	4857      	ldr	r0, [pc, #348]	@ (800a168 <gos_shellCommandHandler+0x4a0>)
 800a00c:	f001 fecc 	bl	800bda8 <gos_shellDriverTransmitString>
}
 800a010:	e0a3      	b.n	800a15a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be resumed.\r\n", &params[index]);
 800a012:	7dfb      	ldrb	r3, [r7, #23]
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	4413      	add	r3, r2
 800a018:	4619      	mov	r1, r3
 800a01a:	4854      	ldr	r0, [pc, #336]	@ (800a16c <gos_shellCommandHandler+0x4a4>)
 800a01c:	f001 fec4 	bl	800bda8 <gos_shellDriverTransmitString>
}
 800a020:	e09b      	b.n	800a15a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 800a022:	4853      	ldr	r0, [pc, #332]	@ (800a170 <gos_shellCommandHandler+0x4a8>)
 800a024:	f001 fec0 	bl	800bda8 <gos_shellDriverTransmitString>
}
 800a028:	e097      	b.n	800a15a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "unblock_tid") == 0)
 800a02a:	4952      	ldr	r1, [pc, #328]	@ (800a174 <gos_shellCommandHandler+0x4ac>)
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7f6 f8d7 	bl	80001e0 <strcmp>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d120      	bne.n	800a07a <gos_shellCommandHandler+0x3b2>
            taskId = (gos_tid_t)strtol(&params[++index], NULL, 16);
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	3301      	adds	r3, #1
 800a03c:	75fb      	strb	r3, [r7, #23]
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	4413      	add	r3, r2
 800a044:	2210      	movs	r2, #16
 800a046:	2100      	movs	r1, #0
 800a048:	4618      	mov	r0, r3
 800a04a:	f001 ff9b 	bl	800bf84 <strtol>
 800a04e:	4603      	mov	r3, r0
 800a050:	b29b      	uxth	r3, r3
 800a052:	82bb      	strh	r3, [r7, #20]
            if (gos_taskUnblock(taskId) == GOS_SUCCESS)
 800a054:	8abb      	ldrh	r3, [r7, #20]
 800a056:	4618      	mov	r0, r3
 800a058:	f7fd f9e6 	bl	8007428 <gos_taskUnblock>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b55      	cmp	r3, #85	@ 0x55
 800a060:	d105      	bne.n	800a06e <gos_shellCommandHandler+0x3a6>
                (void_t) gos_shellDriverTransmitString("0x%X task has been unblocked.\r\n", taskId);
 800a062:	8abb      	ldrh	r3, [r7, #20]
 800a064:	4619      	mov	r1, r3
 800a066:	4844      	ldr	r0, [pc, #272]	@ (800a178 <gos_shellCommandHandler+0x4b0>)
 800a068:	f001 fe9e 	bl	800bda8 <gos_shellDriverTransmitString>
}
 800a06c:	e075      	b.n	800a15a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("0x%X task could not be unblocked.\r\n", taskId);
 800a06e:	8abb      	ldrh	r3, [r7, #20]
 800a070:	4619      	mov	r1, r3
 800a072:	4842      	ldr	r0, [pc, #264]	@ (800a17c <gos_shellCommandHandler+0x4b4>)
 800a074:	f001 fe98 	bl	800bda8 <gos_shellDriverTransmitString>
}
 800a078:	e06f      	b.n	800a15a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "unblock") == 0)
 800a07a:	4941      	ldr	r1, [pc, #260]	@ (800a180 <gos_shellCommandHandler+0x4b8>)
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f7f6 f8af 	bl	80001e0 <strcmp>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d129      	bne.n	800a0dc <gos_shellCommandHandler+0x414>
            if (gos_taskGetId(&params[++index], &taskId) == GOS_SUCCESS)
 800a088:	7dfb      	ldrb	r3, [r7, #23]
 800a08a:	3301      	adds	r3, #1
 800a08c:	75fb      	strb	r3, [r7, #23]
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	4413      	add	r3, r2
 800a094:	f107 0214 	add.w	r2, r7, #20
 800a098:	4611      	mov	r1, r2
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fd ff9e 	bl	8007fdc <gos_taskGetId>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b55      	cmp	r3, #85	@ 0x55
 800a0a4:	d116      	bne.n	800a0d4 <gos_shellCommandHandler+0x40c>
                if (gos_taskUnblock(taskId) == GOS_SUCCESS)
 800a0a6:	8abb      	ldrh	r3, [r7, #20]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fd f9bd 	bl	8007428 <gos_taskUnblock>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b55      	cmp	r3, #85	@ 0x55
 800a0b2:	d107      	bne.n	800a0c4 <gos_shellCommandHandler+0x3fc>
                    (void_t) gos_shellDriverTransmitString("%s has been unblocked.\r\n", &params[index]);
 800a0b4:	7dfb      	ldrb	r3, [r7, #23]
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4831      	ldr	r0, [pc, #196]	@ (800a184 <gos_shellCommandHandler+0x4bc>)
 800a0be:	f001 fe73 	bl	800bda8 <gos_shellDriverTransmitString>
}
 800a0c2:	e04a      	b.n	800a15a <gos_shellCommandHandler+0x492>
                    (void_t) gos_shellDriverTransmitString("%s could not be unblocked.\r\n", &params[index]);
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	482e      	ldr	r0, [pc, #184]	@ (800a188 <gos_shellCommandHandler+0x4c0>)
 800a0ce:	f001 fe6b 	bl	800bda8 <gos_shellDriverTransmitString>
}
 800a0d2:	e042      	b.n	800a15a <gos_shellCommandHandler+0x492>
                (void_t) gos_shellDriverTransmitString("Task could not be found.\r\n");
 800a0d4:	4826      	ldr	r0, [pc, #152]	@ (800a170 <gos_shellCommandHandler+0x4a8>)
 800a0d6:	f001 fe67 	bl	800bda8 <gos_shellDriverTransmitString>
}
 800a0da:	e03e      	b.n	800a15a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "cpu") == 0)
 800a0dc:	492b      	ldr	r1, [pc, #172]	@ (800a18c <gos_shellCommandHandler+0x4c4>)
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7f6 f87e 	bl	80001e0 <strcmp>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d11b      	bne.n	800a122 <gos_shellCommandHandler+0x45a>
            (void_t) gos_shellDriverTransmitString("CPU usage: %u.%02u%%\r\n", (gos_kernelGetCpuUsage() / 100), (gos_kernelGetCpuUsage() % 100));
 800a0ea:	f7fb fbc1 	bl	8005870 <gos_kernelGetCpuUsage>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4b27      	ldr	r3, [pc, #156]	@ (800a190 <gos_shellCommandHandler+0x4c8>)
 800a0f4:	fba3 2302 	umull	r2, r3, r3, r2
 800a0f8:	095b      	lsrs	r3, r3, #5
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	461c      	mov	r4, r3
 800a0fe:	f7fb fbb7 	bl	8005870 <gos_kernelGetCpuUsage>
 800a102:	4603      	mov	r3, r0
 800a104:	4a22      	ldr	r2, [pc, #136]	@ (800a190 <gos_shellCommandHandler+0x4c8>)
 800a106:	fba2 1203 	umull	r1, r2, r2, r3
 800a10a:	0952      	lsrs	r2, r2, #5
 800a10c:	2164      	movs	r1, #100	@ 0x64
 800a10e:	fb01 f202 	mul.w	r2, r1, r2
 800a112:	1a9b      	subs	r3, r3, r2
 800a114:	b29b      	uxth	r3, r3
 800a116:	461a      	mov	r2, r3
 800a118:	4621      	mov	r1, r4
 800a11a:	481e      	ldr	r0, [pc, #120]	@ (800a194 <gos_shellCommandHandler+0x4cc>)
 800a11c:	f001 fe44 	bl	800bda8 <gos_shellDriverTransmitString>
}
 800a120:	e01b      	b.n	800a15a <gos_shellCommandHandler+0x492>
        else if (strcmp(params, "runtime") == 0)
 800a122:	491d      	ldr	r1, [pc, #116]	@ (800a198 <gos_shellCommandHandler+0x4d0>)
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7f6 f85b 	bl	80001e0 <strcmp>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d114      	bne.n	800a15a <gos_shellCommandHandler+0x492>
            (void_t) gos_runTimeGet(&totalRunTime);
 800a130:	f107 0308 	add.w	r3, r7, #8
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fe45 	bl	800adc4 <gos_runTimeGet>
                    totalRunTime.days,
 800a13a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800a13e:	b29b      	uxth	r3, r3
            (void_t) gos_shellDriverTransmitString(
 800a140:	4619      	mov	r1, r3
                    totalRunTime.hours,
 800a142:	7bbb      	ldrb	r3, [r7, #14]
            (void_t) gos_shellDriverTransmitString(
 800a144:	461a      	mov	r2, r3
                    totalRunTime.minutes,
 800a146:	7b7b      	ldrb	r3, [r7, #13]
            (void_t) gos_shellDriverTransmitString(
 800a148:	4618      	mov	r0, r3
                    totalRunTime.seconds
 800a14a:	7b3b      	ldrb	r3, [r7, #12]
            (void_t) gos_shellDriverTransmitString(
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	4603      	mov	r3, r0
 800a150:	4812      	ldr	r0, [pc, #72]	@ (800a19c <gos_shellCommandHandler+0x4d4>)
 800a152:	f001 fe29 	bl	800bda8 <gos_shellDriverTransmitString>
}
 800a156:	e000      	b.n	800a15a <gos_shellCommandHandler+0x492>
                break;
 800a158:	bf00      	nop
}
 800a15a:	bf00      	nop
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd90      	pop	{r4, r7, pc}
 800a162:	bf00      	nop
 800a164:	0800daa4 	.word	0x0800daa4
 800a168:	0800daac 	.word	0x0800daac
 800a16c:	0800dac4 	.word	0x0800dac4
 800a170:	0800d9a4 	.word	0x0800d9a4
 800a174:	0800dae0 	.word	0x0800dae0
 800a178:	0800daec 	.word	0x0800daec
 800a17c:	0800db0c 	.word	0x0800db0c
 800a180:	0800db30 	.word	0x0800db30
 800a184:	0800db38 	.word	0x0800db38
 800a188:	0800db54 	.word	0x0800db54
 800a18c:	0800db74 	.word	0x0800db74
 800a190:	51eb851f 	.word	0x51eb851f
 800a194:	0800db78 	.word	0x0800db78
 800a198:	0800db90 	.word	0x0800db90
 800a19c:	0800db98 	.word	0x0800db98

0800a1a0 <gos_signalInit>:

/*
 * Function: gos_signalInit
 */
gos_result_t gos_signalInit (void_t)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t      signalInitResult = GOS_SUCCESS;
 800a1a6:	2355      	movs	r3, #85	@ 0x55
 800a1a8:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t signalIndex      = 0u;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    // Reset the in-use flag for every signal instance.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	71bb      	strb	r3, [r7, #6]
 800a1b2:	e00a      	b.n	800a1ca <gos_signalInit+0x2a>
    {
        signalArray[signalIndex].inUse = GOS_FALSE;
 800a1b4:	79bb      	ldrb	r3, [r7, #6]
 800a1b6:	4a16      	ldr	r2, [pc, #88]	@ (800a210 <gos_signalInit+0x70>)
 800a1b8:	212c      	movs	r1, #44	@ 0x2c
 800a1ba:	fb01 f303 	mul.w	r3, r1, r3
 800a1be:	4413      	add	r3, r2
 800a1c0:	2249      	movs	r2, #73	@ 0x49
 800a1c2:	701a      	strb	r2, [r3, #0]
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a1c4:	79bb      	ldrb	r3, [r7, #6]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	71bb      	strb	r3, [r7, #6]
 800a1ca:	79bb      	ldrb	r3, [r7, #6]
 800a1cc:	2b05      	cmp	r3, #5
 800a1ce:	d9f1      	bls.n	800a1b4 <gos_signalInit+0x14>
    }

    // Register signal daemon and create kernel task delete signal.
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	4810      	ldr	r0, [pc, #64]	@ (800a214 <gos_signalInit+0x74>)
 800a1d4:	f7fc fb5c 	bl	8006890 <gos_taskRegister>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b55      	cmp	r3, #85	@ 0x55
 800a1dc:	d111      	bne.n	800a202 <gos_signalInit+0x62>
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 800a1de:	480e      	ldr	r0, [pc, #56]	@ (800a218 <gos_signalInit+0x78>)
 800a1e0:	f000 f820 	bl	800a224 <gos_signalCreate>
 800a1e4:	4603      	mov	r3, r0
    if (gos_taskRegister(&signalDaemonTaskDescriptor, NULL) != GOS_SUCCESS ||
 800a1e6:	2b55      	cmp	r3, #85	@ 0x55
 800a1e8:	d10b      	bne.n	800a202 <gos_signalInit+0x62>
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 800a1ea:	480c      	ldr	r0, [pc, #48]	@ (800a21c <gos_signalInit+0x7c>)
 800a1ec:	f000 f81a 	bl	800a224 <gos_signalCreate>
 800a1f0:	4603      	mov	r3, r0
        gos_signalCreate(&kernelTaskDeleteSignal)           != GOS_SUCCESS ||
 800a1f2:	2b55      	cmp	r3, #85	@ 0x55
 800a1f4:	d105      	bne.n	800a202 <gos_signalInit+0x62>
        gos_triggerInit(&signalInvokeTrigger)               != GOS_SUCCESS
 800a1f6:	480a      	ldr	r0, [pc, #40]	@ (800a220 <gos_signalInit+0x80>)
 800a1f8:	f001 fbd2 	bl	800b9a0 <gos_triggerInit>
 800a1fc:	4603      	mov	r3, r0
        gos_signalCreate(&kernelDumpReadySignal)            != GOS_SUCCESS ||
 800a1fe:	2b55      	cmp	r3, #85	@ 0x55
 800a200:	d001      	beq.n	800a206 <gos_signalInit+0x66>
    )
    {
        signalInitResult = GOS_ERROR;
 800a202:	23ae      	movs	r3, #174	@ 0xae
 800a204:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return signalInitResult;
 800a206:	79fb      	ldrb	r3, [r7, #7]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	2000a490 	.word	0x2000a490
 800a214:	2000182c 	.word	0x2000182c
 800a218:	20001ec4 	.word	0x20001ec4
 800a21c:	20001e98 	.word	0x20001e98
 800a220:	2000a598 	.word	0x2000a598

0800a224 <gos_signalCreate>:

/*
 * Function: gos_signalCreate
 */
gos_result_t gos_signalCreate (gos_signalId_t* pSignal)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t      signalCreateResult = GOS_ERROR;
 800a22c:	23ae      	movs	r3, #174	@ 0xae
 800a22e:	73fb      	strb	r3, [r7, #15]
    gos_signalIndex_t signalIndex        = 0u;
 800a230:	2300      	movs	r3, #0
 800a232:	73bb      	strb	r3, [r7, #14]

    /*
     * Function code.
     */
    // Find the next unused signal and reserve it.
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a234:	2300      	movs	r3, #0
 800a236:	73bb      	strb	r3, [r7, #14]
 800a238:	e025      	b.n	800a286 <gos_signalCreate+0x62>
    {
        if (signalArray[signalIndex].inUse == GOS_FALSE && pSignal != NULL)
 800a23a:	7bbb      	ldrb	r3, [r7, #14]
 800a23c:	4a17      	ldr	r2, [pc, #92]	@ (800a29c <gos_signalCreate+0x78>)
 800a23e:	212c      	movs	r1, #44	@ 0x2c
 800a240:	fb01 f303 	mul.w	r3, r1, r3
 800a244:	4413      	add	r3, r2
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	2b49      	cmp	r3, #73	@ 0x49
 800a24a:	d119      	bne.n	800a280 <gos_signalCreate+0x5c>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d016      	beq.n	800a280 <gos_signalCreate+0x5c>
        {
            *pSignal                                = signalIndex;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	7bba      	ldrb	r2, [r7, #14]
 800a256:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].inUse          = GOS_TRUE;
 800a258:	7bbb      	ldrb	r3, [r7, #14]
 800a25a:	4a10      	ldr	r2, [pc, #64]	@ (800a29c <gos_signalCreate+0x78>)
 800a25c:	212c      	movs	r1, #44	@ 0x2c
 800a25e:	fb01 f303 	mul.w	r3, r1, r3
 800a262:	4413      	add	r3, r2
 800a264:	2236      	movs	r2, #54	@ 0x36
 800a266:	701a      	strb	r2, [r3, #0]
            signalArray[signalIndex].invokeRequired = GOS_FALSE;
 800a268:	7bbb      	ldrb	r3, [r7, #14]
 800a26a:	4a0c      	ldr	r2, [pc, #48]	@ (800a29c <gos_signalCreate+0x78>)
 800a26c:	212c      	movs	r1, #44	@ 0x2c
 800a26e:	fb01 f303 	mul.w	r3, r1, r3
 800a272:	4413      	add	r3, r2
 800a274:	3328      	adds	r3, #40	@ 0x28
 800a276:	2249      	movs	r2, #73	@ 0x49
 800a278:	701a      	strb	r2, [r3, #0]
            signalCreateResult                      = GOS_SUCCESS;
 800a27a:	2355      	movs	r3, #85	@ 0x55
 800a27c:	73fb      	strb	r3, [r7, #15]
            break;
 800a27e:	e005      	b.n	800a28c <gos_signalCreate+0x68>
    for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a280:	7bbb      	ldrb	r3, [r7, #14]
 800a282:	3301      	adds	r3, #1
 800a284:	73bb      	strb	r3, [r7, #14]
 800a286:	7bbb      	ldrb	r3, [r7, #14]
 800a288:	2b05      	cmp	r3, #5
 800a28a:	d9d6      	bls.n	800a23a <gos_signalCreate+0x16>
        {
            // Nothing to do.
        }
    }

    return signalCreateResult;
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	2000a490 	.word	0x2000a490

0800a2a0 <gos_signalInvoke>:

/*
 * Function: gos_signalInvoke
 */
GOS_INLINE gos_result_t gos_signalInvoke (gos_signalId_t signalId, gos_signalSenderId_t senderId)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b0a0      	sub	sp, #128	@ 0x80
 800a2a4:	af02      	add	r7, sp, #8
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	460a      	mov	r2, r1
 800a2aa:	71fb      	strb	r3, [r7, #7]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	80bb      	strh	r3, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t         signalInvokeResult = GOS_ERROR;
 800a2b0:	23ae      	movs	r3, #174	@ 0xae
 800a2b2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    gos_tid_t            callerTaskId       = GOS_INVALID_TASK_ID;
 800a2b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2ba:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    gos_taskDescriptor_t callerTaskDesc     = {0};
 800a2be:	f107 0308 	add.w	r3, r7, #8
 800a2c2:	226a      	movs	r2, #106	@ 0x6a
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f001 fea6 	bl	800c018 <memset>

    /*
     * Function code.
     */
    if (signalId < CFG_SIGNAL_MAX_NUMBER && signalArray[signalId].inUse == GOS_TRUE)
 800a2cc:	79fb      	ldrb	r3, [r7, #7]
 800a2ce:	2b05      	cmp	r3, #5
 800a2d0:	d849      	bhi.n	800a366 <gos_signalInvoke+0xc6>
 800a2d2:	79fb      	ldrb	r3, [r7, #7]
 800a2d4:	4a27      	ldr	r2, [pc, #156]	@ (800a374 <gos_signalInvoke+0xd4>)
 800a2d6:	212c      	movs	r1, #44	@ 0x2c
 800a2d8:	fb01 f303 	mul.w	r3, r1, r3
 800a2dc:	4413      	add	r3, r2
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b36      	cmp	r3, #54	@ 0x36
 800a2e2:	d140      	bne.n	800a366 <gos_signalInvoke+0xc6>
    {
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 800a2e4:	f7fb ffb4 	bl	8006250 <gos_kernelIsCallerIsr>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b36      	cmp	r3, #54	@ 0x36
 800a2ec:	d017      	beq.n	800a31e <gos_signalInvoke+0x7e>
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 800a2ee:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fd feaa 	bl	800804c <gos_taskGetCurrentId>
 800a2f8:	4603      	mov	r3, r0
        if ((gos_kernelIsCallerIsr()                                 == GOS_TRUE    ||
 800a2fa:	2b55      	cmp	r3, #85	@ 0x55
 800a2fc:	d128      	bne.n	800a350 <gos_signalInvoke+0xb0>
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 800a2fe:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800a302:	f107 0208 	add.w	r2, r7, #8
 800a306:	4611      	mov	r1, r2
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fd fefb 	bl	8008104 <gos_taskGetData>
 800a30e:	4603      	mov	r3, r0
            (gos_taskGetCurrentId(&callerTaskId)                     == GOS_SUCCESS &&
 800a310:	2b55      	cmp	r3, #85	@ 0x55
 800a312:	d11d      	bne.n	800a350 <gos_signalInvoke+0xb0>
            (callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_SIGNALING) == GOS_PRIV_SIGNALING))
 800a314:	8a3b      	ldrh	r3, [r7, #16]
 800a316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
            gos_taskGetData(callerTaskId, &callerTaskDesc)           == GOS_SUCCESS &&
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d018      	beq.n	800a350 <gos_signalInvoke+0xb0>
            )
        {
            signalArray[signalId].senderId       = senderId;
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	4a14      	ldr	r2, [pc, #80]	@ (800a374 <gos_signalInvoke+0xd4>)
 800a322:	212c      	movs	r1, #44	@ 0x2c
 800a324:	fb01 f303 	mul.w	r3, r1, r3
 800a328:	4413      	add	r3, r2
 800a32a:	332a      	adds	r3, #42	@ 0x2a
 800a32c:	88ba      	ldrh	r2, [r7, #4]
 800a32e:	801a      	strh	r2, [r3, #0]
            signalArray[signalId].invokeRequired = GOS_TRUE;
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	4a10      	ldr	r2, [pc, #64]	@ (800a374 <gos_signalInvoke+0xd4>)
 800a334:	212c      	movs	r1, #44	@ 0x2c
 800a336:	fb01 f303 	mul.w	r3, r1, r3
 800a33a:	4413      	add	r3, r2
 800a33c:	3328      	adds	r3, #40	@ 0x28
 800a33e:	2236      	movs	r2, #54	@ 0x36
 800a340:	701a      	strb	r2, [r3, #0]
            signalInvokeResult                   = GOS_SUCCESS;
 800a342:	2355      	movs	r3, #85	@ 0x55
 800a344:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

            // Unblock signal daemon to handle signal invoking by
            // incrementing the invoke trigger.
            (void_t) gos_triggerIncrement(&signalInvokeTrigger);
 800a348:	480b      	ldr	r0, [pc, #44]	@ (800a378 <gos_signalInvoke+0xd8>)
 800a34a:	f001 fc4d 	bl	800bbe8 <gos_triggerIncrement>
 800a34e:	e00a      	b.n	800a366 <gos_signalInvoke+0xc6>
        }
        else
        {
            gos_errorHandler(GOS_ERROR_LEVEL_OS_WARNING, __func__, __LINE__, "<%s> has no privilege to invoke signals!",
 800a350:	f107 0308 	add.w	r3, r7, #8
 800a354:	330a      	adds	r3, #10
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	4b08      	ldr	r3, [pc, #32]	@ (800a37c <gos_signalInvoke+0xdc>)
 800a35a:	f240 1213 	movw	r2, #275	@ 0x113
 800a35e:	4908      	ldr	r1, [pc, #32]	@ (800a380 <gos_signalInvoke+0xe0>)
 800a360:	202e      	movs	r0, #46	@ 0x2e
 800a362:	f7fe f95b 	bl	800861c <gos_errorHandler>
    else
    {
        // Nothing to do.
    }

    return signalInvokeResult;
 800a366:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3778      	adds	r7, #120	@ 0x78
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	2000a490 	.word	0x2000a490
 800a378:	2000a598 	.word	0x2000a598
 800a37c:	0800dbd4 	.word	0x0800dbd4
 800a380:	0800de74 	.word	0x0800de74

0800a384 <gos_signalDaemonTask>:
 * @details Polls the signal invoke queue, and completes the necessary signal invokings.
 *
 * @return -
 */
GOS_STATIC void_t gos_signalDaemonTask (void_t)
{
 800a384:	b590      	push	{r4, r7, lr}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_signalHandlerIndex_t signalHandlerIndex = 0u;
 800a38a:	2300      	movs	r3, #0
 800a38c:	71fb      	strb	r3, [r7, #7]
    gos_signalIndex_t        signalIndex        = 0u;
 800a38e:	2300      	movs	r3, #0
 800a390:	71bb      	strb	r3, [r7, #6]
     * Function code.
     */
    for (;;)
    {
        // Wait for trigger.
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800a392:	f04f 32ff 	mov.w	r2, #4294967295
 800a396:	2101      	movs	r1, #1
 800a398:	4835      	ldr	r0, [pc, #212]	@ (800a470 <gos_signalDaemonTask+0xec>)
 800a39a:	f001 fb75 	bl	800ba88 <gos_triggerWait>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b55      	cmp	r3, #85	@ 0x55
 800a3a2:	d1f6      	bne.n	800a392 <gos_signalDaemonTask+0xe>
        {
            (void_t) gos_triggerReset(&signalInvokeTrigger);
 800a3a4:	4832      	ldr	r0, [pc, #200]	@ (800a470 <gos_signalDaemonTask+0xec>)
 800a3a6:	f001 fb17 	bl	800b9d8 <gos_triggerReset>
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	71bb      	strb	r3, [r7, #6]
 800a3ae:	e05b      	b.n	800a468 <gos_signalDaemonTask+0xe4>
            {
                if (signalArray[signalIndex].invokeRequired == GOS_TRUE)
 800a3b0:	79bb      	ldrb	r3, [r7, #6]
 800a3b2:	4a30      	ldr	r2, [pc, #192]	@ (800a474 <gos_signalDaemonTask+0xf0>)
 800a3b4:	212c      	movs	r1, #44	@ 0x2c
 800a3b6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	3328      	adds	r3, #40	@ 0x28
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	2b36      	cmp	r3, #54	@ 0x36
 800a3c2:	d14e      	bne.n	800a462 <gos_signalDaemonTask+0xde>
                {
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	71fb      	strb	r3, [r7, #7]
 800a3c8:	e03d      	b.n	800a446 <gos_signalDaemonTask+0xc2>
                    {
                        if (signalArray[signalIndex].handlers[signalHandlerIndex] == NULL)
 800a3ca:	79ba      	ldrb	r2, [r7, #6]
 800a3cc:	79f9      	ldrb	r1, [r7, #7]
 800a3ce:	4829      	ldr	r0, [pc, #164]	@ (800a474 <gos_signalDaemonTask+0xf0>)
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	4413      	add	r3, r2
 800a3da:	440b      	add	r3, r1
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4403      	add	r3, r0
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d033      	beq.n	800a44e <gos_signalDaemonTask+0xca>
                            break;
                        }
                        else
                        {
                            // Switch to signal handler privilege.
                            (void_t) gos_taskSetPrivileges(
 800a3e6:	4b24      	ldr	r3, [pc, #144]	@ (800a478 <gos_signalDaemonTask+0xf4>)
 800a3e8:	8d58      	ldrh	r0, [r3, #42]	@ 0x2a
 800a3ea:	79ba      	ldrb	r2, [r7, #6]
 800a3ec:	79fb      	ldrb	r3, [r7, #7]
 800a3ee:	4921      	ldr	r1, [pc, #132]	@ (800a474 <gos_signalDaemonTask+0xf0>)
 800a3f0:	2416      	movs	r4, #22
 800a3f2:	fb04 f202 	mul.w	r2, r4, r2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	330c      	adds	r3, #12
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	440b      	add	r3, r1
 800a3fe:	889b      	ldrh	r3, [r3, #4]
 800a400:	4619      	mov	r1, r3
 800a402:	f7fd fd0d 	bl	8007e20 <gos_taskSetPrivileges>
                                    signalDaemonTaskDescriptor.taskId,
                                    signalArray[signalIndex].handlerPrvileges[signalHandlerIndex]
                                    );
                            // Call signal handler.
                            signalArray[signalIndex].handlers[signalHandlerIndex](signalArray[signalIndex].senderId);
 800a406:	79ba      	ldrb	r2, [r7, #6]
 800a408:	79f9      	ldrb	r1, [r7, #7]
 800a40a:	481a      	ldr	r0, [pc, #104]	@ (800a474 <gos_signalDaemonTask+0xf0>)
 800a40c:	4613      	mov	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4413      	add	r3, r2
 800a412:	005b      	lsls	r3, r3, #1
 800a414:	4413      	add	r3, r2
 800a416:	440b      	add	r3, r1
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4403      	add	r3, r0
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	79ba      	ldrb	r2, [r7, #6]
 800a420:	4914      	ldr	r1, [pc, #80]	@ (800a474 <gos_signalDaemonTask+0xf0>)
 800a422:	202c      	movs	r0, #44	@ 0x2c
 800a424:	fb00 f202 	mul.w	r2, r0, r2
 800a428:	440a      	add	r2, r1
 800a42a:	322a      	adds	r2, #42	@ 0x2a
 800a42c:	8812      	ldrh	r2, [r2, #0]
 800a42e:	4610      	mov	r0, r2
 800a430:	4798      	blx	r3

                            // Switch back to kernel privilege.
                            (void_t) gos_taskSetPrivileges(signalDaemonTaskDescriptor.taskId, GOS_TASK_PRIVILEGE_KERNEL);
 800a432:	4b11      	ldr	r3, [pc, #68]	@ (800a478 <gos_signalDaemonTask+0xf4>)
 800a434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a436:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fd fcf0 	bl	8007e20 <gos_taskSetPrivileges>
                    for (signalHandlerIndex = 0u; signalHandlerIndex < CFG_SIGNAL_MAX_SUBSCRIBERS; signalHandlerIndex++)
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	3301      	adds	r3, #1
 800a444:	71fb      	strb	r3, [r7, #7]
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	2b05      	cmp	r3, #5
 800a44a:	d9be      	bls.n	800a3ca <gos_signalDaemonTask+0x46>
 800a44c:	e000      	b.n	800a450 <gos_signalDaemonTask+0xcc>
                            break;
 800a44e:	bf00      	nop
                        }
                    }
                    signalArray[signalIndex].invokeRequired = GOS_FALSE;
 800a450:	79bb      	ldrb	r3, [r7, #6]
 800a452:	4a08      	ldr	r2, [pc, #32]	@ (800a474 <gos_signalDaemonTask+0xf0>)
 800a454:	212c      	movs	r1, #44	@ 0x2c
 800a456:	fb01 f303 	mul.w	r3, r1, r3
 800a45a:	4413      	add	r3, r2
 800a45c:	3328      	adds	r3, #40	@ 0x28
 800a45e:	2249      	movs	r2, #73	@ 0x49
 800a460:	701a      	strb	r2, [r3, #0]
            for (signalIndex = 0u; signalIndex < CFG_SIGNAL_MAX_NUMBER; signalIndex++)
 800a462:	79bb      	ldrb	r3, [r7, #6]
 800a464:	3301      	adds	r3, #1
 800a466:	71bb      	strb	r3, [r7, #6]
 800a468:	79bb      	ldrb	r3, [r7, #6]
 800a46a:	2b05      	cmp	r3, #5
 800a46c:	d9a0      	bls.n	800a3b0 <gos_signalDaemonTask+0x2c>
        if (gos_triggerWait(&signalInvokeTrigger, 1u, GOS_TRIGGER_ENDLESS_TMO) == GOS_SUCCESS)
 800a46e:	e790      	b.n	800a392 <gos_signalDaemonTask+0xe>
 800a470:	2000a598 	.word	0x2000a598
 800a474:	2000a490 	.word	0x2000a490
 800a478:	2000182c 	.word	0x2000182c

0800a47c <gos_sysmonInit>:

/*
 * Function: gos_sysmonInit
 */
gos_result_t gos_sysmonInit (void_t)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t sysmonInitResult = GOS_ERROR;
 800a482:	23ae      	movs	r3, #174	@ 0xae
 800a484:	71fb      	strb	r3, [r7, #7]
    u8_t         userMessageIndex = 0u;
 800a486:	2300      	movs	r3, #0
 800a488:	71bb      	strb	r3, [r7, #6]

    /*
     * Function code.
     */
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 800a48a:	2300      	movs	r3, #0
 800a48c:	71bb      	strb	r3, [r7, #6]
 800a48e:	e024      	b.n	800a4da <gos_sysmonInit+0x5e>
    {
        userMessages[userMessageIndex].callback        = NULL;
 800a490:	79bb      	ldrb	r3, [r7, #6]
 800a492:	4a1e      	ldr	r2, [pc, #120]	@ (800a50c <gos_sysmonInit+0x90>)
 800a494:	011b      	lsls	r3, r3, #4
 800a496:	4413      	add	r3, r2
 800a498:	330c      	adds	r3, #12
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payload         = NULL;
 800a49e:	79bb      	ldrb	r3, [r7, #6]
 800a4a0:	4a1a      	ldr	r2, [pc, #104]	@ (800a50c <gos_sysmonInit+0x90>)
 800a4a2:	011b      	lsls	r3, r3, #4
 800a4a4:	4413      	add	r3, r2
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].payloadSize     = 0u;
 800a4ac:	79bb      	ldrb	r3, [r7, #6]
 800a4ae:	4a17      	ldr	r2, [pc, #92]	@ (800a50c <gos_sysmonInit+0x90>)
 800a4b0:	011b      	lsls	r3, r3, #4
 800a4b2:	4413      	add	r3, r2
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
        userMessages[userMessageIndex].protocolVersion = 0u;
 800a4ba:	79bb      	ldrb	r3, [r7, #6]
 800a4bc:	4a13      	ldr	r2, [pc, #76]	@ (800a50c <gos_sysmonInit+0x90>)
 800a4be:	011b      	lsls	r3, r3, #4
 800a4c0:	4413      	add	r3, r2
 800a4c2:	3302      	adds	r3, #2
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	801a      	strh	r2, [r3, #0]
        userMessages[userMessageIndex].messageId       = 0u;
 800a4c8:	79bb      	ldrb	r3, [r7, #6]
 800a4ca:	4a10      	ldr	r2, [pc, #64]	@ (800a50c <gos_sysmonInit+0x90>)
 800a4cc:	011b      	lsls	r3, r3, #4
 800a4ce:	4413      	add	r3, r2
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	801a      	strh	r2, [r3, #0]
    for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 800a4d4:	79bb      	ldrb	r3, [r7, #6]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	71bb      	strb	r3, [r7, #6]
 800a4da:	79bb      	ldrb	r3, [r7, #6]
 800a4dc:	2b09      	cmp	r3, #9
 800a4de:	d9d7      	bls.n	800a490 <gos_sysmonInit+0x14>
    }

    if (gos_gcpRegisterPhysicalDriver(CFG_SYSMON_GCP_CHANNEL_NUM, gos_sysmonDriverTransmit,
 800a4e0:	4a0b      	ldr	r2, [pc, #44]	@ (800a510 <gos_sysmonInit+0x94>)
 800a4e2:	490c      	ldr	r1, [pc, #48]	@ (800a514 <gos_sysmonInit+0x98>)
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	f7fe f99d 	bl	8008824 <gos_gcpRegisterPhysicalDriver>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b55      	cmp	r3, #85	@ 0x55
 800a4ee:	d108      	bne.n	800a502 <gos_sysmonInit+0x86>
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
        gos_taskRegister(&sysmonDaemonTaskDesc, NULL) == GOS_SUCCESS)
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	4809      	ldr	r0, [pc, #36]	@ (800a518 <gos_sysmonInit+0x9c>)
 800a4f4:	f7fc f9cc 	bl	8006890 <gos_taskRegister>
 800a4f8:	4603      	mov	r3, r0
        gos_sysmonDriverReceive) == GOS_SUCCESS &&
 800a4fa:	2b55      	cmp	r3, #85	@ 0x55
 800a4fc:	d101      	bne.n	800a502 <gos_sysmonInit+0x86>
    {
        sysmonInitResult = GOS_SUCCESS;
 800a4fe:	2355      	movs	r3, #85	@ 0x55
 800a500:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Initialization failed.
    }

    return sysmonInitResult;
 800a502:	79fb      	ldrb	r3, [r7, #7]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	2000b69c 	.word	0x2000b69c
 800a510:	0800bdf1 	.word	0x0800bdf1
 800a514:	0800be29 	.word	0x0800be29
 800a518:	20001898 	.word	0x20001898

0800a51c <gos_sysmonDaemonTask>:
 * @details Serves the incoming system monitoring messages.
 *
 * @return -
 */
GOS_STATIC void_t gos_sysmonDaemonTask (void_t)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af02      	add	r7, sp, #8
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t lutIndex         = 0u;
 800a522:	2300      	movs	r3, #0
 800a524:	71bb      	strb	r3, [r7, #6]
    u8_t                    userMessageIndex = 0u;
 800a526:	2300      	movs	r3, #0
 800a528:	71fb      	strb	r3, [r7, #7]
    u16_t                   messageId        = 0u;
 800a52a:	2300      	movs	r3, #0
 800a52c:	80bb      	strh	r3, [r7, #4]
     * Function code.
     */
    for (;;)
    {
        // Reset message ID.
        messageId = 0u;
 800a52e:	2300      	movs	r3, #0
 800a530:	80bb      	strh	r3, [r7, #4]

        // Check if a message was received.
        if (gos_gcpReceiveMessage(CFG_SYSMON_GCP_CHANNEL_NUM, &messageId, receiveBuffer, RECEIVE_BUFFER_SIZE, 0xFFFF) == GOS_SUCCESS)
 800a532:	1d39      	adds	r1, r7, #4
 800a534:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a53e:	4a33      	ldr	r2, [pc, #204]	@ (800a60c <gos_sysmonDaemonTask+0xf0>)
 800a540:	2000      	movs	r0, #0
 800a542:	f7fe fac9 	bl	8008ad8 <gos_gcpReceiveMessage>
 800a546:	4603      	mov	r3, r0
 800a548:	2b55      	cmp	r3, #85	@ 0x55
 800a54a:	d15a      	bne.n	800a602 <gos_sysmonDaemonTask+0xe6>
        {
            // Get LUT index.
            lutIndex = gos_sysmonGetLutIndex(messageId);
 800a54c:	88bb      	ldrh	r3, [r7, #4]
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 f862 	bl	800a618 <gos_sysmonGetLutIndex>
 800a554:	4603      	mov	r3, r0
 800a556:	71bb      	strb	r3, [r7, #6]

            // Check user registered messages.
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 800a558:	79bb      	ldrb	r3, [r7, #6]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <gos_sysmonDaemonTask+0x48>
 800a55e:	79bb      	ldrb	r3, [r7, #6]
 800a560:	2b10      	cmp	r3, #16
 800a562:	d138      	bne.n	800a5d6 <gos_sysmonDaemonTask+0xba>
            {
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 800a564:	2300      	movs	r3, #0
 800a566:	71fb      	strb	r3, [r7, #7]
 800a568:	e031      	b.n	800a5ce <gos_sysmonDaemonTask+0xb2>
                {
                    if (userMessages[userMessageIndex].messageId == messageId)
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	4a28      	ldr	r2, [pc, #160]	@ (800a610 <gos_sysmonDaemonTask+0xf4>)
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	4413      	add	r3, r2
 800a572:	881a      	ldrh	r2, [r3, #0]
 800a574:	88bb      	ldrh	r3, [r7, #4]
 800a576:	429a      	cmp	r2, r3
 800a578:	d126      	bne.n	800a5c8 <gos_sysmonDaemonTask+0xac>
                    {
                        // If payload is not NULL, copy it.
                        if (userMessages[userMessageIndex].payload != NULL)
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	4a24      	ldr	r2, [pc, #144]	@ (800a610 <gos_sysmonDaemonTask+0xf4>)
 800a57e:	011b      	lsls	r3, r3, #4
 800a580:	4413      	add	r3, r2
 800a582:	3304      	adds	r3, #4
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00f      	beq.n	800a5aa <gos_sysmonDaemonTask+0x8e>
                        {
                            (void_t) memcpy(userMessages[userMessageIndex].payload, (void_t*)receiveBuffer, userMessages[userMessageIndex].payloadSize);
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	4a20      	ldr	r2, [pc, #128]	@ (800a610 <gos_sysmonDaemonTask+0xf4>)
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	4413      	add	r3, r2
 800a592:	3304      	adds	r3, #4
 800a594:	6818      	ldr	r0, [r3, #0]
 800a596:	79fb      	ldrb	r3, [r7, #7]
 800a598:	4a1d      	ldr	r2, [pc, #116]	@ (800a610 <gos_sysmonDaemonTask+0xf4>)
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	4413      	add	r3, r2
 800a59e:	3308      	adds	r3, #8
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	4919      	ldr	r1, [pc, #100]	@ (800a60c <gos_sysmonDaemonTask+0xf0>)
 800a5a6:	f001 fd73 	bl	800c090 <memcpy>
                        {
                            // Message has no payload.
                        }

                        // Call callback function.
                        if (userMessages[userMessageIndex].callback != NULL)
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	4a18      	ldr	r2, [pc, #96]	@ (800a610 <gos_sysmonDaemonTask+0xf4>)
 800a5ae:	011b      	lsls	r3, r3, #4
 800a5b0:	4413      	add	r3, r2
 800a5b2:	330c      	adds	r3, #12
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d006      	beq.n	800a5c8 <gos_sysmonDaemonTask+0xac>
                        {
                        	userMessages[userMessageIndex].callback();
 800a5ba:	79fb      	ldrb	r3, [r7, #7]
 800a5bc:	4a14      	ldr	r2, [pc, #80]	@ (800a610 <gos_sysmonDaemonTask+0xf4>)
 800a5be:	011b      	lsls	r3, r3, #4
 800a5c0:	4413      	add	r3, r2
 800a5c2:	330c      	adds	r3, #12
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4798      	blx	r3
                for (userMessageIndex = 0u; userMessageIndex < CFG_SYSMON_MAX_USER_MESSAGES; userMessageIndex++)
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	71fb      	strb	r3, [r7, #7]
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	2b09      	cmp	r3, #9
 800a5d2:	d9ca      	bls.n	800a56a <gos_sysmonDaemonTask+0x4e>
            if (lutIndex == GOS_SYSMON_MSG_UNKNOWN || lutIndex == GOS_SYSMON_MSG_NUM_OF_MESSAGES)
 800a5d4:	e018      	b.n	800a608 <gos_sysmonDaemonTask+0xec>
                    }
                }
            }
            else
            {
                if (sysmonLut[lutIndex].pHandler != NULL)
 800a5d6:	79bb      	ldrb	r3, [r7, #6]
 800a5d8:	4a0e      	ldr	r2, [pc, #56]	@ (800a614 <gos_sysmonDaemonTask+0xf8>)
 800a5da:	011b      	lsls	r3, r3, #4
 800a5dc:	4413      	add	r3, r2
 800a5de:	330c      	adds	r3, #12
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d009      	beq.n	800a5fa <gos_sysmonDaemonTask+0xde>
                {
                    sysmonLut[lutIndex].pHandler(lutIndex);
 800a5e6:	79bb      	ldrb	r3, [r7, #6]
 800a5e8:	4a0a      	ldr	r2, [pc, #40]	@ (800a614 <gos_sysmonDaemonTask+0xf8>)
 800a5ea:	011b      	lsls	r3, r3, #4
 800a5ec:	4413      	add	r3, r2
 800a5ee:	330c      	adds	r3, #12
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	79ba      	ldrb	r2, [r7, #6]
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	4798      	blx	r3
 800a5f8:	e799      	b.n	800a52e <gos_sysmonDaemonTask+0x12>
                }
                else
                {
                    gos_sysmonSendResponse(GOS_SYSMON_MSG_UNKNOWN);
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	f000 f830 	bl	800a660 <gos_sysmonSendResponse>
 800a600:	e795      	b.n	800a52e <gos_sysmonDaemonTask+0x12>
            }
        }
        else
        {
            // Reception error.
            (void_t) gos_taskSleep(10);
 800a602:	200a      	movs	r0, #10
 800a604:	f7fc fad6 	bl	8006bb4 <gos_taskSleep>
        messageId = 0u;
 800a608:	e791      	b.n	800a52e <gos_sysmonDaemonTask+0x12>
 800a60a:	bf00      	nop
 800a60c:	2000a5a4 	.word	0x2000a5a4
 800a610:	2000b69c 	.word	0x2000b69c
 800a614:	0800de88 	.word	0x0800de88

0800a618 <gos_sysmonGetLutIndex>:
 * @param   messageId : ID of the message to get the index for.
 *
 * @return  Look-up table index of the message.
 */
GOS_STATIC gos_sysmonMessageEnum_t gos_sysmonGetLutIndex (gos_sysmonMessageId_t messageId)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	4603      	mov	r3, r0
 800a620:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_sysmonMessageEnum_t index = 0u;
 800a622:	2300      	movs	r3, #0
 800a624:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 800a626:	2300      	movs	r3, #0
 800a628:	73fb      	strb	r3, [r7, #15]
 800a62a:	e00a      	b.n	800a642 <gos_sysmonGetLutIndex+0x2a>
    {
        if (sysmonLut[index].messageId == messageId)
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	4a0b      	ldr	r2, [pc, #44]	@ (800a65c <gos_sysmonGetLutIndex+0x44>)
 800a630:	011b      	lsls	r3, r3, #4
 800a632:	4413      	add	r3, r2
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	88fa      	ldrh	r2, [r7, #6]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d006      	beq.n	800a64a <gos_sysmonGetLutIndex+0x32>
    for (index = 0u; index < GOS_SYSMON_MSG_NUM_OF_MESSAGES; index++)
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
 800a63e:	3301      	adds	r3, #1
 800a640:	73fb      	strb	r3, [r7, #15]
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b0f      	cmp	r3, #15
 800a646:	d9f1      	bls.n	800a62c <gos_sysmonGetLutIndex+0x14>
 800a648:	e000      	b.n	800a64c <gos_sysmonGetLutIndex+0x34>
        {
            break;
 800a64a:	bf00      	nop
        {
            // Continue searching.
        }
    }

    return index;
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	0800de88 	.word	0x0800de88

0800a660 <gos_sysmonSendResponse>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonSendResponse (gos_sysmonMessageEnum_t lutIndex)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af02      	add	r7, sp, #8
 800a666:	4603      	mov	r3, r0
 800a668:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    (void_t) gos_gcpTransmitMessage(
 800a66a:	79fb      	ldrb	r3, [r7, #7]
            CFG_SYSMON_GCP_CHANNEL_NUM,          sysmonLut[lutIndex].messageId,
 800a66c:	4a0c      	ldr	r2, [pc, #48]	@ (800a6a0 <gos_sysmonSendResponse+0x40>)
 800a66e:	011b      	lsls	r3, r3, #4
 800a670:	4413      	add	r3, r2
 800a672:	8819      	ldrh	r1, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 800a674:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 800a676:	4a0a      	ldr	r2, [pc, #40]	@ (800a6a0 <gos_sysmonSendResponse+0x40>)
 800a678:	011b      	lsls	r3, r3, #4
 800a67a:	4413      	add	r3, r2
 800a67c:	3304      	adds	r3, #4
 800a67e:	681a      	ldr	r2, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 800a680:	79fb      	ldrb	r3, [r7, #7]
            sysmonLut[lutIndex].pMessagePayload, sysmonLut[lutIndex].payloadSize,
 800a682:	4807      	ldr	r0, [pc, #28]	@ (800a6a0 <gos_sysmonSendResponse+0x40>)
 800a684:	011b      	lsls	r3, r3, #4
 800a686:	4403      	add	r3, r0
 800a688:	3308      	adds	r3, #8
 800a68a:	881b      	ldrh	r3, [r3, #0]
    (void_t) gos_gcpTransmitMessage(
 800a68c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a690:	9000      	str	r0, [sp, #0]
 800a692:	2000      	movs	r0, #0
 800a694:	f7fe f8ee 	bl	8008874 <gos_gcpTransmitMessage>
			0xFFFF
            );
}
 800a698:	bf00      	nop
 800a69a:	3708      	adds	r7, #8
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	0800de88 	.word	0x0800de88

0800a6a4 <gos_sysmonHandlePingRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandlePingRequest (gos_sysmonMessageEnum_t lutIndex)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    pingMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 800a6ae:	79fb      	ldrb	r3, [r7, #7]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 fb05 	bl	800acc0 <gos_sysmonCheckMessage>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4b06      	ldr	r3, [pc, #24]	@ (800a6d4 <gos_sysmonHandlePingRequest+0x30>)
 800a6bc:	701a      	strb	r2, [r3, #0]
    gos_sysmonSendResponse(lutIndex + 1);
 800a6be:	79fb      	ldrb	r3, [r7, #7]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff ffcb 	bl	800a660 <gos_sysmonSendResponse>
}
 800a6ca:	bf00      	nop
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	2000b5a4 	.word	0x2000b5a4

0800a6d8 <gos_sysmonHandleCpuUsageGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleCpuUsageGet (gos_sysmonMessageEnum_t lutIndex)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	4603      	mov	r3, r0
 800a6e0:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    cpuMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 800a6e2:	79fb      	ldrb	r3, [r7, #7]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 faeb 	bl	800acc0 <gos_sysmonCheckMessage>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a71c <gos_sysmonHandleCpuUsageGet+0x44>)
 800a6f0:	701a      	strb	r2, [r3, #0]

    if (cpuMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a71c <gos_sysmonHandleCpuUsageGet+0x44>)
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b28      	cmp	r3, #40	@ 0x28
 800a6f8:	d106      	bne.n	800a708 <gos_sysmonHandleCpuUsageGet+0x30>
    {
        cpuMessage.cpuUsage = gos_kernelGetCpuUsage();
 800a6fa:	f7fb f8b9 	bl	8005870 <gos_kernelGetCpuUsage>
 800a6fe:	4603      	mov	r3, r0
 800a700:	461a      	mov	r2, r3
 800a702:	4b06      	ldr	r3, [pc, #24]	@ (800a71c <gos_sysmonHandleCpuUsageGet+0x44>)
 800a704:	f8a3 2001 	strh.w	r2, [r3, #1]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 800a708:	79fb      	ldrb	r3, [r7, #7]
 800a70a:	3301      	adds	r3, #1
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	4618      	mov	r0, r3
 800a710:	f7ff ffa6 	bl	800a660 <gos_sysmonSendResponse>
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	2000b5a8 	.word	0x2000b5a8

0800a720 <gos_sysmonHandleTaskDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 800a72a:	2300      	movs	r3, #0
 800a72c:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 800a72e:	2349      	movs	r3, #73	@ 0x49
 800a730:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	4618      	mov	r0, r3
 800a736:	f000 fac3 	bl	800acc0 <gos_sysmonCheckMessage>
 800a73a:	4603      	mov	r3, r0
 800a73c:	461a      	mov	r2, r3
 800a73e:	4b66      	ldr	r3, [pc, #408]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a740:	701a      	strb	r2, [r3, #0]

    if (taskDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 800a742:	4b65      	ldr	r3, [pc, #404]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	2b28      	cmp	r3, #40	@ 0x28
 800a748:	f040 80c2 	bne.w	800a8d0 <gos_sysmonHandleTaskDataGet+0x1b0>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 800a74c:	4b63      	ldr	r3, [pc, #396]	@ (800a8dc <gos_sysmonHandleTaskDataGet+0x1bc>)
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a754:	4293      	cmp	r3, r2
 800a756:	d168      	bne.n	800a82a <gos_sysmonHandleTaskDataGet+0x10a>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800a758:	2300      	movs	r3, #0
 800a75a:	81fb      	strh	r3, [r7, #14]
 800a75c:	e061      	b.n	800a822 <gos_sysmonHandleTaskDataGet+0x102>
            {
                if (breakLoop == GOS_TRUE)
 800a75e:	7b7b      	ldrb	r3, [r7, #13]
 800a760:	2b36      	cmp	r3, #54	@ 0x36
 800a762:	f000 80b4 	beq.w	800a8ce <gos_sysmonHandleTaskDataGet+0x1ae>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 800a766:	89fb      	ldrh	r3, [r7, #14]
 800a768:	495d      	ldr	r1, [pc, #372]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fd fd38 	bl	80081e0 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 800a770:	4b5b      	ldr	r3, [pc, #364]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a778:	d045      	beq.n	800a806 <gos_sysmonHandleTaskDataGet+0xe6>
                {
                    taskDataMsg.taskData.taskId               = taskDesc.taskId;
 800a77a:	4b59      	ldr	r3, [pc, #356]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a77c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a77e:	4b56      	ldr	r3, [pc, #344]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a780:	84da      	strh	r2, [r3, #38]	@ 0x26
                    taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 800a782:	4b57      	ldr	r3, [pc, #348]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a784:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a788:	4b53      	ldr	r3, [pc, #332]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a78a:	859a      	strh	r2, [r3, #44]	@ 0x2c
                    taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 800a78c:	4b54      	ldr	r3, [pc, #336]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a78e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a792:	4b51      	ldr	r3, [pc, #324]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a794:	f8a3 203d 	strh.w	r2, [r3, #61]	@ 0x3d
                    taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 800a798:	4b51      	ldr	r3, [pc, #324]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a79a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800a79e:	4b4e      	ldr	r3, [pc, #312]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a7a0:	f8a3 2037 	strh.w	r2, [r3, #55]	@ 0x37
                    taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 800a7a4:	4b4e      	ldr	r3, [pc, #312]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a7a6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800a7aa:	4b4b      	ldr	r3, [pc, #300]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a7ac:	f8a3 203b 	strh.w	r2, [r3, #59]	@ 0x3b
                    taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 800a7b0:	4b4b      	ldr	r3, [pc, #300]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a7b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a7b6:	4b48      	ldr	r3, [pc, #288]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a7b8:	f8a3 2039 	strh.w	r2, [r3, #57]	@ 0x39
                    taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 800a7bc:	4b48      	ldr	r3, [pc, #288]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a7be:	79da      	ldrb	r2, [r3, #7]
 800a7c0:	4b45      	ldr	r3, [pc, #276]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a7c2:	70da      	strb	r2, [r3, #3]
                    taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 800a7c4:	4b46      	ldr	r3, [pc, #280]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a7c6:	799a      	ldrb	r2, [r3, #6]
 800a7c8:	4b43      	ldr	r3, [pc, #268]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a7ca:	709a      	strb	r2, [r3, #2]
                    taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 800a7cc:	4b44      	ldr	r3, [pc, #272]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a7ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7d0:	4a41      	ldr	r2, [pc, #260]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a7d2:	6293      	str	r3, [r2, #40]	@ 0x28
                    taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 800a7d4:	4b42      	ldr	r3, [pc, #264]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a7d6:	891a      	ldrh	r2, [r3, #8]
 800a7d8:	4b3f      	ldr	r3, [pc, #252]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a7da:	809a      	strh	r2, [r3, #4]
                    taskDataMsg.taskData.taskState            = taskDesc.taskState;
 800a7dc:	4b40      	ldr	r3, [pc, #256]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a7de:	791a      	ldrb	r2, [r3, #4]
 800a7e0:	4b3d      	ldr	r3, [pc, #244]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a7e2:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 800a7e4:	4a3c      	ldr	r2, [pc, #240]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a7e6:	4b3e      	ldr	r3, [pc, #248]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a7e8:	322e      	adds	r2, #46	@ 0x2e
 800a7ea:	334c      	adds	r3, #76	@ 0x4c
 800a7ec:	cb03      	ldmia	r3!, {r0, r1}
 800a7ee:	6010      	str	r0, [r2, #0]
 800a7f0:	6051      	str	r1, [r2, #4]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	7213      	strb	r3, [r2, #8]
                    (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 800a7f6:	493b      	ldr	r1, [pc, #236]	@ (800a8e4 <gos_sysmonHandleTaskDataGet+0x1c4>)
 800a7f8:	483b      	ldr	r0, [pc, #236]	@ (800a8e8 <gos_sysmonHandleTaskDataGet+0x1c8>)
 800a7fa:	f001 fc41 	bl	800c080 <strcpy>

                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 800a7fe:	4b36      	ldr	r3, [pc, #216]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a800:	2228      	movs	r2, #40	@ 0x28
 800a802:	701a      	strb	r2, [r3, #0]
 800a804:	e004      	b.n	800a810 <gos_sysmonHandleTaskDataGet+0xf0>
                }
                else
                {
                    // Last task found.
                    taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800a806:	4b34      	ldr	r3, [pc, #208]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a808:	2263      	movs	r2, #99	@ 0x63
 800a80a:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 800a80c:	2336      	movs	r3, #54	@ 0x36
 800a80e:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	3301      	adds	r3, #1
 800a814:	b2db      	uxtb	r3, r3
 800a816:	4618      	mov	r0, r3
 800a818:	f7ff ff22 	bl	800a660 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800a81c:	89fb      	ldrh	r3, [r7, #14]
 800a81e:	3301      	adds	r3, #1
 800a820:	81fb      	strh	r3, [r7, #14]
 800a822:	89fb      	ldrh	r3, [r7, #14]
 800a824:	2b2f      	cmp	r3, #47	@ 0x2f
 800a826:	d99a      	bls.n	800a75e <gos_sysmonHandleTaskDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 800a828:	e052      	b.n	800a8d0 <gos_sysmonHandleTaskDataGet+0x1b0>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 800a82a:	4b2c      	ldr	r3, [pc, #176]	@ (800a8dc <gos_sysmonHandleTaskDataGet+0x1bc>)
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	492c      	ldr	r1, [pc, #176]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a830:	4618      	mov	r0, r3
 800a832:	f7fd fcd5 	bl	80081e0 <gos_taskGetDataByIndex>
            taskDataMsg.taskData.taskId               = taskDesc.taskId;
 800a836:	4b2a      	ldr	r3, [pc, #168]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a838:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a83a:	4b27      	ldr	r3, [pc, #156]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a83c:	84da      	strh	r2, [r3, #38]	@ 0x26
            taskDataMsg.taskData.taskStackSize        = taskDesc.taskStackSize;
 800a83e:	4b28      	ldr	r3, [pc, #160]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a840:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a844:	4b24      	ldr	r3, [pc, #144]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a846:	859a      	strh	r2, [r3, #44]	@ 0x2c
            taskDataMsg.taskData.taskStackMaxUsage    = taskDesc.taskStackSizeMaxUsage;
 800a848:	4b25      	ldr	r3, [pc, #148]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a84a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a84e:	4b22      	ldr	r3, [pc, #136]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a850:	f8a3 203d 	strh.w	r2, [r3, #61]	@ 0x3d
            taskDataMsg.taskData.taskCpuUsageLimit    = taskDesc.taskCpuUsageLimit;
 800a854:	4b22      	ldr	r3, [pc, #136]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a856:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800a85a:	4b1f      	ldr	r3, [pc, #124]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a85c:	f8a3 2037 	strh.w	r2, [r3, #55]	@ 0x37
            taskDataMsg.taskData.taskCpuUsage         = taskDesc.taskCpuUsage;
 800a860:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a862:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800a866:	4b1c      	ldr	r3, [pc, #112]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a868:	f8a3 203b 	strh.w	r2, [r3, #59]	@ 0x3b
            taskDataMsg.taskData.taskCpuUsageMax      = taskDesc.taskCpuUsageMax;
 800a86c:	4b1c      	ldr	r3, [pc, #112]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a86e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a872:	4b19      	ldr	r3, [pc, #100]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a874:	f8a3 2039 	strh.w	r2, [r3, #57]	@ 0x39
            taskDataMsg.taskData.taskOriginalPriority = taskDesc.taskOriginalPriority;
 800a878:	4b19      	ldr	r3, [pc, #100]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a87a:	79da      	ldrb	r2, [r3, #7]
 800a87c:	4b16      	ldr	r3, [pc, #88]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a87e:	70da      	strb	r2, [r3, #3]
            taskDataMsg.taskData.taskPriority         = taskDesc.taskPriority;
 800a880:	4b17      	ldr	r3, [pc, #92]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a882:	799a      	ldrb	r2, [r3, #6]
 800a884:	4b14      	ldr	r3, [pc, #80]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a886:	709a      	strb	r2, [r3, #2]
            taskDataMsg.taskData.taskCsCounter        = taskDesc.taskCsCounter;
 800a888:	4b15      	ldr	r3, [pc, #84]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a88a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a88c:	4a12      	ldr	r2, [pc, #72]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a88e:	6293      	str	r3, [r2, #40]	@ 0x28
            taskDataMsg.taskData.taskPrivilegeLevel   = taskDesc.taskPrivilegeLevel;
 800a890:	4b13      	ldr	r3, [pc, #76]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a892:	891a      	ldrh	r2, [r3, #8]
 800a894:	4b10      	ldr	r3, [pc, #64]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a896:	809a      	strh	r2, [r3, #4]
            taskDataMsg.taskData.taskState            = taskDesc.taskState;
 800a898:	4b11      	ldr	r3, [pc, #68]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a89a:	791a      	ldrb	r2, [r3, #4]
 800a89c:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a89e:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskDataMsg.taskData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 800a8a0:	4a0d      	ldr	r2, [pc, #52]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a8a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a8e0 <gos_sysmonHandleTaskDataGet+0x1c0>)
 800a8a4:	322e      	adds	r2, #46	@ 0x2e
 800a8a6:	334c      	adds	r3, #76	@ 0x4c
 800a8a8:	cb03      	ldmia	r3!, {r0, r1}
 800a8aa:	6010      	str	r0, [r2, #0]
 800a8ac:	6051      	str	r1, [r2, #4]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	7213      	strb	r3, [r2, #8]
            (void_t) strcpy(taskDataMsg.taskData.taskName, taskDesc.taskName);
 800a8b2:	490c      	ldr	r1, [pc, #48]	@ (800a8e4 <gos_sysmonHandleTaskDataGet+0x1c4>)
 800a8b4:	480c      	ldr	r0, [pc, #48]	@ (800a8e8 <gos_sysmonHandleTaskDataGet+0x1c8>)
 800a8b6:	f001 fbe3 	bl	800c080 <strcpy>
            taskDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 800a8ba:	4b07      	ldr	r3, [pc, #28]	@ (800a8d8 <gos_sysmonHandleTaskDataGet+0x1b8>)
 800a8bc:	2228      	movs	r2, #40	@ 0x28
 800a8be:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 800a8c0:	79fb      	ldrb	r3, [r7, #7]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff feca 	bl	800a660 <gos_sysmonSendResponse>
}
 800a8cc:	e000      	b.n	800a8d0 <gos_sysmonHandleTaskDataGet+0x1b0>
                    break;
 800a8ce:	bf00      	nop
}
 800a8d0:	bf00      	nop
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	2000b5b0 	.word	0x2000b5b0
 800a8dc:	2000b5ac 	.word	0x2000b5ac
 800a8e0:	2000b608 	.word	0x2000b608
 800a8e4:	2000b612 	.word	0x2000b612
 800a8e8:	2000b5b6 	.word	0x2000b5b6

0800a8ec <gos_sysmonHandleTaskVariableDataGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskVariableDataGet (gos_sysmonMessageEnum_t lutIndex)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    u16_t  taskIndex = 0u;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	81fb      	strh	r3, [r7, #14]
    bool_t breakLoop = GOS_FALSE;
 800a8fa:	2349      	movs	r3, #73	@ 0x49
 800a8fc:	737b      	strb	r3, [r7, #13]

    /*
     * Function code.
     */
    taskVariableDataMsg.messageResult = gos_sysmonCheckMessage(lutIndex);
 800a8fe:	79fb      	ldrb	r3, [r7, #7]
 800a900:	4618      	mov	r0, r3
 800a902:	f000 f9dd 	bl	800acc0 <gos_sysmonCheckMessage>
 800a906:	4603      	mov	r3, r0
 800a908:	461a      	mov	r2, r3
 800a90a:	4b49      	ldr	r3, [pc, #292]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a90c:	701a      	strb	r2, [r3, #0]

    if (taskVariableDataMsg.messageResult == GOS_SYSMON_MSG_RES_OK)
 800a90e:	4b48      	ldr	r3, [pc, #288]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b28      	cmp	r3, #40	@ 0x28
 800a914:	f040 8087 	bne.w	800aa26 <gos_sysmonHandleTaskVariableDataGet+0x13a>
    {
        // Task get data message OK.
        if (taskDataGetMsg.taskIndex == 0xFFFF)
 800a918:	4b46      	ldr	r3, [pc, #280]	@ (800aa34 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a920:	4293      	cmp	r3, r2
 800a922:	d14a      	bne.n	800a9ba <gos_sysmonHandleTaskVariableDataGet+0xce>
        {
            // Send all task data.
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800a924:	2300      	movs	r3, #0
 800a926:	81fb      	strh	r3, [r7, #14]
 800a928:	e043      	b.n	800a9b2 <gos_sysmonHandleTaskVariableDataGet+0xc6>
            {
                if (breakLoop == GOS_TRUE)
 800a92a:	7b7b      	ldrb	r3, [r7, #13]
 800a92c:	2b36      	cmp	r3, #54	@ 0x36
 800a92e:	d079      	beq.n	800aa24 <gos_sysmonHandleTaskVariableDataGet+0x138>
                else
                {
                    // Nothing to do, continue.
                }

                (void_t) gos_taskGetDataByIndex(taskIndex, &taskDesc);
 800a930:	89fb      	ldrh	r3, [r7, #14]
 800a932:	4941      	ldr	r1, [pc, #260]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a934:	4618      	mov	r0, r3
 800a936:	f7fd fc53 	bl	80081e0 <gos_taskGetDataByIndex>

                if (taskDesc.taskId != GOS_INVALID_TASK_ID)
 800a93a:	4b3f      	ldr	r3, [pc, #252]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a93c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a93e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a942:	d028      	beq.n	800a996 <gos_sysmonHandleTaskVariableDataGet+0xaa>
                {
                    taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 800a944:	4b3c      	ldr	r3, [pc, #240]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a946:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a94a:	4b39      	ldr	r3, [pc, #228]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a94c:	829a      	strh	r2, [r3, #20]
                    taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 800a94e:	4b3a      	ldr	r3, [pc, #232]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a950:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800a954:	4b36      	ldr	r3, [pc, #216]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a956:	825a      	strh	r2, [r3, #18]
                    taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 800a958:	4b37      	ldr	r3, [pc, #220]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a95a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a95e:	4b34      	ldr	r3, [pc, #208]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a960:	821a      	strh	r2, [r3, #16]
                    taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 800a962:	4b35      	ldr	r3, [pc, #212]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a964:	799a      	ldrb	r2, [r3, #6]
 800a966:	4b32      	ldr	r3, [pc, #200]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a968:	709a      	strb	r2, [r3, #2]
                    taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 800a96a:	4b33      	ldr	r3, [pc, #204]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a96c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a96e:	4a30      	ldr	r2, [pc, #192]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a970:	f8c2 3003 	str.w	r3, [r2, #3]
                    taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 800a974:	4b30      	ldr	r3, [pc, #192]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a976:	791a      	ldrb	r2, [r3, #4]
 800a978:	4b2d      	ldr	r3, [pc, #180]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a97a:	705a      	strb	r2, [r3, #1]

                    (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 800a97c:	4a2c      	ldr	r2, [pc, #176]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a97e:	4b2e      	ldr	r3, [pc, #184]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a980:	3207      	adds	r2, #7
 800a982:	334c      	adds	r3, #76	@ 0x4c
 800a984:	cb03      	ldmia	r3!, {r0, r1}
 800a986:	6010      	str	r0, [r2, #0]
 800a988:	6051      	str	r1, [r2, #4]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	7213      	strb	r3, [r2, #8]

                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 800a98e:	4b28      	ldr	r3, [pc, #160]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a990:	2228      	movs	r2, #40	@ 0x28
 800a992:	701a      	strb	r2, [r3, #0]
 800a994:	e004      	b.n	800a9a0 <gos_sysmonHandleTaskVariableDataGet+0xb4>

                }
                else
                {
                    // Last task found.
                    taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800a996:	4b26      	ldr	r3, [pc, #152]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a998:	2263      	movs	r2, #99	@ 0x63
 800a99a:	701a      	strb	r2, [r3, #0]
                    breakLoop = GOS_TRUE;
 800a99c:	2336      	movs	r3, #54	@ 0x36
 800a99e:	737b      	strb	r3, [r7, #13]
                }

                gos_sysmonSendResponse(lutIndex + 1);
 800a9a0:	79fb      	ldrb	r3, [r7, #7]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff fe5a 	bl	800a660 <gos_sysmonSendResponse>
            for (taskIndex = 0; taskIndex < CFG_TASK_MAX_NUMBER; taskIndex++)
 800a9ac:	89fb      	ldrh	r3, [r7, #14]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	81fb      	strh	r3, [r7, #14]
 800a9b2:	89fb      	ldrh	r3, [r7, #14]
 800a9b4:	2b2f      	cmp	r3, #47	@ 0x2f
 800a9b6:	d9b8      	bls.n	800a92a <gos_sysmonHandleTaskVariableDataGet+0x3e>
    }
    else
    {
        // Message error.
    }
}
 800a9b8:	e035      	b.n	800aa26 <gos_sysmonHandleTaskVariableDataGet+0x13a>
            (void_t) gos_taskGetDataByIndex(taskDataGetMsg.taskIndex, &taskDesc);
 800a9ba:	4b1e      	ldr	r3, [pc, #120]	@ (800aa34 <gos_sysmonHandleTaskVariableDataGet+0x148>)
 800a9bc:	881b      	ldrh	r3, [r3, #0]
 800a9be:	491e      	ldr	r1, [pc, #120]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7fd fc0d 	bl	80081e0 <gos_taskGetDataByIndex>
            taskVariableDataMsg.taskVariableData.taskStackMaxUsage = taskDesc.taskStackSizeMaxUsage;
 800a9c6:	4b1c      	ldr	r3, [pc, #112]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a9c8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a9cc:	4b18      	ldr	r3, [pc, #96]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a9ce:	829a      	strh	r2, [r3, #20]
            taskVariableDataMsg.taskVariableData.taskCpuUsage      = taskDesc.taskCpuUsage;
 800a9d0:	4b19      	ldr	r3, [pc, #100]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a9d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800a9d6:	4b16      	ldr	r3, [pc, #88]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a9d8:	825a      	strh	r2, [r3, #18]
            taskVariableDataMsg.taskVariableData.taskCpuUsageMax   = taskDesc.taskCpuUsageMax;
 800a9da:	4b17      	ldr	r3, [pc, #92]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a9dc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a9e0:	4b13      	ldr	r3, [pc, #76]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a9e2:	821a      	strh	r2, [r3, #16]
            taskVariableDataMsg.taskVariableData.taskPriority      = taskDesc.taskPriority;
 800a9e4:	4b14      	ldr	r3, [pc, #80]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a9e6:	799a      	ldrb	r2, [r3, #6]
 800a9e8:	4b11      	ldr	r3, [pc, #68]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a9ea:	709a      	strb	r2, [r3, #2]
            taskVariableDataMsg.taskVariableData.taskCsCounter     = taskDesc.taskCsCounter;
 800a9ec:	4b12      	ldr	r3, [pc, #72]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a9ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9f0:	4a0f      	ldr	r2, [pc, #60]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a9f2:	f8c2 3003 	str.w	r3, [r2, #3]
            taskVariableDataMsg.taskVariableData.taskState         = taskDesc.taskState;
 800a9f6:	4b10      	ldr	r3, [pc, #64]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800a9f8:	791a      	ldrb	r2, [r3, #4]
 800a9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800a9fc:	705a      	strb	r2, [r3, #1]
            (void_t) memcpy((void_t*)&taskVariableDataMsg.taskVariableData.taskRunTime, (void_t*)&taskDesc.taskRunTime, sizeof(taskDesc.taskRunTime));
 800a9fe:	4a0c      	ldr	r2, [pc, #48]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800aa00:	4b0d      	ldr	r3, [pc, #52]	@ (800aa38 <gos_sysmonHandleTaskVariableDataGet+0x14c>)
 800aa02:	3207      	adds	r2, #7
 800aa04:	334c      	adds	r3, #76	@ 0x4c
 800aa06:	cb03      	ldmia	r3!, {r0, r1}
 800aa08:	6010      	str	r0, [r2, #0]
 800aa0a:	6051      	str	r1, [r2, #4]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	7213      	strb	r3, [r2, #8]
            taskVariableDataMsg.messageResult = GOS_SYSMON_MSG_RES_OK;
 800aa10:	4b07      	ldr	r3, [pc, #28]	@ (800aa30 <gos_sysmonHandleTaskVariableDataGet+0x144>)
 800aa12:	2228      	movs	r2, #40	@ 0x28
 800aa14:	701a      	strb	r2, [r3, #0]
            gos_sysmonSendResponse(lutIndex + 1);
 800aa16:	79fb      	ldrb	r3, [r7, #7]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff fe1f 	bl	800a660 <gos_sysmonSendResponse>
}
 800aa22:	e000      	b.n	800aa26 <gos_sysmonHandleTaskVariableDataGet+0x13a>
                    break;
 800aa24:	bf00      	nop
}
 800aa26:	bf00      	nop
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	2000b5f0 	.word	0x2000b5f0
 800aa34:	2000b5ac 	.word	0x2000b5ac
 800aa38:	2000b608 	.word	0x2000b608

0800aa3c <gos_sysmonHandleTaskModification>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleTaskModification (gos_sysmonMessageEnum_t lutIndex)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	4603      	mov	r3, r0
 800aa44:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    taskModifyResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 800aa46:	79fb      	ldrb	r3, [r7, #7]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f000 f939 	bl	800acc0 <gos_sysmonCheckMessage>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	461a      	mov	r2, r3
 800aa52:	4b63      	ldr	r3, [pc, #396]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800aa54:	701a      	strb	r2, [r3, #0]

    if (taskModifyResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 800aa56:	4b62      	ldr	r3, [pc, #392]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b28      	cmp	r3, #40	@ 0x28
 800aa5c:	f040 80b5 	bne.w	800abca <gos_sysmonHandleTaskModification+0x18e>
    {
        // Send specific task data.
        (void_t) gos_taskGetDataByIndex(taskModifyMessage.taskIndex, &taskDesc);
 800aa60:	4b60      	ldr	r3, [pc, #384]	@ (800abe4 <gos_sysmonHandleTaskModification+0x1a8>)
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	4960      	ldr	r1, [pc, #384]	@ (800abe8 <gos_sysmonHandleTaskModification+0x1ac>)
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fd fbba 	bl	80081e0 <gos_taskGetDataByIndex>

         // Perform request based on modification type.
         switch (taskModifyMessage.modificationType)
 800aa6c:	4b5d      	ldr	r3, [pc, #372]	@ (800abe4 <gos_sysmonHandleTaskModification+0x1a8>)
 800aa6e:	789b      	ldrb	r3, [r3, #2]
 800aa70:	2b4a      	cmp	r3, #74	@ 0x4a
 800aa72:	f300 80a7 	bgt.w	800abc4 <gos_sysmonHandleTaskModification+0x188>
 800aa76:	2b31      	cmp	r3, #49	@ 0x31
 800aa78:	da04      	bge.n	800aa84 <gos_sysmonHandleTaskModification+0x48>
 800aa7a:	2b0c      	cmp	r3, #12
 800aa7c:	d03e      	beq.n	800aafc <gos_sysmonHandleTaskModification+0xc0>
 800aa7e:	2b22      	cmp	r3, #34	@ 0x22
 800aa80:	d04c      	beq.n	800ab1c <gos_sysmonHandleTaskModification+0xe0>
 800aa82:	e09f      	b.n	800abc4 <gos_sysmonHandleTaskModification+0x188>
 800aa84:	3b31      	subs	r3, #49	@ 0x31
 800aa86:	2b19      	cmp	r3, #25
 800aa88:	f200 809c 	bhi.w	800abc4 <gos_sysmonHandleTaskModification+0x188>
 800aa8c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa94 <gos_sysmonHandleTaskModification+0x58>)
 800aa8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa92:	bf00      	nop
 800aa94:	0800ab3d 	.word	0x0800ab3d
 800aa98:	0800abc5 	.word	0x0800abc5
 800aa9c:	0800abc5 	.word	0x0800abc5
 800aaa0:	0800ab5d 	.word	0x0800ab5d
 800aaa4:	0800abc5 	.word	0x0800abc5
 800aaa8:	0800abc5 	.word	0x0800abc5
 800aaac:	0800abc5 	.word	0x0800abc5
 800aab0:	0800abc5 	.word	0x0800abc5
 800aab4:	0800abc5 	.word	0x0800abc5
 800aab8:	0800abc5 	.word	0x0800abc5
 800aabc:	0800abc5 	.word	0x0800abc5
 800aac0:	0800abc5 	.word	0x0800abc5
 800aac4:	0800abc5 	.word	0x0800abc5
 800aac8:	0800abc5 	.word	0x0800abc5
 800aacc:	0800ab85 	.word	0x0800ab85
 800aad0:	0800abc5 	.word	0x0800abc5
 800aad4:	0800abc5 	.word	0x0800abc5
 800aad8:	0800abc5 	.word	0x0800abc5
 800aadc:	0800abc5 	.word	0x0800abc5
 800aae0:	0800abc5 	.word	0x0800abc5
 800aae4:	0800abc5 	.word	0x0800abc5
 800aae8:	0800abc5 	.word	0x0800abc5
 800aaec:	0800abc5 	.word	0x0800abc5
 800aaf0:	0800abc5 	.word	0x0800abc5
 800aaf4:	0800abc5 	.word	0x0800abc5
 800aaf8:	0800aba5 	.word	0x0800aba5
         {
             case GOS_SYSMON_TASK_MOD_TYPE_SUSPEND:
             {
                 if (gos_taskSuspend(taskDesc.taskId) == GOS_SUCCESS)
 800aafc:	4b3a      	ldr	r3, [pc, #232]	@ (800abe8 <gos_sysmonHandleTaskModification+0x1ac>)
 800aafe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fc f9af 	bl	8006e64 <gos_taskSuspend>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b55      	cmp	r3, #85	@ 0x55
 800ab0a:	d103      	bne.n	800ab14 <gos_sysmonHandleTaskModification+0xd8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800ab0c:	4b34      	ldr	r3, [pc, #208]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800ab0e:	2228      	movs	r2, #40	@ 0x28
 800ab10:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800ab12:	e05a      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800ab14:	4b32      	ldr	r3, [pc, #200]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800ab16:	2263      	movs	r2, #99	@ 0x63
 800ab18:	701a      	strb	r2, [r3, #0]
                 break;
 800ab1a:	e056      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_RESUME:
             {
                 if (gos_taskResume(taskDesc.taskId) == GOS_SUCCESS)
 800ab1c:	4b32      	ldr	r3, [pc, #200]	@ (800abe8 <gos_sysmonHandleTaskModification+0x1ac>)
 800ab1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7fc fac1 	bl	80070a8 <gos_taskResume>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b55      	cmp	r3, #85	@ 0x55
 800ab2a:	d103      	bne.n	800ab34 <gos_sysmonHandleTaskModification+0xf8>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800ab2c:	4b2c      	ldr	r3, [pc, #176]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800ab2e:	2228      	movs	r2, #40	@ 0x28
 800ab30:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800ab32:	e04a      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800ab34:	4b2a      	ldr	r3, [pc, #168]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800ab36:	2263      	movs	r2, #99	@ 0x63
 800ab38:	701a      	strb	r2, [r3, #0]
                 break;
 800ab3a:	e046      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_DELETE:
             {
                 if (gos_taskDelete(taskDesc.taskId) == GOS_SUCCESS)
 800ab3c:	4b2a      	ldr	r3, [pc, #168]	@ (800abe8 <gos_sysmonHandleTaskModification+0x1ac>)
 800ab3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fc fd5b 	bl	80075fc <gos_taskDelete>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b55      	cmp	r3, #85	@ 0x55
 800ab4a:	d103      	bne.n	800ab54 <gos_sysmonHandleTaskModification+0x118>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800ab4c:	4b24      	ldr	r3, [pc, #144]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800ab4e:	2228      	movs	r2, #40	@ 0x28
 800ab50:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800ab52:	e03a      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800ab54:	4b22      	ldr	r3, [pc, #136]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800ab56:	2263      	movs	r2, #99	@ 0x63
 800ab58:	701a      	strb	r2, [r3, #0]
                 break;
 800ab5a:	e036      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_BLOCK:
             {
                 if (gos_taskBlock(taskDesc.taskId, taskModifyMessage.param) == GOS_SUCCESS)
 800ab5c:	4b22      	ldr	r3, [pc, #136]	@ (800abe8 <gos_sysmonHandleTaskModification+0x1ac>)
 800ab5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab60:	4a20      	ldr	r2, [pc, #128]	@ (800abe4 <gos_sysmonHandleTaskModification+0x1a8>)
 800ab62:	f8d2 2003 	ldr.w	r2, [r2, #3]
 800ab66:	4611      	mov	r1, r2
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fc fb4b 	bl	8007204 <gos_taskBlock>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2b55      	cmp	r3, #85	@ 0x55
 800ab72:	d103      	bne.n	800ab7c <gos_sysmonHandleTaskModification+0x140>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800ab74:	4b1a      	ldr	r3, [pc, #104]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800ab76:	2228      	movs	r2, #40	@ 0x28
 800ab78:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800ab7a:	e026      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800ab7c:	4b18      	ldr	r3, [pc, #96]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800ab7e:	2263      	movs	r2, #99	@ 0x63
 800ab80:	701a      	strb	r2, [r3, #0]
                 break;
 800ab82:	e022      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_UNBLOCK:
             {
                 if (gos_taskUnblock(taskDesc.taskId) == GOS_SUCCESS)
 800ab84:	4b18      	ldr	r3, [pc, #96]	@ (800abe8 <gos_sysmonHandleTaskModification+0x1ac>)
 800ab86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fc fc4d 	bl	8007428 <gos_taskUnblock>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b55      	cmp	r3, #85	@ 0x55
 800ab92:	d103      	bne.n	800ab9c <gos_sysmonHandleTaskModification+0x160>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800ab94:	4b12      	ldr	r3, [pc, #72]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800ab96:	2228      	movs	r2, #40	@ 0x28
 800ab98:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800ab9a:	e016      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800ab9c:	4b10      	ldr	r3, [pc, #64]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800ab9e:	2263      	movs	r2, #99	@ 0x63
 800aba0:	701a      	strb	r2, [r3, #0]
                 break;
 800aba2:	e012      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
             }
             case GOS_SYSMON_TASK_MOD_TYPE_WAKEUP:
             {
                 if (gos_taskWakeup(taskDesc.taskId) == GOS_SUCCESS)
 800aba4:	4b10      	ldr	r3, [pc, #64]	@ (800abe8 <gos_sysmonHandleTaskModification+0x1ac>)
 800aba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fc f895 	bl	8006cd8 <gos_taskWakeup>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b55      	cmp	r3, #85	@ 0x55
 800abb2:	d103      	bne.n	800abbc <gos_sysmonHandleTaskModification+0x180>
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800abb4:	4b0a      	ldr	r3, [pc, #40]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800abb6:	2228      	movs	r2, #40	@ 0x28
 800abb8:	701a      	strb	r2, [r3, #0]
                 }
                 else
                 {
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
                 }
                 break;
 800abba:	e006      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
                     taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800abbc:	4b08      	ldr	r3, [pc, #32]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800abbe:	2263      	movs	r2, #99	@ 0x63
 800abc0:	701a      	strb	r2, [r3, #0]
                 break;
 800abc2:	e002      	b.n	800abca <gos_sysmonHandleTaskModification+0x18e>
             }
             default:
             {
                 taskModifyResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800abc4:	4b06      	ldr	r3, [pc, #24]	@ (800abe0 <gos_sysmonHandleTaskModification+0x1a4>)
 800abc6:	2263      	movs	r2, #99	@ 0x63
 800abc8:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 800abca:	79fb      	ldrb	r3, [r7, #7]
 800abcc:	3301      	adds	r3, #1
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff fd45 	bl	800a660 <gos_sysmonSendResponse>
}
 800abd6:	bf00      	nop
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	2000b67c 	.word	0x2000b67c
 800abe4:	2000b674 	.word	0x2000b674
 800abe8:	2000b608 	.word	0x2000b608

0800abec <gos_sysmonHandleSysRuntimeGet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSysRuntimeGet (gos_sysmonMessageEnum_t lutIndex)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysRuntimeGetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 f861 	bl	800acc0 <gos_sysmonCheckMessage>
 800abfe:	4603      	mov	r3, r0
 800ac00:	461a      	mov	r2, r3
 800ac02:	4b0e      	ldr	r3, [pc, #56]	@ (800ac3c <gos_sysmonHandleSysRuntimeGet+0x50>)
 800ac04:	701a      	strb	r2, [r3, #0]

    if (sysRuntimeGetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 800ac06:	4b0d      	ldr	r3, [pc, #52]	@ (800ac3c <gos_sysmonHandleSysRuntimeGet+0x50>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	2b28      	cmp	r3, #40	@ 0x28
 800ac0c:	d10c      	bne.n	800ac28 <gos_sysmonHandleSysRuntimeGet+0x3c>
    {
        if (gos_runTimeGet(&sysRuntimeGetResultMessage.sysRuntime) == GOS_SUCCESS)
 800ac0e:	480c      	ldr	r0, [pc, #48]	@ (800ac40 <gos_sysmonHandleSysRuntimeGet+0x54>)
 800ac10:	f000 f8d8 	bl	800adc4 <gos_runTimeGet>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b55      	cmp	r3, #85	@ 0x55
 800ac18:	d103      	bne.n	800ac22 <gos_sysmonHandleSysRuntimeGet+0x36>
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800ac1a:	4b08      	ldr	r3, [pc, #32]	@ (800ac3c <gos_sysmonHandleSysRuntimeGet+0x50>)
 800ac1c:	2228      	movs	r2, #40	@ 0x28
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	e002      	b.n	800ac28 <gos_sysmonHandleSysRuntimeGet+0x3c>
        }
        else
        {
            sysRuntimeGetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800ac22:	4b06      	ldr	r3, [pc, #24]	@ (800ac3c <gos_sysmonHandleSysRuntimeGet+0x50>)
 800ac24:	2263      	movs	r2, #99	@ 0x63
 800ac26:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 800ac28:	79fb      	ldrb	r3, [r7, #7]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7ff fd16 	bl	800a660 <gos_sysmonSendResponse>
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	2000b680 	.word	0x2000b680
 800ac40:	2000b681 	.word	0x2000b681

0800ac44 <gos_sysmonHandleSystimeSet>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleSystimeSet (gos_sysmonMessageEnum_t lutIndex)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    sysTimeSetResultMessage.messageResult = gos_sysmonCheckMessage(lutIndex);
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 f835 	bl	800acc0 <gos_sysmonCheckMessage>
 800ac56:	4603      	mov	r3, r0
 800ac58:	461a      	mov	r2, r3
 800ac5a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac94 <gos_sysmonHandleSystimeSet+0x50>)
 800ac5c:	701a      	strb	r2, [r3, #0]

    if (sysTimeSetResultMessage.messageResult == GOS_SYSMON_MSG_RES_OK)
 800ac5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac94 <gos_sysmonHandleSystimeSet+0x50>)
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	2b28      	cmp	r3, #40	@ 0x28
 800ac64:	d10c      	bne.n	800ac80 <gos_sysmonHandleSystimeSet+0x3c>
    {
        if (gos_timeSet(&sysTimeSetMessage.desiredSystemTime) == GOS_SUCCESS)
 800ac66:	480c      	ldr	r0, [pc, #48]	@ (800ac98 <gos_sysmonHandleSystimeSet+0x54>)
 800ac68:	f000 f890 	bl	800ad8c <gos_timeSet>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b55      	cmp	r3, #85	@ 0x55
 800ac70:	d103      	bne.n	800ac7a <gos_sysmonHandleSystimeSet+0x36>
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_OK;
 800ac72:	4b08      	ldr	r3, [pc, #32]	@ (800ac94 <gos_sysmonHandleSystimeSet+0x50>)
 800ac74:	2228      	movs	r2, #40	@ 0x28
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	e002      	b.n	800ac80 <gos_sysmonHandleSystimeSet+0x3c>
        }
        else
        {
            sysTimeSetResultMessage.messageResult = GOS_SYSMON_MSG_RES_ERROR;
 800ac7a:	4b06      	ldr	r3, [pc, #24]	@ (800ac94 <gos_sysmonHandleSystimeSet+0x50>)
 800ac7c:	2263      	movs	r2, #99	@ 0x63
 800ac7e:	701a      	strb	r2, [r3, #0]
    else
    {
        // Message error.
    }

    gos_sysmonSendResponse(lutIndex + 1);
 800ac80:	79fb      	ldrb	r3, [r7, #7]
 800ac82:	3301      	adds	r3, #1
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7ff fcea 	bl	800a660 <gos_sysmonSendResponse>
}
 800ac8c:	bf00      	nop
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	2000b698 	.word	0x2000b698
 800ac98:	2000b68c 	.word	0x2000b68c

0800ac9c <gos_sysmonHandleResetRequest>:
 * @param   lutIndex : Look-up table index of the message.
 *
 * @return  -
 */
GOS_STATIC void_t gos_sysmonHandleResetRequest (gos_sysmonMessageEnum_t lutIndex)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	4603      	mov	r3, r0
 800aca4:	71fb      	strb	r3, [r7, #7]
    /*
     * Function code.
     */
    if (gos_sysmonCheckMessage(lutIndex) == GOS_SYSMON_MSG_RES_OK)
 800aca6:	79fb      	ldrb	r3, [r7, #7]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 f809 	bl	800acc0 <gos_sysmonCheckMessage>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b28      	cmp	r3, #40	@ 0x28
 800acb2:	d101      	bne.n	800acb8 <gos_sysmonHandleResetRequest+0x1c>
    {
        gos_kernelReset();
 800acb4:	f7fa fdee 	bl	8005894 <gos_kernelReset>
    }
    else
    {
        // Nothing to do.
    }
}
 800acb8:	bf00      	nop
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <gos_sysmonCheckMessage>:
 * @retval  GOS_SYSMON_MSG_RES_OK          : Message OK.
 * @retval  GOS_SYSMON_MSG_INV_PV          : Invalid protocol version.
 * @retval  GOS_SYSMON_MSG_INV_PAYLOAD_CRC : Payload CRC mismatch.
 */
GOS_STATIC gos_sysmonMessageResult_t gos_sysmonCheckMessage (gos_sysmonMessageEnum_t lutIndex)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	4603      	mov	r3, r0
 800acc8:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_sysmonMessageResult_t result = GOS_SYSMON_MSG_RES_OK;
 800acca:	2328      	movs	r3, #40	@ 0x28
 800accc:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Check if there is a payload to be copied.
    if (sysmonLut[lutIndex].pMessagePayload != NULL)
 800acce:	79fb      	ldrb	r3, [r7, #7]
 800acd0:	4a0d      	ldr	r2, [pc, #52]	@ (800ad08 <gos_sysmonCheckMessage+0x48>)
 800acd2:	011b      	lsls	r3, r3, #4
 800acd4:	4413      	add	r3, r2
 800acd6:	3304      	adds	r3, #4
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00f      	beq.n	800acfe <gos_sysmonCheckMessage+0x3e>
    {
        (void_t) memcpy(sysmonLut[lutIndex].pMessagePayload, (void_t*)receiveBuffer, sysmonLut[lutIndex].payloadSize);
 800acde:	79fb      	ldrb	r3, [r7, #7]
 800ace0:	4a09      	ldr	r2, [pc, #36]	@ (800ad08 <gos_sysmonCheckMessage+0x48>)
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	4413      	add	r3, r2
 800ace6:	3304      	adds	r3, #4
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	79fb      	ldrb	r3, [r7, #7]
 800acec:	4a06      	ldr	r2, [pc, #24]	@ (800ad08 <gos_sysmonCheckMessage+0x48>)
 800acee:	011b      	lsls	r3, r3, #4
 800acf0:	4413      	add	r3, r2
 800acf2:	3308      	adds	r3, #8
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	4904      	ldr	r1, [pc, #16]	@ (800ad0c <gos_sysmonCheckMessage+0x4c>)
 800acfa:	f001 f9c9 	bl	800c090 <memcpy>
    else
    {
        // Nothing to do.
    }

    return result;
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	0800de88 	.word	0x0800de88
 800ad0c:	2000a5a4 	.word	0x2000a5a4

0800ad10 <gos_timeInit>:

/*
 * Function: gos_timeInit
 */
gos_result_t gos_timeInit (void_t)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t timeInitResult = GOS_SUCCESS;
 800ad16:	2355      	movs	r3, #85	@ 0x55
 800ad18:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    if (gos_signalCreate(&timeSignalId)                          != GOS_SUCCESS ||
 800ad1a:	480a      	ldr	r0, [pc, #40]	@ (800ad44 <gos_timeInit+0x34>)
 800ad1c:	f7ff fa82 	bl	800a224 <gos_signalCreate>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b55      	cmp	r3, #85	@ 0x55
 800ad24:	d106      	bne.n	800ad34 <gos_timeInit+0x24>
        gos_taskRegister(&timeDaemonTaskDesc, &timeDaemonTaskId) != GOS_SUCCESS
 800ad26:	4908      	ldr	r1, [pc, #32]	@ (800ad48 <gos_timeInit+0x38>)
 800ad28:	4808      	ldr	r0, [pc, #32]	@ (800ad4c <gos_timeInit+0x3c>)
 800ad2a:	f7fb fdb1 	bl	8006890 <gos_taskRegister>
 800ad2e:	4603      	mov	r3, r0
    if (gos_signalCreate(&timeSignalId)                          != GOS_SUCCESS ||
 800ad30:	2b55      	cmp	r3, #85	@ 0x55
 800ad32:	d001      	beq.n	800ad38 <gos_timeInit+0x28>
        )
    {
        timeInitResult = GOS_ERROR;
 800ad34:	23ae      	movs	r3, #174	@ 0xae
 800ad36:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return timeInitResult;
 800ad38:	79fb      	ldrb	r3, [r7, #7]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	2000b748 	.word	0x2000b748
 800ad48:	2000b746 	.word	0x2000b746
 800ad4c:	20001910 	.word	0x20001910

0800ad50 <gos_timeGet>:

/*
 * Function: gos_timeGet
 */
gos_result_t gos_timeGet (gos_time_t* pTime)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeGetResult = GOS_ERROR;
 800ad58:	23ae      	movs	r3, #174	@ 0xae
 800ad5a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00a      	beq.n	800ad78 <gos_timeGet+0x28>
    {
        (void_t) memcpy((void_t*)pTime, (GOS_CONST void_t*)&systemTime, sizeof(systemTime));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4908      	ldr	r1, [pc, #32]	@ (800ad88 <gos_timeGet+0x38>)
 800ad66:	461a      	mov	r2, r3
 800ad68:	460b      	mov	r3, r1
 800ad6a:	cb03      	ldmia	r3!, {r0, r1}
 800ad6c:	6010      	str	r0, [r2, #0]
 800ad6e:	6051      	str	r1, [r2, #4]
 800ad70:	881b      	ldrh	r3, [r3, #0]
 800ad72:	8113      	strh	r3, [r2, #8]

        timeGetResult = GOS_SUCCESS;
 800ad74:	2355      	movs	r3, #85	@ 0x55
 800ad76:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeGetResult;
 800ad78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	20001904 	.word	0x20001904

0800ad8c <gos_timeSet>:

/*
 * Function: gos_timeSet
 */
gos_result_t gos_timeSet (gos_time_t* pTime)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timeSetResult = GOS_ERROR;
 800ad94:	23ae      	movs	r3, #174	@ 0xae
 800ad96:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d008      	beq.n	800adb0 <gos_timeSet+0x24>
    {
        (void_t) memcpy((void_t*)&systemTime, (GOS_CONST void_t*)pTime, sizeof(*pTime));
 800ad9e:	4b08      	ldr	r3, [pc, #32]	@ (800adc0 <gos_timeSet+0x34>)
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	6810      	ldr	r0, [r2, #0]
 800ada4:	6851      	ldr	r1, [r2, #4]
 800ada6:	c303      	stmia	r3!, {r0, r1}
 800ada8:	8912      	ldrh	r2, [r2, #8]
 800adaa:	801a      	strh	r2, [r3, #0]

        timeSetResult = GOS_SUCCESS;
 800adac:	2355      	movs	r3, #85	@ 0x55
 800adae:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeSetResult;
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	20001904 	.word	0x20001904

0800adc4 <gos_runTimeGet>:

/*
 * Function: gos_runTimeGet
 */
gos_result_t gos_runTimeGet (gos_runtime_t* pRunTime)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t runtimeGetResult = GOS_ERROR;
 800adcc:	23ae      	movs	r3, #174	@ 0xae
 800adce:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00a      	beq.n	800adec <gos_runTimeGet+0x28>
    {
        (void_t) memcpy((void_t*)pRunTime, (void_t*)&systemRunTime, sizeof(systemRunTime));
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4908      	ldr	r1, [pc, #32]	@ (800adfc <gos_runTimeGet+0x38>)
 800adda:	461a      	mov	r2, r3
 800addc:	460b      	mov	r3, r1
 800adde:	cb03      	ldmia	r3!, {r0, r1}
 800ade0:	6010      	str	r0, [r2, #0]
 800ade2:	6051      	str	r1, [r2, #4]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	7213      	strb	r3, [r2, #8]

        runtimeGetResult = GOS_SUCCESS;
 800ade8:	2355      	movs	r3, #85	@ 0x55
 800adea:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeGetResult;
 800adec:	7bfb      	ldrb	r3, [r7, #15]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	2000b73c 	.word	0x2000b73c

0800ae00 <gos_timeAddMilliseconds>:

/*
 * Function: gos_timeAddMilliseconds
 */
gos_result_t gos_timeAddMilliseconds (gos_time_t* pTime, u16_t milliseconds)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t timeAddMillisecondsResult = GOS_ERROR;
 800ae0c:	23ae      	movs	r3, #174	@ 0xae
 800ae0e:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pTime != NULL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 80e4 	beq.w	800afe0 <gos_timeAddMilliseconds+0x1e0>
    {
        // 1. Raw increment.
        pTime->milliseconds += milliseconds;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	881b      	ldrh	r3, [r3, #0]
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	887b      	ldrh	r3, [r7, #2]
 800ae20:	4413      	add	r3, r2
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pTime->milliseconds >= 1000u)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	881b      	ldrh	r3, [r3, #0]
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae32:	f0c0 80d3 	bcc.w	800afdc <gos_timeAddMilliseconds+0x1dc>
        {
            pTime->seconds += pTime->milliseconds / 1000u;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	789a      	ldrb	r2, [r3, #2]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	496b      	ldr	r1, [pc, #428]	@ (800aff0 <gos_timeAddMilliseconds+0x1f0>)
 800ae42:	fba1 1303 	umull	r1, r3, r1, r3
 800ae46:	099b      	lsrs	r3, r3, #6
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	4413      	add	r3, r2
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	709a      	strb	r2, [r3, #2]
            pTime->milliseconds %= 1000u;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	4a65      	ldr	r2, [pc, #404]	@ (800aff0 <gos_timeAddMilliseconds+0x1f0>)
 800ae5c:	fba2 1203 	umull	r1, r2, r2, r3
 800ae60:	0992      	lsrs	r2, r2, #6
 800ae62:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ae66:	fb01 f202 	mul.w	r2, r1, r2
 800ae6a:	1a9b      	subs	r3, r3, r2
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	801a      	strh	r2, [r3, #0]

            if (pTime->seconds >= 60u)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	789b      	ldrb	r3, [r3, #2]
 800ae76:	2b3b      	cmp	r3, #59	@ 0x3b
 800ae78:	f240 80b0 	bls.w	800afdc <gos_timeAddMilliseconds+0x1dc>
            {
                pTime->minutes += pTime->seconds / 60u;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	78da      	ldrb	r2, [r3, #3]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	789b      	ldrb	r3, [r3, #2]
 800ae84:	495b      	ldr	r1, [pc, #364]	@ (800aff4 <gos_timeAddMilliseconds+0x1f4>)
 800ae86:	fba1 1303 	umull	r1, r3, r1, r3
 800ae8a:	095b      	lsrs	r3, r3, #5
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	4413      	add	r3, r2
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	70da      	strb	r2, [r3, #3]
                pTime->seconds %= 60u;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	789a      	ldrb	r2, [r3, #2]
 800ae9a:	4b56      	ldr	r3, [pc, #344]	@ (800aff4 <gos_timeAddMilliseconds+0x1f4>)
 800ae9c:	fba3 1302 	umull	r1, r3, r3, r2
 800aea0:	0959      	lsrs	r1, r3, #5
 800aea2:	460b      	mov	r3, r1
 800aea4:	011b      	lsls	r3, r3, #4
 800aea6:	1a5b      	subs	r3, r3, r1
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	709a      	strb	r2, [r3, #2]

                if (pTime->minutes >= 60u)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	78db      	ldrb	r3, [r3, #3]
 800aeb6:	2b3b      	cmp	r3, #59	@ 0x3b
 800aeb8:	f240 8090 	bls.w	800afdc <gos_timeAddMilliseconds+0x1dc>
                {
                    pTime->hours += pTime->minutes / 60u;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	791a      	ldrb	r2, [r3, #4]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	78db      	ldrb	r3, [r3, #3]
 800aec4:	494b      	ldr	r1, [pc, #300]	@ (800aff4 <gos_timeAddMilliseconds+0x1f4>)
 800aec6:	fba1 1303 	umull	r1, r3, r1, r3
 800aeca:	095b      	lsrs	r3, r3, #5
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	4413      	add	r3, r2
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	711a      	strb	r2, [r3, #4]
                    pTime->minutes %= 60u;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	78da      	ldrb	r2, [r3, #3]
 800aeda:	4b46      	ldr	r3, [pc, #280]	@ (800aff4 <gos_timeAddMilliseconds+0x1f4>)
 800aedc:	fba3 1302 	umull	r1, r3, r3, r2
 800aee0:	0959      	lsrs	r1, r3, #5
 800aee2:	460b      	mov	r3, r1
 800aee4:	011b      	lsls	r3, r3, #4
 800aee6:	1a5b      	subs	r3, r3, r1
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	b2da      	uxtb	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	70da      	strb	r2, [r3, #3]

                    if (pTime->hours >= 24u)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	791b      	ldrb	r3, [r3, #4]
 800aef6:	2b17      	cmp	r3, #23
 800aef8:	d970      	bls.n	800afdc <gos_timeAddMilliseconds+0x1dc>
                    {
                        pTime->days += pTime->hours / 24u;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800af00:	b29b      	uxth	r3, r3
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	7912      	ldrb	r2, [r2, #4]
 800af06:	493c      	ldr	r1, [pc, #240]	@ (800aff8 <gos_timeAddMilliseconds+0x1f8>)
 800af08:	fba1 1202 	umull	r1, r2, r1, r2
 800af0c:	0912      	lsrs	r2, r2, #4
 800af0e:	b2d2      	uxtb	r2, r2
 800af10:	4413      	add	r3, r2
 800af12:	b29a      	uxth	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8a3 2005 	strh.w	r2, [r3, #5]
                        pTime->hours %= 24u;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	791a      	ldrb	r2, [r3, #4]
 800af1e:	4b36      	ldr	r3, [pc, #216]	@ (800aff8 <gos_timeAddMilliseconds+0x1f8>)
 800af20:	fba3 1302 	umull	r1, r3, r3, r2
 800af24:	0919      	lsrs	r1, r3, #4
 800af26:	460b      	mov	r3, r1
 800af28:	005b      	lsls	r3, r3, #1
 800af2a:	440b      	add	r3, r1
 800af2c:	00db      	lsls	r3, r3, #3
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	b2da      	uxtb	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	711a      	strb	r2, [r3, #4]

                        // Check days.
                        if (pTime->years % 4 == 0  && pTime->months == GOS_TIME_FEBRUARY && pTime->days >= 30)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	891b      	ldrh	r3, [r3, #8]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	f003 0303 	and.w	r3, r3, #3
 800af40:	b29b      	uxth	r3, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d117      	bne.n	800af76 <gos_timeAddMilliseconds+0x176>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	79db      	ldrb	r3, [r3, #7]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d113      	bne.n	800af76 <gos_timeAddMilliseconds+0x176>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800af54:	b29b      	uxth	r3, r3
 800af56:	2b1d      	cmp	r3, #29
 800af58:	d90d      	bls.n	800af76 <gos_timeAddMilliseconds+0x176>
                        {
                            pTime->days = 1u;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f042 0201 	orr.w	r2, r2, #1
 800af62:	715a      	strb	r2, [r3, #5]
 800af64:	2200      	movs	r2, #0
 800af66:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	79db      	ldrb	r3, [r3, #7]
 800af6c:	3301      	adds	r3, #1
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	71da      	strb	r2, [r3, #7]
 800af74:	e024      	b.n	800afc0 <gos_timeAddMilliseconds+0x1c0>
                        }
                        else if (pTime->years % 4 == 0 && pTime->months == GOS_TIME_FEBRUARY)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	891b      	ldrh	r3, [r3, #8]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	f003 0303 	and.w	r3, r3, #3
 800af80:	b29b      	uxth	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d103      	bne.n	800af8e <gos_timeAddMilliseconds+0x18e>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	79db      	ldrb	r3, [r3, #7]
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d018      	beq.n	800afc0 <gos_timeAddMilliseconds+0x1c0>
                        {
                            // Wait.
                        }
                        else if (pTime->days >= (dayLookupTable[pTime->months - 1] + 1))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	79db      	ldrb	r3, [r3, #7]
 800af92:	3b01      	subs	r3, #1
 800af94:	4a19      	ldr	r2, [pc, #100]	@ (800affc <gos_timeAddMilliseconds+0x1fc>)
 800af96:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d20c      	bcs.n	800afc0 <gos_timeAddMilliseconds+0x1c0>
                        {
                            pTime->days = 1u;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f042 0201 	orr.w	r2, r2, #1
 800afae:	715a      	strb	r2, [r3, #5]
 800afb0:	2200      	movs	r2, #0
 800afb2:	719a      	strb	r2, [r3, #6]
                            pTime->months++;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	79db      	ldrb	r3, [r3, #7]
 800afb8:	3301      	adds	r3, #1
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	71da      	strb	r2, [r3, #7]
                        {
                            // Nothing to do.
                        }

                        // Check months.
                        if (pTime->months == 13)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	79db      	ldrb	r3, [r3, #7]
 800afc4:	2b0d      	cmp	r3, #13
 800afc6:	d109      	bne.n	800afdc <gos_timeAddMilliseconds+0x1dc>
                        {
                            pTime->months = 1;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	71da      	strb	r2, [r3, #7]
                            pTime->years++;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	891b      	ldrh	r3, [r3, #8]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	3301      	adds	r3, #1
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	811a      	strh	r2, [r3, #8]
            {
                // Nothing to do.
            }
        }

        timeAddMillisecondsResult = GOS_SUCCESS;
 800afdc:	2355      	movs	r3, #85	@ 0x55
 800afde:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timeAddMillisecondsResult;
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3714      	adds	r7, #20
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	10624dd3 	.word	0x10624dd3
 800aff4:	88888889 	.word	0x88888889
 800aff8:	aaaaaaab 	.word	0xaaaaaaab
 800affc:	0800df88 	.word	0x0800df88

0800b000 <gos_runTimeAddMicroseconds>:

/*
 * Function: gos_runTimeAddMicroseconds
 */
gos_result_t gos_runTimeAddMicroseconds (gos_runtime_t* pRunTime1, gos_runtime_t* pRunTime2, u16_t microseconds)
{
 800b000:	b480      	push	{r7}
 800b002:	b087      	sub	sp, #28
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	4613      	mov	r3, r2
 800b00c:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMicrosecondsResult = GOS_ERROR;
 800b00e:	23ae      	movs	r3, #174	@ 0xae
 800b010:	75fb      	strb	r3, [r7, #23]

    /*
     * Function code.
     */
    if (pRunTime1 != NULL)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d063      	beq.n	800b0e0 <gos_runTimeAddMicroseconds+0xe0>
    {
        // 1. Raw increment.
        pRunTime1->microseconds += microseconds;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	88fb      	ldrh	r3, [r7, #6]
 800b020:	4413      	add	r3, r2
 800b022:	b29a      	uxth	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime1->microseconds >= 1000u)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	881b      	ldrh	r3, [r3, #0]
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b032:	d355      	bcc.n	800b0e0 <gos_runTimeAddMicroseconds+0xe0>
        {
            pRunTime1->microseconds -= 1000u;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800b03e:	b29a      	uxth	r2, r3
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	801a      	strh	r2, [r3, #0]
            pRunTime1->milliseconds += 1u;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	885b      	ldrh	r3, [r3, #2]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	3301      	adds	r3, #1
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	805a      	strh	r2, [r3, #2]

            if (pRunTime1->milliseconds >= 1000u)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	885b      	ldrh	r3, [r3, #2]
 800b056:	b29b      	uxth	r3, r3
 800b058:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b05c:	d340      	bcc.n	800b0e0 <gos_runTimeAddMicroseconds+0xe0>
            {
                pRunTime1->milliseconds -= 1000u;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	885b      	ldrh	r3, [r3, #2]
 800b062:	b29b      	uxth	r3, r3
 800b064:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800b068:	b29a      	uxth	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	805a      	strh	r2, [r3, #2]
                pRunTime1->seconds += 1u;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	791b      	ldrb	r3, [r3, #4]
 800b072:	3301      	adds	r3, #1
 800b074:	b2da      	uxtb	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	711a      	strb	r2, [r3, #4]

                if (pRunTime1->seconds >= 60u)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	791b      	ldrb	r3, [r3, #4]
 800b07e:	2b3b      	cmp	r3, #59	@ 0x3b
 800b080:	d92e      	bls.n	800b0e0 <gos_runTimeAddMicroseconds+0xe0>
                {
                    pRunTime1->seconds -= 60u;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	791b      	ldrb	r3, [r3, #4]
 800b086:	3b3c      	subs	r3, #60	@ 0x3c
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	711a      	strb	r2, [r3, #4]
                    pRunTime1->minutes += 1u;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	795b      	ldrb	r3, [r3, #5]
 800b092:	3301      	adds	r3, #1
 800b094:	b2da      	uxtb	r2, r3
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	715a      	strb	r2, [r3, #5]

                    if (pRunTime1->minutes >= 60u)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	795b      	ldrb	r3, [r3, #5]
 800b09e:	2b3b      	cmp	r3, #59	@ 0x3b
 800b0a0:	d91e      	bls.n	800b0e0 <gos_runTimeAddMicroseconds+0xe0>
                    {
                        pRunTime1->minutes -= 60u;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	795b      	ldrb	r3, [r3, #5]
 800b0a6:	3b3c      	subs	r3, #60	@ 0x3c
 800b0a8:	b2da      	uxtb	r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	715a      	strb	r2, [r3, #5]
                        pRunTime1->hours += 1u;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	799b      	ldrb	r3, [r3, #6]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	719a      	strb	r2, [r3, #6]

                        if (pRunTime1->hours >= 24u)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	799b      	ldrb	r3, [r3, #6]
 800b0be:	2b17      	cmp	r3, #23
 800b0c0:	d90e      	bls.n	800b0e0 <gos_runTimeAddMicroseconds+0xe0>
                        {
                            pRunTime1->hours -= 24u;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	799b      	ldrb	r3, [r3, #6]
 800b0c6:	3b18      	subs	r3, #24
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	719a      	strb	r2, [r3, #6]
                            pRunTime1->days += 1u;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    if (pRunTime2 != NULL)
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d063      	beq.n	800b1ae <gos_runTimeAddMicroseconds+0x1ae>
    {
        // 1. Raw increment.
        pRunTime2->microseconds += microseconds;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	88fb      	ldrh	r3, [r7, #6]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	801a      	strh	r2, [r3, #0]

        // 2. Post-adjustment.
        if (pRunTime2->microseconds >= 1000u)
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	881b      	ldrh	r3, [r3, #0]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b100:	d355      	bcc.n	800b1ae <gos_runTimeAddMicroseconds+0x1ae>
        {
            pRunTime2->microseconds -= 1000u;
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	b29b      	uxth	r3, r3
 800b108:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	801a      	strh	r2, [r3, #0]
            pRunTime2->milliseconds += 1u;
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	885b      	ldrh	r3, [r3, #2]
 800b116:	b29b      	uxth	r3, r3
 800b118:	3301      	adds	r3, #1
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	805a      	strh	r2, [r3, #2]

            if (pRunTime2->milliseconds >= 1000u)
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	885b      	ldrh	r3, [r3, #2]
 800b124:	b29b      	uxth	r3, r3
 800b126:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b12a:	d340      	bcc.n	800b1ae <gos_runTimeAddMicroseconds+0x1ae>
            {
                pRunTime2->milliseconds -= 1000u;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	885b      	ldrh	r3, [r3, #2]
 800b130:	b29b      	uxth	r3, r3
 800b132:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800b136:	b29a      	uxth	r2, r3
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	805a      	strh	r2, [r3, #2]
                pRunTime2->seconds += 1u;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	791b      	ldrb	r3, [r3, #4]
 800b140:	3301      	adds	r3, #1
 800b142:	b2da      	uxtb	r2, r3
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	711a      	strb	r2, [r3, #4]

                if (pRunTime2->seconds >= 60u)
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	791b      	ldrb	r3, [r3, #4]
 800b14c:	2b3b      	cmp	r3, #59	@ 0x3b
 800b14e:	d92e      	bls.n	800b1ae <gos_runTimeAddMicroseconds+0x1ae>
                {
                    pRunTime2->seconds -= 60u;
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	791b      	ldrb	r3, [r3, #4]
 800b154:	3b3c      	subs	r3, #60	@ 0x3c
 800b156:	b2da      	uxtb	r2, r3
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	711a      	strb	r2, [r3, #4]
                    pRunTime2->minutes += 1u;
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	795b      	ldrb	r3, [r3, #5]
 800b160:	3301      	adds	r3, #1
 800b162:	b2da      	uxtb	r2, r3
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	715a      	strb	r2, [r3, #5]

                    if (pRunTime2->minutes >= 60u)
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	795b      	ldrb	r3, [r3, #5]
 800b16c:	2b3b      	cmp	r3, #59	@ 0x3b
 800b16e:	d91e      	bls.n	800b1ae <gos_runTimeAddMicroseconds+0x1ae>
                    {
                        pRunTime2->minutes -= 60u;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	795b      	ldrb	r3, [r3, #5]
 800b174:	3b3c      	subs	r3, #60	@ 0x3c
 800b176:	b2da      	uxtb	r2, r3
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	715a      	strb	r2, [r3, #5]
                        pRunTime2->hours += 1u;
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	799b      	ldrb	r3, [r3, #6]
 800b180:	3301      	adds	r3, #1
 800b182:	b2da      	uxtb	r2, r3
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	719a      	strb	r2, [r3, #6]

                        if (pRunTime2->hours >= 24u)
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	799b      	ldrb	r3, [r3, #6]
 800b18c:	2b17      	cmp	r3, #23
 800b18e:	d90e      	bls.n	800b1ae <gos_runTimeAddMicroseconds+0x1ae>
                        {
                            pRunTime2->hours -= 24u;
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	799b      	ldrb	r3, [r3, #6]
 800b194:	3b18      	subs	r3, #24
 800b196:	b2da      	uxtb	r2, r3
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	719a      	strb	r2, [r3, #6]
                            pRunTime2->days += 1u;
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	f8a3 2007 	strh.w	r2, [r3, #7]
    else
    {
        // Nothing to do.
    }

    runtimeAddMicrosecondsResult = GOS_SUCCESS;
 800b1ae:	2355      	movs	r3, #85	@ 0x55
 800b1b0:	75fb      	strb	r3, [r7, #23]

    return runtimeAddMicrosecondsResult;
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	371c      	adds	r7, #28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <gos_runTimeAddMilliseconds>:

/*
 * Function: gos_runTimeAddMilliseconds
 */
gos_result_t gos_runTimeAddMilliseconds (gos_runtime_t* pRunTime, u16_t milliseconds)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t runtimeAddMillisecondsResult = GOS_ERROR;
 800b1cc:	23ae      	movs	r3, #174	@ 0xae
 800b1ce:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (pRunTime != NULL)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 808e 	beq.w	800b2f4 <gos_runTimeAddMilliseconds+0x134>
    {
        // 1. Raw increment.
        pRunTime->milliseconds += milliseconds;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	885b      	ldrh	r3, [r3, #2]
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	887b      	ldrh	r3, [r7, #2]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	805a      	strh	r2, [r3, #2]

        // 2. Post-adjustment.
        if (pRunTime->milliseconds >= 1000u)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	885b      	ldrh	r3, [r3, #2]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b1f2:	d37d      	bcc.n	800b2f0 <gos_runTimeAddMilliseconds+0x130>
        {
            pRunTime->seconds += pRunTime->milliseconds / 1000u;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	791a      	ldrb	r2, [r3, #4]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	885b      	ldrh	r3, [r3, #2]
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	4941      	ldr	r1, [pc, #260]	@ (800b304 <gos_runTimeAddMilliseconds+0x144>)
 800b200:	fba1 1303 	umull	r1, r3, r1, r3
 800b204:	099b      	lsrs	r3, r3, #6
 800b206:	b29b      	uxth	r3, r3
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	4413      	add	r3, r2
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	711a      	strb	r2, [r3, #4]
            pRunTime->milliseconds %= 1000u;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	885b      	ldrh	r3, [r3, #2]
 800b216:	b29b      	uxth	r3, r3
 800b218:	4a3a      	ldr	r2, [pc, #232]	@ (800b304 <gos_runTimeAddMilliseconds+0x144>)
 800b21a:	fba2 1203 	umull	r1, r2, r2, r3
 800b21e:	0992      	lsrs	r2, r2, #6
 800b220:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b224:	fb01 f202 	mul.w	r2, r1, r2
 800b228:	1a9b      	subs	r3, r3, r2
 800b22a:	b29a      	uxth	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	805a      	strh	r2, [r3, #2]

            if (pRunTime->seconds >= 60u)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	791b      	ldrb	r3, [r3, #4]
 800b234:	2b3b      	cmp	r3, #59	@ 0x3b
 800b236:	d95b      	bls.n	800b2f0 <gos_runTimeAddMilliseconds+0x130>
            {
                pRunTime->minutes += pRunTime->seconds / 60u;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	795a      	ldrb	r2, [r3, #5]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	791b      	ldrb	r3, [r3, #4]
 800b240:	4931      	ldr	r1, [pc, #196]	@ (800b308 <gos_runTimeAddMilliseconds+0x148>)
 800b242:	fba1 1303 	umull	r1, r3, r1, r3
 800b246:	095b      	lsrs	r3, r3, #5
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	4413      	add	r3, r2
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	715a      	strb	r2, [r3, #5]
                pRunTime->seconds %= 60u;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	791a      	ldrb	r2, [r3, #4]
 800b256:	4b2c      	ldr	r3, [pc, #176]	@ (800b308 <gos_runTimeAddMilliseconds+0x148>)
 800b258:	fba3 1302 	umull	r1, r3, r3, r2
 800b25c:	0959      	lsrs	r1, r3, #5
 800b25e:	460b      	mov	r3, r1
 800b260:	011b      	lsls	r3, r3, #4
 800b262:	1a5b      	subs	r3, r3, r1
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	711a      	strb	r2, [r3, #4]

                if (pRunTime->minutes >= 60u)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	795b      	ldrb	r3, [r3, #5]
 800b272:	2b3b      	cmp	r3, #59	@ 0x3b
 800b274:	d93c      	bls.n	800b2f0 <gos_runTimeAddMilliseconds+0x130>
                {
                    pRunTime->hours += pRunTime->minutes / 60u;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	799a      	ldrb	r2, [r3, #6]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	795b      	ldrb	r3, [r3, #5]
 800b27e:	4922      	ldr	r1, [pc, #136]	@ (800b308 <gos_runTimeAddMilliseconds+0x148>)
 800b280:	fba1 1303 	umull	r1, r3, r1, r3
 800b284:	095b      	lsrs	r3, r3, #5
 800b286:	b2db      	uxtb	r3, r3
 800b288:	4413      	add	r3, r2
 800b28a:	b2da      	uxtb	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	719a      	strb	r2, [r3, #6]
                    pRunTime->minutes %= 60u;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	795a      	ldrb	r2, [r3, #5]
 800b294:	4b1c      	ldr	r3, [pc, #112]	@ (800b308 <gos_runTimeAddMilliseconds+0x148>)
 800b296:	fba3 1302 	umull	r1, r3, r3, r2
 800b29a:	0959      	lsrs	r1, r3, #5
 800b29c:	460b      	mov	r3, r1
 800b29e:	011b      	lsls	r3, r3, #4
 800b2a0:	1a5b      	subs	r3, r3, r1
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	715a      	strb	r2, [r3, #5]

                    if (pRunTime->hours >= 24u)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	799b      	ldrb	r3, [r3, #6]
 800b2b0:	2b17      	cmp	r3, #23
 800b2b2:	d91d      	bls.n	800b2f0 <gos_runTimeAddMilliseconds+0x130>
                    {
                        pRunTime->days += pRunTime->hours / 24u;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	7992      	ldrb	r2, [r2, #6]
 800b2c0:	4912      	ldr	r1, [pc, #72]	@ (800b30c <gos_runTimeAddMilliseconds+0x14c>)
 800b2c2:	fba1 1202 	umull	r1, r2, r1, r2
 800b2c6:	0912      	lsrs	r2, r2, #4
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8a3 2007 	strh.w	r2, [r3, #7]
                        pRunTime->hours %= 24u;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	799a      	ldrb	r2, [r3, #6]
 800b2d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b30c <gos_runTimeAddMilliseconds+0x14c>)
 800b2da:	fba3 1302 	umull	r1, r3, r3, r2
 800b2de:	0919      	lsrs	r1, r3, #4
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	440b      	add	r3, r1
 800b2e6:	00db      	lsls	r3, r3, #3
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	719a      	strb	r2, [r3, #6]
        else
        {
            // Nothing to do.
        }

        runtimeAddMillisecondsResult = GOS_SUCCESS;
 800b2f0:	2355      	movs	r3, #85	@ 0x55
 800b2f2:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return runtimeAddMillisecondsResult;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	10624dd3 	.word	0x10624dd3
 800b308:	88888889 	.word	0x88888889
 800b30c:	aaaaaaab 	.word	0xaaaaaaab

0800b310 <gos_timeIncreaseSystemTime>:

/*
 * Function: gos_timeIncreaseSystemTime
 */
gos_result_t gos_timeIncreaseSystemTime (u16_t milliseconds)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	80fb      	strh	r3, [r7, #6]
    /*
     * Local variables.
     */
    gos_result_t increaseSystemTimeResult = GOS_ERROR;
 800b31a:	23ae      	movs	r3, #174	@ 0xae
 800b31c:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 800b31e:	88fb      	ldrh	r3, [r7, #6]
 800b320:	4619      	mov	r1, r3
 800b322:	480a      	ldr	r0, [pc, #40]	@ (800b34c <gos_timeIncreaseSystemTime+0x3c>)
 800b324:	f7ff ff4c 	bl	800b1c0 <gos_runTimeAddMilliseconds>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b55      	cmp	r3, #85	@ 0x55
 800b32c:	d109      	bne.n	800b342 <gos_timeIncreaseSystemTime+0x32>
        gos_timeAddMilliseconds(&systemTime, milliseconds) == GOS_SUCCESS)
 800b32e:	88fb      	ldrh	r3, [r7, #6]
 800b330:	4619      	mov	r1, r3
 800b332:	4807      	ldr	r0, [pc, #28]	@ (800b350 <gos_timeIncreaseSystemTime+0x40>)
 800b334:	f7ff fd64 	bl	800ae00 <gos_timeAddMilliseconds>
 800b338:	4603      	mov	r3, r0
    if (gos_runTimeAddMilliseconds(&systemRunTime, milliseconds) == GOS_SUCCESS &&
 800b33a:	2b55      	cmp	r3, #85	@ 0x55
 800b33c:	d101      	bne.n	800b342 <gos_timeIncreaseSystemTime+0x32>
    {
        increaseSystemTimeResult = GOS_SUCCESS;
 800b33e:	2355      	movs	r3, #85	@ 0x55
 800b340:	73fb      	strb	r3, [r7, #15]
    else
    {
        // One of the operations failed.
    }

    return increaseSystemTimeResult;
 800b342:	7bfb      	ldrb	r3, [r7, #15]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	2000b73c 	.word	0x2000b73c
 800b350:	20001904 	.word	0x20001904

0800b354 <gos_timeDaemonTask>:
 *          elapsed signals.
 *
 * @return    -
 */
GOS_STATIC void_t gos_timeDaemonTask (void_t)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_time_t previousTime = {0};
 800b35a:	1d3b      	adds	r3, r7, #4
 800b35c:	2200      	movs	r2, #0
 800b35e:	601a      	str	r2, [r3, #0]
 800b360:	605a      	str	r2, [r3, #4]
 800b362:	811a      	strh	r2, [r3, #8]
     * Function code.
     */
    for (;;)
    {
        // Invoke second elapsed signal.
        if (systemTime.seconds > previousTime.seconds)
 800b364:	4b27      	ldr	r3, [pc, #156]	@ (800b404 <gos_timeDaemonTask+0xb0>)
 800b366:	789a      	ldrb	r2, [r3, #2]
 800b368:	79bb      	ldrb	r3, [r7, #6]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d905      	bls.n	800b37a <gos_timeDaemonTask+0x26>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_SECOND_ELAPSED_SENDER_ID);
 800b36e:	4b26      	ldr	r3, [pc, #152]	@ (800b408 <gos_timeDaemonTask+0xb4>)
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	2100      	movs	r1, #0
 800b374:	4618      	mov	r0, r3
 800b376:	f7fe ff93 	bl	800a2a0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke minute elapsed signal.
        if (systemTime.minutes > previousTime.minutes)
 800b37a:	4b22      	ldr	r3, [pc, #136]	@ (800b404 <gos_timeDaemonTask+0xb0>)
 800b37c:	78da      	ldrb	r2, [r3, #3]
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	429a      	cmp	r2, r3
 800b382:	d905      	bls.n	800b390 <gos_timeDaemonTask+0x3c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MINUTE_ELAPSED_SENDER_ID);
 800b384:	4b20      	ldr	r3, [pc, #128]	@ (800b408 <gos_timeDaemonTask+0xb4>)
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	2101      	movs	r1, #1
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fe ff88 	bl	800a2a0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke hour elapsed signal.
        if (systemTime.hours > previousTime.hours)
 800b390:	4b1c      	ldr	r3, [pc, #112]	@ (800b404 <gos_timeDaemonTask+0xb0>)
 800b392:	791a      	ldrb	r2, [r3, #4]
 800b394:	7a3b      	ldrb	r3, [r7, #8]
 800b396:	429a      	cmp	r2, r3
 800b398:	d905      	bls.n	800b3a6 <gos_timeDaemonTask+0x52>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_HOUR_ELAPSED_SENDER_ID);
 800b39a:	4b1b      	ldr	r3, [pc, #108]	@ (800b408 <gos_timeDaemonTask+0xb4>)
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	2102      	movs	r1, #2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fe ff7d 	bl	800a2a0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke day elapsed signal.
        if (systemTime.days > previousTime.days)
 800b3a6:	4b17      	ldr	r3, [pc, #92]	@ (800b404 <gos_timeDaemonTask+0xb0>)
 800b3a8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	f8b7 3009 	ldrh.w	r3, [r7, #9]
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d905      	bls.n	800b3c4 <gos_timeDaemonTask+0x70>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_DAY_ELAPSED_SENDER_ID);
 800b3b8:	4b13      	ldr	r3, [pc, #76]	@ (800b408 <gos_timeDaemonTask+0xb4>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2103      	movs	r1, #3
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe ff6e 	bl	800a2a0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke month elapsed signal.
        if (systemTime.months > previousTime.months)
 800b3c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b404 <gos_timeDaemonTask+0xb0>)
 800b3c6:	79da      	ldrb	r2, [r3, #7]
 800b3c8:	7afb      	ldrb	r3, [r7, #11]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d905      	bls.n	800b3da <gos_timeDaemonTask+0x86>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_MONTH_ELAPSED_SENDER_ID);
 800b3ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b408 <gos_timeDaemonTask+0xb4>)
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2104      	movs	r1, #4
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe ff63 	bl	800a2a0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Invoke year elapsed signal.
        if (systemTime.years > previousTime.years)
 800b3da:	4b0a      	ldr	r3, [pc, #40]	@ (800b404 <gos_timeDaemonTask+0xb0>)
 800b3dc:	891a      	ldrh	r2, [r3, #8]
 800b3de:	89bb      	ldrh	r3, [r7, #12]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d905      	bls.n	800b3f0 <gos_timeDaemonTask+0x9c>
        {
            (void_t) gos_signalInvoke(timeSignalId, GOS_TIME_YEAR_ELAPSED_SENDER_ID);
 800b3e4:	4b08      	ldr	r3, [pc, #32]	@ (800b408 <gos_timeDaemonTask+0xb4>)
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2105      	movs	r1, #5
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fe ff58 	bl	800a2a0 <gos_signalInvoke>
        {
            // Nothing to do.
        }

        // Initialize previous time.
        (void_t) gos_timeGet(&previousTime);
 800b3f0:	1d3b      	adds	r3, r7, #4
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7ff fcac 	bl	800ad50 <gos_timeGet>
        (void_t) gos_taskSleep(TIME_SLEEP_TIME_MS);
 800b3f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b3fc:	f7fb fbda 	bl	8006bb4 <gos_taskSleep>
        if (systemTime.seconds > previousTime.seconds)
 800b400:	e7b0      	b.n	800b364 <gos_timeDaemonTask+0x10>
 800b402:	bf00      	nop
 800b404:	20001904 	.word	0x20001904
 800b408:	2000b748 	.word	0x2000b748

0800b40c <gos_traceInit>:

/*
 * Function: gos_traceInit
 */
gos_result_t gos_traceInit (void_t)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceInitResult = GOS_SUCCESS;
 800b412:	2355      	movs	r3, #85	@ 0x55
 800b414:	71fb      	strb	r3, [r7, #7]

    /*
     * Function code.
     */
    // Create trace queue and register trace daemon task.
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 800b416:	480d      	ldr	r0, [pc, #52]	@ (800b44c <gos_traceInit+0x40>)
 800b418:	f7fe f82a 	bl	8009470 <gos_queueCreate>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b55      	cmp	r3, #85	@ 0x55
 800b420:	d10c      	bne.n	800b43c <gos_traceInit+0x30>
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 800b422:	2100      	movs	r1, #0
 800b424:	480a      	ldr	r0, [pc, #40]	@ (800b450 <gos_traceInit+0x44>)
 800b426:	f7fb fa33 	bl	8006890 <gos_taskRegister>
 800b42a:	4603      	mov	r3, r0
    if (gos_queueCreate(&traceQueue)                 != GOS_SUCCESS ||
 800b42c:	2b55      	cmp	r3, #85	@ 0x55
 800b42e:	d105      	bne.n	800b43c <gos_traceInit+0x30>
        gos_mutexInit(&traceMutex) != GOS_SUCCESS
 800b430:	4808      	ldr	r0, [pc, #32]	@ (800b454 <gos_traceInit+0x48>)
 800b432:	f7fd fe3f 	bl	80090b4 <gos_mutexInit>
 800b436:	4603      	mov	r3, r0
        gos_taskRegister(&traceDaemonTaskDesc, NULL) != GOS_SUCCESS ||
 800b438:	2b55      	cmp	r3, #85	@ 0x55
 800b43a:	d001      	beq.n	800b440 <gos_traceInit+0x34>
        )
    {
        traceInitResult = GOS_ERROR;
 800b43c:	23ae      	movs	r3, #174	@ 0xae
 800b43e:	71fb      	strb	r3, [r7, #7]
    }

    return traceInitResult;
 800b440:	79fb      	ldrb	r3, [r7, #7]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	2000197c 	.word	0x2000197c
 800b450:	20001998 	.word	0x20001998
 800b454:	2000b908 	.word	0x2000b908

0800b458 <gos_traceTrace>:

/*
 * Function: gos_traceTrace
 */
GOS_INLINE gos_result_t gos_traceTrace (bool_t addTimeStamp, char_t* traceMessage)
{
 800b458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b45a:	b0a9      	sub	sp, #164	@ 0xa4
 800b45c:	af06      	add	r7, sp, #24
 800b45e:	4603      	mov	r3, r0
 800b460:	6039      	str	r1, [r7, #0]
 800b462:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_ERROR;
 800b464:	23ae      	movs	r3, #174	@ 0xae
 800b466:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 800b46a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b46e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    gos_taskDescriptor_t     callerTaskDesc = {0};
 800b472:	f107 0318 	add.w	r3, r7, #24
 800b476:	226a      	movs	r2, #106	@ 0x6a
 800b478:	2100      	movs	r1, #0
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 fdcc 	bl	800c018 <memset>
    gos_time_t               sysTime        = {0};
 800b480:	f107 030c 	add.w	r3, r7, #12
 800b484:	2200      	movs	r2, #0
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	605a      	str	r2, [r3, #4]
 800b48a:	811a      	strh	r2, [r3, #8]
    gos_taskPrivilegeLevel_t privileges     = 0u;
 800b48c:	2300      	movs	r3, #0
 800b48e:	817b      	strh	r3, [r7, #10]

    /*
     * Function code.
     */
    if ((traceMessage                                          != NULL           ) &&
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 80e6 	beq.w	800b664 <gos_traceTrace+0x20c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800b498:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7fc fdd5 	bl	800804c <gos_taskGetCurrentId>
 800b4a2:	4603      	mov	r3, r0
    if ((traceMessage                                          != NULL           ) &&
 800b4a4:	2b55      	cmp	r3, #85	@ 0x55
 800b4a6:	f040 80dd 	bne.w	800b664 <gos_traceTrace+0x20c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800b4aa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800b4ae:	f107 0218 	add.w	r2, r7, #24
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fc fe25 	bl	8008104 <gos_taskGetData>
 800b4ba:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800b4bc:	2b55      	cmp	r3, #85	@ 0x55
 800b4be:	f040 80d1 	bne.w	800b664 <gos_traceTrace+0x20c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800b4c2:	8c3b      	ldrh	r3, [r7, #32]
 800b4c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d105      	bne.n	800b4d8 <gos_traceTrace+0x80>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800b4cc:	f7fa fec0 	bl	8006250 <gos_kernelIsCallerIsr>
 800b4d0:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800b4d2:	2b36      	cmp	r3, #54	@ 0x36
 800b4d4:	f040 80c6 	bne.w	800b664 <gos_traceTrace+0x20c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 800b4d8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b4dc:	4864      	ldr	r0, [pc, #400]	@ (800b670 <gos_traceTrace+0x218>)
 800b4de:	f7fd fe03 	bl	80090e8 <gos_mutexLock>
 800b4e2:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800b4e4:	2b55      	cmp	r3, #85	@ 0x55
 800b4e6:	f040 80bd 	bne.w	800b664 <gos_traceTrace+0x20c>
        )
    {
        // Pre-set result.
        traceResult = GOS_SUCCESS;
 800b4ea:	2355      	movs	r3, #85	@ 0x55
 800b4ec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

        if (addTimeStamp == GOS_TRUE)
 800b4f0:	79fb      	ldrb	r3, [r7, #7]
 800b4f2:	2b36      	cmp	r3, #54	@ 0x36
 800b4f4:	d137      	bne.n	800b566 <gos_traceTrace+0x10e>
        {
            traceResult &= gos_timeGet(&sysTime);
 800b4f6:	f107 030c 	add.w	r3, r7, #12
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7ff fc28 	bl	800ad50 <gos_timeGet>
 800b500:	4603      	mov	r3, r0
 800b502:	461a      	mov	r2, r3
 800b504:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800b508:	4013      	ands	r3, r2
 800b50a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 800b50e:	8abb      	ldrh	r3, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b510:	461d      	mov	r5, r3
                    sysTime.months,
 800b512:	7cfb      	ldrb	r3, [r7, #19]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b514:	461e      	mov	r6, r3
                    sysTime.days,
 800b516:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800b51a:	b29b      	uxth	r3, r3
                    sysTime.hours,
 800b51c:	7c3a      	ldrb	r2, [r7, #16]
                    sysTime.minutes,
 800b51e:	7bf9      	ldrb	r1, [r7, #15]
                    sysTime.seconds,
 800b520:	7bb8      	ldrb	r0, [r7, #14]
                    sysTime.milliseconds
 800b522:	89bc      	ldrh	r4, [r7, #12]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b524:	9404      	str	r4, [sp, #16]
 800b526:	9003      	str	r0, [sp, #12]
 800b528:	9102      	str	r1, [sp, #8]
 800b52a:	9201      	str	r2, [sp, #4]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	4633      	mov	r3, r6
 800b530:	462a      	mov	r2, r5
 800b532:	4950      	ldr	r1, [pc, #320]	@ (800b674 <gos_traceTrace+0x21c>)
 800b534:	4850      	ldr	r0, [pc, #320]	@ (800b678 <gos_traceTrace+0x220>)
 800b536:	f000 fd2f 	bl	800bf98 <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 800b53a:	4b50      	ldr	r3, [pc, #320]	@ (800b67c <gos_traceTrace+0x224>)
 800b53c:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 800b53e:	484e      	ldr	r0, [pc, #312]	@ (800b678 <gos_traceTrace+0x220>)
 800b540:	f7f4 fe58 	bl	80001f4 <strlen>
 800b544:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 800b546:	b2db      	uxtb	r3, r3
 800b548:	3301      	adds	r3, #1
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b550:	4949      	ldr	r1, [pc, #292]	@ (800b678 <gos_traceTrace+0x220>)
 800b552:	4620      	mov	r0, r4
 800b554:	f7fd ffe8 	bl	8009528 <gos_queuePut>
 800b558:	4603      	mov	r3, r0
 800b55a:	461a      	mov	r2, r3
 800b55c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800b560:	4013      	ands	r3, r2
 800b562:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        traceResult &= gos_queuePut(
 800b566:	4b45      	ldr	r3, [pc, #276]	@ (800b67c <gos_traceTrace+0x224>)
 800b568:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)traceMessage,
                strlen(traceMessage) + 1,
 800b56a:	6838      	ldr	r0, [r7, #0]
 800b56c:	f7f4 fe42 	bl	80001f4 <strlen>
 800b570:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 800b572:	b2db      	uxtb	r3, r3
 800b574:	3301      	adds	r3, #1
 800b576:	b2da      	uxtb	r2, r3
 800b578:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	4620      	mov	r0, r4
 800b580:	f7fd ffd2 	bl	8009528 <gos_queuePut>
 800b584:	4603      	mov	r3, r0
 800b586:	461a      	mov	r2, r3
 800b588:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800b58c:	4013      	ands	r3, r2
 800b58e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 800b592:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800b596:	2b55      	cmp	r3, #85	@ 0x55
 800b598:	d002      	beq.n	800b5a0 <gos_traceTrace+0x148>
        {
            traceResult = GOS_ERROR;
 800b59a:	23ae      	movs	r3, #174	@ 0xae
 800b59c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 800b5a0:	4b37      	ldr	r3, [pc, #220]	@ (800b680 <gos_traceTrace+0x228>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d108      	bne.n	800b5ba <gos_traceTrace+0x162>
 800b5a8:	b672      	cpsid	i
 800b5aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ae:	4a35      	ldr	r2, [pc, #212]	@ (800b684 <gos_traceTrace+0x22c>)
 800b5b0:	6013      	str	r3, [r2, #0]
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	4b31      	ldr	r3, [pc, #196]	@ (800b680 <gos_traceTrace+0x228>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	4b2f      	ldr	r3, [pc, #188]	@ (800b680 <gos_traceTrace+0x228>)
 800b5c4:	701a      	strb	r2, [r3, #0]
 800b5c6:	4b30      	ldr	r3, [pc, #192]	@ (800b688 <gos_traceTrace+0x230>)
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	b2da      	uxtb	r2, r3
 800b5ce:	4b2e      	ldr	r3, [pc, #184]	@ (800b688 <gos_traceTrace+0x230>)
 800b5d0:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 800b5d2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800b5d6:	f107 020a 	add.w	r2, r7, #10
 800b5da:	4611      	mov	r1, r2
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fc fc8d 	bl	8007efc <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 800b5e2:	897b      	ldrh	r3, [r7, #10]
 800b5e4:	b21b      	sxth	r3, r3
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	db13      	blt.n	800b612 <gos_traceTrace+0x1ba>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800b5ea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800b5ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fc fb1e 	bl	8007c34 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800b5f8:	4b24      	ldr	r3, [pc, #144]	@ (800b68c <gos_traceTrace+0x234>)
 800b5fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fb fd53 	bl	80070a8 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800b602:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800b606:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fc fb8a 	bl	8007d24 <gos_taskRemovePrivilege>
 800b610:	e004      	b.n	800b61c <gos_traceTrace+0x1c4>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800b612:	4b1e      	ldr	r3, [pc, #120]	@ (800b68c <gos_traceTrace+0x234>)
 800b614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b616:	4618      	mov	r0, r3
 800b618:	f7fb fd46 	bl	80070a8 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 800b61c:	4b18      	ldr	r3, [pc, #96]	@ (800b680 <gos_traceTrace+0x228>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d005      	beq.n	800b630 <gos_traceTrace+0x1d8>
 800b624:	4b16      	ldr	r3, [pc, #88]	@ (800b680 <gos_traceTrace+0x228>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	3b01      	subs	r3, #1
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	4b14      	ldr	r3, [pc, #80]	@ (800b680 <gos_traceTrace+0x228>)
 800b62e:	701a      	strb	r2, [r3, #0]
 800b630:	4b13      	ldr	r3, [pc, #76]	@ (800b680 <gos_traceTrace+0x228>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d108      	bne.n	800b64a <gos_traceTrace+0x1f2>
 800b638:	4b12      	ldr	r3, [pc, #72]	@ (800b684 <gos_traceTrace+0x22c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f383 8810 	msr	PRIMASK, r3
 800b640:	b662      	cpsie	i
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	4b0f      	ldr	r3, [pc, #60]	@ (800b688 <gos_traceTrace+0x230>)
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d005      	beq.n	800b65e <gos_traceTrace+0x206>
 800b652:	4b0d      	ldr	r3, [pc, #52]	@ (800b688 <gos_traceTrace+0x230>)
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	3b01      	subs	r3, #1
 800b658:	b2da      	uxtb	r2, r3
 800b65a:	4b0b      	ldr	r3, [pc, #44]	@ (800b688 <gos_traceTrace+0x230>)
 800b65c:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 800b65e:	4804      	ldr	r0, [pc, #16]	@ (800b670 <gos_traceTrace+0x218>)
 800b660:	f7fd fe48 	bl	80092f4 <gos_mutexUnlock>
    else
    {
        // Nothing to do.
    }

    return traceResult;
 800b664:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800b668:	4618      	mov	r0, r3
 800b66a:	378c      	adds	r7, #140	@ 0x8c
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b670:	2000b908 	.word	0x2000b908
 800b674:	0800dc00 	.word	0x0800dc00
 800b678:	2000b8dc 	.word	0x2000b8dc
 800b67c:	2000197c 	.word	0x2000197c
 800b680:	20001e9b 	.word	0x20001e9b
 800b684:	20001e9c 	.word	0x20001e9c
 800b688:	20001e99 	.word	0x20001e99
 800b68c:	20001998 	.word	0x20001998

0800b690 <gos_traceTraceFormatted>:

/*
 * Function: gos_traceTraceFormatted
 */
gos_result_t gos_traceTraceFormatted (bool_t addTimeStamp, GOS_CONST char_t* traceFormat, ...)
{
 800b690:	b40e      	push	{r1, r2, r3}
 800b692:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b694:	b0aa      	sub	sp, #168	@ 0xa8
 800b696:	af06      	add	r7, sp, #24
 800b698:	4603      	mov	r3, r0
 800b69a:	71fb      	strb	r3, [r7, #7]
    /*
     * Local variables.
     */
    gos_result_t             traceResult    = GOS_SUCCESS;
 800b69c:	2355      	movs	r3, #85	@ 0x55
 800b69e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    gos_tid_t                callerTaskId   = GOS_INVALID_TASK_ID;
 800b6a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b6a6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
    gos_taskDescriptor_t     callerTaskDesc = {0};
 800b6aa:	f107 0320 	add.w	r3, r7, #32
 800b6ae:	226a      	movs	r2, #106	@ 0x6a
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f000 fcb0 	bl	800c018 <memset>
    gos_time_t               sysTime        = {0};
 800b6b8:	f107 0314 	add.w	r3, r7, #20
 800b6bc:	2200      	movs	r2, #0
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	605a      	str	r2, [r3, #4]
 800b6c2:	811a      	strh	r2, [r3, #8]
    va_list                  args;
    gos_taskPrivilegeLevel_t privileges     = 0u;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	81fb      	strh	r3, [r7, #14]

    /*
     * Function code.
     */
    if ((traceFormat                                           != NULL           ) &&
 800b6c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 80ed 	beq.w	800b8ac <gos_traceTraceFormatted+0x21c>
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800b6d2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fc fcb8 	bl	800804c <gos_taskGetCurrentId>
 800b6dc:	4603      	mov	r3, r0
    if ((traceFormat                                           != NULL           ) &&
 800b6de:	2b55      	cmp	r3, #85	@ 0x55
 800b6e0:	f040 80e4 	bne.w	800b8ac <gos_traceTraceFormatted+0x21c>
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800b6e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800b6e8:	f107 0220 	add.w	r2, r7, #32
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fc fd08 	bl	8008104 <gos_taskGetData>
 800b6f4:	4603      	mov	r3, r0
        (gos_taskGetCurrentId(&callerTaskId)                   == GOS_SUCCESS    ) &&
 800b6f6:	2b55      	cmp	r3, #85	@ 0x55
 800b6f8:	f040 80d8 	bne.w	800b8ac <gos_traceTraceFormatted+0x21c>
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800b6fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b6fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
        (gos_taskGetData(callerTaskId, &callerTaskDesc)        == GOS_SUCCESS    ) &&
 800b702:	2b00      	cmp	r3, #0
 800b704:	d105      	bne.n	800b712 <gos_traceTraceFormatted+0x82>
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800b706:	f7fa fda3 	bl	8006250 <gos_kernelIsCallerIsr>
 800b70a:	4603      	mov	r3, r0
        (((callerTaskDesc.taskPrivilegeLevel & GOS_PRIV_TRACE) == GOS_PRIV_TRACE ) ||
 800b70c:	2b36      	cmp	r3, #54	@ 0x36
 800b70e:	f040 80cd 	bne.w	800b8ac <gos_traceTraceFormatted+0x21c>
        (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS)    == GOS_SUCCESS    )
 800b712:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b716:	486b      	ldr	r0, [pc, #428]	@ (800b8c4 <gos_traceTraceFormatted+0x234>)
 800b718:	f7fd fce6 	bl	80090e8 <gos_mutexLock>
 800b71c:	4603      	mov	r3, r0
        (gos_kernelIsCallerIsr()                               == GOS_TRUE       )) &&
 800b71e:	2b55      	cmp	r3, #85	@ 0x55
 800b720:	f040 80c4 	bne.w	800b8ac <gos_traceTraceFormatted+0x21c>
        )
    {
        if (addTimeStamp == GOS_TRUE)
 800b724:	79fb      	ldrb	r3, [r7, #7]
 800b726:	2b36      	cmp	r3, #54	@ 0x36
 800b728:	d137      	bne.n	800b79a <gos_traceTraceFormatted+0x10a>
        {
            traceResult &= gos_timeGet(&sysTime);
 800b72a:	f107 0314 	add.w	r3, r7, #20
 800b72e:	4618      	mov	r0, r3
 800b730:	f7ff fb0e 	bl	800ad50 <gos_timeGet>
 800b734:	4603      	mov	r3, r0
 800b736:	461a      	mov	r2, r3
 800b738:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b73c:	4013      	ands	r3, r2
 800b73e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
                    sysTime.years,
 800b742:	8bbb      	ldrh	r3, [r7, #28]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b744:	461d      	mov	r5, r3
                    sysTime.months,
 800b746:	7efb      	ldrb	r3, [r7, #27]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b748:	461e      	mov	r6, r3
                    sysTime.days,
 800b74a:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800b74e:	b29b      	uxth	r3, r3
                    sysTime.hours,
 800b750:	7e3a      	ldrb	r2, [r7, #24]
                    sysTime.minutes,
 800b752:	7df9      	ldrb	r1, [r7, #23]
                    sysTime.seconds,
 800b754:	7db8      	ldrb	r0, [r7, #22]
                    sysTime.milliseconds
 800b756:	8abc      	ldrh	r4, [r7, #20]
            (void_t) sprintf(timeStampBuffer, GOS_TRACE_TIMESTAMP_FORMAT,
 800b758:	9404      	str	r4, [sp, #16]
 800b75a:	9003      	str	r0, [sp, #12]
 800b75c:	9102      	str	r1, [sp, #8]
 800b75e:	9201      	str	r2, [sp, #4]
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	4633      	mov	r3, r6
 800b764:	462a      	mov	r2, r5
 800b766:	4958      	ldr	r1, [pc, #352]	@ (800b8c8 <gos_traceTraceFormatted+0x238>)
 800b768:	4858      	ldr	r0, [pc, #352]	@ (800b8cc <gos_traceTraceFormatted+0x23c>)
 800b76a:	f000 fc15 	bl	800bf98 <siprintf>
                    );
            // Add timestamp to queue.
            traceResult &= gos_queuePut(
 800b76e:	4b58      	ldr	r3, [pc, #352]	@ (800b8d0 <gos_traceTraceFormatted+0x240>)
 800b770:	881c      	ldrh	r4, [r3, #0]
                    traceQueue.queueId,
                    (void_t*)timeStampBuffer,
                    strlen(timeStampBuffer) + 1,
 800b772:	4856      	ldr	r0, [pc, #344]	@ (800b8cc <gos_traceTraceFormatted+0x23c>)
 800b774:	f7f4 fd3e 	bl	80001f4 <strlen>
 800b778:	4603      	mov	r3, r0
            traceResult &= gos_queuePut(
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	3301      	adds	r3, #1
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b784:	4951      	ldr	r1, [pc, #324]	@ (800b8cc <gos_traceTraceFormatted+0x23c>)
 800b786:	4620      	mov	r0, r4
 800b788:	f7fd fece 	bl	8009528 <gos_queuePut>
 800b78c:	4603      	mov	r3, r0
 800b78e:	461a      	mov	r2, r3
 800b790:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b794:	4013      	ands	r3, r2
 800b796:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        {
            // Timestamp not needed.
        }

        // Add trace message to queue.
        va_start(args, traceFormat);
 800b79a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800b79e:	613b      	str	r3, [r7, #16]
        (void_t) vsprintf(formattedBuffer, traceFormat, args);
 800b7a0:	693a      	ldr	r2, [r7, #16]
 800b7a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b7a6:	484b      	ldr	r0, [pc, #300]	@ (800b8d4 <gos_traceTraceFormatted+0x244>)
 800b7a8:	f000 fc2c 	bl	800c004 <vsiprintf>
        va_end(args);
        traceResult &= gos_queuePut(
 800b7ac:	4b48      	ldr	r3, [pc, #288]	@ (800b8d0 <gos_traceTraceFormatted+0x240>)
 800b7ae:	881c      	ldrh	r4, [r3, #0]
                traceQueue.queueId,
                (void_t*)formattedBuffer,
                strlen(formattedBuffer) + 1,
 800b7b0:	4848      	ldr	r0, [pc, #288]	@ (800b8d4 <gos_traceTraceFormatted+0x244>)
 800b7b2:	f7f4 fd1f 	bl	80001f4 <strlen>
 800b7b6:	4603      	mov	r3, r0
        traceResult &= gos_queuePut(
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b7c2:	4944      	ldr	r1, [pc, #272]	@ (800b8d4 <gos_traceTraceFormatted+0x244>)
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f7fd feaf 	bl	8009528 <gos_queuePut>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                GOS_TRACE_QUEUE_TMO_MS
                );

        if (traceResult != GOS_SUCCESS)
 800b7d8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800b7dc:	2b55      	cmp	r3, #85	@ 0x55
 800b7de:	d002      	beq.n	800b7e6 <gos_traceTraceFormatted+0x156>
        {
            traceResult = GOS_ERROR;
 800b7e0:	23ae      	movs	r3, #174	@ 0xae
 800b7e2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_ENTER
 800b7e6:	4b3c      	ldr	r3, [pc, #240]	@ (800b8d8 <gos_traceTraceFormatted+0x248>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d108      	bne.n	800b800 <gos_traceTraceFormatted+0x170>
 800b7ee:	b672      	cpsid	i
 800b7f0:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f4:	4a39      	ldr	r2, [pc, #228]	@ (800b8dc <gos_traceTraceFormatted+0x24c>)
 800b7f6:	6013      	str	r3, [r2, #0]
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	4b35      	ldr	r3, [pc, #212]	@ (800b8d8 <gos_traceTraceFormatted+0x248>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	3301      	adds	r3, #1
 800b806:	b2da      	uxtb	r2, r3
 800b808:	4b33      	ldr	r3, [pc, #204]	@ (800b8d8 <gos_traceTraceFormatted+0x248>)
 800b80a:	701a      	strb	r2, [r3, #0]
 800b80c:	4b34      	ldr	r3, [pc, #208]	@ (800b8e0 <gos_traceTraceFormatted+0x250>)
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	3301      	adds	r3, #1
 800b812:	b2da      	uxtb	r2, r3
 800b814:	4b32      	ldr	r3, [pc, #200]	@ (800b8e0 <gos_traceTraceFormatted+0x250>)
 800b816:	701a      	strb	r2, [r3, #0]

        // Get task privileges.
        (void_t) gos_taskGetPrivileges(callerTaskId, &privileges);
 800b818:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800b81c:	f107 020e 	add.w	r2, r7, #14
 800b820:	4611      	mov	r1, r2
 800b822:	4618      	mov	r0, r3
 800b824:	f7fc fb6a 	bl	8007efc <gos_taskGetPrivileges>

        if ((privileges & GOS_PRIV_TASK_MANIPULATE) != GOS_PRIV_TASK_MANIPULATE)
 800b828:	89fb      	ldrh	r3, [r7, #14]
 800b82a:	b21b      	sxth	r3, r3
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	db13      	blt.n	800b858 <gos_traceTraceFormatted+0x1c8>
        {
            // If task has no privilege to manipulate other tasks, add it temporarily.
            (void_t) gos_taskAddPrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800b830:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800b834:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fc f9fb 	bl	8007c34 <gos_taskAddPrivilege>
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800b83e:	4b29      	ldr	r3, [pc, #164]	@ (800b8e4 <gos_traceTraceFormatted+0x254>)
 800b840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b842:	4618      	mov	r0, r3
 800b844:	f7fb fc30 	bl	80070a8 <gos_taskResume>
            (void_t) gos_taskRemovePrivilege(callerTaskId, GOS_PRIV_TASK_MANIPULATE);
 800b848:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800b84c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b850:	4618      	mov	r0, r3
 800b852:	f7fc fa67 	bl	8007d24 <gos_taskRemovePrivilege>
 800b856:	e004      	b.n	800b862 <gos_traceTraceFormatted+0x1d2>
        }
        else
        {
            (void_t) gos_taskResume(traceDaemonTaskDesc.taskId);
 800b858:	4b22      	ldr	r3, [pc, #136]	@ (800b8e4 <gos_traceTraceFormatted+0x254>)
 800b85a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fb fc23 	bl	80070a8 <gos_taskResume>
        }
        GOS_ATOMIC_EXIT
 800b862:	4b1d      	ldr	r3, [pc, #116]	@ (800b8d8 <gos_traceTraceFormatted+0x248>)
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d005      	beq.n	800b876 <gos_traceTraceFormatted+0x1e6>
 800b86a:	4b1b      	ldr	r3, [pc, #108]	@ (800b8d8 <gos_traceTraceFormatted+0x248>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	3b01      	subs	r3, #1
 800b870:	b2da      	uxtb	r2, r3
 800b872:	4b19      	ldr	r3, [pc, #100]	@ (800b8d8 <gos_traceTraceFormatted+0x248>)
 800b874:	701a      	strb	r2, [r3, #0]
 800b876:	4b18      	ldr	r3, [pc, #96]	@ (800b8d8 <gos_traceTraceFormatted+0x248>)
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d108      	bne.n	800b890 <gos_traceTraceFormatted+0x200>
 800b87e:	4b17      	ldr	r3, [pc, #92]	@ (800b8dc <gos_traceTraceFormatted+0x24c>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f383 8810 	msr	PRIMASK, r3
 800b886:	b662      	cpsie	i
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	f3bf 8f6f 	isb	sy
 800b890:	4b13      	ldr	r3, [pc, #76]	@ (800b8e0 <gos_traceTraceFormatted+0x250>)
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d005      	beq.n	800b8a4 <gos_traceTraceFormatted+0x214>
 800b898:	4b11      	ldr	r3, [pc, #68]	@ (800b8e0 <gos_traceTraceFormatted+0x250>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	b2da      	uxtb	r2, r3
 800b8a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b8e0 <gos_traceTraceFormatted+0x250>)
 800b8a2:	701a      	strb	r2, [r3, #0]

        (void_t) gos_mutexUnlock(&traceMutex);
 800b8a4:	4807      	ldr	r0, [pc, #28]	@ (800b8c4 <gos_traceTraceFormatted+0x234>)
 800b8a6:	f7fd fd25 	bl	80092f4 <gos_mutexUnlock>
 800b8aa:	e002      	b.n	800b8b2 <gos_traceTraceFormatted+0x222>
    }
    else
    {
        traceResult = GOS_ERROR;
 800b8ac:	23ae      	movs	r3, #174	@ 0xae
 800b8ae:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    }

    return traceResult;
 800b8b2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3790      	adds	r7, #144	@ 0x90
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b8c0:	b003      	add	sp, #12
 800b8c2:	4770      	bx	lr
 800b8c4:	2000b908 	.word	0x2000b908
 800b8c8:	0800dc00 	.word	0x0800dc00
 800b8cc:	2000b8dc 	.word	0x2000b8dc
 800b8d0:	2000197c 	.word	0x2000197c
 800b8d4:	2000b814 	.word	0x2000b814
 800b8d8:	20001e9b 	.word	0x20001e9b
 800b8dc:	20001e9c 	.word	0x20001e9c
 800b8e0:	20001e99 	.word	0x20001e99
 800b8e4:	20001998 	.word	0x20001998

0800b8e8 <gos_traceTraceFormattedUnsafe>:

/*
 * Function: gos_traceTraceFormattedUnsafe
 */
gos_result_t gos_traceTraceFormattedUnsafe (GOS_CONST char_t* traceFormat, ...)
{
 800b8e8:	b40f      	push	{r0, r1, r2, r3}
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t traceResult = GOS_ERROR;
 800b8f0:	23ae      	movs	r3, #174	@ 0xae
 800b8f2:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    if (traceFormat != NULL)
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d01c      	beq.n	800b934 <gos_traceTraceFormattedUnsafe+0x4c>
    {
        GOS_DISABLE_SCHED
 800b8fa:	4b12      	ldr	r3, [pc, #72]	@ (800b944 <gos_traceTraceFormattedUnsafe+0x5c>)
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	3301      	adds	r3, #1
 800b900:	b2da      	uxtb	r2, r3
 800b902:	4b10      	ldr	r3, [pc, #64]	@ (800b944 <gos_traceTraceFormattedUnsafe+0x5c>)
 800b904:	701a      	strb	r2, [r3, #0]
        {
            va_start(args, traceFormat);
 800b906:	f107 0314 	add.w	r3, r7, #20
 800b90a:	603b      	str	r3, [r7, #0]
            (void_t) vsprintf(formattedBuffer, traceFormat, args);
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	6939      	ldr	r1, [r7, #16]
 800b910:	480d      	ldr	r0, [pc, #52]	@ (800b948 <gos_traceTraceFormattedUnsafe+0x60>)
 800b912:	f000 fb77 	bl	800c004 <vsiprintf>
            va_end(args);

            traceResult = gos_traceDriverTransmitString_Unsafe(formattedBuffer);
 800b916:	480c      	ldr	r0, [pc, #48]	@ (800b948 <gos_traceTraceFormattedUnsafe+0x60>)
 800b918:	f7f9 fe04 	bl	8005524 <gos_traceDriverTransmitString_Unsafe>
 800b91c:	4603      	mov	r3, r0
 800b91e:	71fb      	strb	r3, [r7, #7]
        }
        GOS_ENABLE_SCHED
 800b920:	4b08      	ldr	r3, [pc, #32]	@ (800b944 <gos_traceTraceFormattedUnsafe+0x5c>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d005      	beq.n	800b934 <gos_traceTraceFormattedUnsafe+0x4c>
 800b928:	4b06      	ldr	r3, [pc, #24]	@ (800b944 <gos_traceTraceFormattedUnsafe+0x5c>)
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	3b01      	subs	r3, #1
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	4b04      	ldr	r3, [pc, #16]	@ (800b944 <gos_traceTraceFormattedUnsafe+0x5c>)
 800b932:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return traceResult;
 800b934:	79fb      	ldrb	r3, [r7, #7]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b940:	b004      	add	sp, #16
 800b942:	4770      	bx	lr
 800b944:	20001e99 	.word	0x20001e99
 800b948:	2000b814 	.word	0x2000b814

0800b94c <gos_traceDaemonTask>:
 *          via the registered trace driver.
 *
 * @return  -
 */
GOS_STATIC void_t gos_traceDaemonTask (void_t)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	af00      	add	r7, sp, #0
    /*
     * Function code.
     */
    for (;;)
    {
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 800b950:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800b954:	480e      	ldr	r0, [pc, #56]	@ (800b990 <gos_traceDaemonTask+0x44>)
 800b956:	f7fd fbc7 	bl	80090e8 <gos_mutexLock>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b55      	cmp	r3, #85	@ 0x55
 800b95e:	d10e      	bne.n	800b97e <gos_traceDaemonTask+0x32>
        {
            while (gos_queueGet(
 800b960:	e002      	b.n	800b968 <gos_traceDaemonTask+0x1c>
                    traceQueue.queueId,
                    (void_t*)traceLine,
                    sizeof(traceLine),
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
            {
                (void_t) gos_traceDriverTransmitString(traceLine);
 800b962:	480c      	ldr	r0, [pc, #48]	@ (800b994 <gos_traceDaemonTask+0x48>)
 800b964:	f7f9 fdc6 	bl	80054f4 <gos_traceDriverTransmitString>
            while (gos_queueGet(
 800b968:	4b0b      	ldr	r3, [pc, #44]	@ (800b998 <gos_traceDaemonTask+0x4c>)
 800b96a:	8818      	ldrh	r0, [r3, #0]
 800b96c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b970:	22c8      	movs	r2, #200	@ 0xc8
 800b972:	4908      	ldr	r1, [pc, #32]	@ (800b994 <gos_traceDaemonTask+0x48>)
 800b974:	f7fd fea6 	bl	80096c4 <gos_queueGet>
 800b978:	4603      	mov	r3, r0
                    GOS_TRACE_QUEUE_TMO_MS) == GOS_SUCCESS)
 800b97a:	2b55      	cmp	r3, #85	@ 0x55
 800b97c:	d0f1      	beq.n	800b962 <gos_traceDaemonTask+0x16>
        }
        else
        {
            // Nothing to do.
        }
        (void_t) gos_mutexUnlock(&traceMutex);
 800b97e:	4804      	ldr	r0, [pc, #16]	@ (800b990 <gos_traceDaemonTask+0x44>)
 800b980:	f7fd fcb8 	bl	80092f4 <gos_mutexUnlock>
        (void_t) gos_taskSuspend(traceDaemonTaskDesc.taskId);
 800b984:	4b05      	ldr	r3, [pc, #20]	@ (800b99c <gos_traceDaemonTask+0x50>)
 800b986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fb fa6b 	bl	8006e64 <gos_taskSuspend>
        if (gos_mutexLock(&traceMutex, GOS_TRACE_MUTEX_TMO_MS) == GOS_SUCCESS)
 800b98e:	e7df      	b.n	800b950 <gos_traceDaemonTask+0x4>
 800b990:	2000b908 	.word	0x2000b908
 800b994:	2000b74c 	.word	0x2000b74c
 800b998:	2000197c 	.word	0x2000197c
 800b99c:	20001998 	.word	0x20001998

0800b9a0 <gos_triggerInit>:

/*
 * Function: gos_triggerInit
 */
gos_result_t gos_triggerInit (gos_trigger_t* pTrigger)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerInitResult = GOS_ERROR;
 800b9a8:	23ae      	movs	r3, #174	@ 0xae
 800b9aa:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00b      	beq.n	800b9ca <gos_triggerInit+0x2a>
    {
        pTrigger->valueCounter = 0u;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	605a      	str	r2, [r3, #4]
        pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9c4:	811a      	strh	r2, [r3, #8]
        triggerInitResult      = GOS_SUCCESS;
 800b9c6:	2355      	movs	r3, #85	@ 0x55
 800b9c8:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return triggerInitResult;
 800b9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <gos_triggerReset>:

/*
 * Function: gos_triggerReset
 */
GOS_INLINE gos_result_t gos_triggerReset (gos_trigger_t* pTrigger)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t resetResult = GOS_ERROR;
 800b9e0:	23ae      	movs	r3, #174	@ 0xae
 800b9e2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d041      	beq.n	800ba6e <gos_triggerReset+0x96>
    {
        GOS_ATOMIC_ENTER
 800b9ea:	4b24      	ldr	r3, [pc, #144]	@ (800ba7c <gos_triggerReset+0xa4>)
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d108      	bne.n	800ba04 <gos_triggerReset+0x2c>
 800b9f2:	b672      	cpsid	i
 800b9f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9f8:	4a21      	ldr	r2, [pc, #132]	@ (800ba80 <gos_triggerReset+0xa8>)
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	4b1d      	ldr	r3, [pc, #116]	@ (800ba7c <gos_triggerReset+0xa4>)
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	b2da      	uxtb	r2, r3
 800ba0c:	4b1b      	ldr	r3, [pc, #108]	@ (800ba7c <gos_triggerReset+0xa4>)
 800ba0e:	701a      	strb	r2, [r3, #0]
 800ba10:	4b1c      	ldr	r3, [pc, #112]	@ (800ba84 <gos_triggerReset+0xac>)
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	3301      	adds	r3, #1
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	4b1a      	ldr	r3, [pc, #104]	@ (800ba84 <gos_triggerReset+0xac>)
 800ba1a:	701a      	strb	r2, [r3, #0]

        pTrigger->valueCounter = 0u;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	601a      	str	r2, [r3, #0]
        pTrigger->desiredValue = 0u;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	605a      	str	r2, [r3, #4]

        resetResult = GOS_SUCCESS;
 800ba28:	2355      	movs	r3, #85	@ 0x55
 800ba2a:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 800ba2c:	4b13      	ldr	r3, [pc, #76]	@ (800ba7c <gos_triggerReset+0xa4>)
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d005      	beq.n	800ba40 <gos_triggerReset+0x68>
 800ba34:	4b11      	ldr	r3, [pc, #68]	@ (800ba7c <gos_triggerReset+0xa4>)
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	4b0f      	ldr	r3, [pc, #60]	@ (800ba7c <gos_triggerReset+0xa4>)
 800ba3e:	701a      	strb	r2, [r3, #0]
 800ba40:	4b0e      	ldr	r3, [pc, #56]	@ (800ba7c <gos_triggerReset+0xa4>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d108      	bne.n	800ba5a <gos_triggerReset+0x82>
 800ba48:	4b0d      	ldr	r3, [pc, #52]	@ (800ba80 <gos_triggerReset+0xa8>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f383 8810 	msr	PRIMASK, r3
 800ba50:	b662      	cpsie	i
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	4b0a      	ldr	r3, [pc, #40]	@ (800ba84 <gos_triggerReset+0xac>)
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d005      	beq.n	800ba6e <gos_triggerReset+0x96>
 800ba62:	4b08      	ldr	r3, [pc, #32]	@ (800ba84 <gos_triggerReset+0xac>)
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	3b01      	subs	r3, #1
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	4b06      	ldr	r3, [pc, #24]	@ (800ba84 <gos_triggerReset+0xac>)
 800ba6c:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return resetResult;
 800ba6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	20001e9b 	.word	0x20001e9b
 800ba80:	20001e9c 	.word	0x20001e9c
 800ba84:	20001e99 	.word	0x20001e99

0800ba88 <gos_triggerWait>:

/*
 * Function: gos_triggerWait
 */
GOS_INLINE gos_result_t gos_triggerWait (gos_trigger_t* pTrigger, u32_t value, u32_t timeout)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t triggerWaitResult = GOS_ERROR;
 800ba94:	23ae      	movs	r3, #174	@ 0xae
 800ba96:	75fb      	strb	r3, [r7, #23]
    gos_tid_t    currentId         = GOS_INVALID_TASK_ID;
 800ba98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ba9c:	82bb      	strh	r3, [r7, #20]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 8096 	beq.w	800bbd2 <gos_triggerWait+0x14a>
    {
        // Set owner task ID.
        GOS_ATOMIC_ENTER
 800baa6:	4b4d      	ldr	r3, [pc, #308]	@ (800bbdc <gos_triggerWait+0x154>)
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d108      	bne.n	800bac0 <gos_triggerWait+0x38>
 800baae:	b672      	cpsid	i
 800bab0:	f3ef 8310 	mrs	r3, PRIMASK
 800bab4:	4a4a      	ldr	r2, [pc, #296]	@ (800bbe0 <gos_triggerWait+0x158>)
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	4b46      	ldr	r3, [pc, #280]	@ (800bbdc <gos_triggerWait+0x154>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	3301      	adds	r3, #1
 800bac6:	b2da      	uxtb	r2, r3
 800bac8:	4b44      	ldr	r3, [pc, #272]	@ (800bbdc <gos_triggerWait+0x154>)
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	4b45      	ldr	r3, [pc, #276]	@ (800bbe4 <gos_triggerWait+0x15c>)
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	3301      	adds	r3, #1
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	4b43      	ldr	r3, [pc, #268]	@ (800bbe4 <gos_triggerWait+0x15c>)
 800bad6:	701a      	strb	r2, [r3, #0]

        (void_t) gos_taskGetCurrentId(&currentId);
 800bad8:	f107 0314 	add.w	r3, r7, #20
 800badc:	4618      	mov	r0, r3
 800bade:	f7fc fab5 	bl	800804c <gos_taskGetCurrentId>
        pTrigger->waiterTaskId = currentId;
 800bae2:	8aba      	ldrh	r2, [r7, #20]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	811a      	strh	r2, [r3, #8]
        pTrigger->desiredValue = value;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	605a      	str	r2, [r3, #4]

        GOS_ATOMIC_EXIT
 800baee:	4b3b      	ldr	r3, [pc, #236]	@ (800bbdc <gos_triggerWait+0x154>)
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d005      	beq.n	800bb02 <gos_triggerWait+0x7a>
 800baf6:	4b39      	ldr	r3, [pc, #228]	@ (800bbdc <gos_triggerWait+0x154>)
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	4b37      	ldr	r3, [pc, #220]	@ (800bbdc <gos_triggerWait+0x154>)
 800bb00:	701a      	strb	r2, [r3, #0]
 800bb02:	4b36      	ldr	r3, [pc, #216]	@ (800bbdc <gos_triggerWait+0x154>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d108      	bne.n	800bb1c <gos_triggerWait+0x94>
 800bb0a:	4b35      	ldr	r3, [pc, #212]	@ (800bbe0 <gos_triggerWait+0x158>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f383 8810 	msr	PRIMASK, r3
 800bb12:	b662      	cpsie	i
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	4b31      	ldr	r3, [pc, #196]	@ (800bbe4 <gos_triggerWait+0x15c>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d005      	beq.n	800bb30 <gos_triggerWait+0xa8>
 800bb24:	4b2f      	ldr	r3, [pc, #188]	@ (800bbe4 <gos_triggerWait+0x15c>)
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	4b2d      	ldr	r3, [pc, #180]	@ (800bbe4 <gos_triggerWait+0x15c>)
 800bb2e:	701a      	strb	r2, [r3, #0]

        // Block until timeout in case trigger value has not been reached yet.
        if (pTrigger->valueCounter < pTrigger->desiredValue)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d204      	bcs.n	800bb46 <gos_triggerWait+0xbe>
        {
            (void_t) gos_taskBlock(currentId, timeout);
 800bb3c:	8abb      	ldrh	r3, [r7, #20]
 800bb3e:	6879      	ldr	r1, [r7, #4]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fb fb5f 	bl	8007204 <gos_taskBlock>
        {
            // Trigger value already reached.
        }

        // Check if the trigger value is reached after unblock.
        GOS_ATOMIC_ENTER
 800bb46:	4b25      	ldr	r3, [pc, #148]	@ (800bbdc <gos_triggerWait+0x154>)
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d108      	bne.n	800bb60 <gos_triggerWait+0xd8>
 800bb4e:	b672      	cpsid	i
 800bb50:	f3ef 8310 	mrs	r3, PRIMASK
 800bb54:	4a22      	ldr	r2, [pc, #136]	@ (800bbe0 <gos_triggerWait+0x158>)
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	4b1e      	ldr	r3, [pc, #120]	@ (800bbdc <gos_triggerWait+0x154>)
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	3301      	adds	r3, #1
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	4b1c      	ldr	r3, [pc, #112]	@ (800bbdc <gos_triggerWait+0x154>)
 800bb6a:	701a      	strb	r2, [r3, #0]
 800bb6c:	4b1d      	ldr	r3, [pc, #116]	@ (800bbe4 <gos_triggerWait+0x15c>)
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	3301      	adds	r3, #1
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	4b1b      	ldr	r3, [pc, #108]	@ (800bbe4 <gos_triggerWait+0x15c>)
 800bb76:	701a      	strb	r2, [r3, #0]

        if (pTrigger->valueCounter >= pTrigger->desiredValue)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d305      	bcc.n	800bb90 <gos_triggerWait+0x108>
        {
            triggerWaitResult      = GOS_SUCCESS;
 800bb84:	2355      	movs	r3, #85	@ 0x55
 800bb86:	75fb      	strb	r3, [r7, #23]
            pTrigger->waiterTaskId = GOS_INVALID_TASK_ID;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb8e:	811a      	strh	r2, [r3, #8]
        else
        {
            // Nothing to do.
        }

        GOS_ATOMIC_EXIT
 800bb90:	4b12      	ldr	r3, [pc, #72]	@ (800bbdc <gos_triggerWait+0x154>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d005      	beq.n	800bba4 <gos_triggerWait+0x11c>
 800bb98:	4b10      	ldr	r3, [pc, #64]	@ (800bbdc <gos_triggerWait+0x154>)
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	4b0e      	ldr	r3, [pc, #56]	@ (800bbdc <gos_triggerWait+0x154>)
 800bba2:	701a      	strb	r2, [r3, #0]
 800bba4:	4b0d      	ldr	r3, [pc, #52]	@ (800bbdc <gos_triggerWait+0x154>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d108      	bne.n	800bbbe <gos_triggerWait+0x136>
 800bbac:	4b0c      	ldr	r3, [pc, #48]	@ (800bbe0 <gos_triggerWait+0x158>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f383 8810 	msr	PRIMASK, r3
 800bbb4:	b662      	cpsie	i
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	4b09      	ldr	r3, [pc, #36]	@ (800bbe4 <gos_triggerWait+0x15c>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d005      	beq.n	800bbd2 <gos_triggerWait+0x14a>
 800bbc6:	4b07      	ldr	r3, [pc, #28]	@ (800bbe4 <gos_triggerWait+0x15c>)
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	4b05      	ldr	r3, [pc, #20]	@ (800bbe4 <gos_triggerWait+0x15c>)
 800bbd0:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerWaitResult;
 800bbd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3718      	adds	r7, #24
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	20001e9b 	.word	0x20001e9b
 800bbe0:	20001e9c 	.word	0x20001e9c
 800bbe4:	20001e99 	.word	0x20001e99

0800bbe8 <gos_triggerIncrement>:

/*
 * Function: gos_triggerIncrement
 */
GOS_INLINE gos_result_t gos_triggerIncrement (gos_trigger_t* pTrigger)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
    /*
    * Local variables.
    */
    gos_result_t triggerIncrementResult = GOS_ERROR;
 800bbf0:	23ae      	movs	r3, #174	@ 0xae
 800bbf2:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    // Null pointer check.
    if (pTrigger != NULL)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d073      	beq.n	800bce2 <gos_triggerIncrement+0xfa>
    {
        GOS_ATOMIC_ENTER
 800bbfa:	4b3c      	ldr	r3, [pc, #240]	@ (800bcec <gos_triggerIncrement+0x104>)
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d108      	bne.n	800bc14 <gos_triggerIncrement+0x2c>
 800bc02:	b672      	cpsid	i
 800bc04:	f3ef 8310 	mrs	r3, PRIMASK
 800bc08:	4a39      	ldr	r2, [pc, #228]	@ (800bcf0 <gos_triggerIncrement+0x108>)
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	4b35      	ldr	r3, [pc, #212]	@ (800bcec <gos_triggerIncrement+0x104>)
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	4b33      	ldr	r3, [pc, #204]	@ (800bcec <gos_triggerIncrement+0x104>)
 800bc1e:	701a      	strb	r2, [r3, #0]
 800bc20:	4b34      	ldr	r3, [pc, #208]	@ (800bcf4 <gos_triggerIncrement+0x10c>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	3301      	adds	r3, #1
 800bc26:	b2da      	uxtb	r2, r3
 800bc28:	4b32      	ldr	r3, [pc, #200]	@ (800bcf4 <gos_triggerIncrement+0x10c>)
 800bc2a:	701a      	strb	r2, [r3, #0]

        // Increment trigger value.
        pTrigger->valueCounter++;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	1c5a      	adds	r2, r3, #1
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	601a      	str	r2, [r3, #0]

        if (pTrigger->valueCounter == pTrigger->desiredValue)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d12c      	bne.n	800bc9c <gos_triggerIncrement+0xb4>
        {
            GOS_ISR_ENTER
 800bc42:	4b2d      	ldr	r3, [pc, #180]	@ (800bcf8 <gos_triggerIncrement+0x110>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d105      	bne.n	800bc56 <gos_triggerIncrement+0x6e>
 800bc4a:	4b2a      	ldr	r3, [pc, #168]	@ (800bcf4 <gos_triggerIncrement+0x10c>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	b2da      	uxtb	r2, r3
 800bc52:	4b28      	ldr	r3, [pc, #160]	@ (800bcf4 <gos_triggerIncrement+0x10c>)
 800bc54:	701a      	strb	r2, [r3, #0]
 800bc56:	4b28      	ldr	r3, [pc, #160]	@ (800bcf8 <gos_triggerIncrement+0x110>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	4b26      	ldr	r3, [pc, #152]	@ (800bcf8 <gos_triggerIncrement+0x110>)
 800bc60:	701a      	strb	r2, [r3, #0]

            // Unblock owner task.
            (void_t) gos_taskUnblock(pTrigger->waiterTaskId);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	891b      	ldrh	r3, [r3, #8]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7fb fbde 	bl	8007428 <gos_taskUnblock>

            GOS_ISR_EXIT
 800bc6c:	4b22      	ldr	r3, [pc, #136]	@ (800bcf8 <gos_triggerIncrement+0x110>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d005      	beq.n	800bc80 <gos_triggerIncrement+0x98>
 800bc74:	4b20      	ldr	r3, [pc, #128]	@ (800bcf8 <gos_triggerIncrement+0x110>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	4b1e      	ldr	r3, [pc, #120]	@ (800bcf8 <gos_triggerIncrement+0x110>)
 800bc7e:	701a      	strb	r2, [r3, #0]
 800bc80:	4b1d      	ldr	r3, [pc, #116]	@ (800bcf8 <gos_triggerIncrement+0x110>)
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d109      	bne.n	800bc9c <gos_triggerIncrement+0xb4>
 800bc88:	4b1a      	ldr	r3, [pc, #104]	@ (800bcf4 <gos_triggerIncrement+0x10c>)
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d005      	beq.n	800bc9c <gos_triggerIncrement+0xb4>
 800bc90:	4b18      	ldr	r3, [pc, #96]	@ (800bcf4 <gos_triggerIncrement+0x10c>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	3b01      	subs	r3, #1
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	4b16      	ldr	r3, [pc, #88]	@ (800bcf4 <gos_triggerIncrement+0x10c>)
 800bc9a:	701a      	strb	r2, [r3, #0]
        else
        {
            // Trigger value not reached yet.
        }

        triggerIncrementResult = GOS_SUCCESS;
 800bc9c:	2355      	movs	r3, #85	@ 0x55
 800bc9e:	73fb      	strb	r3, [r7, #15]

        GOS_ATOMIC_EXIT
 800bca0:	4b12      	ldr	r3, [pc, #72]	@ (800bcec <gos_triggerIncrement+0x104>)
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d005      	beq.n	800bcb4 <gos_triggerIncrement+0xcc>
 800bca8:	4b10      	ldr	r3, [pc, #64]	@ (800bcec <gos_triggerIncrement+0x104>)
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	4b0e      	ldr	r3, [pc, #56]	@ (800bcec <gos_triggerIncrement+0x104>)
 800bcb2:	701a      	strb	r2, [r3, #0]
 800bcb4:	4b0d      	ldr	r3, [pc, #52]	@ (800bcec <gos_triggerIncrement+0x104>)
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d108      	bne.n	800bcce <gos_triggerIncrement+0xe6>
 800bcbc:	4b0c      	ldr	r3, [pc, #48]	@ (800bcf0 <gos_triggerIncrement+0x108>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f383 8810 	msr	PRIMASK, r3
 800bcc4:	b662      	cpsie	i
 800bcc6:	f3bf 8f4f 	dsb	sy
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	4b09      	ldr	r3, [pc, #36]	@ (800bcf4 <gos_triggerIncrement+0x10c>)
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d005      	beq.n	800bce2 <gos_triggerIncrement+0xfa>
 800bcd6:	4b07      	ldr	r3, [pc, #28]	@ (800bcf4 <gos_triggerIncrement+0x10c>)
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	4b05      	ldr	r3, [pc, #20]	@ (800bcf4 <gos_triggerIncrement+0x10c>)
 800bce0:	701a      	strb	r2, [r3, #0]
    else
    {
        // Nothing to do.
    }

    return triggerIncrementResult;
 800bce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	20001e9b 	.word	0x20001e9b
 800bcf0:	20001e9c 	.word	0x20001e9c
 800bcf4:	20001e99 	.word	0x20001e99
 800bcf8:	20001e9a 	.word	0x20001e9a

0800bcfc <gos_crcDriverGetCrc>:

/*
 * Function: gos_crcDriverGetCrc
 */
u32_t gos_crcDriverGetCrc (u8_t* pData, u32_t dataSize)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
    /*
     * Local variables.
     */
    u32_t   crcValue   = CRC_INITIAL_VALUE;
 800bd06:	f04f 33ff 	mov.w	r3, #4294967295
 800bd0a:	617b      	str	r3, [r7, #20]
    u32_t   index      = 0u;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	613b      	str	r3, [r7, #16]
    u32_t   mask       = 0u;
 800bd10:	2300      	movs	r3, #0
 800bd12:	60bb      	str	r3, [r7, #8]
    u8_t    bitCounter = 0u;
 800bd14:	2300      	movs	r3, #0
 800bd16:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    for (index = 0u; index < dataSize; index++)
 800bd18:	2300      	movs	r3, #0
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	e01e      	b.n	800bd5c <gos_crcDriverGetCrc+0x60>
    {
        crcValue ^= pData[index];
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	4413      	add	r3, r2
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	461a      	mov	r2, r3
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	4053      	eors	r3, r2
 800bd2c:	617b      	str	r3, [r7, #20]

        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 800bd2e:	2308      	movs	r3, #8
 800bd30:	73fb      	strb	r3, [r7, #15]
 800bd32:	e00d      	b.n	800bd50 <gos_crcDriverGetCrc+0x54>
        {
            mask = -(crcValue & 1);
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	425b      	negs	r3, r3
 800bd3c:	60bb      	str	r3, [r7, #8]
            crcValue = (crcValue) ^ (CRC_POLYNOMIAL_VALUE & mask);
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	4b0c      	ldr	r3, [pc, #48]	@ (800bd74 <gos_crcDriverGetCrc+0x78>)
 800bd42:	4013      	ands	r3, r2
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	4053      	eors	r3, r2
 800bd48:	617b      	str	r3, [r7, #20]
        for (bitCounter = 8u; bitCounter > 0u; bitCounter--)
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	73fb      	strb	r3, [r7, #15]
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1ee      	bne.n	800bd34 <gos_crcDriverGetCrc+0x38>
    for (index = 0u; index < dataSize; index++)
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	613b      	str	r3, [r7, #16]
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d3dc      	bcc.n	800bd1e <gos_crcDriverGetCrc+0x22>
        }
    }

    return ~crcValue;
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	43db      	mvns	r3, r3
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	371c      	adds	r7, #28
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	edb88320 	.word	0xedb88320

0800bd78 <gos_shellDriverReceiveChar>:

/*
 * Function: gos_shellDriverReceiveChar
 */
gos_result_t gos_shellDriverReceiveChar (char_t* pChar)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t shellDriverReceiveResult = GOS_ERROR;
 800bd80:	23ae      	movs	r3, #174	@ 0xae
 800bd82:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.shellDriverReceiveChar != NULL)
 800bd84:	4b07      	ldr	r3, [pc, #28]	@ (800bda4 <gos_shellDriverReceiveChar+0x2c>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d005      	beq.n	800bd98 <gos_shellDriverReceiveChar+0x20>
    {
        shellDriverReceiveResult = driverFunctions.shellDriverReceiveChar(pChar);
 800bd8c:	4b05      	ldr	r3, [pc, #20]	@ (800bda4 <gos_shellDriverReceiveChar+0x2c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	4798      	blx	r3
 800bd94:	4603      	mov	r3, r0
 800bd96:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return shellDriverReceiveResult;
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	20001e7c 	.word	0x20001e7c

0800bda8 <gos_shellDriverTransmitString>:

/*
 * Function: gos_shellDriverTransmitString
 */
gos_result_t gos_shellDriverTransmitString (char_t* pString, ...)
{
 800bda8:	b40f      	push	{r0, r1, r2, r3}
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
    /*
     * Local variables.
     */
    gos_result_t shellDriverTransmitResult = GOS_ERROR;
 800bdb0:	23ae      	movs	r3, #174	@ 0xae
 800bdb2:	71fb      	strb	r3, [r7, #7]
    va_list      args;

    /*
     * Function code.
     */
    va_start(args, pString);
 800bdb4:	f107 0314 	add.w	r3, r7, #20
 800bdb8:	603b      	str	r3, [r7, #0]
    (void_t) vsprintf(formattedBuffer, pString, args);
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	6939      	ldr	r1, [r7, #16]
 800bdbe:	480a      	ldr	r0, [pc, #40]	@ (800bde8 <gos_shellDriverTransmitString+0x40>)
 800bdc0:	f000 f920 	bl	800c004 <vsiprintf>
    va_end(args);

    if (driverFunctions.shellDriverTransmitString != NULL)
 800bdc4:	4b09      	ldr	r3, [pc, #36]	@ (800bdec <gos_shellDriverTransmitString+0x44>)
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d005      	beq.n	800bdd8 <gos_shellDriverTransmitString+0x30>
    {
        shellDriverTransmitResult = driverFunctions.shellDriverTransmitString(formattedBuffer);
 800bdcc:	4b07      	ldr	r3, [pc, #28]	@ (800bdec <gos_shellDriverTransmitString+0x44>)
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	4805      	ldr	r0, [pc, #20]	@ (800bde8 <gos_shellDriverTransmitString+0x40>)
 800bdd2:	4798      	blx	r3
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	71fb      	strb	r3, [r7, #7]
    else
    {
        // Nothing to do.
    }

    return shellDriverTransmitResult;
 800bdd8:	79fb      	ldrb	r3, [r7, #7]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bde4:	b004      	add	sp, #16
 800bde6:	4770      	bx	lr
 800bde8:	2000b90c 	.word	0x2000b90c
 800bdec:	20001e7c 	.word	0x20001e7c

0800bdf0 <gos_sysmonDriverReceive>:

/*
 * Function: gos_sysmonDriverReceive
 */
gos_result_t gos_sysmonDriverReceive (u8_t* pBuffer, u16_t bufferSize)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverReceiveResult = GOS_ERROR;
 800bdfc:	23ae      	movs	r3, #174	@ 0xae
 800bdfe:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverReceive != NULL)
 800be00:	4b08      	ldr	r3, [pc, #32]	@ (800be24 <gos_sysmonDriverReceive+0x34>)
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d007      	beq.n	800be18 <gos_sysmonDriverReceive+0x28>
    {
        sysmonDriverReceiveResult = driverFunctions.sysmonDriverReceive(pBuffer, bufferSize);
 800be08:	4b06      	ldr	r3, [pc, #24]	@ (800be24 <gos_sysmonDriverReceive+0x34>)
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	887a      	ldrh	r2, [r7, #2]
 800be0e:	4611      	mov	r1, r2
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	4798      	blx	r3
 800be14:	4603      	mov	r3, r0
 800be16:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverReceiveResult;
 800be18:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	20001e7c 	.word	0x20001e7c

0800be28 <gos_sysmonDriverTransmit>:

/*
 * Function: gos_sysmonDriverTransmit
 */
gos_result_t gos_sysmonDriverTransmit (u8_t* pBuffer, u16_t bufferSize)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	460b      	mov	r3, r1
 800be32:	807b      	strh	r3, [r7, #2]
    /*
     * Local variables.
     */
    gos_result_t sysmonDriverTransmitResult = GOS_ERROR;
 800be34:	23ae      	movs	r3, #174	@ 0xae
 800be36:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.sysmonDriverTransmit != NULL)
 800be38:	4b08      	ldr	r3, [pc, #32]	@ (800be5c <gos_sysmonDriverTransmit+0x34>)
 800be3a:	695b      	ldr	r3, [r3, #20]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d007      	beq.n	800be50 <gos_sysmonDriverTransmit+0x28>
    {
        sysmonDriverTransmitResult = driverFunctions.sysmonDriverTransmit(pBuffer, bufferSize);
 800be40:	4b06      	ldr	r3, [pc, #24]	@ (800be5c <gos_sysmonDriverTransmit+0x34>)
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	887a      	ldrh	r2, [r7, #2]
 800be46:	4611      	mov	r1, r2
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	4798      	blx	r3
 800be4c:	4603      	mov	r3, r0
 800be4e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return sysmonDriverTransmitResult;
 800be50:	7bfb      	ldrb	r3, [r7, #15]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	20001e7c 	.word	0x20001e7c

0800be60 <gos_timerDriverSysTimerGet>:

/*
 * Function: gos_timerDriverSysTimerGet
 */
gos_result_t gos_timerDriverSysTimerGet (u16_t* pValue)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
    /*
     * Local variables.
     */
    gos_result_t timerDriverSysTimerGetResult = GOS_ERROR;
 800be68:	23ae      	movs	r3, #174	@ 0xae
 800be6a:	73fb      	strb	r3, [r7, #15]

    /*
     * Function code.
     */
    if (driverFunctions.timerDriverSysTimerGetValue != NULL)
 800be6c:	4b07      	ldr	r3, [pc, #28]	@ (800be8c <gos_timerDriverSysTimerGet+0x2c>)
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d005      	beq.n	800be80 <gos_timerDriverSysTimerGet+0x20>
    {
        timerDriverSysTimerGetResult = driverFunctions.timerDriverSysTimerGetValue(pValue);
 800be74:	4b05      	ldr	r3, [pc, #20]	@ (800be8c <gos_timerDriverSysTimerGet+0x2c>)
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	4798      	blx	r3
 800be7c:	4603      	mov	r3, r0
 800be7e:	73fb      	strb	r3, [r7, #15]
    else
    {
        // Nothing to do.
    }

    return timerDriverSysTimerGetResult;
 800be80:	7bfb      	ldrb	r3, [r7, #15]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	20001e7c 	.word	0x20001e7c

0800be90 <_strtol_l.constprop.0>:
 800be90:	2b24      	cmp	r3, #36	@ 0x24
 800be92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be96:	4686      	mov	lr, r0
 800be98:	4690      	mov	r8, r2
 800be9a:	d801      	bhi.n	800bea0 <_strtol_l.constprop.0+0x10>
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d106      	bne.n	800beae <_strtol_l.constprop.0+0x1e>
 800bea0:	f000 f8c2 	bl	800c028 <__errno>
 800bea4:	2316      	movs	r3, #22
 800bea6:	6003      	str	r3, [r0, #0]
 800bea8:	2000      	movs	r0, #0
 800beaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beae:	4834      	ldr	r0, [pc, #208]	@ (800bf80 <_strtol_l.constprop.0+0xf0>)
 800beb0:	460d      	mov	r5, r1
 800beb2:	462a      	mov	r2, r5
 800beb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800beb8:	5d06      	ldrb	r6, [r0, r4]
 800beba:	f016 0608 	ands.w	r6, r6, #8
 800bebe:	d1f8      	bne.n	800beb2 <_strtol_l.constprop.0+0x22>
 800bec0:	2c2d      	cmp	r4, #45	@ 0x2d
 800bec2:	d12d      	bne.n	800bf20 <_strtol_l.constprop.0+0x90>
 800bec4:	782c      	ldrb	r4, [r5, #0]
 800bec6:	2601      	movs	r6, #1
 800bec8:	1c95      	adds	r5, r2, #2
 800beca:	f033 0210 	bics.w	r2, r3, #16
 800bece:	d109      	bne.n	800bee4 <_strtol_l.constprop.0+0x54>
 800bed0:	2c30      	cmp	r4, #48	@ 0x30
 800bed2:	d12a      	bne.n	800bf2a <_strtol_l.constprop.0+0x9a>
 800bed4:	782a      	ldrb	r2, [r5, #0]
 800bed6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800beda:	2a58      	cmp	r2, #88	@ 0x58
 800bedc:	d125      	bne.n	800bf2a <_strtol_l.constprop.0+0x9a>
 800bede:	786c      	ldrb	r4, [r5, #1]
 800bee0:	2310      	movs	r3, #16
 800bee2:	3502      	adds	r5, #2
 800bee4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bee8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800beec:	2200      	movs	r2, #0
 800beee:	fbbc f9f3 	udiv	r9, ip, r3
 800bef2:	4610      	mov	r0, r2
 800bef4:	fb03 ca19 	mls	sl, r3, r9, ip
 800bef8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800befc:	2f09      	cmp	r7, #9
 800befe:	d81b      	bhi.n	800bf38 <_strtol_l.constprop.0+0xa8>
 800bf00:	463c      	mov	r4, r7
 800bf02:	42a3      	cmp	r3, r4
 800bf04:	dd27      	ble.n	800bf56 <_strtol_l.constprop.0+0xc6>
 800bf06:	1c57      	adds	r7, r2, #1
 800bf08:	d007      	beq.n	800bf1a <_strtol_l.constprop.0+0x8a>
 800bf0a:	4581      	cmp	r9, r0
 800bf0c:	d320      	bcc.n	800bf50 <_strtol_l.constprop.0+0xc0>
 800bf0e:	d101      	bne.n	800bf14 <_strtol_l.constprop.0+0x84>
 800bf10:	45a2      	cmp	sl, r4
 800bf12:	db1d      	blt.n	800bf50 <_strtol_l.constprop.0+0xc0>
 800bf14:	fb00 4003 	mla	r0, r0, r3, r4
 800bf18:	2201      	movs	r2, #1
 800bf1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf1e:	e7eb      	b.n	800bef8 <_strtol_l.constprop.0+0x68>
 800bf20:	2c2b      	cmp	r4, #43	@ 0x2b
 800bf22:	bf04      	itt	eq
 800bf24:	782c      	ldrbeq	r4, [r5, #0]
 800bf26:	1c95      	addeq	r5, r2, #2
 800bf28:	e7cf      	b.n	800beca <_strtol_l.constprop.0+0x3a>
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1da      	bne.n	800bee4 <_strtol_l.constprop.0+0x54>
 800bf2e:	2c30      	cmp	r4, #48	@ 0x30
 800bf30:	bf0c      	ite	eq
 800bf32:	2308      	moveq	r3, #8
 800bf34:	230a      	movne	r3, #10
 800bf36:	e7d5      	b.n	800bee4 <_strtol_l.constprop.0+0x54>
 800bf38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf3c:	2f19      	cmp	r7, #25
 800bf3e:	d801      	bhi.n	800bf44 <_strtol_l.constprop.0+0xb4>
 800bf40:	3c37      	subs	r4, #55	@ 0x37
 800bf42:	e7de      	b.n	800bf02 <_strtol_l.constprop.0+0x72>
 800bf44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bf48:	2f19      	cmp	r7, #25
 800bf4a:	d804      	bhi.n	800bf56 <_strtol_l.constprop.0+0xc6>
 800bf4c:	3c57      	subs	r4, #87	@ 0x57
 800bf4e:	e7d8      	b.n	800bf02 <_strtol_l.constprop.0+0x72>
 800bf50:	f04f 32ff 	mov.w	r2, #4294967295
 800bf54:	e7e1      	b.n	800bf1a <_strtol_l.constprop.0+0x8a>
 800bf56:	1c53      	adds	r3, r2, #1
 800bf58:	d108      	bne.n	800bf6c <_strtol_l.constprop.0+0xdc>
 800bf5a:	2322      	movs	r3, #34	@ 0x22
 800bf5c:	f8ce 3000 	str.w	r3, [lr]
 800bf60:	4660      	mov	r0, ip
 800bf62:	f1b8 0f00 	cmp.w	r8, #0
 800bf66:	d0a0      	beq.n	800beaa <_strtol_l.constprop.0+0x1a>
 800bf68:	1e69      	subs	r1, r5, #1
 800bf6a:	e006      	b.n	800bf7a <_strtol_l.constprop.0+0xea>
 800bf6c:	b106      	cbz	r6, 800bf70 <_strtol_l.constprop.0+0xe0>
 800bf6e:	4240      	negs	r0, r0
 800bf70:	f1b8 0f00 	cmp.w	r8, #0
 800bf74:	d099      	beq.n	800beaa <_strtol_l.constprop.0+0x1a>
 800bf76:	2a00      	cmp	r2, #0
 800bf78:	d1f6      	bne.n	800bf68 <_strtol_l.constprop.0+0xd8>
 800bf7a:	f8c8 1000 	str.w	r1, [r8]
 800bf7e:	e794      	b.n	800beaa <_strtol_l.constprop.0+0x1a>
 800bf80:	0800dfa1 	.word	0x0800dfa1

0800bf84 <strtol>:
 800bf84:	4613      	mov	r3, r2
 800bf86:	460a      	mov	r2, r1
 800bf88:	4601      	mov	r1, r0
 800bf8a:	4802      	ldr	r0, [pc, #8]	@ (800bf94 <strtol+0x10>)
 800bf8c:	6800      	ldr	r0, [r0, #0]
 800bf8e:	f7ff bf7f 	b.w	800be90 <_strtol_l.constprop.0>
 800bf92:	bf00      	nop
 800bf94:	20001a04 	.word	0x20001a04

0800bf98 <siprintf>:
 800bf98:	b40e      	push	{r1, r2, r3}
 800bf9a:	b500      	push	{lr}
 800bf9c:	b09c      	sub	sp, #112	@ 0x70
 800bf9e:	ab1d      	add	r3, sp, #116	@ 0x74
 800bfa0:	9002      	str	r0, [sp, #8]
 800bfa2:	9006      	str	r0, [sp, #24]
 800bfa4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bfa8:	4809      	ldr	r0, [pc, #36]	@ (800bfd0 <siprintf+0x38>)
 800bfaa:	9107      	str	r1, [sp, #28]
 800bfac:	9104      	str	r1, [sp, #16]
 800bfae:	4909      	ldr	r1, [pc, #36]	@ (800bfd4 <siprintf+0x3c>)
 800bfb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb4:	9105      	str	r1, [sp, #20]
 800bfb6:	6800      	ldr	r0, [r0, #0]
 800bfb8:	9301      	str	r3, [sp, #4]
 800bfba:	a902      	add	r1, sp, #8
 800bfbc:	f000 f9ca 	bl	800c354 <_svfiprintf_r>
 800bfc0:	9b02      	ldr	r3, [sp, #8]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	701a      	strb	r2, [r3, #0]
 800bfc6:	b01c      	add	sp, #112	@ 0x70
 800bfc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfcc:	b003      	add	sp, #12
 800bfce:	4770      	bx	lr
 800bfd0:	20001a04 	.word	0x20001a04
 800bfd4:	ffff0208 	.word	0xffff0208

0800bfd8 <_vsiprintf_r>:
 800bfd8:	b500      	push	{lr}
 800bfda:	b09b      	sub	sp, #108	@ 0x6c
 800bfdc:	9100      	str	r1, [sp, #0]
 800bfde:	9104      	str	r1, [sp, #16]
 800bfe0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bfe4:	9105      	str	r1, [sp, #20]
 800bfe6:	9102      	str	r1, [sp, #8]
 800bfe8:	4905      	ldr	r1, [pc, #20]	@ (800c000 <_vsiprintf_r+0x28>)
 800bfea:	9103      	str	r1, [sp, #12]
 800bfec:	4669      	mov	r1, sp
 800bfee:	f000 f9b1 	bl	800c354 <_svfiprintf_r>
 800bff2:	9b00      	ldr	r3, [sp, #0]
 800bff4:	2200      	movs	r2, #0
 800bff6:	701a      	strb	r2, [r3, #0]
 800bff8:	b01b      	add	sp, #108	@ 0x6c
 800bffa:	f85d fb04 	ldr.w	pc, [sp], #4
 800bffe:	bf00      	nop
 800c000:	ffff0208 	.word	0xffff0208

0800c004 <vsiprintf>:
 800c004:	4613      	mov	r3, r2
 800c006:	460a      	mov	r2, r1
 800c008:	4601      	mov	r1, r0
 800c00a:	4802      	ldr	r0, [pc, #8]	@ (800c014 <vsiprintf+0x10>)
 800c00c:	6800      	ldr	r0, [r0, #0]
 800c00e:	f7ff bfe3 	b.w	800bfd8 <_vsiprintf_r>
 800c012:	bf00      	nop
 800c014:	20001a04 	.word	0x20001a04

0800c018 <memset>:
 800c018:	4402      	add	r2, r0
 800c01a:	4603      	mov	r3, r0
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d100      	bne.n	800c022 <memset+0xa>
 800c020:	4770      	bx	lr
 800c022:	f803 1b01 	strb.w	r1, [r3], #1
 800c026:	e7f9      	b.n	800c01c <memset+0x4>

0800c028 <__errno>:
 800c028:	4b01      	ldr	r3, [pc, #4]	@ (800c030 <__errno+0x8>)
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	20001a04 	.word	0x20001a04

0800c034 <__libc_init_array>:
 800c034:	b570      	push	{r4, r5, r6, lr}
 800c036:	4d0d      	ldr	r5, [pc, #52]	@ (800c06c <__libc_init_array+0x38>)
 800c038:	4c0d      	ldr	r4, [pc, #52]	@ (800c070 <__libc_init_array+0x3c>)
 800c03a:	1b64      	subs	r4, r4, r5
 800c03c:	10a4      	asrs	r4, r4, #2
 800c03e:	2600      	movs	r6, #0
 800c040:	42a6      	cmp	r6, r4
 800c042:	d109      	bne.n	800c058 <__libc_init_array+0x24>
 800c044:	4d0b      	ldr	r5, [pc, #44]	@ (800c074 <__libc_init_array+0x40>)
 800c046:	4c0c      	ldr	r4, [pc, #48]	@ (800c078 <__libc_init_array+0x44>)
 800c048:	f000 fc6e 	bl	800c928 <_init>
 800c04c:	1b64      	subs	r4, r4, r5
 800c04e:	10a4      	asrs	r4, r4, #2
 800c050:	2600      	movs	r6, #0
 800c052:	42a6      	cmp	r6, r4
 800c054:	d105      	bne.n	800c062 <__libc_init_array+0x2e>
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	f855 3b04 	ldr.w	r3, [r5], #4
 800c05c:	4798      	blx	r3
 800c05e:	3601      	adds	r6, #1
 800c060:	e7ee      	b.n	800c040 <__libc_init_array+0xc>
 800c062:	f855 3b04 	ldr.w	r3, [r5], #4
 800c066:	4798      	blx	r3
 800c068:	3601      	adds	r6, #1
 800c06a:	e7f2      	b.n	800c052 <__libc_init_array+0x1e>
 800c06c:	0800e0dc 	.word	0x0800e0dc
 800c070:	0800e0dc 	.word	0x0800e0dc
 800c074:	0800e0dc 	.word	0x0800e0dc
 800c078:	0800e0e0 	.word	0x0800e0e0

0800c07c <__retarget_lock_acquire_recursive>:
 800c07c:	4770      	bx	lr

0800c07e <__retarget_lock_release_recursive>:
 800c07e:	4770      	bx	lr

0800c080 <strcpy>:
 800c080:	4603      	mov	r3, r0
 800c082:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c086:	f803 2b01 	strb.w	r2, [r3], #1
 800c08a:	2a00      	cmp	r2, #0
 800c08c:	d1f9      	bne.n	800c082 <strcpy+0x2>
 800c08e:	4770      	bx	lr

0800c090 <memcpy>:
 800c090:	440a      	add	r2, r1
 800c092:	4291      	cmp	r1, r2
 800c094:	f100 33ff 	add.w	r3, r0, #4294967295
 800c098:	d100      	bne.n	800c09c <memcpy+0xc>
 800c09a:	4770      	bx	lr
 800c09c:	b510      	push	{r4, lr}
 800c09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0a6:	4291      	cmp	r1, r2
 800c0a8:	d1f9      	bne.n	800c09e <memcpy+0xe>
 800c0aa:	bd10      	pop	{r4, pc}

0800c0ac <_free_r>:
 800c0ac:	b538      	push	{r3, r4, r5, lr}
 800c0ae:	4605      	mov	r5, r0
 800c0b0:	2900      	cmp	r1, #0
 800c0b2:	d041      	beq.n	800c138 <_free_r+0x8c>
 800c0b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0b8:	1f0c      	subs	r4, r1, #4
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	bfb8      	it	lt
 800c0be:	18e4      	addlt	r4, r4, r3
 800c0c0:	f000 f8e0 	bl	800c284 <__malloc_lock>
 800c0c4:	4a1d      	ldr	r2, [pc, #116]	@ (800c13c <_free_r+0x90>)
 800c0c6:	6813      	ldr	r3, [r2, #0]
 800c0c8:	b933      	cbnz	r3, 800c0d8 <_free_r+0x2c>
 800c0ca:	6063      	str	r3, [r4, #4]
 800c0cc:	6014      	str	r4, [r2, #0]
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0d4:	f000 b8dc 	b.w	800c290 <__malloc_unlock>
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	d908      	bls.n	800c0ee <_free_r+0x42>
 800c0dc:	6820      	ldr	r0, [r4, #0]
 800c0de:	1821      	adds	r1, r4, r0
 800c0e0:	428b      	cmp	r3, r1
 800c0e2:	bf01      	itttt	eq
 800c0e4:	6819      	ldreq	r1, [r3, #0]
 800c0e6:	685b      	ldreq	r3, [r3, #4]
 800c0e8:	1809      	addeq	r1, r1, r0
 800c0ea:	6021      	streq	r1, [r4, #0]
 800c0ec:	e7ed      	b.n	800c0ca <_free_r+0x1e>
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	b10b      	cbz	r3, 800c0f8 <_free_r+0x4c>
 800c0f4:	42a3      	cmp	r3, r4
 800c0f6:	d9fa      	bls.n	800c0ee <_free_r+0x42>
 800c0f8:	6811      	ldr	r1, [r2, #0]
 800c0fa:	1850      	adds	r0, r2, r1
 800c0fc:	42a0      	cmp	r0, r4
 800c0fe:	d10b      	bne.n	800c118 <_free_r+0x6c>
 800c100:	6820      	ldr	r0, [r4, #0]
 800c102:	4401      	add	r1, r0
 800c104:	1850      	adds	r0, r2, r1
 800c106:	4283      	cmp	r3, r0
 800c108:	6011      	str	r1, [r2, #0]
 800c10a:	d1e0      	bne.n	800c0ce <_free_r+0x22>
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	6053      	str	r3, [r2, #4]
 800c112:	4408      	add	r0, r1
 800c114:	6010      	str	r0, [r2, #0]
 800c116:	e7da      	b.n	800c0ce <_free_r+0x22>
 800c118:	d902      	bls.n	800c120 <_free_r+0x74>
 800c11a:	230c      	movs	r3, #12
 800c11c:	602b      	str	r3, [r5, #0]
 800c11e:	e7d6      	b.n	800c0ce <_free_r+0x22>
 800c120:	6820      	ldr	r0, [r4, #0]
 800c122:	1821      	adds	r1, r4, r0
 800c124:	428b      	cmp	r3, r1
 800c126:	bf04      	itt	eq
 800c128:	6819      	ldreq	r1, [r3, #0]
 800c12a:	685b      	ldreq	r3, [r3, #4]
 800c12c:	6063      	str	r3, [r4, #4]
 800c12e:	bf04      	itt	eq
 800c130:	1809      	addeq	r1, r1, r0
 800c132:	6021      	streq	r1, [r4, #0]
 800c134:	6054      	str	r4, [r2, #4]
 800c136:	e7ca      	b.n	800c0ce <_free_r+0x22>
 800c138:	bd38      	pop	{r3, r4, r5, pc}
 800c13a:	bf00      	nop
 800c13c:	2000bb18 	.word	0x2000bb18

0800c140 <sbrk_aligned>:
 800c140:	b570      	push	{r4, r5, r6, lr}
 800c142:	4e0f      	ldr	r6, [pc, #60]	@ (800c180 <sbrk_aligned+0x40>)
 800c144:	460c      	mov	r4, r1
 800c146:	6831      	ldr	r1, [r6, #0]
 800c148:	4605      	mov	r5, r0
 800c14a:	b911      	cbnz	r1, 800c152 <sbrk_aligned+0x12>
 800c14c:	f000 fba6 	bl	800c89c <_sbrk_r>
 800c150:	6030      	str	r0, [r6, #0]
 800c152:	4621      	mov	r1, r4
 800c154:	4628      	mov	r0, r5
 800c156:	f000 fba1 	bl	800c89c <_sbrk_r>
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	d103      	bne.n	800c166 <sbrk_aligned+0x26>
 800c15e:	f04f 34ff 	mov.w	r4, #4294967295
 800c162:	4620      	mov	r0, r4
 800c164:	bd70      	pop	{r4, r5, r6, pc}
 800c166:	1cc4      	adds	r4, r0, #3
 800c168:	f024 0403 	bic.w	r4, r4, #3
 800c16c:	42a0      	cmp	r0, r4
 800c16e:	d0f8      	beq.n	800c162 <sbrk_aligned+0x22>
 800c170:	1a21      	subs	r1, r4, r0
 800c172:	4628      	mov	r0, r5
 800c174:	f000 fb92 	bl	800c89c <_sbrk_r>
 800c178:	3001      	adds	r0, #1
 800c17a:	d1f2      	bne.n	800c162 <sbrk_aligned+0x22>
 800c17c:	e7ef      	b.n	800c15e <sbrk_aligned+0x1e>
 800c17e:	bf00      	nop
 800c180:	2000bb14 	.word	0x2000bb14

0800c184 <_malloc_r>:
 800c184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c188:	1ccd      	adds	r5, r1, #3
 800c18a:	f025 0503 	bic.w	r5, r5, #3
 800c18e:	3508      	adds	r5, #8
 800c190:	2d0c      	cmp	r5, #12
 800c192:	bf38      	it	cc
 800c194:	250c      	movcc	r5, #12
 800c196:	2d00      	cmp	r5, #0
 800c198:	4606      	mov	r6, r0
 800c19a:	db01      	blt.n	800c1a0 <_malloc_r+0x1c>
 800c19c:	42a9      	cmp	r1, r5
 800c19e:	d904      	bls.n	800c1aa <_malloc_r+0x26>
 800c1a0:	230c      	movs	r3, #12
 800c1a2:	6033      	str	r3, [r6, #0]
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c280 <_malloc_r+0xfc>
 800c1ae:	f000 f869 	bl	800c284 <__malloc_lock>
 800c1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c1b6:	461c      	mov	r4, r3
 800c1b8:	bb44      	cbnz	r4, 800c20c <_malloc_r+0x88>
 800c1ba:	4629      	mov	r1, r5
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f7ff ffbf 	bl	800c140 <sbrk_aligned>
 800c1c2:	1c43      	adds	r3, r0, #1
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	d158      	bne.n	800c27a <_malloc_r+0xf6>
 800c1c8:	f8d8 4000 	ldr.w	r4, [r8]
 800c1cc:	4627      	mov	r7, r4
 800c1ce:	2f00      	cmp	r7, #0
 800c1d0:	d143      	bne.n	800c25a <_malloc_r+0xd6>
 800c1d2:	2c00      	cmp	r4, #0
 800c1d4:	d04b      	beq.n	800c26e <_malloc_r+0xea>
 800c1d6:	6823      	ldr	r3, [r4, #0]
 800c1d8:	4639      	mov	r1, r7
 800c1da:	4630      	mov	r0, r6
 800c1dc:	eb04 0903 	add.w	r9, r4, r3
 800c1e0:	f000 fb5c 	bl	800c89c <_sbrk_r>
 800c1e4:	4581      	cmp	r9, r0
 800c1e6:	d142      	bne.n	800c26e <_malloc_r+0xea>
 800c1e8:	6821      	ldr	r1, [r4, #0]
 800c1ea:	1a6d      	subs	r5, r5, r1
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	f7ff ffa6 	bl	800c140 <sbrk_aligned>
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	d03a      	beq.n	800c26e <_malloc_r+0xea>
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	442b      	add	r3, r5
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	f8d8 3000 	ldr.w	r3, [r8]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	bb62      	cbnz	r2, 800c260 <_malloc_r+0xdc>
 800c206:	f8c8 7000 	str.w	r7, [r8]
 800c20a:	e00f      	b.n	800c22c <_malloc_r+0xa8>
 800c20c:	6822      	ldr	r2, [r4, #0]
 800c20e:	1b52      	subs	r2, r2, r5
 800c210:	d420      	bmi.n	800c254 <_malloc_r+0xd0>
 800c212:	2a0b      	cmp	r2, #11
 800c214:	d917      	bls.n	800c246 <_malloc_r+0xc2>
 800c216:	1961      	adds	r1, r4, r5
 800c218:	42a3      	cmp	r3, r4
 800c21a:	6025      	str	r5, [r4, #0]
 800c21c:	bf18      	it	ne
 800c21e:	6059      	strne	r1, [r3, #4]
 800c220:	6863      	ldr	r3, [r4, #4]
 800c222:	bf08      	it	eq
 800c224:	f8c8 1000 	streq.w	r1, [r8]
 800c228:	5162      	str	r2, [r4, r5]
 800c22a:	604b      	str	r3, [r1, #4]
 800c22c:	4630      	mov	r0, r6
 800c22e:	f000 f82f 	bl	800c290 <__malloc_unlock>
 800c232:	f104 000b 	add.w	r0, r4, #11
 800c236:	1d23      	adds	r3, r4, #4
 800c238:	f020 0007 	bic.w	r0, r0, #7
 800c23c:	1ac2      	subs	r2, r0, r3
 800c23e:	bf1c      	itt	ne
 800c240:	1a1b      	subne	r3, r3, r0
 800c242:	50a3      	strne	r3, [r4, r2]
 800c244:	e7af      	b.n	800c1a6 <_malloc_r+0x22>
 800c246:	6862      	ldr	r2, [r4, #4]
 800c248:	42a3      	cmp	r3, r4
 800c24a:	bf0c      	ite	eq
 800c24c:	f8c8 2000 	streq.w	r2, [r8]
 800c250:	605a      	strne	r2, [r3, #4]
 800c252:	e7eb      	b.n	800c22c <_malloc_r+0xa8>
 800c254:	4623      	mov	r3, r4
 800c256:	6864      	ldr	r4, [r4, #4]
 800c258:	e7ae      	b.n	800c1b8 <_malloc_r+0x34>
 800c25a:	463c      	mov	r4, r7
 800c25c:	687f      	ldr	r7, [r7, #4]
 800c25e:	e7b6      	b.n	800c1ce <_malloc_r+0x4a>
 800c260:	461a      	mov	r2, r3
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	42a3      	cmp	r3, r4
 800c266:	d1fb      	bne.n	800c260 <_malloc_r+0xdc>
 800c268:	2300      	movs	r3, #0
 800c26a:	6053      	str	r3, [r2, #4]
 800c26c:	e7de      	b.n	800c22c <_malloc_r+0xa8>
 800c26e:	230c      	movs	r3, #12
 800c270:	6033      	str	r3, [r6, #0]
 800c272:	4630      	mov	r0, r6
 800c274:	f000 f80c 	bl	800c290 <__malloc_unlock>
 800c278:	e794      	b.n	800c1a4 <_malloc_r+0x20>
 800c27a:	6005      	str	r5, [r0, #0]
 800c27c:	e7d6      	b.n	800c22c <_malloc_r+0xa8>
 800c27e:	bf00      	nop
 800c280:	2000bb18 	.word	0x2000bb18

0800c284 <__malloc_lock>:
 800c284:	4801      	ldr	r0, [pc, #4]	@ (800c28c <__malloc_lock+0x8>)
 800c286:	f7ff bef9 	b.w	800c07c <__retarget_lock_acquire_recursive>
 800c28a:	bf00      	nop
 800c28c:	2000bb10 	.word	0x2000bb10

0800c290 <__malloc_unlock>:
 800c290:	4801      	ldr	r0, [pc, #4]	@ (800c298 <__malloc_unlock+0x8>)
 800c292:	f7ff bef4 	b.w	800c07e <__retarget_lock_release_recursive>
 800c296:	bf00      	nop
 800c298:	2000bb10 	.word	0x2000bb10

0800c29c <__ssputs_r>:
 800c29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a0:	688e      	ldr	r6, [r1, #8]
 800c2a2:	461f      	mov	r7, r3
 800c2a4:	42be      	cmp	r6, r7
 800c2a6:	680b      	ldr	r3, [r1, #0]
 800c2a8:	4682      	mov	sl, r0
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	4690      	mov	r8, r2
 800c2ae:	d82d      	bhi.n	800c30c <__ssputs_r+0x70>
 800c2b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2b8:	d026      	beq.n	800c308 <__ssputs_r+0x6c>
 800c2ba:	6965      	ldr	r5, [r4, #20]
 800c2bc:	6909      	ldr	r1, [r1, #16]
 800c2be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2c2:	eba3 0901 	sub.w	r9, r3, r1
 800c2c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2ca:	1c7b      	adds	r3, r7, #1
 800c2cc:	444b      	add	r3, r9
 800c2ce:	106d      	asrs	r5, r5, #1
 800c2d0:	429d      	cmp	r5, r3
 800c2d2:	bf38      	it	cc
 800c2d4:	461d      	movcc	r5, r3
 800c2d6:	0553      	lsls	r3, r2, #21
 800c2d8:	d527      	bpl.n	800c32a <__ssputs_r+0x8e>
 800c2da:	4629      	mov	r1, r5
 800c2dc:	f7ff ff52 	bl	800c184 <_malloc_r>
 800c2e0:	4606      	mov	r6, r0
 800c2e2:	b360      	cbz	r0, 800c33e <__ssputs_r+0xa2>
 800c2e4:	6921      	ldr	r1, [r4, #16]
 800c2e6:	464a      	mov	r2, r9
 800c2e8:	f7ff fed2 	bl	800c090 <memcpy>
 800c2ec:	89a3      	ldrh	r3, [r4, #12]
 800c2ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2f6:	81a3      	strh	r3, [r4, #12]
 800c2f8:	6126      	str	r6, [r4, #16]
 800c2fa:	6165      	str	r5, [r4, #20]
 800c2fc:	444e      	add	r6, r9
 800c2fe:	eba5 0509 	sub.w	r5, r5, r9
 800c302:	6026      	str	r6, [r4, #0]
 800c304:	60a5      	str	r5, [r4, #8]
 800c306:	463e      	mov	r6, r7
 800c308:	42be      	cmp	r6, r7
 800c30a:	d900      	bls.n	800c30e <__ssputs_r+0x72>
 800c30c:	463e      	mov	r6, r7
 800c30e:	6820      	ldr	r0, [r4, #0]
 800c310:	4632      	mov	r2, r6
 800c312:	4641      	mov	r1, r8
 800c314:	f000 faa8 	bl	800c868 <memmove>
 800c318:	68a3      	ldr	r3, [r4, #8]
 800c31a:	1b9b      	subs	r3, r3, r6
 800c31c:	60a3      	str	r3, [r4, #8]
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	4433      	add	r3, r6
 800c322:	6023      	str	r3, [r4, #0]
 800c324:	2000      	movs	r0, #0
 800c326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c32a:	462a      	mov	r2, r5
 800c32c:	f000 fac6 	bl	800c8bc <_realloc_r>
 800c330:	4606      	mov	r6, r0
 800c332:	2800      	cmp	r0, #0
 800c334:	d1e0      	bne.n	800c2f8 <__ssputs_r+0x5c>
 800c336:	6921      	ldr	r1, [r4, #16]
 800c338:	4650      	mov	r0, sl
 800c33a:	f7ff feb7 	bl	800c0ac <_free_r>
 800c33e:	230c      	movs	r3, #12
 800c340:	f8ca 3000 	str.w	r3, [sl]
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c34a:	81a3      	strh	r3, [r4, #12]
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295
 800c350:	e7e9      	b.n	800c326 <__ssputs_r+0x8a>
	...

0800c354 <_svfiprintf_r>:
 800c354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c358:	4698      	mov	r8, r3
 800c35a:	898b      	ldrh	r3, [r1, #12]
 800c35c:	061b      	lsls	r3, r3, #24
 800c35e:	b09d      	sub	sp, #116	@ 0x74
 800c360:	4607      	mov	r7, r0
 800c362:	460d      	mov	r5, r1
 800c364:	4614      	mov	r4, r2
 800c366:	d510      	bpl.n	800c38a <_svfiprintf_r+0x36>
 800c368:	690b      	ldr	r3, [r1, #16]
 800c36a:	b973      	cbnz	r3, 800c38a <_svfiprintf_r+0x36>
 800c36c:	2140      	movs	r1, #64	@ 0x40
 800c36e:	f7ff ff09 	bl	800c184 <_malloc_r>
 800c372:	6028      	str	r0, [r5, #0]
 800c374:	6128      	str	r0, [r5, #16]
 800c376:	b930      	cbnz	r0, 800c386 <_svfiprintf_r+0x32>
 800c378:	230c      	movs	r3, #12
 800c37a:	603b      	str	r3, [r7, #0]
 800c37c:	f04f 30ff 	mov.w	r0, #4294967295
 800c380:	b01d      	add	sp, #116	@ 0x74
 800c382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c386:	2340      	movs	r3, #64	@ 0x40
 800c388:	616b      	str	r3, [r5, #20]
 800c38a:	2300      	movs	r3, #0
 800c38c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c38e:	2320      	movs	r3, #32
 800c390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c394:	f8cd 800c 	str.w	r8, [sp, #12]
 800c398:	2330      	movs	r3, #48	@ 0x30
 800c39a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c538 <_svfiprintf_r+0x1e4>
 800c39e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3a2:	f04f 0901 	mov.w	r9, #1
 800c3a6:	4623      	mov	r3, r4
 800c3a8:	469a      	mov	sl, r3
 800c3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3ae:	b10a      	cbz	r2, 800c3b4 <_svfiprintf_r+0x60>
 800c3b0:	2a25      	cmp	r2, #37	@ 0x25
 800c3b2:	d1f9      	bne.n	800c3a8 <_svfiprintf_r+0x54>
 800c3b4:	ebba 0b04 	subs.w	fp, sl, r4
 800c3b8:	d00b      	beq.n	800c3d2 <_svfiprintf_r+0x7e>
 800c3ba:	465b      	mov	r3, fp
 800c3bc:	4622      	mov	r2, r4
 800c3be:	4629      	mov	r1, r5
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7ff ff6b 	bl	800c29c <__ssputs_r>
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	f000 80a7 	beq.w	800c51a <_svfiprintf_r+0x1c6>
 800c3cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3ce:	445a      	add	r2, fp
 800c3d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 809f 	beq.w	800c51a <_svfiprintf_r+0x1c6>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f04f 32ff 	mov.w	r2, #4294967295
 800c3e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3e6:	f10a 0a01 	add.w	sl, sl, #1
 800c3ea:	9304      	str	r3, [sp, #16]
 800c3ec:	9307      	str	r3, [sp, #28]
 800c3ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3f4:	4654      	mov	r4, sl
 800c3f6:	2205      	movs	r2, #5
 800c3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3fc:	484e      	ldr	r0, [pc, #312]	@ (800c538 <_svfiprintf_r+0x1e4>)
 800c3fe:	f7f3 ff07 	bl	8000210 <memchr>
 800c402:	9a04      	ldr	r2, [sp, #16]
 800c404:	b9d8      	cbnz	r0, 800c43e <_svfiprintf_r+0xea>
 800c406:	06d0      	lsls	r0, r2, #27
 800c408:	bf44      	itt	mi
 800c40a:	2320      	movmi	r3, #32
 800c40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c410:	0711      	lsls	r1, r2, #28
 800c412:	bf44      	itt	mi
 800c414:	232b      	movmi	r3, #43	@ 0x2b
 800c416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c41a:	f89a 3000 	ldrb.w	r3, [sl]
 800c41e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c420:	d015      	beq.n	800c44e <_svfiprintf_r+0xfa>
 800c422:	9a07      	ldr	r2, [sp, #28]
 800c424:	4654      	mov	r4, sl
 800c426:	2000      	movs	r0, #0
 800c428:	f04f 0c0a 	mov.w	ip, #10
 800c42c:	4621      	mov	r1, r4
 800c42e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c432:	3b30      	subs	r3, #48	@ 0x30
 800c434:	2b09      	cmp	r3, #9
 800c436:	d94b      	bls.n	800c4d0 <_svfiprintf_r+0x17c>
 800c438:	b1b0      	cbz	r0, 800c468 <_svfiprintf_r+0x114>
 800c43a:	9207      	str	r2, [sp, #28]
 800c43c:	e014      	b.n	800c468 <_svfiprintf_r+0x114>
 800c43e:	eba0 0308 	sub.w	r3, r0, r8
 800c442:	fa09 f303 	lsl.w	r3, r9, r3
 800c446:	4313      	orrs	r3, r2
 800c448:	9304      	str	r3, [sp, #16]
 800c44a:	46a2      	mov	sl, r4
 800c44c:	e7d2      	b.n	800c3f4 <_svfiprintf_r+0xa0>
 800c44e:	9b03      	ldr	r3, [sp, #12]
 800c450:	1d19      	adds	r1, r3, #4
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	9103      	str	r1, [sp, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	bfbb      	ittet	lt
 800c45a:	425b      	neglt	r3, r3
 800c45c:	f042 0202 	orrlt.w	r2, r2, #2
 800c460:	9307      	strge	r3, [sp, #28]
 800c462:	9307      	strlt	r3, [sp, #28]
 800c464:	bfb8      	it	lt
 800c466:	9204      	strlt	r2, [sp, #16]
 800c468:	7823      	ldrb	r3, [r4, #0]
 800c46a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c46c:	d10a      	bne.n	800c484 <_svfiprintf_r+0x130>
 800c46e:	7863      	ldrb	r3, [r4, #1]
 800c470:	2b2a      	cmp	r3, #42	@ 0x2a
 800c472:	d132      	bne.n	800c4da <_svfiprintf_r+0x186>
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	1d1a      	adds	r2, r3, #4
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	9203      	str	r2, [sp, #12]
 800c47c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c480:	3402      	adds	r4, #2
 800c482:	9305      	str	r3, [sp, #20]
 800c484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c548 <_svfiprintf_r+0x1f4>
 800c488:	7821      	ldrb	r1, [r4, #0]
 800c48a:	2203      	movs	r2, #3
 800c48c:	4650      	mov	r0, sl
 800c48e:	f7f3 febf 	bl	8000210 <memchr>
 800c492:	b138      	cbz	r0, 800c4a4 <_svfiprintf_r+0x150>
 800c494:	9b04      	ldr	r3, [sp, #16]
 800c496:	eba0 000a 	sub.w	r0, r0, sl
 800c49a:	2240      	movs	r2, #64	@ 0x40
 800c49c:	4082      	lsls	r2, r0
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	3401      	adds	r4, #1
 800c4a2:	9304      	str	r3, [sp, #16]
 800c4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4a8:	4824      	ldr	r0, [pc, #144]	@ (800c53c <_svfiprintf_r+0x1e8>)
 800c4aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4ae:	2206      	movs	r2, #6
 800c4b0:	f7f3 feae 	bl	8000210 <memchr>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d036      	beq.n	800c526 <_svfiprintf_r+0x1d2>
 800c4b8:	4b21      	ldr	r3, [pc, #132]	@ (800c540 <_svfiprintf_r+0x1ec>)
 800c4ba:	bb1b      	cbnz	r3, 800c504 <_svfiprintf_r+0x1b0>
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	3307      	adds	r3, #7
 800c4c0:	f023 0307 	bic.w	r3, r3, #7
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	9303      	str	r3, [sp, #12]
 800c4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ca:	4433      	add	r3, r6
 800c4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ce:	e76a      	b.n	800c3a6 <_svfiprintf_r+0x52>
 800c4d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4d4:	460c      	mov	r4, r1
 800c4d6:	2001      	movs	r0, #1
 800c4d8:	e7a8      	b.n	800c42c <_svfiprintf_r+0xd8>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	3401      	adds	r4, #1
 800c4de:	9305      	str	r3, [sp, #20]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	f04f 0c0a 	mov.w	ip, #10
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4ec:	3a30      	subs	r2, #48	@ 0x30
 800c4ee:	2a09      	cmp	r2, #9
 800c4f0:	d903      	bls.n	800c4fa <_svfiprintf_r+0x1a6>
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d0c6      	beq.n	800c484 <_svfiprintf_r+0x130>
 800c4f6:	9105      	str	r1, [sp, #20]
 800c4f8:	e7c4      	b.n	800c484 <_svfiprintf_r+0x130>
 800c4fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4fe:	4604      	mov	r4, r0
 800c500:	2301      	movs	r3, #1
 800c502:	e7f0      	b.n	800c4e6 <_svfiprintf_r+0x192>
 800c504:	ab03      	add	r3, sp, #12
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	462a      	mov	r2, r5
 800c50a:	4b0e      	ldr	r3, [pc, #56]	@ (800c544 <_svfiprintf_r+0x1f0>)
 800c50c:	a904      	add	r1, sp, #16
 800c50e:	4638      	mov	r0, r7
 800c510:	f3af 8000 	nop.w
 800c514:	1c42      	adds	r2, r0, #1
 800c516:	4606      	mov	r6, r0
 800c518:	d1d6      	bne.n	800c4c8 <_svfiprintf_r+0x174>
 800c51a:	89ab      	ldrh	r3, [r5, #12]
 800c51c:	065b      	lsls	r3, r3, #25
 800c51e:	f53f af2d 	bmi.w	800c37c <_svfiprintf_r+0x28>
 800c522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c524:	e72c      	b.n	800c380 <_svfiprintf_r+0x2c>
 800c526:	ab03      	add	r3, sp, #12
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	462a      	mov	r2, r5
 800c52c:	4b05      	ldr	r3, [pc, #20]	@ (800c544 <_svfiprintf_r+0x1f0>)
 800c52e:	a904      	add	r1, sp, #16
 800c530:	4638      	mov	r0, r7
 800c532:	f000 f879 	bl	800c628 <_printf_i>
 800c536:	e7ed      	b.n	800c514 <_svfiprintf_r+0x1c0>
 800c538:	0800e0a1 	.word	0x0800e0a1
 800c53c:	0800e0ab 	.word	0x0800e0ab
 800c540:	00000000 	.word	0x00000000
 800c544:	0800c29d 	.word	0x0800c29d
 800c548:	0800e0a7 	.word	0x0800e0a7

0800c54c <_printf_common>:
 800c54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c550:	4616      	mov	r6, r2
 800c552:	4698      	mov	r8, r3
 800c554:	688a      	ldr	r2, [r1, #8]
 800c556:	690b      	ldr	r3, [r1, #16]
 800c558:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c55c:	4293      	cmp	r3, r2
 800c55e:	bfb8      	it	lt
 800c560:	4613      	movlt	r3, r2
 800c562:	6033      	str	r3, [r6, #0]
 800c564:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c568:	4607      	mov	r7, r0
 800c56a:	460c      	mov	r4, r1
 800c56c:	b10a      	cbz	r2, 800c572 <_printf_common+0x26>
 800c56e:	3301      	adds	r3, #1
 800c570:	6033      	str	r3, [r6, #0]
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	0699      	lsls	r1, r3, #26
 800c576:	bf42      	ittt	mi
 800c578:	6833      	ldrmi	r3, [r6, #0]
 800c57a:	3302      	addmi	r3, #2
 800c57c:	6033      	strmi	r3, [r6, #0]
 800c57e:	6825      	ldr	r5, [r4, #0]
 800c580:	f015 0506 	ands.w	r5, r5, #6
 800c584:	d106      	bne.n	800c594 <_printf_common+0x48>
 800c586:	f104 0a19 	add.w	sl, r4, #25
 800c58a:	68e3      	ldr	r3, [r4, #12]
 800c58c:	6832      	ldr	r2, [r6, #0]
 800c58e:	1a9b      	subs	r3, r3, r2
 800c590:	42ab      	cmp	r3, r5
 800c592:	dc26      	bgt.n	800c5e2 <_printf_common+0x96>
 800c594:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c598:	6822      	ldr	r2, [r4, #0]
 800c59a:	3b00      	subs	r3, #0
 800c59c:	bf18      	it	ne
 800c59e:	2301      	movne	r3, #1
 800c5a0:	0692      	lsls	r2, r2, #26
 800c5a2:	d42b      	bmi.n	800c5fc <_printf_common+0xb0>
 800c5a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5a8:	4641      	mov	r1, r8
 800c5aa:	4638      	mov	r0, r7
 800c5ac:	47c8      	blx	r9
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	d01e      	beq.n	800c5f0 <_printf_common+0xa4>
 800c5b2:	6823      	ldr	r3, [r4, #0]
 800c5b4:	6922      	ldr	r2, [r4, #16]
 800c5b6:	f003 0306 	and.w	r3, r3, #6
 800c5ba:	2b04      	cmp	r3, #4
 800c5bc:	bf02      	ittt	eq
 800c5be:	68e5      	ldreq	r5, [r4, #12]
 800c5c0:	6833      	ldreq	r3, [r6, #0]
 800c5c2:	1aed      	subeq	r5, r5, r3
 800c5c4:	68a3      	ldr	r3, [r4, #8]
 800c5c6:	bf0c      	ite	eq
 800c5c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5cc:	2500      	movne	r5, #0
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	bfc4      	itt	gt
 800c5d2:	1a9b      	subgt	r3, r3, r2
 800c5d4:	18ed      	addgt	r5, r5, r3
 800c5d6:	2600      	movs	r6, #0
 800c5d8:	341a      	adds	r4, #26
 800c5da:	42b5      	cmp	r5, r6
 800c5dc:	d11a      	bne.n	800c614 <_printf_common+0xc8>
 800c5de:	2000      	movs	r0, #0
 800c5e0:	e008      	b.n	800c5f4 <_printf_common+0xa8>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	4652      	mov	r2, sl
 800c5e6:	4641      	mov	r1, r8
 800c5e8:	4638      	mov	r0, r7
 800c5ea:	47c8      	blx	r9
 800c5ec:	3001      	adds	r0, #1
 800c5ee:	d103      	bne.n	800c5f8 <_printf_common+0xac>
 800c5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f8:	3501      	adds	r5, #1
 800c5fa:	e7c6      	b.n	800c58a <_printf_common+0x3e>
 800c5fc:	18e1      	adds	r1, r4, r3
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	2030      	movs	r0, #48	@ 0x30
 800c602:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c606:	4422      	add	r2, r4
 800c608:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c60c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c610:	3302      	adds	r3, #2
 800c612:	e7c7      	b.n	800c5a4 <_printf_common+0x58>
 800c614:	2301      	movs	r3, #1
 800c616:	4622      	mov	r2, r4
 800c618:	4641      	mov	r1, r8
 800c61a:	4638      	mov	r0, r7
 800c61c:	47c8      	blx	r9
 800c61e:	3001      	adds	r0, #1
 800c620:	d0e6      	beq.n	800c5f0 <_printf_common+0xa4>
 800c622:	3601      	adds	r6, #1
 800c624:	e7d9      	b.n	800c5da <_printf_common+0x8e>
	...

0800c628 <_printf_i>:
 800c628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c62c:	7e0f      	ldrb	r7, [r1, #24]
 800c62e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c630:	2f78      	cmp	r7, #120	@ 0x78
 800c632:	4691      	mov	r9, r2
 800c634:	4680      	mov	r8, r0
 800c636:	460c      	mov	r4, r1
 800c638:	469a      	mov	sl, r3
 800c63a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c63e:	d807      	bhi.n	800c650 <_printf_i+0x28>
 800c640:	2f62      	cmp	r7, #98	@ 0x62
 800c642:	d80a      	bhi.n	800c65a <_printf_i+0x32>
 800c644:	2f00      	cmp	r7, #0
 800c646:	f000 80d2 	beq.w	800c7ee <_printf_i+0x1c6>
 800c64a:	2f58      	cmp	r7, #88	@ 0x58
 800c64c:	f000 80b9 	beq.w	800c7c2 <_printf_i+0x19a>
 800c650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c658:	e03a      	b.n	800c6d0 <_printf_i+0xa8>
 800c65a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c65e:	2b15      	cmp	r3, #21
 800c660:	d8f6      	bhi.n	800c650 <_printf_i+0x28>
 800c662:	a101      	add	r1, pc, #4	@ (adr r1, 800c668 <_printf_i+0x40>)
 800c664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c668:	0800c6c1 	.word	0x0800c6c1
 800c66c:	0800c6d5 	.word	0x0800c6d5
 800c670:	0800c651 	.word	0x0800c651
 800c674:	0800c651 	.word	0x0800c651
 800c678:	0800c651 	.word	0x0800c651
 800c67c:	0800c651 	.word	0x0800c651
 800c680:	0800c6d5 	.word	0x0800c6d5
 800c684:	0800c651 	.word	0x0800c651
 800c688:	0800c651 	.word	0x0800c651
 800c68c:	0800c651 	.word	0x0800c651
 800c690:	0800c651 	.word	0x0800c651
 800c694:	0800c7d5 	.word	0x0800c7d5
 800c698:	0800c6ff 	.word	0x0800c6ff
 800c69c:	0800c78f 	.word	0x0800c78f
 800c6a0:	0800c651 	.word	0x0800c651
 800c6a4:	0800c651 	.word	0x0800c651
 800c6a8:	0800c7f7 	.word	0x0800c7f7
 800c6ac:	0800c651 	.word	0x0800c651
 800c6b0:	0800c6ff 	.word	0x0800c6ff
 800c6b4:	0800c651 	.word	0x0800c651
 800c6b8:	0800c651 	.word	0x0800c651
 800c6bc:	0800c797 	.word	0x0800c797
 800c6c0:	6833      	ldr	r3, [r6, #0]
 800c6c2:	1d1a      	adds	r2, r3, #4
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6032      	str	r2, [r6, #0]
 800c6c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e09d      	b.n	800c810 <_printf_i+0x1e8>
 800c6d4:	6833      	ldr	r3, [r6, #0]
 800c6d6:	6820      	ldr	r0, [r4, #0]
 800c6d8:	1d19      	adds	r1, r3, #4
 800c6da:	6031      	str	r1, [r6, #0]
 800c6dc:	0606      	lsls	r6, r0, #24
 800c6de:	d501      	bpl.n	800c6e4 <_printf_i+0xbc>
 800c6e0:	681d      	ldr	r5, [r3, #0]
 800c6e2:	e003      	b.n	800c6ec <_printf_i+0xc4>
 800c6e4:	0645      	lsls	r5, r0, #25
 800c6e6:	d5fb      	bpl.n	800c6e0 <_printf_i+0xb8>
 800c6e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6ec:	2d00      	cmp	r5, #0
 800c6ee:	da03      	bge.n	800c6f8 <_printf_i+0xd0>
 800c6f0:	232d      	movs	r3, #45	@ 0x2d
 800c6f2:	426d      	negs	r5, r5
 800c6f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6f8:	4859      	ldr	r0, [pc, #356]	@ (800c860 <_printf_i+0x238>)
 800c6fa:	230a      	movs	r3, #10
 800c6fc:	e011      	b.n	800c722 <_printf_i+0xfa>
 800c6fe:	6821      	ldr	r1, [r4, #0]
 800c700:	6833      	ldr	r3, [r6, #0]
 800c702:	0608      	lsls	r0, r1, #24
 800c704:	f853 5b04 	ldr.w	r5, [r3], #4
 800c708:	d402      	bmi.n	800c710 <_printf_i+0xe8>
 800c70a:	0649      	lsls	r1, r1, #25
 800c70c:	bf48      	it	mi
 800c70e:	b2ad      	uxthmi	r5, r5
 800c710:	2f6f      	cmp	r7, #111	@ 0x6f
 800c712:	4853      	ldr	r0, [pc, #332]	@ (800c860 <_printf_i+0x238>)
 800c714:	6033      	str	r3, [r6, #0]
 800c716:	bf14      	ite	ne
 800c718:	230a      	movne	r3, #10
 800c71a:	2308      	moveq	r3, #8
 800c71c:	2100      	movs	r1, #0
 800c71e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c722:	6866      	ldr	r6, [r4, #4]
 800c724:	60a6      	str	r6, [r4, #8]
 800c726:	2e00      	cmp	r6, #0
 800c728:	bfa2      	ittt	ge
 800c72a:	6821      	ldrge	r1, [r4, #0]
 800c72c:	f021 0104 	bicge.w	r1, r1, #4
 800c730:	6021      	strge	r1, [r4, #0]
 800c732:	b90d      	cbnz	r5, 800c738 <_printf_i+0x110>
 800c734:	2e00      	cmp	r6, #0
 800c736:	d04b      	beq.n	800c7d0 <_printf_i+0x1a8>
 800c738:	4616      	mov	r6, r2
 800c73a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c73e:	fb03 5711 	mls	r7, r3, r1, r5
 800c742:	5dc7      	ldrb	r7, [r0, r7]
 800c744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c748:	462f      	mov	r7, r5
 800c74a:	42bb      	cmp	r3, r7
 800c74c:	460d      	mov	r5, r1
 800c74e:	d9f4      	bls.n	800c73a <_printf_i+0x112>
 800c750:	2b08      	cmp	r3, #8
 800c752:	d10b      	bne.n	800c76c <_printf_i+0x144>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	07df      	lsls	r7, r3, #31
 800c758:	d508      	bpl.n	800c76c <_printf_i+0x144>
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	6861      	ldr	r1, [r4, #4]
 800c75e:	4299      	cmp	r1, r3
 800c760:	bfde      	ittt	le
 800c762:	2330      	movle	r3, #48	@ 0x30
 800c764:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c76c:	1b92      	subs	r2, r2, r6
 800c76e:	6122      	str	r2, [r4, #16]
 800c770:	f8cd a000 	str.w	sl, [sp]
 800c774:	464b      	mov	r3, r9
 800c776:	aa03      	add	r2, sp, #12
 800c778:	4621      	mov	r1, r4
 800c77a:	4640      	mov	r0, r8
 800c77c:	f7ff fee6 	bl	800c54c <_printf_common>
 800c780:	3001      	adds	r0, #1
 800c782:	d14a      	bne.n	800c81a <_printf_i+0x1f2>
 800c784:	f04f 30ff 	mov.w	r0, #4294967295
 800c788:	b004      	add	sp, #16
 800c78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c78e:	6823      	ldr	r3, [r4, #0]
 800c790:	f043 0320 	orr.w	r3, r3, #32
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	4833      	ldr	r0, [pc, #204]	@ (800c864 <_printf_i+0x23c>)
 800c798:	2778      	movs	r7, #120	@ 0x78
 800c79a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	6831      	ldr	r1, [r6, #0]
 800c7a2:	061f      	lsls	r7, r3, #24
 800c7a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7a8:	d402      	bmi.n	800c7b0 <_printf_i+0x188>
 800c7aa:	065f      	lsls	r7, r3, #25
 800c7ac:	bf48      	it	mi
 800c7ae:	b2ad      	uxthmi	r5, r5
 800c7b0:	6031      	str	r1, [r6, #0]
 800c7b2:	07d9      	lsls	r1, r3, #31
 800c7b4:	bf44      	itt	mi
 800c7b6:	f043 0320 	orrmi.w	r3, r3, #32
 800c7ba:	6023      	strmi	r3, [r4, #0]
 800c7bc:	b11d      	cbz	r5, 800c7c6 <_printf_i+0x19e>
 800c7be:	2310      	movs	r3, #16
 800c7c0:	e7ac      	b.n	800c71c <_printf_i+0xf4>
 800c7c2:	4827      	ldr	r0, [pc, #156]	@ (800c860 <_printf_i+0x238>)
 800c7c4:	e7e9      	b.n	800c79a <_printf_i+0x172>
 800c7c6:	6823      	ldr	r3, [r4, #0]
 800c7c8:	f023 0320 	bic.w	r3, r3, #32
 800c7cc:	6023      	str	r3, [r4, #0]
 800c7ce:	e7f6      	b.n	800c7be <_printf_i+0x196>
 800c7d0:	4616      	mov	r6, r2
 800c7d2:	e7bd      	b.n	800c750 <_printf_i+0x128>
 800c7d4:	6833      	ldr	r3, [r6, #0]
 800c7d6:	6825      	ldr	r5, [r4, #0]
 800c7d8:	6961      	ldr	r1, [r4, #20]
 800c7da:	1d18      	adds	r0, r3, #4
 800c7dc:	6030      	str	r0, [r6, #0]
 800c7de:	062e      	lsls	r6, r5, #24
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	d501      	bpl.n	800c7e8 <_printf_i+0x1c0>
 800c7e4:	6019      	str	r1, [r3, #0]
 800c7e6:	e002      	b.n	800c7ee <_printf_i+0x1c6>
 800c7e8:	0668      	lsls	r0, r5, #25
 800c7ea:	d5fb      	bpl.n	800c7e4 <_printf_i+0x1bc>
 800c7ec:	8019      	strh	r1, [r3, #0]
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	6123      	str	r3, [r4, #16]
 800c7f2:	4616      	mov	r6, r2
 800c7f4:	e7bc      	b.n	800c770 <_printf_i+0x148>
 800c7f6:	6833      	ldr	r3, [r6, #0]
 800c7f8:	1d1a      	adds	r2, r3, #4
 800c7fa:	6032      	str	r2, [r6, #0]
 800c7fc:	681e      	ldr	r6, [r3, #0]
 800c7fe:	6862      	ldr	r2, [r4, #4]
 800c800:	2100      	movs	r1, #0
 800c802:	4630      	mov	r0, r6
 800c804:	f7f3 fd04 	bl	8000210 <memchr>
 800c808:	b108      	cbz	r0, 800c80e <_printf_i+0x1e6>
 800c80a:	1b80      	subs	r0, r0, r6
 800c80c:	6060      	str	r0, [r4, #4]
 800c80e:	6863      	ldr	r3, [r4, #4]
 800c810:	6123      	str	r3, [r4, #16]
 800c812:	2300      	movs	r3, #0
 800c814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c818:	e7aa      	b.n	800c770 <_printf_i+0x148>
 800c81a:	6923      	ldr	r3, [r4, #16]
 800c81c:	4632      	mov	r2, r6
 800c81e:	4649      	mov	r1, r9
 800c820:	4640      	mov	r0, r8
 800c822:	47d0      	blx	sl
 800c824:	3001      	adds	r0, #1
 800c826:	d0ad      	beq.n	800c784 <_printf_i+0x15c>
 800c828:	6823      	ldr	r3, [r4, #0]
 800c82a:	079b      	lsls	r3, r3, #30
 800c82c:	d413      	bmi.n	800c856 <_printf_i+0x22e>
 800c82e:	68e0      	ldr	r0, [r4, #12]
 800c830:	9b03      	ldr	r3, [sp, #12]
 800c832:	4298      	cmp	r0, r3
 800c834:	bfb8      	it	lt
 800c836:	4618      	movlt	r0, r3
 800c838:	e7a6      	b.n	800c788 <_printf_i+0x160>
 800c83a:	2301      	movs	r3, #1
 800c83c:	4632      	mov	r2, r6
 800c83e:	4649      	mov	r1, r9
 800c840:	4640      	mov	r0, r8
 800c842:	47d0      	blx	sl
 800c844:	3001      	adds	r0, #1
 800c846:	d09d      	beq.n	800c784 <_printf_i+0x15c>
 800c848:	3501      	adds	r5, #1
 800c84a:	68e3      	ldr	r3, [r4, #12]
 800c84c:	9903      	ldr	r1, [sp, #12]
 800c84e:	1a5b      	subs	r3, r3, r1
 800c850:	42ab      	cmp	r3, r5
 800c852:	dcf2      	bgt.n	800c83a <_printf_i+0x212>
 800c854:	e7eb      	b.n	800c82e <_printf_i+0x206>
 800c856:	2500      	movs	r5, #0
 800c858:	f104 0619 	add.w	r6, r4, #25
 800c85c:	e7f5      	b.n	800c84a <_printf_i+0x222>
 800c85e:	bf00      	nop
 800c860:	0800e0b2 	.word	0x0800e0b2
 800c864:	0800e0c3 	.word	0x0800e0c3

0800c868 <memmove>:
 800c868:	4288      	cmp	r0, r1
 800c86a:	b510      	push	{r4, lr}
 800c86c:	eb01 0402 	add.w	r4, r1, r2
 800c870:	d902      	bls.n	800c878 <memmove+0x10>
 800c872:	4284      	cmp	r4, r0
 800c874:	4623      	mov	r3, r4
 800c876:	d807      	bhi.n	800c888 <memmove+0x20>
 800c878:	1e43      	subs	r3, r0, #1
 800c87a:	42a1      	cmp	r1, r4
 800c87c:	d008      	beq.n	800c890 <memmove+0x28>
 800c87e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c882:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c886:	e7f8      	b.n	800c87a <memmove+0x12>
 800c888:	4402      	add	r2, r0
 800c88a:	4601      	mov	r1, r0
 800c88c:	428a      	cmp	r2, r1
 800c88e:	d100      	bne.n	800c892 <memmove+0x2a>
 800c890:	bd10      	pop	{r4, pc}
 800c892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c89a:	e7f7      	b.n	800c88c <memmove+0x24>

0800c89c <_sbrk_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	4d06      	ldr	r5, [pc, #24]	@ (800c8b8 <_sbrk_r+0x1c>)
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	4608      	mov	r0, r1
 800c8a6:	602b      	str	r3, [r5, #0]
 800c8a8:	f7f3 feea 	bl	8000680 <_sbrk>
 800c8ac:	1c43      	adds	r3, r0, #1
 800c8ae:	d102      	bne.n	800c8b6 <_sbrk_r+0x1a>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	b103      	cbz	r3, 800c8b6 <_sbrk_r+0x1a>
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	bd38      	pop	{r3, r4, r5, pc}
 800c8b8:	2000bb0c 	.word	0x2000bb0c

0800c8bc <_realloc_r>:
 800c8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8c0:	4680      	mov	r8, r0
 800c8c2:	4615      	mov	r5, r2
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	b921      	cbnz	r1, 800c8d2 <_realloc_r+0x16>
 800c8c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	f7ff bc59 	b.w	800c184 <_malloc_r>
 800c8d2:	b92a      	cbnz	r2, 800c8e0 <_realloc_r+0x24>
 800c8d4:	f7ff fbea 	bl	800c0ac <_free_r>
 800c8d8:	2400      	movs	r4, #0
 800c8da:	4620      	mov	r0, r4
 800c8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e0:	f000 f81a 	bl	800c918 <_malloc_usable_size_r>
 800c8e4:	4285      	cmp	r5, r0
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	d802      	bhi.n	800c8f0 <_realloc_r+0x34>
 800c8ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c8ee:	d8f4      	bhi.n	800c8da <_realloc_r+0x1e>
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	f7ff fc46 	bl	800c184 <_malloc_r>
 800c8f8:	4607      	mov	r7, r0
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d0ec      	beq.n	800c8d8 <_realloc_r+0x1c>
 800c8fe:	42b5      	cmp	r5, r6
 800c900:	462a      	mov	r2, r5
 800c902:	4621      	mov	r1, r4
 800c904:	bf28      	it	cs
 800c906:	4632      	movcs	r2, r6
 800c908:	f7ff fbc2 	bl	800c090 <memcpy>
 800c90c:	4621      	mov	r1, r4
 800c90e:	4640      	mov	r0, r8
 800c910:	f7ff fbcc 	bl	800c0ac <_free_r>
 800c914:	463c      	mov	r4, r7
 800c916:	e7e0      	b.n	800c8da <_realloc_r+0x1e>

0800c918 <_malloc_usable_size_r>:
 800c918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c91c:	1f18      	subs	r0, r3, #4
 800c91e:	2b00      	cmp	r3, #0
 800c920:	bfbc      	itt	lt
 800c922:	580b      	ldrlt	r3, [r1, r0]
 800c924:	18c0      	addlt	r0, r0, r3
 800c926:	4770      	bx	lr

0800c928 <_init>:
 800c928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92a:	bf00      	nop
 800c92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92e:	bc08      	pop	{r3}
 800c930:	469e      	mov	lr, r3
 800c932:	4770      	bx	lr

0800c934 <_fini>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	bf00      	nop
 800c938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c93a:	bc08      	pop	{r3}
 800c93c:	469e      	mov	lr, r3
 800c93e:	4770      	bx	lr
